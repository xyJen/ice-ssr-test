import { isMiniApp, isWeChatMiniProgram, isByteDanceMicroApp, isBaiduSmartProgram, isKuaiShouMiniProgram } from 'universal-env';
import { fireListeners } from './listeners';
import { REPLACE, POP, PUSH } from './constants';
var __routerMap = {};
var apiCore;
if (isMiniApp) {
    apiCore = my;
}
else if (isWeChatMiniProgram) {
    apiCore = wx;
}
else if (isByteDanceMicroApp) {
    apiCore = tt;
}
else if (isBaiduSmartProgram) {
    apiCore = swan;
}
else if (isKuaiShouMiniProgram) {
    apiCore = ks;
}
function redirectTo(location, options) {
    options.success = function () {
        fireListeners(location, REPLACE);
    };
    apiCore.redirectTo(options);
}
function navigateTo(location, options) {
    options.success = function () {
        fireListeners(location, PUSH);
    };
    apiCore.navigateTo(options);
}
function navigateBack(location, options) {
    apiCore.navigateBack(options);
    fireListeners(location, POP);
}
/**
 * Navigate to given path.
 */
function push(location, path, query) {
    return navigateTo(location, { url: generateUrl(path, query) });
}
/**
 * Navigate replace.
 */
function replace(location, path, query) {
    return redirectTo(location, { url: generateUrl(path, query) });
}
/**
 * Unsupported in miniapp.
 */
function go() {
    throw new Error('Unsupported go in miniapp.');
}
/**
 * Navigate back.
 */
function back(location, n) {
    if (n === void 0) { n = 1; }
    return navigateBack(location, { delta: n });
}
/**
 * Navigate back.
 */
function goBack(location, n) {
    if (n === void 0) { n = 1; }
    return navigateBack(location, { delta: n });
}
/**
 * Unsupported in miniapp.
 */
function goForward() {
    throw new Error('Unsupported goForward in miniapp.');
}
/**
 * Unsupported in miniapp.
 * @return {boolean} Always true.
 */
function canGo() {
    return true;
}
/**
 * Generate MiniApp url
 * @param {string} path
 * @param {object} query
 */
function generateUrl(path, query) {
    var _a = path.split('?'), pathname = _a[0], search = _a[1];
    var miniappPath = __routerMap[pathname];
    if (!miniappPath) {
        throw new Error("Path ".concat(path, " is not found"));
    }
    if (query) {
        if (search) {
            search += "&".concat(stringifyQuery(query));
        }
        else {
            search = stringifyQuery(query);
        }
    }
    return search ? "/".concat(miniappPath, "?").concat(search) : "/".concat(miniappPath);
}
/**
 * Stringify query
 * @param {object} query - route query
 * @return {string}
 */
function stringifyQuery(query) {
    return Object.keys(query).reduce(function (total, nextKey, index) {
        return "".concat(total).concat(index ? '&' : '').concat(nextKey, "=").concat(query[nextKey]);
    }, '');
}
export function __updateRouterMap(routes) {
    routes.map(function (route) {
        __routerMap[route.path] = route.source;
    });
}
export default function generateActions(location) {
    var actions = {
        push: push,
        replace: replace,
        back: back,
        go: go,
        canGo: canGo,
        goForward: goForward,
        goBack: goBack
    };
    return Object.keys(actions).reduce(function (result, actionName) {
        result[actionName] = actions[actionName].bind(null, location);
        return result;
    }, {});
}
