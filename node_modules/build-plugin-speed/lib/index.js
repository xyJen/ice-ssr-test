"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pluginBuildSpeed_1 = require("./pluginBuildSpeed");
var plugin = function (_a) {
    var context = _a.context, onHook = _a.onHook, registerCliOption = _a.registerCliOption, applyMethod = _a.applyMethod, modifyUserConfig = _a.modifyUserConfig;
    var commandArgs = context.commandArgs, command = context.command, userConfig = context.userConfig;
    // register cli option
    registerCliOption({
        name: 'build-speed',
        commands: ['start', 'build'],
    });
    if (commandArgs.buildSpeed) {
        if (!userConfig.vite) {
            // eslint-disable-next-line global-require
            var SpeedMeasurePlugin = require('@builder/pack/deps/speed-measure-webpack-plugin');
            var smp_1 = new SpeedMeasurePlugin({
                // https://github.com/stephencookdev/speed-measure-webpack-plugin/issues/167
                // ignore plugins with do not work properly with speed-measure-webpack-plugin
                ignorePlugins: ['MiniCssExtractPlugin'],
                loaderTopFiles: 10,
            });
            // @ts-ignore
            onHook("before.".concat(command, ".load"), function (_a) {
                var configArr = _a.webpackConfig;
                configArr.forEach(function (item) {
                    var origConfig = item.chainConfig;
                    var wrappedConfig = smp_1.wrap(origConfig.toConfig());
                    item.chainConfig = new Proxy(origConfig, {
                        get: function (target, property) {
                            if (property === 'toConfig') {
                                return function () { return wrappedConfig; };
                            }
                            return target[property];
                        },
                    });
                });
            });
        }
        else {
            modifyUserConfig('vite.plugins', [(0, pluginBuildSpeed_1.pluginBuildSpeed)()], { deepmerge: true });
            onHook('before.start.run', function (_a) {
                var viteConfig = _a.config;
                viteConfig.plugins = viteConfig.plugins.map(function (vitePlugin) { return (0, pluginBuildSpeed_1.wrapPlugin)(vitePlugin); });
            });
        }
    }
    // add runtime plugin only --build-speed is configured in mode vite
    if (!commandArgs.buildSpeed || !userConfig.vite) {
        applyMethod('addDisableRuntimePlugin', 'build-plugin-speed');
    }
};
exports.default = plugin;
//# sourceMappingURL=index.js.map