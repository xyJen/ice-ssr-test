"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginBuildSpeed = exports.wrapPlugin = void 0;
var perf_hooks_1 = require("perf_hooks");
var chalk_1 = require("chalk");
var PluginSpeed = /** @class */ (function () {
    function PluginSpeed() {
        this.speedData = {};
    }
    PluginSpeed.prototype.record = function (pluginName, id, time) {
        if (!this.speedData[pluginName]) {
            this.speedData[pluginName] = {};
        }
        this.speedData[pluginName][id] = Number(time.toFixed(2));
    };
    PluginSpeed.prototype.clear = function () {
        this.speedData = {};
    };
    PluginSpeed.prototype.colors = function (text, time) {
        var textModifier = chalk_1.default.bold;
        if (time > 100)
            textModifier = textModifier.red;
        else if (time > 50)
            textModifier = textModifier.yellow;
        else
            textModifier = textModifier.green;
        return textModifier(String(text));
    };
    PluginSpeed.prototype.formateMsg = function () {
        var _this = this;
        // calculate time cost of each plugin
        var pluginMsg = {};
        var pluginNames = Object.keys(this.speedData);
        pluginNames.forEach(function (pluginName) {
            var pluginData = _this.speedData[pluginName];
            var ids = Object.keys(pluginData);
            ids.sort(function (a, b) {
                return pluginData[b] - pluginData[a];
            });
            var timeCost = ids.reduce(function (pre, curr) { return pre + pluginData[curr]; }, 0);
            pluginMsg[pluginName] = {
                timeCost: timeCost,
                msg: [
                    "\nplugin name: ".concat(chalk_1.default.bold(pluginName)),
                    "time cost: ".concat(_this.colors("".concat(timeCost.toFixed(2), "ms"), timeCost)),
                    "files that take the most time per plugin (TOP 5): ".concat(ids.slice(0, 5).map(function (id) { return "\n".concat(id, " (").concat(_this.colors("".concat(pluginData[id], "ms"), pluginData[id]), ")"); }))
                ].join('\n'),
            };
        });
        pluginNames.sort(function (a, b) {
            return pluginMsg[b].timeCost - pluginMsg[a].timeCost;
        });
        pluginNames.forEach(function (pluginName) {
            console.log(pluginMsg[pluginName].msg);
        });
        // clear data after log
        this.clear();
    };
    return PluginSpeed;
}());
var pluginSpeed = new PluginSpeed();
function wrapPlugin(plugin) {
    if (plugin.transform) {
        var _transform_1 = plugin.transform;
        plugin.transform = function (code, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var transformStart, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            transformStart = perf_hooks_1.performance.now();
                            return [4 /*yield*/, _transform_1.call(this, code, id, options)];
                        case 1:
                            result = _a.sent();
                            pluginSpeed.record(plugin.name, id, perf_hooks_1.performance.now() - transformStart);
                            return [2 /*return*/, result];
                    }
                });
            });
        };
    }
    return plugin;
}
exports.wrapPlugin = wrapPlugin;
function pluginBuildSpeed() {
    return {
        name: 'vite-plugin-build-speed',
        enforce: 'pre',
        configureServer: function (_a) {
            var _this = this;
            var app = _a.middlewares;
            // clear data before every start
            pluginSpeed.clear();
            return function () {
                app.use(function (req, res, next) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (req.originalUrl === '/__log_speed__') {
                            pluginSpeed.formateMsg();
                        }
                        next();
                        return [2 /*return*/];
                    });
                }); });
            };
        }
    };
}
exports.pluginBuildSpeed = pluginBuildSpeed;
//# sourceMappingURL=pluginBuildSpeed.js.map