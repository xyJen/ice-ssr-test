"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs-extra");
var app_helpers_1 = require("@builder/app-helpers");
var mpa_config_1 = require("@builder/mpa-config");
var plugin = function (api) {
    var _a;
    var context = api.context, registerUserConfig = api.registerUserConfig, registerCliOption = api.registerCliOption, modifyUserConfig = api.modifyUserConfig, onGetWebpackConfig = api.onGetWebpackConfig, log = api.log, setValue = api.setValue, getValue = api.getValue, applyMethod = api.applyMethod, onHook = api.onHook;
    var rootDir = context.rootDir, userConfig = context.userConfig, commandArgs = context.commandArgs, command = context.command;
    var mpa = userConfig.mpa;
    // register mpa in build.json
    registerUserConfig({
        name: 'mpa'
    });
    // support --mpa-entry to specify mpa entry
    registerCliOption({
        name: 'mpa-entry',
        commands: ['start'],
    });
    if (mpa) {
        var mpaEntries = (0, app_helpers_1.getMpaEntries)(api);
        var entries_1 = mpaEntries.reduce(function (acc, _a) {
            var _b;
            var entryName = _a.entryName, entryPath = _a.entryPath;
            return __assign(__assign({}, acc), (_b = {}, _b[entryName] = entryPath, _b));
        }, {});
        var finalEntries_1 = {};
        if (commandArgs.mpaEntry) {
            var arr = commandArgs.mpaEntry.split(',');
            arr.forEach(function (pageName) {
                var entryName = pageName.toLocaleLowerCase();
                if (entries_1[entryName]) {
                    finalEntries_1[entryName] = entries_1[entryName];
                }
            });
            if (Object.keys(finalEntries_1).length > 0) {
                entries_1 = finalEntries_1;
                log.info('已启用 --mpa-entry 指定多页入口 \n', JSON.stringify(entries_1));
            }
            else {
                log.warn("--mpa-entry ".concat(commandArgs.entry), '未能匹配到指定入口');
            }
        }
        else {
            log.info('使用多页面模式 \n', JSON.stringify(entries_1));
        }
        var mpaRewrites_1 = ((_a = mpa) === null || _a === void 0 ? void 0 : _a.rewrites) || {};
        var serverPath = void 0;
        if (commandArgs.mpaEntry) {
            var arr = commandArgs.mpaEntry.split(',');
            var pageName = arr[0].toLocaleLowerCase();
            serverPath = mpaRewrites_1[pageName] || pageName;
        }
        else {
            var defaultEntryNames = Object.keys(entries_1);
            var pageName = '';
            if (typeof mpa.openPage === 'string') {
                pageName = mpa.openPage.split('.html')[0];
            }
            else {
                pageName = defaultEntryNames[0];
            }
            // compatible with openPage configured with upper camel case
            var pageNameLowerCase = pageName.toLocaleLowerCase();
            serverPath = mpaRewrites_1[pageNameLowerCase] || pageNameLowerCase;
        }
        setValue('SERVER_PATH', serverPath);
        var parsedEntries_1 = null;
        var redirectEntries_1 = [];
        // compatible with undefined TEMP_PATH
        // if disableRuntime is true, do not generate mpa entries
        if (getValue('TEMP_PATH')) {
            parsedEntries_1 = (0, mpa_config_1.generateMPAEntries)(api, {
                executeGenerateTasks: command !== 'build' || !userConfig.optimizeRuntime,
                entries: mpaEntries,
                framework: 'react',
                targetDir: getValue('TEMP_PATH'),
            });
        }
        var finalMPAEntries_1 = {};
        if (parsedEntries_1) {
            Object.keys(parsedEntries_1).forEach(function (entryKey) {
                var _a = parsedEntries_1[entryKey], finalEntry = _a.finalEntry, runAppPath = _a.runAppPath;
                finalMPAEntries_1[entryKey] = finalEntry;
                if (runAppPath) {
                    redirectEntries_1.push({
                        entryPath: finalEntry,
                        runAppPath: runAppPath,
                    });
                }
            });
            if (userConfig.optimizeRuntime) {
                onHook('before.build.load', function (options) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, Promise.all(Object.keys(parsedEntries_1).map(function (entryKey) { return __awaiter(void 0, void 0, void 0, function () {
                                    // 仅针对使用了运行时能力的入口进行分析
                                    function addDisableRuntime(pluginName) {
                                        generator.addDisableRuntime(pluginName);
                                        log.info('[analyze]', "".concat(pluginName, " removed after runtime analyse"));
                                    }
                                    var _a, generator, generateTasks, entryPath, _b, viteConfig, webpackConfig, alias, mode, runtimeUsedMap_1;
                                    var _c, _d, _e, _f, _g;
                                    return __generator(this, function (_h) {
                                        switch (_h.label) {
                                            case 0:
                                                _a = parsedEntries_1[entryKey], generator = _a.generator, generateTasks = _a.generateTasks, entryPath = _a.entryPath;
                                                if (!generator) return [3 /*break*/, 2];
                                                _b = options, viteConfig = _b.viteConfig, webpackConfig = _b.webpackConfig;
                                                alias = void 0;
                                                mode = 'webpack';
                                                if (viteConfig) {
                                                    alias = (_c = viteConfig === null || viteConfig === void 0 ? void 0 : viteConfig.resolve) === null || _c === void 0 ? void 0 : _c.alias;
                                                    mode = 'vite';
                                                }
                                                else if (webpackConfig) {
                                                    alias = (_g = (_f = (_e = (_d = webpackConfig === null || webpackConfig === void 0 ? void 0 : webpackConfig[0].chainConfig) === null || _d === void 0 ? void 0 : _d.toConfig) === null || _e === void 0 ? void 0 : _e.call(_d)) === null || _f === void 0 ? void 0 : _f.resolve) === null || _g === void 0 ? void 0 : _g.alias;
                                                }
                                                return [4 /*yield*/, (0, app_helpers_1.analyzeRuntime)([entryPath], {
                                                        // SPA 下有目录规范上更加精准的判断， MPA 通过 createStore 引入进行判断
                                                        customRuntimeRules: { 'build-plugin-ice-store': ['createStore'] },
                                                        rootDir: rootDir,
                                                        mode: mode,
                                                        alias: alias,
                                                        analyzeRelativeImport: true,
                                                    })];
                                            case 1:
                                                runtimeUsedMap_1 = _h.sent();
                                                Object.keys(runtimeUsedMap_1).forEach(function (pluginName) {
                                                    var isUsed = runtimeUsedMap_1[pluginName];
                                                    if (!isUsed) {
                                                        if (pluginName === 'build-plugin-ice-auth') {
                                                            try {
                                                                var hasAuthConfig = (0, app_helpers_1.analyzeAuth)(entryPath);
                                                                if (!hasAuthConfig) {
                                                                    addDisableRuntime(pluginName);
                                                                }
                                                            }
                                                            catch (e) {
                                                                console.log('[Error] errors occurred with analyze runApp');
                                                            }
                                                        }
                                                        else {
                                                            addDisableRuntime(pluginName);
                                                        }
                                                    }
                                                });
                                                (generateTasks || []).forEach(function (generateTask) {
                                                    generateTask();
                                                });
                                                _h.label = 2;
                                            case 2: return [2 /*return*/];
                                        }
                                    });
                                }); }))];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            }
        }
        else {
            finalMPAEntries_1 = entries_1;
        }
        // modify entry
        modifyUserConfig('entry', finalMPAEntries_1);
        if (redirectEntries_1.length > 0) {
            applyMethod('addImportDeclaration', {
                multipleSource: {
                    runApp: redirectEntries_1.map(function (_a) {
                        var entryPath = _a.entryPath, runAppPath = _a.runAppPath;
                        return ({
                            filename: entryPath,
                            value: (0, app_helpers_1.formatPath)(runAppPath),
                            type: 'normal',
                        });
                    }),
                },
            });
        }
        // set page template
        onGetWebpackConfig(function (config) {
            var _a;
            setPageTemplate(rootDir, entries_1, mpa.template || {}, config, setValue);
            // disable mpa rewrite rules when config mpa.rewrites as false
            if (((_a = userConfig.mpa) === null || _a === void 0 ? void 0 : _a.rewrites) !== false) {
                config.devServer.historyApiFallback({
                    rewrites: Object.keys(entries_1).map(function (pageName) {
                        return {
                            from: new RegExp("^/".concat(mpaRewrites_1[pageName] || pageName, "/*")),
                            to: "/".concat(pageName, ".html"),
                        };
                    })
                });
            }
        });
    }
};
function setPageTemplate(rootDir, entries, template, config, setValue) {
    if (template === void 0) { template = {}; }
    var templateNames = Object.keys(template);
    var entryNames = {};
    templateNames.forEach(function (templateName) {
        template[templateName].forEach(function (entryName) {
            var key = entryName.toLocaleLowerCase();
            entryNames[key] = templateName;
        });
    });
    var pages = {};
    var defaultEntryNames = Object.keys(entries);
    defaultEntryNames.forEach(function (defaultEntryName) {
        var htmlPluginKey = "HtmlWebpackPlugin_".concat(defaultEntryName);
        if (config.plugins.get(htmlPluginKey)) {
            var htmlPluginOption_1 = {};
            // modify html template if userConfig mpa.template is specified
            if (entryNames[defaultEntryName]) {
                var entryTemplate = path.join(rootDir, 'public', entryNames[defaultEntryName]);
                if (fs.existsSync(entryTemplate)) {
                    htmlPluginOption_1.template = entryTemplate;
                }
            }
            config.plugin(htmlPluginKey).tap(function (_a) {
                var args = _a[0];
                htmlPluginOption_1.templateParameters = __assign(__assign({}, (args.templateParameters || {})), { pageName: defaultEntryName });
                var item = __assign(__assign({}, args), htmlPluginOption_1);
                pages[defaultEntryName] = item;
                return [item];
            });
        }
    });
    setValue('MPA_PAGES', pages);
}
exports.default = plugin;
//# sourceMappingURL=index.js.map