"use strict";
var require_hook_1 = require("./require-hook");
// eslint-disable-next-line
var chalk = require('chalk');
var getDynamicPlugins = function (userConfig) {
    var plugins = userConfig.plugins;
    var dynamicPlugins = [
        ['build-plugin-ice-ssr', 'ssr', false],
        ['build-plugin-ice-store', 'store', true],
        ['build-plugin-ice-auth', 'auth', true],
        ['build-plugin-pwa', 'pwa', false],
        ['build-plugin-ice-request', 'request', true],
    ];
    var checkPluginExist = function (name) {
        return plugins && plugins.some(function (plugin) {
            if (typeof plugin === 'string') {
                return plugin === name;
            }
            else if (Array.isArray(plugin)) {
                return plugin[0] === name;
            }
            else {
                return false;
            }
        });
    };
    return dynamicPlugins
        .filter(function (_a) {
        var pluginName = _a[0], configKey = _a[1], defaultValue = _a[2];
        var exist = checkPluginExist(pluginName);
        if (exist) {
            console.log('');
            console.log(chalk.magenta("The ".concat(pluginName, " has been built in. Please remove it from build.json.")));
            console.log('');
        }
        else {
            return Object.prototype.hasOwnProperty.call(userConfig, configKey) ? userConfig[configKey] : defaultValue;
        }
        return false;
    })
        .map(function (_a) {
        var name = _a[0];
        return name;
    });
};
var getBuiltInPlugins = function (userConfig) {
    // enable webpack 5 by default
    (0, require_hook_1.hijackWebpack)();
    if (userConfig.disableRuntime) {
        return [
            'build-plugin-react-app',
            'build-plugin-ice-mpa'
        ];
    }
    // eslint-disable-next-line
    var pkg = require('../package.json');
    process.env.__FRAMEWORK_VERSION__ = pkg.version;
    var coreOptions = {
        'framework': 'react',
        'alias': process.env.__FRAMEWORK_NAME__ || 'ice'
    };
    var plugins = [
        // common plugins
        ['build-plugin-app-core', coreOptions],
        'build-plugin-ice-logger',
        // react base plugin
        'build-plugin-react-app',
        // for ice/react plugins
        'build-plugin-ice-router',
        'build-plugin-ice-config',
        'build-plugin-ice-mpa',
        'build-plugin-helmet',
        'build-plugin-speed',
    ];
    if (userConfig.mpa && userConfig.router === false) {
        console.warn('Warning:', 'MPA 模式下 router: false 选项没有意义，建议移除该选项。');
    }
    if (!userConfig.mpa && userConfig.router === false) {
        // SPA 并且设置了 router: false 则过滤 router 插件
        plugins = plugins.filter(function (name) { return name !== 'build-plugin-ice-router'; });
    }
    var dynamicPlugins = getDynamicPlugins(userConfig);
    return plugins.concat(dynamicPlugins);
};
module.exports = getBuiltInPlugins;
//# sourceMappingURL=getBuiltInPlugins.js.map