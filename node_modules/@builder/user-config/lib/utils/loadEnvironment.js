"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fse = require("fs-extra");
var dotenv = require("dotenv");
var dotenvExpand = require("dotenv-expand");
function lookupFile(dir, file, pathOnly) {
    if (pathOnly === void 0) { pathOnly = false; }
    var fullPath = path.join(dir, file);
    if (fse.existsSync(fullPath) && fse.statSync(fullPath).isFile()) {
        return pathOnly ? fullPath : fse.readFileSync(fullPath, 'utf-8');
    }
}
function loadEnvironment(envDir, mode) {
    var env = {};
    var envFiles = [
        ".env.".concat(mode, ".local"),
        ".env.".concat(mode),
        '.env.local',
        '.env',
    ];
    // search for target files
    // eslint-disable-next-line no-restricted-syntax
    for (var _i = 0, envFiles_1 = envFiles; _i < envFiles_1.length; _i++) {
        var file = envFiles_1[_i];
        var envContent = lookupFile(envDir, file);
        if (envContent) {
            var parsed = dotenv.parse(envContent);
            dotenvExpand.expand({
                parsed: parsed,
                // prevent process.env mutation
                ignoreProcessEnv: true,
            });
            // eslint-disable-next-line no-restricted-syntax
            for (var _a = 0, _b = Object.entries(parsed); _a < _b.length; _a++) {
                var _c = _b[_a], key = _c[0], value = _c[1];
                if (env[key] === undefined) {
                    env[key] = value;
                }
                if (key === 'NODE_ENV') {
                    // support NODE_ENV override in .env file, in case of need a custom build mode for develop
                    process.env.NODE_ENV = value;
                }
            }
        }
    }
    return env;
}
exports.default = loadEnvironment;
//# sourceMappingURL=loadEnvironment.js.map