"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var webpack5_1 = require("./webpack5");
var loadEnvironment_1 = require("./utils/loadEnvironment");
var getClientEnvironment_1 = require("./utils/getClientEnvironment");
exports.default = (function (api, _a) {
    var webpackConfig = _a.webpackConfig;
    var context = api.context, setValue = api.setValue;
    var command = context.command, webpack = context.webpack, commandArgs = context.commandArgs, userConfig = context.userConfig, rootDir = context.rootDir;
    var appMode = commandArgs.mode || command;
    var mode = command === 'start' ? 'development' : 'production';
    // load .env.development for start and load .env.production for build
    var envMode = commandArgs.mode || mode;
    var customEnv = (0, loadEnvironment_1.default)(rootDir, envMode);
    var clientEnv = (0, getClientEnvironment_1.default)(customEnv);
    setValue('CLIENT_ENV', clientEnv.raw);
    // 1M = 1024 KB = 1048576 B
    webpackConfig.performance.maxAssetSize(1048576).maxEntrypointSize(1048576);
    // setup DefinePlugin out of onGetWebpackConfig
    // in case of registerUserConfig will be execute before onGetWebpackConfig
    // default value for DefinePlugin
    var defineVariables = __assign(__assign({}, clientEnv.stringified), { 'process.env.NODE_ENV': JSON.stringify(mode || 'development'), 'process.env.APP_MODE': JSON.stringify(appMode), 'process.env.SERVER_PORT': JSON.stringify(commandArgs.port), 'process.env.__IS_SERVER__': false });
    // set alias for webpack/hot while webpack has been prepacked
    webpackConfig.resolve.alias.set('webpack/hot', '@builder/pack/deps/webpack/hot');
    webpackConfig
        .plugin('DefinePlugin')
        .use(webpack.DefinePlugin, [defineVariables]);
    if (command === 'start') {
        // disable build-scripts stats output
        process.env.DISABLE_STATS = 'true';
        webpackConfig
            .plugin('friendly-error')
            // eslint-disable-next-line global-require
            .use(require('@builder/pack/deps/@nuxtjs/friendly-errors-webpack-plugin'), [
            {
                clearConsole: false,
            },
        ]);
    }
    else {
        webpackConfig.optimization.minimize(true);
    }
    // rax-app will add webpack5 field to userConfig
    if (!Object.prototype.hasOwnProperty.call(userConfig, 'webpack5') || userConfig.webpack5) {
        (0, webpack5_1.default)(webpackConfig, api);
    }
    return webpackConfig;
});
//# sourceMappingURL=getEnhancedWebpackConfig.js.map