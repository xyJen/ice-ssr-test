var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var checkPostcssLoader = function (config, ruleName) {
    return config.module.rules.has(ruleName) &&
        config.module.rule(ruleName).uses.has('postcss-loader');
};
module.exports = function (config, postcssOptions, context) {
    if (!postcssOptions) {
        return;
    }
    var customPostcssOptions = __assign({}, postcssOptions);
    var styleRules = [
        'css',
        'css-module',
        'css-global',
        'scss',
        'scss-module',
        'scss-global',
        'less',
        'less-module',
        'less-global',
    ];
    var _a = (context || {}).rootDir, rootDir = _a === void 0 ? '' : _a;
    var finalPostcssOptions = {};
    // get default postcss config
    if (checkPostcssLoader(config, 'css')) {
        var builtInOptions = config.module.rule('css').use('postcss-loader').get('options') || {};
        var loaderConfigOptions = builtInOptions.config;
        if (loaderConfigOptions && loaderConfigOptions.path) {
            try {
                var postcssFile = "".concat(loaderConfigOptions.path, "/defaultPostcssConfig");
                finalPostcssOptions = {
                    postcssOptions: (loaderConfigOptions.ctx
                        ? // eslint-disable-next-line
                            require(postcssFile)(loaderConfigOptions.ctx)
                        : // eslint-disable-next-line
                            require(postcssFile)) || {},
                };
            }
            catch (err) {
                console.log('[Error] fail to load default postcss config');
            }
        }
        else {
            finalPostcssOptions = builtInOptions;
        }
        // get plugins in different versions of postcss-loader
        var builtInPlugins_1 = [];
        if (!finalPostcssOptions.postcssOptions) {
            // get plugins in v3
            builtInPlugins_1 = __spreadArray([], (finalPostcssOptions.plugins || []), true);
        }
        else {
            // get plugins in v5
            builtInPlugins_1 = __spreadArray([], (finalPostcssOptions.postcssOptions.plugins || []), true);
        }
        // merge plugins
        var finalPlugins_1 = __spreadArray([], builtInPlugins_1, true);
        Object.keys(customPostcssOptions.plugins || {}).forEach(function (pluginName) {
            var pluginOptions = {};
            var targetIndex = builtInPlugins_1.findIndex(function (pluginConfig) {
                var _a = Array.isArray(pluginConfig)
                    ? pluginConfig
                    : [pluginConfig], name = _a[0], options = _a[1];
                if (options) {
                    pluginOptions = options;
                }
                return typeof name === 'string' && name.indexOf(pluginName) > -1;
            });
            var options = customPostcssOptions.plugins[pluginName];
            if (targetIndex > -1) {
                if (options === false) {
                    // delete builtIn plugin
                    finalPlugins_1.splice(targetIndex, 1);
                }
                else {
                    // shallow merge for options
                    var mergedOptions = __assign(__assign({}, pluginOptions), options);
                    finalPlugins_1.splice(targetIndex, 1, [pluginName, mergedOptions]);
                }
            }
            else {
                finalPlugins_1.push([pluginName, options]);
            }
        });
        delete customPostcssOptions.plugins;
        var postcssPlugins = finalPlugins_1.map(function (pluginInfo) {
            var _a = Array.isArray(pluginInfo)
                ? pluginInfo
                : [pluginInfo], name = _a[0], options = _a[1];
            if (typeof name === 'string') {
                var resolvePath = require.resolve(name, { paths: [rootDir] });
                // eslint-disable-next-line
                return require(resolvePath)(options);
            }
            else {
                return pluginInfo;
            }
        });
        if (!finalPostcssOptions.postcssOptions) {
            // set final postcss options in v3
            finalPostcssOptions = __assign(__assign(__assign({}, finalPostcssOptions), customPostcssOptions), { plugins: __spreadArray([], postcssPlugins, true) });
        }
        else {
            // set default value
            customPostcssOptions.postcssOptions =
                customPostcssOptions.postcssOptions || {};
            // modify option name `exec` to `execute` in v5
            if (customPostcssOptions.exec) {
                customPostcssOptions.execute = customPostcssOptions.exec;
                delete customPostcssOptions.exec;
            }
            var shouldMoveToPostcssOptionsKeys_1 = [
                'parser',
                'syntax',
                'stringifier',
                'from',
                'to',
                'map',
            ];
            // move options to postcssOptions
            Object.keys(customPostcssOptions || {}).forEach(function (optionName) {
                if (shouldMoveToPostcssOptionsKeys_1.includes(optionName)) {
                    customPostcssOptions.postcssOptions[optionName] =
                        customPostcssOptions[optionName];
                    delete customPostcssOptions[optionName];
                }
            });
            // set final postcss options in v5
            finalPostcssOptions = __assign(__assign(__assign({}, finalPostcssOptions), customPostcssOptions), { postcssOptions: __assign(__assign(__assign({}, finalPostcssOptions.postcssOptions), customPostcssOptions.postcssOptions), { plugins: __spreadArray([], postcssPlugins, true) }) });
        }
        // modify css rules
        styleRules.forEach(function (ruleName) {
            if (checkPostcssLoader(config, ruleName)) {
                config.module
                    .rule(ruleName)
                    .use('postcss-loader')
                    .tap(function () {
                    // merge postcss-loader options
                    return finalPostcssOptions;
                });
            }
        });
    }
};
//# sourceMappingURL=postcssOptions.js.map