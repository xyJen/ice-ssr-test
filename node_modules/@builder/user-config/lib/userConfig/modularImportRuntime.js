var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var path = require('path');
var addBabelPlugins = require('./babelPlugins');
module.exports = function (config, value, context, api) {
    var _a;
    var rootDir = context.rootDir, swc = context.userConfig.swc;
    if (value) {
        var importDeclarations_1 = api.getValue('importDeclarations') || {};
        var framework = api.getValue('FRAMEWORK') === 'react' ? 'ice' : 'rax-app';
        var tempFilePath_1 = api.getValue('TEMP_PATH');
        if (swc) {
            var redirects = Object.keys(importDeclarations_1).map(function (name) { return (__assign({ name: name }, importDeclarations_1[name])); });
            config.module.rule('redirect-path-loader')
                // es-module-lexer couldn't parse jsx
                .after('tsx')
                .test(function (filePath) { return needRedirectFilePath(filePath, { tempFilePath: tempFilePath_1, rootDir: rootDir }); })
                .use('redirect-path-loader')
                .loader(require.resolve(path.join(__dirname, '../Loaders/RedirectPathLoader')))
                .options((_a = {},
                _a[framework] = redirects,
                _a));
        }
        else {
            var pluginOptions = {
                importDeclarations: importDeclarations_1,
                framework: framework,
            };
            addBabelPlugins(config, [[
                    require.resolve('../utils/babelPluginImport'),
                    pluginOptions,
                ]], context);
        }
    }
};
function needRedirectFilePath(filePath, _a) {
    var tempFilePath = _a.tempFilePath, rootDir = _a.rootDir;
    return [path.join(rootDir, 'src'), tempFilePath].some(function (rule) { return filePath.includes(rule); }) &&
        filePath.match(/\.(j|t)sx?$/);
}
//# sourceMappingURL=modularImportRuntime.js.map