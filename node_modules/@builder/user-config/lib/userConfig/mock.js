var webpackDevMock = require('webpack-dev-mock');
module.exports = function (config, mock, context) {
    var _a;
    // dev mock
    var commandArgs = context.commandArgs, command = context.command, webpack = context.webpack;
    var isWebpack4 = /^4\./.test(webpack.version);
    if (!commandArgs.disableMock && command === 'start' && mock) {
        // __FRAMEWORK_VERSION__ only defined in ice.js
        // FIXME: remove process.env.__FRAMEWORK_VERSION__ when rax-app update @builder/pack
        var hookName = process.env.__FRAMEWORK_VERSION__ ? 'setupMiddlewares' : 'onBeforeSetupMiddleware';
        // Compat with webpack4
        var beforeHookName_1 = isWebpack4 ? 'before' : hookName;
        var originalDevServeBefore_1 = config.devServer.get(beforeHookName_1);
        // replace devServer before function
        config.merge({ devServer: (_a = {},
                _a[beforeHookName_1] = function (appOrMiddlewares, server) {
                    var middlewares;
                    var app;
                    if (appOrMiddlewares.get) {
                        app = appOrMiddlewares;
                    }
                    else if (appOrMiddlewares.app) {
                        app = appOrMiddlewares.app;
                    }
                    else {
                        app = server.app;
                        middlewares = appOrMiddlewares;
                    }
                    var mockIgnore = Object.prototype.toString.call(mock) === '[object Object]' && mock.exclude;
                    // keep mock server ahead of devServer.before
                    webpackDevMock(app, mockIgnore || []);
                    if (typeof originalDevServeBefore_1 === 'function') {
                        return originalDevServeBefore_1(appOrMiddlewares, server);
                    }
                    if (middlewares) {
                        return middlewares;
                    }
                },
                _a) });
    }
};
//# sourceMappingURL=mock.js.map