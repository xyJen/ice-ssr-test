"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cssChunk = void 0;
var path = require("path");
var fse = require("fs-extra");
var app_helpers_1 = require("@builder/app-helpers");
function parseCssName(name, index) {
    var cssName = name.replace(path.extname(name), '');
    if (index > 0) {
        cssName = "".concat(cssName, "-").concat(index);
    }
    return "".concat(cssName, ".css");
}
var addTrailingSlash = function (str) {
    return str[str.length - 1] === '/' ? str : "".concat(str, "/");
};
var cssChunk = function (chunkName) {
    var viteManifestPlugin;
    var fileData;
    var outputDir = '';
    var base = '';
    return {
        name: 'vite-plugin-css-chunk-name',
        config: function (cfg, _a) {
            var command = _a.command;
            if (command === 'build') {
                cfg.build.manifest = true;
                outputDir = path.join(cfg.root, cfg.build.outDir);
                base = addTrailingSlash(cfg.base);
            }
        },
        buildStart: function (_a) {
            var plugins = _a.plugins;
            viteManifestPlugin = plugins && plugins.find(function (_a) {
                var name = _a.name;
                return name === 'vite:manifest';
            });
        },
        generateBundle: function (options, bundle, isWrite) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, viteManifestPlugin.generateBundle.call(__assign(__assign({}, this), { emitFile: function (file) {
                                fileData = JSON.parse(file.source);
                                return '__manifest';
                            } }), options, bundle, isWrite)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); },
        closeBundle: function () {
            Object.keys(fileData).forEach(function (key) {
                if (fileData[key].isEntry) {
                    var entryName = key.replace(path.extname(key), 'key');
                    var cssChunkName_1 = typeof chunkName === 'string' ? chunkName : chunkName[entryName];
                    var entryData = fileData[key];
                    var entryCss = entryData === null || entryData === void 0 ? void 0 : entryData.css;
                    if (entryCss && cssChunkName_1) {
                        var htmlPath = path.join(outputDir, entryData.src);
                        var htmlContent_1 = (entryData === null || entryData === void 0 ? void 0 : entryData.src) && fse.readFileSync(htmlPath, 'utf8');
                        var cssIndex_1 = 0;
                        entryCss.forEach(function (cssLink) {
                            var cssDir = path.dirname(cssLink);
                            var sourceCss = path.join(outputDir, cssLink);
                            var cssName = parseCssName(cssChunkName_1, cssIndex_1);
                            var renamedCss = (0, app_helpers_1.formatPath)(path.join(cssDir, cssName));
                            if (cssLink !== renamedCss) {
                                fse.writeFileSync(path.join(outputDir, cssDir, cssName), fse.readFileSync(sourceCss, 'utf-8'));
                                // replace css link
                                htmlContent_1 = htmlContent_1.replace(/<link[\s\S]*href=["']([^'"]*)["'][^>]*>/g, function (str, matched) {
                                    return matched === "".concat(base).concat(cssLink) ? str.replace(matched, "".concat(base).concat(renamedCss)) : str;
                                });
                            }
                            else {
                                console.log('[WARN]', "".concat(chunkName, " is conflict with css assets"));
                            }
                            cssIndex_1++;
                        });
                        fse.writeFileSync(htmlPath, htmlContent_1);
                    }
                }
            });
        }
    };
};
exports.cssChunk = cssChunk;
//# sourceMappingURL=cssChunk.js.map