"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wp2vite = void 0;
var plugin_react_1 = require("@vitejs/plugin-react");
var rollup_plugin_visualizer_1 = require("rollup-plugin-visualizer");
var path = require("path");
var deepmerge_1 = require("deepmerge");
var lodash_1 = require("lodash");
var vite_plugin_ts_types_1 = require("vite-plugin-ts-types");
var vite_plugin_eslint_report_1 = require("vite-plugin-eslint-report");
var vite_1 = require("vite");
var config_1 = require("./config");
var plugins_1 = require("../plugins");
var getAnalyzer = function (config) {
    if (!config.plugins.get('webpack-bundle-analyzer'))
        return;
    return (0, rollup_plugin_visualizer_1.default)({ open: true, brotliSize: true, filename: 'ice-stats.html' });
};
var getWebpackChain = function (context) {
    var _a;
    var configArr = context.getWebpackConfig() || [];
    return (_a = configArr.find(function (_a) {
        var name = _a.name;
        return name === 'web';
    })) === null || _a === void 0 ? void 0 : _a.chainConfig;
};
// simple array merge for config merge
var arrayMerge = function (destinationArray, sourceArray) {
    return __spreadArray(__spreadArray([], (destinationArray || []), true), (sourceArray || []), true);
};
var isBuild = function (command) { return command === 'build'; };
var getHtmlPlugin = function (context) {
    var _a, _b;
    var getValue = context.getValue, userConfig = context.userConfig, rootDir = context.rootDir, command = context.command;
    var config = getWebpackChain(context);
    var templateParameters = {};
    var isMpa = userConfig.mpa;
    var ssr = userConfig.ssr;
    if (!isMpa) {
        templateParameters = config.plugins.get('HtmlWebpackPlugin')
            ? (_a = config.plugin('HtmlWebpackPlugin').get('args')[0]) === null || _a === void 0 ? void 0 : _a.templateParameters : {};
        return (0, plugins_1.htmlPlugin)({
            entry: userConfig.entry,
            template: path.resolve(rootDir, 'public', 'index.html'),
            filename: 'index.html',
            templateParameters: templateParameters,
            rootDir: rootDir,
            ssr: ssr,
            command: command,
        });
    }
    var pages = __assign({ index: {
            template: path.resolve(rootDir, 'public', 'index.html'),
            filename: 'index.html',
        } }, getValue('MPA_PAGES'));
    var entries = userConfig.entry;
    var pluginKey = "HtmlWebpackPlugin_".concat(Object.keys(entries)[0]);
    templateParameters = config.plugins.get(pluginKey)
        ? (_b = config.plugin(pluginKey).get('args')[0]) === null || _b === void 0 ? void 0 : _b.templateParameters : {};
    var mpaHtmlPlugins = Object.keys(entries).map(function (entryName) {
        var _a;
        var singlePage = (_a = pages[entryName]) !== null && _a !== void 0 ? _a : pages.index;
        return (0, plugins_1.htmlPlugin)(__assign(__assign({}, singlePage), { templateParameters: templateParameters, entry: entries[entryName][0], // webpack entry
            rootDir: rootDir, ssr: ssr, command: command }));
    });
    return mpaHtmlPlugins;
};
var getPluginReact = function (context) {
    var userConfig = context.userConfig, originalUserConfig = context.originalUserConfig, command = context.command;
    var fastRefresh = userConfig.fastRefresh && command === 'start';
    var jsxRuntimeConfig = userConfig.babelPresets
        && userConfig.babelPresets
            .find(function (_a) {
            var pluginName = _a[0], pluginOptions = _a[1];
            return pluginName.includes('@babel/preset-react') && (pluginOptions === null || pluginOptions === void 0 ? void 0 : pluginOptions.runtime) === 'automatic';
        });
    var babelPlugins = userConfig.babelPlugins;
    if (fastRefresh || babelPlugins.length > 0 || jsxRuntimeConfig || originalUserConfig.babelPresets) {
        // get exclude rule for babel-loader
        return (0, plugin_react_1.default)({
            // exclude rule for fast refresh
            exclude: [/node_modules/, /[\\/]\.ice[\\/]/],
            fastRefresh: fastRefresh,
            jsxRuntime: jsxRuntimeConfig ? 'automatic' : 'classic',
            parserPlugins: ['decorators-legacy'],
            babel: {
                plugins: babelPlugins,
                // 仅用户配置的 babelPresets 生效
                // 通过插件修改后的配置如 ['@babel/preset-react', { runtime: 'automatic' }]，通过 jsxRuntime 配置生效
                presets: originalUserConfig.babelPresets,
            }
        });
    }
    return [];
};
var getRedirectImport = function (context) {
    var importDeclarations = context.getValue('importDeclarations') || {};
    // formate importDeclarations
    var redirects = Object.keys(importDeclarations).map(function (name) { return (__assign({ name: name }, importDeclarations[name])); });
    return redirects;
};
/**
 * Exposed
 */
var wp2vite = function (context) {
    var _a;
    var _b = context.commandArgs, commandArgs = _b === void 0 ? {} : _b, userConfig = context.userConfig, originalUserConfig = context.originalUserConfig, rootDir = context.rootDir, command = context.command;
    var config = getWebpackChain(context);
    var viteConfig = {
        configFile: false,
        root: rootDir,
        esbuild: {
            // Fix https://github.com/alibaba/ice/issues/5401
            logOverride: { 'this-is-undefined-in-esm': 'silent' },
        },
        // ice 开发调试时保证 cjs 依赖转为 esm 文件
        plugins: __spreadArray(__spreadArray([
            !(commandArgs === null || commandArgs === void 0 ? void 0 : commandArgs.disableMock) && userConfig.mock && (0, plugins_1.mockPlugin)((_a = userConfig.mock) === null || _a === void 0 ? void 0 : _a.exclude),
            getAnalyzer(config),
            // TODO: User Config Type Completion
            (0, plugins_1.externalsPlugin)(userConfig.externals),
            // import xx from 'ice' 的重定向逻辑
            (0, plugins_1.importPlugin)({ source: 'ice', redirectImports: getRedirectImport(context) }),
            // spa 与 mpa 中对 html 的处理
            (0, plugins_1.serverHistoryPlugin)(config.devServer.get('historyApiFallback')),
            getHtmlPlugin(context),
            userConfig.tsChecker && (0, vite_plugin_ts_types_1.default)(),
            (0, plugins_1.polyfillPlugin)({
                value: originalUserConfig.polyfill,
                browserslist: userConfig.browserslist,
                hash: userConfig.hash,
                outputAssetsPath: userConfig.outputAssetsPath,
                rootDir: rootDir,
            }),
            userConfig.ignoreHtmlTemplate ? (0, plugins_1.ignoreHtmlPlugin)(rootDir) : null
        ], getPluginReact(context), true), [
            userConfig.cssChunkNames && (0, plugins_1.cssChunk)(userConfig.cssChunkNames),
        ], false).filter(Boolean),
    };
    if (userConfig.eslint !== false) {
        var eslintOptions = { ignoreInitial: false };
        if (userConfig.eslint === true) {
            // lint only changed files, skip lint on start
            eslintOptions.ignoreInitial = true;
        }
        else {
            eslintOptions = __assign(__assign({}, eslintOptions), userConfig.eslint);
        }
        viteConfig.plugins.push((0, vite_plugin_eslint_report_1.default)(eslintOptions));
    }
    if ((0, lodash_1.isObject)(userConfig.vite)) {
        // 保证 userConfig.vite 优先级最高
        viteConfig = (0, deepmerge_1.all)([
            (0, config_1.recordMap)(config, context),
            viteConfig,
            userConfig.vite
        ], { arrayMerge: arrayMerge });
    }
    var devServerConfig = {
        port: commandArgs.port || 3333,
        host: commandArgs.host || '0.0.0.0',
        https: commandArgs.https || false,
    };
    var entryExts = /(\.ts|\.tsx|\.js|\.jsx)$/i;
    // 依赖预构建解析入口
    var getAnalysisEntries = function () {
        var appEntry = userConfig.entry;
        if (!userConfig.mpa) {
            if (Array.isArray(appEntry)) {
                appEntry = {
                    index: appEntry,
                };
            }
            else if (typeof appEntry === 'string') {
                appEntry = {
                    index: [appEntry],
                };
            }
        }
        var entries = Object.keys(appEntry).map(function (e) {
            var url = appEntry[e][0];
            // js entries is needed when analyze dependencies in pre build parse
            // format path in case of win32 system
            return (0, vite_1.normalizePath)(entryExts.exec(url) ? url : "".concat(url, ".*"));
        });
        return entries;
    };
    if (!isBuild(command)) {
        return (0, deepmerge_1.all)([
            {
                mode: 'development',
                optimizeDeps: {
                    entries: getAnalysisEntries(),
                    // vite 无法分析 link 的依赖，需要手动加入以下依赖，防止 ice 维护时报错
                    include: ['react-app-renderer', 'create-app-shared'],
                },
                server: devServerConfig,
            },
            viteConfig,
        ], { arrayMerge: arrayMerge });
    }
    else {
        return (0, deepmerge_1.all)([{
                build: {
                    commonjsOptions: {
                        exclude: ['react-app-renderer', 'create-app-shared'],
                    },
                    rollupOptions: {
                        // by default, the context of a module is set to be undefined,
                        // vite config the top-level this refer to globalThis, see https://github.com/vitejs/vite/pull/5312
                        // modify to globalThis when SSR
                        context: undefined,
                    },
                },
            }, viteConfig], { arrayMerge: arrayMerge });
    }
};
exports.wp2vite = wp2vite;
//# sourceMappingURL=index.js.map