"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Auth_1 = require("./runtime/Auth");
var wrapperComponentFn = function (authConfig) { return function (PageComponent) {
    var _a = PageComponent.pageConfig, pageConfig = _a === void 0 ? {} : _a;
    var AuthWrappedComponent = function (props) {
        var auth = (0, Auth_1.useAuth)()[0];
        var pageConfigAuth = pageConfig.auth;
        if (pageConfigAuth && !Array.isArray(pageConfigAuth)) {
            throw new Error('pageConfig.auth must be an array');
        }
        var hasAuth = Array.isArray(pageConfigAuth) && pageConfigAuth.length
            ? Object.keys(auth).filter(function (item) {
                return pageConfigAuth.includes(item) ? auth[item] : false;
            }).length
            : true;
        if (!hasAuth) {
            if (authConfig.NoAuthFallback) {
                if (typeof authConfig.NoAuthFallback === 'function') {
                    return React.createElement(authConfig.NoAuthFallback, __assign({}, Object.assign({}, props, { pageConfig: pageConfig })));
                }
                return authConfig.NoAuthFallback;
            }
            return React.createElement(React.Fragment, null, "No Auth");
        }
        return React.createElement(PageComponent, __assign({}, props));
    };
    return AuthWrappedComponent;
}; };
exports.default = (function (_a) {
    var context = _a.context, appConfig = _a.appConfig, addProvider = _a.addProvider, wrapperPageComponent = _a.wrapperPageComponent;
    var initialData = context && context.initialData ? context.initialData : {};
    var initialAuth = initialData.auth || {};
    var authConfig = appConfig.auth || {};
    var AuthStoreProvider = function (_a) {
        var children = _a.children;
        return React.createElement(Auth_1.Provider, { value: initialAuth }, children);
    };
    addProvider(AuthStoreProvider);
    wrapperPageComponent(wrapperComponentFn(authConfig));
});
//# sourceMappingURL=runtime.js.map