"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var walker_1 = require("./collector/walker");
var vitePluginLazy_1 = require("./vitePluginLazy");
// compatible with $ice/routes
var TEM_ROUTER_COMPATIBLE = '$ice/routes';
var TEM_ROUTER_SETS = [TEM_ROUTER_COMPATIBLE];
var plugin = function (_a) {
    var context = _a.context, onGetWebpackConfig = _a.onGetWebpackConfig, modifyUserConfig = _a.modifyUserConfig, getValue = _a.getValue, applyMethod = _a.applyMethod, log = _a.log;
    var rootDir = context.rootDir, userConfig = context.userConfig, command = context.command;
    // [enum] js or ts
    var projectType = getValue('PROJECT_TYPE');
    // .tmp path
    var iceTempPath = getValue('TEMP_PATH');
    var routerOptions = (userConfig.router || {});
    var configPath = routerOptions.configPath;
    var isMpa = userConfig.mpa;
    var routesTempPath = path.join(iceTempPath, "routes.".concat(projectType));
    var srcDir = applyMethod('getSourceDir', userConfig.entry);
    // MPA 下 isConfigRoutes 永远是 true
    var _b = applyMethod('getRoutes', {
        rootDir: rootDir,
        tempPath: iceTempPath,
        configPath: configPath,
        projectType: projectType,
        isMpa: isMpa,
        srcDir: srcDir
    }), routesPath = _b.routesPath, isConfigRoutes = _b.isConfigRoutes;
    if (!isConfigRoutes) {
        log.info('开启文件约定式路由能力');
    }
    // modify webpack config
    onGetWebpackConfig(function (config) {
        // add alias
        TEM_ROUTER_SETS.forEach(function (i) {
            config.resolve.alias.set(i, routesPath);
        });
        // alias for runtime/Router
        config.resolve.alias.set('$ice/Router', path.join(iceTempPath, 'plugins/router/pluginRuntime/runtime/Router.tsx'));
        // alias for runtime/history
        config.resolve.alias.set('$ice/history', path.join(iceTempPath, 'plugins/router/history.ts'));
        // alias for react-router-dom
        var routerName = 'react-router-dom';
        var packagePath = require.resolve("".concat(routerName, "/package.json"));
        // use react-router-dom path while react-router-dom has module field in package.json
        config.resolve.alias.set(routerName, path.dirname(packagePath));
        // config historyApiFallback for router type browser
        if (!config.devServer.get('historyApiFallback')) {
            config.devServer.set('historyApiFallback', true);
        }
    });
    // copy types
    applyMethod('addPluginTemplate', {
        template: path.join(__dirname, '../src/types'),
        targetDir: 'router/types',
    });
    // set IAppRouterProps to IAppConfig
    applyMethod('addAppConfigTypes', { source: '../plugins/router/types', specifier: '{ IAppRouterProps }', exportName: 'router?: IAppRouterProps' });
    // export IRouterConfig to the public
    applyMethod('addTypesExport', { source: '../plugins/router/types' });
    // add import declarations
    applyMethod('addImportDeclaration', {
        importSource: '$$ice/plugins/router/types',
        exportMembers: ['IAppRouterProps', 'IRouterConfig'],
    });
    // add babel plugins for ice lazy
    modifyUserConfig('babelPlugins', __spreadArray(__spreadArray([], (userConfig.babelPlugins || []), true), [
        [
            require.resolve('./babelPluginLazy'),
            { routesPath: routesPath }
        ]
    ], false));
    // if mode vite, add vite plugin for transform lazy
    if (userConfig.vite) {
        modifyUserConfig('vite.plugins', [(0, vitePluginLazy_1.default)(routesPath)], { deepmerge: true });
    }
    // copy templates and export react-router-dom/history apis to ice
    var routerTemplatesPath = path.join(__dirname, '../templates');
    applyMethod('addPluginTemplate', routerTemplatesPath);
    applyMethod('addExport', {
        source: './plugins/router',
        importSource: '$$ice/plugins/router',
        exportMembers: [
            'createBrowserHistory',
            'createHashHistory',
            'createMemoryHistory',
            // react-router-dom
            'Link',
            'NavLink',
            'Prompt',
            'Redirect',
            'Route',
            'Switch',
            'matchPath',
            'generatePath',
            // hooks
            'useHistory',
            'useLocation',
            'useParams',
            'useRouteMatch'
        ]
    });
    if (!isConfigRoutes) {
        // 文件约定路由
        var routerMatch = 'src/pages';
        var pagesDir = path.join(rootDir, routerMatch);
        var walkerOptions_1 = { rootDir: rootDir, routerOptions: routerOptions, routesTempPath: routesTempPath, pagesDir: pagesDir };
        (0, walker_1.default)(walkerOptions_1);
        log.verbose('根据 src/pages 结构生成路由配置：', routesTempPath);
        if (command === 'start') {
            // watch folder change when dev
            applyMethod('watchFileChange', routerMatch, function () {
                (0, walker_1.default)(walkerOptions_1);
                log.verbose('监听到 src/pages 目录变化，重新生成路由配置：', routesTempPath);
            });
        }
    }
};
exports.default = plugin;
//# sourceMappingURL=index.js.map