"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _setAncestorsUnfold = _interopRequireDefault(require("./setAncestorsUnfold"));

var _isPi = _interopRequireDefault(require("./isPi"));

var _transferKey = _interopRequireDefault(require("./transferKey"));

const calcPageOffsetTop = (document, pageIndex, scale = 1.0) => {
  const gap = document.data?.pagesInfo?.gap || 0; // 计算页面的整体 offset 高度

  const pages = document.nodes.slice(0, pageIndex);
  const pageOffsetTop = pages.reduce((top, page) => {
    const {
      rect
    } = page.data.pi;
    const currentHeight = (rect.height + gap) * scale;
    return top + currentHeight;
  }, 0);
  return pageOffsetTop;
};

const calcPageOffsetTopOfKey = (document, key) => {
  // 找到锚点所在的 page
  const page = document.getFurthestAncestor(key);
  const path = document.getPath(page.key); // 当前 page 的页数

  const pageIndex = path[0];
  return calcPageOffsetTop(document, pageIndex);
};

const scrollToTop = (target, top) => {
  if (target instanceof Window) {
    target.scrollTo(target.scrollX, top);
  } else {
    target.scrollTop = top;
  }
};

const scrollIntoVirtualPage = (key, controller, container) => {
  const {
    document
  } = controller.value;
  const virtualMap = document.data.virtualMap || {}; // 找到锚点所在的 page

  const page = document.getFurthestAncestor(key); // 是否虚拟化

  const isVirtual = page ? !!virtualMap[page.key] : false;

  if (isVirtual && container) {
    const offsetTop = calcPageOffsetTopOfKey(document, key);
    scrollToTop(container, offsetTop);
  }
};

const scrollIntoFocus = async (key, controller, container = window, findText, onCustomScroll) => {
  const {
    document
  } = controller.value;
  const transferredKey = (0, _transferKey.default)(key, controller, findText);

  if ((0, _isPi.default)(controller)) {
    // 如果页面有虚拟化, 先滚动到虚拟化页面
    scrollIntoVirtualPage(transferredKey, controller, container);
  } else {
    // 如果内容在标题折叠内，自动展开标题折叠
    try {
      if (controller.enableVirtualize) {
        await _everCangjie.domUtils.scrollToNodeByKey(transferredKey, controller);
      }

      const closestBlock = document.getClosestBlock(transferredKey);

      if (closestBlock) {
        (0, _setAncestorsUnfold.default)(controller, closestBlock);
      }
    } catch {// 不存在标题折叠
    }
  }

  const selectedDom = _everCangjie.domUtils.findDOMNodeSafely(transferredKey) || _everCangjie.domUtils.findDOMNodeSafely(document.getParent(transferredKey)?.key || '');

  if (selectedDom) {
    _everCangjie.createPerfLazyRenderPlugin.showPrunedElements(selectedDom);

    if (onCustomScroll) {
      onCustomScroll(selectedDom);
    } else {
      selectedDom.scrollIntoView({
        block: 'center',
        inline: 'center',
        behavior: 'auto'
      });
    }
  }

  return controller;
};

var _default = scrollIntoFocus;
exports.default = _default;
//# sourceMappingURL=scrollIntoFocus.js.map