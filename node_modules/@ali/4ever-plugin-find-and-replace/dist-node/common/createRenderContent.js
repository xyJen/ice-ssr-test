"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderContent;

var _react = _interopRequireWildcard(require("react"));

var _findAndReplaceModal = _interopRequireDefault(require("../components/findAndReplaceModal"));

var _constants = require("../utils/constants");

const _createElement = /*#__PURE__*/_react.default.createElement;

function createRenderContent(config, ctlManager) {
  return (props, controller, next) => {
    const {
      draggableArea = _constants.DEFAULT_DRAGGABLE_AREA,
      initialPosition = _constants.DEFAULT_INITIAL_POSITION,
      isFindOnly = false,
      forbidden = false,
      locale = {},
      role,
      onScrollIntoFocus,
      onCustomScroll,
      onFilter
    } = config;

    if (forbidden) {
      return next();
    } // 收集所有实例


    ctlManager.push(controller, role);
    (0, _react.useEffect)(() => {
      return () => {
        ctlManager.remove(controller);
      };
    }, [controller, role]);

    if (ctlManager.isMainController(controller)) {
      return /*#__PURE__*/_createElement(_react.default.Fragment, null, next(), /*#__PURE__*/_createElement(_findAndReplaceModal.default, {
        mainController: controller,
        draggableArea: draggableArea,
        initialPosition: initialPosition,
        isFindOnly: isFindOnly,
        locale: locale,
        ctlManager: ctlManager,
        onScrollIntoFocus: onScrollIntoFocus,
        onFilter: onFilter,
        onCustomScroll: onCustomScroll
      }));
    } else {
      return next();
    }
  };
}
//# sourceMappingURL=createRenderContent.js.map