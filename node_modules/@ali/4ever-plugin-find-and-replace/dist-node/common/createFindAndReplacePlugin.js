"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFindAndReplacePlugin = exports.factory = void 0;

var _createButton = _interopRequireDefault(require("../components/createButton"));

var _createMenu = _interopRequireDefault(require("../components/createMenu"));

var _onAction = _interopRequireDefault(require("./handlers/onAction"));

var _createOnChange = _interopRequireDefault(require("./handlers/createOnChange"));

var _createRenderContent = _interopRequireDefault(require("./createRenderContent"));

var _createContextMenu = _interopRequireDefault(require("./createContextMenu"));

var _renderMark = _interopRequireDefault(require("./renderMark"));

var _constants = require("../utils/constants");

var actions = _interopRequireWildcard(require("./actions"));

var _utils = require("../utils");

var _createRenderToolbar = _interopRequireDefault(require("./createRenderToolbar"));

var _meta = require("../utils/meta");

const ctlManager = new _utils.ControllerManager();

const factory = config => {
  let cache = {
    prevDocument: null,
    prevFocusIndex: -1
  };
  const {
    findAndReplace = _constants.DEFAULT_CONFIG
  } = config;
  const renderContent = (0, _createRenderContent.default)(findAndReplace, ctlManager);
  const onChange = (0, _createOnChange.default)(findAndReplace, cache);
  return {
    key: _meta.key,
    contextMenu: (0, _createContextMenu.default)(findAndReplace, ctlManager),
    toolbar: {
      buttons: {
        default: (0, _createButton.default)(ctlManager)
      },
      locale: findAndReplace?.locale || {}
    },
    menubar: {
      menu: (0, _createMenu.default)(ctlManager)
    },
    renderMark: _renderMark.default,
    renderContent,
    renderToolbar: (0, _createRenderToolbar.default)(findAndReplace?.locale || {}, ctlManager),
    onAction: _onAction.default,
    onChange,
    onCleanup: () => {
      // @ts-ignore 清理缓存
      cache = null;
    }
  };
};

exports.factory = factory;

const createFindAndReplacePlugin = config => factory(config);

exports.createFindAndReplacePlugin = createFindAndReplacePlugin;
createFindAndReplacePlugin.actions = actions;
//# sourceMappingURL=createFindAndReplacePlugin.js.map