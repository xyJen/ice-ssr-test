{"version":3,"sources":["../../../../src/common/handlers/createOnChange.ts"],"names":["emptyDocument","Document","create","isPathAboveOrSame","path","target","Path","isAncestor","compare","getFocusIndex","searchResult","findIndex","match","selected","diffNodes","prevNodes","currentNodes","prevDocument","currentDocument","controller","insert","remove","forEach","currentNode","focusIndex","prevNodeAtIndex","key","push","getPath","isContentSame","Text","isText","leaves","nodes","ret","prevNode","idx","currentNodeAtIndex","diffDocument","document","searchInNodeContent","node","content","findText","role","result","keywords","toLowerCase","indexOf","endOffset","startOffset","length","type","extraData","searchInTextNode","text","createDecorationWithMatch","start","TextPoint","offset","end","mark","MatchMark","Decoration","applyTextMatches","textMatches","decorations","value","matchedDecorations","map","noMatchedDecorations","setDecorations","concat","dispatchNoTextMatches","noTextMatches","injections","matchedInjections","Injection","data","searchMatch","otherInjections","filter","setInjections","search","getClosestByPath","isDel","query","queryResult","readonly","forEachDescendant","n","patch","patcher","appliedRemoveResult","nodePath","some","inserted","getNodeByPath","prevResult","sort","a","b","isBefore","dispatchSearchResults","unifiedSearchResults","otherMatches","reduce","matches","createOnChange","config","cache","isFindOnly","onFilter","next","prevFindText","pi","undefined","isFindTextChanged","prevFocusIndex","isFocusIndexChanged","roleWithAbility","newSearchResult","newIndex","Math","min","newSearchResultWithSelected","s","index","filteredSearchResult"],"mappings":"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","sourcesContent":["import { Inline } from '@ali/4ever-cangjie';\n/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport {\n  Document,\n  Text,\n  Decoration,\n  Path,\n  Controller,\n  Node,\n  TextPoint,\n  Injection,\n  Block,\n} from '@ali/4ever-cangjie';\nimport equal from 'fast-deep-equal';\nimport {\n  mergeData,\n  isTextMatch,\n  getNoMatchedDecorations,\n  isDel,\n} from '../../utils';\nimport { FindAndReplaceConfig, ICache, IMatch } from '../../utils/types';\nimport { MatchMark } from '../../mo/marks';\n\nconst emptyDocument = Document.create();\n\nconst isPathAboveOrSame = (path: Path, target: Path) => {\n  return Path.isAncestor(path, target) || Path.compare(path, target) === 0;\n};\n\nconst getFocusIndex = (searchResult: IMatch[]) =>\n  searchResult.findIndex((match) => match.selected);\n\nconst diffNodes = (\n  prevNodes: Node[],\n  currentNodes: Node[],\n  {\n    prevDocument,\n    currentDocument,\n  }: { prevDocument: Document; currentDocument: Document },\n  controller: Controller,\n) => {\n  let insert: Path[] = [];\n  let remove: Path[] = [];\n\n  currentNodes.forEach((currentNode, focusIndex) => {\n    const prevNodeAtIndex = prevNodes[focusIndex];\n    if (!prevNodeAtIndex || prevNodeAtIndex.key !== currentNode.key) {\n      insert.push(currentDocument.getPath(currentNode.key)!);\n      return;\n    }\n\n    // 编辑器中，不存在修改节点类型的行为，所以 key 相等，必然同时(不)为 Text\n    const isContentSame = Text.isText(currentNode)\n      ? // PERFORMANCE: 不使用 node.text 是为了避免遍历 leaves 以生成 text\n    // @ts-ignore\n      equal(currentNode.leaves, prevNodeAtIndex.leaves)\n      : // @ts-ignore\n      equal(currentNode.nodes, prevNodeAtIndex.nodes);\n    if (isContentSame) {\n      return;\n    }\n    if (Text.isText(currentNode)) {\n      // update = remove + insert\n      remove.push(prevDocument.getPath(prevNodeAtIndex.key)!);\n      insert.push(currentDocument.getPath(currentNode.key)!);\n\n      return;\n    }\n\n    const ret = diffNodes(\n      // @ts-ignore\n      prevNodeAtIndex.nodes,\n      // @ts-ignore\n      currentNode.nodes,\n      { prevDocument, currentDocument },\n      controller,\n    );\n    insert = [...insert, ...ret.insert];\n    remove = [...remove, ...ret.remove];\n  });\n\n  prevNodes.forEach((prevNode, idx) => {\n    const currentNodeAtIndex = currentNodes[idx];\n    if (!currentNodeAtIndex || currentNodeAtIndex.key !== prevNode.key) {\n      remove.push(prevDocument.getPath(prevNode.key)!);\n    }\n  });\n\n  return { insert, remove };\n};\n\nconst diffDocument = (\n  prevDocument: Document,\n  document: Document,\n  controller: Controller,\n) => {\n  return diffNodes(\n    prevDocument.nodes,\n    document.nodes,\n    {\n      prevDocument,\n      currentDocument: document,\n    },\n    controller,\n  );\n};\n\nconst searchInNodeContent = (\n  node: Text,\n  content: string,\n  findText: string,\n  role: string,\n) => {\n  const result: any[] = [];\n  const keywords = findText.toLowerCase();\n  content = content.toLowerCase();\n\n  if (content.indexOf(keywords) === -1) {\n    return result;\n  }\n  let endOffset = 0;\n  do {\n    const startOffset = content.indexOf(keywords, endOffset);\n    if (startOffset === -1) {\n      break;\n    }\n\n    endOffset = startOffset + keywords.length;\n    result.push({\n      type: `${role}text`,\n      selected: false,\n      key: node.key,\n      extraData: { startOffset, endOffset },\n    });\n  } while (endOffset <= content.length);\n\n  return result;\n};\n\nconst searchInTextNode = (node: Text, findText: string, role: string) => {\n  const content = node.text;\n  const result = searchInNodeContent(node, content, findText, role);\n  return result;\n};\n\nconst createDecorationWithMatch = (match: IMatch) => {\n  const { key, selected, extraData } = match;\n\n  const start = TextPoint.create({ key, offset: extraData?.startOffset });\n  const end = TextPoint.create({ key, offset: extraData?.endOffset });\n  const mark = MatchMark.create(selected || false);\n\n  return Decoration.create({ start, end, mark });\n};\n\nconst applyTextMatches = (textMatches: IMatch[], controller: Controller) => {\n  const { decorations } = controller.value;\n  const matchedDecorations = textMatches.map(createDecorationWithMatch);\n  const noMatchedDecorations = getNoMatchedDecorations(decorations);\n  controller.setDecorations(matchedDecorations.concat(noMatchedDecorations));\n};\n\nconst dispatchNoTextMatches = (\n  noTextMatches: IMatch[],\n  controller: Controller,\n) => {\n  const { injections } = controller.value;\n  const matchedInjections = noTextMatches.map((match) => {\n    const { key } = match;\n    return Injection.create({ key, data: { searchMatch: match } });\n  });\n  const otherInjections = injections.filter(({ data }) => !data.searchMatch);\n  controller.setInjections([...matchedInjections, ...otherInjections]);\n};\n\nconst search = (\n  node: Node,\n  controller: Controller,\n  role: string,\n  result: IMatch[] = [],\n) => {\n  const {\n    data: { findText },\n    document,\n  } = controller.value;\n  if (Text.isText(node)) {\n    // 防止修订模式下被替换多次\n    if (document.getClosestByPath(document.getPath(node.key), isDel)) {\n      return result;\n    }\n    result = [...result, ...searchInTextNode(node, findText, role)];\n  } else if (controller.query('isSupportSearch', node as Inline)) {\n    const queryResult = controller.query('getSearchResult', findText, node as Inline);\n    if (queryResult) {\n      result.push({ ...queryResult, type: `${role}${queryResult.readonly ? 'readonly_' : ''}${queryResult.type}` });\n    }\n  } else {\n    (node as Block).forEachDescendant((n) => {\n      if (Text.isText(n) || controller.query('isSupportSearch', n as Inline)) {\n        result = search(n, controller, role, result);\n      }\n    });\n  }\n  return result;\n};\n\nconst patch = (\n  searchResult: IMatch[],\n  patcher: { remove: Path[]; insert: Path[] },\n  controller: Controller,\n  role: string,\n) => {\n  const { document } = controller.value;\n  const { remove, insert } = patcher;\n  const appliedRemoveResult = searchResult.filter(({ key }) => {\n    const nodePath = document.getPath(key);\n    if (!nodePath) return false;\n    return !remove.some((path) => isPathAboveOrSame(path, nodePath));\n  });\n\n  let inserted = [] as any[];\n  insert.forEach((path) => {\n    const node = document.getNodeByPath(path);\n    if (!node) {\n      return;\n    }\n    inserted = [...inserted, ...search(node, controller, role)];\n  });\n  inserted = inserted.filter((result) => {\n    return (\n      appliedRemoveResult.findIndex((prevResult) =>\n        equal(prevResult, result)) === -1\n    );\n  });\n  return appliedRemoveResult.concat(inserted).sort((a, b) => {\n    if (a.key === b.key) {\n      return a.extraData?.endOffset - b.extraData?.endOffset;\n    }\n    return Path.isBefore(document.getPath(a.key)!, document.getPath(b.key)!)\n      ? -1\n      : 1;\n  });\n};\n\n// 分发统一查找替换结果\n// text 类型由查找替换插件处理\n// 其他类型通过 injections 注入 globalSearchMatches 到对应节点 data\nconst dispatchSearchResults = (\n  unifiedSearchResults: IMatch[],\n  controller: Controller,\n) => {\n  const [textMatches, otherMatches] = unifiedSearchResults.reduce(\n    (matches, match) => {\n      isTextMatch(match) ? matches[0].push(match) : matches[1].push(match);\n      return matches;\n    },\n    [[], []] as IMatch[][],\n  );\n  applyTextMatches(textMatches, controller);\n  dispatchNoTextMatches(otherMatches, controller);\n};\nconst createOnChange = (config: FindAndReplaceConfig, cache: ICache) => {\n  const { role = '', isFindOnly, onFilter } = config;\n  return (controller: Controller, next: Function) => {\n    const { data, document } = controller.value;\n    const { findText, prevFindText } = data;\n    let { searchResult = [] } = data;\n\n    // 不响应非查找替换变更\n    if (!prevFindText && !findText) {\n      return next();\n    }\n\n    if (document.data.pi) {\n      return next();\n    }\n\n    // 查找文本为空，清除\n    if (!findText) {\n      dispatchSearchResults([], controller);\n      mergeData(controller, { searchResult: [], prevFindText: undefined });\n      return next();\n    }\n\n    const isFindTextChanged = findText !== prevFindText;\n    const focusIndex = getFocusIndex(searchResult);\n    if (isFindTextChanged) {\n      cache.prevFocusIndex = -1;\n    }\n    const isFocusIndexChanged = focusIndex !== cache.prevFocusIndex;\n\n    const prevDocument = isFindTextChanged\n      ? emptyDocument\n      : cache.prevDocument || emptyDocument;\n\n    // 查找文本和文档都没有变化\n    if (!isFindTextChanged && equal(document, prevDocument)) {\n      // 只有索引变化\n      if (isFocusIndexChanged) {\n        dispatchSearchResults(searchResult, controller);\n        cache.prevFocusIndex = focusIndex;\n      }\n      return next();\n    }\n\n    if (isFindTextChanged) {\n      searchResult = [];\n    }\n\n    const patcher = diffDocument(prevDocument, document, controller);\n\n    const roleWithAbility = `${role}_${isFindOnly ? 'readonly_' : ''}`;\n\n    const newSearchResult = patch(\n      searchResult,\n      patcher,\n      controller,\n      roleWithAbility,\n    );\n\n    // 如果之前有选中项，document 变更时维持选中项不变\n    // fix: 修改选中项所在行文本, 选中项丢失\n    const idx = cache.prevFocusIndex;\n    const newIndex = Math.min(idx, newSearchResult.length - 1);\n    const newSearchResultWithSelected = newSearchResult.map((s, index) => {\n      if (index === newIndex) {\n        return { ...s, selected: true };\n      }\n      return s;\n    });\n\n    const filteredSearchResult = onFilter ? onFilter(newSearchResultWithSelected) : newSearchResultWithSelected;\n    dispatchSearchResults(filteredSearchResult, controller);\n\n    mergeData(controller, {\n      prevFindText: findText,\n      searchResult: filteredSearchResult,\n    });\n    cache.prevDocument = document;\n\n    return next();\n  };\n};\n\nexport default createOnChange;\n"],"file":"createOnChange.js"}