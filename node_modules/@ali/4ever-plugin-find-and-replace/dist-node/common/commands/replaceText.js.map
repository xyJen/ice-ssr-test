{"version":3,"sources":["../../../../src/common/commands/replaceText.ts"],"names":["getFirstCharRangeAfterStart","startPoint","RangeSelection","create","anchor","focus","moveForward","normalizeSelection","controller","selection","value","command","Commands","moveBackward","userSelect","replaceText","text","document","decorations","focusDecoration","find","mark","start","type","key","firstCharRange","marks","getMarksAtRange","select","end","del","insertText"],"mappings":";;;;;;;AAAA;;AAQA,SAASA,2BAAT,CAAqCC,UAArC,EAA4D;AAC1D,SAAOC,4BAAeC,MAAf,CAAsB;AAC3BC,IAAAA,MAAM,EAAEH,UADmB;AAE3BI,IAAAA,KAAK,EAAEJ,UAAU,CAACK,WAAX;AAFoB,GAAtB,CAAP;AAID;;AAED,SAASC,kBAAT,CAA4BC,UAA5B,EAAoD;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAgBD,UAAU,CAACE,KAAjC;AACA,SAAOF,UAAU,CACdG,OADI,CACIC,sBAASC,YADb,EAC2B,CAD3B,EAEJF,OAFI,CAEIC,sBAASE,UAFb,EAEyBL,SAFzB,CAAP;AAGD;;AAEc,SAASM,WAAT,CACbP,UADa,EAEbH,KAFa,EAGbW,IAHa,EAIb;AACA,QAAM;AAAEN,IAAAA;AAAF,MAAYF,UAAlB;AACA,QAAM;AAAES,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BR,KAAlC;AAEA,QAAMS,eAAe,GAAGD,WAAW,CAACE,IAAZ,CACtB,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,KAAqBD,IAAI,CAACE,IAAL,KAAc,OAAd,IAAyBD,KAAK,CAACE,GAAN,KAAcnB,KAAK,CAACmB,GAD5C,CAAxB;;AAIA,MAAI,CAACL,eAAL,EAAsB;AACpB,WAAOX,UAAP;AACD;;AAED,QAAMiB,cAAc,GAAGzB,2BAA2B,CAACmB,eAAe,CAACG,KAAjB,CAAlD;AACA,QAAMI,KAAK,GAAGT,QAAQ,CAACU,eAAT,CAAyBF,cAAzB,CAAd;AAEA,SACEjB,UAAU,CACPG,OADH,CAEIC,sBAASgB,MAFb,EAGI1B,4BAAeC,MAAf,CAAsB;AACpBC,IAAAA,MAAM,EAAEe,eAAe,CAACG,KADJ;AAEpBjB,IAAAA,KAAK,EAAEc,eAAe,CAACU;AAFH,GAAtB,CAHJ,EAQGlB,OARH,CAQWC,sBAASkB,GARpB,EASE;AATF,GAUGnB,OAVH,CAUWJ,kBAVX,EAWGI,OAXH,CAWWC,sBAASmB,UAXpB,EAWgCf,IAXhC,EAWsCU,KAXtC,CADF;AAcD","sourcesContent":["import {\n  RangeSelection,\n  Commands,\n  Controller,\n  TextPoint,\n} from '@ali/4ever-cangjie';\nimport { IMatch } from '../../utils/types';\n\nfunction getFirstCharRangeAfterStart(startPoint: TextPoint) {\n  return RangeSelection.create({\n    anchor: startPoint,\n    focus: startPoint.moveForward(),\n  });\n}\n\nfunction normalizeSelection(controller: Controller) {\n  const { selection } = controller.value;\n  return controller\n    .command(Commands.moveBackward, 1)\n    .command(Commands.userSelect, selection);\n}\n\nexport default function replaceText(\n  controller: Controller,\n  focus: IMatch,\n  text: string,\n) {\n  const { value } = controller;\n  const { document, decorations } = value;\n\n  const focusDecoration = decorations.find(\n    ({ mark, start }) => mark.type === 'match' && start.key === focus.key,\n  );\n\n  if (!focusDecoration) {\n    return controller;\n  }\n\n  const firstCharRange = getFirstCharRangeAfterStart(focusDecoration.start);\n  const marks = document.getMarksAtRange(firstCharRange);\n\n  return (\n    controller\n      .command(\n        Commands.select,\n        RangeSelection.create({\n          anchor: focusDecoration.start,\n          focus: focusDecoration.end,\n        }),\n      )\n      .command(Commands.del)\n      // 在修订模式下，删除文字之后，需要校正选区位置\n      .command(normalizeSelection)\n      .command(Commands.insertText, text, marks)\n  );\n}\n"],"file":"replaceText.js"}