import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SearchButton as Button } from '@ali/we-toolbar';
import { toggleFindAndReplace, updateFindFragment } from "../common/actions";
import { environment } from '@ali/4ever-cangjie';
var MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';
var SHORTCUT = MOD + "+F";
export default function createButton(ctlManager) {
  return function FindAndReplaceButton(props) {
    var controller = props.controller,
        locale = props.locale,
        rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

    var _controller$value$dat = controller.value.data,
        data = _controller$value$dat === void 0 ? {} : _controller$value$dat;
    var isVisible = data.findAndReplaceVisible || false;
    var isDisabled = controller.query('isDisableFindAndReplace');
    var handleClick = React.useCallback(function () {
      var mainController = ctlManager.mainController;

      if (!mainController) {
        return;
      }

      mainController.run('onAction', toggleFindAndReplace());
      var fragment = '';
      ctlManager.run(function (ctl) {
        var _ctl$value$fragment;

        var text = (_ctl$value$fragment = ctl.value.fragment) == null ? void 0 : _ctl$value$fragment.text;

        if (text) {
          fragment = text;
        }
      });

      if (fragment) {
        mainController.run('onAction', updateFindFragment(fragment));
      }
    }, []);
    return /*#__PURE__*/_createElement(Button, _extends({}, rest, {
      testid: "bi-toolbar-search",
      active: isVisible,
      onClick: handleClick,
      shortcutText: SHORTCUT,
      disabled: isDisabled,
      role: 'findandreplace'
    }));
  };
}
//# sourceMappingURL=createButton.js.map