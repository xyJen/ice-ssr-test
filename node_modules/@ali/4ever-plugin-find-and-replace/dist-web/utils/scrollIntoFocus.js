import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { domUtils, createPerfLazyRenderPlugin } from '@ali/4ever-cangjie';
import setAncestorsUnfold from "./setAncestorsUnfold";
import isPi from "./isPi";
import transferKey from "./transferKey";

var calcPageOffsetTop = function calcPageOffsetTop(document, pageIndex, scale) {
  var _document$data, _document$data$pagesI;

  if (scale === void 0) {
    scale = 1.0;
  }

  var gap = ((_document$data = document.data) == null ? void 0 : (_document$data$pagesI = _document$data.pagesInfo) == null ? void 0 : _document$data$pagesI.gap) || 0; // 计算页面的整体 offset 高度

  var pages = document.nodes.slice(0, pageIndex);
  var pageOffsetTop = pages.reduce(function (top, page) {
    var rect = page.data.pi.rect;
    var currentHeight = (rect.height + gap) * scale;
    return top + currentHeight;
  }, 0);
  return pageOffsetTop;
};

var calcPageOffsetTopOfKey = function calcPageOffsetTopOfKey(document, key) {
  // 找到锚点所在的 page
  var page = document.getFurthestAncestor(key);
  var path = document.getPath(page.key); // 当前 page 的页数

  var pageIndex = path[0];
  return calcPageOffsetTop(document, pageIndex);
};

var scrollToTop = function scrollToTop(target, top) {
  if (target instanceof Window) {
    target.scrollTo(target.scrollX, top);
  } else {
    target.scrollTop = top;
  }
};

var scrollIntoVirtualPage = function scrollIntoVirtualPage(key, controller, container) {
  var document = controller.value.document;
  var virtualMap = document.data.virtualMap || {}; // 找到锚点所在的 page

  var page = document.getFurthestAncestor(key); // 是否虚拟化

  var isVirtual = page ? !!virtualMap[page.key] : false;

  if (isVirtual && container) {
    var offsetTop = calcPageOffsetTopOfKey(document, key);
    scrollToTop(container, offsetTop);
  }
};

var scrollIntoFocus = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, controller, container, findText, onCustomScroll) {
    var _document$getParent;

    var document, transferredKey, closestBlock, selectedDom;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (container === void 0) {
              container = window;
            }

            document = controller.value.document;
            transferredKey = transferKey(key, controller, findText);

            if (!isPi(controller)) {
              _context.next = 7;
              break;
            }

            // 如果页面有虚拟化, 先滚动到虚拟化页面
            scrollIntoVirtualPage(transferredKey, controller, container);
            _context.next = 17;
            break;

          case 7:
            _context.prev = 7;

            if (!controller.enableVirtualize) {
              _context.next = 11;
              break;
            }

            _context.next = 11;
            return domUtils.scrollToNodeByKey(transferredKey, controller);

          case 11:
            closestBlock = document.getClosestBlock(transferredKey);

            if (closestBlock) {
              setAncestorsUnfold(controller, closestBlock);
            }

            _context.next = 17;
            break;

          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](7);

          case 17:
            selectedDom = domUtils.findDOMNodeSafely(transferredKey) || domUtils.findDOMNodeSafely(((_document$getParent = document.getParent(transferredKey)) == null ? void 0 : _document$getParent.key) || '');

            if (selectedDom) {
              createPerfLazyRenderPlugin.showPrunedElements(selectedDom);

              if (onCustomScroll) {
                onCustomScroll(selectedDom);
              } else {
                selectedDom.scrollIntoView({
                  block: 'center',
                  inline: 'center',
                  behavior: 'auto'
                });
              }
            }

            return _context.abrupt("return", controller);

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[7, 15]]);
  }));

  return function scrollIntoFocus(_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();

export default scrollIntoFocus;
//# sourceMappingURL=scrollIntoFocus.js.map