{"version":3,"sources":["../../../src/utils/ControllerManager.ts"],"names":["MAIN_CONTROLLER_ROLE","ControllerManager","controllers","ctls","mainController","push","c","role","includes","length","unshift","remove","cIndex","indexOf","splice","isMainController","run","fn","forEach","runWithSchedule","ctl","Promise","resolve","then"],"mappings":"AAEA,IAAMA,oBAAoB,GAAG,MAA7B;;IAEqBC,iB;AAInB,6BAAYC,WAAZ,EAA8B;AAAA,SAH9BC,IAG8B;AAAA,SAF9BC,cAE8B;AAC5B,SAAKD,IAAL,GAAYD,WAAW,IAAI,EAA3B;AACA,SAAKE,cAAL,GAAsB,IAAtB;AACD;;;;SAEDC,I,GAAA,cAAKC,CAAL,EAAoBC,IAApB,EAAmC;AACjC,QAAI,CAAC,KAAKJ,IAAL,CAAUK,QAAV,CAAmBF,CAAnB,CAAL,EAA4B;AAC1B,UAAI,KAAKH,IAAL,CAAUM,MAAV,KAAqB,CAArB,IAA0BF,IAAI,KAAKP,oBAAvC,EAA6D;AAC3D,aAAKI,cAAL,GAAsBE,CAAtB;AACD;;AACD,UAAIC,IAAI,KAAKP,oBAAb,EAAmC;AACjC,aAAKG,IAAL,CAAUO,OAAV,CAAkBJ,CAAlB;AACD,OAFD,MAEO;AACL,aAAKH,IAAL,CAAUE,IAAV,CAAeC,CAAf;AACD;AACF;AACF,G;;SAEDK,M,GAAA,gBAAOL,CAAP,EAAsB;AACpB,QAAMM,MAAM,GAAG,KAAKT,IAAL,CAAUU,OAAV,CAAkBP,CAAlB,CAAf;;AACA,QAAIM,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACjB,WAAKT,IAAL,CAAUW,MAAV,CAAiBF,MAAjB,EAAyB,CAAzB;AACD;;AACD,QAAIN,CAAC,KAAK,KAAKF,cAAf,EAA+B;AAC7B,WAAKA,cAAL,GAAsB,KAAKD,IAAL,CAAU,CAAV,CAAtB;AACD;AACF,G;;SAEDY,gB,GAAA,0BAAiBT,CAAjB,EAAgC;AAC9B,WAAOA,CAAC,KAAK,KAAKF,cAAlB;AACD,G;;SAEDY,G,GAAA,aAAIC,EAAJ,EAAiC;AAC/B,SAAKd,IAAL,CAAUe,OAAV,CAAkBD,EAAlB;AACD,G,CAED;;;SACAE,e,GAAA,yBACEF,EADF,EAEEb,cAFF,EAGE;AAAA,QADAA,cACA;AADAA,MAAAA,cACA,GADoC,KAAKA,cACzC;AAAA;;AACA,SAAKD,IAAL,CAAUe,OAAV,CAAkB,UAACE,GAAD,EAAS;AACzB,UAAIA,GAAG,KAAKhB,cAAZ,EAA4B;AAC1Ba,QAAAA,EAAE,CAACG,GAAD,CAAF;AACD,OAFD,MAEO;AACL;AACA;AACAC,QAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB;AAAA,iBAAMN,EAAE,CAACb,cAAD,CAAR;AAAA,SAAvB;AACD;AACF,KARD;AASD,G;;;;;SAtDkBH,iB","sourcesContent":["import { Controller } from '@ali/4ever-cangjie';\n\nconst MAIN_CONTROLLER_ROLE = 'main';\n\nexport default class ControllerManager {\n  ctls: Controller[];\n  mainController: Controller | null;\n\n  constructor(controllers?: []) {\n    this.ctls = controllers || [];\n    this.mainController = null;\n  }\n\n  push(c: Controller, role?: string) {\n    if (!this.ctls.includes(c)) {\n      if (this.ctls.length === 0 || role === MAIN_CONTROLLER_ROLE) {\n        this.mainController = c;\n      }\n      if (role === MAIN_CONTROLLER_ROLE) {\n        this.ctls.unshift(c);\n      } else {\n        this.ctls.push(c);\n      }\n    }\n  }\n\n  remove(c: Controller) {\n    const cIndex = this.ctls.indexOf(c);\n    if (cIndex !== -1) {\n      this.ctls.splice(cIndex, 1);\n    }\n    if (c === this.mainController) {\n      this.mainController = this.ctls[0];\n    }\n  }\n\n  isMainController(c: Controller) {\n    return c === this.mainController;\n  }\n\n  run(fn: (c: Controller) => void) {\n    this.ctls.forEach(fn);\n  }\n\n  // mainController 最后执行\n  runWithSchedule(\n    fn: (c: Controller) => void,\n    mainController: Controller | null = this.mainController,\n  ) {\n    this.ctls.forEach((ctl) => {\n      if (ctl !== mainController) {\n        fn(ctl);\n      } else {\n        // mainController 要等所有 controller 更新后再 render , 以获取最新 results\n        // 如果不这么处理，mainController 会在自己更新后立刻 render， 此时其他 controller 的 results 是过期的数据，导致定位错误\n        Promise.resolve().then(() => fn(mainController));\n      }\n    });\n  }\n}\n"],"file":"ControllerManager.js"}