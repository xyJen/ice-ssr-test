"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TopBar;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weDesign = require("@ali/we-design");

var _constants = require("../constants");

var _actions = require("../actions");

var _useIpadActiveIndex = require("../utils/useIpadActiveIndex");

const _createElement = /*#__PURE__*/React.createElement;
const {
  IS_IPAD
} = _everCangjie.environment;

const Wrapper = /*#__PURE__*/_styledComponents.default.div(["position:absolute;top:0;height:0;width:100%;left:0;display:flex;flex-direction:row;justify-content:stretch;[data-node-selecting] &[data-column-topbar]{display:none;}"]);

const Space = /*#__PURE__*/_styledComponents.default.div([""]);

const ItemWrapper = /*#__PURE__*/_styledComponents.default.div(["width:", "px;height:0;display:flex;align-items:center;justify-content:center;"], ({
  emptySpace
}) => emptySpace ? 0 : _constants.COLUMN_SPACE);

const Holder = /*#__PURE__*/_styledComponents.default.div(["width:0;height:0;position:relative;z-index:99;"]);

const InsertOuterWrapper = /*#__PURE__*/_styledComponents.default.div(["cursor:pointer;display:flex;align-items:center;justify-content:center;width:24px;height:24px;font-size:20px;line-height:20px;border-radius:50%;box-shadow:0px 5px 15px rgba(0,0,0,0.24);box-sizing:border-box;position:relative;transform:", ";opacity:", ";transition:transform 250ms,opacity 250ms;color:white;background-color:rgb(45,132,250);"], ({
  isVisible
}) => `scale(${isVisible ? 1 : 0.8})`, ({
  isVisible
}) => isVisible ? 1 : 0);

const SvgIcon = /*#__PURE__*/_styledComponents.default.svg(["position:absolute;left:10px;top:18px;"]);

const IconWrapper = /*#__PURE__*/_styledComponents.default.span(["display:inline-flex;align-items:center;justify-content:center;"]);

const Dot = /*#__PURE__*/_styledComponents.default.div(["position:absolute;left:-12px;top:-24px;width:24px;height:24px;"]);

const VertBar = /*#__PURE__*/_styledComponents.default.div(["width:2px;height:", ";opacity:", ";background:#3296fa;position:absolute;transition:opacity 250ms;left:11px;top:24px;pointer-events:none;"], ({
  height
}) => `${height}px`, ({
  isVisible
}) => isVisible ? 1 : 0);

const ICON_SIZE = 3;
const ICON_COLOR = 'rgba(23, 26, 29, 0.24)';

var _ref = /*#__PURE__*/_createElement(SvgIcon, {
  width: ICON_SIZE,
  height: ICON_SIZE,
  viewBox: `0 0 ${ICON_SIZE} ${ICON_SIZE}`,
  fill: "none"
}, /*#__PURE__*/_createElement("circle", {
  cx: ICON_SIZE / 2,
  cy: ICON_SIZE / 2,
  r: ICON_SIZE / 2,
  fill: ICON_COLOR
}));

const DotIcon = () => {
  return _ref;
};

function InsertBar({
  insertTitle,
  targetKey,
  offset,
  index
}) {
  const ref = React.useRef(null);

  const controller = _everCangjie.Controller.useController();

  const [isVisible, setIsVisible] = React.useState(false);
  const [height, setHeight] = React.useState(0);
  const zoom = (0, _everCangjie.useZoom)();
  const [activeIndex, setActiveIndex] = (0, _useIpadActiveIndex.useIpadActiveBarIndex)();
  const ipadBarVisible = activeIndex === index;
  React.useEffect(() => {
    if (!isVisible && !ipadBarVisible) {
      return;
    }

    const {
      height: barHeight
    } = ref.current?.closest('[data-columns]')?.getBoundingClientRect() || {};
    setHeight((barHeight || 0) / zoom);
  }, [isVisible, zoom, ipadBarVisible]);
  const handleMouseEnter = React.useCallback(() => {
    setIsVisible(true); // ipad 使用键盘的触控板 hover 时会走这里

    if (IS_IPAD) {
      setActiveIndex(index);
    }
  }, [index, setActiveIndex]);
  const handleMouseLeave = React.useCallback(() => {
    setIsVisible(false);

    if (IS_IPAD && activeIndex !== -1) {
      setActiveIndex(-1);
    }
  }, [activeIndex, setActiveIndex]);
  const handleClick = React.useCallback(() => {
    if (IS_IPAD) {
      if (ipadBarVisible) {
        setActiveIndex(-1);
      } else {
        setActiveIndex(index);
        return;
      }
    }

    controller.run('onAction', (0, _actions.insertCol)({
      targetKey,
      offset
    }));
  }, [controller, targetKey, offset, ipadBarVisible, index, setActiveIndex]);
  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(InsertOuterWrapper, {
    ref: ref,
    onMouseDown: handleClick,
    isVisible: isVisible || ipadBarVisible,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, /*#__PURE__*/_createElement(_weDesign.Tooltip, {
    placement: 'top',
    title: insertTitle || 'Insert',
    disabled: IS_IPAD
  }, /*#__PURE__*/_createElement(IconWrapper, null, /*#__PURE__*/_createElement(_weDesign.ToolbarTablePlusNormal, {
    style: {
      fontSize: 20
    }
  })))), /*#__PURE__*/_createElement(VertBar, {
    height: height,
    isVisible: isVisible || ipadBarVisible
  }));
}

var _ref2 = /*#__PURE__*/_createElement(DotIcon, null);

function Item(configs) {
  return /*#__PURE__*/_createElement(ItemWrapper, {
    emptySpace: configs.emptySpace
  }, /*#__PURE__*/_createElement(Holder, null, /*#__PURE__*/_createElement(Dot, null, _ref2, /*#__PURE__*/_createElement(InsertBar, configs))));
}

function TopBar({
  items,
  configs
}) {
  const totalWidth = items.reduce((a, i) => a + i.width, 0);
  const fixedSize = (items.length - 1) * _constants.COLUMN_SPACE;
  return /*#__PURE__*/_createElement(Wrapper, {
    "data-column-topbar": true
  }, items.map(({
    key,
    width
  }, index) => {
    return /*#__PURE__*/_createElement(React.Fragment, {
      key: `${key}_${index}_${items.length}`
    }, index === 0 && /*#__PURE__*/_createElement(Item, {
      emptySpace: true,
      insertTitle: configs?.locale?.insertCol,
      targetKey: key,
      offset: 0,
      index: 0
    }), /*#__PURE__*/_createElement(Space, {
      style: {
        width: `calc((100% - ${fixedSize}px) * ${width / totalWidth})`
      }
    }), /*#__PURE__*/_createElement(Item, {
      emptySpace: index === items.length - 1,
      insertTitle: configs?.locale?.insertCol,
      targetKey: key,
      offset: 1,
      index: index + 1
    }));
  }));
}
//# sourceMappingURL=TopBar.js.map