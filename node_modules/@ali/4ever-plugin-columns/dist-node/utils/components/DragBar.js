"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SplitLine;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everCangjie = require("@ali/4ever-cangjie");

var _useIpadActiveIndex = require("../utils/useIpadActiveIndex");

var _everComponent = require("@ali/4ever-component");

var _constants = require("../constants");

const _createElement = /*#__PURE__*/React.createElement;
const {
  IS_IPAD
} = _everCangjie.environment;

const Line = /*#__PURE__*/_styledComponents.default.div(["width:4px;height:100%;transition:background-color 250ms;background-color:rgba(0,137,255,0.48);border-radius:2px;opacity:", ";.draggable-hander &{opacity:0 !important;pointer-events:none;}"], ({
  visible
}) => visible ? 1 : 0);

const Wrapper = /*#__PURE__*/_styledComponents.default.div(["cursor:", ";margin:0;padding:0 ", "px;&:hover ", "{opacity:", ";}[data-node-selecting] &[data-column-dragkey]{pointer-events:none;}"], props => props.readOnly ? 'inherit' : 'col-resize', (_constants.COLUMN_SPACE - 4) / 2, Line, props => props.isEnabled ? '1' : '0');

const CURSOR_SIZE = 5;

function SplitLine(props) {
  const {
    cellKey,
    isAligned,
    isEnabled,
    onDragging,
    onDraggingChange,
    readOnly,
    index
  } = props;
  const isDragging = React.useRef(false);
  const ref = React.useRef(null);
  const [activeIndex, setActiveIndex] = (0, _useIpadActiveIndex.useIpadActiveBarIndex)();
  const handleMouseMove = React.useCallback(event => {
    event.stopPropagation();
    event.stopImmediatePropagation();
    event.preventDefault();

    if (isDragging.current) {
      onDraggingChange(true);
      onDragging(cellKey, event.clientX + CURSOR_SIZE);
    }
  }, [cellKey, onDragging, onDraggingChange]);
  const handleMouseUp = React.useCallback(event => {
    event.stopPropagation();
    event.stopImmediatePropagation();
    event.preventDefault();
    event.currentTarget.releasePointerCapture(event.pointerId);
    isDragging.current = false;
    onDraggingChange(false);

    if (!ref.current) {
      return;
    }

    ref.current.removeEventListener('pointerup', handleMouseUp);
    ref.current.removeEventListener('pointermove', handleMouseMove);
  }, [handleMouseMove, onDraggingChange]);
  const handleMouseDown = React.useCallback(event => {
    event.stopPropagation();
    event.stopImmediatePropagation();
    event.preventDefault();

    if (!ref.current) {
      return;
    }

    isDragging.current = true;

    if (event.pointerType === 'mouse') {
      event.currentTarget.setPointerCapture(event.pointerId);
    }

    ref.current.addEventListener('pointerup', handleMouseUp);
    ref.current.addEventListener('pointermove', handleMouseMove);
  }, [handleMouseMove, handleMouseUp]);
  const handleMouseEnter = React.useCallback(() => {
    // ipad hover 时，期望 topBar 和 dragBar 同时显示
    if (IS_IPAD) {
      setActiveIndex(index);
    }
  }, [index, setActiveIndex]);
  const handleMouseLeave = React.useCallback(() => {
    if (IS_IPAD && activeIndex !== -1) {
      setActiveIndex(-1);
    }
  }, [activeIndex, setActiveIndex]);
  React.useEffect(() => {
    const node = ref.current;

    if (!node || !isEnabled) {
      return undefined;
    }

    node.addEventListener('pointerdown', handleMouseDown);
    return () => {
      node.removeEventListener('pointerdown', handleMouseDown);
    };
  }, [handleMouseDown, handleMouseMove, handleMouseUp, isEnabled, activeIndex]);

  const handleClick = () => {
    if (IS_IPAD && activeIndex !== index) {
      setActiveIndex(index);
    }
  };

  (0, _everComponent.useOnClickOutside)(ref, () => {
    if (IS_IPAD && activeIndex !== -1) {
      setActiveIndex(-1);
    }
  }, false, ele => {
    // 忽略 topbar
    return !!ele.closest('div[data-column-topbar]');
  });
  return /*#__PURE__*/_createElement(Wrapper, {
    readOnly: readOnly,
    isEnabled: isEnabled,
    "data-column-dragkey": cellKey,
    ref: ref,
    onClick: handleClick,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, /*#__PURE__*/_createElement(Line, {
    isAligned: isAligned,
    "data-column-dragkey": cellKey,
    visible: activeIndex === index
  }));
}
//# sourceMappingURL=DragBar.js.map