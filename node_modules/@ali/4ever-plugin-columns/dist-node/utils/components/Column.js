"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Column;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _weDesign = require("@ali/we-design");

var _everCangjie = require("@ali/4ever-cangjie");

var _everComponent = require("@ali/4ever-component");

var _ColumnsProvider = require("../utils/ColumnsProvider");

var _constants = require("../constants");

var _everUtils = require("@ali/4ever-utils");

var _DragBar = _interopRequireDefault(require("./DragBar"));

var _actions = require("../actions");

var _isColumns = require("../utils/isColumns");

/* eslint-disable @typescript-eslint/no-shadow */
const _createElement = /*#__PURE__*/React.createElement;
const {
  IS_MOBILE,
  IS_IPAD
} = _everCangjie.environment;
const IS_PC_OR_IPAD = !IS_MOBILE || IS_IPAD;

const Wrapper = /*#__PURE__*/_styledComponents.default.div(["flex-grow:0;flex-shrink:0;box-sizing:border-box;position:relative;display:block;border-radius:8px;transition:background 300ms,border 300ms,padding 300ms;margin-bottom:0;&.draggable-highlight{background-color:", " !important;}", " ", ""], _weDesign.theme.commonBgHoverColor, p => p.isHover ? _everComponent.hoverCSS.borderBoxHoverCSS : '', props => IS_PC_OR_IPAD ? '' : `
      @media (max-width: 500px) {
        width: initial !important;
        margin-bottom: ${props.isLastOne ? '0' : '8px'};
      }
    `);

const Content = /*#__PURE__*/_styledComponents.default.div(["display:flex;flex-direction:column;justify-content:center;align-items:stretch;height:100%;padding-top:7px;padding-bottom:7px;& > [data-cangjie-leaf-block]{max-width:100%;}", " span[data-cangjie-placeholder]:not(td span[data-cangjie-placeholder]){position:absolute !important;display:inline-block;width:calc(100% - 14px);height:calc(100% - 14px);& > span{width:100% !important;overflow:hidden;text-overflow:ellipsis !important;}}"], (0, _styledComponents.css)(["", ""], _everUtils.blockMarginStyleInContainer));

const PercentTab = /*#__PURE__*/_styledComponents.default.div(["position:absolute;left:0;top:0;width:100%;height:100%;background:rgba(0,137,255,0.08);display:flex;align-items:center;justify-content:center;"]);

const PercentText = /*#__PURE__*/_styledComponents.default.div(["color:", ";font-size:14px;font-weight:bold;transition:background-color 250ms;background-color:", ";padding:0 10px;border-radius:4px;"], ({
  isAligned
}) => isAligned ? 'rgba(0, 137, 255, 0.48)' : '#A9AEB3', ({
  isAligned
}) => isAligned ? 'rgba(231, 244, 255, 0.8)' : 'rgb(245, 246, 247, 0.8)');

const SelectedColumnLayer = /*#__PURE__*/_styledComponents.default.div(["position:absolute;width:100%;height:100%;background:rgba(0,106,254,0.12);pointer-events:none;border-radius:8px;display:", ";"], ({
  isSelectWholeTable
}) => isSelectWholeTable ? 'block' : 'none');

const vAlignToFlex = vAlign => {
  if (vAlign === 'top') {
    return 'flex-start';
  }

  if (vAlign === 'bottom') {
    return 'flex-end';
  }

  return 'center';
};

function isHidePadding(colors) {
  return colors.every(c => !c || c === 'transparent');
}

function Column({
  cell,
  controller,
  ColorButton,
  children,
  configs
}) {
  const [, forceUpdate] = React.useReducer(c => !c, false);
  const {
    document
  } = controller.value;
  const table = document.getClosest(cell.key, _isColumns.isColumnsTable);
  const isSelectWholeTable = controller.query('isSelectWholeTable', {
    node: table
  });
  const cellItem = (0, _ColumnsProvider.useCellConfigs)(cell.key);
  const ref = React.useRef(null);
  React.useEffect(() => {
    const nodes = cell.nodes || [];

    if (!nodes.length || nodes.every(n => !_everCangjie.Block.isBlock(n))) {
      controller.run('onAction', (0, _actions.deleteColumn)({
        key: cell.key
      }));
    }
  }, [cell, controller]);
  const [showInnerToolbar, setShowInnerToolbar] = React.useState(false);
  const updateInnerToolbar = React.useCallback((0, _lodash.throttle)(event => {
    const {
      target
    } = event;

    if (!(target instanceof HTMLElement)) {
      return;
    }

    const panel = target.closest('[data-color-select-panel]');
    const showIt = !panel || panel === ref.current;

    if (showInnerToolbar !== showIt) {
      setShowInnerToolbar(showIt);
    }
  }, 100, {
    trailing: true
  }), [showInnerToolbar]);
  const handleHideInnerToolbar = React.useCallback(() => {
    updateInnerToolbar.cancel();
    setShowInnerToolbar(false);
  }, [updateInnerToolbar]);
  const enableBorderHighlight = React.useMemo(() => controller.query('enableBorderHighlight'), []);
  const [isHover, hoverHandlers] = (0, _everComponent.useHover)(enableBorderHighlight, {
    onMouseLeave: handleHideInnerToolbar
  });
  const handleMouseMove = React.useCallback(event => {
    if (!IS_PC_OR_IPAD) {
      return;
    }

    event.persist(); // TODO

    updateInnerToolbar(event);
  }, [updateInnerToolbar]); // TODO: 暴露全局的 keydown，不要每个组件自己注册一遍

  React.useEffect(() => {
    window.document.addEventListener('keydown', handleHideInnerToolbar);
    return () => {
      window.document.removeEventListener('keydown', handleHideInnerToolbar);
    };
  }, [controller, handleHideInnerToolbar]); // fix: 选中整栏, 其他栏没有重渲

  const onSelectingHots = React.useCallback(hots => {
    const isSelectWholeTable = controller.query('isSelectWholeTable', {
      node: table
    });

    if (!isSelectWholeTable) {
      return;
    }

    const hot = hots.find(hot => {
      const hotNodeKey = hot.node.key;

      if ((0, _isColumns.isColumnsCell)(document, hotNodeKey) && hotNodeKey === cell.key) {
        return hot;
      } else {
        const maybeCell = document.getClosest(hotNodeKey, ({
          key
        }) => (0, _isColumns.isColumnsCell)(document, key));

        if (maybeCell && maybeCell.key === cell.key) {
          return hot;
        }
      }

      return false;
    });

    if (hot) {
      forceUpdate();
    }
  }, [controller, cell, table, document]);
  (0, _everCangjie.useSelectingHots)(controller, onSelectingHots);

  if (!cellItem) {
    return /*#__PURE__*/_createElement(React.Fragment, null, children);
  }

  const {
    index,
    percent,
    percentAligned,
    isDragging,
    count,
    handleDragging,
    handleDraggingChange
  } = cellItem;
  const widthStr = `calc((100% - ${_constants.COLUMN_SPACE * (count - 1)}px) * ${percent})`;
  const {
    fill,
    vAlign,
    border
  } = cell.data;
  const pLeft = isHidePadding([fill, border]) ? 0 : _constants.HORIZ_PADDING;
  const pRight = isHidePadding([fill, border]) ? 0 : _constants.HORIZ_PADDING;
  const background = fill || 'transparent';
  const style = {
    width: widthStr,
    background,
    border: `1px solid ${border || background}`
  };
  const contentStyle = {
    justifyContent: vAlignToFlex(vAlign),
    paddingLeft: `${pLeft}px`,
    paddingRight: `${pRight}px`
  };
  const percentText = `${Math.round(percent * 100)}%`;
  const disableInnerButton = controller.query('hasHoverToolbar', 'columns');
  let ExtraAboveComponent = configs?.getExtraAboveComponent?.(cell, controller);
  let extraAboveComponentStyle;

  if (ExtraAboveComponent) {
    extraAboveComponentStyle = {
      width: widthStr
    };
    style.width = '100%';
  }

  ExtraAboveComponent = ExtraAboveComponent || React.Fragment;
  return /*#__PURE__*/_createElement(React.Fragment, null, index !== 0 && /*#__PURE__*/_createElement(_DragBar.default, {
    cellKey: cell.key,
    isAligned: isDragging,
    readOnly: controller.readOnly,
    isEnabled: IS_PC_OR_IPAD && !controller.readOnly,
    onDragging: handleDragging,
    onDraggingChange: handleDraggingChange,
    index: index
  }), /*#__PURE__*/_createElement(ExtraAboveComponent, {
    controller: controller,
    node: cell,
    style: extraAboveComponentStyle,
    isLastOne: index === count - 1
  }, /*#__PURE__*/_createElement(Wrapper, (0, _extends2.default)({
    style: style,
    ref: ref,
    "data-column": true,
    isLastOne: index === count - 1,
    "data-container-block": true,
    "data-color-select-panel": true
  }, hoverHandlers, {
    onMouseMove: handleMouseMove,
    "data-block-uuid": cell.data?.uuid,
    "data-cangjie-key": cell.key,
    "data-hover-box": "borderBox",
    isHover: isHover && controller.value.isFocused
  }), /*#__PURE__*/_createElement(SelectedColumnLayer, {
    isSelectWholeTable: isSelectWholeTable
  }), /*#__PURE__*/_createElement(Content, {
    style: contentStyle
  }, children), isDragging && /*#__PURE__*/_createElement(PercentTab, null, /*#__PURE__*/_createElement(PercentText, {
    isAligned: percentAligned
  }, percentText)), !disableInnerButton && !controller.readOnly && !!ColorButton && /*#__PURE__*/_createElement(ColorButton, {
    controller: controller,
    bgcolor: background,
    node: cell,
    showInnerToolbar: showInnerToolbar
  }))));
}
//# sourceMappingURL=Column.js.map