{"version":3,"sources":["../../../../src/utils/components/ColorButton.tsx"],"names":["DEFAULTS","color","border","bgcolor","PaddingHolder","styled","div","props","showInnerToolbar","visibile","Wrapper","ToolbarWrapper","ColorPanelWrapper","blockEvent","event","stopPropagation","preventDefault","colorToWhite","replace","NewPanel","controller","node","fill","data","handleChange","key","value","run","Toolbar","overlayVisible","setOverlayVisible","React","useState","visible","setVisible","scrollContent","window","document","body","useEffect","backgroundColor","vi"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Dropdown, ColorPanel } from '@ali/we-design';\nimport { DropdownAnimation } from '@ali/we-util';\nimport { Controller, useScrollableContent } from '@ali/4ever-cangjie';\nimport { IconButton } from '@ali/we-toolbar';\nimport { PaletteNormal } from '@ali/we-icon';\nimport { TableCell } from '@ali/4ever-plugin-table';\nimport { setCellData } from '../actions';\n\nconst DEFAULTS = {\n  color: '',\n  border: '',\n  bgcolor: '',\n};\n\nconst PaddingHolder = styled.div<{\n  showInnerToolbar: boolean;\n  visibile: boolean;\n}>`\n  display: ${(props) => (props.showInnerToolbar ? 'flex' : 'none')};\n  opacity: ${(props) => (props.visibile ? '1' : '0')};\n  flex-direction: row;\n  padding: 0;\n  position: absolute;\n  z-index: 200;\n  top: 3px;\n  right: 3px;\n`;\n\nconst Wrapper = styled.div<{\n  bgcolor: string;\n}>`\n  padding: ${({ bgcolor }) => (bgcolor === 'white' ? '0' : '1px')};\n  border-radius: 4px;\n  transition: background-color 250ms;\n  background-color: ${({ bgcolor }) => bgcolor};\n`;\n\nconst ToolbarWrapper = styled.div`\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 250ms;\n  background-color: rgba(126, 134, 142, 0.15);\n  &:hover {\n    background-color: rgba(126, 134, 142, 0.12);\n  }\n  & div .icon-button {\n    cursor: pointer;\n  }\n`;\n\ninterface IProps {\n  showInnerToolbar: boolean;\n  controller: Controller;\n  bgcolor: string;\n  node: TableCell;\n}\n\nconst ColorPanelWrapper = styled.div`\n  background: white;\n  padding: 8px;\n  border-radius: 4px;\n`;\n\nconst blockEvent = (event: React.MouseEvent) => {\n  event.stopPropagation();\n  event.preventDefault();\n};\n\nconst colorToWhite = (color?: string) => {\n  return (color || 'white').replace('transparent', 'white');\n};\n\nfunction NewPanel({ controller, node }: Omit<IProps, 'showInnerToolbar'>) {\n  const { color, fill: bgcolor, border } = node.data;\n  const handleChange = (key: 'color' | 'fill' | 'border') => (value: any) => {\n    const data = { [key]: value };\n    controller.run('onCangjieBlur');\n    controller.run('onAction', setCellData({ node, data }));\n  };\n\n  return (\n    <ColorPanelWrapper onMouseDown={blockEvent} onClick={blockEvent}>\n      <ColorPanel\n        color={color}\n        defaultColor={DEFAULTS.color}\n        onColorClick={handleChange('color')}\n        borderColor={border}\n        defaultBorderColor={DEFAULTS.border}\n        onBorderColorClick={handleChange('border')}\n        backgroundColor={bgcolor}\n        defaultBackgroundColor={DEFAULTS.bgcolor}\n        onBackgroundColorClick={handleChange('fill')}\n        enableResetButton\n      />\n    </ColorPanelWrapper>\n  );\n}\n\nconst Toolbar: React.FC<IProps> = (props) => {\n  const { showInnerToolbar, bgcolor, node } = props;\n  const [overlayVisible, setOverlayVisible] = React.useState(false);\n  const [visible, setVisible] = React.useState(!showInnerToolbar);\n  const scrollContent = useScrollableContent() || window.document.body;\n  // 加 EmptyContainer 是因为 IconButton 未监听 onMouseEnter 等， trigger=\"hover\" 无法生效\n  React.useEffect(() => {\n    if (!showInnerToolbar) {\n      setOverlayVisible(false);\n    }\n    setVisible(showInnerToolbar);\n  }, [showInnerToolbar]);\n  return (\n    <PaddingHolder showInnerToolbar={showInnerToolbar} visibile={visible}>\n      <Wrapper bgcolor={colorToWhite(bgcolor)}>\n        <ToolbarWrapper>\n          <Dropdown\n            trigger=\"click\"\n            overlay={\n              <DropdownAnimation visible={overlayVisible}>\n                <NewPanel {...props} />\n              </DropdownAnimation>\n            }\n            overlayStyle={{\n              backgroundColor: 'transparent',\n              border: 'none',\n            }}\n            onVisibleChange={(vi) => {\n              setOverlayVisible(vi);\n            }}\n            placement=\"topRight\"\n            visible={overlayVisible}\n            getContainer={() => scrollContent}\n          >\n            <IconButton icon={<PaletteNormal />} />\n          </Dropdown>\n        </ToolbarWrapper>\n      </Wrapper>\n    </PaddingHolder>\n  );\n};\n\nexport default Toolbar;\n"],"file":"ColorButton.js"}