"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeColumns = mergeColumns;
exports.insertColumns = insertColumns;
exports.insertCol = insertCol;
exports.deleteColumn = deleteColumn;
exports.cleanUpColumns = cleanUpColumns;
exports.removeInvalidCells = removeInvalidCells;
exports.setCellData = setCellData;
exports.ACTION_SET_CELL_DATA = exports.ACTION_REMOVE_INVALID_CELLS = exports.ACTION_CLEANUP_COLUMN = exports.ACTION_DELETE_COLUMN = exports.ACTION_INERT_COL = exports.ACTION_INERT_COLUMNS = exports.ACTION_MERGE_COLUMNS = void 0;
const ACTION_MERGE_COLUMNS = 'columns_merge_columns';
exports.ACTION_MERGE_COLUMNS = ACTION_MERGE_COLUMNS;
const ACTION_INERT_COLUMNS = 'columns_insert_columns';
exports.ACTION_INERT_COLUMNS = ACTION_INERT_COLUMNS;
const ACTION_INERT_COL = 'columns_insert_col';
exports.ACTION_INERT_COL = ACTION_INERT_COL;
const ACTION_DELETE_COLUMN = 'columns_delete_column';
exports.ACTION_DELETE_COLUMN = ACTION_DELETE_COLUMN;
const ACTION_CLEANUP_COLUMN = 'columns_cleanup_column';
exports.ACTION_CLEANUP_COLUMN = ACTION_CLEANUP_COLUMN;
const ACTION_REMOVE_INVALID_CELLS = 'columns_remove_invalid_cells';
exports.ACTION_REMOVE_INVALID_CELLS = ACTION_REMOVE_INVALID_CELLS;
const ACTION_SET_CELL_DATA = 'columns_set_cell_data';
exports.ACTION_SET_CELL_DATA = ACTION_SET_CELL_DATA;

function mergeColumns(payload) {
  return {
    type: ACTION_MERGE_COLUMNS,
    payload
  };
}

function insertColumns(payload) {
  return {
    type: ACTION_INERT_COLUMNS,
    payload
  };
}

function insertCol(payload) {
  return {
    type: ACTION_INERT_COL,
    payload
  };
}

function deleteColumn(payload) {
  return {
    type: ACTION_DELETE_COLUMN,
    payload
  };
}

function cleanUpColumns() {
  return {
    type: ACTION_CLEANUP_COLUMN
  };
}

function removeInvalidCells() {
  return {
    type: ACTION_REMOVE_INVALID_CELLS
  };
}

function setCellData(payload) {
  return {
    type: ACTION_SET_CELL_DATA,
    payload
  };
}
//# sourceMappingURL=index.js.map