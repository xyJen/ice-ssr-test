{"version":3,"sources":["../../../../src/utils/commands/removeInvalidCells.ts"],"names":["removeInvalidCells","controller","document","value","aloneTable","nodes","find","n","Table","isTable","data","sr","some","c","TableCell","isTableCell","row","keys","reduce","arr","node","push","key","withoutNormalizing","forEach","k","command","Commands","removeNodeByKey"],"mappings":";;;;;;;AAAA;;AACA;;AAEe,SAASA,kBAAT,CAA4BC,UAA5B,EAAgE;AAC7E,QAAM;AAAEC,IAAAA;AAAF,MAAeD,UAAU,CAACE,KAAhC;AACA,QAAMC,UAAU,GAAGF,QAAQ,CAACG,KAAT,CAAeC,IAAf,EACjB;AACCC,EAAAA,CAAD,IACEC,uBAAMC,OAAN,CAAcF,CAAd,KACAA,CAAC,CAACG,IAAF,CAAOC,EADP,IAEAJ,CAAC,CAACF,KAAF,CAAQ,CAAR,GAAYA,KAAZ,EAAmBO,IAAnB,CAAyBC,CAAD,IAAO,CAACC,2BAAUC,WAAV,CAAsBF,CAAtB,CAAhC,CALe,CAAnB;;AAOA,MAAI,CAACT,UAAL,EAAiB;AACf,WAAOH,UAAP;AACD;;AACD,QAAMe,GAAG,GAAGZ,UAAU,CAACC,KAAX,CAAiB,CAAjB,CAAZ;AACA,QAAMY,IAAI,GAAGD,GAAG,CAACX,KAAJ,CAAUa,MAAV,CAA2B,CAACC,GAAD,EAAMC,IAAN,KAAqB;AAC3D,QAAI,CAACN,2BAAUC,WAAV,CAAsBK,IAAtB,CAAL,EAAkC;AAChCD,MAAAA,GAAG,CAACE,IAAJ,CAASD,IAAI,CAACE,GAAd;AACD;;AACD,WAAOH,GAAP;AACD,GALY,EAKV,EALU,CAAb;AAMAlB,EAAAA,UAAU,CAACsB,kBAAX,CAA8B,MAAM;AAClCN,IAAAA,IAAI,CAACO,OAAL,CAAcC,CAAD,IAAO;AAClBxB,MAAAA,UAAU,CAACyB,OAAX,CAAmBC,sBAASC,eAA5B,EAA6CH,CAA7C;AACD,KAFD;AAGD,GAJD;AAKA,SAAOzB,kBAAkB,CAACC,UAAD,CAAzB;AACD","sourcesContent":["import { Commands, Node, Controller } from '@ali/4ever-cangjie';\nimport { Table, TableCell } from '@ali/4ever-plugin-table';\n\nexport default function removeInvalidCells(controller: Controller): Controller {\n  const { document } = controller.value;\n  const aloneTable = document.nodes.find(\n    // try to find invalid cells (row.nodes.some)\n    (n) =>\n      Table.isTable(n) &&\n      n.data.sr &&\n      n.nodes[0]?.nodes?.some((c) => !TableCell.isTableCell(c)),\n  ) as Table | undefined;\n  if (!aloneTable) {\n    return controller;\n  }\n  const row = aloneTable.nodes[0];\n  const keys = row.nodes.reduce<string[]>((arr, node: Node) => {\n    if (!TableCell.isTableCell(node)) {\n      arr.push(node.key);\n    }\n    return arr;\n  }, []);\n  controller.withoutNormalizing(() => {\n    keys.forEach((k) => {\n      controller.command(Commands.removeNodeByKey, k);\n    });\n  });\n  return removeInvalidCells(controller);\n}\n"],"file":"removeInvalidCells.js"}