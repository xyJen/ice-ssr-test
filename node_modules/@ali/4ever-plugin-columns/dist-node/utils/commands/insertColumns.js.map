{"version":3,"sources":["../../../../src/utils/commands/insertColumns.ts"],"names":["DEFAULT_WIDTH","canNodeHasColumnsSibling","node","Block","isBlock","TableRow","isTableRow","TableCell","isTableCell","insertColumns","controller","params","document","selection","value","key","focusKey","focus","targetBlock","getClosest","targetPath","getPath","length","size","text","blocks","Array","fill","map","_","index","Paragraph","create","nodes","Text","replace","trim","cells","block","data","SIMPLE_HIGHLIGHTS","vAlign","DEAFULT_VALIGN","tableRow","colsWidth","Math","round","table","Table","sr","targetIndex","pop","command","Commands","insertNodeByPath","anchor","query","Queries","pointAtStartOfNode","newSelection","Selection","select","removeNodeByKey"],"mappings":"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","sourcesContent":["import {\n  Controller,\n  Commands,\n  Selection,\n  Queries,\n  Block,\n  Text,\n} from '@ali/4ever-cangjie';\nimport { Table, TableRow, TableCell } from '@ali/4ever-plugin-table';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport { isEmptyParagraph } from '@ali/4ever-utils';\nimport { DEAFULT_VALIGN, SIMPLE_HIGHLIGHTS } from '../constants';\nimport { InsertColumnsParams } from '../types';\n\nconst DEFAULT_WIDTH = 650;\n\nconst canNodeHasColumnsSibling = (node: any) => {\n  if (!Block.isBlock(node)) {\n    return false;\n  }\n  if (TableRow.isTableRow(node) || TableCell.isTableCell(node)) {\n    return false;\n  }\n  return true;\n};\n\nexport default function insertColumns(\n  controller: Controller,\n  params: InsertColumnsParams,\n): Controller {\n  const { document, selection } = controller.value;\n  const { key: focusKey } = selection.focus;\n  const targetBlock = document.getClosest(\n    focusKey,\n    canNodeHasColumnsSibling,\n  ) as Block | undefined;\n  const targetPath = targetBlock && document.getPath(targetBlock.key);\n  if (!targetPath || !targetPath.length) {\n    return controller;\n  }\n\n  const { size, text } = params;\n  const blocks = new Array(size).fill(null).map((_, index) => {\n    return Paragraph.create({\n      nodes: [Text.create(text.replace('%', ` ${index + 1} `).trim())],\n    });\n  });\n  const cells = blocks.map((block, index) => {\n    return TableCell.create({\n      nodes: [block],\n      data: {\n        fill: SIMPLE_HIGHLIGHTS[index % SIMPLE_HIGHLIGHTS.length],\n        vAlign: DEAFULT_VALIGN,\n      },\n    });\n  });\n\n  const tableRow = TableRow.create({ nodes: cells });\n  const colsWidth = new Array(size).fill(Math.round(DEFAULT_WIDTH / size));\n  const table = Table.create({\n    nodes: [tableRow],\n    data: { sr: true, colsWidth },\n  });\n\n  const targetIndex = targetPath.pop()!;\n  controller.command(\n    Commands.insertNodeByPath,\n    targetPath,\n    targetIndex + 1,\n    table,\n  );\n\n  const anchor = controller.query(\n    Queries.pointAtStartOfNode,\n    cells[0].nodes[0],\n  );\n  const newSelection = Selection.create({ anchor, focus: anchor });\n  controller.command(Commands.select, newSelection).command(Commands.focus);\n  if (isEmptyParagraph(targetBlock)) {\n    controller.command(Commands.removeNodeByKey, targetBlock.key);\n  }\n  return controller;\n}\n"],"file":"insertColumns.js"}