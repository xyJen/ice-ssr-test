{"version":3,"sources":["../../../../src/utils/commands/deleteColumn.ts"],"names":["deleteColumn","controller","key","document","value","targetColumn","getNode","command","Commands","removeNodeByKey","targetRow","getParent","targetTable","removedIndex","nodes","findIndex","node","colsWidth","data","willBeAssignedWidth","splice","deltaWidth","length","newColsWidth","map","width","setNodeByKey","newDocument","newTargetTable","withoutNormalizing","tablePath","getPath","removeNodeByPath"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEe,SAASA,YAAT,CACbC,UADa,EAEb;AAAEC,EAAAA;AAAF,CAFa,EAGb;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeF,UAAU,CAACG,KAAhC;AACA,QAAMC,YAAY,GAAGF,QAAQ,CAACG,OAAT,CAAiBJ,GAAjB,CAArB;;AACA,MAAIG,YAAJ,EAAkB;AAChBJ,IAAAA,UAAU,CAACM,OAAX,CAAmBC,sBAASC,eAA5B,EAA6CP,GAA7C;AAEA,UAAMQ,SAAS,GAAGP,QAAQ,CAACQ,SAAT,CAAmBT,GAAnB,CAAlB;AACA,UAAMU,WAAW,GAAGT,QAAQ,CAACQ,SAAT,CAAmBD,SAAS,EAAER,GAAX,IAAkB,EAArC,CAApB,CAJgB,CAMhB;;AACA,QAAIQ,SAAS,IAAIE,WAAjB,EAA8B;AAC5B,YAAMC,YAAY,GAAGH,SAAS,CAACI,KAAV,CAAgBC,SAAhB,CAA2BC,IAAD,IAAUA,IAAI,CAACd,GAAL,KAAaA,GAAjD,CAArB;AACA,YAAMe,SAAS,GAAG,CAAC,GAAGL,WAAW,EAAEM,IAAb,CAAkBD,SAAtB,CAAlB;AACA,YAAME,mBAAmB,GAAGF,SAAS,CAACG,MAAV,CAAiBP,YAAjB,EAA+B,CAA/B,EAAkC,CAAlC,CAA5B;AACA,YAAMQ,UAAU,GAAGF,mBAAmB,GAAGF,SAAS,CAACK,MAAnD;AACA,YAAMC,YAAY,GAAGN,SAAS,CAACO,GAAV,CAAeC,KAAD,IAAWA,KAAK,GAAGJ,UAAjC,CAArB;AAEApB,MAAAA,UAAU,CAACM,OAAX,CAAmBC,sBAASkB,YAA5B,EAA0Cd,WAAW,EAAEV,GAAvD,EAA4D;AAC1DgB,QAAAA,IAAI,EAAE,EACJ,GAAGN,WAAW,EAAEM,IADZ;AAEJD,UAAAA,SAAS,EAAEM;AAFP;AADoD,OAA5D;AAMD,KApBe,CAsBhB;;;AACA,UAAM;AAAEpB,MAAAA,QAAQ,EAAEwB;AAAZ,QAA4B1B,UAAU,CAACG,KAA7C;AACA,UAAMwB,cAAc,GAAGD,WAAW,CAAChB,SAAZ,CAAsBD,SAAS,EAAER,GAAX,IAAkB,EAAxC,CAAvB;;AACA,QAAI,+BAAe0B,cAAf,KAAkC,kCAAWA,cAAX,CAAtC,EAAkE;AAChE3B,MAAAA,UAAU,CAAC4B,kBAAX,CAA8B,MAAM;AAClC,cAAMC,SAAS,GAAG3B,QAAQ,CAAC4B,OAAT,CAAiBH,cAAc,CAAC1B,GAAhC,CAAlB;AACAD,QAAAA,UAAU,CAACM,OAAX,CAAmBC,sBAASwB,gBAA5B,EAA8CF,SAA9C;AACD,OAHD;AAID;AACF;;AAED,SAAO,+BAAiB7B,UAAjB,CAAP;AACD","sourcesContent":["import { Controller, Commands } from '@ali/4ever-cangjie';\nimport { isColumnsTable } from '../utils/isColumns';\nimport { DeleteColumnsParams } from '../types';\nimport clearAloneTables, { isBadTable } from './clearAloneTables';\n\nexport default function deleteColumn(\n  controller: Controller,\n  { key }: DeleteColumnsParams,\n) {\n  const { document } = controller.value;\n  const targetColumn = document.getNode(key);\n  if (targetColumn) {\n    controller.command(Commands.removeNodeByKey, key);\n\n    const targetRow = document.getParent(key);\n    const targetTable = document.getParent(targetRow?.key || '');\n\n    // 删除栏后修正 colsWidth\n    if (targetRow && targetTable) {\n      const removedIndex = targetRow.nodes.findIndex((node) => node.key === key);\n      const colsWidth = [...targetTable?.data.colsWidth];\n      const willBeAssignedWidth = colsWidth.splice(removedIndex, 1)[0];\n      const deltaWidth = willBeAssignedWidth / colsWidth.length;\n      const newColsWidth = colsWidth.map((width) => width + deltaWidth);\n\n      controller.command(Commands.setNodeByKey, targetTable?.key, {\n        data: {\n          ...targetTable?.data,\n          colsWidth: newColsWidth,\n        },\n      });\n    }\n\n    // 当不存在栏时，删除整个分栏\n    const { document: newDocument } = controller.value;\n    const newTargetTable = newDocument.getParent(targetRow?.key || '');\n    if (isColumnsTable(newTargetTable) && isBadTable(newTargetTable)) {\n      controller.withoutNormalizing(() => {\n        const tablePath = document.getPath(newTargetTable.key)!;\n        controller.command(Commands.removeNodeByPath, tablePath);\n      });\n    }\n  }\n\n  return clearAloneTables(controller);\n}\n"],"file":"deleteColumn.js"}