"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = clearAloneTables;
exports.isBadTable = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginTable = require("@ali/4ever-plugin-table");

// 在拖拽、normalize 等一些极限场景，table 结构被破坏
// 这里会进行二次校验，如果 table 下的数据不合法，就拉出来删除掉
const safeFindFirstCell = table => {
  if (!table.nodes) {
    return undefined;
  }

  const row = table.nodes[0];

  if (!_everPluginTable.TableRow.isTableRow(row) || !row.nodes) {
    return undefined;
  }

  const cell = row.nodes[0];

  if (!_everPluginTable.TableCell.isTableCell(cell) || !cell.nodes) {
    return undefined;
  }

  return cell;
};

const safeFindFirstRow = table => {
  if (!table.nodes) {
    return undefined;
  }

  const row = table.nodes[0];

  if (!_everPluginTable.TableRow.isTableRow(row) || !row.nodes) {
    return undefined;
  }

  return row;
};

const isBadTable = table => {
  const firstRow = safeFindFirstRow(table);
  const firstCell = safeFindFirstCell(table);

  if (!firstRow || !firstCell) {
    return true;
  } // badCellNodesUndefined


  if (!firstCell.nodes) {
    return true;
  } // badCellNodesEmpty


  if (firstCell.nodes.length === 0) {
    return true;
  }

  return false;
};

exports.isBadTable = isBadTable;

function clearAloneTables(controller) {
  const {
    document
  } = controller.value;
  const aloneTableIndex = document.nodes.findIndex(n => _everPluginTable.Table.isTable(n) && n.data.sr && isBadTable(n));

  if (aloneTableIndex < 0) {
    return controller;
  }

  const table = document.nodes[aloneTableIndex];
  controller.withoutNormalizing(() => {
    const tablePath = document.getPath(table.key); // delete the table

    controller.command(_everCangjie.Commands.removeNodeByPath, tablePath);
  });
  return clearAloneTables(controller);
}
//# sourceMappingURL=clearAloneTables.js.map