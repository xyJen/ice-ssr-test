{"version":3,"sources":["../../../../src/utils/commands/mergeColumns.ts"],"names":["Selector","constants","isColumnsTable","n","Table","isTable","Boolean","data","sr","afterMerge","node","controller","anchor","query","Queries","pointAtStartOfNode","selection","Selection","create","focus","command","Commands","select","flattenNodes","nodes","newNodes","reduce","arr","TableCell","isTableCell","concat","mergeColumns","params","document","value","keys","targetKey","rowOffset","isCopy","isInline","targetNode","getNode","docDomNode","domUtils","findDOMNodeSafely","key","map","k","length","newParagraph","Paragraph","Text","focusKey","path","getPath","push","withoutNormalizing","insertNodeByKey","some","width","parentWidth","getBoundingClientRect","parentTable","getClosest","firstNodeParentCell","getParent","srcColor","fill","defaultCellData","vAlign","DEAFULT_VALIGN","targetCell","firstNode","Inline","fromJSON","toJSON","newData","newCell","newCells","unshift","tableRow","TableRow","colsWidth","table","targetParent","nodeIndex","indexOf","srcNodes","firstSrcNode","moveNodeByKey","newCellPath","reverse","forEach","moveNodeByPath","insertNodeByPath","removeNodeByKey","parentRow","parentCell","index","Math","max","min","cellCount","widths","slice","Array","totalWidth","a","c","splice","fromIndex","old","colors","undefined","parentTablePath","setNodeByPath"],"mappings":"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","sourcesContent":["import {\n  Controller,\n  Commands,\n  Text,\n  Selection,\n  Queries,\n  Node,\n  Block,\n  Inline,\n  domUtils,\n  constants,\n} from '@ali/4ever-cangjie';\nimport { Table, TableRow, TableCell } from '@ali/4ever-plugin-table';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport { DEAFULT_VALIGN, SIMPLE_HIGHLIGHTS } from '../constants';\nimport { MergeColumnsParams } from '../types';\nimport clearAloneTables from './clearAloneTables';\n\nconst { Selector } = constants;\n\nconst isColumnsTable = (n) => {\n  return Table.isTable(n) && Boolean(n.data.sr);\n};\n\nfunction afterMerge(node: Node, controller: Controller) {\n  const anchor = controller.query(Queries.pointAtStartOfNode, node);\n  const selection = Selection.create({ anchor, focus: anchor });\n  controller.command(Commands.select, selection).command(Commands.focus);\n  return clearAloneTables(controller);\n}\n\n/**\n * 处理每一个 node，如果某一个 node 是 TableCell，就换成它的 children\n */\nfunction flattenNodes(nodes: Node[]) {\n  const newNodes = nodes.reduce<Node[]>((arr, node) => {\n    if (TableCell.isTableCell(node)) {\n      return arr.concat(...node.nodes);\n    }\n    return arr.concat(node);\n  }, []);\n  return newNodes as Block[];\n}\n\nexport default function mergeColumns(\n  controller: Controller,\n  params: MergeColumnsParams,\n): Controller {\n  let { document } = controller.value;\n  const { keys, targetKey, rowOffset, isCopy, isInline } = params;\n  // 目标 Node\n  const targetNode = document.getNode(targetKey);\n  const docDomNode = domUtils.findDOMNodeSafely(document.key);\n  const nodes = keys.map((k) => document.getNode(k)) as Node[];\n  if (!nodes.length) {\n    const newParagraph = Paragraph.create({ nodes: [Text.create()] });\n    const { key: focusKey } = controller.value.selection.focus;\n    const path = document.getPath(focusKey);\n    if (!path || !path.length) {\n      return controller;\n    }\n    nodes.push(newParagraph);\n    controller.withoutNormalizing(() => {\n      controller.command(\n        Commands.insertNodeByKey,\n        document.key,\n        path[0],\n        newParagraph,\n      );\n    });\n    ({ document } = controller.value);\n  }\n  if (!docDomNode || !targetNode || nodes.some((n) => !n)) {\n    return controller;\n  }\n\n  // 文档的宽度\n  const { width: parentWidth } = docDomNode.getBoundingClientRect();\n\n  let parentTable: Table | null = null;\n  if (isColumnsTable(targetNode)) {\n    parentTable = targetNode as Table;\n  } else {\n    parentTable = document.getClosest(\n      targetKey,\n      isColumnsTable,\n    ) as Table | null;\n  }\n\n  // 体验优化：如果拖动某个单元格（分栏）里面的元素，添加新的分栏，就优先把背景色也带着\n  const firstNodeParentCell = nodes[0] && document.getParent(nodes[0].key);\n  const srcColor = TableCell.isTableCell(firstNodeParentCell) && firstNodeParentCell.data.fill;\n\n  // case 1，没有 parentTable。需要创建一个新的 table\n  if (!parentTable) {\n    let defaultCellData: TableCell['data'] = { vAlign: DEAFULT_VALIGN };\n    if (srcColor) {\n      defaultCellData = { ...defaultCellData, fill: srcColor };\n    }\n    const targetCell = TableCell.create({\n      nodes: [],\n      data: { ...defaultCellData },\n    }) as TableCell;\n    const firstNode = !isInline ? nodes[0] : Paragraph.create({\n      nodes: [Inline.fromJSON(nodes[0].toJSON()) as Inline],\n    });\n    const newData = TableCell.isTableCell(firstNode)\n      ? { ...firstNode.data }\n      : { ...defaultCellData };\n    const newCell = TableCell.create({\n      nodes: [],\n      data: newData,\n    });\n    const newCells = [targetCell];\n    if (rowOffset === 0) {\n      newCells.unshift(newCell);\n    } else {\n      newCells.push(newCell);\n    }\n    const tableRow = TableRow.create({ nodes: newCells });\n    const colsWidth = [parentWidth / 2, parentWidth / 2];\n    const table = Table.create({\n      nodes: [tableRow],\n      data: { sr: true, colsWidth },\n    });\n    const targetParent = document.getParent(targetKey)!;\n    const nodeIndex = targetParent.nodes.indexOf(targetNode);\n    const srcNodes = flattenNodes(nodes);\n    const firstSrcNode = !isInline ? srcNodes[0] : firstNode as Block;\n    controller.withoutNormalizing(() => {\n      // 1. insert the table\n      controller\n        .command(Commands.insertNodeByKey, targetParent.key, nodeIndex, table)\n        // 2. wrap node into the target cell\n        .command(Commands.moveNodeByKey, targetNode.key, targetCell.key, 0);\n      const newCellPath = controller.value.document.getPath(newCell.key)!;\n      // 3. insert nodes info the new cell\n      if (!isInline) {\n        srcNodes.reverse().forEach(({ key }) => {\n          const path = controller.value.document.getPath(key)!;\n          controller.command(Commands.moveNodeByPath, path, newCellPath, 0);\n        });\n      } else {\n        controller.command(Commands.insertNodeByPath, newCellPath, 0, firstSrcNode);\n      }\n\n      // 4. clean up table cells\n      nodes.forEach((n) => {\n        if (TableCell.isTableCell(n) || isInline) {\n          const node = controller.value.document.getNode(n.key);\n          if (node) {\n            controller.command(Commands.removeNodeByKey, node.key);\n          }\n        }\n      });\n    });\n    return afterMerge(firstSrcNode, controller);\n  }\n\n  // case 2，已经有 parentTable 了。需要增加一个 Cell\n  const parentRow = parentTable.nodes[0];\n  const parentCell = TableCell.isTableCell(targetNode) ? targetNode : document.getClosest(targetKey, (n) =>\n    TableCell.isTableCell(n),\n  );\n  let index = 0;\n  if (parentCell) {\n    // @ts-ignore\n    index = parentRow.nodes.indexOf(parentCell);\n  }\n  if (parentTable === targetNode && rowOffset) {\n    index = parentRow.nodes.length - 1;\n  }\n  index += rowOffset;\n  index = Math.max(0, Math.min(index, parentRow.nodes.length));\n\n  const cellCount = parentRow.nodes.length;\n  const widths: number[] =\n    parentTable.data.colsWidth?.slice(0, cellCount) ||\n    new Array(cellCount).fill(parentWidth / cellCount);\n  let colsWidth = [...widths];\n  const totalWidth = colsWidth.reduce((a, c) => a + c, 0);\n  colsWidth.splice(index, 0, totalWidth / cellCount);\n\n  // 当前的列调整。这里需要移除之前的 colWidth\n  if (\n    !isCopy &&\n    TableCell.isTableCell(nodes[0]) &&\n    // @ts-ignore\n    parentRow.nodes.indexOf(nodes[0]) >= 0\n  ) {\n    // @ts-ignore\n    const fromIndex = parentRow.nodes.indexOf(nodes[0]);\n    colsWidth = [...widths];\n\n    // TO-DO： 1 -> 2.3 时候，有问题\n    const old = colsWidth.splice(fromIndex, 1)[0];\n    colsWidth.splice(index - rowOffset, 0, old);\n  }\n\n  const colors = [\n    srcColor,\n    parentRow.nodes[index - 1]?.data?.fill,\n    parentRow.nodes[index]?.data?.fill,\n  ].map(c => (c === 'transparent' ? undefined : c));\n  const fill = colors[0] || colors[1] || colors[2];\n\n  const firstNode = !isInline ? nodes[0] : Paragraph.create({\n    nodes: [Inline.fromJSON(nodes[0].toJSON()) as Inline],\n  });\n  const newData = TableCell.isTableCell(firstNode)\n    ? { ...firstNode.data }\n    : { vAlign: DEAFULT_VALIGN, fill };\n  const newCell = TableCell.create({\n    nodes: [],\n    data: newData,\n  });\n  const srcNodes = flattenNodes(nodes);\n  const parentTablePath = document.getPath(parentTable.key)!;\n  const firstSrcNode = !isInline ? srcNodes[0] : firstNode as Block;\n  controller.withoutNormalizing(() => {\n    // 1. insert the new cell\n    controller.command(Commands.insertNodeByKey, parentRow.key, index, newCell);\n\n    // 2. set the table data colswith\n    controller.command(Commands.setNodeByPath, parentTablePath, {\n      data: { ...parentTable!.data, colsWidth: [...colsWidth] },\n    });\n\n    // 3. insert nodes into the new cell\n    const newCellPath = controller.value.document.getPath(newCell.key)!;\n    if (!isInline) {\n      srcNodes.reverse().forEach(({ key }) => {\n        const path = controller.value.document.getPath(key)!;\n        controller.command(Commands.moveNodeByPath, path, newCellPath, 0);\n      });\n    } else {\n      controller.command(Commands.insertNodeByPath, newCellPath, 0, firstSrcNode);\n    }\n\n    // 4. clean up table cells\n    nodes.forEach((n) => {\n      if (TableCell.isTableCell(n) || isInline) {\n        const node = controller.value.document.getNode(n.key);\n        if (node) {\n          controller.command(Commands.removeNodeByKey, node.key);\n        }\n      }\n    });\n  });\n  return afterMerge(firstSrcNode, controller);\n}\n"],"file":"mergeColumns.js"}