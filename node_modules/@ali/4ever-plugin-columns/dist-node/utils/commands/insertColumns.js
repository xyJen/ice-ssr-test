"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = insertColumns;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginTable = require("@ali/4ever-plugin-table");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _everUtils = require("@ali/4ever-utils");

var _constants = require("../constants");

const DEFAULT_WIDTH = 650;

const canNodeHasColumnsSibling = node => {
  if (!_everCangjie.Block.isBlock(node)) {
    return false;
  }

  if (_everPluginTable.TableRow.isTableRow(node) || _everPluginTable.TableCell.isTableCell(node)) {
    return false;
  }

  return true;
};

function insertColumns(controller, params) {
  const {
    document,
    selection
  } = controller.value;
  const {
    key: focusKey
  } = selection.focus;
  const targetBlock = document.getClosest(focusKey, canNodeHasColumnsSibling);
  const targetPath = targetBlock && document.getPath(targetBlock.key);

  if (!targetPath || !targetPath.length) {
    return controller;
  }

  const {
    size,
    text
  } = params;
  const blocks = new Array(size).fill(null).map((_, index) => {
    return _everPluginParagraph.Paragraph.create({
      nodes: [_everCangjie.Text.create(text.replace('%', ` ${index + 1} `).trim())]
    });
  });
  const cells = blocks.map((block, index) => {
    return _everPluginTable.TableCell.create({
      nodes: [block],
      data: {
        fill: _constants.SIMPLE_HIGHLIGHTS[index % _constants.SIMPLE_HIGHLIGHTS.length],
        vAlign: _constants.DEAFULT_VALIGN
      }
    });
  });

  const tableRow = _everPluginTable.TableRow.create({
    nodes: cells
  });

  const colsWidth = new Array(size).fill(Math.round(DEFAULT_WIDTH / size));

  const table = _everPluginTable.Table.create({
    nodes: [tableRow],
    data: {
      sr: true,
      colsWidth
    }
  });

  const targetIndex = targetPath.pop();
  controller.command(_everCangjie.Commands.insertNodeByPath, targetPath, targetIndex + 1, table);
  const anchor = controller.query(_everCangjie.Queries.pointAtStartOfNode, cells[0].nodes[0]);

  const newSelection = _everCangjie.Selection.create({
    anchor,
    focus: anchor
  });

  controller.command(_everCangjie.Commands.select, newSelection).command(_everCangjie.Commands.focus);

  if ((0, _everUtils.isEmptyParagraph)(targetBlock)) {
    controller.command(_everCangjie.Commands.removeNodeByKey, targetBlock.key);
  }

  return controller;
}
//# sourceMappingURL=insertColumns.js.map