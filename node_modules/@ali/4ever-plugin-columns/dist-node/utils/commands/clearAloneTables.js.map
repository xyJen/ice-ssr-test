{"version":3,"sources":["../../../../src/utils/commands/clearAloneTables.ts"],"names":["safeFindFirstCell","table","nodes","undefined","row","TableRow","isTableRow","cell","TableCell","isTableCell","safeFindFirstRow","isBadTable","firstRow","firstCell","length","clearAloneTables","controller","document","value","aloneTableIndex","findIndex","n","Table","isTable","data","sr","withoutNormalizing","tablePath","getPath","key","command","Commands","removeNodeByPath"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA;AACA;AACA,MAAMA,iBAAiB,GAAIC,KAAD,IAAkB;AAC1C,MAAI,CAACA,KAAK,CAACC,KAAX,EAAkB;AAChB,WAAOC,SAAP;AACD;;AACD,QAAMC,GAAG,GAAGH,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAZ;;AACA,MAAI,CAACG,0BAASC,UAAT,CAAoBF,GAApB,CAAD,IAA6B,CAACA,GAAG,CAACF,KAAtC,EAA6C;AAC3C,WAAOC,SAAP;AACD;;AACD,QAAMI,IAAI,GAAGH,GAAG,CAACF,KAAJ,CAAU,CAAV,CAAb;;AACA,MAAI,CAACM,2BAAUC,WAAV,CAAsBF,IAAtB,CAAD,IAAgC,CAACA,IAAI,CAACL,KAA1C,EAAiD;AAC/C,WAAOC,SAAP;AACD;;AACD,SAAOI,IAAP;AACD,CAbD;;AAeA,MAAMG,gBAAgB,GAAIT,KAAD,IAAkB;AACzC,MAAI,CAACA,KAAK,CAACC,KAAX,EAAkB;AAChB,WAAOC,SAAP;AACD;;AACD,QAAMC,GAAG,GAAGH,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAZ;;AACA,MAAI,CAACG,0BAASC,UAAT,CAAoBF,GAApB,CAAD,IAA6B,CAACA,GAAG,CAACF,KAAtC,EAA6C;AAC3C,WAAOC,SAAP;AACD;;AACD,SAAOC,GAAP;AACD,CATD;;AAWO,MAAMO,UAAU,GAAIV,KAAD,IAAkB;AAC1C,QAAMW,QAAQ,GAAGF,gBAAgB,CAACT,KAAD,CAAjC;AACA,QAAMY,SAAS,GAAGb,iBAAiB,CAACC,KAAD,CAAnC;;AAEA,MAAI,CAACW,QAAD,IAAa,CAACC,SAAlB,EAA6B;AAC3B,WAAO,IAAP;AACD,GANyC,CAQ1C;;;AACA,MAAI,CAACA,SAAS,CAACX,KAAf,EAAsB;AACpB,WAAO,IAAP;AACD,GAXyC,CAa1C;;;AACA,MAAIW,SAAS,CAACX,KAAV,CAAgBY,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CAnBM;;;;AAqBQ,SAASC,gBAAT,CAA0BC,UAA1B,EAA8D;AAC3E,QAAM;AAAEC,IAAAA;AAAF,MAAeD,UAAU,CAACE,KAAhC;AACA,QAAMC,eAAe,GAAGF,QAAQ,CAACf,KAAT,CAAekB,SAAf,CACrBC,CAAD,IACEC,uBAAMC,OAAN,CAAcF,CAAd,KACAA,CAAC,CAACG,IAAF,CAAOC,EADP,IAEAd,UAAU,CAACU,CAAD,CAJU,CAAxB;;AAMA,MAAIF,eAAe,GAAG,CAAtB,EAAyB;AACvB,WAAOH,UAAP;AACD;;AACD,QAAMf,KAAK,GAAGgB,QAAQ,CAACf,KAAT,CAAeiB,eAAf,CAAd;AACAH,EAAAA,UAAU,CAACU,kBAAX,CAA8B,MAAM;AAClC,UAAMC,SAAS,GAAGV,QAAQ,CAACW,OAAT,CAAiB3B,KAAK,CAAC4B,GAAvB,CAAlB,CADkC,CAGlC;;AACAb,IAAAA,UAAU,CAACc,OAAX,CAAmBC,sBAASC,gBAA5B,EAA8CL,SAA9C;AACD,GALD;AAOA,SAAOZ,gBAAgB,CAACC,UAAD,CAAvB;AACD","sourcesContent":["import { Commands, Controller } from '@ali/4ever-cangjie';\nimport { Table, TableRow, TableCell } from '@ali/4ever-plugin-table';\n\n// 在拖拽、normalize 等一些极限场景，table 结构被破坏\n// 这里会进行二次校验，如果 table 下的数据不合法，就拉出来删除掉\nconst safeFindFirstCell = (table: Table) => {\n  if (!table.nodes) {\n    return undefined;\n  }\n  const row = table.nodes[0];\n  if (!TableRow.isTableRow(row) || !row.nodes) {\n    return undefined;\n  }\n  const cell = row.nodes[0];\n  if (!TableCell.isTableCell(cell) || !cell.nodes) {\n    return undefined;\n  }\n  return cell;\n};\n\nconst safeFindFirstRow = (table: Table) => {\n  if (!table.nodes) {\n    return undefined;\n  }\n  const row = table.nodes[0];\n  if (!TableRow.isTableRow(row) || !row.nodes) {\n    return undefined;\n  }\n  return row;\n};\n\nexport const isBadTable = (table: Table) => {\n  const firstRow = safeFindFirstRow(table);\n  const firstCell = safeFindFirstCell(table);\n\n  if (!firstRow || !firstCell) {\n    return true;\n  }\n\n  // badCellNodesUndefined\n  if (!firstCell.nodes) {\n    return true;\n  }\n\n  // badCellNodesEmpty\n  if (firstCell.nodes.length === 0) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default function clearAloneTables(controller: Controller): Controller {\n  const { document } = controller.value;\n  const aloneTableIndex = document.nodes.findIndex(\n    (n) =>\n      Table.isTable(n) &&\n      n.data.sr &&\n      isBadTable(n),\n  );\n  if (aloneTableIndex < 0) {\n    return controller;\n  }\n  const table = document.nodes[aloneTableIndex] as Table;\n  controller.withoutNormalizing(() => {\n    const tablePath = document.getPath(table.key)!;\n\n    // delete the table\n    controller.command(Commands.removeNodeByPath, tablePath);\n  });\n\n  return clearAloneTables(controller);\n}\n"],"file":"clearAloneTables.js"}