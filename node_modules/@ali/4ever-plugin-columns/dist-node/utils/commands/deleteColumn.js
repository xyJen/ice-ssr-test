"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deleteColumn;

var _everCangjie = require("@ali/4ever-cangjie");

var _isColumns = require("../utils/isColumns");

var _clearAloneTables = _interopRequireWildcard(require("./clearAloneTables"));

function deleteColumn(controller, {
  key
}) {
  const {
    document
  } = controller.value;
  const targetColumn = document.getNode(key);

  if (targetColumn) {
    controller.command(_everCangjie.Commands.removeNodeByKey, key);
    const targetRow = document.getParent(key);
    const targetTable = document.getParent(targetRow?.key || ''); // 删除栏后修正 colsWidth

    if (targetRow && targetTable) {
      const removedIndex = targetRow.nodes.findIndex(node => node.key === key);
      const colsWidth = [...targetTable?.data.colsWidth];
      const willBeAssignedWidth = colsWidth.splice(removedIndex, 1)[0];
      const deltaWidth = willBeAssignedWidth / colsWidth.length;
      const newColsWidth = colsWidth.map(width => width + deltaWidth);
      controller.command(_everCangjie.Commands.setNodeByKey, targetTable?.key, {
        data: { ...targetTable?.data,
          colsWidth: newColsWidth
        }
      });
    } // 当不存在栏时，删除整个分栏


    const {
      document: newDocument
    } = controller.value;
    const newTargetTable = newDocument.getParent(targetRow?.key || '');

    if ((0, _isColumns.isColumnsTable)(newTargetTable) && (0, _clearAloneTables.isBadTable)(newTargetTable)) {
      controller.withoutNormalizing(() => {
        const tablePath = document.getPath(newTargetTable.key);
        controller.command(_everCangjie.Commands.removeNodeByPath, tablePath);
      });
    }
  }

  return (0, _clearAloneTables.default)(controller);
}
//# sourceMappingURL=deleteColumn.js.map