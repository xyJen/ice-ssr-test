"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnAction;

var _everUtils = require("@ali/4ever-utils");

var _clearAloneTables = _interopRequireDefault(require("../commands/clearAloneTables"));

var _mergeColumns = _interopRequireDefault(require("../commands/mergeColumns"));

var _insertColumns = _interopRequireDefault(require("../commands/insertColumns"));

var _deleteColumn = _interopRequireDefault(require("../commands/deleteColumn"));

var _removeInvalidCells = _interopRequireDefault(require("../commands/removeInvalidCells"));

var _index = require("../actions/index");

var _isColumns = require("../utils/isColumns");

function createOnAction(configs) {
  return function onAction(action, controller, next) {
    if (configs?.isDisabled && configs.isDisabled()) {
      return next();
    }

    const {
      type,
      payload
    } = action;

    if (type === _index.ACTION_INERT_COLUMNS) {
      return (0, _insertColumns.default)(controller, payload);
    }

    if (type === _index.ACTION_INERT_COL) {
      const {
        targetKey,
        offset
      } = payload;
      return (0, _mergeColumns.default)(controller, {
        targetKey,
        rowOffset: offset,
        keys: [],
        isCopy: false
      });
    }

    if (type === _index.ACTION_DELETE_COLUMN) {
      return (0, _deleteColumn.default)(controller, payload);
    }

    if (type === _index.ACTION_CLEANUP_COLUMN) {
      return (0, _clearAloneTables.default)(controller);
    }

    if (type === _index.ACTION_REMOVE_INVALID_CELLS) {
      return (0, _removeInvalidCells.default)(controller);
    }

    if (type === _index.ACTION_SET_CELL_DATA) {
      const {
        node,
        data
      } = payload;
      return controller.command('setColumnsItemData', node.key, data);
    }

    if (type === 'DROP_FRAGMENT' && payload?.dragFragment && payload?.dropHolder) {
      const {
        dragFragment,
        dropHolder
      } = payload;
      const {
        type
      } = dragFragment;
      const {
        key: targetKey,
        dropPosition,
        isCopy
      } = dropHolder;
      const keys = type === 0 ? dragFragment.fragment.map(b => b.key) : [dragFragment.fragment.key];

      if (dropPosition === 0 || dropPosition === 1) {
        const result = next(); // 若分栏的某个栏有且仅有一个段落，当这个段落被拖拽走后删除这个栏

        const {
          document
        } = controller.value;
        const parentKey = dragFragment.fragment[0]?.parentKey;

        if ((0, _isColumns.isColumnsCell)(document, parentKey)) {
          const parentNode = document.getNode(parentKey);

          if (parentNode.nodes.length === 1 && (0, _everUtils.isEmptyParagraph)(parentNode.nodes[0])) {
            (0, _deleteColumn.default)(controller, {
              key: parentNode.key
            });
          }
        }

        (0, _clearAloneTables.default)(controller);
        return result;
      }

      const isLeft = dropPosition === 2;
      (0, _mergeColumns.default)(controller, {
        keys,
        targetKey,
        rowOffset: isLeft ? 0 : 1,
        isCopy,
        isInline: type === 1
      });
      return controller;
    }

    return next();
  };
}
//# sourceMappingURL=onAction.js.map