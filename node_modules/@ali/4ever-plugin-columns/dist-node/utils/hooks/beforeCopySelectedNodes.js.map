{"version":3,"sources":["../../../../src/utils/hooks/beforeCopySelectedNodes.ts"],"names":["DEFAULT_WIDTH","createColumns","cells","tableRow","TableRow","create","nodes","length","size","colsWidth","Array","fill","Math","round","table","Table","data","sr","beforeCopySelectedNodes","selectedNodes","controller","next","newNodes","document","value","prevColumnsRow","columnsRowNodes","i","query","getParent","key","curColumnsRow","push","columns"],"mappings":"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","sourcesContent":["import { Plugin, Node } from '@ali/4ever-cangjie';\nimport { Table, TableCell, TableRow } from '@ali/4ever-plugin-table';\n\nconst DEFAULT_WIDTH = 650;\n\nfunction createColumns(cells: TableCell[]) {\n  const tableRow = TableRow.create({ nodes: cells });\n  const { length: size } = cells;\n  const colsWidth = new Array(size).fill(Math.round(DEFAULT_WIDTH / size));\n  const table = Table.create({\n    nodes: [tableRow],\n    data: { sr: true, colsWidth },\n  });\n  return table;\n}\n\nconst beforeCopySelectedNodes: Plugin['beforeCopySelectedNodes'] = (selectedNodes, controller, next) => {\n  const newNodes: Node[] = [];\n  const { length } = selectedNodes;\n  const { document } = controller.value;\n  let prevColumnsRow: null | TableRow = null;\n  let columnsRowNodes: TableCell[] | null = null;\n  for (let i = 0; i < length; i++) {\n    if (controller.query('isColumnsChild', selectedNodes[i])) {\n      if (!columnsRowNodes) {\n        prevColumnsRow = (document.getParent(selectedNodes[i].key) as TableRow | null);\n        columnsRowNodes = [(selectedNodes[i] as TableCell)];\n      } else {\n        const curColumnsRow = (document.getParent(selectedNodes[i].key) as TableRow | null);\n        if (curColumnsRow?.key === prevColumnsRow?.key) {\n          columnsRowNodes.push((selectedNodes[i] as TableCell));\n        } else {\n          const columns = createColumns(columnsRowNodes);\n          newNodes.push(columns);\n          prevColumnsRow = (document.getParent(selectedNodes[i].key) as TableRow | null);\n          columnsRowNodes = [(selectedNodes[i] as TableCell)];\n        }\n      }\n    } else {\n      if (columnsRowNodes) {\n        const columns = createColumns(columnsRowNodes);\n        newNodes.push(columns);\n        prevColumnsRow = null;\n        columnsRowNodes = null;\n      }\n      newNodes.push(selectedNodes[i]);\n    }\n  }\n  if (columnsRowNodes) {\n    const columns = createColumns(columnsRowNodes);\n    newNodes.push(columns);\n    prevColumnsRow = null;\n    columnsRowNodes = null;\n  }\n  return newNodes;\n};\n\nexport default beforeCopySelectedNodes;\n\n"],"file":"beforeCopySelectedNodes.js"}