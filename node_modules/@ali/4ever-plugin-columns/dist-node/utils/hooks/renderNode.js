"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderNode;

var React = _interopRequireWildcard(require("react"));

var _everPluginTable = require("@ali/4ever-plugin-table");

var _Table = _interopRequireDefault(require("../components/Table"));

var _Column = _interopRequireDefault(require("../components/Column"));

var _TopBar = _interopRequireDefault(require("../components/TopBar"));

const _createElement = /*#__PURE__*/React.createElement;

function isColumnsTable(node) {
  return _everPluginTable.Table.isTable(node) && node.data.sr;
}

function isColumnsRow(document, key = '') {
  const parent = document.getParent(key);
  return _everPluginTable.Table.isTable(parent) && parent.data.sr;
}

function isColumnsCell(document, key) {
  const parent = document.getParent(key);
  return isColumnsRow(document, parent?.key);
}

function createRenderNode(configs) {
  return {
    [_everPluginTable.Table.TYPE]: ({
      node,
      children,
      attributes
    }, controller, next) => {
      if (configs?.isDisabled && configs.isDisabled()) {
        return next();
      }

      if (isColumnsTable(node)) {
        return /*#__PURE__*/_createElement(_Table.default, {
          controller: controller,
          configs: configs,
          table: node,
          attributes: attributes,
          TopBar: _TopBar.default
        }, children());
      }

      return next();
    },
    [_everPluginTable.TableRow.TYPE]: ({
      node,
      children
    }, controller, next) => {
      if (configs?.isDisabled && configs.isDisabled()) {
        return next();
      }

      const {
        document
      } = controller.value;
      const {
        key
      } = node;

      if (isColumnsRow(document, key)) {
        return children();
      }

      return next();
    },
    [_everPluginTable.TableCell.TYPE]: ({
      node,
      children
    }, controller, next) => {
      if (configs?.isDisabled && configs.isDisabled()) {
        return next();
      }

      const {
        document
      } = controller.value;
      const {
        key
      } = node;

      if (isColumnsCell(document, key)) {
        return /*#__PURE__*/_createElement(_Column.default, {
          controller: controller,
          cell: node,
          configs: configs
        }, children());
      }

      return next();
    }
  };
}
//# sourceMappingURL=renderNode.js.map