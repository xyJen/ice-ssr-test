{"version":3,"sources":["../../../../src/utils/hooks/renderNodeEdit.tsx"],"names":["createRenderNode","configs","onDragChange","Table","TYPE","node","children","attributes","controller","next","isDisabled","TopBar","TableRow","document","value","key","TableCell","ColorButton"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AAEA;;uBAR4B,a;;AAUb,SAASA,gBAAT,CACbC,OADa,EAEbC,YAFa,EAGb;AACA,SAAO;AACL,KAACC,uBAAMC,IAAP,GAAc,CACZ;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,KADY,EAEZC,UAFY,EAGZC,IAHY,KAIT;AACH,UAAIR,OAAO,EAAES,UAAT,IAAuBT,OAAO,CAACS,UAAR,EAA3B,EAAiD;AAC/C,eAAOD,IAAI,EAAX;AACD;;AACD,UAAI,+BAAeJ,IAAf,CAAJ,EAA0B;AACxB,4BACE,eAAC,cAAD;AACE,UAAA,UAAU,EAAEG,UADd;AAEE,UAAA,OAAO,EAAEP,OAFX;AAGE,UAAA,KAAK,EAAEI,IAHT;AAIE,UAAA,YAAY,EAAEH,YAJhB;AAKE,UAAA,UAAU,EAAEK,UALd;AAME,UAAA,MAAM,EAAEI;AANV,WAQGL,QAAQ,EARX,CADF;AAYD;;AACD,aAAOG,IAAI,EAAX;AACD,KAxBI;AAyBL,KAACG,0BAASR,IAAV,GAAiB,CACf;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KADe,EAEfE,UAFe,EAGfC,IAHe,KAIZ;AACH,UAAIR,OAAO,EAAES,UAAT,IAAuBT,OAAO,CAACS,UAAR,EAA3B,EAAiD;AAC/C,eAAOD,IAAI,EAAX;AACD;;AACD,YAAM;AAAEI,QAAAA;AAAF,UAAeL,UAAU,CAACM,KAAhC;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAUV,IAAhB;;AACA,UAAI,6BAAaQ,QAAb,EAAuBE,GAAvB,CAAJ,EAAiC;AAC/B,eAAOT,QAAQ,EAAf;AACD;;AACD,aAAOG,IAAI,EAAX;AACD,KAvCI;AAwCL,KAACO,2BAAUZ,IAAX,GAAkB,CAChB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KADgB,EAEhBE,UAFgB,EAGhBC,IAHgB,KAIb;AACH,UAAIR,OAAO,EAAES,UAAT,IAAuBT,OAAO,CAACS,UAAR,EAA3B,EAAiD;AAC/C,eAAOD,IAAI,EAAX;AACD;;AACD,YAAM;AAAEI,QAAAA;AAAF,UAAeL,UAAU,CAACM,KAAhC;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAUV,IAAhB;;AACA,UAAI,8BAAcQ,QAAd,EAAwBE,GAAxB,CAAJ,EAAkC;AAChC,4BACE,eAAC,eAAD;AAAQ,UAAA,UAAU,EAAEP,UAApB;AAAgC,UAAA,IAAI,EAAEH,IAAtC;AAAyD,UAAA,OAAO,EAAEJ,OAAlE;AAA2E,UAAA,WAAW,EAAEgB;AAAxF,WACGX,QAAQ,EADX,CADF;AAKD;;AACD,aAAOG,IAAI,EAAX;AACD;AA1DI,GAAP;AA4DD","sourcesContent":["import * as React from 'react';\nimport { Controller, RenderNodeProps } from '@ali/4ever-cangjie';\nimport { Table, TableRow, TableCell } from '@ali/4ever-plugin-table';\n\nimport TableView from '../components/Table';\nimport TopBar from '../components/TopBar';\nimport Column from '../components/Column';\nimport ColorButton from '../components/ColorButton';\nimport { ColumnsConfigs, OnDragChange } from '../types';\nimport { isColumnsTable, isColumnsCell, isColumnsRow } from '../utils/isColumns';\n\nexport default function createRenderNode(\n  configs?: ColumnsConfigs,\n  onDragChange?: OnDragChange,\n) {\n  return {\n    [Table.TYPE]: (\n      { node, children, attributes }: RenderNodeProps,\n      controller: Controller,\n      next: any,\n    ) => {\n      if (configs?.isDisabled && configs.isDisabled()) {\n        return next();\n      }\n      if (isColumnsTable(node)) {\n        return (\n          <TableView\n            controller={controller}\n            configs={configs}\n            table={node as Table}\n            onDragChange={onDragChange}\n            attributes={attributes}\n            TopBar={TopBar}\n          >\n            {children()}\n          </TableView>\n        );\n      }\n      return next();\n    },\n    [TableRow.TYPE]: (\n      { node, children }: RenderNodeProps,\n      controller: Controller,\n      next: any,\n    ) => {\n      if (configs?.isDisabled && configs.isDisabled()) {\n        return next();\n      }\n      const { document } = controller.value;\n      const { key } = node;\n      if (isColumnsRow(document, key)) {\n        return children();\n      }\n      return next();\n    },\n    [TableCell.TYPE]: (\n      { node, children }: RenderNodeProps,\n      controller: Controller,\n      next: any,\n    ) => {\n      if (configs?.isDisabled && configs.isDisabled()) {\n        return next();\n      }\n      const { document } = controller.value;\n      const { key } = node;\n      if (isColumnsCell(document, key)) {\n        return (\n          <Column controller={controller} cell={node as TableCell} configs={configs} ColorButton={ColorButton}>\n            {children()}\n          </Column>\n        );\n      }\n      return next();\n    },\n  };\n}\n"],"file":"renderNodeEdit.js"}