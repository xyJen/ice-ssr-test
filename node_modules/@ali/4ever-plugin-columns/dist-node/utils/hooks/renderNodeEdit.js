"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderNode;

var React = _interopRequireWildcard(require("react"));

var _everPluginTable = require("@ali/4ever-plugin-table");

var _Table = _interopRequireDefault(require("../components/Table"));

var _TopBar = _interopRequireDefault(require("../components/TopBar"));

var _Column = _interopRequireDefault(require("../components/Column"));

var _ColorButton = _interopRequireDefault(require("../components/ColorButton"));

var _isColumns = require("../utils/isColumns");

const _createElement = /*#__PURE__*/React.createElement;

function createRenderNode(configs, onDragChange) {
  return {
    [_everPluginTable.Table.TYPE]: ({
      node,
      children,
      attributes
    }, controller, next) => {
      if (configs?.isDisabled && configs.isDisabled()) {
        return next();
      }

      if ((0, _isColumns.isColumnsTable)(node)) {
        return /*#__PURE__*/_createElement(_Table.default, {
          controller: controller,
          configs: configs,
          table: node,
          onDragChange: onDragChange,
          attributes: attributes,
          TopBar: _TopBar.default
        }, children());
      }

      return next();
    },
    [_everPluginTable.TableRow.TYPE]: ({
      node,
      children
    }, controller, next) => {
      if (configs?.isDisabled && configs.isDisabled()) {
        return next();
      }

      const {
        document
      } = controller.value;
      const {
        key
      } = node;

      if ((0, _isColumns.isColumnsRow)(document, key)) {
        return children();
      }

      return next();
    },
    [_everPluginTable.TableCell.TYPE]: ({
      node,
      children
    }, controller, next) => {
      if (configs?.isDisabled && configs.isDisabled()) {
        return next();
      }

      const {
        document
      } = controller.value;
      const {
        key
      } = node;

      if ((0, _isColumns.isColumnsCell)(document, key)) {
        return /*#__PURE__*/_createElement(_Column.default, {
          controller: controller,
          cell: node,
          configs: configs,
          ColorButton: _ColorButton.default
        }, children());
      }

      return next();
    }
  };
}
//# sourceMappingURL=renderNodeEdit.js.map