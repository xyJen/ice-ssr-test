"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnKeyDown;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginTable = require("@ali/4ever-plugin-table");

var _everPluginHeading = require("@ali/4ever-plugin-heading");

var _actions = require("../actions");

var _everUtils = require("@ali/4ever-utils");

function tryRemoveColumn(controller, closestBlock) {
  const {
    selection,
    document
  } = controller.value;
  const {
    key
  } = selection.focus;
  const maybeTableCell = document.getParent(closestBlock.key);
  const table = document.getClosest(key, _everPluginTable.Table.isTable);

  if ( // inside a column
  table && table.data.sr && // only block
  _everPluginTable.TableCell.isTableCell(maybeTableCell) && maybeTableCell.nodes.length === 1) {
    controller.run('onAction', (0, _actions.deleteColumn)({
      key: maybeTableCell.key
    }));
    return true;
  }

  return false;
}

function createOnKeyDown() {
  return function onKeyDown(event, controller, next) {
    const {
      selection,
      document
    } = controller.value;

    if (selection.isExpanded || !_everCangjie.hotkeys.isDeleteBackward(event)) {
      return next();
    }

    const {
      key: focusKey
    } = selection.focus;
    const closestBlock = document.getClosestBlock(focusKey);

    if (!closestBlock) {
      return next();
    }

    let procceed = false; // 如果在分栏里没有内容，再按下了删除：就删除掉整个分栏

    if ((0, _everUtils.isEmptyParagraph)(closestBlock)) {
      procceed = tryRemoveColumn(controller, closestBlock);
    } else if (_everPluginHeading.Heading.isHeading(closestBlock) && !closestBlock.text) {
      procceed = tryRemoveColumn(controller, closestBlock);
    }

    if (procceed) {
      return controller;
    }

    return next();
  };
}
//# sourceMappingURL=onKeyDown.js.map