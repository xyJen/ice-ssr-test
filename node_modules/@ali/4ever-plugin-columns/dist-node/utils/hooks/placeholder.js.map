{"version":3,"sources":["../../../../src/utils/hooks/placeholder.ts"],"names":["placeholder","configs","locale","insertText1","insertText2","text","controller","node","document","value","block","getClosestBlock","key","path","getPath","index","length","when","Block","isBlock","maybeCell","getParent","TableCell","isTableCell","nodes","row","table","Table","isTable","data","sr"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAGe,SAASA,WAAT,CAAqBC,OAArB,EAA+C;AAC5D,QAAMC,MAAM,GAAGD,OAAO,EAAEC,MAAT,IAAmB,EAAlC;AACA,QAAM;AAAEC,IAAAA,WAAW,GAAG,YAAhB;AAA8BC,IAAAA,WAAW,GAAG;AAA5C,MAAmDF,MAAzD;AACA,SAAO,CACL;AACEG,IAAAA,IAAI,EAAE,CAACC,UAAD,EAAyBC,IAAzB,KAAwC;AAC5C,YAAM;AAAEC,QAAAA;AAAF,UAAeF,UAAU,CAACG,KAAhC;AACA,YAAMC,KAAK,GAAGF,QAAQ,CAACG,eAAT,CAAyBJ,IAAI,CAACK,GAA9B,CAAd;AACA,YAAMC,IAAI,GAAGH,KAAK,IAAIF,QAAQ,CAACM,OAAT,CAAiBJ,KAAK,CAACE,GAAvB,CAAtB;AACA,YAAMG,KAAK,GAAGF,IAAI,IAAIA,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAA1B;;AACA,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAO,EAAP;AACD;;AACD,aAAQ,GAAEZ,WAAY,IAAGY,KAAK,GAAG,CAAE,IAAGX,WAAY,EAAlD;AACD,KAVH;AAWEa,IAAAA,IAAI,EAAE,CAACX,UAAD,EAAyBI,KAAzB,KAAyC;AAC7C,UAAI,CAACQ,mBAAMC,OAAN,CAAcT,KAAd,CAAL,EAA2B;AACzB,eAAO,KAAP;AACD;;AACD,YAAM;AAAEF,QAAAA;AAAF,UAAeF,UAAU,CAACG,KAAhC;AACA,YAAMW,SAAS,GAAGZ,QAAQ,CAACa,SAAT,CAAmBX,KAAK,CAACE,GAAzB,CAAlB;;AACA,UAAI,CAACU,2BAAUC,WAAV,CAAsBH,SAAtB,CAAD,IAAqCA,SAAS,CAACI,KAAV,CAAgBR,MAAhB,KAA2B,CAApE,EAAuE;AACrE,eAAO,KAAP;AACD;;AAED,YAAMS,GAAG,GAAGjB,QAAQ,CAACa,SAAT,CAAmBD,SAAS,CAACR,GAA7B,CAAZ;AACA,YAAMc,KAAK,GAAGlB,QAAQ,CAACa,SAAT,CAAmBI,GAAG,EAAEb,GAAL,IAAY,EAA/B,CAAd;;AACA,UAAI,CAACe,uBAAMC,OAAN,CAAcF,KAAd,CAAD,IAAyB,CAACA,KAAK,CAACG,IAAN,CAAWC,EAAzC,EAA6C;AAC3C,eAAO,KAAP;AACD;;AACD,aAAO,iCAAiBpB,KAAjB,CAAP;AACD;AA3BH,GADK,CAAP;AA+BD","sourcesContent":["import { Node, Block, Controller } from '@ali/4ever-cangjie';\nimport { Table, TableCell } from '@ali/4ever-plugin-table';\nimport { isEmptyParagraph } from '@ali/4ever-utils';\nimport { ColumnsConfigs } from '../types';\n\nexport default function placeholder(configs?: ColumnsConfigs) {\n  const locale = configs?.locale || {};\n  const { insertText1 = 'New Column', insertText2 = '' } = locale;\n  return [\n    {\n      text: (controller: Controller, node: Node) => {\n        const { document } = controller.value;\n        const block = document.getClosestBlock(node.key);\n        const path = block && document.getPath(block.key);\n        const index = path && path[path.length - 2];\n        if (typeof index !== 'number') {\n          return '';\n        }\n        return `${insertText1} ${index + 1} ${insertText2}`;\n      },\n      when: (controller: Controller, block: Node) => {\n        if (!Block.isBlock(block)) {\n          return false;\n        }\n        const { document } = controller.value;\n        const maybeCell = document.getParent(block.key);\n        if (!TableCell.isTableCell(maybeCell) || maybeCell.nodes.length !== 1) {\n          return false;\n        }\n\n        const row = document.getParent(maybeCell.key);\n        const table = document.getParent(row?.key || '');\n        if (!Table.isTable(table) || !table.data.sr) {\n          return false;\n        }\n        return isEmptyParagraph(block);\n      },\n    },\n  ];\n}\n"],"file":"placeholder.js"}