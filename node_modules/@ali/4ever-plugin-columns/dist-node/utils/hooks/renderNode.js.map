{"version":3,"sources":["../../../../src/utils/hooks/renderNode.tsx"],"names":["isColumnsTable","node","Table","isTable","data","sr","isColumnsRow","document","key","parent","getParent","isColumnsCell","createRenderNode","configs","TYPE","children","attributes","controller","next","isDisabled","TopBar","TableRow","value","TableCell"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAEA;;uBAN4B,a;;AAQ5B,SAASA,cAAT,CAAwBC,IAAxB,EAAmC;AACjC,SAAOC,uBAAMC,OAAN,CAAcF,IAAd,KAAuBA,IAAI,CAACG,IAAL,CAAUC,EAAxC;AACD;;AAED,SAASC,YAAT,CAAsBC,QAAtB,EAA0CC,GAAG,GAAG,EAAhD,EAAoD;AAClD,QAAMC,MAAM,GAAGF,QAAQ,CAACG,SAAT,CAAmBF,GAAnB,CAAf;AACA,SAAON,uBAAMC,OAAN,CAAcM,MAAd,KAAyBA,MAAM,CAACL,IAAP,CAAYC,EAA5C;AACD;;AAED,SAASM,aAAT,CAAuBJ,QAAvB,EAA2CC,GAA3C,EAAwD;AACtD,QAAMC,MAAM,GAAGF,QAAQ,CAACG,SAAT,CAAmBF,GAAnB,CAAf;AACA,SAAOF,YAAY,CAACC,QAAD,EAAWE,MAAM,EAAED,GAAnB,CAAnB;AACD;;AAEc,SAASI,gBAAT,CAA0BC,OAA1B,EAAoD;AACjE,SAAO;AACL,KAACX,uBAAMY,IAAP,GAAc,CACZ;AAAEb,MAAAA,IAAF;AAAQc,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,KADY,EAEZC,UAFY,EAGZC,IAHY,KAIT;AACH,UAAIL,OAAO,EAAEM,UAAT,IAAuBN,OAAO,CAACM,UAAR,EAA3B,EAAiD;AAC/C,eAAOD,IAAI,EAAX;AACD;;AACD,UAAIlB,cAAc,CAACC,IAAD,CAAlB,EAA0B;AACxB,4BACE,eAAC,cAAD;AACE,UAAA,UAAU,EAAEgB,UADd;AAEE,UAAA,OAAO,EAAEJ,OAFX;AAGE,UAAA,KAAK,EAAEZ,IAHT;AAIE,UAAA,UAAU,EAAEe,UAJd;AAKE,UAAA,MAAM,EAAEI;AALV,WAOGL,QAAQ,EAPX,CADF;AAWD;;AACD,aAAOG,IAAI,EAAX;AACD,KAvBI;AAwBL,KAACG,0BAASP,IAAV,GAAiB,CACf;AAAEb,MAAAA,IAAF;AAAQc,MAAAA;AAAR,KADe,EAEfE,UAFe,EAGfC,IAHe,KAIZ;AACH,UAAIL,OAAO,EAAEM,UAAT,IAAuBN,OAAO,CAACM,UAAR,EAA3B,EAAiD;AAC/C,eAAOD,IAAI,EAAX;AACD;;AACD,YAAM;AAAEX,QAAAA;AAAF,UAAeU,UAAU,CAACK,KAAhC;AACA,YAAM;AAAEd,QAAAA;AAAF,UAAUP,IAAhB;;AACA,UAAIK,YAAY,CAACC,QAAD,EAAWC,GAAX,CAAhB,EAAiC;AAC/B,eAAOO,QAAQ,EAAf;AACD;;AACD,aAAOG,IAAI,EAAX;AACD,KAtCI;AAuCL,KAACK,2BAAUT,IAAX,GAAkB,CAChB;AAAEb,MAAAA,IAAF;AAAQc,MAAAA;AAAR,KADgB,EAEhBE,UAFgB,EAGhBC,IAHgB,KAIb;AACH,UAAIL,OAAO,EAAEM,UAAT,IAAuBN,OAAO,CAACM,UAAR,EAA3B,EAAiD;AAC/C,eAAOD,IAAI,EAAX;AACD;;AACD,YAAM;AAAEX,QAAAA;AAAF,UAAeU,UAAU,CAACK,KAAhC;AACA,YAAM;AAAEd,QAAAA;AAAF,UAAUP,IAAhB;;AACA,UAAIU,aAAa,CAACJ,QAAD,EAAWC,GAAX,CAAjB,EAAkC;AAChC,4BACE,eAAC,eAAD;AACE,UAAA,UAAU,EAAES,UADd;AAEE,UAAA,IAAI,EAAEhB,IAFR;AAGE,UAAA,OAAO,EAAEY;AAHX,WAKGE,QAAQ,EALX,CADF;AASD;;AACD,aAAOG,IAAI,EAAX;AACD;AA7DI,GAAP;AA+DD","sourcesContent":["import * as React from 'react';\nimport { Controller, RenderNodeProps, Document } from '@ali/4ever-cangjie';\nimport { Table, TableRow, TableCell } from '@ali/4ever-plugin-table';\n\nimport TableView from '../components/Table';\nimport Column from '../components/Column';\nimport { ColumnsConfigs } from '../types';\nimport TopBar from '../components/TopBar';\n\nfunction isColumnsTable(node: any) {\n  return Table.isTable(node) && node.data.sr;\n}\n\nfunction isColumnsRow(document: Document, key = '') {\n  const parent = document.getParent(key);\n  return Table.isTable(parent) && parent.data.sr;\n}\n\nfunction isColumnsCell(document: Document, key: string) {\n  const parent = document.getParent(key);\n  return isColumnsRow(document, parent?.key);\n}\n\nexport default function createRenderNode(configs?: ColumnsConfigs) {\n  return {\n    [Table.TYPE]: (\n      { node, children, attributes }: RenderNodeProps,\n      controller: Controller,\n      next: any,\n    ) => {\n      if (configs?.isDisabled && configs.isDisabled()) {\n        return next();\n      }\n      if (isColumnsTable(node)) {\n        return (\n          <TableView\n            controller={controller}\n            configs={configs}\n            table={node as Table}\n            attributes={attributes}\n            TopBar={TopBar}\n          >\n            {children()}\n          </TableView>\n        );\n      }\n      return next();\n    },\n    [TableRow.TYPE]: (\n      { node, children }: RenderNodeProps,\n      controller: Controller,\n      next: any,\n    ) => {\n      if (configs?.isDisabled && configs.isDisabled()) {\n        return next();\n      }\n      const { document } = controller.value;\n      const { key } = node;\n      if (isColumnsRow(document, key)) {\n        return children();\n      }\n      return next();\n    },\n    [TableCell.TYPE]: (\n      { node, children }: RenderNodeProps,\n      controller: Controller,\n      next: any,\n    ) => {\n      if (configs?.isDisabled && configs.isDisabled()) {\n        return next();\n      }\n      const { document } = controller.value;\n      const { key } = node;\n      if (isColumnsCell(document, key)) {\n        return (\n          <Column\n            controller={controller}\n            cell={node as TableCell}\n            configs={configs}\n          >\n            {children()}\n          </Column>\n        );\n      }\n      return next();\n    },\n  };\n}\n"],"file":"renderNode.js"}