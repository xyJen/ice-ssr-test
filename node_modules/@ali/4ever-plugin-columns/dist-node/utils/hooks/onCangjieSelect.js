"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnCangjieSelect;

var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginTable = require("@ali/4ever-plugin-table");

function moveToInside(controller, anchor) {
  const offset = anchor.edge === _everCangjie.EdgePoint.BEFORE ? 1 : -1;
  const point = controller.query(_everCangjie.Queries.pointAtDistance, anchor, offset);

  const newSelection = _everCangjie.RangeSelection.create({
    anchor: point,
    focus: point
  });

  return controller.command(_everCangjie.Commands.select, newSelection);
}

function moveFocusInsideColumn(controller, selection, targetNode) {
  const {
    document
  } = controller.value;
  const isForward = selection.isForward(document);
  const focus = isForward ? controller.query(_everCangjie.Queries.pointAtEndOfNode, targetNode) : controller.query(_everCangjie.Queries.pointAtStartOfNode, targetNode);

  const newSelection = _everCangjie.RangeSelection.create({
    anchor: selection.anchor,
    focus
  });

  return controller.command(_everCangjie.Commands.select, newSelection);
}

function createOnCangjieSelect(configs) {
  return (event, controller, next) => {
    if (configs?.isDisabled && configs.isDisabled()) {
      return next();
    }

    const {
      document
    } = controller.value;
    const {
      selection,
      trigger
    } = event.detail;
    const {
      anchor,
      focus
    } = selection; // 处理一：用户点击的时候，把 edge 光标挪到分栏内部

    if (trigger === 'selectStart' && selection.isCollapsed && anchor.isEdgePoint()) {
      const block = document.getNode(anchor.key);

      if (_everPluginTable.Table.isTable(block) && block.data.sr) {
        const docStart = controller.query(_everCangjie.Queries.pointAtStartOfNode, document);
        const docEnd = controller.query(_everCangjie.Queries.pointAtEndOfNode, document);

        if (!(0, _fastDeepEqual.default)(docStart, anchor) && !(0, _fastDeepEqual.default)(docEnd, anchor) && // 页面试图下，docStart 返回 column 内部的 point
        !block.getNode(docStart.key) && !block.getNode(docEnd.key)) {
          return moveToInside(controller, anchor);
        }
      }
    } // 处理二：用户跨栏选中内容，就自动纠正掉（禁止跨栏选中，因为操作不支持）
    // 移动端拖选时，会将拖动的点置为 anchor，所以需要额外判断下


    const theOtherSide = event.detail.trigger === 'dragging' && _everCangjie.environment.IS_MOBILE ? focus : anchor;
    const maybeCell = document.getClosest(theOtherSide.key, n => {
      return _everPluginTable.TableCell.isTableCell(n);
    });

    if (selection.isExpanded && _everPluginTable.TableCell.isTableCell(maybeCell)) {
      const maybeRow = document.getParent(maybeCell.key);
      const maybeTable = maybeRow && document.getParent(maybeRow.key);

      if (_everPluginTable.Table.isTable(maybeTable) && maybeTable.data.sr) {
        const focusCell = document.getClosest(focus.key, n => n.key === maybeCell.key);

        if (!focusCell) {
          return moveFocusInsideColumn(controller, selection, maybeCell);
        }
      }
    }

    return next();
  };
}
//# sourceMappingURL=onCangjieSelect.js.map