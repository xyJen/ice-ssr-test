{"version":3,"sources":["../../../../src/utils/utils/ColumnsProvider.ts"],"names":["context","React","createContext","cells","alignKey","isDragging","handleDragging","handleDraggingChange","ColumnsProvider","Provider","useCellConfigs","key","useContext","index","findIndex","w","item","width","totalWidth","reduce","a","percent","dragBarAligned","percentAligned","DEFAULT_SPLIT","some","p","Math","abs","count","length","correctWidths","items","currentTotal","t","i","x","map","moveWidths","params","offsetX","rectWidth","prefPercents","MIN_WIDTH","COLUMN_SPACE","currentItemOffset","prefOffsets","round","currentOffset","adjustedOffsetX","find","o","STICK_WIDTH","isAligned","offset","newItems","prevItem","newWidth","max","moved"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  COLUMN_SPACE,\n  DEFAULT_SPLIT,\n  MIN_WIDTH,\n  STICK_WIDTH,\n} from '../constants';\n\nexport type CellItem = {\n  key: string;\n  width: number;\n};\n\ntype ProviderConfigs = {\n  cells: CellItem[];\n  alignKey: string;\n  isDragging: boolean;\n  handleDragging: (cellKey: string, clientX: number) => void;\n  handleDraggingChange: (dragging: boolean) => void;\n};\n\nconst context = React.createContext<ProviderConfigs>({\n  cells: [],\n  alignKey: '',\n  isDragging: false,\n  handleDragging: () => {},\n  handleDraggingChange: () => {},\n});\n\nexport const ColumnsProvider = context.Provider;\n\nexport const useCellConfigs = (key: string) => {\n  const {\n    cells,\n    alignKey,\n    handleDragging,\n    handleDraggingChange,\n    isDragging,\n  } = React.useContext(context);\n  const index = cells.findIndex((w) => w.key === key);\n  const item = cells[index];\n  if (!item) {\n    return null;\n  }\n  const width = item?.width || 1;\n  const totalWidth = cells.reduce((a, w) => a + w.width, 0);\n  const percent = width / totalWidth;\n  return {\n    index,\n    isDragging,\n    dragBarAligned: alignKey === key,\n    percentAligned: DEFAULT_SPLIT.some(\n      (p) => Math.abs(totalWidth * p - width) <= 2,\n    ),\n    percent,\n    count: cells.length,\n    handleDragging,\n    handleDraggingChange,\n  };\n};\n\nexport function correctWidths(items: CellItem[], totalWidth: number) {\n  const currentTotal = items.reduce((t, i) => t + i.width, 0);\n  const x = totalWidth / currentTotal;\n  return items.map((i) => ({ ...i, width: i.width * x }));\n}\n\ntype MoveResult = {\n  items: CellItem[];\n  isAligned?: boolean;\n};\n\ntype MoveParams = {\n  offsetX: number;\n  key: string;\n  items: CellItem[];\n  totalWidth: number;\n  rectWidth: number;\n  prefPercents?: number[];\n};\n\nexport function moveWidths(params: MoveParams): MoveResult {\n  const {\n    offsetX,\n    key,\n    items,\n    totalWidth,\n    rectWidth,\n    prefPercents = DEFAULT_SPLIT,\n  } = params;\n  let index = items.findIndex((i) => i.key === key);\n  if (!items[index]) {\n    return { items };\n  }\n  // 前面 index 个，后面 length - index 个\n  // 左边界：index * (w + COLUMN_SPACE) - COLUMN_SPACE / 2\n  if (offsetX < index * (MIN_WIDTH + COLUMN_SPACE) - COLUMN_SPACE / 2) {\n    return { items };\n  }\n  // 右边界长度：[index, items.length) * (w + COLUMN_SPACE) - COLUMN_SPACE / 2\n  if (\n    offsetX >\n    rectWidth -\n      (items.length - index) * (MIN_WIDTH + COLUMN_SPACE) +\n      COLUMN_SPACE / 2\n  ) {\n    return { items };\n  }\n\n  // 这里可以移动了，移动后，不会导致其他的问题。\n  const currentItemOffset = items.reduce(\n    (t, item, i) => (i >= index - 1 ? t : t + item.width + COLUMN_SPACE),\n    0,\n  );\n  const prefOffsets = prefPercents.map((p) =>\n    Math.round(currentItemOffset + p * totalWidth + COLUMN_SPACE / 2),\n  );\n\n  // [0 - index) * (w + COLUMN_SPACE) - COLUMN_SPACE / 2\n  const currentOffset = Math.round(\n    items.reduce(\n      (t, item, i) => (i >= index ? t : t + item.width + COLUMN_SPACE),\n      0,\n    ) -\n      COLUMN_SPACE / 2,\n  );\n\n  const adjustedOffsetX =\n    prefOffsets.find((o) => Math.abs(o - offsetX) < STICK_WIDTH) || offsetX;\n  const isAligned = adjustedOffsetX !== offsetX;\n\n  let offset = Math.round(adjustedOffsetX - currentOffset);\n\n  if (Math.abs(offset) < 1) {\n    return { items, isAligned };\n  }\n\n  const newItems = [...items];\n  // 向右侧移动\n  if (offset >= 1) {\n    const prevItem = newItems[index - 1];\n    if (prevItem) {\n      newItems[index - 1] = { ...prevItem };\n      newItems[index - 1].width += offset;\n    }\n\n    while (offset >= 1 && newItems[index]) {\n      // 尝试缩小当前的宽度\n      const item = newItems[index];\n      const newWidth = Math.max(item.width - offset, MIN_WIDTH);\n      const moved = item.width - newWidth;\n      newItems[index] = { ...item };\n      newItems[index].width = newWidth;\n\n      index += 1;\n      offset -= moved;\n    }\n  }\n\n  // 向左侧移动\n  if (offset <= -1) {\n    newItems[index].width -= offset;\n    index -= 1;\n\n    while (offset <= -1 && newItems[index]) {\n      // 尝试缩小当前的宽度\n      const item = newItems[index];\n      const newWidth = Math.max(item.width + offset, MIN_WIDTH);\n      const moved = item.width - newWidth;\n      newItems[index] = { ...item };\n      newItems[index].width = newWidth;\n\n      index -= 1;\n      offset += moved;\n    }\n  }\n\n  return { items: newItems, isAligned };\n}\n"],"file":"ColumnsProvider.js"}