{"version":3,"sources":["../../../../src/utils/utils/useWidth.ts"],"names":["TIMEOUT","useWidth","ref","stateWidth","setWidth","React","useState","useEffect","node","current","undefined","width","getBoundingClientRect","Math","round","timer","callback","window","clearTimeout","setTimeout","newWidth","observer","ResizeObserver","observe","unobserve"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA,MAAMA,OAAO,GAAG,GAAhB;AAEA;AACA;AACA;;AACe,SAASC,QAAT,CAAkBC,GAAlB,EAAiD;AAC9D,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBC,KAAK,CAACC,QAAN,CAAe,CAAf,CAA/B;AACAD,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpB,UAAMC,IAAI,GAAGN,GAAG,CAACO,OAAjB;;AACA,QAAI,CAACD,IAAL,EAAW;AACT,aAAOE,SAAP;AACD;;AACD,QAAI;AAAEC,MAAAA;AAAF,QAAYH,IAAI,CAACI,qBAAL,EAAhB;AACAD,IAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAR;AACA,QAAII,KAAJ;;AACA,UAAMC,QAAQ,GAAG,MAAM;AACrBD,MAAAA,KAAK,IAAIE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAT,CADqB,CAErB;AACA;;AACAA,MAAAA,KAAK,GAAGE,MAAM,CAACE,UAAP,CAAkB,MAAM;AAC9B,YAAI;AAAER,UAAAA,KAAK,EAAES;AAAT,YAAsBZ,IAAI,CAACI,qBAAL,EAA1B;AACAQ,QAAAA,QAAQ,GAAGP,IAAI,CAACC,KAAL,CAAWM,QAAX,CAAX;;AACA,YAAIA,QAAQ,KAAKT,KAAjB,EAAwB;AACtBA,UAAAA,KAAK,GAAGS,QAAR;AACAhB,UAAAA,QAAQ,CAACO,KAAD,CAAR;AACD;AACF,OAPO,EAOLX,OAPK,CAAR;AAQD,KAZD;;AAaA,UAAMqB,QAAQ,GAAG,IAAIC,+BAAJ,CAAmBN,QAAnB,CAAjB;AACAK,IAAAA,QAAQ,CAACE,OAAT,CAAiBf,IAAjB;AACA,WAAO,MAAM;AACXO,MAAAA,KAAK,IAAIE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAT;AACAM,MAAAA,QAAQ,CAACG,SAAT,CAAmBhB,IAAnB;AACD,KAHD;AAID,GA3BD,EA2BG,CAACJ,QAAD,EAAWF,GAAX,CA3BH;AA4BA,SAAOC,UAAP;AACD","sourcesContent":["import * as React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst TIMEOUT = 300;\n\n/**\n * 在 ref 尺寸变动时，调用 updator\n */\nexport default function useWidth(ref: React.RefObject<Element>) {\n  const [stateWidth, setWidth] = React.useState(0);\n  React.useEffect(() => {\n    const node = ref.current;\n    if (!node) {\n      return undefined;\n    }\n    let { width } = node.getBoundingClientRect();\n    width = Math.round(width);\n    let timer: any;\n    const callback = () => {\n      timer && window.clearTimeout(timer);\n      // timeout 出于性能考虑，模拟 debounce 效果\n      // 已添加清除逻辑\n      timer = window.setTimeout(() => {\n        let { width: newWidth } = node.getBoundingClientRect();\n        newWidth = Math.round(newWidth);\n        if (newWidth !== width) {\n          width = newWidth;\n          setWidth(width);\n        }\n      }, TIMEOUT);\n    };\n    const observer = new ResizeObserver(callback);\n    observer.observe(node);\n    return () => {\n      timer && window.clearTimeout(timer);\n      observer.unobserve(node);\n    };\n  }, [setWidth, ref]);\n  return stateWidth;\n}\n"],"file":"useWidth.js"}