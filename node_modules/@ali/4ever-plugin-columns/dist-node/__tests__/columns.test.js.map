{"version":3,"sources":["../../../src/__tests__/columns.test.ts"],"names":["badTableNodesUndefined","Value","create","document","Document","nodes","Table","data","sr","badTableNodesEmpty","badTableNodesInvalid","Paragraph","badRowNodesUndefined","TableRow","badRowNodesEmpty","badCellNodesUndefined","TableCell","badCellNodesEmpty","goodColumns","Text","badValues","describe","Object","keys","forEach","key","test","value","controller","Controller","expect","length","toBe","isTable"],"mappings":"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","sourcesContent":["import { Value, Document, Controller, Text } from '@ali/4ever-cangjie';\nimport { Table, TableCell, TableRow } from '@ali/4ever-plugin-table';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport clearAloneTables from '../utils/commands/clearAloneTables';\n\nconst badTableNodesUndefined = Value.create({\n  document: Document.create({\n    nodes: [\n      Table.create({\n        data: { sr: true },\n      }),\n    ],\n  }),\n});\nconst badTableNodesEmpty = Value.create({\n  document: Document.create({\n    nodes: [\n      Table.create({\n        data: { sr: true },\n        nodes: [],\n      }),\n    ],\n  }),\n});\n\nconst badTableNodesInvalid = Value.create({\n  document: Document.create({\n    nodes: [\n      Table.create({\n        data: { sr: true },\n        nodes: [\n          Paragraph.create({\n            nodes: [],\n          }),\n        ],\n      }),\n    ],\n  }),\n});\nconst badRowNodesUndefined = Value.create({\n  document: Document.create({\n    nodes: [\n      Table.create({\n        data: { sr: true },\n        nodes: [TableRow.create({})],\n      }),\n    ],\n  }),\n});\nconst badRowNodesEmpty = Value.create({\n  document: Document.create({\n    nodes: [\n      Table.create({\n        data: { sr: true },\n        nodes: [\n          TableRow.create({\n            nodes: [],\n          }),\n        ],\n      }),\n    ],\n  }),\n});\n\n// create 会默认补 text, 这个不是 nodesUndefined，先跳过\nconst badCellNodesUndefined = Value.create({\n  document: Document.create({\n    nodes: [\n      Table.create({\n        data: { sr: true },\n        nodes: [\n          TableRow.create({\n            nodes: [TableCell.create({})],\n          }),\n        ],\n      }),\n    ],\n  }),\n});\n\n// 同上\nconst badCellNodesEmpty = Value.create({\n  document: Document.create({\n    nodes: [\n      Table.create({\n        data: { sr: true },\n        nodes: [\n          TableRow.create({\n            nodes: [\n              TableCell.create({\n                nodes: [],\n              }),\n            ],\n          }),\n        ],\n      }),\n    ],\n  }),\n});\n\nconst goodColumns = Value.create({\n  document: Document.create({\n    nodes: [\n      Table.create({\n        data: { sr: true },\n        nodes: [\n          TableRow.create({\n            nodes: [\n              TableCell.create({\n                nodes: [\n                  Paragraph.create({\n                    nodes: [Text.create('123')],\n                  }),\n                ],\n              }),\n              TableCell.create({\n                nodes: [\n                  Paragraph.create({\n                    nodes: [Text.create('456')],\n                  }),\n                ],\n              }),\n            ],\n          }),\n        ],\n      }),\n    ],\n  }),\n});\n\nconst badValues = {\n  badTableNodesUndefined,\n  badTableNodesEmpty,\n  badTableNodesInvalid,\n  badRowNodesUndefined,\n  badRowNodesEmpty,\n};\n\ndescribe('bamboo/plugins/columns', () => {\n  Object.keys(badValues).forEach((key) => {\n    test(`clearAloneTable - ${key}`, () => {\n      const value = badValues[key];\n      const controller = Controller.create({ value });\n      clearAloneTables(controller);\n\n      expect(controller.value.document !== value.document);\n\n      const { nodes } = controller.value.document;\n      expect(nodes.length).toBe(0);\n    });\n  });\n\n  test(`clearAloneTable - cellNodeNotMatch`, () => {\n    const value = goodColumns;\n    const controller = Controller.create({ value });\n    clearAloneTables(controller);\n\n    const { nodes } = controller.value.document;\n    expect(nodes.length).toBe(1);\n    expect(Table.isTable(nodes[0])).toBe(true);\n    expect(controller.value.document === value.document);\n  });\n});\n"],"file":"columns.test.js"}