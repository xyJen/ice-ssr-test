"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginTable = require("@ali/4ever-plugin-table");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _clearAloneTables = _interopRequireDefault(require("../utils/commands/clearAloneTables"));

const badTableNodesUndefined = _everCangjie.Value.create({
  document: _everCangjie.Document.create({
    nodes: [_everPluginTable.Table.create({
      data: {
        sr: true
      }
    })]
  })
});

const badTableNodesEmpty = _everCangjie.Value.create({
  document: _everCangjie.Document.create({
    nodes: [_everPluginTable.Table.create({
      data: {
        sr: true
      },
      nodes: []
    })]
  })
});

const badTableNodesInvalid = _everCangjie.Value.create({
  document: _everCangjie.Document.create({
    nodes: [_everPluginTable.Table.create({
      data: {
        sr: true
      },
      nodes: [_everPluginParagraph.Paragraph.create({
        nodes: []
      })]
    })]
  })
});

const badRowNodesUndefined = _everCangjie.Value.create({
  document: _everCangjie.Document.create({
    nodes: [_everPluginTable.Table.create({
      data: {
        sr: true
      },
      nodes: [_everPluginTable.TableRow.create({})]
    })]
  })
});

const badRowNodesEmpty = _everCangjie.Value.create({
  document: _everCangjie.Document.create({
    nodes: [_everPluginTable.Table.create({
      data: {
        sr: true
      },
      nodes: [_everPluginTable.TableRow.create({
        nodes: []
      })]
    })]
  })
}); // create 会默认补 text, 这个不是 nodesUndefined，先跳过


const badCellNodesUndefined = _everCangjie.Value.create({
  document: _everCangjie.Document.create({
    nodes: [_everPluginTable.Table.create({
      data: {
        sr: true
      },
      nodes: [_everPluginTable.TableRow.create({
        nodes: [_everPluginTable.TableCell.create({})]
      })]
    })]
  })
}); // 同上


const badCellNodesEmpty = _everCangjie.Value.create({
  document: _everCangjie.Document.create({
    nodes: [_everPluginTable.Table.create({
      data: {
        sr: true
      },
      nodes: [_everPluginTable.TableRow.create({
        nodes: [_everPluginTable.TableCell.create({
          nodes: []
        })]
      })]
    })]
  })
});

const goodColumns = _everCangjie.Value.create({
  document: _everCangjie.Document.create({
    nodes: [_everPluginTable.Table.create({
      data: {
        sr: true
      },
      nodes: [_everPluginTable.TableRow.create({
        nodes: [_everPluginTable.TableCell.create({
          nodes: [_everPluginParagraph.Paragraph.create({
            nodes: [_everCangjie.Text.create('123')]
          })]
        }), _everPluginTable.TableCell.create({
          nodes: [_everPluginParagraph.Paragraph.create({
            nodes: [_everCangjie.Text.create('456')]
          })]
        })]
      })]
    })]
  })
});

const badValues = {
  badTableNodesUndefined,
  badTableNodesEmpty,
  badTableNodesInvalid,
  badRowNodesUndefined,
  badRowNodesEmpty
};
describe('bamboo/plugins/columns', () => {
  Object.keys(badValues).forEach(key => {
    test(`clearAloneTable - ${key}`, () => {
      const value = badValues[key];

      const controller = _everCangjie.Controller.create({
        value
      });

      (0, _clearAloneTables.default)(controller);
      expect(controller.value.document !== value.document);
      const {
        nodes
      } = controller.value.document;
      expect(nodes.length).toBe(0);
    });
  });
  test(`clearAloneTable - cellNodeNotMatch`, () => {
    const value = goodColumns;

    const controller = _everCangjie.Controller.create({
      value
    });

    (0, _clearAloneTables.default)(controller);
    const {
      nodes
    } = controller.value.document;
    expect(nodes.length).toBe(1);
    expect(_everPluginTable.Table.isTable(nodes[0])).toBe(true);
    expect(controller.value.document === value.document);
  });
});
//# sourceMappingURL=columns.test.js.map