import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { environment } from '@ali/4ever-cangjie';
import { useIpadActiveBarIndex } from "../utils/useIpadActiveIndex";
import { useOnClickOutside } from '@ali/4ever-component';
import { COLUMN_SPACE } from "../constants";
var IS_IPAD = environment.IS_IPAD;
var Line = /*#__PURE__*/styled.div(["width:4px;height:100%;transition:background-color 250ms;background-color:rgba(0,137,255,0.48);border-radius:2px;opacity:", ";.draggable-hander &{opacity:0 !important;pointer-events:none;}"], function (_ref) {
  var visible = _ref.visible;
  return visible ? 1 : 0;
});
var Wrapper = /*#__PURE__*/styled.div(["cursor:", ";margin:0;padding:0 ", "px;&:hover ", "{opacity:", ";}[data-node-selecting] &[data-column-dragkey]{pointer-events:none;}"], function (props) {
  return props.readOnly ? 'inherit' : 'col-resize';
}, (COLUMN_SPACE - 4) / 2, Line, function (props) {
  return props.isEnabled ? '1' : '0';
});
var CURSOR_SIZE = 5;
export default function SplitLine(props) {
  var cellKey = props.cellKey,
      isAligned = props.isAligned,
      isEnabled = props.isEnabled,
      onDragging = props.onDragging,
      onDraggingChange = props.onDraggingChange,
      readOnly = props.readOnly,
      index = props.index;
  var isDragging = React.useRef(false);
  var ref = React.useRef(null);

  var _useIpadActiveBarInde = useIpadActiveBarIndex(),
      activeIndex = _useIpadActiveBarInde[0],
      setActiveIndex = _useIpadActiveBarInde[1];

  var handleMouseMove = React.useCallback(function (event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    event.preventDefault();

    if (isDragging.current) {
      onDraggingChange(true);
      onDragging(cellKey, event.clientX + CURSOR_SIZE);
    }
  }, [cellKey, onDragging, onDraggingChange]);
  var handleMouseUp = React.useCallback(function (event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    event.preventDefault();
    event.currentTarget.releasePointerCapture(event.pointerId);
    isDragging.current = false;
    onDraggingChange(false);

    if (!ref.current) {
      return;
    }

    ref.current.removeEventListener('pointerup', handleMouseUp);
    ref.current.removeEventListener('pointermove', handleMouseMove);
  }, [handleMouseMove, onDraggingChange]);
  var handleMouseDown = React.useCallback(function (event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    event.preventDefault();

    if (!ref.current) {
      return;
    }

    isDragging.current = true;

    if (event.pointerType === 'mouse') {
      event.currentTarget.setPointerCapture(event.pointerId);
    }

    ref.current.addEventListener('pointerup', handleMouseUp);
    ref.current.addEventListener('pointermove', handleMouseMove);
  }, [handleMouseMove, handleMouseUp]);
  var handleMouseEnter = React.useCallback(function () {
    // ipad hover 时，期望 topBar 和 dragBar 同时显示
    if (IS_IPAD) {
      setActiveIndex(index);
    }
  }, [index, setActiveIndex]);
  var handleMouseLeave = React.useCallback(function () {
    if (IS_IPAD && activeIndex !== -1) {
      setActiveIndex(-1);
    }
  }, [activeIndex, setActiveIndex]);
  React.useEffect(function () {
    var node = ref.current;

    if (!node || !isEnabled) {
      return undefined;
    }

    node.addEventListener('pointerdown', handleMouseDown);
    return function () {
      node.removeEventListener('pointerdown', handleMouseDown);
    };
  }, [handleMouseDown, handleMouseMove, handleMouseUp, isEnabled, activeIndex]);

  var handleClick = function handleClick() {
    if (IS_IPAD && activeIndex !== index) {
      setActiveIndex(index);
    }
  };

  useOnClickOutside(ref, function () {
    if (IS_IPAD && activeIndex !== -1) {
      setActiveIndex(-1);
    }
  }, false, function (ele) {
    // 忽略 topbar
    return !!ele.closest('div[data-column-topbar]');
  });
  return /*#__PURE__*/_createElement(Wrapper, {
    readOnly: readOnly,
    isEnabled: isEnabled,
    "data-column-dragkey": cellKey,
    ref: ref,
    onClick: handleClick,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, /*#__PURE__*/_createElement(Line, {
    isAligned: isAligned,
    "data-column-dragkey": cellKey,
    visible: activeIndex === index
  }));
}
//# sourceMappingURL=DragBar.js.map