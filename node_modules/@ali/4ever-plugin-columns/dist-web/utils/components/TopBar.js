import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { useZoom, Controller, environment } from '@ali/4ever-cangjie';
import { ToolbarTablePlusNormal, Tooltip } from '@ali/we-design';
import { COLUMN_SPACE } from "../constants";
import { insertCol } from "../actions";
import { useIpadActiveBarIndex } from "../utils/useIpadActiveIndex";
var IS_IPAD = environment.IS_IPAD;
var Wrapper = /*#__PURE__*/styled.div(["position:absolute;top:0;height:0;width:100%;left:0;display:flex;flex-direction:row;justify-content:stretch;[data-node-selecting] &[data-column-topbar]{display:none;}"]);
var Space = /*#__PURE__*/styled.div([""]);
var ItemWrapper = /*#__PURE__*/styled.div(["width:", "px;height:0;display:flex;align-items:center;justify-content:center;"], function (_ref) {
  var emptySpace = _ref.emptySpace;
  return emptySpace ? 0 : COLUMN_SPACE;
});
var Holder = /*#__PURE__*/styled.div(["width:0;height:0;position:relative;z-index:99;"]);
var InsertOuterWrapper = /*#__PURE__*/styled.div(["cursor:pointer;display:flex;align-items:center;justify-content:center;width:24px;height:24px;font-size:20px;line-height:20px;border-radius:50%;box-shadow:0px 5px 15px rgba(0,0,0,0.24);box-sizing:border-box;position:relative;transform:", ";opacity:", ";transition:transform 250ms,opacity 250ms;color:white;background-color:rgb(45,132,250);"], function (_ref2) {
  var isVisible = _ref2.isVisible;
  return "scale(" + (isVisible ? 1 : 0.8) + ")";
}, function (_ref3) {
  var isVisible = _ref3.isVisible;
  return isVisible ? 1 : 0;
});
var SvgIcon = /*#__PURE__*/styled.svg(["position:absolute;left:10px;top:18px;"]);
var IconWrapper = /*#__PURE__*/styled.span(["display:inline-flex;align-items:center;justify-content:center;"]);
var Dot = /*#__PURE__*/styled.div(["position:absolute;left:-12px;top:-24px;width:24px;height:24px;"]);
var VertBar = /*#__PURE__*/styled.div(["width:2px;height:", ";opacity:", ";background:#3296fa;position:absolute;transition:opacity 250ms;left:11px;top:24px;pointer-events:none;"], function (_ref4) {
  var height = _ref4.height;
  return height + "px";
}, function (_ref5) {
  var isVisible = _ref5.isVisible;
  return isVisible ? 1 : 0;
});
var ICON_SIZE = 3;
var ICON_COLOR = 'rgba(23, 26, 29, 0.24)';

var _ref6 = /*#__PURE__*/_createElement(SvgIcon, {
  width: ICON_SIZE,
  height: ICON_SIZE,
  viewBox: "0 0 " + ICON_SIZE + " " + ICON_SIZE,
  fill: "none"
}, /*#__PURE__*/_createElement("circle", {
  cx: ICON_SIZE / 2,
  cy: ICON_SIZE / 2,
  r: ICON_SIZE / 2,
  fill: ICON_COLOR
}));

var DotIcon = function DotIcon() {
  return _ref6;
};

function InsertBar(_ref7) {
  var insertTitle = _ref7.insertTitle,
      targetKey = _ref7.targetKey,
      offset = _ref7.offset,
      index = _ref7.index;
  var ref = React.useRef(null);
  var controller = Controller.useController();

  var _React$useState = React.useState(false),
      isVisible = _React$useState[0],
      setIsVisible = _React$useState[1];

  var _React$useState2 = React.useState(0),
      height = _React$useState2[0],
      setHeight = _React$useState2[1];

  var zoom = useZoom();

  var _useIpadActiveBarInde = useIpadActiveBarIndex(),
      activeIndex = _useIpadActiveBarInde[0],
      setActiveIndex = _useIpadActiveBarInde[1];

  var ipadBarVisible = activeIndex === index;
  React.useEffect(function () {
    var _ref$current, _ref$current$closest;

    if (!isVisible && !ipadBarVisible) {
      return;
    }

    var _ref8 = ((_ref$current = ref.current) == null ? void 0 : (_ref$current$closest = _ref$current.closest('[data-columns]')) == null ? void 0 : _ref$current$closest.getBoundingClientRect()) || {},
        barHeight = _ref8.height;

    setHeight((barHeight || 0) / zoom);
  }, [isVisible, zoom, ipadBarVisible]);
  var handleMouseEnter = React.useCallback(function () {
    setIsVisible(true); // ipad 使用键盘的触控板 hover 时会走这里

    if (IS_IPAD) {
      setActiveIndex(index);
    }
  }, [index, setActiveIndex]);
  var handleMouseLeave = React.useCallback(function () {
    setIsVisible(false);

    if (IS_IPAD && activeIndex !== -1) {
      setActiveIndex(-1);
    }
  }, [activeIndex, setActiveIndex]);
  var handleClick = React.useCallback(function () {
    if (IS_IPAD) {
      if (ipadBarVisible) {
        setActiveIndex(-1);
      } else {
        setActiveIndex(index);
        return;
      }
    }

    controller.run('onAction', insertCol({
      targetKey: targetKey,
      offset: offset
    }));
  }, [controller, targetKey, offset, ipadBarVisible, index, setActiveIndex]);
  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(InsertOuterWrapper, {
    ref: ref,
    onMouseDown: handleClick,
    isVisible: isVisible || ipadBarVisible,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, /*#__PURE__*/_createElement(Tooltip, {
    placement: 'top',
    title: insertTitle || 'Insert',
    disabled: IS_IPAD
  }, /*#__PURE__*/_createElement(IconWrapper, null, /*#__PURE__*/_createElement(ToolbarTablePlusNormal, {
    style: {
      fontSize: 20
    }
  })))), /*#__PURE__*/_createElement(VertBar, {
    height: height,
    isVisible: isVisible || ipadBarVisible
  }));
}

var _ref9 = /*#__PURE__*/_createElement(DotIcon, null);

function Item(configs) {
  return /*#__PURE__*/_createElement(ItemWrapper, {
    emptySpace: configs.emptySpace
  }, /*#__PURE__*/_createElement(Holder, null, /*#__PURE__*/_createElement(Dot, null, _ref9, /*#__PURE__*/_createElement(InsertBar, configs))));
}

export default function TopBar(_ref10) {
  var items = _ref10.items,
      configs = _ref10.configs;
  var totalWidth = items.reduce(function (a, i) {
    return a + i.width;
  }, 0);
  var fixedSize = (items.length - 1) * COLUMN_SPACE;
  return /*#__PURE__*/_createElement(Wrapper, {
    "data-column-topbar": true
  }, items.map(function (_ref11, index) {
    var _configs$locale, _configs$locale2;

    var key = _ref11.key,
        width = _ref11.width;
    return /*#__PURE__*/_createElement(React.Fragment, {
      key: key + "_" + index + "_" + items.length
    }, index === 0 && /*#__PURE__*/_createElement(Item, {
      emptySpace: true,
      insertTitle: configs == null ? void 0 : (_configs$locale = configs.locale) == null ? void 0 : _configs$locale.insertCol,
      targetKey: key,
      offset: 0,
      index: 0
    }), /*#__PURE__*/_createElement(Space, {
      style: {
        width: "calc((100% - " + fixedSize + "px) * " + width / totalWidth + ")"
      }
    }), /*#__PURE__*/_createElement(Item, {
      emptySpace: index === items.length - 1,
      insertTitle: configs == null ? void 0 : (_configs$locale2 = configs.locale) == null ? void 0 : _configs$locale2.insertCol,
      targetKey: key,
      offset: 1,
      index: index + 1
    }));
  }));
}
//# sourceMappingURL=TopBar.js.map