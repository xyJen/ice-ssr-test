import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { Commands, environment } from '@ali/4ever-cangjie';
import { Table, TableRow } from '@ali/4ever-plugin-table';
import { correctWidths, moveWidths, ColumnsProvider } from "../utils/ColumnsProvider";
import useWidth from "../utils/useWidth";
import { COLUMN_SPACE, CURSOR_SIZE } from "../constants";
import { cleanUpColumns } from "../actions";
import { IpadActiveBarProvider } from "../utils/useIpadActiveIndex";
var IS_MOBILE = environment.IS_MOBILE,
    IS_IPAD = environment.IS_IPAD;
var IS_PC_OR_IPAD = !IS_MOBILE || IS_IPAD;
var Wrapper = /*#__PURE__*/styled.div(["display:flex;align-items:stretch;flex-direction:row;position:relative;touch-action:pan-y pinch-zoom;", ""], IS_MOBILE && !IS_IPAD && "\n      @media (max-width: 500px) {\n        flex-direction: column;\n      }\n    ");

function writeToData(items, controller) {
  var document = controller.value.document;
  var table = document.getClosest(items[0].key, Table.isTable);

  if (!table) {
    return;
  }

  controller.command(Commands.setNodeByKey, table.key, {
    data: _extends({}, table.data, {
      colsWidth: items.map(function (i) {
        return i.width;
      })
    })
  });
}

var isFocused = function isFocused(controller, table) {
  var selection = controller.value.selection;
  var focusKey = selection.focus.key;
  return focusKey === table.key || table.hasNode(focusKey);
};

export default function TableView(_ref) {
  var table = _ref.table,
      controller = _ref.controller,
      TopBar = _ref.TopBar,
      configs = _ref.configs,
      onDragChange = _ref.onDragChange,
      children = _ref.children,
      attributes = _ref.attributes;
  var ref = React.useRef(null);
  var parentRect = React.useRef();
  var isDragging = React.useRef();

  var _React$useReducer = React.useReducer(function (s) {
    return s + 1;
  }, 0),
      forceRender = _React$useReducer[1];

  var _React$useState = React.useState(''),
      alignKey = _React$useState[0],
      setAlignKey = _React$useState[1];
  /**
   * iPad 交互
   * 1. 分栏中间的点 常显
   * 2. 分栏中间的插入按钮和拖拽杆，点击后一起显示
   */


  var _React$useState2 = React.useState(-1),
      activeIndex = _React$useState2[0],
      setActiveIndex = _React$useState2[1];

  var stateCellsRef = React.useRef();
  var refWidth = useWidth(ref);
  var propsCells = React.useMemo(function () {
    var colsWidth = table.data.colsWidth || [];
    var row = table.nodes[0];

    if (!TableRow.isTableRow(row)) {
      return [];
    }

    return row.nodes.reduce(function (ws, cell, index) {
      var width = colsWidth[index] || 100;
      ws.push({
        key: cell.key,
        width: width
      });
      return ws;
    }, []);
  }, [table, refWidth]);

  var _React$useState3 = React.useState(false),
      isHover = _React$useState3[0],
      setIsHover = _React$useState3[1];

  var hasFocus = isFocused(controller, table);
  var handleDraggingChange = React.useCallback(function (dragging) {
    isDragging.current = dragging;
    onDragChange && onDragChange(dragging, controller);

    if (dragging) {
      var _ref$current;

      parentRect.current = (_ref$current = ref.current) == null ? void 0 : _ref$current.getBoundingClientRect();
      controller.command(Commands.moveToFocus).command(Commands.blur);
    } else if (stateCellsRef.current) {
      writeToData(stateCellsRef.current, controller);
      controller.command(Commands.focus);
    }

    setAlignKey('');
    forceRender();
  }, [controller, onDragChange]);
  React.useEffect(function () {
    var row = table.nodes[0];

    if (!TableRow.isTableRow(row)) {
      return;
    }

    if (row && row.nodes.length <= 0) {
      controller.run('onAction', cleanUpColumns());
    }
  }, [controller, table]);
  React.useEffect(function () {
    var _ref$current2;

    if (!ref.current) {
      return;
    }

    parentRect.current = (_ref$current2 = ref.current) == null ? void 0 : _ref$current2.getBoundingClientRect();
    var totalWidth = parentRect.current.width - (propsCells.length - 1) * COLUMN_SPACE;
    stateCellsRef.current = correctWidths(propsCells, totalWidth);
    forceRender();
  }, [propsCells]);
  var handleDragging = React.useCallback(function (cellKey, clientX) {
    if (!parentRect.current || !stateCellsRef.current) {
      return;
    }

    var offsetX = Math.round(clientX - parentRect.current.left - CURSOR_SIZE);
    var items = stateCellsRef.current;
    var totalWidth = parentRect.current.width - (items.length - 1) * COLUMN_SPACE;

    var _moveWidths = moveWidths({
      offsetX: offsetX,
      key: cellKey,
      items: items,
      totalWidth: totalWidth,
      rectWidth: parentRect.current.width
    }),
        newItems = _moveWidths.items,
        isAligned = _moveWidths.isAligned;

    stateCellsRef.current = newItems;
    setAlignKey(isAligned ? cellKey : '');
    forceRender();
  }, []);
  var dragging = isDragging.current || false;
  var cells = dragging ? stateCellsRef.current : propsCells;
  var providerConfigs = React.useMemo(function () {
    return {
      cells: cells,
      alignKey: alignKey,
      isDragging: dragging,
      handleDragging: handleDragging,
      handleDraggingChange: handleDraggingChange
    };
  }, [cells, handleDragging, handleDraggingChange, dragging, alignKey]);
  var renderTopBar = Boolean((isHover || hasFocus || IS_IPAD) && !controller.readOnly && IS_PC_OR_IPAD && !dragging);
  var handleMouseEnter = React.useCallback(function () {
    setIsHover(true);
  }, [setIsHover]);
  var handleMousseLeave = React.useCallback(function () {
    setIsHover(false);
  }, [setIsHover]);

  if (!(cells != null && cells.length)) {
    return null;
  }

  return /*#__PURE__*/_createElement(Wrapper, _extends({}, attributes, {
    "data-columns": true,
    "data-columns-key": table.key,
    "data-cangjie-key": table.key,
    ref: ref,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMousseLeave
  }), /*#__PURE__*/_createElement(IpadActiveBarProvider, {
    value: [activeIndex, setActiveIndex]
  }, renderTopBar && !!TopBar && /*#__PURE__*/_createElement(TopBar, {
    items: cells,
    configs: configs
  }), /*#__PURE__*/_createElement(ColumnsProvider, {
    value: providerConfigs
  }, children)));
}
//# sourceMappingURL=Table.js.map