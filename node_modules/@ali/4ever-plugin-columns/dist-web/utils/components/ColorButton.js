import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { Dropdown, ColorPanel } from '@ali/we-design';
import { DropdownAnimation } from '@ali/we-util';
import { useScrollableContent } from '@ali/4ever-cangjie';
import { IconButton } from '@ali/we-toolbar';
import { PaletteNormal } from '@ali/we-icon';
import { setCellData } from "../actions";
var DEFAULTS = {
  color: '',
  border: '',
  bgcolor: ''
};
var PaddingHolder = /*#__PURE__*/styled.div(["display:", ";opacity:", ";flex-direction:row;padding:0;position:absolute;z-index:200;top:3px;right:3px;"], function (props) {
  return props.showInnerToolbar ? 'flex' : 'none';
}, function (props) {
  return props.visibile ? '1' : '0';
});
var Wrapper = /*#__PURE__*/styled.div(["padding:", ";border-radius:4px;transition:background-color 250ms;background-color:", ";"], function (_ref) {
  var bgcolor = _ref.bgcolor;
  return bgcolor === 'white' ? '0' : '1px';
}, function (_ref2) {
  var bgcolor = _ref2.bgcolor;
  return bgcolor;
});
var ToolbarWrapper = /*#__PURE__*/styled.div(["cursor:pointer;border-radius:4px;transition:background-color 250ms;background-color:rgba(126,134,142,0.15);&:hover{background-color:rgba(126,134,142,0.12);}& div .icon-button{cursor:pointer;}"]);
var ColorPanelWrapper = /*#__PURE__*/styled.div(["background:white;padding:8px;border-radius:4px;"]);

var blockEvent = function blockEvent(event) {
  event.stopPropagation();
  event.preventDefault();
};

var colorToWhite = function colorToWhite(color) {
  return (color || 'white').replace('transparent', 'white');
};

function NewPanel(_ref3) {
  var controller = _ref3.controller,
      node = _ref3.node;
  var _node$data = node.data,
      color = _node$data.color,
      bgcolor = _node$data.fill,
      border = _node$data.border;

  var handleChange = function handleChange(key) {
    return function (value) {
      var _data;

      var data = (_data = {}, _data[key] = value, _data);
      controller.run('onCangjieBlur');
      controller.run('onAction', setCellData({
        node: node,
        data: data
      }));
    };
  };

  return /*#__PURE__*/_createElement(ColorPanelWrapper, {
    onMouseDown: blockEvent,
    onClick: blockEvent
  }, /*#__PURE__*/_createElement(ColorPanel, {
    color: color,
    defaultColor: DEFAULTS.color,
    onColorClick: handleChange('color'),
    borderColor: border,
    defaultBorderColor: DEFAULTS.border,
    onBorderColorClick: handleChange('border'),
    backgroundColor: bgcolor,
    defaultBackgroundColor: DEFAULTS.bgcolor,
    onBackgroundColorClick: handleChange('fill'),
    enableResetButton: true
  }));
}

var _ref4 = /*#__PURE__*/_createElement(IconButton, {
  icon: /*#__PURE__*/_createElement(PaletteNormal, null)
});

var Toolbar = function Toolbar(props) {
  var showInnerToolbar = props.showInnerToolbar,
      bgcolor = props.bgcolor,
      node = props.node;

  var _React$useState = React.useState(false),
      overlayVisible = _React$useState[0],
      setOverlayVisible = _React$useState[1];

  var _React$useState2 = React.useState(!showInnerToolbar),
      visible = _React$useState2[0],
      setVisible = _React$useState2[1];

  var scrollContent = useScrollableContent() || window.document.body; // 加 EmptyContainer 是因为 IconButton 未监听 onMouseEnter 等， trigger="hover" 无法生效

  React.useEffect(function () {
    if (!showInnerToolbar) {
      setOverlayVisible(false);
    }

    setVisible(showInnerToolbar);
  }, [showInnerToolbar]);
  return /*#__PURE__*/_createElement(PaddingHolder, {
    showInnerToolbar: showInnerToolbar,
    visibile: visible
  }, /*#__PURE__*/_createElement(Wrapper, {
    bgcolor: colorToWhite(bgcolor)
  }, /*#__PURE__*/_createElement(ToolbarWrapper, null, /*#__PURE__*/_createElement(Dropdown, {
    trigger: "click",
    overlay: /*#__PURE__*/_createElement(DropdownAnimation, {
      visible: overlayVisible
    }, /*#__PURE__*/_createElement(NewPanel, props)),
    overlayStyle: {
      backgroundColor: 'transparent',
      border: 'none'
    },
    onVisibleChange: function onVisibleChange(vi) {
      setOverlayVisible(vi);
    },
    placement: "topRight",
    visible: overlayVisible,
    getContainer: function getContainer() {
      return scrollContent;
    }
  }, _ref4))));
};

export default Toolbar;
//# sourceMappingURL=ColorButton.js.map