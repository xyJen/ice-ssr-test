import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable @typescript-eslint/no-shadow */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { throttle } from 'lodash-es';
import styled, { css } from 'styled-components';
import { theme } from '@ali/we-design';
import { environment, Block, useSelectingHots } from '@ali/4ever-cangjie';
import { hoverCSS, useHover } from '@ali/4ever-component';
import { useCellConfigs } from "../utils/ColumnsProvider";
import { COLUMN_SPACE, HORIZ_PADDING } from "../constants";
import { blockMarginStyleInContainer } from '@ali/4ever-utils';
import DragBar from "./DragBar";
import { deleteColumn } from "../actions";
import { isColumnsCell, isColumnsTable } from "../utils/isColumns";
var IS_MOBILE = environment.IS_MOBILE,
    IS_IPAD = environment.IS_IPAD;
var IS_PC_OR_IPAD = !IS_MOBILE || IS_IPAD;
var Wrapper = /*#__PURE__*/styled.div(["flex-grow:0;flex-shrink:0;box-sizing:border-box;position:relative;display:block;border-radius:8px;transition:background 300ms,border 300ms,padding 300ms;margin-bottom:0;&.draggable-highlight{background-color:", " !important;}", " ", ""], theme.commonBgHoverColor, function (p) {
  return p.isHover ? hoverCSS.borderBoxHoverCSS : '';
}, function (props) {
  return IS_PC_OR_IPAD ? '' : "\n      @media (max-width: 500px) {\n        width: initial !important;\n        margin-bottom: " + (props.isLastOne ? '0' : '8px') + ";\n      }\n    ";
});
var Content = /*#__PURE__*/styled.div(["display:flex;flex-direction:column;justify-content:center;align-items:stretch;height:100%;padding-top:7px;padding-bottom:7px;& > [data-cangjie-leaf-block]{max-width:100%;}", " span[data-cangjie-placeholder]:not(td span[data-cangjie-placeholder]){position:absolute !important;display:inline-block;width:calc(100% - 14px);height:calc(100% - 14px);& > span{width:100% !important;overflow:hidden;text-overflow:ellipsis !important;}}"], css(["", ""], blockMarginStyleInContainer));
var PercentTab = /*#__PURE__*/styled.div(["position:absolute;left:0;top:0;width:100%;height:100%;background:rgba(0,137,255,0.08);display:flex;align-items:center;justify-content:center;"]);
var PercentText = /*#__PURE__*/styled.div(["color:", ";font-size:14px;font-weight:bold;transition:background-color 250ms;background-color:", ";padding:0 10px;border-radius:4px;"], function (_ref) {
  var isAligned = _ref.isAligned;
  return isAligned ? 'rgba(0, 137, 255, 0.48)' : '#A9AEB3';
}, function (_ref2) {
  var isAligned = _ref2.isAligned;
  return isAligned ? 'rgba(231, 244, 255, 0.8)' : 'rgb(245, 246, 247, 0.8)';
});
var SelectedColumnLayer = /*#__PURE__*/styled.div(["position:absolute;width:100%;height:100%;background:rgba(0,106,254,0.12);pointer-events:none;border-radius:8px;display:", ";"], function (_ref3) {
  var isSelectWholeTable = _ref3.isSelectWholeTable;
  return isSelectWholeTable ? 'block' : 'none';
});

var vAlignToFlex = function vAlignToFlex(vAlign) {
  if (vAlign === 'top') {
    return 'flex-start';
  }

  if (vAlign === 'bottom') {
    return 'flex-end';
  }

  return 'center';
};

function isHidePadding(colors) {
  return colors.every(function (c) {
    return !c || c === 'transparent';
  });
}

export default function Column(_ref4) {
  var _cell$data2;

  var cell = _ref4.cell,
      controller = _ref4.controller,
      ColorButton = _ref4.ColorButton,
      children = _ref4.children,
      configs = _ref4.configs;

  var _React$useReducer = React.useReducer(function (c) {
    return !c;
  }, false),
      forceUpdate = _React$useReducer[1];

  var document = controller.value.document;
  var table = document.getClosest(cell.key, isColumnsTable);
  var isSelectWholeTable = controller.query('isSelectWholeTable', {
    node: table
  });
  var cellItem = useCellConfigs(cell.key);
  var ref = React.useRef(null);
  React.useEffect(function () {
    var nodes = cell.nodes || [];

    if (!nodes.length || nodes.every(function (n) {
      return !Block.isBlock(n);
    })) {
      controller.run('onAction', deleteColumn({
        key: cell.key
      }));
    }
  }, [cell, controller]);

  var _React$useState = React.useState(false),
      showInnerToolbar = _React$useState[0],
      setShowInnerToolbar = _React$useState[1];

  var updateInnerToolbar = React.useCallback(throttle(function (event) {
    var target = event.target;

    if (!(target instanceof HTMLElement)) {
      return;
    }

    var panel = target.closest('[data-color-select-panel]');
    var showIt = !panel || panel === ref.current;

    if (showInnerToolbar !== showIt) {
      setShowInnerToolbar(showIt);
    }
  }, 100, {
    trailing: true
  }), [showInnerToolbar]);
  var handleHideInnerToolbar = React.useCallback(function () {
    updateInnerToolbar.cancel();
    setShowInnerToolbar(false);
  }, [updateInnerToolbar]);
  var enableBorderHighlight = React.useMemo(function () {
    return controller.query('enableBorderHighlight');
  }, []);

  var _useHover = useHover(enableBorderHighlight, {
    onMouseLeave: handleHideInnerToolbar
  }),
      isHover = _useHover[0],
      hoverHandlers = _useHover[1];

  var handleMouseMove = React.useCallback(function (event) {
    if (!IS_PC_OR_IPAD) {
      return;
    }

    event.persist(); // TODO

    updateInnerToolbar(event);
  }, [updateInnerToolbar]); // TODO: 暴露全局的 keydown，不要每个组件自己注册一遍

  React.useEffect(function () {
    window.document.addEventListener('keydown', handleHideInnerToolbar);
    return function () {
      window.document.removeEventListener('keydown', handleHideInnerToolbar);
    };
  }, [controller, handleHideInnerToolbar]); // fix: 选中整栏, 其他栏没有重渲

  var onSelectingHots = React.useCallback(function (hots) {
    var isSelectWholeTable = controller.query('isSelectWholeTable', {
      node: table
    });

    if (!isSelectWholeTable) {
      return;
    }

    var hot = hots.find(function (hot) {
      var hotNodeKey = hot.node.key;

      if (isColumnsCell(document, hotNodeKey) && hotNodeKey === cell.key) {
        return hot;
      } else {
        var maybeCell = document.getClosest(hotNodeKey, function (_ref5) {
          var key = _ref5.key;
          return isColumnsCell(document, key);
        });

        if (maybeCell && maybeCell.key === cell.key) {
          return hot;
        }
      }

      return false;
    });

    if (hot) {
      forceUpdate();
    }
  }, [controller, cell, table, document]);
  useSelectingHots(controller, onSelectingHots);

  if (!cellItem) {
    return /*#__PURE__*/_createElement(React.Fragment, null, children);
  }

  var index = cellItem.index,
      percent = cellItem.percent,
      percentAligned = cellItem.percentAligned,
      isDragging = cellItem.isDragging,
      count = cellItem.count,
      handleDragging = cellItem.handleDragging,
      handleDraggingChange = cellItem.handleDraggingChange;
  var widthStr = "calc((100% - " + COLUMN_SPACE * (count - 1) + "px) * " + percent + ")";
  var _cell$data = cell.data,
      fill = _cell$data.fill,
      vAlign = _cell$data.vAlign,
      border = _cell$data.border;
  var pLeft = isHidePadding([fill, border]) ? 0 : HORIZ_PADDING;
  var pRight = isHidePadding([fill, border]) ? 0 : HORIZ_PADDING;
  var background = fill || 'transparent';
  var style = {
    width: widthStr,
    background: background,
    border: "1px solid " + (border || background)
  };
  var contentStyle = {
    justifyContent: vAlignToFlex(vAlign),
    paddingLeft: pLeft + "px",
    paddingRight: pRight + "px"
  };
  var percentText = Math.round(percent * 100) + "%";
  var disableInnerButton = controller.query('hasHoverToolbar', 'columns');
  var ExtraAboveComponent = configs == null ? void 0 : configs.getExtraAboveComponent == null ? void 0 : configs.getExtraAboveComponent(cell, controller);
  var extraAboveComponentStyle;

  if (ExtraAboveComponent) {
    extraAboveComponentStyle = {
      width: widthStr
    };
    style.width = '100%';
  }

  ExtraAboveComponent = ExtraAboveComponent || React.Fragment;
  return /*#__PURE__*/_createElement(React.Fragment, null, index !== 0 && /*#__PURE__*/_createElement(DragBar, {
    cellKey: cell.key,
    isAligned: isDragging,
    readOnly: controller.readOnly,
    isEnabled: IS_PC_OR_IPAD && !controller.readOnly,
    onDragging: handleDragging,
    onDraggingChange: handleDraggingChange,
    index: index
  }), /*#__PURE__*/_createElement(ExtraAboveComponent, {
    controller: controller,
    node: cell,
    style: extraAboveComponentStyle,
    isLastOne: index === count - 1
  }, /*#__PURE__*/_createElement(Wrapper, _extends({
    style: style,
    ref: ref,
    "data-column": true,
    isLastOne: index === count - 1,
    "data-container-block": true,
    "data-color-select-panel": true
  }, hoverHandlers, {
    onMouseMove: handleMouseMove,
    "data-block-uuid": (_cell$data2 = cell.data) == null ? void 0 : _cell$data2.uuid,
    "data-cangjie-key": cell.key,
    "data-hover-box": "borderBox",
    isHover: isHover && controller.value.isFocused
  }), /*#__PURE__*/_createElement(SelectedColumnLayer, {
    isSelectWholeTable: isSelectWholeTable
  }), /*#__PURE__*/_createElement(Content, {
    style: contentStyle
  }, children), isDragging && /*#__PURE__*/_createElement(PercentTab, null, /*#__PURE__*/_createElement(PercentText, {
    isAligned: percentAligned
  }, percentText)), !disableInnerButton && !controller.readOnly && !!ColorButton && /*#__PURE__*/_createElement(ColorButton, {
    controller: controller,
    bgcolor: background,
    node: cell,
    showInnerToolbar: showInnerToolbar
  }))));
}
//# sourceMappingURL=Column.js.map