{"version":3,"sources":["../../../../src/utils/hooks/renderNodeEdit.tsx"],"names":["React","Table","TableRow","TableCell","TableView","TopBar","Column","ColorButton","isColumnsTable","isColumnsCell","isColumnsRow","createRenderNode","configs","onDragChange","TYPE","controller","next","node","children","attributes","isDisabled","document","value","key"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAC5B,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,yBAA3C;AAEA,OAAOC,SAAP;AACA,OAAOC,MAAP;AACA,OAAOC,MAAP;AACA,OAAOC,WAAP;AAEA,SAASC,cAAT,EAAyBC,aAAzB,EAAwCC,YAAxC;AAEA,eAAe,SAASC,gBAAT,CACbC,OADa,EAEbC,YAFa,EAGb;AAAA;;AACA,2BACGZ,KAAK,CAACa,IADT,IACgB,gBAEZC,UAFY,EAGZC,IAHY,EAIT;AAAA,QAHDC,IAGC,QAHDA,IAGC;AAAA,QAHKC,QAGL,QAHKA,QAGL;AAAA,QAHeC,UAGf,QAHeA,UAGf;;AACH,QAAIP,OAAO,QAAP,IAAAA,OAAO,CAAEQ,UAAT,IAAuBR,OAAO,CAACQ,UAAR,EAA3B,EAAiD;AAC/C,aAAOJ,IAAI,EAAX;AACD;;AACD,QAAIR,cAAc,CAACS,IAAD,CAAlB,EAA0B;AACxB,0BACE,eAAC,SAAD;AACE,QAAA,UAAU,EAAEF,UADd;AAEE,QAAA,OAAO,EAAEH,OAFX;AAGE,QAAA,KAAK,EAAEK,IAHT;AAIE,QAAA,YAAY,EAAEJ,YAJhB;AAKE,QAAA,UAAU,EAAEM,UALd;AAME,QAAA,MAAM,EAAEd;AANV,SAQGa,QAAQ,EARX,CADF;AAYD;;AACD,WAAOF,IAAI,EAAX;AACD,GAxBH,QAyBGd,QAAQ,CAACY,IAzBZ,IAyBmB,iBAEfC,UAFe,EAGfC,IAHe,EAIZ;AAAA,QAHDC,IAGC,SAHDA,IAGC;AAAA,QAHKC,QAGL,SAHKA,QAGL;;AACH,QAAIN,OAAO,QAAP,IAAAA,OAAO,CAAEQ,UAAT,IAAuBR,OAAO,CAACQ,UAAR,EAA3B,EAAiD;AAC/C,aAAOJ,IAAI,EAAX;AACD;;AAHE,QAIKK,QAJL,GAIkBN,UAAU,CAACO,KAJ7B,CAIKD,QAJL;AAAA,QAKKE,GALL,GAKaN,IALb,CAKKM,GALL;;AAMH,QAAIb,YAAY,CAACW,QAAD,EAAWE,GAAX,CAAhB,EAAiC;AAC/B,aAAOL,QAAQ,EAAf;AACD;;AACD,WAAOF,IAAI,EAAX;AACD,GAvCH,QAwCGb,SAAS,CAACW,IAxCb,IAwCoB,iBAEhBC,UAFgB,EAGhBC,IAHgB,EAIb;AAAA,QAHDC,IAGC,SAHDA,IAGC;AAAA,QAHKC,QAGL,SAHKA,QAGL;;AACH,QAAIN,OAAO,QAAP,IAAAA,OAAO,CAAEQ,UAAT,IAAuBR,OAAO,CAACQ,UAAR,EAA3B,EAAiD;AAC/C,aAAOJ,IAAI,EAAX;AACD;;AAHE,QAIKK,QAJL,GAIkBN,UAAU,CAACO,KAJ7B,CAIKD,QAJL;AAAA,QAKKE,GALL,GAKaN,IALb,CAKKM,GALL;;AAMH,QAAId,aAAa,CAACY,QAAD,EAAWE,GAAX,CAAjB,EAAkC;AAChC,0BACE,eAAC,MAAD;AAAQ,QAAA,UAAU,EAAER,UAApB;AAAgC,QAAA,IAAI,EAAEE,IAAtC;AAAyD,QAAA,OAAO,EAAEL,OAAlE;AAA2E,QAAA,WAAW,EAAEL;AAAxF,SACGW,QAAQ,EADX,CADF;AAKD;;AACD,WAAOF,IAAI,EAAX;AACD,GA1DH;AA4DD","sourcesContent":["import * as React from 'react';\nimport { Controller, RenderNodeProps } from '@ali/4ever-cangjie';\nimport { Table, TableRow, TableCell } from '@ali/4ever-plugin-table';\n\nimport TableView from '../components/Table';\nimport TopBar from '../components/TopBar';\nimport Column from '../components/Column';\nimport ColorButton from '../components/ColorButton';\nimport { ColumnsConfigs, OnDragChange } from '../types';\nimport { isColumnsTable, isColumnsCell, isColumnsRow } from '../utils/isColumns';\n\nexport default function createRenderNode(\n  configs?: ColumnsConfigs,\n  onDragChange?: OnDragChange,\n) {\n  return {\n    [Table.TYPE]: (\n      { node, children, attributes }: RenderNodeProps,\n      controller: Controller,\n      next: any,\n    ) => {\n      if (configs?.isDisabled && configs.isDisabled()) {\n        return next();\n      }\n      if (isColumnsTable(node)) {\n        return (\n          <TableView\n            controller={controller}\n            configs={configs}\n            table={node as Table}\n            onDragChange={onDragChange}\n            attributes={attributes}\n            TopBar={TopBar}\n          >\n            {children()}\n          </TableView>\n        );\n      }\n      return next();\n    },\n    [TableRow.TYPE]: (\n      { node, children }: RenderNodeProps,\n      controller: Controller,\n      next: any,\n    ) => {\n      if (configs?.isDisabled && configs.isDisabled()) {\n        return next();\n      }\n      const { document } = controller.value;\n      const { key } = node;\n      if (isColumnsRow(document, key)) {\n        return children();\n      }\n      return next();\n    },\n    [TableCell.TYPE]: (\n      { node, children }: RenderNodeProps,\n      controller: Controller,\n      next: any,\n    ) => {\n      if (configs?.isDisabled && configs.isDisabled()) {\n        return next();\n      }\n      const { document } = controller.value;\n      const { key } = node;\n      if (isColumnsCell(document, key)) {\n        return (\n          <Column controller={controller} cell={node as TableCell} configs={configs} ColorButton={ColorButton}>\n            {children()}\n          </Column>\n        );\n      }\n      return next();\n    },\n  };\n}\n"],"file":"renderNodeEdit.js"}