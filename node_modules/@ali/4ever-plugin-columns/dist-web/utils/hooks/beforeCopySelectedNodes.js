import { Table, TableRow } from '@ali/4ever-plugin-table';
var DEFAULT_WIDTH = 650;

function createColumns(cells) {
  var tableRow = TableRow.create({
    nodes: cells
  });
  var size = cells.length;
  var colsWidth = new Array(size).fill(Math.round(DEFAULT_WIDTH / size));
  var table = Table.create({
    nodes: [tableRow],
    data: {
      sr: true,
      colsWidth: colsWidth
    }
  });
  return table;
}

var beforeCopySelectedNodes = function beforeCopySelectedNodes(selectedNodes, controller, next) {
  var newNodes = [];
  var length = selectedNodes.length;
  var document = controller.value.document;
  var prevColumnsRow = null;
  var columnsRowNodes = null;

  for (var i = 0; i < length; i++) {
    if (controller.query('isColumnsChild', selectedNodes[i])) {
      if (!columnsRowNodes) {
        prevColumnsRow = document.getParent(selectedNodes[i].key);
        columnsRowNodes = [selectedNodes[i]];
      } else {
        var _prevColumnsRow;

        var curColumnsRow = document.getParent(selectedNodes[i].key);

        if ((curColumnsRow == null ? void 0 : curColumnsRow.key) === ((_prevColumnsRow = prevColumnsRow) == null ? void 0 : _prevColumnsRow.key)) {
          columnsRowNodes.push(selectedNodes[i]);
        } else {
          var columns = createColumns(columnsRowNodes);
          newNodes.push(columns);
          prevColumnsRow = document.getParent(selectedNodes[i].key);
          columnsRowNodes = [selectedNodes[i]];
        }
      }
    } else {
      if (columnsRowNodes) {
        var _columns = createColumns(columnsRowNodes);

        newNodes.push(_columns);
        prevColumnsRow = null;
        columnsRowNodes = null;
      }

      newNodes.push(selectedNodes[i]);
    }
  }

  if (columnsRowNodes) {
    var _columns2 = createColumns(columnsRowNodes);

    newNodes.push(_columns2);
    prevColumnsRow = null;
    columnsRowNodes = null;
  }

  return newNodes;
};

export default beforeCopySelectedNodes;
//# sourceMappingURL=beforeCopySelectedNodes.js.map