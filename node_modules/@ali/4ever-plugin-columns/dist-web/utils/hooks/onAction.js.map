{"version":3,"sources":["../../../../src/utils/hooks/onAction.ts"],"names":["isEmptyParagraph","clearAloneTables","mergeColumns","insertColumns","deleteColumn","removeInvalidCells","ACTION_INERT_COLUMNS","ACTION_INERT_COL","ACTION_DELETE_COLUMN","ACTION_CLEANUP_COLUMN","ACTION_SET_CELL_DATA","ACTION_REMOVE_INVALID_CELLS","isColumnsCell","createOnAction","configs","onAction","action","controller","next","isDisabled","type","payload","targetKey","offset","rowOffset","keys","isCopy","node","data","command","key","dragFragment","dropHolder","dropPosition","fragment","map","b","result","document","value","parentKey","parentNode","getNode","nodes","length","isLeft","isInline"],"mappings":"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","sourcesContent":["import { Action, Controller } from '@ali/4ever-cangjie';\nimport { isEmptyParagraph } from '@ali/4ever-utils';\nimport { TableCell } from '@ali/4ever-plugin-table';\n\nimport {\n  ColumnsConfigs,\n  InsertColumnsParams,\n  InsertColParams,\n  SetCellDataParams,\n  DeleteColumnsParams,\n} from '../types';\n\nimport clearAloneTables from '../commands/clearAloneTables';\nimport mergeColumns from '../commands/mergeColumns';\nimport insertColumns from '../commands/insertColumns';\nimport deleteColumn from '../commands/deleteColumn';\nimport removeInvalidCells from '../commands/removeInvalidCells';\nimport {\n  ACTION_INERT_COLUMNS,\n  ACTION_INERT_COL,\n  ACTION_DELETE_COLUMN,\n  ACTION_CLEANUP_COLUMN,\n  ACTION_SET_CELL_DATA,\n  ACTION_REMOVE_INVALID_CELLS,\n} from '../actions/index';\nimport { isColumnsCell } from '../utils/isColumns';\n\nexport default function createOnAction(configs?: ColumnsConfigs) {\n  return function onAction(action: Action, controller: Controller, next) {\n    if (configs?.isDisabled && configs.isDisabled()) {\n      return next();\n    }\n    const { type, payload } = action;\n    if (type === ACTION_INERT_COLUMNS) {\n      return insertColumns(controller, payload as InsertColumnsParams);\n    }\n    if (type === ACTION_INERT_COL) {\n      const { targetKey, offset } = payload as InsertColParams;\n      return mergeColumns(controller, {\n        targetKey,\n        rowOffset: offset,\n        keys: [],\n        isCopy: false,\n      });\n    }\n    if (type === ACTION_DELETE_COLUMN) {\n      return deleteColumn(controller, payload as DeleteColumnsParams);\n    }\n    if (type === ACTION_CLEANUP_COLUMN) {\n      return clearAloneTables(controller);\n    }\n    if (type === ACTION_REMOVE_INVALID_CELLS) {\n      return removeInvalidCells(controller);\n    }\n    if (type === ACTION_SET_CELL_DATA) {\n      const { node, data } = payload as SetCellDataParams;\n      return controller.command('setColumnsItemData', node.key, data);\n    }\n    if (\n      type === 'DROP_FRAGMENT' &&\n      payload?.dragFragment &&\n      payload?.dropHolder\n    ) {\n      const { dragFragment, dropHolder } = payload;\n      const { type } = dragFragment;\n      const { key: targetKey, dropPosition, isCopy } = dropHolder;\n      const keys = type === 0 ? dragFragment.fragment.map((b) => b.key) : [dragFragment.fragment.key];\n\n      if (dropPosition === 0 || dropPosition === 1) {\n        const result = next();\n\n        // 若分栏的某个栏有且仅有一个段落，当这个段落被拖拽走后删除这个栏\n        const { document } = controller.value;\n        const parentKey = dragFragment.fragment[0]?.parentKey;\n        if (isColumnsCell(document, parentKey)) {\n          const parentNode = document.getNode(parentKey) as TableCell;\n          if (parentNode.nodes.length === 1 && isEmptyParagraph(parentNode.nodes[0])) {\n            deleteColumn(controller, { key: parentNode.key});\n          }\n        }\n\n        clearAloneTables(controller);\n        return result;\n      }\n\n      const isLeft = dropPosition === 2;\n      mergeColumns(controller, {\n        keys,\n        targetKey,\n        rowOffset: isLeft ? 0 : 1,\n        isCopy,\n        isInline: type === 1,\n      });\n      return controller;\n    }\n    return next();\n  };\n}\n"],"file":"onAction.js"}