import { isEmptyParagraph } from '@ali/4ever-utils';
import clearAloneTables from "../commands/clearAloneTables";
import mergeColumns from "../commands/mergeColumns";
import insertColumns from "../commands/insertColumns";
import deleteColumn from "../commands/deleteColumn";
import removeInvalidCells from "../commands/removeInvalidCells";
import { ACTION_INERT_COLUMNS, ACTION_INERT_COL, ACTION_DELETE_COLUMN, ACTION_CLEANUP_COLUMN, ACTION_SET_CELL_DATA, ACTION_REMOVE_INVALID_CELLS } from "../actions/index";
import { isColumnsCell } from "../utils/isColumns";
export default function createOnAction(configs) {
  return function onAction(action, controller, next) {
    if (configs != null && configs.isDisabled && configs.isDisabled()) {
      return next();
    }

    var type = action.type,
        payload = action.payload;

    if (type === ACTION_INERT_COLUMNS) {
      return insertColumns(controller, payload);
    }

    if (type === ACTION_INERT_COL) {
      var _ref = payload,
          targetKey = _ref.targetKey,
          offset = _ref.offset;
      return mergeColumns(controller, {
        targetKey: targetKey,
        rowOffset: offset,
        keys: [],
        isCopy: false
      });
    }

    if (type === ACTION_DELETE_COLUMN) {
      return deleteColumn(controller, payload);
    }

    if (type === ACTION_CLEANUP_COLUMN) {
      return clearAloneTables(controller);
    }

    if (type === ACTION_REMOVE_INVALID_CELLS) {
      return removeInvalidCells(controller);
    }

    if (type === ACTION_SET_CELL_DATA) {
      var _ref2 = payload,
          node = _ref2.node,
          data = _ref2.data;
      return controller.command('setColumnsItemData', node.key, data);
    }

    if (type === 'DROP_FRAGMENT' && payload != null && payload.dragFragment && payload != null && payload.dropHolder) {
      var dragFragment = payload.dragFragment,
          dropHolder = payload.dropHolder;
      var _type = dragFragment.type;
      var _targetKey = dropHolder.key,
          dropPosition = dropHolder.dropPosition,
          isCopy = dropHolder.isCopy;
      var keys = _type === 0 ? dragFragment.fragment.map(function (b) {
        return b.key;
      }) : [dragFragment.fragment.key];

      if (dropPosition === 0 || dropPosition === 1) {
        var _dragFragment$fragmen;

        var result = next(); // 若分栏的某个栏有且仅有一个段落，当这个段落被拖拽走后删除这个栏

        var document = controller.value.document;
        var parentKey = (_dragFragment$fragmen = dragFragment.fragment[0]) == null ? void 0 : _dragFragment$fragmen.parentKey;

        if (isColumnsCell(document, parentKey)) {
          var parentNode = document.getNode(parentKey);

          if (parentNode.nodes.length === 1 && isEmptyParagraph(parentNode.nodes[0])) {
            deleteColumn(controller, {
              key: parentNode.key
            });
          }
        }

        clearAloneTables(controller);
        return result;
      }

      var isLeft = dropPosition === 2;
      mergeColumns(controller, {
        keys: keys,
        targetKey: _targetKey,
        rowOffset: isLeft ? 0 : 1,
        isCopy: isCopy,
        isInline: _type === 1
      });
      return controller;
    }

    return next();
  };
}
//# sourceMappingURL=onAction.js.map