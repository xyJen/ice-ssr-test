{"version":3,"sources":["../../../../src/utils/commands/insertColumns.ts"],"names":["Commands","Selection","Queries","Block","Text","Table","TableRow","TableCell","Paragraph","isEmptyParagraph","DEAFULT_VALIGN","SIMPLE_HIGHLIGHTS","DEFAULT_WIDTH","canNodeHasColumnsSibling","node","isBlock","isTableRow","isTableCell","insertColumns","controller","params","value","document","selection","focusKey","focus","key","targetBlock","getClosest","targetPath","getPath","length","size","text","blocks","Array","fill","map","_","index","create","nodes","replace","trim","cells","block","data","vAlign","tableRow","colsWidth","Math","round","table","sr","targetIndex","pop","command","insertNodeByPath","anchor","query","pointAtStartOfNode","newSelection","select","removeNodeByKey"],"mappings":"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","sourcesContent":["import {\n  Controller,\n  Commands,\n  Selection,\n  Queries,\n  Block,\n  Text,\n} from '@ali/4ever-cangjie';\nimport { Table, TableRow, TableCell } from '@ali/4ever-plugin-table';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport { isEmptyParagraph } from '@ali/4ever-utils';\nimport { DEAFULT_VALIGN, SIMPLE_HIGHLIGHTS } from '../constants';\nimport { InsertColumnsParams } from '../types';\n\nconst DEFAULT_WIDTH = 650;\n\nconst canNodeHasColumnsSibling = (node: any) => {\n  if (!Block.isBlock(node)) {\n    return false;\n  }\n  if (TableRow.isTableRow(node) || TableCell.isTableCell(node)) {\n    return false;\n  }\n  return true;\n};\n\nexport default function insertColumns(\n  controller: Controller,\n  params: InsertColumnsParams,\n): Controller {\n  const { document, selection } = controller.value;\n  const { key: focusKey } = selection.focus;\n  const targetBlock = document.getClosest(\n    focusKey,\n    canNodeHasColumnsSibling,\n  ) as Block | undefined;\n  const targetPath = targetBlock && document.getPath(targetBlock.key);\n  if (!targetPath || !targetPath.length) {\n    return controller;\n  }\n\n  const { size, text } = params;\n  const blocks = new Array(size).fill(null).map((_, index) => {\n    return Paragraph.create({\n      nodes: [Text.create(text.replace('%', ` ${index + 1} `).trim())],\n    });\n  });\n  const cells = blocks.map((block, index) => {\n    return TableCell.create({\n      nodes: [block],\n      data: {\n        fill: SIMPLE_HIGHLIGHTS[index % SIMPLE_HIGHLIGHTS.length],\n        vAlign: DEAFULT_VALIGN,\n      },\n    });\n  });\n\n  const tableRow = TableRow.create({ nodes: cells });\n  const colsWidth = new Array(size).fill(Math.round(DEFAULT_WIDTH / size));\n  const table = Table.create({\n    nodes: [tableRow],\n    data: { sr: true, colsWidth },\n  });\n\n  const targetIndex = targetPath.pop()!;\n  controller.command(\n    Commands.insertNodeByPath,\n    targetPath,\n    targetIndex + 1,\n    table,\n  );\n\n  const anchor = controller.query(\n    Queries.pointAtStartOfNode,\n    cells[0].nodes[0],\n  );\n  const newSelection = Selection.create({ anchor, focus: anchor });\n  controller.command(Commands.select, newSelection).command(Commands.focus);\n  if (isEmptyParagraph(targetBlock)) {\n    controller.command(Commands.removeNodeByKey, targetBlock.key);\n  }\n  return controller;\n}\n"],"file":"insertColumns.js"}