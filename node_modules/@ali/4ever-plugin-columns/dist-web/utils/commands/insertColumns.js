import { Commands, Selection, Queries, Block, Text } from '@ali/4ever-cangjie';
import { Table, TableRow, TableCell } from '@ali/4ever-plugin-table';
import { Paragraph } from '@ali/4ever-plugin-paragraph';
import { isEmptyParagraph } from '@ali/4ever-utils';
import { DEAFULT_VALIGN, SIMPLE_HIGHLIGHTS } from "../constants";
var DEFAULT_WIDTH = 650;

var canNodeHasColumnsSibling = function canNodeHasColumnsSibling(node) {
  if (!Block.isBlock(node)) {
    return false;
  }

  if (TableRow.isTableRow(node) || TableCell.isTableCell(node)) {
    return false;
  }

  return true;
};

export default function insertColumns(controller, params) {
  var _controller$value = controller.value,
      document = _controller$value.document,
      selection = _controller$value.selection;
  var focusKey = selection.focus.key;
  var targetBlock = document.getClosest(focusKey, canNodeHasColumnsSibling);
  var targetPath = targetBlock && document.getPath(targetBlock.key);

  if (!targetPath || !targetPath.length) {
    return controller;
  }

  var size = params.size,
      text = params.text;
  var blocks = new Array(size).fill(null).map(function (_, index) {
    return Paragraph.create({
      nodes: [Text.create(text.replace('%', " " + (index + 1) + " ").trim())]
    });
  });
  var cells = blocks.map(function (block, index) {
    return TableCell.create({
      nodes: [block],
      data: {
        fill: SIMPLE_HIGHLIGHTS[index % SIMPLE_HIGHLIGHTS.length],
        vAlign: DEAFULT_VALIGN
      }
    });
  });
  var tableRow = TableRow.create({
    nodes: cells
  });
  var colsWidth = new Array(size).fill(Math.round(DEFAULT_WIDTH / size));
  var table = Table.create({
    nodes: [tableRow],
    data: {
      sr: true,
      colsWidth: colsWidth
    }
  });
  var targetIndex = targetPath.pop();
  controller.command(Commands.insertNodeByPath, targetPath, targetIndex + 1, table);
  var anchor = controller.query(Queries.pointAtStartOfNode, cells[0].nodes[0]);
  var newSelection = Selection.create({
    anchor: anchor,
    focus: anchor
  });
  controller.command(Commands.select, newSelection).command(Commands.focus);

  if (isEmptyParagraph(targetBlock)) {
    controller.command(Commands.removeNodeByKey, targetBlock.key);
  }

  return controller;
}
//# sourceMappingURL=insertColumns.js.map