{"version":3,"sources":["../../../../src/utils/commands/removeInvalidCells.ts"],"names":["Commands","Table","TableCell","removeInvalidCells","controller","document","value","aloneTable","nodes","find","n","isTable","data","sr","some","c","isTableCell","row","keys","reduce","arr","node","push","key","withoutNormalizing","forEach","k","command","removeNodeByKey"],"mappings":"AAAA,SAASA,QAAT,QAA2C,oBAA3C;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,yBAAjC;AAEA,eAAe,SAASC,kBAAT,CAA4BC,UAA5B,EAAgE;AAAA,MACrEC,QADqE,GACxDD,UAAU,CAACE,KAD6C,CACrED,QADqE;AAE7E,MAAME,UAAU,GAAGF,QAAQ,CAACG,KAAT,CAAeC,IAAf,EACjB;AACA,YAACC,CAAD;AAAA;;AAAA,WACET,KAAK,CAACU,OAAN,CAAcD,CAAd,KACAA,CAAC,CAACE,IAAF,CAAOC,EADP,kBAEAH,CAAC,CAACF,KAAF,CAAQ,CAAR,CAFA,wCAEA,UAAYA,KAFZ,qBAEA,gBAAmBM,IAAnB,CAAwB,UAACC,CAAD;AAAA,aAAO,CAACb,SAAS,CAACc,WAAV,CAAsBD,CAAtB,CAAR;AAAA,KAAxB,CAFA,CADF;AAAA,GAFiB,CAAnB;;AAOA,MAAI,CAACR,UAAL,EAAiB;AACf,WAAOH,UAAP;AACD;;AACD,MAAMa,GAAG,GAAGV,UAAU,CAACC,KAAX,CAAiB,CAAjB,CAAZ;AACA,MAAMU,IAAI,GAAGD,GAAG,CAACT,KAAJ,CAAUW,MAAV,CAA2B,UAACC,GAAD,EAAMC,IAAN,EAAqB;AAC3D,QAAI,CAACnB,SAAS,CAACc,WAAV,CAAsBK,IAAtB,CAAL,EAAkC;AAChCD,MAAAA,GAAG,CAACE,IAAJ,CAASD,IAAI,CAACE,GAAd;AACD;;AACD,WAAOH,GAAP;AACD,GALY,EAKV,EALU,CAAb;AAMAhB,EAAAA,UAAU,CAACoB,kBAAX,CAA8B,YAAM;AAClCN,IAAAA,IAAI,CAACO,OAAL,CAAa,UAACC,CAAD,EAAO;AAClBtB,MAAAA,UAAU,CAACuB,OAAX,CAAmB3B,QAAQ,CAAC4B,eAA5B,EAA6CF,CAA7C;AACD,KAFD;AAGD,GAJD;AAKA,SAAOvB,kBAAkB,CAACC,UAAD,CAAzB;AACD","sourcesContent":["import { Commands, Node, Controller } from '@ali/4ever-cangjie';\nimport { Table, TableCell } from '@ali/4ever-plugin-table';\n\nexport default function removeInvalidCells(controller: Controller): Controller {\n  const { document } = controller.value;\n  const aloneTable = document.nodes.find(\n    // try to find invalid cells (row.nodes.some)\n    (n) =>\n      Table.isTable(n) &&\n      n.data.sr &&\n      n.nodes[0]?.nodes?.some((c) => !TableCell.isTableCell(c)),\n  ) as Table | undefined;\n  if (!aloneTable) {\n    return controller;\n  }\n  const row = aloneTable.nodes[0];\n  const keys = row.nodes.reduce<string[]>((arr, node: Node) => {\n    if (!TableCell.isTableCell(node)) {\n      arr.push(node.key);\n    }\n    return arr;\n  }, []);\n  controller.withoutNormalizing(() => {\n    keys.forEach((k) => {\n      controller.command(Commands.removeNodeByKey, k);\n    });\n  });\n  return removeInvalidCells(controller);\n}\n"],"file":"removeInvalidCells.js"}