import _extends from "@babel/runtime/helpers/extends";
import { Commands } from '@ali/4ever-cangjie';
import { isColumnsTable } from "../utils/isColumns";
import clearAloneTables, { isBadTable } from "./clearAloneTables";
export default function deleteColumn(controller, _ref) {
  var key = _ref.key;
  var document = controller.value.document;
  var targetColumn = document.getNode(key);

  if (targetColumn) {
    controller.command(Commands.removeNodeByKey, key);
    var targetRow = document.getParent(key);
    var targetTable = document.getParent((targetRow == null ? void 0 : targetRow.key) || ''); // 删除栏后修正 colsWidth

    if (targetRow && targetTable) {
      var removedIndex = targetRow.nodes.findIndex(function (node) {
        return node.key === key;
      });
      var colsWidth = [].concat(targetTable == null ? void 0 : targetTable.data.colsWidth);
      var willBeAssignedWidth = colsWidth.splice(removedIndex, 1)[0];
      var deltaWidth = willBeAssignedWidth / colsWidth.length;
      var newColsWidth = colsWidth.map(function (width) {
        return width + deltaWidth;
      });
      controller.command(Commands.setNodeByKey, targetTable == null ? void 0 : targetTable.key, {
        data: _extends({}, targetTable == null ? void 0 : targetTable.data, {
          colsWidth: newColsWidth
        })
      });
    } // 当不存在栏时，删除整个分栏


    var newDocument = controller.value.document;
    var newTargetTable = newDocument.getParent((targetRow == null ? void 0 : targetRow.key) || '');

    if (isColumnsTable(newTargetTable) && isBadTable(newTargetTable)) {
      controller.withoutNormalizing(function () {
        var tablePath = document.getPath(newTargetTable.key);
        controller.command(Commands.removeNodeByPath, tablePath);
      });
    }
  }

  return clearAloneTables(controller);
}
//# sourceMappingURL=deleteColumn.js.map