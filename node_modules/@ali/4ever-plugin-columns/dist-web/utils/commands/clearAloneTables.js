import { Commands } from '@ali/4ever-cangjie';
import { Table, TableRow, TableCell } from '@ali/4ever-plugin-table'; // 在拖拽、normalize 等一些极限场景，table 结构被破坏
// 这里会进行二次校验，如果 table 下的数据不合法，就拉出来删除掉

var safeFindFirstCell = function safeFindFirstCell(table) {
  if (!table.nodes) {
    return undefined;
  }

  var row = table.nodes[0];

  if (!TableRow.isTableRow(row) || !row.nodes) {
    return undefined;
  }

  var cell = row.nodes[0];

  if (!TableCell.isTableCell(cell) || !cell.nodes) {
    return undefined;
  }

  return cell;
};

var safeFindFirstRow = function safeFindFirstRow(table) {
  if (!table.nodes) {
    return undefined;
  }

  var row = table.nodes[0];

  if (!TableRow.isTableRow(row) || !row.nodes) {
    return undefined;
  }

  return row;
};

export var isBadTable = function isBadTable(table) {
  var firstRow = safeFindFirstRow(table);
  var firstCell = safeFindFirstCell(table);

  if (!firstRow || !firstCell) {
    return true;
  } // badCellNodesUndefined


  if (!firstCell.nodes) {
    return true;
  } // badCellNodesEmpty


  if (firstCell.nodes.length === 0) {
    return true;
  }

  return false;
};
export default function clearAloneTables(controller) {
  var document = controller.value.document;
  var aloneTableIndex = document.nodes.findIndex(function (n) {
    return Table.isTable(n) && n.data.sr && isBadTable(n);
  });

  if (aloneTableIndex < 0) {
    return controller;
  }

  var table = document.nodes[aloneTableIndex];
  controller.withoutNormalizing(function () {
    var tablePath = document.getPath(table.key); // delete the table

    controller.command(Commands.removeNodeByPath, tablePath);
  });
  return clearAloneTables(controller);
}
//# sourceMappingURL=clearAloneTables.js.map