{"version":3,"sources":["../../../../src/utils/commands/mergeColumns.ts"],"names":["Commands","Text","Selection","Queries","Inline","domUtils","constants","Table","TableRow","TableCell","Paragraph","DEAFULT_VALIGN","clearAloneTables","Selector","isColumnsTable","n","isTable","Boolean","data","sr","afterMerge","node","controller","anchor","query","pointAtStartOfNode","selection","create","focus","command","select","flattenNodes","nodes","newNodes","reduce","arr","isTableCell","concat","mergeColumns","params","document","value","keys","targetKey","rowOffset","isCopy","isInline","targetNode","getNode","docDomNode","findDOMNodeSafely","key","map","k","length","newParagraph","focusKey","path","getPath","push","withoutNormalizing","insertNodeByKey","some","getBoundingClientRect","parentWidth","width","parentTable","getClosest","firstNodeParentCell","getParent","srcColor","fill","defaultCellData","vAlign","targetCell","firstNode","fromJSON","toJSON","newData","newCell","newCells","unshift","tableRow","colsWidth","table","targetParent","nodeIndex","indexOf","srcNodes","firstSrcNode","moveNodeByKey","newCellPath","reverse","forEach","moveNodeByPath","insertNodeByPath","removeNodeByKey","parentRow","parentCell","index","Math","max","min","cellCount","widths","slice","Array","totalWidth","a","c","splice","fromIndex","old","colors","undefined","parentTablePath","setNodeByPath"],"mappings":"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","sourcesContent":["import {\n  Controller,\n  Commands,\n  Text,\n  Selection,\n  Queries,\n  Node,\n  Block,\n  Inline,\n  domUtils,\n  constants,\n} from '@ali/4ever-cangjie';\nimport { Table, TableRow, TableCell } from '@ali/4ever-plugin-table';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport { DEAFULT_VALIGN, SIMPLE_HIGHLIGHTS } from '../constants';\nimport { MergeColumnsParams } from '../types';\nimport clearAloneTables from './clearAloneTables';\n\nconst { Selector } = constants;\n\nconst isColumnsTable = (n) => {\n  return Table.isTable(n) && Boolean(n.data.sr);\n};\n\nfunction afterMerge(node: Node, controller: Controller) {\n  const anchor = controller.query(Queries.pointAtStartOfNode, node);\n  const selection = Selection.create({ anchor, focus: anchor });\n  controller.command(Commands.select, selection).command(Commands.focus);\n  return clearAloneTables(controller);\n}\n\n/**\n * 处理每一个 node，如果某一个 node 是 TableCell，就换成它的 children\n */\nfunction flattenNodes(nodes: Node[]) {\n  const newNodes = nodes.reduce<Node[]>((arr, node) => {\n    if (TableCell.isTableCell(node)) {\n      return arr.concat(...node.nodes);\n    }\n    return arr.concat(node);\n  }, []);\n  return newNodes as Block[];\n}\n\nexport default function mergeColumns(\n  controller: Controller,\n  params: MergeColumnsParams,\n): Controller {\n  let { document } = controller.value;\n  const { keys, targetKey, rowOffset, isCopy, isInline } = params;\n  // 目标 Node\n  const targetNode = document.getNode(targetKey);\n  const docDomNode = domUtils.findDOMNodeSafely(document.key);\n  const nodes = keys.map((k) => document.getNode(k)) as Node[];\n  if (!nodes.length) {\n    const newParagraph = Paragraph.create({ nodes: [Text.create()] });\n    const { key: focusKey } = controller.value.selection.focus;\n    const path = document.getPath(focusKey);\n    if (!path || !path.length) {\n      return controller;\n    }\n    nodes.push(newParagraph);\n    controller.withoutNormalizing(() => {\n      controller.command(\n        Commands.insertNodeByKey,\n        document.key,\n        path[0],\n        newParagraph,\n      );\n    });\n    ({ document } = controller.value);\n  }\n  if (!docDomNode || !targetNode || nodes.some((n) => !n)) {\n    return controller;\n  }\n\n  // 文档的宽度\n  const { width: parentWidth } = docDomNode.getBoundingClientRect();\n\n  let parentTable: Table | null = null;\n  if (isColumnsTable(targetNode)) {\n    parentTable = targetNode as Table;\n  } else {\n    parentTable = document.getClosest(\n      targetKey,\n      isColumnsTable,\n    ) as Table | null;\n  }\n\n  // 体验优化：如果拖动某个单元格（分栏）里面的元素，添加新的分栏，就优先把背景色也带着\n  const firstNodeParentCell = nodes[0] && document.getParent(nodes[0].key);\n  const srcColor = TableCell.isTableCell(firstNodeParentCell) && firstNodeParentCell.data.fill;\n\n  // case 1，没有 parentTable。需要创建一个新的 table\n  if (!parentTable) {\n    let defaultCellData: TableCell['data'] = { vAlign: DEAFULT_VALIGN };\n    if (srcColor) {\n      defaultCellData = { ...defaultCellData, fill: srcColor };\n    }\n    const targetCell = TableCell.create({\n      nodes: [],\n      data: { ...defaultCellData },\n    }) as TableCell;\n    const firstNode = !isInline ? nodes[0] : Paragraph.create({\n      nodes: [Inline.fromJSON(nodes[0].toJSON()) as Inline],\n    });\n    const newData = TableCell.isTableCell(firstNode)\n      ? { ...firstNode.data }\n      : { ...defaultCellData };\n    const newCell = TableCell.create({\n      nodes: [],\n      data: newData,\n    });\n    const newCells = [targetCell];\n    if (rowOffset === 0) {\n      newCells.unshift(newCell);\n    } else {\n      newCells.push(newCell);\n    }\n    const tableRow = TableRow.create({ nodes: newCells });\n    const colsWidth = [parentWidth / 2, parentWidth / 2];\n    const table = Table.create({\n      nodes: [tableRow],\n      data: { sr: true, colsWidth },\n    });\n    const targetParent = document.getParent(targetKey)!;\n    const nodeIndex = targetParent.nodes.indexOf(targetNode);\n    const srcNodes = flattenNodes(nodes);\n    const firstSrcNode = !isInline ? srcNodes[0] : firstNode as Block;\n    controller.withoutNormalizing(() => {\n      // 1. insert the table\n      controller\n        .command(Commands.insertNodeByKey, targetParent.key, nodeIndex, table)\n        // 2. wrap node into the target cell\n        .command(Commands.moveNodeByKey, targetNode.key, targetCell.key, 0);\n      const newCellPath = controller.value.document.getPath(newCell.key)!;\n      // 3. insert nodes info the new cell\n      if (!isInline) {\n        srcNodes.reverse().forEach(({ key }) => {\n          const path = controller.value.document.getPath(key)!;\n          controller.command(Commands.moveNodeByPath, path, newCellPath, 0);\n        });\n      } else {\n        controller.command(Commands.insertNodeByPath, newCellPath, 0, firstSrcNode);\n      }\n\n      // 4. clean up table cells\n      nodes.forEach((n) => {\n        if (TableCell.isTableCell(n) || isInline) {\n          const node = controller.value.document.getNode(n.key);\n          if (node) {\n            controller.command(Commands.removeNodeByKey, node.key);\n          }\n        }\n      });\n    });\n    return afterMerge(firstSrcNode, controller);\n  }\n\n  // case 2，已经有 parentTable 了。需要增加一个 Cell\n  const parentRow = parentTable.nodes[0];\n  const parentCell = TableCell.isTableCell(targetNode) ? targetNode : document.getClosest(targetKey, (n) =>\n    TableCell.isTableCell(n),\n  );\n  let index = 0;\n  if (parentCell) {\n    // @ts-ignore\n    index = parentRow.nodes.indexOf(parentCell);\n  }\n  if (parentTable === targetNode && rowOffset) {\n    index = parentRow.nodes.length - 1;\n  }\n  index += rowOffset;\n  index = Math.max(0, Math.min(index, parentRow.nodes.length));\n\n  const cellCount = parentRow.nodes.length;\n  const widths: number[] =\n    parentTable.data.colsWidth?.slice(0, cellCount) ||\n    new Array(cellCount).fill(parentWidth / cellCount);\n  let colsWidth = [...widths];\n  const totalWidth = colsWidth.reduce((a, c) => a + c, 0);\n  colsWidth.splice(index, 0, totalWidth / cellCount);\n\n  // 当前的列调整。这里需要移除之前的 colWidth\n  if (\n    !isCopy &&\n    TableCell.isTableCell(nodes[0]) &&\n    // @ts-ignore\n    parentRow.nodes.indexOf(nodes[0]) >= 0\n  ) {\n    // @ts-ignore\n    const fromIndex = parentRow.nodes.indexOf(nodes[0]);\n    colsWidth = [...widths];\n\n    // TO-DO： 1 -> 2.3 时候，有问题\n    const old = colsWidth.splice(fromIndex, 1)[0];\n    colsWidth.splice(index - rowOffset, 0, old);\n  }\n\n  const colors = [\n    srcColor,\n    parentRow.nodes[index - 1]?.data?.fill,\n    parentRow.nodes[index]?.data?.fill,\n  ].map(c => (c === 'transparent' ? undefined : c));\n  const fill = colors[0] || colors[1] || colors[2];\n\n  const firstNode = !isInline ? nodes[0] : Paragraph.create({\n    nodes: [Inline.fromJSON(nodes[0].toJSON()) as Inline],\n  });\n  const newData = TableCell.isTableCell(firstNode)\n    ? { ...firstNode.data }\n    : { vAlign: DEAFULT_VALIGN, fill };\n  const newCell = TableCell.create({\n    nodes: [],\n    data: newData,\n  });\n  const srcNodes = flattenNodes(nodes);\n  const parentTablePath = document.getPath(parentTable.key)!;\n  const firstSrcNode = !isInline ? srcNodes[0] : firstNode as Block;\n  controller.withoutNormalizing(() => {\n    // 1. insert the new cell\n    controller.command(Commands.insertNodeByKey, parentRow.key, index, newCell);\n\n    // 2. set the table data colswith\n    controller.command(Commands.setNodeByPath, parentTablePath, {\n      data: { ...parentTable!.data, colsWidth: [...colsWidth] },\n    });\n\n    // 3. insert nodes into the new cell\n    const newCellPath = controller.value.document.getPath(newCell.key)!;\n    if (!isInline) {\n      srcNodes.reverse().forEach(({ key }) => {\n        const path = controller.value.document.getPath(key)!;\n        controller.command(Commands.moveNodeByPath, path, newCellPath, 0);\n      });\n    } else {\n      controller.command(Commands.insertNodeByPath, newCellPath, 0, firstSrcNode);\n    }\n\n    // 4. clean up table cells\n    nodes.forEach((n) => {\n      if (TableCell.isTableCell(n) || isInline) {\n        const node = controller.value.document.getNode(n.key);\n        if (node) {\n          controller.command(Commands.removeNodeByKey, node.key);\n        }\n      }\n    });\n  });\n  return afterMerge(firstSrcNode, controller);\n}\n"],"file":"mergeColumns.js"}