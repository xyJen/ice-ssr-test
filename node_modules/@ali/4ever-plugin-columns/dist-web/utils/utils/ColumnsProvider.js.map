{"version":3,"sources":["../../../../src/utils/utils/ColumnsProvider.ts"],"names":["React","COLUMN_SPACE","DEFAULT_SPLIT","MIN_WIDTH","STICK_WIDTH","context","createContext","cells","alignKey","isDragging","handleDragging","handleDraggingChange","ColumnsProvider","Provider","useCellConfigs","key","useContext","index","findIndex","w","item","width","totalWidth","reduce","a","percent","dragBarAligned","percentAligned","some","p","Math","abs","count","length","correctWidths","items","currentTotal","t","i","x","map","moveWidths","params","offsetX","rectWidth","prefPercents","currentItemOffset","prefOffsets","round","currentOffset","adjustedOffsetX","find","o","isAligned","offset","newItems","prevItem","newWidth","max","moved"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  COLUMN_SPACE,\n  DEFAULT_SPLIT,\n  MIN_WIDTH,\n  STICK_WIDTH,\n} from '../constants';\n\nexport type CellItem = {\n  key: string;\n  width: number;\n};\n\ntype ProviderConfigs = {\n  cells: CellItem[];\n  alignKey: string;\n  isDragging: boolean;\n  handleDragging: (cellKey: string, clientX: number) => void;\n  handleDraggingChange: (dragging: boolean) => void;\n};\n\nconst context = React.createContext<ProviderConfigs>({\n  cells: [],\n  alignKey: '',\n  isDragging: false,\n  handleDragging: () => {},\n  handleDraggingChange: () => {},\n});\n\nexport const ColumnsProvider = context.Provider;\n\nexport const useCellConfigs = (key: string) => {\n  const {\n    cells,\n    alignKey,\n    handleDragging,\n    handleDraggingChange,\n    isDragging,\n  } = React.useContext(context);\n  const index = cells.findIndex((w) => w.key === key);\n  const item = cells[index];\n  if (!item) {\n    return null;\n  }\n  const width = item?.width || 1;\n  const totalWidth = cells.reduce((a, w) => a + w.width, 0);\n  const percent = width / totalWidth;\n  return {\n    index,\n    isDragging,\n    dragBarAligned: alignKey === key,\n    percentAligned: DEFAULT_SPLIT.some(\n      (p) => Math.abs(totalWidth * p - width) <= 2,\n    ),\n    percent,\n    count: cells.length,\n    handleDragging,\n    handleDraggingChange,\n  };\n};\n\nexport function correctWidths(items: CellItem[], totalWidth: number) {\n  const currentTotal = items.reduce((t, i) => t + i.width, 0);\n  const x = totalWidth / currentTotal;\n  return items.map((i) => ({ ...i, width: i.width * x }));\n}\n\ntype MoveResult = {\n  items: CellItem[];\n  isAligned?: boolean;\n};\n\ntype MoveParams = {\n  offsetX: number;\n  key: string;\n  items: CellItem[];\n  totalWidth: number;\n  rectWidth: number;\n  prefPercents?: number[];\n};\n\nexport function moveWidths(params: MoveParams): MoveResult {\n  const {\n    offsetX,\n    key,\n    items,\n    totalWidth,\n    rectWidth,\n    prefPercents = DEFAULT_SPLIT,\n  } = params;\n  let index = items.findIndex((i) => i.key === key);\n  if (!items[index]) {\n    return { items };\n  }\n  // 前面 index 个，后面 length - index 个\n  // 左边界：index * (w + COLUMN_SPACE) - COLUMN_SPACE / 2\n  if (offsetX < index * (MIN_WIDTH + COLUMN_SPACE) - COLUMN_SPACE / 2) {\n    return { items };\n  }\n  // 右边界长度：[index, items.length) * (w + COLUMN_SPACE) - COLUMN_SPACE / 2\n  if (\n    offsetX >\n    rectWidth -\n      (items.length - index) * (MIN_WIDTH + COLUMN_SPACE) +\n      COLUMN_SPACE / 2\n  ) {\n    return { items };\n  }\n\n  // 这里可以移动了，移动后，不会导致其他的问题。\n  const currentItemOffset = items.reduce(\n    (t, item, i) => (i >= index - 1 ? t : t + item.width + COLUMN_SPACE),\n    0,\n  );\n  const prefOffsets = prefPercents.map((p) =>\n    Math.round(currentItemOffset + p * totalWidth + COLUMN_SPACE / 2),\n  );\n\n  // [0 - index) * (w + COLUMN_SPACE) - COLUMN_SPACE / 2\n  const currentOffset = Math.round(\n    items.reduce(\n      (t, item, i) => (i >= index ? t : t + item.width + COLUMN_SPACE),\n      0,\n    ) -\n      COLUMN_SPACE / 2,\n  );\n\n  const adjustedOffsetX =\n    prefOffsets.find((o) => Math.abs(o - offsetX) < STICK_WIDTH) || offsetX;\n  const isAligned = adjustedOffsetX !== offsetX;\n\n  let offset = Math.round(adjustedOffsetX - currentOffset);\n\n  if (Math.abs(offset) < 1) {\n    return { items, isAligned };\n  }\n\n  const newItems = [...items];\n  // 向右侧移动\n  if (offset >= 1) {\n    const prevItem = newItems[index - 1];\n    if (prevItem) {\n      newItems[index - 1] = { ...prevItem };\n      newItems[index - 1].width += offset;\n    }\n\n    while (offset >= 1 && newItems[index]) {\n      // 尝试缩小当前的宽度\n      const item = newItems[index];\n      const newWidth = Math.max(item.width - offset, MIN_WIDTH);\n      const moved = item.width - newWidth;\n      newItems[index] = { ...item };\n      newItems[index].width = newWidth;\n\n      index += 1;\n      offset -= moved;\n    }\n  }\n\n  // 向左侧移动\n  if (offset <= -1) {\n    newItems[index].width -= offset;\n    index -= 1;\n\n    while (offset <= -1 && newItems[index]) {\n      // 尝试缩小当前的宽度\n      const item = newItems[index];\n      const newWidth = Math.max(item.width + offset, MIN_WIDTH);\n      const moved = item.width - newWidth;\n      newItems[index] = { ...item };\n      newItems[index].width = newWidth;\n\n      index -= 1;\n      offset += moved;\n    }\n  }\n\n  return { items: newItems, isAligned };\n}\n"],"file":"ColumnsProvider.js"}