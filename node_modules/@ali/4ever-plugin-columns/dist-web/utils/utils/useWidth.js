import * as React from 'react';
import ResizeObserver from 'resize-observer-polyfill';
var TIMEOUT = 300;
/**
 * 在 ref 尺寸变动时，调用 updator
 */

export default function useWidth(ref) {
  var _React$useState = React.useState(0),
      stateWidth = _React$useState[0],
      setWidth = _React$useState[1];

  React.useEffect(function () {
    var node = ref.current;

    if (!node) {
      return undefined;
    }

    var _node$getBoundingClie = node.getBoundingClientRect(),
        width = _node$getBoundingClie.width;

    width = Math.round(width);
    var timer;

    var callback = function callback() {
      timer && window.clearTimeout(timer); // timeout 出于性能考虑，模拟 debounce 效果
      // 已添加清除逻辑

      timer = window.setTimeout(function () {
        var _node$getBoundingClie2 = node.getBoundingClientRect(),
            newWidth = _node$getBoundingClie2.width;

        newWidth = Math.round(newWidth);

        if (newWidth !== width) {
          width = newWidth;
          setWidth(width);
        }
      }, TIMEOUT);
    };

    var observer = new ResizeObserver(callback);
    observer.observe(node);
    return function () {
      timer && window.clearTimeout(timer);
      observer.unobserve(node);
    };
  }, [setWidth, ref]);
  return stateWidth;
}
//# sourceMappingURL=useWidth.js.map