{"version":3,"sources":["../../../../src/utils/utils/useWidth.ts"],"names":["React","ResizeObserver","TIMEOUT","useWidth","ref","useState","stateWidth","setWidth","useEffect","node","current","undefined","getBoundingClientRect","width","Math","round","timer","callback","window","clearTimeout","setTimeout","newWidth","observer","observe","unobserve"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA,IAAMC,OAAO,GAAG,GAAhB;AAEA;AACA;AACA;;AACA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAiD;AAAA,wBAC/BJ,KAAK,CAACK,QAAN,CAAe,CAAf,CAD+B;AAAA,MACvDC,UADuD;AAAA,MAC3CC,QAD2C;;AAE9DP,EAAAA,KAAK,CAACQ,SAAN,CAAgB,YAAM;AACpB,QAAMC,IAAI,GAAGL,GAAG,CAACM,OAAjB;;AACA,QAAI,CAACD,IAAL,EAAW;AACT,aAAOE,SAAP;AACD;;AAJmB,gCAKJF,IAAI,CAACG,qBAAL,EALI;AAAA,QAKdC,KALc,yBAKdA,KALc;;AAMpBA,IAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAR;AACA,QAAIG,KAAJ;;AACA,QAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBD,MAAAA,KAAK,IAAIE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAT,CADqB,CAErB;AACA;;AACAA,MAAAA,KAAK,GAAGE,MAAM,CAACE,UAAP,CAAkB,YAAM;AAAA,qCACJX,IAAI,CAACG,qBAAL,EADI;AAAA,YACjBS,QADiB,0BACxBR,KADwB;;AAE9BQ,QAAAA,QAAQ,GAAGP,IAAI,CAACC,KAAL,CAAWM,QAAX,CAAX;;AACA,YAAIA,QAAQ,KAAKR,KAAjB,EAAwB;AACtBA,UAAAA,KAAK,GAAGQ,QAAR;AACAd,UAAAA,QAAQ,CAACM,KAAD,CAAR;AACD;AACF,OAPO,EAOLX,OAPK,CAAR;AAQD,KAZD;;AAaA,QAAMoB,QAAQ,GAAG,IAAIrB,cAAJ,CAAmBgB,QAAnB,CAAjB;AACAK,IAAAA,QAAQ,CAACC,OAAT,CAAiBd,IAAjB;AACA,WAAO,YAAM;AACXO,MAAAA,KAAK,IAAIE,MAAM,CAACC,YAAP,CAAoBH,KAApB,CAAT;AACAM,MAAAA,QAAQ,CAACE,SAAT,CAAmBf,IAAnB;AACD,KAHD;AAID,GA3BD,EA2BG,CAACF,QAAD,EAAWH,GAAX,CA3BH;AA4BA,SAAOE,UAAP;AACD","sourcesContent":["import * as React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst TIMEOUT = 300;\n\n/**\n * 在 ref 尺寸变动时，调用 updator\n */\nexport default function useWidth(ref: React.RefObject<Element>) {\n  const [stateWidth, setWidth] = React.useState(0);\n  React.useEffect(() => {\n    const node = ref.current;\n    if (!node) {\n      return undefined;\n    }\n    let { width } = node.getBoundingClientRect();\n    width = Math.round(width);\n    let timer: any;\n    const callback = () => {\n      timer && window.clearTimeout(timer);\n      // timeout 出于性能考虑，模拟 debounce 效果\n      // 已添加清除逻辑\n      timer = window.setTimeout(() => {\n        let { width: newWidth } = node.getBoundingClientRect();\n        newWidth = Math.round(newWidth);\n        if (newWidth !== width) {\n          width = newWidth;\n          setWidth(width);\n        }\n      }, TIMEOUT);\n    };\n    const observer = new ResizeObserver(callback);\n    observer.observe(node);\n    return () => {\n      timer && window.clearTimeout(timer);\n      observer.unobserve(node);\n    };\n  }, [setWidth, ref]);\n  return stateWidth;\n}\n"],"file":"useWidth.js"}