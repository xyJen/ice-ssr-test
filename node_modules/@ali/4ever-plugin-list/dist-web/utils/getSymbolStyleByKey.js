import { environment, Mark } from '@ali/4ever-cangjie';
import { setStyleWithMark } from '@ali/4ever-plugin-marks';
import { isGradientColor, transferGradientColor } from '@ali/4ever-utils'; // 移动端不支持Arial字体，默认字体显示的项目符号过大，通过视觉对比确定缩小系数

var SYMBOL_SIZE_LOWER = 0.8;
export function convertMarkToSymbolStyle(mark) {
  var _mark$data$value, _mark$data$value2, _mark$data$value3, _ref;

  switch (mark.type) {
    case 'highlight':
      return {
        shd: mark.data.value
      };

    case 'fonts':
      return {
        fonts: mark.data.ascii
      };

    case 'bold':
      return {
        bold: (_mark$data$value = mark.data.value) != null ? _mark$data$value : true
      };

    case 'strike':
      return {
        strike: (_mark$data$value2 = mark.data.value) != null ? _mark$data$value2 : true
      };

    case 'italic':
      return {
        italic: (_mark$data$value3 = mark.data.value) != null ? _mark$data$value3 : true
      };

    case 'underline':
      return {};

    default:
      return _ref = {}, _ref[mark.type] = mark.data.value, _ref;
  }
}
export function getSymbolStyle(controller) {
  var _controller$value = controller.value,
      data = _controller$value.data,
      document = _controller$value.document;
  var listSelections = data.listSelections || [];

  if (listSelections.length > 0) {
    var _block$data, _block$data$list;

    var block = document.getNode(listSelections[0]); // @ts-ignore

    if (block != null && (_block$data = block.data) != null && (_block$data$list = _block$data.list) != null && _block$data$list.symbolStyle) {
      // @ts-ignore
      return block.data.list.symbolStyle;
    }
  }

  return null;
}
export function getSymbolStyleByKey(controller, key) {
  var symbolStyle = getSymbolStyle(controller);
  var result;

  if (symbolStyle && key) {
    result = symbolStyle[key];
  }

  return result;
}
export function convertSymbolStyle(symbolStyle, isOrdered) {
  var result = {};
  if (!symbolStyle) return result;
  var shouldDegradeGradient = symbolStyle.shd && symbolStyle.color && isGradientColor(symbolStyle.color);

  for (var styleName in symbolStyle) {
    if (symbolStyle[styleName]) {
      var markStyle = void 0;

      switch (styleName) {
        case 'fonts':
          markStyle = {
            type: styleName,
            data: {
              ascii: symbolStyle[styleName],
              hAnsi: symbolStyle[styleName],
              cs: symbolStyle[styleName],
              eastAsia: symbolStyle[styleName]
            }
          };
          break;

        case 'sz':
          markStyle = {
            type: styleName,
            data: {
              // 由于移动端无序列表符号过大，使用px按比例缩小一些
              value: (!isOrdered && environment.IS_MOBILE ? SYMBOL_SIZE_LOWER : 1) * (symbolStyle[styleName] || 11),
              szUnit: 'pt'
            }
          };
          break;

        case 'shd':
          // 通用的样式转换不识别这种不规范的数据格式，这里转换一下
          markStyle = {
            type: 'highlight',
            data: {
              value: symbolStyle[styleName]
            }
          };
          break;

        default:
          if (styleName === 'color' && shouldDegradeGradient) {
            markStyle = {
              type: 'color',
              data: {
                value: transferGradientColor(symbolStyle[styleName])[0]
              }
            };
          } else {
            markStyle = {
              type: styleName,
              data: {
                value: symbolStyle[styleName]
              }
            };
          }

          break;
      }

      setStyleWithMark(result, markStyle);
    }
  }

  return result;
}
export function parseSymbolMarks(symbolStyle, isOrdered) {
  if (!symbolStyle) {
    return [];
  }

  var marks = [];
  Object.keys(symbolStyle).forEach(function (styleName) {
    if (symbolStyle[styleName]) {
      switch (styleName) {
        case 'fonts':
          {
            marks.push(Mark.create({
              type: styleName,
              data: {
                ascii: symbolStyle[styleName],
                hAnsi: symbolStyle[styleName],
                cs: symbolStyle[styleName],
                eastAsia: symbolStyle[styleName]
              }
            }));
            break;
          }

        case 'sz':
          {
            marks.push(Mark.create({
              type: styleName,
              data: {
                // 由于移动端无序列表符号过大，使用px按比例缩小一些
                value: (!isOrdered && environment.IS_MOBILE ? SYMBOL_SIZE_LOWER : 1) * (symbolStyle[styleName] || 11),
                szUnit: 'pt'
              }
            }));
            break;
          }

        default:
          {
            marks.push(Mark.create({
              type: styleName,
              data: {
                value: symbolStyle[styleName]
              }
            }));
          }
      }
    }
  });
  return marks;
}
//# sourceMappingURL=getSymbolStyleByKey.js.map