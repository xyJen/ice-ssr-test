import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Block } from '@ali/4ever-cangjie';
import { TextMeasure, CJK_REG } from "../measure";
import { generateSymbol } from "../generateSymbol";
import { SYMBOL_DEFAULT_FONT, SYMBOL_DEFAULT_SIZE } from "../getSymbolRightSpace";
import { convertSymbolStyle } from "../getSymbolStyleByKey";
export default function ListSymbolWarmupWrapper(_ref) {
  var controller = _ref.controller,
      children = _ref.children;
  React.useMemo(function () {
    var document = controller.view;
    var batch = {};
    document.forEachDescendant(function (node) {
      if (!Block.isBlock(node)) {
        return;
      }

      var listConfig = node.data.list;

      if (!listConfig || listConfig.isTaskList) {
        return;
      }

      var _node$data = node.data,
          step = _node$data.step,
          _node$data$start = _node$data.start,
          start = _node$data$start === void 0 ? 1 : _node$data$start;
      var isOrdered = listConfig.isOrdered,
          _listConfig$level = listConfig.level,
          level = _listConfig$level === void 0 ? 0 : _listConfig$level,
          listStyle = listConfig.listStyle,
          listStyleType = listConfig.listStyleType,
          symbolStyle = listConfig.symbolStyle;
      var symbol = generateSymbol(level, Number(start), step, isOrdered, listStyleType, listStyle);
      var style = convertSymbolStyle(symbolStyle, isOrdered);

      for (var i = 0; i < symbol.length; i += 1) {
        var _char = CJK_REG.test(symbol[i]) ? 'ä¸­' : symbol[i];

        if (!batch[_char]) {
          batch[_char] = {};
        }

        var fontFamilies = batch[_char];
        var fontFamily = style.fontFamily || SYMBOL_DEFAULT_FONT;

        if (!fontFamilies[fontFamily]) {
          fontFamilies[fontFamily] = new Set();
        }

        var sizes = fontFamilies[fontFamily];
        sizes.add(String(style.fontSize || SYMBOL_DEFAULT_SIZE));
      }
    });
    TextMeasure.warmup(batch);
  }, []);
  return /*#__PURE__*/_createElement(React.Fragment, null, children);
}
//# sourceMappingURL=ListSymbolWarmupWrapper.js.map