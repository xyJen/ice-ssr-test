import _extends from "@babel/runtime/helpers/extends";
import React, { useMemo, useState, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { ListCheckBox } from "../component/checkbox";
import { getSymbolRightSpace } from "./getSymbolRightSpace";
import getStickerSymbol from "./getStickerSymbol";
import { STICKER_REG, SYMBOL_MAGIC_OFFSET_Y_MAP, SYMBOL_MAGIC_SIZE_MAP } from "./constant";
// TODO: import from Cangjie
var SELECTION_COLOR = 'rgba(1, 134, 251, 0.3)';
var ItemSymbolWrapper = /*#__PURE__*/styled.span(["display:inline-block;margin-right:", "px;white-space:nowrap;&.symbol-align-right{background-color:unset !important;position:relative;& .list-symbol{background-color:", ";position:absolute;right:0;bottom:-0.3em;line-height:1.54;transform:translateY(3px);}}&.isSelected .list-symbol-overlay{background:", ";}font-family:Arial", ";line-height:1.4;"], function (props) {
  return props.marginRight;
}, function (props) {
  return props.style.backgroundColor || 'unset';
}, SELECTION_COLOR, function (props) {
  if (props.isOrdered === undefined) return '';
  return props.isOrdered ? '' : '!important';
});
var Symbol = /*#__PURE__*/styled.span(["width:fit-content;line-height:initial;"]);
export var RenderStyledListItem = function RenderStyledListItem(props) {
  var children = props.children,
      hideSymbol = props.hideSymbol,
      isSelect = props.isSelect,
      listSymbol = props.listSymbol,
      onSelectSymbol = props.onSelectSymbol,
      _props$symbolAlign = props.symbolAlign,
      symbolAlign = _props$symbolAlign === void 0 ? 'left' : _props$symbolAlign,
      _props$symbolStyle = props.symbolStyle,
      symbolStyle = _props$symbolStyle === void 0 ? {} : _props$symbolStyle,
      taskListConfig = props.taskListConfig;

  var _useState = useState(false),
      symbolSelected = _useState[0],
      setSymbolSelected = _useState[1];

  var symbolRef = React.useRef(null);
  var isTaskList = taskListConfig == null ? void 0 : taskListConfig.isTaskList;
  var isOrdered = taskListConfig == null ? void 0 : taskListConfig.isOrdered;

  var onSelect = function onSelect() {
    if (!isTaskList && onSelectSymbol) {
      onSelectSymbol(!symbolSelected);
    }
  };

  var marginRight = useMemo(function () {
    return isTaskList ? 0 : getSymbolRightSpace(symbolAlign, String(listSymbol), symbolStyle);
  }, [isTaskList, listSymbol, symbolAlign, symbolStyle]);
  useEffect(function () {
    setSymbolSelected(!!isSelect);
  }, [isSelect]);
  var taskListBox;

  if (taskListConfig) {
    var isChecked = taskListConfig.isChecked,
        handleChange = taskListConfig.handleChange;
    taskListBox = isTaskList && /*#__PURE__*/_createElement(ListCheckBox, {
      checked: isChecked,
      onChange: handleChange
    });
  }

  var classNames = ["symbol-align-" + symbolAlign];

  if (symbolSelected) {
    classNames.push('isSelected');
  } // TODO: HACK 目前无序原点垂直不居中，后续@灯少替换新的 unicode 后这里可以去掉


  var symString = taskListBox || listSymbol;
  var symStyle = isTaskList ? {} : symbolStyle;

  var wrapperStyle = _extends({}, symStyle);

  if (SYMBOL_MAGIC_OFFSET_Y_MAP[symString]) {
    wrapperStyle.transform = "translateY(-" + SYMBOL_MAGIC_OFFSET_Y_MAP[symString] + "%)";
  }

  if (SYMBOL_MAGIC_SIZE_MAP[symString]) {
    wrapperStyle.fontSize = (parseInt(wrapperStyle.fontSize, 10) || 11) - SYMBOL_MAGIC_SIZE_MAP[symString] + "pt";

    if (SYMBOL_MAGIC_SIZE_MAP[symString] > 2) {
      wrapperStyle.transform = (wrapperStyle.transform || '') + " scale(0.8)";
    }
  } // const wrapperStyle = useMemo(() =>)


  var matchSticker = symString == null ? void 0 : symString.match == null ? void 0 : symString.match(STICKER_REG);
  var sym = matchSticker ? getStickerSymbol(matchSticker[1], symStyle.fontSize) : symString;
  var symbolOverlay = symbolSelected ? /*#__PURE__*/_createElement("span", {
    className: "list-symbol-overlay"
  }, sym) : sym;
  var symbolContent = symbolAlign === 'right' ? /*#__PURE__*/_createElement(Symbol, {
    "data-testid": "list-symbol",
    className: "list-symbol",
    style: symStyle
  }, symbolOverlay) : symbolOverlay;
  var itemSymbol = !hideSymbol && listSymbol !== 'undefined.' && (isTaskList ? taskListBox : /*#__PURE__*/_createElement(ItemSymbolWrapper, {
    ref: symbolRef,
    className: classNames.join(' '),
    isOrdered: isOrdered,
    marginRight: marginRight,
    style: wrapperStyle,
    onMouseDown: onSelect,
    "data-testid": "symbol-wrapper"
  }, symbolContent));
  return /*#__PURE__*/_createElement(React.Fragment, null, itemSymbol, children);
};
//# sourceMappingURL=renderStyledListItem.js.map