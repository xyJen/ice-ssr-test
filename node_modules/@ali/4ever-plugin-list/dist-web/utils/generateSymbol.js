import { mapping as all, DEFAULT_BULLET_LIST_ARRAY, DEFAULT_NUMBER_LIST_ARRAY } from "./listStyleMapping";
import { transformNumber } from "./transformNumber";
export var RELATIVE_LEVEL = [0, 1, 2];
var REG_DEC_DEC_DEC = /%\d(.%\d)+/;

var isContinuousDec = function isContinuousDec(listStyle) {
  // 处理导入没有 listStyleType 的 连续数字类型(如：2.1.1)的列表
  return (listStyle == null ? void 0 : listStyle.format) === 'decimal' && REG_DEC_DEC_DEC.test(listStyle.text);
};

var getListSymbolTuple = function getListSymbolTuple(isOrdered, relativeLevel, listStyle) {
  if (listStyle) {
    var format = listStyle.format,
        text = listStyle.text,
        align = listStyle.align;
    return [format, text, align];
  } else {
    var listTypeName = isOrdered ? DEFAULT_NUMBER_LIST_ARRAY[0] : DEFAULT_BULLET_LIST_ARRAY[0];
    return all[listTypeName][relativeLevel];
  }
};

export function generateSymbol(level, start, step, isOrdered, listStyleType, listStyle) {
  var remainder = level % 3; // 旧列表的level存在负数跟小数会导致all[listTypeName][relativeLevel]返回的是undefined，数组结构失败，所以用RELATIVE_LEVEL处理

  var relativeLevel = RELATIVE_LEVEL.includes(remainder) ? remainder : 0;
  var listSymbolTuple = getListSymbolTuple(isOrdered, relativeLevel, listStyle);
  var type = listSymbolTuple[0],
      pattern = listSymbolTuple[1];
  var listSymbol = pattern || ''; // process number symbol, if match %number pattern
  // TODO 暂时保留listStyleType字段，未来依赖上下文判断列表类型

  if (listStyleType === DEFAULT_NUMBER_LIST_ARRAY[2] || isContinuousDec(listStyle)) {
    return step + ".";
  } else if (RegExp(/%\d/).test(listSymbol)) {
    listSymbol = listSymbol.replace(/(%\d)/g, function () {
      return transformNumber(start, type);
    });
  }

  return listSymbol;
}
//# sourceMappingURL=generateSymbol.js.map