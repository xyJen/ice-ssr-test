{"version":3,"sources":["../../../src/utils/putListOrder.ts"],"names":["Injection","Block","Document","generateSymbol","isListNode","createListCountContext","itemCount","Map","getListOrderDataById","nodes","id","itemCountMap","results","forEach","n","isBlock","data","list","listId","lvl","level","listStart","start","isOrdered","Math","max","get","prevLevel","clearOrderCount","set","getListOrder","step","Array","fill","map","value","index","join","push","key","getSymbolByListOrder","listStyle","listStyleType","undefined","orderCount","largerThanCurrent","keys","tempOrder","listOrder","getListOrderData","controller","undividedList","injections","document","forEachDescendant","parent","getParent","itemCountMapKey","includes","type","val","injection","create","isSelected","find","i","isHotsContainList","hasHots","hots","some","hot","node","findDescendant","injectToNode","next","others","isDocument","createInjectToNode","listConfig"],"mappings":"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","sourcesContent":["import {\n  Node,\n  Controller,\n  Injection,\n  Block,\n  Data,\n  Document,\n} from '@ali/4ever-cangjie';\nimport { ListProperties } from './types';\nimport { generateSymbol } from './generateSymbol';\nimport { isListNode } from '@ali/4ever-utils';\n\nexport interface ListCountContext {\n  itemCount: Map<number, number>;\n  prevLevel?: number;\n}\n\ninterface ListData {\n  key: string;\n  data: {\n    start: number;\n    step: string;\n    listId: string;\n  };\n}\n\nexport const createListCountContext = (): ListCountContext => ({\n  itemCount: new Map<number, number>(),\n});\n\n/**\n * 根据列表 id 获取列表序号\n * @param root parent blocks\n * @param id 列表 id\n */\nexport const getListOrderDataById = (\n  nodes: Array<Node | null>,\n  id?: string,\n) => {\n  const itemCountMap = new Map<string, ListCountContext>();\n  const results: ListData[] = [];\n\n  nodes.forEach((n) => {\n    // 线上存在 listId 一样的列表但是类型不一样，需要做一下过滤，只对有序列表做计算\n    if (\n      !Block.isBlock(n) ||\n      !n.data.list ||\n      (!!id && n.data.list.listId !== id)\n    ) {\n      return;\n    }\n\n    const { listId, level: lvl, start: listStart, isOrdered } = n.data.list;\n    const level = Math.max(lvl, 0);\n    const { itemCount, prevLevel } =\n      itemCountMap.get(listId) || createListCountContext();\n\n    if (!isOrdered) {\n      clearOrderCount(level, itemCount, prevLevel);\n      itemCountMap.set(listId, { itemCount, prevLevel: level });\n      return;\n    }\n\n    // 如果有 节点有 start 字段，序号从指定 start 开始\n    if (typeof listStart === 'number') {\n      itemCount.set(level, listStart - 1);\n    }\n    const start = getListOrder(level, itemCount, prevLevel);\n    const step = Array(level + 1)\n      .fill(1)\n      .map((value, index) => itemCount.get(index) || value)\n      .join('.');\n    itemCountMap.set(listId, { itemCount, prevLevel: level });\n\n    results.push({\n      key: n.key,\n      data: { start, step, listId },\n    });\n  });\n\n  return results;\n};\n\nexport const getSymbolByListOrder = (\n  data: Data,\n  itemCountMap: Map<string, ListCountContext>,\n) => {\n  const { list } = data;\n\n  if (list && list.isOrdered) {\n    const {\n      listId = '',\n      level: lvl = 0,\n      isOrdered = true,\n      listStyle,\n      listStyleType,\n      start: listStart,\n    } = list as ListProperties;\n    const level = Math.max(lvl, 0);\n    const { itemCount, prevLevel } =\n      itemCountMap.get(listId) || createListCountContext();\n\n    // 如果有 节点有 start 字段，序号从指定 start 开始\n    if (typeof listStart === 'number') {\n      itemCount.set(level, listStart - 1);\n    }\n\n    const start = getListOrder(level, itemCount, prevLevel);\n    const step = Array(level + 1)\n      .fill(1)\n      .map((value, index) => itemCount.get(index) || value)\n      .join('.');\n    itemCountMap.set(listId, { itemCount, prevLevel: level });\n    return generateSymbol(\n      level,\n      start,\n      step,\n      isOrdered,\n      listStyleType,\n      listStyle,\n    );\n  }\n\n  return undefined;\n};\n\nconst clearOrderCount = (\n  level,\n  orderCount: Map<number, number>,\n  prevLevel?: number,\n) => {\n  const largerThanCurrent = !!prevLevel && prevLevel > level;\n  // 如果前一项 level 大于当前 level 就清空所有比当前大的计数\n  if (largerThanCurrent) {\n    for (const lvl of orderCount.keys()) {\n      if (lvl > level) {\n        orderCount.delete(lvl);\n      }\n    }\n  }\n};\n\nexport const getListOrder = (\n  level: number,\n  orderCount: Map<number, number>,\n  prevLevel?: number,\n) => {\n  const itemCount = orderCount.get(level);\n  const largerThanCurrent = !!prevLevel && prevLevel > level;\n  const tempOrder = largerThanCurrent ? 2 : 1;\n  // word 中第一项默认从 1 开始，但是如果前一项 level 大于当前 level 就从 2 开始\n  const listOrder =\n    typeof itemCount === 'undefined' ? tempOrder : itemCount + 1;\n\n  clearOrderCount(level, orderCount, prevLevel);\n\n  orderCount.set(level, listOrder);\n\n  return listOrder;\n};\n\n// 存在多个编辑器实例，则需要根据不同实例的列表做处理，map 是文档中所有列表的缓存。 key 是 listId\n\nexport const getListOrderData = (\n  controller: Controller,\n  undividedList: string[] = [],\n) => {\n  // 遍历中对列表项目计数的缓存 key: listId\n  const itemCountMap = new Map<string, ListCountContext>();\n  const results: Injection[] = [];\n  const { value } = controller;\n  const { injections, document } = value;\n  controller.value.document.forEachDescendant((n) => {\n    // 线上存在 listId 一样的列表但是类型不一样，需要做一下过滤\n    if (!Block.isBlock(n) || !n.data.list) {\n      return;\n    }\n    const parent = document.getParent(n.key);\n    const { listId, level: lvl, start: listStart, isOrdered } = n.data.list;\n    const level = Math.max(lvl, 0);\n    const itemCountMapKey =\n      listId +\n        (parent && !undividedList.includes(parent?.type) && parent?.key) || '';\n    const { itemCount, prevLevel } =\n      itemCountMap.get(itemCountMapKey) || createListCountContext();\n\n    // 无序列表仍要根据 level 清理。有序列表会出现跨无序连续的问题\n    // ● AAA              expect:  ● AAA\n    //   a. BBB                      a. BBB\n    // ● CCC       ->              ● CCC\n    //   b. DDD                      a. DDD\n    if (!isOrdered) {\n      clearOrderCount(level, itemCount, prevLevel);\n      itemCountMap.set(itemCountMapKey, { itemCount, prevLevel: level });\n      return;\n    }\n\n    // 如果有 节点有 start 字段，序号从指定 start 开始\n    if (typeof listStart === 'number') {\n      itemCount.set(level, listStart - 1);\n    }\n\n    const start = getListOrder(level, itemCount, prevLevel);\n    const step = Array(Math.max(level + 1, 0))\n      .fill(1)\n      .map((val, index) => itemCount.get(index) || val)\n      .join('.');\n    itemCountMap.set(itemCountMapKey, { itemCount, prevLevel: level });\n\n    const injection = Injection.create({\n      key: n.key,\n      data: {\n        start,\n        step,\n        listId,\n        isSelected: !!injections.find((i) => i.key === n.key)?.data.isSelected,\n      },\n    });\n\n    results.push(injection);\n  });\n\n  return results;\n};\n\nconst isHotsContainList = (controller: Controller) => {\n  return (\n    controller.hasHots() &&\n    controller.hots.hots.some(\n      (hot) => isListNode(hot.node) || !!hot.node.findDescendant(isListNode),\n    )\n  );\n};\n\nexport const injectToNode = (\n  node: Node,\n  controller: Controller,\n  next: () => Injection[],\n) => {\n  const others = next() || [];\n\n  // TODO: @灯少 更好的做法时，列表 `injectNode` 可以支持不从 Document 计算，当 node 为热区时，仅重算热区下的列表\n  if (Document.isDocument(node) || isHotsContainList(controller)) {\n    // 递归计算文档中所有的列表序号\n    const injections = getListOrderData(controller);\n    return [...others, ...injections];\n  }\n\n  return others;\n};\n\nexport const createInjectToNode = (listConfig) => {\n  const undividedList: string[] = listConfig.undividedList || [];\n  return (node: Node, controller: Controller, next: () => Injection[]) => {\n    const others = next() || [];\n\n    if (Document.isDocument(node) || isHotsContainList(controller)) {\n      // 递归计算文档中所有的列表序号\n      const injections = getListOrderData(controller, undividedList);\n      return [...others, ...injections];\n    }\n    return others;\n  };\n};\n"],"file":"putListOrder.js"}