import { DEFAULT_BULLET_LIST_ARRAY, DEFAULT_NUMBER_LIST_ARRAY } from "../utils";
export var LIST_TOGGLE_LIST = Symbol('LIST_TOGGLE_LIST');
export var LIST_TRANSFORM = Symbol('LIST_TRANSFORM');
export var LIST_REMOVE_LIST = Symbol('LIST_REMOVE_LIST');
export var LIST_SET_CHECK_STATUS = Symbol('LIST_SET_CHECK_STATUS');
export var LIST_PUT_LIST_ORDER = Symbol('LIST_PUT_LIST_ORDER');
export var LIST_SELECT_SYMBOL = Symbol('LIST_SELECT_SYMBOL');
export var CLEAR_RANGE_SELECTION = Symbol('CLEAR_RANGE_SELECTION');
export var SELECT_LIST_SELECTIONS = Symbol('SELECT_LIST_SELECTIONS');
export var CLEAR_LIST_SELECTIONS = Symbol('CLEAR_LIST_SELECTIONS');
export var RESTART_NUMBERING = Symbol('ACTION_RESTART_NUMBERING');
export var CONTINUE_NUMBERING = Symbol('ACTION_CONTINUE_NUMBERING');
export function toggleList(listType, styleType) {
  // TODO 全量后默认值移至mobileNativeToolbar/utils中
  var listStyleType;

  if (!styleType) {
    if (listType === 'olist') {
      listStyleType = DEFAULT_NUMBER_LIST_ARRAY[0];
    } else if (listType === 'ulist') {
      listStyleType = DEFAULT_BULLET_LIST_ARRAY[0];
    }
  } else {
    listStyleType = styleType;
  }

  return {
    type: LIST_TOGGLE_LIST,
    payload: {
      listType: listType,
      listStyleType: listStyleType
    }
  };
}
export function transformList(listType) {
  var listStyleType;

  if (listType === 'olist') {
    listStyleType = DEFAULT_NUMBER_LIST_ARRAY[0];
  } else if (listType === 'ulist') {
    listStyleType = DEFAULT_BULLET_LIST_ARRAY[0];
  }

  return {
    type: LIST_TRANSFORM,
    payload: {
      listType: listType,
      listStyleType: listStyleType
    }
  };
}
export function removeList() {
  return {
    type: LIST_REMOVE_LIST
  };
}
export function setCheckStatus(node, checked) {
  return {
    type: LIST_SET_CHECK_STATUS,
    payload: {
      node: node,
      checked: checked
    }
  };
}
export function selectSymbol(listSelections, isSelected) {
  return {
    type: LIST_SELECT_SYMBOL,
    payload: {
      listSelections: listSelections,
      isSelected: isSelected
    }
  };
}
export function clearRangeSelection(node) {
  return {
    type: CLEAR_RANGE_SELECTION,
    payload: {
      node: node
    }
  };
}
export function selectListSelections(listSelections) {
  return {
    type: SELECT_LIST_SELECTIONS,
    payload: {
      listSelections: listSelections
    }
  };
}
export function clearListSelections() {
  return {
    type: CLEAR_LIST_SELECTIONS
  };
}
export function restartNumbering() {
  return {
    type: RESTART_NUMBERING
  };
}
export function continueNumbering() {
  return {
    type: CONTINUE_NUMBERING
  };
}
/** @deprecated */

export var DEPRECATED_ACTIONS = {
  CONTINUE_NUMBERING: CONTINUE_NUMBERING,
  CLEAR_LIST_SELECTIONS: CLEAR_LIST_SELECTIONS,
  CLEAR_RANGE_SELECTION: CLEAR_RANGE_SELECTION,
  LIST_REMOVE_LIST: LIST_REMOVE_LIST,
  LIST_SET_CHECK_STATUS: LIST_SET_CHECK_STATUS,
  LIST_SELECT_SYMBOL: LIST_SELECT_SYMBOL,
  LIST_TOGGLE_LIST: LIST_TOGGLE_LIST,
  LIST_TRANSFORM: LIST_TRANSFORM,
  RESTART_NUMBERING: RESTART_NUMBERING,
  SELECT_LIST_SELECTIONS: SELECT_LIST_SELECTIONS,
  LIST_PUT_LIST_ORDER: LIST_PUT_LIST_ORDER,
  selectSymbol: selectSymbol,
  clearListSelections: clearListSelections,
  toggleList: toggleList,
  transformList: transformList,
  removeList: removeList,
  setCheckStatus: setCheckStatus,
  clearRangeSelection: clearRangeSelection,
  selectListSelections: selectListSelections,
  restartNumbering: restartNumbering,
  continueNumbering: continueNumbering
};
export var actions = {
  selectSymbol: selectSymbol,
  clearListSelections: clearListSelections,
  toggleList: toggleList,
  transformList: transformList,
  removeList: removeList,
  setCheckStatus: setCheckStatus,
  clearRangeSelection: clearRangeSelection,
  selectListSelections: selectListSelections,
  restartNumbering: restartNumbering,
  continueNumbering: continueNumbering
};
//# sourceMappingURL=actions.js.map