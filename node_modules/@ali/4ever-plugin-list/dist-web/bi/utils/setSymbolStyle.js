import _extends from "@babel/runtime/helpers/extends";

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { Commands, Block } from '@ali/4ever-cangjie';
import getCurrentItem from "./getCurrentItem";
import getWholeListItemSelected from "./getWholeListItemSelected";
import mergeListData from "./mergeListData";
import isList from "./isList";

var isHeadingStyle = function isHeadingStyle(symbolStyle) {
  return Boolean('sz' in symbolStyle && symbolStyle.bold !== undefined);
};

export default function setSymbolStyle(controller, symbolStyle) {
  var _listSelections;

  var _controller$value = controller.value,
      document = _controller$value.document,
      data = _controller$value.data,
      selection = _controller$value.selection;
  var wholeListItemSelected = getWholeListItemSelected(controller.value);
  var isHeadingAction = isHeadingStyle(symbolStyle);
  var isCollapsed = selection.isCollapsed;
  var listSelections = [].concat(data.listSelections || []);

  if (isHeadingAction) {
    var currentItems = getCurrentItem(controller);
    currentItems.forEach(function (item) {
      if (item && isList(item)) {
        listSelections.push(item.key);
      }
    });
  } else if (((_listSelections = listSelections) == null ? void 0 : _listSelections.length) === 0 && wholeListItemSelected.length > 0) {
    listSelections = wholeListItemSelected.map(function (block) {
      return block.key;
    });
  }

  var firstSymbolStyle = {};

  if (!listSelections) {
    return;
  }

  for (var _iterator = _createForOfIteratorHelperLoose(listSelections.entries()), _step; !(_step = _iterator()).done;) {
    var _node$data, _node$data$list;

    var _step$value = _step.value,
        index = _step$value[0],
        key = _step$value[1];
    var node = document.getNode(key);

    if (!Block.isBlock(node)) {
      continue;
    }

    var listSymbolStyle = _extends({}, node == null ? void 0 : (_node$data = node.data) == null ? void 0 : (_node$data$list = _node$data.list) == null ? void 0 : _node$data$list.symbolStyle);

    var newStyle = {};

    var _loop = function _loop(styleName) {
      if (['bold', 'italic', 'strike'].includes(styleName)) {
        if (isCollapsed) {
          // 项目符号选中设置样式，自动继承第一个 symbolStyle
          newStyle[styleName] = firstSymbolStyle[styleName] || !listSymbolStyle[styleName];
        } else {
          var firstText = document.getTextsAtRange(selection)[0];
          var markValue = firstText == null ? void 0 : firstText.getMarks().find(function (mark) {
            return mark.type === styleName;
          });
          newStyle[styleName] = Boolean(markValue);
        }

        if (!index) {
          firstSymbolStyle[styleName] = newStyle[styleName];
        }
      } else if (symbolStyle[styleName] === undefined) {
        // 允许显示声明 undefined 以清除指定属性
        delete listSymbolStyle[styleName];
      }
    };

    for (var styleName in symbolStyle) {
      _loop(styleName);
    }

    if (isHeadingAction) {
      newStyle.bold = symbolStyle.bold;
    }

    var newData = mergeListData(node.data, {
      symbolStyle: _extends({}, listSymbolStyle, symbolStyle, newStyle)
    });

    if (JSON.stringify(symbolStyle) === '{}') {
      delete newData.data.list.symbolStyle;
    }

    controller.command(Commands.setNodeByKey, node.key, newData);
  }
}
//# sourceMappingURL=setSymbolStyle.js.map