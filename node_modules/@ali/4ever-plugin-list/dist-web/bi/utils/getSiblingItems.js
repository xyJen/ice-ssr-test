import { isInSameList } from "../../utils/isInSameList";
/**
 * @description 当光标在 钉钉文档2c 的列表项内容时,它的兄弟项就是 2a、2b、2c、2d
 *
 *   1. 钉钉文档1
 *      a. 钉钉文档1a
 *      b. 钉钉文档1b
 *         i. 钉钉文档1bi
 *        ii. 钉钉文档1bii
 *       iii. 钉钉文档1biii
 *      c. 钉钉文档1c
 *      d. 钉钉文档1d
 *   2. 钉钉文档2
 *     a. 钉钉文档2a
 *     b. 钉钉文档2b
 *         i. 钉钉文档2bi
 *        ii. 钉钉文档2bii
 *       iii. 钉钉文档2biii
 *     c. 钉钉文档2c
 *     d. 钉钉文档2d
 *   3. 钉钉文档3
 *
 * */

export default (function (value, currrentItem) {
  var key = currrentItem.key;
  var currentList = currrentItem.data.list;
  if (!key || !currentList) return [currrentItem];
  var listId = currentList.listId,
      targetLevel = currentList.level;
  var document = value.document;
  var root = document.getParent(key) || document;
  var nodesLength = (root == null ? void 0 : root.nodes.length) || 0;
  var prevLevel = 0;
  var siblingsMap = {};
  var findTarget = false;

  for (var i = 0; i < nodesLength; i++) {
    var node = root == null ? void 0 : root.nodes[i];
    var listConfig = node.data.list; // 当前节点不属于目标列表项，跳过遍历下个节点

    if (!isInSameList(listConfig, listId)) {
      continue;
    } // 初始化当前level在map中的初始值


    if (!siblingsMap[listConfig.level]) {
      siblingsMap[listConfig.level] = [];
    } // 已经找到目标节点, 当遍历到比目标节点level低的节点时，说明目标节点的兄弟节点已找完，结束遍历


    if (findTarget && listConfig.level < targetLevel) {
      break;
    } // 当前level比上一列表项低时，说明step重新从1开始了，清空map中上一层级数据


    if (listConfig.level < prevLevel) {
      siblingsMap[prevLevel] = [];
    }

    if (node.key === key) {
      findTarget = true;
    }

    prevLevel = listConfig.level;
    siblingsMap[listConfig.level].push(node);
  }

  return siblingsMap[targetLevel] || [];
});
//# sourceMappingURL=getSiblingItems.js.map