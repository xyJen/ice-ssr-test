import _extends from "@babel/runtime/helpers/extends";
import { Commands } from '@ali/4ever-cangjie';
import { findNextSz } from '@ali/4ever-plugin-sz';
import getWholeListItemSelected from "./getWholeListItemSelected";
import mergeListData from "./mergeListData";
export default function adjustSymbolSz(controller, isIncreasingSz) {
  var _listSelections;

  var _controller$value = controller.value,
      document = _controller$value.document,
      data = _controller$value.data;
  var wholeListItemSelected = getWholeListItemSelected(controller.value);
  var _data$listSelections = data.listSelections,
      listSelections = _data$listSelections === void 0 ? [] : _data$listSelections;

  if (((_listSelections = listSelections) == null ? void 0 : _listSelections.length) === 0 && wholeListItemSelected.length > 0) {
    listSelections = wholeListItemSelected.map(function (block) {
      return block.key;
    });
  }

  listSelections && listSelections.forEach(function (key) {
    var _node$data, _node$data$list;

    var node = document.getNode(key);

    var listSymbolStyle = _extends({}, node == null ? void 0 : (_node$data = node.data) == null ? void 0 : (_node$data$list = _node$data.list) == null ? void 0 : _node$data$list.symbolStyle);

    var _listSymbolStyle$sz = listSymbolStyle.sz,
        sz = _listSymbolStyle$sz === void 0 ? controller.query('getDefaultSz', key) : _listSymbolStyle$sz;
    var direction = isIncreasingSz ? 'right' : 'left';
    var newSz = findNextSz(sz, direction);
    var newStyle = {
      sz: newSz
    };
    var newData = mergeListData(node.data, {
      symbolStyle: _extends({}, listSymbolStyle, newStyle)
    });
    controller.command(Commands.setNodeByKey, node.key, newData);
  });
}
//# sourceMappingURL=adjustSymbolSz.js.map