{"version":3,"sources":["../../../../src/bi/utils/getListStyle.ts"],"names":["STICKER_CODE_REG","mapping","DEFAULT_BULLET_LIST_ARRAY","DEFAULT_NUMBER_LIST_ARRAY","isValidListStyleType","type","isOrdered","listevel","listStyleType","styleTumple","test","format","text","align","level","Math","floor","listType","length","i","replace"],"mappings":"AAAA,SAASA,gBAAT;AACA,SACEC,OADF,EAEEC,yBAFF,EAGEC,yBAHF;AAOA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAAkB;AACpD,SAAO,CAACA,IAAD,IAASJ,OAAO,CAACI,IAAD,CAAvB;AACD,CAFM;AAIP,gBAAe,UACbC,SADa,EAEbC,QAFa,EAGbF,IAHa,EAIW;AACxB,MAAMG,aAAa,GACjBH,IAAI,KACHC,SAAS,GAAGH,yBAAyB,CAAC,CAAD,CAA5B,GAAkCD,yBAAyB,CAAC,CAAD,CADjE,CADN;AAGA,MAAMO,WAAW,GAAGR,OAAO,CAACO,aAAD,CAA3B;;AAEA,MAAI,CAACC,WAAD,IAAgBT,gBAAgB,CAACU,IAAjB,CAAsBL,IAAtB,CAApB,EAAiD;AAC/C,WAAO;AACLM,MAAAA,MAAM,EAAE,QADH;AAELC,MAAAA,IAAI,EAAEP,IAFD;AAGLQ,MAAAA,KAAK,EAAE;AAHF,KAAP;AAKD;;AAED,MAAMC,KAAK,GAAGP,QAAQ,GAAG,CAAX,GAAe,CAAf,GAAmBQ,IAAI,CAACC,KAAL,CAAWT,QAAX,CAAjC;AACA,MAAMU,QAAQ,GAAGR,WAAW,CAACK,KAAK,GAAGL,WAAW,CAACS,MAArB,CAA5B,CAfwB,CAgBxB;;AAhBwB,MAiBnBP,MAjBmB,GAiBIM,QAjBJ;AAAA,MAiBXL,IAjBW,GAiBIK,QAjBJ;AAAA,MAiBLJ,KAjBK,GAiBII,QAjBJ;;AAkBxB,MAAIX,SAAJ,EAAe;AACb,QAAIE,aAAa,KAAKL,yBAAyB,CAAC,CAAD,CAA/C,EAAoD;AAClDS,MAAAA,IAAI,GAAG,EAAP;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,KAArB,EAA4BK,CAAC,EAA7B,EAAiC;AAC/BP,QAAAA,IAAI,WAAQO,CAAC,GAAG,CAAJ,IAASA,CAAC,KAAKL,KAAN,GAAc,EAAd,GAAmB,GAA5B,CAAR,CAAJ;AACD;AACF,KALD,MAKO;AACLF,MAAAA,IAAI,GAAGA,IAAI,CAACQ,OAAL,CAAa,IAAb,EAAmBN,KAAK,GAAG,CAA3B,CAAP;AACD;AACF;;AACD,SAAO;AACLH,IAAAA,MAAM,EAANA,MADK;AAELC,IAAAA,IAAI,EAAJA,IAFK;AAGLC,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD,CArCD","sourcesContent":["import { STICKER_CODE_REG } from '../regexp';\nimport {\n  mapping,\n  DEFAULT_BULLET_LIST_ARRAY,\n  DEFAULT_NUMBER_LIST_ARRAY,\n} from '../../utils/listStyleMapping';\nimport type { ListStyleProperties } from '../../utils/types';\n\nexport const isValidListStyleType = (type: string) => {\n  return !type || mapping[type];\n}\n\nexport default (\n  isOrdered: boolean,\n  listevel: number,\n  type: string,\n): ListStyleProperties => {\n  const listStyleType =\n    type ||\n    (isOrdered ? DEFAULT_NUMBER_LIST_ARRAY[0] : DEFAULT_BULLET_LIST_ARRAY[0]);\n  const styleTumple = mapping[listStyleType];\n\n  if (!styleTumple && STICKER_CODE_REG.test(type)) {\n    return {\n      format: 'bullet',\n      text: type,\n      align: 'start',\n    };\n  }\n\n  const level = listevel < 0 ? 0 : Math.floor(listevel);\n  const listType = styleTumple[level % styleTumple.length];\n  // eslint-disable-next-line prefer-const\n  let [format, text, align] = listType;\n  if (isOrdered) {\n    if (listStyleType === DEFAULT_NUMBER_LIST_ARRAY[2]) {\n      text = '';\n      for (let i = 0; i <= level; i++) {\n        text += `%${i + 1 + (i === level ? '' : '.')}`;\n      }\n    } else {\n      text = text.replace(/\\d/, level + 1);\n    }\n  }\n  return {\n    format,\n    text,\n    align,\n  };\n};\n"],"file":"getListStyle.js"}