import _extends from "@babel/runtime/helpers/extends";
import { Commands } from '@ali/4ever-cangjie';
import { INDENT_SIZE } from '@ali/4ever-utils';
import { omit } from 'lodash-es';
import { getDepthItems, getListStyle, getPrevLevelItem, mergeListData } from "../utils";
import { MAX_LEVEL } from "../constants";
import { MAX_INDENT_SIZE } from '@ali/4ever-plugin-indent';
export function increaseItemByNode(controller, offset, element) {
  var _prevLevelItem$data, _prevLevelItem$data$l;

  if (!element) return controller;
  var _ref = element,
      data = _ref.data,
      key = _ref.key;
  if (!data.list) return controller;
  var _data$list = data.list,
      listStyleType = _data$list.listStyleType,
      level = _data$list.level,
      isOrdered = _data$list.isOrdered,
      isTaskList = _data$list.isTaskList; // 最大深度不超过9

  if (offset > 0 && data.list.level >= MAX_LEVEL - 1) return controller;
  var newLevel = Math.max(level + offset, 0);
  var baseData = data;
  var listStyle = getListStyle(isOrdered, newLevel, listStyleType);
  var prevLevelItem = getPrevLevelItem(controller.value, element, offset);
  var inheritListStyle = prevLevelItem == null ? void 0 : (_prevLevelItem$data = prevLevelItem.data) == null ? void 0 : (_prevLevelItem$data$l = _prevLevelItem$data.list) == null ? void 0 : _prevLevelItem$data$l.listStyle;

  if (inheritListStyle) {
    listStyle = inheritListStyle;
  }

  if (prevLevelItem != null && prevLevelItem.data && !isTaskList) {
    var prevLevelItemData = prevLevelItem.data;
    var prevLevelItemList = prevLevelItemData.list;
    baseData = _extends({}, omit(data, ['fold']), {
      ind: prevLevelItemData.ind,
      list: _extends({}, data.list)
    });
    ['listId', 'level', 'hideSymbol', 'isOrdered', 'isTaskList', 'listStyle', 'listStyleType'].forEach(function (attr) {
      baseData.list[attr] = prevLevelItemList[attr];
    });
  }

  var newData = mergeListData(baseData, {
    level: newLevel,
    listStyle: listStyle
  });
  return controller.command(Commands.setNodeByKey, key, newData).userData["delete"](element, ['fold']);
}
export default function increaseItemBySelection(editor, offset) {
  var _getDepthItems = getDepthItems(editor),
      depthItems = _getDepthItems.depthItems,
      hasFirstStart = _getDepthItems.hasFirstStart;

  depthItems.forEach(function (element) {
    if (!element) return undefined;
    var _ref2 = element,
        data = _ref2.data,
        key = _ref2.key;
    if (!data.list) return undefined;
    var isTaskList = data.list.isTaskList; // 最大深度不超过9

    if (offset > 0 && data.list.level >= MAX_LEVEL - 1) return editor;
    var newData;

    if (hasFirstStart && !isTaskList) {
      var _data$ind;

      var indLeft = Math.max((((_data$ind = data.ind) == null ? void 0 : _data$ind.left) || 0) + offset * INDENT_SIZE, 0);
      newData = {
        data: _extends({}, omit(data, ['fold']), {
          ind: _extends({}, data.ind, {
            left: Math.min(indLeft, MAX_INDENT_SIZE)
          })
        })
      };
      editor.command(Commands.setNodeByKey, key, newData).userData["delete"](element, ['fold']);
    } else {
      increaseItemByNode(editor, offset, element);
    }

    return undefined;
  });
  return editor;
}
//# sourceMappingURL=increaseItemDepth.js.map