import { Commands, Block } from '@ali/4ever-cangjie';
import { getCurrentItem, getListId, mergeListData, getPrevClosestListItem, isFirstInCurrentLevel } from "../utils";

var numbering = function numbering(controller, listId) {
  var _nextBlock, _nextBlock$data;

  if (!listId) return;
  var value = controller.value;
  var document = value.document;
  var nextBlock = getCurrentItem(controller)[0];
  var listConfig = (_nextBlock = nextBlock) == null ? void 0 : (_nextBlock$data = _nextBlock.data) == null ? void 0 : _nextBlock$data.list;

  while (nextBlock) {
    var _nextBlock2, _nextBlock2$data;

    var nextListConfig = (_nextBlock2 = nextBlock) == null ? void 0 : (_nextBlock2$data = _nextBlock2.data) == null ? void 0 : _nextBlock2$data.list;

    if (listConfig && nextListConfig) {
      if (nextListConfig.listId === listConfig.listId && nextListConfig.level >= listConfig.level && listId !== nextListConfig.listId // 过滤相同 listId 的情况
      ) {
          controller.command(Commands.setNodeByKey, nextBlock.key, mergeListData(nextBlock.data, {
            listId: listId
          }));
        } else if (nextListConfig.level < listConfig.level) {
        break;
      }
    }

    nextBlock = document.getNextBlock(nextBlock.key);
  }
};

export function restartNumbering(controller) {
  var value = controller.value;
  var currentBlock = getCurrentItem(controller)[0];

  if (!currentBlock) {
    return controller;
  } // 是兄弟项中的第一个时，无须重新编号


  if (isFirstInCurrentLevel(value, currentBlock)) {
    return controller;
  }

  var newListId = getListId({
    restart: true
  });
  numbering(controller, newListId);
  return controller;
}
export function continueNumbering(controller) {
  var _curBlock$data, _curBlock$data$list, _prevClosestListItem$, _prevClosestListItem$2;

  var value = controller.value;
  var curBlock = getCurrentItem(controller)[0];

  if (!Block.isBlock(curBlock)) {
    return controller;
  }

  var prevClosestListItem = getPrevClosestListItem(value, curBlock, {
    unLimitLevel: true,
    isOrdered: curBlock == null ? void 0 : (_curBlock$data = curBlock.data) == null ? void 0 : (_curBlock$data$list = _curBlock$data.list) == null ? void 0 : _curBlock$data$list.isOrdered
  });
  var newListId = prevClosestListItem == null ? void 0 : (_prevClosestListItem$ = prevClosestListItem.data) == null ? void 0 : (_prevClosestListItem$2 = _prevClosestListItem$.list) == null ? void 0 : _prevClosestListItem$2.listId;
  numbering(controller, newListId);
  return controller;
}
//# sourceMappingURL=numbering.js.map