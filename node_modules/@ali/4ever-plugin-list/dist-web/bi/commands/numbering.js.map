{"version":3,"sources":["../../../../src/bi/commands/numbering.ts"],"names":["Commands","Block","getCurrentItem","getListId","mergeListData","getPrevClosestListItem","isFirstInCurrentLevel","numbering","controller","listId","value","document","nextBlock","listConfig","data","list","nextListConfig","level","command","setNodeByKey","key","getNextBlock","restartNumbering","currentBlock","newListId","restart","continueNumbering","curBlock","isBlock","prevClosestListItem","unLimitLevel","isOrdered"],"mappings":"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","sourcesContent":["import { Controller, Commands, Block } from '@ali/4ever-cangjie';\nimport {\n  getCurrentItem,\n  getListId,\n  mergeListData,\n  getPrevClosestListItem,\n  isFirstInCurrentLevel,\n} from '../utils';\n\nconst numbering = (controller: Controller, listId: string) => {\n  if (!listId) return;\n  const { value } = controller;\n  const { document } = value;\n  let nextBlock = getCurrentItem(controller)[0];\n  const listConfig = nextBlock?.data?.list;\n  while (nextBlock) {\n    const nextListConfig = nextBlock?.data?.list;\n    if (listConfig && nextListConfig) {\n      if (\n        nextListConfig.listId === listConfig.listId &&\n        nextListConfig.level >= listConfig.level &&\n        listId !== nextListConfig.listId // 过滤相同 listId 的情况\n      ) {\n        controller.command(\n          Commands.setNodeByKey,\n          nextBlock.key,\n          mergeListData(nextBlock.data, {\n            listId,\n          }),\n        );\n      } else if (nextListConfig.level < listConfig.level) {\n        break;\n      }\n    }\n    nextBlock = document.getNextBlock(nextBlock.key);\n  }\n};\n\nexport function restartNumbering(controller: Controller) {\n  const { value } = controller;\n  const currentBlock = getCurrentItem(controller)[0];\n  if (!currentBlock) {\n    return controller;\n  }\n  // 是兄弟项中的第一个时，无须重新编号\n  if (isFirstInCurrentLevel(value, currentBlock)) {\n    return controller;\n  }\n  const newListId = getListId({ restart: true });\n  numbering(controller, newListId);\n  return controller;\n}\n\nexport function continueNumbering(controller: Controller) {\n  const { value } = controller;\n  const curBlock = getCurrentItem(controller)[0];\n  if (!Block.isBlock(curBlock)) {\n    return controller;\n  }\n  const prevClosestListItem = getPrevClosestListItem(value, curBlock, {\n    unLimitLevel: true,\n    isOrdered: curBlock?.data?.list?.isOrdered,\n  }) as Block;\n  const newListId = prevClosestListItem?.data?.list?.listId;\n  numbering(controller, newListId);\n  return controller;\n}\n"],"file":"numbering.js"}