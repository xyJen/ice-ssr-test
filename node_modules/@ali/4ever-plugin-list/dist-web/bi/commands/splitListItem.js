import _extends from "@babel/runtime/helpers/extends";
import { v4 as uuid } from 'uuid';
import { Commands } from '@ali/4ever-cangjie';
import { utils } from '@ali/4ever-plugin-list-group';
import { omit } from 'lodash-es';
import { getCurrentItem, mergeListData } from "../utils";
import { uniqueId } from '@ali/4ever-utils';
import { LINE_BREAK, ZERO_CHAR } from "../constants";
var isFoldGroupNode = utils.isFoldGroupNode,
    getNextViewGroupNode = utils.getNextViewGroupNode;
export default (function (controller, isShift) {
  var value = controller.value;
  var document = value.document,
      selection = value.selection,
      startInline = value.startInline;
  var currentItem = getCurrentItem(controller);
  if (!currentItem) return controller;
  if (!currentItem[0] || !currentItem[0].data.list) return controller;

  if (isShift) {
    // 插入的文本由 \n(回车) 与 零宽连字 组成, 保证光标可以随之换行
    return controller.command(Commands.insertText, LINE_BREAK + ZERO_CHAR);
  }

  var splitOffset = (selection == null ? void 0 : selection.anchor).offset;
  var startKey = selection == null ? void 0 : selection.anchor.key;
  var isSelectInlineVoid = startInline && selection.isCollapsed && controller.query('isVoid', startInline);

  if (!isSelectInlineVoid) {
    var _newItem;

    var nextViewNode;
    var isFoldNode = isFoldGroupNode(currentItem[0], controller) && controller.userData.get(currentItem[0], 'fold');

    if (isFoldNode) {
      nextViewNode = getNextViewGroupNode(currentItem[0], controller);
    }

    startKey && controller.command(Commands.splitDescendantsByKey, currentItem[0].key, startKey, splitOffset);
    /* 将 enter 生成的 item 勾选状态设为 false */

    var newItem = getCurrentItem(controller)[0];
    var data = (_newItem = newItem) == null ? void 0 : _newItem.data;
    if (!(data != null && data.list)) return controller;
    var extraData = {};

    if (data.list.isTaskList) {
      extraData.docTaskId = uuid().slice(0, 8);
    }

    var assignData = {};

    if (data.uuid) {
      assignData.uuid = uniqueId();
    }

    if (newItem) {
      controller.command(Commands.setNodeByKey, newItem.key, mergeListData(_extends({}, omit(data, 'fold'), assignData), {
        extraData: extraData,
        isChecked: false,
        hideSymbol: false
      }));
      /**
       * 若当前节点是 GroupNode list 节点，做可视节点的切割
       *  I -> 光标坐在位置，在光标位置按 Enter 键
       * 
       * 场景一: 列表 aaa 拆为列表 aaa 和 空列表
       * 
       *   1. aaaI            1. aaa
       *   |  a. bbb          2. I
       *   |    i. ccc   ->   |   a. bbb
       *                      |      i. ccc
       * 
       * 场景二：列表 aaa 拆为列表 aa 和 列表 a
       * 
       *   1. aaIa            1. aaa
       *   |  a. bbb          2. Ia
       *   |    i. ccc   ->   |   a. bbb
       *                      |      i. ccc
       * 
       * 场景三：折叠列表 aaa 拆为列表 aaa 和可视紧邻的空列表
       * 
       *  >1. aaaI           >1. aaa
       *   2. bbb        ->   2. I
       *                      3. bbb
       * 
       * 场景三：后边无节点的折叠列表 aaa 拆为列表 aaa 和可视紧邻的空列表
       * 
       *  >1. aaaI       ->  >1. aaa
       *                      2. I
       */

      if (isFoldNode) {
        newItem = controller.value.document.getNode(newItem.key);

        if (!newItem) {
          return controller;
        }

        controller.command(Commands.removeNodeByKey, newItem.key);

        if (nextViewNode) {
          if (nextViewNode.text === '') {
            var previous = document.getPreviousBlock(nextViewNode.key);
            previous && controller.command(Commands.moveToEndOfNode, previous);
          } else {
            controller.command(Commands.moveToStartOfNode, nextViewNode);
          }
        } else {
          var parent = controller.value.document.getParent(currentItem[0].key);
          var lastNode = parent == null ? void 0 : parent.nodes[(parent == null ? void 0 : parent.nodes.length) - 1];
          lastNode && controller.command(Commands.moveToEndOfNode, lastNode);
        }

        controller.command(Commands.insertBlock, newItem).command(Commands.moveToStartOfNode, newItem);
      }
    }
  }

  return controller;
});
//# sourceMappingURL=splitListItem.js.map