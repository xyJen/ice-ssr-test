import _extends from "@babel/runtime/helpers/extends";
import { Commands, EdgePoint, Selection, TextPoint } from '@ali/4ever-cangjie';
import { INDENT_SIZE, SzUtil } from '@ali/4ever-utils';
import logger from '@ali/4ever-logger';
import { Heading as MoHeading } from '@ali/4ever-plugin-heading';
import { v4 as uuid } from 'uuid';
import { omit } from 'lodash-es';
import { findFirstListItemById, getCurrentItem, getListStyle, getListItemsBySelection, getSiblingItems, mergeListData, isValidListStyleType } from "../utils";
import { convertMarkToSymbolStyle } from "../../utils/getSymbolStyleByKey";

function createSymbolStyle(controller, element) {
  var value = controller.value;
  var document = value.document;
  var firstText = element.getFirstText();
  var lastText = element.getLastText();

  if (!firstText || !lastText) {
    return undefined;
  }

  var activeMarks = document.getActiveMarksAtRange(Selection.create({
    anchor: TextPoint.create({
      key: firstText.key,
      offset: 0
    }),
    focus: TextPoint.create({
      key: lastText.key,
      offset: lastText.text.length
    })
  }));
  return activeMarks.reduce(function (prev, curMark) {
    return _extends({}, prev, convertMarkToSymbolStyle(curMark));
  }, {});
}
/**
 *
 * @param controller
 * @param newData
 * @param type 可选，要转的列表类型
 * @param blocks 可选，要转为列表的块节点
 * @returns
 */


export default function toggleList(controller, newData, type, blocks) {
  var _currentList$0$data, _currentList$0$data$l;

  var value = controller.value;
  var document = value.document,
      selection = value.selection;
  var listSelections = value.data.listSelections;
  var currentList = listSelections != null && listSelections.length ? getListItemsBySelection(controller) : blocks || getCurrentItem(controller);
  var newDataContent = {
    data: newData
  };
  if (!(currentList && currentList[0])) return controller;
  var firstItem = currentList[0];

  if (currentList.length === 1 && type !== 'tlist' && !((_currentList$0$data = currentList[0].data) != null && (_currentList$0$data$l = _currentList$0$data.list) != null && _currentList$0$data$l.isTaskList)) {
    var target = currentList[0]; // 选中列表符号时，对选中的列表做 toggle

    if (!(listSelections != null && listSelections.length) && target) {
      currentList = getSiblingItems(value, target);
    }

    try {
      firstItem = currentList[0];
    } catch (e) {
      logger.error({
        type: 'listError',
        name: 'toggleList',
        value: {
          listSelections: listSelections,
          target: target,
          currentList: currentList
        }
      });
      return controller;
    }
  }

  var extendListItem = firstItem && findFirstListItemById(firstItem, value.document);
  controller.withoutNormalizing(function () {
    var _currentList;

    (_currentList = currentList) == null ? void 0 : _currentList.forEach(function (element) {
      if (!element) return;

      var _mergeListData = mergeListData(element.data, newData.list),
          data = _mergeListData.data;

      if (element.data) {
        if (element.data.list) {
          var elementListConfig = element.data.list;
          data.list.level = (elementListConfig == null ? void 0 : elementListConfig.level) || 0; // 若标题代办转为列表，符号大小自动继承

          if (MoHeading.isHeading(element)) {
            data.list.symbolStyle = _extends({}, elementListConfig.symbolStyle, {
              sz: SzUtil.fromHeadingType(element.type)
            });
          }

          if (elementListConfig.symbolStyle) {
            data.list.symbolStyle = elementListConfig.symbolStyle;
          }
        } else {
          var _extendListItem$data, _extendListItem$data$, _element$data, _element$data$ind, _element$data2, _element$data2$ind;

          var baseLeft = (extendListItem == null ? void 0 : (_extendListItem$data = extendListItem.data) == null ? void 0 : (_extendListItem$data$ = _extendListItem$data.ind) == null ? void 0 : _extendListItem$data$.left) || 0;
          var itemLeft = ((element == null ? void 0 : (_element$data = element.data) == null ? void 0 : (_element$data$ind = _element$data.ind) == null ? void 0 : _element$data$ind.left) || 0) + ((element == null ? void 0 : (_element$data2 = element.data) == null ? void 0 : (_element$data2$ind = _element$data2.ind) == null ? void 0 : _element$data2$ind.firstLine) || 0);
          var diffValue = Math.max(itemLeft - baseLeft, 0);
          data.list.level = Math.floor(diffValue / INDENT_SIZE);
          data.list.symbolStyle = createSymbolStyle(controller, element);
          data.ind = _extends({}, omit(data.ind, 'firstLine'), {
            left: Math.max(baseLeft, 0)
          });
        }
      }

      var _data$list = data.list,
          level = _data$list.level,
          listStyleType = _data$list.listStyleType;
      /* 切换为任务列表 */

      if (type === 'tlist') {
        data.list.extraData = data.list.extraData || {};

        if (!data.list.extraData.docTaskId) {
          data.list.extraData = _extends({}, data.list.extraData, {
            docTaskId: uuid().slice(0, 8)
          });
        }

        newDataContent = mergeListData(data, {
          isTaskList: true,
          hideSymbol: false,
          isChecked: false,
          isOrdered: false
        });
      } else if (isValidListStyleType(listStyleType)) {
        data.list.listStyle = getListStyle(type === 'olist', level, listStyleType);
      }
      /* 切换为无序列表 */


      if (type === 'ulist') {
        newDataContent = mergeListData(data, {
          isTaskList: false,
          isOrdered: false,
          hideSymbol: false
        });
      }
      /* 切换为有序列表 */


      if (type === 'olist') {
        newDataContent = mergeListData(data, {
          isTaskList: false,
          isOrdered: true,
          hideSymbol: false
        });
      }

      var blockType = 'paragraph';

      if (MoHeading.isHeading(element)) {
        blockType = element.type;
      }

      controller.command(Commands.setNodeByKey, element.key, _extends({
        type: blockType
      }, newDataContent));
    });
  });
  var parent = document;
  var lastList = currentList[currentList.length - 1];
  var lastBlockOfParent = parent.nodes[parent.nodes.length - 1]; // 插入代办时，如果当前段落是父节点的最后一个段落，那么需要在后面插入一个空段路

  if (newDataContent.data.list.isTaskList && (lastList == null ? void 0 : lastList.key) === lastBlockOfParent.key) {
    var insertPoint = EdgePoint.create({
      key: lastList.key,
      edge: EdgePoint.AFTER
    });
    controller.command(Commands.insertEmptyBlock, insertPoint).command(Commands.select, selection);
  }

  return controller;
}
//# sourceMappingURL=toggleList.js.map