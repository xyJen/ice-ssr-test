import _extends from "@babel/runtime/helpers/extends";
import { Commands, Text } from '@ali/4ever-cangjie';
import { Paragraph } from '@ali/4ever-plugin-paragraph';
import toggleList from "./toggleList";
import { getListId, getListData, getListStyle } from "../utils";

var paragraph2List = function paragraph2List(controller, block, list) {
  var _block$data, _block$data$list, _block$data2, _block$data2$list;

  var listStyle = list.listStyle;

  if (!list.isTaskList && (block == null ? void 0 : (_block$data = block.data) == null ? void 0 : (_block$data$list = _block$data.list) == null ? void 0 : _block$data$list.level) > 0) {
    listStyle = getListStyle(Boolean(list.isOrdered), block.data.list.level, String(list.listStyleType));
  }

  controller.command(Commands.setNodeByKey, block.key, {
    type: block.type,
    data: {
      list: _extends({}, list, {
        level: (block == null ? void 0 : (_block$data2 = block.data) == null ? void 0 : (_block$data2$list = _block$data2.list) == null ? void 0 : _block$data2$list.level) || 0,
        listStyle: listStyle
      })
    }
  });
};

var heading2List = function heading2List(controller, block, list) {
  controller.command(Commands.setNodeByKey, block.key, {
    type: Paragraph.TYPE,
    data: {
      list: list
    }
  });
  controller.command('setHeading', Paragraph.TYPE);
};

var list2List = function list2List(controller, block) {
  controller.command(Commands.setNodeByKey, block.key, {
    type: Paragraph.TYPE,
    data: {}
  });
};

var code2List = function code2List(controller, block, list) {
  var lineArr = block.text.split('\n');
  controller.command(Commands.removeNodeByKey, block.key);
  controller.withoutNormalizing(function () {
    lineArr.forEach(function (line) {
      var paragraph = Paragraph.create({
        data: {
          list: list
        },
        nodes: [Text.create(line)]
      });
      controller.command(Commands.insertBlock, paragraph);
    });
  });
};

export default function transform(controller, type, listType) {
  var blocks = controller.query('getTransformNodes');

  if (Array.isArray(blocks)) {
    var data = getListData({
      type: type === 'tlist' ? type : type.slice(0, 2),
      listId: getListId({
        value: controller.value,
        listType: listType,
        restart: true,
        type: type
      }),
      level: 0,
      listStyleType: listType
    });
    controller.withoutNormalizing(function () {
      blocks.forEach(function (block) {
        if (block.type === 'code') {
          return code2List(controller, block, data.list);
        } else if (block.data.calloutPr) {
          return paragraph2List(controller, block, data.list);
        } else if (block.data.list) {
          if (block.data.list.isTaskList && type === 'tlist' || !block.data.list.isTaskList && block.data.list.isOrdered && type === 'olist' || !block.data.list.isTaskList && !block.data.list.isOrdered && type === 'ulist') {
            return list2List(controller, block);
          }

          return paragraph2List(controller, block, data.list);
        } else if (block.data.blockquote) {
          return paragraph2List(controller, block, data.list);
        } else if (block.type !== 'paragraph') {
          return heading2List(controller, block, data.list);
        }

        return toggleList(controller, data, type, [block]);
      });
    });
  }

  return controller;
}
//# sourceMappingURL=transform.js.map