import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment } from '@ali/4ever-cangjie';
import { ToolbarUnorderListNormal } from '@ali/we-design';
import { ListSet, IconButton } from '@ali/we-toolbar';
import { IconButtonShortcut } from '@ali/4ever-component';
import isUnorderedList from "../queries/isUnorderedList";
import { toggleList } from "../actions";
import { getListStyleType, ULLIST_HOT_KEY_TIP } from "../utils";
import isSelectionInListSymbol from "../utils/isSelectionInListSymbol";
import { ListRole } from "../../utils/role";
import { DEFAULT_BULLET_LIST_ARRAY as bulletLists } from "../../utils/listStyleMapping";
var isMobile = environment.IS_MOBILE;
var MemoListSet = /*#__PURE__*/React.memo(ListSet);

var _ref = /*#__PURE__*/_createElement(ToolbarUnorderListNormal, null);

export var renderUnorderedListButton = function renderUnorderedListButton(config) {
  if (config === void 0) {
    config = {
      enableSticker: false
    };
  }

  var _config = config,
      enableSticker = _config.enableSticker;

  function UnorderedListButton(props) {
    var controller = props.controller,
        locale = props.locale,
        simple = props.simple,
        rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "simple"]);

    var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
    var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInHr') || // fix: https://aone.alibaba-inc.com/v2/project/1090534/bug/35667506
    controller.query('isSelectionInSubjectHeading');
    var listStyleType = getListStyleType(controller);
    var isActive = isUnorderedList(controller);
    var handleClick = useCallback(function (listType) {
      return controller.run('onAction', toggleList('ulist', isMobile || bulletLists[listType] === undefined ? bulletLists[0] : listType));
    }, [controller]);

    if (simple) {
      return /*#__PURE__*/_createElement(IconButton, _extends({}, rest, {
        testid: "bi-toolbar-ullist",
        icon: _ref,
        title: locale.unorderedList,
        shortcutText: ULLIST_HOT_KEY_TIP,
        tooltip: /*#__PURE__*/_createElement(IconButtonShortcut, {
          title: locale.unorderedList,
          shortcut: ULLIST_HOT_KEY_TIP,
          description: 'Markdown: * + ' + ((locale == null ? void 0 : locale.space) || 'Space')
        }),
        active: isActive,
        disabled: !!isDisabled,
        onClick: handleClick,
        role: ListRole.listUnordered
      }));
    }

    return /*#__PURE__*/_createElement(MemoListSet, _extends({}, rest, {
      mode: "ul",
      active: isActive,
      shortcutText: ULLIST_HOT_KEY_TIP,
      testid: "bi-toolbar-ullist",
      disabled: !!isDisabled,
      defaultListStyle: listStyleType,
      onChange: handleClick,
      onClick: handleClick,
      enableSticker: enableSticker,
      role: ListRole.listUnordered
    }));
  }

  UnorderedListButton.needRender = function (controller) {
    return isSelectionInListSymbol(controller.value);
  };

  return UnorderedListButton;
};
//# sourceMappingURL=unorderedListButton.js.map