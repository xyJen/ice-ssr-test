import React, { useCallback, useEffect, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { clearListSelections, clearRangeSelection, selectListSelections, selectSymbol } from "../actions";
import { ListContext } from "../../component/context";
import { getSameGroupListItems } from "../utils";

var ListWrapper = function ListWrapper(props) {
  var children = props.children,
      controller = props.controller;
  var handleClearSelection = useCallback(function () {
    var data = controller.value.data;

    if (data.listSelections && data.listSelections.length) {
      controller.run('onAction', selectSymbol(data.listSelections, false));
      controller.run('onAction', clearListSelections());
    }
  }, [controller]);
  var handleSelectSymbol = useCallback(function (listId, key) {
    var document = controller.value.document;
    var currentList = document.getNode(key);
    var siblings = getSameGroupListItems(controller.value, currentList);
    handleClearSelection();
    controller.run('onAction', selectListSelections(siblings));
    controller.run('onAction', clearRangeSelection(currentList));
    controller.run('onAction', selectSymbol(siblings, true));
  }, [controller, handleClearSelection]);
  var onClickOutSide = useCallback(function (event) {
    var target = event.target;
    var inCangjie = target.closest('[data-cangjie-content="true"]');
    var listSelections = controller.value.data.listSelections;
    var cls = target.className;
    var isListSymbol = typeof cls === 'string' && (cls.includes('symbol-align-') || cls.includes('list-symbol'));

    if (inCangjie && !isListSymbol && (listSelections == null ? void 0 : listSelections.length) > 0) {
      handleClearSelection();
    }
  }, [controller.value.data, handleClearSelection]);
  useEffect(function () {
    document.addEventListener('click', onClickOutSide, false);
    return function () {
      document.removeEventListener('click', onClickOutSide, false);
    };
  }, [onClickOutSide]);
  var contextValue = useMemo(function () {
    return {
      onSelectSymbol: handleSelectSymbol,
      clearSelection: handleClearSelection
    };
  }, [handleClearSelection, handleSelectSymbol]);
  return /*#__PURE__*/_createElement(ListContext.Provider, {
    value: contextValue
  }, children);
};

export default ListWrapper;
//# sourceMappingURL=listWrapper.js.map