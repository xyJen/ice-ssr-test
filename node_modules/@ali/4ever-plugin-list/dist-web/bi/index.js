import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import toolbar from "./toolbar";
import menubar from "./menubar";
import { queries } from "./queries";
import { actions } from "./actions";
import onAction from "./handlers/onAction";
import onKeyDown from "./handlers/onKeyDown";
import onCangjieInput from "./handlers/onCangjieInput";
import ListWrapper from "./components/listWrapper";
import createContextMenu from "./createContextMenu";
import placeholder from "./placeholder";
import createOnCangjiePaste from "./handlers/onCangjiePaste";
import { createRenderParagraph } from "./queries/createRenderParagraph";
import { biCommands } from "./commands/biCommands";
import createRenderToolbar from "./createRenderToolbar";
import moFactory from "../mo/index";
import { ListSymbolWarmupWrapper, createInjectToNode, getNodeStyle } from "../utils";

var biFactory = function biFactory(config) {
  var listConfig = config.list || {};
  var contextMenu = createContextMenu();
  return _extends({}, moFactory({}), {
    renderEditable: function renderEditable(props, controller, next) {
      return (
        /*#__PURE__*/
        // @ts-ignore
        _createElement(ListWrapper, _extends({}, props, {
          controller: controller
        }), /*#__PURE__*/_createElement(ListSymbolWarmupWrapper, {
          controller: controller
        }, next()))
      );
    },
    toolbar: toolbar(listConfig),
    menubar: menubar(),
    commands: biCommands,
    queries: _extends({}, queries, {
      renderParagraph: createRenderParagraph(config)
    }),
    actions: actions,
    contextMenu: contextMenu(listConfig),
    renderToolbar: createRenderToolbar(listConfig),
    onAction: onAction,
    injectToNode: createInjectToNode(listConfig),
    onCangjiePaste: createOnCangjiePaste(),
    onKeyDown: onKeyDown,
    onCangjieInput: onCangjieInput,
    getNodeStyle: getNodeStyle,
    models: {
      klass: 'block',
      type: 'paragraph',
      data: {
        ind: [undefined, Object],
        spacing: [undefined, Object],
        jc: [undefined, String],
        blockquote: [undefined, Boolean],
        list: Object,
        calloutPr: [undefined, Object],
        subjectPr: [undefined, Object],
        shd: [undefined, Object]
      }
    },
    placeholder: placeholder(listConfig)
  });
};

export default biFactory;
//# sourceMappingURL=index.js.map