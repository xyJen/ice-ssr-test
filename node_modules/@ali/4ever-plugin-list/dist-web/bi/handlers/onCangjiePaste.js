import _extends from "@babel/runtime/helpers/extends";

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { constants, transferUtils } from '@ali/4ever-cangjie';
var MIME_TYPES = constants.MIME_TYPES;

function isList(node) {
  var _node$data;

  var listData = node == null ? void 0 : (_node$data = node.data) == null ? void 0 : _node$data.list;

  if (!listData) {
    return false;
  }

  return !listData.isTaskList;
}

function isSameListType(listData, firstListData) {
  if (listData.isTaskList || firstListData != null && firstListData.isTaskList) {
    return false;
  }

  if ([listData, firstListData].every(function (data) {
    return (data == null ? void 0 : data.isOrdered) !== undefined;
  })) {
    return (listData == null ? void 0 : listData.isOrdered) === (firstListData == null ? void 0 : firstListData.isOrdered);
  }

  return false;
}

function isSameListGroup(node, firstNode) {
  var _node$data2, _node$data2$list;

  return (node == null ? void 0 : (_node$data2 = node.data) == null ? void 0 : (_node$data2$list = _node$data2.list) == null ? void 0 : _node$data2$list.listId) === (firstNode == null ? void 0 : firstNode.data.list.listId) && (node == null ? void 0 : node.data.list.isOrdered) === (firstNode == null ? void 0 : firstNode.data.list.isOrdered);
}
/**
 *
 * 复制列表粘贴到列表中，如果 idOrdered 类型相同则自动合并，listId 与粘贴处或前一项的列表 listId、listStyleType 保持相同
 *
 *   +-------------+                  +-------------+
 *   |  1. DDD     |                  |  1. AAA     |
 *   |  2. EEE     |       paste      |  2. BBB     |
 *   |             |      ----->      |             |
 *   |             |                  |  3. CCC     |
 *   +-------------+                  +-------------+
 *
 *                           |
 *                           |
 *                           |
 *                           V
 *
 *                   +---------------+
 *                   |  1. AAA       |
 *                   |  2. BBB       |
 *                   |  3. DDD       |
 *                   |  4. EEE       |
 *                   |  5. CCC       |
 *                   +---------------+
 */


export default function createOnPaste() {
  return function onPaste(event, controller, next) {
    var _controller$value = controller.value,
        document = _controller$value.document,
        selection = _controller$value.selection;
    var clipboardData = controller.query('getClipboardData', event);

    if (!(clipboardData != null && clipboardData.hasData(MIME_TYPES.FRAGMENT))) {
      return next();
    }

    var fragment = clipboardData.getFragment();
    var firstNode = fragment == null ? void 0 : fragment.nodes[0];

    if (!isList(firstNode)) {
      return next();
    }

    var currentBlock = document.getClosestBlock(selection.anchor.key);

    if (!currentBlock) {
      return next();
    }

    var prevBlock = document.getPreviousBlock(currentBlock.key);

    if (isList(prevBlock) || isList(currentBlock)) {
      var _currentBlock$data;

      var listData = (currentBlock == null ? void 0 : (_currentBlock$data = currentBlock.data) == null ? void 0 : _currentBlock$data.list) || (prevBlock == null ? void 0 : prevBlock.data.list);

      if (!isSameListType(listData, firstNode == null ? void 0 : firstNode.data.list)) {
        return next();
      }

      var extendSet = new Set();
      fragment == null ? void 0 : fragment.nodes.forEach(function (n) {
        if (isSameListGroup(n, firstNode)) {
          extendSet.add(n);
        }
      });
      var result = fragment;

      if (result) {
        for (var _iterator = _createForOfIteratorHelperLoose(extendSet), _step; !(_step = _iterator()).done;) {
          var _result;

          var node = _step.value;
          result = (_result = result) == null ? void 0 : _result.setNode(result.getPath(node.key), {
            data: _extends({}, node.data, {
              list: _extends({}, node.data.list, {
                listId: listData.listId,
                listStyleType: listData.listStyleType
              })
            })
          });
        }

        event.setClipboardData(event.clipboardData.setData(MIME_TYPES.FRAGMENT, transferUtils.encodeFragment(result)));
      }
    }

    return next();
  };
}
//# sourceMappingURL=onCangjiePaste.js.map