import _extends from "@babel/runtime/helpers/extends";
import { Block, Commands } from '@ali/4ever-cangjie';
import toggleList from "../commands/toggleList";
import { isConnectPrevClosestList, isConnectNextClosestList, shortcutTypes, getCurrentItem, getListData, getListId, getMatchLevel, getPrevClosestListItem } from "../utils";
import { LOWER_LETTER_REG, UPPER_LETTER_REG, ARABIC_REG, EN_NUM_BRACKET, ZH_NUM_BRACKET, EN_NUM_HALF_BRACKET, ZH_NUM_HALF_BRACKET, EN_LET_HALF_BRACKET, ZH_LET_HALF_BRACKET, NUMBER_DON } from "../regexp";
import { DEFAULT_BULLET_LIST_ARRAY, DEFAULT_NUMBER_LIST_ARRAY, mapping } from "../../utils/listStyleMapping";
import { RELATIVE_LEVEL } from "../../utils/generateSymbol";
import { transformString } from "../../utils/transformNumber";

var getListStyleType = function getListStyleType(symbol) {
  if (symbol === '*') return DEFAULT_BULLET_LIST_ARRAY[0];
  if (symbol === '-') return DEFAULT_BULLET_LIST_ARRAY[6];
  if (symbol === '+') return DEFAULT_BULLET_LIST_ARRAY[7];
  return null;
};

var getListType = function getListType(chars) {
  var isLowerLetter = LOWER_LETTER_REG.test(chars);
  var isUpperLetter = UPPER_LETTER_REG.test(chars);
  var isNumAllBracket = EN_NUM_BRACKET.test(chars) || ZH_NUM_BRACKET.test(chars);
  var isNumHalfBracket = EN_NUM_HALF_BRACKET.test(chars) || ZH_NUM_HALF_BRACKET.test(chars);
  var isLetHalfBracket = EN_LET_HALF_BRACKET.test(chars) || ZH_LET_HALF_BRACKET.test(chars);
  var listType;

  if (isLowerLetter) {
    listType = DEFAULT_NUMBER_LIST_ARRAY[8];
  } else if (isUpperLetter) {
    listType = DEFAULT_NUMBER_LIST_ARRAY[3];
  } else if (isNumAllBracket) {
    listType = DEFAULT_NUMBER_LIST_ARRAY[9];
  } else if (isNumHalfBracket) {
    listType = DEFAULT_NUMBER_LIST_ARRAY[1];
  } else if (isLetHalfBracket) {
    listType = DEFAULT_NUMBER_LIST_ARRAY[10];
  }

  return listType;
};
/**
 * 列表类型是否匹配
 * @description 根据输入字段预判的列表类型跟最近的列表项的类型是否一致
 */


var isMatchClosestList = function isMatchClosestList(_ref, closestListItem, currentItem) {
  var _closestListItem$data, _closestListItem$data2;

  var isNumber = _ref.isNumber,
      isLowerLetter = _ref.isLowerLetter,
      isUpperLetter = _ref.isUpperLetter,
      isNumAllBracket = _ref.isNumAllBracket,
      isNumHalfBracket = _ref.isNumHalfBracket,
      isLetHalfBracket = _ref.isLetHalfBracket;
  var listStyleType = closestListItem == null ? void 0 : (_closestListItem$data = closestListItem.data) == null ? void 0 : (_closestListItem$data2 = _closestListItem$data.list) == null ? void 0 : _closestListItem$data2.listStyleType;
  var typeObj = mapping[listStyleType];
  var level = getMatchLevel(currentItem);

  if (typeObj) {
    var remainder = level % 3;
    var relativeLevel = RELATIVE_LEVEL.includes(remainder) ? remainder : 0;
    var type = typeObj[relativeLevel][0];
    var format = typeObj[relativeLevel][1].replace(/\d+/, '');

    if (isNumber && type === 'decimal' && format === '%.' || isLowerLetter && type === 'lowerLetter' && format === '%.' || isUpperLetter && type === 'upperLetter' && format === '%.' || isNumAllBracket && type === 'decimal' && format === '(%)' || isNumHalfBracket && type === 'decimal' && format === '%)' || isLetHalfBracket && type === 'lowerLetter' && format === '%1)') {
      return true;
    }
  }

  return false;
};

export default (function (event, editor, next) {
  var _value$selection, _value$startBlock;

  var value = editor.value;
  var currentItem = getCurrentItem(editor)[0];

  if (!Block.isBlock(currentItem) || (_value$selection = value.selection) != null && _value$selection.isExpanded || currentItem != null && currentItem.data.list || currentItem != null && currentItem.data.blockquote || editor.query('isSelectionInHeading')) {
    return next();
  }

  var startBlock = value.startBlock,
      selection = value.selection,
      document = value.document; // 只有在段落开头时，才允许插入列表

  if (value.startText !== ((_value$startBlock = value.startBlock) == null ? void 0 : _value$startBlock.getFirstText())) {
    return next();
  }

  var startOffset = (selection == null ? void 0 : selection.anchor).offset;
  var chars = startOffset !== undefined && (startBlock == null ? void 0 : startBlock.text.slice(0, startOffset).replace(/\s*/g, '')) || '';
  var types = shortcutTypes(chars);
  if (!startBlock || !types || value.composing) return next();
  var isNumber = ARABIC_REG.test(chars);
  var isNumberDon = NUMBER_DON.test(chars);
  var isLowerLetter = LOWER_LETTER_REG.test(chars);
  var isUpperLetter = UPPER_LETTER_REG.test(chars);
  var isNumAllBracket = EN_NUM_BRACKET.test(chars) || ZH_NUM_BRACKET.test(chars);
  var isNumHalfBracket = EN_NUM_HALF_BRACKET.test(chars) || ZH_NUM_HALF_BRACKET.test(chars);
  var isLetHalfBracket = EN_LET_HALF_BRACKET.test(chars) || ZH_LET_HALF_BRACKET.test(chars);

  if (chars === '*' || chars === '-' || chars === '+') {
    var listStyleType = getListStyleType(chars) || undefined;
    var data = getListData({
      listId: getListId({
        value: value,
        listType: listStyleType
      }),
      type: 'ul',
      level: 0,
      listStyleType: listStyleType
    });
    toggleList(editor, data, 'ulist');
  } else if (isNumber || isLowerLetter || isUpperLetter || isNumAllBracket || isNumHalfBracket || isLetHalfBracket) {
    var type = '';

    if (isUpperLetter || isLowerLetter || isLetHalfBracket) {
      type = 'letter';
    }

    var matchChars = chars.slice(Number(isNumAllBracket), -1);
    var inputNumber = transformString(matchChars, type);
    var listId = getListId({
      value: value,
      restart: inputNumber === 1
    });
    var listType = getListType(chars);

    if (isNumberDon) {
      listType = DEFAULT_NUMBER_LIST_ARRAY[11];
    } else if (isNumber) {
      listType = DEFAULT_NUMBER_LIST_ARRAY[0];
    }

    var _data = getListData({
      listId: listId,
      type: 'ol',
      level: 0,
      listStyleType: listType
    });

    var prevBlock = getPrevClosestListItem(value, currentItem, {
      isOrdered: true
    });
    var nextBlock = document.getNextBlock(currentItem.key);
    var closestListItem = [{
      blockItem: prevBlock,
      isConnect: isConnectPrevClosestList
    }, {
      blockItem: nextBlock,
      isConnect: isConnectNextClosestList
    }].find(function (_ref2) {
      var blockItem = _ref2.blockItem,
          isConnect = _ref2.isConnect;
      var result = blockItem && Block.isBlock(currentItem) && isMatchClosestList({
        isNumber: isNumber,
        isLowerLetter: isLowerLetter,
        isUpperLetter: isUpperLetter,
        isNumAllBracket: isNumAllBracket,
        isNumHalfBracket: isNumHalfBracket,
        isLetHalfBracket: isLetHalfBracket
      }, blockItem, currentItem) && isConnect(value, blockItem, inputNumber);
      return result;
    });

    if (closestListItem) {
      _data = {
        list: _extends({}, closestListItem.blockItem.data.list)
      };
    } else if (inputNumber !== 1) {
      return next();
    }

    toggleList(editor, _data, 'olist');
  } else if (chars === '[]') {
    var _data2 = getListData({
      listId: getListId({
        value: value
      }),
      type: 'tlist',
      level: 0
    });

    toggleList(editor, _data2);
  } else if (chars === '[x]') {
    var _data3 = getListData({
      listId: getListId({
        value: value
      }),
      type: 'tlist',
      level: 0
    });

    _data3.list.isChecked = true;
    toggleList(editor, _data3);
  } else {
    return next();
  }

  event.preventDefault();
  editor.command(Commands.moveFocusToStartOfNode, startBlock).command(Commands.del);
  editor.dispatch('createTriggerMarkdownAction', {
    mdType: types
  });
  return editor;
});
//# sourceMappingURL=onSpace.js.map