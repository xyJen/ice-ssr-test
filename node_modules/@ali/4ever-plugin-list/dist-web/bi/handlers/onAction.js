import { Paragraph } from '@ali/4ever-plugin-paragraph';
import { SzUtil } from '@ali/4ever-utils';
import { CONTINUE_NUMBERING, CLEAR_LIST_SELECTIONS, CLEAR_RANGE_SELECTION, LIST_REMOVE_LIST, LIST_SET_CHECK_STATUS, LIST_SELECT_SYMBOL, LIST_TOGGLE_LIST, LIST_TRANSFORM, RESTART_NUMBERING, SELECT_LIST_SELECTIONS } from "../actions";
import toggleWrapInList from "../commands/toggleWrapInList";
import transform from "../commands/transform";
import removeListNode from "../commands/removeListNode";
import toggleCheckStatus from "../commands/toggleCheckStatus";
import { COLOR_SET } from '@ali/4ever-plugin-color';
import { HEADING_SET } from '@ali/4ever-plugin-heading';
import { MARK_TOGGLE } from '@ali/4ever-plugin-marks';
import { clearRangeSelection, clearListSelections, selectListSelections, selectSymbol, setSymbolStyle, adjustSymbolSz } from "../utils";
import { continueNumbering, restartNumbering } from "../commands";
export default function onAction(action, controller, next) {
  var isHighlight = controller.isActionFactory('isHighlight');
  var isAdjustSz = controller.isActionFactory('isAdjustSz');
  var isSetSz = controller.isActionFactory('isSetSz');
  var isSetFonts = controller.isActionFactory('isSetFonts');
  var type = action.type,
      payload = action.payload;

  if (type === LIST_TOGGLE_LIST) {
    var listType = payload.listType,
        listStyleType = payload.listStyleType;
    return toggleWrapInList(controller, listType, listStyleType);
  }

  if (type === LIST_TRANSFORM) {
    var _listType = payload.listType,
        _listStyleType = payload.listStyleType;
    return transform(controller, _listType, _listStyleType); // return controller.command(transform, listType, listStyleType);
  }

  if (type === LIST_REMOVE_LIST) {
    return removeListNode(controller);
  }

  if (type === LIST_SET_CHECK_STATUS) {
    var node = payload.node,
        checked = payload.checked;
    return toggleCheckStatus(controller, node.key, checked);
  }

  if (type === LIST_SELECT_SYMBOL) {
    var listSelections = payload.listSelections,
        isSelected = payload.isSelected;
    return selectSymbol(controller, listSelections, isSelected);
  }

  if (type === CLEAR_RANGE_SELECTION) {
    var _node = payload.node;
    return clearRangeSelection(controller, _node);
  }

  if (type === CLEAR_LIST_SELECTIONS) {
    return clearListSelections(controller);
  }

  if (type === SELECT_LIST_SELECTIONS) {
    var _listSelections = payload.listSelections;
    return selectListSelections(controller, _listSelections);
  }

  if (isSetSz != null && isSetSz(action)) {
    var sz = payload.sz;
    setSymbolStyle(controller, {
      sz: sz
    });
  }

  if (isAdjustSz != null && isAdjustSz(action)) {
    var isIncreasingSz = payload.isIncreasingSz;
    adjustSymbolSz(controller, isIncreasingSz);
  }

  if (isSetFonts != null && isSetFonts(action)) {
    var fonts = payload.fonts;
    setSymbolStyle(controller, {
      fonts: fonts
    });
  }

  if (type === COLOR_SET) {
    var color = payload.color;
    setSymbolStyle(controller, {
      color: color
    });
  }

  if (isHighlight != null && isHighlight(action)) {
    var highlight = action.payload.highlight;
    setSymbolStyle(controller, {
      shd: highlight
    });
  }

  if (type === MARK_TOGGLE) {
    var mark = payload.mark;
    var symbolStyle = {};
    symbolStyle[mark] = true;
    setSymbolStyle(controller, symbolStyle);
  }

  if (type === HEADING_SET) {
    var heading = payload.heading;
    var isParagraph = heading === Paragraph.TYPE;
    setSymbolStyle(controller, {
      // undefined 代表清除
      sz: isParagraph ? undefined : SzUtil.fromHeadingType(heading),
      bold: !isParagraph
    });
  }

  if (type === CONTINUE_NUMBERING) {
    continueNumbering(controller);
  }

  if (type === RESTART_NUMBERING) {
    restartNumbering(controller);
  }

  return next();
}
//# sourceMappingURL=onAction.js.map