{"version":3,"sources":["../../../../src/bi/handlers/onCangjiePaste.ts"],"names":["constants","transferUtils","MIME_TYPES","isList","node","listData","data","list","isTaskList","isSameListType","firstListData","every","isOrdered","undefined","isSameListGroup","firstNode","listId","createOnPaste","onPaste","event","controller","next","value","document","selection","clipboardData","query","hasData","FRAGMENT","fragment","getFragment","nodes","currentBlock","getClosestBlock","anchor","key","prevBlock","getPreviousBlock","extendSet","Set","forEach","n","add","result","setNode","getPath","listStyleType","setClipboardData","setData","encodeFragment"],"mappings":"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","sourcesContent":["import {\n  Block,\n  Plugin,\n  constants,\n  transferUtils,\n} from '@ali/4ever-cangjie';\nimport { ListProperties } from '../../utils/types';\n\nconst { MIME_TYPES } = constants;\n\nfunction isList(node?: Block | null) {\n  const listData = node?.data?.list;\n  if (!listData) {\n    return false;\n  }\n  return !listData.isTaskList;\n}\n\nfunction isSameListType(\n  listData: ListProperties,\n  firstListData?: ListProperties,\n) {\n  if (listData.isTaskList || firstListData?.isTaskList) {\n    return false;\n  }\n  if (\n    [listData, firstListData].every((data) => data?.isOrdered !== undefined)\n  ) {\n    return listData?.isOrdered === firstListData?.isOrdered;\n  }\n  return false;\n}\n\nfunction isSameListGroup(node: Block | null, firstNode?: Block | null) {\n  return (\n    node?.data?.list?.listId === firstNode?.data.list.listId &&\n    node?.data.list.isOrdered === firstNode?.data.list.isOrdered\n  );\n}\n\n/**\n *\n * 复制列表粘贴到列表中，如果 idOrdered 类型相同则自动合并，listId 与粘贴处或前一项的列表 listId、listStyleType 保持相同\n *\n *   +-------------+                  +-------------+\n *   |  1. DDD     |                  |  1. AAA     |\n *   |  2. EEE     |       paste      |  2. BBB     |\n *   |             |      ----->      |             |\n *   |             |                  |  3. CCC     |\n *   +-------------+                  +-------------+\n *\n *                           |\n *                           |\n *                           |\n *                           V\n *\n *                   +---------------+\n *                   |  1. AAA       |\n *                   |  2. BBB       |\n *                   |  3. DDD       |\n *                   |  4. EEE       |\n *                   |  5. CCC       |\n *                   +---------------+\n */\n\nexport default function createOnPaste(): Plugin['onCangjiePaste'] {\n  return function onPaste(event, controller, next) {\n    const { document, selection } = controller.value;\n    const clipboardData = controller.query('getClipboardData', event);\n    if (!clipboardData?.hasData(MIME_TYPES.FRAGMENT)) {\n      return next();\n    }\n    const fragment = clipboardData.getFragment();\n    const firstNode = fragment?.nodes[0];\n\n    if (!isList(firstNode)) {\n      return next();\n    }\n\n    const currentBlock = document.getClosestBlock(selection.anchor.key);\n\n    if (!currentBlock) {\n      return next();\n    }\n\n    const prevBlock = document.getPreviousBlock(currentBlock.key);\n    if (isList(prevBlock) || isList(currentBlock)) {\n      const listData = currentBlock?.data?.list || prevBlock?.data.list;\n      if (!isSameListType(listData, firstNode?.data.list)) {\n        return next();\n      }\n\n      const extendSet = new Set<Block>();\n      fragment?.nodes.forEach((n) => {\n        if (isSameListGroup(n, firstNode)) {\n          extendSet.add(n);\n        }\n      });\n\n      let result = fragment;\n      if (result) {\n        for (const node of extendSet) {\n          result = result?.setNode(result.getPath(node.key)!, {\n            data: {\n              ...node.data,\n              list: {\n                ...node.data.list,\n                listId: listData.listId,\n                listStyleType: listData.listStyleType,\n              },\n            },\n          });\n        }\n\n        event.setClipboardData(\n          event.clipboardData!.setData(\n            MIME_TYPES.FRAGMENT,\n            transferUtils.encodeFragment(result),\n          ),\n        );\n      }\n    }\n    return next();\n  };\n}\n"],"file":"onCangjiePaste.js"}