import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import toolbar from "./toolbar";
import { queries } from "../queries";
import { actions } from "../actions";
import onAction from "./onAction";
import onKeyDown from "../handlers/onKeyDown";
import ListWrapper from "../components/listWrapper";
import onCangjieInput from "../handlers/onCangjieInput";
import placeholder from "../placeholder";
import createOnCangjiePaste from "../handlers/onCangjiePaste";
import { createRenderParagraph } from "../queries/createRenderParagraph";
import { biCommands } from "../commands/biCommands";
import moFactory from "../../mo";
import { createInjectToNode, getNodeStyle, ListSymbolWarmupWrapper } from "../../utils";

var mobileBiFactory = function mobileBiFactory(config) {
  var listConfig = config.list || {};
  return _extends({}, moFactory({}), {
    renderEditable: function renderEditable(props, controller, next) {
      return (
        /*#__PURE__*/
        // @ts-ignore
        _createElement(ListWrapper, _extends({}, props, {
          controller: controller
        }), /*#__PURE__*/_createElement(ListSymbolWarmupWrapper, {
          controller: controller
        }, next()))
      );
    },
    toolbar: toolbar(listConfig),
    commands: biCommands,
    queries: _extends({}, queries, {
      renderParagraph: createRenderParagraph(config)
    }),
    actions: actions,
    onAction: onAction,
    injectToNode: createInjectToNode(listConfig),
    onCangjieInput: onCangjieInput,
    onCangjiePaste: createOnCangjiePaste(),
    onKeyDown: onKeyDown,
    getNodeStyle: getNodeStyle,
    models: {
      klass: 'block',
      type: 'paragraph',
      data: {
        ind: [undefined, Object],
        spacing: [undefined, Object],
        jc: [undefined, String],
        blockquote: [undefined, Boolean],
        list: Object,
        calloutPr: [undefined, Object],
        subjectPr: [undefined, Object],
        shd: [undefined, Object]
      }
    },
    placeholder: placeholder(listConfig)
  });
};

export default mobileBiFactory;
//# sourceMappingURL=index.js.map