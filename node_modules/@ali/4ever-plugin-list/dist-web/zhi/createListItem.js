import _extends from "@babel/runtime/helpers/extends";
import _createClass from "@babel/runtime/helpers/createClass";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { MoCommon } from '@ali/4ever-cangjie';
import { IndUtil, ShdUtil, theme, INDENT_SIZE } from '@ali/4ever-utils';
import { utils as ListGroupUtils, constants as ListGroupConstants } from '@ali/4ever-plugin-list-group';
import { convertSymbolStyle, generateSymbol, RenderStyledListItem, ROMAN_EXTRA_INDENT, SYMBOL_STYLE, ListItemWrapper, GroupListContainer, getJustifyContent } from "../utils";
var BorderStyleEnum = MoCommon.BorderStyleEnum;
var isListGroupAvailable = ListGroupUtils.isListGroupAvailable,
    isInUnlistGroupContainer = ListGroupUtils.isInUnlistGroupContainer,
    isNormalGroupNode = ListGroupUtils.isNormalGroupNode;
var EXTRA_PADDING = ListGroupConstants.EXTRA_PADDING;
var DEFAULT_BORDER_COLOR = '#000000';
var DEFAULT_SHD_MARGIN_BOTTOM = 1;
var DEFAULT_SHD_STYLES = theme.DEFAULT_SHD_STYLES;
export default function createListItem(Paragraph) {
  var ListItem = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(ListItem, _React$Component);

    function ListItem() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

      _this.getGroupListStyle = function () {
        var _this$props = _this.props,
            node = _this$props.node,
            controller = _this$props.controller;
        var shd = node.data.shd;

        if (!_this.isListGroupAvailable || !shd) {
          return {
            display: 'contents'
          };
        } //@ts-ignore


        var paddingLeft = DEFAULT_SHD_STYLES.paddingLeft + (_this.symbolAlign === 'right' ? ROMAN_EXTRA_INDENT : 0);
        var backgroundColor = isNormalGroupNode(node, controller) ? ShdUtil.transformShd(shd) : 'unset';
        var width = "calc(100% + " + ((DEFAULT_SHD_STYLES.paddingLeft || 0) + (DEFAULT_SHD_STYLES.paddingRight || 0)) + "px)";
        var justifyContent = getJustifyContent(_this.align);
        return _extends({}, DEFAULT_SHD_STYLES, {
          backgroundColor: backgroundColor,
          paddingLeft: paddingLeft,
          width: width,
          display: 'flex',
          justifyContent: justifyContent
        });
      };

      return _this;
    }

    var _proto = ListItem.prototype;

    /**
     * @TODO 列表的缩进完全由 ind 来排版，不由 level 而定
     */
    _proto.getStyle = function getStyle() {
      var _this$props2 = this.props,
          node = _this$props2.node,
          controller = _this$props2.controller,
          visible = _this$props2.visible;
      var _ref = node.data,
          listConfig = _ref.list,
          _ref$bdr = _ref.bdr,
          bdr = _ref$bdr === void 0 ? {} : _ref$bdr,
          _ref$ind = _ref.ind,
          ind = _ref$ind === void 0 ? {} : _ref$ind,
          pi = _ref.pi,
          shd = _ref.shd;
      var _ref2 = listConfig,
          _ref2$level = _ref2.level,
          level = _ref2$level === void 0 ? 0 : _ref2$level,
          listStyle = _ref2.listStyle;
      var paddingSpace = level * INDENT_SIZE;

      if (ind) {
        var _IndUtil$fromBlock = IndUtil.fromBlock(node),
            _IndUtil$fromBlock$fi = _IndUtil$fromBlock.firstLine,
            firstLine = _IndUtil$fromBlock$fi === void 0 ? 0 : _IndUtil$fromBlock$fi,
            _IndUtil$fromBlock$le = _IndUtil$fromBlock.left,
            left = _IndUtil$fromBlock$le === void 0 ? 0 : _IndUtil$fromBlock$le;

        paddingSpace += firstLine + left;
      } // 罗马数字统一右侧对齐


      if (listStyle && ['upperRoman', 'lowerRoman'].includes(listStyle.format)) {
        // TODO 根据字体大小，动态计算罗马数字预留空间的宽度
        paddingSpace += this.isListGroupAvailable && shd ? 0 : ROMAN_EXTRA_INDENT;
      }

      var styleObj = {
        paddingLeft: paddingSpace,
        textAlign: this.align === 'distribute' ? 'justify' : this.align
      }; // Pi-2.0：列表高度有时会被项目符号莫名撑高，且边距需要渲染在列表处才可以生效

      if (pi && pi.box) {
        var _ref3 = pi.box,
            height = _ref3.height,
            _ref3$margin = _ref3.margin,
            margin = _ref3$margin === void 0 ? {} : _ref3$margin,
            _ref3$padding = _ref3.padding,
            padding = _ref3$padding === void 0 ? {} : _ref3$padding;
        var _margin$top = margin.top,
            top = _margin$top === void 0 ? 0 : _margin$top,
            _margin$bottom = margin.bottom,
            bottom = _margin$bottom === void 0 ? 0 : _margin$bottom;
        styleObj.height = height;
        styleObj.marginTop = top;
        styleObj.marginBottom = bottom;
      } // 列表的边框需要挂载外围的 DOM 上


      if (bdr.top) {
        var _bdr$top = bdr.top,
            _bdr$top$val = _bdr$top.val,
            val = _bdr$top$val === void 0 ? BorderStyleEnum.Single : _bdr$top$val,
            _bdr$top$sz = _bdr$top.sz,
            sz = _bdr$top$sz === void 0 ? 1 : _bdr$top$sz,
            _bdr$top$color = _bdr$top.color,
            bdrColor = _bdr$top$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$top$color,
            _bdr$top$space = _bdr$top.space,
            space = _bdr$top$space === void 0 ? 0 : _bdr$top$space;
        var borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
        var borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
        styleObj.borderTop = sz + "px " + borderStyle + " " + borderColor;
        styleObj.paddingTop = space;
      }

      if (bdr.bottom) {
        var _bdr$bottom = bdr.bottom,
            _bdr$bottom$val = _bdr$bottom.val,
            _val = _bdr$bottom$val === void 0 ? BorderStyleEnum.Single : _bdr$bottom$val,
            _bdr$bottom$sz = _bdr$bottom.sz,
            _sz = _bdr$bottom$sz === void 0 ? 1 : _bdr$bottom$sz,
            _bdr$bottom$color = _bdr$bottom.color,
            _bdrColor = _bdr$bottom$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$bottom$color,
            _bdr$bottom$space = _bdr$bottom.space,
            _space = _bdr$bottom$space === void 0 ? 0 : _bdr$bottom$space;

        var _borderStyle = _val === BorderStyleEnum.Single ? 'solid' : _val;

        var _borderColor = _bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : _bdrColor;

        styleObj.borderBottom = _sz + "px " + _borderStyle + " " + _borderColor;
        styleObj.paddingBottom = _space;
      }

      if (bdr.left) {
        var _bdr$left = bdr.left,
            _bdr$left$val = _bdr$left.val,
            _val2 = _bdr$left$val === void 0 ? BorderStyleEnum.Single : _bdr$left$val,
            _bdr$left$sz = _bdr$left.sz,
            _sz2 = _bdr$left$sz === void 0 ? 1 : _bdr$left$sz,
            _bdr$left$color = _bdr$left.color,
            _bdrColor2 = _bdr$left$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$left$color,
            _bdr$left$space = _bdr$left.space,
            _space2 = _bdr$left$space === void 0 ? 0 : _bdr$left$space;

        var _borderStyle2 = _val2 === BorderStyleEnum.Single ? 'solid' : _val2;

        var _borderColor2 = _bdrColor2 === 'auto' ? DEFAULT_BORDER_COLOR : _bdrColor2;

        styleObj.borderLeft = _sz2 + "px " + _borderStyle2 + " " + _borderColor2;
        styleObj.paddingLeft = _space2 + paddingSpace;
      }

      if (bdr.right) {
        var _bdr$right = bdr.right,
            _bdr$right$val = _bdr$right.val,
            _val3 = _bdr$right$val === void 0 ? BorderStyleEnum.Single : _bdr$right$val,
            _bdr$right$sz = _bdr$right.sz,
            _sz3 = _bdr$right$sz === void 0 ? 1 : _bdr$right$sz,
            _bdr$right$color = _bdr$right.color,
            _bdrColor3 = _bdr$right$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$right$color,
            _bdr$right$space = _bdr$right.space,
            _space3 = _bdr$right$space === void 0 ? 0 : _bdr$right$space;

        var _borderStyle3 = _val3 === BorderStyleEnum.Single ? 'solid' : _val3;

        var _borderColor3 = _bdrColor3 === 'auto' ? DEFAULT_BORDER_COLOR : _bdrColor3;

        styleObj.borderRight = _sz3 + "px " + _borderStyle3 + " " + _borderColor3;
        styleObj.paddingRight = _space3;
      }

      if (shd && !this.isListGroupAvailable) {
        for (var key in DEFAULT_SHD_STYLES) {
          if (typeof styleObj[key] === 'number') {
            styleObj[key] += DEFAULT_SHD_STYLES[key];
          } else {
            styleObj[key] = DEFAULT_SHD_STYLES[key];
          }
        }

        styleObj.backgroundColor = ShdUtil.transformShd(shd);
        styleObj.marginBottom = DEFAULT_SHD_MARGIN_BOTTOM;
      }

      if (isInUnlistGroupContainer(node, controller)) {
        styleObj.paddingLeft = (Number(styleObj.paddingLeft) || 0) + EXTRA_PADDING;
      }

      if (visible === false) {
        styleObj.display = 'none';
      }

      return styleObj;
    };

    _proto.render = function render() {
      var _this$props3 = this.props,
          node = _this$props3.node,
          _this$props3$step = _this$props3.step,
          propStep = _this$props3$step === void 0 ? '' : _this$props3$step,
          nodeRef = _this$props3.nodeRef;
      var listConfig = node.data.list;
      var isList = !!listConfig;

      var paragraph = /*#__PURE__*/_createElement(Paragraph, _extends({
        isList: isList,
        ref: nodeRef
      }, this.props));

      if (!isList) {
        return paragraph;
      }

      var isOrdered = listConfig.isOrdered,
          isTaskList = listConfig.isTaskList,
          isChecked = listConfig.isChecked,
          _listConfig$level = listConfig.level,
          level = _listConfig$level === void 0 ? 0 : _listConfig$level,
          listId = listConfig.listId,
          listStyle = listConfig.listStyle,
          listStyleType = listConfig.listStyleType,
          hideSymbol = listConfig.hideSymbol,
          _listConfig$symbolSty = listConfig.symbolStyle,
          symbolStyle = _listConfig$symbolSty === void 0 ? SYMBOL_STYLE : _listConfig$symbolSty;
      var stepArray = propStep.split('.');
      var propStart = stepArray[stepArray.length - 1] || '1';
      var _node$data = node.data,
          _node$data$start = _node$data.start,
          start = _node$data$start === void 0 ? propStart : _node$data$start,
          _node$data$step = _node$data.step,
          step = _node$data$step === void 0 ? propStep : _node$data$step;
      var listSymbol = isTaskList ? '' : generateSymbol(level, Number(start), step, isOrdered, listStyleType, listStyle);
      var taskListConfig = {
        isTaskList: isTaskList,
        isChecked: isChecked,
        isOrdered: isOrdered
      };
      return /*#__PURE__*/_createElement(ListItemWrapper, {
        align: this.align,
        style: this.getStyle(),
        "data-testid": "list",
        "data-start": start,
        "data-listid": listId,
        "data-level": level,
        "data-isordered": isOrdered,
        "data-istasklist": isTaskList,
        "data-ischecked": isChecked,
        "data-format": listStyleType == null ? void 0 : listStyleType.format,
        "data-text": listStyleType == null ? void 0 : listStyleType.text,
        "data-align": listStyleType == null ? void 0 : listStyleType.align
      }, /*#__PURE__*/_createElement(GroupListContainer, {
        style: this.getGroupListStyle()
      }, /*#__PURE__*/_createElement(RenderStyledListItem, {
        hideSymbol: hideSymbol,
        listSymbol: listSymbol,
        symbolAlign: this.symbolAlign,
        symbolStyle: convertSymbolStyle(symbolStyle, isOrdered),
        taskListConfig: taskListConfig
      }, paragraph)));
    };

    _createClass(ListItem, [{
      key: "align",
      get: function get() {
        var node = this.props.node;
        return node.data.jc || 'left';
      }
    }, {
      key: "symbolAlign",
      get: function get() {
        var listConfig = this.props.node.data.list;
        var listStyle = listConfig.listStyle;

        if (listStyle && ['upperRoman', 'lowerRoman'].includes(listStyle.format)) {
          return 'right';
        } else {
          return 'left';
        }
      }
    }, {
      key: "isListGroupAvailable",
      get: function get() {
        return isListGroupAvailable(this.props.controller);
      }
    }]);

    return ListItem;
  }(React.Component);

  ;
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/_createElement(ListItem, _extends({}, props, {
      nodeRef: ref
    }));
  });
}
//# sourceMappingURL=createListItem.js.map