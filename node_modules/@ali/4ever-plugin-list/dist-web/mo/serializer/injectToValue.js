import { Value, Injection } from '@ali/4ever-cangjie';
import List from "../models";
import { getListOrderData } from "./putListOrder";
/**
 * 对 fragment 进行 data inject
 * 目前主要处理的场景是 list 的 injection data，有序列表的符号需要通过 injection 来计算
 * @param value
 */

export default function injectValueData(value) {
  var listBlocks = value.document.getBlocks().filter(List.isList); // listId 去重

  var listIdMap = new Map();
  listBlocks.forEach(function (block) {
    var list = block.data.list;
    listIdMap.set((list == null ? void 0 : list.listId) || '', true);
  }); // injection 可能为一组

  var injectionMap = new Map();
  listIdMap.forEach(function (v, key) {
    var listInjections = getListOrderData(value.document, key);
    listInjections.forEach(function (inject) {
      // 如果 key 已经存在 injections，则 concat 在末尾
      if (injectionMap.has(inject.key)) {
        var injections = injectionMap.get(inject.key) || [];
        injectionMap.set(inject.key, injections.concat(inject));
      }

      injectionMap.set(inject.key, [inject]);
    });
  }); // 注入 injections 进入 node 节点

  var injectedDocument = value.document.mapDescendants(function (node) {
    if (injectionMap.has(node.key)) {
      var injections = injectionMap.get(node.key);
      return Injection.injectIntoNode(injections, node);
    }

    return node;
  });
  return Value.create({
    document: injectedDocument
  });
}
//# sourceMappingURL=injectToValue.js.map