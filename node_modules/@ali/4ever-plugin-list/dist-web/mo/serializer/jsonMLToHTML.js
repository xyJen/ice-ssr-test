import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { getTagName, getChildren, getAttributes } from '@ali/4ever-utils';
import { orderListStyleMap, bulletListStyleMap } from "./constants";
import { normalizeJsonMl } from "./normalizeJsonML";
import { mapping } from "../../utils/listStyleMapping";

function getListStyle(data) {
  var _data$level = data.level,
      level = _data$level === void 0 ? 0 : _data$level,
      listStyleType = data.listStyleType,
      listStyle = data.listStyle;
  var listLevel = Math.max(0, level);

  if (!listStyle && listStyleType) {
    var styleTumple = mapping[listStyleType];
    return styleTumple[listLevel % styleTumple.length];
  }

  return listStyle;
}

function getListStyleType(data) {
  var _data$isOrdered = data.isOrdered,
      isOrdered = _data$isOrdered === void 0 ? false : _data$isOrdered,
      _data$level2 = data.level,
      level = _data$level2 === void 0 ? 0 : _data$level2,
      isTaskList = data.isTaskList;
  var listLevel = Math.max(0, level);
  var listStyle = getListStyle(data);
  var listStyleType;

  if (listStyle) {
    listStyleType = isOrdered ? orderListStyleMap.get(listStyle.format) : bulletListStyleMap[listLevel % 3];
  }

  return isTaskList ? 'none' : listStyleType;
}

var Ul = function Ul(props) {
  var key = props.key,
      children = props.children,
      node = props.node;
  var attrs = getAttributes(node) || {};
  var listStyleType = getListStyleType(attrs);
  return /*#__PURE__*/_createElement("ul", {
    key: key,
    style: {
      listStyleType: listStyleType
    }
  }, children);
};

var Ol = function Ol(props) {
  var key = props.key,
      children = props.children,
      node = props.node;
  var attrs = getAttributes(node) || {};
  var _ref = attrs,
      start = _ref.start;
  var listStyleType = getListStyleType(attrs);
  return /*#__PURE__*/_createElement("ol", {
    key: key,
    start: start && start > 1 ? start : undefined,
    style: {
      listStyleType: listStyleType
    }
  }, children);
};

var Li = function Li(props) {
  var key = props.key,
      children = props.children;
  return /*#__PURE__*/_createElement("li", {
    key: key
  }, children);
};

var tagToComponent = {
  ul: Ul,
  ol: Ol,
  li: Li
};
var rule = {
  name: 'list',
  match: function match(node) {
    var tagName = getTagName(node);
    return !!tagToComponent[tagName];
  },
  convert: function convert(node, key, _convert) {
    if (key === void 0) {
      key = [];
    }

    var tagName = getTagName(node);
    var Component = tagToComponent[tagName];
    var children = getChildren(node).map(function (child, index) {
      return _convert(child, [].concat(key, [index]));
    });
    return /*#__PURE__*/_createElement(Component, {
      key: key.toString(),
      node: node
    }, children);
  },
  hooks: {
    before: normalizeJsonMl
  }
};
export default rule;
//# sourceMappingURL=jsonMLToHTML.js.map