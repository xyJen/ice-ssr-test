{"version":3,"sources":["../../../../src/mo/serializer/jsonMLToHTML.tsx"],"names":["React","getTagName","getChildren","getAttributes","orderListStyleMap","bulletListStyleMap","normalizeJsonMl","mapping","getListStyle","data","level","listStyleType","listStyle","listLevel","Math","max","styleTumple","length","getListStyleType","isOrdered","isTaskList","get","format","Ul","props","key","children","node","attrs","Ol","start","undefined","Li","tagToComponent","ul","ol","li","rule","name","match","tagName","convert","Component","map","child","index","toString","hooks","before"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  JsonML,\n  getTagName,\n  getChildren,\n  getAttributes,\n} from '@ali/4ever-utils';\nimport type { JsonMLToHTMLRule } from '@ali/4ever-cangjie';\nimport { ConvertFunc } from '@ali/4ever-cangjie';\nimport { orderListStyleMap, bulletListStyleMap } from './constants';\nimport { normalizeJsonMl } from './normalizeJsonML';\nimport type { ListProperties } from '../../utils/types';\nimport { mapping } from '../../utils/listStyleMapping';\n\nfunction getListStyle (data: ListProperties) {\n  const { level = 0, listStyleType, listStyle } = data;\n  const listLevel = Math.max(0, level);\n\n  if (!listStyle && listStyleType) {\n    const styleTumple = mapping[listStyleType];\n    return styleTumple[listLevel % styleTumple.length] as ListProperties['listStyle'];\n  }\n\n  return listStyle;\n}\n\nfunction getListStyleType (data: ListProperties) {\n  const { isOrdered = false, level = 0, isTaskList } = data;\n  const listLevel = Math.max(0, level);\n  const listStyle = getListStyle(data);\n  let listStyleType: string | undefined\n\n  if (listStyle) {\n    listStyleType = isOrdered ? orderListStyleMap.get(listStyle.format) : bulletListStyleMap[listLevel % 3];\n  }\n\n  return isTaskList ? 'none' : listStyleType;\n}\n\ntype ListElementProps = {\n  key?: string;\n  node: JsonML;\n};\n\nconst Ul: React.FC<ListElementProps> = (props) => {\n  const { key, children, node } = props;\n  const attrs = getAttributes(node) || {};\n  const listStyleType = getListStyleType(attrs);\n  return (\n    <ul key={key} style={{ listStyleType }}>{children}</ul>\n  );\n};\n\nconst Ol: React.FC<ListElementProps> = (props) => {\n  const { key, children, node } = props;\n  const attrs = getAttributes(node) || {};\n  const { start } = attrs as { start?: number };\n  const listStyleType = getListStyleType(attrs);\n  return (\n    <ol\n      key={key}\n      start={start && start > 1 ? start : undefined}\n      style={{ listStyleType }}\n    >\n      {children}\n    </ol>\n  );\n};\n\nconst Li: React.FC<ListElementProps> = (props) => {\n  const { key, children } = props;\n  return (\n    <li key={key}>{children}</li>\n  );\n};\n\nconst tagToComponent: Record<string, React.FC<ListElementProps>> = {\n  ul: Ul,\n  ol: Ol,\n  li: Li,\n};\n\nconst rule: JsonMLToHTMLRule = {\n  name: 'list',\n\n  match(node: JsonML): boolean {\n    const tagName = getTagName(node);\n    return !!tagToComponent[tagName];\n  },\n\n  convert(node: JsonML, key: number[] = [], convert: ConvertFunc): React.ReactElement {\n    const tagName = getTagName(node);\n    const Component = tagToComponent[tagName];\n    const children = getChildren(node)\n      .map((child, index: number) => convert(child, [...key, index]));\n\n    return (\n      <Component key={key.toString()} node={node}>{children}</Component>\n    );\n  },\n\n  hooks: {\n    before: normalizeJsonMl,\n  },\n};\n\nexport default rule;\n"],"file":"jsonMLToHTML.js"}