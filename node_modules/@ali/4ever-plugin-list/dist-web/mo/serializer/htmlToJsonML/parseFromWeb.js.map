{"version":3,"sources":["../../../../../src/mo/serializer/htmlToJsonML/parseFromWeb.ts"],"names":["getAttributes","getChildren","getLastChild","unitsConverter","normalizeJsonMLChildren","isEmpty","getFlattenedChildren","getRandomId","listTags","shouldFlattenChildren","FORMAT_MAP","TEXT_MAP","parseFromWeb","currentListType","nestDepth","idMap","name","onOpenTag","state","attr","style","styleObj","ind","listType","listStyleType","listStyle","type","wrapList","parent","peek","prevSibling","listData","list","currentListId","listId","currentListLevel","parseInt","start","isOrdered","isParentOrderedList","level","getListItemLevel","liListType","format","text","align","marginLeft","left","toPX","paddingLeft","indData","li","push","onCloseTag","unwrapList","pop","flattenedChildren","append","length"],"mappings":"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","sourcesContent":["import { MoState as State, MoAttributes as Attributes, HTMLToJsonMLRule } from '@ali/4ever-cangjie';\nimport {\n  getAttributes,\n  getChildren,\n  getLastChild,\n  JsonML,\n  unitsConverter,\n  normalizeJsonMLChildren,\n} from '@ali/4ever-utils';\nimport { isEmpty } from 'lodash-es';\nimport type { ParagraphData } from '@ali/4ever-plugin-paragraph';\n\nimport {\n  getFlattenedChildren,\n  getRandomId,\n  listTags,\n  shouldFlattenChildren,\n} from './utils';\nimport { FORMAT_MAP, TEXT_MAP } from './constants';\n\ntype IndentProperties = Required<ParagraphData>['ind'];\n\nfunction parseFromWeb(): HTMLToJsonMLRule {\n  let currentListType = '';\n  let nestDepth = 0;\n  const idMap = {};\n  return {\n    name: 'list',\n\n    onOpenTag: (state: State, name: string, attr: Attributes): boolean => {\n      if (!listTags[name]) return false;\n\n      const style = attr.styleObj;\n      const ind: IndentProperties = {};\n      const listType = style.listStyleType || style.listStyle || attr.type;\n\n      if (name === 'ol' || name === 'ul') {\n        // 兼容 list-style、list-style-type\n        state.wrapList(name === 'ol' ? 'ordered-list' : 'unordered-list');\n        /**\n         * 优先处理zhi的list\n         * 避免使用原来的listId, 导致页面出现不期望的连续段落列表, ol情况下\n         * 但是保留原来的level属性\n         * TODO\n         * 1. 如果复制到已有列表当中, 则需要拿到上下文数据.\n         * 2. 需要补全 Bi => ASL => Zhi => Copy HTML => Bi 的链路测试, 保证\n         * 预览模式下的插件复制到编辑模式下行为一致.\n         */\n        if (attr['data-listid']) {\n          const parent = state.peek();\n          const prevSibling = getLastChild(parent);\n          // @ts-ignore\n          const listData: any = getAttributes(prevSibling) || {};\n          if (prevSibling === null || !listData.list) {\n            state.currentListId = getRandomId(); // eslint-disable-line no-param-reassign\n          } else {\n            const currentListId = listData.list && listData.list.listId;\n            state.currentListId = currentListId;\n          }\n          state.currentListLevel = parseInt(attr['data-level'], 10);\n        } else if (attr.start && parseInt(attr.start) > 1) {\n          // 当前列表 start 大于 1时，就近继承所有样式相同的列表的 id\n          if (idMap[attr.style]) {\n            state.currentListId = idMap[attr.style];\n          }\n        } else if (!state.currentListId || attr.start === '1') {\n          state.currentListId = getRandomId(); // eslint-disable-line no-param-reassign\n        } else if (!nestDepth && !attr.start) {\n          state.currentListId = getRandomId();\n        }\n        idMap[attr.style] = state.currentListId;\n        if (listType) {\n          currentListType = listType;\n        } else {\n          currentListType = '';\n        }\n        nestDepth++;\n      }\n\n      if (name === 'li') {\n        const listData = {\n          listId: state.currentListId,\n          isOrdered: state.isParentOrderedList(),\n          level: state.currentListLevel || state.getListItemLevel(),\n        };\n        const liListType = listType || currentListType;\n        if (liListType) {\n          const format = FORMAT_MAP[liListType] || 'bullet';\n          const text = format !== 'bullet' ? '%1.' : (TEXT_MAP[liListType] || '\\u25cf');\n          // @ts-ignore\n          listData.listStyle = {\n            format,\n            text,\n            align: 'left',\n          };\n        }\n\n        if (style.marginLeft) {\n          ind.left = unitsConverter.toPX(style.marginLeft);\n        }\n\n        if (style.paddingLeft) {\n          ind.left = (ind.left || 0) + unitsConverter.toPX(style.marginLeft);\n        }\n        const indData = isEmpty(ind) ? {} : { ind };\n        const li: JsonML = [\n          'p',\n          {\n            ...indData,\n            list: listData,\n          },\n        ] as JsonML;\n        state.push(li);\n      }\n      return true;\n    },\n\n    onCloseTag: (state: State, name: string): boolean => {\n      if (!listTags[name]) return false;\n\n      if (name === 'ol' || name === 'ul') {\n        state.unwrapList();\n        nestDepth--;\n      }\n\n      if (name === 'li') {\n        const li = state.pop();\n        if (shouldFlattenChildren(li)) {\n          const flattenedChildren: JsonML[] = getFlattenedChildren(li);\n          state.append(...flattenedChildren);\n        } else if (getChildren(li).length) {\n          state.append(normalizeJsonMLChildren(li));\n        }\n      }\n      return true;\n    },\n  };\n}\n\nexport default parseFromWeb;\n"],"file":"parseFromWeb.js"}