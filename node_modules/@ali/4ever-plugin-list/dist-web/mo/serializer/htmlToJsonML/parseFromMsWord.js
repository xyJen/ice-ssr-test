import _extends from "@babel/runtime/helpers/extends";
import { getChildren, unitsConverter, normalizeJsonMLChildren } from '@ali/4ever-utils';
import { toStyleObject } from '@ali/4ever-cangjie';
import msWordParseSymbol from "./utils/msWordParseSymbol";
import { getFlattenedChildren, isMsWordList, removeSymbolText, shouldFlattenChildren, transfromIndLeft } from "./utils";
var MSO_LIST = 'msoList';

function parseFromMsWord() {
  var listData;
  var msoListMap = {};
  var temp = {
    // 是否在列表中
    wordList: false,
    // 是否是开始位置
    fromStart: true,
    // 上一个新增text内容
    preTxt: '',
    preStyle: '',
    // 上一个列表level
    lastLevel: 0,
    isOrdered: null
  };
  return {
    name: 'list',
    onOpenTag: function onOpenTag(state, name, attr) {
      var _attr$style;

      var inlineStyle;

      if (name === 'ol' || name === 'ul') {
        temp.isOrdered = name === 'ol';
      }

      if (isMsWordList(temp.preStyle) && (_attr$style = attr.style) != null && _attr$style.includes('mso')) {
        inlineStyle = toStyleObject(attr.style);

        if (inlineStyle.fontSize) {
          listData.list.symbolStyle = _extends({}, listData.list.symbolStyle, {
            sz: parseInt(inlineStyle.fontSize)
          });
        }

        if (inlineStyle.color) {
          listData.list.symbolStyle = _extends({}, listData.list.symbolStyle, {
            color: inlineStyle.color
          });
        }

        temp.preStyle = '';
      }

      if (!isMsWordList(attr == null ? void 0 : attr.style)) {
        return false;
      }

      temp.preStyle = attr.style;
      inlineStyle = inlineStyle || toStyleObject(attr.style);

      if (!inlineStyle[MSO_LIST]) {
        return false;
      }

      state.wrapList('ordered-list');
      temp.wordList = true;
      var mso = inlineStyle[MSO_LIST].split(' ');
      var level = Math.max(parseInt(mso[1].slice(5)) - 1, 0);
      var listId = mso[2];
      var type = name.includes('h') ? name : 'p';
      var indLeft = transfromIndLeft(inlineStyle.marginLeft || '', level);

      if (inlineStyle.textIndent) {
        var textIndent = unitsConverter.toPX(inlineStyle.textIndent);

        if (textIndent > 0) {
          indLeft += textIndent;
        }
      }

      state.currentListId = listId;
      state.currentListLevel = level;

      if (!msoListMap[listId]) {
        msoListMap[listId] = {};
      }

      if (msoListMap[listId][level] === undefined || level > temp.lastLevel) {
        msoListMap[listId][level] = 1;
      } else {
        msoListMap[listId][level]++;
      }

      listData = {
        list: {
          listId: listId,
          isOrdered: state.isParentOrderedList(),
          level: level
        },
        ind: {
          left: indLeft
        },
        jc: inlineStyle.textAlign || 'left'
      };

      if (name.includes('h')) {
        listData.list.symbolStyle = {
          bold: true
        };
      }

      var li = [type, listData];
      state.push(li);
      return true;
    },
    onText: function onText(state, txt) {
      if (!temp.wordList) return false;

      if (temp.fromStart && txt.trim() !== '') {
        // 通过解析text内容，获取列表类型，更新列表信息
        temp.fromStart = false;
        var listId = state.currentListId;
        var level = state.currentListLevel;
        if (!listId || level === undefined || level === null) return false;

        var _msWordParseSymbol = msWordParseSymbol(txt, msoListMap[listId][level], level, temp.isOrdered),
            format = _msWordParseSymbol[0],
            text = _msWordParseSymbol[1],
            type = _msWordParseSymbol[2];

        if (format !== 'bullet') {
          state.unwrapList();
          state.wrapList('ordered-list');
        }

        listData.list.isOrdered = format !== 'bullet';
        listData.list.listStyleType = type;
        listData.list.listStyle = _extends({}, listData.list.listStyle, {
          format: format,
          text: text
        });
      }

      if (temp.preTxt.trim() !== '' && !(!listData.list.isOrdered && temp.preTxt.length !== 1)) {
        // 删除项目符号相关text，仅保留列表内容
        removeSymbolText(state, temp.preTxt);
      }

      temp.preTxt += txt;
      return false;
    },
    onCloseTag: function onCloseTag(state, name, attr) {
      if (name === 'ol' || name === 'ul') {
        temp.isOrdered = null;
      }

      if (!isMsWordList(attr == null ? void 0 : attr.style)) {
        return false;
      }

      temp.wordList = false;
      temp.fromStart = true;
      state.unwrapList();
      var li = state.pop();

      if (shouldFlattenChildren(li)) {
        var flattenedChildren = getFlattenedChildren(li);
        state.append.apply(state, flattenedChildren);
      } else if (getChildren(li).length) {
        state.append(normalizeJsonMLChildren(li));
      }

      temp.preTxt = '';
      return true;
    }
  };
}

export default parseFromMsWord;
//# sourceMappingURL=parseFromMsWord.js.map