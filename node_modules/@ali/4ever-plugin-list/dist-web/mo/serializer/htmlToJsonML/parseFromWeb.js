import _extends from "@babel/runtime/helpers/extends";
import { getAttributes, getChildren, getLastChild, unitsConverter, normalizeJsonMLChildren } from '@ali/4ever-utils';
import { isEmpty } from 'lodash-es';
import { getFlattenedChildren, getRandomId, listTags, shouldFlattenChildren } from "./utils";
import { FORMAT_MAP, TEXT_MAP } from "./constants";

function parseFromWeb() {
  var currentListType = '';
  var nestDepth = 0;
  var idMap = {};
  return {
    name: 'list',
    onOpenTag: function onOpenTag(state, name, attr) {
      if (!listTags[name]) return false;
      var style = attr.styleObj;
      var ind = {};
      var listType = style.listStyleType || style.listStyle || attr.type;

      if (name === 'ol' || name === 'ul') {
        // 兼容 list-style、list-style-type
        state.wrapList(name === 'ol' ? 'ordered-list' : 'unordered-list');
        /**
         * 优先处理zhi的list
         * 避免使用原来的listId, 导致页面出现不期望的连续段落列表, ol情况下
         * 但是保留原来的level属性
         * TODO
         * 1. 如果复制到已有列表当中, 则需要拿到上下文数据.
         * 2. 需要补全 Bi => ASL => Zhi => Copy HTML => Bi 的链路测试, 保证
         * 预览模式下的插件复制到编辑模式下行为一致.
         */

        if (attr['data-listid']) {
          var parent = state.peek();
          var prevSibling = getLastChild(parent); // @ts-ignore

          var listData = getAttributes(prevSibling) || {};

          if (prevSibling === null || !listData.list) {
            state.currentListId = getRandomId(); // eslint-disable-line no-param-reassign
          } else {
            var currentListId = listData.list && listData.list.listId;
            state.currentListId = currentListId;
          }

          state.currentListLevel = parseInt(attr['data-level'], 10);
        } else if (attr.start && parseInt(attr.start) > 1) {
          // 当前列表 start 大于 1时，就近继承所有样式相同的列表的 id
          if (idMap[attr.style]) {
            state.currentListId = idMap[attr.style];
          }
        } else if (!state.currentListId || attr.start === '1') {
          state.currentListId = getRandomId(); // eslint-disable-line no-param-reassign
        } else if (!nestDepth && !attr.start) {
          state.currentListId = getRandomId();
        }

        idMap[attr.style] = state.currentListId;

        if (listType) {
          currentListType = listType;
        } else {
          currentListType = '';
        }

        nestDepth++;
      }

      if (name === 'li') {
        var _listData = {
          listId: state.currentListId,
          isOrdered: state.isParentOrderedList(),
          level: state.currentListLevel || state.getListItemLevel()
        };
        var liListType = listType || currentListType;

        if (liListType) {
          var format = FORMAT_MAP[liListType] || 'bullet';
          var text = format !== 'bullet' ? '%1.' : TEXT_MAP[liListType] || "\u25CF"; // @ts-ignore

          _listData.listStyle = {
            format: format,
            text: text,
            align: 'left'
          };
        }

        if (style.marginLeft) {
          ind.left = unitsConverter.toPX(style.marginLeft);
        }

        if (style.paddingLeft) {
          ind.left = (ind.left || 0) + unitsConverter.toPX(style.marginLeft);
        }

        var indData = isEmpty(ind) ? {} : {
          ind: ind
        };
        var li = ['p', _extends({}, indData, {
          list: _listData
        })];
        state.push(li);
      }

      return true;
    },
    onCloseTag: function onCloseTag(state, name) {
      if (!listTags[name]) return false;

      if (name === 'ol' || name === 'ul') {
        state.unwrapList();
        nestDepth--;
      }

      if (name === 'li') {
        var li = state.pop();

        if (shouldFlattenChildren(li)) {
          var flattenedChildren = getFlattenedChildren(li);
          state.append.apply(state, flattenedChildren);
        } else if (getChildren(li).length) {
          state.append(normalizeJsonMLChildren(li));
        }
      }

      return true;
    }
  };
}

export default parseFromWeb;
//# sourceMappingURL=parseFromWeb.js.map