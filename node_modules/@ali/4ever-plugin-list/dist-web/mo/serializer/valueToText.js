import { Block } from '@ali/4ever-cangjie';
import { Paragraph } from '@ali/4ever-plugin-paragraph';
import { generateSymbol } from "../../utils/generateSymbol";
import injectToValue from "./injectToValue";
/**
 * 任务列表 checked 状态: ☑
 */

export var CHECK_LIST_CHECKED_SYMBOL = "\u2611";
/**
 * 任务列表 unchecked 状态: ☐
 */

export var CHECK_LIST_UNCHECKED_SYMBOL = "\u2610";
var INDENT = '\t';
var SPACE = ' ';
var BREAK = '\n';
/**
 * 列表转换成纯文本
 * 目前支持导出的符号有三种：无序列表、有序列表、任务列表，且有序列表的符号会预先设置好 injection 的等级
 */

var valueToText = {
  name: 'list',
  match: function match(node) {
    return Paragraph.isParagraph(node) && !!node.data.list;
  },
  convert: function convert(node, _convert) {
    if (!Block.isBlock(node)) {
      return node.text;
    }

    var text = node.nodes.map(function (child) {
      return _convert(child);
    }).join('');

    var _ref = node.data || {},
        _ref$list = _ref.list,
        list = _ref$list === void 0 ? {} : _ref$list,
        _ref$start = _ref.start,
        start = _ref$start === void 0 ? 1 : _ref$start,
        _ref$step = _ref.step,
        step = _ref$step === void 0 ? '1' : _ref$step;

    var _list$level = list.level,
        level = _list$level === void 0 ? 0 : _list$level,
        _list$isOrdered = list.isOrdered,
        isOrdered = _list$isOrdered === void 0 ? false : _list$isOrdered,
        _list$isTaskList = list.isTaskList,
        isTaskList = _list$isTaskList === void 0 ? false : _list$isTaskList,
        _list$isChecked = list.isChecked,
        isChecked = _list$isChecked === void 0 ? false : _list$isChecked,
        listStyle = list.listStyle,
        listStyleType = list.listStyleType; // level 为负值会抛错

    var safeLevel = level > 0 ? level : 0;
    var indent = Array(safeLevel).fill(INDENT).join('');
    var listSymbol = '';

    if (isTaskList) {
      // 任务列表用 Unicode 字符
      listSymbol = isChecked ? CHECK_LIST_CHECKED_SYMBOL : CHECK_LIST_UNCHECKED_SYMBOL;
    } else {
      // 普通列表计算 symbol
      listSymbol = generateSymbol(level, start, step, isOrdered, listStyleType, listStyle);
    }

    return indent + listSymbol + SPACE + text + BREAK;
  },
  hooks: {
    before: injectToValue
  }
};
export default valueToText;
//# sourceMappingURL=valueToText.js.map