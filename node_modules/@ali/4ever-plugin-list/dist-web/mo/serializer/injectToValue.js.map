{"version":3,"sources":["../../../../src/mo/serializer/injectToValue.ts"],"names":["Value","Injection","List","getListOrderData","injectValueData","value","listBlocks","document","getBlocks","filter","isList","listIdMap","Map","forEach","block","list","data","set","listId","injectionMap","v","key","listInjections","inject","has","injections","get","concat","injectedDocument","mapDescendants","node","injectIntoNode","create"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,SAAhB,QAAiC,oBAAjC;AACA,OAAOC,IAAP;AACA,SAASC,gBAAT;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAA8C;AAC3D,MAAMC,UAAU,GAAGD,KAAK,CAACE,QAAN,CAAeC,SAAf,GAA2BC,MAA3B,CAAkCP,IAAI,CAACQ,MAAvC,CAAnB,CAD2D,CAE3D;;AACA,MAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACAN,EAAAA,UAAU,CAACO,OAAX,CAAmB,UAACC,KAAD,EAAW;AAAA,QACpBC,IADoB,GACXD,KAAK,CAACE,IADK,CACpBD,IADoB;AAE5BJ,IAAAA,SAAS,CAACM,GAAV,CAAc,CAAAF,IAAI,QAAJ,YAAAA,IAAI,CAAEG,MAAN,KAAgB,EAA9B,EAAkC,IAAlC;AACD,GAHD,EAJ2D,CAQ3D;;AACA,MAAMC,YAAY,GAAG,IAAIP,GAAJ,EAArB;AACAD,EAAAA,SAAS,CAACE,OAAV,CAAkB,UAACO,CAAD,EAAIC,GAAJ,EAAY;AAC5B,QAAMC,cAAc,GAAGnB,gBAAgB,CAACE,KAAK,CAACE,QAAP,EAAiBc,GAAjB,CAAvC;AACAC,IAAAA,cAAc,CAACT,OAAf,CAAuB,UAACU,MAAD,EAAY;AACjC;AACA,UAAIJ,YAAY,CAACK,GAAb,CAAiBD,MAAM,CAACF,GAAxB,CAAJ,EAAkC;AAChC,YAAMI,UAAU,GAAGN,YAAY,CAACO,GAAb,CAAiBH,MAAM,CAACF,GAAxB,KAAgC,EAAnD;AACAF,QAAAA,YAAY,CAACF,GAAb,CAAiBM,MAAM,CAACF,GAAxB,EAA6BI,UAAU,CAACE,MAAX,CAAkBJ,MAAlB,CAA7B;AACD;;AACDJ,MAAAA,YAAY,CAACF,GAAb,CAAiBM,MAAM,CAACF,GAAxB,EAA6B,CAACE,MAAD,CAA7B;AACD,KAPD;AAQD,GAVD,EAV2D,CAqB3D;;AACA,MAAMK,gBAAgB,GAAGvB,KAAK,CAACE,QAAN,CAAesB,cAAf,CAA8B,UAACC,IAAD,EAAU;AAC/D,QAAIX,YAAY,CAACK,GAAb,CAAiBM,IAAI,CAACT,GAAtB,CAAJ,EAAgC;AAC9B,UAAMI,UAAU,GAAGN,YAAY,CAACO,GAAb,CAAiBI,IAAI,CAACT,GAAtB,CAAnB;AACA,aAAOpB,SAAS,CAAC8B,cAAV,CAAyBN,UAAzB,EAAqCK,IAArC,CAAP;AACD;;AACD,WAAOA,IAAP;AACD,GANwB,CAAzB;AAOA,SAAO9B,KAAK,CAACgC,MAAN,CAAa;AAAEzB,IAAAA,QAAQ,EAAEqB;AAAZ,GAAb,CAAP;AACD","sourcesContent":["import { Value, Injection } from '@ali/4ever-cangjie';\nimport List from '../models';\nimport { getListOrderData } from './putListOrder';\n\n/**\n * 对 fragment 进行 data inject\n * 目前主要处理的场景是 list 的 injection data，有序列表的符号需要通过 injection 来计算\n * @param value\n */\nexport default function injectValueData(value: Value): Value {\n  const listBlocks = value.document.getBlocks().filter(List.isList);\n  // listId 去重\n  const listIdMap = new Map<string, boolean>();\n  listBlocks.forEach((block) => {\n    const { list } = block.data;\n    listIdMap.set(list?.listId || '', true);\n  });\n  // injection 可能为一组\n  const injectionMap = new Map<string, Injection[]>();\n  listIdMap.forEach((v, key) => {\n    const listInjections = getListOrderData(value.document, key);\n    listInjections.forEach((inject) => {\n      // 如果 key 已经存在 injections，则 concat 在末尾\n      if (injectionMap.has(inject.key)) {\n        const injections = injectionMap.get(inject.key) || [];\n        injectionMap.set(inject.key, injections.concat(inject));\n      }\n      injectionMap.set(inject.key, [inject]);\n    });\n  });\n  // 注入 injections 进入 node 节点\n  const injectedDocument = value.document.mapDescendants((node) => {\n    if (injectionMap.has(node.key)) {\n      const injections = injectionMap.get(node.key)!;\n      return Injection.injectIntoNode(injections, node);\n    }\n    return node;\n  });\n  return Value.create({ document: injectedDocument });\n}\n"],"file":"injectToValue.js"}