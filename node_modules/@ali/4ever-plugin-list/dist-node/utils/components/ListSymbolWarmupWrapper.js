"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ListSymbolWarmupWrapper;

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _measure = require("../measure");

var _generateSymbol = require("../generateSymbol");

var _getSymbolRightSpace = require("../getSymbolRightSpace");

var _getSymbolStyleByKey = require("../getSymbolStyleByKey");

const _createElement = /*#__PURE__*/React.createElement;

function ListSymbolWarmupWrapper({
  controller,
  children
}) {
  React.useMemo(() => {
    const document = controller.view;
    const batch = {};
    document.forEachDescendant(node => {
      if (!_everCangjie.Block.isBlock(node)) {
        return;
      }

      const listConfig = node.data.list;

      if (!listConfig || listConfig.isTaskList) {
        return;
      }

      const {
        step,
        start = 1
      } = node.data;
      const {
        isOrdered,
        level = 0,
        listStyle,
        listStyleType,
        symbolStyle
      } = listConfig;
      const symbol = (0, _generateSymbol.generateSymbol)(level, Number(start), step, isOrdered, listStyleType, listStyle);
      const style = (0, _getSymbolStyleByKey.convertSymbolStyle)(symbolStyle, isOrdered);

      for (let i = 0; i < symbol.length; i += 1) {
        const char = _measure.CJK_REG.test(symbol[i]) ? 'ä¸­' : symbol[i];

        if (!batch[char]) {
          batch[char] = {};
        }

        const fontFamilies = batch[char];
        const fontFamily = style.fontFamily || _getSymbolRightSpace.SYMBOL_DEFAULT_FONT;

        if (!fontFamilies[fontFamily]) {
          fontFamilies[fontFamily] = new Set();
        }

        const sizes = fontFamilies[fontFamily];
        sizes.add(String(style.fontSize || _getSymbolRightSpace.SYMBOL_DEFAULT_SIZE));
      }
    });

    _measure.TextMeasure.warmup(batch);
  }, []);
  return /*#__PURE__*/_createElement(React.Fragment, null, children);
}
//# sourceMappingURL=ListSymbolWarmupWrapper.js.map