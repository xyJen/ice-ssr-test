"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RenderStyledListItem = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _checkbox = require("../component/checkbox");

var _getSymbolRightSpace = require("./getSymbolRightSpace");

var _getStickerSymbol = _interopRequireDefault(require("./getStickerSymbol"));

var _constant = require("./constant");

const _createElement = /*#__PURE__*/_react.default.createElement;
// TODO: import from Cangjie
const SELECTION_COLOR = 'rgba(1, 134, 251, 0.3)';

const ItemSymbolWrapper = /*#__PURE__*/_styledComponents.default.span(["display:inline-block;margin-right:", "px;white-space:nowrap;&.symbol-align-right{background-color:unset !important;position:relative;& .list-symbol{background-color:", ";position:absolute;right:0;bottom:-0.3em;line-height:1.54;transform:translateY(3px);}}&.isSelected .list-symbol-overlay{background:", ";}font-family:Arial", ";line-height:1.4;"], props => {
  return props.marginRight;
}, props => props.style.backgroundColor || 'unset', SELECTION_COLOR, props => {
  if (props.isOrdered === undefined) return '';
  return props.isOrdered ? '' : '!important';
});

const Symbol = /*#__PURE__*/_styledComponents.default.span(["width:fit-content;line-height:initial;"]);

const RenderStyledListItem = props => {
  const {
    children,
    hideSymbol,
    isSelect,
    listSymbol,
    onSelectSymbol,
    symbolAlign = 'left',
    symbolStyle = {},
    taskListConfig
  } = props;
  const [symbolSelected, setSymbolSelected] = (0, _react.useState)(false);

  const symbolRef = _react.default.useRef(null);

  const isTaskList = taskListConfig?.isTaskList;
  const isOrdered = taskListConfig?.isOrdered;

  const onSelect = () => {
    if (!isTaskList && onSelectSymbol) {
      onSelectSymbol(!symbolSelected);
    }
  };

  const marginRight = (0, _react.useMemo)(() => {
    return isTaskList ? 0 : (0, _getSymbolRightSpace.getSymbolRightSpace)(symbolAlign, String(listSymbol), symbolStyle);
  }, [isTaskList, listSymbol, symbolAlign, symbolStyle]);
  (0, _react.useEffect)(() => {
    setSymbolSelected(!!isSelect);
  }, [isSelect]);
  let taskListBox;

  if (taskListConfig) {
    const {
      isChecked,
      handleChange
    } = taskListConfig;
    taskListBox = isTaskList && /*#__PURE__*/_createElement(_checkbox.ListCheckBox, {
      checked: isChecked,
      onChange: handleChange
    });
  }

  const classNames = [`symbol-align-${symbolAlign}`];

  if (symbolSelected) {
    classNames.push('isSelected');
  } // TODO: HACK 目前无序原点垂直不居中，后续@灯少替换新的 unicode 后这里可以去掉


  const symString = taskListBox || listSymbol;
  const symStyle = isTaskList ? {} : symbolStyle;
  const wrapperStyle = { ...symStyle
  };

  if (_constant.SYMBOL_MAGIC_OFFSET_Y_MAP[symString]) {
    wrapperStyle.transform = `translateY(-${_constant.SYMBOL_MAGIC_OFFSET_Y_MAP[symString]}%)`;
  }

  if (_constant.SYMBOL_MAGIC_SIZE_MAP[symString]) {
    wrapperStyle.fontSize = `${(parseInt(wrapperStyle.fontSize, 10) || 11) - _constant.SYMBOL_MAGIC_SIZE_MAP[symString]}pt`;

    if (_constant.SYMBOL_MAGIC_SIZE_MAP[symString] > 2) {
      wrapperStyle.transform = `${wrapperStyle.transform || ''} scale(0.8)`;
    }
  } // const wrapperStyle = useMemo(() =>)


  const matchSticker = symString?.match?.(_constant.STICKER_REG);
  const sym = matchSticker ? (0, _getStickerSymbol.default)(matchSticker[1], symStyle.fontSize) : symString;
  const symbolOverlay = symbolSelected ? /*#__PURE__*/_createElement("span", {
    className: "list-symbol-overlay"
  }, sym) : sym;
  const symbolContent = symbolAlign === 'right' ? /*#__PURE__*/_createElement(Symbol, {
    "data-testid": "list-symbol",
    className: "list-symbol",
    style: symStyle
  }, symbolOverlay) : symbolOverlay;
  const itemSymbol = !hideSymbol && listSymbol !== 'undefined.' && (isTaskList ? taskListBox : /*#__PURE__*/_createElement(ItemSymbolWrapper, {
    ref: symbolRef,
    className: classNames.join(' '),
    isOrdered: isOrdered,
    marginRight: marginRight,
    style: wrapperStyle,
    onMouseDown: onSelect,
    "data-testid": "symbol-wrapper"
  }, symbolContent));
  return /*#__PURE__*/_createElement(_react.default.Fragment, null, itemSymbol, children);
};

exports.RenderStyledListItem = RenderStyledListItem;
//# sourceMappingURL=renderStyledListItem.js.map