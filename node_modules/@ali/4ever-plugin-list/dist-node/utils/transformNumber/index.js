"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "arabic2Chinese", {
  enumerable: true,
  get: function () {
    return _arabic2Chinese.default;
  }
});
Object.defineProperty(exports, "CHINESE_NUMBER_LIST", {
  enumerable: true,
  get: function () {
    return _arabic2Chinese.CHINESE_NUMBER_LIST;
  }
});
Object.defineProperty(exports, "CHINESE_UNIT_LIST", {
  enumerable: true,
  get: function () {
    return _arabic2Chinese.CHINESE_UNIT_LIST;
  }
});
Object.defineProperty(exports, "arabic2Letter", {
  enumerable: true,
  get: function () {
    return _arabic2Letter.default;
  }
});
Object.defineProperty(exports, "LETTER_LIST", {
  enumerable: true,
  get: function () {
    return _arabic2Letter.LETTER_LIST;
  }
});
Object.defineProperty(exports, "arabic2Roma", {
  enumerable: true,
  get: function () {
    return _arabic2Roma.default;
  }
});
Object.defineProperty(exports, "ROMA_LIST", {
  enumerable: true,
  get: function () {
    return _arabic2Roma.ROMA_LIST;
  }
});
Object.defineProperty(exports, "arabic2Darabic", {
  enumerable: true,
  get: function () {
    return _arabic2Darabic.default;
  }
});
exports.transformString = exports.transformNumber = void 0;

var _arabic2Chinese = _interopRequireWildcard(require("./arabic2Chinese"));

var _arabic2Letter = _interopRequireWildcard(require("./arabic2Letter"));

var _arabic2Roma = _interopRequireWildcard(require("./arabic2Roma"));

var _arabic2Darabic = _interopRequireDefault(require("./arabic2Darabic"));

var _chinese2Arabic = _interopRequireDefault(require("./chinese2Arabic"));

var _roma2Arabic = _interopRequireDefault(require("./roma2Arabic"));

var _letter2Arabic = _interopRequireDefault(require("./letter2Arabic"));

const transformNumber = (num, type) => {
  let result = '';

  switch (type) {
    case 'decimalZero':
      result = (0, _arabic2Darabic.default)(num);
      break;

    case 'chineseCountingThousand':
    case 'chineseCounting':
    case 'japaneseCounting':
      result = (0, _arabic2Chinese.default)(num);
      break;

    case 'upperLetter':
    case 'lowerLetter':
      result = (0, _arabic2Letter.default)(num, type.slice(0, 5));
      break;

    case 'upperRoman':
    case 'lowerRoman':
      result = (0, _arabic2Roma.default)(num, type.slice(0, 5));
      break;

    default:
      result = String(num);
      break;
  }

  return result;
};

exports.transformNumber = transformNumber;

const transformString = (str, type) => {
  let result = 0;

  switch (type) {
    case 'chinese':
      result = (0, _chinese2Arabic.default)(str);
      break;

    case 'roman':
      result = (0, _roma2Arabic.default)(str);
      break;

    case 'letter':
      result = (0, _letter2Arabic.default)(str);
      break;

    default:
      return parseInt(str, 10);
  }

  return result;
};

exports.transformString = transformString;
//# sourceMappingURL=index.js.map