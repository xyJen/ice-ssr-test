"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupListContainer = exports.ListItemWrapper = void 0;

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _getJustifyContent = _interopRequireDefault(require("./getJustifyContent"));

// TODO: 插件迁移  list 不能对 heading 产生依赖(否则会有循环依赖)，这里先拷贝一份 HeadingTypes，待确认为什么 list 的组件需要有 heading 的 css 设置
var HeadingTypes;

(function (HeadingTypes) {
  HeadingTypes["Heading1"] = "heading-1";
  HeadingTypes["Heading2"] = "heading-2";
  HeadingTypes["Heading3"] = "heading-3";
  HeadingTypes["Heading4"] = "heading-4";
  HeadingTypes["Heading5"] = "heading-5";
  HeadingTypes["Heading6"] = "heading-6";
})(HeadingTypes || (HeadingTypes = {}));

const ListItemWrapper = /*#__PURE__*/_styledComponents.default.div(["display:flex;align-items:baseline;justify-content:", ";& [data-type='paragraph'],", "{overflow:hidden;}", " ", ""], props => (0, _getJustifyContent.default)(props.align), Object.keys(HeadingTypes).map(key => `[data-type='${HeadingTypes[key]}']`).join(','), props => {
  const isChecked = props['data-ischecked'];
  return isChecked ? 'span { text-decoration: line-through; } ' : '';
}, props => {
  const {
    contentStyle
  } = props;

  if (!contentStyle) {
    return '';
  }

  return `& [data-type="paragraph"] { width: ${contentStyle.width}; flex: ${contentStyle.flex}  }`;
});

exports.ListItemWrapper = ListItemWrapper;

const GroupListContainer = /*#__PURE__*/_styledComponents.default.div(["display:flex;width:100%;align-items:baseline;"]);

exports.GroupListContainer = GroupListContainer;
//# sourceMappingURL=styled.js.map