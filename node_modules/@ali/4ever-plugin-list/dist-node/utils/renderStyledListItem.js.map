{"version":3,"sources":["../../../src/utils/renderStyledListItem.tsx"],"names":["SELECTION_COLOR","ItemSymbolWrapper","styled","span","props","marginRight","style","backgroundColor","isOrdered","undefined","Symbol","RenderStyledListItem","children","hideSymbol","isSelect","listSymbol","onSelectSymbol","symbolAlign","symbolStyle","taskListConfig","symbolSelected","setSymbolSelected","symbolRef","React","useRef","isTaskList","onSelect","String","taskListBox","isChecked","handleChange","classNames","push","symString","symStyle","wrapperStyle","SYMBOL_MAGIC_OFFSET_Y_MAP","transform","SYMBOL_MAGIC_SIZE_MAP","fontSize","parseInt","matchSticker","match","STICKER_REG","sym","symbolOverlay","symbolContent","itemSymbol","join"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;uBAJ4B,a;AAwB5B;AACA,MAAMA,eAAe,GAAG,wBAAxB;;AACA,MAAMC,iBAAiB,gBAAGC,0BAAOC,IAAV,+VAMJC,KAAD,IAAW;AACzB,SAAOA,KAAK,CAACC,WAAb;AACD,CARoB,EAcID,KAAD,IAAWA,KAAK,CAACE,KAAN,CAAYC,eAAZ,IAA+B,OAd7C,EAuBLP,eAvBK,EAyBAI,KAAD,IAAW;AAC7B,MAAIA,KAAK,CAACI,SAAN,KAAoBC,SAAxB,EAAmC,OAAO,EAAP;AACnC,SAAOL,KAAK,CAACI,SAAN,GAAkB,EAAlB,GAAuB,YAA9B;AACD,CA5BoB,CAAvB;;AAgCA,MAAME,MAAM,gBAAGR,0BAAOC,IAAV,4CAAZ;;AAKO,MAAMQ,oBAA0D,GACrEP,KADwE,IAErE;AACH,QAAM;AACJQ,IAAAA,QADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA,WAAW,GAAG,MANV;AAOJC,IAAAA,WAAW,GAAG,EAPV;AAQJC,IAAAA;AARI,MASFf,KATJ;AAUA,QAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsC,qBAAS,KAAT,CAA5C;;AACA,QAAMC,SAAS,GAAGC,eAAMC,MAAN,CAA8B,IAA9B,CAAlB;;AACA,QAAMC,UAAU,GAAGN,cAAc,EAAEM,UAAnC;AACA,QAAMjB,SAAS,GAAGW,cAAc,EAAEX,SAAlC;;AACA,QAAMkB,QAAQ,GAAG,MAAM;AACrB,QAAI,CAACD,UAAD,IAAeT,cAAnB,EAAmC;AACjCA,MAAAA,cAAc,CAAC,CAACI,cAAF,CAAd;AACD;AACF,GAJD;;AAMA,QAAMf,WAAW,GAAG,oBAAQ,MAAM;AAChC,WAAOoB,UAAU,GACb,CADa,GAEb,8CAAoBR,WAApB,EAAiCU,MAAM,CAACZ,UAAD,CAAvC,EAAqDG,WAArD,CAFJ;AAGD,GAJmB,EAIjB,CAACO,UAAD,EAAaV,UAAb,EAAyBE,WAAzB,EAAsCC,WAAtC,CAJiB,CAApB;AAMA,wBAAU,MAAM;AACdG,IAAAA,iBAAiB,CAAC,CAAC,CAACP,QAAH,CAAjB;AACD,GAFD,EAEG,CAACA,QAAD,CAFH;AAIA,MAAIc,WAAJ;;AACA,MAAIT,cAAJ,EAAoB;AAClB,UAAM;AAAEU,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA8BX,cAApC;AACAS,IAAAA,WAAW,GAAGH,UAAU,iBACtB,eAAC,sBAAD;AAAc,MAAA,OAAO,EAAEI,SAAvB;AAAkC,MAAA,QAAQ,EAAEC;AAA5C,MADF;AAGD;;AACD,QAAMC,UAAU,GAAG,CAAE,gBAAed,WAAY,EAA7B,CAAnB;;AACA,MAAIG,cAAJ,EAAoB;AAClBW,IAAAA,UAAU,CAACC,IAAX,CAAgB,YAAhB;AACD,GAzCE,CA2CH;;;AACA,QAAMC,SAAS,GAAGL,WAAW,IAAIb,UAAjC;AACA,QAAMmB,QAAQ,GAAGT,UAAU,GAAG,EAAH,GAAQP,WAAnC;AACA,QAAMiB,YAAiC,GAAG,EAAE,GAAGD;AAAL,GAA1C;;AACA,MAAIE,oCAA0BH,SAA1B,CAAJ,EAA0C;AACxCE,IAAAA,YAAY,CAACE,SAAb,GAA0B,eAAcD,oCAA0BH,SAA1B,CAAqC,IAA7E;AACD;;AACD,MAAIK,gCAAsBL,SAAtB,CAAJ,EAAsC;AACpCE,IAAAA,YAAY,CAACI,QAAb,GAAyB,GAAE,CAACC,QAAQ,CAACL,YAAY,CAACI,QAAd,EAAkC,EAAlC,CAAR,IAAiD,EAAlD,IAAwDD,gCAAsBL,SAAtB,CAAiC,IAApH;;AACA,QAAIK,gCAAsBL,SAAtB,IAAmC,CAAvC,EAA0C;AACxCE,MAAAA,YAAY,CAACE,SAAb,GAA0B,GAAEF,YAAY,CAACE,SAAb,IAA0B,EAAG,aAAzD;AACD;AACF,GAvDE,CAyDH;;;AACA,QAAMI,YAAY,GAAGR,SAAS,EAAES,KAAX,GAAmBC,qBAAnB,CAArB;AACA,QAAMC,GAAG,GAAGH,YAAY,GAAG,+BAAiBA,YAAY,CAAC,CAAD,CAA7B,EAAkCP,QAAQ,CAACK,QAA3C,CAAH,GAAoEN,SAA5F;AAEA,QAAMY,aAAa,GAAGzB,cAAc,gBAClC;AAAM,IAAA,SAAS,EAAC;AAAhB,KAAuCwB,GAAvC,CADkC,GAGlCA,GAHF;AAMA,QAAME,aAAa,GACjB7B,WAAW,KAAK,OAAhB,gBACE,eAAC,MAAD;AACE,mBAAY,aADd;AAEE,IAAA,SAAS,EAAC,aAFZ;AAGE,IAAA,KAAK,EAAEiB;AAHT,KAKGW,aALH,CADF,GAQIA,aATN;AAWA,QAAME,UAAU,GAAG,CAAClC,UAAD,IAAeE,UAAU,KAAK,YAA9B,KACjBU,UAAU,GAAGG,WAAH,gBACR,eAAC,iBAAD;AACE,IAAA,GAAG,EAAEN,SADP;AAEE,IAAA,SAAS,EAAES,UAAU,CAACiB,IAAX,CAAgB,GAAhB,CAFb;AAGE,IAAA,SAAS,EAAExC,SAHb;AAIE,IAAA,WAAW,EAAEH,WAJf;AAKE,IAAA,KAAK,EAAE8B,YALT;AAME,IAAA,WAAW,EAAET,QANf;AAOE,mBAAY;AAPd,KASGoB,aATH,CAFe,CAAnB;AAeA,sBACE,8CACGC,UADH,EAEGnC,QAFH,CADF;AAMD,CArGM","sourcesContent":["import React, { PropsWithChildren, useMemo, useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ListCheckBox } from '../component/checkbox';\nimport { getSymbolRightSpace } from './getSymbolRightSpace';\nimport getStickerSymbol from './getStickerSymbol';\nimport { STICKER_REG, SYMBOL_MAGIC_OFFSET_Y_MAP, SYMBOL_MAGIC_SIZE_MAP } from './constant';\n\nexport interface IrenderStyledListItemProps {\n  listSymbol: string | number;\n  hideSymbol: boolean;\n  isSelect?: boolean;\n  symbolAlign: string;\n  showSelection?: boolean | undefined;\n  symbolStyle: React.CSSProperties;\n  contentStyle?: React.CSSProperties;\n  onSelectSymbol?: Function;\n  clearSelection?: Function;\n  taskListConfig?: {\n    isTaskList: boolean;\n    isChecked: boolean;\n    isOrdered: boolean;\n    handleChange?: (checked: boolean) => void;\n  };\n}\n\n// TODO: import from Cangjie\nconst SELECTION_COLOR = 'rgba(1, 134, 251, 0.3)';\nconst ItemSymbolWrapper = styled.span<{\n  marginRight: number;\n  isOrdered: boolean;\n  style: React.CSSProperties;\n}>`\n  display: inline-block;\n  margin-right: ${(props) => {\n    return props.marginRight;\n  }}px;\n  white-space: nowrap;\n  &.symbol-align-right {\n    background-color: unset !important;\n    position: relative;\n    & .list-symbol {\n      background-color: ${(props) => props.style.backgroundColor || 'unset'};\n      position: absolute;\n      right: 0;\n      bottom: -0.3em;\n      line-height: 1.54;\n      transform: translateY(3px);\n    }\n  }\n  &.isSelected .list-symbol-overlay {\n    background: ${SELECTION_COLOR};\n  }\n  font-family: Arial${(props) => {\n    if (props.isOrdered === undefined) return '';\n    return props.isOrdered ? '' : '!important';\n  }};\n  line-height: 1.4;\n`;\n\nconst Symbol = styled.span`\n  width: fit-content;\n  line-height: initial;\n`;\n\nexport const RenderStyledListItem: React.FC<IrenderStyledListItemProps> = (\n  props: PropsWithChildren<IrenderStyledListItemProps>,\n) => {\n  const {\n    children,\n    hideSymbol,\n    isSelect,\n    listSymbol,\n    onSelectSymbol,\n    symbolAlign = 'left',\n    symbolStyle = {},\n    taskListConfig,\n  } = props;\n  const [symbolSelected, setSymbolSelected] = useState(false);\n  const symbolRef = React.useRef<HTMLSpanElement>(null);\n  const isTaskList = taskListConfig?.isTaskList;\n  const isOrdered = taskListConfig?.isOrdered;\n  const onSelect = () => {\n    if (!isTaskList && onSelectSymbol) {\n      onSelectSymbol(!symbolSelected);\n    }\n  };\n\n  const marginRight = useMemo(() => {\n    return isTaskList\n      ? 0\n      : getSymbolRightSpace(symbolAlign, String(listSymbol), symbolStyle);\n  }, [isTaskList, listSymbol, symbolAlign, symbolStyle]);\n\n  useEffect(() => {\n    setSymbolSelected(!!isSelect);\n  }, [isSelect]);\n\n  let taskListBox;\n  if (taskListConfig) {\n    const { isChecked, handleChange } = taskListConfig;\n    taskListBox = isTaskList && (\n      <ListCheckBox checked={isChecked} onChange={handleChange} />\n    );\n  }\n  const classNames = [`symbol-align-${symbolAlign}`];\n  if (symbolSelected) {\n    classNames.push('isSelected');\n  }\n\n  // TODO: HACK 目前无序原点垂直不居中，后续@灯少替换新的 unicode 后这里可以去掉\n  const symString = taskListBox || listSymbol;\n  const symStyle = isTaskList ? {} : symbolStyle;\n  const wrapperStyle: React.CSSProperties = { ...symStyle };\n  if (SYMBOL_MAGIC_OFFSET_Y_MAP[symString]) {\n    wrapperStyle.transform = `translateY(-${SYMBOL_MAGIC_OFFSET_Y_MAP[symString]}%)`;\n  }\n  if (SYMBOL_MAGIC_SIZE_MAP[symString]) {\n    wrapperStyle.fontSize = `${(parseInt(wrapperStyle.fontSize as string, 10) || 11) - SYMBOL_MAGIC_SIZE_MAP[symString]}pt`;\n    if (SYMBOL_MAGIC_SIZE_MAP[symString] > 2) {\n      wrapperStyle.transform = `${wrapperStyle.transform || ''} scale(0.8)`;\n    }\n  }\n\n  // const wrapperStyle = useMemo(() =>)\n  const matchSticker = symString?.match?.(STICKER_REG);\n  const sym = matchSticker ? getStickerSymbol(matchSticker[1], symStyle.fontSize as string) : symString;\n\n  const symbolOverlay = symbolSelected ? (\n    <span className=\"list-symbol-overlay\">{sym}</span>\n  ) : (\n    sym\n  );\n\n  const symbolContent =\n    symbolAlign === 'right' ? (\n      <Symbol\n        data-testid=\"list-symbol\"\n        className=\"list-symbol\"\n        style={symStyle}\n      >\n        {symbolOverlay}\n      </Symbol>\n    ) : symbolOverlay;\n\n  const itemSymbol = !hideSymbol && listSymbol !== 'undefined.' && (\n    isTaskList ? taskListBox : (\n      <ItemSymbolWrapper\n        ref={symbolRef}\n        className={classNames.join(' ')}\n        isOrdered={isOrdered!}\n        marginRight={marginRight}\n        style={wrapperStyle}\n        onMouseDown={onSelect}\n        data-testid=\"symbol-wrapper\"\n      >\n        {symbolContent}\n      </ItemSymbolWrapper>\n    )\n  );\n  return (\n    <>\n      {itemSymbol}\n      {children}\n    </>\n  );\n};\n"],"file":"renderStyledListItem.js"}