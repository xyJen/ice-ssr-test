"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSymbolRightSpace = exports.CHINESE_COUNTING_THOUSAND = exports.SYMBOL_UNIT_WIDTH = exports.SYMBOL_DEFAULT_SIZE = exports.SYMBOL_DEFAULT_FONT = void 0;

var _measure = require("./measure");

const SYMBOL_DEFAULT_FONT = 'Arial';
exports.SYMBOL_DEFAULT_FONT = SYMBOL_DEFAULT_FONT;
const SYMBOL_DEFAULT_SIZE = '11pt';
exports.SYMBOL_DEFAULT_SIZE = SYMBOL_DEFAULT_SIZE;
const SYMBOL_SPACE_OFFSET = 10;
const RegExpChinese = /.*[\u4e00-\u9fa5]+.*$/;
const SYMBOL_UNIT_WIDTH = 24;
exports.SYMBOL_UNIT_WIDTH = SYMBOL_UNIT_WIDTH;
const CHINESE_COUNTING_THOUSAND = 'chineseCountingThousand';
exports.CHINESE_COUNTING_THOUSAND = CHINESE_COUNTING_THOUSAND;

const getSymbolRightSpace = (align, listSymbol, symbolStyle) => {
  const symbolSize = symbolStyle.fontSize || SYMBOL_DEFAULT_SIZE;

  const symbolWidth = _measure.TextMeasure.measureTextWidth(String(listSymbol), symbolStyle.fontFamily || SYMBOL_DEFAULT_FONT, symbolSize);

  let result;

  if (RegExpChinese.test(listSymbol) || align === 'right' || listSymbol.length === 1) {
    // 无序列表、中文有序、罗马有序保持8px距离
    result = 8;
  } else {
    result = SYMBOL_UNIT_WIDTH - symbolWidth % SYMBOL_UNIT_WIDTH;

    if (symbolSize === SYMBOL_DEFAULT_SIZE && result === SYMBOL_UNIT_WIDTH) {
      result -= SYMBOL_SPACE_OFFSET;
    }
  }

  return result;
};

exports.getSymbolRightSpace = getSymbolRightSpace;
//# sourceMappingURL=getSymbolRightSpace.js.map