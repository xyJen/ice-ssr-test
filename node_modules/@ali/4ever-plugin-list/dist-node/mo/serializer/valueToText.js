"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CHECK_LIST_UNCHECKED_SYMBOL = exports.CHECK_LIST_CHECKED_SYMBOL = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _generateSymbol = require("../../utils/generateSymbol");

var _injectToValue = _interopRequireDefault(require("./injectToValue"));

/**
 * 任务列表 checked 状态: ☑
 */
const CHECK_LIST_CHECKED_SYMBOL = '\u2611';
/**
 * 任务列表 unchecked 状态: ☐
 */

exports.CHECK_LIST_CHECKED_SYMBOL = CHECK_LIST_CHECKED_SYMBOL;
const CHECK_LIST_UNCHECKED_SYMBOL = '\u2610';
exports.CHECK_LIST_UNCHECKED_SYMBOL = CHECK_LIST_UNCHECKED_SYMBOL;
const INDENT = '\t';
const SPACE = ' ';
const BREAK = '\n';
/**
 * 列表转换成纯文本
 * 目前支持导出的符号有三种：无序列表、有序列表、任务列表，且有序列表的符号会预先设置好 injection 的等级
 */

const valueToText = {
  name: 'list',

  match(node) {
    return _everPluginParagraph.Paragraph.isParagraph(node) && !!node.data.list;
  },

  convert(node, convert) {
    if (!_everCangjie.Block.isBlock(node)) {
      return node.text;
    }

    const text = node.nodes.map(child => convert(child)).join('');
    const {
      list = {},
      start = 1,
      step = '1'
    } = node.data || {};
    const {
      level = 0,
      isOrdered = false,
      isTaskList = false,
      isChecked = false,
      listStyle,
      listStyleType
    } = list; // level 为负值会抛错

    const safeLevel = level > 0 ? level : 0;
    const indent = Array(safeLevel).fill(INDENT).join('');
    let listSymbol = '';

    if (isTaskList) {
      // 任务列表用 Unicode 字符
      listSymbol = isChecked ? CHECK_LIST_CHECKED_SYMBOL : CHECK_LIST_UNCHECKED_SYMBOL;
    } else {
      // 普通列表计算 symbol
      listSymbol = (0, _generateSymbol.generateSymbol)(level, start, step, isOrdered, listStyleType, listStyle);
    }

    return indent + listSymbol + SPACE + text + BREAK;
  },

  hooks: {
    before: _injectToValue.default
  }
};
var _default = valueToText;
exports.default = _default;
//# sourceMappingURL=valueToText.js.map