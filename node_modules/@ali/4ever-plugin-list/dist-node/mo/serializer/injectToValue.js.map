{"version":3,"sources":["../../../../src/mo/serializer/injectToValue.ts"],"names":["injectValueData","value","listBlocks","document","getBlocks","filter","List","isList","listIdMap","Map","forEach","block","list","data","set","listId","injectionMap","v","key","listInjections","inject","has","injections","get","concat","injectedDocument","mapDescendants","node","Injection","injectIntoNode","Value","create"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,eAAT,CAAyBC,KAAzB,EAA8C;AAC3D,QAAMC,UAAU,GAAGD,KAAK,CAACE,QAAN,CAAeC,SAAf,GAA2BC,MAA3B,CAAkCC,gBAAKC,MAAvC,CAAnB,CAD2D,CAE3D;;AACA,QAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACAP,EAAAA,UAAU,CAACQ,OAAX,CAAoBC,KAAD,IAAW;AAC5B,UAAM;AAAEC,MAAAA;AAAF,QAAWD,KAAK,CAACE,IAAvB;AACAL,IAAAA,SAAS,CAACM,GAAV,CAAcF,IAAI,EAAEG,MAAN,IAAgB,EAA9B,EAAkC,IAAlC;AACD,GAHD,EAJ2D,CAQ3D;;AACA,QAAMC,YAAY,GAAG,IAAIP,GAAJ,EAArB;AACAD,EAAAA,SAAS,CAACE,OAAV,CAAkB,CAACO,CAAD,EAAIC,GAAJ,KAAY;AAC5B,UAAMC,cAAc,GAAG,oCAAiBlB,KAAK,CAACE,QAAvB,EAAiCe,GAAjC,CAAvB;AACAC,IAAAA,cAAc,CAACT,OAAf,CAAwBU,MAAD,IAAY;AACjC;AACA,UAAIJ,YAAY,CAACK,GAAb,CAAiBD,MAAM,CAACF,GAAxB,CAAJ,EAAkC;AAChC,cAAMI,UAAU,GAAGN,YAAY,CAACO,GAAb,CAAiBH,MAAM,CAACF,GAAxB,KAAgC,EAAnD;AACAF,QAAAA,YAAY,CAACF,GAAb,CAAiBM,MAAM,CAACF,GAAxB,EAA6BI,UAAU,CAACE,MAAX,CAAkBJ,MAAlB,CAA7B;AACD;;AACDJ,MAAAA,YAAY,CAACF,GAAb,CAAiBM,MAAM,CAACF,GAAxB,EAA6B,CAACE,MAAD,CAA7B;AACD,KAPD;AAQD,GAVD,EAV2D,CAqB3D;;AACA,QAAMK,gBAAgB,GAAGxB,KAAK,CAACE,QAAN,CAAeuB,cAAf,CAA+BC,IAAD,IAAU;AAC/D,QAAIX,YAAY,CAACK,GAAb,CAAiBM,IAAI,CAACT,GAAtB,CAAJ,EAAgC;AAC9B,YAAMI,UAAU,GAAGN,YAAY,CAACO,GAAb,CAAiBI,IAAI,CAACT,GAAtB,CAAnB;AACA,aAAOU,uBAAUC,cAAV,CAAyBP,UAAzB,EAAqCK,IAArC,CAAP;AACD;;AACD,WAAOA,IAAP;AACD,GANwB,CAAzB;AAOA,SAAOG,mBAAMC,MAAN,CAAa;AAAE5B,IAAAA,QAAQ,EAAEsB;AAAZ,GAAb,CAAP;AACD","sourcesContent":["import { Value, Injection } from '@ali/4ever-cangjie';\nimport List from '../models';\nimport { getListOrderData } from './putListOrder';\n\n/**\n * 对 fragment 进行 data inject\n * 目前主要处理的场景是 list 的 injection data，有序列表的符号需要通过 injection 来计算\n * @param value\n */\nexport default function injectValueData(value: Value): Value {\n  const listBlocks = value.document.getBlocks().filter(List.isList);\n  // listId 去重\n  const listIdMap = new Map<string, boolean>();\n  listBlocks.forEach((block) => {\n    const { list } = block.data;\n    listIdMap.set(list?.listId || '', true);\n  });\n  // injection 可能为一组\n  const injectionMap = new Map<string, Injection[]>();\n  listIdMap.forEach((v, key) => {\n    const listInjections = getListOrderData(value.document, key);\n    listInjections.forEach((inject) => {\n      // 如果 key 已经存在 injections，则 concat 在末尾\n      if (injectionMap.has(inject.key)) {\n        const injections = injectionMap.get(inject.key) || [];\n        injectionMap.set(inject.key, injections.concat(inject));\n      }\n      injectionMap.set(inject.key, [inject]);\n    });\n  });\n  // 注入 injections 进入 node 节点\n  const injectedDocument = value.document.mapDescendants((node) => {\n    if (injectionMap.has(node.key)) {\n      const injections = injectionMap.get(node.key)!;\n      return Injection.injectIntoNode(injections, node);\n    }\n    return node;\n  });\n  return Value.create({ document: injectedDocument });\n}\n"],"file":"injectToValue.js"}