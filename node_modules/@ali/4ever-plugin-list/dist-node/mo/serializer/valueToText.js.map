{"version":3,"sources":["../../../../src/mo/serializer/valueToText.ts"],"names":["CHECK_LIST_CHECKED_SYMBOL","CHECK_LIST_UNCHECKED_SYMBOL","INDENT","SPACE","BREAK","valueToText","name","match","node","Paragraph","isParagraph","data","list","convert","Block","isBlock","text","nodes","map","child","join","start","step","level","isOrdered","isTaskList","isChecked","listStyle","listStyleType","safeLevel","indent","Array","fill","listSymbol","hooks","before","injectToValue"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;AACA;AACA;AACO,MAAMA,yBAAyB,GAAG,QAAlC;AAEP;AACA;AACA;;;AACO,MAAMC,2BAA2B,GAAG,QAApC;;AAEP,MAAMC,MAAM,GAAG,IAAf;AAEA,MAAMC,KAAK,GAAG,GAAd;AAEA,MAAMC,KAAK,GAAG,IAAd;AAEA;AACA;AACA;AACA;;AACA,MAAMC,WAA4B,GAAG;AACnCC,EAAAA,IAAI,EAAE,MAD6B;;AAGnCC,EAAAA,KAAK,CAACC,IAAD,EAAO;AACV,WAAOC,+BAAUC,WAAV,CAAsBF,IAAtB,KAA+B,CAAC,CAACA,IAAI,CAACG,IAAL,CAAUC,IAAlD;AACD,GALkC;;AAOnCC,EAAAA,OAAO,CAACL,IAAD,EAAOK,OAAP,EAAgB;AACrB,QAAI,CAACC,mBAAMC,OAAN,CAAcP,IAAd,CAAL,EAA0B;AACxB,aAAOA,IAAI,CAACQ,IAAZ;AACD;;AACD,UAAMA,IAAI,GAAGR,IAAI,CAACS,KAAL,CAAWC,GAAX,CAAgBC,KAAD,IAAWN,OAAO,CAACM,KAAD,CAAjC,EAA0CC,IAA1C,CAA+C,EAA/C,CAAb;AACA,UAAM;AAAER,MAAAA,IAAI,GAAG,EAAT;AAAaS,MAAAA,KAAK,GAAG,CAArB;AAAwBC,MAAAA,IAAI,GAAG;AAA/B,QAAuCd,IAAI,CAACG,IAAL,IAAmC,EAAhF;AACA,UAAM;AACJY,MAAAA,KAAK,GAAG,CADJ;AAEJC,MAAAA,SAAS,GAAG,KAFR;AAGJC,MAAAA,UAAU,GAAG,KAHT;AAIJC,MAAAA,SAAS,GAAG,KAJR;AAKJC,MAAAA,SALI;AAMJC,MAAAA;AANI,QAOFhB,IAPJ,CANqB,CAcrB;;AACA,UAAMiB,SAAS,GAAGN,KAAK,GAAG,CAAR,GAAYA,KAAZ,GAAoB,CAAtC;AACA,UAAMO,MAAM,GAAGC,KAAK,CAACF,SAAD,CAAL,CAAiBG,IAAjB,CAAsB9B,MAAtB,EAA8BkB,IAA9B,CAAmC,EAAnC,CAAf;AACA,QAAIa,UAAU,GAAG,EAAjB;;AACA,QAAIR,UAAJ,EAAgB;AACd;AACAQ,MAAAA,UAAU,GAAGP,SAAS,GAAG1B,yBAAH,GAA+BC,2BAArD;AACD,KAHD,MAGO;AACL;AACAgC,MAAAA,UAAU,GAAG,oCAAeV,KAAf,EAAsBF,KAAtB,EAA6BC,IAA7B,EAAmCE,SAAnC,EAA8CI,aAA9C,EAA6DD,SAA7D,CAAb;AACD;;AACD,WAAOG,MAAM,GAAGG,UAAT,GAAsB9B,KAAtB,GAA8Ba,IAA9B,GAAqCZ,KAA5C;AACD,GAjCkC;;AAmCnC8B,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEC;AADH;AAnC4B,CAArC;eAwCe/B,W","sourcesContent":["import { Block, ValueToTextRule } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport { generateSymbol } from '../../utils/generateSymbol';\nimport type { ListDataProperties } from '../../utils/types';\nimport injectToValue from './injectToValue';\n\n/**\n * 任务列表 checked 状态: ☑\n */\nexport const CHECK_LIST_CHECKED_SYMBOL = '\\u2611';\n\n/**\n * 任务列表 unchecked 状态: ☐\n */\nexport const CHECK_LIST_UNCHECKED_SYMBOL = '\\u2610';\n\nconst INDENT = '\\t';\n\nconst SPACE = ' ';\n\nconst BREAK = '\\n';\n\n/**\n * 列表转换成纯文本\n * 目前支持导出的符号有三种：无序列表、有序列表、任务列表，且有序列表的符号会预先设置好 injection 的等级\n */\nconst valueToText: ValueToTextRule = {\n  name: 'list',\n\n  match(node) {\n    return Paragraph.isParagraph(node) && !!node.data.list;\n  },\n\n  convert(node, convert) {\n    if (!Block.isBlock(node)) {\n      return node.text;\n    }\n    const text = node.nodes.map((child) => convert(child)).join('');\n    const { list = {}, start = 1, step = '1' } = node.data as ListDataProperties || {};\n    const {\n      level = 0,\n      isOrdered = false,\n      isTaskList = false,\n      isChecked = false,\n      listStyle,\n      listStyleType,\n    } = list;\n    // level 为负值会抛错\n    const safeLevel = level > 0 ? level : 0;\n    const indent = Array(safeLevel).fill(INDENT).join('');\n    let listSymbol = '';\n    if (isTaskList) {\n      // 任务列表用 Unicode 字符\n      listSymbol = isChecked ? CHECK_LIST_CHECKED_SYMBOL : CHECK_LIST_UNCHECKED_SYMBOL;\n    } else {\n      // 普通列表计算 symbol\n      listSymbol = generateSymbol(level, start, step, isOrdered, listStyleType, listStyle);\n    }\n    return indent + listSymbol + SPACE + text + BREAK;\n  },\n\n  hooks: {\n    before: injectToValue,\n  },\n};\n\nexport default valueToText;\n"],"file":"valueToText.js"}