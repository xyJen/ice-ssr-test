"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transfromIndLeft = transfromIndLeft;
exports.removeSymbolText = removeSymbolText;
exports.isMsWordList = isMsWordList;

var _everUtils = require("@ali/4ever-utils");

const isElement = ele => Array.isArray(ele) && typeof ele[0] === 'string'; // word一个level的缩进单位


const WORD_INDENT = 21;
/**
 * @description word缩进单位与仓颉的缩进单位不同，此函数做单位转换
 * */

function transfromIndLeft(marginLeft, level) {
  const INDENT_SIZE = _everUtils.indent.size;

  const indLeft = _everUtils.unitsConverter.toPT(marginLeft);

  return Math.round((indLeft - (level + 1) * WORD_INDENT) / WORD_INDENT) * INDENT_SIZE;
}
/**
 * @description 移除掉word 节点中项目符号相关的文本，只保留列表内容
 * */


function removeSymbolText(state, preTxt) {
  const parent = state.peek();
  const prevSibling = (0, _everUtils.getLastChild)(parent);

  if (prevSibling) {
    const asl = prevSibling.find(item => isElement(item));
    let symbolTextTrimed = '';
    const symbolTxt = typeof asl[2] === 'string' ? asl[2] : asl[2][2];

    if (symbolTxt.indexOf(preTxt) === 0) {
      symbolTextTrimed = symbolTxt.slice(preTxt.length).trim();
    } else {
      symbolTextTrimed = symbolTxt.trim();
    }

    if (typeof asl[2] === 'string') {
      asl[2] = symbolTextTrimed;
    } else {
      asl[2][2] = symbolTextTrimed;
    }
  }
}
/**
 * @description 通过style判断是否为word列表项
 * */


function isMsWordList(style) {
  if (!style) return false;
  return style?.includes('mso-list') && style.includes('level') && style.includes('lfo');
}
//# sourceMappingURL=msWordUtils.js.map