{"version":3,"sources":["../../../../../../src/mo/serializer/htmlToJsonML/utils/index.ts"],"names":["listTags","ol","ul","li","getRandomId","process","env","NODE_ENV","Math","random","toString","slice","shouldFlattenChildren","children","some","child","childTagName","paragraphTags","getFlattenedChildren","map","index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAQA;;AAMO,MAAMA,QAAgC,GAAG;AAC9CC,EAAAA,EAAE,EAAE,IAD0C;AAE9CC,EAAAA,EAAE,EAAE,IAF0C;AAG9CC,EAAAA,EAAE,EAAE;AAH0C,CAAzC,C,CAMP;;;;AACO,SAASC,WAAT,GAA+B;AACpC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC,OAAO,MAAP;AACrC,SAAOC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAP;AACD;;AAEM,SAASC,qBAAT,CAA+BT,EAA/B,EAAoD;AACzD,QAAMU,QAAQ,GAAG,4BAAYV,EAAZ,CAAjB;AACA,SAAOU,QAAQ,CAACC,IAAT,CAAeC,KAAD,IAA4B;AAC/C,UAAMC,YAAY,GAAG,2BAAWD,KAAX,CAArB;AACA,WAAO,CAAC,CAACE,yBAAcD,YAAd,CAAF,IAAiCA,YAAY,KAAK,OAAzD;AACD,GAHM,CAAP;AAID;;AAEM,SAASE,oBAAT,CAA8Bf,EAA9B,EAAoD;AACzD,QAAMU,QAAQ,GAAG,4BAAYV,EAAZ,CAAjB;AACA,SAAOU,QAAQ,CAACM,GAAT,CACL,CAACJ,KAAD,EAAgBK,KAAhB,KAA0C;AACxC,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,UAAI,2BAAWL,KAAX,MAAsB,GAA1B,EAA+B;AAC7B,eAAO,CACL,GADK,EAEL,EACE,GAAG,8BAAmBZ,EAAnB,CADL;AAEE,aAAG,8BAAmBY,KAAnB;AAFL,SAFK,EAML,GAAG,4BAAYA,KAAZ,CANE,CAAP;AAQD;;AAED,aAAO,CACL,GADK,EAEL,EACE,GAAG,8BAAmBZ,EAAnB;AADL,OAFK,EAKLY,KALK,CAAP;AAOD;;AACD,WAAOA,KAAP;AACD,GAvBI,CAAP;AAyBD","sourcesContent":["import {\n  JsonML,\n  getTagName,\n  getAttributes,\n  getChildren,\n  paragraphTags,\n} from '@ali/4ever-utils';\n\nexport {\n  isMsWordList,\n  transfromIndLeft,\n  removeSymbolText,\n} from './msWordUtils';\n\nexport const listTags: Record<string, string> = {\n  ol: 'ol',\n  ul: 'ul',\n  li: 'li',\n};\n\n// Refactor: 与 Bi 共用\nexport function getRandomId(): string {\n  if (process.env.NODE_ENV === 'test') return 'test';\n  return Math.random().toString(36).slice(2);\n}\n\nexport function shouldFlattenChildren(li: JsonML): boolean {\n  const children = getChildren(li);\n  return children.some((child: JsonML): boolean => {\n    const childTagName = getTagName(child);\n    return !!paragraphTags[childTagName] || childTagName === 'table';\n  });\n}\n\nexport function getFlattenedChildren(li: JsonML): JsonML[] {\n  const children = getChildren(li);\n  return children.map(\n    (child: JsonML, index: number): JsonML => {\n      if (index === 0) {\n        if (getTagName(child) === 'p') {\n          return [\n            'p',\n            {\n              ...getAttributes<any>(li),\n              ...getAttributes<any>(child),\n            },\n            ...getChildren(child),\n          ] as JsonML;\n        }\n\n        return [\n          'p',\n          {\n            ...getAttributes<any>(li),\n          },\n          child,\n        ] as JsonML;\n      }\n      return child;\n    },\n  );\n}\n"],"file":"index.js"}