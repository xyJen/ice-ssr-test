{"version":3,"sources":["../../../../src/mo/serializer/normalizeJsonML.ts"],"names":["assertSameList","list","anotherList","listId","transformListNode","content","outerChildren","attrs","isOrdered","result","flatNodesToListTree","nodes","path","prevLevel","node","shift","level","curr","parent","i","length","slice","children","last","indexOf","innerIsOrdered","push","normalize","countMap","normalizeNodes","reduce","arr","index","tag","isLastIndex","listNode","itemCount","get","start","set","next","lastAttrs","newList","trs","map","tr","tds","td","normalizeJsonMl","Map"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-imports */\n\nimport {\n  JsonML,\n  getAttributes,\n  getChildren,\n  getTagName,\n} from '@ali/4ever-cangjie';\n\nimport {\n  ListCountContext,\n  getListOrder,\n  createListCountContext,\n} from './putListOrder';\n\n// 用于判断两个 list 是否为同一个 list\n// 判断依据：listId 相同，type 也相同\nfunction assertSameList(list: { listId?: string }, anotherList: { listId?: string }) {\n  return typeof list.listId === 'string'\n    && typeof anotherList.listId === 'string'\n    && list.listId === anotherList.listId;\n}\n\nfunction transformListNode(content: JsonML) {\n  const outerChildren = getChildren(content);\n  const attrs = getAttributes(content);\n  const { isOrdered = false } = attrs as { isOrdered?: boolean };\n  const result = [isOrdered ? 'ol' : 'ul', { ...attrs }];\n\n  /**\n   * 将平铺的子节点转成为嵌套的列表树形结构\n   *\n   * @param nodes\n   * @param path\n   * @param prevLevel\n   */\n  const flatNodesToListTree = (nodes: any[], path: number[], prevLevel: number) => {\n    let node = nodes.shift();\n    const { list } = getAttributes(node) as { list: any };\n    const { level } = list;\n    let curr: any;\n    let parent: any = result;\n\n    if (level === prevLevel) {\n      curr = 0;\n      for (let i = 0; i < path.length - 1; i++) {\n        parent = getChildren(parent)[path[i]];\n      }\n\n      if (path.length) {\n        path[path.length - 1] += 1;\n      } else {\n        path = [0];\n      }\n    } else if (level < prevLevel) {\n      curr = level - prevLevel;\n      path = path.slice(0, path.length - (prevLevel - level) * 2);\n      for (let i = 0; i < path.length - 1; i++) {\n        parent = getChildren(parent)[path[i]];\n      }\n\n      path[path.length - 1] += 1;\n    } else if (level > prevLevel) {\n      // 如果 level - prevLevel > 1，也按 1 来计算, 避免找不到上层节点\n      curr = 1;\n      for (let i = 0; i < path.length; i++) {\n        parent = getChildren(parent)[path[i]];\n      }\n      path = [...path, getChildren(parent).length];\n    }\n\n    const children = getChildren(parent);\n    node = ['li', { ...getAttributes(node) }, node];\n    if (children.length > 0) {\n      const last = getTagName(children[children.length - 1]);\n      if (['ul', 'ol', 'li'].indexOf(last) < 0) {\n        const attrs = getAttributes(node) as { list: any };\n        const { isOrdered: innerIsOrdered = false } = attrs.list;\n        node = [innerIsOrdered ? 'ol' : 'ul', { ...attrs.list }, node];\n        path = [...path, 0];\n      }\n    }\n\n    parent.push(node);\n\n    if (nodes.length > 0) {\n      flatNodesToListTree(nodes, path, prevLevel + curr);\n    }\n  };\n\n  flatNodesToListTree(outerChildren, [], 0);\n  return result;\n}\n\n// 正规化渲染 HTML 的 Asl，主要解决平铺列表转为嵌套列表的问题\nfunction normalize(content: JsonML, countMap: Map<string, ListCountContext>): JsonML {\n  const nodes = getChildren(content);\n  const normalizeNodes = nodes.reduce((arr: any[], node, index) => {\n    const tag = getTagName(node);\n    const last: any = arr[arr.length - 1];\n\n    if (tag === 'p') {\n      const attrs = getAttributes(node) || {};\n      const { list } = attrs as { list: any };\n      const isLastIndex = index === nodes.length - 1;\n\n      // 如果不是 list 节点\n      if (!list) {\n        // 上一个节点为 'list' 的话，需要对其进行转换\n        if (last && getTagName(last) === 'list') {\n          const listNode = transformListNode(last);\n          arr[arr.length - 1] = listNode;\n        }\n        arr.push(node);\n        return arr;\n      }\n\n      // 序号计算\n      const { itemCount, prevLevel } = countMap.get(list.listId) || createListCountContext();\n      const start = getListOrder(list.level, itemCount, prevLevel);\n      countMap.set(list.listId, { itemCount, prevLevel: list.level });\n      node = ['p', { list: { ...list, start } }, ...getChildren(node)];\n\n      if (last && getTagName(last) === 'list') {\n        const next: any = [...last, node];\n        const lastAttrs = getAttributes(last) || {};\n\n        // 上一个节点为 'list'，并且和当前的 listId 相同则追加进去\n        if (assertSameList(lastAttrs, list)) {\n          arr[arr.length - 1] = isLastIndex ? transformListNode(next) : next;\n        } else {\n          // 否则说明是新的 list，要先把之前 list 进行转换\n          arr[arr.length - 1] = transformListNode(last);\n          // 然后再新建一个 list\n          const newList: JsonML = ['list', { ...list }, node];\n          arr.push(isLastIndex ? transformListNode(newList) : newList);\n        }\n      } else if (isLastIndex) {\n        // 当前为最后一个子节点，直接进行转换\n        const listNode = transformListNode(['list', { ...list }, node]);\n        arr.push(listNode);\n      } else {\n        arr.push(['list', { ...list, start }, node]);\n      }\n    } else {\n      // 需要对上一个节点进行转换\n      if (last && getTagName(last) === 'list') {\n        const list = transformListNode(last);\n        arr[arr.length - 1] = list;\n      }\n\n      // table 存在嵌套的情况，需要循环处理下\n      if (tag === 'table') {\n        const trs = getChildren(node).map((tr) => {\n          const tds = getChildren(tr).map((td) => normalize(td, countMap));\n          return ['tr', { ...getAttributes(tr) }, ...tds];\n        });\n        node = ['table', { ...getAttributes<any>(node) }, ...trs];\n      }\n\n      arr.push(node);\n    }\n    return arr;\n  }, []);\n\n  return [getTagName(content), { ...getAttributes<any>(content) }, ...normalizeNodes];\n}\n\nexport function normalizeJsonMl(content: JsonML): JsonML {\n  const countMap = new Map<string, ListCountContext>();\n  return normalize(content, countMap);\n}\n"],"file":"normalizeJsonML.js"}