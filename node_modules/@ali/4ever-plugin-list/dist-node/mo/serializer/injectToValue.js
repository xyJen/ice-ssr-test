"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = injectValueData;

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireDefault(require("../models"));

var _putListOrder = require("./putListOrder");

/**
 * 对 fragment 进行 data inject
 * 目前主要处理的场景是 list 的 injection data，有序列表的符号需要通过 injection 来计算
 * @param value
 */
function injectValueData(value) {
  const listBlocks = value.document.getBlocks().filter(_models.default.isList); // listId 去重

  const listIdMap = new Map();
  listBlocks.forEach(block => {
    const {
      list
    } = block.data;
    listIdMap.set(list?.listId || '', true);
  }); // injection 可能为一组

  const injectionMap = new Map();
  listIdMap.forEach((v, key) => {
    const listInjections = (0, _putListOrder.getListOrderData)(value.document, key);
    listInjections.forEach(inject => {
      // 如果 key 已经存在 injections，则 concat 在末尾
      if (injectionMap.has(inject.key)) {
        const injections = injectionMap.get(inject.key) || [];
        injectionMap.set(inject.key, injections.concat(inject));
      }

      injectionMap.set(inject.key, [inject]);
    });
  }); // 注入 injections 进入 node 节点

  const injectedDocument = value.document.mapDescendants(node => {
    if (injectionMap.has(node.key)) {
      const injections = injectionMap.get(node.key);
      return _everCangjie.Injection.injectIntoNode(injections, node);
    }

    return node;
  });
  return _everCangjie.Value.create({
    document: injectedDocument
  });
}
//# sourceMappingURL=injectToValue.js.map