"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _everUtils = require("@ali/4ever-utils");

var _constants = require("./constants");

var _normalizeJsonML = require("./normalizeJsonML");

var _listStyleMapping = require("../../utils/listStyleMapping");

const _createElement = /*#__PURE__*/React.createElement;

function getListStyle(data) {
  const {
    level = 0,
    listStyleType,
    listStyle
  } = data;
  const listLevel = Math.max(0, level);

  if (!listStyle && listStyleType) {
    const styleTumple = _listStyleMapping.mapping[listStyleType];
    return styleTumple[listLevel % styleTumple.length];
  }

  return listStyle;
}

function getListStyleType(data) {
  const {
    isOrdered = false,
    level = 0,
    isTaskList
  } = data;
  const listLevel = Math.max(0, level);
  const listStyle = getListStyle(data);
  let listStyleType;

  if (listStyle) {
    listStyleType = isOrdered ? _constants.orderListStyleMap.get(listStyle.format) : _constants.bulletListStyleMap[listLevel % 3];
  }

  return isTaskList ? 'none' : listStyleType;
}

const Ul = props => {
  const {
    key,
    children,
    node
  } = props;
  const attrs = (0, _everUtils.getAttributes)(node) || {};
  const listStyleType = getListStyleType(attrs);
  return /*#__PURE__*/_createElement("ul", {
    key: key,
    style: {
      listStyleType
    }
  }, children);
};

const Ol = props => {
  const {
    key,
    children,
    node
  } = props;
  const attrs = (0, _everUtils.getAttributes)(node) || {};
  const {
    start
  } = attrs;
  const listStyleType = getListStyleType(attrs);
  return /*#__PURE__*/_createElement("ol", {
    key: key,
    start: start && start > 1 ? start : undefined,
    style: {
      listStyleType
    }
  }, children);
};

const Li = props => {
  const {
    key,
    children
  } = props;
  return /*#__PURE__*/_createElement("li", {
    key: key
  }, children);
};

const tagToComponent = {
  ul: Ul,
  ol: Ol,
  li: Li
};
const rule = {
  name: 'list',

  match(node) {
    const tagName = (0, _everUtils.getTagName)(node);
    return !!tagToComponent[tagName];
  },

  convert(node, key = [], convert) {
    const tagName = (0, _everUtils.getTagName)(node);
    const Component = tagToComponent[tagName];
    const children = (0, _everUtils.getChildren)(node).map((child, index) => convert(child, [...key, index]));
    return /*#__PURE__*/_createElement(Component, {
      key: key.toString(),
      node: node
    }, children);
  },

  hooks: {
    before: _normalizeJsonML.normalizeJsonMl
  }
};
var _default = rule;
exports.default = _default;
//# sourceMappingURL=jsonMLToHTML.js.map