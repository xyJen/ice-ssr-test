{"version":3,"sources":["../../../src/__tests__/list.test.tsx"],"names":["describe","beforeEach","TextMeasure","measureCache","cache","it","listStyleType","listId","isOrdered","value","list","level","controller","Controller","create","plugins","injectToNode","expect","toEqual","anything","isTaskList","listStyle","format","text","align"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@ali/4ever-dev-test';\nimport { render } from '@testing-library/react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { createInjectToNode } from '../utils/putListOrder';\nimport ListSymbolWarmupWrapper from '../utils/components/ListSymbolWarmupWrapper';\nimport { TextMeasure } from '../utils/measure';\n\ndescribe('ListSymbolWarmupWrapper', () => {\n  beforeEach(() => TextMeasure.measureCache.cache = {});\n\n  it('should warmup for numbering list items', () => {\n    const listStyleType = {\n      listId: 'test',\n      isOrdered: true,\n    };\n    const value = (\n      <value>\n        <document>\n          <block type=\"paragraph\" data={{ list: { ...listStyleType, level: 0 } }}>\n            A\n          </block>\n          <block type=\"paragraph\" data={{ list: { ...listStyleType, level: 1 } }}>\n            B\n          </block>\n          <block type=\"paragraph\" data={{ list: { ...listStyleType, level: 0 } }}>\n            C\n          </block>\n        </document>\n      </value>\n    );\n    const controller = Controller.create({ value, plugins: [{ injectToNode: createInjectToNode({}) }] });\n    render(<ListSymbolWarmupWrapper controller={controller} />);\n    expect(TextMeasure.measureCache.cache).toEqual({\n      '.Arial11pt': expect.anything(),\n      '1Arial11pt': expect.anything(),\n      '2Arial11pt': expect.anything(),\n      'aArial11pt': expect.anything(),\n    });\n  });\n\n  it('should not warmup for task list items', () => {\n    const listStyleType = {\n      listId: 'test',\n      isTaskList: true,\n    };\n    const value = (\n      <value>\n        <document>\n          <block type=\"paragraph\" data={{ list: { ...listStyleType, level: 0 } }}>\n            A\n          </block>\n          <block type=\"paragraph\" data={{ list: { ...listStyleType, level: 1 } }}>\n            B\n          </block>\n          <block type=\"paragraph\" data={{ list: { ...listStyleType, level: 0 } }}>\n            C\n          </block>\n        </document>\n      </value>\n    );\n    const controller = Controller.create({ value, plugins: [{ injectToNode: createInjectToNode({}) }] });\n    render(<ListSymbolWarmupWrapper controller={controller} />);\n    expect(TextMeasure.measureCache.cache).toEqual({});\n  });\n\n  it('should reuse chinese character cache', () => {\n    const listStyleType = {\n      listId: 'test',\n      isOrdered: true,\n      listStyle: {\n        format: 'chineseCountingThousand',\n        text: '%1、',\n        align: 'left',\n      },\n    };\n    const value = (\n      <value>\n        <document>\n          <block type=\"paragraph\" data={{ list: { ...listStyleType, level: 0 } }}>\n            A\n          </block>\n          <block type=\"paragraph\" data={{ list: { ...listStyleType, level: 1 } }}>\n            B\n          </block>\n          <block type=\"paragraph\" data={{ list: { ...listStyleType, level: 0 } }}>\n            C\n          </block>\n        </document>\n      </value>\n    );\n    const controller = Controller.create({ value, plugins: [{ injectToNode: createInjectToNode({}) }] });\n    render(<ListSymbolWarmupWrapper controller={controller} />);\n    expect(TextMeasure.measureCache.cache).toEqual({\n      '、Arial11pt': expect.anything(),\n      '中Arial11pt': expect.anything(),\n    });\n  });\n});\n"],"file":"list.test.js"}