"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _everCangjie = require("@ali/4ever-cangjie");

var _putListOrder = require("../utils/putListOrder");

var _ListSymbolWarmupWrapper = _interopRequireDefault(require("../utils/components/ListSymbolWarmupWrapper"));

var _measure = require("../utils/measure");

/** @jsx jsx */
describe('ListSymbolWarmupWrapper', () => {
  beforeEach(() => _measure.TextMeasure.measureCache.cache = {});
  it('should warmup for numbering list items', () => {
    const listStyleType = {
      listId: 'test',
      isOrdered: true
    };
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: { ...listStyleType,
          level: 0
        }
      }
    }, "A"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: { ...listStyleType,
          level: 1
        }
      }
    }, "B"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: { ...listStyleType,
          level: 0
        }
      }
    }, "C")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: [{
        injectToNode: (0, _putListOrder.createInjectToNode)({})
      }]
    });

    (0, _react.render)((0, _everDevTest.jsx)(_ListSymbolWarmupWrapper.default, {
      controller: controller
    }));
    expect(_measure.TextMeasure.measureCache.cache).toEqual({
      '.Arial11pt': expect.anything(),
      '1Arial11pt': expect.anything(),
      '2Arial11pt': expect.anything(),
      'aArial11pt': expect.anything()
    });
  });
  it('should not warmup for task list items', () => {
    const listStyleType = {
      listId: 'test',
      isTaskList: true
    };
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: { ...listStyleType,
          level: 0
        }
      }
    }, "A"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: { ...listStyleType,
          level: 1
        }
      }
    }, "B"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: { ...listStyleType,
          level: 0
        }
      }
    }, "C")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: [{
        injectToNode: (0, _putListOrder.createInjectToNode)({})
      }]
    });

    (0, _react.render)((0, _everDevTest.jsx)(_ListSymbolWarmupWrapper.default, {
      controller: controller
    }));
    expect(_measure.TextMeasure.measureCache.cache).toEqual({});
  });
  it('should reuse chinese character cache', () => {
    const listStyleType = {
      listId: 'test',
      isOrdered: true,
      listStyle: {
        format: 'chineseCountingThousand',
        text: '%1、',
        align: 'left'
      }
    };
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: { ...listStyleType,
          level: 0
        }
      }
    }, "A"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: { ...listStyleType,
          level: 1
        }
      }
    }, "B"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: { ...listStyleType,
          level: 0
        }
      }
    }, "C")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: [{
        injectToNode: (0, _putListOrder.createInjectToNode)({})
      }]
    });

    (0, _react.render)((0, _everDevTest.jsx)(_ListSymbolWarmupWrapper.default, {
      controller: controller
    }));
    expect(_measure.TextMeasure.measureCache.cache).toEqual({
      '、Arial11pt': expect.anything(),
      '中Arial11pt': expect.anything()
    });
  });
});
//# sourceMappingURL=list.test.js.map