{"version":3,"sources":["../../../../src/bi/utils/getListId.ts"],"names":["getListIdByStartBlock","block","data","list","listId","getListId","props","value","restart","listType","type","controller","document","startBlock","prevSibling","getPreviousSibling","key","listStyleType","nextSibling","getNextSibling","selection","isExpanded","listItems","nextKey","length"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAUA;AACA,MAAMA,qBAAqB,GAAIC,KAAD,IAAiC;AAC7D,SAAO,qBAAOA,KAAP,IAAgBA,KAAK,EAAEC,IAAP,CAAYC,IAAZ,CAAiBC,MAAjC,GAA0C,6BAAjD;AACD,CAFD;;AAIe,SAASC,SAAT,CAAmBC,KAAnB,EAAmD;AAChE,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA,IAA5B;AAAkCC,IAAAA;AAAlC,MAAiDL,KAAvD;AACA,MAAIE,OAAO,IAAI,CAACD,KAAhB,EAAuB,OAAO,6BAAP;AACvB,QAAM;AAAEK,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA2BN,KAAjC;AACA,MAAIO,WAAW,GAAGD,UAAU,IAAID,QAAQ,EAAEG,kBAAV,CAA6BF,UAAU,CAACG,GAAxC,CAAhC;;AACA,SAAOF,WAAP,EAAoB;AAClB,QAAI,qBAAOA,WAAP,CAAJ,EAAyB;AACvB,UAAIL,QAAQ,KAAKK,WAAW,CAACZ,IAAZ,CAAiBC,IAAjB,CAAsBc,aAAvC,EAAsD;AACpD,eAAO,6BAAP;AACD;;AACD,aAAOH,WAAW,CAACZ,IAAZ,CAAiBC,IAAjB,CAAsBC,MAA7B;AACD;;AACD,QAAI,CAAC,sBAAQU,WAAR,CAAL,EAA2B;AACzB;AACD;;AACDA,IAAAA,WAAW,GAAGF,QAAQ,EAAEG,kBAAV,CAA6BD,WAAW,CAACE,GAAzC,CAAd;AACD;;AAED,MAAIE,WAAW,GAAGL,UAAU,IAAID,QAAQ,EAAEO,cAAV,CAAyBN,UAAU,CAACG,GAApC,CAAhC;;AACA,MAAIL,UAAU,EAAEJ,KAAZ,CAAkBa,SAAlB,CAA4BC,UAAhC,EAA4C;AAC1C,UAAMC,SAAS,GAAG,6BAAeX,UAAf,CAAlB;AACA,UAAMY,OAAO,GAAGD,SAAS,CAACA,SAAS,CAACE,MAAV,GAAmB,CAApB,CAAT,EAAiCR,GAAjD;;AACA,QAAIO,OAAJ,EAAa;AACXL,MAAAA,WAAW,GAAGN,QAAQ,EAAEO,cAAV,CAAyBI,OAAzB,CAAd;AACD;AACF;;AACD,MACEL,WAAW,IACX,qBAAOA,WAAP,CADA,IAEAT,QAAQ,KAAKS,WAAW,EAAEhB,IAAb,EAAmBC,IAAnB,EAAyBc,aAHxC,EAIE;AACA,WAAOC,WAAW,CAAChB,IAAZ,IAAoBgB,WAAW,CAAChB,IAAZ,CAAiBC,IAAjB,CAAsBC,MAAjD;AACD;;AAED,MAAIM,IAAI,KAAK,OAAb,EAAsB;AACpB,WAAO,6BAAP;AACD;;AAED,SAAOV,qBAAqB,CAACa,UAAD,CAA5B;AACD","sourcesContent":["import { Block, Controller, Value } from '@ali/4ever-cangjie';\nimport { getRandomId } from '@ali/4ever-utils';\nimport isList from './isList';\nimport isEmpty from './isEmpty';\nimport getCurrentItem from './getCurrentItem';\n\ninterface IGetListIdProps {\n  value?: Value;\n  restart?: boolean;\n  listType?: string;\n  type?: string;\n  controller?: Controller;\n}\n\n// 如果当前项已是列表类型，且不需要前后序号连接时，直接使用当前项的listId，保持整个list group的listId一致\nconst getListIdByStartBlock = (block: Block | null): string => {\n  return isList(block) ? block?.data.list.listId : getRandomId();\n};\n\nexport default function getListId(props: IGetListIdProps): string {\n  const { value, restart, listType, type, controller } = props;\n  if (restart || !value) return getRandomId();\n  const { document, startBlock } = value;\n  let prevSibling = startBlock && document?.getPreviousSibling(startBlock.key) as Block;\n  while (prevSibling) {\n    if (isList(prevSibling)) {\n      if (listType !== prevSibling.data.list.listStyleType) {\n        return getRandomId();\n      }\n      return prevSibling.data.list.listId;\n    }\n    if (!isEmpty(prevSibling)) {\n      break;\n    }\n    prevSibling = document?.getPreviousSibling(prevSibling.key) as Block;\n  }\n\n  let nextSibling = startBlock && document?.getNextSibling(startBlock.key) as Block;\n  if (controller?.value.selection.isExpanded) {\n    const listItems = getCurrentItem(controller);\n    const nextKey = listItems[listItems.length - 1]?.key;\n    if (nextKey) {\n      nextSibling = document?.getNextSibling(nextKey) as Block;\n    }\n  }\n  if (\n    nextSibling &&\n    isList(nextSibling) &&\n    listType === nextSibling?.data?.list?.listStyleType\n  ) {\n    return nextSibling.data && nextSibling.data.list.listId;\n  }\n\n  if (type === 'tlist') {\n    return getRandomId();\n  }\n\n  return getListIdByStartBlock(startBlock);\n}\n"],"file":"getListId.js"}