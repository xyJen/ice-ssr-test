{"version":3,"sources":["../../../../src/bi/utils/getWholeListItemSelected.ts"],"names":["getWholeListItemSelected","value","document","startBlock","endBlock","selection","selectedBlocks","length","startPoint","getStart","isAtStartofParagraph","isAtStartOfNode","endPoint","getEnd","isAtEndofParagraph","isAtEndOfNode","unWholeSelected","Set","add","key","e","logger","error","type","name","filter","block","has"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAEe,SAASA,wBAAT,CAAkCC,KAAlC,EAAyD;AACtE,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,UAAZ;AAAwBC,IAAAA;AAAxB,MAAqCH,KAA3C;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAgBJ,KAAtB;AAEA,MAAI,CAACI,SAAD,IAAc,CAACF,UAAf,IAA6B,CAACC,QAAlC,EAA4C,OAAO,EAAP;AAE5C,QAAME,cAAc,GAAG,gDAAyBL,KAAzB,CAAvB;AAEA,MAAIK,cAAc,CAACC,MAAf,KAA0B,CAA9B,EAAiC,OAAO,EAAP;AAEjC,QAAMC,UAAU,GAAGH,SAAS,CAACI,QAAV,CAAmBP,QAAnB,CAAnB;AACA,QAAMQ,oBAAoB,GAAGF,UAAU,CAACG,eAAX,CAA2BR,UAA3B,CAA7B;AAEA,QAAMS,QAAQ,GAAGP,SAAS,CAACQ,MAAV,CAAiBX,QAAjB,CAAjB;AACA,QAAMY,kBAAkB,GAAGF,QAAQ,CAACG,aAAT,CAAuBX,QAAvB,CAA3B;AAEA,QAAMY,eAAe,GAAG,IAAIC,GAAJ,EAAxB;;AACA,MAAI,CAACP,oBAAL,EAA2B;AACzBM,IAAAA,eAAe,CAACE,GAAhB,CAAoBZ,cAAc,CAAC,CAAD,CAAd,CAAkBa,GAAtC;AACD;;AACD,MAAI,CAACL,kBAAL,EAAyB;AACvB,QAAI;AACFE,MAAAA,eAAe,CAACE,GAAhB,CAAoBZ,cAAc,CAACA,cAAc,CAACC,MAAf,GAAwB,CAAzB,CAAd,CAA0CY,GAA9D;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,0BAAOC,KAAP,CAAa;AACXC,QAAAA,IAAI,EAAE,WADK;AAEXC,QAAAA,IAAI,EAAE,0BAFK;AAGXvB,QAAAA,KAAK,EAAEK,cAAc,CAACA,cAAc,CAACC,MAAf,GAAwB,CAAzB;AAHV,OAAb;;AAKA,aAAO,EAAP;AACD;AACF;;AACD,SAAOD,cAAc,CAACmB,MAAf,CAAsBC,KAAK,IAAI;AACpC,WAAO,qBAAOA,KAAP,KAAiB,CAACV,eAAe,CAACW,GAAhB,CAAoBD,KAAK,CAACP,GAA1B,CAAzB;AACD,GAFM,CAAP;AAGD","sourcesContent":["import { Block, Value } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport isList from './isList';\nimport { getHighestSelectedBlocks } from '@ali/4ever-plugin-indent';\n\nexport default function getWholeListItemSelected(value: Value): Block[] {\n  const { document, startBlock, endBlock } = value;\n  const { selection } = value;\n\n  if (!selection || !startBlock || !endBlock) return [];\n\n  const selectedBlocks = getHighestSelectedBlocks(value);\n\n  if (selectedBlocks.length === 0) return [];\n\n  const startPoint = selection.getStart(document);\n  const isAtStartofParagraph = startPoint.isAtStartOfNode(startBlock);\n\n  const endPoint = selection.getEnd(document);\n  const isAtEndofParagraph = endPoint.isAtEndOfNode(endBlock);\n\n  const unWholeSelected = new Set<string>();\n  if (!isAtStartofParagraph) {\n    unWholeSelected.add(selectedBlocks[0].key);\n  }\n  if (!isAtEndofParagraph) {\n    try {\n      unWholeSelected.add(selectedBlocks[selectedBlocks.length - 1].key);\n    } catch (e) {\n      logger.error({\n        type: 'listError',\n        name: 'getWholeListItemSelected',\n        value: selectedBlocks[selectedBlocks.length - 1],\n      });\n      return [];\n    }\n  }\n  return selectedBlocks.filter(block => {\n    return isList(block) && !unWholeSelected.has(block.key);\n  });\n}\n"],"file":"getWholeListItemSelected.js"}