{"version":3,"sources":["../../../../src/bi/utils/getListStyle.ts"],"names":["isValidListStyleType","type","mapping","isOrdered","listevel","listStyleType","DEFAULT_NUMBER_LIST_ARRAY","DEFAULT_BULLET_LIST_ARRAY","styleTumple","STICKER_CODE_REG","test","format","text","align","level","Math","floor","listType","length","i","replace"],"mappings":";;;;;;;AAAA;;AACA;;AAOO,MAAMA,oBAAoB,GAAIC,IAAD,IAAkB;AACpD,SAAO,CAACA,IAAD,IAASC,0BAAQD,IAAR,CAAhB;AACD,CAFM;;;;eAIQ,CACbE,SADa,EAEbC,QAFa,EAGbH,IAHa,KAIW;AACxB,QAAMI,aAAa,GACjBJ,IAAI,KACHE,SAAS,GAAGG,4CAA0B,CAA1B,CAAH,GAAkCC,4CAA0B,CAA1B,CADxC,CADN;AAGA,QAAMC,WAAW,GAAGN,0BAAQG,aAAR,CAApB;;AAEA,MAAI,CAACG,WAAD,IAAgBC,yBAAiBC,IAAjB,CAAsBT,IAAtB,CAApB,EAAiD;AAC/C,WAAO;AACLU,MAAAA,MAAM,EAAE,QADH;AAELC,MAAAA,IAAI,EAAEX,IAFD;AAGLY,MAAAA,KAAK,EAAE;AAHF,KAAP;AAKD;;AAED,QAAMC,KAAK,GAAGV,QAAQ,GAAG,CAAX,GAAe,CAAf,GAAmBW,IAAI,CAACC,KAAL,CAAWZ,QAAX,CAAjC;AACA,QAAMa,QAAQ,GAAGT,WAAW,CAACM,KAAK,GAAGN,WAAW,CAACU,MAArB,CAA5B,CAfwB,CAgBxB;;AACA,MAAI,CAACP,MAAD,EAASC,IAAT,EAAeC,KAAf,IAAwBI,QAA5B;;AACA,MAAId,SAAJ,EAAe;AACb,QAAIE,aAAa,KAAKC,4CAA0B,CAA1B,CAAtB,EAAoD;AAClDM,MAAAA,IAAI,GAAG,EAAP;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,KAArB,EAA4BK,CAAC,EAA7B,EAAiC;AAC/BP,QAAAA,IAAI,IAAK,IAAGO,CAAC,GAAG,CAAJ,IAASA,CAAC,KAAKL,KAAN,GAAc,EAAd,GAAmB,GAA5B,CAAiC,EAA7C;AACD;AACF,KALD,MAKO;AACLF,MAAAA,IAAI,GAAGA,IAAI,CAACQ,OAAL,CAAa,IAAb,EAAmBN,KAAK,GAAG,CAA3B,CAAP;AACD;AACF;;AACD,SAAO;AACLH,IAAAA,MADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,C","sourcesContent":["import { STICKER_CODE_REG } from '../regexp';\nimport {\n  mapping,\n  DEFAULT_BULLET_LIST_ARRAY,\n  DEFAULT_NUMBER_LIST_ARRAY,\n} from '../../utils/listStyleMapping';\nimport type { ListStyleProperties } from '../../utils/types';\n\nexport const isValidListStyleType = (type: string) => {\n  return !type || mapping[type];\n}\n\nexport default (\n  isOrdered: boolean,\n  listevel: number,\n  type: string,\n): ListStyleProperties => {\n  const listStyleType =\n    type ||\n    (isOrdered ? DEFAULT_NUMBER_LIST_ARRAY[0] : DEFAULT_BULLET_LIST_ARRAY[0]);\n  const styleTumple = mapping[listStyleType];\n\n  if (!styleTumple && STICKER_CODE_REG.test(type)) {\n    return {\n      format: 'bullet',\n      text: type,\n      align: 'start',\n    };\n  }\n\n  const level = listevel < 0 ? 0 : Math.floor(listevel);\n  const listType = styleTumple[level % styleTumple.length];\n  // eslint-disable-next-line prefer-const\n  let [format, text, align] = listType;\n  if (isOrdered) {\n    if (listStyleType === DEFAULT_NUMBER_LIST_ARRAY[2]) {\n      text = '';\n      for (let i = 0; i <= level; i++) {\n        text += `%${i + 1 + (i === level ? '' : '.')}`;\n      }\n    } else {\n      text = text.replace(/\\d/, level + 1);\n    }\n  }\n  return {\n    format,\n    text,\n    align,\n  };\n};\n"],"file":"getListStyle.js"}