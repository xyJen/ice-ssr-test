"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mergeMabeGroupNode;

var _everPluginListGroup = require("@ali/4ever-plugin-list-group");

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginHeadingGroup = require("@ali/4ever-plugin-heading-group");

var _lodash = require("lodash");

const {
  isListGroupAvailable,
  getPreviousViewGroupNode
} = _everPluginListGroup.utils;
/**
 * 若上一个可视节点是 GroupNode list 节点，做可视节点的合并
 * I -> 光标，在光标位置按 backspace 键
 *   
 * 场景一：列表 ddd 合并到列表 ccc
 * 
 *   1. aaa             1. aaa
 *   |  a. bbb          |  a. bbb
 *   |    i. ccc   ->   |    i. cccIddd
 *   2. Iddd
 * 
 * 场景二：段落 ddd 合并到列表 bbb
 * 
 *   1. aaa             1. aaa 
 *   | >a. bbb     ->   |  > a.bbbIddd
 *   Iddd
 * 
 * 场景三：段落 ddd 合并到列表 aaa
 * 
 *  >1. aaa        ->   >1. aaaIddd
 *   Iddd          
 */

function mergeMabeGroupNode(node, controller) {
  const previousViewNode = isListGroupAvailable(controller) && getPreviousViewGroupNode(node, controller);

  if (previousViewNode && controller.userData.get(previousViewNode, 'fold')) {
    const newNode = node.set('data', { ...(0, _lodash.omit)(node.data, ['fold']),
      list: { ...previousViewNode.data.list
      }
    });
    controller.command(_everCangjie.Commands.moveToEndOfNode, previousViewNode).command(_everCangjie.Commands.removeNodeByKey, node.key).command(_everCangjie.Commands.insertBlock, newNode).command(_everCangjie.Commands.moveToStartOfNode, node); // 设置折叠状态

    (0, _everPluginHeadingGroup.toggleFold)({
      node: newNode,
      fold: true
    });
  }
}
//# sourceMappingURL=mergeMabeGroupNode.js.map