"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setSymbolStyle;

var _everCangjie = require("@ali/4ever-cangjie");

var _getCurrentItem = _interopRequireDefault(require("./getCurrentItem"));

var _getWholeListItemSelected = _interopRequireDefault(require("./getWholeListItemSelected"));

var _mergeListData = _interopRequireDefault(require("./mergeListData"));

var _isList = _interopRequireDefault(require("./isList"));

const isHeadingStyle = symbolStyle => {
  return Boolean('sz' in symbolStyle && symbolStyle.bold !== undefined);
};

function setSymbolStyle(controller, symbolStyle) {
  const {
    document,
    data,
    selection
  } = controller.value;
  const wholeListItemSelected = (0, _getWholeListItemSelected.default)(controller.value);
  const isHeadingAction = isHeadingStyle(symbolStyle);
  const {
    isCollapsed
  } = selection;
  let listSelections = [...(data.listSelections || [])];

  if (isHeadingAction) {
    const currentItems = (0, _getCurrentItem.default)(controller);
    currentItems.forEach(item => {
      if (item && (0, _isList.default)(item)) {
        listSelections.push(item.key);
      }
    });
  } else if (listSelections?.length === 0 && wholeListItemSelected.length > 0) {
    listSelections = wholeListItemSelected.map(block => block.key);
  }

  const firstSymbolStyle = {};

  if (!listSelections) {
    return;
  }

  for (const [index, key] of listSelections.entries()) {
    const node = document.getNode(key);

    if (!_everCangjie.Block.isBlock(node)) {
      continue;
    }

    const listSymbolStyle = { ...node?.data?.list?.symbolStyle
    };
    const newStyle = {};

    for (const styleName in symbolStyle) {
      if (['bold', 'italic', 'strike'].includes(styleName)) {
        if (isCollapsed) {
          // 项目符号选中设置样式，自动继承第一个 symbolStyle
          newStyle[styleName] = firstSymbolStyle[styleName] || !listSymbolStyle[styleName];
        } else {
          const firstText = document.getTextsAtRange(selection)[0];
          const markValue = firstText?.getMarks().find(mark => mark.type === styleName);
          newStyle[styleName] = Boolean(markValue);
        }

        if (!index) {
          firstSymbolStyle[styleName] = newStyle[styleName];
        }
      } else if (symbolStyle[styleName] === undefined) {
        // 允许显示声明 undefined 以清除指定属性
        delete listSymbolStyle[styleName];
      }
    }

    if (isHeadingAction) {
      newStyle.bold = symbolStyle.bold;
    }

    const newData = (0, _mergeListData.default)(node.data, {
      symbolStyle: { ...listSymbolStyle,
        ...symbolStyle,
        ...newStyle
      }
    });

    if (JSON.stringify(symbolStyle) === '{}') {
      delete newData.data.list.symbolStyle;
    }

    controller.command(_everCangjie.Commands.setNodeByKey, node.key, newData);
  }
}
//# sourceMappingURL=setSymbolStyle.js.map