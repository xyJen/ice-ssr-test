"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getListId;

var _everUtils = require("@ali/4ever-utils");

var _isList = _interopRequireDefault(require("./isList"));

var _isEmpty = _interopRequireDefault(require("./isEmpty"));

var _getCurrentItem = _interopRequireDefault(require("./getCurrentItem"));

// 如果当前项已是列表类型，且不需要前后序号连接时，直接使用当前项的listId，保持整个list group的listId一致
const getListIdByStartBlock = block => {
  return (0, _isList.default)(block) ? block?.data.list.listId : (0, _everUtils.getRandomId)();
};

function getListId(props) {
  const {
    value,
    restart,
    listType,
    type,
    controller
  } = props;
  if (restart || !value) return (0, _everUtils.getRandomId)();
  const {
    document,
    startBlock
  } = value;
  let prevSibling = startBlock && document?.getPreviousSibling(startBlock.key);

  while (prevSibling) {
    if ((0, _isList.default)(prevSibling)) {
      if (listType !== prevSibling.data.list.listStyleType) {
        return (0, _everUtils.getRandomId)();
      }

      return prevSibling.data.list.listId;
    }

    if (!(0, _isEmpty.default)(prevSibling)) {
      break;
    }

    prevSibling = document?.getPreviousSibling(prevSibling.key);
  }

  let nextSibling = startBlock && document?.getNextSibling(startBlock.key);

  if (controller?.value.selection.isExpanded) {
    const listItems = (0, _getCurrentItem.default)(controller);
    const nextKey = listItems[listItems.length - 1]?.key;

    if (nextKey) {
      nextSibling = document?.getNextSibling(nextKey);
    }
  }

  if (nextSibling && (0, _isList.default)(nextSibling) && listType === nextSibling?.data?.list?.listStyleType) {
    return nextSibling.data && nextSibling.data.list.listId;
  }

  if (type === 'tlist') {
    return (0, _everUtils.getRandomId)();
  }

  return getListIdByStartBlock(startBlock);
}
//# sourceMappingURL=getListId.js.map