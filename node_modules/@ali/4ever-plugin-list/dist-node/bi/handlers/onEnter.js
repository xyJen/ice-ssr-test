"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _commands = require("../commands");

var _utils = require("../utils");

var _regexp = require("../regexp");

var _listStyleMapping = require("../../utils/listStyleMapping");

function isEmptyNode(block) {
  const onlyOneChild = block.nodes.length === 1;

  const isTextNode = _everCangjie.Text.isText(block.nodes[0]);

  const isEmpty = !block.text;
  return onlyOneChild && isTextNode && isEmpty;
}

var _default = (event, controller, next) => {
  const {
    value
  } = controller;
  const {
    selection
  } = value;
  const currentItem = value.startBlock;
  if (!currentItem) return next();
  const firstNode = currentItem.getFirstNode();
  const firstText = firstNode.text || '';

  const startsWith1 = _regexp.STATS_WITH_1.test(firstText);

  const startsWitha = _regexp.STATS_WITH_a.test(firstText);

  const startsWithA = _regexp.STATS_WITH_A.test(firstText);

  const specialField = startsWith1 || startsWitha || startsWithA;
  if ((!currentItem || !currentItem.data.list) && !specialField) return next();
  event.preventDefault();

  if (isEmptyNode(currentItem)) {
    if ((0, _utils.getItemDepth)(currentItem) > 0) {
      return (0, _commands.increaseItemDepth)(controller, -1);
    }

    return (0, _commands.removeListNode)(controller);
  }

  if (!(0, _utils.isList)(currentItem)) {
    if (selection.isCollapsed && selection.anchor.isAtEndOfNode(currentItem)) {
      if (startsWith1) {
        controller.command(_everCangjie.Commands.removeTextByKey, firstNode.key, 0, '1.');
        (0, _commands.toggleWrapInList)(controller, 'olist', _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[0]);
      } else if (startsWitha) {
        controller.command(_everCangjie.Commands.removeTextByKey, firstNode.key, 0, 'a.');
        (0, _commands.toggleWrapInList)(controller, 'olist', _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[8]);
      } else if (startsWithA) {
        controller.command(_everCangjie.Commands.removeTextByKey, firstNode.key, 0, 'A.');
        (0, _commands.toggleWrapInList)(controller, 'olist', _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[3]);
      }
    } else {
      return next();
    }
  }

  return (0, _commands.splitListItem)(controller, event.shiftKey);
};

exports.default = _default;
//# sourceMappingURL=onEnter.js.map