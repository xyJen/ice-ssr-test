"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnPaste;

var _everCangjie = require("@ali/4ever-cangjie");

const {
  MIME_TYPES
} = _everCangjie.constants;

function isList(node) {
  const listData = node?.data?.list;

  if (!listData) {
    return false;
  }

  return !listData.isTaskList;
}

function isSameListType(listData, firstListData) {
  if (listData.isTaskList || firstListData?.isTaskList) {
    return false;
  }

  if ([listData, firstListData].every(data => data?.isOrdered !== undefined)) {
    return listData?.isOrdered === firstListData?.isOrdered;
  }

  return false;
}

function isSameListGroup(node, firstNode) {
  return node?.data?.list?.listId === firstNode?.data.list.listId && node?.data.list.isOrdered === firstNode?.data.list.isOrdered;
}
/**
 *
 * 复制列表粘贴到列表中，如果 idOrdered 类型相同则自动合并，listId 与粘贴处或前一项的列表 listId、listStyleType 保持相同
 *
 *   +-------------+                  +-------------+
 *   |  1. DDD     |                  |  1. AAA     |
 *   |  2. EEE     |       paste      |  2. BBB     |
 *   |             |      ----->      |             |
 *   |             |                  |  3. CCC     |
 *   +-------------+                  +-------------+
 *
 *                           |
 *                           |
 *                           |
 *                           V
 *
 *                   +---------------+
 *                   |  1. AAA       |
 *                   |  2. BBB       |
 *                   |  3. DDD       |
 *                   |  4. EEE       |
 *                   |  5. CCC       |
 *                   +---------------+
 */


function createOnPaste() {
  return function onPaste(event, controller, next) {
    const {
      document,
      selection
    } = controller.value;
    const clipboardData = controller.query('getClipboardData', event);

    if (!clipboardData?.hasData(MIME_TYPES.FRAGMENT)) {
      return next();
    }

    const fragment = clipboardData.getFragment();
    const firstNode = fragment?.nodes[0];

    if (!isList(firstNode)) {
      return next();
    }

    const currentBlock = document.getClosestBlock(selection.anchor.key);

    if (!currentBlock) {
      return next();
    }

    const prevBlock = document.getPreviousBlock(currentBlock.key);

    if (isList(prevBlock) || isList(currentBlock)) {
      const listData = currentBlock?.data?.list || prevBlock?.data.list;

      if (!isSameListType(listData, firstNode?.data.list)) {
        return next();
      }

      const extendSet = new Set();
      fragment?.nodes.forEach(n => {
        if (isSameListGroup(n, firstNode)) {
          extendSet.add(n);
        }
      });
      let result = fragment;

      if (result) {
        for (const node of extendSet) {
          result = result?.setNode(result.getPath(node.key), {
            data: { ...node.data,
              list: { ...node.data.list,
                listId: listData.listId,
                listStyleType: listData.listStyleType
              }
            }
          });
        }

        event.setClipboardData(event.clipboardData.setData(MIME_TYPES.FRAGMENT, _everCangjie.transferUtils.encodeFragment(result)));
      }
    }

    return next();
  };
}
//# sourceMappingURL=onCangjiePaste.js.map