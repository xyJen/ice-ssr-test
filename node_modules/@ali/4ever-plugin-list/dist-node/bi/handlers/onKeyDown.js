"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isHotkey = require("is-hotkey");

var _onEnter = _interopRequireDefault(require("./onEnter"));

var _onBackspace = _interopRequireDefault(require("./onBackspace"));

var _onIncrease = _interopRequireDefault(require("./onIncrease"));

var _commands = require("../commands");

var _listStyleMapping = require("../../utils/listStyleMapping");

const isBackspaceHotKey = (0, _isHotkey.isKeyHotkey)('backspace');
const isDeleteHotKey = (0, _isHotkey.isKeyHotkey)('delete');
const isEnterHotKey = (0, _isHotkey.isKeyHotkey)('shift?+enter');
const isTabHotKey = (0, _isHotkey.isKeyHotkey)('shift?+tab');
const isUlHotKey = (0, _isHotkey.isKeyHotkey)(['mod+shift+7', 'mod+shift+&']);
const isOlHotKey = (0, _isHotkey.isKeyHotkey)(['mod+shift+8', 'mod+shift+*']);
const isIncreaseHotKey = (0, _isHotkey.isKeyHotkey)('mod+]');
const isDecreaseHotKey = (0, _isHotkey.isKeyHotkey)('mod+[');
const isTlHotKey = (0, _isHotkey.isKeyHotkey)('mod+shift+y');

var _default = (event, controller, next) => {
  if (controller.query('isSelectionInTableEdge')) {
    return next();
  }

  if (isEnterHotKey(event)) {
    return (0, _onEnter.default)(event, controller, next);
  }

  if (isTabHotKey(event)) {
    const offset = event.shiftKey ? -1 : 1;
    return (0, _onIncrease.default)(event, controller, offset, next);
  }

  if (isIncreaseHotKey(event)) {
    return (0, _onIncrease.default)(event, controller, 1, next);
  }

  if (isDecreaseHotKey(event)) {
    return (0, _onIncrease.default)(event, controller, -1, next);
  }

  if (isBackspaceHotKey(event) || isDeleteHotKey(event)) {
    return (0, _onBackspace.default)(event, controller, next);
  }

  if (isUlHotKey(event)) {
    event.preventDefault();
    return (0, _commands.toggleWrapInList)(controller, 'ulist', _listStyleMapping.DEFAULT_BULLET_LIST_ARRAY[0], true);
  }

  if (isOlHotKey(event)) {
    event.preventDefault();
    return (0, _commands.toggleWrapInList)(controller, 'olist', _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[0], true);
  }

  if (isTlHotKey(event)) {
    event.preventDefault();
    return (0, _commands.toggleWrapInList)(controller, 'tlist');
  }

  return next();
};

exports.default = _default;
//# sourceMappingURL=onKeyDown.js.map