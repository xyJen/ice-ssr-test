"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onAction;

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _everUtils = require("@ali/4ever-utils");

var _actions = require("../actions");

var _toggleWrapInList = _interopRequireDefault(require("../commands/toggleWrapInList"));

var _transform = _interopRequireDefault(require("../commands/transform"));

var _removeListNode = _interopRequireDefault(require("../commands/removeListNode"));

var _toggleCheckStatus = _interopRequireDefault(require("../commands/toggleCheckStatus"));

var _everPluginColor = require("@ali/4ever-plugin-color");

var _everPluginHeading = require("@ali/4ever-plugin-heading");

var _everPluginMarks = require("@ali/4ever-plugin-marks");

var _utils = require("../utils");

var _commands = require("../commands");

function onAction(action, controller, next) {
  const isHighlight = controller.isActionFactory('isHighlight');
  const isAdjustSz = controller.isActionFactory('isAdjustSz');
  const isSetSz = controller.isActionFactory('isSetSz');
  const isSetFonts = controller.isActionFactory('isSetFonts');
  const {
    type,
    payload
  } = action;

  if (type === _actions.LIST_TOGGLE_LIST) {
    const {
      listType,
      listStyleType
    } = payload;
    return (0, _toggleWrapInList.default)(controller, listType, listStyleType);
  }

  if (type === _actions.LIST_TRANSFORM) {
    const {
      listType,
      listStyleType
    } = payload;
    return (0, _transform.default)(controller, listType, listStyleType); // return controller.command(transform, listType, listStyleType);
  }

  if (type === _actions.LIST_REMOVE_LIST) {
    return (0, _removeListNode.default)(controller);
  }

  if (type === _actions.LIST_SET_CHECK_STATUS) {
    const {
      node,
      checked
    } = payload;
    return (0, _toggleCheckStatus.default)(controller, node.key, checked);
  }

  if (type === _actions.LIST_SELECT_SYMBOL) {
    const {
      listSelections,
      isSelected
    } = payload;
    return (0, _utils.selectSymbol)(controller, listSelections, isSelected);
  }

  if (type === _actions.CLEAR_RANGE_SELECTION) {
    const {
      node
    } = payload;
    return (0, _utils.clearRangeSelection)(controller, node);
  }

  if (type === _actions.CLEAR_LIST_SELECTIONS) {
    return (0, _utils.clearListSelections)(controller);
  }

  if (type === _actions.SELECT_LIST_SELECTIONS) {
    const {
      listSelections
    } = payload;
    return (0, _utils.selectListSelections)(controller, listSelections);
  }

  if (isSetSz?.(action)) {
    const {
      sz
    } = payload;
    (0, _utils.setSymbolStyle)(controller, {
      sz
    });
  }

  if (isAdjustSz?.(action)) {
    const {
      isIncreasingSz
    } = payload;
    (0, _utils.adjustSymbolSz)(controller, isIncreasingSz);
  }

  if (isSetFonts?.(action)) {
    const {
      fonts
    } = payload;
    (0, _utils.setSymbolStyle)(controller, {
      fonts
    });
  }

  if (type === _everPluginColor.COLOR_SET) {
    const {
      color
    } = payload;
    (0, _utils.setSymbolStyle)(controller, {
      color
    });
  }

  if (isHighlight?.(action)) {
    const {
      highlight
    } = action.payload;
    (0, _utils.setSymbolStyle)(controller, {
      shd: highlight
    });
  }

  if (type === _everPluginMarks.MARK_TOGGLE) {
    const {
      mark
    } = payload;
    const symbolStyle = {};
    symbolStyle[mark] = true;
    (0, _utils.setSymbolStyle)(controller, symbolStyle);
  }

  if (type === _everPluginHeading.HEADING_SET) {
    const {
      heading
    } = payload;
    const isParagraph = heading === _everPluginParagraph.Paragraph.TYPE;
    (0, _utils.setSymbolStyle)(controller, {
      // undefined 代表清除
      sz: isParagraph ? undefined : _everUtils.SzUtil.fromHeadingType(heading),
      bold: !isParagraph
    });
  }

  if (type === _actions.CONTINUE_NUMBERING) {
    (0, _commands.continueNumbering)(controller);
  }

  if (type === _actions.RESTART_NUMBERING) {
    (0, _commands.restartNumbering)(controller);
  }

  return next();
}
//# sourceMappingURL=onAction.js.map