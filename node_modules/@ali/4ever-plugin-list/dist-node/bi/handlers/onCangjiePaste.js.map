{"version":3,"sources":["../../../../src/bi/handlers/onCangjiePaste.ts"],"names":["MIME_TYPES","constants","isList","node","listData","data","list","isTaskList","isSameListType","firstListData","every","isOrdered","undefined","isSameListGroup","firstNode","listId","createOnPaste","onPaste","event","controller","next","document","selection","value","clipboardData","query","hasData","FRAGMENT","fragment","getFragment","nodes","currentBlock","getClosestBlock","anchor","key","prevBlock","getPreviousBlock","extendSet","Set","forEach","n","add","result","setNode","getPath","listStyleType","setClipboardData","setData","transferUtils","encodeFragment"],"mappings":"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","sourcesContent":["import {\n  Block,\n  Plugin,\n  constants,\n  transferUtils,\n} from '@ali/4ever-cangjie';\nimport { ListProperties } from '../../utils/types';\n\nconst { MIME_TYPES } = constants;\n\nfunction isList(node?: Block | null) {\n  const listData = node?.data?.list;\n  if (!listData) {\n    return false;\n  }\n  return !listData.isTaskList;\n}\n\nfunction isSameListType(\n  listData: ListProperties,\n  firstListData?: ListProperties,\n) {\n  if (listData.isTaskList || firstListData?.isTaskList) {\n    return false;\n  }\n  if (\n    [listData, firstListData].every((data) => data?.isOrdered !== undefined)\n  ) {\n    return listData?.isOrdered === firstListData?.isOrdered;\n  }\n  return false;\n}\n\nfunction isSameListGroup(node: Block | null, firstNode?: Block | null) {\n  return (\n    node?.data?.list?.listId === firstNode?.data.list.listId &&\n    node?.data.list.isOrdered === firstNode?.data.list.isOrdered\n  );\n}\n\n/**\n *\n * 复制列表粘贴到列表中，如果 idOrdered 类型相同则自动合并，listId 与粘贴处或前一项的列表 listId、listStyleType 保持相同\n *\n *   +-------------+                  +-------------+\n *   |  1. DDD     |                  |  1. AAA     |\n *   |  2. EEE     |       paste      |  2. BBB     |\n *   |             |      ----->      |             |\n *   |             |                  |  3. CCC     |\n *   +-------------+                  +-------------+\n *\n *                           |\n *                           |\n *                           |\n *                           V\n *\n *                   +---------------+\n *                   |  1. AAA       |\n *                   |  2. BBB       |\n *                   |  3. DDD       |\n *                   |  4. EEE       |\n *                   |  5. CCC       |\n *                   +---------------+\n */\n\nexport default function createOnPaste(): Plugin['onCangjiePaste'] {\n  return function onPaste(event, controller, next) {\n    const { document, selection } = controller.value;\n    const clipboardData = controller.query('getClipboardData', event);\n    if (!clipboardData?.hasData(MIME_TYPES.FRAGMENT)) {\n      return next();\n    }\n    const fragment = clipboardData.getFragment();\n    const firstNode = fragment?.nodes[0];\n\n    if (!isList(firstNode)) {\n      return next();\n    }\n\n    const currentBlock = document.getClosestBlock(selection.anchor.key);\n\n    if (!currentBlock) {\n      return next();\n    }\n\n    const prevBlock = document.getPreviousBlock(currentBlock.key);\n    if (isList(prevBlock) || isList(currentBlock)) {\n      const listData = currentBlock?.data?.list || prevBlock?.data.list;\n      if (!isSameListType(listData, firstNode?.data.list)) {\n        return next();\n      }\n\n      const extendSet = new Set<Block>();\n      fragment?.nodes.forEach((n) => {\n        if (isSameListGroup(n, firstNode)) {\n          extendSet.add(n);\n        }\n      });\n\n      let result = fragment;\n      if (result) {\n        for (const node of extendSet) {\n          result = result?.setNode(result.getPath(node.key)!, {\n            data: {\n              ...node.data,\n              list: {\n                ...node.data.list,\n                listId: listData.listId,\n                listStyleType: listData.listStyleType,\n              },\n            },\n          });\n        }\n\n        event.setClipboardData(\n          event.clipboardData!.setData(\n            MIME_TYPES.FRAGMENT,\n            transferUtils.encodeFragment(result),\n          ),\n        );\n      }\n    }\n    return next();\n  };\n}\n"],"file":"onCangjiePaste.js"}