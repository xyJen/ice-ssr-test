"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _toggleList = _interopRequireDefault(require("../commands/toggleList"));

var _utils = require("../utils");

var _regexp = require("../regexp");

var _listStyleMapping = require("../../utils/listStyleMapping");

var _generateSymbol = require("../../utils/generateSymbol");

var _transformNumber = require("../../utils/transformNumber");

const getListStyleType = symbol => {
  if (symbol === '*') return _listStyleMapping.DEFAULT_BULLET_LIST_ARRAY[0];
  if (symbol === '-') return _listStyleMapping.DEFAULT_BULLET_LIST_ARRAY[6];
  if (symbol === '+') return _listStyleMapping.DEFAULT_BULLET_LIST_ARRAY[7];
  return null;
};

const getListType = chars => {
  const isLowerLetter = _regexp.LOWER_LETTER_REG.test(chars);

  const isUpperLetter = _regexp.UPPER_LETTER_REG.test(chars);

  const isNumAllBracket = _regexp.EN_NUM_BRACKET.test(chars) || _regexp.ZH_NUM_BRACKET.test(chars);

  const isNumHalfBracket = _regexp.EN_NUM_HALF_BRACKET.test(chars) || _regexp.ZH_NUM_HALF_BRACKET.test(chars);

  const isLetHalfBracket = _regexp.EN_LET_HALF_BRACKET.test(chars) || _regexp.ZH_LET_HALF_BRACKET.test(chars);

  let listType;

  if (isLowerLetter) {
    listType = _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[8];
  } else if (isUpperLetter) {
    listType = _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[3];
  } else if (isNumAllBracket) {
    listType = _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[9];
  } else if (isNumHalfBracket) {
    listType = _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[1];
  } else if (isLetHalfBracket) {
    listType = _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[10];
  }

  return listType;
};
/**
 * 列表类型是否匹配
 * @description 根据输入字段预判的列表类型跟最近的列表项的类型是否一致
 */


const isMatchClosestList = ({
  isNumber,
  isLowerLetter,
  isUpperLetter,
  isNumAllBracket,
  isNumHalfBracket,
  isLetHalfBracket
}, closestListItem, currentItem) => {
  const listStyleType = closestListItem?.data?.list?.listStyleType;
  const typeObj = _listStyleMapping.mapping[listStyleType];
  const level = (0, _utils.getMatchLevel)(currentItem);

  if (typeObj) {
    const remainder = level % 3;
    const relativeLevel = _generateSymbol.RELATIVE_LEVEL.includes(remainder) ? remainder : 0;
    const type = typeObj[relativeLevel][0];
    const format = typeObj[relativeLevel][1].replace(/\d+/, '');

    if (isNumber && type === 'decimal' && format === '%.' || isLowerLetter && type === 'lowerLetter' && format === '%.' || isUpperLetter && type === 'upperLetter' && format === '%.' || isNumAllBracket && type === 'decimal' && format === '(%)' || isNumHalfBracket && type === 'decimal' && format === '%)' || isLetHalfBracket && type === 'lowerLetter' && format === '%1)') {
      return true;
    }
  }

  return false;
};

var _default = (event, editor, next) => {
  const {
    value
  } = editor;
  const currentItem = (0, _utils.getCurrentItem)(editor)[0];

  if (!_everCangjie.Block.isBlock(currentItem) || value.selection?.isExpanded || currentItem?.data.list || currentItem?.data.blockquote || editor.query('isSelectionInHeading')) {
    return next();
  }

  const {
    startBlock,
    selection,
    document
  } = value; // 只有在段落开头时，才允许插入列表

  if (value.startText !== value.startBlock?.getFirstText()) {
    return next();
  }

  const startOffset = (selection?.anchor).offset;
  const chars = startOffset !== undefined && startBlock?.text.slice(0, startOffset).replace(/\s*/g, '') || '';
  const types = (0, _utils.shortcutTypes)(chars);
  if (!startBlock || !types || value.composing) return next();

  const isNumber = _regexp.ARABIC_REG.test(chars);

  const isNumberDon = _regexp.NUMBER_DON.test(chars);

  const isLowerLetter = _regexp.LOWER_LETTER_REG.test(chars);

  const isUpperLetter = _regexp.UPPER_LETTER_REG.test(chars);

  const isNumAllBracket = _regexp.EN_NUM_BRACKET.test(chars) || _regexp.ZH_NUM_BRACKET.test(chars);

  const isNumHalfBracket = _regexp.EN_NUM_HALF_BRACKET.test(chars) || _regexp.ZH_NUM_HALF_BRACKET.test(chars);

  const isLetHalfBracket = _regexp.EN_LET_HALF_BRACKET.test(chars) || _regexp.ZH_LET_HALF_BRACKET.test(chars);

  if (chars === '*' || chars === '-' || chars === '+') {
    const listStyleType = getListStyleType(chars) || undefined;
    const data = (0, _utils.getListData)({
      listId: (0, _utils.getListId)({
        value,
        listType: listStyleType
      }),
      type: 'ul',
      level: 0,
      listStyleType
    });
    (0, _toggleList.default)(editor, data, 'ulist');
  } else if (isNumber || isLowerLetter || isUpperLetter || isNumAllBracket || isNumHalfBracket || isLetHalfBracket) {
    let type = '';

    if (isUpperLetter || isLowerLetter || isLetHalfBracket) {
      type = 'letter';
    }

    const matchChars = chars.slice(Number(isNumAllBracket), -1);
    const inputNumber = (0, _transformNumber.transformString)(matchChars, type);
    const listId = (0, _utils.getListId)({
      value,
      restart: inputNumber === 1
    });
    let listType = getListType(chars);

    if (isNumberDon) {
      listType = _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[11];
    } else if (isNumber) {
      listType = _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[0];
    }

    let data = (0, _utils.getListData)({
      listId,
      type: 'ol',
      level: 0,
      listStyleType: listType
    });
    const prevBlock = (0, _utils.getPrevClosestListItem)(value, currentItem, {
      isOrdered: true
    });
    const nextBlock = document.getNextBlock(currentItem.key);
    const closestListItem = [{
      blockItem: prevBlock,
      isConnect: _utils.isConnectPrevClosestList
    }, {
      blockItem: nextBlock,
      isConnect: _utils.isConnectNextClosestList
    }].find(({
      blockItem,
      isConnect
    }) => {
      const result = blockItem && _everCangjie.Block.isBlock(currentItem) && isMatchClosestList({
        isNumber,
        isLowerLetter,
        isUpperLetter,
        isNumAllBracket,
        isNumHalfBracket,
        isLetHalfBracket
      }, blockItem, currentItem) && isConnect(value, blockItem, inputNumber);
      return result;
    });

    if (closestListItem) {
      data = {
        list: { // @ts-ignore
          ...closestListItem.blockItem.data.list
        }
      };
    } else if (inputNumber !== 1) {
      return next();
    }

    (0, _toggleList.default)(editor, data, 'olist');
  } else if (chars === '[]') {
    const data = (0, _utils.getListData)({
      listId: (0, _utils.getListId)({
        value
      }),
      type: 'tlist',
      level: 0
    });
    (0, _toggleList.default)(editor, data);
  } else if (chars === '[x]') {
    const data = (0, _utils.getListData)({
      listId: (0, _utils.getListId)({
        value
      }),
      type: 'tlist',
      level: 0
    });
    data.list.isChecked = true;
    (0, _toggleList.default)(editor, data);
  } else {
    return next();
  }

  event.preventDefault();
  editor.command(_everCangjie.Commands.moveFocusToStartOfNode, startBlock).command(_everCangjie.Commands.del);
  editor.dispatch('createTriggerMarkdownAction', {
    mdType: types
  });
  return editor;
};

exports.default = _default;
//# sourceMappingURL=onSpace.js.map