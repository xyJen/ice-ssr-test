{"version":3,"sources":["../../../src/bi/createRenderToolbar.tsx"],"names":["buttons","UnorderedListButton","OrderedListButton","createRenderToolbar","config","props","controller","buttonName","extraProps","Component","SlotType","splitButton","locale","enableSticker","ItemKey","iconButton"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;uBAH4B,a;AAK5B,MAAMA,OAA4H,GAAG;AACnI,gBAAcC,4BADqH;AAEnI,gBAAcC;AAFqH,CAArI;;AAKe,SAASC,mBAAT,CACbC,MADa,EAEE;AAGf,SAAO,CAACC,KAAD,EAAQC,UAAR,KAAuB;AAE5B,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA6BH,KAAnC;AAEA,UAAMI,SAAS,GAAGT,OAAO,CAACO,UAAD,CAAzB;;AACA,QAAIE,SAAJ,EAAe;AACb,0BACE,eAAC,uBAAD;AAAU,QAAA,OAAO,EAAEC,wBAASC;AAA5B,sBACE,eAAC,SAAD;AACE,QAAA,UAAU,EAAEL,UADd;AAEE,QAAA,MAAM,EAAEF,MAAM,CAACQ,MAFjB;AAGE,QAAA,aAAa,EAAER,MAAM,CAACS;AAHxB,SAIML,UAJN,EADF,CADF;AAUD;;AAED,QAAID,UAAU,KAAKO,uBAAQ,YAAR,CAAnB,EAA0C;AACxC,0BACE,eAAC,uBAAD;AAAU,QAAA,OAAO,EAAEJ,wBAASK;AAA5B,sBACE,eAAC,uBAAD;AACE,QAAA,UAAU,EAAET,UADd;AAEE,QAAA,MAAM,EAAEF,MAAM,CAACQ;AAFjB,SAGMJ,UAHN,EADF,CADF;AASD;;AAED,WAAO,IAAP;AACD,GA/BD;AAgCD","sourcesContent":["import * as React from 'react';\nimport { ItemKey, ItemKeys, ItemSlot, RenderToolbar, SlotType } from '@ali/4ever-component';\nimport TaskListButton, { TaskListButtonProps } from './components/next/taskListButton';\nimport UnorderedListButton, { UnorderedListButtonProps } from './components/next/unorderedListButton';\nimport OrderedListButton from './components/next/orderedListButton';\n\nconst buttons: Partial<Record<ItemKeys, React.ComponentType<TaskListButtonProps> | React.ComponentType<UnorderedListButtonProps>>> = {\n  'list.ulist': UnorderedListButton,\n  'list.olist': OrderedListButton\n};\n\nexport default function createRenderToolbar(\n  config: any,\n): RenderToolbar {\n\n\n  return (props, controller) => {\n\n    const { buttonName, extraProps } = props;\n\n    const Component = buttons[buttonName] as React.ComponentType<TaskListButtonProps | UnorderedListButtonProps>;\n    if (Component) {\n      return (\n        <ItemSlot display={SlotType.splitButton}>\n          <Component\n            controller={controller}\n            locale={config.locale}\n            enableSticker={config.enableSticker}\n            {...extraProps}\n          />\n        </ItemSlot>\n      )\n    }\n\n    if (buttonName === ItemKey['list.tlist']) {\n      return (\n        <ItemSlot display={SlotType.iconButton}>\n          <TaskListButton\n            controller={controller}\n            locale={config.locale}\n            {...extraProps}\n          />\n        </ItemSlot>\n      )\n    }\n\n    return null\n  };\n}\n"],"file":"createRenderToolbar.js"}