{"version":3,"sources":["../../../../../src/bi/components/next/taskListButton.tsx"],"names":["isDisabled","controller","isCollapsedAtEdge","value","selection","query","Boolean","TaskListButton","props","locale","disabled","tooltip","tooltipProp","rest","isActive","handleClick","React","useCallback","run","useMemo","title","taskList","shortCut","TASKLIST_HOT_KEY_TIP","description","space","ListRole","listTask"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;uBAL4B,a;;AAY5B,MAAMA,UAAU,GAAIC,UAAD,IAA4B;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAwBD,UAAU,CAACE,KAAX,CAAiBC,SAA/C;AACA,QAAMJ,UAAU,GACdE,iBAAiB,IACjBD,UAAU,CAACI,KAAX,CAAiB,iBAAjB,CADA,IAEA;AACAJ,EAAAA,UAAU,CAACI,KAAX,CAAiB,6BAAjB,CAJF;AAKA,SAAOC,OAAO,CAACN,UAAD,CAAd;AACD,CARD;;AAUe,SAASO,cAAT,CAAwBC,KAAxB,EAAoD;AACjE,QAAM;AAAEP,IAAAA,UAAF;AAAcQ,IAAAA,MAAd;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA,OAAO,EAAEC,WAAzC;AAAsD,OAAGC;AAAzD,MAAkEL,KAAxE;AACA,QAAMM,QAAQ,GAAG,yBAAWb,UAAX,CAAjB;AAEA,QAAMc,WAAW,GAAGC,KAAK,CAACC,WAAN,CAClB,MAAMhB,UAAU,CAACiB,GAAX,CAAe,UAAf,EAA2B,yBAAW,OAAX,CAA3B,CADY,EAElB,CAACjB,UAAD,CAFkB,CAApB;AAKA,QAAMU,OAAO,GAAGK,KAAK,CAACG,OAAN,CAAc,OAAO;AACnCC,IAAAA,KAAK,EAAEX,MAAM,EAAEY,QADoB;AAEnCC,IAAAA,QAAQ,EAAEC,2BAFyB;AAGnCC,IAAAA,WAAW,EAAE,oBAAoBf,MAAM,EAAEgB,KAAR,IAAiB,OAArC,CAHsB;AAInC,OAAGb;AAJgC,GAAP,CAAd,EAKZ,CAACA,WAAD,CALY,CAAhB;AAOA,sBACE,eAAC,6BAAD;AACE,IAAA,MAAM,EAAC,qBADT,CAEE;AAFF;AAGE,IAAA,QAAQ,EAAE,KAHZ;AAIE,IAAA,MAAM,EAAEE,QAJV;AAKE,IAAA,QAAQ,EAAEJ,QAAQ,IAAIV,UAAU,CAACC,UAAD,CALlC;AAME,IAAA,OAAO,EAAEc,WANX;AAOE,IAAA,IAAI,EAAEW,eAASC,QAPjB;AAQE,IAAA,KAAK,EAAElB,MAAM,EAAEY,QARjB;AASE,IAAA,OAAO,EAAEV;AATX,KAUME,IAVN,EADF;AAcD","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { IToolbarButtonConfig, TaskListButton as Button } from '@ali/4ever-component';\nimport isTaskList from '../../queries/isTaskList';\nimport { toggleList } from '../../actions';\nimport { TASKLIST_HOT_KEY_TIP } from '../../utils';\nimport { ListRole } from '../../../utils/role';\n\nexport interface TaskListButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  locale?: Record<string, string>;\n}\n\nconst isDisabled = (controller: Controller) => {\n  const { isCollapsedAtEdge } = controller.value.selection;\n  const isDisabled =\n    isCollapsedAtEdge ||\n    controller.query('isSelectionInHr') ||\n    // fix: https://aone.alibaba-inc.com/v2/project/1090534/bug/35667506\n    controller.query('isSelectionInSubjectHeading');\n  return Boolean(isDisabled);\n};\n\nexport default function TaskListButton(props: TaskListButtonProps) {\n  const { controller, locale, disabled, tooltip: tooltipProp, ...rest } = props;\n  const isActive = isTaskList(controller);\n\n  const handleClick = React.useCallback(\n    () => controller.run('onAction', toggleList('tlist')),\n    [controller],\n  );\n\n  const tooltip = React.useMemo(() => ({\n    title: locale?.taskList,\n    shortCut: TASKLIST_HOT_KEY_TIP,\n    description: ' Markdown: [] ' + (locale?.space || 'Space'),\n    ...tooltipProp,\n  }), [tooltipProp]);\n\n  return (\n    <Button\n      testid=\"bi-toolbar-tasklist\"\n      // @ts-ignore 组件不存在 bordered 属性\n      bordered={false}\n      active={isActive}\n      disabled={disabled || isDisabled(controller)}\n      onClick={handleClick}\n      role={ListRole.listTask}\n      title={locale?.taskList}\n      tooltip={tooltip}\n      {...rest}\n    />\n  );\n}\n"],"file":"taskListButton.js"}