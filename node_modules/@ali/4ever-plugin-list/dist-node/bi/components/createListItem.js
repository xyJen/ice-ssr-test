"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createListItem;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _everUtils = require("@ali/4ever-utils");

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginListGroup = require("@ali/4ever-plugin-list-group");

var _actions = require("../actions");

var _context = require("../../component/context");

var _constant = require("../../utils/constant");

var _getJustifyContent = _interopRequireDefault(require("../../utils/getJustifyContent"));

var _generateSymbol = require("../../utils/generateSymbol");

var _styled = require("../../utils/styled");

var _getSymbolStyleByKey = require("../../utils/getSymbolStyleByKey");

var _renderStyledListItem = require("../../utils/renderStyledListItem");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  BorderStyleEnum
} = _everCangjie.MoCommon;
const {
  isListGroupAvailable,
  isNormalGroupNode,
  isInUnlistGroupContainer
} = _everPluginListGroup.utils;
const DEFAULT_BORDER_COLOR = '#000000';
const INDENT_SIZE = _everUtils.theme.indent.size;
const {
  DEFAULT_SHD_STYLES
} = _everUtils.theme;

function createListItem(Paragraph, extraProps) {
  const {
    allowCustomCheck = false
  } = extraProps || {};

  class ListItem extends _react.default.Component {
    constructor(...args) {
      super(...args);

      this.handleChange = checked => {
        const {
          controller,
          node,
          onChange
        } = this.props;
        onChange && onChange(checked);
        controller.run('onAction', (0, _actions.setCheckStatus)(node, checked));
      };

      this.getGroupListStyle = () => {
        const {
          node,
          controller
        } = this.props;
        const {
          shd
        } = node.data;

        if (!this.isListGroupAvailable || !shd) {
          return {
            display: 'contents'
          };
        } //@ts-ignore


        const paddingLeft = DEFAULT_SHD_STYLES.paddingLeft + (this.symbolAlign === 'right' ? _constant.ROMAN_EXTRA_INDENT : 0);
        const backgroundColor = isNormalGroupNode(node, controller) ? _everUtils.ShdUtil.transformShd(shd) : 'unset';
        const width = `calc(100% + ${(DEFAULT_SHD_STYLES.paddingLeft || 0) + (DEFAULT_SHD_STYLES.paddingRight || 0)}px)`;
        const justifyContent = (0, _getJustifyContent.default)(this.align);
        return { ...DEFAULT_SHD_STYLES,
          backgroundColor,
          paddingLeft,
          width,
          display: 'flex',
          justifyContent
        };
      };

      this.onSelectSymbol = () => {
        const {
          node
        } = this.props;
        const {
          onSelectSymbol
        } = this.context;
        onSelectSymbol && onSelectSymbol(this.listConfig.listId, node.key);
      };
    }

    get align() {
      const {
        node
      } = this.props;
      return node.data.jc || 'left';
    }

    get isList() {
      const {
        node
      } = this.props;
      const listConfig = node.data.list;
      return !!listConfig;
    }

    get symbolAlign() {
      const {
        listStyle
      } = this.listConfig;

      if (listStyle && ['upperRoman', 'lowerRoman'].includes(listStyle.format)) {
        return 'right';
      } else {
        return 'left';
      }
    }

    get listConfig() {
      return this.isList ? this.props.node.data.list : null;
    }

    get isSymbolSelected() {
      const {
        node
      } = this.props;
      return node.data.isSelected;
    }

    get isListGroupAvailable() {
      const {
        node,
        controller
      } = this.props;
      return isListGroupAvailable(controller) && !node.data.blockquote;
    }

    getStyle() {
      const {
        isSelected,
        customStyle,
        node,
        controller,
        visible
      } = this.props;
      const {
        isTaskList,
        level = 0,
        listStyle
      } = this.listConfig;
      const {
        pi,
        bdr = {}
      } = this.props.node.data;
      const {
        shd,
        ind
      } = node.data;
      let paddingSpace = level * INDENT_SIZE;

      if (ind) {
        const {
          firstLine = 0,
          left = 0
        } = _everUtils.IndUtil.fromBlock(node);

        paddingSpace += firstLine + left;
      } // 罗马数字统一右侧对齐


      if (listStyle && ['upperRoman', 'lowerRoman'].includes(listStyle.format)) {
        // 根据字体大小，动态计算罗马数字预留空间的宽度
        paddingSpace += this.isListGroupAvailable && shd ? 0 : _constant.ROMAN_EXTRA_INDENT;
      }

      const isTaskSelected = isTaskList && isSelected && !allowCustomCheck;
      const styleObj = {
        paddingLeft: paddingSpace,
        backgroundColor: isTaskSelected && node.data.shd === undefined ? '#f4f4f4' : '',
        borderRadius: isTaskSelected ? '3px' : '',
        ...customStyle
      }; // Pi-2.0：列表高度有时会被项目符号莫名撑高，且边距需要渲染在列表处才可以生效

      if (pi && pi.box) {
        const {
          height,
          margin = {}
        } = pi.box;
        const {
          top = 0,
          bottom = 0
        } = margin;
        styleObj.height = height;
        styleObj.marginTop = top;
        styleObj.marginBottom = bottom;
      } // 列表的边框需要挂载外围的 DOM 上


      if (bdr.top) {
        const {
          val = BorderStyleEnum.Single,
          sz = 1,
          color: bdrColor = DEFAULT_BORDER_COLOR,
          space = 0
        } = bdr.top;
        const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
        const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
        styleObj.borderTop = `${sz}px ${borderStyle} ${borderColor}`;
        styleObj.paddingTop = space;
      }

      if (bdr.bottom) {
        const {
          val = BorderStyleEnum.Single,
          sz = 1,
          color: bdrColor = DEFAULT_BORDER_COLOR,
          space = 0
        } = bdr.bottom;
        const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
        const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
        styleObj.borderBottom = `${sz}px ${borderStyle} ${borderColor}`;
        styleObj.paddingBottom = space;
      }

      if (bdr.left) {
        const {
          val = BorderStyleEnum.Single,
          sz = 1,
          color: bdrColor = DEFAULT_BORDER_COLOR,
          space = 0
        } = bdr.left;
        const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
        const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
        styleObj.borderLeft = `${sz}px ${borderStyle} ${borderColor}`;
        styleObj.paddingLeft = space + paddingSpace;
      }

      if (bdr.right) {
        const {
          val = BorderStyleEnum.Single,
          sz = 1,
          color: bdrColor = DEFAULT_BORDER_COLOR,
          space = 0
        } = bdr.right;
        const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
        const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
        styleObj.borderRight = `${sz}px ${borderStyle} ${borderColor}`;
        styleObj.paddingRight = space;
      }

      if (isInUnlistGroupContainer(node, controller)) {
        styleObj.paddingLeft = (Number(styleObj.paddingLeft) || 0) + _everPluginListGroup.EXTRA_PADDING;
      }

      if (shd && !this.isListGroupAvailable) {
        for (const key in DEFAULT_SHD_STYLES) {
          if (typeof styleObj[key] === 'number') {
            styleObj[key] += DEFAULT_SHD_STYLES[key];
          } else {
            styleObj[key] = DEFAULT_SHD_STYLES[key];
          }
        }

        styleObj.backgroundColor = _everUtils.ShdUtil.transformShd(shd);
      }

      if (visible === false) {
        styleObj.display = 'none';
      }

      return styleObj;
    }

    renderParagraph() {
      const {
        node,
        children,
        isSelected,
        customStyle,
        nodeRef,
        ...rest
      } = this.props;
      return /*#__PURE__*/_createElement(Paragraph, (0, _extends2.default)({}, rest, {
        ref: nodeRef,
        node: node,
        isList: this.isList,
        isSelected: isSelected
      }), children);
    }

    renderListItem() {
      const {
        node,
        className,
        contentStyle,
        listItemRef
      } = this.props;
      const {
        step,
        start = 1
      } = node.data;
      const {
        listId,
        isOrdered,
        isTaskList,
        isChecked,
        level = 0,
        listStyle,
        listStyleType,
        hideSymbol,
        symbolStyle = _constant.SYMBOL_STYLE
      } = this.listConfig;
      const listSymbol = isTaskList ? '' : (0, _generateSymbol.generateSymbol)(level, Number(start), step, isOrdered, listStyleType, listStyle);
      const taskListConfig = {
        isTaskList,
        isChecked,
        isOrdered,
        handleChange: this.handleChange
      };
      return /*#__PURE__*/_createElement(_styled.ListItemWrapper, {
        align: this.align,
        className: className,
        ref: listItemRef,
        style: this.getStyle(),
        contentStyle: contentStyle,
        "data-testid": "list",
        "data-start": start,
        "data-listid": listId,
        "data-level": level,
        "data-isordered": isOrdered,
        "data-istasklist": isTaskList,
        "data-ischecked": isChecked
      }, /*#__PURE__*/_createElement(_styled.GroupListContainer, {
        style: this.getGroupListStyle()
      }, /*#__PURE__*/_createElement(_renderStyledListItem.RenderStyledListItem, {
        hideSymbol: hideSymbol,
        listSymbol: listSymbol,
        symbolStyle: (0, _getSymbolStyleByKey.convertSymbolStyle)(symbolStyle, isOrdered),
        isSelect: this.isSymbolSelected,
        symbolAlign: this.symbolAlign,
        onSelectSymbol: this.onSelectSymbol,
        taskListConfig: taskListConfig
      }, this.renderParagraph())));
    }

    render() {
      return this.isList ? this.renderListItem() : this.renderParagraph();
    }

  }

  ListItem.contextType = _context.ListContext;
  ;
  return /*#__PURE__*/_react.default.forwardRef((props, ref) => {
    return /*#__PURE__*/_createElement(ListItem, (0, _extends2.default)({}, props, {
      nodeRef: ref
    }));
  });
}
//# sourceMappingURL=createListItem.js.map