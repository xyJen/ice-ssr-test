"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOListButton = getOListButton;
exports.getUListButton = getUListButton;
exports.MobileTaskButton = MobileTaskButton;
exports.MobileTaskInsertButton = MobileTaskInsertButton;

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _isOrderedList = _interopRequireDefault(require("../queries/isOrderedList"));

var _isUnorderedList = _interopRequireDefault(require("../queries/isUnorderedList"));

var _actions = require("../actions");

var _listStyleMapping = require("../../utils/listStyleMapping");

const _createElement = /*#__PURE__*/_react.default.createElement;

function getOListButton(type) {
  return function MobileOListButton(props) {
    const {
      controller,
      Wrapper,
      item
    } = props;
    const {
      isCollapsedAtEdge
    } = controller.value.selection;
    const isDisabled = isCollapsedAtEdge;
    const isActive = (0, _isOrderedList.default)(controller);
    const handleClick = (0, _react.useCallback)(() => controller.run('onAction', (0, _actions.toggleList)('olist', _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[0])), [controller]);
    return /*#__PURE__*/_createElement(Wrapper, {
      item: item,
      type: type,
      icon: "list",
      isFocused: isActive,
      isDisabled: isDisabled,
      onClick: handleClick
    });
  };
}

function getUListButton(type) {
  return function MobileUListButton(props) {
    const {
      controller,
      Wrapper,
      item
    } = props;
    const {
      isCollapsedAtEdge
    } = controller.value.selection;
    const isDisabled = isCollapsedAtEdge;
    const isActive = (0, _isUnorderedList.default)(controller);
    const handleClick = (0, _react.useCallback)(() => controller.run('onAction', (0, _actions.toggleList)('ulist', _listStyleMapping.DEFAULT_BULLET_LIST_ARRAY[0])), [controller]);
    return /*#__PURE__*/_createElement(Wrapper, {
      item: item,
      type: type,
      icon: "uList",
      isFocused: isActive,
      isDisabled: isDisabled,
      onClick: handleClick
    });
  };
}

function MobileTaskButton(props) {
  const {
    controller,
    Wrapper,
    item
  } = props;
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge;

  const handleClick = _react.default.useCallback(() => controller.run('onAction', (0, _actions.toggleList)('tlist')), [controller]);

  return /*#__PURE__*/_createElement(Wrapper, {
    item: item,
    type: "big",
    icon: "checked",
    isDisabled: isDisabled,
    onClick: handleClick
  });
}

function MobileTaskInsertButton(props) {
  const {
    controller,
    Wrapper,
    item,
    locale
  } = props;

  const handleClick = _react.default.useCallback(() => {
    controller.command(_everCangjie.Commands.insertBlock, _everPluginParagraph.Paragraph.create({
      nodes: [_everCangjie.Text.create('')]
    }));
    controller.run('onAction', (0, _actions.toggleList)('tlist'));
  }, [controller]);

  return /*#__PURE__*/_createElement(Wrapper, {
    item: item,
    type: "line",
    icon: "checked",
    onClick: handleClick,
    lineText: locale?.taskList
  });
}
//# sourceMappingURL=mobileButtons.js.map