"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _actions = require("../actions");

var _context = require("../../component/context");

var _utils = require("../utils");

const _createElement = /*#__PURE__*/_react.default.createElement;

const ListWrapper = props => {
  const {
    children,
    controller
  } = props;
  const handleClearSelection = (0, _react.useCallback)(() => {
    const {
      data
    } = controller.value;

    if (data.listSelections && data.listSelections.length) {
      controller.run('onAction', (0, _actions.selectSymbol)(data.listSelections, false));
      controller.run('onAction', (0, _actions.clearListSelections)());
    }
  }, [controller]);
  const handleSelectSymbol = (0, _react.useCallback)((listId, key) => {
    const {
      document
    } = controller.value;
    const currentList = document.getNode(key);
    const siblings = (0, _utils.getSameGroupListItems)(controller.value, currentList);
    handleClearSelection();
    controller.run('onAction', (0, _actions.selectListSelections)(siblings));
    controller.run('onAction', (0, _actions.clearRangeSelection)(currentList));
    controller.run('onAction', (0, _actions.selectSymbol)(siblings, true));
  }, [controller, handleClearSelection]);
  const onClickOutSide = (0, _react.useCallback)(event => {
    const {
      target
    } = event;
    const inCangjie = target.closest('[data-cangjie-content="true"]');
    const {
      listSelections
    } = controller.value.data;
    const cls = target.className;
    const isListSymbol = typeof cls === 'string' && (cls.includes('symbol-align-') || cls.includes('list-symbol'));

    if (inCangjie && !isListSymbol && listSelections?.length > 0) {
      handleClearSelection();
    }
  }, [controller.value.data, handleClearSelection]);
  (0, _react.useEffect)(() => {
    document.addEventListener('click', onClickOutSide, false);
    return () => {
      document.removeEventListener('click', onClickOutSide, false);
    };
  }, [onClickOutSide]);
  const contextValue = (0, _react.useMemo)(() => {
    return {
      onSelectSymbol: handleSelectSymbol,
      clearSelection: handleClearSelection
    };
  }, [handleClearSelection, handleSelectSymbol]);
  return /*#__PURE__*/_createElement(_context.ListContext.Provider, {
    value: contextValue
  }, children);
};

var _default = ListWrapper;
exports.default = _default;
//# sourceMappingURL=listWrapper.js.map