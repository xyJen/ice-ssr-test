"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderUnorderedListButton = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weDesign = require("@ali/we-design");

var _weToolbar = require("@ali/we-toolbar");

var _everComponent = require("@ali/4ever-component");

var _isUnorderedList = _interopRequireDefault(require("../queries/isUnorderedList"));

var _actions = require("../actions");

var _utils = require("../utils");

var _isSelectionInListSymbol = _interopRequireDefault(require("../utils/isSelectionInListSymbol"));

var _role = require("../../utils/role");

var _listStyleMapping = require("../../utils/listStyleMapping");

const _createElement = /*#__PURE__*/_react.default.createElement;
const isMobile = _everCangjie.environment.IS_MOBILE;

const MemoListSet = /*#__PURE__*/_react.default.memo(_weToolbar.ListSet);

var _ref = /*#__PURE__*/_createElement(_weDesign.ToolbarUnorderListNormal, null);

const renderUnorderedListButton = (config = {
  enableSticker: false
}) => {
  const {
    enableSticker
  } = config;

  function UnorderedListButton(props) {
    const {
      controller,
      locale,
      simple,
      ...rest
    } = props;
    const {
      isCollapsedAtEdge
    } = controller.value.selection;
    const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInHr') || // fix: https://aone.alibaba-inc.com/v2/project/1090534/bug/35667506
    controller.query('isSelectionInSubjectHeading');
    const listStyleType = (0, _utils.getListStyleType)(controller);
    const isActive = (0, _isUnorderedList.default)(controller);
    const handleClick = (0, _react.useCallback)(listType => controller.run('onAction', (0, _actions.toggleList)('ulist', isMobile || _listStyleMapping.DEFAULT_BULLET_LIST_ARRAY[listType] === undefined ? _listStyleMapping.DEFAULT_BULLET_LIST_ARRAY[0] : listType)), [controller]);

    if (simple) {
      return /*#__PURE__*/_createElement(_weToolbar.IconButton, (0, _extends2.default)({}, rest, {
        testid: "bi-toolbar-ullist",
        icon: _ref,
        title: locale.unorderedList,
        shortcutText: _utils.ULLIST_HOT_KEY_TIP,
        tooltip: /*#__PURE__*/_createElement(_everComponent.IconButtonShortcut, {
          title: locale.unorderedList,
          shortcut: _utils.ULLIST_HOT_KEY_TIP,
          description: 'Markdown: * + ' + (locale?.space || 'Space')
        }),
        active: isActive,
        disabled: !!isDisabled,
        onClick: handleClick,
        role: _role.ListRole.listUnordered
      }));
    }

    return /*#__PURE__*/_createElement(MemoListSet, (0, _extends2.default)({}, rest, {
      mode: "ul",
      active: isActive,
      shortcutText: _utils.ULLIST_HOT_KEY_TIP,
      testid: "bi-toolbar-ullist",
      disabled: !!isDisabled,
      defaultListStyle: listStyleType,
      onChange: handleClick,
      onClick: handleClick,
      enableSticker: enableSticker,
      role: _role.ListRole.listUnordered
    }));
  }

  UnorderedListButton.needRender = function (controller) {
    return (0, _isSelectionInListSymbol.default)(controller.value);
  };

  return UnorderedListButton;
};

exports.renderUnorderedListButton = renderUnorderedListButton;
//# sourceMappingURL=unorderedListButton.js.map