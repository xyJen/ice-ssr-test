"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tlistInline = exports.olistInline = exports.ulistInline = exports.tlist = exports.olist = exports.ulist = exports.getActiveState = exports.ListTypeEnum = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _actions = require("../actions");

var _isOrderedList = _interopRequireDefault(require("../queries/isOrderedList"));

var _isTaskList = _interopRequireDefault(require("../queries/isTaskList"));

var _isUnorderedList = _interopRequireDefault(require("../queries/isUnorderedList"));

var _role = require("../../utils/role");

const _createElement = /*#__PURE__*/React.createElement;
let ListTypeEnum;
exports.ListTypeEnum = ListTypeEnum;

(function (ListTypeEnum) {
  ListTypeEnum["ulist"] = "ulist";
  ListTypeEnum["olist"] = "olist";
  ListTypeEnum["tlist"] = "tlist";
})(ListTypeEnum || (exports.ListTypeEnum = ListTypeEnum = {}));

const getActiveState = (controller, type) => {
  if (type === ListTypeEnum.olist) return (0, _isOrderedList.default)(controller);
  if (type === ListTypeEnum.tlist) return (0, _isTaskList.default)(controller);
  if (type === ListTypeEnum.ulist) return (0, _isUnorderedList.default)(controller);
  return false;
};

exports.getActiveState = getActiveState;

function createListMenu(Component, listType) {
  return function ListMenu(props) {
    const {
      menuItem,
      controller
    } = props;
    const {
      action,
      title,
      ...rest
    } = menuItem;

    const handleClick = () => {
      // 转换逻辑不再是单向强制转换了，不再使用，避免以后逻辑更改暂时保留注释
      // if (action === 'format') {
      //   return controller.run('onAction', transformList(listType));
      // }
      controller.run('onAction', (0, _actions.toggleList)(listType));
    };

    const isActive = getActiveState(controller, listType);
    const isDisabled = controller.query('isSelectionInSubjectHeading');

    const getRole = () => {
      if (listType === ListTypeEnum.olist) return _role.ListRole.listOrdered;
      if (listType === ListTypeEnum.ulist) return _role.ListRole.listUnordered;
      if (listType === ListTypeEnum.tlist) return _role.ListRole.listTask;
      return undefined;
    };

    return /*#__PURE__*/_createElement(Component, (0, _extends2.default)({
      disabled: isDisabled
    }, rest, {
      onClick: handleClick,
      selected: isActive,
      role: getRole()
    }), title);
  };
}

const ulist = createListMenu(_weDesign.MenuItem, ListTypeEnum.ulist);
exports.ulist = ulist;
const olist = createListMenu(_weDesign.MenuItem, ListTypeEnum.olist);
exports.olist = olist;
const tlist = createListMenu(_weDesign.MenuItem, ListTypeEnum.tlist);
exports.tlist = tlist;
const ulistInline = createListMenu(_weDesign.InlineMenuItem, ListTypeEnum.ulist);
exports.ulistInline = ulistInline;
const olistInline = createListMenu(_weDesign.InlineMenuItem, ListTypeEnum.olist);
exports.olistInline = olistInline;
const tlistInline = createListMenu(_weDesign.InlineMenuItem, ListTypeEnum.tlist);
exports.tlistInline = tlistInline;
//# sourceMappingURL=createListMenu.js.map