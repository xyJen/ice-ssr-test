{"version":3,"sources":["../../../../src/bi/queries/getListChildItems.ts"],"names":["getListChildItems","controller","currrentItem","document","value","key","currentList","data","list","currrentItemNode","getNode","childItems","level","targetLevel","root","getParent","nodesLength","nodes","length","curIndex","Math","max","indexOf","foundSelf","i","targetNode","listConfig","push"],"mappings":";;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO,MAAMA,iBAAiB,GAAG,CAACC,UAAD,EAAyBC,YAAzB,KAA0D;AACzF,QAAM;AAAEC,IAAAA;AAAF,MAAeF,UAAU,CAACG,KAAhC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAUH,YAAhB;AACA,QAAMI,WAAW,GAAGJ,YAAY,CAACK,IAAb,CAAkBC,IAAtC,CAHyF,CAIzF;;AACA,QAAMC,gBAAgB,GAAGN,QAAQ,CAACO,OAAT,CAAiBL,GAAjB,CAAzB;AACA,MAAI,CAACA,GAAD,IAAQ,CAACC,WAAT,IAAwB,CAACG,gBAA7B,EAA+C,OAAO,EAAP;AAE/C,QAAME,UAAU,GAAG,CAACT,YAAD,CAAnB;AACA,QAAM;AAAEU,IAAAA,KAAK,EAAEC;AAAT,MAAyBP,WAA/B,CATyF,CAYzF;;AACA,QAAMQ,IAAI,GAAGX,QAAQ,CAACY,SAAT,CAAmBV,GAAnB,KAA2BF,QAAxC;AACA,QAAMa,WAAW,GAAGF,IAAI,CAACG,KAAL,CAAWC,MAA/B;AACA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYP,IAAI,CAACG,KAAL,CAAWK,OAAX,CAAmBb,gBAAnB,CAAZ,CAAjB;AACA,MAAIc,SAAJ;;AACA,OAAK,IAAIC,CAAC,GAAGL,QAAb,EAAuBK,CAAC,GAAGR,WAA3B,EAAwCQ,CAAC,EAAzC,EAA6C;AAC3C,UAAMC,UAAU,GAAGX,IAAI,CAACG,KAAL,CAAWO,CAAX,CAAnB;AACAD,IAAAA,SAAS,GAAGA,SAAS,IAAIE,UAAU,CAACpB,GAAX,KAAmBH,YAAY,CAACG,GAAzD;AAEA,QAAI,CAACkB,SAAD,IAAcE,UAAU,CAACpB,GAAX,KAAmBH,YAAY,CAACG,GAAlD,EAAuD;AAEvD,UAAMqB,UAAU,GAAGD,UAAU,CAAClB,IAAX,CAAgBC,IAAnC;;AAEA,QAAI,CAACkB,UAAL,EAAiB;AACf;AACA,aAAOf,UAAP;AACD,KAHD,MAGO,IAAIe,UAAU,CAACd,KAAX,GAAmBC,WAAvB,EAAoC;AACzC;AACAF,MAAAA,UAAU,CAACgB,IAAX,CAAgBF,UAAhB;AACD,KAHM,MAGA;AACL;AACA,aAAOd,UAAP;AACD;AACF;;AAED,SAAOA,UAAP;AACD,CAtCM","sourcesContent":["import type { Controller, Block } from '@ali/4ever-cangjie';\n\n/**\n * @description 当光标在 列表项 2 时,它的子项就是 2、2a、2b、2bi、2c\n *\n *   1. 钉钉文档1\n *   2. 钉钉文档2\n *     a. 钉钉文档2a\n *     b. 钉钉文档2b\n *         i. 钉钉文档2bi\n *     c. 钉钉文档2c\n *   3. 钉钉文档3\n *\n * */\n\nexport const getListChildItems = (controller: Controller, currrentItem: Block): Block[] => {\n  const { document } = controller.value;\n  const { key } = currrentItem;\n  const currentList = currrentItem.data.list;\n  // 传入的可能是 renderNode 中的 node，这里 getNode 一次\n  const currrentItemNode = document.getNode(key);\n  if (!key || !currentList || !currrentItemNode) return [];\n\n  const childItems = [currrentItem];\n  const { level: targetLevel } = currentList;\n\n\n  // 排版下为当前 page\n  const root = document.getParent(key) || document;\n  const nodesLength = root.nodes.length;\n  const curIndex = Math.max(0, root.nodes.indexOf(currrentItemNode));\n  let foundSelf;\n  for (let i = curIndex; i < nodesLength; i++) {\n    const targetNode = root.nodes[i] as Block;\n    foundSelf = foundSelf || targetNode.key === currrentItem.key;\n\n    if (!foundSelf || targetNode.key === currrentItem.key) continue;\n\n    const listConfig = targetNode.data.list;\n\n    if (!listConfig) {\n      // 当前节点不是列表项：终止\n      return childItems;\n    } else if (listConfig.level > targetLevel) {\n      // 仅根据 level 判断，允许不同 listId 的列表项被拖拽\n      childItems.push(targetNode as Block);\n    } else {\n      // 只要不是子节点，直接返回\n      return childItems;\n    }\n  }\n\n  return childItems;\n};\n"],"file":"getListChildItems.js"}