"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toggleWrapInList;

var _utils = require("../utils");

var _list2Paragraph = _interopRequireDefault(require("./list2Paragraph"));

var _toggleList = _interopRequireDefault(require("./toggleList"));

var _listStyleMapping = require("../../utils/listStyleMapping");

// 兼容旧列表切换新列表
const getListItemSelected = controller => {
  let result = (0, _utils.getSelectionInListItem)(controller);

  if (result?.listId && !result.listStyleType && !result.isTaskList) {
    const listStyleType = result.isOrdered ? _listStyleMapping.DEFAULT_NUMBER_LIST_ARRAY[0] : _listStyleMapping.DEFAULT_BULLET_LIST_ARRAY[0];
    result = Object.assign({
      listStyleType
    }, result);
  }

  return result;
};

function toggleWrapInList(controller, type, listType, restart) {
  const {
    value
  } = controller;
  const item = getListItemSelected(controller);
  const data = (0, _utils.getListData)({
    type: type,
    listId: item?.listId || (0, _utils.getListId)({
      value,
      listType,
      restart,
      type,
      controller
    }),
    level: 0,
    listStyleType: listType
  });

  if (item) {
    if (type === 'tlist' && item.isTaskList || type !== 'tlist' && item.listStyleType === listType || type === 'ulist' && item.listStyle?.text === listType) {
      // 列表切换为普通段落
      (0, _list2Paragraph.default)(controller);
      return controller;
    } else {
      // 不同类型列表间切换
      (0, _toggleList.default)(controller, data, type);
      return controller;
    }
  } else if (listType) {
    // 普通段落切换有序或无序
    (0, _toggleList.default)(controller, data, type);
    return controller;
  } else {
    // 普通段落切换任务列表
    (0, _toggleList.default)(controller, data, type);
    return controller;
  }
}
//# sourceMappingURL=toggleWrapInList.js.map