"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.increaseItemByNode = increaseItemByNode;
exports.default = increaseItemBySelection;

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _lodash = require("lodash");

var _utils = require("../utils");

var _constants = require("../constants");

var _everPluginIndent = require("@ali/4ever-plugin-indent");

function increaseItemByNode(controller, offset, element) {
  if (!element) return controller;
  const {
    data,
    key
  } = element;
  if (!data.list) return controller;
  const {
    listStyleType,
    level,
    isOrdered,
    isTaskList
  } = data.list; // 最大深度不超过9

  if (offset > 0 && data.list.level >= _constants.MAX_LEVEL - 1) return controller;
  const newLevel = Math.max(level + offset, 0);
  let baseData = data;
  let listStyle = (0, _utils.getListStyle)(isOrdered, newLevel, listStyleType);
  const prevLevelItem = (0, _utils.getPrevLevelItem)(controller.value, element, offset);
  const inheritListStyle = prevLevelItem?.data?.list?.listStyle;

  if (inheritListStyle) {
    listStyle = inheritListStyle;
  }

  if (prevLevelItem?.data && !isTaskList) {
    const prevLevelItemData = prevLevelItem.data;
    const prevLevelItemList = prevLevelItemData.list;
    baseData = { ...(0, _lodash.omit)(data, ['fold']),
      ind: prevLevelItemData.ind,
      list: { ...data.list
      }
    };
    ['listId', 'level', 'hideSymbol', 'isOrdered', 'isTaskList', 'listStyle', 'listStyleType'].forEach(attr => {
      baseData.list[attr] = prevLevelItemList[attr];
    });
  }

  const newData = (0, _utils.mergeListData)(baseData, {
    level: newLevel,
    listStyle
  });
  return controller.command(_everCangjie.Commands.setNodeByKey, key, newData).userData.delete(element, ['fold']);
}

function increaseItemBySelection(editor, offset) {
  const {
    depthItems,
    hasFirstStart
  } = (0, _utils.getDepthItems)(editor);
  depthItems.forEach(element => {
    if (!element) return undefined;
    const {
      data,
      key
    } = element;
    if (!data.list) return undefined;
    const {
      isTaskList
    } = data.list; // 最大深度不超过9

    if (offset > 0 && data.list.level >= _constants.MAX_LEVEL - 1) return editor;
    let newData;

    if (hasFirstStart && !isTaskList) {
      const indLeft = Math.max((data.ind?.left || 0) + offset * _everUtils.INDENT_SIZE, 0);
      newData = {
        data: { ...(0, _lodash.omit)(data, ['fold']),
          ind: { ...data.ind,
            left: Math.min(indLeft, _everPluginIndent.MAX_INDENT_SIZE)
          }
        }
      };
      editor.command(_everCangjie.Commands.setNodeByKey, key, newData).userData.delete(element, ['fold']);
    } else {
      increaseItemByNode(editor, offset, element);
    }

    return undefined;
  });
  return editor;
}
//# sourceMappingURL=increaseItemDepth.js.map