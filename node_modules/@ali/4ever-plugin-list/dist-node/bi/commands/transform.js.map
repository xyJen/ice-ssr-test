{"version":3,"sources":["../../../../src/bi/commands/transform.ts"],"names":["paragraph2List","controller","block","list","listStyle","isTaskList","data","level","Boolean","isOrdered","String","listStyleType","command","Commands","setNodeByKey","key","type","heading2List","Paragraph","TYPE","list2List","code2List","lineArr","text","split","removeNodeByKey","withoutNormalizing","forEach","line","paragraph","create","nodes","Text","insertBlock","transform","listType","blocks","query","Array","isArray","slice","listId","value","restart","calloutPr","blockquote"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA,MAAMA,cAAc,GAAG,CAACC,UAAD,EAAyBC,KAAzB,EAAuCC,IAAvC,KAAgE;AACrF,MAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;;AACA,MAAI,CAACD,IAAI,CAACE,UAAN,IAAoBH,KAAK,EAAEI,IAAP,EAAaH,IAAb,EAAmBI,KAAnB,GAA2B,CAAnD,EAAsD;AACpDH,IAAAA,SAAS,GAAG,yBACVI,OAAO,CAACL,IAAI,CAACM,SAAN,CADG,EAEVP,KAAK,CAACI,IAAN,CAAWH,IAAX,CAAgBI,KAFN,EAGVG,MAAM,CAACP,IAAI,CAACQ,aAAN,CAHI,CAAZ;AAKD;;AACDV,EAAAA,UAAU,CACPW,OADH,CACWC,sBAASC,YADpB,EACkCZ,KAAK,CAACa,GADxC,EAC6C;AACzCC,IAAAA,IAAI,EAAEd,KAAK,CAACc,IAD6B;AAEzCV,IAAAA,IAAI,EAAE;AACJH,MAAAA,IAAI,EAAE,EACJ,GAAGA,IADC;AAEJI,QAAAA,KAAK,EAAEL,KAAK,EAAEI,IAAP,EAAaH,IAAb,EAAmBI,KAAnB,IAA4B,CAF/B;AAGJH,QAAAA;AAHI;AADF;AAFmC,GAD7C;AAWD,CApBD;;AAsBA,MAAMa,YAAY,GAAG,CAAChB,UAAD,EAAyBC,KAAzB,EAAsCC,IAAtC,KAA+D;AAClFF,EAAAA,UAAU,CACPW,OADH,CACWC,sBAASC,YADpB,EACkCZ,KAAK,CAACa,GADxC,EAC6C;AACzCC,IAAAA,IAAI,EAAEE,+BAAUC,IADyB;AAEzCb,IAAAA,IAAI,EAAE;AACJH,MAAAA;AADI;AAFmC,GAD7C;AAQEF,EAAAA,UAAU,CAACW,OAAX,CAAmB,YAAnB,EAAiCM,+BAAUC,IAA3C;AACH,CAVD;;AAYA,MAAMC,SAAS,GAAG,CAACnB,UAAD,EAAyBC,KAAzB,KAAyC;AACzDD,EAAAA,UAAU,CACPW,OADH,CACWC,sBAASC,YADpB,EACkCZ,KAAK,CAACa,GADxC,EAC6C;AACzCC,IAAAA,IAAI,EAAEE,+BAAUC,IADyB;AAEzCb,IAAAA,IAAI,EAAE;AAFmC,GAD7C;AAKD,CAND;;AAQA,MAAMe,SAAS,GAAG,CAACpB,UAAD,EAAyBC,KAAzB,EAAsCC,IAAtC,KAA+D;AAC/E,QAAMmB,OAAO,GAAGpB,KAAK,CAACqB,IAAN,CAAWC,KAAX,CAAiB,IAAjB,CAAhB;AACAvB,EAAAA,UAAU,CACPW,OADH,CACWC,sBAASY,eADpB,EACqCvB,KAAK,CAACa,GAD3C;AAGAd,EAAAA,UAAU,CAACyB,kBAAX,CAA8B,MAAM;AAClCJ,IAAAA,OAAO,CAACK,OAAR,CAAiBC,IAAD,IAAU;AACxB,YAAMC,SAAS,GAAGX,+BAAUY,MAAV,CAAiB;AACjCxB,QAAAA,IAAI,EAAE;AACJH,UAAAA;AADI,SAD2B;AAIjC4B,QAAAA,KAAK,EAAE,CAACC,kBAAKF,MAAL,CAAYF,IAAZ,CAAD;AAJ0B,OAAjB,CAAlB;;AAOA3B,MAAAA,UAAU,CAACW,OAAX,CAAmBC,sBAASoB,WAA5B,EAAyCJ,SAAzC;AACD,KATD;AAUD,GAXD;AAYD,CAjBD;;AAmBe,SAASK,SAAT,CAAmBjC,UAAnB,EAA2Ce,IAA3C,EAAyDmB,QAAzD,EAA4E;AACzF,QAAMC,MAAM,GAAGnC,UAAU,CAACoC,KAAX,CAAiB,mBAAjB,CAAf;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACzB,UAAM9B,IAAI,GAAG,wBAAY;AACvBU,MAAAA,IAAI,EAAEA,IAAI,KAAK,OAAT,GAAmBA,IAAnB,GAA0BA,IAAI,CAACwB,KAAL,CAAW,CAAX,EAAa,CAAb,CADT;AAEvBC,MAAAA,MAAM,EAAE,sBAAU;AAAEC,QAAAA,KAAK,EAAEzC,UAAU,CAACyC,KAApB;AAA2BP,QAAAA,QAA3B;AAAqCQ,QAAAA,OAAO,EAAE,IAA9C;AAAoD3B,QAAAA;AAApD,OAAV,CAFe;AAGvBT,MAAAA,KAAK,EAAE,CAHgB;AAIvBI,MAAAA,aAAa,EAAEwB;AAJQ,KAAZ,CAAb;AAMAlC,IAAAA,UAAU,CAACyB,kBAAX,CAA8B,MAAM;AAClCU,MAAAA,MAAM,CAACT,OAAP,CAAgBzB,KAAD,IAAW;AACxB,YAAIA,KAAK,CAACc,IAAN,KAAe,MAAnB,EAA2B;AACzB,iBAAOK,SAAS,CAACpB,UAAD,EAAaC,KAAb,EAAoBI,IAAI,CAACH,IAAzB,CAAhB;AACD,SAFD,MAEO,IAAID,KAAK,CAACI,IAAN,CAAWsC,SAAf,EAA0B;AAC/B,iBAAO5C,cAAc,CAACC,UAAD,EAAaC,KAAb,EAAoBI,IAAI,CAACH,IAAzB,CAArB;AACD,SAFM,MAEA,IAAID,KAAK,CAACI,IAAN,CAAWH,IAAf,EAAqB;AAC1B,cACGD,KAAK,CAACI,IAAN,CAAWH,IAAX,CAAgBE,UAAhB,IAA8BW,IAAI,KAAK,OAAxC,IACI,CAACd,KAAK,CAACI,IAAN,CAAWH,IAAX,CAAgBE,UAAjB,IAA+BH,KAAK,CAACI,IAAN,CAAWH,IAAX,CAAgBM,SAA/C,IAA4DO,IAAI,KAAK,OADzE,IAEI,CAACd,KAAK,CAACI,IAAN,CAAWH,IAAX,CAAgBE,UAAjB,IAA+B,CAACH,KAAK,CAACI,IAAN,CAAWH,IAAX,CAAgBM,SAAhD,IAA6DO,IAAI,KAAK,OAH5E,EAIE;AACA,mBAAOI,SAAS,CAACnB,UAAD,EAAaC,KAAb,CAAhB;AACD;;AACD,iBAAOF,cAAc,CAACC,UAAD,EAAaC,KAAb,EAAoBI,IAAI,CAACH,IAAzB,CAArB;AACD,SATM,MASA,IAAID,KAAK,CAACI,IAAN,CAAWuC,UAAf,EAA2B;AAChC,iBAAO7C,cAAc,CAACC,UAAD,EAAaC,KAAb,EAAoBI,IAAI,CAACH,IAAzB,CAArB;AACD,SAFM,MAEA,IAAID,KAAK,CAACc,IAAN,KAAe,WAAnB,EAAgC;AACrC,iBAAOC,YAAY,CAAChB,UAAD,EAAaC,KAAb,EAAoBI,IAAI,CAACH,IAAzB,CAAnB;AACD;;AACD,eAAO,yBAAWF,UAAX,EAAuBK,IAAvB,EAA6BU,IAA7B,EAAmC,CAACd,KAAD,CAAnC,CAAP;AACD,OApBD;AAqBD,KAtBD;AAuBD;;AACD,SAAOD,UAAP;AACD","sourcesContent":["import { Controller, Commands, Node, Text, Block } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport toggleList from './toggleList';\nimport { getListId, getListData, getListStyle } from '../utils';\nimport type { ListProperties } from '../../utils/types';\n\nconst paragraph2List = (controller: Controller, block: Block, list: ListProperties) => {\n  let listStyle = list.listStyle;\n  if (!list.isTaskList && block?.data?.list?.level > 0) {\n    listStyle = getListStyle(\n      Boolean(list.isOrdered),\n      block.data.list.level,\n      String(list.listStyleType),\n    );\n  }\n  controller\n    .command(Commands.setNodeByKey, block.key, {\n      type: block.type,\n      data: {\n        list: {\n          ...list,\n          level: block?.data?.list?.level || 0,\n          listStyle,\n        },\n      },\n    });\n};\n\nconst heading2List = (controller: Controller, block: Node, list: ListProperties) => {\n  controller\n    .command(Commands.setNodeByKey, block.key, {\n      type: Paragraph.TYPE,\n      data: {\n        list,\n      },\n    });\n\n    controller.command('setHeading', Paragraph.TYPE);\n};\n\nconst list2List = (controller: Controller, block: Node) => {\n  controller\n    .command(Commands.setNodeByKey, block.key, {\n      type: Paragraph.TYPE,\n      data: {},\n    });\n};\n\nconst code2List = (controller: Controller, block: Node, list: ListProperties) => {\n  const lineArr = block.text.split('\\n');\n  controller\n    .command(Commands.removeNodeByKey, block.key);\n\n  controller.withoutNormalizing(() => {\n    lineArr.forEach((line) => {\n      const paragraph = Paragraph.create({\n        data: {\n          list,\n        },\n        nodes: [Text.create(line)],\n      });\n\n      controller.command(Commands.insertBlock, paragraph);\n    });\n  });\n};\n\nexport default function transform(controller: Controller, type: string, listType?: string) {\n  const blocks = controller.query('getTransformNodes');\n  if (Array.isArray(blocks)) {\n    const data = getListData({\n      type: type === 'tlist' ? type : type.slice(0,2) as 'ul' | 'ol' | 'tlist',\n      listId: getListId({ value: controller.value, listType, restart: true, type }),\n      level: 0,\n      listStyleType: listType,\n    });\n    controller.withoutNormalizing(() => {\n      blocks.forEach((block) => {\n        if (block.type === 'code') {\n          return code2List(controller, block, data.list);\n        } else if (block.data.calloutPr) {\n          return paragraph2List(controller, block, data.list);\n        } else if (block.data.list) {\n          if (\n            (block.data.list.isTaskList && type === 'tlist')\n            || (!block.data.list.isTaskList && block.data.list.isOrdered && type === 'olist')\n            || (!block.data.list.isTaskList && !block.data.list.isOrdered && type === 'ulist')\n          ) {\n            return list2List(controller, block);\n          }\n          return paragraph2List(controller, block, data.list);\n        } else if (block.data.blockquote) {\n          return paragraph2List(controller, block, data.list);\n        } else if (block.type !== 'paragraph') {\n          return heading2List(controller, block, data.list);\n        }\n        return toggleList(controller, data, type, [block]);\n      });\n    });\n  }\n  return controller;\n}\n"],"file":"transform.js"}