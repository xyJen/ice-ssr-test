"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toggleList;

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _everPluginHeading = require("@ali/4ever-plugin-heading");

var _uuid = require("uuid");

var _lodash = require("lodash");

var _utils = require("../utils");

var _getSymbolStyleByKey = require("../../utils/getSymbolStyleByKey");

function createSymbolStyle(controller, element) {
  const {
    value
  } = controller;
  const {
    document
  } = value;
  const firstText = element.getFirstText();
  const lastText = element.getLastText();

  if (!firstText || !lastText) {
    return undefined;
  }

  const activeMarks = document.getActiveMarksAtRange(_everCangjie.Selection.create({
    anchor: _everCangjie.TextPoint.create({
      key: firstText.key,
      offset: 0
    }),
    focus: _everCangjie.TextPoint.create({
      key: lastText.key,
      offset: lastText.text.length
    })
  }));
  return activeMarks.reduce((prev, curMark) => {
    return { ...prev,
      ...(0, _getSymbolStyleByKey.convertMarkToSymbolStyle)(curMark)
    };
  }, {});
}
/**
 *
 * @param controller
 * @param newData
 * @param type 可选，要转的列表类型
 * @param blocks 可选，要转为列表的块节点
 * @returns
 */


function toggleList(controller, newData, type, blocks) {
  const {
    value
  } = controller;
  const {
    document,
    selection
  } = value;
  const {
    listSelections
  } = value.data;
  let currentList = listSelections?.length ? (0, _utils.getListItemsBySelection)(controller) : blocks || (0, _utils.getCurrentItem)(controller);
  let newDataContent = {
    data: newData
  };
  if (!(currentList && currentList[0])) return controller;
  let firstItem = currentList[0];

  if (currentList.length === 1 && type !== 'tlist' && !currentList[0].data?.list?.isTaskList) {
    const target = currentList[0]; // 选中列表符号时，对选中的列表做 toggle

    if (!listSelections?.length && target) {
      currentList = (0, _utils.getSiblingItems)(value, target);
    }

    try {
      firstItem = currentList[0];
    } catch (e) {
      _everLogger.default.error({
        type: 'listError',
        name: 'toggleList',
        value: {
          listSelections,
          target,
          currentList
        }
      });

      return controller;
    }
  }

  const extendListItem = firstItem && (0, _utils.findFirstListItemById)(firstItem, value.document);
  controller.withoutNormalizing(() => {
    currentList?.forEach(element => {
      if (!element) return;
      const {
        data
      } = (0, _utils.mergeListData)(element.data, newData.list);

      if (element.data) {
        if (element.data.list) {
          const elementListConfig = element.data.list;
          data.list.level = elementListConfig?.level || 0; // 若标题代办转为列表，符号大小自动继承

          if (_everPluginHeading.Heading.isHeading(element)) {
            data.list.symbolStyle = { ...elementListConfig.symbolStyle,
              sz: _everUtils.SzUtil.fromHeadingType(element.type)
            };
          }

          if (elementListConfig.symbolStyle) {
            data.list.symbolStyle = elementListConfig.symbolStyle;
          }
        } else {
          const baseLeft = extendListItem?.data?.ind?.left || 0;
          const itemLeft = (element?.data?.ind?.left || 0) + (element?.data?.ind?.firstLine || 0);
          const diffValue = Math.max(itemLeft - baseLeft, 0);
          data.list.level = Math.floor(diffValue / _everUtils.INDENT_SIZE);
          data.list.symbolStyle = createSymbolStyle(controller, element);
          data.ind = { ...(0, _lodash.omit)(data.ind, 'firstLine'),
            left: Math.max(baseLeft, 0)
          };
        }
      }

      const {
        level,
        listStyleType
      } = data.list;
      /* 切换为任务列表 */

      if (type === 'tlist') {
        data.list.extraData = data.list.extraData || {};

        if (!data.list.extraData.docTaskId) {
          data.list.extraData = { ...data.list.extraData,
            docTaskId: (0, _uuid.v4)().slice(0, 8)
          };
        }

        newDataContent = (0, _utils.mergeListData)(data, {
          isTaskList: true,
          hideSymbol: false,
          isChecked: false,
          isOrdered: false
        });
      } else if ((0, _utils.isValidListStyleType)(listStyleType)) {
        data.list.listStyle = (0, _utils.getListStyle)(type === 'olist', level, listStyleType);
      }
      /* 切换为无序列表 */


      if (type === 'ulist') {
        newDataContent = (0, _utils.mergeListData)(data, {
          isTaskList: false,
          isOrdered: false,
          hideSymbol: false
        });
      }
      /* 切换为有序列表 */


      if (type === 'olist') {
        newDataContent = (0, _utils.mergeListData)(data, {
          isTaskList: false,
          isOrdered: true,
          hideSymbol: false
        });
      }

      let blockType = 'paragraph';

      if (_everPluginHeading.Heading.isHeading(element)) {
        blockType = element.type;
      }

      controller.command(_everCangjie.Commands.setNodeByKey, element.key, {
        type: blockType,
        ...newDataContent
      });
    });
  });
  const parent = document;
  const lastList = currentList[currentList.length - 1];
  const lastBlockOfParent = parent.nodes[parent.nodes.length - 1]; // 插入代办时，如果当前段落是父节点的最后一个段落，那么需要在后面插入一个空段路

  if (newDataContent.data.list.isTaskList && lastList?.key === lastBlockOfParent.key) {
    const insertPoint = _everCangjie.EdgePoint.create({
      key: lastList.key,
      edge: _everCangjie.EdgePoint.AFTER
    });

    controller.command(_everCangjie.Commands.insertEmptyBlock, insertPoint).command(_everCangjie.Commands.select, selection);
  }

  return controller;
}
//# sourceMappingURL=toggleList.js.map