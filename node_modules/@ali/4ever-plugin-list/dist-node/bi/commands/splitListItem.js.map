{"version":3,"sources":["../../../../src/bi/commands/splitListItem.ts"],"names":["isFoldGroupNode","getNextViewGroupNode","utils","controller","isShift","value","document","selection","startInline","currentItem","data","list","command","Commands","insertText","LINE_BREAK","ZERO_CHAR","splitOffset","anchor","offset","startKey","key","isSelectInlineVoid","isCollapsed","query","nextViewNode","isFoldNode","userData","get","splitDescendantsByKey","newItem","extraData","isTaskList","docTaskId","slice","assignData","uuid","setNodeByKey","isChecked","hideSymbol","getNode","removeNodeByKey","text","previous","getPreviousBlock","moveToEndOfNode","moveToStartOfNode","parent","getParent","lastNode","nodes","length","insertBlock"],"mappings":"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","sourcesContent":["import { v4 as uuid } from 'uuid';\nimport { Block, Controller, Commands, TextPoint } from '@ali/4ever-cangjie';\nimport { utils } from '@ali/4ever-plugin-list-group';\nimport { omit } from 'lodash-es';\nimport { getCurrentItem, mergeListData } from '../utils';\nimport { uniqueId }  from '@ali/4ever-utils';\nimport { LINE_BREAK, ZERO_CHAR } from '../constants';\n\nconst { isFoldGroupNode, getNextViewGroupNode } = utils;\nexport default (controller: Controller, isShift?: boolean) => {\n  const { value } = controller;\n  const { document, selection, startInline } = value;\n\n  const currentItem = getCurrentItem(controller);\n  if (!currentItem) return controller;\n  if (!currentItem[0] || !currentItem[0].data.list) return controller;\n\n  if (isShift) {\n    // 插入的文本由 \\n(回车) 与 零宽连字 组成, 保证光标可以随之换行\n    return controller.command(Commands.insertText, LINE_BREAK + ZERO_CHAR);\n  }\n\n  const splitOffset = (selection?.anchor as TextPoint).offset;\n  const startKey = selection?.anchor.key;\n  const isSelectInlineVoid = startInline &&\n    selection.isCollapsed && controller.query('isVoid', startInline);\n\n  if (!isSelectInlineVoid) {\n    let nextViewNode;\n    const isFoldNode =\n      isFoldGroupNode(currentItem[0], controller) && controller.userData.get(currentItem[0], 'fold');\n    if (isFoldNode) {\n      nextViewNode = getNextViewGroupNode(currentItem[0], controller);\n    }\n\n    startKey &&\n      controller.command(\n        Commands.splitDescendantsByKey,\n        currentItem[0].key,\n        startKey,\n        splitOffset,\n      );\n\n    /* 将 enter 生成的 item 勾选状态设为 false */\n    let newItem = getCurrentItem(controller)[0];\n    const data = newItem?.data;\n    if (!data?.list) return controller;\n    const extraData: Record<string, string> = {};\n    if (data.list.isTaskList) {\n      extraData.docTaskId = uuid().slice(0, 8);\n    }\n    const assignData: Record<string, string> = {};\n    if (data.uuid) {\n      assignData.uuid = uniqueId();\n    }\n\n    if (newItem) {\n      controller.command(\n        Commands.setNodeByKey,\n        newItem.key,\n        mergeListData(\n          { ...omit(data, 'fold'), ...assignData },\n          { extraData, isChecked: false, hideSymbol: false },\n        ),\n      )\n      /**\n       * 若当前节点是 GroupNode list 节点，做可视节点的切割\n       *  I -> 光标坐在位置，在光标位置按 Enter 键\n       * \n       * 场景一: 列表 aaa 拆为列表 aaa 和 空列表\n       * \n       *   1. aaaI            1. aaa\n       *   |  a. bbb          2. I\n       *   |    i. ccc   ->   |   a. bbb\n       *                      |      i. ccc\n       * \n       * 场景二：列表 aaa 拆为列表 aa 和 列表 a\n       * \n       *   1. aaIa            1. aaa\n       *   |  a. bbb          2. Ia\n       *   |    i. ccc   ->   |   a. bbb\n       *                      |      i. ccc\n       * \n       * 场景三：折叠列表 aaa 拆为列表 aaa 和可视紧邻的空列表\n       * \n       *  >1. aaaI           >1. aaa\n       *   2. bbb        ->   2. I\n       *                      3. bbb\n       * \n       * 场景三：后边无节点的折叠列表 aaa 拆为列表 aaa 和可视紧邻的空列表\n       * \n       *  >1. aaaI       ->  >1. aaa\n       *                      2. I\n       */\n      if (isFoldNode) {\n        newItem = controller.value.document.getNode(newItem.key) as Block;\n        if (!newItem) {\n          return controller;\n        }\n        controller.command(Commands.removeNodeByKey, newItem.key);\n        if (nextViewNode) {\n          if (nextViewNode.text === '') {\n            const previous = document.getPreviousBlock(nextViewNode.key);\n            previous && controller.command(Commands.moveToEndOfNode, previous);\n          } else {\n            controller.command(Commands.moveToStartOfNode, nextViewNode);\n          }\n        } else {\n          const parent = controller.value.document.getParent(currentItem[0].key);\n          const lastNode = parent?.nodes[parent?.nodes.length - 1];\n          lastNode && controller.command(Commands.moveToEndOfNode, lastNode);\n        }\n        controller.command(Commands.insertBlock, newItem).command(Commands.moveToStartOfNode, newItem);\n      }\n    }\n  }\n\n  return controller;\n};\n"],"file":"splitListItem.js"}