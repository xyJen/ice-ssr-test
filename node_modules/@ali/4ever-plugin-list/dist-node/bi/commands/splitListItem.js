"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uuid = require("uuid");

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginListGroup = require("@ali/4ever-plugin-list-group");

var _lodash = require("lodash");

var _utils = require("../utils");

var _everUtils = require("@ali/4ever-utils");

var _constants = require("../constants");

const {
  isFoldGroupNode,
  getNextViewGroupNode
} = _everPluginListGroup.utils;

var _default = (controller, isShift) => {
  const {
    value
  } = controller;
  const {
    document,
    selection,
    startInline
  } = value;
  const currentItem = (0, _utils.getCurrentItem)(controller);
  if (!currentItem) return controller;
  if (!currentItem[0] || !currentItem[0].data.list) return controller;

  if (isShift) {
    // 插入的文本由 \n(回车) 与 零宽连字 组成, 保证光标可以随之换行
    return controller.command(_everCangjie.Commands.insertText, _constants.LINE_BREAK + _constants.ZERO_CHAR);
  }

  const splitOffset = (selection?.anchor).offset;
  const startKey = selection?.anchor.key;
  const isSelectInlineVoid = startInline && selection.isCollapsed && controller.query('isVoid', startInline);

  if (!isSelectInlineVoid) {
    let nextViewNode;
    const isFoldNode = isFoldGroupNode(currentItem[0], controller) && controller.userData.get(currentItem[0], 'fold');

    if (isFoldNode) {
      nextViewNode = getNextViewGroupNode(currentItem[0], controller);
    }

    startKey && controller.command(_everCangjie.Commands.splitDescendantsByKey, currentItem[0].key, startKey, splitOffset);
    /* 将 enter 生成的 item 勾选状态设为 false */

    let newItem = (0, _utils.getCurrentItem)(controller)[0];
    const data = newItem?.data;
    if (!data?.list) return controller;
    const extraData = {};

    if (data.list.isTaskList) {
      extraData.docTaskId = (0, _uuid.v4)().slice(0, 8);
    }

    const assignData = {};

    if (data.uuid) {
      assignData.uuid = (0, _everUtils.uniqueId)();
    }

    if (newItem) {
      controller.command(_everCangjie.Commands.setNodeByKey, newItem.key, (0, _utils.mergeListData)({ ...(0, _lodash.omit)(data, 'fold'),
        ...assignData
      }, {
        extraData,
        isChecked: false,
        hideSymbol: false
      }));
      /**
       * 若当前节点是 GroupNode list 节点，做可视节点的切割
       *  I -> 光标坐在位置，在光标位置按 Enter 键
       * 
       * 场景一: 列表 aaa 拆为列表 aaa 和 空列表
       * 
       *   1. aaaI            1. aaa
       *   |  a. bbb          2. I
       *   |    i. ccc   ->   |   a. bbb
       *                      |      i. ccc
       * 
       * 场景二：列表 aaa 拆为列表 aa 和 列表 a
       * 
       *   1. aaIa            1. aaa
       *   |  a. bbb          2. Ia
       *   |    i. ccc   ->   |   a. bbb
       *                      |      i. ccc
       * 
       * 场景三：折叠列表 aaa 拆为列表 aaa 和可视紧邻的空列表
       * 
       *  >1. aaaI           >1. aaa
       *   2. bbb        ->   2. I
       *                      3. bbb
       * 
       * 场景三：后边无节点的折叠列表 aaa 拆为列表 aaa 和可视紧邻的空列表
       * 
       *  >1. aaaI       ->  >1. aaa
       *                      2. I
       */

      if (isFoldNode) {
        newItem = controller.value.document.getNode(newItem.key);

        if (!newItem) {
          return controller;
        }

        controller.command(_everCangjie.Commands.removeNodeByKey, newItem.key);

        if (nextViewNode) {
          if (nextViewNode.text === '') {
            const previous = document.getPreviousBlock(nextViewNode.key);
            previous && controller.command(_everCangjie.Commands.moveToEndOfNode, previous);
          } else {
            controller.command(_everCangjie.Commands.moveToStartOfNode, nextViewNode);
          }
        } else {
          const parent = controller.value.document.getParent(currentItem[0].key);
          const lastNode = parent?.nodes[parent?.nodes.length - 1];
          lastNode && controller.command(_everCangjie.Commands.moveToEndOfNode, lastNode);
        }

        controller.command(_everCangjie.Commands.insertBlock, newItem).command(_everCangjie.Commands.moveToStartOfNode, newItem);
      }
    }
  }

  return controller;
};

exports.default = _default;
//# sourceMappingURL=splitListItem.js.map