"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transform;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _toggleList = _interopRequireDefault(require("./toggleList"));

var _utils = require("../utils");

const paragraph2List = (controller, block, list) => {
  let listStyle = list.listStyle;

  if (!list.isTaskList && block?.data?.list?.level > 0) {
    listStyle = (0, _utils.getListStyle)(Boolean(list.isOrdered), block.data.list.level, String(list.listStyleType));
  }

  controller.command(_everCangjie.Commands.setNodeByKey, block.key, {
    type: block.type,
    data: {
      list: { ...list,
        level: block?.data?.list?.level || 0,
        listStyle
      }
    }
  });
};

const heading2List = (controller, block, list) => {
  controller.command(_everCangjie.Commands.setNodeByKey, block.key, {
    type: _everPluginParagraph.Paragraph.TYPE,
    data: {
      list
    }
  });
  controller.command('setHeading', _everPluginParagraph.Paragraph.TYPE);
};

const list2List = (controller, block) => {
  controller.command(_everCangjie.Commands.setNodeByKey, block.key, {
    type: _everPluginParagraph.Paragraph.TYPE,
    data: {}
  });
};

const code2List = (controller, block, list) => {
  const lineArr = block.text.split('\n');
  controller.command(_everCangjie.Commands.removeNodeByKey, block.key);
  controller.withoutNormalizing(() => {
    lineArr.forEach(line => {
      const paragraph = _everPluginParagraph.Paragraph.create({
        data: {
          list
        },
        nodes: [_everCangjie.Text.create(line)]
      });

      controller.command(_everCangjie.Commands.insertBlock, paragraph);
    });
  });
};

function transform(controller, type, listType) {
  const blocks = controller.query('getTransformNodes');

  if (Array.isArray(blocks)) {
    const data = (0, _utils.getListData)({
      type: type === 'tlist' ? type : type.slice(0, 2),
      listId: (0, _utils.getListId)({
        value: controller.value,
        listType,
        restart: true,
        type
      }),
      level: 0,
      listStyleType: listType
    });
    controller.withoutNormalizing(() => {
      blocks.forEach(block => {
        if (block.type === 'code') {
          return code2List(controller, block, data.list);
        } else if (block.data.calloutPr) {
          return paragraph2List(controller, block, data.list);
        } else if (block.data.list) {
          if (block.data.list.isTaskList && type === 'tlist' || !block.data.list.isTaskList && block.data.list.isOrdered && type === 'olist' || !block.data.list.isTaskList && !block.data.list.isOrdered && type === 'ulist') {
            return list2List(controller, block);
          }

          return paragraph2List(controller, block, data.list);
        } else if (block.data.blockquote) {
          return paragraph2List(controller, block, data.list);
        } else if (block.type !== 'paragraph') {
          return heading2List(controller, block, data.list);
        }

        return (0, _toggleList.default)(controller, data, type, [block]);
      });
    });
  }

  return controller;
}
//# sourceMappingURL=transform.js.map