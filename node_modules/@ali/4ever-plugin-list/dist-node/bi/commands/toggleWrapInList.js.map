{"version":3,"sources":["../../../../src/bi/commands/toggleWrapInList.ts"],"names":["getListItemSelected","controller","result","listId","listStyleType","isTaskList","isOrdered","DEFAULT_NUMBER_LIST_ARRAY","DEFAULT_BULLET_LIST_ARRAY","Object","assign","toggleWrapInList","type","listType","restart","value","item","data","level","listStyle","text"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAKA;AACA,MAAMA,mBAAmB,GAAIC,UAAD,IAAgB;AAC1C,MAAIC,MAAM,GAAG,mCAAuBD,UAAvB,CAAb;;AACA,MAAIC,MAAM,EAAEC,MAAR,IAAkB,CAACD,MAAM,CAACE,aAA1B,IAA2C,CAACF,MAAM,CAACG,UAAvD,EAAmE;AACjE,UAAMD,aAAa,GAAGF,MAAM,CAACI,SAAP,GAClBC,4CAA0B,CAA1B,CADkB,GAElBC,4CAA0B,CAA1B,CAFJ;AAGAN,IAAAA,MAAM,GAAGO,MAAM,CAACC,MAAP,CAAc;AAAEN,MAAAA;AAAF,KAAd,EAAiCF,MAAjC,CAAT;AACD;;AACD,SAAOA,MAAP;AACD,CATD;;AAWe,SAASS,gBAAT,CAA0BV,UAA1B,EAAkDW,IAAlD,EAAgEC,QAAhE,EAAmFC,OAAnF,EAAsG;AACnH,QAAM;AAAEC,IAAAA;AAAF,MAAYd,UAAlB;AACA,QAAMe,IAAI,GAAGhB,mBAAmB,CAACC,UAAD,CAAhC;AACA,QAAMgB,IAAI,GAAG,wBAAY;AACvBL,IAAAA,IAAI,EAAEA,IADiB;AAEvBT,IAAAA,MAAM,EAAEa,IAAI,EAAEb,MAAN,IAAgB,sBAAU;AAAEY,MAAAA,KAAF;AAASF,MAAAA,QAAT;AAAmBC,MAAAA,OAAnB;AAA4BF,MAAAA,IAA5B;AAAkCX,MAAAA;AAAlC,KAAV,CAFD;AAGvBiB,IAAAA,KAAK,EAAE,CAHgB;AAIvBd,IAAAA,aAAa,EAAES;AAJQ,GAAZ,CAAb;;AAMA,MAAIG,IAAJ,EAAU;AACR,QACGJ,IAAI,KAAK,OAAT,IAAoBI,IAAI,CAACX,UAA1B,IACCO,IAAI,KAAK,OAAT,IAAoBI,IAAI,CAACZ,aAAL,KAAuBS,QAD5C,IAECD,IAAI,KAAK,OAAT,IAAoBI,IAAI,CAACG,SAAL,EAAgBC,IAAhB,KAAyBP,QAHhD,EAIE;AACA;AACA,mCAAeZ,UAAf;AACA,aAAOA,UAAP;AACD,KARD,MAQO;AACL;AACA,+BAAWA,UAAX,EAAuBgB,IAAvB,EAA6BL,IAA7B;AACA,aAAOX,UAAP;AACD;AACF,GAdD,MAcO,IAAIY,QAAJ,EAAc;AACnB;AACA,6BAAWZ,UAAX,EAAuBgB,IAAvB,EAA6BL,IAA7B;AACA,WAAOX,UAAP;AACD,GAJM,MAIA;AACL;AACA,6BAAWA,UAAX,EAAuBgB,IAAvB,EAA6BL,IAA7B;AACA,WAAOX,UAAP;AACD;AACF","sourcesContent":["import { Controller } from '@ali/4ever-cangjie';\nimport { getListData, getListId, getSelectionInListItem } from '../utils';\nimport list2Paragraph from './list2Paragraph';\nimport toggleList from './toggleList';\nimport {\n  DEFAULT_BULLET_LIST_ARRAY,\n  DEFAULT_NUMBER_LIST_ARRAY,\n} from '../../utils/listStyleMapping';\n\n// 兼容旧列表切换新列表\nconst getListItemSelected = (controller) => {\n  let result = getSelectionInListItem(controller);\n  if (result?.listId && !result.listStyleType && !result.isTaskList) {\n    const listStyleType = result.isOrdered\n      ? DEFAULT_NUMBER_LIST_ARRAY[0]\n      : DEFAULT_BULLET_LIST_ARRAY[0];\n    result = Object.assign({ listStyleType }, result);\n  }\n  return result;\n};\n\nexport default function toggleWrapInList(controller: Controller, type: string, listType?: string, restart?: boolean) {\n  const { value } = controller;\n  const item = getListItemSelected(controller);\n  const data = getListData({\n    type: type as 'ul' | 'ol' | 'tlist',\n    listId: item?.listId || getListId({ value, listType, restart, type, controller }),\n    level: 0,\n    listStyleType: listType,\n  });\n  if (item) {\n    if (\n      (type === 'tlist' && item.isTaskList) ||\n      (type !== 'tlist' && item.listStyleType === listType) ||\n      (type === 'ulist' && item.listStyle?.text === listType)\n    ) {\n      // 列表切换为普通段落\n      list2Paragraph(controller);\n      return controller;\n    } else {\n      // 不同类型列表间切换\n      toggleList(controller, data, type);\n      return controller;\n    }\n  } else if (listType) {\n    // 普通段落切换有序或无序\n    toggleList(controller, data, type);\n    return controller;\n  } else {\n    // 普通段落切换任务列表\n    toggleList(controller, data, type);\n    return controller;\n  }\n}\n"],"file":"toggleWrapInList.js"}