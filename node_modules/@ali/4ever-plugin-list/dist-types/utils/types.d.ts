/**
 * 符号类型
 * bullet -> 无序符号
 * decimal -> 数字符号
 * decimalZero -> 双位数字
 * lowerLetter -> 小写英文
 * lowerRoman -> 小写罗马
 * upperLetter -> 大小英文
 * upperRoman -> 大写罗马
 * chineseCountingThousand -> 中文数字
 */
/// <reference types="react" />
export declare type ListStyleFormat = 'bullet' | 'decimal' | 'decimalZero' | 'lowerLetter' | 'lowerRoman' | 'upperLetter' | 'upperRoman' | 'chineseCountingThousand';
/**
 * 列表对齐方式
 */
export declare type ListStyleAlign = 'start' | 'end' | 'center' | 'both' | 'distribute';
export interface ListStyleProperties {
    /**
     * 符号format
     */
    format: string;
    /**
     * 符号标示
     */
    text: string;
    /**
     * 对齐方式
     */
    align: ListStyleAlign;
}
export interface SymbolStyleProperties {
    /**
     * 项目符号字体大小
     */
    sz?: number;
    /**
     * 项目符号背景色
     */
    shd?: string;
    /**
     * 项目字体字体格式
     */
    fonts?: string;
    /**
     * 项目符号字体颜色
     */
    color?: string;
    bold?: boolean;
    strike?: boolean;
    italic?: boolean;
}
export interface ListProperties {
    /**
     * 列表 Id
     */
    listId?: string;
    /**
     * 列表缩进级别
     */
    level?: number;
    /**
     * 是否是有序列表
     */
    isOrdered?: boolean;
    /**
     * 是否是可勾选的待办列表项
     */
    isTaskList?: boolean;
    /**
     * 是否已勾选
     */
    isChecked?: boolean;
    listStyle?: ListStyleProperties;
    listStyleType?: string;
    start?: number;
    symbolStyle?: SymbolStyleProperties;
}
export interface ListDataProperties {
    list: ListProperties;
    /**
       * 列表序号
       */
    start: number;
    /**
       * 列表项在列表中的位置
       */
    step: string;
}
import { Controller, Block } from '@ali/4ever-cangjie';
export interface ListWrapperProps {
    controller: Controller;
    style: React.CSSProperties;
}
export interface TaskListProps {
    allowCustomCheck?: boolean;
}
export interface ListItemProps {
    customStyle?: React.CSSProperties;
    contentStyle?: {
        width: string;
        flex: string;
    };
    className?: string;
    controller: Controller;
    nodeRef?: React.MutableRefObject<HTMLElement | null> | ((instance: HTMLElement | null) => void) | null;
    listItemRef?: React.RefObject<HTMLDivElement> | null;
    children?: React.ReactNode;
    isSelected: boolean;
    isTask?: boolean;
    node: Block;
    onChange?: Function;
    visible?: boolean;
}
