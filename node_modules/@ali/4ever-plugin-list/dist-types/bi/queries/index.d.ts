import isEmpty from './isEmpty';
import isTaskList from './isTaskList';
import isOrderedList from './isOrderedList';
import isUnorderedList from './isUnorderedList';
import hasListSelection from './hasListSelection';
import getListStyleText from './getListStyleText';
import { isSelectionInList } from './isSelectionInList';
import { isSelectionInListSymbol } from './isSelectionInListSymbol';
import { isSelectionInTaskList } from './isSelectionInTaskList';
import { getListCurrentItem } from './getListCurrentItem';
import type { ConvertToPluginQueries } from '@ali/4ever-cangjie';
import { isListSymbolSelected } from './isListSymbolUnSelected';
import { getSymbolStyleByKey } from './getSymbolStyleByKey';
export declare const queries: {
    isEmpty: typeof isEmpty;
    isTaskList: typeof isTaskList;
    isOrderedList: typeof isOrderedList;
    isSelectionInList: typeof isSelectionInList;
    isSelectionInListSymbol: typeof isSelectionInListSymbol;
    isSelectionInTaskList: typeof isSelectionInTaskList;
    isUnorderedList: typeof isUnorderedList;
    hasListSelection: typeof hasListSelection;
    getListStyleText: typeof getListStyleText;
    getListCurrentItem: typeof getListCurrentItem;
    getListChildItems: (controller: import("@ali/4ever-cangjie").Controller, currrentItem: import("@ali/4ever-cangjie").Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>) => import("@ali/4ever-cangjie").Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>[];
    isListSymbolSelected: typeof isListSymbolSelected;
    getListDepthItems: (controller: import("@ali/4ever-cangjie").Controller) => {
        depthItems: (import("@ali/4ever-cangjie").Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren> | null)[];
        hasFirstStart: boolean;
    };
    getSymbolStyleByKey: typeof getSymbolStyleByKey;
};
declare module '@ali/4ever-cangjie' {
    interface PluginQueries extends ConvertToPluginQueries<typeof queries> {
    }
}
