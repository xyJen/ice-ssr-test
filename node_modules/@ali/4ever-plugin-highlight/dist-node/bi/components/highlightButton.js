"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HighlightButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _weToolbar = require("@ali/we-toolbar");

var _actions = require("../actions");

var _constants = require("../constants");

var _everPluginPref = require("@ali/4ever-plugin-pref");

var _role = require("../../utils/role");

const _createElement = /*#__PURE__*/React.createElement;
;

function HighlightButton(props) {
  const {
    controller,
    locale,
    ...rest
  } = props;
  const currentHighlight = controller.query('getHighlight');
  const highlight = typeof currentHighlight === 'string' ? currentHighlight : _constants.DEFAULT_COLOR;
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInLinkCard');
  const handleChange = React.useCallback(color => {
    controller.run('onAction', (0, _actions.setHighlight)(color));
  }, [controller]);
  const getColorPanelMode = React.useCallback(() => controller.query('getColorPanelMode')?.mode, [controller]);
  const handleSelectValueChange = React.useCallback(mode => {
    controller.run('onAction', (0, _everPluginPref.setColorPanelMode)({
      mode
    }));
  }, [controller]);
  return /*#__PURE__*/_createElement(_weToolbar.ColorPicker, (0, _extends2.default)({}, rest, {
    testid: "bi-toolbar-highlight",
    disabled: !!isDisabled,
    color: highlight,
    onColorPicker: handleChange,
    defaultColor: '',
    automaticColor: "",
    clearColor: "",
    btnType: _weToolbar.EColorPickerIcon.backgroundfont,
    shortcutText: locale.buttonTitle,
    role: _role.HighlightRole.highlight,
    showToggleSelect: true,
    getColorPanelMode: getColorPanelMode,
    onSelectValueChange: handleSelectValueChange
  }));
}
//# sourceMappingURL=highlightButton.js.map