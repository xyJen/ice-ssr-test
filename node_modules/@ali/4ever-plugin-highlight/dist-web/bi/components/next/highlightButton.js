import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { EColorPanelMode } from '@ali/we-toolbar';
import { HighlightColorPicker } from '@ali/4ever-component';
import { setHighlight } from "../../actions";
import { DEFAULT_COLOR } from "../../constants";
import { setColorPanelMode } from '@ali/4ever-plugin-pref';
import { HighlightRole } from "../../../utils/role";
export default function HighlightButton(props) {
  var _controller$query;

  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var currentHighlight = controller.query('getHighlight');
  var highlight = typeof currentHighlight === 'string' ? currentHighlight : DEFAULT_COLOR;
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInLinkCard');
  var handleChange = React.useCallback(function (color) {
    controller.run('onAction', setHighlight(color));
  }, [controller]);
  var currentPreset = (_controller$query = controller.query('getColorPanelMode')) == null ? void 0 : _controller$query.mode;
  var handleSelectValueChange = React.useCallback(function (mode) {
    controller.run('onAction', setColorPanelMode({
      mode: mode === 'art' ? EColorPanelMode.art : EColorPanelMode.normal
    }));
  }, [controller]);
  return /*#__PURE__*/_createElement(HighlightColorPicker, _extends({
    testid: "bi-toolbar-highlight",
    disabled: !!isDisabled,
    color: highlight,
    onColorChange: handleChange,
    title: locale.buttonTitle,
    tooltip: locale.buttonTitle,
    role: HighlightRole.highlight,
    currentPreset: currentPreset,
    onCurrentPresetChange: handleSelectValueChange
  }, rest));
}
//# sourceMappingURL=highlightButton.js.map