{"version":3,"sources":["../../../../../src/bi/components/next/colorButton.tsx"],"names":["React","setColor","DEFAULT_COLOR","setColorPanelMode","FontColorPicker","EColorPanelMode","ColorButton","props","controller","locale","rest","color","query","isCollapsedAtEdge","value","selection","handleChange","useCallback","colorValue","run","isDisabled","currentPreset","mode","handleSelectValueChange","art","normal","buttonTitle"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAC5B;AACA,SAASC,QAAT;AACA,SAASC,aAAT;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,eAAT,QAAgC,iBAAhC;AAOA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA8C;AAAA;;AAAA,MACnDC,UADmD,GACnBD,KADmB,CACnDC,UADmD;AAAA,MACvCC,MADuC,GACnBF,KADmB,CACvCE,MADuC;AAAA,MAC5BC,IAD4B,iCACnBH,KADmB;;AAE3D,MAAMI,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiB,UAAjB,CAAd;AAF2D,MAGnDC,iBAHmD,GAG7BL,UAAU,CAACM,KAAX,CAAiBC,SAHY,CAGnDF,iBAHmD;AAI3D,MAAMG,YAAY,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,UAACC,UAAD;AAAA,WAAwBV,UAAU,CAACW,GAAX,CAAe,UAAf,EAA2BlB,QAAQ,CAACiB,UAAD,CAAnC,CAAxB;AAAA,GAAlB,EAA4F,CAACV,UAAD,CAA5F,CAArB;AAEA,MAAMY,UAAU,GAAGP,iBAAiB,IAC/BL,UAAU,CAACI,KAAX,CAAiB,oBAAjB,CADc,IAEdJ,UAAU,CAACI,KAAX,CAAiB,iBAAjB,CAFc,IAGdJ,UAAU,CAACI,KAAX,CAAiB,uBAAjB,CAHL;AAKA,MAAMS,aAAa,wBAAGb,UAAU,CAACI,KAAX,CAAiB,mBAAjB,CAAH,qBAAG,kBAAuCU,IAA7D;AAGA,MAAMC,uBAAuB,GAAGvB,KAAK,CAACiB,WAAN,CAAkB,UAACK,IAAD,EAA4B;AAC5Ed,IAAAA,UAAU,CAACW,GAAX,CAAe,UAAf,EAA2BhB,iBAAiB,CAAC;AAAEmB,MAAAA,IAAI,EAAGA,IAAI,KAAK,KAAT,GAAiBjB,eAAe,CAACmB,GAAjC,GAAuCnB,eAAe,CAACoB;AAAhE,KAAD,CAA5C;AACD,GAF+B,EAE7B,CAACjB,UAAD,CAF6B,CAAhC;AAIA,sBACE,eAAC,eAAD;AACE,IAAA,MAAM,EAAC,kBADT;AAEE,IAAA,QAAQ,EAAE,CAAC,CAACY,UAFd;AAGE,IAAA,KAAK,EAAET,KAHT;AAIE,IAAA,aAAa,EAAEK,YAJjB;AAKE,IAAA,YAAY,EAAEd,aALhB;AAME,IAAA,SAAS,EAAEA,aANb;AAOE,IAAA,KAAK,EAAEO,MAAM,CAACiB,WAPhB;AAQE,IAAA,OAAO,EAAEjB,MAAM,CAACiB,WARlB;AASE,IAAA,aAAa,EAAEL,aATjB;AAUE,IAAA,qBAAqB,EAAEE;AAVzB,KAWMb,IAXN,EADF;AAeD","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\n;\nimport { setColor } from '../../actions';\nimport { DEFAULT_COLOR } from '../../constants';\nimport { setColorPanelMode } from '@ali/4ever-plugin-pref';\nimport { FontColorPicker } from '@ali/4ever-component';\nimport { EColorPanelMode } from '@ali/we-toolbar';\n\nexport interface ColorButtonProps {\n  controller: Controller;\n  locale: Record<string, string>;\n}\n\nexport default function ColorButton(props: ColorButtonProps) {\n  const { controller, locale, ...rest } = props;\n  const color = controller.query('getColor');\n  const { isCollapsedAtEdge } = controller.value.selection;\n  const handleChange = React.useCallback((colorValue: string) => controller.run('onAction', setColor(colorValue)), [controller]);\n\n  const isDisabled = isCollapsedAtEdge\n    || controller.query('isSelectionInImage')\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInLinkCard');\n\n  const currentPreset = controller.query('getColorPanelMode')?.mode;\n\n\n  const handleSelectValueChange = React.useCallback((mode: 'normal' | 'art') => {\n    controller.run('onAction', setColorPanelMode({ mode: (mode === 'art' ? EColorPanelMode.art : EColorPanelMode.normal) }));\n  }, [controller]);\n\n  return (\n    <FontColorPicker\n      testid=\"bi-toolbar-color\"\n      disabled={!!isDisabled}\n      color={color}\n      onColorChange={handleChange}\n      defaultColor={DEFAULT_COLOR}\n      autoColor={DEFAULT_COLOR}\n      title={locale.buttonTitle}\n      tooltip={locale.buttonTitle}\n      currentPreset={currentPreset}\n      onCurrentPresetChange={handleSelectValueChange}\n      {...rest}\n    />\n  );\n}\n"],"file":"colorButton.js"}