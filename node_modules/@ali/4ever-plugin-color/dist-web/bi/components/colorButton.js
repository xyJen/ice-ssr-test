import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ColorPicker, EColorPickerIcon } from '@ali/we-toolbar';
import { setColor } from "../actions";
import { DEFAULT_COLOR } from "../constants";
import { setColorPanelMode } from '@ali/4ever-plugin-pref';
export default function ColorButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var color = controller.query('getColor');
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var handleChange = React.useCallback(function (colorValue) {
    return controller.run('onAction', setColor(colorValue));
  }, [controller]);
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInLinkCard');
  var getColorPanelMode = React.useCallback(function () {
    var _controller$query;

    return (_controller$query = controller.query('getColorPanelMode')) == null ? void 0 : _controller$query.mode;
  }, [controller]);
  var handleSelectValueChange = React.useCallback(function (mode) {
    controller.run('onAction', setColorPanelMode({
      mode: mode
    }));
  }, [controller]);
  return /*#__PURE__*/_createElement(ColorPicker, _extends({}, rest, {
    testid: "bi-toolbar-color",
    btnType: EColorPickerIcon.font,
    disabled: !!isDisabled,
    color: color,
    onColorPicker: handleChange,
    defaultColor: DEFAULT_COLOR,
    automaticColor: "#404040",
    shortcutText: locale.buttonTitle,
    showToggleSelect: true,
    showGradient: true,
    getColorPanelMode: getColorPanelMode,
    onSelectValueChange: handleSelectValueChange
  }));
}
//# sourceMappingURL=colorButton.js.map