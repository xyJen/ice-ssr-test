import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useState, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Commands } from '@ali/4ever-cangjie';
import { SplitButton } from '@ali/we-toolbar';
import { ColorPanel } from '@ali/we-design';
import { setColor } from "../../actions";
import { useSelectionBarContext } from '@ali/4ever-component';
import { DEFAULT_COLOR, DEFAUL_HIGHLIGHT } from "../../constants";
import FontIcon from "./FontIcon";
import { ColorRole } from "../../../utils/role";

var ColorAndHighlightButton = function ColorAndHighlightButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var _useState = useState(false),
      active = _useState[0],
      setActive = _useState[1];

  var _useSelectionBarConte = useSelectionBarContext(),
      context = _useSelectionBarConte[0],
      actions = _useSelectionBarConte[1];

  var _context$lastColor = context.lastColor,
      lastColor = _context$lastColor === void 0 ? DEFAULT_COLOR : _context$lastColor,
      _context$lastHighligh = context.lastHighlight,
      lastHighlight = _context$lastHighligh === void 0 ? DEFAUL_HIGHLIGHT : _context$lastHighligh;
  var currentColor = controller.query('getColor');
  var currentHighlight = controller.query('getHighlight');
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInLinkCard');
  var handleColorAndHighlightChange = useCallback(function (_ref) {
    var _ref$color = _ref.color,
        color = _ref$color === void 0 ? '' : _ref$color,
        _ref$highlight = _ref.highlight,
        highlight = _ref$highlight === void 0 ? '' : _ref$highlight;
    controller.run('onAction', setColor(color));
    controller.dispatch('setHighlight', highlight);
    actions.updateLastColor(color);
    actions.updateLastHighlight(highlight);
  }, [actions, controller]);
  var handleButtonClick = useCallback(function () {
    return handleColorAndHighlightChange({
      color: lastColor,
      highlight: lastHighlight
    });
  }, [handleColorAndHighlightChange, lastColor, lastHighlight]);
  var handleColorClick = useCallback(function (color) {
    controller.run('onAction', setColor(color));
    actions.updateLastColor(color);
    currentHighlight = controller.query('getHighlight');
    actions.updateLastHighlight(currentHighlight);
  }, [controller, actions]);
  var handleBgColorClick = useCallback(function (color) {
    controller.dispatch('setHighlight', color);
    actions.updateLastHighlight(color);
    currentColor = controller.query('getColor');
    actions.updateLastColor(currentColor);
  }, [controller, actions]);

  var handleCustomVisibleChange = function handleCustomVisibleChange(visible) {
    var isBlurred = controller.value.isBlurred;

    if (isBlurred && !visible) {
      // fix: focus 到自定义色板输入框然后关闭色板后行内工具栏立即消失
      controller.run('onCangjieFocus');

      if (context.canHide) {
        // fix: focus 到自定义色板输入框然后点击其他区域时行内工具栏不消失
        controller.command(Commands.moveToFocus);
      }
    }
  }; // fix: focus 到自定义色板输入框后行内工具栏消失


  var handleMouseEnter = React.useCallback(function () {
    return actions.updateCanHide(false);
  }, [actions]);
  var handleMouseLeave = React.useCallback(function () {
    return actions.updateCanHide(true);
  }, [actions]);
  return /*#__PURE__*/_createElement(SplitButton, _extends({}, rest, {
    testid: "bi-toolbar-combined-color",
    disabled: isDisabled,
    icon: /*#__PURE__*/_createElement(FontIcon, {
      color: lastColor,
      backgroundColor: lastHighlight
    }),
    active: active,
    onActiveChange: setActive,
    tooltip: locale == null ? void 0 : locale.colorAndHighlightTooltip,
    overlay: /*#__PURE__*/_createElement(ColorPanel, {
      color: currentColor,
      onColorClick: handleColorClick,
      backgroundColor: currentHighlight,
      onBackgroundColorClick: handleBgColorClick,
      enableResetButton: true,
      isFontBgColor: true,
      shouldShowPreview: true,
      onCustomVisibleChange: handleCustomVisibleChange,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave
    }),
    onClickLeft: handleButtonClick,
    role: ColorRole.colorCombined
  }));
};

ColorAndHighlightButton.displayName = 'ColorAndHighlightButton';
export default ColorAndHighlightButton;
//# sourceMappingURL=index.js.map