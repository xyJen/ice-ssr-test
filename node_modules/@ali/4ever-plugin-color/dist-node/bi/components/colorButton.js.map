{"version":3,"sources":["../../../../src/bi/components/colorButton.tsx"],"names":["ColorButton","props","controller","locale","rest","color","query","isCollapsedAtEdge","value","selection","handleChange","React","useCallback","colorValue","run","isDisabled","getColorPanelMode","mode","handleSelectValueChange","EColorPickerIcon","font","DEFAULT_COLOR","buttonTitle"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;uBAJ4B,a;;AAWb,SAASA,WAAT,CAAqBC,KAArB,EAA8C;AAC3D,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsB,OAAGC;AAAzB,MAAkCH,KAAxC;AACA,QAAMI,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiB,UAAjB,CAAd;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAwBL,UAAU,CAACM,KAAX,CAAiBC,SAA/C;AACA,QAAMC,YAAY,GAAGC,KAAK,CAACC,WAAN,CAAmBC,UAAD,IAAwBX,UAAU,CAACY,GAAX,CAAe,UAAf,EAA2B,uBAASD,UAAT,CAA3B,CAA1C,EAA4F,CAACX,UAAD,CAA5F,CAArB;AACA,QAAMa,UAAU,GAAGR,iBAAiB,IAC/BL,UAAU,CAACI,KAAX,CAAiB,oBAAjB,CADc,IAEdJ,UAAU,CAACI,KAAX,CAAiB,iBAAjB,CAFc,IAGdJ,UAAU,CAACI,KAAX,CAAiB,uBAAjB,CAHL;AAKA,QAAMU,iBAAiB,GACrBL,KAAK,CAACC,WAAN,CAAkB,MAAMV,UAAU,CAACI,KAAX,CAAiB,mBAAjB,GAAuCW,IAA/D,EAAqE,CAACf,UAAD,CAArE,CADF;AAGA,QAAMgB,uBAAuB,GAAGP,KAAK,CAACC,WAAN,CAAmBK,IAAD,IAA2B;AAC3Ef,IAAAA,UAAU,CAACY,GAAX,CAAe,UAAf,EAA2B,uCAAkB;AAAEG,MAAAA;AAAF,KAAlB,CAA3B;AACD,GAF+B,EAE7B,CAACf,UAAD,CAF6B,CAAhC;AAIA,sBACE,eAAC,sBAAD,6BACME,IADN;AAEE,IAAA,MAAM,EAAC,kBAFT;AAGE,IAAA,OAAO,EAAEe,4BAAiBC,IAH5B;AAIE,IAAA,QAAQ,EAAE,CAAC,CAACL,UAJd;AAKE,IAAA,KAAK,EAAEV,KALT;AAME,IAAA,aAAa,EAAEK,YANjB;AAOE,IAAA,YAAY,EAAEW,wBAPhB;AAQE,IAAA,cAAc,EAAC,SARjB;AASE,IAAA,YAAY,EAAElB,MAAM,CAACmB,WATvB;AAUE,IAAA,gBAAgB,MAVlB;AAWE,IAAA,YAAY,MAXd;AAYE,IAAA,iBAAiB,EAAEN,iBAZrB;AAaE,IAAA,mBAAmB,EAAEE;AAbvB,KADF;AAiBD","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { ColorPicker, EColorPanelMode, EColorPickerIcon } from '@ali/we-toolbar';\nimport { setColor } from '../actions';\nimport { DEFAULT_COLOR } from '../constants';\nimport { setColorPanelMode } from '@ali/4ever-plugin-pref';\n\nexport interface ColorButtonProps {\n  controller: Controller;\n  locale: Record<string, string>;\n}\n\nexport default function ColorButton(props: ColorButtonProps) {\n  const { controller, locale, ...rest } = props;\n  const color = controller.query('getColor');\n  const { isCollapsedAtEdge } = controller.value.selection;\n  const handleChange = React.useCallback((colorValue: string) => controller.run('onAction', setColor(colorValue)), [controller]);\n  const isDisabled = isCollapsedAtEdge\n    || controller.query('isSelectionInImage')\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInLinkCard');\n\n  const getColorPanelMode =\n    React.useCallback(() => controller.query('getColorPanelMode')?.mode, [controller]);\n\n  const handleSelectValueChange = React.useCallback((mode: EColorPanelMode) => {\n    controller.run('onAction', setColorPanelMode({ mode }));\n  }, [controller]);\n\n  return (\n    <ColorPicker\n      {...rest}\n      testid=\"bi-toolbar-color\"\n      btnType={EColorPickerIcon.font}\n      disabled={!!isDisabled}\n      color={color}\n      onColorPicker={handleChange}\n      defaultColor={DEFAULT_COLOR}\n      automaticColor=\"#404040\"\n      shortcutText={locale.buttonTitle}\n      showToggleSelect\n      showGradient\n      getColorPanelMode={getColorPanelMode}\n      onSelectValueChange={handleSelectValueChange}\n    />\n  );\n}\n"],"file":"colorButton.js"}