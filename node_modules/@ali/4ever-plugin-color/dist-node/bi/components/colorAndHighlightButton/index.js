"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weToolbar = require("@ali/we-toolbar");

var _weDesign = require("@ali/we-design");

var _actions = require("../../actions");

var _everComponent = require("@ali/4ever-component");

var _constants = require("../../constants");

var _FontIcon = _interopRequireDefault(require("./FontIcon"));

var _role = require("../../../utils/role");

const _createElement = /*#__PURE__*/_react.default.createElement;

const ColorAndHighlightButton = props => {
  const {
    controller,
    locale,
    ...rest
  } = props;
  const [active, setActive] = (0, _react.useState)(false);
  const [context, actions] = (0, _everComponent.useSelectionBarContext)();
  const {
    lastColor = _constants.DEFAULT_COLOR,
    lastHighlight = _constants.DEFAUL_HIGHLIGHT
  } = context;
  let currentColor = controller.query('getColor');
  let currentHighlight = controller.query('getHighlight');
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInLinkCard');
  const handleColorAndHighlightChange = (0, _react.useCallback)(({
    color = '',
    highlight = ''
  }) => {
    controller.run('onAction', (0, _actions.setColor)(color));
    controller.dispatch('setHighlight', highlight);
    actions.updateLastColor(color);
    actions.updateLastHighlight(highlight);
  }, [actions, controller]);
  const handleButtonClick = (0, _react.useCallback)(() => handleColorAndHighlightChange({
    color: lastColor,
    highlight: lastHighlight
  }), [handleColorAndHighlightChange, lastColor, lastHighlight]);
  const handleColorClick = (0, _react.useCallback)(color => {
    controller.run('onAction', (0, _actions.setColor)(color));
    actions.updateLastColor(color);
    currentHighlight = controller.query('getHighlight');
    actions.updateLastHighlight(currentHighlight);
  }, [controller, actions]);
  const handleBgColorClick = (0, _react.useCallback)(color => {
    controller.dispatch('setHighlight', color);
    actions.updateLastHighlight(color);
    currentColor = controller.query('getColor');
    actions.updateLastColor(currentColor);
  }, [controller, actions]);

  const handleCustomVisibleChange = visible => {
    const {
      isBlurred
    } = controller.value;

    if (isBlurred && !visible) {
      // fix: focus 到自定义色板输入框然后关闭色板后行内工具栏立即消失
      controller.run('onCangjieFocus');

      if (context.canHide) {
        // fix: focus 到自定义色板输入框然后点击其他区域时行内工具栏不消失
        controller.command(_everCangjie.Commands.moveToFocus);
      }
    }
  }; // fix: focus 到自定义色板输入框后行内工具栏消失


  const handleMouseEnter = _react.default.useCallback(() => actions.updateCanHide(false), [actions]);

  const handleMouseLeave = _react.default.useCallback(() => actions.updateCanHide(true), [actions]);

  return /*#__PURE__*/_createElement(_weToolbar.SplitButton, (0, _extends2.default)({}, rest, {
    testid: "bi-toolbar-combined-color",
    disabled: isDisabled,
    icon: /*#__PURE__*/_createElement(_FontIcon.default, {
      color: lastColor,
      backgroundColor: lastHighlight
    }),
    active: active,
    onActiveChange: setActive,
    tooltip: locale?.colorAndHighlightTooltip,
    overlay: /*#__PURE__*/_createElement(_weDesign.ColorPanel, {
      color: currentColor,
      onColorClick: handleColorClick,
      backgroundColor: currentHighlight,
      onBackgroundColorClick: handleBgColorClick,
      enableResetButton: true,
      isFontBgColor: true,
      shouldShowPreview: true,
      onCustomVisibleChange: handleCustomVisibleChange,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave
    }),
    onClickLeft: handleButtonClick,
    role: _role.ColorRole.colorCombined
  }));
};

ColorAndHighlightButton.displayName = 'ColorAndHighlightButton';
var _default = ColorAndHighlightButton;
exports.default = _default;
//# sourceMappingURL=index.js.map