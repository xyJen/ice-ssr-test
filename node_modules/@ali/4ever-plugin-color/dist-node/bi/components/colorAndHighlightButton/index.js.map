{"version":3,"sources":["../../../../../src/bi/components/colorAndHighlightButton/index.tsx"],"names":["ColorAndHighlightButton","props","controller","locale","rest","active","setActive","context","actions","lastColor","DEFAULT_COLOR","lastHighlight","DEFAUL_HIGHLIGHT","currentColor","query","currentHighlight","isCollapsedAtEdge","value","selection","isDisabled","handleColorAndHighlightChange","color","highlight","run","dispatch","updateLastColor","updateLastHighlight","handleButtonClick","handleColorClick","handleBgColorClick","handleCustomVisibleChange","visible","isBlurred","canHide","command","Commands","moveToFocus","handleMouseEnter","React","useCallback","updateCanHide","handleMouseLeave","colorAndHighlightTooltip","ColorRole","colorCombined","displayName"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Controller, Commands } from '@ali/4ever-cangjie';\nimport { SplitButton } from '@ali/we-toolbar';\nimport { ColorPanel } from '@ali/we-design';\n\nimport { setColor } from '../../actions';\nimport { ColorAndHighlightChangeHandler } from './panel';\nimport { useSelectionBarContext } from '@ali/4ever-component';\nimport { DEFAULT_COLOR, DEFAUL_HIGHLIGHT } from '../../constants';\nimport { ColorToolbarLocale } from '../../../utils/types';\nimport FontIcon from './FontIcon';\nimport { ColorRole } from '../../../utils/role';\nexport interface ColorAndHighlightButtonProps {\n  controller: Controller;\n  locale?: ColorToolbarLocale;\n}\n\nconst ColorAndHighlightButton: React.FC<ColorAndHighlightButtonProps> = (\n  props,\n) => {\n  const { controller, locale, ...rest } = props;\n\n  const [active, setActive] = useState(false);\n\n  const [context, actions] = useSelectionBarContext();\n  const {\n    lastColor = DEFAULT_COLOR,\n    lastHighlight = DEFAUL_HIGHLIGHT,\n  } = context;\n\n  let currentColor = controller.query('getColor') as string;\n  let currentHighlight = (controller.query('getHighlight') as string);\n\n  const { isCollapsedAtEdge } = controller.value.selection;\n  const isDisabled =\n    isCollapsedAtEdge ||\n    controller.query('isSelectionInImage') ||\n    controller.query('isSelectionInHr') ||\n    controller.query('isSelectionInLinkCard');\n\n  const handleColorAndHighlightChange: ColorAndHighlightChangeHandler = useCallback(\n    ({ color = '', highlight = '' }) => {\n      controller.run('onAction', setColor(color));\n      controller.dispatch('setHighlight', highlight);\n      actions.updateLastColor(color);\n      actions.updateLastHighlight(highlight);\n    },\n    [actions, controller],\n  );\n\n  const handleButtonClick = useCallback(\n    () =>\n      handleColorAndHighlightChange({\n        color: lastColor,\n        highlight: lastHighlight,\n      }),\n    [handleColorAndHighlightChange, lastColor, lastHighlight],\n  );\n\n  const handleColorClick = useCallback((color: string) => {\n    controller.run('onAction', setColor(color));\n\n    actions.updateLastColor(color);\n\n    currentHighlight = controller.query('getHighlight');\n    actions.updateLastHighlight(currentHighlight);\n  }, [controller, actions]);\n\n  const handleBgColorClick = useCallback((color: string) => {\n    controller.dispatch('setHighlight', color);\n\n    actions.updateLastHighlight(color);\n\n    currentColor = controller.query('getColor') as string;\n    actions.updateLastColor(currentColor);\n  }, [controller, actions]);\n\n  const handleCustomVisibleChange = (visible: boolean) => {\n    const { isBlurred } = controller.value;\n    if (isBlurred && !visible) {\n      // fix: focus 到自定义色板输入框然后关闭色板后行内工具栏立即消失\n      controller.run('onCangjieFocus');\n      if (context.canHide) {\n        // fix: focus 到自定义色板输入框然后点击其他区域时行内工具栏不消失\n        controller.command(Commands.moveToFocus);\n      }\n    }\n  };\n\n  // fix: focus 到自定义色板输入框后行内工具栏消失\n  const handleMouseEnter = React.useCallback(\n    () => actions.updateCanHide(false),\n    [actions],\n  );\n\n  const handleMouseLeave = React.useCallback(\n    () => actions.updateCanHide(true),\n    [actions],\n  );\n\n  return (\n    <SplitButton\n      {...rest}\n      testid=\"bi-toolbar-combined-color\"\n      disabled={isDisabled}\n      icon={<FontIcon color={lastColor} backgroundColor={lastHighlight} />}\n      active={active}\n      onActiveChange={setActive}\n      tooltip={locale?.colorAndHighlightTooltip}\n      overlay={(\n        <ColorPanel\n          color={currentColor}\n          onColorClick={handleColorClick}\n          backgroundColor={currentHighlight}\n          onBackgroundColorClick={handleBgColorClick}\n          enableResetButton\n          isFontBgColor\n          shouldShowPreview\n          onCustomVisibleChange={handleCustomVisibleChange}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        />\n      )}\n      onClickLeft={handleButtonClick}\n      role={ColorRole.colorCombined}\n    />\n  );\n};\n\nColorAndHighlightButton.displayName = 'ColorAndHighlightButton';\n\nexport default ColorAndHighlightButton;\n"],"file":"index.js"}