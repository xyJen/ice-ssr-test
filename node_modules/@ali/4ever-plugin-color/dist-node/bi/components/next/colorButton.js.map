{"version":3,"sources":["../../../../../src/bi/components/next/colorButton.tsx"],"names":["ColorButton","props","controller","locale","rest","color","query","isCollapsedAtEdge","value","selection","handleChange","React","useCallback","colorValue","run","isDisabled","currentPreset","mode","handleSelectValueChange","EColorPanelMode","art","normal","DEFAULT_COLOR","buttonTitle"],"mappings":";;;;;;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;AACA;;AACA;;uBAN4B,a;AAC5B;;AAYe,SAASA,WAAT,CAAqBC,KAArB,EAA8C;AAC3D,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsB,OAAGC;AAAzB,MAAkCH,KAAxC;AACA,QAAMI,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiB,UAAjB,CAAd;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAwBL,UAAU,CAACM,KAAX,CAAiBC,SAA/C;AACA,QAAMC,YAAY,GAAGC,KAAK,CAACC,WAAN,CAAmBC,UAAD,IAAwBX,UAAU,CAACY,GAAX,CAAe,UAAf,EAA2B,uBAASD,UAAT,CAA3B,CAA1C,EAA4F,CAACX,UAAD,CAA5F,CAArB;AAEA,QAAMa,UAAU,GAAGR,iBAAiB,IAC/BL,UAAU,CAACI,KAAX,CAAiB,oBAAjB,CADc,IAEdJ,UAAU,CAACI,KAAX,CAAiB,iBAAjB,CAFc,IAGdJ,UAAU,CAACI,KAAX,CAAiB,uBAAjB,CAHL;AAKA,QAAMU,aAAa,GAAGd,UAAU,CAACI,KAAX,CAAiB,mBAAjB,GAAuCW,IAA7D;AAGA,QAAMC,uBAAuB,GAAGP,KAAK,CAACC,WAAN,CAAmBK,IAAD,IAA4B;AAC5Ef,IAAAA,UAAU,CAACY,GAAX,CAAe,UAAf,EAA2B,uCAAkB;AAAEG,MAAAA,IAAI,EAAGA,IAAI,KAAK,KAAT,GAAiBE,2BAAgBC,GAAjC,GAAuCD,2BAAgBE;AAAhE,KAAlB,CAA3B;AACD,GAF+B,EAE7B,CAACnB,UAAD,CAF6B,CAAhC;AAIA,sBACE,eAAC,8BAAD;AACE,IAAA,MAAM,EAAC,kBADT;AAEE,IAAA,QAAQ,EAAE,CAAC,CAACa,UAFd;AAGE,IAAA,KAAK,EAAEV,KAHT;AAIE,IAAA,aAAa,EAAEK,YAJjB;AAKE,IAAA,YAAY,EAAEY,wBALhB;AAME,IAAA,SAAS,EAAEA,wBANb;AAOE,IAAA,KAAK,EAAEnB,MAAM,CAACoB,WAPhB;AAQE,IAAA,OAAO,EAAEpB,MAAM,CAACoB,WARlB;AASE,IAAA,aAAa,EAAEP,aATjB;AAUE,IAAA,qBAAqB,EAAEE;AAVzB,KAWMd,IAXN,EADF;AAeD","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\n;\nimport { setColor } from '../../actions';\nimport { DEFAULT_COLOR } from '../../constants';\nimport { setColorPanelMode } from '@ali/4ever-plugin-pref';\nimport { FontColorPicker } from '@ali/4ever-component';\nimport { EColorPanelMode } from '@ali/we-toolbar';\n\nexport interface ColorButtonProps {\n  controller: Controller;\n  locale: Record<string, string>;\n}\n\nexport default function ColorButton(props: ColorButtonProps) {\n  const { controller, locale, ...rest } = props;\n  const color = controller.query('getColor');\n  const { isCollapsedAtEdge } = controller.value.selection;\n  const handleChange = React.useCallback((colorValue: string) => controller.run('onAction', setColor(colorValue)), [controller]);\n\n  const isDisabled = isCollapsedAtEdge\n    || controller.query('isSelectionInImage')\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInLinkCard');\n\n  const currentPreset = controller.query('getColorPanelMode')?.mode;\n\n\n  const handleSelectValueChange = React.useCallback((mode: 'normal' | 'art') => {\n    controller.run('onAction', setColorPanelMode({ mode: (mode === 'art' ? EColorPanelMode.art : EColorPanelMode.normal) }));\n  }, [controller]);\n\n  return (\n    <FontColorPicker\n      testid=\"bi-toolbar-color\"\n      disabled={!!isDisabled}\n      color={color}\n      onColorChange={handleChange}\n      defaultColor={DEFAULT_COLOR}\n      autoColor={DEFAULT_COLOR}\n      title={locale.buttonTitle}\n      tooltip={locale.buttonTitle}\n      currentPreset={currentPreset}\n      onCurrentPresetChange={handleSelectValueChange}\n      {...rest}\n    />\n  );\n}\n"],"file":"colorButton.js"}