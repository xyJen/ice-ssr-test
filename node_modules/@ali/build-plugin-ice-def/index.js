const parseArgs = require('yargs-parser');
const collect = require('./collect');

module.exports = async (api) => {
  const { context, onGetWebpackConfig, log } = api;
  const { command, rootDir, pkg } = context;

  // fusion 组件数据收集
  collect({ command, log, rootDir, pkg });

  if (command !== 'build') {
    return;
  }
  if (process.env.BUILD_ENV !== 'cloud') {
    // 非云构建环境：本地构建可能也需要模拟下环境变量？
    return;
  }

  process.env.NODE_ENV = 'production';
  log.info('DEF Plugin: ', 'BUILD_GIT_BRANCH', process.env.BUILD_GIT_BRANCH, 'DEF BUILD_ARGV_STR', process.env.BUILD_ARGV_STR);

  // 兼容本地模拟运行
  process.env.BUILD_GIT_BRANCH = process.env.BUILD_GIT_BRANCH || '';
  process.env.BUILD_ARGV_STR = process.env.BUILD_ARGV_STR || '';

  const parts = process.env.BUILD_GIT_BRANCH.split('/');
  let assetsVersion = parts[parts.length - 1];

  const buildArgv = parseArgs(process.env.BUILD_ARGV_STR) || {};

  const publishType = buildArgv['def_publish_type'];
  let cdnEnv = 'production';
  if (publishType) {
    // 有 publishType 则是 DEF
    // 目前支持 DEF webapp 和 assets 两种构建方式：
    //   1. webapp 发布：日常和线上发布都会构建，可以判断环境 https://work.def.alibaba-inc.com/doc/webapp
    //   2. assets 发布：
    //      - 默认：线上发布不构建，无法区分日常线上，只能统一当做线上，如果想区分参考文档：https://yuque.antfin-inc.com/icntu1/kbc5lo/twwlao#3fe75eea
    //      - 手动开启线上构建（https://work.def.alibaba-inc.com/doc/onlinebuild）：可区分日常线上，但会有一定隐患
    cdnEnv = buildArgv['def_publish_env'] === 'daily' ? 'daily' : 'production';

    if (publishType === 'assets_o') {
      // 覆盖式发布
      log.info('DEF Plugin: ', '当前应用开启覆盖式发布！');
      assetsVersion = '';
    }
  } else {
    // 非 DEF：目前只考虑 Aone，Aone 线上构建分支名都是 publish/x.y.z
    cdnEnv = /^publish\//.test(process.env.BUILD_GIT_BRANCH) ? 'production' : 'daily';
  }

  const cdnHost = cdnEnv === 'daily' ? 'https://dev.g.alicdn.com' : 'https://g.alicdn.com';
  const publicPathCdn = [
    cdnHost, // alicdn 地址
    process.env.BUILD_GIT_GROUP,
    process.env.BUILD_GIT_PROJECT,
    assetsVersion,
  ].join('/') + (assetsVersion === '' ? '' : '/');

  // 定义几个统一的环境变量
  const customEnvs = {
    'GIT_GROUP': process.env.BUILD_GIT_GROUP,
    'GIT_PROJECT': process.env.BUILD_GIT_PROJECT,
    'CDN_VERSION': assetsVersion,
    'CDN_PATH': publicPathCdn,
    'CDN_ENV': cdnEnv,
  };

  log.info('DEF Plugin: ', '自定义环境变量', customEnvs);
  Object.keys(customEnvs).forEach((envKey) => {
    process.env[envKey] = customEnvs[envKey];
  });

  onGetWebpackConfig((config) => {
    // 更改 publicPath
    config.output.publicPath(process.env.CDN_PATH);

    // 注入变量
    config
      .plugin('DefinePlugin')
      .tap(([options]) => {
        Object.keys(customEnvs).forEach((envKey) => {
          const varName = `process.env.${envKey}`;
          const varValue = process.env[envKey];
          log.info('使用 DefinePlugin 注入变量：', varName, varValue);
          options[varName] = JSON.stringify(varValue);
        });
        return [options];
      });
  });
};
