"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weIcon = require("@ali/we-icon");

var _weToolbar = require("@ali/we-toolbar");

var _everComponent = require("@ali/4ever-component");

var _styled = require("./styled");

const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref = /*#__PURE__*/_createElement(_weIcon.AddallNormal, null);

var _ref2 = /*#__PURE__*/_createElement(_weIcon.ArrowLeftBackNormal, null);

const Button = props => {
  const {
    onInsert,
    isOpen,
    nodeKey,
    controller,
    direction,
    isSelected,
    title,
    editTooltip,
    editable = true
  } = props;
  const moreToolbarWrapperRef = (0, _react.useRef)(null);
  const enableBorderHighlight = !isOpen && controller.query('enableBorderHighlight');
  const [isHover, hoverHandlers] = (0, _everComponent.useHover)(enableBorderHighlight);
  const getContainer = (0, _react.useCallback)(() => {
    return moreToolbarWrapperRef.current || window.document.body;
  }, []);
  const tooltip = (0, _react.useMemo)(() => {
    if (!editable) return '';
    return editTooltip || 'Configure template';
  }, [editable, editTooltip]);
  const handleInsert = (0, _react.useCallback)(() => {
    onInsert?.();
  }, [onInsert]);
  const handleToggleOpen = (0, _react.useCallback)(e => {
    e?.preventDefault();
    e?.stopPropagation(); // 未处理排版问题，暂不允许在排版模式下编辑

    if (e && !editable) return;
    controller.dispatch('toggleTemplateButton', {
      key: nodeKey
    });

    if (isOpen) {
      // 当前是打开状态，防止内容区域有选区，收起后选区异常，这里统一收到按钮后面
      const edge = _everCangjie.EdgePoint.create({
        key: nodeKey,
        edge: 'after'
      });

      controller.command(_everCangjie.Commands.select, _everCangjie.Selection.create({
        anchor: edge,
        focus: edge
      }));
    }
  }, [nodeKey, controller, editable, isOpen]);
  const handleDelete = (0, _react.useCallback)(() => {
    controller.dispatch('deleteTemplateButton', {
      key: nodeKey
    });
  }, [controller, nodeKey]);
  const handleCopy = (0, _react.useCallback)(() => {
    controller.dispatch('copyTemplateButton', {
      key: nodeKey
    });
  }, [controller, nodeKey]);
  const handleCut = (0, _react.useCallback)(() => {
    controller.dispatch('cutTemplateButton', {
      key: nodeKey
    });
  }, [controller, nodeKey]);
  (0, _react.useEffect)(() => {
    // 由非排版模式下切换到排版模式
    // 如果当前是打开状态，则收起
    if (isOpen && !editable) {
      handleToggleOpen();
    }
  }, [editable, handleToggleOpen, isOpen]);
  const moreMenuConfig = (0, _react.useMemo)(() => {
    return {
      options: [[{
        name: 'delete',
        onClick: handleDelete,
        testId: 'templateButton-delete'
      }, {
        name: 'copy',
        onClick: handleCopy,
        testId: 'templateButton-copy'
      }, {
        name: 'cut',
        onClick: handleCut,
        testId: 'templateButton-cut'
      }]]
    };
  }, [handleCopy, handleCut, handleDelete]);
  const hasHoverToolbar = controller.query('hasHoverToolbar', 'templateButton');
  return /*#__PURE__*/_createElement(_styled.Wrapper, (0, _extends2.default)({
    isOpen: isOpen,
    onClick: handleInsert,
    isSelected: isSelected,
    "data-testid": "templateButton-button",
    className: "templateButton-wrapper" // className 便于其他插件覆盖样式（激光笔添加高亮效果）
    ,
    "data-hover-box": "noBorderBox",
    isHover: isHover,
    enableBorderHighlight: enableBorderHighlight
  }, hoverHandlers), /*#__PURE__*/_createElement(_styled.Left, {
    direction: direction,
    isOpen: isOpen
  }, _ref, /*#__PURE__*/_createElement(_styled.Title, null, /*#__PURE__*/_createElement("span", {
    className: "templateButton-title",
    style: {
      paddingRight: direction ? 0 : '8px'
    }
  }, title)), direction ? _ref2 : null), !hasHoverToolbar && /*#__PURE__*/_createElement(_styled.Right, {
    ref: moreToolbarWrapperRef
  }, /*#__PURE__*/_createElement(_weToolbar.InlineToolbar, {
    getContainer: getContainer,
    moreMenuConfig: moreMenuConfig,
    width: 400
  }, /*#__PURE__*/_createElement(_weToolbar.IconButton, {
    tooltip: tooltip,
    onClick: handleToggleOpen,
    icon: /*#__PURE__*/_createElement(_weIcon.EditNormal, {
      style: {
        cursor: editable ? 'default' : 'not-allowed'
      },
      "data-testid": "templateButton-edit"
    })
  }))));
};

var _default = Button;
exports.default = _default;
//# sourceMappingURL=button.js.map