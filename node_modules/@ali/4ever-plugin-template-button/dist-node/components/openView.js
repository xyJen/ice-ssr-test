"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _everComponent = require("@ali/4ever-component");

var _button = _interopRequireDefault(require("./button"));

var _styled = require("./styled");

const _createElement = /*#__PURE__*/_react.default.createElement;

const OpenView = props => {
  const {
    direction,
    isOpen,
    isOnce,
    title,
    child,
    controller,
    nodeKey,
    placeholder,
    editable,
    config = {},
    isSelected
  } = props;
  const {
    locale,
    enable
  } = config;
  const inputRef = (0, _react.useRef)(null);
  const compositingRef = (0, _react.useRef)(false);
  const [compositing, setCompositing] = (0, _react.useState)(false);
  const [innerTitle, setInnerTitle] = (0, _react.useState)(() => title);
  const innerTitleRef = (0, _react.useRef)('');
  innerTitleRef.current = innerTitle;
  compositingRef.current = compositing;
  const enableBorderHighlight = controller.query('enableBorderHighlight');
  const [isHover, hoverHandlers] = (0, _everComponent.useHover)(enableBorderHighlight);
  (0, _react.useEffect)(() => {
    if (!compositing) {
      setInnerTitle(title);
    }
  }, [compositing, title]);
  (0, _react.useEffect)(() => {
    // 每次展开，自动 focus 到 input
    inputRef.current?.focus();
  }, []);
  const handleInputChange = (0, _react.useCallback)(e => {
    const {
      value
    } = e.target;
    setInnerTitle(value); // 处理普通输入

    if (!compositingRef.current) {
      controller.dispatch('setTemplateButton', {
        key: nodeKey,
        data: {
          title: value
        }
      });
    }
  }, [controller, nodeKey]);
  const handleCompositionStart = (0, _react.useCallback)(() => {
    setCompositing(true);
  }, []);
  const handleCompositionEnd = (0, _react.useCallback)(() => {
    setCompositing(false); // 输入法输入

    controller.dispatch('setTemplateButton', {
      key: nodeKey,
      data: {
        title: innerTitleRef.current
      }
    });
  }, [controller, nodeKey]);
  const handleDirectionChange = (0, _react.useCallback)(value => {
    controller.dispatch('setTemplateButton', {
      key: nodeKey,
      data: {
        direction: value
      }
    });
  }, [controller, nodeKey]);
  const handleIsOnceChange = (0, _react.useCallback)(value => {
    controller.dispatch('setTemplateButton', {
      key: nodeKey,
      data: {
        isOnce: value
      }
    });
  }, [controller, nodeKey]);
  const handleOnSave = (0, _react.useCallback)(() => {
    controller.dispatch('toggleTemplateButton', {
      key: nodeKey
    });
  }, [controller, nodeKey]);
  return /*#__PURE__*/_createElement(_styled.ViewWrapper, (0, _extends2.default)({
    "data-testid": "templateButton-openView",
    isHover: isHover,
    isActive: isSelected
  }, hoverHandlers, {
    "data-hover-box": "borderBox"
  }), /*#__PURE__*/_createElement(_button.default, {
    editTooltip: locale?.editTooltip,
    direction: enable?.direction ?? true ? direction : null,
    isOpen: isOpen,
    title: title || placeholder,
    controller: controller,
    nodeKey: nodeKey,
    editable: editable
  }), /*#__PURE__*/_createElement(_styled.OpenViewContainer, null, /*#__PURE__*/_createElement(_styled.OpenViewContent, null, /*#__PURE__*/_createElement(_styled.OpenViewContentGroup, null, /*#__PURE__*/_createElement("h4", null, locale?.nameTitle || 'Template Name'), /*#__PURE__*/_createElement(_styled.TemplateInput, {
    ref: inputRef,
    value: innerTitle,
    placeholder: placeholder,
    onChange: handleInputChange,
    onCompositionStart: handleCompositionStart,
    onCompositionEnd: handleCompositionEnd,
    "data-cangjie-not-editable": true,
    type: "text",
    maxLength: 100
  })), /*#__PURE__*/_createElement(_styled.OpenViewContentGroup, null, /*#__PURE__*/_createElement("h4", null, locale?.contentTile || 'Template Content'), /*#__PURE__*/_createElement(_styled.TemplateInputArea, {
    "data-container-block": true
  }, child())), enable?.direction === false ? null : /*#__PURE__*/_createElement(_styled.OpenViewContentGroup, null, /*#__PURE__*/_createElement("h4", null, locale?.direction || 'Insert To'), /*#__PURE__*/_createElement(_weDesign.RadioGroup, {
    value: direction,
    onChange: handleDirectionChange
  }, /*#__PURE__*/_createElement(_weDesign.Radio, {
    value: "bottom"
  }, locale?.insertBottom || 'After'), /*#__PURE__*/_createElement(_weDesign.Radio, {
    value: "top"
  }, locale?.insertTop || 'Before'))), enable?.isOnce === false ? null : /*#__PURE__*/_createElement(_styled.OpenViewContentGroup, null, /*#__PURE__*/_createElement("h4", null, locale?.insertOnce || 'Disposable'), /*#__PURE__*/_createElement(_weDesign.Switch, {
    checked: isOnce,
    onChange: handleIsOnceChange
  }))), /*#__PURE__*/_createElement(_styled.OpenViewFooter, null, /*#__PURE__*/_createElement(_weDesign.Button, {
    type: "primary",
    onClick: handleOnSave,
    "data-testid": "templateButton-save"
  }, locale?.save || 'Save'))));
};

var _default = OpenView;
exports.default = _default;
//# sourceMappingURL=openView.js.map