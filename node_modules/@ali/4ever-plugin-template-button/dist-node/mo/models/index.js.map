{"version":3,"sources":["../../../../src/mo/models/index.ts"],"names":["TemplateButton","Container","isTemplateButton","node","isContainer","SUB_TYPE","isOpen","controller","key","injections","value","find","inj","data","metadata","undefined","isVoid","createTemplateButton","listId","Math","random","toString","slice","createContainer","subType","isOnce","direction","title","nodes","Block","create","type","list","level","isChecked","isOrdered","isTaskList","Text","ELEMENT_TYPE"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAYO,MAAMA,cAAN,SAA6BC,8BAA7B,CAA2D;AAGhE,SAAOC,gBAAP,CAAwBC,IAAxB,EAA2D;AACzD,WAAOF,+BAAUG,WAAV,CAAsBD,IAAtB,EAA4BH,cAAc,CAACK,QAA3C,CAAP;AACD;;AAED,SAAOC,MAAP,CAAcC,UAAd,EAAsCC,GAAtC,EAA4D;AAC1D,UAAM;AAAEC,MAAAA;AAAF,QAAiBF,UAAU,CAACG,KAAlC;AACA,WAAOD,UAAU,CAACE,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAUC,QAAV,EAAoBR,MAApB,KAA+BS,SAA/B,IAA4CH,GAAG,CAACJ,GAAJ,KAAYA,GAA/E,GAAqFK,IAArF,EAA2FC,QAA3F,EAAqGR,MAArG,IAA+G,KAAtH;AACD;;AAED,SAAOU,MAAP,CAAcT,UAAd,EAAsCJ,IAAtC,EAAkD;AAChD,WAAOH,cAAc,CAACE,gBAAf,CAAgCC,IAAhC,KAAyC,CAACH,cAAc,CAACM,MAAf,CAAsBC,UAAtB,EAAkCJ,IAAI,CAACK,GAAvC,CAAjD;AACD;;AAED,SAAOS,oBAAP,CACEH,QAAiE,GAAG,EADtE,EAEEI,MAAM,GAAGC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAFX,EAGE;AACA,WAAOrB,+BAAUsB,eAAV,CAA0B;AAC/BV,MAAAA,IAAI,EAAE;AACJW,QAAAA,OAAO,EAAExB,cAAc,CAACK,QADpB;AAEJS,QAAAA,QAAQ,EAAE;AACRW,UAAAA,MAAM,EAAE,KADA;AAERC,UAAAA,SAAS,EAAE,QAFH;AAGRC,UAAAA,KAAK,EAAE,EAHC;AAIR,aAAGb;AAJK;AAFN,OADyB;AAU/Bc,MAAAA,KAAK,EAAE,CACLC,mBAAMC,MAAN,CAAa;AACXC,QAAAA,IAAI,EAAE,WADK;AAEXlB,QAAAA,IAAI,EAAE;AACJmB,UAAAA,IAAI,EAAE;AACJC,YAAAA,KAAK,EAAE,CADH;AAEJC,YAAAA,SAAS,EAAE,KAFP;AAGJC,YAAAA,SAAS,EAAE,KAHP;AAIJC,YAAAA,UAAU,EAAE,IAJR;AAKJlB,YAAAA;AALI;AADF,SAFK;AAWXU,QAAAA,KAAK,EAAE,CAACS,kBAAKP,MAAL,EAAD;AAXI,OAAb,CADK;AAVwB,KAA1B,CAAP;AA0BD;;AA9C+D;;;AAArD9B,c,CACJK,Q,GAAWiC,kB","sourcesContent":["import { Block, Controller, Text, Node } from '@ali/4ever-cangjie';\nimport { Container, ContainerData } from '@ali/4ever-plugin-container';\nimport { ELEMENT_TYPE } from '../../utils/meta';\n\nexport interface TemplateButtonData extends ContainerData<'templateButton'> {\n  readonly metadata: {\n    direction: 'top' | 'bottom';\n    isOnce: boolean;\n    isOpen?: boolean;\n    title: string;\n  };\n}\n\n\nexport class TemplateButton extends Container<TemplateButtonData> {\n  static SUB_TYPE = ELEMENT_TYPE;\n\n  static isTemplateButton(node: any): node is TemplateButton {\n    return Container.isContainer(node, TemplateButton.SUB_TYPE);\n  }\n\n  static isOpen(controller: Controller, key: string): boolean {\n    const { injections } = controller.value;\n    return injections.find(inj => inj.data?.metadata?.isOpen !== undefined && inj.key === key)?.data?.metadata?.isOpen ?? false;\n  }\n\n  static isVoid(controller: Controller, node: Node) {\n    return TemplateButton.isTemplateButton(node) && !TemplateButton.isOpen(controller, node.key);\n  }\n\n  static createTemplateButton(\n    metadata: Partial<Omit<TemplateButtonData['metadata'], 'isOpen'>> = {},\n    listId = Math.random().toString(36).slice(2),\n  ) {\n    return Container.createContainer({\n      data: {\n        subType: TemplateButton.SUB_TYPE,\n        metadata: {\n          isOnce: false,\n          direction: 'bottom',\n          title: '',\n          ...metadata,\n        },\n      },\n      nodes: [\n        Block.create({\n          type: 'paragraph',\n          data: {\n            list: {\n              level: 0,\n              isChecked: false,\n              isOrdered: false,\n              isTaskList: true,\n              listId,\n            },\n          },\n          nodes: [Text.create()],\n        }),\n      ],\n    });\n  }\n}\n"],"file":"index.js"}