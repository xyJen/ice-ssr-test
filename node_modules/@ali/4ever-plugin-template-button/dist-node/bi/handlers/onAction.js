"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOnAction = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _utils = require("../utils");

var _setNodeData = require("../commands/setNodeData");

var _toggleOpen = require("../commands/toggleOpen");

var _variable = require("../variable");

var _actions = require("../actions");

const createOnAction = config => {
  const replacer = (0, _utils.buildReplacer)({ ...(0, _variable.createVariables)(config?.locale),
    ...(config?.variables || {})
  });
  return (action, controller, next) => {
    if (_actions.isActions.isInsertTemplateButton(action)) {
      return controller.command("insertTemplateButton", action.payload);
    } else if (_actions.isActions.isToggleTemplateButton(action)) {
      return (0, _toggleOpen.toggleOpen)(controller, action.payload?.key);
    } else if (_actions.isActions.isSetTemplateButton(action)) {
      return (0, _setNodeData.setNodeData)(controller, action.payload);
    } else if (_actions.isActions.isInsertTemplateButtonFragment(action)) {
      const {
        key,
        data: {
          fragment,
          direction,
          isOnce
        }
      } = action.payload;

      const edge = _everCangjie.EdgePoint.create({
        key,
        edge: direction === "top" ? _everCangjie.EdgePoint.BEFORE : _everCangjie.EdgePoint.AFTER
      });

      const doc = (0, _utils.replaceTemplate)(fragment, replacer);
      const beforeInsert = config?.beforeInsert;

      if (beforeInsert && beforeInsert) {
        beforeInsert(doc, replacer).then(newFragment => {
          controller.command(_everCangjie.Commands.insertEmptyBlock, edge).command(_everCangjie.Commands.insertFragment, newFragment);

          if (isOnce) {
            controller.command(_everCangjie.Commands.removeNodeByKey, key);
          }
        });
      } else {
        controller.command(_everCangjie.Commands.insertEmptyBlock, edge).command(_everCangjie.Commands.insertFragment, doc);

        if (isOnce) {
          controller.command(_everCangjie.Commands.removeNodeByKey, key);
        }
      }

      return controller;
    } else if (_actions.isActions.isDeleteTemplateButton(action)) {
      controller.command(_everCangjie.Commands.removeNodeByKey, action.payload?.key);
      return controller;
    } else if (_actions.isActions.isCopyTemplateButton(action)) {
      const node = controller.value.document.getNode(action.payload?.key);
      controller.command(_everCangjie.Commands.moveAnchorToStartOfNode, node).command(_everCangjie.Commands.moveFocusToEndOfNode, node);
      controller.run("onAction", {
        type: _everCangjie.ContextMenu.ACTION_COPY
      });
      return controller;
    } else if (_actions.isActions.isCutTemplateButton(action)) {
      const node = controller.value.document.getNode(action.payload?.key);
      controller.command(_everCangjie.Commands.moveAnchorToStartOfNode, node).command(_everCangjie.Commands.moveFocusToEndOfNode, node);
      controller.run("onAction", {
        type: _everCangjie.ContextMenu.ACTION_CUT
      });
      return controller;
    }

    return next();
  };
};

exports.createOnAction = createOnAction;
//# sourceMappingURL=onAction.js.map