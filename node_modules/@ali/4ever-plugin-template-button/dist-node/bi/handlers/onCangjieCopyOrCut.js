"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onCangjieCopyOrCut = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _isSelectionInTemplateButton = _interopRequireDefault(require("../queries/isSelectionInTemplateButton"));

var _mo = require("../../mo");

const {
  MIME_TYPES
} = _everCangjie.constants;

const onCangjieCopyOrCut = (event, controller, next) => {
  if (!event.clipboardData) {
    return next();
  } // 增加类似表格特性的 plugin 时，依然需要在这里感知
  // 特性： copy 部分选区时需要携带容器


  const tableSelection = controller.query('tableSelection'); // 如果是表格选区，则不处理

  if (tableSelection) {
    return next();
  }

  const templateSelection = (0, _isSelectionInTemplateButton.default)(controller); // 选区不全在模板按钮内，走默认行为

  if (templateSelection !== 'all') {
    return next();
  }

  const {
    document,
    selection
  } = controller.value; // 找到最近的 templateButton

  const button = controller.value.document.getClosest(selection.anchor.key, _mo.TemplateButton.isTemplateButton); // @ts-ignore

  let fragment = document.getFragmentAtRange(selection, controller);

  const isOpen = _mo.TemplateButton.isOpen(controller, button.key); // Open 的情况下，不需要 copy 整个模板按钮，取出其 nodes


  if (isOpen) {
    // @ts-ignore
    fragment = _everCangjie.Document.create({
      nodes: fragment.nodes[0].nodes
    });
  }

  event.clipboardData.setData(MIME_TYPES.FRAGMENT, _everCangjie.transferUtils.encodeFragment(fragment));
  return next();
};

exports.onCangjieCopyOrCut = onCangjieCopyOrCut;
//# sourceMappingURL=onCangjieCopyOrCut.js.map