{"version":3,"sources":["../../../../src/bi/handlers/onKeyDown.ts"],"names":["onKeyDown","event","controller","next","isDelete","isDeleteHotKey","value","document","selection","isInTemplateButton","templateButton","getClosest","focus","key","TemplateButton","isTemplateButton","nodes","isOpen","command","Commands","replaceNodeByKey","Block","create","moveForward","length","anchor","block","getClosestBlock","isVoid","query","preventDefault","hotkeys","isDeleteLineForward","isDeleteLineBackward","isDeleteForward","isDeleteBackward","isDeleteWordForward","isDeleteWordBackward"],"mappings":"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","sourcesContent":["import {\n  Controller,\n  ZhiPlugin,\n  Commands,\n  hotkeys,\n  Block,\n} from '@ali/4ever-cangjie';\nimport { TemplateButton } from '../../mo';;\nimport { isEmptyNode, isList, isInlineCode } from '../utils';\nimport isSelectionInTemplateButton from '../queries/isSelectionInTemplateButton';\n\n\nexport const onKeyDown: ZhiPlugin['onKeyDown'] = (\n  event: React.KeyboardEvent,\n  controller: Controller,\n  next,\n) => {\n  const isDelete = isDeleteHotKey(event);\n  // perf 非关注的事件，趁早返回，减少计算\n  if (!isDelete) {\n    return next();\n  }\n\n  const { value } = controller;\n  const { document, selection } = value;\n  const isInTemplateButton = isSelectionInTemplateButton(controller);\n  // 开始、结束节点均不在模板按钮内，则交由其他插件处理\n  if (!isInTemplateButton) {\n    return next();\n  }\n  // 开始、结束节点只有一个在模板按钮内，则不要有响应\n  if (isInTemplateButton !== 'all') {\n    return controller;\n  }\n\n  const templateButton = document.getClosest(\n    selection.focus.key,\n    TemplateButton.isTemplateButton,\n  ) as Block;\n\n  const { nodes } = templateButton;\n\n  // 删除 -> 必需得保留一个空段落\n  if (isDelete) {\n    const isOpen = TemplateButton.isOpen(controller, templateButton.key);\n    // 关闭状态下，删除时会先选中，再继续退格需要直接删除\n    if (!isOpen) {\n      return controller\n        .command(Commands.replaceNodeByKey, templateButton.key, Block.create('paragraph'))\n        .command(Commands.moveForward, 1);\n    }\n\n    // 只处理单个子元素即将被删除的情况\n    if (nodes.length !== 1) {\n      return next();\n    }\n\n    const { anchor } = selection;\n    const block = document.getClosestBlock(anchor.key);\n    // 异常情况兜底\n    if (!block) {\n      return controller;\n    }\n\n    const isVoid = controller.query('isVoid', block);\n    // 非空 & 非 void block，不处理\n    if (!isEmptyNode(controller, block) && !isVoid) {\n      return next();\n    }\n\n    // 空 list 与 void block 被删除时，需要插入一个空段落\n    if (isList(block) || isVoid || isInlineCode(controller)) {\n      controller\n        .command(\n          Commands.replaceNodeByKey,\n          block.key,\n          Block.create('paragraph'),\n        )\n        .command(Commands.moveForward, 2);\n      return controller;\n    }\n    event.preventDefault();\n    return controller;\n  }\n  return next();\n}\n\n/**\n * 需要拦截删除事件\n * @param event\n * @returns\n */\nconst isDeleteHotKey = (event: React.KeyboardEvent) => {\n  return (\n    hotkeys.isDeleteLineForward(event) ||\n    hotkeys.isDeleteLineBackward(event) ||\n    hotkeys.isDeleteForward(event) ||\n    hotkeys.isDeleteBackward(event) ||\n    hotkeys.isDeleteWordForward(event) ||\n    hotkeys.isDeleteWordBackward(event)\n  );\n};\n"],"file":"onKeyDown.js"}