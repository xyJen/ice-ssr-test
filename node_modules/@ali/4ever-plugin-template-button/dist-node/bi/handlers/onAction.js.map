{"version":3,"sources":["../../../../src/bi/handlers/onAction.ts"],"names":["createOnAction","config","replacer","locale","variables","action","controller","next","isActions","isInsertTemplateButton","command","payload","isToggleTemplateButton","key","isSetTemplateButton","isInsertTemplateButtonFragment","data","fragment","direction","isOnce","edge","EdgePoint","create","BEFORE","AFTER","doc","beforeInsert","then","newFragment","Commands","insertEmptyBlock","insertFragment","removeNodeByKey","isDeleteTemplateButton","isCopyTemplateButton","node","value","document","getNode","moveAnchorToStartOfNode","moveFocusToEndOfNode","run","type","ContextMenu","ACTION_COPY","isCutTemplateButton","ACTION_CUT"],"mappings":"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","sourcesContent":["import {\n  ZhiPlugin,\n  EdgePoint,\n  Commands,\n  ContextMenu,\n} from \"@ali/4ever-cangjie\";\nimport { buildReplacer, replaceTemplate } from \"../utils\";\nimport { setNodeData } from \"../commands/setNodeData\";\nimport { toggleOpen } from \"../commands/toggleOpen\";\nimport { TemplateButtonConfig } from \"../../type\";\nimport { createVariables } from \"../variable\";\nimport { isActions } from \"../actions\";\n\nexport const createOnAction = (\n  config?: TemplateButtonConfig,\n): ZhiPlugin[\"onAction\"] => {\n  const replacer = buildReplacer({\n    ...createVariables(config?.locale),\n    ...(config?.variables || {}),\n  });\n  return (action, controller, next) => {\n    if (isActions.isInsertTemplateButton(action)) {\n      return controller.command(\"insertTemplateButton\", action.payload);\n    } else if (isActions.isToggleTemplateButton(action)) {\n      return toggleOpen(controller, action.payload?.key!);\n    } else if (isActions.isSetTemplateButton(action)) {\n      return setNodeData(controller, action.payload!);\n    } else if (isActions.isInsertTemplateButtonFragment(action)) {\n      const {\n        key,\n        data: { fragment, direction, isOnce },\n      } = action.payload!;\n      const edge = EdgePoint.create({\n        key,\n        edge: direction === \"top\" ? EdgePoint.BEFORE : EdgePoint.AFTER,\n      });\n      const doc = replaceTemplate(fragment, replacer);\n      const beforeInsert = config?.beforeInsert;\n      if (beforeInsert && beforeInsert) {\n        beforeInsert(doc, replacer).then((newFragment) => {\n          controller\n            .command(Commands.insertEmptyBlock, edge)\n            .command(Commands.insertFragment, newFragment);\n          if (isOnce) {\n            controller.command(Commands.removeNodeByKey, key);\n          }\n        });\n      } else {\n        controller\n          .command(Commands.insertEmptyBlock, edge)\n          .command(Commands.insertFragment, doc);\n        if (isOnce) {\n          controller.command(Commands.removeNodeByKey, key);\n        }\n      }\n      return controller;\n    } else if (isActions.isDeleteTemplateButton(action)) {\n      controller.command(Commands.removeNodeByKey, action.payload?.key!);\n      return controller;\n    } else if (isActions.isCopyTemplateButton(action)) {\n      const node = controller.value.document.getNode(action.payload?.key!)!;\n      controller\n        .command(Commands.moveAnchorToStartOfNode, node)\n        .command(Commands.moveFocusToEndOfNode, node);\n      controller.run(\"onAction\", { type: ContextMenu.ACTION_COPY });\n      return controller;\n    } else if (isActions.isCutTemplateButton(action)) {\n      const node = controller.value.document.getNode(action.payload?.key!)!;\n      controller\n        .command(Commands.moveAnchorToStartOfNode, node)\n        .command(Commands.moveFocusToEndOfNode, node);\n      controller.run(\"onAction\", { type: ContextMenu.ACTION_CUT });\n      return controller;\n    }\n    return next();\n  };\n};\n"],"file":"onAction.js"}