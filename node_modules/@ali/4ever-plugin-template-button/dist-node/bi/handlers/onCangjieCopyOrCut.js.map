{"version":3,"sources":["../../../../src/bi/handlers/onCangjieCopyOrCut.ts"],"names":["MIME_TYPES","constants","onCangjieCopyOrCut","event","controller","next","clipboardData","tableSelection","query","templateSelection","document","selection","value","button","getClosest","anchor","key","TemplateButton","isTemplateButton","fragment","getFragmentAtRange","isOpen","Document","create","nodes","setData","FRAGMENT","transferUtils","encodeFragment"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,sBAAvB;;AAEO,MAAMC,kBAA8C,GAAG,CAACC,KAAD,EAA+BC,UAA/B,EAAuDC,IAAvD,KAAgE;AAC5H,MAAI,CAACF,KAAK,CAACG,aAAX,EAA0B;AACxB,WAAOD,IAAI,EAAX;AACD,GAH2H,CAK5H;AACA;;;AACA,QAAME,cAAc,GAAGH,UAAU,CAACI,KAAX,CAAiB,gBAAjB,CAAvB,CAP4H,CAQ5H;;AACA,MAAID,cAAJ,EAAoB;AAClB,WAAOF,IAAI,EAAX;AACD;;AAED,QAAMI,iBAAiB,GAAG,0CAA4BL,UAA5B,CAA1B,CAb4H,CAc5H;;AACA,MAAIK,iBAAiB,KAAK,KAA1B,EAAiC;AAC/B,WAAOJ,IAAI,EAAX;AACD;;AAED,QAAM;AAAEK,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BP,UAAU,CAACQ,KAA3C,CAnB4H,CAqB5H;;AACA,QAAMC,MAAM,GAAGT,UAAU,CAACQ,KAAX,CAAiBF,QAAjB,CAA0BI,UAA1B,CACbH,SAAS,CAACI,MAAV,CAAiBC,GADJ,EAEbC,mBAAeC,gBAFF,CAAf,CAtB4H,CA2B5H;;AACA,MAAIC,QAAQ,GAAGT,QAAQ,CAACU,kBAAT,CAA4BT,SAA5B,EAAuCP,UAAvC,CAAf;;AACA,QAAMiB,MAAM,GAAGJ,mBAAeI,MAAf,CAAsBjB,UAAtB,EAAkCS,MAAM,CAACG,GAAzC,CAAf,CA7B4H,CA+B5H;;;AACA,MAAIK,MAAJ,EAAY;AACV;AACAF,IAAAA,QAAQ,GAAGG,sBAASC,MAAT,CAAgB;AAAEC,MAAAA,KAAK,EAAEL,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkBA;AAA3B,KAAhB,CAAX;AACD;;AACDrB,EAAAA,KAAK,CAACG,aAAN,CAAoBmB,OAApB,CAA4BzB,UAAU,CAAC0B,QAAvC,EAAiDC,2BAAcC,cAAd,CAA6BT,QAA7B,CAAjD;AACA,SAAOd,IAAI,EAAX;AACD,CAtCM","sourcesContent":["import { CangjieClipboardEvent, constants, transferUtils, Controller, Document, ZhiPlugin } from '@ali/4ever-cangjie';\nimport isSelectionInTemplateButton from '../queries/isSelectionInTemplateButton';\nimport { TemplateButton } from '../../mo';\n\nconst { MIME_TYPES } = constants;\n\nexport const onCangjieCopyOrCut: ZhiPlugin['onCangjieCopy'] = (event: CangjieClipboardEvent, controller: Controller, next) => {\n  if (!event.clipboardData) {\n    return next();\n  }\n\n  // 增加类似表格特性的 plugin 时，依然需要在这里感知\n  // 特性： copy 部分选区时需要携带容器\n  const tableSelection = controller.query('tableSelection');\n  // 如果是表格选区，则不处理\n  if (tableSelection) {\n    return next();\n  }\n\n  const templateSelection = isSelectionInTemplateButton(controller);\n  // 选区不全在模板按钮内，走默认行为\n  if (templateSelection !== 'all') {\n    return next();\n  }\n\n  const { document, selection } = controller.value;\n\n  // 找到最近的 templateButton\n  const button = controller.value.document.getClosest(\n    selection.anchor.key,\n    TemplateButton.isTemplateButton,\n  ) as TemplateButton;\n\n  // @ts-ignore\n  let fragment = document.getFragmentAtRange(selection, controller);\n  const isOpen = TemplateButton.isOpen(controller, button.key);\n\n  // Open 的情况下，不需要 copy 整个模板按钮，取出其 nodes\n  if (isOpen) {\n    // @ts-ignore\n    fragment = Document.create({ nodes: fragment.nodes[0].nodes });\n  }\n  event.clipboardData.setData(MIME_TYPES.FRAGMENT, transferUtils.encodeFragment(fragment));\n  return next();\n}\n"],"file":"onCangjieCopyOrCut.js"}