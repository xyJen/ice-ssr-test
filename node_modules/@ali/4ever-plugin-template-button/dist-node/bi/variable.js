"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVariables = createVariables;
// 默认提供补零版本
// ref https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#parameters
const localeDateOptions = {
  year: 'numeric',
  month: '2-digit',
  day: '2-digit'
};

function createVariables(i18n) {
  /**
   * 模板内容替换函数
   * 比如：模板内容中的 %XX% 会被如下 key 为 XX 的函数求值并替换
   */
  const variable = {
    DATE: () => {
      return new Date().toLocaleDateString([], localeDateOptions);
    },
    DATE1: () => {
      return variable.DATE().replace(/\//g, '-');
    },
    TOMORROW: () => {
      const date = new Date();
      date.setDate(date.getDate() + 1);
      return date.toLocaleDateString([], localeDateOptions);
    },
    YESTERDAY: () => {
      const date = new Date();
      date.setDate(date.getDate() - 1);
      return date.toLocaleDateString([], localeDateOptions);
    },
    TIME0: () => {
      return variable.TIME();
    },
    TIME: () => {
      const date = new Date();
      return `${padding0(`${date.getHours()}`, 2)}:${padding0(`${date.getMinutes()}`, 2)}`;
    },
    YEAR: () => {
      return new Date().getFullYear();
    },
    MONTH: () => {
      return new Date().getMonth() + 1;
    },
    MONTH0: () => {
      return padding0(`${variable.MONTH()}`, 2);
    },
    DAY: () => {
      return new Date().getDate();
    },
    DAY0: () => {
      return padding0(`${variable.DAY()}`, 2);
    },
    QUARTER: () => {
      const month = new Date().getMonth() + 1;

      if (month <= 3) {
        return 1;
      } else if (month <= 6) {
        return 2;
      } else if (month <= 9) {
        return 3;
      } else {
        return 4;
      }
    },
    // 今天为当前的第几自然周
    WEEK: () => {
      const date = new Date();
      const year = date.getFullYear();
      const firstDay = new Date(year, 0, 1);
      const pastDays = (date.getTime() - firstDay.getTime()) / 86400000;
      return Math.ceil((pastDays + firstDay.getDay() + 1) / 7);
    },
    WEEK0: () => {
      return padding0(`${variable.WEEK()}`, 2);
    },
    DAYOFWEEK: () => {
      const weekday = new Date().getDay();
      const str = i18n?.weeks || 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday';
      return str.split(',')[weekday];
    }
  };
  return variable;
}

function padding0(origin, digit) {
  if (origin.length >= digit) return origin;
  return '0'.repeat(digit - origin.length) + origin;
}
//# sourceMappingURL=variable.js.map