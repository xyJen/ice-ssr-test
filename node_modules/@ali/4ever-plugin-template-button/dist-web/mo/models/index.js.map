{"version":3,"sources":["../../../../src/mo/models/index.ts"],"names":["Block","Text","Container","ELEMENT_TYPE","TemplateButton","isTemplateButton","node","isContainer","SUB_TYPE","isOpen","controller","key","injections","value","find","inj","data","metadata","undefined","isVoid","createTemplateButton","listId","Math","random","toString","slice","createContainer","subType","isOnce","direction","title","nodes","create","type","list","level","isChecked","isOrdered","isTaskList"],"mappings":";;AAAA,SAASA,KAAT,EAA4BC,IAA5B,QAA8C,oBAA9C;AACA,SAASC,SAAT,QAAyC,6BAAzC;AACA,SAASC,YAAT;AAYA,WAAaC,cAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA,iBAGSC,gBAHT,GAGE,0BAAwBC,IAAxB,EAA2D;AACzD,WAAOJ,SAAS,CAACK,WAAV,CAAsBD,IAAtB,EAA4BF,cAAc,CAACI,QAA3C,CAAP;AACD,GALH;;AAAA,iBAOSC,MAPT,GAOE,gBAAcC,UAAd,EAAsCC,GAAtC,EAA4D;AAAA;;AAAA,QAClDC,UADkD,GACnCF,UAAU,CAACG,KADwB,CAClDD,UADkD;AAE1D,wDAAOA,UAAU,CAACE,IAAX,CAAgB,UAAAC,GAAG;AAAA;;AAAA,aAAI,cAAAA,GAAG,CAACC,IAAJ,qDAAUC,QAAV,wCAAoBR,MAApB,MAA+BS,SAA/B,IAA4CH,GAAG,CAACJ,GAAJ,KAAYA,GAA5D;AAAA,KAAnB,CAAP,+CAAO,iBAAqFK,IAA5F,+CAAO,uBAA2FC,QAAlG,qBAAO,uBAAqGR,MAA5G,oCAAsH,KAAtH;AACD,GAVH;;AAAA,iBAYSU,MAZT,GAYE,gBAAcT,UAAd,EAAsCJ,IAAtC,EAAkD;AAChD,WAAOF,cAAc,CAACC,gBAAf,CAAgCC,IAAhC,KAAyC,CAACF,cAAc,CAACK,MAAf,CAAsBC,UAAtB,EAAkCJ,IAAI,CAACK,GAAvC,CAAjD;AACD,GAdH;;AAAA,iBAgBSS,oBAhBT,GAgBE,8BACEH,QADF,EAEEI,MAFF,EAGE;AAAA,QAFAJ,QAEA;AAFAA,MAAAA,QAEA,GAFoE,EAEpE;AAAA;;AAAA,QADAI,MACA;AADAA,MAAAA,MACA,GADSC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CACT;AAAA;;AACA,WAAOvB,SAAS,CAACwB,eAAV,CAA0B;AAC/BV,MAAAA,IAAI,EAAE;AACJW,QAAAA,OAAO,EAAEvB,cAAc,CAACI,QADpB;AAEJS,QAAAA,QAAQ;AACNW,UAAAA,MAAM,EAAE,KADF;AAENC,UAAAA,SAAS,EAAE,QAFL;AAGNC,UAAAA,KAAK,EAAE;AAHD,WAIHb,QAJG;AAFJ,OADyB;AAU/Bc,MAAAA,KAAK,EAAE,CACL/B,KAAK,CAACgC,MAAN,CAAa;AACXC,QAAAA,IAAI,EAAE,WADK;AAEXjB,QAAAA,IAAI,EAAE;AACJkB,UAAAA,IAAI,EAAE;AACJC,YAAAA,KAAK,EAAE,CADH;AAEJC,YAAAA,SAAS,EAAE,KAFP;AAGJC,YAAAA,SAAS,EAAE,KAHP;AAIJC,YAAAA,UAAU,EAAE,IAJR;AAKJjB,YAAAA,MAAM,EAANA;AALI;AADF,SAFK;AAWXU,QAAAA,KAAK,EAAE,CAAC9B,IAAI,CAAC+B,MAAL,EAAD;AAXI,OAAb,CADK;AAVwB,KAA1B,CAAP;AA0BD,GA9CH;;AAAA;AAAA,EAAoC9B,SAApC;AAAaE,c,CACJI,Q,GAAWL,Y","sourcesContent":["import { Block, Controller, Text, Node } from '@ali/4ever-cangjie';\nimport { Container, ContainerData } from '@ali/4ever-plugin-container';\nimport { ELEMENT_TYPE } from '../../utils/meta';\n\nexport interface TemplateButtonData extends ContainerData<'templateButton'> {\n  readonly metadata: {\n    direction: 'top' | 'bottom';\n    isOnce: boolean;\n    isOpen?: boolean;\n    title: string;\n  };\n}\n\n\nexport class TemplateButton extends Container<TemplateButtonData> {\n  static SUB_TYPE = ELEMENT_TYPE;\n\n  static isTemplateButton(node: any): node is TemplateButton {\n    return Container.isContainer(node, TemplateButton.SUB_TYPE);\n  }\n\n  static isOpen(controller: Controller, key: string): boolean {\n    const { injections } = controller.value;\n    return injections.find(inj => inj.data?.metadata?.isOpen !== undefined && inj.key === key)?.data?.metadata?.isOpen ?? false;\n  }\n\n  static isVoid(controller: Controller, node: Node) {\n    return TemplateButton.isTemplateButton(node) && !TemplateButton.isOpen(controller, node.key);\n  }\n\n  static createTemplateButton(\n    metadata: Partial<Omit<TemplateButtonData['metadata'], 'isOpen'>> = {},\n    listId = Math.random().toString(36).slice(2),\n  ) {\n    return Container.createContainer({\n      data: {\n        subType: TemplateButton.SUB_TYPE,\n        metadata: {\n          isOnce: false,\n          direction: 'bottom',\n          title: '',\n          ...metadata,\n        },\n      },\n      nodes: [\n        Block.create({\n          type: 'paragraph',\n          data: {\n            list: {\n              level: 0,\n              isChecked: false,\n              isOrdered: false,\n              isTaskList: true,\n              listId,\n            },\n          },\n          nodes: [Text.create()],\n        }),\n      ],\n    });\n  }\n}\n"],"file":"index.js"}