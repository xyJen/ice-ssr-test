import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import { Block, Text } from '@ali/4ever-cangjie';
import { Container } from '@ali/4ever-plugin-container';
import { ELEMENT_TYPE } from "../../utils/meta";
export var TemplateButton = /*#__PURE__*/function (_Container) {
  _inheritsLoose(TemplateButton, _Container);

  function TemplateButton() {
    return _Container.apply(this, arguments) || this;
  }

  TemplateButton.isTemplateButton = function isTemplateButton(node) {
    return Container.isContainer(node, TemplateButton.SUB_TYPE);
  };

  TemplateButton.isOpen = function isOpen(controller, key) {
    var _injections$find$data, _injections$find, _injections$find$data2, _injections$find$data3;

    var injections = controller.value.injections;
    return (_injections$find$data = (_injections$find = injections.find(function (inj) {
      var _inj$data, _inj$data$metadata;

      return ((_inj$data = inj.data) == null ? void 0 : (_inj$data$metadata = _inj$data.metadata) == null ? void 0 : _inj$data$metadata.isOpen) !== undefined && inj.key === key;
    })) == null ? void 0 : (_injections$find$data2 = _injections$find.data) == null ? void 0 : (_injections$find$data3 = _injections$find$data2.metadata) == null ? void 0 : _injections$find$data3.isOpen) != null ? _injections$find$data : false;
  };

  TemplateButton.isVoid = function isVoid(controller, node) {
    return TemplateButton.isTemplateButton(node) && !TemplateButton.isOpen(controller, node.key);
  };

  TemplateButton.createTemplateButton = function createTemplateButton(metadata, listId) {
    if (metadata === void 0) {
      metadata = {};
    }

    if (listId === void 0) {
      listId = Math.random().toString(36).slice(2);
    }

    return Container.createContainer({
      data: {
        subType: TemplateButton.SUB_TYPE,
        metadata: _extends({
          isOnce: false,
          direction: 'bottom',
          title: ''
        }, metadata)
      },
      nodes: [Block.create({
        type: 'paragraph',
        data: {
          list: {
            level: 0,
            isChecked: false,
            isOrdered: false,
            isTaskList: true,
            listId: listId
          }
        },
        nodes: [Text.create()]
      })]
    });
  };

  return TemplateButton;
}(Container);
TemplateButton.SUB_TYPE = ELEMENT_TYPE;
//# sourceMappingURL=index.js.map