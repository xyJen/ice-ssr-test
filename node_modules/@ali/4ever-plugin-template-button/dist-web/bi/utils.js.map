{"version":3,"sources":["../../../src/bi/utils.ts"],"names":["Text","isEmptyNode","controller","node","type","undefined","nodes","length","isEmptyText","isList","data","list","isInlineCode","query","buildReplacer","replaceFns","replaceExp","RegExp","Object","keys","map","i","join","str","replace","match","slice","replaceTemplate","fragment","replacer","mapDescendants","isText","leafs","getLeaves","leaf","newText","text","set"],"mappings":"AAAA,SAAgBA,IAAhB,QAAkD,oBAAlD;;AAIA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,UAAD,EAAyBC,IAAzB,EAAyC;AAClE,MAAIA,IAAI,CAACC,IAAL,KAAc,WAAlB,EAA+B;AAC7B,WAAOC,SAAP;AACD;;AACD,SACEF,IAAI,CAACG,KAAL,CAAWC,MAAX,KAAsB,CAAtB,IACCJ,IAAI,CAACG,KAAL,CAAWC,MAAX,KAAsB,CAAtB,IAA2BP,IAAI,CAACQ,WAAL,CAAiBL,IAAI,CAACG,KAAL,CAAW,CAAX,CAAjB,CAF9B;AAID,CARM;AAUP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,MAAM,GAAG,SAATA,MAAS,CAACN,IAAD,EAAoC;AAAA;;AACxD,SAAOA,IAAI,CAACC,IAAL,KAAc,WAAd,mBAA6BD,IAAI,CAACO,IAAlC,qBAA6B,WAAWC,IAAxC,CAAP;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACV,UAAD,EAAqC;AAC/D,SAAOA,UAAU,CAACW,KAAX,CAAiB,cAAjB,CAAP;AACD,CAFM;AAIP,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAA8C;AACnD;AACA,MAAMC,UAAU,GAAG,IAAIC,MAAJ,MACdC,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EACAK,GADA,CACI,UAACC,CAAD;AAAA,iBAAWA,CAAX;AAAA,GADJ,EAEAC,IAFA,CAEK,GAFL,CADc,EAIjB,GAJiB,CAAnB;AAMA,SAAO,UAACC,GAAD,EAAiB;AACtB,WAAOA,GAAG,CAACC,OAAJ,CAAYR,UAAZ,EAAwB,UAACS,KAAD,EAAW;AACxC,kBAAUV,UAAU,CAACU,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAD,CAAV,EAAV;AACD,KAFM,CAAP;AAGD,GAJD;AAKD;AAED,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAqBC,QAArB,EAA2D;AACxF,SAAOD,QAAQ,CAACE,cAAT,CAAwB,UAAC3B,IAAD,EAAU;AACvC,QAAIH,IAAI,CAAC+B,MAAL,CAAY5B,IAAZ,CAAJ,EAAuB;AACrB,UAAM6B,KAAK,GAAG7B,IAAI,CAAC8B,SAAL,GAAiBb,GAAjB,CAAqB,UAACc,IAAD,EAAU;AAC3C,YAAMC,OAAO,GAAGN,QAAQ,CAACK,IAAI,CAACE,IAAN,CAAxB;AACA,eAAOF,IAAI,CAACG,GAAL,CAAS,MAAT,EAAiBF,OAAjB,CAAP;AACD,OAHa,CAAd;AAIA,aAAOhC,IAAI,CAACkC,GAAL,CAAS,QAAT,EAAmBL,KAAnB,CAAP;AACD,KAND,MAMO;AACL,aAAO7B,IAAP;AACD;AACF,GAVM,CAAP;AAWD,CAZM","sourcesContent":["import { Block, Text, Document, Controller } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport { Variables } from '../type';\n\n/**\n * 判断节点是否是空节点\n * @param node\n * @returns\n */\nexport const isEmptyNode = (controller: Controller, node: Block) => {\n  if (node.type !== 'paragraph') {\n    return undefined;\n  }\n  return (\n    node.nodes.length === 0 ||\n    (node.nodes.length === 1 && Text.isEmptyText(node.nodes[0]))\n  );\n};\n\n/**\n * 判断一个 node 是否是 list\n * @param node\n * @returns\n */\nexport const isList = (node: Block): node is Paragraph => {\n  return node.type === 'paragraph' && node.data?.list;\n};\n\n/**\n * 判断当前光标是否在 inline code 中\n * @param controller\n * @returns\n */\nexport const isInlineCode = (controller: Controller): boolean => {\n  return controller.query('isInlineCode');\n};\n\nexport function buildReplacer(replaceFns: Variables) {\n  // /%TODY%|%ME%.../g\n  const replaceExp = new RegExp(\n    `${Object.keys(replaceFns)\n      .map((i) => `%${i}%`)\n      .join('|')}`,\n    'g',\n  );\n  return (str: string) => {\n    return str.replace(replaceExp, (match) => {\n      return `${replaceFns[match.slice(1, -1)]()}`;\n    });\n  };\n}\n\nexport const replaceTemplate = (fragment: Document, replacer: (str: string) => string) => {\n  return fragment.mapDescendants((node) => {\n    if (Text.isText(node)) {\n      const leafs = node.getLeaves().map((leaf) => {\n        const newText = replacer(leaf.text);\n        return leaf.set('text', newText);\n      });\n      return node.set('leaves', leafs);\n    } else {\n      return node;\n    }\n  });\n};\n"],"file":"utils.js"}