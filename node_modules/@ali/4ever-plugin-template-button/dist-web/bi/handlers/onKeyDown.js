import { Commands, hotkeys, Block } from '@ali/4ever-cangjie';
import { TemplateButton } from "../../mo";
;
import { isEmptyNode, isList, isInlineCode } from "../utils";
import isSelectionInTemplateButton from "../queries/isSelectionInTemplateButton";
export var onKeyDown = function onKeyDown(event, controller, next) {
  var isDelete = isDeleteHotKey(event); // perf 非关注的事件，趁早返回，减少计算

  if (!isDelete) {
    return next();
  }

  var value = controller.value;
  var document = value.document,
      selection = value.selection;
  var isInTemplateButton = isSelectionInTemplateButton(controller); // 开始、结束节点均不在模板按钮内，则交由其他插件处理

  if (!isInTemplateButton) {
    return next();
  } // 开始、结束节点只有一个在模板按钮内，则不要有响应


  if (isInTemplateButton !== 'all') {
    return controller;
  }

  var templateButton = document.getClosest(selection.focus.key, TemplateButton.isTemplateButton);
  var nodes = templateButton.nodes; // 删除 -> 必需得保留一个空段落

  if (isDelete) {
    var isOpen = TemplateButton.isOpen(controller, templateButton.key); // 关闭状态下，删除时会先选中，再继续退格需要直接删除

    if (!isOpen) {
      return controller.command(Commands.replaceNodeByKey, templateButton.key, Block.create('paragraph')).command(Commands.moveForward, 1);
    } // 只处理单个子元素即将被删除的情况


    if (nodes.length !== 1) {
      return next();
    }

    var anchor = selection.anchor;
    var block = document.getClosestBlock(anchor.key); // 异常情况兜底

    if (!block) {
      return controller;
    }

    var isVoid = controller.query('isVoid', block); // 非空 & 非 void block，不处理

    if (!isEmptyNode(controller, block) && !isVoid) {
      return next();
    } // 空 list 与 void block 被删除时，需要插入一个空段落


    if (isList(block) || isVoid || isInlineCode(controller)) {
      controller.command(Commands.replaceNodeByKey, block.key, Block.create('paragraph')).command(Commands.moveForward, 2);
      return controller;
    }

    event.preventDefault();
    return controller;
  }

  return next();
};
/**
 * 需要拦截删除事件
 * @param event
 * @returns
 */

var isDeleteHotKey = function isDeleteHotKey(event) {
  return hotkeys.isDeleteLineForward(event) || hotkeys.isDeleteLineBackward(event) || hotkeys.isDeleteForward(event) || hotkeys.isDeleteBackward(event) || hotkeys.isDeleteWordForward(event) || hotkeys.isDeleteWordBackward(event);
};
//# sourceMappingURL=onKeyDown.js.map