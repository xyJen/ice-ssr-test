{"version":3,"sources":["../../../../src/bi/handlers/onAction.ts"],"names":["EdgePoint","Commands","ContextMenu","buildReplacer","replaceTemplate","setNodeData","toggleOpen","createVariables","isActions","createOnAction","config","replacer","locale","variables","action","controller","next","isInsertTemplateButton","command","payload","isToggleTemplateButton","key","isSetTemplateButton","isInsertTemplateButtonFragment","data","fragment","direction","isOnce","edge","create","BEFORE","AFTER","doc","beforeInsert","then","newFragment","insertEmptyBlock","insertFragment","removeNodeByKey","isDeleteTemplateButton","isCopyTemplateButton","node","value","document","getNode","moveAnchorToStartOfNode","moveFocusToEndOfNode","run","type","ACTION_COPY","isCutTemplateButton","ACTION_CUT"],"mappings":"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","sourcesContent":["import {\n  ZhiPlugin,\n  EdgePoint,\n  Commands,\n  ContextMenu,\n} from \"@ali/4ever-cangjie\";\nimport { buildReplacer, replaceTemplate } from \"../utils\";\nimport { setNodeData } from \"../commands/setNodeData\";\nimport { toggleOpen } from \"../commands/toggleOpen\";\nimport { TemplateButtonConfig } from \"../../type\";\nimport { createVariables } from \"../variable\";\nimport { isActions } from \"../actions\";\n\nexport const createOnAction = (\n  config?: TemplateButtonConfig,\n): ZhiPlugin[\"onAction\"] => {\n  const replacer = buildReplacer({\n    ...createVariables(config?.locale),\n    ...(config?.variables || {}),\n  });\n  return (action, controller, next) => {\n    if (isActions.isInsertTemplateButton(action)) {\n      return controller.command(\"insertTemplateButton\", action.payload);\n    } else if (isActions.isToggleTemplateButton(action)) {\n      return toggleOpen(controller, action.payload?.key!);\n    } else if (isActions.isSetTemplateButton(action)) {\n      return setNodeData(controller, action.payload!);\n    } else if (isActions.isInsertTemplateButtonFragment(action)) {\n      const {\n        key,\n        data: { fragment, direction, isOnce },\n      } = action.payload!;\n      const edge = EdgePoint.create({\n        key,\n        edge: direction === \"top\" ? EdgePoint.BEFORE : EdgePoint.AFTER,\n      });\n      const doc = replaceTemplate(fragment, replacer);\n      const beforeInsert = config?.beforeInsert;\n      if (beforeInsert && beforeInsert) {\n        beforeInsert(doc, replacer).then((newFragment) => {\n          controller\n            .command(Commands.insertEmptyBlock, edge)\n            .command(Commands.insertFragment, newFragment);\n          if (isOnce) {\n            controller.command(Commands.removeNodeByKey, key);\n          }\n        });\n      } else {\n        controller\n          .command(Commands.insertEmptyBlock, edge)\n          .command(Commands.insertFragment, doc);\n        if (isOnce) {\n          controller.command(Commands.removeNodeByKey, key);\n        }\n      }\n      return controller;\n    } else if (isActions.isDeleteTemplateButton(action)) {\n      controller.command(Commands.removeNodeByKey, action.payload?.key!);\n      return controller;\n    } else if (isActions.isCopyTemplateButton(action)) {\n      const node = controller.value.document.getNode(action.payload?.key!)!;\n      controller\n        .command(Commands.moveAnchorToStartOfNode, node)\n        .command(Commands.moveFocusToEndOfNode, node);\n      controller.run(\"onAction\", { type: ContextMenu.ACTION_COPY });\n      return controller;\n    } else if (isActions.isCutTemplateButton(action)) {\n      const node = controller.value.document.getNode(action.payload?.key!)!;\n      controller\n        .command(Commands.moveAnchorToStartOfNode, node)\n        .command(Commands.moveFocusToEndOfNode, node);\n      controller.run(\"onAction\", { type: ContextMenu.ACTION_CUT });\n      return controller;\n    }\n    return next();\n  };\n};\n"],"file":"onAction.js"}