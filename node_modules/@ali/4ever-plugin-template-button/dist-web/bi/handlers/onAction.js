import _extends from "@babel/runtime/helpers/extends";
import { EdgePoint, Commands, ContextMenu } from "@ali/4ever-cangjie";
import { buildReplacer, replaceTemplate } from "../utils";
import { setNodeData } from "../commands/setNodeData";
import { toggleOpen } from "../commands/toggleOpen";
import { createVariables } from "../variable";
import { isActions } from "../actions";
export var createOnAction = function createOnAction(config) {
  var replacer = buildReplacer(_extends({}, createVariables(config == null ? void 0 : config.locale), (config == null ? void 0 : config.variables) || {}));
  return function (action, controller, next) {
    if (isActions.isInsertTemplateButton(action)) {
      return controller.command("insertTemplateButton", action.payload);
    } else if (isActions.isToggleTemplateButton(action)) {
      var _action$payload;

      return toggleOpen(controller, (_action$payload = action.payload) == null ? void 0 : _action$payload.key);
    } else if (isActions.isSetTemplateButton(action)) {
      return setNodeData(controller, action.payload);
    } else if (isActions.isInsertTemplateButtonFragment(action)) {
      var _ref = action.payload,
          key = _ref.key,
          _ref$data = _ref.data,
          fragment = _ref$data.fragment,
          direction = _ref$data.direction,
          isOnce = _ref$data.isOnce;
      var edge = EdgePoint.create({
        key: key,
        edge: direction === "top" ? EdgePoint.BEFORE : EdgePoint.AFTER
      });
      var doc = replaceTemplate(fragment, replacer);
      var beforeInsert = config == null ? void 0 : config.beforeInsert;

      if (beforeInsert && beforeInsert) {
        beforeInsert(doc, replacer).then(function (newFragment) {
          controller.command(Commands.insertEmptyBlock, edge).command(Commands.insertFragment, newFragment);

          if (isOnce) {
            controller.command(Commands.removeNodeByKey, key);
          }
        });
      } else {
        controller.command(Commands.insertEmptyBlock, edge).command(Commands.insertFragment, doc);

        if (isOnce) {
          controller.command(Commands.removeNodeByKey, key);
        }
      }

      return controller;
    } else if (isActions.isDeleteTemplateButton(action)) {
      var _action$payload2;

      controller.command(Commands.removeNodeByKey, (_action$payload2 = action.payload) == null ? void 0 : _action$payload2.key);
      return controller;
    } else if (isActions.isCopyTemplateButton(action)) {
      var _action$payload3;

      var node = controller.value.document.getNode((_action$payload3 = action.payload) == null ? void 0 : _action$payload3.key);
      controller.command(Commands.moveAnchorToStartOfNode, node).command(Commands.moveFocusToEndOfNode, node);
      controller.run("onAction", {
        type: ContextMenu.ACTION_COPY
      });
      return controller;
    } else if (isActions.isCutTemplateButton(action)) {
      var _action$payload4;

      var _node = controller.value.document.getNode((_action$payload4 = action.payload) == null ? void 0 : _action$payload4.key);

      controller.command(Commands.moveAnchorToStartOfNode, _node).command(Commands.moveFocusToEndOfNode, _node);
      controller.run("onAction", {
        type: ContextMenu.ACTION_CUT
      });
      return controller;
    }

    return next();
  };
};
//# sourceMappingURL=onAction.js.map