{"version":3,"sources":["../../../../src/bi/handlers/createRenderHoverToolbar.tsx"],"names":["React","IconEdit","TemplateButtonRole","TemplateButton","createRenderHoverToolbar","config","locale","props","controller","getNode","buttonName","title","editTooltip","tooltip","icon","onClick","node","isTemplateButton","dispatch","key","testid","role","templateButton"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;qBAC4B,a;AAA5B,SAASC,QAAT,QAAyB,sBAAzB;AAEA,SAASC,kBAAT;AAEA,SAASC,cAAT;;yBAagB,eAAC,QAAD,O;;AAXhB,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CACtCC,MADsC,EAEH;AAAA,aAChBA,MAAM,IAAI,EADM;AAAA,MAC3BC,MAD2B,QAC3BA,MAD2B;;AAEnC,SAAO,UAACC,KAAD,EAAQC,UAAR,EAAoBC,OAApB,EAAgC;AAAA,QAC7BC,UAD6B,GACdH,KADc,CAC7BG,UAD6B;;AAErC,YAAQA,UAAR;AACE,WAAK,MAAL;AACE,eAAO;AACLC,UAAAA,KAAK,EAAE,CAAAL,MAAM,QAAN,YAAAA,MAAM,CAAEM,WAAR,KAAuB,wBADzB;AAELC,UAAAA,OAAO,EAAE,CAAAP,MAAM,QAAN,YAAAA,MAAM,CAAEM,WAAR,KAAuB,wBAF3B;AAGLE,UAAAA,IAAI,OAHC;AAILC,UAAAA,OAAO,EAAE,mBAAM;AACb,gBAAMC,IAAI,GAAGP,OAAO,EAApB;AACA,gBAAI,CAACN,cAAc,CAACc,gBAAf,CAAgCD,IAAhC,CAAL,EAA4C;AAC5CR,YAAAA,UAAU,CAACU,QAAX,CAAoB,sBAApB,EAA4C;AAAEC,cAAAA,GAAG,EAAEH,IAAI,CAACG;AAAZ,aAA5C;AACD,WARI;AASLC,UAAAA,MAAM,EAAE,qBATH;AAULC,UAAAA,IAAI,EAAEnB,kBAAkB,CAACoB;AAVpB,SAAP;;AAYF;AAAS,eAAO,IAAP;AAdX;AAgBD,GAlBD;AAmBD,CAvBM","sourcesContent":["import React from 'react';\nimport { IconEdit } from '@ali/4ever-component';\nimport { BiPlugin } from '@ali/4ever-cangjie';\nimport { TemplateButtonRole } from '../../utils/role';\nimport { TemplateButtonConfig } from '../../type';\nimport { TemplateButton } from '../../mo';\n\nexport const createRenderHoverToolbar = (\n  config: TemplateButtonConfig\n): BiPlugin['renderHoverToolbar'] => {\n  const { locale } = config || {};\n  return (props, controller, getNode) => {\n    const { buttonName } = props;\n    switch (buttonName) {\n      case 'edit':\n        return {\n          title: locale?.editTooltip || 'Configuration Template',\n          tooltip: locale?.editTooltip || 'Configuration Template',\n          icon: <IconEdit />,\n          onClick: () => {\n            const node = getNode();\n            if (!TemplateButton.isTemplateButton(node)) return;\n            controller.dispatch('toggleTemplateButton', { key: node.key });\n          },\n          testid: 'templateButton-edit',\n          role: TemplateButtonRole.templateButton,\n        };\n      default: return null;\n    }\n  };\n}\n"],"file":"createRenderHoverToolbar.js"}