import { Text } from '@ali/4ever-cangjie';

/**
 * 判断节点是否是空节点
 * @param node
 * @returns
 */
export var isEmptyNode = function isEmptyNode(controller, node) {
  if (node.type !== 'paragraph') {
    return undefined;
  }

  return node.nodes.length === 0 || node.nodes.length === 1 && Text.isEmptyText(node.nodes[0]);
};
/**
 * 判断一个 node 是否是 list
 * @param node
 * @returns
 */

export var isList = function isList(node) {
  var _node$data;

  return node.type === 'paragraph' && ((_node$data = node.data) == null ? void 0 : _node$data.list);
};
/**
 * 判断当前光标是否在 inline code 中
 * @param controller
 * @returns
 */

export var isInlineCode = function isInlineCode(controller) {
  return controller.query('isInlineCode');
};
export function buildReplacer(replaceFns) {
  // /%TODY%|%ME%.../g
  var replaceExp = new RegExp("" + Object.keys(replaceFns).map(function (i) {
    return "%" + i + "%";
  }).join('|'), 'g');
  return function (str) {
    return str.replace(replaceExp, function (match) {
      return "" + replaceFns[match.slice(1, -1)]();
    });
  };
}
export var replaceTemplate = function replaceTemplate(fragment, replacer) {
  return fragment.mapDescendants(function (node) {
    if (Text.isText(node)) {
      var leafs = node.getLeaves().map(function (leaf) {
        var newText = replacer(leaf.text);
        return leaf.set('text', newText);
      });
      return node.set('leaves', leafs);
    } else {
      return node;
    }
  });
};
//# sourceMappingURL=utils.js.map