{"version":3,"sources":["../../../src/components/button.tsx"],"names":["React","useCallback","useMemo","useEffect","useRef","Commands","Selection","EdgePoint","AddallNormal","ArrowLeftBackNormal","EditNormal","InlineToolbar","IconButton","useHover","Wrapper","Left","Right","Title","Button","props","onInsert","isOpen","nodeKey","controller","direction","isSelected","title","editTooltip","editable","moreToolbarWrapperRef","enableBorderHighlight","query","isHover","hoverHandlers","getContainer","current","window","document","body","tooltip","handleInsert","handleToggleOpen","e","preventDefault","stopPropagation","dispatch","key","edge","create","command","select","anchor","focus","handleDelete","handleCopy","handleCut","moreMenuConfig","options","name","onClick","testId","hasHoverToolbar","paddingRight","cursor"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useEffect, useRef } from 'react';\nimport { Controller, Commands, Selection, EdgePoint } from '@ali/4ever-cangjie';\nimport { AddallNormal, ArrowLeftBackNormal, EditNormal } from '@ali/we-icon';\nimport { InlineToolbar, IconButton } from '@ali/we-toolbar';\nimport { useHover } from '@ali/4ever-component';\nimport { Wrapper, Left, Right, Title } from './styled';\n\n\ninterface Props {\n  direction: 'top' | 'bottom' | null;\n  isOpen?: boolean;\n  title: string;\n  nodeKey: string;\n  controller: Controller;\n  onInsert?: () => void;\n  isSelected?: boolean;\n  editable?: boolean;\n  editTooltip?: string;\n}\n\nconst Button: React.FC<Props> = (props) => {\n  const {\n    onInsert,\n    isOpen,\n    nodeKey,\n    controller,\n    direction,\n    isSelected,\n    title,\n    editTooltip,\n    editable = true,\n  } = props;\n\n  const moreToolbarWrapperRef = useRef<HTMLDivElement>(null);\n  const enableBorderHighlight = !isOpen && controller.query('enableBorderHighlight');\n  const [isHover, hoverHandlers] = useHover(enableBorderHighlight);\n\n  const getContainer = useCallback(() => {\n    return moreToolbarWrapperRef.current || window.document.body;\n  }, []);\n\n  const tooltip = useMemo(() => {\n    if (!editable) return '';\n    return editTooltip || 'Configure template';\n  }, [editable, editTooltip]);\n\n  const handleInsert = useCallback(() => {\n    onInsert?.();\n  }, [onInsert]);\n\n  const handleToggleOpen = useCallback((e?: React.MouseEvent<HTMLElement>) => {\n    e?.preventDefault();\n    e?.stopPropagation();\n    // 未处理排版问题，暂不允许在排版模式下编辑\n    if (e && !editable) return;\n    controller.dispatch('toggleTemplateButton', { key: nodeKey });\n    if (isOpen) {\n      // 当前是打开状态，防止内容区域有选区，收起后选区异常，这里统一收到按钮后面\n      const edge = EdgePoint.create({ key: nodeKey, edge: 'after' });\n      controller.command(\n        Commands.select,\n        Selection.create({\n          anchor: edge,\n          focus: edge,\n        }),\n      );\n    }\n  }, [nodeKey, controller, editable, isOpen]);\n\n  const handleDelete = useCallback(() => {\n    controller.dispatch('deleteTemplateButton', { key: nodeKey });\n  }, [controller, nodeKey]);\n\n  const handleCopy = useCallback(() => {\n    controller.dispatch('copyTemplateButton', { key: nodeKey });\n  }, [controller, nodeKey]);\n\n  const handleCut = useCallback(() => {\n    controller.dispatch('cutTemplateButton', { key: nodeKey });\n  }, [controller, nodeKey]);\n\n  useEffect(() => {\n    // 由非排版模式下切换到排版模式\n    // 如果当前是打开状态，则收起\n    if (isOpen && !editable) {\n      handleToggleOpen();\n    }\n  }, [editable, handleToggleOpen, isOpen]);\n\n  const moreMenuConfig: any = useMemo(() => {\n    return {\n      options: [\n        [\n          { name: 'delete', onClick: handleDelete, testId: 'templateButton-delete' },\n          { name: 'copy', onClick: handleCopy, testId: 'templateButton-copy' },\n          { name: 'cut', onClick: handleCut, testId: 'templateButton-cut' }\n        ],\n      ],\n    };\n  }, [handleCopy, handleCut, handleDelete]);\n\n  const hasHoverToolbar = controller.query('hasHoverToolbar', 'templateButton');\n\n  return (\n    <Wrapper\n      isOpen={isOpen}\n      onClick={handleInsert}\n      isSelected={isSelected}\n      data-testid=\"templateButton-button\"\n      className='templateButton-wrapper' // className 便于其他插件覆盖样式（激光笔添加高亮效果）\n      data-hover-box=\"noBorderBox\"\n      isHover={isHover}\n      enableBorderHighlight={enableBorderHighlight}\n      {...hoverHandlers}\n    >\n      <Left direction={direction} isOpen={isOpen}>\n        <AddallNormal />\n        <Title>\n          <span className=\"templateButton-title\" style={{ paddingRight: direction ? 0 : '8px' }}>{title}</span>\n        </Title>\n        {direction ? <ArrowLeftBackNormal /> : null}\n      </Left>\n      {\n        !hasHoverToolbar && (\n          <Right ref={moreToolbarWrapperRef}>\n            <InlineToolbar\n              getContainer={getContainer}\n              moreMenuConfig={moreMenuConfig}\n              width={400}\n            >\n              <IconButton\n                tooltip={tooltip}\n                onClick={handleToggleOpen}\n                icon={\n                  <EditNormal\n                    style={{ cursor: editable ? 'default' : 'not-allowed' }}\n                    data-testid=\"templateButton-edit\"\n                  />\n                }\n              />\n            </InlineToolbar>\n          </Right>\n        )\n      }\n    </Wrapper>\n  );\n};\n\nexport default Button;\n"],"file":"button.js"}