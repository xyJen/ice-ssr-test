import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useMemo, useEffect, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Commands, Selection, EdgePoint } from '@ali/4ever-cangjie';
import { AddallNormal, ArrowLeftBackNormal, EditNormal } from '@ali/we-icon';
import { InlineToolbar, IconButton } from '@ali/we-toolbar';
import { useHover } from '@ali/4ever-component';
import { Wrapper, Left, Right, Title } from "./styled";

var _ref = /*#__PURE__*/_createElement(AddallNormal, null);

var _ref2 = /*#__PURE__*/_createElement(ArrowLeftBackNormal, null);

var Button = function Button(props) {
  var onInsert = props.onInsert,
      isOpen = props.isOpen,
      nodeKey = props.nodeKey,
      controller = props.controller,
      direction = props.direction,
      isSelected = props.isSelected,
      title = props.title,
      editTooltip = props.editTooltip,
      _props$editable = props.editable,
      editable = _props$editable === void 0 ? true : _props$editable;
  var moreToolbarWrapperRef = useRef(null);
  var enableBorderHighlight = !isOpen && controller.query('enableBorderHighlight');

  var _useHover = useHover(enableBorderHighlight),
      isHover = _useHover[0],
      hoverHandlers = _useHover[1];

  var getContainer = useCallback(function () {
    return moreToolbarWrapperRef.current || window.document.body;
  }, []);
  var tooltip = useMemo(function () {
    if (!editable) return '';
    return editTooltip || 'Configure template';
  }, [editable, editTooltip]);
  var handleInsert = useCallback(function () {
    onInsert == null ? void 0 : onInsert();
  }, [onInsert]);
  var handleToggleOpen = useCallback(function (e) {
    e == null ? void 0 : e.preventDefault();
    e == null ? void 0 : e.stopPropagation(); // 未处理排版问题，暂不允许在排版模式下编辑

    if (e && !editable) return;
    controller.dispatch('toggleTemplateButton', {
      key: nodeKey
    });

    if (isOpen) {
      // 当前是打开状态，防止内容区域有选区，收起后选区异常，这里统一收到按钮后面
      var edge = EdgePoint.create({
        key: nodeKey,
        edge: 'after'
      });
      controller.command(Commands.select, Selection.create({
        anchor: edge,
        focus: edge
      }));
    }
  }, [nodeKey, controller, editable, isOpen]);
  var handleDelete = useCallback(function () {
    controller.dispatch('deleteTemplateButton', {
      key: nodeKey
    });
  }, [controller, nodeKey]);
  var handleCopy = useCallback(function () {
    controller.dispatch('copyTemplateButton', {
      key: nodeKey
    });
  }, [controller, nodeKey]);
  var handleCut = useCallback(function () {
    controller.dispatch('cutTemplateButton', {
      key: nodeKey
    });
  }, [controller, nodeKey]);
  useEffect(function () {
    // 由非排版模式下切换到排版模式
    // 如果当前是打开状态，则收起
    if (isOpen && !editable) {
      handleToggleOpen();
    }
  }, [editable, handleToggleOpen, isOpen]);
  var moreMenuConfig = useMemo(function () {
    return {
      options: [[{
        name: 'delete',
        onClick: handleDelete,
        testId: 'templateButton-delete'
      }, {
        name: 'copy',
        onClick: handleCopy,
        testId: 'templateButton-copy'
      }, {
        name: 'cut',
        onClick: handleCut,
        testId: 'templateButton-cut'
      }]]
    };
  }, [handleCopy, handleCut, handleDelete]);
  var hasHoverToolbar = controller.query('hasHoverToolbar', 'templateButton');
  return /*#__PURE__*/_createElement(Wrapper, _extends({
    isOpen: isOpen,
    onClick: handleInsert,
    isSelected: isSelected,
    "data-testid": "templateButton-button",
    className: "templateButton-wrapper" // className 便于其他插件覆盖样式（激光笔添加高亮效果）
    ,
    "data-hover-box": "noBorderBox",
    isHover: isHover,
    enableBorderHighlight: enableBorderHighlight
  }, hoverHandlers), /*#__PURE__*/_createElement(Left, {
    direction: direction,
    isOpen: isOpen
  }, _ref, /*#__PURE__*/_createElement(Title, null, /*#__PURE__*/_createElement("span", {
    className: "templateButton-title",
    style: {
      paddingRight: direction ? 0 : '8px'
    }
  }, title)), direction ? _ref2 : null), !hasHoverToolbar && /*#__PURE__*/_createElement(Right, {
    ref: moreToolbarWrapperRef
  }, /*#__PURE__*/_createElement(InlineToolbar, {
    getContainer: getContainer,
    moreMenuConfig: moreMenuConfig,
    width: 400
  }, /*#__PURE__*/_createElement(IconButton, {
    tooltip: tooltip,
    onClick: handleToggleOpen,
    icon: /*#__PURE__*/_createElement(EditNormal, {
      style: {
        cursor: editable ? 'default' : 'not-allowed'
      },
      "data-testid": "templateButton-edit"
    })
  }))));
};

export default Button;
//# sourceMappingURL=button.js.map