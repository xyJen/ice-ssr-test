import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useRef, useEffect, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Radio, RadioGroup, Switch, Button } from '@ali/we-design';
import { useHover } from '@ali/4ever-component';
import TemplateButton from "./button";
import { OpenViewContainer, OpenViewContent, OpenViewFooter, TemplateInput, TemplateInputArea, OpenViewContentGroup, ViewWrapper } from "./styled";

var OpenView = function OpenView(props) {
  var _enable$direction;

  var direction = props.direction,
      isOpen = props.isOpen,
      isOnce = props.isOnce,
      title = props.title,
      child = props.child,
      controller = props.controller,
      nodeKey = props.nodeKey,
      placeholder = props.placeholder,
      editable = props.editable,
      _props$config = props.config,
      config = _props$config === void 0 ? {} : _props$config,
      isSelected = props.isSelected;
  var locale = config.locale,
      enable = config.enable;
  var inputRef = useRef(null);
  var compositingRef = useRef(false);

  var _useState = useState(false),
      compositing = _useState[0],
      setCompositing = _useState[1];

  var _useState2 = useState(function () {
    return title;
  }),
      innerTitle = _useState2[0],
      setInnerTitle = _useState2[1];

  var innerTitleRef = useRef('');
  innerTitleRef.current = innerTitle;
  compositingRef.current = compositing;
  var enableBorderHighlight = controller.query('enableBorderHighlight');

  var _useHover = useHover(enableBorderHighlight),
      isHover = _useHover[0],
      hoverHandlers = _useHover[1];

  useEffect(function () {
    if (!compositing) {
      setInnerTitle(title);
    }
  }, [compositing, title]);
  useEffect(function () {
    var _inputRef$current;

    // 每次展开，自动 focus 到 input
    (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();
  }, []);
  var handleInputChange = useCallback(function (e) {
    var value = e.target.value;
    setInnerTitle(value); // 处理普通输入

    if (!compositingRef.current) {
      controller.dispatch('setTemplateButton', {
        key: nodeKey,
        data: {
          title: value
        }
      });
    }
  }, [controller, nodeKey]);
  var handleCompositionStart = useCallback(function () {
    setCompositing(true);
  }, []);
  var handleCompositionEnd = useCallback(function () {
    setCompositing(false); // 输入法输入

    controller.dispatch('setTemplateButton', {
      key: nodeKey,
      data: {
        title: innerTitleRef.current
      }
    });
  }, [controller, nodeKey]);
  var handleDirectionChange = useCallback(function (value) {
    controller.dispatch('setTemplateButton', {
      key: nodeKey,
      data: {
        direction: value
      }
    });
  }, [controller, nodeKey]);
  var handleIsOnceChange = useCallback(function (value) {
    controller.dispatch('setTemplateButton', {
      key: nodeKey,
      data: {
        isOnce: value
      }
    });
  }, [controller, nodeKey]);
  var handleOnSave = useCallback(function () {
    controller.dispatch('toggleTemplateButton', {
      key: nodeKey
    });
  }, [controller, nodeKey]);
  return /*#__PURE__*/_createElement(ViewWrapper, _extends({
    "data-testid": "templateButton-openView",
    isHover: isHover,
    isActive: isSelected
  }, hoverHandlers, {
    "data-hover-box": "borderBox"
  }), /*#__PURE__*/_createElement(TemplateButton, {
    editTooltip: locale == null ? void 0 : locale.editTooltip,
    direction: ((_enable$direction = enable == null ? void 0 : enable.direction) != null ? _enable$direction : true) ? direction : null,
    isOpen: isOpen,
    title: title || placeholder,
    controller: controller,
    nodeKey: nodeKey,
    editable: editable
  }), /*#__PURE__*/_createElement(OpenViewContainer, null, /*#__PURE__*/_createElement(OpenViewContent, null, /*#__PURE__*/_createElement(OpenViewContentGroup, null, /*#__PURE__*/_createElement("h4", null, (locale == null ? void 0 : locale.nameTitle) || 'Template Name'), /*#__PURE__*/_createElement(TemplateInput, {
    ref: inputRef,
    value: innerTitle,
    placeholder: placeholder,
    onChange: handleInputChange,
    onCompositionStart: handleCompositionStart,
    onCompositionEnd: handleCompositionEnd,
    "data-cangjie-not-editable": true,
    type: "text",
    maxLength: 100
  })), /*#__PURE__*/_createElement(OpenViewContentGroup, null, /*#__PURE__*/_createElement("h4", null, (locale == null ? void 0 : locale.contentTile) || 'Template Content'), /*#__PURE__*/_createElement(TemplateInputArea, {
    "data-container-block": true
  }, child())), (enable == null ? void 0 : enable.direction) === false ? null : /*#__PURE__*/_createElement(OpenViewContentGroup, null, /*#__PURE__*/_createElement("h4", null, (locale == null ? void 0 : locale.direction) || 'Insert To'), /*#__PURE__*/_createElement(RadioGroup, {
    value: direction,
    onChange: handleDirectionChange
  }, /*#__PURE__*/_createElement(Radio, {
    value: "bottom"
  }, (locale == null ? void 0 : locale.insertBottom) || 'After'), /*#__PURE__*/_createElement(Radio, {
    value: "top"
  }, (locale == null ? void 0 : locale.insertTop) || 'Before'))), (enable == null ? void 0 : enable.isOnce) === false ? null : /*#__PURE__*/_createElement(OpenViewContentGroup, null, /*#__PURE__*/_createElement("h4", null, (locale == null ? void 0 : locale.insertOnce) || 'Disposable'), /*#__PURE__*/_createElement(Switch, {
    checked: isOnce,
    onChange: handleIsOnceChange
  }))), /*#__PURE__*/_createElement(OpenViewFooter, null, /*#__PURE__*/_createElement(Button, {
    type: "primary",
    onClick: handleOnSave,
    "data-testid": "templateButton-save"
  }, (locale == null ? void 0 : locale.save) || 'Save'))));
};

export default OpenView;
//# sourceMappingURL=openView.js.map