{"version":3,"sources":["../../../../src/utils/handlers/createGroupNodes.ts"],"names":["defaultIgnore","createGroupNodes","config","ignore","groupNodes","range","ctx","controller","next","start","parent","groups","first","nodes","second","parentGroup","length","inSameGrounp","$condition","listGroupConditions","find","when","until"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA,SAASA,aAAT,GAAyB;AACvB,SAAO,KAAP;AACD;;AAEc,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;AAC/C,QAAM;AAAEC,IAAAA,MAAM,GAAGH;AAAX,MAA6BE,MAAnC;AACA,SAAO,SAASE,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,EAAkD;AACvD,UAAM,CAACC,KAAD,IAAUJ,KAAhB;AACA,UAAM;AAAEK,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAqBL,GAA3B;AACA,UAAMM,KAAK,GAAGF,MAAM,CAACG,KAAP,CAAaJ,KAAb,CAAd;AACA,UAAMK,MAAM,GAAGJ,MAAM,CAACG,KAAP,CAAaJ,KAAK,GAAG,CAArB,CAAf;AACA,UAAMM,WAAW,GAAGJ,MAAM,CAACA,MAAM,CAACK,MAAP,GAAgB,CAAjB,CAA1B,CALuD,CAOvD;;AACA,QAAIb,MAAM,MAAM,CAACW,MAAjB,EAAyB;AACvB,aAAON,IAAI,EAAX;AACD;;AAED,UAAMS,YAAY,GAAG,4BAAgBF,WAAhB,EAA6BH,KAA7B,CAArB,CAZuD,CAcvD;;AACA,UAAMM,UAAU,GAAGD,YAAY,IAAIE,gCAAoBC,IAApB,CAAyB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACxE,aAAOA,IAAI,CAACT,KAAD,EAAQE,MAAR,CAAX;AACD,KAFkC,CAAnC,CAfuD,CAmBvD;;;AACA,QAAII,UAAJ,EAAgB;AACd,YAAM;AAAEI,QAAAA;AAAF,UAAYJ,UAAlB;AACA,aAAO,6BAAMb,KAAN,EAAaK,MAAb,EAAqB,MAArB,EAA6BY,KAA7B,CAAP;AACD;;AAED,WAAOd,IAAI,EAAX;AACD,GA1BD;AA2BD","sourcesContent":["import { listGroupConditions } from '../conditions';\nimport { groupHeading as group } from '@ali/4ever-utils';\nimport { isSameGroupFrom } from '../utils';\n\nfunction defaultIgnore() {\n  return false;\n}\n\nexport default function createGroupNodes(config) {\n  const { ignore = defaultIgnore } = config;\n  return function groupNodes(range, ctx, controller, next) {\n    const [start] = range;\n    const { parent, groups } = ctx;\n    const first = parent.nodes[start];\n    const second = parent.nodes[start + 1];\n    const parentGroup = groups[groups.length - 1];\n\n    // 如果是文档末尾，则不分组\n    if (ignore() || !second) {\n      return next();\n    }\n\n    const inSameGrounp = isSameGroupFrom(parentGroup, first);\n\n    // 查找可用的 group 条件\n    const $condition = inSameGrounp && listGroupConditions.find(({ when }) => {\n      return when(first, second);\n    });\n\n    // group 节点\n    if ($condition) {\n      const { until } = $condition;\n      return group(range, parent, 'list', until);\n    }\n\n    return next();\n  };\n}\n"],"file":"createGroupNodes.js"}