"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isListGroupAvailable = isListGroupAvailable;
exports.isFoldGroupNode = isFoldGroupNode;
exports.isInListGroup = isInListGroup;
exports.isFirstFoldNode = isFirstFoldNode;
exports.isNormalGroupNode = isNormalGroupNode;
exports.isSameGroupFrom = isSameGroupFrom;
exports.isList = void 0;

var _constants = require("../constants");

const isList = node => !!node?.data?.list;
/**
 * 判断当前列表是否开启折叠模式
 * @param
 */


exports.isList = isList;

function isListGroupAvailable(controller) {
  return controller?.query('isListGroupAvailable');
}
/**
 * 判断是否为 listGroup 中的折叠节点
 * @param
 */


function isFoldGroupNode(node, controller) {
  if (!isList(node)) {
    return false;
  } // 列表未开启折叠模式


  if (!isListGroupAvailable(controller)) {
    return false;
  }

  const {
    document
  } = controller.value;
  const {
    level
  } = node.data.list;
  const nextNode = document.getNextBlock(node.key);
  const nextLevel = nextNode?.data?.list?.level;
  return nextLevel > level;
}
/**
 * 判断节点是否在 listGroup 中
 * @param
 */


function isInListGroup(node, controller) {
  if (!isList(node) || !controller) {
    return false;
  }

  const {
    document
  } = controller.value;
  const {
    level
  } = node.data.list;

  if (!isListGroupAvailable(controller)) {
    return false;
  }

  if (isFoldGroupNode(node, controller)) {
    return true;
  }

  let previousNode = document.getPreviousBlock(node.key);

  while (previousNode && isList(previousNode)) {
    const prevLevel = previousNode?.data.list.level;

    if (prevLevel < level) {
      return true;
    }

    previousNode = document.getPreviousBlock(previousNode?.key);
  }

  return false;
}
/**
 * 判断是否为 嵌套的 listGroup 中第一个折叠节点
 */


function isFirstFoldNode(node, controller) {
  if (!isFoldGroupNode(node, controller)) {
    return false;
  }

  const {
    document
  } = controller.value;
  const {
    level
  } = node.data.list;
  let previousNode = document.getPreviousBlock(node.key);

  while (previousNode && isList(previousNode)) {
    const prevLevel = previousNode?.data.list.level;

    if (prevLevel < level) {
      return false;
    }

    previousNode = document.getPreviousBlock(previousNode?.key);
  }

  return true;
}
/**
 * 判断是否为 listGroup 中的普通节点
 * @param
 */


function isNormalGroupNode(node, controller) {
  return isList(node) && !isFoldGroupNode(node, controller);
}

function isSameGroupFrom(group, node) {
  return !(group?.type === _constants.LIST_GROUP_TYPE && group?.data?.list?.level >= node?.data?.list?.level);
}
//# sourceMappingURL=isInListGroup.js.map