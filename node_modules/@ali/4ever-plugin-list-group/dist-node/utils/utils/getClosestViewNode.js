"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNextViewGroupNode = getNextViewGroupNode;
exports.getPreviousViewGroupNode = getPreviousViewGroupNode;

var _isInListGroup = require("./isInListGroup");

/**
 * 获取下一个可视节点
 *
 * 场景一：折叠列表 aaa 对应的 nextViewGroupNode 就是 列表 ddd
 *  >1. aaa
 *   2. ddd
 *
 * 场景二：列表 aaa 对应的 nextViewGroupNode 就是 段落 ddd
 *   1. aaa
 *   |  a. bbb
 *   |  b. ccc
 *   ddd
 */
function getNextViewGroupNode(node, controller) {
  const {
    document
  } = controller.value;
  const {
    level
  } = node.data.list;
  const parent = document.getParent(node.key);

  if (!parent || !(0, _isInListGroup.isList)(node)) {
    return null;
  }

  let nextNode = parent.getNextBlock(node.key);

  while (nextNode && (0, _isInListGroup.isList)(nextNode)) {
    const nextLevel = nextNode.data.list.level;

    if (nextLevel <= level) {
      return nextNode;
    }

    nextNode = parent.getNextBlock(nextNode.key);
  }

  return nextNode;
}
/**
 * 获取上一个可视节点
 *
 * 场景一：列表 ddd 对应的 previousViewGroupNode 就是 列表 ccc
 *   1. aaa
 *   |  a. bbb
 *   |    i. ccc
 *   2. ddd
 *
 * 场景二：段落 ddd 对应的 previousViewGroupNode 就是 列表 bbb
 *   1. aaa
 *   | >a. bbb
 *   ddd
 *
 * 场景三：段落 ddd 对应的 previousViewGroupNode 就是 列表 aaa
 *  >1. aaa
 *   ddd
 */


function getPreviousViewGroupNode(node, controller) {
  const {
    document
  } = controller.value;
  const parent = document.getParent(node.key);

  if (!parent) {
    return null;
  }

  let previousNode = parent.getPreviousBlock(node.key);
  let previousViewNode = previousNode;

  while (previousNode && (0, _isInListGroup.isList)(previousNode)) {
    const prevLevel = previousNode.data.list.level;

    if (prevLevel <= 0) {
      return previousViewNode;
    }

    previousNode = parent.getPreviousBlock(previousNode.key);

    if (previousNode && (0, _isInListGroup.isFoldGroupNode)(previousNode, controller)) {
      const viewLevel = previousViewNode?.data.list?.level;
      const prevLevel = previousNode?.data.list?.level;
      const fold = controller.userData.get(previousNode, 'fold');

      if (fold && viewLevel > prevLevel) {
        previousViewNode = previousNode;
      }
    }
  }

  if (!previousNode || !(0, _isInListGroup.isList)(previousViewNode)) {
    return null;
  }

  return previousViewNode;
}
//# sourceMappingURL=getClosestViewNode.js.map