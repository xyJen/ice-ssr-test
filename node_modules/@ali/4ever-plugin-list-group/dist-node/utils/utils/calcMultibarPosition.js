"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calcMultibarPosition = calcMultibarPosition;
exports.calcFoldBoxPosition = calcFoldBoxPosition;
exports.calcBackgroundWidth = calcBackgroundWidth;

var _everUtils = require("@ali/4ever-utils");

var _everPluginList = require("@ali/4ever-plugin-list");

const {
  DEFAULT_SHD_STYLES
} = _everUtils.theme;
const SHD_PADDING_LEFT = DEFAULT_SHD_STYLES.paddingLeft;
const BORDER_LEFT = 4;
const PUNCTUATIONS = ['.', '、'];

const calcShdPadding = () => {
  const {
    paddingLeft = 0,
    paddingRight = 0,
    marginLeft = 0,
    marginRight = 0
  } = DEFAULT_SHD_STYLES;
  return paddingLeft + paddingRight;
};
/**
 * 计算列表连接线位置
 * @param node 折叠节点
 * @returns left 列表与左侧距离, symbolWidth 符号宽度
 */


function calcMultibarPosition(node) {
  const {
    step,
    start = 1,
    list,
    ind,
    shd
  } = node.data;
  const {
    level,
    listStyle,
    isTaskList,
    isOrdered,
    listStyleType
  } = list;
  let paddingSpace = level * _everUtils.indent.size;

  if (ind) {
    const {
      firstLine = 0,
      left = 0
    } = _everUtils.IndUtil.fromBlock(node);

    paddingSpace += firstLine + left;
  }

  if (isTaskList) {
    return {
      left: paddingSpace,
      listSymbol: '',
      symbolWidth: _everPluginList.TASK_BOX_WIDTH
    };
  }

  const listSymbol = (0, _everPluginList.generateSymbol)(level, Number(start), step, isOrdered, listStyleType, listStyle);
  const symbolStyle = (0, _everPluginList.convertSymbolStyle)(list.symbolStyle, isOrdered);
  const symbolProcessed = PUNCTUATIONS.includes(listSymbol[listSymbol.length - 1]) ? listSymbol.slice(0, -1) : listSymbol;
  const symbolWidth = _everPluginList.STICKER_REG.test(listSymbol) ? (0, _everPluginList.getStickerSymbolWidth)(String(symbolStyle.fontSize)) : _everPluginList.TextMeasure.measureTextWidth(String(symbolProcessed), 'Arial', symbolStyle.fontSize || '11pt');

  if (!isOrdered) {
    paddingSpace -= _everPluginList.SYMBOL_MAGIC_OFFSET_X_MAP[listSymbol] || 0.5;
  }

  if (listStyle && _everPluginList.ROMAN_FORMAT.includes(listStyle.format)) {
    paddingSpace += _everPluginList.ROMAN_EXTRA_INDENT - (shd ? 0 : _everPluginList.SYMBOL_CONTENT_SPACING - 2) - symbolWidth + SHD_PADDING_LEFT * (shd ? -1 : 1);
  }

  ;
  return {
    left: paddingSpace,
    listSymbol,
    symbolWidth
  };
}
/**
 * 计算折叠按钮位置
 * @param
 * @param
 * @returns
 */


function calcFoldBoxPosition(node) {
  const {
    list,
    shd
  } = node.data;
  const {
    symbolWidth,
    left
  } = calcMultibarPosition(node);
  const foldBoxLeft = left - symbolWidth / 2 - 14 - (!_everPluginList.ROMAN_FORMAT.includes(list?.listStyle) && shd ? SHD_PADDING_LEFT * 2 : 0);
  return foldBoxLeft;
}
/**
 * 计算 list group 背景颜色宽度
 * @param
 * @param
 * @returns
 */


function calcBackgroundWidth(node, left, symbolWidth) {
  const {
    list,
    shd
  } = node.data;
  const SHAD_PADDING = calcShdPadding();

  if (_everPluginList.ROMAN_FORMAT.includes(list?.listStyle?.format)) {
    return `calc(100% - ${left + symbolWidth - _everPluginList.SYMBOL_CONTENT_SPACING * 2 - SHAD_PADDING - 2}px)`;
  } else if (shd) {
    return `calc(100% - ${left - SHD_PADDING_LEFT - SHAD_PADDING}px)`;
  }

  return `calc(100% - ${left}px)`;
}
//# sourceMappingURL=calcMultibarPosition.js.map