{"version":3,"sources":["../../../../src/utils/utils/calcMultibarPosition.ts"],"names":["DEFAULT_SHD_STYLES","theme","SHD_PADDING_LEFT","paddingLeft","BORDER_LEFT","PUNCTUATIONS","calcShdPadding","paddingRight","marginLeft","marginRight","calcMultibarPosition","node","step","start","list","ind","shd","data","level","listStyle","isTaskList","isOrdered","listStyleType","paddingSpace","indent","size","firstLine","left","IndUtil","fromBlock","listSymbol","symbolWidth","TASK_BOX_WIDTH","Number","symbolStyle","symbolProcessed","includes","length","slice","STICKER_REG","test","String","fontSize","TextMeasure","measureTextWidth","SYMBOL_MAGIC_OFFSET_X_MAP","ROMAN_FORMAT","format","ROMAN_EXTRA_INDENT","SYMBOL_CONTENT_SPACING","calcFoldBoxPosition","foldBoxLeft","calcBackgroundWidth","SHAD_PADDING"],"mappings":"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","sourcesContent":["import { Block } from '@ali/4ever-cangjie';\nimport { theme, IndUtil, indent } from '@ali/4ever-utils';\nimport { \n  TASK_BOX_WIDTH,\n  STICKER_REG,\n  SYMBOL_CONTENT_SPACING,\n  ROMAN_EXTRA_INDENT,\n  SYMBOL_MAGIC_OFFSET_X_MAP,\n  ROMAN_FORMAT,\n  TextMeasure,\n  convertSymbolStyle,\n  generateSymbol,\n  getStickerSymbolWidth,\n } from '@ali/4ever-plugin-list';\n\nconst { DEFAULT_SHD_STYLES } = theme;\n\nconst SHD_PADDING_LEFT = DEFAULT_SHD_STYLES.paddingLeft as number;\nconst BORDER_LEFT = 4;\nconst PUNCTUATIONS = ['.', '、'];\n\nconst calcShdPadding = () => {\n  const {\n    paddingLeft = 0,\n    paddingRight = 0,\n    marginLeft = 0,\n    marginRight = 0,\n  } = DEFAULT_SHD_STYLES;\n  return paddingLeft + paddingRight;\n};\n\n/**\n * 计算列表连接线位置\n * @param node 折叠节点\n * @returns left 列表与左侧距离, symbolWidth 符号宽度\n */\nexport function calcMultibarPosition(\n  node: Block,\n): {\n    left: number;\n    listSymbol: string;\n    symbolWidth: number;\n  } {\n  const { step, start = 1, list, ind, shd } = node.data;\n  const { level, listStyle, isTaskList, isOrdered, listStyleType } = list;\n  let paddingSpace = level * indent.size;\n\n  if (ind) {\n    const { firstLine = 0, left = 0 } = IndUtil.fromBlock(node);\n    paddingSpace += firstLine + left;\n  }\n\n  if (isTaskList) {\n    return {\n      left: paddingSpace,\n      listSymbol: '',\n      symbolWidth: TASK_BOX_WIDTH,\n    };\n  }\n\n  const listSymbol = generateSymbol(\n    level,\n    Number(start),\n    step,\n    isOrdered,\n    listStyleType,\n    listStyle,\n  );\n  const symbolStyle = convertSymbolStyle(list.symbolStyle, isOrdered);\n  const symbolProcessed = PUNCTUATIONS.includes(\n    listSymbol[listSymbol.length - 1],\n  )\n    ? listSymbol.slice(0, -1)\n    : listSymbol;\n  const symbolWidth = STICKER_REG.test(listSymbol)\n    ? getStickerSymbolWidth(String(symbolStyle.fontSize))\n    : TextMeasure.measureTextWidth(\n      String(symbolProcessed),\n      'Arial',\n      (symbolStyle.fontSize as string) || '11pt',\n    );\n\n  if (!isOrdered) {\n    paddingSpace -= SYMBOL_MAGIC_OFFSET_X_MAP[listSymbol] || 0.5;\n  }\n\n  if (listStyle && ROMAN_FORMAT.includes(listStyle.format)) {\n    paddingSpace +=\n      ROMAN_EXTRA_INDENT -\n      (shd ? 0 : (SYMBOL_CONTENT_SPACING - 2)) -\n      symbolWidth +\n      SHD_PADDING_LEFT * (shd ? -1 : 1);\n  };\n\n  return {\n    left: paddingSpace,\n    listSymbol,\n    symbolWidth,\n  };\n}\n\n/**\n * 计算折叠按钮位置\n * @param\n * @param\n * @returns\n */\nexport function calcFoldBoxPosition(node: Block): number {\n  const { list, shd } = node.data;\n  const { symbolWidth, left } = calcMultibarPosition(node);\n  const foldBoxLeft =\n    left -\n    symbolWidth / 2 -\n    14 -\n    (!ROMAN_FORMAT.includes(list?.listStyle) && shd ? SHD_PADDING_LEFT * 2 : 0);\n  return foldBoxLeft;\n}\n\n/**\n * 计算 list group 背景颜色宽度\n * @param\n * @param\n * @returns\n */\nexport function calcBackgroundWidth(\n  node: Block,\n  left: number,\n  symbolWidth: number,\n): string {\n  const { list, shd } = node.data;\n  const SHAD_PADDING = calcShdPadding();\n  if (ROMAN_FORMAT.includes(list?.listStyle?.format)) {\n    return `calc(100% - ${\n      left + symbolWidth - SYMBOL_CONTENT_SPACING * 2 - SHAD_PADDING - 2\n    }px)`;\n  } else if (shd) {\n    return `calc(100% - ${left - SHD_PADDING_LEFT - SHAD_PADDING}px)`;\n  }\n  return `calc(100% - ${left}px)`;\n}\n"],"file":"calcMultibarPosition.js"}