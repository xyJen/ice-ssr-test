{"version":3,"sources":["../../../src/utils/conditions.ts"],"names":["getOffsetLeft","node","left","firstLine","data","ind","level","list","indent","size","listGroupConditions","when","nextNode","Heading","isHeading","blockquote","calloutPr","until","lastFoldNode","currentList","lastFoldList"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AAEA,MAAMA,aAAa,GAAIC,IAAD,IAAyB;AAC7C,QAAM;AAAEC,IAAAA,IAAI,GAAG,CAAT;AAAYC,IAAAA,SAAS,GAAG;AAAxB,MAA8BF,IAAI,CAACG,IAAL,EAAWC,GAAX,IAAkB,EAAtD;AACA,QAAM;AAAEC,IAAAA,KAAK,GAAG;AAAV,MAAgBL,IAAI,CAACG,IAAL,CAAUG,IAAhC;AACA,SAAOL,IAAI,GAAGC,SAAP,GAAmBG,KAAK,GAAGE,kBAAOC,IAAzC;AACD,CAJD;;AAMO,MAAMC,mBASX,GAAG,CACH;AACEC,EAAAA,IAAI,EAAE,CAACV,IAAD,EAAcW,QAAd,KAAkC;AACtC,QAAI,CAAC,mBAAOX,IAAP,CAAD,IAAiB,CAAC,mBAAOW,QAAP,CAAtB,EAAwC;AACtC,aAAO,KAAP;AACD,KAHqC,CAItC;;;AACA,QAAIC,2BAAQC,SAAR,CAAkBb,IAAlB,CAAJ,EAA6B;AAC3B,aAAO,KAAP;AACD;;AACD,QAAIA,IAAI,CAACG,IAAL,CAAUW,UAAd,EAA0B;AACxB,aAAO,KAAP;AACD,KAVqC,CAYtC;;;AACA,QAAId,IAAI,CAACG,IAAL,CAAUY,SAAd,EAAyB;AACvB,aAAO,KAAP;AACD,KAfqC,CAgBtC;;;AACA,QAAIhB,aAAa,CAACC,IAAD,CAAb,IAAuBD,aAAa,CAACY,QAAD,CAAxC,EAAoD;AAClD,aAAO,KAAP;AACD;;AACD,WAAQA,QAAQ,CAACR,IAAT,CAAcG,IAAd,CAAmBD,KAAnB,GAA2BL,IAAI,CAACG,IAAL,CAAUG,IAAV,CAAeD,KAAlD;AACD,GAtBH;AAuBEW,EAAAA,KAAK,EAAE,CAAChB,IAAD,EAAciB,YAAd,KAAsC;AAC3C,QAAI,CAAC,mBAAOjB,IAAP,CAAL,EAAmB;AACjB,aAAO,IAAP;AACD,KAH0C,CAI3C;;;AACA,QAAID,aAAa,CAACC,IAAD,CAAb,IAAuBD,aAAa,CAACkB,YAAD,CAAxC,EAAwD;AACtD,aAAO,IAAP;AACD;;AACD,UAAM;AAAEX,MAAAA,IAAI,EAAEY;AAAR,QAAwBlB,IAAI,CAACG,IAAnC;AACA,UAAM;AAAEG,MAAAA,IAAI,EAAEa;AAAR,QAAyBF,YAAY,CAACd,IAA5C;AACA,WAAOe,WAAW,CAACb,KAAZ,IAAqBc,YAAY,CAACd,KAAzC;AACD;AAlCH,CADG,CATE","sourcesContent":["import { Block } from '@ali/4ever-cangjie';\nimport { Heading } from '@ali/4ever-plugin-heading';\nimport { indent } from '@ali/4ever-utils';\n\nimport { isList } from './utils';\n\nconst getOffsetLeft = (node: Block): number => {\n  const { left = 0, firstLine = 0 } = node.data?.ind || {};\n  const { level = 0 } = node.data.list;\n  return left + firstLine + level * indent.size;\n}\n\nexport const listGroupConditions: Array<{\n  /**\n   * 聚合列表\n   */\n  when: (node: any, nextNode: any) => boolean;\n  /**\n   * 聚合截止\n   */\n  until: (node: any, lastFoldNode: Block) => boolean;\n}> = [\n  {\n    when: (node: Block, nextNode: Block) => {\n      if (!isList(node) || !isList(nextNode)) {\n        return false;\n      }\n      // 标题类型列表不使用连接线\n      if (Heading.isHeading(node)) {\n        return false;\n      }\n      if (node.data.blockquote) {\n        return false;\n      }\n      \n      // 旧高亮块嵌套列表，可能会出现死循环\n      if (node.data.calloutPr) {\n        return false;\n      }\n      // 列表有 ind 值, 需要子项的左边距大于折叠点的左边距，防止与连接线重叠\n      if (getOffsetLeft(node) >= getOffsetLeft(nextNode)) {\n        return false;\n      }\n      return (nextNode.data.list.level > node.data.list.level);\n    },\n    until: (node: Block, lastFoldNode: Block) => {\n      if (!isList(node)) {\n        return true;\n      }\n      // 列表有 ind 值, 项的左边距小于折叠点的左边距时，防止重叠，结束折叠规则\n      if (getOffsetLeft(node) <= getOffsetLeft(lastFoldNode)) {\n        return true;\n      }\n      const { list: currentList } = node.data;\n      const { list: lastFoldList } = lastFoldNode.data;\n      return currentList.level <= lastFoldList.level;\n    },\n  },\n];\n"],"file":"conditions.js"}