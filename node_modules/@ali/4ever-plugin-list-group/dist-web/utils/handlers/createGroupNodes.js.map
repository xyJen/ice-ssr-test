{"version":3,"sources":["../../../../src/utils/handlers/createGroupNodes.ts"],"names":["listGroupConditions","groupHeading","group","isSameGroupFrom","defaultIgnore","createGroupNodes","config","ignore","groupNodes","range","ctx","controller","next","start","parent","groups","first","nodes","second","parentGroup","length","inSameGrounp","$condition","find","when","until"],"mappings":"AAAA,SAASA,mBAAT;AACA,SAASC,YAAY,IAAIC,KAAzB,QAAsC,kBAAtC;AACA,SAASC,eAAT;;AAEA,SAASC,aAAT,GAAyB;AACvB,SAAO,KAAP;AACD;;AAED,eAAe,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;AAAA,uBACZA,MADY,CACvCC,MADuC;AAAA,MACvCA,MADuC,+BAC9BH,aAD8B;AAE/C,SAAO,SAASI,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,EAAkD;AAAA,QAChDC,KADgD,GACvCJ,KADuC;AAAA,QAE/CK,MAF+C,GAE5BJ,GAF4B,CAE/CI,MAF+C;AAAA,QAEvCC,MAFuC,GAE5BL,GAF4B,CAEvCK,MAFuC;AAGvD,QAAMC,KAAK,GAAGF,MAAM,CAACG,KAAP,CAAaJ,KAAb,CAAd;AACA,QAAMK,MAAM,GAAGJ,MAAM,CAACG,KAAP,CAAaJ,KAAK,GAAG,CAArB,CAAf;AACA,QAAMM,WAAW,GAAGJ,MAAM,CAACA,MAAM,CAACK,MAAP,GAAgB,CAAjB,CAA1B,CALuD,CAOvD;;AACA,QAAIb,MAAM,MAAM,CAACW,MAAjB,EAAyB;AACvB,aAAON,IAAI,EAAX;AACD;;AAED,QAAMS,YAAY,GAAGlB,eAAe,CAACgB,WAAD,EAAcH,KAAd,CAApC,CAZuD,CAcvD;;AACA,QAAMM,UAAU,GAAGD,YAAY,IAAIrB,mBAAmB,CAACuB,IAApB,CAAyB,gBAAc;AAAA,UAAXC,IAAW,QAAXA,IAAW;AACxE,aAAOA,IAAI,CAACR,KAAD,EAAQE,MAAR,CAAX;AACD,KAFkC,CAAnC,CAfuD,CAmBvD;;AACA,QAAII,UAAJ,EAAgB;AAAA,UACNG,KADM,GACIH,UADJ,CACNG,KADM;AAEd,aAAOvB,KAAK,CAACO,KAAD,EAAQK,MAAR,EAAgB,MAAhB,EAAwBW,KAAxB,CAAZ;AACD;;AAED,WAAOb,IAAI,EAAX;AACD,GA1BD;AA2BD","sourcesContent":["import { listGroupConditions } from '../conditions';\nimport { groupHeading as group } from '@ali/4ever-utils';\nimport { isSameGroupFrom } from '../utils';\n\nfunction defaultIgnore() {\n  return false;\n}\n\nexport default function createGroupNodes(config) {\n  const { ignore = defaultIgnore } = config;\n  return function groupNodes(range, ctx, controller, next) {\n    const [start] = range;\n    const { parent, groups } = ctx;\n    const first = parent.nodes[start];\n    const second = parent.nodes[start + 1];\n    const parentGroup = groups[groups.length - 1];\n\n    // 如果是文档末尾，则不分组\n    if (ignore() || !second) {\n      return next();\n    }\n\n    const inSameGrounp = isSameGroupFrom(parentGroup, first);\n\n    // 查找可用的 group 条件\n    const $condition = inSameGrounp && listGroupConditions.find(({ when }) => {\n      return when(first, second);\n    });\n\n    // group 节点\n    if ($condition) {\n      const { until } = $condition;\n      return group(range, parent, 'list', until);\n    }\n\n    return next();\n  };\n}\n"],"file":"createGroupNodes.js"}