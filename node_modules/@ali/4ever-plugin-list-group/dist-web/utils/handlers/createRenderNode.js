import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ShdUtil } from '@ali/4ever-utils';
import { Group } from '@ali/4ever-plugin-group-factory';
import GroupBackground from "../components/groupBackground";
import Multibar from "../components/multibar";
import { calcMultibarPosition, calcFoldBoxPosition, calcBackgroundWidth, getAttributes } from "../utils";
import { LIST_GROUP_TYPE } from "../constants";
import { ListGroupRole } from "../role";

var renderBackground = function renderBackground(width, backgroundColor) {
  return backgroundColor ? /*#__PURE__*/_createElement(GroupBackground, {
    width: width,
    backgroundColor: backgroundColor
  }) : null;
};

function createRenderNode(config) {
  var _ref;

  return _ref = {}, _ref[LIST_GROUP_TYPE] = function (props, controller) {
    var attributes = props.attributes,
        isSelected = props.isSelected,
        children = props.children,
        visible = props.visible;
    var node = props.node;
    var shd = node.data.shd;

    var _calcMultibarPosition = calcMultibarPosition(node),
        symbolWidth = _calcMultibarPosition.symbolWidth,
        left = _calcMultibarPosition.left;

    var foldBoxLeft = calcFoldBoxPosition(node);
    var backgroundColor = ShdUtil.transformShd(shd);
    var backgroundWidth = calcBackgroundWidth(node, left, symbolWidth);
    var attrs = getAttributes(attributes, node, controller);
    return /*#__PURE__*/_createElement(Group, {
      node: node,
      attributes: attrs,
      controller: controller,
      isSelected: isSelected,
      renderExtra: /*#__PURE__*/_createElement(Multibar, {
        node: node
      }),
      renderBackground: renderBackground(backgroundWidth, backgroundColor),
      foldBoxLeft: foldBoxLeft,
      role: ListGroupRole.listGroup,
      visible: visible
    }, children());
  }, _ref;
}

export default createRenderNode;
//# sourceMappingURL=createRenderNode.js.map