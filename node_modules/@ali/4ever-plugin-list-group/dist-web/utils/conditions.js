import { Heading } from '@ali/4ever-plugin-heading';
import { indent } from '@ali/4ever-utils';
import { isList } from "./utils";

var getOffsetLeft = function getOffsetLeft(node) {
  var _node$data;

  var _ref = ((_node$data = node.data) == null ? void 0 : _node$data.ind) || {},
      _ref$left = _ref.left,
      left = _ref$left === void 0 ? 0 : _ref$left,
      _ref$firstLine = _ref.firstLine,
      firstLine = _ref$firstLine === void 0 ? 0 : _ref$firstLine;

  var _node$data$list$level = node.data.list.level,
      level = _node$data$list$level === void 0 ? 0 : _node$data$list$level;
  return left + firstLine + level * indent.size;
};

export var listGroupConditions = [{
  when: function when(node, nextNode) {
    if (!isList(node) || !isList(nextNode)) {
      return false;
    } // 标题类型列表不使用连接线


    if (Heading.isHeading(node)) {
      return false;
    }

    if (node.data.blockquote) {
      return false;
    } // 旧高亮块嵌套列表，可能会出现死循环


    if (node.data.calloutPr) {
      return false;
    } // 列表有 ind 值, 需要子项的左边距大于折叠点的左边距，防止与连接线重叠


    if (getOffsetLeft(node) >= getOffsetLeft(nextNode)) {
      return false;
    }

    return nextNode.data.list.level > node.data.list.level;
  },
  until: function until(node, lastFoldNode) {
    if (!isList(node)) {
      return true;
    } // 列表有 ind 值, 项的左边距小于折叠点的左边距时，防止重叠，结束折叠规则


    if (getOffsetLeft(node) <= getOffsetLeft(lastFoldNode)) {
      return true;
    }

    var currentList = node.data.list;
    var lastFoldList = lastFoldNode.data.list;
    return currentList.level <= lastFoldList.level;
  }
}];
//# sourceMappingURL=conditions.js.map