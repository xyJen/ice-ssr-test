import { LIST_GROUP_TYPE } from "../constants";
export var isList = function isList(node) {
  var _node$data;

  return !!(node != null && (_node$data = node.data) != null && _node$data.list);
};
/**
 * 判断当前列表是否开启折叠模式
 * @param
 */

export function isListGroupAvailable(controller) {
  return controller == null ? void 0 : controller.query('isListGroupAvailable');
}
/**
 * 判断是否为 listGroup 中的折叠节点
 * @param
 */

export function isFoldGroupNode(node, controller) {
  var _nextNode$data, _nextNode$data$list;

  if (!isList(node)) {
    return false;
  } // 列表未开启折叠模式


  if (!isListGroupAvailable(controller)) {
    return false;
  }

  var document = controller.value.document;
  var level = node.data.list.level;
  var nextNode = document.getNextBlock(node.key);
  var nextLevel = nextNode == null ? void 0 : (_nextNode$data = nextNode.data) == null ? void 0 : (_nextNode$data$list = _nextNode$data.list) == null ? void 0 : _nextNode$data$list.level;
  return nextLevel > level;
}
/**
 * 判断节点是否在 listGroup 中
 * @param
 */

export function isInListGroup(node, controller) {
  if (!isList(node) || !controller) {
    return false;
  }

  var document = controller.value.document;
  var level = node.data.list.level;

  if (!isListGroupAvailable(controller)) {
    return false;
  }

  if (isFoldGroupNode(node, controller)) {
    return true;
  }

  var previousNode = document.getPreviousBlock(node.key);

  while (previousNode && isList(previousNode)) {
    var _previousNode, _previousNode2;

    var prevLevel = (_previousNode = previousNode) == null ? void 0 : _previousNode.data.list.level;

    if (prevLevel < level) {
      return true;
    }

    previousNode = document.getPreviousBlock((_previousNode2 = previousNode) == null ? void 0 : _previousNode2.key);
  }

  return false;
}
/**
 * 判断是否为 嵌套的 listGroup 中第一个折叠节点
 */

export function isFirstFoldNode(node, controller) {
  if (!isFoldGroupNode(node, controller)) {
    return false;
  }

  var document = controller.value.document;
  var level = node.data.list.level;
  var previousNode = document.getPreviousBlock(node.key);

  while (previousNode && isList(previousNode)) {
    var _previousNode3, _previousNode4;

    var prevLevel = (_previousNode3 = previousNode) == null ? void 0 : _previousNode3.data.list.level;

    if (prevLevel < level) {
      return false;
    }

    previousNode = document.getPreviousBlock((_previousNode4 = previousNode) == null ? void 0 : _previousNode4.key);
  }

  return true;
}
/**
 * 判断是否为 listGroup 中的普通节点
 * @param
 */

export function isNormalGroupNode(node, controller) {
  return isList(node) && !isFoldGroupNode(node, controller);
}
export function isSameGroupFrom(group, node) {
  var _group$data, _group$data$list, _node$data2, _node$data2$list;

  return !((group == null ? void 0 : group.type) === LIST_GROUP_TYPE && (group == null ? void 0 : (_group$data = group.data) == null ? void 0 : (_group$data$list = _group$data.list) == null ? void 0 : _group$data$list.level) >= (node == null ? void 0 : (_node$data2 = node.data) == null ? void 0 : (_node$data2$list = _node$data2.list) == null ? void 0 : _node$data2$list.level));
}
//# sourceMappingURL=isInListGroup.js.map