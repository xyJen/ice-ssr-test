{"version":3,"sources":["../../../../src/utils/utils/isInListGroup.ts"],"names":["LIST_GROUP_TYPE","isList","node","data","list","isListGroupAvailable","controller","query","isFoldGroupNode","document","value","level","nextNode","getNextBlock","key","nextLevel","isInListGroup","previousNode","getPreviousBlock","prevLevel","isFirstFoldNode","isNormalGroupNode","isSameGroupFrom","group","type"],"mappings":"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","sourcesContent":["import { Block, Controller } from '@ali/4ever-cangjie';\nimport { LIST_GROUP_TYPE } from '../constants';\n\nexport const isList = (node: Block) => !!node?.data?.list;\n\n/**\n * 判断当前列表是否开启折叠模式\n * @param\n */\nexport function isListGroupAvailable(controller: Controller): boolean {\n  return controller?.query('isListGroupAvailable');\n}\n\n/**\n * 判断是否为 listGroup 中的折叠节点\n * @param\n */\nexport function isFoldGroupNode(\n  node: Block,\n  controller: Controller,\n) {\n  if (!isList(node)) {\n    return false;\n  }\n  // 列表未开启折叠模式\n  if (!isListGroupAvailable(controller)) {\n    return false;\n  }\n  const { document } = controller.value;\n  const { level } = node.data.list;\n  const nextNode = document.getNextBlock(node.key);\n  const nextLevel = nextNode?.data?.list?.level;\n  return nextLevel > level;\n}\n\n/**\n * 判断节点是否在 listGroup 中\n * @param\n */\nexport function isInListGroup(\n  node: Block,\n  controller: Controller,\n): boolean {\n  if (!isList(node) || !controller) {\n    return false;\n  }\n  const { document } = controller.value;\n  const { level } = node.data.list;\n\n  if (!isListGroupAvailable(controller)) {\n    return false;\n  }\n  if (isFoldGroupNode(node, controller)) {\n    return true;\n  }\n  let previousNode = document.getPreviousBlock(node.key);\n\n  while (previousNode && isList(previousNode)) {\n    const prevLevel = previousNode?.data.list.level;\n    if (prevLevel < level) {\n      return true;\n    }\n    previousNode = document.getPreviousBlock(previousNode?.key);\n  }\n  return false;\n}\n\n/**\n * 判断是否为 嵌套的 listGroup 中第一个折叠节点\n */\nexport function isFirstFoldNode(node: Block, controller: Controller) {\n  if (!isFoldGroupNode(node, controller)) {\n    return false;\n  }\n  const { document } = controller.value;\n  const { level } = node.data.list;\n\n  let previousNode = document.getPreviousBlock(node.key);\n\n  while (previousNode && isList(previousNode)) {\n    const prevLevel = previousNode?.data.list.level;\n    if (prevLevel < level) {\n      return false;\n    }\n    previousNode = document.getPreviousBlock(previousNode?.key);\n  }\n  return true;\n}\n\n/**\n * 判断是否为 listGroup 中的普通节点\n * @param\n */\nexport function isNormalGroupNode(node: Block, controller: Controller) : boolean {\n  return isList(node) && !isFoldGroupNode(node, controller);\n}\n\n\nexport function isSameGroupFrom(group: Block, node: Block): node is Block {\n  return !(group?.type === LIST_GROUP_TYPE && (group?.data?.list?.level >= node?.data?.list?.level));\n}\n"],"file":"isInListGroup.js"}