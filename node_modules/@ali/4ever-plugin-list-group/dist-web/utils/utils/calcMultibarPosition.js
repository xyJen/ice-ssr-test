import { theme, IndUtil, indent } from '@ali/4ever-utils';
import { TASK_BOX_WIDTH, STICKER_REG, SYMBOL_CONTENT_SPACING, ROMAN_EXTRA_INDENT, SYMBOL_MAGIC_OFFSET_X_MAP, ROMAN_FORMAT, TextMeasure, convertSymbolStyle, generateSymbol, getStickerSymbolWidth } from '@ali/4ever-plugin-list';
var DEFAULT_SHD_STYLES = theme.DEFAULT_SHD_STYLES;
var SHD_PADDING_LEFT = DEFAULT_SHD_STYLES.paddingLeft;
var BORDER_LEFT = 4;
var PUNCTUATIONS = ['.', '、'];

var calcShdPadding = function calcShdPadding() {
  var _DEFAULT_SHD_STYLES$p = DEFAULT_SHD_STYLES.paddingLeft,
      paddingLeft = _DEFAULT_SHD_STYLES$p === void 0 ? 0 : _DEFAULT_SHD_STYLES$p,
      _DEFAULT_SHD_STYLES$p2 = DEFAULT_SHD_STYLES.paddingRight,
      paddingRight = _DEFAULT_SHD_STYLES$p2 === void 0 ? 0 : _DEFAULT_SHD_STYLES$p2,
      _DEFAULT_SHD_STYLES$m = DEFAULT_SHD_STYLES.marginLeft,
      marginLeft = _DEFAULT_SHD_STYLES$m === void 0 ? 0 : _DEFAULT_SHD_STYLES$m,
      _DEFAULT_SHD_STYLES$m2 = DEFAULT_SHD_STYLES.marginRight,
      marginRight = _DEFAULT_SHD_STYLES$m2 === void 0 ? 0 : _DEFAULT_SHD_STYLES$m2;
  return paddingLeft + paddingRight;
};
/**
 * 计算列表连接线位置
 * @param node 折叠节点
 * @returns left 列表与左侧距离, symbolWidth 符号宽度
 */


export function calcMultibarPosition(node) {
  var _node$data = node.data,
      step = _node$data.step,
      _node$data$start = _node$data.start,
      start = _node$data$start === void 0 ? 1 : _node$data$start,
      list = _node$data.list,
      ind = _node$data.ind,
      shd = _node$data.shd;
  var level = list.level,
      listStyle = list.listStyle,
      isTaskList = list.isTaskList,
      isOrdered = list.isOrdered,
      listStyleType = list.listStyleType;
  var paddingSpace = level * indent.size;

  if (ind) {
    var _IndUtil$fromBlock = IndUtil.fromBlock(node),
        _IndUtil$fromBlock$fi = _IndUtil$fromBlock.firstLine,
        firstLine = _IndUtil$fromBlock$fi === void 0 ? 0 : _IndUtil$fromBlock$fi,
        _IndUtil$fromBlock$le = _IndUtil$fromBlock.left,
        left = _IndUtil$fromBlock$le === void 0 ? 0 : _IndUtil$fromBlock$le;

    paddingSpace += firstLine + left;
  }

  if (isTaskList) {
    return {
      left: paddingSpace,
      listSymbol: '',
      symbolWidth: TASK_BOX_WIDTH
    };
  }

  var listSymbol = generateSymbol(level, Number(start), step, isOrdered, listStyleType, listStyle);
  var symbolStyle = convertSymbolStyle(list.symbolStyle, isOrdered);
  var symbolProcessed = PUNCTUATIONS.includes(listSymbol[listSymbol.length - 1]) ? listSymbol.slice(0, -1) : listSymbol;
  var symbolWidth = STICKER_REG.test(listSymbol) ? getStickerSymbolWidth(String(symbolStyle.fontSize)) : TextMeasure.measureTextWidth(String(symbolProcessed), 'Arial', symbolStyle.fontSize || '11pt');

  if (!isOrdered) {
    paddingSpace -= SYMBOL_MAGIC_OFFSET_X_MAP[listSymbol] || 0.5;
  }

  if (listStyle && ROMAN_FORMAT.includes(listStyle.format)) {
    paddingSpace += ROMAN_EXTRA_INDENT - (shd ? 0 : SYMBOL_CONTENT_SPACING - 2) - symbolWidth + SHD_PADDING_LEFT * (shd ? -1 : 1);
  }

  ;
  return {
    left: paddingSpace,
    listSymbol: listSymbol,
    symbolWidth: symbolWidth
  };
}
/**
 * 计算折叠按钮位置
 * @param
 * @param
 * @returns
 */

export function calcFoldBoxPosition(node) {
  var _node$data2 = node.data,
      list = _node$data2.list,
      shd = _node$data2.shd;

  var _calcMultibarPosition = calcMultibarPosition(node),
      symbolWidth = _calcMultibarPosition.symbolWidth,
      left = _calcMultibarPosition.left;

  var foldBoxLeft = left - symbolWidth / 2 - 14 - (!ROMAN_FORMAT.includes(list == null ? void 0 : list.listStyle) && shd ? SHD_PADDING_LEFT * 2 : 0);
  return foldBoxLeft;
}
/**
 * 计算 list group 背景颜色宽度
 * @param
 * @param
 * @returns
 */

export function calcBackgroundWidth(node, left, symbolWidth) {
  var _list$listStyle;

  var _node$data3 = node.data,
      list = _node$data3.list,
      shd = _node$data3.shd;
  var SHAD_PADDING = calcShdPadding();

  if (ROMAN_FORMAT.includes(list == null ? void 0 : (_list$listStyle = list.listStyle) == null ? void 0 : _list$listStyle.format)) {
    return "calc(100% - " + (left + symbolWidth - SYMBOL_CONTENT_SPACING * 2 - SHAD_PADDING - 2) + "px)";
  } else if (shd) {
    return "calc(100% - " + (left - SHD_PADDING_LEFT - SHAD_PADDING) + "px)";
  }

  return "calc(100% - " + left + "px)";
}
//# sourceMappingURL=calcMultibarPosition.js.map