{"version":3,"sources":["../../../../src/utils/utils/getClosestViewNode.ts"],"names":["isList","isFoldGroupNode","getNextViewGroupNode","node","controller","document","value","level","data","list","parent","getParent","key","nextNode","getNextBlock","nextLevel","getPreviousViewGroupNode","previousNode","getPreviousBlock","previousViewNode","prevLevel","viewLevel","fold","userData","get"],"mappings":"AACA,SAASA,MAAT,EAAiBC,eAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAA2CC,UAA3C,EAAmE;AAAA,MAChEC,QADgE,GACnDD,UAAU,CAACE,KADwC,CAChED,QADgE;AAAA,MAEhEE,KAFgE,GAEtDJ,IAAI,CAACK,IAAL,CAAUC,IAF4C,CAEhEF,KAFgE;AAGxE,MAAMG,MAAM,GAAGL,QAAQ,CAACM,SAAT,CAAmBR,IAAI,CAACS,GAAxB,CAAf;;AACA,MAAI,CAACF,MAAD,IAAW,CAACV,MAAM,CAACG,IAAD,CAAtB,EAA8B;AAC5B,WAAO,IAAP;AACD;;AACD,MAAIU,QAAQ,GAAGH,MAAM,CAACI,YAAP,CAAoBX,IAAI,CAACS,GAAzB,CAAf;;AACA,SAAMC,QAAQ,IAAIb,MAAM,CAACa,QAAD,CAAxB,EAAoC;AAClC,QAAME,SAAS,GAAGF,QAAQ,CAACL,IAAT,CAAcC,IAAd,CAAmBF,KAArC;;AACA,QAAIQ,SAAS,IAAIR,KAAjB,EAAwB;AACtB,aAAOM,QAAP;AACD;;AACDA,IAAAA,QAAQ,GAAGH,MAAM,CAACI,YAAP,CAAoBD,QAAQ,CAACD,GAA7B,CAAX;AACD;;AACD,SAAOC,QAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,wBAAT,CAAkCb,IAAlC,EAA+CC,UAA/C,EAAuE;AAAA,MACpEC,QADoE,GACvDD,UAAU,CAACE,KAD4C,CACpED,QADoE;AAE5E,MAAMK,MAAM,GAAGL,QAAQ,CAACM,SAAT,CAAmBR,IAAI,CAACS,GAAxB,CAAf;;AACA,MAAI,CAACF,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AACD,MAAIO,YAAY,GAAGP,MAAM,CAACQ,gBAAP,CAAwBf,IAAI,CAACS,GAA7B,CAAnB;AACA,MAAIO,gBAAgB,GAAGF,YAAvB;;AACA,SAAMA,YAAY,IAAIjB,MAAM,CAACiB,YAAD,CAA5B,EAA4C;AAC1C,QAAMG,SAAS,GAAGH,YAAY,CAACT,IAAb,CAAkBC,IAAlB,CAAuBF,KAAzC;;AACA,QAAIa,SAAS,IAAI,CAAjB,EAAoB;AAClB,aAAOD,gBAAP;AACD;;AACDF,IAAAA,YAAY,GAAGP,MAAM,CAACQ,gBAAP,CAAwBD,YAAY,CAACL,GAArC,CAAf;;AACA,QAAIK,YAAY,IAAIhB,eAAe,CAACgB,YAAD,EAAeb,UAAf,CAAnC,EAA+D;AAAA;;AAC7D,UAAMiB,SAAS,wBAAGF,gBAAH,8CAAG,kBAAkBX,IAAlB,CAAuBC,IAA1B,qBAAG,sBAA6BF,KAA/C;;AACA,UAAMa,UAAS,oBAAGH,YAAH,8CAAG,cAAcT,IAAd,CAAmBC,IAAtB,qBAAG,sBAAyBF,KAA3C;;AACA,UAAMe,IAAI,GAAGlB,UAAU,CAACmB,QAAX,CAAoBC,GAApB,CAAwBP,YAAxB,EAAsC,MAAtC,CAAb;;AACA,UAAIK,IAAI,IAAID,SAAS,GAAGD,UAAxB,EAAmC;AACjCD,QAAAA,gBAAgB,GAAGF,YAAnB;AACD;AACF;AACF;;AACD,MAAI,CAACA,YAAD,IAAiB,CAACjB,MAAM,CAACmB,gBAAD,CAA5B,EAAiD;AAC/C,WAAO,IAAP;AACD;;AACD,SAAOA,gBAAP;AACD","sourcesContent":["import { Block, Controller } from \"@ali/4ever-cangjie\";\nimport { isList, isFoldGroupNode } from './isInListGroup';\n/**\n * 获取下一个可视节点\n *\n * 场景一：折叠列表 aaa 对应的 nextViewGroupNode 就是 列表 ddd\n *  >1. aaa\n *   2. ddd\n *\n * 场景二：列表 aaa 对应的 nextViewGroupNode 就是 段落 ddd\n *   1. aaa\n *   |  a. bbb\n *   |  b. ccc\n *   ddd\n */\nexport function getNextViewGroupNode(node: Block, controller: Controller) {\n  const { document } = controller.value;\n  const { level } = node.data.list;\n  const parent = document.getParent(node.key);\n  if (!parent || !isList(node)) {\n    return null;\n  }\n  let nextNode = parent.getNextBlock(node.key);\n  while(nextNode && isList(nextNode)) {\n    const nextLevel = nextNode.data.list.level;\n    if (nextLevel <= level) {\n      return nextNode;\n    }\n    nextNode = parent.getNextBlock(nextNode.key);\n  }\n  return nextNode;\n}\n/**\n * 获取上一个可视节点\n *\n * 场景一：列表 ddd 对应的 previousViewGroupNode 就是 列表 ccc\n *   1. aaa\n *   |  a. bbb\n *   |    i. ccc\n *   2. ddd\n *\n * 场景二：段落 ddd 对应的 previousViewGroupNode 就是 列表 bbb\n *   1. aaa\n *   | >a. bbb\n *   ddd\n *\n * 场景三：段落 ddd 对应的 previousViewGroupNode 就是 列表 aaa\n *  >1. aaa\n *   ddd\n */\nexport function getPreviousViewGroupNode(node: Block, controller: Controller) {\n  const { document } = controller.value;\n  const parent = document.getParent(node.key);\n  if (!parent) {\n    return null;\n  }\n  let previousNode = parent.getPreviousBlock(node.key);\n  let previousViewNode = previousNode;\n  while(previousNode && isList(previousNode)) {\n    const prevLevel = previousNode.data.list.level;\n    if (prevLevel <= 0) {\n      return previousViewNode;\n    }\n    previousNode = parent.getPreviousBlock(previousNode.key);\n    if (previousNode && isFoldGroupNode(previousNode, controller)) {\n      const viewLevel = previousViewNode?.data.list?.level;\n      const prevLevel = previousNode?.data.list?.level;\n      const fold = controller.userData.get(previousNode, 'fold');\n      if (fold && viewLevel > prevLevel) {\n        previousViewNode = previousNode;\n      }\n    }\n  }\n  if (!previousNode || !isList(previousViewNode!)) {\n    return null;\n  }\n  return previousViewNode;\n}\n"],"file":"getClosestViewNode.js"}