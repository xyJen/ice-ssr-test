{"version":3,"sources":["../../../../src/mo/serializer/htmlToJsonML.ts"],"names":["isBlockquote","node","name","onOpenTag","state","blockquote","push","onCloseTag","test","parent","getParent","current","peek","pop","isStackEmpty","append"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,YAAY,GAAIC,IAAD,IAAkC;AACrD,MAAIA,IAAI,IAAI,8BAAcA,IAAd,CAAR,IAA+BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,YAAR,CAAnC,EAA0D;AACxD,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CALD;;eAOe;AACbC,EAAAA,IAAI,EAAE,YADO;AAGbC,EAAAA,SAAS,EAAE,CAACC,KAAD,EAAeF,IAAf,KAAyC;AAClD,QAAIA,IAAI,KAAK,YAAb,EAA2B,OAAO,KAAP;AAG3B,UAAMG,UAAkB,GAAG,CACzB,GADyB,EAEzB;AACEA,MAAAA,UAAU,EAAE;AADd,KAFyB,EAKzB,uCAAqB,EAArB,CALyB,CAA3B;AAOAD,IAAAA,KAAK,CAACE,IAAN,CAAWD,UAAX;AACA,WAAO,IAAP;AACD,GAhBY;AAkBbE,EAAAA,UAAU,EAAE,CAACH,KAAD,EAAeF,IAAf,KAAyC;AACnD,QAAIA,IAAI,KAAK,YAAT,IAAyB,CAAC,eAAeM,IAAf,CAAoBN,IAApB,CAA9B,EAAyD,OAAO,KAAP;AAEzD,UAAMO,MAAM,GAAGL,KAAK,CAACM,SAAN,EAAf;AACA,UAAMC,OAAO,GAAGP,KAAK,CAACQ,IAAN,EAAhB,CAJmD,CAKnD;AACA;;AACA,QAAIV,IAAI,KAAK,YAAT,IAAyBF,YAAY,CAACS,MAAD,CAAzC,EAAmD;AACjDL,MAAAA,KAAK,CAACS,GAAN;AACA,YAAMZ,IAAY,GAAG,CACnBU,OAAO,CAAE,CAAF,CADY,EAEnB;AACEN,QAAAA,UAAU,EAAE,IADd;AAEE,YAAI,8BAAsBM,OAAtB,KAAkC,EAAtC;AAFF,OAFmB,EAMnB,IAAI,4BAAYF,MAAZ,KAAwB,EAA5B,CANmB,EAOnB,IAAI,4BAAYE,OAAZ,KAAwB,EAA5B,CAPmB,CAArB;AASAP,MAAAA,KAAK,CAACS,GAAN;AACAT,MAAAA,KAAK,CAACE,IAAN,CAAWL,IAAX;AACA,aAAO,IAAP;AACD;;AACD,QAAIC,IAAI,KAAK,YAAT,IAAyB,CAACE,KAAK,CAACU,YAAN,EAA9B,EAAoD;AAClD,YAAMT,UAAU,GAAGD,KAAK,CAACS,GAAN,EAAnB;AACAT,MAAAA,KAAK,CAACW,MAAN,CAAaV,UAAb;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;AA9CY,C","sourcesContent":["import { getAttributes, getChildren, hasAttributes, JsonML } from '@ali/4ever-utils';\nimport { MoState as State, createTextWithString } from '@ali/4ever-cangjie';\n\nconst isBlockquote = (node: JsonML | null): boolean => {\n  if (node && hasAttributes(node) && node[1]['blockquote']) {\n    return true;\n  }\n  return false;\n};\n\nexport default {\n  name: 'blockquote',\n\n  onOpenTag: (state: State, name: string): boolean => {\n    if (name !== 'blockquote') return false;\n\n\n    const blockquote: JsonML = [\n      'p',\n      {\n        blockquote: true,\n      },\n      createTextWithString(''),\n    ];\n    state.push(blockquote);\n    return true;\n  },\n\n  onCloseTag: (state: State, name: string): boolean => {\n    if (name !== 'blockquote' && !/^(h[1-6]|p)$/.test(name)) return false;\n\n    const parent = state.getParent();\n    const current = state.peek();\n    // 处理 blockquote + p/h1-6 嵌套的情况(长期来看要修改 blockquote 的实现，才能较好地支持引用内潜逃其他元素的情况)\n    // 与 blockquote 节点合并\n    if (name !== 'blockquote' && isBlockquote(parent)) {\n      state.pop();\n      const node: JsonML = [\n        current![0],\n        {\n          blockquote: true,\n          ...(getAttributes<object>(current) || {})\n        },\n        ...(getChildren(parent!) || []),\n        ...(getChildren(current) || []),\n      ];\n      state.pop();\n      state.push(node);\n      return true;\n    }\n    if (name === 'blockquote' && !state.isStackEmpty()) {\n      const blockquote = state.pop();\n      state.append(blockquote);\n      return true;\n    }\n    return false;\n  },\n};\n"],"file":"htmlToJsonML.js"}