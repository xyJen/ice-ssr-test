"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everUtils = require("@ali/4ever-utils");

var _everCangjie = require("@ali/4ever-cangjie");

const isBlockquote = node => {
  if (node && (0, _everUtils.hasAttributes)(node) && node[1]['blockquote']) {
    return true;
  }

  return false;
};

var _default = {
  name: 'blockquote',
  onOpenTag: (state, name) => {
    if (name !== 'blockquote') return false;
    const blockquote = ['p', {
      blockquote: true
    }, (0, _everCangjie.createTextWithString)('')];
    state.push(blockquote);
    return true;
  },
  onCloseTag: (state, name) => {
    if (name !== 'blockquote' && !/^(h[1-6]|p)$/.test(name)) return false;
    const parent = state.getParent();
    const current = state.peek(); // 处理 blockquote + p/h1-6 嵌套的情况(长期来看要修改 blockquote 的实现，才能较好地支持引用内潜逃其他元素的情况)
    // 与 blockquote 节点合并

    if (name !== 'blockquote' && isBlockquote(parent)) {
      state.pop();
      const node = [current[0], {
        blockquote: true,
        ...((0, _everUtils.getAttributes)(current) || {})
      }, ...((0, _everUtils.getChildren)(parent) || []), ...((0, _everUtils.getChildren)(current) || [])];
      state.pop();
      state.push(node);
      return true;
    }

    if (name === 'blockquote' && !state.isStackEmpty()) {
      const blockquote = state.pop();
      state.append(blockquote);
      return true;
    }

    return false;
  }
};
exports.default = _default;
//# sourceMappingURL=htmlToJsonML.js.map