import _extends from "@babel/runtime/helpers/extends";
import { getAttributes, getChildren, hasAttributes } from '@ali/4ever-utils';
import { createTextWithString } from '@ali/4ever-cangjie';

var isBlockquote = function isBlockquote(node) {
  if (node && hasAttributes(node) && node[1]['blockquote']) {
    return true;
  }

  return false;
};

export default {
  name: 'blockquote',
  onOpenTag: function onOpenTag(state, name) {
    if (name !== 'blockquote') return false;
    var blockquote = ['p', {
      blockquote: true
    }, createTextWithString('')];
    state.push(blockquote);
    return true;
  },
  onCloseTag: function onCloseTag(state, name) {
    if (name !== 'blockquote' && !/^(h[1-6]|p)$/.test(name)) return false;
    var parent = state.getParent();
    var current = state.peek(); // 处理 blockquote + p/h1-6 嵌套的情况(长期来看要修改 blockquote 的实现，才能较好地支持引用内潜逃其他元素的情况)
    // 与 blockquote 节点合并

    if (name !== 'blockquote' && isBlockquote(parent)) {
      state.pop();
      var node = [current[0], _extends({
        blockquote: true
      }, getAttributes(current) || {})].concat(getChildren(parent) || [], getChildren(current) || []);
      state.pop();
      state.push(node);
      return true;
    }

    if (name === 'blockquote' && !state.isStackEmpty()) {
      var blockquote = state.pop();
      state.append(blockquote);
      return true;
    }

    return false;
  }
};
//# sourceMappingURL=htmlToJsonML.js.map