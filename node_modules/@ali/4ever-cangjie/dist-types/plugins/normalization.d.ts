/**
 * @packageDocumentation
 * @ignore
 */
import Controller from '../controller/index';
import Node from '../models/node';
export interface Rule {
    match?: Rule | Rule[];
    klass?: string | ((type: string) => boolean);
    type?: string | ((type: string) => boolean);
    first?: Rule | Rule[];
    last?: Rule[];
    nodes?: Rule[];
    min?: number;
    max?: number;
    parent?: Rule[];
    previous?: Rule[];
    next?: Rule[];
    normalize?: (controller: Controller, error: any) => void;
}
interface ElementRule extends Omit<Rule, 'match'> {
    isVoid?: boolean | ((controller: Controller, node: Node) => boolean);
    isEdgeSelectable?: boolean;
    /**
     * Inline 内边缘是否可选中
     */
    isSideSelectable?: boolean;
}
interface MarkRule extends Omit<Rule, 'match'> {
    isAtomic?: boolean;
}
export interface Schema {
    rules?: Rule[];
    document?: Omit<Rule, 'match'>;
    blocks?: Record<string, ElementRule>;
    inlines?: Record<string, ElementRule>;
    marks?: Record<string, MarkRule>;
}
export default function createNormalizationPlugin(schema: Schema): {
    models: never[];
    queries: {
        isAtomic: (_: any, mark: any) => boolean | undefined;
        isVoid: (controller: Controller, node: Node) => boolean | undefined;
        isEdgeSelectable: (_: any, node: Node) => boolean | undefined;
        isSideSelectable: (controller: Controller, node: Node) => boolean | undefined;
    };
    validateNode: (node: Node, controller: Controller, next: any) => any;
    normalizeNode: (node: Node, controller: Controller, next: any) => any;
};
export {};
