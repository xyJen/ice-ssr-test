import Selection from '../models/selection';
import Controller from '../controller/index';
import Block, { BlockProperties } from '../models/block';
import Node from '../models/node';
import Path from '../models/path';
import Mark from '../models/mark';
import Document from '../models/document';
import Inline, { InlineProperties } from '../models/inline';
import { EdgePoint } from '../models/point';
/**
 * 在指定位置，插入一个node
 * @key 插入目标节点
 * @index 插入后在目标节点的顺序
 */
export declare function insertNodeByKey(controller: Controller, key: string, index: number, node: Node): Controller;
/**
 * 在指定位置，插入一个node
 * @path 插入目标节点
 * @index 插入后在目标节点的顺序
 */
export declare function insertNodeByPath(controller: Controller, path: Path, index: number, node: Node): Controller;
/**
 * 在当前选区插入一段文字，并附带marks。
 * 1. marks：会从参数里获取；如果参数没有提供，会尝试从当前selection获取；如果依然没有，就从当前的插入位置获取
 */
export declare function insertText(controller: Controller, text: string, ms?: Mark[]): Controller;
/**
 * 在 EdgePoint 的 before 或者 after 位置，插入一个空白的段落。
 */
export declare function insertEmptyBlock(controller: Controller, at: EdgePoint): Controller;
/**
 * 在目标位置插入一段文字，并附带marks。
 * 1. 目标位置需要对应一个Text节点，否则会抛出异常
 * 2. marks：会从参数里获取；如果参数没有提供，会尝试从当前的插入位置获取
 */
export declare function insertTextAtRange(controller: Controller, r: Selection, text: string, marks?: Mark[]): Controller;
/**
 * 在目标位置插入一段文字，并附带marks。
 * 1. 目标位置需要对应一个Text节点，否则会抛出异常
 * 2. marks：会从参数里获取；如果参数没有提供，会尝试从当前的插入位置获取
 */
export declare function insertTextByKey(controller: Controller, key: string, offset: number, text: string, marks?: Mark[]): Controller;
/**
 * 在目标位置插入一段文字，并附带marks。
 * 1. 目标位置需要对应一个Text节点，否则会抛出异常
 * 2. marks：会从参数里获取；如果参数没有提供，会尝试从当前的插入位置获取
 */
export declare function insertTextByPath(controller: Controller, path: Path, offset: number, text: string, ms?: Mark[]): Controller;
/**
 * 在指定的选区的start位置，插入一个block。
 * 1. 如果start节点在开始/结束位置，或者start节点是个空block，则直接插入；否则先split，后插入
 */
export declare function insertBlockAtRange(controller: Controller, range: Selection, block: Block): Controller;
/**
 * 在当前选区位置，插入一个block。
 * 1. 如果当前选区是expand，会先执行删除选区操作。
 * 2. 如果start节点在开始/结束位置，或者start节点是个空block，则直接插入；否则先split，后插入
 * @blockProps block或者block参数，会传递给Block.create来创建一个block
 */
export declare function insertBlock(controller: Controller, blockProps: BlockProperties | Block | string): Controller;
/**
 * 在当前选区位置，插入一个inline。
 * 1. 如果当前选区是expand，会先执行删除选区操作。
 */
export declare function insertInlineAtRange(controller: Controller, range: Selection, inline: Inline): Controller;
/**
 * 在当前选区位置，插入一个inline。
 * 1. 如果当前选区是expand，会先执行删除选区操作。
 */
export declare function insertInline(controller: Controller, inlineProps: InlineProperties | Inline | string): Controller;
/**
 * 在目标位置插入一个fragment
 * 1. 内部遍历fragment的每一个node，然后调用Commands.insertNode
 * 2. 如果针对复制粘贴等上层场景，需要考虑key重新生成等逻辑，请使用Commands.insertFragment
 */
export declare function insertFragmentByKey(controller: Controller, key: string, index: number, fragment: Document): Controller;
/**
 * 在目标位置插入一个fragment
 * 1. 内部遍历fragment的每一个node，然后调用Commands.insertNode
 * 2. 如果针对复制粘贴等上层场景，需要考虑key重新生成等逻辑，请使用Commands.insertFragment
 */
export declare function insertFragmentByPath(controller: Controller, path: Path, index: number, fragment: Document): Controller;
/**
 * 在当前插入一个fragment
 * 1. 内部会处理插入点、插入后的光标行为，以符合用户直觉
 */
export declare function insertFragment(controller: Controller, fragment: Document): Controller;
/**
 * 在指定的选区插入一个fragment
 * 1. 如果选区是expand，会先删除选区
 */
export declare function insertFragmentAtRange(controller: Controller, range: Selection, fragment: Document): Controller;
/**
 * 在指定的选区插入一个fragment
 * 1. fragment必须包含有效的无冲突的key
 */
export declare function insertFragmentWithRealKeyAtRange(controller: Controller, range: Selection, fragment: Document): Controller;
