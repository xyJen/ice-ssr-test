import Controller from '../controller/index';
import Selection from '../models/selection';
import Path from '../models/path';
/**
 * 从指定文本位置开始拆分节点子树
 * @param controller
 * @param key 节点子树的 root key
 * @param textKey 待拆分的文本 key
 * @param textOffset 待拆分的文本 offset
 * @returns
 * @example
 * ```ts
 * //
 * //   ┌───────┐                      ┌───────┐
 * //   │ root  │                      │ root  │
 * //   └───────┘                      └───────┘
 * //       │                         ┌─────────┐
 * //       ▼                         ▼         ▼
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ A │                     │ A │     │A1 │
 * //     └───┘                     └───┘     └───┘
 * //       │         ──split─▶       │         │
 * //       ▼                         ▼         ▼
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ B │                     │ B │     │B1 │
 * //     └───┘                     └───┘     └───┘
 * //       │                         │         │
 * //      │▼                         ▼         ▼
 * //   ┌──┼────┐                   ┌───┐     ┌───┐
 * //   │'a│bc' │                   │'a'│     │'bc│
 * //   └──┼────┘                   └───┘     └───┘
 * //      │
 * //   offset=1
 * //
 *
 * const newDocument = controller.commands('splitDescendantsByKey', document.key, text.key, 1);
*
 * ```
 */
export declare function splitDescendantsByKey(controller: Controller, key: string, textKey: string, textOffset: number): Controller;
/**
 * 从指定文本位置开始拆分节点子树
 * @param controller
 * @param path 节点子树的 path
 * @param textPath 待拆分的文本 path
 * @param textOffset 待拆分的文本 offset
 * @returns
 * @example
 * ```ts
 * //
 * //   ┌───────┐                      ┌───────┐
 * //   │ root  │                      │ root  │
 * //   └───────┘                      └───────┘
 * //       │                         ┌─────────┐
 * //       ▼                         ▼         ▼
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ A │                     │ A │     │A1 │
 * //     └───┘                     └───┘     └───┘
 * //       │         ──split─▶       │         │
 * //       ▼                         ▼         ▼
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ B │                     │ B │     │B1 │
 * //     └───┘                     └───┘     └───┘
 * //       │                         │         │
 * //      │▼                         ▼         ▼
 * //   ┌──┼────┐                   ┌───┐     ┌───┐
 * //   │'a│bc' │                   │'a'│     │'bc│
 * //   └──┼────┘                   └───┘     └───┘
 * //      │
 * //   offset=1
 * //
 *
 * const newDocument = controller.commands('splitDescendantsByPath', [], [0,0,0], 1);
 *
 * ```
 */
export declare function splitDescendantsByPath(controller: Controller, path: Path, textPath: Path, textOffset: any): Controller;
/**
 * 对目标节点进行拆分
 *
 * ```txt
 * Split Text:
 *
 *       position=5                    Text      Text
 *          │                        ┌───────┐ ┌───────┐
 *     Hello│World     ─split─────▶  │ Hello │ │ World │
 *          │                        └───────┘ └───────┘
 *
 * Split Element:
 *
 *          position=1
 *             │
 * ┌───────────┼───────────┐                ┌─────────────┐   ┌─────────────┐
 * │ Element   │           │                │ Element     │   │ Element     │
 * │  ┌───────┐│┌───────┐  │                │  ┌───────┐  │   │  ┌───────┐  │
 * │  │ Hello │││ World │  │────split─────▶ │  │ Hello │  │   │  │ World │  │
 * │  └───────┘│└───────┘  │                │  └───────┘  │   │  └───────┘  │
 * └───────────┼───────────┘                └─────────────┘   └─────────────┘
 *             │
 *             │
 *
 * ```
 * @key 待拆分节点 key
 * @position 拆分位置。如果是 Text 节点，代表文字的偏移量；如果 Element节点，代表子节点 index。
 */
export declare function splitNodeByKey(controller: Controller, key: string, position: number): Controller;
/**
 * 对目标节点进行拆分
 * ```txt
 * Split Text:
 *
 *       position=5                    Text      Text
 *          │                        ┌───────┐ ┌───────┐
 *     Hello│World     ─split─────▶  │ Hello │ │ World │
 *          │                        └───────┘ └───────┘
 *
 * Split Element:
 *
 *          position=1
 *             │
 * ┌───────────┼───────────┐                ┌─────────────┐   ┌─────────────┐
 * │ Element   │           │                │ Element     │   │ Element     │
 * │  ┌───────┐│┌───────┐  │                │  ┌───────┐  │   │  ┌───────┐  │
 * │  │ Hello │││ World │  │────split─────▶ │  │ Hello │  │   │  │ World │  │
 * │  └───────┘│└───────┘  │                │  └───────┘  │   │  └───────┘  │
 * └───────────┼───────────┘                └─────────────┘   └─────────────┘
 *             │
 *             │
 *
 * ```
 * @path 待拆分节点 path
 * @position 拆分位置。如果是 Text 节点，代表文字的偏移量；如果 Element节点，代表子节点 index。
 */
export declare function splitNodeByPath(controller: Controller, path: Path, position: number): Controller;
/**
 * 在当前选区拆分 Block
 *
 * @param controller
 * @param depth 对于嵌套结构，可以指定拆分深度，默认拆分深度为 1 ，即只拆分距选区最近的 Block
 * @returns
 * @example
 *
 * ```ts
 * //
 * //   ┌───────┐                      ┌───────┐
 * //   │ root  │                      │ root  │
 * //   └───────┘                      └───────┘
 * //       │                              │
 * //       ▼                              ▼
 * //     ┌───┐                          ┌───┐
 * //     │ A │                          │ A │
 * //     └───┘                          └───┘
 * //       │       ──depth=3─▶            │
 * //       ▼                         ┌─────────┐
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ B │                     │ B │     │B1 │
 * //     └───┘                     └───┘     └───┘
 * //       │                         │         │
 * //      │▼                         ▼         ▼
 * //   ┌──┼────┐                   ┌───┐     ┌───┐
 * //   │'a│bc' │                   │'a'│     │'bc│
 * //   └──┼────┘                   └───┘     └───┘
 * //      │
 * //   cursor
 * //
 *
 * const newDocument = controller.commands('splitBlock');
 *
 *  * //
 * //   ┌───────┐                      ┌───────┐
 * //   │ root  │                      │ root  │
 * //   └───────┘                      └───────┘
 * //       │                         ┌─────────┐
 * //       ▼                         ▼         ▼
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ A │                     │ A │     │A1 │
 * //     └───┘                     └───┘     └───┘
 * //       │       ──depth=3─▶       │         │
 * //       ▼                         ▼         ▼
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ B │                     │ B │     │B1 │
 * //     └───┘                     └───┘     └───┘
 * //       │                         │         │
 * //      │▼                         ▼         ▼
 * //   ┌──┼────┐                   ┌───┐     ┌───┐
 * //   │'a│bc' │                   │'a'│     │'bc│
 * //   └──┼────┘                   └───┘     └───┘
 * //      │
 * //   cursor
 * //
 *
 * const newDocument = controller.commands('splitBlock', 3);
 *
 * ```
 */
export declare function splitBlock(controller: Controller, depth?: number): Controller;
/**
 * 在指定选区区间拆分 Block
 * @param controller
 * @param selection
 * @param depth 对于嵌套结构，可以指定拆分深度，默认拆分深度为 1 ，即只拆分距选区最近的 Block
 * @returns
 * @example
 *
 * ```ts
 * //
 * //   ┌───────┐                      ┌───────┐
 * //   │ root  │                      │ root  │
 * //   └───────┘                      └───────┘
 * //       │                              │
 * //       ▼                              ▼
 * //     ┌───┐                          ┌───┐
 * //     │ A │                          │ A │
 * //     └───┘                          └───┘
 * //       │       ──depth=3─▶            │
 * //       ▼                         ┌─────────┐
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ B │                     │ B │     │B1 │
 * //     └───┘                     └───┘     └───┘
 * //       │                         │         │
 * //      │▼                         ▼         ▼
 * //   ┌──┼────┐                   ┌───┐     ┌───┐
 * //   │'a│bc' │                   │'a'│     │'bc│
 * //   └──┼────┘                   └───┘     └───┘
 * //      │
 * //   cursor
 * //
 *
 * const newDocument = controller.commands('splitBlockAtRange', cursor);
 *
 * //   ┌───────┐                      ┌───────┐
 * //   │ root  │                      │ root  │
 * //   └───────┘                      └───────┘
 * //       │                         ┌─────────┐
 * //       ▼                         ▼         ▼
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ A │                     │ A │     │A1 │
 * //     └───┘                     └───┘     └───┘
 * //       │       ──depth=3─▶       │         │
 * //       ▼                         ▼         ▼
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ B │                     │ B │     │B1 │
 * //     └───┘                     └───┘     └───┘
 * //       │                         │         │
 * //      │▼                         ▼         ▼
 * //   ┌──┼────┐                   ┌───┐     ┌───┐
 * //   │'a│bc' │                   │'a'│     │'bc│
 * //   └──┼────┘                   └───┘     └───┘
 * //      │
 * //   cursor
 * //
 *
 * const newDocument = controller.commands('splitBlockAtRange', cursor, 3);
 *
 * ```
 */
export declare function splitBlockAtRange(controller: Controller, selection: Selection, depth?: number): Controller;
/**
 * 在当前选区拆分 Inline
 *
 * @param controller
 * @param depth 对于嵌套结构，可以指定拆分深度，默认拆分深度为 1 ，即只拆分距选区最近的 Inline
 * @returns
 * @example
 *
 * ```ts
 * //
 * //   ┌───────┐                      ┌───────┐
 * //   │ root  │                      │ root  │
 * //   └───────┘                      └───────┘
 * //       │                              │
 * //       ▼                              ▼
 * //     ┌───┐                          ┌───┐
 * //     │ A │                          │ A │
 * //     └───┘                          └───┘
 * //       │       ──depth=3─▶            │
 * //       ▼                         ┌─────────┐
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ B │                     │ B │     │B1 │
 * //     └───┘                     └───┘     └───┘
 * //       │                         │         │
 * //      │▼                         ▼         ▼
 * //   ┌──┼────┐                   ┌───┐     ┌───┐
 * //   │'a│bc' │                   │'a'│     │'bc│
 * //   └──┼────┘                   └───┘     └───┘
 * //      │
 * //   cursor
 * //
 *
 * const newDocument = controller.commands('splitInline');
 *
 *  * //
 * //   ┌───────┐                      ┌───────┐
 * //   │ root  │                      │ root  │
 * //   └───────┘                      └───────┘
 * //       │                         ┌─────────┐
 * //       ▼                         ▼         ▼
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ A │                     │ A │     │A1 │
 * //     └───┘                     └───┘     └───┘
 * //       │       ──depth=3─▶       │         │
 * //       ▼                         ▼         ▼
 * //     ┌───┐                     ┌───┐     ┌───┐
 * //     │ B │                     │ B │     │B1 │
 * //     └───┘                     └───┘     └───┘
 * //       │                         │         │
 * //      │▼                         ▼         ▼
 * //   ┌──┼────┐                   ┌───┐     ┌───┐
 * //   │'a│bc' │                   │'a'│     │'bc│
 * //   └──┼────┘                   └───┘     └───┘
 * //      │
 * //   cursor
 * //
 *
 * const newDocument = controller.commands('splitInline', 3);
 *
 * ```
 */
export declare function splitInline(controller: Controller, depth?: number): Controller;
