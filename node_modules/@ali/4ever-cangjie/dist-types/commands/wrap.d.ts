/**
 * @packageDocumentation
 * @module Commands
 */
import Controller from '../controller/index';
import Block, { BlockProperties } from '../models/block';
import Inline, { InlineProperties } from '../models/inline';
import Path from '../models/path';
import Selection from '../models/selection';
/**
 * 在当前选区的start和end位置，插入一些文字，并更新选区位置。
 * 1. 不区分range是否是collapse
 */
export declare function wrapText(controller: Controller, prefix: string, suffix?: string): Controller;
/**
 * 在选区的start和end位置，插入一些文字
 * 1. 不区分range是否是collapse
 * 2. 此方法不会更新选区位置
 */
export declare function wrapTextAtRange(controller: Controller, range: Selection, prefix: string, suffix?: string): Controller;
/**
 * 在range的公共父节点上插入block，然后把range对应的nodes都转到block中
 */
export declare function wrapBlock(controller: Controller, block: Block | BlockProperties | string): Controller;
/**
 * 在range的公共父节点上插入block，然后把range对应的nodes都转到block中
 */
export declare function wrapBlockAtRange(controller: Controller, range: Selection, b: Block | BlockProperties | string): Controller;
/**
 * 把目标节点插入到一个新的block节点中，并把block放到原来的节点的位置
 */
export declare function wrapBlockByKey(controller: Controller, key: string, block: Block | BlockProperties | string): Controller;
/**
 * 把目标节点插入到一个新的block节点中，并把block放到原来的节点的位置
 */
export declare function wrapBlockByPath(controller: Controller, path: Path, b: Block | BlockProperties | string): Controller;
/**
 * 把当前选区wrap一个inline
 * 1. 如果range是collapse，则把对应节点的最近void inline节点进行wrap；
 * 如果没有最近的void inline，则什么都不做
 * 2. 如果选区里有block，会在每个block内部进行wrap inline操作
 */
export declare function wrapInline(controller: Controller, inline: Inline | InlineProperties | string): Controller;
/**
 * 把当前选区wrap一个inline
 * 1. 如果range是collapse，则把对应节点的最近void inline节点进行wrap；
 * 如果没有最近的void inline，则什么都不做
 * 2. 如果选区里有block，会在每个block内部进行wrap inline操作
 */
export declare function wrapInlineAtRange(controller: Controller, range: Selection, i: Inline | InlineProperties | string): Controller;
/**
 * 把目标节点插入到一个新的inline节点中，并把inline放到原来的节点的位置
 */
export declare function wrapInlineByKey(controller: Controller, key: string, inline: Inline): Controller;
/**
 * 把目标节点插入到一个新的inline节点中，并把inline放到原来的节点的位置
 */
export declare function wrapInlineByPath(controller: Controller, path: Path, i: Inline): Controller;
