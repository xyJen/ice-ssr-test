import NodeManager from './nodeManager';
import CDocument from "../models/document";
import type { MeasureBlocksResult, LayoutInfoResult } from './interface';
interface ViewManagerOption {
    editorContainer: HTMLElement;
    scrollContainer: HTMLElement;
    scrollHandler: () => void;
    resizeHandler: (entries: ResizeObserverEntry[]) => void;
    scrollInterval?: number;
    bufferRange?: number;
    nodeManager: NodeManager;
    triggerViewUpdate: (string: any) => void;
}
export default class ViewManager {
    private nodeManager;
    private editorContainer;
    private scrollContainer;
    private scrollElement;
    private scrollListenerElement;
    private scrollHandler;
    private scrollInterval;
    private resizeHandler;
    private resizeObserver;
    private bufferRange;
    private editorContainerToScrollContainerDistance;
    private scrollHistoryArray;
    private throttledScrollListener;
    triggerViewUpdate?: (id: number) => void;
    private viewPortStartY;
    private viewPortEndY;
    private bufferStartY;
    private bufferEndY;
    private prevViewPortStartY;
    constructor(options: ViewManagerOption);
    updateEditorContainerToScrollContainerDistance(): void;
    calculateViewPort(_viewPortStartY?: number): {
        viewPortStartY: number;
        viewPortEndY: number;
        bufferStartY: number;
        bufferEndY: number;
    };
    updateViewPort(): void;
    scrollListener: () => void;
    initScrollListener(): void;
    destroyScrollListener(): void;
    initResizeObserver(): void;
    detroyResizeObserver(): void;
    addResizeObserverByKeys(blockKeys: string[]): void;
    addResizeObserver(element: HTMLElement): void;
    removeResizeObserver(element: HTMLElement): void;
    /**
     * 测量所有当前上屏节点的高度
     * @returns Object, key 为节点 key, value 为高度
     */
    measureCurrentViewBlocks(documentKey: string): MeasureBlocksResult;
    measureBlocksByKeys(blockKeys: string[]): Promise<MeasureBlocksResult>;
    calculateExpectedLayoutInfo(view: CDocument, bufferStartY?: number, bufferEndY?: number, viewStartY?: number): LayoutInfoResult;
    calculateBlockStartYByBlockIndex(index: number, view: CDocument, includeLastMarginBottom?: boolean): number;
    scrollToNodeByIndex(index: number, view: CDocument): void;
}
export {};
