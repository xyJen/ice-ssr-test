export interface BlockBaseInfo {
    key: string;
    uuid?: string;
}
export interface BlockMeasureInfo {
    height?: number;
    marginTop?: number;
    marginBottom?: number;
}
export interface BlockPersistInfo {
    persistStateNode: string[];
}
export interface BlockInfo extends BlockBaseInfo, BlockMeasureInfo, BlockPersistInfo {
}
export declare type MeasureBlocksResult = Record<string, BlockMeasureInfo>;
export interface LayoutInfoResult {
    expectedBufferStartBlockOffset: number;
    expectedViewStartBlockOffset: number;
    expectedBufferEndBlockOffset: number;
    expectedBufferStartBlockY: number;
    expectedViewStartBlockY: number;
    expectedBufferEndBlockY: number;
    accHeight: number;
}
export declare type BlockFinalVisibleState = 'show' | 'hide' | 'destroy';
export interface VirtualizeResult {
    beforePlaceholderHeight: number;
    afterPlaceholderHeight: number;
    virtualizeId: number;
    visibles: VisiblesResult;
}
export interface VisiblesResult {
    blockFinalVisibleStates: BlockFinalVisibleState[];
    visibleBlockKeys: string[];
}
export interface VirtualizeOptions {
    enable: boolean;
    bufferRange?: number;
    firstPaintBlockSize?: number;
    invisibleCalculationDebounceTime?: number;
    enableOnDemandViewCalculation?: boolean;
    pendingDebounceTime?: number;
    maxOPsForHotsAnalyze?: number;
    disableViewVirtualize?: boolean;
}
export interface ViewRelatedOptions {
    editorContainer: HTMLElement;
    scrollContainer: HTMLElement;
    scrollInterval?: number;
    triggerViewUpdate: (id: number) => void;
}
export interface WorkflowResult {
    layoutInfoResult: LayoutInfoResult | null;
    needToReRender: boolean;
    needToStartNextWorkflow: boolean;
}
