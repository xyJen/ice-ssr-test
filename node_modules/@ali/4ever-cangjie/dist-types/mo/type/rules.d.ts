/// <reference types="react" />
import type * as MarkdownIt from 'markdown-it';
import type MarkdownItType from 'markdown-it';
import type { JsonML } from './jsonml';
import type { Node, Value } from '../../';
import type { MarkProperties, default as Mark } from '../../models/mark';
import type { State } from './html';
import type Renderer from 'markdown-it/lib/renderer';
/**
 * @ignore
 */
export declare type ConvertFunc = (node: JsonML, path?: number[]) => JSX.Element | null;
/**
 * @ignore
 */
export interface Attributes {
    styleObj: Partial<CSSStyleDeclaration>;
    [key: string]: any;
}
/**
 * @ignore
 */
export declare type Rule = {
    name?: string;
    match?: Function;
    convert?: Function;
    onText?: Function;
    onOpenTag?: Function;
    onCloseTag?: Function;
};
/**
 * 解析 html 的 Rule
 * @ignore
 */
export interface HTMLToJsonMLRule {
    name: string;
    onText?(state: State, text: string): boolean;
    /**
     * 开标签
     * @param state
     * @param tag 标签名
     * @param attributes 标签属性
     * @returns 返回 true 则终止，返回 false 则继续加载插件
     */
    onOpenTag(state: State, tag: string, attributes: Attributes, id: string): boolean;
    /**
     * 闭标签
     * @param state
     * @param tag 标签名
     * @returns 返回 true 则终止，返回 false 则继续加载插件
     */
    onCloseTag(state: State, tag: string, attributes: Attributes, id: string): boolean;
    /**
     * 解析html结束
     * @description 提供hook，用于清除闭包中的引用，防止内存泄漏
     * */
    onEnd?(): void;
}
/**
 * ASL 导出 HTML
 * @ignore
 */
export interface JsonMLToHTMLRule {
    name: string;
    /**
     * 节点类型是否 match
     * @param node
     */
    match(node: JsonML): boolean;
    /**
     * 序列化节点
     * @param node 节点数据
     * @param path 节点 path
     * @param convert 序列化 children 节点
     */
    convert(node: JsonML, path: number[], convert: ConvertFunc): JSX.Element | null;
    hooks?: {
        /**
         * 预修饰 jsonML，例如对整个结构进行 normalize
         * @param node 待转化 jsonML
         * @return 处理后的 jsonML
         */
        before?: (node: JsonML) => JsonML;
    };
}
/**
 * @ignore
 */
export interface ValueToJsonMLRule {
    name?: string;
    /**
     * 匹配节点
     * @param node
     */
    match(node: Node): boolean;
    /**
     * 导出 value
     * @param node
     */
    convert(node: Node): JsonML;
    /**
     * 异步导出 value
     * @param node
     */
    asyncConvert?: (node: Node) => Promise<JsonML>;
    /**
     * 装饰节点
     */
    decorate?: (node: Node) => Node;
}
/**
 * @ignore
 */
export interface JsonMLToValueRule {
    name?: string;
    /**
     * 匹配节点
     * @param node
     */
    match(node: JsonML, parent?: JsonML): boolean;
    /**
     * 导出 ASL
     * @param node
     */
    convert(node: JsonML, parent?: JsonML): Node;
    /**
     * 装饰节点
     */
    decorate?: (node: Node) => Node;
}
/**
 * @ignore
 */
export interface TextToJsonMLRule {
    name: string;
    /**
     * 匹配行
     * @param line
     */
    match(line: string): boolean;
    /**
     * 序列化纯文本
     * @param line
     */
    convert(line: string): JsonML[];
}
/**
  * @ignore
  */
declare type ConvertTextFunc = (node: Node) => string;
/**
  * @ignore
  */
/**
 * @ignore
 */
export interface ValueToTextRule {
    name: string;
    /**
     * 匹配节点
     * @param node
     */
    match(node: Node): boolean;
    /**
     * 提出 node 的纯文本
     * @param node
     */
    convert(node: Node, convert: ConvertTextFunc): string;
    hooks?: {
        /**
         * 预修饰 Value
         * @param value 待转化为 text 的 value
         * @return 处理后的 Value
         */
        before?: (value: Value) => Value;
    };
}
export declare type BlockRuleName = 'table' | 'code' | 'blockquote' | 'hr' | 'list' | 'heading' | 'html';
export declare type InlineRuleName = 'codespan' | 'strikethrough' | 'emphasis' | 'link' | 'image' | 'html';
export declare type MarkdownRuleName = BlockRuleName | InlineRuleName;
declare type MarkdownItPlugin = MarkdownIt.PluginSimple | MarkdownIt.PluginWithOptions | MarkdownIt.PluginWithParams;
export interface MarkdownToHTMLRule {
    ruleName?: MarkdownRuleName;
    options?: MarkdownIt.Options;
    rewrite?: Array<{
        name: string;
        createRenderer?: (md: MarkdownItType) => Renderer.RenderRule;
    }>;
    uses?: Array<{
        plugin: () => Promise<{
            default: MarkdownItPlugin;
        }>;
        data?: any[] | (() => Promise<any[]>);
    }>;
}
export interface HTMLToMarkdownRule {
    name: string;
    filter?: string | string[] | ((node: HTMLElement, options?: Function) => boolean);
    replacement?: (content?: string, node?: HTMLElement, options?: Function) => string;
    use?: Function;
}
export interface TextMark {
}
export interface LeafRule {
    /**
     * jsonML text attributes 转换为 css style
     */
    jsonMLAttrsToStyle?: (mark: TextMark, currenStyle: React.CSSProperties) => React.CSSProperties;
    /**
     * html 转换为 jsonML text attributes
     */
    htmlToJsonMLAttrs?: (tag: string, attrs: Attributes, currentMark: TextMark) => TextMark;
    /**
     * jsonML text attributes 转换为具体的 Mark Value。同时处理多个 attributes 时，可返回多个 Mark
     */
    jsonMLAttrsToMarks?: (mark: TextMark) => {
        marks: Array<MarkProperties | Mark>;
        keys: string[];
    } | undefined;
    /**
     * Mark Value 转换位 jsonML text attributes
     */
    markToJsonMLAttrs?: (mark: Mark) => TextMark | undefined;
}
export {};
