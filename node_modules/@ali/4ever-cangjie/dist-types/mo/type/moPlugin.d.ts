import type { Controller, Node, Schema } from '../../';
import type { Models } from '../../interfaces/models';
import type { default as Normalizer } from '../../interfaces/normalizer';
import type { default as Next } from '../../interfaces/next';
import type { MoSerializationPlugin } from './serialization';
import type { MoPluginConfig } from '../../interfaces/plugin/base';
export interface MoPluginSchema {
    type: string;
    isBlock: boolean;
    isVoid?: boolean | ((controller: Controller, node: Node) => boolean);
    isEdgeSelectable?: boolean;
    /**
     * @deprecated old schema
     *
     * 已废弃，请使用 `schemas` 属性和 normalizeNode
     */
    schema?: Schema['document'] | Schema['inlines'] | Schema['blocks'];
}
export interface MoPlugin {
    /** 插件的唯一标识 */
    key: string;
    /** 若插件定义了新的元素，在这里指定元素属性*/
    schemas?: MoPluginSchema | MoPluginSchema[];
    /** 插件的序列化和反序列化方法 */
    serializer?: MoSerializationPlugin;
    /**
     * @internal
     * normalizeNode
     */
    normalizeNode?: (node: Node, controller: Controller, next: Next<Normalizer>) => Normalizer;
    models?: Models;
}
export declare type MoFactory = (configs: MoPluginConfig) => MoPlugin;
