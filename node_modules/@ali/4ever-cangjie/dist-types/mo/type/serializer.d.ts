import type Block from "../../models/block";
import type Document from "../../models/document";
import type Inline from "../../models/inline";
import type Node from "../../models/node";
import type Text from "../../models/text";
import type Value from "../../models/value";
import type { JsonML, JsonMLToValueOptions } from "./jsonml";
import type { HTMLToJsonMLRule, JsonMLToHTMLRule } from "./rules";
export declare type CangjieNode = Node | Text | Inline | Block | Document;
export declare type HTMLToJsonMLConfig = Record<string, Partial<HTMLToJsonMLRule>>;
export declare type JsonMLToHTMLConfig = Record<string, Partial<JsonMLToHTMLRule>>;
export interface BaseMo {
    /**
     * 反序列化 ASL to Value
     * @param jsonML content ASL
     * @param options 序列化参数
     */
    jsonMLToValue(jsonML: JsonML, options?: JsonMLToValueOptions): Value;
    /**
     * 序列化 Value to ASL
     * @param value
     */
    valueToJsonML(value: Value): JsonML;
    /**
     * 序列化 jsonML to Node, 主要用于 operation 反序列化
     * @param jsonML
     * @param parent 父节点
     * @ignore
     */
    jsonMLToNode(jsonML: JsonML, parent?: JsonML): CangjieNode;
    /**
     * 序列化 node to jsonML, 主要用于 operation 序列化
     * @param node
     * @ignore
     */
    nodeToJsonML(node: CangjieNode): JsonML;
}
export interface AsyncMo {
    /**
     * 异步序列化 Value to ASL
     * @param value
     */
    asyncValueToJsonML(value: Value): Promise<JsonML>;
}
export interface TextMo {
    /**
     * 纯文本序列化成 ASL
     * @param text
     */
    textToJsonML(text: string): JsonML;
    /**
     * 纯文本序列化成 Value
     */
    textToValue(text: string): Value;
    /**
     * 内存数据序列化成纯文本
     * @param value
     */
    valueToText(value: Value): string;
}
export interface HtmlMo {
    /**
     * 解析 html to JsonML，主要用于粘贴时解析富文本
     * @param html
     * @param configs 自定义插件，如果插件名已经存在，则会覆盖原插件的方法
     */
    htmlToJsonML(html: string, configs?: HTMLToJsonMLConfig): JsonML;
    /**
     * 序列化 html 为 Value
     * @param html
     */
    htmlToValue(html: string): Value;
    /**
     * 序列化 JsonML to HTML，主要适用于富文本拷贝导出
     * @param content JsonML 内容
     * @param configs 自定义插件，如果插件名已经存在，则会覆盖原插件的方法
     */
    jsonMLToHTML(content: JsonML, configs?: JsonMLToHTMLConfig): string;
    /**
     * 序列化 Value to html
     * @param value
     */
    valueToHTML(value: Value): string;
}
export interface MarkdownMo {
    /**
     *  markdown 文本序列化为 JsonML
     *
     * @param {string} markdown
     */
    markdownToJsonML: (markdown: string) => Promise<JsonML>;
    /**
     *  markdown 文本序列化为 Value
     *
     * @param {string} markdown
     */
    markdownToValue: (markdown: string) => Promise<Value>;
    /**
     *  jsonml 转为 markdown 文本
     *
     * @param {string} markdown
     */
    jsonMLToMarkdown: (jsonml: JsonML) => Promise<string>;
}
export declare type Mo = BaseMo & TextMo & HtmlMo & MarkdownMo & AsyncMo;
