import { Serializable, SerializeOptions } from '../interfaces/serializable';
import ImmutableRecord from './immutableRecord';
import { TextPointJSON, TextPoint } from './point';
import Mark, { MarkJSON } from './mark';
export interface DecorationProperties {
    start: TextPoint;
    end: TextPoint;
    mark: Mark;
}
export interface DecorationJSON {
    start: TextPointJSON;
    end: TextPointJSON;
    mark: MarkJSON;
}
export default class Decoration extends ImmutableRecord implements Serializable<DecorationJSON> {
    static create(props: Decoration | DecorationProperties): Decoration;
    static fromJSON(json: DecorationJSON): Decoration;
    static isDecoration(maybeDecoration: any): maybeDecoration is Decoration;
    /**
     * Decoration的start point
     */
    readonly start: TextPoint;
    /**
     * Decoration的end point
     */
    readonly end: TextPoint;
    /**
     * Decoration的mark
     */
    readonly mark: Mark;
    private constructor();
    merge(props: Partial<DecorationProperties>): Decoration;
    set<T extends keyof DecorationProperties>(key: T, value: DecorationProperties[T]): Decoration;
    toJSON(options?: SerializeOptions): {
        start: TextPointJSON;
        end: TextPointJSON;
        mark: MarkJSON<import("../interfaces/data").default>;
    };
}
