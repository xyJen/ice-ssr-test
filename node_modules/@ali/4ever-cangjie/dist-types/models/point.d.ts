import ImmutableRecord from './immutableRecord';
import Node from './node';
import Document from './document';
import Path from './path';
import { Serializable, SerializeOptions } from '../interfaces/serializable';
export interface PointProperties {
    key: string;
}
export interface PointJSON {
    klass?: 'point';
    key?: string;
}
export interface TextPointProperties extends PointProperties {
    offset: number;
}
export interface TextPointJSON extends PointJSON {
    offset: number;
}
export interface EdgePointProperties extends PointProperties {
    edge: PointEdge;
}
export interface EdgePointJSON extends PointJSON {
    edge: PointEdge;
}
export declare type PointEdge = 'before' | 'after';
export default abstract class Point extends ImmutableRecord implements Serializable<PointJSON> {
    static createFromParams(key: string, where: number | PointEdge): TextPoint | EdgePoint;
    static create(props: PointProperties | Point): TextPoint | EdgePoint;
    static fromJSON(json: TextPointJSON | EdgePointJSON): TextPoint | EdgePoint;
    readonly key: string;
    abstract get viewKey(): string;
    constructor(props: PointProperties);
    /**
     * 创建一个新的 Point，并移到 node 的第一个子节点的起始位置
     */
    moveToStartOfNode(node: Node): TextPoint;
    /**
     * 创建一个新的 Point，并移到 node 的最后一个子节点的终点位置
     */
    moveToEndOfNode(node: Node): TextPoint;
    /**
     * 是否在 node 的第一个节点的起始位置
     */
    abstract isAtStartOfNode(node: Node): boolean;
    /**
     * 是否在 node 的最后一个节点的终点位置
     */
    abstract isAtEndOfNode(node: Node): boolean;
    isTextPoint(): this is TextPoint;
    isEdgePoint(): this is EdgePoint;
    moveBackward(): TextPoint | EdgePoint;
    moveForward(): TextPoint | EdgePoint;
    private toSubType;
    convertToTextPoint(document: Document): TextPoint;
    /**
     * 是否在 node 内部
     */
    isInNode(node: Node): boolean;
    getPathIn(document: Document): Path;
    abstract toJSON(options?: SerializeOptions): PointJSON;
}
export declare class TextPoint extends Point {
    static create(props: TextPoint | TextPointProperties): TextPoint;
    static fromJSON(json: TextPointJSON): TextPoint;
    readonly offset: number;
    get viewKey(): string;
    private constructor();
    /**
     * 把 offset 加 n，并返回一个新的 Point。
     * @n 移动的个数，可以为正/负值，默认为 1；如果 n=0，则返回自身。
     */
    moveForward(n?: number): TextPoint;
    /**
     * 把 offset 减 n，并返回一个新的 Point。
     * @n 移动的个数，可以为正/负值，默认为 1；如果 n=0，则返回自身。
     */
    moveBackward(n?: number): TextPoint;
    /**
     * 创建一个新的 Point
     * @offset 默认是 0
     */
    moveTo(key: string, offset?: number): TextPoint;
    /**
     * 是否在 node 的第一个节点的起始位置
     */
    isAtStartOfNode(node: Node): boolean;
    /**
     * 是否在 node 的最后一个节点的终点位置
     */
    isAtEndOfNode(node: Node): boolean;
    merge(props: Partial<TextPointProperties>): TextPoint;
    set<T extends keyof TextPointProperties>(key: T, value: TextPointProperties[T]): TextPoint;
    toJSON(options?: SerializeOptions): TextPointJSON;
}
export declare class EdgePoint extends Point {
    static readonly BEFORE = "before";
    static readonly AFTER = "after";
    static create(props: EdgePoint | EdgePointProperties): EdgePoint;
    static fromJSON(json: EdgePointJSON): EdgePoint;
    readonly edge: PointEdge;
    get viewKey(): string;
    private constructor();
    /**
     * 是否在 node 的第一个节点的起始位置
     */
    isAtStartOfNode(node: Node): boolean;
    /**
     * 是否在 node 的最后一个节点的终点位置
     */
    isAtEndOfNode(node: Node): boolean;
    merge(props: Partial<EdgePointProperties>): EdgePoint;
    set<T extends keyof EdgePointProperties>(key: T, value: EdgePointProperties[T]): EdgePoint;
    toJSON(options?: SerializeOptions): EdgePointJSON;
}
