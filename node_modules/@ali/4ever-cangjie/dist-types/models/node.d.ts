import ImmutableRecord from './immutableRecord';
import Element from './element';
import Text from './text';
import { Serializable, SerializeOptions } from '../interfaces/serializable';
export interface NodeProperties {
    key?: string;
}
export default abstract class Node extends ImmutableRecord implements Serializable {
    static createProperties(attrs?: string | object): object;
    readonly key: string;
    protected constructor(props: Required<NodeProperties>);
    abstract get text(): string;
    abstract regenerateKey(): Node;
    /**
     * 获取自身树下的所有 Text 节点
     * 如果自身是 Text，则返回只含有自身的数组
     */
    abstract getTexts(): Text[];
    /**
     * 把当前的 Node 转化成子类型（Text 或者 Element）
     */
    toSubType(): Text | Element;
    /**
     * 此节点是否是一个Text节点。see Text.isText
     */
    isText(): this is Text;
    /**
     * 此节点是否是一个Element节点。see Element.isElement
     */
    isElement(): this is Element;
    /**
     * 获取第一个叶子Node；如果自身就是一个叶子Node，则返回自身
     * 根据目前Schema规范，返回的都都是一个text；但是后续Cangjie扩展，可能返回其它类型Node
     */
    getFirstNode(): Node;
    /**
     * 获取最后一个叶子Node；如果自身就是一个叶子Node，则返回自身
     * 根据目前Schema规范，返回的都都是一个text；但是后续Cangjie扩展，可能返回其它类型Node
     */
    getLastNode(): Node;
    /**
     * 获取第一个Text
     * 根据目前Schema规范，都会返回一个text；但是后续Cangjie扩展，可能返回null
     */
    getFirstText(): Text | null;
    /**
     * 获取最后一个Text
     * 根据目前Schema规范，都会返回一个text；但是后续Cangjie扩展，可能返回null
     */
    getLastText(): Text | null;
    abstract toJSON(options?: SerializeOptions): any;
}
