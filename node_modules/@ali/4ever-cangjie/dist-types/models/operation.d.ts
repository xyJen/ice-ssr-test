/**
 * @packageDocumentation
 * @module Models
 */
import Selection from '../models/selection';
import Data from '../interfaces/data';
import Path from './path';
import Node from './node';
import Mark from './mark';
export interface Properties {
    type?: string;
    data?: Data;
}
export declare enum OperationType {
    AddMark = "add_mark",
    InsertNode = "insert_node",
    InsertText = "insert_text",
    MergeNode = "merge_node",
    MoveNode = "move_node",
    RemoveMark = "remove_mark",
    RemoveNode = "remove_node",
    RemoveText = "remove_text",
    SetMark = "set_mark",
    SetNode = "set_node",
    SetSelection = "set_selection",
    SplitNode = "split_node"
}
interface OperationWithContext {
    context?: string;
}
export interface AddMarkOperation extends OperationWithContext {
    type: OperationType.AddMark;
    path: Path;
    offset: number;
    length: number;
    mark: Mark;
}
export interface InsertNodeOperation extends OperationWithContext {
    type: OperationType.InsertNode;
    path: Path;
    node: Node;
}
export interface InsertTextOperation extends OperationWithContext {
    type: OperationType.InsertText;
    path: Path;
    offset: number;
    text: string;
    marks?: Mark[];
}
export interface MergeNodeOperation extends OperationWithContext {
    type: OperationType.MergeNode;
    path: Path;
    position: number;
    properties: Properties;
}
export interface MoveNodeOperation extends OperationWithContext {
    type: OperationType.MoveNode;
    path: Path;
    newPath: Path;
}
export interface RemoveMarkOperation extends Omit<AddMarkOperation, 'type'> {
    type: OperationType.RemoveMark;
}
export interface RemoveNodeOperation extends Omit<InsertNodeOperation, 'type'> {
    type: OperationType.RemoveNode;
}
export interface RemoveTextOperation extends Omit<InsertTextOperation, 'type'> {
    type: OperationType.RemoveText;
}
export interface SetMarkOperation extends OperationWithContext {
    type: OperationType.SetMark;
    path: Path;
    offset: number;
    length: number;
    mark: Mark;
    properties: Properties;
}
export interface SetNodeOperation extends OperationWithContext {
    type: OperationType.SetNode;
    path: Path;
    properties: Properties;
    prevProperties: Properties;
}
export interface SetSelectionOperation extends OperationWithContext {
    type: OperationType.SetSelection;
    selection: Selection;
    prevSelection: Selection;
}
export interface SplitNodeOperation extends Omit<MergeNodeOperation, 'type'> {
    type: OperationType.SplitNode;
}
declare type Operation = AddMarkOperation | InsertNodeOperation | InsertTextOperation | MergeNodeOperation | MoveNodeOperation | RemoveMarkOperation | RemoveNodeOperation | RemoveTextOperation | SetMarkOperation | SetNodeOperation | SetSelectionOperation | SplitNodeOperation;
export declare type NonSetSelectionOperation = Exclude<Operation, SetSelectionOperation>;
/**
 * op取反
 *
 * move_node 路径矫正说明：
 *
 * Given the document tree:
 * ```txt
 *         []
 *        / \
 *     [0]   [1]
 *            |
 *          [1,0]
 *            |
 *         [1,0,0]
 *         __/ \__
 * [1,0,0,0]      [1,0,0,1]
 * ```
 * case one:
 * ```ts
 * op.path = [0]
 * op.newPath = [1,0,0,1]
 * Path.isYounger([0], [1,0,0,1])   // true
 * // when path is been moved, the new path should decrement
 * Path.decrement([1,0,0,1], 1, 0) // [0,0,0,1]
 * // final inverted op: [0,0,0,1] -> [0]
 * ```
 * case two:
 * ```ts
 * op.path = [1,0,0,1]
 * op.newPath = [1]
 * Path.isAncestor([1], [1,0,0,1])   // true
 * // when move node to it's ancestor, the new path should increment
 * Path.increment([1,0,0,1], 1, 0) // [2,0,0,1]
 * // final inverted op: [2,0,0,1] -> [1]
 * ```
 */
declare function invert(operation: Operation): Operation;
declare const Operation: {
    invert: typeof invert;
};
export default Operation;
