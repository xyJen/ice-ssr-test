import Element, { ElementProperties } from './element';
import Text, { TextJSON } from './text';
import { SerializeOptions } from '../interfaces/serializable';
import Data from '../interfaces/data';
/**
 * @ignore
 */
export declare type InlineChildren = (Inline | Text)[];
export interface InlineProperties extends ElementProperties {
    type: string;
    nodes?: InlineChildren;
}
export interface InlineJSON {
    klass: 'inline';
    key?: string;
    type: string;
    data?: Data;
    nodes?: (TextJSON | InlineJSON)[];
}
export default class Inline extends Element {
    static create(properties: Inline | InlineProperties | string): Inline;
    static childFromJSON(node: InlineJSON | TextJSON): Text | Inline;
    static fromJSON(json: InlineJSON): Inline;
    static isInline(maybeInline: any): maybeInline is Inline;
    /**
     * 是否是叶子inline
     */
    static isLeafInline(maybeLeafInline: any): maybeLeafInline is Inline;
    protected constructor(props: Required<InlineProperties>);
    readonly type: string;
    readonly nodes: InlineChildren;
    merge(props: Partial<InlineProperties>): Inline;
    set<T extends keyof InlineProperties>(key: T, value: Required<InlineProperties>[T]): Inline;
    toJSON(options?: SerializeOptions): InlineJSON;
}
