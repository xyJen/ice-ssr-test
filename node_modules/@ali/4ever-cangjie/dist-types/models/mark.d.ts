import ImmutableRecord from './immutableRecord';
import Data from '../interfaces/data';
import { Serializable } from '../interfaces/serializable';
export interface MarkProperties<D extends Data = Data> {
    type: string;
    data?: D;
}
export interface MarkJSON<D extends Data = Data> {
    klass?: 'mark';
    type: string;
    data?: D;
}
export default class Mark<D extends Data = Data> extends ImmutableRecord implements Serializable<MarkJSON<D>> {
    static create<SD extends Data = Data>(properties: Mark<SD> | MarkProperties<SD> | string): Mark<SD>;
    static fromJSON(json: MarkJSON): Mark<Data>;
    static isMark(maybeMark: any): maybeMark is Mark;
    protected constructor(props: Required<MarkProperties<D>>);
    readonly type: string;
    readonly data: D;
    merge(props: Partial<MarkProperties<D>>): Mark<D>;
    set<T extends keyof MarkProperties<D>>(key: T, value: Required<MarkProperties<D>>[T]): Mark<D>;
    isEqual(mark?: Mark): boolean;
    toJSON(): MarkJSON<D>;
}
