import Data from '../interfaces/data';
import ImmutableRecord from './immutableRecord';
import Node from './node';
declare function defaultMergeData(a: Data, b: Data): Data;
export interface InjectionProperties<T extends Data = Data> {
    key: string;
    data: T;
    mergeData?: typeof defaultMergeData;
}
export interface InjectionJSON<T extends Data = Data> {
    key: string;
    data: T;
}
export default class Injection<D extends Data = Data> extends ImmutableRecord {
    static create<T extends Data = Data>(props: Injection<T> | InjectionProperties<T>): Injection<T>;
    static isInjection(maybeInjection: any): maybeInjection is Injection;
    static injectIntoNode(injections: Injection[], node: Node): Node;
    static fromJSON(json: InjectionJSON): Injection<Data>;
    constructor(props: InjectionProperties<D>);
    readonly key: string;
    readonly data: D;
    readonly mergeData: typeof defaultMergeData;
    merge(props: Partial<InjectionProperties<D>>): Injection<D>;
    set<T extends keyof InjectionProperties<D>>(key: T, value: InjectionProperties<D>[T]): Injection<D>;
    toJSON(): {
        key: string;
        data: D;
    };
}
export {};
