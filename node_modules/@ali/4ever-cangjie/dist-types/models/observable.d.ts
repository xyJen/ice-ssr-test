export interface Subscription {
    unsubscribe: () => void;
}
export declare type Observer<T> = (data: T) => void;
export declare class Observable<T> {
    private linkHead;
    subscribe(observer: Observer<T>): Subscription;
    protected onData(data: T): void;
}
export declare class Subject<T> extends Observable<T> {
    constructor();
    next(data: T): void;
}
export declare class ReplaySubject<T> extends Observable<T> {
    private replays;
    private readonly max;
    constructor(max?: number);
    subscribe(observer: Observer<T>): Subscription;
    next(data: T): void;
}
