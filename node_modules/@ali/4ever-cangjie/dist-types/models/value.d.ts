import ImmutableRecord from './immutableRecord';
import Injection, { InjectionJSON } from './injection';
import Decoration, { DecorationJSON } from './decoration';
import Selection, { SelectionJSON } from './selection';
import { TextPoint } from './point';
import Node from './node';
import Document, { DocumentJSON } from './document';
import Block from './block';
import Inline from './inline';
import Mark from './mark';
import Operation from './operation';
import { Serializable, SerializeOptions } from '../interfaces/serializable';
export interface ValueProperties {
    data?: Record<string, any>;
    document?: Document;
    selection?: Selection;
    remoteSelections?: Selection[];
    injections?: Injection[];
    decorations?: Decoration[];
    composing?: string;
    isFocused?: boolean;
}
export interface ValueJSON {
    data?: Record<string, any>;
    klass?: 'value';
    document?: DocumentJSON;
    selection?: SelectionJSON;
    remoteSelections?: SelectionJSON[];
    decorations?: DecorationJSON[];
    injections?: InjectionJSON[];
}
export default class Value extends ImmutableRecord implements Serializable<ValueJSON> {
    static create(props?: Value | ValueProperties): Value;
    static fromJSON(json: ValueJSON): Value;
    static isValue(maybeValue: any): maybeValue is Value;
    /**
     * value 的 injections 数组
     */
    readonly injections: Injection[];
    /**
     * value 的 decoration 数组
     */
    readonly decorations: Decoration[];
    /**
     * 是否是focus状态
     */
    readonly isFocused: boolean;
    /**
     * value 的内存数据
     */
    readonly data: Record<string, any>;
    /**
     * 根文档对象
     */
    readonly document: Document;
    /**
     * 当前的选区
     */
    readonly selection: Selection;
    /**
     * 当前的选区
     */
    get rangeSelection(): Selection;
    /**
     * 远程选区
     */
    readonly remoteSelections: Selection[];
    /**
     * 输入法 composing 但是没有确认的文字
     */
    readonly composing: string;
    protected constructor(props: Required<ValueProperties>);
    /**
     * 获取当前选中的blocks
     */
    get blocks(): Block<import("../interfaces/data").default, import("./block").BlockChildren>[];
    /**
     * 获取当前选中的inlines
     */
    get inlines(): Inline[];
    private getElement;
    /**
     * 获取当前选中的anchor位置对应的block
     */
    get anchorBlock(): Block<import("../interfaces/data").default, import("./block").BlockChildren> | null;
    /**
     * 获取当前选中的focus位置对应的block
     */
    get focusBlock(): Block<import("../interfaces/data").default, import("./block").BlockChildren> | null;
    /**
     * 获取当前选中的start位置对应的block
     */
    get startBlock(): Block<import("../interfaces/data").default, import("./block").BlockChildren> | null;
    /**
     * 获取当前选中的end位置对应的block
     */
    get endBlock(): Block<import("../interfaces/data").default, import("./block").BlockChildren> | null;
    /**
     * 获取当前选中的anchor位置对应的inline
     */
    get anchorInline(): Inline | null;
    /**
     * 获取当前选中的focus位置对应的inline
     */
    get focusInline(): Inline | null;
    /**
     * 获取当前选中的start位置对应的inline
     */
    get startInline(): Inline | null;
    /**
     * 获取当前选中的end位置对应的inline
     */
    get endInline(): Inline | null;
    /**
     * 获取当前选中的anchor位置对应的text
     */
    get anchorText(): Node | null;
    /**
     * 获取当前选中的focus位置对应的text
     */
    get focusText(): Node | null;
    /**
     * 获取当前选中的start位置对应的text
     */
    get startText(): Node | null;
    /**
     * 获取当前选中的end位置对应的text
     */
    get endText(): Node | null;
    /**
     * 获取当前选中位置对应的marks。
     * 如果用户设置了正在编辑的样式，返回用户的设置Marks；否则返回当前文字的Marks。
     */
    get activeMarks(): Mark<import("../interfaces/data").default>[];
    /**
     * 是否是blur状态
     */
    get isBlurred(): boolean;
    /**
     * 获取当前选区对应的fragment
     */
    get fragment(): Document;
    merge(props: Partial<ValueProperties>): Value;
    set<T extends keyof ValueProperties>(key: T, value: Required<ValueProperties>[T]): Value;
    updatePoints(document: Document, map: (point: TextPoint) => TextPoint | null, removed?: Node): Value;
    private addMark;
    private insertNode;
    private insertText;
    private mergeNode;
    private moveNode;
    private removeMark;
    private removeNode;
    private removeText;
    private setMark;
    private setNode;
    /**
     * 拷贝出一个新value，并设置选区字段
     */
    setSelection(selection: Selection): Value;
    private splitNode;
    /**
     * 应用operation，并返回一个新value
     */
    applyOperation(operation: Operation): Value;
    toJSON(options?: SerializeOptions): ValueJSON;
}
