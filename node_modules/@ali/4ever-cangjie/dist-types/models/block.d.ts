/**
 * @packageDocumentation
 * @module Models
 */
import Inline, { InlineJSON } from './inline';
import Element, { ElementProperties } from './element';
import Text, { TextJSON } from './text';
import Node from './node';
import { SerializeOptions } from '../interfaces/serializable';
import Data from '../interfaces/data';
export declare type BlockChild = Block | Inline | Text;
export declare type BlockChildren = BlockChild[];
export declare type BlockChildrenJSON = BlockJSON[] | Array<InlineJSON | TextJSON>;
export interface BlockProperties<D = Data, N extends Node[] = BlockChildren> extends ElementProperties<D, N> {
    type: string;
    nodes?: N;
}
export interface BlockJSON<T = Data, N = BlockChildrenJSON> {
    klass: 'block';
    key?: string;
    type: string;
    data?: T;
    nodes?: N;
}
export default class Block<D = Data, N extends Node[] = BlockChildren> extends Element<D, N> {
    static readonly DEFAULT_TYPE = "paragraph";
    static create<SD = Data, SN extends BlockChildren = BlockChildren>(properties: Block<SD, SN> | BlockProperties<SD, SN> | string): Block<SD, SN>;
    static childFromJSON(node: BlockJSON | InlineJSON | TextJSON): any;
    static fromJSON(json: BlockJSON): any;
    static isBlock(maybeBlock: any): maybeBlock is Block;
    static isBlocks(maybeBlocks: any[]): maybeBlocks is Block[];
    /**
     * 是否是叶子 block
     */
    static isLeafBlock(maybeLeafBlock: any): boolean;
    /**
     * 循环获取所有的叶子 block 节点
     */
    static getBlocks(nodes: Node[]): Block[];
    /**
     * 循环获取所有的满足指定 type 的叶子 block 节点
     */
    static getBlocksByType(nodes: Node[], type: string): Block[];
    protected constructor(props: Required<BlockProperties<D, N>>);
    readonly type: string;
    merge(props: Partial<BlockProperties<D, N>>): Block<D, N>;
    set<T extends keyof BlockProperties<D, N>>(key: T, value: Required<BlockProperties<D, N>>[T]): Block<D, N>;
    /**
     * 自身的 nodes 中，是否有 block 类型的节点
     */
    hasBlockChildren(): boolean;
    /**
     * 获取自身树下所有的叶子 block 节点
     */
    getBlocks(): Block[];
    /**
     * 循环获取所有的满足指定 type 的叶子 block 节点
     */
    getBlocksByType(type: string): Block[];
    toJSON(options?: SerializeOptions): BlockJSON<Data, BlockChildrenJSON>;
}
