import { Hot } from '../interfaces/hot';
import { Controller } from '..';
import { PendingType } from '../interfaces/controller';
/**
 * 消费变更产生的热区
 * @param controller
 * @param onHots
 * @param pendingType
 * @param disabled 是否禁用监听
 */
export default function useHots(controller: Controller, onHots: (hots: Hot[]) => void, pendingType?: PendingType, disabled?: boolean): void;
/**
 * 在下一帧时，消费变更产生的热区。当我们期望在热区重渲完成时，再消费热区信息时，可以使用这个 Hook.
 *
 * ## Example
 *
 * ```tsx
 * const Toolbar = props => {
 *   // 假设我们期望热区重渲完成后，获得热区对布局的影响
 *   const onHotsNextFrame = React.useCallback((hots) => {
 *     if (hots.find(hot => hot.node?.type === 'table-cell')) {
 *        const rects = getBoundingClientRect(domRef.current);
 *        // ...
 *     }
 *   }, []);
 *
 *   useHotsAtTheStartOfNextFrame(controller, onHotsNextFrame);
 * }
 * ```
 * @param controller
 * @param onHotsNextFrame
 * @param pendingType
 * @param disabled
 */
export declare function useHotsAtTheStartOfNextFrame(controller: Controller, onHotsNextFrame: (hots: Hot[]) => void, pendingType?: PendingType, disabled?: boolean): void;
/**
 * 消费选区 Pending 的热区
 * @param controller
 * @param onHots
 */
export declare function useSelectingHots(controller: Controller, onHots: (hots: Hot[]) => void): void;
/**
 * 在下一帧消费选区 Pending 的热区
 * @param controller
 * @param onHotsNextFrame
 */
export declare function useSelectingHotsAtTheStartOfNextFrame(controller: Controller, onHotsNextFrame: (hots: Hot[]) => void): void;
/**
 * 消费输入 Pending 的热区
 * @param controller
 * @param onHots
 */
export declare function useInputingHots(controller: Controller, onHots: (hots: Hot[]) => void): void;
/**
 * 在下一帧消费输入 Pending 的热区
 * @param controller
 * @param onHotsNextFrame
 */
export declare function useInputingHotsAtTheStartOfNextFrame(controller: Controller, onHotsNextFrame: (hots: Hot[]) => void): void;
