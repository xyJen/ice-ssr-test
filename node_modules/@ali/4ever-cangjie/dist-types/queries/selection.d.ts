/**
 * @packageDocumentation
 * @ignore
 */
import Controller from '../controller/index';
import Node from '../models/node';
import Point, { EdgePoint, TextPoint } from '../models/point';
export declare type MoveUnit = 'offset' | 'word';
/**
 *
 * move point out of inline IF it's located at inline edges
 *
 * Optimizition for non-void inlines (e.g. <Link> elements) for better experience
 *
 * Before: <link>[anchor]www.dingtalk.com[focus]</link>
 * After: [anchor]<link>www.dingtalk.com</link>[focus]
 */
export declare const correctPointInsideInlineOrBlock: (controller: Controller, point: TextPoint) => TextPoint;
export declare function pointAtDistance(controller: Controller, at: Point, distance?: number, unit?: MoveUnit): TextPoint | EdgePoint;
export declare function pointAtStartOfNode(controller: Controller, node: Node): TextPoint | EdgePoint;
export declare function pointAtEndOfNode(controller: Controller, node: Node): TextPoint | EdgePoint;
export declare function getUpsidePoint(controller: Controller, point: Point, isHanging: boolean, lockedX?: number): TextPoint | EdgePoint | null;
export declare function getUpsideRange(controller: Controller): import("@ali/4ever-cangjie").Selection | null;
export declare function getDownsidePoint(controller: Controller, point: Point, isHanging: boolean, lockedX?: number): TextPoint | EdgePoint | null;
export declare function getDownsideRange(controller: Controller): import("@ali/4ever-cangjie").Selection | null;
