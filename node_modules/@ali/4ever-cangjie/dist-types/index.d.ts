/**
 * @packageDocumentation
 * @ignore
 */
/**
 * Models中存在循环引用，需要保证子类import在前，父类import在后.
 * 详情请参照models/block.ts头部注释。
 */
import { default as Block } from './models/block';
import Element from './models/element';
import Inline from './models/inline';
import Text from './models/text';
import Node from './models/node';
import Controller, { getDirtyKeysFromElementDiffStrictly } from './controller/index';
import Provider from './controller/provider';
import Value from './models/value';
import Document from './models/document';
import Leaf from './models/leaf';
import Mark from './models/mark';
import Injection from './models/injection';
import Decoration from './models/decoration';
import Selection from './models/selection';
import Point, { TextPoint, EdgePoint } from './models/point';
import Path from './models/path';
import History from './models/history';
import ImmutableRecord from './models/immutableRecord';
import Operation, { OperationType } from './models/operation';
import * as Commands from './commands/index';
import * as Queries from './queries/index';
import createPlaceholderPlugin from './plugins/placeholder';
import createPerfLazyRenderPlugin from './plugins/perfLazyRender';
import createPerfFirstRenderPlugin from './plugins/perfFirstRender';
import { useOffsetPosition } from './hooks/useOffsetPosition';
import { useZoom, useZoomContainer, ExternalZoomContext, useExternalZoom } from './hooks/useZoom';
import useLeafBlockResizer from './hooks/useLeafBlockResizer';
import { useSelectionData } from './hooks/useSelectionData';
import { useUserData } from './hooks/useUserData';
import useHots, { useHotsAtTheStartOfNextFrame, useSelectingHots, useInputingHots, useSelectingHotsAtTheStartOfNextFrame, useInputingHotsAtTheStartOfNextFrame } from './hooks/useHots';
import useGroupData from './hooks/useGroupData';
import { useScroll } from './hooks/useScroll';
import Content from './components/content';
import { useScrollableContainer } from './components/ScrollableContainer';
import { useScrollableContent, ScrollableContentContext } from './components/ScrollableContent';
import { ShadowRoot } from './components/shadowDom';
import CangjieDataTransfer from './models/dataTransfer';
import CangjieClipboardEvent from './events/cangjieClipboard';
import CangjieInputEvent from './events/cangjieInput';
import CangjieSelectEvent from './events/cangjieSelect';
import * as constants from './constants';
import * as environment from './utils/environment';
import hotkeys from './utils/hotkeys';
import * as domUtils from './utils/dom/index';
import keyUtils from './utils/keyUtils';
import * as transferUtils from './utils/transfer';
import textUtils from './utils/textUtils';
import setUtils from './utils/setUtils';
import FlushTask from './utils/flushtask';
import * as opContextUtils from './utils/opContext';
import normalizePendingConfig from './utils/normalizePendingConfig';
import { createActionHandlers } from './utils/createAction';
import { getUserData } from './utils/getUserData';
import { omitEmptyObj } from './utils/omitEmpty';
export type { DocStyle, RenderNodeStyleProps, RenderContentStyleProps, } from './hooks/useStyle';
export { useStyle, useContentStyle, useNodeStyle, StyleContext, } from './hooks/useStyle';
export { SelectionSlot } from './components/selection';
export type { SelectionWrapperMap } from './components/selection';
export type { FlushType } from './utils/flushtask';
export type { ControllerProperties, ControllerConfigs, ControllerOptions, EnablePendingConfig, } from './interfaces/controller';
export type { ProviderProps } from './controller/provider';
export type { UserDataContent } from './controller/userData';
export type { ContentProps, ContentOwnProps } from './components/content';
export type { ValueProperties, ValueJSON } from './models/value';
export type { DocumentProperties, DocumentJSON } from './models/document';
export type { ElementProperties } from './models/element';
export type { BlockChild, BlockProperties, BlockJSON } from './models/block';
export type { InlineProperties, InlineJSON, InlineChildren, } from './models/inline';
export type { TextProperties, TextJSON } from './models/text';
export type { LeafProperties, LeafJSON } from './models/leaf';
export type { MarkProperties, MarkJSON } from './models/mark';
export type { InjectionProperties } from './models/injection';
export type { DecorationProperties, DecorationJSON } from './models/decoration';
export type { SelectionProperties, RangeSelectionProperties, SelectionJSON, RangeSelectionJSON, } from './models/selection';
export type { PointProperties, PointJSON, PointEdge } from './models/point';
export type { BlockChildren } from './models/block';
export type { AddMarkOperation, InsertNodeOperation, InsertTextOperation, MergeNodeOperation, MoveNodeOperation, RemoveMarkOperation, RemoveNodeOperation, RemoveTextOperation, SetMarkOperation, SetNodeOperation, SetSelectionOperation, SplitNodeOperation, Properties, } from './models/operation';
export type { Observer, Subscription } from './models/observable';
export * as ContextMenu from './plugins/contextMenu';
export { ACTION_CLEAR_MOBILE_MENU } from './plugins/mobile';
import * as groupActions from './plugins/group/actions';
import * as groupUtils from './plugins/group/utils';
export declare const GroupPlugin: {
    actions: typeof groupActions;
    utils: typeof groupUtils;
};
export type { default as Action, ConvertToPluginActionCreators, PluginActionCreators, ConvertToPluginActionPredicates, PluginActionPredicates } from './interfaces/action';
export type { default as Command, ConvertToPluginCommands, PluginCommands } from './interfaces/command';
export type { default as Change } from './interfaces/change';
export type { default as Plugin } from './interfaces/plugin';
export type { default as Query, QueryNext, ConvertToPluginQueries, PluginQueries, isHideSelectionQuery } from './interfaces/query';
export type { Schema } from './plugins/normalization';
export type { ContextMenuItem } from './interfaces/contextMenu';
export type { default as RenderContentProps } from './interfaces/renderEditableProps';
export type { default as RenderEditableProps } from './interfaces/renderEditableProps';
export type { default as RenderNodeProps } from './interfaces/renderNodeProps';
export type { default as RenderMarkProps } from './interfaces/renderMarkProps';
export type { default as Data } from './interfaces/data';
export type { InputData } from './interfaces/input';
export type { Hot } from './interfaces/hot';
export type { NodeSelectToolbarItem, NodeSelectToolbarActionPayload } from './interfaces/nodeSelectToolbar';
export type { IsDataChangeAffectParentQueryParams } from './queries/hots';
export type { SnippetConfig, SnippetConfigs, SnippetItemBase } from './interfaces/snippet';
export { PendingType } from './interfaces/controller';
export type { Group } from './interfaces/group';
declare class RangeSelection extends Selection {
}
export { Controller, Provider, Value, Node, Element, Document, Block, Inline, Text, Leaf, Mark, Injection, Decoration, Selection, RangeSelection, Point, TextPoint, EdgePoint, Path, History, ShadowRoot, ImmutableRecord, Operation, OperationType, Commands, Queries, createPlaceholderPlugin, createPerfLazyRenderPlugin, createPerfFirstRenderPlugin, useOffsetPosition, useZoom, useZoomContainer, useExternalZoom, ExternalZoomContext, useLeafBlockResizer, useSelectionData, useUserData, useHots, useSelectingHots, useInputingHots, useHotsAtTheStartOfNextFrame, useSelectingHotsAtTheStartOfNextFrame, useInputingHotsAtTheStartOfNextFrame, useGroupData, useScroll, Content, useScrollableContainer, useScrollableContent, ScrollableContentContext, CangjieDataTransfer, CangjieClipboardEvent, CangjieInputEvent, CangjieSelectEvent, constants, environment, hotkeys, domUtils, keyUtils, textUtils, setUtils, transferUtils, FlushTask, opContextUtils, createActionHandlers, getUserData, omitEmptyObj, normalizePendingConfig, getDirtyKeysFromElementDiffStrictly, };
export { createSchema, createStrictSchema } from './mo/schema/createSchema';
export * from './mo/index';
export type { MoPluginSchema } from './mo/type';
export type { BiPlugin, BiFactory, MobileBiFactory } from './interfaces/plugin/bi';
export type { ZhiPlugin, ZhiFactory, MobileZhiFactory } from './interfaces/plugin/zhi';
export type { MoPluginConfig, BiPluginConfig, ZhiPluginConfig, MobileBiPluginConfig, MobileZhiPluginConfig } from './interfaces/plugin/base';
