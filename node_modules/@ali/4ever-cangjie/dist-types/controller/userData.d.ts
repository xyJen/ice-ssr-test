import Node from '../models/node';
import Controller from './index';
import { Subject } from '../models/observable';
import Operation from '../models/operation';
import Document from '../models/document';
declare type uid = string;
declare type uuid = string;
export declare type UserData = Record<uid, Record<uuid, UserDataContent>>;
export interface UserDataContent {
}
export default class UserDataManager {
    update$: Subject<{
        uuid: string;
    }>;
    private controller;
    private localData;
    constructor(controller: Controller);
    get<T extends keyof UserDataContent>(node: Node | null, key: T): UserDataContent[T] | undefined;
    set<T extends keyof UserDataContent>(node: Node | null, properties: Record<T, UserDataContent[T]>): Controller;
    setLocal<T extends keyof UserDataContent>(node: Node | null, properties: Record<T, UserDataContent[T]>): Controller;
    delete<T extends keyof UserDataContent>(node: Node | null, keys: T[]): Controller;
    deleteLocal<T extends keyof UserDataContent>(node: Node | null, keys: T[]): Controller;
    flush: (ops: Operation[]) => void;
    mergeUserData: (target: Document) => Controller;
    private refreshData;
    private updateNodes;
    private mergeProperties;
    private deleteData;
    private deleteProperties;
}
export {};
