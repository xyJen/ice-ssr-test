import Controller from '.';
import { OperationWithValue } from '../interfaces/controller';
import { Group, GroupWithKey } from '../interfaces/group';
import Element from '../models/element';
import { ReplaySubject } from '../models/observable';
import Operation from '../models/operation';
declare type Groups = Record<string, Group>;
/**
 * 模型分组管理
 */
declare class GroupManager {
    private groups;
    groups$: ReplaySubject<Groups>;
    private controller;
    private CACHE;
    constructor(controller: Controller);
    /**
     * 清理 group manager 内存占用
     */
    cleanup(): void;
    /**
     * 获得指定 key 的分组
     * @param key
     * @returns
     */
    getGroup(key: string): Group<Record<string, any>>;
    /**
     * 获得所有分组
     * @returns
     */
    getGroups(): Groups;
    /**
     * 向订阅节点通知最新的分组信息
     * @param force
     * @returns
     */
    notifyNewGroups(force?: boolean): this;
    /**
     * 设置分组数据
     * @param key
     * @param data
     * @returns
     */
    setGroupData<T = {}>(key: string, data: T): this;
    /**
     * 融合分组数据
     * @param key
     * @param data
     * @returns
     */
    mergeGroupData<T = {}>(key: string, data: Partial<T>): this;
    /**
     * 生成全文所有的 Groups
     */
    generateAllGroups(): this;
    initGroups(groups: Groups): this;
    /**
     * 获得节点所在的分组序列
     * @param node
     * @returns
     */
    getNodeGroups(node: Element): GroupWithKey[];
    /**
     * 针对特殊变更，重新分组
     * @param operationWithValue
     */
    regenerateGroup(operationWithValue: OperationWithValue & {
        operation: Operation;
    }): this;
    private removeGroup;
    private generateGroup;
    private getNodesInGroup;
    private regenerateGroupFrom;
}
export default GroupManager;
