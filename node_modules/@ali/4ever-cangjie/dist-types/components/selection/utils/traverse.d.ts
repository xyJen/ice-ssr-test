export interface TraverseNodeContext {
    scrollableKey?: string;
    gapLabel?: string;
    /**
     * 排版模式下，不同 line 内的 span 可能重叠，需要增加 lineId 标识以避免被识别为同一行
     */
    lineId?: string;
    /**
     * 当前节点下叶子节点(leaf or void)是否只有一个
     */
    onlyLeafChild?: boolean;
}
export declare type TraverseNodeHandler = (decesdant: HTMLElement, context?: TraverseNodeContext) => {
    stopTraverse: boolean;
    context?: TraverseNodeContext;
};
interface TraverseOptions {
    /**
     * start block DOM 的 Path：自顶向下排列
     */
    startPath: HTMLElement[];
    /**
     * end block DOM 的 Path：自顶向下排列
     */
    endPath: HTMLElement[];
    /**
     * 当前节点的 DOM Path
     */
    rootPath: HTMLElement[];
    /**
     * 是否已遍历到 start block DOM
     */
    isStarted: boolean;
    /**
     * 是否已遍历到 end block DOM
     */
    isEnded: boolean;
}
export declare function traverseDOMTree(root: HTMLElement, callback: TraverseNodeHandler, parentContext: TraverseNodeContext | undefined, options: TraverseOptions): {
    isStarted: boolean;
    isEnded: boolean;
};
/**
 * 情况一：startAncestor, endAncestor 为相同节点
 * startAncestor/endAncestor/commonPath
 *                / \
 *               /   \
 *             void  block
 *                     /\
 *                    /  \
 *                 leaf  leaf
 *
 * 情况二：startAncestor, endAncestor 为兄弟节点
 *             commonPath
 *             /    |    \
 *            /     |     \
 *  startAncestor  ...  endAncestor
 *     / \               /    \
 *    /   \             /      \
 * void    block      block     block
 *          /\         /\        /\
 *         /  \       /  \      /  \
 *      leaf  leaf leaf  leaf leaf leaf
 * (startPath)              (endPath)
 *
 * 情况三：startAncestor, endAncestor 为兄弟节点，且 startPath = startAncestor or endPath = endAncestor
 *             commonPath
 *             /    |    \
 *            /     |     \
 *  startAncestor  ...  endAncestor
 * (startPath/void)       /    \
 *                       /      \
 *                     block     block
 *                      / \       / \
 *                     /   \     /   \
 *                   leaf  leaf leaf leaf
 *                                 (endPath)
 */
export declare function traverseDOMForest(startPath: HTMLElement[], endPath: HTMLElement[], callback: TraverseNodeHandler): void;
export {};
