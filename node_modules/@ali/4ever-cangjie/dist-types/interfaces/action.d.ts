export default interface Action<P extends Record<string, any> = Record<string, any>> {
    type: string | symbol;
    payload?: P;
}
export declare type ActionCreator<P extends Record<string, any> = Record<string, any>> = (...args: any[]) => Action<P>;
export declare type ActionPredicate<P extends Action = Action<any>> = (action: Action<any>) => action is P;
export interface PluginActionCreators {
}
export interface PluginActionPredicates {
}
export declare type ConvertToPluginActionCreators<T extends Record<string, ActionCreator>> = {
    [n in keyof T]: T[n];
};
export declare type ConvertToPluginActionPredicates<T extends Record<string, ActionPredicate>> = {
    [n in keyof T]: T[n];
};
