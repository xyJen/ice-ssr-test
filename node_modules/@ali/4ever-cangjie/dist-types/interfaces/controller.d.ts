/**
 * @packageDocumentation
 * @module Controller
 */
import Change from './change';
import Plugin from './plugin';
import { ContextMenuLocale } from '../locale/contextMenu';
import Value, { ValueProperties } from '../models/value';
import { FlushType } from '../utils/flushtask';
import Operation from '../models/operation';
import { PendingQueueProps } from '../controller/pendingQueue';
import Selection from '../models/selection';
import { VirtualizeOptions } from '../virtualize/interface';
import { UUIDConfig } from '../plugins/uuid/types';
/**
 * @ignore
 */
export interface ControllerConfigs {
    /**
     * 编辑器内核的 plugins 选项
     */
    plugins?: {
        /**
         * 右键菜单的国际化文案。
         */
        contextMenu?: ContextMenuLocale;
        /**
         * 移动端插件配置（选择菜单、放大镜）
         */
        mobile?: {
            enableZoomer: boolean;
        };
    };
    history?: {
        /**
         * undo 队列最大长度
         */
        maxHistorySize?: number;
    };
}
/**
 * @ignore
 */
export declare type ChangeEventHandler = (change: Change) => void;
export interface ControllerProperties {
    /**
     * 业务ID。业务方自行通过constructor设置、自行使用
     */
    biz?: string;
    /**
     * 展示相应 uid 下的用户数据
     */
    dataUid?: string | number | undefined;
    /**
     * 插件集合
     */
    plugins?: Plugin[];
    /**
     * 文档的数据[[Value]]对象
     */
    value: Value;
    /**
     * onChange回调。业务方需要手动设置新的value到Provider中，调用编辑器重新渲染，用户才可以看到UI改变。
     */
    onChange?: ChangeEventHandler;
    /**
     * 是否是只读模式
     */
    readOnly?: boolean;
    /**
     * 是否禁用拷贝（仅在只读模式生效）
     */
    canCopy?: boolean;
    /**
     * 是否自动获取焦点
     */
    autoFocus?: boolean;
    /**
     * Controller 调度 flush 的方法
     * - microtask: 使用微任务（Promise.then）进行调度
     * - frametask: 使用浏览器 animationFrame 进行调度
     * - idletask: 使用浏览器 idleCallback 进行调度
     *
     * WARN: Sometimes request idle callback in Safari will never be called! Please use frametask instead of idletask.
     * @description 使用不同的调度类型会产生不同的上屏效果，microtask 执行的速度最快，但是在连续输入场景可能会出现时间阻塞，使用 idletask 可以获得
     * 最佳的输入上屏体验。根据浏览器的支持程度，会对 flushType 进行降级，默认使用 microtask。
     * @default 'microtask'
     */
    flushType?: FlushType;
    /**
     * 编辑器配置
     *
     * 目前提供的配置：移动端「复制粘贴」气泡的国际化文案配置
     */
    configs?: ControllerConfigs;
    /**
     * 编辑器 busy 状态变化
     */
    onBusyStateChange?: (isBusy: boolean) => void;
    /**
     * 变更进入 Pending 之后
     */
    onPending?: (value: Value) => void;
}
export interface ControllerOptions {
    normalize?: boolean;
    enablePending?: EnablePendingConfig;
    /** WARN: Test only */
    __pendingQueue__?: Partial<PendingQueueProps>;
    /** blur 时不显示所有 selection, 优先级低于 showCaret */
    hideSelectionOnBlur?: boolean;
    showCaret?: ShowCaretConfig;
    /** uuid 配置 */
    uuid?: UUIDConfig;
    /** 虚拟化配置 */
    virtualize?: VirtualizeOptions;
}
export interface ShowCaretConfig {
    onBlur?: boolean;
    onReadOnly?: boolean;
}
export declare enum PendingType {
    input = "input",
    selection = "selection"
}
export declare type EnablePending = Partial<Record<PendingType, boolean>>;
export declare enum PendingConfigType {
    input = "input",
    selection = "selection"
}
export declare type EnablePendingConfig = Partial<Record<PendingConfigType, boolean>> | boolean;
export interface OperationWithValue<T extends keyof ValueProperties = keyof ValueProperties> {
    /** 若为 null，则为 `setValue` 全量变更 */
    operation: Operation | null;
    /** 变更前的 value */
    value: Value;
    /** 变更后的 value */
    newValue: Value;
    /** 设置的 value 属性 key */
    key?: T;
}
export interface Terminal {
    range: Selection;
}
