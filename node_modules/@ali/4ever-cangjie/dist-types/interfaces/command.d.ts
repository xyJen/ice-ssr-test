/**
 * @packageDocumentation
 * @module Interfaces
 */
import type Controller from '../controller/index';
import type { RestParameters } from './utility';
export default interface Command {
    (controller: Controller, ...args: any[]): Controller;
    type?: string;
    args?: any[];
}
/**
 * 新的 Command type
 *
 * Command 通过 string 实现插件可插拔，同时支持 typing
 */
export interface PluginCommand {
    name: string;
    func: (...args: any[]) => Controller;
}
/**
 * 插件目前 Command 的写法是 { cmd1: func1; cmd2: func}
 * 通过 ConvertToPluginCommands 可将 typeof commands 转换为 PluginCommand union
 */
export declare type ConvertToPluginCommands<T extends Record<string, Command>> = {
    [n in keyof T]: {
        name: n;
        func: (...args: RestParameters<T[n]>) => ReturnType<T[n]>;
    };
};
export interface PluginCommands {
}
export declare type PluginCommandName<T extends keyof PluginCommands> = PluginCommands[T] extends PluginCommand ? PluginCommands[T]['name'] : string;
export declare type PluginCommandArgs<T extends keyof PluginCommands> = PluginCommands[T] extends PluginCommand ? Parameters<PluginCommands[T]['func']> : any[];
