/**
 * @packageDocumentation
 * @module Interfaces
 */
import * as React from 'react';
import Controller from '../controller/index';
import { Schema } from '../plugins/normalization';
import Selection from '../models/selection';
import Decoration from '../models/decoration';
import Node from '../models/node';
import Document from '../models/document';
import Block from '../models/block';
import CangjieInputEvent from '../events/cangjieInput';
import onCangjieSelect from '../events/cangjieSelect';
import Command from './command';
import CommandEvent from './commandEvent';
import Query from './query';
import QueryEvent from './queryEvent';
import type { default as Action, ActionCreator, ActionPredicate } from './action';
import Normalizer from './normalizer';
import type { Models } from './models';
import RenderEditableProps from './renderEditableProps';
import RenderMarkProps from './renderMarkProps';
import CangjieClipboardEvent from '../events/cangjieClipboard';
import { ContextMenuItem } from './contextMenu';
import NodeProps from './nodeProps';
import Next from './next';
import RenderNode from './renderNode';
import RenderText from './renderText';
import Injection from '../models/injection';
import type { RenderNodeStyleProps, RenderContentStyleProps } from '../hooks/useStyle';
import CangjiePerfEvent from '../events/cangjiePerf';
import Operation from '../models/operation';
import Value from '../models/value';
import { CaretAppearance } from '../components/selection';
import { SnippetConfigs } from './snippet';
import { Group } from './group';
import Element from '../models/element';
import RenderGroup from './renderGroup';
import { GROUP_COLLAPSED_KEY } from '../constants';
import type { GetNodeSelectToolbarItems, BeforeCopySelectedNodes } from './nodeSelectToolbar';
export default interface Plugin {
    /**
     * 插件自定义 Command 注册
     */
    commands?: Record<string, Command>;
    /**
     * 插件自定义 Action 注册
     */
    queries?: Record<string, Query>;
    /**
     * 插件自定义 schema 添加
     */
    schema?: Schema;
    /**
     * 定义插件的节点信息
     */
    models?: Models;
    toolbar?: {
        buttons: Record<string, React.ComponentType<any>>;
        locale: any;
    };
    getSnippetConfig?: (controller: Controller, next: Next<SnippetConfigs>) => SnippetConfigs;
    getNodeSelectToolbarItems?: GetNodeSelectToolbarItems;
    beforeCopySelectedNodes?: BeforeCopySelectedNodes;
    /**
     * 右键菜单
     *
     * 如果插件希望处理右键菜单的列表和 Action，可以在这里处理
     */
    contextMenu?: (controller: Controller, next: Next<ContextMenuItem[]>) => ContextMenuItem[];
    /**
     * 对 Node 添加 Decoration
     *
     * 例如 Link 插件，会对符合 protocol 规则的节点，添加一个蓝色和下划线 Decoration
     */
    decorateNode?: (node: Node, controller: Controller, next: Next<Decoration[]>) => Decoration[];
    /**
     * 为 Node 注入数据
     */
    injectToNode?: (node: Node, controller: Controller, next: Next<Injection[]>) => Injection[];
    /**
     * 对 Document.nodes | Block.nodes 进行分组
     */
    groupNodes?: (remainedRange: [number, number], context: {
        parent: Document | Block;
        groups: Block[];
    }, controller: Controller, next: Next<{
        node: Block;
        remainedRange: [number, number];
    }>) => {
        node: Block;
        remainedRange: [number, number];
    };
    /**
     * 对 Node 进行 Normalize 事件
     */
    normalizeNode?: (node: Node, controller: Controller, next: Next<Normalizer>) => Normalizer;
    /**
     * 渲染编辑器内容区域事件
     */
    renderEditable?: (props: RenderEditableProps, controller: Controller, next: Next<React.ReactNode>) => React.ReactElement;
    /**
     * @deprecated
     */
    renderContent?: (props: RenderEditableProps, controller: Controller, next: Next<React.ReactNode>) => React.ReactElement;
    /**
     * 渲染 Value 中的节点事件
     */
    renderNode?: RenderNode | Record<string, RenderNode>;
    /** 渲染 Group */
    renderGroup?: RenderGroup;
    /**
     * 渲染文本
     * @description 仅在 Test 环境下工作
     */
    renderText?: RenderText;
    /**
     * 渲染 Mark 事件
     */
    renderMark?: (props: RenderMarkProps, controller: Controller, next: Next<JSX.Element>) => JSX.Element;
    /**
     * 渲染光标事件
     */
    renderCaret?: (props: {
        position: CaretAppearance;
        color: string;
    }, controller: Controller, next: Next<React.ReactNode>) => React.ReactNode;
    /**
     * 渲染远程光标事件
     */
    renderRemoteCaret?: (props: {
        selection: Selection;
        position: CaretAppearance;
    }, controller: Controller, next: Next<React.ReactNode>) => React.ReactNode;
    /**
     * 渲染性能优化，控制是否对某个节点进行渲染
     */
    shouldNodeComponentUpdate?: (prevProps: NodeProps, nextProps: NodeProps, controller: Controller, next: Next<boolean | null>) => boolean | null;
    /**
     * 声明插件响应的 action 的 creator
     */
    actions?: Record<string, ActionCreator>;
    /**
     * 声明插件响应的 action 的 predicate
     */
    isActions?: Record<string, ActionPredicate>;
    /**
     * Action 的处理事件
     */
    onAction?: (action: Action, controller: Controller, next: Next) => void;
    /**
     * Value 的 onChange 处理事件
     */
    onChange?: (controller: Controller, next: Next) => void;
    /**
     * Command 的处理事件
     */
    onCommand?: (cmd: CommandEvent, controller: Controller, next: Next) => void;
    /**
     * @ignore
     * @internal
     */
    onConstruct?: (controller: Controller, next: Next) => void;
    /**
     * Query 的处理事件
     */
    onQuery?: (qry: QueryEvent, controller: Controller, next: Next<any>) => any;
    /**
     * applyOperation 事件
     */
    onApplyOperation?: (op: Operation, controller: Controller, next: Next<void>) => void;
    /**
     * 获取焦点事件
     */
    onCangjieFocus?: (controller: Controller, next: Next) => void;
    /**
     * 失去焦点事件
     */
    onCangjieBlur?: (controller: Controller, next: Next) => void;
    /**
     * 用户输入内容事件
     */
    onCangjieInput?: (event: CangjieInputEvent, controller: Controller, next: Next) => void;
    /**
     * 光标位置、选区更新事件
     */
    onCangjieSelect?: (event: onCangjieSelect, controller: Controller, next: Next) => void;
    /**
     * 编辑器的复制事件
     */
    onCangjieCopy?: (event: CangjieClipboardEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑器的剪切事件
     */
    onCangjieCut?: (event: CangjieClipboardEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑器的粘贴事件
     */
    onCangjiePaste?: (event: CangjieClipboardEvent, controller: Controller, next: Next) => void;
    /**
     * 用户在输入法状态下，正在编辑的 composing 内容改变事件
     */
    onCangjieComposingChange?: (composing: string, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的点击事件
     */
    onClick?: (event: React.MouseEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的复制事件
     *
     * 这里是浏览器的事件，和 onCangjieCopy 不太一样，业务可以进行区分处理
     */
    onCopy?: (event: React.ClipboardEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的剪切事件
     *
     * 这里是浏览器的事件，和 onCangjieCut 不太一样，业务可以进行区分处理
     */
    onCut?: (event: React.ClipboardEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的粘贴事件
     *
     * 这里是浏览器的事件，和 onCangjiePaste 不太一样，业务可以进行区分处理
     */
    onPaste?: (event: React.ClipboardEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 KeyDown 事件
     */
    onKeyDown?: (event: React.KeyboardEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 KeyUp 事件
     */
    onKeyUp?: (event: React.KeyboardEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 MouseDown 事件
     */
    onMouseDown?: (event: React.MouseEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 MouseMove 事件
     */
    onMouseMove?: (event: React.MouseEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 MouseUp 事件
     */
    onMouseUp?: (event: React.MouseEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 TouchStart 事件
     */
    onTouchStart?: (event: React.TouchEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 TouchMove 事件
     */
    onTouchMove?: (event: React.TouchEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 TouchEnd 事件
     */
    onTouchEnd?: (event: React.TouchEvent, controller: Controller, next: Next) => void;
    onContextMenu?: (event: React.MouseEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 DragStart 事件
     */
    onDragStart?: (event: React.DragEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 Drop 事件
     */
    onDrop?: (event: React.DragEvent, controller: Controller, next: Next) => void;
    /**
     * 编辑区域的 DragEnter 事件
     */
    onDragEnter?: (event: React.DragEvent, controller: Controller, next: Next) => void;
    /**
     * 性能统计事件
     */
    onCangjiePerf?: (event: CangjiePerfEvent, controller: Controller, next: Next) => void;
    /**
     * 渲染节点样式
     */
    getNodeStyle?: (props: RenderNodeStyleProps, controller: Controller, next: Next) => React.CSSProperties | void;
    /**
     * 渲染根节点样式
     */
    getContentStyle?: (props: RenderContentStyleProps, controller: Controller, next: Next) => React.CSSProperties | void;
    /**
     * 清理函数
     */
    onCleanup?: (controller: Controller, next: Next) => void;
    /**
     * 编辑器重置 Value 时
     */
    onResetValue?: (value: Value, controllerValue: Value, controller: Controller, next: Next) => void;
    /**
     * OP 映射函数：在编辑器 Apply OP 之前，可以通过实现 `mapOperation` 来改造 OP
     */
    mapOperation?: (operations: Operation, controller: Controller, next: (op: Operation) => Operation) => Operation;
    /**
     * 生成分组
     */
    generateGroup?: (element: Element, controller: Controller, next: Next) => (Pick<Group, 'type'> & {
        data: Omit<Group['data'], typeof GROUP_COLLAPSED_KEY>;
    }) | void;
}
