import Controller from '../controller';
import { OperationWithValue, PendingType } from './controller';
export declare type Effect<T> = (ops: OperationWithValue[], ctx: T) => void;
export declare type ShouldAppend = (prevOps: OperationWithValue[], ops: OperationWithValue[]) => boolean;
export declare type Decorate<T> = (ops: OperationWithValue[]) => T;
export declare type Pending<Context = any> = {
    /** 类型 */
    type: PendingType;
    /** op pending 时执行的 effects */
    effect: Effect<Context>;
    /** 是否是追加到已 Pending 的 Operations */
    shouldAppend?: ShouldAppend;
    /** 自定义 Pending 上下文 */
    decorate?: Decorate<Context>;
};
/** 匹配一个模式的上下文 */
export interface GetPendingParams {
    ops: OperationWithValue[];
    controller: Controller;
}
/** 判断上下文能否命中模式的真值检测函数 */
export declare type PendingPredicate = (params: GetPendingParams) => boolean;
/** 获得一个 Pending 的 getter */
export declare type PendingGetter<T> = (params: GetPendingParams) => Pending<T> | null;
/** 模式匹配 */
export declare type PendingPattern<T = any> = [PendingPredicate, PendingGetter<T>];
