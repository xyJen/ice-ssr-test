/**
 * @packageDocumentation
 * @ignore
 */
import type Controller from '../controller/index';
import type Selection from '../models/selection';
import type { RestParameters } from './utility';
export default interface Query {
    (controller: Controller, ...args: any[]): any;
}
export declare type QueryNext = undefined;
/**
 * 新的 Query type
 *
 * query 通过 string 实现插件可插拔，同时支持 typing
 */
interface PluginQuery {
    name: string;
    func: (...args: any[]) => any;
}
export declare type isHideSelectionQuery = (controller: Controller, { selection }?: {
    selection?: Selection;
}) => boolean | undefined;
export interface PluginQueries extends ConvertToPluginQueries<{
    isHideSelectionQuery: any;
}> {
}
export declare type PluginQueryName<T extends keyof PluginQueries> = PluginQueries[T] extends PluginQuery ? PluginQueries[T]['name'] : string;
export declare type PluginQueryArgs<T extends keyof PluginQueries> = PluginQueries[T] extends PluginQuery ? Parameters<PluginQueries[T]['func']> : any[];
export declare type PluginQueryReturn<T extends keyof PluginQueries> = PluginQueries[T] extends PluginQuery ? (ReturnType<PluginQueries[T]['func']> | null) : any;
/**
 * 插件目前 queries 的写法是 { q1: func1; q2: func}
 *
 * 通过 ConvertPluginQuery 可将 typeof queries 转换为 PluginQuery union
 */
export declare type ConvertToPluginQueries<T extends Record<string, Query>> = {
    [n in keyof T]: {
        name: n;
        func: (...args: RestParameters<T[n]>) => ReturnType<T[n]>;
    };
};
export {};
