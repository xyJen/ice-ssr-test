/// <reference types="lodash" />
import Controller from '../controller/index';
import Selection, { SupportPointName } from '../models/selection';
import Node from '../models/node';
import Element from '../models/element';
import Document from '../models/document';
import { MoveUnit } from '../queries/selection';
export declare const movePointForward: import("lodash").CurriedFunction4<Controller, SupportPointName, number, MoveUnit, (selection: Selection) => Selection>;
export declare const movePointBackward: import("lodash").CurriedFunction4<Controller, SupportPointName, number, MoveUnit, (selection: Selection) => Selection>;
export declare const movePointWordBackward: import("lodash").CurriedFunction2<Controller, SupportPointName, (selection: Selection) => Selection>;
export declare const movePointWordForward: import("lodash").CurriedFunction2<Controller, SupportPointName, (selection: Selection) => Selection>;
/**
 * 选区是否包含整个 Element
 */
export declare const isSelectionContainsElement: (selection: Selection | null, element: Element) => boolean;
/**
 * 判断 `selection` 是否完全在 `node` 内部
 * @param node
 * @param document
 * @param selection
 * @returns
 */
export declare const isSelectionInNode: (node: Node, document: Document, selection: Selection) => boolean;
/**
 * 获得裁剪后的选区
 * @param controller
 * @param selection
 * @param visibles
 */
export declare function getCroppedSelection(controller: Controller, selection: Selection, visibles: string[]): Selection | null;
