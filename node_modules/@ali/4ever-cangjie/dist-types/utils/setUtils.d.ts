declare type EqualFunc<T> = (a: T, b: T) => boolean;
declare const _default: {
    add<T>(as: T[], b: T): T[];
    remove<T_1>(as: T_1[], b: T_1): T_1[];
    has<T_2>(as: T_2[], b: T_2, isEqual?: EqualFunc<T_2>): boolean;
    intersect<T_3>(as: T_3[], bs: T_3[]): T_3[];
    union<T_4>(as: T_4[], bs: T_4[], isEqual?: EqualFunc<T_4>): T_4[];
    removeDuplicate<T_5>(as: T_5[]): T_5[];
    isSuperSet(as: any[], bs: any[]): boolean;
};
export default _default;
