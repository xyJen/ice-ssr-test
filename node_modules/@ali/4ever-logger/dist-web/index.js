import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import WeLogger from '@ali/we-logger-main';
import DebugAppender from '@ali/we-logger-appender-debug';
var version = '2.0.0';
/**
 * @see https://arms.console.aliyun.com/retcode?pid=en91t6prdd%4081db28b43ff68d6#/index
 */

var PID = 'en91t6prdd@81db28b43ff68d6';
/**
 * 判断是否是本地环境
 */

var IS_LOCAL = process.env.NODE_ENV === 'development';
var IS_TEST = process.env.NODE_ENV === 'test';
export var EnvEnum;

(function (EnvEnum) {
  EnvEnum["DAILY"] = "daily";
  EnvEnum["PRE"] = "pre";
  EnvEnum["PROD"] = "prod";
  EnvEnum["LOCAL"] = "local";
  EnvEnum["UNKNOWN"] = "unknown";
})(EnvEnum || (EnvEnum = {}));

var substr2EnvMap = new Map([['pre-', EnvEnum.PRE], ['daily-', EnvEnum.DAILY]]);
export var getEnvironment = function getEnvironment() {
  var _window = window,
      hostname = _window.location.hostname;

  for (var _iterator = _createForOfIteratorHelperLoose(substr2EnvMap), _step; !(_step = _iterator()).done;) {
    var _step$value = _step.value,
        substr = _step$value[0],
        env = _step$value[1];

    if (hostname.startsWith(substr)) {
      return env;
    }
  }

  return EnvEnum.PROD;
};
/**
 * 默认需要一个 debug appender, 外层业务也可以主动移除
 */

export var debugAppender = new DebugAppender('EDITOR:LOGGER');
/**
 * 默认配置好一个 arms appender, 需要外层业务手动注入才能够生效
 * @see https://arms.console.aliyun.com/retcode?pid=en91t6prdd%4081db28b43ff68d6#/index
 */

export var getArmsAppender = function getArmsAppender() {
  if (IS_TEST) {
    return null;
  } // 单测环境下 Arms 会在 Console 抛错，这里做一个优化处理
  // eslint-disable-next-line no-underscore-dangle


  var _ArmsAppender = require('@ali/we-logger-appender-arms')["default"];

  return new _ArmsAppender({
    release: version,
    pid: PID,
    appType: 'web',
    // SDK 层不监听 hashchange
    enableSPA: false,
    // SDK 层不监听 HTTP
    disableHook: true,
    // 本地开发环境不上报
    disabled: IS_LOCAL,
    environment: getEnvironment()
  });
};

var Logger = /*#__PURE__*/function (_WeLogger) {
  _inheritsLoose(Logger, _WeLogger);

  function Logger() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _WeLogger.call.apply(_WeLogger, [this].concat(args)) || this;
    _this.armsAppender = null;
    _this.sentPV = false;
    _this.bizName = location.host;
    return _this;
  }

  var _proto = Logger.prototype;

  _proto.setEnabled = function setEnabled(flag) {
    if (flag === void 0) {
      flag = true;
    }

    if (flag) {
      if (!this.armsAppender) {
        this.armsAppender = getArmsAppender();
        this.armsAppender && this.append(this.armsAppender);
      }

      if (!this.sentPV && this.armsAppender) {
        // Note: page's value
        this.armsAppender.getArms().setPage(location.href);
        this.armsAppender.sum("BIZ: " + this.bizName);
        this.sentPV = true;
      }
    } else if (this.armsAppender) {
      this.remove(this.armsAppender);
      this.armsAppender = null;
    }
  };

  _proto.setBizName = function setBizName(name) {
    this.bizName = name;
    return this;
  };

  return Logger;
}(WeLogger);

var logger = new Logger().append(debugAppender);
export default logger;
//# sourceMappingURL=index.js.map