"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEnvironment = exports.getArmsAppender = exports.default = exports.debugAppender = exports.EnvEnum = void 0;

var _weLoggerMain = _interopRequireDefault(require("@ali/we-logger-main"));

var _weLoggerAppenderDebug = _interopRequireDefault(require("@ali/we-logger-appender-debug"));

const version = '2.0.0';
/**
 * @see https://arms.console.aliyun.com/retcode?pid=en91t6prdd%4081db28b43ff68d6#/index
 */

const PID = 'en91t6prdd@81db28b43ff68d6';
/**
 * 判断是否是本地环境
 */

const IS_LOCAL = process.env.NODE_ENV === 'development';
const IS_TEST = process.env.NODE_ENV === 'test';
let EnvEnum;
exports.EnvEnum = EnvEnum;

(function (EnvEnum) {
  EnvEnum["DAILY"] = "daily";
  EnvEnum["PRE"] = "pre";
  EnvEnum["PROD"] = "prod";
  EnvEnum["LOCAL"] = "local";
  EnvEnum["UNKNOWN"] = "unknown";
})(EnvEnum || (exports.EnvEnum = EnvEnum = {}));

const substr2EnvMap = new Map([['pre-', EnvEnum.PRE], ['daily-', EnvEnum.DAILY]]);

const getEnvironment = () => {
  const {
    location: {
      hostname
    }
  } = window;

  for (const [substr, env] of substr2EnvMap) {
    if (hostname.startsWith(substr)) {
      return env;
    }
  }

  return EnvEnum.PROD;
};
/**
 * 默认需要一个 debug appender, 外层业务也可以主动移除
 */


exports.getEnvironment = getEnvironment;
const debugAppender = new _weLoggerAppenderDebug.default('EDITOR:LOGGER');
/**
 * 默认配置好一个 arms appender, 需要外层业务手动注入才能够生效
 * @see https://arms.console.aliyun.com/retcode?pid=en91t6prdd%4081db28b43ff68d6#/index
 */

exports.debugAppender = debugAppender;

const getArmsAppender = function () {
  if (IS_TEST) {
    return null;
  } // 单测环境下 Arms 会在 Console 抛错，这里做一个优化处理
  // eslint-disable-next-line no-underscore-dangle


  const _ArmsAppender = require('@ali/we-logger-appender-arms').default;

  return new _ArmsAppender({
    release: version,
    pid: PID,
    appType: 'web',
    // SDK 层不监听 hashchange
    enableSPA: false,
    // SDK 层不监听 HTTP
    disableHook: true,
    // 本地开发环境不上报
    disabled: IS_LOCAL,
    environment: getEnvironment()
  });
};

exports.getArmsAppender = getArmsAppender;

class Logger extends _weLoggerMain.default {
  constructor(...args) {
    super(...args);
    this.armsAppender = null;
    this.sentPV = false;
    this.bizName = location.host;
  }

  setEnabled(flag = true) {
    if (flag) {
      if (!this.armsAppender) {
        this.armsAppender = getArmsAppender();
        this.armsAppender && this.append(this.armsAppender);
      }

      if (!this.sentPV && this.armsAppender) {
        // Note: page's value
        this.armsAppender.getArms().setPage(location.href);
        this.armsAppender.sum(`BIZ: ${this.bizName}`);
        this.sentPV = true;
      }
    } else if (this.armsAppender) {
      this.remove(this.armsAppender);
      this.armsAppender = null;
    }
  }

  setBizName(name) {
    this.bizName = name;
    return this;
  }

}

const logger = new Logger().append(debugAppender);
var _default = logger;
exports.default = _default;
//# sourceMappingURL=index.js.map