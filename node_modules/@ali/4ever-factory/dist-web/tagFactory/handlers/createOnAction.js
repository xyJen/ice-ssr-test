import _extends from "@babel/runtime/helpers/extends";
import { Commands, Inline } from '@ali/4ever-cangjie';
import { TAG_SET_DATA, TAG_REMOVE, TAG_INSERT } from "../actions";
import insertTag from "../command/insertTag";
import isSelectionInTag from "../queries/isSelectionInTag";
export default function createOnAction(customizedAction) {
  return function onAction(action, controller, next) {
    var type = action.type,
        payload = action.payload;

    if (type === TAG_REMOVE) {
      var _ref = payload,
          node = _ref.node;
      return controller.command(Commands.removeNodeByKey, node.key);
    }

    if (type === TAG_SET_DATA) {
      var _ref2 = payload,
          _node = _ref2.node,
          mergeData = _ref2.mergeData;
      var targetNode = controller.value.document.getNode(_node.key);

      if (Inline.isInline(targetNode)) {
        return controller.command(Commands.setNodeByKey, _node.key, {
          type: 'tag',
          data: _extends({}, targetNode.data, mergeData)
        });
      }
    }

    if (type === TAG_INSERT) {
      var data = payload;

      if (controller.query('isCollapsedInInlineVoid') || isSelectionInTag(controller.value)) {
        controller.command(Commands.moveToStartOfNextText);
      }

      return controller.command(Commands.focus).command(insertTag, data);
    }

    return customizedAction ? customizedAction(action, controller, next) : next();
  };
}
//# sourceMappingURL=createOnAction.js.map