{"version":3,"sources":["../../../../src/tagFactory/handlers/createOnAction.ts"],"names":["Commands","Inline","TAG_SET_DATA","TAG_REMOVE","TAG_INSERT","insertTag","isSelectionInTag","createOnAction","customizedAction","onAction","action","controller","next","type","payload","node","command","removeNodeByKey","key","mergeData","targetNode","value","document","getNode","isInline","setNodeByKey","data","query","moveToStartOfNextText","focus"],"mappings":";AAAA,SAA6BA,QAA7B,EAAuCC,MAAvC,QAAqD,oBAArD;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,UAAnC;AACA,OAAOC,SAAP;AAEA,OAAOC,gBAAP;AAIA,eAAe,SAASC,cAAT,CAAwBC,gBAAxB,EAAuD;AACpE,SAAO,SAASC,QAAT,CACLC,MADK,EAELC,UAFK,EAGLC,IAHK,EAIL;AAAA,QACQC,IADR,GAC0BH,MAD1B,CACQG,IADR;AAAA,QACcC,OADd,GAC0BJ,MAD1B,CACcI,OADd;;AAEA,QAAID,IAAI,KAAKV,UAAb,EAAyB;AAAA,iBACNW,OADM;AAAA,UACfC,IADe,QACfA,IADe;AAEvB,aAAOJ,UAAU,CAACK,OAAX,CAAmBhB,QAAQ,CAACiB,eAA5B,EAA6CF,IAAI,CAACG,GAAlD,CAAP;AACD;;AACD,QAAIL,IAAI,KAAKX,YAAb,EAA2B;AAAA,kBACGY,OADH;AAAA,UACjBC,KADiB,SACjBA,IADiB;AAAA,UACXI,SADW,SACXA,SADW;AAEzB,UAAMC,UAAU,GAAGT,UAAU,CAACU,KAAX,CAAiBC,QAAjB,CAA0BC,OAA1B,CAAkCR,KAAI,CAACG,GAAvC,CAAnB;;AACA,UAAIjB,MAAM,CAACuB,QAAP,CAAgBJ,UAAhB,CAAJ,EAAiC;AAC/B,eAAOT,UAAU,CAACK,OAAX,CAAmBhB,QAAQ,CAACyB,YAA5B,EAA0CV,KAAI,CAACG,GAA/C,EAAoD;AACzDL,UAAAA,IAAI,EAAE,KADmD;AAEzDa,UAAAA,IAAI,eACCN,UAAU,CAACM,IADZ,EAECP,SAFD;AAFqD,SAApD,CAAP;AAOD;AACF;;AACD,QAAIN,IAAI,KAAKT,UAAb,EAAyB;AACvB,UAAMsB,IAAI,GAAGZ,OAAb;;AACA,UAAIH,UAAU,CAACgB,KAAX,CAAiB,yBAAjB,KAA+CrB,gBAAgB,CAACK,UAAU,CAACU,KAAZ,CAAnE,EAAuF;AACrFV,QAAAA,UAAU,CAACK,OAAX,CAAmBhB,QAAQ,CAAC4B,qBAA5B;AACD;;AACD,aAAOjB,UAAU,CAACK,OAAX,CAAmBhB,QAAQ,CAAC6B,KAA5B,EAAmCb,OAAnC,CAA2CX,SAA3C,EAAsDqB,IAAtD,CAAP;AACD;;AAED,WAAOlB,gBAAgB,GAAGA,gBAAgB,CAACE,MAAD,EAASC,UAAT,EAAqBC,IAArB,CAAnB,GAAgDA,IAAI,EAA3E;AACD,GAhCD;AAiCD","sourcesContent":["import { Action, Controller, Commands, Inline } from '@ali/4ever-cangjie';\nimport { TAG_SET_DATA, TAG_REMOVE, TAG_INSERT, RemoveTagPayload, SetTagDataPayload } from '../actions';\nimport insertTag, { InsertTagdPayload } from '../command/insertTag';\n\nimport isSelectionInTag from '../queries/isSelectionInTag';\n\ntype ActionType = (action: Action, controller: Controller, next: () => void) => void;\n\nexport default function createOnAction(customizedAction?: ActionType) {\n  return function onAction(\n    action: Action,\n    controller: Controller,\n    next: () => void,\n  ) {\n    const { type, payload } = action;\n    if (type === TAG_REMOVE) {\n      const { node } = payload as RemoveTagPayload;\n      return controller.command(Commands.removeNodeByKey, node.key);\n    }\n    if (type === TAG_SET_DATA) {\n      const { node, mergeData } = payload as SetTagDataPayload;\n      const targetNode = controller.value.document.getNode(node.key);\n      if (Inline.isInline(targetNode)) {\n        return controller.command(Commands.setNodeByKey, node.key, {\n          type: 'tag',\n          data: {\n            ...targetNode.data,\n            ...mergeData,\n          },\n        });\n      }\n    }\n    if (type === TAG_INSERT) {\n      const data = payload as InsertTagdPayload;\n      if (controller.query('isCollapsedInInlineVoid') || isSelectionInTag(controller.value)) {\n        controller.command(Commands.moveToStartOfNextText);\n      }\n      return controller.command(Commands.focus).command(insertTag, data as InsertTagdPayload);\n    }\n\n    return customizedAction ? customizedAction(action, controller, next) : next();\n  };\n}\n"],"file":"createOnAction.js"}