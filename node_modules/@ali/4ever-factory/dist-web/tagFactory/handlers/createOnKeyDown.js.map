{"version":3,"sources":["../../../../src/tagFactory/handlers/createOnKeyDown.ts"],"names":["isKeyHotkey","hotkeys","Commands","getTagAtFocusEdge","isArrowRightHotKey","isArrowLeftHotKey","createKeyDown","customizedKeyDown","onKeyDown","event","controller","next","selection","value","isCollapsed","tagElement","isDeleteBackward","isDeleteForward","preventDefault","command","moveAnchorToStartOfNode","moveFocusToEndOfNode"],"mappings":"AACA,SAASA,WAAT,QAA4B,WAA5B;AACA,SAAqBC,OAArB,EAA8BC,QAA9B,QAA8C,oBAA9C;AACA,OAAOC,iBAAP;AAEA,IAAMC,kBAAkB,GAAGJ,WAAW,CAAC,OAAD,CAAtC;AACA,IAAMK,iBAAiB,GAAGL,WAAW,CAAC,MAAD,CAArC;AAIA,eAAe,SAASM,aAAT,CAAuBC,iBAAvB,EAAwD;AACrE,SAAO,SAASC,SAAT,CACLC,KADK,EAELC,UAFK,EAGLC,IAHK,EAIL;AAAA,QACQC,SADR,GACsBF,UAAU,CAACG,KADjC,CACQD,SADR;;AAEA,QAAIA,SAAS,IAAIA,SAAS,CAACE,WAA3B,EAAwC;AACtC,UAAIC,UAAU,GAAId,OAAO,CAACe,gBAAR,CAAyBP,KAAzB,KAAmCR,OAAO,CAACgB,eAAR,CAAwBR,KAAxB,CAApC,GAAsEN,iBAAiB,CAACO,UAAD,EAAaT,OAAO,CAACe,gBAAR,CAAyBP,KAAzB,IAAkC,UAAlC,GAA+C,SAA5D,CAAvF,GAAgK,IAAjL;AACA,UAAI,CAACM,UAAL,EAAiBA,UAAU,GAAGV,iBAAiB,CAACI,KAAD,CAAjB,GAA2BN,iBAAiB,CAACO,UAAD,EAAaL,iBAAiB,CAACI,KAAD,CAAjB,GAA2B,UAA3B,GAAwC,SAArD,CAA5C,GAA8G,IAA3H;AACjB,UAAI,CAACM,UAAL,EAAiBA,UAAU,GAAGX,kBAAkB,CAACK,KAAD,CAAlB,GAA4BN,iBAAiB,CAACO,UAAD,EAAaN,kBAAkB,CAACK,KAAD,CAAlB,GAA4B,SAA5B,GAAwC,UAArD,CAA7C,GAAgH,IAA7H;;AAEjB,UAAIM,UAAJ,EAAgB;AACdN,QAAAA,KAAK,CAACS,cAAN;AACA,eAAOR,UAAU,CAACS,OAAX,CAAmBjB,QAAQ,CAACkB,uBAA5B,EAAqDL,UAArD,EAAiEI,OAAjE,CAAyEjB,QAAQ,CAACmB,oBAAlF,EAAwGN,UAAxG,CAAP;AACD;AACF;;AACD,WAAOR,iBAAiB,GAAGA,iBAAiB,CAACE,KAAD,EAAQC,UAAR,EAAoBC,IAApB,CAApB,GAAgDA,IAAI,EAA5E;AACD,GAjBD;AAkBD","sourcesContent":["import * as React from 'react';\nimport { isKeyHotkey } from 'is-hotkey';\nimport { Controller, hotkeys, Commands } from '@ali/4ever-cangjie';\nimport getTagAtFocusEdge from '../queries/getTagAtFocusEdge';\n\nconst isArrowRightHotKey = isKeyHotkey('right');\nconst isArrowLeftHotKey = isKeyHotkey('left');\n\ntype KeyDownType = (event: React.KeyboardEvent, controller: Controller, next: () => void) => void;\n\nexport default function createKeyDown(customizedKeyDown?: KeyDownType) {\n  return function onKeyDown(\n    event: React.KeyboardEvent,\n    controller: Controller,\n    next: () => void,\n  ) {\n    const { selection } = controller.value;\n    if (selection && selection.isCollapsed) {\n      let tagElement = (hotkeys.isDeleteBackward(event) || hotkeys.isDeleteForward(event)) ? getTagAtFocusEdge(controller, hotkeys.isDeleteBackward(event) ? 'Backward' : 'Forward') : null;\n      if (!tagElement) tagElement = isArrowLeftHotKey(event) ? getTagAtFocusEdge(controller, isArrowLeftHotKey(event) ? 'Backward' : 'Forward') : null;\n      if (!tagElement) tagElement = isArrowRightHotKey(event) ? getTagAtFocusEdge(controller, isArrowRightHotKey(event) ? 'Forward' : 'Backward') : null;\n\n      if (tagElement) {\n        event.preventDefault();\n        return controller.command(Commands.moveAnchorToStartOfNode, tagElement).command(Commands.moveFocusToEndOfNode, tagElement);\n      }\n    }\n    return customizedKeyDown ? customizedKeyDown(event, controller, next) : next();\n  };\n}"],"file":"createOnKeyDown.js"}