import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import logger from '@ali/4ever-logger';
import { Tag } from '@ali/4ever-plugin-tag';
import { ErrorBoundary, InlinePlaceholder } from '@ali/4ever-component';
import Container from "./components/Container";
import { isOwnerAndFirstCreated, setOwnerAndFirstCreated } from "./utils/tagStore";

var ChildrenComponent = function ChildrenComponent(_ref) {
  var childProps = _ref.childProps,
      controller = _ref.controller,
      plugin = _ref.plugin,
      config = _ref.config;
  var _plugin$locale = plugin.locale,
      locale = _plugin$locale === void 0 ? {} : _plugin$locale,
      renderNode = plugin.renderNode,
      verticalAlign = plugin.verticalAlign;
  var node = childProps.node;
  var isOwner = isOwnerAndFirstCreated(node.key);
  React.useEffect(function () {
    if (isOwner) setOwnerAndFirstCreated(node.key, false);
  }, [node.key, isOwner]); // @ts-ignore

  var finalVerticalAlign = typeof verticalAlign === 'function' ? verticalAlign(node) : verticalAlign;
  return /*#__PURE__*/_createElement(Container, _extends({}, childProps, {
    locale: locale,
    verticalAlign: finalVerticalAlign,
    config: config
  }), renderNode(_extends({}, childProps, {
    isOwnerAndFirstCreated: isOwner
  }), controller));
};

export default function createRenderElement(plugin, config) {
  var _ref2;

  var tagTypeConfig = plugin.tagType;
  return _ref2 = {}, _ref2[Tag.TYPE] = function (props, controller, next) {
    var node = props.node;
    var tagType = node.data.tagType;

    if (tagTypeConfig !== tagType) {
      return next();
    }

    var errorTitle = "BI:TAG:" + tagType;

    var fallback = /*#__PURE__*/_createElement(InlinePlaceholder, _extends({}, props, {
      renderText: plugin.renderText
    }));

    try {
      return /*#__PURE__*/_createElement(ErrorBoundary, {
        errorTitle: errorTitle,
        fallback: fallback
      }, /*#__PURE__*/_createElement(ChildrenComponent, {
        childProps: props,
        controller: controller,
        plugin: plugin,
        config: config
      }));
    } catch (error) {
      // ErrorBoundary 只能捕获子组件错误，这里对组件本身加一层兜底处理
      logger.error(errorTitle, error);
      return fallback;
    }
  }, _ref2;
}
//# sourceMappingURL=createRenderElement.js.map