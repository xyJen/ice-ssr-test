{"version":3,"sources":["../../../../src/zhi/cardFactory/index.tsx"],"names":["React","isNumber","ErrorBoundary","BambooPlaceholder","Placeholder","Card","CardWrapper","moFactory","logger","createOnAction","ChildrenComponent","childProps","controller","plugin","renderNode","isMobile","cardStyle","node","attributes","restrictSize","data","cardType","height","spacing","realHeight","style","useMemo","cssHeight","overflow","calcStyle","width","cardFactory","createPlugin","createCardPlugin","config","myPlugin","onAction","queries","key","lazyRenderStrategy","_","type","size","undefined","TYPE","props","next","errorTitle","fallback","renderText","error"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isNumber } from 'lodash-es';\nimport { ErrorBoundary, BambooPlaceholder as Placeholder } from '@ali/4ever-component';\nimport { Controller, RenderNodeProps, Block, Plugin } from '@ali/4ever-cangjie';\nimport { Card, CardWrapper, moFactory } from '@ali/4ever-plugin-card';\nimport logger from '@ali/4ever-logger';\nimport createOnAction from './handlers/createOnAction';\n\ntype CardRenderNodeType = (props: RenderNodeProps<Block>, controller: Controller, next?: Function) => JSX.Element;\n\nexport interface CustomizedZhiCardPluginType {\n  cardType: string;\n  cardStyle?: React.CSSProperties;\n  isMobile?: boolean;\n  renderNode: CardRenderNodeType;\n  onAction?: Plugin['onAction'];\n  renderText?: (name: string) => string;\n  queries?: Plugin['queries'];\n}\n\n/**\n * factory 内的 RenderTagProps\n */\nexport interface RenderCardProps extends RenderNodeProps<Block> {\n  /**\n   * 是否约束尺寸\n   * 比如，在排版模式下，需要手动设置 wrapper 尺寸\n   */\n  restrictSize?: boolean;\n}\n\nexport interface ZhiCardPluginType extends Omit<Plugin, 'renderNode'> {\n  key?: string;\n  renderNode: ((props: RenderCardProps, controller: Controller, next: Function) => JSX.Element) | Record<string, Function>;\n  cardType: string;\n}\n\ninterface RenderChildrenProps {\n  childProps: RenderNodeProps<Block> & { restrictSize?: boolean };\n  controller: Controller;\n  plugin: CustomizedZhiCardPluginType;\n  config: any;\n}\n\nconst ChildrenComponent: React.FC<RenderChildrenProps> = ({\n  childProps,\n  controller,\n  plugin,\n}) => {\n  const { renderNode, isMobile, cardStyle = {} } = plugin;\n  const { node, attributes, restrictSize } = childProps;\n  const { cardType, height, spacing } = node.data;\n\n  const realHeight = isMobile ? 'auto' : height;\n\n  const style: React.CSSProperties = React.useMemo(() => {\n    let cssHeight: any = 'auto';\n    let overflow = 'initial';\n    if (restrictSize) {\n      cssHeight = isNumber(realHeight) ? `${realHeight}px` : realHeight;\n      overflow = 'hidden';\n    }\n    const calcStyle: React.CSSProperties = {\n      height: cssHeight,\n      width: '100%',\n      overflow,\n      ...cardStyle,\n    };\n    return calcStyle;\n  }, [realHeight, spacing, restrictSize]);\n\n  return (\n    <CardWrapper\n      style={style}\n      {...attributes}\n      data-testid={cardType}\n      data-type=\"card\"\n    >\n      {renderNode ? renderNode(childProps, controller) : null}\n    </CardWrapper>\n  );\n};\n\nexport function cardFactory(\n  createPlugin: (config) => CustomizedZhiCardPluginType,\n) {\n  return function createCardPlugin(config): ZhiCardPluginType {\n    const myPlugin = createPlugin(config);\n    const { onAction, queries } = myPlugin;\n    return {\n      ...moFactory({}),\n      key: myPlugin.cardType,\n      queries: {\n        lazyRenderStrategy(_, node) {\n          return node.type === 'card' && typeof node.data.height === 'number'\n            ? { size: { height: node.data.height } }\n            : undefined;\n        },\n        ...queries,\n      },\n      cardType: myPlugin.cardType,\n      onAction: createOnAction(onAction),\n      renderNode: {\n        [Card.TYPE]: (props, controller, next) => {\n          const node = props.node as unknown as Block;\n          const { cardType } = node.data;\n          if (myPlugin.cardType !== cardType) {\n            return next();\n          }\n\n          const errorTitle = `ZHI:CARD:${cardType}`;\n          const fallback = (<Placeholder {...props} renderText={myPlugin.renderText} />);\n          try {\n            return (\n              <ErrorBoundary\n                errorTitle={errorTitle}\n                fallback={fallback}\n              >\n                <ChildrenComponent childProps={props} controller={controller} plugin={myPlugin} config={config} />\n              </ErrorBoundary>\n            );\n          } catch (error: any) {\n            // ErrorBoundary 只能捕获子组件错误，这里对组件本身加一层兜底处理\n            logger.error(errorTitle, error);\n            return fallback;\n          }\n        },\n      },\n    };\n  };\n}\n"],"file":"index.js"}