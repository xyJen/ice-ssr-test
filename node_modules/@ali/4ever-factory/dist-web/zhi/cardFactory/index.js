import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { isNumber } from 'lodash-es';
import { ErrorBoundary, BambooPlaceholder as Placeholder } from '@ali/4ever-component';
import { Card, CardWrapper, moFactory } from '@ali/4ever-plugin-card';
import logger from '@ali/4ever-logger';
import createOnAction from "./handlers/createOnAction";

var ChildrenComponent = function ChildrenComponent(_ref) {
  var childProps = _ref.childProps,
      controller = _ref.controller,
      plugin = _ref.plugin;
  var renderNode = plugin.renderNode,
      isMobile = plugin.isMobile,
      _plugin$cardStyle = plugin.cardStyle,
      cardStyle = _plugin$cardStyle === void 0 ? {} : _plugin$cardStyle;
  var node = childProps.node,
      attributes = childProps.attributes,
      restrictSize = childProps.restrictSize;
  var _node$data = node.data,
      cardType = _node$data.cardType,
      height = _node$data.height,
      spacing = _node$data.spacing;
  var realHeight = isMobile ? 'auto' : height;
  var style = React.useMemo(function () {
    var cssHeight = 'auto';
    var overflow = 'initial';

    if (restrictSize) {
      cssHeight = isNumber(realHeight) ? realHeight + "px" : realHeight;
      overflow = 'hidden';
    }

    var calcStyle = _extends({
      height: cssHeight,
      width: '100%',
      overflow: overflow
    }, cardStyle);

    return calcStyle;
  }, [realHeight, spacing, restrictSize]);
  return /*#__PURE__*/_createElement(CardWrapper, _extends({
    style: style
  }, attributes, {
    "data-testid": cardType,
    "data-type": "card"
  }), renderNode ? renderNode(childProps, controller) : null);
};

export function cardFactory(createPlugin) {
  return function createCardPlugin(config) {
    var _renderNode;

    var myPlugin = createPlugin(config);
    var onAction = myPlugin.onAction,
        queries = myPlugin.queries;
    return _extends({}, moFactory({}), {
      key: myPlugin.cardType,
      queries: _extends({
        lazyRenderStrategy: function lazyRenderStrategy(_, node) {
          return node.type === 'card' && typeof node.data.height === 'number' ? {
            size: {
              height: node.data.height
            }
          } : undefined;
        }
      }, queries),
      cardType: myPlugin.cardType,
      onAction: createOnAction(onAction),
      renderNode: (_renderNode = {}, _renderNode[Card.TYPE] = function (props, controller, next) {
        var node = props.node;
        var cardType = node.data.cardType;

        if (myPlugin.cardType !== cardType) {
          return next();
        }

        var errorTitle = "ZHI:CARD:" + cardType;

        var fallback = /*#__PURE__*/_createElement(Placeholder, _extends({}, props, {
          renderText: myPlugin.renderText
        }));

        try {
          return /*#__PURE__*/_createElement(ErrorBoundary, {
            errorTitle: errorTitle,
            fallback: fallback
          }, /*#__PURE__*/_createElement(ChildrenComponent, {
            childProps: props,
            controller: controller,
            plugin: myPlugin,
            config: config
          }));
        } catch (error) {
          // ErrorBoundary 只能捕获子组件错误，这里对组件本身加一层兜底处理
          logger.error(errorTitle, error);
          return fallback;
        }
      }, _renderNode)
    });
  };
}
//# sourceMappingURL=index.js.map