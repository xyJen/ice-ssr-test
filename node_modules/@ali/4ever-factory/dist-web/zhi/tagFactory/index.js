import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import logger from '@ali/4ever-logger';
import { TagWrapper } from '@ali/4ever-plugin-tag';
import { ErrorBoundary, InlinePlaceholder } from '@ali/4ever-component';
import createOnAction from "./handlers/createOnAction";
import { isNumber } from 'lodash-es';

var ChildrenComponent = function ChildrenComponent(_ref) {
  var childProps = _ref.childProps,
      controller = _ref.controller,
      plugin = _ref.plugin;
  var tagType = plugin.tagType,
      renderNode = plugin.renderNode,
      verticalAlign = plugin.verticalAlign;
  var node = childProps.node,
      attributes = childProps.attributes,
      restrictSize = childProps.restrictSize;
  var height = node.data.height;
  var width = node.data.width;
  var refWrapper = React.useRef(null); // @ts-ignore

  var finalVerticalAlign = typeof verticalAlign === 'function' ? verticalAlign(node) : verticalAlign;
  var cssHeight = 'auto';
  var cssWidth = 'auto';

  if (restrictSize) {
    cssHeight = isNumber(height) && height > 0 ? height + "px" : height;
    cssWidth = isNumber(width) && width > 0 ? width + "px" : width;
  }

  var tagStyle = {
    height: cssHeight,
    width: cssWidth,
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    verticalAlign: finalVerticalAlign,
    maxWidth: '100%'
  };
  return /*#__PURE__*/_createElement(TagWrapper, _extends({
    ref: refWrapper
  }, attributes, {
    "data-testid": tagType,
    "data-type": "tag",
    style: tagStyle
  }), renderNode ? renderNode(childProps, controller) : null);
};

export function tagFactory(createPlugin, moFactory) {
  return function createTagPlugin(config) {
    var myPlugin = createPlugin(config);
    var onAction = myPlugin.onAction;
    return _extends({}, moFactory == null ? void 0 : moFactory({}), {
      key: myPlugin.tagType,
      tagType: myPlugin.tagType,
      onAction: createOnAction(onAction),
      renderNode: {
        tag: function tag(props, controller, next) {
          var node = props.node;
          var tagType = node.data.tagType;

          if (myPlugin.tagType !== tagType) {
            return next();
          }

          var errorTitle = "ZHI:TAG:" + tagType;

          var fallback = /*#__PURE__*/_createElement(InlinePlaceholder, _extends({}, props, {
            renderText: myPlugin.renderText
          }));

          try {
            return /*#__PURE__*/_createElement(ErrorBoundary, {
              errorTitle: errorTitle,
              fallback: fallback
            }, /*#__PURE__*/_createElement(ChildrenComponent, {
              childProps: props,
              controller: controller,
              plugin: myPlugin,
              config: config
            }));
          } catch (error) {
            // ErrorBoundary 只能捕获子组件错误，这里对组件本身加一层兜底处理
            logger.error(errorTitle, error);
            return fallback;
          }
        }
      }
    });
  };
}
//# sourceMappingURL=index.js.map