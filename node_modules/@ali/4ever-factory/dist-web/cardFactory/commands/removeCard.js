import { Block, Commands } from '@ali/4ever-cangjie';
/**
 * 表格中是否只包含一个河图卡片，无其他任何内容
 * @param value
 * @param nodeKey
 * @returns
 */

var isContainerOnlyHasOneCard = function isContainerOnlyHasOneCard(controller, node) {
  var document = controller.value.document; // 获取包含该河图卡片的表格容器节点

  var container = document.getParent(node.key); // 如果当前河图卡片是在表格中，并且该表格中仅包含该河图卡片，无其他内容
  // @ts-ignore

  return container && (container == null ? void 0 : container.nodes.length) === 1 && container.nodes[0] === node;
};

export default (function (controller, paramNode) {
  // 线上监控到个别 NPE 错误为 paramNode 为 null
  // 但由于中间件机制调用栈太深，找不到是那个业务方发起的调用，这里做个兜底
  if (!paramNode) return controller;
  var document = controller.value.document;
  var node = document.getNode(paramNode.key); // 否则仓颉的默认removeNode会导致table-cell结构出现错误，即td下面本该有的paragraph被删掉，然后normolize会将该td用一个div包裹

  var containerOnlyContainOneCard = isContainerOnlyHasOneCard(controller, node); // 如果当前容器里面只有一个河图卡片，那么删除操作需要通过一个空的paragraph来替代当前河图卡片来达到删除效果,其余情况采用默认逻辑即可

  if (containerOnlyContainOneCard) {
    return controller.command(Commands.replaceNodeByKey, node.key, Block.create('paragraph'));
  }

  return controller.command(Commands.removeNodeByKey, node.key);
});
//# sourceMappingURL=removeCard.js.map