import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { isNumber } from 'lodash-es';
import classnames from 'classnames';
import { Card, CardWrapper } from '@ali/4ever-plugin-card';

var Container = function Container(props) {
  var children = props.children,
      _props$cardStyle = props.cardStyle,
      cardStyle = _props$cardStyle === void 0 ? {} : _props$cardStyle,
      node = props.node,
      attributes = props.attributes,
      isMobile = props.isMobile,
      isSelected = props.isSelected,
      restrictSize = props.restrictSize,
      controller = props.controller;
  var _node$data = node.data,
      cardType = _node$data.cardType,
      height = _node$data.height,
      spacing = _node$data.spacing;
  var isFocused = controller.value.isFocused;
  var realHeight = isMobile ? 'auto' : height;
  var style = React.useMemo(function () {
    var cssHeight = 'auto';
    var overflow = 'initial';

    if (restrictSize) {
      cssHeight = isNumber(realHeight) ? realHeight + "px" : realHeight;
      overflow = 'hidden';
    }

    var calcStyle = _extends({
      height: cssHeight,
      width: '100%',
      overflow: overflow
    }, cardStyle);

    return calcStyle;
  }, [realHeight, spacing, restrictSize]);
  var className = React.useMemo(function () {
    return classnames({
      selected: Boolean(isSelected && isFocused)
    });
  }, [isSelected, isFocused]);
  return /*#__PURE__*/_createElement(CardWrapper, _extends({
    style: style
  }, attributes, {
    "data-testid": cardType,
    "data-type": Card.TYPE,
    className: className
  }), children);
};

export default Container;
//# sourceMappingURL=index.js.map