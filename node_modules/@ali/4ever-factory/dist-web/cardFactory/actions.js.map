{"version":3,"sources":["../../../src/cardFactory/actions.ts"],"names":["logger","CARD_INSERT","Symbol","CARD_REMOVE","CARD_SET_DATA","CARD_SET_INJECTION","removeCard","node","type","payload","insertCard","setCardData","mergeData","setCardInjection","injection","error","JSON","stringify"],"mappings":"AAEA,OAAOA,MAAP,MAAmB,mBAAnB;AAEA,OAAO,IAAMC,WAAW,GAAGC,MAAM,CAAC,aAAD,CAA1B;AACP,OAAO,IAAMC,WAAW,GAAGD,MAAM,CAAC,aAAD,CAA1B;AACP,OAAO,IAAME,aAAa,GAAGF,MAAM,CAAC,eAAD,CAA5B;AACP,OAAO,IAAMG,kBAAkB,GAAGH,MAAM,CAAC,oBAAD,CAAjC;AAgBP,OAAO,SAASI,UAAT,CACLC,IADK,EAEsB;AAC3B,SAAO;AACLC,IAAAA,IAAI,EAAEL,WADD;AAELM,IAAAA,OAAO,EAAE;AACPF,MAAAA,IAAI,EAAJA;AADO;AAFJ,GAAP;AAMD;AAED,OAAO,SAASG,UAAT,CAAoBD,OAApB,EAA2E;AAChF,SAAO;AACLD,IAAAA,IAAI,EAAEP,WADD;AAELQ,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID;AAED,OAAO,SAASE,WAAT,CACLJ,IADK,EAELK,SAFK,EAGuB;AAC5B,SAAO;AACLJ,IAAAA,IAAI,EAAEJ,aADD;AAELK,IAAAA,OAAO,EAAE;AACPF,MAAAA,IAAI,EAAJA,IADO;AAEPK,MAAAA,SAAS,EAATA;AAFO;AAFJ,GAAP;AAOD;AAED,OAAO,SAASC,gBAAT,CACLN,IADK,EAELO,SAFK,EAG4B;AACjC,MAAI,CAACP,IAAL,EAAW;AACTP,IAAAA,MAAM,CAACe,KAAP,iCAA2CC,IAAI,CAACC,SAAL,CAAeH,SAAf,CAA3C;AACD;;AAED,SAAO;AACLN,IAAAA,IAAI,EAAEH,kBADD;AAELI,IAAAA,OAAO,EAAE;AACPF,MAAAA,IAAI,EAAJA,IADO;AAEPO,MAAAA,SAAS,EAATA;AAFO;AAFJ,GAAP;AAOD","sourcesContent":["import { Element, Action } from '@ali/4ever-cangjie';\nimport { CardData } from '@ali/4ever-plugin-card';\nimport logger from '@ali/4ever-logger';\n\nexport const CARD_INSERT = Symbol('card-insert');\nexport const CARD_REMOVE = Symbol('card-remove');\nexport const CARD_SET_DATA = Symbol('card-set-data');\nexport const CARD_SET_INJECTION = Symbol('card-set-injection');\n\nexport interface RemoveCardPayload {\n  node: Element;\n}\n\nexport interface SetCardDataPayload {\n  node: Element;\n  mergeData: Record<string, any>;\n}\n\nexport interface SetCardInjectionPayload {\n  node: Element;\n  injection: Record<string, any>;\n}\n\nexport function removeCard(\n  node: Element,\n): Action<RemoveCardPayload> {\n  return {\n    type: CARD_REMOVE,\n    payload: {\n      node,\n    },\n  };\n}\n\nexport function insertCard(payload: Partial<CardData>): Action<Partial<CardData>> {\n  return {\n    type: CARD_INSERT,\n    payload,\n  };\n}\n\nexport function setCardData(\n  node: Element,\n  mergeData: Partial<CardData>,\n): Action<SetCardDataPayload> {\n  return {\n    type: CARD_SET_DATA,\n    payload: {\n      node,\n      mergeData,\n    },\n  };\n}\n\nexport function setCardInjection(\n  node: Element,\n  injection: Record<string, any>,\n): Action<SetCardInjectionPayload> {\n  if (!node) {\n    logger.error(`Invalid node! injection is ${JSON.stringify(injection)}`);\n  }\n\n  return {\n    type: CARD_SET_INJECTION,\n    payload: {\n      node,\n      injection,\n    },\n  };\n}\n"],"file":"actions.js"}