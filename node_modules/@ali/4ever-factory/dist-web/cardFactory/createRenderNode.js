import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import logger from '@ali/4ever-logger';
import { ErrorBoundary } from '@ali/4ever-component';
import { Card } from '@ali/4ever-plugin-card';
import CardContainer from "./components/cardContainer";
import { removeCard } from "./actions";
import { isOwnerAndFirstCreated, setOwnerAndFirstCreated } from "./utils/cardStore";

var ChildrenComponent = function ChildrenComponent(_ref) {
  var childProps = _ref.childProps,
      controller = _ref.controller,
      plugin = _ref.plugin,
      config = _ref.config,
      restrictSize = _ref.restrictSize;
  var locale = plugin.locale,
      renderNode = plugin.renderNode,
      isMobile = plugin.isMobile,
      cardStyle = plugin.cardStyle;
  var disableSelected = typeof plugin.disableSelected === 'function' ? plugin.disableSelected(childProps.node) : plugin.disableSelected;
  var key = childProps.node.key;
  var isOwner = isOwnerAndFirstCreated(key);
  React.useEffect(function () {
    if (isOwner) setOwnerAndFirstCreated(key, false);
  }, [key, isOwner]);
  return /*#__PURE__*/_createElement(CardContainer, _extends({}, childProps, {
    config: config,
    isMobile: isMobile,
    disableSelected: disableSelected,
    locale: locale,
    cardStyle: cardStyle,
    restrictSize: restrictSize
  }), renderNode(_extends({}, childProps, {
    isOwnerAndFirstCreated: isOwner
  }), controller));
};

export default (function (plugin, config, PHolder) {
  var _ref2;

  var cardTypeConfig = plugin.cardType;
  return _ref2 = {}, _ref2[Card.TYPE] = function (props, controller, next) {
    var restrictSize = props.restrictSize;
    var node = props.node;
    var cardType = node.data.cardType;

    if (cardTypeConfig !== cardType) {
      return next();
    }

    var errorTitle = "BI:CARD:" + cardType;

    var fallback = /*#__PURE__*/_createElement(PHolder, _extends({}, props, {
      renderText: plugin.renderText,
      editor: controller,
      handleRemoveNode: function handleRemoveNode() {
        return controller.run('onAction', removeCard(node));
      }
    }));

    try {
      return /*#__PURE__*/_createElement(ErrorBoundary, {
        errorTitle: errorTitle,
        fallback: fallback
      }, /*#__PURE__*/_createElement(ChildrenComponent, {
        restrictSize: restrictSize,
        childProps: props,
        controller: controller,
        plugin: plugin,
        config: config
      }));
    } catch (error) {
      // ErrorBoundary 只能捕获子组件错误，这里对组件本身加一层兜底处理
      logger.error(errorTitle, error);
      return fallback;
    }
  }, _ref2;
});
//# sourceMappingURL=createRenderNode.js.map