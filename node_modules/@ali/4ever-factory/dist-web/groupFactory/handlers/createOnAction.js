import _extends from "@babel/runtime/helpers/extends";
import { GroupPlugin } from '@ali/4ever-cangjie';
import { TOGGLE_FOLD } from '@ali/4ever-plugin-group-factory';
import { createCommentShow } from '@ali/4ever-plugin-heading-group';
import { ACTION_COMMENT_SHOW } from '@ali/4ever-plugin-comment';
import { CLEAR_IMMEDIATELY } from "../actions";
import { toggleFold } from "../commands/fold";

function createOnAction(customizedAction) {
  var handleCommentShow = createCommentShow({
    onAutoUnfold: function onAutoUnfold(controller, node) {
      var _extends2;

      var _controller$value$dat = controller.value.data.immediatelyUnfoldMap,
          immediatelyUnfoldMap = _controller$value$dat === void 0 ? {} : _controller$value$dat;
      controller // 自动展开折叠标题
      .command(toggleFold, node, false) // 立即展开不使用动画
      .setData(_extends({}, controller.value.data, {
        immediatelyUnfoldMap: _extends({}, immediatelyUnfoldMap, (_extends2 = {}, _extends2[node.key] = true, _extends2))
      }));
    }
  });
  return function onAction(action, controller, next) {
    var type = action.type,
        payload = action.payload;

    if (type === TOGGLE_FOLD) {
      var _ref = payload,
          node = _ref.node,
          fold = _ref.fold;
      return controller.withoutSaving(function () {
        controller.command(toggleFold, node, fold);

        if (fold === false) {
          controller.run('onAction', GroupPlugin.actions.expand(node.key));
        } else if (fold === true) {
          controller.run('onAction', GroupPlugin.actions.fold(node.key));
        } else {
          controller.run('onAction', GroupPlugin.actions.toggleGroupFold(node.key));
        }

        return controller;
      });
    }

    if (type === CLEAR_IMMEDIATELY) {
      var _ref2 = payload,
          _node = _ref2.node;

      var immediatelyUnfoldMap = _extends({}, controller.value.data.immediatelyUnfoldMap);

      delete immediatelyUnfoldMap[_node.key];
      return controller.setData(_extends({}, controller.value.data, {
        immediatelyUnfoldMap: immediatelyUnfoldMap
      }));
    }

    if (type === ACTION_COMMENT_SHOW && payload) {
      handleCommentShow(controller, payload);
    }

    return customizedAction ? customizedAction(action, controller, next) : next();
  };
}

export default createOnAction;
//# sourceMappingURL=createOnAction.js.map