import _extends from "@babel/runtime/helpers/extends";
import { Block, Commands, Injection } from '@ali/4ever-cangjie';
import { FileTypeMap, getFileTypeForRead, CanPreviewFileTypes } from '@ali/4ever-plugin-embed';
import updateFile from "../commands/updateFile";
import { generateKey } from '@ali/4ever-utils';
export default function uploadFile(controller, file, onUpload, autoPreview) {
  var id = generateKey();
  var data = {
    id: id,
    name: file.name,
    size: file.size,
    type: getFileTypeForRead(file.name)
  };
  var embed = Block.create({
    type: 'embed',
    data: data
  });
  var _controller$value = controller.value,
      selection = _controller$value.selection,
      startBlock = _controller$value.startBlock;
  controller.command(Commands.insertBlock, embed).command(Commands.insertBlock, 'paragraph');

  if (selection.isCollapsed && startBlock && startBlock.type === 'embed') {
    controller.command(Commands.removeNodeByKey, startBlock.key);
  }

  if (selection.isCollapsed && startBlock && startBlock.type === 'paragraph' && !startBlock.text) {
    controller.command(Commands.removeNodeByKey, startBlock.key);
  } // we-word 如果不调用 flush，下一个 onChange 中 embed 相关的数据会丢失，导致插入失败，具体原因待排查


  controller.flush();

  var notifyProgress = function notifyProgress(uploadPercent) {
    var injections = controller.value.injections;
    var injection = Injection.create({
      key: embed.key,
      data: {
        uploadPercent: uploadPercent
      }
    });
    controller.setInjections([].concat(injections.filter(function (inj) {
      return inj.key !== embed.key;
    }), [injection]));
  };

  onUpload(file, id, notifyProgress).then(function (res) {
    var src = res.url;
    if (!src) return;
    var params = {};
    var fileType = getFileTypeForRead(file.name); // 两种情况可以进入预览
    // 1、音视频；2、打开了控制开关，文件类型为可预览类型

    if (fileType === FileTypeMap.Video || fileType === FileTypeMap.Audio || autoPreview && CanPreviewFileTypes.includes(fileType)) {
      Object.assign(params, {
        viewType: 'preview'
      });
    }

    var node = controller.value.document.getNode(embed.key);

    if (node) {
      updateFile(controller, node, _extends({
        src: src
      }, params));
    }
  })["catch"](function (e) {
    // eslint-disable-line
    console.error(e);
    var node = controller.value.document.getNode(embed.key);

    if (node) {
      var params = {
        src: '',
        name: file.name,
        type: getFileTypeForRead(file.name),
        size: 0,
        errorType: e.message
      };
      return updateFile(controller, node, _extends({}, params));
    }

    return undefined;
  });
}
//# sourceMappingURL=uploadFile.js.map