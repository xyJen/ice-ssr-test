{"version":3,"sources":["../../../../src/embedFactory/handlers/uploadFile.ts"],"names":["Block","Commands","Injection","FileTypeMap","getFileTypeForRead","CanPreviewFileTypes","updateFile","generateKey","uploadFile","controller","file","onUpload","autoPreview","id","data","name","size","type","embed","create","value","selection","startBlock","command","insertBlock","isCollapsed","removeNodeByKey","key","text","flush","notifyProgress","uploadPercent","injections","injection","setInjections","filter","inj","then","res","src","url","params","fileType","Video","Audio","includes","Object","assign","viewType","node","document","getNode","e","console","error","errorType","message","undefined"],"mappings":"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","sourcesContent":["import { Controller, Block, Commands, Injection } from '@ali/4ever-cangjie';\nimport {\n  FileTypeMap,\n  getFileTypeForRead,\n  CanPreviewFileTypes,\n} from '@ali/4ever-plugin-embed';\nimport updateFile from '../commands/updateFile';\nimport { generateKey } from '@ali/4ever-utils';\n\nexport default function uploadFile(\n  controller: Controller,\n  file,\n  onUpload,\n  autoPreview,\n) {\n  const id = generateKey();\n\n  const data = {\n    id,\n    name: file.name,\n    size: file.size,\n    type: getFileTypeForRead(file.name),\n  };\n  const embed = Block.create({\n    type: 'embed',\n    data,\n  });\n  const { selection, startBlock } = controller.value;\n  controller\n    .command(Commands.insertBlock, embed)\n    .command(Commands.insertBlock, 'paragraph');\n\n  if (selection.isCollapsed && startBlock && startBlock.type === 'embed') {\n    controller.command(Commands.removeNodeByKey, startBlock.key);\n  }\n\n  if (\n    selection.isCollapsed &&\n    startBlock &&\n    startBlock.type === 'paragraph' &&\n    !startBlock.text\n  ) {\n    controller.command(Commands.removeNodeByKey, startBlock.key);\n  }\n\n  // we-word 如果不调用 flush，下一个 onChange 中 embed 相关的数据会丢失，导致插入失败，具体原因待排查\n  controller.flush();\n\n  const notifyProgress = (uploadPercent: number) => {\n    const { injections } = controller.value;\n    const injection = Injection.create({\n      key: embed.key,\n      data: {\n        uploadPercent,\n      },\n    });\n    controller.setInjections([\n      ...injections.filter((inj) => inj.key !== embed.key),\n      injection,\n    ]);\n  };\n\n  onUpload(file, id, notifyProgress)\n    .then((res) => {\n      const { url: src } = res;\n      if (!src) return;\n      const params = {};\n      const fileType = getFileTypeForRead(file.name);\n      // 两种情况可以进入预览\n      // 1、音视频；2、打开了控制开关，文件类型为可预览类型\n      if (\n        fileType === FileTypeMap.Video ||\n        fileType === FileTypeMap.Audio ||\n        (autoPreview && CanPreviewFileTypes.includes(fileType))\n      ) {\n        Object.assign(params, {\n          viewType: 'preview',\n        });\n      }\n      const node = controller.value.document.getNode(embed.key);\n      if (node) {\n        updateFile(controller, node, {\n          src,\n          ...params,\n        });\n      }\n    })\n    .catch((e) => {\n      // eslint-disable-line\n      console.error(e);\n      const node = controller.value.document.getNode(embed.key);\n      if (node) {\n        const params = {\n          src: '',\n          name: file.name,\n          type: getFileTypeForRead(file.name),\n          size: 0,\n          errorType: e.message,\n        };\n        return updateFile(controller, node, {\n          ...params,\n        });\n      }\n      return undefined;\n    });\n}\n"],"file":"uploadFile.js"}