import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Button, DeleteBetaNormal, EmbedCardBetaNormal, Preview1BetaNormal } from '@ali/we-design';
import { InlineToolbar } from '@ali/4ever-component';
import { removeFile } from "../actions";
import { getFileTypeForRead, CanPreviewFileTypes } from '@ali/4ever-plugin-embed';
var embedInlineLayout = [{
  toolButtons: [{
    name: 'embed.cardMode'
  }, {
    name: 'embed.previewMode'
  }, {
    name: 'embed.del'
  }]
}];

var _ref = /*#__PURE__*/_createElement(EmbedCardBetaNormal, null);

var _ref2 = /*#__PURE__*/_createElement(Preview1BetaNormal, null);

var _ref3 = /*#__PURE__*/_createElement(DeleteBetaNormal, null);

var EmbedInlineToolbar = function EmbedInlineToolbar(props) {
  var locale = props.locale,
      controller = props.controller,
      node = props.node,
      onSwitchViewType = props.onSwitchViewType,
      isMoreButtonShown = props.isMoreButtonShown,
      triggerNode = props.triggerNode;
  var isBlurred = controller.value.isBlurred;
  var isExpanded = controller.value.rangeSelection.isExpanded;
  var data = node.data;
  var name = data.name;
  var shouldShowModeButtons = CanPreviewFileTypes.includes(getFileTypeForRead(name)) && isMoreButtonShown;

  var handleSwitchView = function handleSwitchView(e, type) {
    e.preventDefault();
    e.stopPropagation();
    onSwitchViewType && onSwitchViewType(type);
  };

  var handlePreviewMode = function handlePreviewMode(e) {
    handleSwitchView(e, 'preview');
  };

  var handleCardMode = function handleCardMode(e) {
    handleSwitchView(e, 'card');
  };

  var handleDel = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    controller.run('onAction', removeFile(node));
  }, [controller, node]);

  var EmbedCardButton = function EmbedCardButton() {
    return /*#__PURE__*/_createElement(Button, {
      bordered: false,
      onClick: handleCardMode,
      title: locale.cardView,
      icon: _ref,
      testid: "embed-toolbar-card"
    });
  };

  var EmbedPreviewButton = function EmbedPreviewButton() {
    return /*#__PURE__*/_createElement(Button, {
      bordered: false,
      onClick: handlePreviewMode,
      title: locale.previewView,
      icon: _ref2,
      testid: "embed-toolbar-previewView"
    });
  };

  var DelEmbedButton = function DelEmbedButton() {
    return /*#__PURE__*/_createElement(Button, {
      bordered: false,
      onClick: handleDel,
      title: locale["delete"],
      icon: _ref3,
      testid: "embed-toolbar-delete"
    });
  };

  var customToolButtons = {
    'embed.cardMode': shouldShowModeButtons ? EmbedCardButton : null,
    'embed.previewMode': shouldShowModeButtons ? EmbedPreviewButton : null,
    'embed.del': DelEmbedButton
  };

  if (isExpanded || isBlurred) {
    return null;
  }

  return /*#__PURE__*/_createElement(InlineToolbar, {
    visible: true,
    inlineLayout: embedInlineLayout,
    customToolButtons: customToolButtons,
    triggerNode: triggerNode || undefined
  });
};

export default EmbedInlineToolbar;
//# sourceMappingURL=EmbedInlineToolbar.js.map