{"version":3,"sources":["../../../../../src/embedFactory/components/UploadOrFailedCard/index.tsx"],"names":["React","useCallback","useRef","EmbedFailedCard","EmbedUploadProgressCard","EmbedInlineToolbar","UploadOrFailedCard","props","node","locale","isSelected","controller","uploadPercent","data","isCollapsed","value","selection","cardRef","renderInlineToolbar","current","enableBorderHighlight","query"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;qBAC4B,a;AAC5B,SAASC,eAAT,EAA0BC,uBAA1B,QAAyD,yBAAzD;AACA,OAAOC,kBAAP;;AASA,SAASC,kBAAT,CAA4BC,KAA5B,EAA0C;AAAA,MAChCC,IADgC,GACSD,KADT,CAChCC,IADgC;AAAA,MAC1BC,MAD0B,GACSF,KADT,CAC1BE,MAD0B;AAAA,MAClBC,UADkB,GACSH,KADT,CAClBG,UADkB;AAAA,MACNC,UADM,GACSJ,KADT,CACNI,UADM;AAAA,MAEhCC,aAFgC,GAEdJ,IAAI,CAACK,IAFS,CAEhCD,aAFgC;AAAA,MAGhCE,WAHgC,GAGhBH,UAAU,CAACI,KAAX,CAAiBC,SAHD,CAGhCF,WAHgC;AAIxC,MAAMG,OAAO,GAAGf,MAAM,CAAC,IAAD,CAAtB,CAJwC,CAKxC;;AACA,MAAMgB,mBAAmB,GAAGjB,WAAW,CAAC,YAAM;AAC5C,wBACE,eAAC,kBAAD;AACE,MAAA,UAAU,EAAEU,UADd;AAEE,MAAA,IAAI,EAAEH,IAFR;AAGE,MAAA,MAAM,EAAEC,MAHV;AAIE,MAAA,WAAW,EAAEQ,OAAO,CAACE;AAJvB,MADF;AAQD,GATsC,EASpC,CAACR,UAAD,EAAaH,IAAb,EAAmBC,MAAnB,CAToC,CAAvC;AAWA,MAAMW,qBAAqB,GAAGT,UAAU,CAACU,KAAX,CAAiB,uBAAjB,CAA9B,CAjBwC,CAkBxC;;AACA,sBACE,eAAC,KAAD,CAAO,QAAP,QACGX,UAAU,IAAII,WAAd,GAA4BI,mBAAmB,EAA/C,GAAoD,IADvD,eAEE;AAAK,IAAA,GAAG,EAAED;AAAV,KAEIL,aAAa,gBACX,eAAC,uBAAD;AAAyB,IAAA,IAAI,EAAEJ,IAA/B;AAAqC,IAAA,UAAU,EAAEE,UAAjD;AAA6D,IAAA,qBAAqB,EAAEU;AAApF,IADW,gBAEX,eAAC,eAAD;AAAiB,IAAA,IAAI,EAAEZ,IAAvB;AAA6B,IAAA,UAAU,EAAEE,UAAzC;AAAqD,IAAA,MAAM,EAAED,MAA7D;AAAqE,IAAA,qBAAqB,EAAEW;AAA5F,IAJN,CAFF,CADF;AAYD;;AAED,eAAed,kBAAf","sourcesContent":["import React, { useCallback, useRef } from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { EmbedFailedCard, EmbedUploadProgressCard } from '@ali/4ever-plugin-embed';\nimport EmbedInlineToolbar from '../EmbedInlineToolbar';\n\ninterface Props {\n  node: any;\n  locale: Record<string, string>;\n  isSelected: boolean;\n  controller: Controller;\n}\n\nfunction UploadOrFailedCard(props: Props) {\n  const { node, locale, isSelected, controller } = props;\n  const { uploadPercent } = node.data;\n  const { isCollapsed } = controller.value.selection;\n  const cardRef = useRef(null);\n  // TODO @淼淼 替换成 hoverToolbar\n  const renderInlineToolbar = useCallback(() => {\n    return (\n      <EmbedInlineToolbar\n        controller={controller}\n        node={node}\n        locale={locale}\n        triggerNode={cardRef.current}\n      />\n    );\n  }, [controller, node, locale]);\n\n  const enableBorderHighlight = controller.query('enableBorderHighlight');\n  // TODO @淼淼 替换成 hoverToolbar\n  return (\n    <React.Fragment>\n      {isSelected && isCollapsed ? renderInlineToolbar() : null}\n      <div ref={cardRef}>\n        {\n          uploadPercent ?\n            <EmbedUploadProgressCard node={node} isSelected={isSelected} enableBorderHighlight={enableBorderHighlight}/> :\n            <EmbedFailedCard node={node} isSelected={isSelected} locale={locale} enableBorderHighlight={enableBorderHighlight}/>\n        }\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default UploadOrFailedCard;\n"],"file":"index.js"}