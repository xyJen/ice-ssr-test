import React, { useCallback, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { EmbedFailedCard, EmbedUploadProgressCard } from '@ali/4ever-plugin-embed';
import EmbedInlineToolbar from "../EmbedInlineToolbar";

function UploadOrFailedCard(props) {
  var node = props.node,
      locale = props.locale,
      isSelected = props.isSelected,
      controller = props.controller;
  var uploadPercent = node.data.uploadPercent;
  var isCollapsed = controller.value.selection.isCollapsed;
  var cardRef = useRef(null); // TODO @淼淼 替换成 hoverToolbar

  var renderInlineToolbar = useCallback(function () {
    return /*#__PURE__*/_createElement(EmbedInlineToolbar, {
      controller: controller,
      node: node,
      locale: locale,
      triggerNode: cardRef.current
    });
  }, [controller, node, locale]);
  var enableBorderHighlight = controller.query('enableBorderHighlight'); // TODO @淼淼 替换成 hoverToolbar

  return /*#__PURE__*/_createElement(React.Fragment, null, isSelected && isCollapsed ? renderInlineToolbar() : null, /*#__PURE__*/_createElement("div", {
    ref: cardRef
  }, uploadPercent ? /*#__PURE__*/_createElement(EmbedUploadProgressCard, {
    node: node,
    isSelected: isSelected,
    enableBorderHighlight: enableBorderHighlight
  }) : /*#__PURE__*/_createElement(EmbedFailedCard, {
    node: node,
    isSelected: isSelected,
    locale: locale,
    enableBorderHighlight: enableBorderHighlight
  })));
}

export default UploadOrFailedCard;
//# sourceMappingURL=index.js.map