import { CSSProperties } from 'react';
import type { RenderNodeProps, Controller, Plugin, Inline, Query, BiPlugin } from '@ali/4ever-cangjie';
export declare type TagLocale = Record<string, any>;
/**
 * 使用插件工厂创建插件时的 RenderCardProps
 */
export interface CustomizeRenderTagProps extends RenderNodeProps<Inline> {
    /**
     * 当前环境下首次创建
     */
    isOwnerAndFirstCreated: boolean;
}
export declare type TagRenderNodeType = (props: CustomizeRenderTagProps, controller: Controller) => JSX.Element;
export interface CustomizedBiTagPluginType {
    verticalAlign?: CSSProperties['verticalAlign'] | ((node: Inline) => CSSProperties['verticalAlign']);
    tagType: string;
    locale?: TagLocale;
    menubar?: {
        menu: (props: any) => JSX.Element;
    };
    toolbar?: Record<string, any>;
    renderNode: TagRenderNodeType;
    renderContent?: Plugin['renderContent'];
    onAction?: Plugin['onAction'];
    onCangjiePaste?: Plugin['onCangjiePaste'];
    queries?: Record<string, Query>;
    /**
     * fallback text
     */
    renderText?: (name: string) => string;
    actions?: Record<string, any>;
    renderHoverToolbar?: BiPlugin['renderHoverToolbar'];
}
/**
 * factory 内的 RenderCardProps
 */
export interface RenderTagProps extends RenderNodeProps<Inline> {
    /**
     * 是否约束尺寸
     * 比如，在排版模式下，需要手动设置 wrapper 尺寸
     */
    restrictSize?: boolean;
    isOwnerAndFirstCreated: boolean;
}
export declare type TagPluginRenderNodeType = (props: RenderTagProps, controller: Controller, next: Function) => JSX.Element;
export interface TagPluginType extends Omit<Plugin, 'renderNode'> {
    menubar?: Record<string, (props: any) => JSX.Element>;
    renderNode: TagPluginRenderNodeType | Record<string, TagPluginRenderNodeType>;
    tagType: string;
    actions?: Record<string, any>;
}
