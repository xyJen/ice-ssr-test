import React from 'react';
import type { Plugin, Block, Controller, RenderNodeProps, BiPlugin } from '@ali/4ever-cangjie';
export interface CardLocale {
    copy: string;
    cut: string;
    delete: string;
    drop: string;
}
/**
 * 使用插件工厂创建插件时的 RenderCardProps
 */
export interface CustomizedRenderCardProps extends RenderNodeProps<Block> {
    /**
     * 当前环境下首次创建
     */
    isOwnerAndFirstCreated: boolean;
}
export declare type CustomizedCardRenderNodeType = (props: CustomizedRenderCardProps, controller: Controller) => JSX.Element;
export interface CustomizedBiCardPluginType {
    /**
     * 卡片类型
     */
    cardType: string;
    /**
     * 是否隐藏选中边框效果，默认 false
     */
    disableSelected?: boolean | ((node: RenderNodeProps<Block>['node']) => boolean);
    /**
     * 是否是移动端（true 则不限制卡片高度）
     */
    isMobile?: boolean;
    locale?: CardLocale;
    toolbar?: Record<string, any>;
    menubar?: Record<string, (props: any) => JSX.Element>;
    renderNode: CustomizedCardRenderNodeType;
    renderHoverToolbar?: BiPlugin['renderHoverToolbar'];
    onCangjiePaste?: Plugin['onCangjiePaste'];
    onCangjieCopy?: Plugin['onCangjieCopy'];
    onAction?: Plugin['onAction'];
    queries?: Plugin['queries'];
    cardStyle?: React.CSSProperties;
    /**
     * fallback text
     */
    renderText?: (name: string) => string;
}
/**
 * factory 内的 RenderCardProps
 */
export interface RenderCardProps extends RenderNodeProps<Block> {
    /**
     * 是否约束尺寸
     * 比如，在排版模式下，需要手动设置 wrapper 尺寸
     */
    restrictSize?: boolean;
}
export declare type CardPluginRenderNodeType = (props: RenderCardProps, controller: Controller, next: Function) => JSX.Element;
export interface CardPluginType extends Omit<Plugin, 'renderNode'> {
    menubar?: Record<string, (props: any) => JSX.Element>;
    renderNode: CardPluginRenderNodeType | Record<string, CardPluginRenderNodeType>;
    cardType: string;
}
export interface CardData<MetaData> {
    cardType: string;
    height?: number;
    spacing?: {
        before?: number;
        after?: number;
    };
    metadata: MetaData;
}
export declare type CardBlock<MetaData> = Block<CardData<MetaData>>;
