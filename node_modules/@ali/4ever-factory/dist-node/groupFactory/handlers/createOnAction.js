"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginGroupFactory = require("@ali/4ever-plugin-group-factory");

var _everPluginHeadingGroup = require("@ali/4ever-plugin-heading-group");

var _everPluginComment = require("@ali/4ever-plugin-comment");

var _actions = require("../actions");

var _fold = require("../commands/fold");

function createOnAction(customizedAction) {
  const handleCommentShow = (0, _everPluginHeadingGroup.createCommentShow)({
    onAutoUnfold: (controller, node) => {
      const {
        immediatelyUnfoldMap = {}
      } = controller.value.data;
      controller // 自动展开折叠标题
      .command(_fold.toggleFold, node, false) // 立即展开不使用动画
      .setData({ ...controller.value.data,
        immediatelyUnfoldMap: { ...immediatelyUnfoldMap,
          [node.key]: true
        }
      });
    }
  });
  return function onAction(action, controller, next) {
    const {
      type,
      payload
    } = action;

    if (type === _everPluginGroupFactory.TOGGLE_FOLD) {
      const {
        node,
        fold
      } = payload;
      return controller.withoutSaving(() => {
        controller.command(_fold.toggleFold, node, fold);

        if (fold === false) {
          controller.run('onAction', _everCangjie.GroupPlugin.actions.expand(node.key));
        } else if (fold === true) {
          controller.run('onAction', _everCangjie.GroupPlugin.actions.fold(node.key));
        } else {
          controller.run('onAction', _everCangjie.GroupPlugin.actions.toggleGroupFold(node.key));
        }

        return controller;
      });
    }

    if (type === _actions.CLEAR_IMMEDIATELY) {
      const {
        node
      } = payload;
      const immediatelyUnfoldMap = { ...controller.value.data.immediatelyUnfoldMap
      };
      delete immediatelyUnfoldMap[node.key];
      return controller.setData({ ...controller.value.data,
        immediatelyUnfoldMap
      });
    }

    if (type === _everPluginComment.ACTION_COMMENT_SHOW && payload) {
      handleCommentShow(controller, payload);
    }

    return customizedAction ? customizedAction(action, controller, next) : next();
  };
}

var _default = createOnAction;
exports.default = _default;
//# sourceMappingURL=createOnAction.js.map