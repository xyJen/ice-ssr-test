{"version":3,"sources":["../../../../src/groupFactory/handlers/createOnAction.ts"],"names":["createOnAction","customizedAction","handleCommentShow","onAutoUnfold","controller","node","immediatelyUnfoldMap","value","data","command","toggleFold","setData","key","onAction","action","next","type","payload","TOGGLE_FOLD","fold","withoutSaving","run","GroupPlugin","actions","expand","toggleGroupFold","CLEAR_IMMEDIATELY","ACTION_COMMENT_SHOW"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAKA,SAASA,cAAT,CAAwBC,gBAAxB,EAA2E;AACzE,QAAMC,iBAAiB,GAAG,+CAAkB;AAC1CC,IAAAA,YAAY,EAAE,CAACC,UAAD,EAAaC,IAAb,KAAsB;AAClC,YAAM;AAAEC,QAAAA,oBAAoB,GAAG;AAAzB,UAAgCF,UAAU,CAACG,KAAX,CAAiBC,IAAvD;AACAJ,MAAAA,UAAU,CACR;AADQ,OAEPK,OAFH,CAEWC,gBAFX,EAEuBL,IAFvB,EAE6B,KAF7B,EAGE;AAHF,OAIGM,OAJH,CAIW,EACP,GAAGP,UAAU,CAACG,KAAX,CAAiBC,IADb;AAEPF,QAAAA,oBAAoB,EAAE,EACpB,GAAGA,oBADiB;AAEpB,WAACD,IAAI,CAACO,GAAN,GAAY;AAFQ;AAFf,OAJX;AAWD;AAdyC,GAAlB,CAA1B;AAiBA,SAAO,SAASC,QAAT,CAAkBC,MAAlB,EAA0BV,UAA1B,EAAsCW,IAAtC,EAA4C;AACjD,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBH,MAA1B;;AAEA,QAAIE,IAAI,KAAKE,mCAAb,EAA0B;AACxB,YAAM;AAAEb,QAAAA,IAAF;AAAQc,QAAAA;AAAR,UAAiBF,OAAvB;AACA,aAAOb,UAAU,CAACgB,aAAX,CAAyB,MAAM;AACpChB,QAAAA,UAAU,CAACK,OAAX,CAAmBC,gBAAnB,EAA+BL,IAA/B,EAAqCc,IAArC;;AACA,YAAIA,IAAI,KAAK,KAAb,EAAoB;AAClBf,UAAAA,UAAU,CAACiB,GAAX,CAAe,UAAf,EAA2BC,yBAAYC,OAAZ,CAAoBC,MAApB,CAA2BnB,IAAI,CAACO,GAAhC,CAA3B;AACD,SAFD,MAEO,IAAIO,IAAI,KAAK,IAAb,EAAmB;AACxBf,UAAAA,UAAU,CAACiB,GAAX,CAAe,UAAf,EAA2BC,yBAAYC,OAAZ,CAAoBJ,IAApB,CAAyBd,IAAI,CAACO,GAA9B,CAA3B;AACD,SAFM,MAEA;AACLR,UAAAA,UAAU,CAACiB,GAAX,CAAe,UAAf,EAA2BC,yBAAYC,OAAZ,CAAoBE,eAApB,CAAoCpB,IAAI,CAACO,GAAzC,CAA3B;AACD;;AACD,eAAOR,UAAP;AACD,OAVM,CAAP;AAWD;;AAED,QAAIY,IAAI,KAAKU,0BAAb,EAAgC;AAC9B,YAAM;AAAErB,QAAAA;AAAF,UAAWY,OAAjB;AACA,YAAMX,oBAAoB,GAAG,EAC3B,GAAGF,UAAU,CAACG,KAAX,CAAiBC,IAAjB,CAAsBF;AADE,OAA7B;AAGA,aAAOA,oBAAoB,CAACD,IAAI,CAACO,GAAN,CAA3B;AACA,aAAOR,UAAU,CAACO,OAAX,CAAmB,EACxB,GAAGP,UAAU,CAACG,KAAX,CAAiBC,IADI;AAExBF,QAAAA;AAFwB,OAAnB,CAAP;AAID;;AAED,QAAIU,IAAI,KAAKW,sCAAT,IAAgCV,OAApC,EAA6C;AAC3Cf,MAAAA,iBAAiB,CAACE,UAAD,EAAaa,OAAb,CAAjB;AACD;;AAED,WAAOhB,gBAAgB,GAAGA,gBAAgB,CAACa,MAAD,EAASV,UAAT,EAAqBW,IAArB,CAAnB,GAAgDA,IAAI,EAA3E;AACD,GAnCD;AAoCD;;eAEcf,c","sourcesContent":["import { Action, Controller, GroupPlugin, Plugin } from '@ali/4ever-cangjie';\nimport { TOGGLE_FOLD } from '@ali/4ever-plugin-group-factory';\nimport { createCommentShow } from '@ali/4ever-plugin-heading-group';\nimport type { ToggleFoldPayload } from '@ali/4ever-plugin-heading-group';\nimport { ACTION_COMMENT_SHOW } from '@ali/4ever-plugin-comment';\nimport { ClearImmediatelyPayload, CLEAR_IMMEDIATELY } from '../actions';\nimport { toggleFold } from '../commands/fold';\n\n\ntype ActionType = (action: Action, controller: Controller, next: () => void) => void;\n\nfunction createOnAction(customizedAction?: ActionType): Plugin['onAction'] {\n  const handleCommentShow = createCommentShow({\n    onAutoUnfold: (controller, node) => {\n      const { immediatelyUnfoldMap = {} } = controller.value.data;\n      controller\n        // 自动展开折叠标题\n        .command(toggleFold, node, false)\n        // 立即展开不使用动画\n        .setData({\n          ...controller.value.data,\n          immediatelyUnfoldMap: {\n            ...immediatelyUnfoldMap,\n            [node.key]: true,\n          },\n        });\n    },\n  });\n\n  return function onAction(action, controller, next) {\n    const { type, payload } = action;\n\n    if (type === TOGGLE_FOLD) {\n      const { node, fold } = payload as ToggleFoldPayload;\n      return controller.withoutSaving(() => {\n        controller.command(toggleFold, node, fold);\n        if (fold === false) {\n          controller.run('onAction', GroupPlugin.actions.expand(node.key));\n        } else if (fold === true) {\n          controller.run('onAction', GroupPlugin.actions.fold(node.key));\n        } else {\n          controller.run('onAction', GroupPlugin.actions.toggleGroupFold(node.key));\n        }\n        return controller;\n      });\n    }\n\n    if (type === CLEAR_IMMEDIATELY) {\n      const { node } = payload as ClearImmediatelyPayload;\n      const immediatelyUnfoldMap = {\n        ...controller.value.data.immediatelyUnfoldMap,\n      };\n      delete immediatelyUnfoldMap[node.key];\n      return controller.setData({\n        ...controller.value.data,\n        immediatelyUnfoldMap,\n      });\n    }\n\n    if (type === ACTION_COMMENT_SHOW && payload) {\n      handleCommentShow(controller, payload as any);\n    }\n\n    return customizedAction ? customizedAction(action, controller, next) : next();\n  };\n}\n\nexport default createOnAction;\n"],"file":"createOnAction.js"}