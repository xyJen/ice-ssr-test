{"version":3,"sources":["../../../../src/zhi/tagFactory/index.tsx"],"names":["ChildrenComponent","childProps","controller","plugin","tagType","renderNode","verticalAlign","node","attributes","restrictSize","height","data","width","refWrapper","React","useRef","finalVerticalAlign","cssHeight","cssWidth","tagStyle","overflow","textOverflow","whiteSpace","maxWidth","tagFactory","createPlugin","moFactory","createTagPlugin","config","myPlugin","onAction","key","tag","props","next","errorTitle","fallback","renderText","error","logger"],"mappings":"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","sourcesContent":["import React, { CSSProperties } from 'react';\nimport logger from '@ali/4ever-logger';\nimport { TagWrapper } from '@ali/4ever-plugin-tag';\nimport { ErrorBoundary, InlinePlaceholder } from '@ali/4ever-component';\nimport { RenderNodeProps, Controller, Element, Plugin, Inline, MoFactory } from '@ali/4ever-cangjie';\nimport createOnAction from './handlers/createOnAction';\nimport { isNumber } from 'lodash-es';\n\nexport type TagRenderNodeType = (props: RenderNodeProps, controller: Controller) => JSX.Element;\n\nexport interface CustomizedZhiTagPluginType {\n  tagType: string;\n  verticalAlign?: CSSProperties['verticalAlign'] | ((node: Element) => CSSProperties['verticalAlign']);\n  renderNode: TagRenderNodeType;\n  onAction?: Plugin['onAction'];\n  renderText?: (name: string) => string;\n}\n\n/**\n * factory 内的 RenderTagProps\n */\nexport interface RenderTagProps extends RenderNodeProps<Inline> {\n  /**\n   * 是否约束尺寸\n   * 比如，在排版模式下，需要手动设置 wrapper 尺寸\n   */\n  restrictSize?: boolean;\n}\n\nexport interface ZhiTagPluginType extends Omit<Plugin, 'renderNode'>{\n  key?: string;\n  renderNode: ((props: RenderTagProps, controller: Controller, next: Function) => JSX.Element) | Record<string, Function>;\n  tagType: string;\n}\n\ninterface RenderChildrenProps {\n  childProps: RenderNodeProps<Element> & { restrictSize?: boolean };\n  controller: Controller;\n  plugin: CustomizedZhiTagPluginType;\n  config: Record<string, any>;\n}\n\nconst ChildrenComponent: React.FC<RenderChildrenProps> = ({\n  childProps,\n  controller,\n  plugin,\n}) => {\n  const { tagType, renderNode, verticalAlign } = plugin;\n  const { node, attributes, restrictSize } = childProps;\n  const { height } = node.data;\n  const { width } = node.data;\n  const refWrapper = React.useRef<HTMLSpanElement | null>(null);\n\n  // @ts-ignore\n  const finalVerticalAlign = typeof verticalAlign === 'function' ? verticalAlign(node) : verticalAlign;\n\n  let cssHeight: any = 'auto';\n  let cssWidth: any = 'auto';\n  if (restrictSize) {\n    cssHeight = isNumber(height) && height > 0 ? `${height}px` : height;\n    cssWidth = isNumber(width) && width > 0 ? `${width}px` : width;\n  }\n\n  const tagStyle: React.CSSProperties = {\n    height: cssHeight,\n    width: cssWidth,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    verticalAlign: finalVerticalAlign,\n    maxWidth: '100%',\n  };\n  return (\n    <TagWrapper\n      ref={refWrapper}\n      {...attributes}\n      data-testid={tagType}\n      data-type=\"tag\"\n      style={tagStyle}\n    >\n      {renderNode ? renderNode(childProps, controller) : null}\n    </TagWrapper>\n  );\n};\n\nexport function tagFactory(\n  createPlugin: (config) => CustomizedZhiTagPluginType,\n  moFactory?: MoFactory,\n) {\n  return function createTagPlugin(config: Record<string, any>): ZhiTagPluginType {\n    const myPlugin = createPlugin(config);\n    const { onAction } = myPlugin;\n    return {\n      ...moFactory?.({}),\n      key: myPlugin.tagType,\n      tagType: myPlugin.tagType,\n      onAction: createOnAction(onAction),\n      renderNode: {\n        tag: (props: RenderNodeProps<Inline>, controller: Controller, next: Function) => {\n          const { node } = props;\n          const { tagType } = node.data;\n\n          if (myPlugin.tagType !== tagType) {\n            return next();\n          }\n\n          const errorTitle = `ZHI:TAG:${tagType}`;\n          const fallback = (<InlinePlaceholder {...props} renderText={myPlugin.renderText} />);\n          try {\n            return (\n              <ErrorBoundary\n                errorTitle={errorTitle}\n                fallback={fallback}\n              >\n                <ChildrenComponent childProps={props} controller={controller} plugin={myPlugin} config={config} />\n              </ErrorBoundary>\n            );\n          } catch (error: any) {\n            // ErrorBoundary 只能捕获子组件错误，这里对组件本身加一层兜底处理\n            logger.error(errorTitle, error);\n            return fallback;\n          }\n        },\n      },\n    };\n  };\n}\n"],"file":"index.js"}