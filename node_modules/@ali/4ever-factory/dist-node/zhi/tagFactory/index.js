"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tagFactory = tagFactory;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _everPluginTag = require("@ali/4ever-plugin-tag");

var _everComponent = require("@ali/4ever-component");

var _createOnAction = _interopRequireDefault(require("./handlers/createOnAction"));

var _lodash = require("lodash");

const _createElement = /*#__PURE__*/_react.default.createElement;

const ChildrenComponent = ({
  childProps,
  controller,
  plugin
}) => {
  const {
    tagType,
    renderNode,
    verticalAlign
  } = plugin;
  const {
    node,
    attributes,
    restrictSize
  } = childProps;
  const {
    height
  } = node.data;
  const {
    width
  } = node.data;

  const refWrapper = _react.default.useRef(null); // @ts-ignore


  const finalVerticalAlign = typeof verticalAlign === 'function' ? verticalAlign(node) : verticalAlign;
  let cssHeight = 'auto';
  let cssWidth = 'auto';

  if (restrictSize) {
    cssHeight = (0, _lodash.isNumber)(height) && height > 0 ? `${height}px` : height;
    cssWidth = (0, _lodash.isNumber)(width) && width > 0 ? `${width}px` : width;
  }

  const tagStyle = {
    height: cssHeight,
    width: cssWidth,
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    verticalAlign: finalVerticalAlign,
    maxWidth: '100%'
  };
  return /*#__PURE__*/_createElement(_everPluginTag.TagWrapper, (0, _extends2.default)({
    ref: refWrapper
  }, attributes, {
    "data-testid": tagType,
    "data-type": "tag",
    style: tagStyle
  }), renderNode ? renderNode(childProps, controller) : null);
};

function tagFactory(createPlugin, moFactory) {
  return function createTagPlugin(config) {
    const myPlugin = createPlugin(config);
    const {
      onAction
    } = myPlugin;
    return { ...moFactory?.({}),
      key: myPlugin.tagType,
      tagType: myPlugin.tagType,
      onAction: (0, _createOnAction.default)(onAction),
      renderNode: {
        tag: (props, controller, next) => {
          const {
            node
          } = props;
          const {
            tagType
          } = node.data;

          if (myPlugin.tagType !== tagType) {
            return next();
          }

          const errorTitle = `ZHI:TAG:${tagType}`;

          const fallback = /*#__PURE__*/_createElement(_everComponent.InlinePlaceholder, (0, _extends2.default)({}, props, {
            renderText: myPlugin.renderText
          }));

          try {
            return /*#__PURE__*/_createElement(_everComponent.ErrorBoundary, {
              errorTitle: errorTitle,
              fallback: fallback
            }, /*#__PURE__*/_createElement(ChildrenComponent, {
              childProps: props,
              controller: controller,
              plugin: myPlugin,
              config: config
            }));
          } catch (error) {
            // ErrorBoundary 只能捕获子组件错误，这里对组件本身加一层兜底处理
            _everLogger.default.error(errorTitle, error);

            return fallback;
          }
        }
      }
    };
  };
}
//# sourceMappingURL=index.js.map