{"version":3,"sources":["../../../../src/zhi/cardFactory/index.tsx"],"names":["ChildrenComponent","childProps","controller","plugin","renderNode","isMobile","cardStyle","node","attributes","restrictSize","cardType","height","spacing","data","realHeight","style","React","useMemo","cssHeight","overflow","calcStyle","width","cardFactory","createPlugin","createCardPlugin","config","myPlugin","onAction","queries","key","lazyRenderStrategy","_","type","size","undefined","Card","TYPE","props","next","errorTitle","fallback","renderText","error","logger"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isNumber } from 'lodash-es';\nimport { ErrorBoundary, BambooPlaceholder as Placeholder } from '@ali/4ever-component';\nimport { Controller, RenderNodeProps, Block, Plugin } from '@ali/4ever-cangjie';\nimport { Card, CardWrapper, moFactory } from '@ali/4ever-plugin-card';\nimport logger from '@ali/4ever-logger';\nimport createOnAction from './handlers/createOnAction';\n\ntype CardRenderNodeType = (props: RenderNodeProps<Block>, controller: Controller, next?: Function) => JSX.Element;\n\nexport interface CustomizedZhiCardPluginType {\n  cardType: string;\n  cardStyle?: React.CSSProperties;\n  isMobile?: boolean;\n  renderNode: CardRenderNodeType;\n  onAction?: Plugin['onAction'];\n  renderText?: (name: string) => string;\n  queries?: Plugin['queries'];\n}\n\n/**\n * factory 内的 RenderTagProps\n */\nexport interface RenderCardProps extends RenderNodeProps<Block> {\n  /**\n   * 是否约束尺寸\n   * 比如，在排版模式下，需要手动设置 wrapper 尺寸\n   */\n  restrictSize?: boolean;\n}\n\nexport interface ZhiCardPluginType extends Omit<Plugin, 'renderNode'> {\n  key?: string;\n  renderNode: ((props: RenderCardProps, controller: Controller, next: Function) => JSX.Element) | Record<string, Function>;\n  cardType: string;\n}\n\ninterface RenderChildrenProps {\n  childProps: RenderNodeProps<Block> & { restrictSize?: boolean };\n  controller: Controller;\n  plugin: CustomizedZhiCardPluginType;\n  config: any;\n}\n\nconst ChildrenComponent: React.FC<RenderChildrenProps> = ({\n  childProps,\n  controller,\n  plugin,\n}) => {\n  const { renderNode, isMobile, cardStyle = {} } = plugin;\n  const { node, attributes, restrictSize } = childProps;\n  const { cardType, height, spacing } = node.data;\n\n  const realHeight = isMobile ? 'auto' : height;\n\n  const style: React.CSSProperties = React.useMemo(() => {\n    let cssHeight: any = 'auto';\n    let overflow = 'initial';\n    if (restrictSize) {\n      cssHeight = isNumber(realHeight) ? `${realHeight}px` : realHeight;\n      overflow = 'hidden';\n    }\n    const calcStyle: React.CSSProperties = {\n      height: cssHeight,\n      width: '100%',\n      overflow,\n      ...cardStyle,\n    };\n    return calcStyle;\n  }, [realHeight, spacing, restrictSize]);\n\n  return (\n    <CardWrapper\n      style={style}\n      {...attributes}\n      data-testid={cardType}\n      data-type=\"card\"\n    >\n      {renderNode ? renderNode(childProps, controller) : null}\n    </CardWrapper>\n  );\n};\n\nexport function cardFactory(\n  createPlugin: (config) => CustomizedZhiCardPluginType,\n) {\n  return function createCardPlugin(config): ZhiCardPluginType {\n    const myPlugin = createPlugin(config);\n    const { onAction, queries } = myPlugin;\n    return {\n      ...moFactory({}),\n      key: myPlugin.cardType,\n      queries: {\n        lazyRenderStrategy(_, node) {\n          return node.type === 'card' && typeof node.data.height === 'number'\n            ? { size: { height: node.data.height } }\n            : undefined;\n        },\n        ...queries,\n      },\n      cardType: myPlugin.cardType,\n      onAction: createOnAction(onAction),\n      renderNode: {\n        [Card.TYPE]: (props, controller, next) => {\n          const node = props.node as unknown as Block;\n          const { cardType } = node.data;\n          if (myPlugin.cardType !== cardType) {\n            return next();\n          }\n\n          const errorTitle = `ZHI:CARD:${cardType}`;\n          const fallback = (<Placeholder {...props} renderText={myPlugin.renderText} />);\n          try {\n            return (\n              <ErrorBoundary\n                errorTitle={errorTitle}\n                fallback={fallback}\n              >\n                <ChildrenComponent childProps={props} controller={controller} plugin={myPlugin} config={config} />\n              </ErrorBoundary>\n            );\n          } catch (error: any) {\n            // ErrorBoundary 只能捕获子组件错误，这里对组件本身加一层兜底处理\n            logger.error(errorTitle, error);\n            return fallback;\n          }\n        },\n      },\n    };\n  };\n}\n"],"file":"index.js"}