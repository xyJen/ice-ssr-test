"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cardFactory = cardFactory;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _everComponent = require("@ali/4ever-component");

var _everPluginCard = require("@ali/4ever-plugin-card");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _createOnAction = _interopRequireDefault(require("./handlers/createOnAction"));

const _createElement = /*#__PURE__*/React.createElement;

const ChildrenComponent = ({
  childProps,
  controller,
  plugin
}) => {
  const {
    renderNode,
    isMobile,
    cardStyle = {}
  } = plugin;
  const {
    node,
    attributes,
    restrictSize
  } = childProps;
  const {
    cardType,
    height,
    spacing
  } = node.data;
  const realHeight = isMobile ? 'auto' : height;
  const style = React.useMemo(() => {
    let cssHeight = 'auto';
    let overflow = 'initial';

    if (restrictSize) {
      cssHeight = (0, _lodash.isNumber)(realHeight) ? `${realHeight}px` : realHeight;
      overflow = 'hidden';
    }

    const calcStyle = {
      height: cssHeight,
      width: '100%',
      overflow,
      ...cardStyle
    };
    return calcStyle;
  }, [realHeight, spacing, restrictSize]);
  return /*#__PURE__*/_createElement(_everPluginCard.CardWrapper, (0, _extends2.default)({
    style: style
  }, attributes, {
    "data-testid": cardType,
    "data-type": "card"
  }), renderNode ? renderNode(childProps, controller) : null);
};

function cardFactory(createPlugin) {
  return function createCardPlugin(config) {
    const myPlugin = createPlugin(config);
    const {
      onAction,
      queries
    } = myPlugin;
    return { ...(0, _everPluginCard.moFactory)({}),
      key: myPlugin.cardType,
      queries: {
        lazyRenderStrategy(_, node) {
          return node.type === 'card' && typeof node.data.height === 'number' ? {
            size: {
              height: node.data.height
            }
          } : undefined;
        },

        ...queries
      },
      cardType: myPlugin.cardType,
      onAction: (0, _createOnAction.default)(onAction),
      renderNode: {
        [_everPluginCard.Card.TYPE]: (props, controller, next) => {
          const node = props.node;
          const {
            cardType
          } = node.data;

          if (myPlugin.cardType !== cardType) {
            return next();
          }

          const errorTitle = `ZHI:CARD:${cardType}`;

          const fallback = /*#__PURE__*/_createElement(_everComponent.BambooPlaceholder, (0, _extends2.default)({}, props, {
            renderText: myPlugin.renderText
          }));

          try {
            return /*#__PURE__*/_createElement(_everComponent.ErrorBoundary, {
              errorTitle: errorTitle,
              fallback: fallback
            }, /*#__PURE__*/_createElement(ChildrenComponent, {
              childProps: props,
              controller: controller,
              plugin: myPlugin,
              config: config
            }));
          } catch (error) {
            // ErrorBoundary 只能捕获子组件错误，这里对组件本身加一层兜底处理
            _everLogger.default.error(errorTitle, error);

            return fallback;
          }
        }
      }
    };
  };
}
//# sourceMappingURL=index.js.map