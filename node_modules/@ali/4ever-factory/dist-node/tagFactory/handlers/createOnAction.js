"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnAction;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../actions");

var _insertTag = _interopRequireDefault(require("../command/insertTag"));

var _isSelectionInTag = _interopRequireDefault(require("../queries/isSelectionInTag"));

function createOnAction(customizedAction) {
  return function onAction(action, controller, next) {
    const {
      type,
      payload
    } = action;

    if (type === _actions.TAG_REMOVE) {
      const {
        node
      } = payload;
      return controller.command(_everCangjie.Commands.removeNodeByKey, node.key);
    }

    if (type === _actions.TAG_SET_DATA) {
      const {
        node,
        mergeData
      } = payload;
      const targetNode = controller.value.document.getNode(node.key);

      if (_everCangjie.Inline.isInline(targetNode)) {
        return controller.command(_everCangjie.Commands.setNodeByKey, node.key, {
          type: 'tag',
          data: { ...targetNode.data,
            ...mergeData
          }
        });
      }
    }

    if (type === _actions.TAG_INSERT) {
      const data = payload;

      if (controller.query('isCollapsedInInlineVoid') || (0, _isSelectionInTag.default)(controller.value)) {
        controller.command(_everCangjie.Commands.moveToStartOfNextText);
      }

      return controller.command(_everCangjie.Commands.focus).command(_insertTag.default, data);
    }

    return customizedAction ? customizedAction(action, controller, next) : next();
  };
}
//# sourceMappingURL=createOnAction.js.map