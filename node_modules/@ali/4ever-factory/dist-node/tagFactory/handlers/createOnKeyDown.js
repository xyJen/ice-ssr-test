"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createKeyDown;

var _isHotkey = require("is-hotkey");

var _everCangjie = require("@ali/4ever-cangjie");

var _getTagAtFocusEdge = _interopRequireDefault(require("../queries/getTagAtFocusEdge"));

const isArrowRightHotKey = (0, _isHotkey.isKeyHotkey)('right');
const isArrowLeftHotKey = (0, _isHotkey.isKeyHotkey)('left');

function createKeyDown(customizedKeyDown) {
  return function onKeyDown(event, controller, next) {
    const {
      selection
    } = controller.value;

    if (selection && selection.isCollapsed) {
      let tagElement = _everCangjie.hotkeys.isDeleteBackward(event) || _everCangjie.hotkeys.isDeleteForward(event) ? (0, _getTagAtFocusEdge.default)(controller, _everCangjie.hotkeys.isDeleteBackward(event) ? 'Backward' : 'Forward') : null;
      if (!tagElement) tagElement = isArrowLeftHotKey(event) ? (0, _getTagAtFocusEdge.default)(controller, isArrowLeftHotKey(event) ? 'Backward' : 'Forward') : null;
      if (!tagElement) tagElement = isArrowRightHotKey(event) ? (0, _getTagAtFocusEdge.default)(controller, isArrowRightHotKey(event) ? 'Forward' : 'Backward') : null;

      if (tagElement) {
        event.preventDefault();
        return controller.command(_everCangjie.Commands.moveAnchorToStartOfNode, tagElement).command(_everCangjie.Commands.moveFocusToEndOfNode, tagElement);
      }
    }

    return customizedKeyDown ? customizedKeyDown(event, controller, next) : next();
  };
}
//# sourceMappingURL=createOnKeyDown.js.map