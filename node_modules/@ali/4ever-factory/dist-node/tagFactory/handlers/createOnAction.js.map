{"version":3,"sources":["../../../../src/tagFactory/handlers/createOnAction.ts"],"names":["createOnAction","customizedAction","onAction","action","controller","next","type","payload","TAG_REMOVE","node","command","Commands","removeNodeByKey","key","TAG_SET_DATA","mergeData","targetNode","value","document","getNode","Inline","isInline","setNodeByKey","data","TAG_INSERT","query","moveToStartOfNextText","focus","insertTag"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAIe,SAASA,cAAT,CAAwBC,gBAAxB,EAAuD;AACpE,SAAO,SAASC,QAAT,CACLC,MADK,EAELC,UAFK,EAGLC,IAHK,EAIL;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBJ,MAA1B;;AACA,QAAIG,IAAI,KAAKE,mBAAb,EAAyB;AACvB,YAAM;AAAEC,QAAAA;AAAF,UAAWF,OAAjB;AACA,aAAOH,UAAU,CAACM,OAAX,CAAmBC,sBAASC,eAA5B,EAA6CH,IAAI,CAACI,GAAlD,CAAP;AACD;;AACD,QAAIP,IAAI,KAAKQ,qBAAb,EAA2B;AACzB,YAAM;AAAEL,QAAAA,IAAF;AAAQM,QAAAA;AAAR,UAAsBR,OAA5B;AACA,YAAMS,UAAU,GAAGZ,UAAU,CAACa,KAAX,CAAiBC,QAAjB,CAA0BC,OAA1B,CAAkCV,IAAI,CAACI,GAAvC,CAAnB;;AACA,UAAIO,oBAAOC,QAAP,CAAgBL,UAAhB,CAAJ,EAAiC;AAC/B,eAAOZ,UAAU,CAACM,OAAX,CAAmBC,sBAASW,YAA5B,EAA0Cb,IAAI,CAACI,GAA/C,EAAoD;AACzDP,UAAAA,IAAI,EAAE,KADmD;AAEzDiB,UAAAA,IAAI,EAAE,EACJ,GAAGP,UAAU,CAACO,IADV;AAEJ,eAAGR;AAFC;AAFmD,SAApD,CAAP;AAOD;AACF;;AACD,QAAIT,IAAI,KAAKkB,mBAAb,EAAyB;AACvB,YAAMD,IAAI,GAAGhB,OAAb;;AACA,UAAIH,UAAU,CAACqB,KAAX,CAAiB,yBAAjB,KAA+C,+BAAiBrB,UAAU,CAACa,KAA5B,CAAnD,EAAuF;AACrFb,QAAAA,UAAU,CAACM,OAAX,CAAmBC,sBAASe,qBAA5B;AACD;;AACD,aAAOtB,UAAU,CAACM,OAAX,CAAmBC,sBAASgB,KAA5B,EAAmCjB,OAAnC,CAA2CkB,kBAA3C,EAAsDL,IAAtD,CAAP;AACD;;AAED,WAAOtB,gBAAgB,GAAGA,gBAAgB,CAACE,MAAD,EAASC,UAAT,EAAqBC,IAArB,CAAnB,GAAgDA,IAAI,EAA3E;AACD,GAhCD;AAiCD","sourcesContent":["import { Action, Controller, Commands, Inline } from '@ali/4ever-cangjie';\nimport { TAG_SET_DATA, TAG_REMOVE, TAG_INSERT, RemoveTagPayload, SetTagDataPayload } from '../actions';\nimport insertTag, { InsertTagdPayload } from '../command/insertTag';\n\nimport isSelectionInTag from '../queries/isSelectionInTag';\n\ntype ActionType = (action: Action, controller: Controller, next: () => void) => void;\n\nexport default function createOnAction(customizedAction?: ActionType) {\n  return function onAction(\n    action: Action,\n    controller: Controller,\n    next: () => void,\n  ) {\n    const { type, payload } = action;\n    if (type === TAG_REMOVE) {\n      const { node } = payload as RemoveTagPayload;\n      return controller.command(Commands.removeNodeByKey, node.key);\n    }\n    if (type === TAG_SET_DATA) {\n      const { node, mergeData } = payload as SetTagDataPayload;\n      const targetNode = controller.value.document.getNode(node.key);\n      if (Inline.isInline(targetNode)) {\n        return controller.command(Commands.setNodeByKey, node.key, {\n          type: 'tag',\n          data: {\n            ...targetNode.data,\n            ...mergeData,\n          },\n        });\n      }\n    }\n    if (type === TAG_INSERT) {\n      const data = payload as InsertTagdPayload;\n      if (controller.query('isCollapsedInInlineVoid') || isSelectionInTag(controller.value)) {\n        controller.command(Commands.moveToStartOfNextText);\n      }\n      return controller.command(Commands.focus).command(insertTag, data as InsertTagdPayload);\n    }\n\n    return customizedAction ? customizedAction(action, controller, next) : next();\n  };\n}\n"],"file":"createOnAction.js"}