{"version":3,"sources":["../../../../../src/tagFactory/components/Container/index.tsx"],"names":["Container","props","children","verticalAlign","isSelected","restrictSize","node","height","tagType","data","width","refWrapper","React","useRef","cssHeight","cssWidth","tagStyle","overflow","textOverflow","whiteSpace","maxWidth","className","useMemo","selected","Tag","TYPE"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;uBAJ4B,a;;AAa5B,MAAMA,SAA2C,GAAIC,KAAD,IAAW;AAC7D,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,aAAZ;AAA2BC,IAAAA,UAA3B;AAAuCC,IAAAA;AAAvC,MAAwDJ,KAA9D;AACA,QAAMK,IAAI,GAAGL,KAAK,CAACK,IAAnB;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAsBF,IAAI,CAACG,IAAjC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYJ,IAAI,CAACG,IAAvB;;AACA,QAAME,UAAU,GAAGC,eAAMC,MAAN,CAAqC,IAArC,CAAnB;;AAEA,MAAIC,SAAc,GAAG,MAArB;AACA,MAAIC,QAAa,GAAG,MAApB;;AAEA,MAAIV,YAAJ,EAAkB;AAChBS,IAAAA,SAAS,GAAG,sBAASP,MAAT,KAAoBA,MAAM,GAAG,CAA7B,GAAkC,GAAEA,MAAO,IAA3C,GAAiDA,MAA7D;AACAQ,IAAAA,QAAQ,GAAG,sBAASL,KAAT,KAAmBA,KAAK,GAAG,CAA3B,GAAgC,GAAEA,KAAM,IAAxC,GAA8CA,KAAzD;AACD;;AAED,QAAMM,QAA6B,GAAG;AACpCT,IAAAA,MAAM,EAAEO,SAD4B;AAEpCJ,IAAAA,KAAK,EAAEK,QAF6B;AAGpCZ,IAAAA,aAHoC;AAIpCc,IAAAA,QAAQ,EAAE,QAJ0B;AAKpCC,IAAAA,YAAY,EAAE,UALsB;AAMpCC,IAAAA,UAAU,EAAE,QANwB;AAOpCC,IAAAA,QAAQ,EAAE;AAP0B,GAAtC;;AAUA,QAAMC,SAAiB,GAAGT,eAAMU,OAAN,CACxB,MACE,yBAAW;AACTC,IAAAA,QAAQ,EAAEnB;AADD,GAAX,CAFsB,EAKxB,CAACA,UAAD,CALwB,CAA1B;;AAQA,sBACE,eAAC,yBAAD;AACE,IAAA,GAAG,EAAEO,UADP;AAEE,mBAAaH,OAFf;AAGE,iBAAWgB,mBAAIC,IAHjB;AAIE,IAAA,KAAK,EAAET,QAJT;AAKE,IAAA,SAAS,EAAEK;AALb,KAOGnB,QAPH,CADF;AAWD,CA5CD;;eA6CeF,S","sourcesContent":["import React, { CSSProperties } from 'react';\nimport classnames from 'classnames';\nimport { Inline, BiPluginConfig } from '@ali/4ever-cangjie';\nimport { TagData, Tag, TagWrapper } from '@ali/4ever-plugin-tag';\nimport { TagLocale, RenderTagProps } from '../../type';\nimport { isNumber } from 'lodash-es';\n\ninterface RenderTagChildrenProps extends Omit<RenderTagProps, 'children'> {\n  locale: TagLocale;\n  verticalAlign?: CSSProperties['verticalAlign'];\n  children: JSX.Element;\n  config: BiPluginConfig;\n}\n\nconst Container: React.FC<RenderTagChildrenProps> = (props) => {\n  const { children, verticalAlign, isSelected, restrictSize } = props;\n  const node = props.node as Inline;\n  const { height, tagType } = node.data as TagData;\n  const { width } = node.data as TagData;\n  const refWrapper = React.useRef<HTMLSpanElement | null>(null);\n\n  let cssHeight: any = 'auto';\n  let cssWidth: any = 'auto';\n\n  if (restrictSize) {\n    cssHeight = isNumber(height) && height > 0 ? `${height}px` : height;\n    cssWidth = isNumber(width) && width > 0 ? `${width}px` : width;\n  }\n\n  const tagStyle: React.CSSProperties = {\n    height: cssHeight,\n    width: cssWidth,\n    verticalAlign,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    maxWidth: '100%',\n  };\n\n  const className: string = React.useMemo(\n    () =>\n      classnames({\n        selected: isSelected,\n      }),\n    [isSelected],\n  );\n\n  return (\n    <TagWrapper\n      ref={refWrapper}\n      data-testid={tagType}\n      data-type={Tag.TYPE}\n      style={tagStyle}\n      className={className}\n    >\n      {children}\n    </TagWrapper>\n  );\n};\nexport default Container;\n"],"file":"index.js"}