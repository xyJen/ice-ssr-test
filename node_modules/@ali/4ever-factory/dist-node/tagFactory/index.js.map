{"version":3,"sources":["../../../src/tagFactory/index.ts"],"names":["tagFactory","createPlugin","moFactory","createTagPlugin","bizConfig","myPlugin","menubar","toolbar","onAction","onCangjiePaste","actions","renderHoverToolbar","key","tagType","renderContent","renderNode","onKeyDown","commands","insertTag","insertTagCommand","queries","models","klass","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAUA,SAASA,UAAT,CACEC,YADF,EAEEC,SAFF,EAGgB;AACd,SAAO,SAASC,eAAT,CAAyBC,SAAzB,EAAmE;AACxE,UAAMC,QAAQ,GAAGJ,YAAY,CAACG,SAAD,CAA7B;AACA,UAAM;AAAEE,MAAAA,OAAF;AAAWC,MAAAA,OAAX;AAAoBC,MAAAA,QAApB;AAA8BC,MAAAA,cAA9B;AAA8CC,MAAAA,OAA9C;AAAuDC,MAAAA;AAAvD,QAA8EN,QAApF;AAEA,WAAO,EACL,GAAGH,SAAS,GAAG,EAAH,CADP;AAELU,MAAAA,GAAG,EAAEP,QAAQ,CAACQ,OAFT;AAGLA,MAAAA,OAAO,EAAER,QAAQ,CAACQ,OAHb;AAILP,MAAAA,OAJK;AAKL;AACAC,MAAAA,OANK;AAOLO,MAAAA,aAAa,EAAE,kCAAoBT,QAApB,CAPV;AAQLU,MAAAA,UAAU,EAAE,kCAAoBV,QAApB,EAA8BD,SAA9B,CARP;AASLY,MAAAA,SAAS,EAAE,+BATN;AAULR,MAAAA,QAAQ,EAAE,6BAAeA,QAAf,CAVL;AAWLC,MAAAA,cAAc,EAAE,mCAAqBA,cAArB,CAXX;AAYLQ,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAEC;AADH,OAZL;AAeLT,MAAAA,OAfK;AAgBLU,MAAAA,OAAO,EAAEf,QAAQ,CAACe,OAAT,IAAoB,EAhBxB;AAiBLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,QADD;AAENC,QAAAA,IAAI,EAAE;AAFA,OAjBH;AAqBLZ,MAAAA;AArBK,KAAP;AAuBD,GA3BD;AA4BD","sourcesContent":["import createRenderElement from './createRenderElement';\nimport createRenderContent from './createRenderContent';\nimport createOnKeyDown from './handlers/createOnKeyDown';\nimport createOnAction from './handlers/createOnAction';\nimport { removeTag, setTagData, insertTag } from './actions';\nimport { default as insertTagCommand } from './command/insertTag';\nimport { CustomizedBiTagPluginType, TagPluginType } from './type';\nimport createOnCangjiePaste from './handlers/createOnCangjiePaste';\nimport type { BiPluginConfig, MoFactory } from '@ali/4ever-cangjie';\n\nexport type { TagLocale, TagPluginType, CustomizedBiTagPluginType, RenderTagProps, TagRenderNodeType } from './type';\n\ninterface TagPlugin<T> {\n  (bizConfig: BiPluginConfig): TagPluginType;\n  components?: T;\n}\n\nfunction tagFactory<T = any>(\n  createPlugin: (bizConfig: BiPluginConfig) => CustomizedBiTagPluginType,\n  moFactory?: MoFactory,\n): TagPlugin<T> {\n  return function createTagPlugin(bizConfig: BiPluginConfig): TagPluginType {\n    const myPlugin = createPlugin(bizConfig);\n    const { menubar, toolbar, onAction, onCangjiePaste, actions, renderHoverToolbar } = myPlugin;\n\n    return {\n      ...moFactory?.({}),\n      key: myPlugin.tagType,\n      tagType: myPlugin.tagType,\n      menubar,\n      // @ts-ignore\n      toolbar,\n      renderContent: createRenderContent(myPlugin),\n      renderNode: createRenderElement(myPlugin, bizConfig),\n      onKeyDown: createOnKeyDown(),\n      onAction: createOnAction(onAction),\n      onCangjiePaste: createOnCangjiePaste(onCangjiePaste),\n      commands: {\n        insertTag: insertTagCommand,\n      },\n      actions,\n      queries: myPlugin.queries || {},\n      models: {\n        klass: 'inline',\n        type: 'tag',\n      },\n      renderHoverToolbar,\n    };\n  };\n}\n\nexport {\n  tagFactory,\n  removeTag,\n  setTagData,\n  insertTag,\n};\n"],"file":"index.js"}