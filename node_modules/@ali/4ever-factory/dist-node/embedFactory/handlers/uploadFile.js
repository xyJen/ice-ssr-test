"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = uploadFile;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginEmbed = require("@ali/4ever-plugin-embed");

var _updateFile = _interopRequireDefault(require("../commands/updateFile"));

var _everUtils = require("@ali/4ever-utils");

function uploadFile(controller, file, onUpload, autoPreview) {
  const id = (0, _everUtils.generateKey)();
  const data = {
    id,
    name: file.name,
    size: file.size,
    type: (0, _everPluginEmbed.getFileTypeForRead)(file.name)
  };

  const embed = _everCangjie.Block.create({
    type: 'embed',
    data
  });

  const {
    selection,
    startBlock
  } = controller.value;
  controller.command(_everCangjie.Commands.insertBlock, embed).command(_everCangjie.Commands.insertBlock, 'paragraph');

  if (selection.isCollapsed && startBlock && startBlock.type === 'embed') {
    controller.command(_everCangjie.Commands.removeNodeByKey, startBlock.key);
  }

  if (selection.isCollapsed && startBlock && startBlock.type === 'paragraph' && !startBlock.text) {
    controller.command(_everCangjie.Commands.removeNodeByKey, startBlock.key);
  } // we-word 如果不调用 flush，下一个 onChange 中 embed 相关的数据会丢失，导致插入失败，具体原因待排查


  controller.flush();

  const notifyProgress = uploadPercent => {
    const {
      injections
    } = controller.value;

    const injection = _everCangjie.Injection.create({
      key: embed.key,
      data: {
        uploadPercent
      }
    });

    controller.setInjections([...injections.filter(inj => inj.key !== embed.key), injection]);
  };

  onUpload(file, id, notifyProgress).then(res => {
    const {
      url: src
    } = res;
    if (!src) return;
    const params = {};
    const fileType = (0, _everPluginEmbed.getFileTypeForRead)(file.name); // 两种情况可以进入预览
    // 1、音视频；2、打开了控制开关，文件类型为可预览类型

    if (fileType === _everPluginEmbed.FileTypeMap.Video || fileType === _everPluginEmbed.FileTypeMap.Audio || autoPreview && _everPluginEmbed.CanPreviewFileTypes.includes(fileType)) {
      Object.assign(params, {
        viewType: 'preview'
      });
    }

    const node = controller.value.document.getNode(embed.key);

    if (node) {
      (0, _updateFile.default)(controller, node, {
        src,
        ...params
      });
    }
  }).catch(e => {
    // eslint-disable-line
    console.error(e);
    const node = controller.value.document.getNode(embed.key);

    if (node) {
      const params = {
        src: '',
        name: file.name,
        type: (0, _everPluginEmbed.getFileTypeForRead)(file.name),
        size: 0,
        errorType: e.message
      };
      return (0, _updateFile.default)(controller, node, { ...params
      });
    }

    return undefined;
  });
}
//# sourceMappingURL=uploadFile.js.map