{"version":3,"sources":["../../../../src/embedFactory/handlers/uploadFile.ts"],"names":["uploadFile","controller","file","onUpload","autoPreview","id","data","name","size","type","embed","Block","create","selection","startBlock","value","command","Commands","insertBlock","isCollapsed","removeNodeByKey","key","text","flush","notifyProgress","uploadPercent","injections","injection","Injection","setInjections","filter","inj","then","res","url","src","params","fileType","FileTypeMap","Video","Audio","CanPreviewFileTypes","includes","Object","assign","viewType","node","document","getNode","catch","e","console","error","errorType","message","undefined"],"mappings":"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","sourcesContent":["import { Controller, Block, Commands, Injection } from '@ali/4ever-cangjie';\nimport {\n  FileTypeMap,\n  getFileTypeForRead,\n  CanPreviewFileTypes,\n} from '@ali/4ever-plugin-embed';\nimport updateFile from '../commands/updateFile';\nimport { generateKey } from '@ali/4ever-utils';\n\nexport default function uploadFile(\n  controller: Controller,\n  file,\n  onUpload,\n  autoPreview,\n) {\n  const id = generateKey();\n\n  const data = {\n    id,\n    name: file.name,\n    size: file.size,\n    type: getFileTypeForRead(file.name),\n  };\n  const embed = Block.create({\n    type: 'embed',\n    data,\n  });\n  const { selection, startBlock } = controller.value;\n  controller\n    .command(Commands.insertBlock, embed)\n    .command(Commands.insertBlock, 'paragraph');\n\n  if (selection.isCollapsed && startBlock && startBlock.type === 'embed') {\n    controller.command(Commands.removeNodeByKey, startBlock.key);\n  }\n\n  if (\n    selection.isCollapsed &&\n    startBlock &&\n    startBlock.type === 'paragraph' &&\n    !startBlock.text\n  ) {\n    controller.command(Commands.removeNodeByKey, startBlock.key);\n  }\n\n  // we-word 如果不调用 flush，下一个 onChange 中 embed 相关的数据会丢失，导致插入失败，具体原因待排查\n  controller.flush();\n\n  const notifyProgress = (uploadPercent: number) => {\n    const { injections } = controller.value;\n    const injection = Injection.create({\n      key: embed.key,\n      data: {\n        uploadPercent,\n      },\n    });\n    controller.setInjections([\n      ...injections.filter((inj) => inj.key !== embed.key),\n      injection,\n    ]);\n  };\n\n  onUpload(file, id, notifyProgress)\n    .then((res) => {\n      const { url: src } = res;\n      if (!src) return;\n      const params = {};\n      const fileType = getFileTypeForRead(file.name);\n      // 两种情况可以进入预览\n      // 1、音视频；2、打开了控制开关，文件类型为可预览类型\n      if (\n        fileType === FileTypeMap.Video ||\n        fileType === FileTypeMap.Audio ||\n        (autoPreview && CanPreviewFileTypes.includes(fileType))\n      ) {\n        Object.assign(params, {\n          viewType: 'preview',\n        });\n      }\n      const node = controller.value.document.getNode(embed.key);\n      if (node) {\n        updateFile(controller, node, {\n          src,\n          ...params,\n        });\n      }\n    })\n    .catch((e) => {\n      // eslint-disable-line\n      console.error(e);\n      const node = controller.value.document.getNode(embed.key);\n      if (node) {\n        const params = {\n          src: '',\n          name: file.name,\n          type: getFileTypeForRead(file.name),\n          size: 0,\n          errorType: e.message,\n        };\n        return updateFile(controller, node, {\n          ...params,\n        });\n      }\n      return undefined;\n    });\n}\n"],"file":"uploadFile.js"}