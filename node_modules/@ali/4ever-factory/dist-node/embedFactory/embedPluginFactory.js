"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = embedPluginFactory;

var _lodash = require("lodash");

var _insertEmbed = _interopRequireDefault(require("./commands/insertEmbed"));

var _insertFile = _interopRequireDefault(require("./commands/insertFile"));

var _onAction = _interopRequireDefault(require("./handlers/onAction"));

var _onDrop = _interopRequireDefault(require("./handlers/onDrop"));

var actions = _interopRequireWildcard(require("./actions"));

function embedPluginFactory(params, moFactory) {
  const {
    createRenderNode,
    commands,
    menubar,
    toolbar,
    quickInsert,
    configName,
    actions: pluginActions
  } = params;

  function createPlugin(config) {
    const pluginConfig = config[configName] || {};
    const {
      uploadFile,
      enableFilePreview = true,
      autoPreview = true
    } = pluginConfig; // 目前存在 insertVideo, insertAudio, insertEmbed 三个 command

    const insertCommandName = `insert${(0, _lodash.upperFirst)(configName)}`;
    return { ...moFactory({}),
      key: configName,
      menubar,
      // @ts-ignore
      toolbar: toolbar ? toolbar(config) : null,
      commands: {
        // TODO insertEmbed 的第二个参数 enableFilePreview 并不适用于所有的子插件，目前视频始终允许预览
        [insertCommandName]: (0, _insertEmbed.default)(uploadFile, enableFilePreview && autoPreview, configName),
        insertFile: _insertFile.default,
        ...commands
      },
      renderNode: createRenderNode(config),
      onAction: _onAction.default,
      onDrop: (0, _onDrop.default)(uploadFile, enableFilePreview),
      quickInsert,
      models: {
        klass: 'block',
        type: 'embed'
      }
    };
  }

  createPlugin.actions = pluginActions || actions;
  return createPlugin;
}
//# sourceMappingURL=embedPluginFactory.js.map