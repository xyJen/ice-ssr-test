"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mobileEmbedPluginFactory;
exports.actions = void 0;

var _lodash = require("lodash");

var _insertEmbed = _interopRequireDefault(require("./commands/insertEmbed"));

var _insertFile = _interopRequireDefault(require("./commands/insertFile"));

var actions = _interopRequireWildcard(require("./actions"));

exports.actions = actions;

var _onAction = _interopRequireDefault(require("./handlers/onAction"));

function mobileEmbedPluginFactory(params, moFactory) {
  const {
    createRenderNode,
    commands,
    configName,
    actions: customActions = {}
  } = params;
  return function (config) {
    const pluginConfig = config[configName] || {};
    const {
      uploadFile,
      enableFilePreview = false
    } = pluginConfig; // 目前存在 insertVideo, insertAudio, insertEmbed 三个 command

    const insertCommandName = `insert${(0, _lodash.upperFirst)(configName)}`;
    return { ...moFactory({}),
      key: configName,
      renderNode: createRenderNode(config),
      commands: {
        [insertCommandName]: (0, _insertEmbed.default)(uploadFile, enableFilePreview, configName),
        insertFile: _insertFile.default,
        ...commands
      },
      onAction: _onAction.default,
      models: {
        klass: 'block',
        type: 'embed'
      }
    };
  };
}
//# sourceMappingURL=mobileEmbedPluginFactory.js.map