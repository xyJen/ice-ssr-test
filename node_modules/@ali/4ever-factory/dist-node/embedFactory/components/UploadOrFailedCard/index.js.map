{"version":3,"sources":["../../../../../src/embedFactory/components/UploadOrFailedCard/index.tsx"],"names":["UploadOrFailedCard","props","node","locale","isSelected","controller","uploadPercent","data","isCollapsed","value","selection","cardRef","renderInlineToolbar","current","enableBorderHighlight","query"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;uBAF4B,a;;AAW5B,SAASA,kBAAT,CAA4BC,KAA5B,EAA0C;AACxC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA;AAA5B,MAA2CJ,KAAjD;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAoBJ,IAAI,CAACK,IAA/B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBH,UAAU,CAACI,KAAX,CAAiBC,SAAzC;AACA,QAAMC,OAAO,GAAG,mBAAO,IAAP,CAAhB,CAJwC,CAKxC;;AACA,QAAMC,mBAAmB,GAAG,wBAAY,MAAM;AAC5C,wBACE,eAAC,2BAAD;AACE,MAAA,UAAU,EAAEP,UADd;AAEE,MAAA,IAAI,EAAEH,IAFR;AAGE,MAAA,MAAM,EAAEC,MAHV;AAIE,MAAA,WAAW,EAAEQ,OAAO,CAACE;AAJvB,MADF;AAQD,GAT2B,EASzB,CAACR,UAAD,EAAaH,IAAb,EAAmBC,MAAnB,CATyB,CAA5B;AAWA,QAAMW,qBAAqB,GAAGT,UAAU,CAACU,KAAX,CAAiB,uBAAjB,CAA9B,CAjBwC,CAkBxC;;AACA,sBACE,eAAC,cAAD,CAAO,QAAP,QACGX,UAAU,IAAII,WAAd,GAA4BI,mBAAmB,EAA/C,GAAoD,IADvD,eAEE;AAAK,IAAA,GAAG,EAAED;AAAV,KAEIL,aAAa,gBACX,eAAC,wCAAD;AAAyB,IAAA,IAAI,EAAEJ,IAA/B;AAAqC,IAAA,UAAU,EAAEE,UAAjD;AAA6D,IAAA,qBAAqB,EAAEU;AAApF,IADW,gBAEX,eAAC,gCAAD;AAAiB,IAAA,IAAI,EAAEZ,IAAvB;AAA6B,IAAA,UAAU,EAAEE,UAAzC;AAAqD,IAAA,MAAM,EAAED,MAA7D;AAAqE,IAAA,qBAAqB,EAAEW;AAA5F,IAJN,CAFF,CADF;AAYD;;eAEcd,kB","sourcesContent":["import React, { useCallback, useRef } from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { EmbedFailedCard, EmbedUploadProgressCard } from '@ali/4ever-plugin-embed';\nimport EmbedInlineToolbar from '../EmbedInlineToolbar';\n\ninterface Props {\n  node: any;\n  locale: Record<string, string>;\n  isSelected: boolean;\n  controller: Controller;\n}\n\nfunction UploadOrFailedCard(props: Props) {\n  const { node, locale, isSelected, controller } = props;\n  const { uploadPercent } = node.data;\n  const { isCollapsed } = controller.value.selection;\n  const cardRef = useRef(null);\n  // TODO @淼淼 替换成 hoverToolbar\n  const renderInlineToolbar = useCallback(() => {\n    return (\n      <EmbedInlineToolbar\n        controller={controller}\n        node={node}\n        locale={locale}\n        triggerNode={cardRef.current}\n      />\n    );\n  }, [controller, node, locale]);\n\n  const enableBorderHighlight = controller.query('enableBorderHighlight');\n  // TODO @淼淼 替换成 hoverToolbar\n  return (\n    <React.Fragment>\n      {isSelected && isCollapsed ? renderInlineToolbar() : null}\n      <div ref={cardRef}>\n        {\n          uploadPercent ?\n            <EmbedUploadProgressCard node={node} isSelected={isSelected} enableBorderHighlight={enableBorderHighlight}/> :\n            <EmbedFailedCard node={node} isSelected={isSelected} locale={locale} enableBorderHighlight={enableBorderHighlight}/>\n        }\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default UploadOrFailedCard;\n"],"file":"index.js"}