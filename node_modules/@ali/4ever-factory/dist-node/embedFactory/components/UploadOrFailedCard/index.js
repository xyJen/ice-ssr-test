"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _everPluginEmbed = require("@ali/4ever-plugin-embed");

var _EmbedInlineToolbar = _interopRequireDefault(require("../EmbedInlineToolbar"));

const _createElement = /*#__PURE__*/_react.default.createElement;

function UploadOrFailedCard(props) {
  const {
    node,
    locale,
    isSelected,
    controller
  } = props;
  const {
    uploadPercent
  } = node.data;
  const {
    isCollapsed
  } = controller.value.selection;
  const cardRef = (0, _react.useRef)(null); // TODO @淼淼 替换成 hoverToolbar

  const renderInlineToolbar = (0, _react.useCallback)(() => {
    return /*#__PURE__*/_createElement(_EmbedInlineToolbar.default, {
      controller: controller,
      node: node,
      locale: locale,
      triggerNode: cardRef.current
    });
  }, [controller, node, locale]);
  const enableBorderHighlight = controller.query('enableBorderHighlight'); // TODO @淼淼 替换成 hoverToolbar

  return /*#__PURE__*/_createElement(_react.default.Fragment, null, isSelected && isCollapsed ? renderInlineToolbar() : null, /*#__PURE__*/_createElement("div", {
    ref: cardRef
  }, uploadPercent ? /*#__PURE__*/_createElement(_everPluginEmbed.EmbedUploadProgressCard, {
    node: node,
    isSelected: isSelected,
    enableBorderHighlight: enableBorderHighlight
  }) : /*#__PURE__*/_createElement(_everPluginEmbed.EmbedFailedCard, {
    node: node,
    isSelected: isSelected,
    locale: locale,
    enableBorderHighlight: enableBorderHighlight
  })));
}

var _default = UploadOrFailedCard;
exports.default = _default;
//# sourceMappingURL=index.js.map