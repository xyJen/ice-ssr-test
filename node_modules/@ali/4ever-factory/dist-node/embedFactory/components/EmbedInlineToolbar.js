"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _weDesign = require("@ali/we-design");

var _everComponent = require("@ali/4ever-component");

var _actions = require("../actions");

var _everPluginEmbed = require("@ali/4ever-plugin-embed");

const _createElement = /*#__PURE__*/_react.default.createElement;
const embedInlineLayout = [{
  toolButtons: [{
    name: 'embed.cardMode'
  }, {
    name: 'embed.previewMode'
  }, {
    name: 'embed.del'
  }]
}];

var _ref = /*#__PURE__*/_createElement(_weDesign.EmbedCardBetaNormal, null);

var _ref2 = /*#__PURE__*/_createElement(_weDesign.Preview1BetaNormal, null);

var _ref3 = /*#__PURE__*/_createElement(_weDesign.DeleteBetaNormal, null);

const EmbedInlineToolbar = props => {
  const {
    locale,
    controller,
    node,
    onSwitchViewType,
    isMoreButtonShown,
    triggerNode
  } = props;
  const {
    isBlurred
  } = controller.value;
  const {
    isExpanded
  } = controller.value.rangeSelection;
  const {
    data
  } = node;
  const {
    name
  } = data;
  const shouldShowModeButtons = _everPluginEmbed.CanPreviewFileTypes.includes((0, _everPluginEmbed.getFileTypeForRead)(name)) && isMoreButtonShown;

  const handleSwitchView = (e, type) => {
    e.preventDefault();
    e.stopPropagation();
    onSwitchViewType && onSwitchViewType(type);
  };

  const handlePreviewMode = e => {
    handleSwitchView(e, 'preview');
  };

  const handleCardMode = e => {
    handleSwitchView(e, 'card');
  };

  const handleDel = _react.default.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    controller.run('onAction', (0, _actions.removeFile)(node));
  }, [controller, node]);

  const EmbedCardButton = () => {
    return /*#__PURE__*/_createElement(_weDesign.Button, {
      bordered: false,
      onClick: handleCardMode,
      title: locale.cardView,
      icon: _ref,
      testid: "embed-toolbar-card"
    });
  };

  const EmbedPreviewButton = () => {
    return /*#__PURE__*/_createElement(_weDesign.Button, {
      bordered: false,
      onClick: handlePreviewMode,
      title: locale.previewView,
      icon: _ref2,
      testid: "embed-toolbar-previewView"
    });
  };

  const DelEmbedButton = () => {
    return /*#__PURE__*/_createElement(_weDesign.Button, {
      bordered: false,
      onClick: handleDel,
      title: locale.delete,
      icon: _ref3,
      testid: "embed-toolbar-delete"
    });
  };

  const customToolButtons = {
    'embed.cardMode': shouldShowModeButtons ? EmbedCardButton : null,
    'embed.previewMode': shouldShowModeButtons ? EmbedPreviewButton : null,
    'embed.del': DelEmbedButton
  };

  if (isExpanded || isBlurred) {
    return null;
  }

  return /*#__PURE__*/_createElement(_everComponent.InlineToolbar, {
    visible: true,
    inlineLayout: embedInlineLayout,
    customToolButtons: customToolButtons,
    triggerNode: triggerNode || undefined
  });
};

var _default = EmbedInlineToolbar;
exports.default = _default;
//# sourceMappingURL=EmbedInlineToolbar.js.map