"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _everComponent = require("@ali/4ever-component");

var _everPluginCard = require("@ali/4ever-plugin-card");

var _cardContainer = _interopRequireDefault(require("./components/cardContainer"));

var _actions = require("./actions");

var _cardStore = require("./utils/cardStore");

const _createElement = /*#__PURE__*/React.createElement;

const ChildrenComponent = ({
  childProps,
  controller,
  plugin,
  config,
  restrictSize
}) => {
  const {
    locale,
    renderNode,
    isMobile,
    cardStyle
  } = plugin;
  const disableSelected = typeof plugin.disableSelected === 'function' ? plugin.disableSelected(childProps.node) : plugin.disableSelected;
  const {
    key
  } = childProps.node;
  const isOwner = (0, _cardStore.isOwnerAndFirstCreated)(key);
  React.useEffect(() => {
    if (isOwner) (0, _cardStore.setOwnerAndFirstCreated)(key, false);
  }, [key, isOwner]);
  return /*#__PURE__*/_createElement(_cardContainer.default, (0, _extends2.default)({}, childProps, {
    config: config,
    isMobile: isMobile,
    disableSelected: disableSelected,
    locale: locale,
    cardStyle: cardStyle,
    restrictSize: restrictSize
  }), renderNode({ ...childProps,
    isOwnerAndFirstCreated: isOwner
  }, controller));
};

var _default = (plugin, config, PHolder) => {
  const {
    cardType: cardTypeConfig
  } = plugin;
  return {
    [_everPluginCard.Card.TYPE]: (props, controller, next) => {
      const {
        restrictSize
      } = props;
      const node = props.node;
      const {
        cardType
      } = node.data;

      if (cardTypeConfig !== cardType) {
        return next();
      }

      const errorTitle = `BI:CARD:${cardType}`;

      const fallback = /*#__PURE__*/_createElement(PHolder, (0, _extends2.default)({}, props, {
        renderText: plugin.renderText,
        editor: controller,
        handleRemoveNode: () => controller.run('onAction', (0, _actions.removeCard)(node))
      }));

      try {
        return /*#__PURE__*/_createElement(_everComponent.ErrorBoundary, {
          errorTitle: errorTitle,
          fallback: fallback
        }, /*#__PURE__*/_createElement(ChildrenComponent, {
          restrictSize: restrictSize,
          childProps: props,
          controller: controller,
          plugin: plugin,
          config: config
        }));
      } catch (error) {
        // ErrorBoundary 只能捕获子组件错误，这里对组件本身加一层兜底处理
        _everLogger.default.error(errorTitle, error);

        return fallback;
      }
    }
  };
};

exports.default = _default;
//# sourceMappingURL=createRenderNode.js.map