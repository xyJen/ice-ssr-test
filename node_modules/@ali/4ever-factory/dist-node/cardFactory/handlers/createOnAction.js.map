{"version":3,"sources":["../../../../src/cardFactory/handlers/createOnAction.ts"],"names":["customizedAction","onAction","action","controller","next","type","payload","CARD_REMOVE","node","command","removeCard","CARD_SET_DATA","mergeData","setCardData","CARD_SET_INJECTION","injection","setCardInjection","CARD_INSERT","insertCard"],"mappings":";;;;;;;;;AACA;;AASA;;AACA;;AACA;;AACA;;eAKgBA,gBAAD,IAAmC;AAChD,SAAO,SAASC,QAAT,CACLC,MADK,EAELC,UAFK,EAGLC,IAHK,EAIL;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBJ,MAA1B;;AACA,QAAIG,IAAI,KAAKE,oBAAb,EAA0B;AACxB,YAAM;AAAEC,QAAAA;AAAF,UAAWF,OAAjB;AAEA,aAAOH,UAAU,CAACM,OAAX,CAAmBC,mBAAnB,EAA+BF,IAA/B,CAAP;AACD;;AACD,QAAIH,IAAI,KAAKM,sBAAb,EAA4B;AAC1B,YAAM;AAAEH,QAAAA,IAAF;AAAQI,QAAAA;AAAR,UAAsBN,OAA5B;AACA,aAAOH,UAAU,CAACM,OAAX,CAAmBI,oBAAnB,EAAgCL,IAAhC,EAAsCI,SAAtC,CAAP;AACD;;AACD,QAAIP,IAAI,KAAKS,2BAAb,EAAiC;AAC/B,YAAM;AAAEN,QAAAA,IAAF;AAAQO,QAAAA;AAAR,UAAsBT,OAA5B;AACA,aAAOH,UAAU,CAACM,OAAX,CAAmBO,yBAAnB,EAAqCR,IAArC,EAA2CO,SAA3C,CAAP;AACD;;AACD,QAAIV,IAAI,KAAKY,oBAAb,EAA0B;AACxB,aAAOd,UAAU,CAACM,OAAX,CAAmBS,mBAAnB,EAA+BZ,OAA/B,CAAP;AACD;;AACD,WAAON,gBAAgB,GAAGA,gBAAgB,CAACE,MAAD,EAASC,UAAT,EAAqBC,IAArB,CAAnB,GAAgDA,IAAI,EAA3E;AACD,GAvBD;AAwBD,C","sourcesContent":["import { Action, Controller } from '@ali/4ever-cangjie';\nimport {\n  CARD_INSERT,\n  CARD_REMOVE,\n  RemoveCardPayload,\n  CARD_SET_DATA,\n  SetCardDataPayload,\n  CARD_SET_INJECTION,\n  SetCardInjectionPayload,\n} from '../actions';\nimport insertCard, { CardDataJSON } from '../commands/insertCard';\nimport removeCard from '../commands/removeCard';\nimport setCardData from '../commands/setCardData';\nimport setCardInjection from '../commands/setCardInjection';\n\ntype ActionType = (action: Action, controller: Controller, next: () => void) => void;\n\n\nexport default (customizedAction?: ActionType) => {\n  return function onAction(\n    action: Action,\n    controller: Controller,\n    next: () => void,\n  ) {\n    const { type, payload } = action;\n    if (type === CARD_REMOVE) {\n      const { node } = payload as RemoveCardPayload;\n\n      return controller.command(removeCard, node);\n    }\n    if (type === CARD_SET_DATA) {\n      const { node, mergeData } = payload as SetCardDataPayload;\n      return controller.command(setCardData, node, mergeData);\n    }\n    if (type === CARD_SET_INJECTION) {\n      const { node, injection } = payload as SetCardInjectionPayload;\n      return controller.command(setCardInjection, node, injection);\n    }\n    if (type === CARD_INSERT) {\n      return controller.command(insertCard, payload as CardDataJSON);\n    }\n    return customizedAction ? customizedAction(action, controller, next) : next();\n  };\n};"],"file":"createOnAction.js"}