{"version":3,"sources":["../../../src/cardFactory/actions.ts"],"names":["CARD_INSERT","Symbol","CARD_REMOVE","CARD_SET_DATA","CARD_SET_INJECTION","removeCard","node","type","payload","insertCard","setCardData","mergeData","setCardInjection","injection","logger","error","JSON","stringify"],"mappings":";;;;;;;;;;;;;AAEA;;AAEO,MAAMA,WAAW,GAAGC,MAAM,CAAC,aAAD,CAA1B;;AACA,MAAMC,WAAW,GAAGD,MAAM,CAAC,aAAD,CAA1B;;AACA,MAAME,aAAa,GAAGF,MAAM,CAAC,eAAD,CAA5B;;AACA,MAAMG,kBAAkB,GAAGH,MAAM,CAAC,oBAAD,CAAjC;;;AAgBA,SAASI,UAAT,CACLC,IADK,EAEsB;AAC3B,SAAO;AACLC,IAAAA,IAAI,EAAEL,WADD;AAELM,IAAAA,OAAO,EAAE;AACPF,MAAAA;AADO;AAFJ,GAAP;AAMD;;AAEM,SAASG,UAAT,CAAoBD,OAApB,EAA2E;AAChF,SAAO;AACLD,IAAAA,IAAI,EAAEP,WADD;AAELQ,IAAAA;AAFK,GAAP;AAID;;AAEM,SAASE,WAAT,CACLJ,IADK,EAELK,SAFK,EAGuB;AAC5B,SAAO;AACLJ,IAAAA,IAAI,EAAEJ,aADD;AAELK,IAAAA,OAAO,EAAE;AACPF,MAAAA,IADO;AAEPK,MAAAA;AAFO;AAFJ,GAAP;AAOD;;AAEM,SAASC,gBAAT,CACLN,IADK,EAELO,SAFK,EAG4B;AACjC,MAAI,CAACP,IAAL,EAAW;AACTQ,wBAAOC,KAAP,CAAc,8BAA6BC,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAA0B,EAArE;AACD;;AAED,SAAO;AACLN,IAAAA,IAAI,EAAEH,kBADD;AAELI,IAAAA,OAAO,EAAE;AACPF,MAAAA,IADO;AAEPO,MAAAA;AAFO;AAFJ,GAAP;AAOD","sourcesContent":["import { Element, Action } from '@ali/4ever-cangjie';\nimport { CardData } from '@ali/4ever-plugin-card';\nimport logger from '@ali/4ever-logger';\n\nexport const CARD_INSERT = Symbol('card-insert');\nexport const CARD_REMOVE = Symbol('card-remove');\nexport const CARD_SET_DATA = Symbol('card-set-data');\nexport const CARD_SET_INJECTION = Symbol('card-set-injection');\n\nexport interface RemoveCardPayload {\n  node: Element;\n}\n\nexport interface SetCardDataPayload {\n  node: Element;\n  mergeData: Record<string, any>;\n}\n\nexport interface SetCardInjectionPayload {\n  node: Element;\n  injection: Record<string, any>;\n}\n\nexport function removeCard(\n  node: Element,\n): Action<RemoveCardPayload> {\n  return {\n    type: CARD_REMOVE,\n    payload: {\n      node,\n    },\n  };\n}\n\nexport function insertCard(payload: Partial<CardData>): Action<Partial<CardData>> {\n  return {\n    type: CARD_INSERT,\n    payload,\n  };\n}\n\nexport function setCardData(\n  node: Element,\n  mergeData: Partial<CardData>,\n): Action<SetCardDataPayload> {\n  return {\n    type: CARD_SET_DATA,\n    payload: {\n      node,\n      mergeData,\n    },\n  };\n}\n\nexport function setCardInjection(\n  node: Element,\n  injection: Record<string, any>,\n): Action<SetCardInjectionPayload> {\n  if (!node) {\n    logger.error(`Invalid node! injection is ${JSON.stringify(injection)}`);\n  }\n\n  return {\n    type: CARD_SET_INJECTION,\n    payload: {\n      node,\n      injection,\n    },\n  };\n}\n"],"file":"actions.js"}