{"version":3,"sources":["../../../src/cardFactory/renderUnknownCard.tsx"],"names":["renderUnknownCard","Card","TYPE","props","controller","Block","isBlock","node","run"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;uBAH4B,a;AAK5B,MAAMA,iBAAiB,GAAG;AACxB,GAACC,qBAAKC,IAAN,GAAa,CAACC,KAAD,EAAyBC,UAAzB,KAAoD;AAC/D,QAAI,CAACC,mBAAMC,OAAN,CAAcH,KAAK,CAACI,IAApB,CAAL,EAAgC;AAC9B,0BAAO,oCAAP;AACD;;AACD,wBACE,eAAC,0BAAD,6BACMJ,KADN;AAEE,MAAA,MAAM,EAAEC,UAFV;AAGE,MAAA,gBAAgB,EAAE,MAAMA,UAAU,CAACI,GAAX,CAAe,UAAf,EAA2B,yBAAWL,KAAK,CAACI,IAAjB,CAA3B;AAH1B,OADF;AAOD;AAZuB,CAA1B;eAeeP,iB","sourcesContent":["import * as React from 'react';\nimport { RenderNodeProps, Controller, Element, Block } from '@ali/4ever-cangjie';\nimport { Card } from '@ali/4ever-plugin-card';\nimport{ Placeholder } from '@ali/4ever-component';\nimport { removeCard } from './actions';\n\nconst renderUnknownCard = {\n  [Card.TYPE]: (props: RenderNodeProps, controller: Controller) => {\n    if (!Block.isBlock(props.node)) {\n      return <></>;\n    }\n    return (\n      <Placeholder\n        {...props}\n        editor={controller}\n        handleRemoveNode={() => controller.run('onAction', removeCard(props.node as Element))}\n      />\n    );\n  },\n};\n\nexport default renderUnknownCard;\n\n"],"file":"renderUnknownCard.js"}