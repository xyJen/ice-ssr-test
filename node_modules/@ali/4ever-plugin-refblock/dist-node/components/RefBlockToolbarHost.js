"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _weIcon = require("@ali/we-icon");

var _everCangjie = require("@ali/4ever-cangjie");

var _weUtil = require("@ali/we-util");

var _weToolbar = require("@ali/we-toolbar");

var _styled = require("./styled");

var _ListItemIcon = _interopRequireDefault(require("./ListItemIcon"));

var _CopyButton = _interopRequireDefault(require("./CopyButton"));

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_ListItemIcon.default, null);

var _ref2 = /*#__PURE__*/_createElement(_styled.ListItem, {
  key: "refblock-refer-placeholder",
  "data-testid": "refblock-refer-placeholder"
}, /*#__PURE__*/_createElement(_ListItemIcon.default, null), /*#__PURE__*/_createElement(_styled.ListItemPlaceholder, null));

var _ref3 = /*#__PURE__*/_createElement(_styled.Divider, null);

var _ref4 = /*#__PURE__*/_createElement(_weIcon.LinkSimpleNormal, null);

const RefBlockToolbarHost = props => {
  const {
    list,
    locale,
    wrapperVisible,
    loading,
    canCopy,
    copy,
    getURL
  } = props;
  const [visible, setVisible] = React.useState(false);
  /* istanbul ignore next */

  const container = (0, _everCangjie.useScrollableContent)() || document.body;
  React.useEffect(() => {
    if (!wrapperVisible) {
      setVisible(wrapperVisible);
    }
  }, [wrapperVisible]);
  const content = React.useMemo(() => {
    return !loading ? list.map(item => {
      return /*#__PURE__*/_createElement(_styled.ListItem, {
        key: `${item.docKey}-${item.uuid}`,
        "data-testid": "refblock-toolbar-list-item"
      }, _ref, /*#__PURE__*/_createElement(_styled.ListItemContent, null, /*#__PURE__*/_createElement("a", {
        href: getURL(item.url, item.uuid),
        target: "_blank",
        rel: "noreferrer"
      }, item.name)));
    }) : [_ref2];
  }, [list, loading]);
  return /*#__PURE__*/_createElement(React.Fragment, null, canCopy && /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(_styled.ToolbarColumn, null, /*#__PURE__*/_createElement(_CopyButton.default, {
    onCopy: copy
  }, locale.copy)), _ref3), /*#__PURE__*/_createElement(_styled.ToolbarColumn, null, /*#__PURE__*/_createElement(_weDesign.Dropdown, {
    trigger: "click",
    placement: "bottomRight",
    overlay: /*#__PURE__*/_createElement(_weUtil.DropdownAnimation, {
      visible: visible
    }, /*#__PURE__*/_createElement(_styled.DropdownOverlay, null, !loading && !list.length ? /*#__PURE__*/_createElement(_styled.Title, {
      style: {
        width: 250
      }
    }, locale.noRefers) : /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(_styled.Title, null, locale.referenceListTitle), content))),
    visible: visible,
    onVisibleChange: setVisible,
    disableDomAlign: true,
    getContainer: () => container
  }, /*#__PURE__*/_createElement(_weToolbar.IconButton, {
    testid: "refblock-toolbar-host",
    icon: /*#__PURE__*/_createElement(React.Fragment, null, _ref4, /*#__PURE__*/_createElement(_styled.IconButtonTitle, null, locale.showRefs))
  }))));
};

var _default = RefBlockToolbarHost;
exports.default = _default;
//# sourceMappingURL=RefBlockToolbarHost.js.map