{"version":3,"sources":["../../../src/components/RefBlockToolbar.tsx"],"names":["transitionStyles","entering","opacity","entered","exiting","exited","RefBlockToolbar","props","visible","locale","node","readOnly","status","isHost","duration","canCopy","anchor","detach","getDocKey","getReferenceList","copy","onToolbarShow","onToolbarHide","getURL","list","setList","React","useState","loading","setLoading","coords","setCoords","wrapperRef","useRef","container","document","body","fetchList","useMemo","leading","docKey","refblockUUID","uuid","data","currentDocKey","copyFrom","find","item","useEffect","then","catch","e","console","error","finally","filteredList","filter","hostDocKey","sort","a","b","handleToolbarEnter","useCallback","containerRect","getBoundingClientRect","left","current","width","top","appear","enter","exit","state","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Transition } from 'react-transition-group';\nimport { useZoomContainer } from '@ali/4ever-cangjie';\nimport { debounce } from 'lodash-es';\nimport RefBlock, { RefBlockStatus } from '../mo/models';\nimport type { RefBlockLocale, ReferenceItem } from '../utils/types';\nimport { ToolbarWrapper, Toolbar } from './styled';\nimport RefBlockToolbarHost from './RefBlockToolbarHost';\nimport RefBlockToolbarCopy from './RefBlockToolbarCopy';\nimport ToolbarPortal from './ToolbarPortal';\n\ninterface RefBlockToolbarProps {\n  /** 是否可见 */\n  visible: boolean;\n  /** 国际化文案 */\n  locale: RefBlockLocale;\n  /** 引用块节点*/\n  node: RefBlock;\n  /** 只读模式 */\n  readOnly: boolean;\n  /** 状态 */\n  status: RefBlockStatus;\n  /** 是否是主块 */\n  isHost: boolean;\n  /** 工具栏动画持续时间 */\n  duration: number;\n  /** 工具栏定位锚点 */\n  anchor: {\n    left: number;\n    top: number;\n  };\n  /** 是否允许复制 */\n  canCopy: boolean;\n  /** 获得引用列表 */\n  getReferenceList: (id: string) => Promise<ReferenceItem[]>;\n  /** 点击取消引用 */\n  detach: (docKey: string, uuid: string) => Promise<void>;\n  /** 获得当前文档 key */\n  getDocKey: () => string;\n  /** 复制当前块引用 */\n  copy: () => void;\n  /** 展示工具栏 */\n  onToolbarShow: () => void;\n  /** 隐藏工具栏 */\n  onToolbarHide: () => void;\n  /** 获得文档跳转地址 */\n  getURL: (url: string, id: string) => string;\n}\n\nconst transitionStyles = {\n  entering: { opacity: 0 },\n  entered: { opacity: 1 },\n  exiting: { opacity: 0 },\n  exited: { opacity: 0 },\n};\n\nconst RefBlockToolbar: React.FC<RefBlockToolbarProps> = (props) => {\n  const {\n    visible,\n    locale,\n    node,\n    readOnly,\n    status,\n    isHost,\n    duration,\n    canCopy,\n    anchor,\n    detach,\n    getDocKey,\n    getReferenceList,\n    copy,\n    onToolbarShow,\n    onToolbarHide,\n    getURL,\n  } = props;\n  const [list, setList] = React.useState<ReferenceItem[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [coords, setCoords] = React.useState(anchor);\n  const wrapperRef = React.useRef<HTMLDivElement>(null);\n  const container = useZoomContainer() || document.body;\n\n  const fetchList = React.useMemo(\n    () => debounce(getReferenceList, 1000, { leading: true }),\n    [getReferenceList],\n  );\n\n  const { docKey, refblockUUID: uuid } = node.data;\n  const currentDocKey = getDocKey();\n  const copyFrom = list.find((item) => item.uuid === docKey);\n\n  React.useEffect(() => {\n    // 展开的时候获得引用列表\n    if (visible) {\n      setLoading(true);\n      fetchList(docKey!)\n        ?.then(setList)\n        .catch((e) => {\n          console.error('fecth syncdocs failed', e);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  }, [visible, docKey]);\n\n  // 过滤当前文档，并按照宿主聚合\n  const filteredList = React.useMemo(() => {\n    return isHost\n      ? list\n          .filter((item) => item.hostDocKey !== currentDocKey)\n          .sort((a, b) => {\n            if (a.hostDocKey === b.hostDocKey) {\n              return 0;\n            }\n            return a.hostDocKey < b.hostDocKey ? -1 : 1;\n          })\n      : list;\n  }, [list, currentDocKey, isHost]);\n\n  const handleToolbarEnter = React.useCallback(() => {\n    const containerRect = container.getBoundingClientRect();\n    setCoords({\n      left:\n        anchor.left -\n        containerRect.left -\n        wrapperRef.current!.getBoundingClientRect().width,\n      top: anchor.top - containerRect.top,\n    });\n  }, [anchor, container]);\n\n  return (\n    <Transition\n      in={visible}\n      timeout={{ appear: 0, enter: duration, exit: duration }}\n      onEnter={handleToolbarEnter}\n      unmountOnExit\n    >\n      {(state) => (\n        <ToolbarPortal container={container}>\n          <ToolbarWrapper\n            data-testid=\"refblock-toolbar-wrapper\"\n            ref={wrapperRef}\n            onMouseEnter={onToolbarShow}\n            onMouseLeave={onToolbarHide}\n            style={{ ...transitionStyles[state], ...coords }}\n            duration={duration}\n          >\n            <Toolbar>\n              {isHost ? (\n                <RefBlockToolbarHost\n                  list={filteredList}\n                  locale={locale}\n                  loading={loading}\n                  status={status}\n                  wrapperVisible={visible}\n                  canCopy={canCopy}\n                  copy={copy}\n                  getURL={getURL}\n                />\n              ) : (\n                <RefBlockToolbarCopy\n                  from={copyFrom}\n                  locale={locale}\n                  status={status}\n                  docKey={docKey!}\n                  uuid={uuid}\n                  readOnly={readOnly}\n                  canCopy={canCopy}\n                  detach={detach}\n                  copy={copy}\n                  getURL={getURL}\n                />\n              )}\n            </Toolbar>\n          </ToolbarWrapper>\n        </ToolbarPortal>\n      )}\n    </Transition>\n  );\n};\n\nexport default React.memo(RefBlockToolbar);\n"],"file":"RefBlockToolbar.js"}