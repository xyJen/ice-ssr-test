"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _models = require("../mo/models");

var _weIcon = require("@ali/we-icon");

var _weToolbar = require("@ali/we-toolbar");

var _ListItemIcon = _interopRequireDefault(require("./ListItemIcon"));

var _styled = require("./styled");

var _CopyButton = _interopRequireDefault(require("./CopyButton"));

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_ListItemIcon.default, null);

var _ref2 = /*#__PURE__*/_createElement(_styled.CopyFromPlaceholder, {
  "data-testid": "refblock-copy-from-placeholder"
});

var _ref3 = /*#__PURE__*/_createElement(_styled.Divider, null);

var _ref4 = /*#__PURE__*/_createElement(_weIcon.DeletelinkNormal, null);

const RefBlockToolbarCopy = props => {
  const {
    locale,
    from,
    docKey,
    uuid,
    readOnly,
    status,
    canCopy,
    detach,
    copy,
    getURL
  } = props;
  const canDetach = !readOnly && uuid && status === _models.RefBlockStatus.normal;
  const handleDetachClick = React.useCallback(() => {
    detach(docKey, uuid);
  }, [detach, docKey, uuid]);
  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(_styled.ToolbarColumn, {
    style: {
      paddingLeft: 10,
      whiteSpace: 'nowrap'
    },
    "data-testid": "refblock-toolbar-copy"
  }, locale.referFromTitle), /*#__PURE__*/_createElement(_styled.ToolbarColumn, {
    highlightOnHover: !!from,
    style: {
      padding: '0px 4px'
    }
  }, _ref, from ? /*#__PURE__*/_createElement(_styled.CopyFrom, null, /*#__PURE__*/_createElement("a", {
    className: "synclist-link",
    "data-testid": "refblock-link-to",
    href: getURL(from.url, docKey),
    target: "_blank",
    rel: "noreferrer"
  }, from.name)) : _ref2), _ref3, canCopy && /*#__PURE__*/_createElement(_styled.ToolbarColumn, null, /*#__PURE__*/_createElement(_CopyButton.default, {
    onCopy: copy,
    title: locale.copy
  })), canDetach && /*#__PURE__*/_createElement(_styled.ToolbarColumn, null, /*#__PURE__*/_createElement(_weToolbar.IconButton, {
    testid: "refblock-detach",
    tooltip: locale.detach,
    icon: _ref4,
    onClick: handleDetachClick
  })));
};

var _default = RefBlockToolbarCopy;
exports.default = _default;
//# sourceMappingURL=RefBlockToolbarCopy.js.map