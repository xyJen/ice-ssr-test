"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setRefBlockInjectionByDocKey = setRefBlockInjectionByDocKey;
exports.setRefBlockInjectionByKey = setRefBlockInjectionByKey;
exports.isSetRefBlockInjectionByDocKeyAction = isSetRefBlockInjectionByDocKeyAction;
exports.isSetRefBlockInjectionByKeyAction = isSetRefBlockInjectionByKeyAction;
exports.isActions = exports.actions = exports.SET_REFBLOCK_INJECTION_BY_KEY = exports.SET_REFBLOCK_INJECTION_BY_DOCKEY = void 0;
const SET_REFBLOCK_INJECTION_BY_DOCKEY = Symbol('set_refblock_injection_by_dockey');
exports.SET_REFBLOCK_INJECTION_BY_DOCKEY = SET_REFBLOCK_INJECTION_BY_DOCKEY;
const SET_REFBLOCK_INJECTION_BY_KEY = Symbol('set_refblock_injection_by_key');
exports.SET_REFBLOCK_INJECTION_BY_KEY = SET_REFBLOCK_INJECTION_BY_KEY;

/**
 * 根据 docKey 设置引用块数据
 * @param docKey
 * @param loading
 * @returns
 */
function setRefBlockInjectionByDocKey(docKey, data, overwrite = true) {
  return {
    type: SET_REFBLOCK_INJECTION_BY_DOCKEY,
    payload: {
      data,
      docKey,
      overwrite
    }
  };
}
/**
 * 根据 node key 设置引用块加载态
 * @param key
 * @param loading
 * @returns
 */


function setRefBlockInjectionByKey(key, data, overwrite = true) {
  return {
    type: SET_REFBLOCK_INJECTION_BY_KEY,
    payload: {
      data,
      key,
      overwrite
    }
  };
}

function isSetRefBlockInjectionByDocKeyAction(action) {
  return action.type === SET_REFBLOCK_INJECTION_BY_DOCKEY;
}

function isSetRefBlockInjectionByKeyAction(action) {
  return action.type === SET_REFBLOCK_INJECTION_BY_KEY;
}

const actions = {
  setRefBlockInjectionByDocKey,
  setRefBlockInjectionByKey
};
exports.actions = actions;
const isActions = {
  isSetRefBlockInjectionByDocKeyAction,
  isSetRefBlockInjectionByKeyAction
};
exports.isActions = isActions;
//# sourceMappingURL=actions.js.map