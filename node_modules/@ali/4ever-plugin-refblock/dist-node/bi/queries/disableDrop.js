"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDisableDrop;

var _weDesign = require("@ali/we-design");

var _models = _interopRequireDefault(require("../../mo/models"));

var _logic = require("../../utils/logic");

function createDisableDrop(
/** 无法 drop 到引用块文案 */
cannotDropAtRefBlockTip,
/** 无法 drag 引用块到某个节点文案 */
cannotDragRefBlockToTip,
/** 是否节点不允许存在于引用块 */
disableNodeInRefBlock,
/** 是否引用块无法被 drop 到某个节点 */
disableRefBlockDropTo) {
  function containsDisabledNode(controller, dragBlock) {
    return disableNodeInRefBlock(controller, dragBlock) || dragBlock.findDescendant(descendant => disableNodeInRefBlock(controller, descendant));
  }

  function containsRefBlock(dragBlock) {
    return _models.default.isRefBlock(dragBlock) || dragBlock.findDescendant(descendent => _models.default.isRefBlock(descendent));
  }
  /**
   * 禁止放置
   * - 尝试拖动同步块到引用块
   * - 尝试拖动引用块到引用块
   * - 尝试拖动引用块到模板按钮
   * @param dragBlock
   * @param dropBlock
   * @returns
   */


  return function disableDrop(controller, dragBlock, dropBlock) {
    const {
      value
    } = controller; // Drag RefBlock to ...

    if (disableRefBlockDropTo(dropBlock, controller) && containsRefBlock(dragBlock)) {
      _weDesign.message.error(cannotDragRefBlockToTip);

      return true;
    } // Drop Something at RefBlock


    if ((0, _logic.isInRefBlock)(value, dropBlock) && containsDisabledNode(controller, dragBlock)) {
      _weDesign.message.error(cannotDropAtRefBlockTip);

      return true;
    }

    return (0, _logic.isInReadOnlyRefBlock)(value, dropBlock);
  };
}
//# sourceMappingURL=disableDrop.js.map