"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderNode;

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _models = _interopRequireWildcard(require("../../mo/models"));

var _RefBlock = _interopRequireDefault(require("../../components/RefBlock"));

var _actions = require("../actions");

const _createElement = /*#__PURE__*/React.createElement;

function createRenderNode(config) {
  const {
    locale,
    toolbarAnimationDuration,
    enableToolbar,
    getReferenceList,
    getDocKey,
    detach,
    renderReadOnly,
    renderRefBlockInOtherStates,
    renderLoading,
    onRefBlockMounted,
    getDocURL
  } = config;
  return {
    [_models.default.TYPE]: (props, controller) => {
      const {
        children,
        isSelected
      } = props;
      const node = props.node;
      const status = node.data.status || _models.RefBlockStatus.loading;
      const readOnly = status === _models.RefBlockStatus.readOnly;
      const child = readOnly ? renderReadOnly(props) : children();

      const detachRef = (docKey, uuid) => {
        return detach(docKey, uuid).then(() => {
          controller.run('onAction', (0, _actions.downgradeToBlocksByKey)(node.key));
        }).catch(() => {
          _weDesign.message.error(locale.detachFailed);
        });
      };

      const copyRefBlock = () => {
        controller.dispatch('copyRefBlock', node);
      };

      return /*#__PURE__*/_createElement(_RefBlock.default, {
        isFocused: isSelected && controller.value.selection.isCollapsed,
        locale: locale,
        readOnly: controller.readOnly,
        toolbarAnimationDuration: toolbarAnimationDuration,
        enableToolbar: enableToolbar,
        getReferenceList: getReferenceList,
        getDocKey: getDocKey,
        detach: detachRef,
        renderProps: props,
        renderRefBlockInOtherStates: renderRefBlockInOtherStates,
        onRefBlockMounted: onRefBlockMounted,
        copyRefBlock: copyRefBlock,
        renderLoading: renderLoading,
        getURL: getDocURL
      }, child);
    }
  };
}
//# sourceMappingURL=createRenderNode.js.map