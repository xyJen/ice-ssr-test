{"version":3,"sources":["../../../../src/bi/handlers/createRenderNode.tsx"],"names":["createRenderNode","config","locale","toolbarAnimationDuration","enableToolbar","getReferenceList","getDocKey","detach","renderReadOnly","renderRefBlockInOtherStates","renderLoading","onRefBlockMounted","getDocURL","RefBlock","TYPE","props","controller","children","isSelected","node","status","data","RefBlockStatus","loading","readOnly","child","detachRef","docKey","uuid","then","run","key","catch","message","error","detachFailed","copyRefBlock","dispatch","value","selection","isCollapsed"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA;;uBAL4B,a;;AAOb,SAASA,gBAAT,CACbC,MADa,EAEb;AACA,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,wBAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,gBAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,cAPI;AAQJC,IAAAA,2BARI;AASJC,IAAAA,aATI;AAUJC,IAAAA,iBAVI;AAWJC,IAAAA;AAXI,MAYFX,MAZJ;AAcA,SAAO;AACL,KAACY,gBAASC,IAAV,GAAiB,CAACC,KAAD,EAAyBC,UAAzB,KAAoD;AACnE,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAA2BH,KAAjC;AACA,YAAMI,IAAI,GAAGJ,KAAK,CAACI,IAAnB;AAEA,YAAMC,MAAM,GAAGD,IAAI,CAACE,IAAL,CAAUD,MAAV,IAAoBE,uBAAeC,OAAlD;AAEA,YAAMC,QAAQ,GAAGJ,MAAM,KAAKE,uBAAeE,QAA3C;AACA,YAAMC,KAAK,GAAGD,QAAQ,GAAGhB,cAAc,CAACO,KAAD,CAAjB,GAA2BE,QAAQ,EAAzD;;AAEA,YAAMS,SAAS,GAAG,CAACC,MAAD,EAAiBC,IAAjB,KAAkC;AAClD,eAAOrB,MAAM,CAACoB,MAAD,EAASC,IAAT,CAAN,CACJC,IADI,CACC,MAAM;AACVb,UAAAA,UAAU,CAACc,GAAX,CAAe,UAAf,EAA2B,qCAAuBX,IAAI,CAACY,GAA5B,CAA3B;AACD,SAHI,EAIJC,KAJI,CAIE,MAAM;AACXC,4BAAQC,KAAR,CAAchC,MAAM,CAACiC,YAArB;AACD,SANI,CAAP;AAOD,OARD;;AAUA,YAAMC,YAAY,GAAG,MAAM;AACzBpB,QAAAA,UAAU,CAACqB,QAAX,CAAoB,cAApB,EAAoClB,IAApC;AACD,OAFD;;AAIA,0BACE,eAAC,iBAAD;AACE,QAAA,SAAS,EAAED,UAAU,IAAIF,UAAU,CAACsB,KAAX,CAAiBC,SAAjB,CAA2BC,WADtD;AAEE,QAAA,MAAM,EAAEtC,MAFV;AAGE,QAAA,QAAQ,EAAEc,UAAU,CAACQ,QAHvB;AAIE,QAAA,wBAAwB,EAAErB,wBAJ5B;AAKE,QAAA,aAAa,EAAEC,aALjB;AAME,QAAA,gBAAgB,EAAEC,gBANpB;AAOE,QAAA,SAAS,EAAEC,SAPb;AAQE,QAAA,MAAM,EAAEoB,SARV;AASE,QAAA,WAAW,EAAEX,KATf;AAUE,QAAA,2BAA2B,EAAEN,2BAV/B;AAWE,QAAA,iBAAiB,EAAEE,iBAXrB;AAYE,QAAA,YAAY,EAAEyB,YAZhB;AAaE,QAAA,aAAa,EAAE1B,aAbjB;AAcE,QAAA,MAAM,EAAEE;AAdV,SAgBGa,KAhBH,CADF;AAoBD;AA5CI,GAAP;AA8CD","sourcesContent":["import * as React from 'react';\nimport { Block, Controller, RenderNodeProps } from '@ali/4ever-cangjie';\nimport { message } from '@ali/we-design';\nimport RefBlock, { RefBlockStatus } from '../../mo/models';\nimport RefBlockComp from '../../components/RefBlock';\nimport type { BiConfig } from '../../utils/types';\nimport { downgradeToBlocksByKey } from '../actions';\n\nexport default function createRenderNode(\n  config: BiConfig,\n) {\n  const {\n    locale,\n    toolbarAnimationDuration,\n    enableToolbar,\n    getReferenceList,\n    getDocKey,\n    detach,\n    renderReadOnly,\n    renderRefBlockInOtherStates,\n    renderLoading,\n    onRefBlockMounted,\n    getDocURL,\n  } = config;\n\n  return {\n    [RefBlock.TYPE]: (props: RenderNodeProps, controller: Controller) => {\n      const { children, isSelected } = props;\n      const node = props.node as Block;\n\n      const status = node.data.status || RefBlockStatus.loading;\n\n      const readOnly = status === RefBlockStatus.readOnly;\n      const child = readOnly ? renderReadOnly(props) : children();\n\n      const detachRef = (docKey: string, uuid: string) => {\n        return detach(docKey, uuid)\n          .then(() => {\n            controller.run('onAction', downgradeToBlocksByKey(node.key));\n          })\n          .catch(() => {\n            message.error(locale.detachFailed);\n          });\n      };\n\n      const copyRefBlock = () => {\n        controller.dispatch('copyRefBlock', node)\n      };\n\n      return (\n        <RefBlockComp\n          isFocused={isSelected && controller.value.selection.isCollapsed}\n          locale={locale}\n          readOnly={controller.readOnly}\n          toolbarAnimationDuration={toolbarAnimationDuration}\n          enableToolbar={enableToolbar}\n          getReferenceList={getReferenceList}\n          getDocKey={getDocKey}\n          detach={detachRef}\n          renderProps={props}\n          renderRefBlockInOtherStates={renderRefBlockInOtherStates}\n          onRefBlockMounted={onRefBlockMounted}\n          copyRefBlock={copyRefBlock}\n          renderLoading={renderLoading}\n          getURL={getDocURL}\n        >\n          {child}\n        </RefBlockComp>\n      );\n    },\n  };\n}\n"],"file":"createRenderNode.js"}