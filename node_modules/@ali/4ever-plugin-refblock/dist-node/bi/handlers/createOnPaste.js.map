{"version":3,"sources":["../../../../src/bi/handlers/createOnPaste.ts"],"names":["MIME_TYPES","constants","createOnPaste","config","clipboard","refblock","generateCopyDoc","disableNestedInRefBlock","stubFalse","getHetuWhenPaste","onPaste","event","controller","next","clipboardData","query","hasData","FRAGMENT","fragment","getFragment","packageJSON","getData","REFBLOCK","value","hetuSyncNodes","refblocks","invalidNodes","forEachDescendant","descendant","push","RefBlock","isRefBlock","forEach","node","removeNode","assertPath","key","refblockMap","Object","keys","length","deserialized","docKey","nodes","map","nodeKey","assertNode","uuid","setNode","data","refblockUUID","e","nextEvent","setClipboardData","setData","transferUtils","encodeFragment"],"mappings":"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","sourcesContent":["import {\n  Plugin,\n  Node,\n  transferUtils,\n  constants,\n  BiPluginConfig,\n} from '@ali/4ever-cangjie';\nimport { stubFalse } from 'lodash-es';\nimport { ClipboardPad } from '@ali/4ever-plugin-clipboard';\nimport RefBlock, { RefBlockData } from '../../mo/models';\nimport { isSelectionInRefBlock, isSyncHetuNode } from '../../utils/logic';\nimport { getRefBlockMap } from '../../utils/value';\n\nconst { MIME_TYPES } = constants;\n\nexport default function createOnPaste(\n  config: BiPluginConfig,\n): Plugin['onCangjiePaste'] {\n  const { clipboard = {}, refblock } = config;\n  const {\n    generateCopyDoc,\n    disableNestedInRefBlock = stubFalse,\n    getHetuWhenPaste,\n  } = refblock!;\n\n  return async function onPaste(event, controller, next) {\n    const clipboardData = controller.query('getClipboardData', event);\n    if (!clipboardData) {\n      return next();\n    }\n    if (!clipboardData.hasData(MIME_TYPES.FRAGMENT)) {\n      return next();\n    }\n\n    let fragment = clipboardData.getFragment(false);\n    const packageJSON = clipboardData.getData(MIME_TYPES.REFBLOCK);\n\n    // 粘贴到引用块时，剔除引用块和河图同步块\n    if (fragment) {\n      if (isSelectionInRefBlock(controller.value)) {\n        // 剔除河图同步块\n        const hetuSyncNodes: Node[] = [];\n        // 剔除引用块\n        const refblocks: RefBlock[] = [];\n        // 剔除包含有非法节点的块\n        const invalidNodes: Node[] = [];\n        fragment.forEachDescendant((descendant) => {\n          if (isSyncHetuNode(descendant)) {\n            hetuSyncNodes.push(descendant);\n          } else if (RefBlock.isRefBlock(descendant)) {\n            refblocks.push(descendant);\n          } else if (disableNestedInRefBlock(descendant, controller)) {\n            invalidNodes.push(descendant);\n          }\n        });\n        [...hetuSyncNodes, ...refblocks, ...invalidNodes].forEach((node) => {\n          fragment = fragment!.removeNode(fragment!.assertPath(node.key));\n        });\n      } else {\n        const refblockMap = getRefBlockMap(fragment);\n        // 如果不含有引用块，提前退出\n        if (!Object.keys(refblockMap).length) {\n          return next();\n        }\n        // 粘贴 fragment 中包含的引用块\n        let deserialized = false;\n        for (const docKey in refblockMap) {\n          if (packageJSON && !deserialized) {\n            deserialized = true;\n            getHetuWhenPaste(packageJSON);\n          }\n          const nodes = refblockMap[docKey].map(({ nodeKey }) =>\n            fragment!.assertNode(nodeKey),\n          ) as RefBlock[];\n          try {\n            const { uuid } = await generateCopyDoc(docKey);\n            nodes.forEach((node) => {\n              fragment = fragment!.setNode(fragment!.assertPath(node.key), {\n                data: {\n                  ...node.data,\n                  refblockUUID: uuid,\n                } as RefBlockData,\n              });\n            });\n          } catch (e) {\n            // 如果对应 refblock 的 uuid 生成失败，则不粘贴这些节点\n            nodes.forEach((node) => {\n              fragment = fragment!.removeNode(fragment!.assertPath(node.key));\n            });\n          }\n        }\n      }\n      const nextEvent = event.setClipboardData(\n        event.clipboardData!.setData(\n          MIME_TYPES.FRAGMENT,\n          transferUtils.encodeFragment(fragment),\n        ),\n      );\n\n      // @ts-ignore\n      return next(nextEvent);\n    }\n    return next();\n  };\n}\n"],"file":"createOnPaste.js"}