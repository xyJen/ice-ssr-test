{"version":3,"sources":["../../../../src/bi/handlers/createOnAction.ts"],"names":["createOnAction","config","serializer","generateDoc","decorateRefBlockFragment","cacheHetuWhenCopy","getRefBlockURL","locale","onAction","action","controller","next","isCopyAsRefBlock","isActionFactory","isCopyRefBlock","type","nodes","dragBlocks","payload","document","selection","value","blocks","getRootBlocksAtRange","length","map","n","assertNode","key","message","loading","content","creating","fragment","Document","create","then","resp","docKey","uuid","refblock","RefBlock","data","refblockUUID","run","actions","upgradeToRefBlock","success","copySuccess","close","catch","e","console","error","isActions","isSetRefBlockInjectionByDocKeyAction","overwrite","command","setRefBlockInjectionByDocKey","isSetRefBlockInjectionByKeyAction","setRefBlockInjectionByKey","isUpgradeToRefBlockAction","isDowngradeToBlocksByDocKeyAction","downgradeToBlocksByDocKey","isDowngradeToBlocksByKeyAction","downgradeToBlocksByKey","isInsertRefBlockAction","insertRefBlock","status","RefBlockStatus","isUpdateRefBlockDataAction","node","updateRefBlockData","CLIPBOARD_INSERT_FRAGMENT","cachedSelection","Promise","resolve","refblockMap","Object","keys","forEach","index","Commands","select"],"mappings":"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","sourcesContent":["import {\n  Controller,\n  Action,\n  Document,\n  Block,\n  Commands,\n  Mo as Serializer,\n} from '@ali/4ever-cangjie';\nimport { message } from '@ali/we-design';\nimport { CLIPBOARD_INSERT_FRAGMENT } from '@ali/4ever-plugin-clipboard';\nimport RefBlock, { RefBlockStatus } from '../../mo/models';\nimport type { BiConfig } from '../../utils/types';\nimport { actions, isActions } from '../actions';\nimport {\n  upgradeToRefBlock,\n  updateRefBlockData,\n  insertRefBlock,\n  downgradeToBlocksByDocKey,\n  downgradeToBlocksByKey,\n  setRefBlockInjectionByKey,\n  setRefBlockInjectionByDocKey,\n} from '../commands';\nimport { writeRefBlockToClipboard } from '../utils/ccp';\nimport { getRefBlockMap } from '../../utils/value';\n\nexport default function createOnAction(\n  config: BiConfig,\n  serializer?: Serializer,\n) {\n  const {\n    generateDoc,\n    decorateRefBlockFragment,\n    cacheHetuWhenCopy,\n    getRefBlockURL,\n    locale,\n  } = config;\n  return function onAction(\n    action: Action,\n    controller: Controller,\n    next: () => void,\n  ) {\n    const isCopyAsRefBlock = controller.isActionFactory('isCopyAsRefBlock');\n    const isCopyRefBlock = controller.isActionFactory('isCopyRefBlock');\n\n    const { type } = action;\n    if (isCopyAsRefBlock?.(action)) {\n      const { nodes: dragBlocks } = action.payload;\n      let { document, selection } = controller.value;\n      let blocks = document.getRootBlocksAtRange(selection);\n      if (dragBlocks && dragBlocks.length >= blocks.length) {\n        blocks = [\n          ...dragBlocks.map((n) => {\n            // 重新获得 block，防止拖拽杆展开后，block 又发生了变更（例如图片加载完成）\n            return document.assertNode(n.key) as Block;\n          }),\n        ];\n      }\n      message.loading({\n        key: 'loading',\n        type: 'loading',\n        content: locale.creating,\n      });\n      // 装饰 fragment\n      const fragment = decorateRefBlockFragment(\n        Document.create({ nodes: blocks }),\n      );\n      generateDoc(fragment)\n        .then((resp) => {\n          // 创建成功后：\n          // 1. 拷贝内容到剪贴板\n          // 2. 升级普通块为引用块\n          // 3. 驱动引用块开始加载\n          const { docKey, uuid } = resp;\n          const refblock = RefBlock.create({\n            nodes: blocks,\n            data: {\n              docKey: resp.docKey,\n              refblockUUID: uuid,\n            },\n          });\n          writeRefBlockToClipboard(\n            refblock,\n            cacheHetuWhenCopy,\n            getRefBlockURL,\n            serializer,\n          );\n          controller.run(\n            'onAction',\n            actions.upgradeToRefBlock(docKey, uuid, fragment.nodes),\n          );\n          message.success(locale.copySuccess);\n          message.close('loading');\n        })\n        .catch((e) => {\n          console.error('cannot create refblock', e);\n        });\n      return controller;\n    } else if (isActions.isSetRefBlockInjectionByDocKeyAction(action)) {\n      const { data, docKey, overwrite } = action.payload;\n      return controller.command(\n        setRefBlockInjectionByDocKey,\n        docKey,\n        data,\n        overwrite,\n      );\n    } else if (isActions.isSetRefBlockInjectionByKeyAction(action)) {\n      const { data, key, overwrite } = action.payload;\n      return controller.command(\n        setRefBlockInjectionByKey,\n        key,\n        data,\n        overwrite,\n      );\n    } else if (isActions.isUpgradeToRefBlockAction(action)) {\n      const { blocks, docKey, uuid } = action.payload;\n      return controller.command(upgradeToRefBlock, blocks, {\n        docKey,\n        uuid,\n        refblockUUID: uuid,\n      });\n    } else if (isActions.isDowngradeToBlocksByDocKeyAction(action)) {\n      const { docKey } = action.payload;\n      return controller.command(downgradeToBlocksByDocKey, docKey);\n    } else if (isActions.isDowngradeToBlocksByKeyAction(action)) {\n      const { key } = action.payload;\n      return controller.command(downgradeToBlocksByKey, key);\n    } else if (isCopyRefBlock?.(action)) {\n      const { refblock } = action.payload;\n      writeRefBlockToClipboard(\n        refblock,\n        cacheHetuWhenCopy,\n        getRefBlockURL,\n        serializer,\n      );\n      message.success(locale.copySuccess);\n    } else if (isActions.isInsertRefBlockAction(action)) {\n      const { data } = action.payload;\n      return controller.command(insertRefBlock, data).command(\n        setRefBlockInjectionByDocKey,\n        data.docKey!,\n        {\n          status: RefBlockStatus.loading,\n        },\n        false,\n      );\n    } else if (isActions.isUpdateRefBlockDataAction(action)) {\n      const { data, node } = action.payload;\n      return controller.command(updateRefBlockData, node, data).command(\n        setRefBlockInjectionByKey,\n        node.key,\n        {\n          status: RefBlockStatus.loading,\n        },\n        false,\n      );\n    } else if (type === CLIPBOARD_INSERT_FRAGMENT) {\n      // wait for fragment pasted\n      const { fragment } = action.payload as { fragment?: Document };\n      if (!fragment) {\n        return next();\n      }\n      const cachedSelection = controller.value.selection;\n      // 因为 CCP 插入 fragment 是异步的，因此这里同步状态也需要异步\n      Promise.resolve().then(() => {\n        const refblockMap = getRefBlockMap(fragment);\n        // 检查 fragment 中的引用块\n        Object.keys(refblockMap).forEach((docKey, index) => {\n          if (index === 0) {\n            // 避免光标移动到引用块内部\n            controller.command(Commands.select, cachedSelection);\n          }\n          controller.run(\n            'onAction',\n            actions.setRefBlockInjectionByDocKey(\n              docKey,\n              {\n                status: RefBlockStatus.loading,\n              },\n              false,\n            ),\n          );\n        });\n      });\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnAction.js"}