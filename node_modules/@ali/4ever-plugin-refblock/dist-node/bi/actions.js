"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upgradeToRefBlock = upgradeToRefBlock;
exports.downgradeToBlocksByDocKey = downgradeToBlocksByDocKey;
exports.downgradeToBlocksByKey = downgradeToBlocksByKey;
exports.insertRefBlock = insertRefBlock;
exports.isActions = exports.actions = exports.COPY_REFBLOCK = exports.COPY_AS_REFBLOCK = exports.UPDATE_REFBLOCK_DATA = exports.INSERT_REFBLOCK = exports.DOWNGRADE_TO_BLOCKS_BY_KEY = exports.DOWNGRADE_TO_BLOCKS_BY_DOCKEY = exports.UPGRADE_TO_REFBLOCK = void 0;

var _actions = require("../common/actions");

const UPGRADE_TO_REFBLOCK = Symbol('upgrade_to_refblock');
exports.UPGRADE_TO_REFBLOCK = UPGRADE_TO_REFBLOCK;
const DOWNGRADE_TO_BLOCKS_BY_DOCKEY = Symbol('downgrade_to_blocks_by_dockey');
exports.DOWNGRADE_TO_BLOCKS_BY_DOCKEY = DOWNGRADE_TO_BLOCKS_BY_DOCKEY;
const DOWNGRADE_TO_BLOCKS_BY_KEY = Symbol('downgrade_to_blocks_by_key');
exports.DOWNGRADE_TO_BLOCKS_BY_KEY = DOWNGRADE_TO_BLOCKS_BY_KEY;
const INSERT_REFBLOCK = Symbol('insert_refblock');
exports.INSERT_REFBLOCK = INSERT_REFBLOCK;
const UPDATE_REFBLOCK_DATA = Symbol('update_refblock_data');
exports.UPDATE_REFBLOCK_DATA = UPDATE_REFBLOCK_DATA;
const COPY_AS_REFBLOCK = Symbol('copy_as_refblock');
exports.COPY_AS_REFBLOCK = COPY_AS_REFBLOCK;
const COPY_REFBLOCK = Symbol('copy_refblock');
exports.COPY_REFBLOCK = COPY_REFBLOCK;

/**
 * 升级选中的 blocks 为引用块
 * @param docKey
 * @param uuid
 * @param blocks
 * @returns
 */
function upgradeToRefBlock(docKey, uuid, blocks) {
  return {
    type: UPGRADE_TO_REFBLOCK,
    payload: {
      docKey,
      uuid,
      blocks
    }
  };
}
/**
 * 根据 docKey 将引用块降级为普通块
 * @param docKey
 * @returns
 */


function downgradeToBlocksByDocKey(docKey) {
  return {
    type: DOWNGRADE_TO_BLOCKS_BY_DOCKEY,
    payload: {
      docKey
    }
  };
}
/**
 * 根据 key 将引用块降级为普通块
 * @param key
 * @returns
 */


function downgradeToBlocksByKey(key) {
  return {
    type: DOWNGRADE_TO_BLOCKS_BY_KEY,
    payload: {
      key
    }
  };
}
/**
 * 插入 RefBlock
 * @param data
 * @returns
 */


function insertRefBlock(data) {
  return {
    type: INSERT_REFBLOCK,
    payload: {
      data
    }
  };
}
/**
 * 更新 RefBlock 数据
 * @param node
 * @param data
 * @returns
 */


function updateRefBlockData(node, data) {
  return {
    type: UPDATE_REFBLOCK_DATA,
    payload: {
      data,
      node
    }
  };
}

function isUpgradeToRefBlockAction(action) {
  return action.type === UPGRADE_TO_REFBLOCK;
}

function isDowngradeToBlocksByDocKeyAction(action) {
  return action.type === DOWNGRADE_TO_BLOCKS_BY_DOCKEY;
}

function isDowngradeToBlocksByKeyAction(action) {
  return action.type === DOWNGRADE_TO_BLOCKS_BY_KEY;
}

function isInsertRefBlockAction(action) {
  return action.type === INSERT_REFBLOCK;
}

function isUpdateRefBlockDataAction(action) {
  return action.type === UPDATE_REFBLOCK_DATA;
}
/**
 * 复制为引用块
 * @param node
 * @returns
 */


function copyAsRefBlock(nodes) {
  return {
    type: COPY_AS_REFBLOCK,
    payload: {
      nodes
    }
  };
}
/**
 * 复制引用块
 * @param block
 * @returns
 */


function copyRefBlock(refblock) {
  return {
    type: COPY_REFBLOCK,
    payload: {
      refblock
    }
  };
}

function isCopyRefBlock(action) {
  return action.type === COPY_REFBLOCK;
}

function isCopyAsRefBlock(action) {
  return action.type === COPY_AS_REFBLOCK;
}

const actions = { ..._actions.actions,
  copyRefBlock,
  copyAsRefBlock,
  upgradeToRefBlock,
  downgradeToBlocksByDocKey,
  downgradeToBlocksByKey,
  insertRefBlock,
  updateRefBlockData
};
exports.actions = actions;
const isActions = { ..._actions.isActions,
  isUpgradeToRefBlockAction,
  isDowngradeToBlocksByDocKeyAction,
  isDowngradeToBlocksByKeyAction,
  isInsertRefBlockAction,
  isUpdateRefBlockDataAction,
  isCopyAsRefBlock,
  isCopyRefBlock
};
exports.isActions = isActions;
//# sourceMappingURL=actions.js.map