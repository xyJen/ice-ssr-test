"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upgradeToRefBlock = upgradeToRefBlock;

var _everCangjie = require("@ali/4ever-cangjie");

var _commands = require("../../common/commands");

var _models = _interopRequireWildcard(require("../../mo/models"));

/**
 * 将选中的 blocks 升级为 refblock
 * @param controller
 * @param blocks
 * @param docKey
 * @returns
 */
function upgradeToRefBlock(controller, blocks, data) {
  if (!blocks.length) {
    return controller;
  }

  return controller.withoutNormalizing(() => {
    // 先删除再插入
    blocks.slice(1).forEach(block => {
      controller.command(_everCangjie.Commands.removeNodeByKey, block.key);
    }); // 替换第一个

    const refblock = _models.default.create({
      data,
      nodes: blocks.map(block => block.regenerateKey())
    });

    const point = _everCangjie.EdgePoint.create({
      key: refblock.key,
      edge: _everCangjie.EdgePoint.AFTER
    });

    const selection = _everCangjie.Selection.create({
      anchor: point,
      focus: point
    });

    controller.command(_everCangjie.Commands.replaceNodeByKey, blocks[0].key, refblock).command(_everCangjie.Commands.select, selection).command(_commands.commands.setRefBlockInjectionByDocKey, data.docKey, {
      status: _models.RefBlockStatus.loading
    }).command(_everCangjie.Commands.focus);
  });
}
//# sourceMappingURL=upgradeToRefBlock.js.map