"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downgradeToBlocksByDocKey = downgradeToBlocksByDocKey;
exports.downgradeToBlocksByKey = downgradeToBlocksByKey;

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireDefault(require("../../mo/models"));

function downgradeToBlocks(controller, node) {
  const {
    document
  } = controller.value;
  const path = document.assertPath(node.key);

  const parentPath = _everCangjie.Path.parent(path);

  const refblockIndex = path[path.length - 1];
  controller.withoutNormalizing(() => {
    // 插入引用块内容
    node.nodes.forEach((child, index) => {
      controller.command(_everCangjie.Commands.insertNodeByPath, parentPath, refblockIndex + index, child);
    }); // 删除引用块

    controller.command(_everCangjie.Commands.removeNodeByKey, node.key);
  });
  return controller;
}
/**
 * 降级为普通块
 * @param controller
 * @param docKey
 */


function downgradeToBlocksByDocKey(controller, docKey) {
  const {
    document
  } = controller.value;
  document.forEachDescendant(node => {
    if (_models.default.isRefBlock(node) && node.data.docKey === docKey) {
      controller.command(downgradeToBlocks, node);
    }
  });
  return controller;
}
/**
 * 降级对应节点 key 的块为普通块
 * @param controller
 * @param key
 */


function downgradeToBlocksByKey(controller, key) {
  const {
    document
  } = controller.value;
  const node = document.assertNode(key);

  if (_models.default.isRefBlock(node)) {
    return controller.command(downgradeToBlocks, node);
  }

  return controller;
}
//# sourceMappingURL=downgradeToBlocks.js.map