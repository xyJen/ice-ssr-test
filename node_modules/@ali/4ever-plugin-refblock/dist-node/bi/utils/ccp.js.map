{"version":3,"sources":["../../../../src/bi/utils/ccp.ts"],"names":["MIME_TYPES","constants","writeRefBlockToClipboard","refblock","cacheHetuWhenCopy","getRefBlockURL","serializer","fragment","Document","create","nodes","value","Value","document","clip","refblockData","fragmentData","transferUtils","encodeFragment","html","clipboardUtils","writeClipboardDataToHtml","REFBLOCK","FRAGMENT","write","HTML","TEXT","data","uuid","refblockUUID","cropRefBlockInFragment","newFragment","refblockMap","Object","keys","forEach","docKey","nodeKey","node","assertNode","setNode","assertPath","Paragraph","unwrapRefBlock","forEachDescendant","RefBlock","isRefBlock","path","key","removeNode","child","index","insertNode","Path","increment"],"mappings":"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","sourcesContent":["import {\n  Value,\n  transferUtils,\n  constants,\n  Document,\n  Path,\n  Mo as Serializer,\n} from '@ali/4ever-cangjie';\nimport { getHtmlFromValue, createClipboardManager, utils as clipboardUtils } from '@ali/4ever-plugin-clipboard';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport RefBlock from '../../mo/models';\nimport { omit } from 'lodash-es';\nimport { getRefBlockMap } from '../../utils/value';\n\nconst { MIME_TYPES } = constants;\n/**\n * 将引用块数据写入剪贴板\n * @param refblock\n * @param serializer\n */\nexport function writeRefBlockToClipboard(\n  refblock: RefBlock,\n  cacheHetuWhenCopy: (fragment: Document) => string,\n  getRefBlockURL: (uuid: string) => string,\n  serializer?: Serializer,\n) {\n  /* istanbul ignore next */\n  if (!serializer) {\n    return;\n  }\n  const fragment = Document.create({\n    nodes: [refblock],\n  });\n  const value = Value.create({\n    document: fragment,\n  });\n  const clip = createClipboardManager();\n  const refblockData = cacheHetuWhenCopy(fragment);\n  const fragmentData = transferUtils.encodeFragment(fragment);\n  const html = clipboardUtils.writeClipboardDataToHtml(\n    getHtmlFromValue(serializer, value),\n    [\n      [MIME_TYPES.REFBLOCK, refblockData],\n      [MIME_TYPES.FRAGMENT, fragmentData],\n    ],\n  );\n  clip.write({\n    [MIME_TYPES.FRAGMENT]: fragmentData,\n    [MIME_TYPES.HTML]: html,\n    [MIME_TYPES.TEXT]: getRefBlockURL(refblock.data.uuid || refblock.data.refblockUUID),\n    [MIME_TYPES.REFBLOCK]: refblockData,\n  });\n}\n\n/**\n * 裁剪 Fragment 中的引用块内容：\n *\n * - uuid: 保证粘贴时生成新的引用关系\n * - children: 裁剪掉引用块的内容，保证引用块内容只由协同服务供给\n * @param fragment\n * @returns\n */\nexport function cropRefBlockInFragment(fragment: Document) {\n  let newFragment = fragment;\n  const refblockMap = getRefBlockMap(newFragment);\n\n  Object.keys(refblockMap).forEach((docKey) => {\n    refblockMap[docKey].forEach(({ nodeKey }) => {\n      const node = newFragment.assertNode(nodeKey) as RefBlock;\n      newFragment = newFragment.setNode(newFragment.assertPath(nodeKey), {\n        data: omit(node.data, 'refblockUUID'),\n        nodes: [Paragraph.create()],\n      });\n    });\n  });\n  return newFragment;\n}\n\n/**\n * 剪贴板包含引用块时：\n * 1. 若引用块被设置标志位，代表用户明确意图复制引用块，需要保留引用块\n * 2. 否则，只保留引用块内内容\n * @param fragment\n */\nexport function unwrapRefBlock(fragment: Document) {\n  let newFragment = fragment;\n\n  fragment.forEachDescendant((node) => {\n    if (RefBlock.isRefBlock(node)) {\n      const path = newFragment.assertPath(node.key);\n      // 展平引用块\n      newFragment = newFragment.removeNode(path);\n      node.nodes.forEach((child, index) => {\n        newFragment = newFragment.insertNode(\n          Path.increment(path, index),\n          child,\n        );\n      });\n    }\n  });\n\n  return newFragment;\n}\n"],"file":"ccp.js"}