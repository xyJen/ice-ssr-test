"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _models = _interopRequireWildcard(require("../../mo/models"));

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "HelloWorld");

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "HelloWorld");

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  key: "non-refblock",
  type: "paragraph"
}, "HelloWorld")));

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "HelloWorld");

var _ref5 = (0, _everDevTest.jsx)("block", {
  key: "non-refblock",
  type: "paragraph"
}, "HelloWorld");

describe('RefBlock Model', () => {
  describe('#create', () => {
    test('create model with properties', () => {
      const nodes = [_everPluginParagraph.Paragraph.create({
        nodes: [_everCangjie.Text.create('')]
      })];

      const refblock = _models.default.create({
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a-uuid'
        },
        nodes
      });

      expect(refblock.toJSON()).toEqual({
        klass: 'block',
        type: 'refblock',
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a-uuid'
        },
        nodes: nodes.map(node => node.toJSON())
      });
    });
    test('create model with exists model', () => {
      const nodes = [_everPluginParagraph.Paragraph.create({
        nodes: [_everCangjie.Text.create('')]
      })];

      const refblock = _models.default.create({
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a-uuid'
        },
        nodes
      });

      expect(refblock).toBe(_models.default.create(refblock));
    });
    test('forbiddent create model with string', () => {
      expect(() => _models.default.create('Hello')).toThrowError();
    });
  });
  describe('#isVoid', () => {
    test('refblock is void if status is abnormal', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        key: "refblock",
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a-uuid'
        }
      }, _ref)));

      const controller = _everCangjie.Controller.create({
        value
      });

      controller.setInjections([_everCangjie.Injection.create({
        key: 'refblock',
        data: {
          status: _models.RefBlockStatus.forbidden
        }
      })]);
      const refblock = controller.value.document.assertNode('refblock');
      expect(_models.default.isVoid(controller, refblock)).toBe(true);
    });
    test('pi-refblock is void if status is abnormal', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        key: "refblock",
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a-uuid',
          pi: true,
          status: _models.RefBlockStatus.forbidden
        }
      }, _ref2)));

      const controller = _everCangjie.Controller.create({
        value
      });

      const refblock = controller.value.document.assertNode('refblock');
      expect(_models.default.isVoid(controller, refblock)).toBe(true);
    });
    test('is non-void if node is not refblock', () => {
      const value = _ref3;

      const controller = _everCangjie.Controller.create({
        value
      });

      const refblock = controller.value.document.assertNode('non-refblock');
      expect(_models.default.isVoid(controller, refblock)).toBe(false);
    });
  });
  describe('#isRefBlock', () => {
    test('node is refblock', () => {
      const node = (0, _everDevTest.jsx)("block", {
        key: "refblock",
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a-uuid',
          pi: true,
          status: _models.RefBlockStatus.forbidden
        }
      }, _ref4);
      expect(_models.default.isRefBlock(node)).toBe(true);
    });
    test('node is not refblock', () => {
      const node = _ref5;
      expect(_models.default.isRefBlock(node)).toBe(false);
    });
  });
});
//# sourceMappingURL=model.test.js.map