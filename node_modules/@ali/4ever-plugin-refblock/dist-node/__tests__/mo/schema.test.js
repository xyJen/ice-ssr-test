"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _mo = _interopRequireDefault(require("../../mo"));

/** @jsx jsx */
function createController(value) {
  return _everCangjie.Controller.create({
    value,
    plugins: [(0, _mo.default)({})]
  }, {
    normalize: true
  });
}

var _ref = (0, _everDevTest.jsx)("text", null);

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null));

describe('RefBlock Schema', () => {
  test('replace single text child with paragraph', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "refblock",
      key: "refblock",
      data: {
        docKey: 'doc-a',
        refblockUUID: 'doc-a-uuid'
      }
    }, _ref)));
    const expected = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "refblock",
      key: "refblock",
      data: {
        docKey: 'doc-a',
        refblockUUID: 'doc-a-uuid'
      }
    }, _ref2)));
    const controller = createController(value);
    expect(controller.value.toJSON()).toEqual(expected.toJSON());
  });
});
//# sourceMappingURL=schema.test.js.map