{"version":3,"sources":["../../../../src/__tests__/mo/model.test.tsx"],"names":["describe","test","nodes","Paragraph","create","Text","refblock","RefBlock","data","docKey","refblockUUID","expect","toJSON","toEqual","klass","type","map","node","toBe","toThrowError","value","controller","Controller","setInjections","Injection","key","status","RefBlockStatus","forbidden","document","assertNode","isVoid","pi","isRefBlock"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { Block, Controller, Injection, Text, Value } from '@ali/4ever-cangjie';\nimport { jsx } from '@ali/4ever-dev-test';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport RefBlock, { RefBlockStatus } from '../../mo/models';\n\ndescribe('RefBlock Model', () => {\n  describe('#create', () => {\n    test('create model with properties', () => {\n      const nodes = [\n        Paragraph.create({\n          nodes: [Text.create('')],\n        }),\n      ];\n      const refblock = RefBlock.create({\n        data: {\n          docKey: 'doc-a',\n          refblockUUID: 'doc-a-uuid',\n        },\n        nodes,\n      });\n      expect(refblock.toJSON()).toEqual({\n        klass: 'block',\n        type: 'refblock',\n        data: {\n          docKey: 'doc-a',\n          refblockUUID: 'doc-a-uuid',\n        },\n        nodes: nodes.map((node) => node.toJSON()),\n      });\n    });\n\n    test('create model with exists model', () => {\n      const nodes = [\n        Paragraph.create({\n          nodes: [Text.create('')],\n        }),\n      ];\n      const refblock = RefBlock.create({\n        data: {\n          docKey: 'doc-a',\n          refblockUUID: 'doc-a-uuid',\n        },\n        nodes,\n      });\n      expect(refblock).toBe(RefBlock.create(refblock));\n    });\n\n    test('forbiddent create model with string', () => {\n      expect(() => RefBlock.create('Hello')).toThrowError();\n    });\n  });\n\n  describe('#isVoid', () => {\n    test('refblock is void if status is abnormal', () => {\n      const value = (\n        <value>\n          <document>\n            <block\n              key=\"refblock\"\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'doc-a-uuid' }}\n            >\n              <block type=\"paragraph\">HelloWorld</block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const controller = Controller.create({\n        value,\n      });\n\n      controller.setInjections([\n        Injection.create({\n          key: 'refblock',\n          data: {\n            status: RefBlockStatus.forbidden,\n          },\n        }),\n      ]);\n\n      const refblock = controller.value.document.assertNode('refblock');\n      expect(RefBlock.isVoid(controller, refblock)).toBe(true);\n    });\n\n    test('pi-refblock is void if status is abnormal', () => {\n      const value = (\n        <value>\n          <document>\n            <block\n              key=\"refblock\"\n              type=\"refblock\"\n              data={{\n                docKey: 'doc-a',\n                refblockUUID: 'doc-a-uuid',\n                pi: true,\n                status: RefBlockStatus.forbidden,\n              }}\n            >\n              <block type=\"paragraph\">HelloWorld</block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const controller = Controller.create({\n        value,\n      });\n\n      const refblock = controller.value.document.assertNode('refblock');\n      expect(RefBlock.isVoid(controller, refblock)).toBe(true);\n    });\n\n    test('is non-void if node is not refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block key=\"non-refblock\" type=\"paragraph\">\n              HelloWorld\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const controller = Controller.create({\n        value,\n      });\n\n      const refblock = controller.value.document.assertNode('non-refblock');\n      expect(RefBlock.isVoid(controller, refblock)).toBe(false);\n    });\n  });\n\n  describe('#isRefBlock', () => {\n    test('node is refblock', () => {\n      const node = (\n        <block\n          key=\"refblock\"\n          type=\"refblock\"\n          data={{\n            docKey: 'doc-a',\n            refblockUUID: 'doc-a-uuid',\n            pi: true,\n            status: RefBlockStatus.forbidden,\n          }}\n        >\n          <block type=\"paragraph\">HelloWorld</block>\n        </block>\n      ) as unknown as Block;\n\n      expect(RefBlock.isRefBlock(node)).toBe(true);\n    });\n\n    test('node is not refblock', () => {\n      const node = (\n        <block key=\"non-refblock\" type=\"paragraph\">\n          HelloWorld\n        </block>\n      ) as unknown as Block;\n\n      expect(RefBlock.isRefBlock(node)).toBe(false);\n    });\n  });\n});\n"],"file":"model.test.js"}