{"version":3,"sources":["../../../../../src/__tests__/mo/serializer/index.test.ts"],"names":["describe","afterEach","jest","clearAllMocks","fixtures","fs","readdirSync","path","join","__dirname","forEach","fixture","test","default","input","config","expectation","output","plugins","factories","moRefBlock","configs","refblock","serializer","expect","jsonMLToValue","toJSON","toEqual","valueToJsonML"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEAA,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpCC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,IAAI,CAACC,aAAL;AACD,GAFQ,CAAT;AAIAH,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/B,UAAMI,QAAQ,GAAGC,YAAGC,WAAH,CAAeC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,CAAf,CAAjB;;AACAL,IAAAA,QAAQ,CAACM,OAAT,CAAkBC,OAAD,IAAa;AAC5BC,MAAAA,IAAI,CAACD,OAAD,EAAU,YAAY;AACxB,cAAM;AACJE,UAAAA,OAAO,EAAEC,KADL;AAEJC,UAAAA,MAFI;AAGJC,UAAAA;AAHI,YAIF,yBACFT,cAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,EAAwCE,OAAxC,EAAiD,OAAjD,CADE,gEAJJ;AAQA,cAAM;AAAEE,UAAAA,OAAO,EAAEI;AAAX,YAAsB,yBAC1BV,cAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,EAAwCE,OAAxC,EAAiD,QAAjD,CAD0B,gEAA5B;AAIA,cAAMO,OAAO,GAAG,sCAAsB;AACpCC,UAAAA,SAAS,EAAE,CAACC,WAAD,CADyB;AAEpCC,UAAAA,OAAO,EAAE;AACPC,YAAAA,QAAQ,EAAEP,MAAM,IAAI;AADb;AAF2B,SAAtB,CAAhB;AAOA,cAAMQ,UAAU,GAAG,mCAAiBL,OAAjB,CAAnB;AAEAM,QAAAA,MAAM,CAACD,UAAU,CAACE,aAAX,CAAyBX,KAAzB,EAAgCY,MAAhC,EAAD,CAAN,CAAiDC,OAAjD,CACEV,MAAM,CAACS,MAAP,EADF;;AAIA,YAAI,OAAOV,WAAP,KAAuB,UAA3B,EAAuC;AACrCA,UAAAA,WAAW;AACZ;AACF,OA7BG,CAAJ;AA8BD,KA/BD;AAgCD,GAlCO,CAAR;AAoCAhB,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/B,UAAMI,QAAQ,GAAGC,YAAGC,WAAH,CAAeC,cAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,CAAf,CAAjB;;AACAL,IAAAA,QAAQ,CAACM,OAAT,CAAkBC,OAAD,IAAa;AAC5BC,MAAAA,IAAI,CAACD,OAAD,EAAU,YAAY;AACxB,cAAM;AACJE,UAAAA,OAAO,EAAEC,KADL;AAEJC,UAAAA,MAFI;AAGJC,UAAAA;AAHI,YAIF,yBACFT,cAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,EAAwCE,OAAxC,EAAiD,OAAjD,CADE,gEAJJ;AAOA,cAAM;AAAEE,UAAAA,OAAO,EAAEI;AAAX,YAAsB,yBAC1BV,cAAKC,IAAL,CAAUC,SAAV,EAAqB,iBAArB,EAAwCE,OAAxC,EAAiD,QAAjD,CAD0B,gEAA5B;AAGA,cAAMO,OAAO,GAAG,sCAAsB;AACpCC,UAAAA,SAAS,EAAE,CAACC,WAAD,CADyB;AAEpCC,UAAAA,OAAO,EAAE;AACPC,YAAAA,QAAQ,EAAEP,MAAM,IAAI;AADb;AAF2B,SAAtB,CAAhB;AAOA,cAAMQ,UAAU,GAAG,mCAAiBL,OAAjB,CAAnB;AAEAM,QAAAA,MAAM,CAACD,UAAU,CAACK,aAAX,CAAyBd,KAAzB,CAAD,CAAN,CAAwCa,OAAxC,CAAgDV,MAAhD;;AACA,YAAI,OAAOD,WAAP,KAAuB,UAA3B,EAAuC;AACrCA,UAAAA,WAAW;AACZ;AACF,OAxBG,CAAJ;AAyBD,KA1BD;AA2BD,GA7BO,CAAR;AA8BD,CAvEO,CAAR","sourcesContent":["import { createSerializer } from '@ali/4ever-cangjie';\nimport path from 'path';\nimport fs from 'fs';\nimport moRefBlock from '../../../mo';\nimport { createCustomMoPlugins } from '@ali/4ever-setup';\n\ndescribe('RefBlock Serializer', () => {\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('#jsonMLToValue', () => {\n    const fixtures = fs.readdirSync(path.join(__dirname, './jsonMLToValue'));\n    fixtures.forEach((fixture) => {\n      test(fixture, async () => {\n        const {\n          default: input,\n          config,\n          expectation,\n        } = await import(\n          path.join(__dirname, './jsonMLToValue', fixture, 'input')\n        );\n\n        const { default: output } = await import(\n          path.join(__dirname, './jsonMLToValue', fixture, 'output')\n        );\n\n        const plugins = createCustomMoPlugins({\n          factories: [moRefBlock],\n          configs: {\n            refblock: config || {},\n          },\n        });\n\n        const serializer = createSerializer(plugins);\n\n        expect(serializer.jsonMLToValue(input).toJSON()).toEqual(\n          output.toJSON(),\n        );\n\n        if (typeof expectation === 'function') {\n          expectation();\n        }\n      });\n    });\n  });\n\n  describe('#valueToJsonML', () => {\n    const fixtures = fs.readdirSync(path.join(__dirname, './valueToJsonML'));\n    fixtures.forEach((fixture) => {\n      test(fixture, async () => {\n        const {\n          default: input,\n          config,\n          expectation,\n        } = await import(\n          path.join(__dirname, './valueToJsonML', fixture, 'input')\n        );\n        const { default: output } = await import(\n          path.join(__dirname, './valueToJsonML', fixture, 'output')\n        );\n        const plugins = createCustomMoPlugins({\n          factories: [moRefBlock],\n          configs: {\n            refblock: config || {},\n          },\n        });\n\n        const serializer = createSerializer(plugins);\n\n        expect(serializer.valueToJsonML(input)).toEqual(output);\n        if (typeof expectation === 'function') {\n          expectation();\n        }\n      });\n    });\n  });\n});\n"],"file":"index.test.js"}