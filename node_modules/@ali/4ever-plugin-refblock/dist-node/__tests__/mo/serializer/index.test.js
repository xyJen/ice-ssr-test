"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _everCangjie = require("@ali/4ever-cangjie");

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _mo = _interopRequireDefault(require("../../../mo"));

var _everSetup = require("@ali/4ever-setup");

describe('RefBlock Serializer', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });
  describe('#jsonMLToValue', () => {
    const fixtures = _fs.default.readdirSync(_path.default.join(__dirname, './jsonMLToValue'));

    fixtures.forEach(fixture => {
      test(fixture, async () => {
        const {
          default: input,
          config,
          expectation
        } = await Promise.resolve(`${_path.default.join(__dirname, './jsonMLToValue', fixture, 'input')}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
        const {
          default: output
        } = await Promise.resolve(`${_path.default.join(__dirname, './jsonMLToValue', fixture, 'output')}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
        const plugins = (0, _everSetup.createCustomMoPlugins)({
          factories: [_mo.default],
          configs: {
            refblock: config || {}
          }
        });
        const serializer = (0, _everCangjie.createSerializer)(plugins);
        expect(serializer.jsonMLToValue(input).toJSON()).toEqual(output.toJSON());

        if (typeof expectation === 'function') {
          expectation();
        }
      });
    });
  });
  describe('#valueToJsonML', () => {
    const fixtures = _fs.default.readdirSync(_path.default.join(__dirname, './valueToJsonML'));

    fixtures.forEach(fixture => {
      test(fixture, async () => {
        const {
          default: input,
          config,
          expectation
        } = await Promise.resolve(`${_path.default.join(__dirname, './valueToJsonML', fixture, 'input')}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
        const {
          default: output
        } = await Promise.resolve(`${_path.default.join(__dirname, './valueToJsonML', fixture, 'output')}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
        const plugins = (0, _everSetup.createCustomMoPlugins)({
          factories: [_mo.default],
          configs: {
            refblock: config || {}
          }
        });
        const serializer = (0, _everCangjie.createSerializer)(plugins);
        expect(serializer.valueToJsonML(input)).toEqual(output);

        if (typeof expectation === 'function') {
          expectation();
        }
      });
    });
  });
});
//# sourceMappingURL=index.test.js.map