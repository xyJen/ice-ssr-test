{"version":3,"sources":["../../../../src/__tests__/zhi/index.test.tsx"],"names":["TOOLBAR_ANIM_DURATION","Reader","props","controllerRef","noop","refblockConfig","options","value","setValue","React","useState","handleChange","useCallback","change","plugins","useMemo","factories","zhiFactory","locales","configs","refblock","locale","referFromTitle","referenceListTitle","forbidden","deleted","showRefs","invalid","copy","noRefers","enableToolbar","getReferenceList","Promise","resolve","name","docKey","hostDocKey","url","uuid","getDocKey","onRefBlockMounted","getDocURL","renderRefBlockInOtherStates","status","describe","test","refblockUUID","findByTestId","container","enable","gen","uniqueId","querySelector","constants","Selector","controller","c","dispatch","RefBlockStatus","renderLoading","findAllByTestId","normal","refblocks","expect","toHaveLength","map","textContent","toEqual","findByText","queryByTestId","refblock$","fireEvent","mouseEnter","toolbar$","click","detach$","not","toBeInTheDocument"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport * as React from 'react';\nimport {\n  Controller,\n  Value,\n  ProviderProps,\n  constants,\n  ControllerOptions,\n} from '@ali/4ever-cangjie';\nimport { createCustomZhiPlugins, Provider, Content } from '@ali/4ever-setup';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { jsx, renderEditor, fireEvent, waitForTime } from '@ali/4ever-dev-test';\nimport { noop, uniqueId } from 'lodash-es';\nimport '@testing-library/jest-dom/extend-expect';\nimport { act, waitFor } from '@testing-library/react';\nimport { RefBlockStatus } from '../../mo/models';\nimport { ReferenceItem, ZhiConfig } from '../../utils/types';\nimport zhiFactory from '../../zhi';\n\ninterface ReaderProps {\n  value: Value;\n  controllerRef?: ProviderProps['controllerRef'];\n  refblockConfig?: Partial<ZhiConfig>;\n  options?: Partial<ControllerOptions>;\n}\n\nconst TOOLBAR_ANIM_DURATION = 10;\n\nconst Reader: React.FC<ReaderProps> = (props) => {\n  const { controllerRef = noop, refblockConfig = {}, options = {} } = props;\n  const [value, setValue] = React.useState(props.value);\n  const handleChange = React.useCallback((change) => {\n    setValue(change.value);\n  }, []);\n\n  const plugins = React.useMemo(\n    () =>\n      createCustomZhiPlugins({\n        factories: [zhiFactory],\n        locales: {},\n        configs: {\n          refblock: {\n            locale: {\n              referFromTitle: '引用源',\n              referenceListTitle: '被[n]篇文档引用了[m]次',\n              forbidden: '禁止',\n              deleted: '已删除',\n              showRefs: '展示引用关系',\n              invalid: '无效',\n              copy: '复制',\n              noRefers: '未被引用',\n            },\n            enableToolbar: () => true,\n            getReferenceList: () =>\n              new Promise<ReferenceItem[]>((resolve) => {\n                resolve([\n                  {\n                    name: '红楼梦简介',\n                    docKey: '红楼梦简介',\n                    hostDocKey: '红楼梦',\n                    url: 'https://www.baidu.com',\n                    uuid: 'hl-intro',\n                  },\n                  {\n                    name: '三国演义简介',\n                    docKey: '三国演义介绍',\n                    hostDocKey: '三国演义',\n                    url: 'https://www.baidu.com',\n                    uuid: 'sg-intro',\n                  },\n                  // 引用块所在的源文档将被过滤\n                  {\n                    name: '四大名著简介',\n                    docKey: '四大名著介绍',\n                    hostDocKey: '四大名著',\n                    url: 'https://www.baidu.com',\n                    uuid: '四大名著简介',\n                  },\n                ]);\n              }),\n            getDocKey: () => '三国演义',\n            onRefBlockMounted: () => {},\n            getDocURL: (url) => url,\n            renderRefBlockInOtherStates: (status) => <div>{status}</div>,\n            ...refblockConfig,\n          },\n        },\n      }),\n    [],\n  );\n\n  return (\n    <Provider\n      value={value}\n      plugins={plugins}\n      onChange={handleChange}\n      controllerRef={controllerRef}\n      options={options}\n    >\n      <Content />\n    </Provider>\n  );\n};\n\ndescribe('Zhi: RefBlock', () => {\n  test('默认渲染加载态', async () => {\n    const value = (\n      <value>\n        <document>\n          <block\n            type=\"refblock\"\n            data={{\n              docKey: '四大名著简介',\n              hostDocKey: '四大名著',\n              refblockUUID: 'sdmz',\n            }}\n          >\n            <block type=\"paragraph\">Hello</block>\n            <block type=\"paragraph\">World</block>\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n\n    const { findByTestId, container } = await renderEditor(\n      <Reader\n        value={value}\n        options={{ uuid: { enable: true, gen: uniqueId } }}\n      />,\n    );\n\n    await findByTestId('refblock-loading');\n    await waitFor(() =>\n      container.querySelector(`[${constants.Selector.uuid}=sdmz]`));\n  });\n\n  test('渲染无效态', async () => {\n    const value = (\n      <value>\n        <document>\n          <block\n            type=\"refblock\"\n            data={{ docKey: '四大名著简介', hostDocKey: '四大名著' }}\n          >\n            <block type=\"paragraph\">Hello</block>\n            <block type=\"paragraph\">World</block>\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n\n    let controller: Controller | undefined;\n    const { findByTestId } = await renderEditor(\n      <Reader\n        value={value}\n        controllerRef={(c) => {\n          controller = c;\n        }}\n      />,\n    );\n\n    await findByTestId('refblock-loading');\n    act(() => {\n      controller!.dispatch('setRefBlockInjectionByDocKey', '四大名著简介', {\n        status: RefBlockStatus.invalid,\n      });\n    });\n\n    await findByTestId('refblock-invalid');\n  });\n\n  test('渲染自定义加载态的引用块', async () => {\n    const value = (\n      <value>\n        <document>\n          <block\n            type=\"refblock\"\n            data={{ docKey: '四大名著简介', hostDocKey: '四大名著' }}\n          >\n            <block type=\"paragraph\">Hello</block>\n            <block type=\"paragraph\">World</block>\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n    const renderLoading = () => {\n      return <div data-testid=\"refblock-custom-loading\" />;\n    };\n    const { findByTestId } = await renderEditor(\n      <Reader value={value} refblockConfig={{ renderLoading }} />,\n    );\n\n    await findByTestId('refblock-custom-loading');\n  });\n\n  test('引用块从加载到加载完成', async () => {\n    const value = (\n      <value>\n        <document>\n          <block\n            type=\"refblock\"\n            data={{ docKey: '四大名著简介', uuid: '四大名著简介' }}\n          >\n            <block type=\"paragraph\">Hello</block>\n          </block>\n          <block\n            key=\"docb\"\n            type=\"refblock\"\n            data={{ docKey: '三国演义简介', uuid: 'b' }}\n          >\n            <block type=\"paragraph\">World</block>\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n\n    let controller: Controller | undefined;\n    const { findAllByTestId } = await renderEditor(\n      <Reader\n        value={value}\n        controllerRef={(c) => {\n          controller = c;\n        }}\n      />,\n    );\n\n    await findAllByTestId('refblock-loading');\n    act(() => {\n      controller!.dispatch('setRefBlockInjectionByDocKey', '四大名著简介', {\n        status: RefBlockStatus.normal,\n      });\n\n      controller!.dispatch('setRefBlockInjectionByKey', 'docb', {\n        status: RefBlockStatus.normal,\n      });\n    });\n\n    const refblocks = await findAllByTestId('refblock-container');\n    expect(refblocks).toHaveLength(2);\n    expect(\n      refblocks.map(\n        (refblock) =>\n          refblock?.querySelector('[data-type=\"paragraph\"]')?.textContent,\n      ),\n    ).toEqual(['Hello', 'World']);\n  });\n\n  test('渲染只读模式的 refblock：只读模式下不展示解绑操作', async () => {\n    const value = (\n      <value>\n        <document>\n          <injection data={{ status: RefBlockStatus.normal }}>\n            <block\n              type=\"refblock\"\n              data={{ docKey: '四大名著简介', hostDocKey: '四大名著' }}\n            >\n              <block type=\"paragraph\">Hello</block>\n              <block type=\"paragraph\">World</block>\n            </block>\n          </injection>\n          <block type=\"paragraph\">\n            Cangjie\n            <cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n\n    const { findByTestId, findByText, queryByTestId } = await renderEditor(\n      <Reader value={value} />,\n    );\n\n    const refblock$ = await findByTestId('refblock-container');\n    fireEvent.mouseEnter(refblock$);\n    const toolbar$ = await findByTestId('refblock-toolbar-copy');\n    await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n    fireEvent.click(toolbar$);\n    await findByText(/引用源/);\n    await findByText(/四大名著简介/);\n    const detach$ = queryByTestId('refblock-detach');\n    expect(detach$).not.toBeInTheDocument();\n  });\n});\n"],"file":"index.test.js"}