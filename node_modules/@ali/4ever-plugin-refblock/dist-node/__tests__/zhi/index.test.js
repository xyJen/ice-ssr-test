"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everSetup = require("@ali/4ever-setup");

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

require("@testing-library/jest-dom/extend-expect");

var _react2 = require("@testing-library/react");

var _models = require("../../mo/models");

var _zhi = _interopRequireDefault(require("../../zhi"));

/** @jsx jsx */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const TOOLBAR_ANIM_DURATION = 10;

var _ref = (0, _everDevTest.jsx)(_everSetup.Content, null);

const Reader = props => {
  const {
    controllerRef = _lodash.noop,
    refblockConfig = {},
    options = {}
  } = props;
  const [value, setValue] = React.useState(props.value);
  const handleChange = React.useCallback(change => {
    setValue(change.value);
  }, []);
  const plugins = React.useMemo(() => (0, _everSetup.createCustomZhiPlugins)({
    factories: [_zhi.default],
    locales: {},
    configs: {
      refblock: {
        locale: {
          referFromTitle: '引用源',
          referenceListTitle: '被[n]篇文档引用了[m]次',
          forbidden: '禁止',
          deleted: '已删除',
          showRefs: '展示引用关系',
          invalid: '无效',
          copy: '复制',
          noRefers: '未被引用'
        },
        enableToolbar: () => true,
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com',
            uuid: 'hl-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-intro'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著简介',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com',
            uuid: '四大名著简介'
          }]);
        }),
        getDocKey: () => '三国演义',
        onRefBlockMounted: () => {},
        getDocURL: url => url,
        renderRefBlockInOtherStates: status => (0, _everDevTest.jsx)("div", null, status),
        ...refblockConfig
      }
    }
  }), []);
  return (0, _everDevTest.jsx)(_everSetup.Provider, {
    value: value,
    plugins: plugins,
    onChange: handleChange,
    controllerRef: controllerRef,
    options: options
  }, _ref);
};

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref8 = (0, _everDevTest.jsx)("div", {
  "data-testid": "refblock-custom-loading"
});

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie", (0, _everDevTest.jsx)("cursor", null));

describe('Zhi: RefBlock', () => {
  test('默认渲染加载态', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "refblock",
      data: {
        docKey: '四大名著简介',
        hostDocKey: '四大名著',
        refblockUUID: 'sdmz'
      }
    }, _ref2, _ref3)));
    const {
      findByTestId,
      container
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Reader, {
      value: value,
      options: {
        uuid: {
          enable: true,
          gen: _lodash.uniqueId
        }
      }
    }));
    await findByTestId('refblock-loading');
    await (0, _react2.waitFor)(() => container.querySelector(`[${_everCangjie.constants.Selector.uuid}=sdmz]`));
  });
  test('渲染无效态', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "refblock",
      data: {
        docKey: '四大名著简介',
        hostDocKey: '四大名著'
      }
    }, _ref4, _ref5)));
    let controller;
    const {
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Reader, {
      value: value,
      controllerRef: c => {
        controller = c;
      }
    }));
    await findByTestId('refblock-loading');
    (0, _react2.act)(() => {
      controller.dispatch('setRefBlockInjectionByDocKey', '四大名著简介', {
        status: _models.RefBlockStatus.invalid
      });
    });
    await findByTestId('refblock-invalid');
  });
  test('渲染自定义加载态的引用块', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "refblock",
      data: {
        docKey: '四大名著简介',
        hostDocKey: '四大名著'
      }
    }, _ref6, _ref7)));

    const renderLoading = () => {
      return _ref8;
    };

    const {
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Reader, {
      value: value,
      refblockConfig: {
        renderLoading
      }
    }));
    await findByTestId('refblock-custom-loading');
  });
  test('引用块从加载到加载完成', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "refblock",
      data: {
        docKey: '四大名著简介',
        uuid: '四大名著简介'
      }
    }, _ref9), (0, _everDevTest.jsx)("block", {
      key: "docb",
      type: "refblock",
      data: {
        docKey: '三国演义简介',
        uuid: 'b'
      }
    }, _ref10)));
    let controller;
    const {
      findAllByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Reader, {
      value: value,
      controllerRef: c => {
        controller = c;
      }
    }));
    await findAllByTestId('refblock-loading');
    (0, _react2.act)(() => {
      controller.dispatch('setRefBlockInjectionByDocKey', '四大名著简介', {
        status: _models.RefBlockStatus.normal
      });
      controller.dispatch('setRefBlockInjectionByKey', 'docb', {
        status: _models.RefBlockStatus.normal
      });
    });
    const refblocks = await findAllByTestId('refblock-container');
    expect(refblocks).toHaveLength(2);
    expect(refblocks.map(refblock => refblock?.querySelector('[data-type="paragraph"]')?.textContent)).toEqual(['Hello', 'World']);
  });
  test('渲染只读模式的 refblock：只读模式下不展示解绑操作', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
      data: {
        status: _models.RefBlockStatus.normal
      }
    }, (0, _everDevTest.jsx)("block", {
      type: "refblock",
      data: {
        docKey: '四大名著简介',
        hostDocKey: '四大名著'
      }
    }, _ref11, _ref12)), _ref13));
    const {
      findByTestId,
      findByText,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Reader, {
      value: value
    }));
    const refblock$ = await findByTestId('refblock-container');

    _everDevTest.fireEvent.mouseEnter(refblock$);

    const toolbar$ = await findByTestId('refblock-toolbar-copy');
    await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);

    _everDevTest.fireEvent.click(toolbar$);

    await findByText(/引用源/);
    await findByText(/四大名著简介/);
    const detach$ = queryByTestId('refblock-detach');
    expect(detach$).not.toBeInTheDocument();
  });
});
//# sourceMappingURL=index.test.js.map