{"version":3,"sources":["../../../../src/__tests__/bi/behavior.test.tsx"],"names":["mockedClipboard","jest","mock","fn","mockImplementation","write","data","MIME_TYPES","constants","encodeFragment","transferUtils","plgs","factories","moCard","moHeading","moRefBlock","serializer","DEFAULT_VALUE","VoidPlugin","schema","blocks","void","isVoid","CodePlugin","queries","shouldSelectAll","controller","selection","document","value","focus","code","getClosest","key","node","Block","isBlock","type","undefined","PasteTesterPlugin","config","onCangjiePaste","noop","pasteTester","event","next","createController","options","refblock","clipboard","plugins","biFactory","locales","configs","locale","nestedNotSupported","createFailed","referFromTitle","detach","detachFailed","detachSuccess","deleted","forbidden","invalid","referenceListTitle","copySuccess","cannotMoveTo","cannotDropTo","copy","showRefs","creating","noRefers","decorateRefBlockFragment","fragment","getDocKey","renderReadOnly","generateDoc","Promise","resolve","then","docKey","uuid","generateCopyDoc","getReferenceList","renderRefBlockInOtherStates","onRefBlockMounted","cacheHetuWhenCopy","getHetuWhenPaste","getRefBlockURL","id","getDocURL","url","Controller","create","autoFocus","normalize","describe","beforeEach","test","command","expected","expect","toJSON","toEqual","a","status","RefBlockStatus","loading","normal","preserveInjections","injections","nodes","slice","assertNodeByPath","edge","EdgePoint","Selection","anchor","Injection","disableDrop","dropBlock","readOnly","disabled","enabled","query","toBe","dragBlock","assertNode","tableBlock","nestedTableBlock","refBlock","pNestedRefBlock","disableNodeInRefBlock","table","getNode","toBeNull","Document","refblockUUID","enable","gen","uniqueId","dispatch","hostKey","clipboardData","FRAGMENT","items","types","getData","format","run","hostDocKey","docA","docC","REFBLOCK","toBeCalledWith","toBeCalledTimes","reject","encodedFragment","disableNestedInRefBlock","text","cardType","height","metadata","sync","TEXT","nextEvent","calls","valueToJsonML","jsonMLToHTML","anything","HTML","set","block","srcBlock","Commands","insertTextByPath","flush","getNodeByPath","KeyboardEvent","preserveSelections"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { getHotkeyEvent, jsx, waitForTime } from '@ali/4ever-dev-test';\nimport {\n  Controller,\n  Value,\n  Document,\n  Block,\n  Injection,\n  CangjieClipboardEvent,\n  constants,\n  transferUtils,\n  Commands,\n  Selection,\n  EdgePoint,\n  BiPluginConfig,\n  Plugin,\n  createSerializer,\n  ControllerOptions,\n} from '@ali/4ever-cangjie';\nimport { createCustomBiPlugins, createCustomMoPlugins } from '@ali/4ever-setup';\nimport { DraggablePlugin } from '@ali/4ever-bi';\nimport { moFactory as moHeading } from '@ali/4ever-plugin-heading';\nimport { moFactory as moRefBlock } from '@ali/4ever-plugin-refblock';\nimport { moFactory as moCard } from '@ali/4ever-plugin-card';\nimport { noop, uniqueId } from 'lodash-es';\nimport RefBlock, { RefBlockStatus } from '../../mo/models';\nimport {\n  createDisableDrop,\n  createDisableNodeInRefBlock,\n} from '../../bi/queries';\nimport biFactory from '../../bi';\n\nlet mockedClipboard = {};\njest.mock('@ali/clipboard-manager', () => {\n  return jest.fn().mockImplementation(() => {\n    return {\n      write: (data) => {\n        mockedClipboard = data;\n      },\n    };\n  });\n});\n\nconst { MIME_TYPES } = constants;\nconst { encodeFragment } = transferUtils;\n\nconst plgs = createCustomMoPlugins({\n  factories: [moCard, moHeading, moRefBlock],\n});\n\nconst serializer = createSerializer(plgs);\n\nconst DEFAULT_VALUE = (\n  <value>\n    <document>\n      <block type=\"paragraph\">\n        <cursor />\n      </block>\n    </document>\n  </value>\n) as unknown as Value;\n\nconst VoidPlugin = () => ({\n  schema: {\n    blocks: {\n      void: {\n        isVoid: true,\n      },\n    },\n  },\n});\n\nconst CodePlugin = () => ({\n  queries: {\n    shouldSelectAll: (controller) => {\n      const { selection, document } = controller.value;\n      const { focus } = selection;\n      const code = document.getClosest(\n        focus.key,\n        (node) => Block.isBlock(node) && node.type === 'code',\n      );\n      return code ? true : undefined;\n    },\n  },\n});\n\ninterface PasteTesterConfig {\n  onCangjiePaste: (event: CangjieClipboardEvent) => void;\n}\n\nconst PasteTesterPlugin: (config: {\n  pasteTester?: PasteTesterConfig;\n}) => Plugin = (config) => {\n  const { onCangjiePaste = noop } = config.pasteTester || {};\n  return {\n    onCangjiePaste: (event, controller, next) => {\n      onCangjiePaste(event);\n      return next();\n    },\n  };\n};\n\ninterface ControllerConfig {\n  refblock?: Partial<BiPluginConfig['refblock']>;\n  clipboard?: Partial<BiPluginConfig['clipboard']>;\n  pasteTester?: Partial<PasteTesterConfig>;\n}\n\nfunction createController(\n  value?: Value,\n  config?: ControllerConfig,\n  options?: Partial<ControllerOptions>,\n) {\n  const { refblock = {}, clipboard, pasteTester } = config || {};\n  const plugins = [\n    DraggablePlugin({}),\n    PasteTesterPlugin({\n      pasteTester: { onCangjiePaste: noop, ...pasteTester },\n    }),\n    ...createCustomBiPlugins({\n      factories: [biFactory],\n      locales: {},\n      configs: {\n        clipboard: { serializer, ...clipboard },\n        refblock: {\n          locale: {\n            nestedNotSupported: '不支持嵌套的引用块',\n            createFailed: '创建引用块失败',\n            referFromTitle: '引用源',\n            detach: '解除引用关系',\n            detachFailed: '解除引用关系失败',\n            detachSuccess: '解除引用关系成功',\n            deleted: '引用块已删除',\n            forbidden: '无权限',\n            invalid: '无效',\n            referenceListTitle: '被[n]篇文档引用了[m]次',\n            copySuccess: '拷贝成功',\n            cannotMoveTo: '无法移动到',\n            cannotDropTo: '无法粘贴到',\n            copy: '复制',\n            showRefs: '查看引用关系',\n            creating: '创建中',\n            noRefers: '暂未被其他文档引用',\n          },\n          decorateRefBlockFragment: (fragment) => fragment,\n          getDocKey: () => 'host',\n          renderReadOnly: () => null,\n          generateDoc: () =>\n            Promise.resolve().then(() => ({\n              docKey: 'doc-a',\n              uuid: 'doc-a',\n            })),\n          generateCopyDoc: (docKey) => {\n            return Promise.resolve().then(() => ({\n              uuid: 'abc',\n              docKey,\n            }));\n          },\n          getReferenceList: () => Promise.resolve().then(() => []),\n          detach: () => Promise.resolve().then(),\n          renderRefBlockInOtherStates: () => null,\n          onRefBlockMounted: () => {},\n          cacheHetuWhenCopy: () => '',\n          getHetuWhenPaste: () => {},\n          getRefBlockURL: (id) => id,\n          getDocURL: (url) => url,\n          ...refblock,\n        },\n      },\n    }),\n    moCard({}),\n    moHeading({}),\n    VoidPlugin(),\n    CodePlugin(),\n  ];\n\n  return Controller.create(\n    {\n      plugins,\n      value: value || DEFAULT_VALUE,\n      autoFocus: true,\n    },\n    { normalize: false, ...options },\n  );\n}\n\ndescribe('Bi/refblock/behaviour', () => {\n  beforeEach(() => {\n    mockedClipboard = {};\n  });\n\n  describe('commands', () => {\n    test('#insertRefBlock', () => {\n      // 插入引用块时，默认为其插入空段落\n      const controller = createController();\n\n      const { value } = controller.command('insertRefBlock', {\n        docKey: 'doc-a',\n      });\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n              <block type=\"paragraph\">\n                <text />\n              </block>\n            </block>\n            <block type=\"paragraph\">\n              <text />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      expect(expected.toJSON()).toEqual(value.toJSON());\n    });\n\n    test('#setRefBlockInjectionByKey', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <injection data={{ a: 1, status: RefBlockStatus.loading }}>\n                <block\n                  key=\"refblock\"\n                  type=\"refblock\"\n                  data={{ docKey: 'doc-a' }}\n                />\n              </injection>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <injection data={{ a: 1, status: RefBlockStatus.normal }}>\n              <block\n                key=\"refblock\"\n                type=\"refblock\"\n                data={{ docKey: 'doc-a' }}\n              />\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const { value } = controller.command(\n        'setRefBlockInjectionByKey',\n        'refblock',\n        {\n          status: RefBlockStatus.normal,\n        },\n      );\n\n      expect(\n        value.toJSON({\n          preserveInjections: true,\n        }),\n      ).toEqual(\n        expected.toJSON({\n          preserveInjections: true,\n        }),\n      );\n    });\n\n    test('#setRefBlockInjectionByKey: terminate if node is not exists', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block\n                key=\"paragraph\"\n                type=\"paragraph\"\n                data={{ docKey: 'doc-a' }}\n              />\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const { value } = controller.command(\n        'setRefBlockInjectionByKey',\n        'not-exist-paragraph',\n        {\n          status: RefBlockStatus.normal,\n        },\n      );\n\n      expect(value.injections).toEqual([]);\n    });\n\n    test('#setRefBlockInjectionByKey: terminate if node is not a refblock', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block\n                key=\"paragraph\"\n                type=\"paragraph\"\n                data={{ docKey: 'doc-a' }}\n              />\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const { value } = controller.command(\n        'setRefBlockInjectionByKey',\n        'paragraph',\n        {\n          status: RefBlockStatus.normal,\n        },\n      );\n\n      expect(value.injections).toEqual([]);\n    });\n\n    test('#setRefBlockInjectionByDocKey', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <injection data={{ a: 1, status: RefBlockStatus.loading }}>\n                <block\n                  key=\"refblock1\"\n                  type=\"refblock\"\n                  data={{ docKey: 'doc-a' }}\n                />\n              </injection>\n              <injection data={{ a: 1, status: RefBlockStatus.loading }}>\n                <block\n                  key=\"refblock2\"\n                  type=\"refblock\"\n                  data={{ docKey: 'doc-a' }}\n                />\n              </injection>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <injection data={{ a: 1, status: RefBlockStatus.normal }}>\n              <block\n                key=\"refblock1\"\n                type=\"refblock\"\n                data={{ docKey: 'doc-a' }}\n              />\n            </injection>\n            <injection data={{ a: 1, status: RefBlockStatus.normal }}>\n              <block\n                key=\"refblock2\"\n                type=\"refblock\"\n                data={{ docKey: 'doc-a' }}\n              />\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const { value } = controller.command(\n        'setRefBlockInjectionByDocKey',\n        'doc-a',\n        {\n          status: RefBlockStatus.normal,\n        },\n      );\n\n      expect(\n        value.toJSON({\n          preserveInjections: true,\n        }),\n      ).toEqual(\n        expected.toJSON({\n          preserveInjections: true,\n        }),\n      );\n    });\n\n    test('#upgradeToRefBlock', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">Hello</block>\n              <block type=\"paragraph\">World</block>\n              <block type=\"paragraph\">\n                Cangjie\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }} cursor=\"after\">\n              <block type=\"paragraph\">Hello</block>\n              <block type=\"paragraph\">World</block>\n            </block>\n            <block type=\"paragraph\">Cangjie</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const blocks = controller.value.document.nodes.slice(0, 2);\n\n      const { value } = controller.command('upgradeToRefBlock', blocks, {\n        docKey: 'doc-a',\n      });\n\n      expect(value.toJSON()).toEqual(expected.toJSON());\n      const refblock = value.document.assertNodeByPath([0]);\n      const edge = EdgePoint.create({\n        key: refblock.key,\n        edge: 'after',\n      });\n      expect(value.selection).toEqual(\n        Selection.create({\n          anchor: edge,\n          focus: edge,\n        }),\n      );\n      expect(value.injections).toEqual([\n        Injection.create({\n          key: refblock.key,\n          data: {\n            status: RefBlockStatus.loading,\n          },\n        }),\n      ]);\n    });\n\n    test('#upgradeToRefBlock, blocks is empty', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Hello</block>\n            <block type=\"paragraph\">World</block>\n            <block type=\"paragraph\">\n              Cangjie\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n      const controller = createController(value);\n\n      const blocks = [];\n\n      controller.command('upgradeToRefBlock', blocks, {\n        docKey: 'doc-a',\n      });\n\n      expect(value.toJSON()).toEqual(controller.value.toJSON());\n    });\n  });\n\n  describe('queries', () => {\n    const disableDrop = createDisableDrop(\n      '无法移动到引用块',\n      '无法将引用块移动到此内容',\n      (controller, node) => Block.isBlock(node) && node.type === 'table',\n      (dropBlock) => dropBlock.type === 'template-button',\n    );\n\n    test('#disableDrag', () => {\n      // 如果 drag 的内容存在于只读引用块，则不允许 drag\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <injection data={{ status: RefBlockStatus.readOnly }}>\n                <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                  <block type=\"paragraph\">Hello</block>\n                </block>\n              </injection>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\">World</block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const disabled = controller.value.document.assertNodeByPath([0, 0]);\n      const enabled = controller.value.document.assertNodeByPath([1, 0]);\n      expect(controller.query('disableDrag', disabled)).toBe(true);\n      expect(controller.query('disableDrag', enabled)).toBe(false);\n    });\n\n    test('#disableDrop: disable drop at readonly refblock', () => {\n      // 如果 drop 块是只读引用块，则不允许 drop\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <injection data={{ status: RefBlockStatus.readOnly }}>\n                <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                  <block key=\"disabled\" type=\"paragraph\">\n                    Hello\n                  </block>\n                </block>\n              </injection>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block key=\"enabled\" type=\"paragraph\">\n                  World\n                </block>\n              </block>\n              <block key=\"normal\" type=\"paragraph\">\n                Cangjie\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const { document } = controller.value;\n\n      const dragBlock = document.assertNode('normal') as Block;\n      const disabled = document.assertNode('disabled') as Block;\n      const enabled = document.assertNode('enabled') as Block;\n\n      expect(controller.query(disableDrop, dragBlock, disabled)).toBe(true);\n      expect(controller.query(disableDrop, dragBlock, enabled)).toBe(false);\n    });\n\n    test('#disableDrop: customized disable move-to', () => {\n      // 禁止拖拽引用块到引用块\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <injection data={{ status: RefBlockStatus.readOnly }}>\n                <block\n                  key=\"refblock\"\n                  type=\"refblock\"\n                  data={{ docKey: 'doc-a' }}\n                >\n                  <block key=\"p-in-refblock\" type=\"paragraph\">\n                    Hello\n                  </block>\n                </block>\n              </injection>\n              <block key=\"table\" type=\"table\">\n                World\n              </block>\n              <block key=\"nested-table\" type=\"paragraph\">\n                <block type=\"table\">World</block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const { document } = controller.value;\n\n      const tableBlock = document.assertNode('table') as Block;\n      const nestedTableBlock = document.assertNode('nested-table') as Block;\n      const dropBlock = document.assertNode('p-in-refblock') as Block;\n\n      expect(controller.query(disableDrop, tableBlock, dropBlock)).toBe(true);\n      expect(controller.query(disableDrop, nestedTableBlock, dropBlock)).toBe(\n        true,\n      );\n    });\n\n    test('#disableDrop: customize disable drop-to', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block key=\"refblock\" type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block key=\"p-in-refblock\" type=\"paragraph\">\n                  Hello\n                </block>\n              </block>\n              <block type=\"paragraph\" key=\"p-nested-refblock\">\n                <block type=\"refblock\" data={{ docKey: 'doc-b' }}>\n                  World\n                </block>\n              </block>\n              <block key=\"template-button\" type=\"template-button\">\n                TemplateButton\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const { document } = controller.value;\n\n      const refBlock = document.assertNode('refblock') as Block;\n      const pNestedRefBlock = document.assertNode('p-nested-refblock') as Block;\n      const dropBlock = document.assertNode('template-button') as Block;\n\n      expect(controller.query(disableDrop, refBlock, dropBlock)).toBe(true);\n      expect(controller.query(disableDrop, pNestedRefBlock, dropBlock)).toBe(\n        true,\n      );\n    });\n\n    test('#disableNodeInRefBlock', () => {\n      const disableNodeInRefBlock = createDisableNodeInRefBlock(\n        (node) => Block.isBlock(node) && node.type === 'table',\n      );\n      // 禁止拖拽引用块到引用块\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block key=\"table\" type=\"table\">\n                World\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const { document } = controller.value;\n\n      const table = document.assertNode('table') as Block;\n\n      expect(controller.query(disableNodeInRefBlock, table)).toBe(true);\n    });\n\n    test('#isContainer', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <injection data={{ status: RefBlockStatus.readOnly }}>\n                <block\n                  key=\"refblock\"\n                  type=\"refblock\"\n                  data={{ docKey: 'doc-a' }}\n                >\n                  <block key=\"p-in-refblock\" type=\"paragraph\">\n                    Hello\n                  </block>\n                </block>\n              </injection>\n              <block key=\"table\" type=\"table\">\n                World\n              </block>\n              <block key=\"nested-table\" type=\"paragraph\">\n                <block type=\"table\">World</block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n      const { document } = controller.value;\n      const refblock = document.getNode('refblock') as Block;\n      const table = document.getNode('table');\n      expect(controller.query('isContainer', table)).toBeNull();\n      expect(controller.query('isContainer', refblock)).toBeNull();\n      expect(\n        controller.query('isContainer', Document.create({ nodes: [refblock] })),\n      ).toBe(true);\n    });\n\n    test('#anchor', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block\n                key=\"refblock\"\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a-uuid' }}\n              >\n                <block key=\"p-in-refblock\" type=\"paragraph\">\n                  Hello\n                </block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {},\n        { uuid: { enable: true, gen: uniqueId } },\n      );\n      const { document } = controller.value;\n      const refblock = document.assertNode('refblock') as Block;\n      expect(controller.query('anchor', refblock)).toBe('doc-a-uuid');\n    });\n  });\n\n  describe('actions', () => {\n    test('#setRefBlockInjectionByDocKey', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <injection data={{ status: RefBlockStatus.loading, a: 1 }}>\n                <block\n                  key=\"refblock1\"\n                  type=\"refblock\"\n                  data={{ docKey: 'doc-a' }}\n                >\n                  <block key=\"disabled\" type=\"paragraph\">\n                    Hello\n                  </block>\n                </block>\n              </injection>\n              <block key=\"refblock2\" type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block key=\"enabled\" type=\"paragraph\">\n                  World\n                </block>\n              </block>\n              <injection data={{ status: RefBlockStatus.loading, a: 1 }}>\n                <block\n                  key=\"refblock3\"\n                  type=\"refblock\"\n                  data={{ docKey: 'doc-b' }}\n                >\n                  <block key=\"enabled\" type=\"paragraph\">\n                    World\n                  </block>\n                </block>\n              </injection>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.readOnly, a: 1 }}>\n              <block key=\"refblock1\" type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block key=\"disabled\" type=\"paragraph\">\n                  Hello\n                </block>\n              </block>\n            </injection>\n            <injection data={{ status: RefBlockStatus.readOnly }}>\n              <block key=\"refblock2\" type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block key=\"enabled\" type=\"paragraph\">\n                  World\n                </block>\n              </block>\n            </injection>\n            <injection data={{ status: RefBlockStatus.loading, a: 1 }}>\n              <block key=\"refblock3\" type=\"refblock\" data={{ docKey: 'doc-b' }}>\n                <block key=\"enabled\" type=\"paragraph\">\n                  World\n                </block>\n              </block>\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.dispatch('setRefBlockInjectionByDocKey', 'doc-a', {\n        status: RefBlockStatus.readOnly,\n      });\n      controller.dispatch(\n        'setRefBlockInjectionByDocKey',\n        'doc-b',\n        { status: RefBlockStatus.normal },\n        false,\n      );\n\n      expect(controller.value.toJSON()).toEqual(expected.toJSON());\n    });\n\n    test('#setRefBlockInjectionByKey', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <injection data={{ status: RefBlockStatus.loading, a: 1 }}>\n                <block\n                  key=\"refblock1\"\n                  type=\"refblock\"\n                  data={{ docKey: 'doc-a' }}\n                >\n                  <block key=\"disabled\" type=\"paragraph\">\n                    Hello\n                  </block>\n                </block>\n              </injection>\n              <injection data={{ status: RefBlockStatus.loading, a: 1 }}>\n                <block\n                  key=\"refblock2\"\n                  type=\"refblock\"\n                  data={{ docKey: 'doc-b' }}\n                >\n                  <block key=\"enabled\" type=\"paragraph\">\n                    World\n                  </block>\n                </block>\n              </injection>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.readOnly, a: 1 }}>\n              <block key=\"refblock1\" type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block key=\"disabled\" type=\"paragraph\">\n                  Hello\n                </block>\n              </block>\n            </injection>\n            <injection data={{ status: RefBlockStatus.loading, a: 1 }}>\n              <block key=\"refblock2\" type=\"refblock\" data={{ docKey: 'doc-b' }}>\n                <block key=\"enabled\" type=\"paragraph\">\n                  World\n                </block>\n              </block>\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.dispatch('setRefBlockInjectionByKey', 'refblock1', {\n        status: RefBlockStatus.readOnly,\n      });\n      controller.dispatch(\n        'setRefBlockInjectionByKey',\n        'refblock2',\n        { status: RefBlockStatus.normal },\n        false,\n      );\n      expect(controller.value.toJSON()).toEqual(expected.toJSON());\n    });\n\n    test('#upgradeToRefBlock', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">Hello</block>\n              <block type=\"paragraph\">World</block>\n              <block type=\"paragraph\">Cangjie</block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'doc-a', uuid: 'doc-a' }}\n            >\n              <block type=\"paragraph\">Hello</block>\n              <block type=\"paragraph\">World</block>\n            </block>\n            <block type=\"paragraph\">Cangjie</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const blocks = controller.value.document.nodes.slice(0, 2);\n\n      controller.dispatch('upgradeToRefBlock', 'doc-a', 'doc-a', blocks);\n      const { value } = controller;\n\n      expect(value.toJSON()).toEqual(expected.toJSON());\n      const refblock = value.document.assertNodeByPath([0]);\n      expect(value.injections).toEqual([\n        Injection.create({\n          key: refblock.key,\n          data: {\n            status: RefBlockStatus.loading,\n          },\n        }),\n      ]);\n    });\n\n    test('#insertRefBlock', () => {\n      // 插入引用块时，默认为其插入空段落\n      const controller = createController();\n\n      controller.dispatch('insertRefBlock', { docKey: 'doc-a' });\n      const { value } = controller;\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n              <block type=\"paragraph\">\n                <text />\n              </block>\n            </block>\n            <block type=\"paragraph\">\n              <text />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      expect(expected.toJSON()).toEqual(value.toJSON());\n    });\n\n    test('#donwgradeToBlocksByDocKey', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\">Hello</block>\n              </block>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\">Hello</block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Hello</block>\n            <block type=\"paragraph\">Hello</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.dispatch('downgradeToBlocksByDocKey', 'doc-a');\n\n      expect(controller.value.toJSON()).toEqual(expected.toJSON());\n    });\n\n    test('#downgradeToBlocksByKey', () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block key=\"refblock1\" type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\">Hello</block>\n              </block>\n              <block key=\"normal\" type=\"paragraph\">\n                <block type=\"paragraph\">World</block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Hello</block>\n            <block key=\"normal\" type=\"paragraph\">\n              <block type=\"paragraph\">World</block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.dispatch('downgradeToBlocksByKey', 'refblock1');\n      // 忽略对于非引用块的处理\n      controller.dispatch('downgradeToBlocksByKey', 'normal');\n\n      expect(controller.value.toJSON()).toEqual(expected.toJSON());\n    });\n  });\n\n  describe('handlers', () => {\n    test('#onPaste: paste refblock', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Hello</block>\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', hostKey: 'doc-b', refblockUUID: 'abc' }}\n            >\n              <block type=\"paragraph\">Cangjie</block>\n            </block>\n            <block type=\"paragraph\">World</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const fragment = (\n        <document>\n          <block type=\"paragraph\">Hello</block>\n          <block type=\"refblock\" data={{ docKey: 'doc-a', hostKey: 'doc-b' }}>\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n          <block type=\"paragraph\">World</block>\n        </document>\n      ) as unknown as Document;\n\n      // 剪贴板写入 DocKey，则需要插入 refblock\n      const clipboardData = {\n        [MIME_TYPES.FRAGMENT]: encodeFragment(fragment),\n      };\n      const event = CangjieClipboardEvent('cangjiePaste', {\n        clipboardData: {\n          items: [\n            // @ts-ignore\n            { type: MIME_TYPES.FRAGMENT },\n          ],\n          types: [MIME_TYPES.FRAGMENT],\n          data: clipboardData,\n          getData: (format) => {\n            return clipboardData[format];\n          },\n        },\n      });\n\n      controller.run('onCangjiePaste', event);\n\n      // 等待引用关系生成\n      await waitForTime(50);\n      const { value } = controller;\n      // 检查引用块是否插入\n      expect(value.toJSON()).toEqual(expected.toJSON());\n      // 检查插入后是否加载中\n      const refblock = value.document.assertNodeByPath([1]);\n      expect(value.injections).toEqual([\n        Injection.create({\n          key: refblock.key,\n          data: {\n            status: RefBlockStatus.loading,\n          },\n        }),\n      ]);\n    });\n\n    test('#onPaste: ignore pasting if fragment is nil', async () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n      const controller = createController(value);\n\n      const clipboardData = {\n        [MIME_TYPES.FRAGMENT]: '',\n      };\n      const event = CangjieClipboardEvent('cangjiePaste', {\n        clipboardData: {\n          items: [\n            // @ts-ignore\n            { type: MIME_TYPES.FRAGMENT },\n          ],\n          types: [MIME_TYPES.FRAGMENT],\n          data: clipboardData,\n          getData: (format) => {\n            return clipboardData[format];\n          },\n        },\n      });\n\n      controller.run('onCangjiePaste', event);\n\n      // 等待引用关系生成\n      await waitForTime(50);\n      // 检查引用块是否插入\n      expect(value).toEqual(controller.value);\n    });\n\n    test('#onPaste: paste refblock, only contains a void block', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <text />\n            </block>\n            <block\n              type=\"refblock\"\n              data={{\n                docKey: 'doc-a',\n                hostKey: 'doc-b',\n                refblockUUID: 'abc',\n              }}\n            >\n              <block type=\"void\">\n                <text />\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const fragment = (\n        <document>\n          <block type=\"refblock\" data={{ docKey: 'doc-a', hostKey: 'doc-b' }}>\n            <block type=\"void\">\n              <text />\n            </block>\n          </block>\n        </document>\n      ) as unknown as Document;\n\n      // 剪贴板写入 DocKey，则需要插入 refblock\n      const clipboardData = {\n        [MIME_TYPES.FRAGMENT]: encodeFragment(fragment),\n      };\n      const event = CangjieClipboardEvent('cangjiePaste', {\n        clipboardData: {\n          items: [\n            // @ts-ignore\n            { type: MIME_TYPES.FRAGMENT },\n          ],\n          types: [MIME_TYPES.FRAGMENT],\n          data: clipboardData,\n          getData: (format) => {\n            return clipboardData[format];\n          },\n        },\n      });\n\n      controller.run('onCangjiePaste', event);\n\n      // 等待引用关系生成\n      await waitForTime(50);\n      const { value } = controller;\n      // 检查引用块是否插入\n      expect(value.toJSON()).toEqual(expected.toJSON());\n      // 检查插入后是否加载中\n      const refblock = value.document.assertNodeByPath([1]);\n      expect(value.injections).toEqual([\n        Injection.create({\n          key: refblock.key,\n          data: {\n            status: RefBlockStatus.loading,\n          },\n        }),\n      ]);\n    });\n\n    test('#onPaste: paste multiple refblocks', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Hello</block>\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'abc' }}\n            >\n              <block type=\"paragraph\">Cangjie</block>\n            </block>\n            <block\n              type=\"refblock\"\n              data={{\n                docKey: 'doc-c',\n                hostDocKey: 'doc-b',\n                refblockUUID: 'abc',\n              }}\n            >\n              <block type=\"paragraph\">Slate</block>\n            </block>\n            <block type=\"paragraph\">World</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const fragment = (\n        <document>\n          <block type=\"paragraph\">Hello</block>\n          <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n          <block\n            type=\"refblock\"\n            data={{ docKey: 'doc-c', hostDocKey: 'doc-b' }}\n          >\n            <block type=\"paragraph\">Slate</block>\n          </block>\n          <block type=\"paragraph\">World</block>\n        </document>\n      ) as unknown as Document;\n\n      // 剪贴板写入 DocKey，则需要插入 refblock\n      const clipboardData = {\n        [MIME_TYPES.FRAGMENT]: encodeFragment(fragment),\n      };\n      const event = CangjieClipboardEvent('cangjiePaste', {\n        clipboardData: {\n          items: [\n            // @ts-ignore\n            { type: MIME_TYPES.FRAGMENT },\n          ],\n          types: [MIME_TYPES.FRAGMENT],\n          data: clipboardData,\n          getData: (format) => {\n            return clipboardData[format];\n          },\n        },\n      });\n\n      controller.run('onCangjiePaste', event);\n\n      await waitForTime(10);\n      const { value } = controller;\n      // 检查引用块是否插入\n      expect(value.toJSON()).toEqual(expected.toJSON());\n      // 检查插入后是否加载中\n      const docA = value.document.assertNodeByPath([1]);\n      const docC = value.document.assertNodeByPath([2]);\n      expect(value.injections).toEqual([\n        Injection.create({\n          key: docA.key,\n          data: {\n            status: RefBlockStatus.loading,\n          },\n        }),\n        Injection.create({\n          key: docC.key,\n          data: {\n            status: RefBlockStatus.loading,\n          },\n        }),\n      ]);\n    });\n\n    test('#onPaste: paste refblocks, customized pakcage cacher', async () => {\n      const getHetuWhenPaste = jest.fn();\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          // @ts-ignore\n          refblock: {\n            getHetuWhenPaste,\n          },\n        },\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Hello</block>\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'abc' }}\n            >\n              <block type=\"paragraph\">Cangjie</block>\n            </block>\n            <block\n              type=\"refblock\"\n              data={{\n                docKey: 'doc-c',\n                hostDocKey: 'doc-b',\n                refblockUUID: 'abc',\n              }}\n            >\n              <block type=\"paragraph\">Slate</block>\n            </block>\n            <block type=\"paragraph\">World</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const fragment = (\n        <document>\n          <block type=\"paragraph\">Hello</block>\n          <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n          <block\n            type=\"refblock\"\n            data={{ docKey: 'doc-c', hostDocKey: 'doc-b' }}\n          >\n            <block type=\"paragraph\">Slate</block>\n          </block>\n          <block type=\"paragraph\">World</block>\n        </document>\n      ) as unknown as Document;\n\n      // 剪贴板写入 DocKey，则需要插入 refblock\n      const clipboardData = {\n        [MIME_TYPES.FRAGMENT]: encodeFragment(fragment),\n        [MIME_TYPES.REFBLOCK]: 'package',\n      };\n      const event = CangjieClipboardEvent('cangjiePaste', {\n        clipboardData: {\n          items: [\n            // @ts-ignore\n            { type: MIME_TYPES.FRAGMENT },\n            // @ts-ignore\n            { type: MIME_TYPES.REFBLOCK },\n          ],\n          types: [MIME_TYPES.FRAGMENT, MIME_TYPES.REFBLOCK],\n          data: clipboardData,\n          getData: (format) => {\n            return clipboardData[format];\n          },\n        },\n      });\n\n      controller.run('onCangjiePaste', event);\n\n      await waitForTime(10);\n      const { value } = controller;\n      // 检查引用块是否插入\n      expect(value.toJSON()).toEqual(expected.toJSON());\n      // 检查插入后是否加载中\n      const docA = value.document.assertNodeByPath([1]);\n      const docC = value.document.assertNodeByPath([2]);\n      expect(value.injections).toEqual([\n        Injection.create({\n          key: docA.key,\n          data: {\n            status: RefBlockStatus.loading,\n          },\n        }),\n        Injection.create({\n          key: docC.key,\n          data: {\n            status: RefBlockStatus.loading,\n          },\n        }),\n      ]);\n      expect(getHetuWhenPaste).toBeCalledWith('package');\n      expect(getHetuWhenPaste).toBeCalledTimes(1);\n    });\n\n    test('#onPaste: remove refblock which generate copy failed', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          // @ts-ignore\n          refblock: {\n            generateCopyDoc: (docKey) => {\n              if (docKey === 'doc-c') {\n                return Promise.reject();\n              } else {\n                return Promise.resolve({\n                  docKey,\n                  uuid: 'abc',\n                });\n              }\n            },\n          },\n        },\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Hello</block>\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'abc' }}\n            >\n              <block type=\"paragraph\">Cangjie</block>\n            </block>\n            <block type=\"paragraph\">World</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const fragment = (\n        <document>\n          <block type=\"paragraph\">Hello</block>\n          <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n          <block\n            type=\"refblock\"\n            data={{ docKey: 'doc-c', hostDocKey: 'doc-b' }}\n          >\n            <block type=\"paragraph\">Slate</block>\n          </block>\n          <block type=\"paragraph\">World</block>\n        </document>\n      ) as unknown as Document;\n\n      const clipboardData = {\n        [MIME_TYPES.FRAGMENT]: encodeFragment(fragment),\n      };\n      const event = CangjieClipboardEvent('cangjiePaste', {\n        clipboardData: {\n          items: [\n            // @ts-ignore\n            { type: MIME_TYPES.FRAGMENT },\n          ],\n          types: [MIME_TYPES.FRAGMENT],\n          data: clipboardData,\n          getData: (format) => {\n            return clipboardData[format];\n          },\n        },\n      });\n\n      controller.run('onCangjiePaste', event);\n\n      await waitForTime(10);\n      const { value } = controller;\n      // 检查引用块是否插入\n      expect(value.toJSON()).toEqual(expected.toJSON());\n    });\n\n    test('#onPaste: without refblock', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                Hello\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">HelloWorld</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const fragment = (\n        <document>\n          <block type=\"paragraph\">World</block>\n        </document>\n      ) as unknown as Document;\n\n      const encodedFragment = encodeFragment(fragment);\n      // 剪贴板内也是 fragment\n      const clipboardData = {\n        [MIME_TYPES.FRAGMENT]: encodedFragment,\n      };\n\n      const event = CangjieClipboardEvent('cangjiePaste', {\n        clipboardData: {\n          // @ts-ignore\n          items: [{ type: MIME_TYPES.FRAGMENT }],\n          types: [MIME_TYPES.FRAGMENT],\n          data: clipboardData,\n          getData: (format) => {\n            return clipboardData[format];\n          },\n        },\n      });\n\n      controller.run('onCangjiePaste', event);\n      await waitForTime(10);\n      const { value } = controller;\n\n      expect(value.toJSON()).toEqual(expected.toJSON());\n    });\n\n    test('#onPaste: remove nested refblocks & hetu sync nodes & invalid nodes', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\">\n                  Hello\n                  <cursor />\n                </block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          // @ts-ignore\n          refblock: {\n            disableNestedInRefBlock: (node) =>\n              Block.isBlock(node) && node.text === 'not-supported',\n          },\n        },\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n              <block type=\"paragraph\">HelloWorld</block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const fragment = (\n        <document>\n          <block type=\"refblock\" data={{ docKey: 'doc-b' }}>\n            <block type=\"paragraph\">Nested RefBlock</block>\n          </block>\n          <block\n            type=\"card\"\n            data={{\n              cardType: 'calendar',\n              height: 300,\n              metadata: { sync: true },\n            }}\n          />\n          <block type=\"paragraph\">not-supported</block>\n          <block type=\"paragraph\">World</block>\n        </document>\n      ) as unknown as Document;\n\n      // 剪贴板内也是 fragment\n      const clipboardData = {\n        [MIME_TYPES.FRAGMENT]: encodeFragment(fragment),\n      };\n\n      const event = CangjieClipboardEvent('cangjiePaste', {\n        clipboardData: {\n          // @ts-ignore\n          items: [{ type: MIME_TYPES.FRAGMENT }],\n          types: [MIME_TYPES.FRAGMENT],\n          data: clipboardData,\n          getData: (format) => {\n            return clipboardData[format];\n          },\n        },\n      });\n\n      controller.run('onCangjiePaste', event);\n      await waitForTime(10);\n      const { value } = controller;\n\n      expect(value.toJSON()).toEqual(expected.toJSON());\n    });\n\n    test('#onPaste: without fragment', async () => {\n      const onCangjiePaste = jest.fn();\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                <text />\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          pasteTester: {\n            onCangjiePaste,\n          },\n        },\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              hello-world\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      // 剪贴板未写入 Fragment\n      const clipboardData = {\n        [MIME_TYPES.TEXT]: 'hello-world',\n      };\n      const event = CangjieClipboardEvent('cangjiePaste', {\n        clipboardData: {\n          // @ts-ignore\n          items: [{ type: MIME_TYPES.TEXT }],\n          types: [MIME_TYPES.TEXT],\n          data: clipboardData,\n          getData: (format) => {\n            return clipboardData[format];\n          },\n        },\n      });\n\n      controller.run('onCangjiePaste', event);\n      await waitForTime(10);\n      const { value } = controller;\n\n      expect(value.toJSON()).toEqual(expected.toJSON());\n      const nextEvent: CangjieClipboardEvent = onCangjiePaste.mock.calls[0][0];\n      // 不产生 fragment mimetype\n      expect(nextEvent.clipboardData?.types).toEqual([MIME_TYPES.TEXT]);\n    });\n\n    test('#onAction: COPY_AS_REFBLOCK, blocks in current selection', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                <anchor />\n                Hello\n              </block>\n              <block type=\"paragraph\">\n                World\n                <focus />\n              </block>\n              <block type=\"paragraph\">Cangjie</block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          clipboard: {\n            serializer: {\n              valueToJsonML: () => ['root', {}, []],\n              jsonMLToHTML: () => '<p></p>',\n            },\n          },\n          refblock: {\n            getRefBlockURL: (id) => `https://dingtalk.com?id=${id}`,\n          },\n        },\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'doc-a', uuid: 'doc-a' }}\n            >\n              <block type=\"paragraph\">Hello</block>\n              <block type=\"paragraph\">World</block>\n            </block>\n            <block type=\"paragraph\">Cangjie</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.dispatch('copyAsRefBlock', []);\n\n      // wait for created\n      await waitForTime(10);\n\n      const { value } = controller;\n      // 检查 refblock 是否生成\n      expect(controller.value.toJSON()).toEqual(expected.toJSON());\n      const refblock = value.document.assertNodeByPath([0]);\n      // 检查 refblock 是否为加载态\n      expect(value.injections).toEqual([\n        Injection.create({\n          key: refblock.key,\n          data: {\n            status: RefBlockStatus.loading,\n          },\n        }),\n      ]);\n      // 检查剪贴板是否写入信息\n      expect(mockedClipboard).toEqual({\n        [MIME_TYPES.FRAGMENT]: expect.anything(),\n        [MIME_TYPES.HTML]: expect.anything(),\n        [MIME_TYPES.REFBLOCK]: expect.anything(),\n        // text 写入源文档地址\n        [MIME_TYPES.TEXT]: 'https://dingtalk.com?id=doc-a',\n      });\n    });\n\n    test('#onAction: COPY_AS_REFBLOCK with fragment decorator', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                <anchor />\n                Hello\n              </block>\n              <block type=\"paragraph\">\n                World\n                <focus />\n              </block>\n              <block type=\"paragraph\">Cangjie</block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          clipboard: {\n            serializer: {\n              valueToJsonML: () => ['root', {}, []],\n              jsonMLToHTML: () => '<p></p>',\n            },\n          },\n          refblock: {\n            decorateRefBlockFragment: (fragment) =>\n              fragment.set('nodes', fragment.nodes.slice(0, 1)),\n          },\n        },\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'doc-a', uuid: 'doc-a' }}\n            >\n              <block type=\"paragraph\">Hello</block>\n            </block>\n            <block type=\"paragraph\">World</block>\n            <block type=\"paragraph\">Cangjie</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.dispatch('copyAsRefBlock', []);\n\n      // wait for created\n      await waitForTime(10);\n\n      const { value } = controller;\n      // 检查 refblock 是否生成\n      expect(controller.value.toJSON()).toEqual(expected.toJSON());\n      const refblock = value.document.assertNodeByPath([0]);\n      // 检查 refblock 是否为加载态\n      expect(value.injections).toEqual([\n        Injection.create({\n          key: refblock.key,\n          data: {\n            status: RefBlockStatus.loading,\n          },\n        }),\n      ]);\n      // 检查剪贴板是否写入信息\n      expect(mockedClipboard).toEqual({\n        [MIME_TYPES.FRAGMENT]: expect.anything(),\n        [MIME_TYPES.HTML]: expect.anything(),\n        [MIME_TYPES.REFBLOCK]: expect.anything(),\n        [MIME_TYPES.TEXT]: expect.anything(),\n      });\n    });\n\n    test('#onAction: COPY_AS_REFBLOCK: failed', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                <anchor />\n                Hello\n              </block>\n              <block type=\"paragraph\">\n                World\n                <focus />\n              </block>\n              <block type=\"paragraph\">Cangjie</block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          clipboard: {\n            serializer: {\n              valueToJsonML: () => ['root', {}, []],\n              jsonMLToHTML: () => '<p></p>',\n            },\n          },\n          refblock: {\n            generateDoc: () => Promise.reject(),\n          },\n        },\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor />\n              Hello\n            </block>\n            <block type=\"paragraph\">\n              World\n              <focus />\n            </block>\n            <block type=\"paragraph\">Cangjie</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.dispatch('copyAsRefBlock', []);\n\n      // wait for created\n      await waitForTime(10);\n\n      // 内容应当无变化\n      expect(controller.value.toJSON()).toEqual(expected.toJSON());\n      // 出错时，剪贴板不写入信息\n      expect(mockedClipboard).toEqual({});\n    });\n\n    test('#onAction: COPY_AS_REFBLOCK, prefer block in action payload', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                <anchor />\n                Hello\n                <focus />\n              </block>\n              <block type=\"paragraph\">World</block>\n              <block type=\"paragraph\">Cangjie</block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          clipboard: {\n            serializer: {\n              valueToJsonML: () => ['root', {}, []],\n              jsonMLToHTML: () => '<p></p>',\n            },\n          },\n        },\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Hello</block>\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'doc-a', uuid: 'doc-a' }}\n            >\n              <block type=\"paragraph\">World</block>\n            </block>\n            <block type=\"paragraph\">Cangjie</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const block = controller.value.document.assertNodeByPath([1]) as Block;\n      controller.dispatch('copyAsRefBlock', [block]);\n\n      // wait for created\n      await waitForTime(10);\n\n      // 检查 refblock 是否生成\n      expect(controller.value.toJSON()).toEqual(expected.toJSON());\n    });\n\n    test('#onAction: COPY_AS_REFBLOCK, current block in payload changed', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">Hello</block>\n              <block type=\"paragraph\">World</block>\n              <block type=\"paragraph\">Cangjie</block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          clipboard: {\n            // @ts-ignore\n            serializer: {\n              valueToJsonML: () => ['root', {}, []],\n              jsonMLToHTML: () => '<p></p>',\n            },\n          },\n        },\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Hello</block>\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'doc-a', uuid: 'doc-a' }}\n            >\n              <block type=\"paragraph\">World!</block>\n            </block>\n            <block type=\"paragraph\">Cangjie</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const srcBlock = controller.value.document.assertNodeByPath([1]) as Block;\n      // refresh block\n      controller.command(Commands.insertTextByPath, [1, 0], 5, '!', []).flush();\n\n      controller.dispatch('copyAsRefBlock', [srcBlock]);\n      // wait for created\n      await waitForTime(10);\n\n      // 检查 refblock 是否生成\n      expect(controller.value.toJSON()).toEqual(expected.toJSON());\n    });\n\n    test('#onAction: COPY_REFBLOCK', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\">Hello</block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          clipboard: {\n            // @ts-ignore\n            serializer: {\n              valueToJsonML: () => ['root', {}, []],\n              jsonMLToHTML: () => '<p></p>',\n            },\n          },\n        },\n      );\n\n      const refblock = controller.value.document.getNodeByPath([\n        0,\n      ])! as RefBlock;\n      controller.dispatch('copyRefBlock', refblock);\n\n      // 检查剪贴板内容\n      expect(mockedClipboard).toEqual({\n        [MIME_TYPES.FRAGMENT]: expect.anything(),\n        [MIME_TYPES.HTML]: expect.anything(),\n        [MIME_TYPES.REFBLOCK]: expect.anything(),\n        [MIME_TYPES.TEXT]: expect.anything(),\n      });\n    });\n\n    test('#onAction: COPY_REFBLOCK, customize package serializer', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\">Hello</block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n        {\n          clipboard: {\n            // @ts-ignore\n            serializer: {\n              valueToJsonML: () => ['root', {}, []],\n              jsonMLToHTML: () => '<p></p>',\n            },\n          },\n          refblock: {\n            cacheHetuWhenCopy: () => 'package',\n          },\n        },\n      );\n\n      const refblock = controller.value.document.getNodeByPath([\n        0,\n      ])! as RefBlock;\n      controller.dispatch('copyRefBlock', refblock);\n\n      // 检查剪贴板内容\n      expect(mockedClipboard).toEqual({\n        [MIME_TYPES.FRAGMENT]: expect.anything(),\n        [MIME_TYPES.HTML]: expect.anything(),\n        [MIME_TYPES.REFBLOCK]: 'package',\n        [MIME_TYPES.TEXT]: expect.anything(),\n      });\n    });\n\n    test('#onAction: UPDATE_REFBLOCK_DATA', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"refblock\" data={{ docKey: 'a' }}>\n                <block type=\"paragraph\">\n                  <text />\n                </block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'a', refblockUUID: 'a' }}>\n              <block type=\"paragraph\">\n                <text />\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const refblock = controller.value.document.getNodeByPath([\n        0,\n      ])! as RefBlock;\n      controller.dispatch('updateRefBlockData', refblock, {\n        refblockUUID: 'a',\n      });\n      expect(controller.value.toJSON()).toEqual(expected.toJSON());\n    });\n\n    test('#onKeyDown: select all inside a refblock', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"refblock\" data={{ docKey: 'a' }}>\n                <block type=\"paragraph\">\n                  Hel\n                  <anchor />\n                  lo\n                </block>\n                <block type=\"paragraph\">\n                  Worl\n                  <focus />d\n                </block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'a' }}>\n              <block type=\"paragraph\">\n                <anchor />\n                Hello\n              </block>\n              <block type=\"paragraph\">\n                World\n                <focus />\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.run(\n        'onKeyDown',\n        new KeyboardEvent(\n          'keydown',\n          getHotkeyEvent('mod+a'),\n        ) as unknown as React.KeyboardEvent,\n      );\n      controller.flush();\n\n      expect(\n        controller.value.toJSON({\n          preserveSelections: true,\n        }),\n      ).toEqual(expected.toJSON({ preserveSelections: true }));\n    });\n\n    test('#onKeyDown: select all when start inside a refblock', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"refblock\" data={{ docKey: 'a' }}>\n                <block type=\"paragraph\">\n                  Hel\n                  <anchor />\n                  lo\n                </block>\n              </block>\n              <block type=\"paragraph\">\n                Worl\n                <focus />d\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'a' }}>\n              <block type=\"paragraph\">\n                <anchor />\n                Hello\n                <focus />\n              </block>\n            </block>\n            <block type=\"paragraph\">World</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.run(\n        'onKeyDown',\n        new KeyboardEvent(\n          'keydown',\n          getHotkeyEvent('mod+a'),\n        ) as unknown as React.KeyboardEvent,\n      );\n      controller.flush();\n\n      expect(\n        controller.value.toJSON({\n          preserveSelections: true,\n        }),\n      ).toEqual(expected.toJSON({ preserveSelections: true }));\n    });\n\n    test('#onKeyDown: select all when end inside a refblock', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                Hell\n                <anchor />o\n              </block>\n              <block type=\"refblock\" data={{ docKey: 'a' }}>\n                <block type=\"paragraph\">\n                  Wor\n                  <focus />\n                  ld\n                </block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Hello</block>\n            <block type=\"refblock\" data={{ docKey: 'a' }}>\n              <block type=\"paragraph\">\n                <anchor />\n                World\n                <focus />\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.run(\n        'onKeyDown',\n        new KeyboardEvent(\n          'keydown',\n          getHotkeyEvent('mod+a'),\n        ) as unknown as React.KeyboardEvent,\n      );\n      controller.flush();\n\n      expect(\n        controller.value.toJSON({\n          preserveSelections: true,\n        }),\n      ).toEqual(expected.toJSON({ preserveSelections: true }));\n    });\n\n    test('#onKeyDown: select all inside a selectall-able element which is inside a refblock', async () => {\n      const controller = createController(\n        (\n          <value>\n            <document>\n              <block type=\"refblock\" data={{ docKey: 'a' }}>\n                <block type=\"code\">\n                  Wor\n                  <cursor />\n                  ld\n                </block>\n              </block>\n            </document>\n          </value>\n        ) as unknown as Value,\n      );\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'a' }}>\n              <block type=\"code\">\n                Wor\n                <cursor />\n                ld\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      controller.run(\n        'onKeyDown',\n        new KeyboardEvent(\n          'keydown',\n          getHotkeyEvent('mod+a'),\n        ) as unknown as React.KeyboardEvent,\n      );\n      controller.flush();\n\n      expect(\n        controller.value.toJSON({\n          preserveSelections: true,\n        }),\n      ).toEqual(expected.toJSON({ preserveSelections: true }));\n    });\n\n    test('#onKeyDown: skip if key event is not select-all', async () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              Hel\n              <anchor />\n              lo\n            </block>\n            <block type=\"paragraph\">\n              Worl\n              <focus />d\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const controller = createController(value);\n\n      controller.run(\n        'onKeyDown',\n        new KeyboardEvent(\n          'keydown',\n          getHotkeyEvent('mod+o'),\n        ) as unknown as React.KeyboardEvent,\n      );\n      controller.flush();\n\n      expect(controller.value).toBe(value);\n    });\n  });\n});\n"],"file":"behavior.test.js"}