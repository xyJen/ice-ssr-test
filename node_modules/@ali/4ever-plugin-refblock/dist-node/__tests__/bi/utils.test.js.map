{"version":3,"sources":["../../../../src/__tests__/bi/utils.test.tsx"],"names":["describe","test","document","expect","toEqual","docKey","refblockUUID","nodeKey","getNodeByPath","key","uuid","value","docA","expected","refblock","assertNodeByPath","newDocument","toJSON","toThrow","node","toBe","setSelection","status","RefBlockStatus","readOnly","normal","block","copy","jest","fn","menu","locale","copyAsRefBlock","disableNodeInRefBlock","RefBlock","isRefBlock","onCopyAsRefBlock","noop","onCopyRefBlock","type","TYPE_MENU_ITEM","title","role","RefBlockRole","icon","anything","menuExtraKey","onClick","toBeCalledWith","fragment","needCCP"],"mappings":";;;;AACA;;AAEA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AAKA;;AACA;;AAlBA;WAwBQ,wCACE;AAAO,EAAA,IAAI,EAAC;AAAZ,WADF,EAEE;AAAO,EAAA,IAAI,EAAC;AAAZ,aAFF,C;;YAYE;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;YACA;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;YAKE;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;YAMA;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;YAgBF;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;YACA;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;YAEE;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;YAGA;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;aAcF;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAMI;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;aAIF;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;aAkBE;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,mCADF,C;;aASN,wCACE;AAAO,EAAA,IAAI,EAAC;AAAZ,WADF,EAEE;AAAO,EAAA,IAAI,EAAC;AAAZ,aAFF,C;;aAUM;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aACA;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;aAqBN,wCACE;AAAO,EAAA,IAAI,EAAC;AAAZ,WADF,EAEE;AAAO,EAAA,IAAI,EAAC;AAAZ,aAFF,C;;aAWA,qCACE,wCACE;AAAO,EAAA,IAAI,EAAC;AAAZ,WADF,CADF,C;;aAQA,wCACE;AAAO,EAAA,IAAI,EAAC;AAAZ,WADF,EAEE;AAAO,EAAA,IAAI,EAAC;AAAZ,aAFF,C;;aAkBM;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,mCADF,C;;aAKA;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,mCADF,C;;aASN,wCACE;AAAO,EAAA,IAAI,EAAC;AAAZ,WADF,EAEE;AAAO,EAAA,IAAI,EAAC;AAAZ,aAFF,C;;aAUM;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aACA;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;aAGA;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aACA;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;aAiBA;AAAO,EAAA,IAAI,EAAC;AAAZ,YAEE,qCAFF,C;;aAIA;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAcA;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,qCADF,U;;aAKF;AAAO,EAAA,IAAI,EAAC;AAAZ,YAEE,oCAFF,C;;aAeA;AAAO,EAAA,IAAI,EAAC;AAAZ,YAEE,qCAFF,C;;aAKE;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,oCADF,U;;aAcN,qCACE,wCACE;AAAO,EAAA,IAAI,EAAC;AAAZ,WADF,CADF,C;;aAmBM;AAAO,EAAA,IAAI,EAAC,OAAZ;AAAoB,EAAA,MAAM,EAAC;AAA3B,E;;aAiBE;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,oCADF,U;;aAoBA;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,oCADF,U;;aAgBR,qCACE,wCACE;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE;AAAO,EAAA,IAAI,EAAC;AAAZ,WADF,CADF,CADF,C;;aAoBM;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAeA;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAEF;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAgBE;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAoCA;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,qCADF,U;;aAKF;AAAO,EAAA,IAAI,EAAC;AAAZ,YAEE,oCAFF,C;;aAwCE;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,qCADF,U;;aAKF;AAAO,EAAA,IAAI,EAAC;AAAZ,YAEE,oCAFF,C;;aAyBA;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,qCADF,U;;aAKE;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAEF;AAAO,EAAA,IAAI,EAAC;AAAZ,YAEE,oCAFF,C;;aAyBA;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,qCADF,WAGE,oCAHF,C;;aAOI;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAyBF;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAEF;AAAO,EAAA,IAAI,EAAC;AAAZ,YAEE,qCAFF,C;;aAuCA;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAMA;AAAO,EAAA,IAAI,EAAC;AAAZ,U;;aAEF;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;aAOE;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,mCADF,C;;aAKA;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,mCADF,C;;aAIF;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;aAgBE;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAMA;AAAO,EAAA,IAAI,EAAC;AAAZ,W;;aAEF;AAAO,EAAA,IAAI,EAAC;AAAZ,a;;aAKF,wCACE;AAAO,EAAA,IAAI,EAAC;AAAZ,WADF,EAEE;AAAO,EAAA,IAAI,EAAC;AAAZ,WAFF,EAGE;AAAO,EAAA,IAAI,EAAC;AAAZ,aAHF,C;;AA3pBRA,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCA,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCC,IAAAA,IAAI,CAAC,cAAD,EAAiB,MAAM;AACzB,YAAMC,QAAQ,OAAd;AAOAC,MAAAA,MAAM,CAAC,2BAAeD,QAAf,CAAD,CAAN,CAAiCE,OAAjC,CAAyC,EAAzC;AACD,KATG,CAAJ;AAWAH,IAAAA,IAAI,CAAC,yBAAD,EAA4B,MAAM;AACpC,YAAMC,QAAQ,GACZ,sDAGE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAE;AAAEG,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,YAAY,EAAE;AAAjC;AAFR,eAHF,EASE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAE;AAAED,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,YAAY,EAAE;AAAjC;AAFR,eATF,CADF;AAmBAH,MAAAA,MAAM,CAAC,2BAAeD,QAAf,CAAD,CAAN,CAAiCE,OAAjC,CAAyC;AACvC,iBAAS,CACP;AAAEG,UAAAA,OAAO,EAAEL,QAAQ,CAACM,aAAT,CAAuB,CAAC,CAAD,CAAvB,EAA6BC,GAAxC;AAA6CC,UAAAA,IAAI,EAAE;AAAnD,SADO,EAEP;AAAEH,UAAAA,OAAO,EAAEL,QAAQ,CAACM,aAAT,CAAuB,CAAC,CAAD,CAAvB,EAA6BC,GAAxC;AAA6CC,UAAAA,IAAI,EAAE;AAAnD,SAFO;AAD8B,OAAzC;AAMD,KA1BG,CAAJ;AA4BAT,IAAAA,IAAI,CAAC,8BAAD,EAAiC,MAAM;AACzC,YAAMC,QAAQ,GACZ,sDAGE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEG,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,YAAY,EAAE;AAAjC;AAA7B,eAHF,EAME;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAED,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,YAAY,EAAE;AAAjC;AAA7B,eANF,CADF;AAaAH,MAAAA,MAAM,CAAC,2BAAeD,QAAf,CAAD,CAAN,CAAiCE,OAAjC,CAAyC;AACvC,iBAAS,CAAC;AAAEG,UAAAA,OAAO,EAAEL,QAAQ,CAACM,aAAT,CAAuB,CAAC,CAAD,CAAvB,EAA6BC,GAAxC;AAA6CC,UAAAA,IAAI,EAAE;AAAnD,SAAD,CAD8B;AAEvC,iBAAS,CAAC;AAAEH,UAAAA,OAAO,EAAEL,QAAQ,CAACM,aAAT,CAAuB,CAAC,CAAD,CAAvB,EAA6BC,GAAxC;AAA6CC,UAAAA,IAAI,EAAE;AAAnD,SAAD;AAF8B,OAAzC;AAID,KAlBG,CAAJ;AAoBAT,IAAAA,IAAI,CAAC,2BAAD,EAA8B,MAAM;AACtC,YAAMC,QAAQ,GACZ,gDAEE;AAAO,QAAA,IAAI,EAAC;AAAZ,SACE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAE;AAAEG,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,YAAY,EAAE;AAAjC;AAFR,gBADF,CAFF,EAUE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAED,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,YAAY,EAAE;AAAjC;AAA7B,gBAVF,CADF;AAiBAH,MAAAA,MAAM,CAAC,2BAAeD,QAAf,CAAD,CAAN,CAAiCE,OAAjC,CAAyC;AACvC,iBAAS,CAAC;AAAEG,UAAAA,OAAO,EAAEL,QAAQ,CAACM,aAAT,CAAuB,CAAC,CAAD,EAAI,CAAJ,CAAvB,EAAgCC,GAA3C;AAAgDC,UAAAA,IAAI,EAAE;AAAtD,SAAD,CAD8B;AAEvC,iBAAS,CAAC;AAAEH,UAAAA,OAAO,EAAEL,QAAQ,CAACM,aAAT,CAAuB,CAAC,CAAD,CAAvB,EAA6BC,GAAxC;AAA6CC,UAAAA,IAAI,EAAE;AAAnD,SAAD;AAF8B,OAAzC;AAID,KAtBG,CAAJ;AAuBD,GAnFO,CAAR;AAqFAV,EAAAA,QAAQ,CAAC,uBAAD,EAA0B,MAAM;AACtCC,IAAAA,IAAI,CAAC,0BAAD,EAA6B,MAAM;AACrC,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,CADF,CADF;AAYA,YAAMO,IAAI,SAAV;AAOA,YAAMC,QAAQ,GACZ,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAER,UAAAA,MAAM,EAAE;AAAV;AAA7B,wBADF,CADF,CADF;AAWA,YAAMS,QAAQ,GAAGH,KAAK,CAACT,QAAN,CAAea,gBAAf,CAAgC,CAAC,CAAD,CAAhC,CAAjB;AACA,YAAMC,WAAW,GAAG,iCAAqBL,KAArB,EAA4BG,QAAQ,CAACL,GAArC,EAA0CG,IAA1C,CAApB;AACAT,MAAAA,MAAM,CAACa,WAAW,CAACC,MAAZ,EAAD,CAAN,CAA6Bb,OAA7B,CAAqCS,QAAQ,CAACI,MAAT,EAArC;AACD,KAlCG,CAAJ;AAoCAhB,IAAAA,IAAI,CAAC,mCAAD,EAAsC,MAAM;AAC9C,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,QADF,CADF,CADF;AAQA,YAAMO,IAAI,SAAV;AAOAT,MAAAA,MAAM,CAAC,MAAM,iCAAqBQ,KAArB,EAA4B,aAA5B,EAA2CC,IAA3C,CAAP,CAAN,CAA+DM,OAA/D;AACD,KAjBG,CAAJ;AAmBAjB,IAAAA,IAAI,CAAC,uCAAD,EAA0C,MAAM;AAClD,YAAMU,KAAK,SAAX;AAQA,YAAMC,IAAI,SAAV;AAOA,YAAMO,IAAI,GAAGR,KAAK,CAACT,QAAN,CAAea,gBAAf,CAAgC,CAAC,CAAD,CAAhC,CAAb;AAEAZ,MAAAA,MAAM,CAAC,MAAM,iCAAqBQ,KAArB,EAA4BQ,IAAI,CAACV,GAAjC,EAAsCG,IAAtC,CAAP,CAAN,CAA0DM,OAA1D;AACD,KAnBG,CAAJ;AAoBD,GA5EO,CAAR;AA8EAlB,EAAAA,QAAQ,CAAC,0BAAD,EAA6B,MAAM;AACzCC,IAAAA,IAAI,CAAC,0BAAD,EAA6B,MAAM;AACrC,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,EAME;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEA,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBANF,CADF,CADF;AAiBA,YAAMO,IAAI,SAAV;AAOA,YAAMC,QAAQ,GACZ,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAER,UAAAA,MAAM,EAAE;AAAV;AAA7B,wBADF,EAKE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEA,UAAAA,MAAM,EAAE;AAAV;AAA7B,wBALF,CADF,CADF;AAeA,YAAMW,WAAW,GAAG,oCAAwBL,KAAxB,EAA+B,OAA/B,EAAwCC,IAAxC,CAApB;AACAT,MAAAA,MAAM,CAACa,WAAW,CAACC,MAAZ,EAAD,CAAN,CAA6Bb,OAA7B,CAAqCS,QAAQ,CAACI,MAAT,EAArC;AACD,KA1CG,CAAJ;AA2CD,GA5CO,CAAR;AA8CAjB,EAAAA,QAAQ,CAAC,wBAAD,EAA2B,MAAM;AACvCC,IAAAA,IAAI,CAAC,kCAAD,EAAqC,MAAM;AAC7C,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,wBADF,CADF,CADF;AAcAF,MAAAA,MAAM,CAAC,kCAAsBQ,KAAtB,CAAD,CAAN,CAAqCS,IAArC,CAA0C,IAA1C;AACD,KAhBG,CAAJ;AAkBAnB,IAAAA,IAAI,CAAC,6BAAD,EAAgC,MAAM;AACxC,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,SADF,CADF;AAiBAF,MAAAA,MAAM,CAAC,kCAAsBQ,KAAtB,CAAD,CAAN,CAAqCS,IAArC,CAA0C,IAA1C;AACD,KAnBG,CAAJ;AAqBAnB,IAAAA,IAAI,CAAC,2BAAD,EAA8B,MAAM;AACtC,YAAMU,KAAK,GACT,qCACE,gDAKE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBALF,CADF,CADF;AAiBAF,MAAAA,MAAM,CAAC,kCAAsBQ,KAAtB,CAAD,CAAN,CAAqCS,IAArC,CAA0C,IAA1C;AACD,KAnBG,CAAJ;AAqBAnB,IAAAA,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9B,YAAMU,KAAK,SAAX,CAD8B,CAS9B;;AACAR,MAAAA,MAAM,CAAC,kCAAsBQ,KAAK,CAACU,YAAN,CAAmB,IAAnB,CAAtB,CAAD,CAAN,CAAwDD,IAAxD,CAA6D,KAA7D;AACD,KAXG,CAAJ;AAaAnB,IAAAA,IAAI,CAAC,4BAAD,EAA+B,MAAM;AACvC,YAAMU,KAAK,GACT,qCACE,wCACE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,YAAY,EAAE;AAAjC;AAFR,gBADF,CADF,CADF;AAaAH,MAAAA,MAAM,CAAC,kCAAsBQ,KAAtB,CAAD,CAAN,CAAqCS,IAArC,CAA0C,IAA1C;AACD,KAfG,CAAJ;AAgBD,GA1FO,CAAR;AA4FApB,EAAAA,QAAQ,CAAC,2BAAD,EAA8B,MAAM;AAC1CC,IAAAA,IAAI,CAAC,2BAAD,EAA8B,MAAM;AACtC,YAAMU,KAAK,GACT,qCACE,wCACE;AAAW,QAAA,IAAI,EAAE;AAAEW,UAAAA,MAAM,EAAEC,uBAAeC;AAAzB;AAAjB,SACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEnB,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,CADF,CADF,CADF;AAeA,YAAMc,IAAI,GAAGR,KAAK,CAACT,QAAN,CAAea,gBAAf,CAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,CAAb;AACAZ,MAAAA,MAAM,CAAC,iCAAqBQ,KAArB,EAA4BQ,IAA5B,CAAD,CAAN,CAA0CC,IAA1C,CAA+C,IAA/C;AACD,KAlBG,CAAJ;AAoBAnB,IAAAA,IAAI,CAAC,+BAAD,EAAkC,MAAM;AAC1C,YAAMU,KAAK,GACT,qCACE,wCACE;AAAW,QAAA,IAAI,EAAE;AAAEW,UAAAA,MAAM,EAAEC,uBAAeE;AAAzB;AAAjB,SACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEpB,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,CADF,CADF,CADF;AAeA,YAAMc,IAAI,GAAGR,KAAK,CAACT,QAAN,CAAea,gBAAf,CAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,CAAb;AACAZ,MAAAA,MAAM,CAAC,iCAAqBQ,KAArB,EAA4BQ,IAA5B,CAAD,CAAN,CAA0CC,IAA1C,CAA+C,KAA/C;AACD,KAlBG,CAAJ;AAoBAnB,IAAAA,IAAI,CAAC,sBAAD,EAAyB,MAAM;AACjC,YAAMU,KAAK,SAAX;AAUA,YAAMQ,IAAI,GAAGR,KAAK,CAACT,QAAN,CAAea,gBAAf,CAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,CAAb;AACAZ,MAAAA,MAAM,CAAC,iCAAqBQ,KAArB,EAA4BQ,IAA5B,CAAD,CAAN,CAA0CC,IAA1C,CAA+C,KAA/C;AACD,KAbG,CAAJ;AAcD,GAvDO,CAAR;AAyDApB,EAAAA,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCC,IAAAA,IAAI,CAAC,wBAAD,EAA2B,MAAM;AACnC,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,CADF,CADF;AAUA,YAAMc,IAAI,GAAGR,KAAK,CAACT,QAAN,CAAea,gBAAf,CAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,CAAb;AACAZ,MAAAA,MAAM,CAAC,yBAAaQ,KAAb,EAAoBQ,IAApB,CAAD,CAAN,CAAkCC,IAAlC,CAAuC,IAAvC;AACD,KAbG,CAAJ;AAeAnB,IAAAA,IAAI,CAAC,4BAAD,EAA+B,MAAM;AACvC,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,SADF,CADF;AAWA,YAAMc,IAAI,GAAGR,KAAK,CAACT,QAAN,CAAea,gBAAf,CAAgC,CAAC,CAAD,CAAhC,CAAb;AACAZ,MAAAA,MAAM,CAAC,yBAAaQ,KAAb,EAAoBQ,IAApB,CAAD,CAAN,CAAkCC,IAAlC,CAAuC,KAAvC;AACD,KAdG,CAAJ;AAeD,GA/BO,CAAR;AAiCApB,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BC,IAAAA,IAAI,CAAC,0CAAD,EAA6C,MAAM;AACrD,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,CADF,CADF;AAUA,YAAMqB,KAAK,GAAGf,KAAK,CAACT,QAAN,CAAeM,aAAf,CAA6B,CAAC,CAAD,CAA7B,CAAd;AACA,YAAMmB,IAAI,GAAGC,IAAI,CAACC,EAAL,EAAb;AACA,YAAMC,IAAI,GAAG,yCAAyB;AACpCJ,QAAAA,KADoC;AAEpCf,QAAAA,KAFoC;AAGpCoB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,cAAc,EAAE;AAAlB,SAH4B;AAIpCC,QAAAA,qBAAqB,EAAGd,IAAD,IAAUe,gBAASC,UAAT,CAAoBhB,IAApB,CAJG;AAKpCiB,QAAAA,gBAAgB,EAAEC,YALkB;AAMpCC,QAAAA,cAAc,EAAEX;AANoB,OAAzB,CAAb;AAQAxB,MAAAA,MAAM,CAAC2B,IAAD,CAAN,CAAa1B,OAAb,CAAqB,CACnB;AACEmC,QAAAA,IAAI,EAAEC,6BADR;AAEEC,QAAAA,KAAK,EAAE,QAFT;AAGEC,QAAAA,IAAI,EAAEC,mBAHR;AAIEC,QAAAA,IAAI,EAAEzC,MAAM,CAAC0C,QAAP,EAJR;AAKEC,QAAAA,YAAY,EAAE,gBALhB;AAMEC,QAAAA,OAAO,EAAE5C,MAAM,CAAC0C,QAAP;AANX,OADmB,CAArB;AAWAf,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQiB,OAAR;AACA5C,MAAAA,MAAM,CAACwB,IAAD,CAAN,CAAaqB,cAAb,CAA4BtB,KAA5B;AACD,KAlCG,CAAJ;AAoCAzB,IAAAA,IAAI,CAAC,2DAAD,EAA8D,MAAM;AACtE,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,SADF,CADF;AAiBA,YAAMqB,KAAK,GAAGf,KAAK,CAACT,QAAN,CAAeM,aAAf,CAA6B,CAAC,CAAD,EAAI,CAAJ,CAA7B,CAAd;AACA,YAAMM,QAAQ,GAAGH,KAAK,CAACT,QAAN,CAAeM,aAAf,CAA6B,CAAC,CAAD,CAA7B,CAAjB;AAEA,YAAMmB,IAAI,GAAGC,IAAI,CAACC,EAAL,EAAb;AACA,YAAMC,IAAI,GAAG,yCAAyB;AACpCJ,QAAAA,KADoC;AAEpCf,QAAAA,KAFoC;AAGpCoB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,cAAc,EAAE;AAAlB,SAH4B;AAIpCC,QAAAA,qBAAqB,EAAGd,IAAD,IAAUe,gBAASC,UAAT,CAAoBhB,IAApB,CAJG;AAKpCiB,QAAAA,gBAAgB,EAAEC,YALkB;AAMpCC,QAAAA,cAAc,EAAEX;AANoB,OAAzB,CAAb;AAQAxB,MAAAA,MAAM,CAAC2B,IAAD,CAAN,CAAa1B,OAAb,CAAqB,CACnB;AACEmC,QAAAA,IAAI,EAAEC,6BADR;AAEEC,QAAAA,KAAK,EAAE,QAFT;AAGEC,QAAAA,IAAI,EAAEC,mBAHR;AAIEC,QAAAA,IAAI,EAAEzC,MAAM,CAAC0C,QAAP,EAJR;AAKEC,QAAAA,YAAY,EAAE,gBALhB;AAMEC,QAAAA,OAAO,EAAE5C,MAAM,CAAC0C,QAAP;AANX,OADmB,CAArB;AAWAf,MAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQiB,OAAR;AACA5C,MAAAA,MAAM,CAACwB,IAAD,CAAN,CAAaqB,cAAb,CAA4BlC,QAA5B;AACD,KA3CG,CAAJ;AA6CAb,IAAAA,IAAI,CAAC,uDAAD,EAA0D,MAAM;AAClE,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,SADF,CADF;AAiBA,YAAMqB,KAAK,GAAGf,KAAK,CAACT,QAAN,CAAeM,aAAf,CAA6B,CAAC,CAAD,CAA7B,CAAd;AACAL,MAAAA,MAAM,CACJ,yCAAyB;AACvBuB,QAAAA,KADuB;AAEvBf,QAAAA,KAFuB;AAGvBsB,QAAAA,qBAAqB,EAAGd,IAAD,IAAU,KAHV;AAIvBY,QAAAA,MAAM,EAAE;AAAEC,UAAAA,cAAc,EAAE;AAAlB,SAJe;AAKvBI,QAAAA,gBAAgB,EAAEC,YALK;AAMvBC,QAAAA,cAAc,EAAED;AANO,OAAzB,CADI,CAAN,CASEjC,OATF,CASU,EATV;AAUD,KA7BG,CAAJ;AA+BAH,IAAAA,IAAI,CAAC,gEAAD,EAAmE,MAAM;AAC3E,YAAMU,KAAK,GACT,qCACE,gDAKE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBALF,SADF,CADF;AAkBA,YAAMqB,KAAK,GAAGf,KAAK,CAACT,QAAN,CAAeM,aAAf,CAA6B,CAAC,CAAD,CAA7B,CAAd;AACAL,MAAAA,MAAM,CACJ,yCAAyB;AACvBuB,QAAAA,KADuB;AAEvBf,QAAAA,KAFuB;AAGvBoB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,cAAc,EAAE;AAAlB,SAHe;AAIvBC,QAAAA,qBAAqB,EAAGd,IAAD,IAAUe,gBAASC,UAAT,CAAoBhB,IAApB,CAJV;AAKvBiB,QAAAA,gBAAgB,EAAEC,YALK;AAMvBC,QAAAA,cAAc,EAAED;AANO,OAAzB,CADI,CAAN,CASEjC,OATF,CASU,EATV;AAUD,KA9BG,CAAJ;AAgCAH,IAAAA,IAAI,CAAC,uEAAD,EAA0E,MAAM;AAClF,YAAMU,KAAK,GACT,qCACE,gDAME;AAAO,QAAA,IAAI,EAAC;AAAZ,SACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,CANF,CADF,CADF;AAiBA,YAAMqB,KAAK,GAAGf,KAAK,CAACT,QAAN,CAAeM,aAAf,CAA6B,CAAC,CAAD,CAA7B,CAAd;AACAL,MAAAA,MAAM,CACJ,yCAAyB;AACvBuB,QAAAA,KADuB;AAEvBf,QAAAA,KAFuB;AAGvBoB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,cAAc,EAAE;AAAlB,SAHe;AAIvBC,QAAAA,qBAAqB,EAAGd,IAAD,IAAUe,gBAASC,UAAT,CAAoBhB,IAApB,CAJV;AAKvBiB,QAAAA,gBAAgB,EAAEC,YALK;AAMvBC,QAAAA,cAAc,EAAED;AANO,OAAzB,CADI,CAAN,CASEjC,OATF,CASU,EATV;AAUD,KA7BG,CAAJ;AA+BAH,IAAAA,IAAI,CAAC,oDAAD,EAAuD,MAAM;AAC/D,YAAMU,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEN,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,SADF,CADF;AAcA,YAAMqB,KAAK,GAAGf,KAAK,CAACT,QAAN,CAAeM,aAAf,CAA6B,CAAC,CAAD,CAA7B,CAAd;AACAL,MAAAA,MAAM,CACJ,yCAAyB;AACvBuB,QAAAA,KADuB;AAEvBf,QAAAA,KAFuB;AAGvBsB,QAAAA,qBAAqB,EAAE,MAAM,KAHN;AAIvBF,QAAAA,MAAM,EAAE;AAAEC,UAAAA,cAAc,EAAE;AAAlB,SAJe;AAKvBI,QAAAA,gBAAgB,EAAEC,YALK;AAMvBC,QAAAA,cAAc,EAAED;AANO,OAAzB,CADI,CAAN,CASEjC,OATF,CASU,CACR;AACEmC,QAAAA,IAAI,EAAEC,6BADR;AAEEC,QAAAA,KAAK,EAAE,QAFT;AAGEC,QAAAA,IAAI,EAAEC,mBAHR;AAIEC,QAAAA,IAAI,EAAEzC,MAAM,CAAC0C,QAAP,EAJR;AAKEC,QAAAA,YAAY,EAAE,gBALhB;AAMEC,QAAAA,OAAO,EAAEV;AANX,OADQ,CATV;AAmBD,KAnCG,CAAJ;AAoCD,GApNO,CAAR;AAsNArC,EAAAA,QAAQ,CAAC,KAAD,EAAQ,MAAM;AACpBC,IAAAA,IAAI,CAAC,yBAAD,EAA4B,MAAM;AACpC,YAAMgD,QAAQ,GACZ,wCACE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAE;AAAE5C,UAAAA,MAAM,EAAE,MAAV;AAAkBC,UAAAA,YAAY,EAAE;AAAhC;AAFR,gBADF,EAOE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAE;AAAED,UAAAA,MAAM,EAAE,KAAV;AAAiBC,UAAAA,YAAY,EAAE;AAA/B;AAFR,gBAPF,SADF;AAkBA,YAAMO,QAAQ,GACZ,wCACE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAER,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBADF,EAME;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAE;AAAEA,UAAAA,MAAM,EAAE;AAAV;AAA7B,gBANF,SADF;AAgBAF,MAAAA,MAAM,CAAC,iCAAuB8C,QAAvB,EAAiChC,MAAjC,EAAD,CAAN,CAAkDb,OAAlD,CACES,QAAQ,CAACI,MAAT,EADF;AAGD,KAtCG,CAAJ;AAwCAhB,IAAAA,IAAI,CAAC,iBAAD,EAAoB,MAAM;AAC5B,YAAMgD,QAAQ,GACZ,wCACE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAE;AAAE5C,UAAAA,MAAM,EAAE,MAAV;AAAkBC,UAAAA,YAAY,EAAE,IAAhC;AAAsC4C,UAAAA,OAAO,EAAE;AAA/C;AAFR,gBADF,EAOE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAE;AAAE7C,UAAAA,MAAM,EAAE,KAAV;AAAiBC,UAAAA,YAAY,EAAE;AAA/B;AAFR,gBAPF,SADF;AAkBA,YAAMO,QAAQ,SAAd;AAQAV,MAAAA,MAAM,CAAC,yBAAe8C,QAAf,EAAyBhC,MAAzB,EAAD,CAAN,CAA0Cb,OAA1C,CAAkDS,QAAQ,CAACI,MAAT,EAAlD;AACD,KA5BG,CAAJ;AA6BD,GAtEO,CAAR;AAuED,CArqBO,CAAR","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@ali/4ever-dev-test';\nimport { Document, Value, Block } from '@ali/4ever-cangjie';\nimport { noop } from 'lodash-es';\nimport { TYPE_MENU_ITEM } from '@ali/4ever-component';\nimport RefBlock, { RefBlockStatus } from '../../mo/models';\nimport {\n  isSelectionInRefBlock,\n  isInReadOnlyRefBlock,\n  isInRefBlock,\n} from '../../utils/logic';\nimport { cropRefBlockInFragment, unwrapRefBlock } from '../../bi/utils/ccp';\nimport {\n  getRefBlockMap,\n  refreshRefBlockByKey,\n  refreshRefBlockByDocKey,\n} from '../../utils/value';\nimport { getRefBlockDragMenuItems } from '../../utils/draggable';\nimport { RefBlockRole } from '../../utils/roles';\n\ndescribe('Bi/refblock/uitls', () => {\n  describe('#getRefBlockMap', () => {\n    test('no refblocks', () => {\n      const document = (\n        <document>\n          <block type=\"paragraph\">Intro</block>\n          <block type=\"paragraph\">Cangjie</block>\n        </document>\n      ) as unknown as Document;\n\n      expect(getRefBlockMap(document)).toEqual({});\n    });\n\n    test('contains same refblocks', () => {\n      const document = (\n        <document>\n          <block type=\"paragraph\">Intro</block>\n          <block type=\"paragraph\">Cangjie</block>\n          <block\n            type=\"refblock\"\n            data={{ docKey: 'doc-a', refblockUUID: 'a-0' }}\n          >\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n          <block\n            type=\"refblock\"\n            data={{ docKey: 'doc-a', refblockUUID: 'a-1' }}\n          >\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n        </document>\n      ) as unknown as Document;\n\n      expect(getRefBlockMap(document)).toEqual({\n        'doc-a': [\n          { nodeKey: document.getNodeByPath([2])!.key, uuid: 'a-0' },\n          { nodeKey: document.getNodeByPath([3])!.key, uuid: 'a-1' },\n        ],\n      });\n    });\n\n    test('contains different refblocks', () => {\n      const document = (\n        <document>\n          <block type=\"paragraph\">Intro</block>\n          <block type=\"paragraph\">Cangjie</block>\n          <block type=\"refblock\" data={{ docKey: 'doc-a', refblockUUID: 'a' }}>\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n          <block type=\"refblock\" data={{ docKey: 'doc-b', refblockUUID: 'b' }}>\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n        </document>\n      ) as unknown as Document;\n\n      expect(getRefBlockMap(document)).toEqual({\n        'doc-a': [{ nodeKey: document.getNodeByPath([2])!.key, uuid: 'a' }],\n        'doc-b': [{ nodeKey: document.getNodeByPath([3])!.key, uuid: 'b' }],\n      });\n    });\n\n    test('contains deeper refblocks', () => {\n      const document = (\n        <document>\n          <block type=\"paragraph\">Intro</block>\n          <block type=\"paragraph\">\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'a' }}\n            >\n              <block type=\"paragraph\">Cangjie</block>\n            </block>\n          </block>\n          <block type=\"refblock\" data={{ docKey: 'doc-b', refblockUUID: 'b' }}>\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n        </document>\n      ) as unknown as Document;\n\n      expect(getRefBlockMap(document)).toEqual({\n        'doc-a': [{ nodeKey: document.getNodeByPath([1, 0])!.key, uuid: 'a' }],\n        'doc-b': [{ nodeKey: document.getNodeByPath([2])!.key, uuid: 'b' }],\n      });\n    });\n  });\n\n  describe('#refreshRefBlockByKey', () => {\n    test('refresh refblock content', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n              <block type=\"paragraph\">\n                <text />\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const docA = (\n        <document>\n          <block type=\"paragraph\">Intro</block>\n          <block type=\"paragraph\">Cangjie</block>\n        </document>\n      ) as unknown as Document;\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n              <block type=\"paragraph\">Intro</block>\n              <block type=\"paragraph\">Cangjie</block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const refblock = value.document.assertNodeByPath([0]);\n      const newDocument = refreshRefBlockByKey(value, refblock.key, docA);\n      expect(newDocument.toJSON()).toEqual(expected.toJSON());\n    });\n\n    test('throw error if node is not exists', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }} />\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const docA = (\n        <document>\n          <block type=\"paragraph\">Intro</block>\n          <block type=\"paragraph\">Cangjie</block>\n        </document>\n      ) as unknown as Document;\n\n      expect(() => refreshRefBlockByKey(value, 'invalid-key', docA)).toThrow();\n    });\n\n    test('throw error if node is not a refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">Intro</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const docA = (\n        <document>\n          <block type=\"paragraph\">Intro</block>\n          <block type=\"paragraph\">Cangjie</block>\n        </document>\n      ) as unknown as Document;\n\n      const node = value.document.assertNodeByPath([0]);\n\n      expect(() => refreshRefBlockByKey(value, node.key, docA)).toThrow();\n    });\n  });\n\n  describe('#refreshRefBlockByDocKey', () => {\n    test('refresh refblock content', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n              <block type=\"paragraph\">\n                <text />\n              </block>\n            </block>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n              <block type=\"paragraph\">\n                <text />\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const docA = (\n        <document>\n          <block type=\"paragraph\">Intro</block>\n          <block type=\"paragraph\">Cangjie</block>\n        </document>\n      ) as unknown as Document;\n\n      const expected = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n              <block type=\"paragraph\">Intro</block>\n              <block type=\"paragraph\">Cangjie</block>\n            </block>\n            <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n              <block type=\"paragraph\">Intro</block>\n              <block type=\"paragraph\">Cangjie</block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const newDocument = refreshRefBlockByDocKey(value, 'doc-a', docA);\n      expect(newDocument.toJSON()).toEqual(expected.toJSON());\n    });\n  });\n\n  describe('#isSelectionInRefBlock', () => {\n    test('refblocks contains the selection', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n              <block type=\"paragraph\">\n                Hello\n                <cursor />\n              </block>\n              <block type=\"paragraph\">World</block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      expect(isSelectionInRefBlock(value)).toBe(true);\n    });\n\n    test('selection start in refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n              <block type=\"paragraph\">\n                <anchor />\n                Hello\n              </block>\n            </block>\n            <block type=\"paragraph\">\n              World\n              <focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      expect(isSelectionInRefBlock(value)).toBe(true);\n    });\n\n    test('selection end in refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              World\n              <anchor />\n            </block>\n            <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n              <block type=\"paragraph\">\n                <focus />\n                Hello\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      expect(isSelectionInRefBlock(value)).toBe(true);\n    });\n\n    test('selection is null', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">World</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      // @ts-ignore\n      expect(isSelectionInRefBlock(value.setSelection(null))).toBe(false);\n    });\n\n    test('edge selection in refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block\n              type=\"refblock\"\n              data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n            >\n              <block type=\"image\" cursor=\"before\" />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      expect(isSelectionInRefBlock(value)).toBe(true);\n    });\n  });\n\n  describe('#isNodeInReadOnlyRefBlock', () => {\n    test('node in readonly refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.readOnly }}>\n              <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n                <block type=\"paragraph\">\n                  <focus />\n                  Hello\n                </block>\n              </block>\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const node = value.document.assertNodeByPath([0, 0]);\n      expect(isInReadOnlyRefBlock(value, node)).toBe(true);\n    });\n\n    test('node not in readonly refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n                <block type=\"paragraph\">\n                  <focus />\n                  Hello\n                </block>\n              </block>\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const node = value.document.assertNodeByPath([0, 0]);\n      expect(isInReadOnlyRefBlock(value, node)).toBe(false);\n    });\n\n    test('node not in refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <block type=\"paragraph\">Hello</block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const node = value.document.assertNodeByPath([0, 0]);\n      expect(isInReadOnlyRefBlock(value, node)).toBe(false);\n    });\n  });\n\n  describe('#isNodeInRefBlock', () => {\n    test('node inside a refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n              <block type=\"paragraph\">Hello</block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const node = value.document.assertNodeByPath([0, 0]);\n      expect(isInRefBlock(value, node)).toBe(true);\n    });\n\n    test('node not inside a refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n              <block type=\"paragraph\">Hello</block>\n            </block>\n            <block type=\"paragraph\">World</block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const node = value.document.assertNodeByPath([1]);\n      expect(isInRefBlock(value, node)).toBe(false);\n    });\n  });\n\n  describe('Draggeble Menu', () => {\n    test('show menu if current block is a refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n              <block type=\"paragraph\">Hello</block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const block = value.document.getNodeByPath([0])! as Block;\n      const copy = jest.fn();\n      const menu = getRefBlockDragMenuItems({\n        block,\n        value,\n        locale: { copyAsRefBlock: '复制为引用块' },\n        disableNodeInRefBlock: (node) => RefBlock.isRefBlock(node),\n        onCopyAsRefBlock: noop,\n        onCopyRefBlock: copy,\n      });\n      expect(menu).toEqual([\n        {\n          type: TYPE_MENU_ITEM,\n          title: '复制为引用块',\n          role: RefBlockRole,\n          icon: expect.anything(),\n          menuExtraKey: 'copyAsRefBlock',\n          onClick: expect.anything(),\n        },\n      ]);\n\n      menu[0].onClick();\n      expect(copy).toBeCalledWith(block);\n    });\n\n    test('show refblock menu item if current block is in a refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n              <block type=\"paragraph\">\n                <anchor />\n                Hello\n              </block>\n            </block>\n            <block type=\"paragraph\">\n              World\n              <focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const block = value.document.getNodeByPath([0, 0])! as Block;\n      const refblock = value.document.getNodeByPath([0])! as RefBlock;\n\n      const copy = jest.fn();\n      const menu = getRefBlockDragMenuItems({\n        block,\n        value,\n        locale: { copyAsRefBlock: '复制为引用块' },\n        disableNodeInRefBlock: (node) => RefBlock.isRefBlock(node),\n        onCopyAsRefBlock: noop,\n        onCopyRefBlock: copy,\n      });\n      expect(menu).toEqual([\n        {\n          type: TYPE_MENU_ITEM,\n          title: '复制为引用块',\n          role: RefBlockRole,\n          icon: expect.anything(),\n          menuExtraKey: 'copyAsRefBlock',\n          onClick: expect.anything(),\n        },\n      ]);\n\n      menu[0].onClick();\n      expect(copy).toBeCalledWith(refblock);\n    });\n\n    test('hide refblock menu item if selection is in a refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n              <block type=\"paragraph\">\n                <anchor />\n                Hello\n              </block>\n            </block>\n            <block type=\"paragraph\">\n              World\n              <focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const block = value.document.getNodeByPath([1])! as Block;\n      expect(\n        getRefBlockDragMenuItems({\n          block,\n          value,\n          disableNodeInRefBlock: (node) => false,\n          locale: { copyAsRefBlock: '复制为引用块' },\n          onCopyAsRefBlock: noop,\n          onCopyRefBlock: noop,\n        }),\n      ).toEqual([]);\n    });\n\n    test('hide refblock menu item if selection contains unsupported node', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor />\n              Intro\n            </block>\n            <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n              <block type=\"paragraph\">Hello</block>\n            </block>\n            <block type=\"paragraph\">\n              World\n              <focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const block = value.document.getNodeByPath([0])! as Block;\n      expect(\n        getRefBlockDragMenuItems({\n          block,\n          value,\n          locale: { copyAsRefBlock: '复制为引用块' },\n          disableNodeInRefBlock: (node) => RefBlock.isRefBlock(node),\n          onCopyAsRefBlock: noop,\n          onCopyRefBlock: noop,\n        }),\n      ).toEqual([]);\n    });\n\n    test('hide refblock menu item if selection contains nested unsupported node', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor />\n              Intro\n              <focus />\n            </block>\n            <block type=\"paragraph\">\n              <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n                <block type=\"paragraph\">Hello</block>\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const block = value.document.getNodeByPath([1])! as Block;\n      expect(\n        getRefBlockDragMenuItems({\n          block,\n          value,\n          locale: { copyAsRefBlock: '复制为引用块' },\n          disableNodeInRefBlock: (node) => RefBlock.isRefBlock(node),\n          onCopyAsRefBlock: noop,\n          onCopyRefBlock: noop,\n        }),\n      ).toEqual([]);\n    });\n\n    test('show refblock menu item if block is a non-refblock', () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n              <block type=\"paragraph\">Hello</block>\n            </block>\n            <block type=\"paragraph\">\n              World\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const block = value.document.getNodeByPath([1])! as Block;\n      expect(\n        getRefBlockDragMenuItems({\n          block,\n          value,\n          disableNodeInRefBlock: () => false,\n          locale: { copyAsRefBlock: '复制为引用块' },\n          onCopyAsRefBlock: noop,\n          onCopyRefBlock: noop,\n        }),\n      ).toEqual([\n        {\n          type: TYPE_MENU_ITEM,\n          title: '复制为引用块',\n          role: RefBlockRole,\n          icon: expect.anything(),\n          menuExtraKey: 'copyAsRefBlock',\n          onClick: noop,\n        },\n      ]);\n    });\n  });\n\n  describe('ccp', () => {\n    test('#cropRefblockInFragment', () => {\n      const fragment = (\n        <document>\n          <block\n            type=\"refblock\"\n            data={{ docKey: '三国演义', refblockUUID: 'sg' }}\n          >\n            <block type=\"paragraph\">Hello</block>\n          </block>\n          <block\n            type=\"refblock\"\n            data={{ docKey: '红楼梦', refblockUUID: 'hl' }}\n          >\n            <block type=\"paragraph\">Word</block>\n          </block>\n          <block type=\"paragraph\">Cangjie</block>\n        </document>\n      ) as unknown as Document;\n\n      const expected = (\n        <document>\n          <block type=\"refblock\" data={{ docKey: '三国演义' }}>\n            <block type=\"paragraph\">\n              <text />\n            </block>\n          </block>\n          <block type=\"refblock\" data={{ docKey: '红楼梦' }}>\n            <block type=\"paragraph\">\n              <text />\n            </block>\n          </block>\n          <block type=\"paragraph\">Cangjie</block>\n        </document>\n      ) as unknown as Document;\n\n      expect(cropRefBlockInFragment(fragment).toJSON()).toEqual(\n        expected.toJSON(),\n      );\n    });\n\n    test('#unwrapRefBlock', () => {\n      const fragment = (\n        <document>\n          <block\n            type=\"refblock\"\n            data={{ docKey: '三国演义', refblockUUID: 'sg', needCCP: true }}\n          >\n            <block type=\"paragraph\">Hello</block>\n          </block>\n          <block\n            type=\"refblock\"\n            data={{ docKey: '红楼梦', refblockUUID: 'hl' }}\n          >\n            <block type=\"paragraph\">World</block>\n          </block>\n          <block type=\"paragraph\">Cangjie</block>\n        </document>\n      ) as unknown as Document;\n\n      const expected = (\n        <document>\n          <block type=\"paragraph\">Hello</block>\n          <block type=\"paragraph\">World</block>\n          <block type=\"paragraph\">Cangjie</block>\n        </document>\n      ) as unknown as Document;\n\n      expect(unwrapRefBlock(fragment).toJSON()).toEqual(expected.toJSON());\n    });\n  });\n});\n"],"file":"utils.test.js"}