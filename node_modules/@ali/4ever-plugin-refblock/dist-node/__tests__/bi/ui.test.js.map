{"version":3,"sources":["../../../../src/__tests__/bi/ui.test.tsx"],"names":["encodeFragment","transferUtils","MIME_TYPES","constants","DEFAULT_VALUE","LOCALE","nestedNotSupported","createFailed","referFromTitle","detach","detachFailed","detachSuccess","deleted","forbidden","invalid","referenceListTitle","copySuccess","cannotMoveTo","cannotDropTo","copy","showRefs","creating","noRefers","TOOLBAR_ANIM_DURATION","Editor","props","defaultValue","refblockConfig","value","setValue","React","useState","plugins","useMemo","factories","biFactory","locales","configs","refblock","locale","toolbarAnimationDuration","enableToolbar","getDocKey","generateDoc","Promise","resolve","then","docKey","uuid","getReferenceList","renderReadOnly","renderRefBlockInOtherStates","_","status","RefBlockStatus","disconnected","generateCopyDoc","decorateRefBlockFragment","fragment","getRefBlockURL","id","cacheHetuWhenCopy","getHetuWhenPaste","getDocURL","url","handleChange","useCallback","changed","describe","afterEach","test","loading","refblockUUID","onRefBlockMounted","jest","fn","findByTestId","expect","toBeCalledWith","anything","loading$","toBeInTheDocument","renderLoading","normal","editor","findByText","container$","dataset","focused","toBe","fireEvent","cangjieInput","data","text$","readOnly","config","node","deleted$","element$","forbidden$","paste","FRAGMENT","hostKey","undefined","name","hostDocKey","queryByTestId","mouseEnter","toolbar$","not","findAllByTestId","toBeVisible","click","title$","mouseOver","references","map","refer","textContent","toEqual","a$","querySelector","href","encodeURI","mouseLeave","textInRefBlock$","mouseDown","mouseMove","link$","detach$","container","refblock$","paragraphs","Array","from","querySelectorAll","p","reject","copy$","setTimeout"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport * as React from 'react';\nimport { Value, Document, constants, transferUtils } from '@ali/4ever-cangjie';\nimport { ReferenceItem, BiConfig } from '../../utils/types';\nimport { RefBlockStatus } from '../../mo/models';\nimport { renderEditor, jsx, fireEvent, waitForTime } from '@ali/4ever-dev-test';\nimport { Provider, Content, createCustomBiPlugins } from '@ali/4ever-setup';\nimport { cleanup } from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\nimport biFactory from '../../bi';\n\nconst { encodeFragment } = transferUtils;\nconst { MIME_TYPES } = constants;\n\nconst DEFAULT_VALUE = (\n  <value>\n    <document>\n      <block type=\"paragraph\">\n        <cursor />\n      </block>\n    </document>\n  </value>\n) as unknown as Value;\n\ninterface EditorProps {\n  defaultValue?: Value;\n  refblockConfig?: Partial<BiConfig>;\n}\n\nconst LOCALE = {\n  nestedNotSupported: '不支持嵌套的引用块',\n  createFailed: '创建引用块失败',\n  referFromTitle: '引用源',\n  detach: '解除引用关系',\n  detachFailed: '解除引用关系失败',\n  detachSuccess: '解除引用关系成功',\n  deleted: '引用块已删除',\n  forbidden: '无权限',\n  invalid: '无效',\n  referenceListTitle: '被以下文档引用了',\n  copySuccess: '拷贝成功',\n  cannotMoveTo: '无法移动到',\n  cannotDropTo: '无法放置到',\n  copy: '复制',\n  showRefs: '查看引用关系',\n  creating: '创建中',\n  noRefers: '暂未被其他文档引用',\n};\n\nconst TOOLBAR_ANIM_DURATION = 10;\n\nconst Editor: React.FC<EditorProps> = (props) => {\n  const { defaultValue = DEFAULT_VALUE, refblockConfig = {} } = props;\n  const [value, setValue] = React.useState(defaultValue);\n\n  const plugins = React.useMemo(() => {\n    return createCustomBiPlugins({\n      factories: [biFactory],\n      locales: {},\n      configs: {\n        refblock: {\n          locale: LOCALE,\n          toolbarAnimationDuration: TOOLBAR_ANIM_DURATION,\n          enableToolbar: () => true,\n          getDocKey: () => 'doc',\n          generateDoc: () =>\n            Promise.resolve().then(() => ({ docKey: 'xxx', uuid: 'xxx' })),\n          detach: () => Promise.resolve().then(),\n          getReferenceList: () => Promise.resolve().then(() => []),\n          renderReadOnly: () => null,\n          renderRefBlockInOtherStates: (_, status) => {\n            if (status === RefBlockStatus.disconnected) {\n              return '连接断开';\n            }\n            return null;\n          },\n          generateCopyDoc: (docKey) =>\n            Promise.resolve().then(() => ({ docKey, uuid: 'abc' })),\n          decorateRefBlockFragment: (fragment) => fragment,\n          getRefBlockURL: (id) => id,\n          cacheHetuWhenCopy: () => '',\n          getHetuWhenPaste: () => {},\n          getDocURL: (url, id) => `${url}?id=${id}`,\n          ...(refblockConfig || {}),\n        },\n      },\n    });\n  }, [refblockConfig]);\n\n  const handleChange = React.useCallback((changed) => {\n    setValue(changed.value);\n  }, []);\n\n  return (\n    <Provider value={value} onChange={handleChange} plugins={plugins} autoFocus>\n      <Content />\n    </Provider>\n  );\n};\n\ndescribe('Bi/refblock/ui', () => {\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('引用块', () => {\n    test('渲染加载态的引用块', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.loading }}>\n              <block\n                key=\"refblock\"\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\" />\n              </block>\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const onRefBlockMounted = jest.fn();\n      const { findByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={{ onRefBlockMounted }} />,\n      );\n\n      expect(onRefBlockMounted).toBeCalledWith(\n        expect.anything(),\n        'refblock',\n        'doc-a',\n      );\n\n      const loading$ = await findByTestId('refblock-loading');\n      expect(loading$).toBeInTheDocument();\n    });\n\n    test('渲染自定义加载态的引用块', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.loading }}>\n              <block\n                key=\"refblock\"\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\" />\n              </block>\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const renderLoading = () => {\n        return <div data-testid=\"refblock-custom-loading\"></div>;\n      };\n      const { findByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={{ renderLoading }} />,\n      );\n\n      const loading$ = await findByTestId('refblock-custom-loading');\n      expect(loading$).toBeInTheDocument();\n    });\n\n    test('渲染编辑态的引用块', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\">\n                  <cursor />\n                </block>\n              </block>\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const { editor, findByTestId, findByText } = await renderEditor(\n        <Editor defaultValue={value} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      expect(container$).toBeInTheDocument();\n      // 聚焦在引用块\n      expect(container$.dataset.focused).toBe('true');\n      // 输入文字\n      fireEvent.cangjieInput(editor, { data: 'Hello' });\n      const text$ = await findByText(/Hello/);\n      expect(text$).toBeInTheDocument();\n    });\n\n    test('渲染只读权限的引用块', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.readOnly }}>\n              <block type=\"refblock\" data={{ docKey: 'doca' }}>\n                <block type=\"paragraph\">Hello</block>\n              </block>\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        renderReadOnly: ({ node }) => `${node.data.docKey}-readonly`,\n      };\n\n      const { findByTestId, findByText } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      expect(container$).toBeInTheDocument();\n      const text$ = await findByText(/doca\\-readonly/);\n      expect(text$).toBeInTheDocument();\n    });\n\n    test('渲染已被删除的引用块', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.deleted }}>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\" />\n              </block>\n            </injection>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const { findByTestId } = await renderEditor(\n        <Editor defaultValue={value} />,\n      );\n\n      const deleted$ = await findByTestId('refblock-deleted');\n      expect(deleted$).toBeInTheDocument();\n    });\n\n    test('渲染未聚焦的引用块', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const { findByTestId } = await renderEditor(\n        <Editor defaultValue={value} />,\n      );\n\n      const element$ = await findByTestId('refblock-container');\n      expect(element$.dataset.focused).toBe('false');\n    });\n\n    test('渲染无权限的引用块', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.forbidden }}>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const { findByTestId } = await renderEditor(\n        <Editor defaultValue={value} />,\n      );\n\n      const forbidden$ = await findByTestId('refblock-forbidden');\n      expect(forbidden$).toBeInTheDocument();\n    });\n\n    test('渲染其他状态的引用块', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.disconnected }}>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const { findByTestId, findByText } = await renderEditor(\n        <Editor defaultValue={value} />,\n      );\n\n      await findByTestId(`refblock-other-states-disconnected`);\n      await findByText(/连接断开/);\n    });\n\n    test('粘贴引用块：若剪贴板含有引用块内容，则粘贴为引用块，并驱动加载', async () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const { editor, findByTestId } = await renderEditor(\n        <Editor defaultValue={value} />,\n      );\n\n      fireEvent.paste(\n        editor,\n        MIME_TYPES.FRAGMENT,\n        encodeFragment(\n          (\n            <document>\n              <block type=\"refblock\" data={{ docKey: 'doc-a' }}>\n                <block type=\"paragraph\">HelloWorld</block>\n              </block>\n            </document>\n          ) as unknown as Document,\n        ),\n      );\n\n      const loading$ = await findByTestId('refblock-loading');\n      expect(loading$).toBeInTheDocument();\n    });\n\n    test('在源文档粘贴引用块，剪贴板含有引用块 docKey，则粘贴为引用块，并驱动加载', async () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const { editor, findByTestId } = await renderEditor(\n        <Editor defaultValue={value} />,\n      );\n\n      const fragment = (\n        <document>\n          <block type=\"paragraph\">Hello</block>\n          <block type=\"refblock\" data={{ docKey: 'doc-a', hostKey: 'host' }}>\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n          <block type=\"paragraph\">World</block>\n        </document>\n      ) as unknown as Document;\n\n      fireEvent.paste(\n        editor,\n        MIME_TYPES.FRAGMENT,\n        transferUtils.encodeFragment(fragment),\n      );\n\n      const loading$ = await findByTestId('refblock-loading');\n      expect(loading$).toBeInTheDocument();\n    });\n\n    test('在其他文档粘贴引用块，剪贴板含有引用块 docKey，则粘贴为引用块，并驱动加载', async () => {\n      const value = (\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const { editor, findByTestId } = await renderEditor(\n        <Editor defaultValue={value} />,\n      );\n\n      const fragment = (\n        <document>\n          <block type=\"paragraph\">Hello</block>\n          <block type=\"refblock\" data={{ docKey: 'doc-a', hostKey: 'doc-b' }}>\n            <block type=\"paragraph\">Cangjie</block>\n          </block>\n          <block type=\"paragraph\">World</block>\n        </document>\n      ) as unknown as Document;\n\n      fireEvent.paste(\n        editor,\n        MIME_TYPES.FRAGMENT,\n        transferUtils.encodeFragment(fragment),\n      );\n\n      const loading$ = await findByTestId('refblock-loading');\n      expect(loading$).toBeInTheDocument();\n    });\n  });\n\n  describe('工具栏', () => {\n    test('默认不展示工具栏', async () => {\n      // 默认展示引用计数\n      // hover 的二级菜单展示引用列表，顺序根据引用方聚合\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        enableToolbar: undefined,\n        getDocKey: () => '四大名著',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com/hlm',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '西游记简介',\n                docKey: '西游记介绍',\n                hostDocKey: '西游记',\n                url: 'https://www.baidu.com/syj',\n                uuid: 'sh-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com/sgyy#intro',\n                uuid: 'sg-intro',\n              },\n              {\n                name: '三国演义章节',\n                docKey: '三国演义章节',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com/sgyy',\n                uuid: 'sg-chapter',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com/sdmz',\n                uuid: 'sdmz-intro',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId, queryByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n\n      await waitForTime(50);\n      const toolbar$ = queryByTestId('refblock-toolbar-host');\n      expect(toolbar$).not.toBeInTheDocument();\n    });\n\n    test('引用源（主块）展示引用列表, 引用计数，并根据引用方聚合', async () => {\n      // 默认展示引用计数\n      // hover 的二级菜单展示引用列表，顺序根据引用方聚合\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        getDocKey: () => '四大名著',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com/hlm',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '西游记简介',\n                docKey: '西游记介绍',\n                hostDocKey: '西游记',\n                url: 'https://www.baidu.com/syj',\n                uuid: 'sh-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com/sgyy#intro',\n                uuid: 'sg-intro',\n              },\n              {\n                name: '三国演义章节',\n                docKey: '三国演义章节',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com/sgyy',\n                uuid: 'sg-chapter',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com/sdmz',\n                uuid: 'sdmz-intro',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId, findAllByTestId, findByText } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n\n      const toolbar$ = await findByTestId('refblock-toolbar-host');\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n      expect(toolbar$).toBeVisible();\n\n      fireEvent.click(toolbar$);\n\n      const title$ = await findByText(/被以下文档引用了/);\n      expect(title$).toBeInTheDocument();\n\n      // hover 到标题后，展示列表\n      fireEvent.mouseOver(title$);\n      const references = await findAllByTestId('refblock-toolbar-list-item');\n      expect(references.map((refer) => refer.textContent)).toEqual([\n        '三国演义简介',\n        '三国演义章节',\n        '红楼梦简介',\n        '西游记简介',\n      ]);\n      // 检查 url 是否符合预期\n      const a$ = references[0].querySelector('a')! as HTMLAnchorElement;\n      expect(a$.href).toBe(\n        encodeURI('https://www.baidu.com/sgyy#intro?id=sg-intro'),\n      );\n    });\n\n    test('默认的文档 URL 仅返回其 URL', async () => {\n      // 默认展示引用计数\n      // hover 的二级菜单展示引用列表，顺序根据引用方聚合\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        getDocURL: undefined,\n        getDocKey: () => '四大名著',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com/hlm',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '西游记简介',\n                docKey: '西游记介绍',\n                hostDocKey: '西游记',\n                url: 'https://www.baidu.com/syj',\n                uuid: 'sh-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com/sgyy#intro',\n                uuid: 'sg-intro',\n              },\n              {\n                name: '三国演义章节',\n                docKey: '三国演义章节',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com/sgyy',\n                uuid: 'sg-chapter',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com/sdmz',\n                uuid: 'sdmz-intro',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId, findAllByTestId, findByText } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n\n      const toolbar$ = await findByTestId('refblock-toolbar-host');\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n      expect(toolbar$).toBeVisible();\n\n      fireEvent.click(toolbar$);\n\n      const title$ = await findByText(/被以下文档引用了/);\n      expect(title$).toBeInTheDocument();\n\n      // hover 到标题后，展示列表\n      fireEvent.mouseOver(title$);\n      const references = await findAllByTestId('refblock-toolbar-list-item');\n      expect(references.map((refer) => refer.textContent)).toEqual([\n        '三国演义简介',\n        '三国演义章节',\n        '红楼梦简介',\n        '西游记简介',\n      ]);\n      // 检查 url 是否符合预期\n      const a$ = references[0].querySelector('a')! as HTMLAnchorElement;\n      expect(a$.href).toBe(\n        encodeURI('https://www.baidu.com/sgyy#intro'),\n      );     \n    });\n\n    test('延迟隐藏工具栏', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        getDocKey: () => '四大名著',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '西游记简介',\n                docKey: '西游记介绍',\n                hostDocKey: '西游记',\n                url: 'https://www.baidu.com',\n                uuid: 'sh-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com',\n                uuid: 'sg-intro',\n              },\n              {\n                name: '三国演义章节',\n                docKey: '三国演义章节',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com',\n                uuid: 'sg-chapter',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com',\n                uuid: 'sdmz-intro',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n\n      const toolbar$ = await findByTestId('refblock-toolbar-wrapper');\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n      expect(toolbar$).toBeVisible();\n\n      fireEvent.mouseLeave(container$);\n      await waitForTime(TOOLBAR_ANIM_DURATION - 5);\n      expect(toolbar$).toBeVisible();\n\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n      expect(toolbar$).not.toBeVisible();\n    });\n\n    test('focus 到引用块时，隐藏工具栏，专注编辑', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\" key=\"p-in-refblock\">\n                  Cangjie\n                </block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        getDocKey: () => '四大名著',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '西游记简介',\n                docKey: '西游记介绍',\n                hostDocKey: '西游记',\n                url: 'https://www.baidu.com',\n                uuid: 'sh-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com',\n                uuid: 'sg-intro',\n              },\n              {\n                name: '三国演义章节',\n                docKey: '三国演义章节',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com',\n                uuid: 'sg-chapter',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com',\n                uuid: 'sdmz-intro',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId, findByText } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n      const toolbar$ = await findByTestId('refblock-toolbar-wrapper');\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n      expect(toolbar$).toBeVisible();\n\n      // focus 到引用块，工具栏消失\n      const textInRefBlock$ = await findByText(/Cangjie/);\n      fireEvent.mouseDown(textInRefBlock$);\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n      expect(toolbar$).not.toBeVisible();\n\n      // 在非内容区移动，重新展示工具栏\n      fireEvent.mouseMove(container$);\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n      expect(toolbar$).toBeVisible();\n\n      // 移动到内容区，隐藏工具栏\n      fireEvent.mouseEnter(textInRefBlock$);\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n      expect(toolbar$).not.toBeVisible();\n    });\n\n    test('禁用工具栏', async () => {\n      // 默认展示引用计数\n      // hover 的二级菜单展示引用列表，顺序根据引用方聚合\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        enableToolbar: () => false,\n        getDocKey: () => '四大名著',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '西游记简介',\n                docKey: '西游记介绍',\n                hostDocKey: '西游记',\n                url: 'https://www.baidu.com',\n                uuid: 'sh-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com',\n                uuid: 'sg-intro',\n              },\n              {\n                name: '三国演义章节',\n                docKey: '三国演义章节',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com',\n                uuid: 'sg-chapter',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com',\n                uuid: 'sdmz-intro',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId, queryByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n\n      const toolbar$ = queryByTestId('refblock-toolbar-wrapper');\n      expect(toolbar$).not.toBeInTheDocument();\n    });\n\n    test('引用方（副块）展示引用源、解除引用关系按钮', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: '四大名著简介', refblockUUID: '四大名著' }}\n              >\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        getDocKey: () => '三国演义',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com/hlm',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com/sgyy',\n                uuid: 'sg-intro',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com/sdmz',\n                uuid: '四大名著简介',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n\n      const link$ = (await findByTestId(\n        'refblock-link-to',\n      )) as HTMLAnchorElement;\n      expect(link$.textContent).toBe('四大名著');\n      expect(link$).toBeInTheDocument();\n      expect(link$.href).toBe(\n        encodeURI('https://www.baidu.com/sdmz?id=四大名著简介'),\n      );\n\n      const detach$ = await findByTestId('refblock-detach');\n      expect(detach$).toBeInTheDocument();\n    });\n\n    test('引用方（副块）解除引用关系', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: '四大名著简介', refblockUUID: '四大名著' }}\n              >\n                <block type=\"paragraph\">Hello</block>\n                <block type=\"paragraph\">World</block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Cangjie\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        detach: () => Promise.resolve(),\n        getDocKey: () => '三国演义',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com',\n                uuid: 'sg-intro',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com',\n                uuid: '四大名著简介',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId, queryByTestId, container } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      let refblock$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(refblock$);\n\n      const detach$ = await findByTestId('refblock-detach');\n      fireEvent.click(detach$);\n\n      await waitForTime(10);\n\n      // 解绑后，降级为普通块\n      refblock$ = queryByTestId('refblock-container')!;\n      expect(refblock$).not.toBeInTheDocument();\n      const paragraphs = Array.from(\n        container.querySelectorAll('[data-type=\"paragraph\"]'),\n      );\n      expect(paragraphs.map((p) => p.textContent)).toEqual([\n        'Hello',\n        'World',\n        'Cangjie',\n      ]);\n    });\n\n    test('引用方（副块）解除引用关系失败', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: '四大名著简介', refblockUUID: '四大名著' }}\n              >\n                <block type=\"paragraph\">Hello</block>\n                <block type=\"paragraph\">World</block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Cangjie\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        detach: () => Promise.reject(),\n        getDocKey: () => '三国演义',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com',\n                uuid: 'sg-intro',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com',\n                uuid: '四大名著简介',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId, queryByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      let refblock$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(refblock$);\n\n      const detach$ = await findByTestId('refblock-detach');\n      fireEvent.click(detach$);\n\n      await waitForTime(10);\n\n      // 解绑失败，do nothing\n      refblock$ = queryByTestId('refblock-container')!;\n      expect(refblock$).toBeInTheDocument();\n    });\n\n    test('复制引用块后，关闭工具栏', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: '四大名著简介', refblockUUID: '四大名著' }}\n              >\n                <block type=\"paragraph\">Hello</block>\n                <block type=\"paragraph\">World</block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Cangjie\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        detach: () => Promise.reject(),\n        getDocKey: () => '三国演义',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com',\n                uuid: 'sg-intro',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com',\n                uuid: '四大名著简介',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      let refblock$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(refblock$);\n\n      await findByTestId('refblock-toolbar-copy');\n      const copy$ = await findByTestId('refblock-copy');\n      fireEvent.click(copy$);\n\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n\n      expect(copy$).not.toBeInTheDocument();\n    });\n\n    test('只读权限时，不展示复制按钮', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.readOnly }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: '四大名著简介', refblockUUID: '四大名著' }}\n              >\n                <block type=\"paragraph\">Hello</block>\n                <block type=\"paragraph\">World</block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Cangjie\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        renderReadOnly: ({ node }) => `${node.data.docKey}-readonly`,\n        detach: () => Promise.reject(),\n        getDocKey: () => '三国演义',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            resolve([\n              {\n                name: '红楼梦简介',\n                docKey: '红楼梦简介',\n                hostDocKey: '红楼梦',\n                url: 'https://www.baidu.com',\n                uuid: 'hl-intro',\n              },\n              {\n                name: '三国演义简介',\n                docKey: '三国演义介绍',\n                hostDocKey: '三国演义',\n                url: 'https://www.baidu.com',\n                uuid: 'sg-intro',\n              },\n              // 引用块所在的源文档将被过滤\n              {\n                name: '四大名著',\n                docKey: '四大名著介绍',\n                hostDocKey: '四大名著',\n                url: 'https://www.baidu.com',\n                uuid: '四大名著简介',\n              },\n            ]);\n          }),\n      };\n\n      const { findByTestId, queryByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const refblock$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(refblock$);\n      await findByTestId('refblock-toolbar-copy');\n\n      const copy$ = queryByTestId('refblock-copy');\n      expect(copy$).not.toBeInTheDocument();\n    });\n\n    test('加载期间，主块工具栏引用列表展示占位符', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        getDocKey: () => '四大名著',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            setTimeout(() => {\n              resolve([\n                {\n                  name: '红楼梦简介',\n                  docKey: '红楼梦简介',\n                  hostDocKey: '红楼梦',\n                  url: 'https://www.baidu.com',\n                  uuid: 'hl-intro',\n                },\n                {\n                  name: '西游记简介',\n                  docKey: '西游记介绍',\n                  hostDocKey: '西游记',\n                  url: 'https://www.baidu.com',\n                  uuid: 'sh-intro',\n                },\n                {\n                  name: '三国演义简介',\n                  docKey: '三国演义介绍',\n                  hostDocKey: '三国演义',\n                  url: 'https://www.baidu.com',\n                  uuid: 'sg-intro',\n                },\n                {\n                  name: '三国演义章节',\n                  docKey: '三国演义章节',\n                  hostDocKey: '三国演义',\n                  url: 'https://www.baidu.com',\n                  uuid: 'sg-chapter',\n                },\n                // 引用块所在的源文档将被过滤\n                {\n                  name: '四大名著',\n                  docKey: '四大名著介绍',\n                  hostDocKey: '四大名著',\n                  url: 'https://www.baidu.com',\n                  uuid: 'sdmz-intro',\n                },\n              ]);\n            }, 2000);\n          }),\n      };\n\n      const { findByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n\n      const toolbar$ = await findByTestId('refblock-toolbar-host');\n      await waitForTime(TOOLBAR_ANIM_DURATION + 10);\n      expect(toolbar$).toBeVisible();\n\n      fireEvent.click(toolbar$);\n      await findByTestId('refblock-refer-placeholder');\n    });\n\n    test('加载期间，副块工具栏展示引用源占位符', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: '四大名著简介', refblockUUID: '四大名著' }}\n              >\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        getDocKey: () => '三国演义',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            setTimeout(\n              () =>\n                resolve([\n                  {\n                    name: '红楼梦简介',\n                    docKey: '红楼梦简介',\n                    hostDocKey: '红楼梦',\n                    url: 'https://www.baidu.com',\n                    uuid: 'hl-intro',\n                  },\n                  {\n                    name: '三国演义简介',\n                    docKey: '三国演义介绍',\n                    hostDocKey: '三国演义',\n                    url: 'https://www.baidu.com',\n                    uuid: 'sg-intro',\n                  },\n                  // 引用块所在的源文档将被过滤\n                  {\n                    name: '四大名著',\n                    docKey: '四大名著介绍',\n                    hostDocKey: '四大名著',\n                    url: 'https://www.baidu.com',\n                    uuid: '四大名著简介',\n                  },\n                ]),\n              2000,\n            );\n          }),\n      };\n\n      const { findByTestId } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n\n      await findByTestId('refblock-copy-from-placeholder');\n    });\n\n    test('引用列表为空时，主块展示提示', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        getDocKey: () => '四大名著',\n        getReferenceList: () =>\n          new Promise<ReferenceItem[]>((resolve) => {\n            setTimeout(() => {\n              resolve([\n                // 引用块所在的源文档将被过滤\n                {\n                  name: '四大名著',\n                  docKey: '四大名著介绍',\n                  hostDocKey: '四大名著',\n                  url: 'https://www.baidu.com',\n                  uuid: 'sdmz-intro',\n                },\n              ]);\n            }, 100);\n          }),\n      };\n\n      const { findByTestId, findByText } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n\n      const toolbar$ = await findByTestId('refblock-toolbar-host');\n      await waitForTime(150);\n      expect(toolbar$).toBeVisible();\n\n      fireEvent.click(toolbar$);\n      await findByText(/暂未被其他文档引用/);\n    });\n\n    test('引用列表加载失败时，主块展示提示', async () => {\n      const value = (\n        <value>\n          <document>\n            <injection data={{ status: RefBlockStatus.normal }}>\n              <block\n                type=\"refblock\"\n                data={{ docKey: 'doc-a', refblockUUID: 'doc-a' }}\n              >\n                <block type=\"paragraph\"></block>\n              </block>\n            </injection>\n            <block type=\"paragraph\">\n              Hello\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown as Value;\n\n      const config = {\n        getDocKey: () => '四大名著',\n        getReferenceList: () => Promise.reject('asd'),\n      };\n\n      const { findByTestId, findByText } = await renderEditor(\n        <Editor defaultValue={value} refblockConfig={config} />,\n      );\n\n      const container$ = await findByTestId('refblock-container');\n      fireEvent.mouseEnter(container$);\n\n      const toolbar$ = await findByTestId('refblock-toolbar-host');\n      await waitForTime(150);\n      expect(toolbar$).toBeVisible();\n\n      fireEvent.click(toolbar$);\n      await findByText(/暂未被其他文档引用/);\n    });\n  });\n});\n"],"file":"ui.test.js"}