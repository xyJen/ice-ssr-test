"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _models = require("../../mo/models");

var _everDevTest = require("@ali/4ever-dev-test");

var _everSetup = require("@ali/4ever-setup");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _bi = _interopRequireDefault(require("../../bi"));

/** @jsx jsx */
const {
  encodeFragment
} = _everCangjie.transferUtils;
const {
  MIME_TYPES
} = _everCangjie.constants;
const DEFAULT_VALUE = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));
const LOCALE = {
  nestedNotSupported: '不支持嵌套的引用块',
  createFailed: '创建引用块失败',
  referFromTitle: '引用源',
  detach: '解除引用关系',
  detachFailed: '解除引用关系失败',
  detachSuccess: '解除引用关系成功',
  deleted: '引用块已删除',
  forbidden: '无权限',
  invalid: '无效',
  referenceListTitle: '被以下文档引用了',
  copySuccess: '拷贝成功',
  cannotMoveTo: '无法移动到',
  cannotDropTo: '无法放置到',
  copy: '复制',
  showRefs: '查看引用关系',
  creating: '创建中',
  noRefers: '暂未被其他文档引用'
};
const TOOLBAR_ANIM_DURATION = 10;

var _ref = (0, _everDevTest.jsx)(_everSetup.Content, null);

const Editor = props => {
  const {
    defaultValue = DEFAULT_VALUE,
    refblockConfig = {}
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    return (0, _everSetup.createCustomBiPlugins)({
      factories: [_bi.default],
      locales: {},
      configs: {
        refblock: {
          locale: LOCALE,
          toolbarAnimationDuration: TOOLBAR_ANIM_DURATION,
          enableToolbar: () => true,
          getDocKey: () => 'doc',
          generateDoc: () => Promise.resolve().then(() => ({
            docKey: 'xxx',
            uuid: 'xxx'
          })),
          detach: () => Promise.resolve().then(),
          getReferenceList: () => Promise.resolve().then(() => []),
          renderReadOnly: () => null,
          renderRefBlockInOtherStates: (_, status) => {
            if (status === _models.RefBlockStatus.disconnected) {
              return '连接断开';
            }

            return null;
          },
          generateCopyDoc: docKey => Promise.resolve().then(() => ({
            docKey,
            uuid: 'abc'
          })),
          decorateRefBlockFragment: fragment => fragment,
          getRefBlockURL: id => id,
          cacheHetuWhenCopy: () => '',
          getHetuWhenPaste: () => {},
          getDocURL: (url, id) => `${url}?id=${id}`,
          ...(refblockConfig || {})
        }
      }
    });
  }, [refblockConfig]);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_everSetup.Provider, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    autoFocus: true
  }, _ref);
};

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref4 = (0, _everDevTest.jsx)("div", {
  "data-testid": "refblock-custom-loading"
});

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref14 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref15 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "HelloWorld");

var _ref16 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref17 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref18 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref19 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref20 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref21 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref22 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref23 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref24 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref25 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref26 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref27 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref28 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref29 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref30 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref31 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref32 = (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "p-in-refblock"
}, "Cangjie");

var _ref33 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref34 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref35 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref36 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref37 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref38 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref39 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref40 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie", (0, _everDevTest.jsx)("cursor", null));

var _ref41 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref42 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref43 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie", (0, _everDevTest.jsx)("cursor", null));

var _ref44 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref45 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref46 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie", (0, _everDevTest.jsx)("cursor", null));

var _ref47 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref48 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref49 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie", (0, _everDevTest.jsx)("cursor", null));

var _ref50 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref51 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref52 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref53 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref54 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref55 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref56 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref57 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

describe('Bi/refblock/ui', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('引用块', () => {
    test('渲染加载态的引用块', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.loading
        }
      }, (0, _everDevTest.jsx)("block", {
        key: "refblock",
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref2))));
      const onRefBlockMounted = jest.fn();
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: {
          onRefBlockMounted
        }
      }));
      expect(onRefBlockMounted).toBeCalledWith(expect.anything(), 'refblock', 'doc-a');
      const loading$ = await findByTestId('refblock-loading');
      expect(loading$).toBeInTheDocument();
    });
    test('渲染自定义加载态的引用块', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.loading
        }
      }, (0, _everDevTest.jsx)("block", {
        key: "refblock",
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref3))));

      const renderLoading = () => {
        return _ref4;
      };

      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: {
          renderLoading
        }
      }));
      const loading$ = await findByTestId('refblock-custom-loading');
      expect(loading$).toBeInTheDocument();
    });
    test('渲染编辑态的引用块', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref5))));
      const {
        editor,
        findByTestId,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const container$ = await findByTestId('refblock-container');
      expect(container$).toBeInTheDocument(); // 聚焦在引用块

      expect(container$.dataset.focused).toBe('true'); // 输入文字

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'Hello'
      });

      const text$ = await findByText(/Hello/);
      expect(text$).toBeInTheDocument();
    });
    test('渲染只读权限的引用块', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.readOnly
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doca'
        }
      }, _ref6))));
      const config = {
        renderReadOnly: ({
          node
        }) => `${node.data.docKey}-readonly`
      };
      const {
        findByTestId,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');
      expect(container$).toBeInTheDocument();
      const text$ = await findByText(/doca\-readonly/);
      expect(text$).toBeInTheDocument();
    });
    test('渲染已被删除的引用块', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.deleted
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref7))));
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const deleted$ = await findByTestId('refblock-deleted');
      expect(deleted$).toBeInTheDocument();
    });
    test('渲染未聚焦的引用块', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref8)), _ref9));
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const element$ = await findByTestId('refblock-container');
      expect(element$.dataset.focused).toBe('false');
    });
    test('渲染无权限的引用块', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.forbidden
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref10)), _ref11));
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const forbidden$ = await findByTestId('refblock-forbidden');
      expect(forbidden$).toBeInTheDocument();
    });
    test('渲染其他状态的引用块', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.disconnected
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref12)), _ref13));
      const {
        findByTestId,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      await findByTestId(`refblock-other-states-disconnected`);
      await findByText(/连接断开/);
    });
    test('粘贴引用块：若剪贴板含有引用块内容，则粘贴为引用块，并驱动加载', async () => {
      const value = _ref14;
      const {
        editor,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, encodeFragment((0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref15))));

      const loading$ = await findByTestId('refblock-loading');
      expect(loading$).toBeInTheDocument();
    });
    test('在源文档粘贴引用块，剪贴板含有引用块 docKey，则粘贴为引用块，并驱动加载', async () => {
      const value = _ref16;
      const {
        editor,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const fragment = (0, _everDevTest.jsx)("document", null, _ref17, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          hostKey: 'host'
        }
      }, _ref18), _ref19);

      _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, _everCangjie.transferUtils.encodeFragment(fragment));

      const loading$ = await findByTestId('refblock-loading');
      expect(loading$).toBeInTheDocument();
    });
    test('在其他文档粘贴引用块，剪贴板含有引用块 docKey，则粘贴为引用块，并驱动加载', async () => {
      const value = _ref20;
      const {
        editor,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const fragment = (0, _everDevTest.jsx)("document", null, _ref21, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          hostKey: 'doc-b'
        }
      }, _ref22), _ref23);

      _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, _everCangjie.transferUtils.encodeFragment(fragment));

      const loading$ = await findByTestId('refblock-loading');
      expect(loading$).toBeInTheDocument();
    });
  });
  describe('工具栏', () => {
    test('默认不展示工具栏', async () => {
      // 默认展示引用计数
      // hover 的二级菜单展示引用列表，顺序根据引用方聚合
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref24)), _ref25));
      const config = {
        enableToolbar: undefined,
        getDocKey: () => '四大名著',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com/hlm',
            uuid: 'hl-intro'
          }, {
            name: '西游记简介',
            docKey: '西游记介绍',
            hostDocKey: '西游记',
            url: 'https://www.baidu.com/syj',
            uuid: 'sh-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com/sgyy#intro',
            uuid: 'sg-intro'
          }, {
            name: '三国演义章节',
            docKey: '三国演义章节',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com/sgyy',
            uuid: 'sg-chapter'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com/sdmz',
            uuid: 'sdmz-intro'
          }]);
        })
      };
      const {
        findByTestId,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      await (0, _everDevTest.waitForTime)(50);
      const toolbar$ = queryByTestId('refblock-toolbar-host');
      expect(toolbar$).not.toBeInTheDocument();
    });
    test('引用源（主块）展示引用列表, 引用计数，并根据引用方聚合', async () => {
      // 默认展示引用计数
      // hover 的二级菜单展示引用列表，顺序根据引用方聚合
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref26)), _ref27));
      const config = {
        getDocKey: () => '四大名著',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com/hlm',
            uuid: 'hl-intro'
          }, {
            name: '西游记简介',
            docKey: '西游记介绍',
            hostDocKey: '西游记',
            url: 'https://www.baidu.com/syj',
            uuid: 'sh-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com/sgyy#intro',
            uuid: 'sg-intro'
          }, {
            name: '三国演义章节',
            docKey: '三国演义章节',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com/sgyy',
            uuid: 'sg-chapter'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com/sdmz',
            uuid: 'sdmz-intro'
          }]);
        })
      };
      const {
        findByTestId,
        findAllByTestId,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      const toolbar$ = await findByTestId('refblock-toolbar-host');
      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      expect(toolbar$).toBeVisible();

      _everDevTest.fireEvent.click(toolbar$);

      const title$ = await findByText(/被以下文档引用了/);
      expect(title$).toBeInTheDocument(); // hover 到标题后，展示列表

      _everDevTest.fireEvent.mouseOver(title$);

      const references = await findAllByTestId('refblock-toolbar-list-item');
      expect(references.map(refer => refer.textContent)).toEqual(['三国演义简介', '三国演义章节', '红楼梦简介', '西游记简介']); // 检查 url 是否符合预期

      const a$ = references[0].querySelector('a');
      expect(a$.href).toBe(encodeURI('https://www.baidu.com/sgyy#intro?id=sg-intro'));
    });
    test('默认的文档 URL 仅返回其 URL', async () => {
      // 默认展示引用计数
      // hover 的二级菜单展示引用列表，顺序根据引用方聚合
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref28)), _ref29));
      const config = {
        getDocURL: undefined,
        getDocKey: () => '四大名著',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com/hlm',
            uuid: 'hl-intro'
          }, {
            name: '西游记简介',
            docKey: '西游记介绍',
            hostDocKey: '西游记',
            url: 'https://www.baidu.com/syj',
            uuid: 'sh-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com/sgyy#intro',
            uuid: 'sg-intro'
          }, {
            name: '三国演义章节',
            docKey: '三国演义章节',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com/sgyy',
            uuid: 'sg-chapter'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com/sdmz',
            uuid: 'sdmz-intro'
          }]);
        })
      };
      const {
        findByTestId,
        findAllByTestId,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      const toolbar$ = await findByTestId('refblock-toolbar-host');
      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      expect(toolbar$).toBeVisible();

      _everDevTest.fireEvent.click(toolbar$);

      const title$ = await findByText(/被以下文档引用了/);
      expect(title$).toBeInTheDocument(); // hover 到标题后，展示列表

      _everDevTest.fireEvent.mouseOver(title$);

      const references = await findAllByTestId('refblock-toolbar-list-item');
      expect(references.map(refer => refer.textContent)).toEqual(['三国演义简介', '三国演义章节', '红楼梦简介', '西游记简介']); // 检查 url 是否符合预期

      const a$ = references[0].querySelector('a');
      expect(a$.href).toBe(encodeURI('https://www.baidu.com/sgyy#intro'));
    });
    test('延迟隐藏工具栏', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref30)), _ref31));
      const config = {
        getDocKey: () => '四大名著',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com',
            uuid: 'hl-intro'
          }, {
            name: '西游记简介',
            docKey: '西游记介绍',
            hostDocKey: '西游记',
            url: 'https://www.baidu.com',
            uuid: 'sh-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-intro'
          }, {
            name: '三国演义章节',
            docKey: '三国演义章节',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-chapter'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com',
            uuid: 'sdmz-intro'
          }]);
        })
      };
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      const toolbar$ = await findByTestId('refblock-toolbar-wrapper');
      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      expect(toolbar$).toBeVisible();

      _everDevTest.fireEvent.mouseLeave(container$);

      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION - 5);
      expect(toolbar$).toBeVisible();
      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      expect(toolbar$).not.toBeVisible();
    });
    test('focus 到引用块时，隐藏工具栏，专注编辑', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref32)), _ref33));
      const config = {
        getDocKey: () => '四大名著',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com',
            uuid: 'hl-intro'
          }, {
            name: '西游记简介',
            docKey: '西游记介绍',
            hostDocKey: '西游记',
            url: 'https://www.baidu.com',
            uuid: 'sh-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-intro'
          }, {
            name: '三国演义章节',
            docKey: '三国演义章节',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-chapter'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com',
            uuid: 'sdmz-intro'
          }]);
        })
      };
      const {
        findByTestId,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      const toolbar$ = await findByTestId('refblock-toolbar-wrapper');
      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      expect(toolbar$).toBeVisible(); // focus 到引用块，工具栏消失

      const textInRefBlock$ = await findByText(/Cangjie/);

      _everDevTest.fireEvent.mouseDown(textInRefBlock$);

      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      expect(toolbar$).not.toBeVisible(); // 在非内容区移动，重新展示工具栏

      _everDevTest.fireEvent.mouseMove(container$);

      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      expect(toolbar$).toBeVisible(); // 移动到内容区，隐藏工具栏

      _everDevTest.fireEvent.mouseEnter(textInRefBlock$);

      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      expect(toolbar$).not.toBeVisible();
    });
    test('禁用工具栏', async () => {
      // 默认展示引用计数
      // hover 的二级菜单展示引用列表，顺序根据引用方聚合
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref34)), _ref35));
      const config = {
        enableToolbar: () => false,
        getDocKey: () => '四大名著',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com',
            uuid: 'hl-intro'
          }, {
            name: '西游记简介',
            docKey: '西游记介绍',
            hostDocKey: '西游记',
            url: 'https://www.baidu.com',
            uuid: 'sh-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-intro'
          }, {
            name: '三国演义章节',
            docKey: '三国演义章节',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-chapter'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com',
            uuid: 'sdmz-intro'
          }]);
        })
      };
      const {
        findByTestId,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      const toolbar$ = queryByTestId('refblock-toolbar-wrapper');
      expect(toolbar$).not.toBeInTheDocument();
    });
    test('引用方（副块）展示引用源、解除引用关系按钮', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '四大名著简介',
          refblockUUID: '四大名著'
        }
      }, _ref36)), _ref37));
      const config = {
        getDocKey: () => '三国演义',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com/hlm',
            uuid: 'hl-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com/sgyy',
            uuid: 'sg-intro'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com/sdmz',
            uuid: '四大名著简介'
          }]);
        })
      };
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      const link$ = await findByTestId('refblock-link-to');
      expect(link$.textContent).toBe('四大名著');
      expect(link$).toBeInTheDocument();
      expect(link$.href).toBe(encodeURI('https://www.baidu.com/sdmz?id=四大名著简介'));
      const detach$ = await findByTestId('refblock-detach');
      expect(detach$).toBeInTheDocument();
    });
    test('引用方（副块）解除引用关系', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '四大名著简介',
          refblockUUID: '四大名著'
        }
      }, _ref38, _ref39)), _ref40));
      const config = {
        detach: () => Promise.resolve(),
        getDocKey: () => '三国演义',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com',
            uuid: 'hl-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-intro'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com',
            uuid: '四大名著简介'
          }]);
        })
      };
      const {
        findByTestId,
        queryByTestId,
        container
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      let refblock$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(refblock$);

      const detach$ = await findByTestId('refblock-detach');

      _everDevTest.fireEvent.click(detach$);

      await (0, _everDevTest.waitForTime)(10); // 解绑后，降级为普通块

      refblock$ = queryByTestId('refblock-container');
      expect(refblock$).not.toBeInTheDocument();
      const paragraphs = Array.from(container.querySelectorAll('[data-type="paragraph"]'));
      expect(paragraphs.map(p => p.textContent)).toEqual(['Hello', 'World', 'Cangjie']);
    });
    test('引用方（副块）解除引用关系失败', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '四大名著简介',
          refblockUUID: '四大名著'
        }
      }, _ref41, _ref42)), _ref43));
      const config = {
        detach: () => Promise.reject(),
        getDocKey: () => '三国演义',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com',
            uuid: 'hl-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-intro'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com',
            uuid: '四大名著简介'
          }]);
        })
      };
      const {
        findByTestId,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      let refblock$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(refblock$);

      const detach$ = await findByTestId('refblock-detach');

      _everDevTest.fireEvent.click(detach$);

      await (0, _everDevTest.waitForTime)(10); // 解绑失败，do nothing

      refblock$ = queryByTestId('refblock-container');
      expect(refblock$).toBeInTheDocument();
    });
    test('复制引用块后，关闭工具栏', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '四大名著简介',
          refblockUUID: '四大名著'
        }
      }, _ref44, _ref45)), _ref46));
      const config = {
        detach: () => Promise.reject(),
        getDocKey: () => '三国演义',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com',
            uuid: 'hl-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-intro'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com',
            uuid: '四大名著简介'
          }]);
        })
      };
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      let refblock$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(refblock$);

      await findByTestId('refblock-toolbar-copy');
      const copy$ = await findByTestId('refblock-copy');

      _everDevTest.fireEvent.click(copy$);

      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      expect(copy$).not.toBeInTheDocument();
    });
    test('只读权限时，不展示复制按钮', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.readOnly
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '四大名著简介',
          refblockUUID: '四大名著'
        }
      }, _ref47, _ref48)), _ref49));
      const config = {
        renderReadOnly: ({
          node
        }) => `${node.data.docKey}-readonly`,
        detach: () => Promise.reject(),
        getDocKey: () => '三国演义',
        getReferenceList: () => new Promise(resolve => {
          resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com',
            uuid: 'hl-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-intro'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com',
            uuid: '四大名著简介'
          }]);
        })
      };
      const {
        findByTestId,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const refblock$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(refblock$);

      await findByTestId('refblock-toolbar-copy');
      const copy$ = queryByTestId('refblock-copy');
      expect(copy$).not.toBeInTheDocument();
    });
    test('加载期间，主块工具栏引用列表展示占位符', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref50)), _ref51));
      const config = {
        getDocKey: () => '四大名著',
        getReferenceList: () => new Promise(resolve => {
          setTimeout(() => {
            resolve([{
              name: '红楼梦简介',
              docKey: '红楼梦简介',
              hostDocKey: '红楼梦',
              url: 'https://www.baidu.com',
              uuid: 'hl-intro'
            }, {
              name: '西游记简介',
              docKey: '西游记介绍',
              hostDocKey: '西游记',
              url: 'https://www.baidu.com',
              uuid: 'sh-intro'
            }, {
              name: '三国演义简介',
              docKey: '三国演义介绍',
              hostDocKey: '三国演义',
              url: 'https://www.baidu.com',
              uuid: 'sg-intro'
            }, {
              name: '三国演义章节',
              docKey: '三国演义章节',
              hostDocKey: '三国演义',
              url: 'https://www.baidu.com',
              uuid: 'sg-chapter'
            }, // 引用块所在的源文档将被过滤
            {
              name: '四大名著',
              docKey: '四大名著介绍',
              hostDocKey: '四大名著',
              url: 'https://www.baidu.com',
              uuid: 'sdmz-intro'
            }]);
          }, 2000);
        })
      };
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      const toolbar$ = await findByTestId('refblock-toolbar-host');
      await (0, _everDevTest.waitForTime)(TOOLBAR_ANIM_DURATION + 10);
      expect(toolbar$).toBeVisible();

      _everDevTest.fireEvent.click(toolbar$);

      await findByTestId('refblock-refer-placeholder');
    });
    test('加载期间，副块工具栏展示引用源占位符', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '四大名著简介',
          refblockUUID: '四大名著'
        }
      }, _ref52)), _ref53));
      const config = {
        getDocKey: () => '三国演义',
        getReferenceList: () => new Promise(resolve => {
          setTimeout(() => resolve([{
            name: '红楼梦简介',
            docKey: '红楼梦简介',
            hostDocKey: '红楼梦',
            url: 'https://www.baidu.com',
            uuid: 'hl-intro'
          }, {
            name: '三国演义简介',
            docKey: '三国演义介绍',
            hostDocKey: '三国演义',
            url: 'https://www.baidu.com',
            uuid: 'sg-intro'
          }, // 引用块所在的源文档将被过滤
          {
            name: '四大名著',
            docKey: '四大名著介绍',
            hostDocKey: '四大名著',
            url: 'https://www.baidu.com',
            uuid: '四大名著简介'
          }]), 2000);
        })
      };
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      await findByTestId('refblock-copy-from-placeholder');
    });
    test('引用列表为空时，主块展示提示', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref54)), _ref55));
      const config = {
        getDocKey: () => '四大名著',
        getReferenceList: () => new Promise(resolve => {
          setTimeout(() => {
            resolve([// 引用块所在的源文档将被过滤
            {
              name: '四大名著',
              docKey: '四大名著介绍',
              hostDocKey: '四大名著',
              url: 'https://www.baidu.com',
              uuid: 'sdmz-intro'
            }]);
          }, 100);
        })
      };
      const {
        findByTestId,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      const toolbar$ = await findByTestId('refblock-toolbar-host');
      await (0, _everDevTest.waitForTime)(150);
      expect(toolbar$).toBeVisible();

      _everDevTest.fireEvent.click(toolbar$);

      await findByText(/暂未被其他文档引用/);
    });
    test('引用列表加载失败时，主块展示提示', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref56)), _ref57));
      const config = {
        getDocKey: () => '四大名著',
        getReferenceList: () => Promise.reject('asd')
      };
      const {
        findByTestId,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refblockConfig: config
      }));
      const container$ = await findByTestId('refblock-container');

      _everDevTest.fireEvent.mouseEnter(container$);

      const toolbar$ = await findByTestId('refblock-toolbar-host');
      await (0, _everDevTest.waitForTime)(150);
      expect(toolbar$).toBeVisible();

      _everDevTest.fireEvent.click(toolbar$);

      await findByText(/暂未被其他文档引用/);
    });
  });
});
//# sourceMappingURL=ui.test.js.map