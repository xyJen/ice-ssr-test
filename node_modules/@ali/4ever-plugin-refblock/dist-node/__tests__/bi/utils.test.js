"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

var _everComponent = require("@ali/4ever-component");

var _models = _interopRequireWildcard(require("../../mo/models"));

var _logic = require("../../utils/logic");

var _ccp = require("../../bi/utils/ccp");

var _value = require("../../utils/value");

var _draggable = require("../../utils/draggable");

var _roles = require("../../utils/roles");

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie"));

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro");

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro");

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro");

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null));

var _ref14 = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie"));

var _ref15 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro");

var _ref16 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref17 = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie"));

var _ref18 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro")));

var _ref19 = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie"));

var _ref20 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null));

var _ref21 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null));

var _ref22 = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie"));

var _ref23 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro");

var _ref24 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref25 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Intro");

var _ref26 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref27 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("cursor", null));

var _ref28 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref29 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Hello");

var _ref30 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World", (0, _everDevTest.jsx)("focus", null));

var _ref31 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World", (0, _everDevTest.jsx)("anchor", null));

var _ref32 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("focus", null), "Hello");

var _ref33 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World")));

var _ref34 = (0, _everDevTest.jsx)("block", {
  type: "image",
  cursor: "before"
});

var _ref35 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("focus", null), "Hello");

var _ref36 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("focus", null), "Hello");

var _ref37 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello"))));

var _ref38 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref39 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref40 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref41 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref42 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Hello");

var _ref43 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World", (0, _everDevTest.jsx)("focus", null));

var _ref44 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Hello");

var _ref45 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World", (0, _everDevTest.jsx)("focus", null));

var _ref46 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Intro");

var _ref47 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref48 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World", (0, _everDevTest.jsx)("focus", null));

var _ref49 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Intro", (0, _everDevTest.jsx)("focus", null));

var _ref50 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref51 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref52 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World", (0, _everDevTest.jsx)("cursor", null));

var _ref53 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref54 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Word");

var _ref55 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref56 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null));

var _ref57 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null));

var _ref58 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref59 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello");

var _ref60 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World");

var _ref61 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie");

var _ref62 = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Cangjie"));

describe('Bi/refblock/uitls', () => {
  describe('#getRefBlockMap', () => {
    test('no refblocks', () => {
      const document = _ref;
      expect((0, _value.getRefBlockMap)(document)).toEqual({});
    });
    test('contains same refblocks', () => {
      const document = (0, _everDevTest.jsx)("document", null, _ref2, _ref3, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'a-0'
        }
      }, _ref4), (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'a-1'
        }
      }, _ref5));
      expect((0, _value.getRefBlockMap)(document)).toEqual({
        'doc-a': [{
          nodeKey: document.getNodeByPath([2]).key,
          uuid: 'a-0'
        }, {
          nodeKey: document.getNodeByPath([3]).key,
          uuid: 'a-1'
        }]
      });
    });
    test('contains different refblocks', () => {
      const document = (0, _everDevTest.jsx)("document", null, _ref6, _ref7, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'a'
        }
      }, _ref8), (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-b',
          refblockUUID: 'b'
        }
      }, _ref9));
      expect((0, _value.getRefBlockMap)(document)).toEqual({
        'doc-a': [{
          nodeKey: document.getNodeByPath([2]).key,
          uuid: 'a'
        }],
        'doc-b': [{
          nodeKey: document.getNodeByPath([3]).key,
          uuid: 'b'
        }]
      });
    });
    test('contains deeper refblocks', () => {
      const document = (0, _everDevTest.jsx)("document", null, _ref10, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'a'
        }
      }, _ref11)), (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-b',
          refblockUUID: 'b'
        }
      }, _ref12));
      expect((0, _value.getRefBlockMap)(document)).toEqual({
        'doc-a': [{
          nodeKey: document.getNodeByPath([1, 0]).key,
          uuid: 'a'
        }],
        'doc-b': [{
          nodeKey: document.getNodeByPath([2]).key,
          uuid: 'b'
        }]
      });
    });
  });
  describe('#refreshRefBlockByKey', () => {
    test('refresh refblock content', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref13)));
      const docA = _ref14;
      const expected = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref15, _ref16)));
      const refblock = value.document.assertNodeByPath([0]);
      const newDocument = (0, _value.refreshRefBlockByKey)(value, refblock.key, docA);
      expect(newDocument.toJSON()).toEqual(expected.toJSON());
    });
    test('throw error if node is not exists', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      })));
      const docA = _ref17;
      expect(() => (0, _value.refreshRefBlockByKey)(value, 'invalid-key', docA)).toThrow();
    });
    test('throw error if node is not a refblock', () => {
      const value = _ref18;
      const docA = _ref19;
      const node = value.document.assertNodeByPath([0]);
      expect(() => (0, _value.refreshRefBlockByKey)(value, node.key, docA)).toThrow();
    });
  });
  describe('#refreshRefBlockByDocKey', () => {
    test('refresh refblock content', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref20), (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref21)));
      const docA = _ref22;
      const expected = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref23, _ref24), (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a'
        }
      }, _ref25, _ref26)));
      const newDocument = (0, _value.refreshRefBlockByDocKey)(value, 'doc-a', docA);
      expect(newDocument.toJSON()).toEqual(expected.toJSON());
    });
  });
  describe('#isSelectionInRefBlock', () => {
    test('refblocks contains the selection', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref27, _ref28)));
      expect((0, _logic.isSelectionInRefBlock)(value)).toBe(true);
    });
    test('selection start in refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref29), _ref30));
      expect((0, _logic.isSelectionInRefBlock)(value)).toBe(true);
    });
    test('selection end in refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref31, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref32)));
      expect((0, _logic.isSelectionInRefBlock)(value)).toBe(true);
    });
    test('selection is null', () => {
      const value = _ref33; // @ts-ignore

      expect((0, _logic.isSelectionInRefBlock)(value.setSelection(null))).toBe(false);
    });
    test('edge selection in refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: 'doc-a',
          refblockUUID: 'doc-a'
        }
      }, _ref34)));
      expect((0, _logic.isSelectionInRefBlock)(value)).toBe(true);
    });
  });
  describe('#isNodeInReadOnlyRefBlock', () => {
    test('node in readonly refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.readOnly
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref35))));
      const node = value.document.assertNodeByPath([0, 0]);
      expect((0, _logic.isInReadOnlyRefBlock)(value, node)).toBe(true);
    });
    test('node not in readonly refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("injection", {
        data: {
          status: _models.RefBlockStatus.normal
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref36))));
      const node = value.document.assertNodeByPath([0, 0]);
      expect((0, _logic.isInReadOnlyRefBlock)(value, node)).toBe(false);
    });
    test('node not in refblock', () => {
      const value = _ref37;
      const node = value.document.assertNodeByPath([0, 0]);
      expect((0, _logic.isInReadOnlyRefBlock)(value, node)).toBe(false);
    });
  });
  describe('#isNodeInRefBlock', () => {
    test('node inside a refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref38)));
      const node = value.document.assertNodeByPath([0, 0]);
      expect((0, _logic.isInRefBlock)(value, node)).toBe(true);
    });
    test('node not inside a refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref39), _ref40));
      const node = value.document.assertNodeByPath([1]);
      expect((0, _logic.isInRefBlock)(value, node)).toBe(false);
    });
  });
  describe('Draggeble Menu', () => {
    test('show menu if current block is a refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref41)));
      const block = value.document.getNodeByPath([0]);
      const copy = jest.fn();
      const menu = (0, _draggable.getRefBlockDragMenuItems)({
        block,
        value,
        locale: {
          copyAsRefBlock: '复制为引用块'
        },
        disableNodeInRefBlock: node => _models.default.isRefBlock(node),
        onCopyAsRefBlock: _lodash.noop,
        onCopyRefBlock: copy
      });
      expect(menu).toEqual([{
        type: _everComponent.TYPE_MENU_ITEM,
        title: '复制为引用块',
        role: _roles.RefBlockRole,
        icon: expect.anything(),
        menuExtraKey: 'copyAsRefBlock',
        onClick: expect.anything()
      }]);
      menu[0].onClick();
      expect(copy).toBeCalledWith(block);
    });
    test('show refblock menu item if current block is in a refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref42), _ref43));
      const block = value.document.getNodeByPath([0, 0]);
      const refblock = value.document.getNodeByPath([0]);
      const copy = jest.fn();
      const menu = (0, _draggable.getRefBlockDragMenuItems)({
        block,
        value,
        locale: {
          copyAsRefBlock: '复制为引用块'
        },
        disableNodeInRefBlock: node => _models.default.isRefBlock(node),
        onCopyAsRefBlock: _lodash.noop,
        onCopyRefBlock: copy
      });
      expect(menu).toEqual([{
        type: _everComponent.TYPE_MENU_ITEM,
        title: '复制为引用块',
        role: _roles.RefBlockRole,
        icon: expect.anything(),
        menuExtraKey: 'copyAsRefBlock',
        onClick: expect.anything()
      }]);
      menu[0].onClick();
      expect(copy).toBeCalledWith(refblock);
    });
    test('hide refblock menu item if selection is in a refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref44), _ref45));
      const block = value.document.getNodeByPath([1]);
      expect((0, _draggable.getRefBlockDragMenuItems)({
        block,
        value,
        disableNodeInRefBlock: node => false,
        locale: {
          copyAsRefBlock: '复制为引用块'
        },
        onCopyAsRefBlock: _lodash.noop,
        onCopyRefBlock: _lodash.noop
      })).toEqual([]);
    });
    test('hide refblock menu item if selection contains unsupported node', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref46, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref47), _ref48));
      const block = value.document.getNodeByPath([0]);
      expect((0, _draggable.getRefBlockDragMenuItems)({
        block,
        value,
        locale: {
          copyAsRefBlock: '复制为引用块'
        },
        disableNodeInRefBlock: node => _models.default.isRefBlock(node),
        onCopyAsRefBlock: _lodash.noop,
        onCopyRefBlock: _lodash.noop
      })).toEqual([]);
    });
    test('hide refblock menu item if selection contains nested unsupported node', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref49, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref50))));
      const block = value.document.getNodeByPath([1]);
      expect((0, _draggable.getRefBlockDragMenuItems)({
        block,
        value,
        locale: {
          copyAsRefBlock: '复制为引用块'
        },
        disableNodeInRefBlock: node => _models.default.isRefBlock(node),
        onCopyAsRefBlock: _lodash.noop,
        onCopyRefBlock: _lodash.noop
      })).toEqual([]);
    });
    test('show refblock menu item if block is a non-refblock', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref51), _ref52));
      const block = value.document.getNodeByPath([1]);
      expect((0, _draggable.getRefBlockDragMenuItems)({
        block,
        value,
        disableNodeInRefBlock: () => false,
        locale: {
          copyAsRefBlock: '复制为引用块'
        },
        onCopyAsRefBlock: _lodash.noop,
        onCopyRefBlock: _lodash.noop
      })).toEqual([{
        type: _everComponent.TYPE_MENU_ITEM,
        title: '复制为引用块',
        role: _roles.RefBlockRole,
        icon: expect.anything(),
        menuExtraKey: 'copyAsRefBlock',
        onClick: _lodash.noop
      }]);
    });
  });
  describe('ccp', () => {
    test('#cropRefblockInFragment', () => {
      const fragment = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义',
          refblockUUID: 'sg'
        }
      }, _ref53), (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '红楼梦',
          refblockUUID: 'hl'
        }
      }, _ref54), _ref55);
      const expected = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义'
        }
      }, _ref56), (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '红楼梦'
        }
      }, _ref57), _ref58);
      expect((0, _ccp.cropRefBlockInFragment)(fragment).toJSON()).toEqual(expected.toJSON());
    });
    test('#unwrapRefBlock', () => {
      const fragment = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '三国演义',
          refblockUUID: 'sg',
          needCCP: true
        }
      }, _ref59), (0, _everDevTest.jsx)("block", {
        type: "refblock",
        data: {
          docKey: '红楼梦',
          refblockUUID: 'hl'
        }
      }, _ref60), _ref61);
      const expected = _ref62;
      expect((0, _ccp.unwrapRefBlock)(fragment).toJSON()).toEqual(expected.toJSON());
    });
  });
});
//# sourceMappingURL=utils.test.js.map