{"version":3,"sources":["../../../src/utils/logic.ts"],"names":["isSelectionInRefBlock","value","getClosestRefBlockInSelection","container","document","selection","isRefBlock","node","RefBlock","start","end","sort","startRefBlock","getClosest","key","endRefBlock","isStatus","status","refblock","injections","find","data","isReadOnly","RefBlockStatus","readOnly","isInReadOnlyRefBlock","isInRefBlock","isSyncHetuNode","Element","isElement","metadata","sync"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASA,qBAAT,CAA+BC,KAA/B,EAA6C;AAClD,SAAOC,6BAA6B,CAACD,KAAD,CAA7B,KAAyC,IAAhD;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASC,6BAAT,CACLD,KADK,EAELE,SAFK,EAGL;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BJ,KAAhC;;AACA,MAAI,CAACI,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AACD,WAASC,UAAT,CAAoBC,IAApB,EAAgC;AAC9B,WAAOC,gBAASF,UAAT,CAAoBC,IAApB,KAA6BA,IAAI,KAAKJ,SAA7C;AACD;;AAED,QAAM;AAAEM,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAiBL,SAAS,CAACM,IAAV,CAAeP,QAAf,CAAvB;AACA,QAAMQ,aAAa,GAAGR,QAAQ,CAACS,UAAT,CAAoBJ,KAAK,CAACK,GAA1B,EAA+BR,UAA/B,CAAtB;;AACA,MAAIM,aAAJ,EAAmB;AACjB,WAAOA,aAAP;AACD;;AAED,QAAMG,WAAW,GAAGX,QAAQ,CAACS,UAAT,CAAoBH,GAAG,CAACI,GAAxB,EAA6BR,UAA7B,CAApB;;AACA,MAAIS,WAAJ,EAAiB;AACf,WAAOA,WAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED,MAAMC,QAAQ,GAAIC,MAAD,IAA4B;AAC3C,SAAO,CAAChB,KAAD,EAAeiB,QAAf,KAAsC;AAC3C,UAAM;AAAEC,MAAAA;AAAF,QAAiBlB,KAAvB;AAEA,WAAO,CAAC,CAACkB,UAAU,CAACC,IAAX,CACP,CAAC;AAAEN,MAAAA,GAAF;AAAOO,MAAAA;AAAP,KAAD,KAAmBP,GAAG,KAAKI,QAAQ,CAACJ,GAAjB,IAAwBO,IAAI,EAAEJ,MAAN,KAAiBA,MADrD,CAAT;AAGD,GAND;AAOD,CARD;AAUA;AACA;AACA;AACA;AACA;;;AACO,MAAMK,UAAU,GAAGN,QAAQ,CAACO,uBAAeC,QAAhB,CAA3B;AAEP;AACA;AACA;AACA;AACA;;;;AACO,SAASC,oBAAT,CAA8BxB,KAA9B,EAA4CM,IAA5C,EAAwD;AAC7D,QAAM;AAAEH,IAAAA;AAAF,MAAeH,KAArB;AACA,QAAMiB,QAAQ,GAAGd,QAAQ,CAACS,UAAT,CAAoBN,IAAI,CAACO,GAAzB,EAA+BP,IAAD,IAC7CC,gBAASF,UAAT,CAAoBC,IAApB,CADe,CAAjB;;AAGA,MAAI,CAACW,QAAL,EAAe;AACb,WAAO,KAAP;AACD;;AAED,SAAOI,UAAU,CAACrB,KAAD,EAAQiB,QAAR,CAAjB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASQ,YAAT,CAAsBzB,KAAtB,EAAoCM,IAApC,EAAgD;AACrD,QAAM;AAAEH,IAAAA;AAAF,MAAeH,KAArB;AACA,QAAMiB,QAAQ,GAAGd,QAAQ,CAACS,UAAT,CAAoBN,IAAI,CAACO,GAAzB,EAA+BP,IAAD,IAC7CC,gBAASF,UAAT,CAAoBC,IAApB,CADe,CAAjB;AAGA,SAAO,CAAC,CAACW,QAAT;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASS,cAAT,CAAwBpB,IAAxB,EAAoC;AACzC,SAAOqB,qBAAQC,SAAR,CAAkBtB,IAAlB,KAA2B,CAAC,CAACA,IAAI,CAACc,IAAL,EAAWS,QAAX,EAAqBC,IAAzD;AACD","sourcesContent":["import { Value, Node, Element } from '@ali/4ever-cangjie';\nimport RefBlock, { RefBlockStatus } from '../mo/models';\n\n/**\n * 当前选区是否位于引用块内\n * @param controller\n * @returns\n */\nexport function isSelectionInRefBlock(value: Value) {\n  return getClosestRefBlockInSelection(value) !== null;\n}\n\n/**\n * 获得距离选区最近的引用块\n * @param value\n * @returns\n */\nexport function getClosestRefBlockInSelection(\n  value: Value,\n  container?: Element,\n) {\n  const { document, selection } = value;\n  if (!selection) {\n    return null;\n  }\n  function isRefBlock(node: Node) {\n    return RefBlock.isRefBlock(node) && node !== container;\n  }\n\n  const { start, end } = selection.sort(document);\n  const startRefBlock = document.getClosest(start.key, isRefBlock);\n  if (startRefBlock) {\n    return startRefBlock;\n  }\n\n  const endRefBlock = document.getClosest(end.key, isRefBlock);\n  if (endRefBlock) {\n    return endRefBlock;\n  }\n\n  return null;\n}\n\nconst isStatus = (status: RefBlockStatus) => {\n  return (value: Value, refblock: RefBlock) => {\n    const { injections } = value;\n\n    return !!injections.find(\n      ({ key, data }) => key === refblock.key && data?.status === status,\n    );\n  };\n};\n\n/**\n * 判断 refblock 是否只读\n * @param controller\n * @param refblock\n */\nexport const isReadOnly = isStatus(RefBlockStatus.readOnly);\n\n/**\n * 判断节点是否存在于只读的引用块\n * @param controller\n * @param node\n */\nexport function isInReadOnlyRefBlock(value: Value, node: Node) {\n  const { document } = value;\n  const refblock = document.getClosest(node.key, (node) =>\n    RefBlock.isRefBlock(node),\n  );\n  if (!refblock) {\n    return false;\n  }\n\n  return isReadOnly(value, refblock as RefBlock);\n}\n\n/**\n * 判断节点是否在引用块中\n * @param value\n * @param node\n * @returns\n */\nexport function isInRefBlock(value: Value, node: Node) {\n  const { document } = value;\n  const refblock = document.getClosest(node.key, (node) =>\n    RefBlock.isRefBlock(node),\n  );\n  return !!refblock;\n}\n\n/**\n * 是否是河图同步节点\n * @param node\n * @returns\n */\nexport function isSyncHetuNode(node: Node) {\n  return Element.isElement(node) && !!node.data?.metadata?.sync;\n}\n"],"file":"logic.js"}