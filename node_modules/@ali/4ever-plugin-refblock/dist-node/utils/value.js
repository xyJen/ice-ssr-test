"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRefBlockMap = getRefBlockMap;
exports.refreshRefBlockByKey = refreshRefBlockByKey;
exports.refreshRefBlockByDocKey = refreshRefBlockByDocKey;

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireDefault(require("../mo/models"));

// docKey: [{ nodeKey, uuid }]

/**
 * 获得引用块的 key 映射表 { docKey: [{ nodeKey, uuid }] }
 *
 * ## Example
 *
 * ```tsx
 * const document = (
 *   <document>
 *     <paragraph key="0">Introduction</paragraph>
 *     <refblock docKey="doc-a" uuid="a-0" key="1">
 *       <paragraph>Cangjie Editor</paragraph>
 *     </refblock>
 *     <refblock docKey="doc-a" uuid="a-1" key="2">
 *       <paragraph>Cangjie Editor</paragraph>
 *     </refblock>
 *     <refblock docKey="doc-b" uuid="b-0" key="3">
 *       <paragraph>Commands</paragraph>
 *     </refblock>
 *   </document>
 * );
 *
 * const refblockMap = getRefBlockMap(document);
 *
 * // refblock map is:
 * // {
 * //   'doc-a': [{nodeKey: '1', uuid: 'a-0'}, {nodeKey: '2', uuid: 'a-1'}],
 * //   'doc-b': [{nodeKey: '3', uuid: 'b-0'}]
 * // }
 * ```
 * @param document
 * @returns
 */
function getRefBlockMap(document) {
  const refblocks = document.filterDescendants(node => _models.default.isRefBlock(node));
  return refblocks.reduce((map, refblock) => {
    const key = refblock.data.docKey;

    if (!map[key]) {
      map[key] = [];
    }

    map[key].push({
      nodeKey: refblock.key,
      uuid: refblock.data.refblockUUID
    });
    return map;
  }, {});
}
/**
 * 根据 node key 刷新引用块
 *
 * ## Example
 *
 * ```tsx
 * const value = (
 *   <value>
 *     <document>
 *       <paragraph key="0">Introduction</paragraph>
 *       <refblock docKey="doc-a" key="1"/>
 *     </document>
 *   </value>
 * );
 *
 * const docA = (
 *   <document>
 *     <paragraph>JavaScript</paragraph>
 *     <code lang="javascript">const a = 1;</code>
 *   </document>
 * );
 *
 * const newValue = refreshRefBlockByKey(document, '1', docA);
 * // newValue is:
 * // (
 * //   <value>
 * //     <document>
 * //       <paragraph key="0">Introduction</paragraph>
 * //       <refblock docKey="doc-a" key="1">
 * //         <paragraph>JavaScript</paragraph>
 * //         <code lang="javascript">const a = 1;</code>
 * //       </refblock>
 * //     </document>
 * //   </value>
 * // )
 * ```
 * @param document
 * @param nodeKey
 * @param refblockDocument
 */


function refreshRefBlockByKey(value, nodeKey, refblockDocument, uuidKey = 'uuid') {
  const {
    document
  } = value;
  const path = document.assertPath(nodeKey);
  const node = document.assertNodeByPath(path);

  if (!_models.default.isRefBlock(node)) {
    throw new Error( // @ts-ignore
    `node ${node.key} is not a refblock, type is: ${node.type}`);
  }

  let newValue = value; // 清空原 refblock children

  node.nodes.forEach(child => {
    const childPath = [...path, 0];
    const removeNodeOp = {
      type: _everCangjie.OperationType.RemoveNode,
      path: childPath,
      node: child
    };
    newValue = newValue.applyOperation(removeNodeOp);
  }); // 注入 refblock document，并替换其中的 uuid，防止多个相同引用块中，出现重复的 uuid

  _models.default.regenerateChildrenUUID(refblockDocument, node.data.refblockUUID, uuidKey).nodes.forEach((child, index) => {
    const childPath = [...path, index];
    const insertNodeOp = {
      type: _everCangjie.OperationType.InsertNode,
      path: childPath,
      node: child
    };
    newValue = newValue.applyOperation(insertNodeOp);
  });

  return newValue;
}
/**
 * 根据 doc key 刷新引用块
 *
 * ## Example
 *
 * ```tsx
 * const value = (
 *   <value>
 *     <document>
 *       <paragraph key="0">Introduction</paragraph>
 *       <refblock docKey="doc-a"/>
 *       <refblock docKey="doc-a"/>
 *     </document>
 *   </value>
 * );
 *
 * const docA = (
 *   <document>
 *     <paragraph>JavaScript</paragraph>
 *     <code lang="javascript">const a = 1;</code>
 *   </document>
 * );
 *
 * const newValue = refreshRefBlockByDocKey(document, 'doc-a', docA);
 * // newValue is:
 * // (
 * //   <value>
 * //     <document>
 * //       <paragraph key="0">Introduction</paragraph>
 * //       <refblock docKey="doc-a">
 * //         <paragraph>JavaScript</paragraph>
 * //         <code lang="javascript">const a = 1;</code>
 * //       </refblock>
 * //       <refblock docKey="doc-a">
 * //         <paragraph>JavaScript</paragraph>
 * //         <code lang="javascript">const a = 1;</code>
 * //       </refblock>
 * //     </document>
 * //   </value>
 * // )
 * ```
 * @param document
 * @param nodeKey
 * @param refblockDocument
 */


function refreshRefBlockByDocKey(value, docKey, refblockDocument) {
  let newValue = value;
  value.document.forEachDescendant(node => {
    if (_models.default.isRefBlock(node) && node.data.docKey === docKey) {
      newValue = refreshRefBlockByKey(newValue, node.key, refblockDocument);
    }
  });
  return newValue;
}
//# sourceMappingURL=value.js.map