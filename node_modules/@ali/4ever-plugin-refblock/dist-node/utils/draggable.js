"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRefBlockDragMenuItems = getRefBlockDragMenuItems;

var React = _interopRequireWildcard(require("react"));

var _weIcon = require("@ali/we-icon");

var _everComponent = require("@ali/4ever-component");

var _logic = require("./logic");

var _roles = require("./roles");

var _models = _interopRequireDefault(require("../mo/models"));

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_weIcon.CopyblocklinkNormal, null);

/**
 * 获得引用块拖拽项目
 * @param options
 * @returns
 */
function getRefBlockDragMenuItems(options) {
  const {
    block,
    locale,
    value,
    disableNodeInRefBlock,
    onCopyAsRefBlock,
    onCopyRefBlock
  } = options;
  const item = {
    type: _everComponent.TYPE_MENU_ITEM,
    title: locale?.copyAsRefBlock,
    icon: _ref,
    role: _roles.RefBlockRole,
    menuExtraKey: 'copyAsRefBlock',
    onClick: onCopyAsRefBlock
  };

  function containsForbiddenItems(element) {
    return !!element.findDescendant(disableNodeInRefBlock);
  } // 如果当前 block 已经是引用块，则复制引用块自身


  if (_models.default.isRefBlock(block)) {
    return [{ ...item,
      onClick: () => onCopyRefBlock(block)
    }];
  } // 如果当前在引用块内部，则复制引用块自身


  if ((0, _logic.isInRefBlock)(value, block)) {
    const refblock = value.document.getClosest(block.key, node => _models.default.isRefBlock(node));
    return [{ ...item,
      onClick: () => onCopyRefBlock(refblock)
    }];
  }

  if (disableNodeInRefBlock(block) || containsForbiddenItems(block)) {
    return [];
  }

  if (value.blocks.includes(block) && ((0, _logic.isSelectionInRefBlock)(value) || containsForbiddenItems(value.fragment))) {
    return [];
  }

  return [item];
}
//# sourceMappingURL=draggable.js.map