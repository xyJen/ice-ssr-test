"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSelectionInRefBlock = isSelectionInRefBlock;
exports.getClosestRefBlockInSelection = getClosestRefBlockInSelection;
exports.isInReadOnlyRefBlock = isInReadOnlyRefBlock;
exports.isInRefBlock = isInRefBlock;
exports.isSyncHetuNode = isSyncHetuNode;
exports.isReadOnly = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireWildcard(require("../mo/models"));

/**
 * 当前选区是否位于引用块内
 * @param controller
 * @returns
 */
function isSelectionInRefBlock(value) {
  return getClosestRefBlockInSelection(value) !== null;
}
/**
 * 获得距离选区最近的引用块
 * @param value
 * @returns
 */


function getClosestRefBlockInSelection(value, container) {
  const {
    document,
    selection
  } = value;

  if (!selection) {
    return null;
  }

  function isRefBlock(node) {
    return _models.default.isRefBlock(node) && node !== container;
  }

  const {
    start,
    end
  } = selection.sort(document);
  const startRefBlock = document.getClosest(start.key, isRefBlock);

  if (startRefBlock) {
    return startRefBlock;
  }

  const endRefBlock = document.getClosest(end.key, isRefBlock);

  if (endRefBlock) {
    return endRefBlock;
  }

  return null;
}

const isStatus = status => {
  return (value, refblock) => {
    const {
      injections
    } = value;
    return !!injections.find(({
      key,
      data
    }) => key === refblock.key && data?.status === status);
  };
};
/**
 * 判断 refblock 是否只读
 * @param controller
 * @param refblock
 */


const isReadOnly = isStatus(_models.RefBlockStatus.readOnly);
/**
 * 判断节点是否存在于只读的引用块
 * @param controller
 * @param node
 */

exports.isReadOnly = isReadOnly;

function isInReadOnlyRefBlock(value, node) {
  const {
    document
  } = value;
  const refblock = document.getClosest(node.key, node => _models.default.isRefBlock(node));

  if (!refblock) {
    return false;
  }

  return isReadOnly(value, refblock);
}
/**
 * 判断节点是否在引用块中
 * @param value
 * @param node
 * @returns
 */


function isInRefBlock(value, node) {
  const {
    document
  } = value;
  const refblock = document.getClosest(node.key, node => _models.default.isRefBlock(node));
  return !!refblock;
}
/**
 * 是否是河图同步节点
 * @param node
 * @returns
 */


function isSyncHetuNode(node) {
  return _everCangjie.Element.isElement(node) && !!node.data?.metadata?.sync;
}
//# sourceMappingURL=logic.js.map