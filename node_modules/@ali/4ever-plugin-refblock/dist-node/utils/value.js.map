{"version":3,"sources":["../../../src/utils/value.ts"],"names":["getRefBlockMap","document","refblocks","filterDescendants","node","RefBlock","isRefBlock","reduce","map","refblock","key","data","docKey","push","nodeKey","uuid","refblockUUID","refreshRefBlockByKey","value","refblockDocument","uuidKey","path","assertPath","assertNodeByPath","Error","type","newValue","nodes","forEach","child","childPath","removeNodeOp","OperationType","RemoveNode","applyOperation","regenerateChildrenUUID","index","insertNodeOp","InsertNode","refreshRefBlockByDocKey","forEachDescendant"],"mappings":"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","sourcesContent":["import {\n  Document,\n  InsertNodeOperation,\n  OperationType,\n  RemoveNodeOperation,\n  Value,\n} from '@ali/4ever-cangjie';\nimport RefBlock from '../mo/models';\n\nexport type RefBlockMap = Record<string, Array<{ nodeKey: string; uuid?: string }>>; // docKey: [{ nodeKey, uuid }]\n\n/**\n * 获得引用块的 key 映射表 { docKey: [{ nodeKey, uuid }] }\n *\n * ## Example\n *\n * ```tsx\n * const document = (\n *   <document>\n *     <paragraph key=\"0\">Introduction</paragraph>\n *     <refblock docKey=\"doc-a\" uuid=\"a-0\" key=\"1\">\n *       <paragraph>Cangjie Editor</paragraph>\n *     </refblock>\n *     <refblock docKey=\"doc-a\" uuid=\"a-1\" key=\"2\">\n *       <paragraph>Cangjie Editor</paragraph>\n *     </refblock>\n *     <refblock docKey=\"doc-b\" uuid=\"b-0\" key=\"3\">\n *       <paragraph>Commands</paragraph>\n *     </refblock>\n *   </document>\n * );\n *\n * const refblockMap = getRefBlockMap(document);\n *\n * // refblock map is:\n * // {\n * //   'doc-a': [{nodeKey: '1', uuid: 'a-0'}, {nodeKey: '2', uuid: 'a-1'}],\n * //   'doc-b': [{nodeKey: '3', uuid: 'b-0'}]\n * // }\n * ```\n * @param document\n * @returns\n */\nexport function getRefBlockMap(document: Document): RefBlockMap {\n  const refblocks = document.filterDescendants((node) =>\n    RefBlock.isRefBlock(node)) as RefBlock[];\n  return refblocks.reduce<RefBlockMap>((map, refblock) => {\n    const key = refblock.data.docKey!;\n    if (!map[key]) {\n      map[key] = [];\n    }\n    map[key].push({\n      nodeKey: refblock.key,\n      uuid: refblock.data.refblockUUID,\n    });\n    return map;\n  }, {});\n}\n\n/**\n * 根据 node key 刷新引用块\n *\n * ## Example\n *\n * ```tsx\n * const value = (\n *   <value>\n *     <document>\n *       <paragraph key=\"0\">Introduction</paragraph>\n *       <refblock docKey=\"doc-a\" key=\"1\"/>\n *     </document>\n *   </value>\n * );\n *\n * const docA = (\n *   <document>\n *     <paragraph>JavaScript</paragraph>\n *     <code lang=\"javascript\">const a = 1;</code>\n *   </document>\n * );\n *\n * const newValue = refreshRefBlockByKey(document, '1', docA);\n * // newValue is:\n * // (\n * //   <value>\n * //     <document>\n * //       <paragraph key=\"0\">Introduction</paragraph>\n * //       <refblock docKey=\"doc-a\" key=\"1\">\n * //         <paragraph>JavaScript</paragraph>\n * //         <code lang=\"javascript\">const a = 1;</code>\n * //       </refblock>\n * //     </document>\n * //   </value>\n * // )\n * ```\n * @param document\n * @param nodeKey\n * @param refblockDocument\n */\nexport function refreshRefBlockByKey(\n  value: Value,\n  nodeKey: string,\n  refblockDocument: Document,\n  uuidKey = 'uuid',\n): Value {\n  const { document } = value;\n  const path = document.assertPath(nodeKey);\n  const node = document.assertNodeByPath(path);\n  if (!RefBlock.isRefBlock(node)) {\n    throw new Error(\n      // @ts-ignore\n      `node ${node.key} is not a refblock, type is: ${node.type}`,\n    );\n  }\n  let newValue = value;\n  // 清空原 refblock children\n  node.nodes.forEach((child) => {\n    const childPath = [...path, 0];\n    const removeNodeOp: RemoveNodeOperation = {\n      type: OperationType.RemoveNode,\n      path: childPath,\n      node: child,\n    };\n    newValue = newValue.applyOperation(removeNodeOp);\n  });\n  // 注入 refblock document，并替换其中的 uuid，防止多个相同引用块中，出现重复的 uuid\n  RefBlock.regenerateChildrenUUID(\n    refblockDocument,\n    node.data.refblockUUID!,\n    uuidKey,\n  ).nodes.forEach((child, index) => {\n    const childPath = [...path, index];\n    const insertNodeOp: InsertNodeOperation = {\n      type: OperationType.InsertNode,\n      path: childPath,\n      node: child,\n    };\n    newValue = newValue.applyOperation(insertNodeOp);\n  });\n\n  return newValue;\n}\n\n/**\n * 根据 doc key 刷新引用块\n *\n * ## Example\n *\n * ```tsx\n * const value = (\n *   <value>\n *     <document>\n *       <paragraph key=\"0\">Introduction</paragraph>\n *       <refblock docKey=\"doc-a\"/>\n *       <refblock docKey=\"doc-a\"/>\n *     </document>\n *   </value>\n * );\n *\n * const docA = (\n *   <document>\n *     <paragraph>JavaScript</paragraph>\n *     <code lang=\"javascript\">const a = 1;</code>\n *   </document>\n * );\n *\n * const newValue = refreshRefBlockByDocKey(document, 'doc-a', docA);\n * // newValue is:\n * // (\n * //   <value>\n * //     <document>\n * //       <paragraph key=\"0\">Introduction</paragraph>\n * //       <refblock docKey=\"doc-a\">\n * //         <paragraph>JavaScript</paragraph>\n * //         <code lang=\"javascript\">const a = 1;</code>\n * //       </refblock>\n * //       <refblock docKey=\"doc-a\">\n * //         <paragraph>JavaScript</paragraph>\n * //         <code lang=\"javascript\">const a = 1;</code>\n * //       </refblock>\n * //     </document>\n * //   </value>\n * // )\n * ```\n * @param document\n * @param nodeKey\n * @param refblockDocument\n */\nexport function refreshRefBlockByDocKey(\n  value: Value,\n  docKey: string,\n  refblockDocument: Document,\n): Value {\n  let newValue = value;\n  value.document.forEachDescendant((node) => {\n    if (RefBlock.isRefBlock(node) && node.data.docKey === docKey) {\n      newValue = refreshRefBlockByKey(newValue, node.key, refblockDocument);\n    }\n  });\n  return newValue;\n}\n"],"file":"value.js"}