"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RefBlockStatus = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _meta = require("../../utils/meta");

let RefBlockStatus;
/** 引用块 Injection */

exports.RefBlockStatus = RefBlockStatus;

(function (RefBlockStatus) {
  RefBlockStatus["normal"] = "normal";
  RefBlockStatus["deleted"] = "deleted";
  RefBlockStatus["loading"] = "loading";
  RefBlockStatus["forbidden"] = "forbidden";
  RefBlockStatus["readOnly"] = "readOnly";
  RefBlockStatus["invalid"] = "invalid";
  RefBlockStatus["disconnected"] = "disconnected";
})(RefBlockStatus || (exports.RefBlockStatus = RefBlockStatus = {}));

class RefBlock extends _everCangjie.Block {
  static create(properties) {
    if (typeof properties === 'string') {
      throw new Error('`RefBlock.create` does not accept string');
    }

    if (RefBlock.isRefBlock(properties)) {
      return properties;
    }

    return super.create({ ...properties,
      type: RefBlock.TYPE
    });
  }

  static isRefBlock(maybeRefBlock) {
    return _everCangjie.Block.isBlock(maybeRefBlock) && maybeRefBlock.type === RefBlock.TYPE;
  }

  static isVoid(controller, node) {
    if (!RefBlock.isRefBlock(node)) {
      return false;
    } else if (node.data.pi || node.data.isPageMode) {
      // Pi 下通过 node.data 判断状态
      return node.data.status !== RefBlockStatus.normal;
    } else {
      return controller.value.injections.some(inj => {
        return inj.key === node.key && inj.data.status !== RefBlockStatus.normal;
      });
    }
  }

  static regenerateChildrenUUID(node, refblockUUID, uuidKey) {
    return node.mapDescendants(child => {
      if (child.isElement() && child.data[uuidKey]) {
        const uuid = child.data[uuidKey];

        if (uuid.startsWith(refblockUUID)) {
          return child;
        }

        return child.merge({
          data: { ...child.data,
            [uuidKey]: `${refblockUUID}-${uuid}`
          }
        });
      }

      return child;
    });
  }

}

exports.default = RefBlock;
RefBlock.TYPE = _meta.ELEMENT_TYPE;
//# sourceMappingURL=index.js.map