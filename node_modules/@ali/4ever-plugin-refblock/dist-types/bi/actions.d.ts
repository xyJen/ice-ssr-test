import { Action, Block, ConvertToPluginActionCreators, ConvertToPluginActionPredicates } from '@ali/4ever-cangjie';
import RefBlock, { RefBlockData } from '../mo/models';
export declare const UPGRADE_TO_REFBLOCK: unique symbol;
export declare const DOWNGRADE_TO_BLOCKS_BY_DOCKEY: unique symbol;
export declare const DOWNGRADE_TO_BLOCKS_BY_KEY: unique symbol;
export declare const INSERT_REFBLOCK: unique symbol;
export declare const UPDATE_REFBLOCK_DATA: unique symbol;
export declare const COPY_AS_REFBLOCK: unique symbol;
export declare const COPY_REFBLOCK: unique symbol;
export interface UpgradeToRefBlockPayload {
    docKey: string;
    uuid: string;
    blocks: Block[];
}
export interface DowngradeToBlocksByKeyPayload {
    key: string;
}
export interface DowngradeToBlocksByDocKeyPayload {
    docKey: string;
}
export interface InsertRefBlockPayload {
    data: RefBlockData;
}
export interface UpdateRefBlockDataPayload {
    data: Partial<RefBlockData>;
    node: RefBlock;
}
export interface CopyAsRefBlockPayload {
    nodes: Block[];
}
export interface CopyRefBlockPayload {
    refblock: RefBlock;
}
export interface UpgradeToRefBlockAction {
    type: typeof UPGRADE_TO_REFBLOCK;
    payload: UpgradeToRefBlockPayload;
}
export interface DowngradeToBlocksByDocKeyAction {
    type: typeof DOWNGRADE_TO_BLOCKS_BY_DOCKEY;
    payload: DowngradeToBlocksByDocKeyPayload;
}
export interface DowngradeToBlocksByKeyAction {
    type: typeof DOWNGRADE_TO_BLOCKS_BY_DOCKEY;
    payload: DowngradeToBlocksByKeyPayload;
}
export interface InsertRefBlockAction {
    type: typeof INSERT_REFBLOCK;
    payload: InsertRefBlockPayload;
}
export interface UpdateRefBlockDataAction {
    type: typeof UPDATE_REFBLOCK_DATA;
    payload: UpdateRefBlockDataPayload;
}
export interface CopyAsRefBlockAction {
    type: typeof COPY_AS_REFBLOCK;
    payload: CopyAsRefBlockPayload;
}
export interface CopyRefBlockAction {
    type: typeof COPY_REFBLOCK;
    payload: CopyRefBlockPayload;
}
/**
 * 升级选中的 blocks 为引用块
 * @param docKey
 * @param uuid
 * @param blocks
 * @returns
 */
export declare function upgradeToRefBlock(docKey: string, uuid: string, blocks: Block[]): {
    type: symbol;
    payload: UpgradeToRefBlockPayload;
};
/**
 * 根据 docKey 将引用块降级为普通块
 * @param docKey
 * @returns
 */
export declare function downgradeToBlocksByDocKey(docKey: string): {
    type: symbol;
    payload: DowngradeToBlocksByDocKeyPayload;
};
/**
 * 根据 key 将引用块降级为普通块
 * @param key
 * @returns
 */
export declare function downgradeToBlocksByKey(key: string): {
    type: symbol;
    payload: DowngradeToBlocksByKeyPayload;
};
/**
 * 插入 RefBlock
 * @param data
 * @returns
 */
export declare function insertRefBlock(data: RefBlockData): {
    type: symbol;
    payload: InsertRefBlockPayload;
};
/**
 * 更新 RefBlock 数据
 * @param node
 * @param data
 * @returns
 */
declare function updateRefBlockData(node: RefBlock, data: Partial<RefBlockData>): {
    type: symbol;
    payload: UpdateRefBlockDataPayload;
};
declare function isUpgradeToRefBlockAction(action: Action): action is UpgradeToRefBlockAction;
declare function isDowngradeToBlocksByDocKeyAction(action: Action): action is DowngradeToBlocksByDocKeyAction;
declare function isDowngradeToBlocksByKeyAction(action: Action): action is DowngradeToBlocksByKeyAction;
declare function isInsertRefBlockAction(action: Action): action is InsertRefBlockAction;
declare function isUpdateRefBlockDataAction(action: Action): action is UpdateRefBlockDataAction;
/**
 * 复制为引用块
 * @param node
 * @returns
 */
declare function copyAsRefBlock(nodes: Block[]): CopyAsRefBlockAction;
/**
 * 复制引用块
 * @param block
 * @returns
 */
declare function copyRefBlock(refblock: RefBlock): CopyRefBlockAction;
declare function isCopyRefBlock(action: Action): action is CopyRefBlockAction;
declare function isCopyAsRefBlock(action: Action): action is CopyAsRefBlockAction;
export declare const actions: {
    copyRefBlock: typeof copyRefBlock;
    copyAsRefBlock: typeof copyAsRefBlock;
    upgradeToRefBlock: typeof upgradeToRefBlock;
    downgradeToBlocksByDocKey: typeof downgradeToBlocksByDocKey;
    downgradeToBlocksByKey: typeof downgradeToBlocksByKey;
    insertRefBlock: typeof insertRefBlock;
    updateRefBlockData: typeof updateRefBlockData;
    setRefBlockInjectionByDocKey: typeof import("../common/actions").setRefBlockInjectionByDocKey;
    setRefBlockInjectionByKey: typeof import("../common/actions").setRefBlockInjectionByKey;
};
export declare const isActions: {
    isUpgradeToRefBlockAction: typeof isUpgradeToRefBlockAction;
    isDowngradeToBlocksByDocKeyAction: typeof isDowngradeToBlocksByDocKeyAction;
    isDowngradeToBlocksByKeyAction: typeof isDowngradeToBlocksByKeyAction;
    isInsertRefBlockAction: typeof isInsertRefBlockAction;
    isUpdateRefBlockDataAction: typeof isUpdateRefBlockDataAction;
    isCopyAsRefBlock: typeof isCopyAsRefBlock;
    isCopyRefBlock: typeof isCopyRefBlock;
    isSetRefBlockInjectionByDocKeyAction: typeof import("../common/actions").isSetRefBlockInjectionByDocKeyAction;
    isSetRefBlockInjectionByKeyAction: typeof import("../common/actions").isSetRefBlockInjectionByKeyAction;
};
declare module '@ali/4ever-cangjie' {
    /** type combination for commands、queries、actions */
    interface PluginActionCreators extends ConvertToPluginActionCreators<typeof actions> {
    }
    interface PluginActionPredicates extends ConvertToPluginActionPredicates<typeof isActions> {
    }
}
export {};
