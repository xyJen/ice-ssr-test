/// <reference types="react" />
import type { Controller, RenderNodeProps, Block, Document, Node } from '@ali/4ever-cangjie';
import { RefBlockStatus } from '../mo/models';
export interface GenerateRefBlockResp {
    docKey: string;
    uuid: string;
}
/**
 * 引用文档
 */
export interface ReferenceItem {
    /** 文档名 */
    name: string;
    /** 链接 */
    url: string;
    /** 引用块文档 docKey */
    docKey: string;
    /** 引用块 uuid */
    uuid: string;
    /** 引用块所在的宿主文档 docKey */
    hostDocKey: string;
}
export declare type BiConfig<T = any> = {
    /** 引用块国际化文案 */
    locale: {
        /** 不支持嵌套的引用块 */
        nestedNotSupported: string;
        /** 引用块创建失败 */
        createFailed: string;
        /** 引用源 */
        referFromTitle: string;
        /** 解绑引用关系 */
        detach: string;
        /** 解绑引用关系成功 */
        detachSuccess: string;
        /** 解绑引用关系失败 */
        detachFailed: string;
        /** 引用列表标题 */
        referenceListTitle: string;
        /** 引用块已删除 */
        deleted: string;
        /** 无权限 */
        forbidden: string;
        /** 无效 */
        invalid: string;
        /** 复制成功 */
        copySuccess: string;
        /** 无法拖动 */
        cannotMoveTo: string;
        /** 无法放置 */
        cannotDropTo: string;
        /** 复制 */
        copy: string;
        /** 查看引用关系 */
        showRefs: string;
        /** 创建引用块 */
        creating: string;
        /** 暂无引用 */
        noRefers: string;
    };
    /** 工具栏动画时间 */
    toolbarAnimationDuration?: number;
    /** 是否开启工具栏 */
    enableToolbar?: () => boolean;
    /** 装饰 fragment */
    decorateRefBlockFragment: (fragment: Document) => Document;
    /** 获得当前文档 key */
    getDocKey: () => string;
    /** 生成引用块文档 */
    generateDoc: (fragment: Document) => Promise<GenerateRefBlockResp>;
    /** 生成引用块副块 */
    generateCopyDoc: (docKey: string) => Promise<GenerateRefBlockResp>;
    /** 解绑引用关系 */
    detach: (docKey: string, uuid: string) => Promise<void>;
    /** 获得引用列表 */
    getReferenceList: (docKey: string) => Promise<ReferenceItem[]>;
    /** 只读模式渲染 */
    renderReadOnly: (props: RenderNodeProps) => React.ReactNode;
    /** 其他状态渲染 */
    renderRefBlockInOtherStates: (props: RenderNodeProps, status: RefBlockStatus) => React.ReactNode;
    renderLoading?: (props: RenderNodeProps) => JSX.Element | null;
    /** 挂载引用块时的操作 */
    onRefBlockMounted?: (controller: Controller, nodeKey: string, uuid: string) => void;
    /** 序列化 Package, fragment 用于参考当前选中内容 */
    cacheHetuWhenCopy: (fragment: Document) => string;
    /** 反序列化河图 */
    getHetuWhenPaste: (str: string) => T;
    /** 获得锚点链接 */
    getRefBlockURL: (uuid: string) => string;
    /** 获得引用文档跳转地址 */
    getDocURL: (url: string, id: string) => string;
    /** 禁止嵌套在引用块的内容 */
    disableNestedInRefBlock?: (node: Node, controller: Controller) => boolean;
    /** 禁止放置引用块到 */
    disableDropTo?: (dropBlock: Block, controller: Controller) => boolean;
};
export declare type ZhiConfig = {
    /** 引用块国际化文案 */
    locale: {
        /** 引用源 */
        referFromTitle: string;
        /** 引用列表标题 */
        referenceListTitle: string;
        /** 引用块已被删除 */
        deleted: string;
        /** 无权限 */
        forbidden: string;
        /** 无效 */
        invalid: string;
        /** 查看引用关系 */
        showRefs: string;
        /** 复制 */
        copy: string;
        /** 暂无引用 */
        noRefers: string;
    };
    /** 工具栏动画时间 */
    toolbarAnimationDuration?: number;
    /** 是否开启工具栏 */
    enableToolbar?: () => boolean;
    /** 获得当前文档 key */
    getDocKey: () => string;
    /** 获得引用列表 */
    getReferenceList: (docKey: string) => Promise<ReferenceItem[]>;
    /** 其他状态渲染 */
    renderRefBlockInOtherStates: (props: RenderNodeProps, status: RefBlockStatus) => React.ReactNode;
    renderLoading?: (props: RenderNodeProps) => JSX.Element | null;
    /** 挂载引用块时的操作 */
    onRefBlockMounted?: (controller: Controller, nodeKey: string, uuid: string) => void;
    /** 获得引动文档跳转地址 */
    getDocURL: (url: string, id: string) => string;
};
declare module '@ali/4ever-cangjie' {
    interface BiPluginConfig {
        refblock?: BiConfig;
    }
    interface ZhiPluginConfig {
        refblock?: ZhiConfig;
    }
    interface MobileBiPluginConfig {
        refblock?: BiConfig;
    }
    interface MobileZhiPluginConfig {
        refblock?: ZhiConfig;
    }
}
export declare type RefBlockLocale = ZhiConfig['locale'] | BiConfig['locale'];
