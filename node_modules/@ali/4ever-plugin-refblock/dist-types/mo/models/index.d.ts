import { Node, Element, Data, Block, BlockChildren, Controller } from '@ali/4ever-cangjie';
export declare enum RefBlockStatus {
    /** 正常态 */
    normal = "normal",
    /** 已删除 */
    deleted = "deleted",
    /** 加载中 */
    loading = "loading",
    /** 无权限 */
    forbidden = "forbidden",
    /** 只读 */
    readOnly = "readOnly",
    /** 无效 */
    invalid = "invalid",
    /** 断开 */
    disconnected = "disconnected"
}
/** 引用块 Injection */
export interface RefBlockInjectionData {
    status: RefBlockStatus;
}
export interface RefBlockData extends Data {
    /** doc key */
    readonly docKey?: string;
    /** uuid */
    readonly refblockUUID?: string;
    /** injection data: status */
    readonly status?: RefBlockInjectionData['status'];
}
declare type RefBlockChildren = BlockChildren;
export interface RefBlockProperties<D = RefBlockData, N extends BlockChildren = RefBlockChildren> {
    data?: D;
    nodes?: N;
}
export default class RefBlock extends Block<RefBlockData, RefBlockChildren> {
    static TYPE: string;
    static create<SD = RefBlockData, SN extends BlockChildren = RefBlockChildren>(properties: RefBlock | RefBlockProperties<SD, SN> | string): Block<SD, SN>;
    static isRefBlock(maybeRefBlock: any): maybeRefBlock is RefBlock;
    static isVoid(controller: Controller, node: Node): boolean;
    static regenerateChildrenUUID<T extends Element>(node: T, refblockUUID: string, uuidKey: string): T;
}
export {};
