import { Action, ConvertToPluginActionCreators, ConvertToPluginActionPredicates } from '@ali/4ever-cangjie';
import type { RefBlockInjectionData } from '../mo/models';
export declare const SET_REFBLOCK_INJECTION_BY_DOCKEY: unique symbol;
export declare const SET_REFBLOCK_INJECTION_BY_KEY: unique symbol;
export interface SetRefBlockInjectionByDocKeyPayload {
    data: Partial<RefBlockInjectionData>;
    docKey: string;
    overwrite?: boolean;
}
export interface SetRefBlockInjectionByKeyPayload {
    data: Partial<RefBlockInjectionData>;
    key: string;
    overwrite?: boolean;
}
export interface SetRefBlockInjectionByDocKeyAction {
    type: typeof SET_REFBLOCK_INJECTION_BY_DOCKEY;
    payload: SetRefBlockInjectionByDocKeyPayload;
}
export interface SetRefBlockInjectionByKeyAction {
    type: typeof SET_REFBLOCK_INJECTION_BY_KEY;
    payload: SetRefBlockInjectionByKeyPayload;
}
/**
 * 根据 docKey 设置引用块数据
 * @param docKey
 * @param loading
 * @returns
 */
export declare function setRefBlockInjectionByDocKey(docKey: string, data: Partial<RefBlockInjectionData>, overwrite?: boolean): {
    type: symbol;
    payload: SetRefBlockInjectionByDocKeyPayload;
};
/**
 * 根据 node key 设置引用块加载态
 * @param key
 * @param loading
 * @returns
 */
export declare function setRefBlockInjectionByKey(key: string, data: Partial<RefBlockInjectionData>, overwrite?: boolean): {
    type: symbol;
    payload: SetRefBlockInjectionByKeyPayload;
};
export declare function isSetRefBlockInjectionByDocKeyAction(action: Action): action is SetRefBlockInjectionByDocKeyAction;
export declare function isSetRefBlockInjectionByKeyAction(action: Action): action is SetRefBlockInjectionByKeyAction;
export declare const actions: {
    setRefBlockInjectionByDocKey: typeof setRefBlockInjectionByDocKey;
    setRefBlockInjectionByKey: typeof setRefBlockInjectionByKey;
};
export declare const isActions: {
    isSetRefBlockInjectionByDocKeyAction: typeof isSetRefBlockInjectionByDocKeyAction;
    isSetRefBlockInjectionByKeyAction: typeof isSetRefBlockInjectionByKeyAction;
};
declare module '@ali/4ever-cangjie' {
    /** type combination for commands、queries、actions */
    interface PluginActionCreators extends ConvertToPluginActionCreators<typeof actions> {
    }
    interface PluginActionPredicates extends ConvertToPluginActionPredicates<typeof isActions> {
    }
}
