{"version":3,"sources":["../../../src/zhi/createRenderNode.tsx"],"names":["React","noop","RefBlock","RefBlockComp","detach","Promise","reject","createRenderNode","config","locale","toolbarAnimationDuration","enableToolbar","getReferenceList","getDocKey","renderRefBlockInOtherStates","renderLoading","onRefBlockMounted","getDocURL","TYPE","props","controller","children"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAASC,IAAT,QAAqB,WAArB;AACA,OAAOC,QAAP;AACA,OAAOC,YAAP;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,SAAMC,OAAO,CAACC,MAAR,CAAe,mCAAf,CAAN;AAAA,CAAf;;AAEA,eAAe,SAASC,gBAAT,CAA0BC,MAA1B,EAA6C;AAAA;;AAAA,MAExDC,MAFwD,GAWtDD,MAXsD,CAExDC,MAFwD;AAAA,MAGxDC,wBAHwD,GAWtDF,MAXsD,CAGxDE,wBAHwD;AAAA,MAIxDC,aAJwD,GAWtDH,MAXsD,CAIxDG,aAJwD;AAAA,MAKxDC,gBALwD,GAWtDJ,MAXsD,CAKxDI,gBALwD;AAAA,MAMxDC,SANwD,GAWtDL,MAXsD,CAMxDK,SANwD;AAAA,MAOxDC,2BAPwD,GAWtDN,MAXsD,CAOxDM,2BAPwD;AAAA,MAQxDC,aARwD,GAWtDP,MAXsD,CAQxDO,aARwD;AAAA,MASxDC,iBATwD,GAWtDR,MAXsD,CASxDQ,iBATwD;AAAA,MAUxDC,SAVwD,GAWtDT,MAXsD,CAUxDS,SAVwD;AAa1D,yBACGf,QAAQ,CAACgB,IADZ,IACmB,UAACC,KAAD,EAAQC,UAAR,EAAuB;AAAA,QAC9BC,QAD8B,GACjBF,KADiB,CAC9BE,QAD8B;AAGtC,wBACE,eAAC,YAAD;AACE,MAAA,SAAS,EAAE,KADb;AAEE,MAAA,MAAM,EAAEZ,MAFV;AAGE,MAAA,aAAa,EAAEE,aAHjB;AAIE,MAAA,QAAQ,EAAE,IAJZ;AAKE,MAAA,WAAW,EAAEQ,KALf;AAME,MAAA,wBAAwB,EAAET,wBAN5B;AAOE,MAAA,gBAAgB,EAAEE,gBAPpB;AAQE,MAAA,SAAS,EAAEC,SARb;AASE,MAAA,MAAM,EAAET,MATV;AAUE,MAAA,iBAAiB,EAAEY,iBAVrB;AAWE,MAAA,2BAA2B,EAAEF,2BAX/B;AAYE,MAAA,YAAY,EAAEb,IAZhB;AAaE,MAAA,aAAa,EAAEc,aAbjB;AAcE,MAAA,MAAM,EAAEE;AAdV,OAgBGI,QAAQ,EAhBX,CADF;AAoBD,GAxBH;AA0BD","sourcesContent":["import * as React from 'react';\nimport { noop } from 'lodash-es';\nimport RefBlock from '../mo/models';\nimport RefBlockComp from '../components/RefBlock';\nimport type { ZhiConfig } from '../utils/types';\n\nconst detach = () => Promise.reject(\"forbidden detach in readonly mode\");\n\nexport default function createRenderNode(config: ZhiConfig) {\n  const {\n    locale,\n    toolbarAnimationDuration,\n    enableToolbar,\n    getReferenceList,\n    getDocKey,\n    renderRefBlockInOtherStates,\n    renderLoading,\n    onRefBlockMounted,\n    getDocURL,\n  } = config;\n\n  return {\n    [RefBlock.TYPE]: (props, controller) => {\n      const { children } = props;\n      \n      return (\n        <RefBlockComp\n          isFocused={false}\n          locale={locale}\n          enableToolbar={enableToolbar}\n          readOnly={true}\n          renderProps={props}\n          toolbarAnimationDuration={toolbarAnimationDuration} \n          getReferenceList={getReferenceList}\n          getDocKey={getDocKey}\n          detach={detach}\n          onRefBlockMounted={onRefBlockMounted}\n          renderRefBlockInOtherStates={renderRefBlockInOtherStates}\n          copyRefBlock={noop}\n          renderLoading={renderLoading}\n          getURL={getDocURL}\n        >\n          {children()}\n        </RefBlockComp>\n      );\n    },\n  };\n}\n"],"file":"createRenderNode.js"}