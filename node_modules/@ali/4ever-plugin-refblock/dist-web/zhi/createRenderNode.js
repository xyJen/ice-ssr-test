import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { noop } from 'lodash-es';
import RefBlock from "../mo/models";
import RefBlockComp from "../components/RefBlock";

var detach = function detach() {
  return Promise.reject("forbidden detach in readonly mode");
};

export default function createRenderNode(config) {
  var _ref;

  var locale = config.locale,
      toolbarAnimationDuration = config.toolbarAnimationDuration,
      enableToolbar = config.enableToolbar,
      getReferenceList = config.getReferenceList,
      getDocKey = config.getDocKey,
      renderRefBlockInOtherStates = config.renderRefBlockInOtherStates,
      renderLoading = config.renderLoading,
      onRefBlockMounted = config.onRefBlockMounted,
      getDocURL = config.getDocURL;
  return _ref = {}, _ref[RefBlock.TYPE] = function (props, controller) {
    var children = props.children;
    return /*#__PURE__*/_createElement(RefBlockComp, {
      isFocused: false,
      locale: locale,
      enableToolbar: enableToolbar,
      readOnly: true,
      renderProps: props,
      toolbarAnimationDuration: toolbarAnimationDuration,
      getReferenceList: getReferenceList,
      getDocKey: getDocKey,
      detach: detach,
      onRefBlockMounted: onRefBlockMounted,
      renderRefBlockInOtherStates: renderRefBlockInOtherStates,
      copyRefBlock: noop,
      renderLoading: renderLoading,
      getURL: getDocURL
    }, children());
  }, _ref;
}
//# sourceMappingURL=createRenderNode.js.map