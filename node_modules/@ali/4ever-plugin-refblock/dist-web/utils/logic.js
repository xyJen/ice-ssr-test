import { Element } from '@ali/4ever-cangjie';
import RefBlock, { RefBlockStatus } from "../mo/models";
/**
 * 当前选区是否位于引用块内
 * @param controller
 * @returns
 */

export function isSelectionInRefBlock(value) {
  return getClosestRefBlockInSelection(value) !== null;
}
/**
 * 获得距离选区最近的引用块
 * @param value
 * @returns
 */

export function getClosestRefBlockInSelection(value, container) {
  var document = value.document,
      selection = value.selection;

  if (!selection) {
    return null;
  }

  function isRefBlock(node) {
    return RefBlock.isRefBlock(node) && node !== container;
  }

  var _selection$sort = selection.sort(document),
      start = _selection$sort.start,
      end = _selection$sort.end;

  var startRefBlock = document.getClosest(start.key, isRefBlock);

  if (startRefBlock) {
    return startRefBlock;
  }

  var endRefBlock = document.getClosest(end.key, isRefBlock);

  if (endRefBlock) {
    return endRefBlock;
  }

  return null;
}

var isStatus = function isStatus(status) {
  return function (value, refblock) {
    var injections = value.injections;
    return !!injections.find(function (_ref) {
      var key = _ref.key,
          data = _ref.data;
      return key === refblock.key && (data == null ? void 0 : data.status) === status;
    });
  };
};
/**
 * 判断 refblock 是否只读
 * @param controller
 * @param refblock
 */


export var isReadOnly = isStatus(RefBlockStatus.readOnly);
/**
 * 判断节点是否存在于只读的引用块
 * @param controller
 * @param node
 */

export function isInReadOnlyRefBlock(value, node) {
  var document = value.document;
  var refblock = document.getClosest(node.key, function (node) {
    return RefBlock.isRefBlock(node);
  });

  if (!refblock) {
    return false;
  }

  return isReadOnly(value, refblock);
}
/**
 * 判断节点是否在引用块中
 * @param value
 * @param node
 * @returns
 */

export function isInRefBlock(value, node) {
  var document = value.document;
  var refblock = document.getClosest(node.key, function (node) {
    return RefBlock.isRefBlock(node);
  });
  return !!refblock;
}
/**
 * 是否是河图同步节点
 * @param node
 * @returns
 */

export function isSyncHetuNode(node) {
  var _node$data, _node$data$metadata;

  return Element.isElement(node) && !!((_node$data = node.data) != null && (_node$data$metadata = _node$data.metadata) != null && _node$data$metadata.sync);
}
//# sourceMappingURL=logic.js.map