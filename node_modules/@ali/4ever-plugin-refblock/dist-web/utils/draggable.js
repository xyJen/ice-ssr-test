import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { CopyblocklinkNormal } from '@ali/we-icon';
import { TYPE_MENU_ITEM } from '@ali/4ever-component';
import { isInRefBlock, isSelectionInRefBlock } from "./logic";
import { RefBlockRole } from "./roles";
import RefBlock from "../mo/models";
/**
 * 获得引用块拖拽项目
 * @param options
 * @returns
 */

var _ref = /*#__PURE__*/_createElement(CopyblocklinkNormal, null);

export function getRefBlockDragMenuItems(options) {
  var block = options.block,
      locale = options.locale,
      value = options.value,
      disableNodeInRefBlock = options.disableNodeInRefBlock,
      onCopyAsRefBlock = options.onCopyAsRefBlock,
      onCopyRefBlock = options.onCopyRefBlock;
  var item = {
    type: TYPE_MENU_ITEM,
    title: locale == null ? void 0 : locale.copyAsRefBlock,
    icon: _ref,
    role: RefBlockRole,
    menuExtraKey: 'copyAsRefBlock',
    onClick: onCopyAsRefBlock
  };

  function containsForbiddenItems(element) {
    return !!element.findDescendant(disableNodeInRefBlock);
  } // 如果当前 block 已经是引用块，则复制引用块自身


  if (RefBlock.isRefBlock(block)) {
    return [_extends({}, item, {
      onClick: function onClick() {
        return onCopyRefBlock(block);
      }
    })];
  } // 如果当前在引用块内部，则复制引用块自身


  if (isInRefBlock(value, block)) {
    var refblock = value.document.getClosest(block.key, function (node) {
      return RefBlock.isRefBlock(node);
    });
    return [_extends({}, item, {
      onClick: function onClick() {
        return onCopyRefBlock(refblock);
      }
    })];
  }

  if (disableNodeInRefBlock(block) || containsForbiddenItems(block)) {
    return [];
  }

  if (value.blocks.includes(block) && (isSelectionInRefBlock(value) || containsForbiddenItems(value.fragment))) {
    return [];
  }

  return [item];
}
//# sourceMappingURL=draggable.js.map