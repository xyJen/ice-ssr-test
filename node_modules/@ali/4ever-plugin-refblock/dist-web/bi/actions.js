import _extends from "@babel/runtime/helpers/extends";
import { actions as commonActions, isActions as commonIsActions } from "../common/actions";
export var UPGRADE_TO_REFBLOCK = Symbol('upgrade_to_refblock');
export var DOWNGRADE_TO_BLOCKS_BY_DOCKEY = Symbol('downgrade_to_blocks_by_dockey');
export var DOWNGRADE_TO_BLOCKS_BY_KEY = Symbol('downgrade_to_blocks_by_key');
export var INSERT_REFBLOCK = Symbol('insert_refblock');
export var UPDATE_REFBLOCK_DATA = Symbol('update_refblock_data');
export var COPY_AS_REFBLOCK = Symbol('copy_as_refblock');
export var COPY_REFBLOCK = Symbol('copy_refblock');

/**
 * 升级选中的 blocks 为引用块
 * @param docKey
 * @param uuid
 * @param blocks
 * @returns
 */
export function upgradeToRefBlock(docKey, uuid, blocks) {
  return {
    type: UPGRADE_TO_REFBLOCK,
    payload: {
      docKey: docKey,
      uuid: uuid,
      blocks: blocks
    }
  };
}
/**
 * 根据 docKey 将引用块降级为普通块
 * @param docKey
 * @returns
 */

export function downgradeToBlocksByDocKey(docKey) {
  return {
    type: DOWNGRADE_TO_BLOCKS_BY_DOCKEY,
    payload: {
      docKey: docKey
    }
  };
}
/**
 * 根据 key 将引用块降级为普通块
 * @param key
 * @returns
 */

export function downgradeToBlocksByKey(key) {
  return {
    type: DOWNGRADE_TO_BLOCKS_BY_KEY,
    payload: {
      key: key
    }
  };
}
/**
 * 插入 RefBlock
 * @param data
 * @returns
 */

export function insertRefBlock(data) {
  return {
    type: INSERT_REFBLOCK,
    payload: {
      data: data
    }
  };
}
/**
 * 更新 RefBlock 数据
 * @param node
 * @param data
 * @returns
 */

function updateRefBlockData(node, data) {
  return {
    type: UPDATE_REFBLOCK_DATA,
    payload: {
      data: data,
      node: node
    }
  };
}

function isUpgradeToRefBlockAction(action) {
  return action.type === UPGRADE_TO_REFBLOCK;
}

function isDowngradeToBlocksByDocKeyAction(action) {
  return action.type === DOWNGRADE_TO_BLOCKS_BY_DOCKEY;
}

function isDowngradeToBlocksByKeyAction(action) {
  return action.type === DOWNGRADE_TO_BLOCKS_BY_KEY;
}

function isInsertRefBlockAction(action) {
  return action.type === INSERT_REFBLOCK;
}

function isUpdateRefBlockDataAction(action) {
  return action.type === UPDATE_REFBLOCK_DATA;
}
/**
 * 复制为引用块
 * @param node
 * @returns
 */


function copyAsRefBlock(nodes) {
  return {
    type: COPY_AS_REFBLOCK,
    payload: {
      nodes: nodes
    }
  };
}
/**
 * 复制引用块
 * @param block
 * @returns
 */


function copyRefBlock(refblock) {
  return {
    type: COPY_REFBLOCK,
    payload: {
      refblock: refblock
    }
  };
}

function isCopyRefBlock(action) {
  return action.type === COPY_REFBLOCK;
}

function isCopyAsRefBlock(action) {
  return action.type === COPY_AS_REFBLOCK;
}

export var actions = _extends({}, commonActions, {
  copyRefBlock: copyRefBlock,
  copyAsRefBlock: copyAsRefBlock,
  upgradeToRefBlock: upgradeToRefBlock,
  downgradeToBlocksByDocKey: downgradeToBlocksByDocKey,
  downgradeToBlocksByKey: downgradeToBlocksByKey,
  insertRefBlock: insertRefBlock,
  updateRefBlockData: updateRefBlockData
});
export var isActions = _extends({}, commonIsActions, {
  isUpgradeToRefBlockAction: isUpgradeToRefBlockAction,
  isDowngradeToBlocksByDocKeyAction: isDowngradeToBlocksByDocKeyAction,
  isDowngradeToBlocksByKeyAction: isDowngradeToBlocksByKeyAction,
  isInsertRefBlockAction: isInsertRefBlockAction,
  isUpdateRefBlockDataAction: isUpdateRefBlockDataAction,
  isCopyAsRefBlock: isCopyAsRefBlock,
  isCopyRefBlock: isCopyRefBlock
});
//# sourceMappingURL=actions.js.map