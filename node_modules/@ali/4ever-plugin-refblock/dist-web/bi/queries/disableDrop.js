import { message } from '@ali/we-design';
import RefBlock from "../../mo/models";
import { isInReadOnlyRefBlock, isInRefBlock } from "../../utils/logic";
export default function createDisableDrop(
/** 无法 drop 到引用块文案 */
cannotDropAtRefBlockTip,
/** 无法 drag 引用块到某个节点文案 */
cannotDragRefBlockToTip,
/** 是否节点不允许存在于引用块 */
disableNodeInRefBlock,
/** 是否引用块无法被 drop 到某个节点 */
disableRefBlockDropTo) {
  function containsDisabledNode(controller, dragBlock) {
    return disableNodeInRefBlock(controller, dragBlock) || dragBlock.findDescendant(function (descendant) {
      return disableNodeInRefBlock(controller, descendant);
    });
  }

  function containsRefBlock(dragBlock) {
    return RefBlock.isRefBlock(dragBlock) || dragBlock.findDescendant(function (descendent) {
      return RefBlock.isRefBlock(descendent);
    });
  }
  /**
   * 禁止放置
   * - 尝试拖动同步块到引用块
   * - 尝试拖动引用块到引用块
   * - 尝试拖动引用块到模板按钮
   * @param dragBlock
   * @param dropBlock
   * @returns
   */


  return function disableDrop(controller, dragBlock, dropBlock) {
    var value = controller.value; // Drag RefBlock to ...

    if (disableRefBlockDropTo(dropBlock, controller) && containsRefBlock(dragBlock)) {
      message.error(cannotDragRefBlockToTip);
      return true;
    } // Drop Something at RefBlock


    if (isInRefBlock(value, dropBlock) && containsDisabledNode(controller, dragBlock)) {
      message.error(cannotDropAtRefBlockTip);
      return true;
    }

    return isInReadOnlyRefBlock(value, dropBlock);
  };
}
//# sourceMappingURL=disableDrop.js.map