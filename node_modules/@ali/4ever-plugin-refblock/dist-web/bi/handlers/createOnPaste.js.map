{"version":3,"sources":["../../../../src/bi/handlers/createOnPaste.ts"],"names":["transferUtils","constants","stubFalse","RefBlock","isSelectionInRefBlock","isSyncHetuNode","getRefBlockMap","MIME_TYPES","createOnPaste","config","clipboard","refblock","generateCopyDoc","disableNestedInRefBlock","getHetuWhenPaste","event","controller","next","clipboardData","query","hasData","FRAGMENT","fragment","getFragment","packageJSON","getData","REFBLOCK","value","hetuSyncNodes","refblocks","invalidNodes","forEachDescendant","descendant","push","isRefBlock","forEach","node","removeNode","assertPath","key","refblockMap","Object","keys","length","deserialized","docKey","nodes","map","nodeKey","assertNode","uuid","setNode","data","refblockUUID","nextEvent","setClipboardData","setData","encodeFragment","onPaste"],"mappings":";;;AAAA,SAGEA,aAHF,EAIEC,SAJF,QAMO,oBANP;AAOA,SAASC,SAAT,QAA0B,WAA1B;AAEA,OAAOC,QAAP;AACA,SAASC,qBAAT,EAAgCC,cAAhC;AACA,SAASC,cAAT;IAEQC,U,GAAeN,S,CAAfM,U;AAER,eAAe,SAASC,aAAT,CACbC,MADa,EAEa;AAAA,0BACWA,MADX,CAClBC,SADkB;AAAA,MAClBA,SADkB,kCACN,EADM;AAAA,MACFC,QADE,GACWF,MADX,CACFE,QADE;AAAA,aAMtBA,QANsB;AAAA,MAGxBC,eAHwB,QAGxBA,eAHwB;AAAA,mCAIxBC,uBAJwB;AAAA,MAIxBA,uBAJwB,sCAIEX,SAJF;AAAA,MAKxBY,gBALwB,QAKxBA,gBALwB;AAQ1B;AAAA,4EAAO,kBAAuBC,KAAvB,EAA8BC,UAA9B,EAA0CC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,cAAAA,aADD,GACiBF,UAAU,CAACG,KAAX,CAAiB,kBAAjB,EAAqCJ,KAArC,CADjB;;AAAA,kBAEAG,aAFA;AAAA;AAAA;AAAA;;AAAA,gDAGID,IAAI,EAHR;;AAAA;AAAA,kBAKAC,aAAa,CAACE,OAAd,CAAsBb,UAAU,CAACc,QAAjC,CALA;AAAA;AAAA;AAAA;;AAAA,gDAMIJ,IAAI,EANR;;AAAA;AASDK,cAAAA,QATC,GASUJ,aAAa,CAACK,WAAd,CAA0B,KAA1B,CATV;AAUCC,cAAAA,WAVD,GAUeN,aAAa,CAACO,OAAd,CAAsBlB,UAAU,CAACmB,QAAjC,CAVf,EAYL;;AAZK,mBAaDJ,QAbC;AAAA;AAAA;AAAA;;AAAA,mBAcClB,qBAAqB,CAACY,UAAU,CAACW,KAAZ,CAdtB;AAAA;AAAA;AAAA;;AAeD;AACMC,cAAAA,aAhBL,GAgB6B,EAhB7B,EAiBD;;AACMC,cAAAA,SAlBL,GAkB6B,EAlB7B,EAmBD;;AACMC,cAAAA,YApBL,GAoB4B,EApB5B;AAqBDR,cAAAA,QAAQ,CAACS,iBAAT,CAA2B,UAACC,UAAD,EAAgB;AACzC,oBAAI3B,cAAc,CAAC2B,UAAD,CAAlB,EAAgC;AAC9BJ,kBAAAA,aAAa,CAACK,IAAd,CAAmBD,UAAnB;AACD,iBAFD,MAEO,IAAI7B,QAAQ,CAAC+B,UAAT,CAAoBF,UAApB,CAAJ,EAAqC;AAC1CH,kBAAAA,SAAS,CAACI,IAAV,CAAeD,UAAf;AACD,iBAFM,MAEA,IAAInB,uBAAuB,CAACmB,UAAD,EAAahB,UAAb,CAA3B,EAAqD;AAC1Dc,kBAAAA,YAAY,CAACG,IAAb,CAAkBD,UAAlB;AACD;AACF,eARD;AASA,wBAAIJ,aAAJ,EAAsBC,SAAtB,EAAoCC,YAApC,EAAkDK,OAAlD,CAA0D,UAACC,IAAD,EAAU;AAClEd,gBAAAA,QAAQ,GAAGA,QAAQ,CAAEe,UAAV,CAAqBf,QAAQ,CAAEgB,UAAV,CAAqBF,IAAI,CAACG,GAA1B,CAArB,CAAX;AACD,eAFD;AA9BC;AAAA;;AAAA;AAkCKC,cAAAA,WAlCL,GAkCmBlC,cAAc,CAACgB,QAAD,CAlCjC,EAmCD;;AAnCC,kBAoCImB,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,MApC7B;AAAA;AAAA;AAAA;;AAAA,gDAqCQ1B,IAAI,EArCZ;;AAAA;AAuCD;AACI2B,cAAAA,YAxCH,GAwCkB,KAxClB;AAAA,sDAyCoBJ,WAzCpB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyCUK,cAAAA,MAzCV;;AA0CC,kBAAIrB,WAAW,IAAI,CAACoB,YAApB,EAAkC;AAChCA,gBAAAA,YAAY,GAAG,IAAf;AACA9B,gBAAAA,gBAAgB,CAACU,WAAD,CAAhB;AACD;;AACKsB,cAAAA,KA9CP,GA8CeN,WAAW,CAACK,MAAD,CAAX,CAAoBE,GAApB,CAAwB;AAAA,oBAAGC,OAAH,SAAGA,OAAH;AAAA,uBACpC1B,QAAQ,CAAE2B,UAAV,CAAqBD,OAArB,CADoC;AAAA,eAAxB,CA9Cf;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAkD0BpC,eAAe,CAACiC,MAAD,CAlDzC;;AAAA;AAAA;AAkDWK,wBAAAA,IAlDX,yBAkDWA,IAlDX;AAmDGJ,wBAAAA,KAAK,CAACX,OAAN,CAAc,UAACC,IAAD,EAAU;AACtBd,0BAAAA,QAAQ,GAAGA,QAAQ,CAAE6B,OAAV,CAAkB7B,QAAQ,CAAEgB,UAAV,CAAqBF,IAAI,CAACG,GAA1B,CAAlB,EAAkD;AAC3Da,4BAAAA,IAAI,eACChB,IAAI,CAACgB,IADN;AAEFC,8BAAAA,YAAY,EAAEH;AAFZ;AADuD,2BAAlD,CAAX;AAMD,yBAPD;;AAnDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4DG;AACAJ,cAAAA,KAAK,CAACX,OAAN,CAAc,UAACC,IAAD,EAAU;AACtBd,gBAAAA,QAAQ,GAAGA,QAAQ,CAAEe,UAAV,CAAqBf,QAAQ,CAAEgB,UAAV,CAAqBF,IAAI,CAACG,GAA1B,CAArB,CAAX;AACD,eAFD;;AA7DH;AAAA;AAAA;;AAAA;AAmEGe,cAAAA,SAnEH,GAmEevC,KAAK,CAACwC,gBAAN,CAChBxC,KAAK,CAACG,aAAN,CAAqBsC,OAArB,CACEjD,UAAU,CAACc,QADb,EAEErB,aAAa,CAACyD,cAAd,CAA6BnC,QAA7B,CAFF,CADgB,CAnEf,EA0EH;;AA1EG,gDA2EIL,IAAI,CAACqC,SAAD,CA3ER;;AAAA;AAAA,gDA6EErC,IAAI,EA7EN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAsByC,OAAtB;AAAA;AAAA;;AAAA,WAAsBA,OAAtB;AAAA;AA+ED","sourcesContent":["import {\n  Plugin,\n  Node,\n  transferUtils,\n  constants,\n  BiPluginConfig,\n} from '@ali/4ever-cangjie';\nimport { stubFalse } from 'lodash-es';\nimport { ClipboardPad } from '@ali/4ever-plugin-clipboard';\nimport RefBlock, { RefBlockData } from '../../mo/models';\nimport { isSelectionInRefBlock, isSyncHetuNode } from '../../utils/logic';\nimport { getRefBlockMap } from '../../utils/value';\n\nconst { MIME_TYPES } = constants;\n\nexport default function createOnPaste(\n  config: BiPluginConfig,\n): Plugin['onCangjiePaste'] {\n  const { clipboard = {}, refblock } = config;\n  const {\n    generateCopyDoc,\n    disableNestedInRefBlock = stubFalse,\n    getHetuWhenPaste,\n  } = refblock!;\n\n  return async function onPaste(event, controller, next) {\n    const clipboardData = controller.query('getClipboardData', event);\n    if (!clipboardData) {\n      return next();\n    }\n    if (!clipboardData.hasData(MIME_TYPES.FRAGMENT)) {\n      return next();\n    }\n\n    let fragment = clipboardData.getFragment(false);\n    const packageJSON = clipboardData.getData(MIME_TYPES.REFBLOCK);\n\n    // 粘贴到引用块时，剔除引用块和河图同步块\n    if (fragment) {\n      if (isSelectionInRefBlock(controller.value)) {\n        // 剔除河图同步块\n        const hetuSyncNodes: Node[] = [];\n        // 剔除引用块\n        const refblocks: RefBlock[] = [];\n        // 剔除包含有非法节点的块\n        const invalidNodes: Node[] = [];\n        fragment.forEachDescendant((descendant) => {\n          if (isSyncHetuNode(descendant)) {\n            hetuSyncNodes.push(descendant);\n          } else if (RefBlock.isRefBlock(descendant)) {\n            refblocks.push(descendant);\n          } else if (disableNestedInRefBlock(descendant, controller)) {\n            invalidNodes.push(descendant);\n          }\n        });\n        [...hetuSyncNodes, ...refblocks, ...invalidNodes].forEach((node) => {\n          fragment = fragment!.removeNode(fragment!.assertPath(node.key));\n        });\n      } else {\n        const refblockMap = getRefBlockMap(fragment);\n        // 如果不含有引用块，提前退出\n        if (!Object.keys(refblockMap).length) {\n          return next();\n        }\n        // 粘贴 fragment 中包含的引用块\n        let deserialized = false;\n        for (const docKey in refblockMap) {\n          if (packageJSON && !deserialized) {\n            deserialized = true;\n            getHetuWhenPaste(packageJSON);\n          }\n          const nodes = refblockMap[docKey].map(({ nodeKey }) =>\n            fragment!.assertNode(nodeKey),\n          ) as RefBlock[];\n          try {\n            const { uuid } = await generateCopyDoc(docKey);\n            nodes.forEach((node) => {\n              fragment = fragment!.setNode(fragment!.assertPath(node.key), {\n                data: {\n                  ...node.data,\n                  refblockUUID: uuid,\n                } as RefBlockData,\n              });\n            });\n          } catch (e) {\n            // 如果对应 refblock 的 uuid 生成失败，则不粘贴这些节点\n            nodes.forEach((node) => {\n              fragment = fragment!.removeNode(fragment!.assertPath(node.key));\n            });\n          }\n        }\n      }\n      const nextEvent = event.setClipboardData(\n        event.clipboardData!.setData(\n          MIME_TYPES.FRAGMENT,\n          transferUtils.encodeFragment(fragment),\n        ),\n      );\n\n      // @ts-ignore\n      return next(nextEvent);\n    }\n    return next();\n  };\n}\n"],"file":"createOnPaste.js"}