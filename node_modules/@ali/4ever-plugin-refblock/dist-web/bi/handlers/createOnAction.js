import { Document, Commands } from '@ali/4ever-cangjie';
import { message } from '@ali/we-design';
import { CLIPBOARD_INSERT_FRAGMENT } from '@ali/4ever-plugin-clipboard';
import RefBlock, { RefBlockStatus } from "../../mo/models";
import { actions, isActions } from "../actions";
import { upgradeToRefBlock, updateRefBlockData, insertRefBlock, downgradeToBlocksByDocKey, downgradeToBlocksByKey, setRefBlockInjectionByKey, setRefBlockInjectionByDocKey } from "../commands";
import { writeRefBlockToClipboard } from "../utils/ccp";
import { getRefBlockMap } from "../../utils/value";
export default function createOnAction(config, serializer) {
  var generateDoc = config.generateDoc,
      decorateRefBlockFragment = config.decorateRefBlockFragment,
      cacheHetuWhenCopy = config.cacheHetuWhenCopy,
      getRefBlockURL = config.getRefBlockURL,
      locale = config.locale;
  return function onAction(action, controller, next) {
    var isCopyAsRefBlock = controller.isActionFactory('isCopyAsRefBlock');
    var isCopyRefBlock = controller.isActionFactory('isCopyRefBlock');
    var type = action.type;

    if (isCopyAsRefBlock != null && isCopyAsRefBlock(action)) {
      var dragBlocks = action.payload.nodes;
      var _controller$value = controller.value,
          document = _controller$value.document,
          selection = _controller$value.selection;
      var blocks = document.getRootBlocksAtRange(selection);

      if (dragBlocks && dragBlocks.length >= blocks.length) {
        blocks = [].concat(dragBlocks.map(function (n) {
          // 重新获得 block，防止拖拽杆展开后，block 又发生了变更（例如图片加载完成）
          return document.assertNode(n.key);
        }));
      }

      message.loading({
        key: 'loading',
        type: 'loading',
        content: locale.creating
      }); // 装饰 fragment

      var fragment = decorateRefBlockFragment(Document.create({
        nodes: blocks
      }));
      generateDoc(fragment).then(function (resp) {
        // 创建成功后：
        // 1. 拷贝内容到剪贴板
        // 2. 升级普通块为引用块
        // 3. 驱动引用块开始加载
        var docKey = resp.docKey,
            uuid = resp.uuid;
        var refblock = RefBlock.create({
          nodes: blocks,
          data: {
            docKey: resp.docKey,
            refblockUUID: uuid
          }
        });
        writeRefBlockToClipboard(refblock, cacheHetuWhenCopy, getRefBlockURL, serializer);
        controller.run('onAction', actions.upgradeToRefBlock(docKey, uuid, fragment.nodes));
        message.success(locale.copySuccess);
        message.close('loading');
      })["catch"](function (e) {
        console.error('cannot create refblock', e);
      });
      return controller;
    } else if (isActions.isSetRefBlockInjectionByDocKeyAction(action)) {
      var _action$payload = action.payload,
          data = _action$payload.data,
          docKey = _action$payload.docKey,
          overwrite = _action$payload.overwrite;
      return controller.command(setRefBlockInjectionByDocKey, docKey, data, overwrite);
    } else if (isActions.isSetRefBlockInjectionByKeyAction(action)) {
      var _action$payload2 = action.payload,
          _data = _action$payload2.data,
          key = _action$payload2.key,
          _overwrite = _action$payload2.overwrite;
      return controller.command(setRefBlockInjectionByKey, key, _data, _overwrite);
    } else if (isActions.isUpgradeToRefBlockAction(action)) {
      var _action$payload3 = action.payload,
          _blocks = _action$payload3.blocks,
          _docKey = _action$payload3.docKey,
          uuid = _action$payload3.uuid;
      return controller.command(upgradeToRefBlock, _blocks, {
        docKey: _docKey,
        uuid: uuid,
        refblockUUID: uuid
      });
    } else if (isActions.isDowngradeToBlocksByDocKeyAction(action)) {
      var _docKey2 = action.payload.docKey;
      return controller.command(downgradeToBlocksByDocKey, _docKey2);
    } else if (isActions.isDowngradeToBlocksByKeyAction(action)) {
      var _key = action.payload.key;
      return controller.command(downgradeToBlocksByKey, _key);
    } else if (isCopyRefBlock != null && isCopyRefBlock(action)) {
      var refblock = action.payload.refblock;
      writeRefBlockToClipboard(refblock, cacheHetuWhenCopy, getRefBlockURL, serializer);
      message.success(locale.copySuccess);
    } else if (isActions.isInsertRefBlockAction(action)) {
      var _data2 = action.payload.data;
      return controller.command(insertRefBlock, _data2).command(setRefBlockInjectionByDocKey, _data2.docKey, {
        status: RefBlockStatus.loading
      }, false);
    } else if (isActions.isUpdateRefBlockDataAction(action)) {
      var _action$payload4 = action.payload,
          _data3 = _action$payload4.data,
          node = _action$payload4.node;
      return controller.command(updateRefBlockData, node, _data3).command(setRefBlockInjectionByKey, node.key, {
        status: RefBlockStatus.loading
      }, false);
    } else if (type === CLIPBOARD_INSERT_FRAGMENT) {
      // wait for fragment pasted
      var _ref = action.payload,
          _fragment = _ref.fragment;

      if (!_fragment) {
        return next();
      }

      var cachedSelection = controller.value.selection; // 因为 CCP 插入 fragment 是异步的，因此这里同步状态也需要异步

      Promise.resolve().then(function () {
        var refblockMap = getRefBlockMap(_fragment); // 检查 fragment 中的引用块

        Object.keys(refblockMap).forEach(function (docKey, index) {
          if (index === 0) {
            // 避免光标移动到引用块内部
            controller.command(Commands.select, cachedSelection);
          }

          controller.run('onAction', actions.setRefBlockInjectionByDocKey(docKey, {
            status: RefBlockStatus.loading
          }, false));
        });
      });
    }

    return next();
  };
}
//# sourceMappingURL=createOnAction.js.map