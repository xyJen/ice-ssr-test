import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { message } from '@ali/we-design';
import RefBlock, { RefBlockStatus } from "../../mo/models";
import RefBlockComp from "../../components/RefBlock";
import { downgradeToBlocksByKey } from "../actions";
export default function createRenderNode(config) {
  var _ref;

  var locale = config.locale,
      toolbarAnimationDuration = config.toolbarAnimationDuration,
      enableToolbar = config.enableToolbar,
      getReferenceList = config.getReferenceList,
      getDocKey = config.getDocKey,
      detach = config.detach,
      renderReadOnly = config.renderReadOnly,
      renderRefBlockInOtherStates = config.renderRefBlockInOtherStates,
      renderLoading = config.renderLoading,
      onRefBlockMounted = config.onRefBlockMounted,
      getDocURL = config.getDocURL;
  return _ref = {}, _ref[RefBlock.TYPE] = function (props, controller) {
    var children = props.children,
        isSelected = props.isSelected;
    var node = props.node;
    var status = node.data.status || RefBlockStatus.loading;
    var readOnly = status === RefBlockStatus.readOnly;
    var child = readOnly ? renderReadOnly(props) : children();

    var detachRef = function detachRef(docKey, uuid) {
      return detach(docKey, uuid).then(function () {
        controller.run('onAction', downgradeToBlocksByKey(node.key));
      })["catch"](function () {
        message.error(locale.detachFailed);
      });
    };

    var copyRefBlock = function copyRefBlock() {
      controller.dispatch('copyRefBlock', node);
    };

    return /*#__PURE__*/_createElement(RefBlockComp, {
      isFocused: isSelected && controller.value.selection.isCollapsed,
      locale: locale,
      readOnly: controller.readOnly,
      toolbarAnimationDuration: toolbarAnimationDuration,
      enableToolbar: enableToolbar,
      getReferenceList: getReferenceList,
      getDocKey: getDocKey,
      detach: detachRef,
      renderProps: props,
      renderRefBlockInOtherStates: renderRefBlockInOtherStates,
      onRefBlockMounted: onRefBlockMounted,
      copyRefBlock: copyRefBlock,
      renderLoading: renderLoading,
      getURL: getDocURL
    }, child);
  }, _ref;
}
//# sourceMappingURL=createRenderNode.js.map