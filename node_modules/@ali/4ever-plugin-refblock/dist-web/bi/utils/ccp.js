import { Value, transferUtils, constants, Document, Path } from '@ali/4ever-cangjie';
import { getHtmlFromValue, createClipboardManager, utils as clipboardUtils } from '@ali/4ever-plugin-clipboard';
import { Paragraph } from '@ali/4ever-plugin-paragraph';
import RefBlock from "../../mo/models";
import { omit } from 'lodash-es';
import { getRefBlockMap } from "../../utils/value";
var MIME_TYPES = constants.MIME_TYPES;
/**
 * 将引用块数据写入剪贴板
 * @param refblock
 * @param serializer
 */

export function writeRefBlockToClipboard(refblock, cacheHetuWhenCopy, getRefBlockURL, serializer) {
  var _clip$write;

  /* istanbul ignore next */
  if (!serializer) {
    return;
  }

  var fragment = Document.create({
    nodes: [refblock]
  });
  var value = Value.create({
    document: fragment
  });
  var clip = createClipboardManager();
  var refblockData = cacheHetuWhenCopy(fragment);
  var fragmentData = transferUtils.encodeFragment(fragment);
  var html = clipboardUtils.writeClipboardDataToHtml(getHtmlFromValue(serializer, value), [[MIME_TYPES.REFBLOCK, refblockData], [MIME_TYPES.FRAGMENT, fragmentData]]);
  clip.write((_clip$write = {}, _clip$write[MIME_TYPES.FRAGMENT] = fragmentData, _clip$write[MIME_TYPES.HTML] = html, _clip$write[MIME_TYPES.TEXT] = getRefBlockURL(refblock.data.uuid || refblock.data.refblockUUID), _clip$write[MIME_TYPES.REFBLOCK] = refblockData, _clip$write));
}
/**
 * 裁剪 Fragment 中的引用块内容：
 *
 * - uuid: 保证粘贴时生成新的引用关系
 * - children: 裁剪掉引用块的内容，保证引用块内容只由协同服务供给
 * @param fragment
 * @returns
 */

export function cropRefBlockInFragment(fragment) {
  var newFragment = fragment;
  var refblockMap = getRefBlockMap(newFragment);
  Object.keys(refblockMap).forEach(function (docKey) {
    refblockMap[docKey].forEach(function (_ref) {
      var nodeKey = _ref.nodeKey;
      var node = newFragment.assertNode(nodeKey);
      newFragment = newFragment.setNode(newFragment.assertPath(nodeKey), {
        data: omit(node.data, 'refblockUUID'),
        nodes: [Paragraph.create()]
      });
    });
  });
  return newFragment;
}
/**
 * 剪贴板包含引用块时：
 * 1. 若引用块被设置标志位，代表用户明确意图复制引用块，需要保留引用块
 * 2. 否则，只保留引用块内内容
 * @param fragment
 */

export function unwrapRefBlock(fragment) {
  var newFragment = fragment;
  fragment.forEachDescendant(function (node) {
    if (RefBlock.isRefBlock(node)) {
      var path = newFragment.assertPath(node.key); // 展平引用块

      newFragment = newFragment.removeNode(path);
      node.nodes.forEach(function (child, index) {
        newFragment = newFragment.insertNode(Path.increment(path, index), child);
      });
    }
  });
  return newFragment;
}
//# sourceMappingURL=ccp.js.map