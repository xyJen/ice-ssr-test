{"version":3,"sources":["../../../../src/bi/utils/ccp.ts"],"names":["Value","transferUtils","constants","Document","Path","getHtmlFromValue","createClipboardManager","utils","clipboardUtils","Paragraph","RefBlock","omit","getRefBlockMap","MIME_TYPES","writeRefBlockToClipboard","refblock","cacheHetuWhenCopy","getRefBlockURL","serializer","fragment","create","nodes","value","document","clip","refblockData","fragmentData","encodeFragment","html","writeClipboardDataToHtml","REFBLOCK","FRAGMENT","write","HTML","TEXT","data","uuid","refblockUUID","cropRefBlockInFragment","newFragment","refblockMap","Object","keys","forEach","docKey","nodeKey","node","assertNode","setNode","assertPath","unwrapRefBlock","forEachDescendant","isRefBlock","path","key","removeNode","child","index","insertNode","increment"],"mappings":"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","sourcesContent":["import {\n  Value,\n  transferUtils,\n  constants,\n  Document,\n  Path,\n  Mo as Serializer,\n} from '@ali/4ever-cangjie';\nimport { getHtmlFromValue, createClipboardManager, utils as clipboardUtils } from '@ali/4ever-plugin-clipboard';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport RefBlock from '../../mo/models';\nimport { omit } from 'lodash-es';\nimport { getRefBlockMap } from '../../utils/value';\n\nconst { MIME_TYPES } = constants;\n/**\n * 将引用块数据写入剪贴板\n * @param refblock\n * @param serializer\n */\nexport function writeRefBlockToClipboard(\n  refblock: RefBlock,\n  cacheHetuWhenCopy: (fragment: Document) => string,\n  getRefBlockURL: (uuid: string) => string,\n  serializer?: Serializer,\n) {\n  /* istanbul ignore next */\n  if (!serializer) {\n    return;\n  }\n  const fragment = Document.create({\n    nodes: [refblock],\n  });\n  const value = Value.create({\n    document: fragment,\n  });\n  const clip = createClipboardManager();\n  const refblockData = cacheHetuWhenCopy(fragment);\n  const fragmentData = transferUtils.encodeFragment(fragment);\n  const html = clipboardUtils.writeClipboardDataToHtml(\n    getHtmlFromValue(serializer, value),\n    [\n      [MIME_TYPES.REFBLOCK, refblockData],\n      [MIME_TYPES.FRAGMENT, fragmentData],\n    ],\n  );\n  clip.write({\n    [MIME_TYPES.FRAGMENT]: fragmentData,\n    [MIME_TYPES.HTML]: html,\n    [MIME_TYPES.TEXT]: getRefBlockURL(refblock.data.uuid || refblock.data.refblockUUID),\n    [MIME_TYPES.REFBLOCK]: refblockData,\n  });\n}\n\n/**\n * 裁剪 Fragment 中的引用块内容：\n *\n * - uuid: 保证粘贴时生成新的引用关系\n * - children: 裁剪掉引用块的内容，保证引用块内容只由协同服务供给\n * @param fragment\n * @returns\n */\nexport function cropRefBlockInFragment(fragment: Document) {\n  let newFragment = fragment;\n  const refblockMap = getRefBlockMap(newFragment);\n\n  Object.keys(refblockMap).forEach((docKey) => {\n    refblockMap[docKey].forEach(({ nodeKey }) => {\n      const node = newFragment.assertNode(nodeKey) as RefBlock;\n      newFragment = newFragment.setNode(newFragment.assertPath(nodeKey), {\n        data: omit(node.data, 'refblockUUID'),\n        nodes: [Paragraph.create()],\n      });\n    });\n  });\n  return newFragment;\n}\n\n/**\n * 剪贴板包含引用块时：\n * 1. 若引用块被设置标志位，代表用户明确意图复制引用块，需要保留引用块\n * 2. 否则，只保留引用块内内容\n * @param fragment\n */\nexport function unwrapRefBlock(fragment: Document) {\n  let newFragment = fragment;\n\n  fragment.forEachDescendant((node) => {\n    if (RefBlock.isRefBlock(node)) {\n      const path = newFragment.assertPath(node.key);\n      // 展平引用块\n      newFragment = newFragment.removeNode(path);\n      node.nodes.forEach((child, index) => {\n        newFragment = newFragment.insertNode(\n          Path.increment(path, index),\n          child,\n        );\n      });\n    }\n  });\n\n  return newFragment;\n}\n"],"file":"ccp.js"}