{"version":3,"sources":["../../../src/common/commands.ts"],"names":["Injection","omit","RefBlock","setRefBlockInjection","controller","node","data","overwrite","injections","value","injection","find","inj","key","create","mergeData","Object","keys","excludeInjections","filter","setInjections","concat","flush","setRefBlockInjectionByKey","document","getNode","isRefBlock","command","setRefBlockInjectionByDocKey","docKey","forEachDescendant","commands"],"mappings":"AAAA,SAAqBA,SAArB,QAAsC,oBAAtC;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,OAAOC,QAAP;;AAEA,SAASC,oBAAT,CACEC,UADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,SAJF,EAKE;AAAA,MACQC,UADR,GACuBJ,UAAU,CAACK,KADlC,CACQD,UADR;AAEA,MAAIE,SAAS,GAAGF,UAAU,CAACG,IAAX,CAAgB,UAACC,GAAD;AAAA,WAASA,GAAG,CAACC,GAAJ,KAAYR,IAAI,CAACQ,GAA1B;AAAA,GAAhB,CAAhB;AACAH,EAAAA,SAAS,GAAGV,SAAS,CAACc,MAAV,CAAiB;AAC3BD,IAAAA,GAAG,EAAER,IAAI,CAACQ,GADiB;AAE3BP,IAAAA,IAAI,EAAEI,SAAS,GACXA,SAAS,CAACK,SAAV,CACEL,SAAS,CAACJ,IADZ,EAEEC,SAAS,GAAGD,IAAH,GAAUL,IAAI,CAACK,IAAD,EAAOU,MAAM,CAACC,IAAP,CAAYP,SAAS,CAACJ,IAAtB,CAAP,CAFzB,CADW,GAKXA;AAPuB,GAAjB,CAAZ;AASA,MAAMY,iBAAiB,GAAGV,UAAU,CAACW,MAAX,CAAkB,UAACP,GAAD;AAAA,WAASA,GAAG,CAACC,GAAJ,KAAYR,IAAI,CAACQ,GAA1B;AAAA,GAAlB,CAA1B;AACA,SAAOT,UAAU,CAACgB,aAAX,CAAyBF,iBAAiB,CAACG,MAAlB,CAAyBX,SAAzB,CAAzB,EAA8DY,KAA9D,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,yBAAT,CACLnB,UADK,EAELS,GAFK,EAGLP,IAHK,EAILC,SAJK,EAKO;AAAA,MADZA,SACY;AADZA,IAAAA,SACY,GADA,IACA;AAAA;;AAAA,MACJiB,QADI,GACSpB,UAAU,CAACK,KADpB,CACJe,QADI;AAEZ,MAAMnB,IAAI,GAAGmB,QAAQ,CAACC,OAAT,CAAiBZ,GAAjB,CAAb;;AACA,MAAI,CAACR,IAAD,IAAS,CAACH,QAAQ,CAACwB,UAAT,CAAoBrB,IAApB,CAAd,EAAyC;AACvC,WAAOD,UAAP;AACD;;AACD,SAAOA,UAAU,CAACuB,OAAX,CAAmBxB,oBAAnB,EAAyCE,IAAzC,EAA+CC,IAA/C,EAAqDC,SAArD,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASqB,4BAAT,CACLxB,UADK,EAELyB,MAFK,EAGLvB,IAHK,EAILC,SAJK,EAKL;AAAA,MADAA,SACA;AADAA,IAAAA,SACA,GADY,IACZ;AAAA;;AAAA,MACQiB,QADR,GACqBpB,UAAU,CAACK,KADhC,CACQe,QADR;AAEAA,EAAAA,QAAQ,CAACM,iBAAT,CAA2B,UAACzB,IAAD,EAAU;AACnC,QAAIH,QAAQ,CAACwB,UAAT,CAAoBrB,IAApB,KAA6BA,IAAI,CAACC,IAAL,CAAUuB,MAAV,KAAqBA,MAAtD,EAA8D;AAC5DzB,MAAAA,UAAU,CAACuB,OAAX,CAAmBxB,oBAAnB,EAAyCE,IAAzC,EAA+CC,IAA/C,EAAqDC,SAArD;AACD;AACF,GAJD;AAKA,SAAOH,UAAP;AACD;AAED,OAAO,IAAM2B,QAAQ,GAAG;AACtBR,EAAAA,yBAAyB,EAAzBA,yBADsB;AAEtBK,EAAAA,4BAA4B,EAA5BA;AAFsB,CAAjB","sourcesContent":["import { Controller, Injection } from '@ali/4ever-cangjie';\nimport { omit } from 'lodash-es';\nimport RefBlock, { RefBlockInjectionData } from '../mo/models';\n\nfunction setRefBlockInjection(\n  controller: Controller,\n  node: RefBlock,\n  data: Partial<RefBlockInjectionData>,\n  overwrite: boolean,\n) {\n  const { injections } = controller.value;\n  let injection = injections.find((inj) => inj.key === node.key);\n  injection = Injection.create({\n    key: node.key,\n    data: injection\n      ? injection.mergeData(\n          injection.data,\n          overwrite ? data : omit(data, Object.keys(injection.data)),\n        )\n      : data,\n  });\n  const excludeInjections = injections.filter((inj) => inj.key !== node.key);\n  return controller.setInjections(excludeInjections.concat(injection)).flush();\n}\n\n/**\n * 根据节点 key 设置引用块加载态\n * @param controller\n * @param key\n * @param data\n * @param overwrite\n * @returns\n */\nexport function setRefBlockInjectionByKey(\n  controller: Controller,\n  key: string,\n  data: Partial<RefBlockInjectionData>,\n  overwrite = true,\n): Controller {\n  const { document } = controller.value;\n  const node = document.getNode(key);\n  if (!node || !RefBlock.isRefBlock(node)) {\n    return controller;\n  }\n  return controller.command(setRefBlockInjection, node, data, overwrite);\n}\n\n/**\n * 根据 doc key 设置应用块加载态\n * @param controller\n * @param docKey\n * @param data\n * @param overwrite\n */\nexport function setRefBlockInjectionByDocKey(\n  controller: Controller,\n  docKey: string,\n  data: Partial<RefBlockInjectionData>,\n  overwrite = true,\n) {\n  const { document } = controller.value;\n  document.forEachDescendant((node) => {\n    if (RefBlock.isRefBlock(node) && node.data.docKey === docKey) {\n      controller.command(setRefBlockInjection, node, data, overwrite);\n    }\n  });\n  return controller;\n}\n\nexport const commands = {\n  setRefBlockInjectionByKey,\n  setRefBlockInjectionByDocKey,\n}\n"],"file":"commands.js"}