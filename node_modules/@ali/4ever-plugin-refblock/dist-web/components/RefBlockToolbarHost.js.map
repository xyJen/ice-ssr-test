{"version":3,"sources":["../../../src/components/RefBlockToolbarHost.tsx"],"names":["React","Dropdown","LinkSimpleNormal","useScrollableContent","DropdownAnimation","IconButton","ListItemContent","ListItem","Title","DropdownOverlay","ToolbarColumn","Divider","IconButtonTitle","ListItemPlaceholder","ListItemIcon","CopyButton","RefBlockToolbarHost","props","list","locale","wrapperVisible","loading","canCopy","copy","getURL","useState","visible","setVisible","container","document","body","useEffect","content","useMemo","map","item","docKey","uuid","url","name","length","width","noRefers","referenceListTitle","showRefs"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dropdown } from '@ali/we-design';\nimport { LinkSimpleNormal } from '@ali/we-icon';\nimport { useScrollableContent } from '@ali/4ever-cangjie';\nimport { RefBlockStatus } from '../mo/models';\nimport { DropdownAnimation } from '@ali/we-util';\nimport { IconButton } from '@ali/we-toolbar';\nimport type { RefBlockLocale, ReferenceItem } from '../utils/types';\nimport {\n  ListItemContent,\n  ListItem,\n  Title,\n  DropdownOverlay,\n  ToolbarColumn,\n  Divider,\n  IconButtonTitle,\n  ListItemPlaceholder,\n} from './styled';\nimport ListItemIcon from './ListItemIcon';\nimport CopyButton from './CopyButton';\n\ninterface RefBlockToolbarHostProps {\n  /** 引用文档列表 */\n  list: ReferenceItem[];\n  /** 引用块国际化文案 */\n  locale: RefBlockLocale;\n  /** 加载态 */\n  loading: boolean;\n  /** 引用块状态 */\n  status: RefBlockStatus;\n  /** visible */\n  wrapperVisible: boolean;\n  /** 是否允许复制 */\n  canCopy: boolean;\n  /** 复制块引用链接 */\n  copy: () => void;\n  /** 获得文档跳转地址 */\n  getURL: (url: string, id: string) => string;\n}\n\nconst RefBlockToolbarHost: React.FC<RefBlockToolbarHostProps> = (props) => {\n  const { list, locale, wrapperVisible, loading, canCopy, copy, getURL } = props;\n  const [visible, setVisible] = React.useState(false);\n  /* istanbul ignore next */\n  const container = useScrollableContent() || document.body;\n\n  React.useEffect(() => {\n    if (!wrapperVisible) {\n      setVisible(wrapperVisible);\n    }\n  }, [wrapperVisible]);\n\n  const content = React.useMemo(() => {\n    return !loading\n      ? list.map((item) => {\n          return (\n            <ListItem\n              key={`${item.docKey}-${item.uuid}`}\n              data-testid=\"refblock-toolbar-list-item\"\n            >\n              <ListItemIcon />\n              <ListItemContent>\n                <a\n                  href={getURL(item.url, item.uuid)}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {item.name}\n                </a>\n              </ListItemContent>\n            </ListItem>\n          );\n        })\n      : [\n          <ListItem\n            key=\"refblock-refer-placeholder\"\n            data-testid=\"refblock-refer-placeholder\"\n          >\n            <ListItemIcon />\n            <ListItemPlaceholder />\n          </ListItem>,\n        ];\n  }, [list, loading]);\n\n  return (\n    <>\n      {canCopy && (\n        <>\n          <ToolbarColumn>\n            <CopyButton onCopy={copy}>{locale.copy}</CopyButton>\n          </ToolbarColumn>\n          <Divider />\n        </>\n      )}\n      <ToolbarColumn>\n        <Dropdown\n          trigger=\"click\"\n          placement=\"bottomRight\"\n          overlay={\n            <DropdownAnimation visible={visible}>\n              <DropdownOverlay>\n                {!loading && !list.length ? (\n                  <Title style={{ width: 250 }}>{locale.noRefers}</Title>\n                ) : (\n                  <>\n                    <Title>{locale.referenceListTitle}</Title>\n                    {content}\n                  </>\n                )}\n              </DropdownOverlay>\n            </DropdownAnimation>\n          }\n          visible={visible}\n          onVisibleChange={setVisible}\n          disableDomAlign\n          getContainer={() => container}\n        >\n          <IconButton\n            testid=\"refblock-toolbar-host\"\n            icon={\n              <>\n                <LinkSimpleNormal />\n                <IconButtonTitle>{locale.showRefs}</IconButtonTitle>\n              </>\n            }\n          />\n        </Dropdown>\n      </ToolbarColumn>\n    </>\n  );\n};\n\nexport default RefBlockToolbarHost;\n"],"file":"RefBlockToolbarHost.js"}