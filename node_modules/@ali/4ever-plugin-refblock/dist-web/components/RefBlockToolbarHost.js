import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Dropdown } from '@ali/we-design';
import { LinkSimpleNormal } from '@ali/we-icon';
import { useScrollableContent } from '@ali/4ever-cangjie';
import { DropdownAnimation } from '@ali/we-util';
import { IconButton } from '@ali/we-toolbar';
import { ListItemContent, ListItem, Title, DropdownOverlay, ToolbarColumn, Divider, IconButtonTitle, ListItemPlaceholder } from "./styled";
import ListItemIcon from "./ListItemIcon";
import CopyButton from "./CopyButton";

var _ref = /*#__PURE__*/_createElement(ListItemIcon, null);

var _ref2 = /*#__PURE__*/_createElement(ListItem, {
  key: "refblock-refer-placeholder",
  "data-testid": "refblock-refer-placeholder"
}, /*#__PURE__*/_createElement(ListItemIcon, null), /*#__PURE__*/_createElement(ListItemPlaceholder, null));

var _ref3 = /*#__PURE__*/_createElement(Divider, null);

var _ref4 = /*#__PURE__*/_createElement(LinkSimpleNormal, null);

var RefBlockToolbarHost = function RefBlockToolbarHost(props) {
  var list = props.list,
      locale = props.locale,
      wrapperVisible = props.wrapperVisible,
      loading = props.loading,
      canCopy = props.canCopy,
      copy = props.copy,
      getURL = props.getURL;

  var _React$useState = React.useState(false),
      visible = _React$useState[0],
      setVisible = _React$useState[1];
  /* istanbul ignore next */


  var container = useScrollableContent() || document.body;
  React.useEffect(function () {
    if (!wrapperVisible) {
      setVisible(wrapperVisible);
    }
  }, [wrapperVisible]);
  var content = React.useMemo(function () {
    return !loading ? list.map(function (item) {
      return /*#__PURE__*/_createElement(ListItem, {
        key: item.docKey + "-" + item.uuid,
        "data-testid": "refblock-toolbar-list-item"
      }, _ref, /*#__PURE__*/_createElement(ListItemContent, null, /*#__PURE__*/_createElement("a", {
        href: getURL(item.url, item.uuid),
        target: "_blank",
        rel: "noreferrer"
      }, item.name)));
    }) : [_ref2];
  }, [list, loading]);
  return /*#__PURE__*/_createElement(React.Fragment, null, canCopy && /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(ToolbarColumn, null, /*#__PURE__*/_createElement(CopyButton, {
    onCopy: copy
  }, locale.copy)), _ref3), /*#__PURE__*/_createElement(ToolbarColumn, null, /*#__PURE__*/_createElement(Dropdown, {
    trigger: "click",
    placement: "bottomRight",
    overlay: /*#__PURE__*/_createElement(DropdownAnimation, {
      visible: visible
    }, /*#__PURE__*/_createElement(DropdownOverlay, null, !loading && !list.length ? /*#__PURE__*/_createElement(Title, {
      style: {
        width: 250
      }
    }, locale.noRefers) : /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(Title, null, locale.referenceListTitle), content))),
    visible: visible,
    onVisibleChange: setVisible,
    disableDomAlign: true,
    getContainer: function getContainer() {
      return container;
    }
  }, /*#__PURE__*/_createElement(IconButton, {
    testid: "refblock-toolbar-host",
    icon: /*#__PURE__*/_createElement(React.Fragment, null, _ref4, /*#__PURE__*/_createElement(IconButtonTitle, null, locale.showRefs))
  }))));
};

export default RefBlockToolbarHost;
//# sourceMappingURL=RefBlockToolbarHost.js.map