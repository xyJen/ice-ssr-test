import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { stubFalse, debounce, noop } from 'lodash-es';
import { RefBlockStatus } from "../mo/models";
import { RefBlockWrapper } from "./styled";
import Forbidden from "./Forbidden";
import Deleted from "./Deleted";
import Invalid from "./Invalid";
import Loading from "./Loading";
import RefBlockToolbar from "./RefBlockToolbar";
import { REFBLOCK_MAX_HEIGHT } from "../utils/styles";

var defaultGetUrl = function defaultGetUrl(url) {
  return url;
};

var RefBlock = function RefBlock(props) {
  var children = props.children,
      readOnly = props.readOnly,
      locale = props.locale,
      renderProps = props.renderProps,
      _props$toolbarAnimati = props.toolbarAnimationDuration,
      toolbarAnimationDuration = _props$toolbarAnimati === void 0 ? 150 : _props$toolbarAnimati,
      _props$enableToolbar = props.enableToolbar,
      enableToolbar = _props$enableToolbar === void 0 ? stubFalse : _props$enableToolbar,
      detach = props.detach,
      getReferenceList = props.getReferenceList,
      getDocKey = props.getDocKey,
      renderRefBlockInOtherStates = props.renderRefBlockInOtherStates,
      onRefBlockMounted = props.onRefBlockMounted,
      copyRefBlock = props.copyRefBlock,
      renderLoading = props.renderLoading,
      _props$getURL = props.getURL,
      getURL = _props$getURL === void 0 ? defaultGetUrl : _props$getURL;
  var attributes = renderProps.attributes;
  var ref = attributes.ref;
  var node = renderProps.node;
  var controller = renderProps.controller;
  var _controller$value = controller.value,
      selection = _controller$value.selection,
      isBlurred = _controller$value.isBlurred;
  var isCollapsed = selection.isCollapsed;
  var isFocused = props.isFocused && !isBlurred;

  var _React$useState = React.useState(false),
      toolbarVisible = _React$useState[0],
      setToolbarVisible = _React$useState[1];
  /**********************************\
  *                                  *
  *                      |           *
  *                    left          *
  *                      |           *
  *                      v           *
  * +--------------------+  <--top-- *
  * |      RefBlock      |           *
  * +--------------------+           *
  *                                  *
  \**********************************/


  var _React$useState2 = React.useState({
    top: -100,
    left: -100
  }),
      toolbarAnchor = _React$useState2[0],
      setToolbarAnchor = _React$useState2[1];

  var wrapperRef = React.useRef(ref && ref.current);
  var _node$data = node.data,
      _node$data$status = _node$data.status,
      status = _node$data$status === void 0 ? RefBlockStatus.loading : _node$data$status,
      isPageMode = _node$data.isPageMode;
  var docKey = node.data.docKey;
  var uuid = node.data.refblockUUID;
  var isHost = uuid === docKey;
  React.useLayoutEffect(function () {
    if (ref) {
      wrapperRef.current = ref.current;
    }
  }, [ref]);
  React.useEffect(function () {
    onRefBlockMounted && onRefBlockMounted(controller, node.key, uuid);
  }, [onRefBlockMounted, controller, node.key, uuid]);
  var handleToolbarHide = React.useMemo(function () {
    return debounce(function () {
      setToolbarVisible(false);
    }, toolbarAnimationDuration);
  }, [toolbarAnimationDuration]);
  var handleToolbarShow = React.useCallback(function () {
    handleToolbarHide.cancel(); // 计算工具栏定位锚点

    var rect = wrapperRef.current.getBoundingClientRect();
    var left = rect.right;
    var top = rect.top - 42;
    setToolbarAnchor({
      top: top,
      left: left
    });
    setToolbarVisible(true);
  }, [handleToolbarHide]);
  React.useEffect(function () {
    return function () {
      handleToolbarHide.cancel();
    };
  }, [handleToolbarHide]);
  var handleCopy = React.useCallback(function () {
    copyRefBlock();
    setToolbarVisible(false);
  }, [copyRefBlock]);
  var handleMouseEnterToContent = React.useCallback(function (event) {
    // focus 时，鼠标进入到 content，隐藏工具栏
    event.preventDefault();
    event.stopPropagation();
    setToolbarVisible(false);
  }, []);
  React.useEffect(function () {
    // focus 时，隐藏工具栏
    if (isFocused) {
      setToolbarVisible(false);
    }
  }, [isFocused]);

  if (status === RefBlockStatus.loading) {
    var loadingJSX = renderLoading == null ? void 0 : renderLoading(renderProps);
    return /*#__PURE__*/_createElement(RefBlockWrapper, _extends({
      "data-dockey": docKey,
      "data-cangjie-not-editable": true,
      isHost: isHost,
      $loading: true
    }, attributes), loadingJSX || /*#__PURE__*/_createElement(Loading, null, children));
  } else if (status === RefBlockStatus.forbidden) {
    return /*#__PURE__*/_createElement(Forbidden, {
      attributes: attributes
    }, locale.forbidden);
  } else if (status === RefBlockStatus.deleted) {
    return /*#__PURE__*/_createElement(Deleted, {
      attributes: attributes
    }, locale.deleted);
  } else if (status === RefBlockStatus.invalid) {
    return /*#__PURE__*/_createElement(Invalid, {
      attributes: attributes
    }, locale.deleted);
  } else if (status === RefBlockStatus.normal || status === RefBlockStatus.readOnly) {
    var read = status === RefBlockStatus.readOnly || readOnly;
    /* istanbul ignore next */

    var wrapperStyle = isPageMode && status === RefBlockStatus.readOnly ? {
      maxHeight: REFBLOCK_MAX_HEIGHT,
      overflow: 'scroll'
    } : {};
    return /*#__PURE__*/_createElement(RefBlockWrapper, _extends({
      "data-testid": "refblock-container",
      "data-container-block": true,
      "data-focused": isFocused,
      ref: wrapperRef,
      isFocused: isFocused,
      isHost: isHost,
      style: wrapperStyle,
      onMouseLeave: handleToolbarHide,
      onMouseEnter: isFocused ? noop : handleToolbarShow,
      onMouseMove: isFocused ? handleToolbarShow : noop
    }, attributes), enableToolbar() && /*#__PURE__*/_createElement(RefBlockToolbar, {
      locale: locale,
      readOnly: read,
      canCopy: status === RefBlockStatus.normal,
      visible: toolbarVisible && isCollapsed,
      node: node,
      isHost: isHost,
      status: status,
      duration: toolbarAnimationDuration,
      anchor: toolbarAnchor,
      detach: detach,
      getReferenceList: getReferenceList,
      getDocKey: getDocKey,
      getURL: getURL,
      copy: handleCopy,
      onToolbarShow: handleToolbarShow,
      onToolbarHide: handleToolbarHide
    }), /*#__PURE__*/_createElement("div", {
      className: "refblock-content",
      "data-refblock-uuid": uuid,
      onMouseEnter: isFocused ? handleMouseEnterToContent : noop
    }, children));
  } else {
    return /*#__PURE__*/_createElement("div", _extends({}, attributes, {
      "data-testid": "refblock-other-states-" + status
    }), renderRefBlockInOtherStates(renderProps, status));
  }
};

export default RefBlock;
//# sourceMappingURL=RefBlock.js.map