import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Transition } from 'react-transition-group';
import { useZoomContainer } from '@ali/4ever-cangjie';
import { debounce } from 'lodash-es';
import { ToolbarWrapper, Toolbar } from "./styled";
import RefBlockToolbarHost from "./RefBlockToolbarHost";
import RefBlockToolbarCopy from "./RefBlockToolbarCopy";
import ToolbarPortal from "./ToolbarPortal";
var transitionStyles = {
  entering: {
    opacity: 0
  },
  entered: {
    opacity: 1
  },
  exiting: {
    opacity: 0
  },
  exited: {
    opacity: 0
  }
};

var RefBlockToolbar = function RefBlockToolbar(props) {
  var visible = props.visible,
      locale = props.locale,
      node = props.node,
      readOnly = props.readOnly,
      status = props.status,
      isHost = props.isHost,
      duration = props.duration,
      canCopy = props.canCopy,
      anchor = props.anchor,
      detach = props.detach,
      getDocKey = props.getDocKey,
      getReferenceList = props.getReferenceList,
      copy = props.copy,
      onToolbarShow = props.onToolbarShow,
      onToolbarHide = props.onToolbarHide,
      getURL = props.getURL;

  var _React$useState = React.useState([]),
      list = _React$useState[0],
      setList = _React$useState[1];

  var _React$useState2 = React.useState(false),
      loading = _React$useState2[0],
      setLoading = _React$useState2[1];

  var _React$useState3 = React.useState(anchor),
      coords = _React$useState3[0],
      setCoords = _React$useState3[1];

  var wrapperRef = React.useRef(null);
  var container = useZoomContainer() || document.body;
  var fetchList = React.useMemo(function () {
    return debounce(getReferenceList, 1000, {
      leading: true
    });
  }, [getReferenceList]);
  var _node$data = node.data,
      docKey = _node$data.docKey,
      uuid = _node$data.refblockUUID;
  var currentDocKey = getDocKey();
  var copyFrom = list.find(function (item) {
    return item.uuid === docKey;
  });
  React.useEffect(function () {
    // 展开的时候获得引用列表
    if (visible) {
      var _fetchList;

      setLoading(true);
      (_fetchList = fetchList(docKey)) == null ? void 0 : _fetchList.then(setList)["catch"](function (e) {
        console.error('fecth syncdocs failed', e);
      })["finally"](function () {
        setLoading(false);
      });
    }
  }, [visible, docKey]); // 过滤当前文档，并按照宿主聚合

  var filteredList = React.useMemo(function () {
    return isHost ? list.filter(function (item) {
      return item.hostDocKey !== currentDocKey;
    }).sort(function (a, b) {
      if (a.hostDocKey === b.hostDocKey) {
        return 0;
      }

      return a.hostDocKey < b.hostDocKey ? -1 : 1;
    }) : list;
  }, [list, currentDocKey, isHost]);
  var handleToolbarEnter = React.useCallback(function () {
    var containerRect = container.getBoundingClientRect();
    setCoords({
      left: anchor.left - containerRect.left - wrapperRef.current.getBoundingClientRect().width,
      top: anchor.top - containerRect.top
    });
  }, [anchor, container]);

  var _ref = /*#__PURE__*/_createElement(RefBlockToolbarHost, {
    list: filteredList,
    locale: locale,
    loading: loading,
    status: status,
    wrapperVisible: visible,
    canCopy: canCopy,
    copy: copy,
    getURL: getURL
  });

  return /*#__PURE__*/_createElement(Transition, {
    "in": visible,
    timeout: {
      appear: 0,
      enter: duration,
      exit: duration
    },
    onEnter: handleToolbarEnter,
    unmountOnExit: true
  }, function (state) {
    return /*#__PURE__*/_createElement(ToolbarPortal, {
      container: container
    }, /*#__PURE__*/_createElement(ToolbarWrapper, {
      "data-testid": "refblock-toolbar-wrapper",
      ref: wrapperRef,
      onMouseEnter: onToolbarShow,
      onMouseLeave: onToolbarHide,
      style: _extends({}, transitionStyles[state], coords),
      duration: duration
    }, /*#__PURE__*/_createElement(Toolbar, null, isHost ? _ref : /*#__PURE__*/_createElement(RefBlockToolbarCopy, {
      from: copyFrom,
      locale: locale,
      status: status,
      docKey: docKey,
      uuid: uuid,
      readOnly: readOnly,
      canCopy: canCopy,
      detach: detach,
      copy: copy,
      getURL: getURL
    }))));
  });
};

export default /*#__PURE__*/React.memo(RefBlockToolbar);
//# sourceMappingURL=RefBlockToolbar.js.map