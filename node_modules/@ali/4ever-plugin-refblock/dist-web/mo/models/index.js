import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import { Block } from '@ali/4ever-cangjie';
import { ELEMENT_TYPE } from "../../utils/meta";
export var RefBlockStatus;
/** 引用块 Injection */

(function (RefBlockStatus) {
  RefBlockStatus["normal"] = "normal";
  RefBlockStatus["deleted"] = "deleted";
  RefBlockStatus["loading"] = "loading";
  RefBlockStatus["forbidden"] = "forbidden";
  RefBlockStatus["readOnly"] = "readOnly";
  RefBlockStatus["invalid"] = "invalid";
  RefBlockStatus["disconnected"] = "disconnected";
})(RefBlockStatus || (RefBlockStatus = {}));

var RefBlock = /*#__PURE__*/function (_Block) {
  _inheritsLoose(RefBlock, _Block);

  function RefBlock() {
    return _Block.apply(this, arguments) || this;
  }

  RefBlock.create = function create(properties) {
    if (typeof properties === 'string') {
      throw new Error('`RefBlock.create` does not accept string');
    }

    if (RefBlock.isRefBlock(properties)) {
      return properties;
    }

    return _Block.create.call(this, _extends({}, properties, {
      type: RefBlock.TYPE
    }));
  };

  RefBlock.isRefBlock = function isRefBlock(maybeRefBlock) {
    return Block.isBlock(maybeRefBlock) && maybeRefBlock.type === RefBlock.TYPE;
  };

  RefBlock.isVoid = function isVoid(controller, node) {
    if (!RefBlock.isRefBlock(node)) {
      return false;
    } else if (node.data.pi || node.data.isPageMode) {
      // Pi 下通过 node.data 判断状态
      return node.data.status !== RefBlockStatus.normal;
    } else {
      return controller.value.injections.some(function (inj) {
        return inj.key === node.key && inj.data.status !== RefBlockStatus.normal;
      });
    }
  };

  RefBlock.regenerateChildrenUUID = function regenerateChildrenUUID(node, refblockUUID, uuidKey) {
    return node.mapDescendants(function (child) {
      if (child.isElement() && child.data[uuidKey]) {
        var _extends2;

        var uuid = child.data[uuidKey];

        if (uuid.startsWith(refblockUUID)) {
          return child;
        }

        return child.merge({
          data: _extends({}, child.data, (_extends2 = {}, _extends2[uuidKey] = refblockUUID + "-" + uuid, _extends2))
        });
      }

      return child;
    });
  };

  return RefBlock;
}(Block);

RefBlock.TYPE = ELEMENT_TYPE;
export { RefBlock as default };
//# sourceMappingURL=index.js.map