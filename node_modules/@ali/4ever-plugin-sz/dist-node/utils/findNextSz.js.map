{"version":3,"sources":["../../../src/utils/findNextSz.ts"],"names":["SZ_BIGGER_STEP","SZ_MAP","szList","reduce","pre","cur","index","tmp","MAX","MIN","fontSize","SZ_LIST_MAX","length","SZ_LIST_MIN","findNextSz","target","direction","sz","Math","floor","min","max","targetIndex","undefined","Infinity","i","newMin","abs"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,cAAc,GAAG,EAAvB;;AACA,MAAMC,MAAM,GAAGC,eAAOC,MAAP,CAAc,CAACC,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqB;AAChD,QAAMC,GAAG,GAAG,EACV,GAAGH;AADO,GAAZ;AAGAG,EAAAA,GAAG,CAACF,GAAD,CAAH,GAAWC,KAAX;AACA,SAAOC,GAAP;AACD,CANc,EAMZ,EANY,CAAf;;AAOA,MAAM;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,IAAeC,mBAArB;AACA,MAAMC,WAAW,GAAGT,eAAOA,eAAOU,MAAP,GAAgB,CAAvB,CAApB;AACA,MAAMC,WAAW,GAAGX,eAAO,CAAP,CAApB;;AAEO,SAASY,UAAT,CAAoBC,MAApB,EAAoCC,SAApC,EAAiE;AACtE,MAAIC,EAAJ;;AACA,MAAIF,MAAM,IAAIJ,WAAd,EAA2B;AACzB;AACA,QAAIK,SAAS,KAAK,OAAlB,EAA2B;AACzBC,MAAAA,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,MAAM,GAAGf,cAAV,IAA4BA,cAAvC,IAAyDA,cAA9D;AACA,aAAOkB,IAAI,CAACE,GAAL,CAASH,EAAT,EAAaT,GAAb,CAAP;AACD,KAHD,MAGO,IAAIO,MAAM,GAAGJ,WAAb,EAA0B;AAC/BM,MAAAA,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,MAAM,GAAGf,cAAV,IAA4BA,cAAvC,IAAyDA,cAA9D,CAD+B,CAE/B;;AACA,aAAOkB,IAAI,CAACG,GAAL,CAASJ,EAAT,EAAaN,WAAb,CAAP;AACD;AACF;;AACD,MAAII,MAAM,IAAIF,WAAd,EAA2B;AACzB;AACA,QAAIG,SAAS,KAAK,MAAlB,EAA0B;AACxB,aAAOE,IAAI,CAACG,GAAL,CAASN,MAAM,GAAG,CAAlB,EAAqBN,GAArB,CAAP;AACD,KAFD,MAEO,IAAIM,MAAM,GAAGF,WAAb,EAA0B;AAC/B,aAAOK,IAAI,CAACG,GAAL,CAASN,MAAM,GAAG,CAAlB,EAAqBN,GAArB,CAAP;AACD;AACF;;AACD,MAAIa,WAAW,GAAGrB,MAAM,CAACc,MAAD,CAAxB;;AACA,MAAIO,WAAW,KAAKC,SAApB,EAA+B;AAC7B;AACA,QAAIH,GAAG,GAAGI,QAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,eAAOU,MAA3B,EAAmCa,CAAC,EAApC,EAAwC;AACtC,YAAMC,MAAM,GAAGR,IAAI,CAACS,GAAL,CAASZ,MAAM,GAAGb,eAAOuB,CAAP,CAAlB,CAAf;;AACA,UAAIC,MAAM,GAAGN,GAAb,EAAkB;AAChB;AACD;;AACDE,MAAAA,WAAW,GAAGG,CAAd;AACAL,MAAAA,GAAG,GAAGM,MAAN;AACD;AACF,GAjCqE,CAkCtE;;;AACAT,EAAAA,EAAE,GAAGf,eAAOoB,WAAP,CAAL;;AACA,MAAIN,SAAS,KAAK,MAAd,IAAwBC,EAAE,IAAIF,MAAlC,EAA0C;AACxC;AACAE,IAAAA,EAAE,GAAGf,eAAOoB,WAAW,GAAG,CAArB,CAAL;AACD;;AACD,MAAIN,SAAS,KAAK,OAAd,IAAyBC,EAAE,IAAIF,MAAnC,EAA2C;AACzC;AACAE,IAAAA,EAAE,GAAGf,eAAOoB,WAAW,GAAG,CAArB,CAAL;AACD;;AACD,SAAOL,EAAE,IAAIF,MAAb;AACD","sourcesContent":["import { fontSize } from '@ali/4ever-utils';\nimport { szList } from './szList';\n\nconst SZ_BIGGER_STEP = 10;\nconst SZ_MAP = szList.reduce((pre, cur, index) => {\n  const tmp = {\n    ...pre,\n  };\n  tmp[cur] = index;\n  return tmp;\n}, {});\nconst { MAX, MIN } = fontSize;\nconst SZ_LIST_MAX = szList[szList.length - 1];\nconst SZ_LIST_MIN = szList[0];\n\nexport function findNextSz(target: number, direction: 'left' | 'right') {\n  let sz;\n  if (target >= SZ_LIST_MAX) {\n    // 超出右边界按step取整，和word一致\n    if (direction === 'right') {\n      sz = Math.floor((target + SZ_BIGGER_STEP) / SZ_BIGGER_STEP) * SZ_BIGGER_STEP;\n      return Math.min(sz, MAX);\n    } else if (target > SZ_LIST_MAX) {\n      sz = Math.floor((target - SZ_BIGGER_STEP) / SZ_BIGGER_STEP) * SZ_BIGGER_STEP;\n      // 确保能回到 SZ_LIST_MAX\n      return Math.max(sz, SZ_LIST_MAX);\n    }\n  }\n  if (target <= SZ_LIST_MIN) {\n    // 超出左边界按1加减\n    if (direction === 'left') {\n      return Math.max(target - 1, MIN);\n    } else if (target < SZ_LIST_MIN) {\n      return Math.max(target + 1, MIN);\n    }\n  }\n  let targetIndex = SZ_MAP[target];\n  if (targetIndex === undefined) {\n    // 找到最接近的字号\n    let min = Infinity;\n    for (let i = 0; i < szList.length; i++) {\n      const newMin = Math.abs(target - szList[i]);\n      if (newMin > min) {\n        break;\n      }\n      targetIndex = i;\n      min = newMin;\n    }\n  }\n  // 默认最接近的字号\n  sz = szList[targetIndex];\n  if (direction === 'left' && sz >= target) {\n    // next left\n    sz = szList[targetIndex - 1];\n  }\n  if (direction === 'right' && sz <= target) {\n    // next right\n    sz = szList[targetIndex + 1];\n  }\n  return sz || target;\n}\n"],"file":"findNextSz.js"}