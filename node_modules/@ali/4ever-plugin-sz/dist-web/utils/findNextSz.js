import _extends from "@babel/runtime/helpers/extends";
import { fontSize } from '@ali/4ever-utils';
import { szList } from "./szList";
var SZ_BIGGER_STEP = 10;
var SZ_MAP = szList.reduce(function (pre, cur, index) {
  var tmp = _extends({}, pre);

  tmp[cur] = index;
  return tmp;
}, {});
var MAX = fontSize.MAX,
    MIN = fontSize.MIN;
var SZ_LIST_MAX = szList[szList.length - 1];
var SZ_LIST_MIN = szList[0];
export function findNextSz(target, direction) {
  var sz;

  if (target >= SZ_LIST_MAX) {
    // 超出右边界按step取整，和word一致
    if (direction === 'right') {
      sz = Math.floor((target + SZ_BIGGER_STEP) / SZ_BIGGER_STEP) * SZ_BIGGER_STEP;
      return Math.min(sz, MAX);
    } else if (target > SZ_LIST_MAX) {
      sz = Math.floor((target - SZ_BIGGER_STEP) / SZ_BIGGER_STEP) * SZ_BIGGER_STEP; // 确保能回到 SZ_LIST_MAX

      return Math.max(sz, SZ_LIST_MAX);
    }
  }

  if (target <= SZ_LIST_MIN) {
    // 超出左边界按1加减
    if (direction === 'left') {
      return Math.max(target - 1, MIN);
    } else if (target < SZ_LIST_MIN) {
      return Math.max(target + 1, MIN);
    }
  }

  var targetIndex = SZ_MAP[target];

  if (targetIndex === undefined) {
    // 找到最接近的字号
    var min = Infinity;

    for (var i = 0; i < szList.length; i++) {
      var newMin = Math.abs(target - szList[i]);

      if (newMin > min) {
        break;
      }

      targetIndex = i;
      min = newMin;
    }
  } // 默认最接近的字号


  sz = szList[targetIndex];

  if (direction === 'left' && sz >= target) {
    // next left
    sz = szList[targetIndex - 1];
  }

  if (direction === 'right' && sz <= target) {
    // next right
    sz = szList[targetIndex + 1];
  }

  return sz || target;
}
//# sourceMappingURL=findNextSz.js.map