"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var React = _interopRequireWildcard(require("react"));

var _emojiApi = _interopRequireDefault(require("./emojiApi"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// HeaderList
var MarkdownIt = require('markdown-it');

var markdownItEmoji = require('markdown-it-emoji');

var md = new MarkdownIt();
md.use(markdownItEmoji);

var EmojiList = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2.default)(EmojiList, _React$Component);

  function EmojiList() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = EmojiList.prototype;

  _proto.handleEmoji = function handleEmoji(emoji) {
    var onSelectEmoji = this.props.onSelectEmoji;

    if (typeof onSelectEmoji === 'function') {
      onSelectEmoji(emoji);
    }
  };

  _proto.render = function render() {
    var _this = this;

    return /*#__PURE__*/React.createElement("ul", {
      className: "emoji-list"
    }, Object.keys(_emojiApi.default).map(function (item, i) {
      return /*#__PURE__*/React.createElement("div", {
        className: "list-item",
        key: item,
        dangerouslySetInnerHTML: {
          __html: md.render("" + _emojiApi.default[item])
        },
        onClick: _this.handleEmoji.bind(_this, item)
      });
    }));
  };

  return EmojiList;
}(React.Component);

var _default = EmojiList;
exports.default = _default;