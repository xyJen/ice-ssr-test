// @ts-ignore
// import {MarkdownIt} from 'markdown-it';
var MarkdownIt = require('markdown-it');

var markdownItEmoji = require('markdown-it-emoji');

var subscript = require('markdown-it-sub');

var superscript = require('markdown-it-sup');

var footnote = require('markdown-it-footnote');

var deflist = require('markdown-it-deflist');

var abbreviation = require('markdown-it-abbr');

var insert = require('markdown-it-ins');

var mark = require('markdown-it-mark');

var tasklists = require('markdown-it-task-lists'); // var latexMath = require('markdown-it-mathjax3');


var anchor = require('markdown-it-anchor');

var toc_anchor = require("markdown-it-toc-done-right"); // import MdEditor, { Plugins } from 'react-markdown-editor-lite';
// import uml from 'markdown-it-textual-uml';
// import markdownItMermaid from 'markdown-it-mermaid';
// var markdownItMermaid = require('@liradb2000/markdown-it-mermaid');
// var markdownItMermaid = React.lazy(() => require('@liradb2000/markdown-it-mermaid'));


import './index.less'; // import markdownItMermaid from '@liradb2000/markdown-it-mermaid'

import hljs from 'highlight.js';
import 'highlight.js/styles/atom-one-light.css';

var table = require('markdown-it-multimd-table');

function uslugify(str) {
  return str.toLowerCase().trim().replace(/[\s_-]+/g, '-') // .replace(/[^\w\s-]/g, '')
  .replace(/^-+|-+$/g, '').replace(/[.]/g, '');
} // MdEditor.use(Plugins.TabInsert, {
//   tabMapValue: 1, // note that 1 means a '\t' instead of ' '.
// });


import * as React from 'react';
import HtmlRender from '../editor/preview';
import { transMulitiToSingle } from './MultilineBlockquote';

var EditorMdObj = function EditorMdObj(obj) {
  var md = new MarkdownIt((obj === null || obj === void 0 ? void 0 : obj.defaultObj) || {
    html: true,
    linkify: true,
    typographer: true,
    highlight: function highlight(str, lang) {
      if (lang && hljs.getLanguage(lang)) {
        try {
          return hljs.highlight(lang, str).value;
        } catch (__) {}
      }

      return ''; // use external default escaping
    },
    breaks: false
  });
  md // .use(markdownItGraphviz)
  .use(markdownItEmoji).use(subscript).use(superscript).use(footnote).use(deflist).use(abbreviation).use(insert).use(mark).use(tasklists, {
    enabled: false
  }) // .use(md_id)
  // // .use(markdownItMath)
  // // .use(katex)
  // .use(latexMath)
  // // .use(uml)
  // .use(markdownItMermaid)
  // // .use(markdownItTable)
  .use(table, {
    multiline: true,
    rowspan: true,
    headerless: true,
    multibody: true,
    aotolabel: true
  });

  if (obj.useAnchor) {
    md.use(anchor.default, {
      permalink: anchor.default.permalink.linkInsideHeader({
        symbol: "\n          <span class=\" octicon-link-code\">#</span>\n        ",
        placement: 'before'
      }),
      slugify: uslugify
    }).use(toc_anchor.default, {
      containerClass: 'toc',
      //生成的容器的类名，这样最后返回来的字符串是 <nav class="toc"><nav/>
      containerId: 'toc',
      //生成的容器的ID，这样最后返回来的字符串是 <nav id="toc"><nav/>
      listType: 'ul',
      //导航列表使用ul还是ol
      listClass: 'listClass',
      //li标签的样式名
      linkClass: 'linkClass',
      //a标签的样式名
      slugify: uslugify
    });
  }

  md.renderer.rules.emoji = function (token, idx) {
    return '<span class="emoji">' + token[idx].content + '</span>';
  };

  return md;
};

export { EditorMdObj };
export var EditorPreview = function EditorPreview(props) {
  React.useEffect(function () {
    if (props.renderCallback && document.getElementsByClassName('custom-html-style')[0]) {
      (function () {
        var imgs = document.getElementsByClassName('custom-html-style')[0].getElementsByTagName('img');
        var imgsOnload = [];

        var _loop = function _loop(i) {
          imgsOnload.push(new Promise(function (resolve) {
            imgs[i].onload = function () {
              resolve(true);
            };

            imgs[i].onerror = function () {
              resolve(false);
            };
          }));
        };

        for (var i = 0; i < imgs.length; i++) {
          _loop(i);
        }

        Promise.all(imgsOnload).then(function () {
          props.renderCallback();
        });
      })();
    }
  }); // console.log(props.MarkdownValue)

  var md = new EditorMdObj({
    useAnchor: false
  });
  var text;

  if (typeof props.MarkdownValue == 'string') {
    var _text;

    text = transMulitiToSingle(props.MarkdownValue); // 用于mention的高亮

    var regex = new RegExp("@([\\u4e00-\\u9fa5a-zA-Z0-9-]+)+\\([a-zA-Z0-9_]+\\)", 'g');
    text = (_text = text) === null || _text === void 0 ? void 0 : _text.replace(regex, function (mention) {
      return "<span class='mention'>" + mention + "</span>";
    });
    text = md.render(text);
  } else if (props.html) {
    text = props.html;
  } // text = deleteSingleEnter(text);


  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HtmlRender, {
    html: text,
    className: props.className,
    ref: props.ref
  }));
};