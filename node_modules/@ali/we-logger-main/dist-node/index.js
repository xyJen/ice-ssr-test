"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=require("@ali/we-logger-utils");!function(e){e[e.SUM=0]="SUM",e[e.AVG=1]="AVG",e[e.API=2]="API",e[e.LOG=3]="LOG"}(e||(e={}));var s,i=e;!function(e){e[e.TRACE=0]="TRACE",e[e.DEBUG=1]="DEBUG",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.FATAL=5]="FATAL"}(s||(s={}));var r=s;class a{constructor(e){this._appender=void 0,this._enabled=!0,this._appender=e}getAppender(){return this._appender}isEnabled(){return this._enabled}disable(){this._enabled=!1}enable(){this._enabled=!0}setBaseInfo(e){try{this._appender.setBaseInfo(e)}catch(e){}}sum(e){if(this._enabled)try{if(this._appender.ignore(i[i.SUM],{key:e}))return;this._appender.sum(e)}catch(e){}}avg(e,t){if(this._enabled)try{if(this._appender.ignore(i[i.AVG],{key:e}))return;this._appender.avg(e,t)}catch(e){}}log(e,t,s){if(this._enabled)try{if(this._appender.ignore(i[i.LOG],{"log-level":r[e],"log-category":t,content:s}))return;this._appender.log(e,t,s)}catch(e){}}api(e){if(this._enabled)try{if(this._appender.ignore(i[i.API],e))return;this._appender.api(e)}catch(e){}}}exports.Action=i,exports.Level=r,exports.NoopAppender=class{ignore(e,t){return!1}setBaseInfo(e){}sum(e){}avg(e,t){}log(e,t,s){}api(e){}},exports.default=class{constructor(){this._traceId=void 0,this._enabled=!0,this._times={},this._baseInfo={},this._appenders=[],this.refreshTraceId()}getTraceId(){return this._traceId}refreshTraceId(e=t.uuid().substring(0,8)){return this._traceId=e,this.setBaseInfo({trace_id:this._traceId}),this._traceId}isEnabled(){return this._enabled}enable(){this._enabled=!0}disable(){this._enabled=!1}getBaseInfo(){return this._baseInfo}getAppenders(){return this._appenders}append(e){const t=new a(e);try{t.setBaseInfo(this._baseInfo)}catch(e){}return this._appenders.push(t),this}remove(e){return this._appenders=this._appenders.filter(t=>t.getAppender()!==e),this}setBaseInfo(e){this._baseInfo={...this._baseInfo,...e},this._appenders.forEach(e=>{try{e.setBaseInfo(this._baseInfo)}catch(e){}})}time(e,t){this.timeStart(e);try{t()}finally{this.timeEnd(e)}}timeStart(e){this._times[e]=Date.now()}timeEnd(e){const t=Date.now();this._times[e]&&t>=this._times[e]&&this.avg(e,t-this._times[e]),delete this._times[e]}perf(e,s=t.getTimeDiffSinceStart()){this.avg(e,s)}count(e){this.sum(e)}sum(e){this.isEnabled()&&this._appenders.forEach(t=>{try{t.sum(e)}catch(e){}})}avg(e,t=0){this.isEnabled()&&this._appenders.forEach(s=>{try{s.avg(e,t)}catch(e){}})}error(...e){this.logWithLevel(r.ERROR,...e)}fatal(...e){this.logWithLevel(r.FATAL,...e)}warn(...e){this.logWithLevel(r.WARN,...e)}info(...e){this.logWithLevel(r.INFO,...e)}log(...e){this.logWithLevel(r.INFO,...e)}debug(...e){this.logWithLevel(r.DEBUG,...e)}trace(...e){this.logWithLevel(r.TRACE,...e)}logWithLevel(e,...t){if(!this.isEnabled())return;if(!t||0===t.length)return;let s,i="default";2===t.length?(i=String(t[0]),s=t[1]):1===t.length&&(s=t[0]),this._appenders.forEach(t=>{try{t.log(e,i,s)}catch(e){}})}api(e){this.isEnabled()&&this._appenders.forEach(t=>{try{t.api(e)}catch(e){}})}};
