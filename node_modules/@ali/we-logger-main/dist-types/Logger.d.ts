import Appender from './interface/Appender';
import AppenderWrapper from './AppenderWrapper';
import APIParams from './interface/APIParams';
import Level from './interface/Level';
export default class Logger {
    private _traceId;
    private _enabled;
    private _times;
    private _baseInfo;
    private _appenders;
    constructor();
    getTraceId(): string;
    refreshTraceId(id?: string): string;
    isEnabled(): boolean;
    enable(): void;
    disable(): void;
    getBaseInfo(): Record<string, any>;
    getAppenders(): AppenderWrapper[];
    append(appender: Appender): this;
    remove(appender: Appender): this;
    setBaseInfo(params: Record<string, any>): void;
    time(key: string, callback: Function): void;
    timeStart(key: string): void;
    timeEnd(key: string): void;
    perf(key: string, value?: number): void;
    count(key: string): void;
    sum(key: string): void;
    avg(key: string, value?: number): void;
    error(...cateAndContent: Array<string | Error | Record<string, any>>): void;
    fatal(...cateAndContent: Array<string | Error | Record<string, any>>): void;
    warn(...cateAndContent: Array<string | Error | Record<string, any>>): void;
    info(...cateAndContent: Array<string | Error | Record<string, any>>): void;
    log(...cateAndContent: Array<string | Error | Record<string, any>>): void;
    debug(...cateAndContent: Array<string | Error | Record<string, any>>): void;
    trace(...cateAndContent: Array<string | Error | Record<string, any>>): void;
    logWithLevel(level: Level, ...cateAndContent: Array<string | Error | Record<string, any>>): void;
    api(params: APIParams): void;
}
