import React from 'react';
import { Size, ExcessMode } from './interface';
export interface ITabsProps {
    /**
     * 设置根节点的类名，默认：undefined
     */
    className?: string;
    /**
     * 设置根节点样式，默认：undefined
     */
    style?: React.CSSProperties;
    /**
     * Tab的样式，默认：line
     */
    type?: 'line' | 'card' | 'capsule' | 'editable-line' | 'editable-card';
    /**
     * 'large' | 'default' | 'small'，默认：default
     */
    size?: Size;
    /**
     * 设置tabBar位置
     */
    tabPosition?: 'left' | 'top';
    /**
     * 激活的 tabKey，默认：undefined
     */
    activeKey?: string;
    /**
     * 默认激活的 tabKey，默认：undefined，如果有activeKey，则忽略
     */
    defaultActiveKey?: string;
    /**
     * 变化Tab的时候是否有动画效果，默认：true
     */
    animated?: boolean;
    /**
     * 支持键盘左右键进行切换tab，默认：true
     */
    keyboard?: boolean;
    /**
     * 是否强制销毁不显示的tab的节点，默认：false
     */
    destroyInactiveTabPane?: boolean;
    /**
     * activeKey发生变化时的回调函数
     */
    onChange?: (activeKey: string) => void;
    /**
     * TabBar 点击时的回调函数
     */
    onTabClick?: (nextKey: string, e?: React.MouseEvent<HTMLDivElement>) => void;
    /**
     * 当 type = 'editable-card' 的时候有效，关闭某个tab触发的回调函数
     */
    onClose?: (targetKey: string) => void;
    /**
     * tab数量较多时，左滑动箭头的点击回调函数
     */
    onPrevClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
    /**
     * tab数量较多时，右滑动箭头的点击回调函数
     */
    onNextClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
    /**
     * 设置要不要显示TabBar
     */
    hasTabBar?: boolean;
    /**
     * 设置tabBar节点样式
     */
    tabBarStyle?: React.CSSProperties;
    /**
     * 设置tabContent节点样式
     */
    tabContentStyle?: React.CSSProperties;
    /**
     * 多余选项卡的展示方式，默认：'arrow'
     */
    excessMode?: ExcessMode;
    /**
     * 测试使用
     */
    testid?: string;
}
interface ITabsState {
    activeKey: string;
}
export declare class Tabs extends React.Component<ITabsProps, ITabsState> {
    static defaultProps: {
        onChange: any;
        keyboard: boolean;
        children: null;
        style: {};
        size: string;
        type: string;
        animated: boolean;
        destroyInactiveTabPane: boolean;
        hasTabBar: boolean;
        excessMode: string;
    };
    constructor(props: ITabsProps);
    static getDerivedStateFromProps(props: ITabsProps, state: ITabsState): ITabsState | null;
    onTabClick: (activeKey: string, e?: React.MouseEvent<HTMLDivElement, MouseEvent> | undefined) => void;
    onNavKeyDown: (e: React.KeyboardEvent) => void;
    onScroll: ({ target, currentTarget }: any) => void;
    setActiveKey: (nextActiveKey: string) => void;
    /**
     * 传入 true 获得 activeKey 的下一个未被禁用的 key
     * 传入 false 获得上一个
     */
    getNextActiveKey: (next: boolean) => any;
    render(): JSX.Element;
}
export {};
