import React, { Component } from 'react';
import ResizeObserver from 'resize-observer-polyfill';
import { ToolGroupArray } from './ToolGroup';
export interface IDoubleLineToolbarProps {
    /**
     * 是否启用自动折叠功能
     */
    autoFolding?: boolean;
    /**
     * 包裹的组件
     */
    children?: ToolGroupArray;
    /**
     * toolbar wrapper 的行内样式
     */
    style?: React.CSSProperties;
    /**
     * 层级
     */
    zIndex?: number;
    /**
     * 对齐方式
     */
    alignType?: 'left' | 'center' | 'right';
    /**
     * 类名
     */
    className?: string;
    /**
     * 更多面板点击后自动关闭
     */
    autoCloseMorePanel?: boolean;
}
interface IDoubleLineToolbarState {
    hiddenPivot: number;
    groups: ToolGroupArray;
    hiddenGroups: ToolGroupArray;
    prevChildren: ToolGroupArray | null;
    needCalculating: boolean;
    morePanelVisible: boolean;
}
export declare class DoubleLineToolbar extends Component<IDoubleLineToolbarProps, IDoubleLineToolbarState> {
    static defaultProps: {
        autoFolding: boolean;
        alignType: string;
    };
    resizeObserver: ResizeObserver;
    slotsWidthList: number[];
    refToolbar: React.RefObject<HTMLElement>;
    refToolContent: React.RefObject<HTMLElement>;
    refShow: React.RefObject<HTMLDivElement>;
    refMore: React.RefObject<HTMLElement>;
    recomputeLayout: {
        (...args: any[]): any;
        cancel(): void;
    };
    constructor(props: IDoubleLineToolbarProps);
    static getDerivedStateFromProps: (props: IDoubleLineToolbarProps, state: IDoubleLineToolbarState) => {
        groups: ToolGroupArray;
        hiddenGroups: ToolGroupArray;
        prevChildren: ToolGroupArray | undefined;
        hiddenPivot: number;
        needCalculating: boolean;
    } | {
        groups: ToolGroupArray;
        hiddenGroups: ToolGroupArray;
        prevChildren: ToolGroupArray | undefined;
        needCalculating: boolean;
        hiddenPivot?: undefined;
    } | null;
    componentDidMount(): void;
    componentDidUpdate(prevProps: IDoubleLineToolbarProps): void;
    componentWillUnmount(): void;
    mouseDownAtShow: (e: MouseEvent) => void;
    /**
     * 重新计算宽度来布局
     */
    calculateWidth: (isFirst?: boolean) => void;
    getResizeContainer: () => HTMLElement;
    /**
   * resize回调事件
   */
    handleResize: () => void;
    handleClickMorePanel: (e: React.MouseEvent) => void;
    handleMorePanelVisibleChange: (e: boolean) => void;
    renderMore(hiddenSlots: React.ReactNodeArray): React.ReactNode;
    render(): JSX.Element;
}
export {};
