import React from 'react';
import { TLineStyle } from './commonLine';
export interface ILineTypeValue {
    lineType: TLineStyle;
    size?: number;
}
export interface ICommonLineSelectProps {
    /**
     * 线条类型的数组
     */
    lineTypeArray?: Record<string, ILineTypeValue>;
    /**
     * 边框的颜色
     */
    color: string;
    /**
     * 线条的长度，单位：px
     */
    length: number;
    /**
     * 默认的线条样式，非受控模式
     */
    defaultLineType?: string;
    /**
     * 线条样式,受控模式
     */
    lineType?: string;
    /**
     * 显示区样式
     */
    style?: React.CSSProperties;
    /**
     * 弹层样式
     */
    overlayStyle?: React.CSSProperties;
    /**
     * 设置 option 容器样式
     */
    optionWrapperStyle?: React.CSSProperties;
    /**
     * 线条类型发生变化时的回调函数
     */
    onLineTypeChange: (type: string) => void;
    /**
     * 层级
     */
    zIndex?: number;
    /**
     * 选项除了线条外还可附加说明文字（如 '2pt' ）
     */
    optionText?: (lineType: ILineTypeValue) => string;
    /**
     * 自定义的 trigger
     */
    customTrigger?: () => JSX.Element;
    /**
     * 是否有边框
     */
    bordered?: boolean;
    /**
     * tooltip提示
     */
    title?: string | React.ReactNode;
    /**
     * 弹层的可见性
     */
    visible?: boolean;
    /**
     * 默认弹层的可见性
     */
    defaultVisible?: boolean;
    /**
     * 弹层可见性变化
     */
    onVisibleChange?: (e: boolean) => void;
    /**
     * 是否可以选中
     */
    selectable?: boolean;
    /**
     * 类名
     */
    className?: string;
    /**
     * 是否禁用
     */
    disabled?: boolean;
}
interface IState {
    innerLineType: string;
    innerVisible: boolean;
}
export declare class CommonLineSelect extends React.PureComponent<ICommonLineSelectProps, IState> {
    static lineTypes: Record<string, ILineTypeValue>;
    static defaultProps: {
        bordered: boolean;
        defaultVisible: boolean;
        disabled: boolean;
    };
    constructor(props: ICommonLineSelectProps);
    static getDerivedStateFromProps(nextProps: ICommonLineSelectProps, state: IState): {
        innerVisible: boolean;
    } | null;
    handleLineTypeChange: (type: string) => void;
    render(): JSX.Element;
}
export {};
