import React from 'react';
import { EMenuMode } from './consts';
export interface IController {
    mode: EMenuMode;
    zIndex?: number;
    menuId: string;
    autoClose: boolean;
    isSubMenuOpened: (key: string) => boolean;
    isMenuItemSelected: (key: string) => boolean;
    isAnySubMenuOpened: (key: string) => boolean;
    showSubMenu: (path: string) => void;
    selectMenuItem: (key: string) => void;
    closeAllMenu: () => void;
    clickMenuItem?: (key: string, e: React.MouseEvent<HTMLElement>) => void;
    destroyOverlayWhenInvisible?: boolean;
    showMenuTimer: number;
    shortcutKey?: boolean;
    menuRootRef?: React.MutableRefObject<HTMLDivElement | undefined>;
}
export interface IMenuKeyContextValue {
    addKey: (key: string, keys: Record<string, any>) => void;
    delKey: (key: string) => void;
}
export interface IMenuProps {
    /**
     * 菜单模式
     */
    mode?: EMenuMode;
    /**
     *
     */
    className?: string;
    /**
     *
     */
    style?: React.CSSProperties;
    /**
     * 选中的菜单项的 key
     */
    selectedKeys?: string[];
    /**
     * 默认选中的菜单项的 key
     */
    defaultSelectedKeys?: string[];
    /**
     *
     */
    zIndex?: number;
    /**
     *
     */
    onClick?: (menuKey: string, e: React.MouseEvent<HTMLElement>) => void;
    /**
     * 自动关闭
     */
    autoClose?: boolean;
    /**
     * 不可见时销毁overlay
     */
    destroyOverlayWhenInvisible?: boolean;
    /**
     * 是否支持快捷键（有效子节点为 Submenu、MenuItem）
     */
    shortcutKey?: boolean;
    /**
     * 初始化时是否默认选中第一个有效子节点，在 shortcutKey = true 时，该属性生效
     */
    shouldSelectFirstItem?: boolean;
    /**
     * 设置submenu的容器为menuRoot
     */
    insertSubmenuToMenuRoot?: boolean;
}
export interface IMenuItemProps {
    /**
     * 是否选中
     */
    selected?: boolean;
    /**
     * 图标
     */
    icon?: React.ReactNode;
    /**
     * 菜单项的key
     */
    menuKey: string;
    /**
     * 是否禁用
     */
    disabled?: boolean;
    /**
     * 禁用时提示文案
     */
    disabledTip?: string;
    /**
     * 额外样式
     */
    style?: React.CSSProperties;
    /**
     * 点击事件处理
     */
    onClick?: (menuKey: string, e: React.MouseEvent<HTMLElement>) => void;
    /**
     * 点击后收起面板
     */
    autoClose?: boolean;
    /**
     * 高度
     */
    height?: number | 'auto';
    /**
     * 是否hover高亮
     */
    hoverable?: boolean;
    /**
     * 暴露 data-testid, 用于测试
     */
    testid?: string;
}
export interface IMenuItemGroupProps {
    /**
     * 菜单分组标题
     */
    title?: React.ReactNode;
}
export interface ISubMenuProps {
    /**
     * 二级菜单的标题
     */
    title: React.ReactNode;
    /**
     * 图标
     */
    icon?: React.ReactNode;
    /**
     * 二级菜单唯一的key
     */
    menuKey?: string;
    /**
     * 是否显示箭头Icon
     */
    showArrow?: boolean;
    /**
     * 下拉菜单的类名
     */
    overlayClassName?: string;
    /**
     * 下拉菜单样式
     */
    overlayStyle?: React.CSSProperties;
    /**
     * 是否禁止点击 SubMenu
     */
    disabled?: boolean;
    /**
     * 禁止时提示文案
     */
    disabledTip?: string;
    /**
     * 暴露 data-testid, 用于测试
     */
    testid?: string;
}
export declare type IUseMenuKeyContext = [IMenuKeyContextValue, string, Record<string, any>];
/**
 * 快捷方式清理后的有效节点
 */
export declare type ISimpleTreeNode = {
    /**
     * 节点标题
     */
    title?: string | React.ReactNode;
    /**
     * 节点key
     */
    menuKey: string;
    /**
     * 节点存在的子节点
     */
    children?: ISimpleTreeNode[];
    /**
     * 节点的点击事件，可能不存在
     */
    onClick?: (event?: React.MouseEvent<HTMLElement> | any) => void;
    /**
     * 节点路径
     */
    path: string;
    /**
     * 父级节点
     */
    parentPath?: string;
    /**
     * 索引
     */
    index?: number;
    /**
     * 触发节点的key
     */
    eventKey?: string;
};
export declare type IHotkeyPositionContext = {
    hotkeyPosition: ISimpleTreeNode | null;
    setHotkeyPosition: (hotkeyPosition: ISimpleTreeNode | null) => void;
    isHotkeyType: boolean;
    setHotkeyType: (isHotkeyType: boolean) => void;
    mousePosition: number;
    setMousePosition: ISetMousePosition;
    getActionNode: (key: string) => ISimpleTreeNode | null;
    registerValidNode: (hotkeyPosition: ISimpleTreeNode) => void;
    unRegisterValidNode: (hotkeyPosition: ISimpleTreeNode) => void;
};
export declare type ISetMousePosition = (x: number) => void;
