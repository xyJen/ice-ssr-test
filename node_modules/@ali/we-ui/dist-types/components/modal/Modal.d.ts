import React from 'react';
import { IButtonProps } from "../button";
export interface IModalConfirmOptions extends Pick<IModalProps, 'okText' | 'cancelText' | 'locale' | 'onOk' | 'onCancel' | 'zIndex' | 'width' | 'title' | 'okButtonProps' | 'cancelButtonProps' | 'keyboard'> {
    content: string | React.ReactNode;
}
export interface IModalMesOptions extends Pick<IModalProps, 'okText' | 'locale' | 'onOk' | 'zIndex' | 'width' | 'title' | 'okButtonProps' | 'testid' | 'keyboard'> {
    content: string | React.ReactNode;
    showLoadingIcon?: boolean;
}
export interface IModalProps {
    /**
     * 设置国际化语言
     */
    locale?: string;
    /**
     * 标题
     */
    title?: string | React.ReactNode;
    /**
     * 自定义按钮区
     */
    footer?: React.ReactNode | null;
    /**
     * 是否显示
     */
    visible?: boolean;
    /**
     * 确认按钮文案
     */
    okText?: string;
    /**
     * 取消按钮文案
     */
    cancelText?: string;
    /**
     * 宽度
     */
    width?: number;
    /**
     * 层叠顺序
     */
    zIndex?: number;
    /**
     * 确认按钮是否loading
     */
    confirmLoading?: boolean;
    /**
     * 是否有右上角关闭Icon
     */
    closable?: boolean;
    /**
     * 确认回调
     */
    onOk?: () => void;
    /**
     * 取消回调
     */
    onCancel?: () => void;
    /**
     * 可用于设置浮层的样式，调整浮层位置等
     */
    style?: React.CSSProperties;
    /**
     * Modal body 样式
     */
    bodyStyle?: React.CSSProperties;
    /**
     * 遮罩样式
     */
    maskStyle?: React.CSSProperties;
    /**
     * ok 按钮 props
     */
    okButtonProps?: IButtonProps;
    /**
     * cancel 按钮 props
     */
    cancelButtonProps?: IButtonProps;
    /**
     * 点击蒙层是否允许关闭 默认true
     */
    maskClosable?: boolean;
    /**
     * 测试使用
     */
    testid?: string;
    /**
     * 是否支持键盘 esc 关闭
     */
    keyboard?: boolean;
}
interface IModalMethodResult {
    destroy: () => void;
}
interface IModalMethods {
    confirm: (e: IModalConfirmOptions) => IModalMethodResult;
    info: (e: IModalMesOptions) => IModalMethodResult;
    success: (e: IModalMesOptions) => IModalMethodResult;
    error: (e: IModalMesOptions) => IModalMethodResult;
    warning: (e: IModalMesOptions) => IModalMethodResult;
}
export declare const Modal: React.FC<IModalProps> & IModalMethods;
export {};
