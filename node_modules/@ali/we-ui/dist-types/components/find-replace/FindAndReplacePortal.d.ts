/// <reference types="react" />
import { IFindAndReplaceBaseProps } from './FindAndReplace';
export declare const FindAndReplacePortal: {
    new (props: IFindAndReplaceBaseProps & import("../../utils/dragAndDropHOC").IDragAndDropHOCProps): {
        startPageX: number;
        startPageY: number;
        startMarginTop: number;
        startMarginRight: number;
        maxMarginTop: number;
        maxMarginRight: number;
        modalRef: import("react").RefObject<HTMLDivElement>;
        componentDidMount(): void;
        componentWillUnmount(): void;
        handleMouseDown: (event: any) => void;
        setMax: () => void;
        handleResize: {
            (...args: any[]): any;
            cancel(): void;
        };
        handleDragStart: (event: any) => void;
        handleDragging: (event: MouseEvent) => void;
        handleDragEnd: () => void;
        renderFindAndReplace: () => JSX.Element;
        render(): import("react").ReactPortal;
        context: any;
        setState<K extends "dragging">(state: import("../../utils/dragAndDropHOC").IDragAndDropHOCState | ((prevState: Readonly<import("../../utils/dragAndDropHOC").IDragAndDropHOCState>, props: Readonly<IFindAndReplaceBaseProps & import("../../utils/dragAndDropHOC").IDragAndDropHOCProps>) => import("../../utils/dragAndDropHOC").IDragAndDropHOCState | Pick<import("../../utils/dragAndDropHOC").IDragAndDropHOCState, K> | null) | Pick<import("../../utils/dragAndDropHOC").IDragAndDropHOCState, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<IFindAndReplaceBaseProps & import("../../utils/dragAndDropHOC").IDragAndDropHOCProps> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<import("../../utils/dragAndDropHOC").IDragAndDropHOCState>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<IFindAndReplaceBaseProps & import("../../utils/dragAndDropHOC").IDragAndDropHOCProps>, nextState: Readonly<import("../../utils/dragAndDropHOC").IDragAndDropHOCState>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<IFindAndReplaceBaseProps & import("../../utils/dragAndDropHOC").IDragAndDropHOCProps>, prevState: Readonly<import("../../utils/dragAndDropHOC").IDragAndDropHOCState>): any;
        componentDidUpdate?(prevProps: Readonly<IFindAndReplaceBaseProps & import("../../utils/dragAndDropHOC").IDragAndDropHOCProps>, prevState: Readonly<import("../../utils/dragAndDropHOC").IDragAndDropHOCState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<IFindAndReplaceBaseProps & import("../../utils/dragAndDropHOC").IDragAndDropHOCProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<IFindAndReplaceBaseProps & import("../../utils/dragAndDropHOC").IDragAndDropHOCProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<IFindAndReplaceBaseProps & import("../../utils/dragAndDropHOC").IDragAndDropHOCProps>, nextState: Readonly<import("../../utils/dragAndDropHOC").IDragAndDropHOCState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<IFindAndReplaceBaseProps & import("../../utils/dragAndDropHOC").IDragAndDropHOCProps>, nextState: Readonly<import("../../utils/dragAndDropHOC").IDragAndDropHOCState>, nextContext: any): void;
    };
    contextType?: import("react").Context<any> | undefined;
};
