import * as React from 'react';
export interface IFindAndReplaceBaseProps {
    /**
     * 激活的 tabKey
     */
    activeTabKey?: 'find' | 'replace';
    /**
     * 点击 tab 后的回调
     */
    onTabClick?: (nextKey: 'find' | 'replace') => void;
    /**
     * 默认打开的Tab面板，find or replace
     */
    defaultTabKey: 'find' | 'replace';
    /**
     * 光标是否focus到查找对话框
     */
    focused?: boolean;
    /**
     * 是否只有查找功能(应用于只读模式下)
     */
    isFindOnly: boolean;
    /**
     * 查找的字符串
     */
    findText: string;
    /**
     * 查找输入框 内容变化的回调
     */
    onFindInputChange: (text: string) => void;
    /**
     * 查找到的匹配结果的数量
     */
    matchedCount: number;
    /**
     * 当前高亮的索引, 索引从1开始计数
     */
    focusIndex: number;
    /**
     * 当前高亮的索引发生变化的回调
     */
    onFocusIndexChange: (index: number) => void;
    /**
     * 默认的要替换的字符串
     */
    defaultReplaceText?: string;
    /**
     * 替换当前查找项
     */
    onReplaceCurrent: (text: string) => void;
    /**
     * 替换所有查找项的方法
     */
    onReplaceAll: (text: string) => void;
    /**
     * 本地语言类型，如zh-CN
     */
    locale?: string;
    /**
     * 暴露 data-testid, 用于测试
     */
    testid?: string;
    /**
     * 面板的 DOM 节点引用
     */
    domRef?: React.RefObject<Element>;
}
interface IFindAndReplaceProps extends IFindAndReplaceBaseProps {
    /**
     * 关闭时的回调函数
     */
    onClose?: () => void;
}
interface IState {
    replaceText: string;
}
export declare class FindAndReplace extends React.Component<IFindAndReplaceProps, IState> {
    inputRef: React.RefObject<HTMLInputElement>;
    constructor(props: IFindAndReplaceProps);
    handleReplaceCurrent: () => void;
    handleReplaceAll: () => void;
    handleFindInputChange: (event: any) => void;
    handleClose: () => void;
    handleFindInputKeyDown: (event: any) => void;
    handleFocusPrevMatchedItem: () => void;
    handleFocusNextMatchedItem: () => void;
    handleReplaceInputChange: (event: any) => void;
    handleReplaceInputKeyDown: (event: any) => void;
    focusInput: () => void;
    selectInput: () => void;
    renderFocusIndex: () => JSX.Element;
    renderFindPanel: () => JSX.Element;
    renderReplacePanel: () => JSX.Element;
    render(): JSX.Element;
}
export {};
