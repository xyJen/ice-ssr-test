/// <reference types="react" />
import { IPlacement } from '../trigger';
import { IInputHandle } from '../input/Input';
export interface Rule<VT> {
    validator: (e: VT) => boolean;
    message?: string;
}
export interface ValidationError<VT> {
    [key: string]: any;
    violatedRule: Rule<VT>;
}
export declare type ISelectValue = number | string;
export interface ISelectProps<VT extends ISelectValue = ISelectValue> {
    /**
     * 国际化
     */
    locale?: string;
    /**
     * 弹层的可见性
     */
    visible?: boolean;
    /**
     * 默认弹层的可见性
     */
    defaultVisible?: boolean;
    /**
     * 弹层可见性变化
     */
    onVisibleChange?: (e: boolean) => void;
    /**
     * 选中值(可以不在 option 中)
     */
    value?: VT;
    /**
     * 默认选中值(可以不在 option 中)
     */
    defaultValue?: VT;
    /**
     * 选中值改变
     */
    onChange?: (e: VT, error?: ValidationError<VT>) => void;
    /**
     * 容器
     */
    getContainer?: () => HTMLElement;
    /**
     * 显示区样式
     */
    style?: React.CSSProperties;
    /**
     * 弹层样式
     */
    overlayStyle?: React.CSSProperties;
    /**
     * 设置 option 容器样式
     */
    optionWrapperStyle?: React.CSSProperties;
    /**
     * 类名
     */
    className?: string;
    /**
     * 自定义显示区的函数
     */
    renderTrigger?: (value?: VT) => JSX.Element;
    /**
     * Select 工作模式
     */
    mode?: 'default' | 'search' | 'input';
    /**
     * 传入的校验规则
     */
    rules?: Array<Rule<VT>>;
    /**
     * 是否有边框
     */
    bordered?: boolean;
    /**
     * 是否禁用
     */
    disabled?: boolean;
    /**
     * 是否可以选中
     */
    selectable?: boolean;
    /**
     * 尺寸
     */
    size?: 'small' | 'large' | 'normal';
    /**
     * 层级
     */
    zIndex?: number;
    /**
     * 是否显示下拉箭头
     */
    showArrow?: boolean;
    /**
     * 弹层位置
     */
    placement?: IPlacement;
    /**
     * 弹层类名
     */
    overlayClassName?: string;
    /**
     * 子节点
     */
    children: React.ReactElement[];
    /**
     * 弹层是否自动关闭
     */
    autoClose?: boolean;
    /**
     * 暴露 data-testid, 用于测试
     */
    testid?: string;
    /**
     * Tooltip消息
     */
    title?: string | React.ReactNode;
    /**
     * 是否错误
     */
    errored?: boolean;
}
export declare type ISelectButtonProps<VT extends ISelectValue = ISelectValue> = Pick<ISelectProps<VT>, 'locale' | 'renderTrigger' | 'value' | 'visible' | 'mode' | 'testid'> & {
    keyword: string;
    isInputFocused: boolean;
    inputRef: React.RefObject<IInputHandle>;
    onFocus: React.FocusEventHandler<HTMLInputElement>;
    onBlur: React.FocusEventHandler<HTMLInputElement>;
    onEnter: React.KeyboardEventHandler<HTMLInputElement>;
    onChange: React.ChangeEventHandler<HTMLInputElement>;
};
export declare type TOptionTitle = string | {
    title: string;
    placement: IPlacement;
};
export interface ISelectOptionProps<VT extends ISelectValue = ISelectValue> {
    /**
     * 是否禁止
     */
    disabled?: boolean;
    /**
     * 禁止时提示文案
     */
    disabledTip?: string;
    /**
     * Option的值
     */
    value?: VT;
    /**
     * 样式
     */
    style?: React.CSSProperties;
    /**
     * 类名
     */
    className?: string;
    /**
     * 选中
     */
    onSelect?: () => void;
    /**
     * 暴露 data-testid, 用于测试
     */
    testid?: string;
    /**
     * tooltip提示
     */
    title?: TOptionTitle;
}
export interface IState<VT extends ISelectValue = ISelectValue> {
    OptionChildrenRecord: Map<VT, React.ReactNode>;
    OptionDisabledRecord: Map<VT, boolean>;
    keyboardAt: VT | null;
    showOptionValues: VT[];
    keyword: string;
    isInputFocused: boolean;
}
export interface ISelectContextValue<VT extends ISelectValue = ISelectValue> {
    value: VT;
    optionWrapperStyle?: React.CSSProperties;
    keyboardAt: VT | null;
    selectable: boolean;
    showOptionValues: VT[];
    isSearching: boolean;
    onClickOption: (e: IClickOptionEvent<VT>) => void;
    onCacheOptionDisabled: (value: VT, disabled: boolean) => void;
    onUncacheOptionDisabled: (value: VT) => void;
    onUpdateOption: (value: VT, children: React.ReactNode) => void;
    onRemoveOption: (value: VT) => void;
}
export interface IClickOptionEvent<VT extends ISelectValue = ISelectValue> {
    value: VT;
    disabled: boolean;
}
