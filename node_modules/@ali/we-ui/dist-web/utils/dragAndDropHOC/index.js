import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/* eslint-disable max-lines-per-function */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import { PortalWrapper } from "./styled";
import { debounce } from "../";
export var dragAndDropHOC = function dragAndDropHOC(WrappedComponent, handlers) {
  var _temp;

  return _temp = /*#__PURE__*/function (_React$PureComponent) {
    _inheritsLoose(DragAndDrop, _React$PureComponent);

    function DragAndDrop(props) {
      var _this;

      _this = _React$PureComponent.call(this, props) || this;
      _this.startPageX = 0;
      _this.startPageY = 0;
      _this.startMarginTop = 0;
      _this.startMarginRight = 0;
      _this.maxMarginTop = 0;
      _this.maxMarginRight = 0;
      _this.modalRef = /*#__PURE__*/React.createRef();

      _this.handleMouseDown = function (event) {
        if (!event.target || !event.target.tagName) {
          return;
        }

        if (!handlers.shouldDragElement || handlers.shouldDragElement(event)) {
          _this.handleDragStart(event);
        }
      };

      _this.setMax = function () {
        var draggableArea = _this.props.draggableArea;
        var dom = _this.modalRef.current;

        if (dom) {
          _this.startMarginTop = parseInt(dom.style.marginTop, 10) || 0;
          _this.startMarginRight = parseInt(dom.style.marginRight, 10) || 0;
          _this.maxMarginTop = window.innerHeight - dom.offsetHeight - draggableArea.top - draggableArea.bottom;
          _this.maxMarginRight = window.innerWidth - dom.offsetWidth - draggableArea.left - draggableArea.right;
        }
      };

      _this.handleResize = debounce(function () {
        _this.setMax();

        var dom = _this.modalRef.current;

        if (dom && _this.props.visible) {
          dom.style.marginTop = parseInt(dom.style.marginTop, 10) >= _this.maxMarginTop ? Math.max(_this.maxMarginTop, 0) + "px" : dom.style.marginTop;
          dom.style.marginRight = parseInt(dom.style.marginRight, 10) >= _this.maxMarginRight ? Math.max(_this.maxMarginRight, 0) + "px" : dom.style.marginRight;
        }
      }, 300);

      _this.handleDragStart = function (event) {
        var pageX = event.pageX,
            pageY = event.pageY;
        _this.startPageX = pageX;
        _this.startPageY = pageY;

        _this.setMax();

        document.addEventListener('mousemove', _this.handleDragging);
        document.addEventListener('mouseup', _this.handleDragEnd);

        _this.setState({
          dragging: true
        });
      };

      _this.handleDragging = function (event) {
        var dragging = _this.state.dragging;

        if (!dragging) {
          return;
        }

        var pageX = event.pageX,
            pageY = event.pageY;
        var offsetX = pageX - _this.startPageX;
        var offsetY = pageY - _this.startPageY;
        var dom = _this.modalRef.current;

        if (dom) {
          var modalMarginTop = _this.startMarginTop + offsetY;

          if (modalMarginTop >= 0 && modalMarginTop <= _this.maxMarginTop) {
            dom.style.marginTop = modalMarginTop + "px";
          }

          var modalMarginRight = _this.startMarginRight - offsetX;

          if (modalMarginRight >= 0 && modalMarginRight <= _this.maxMarginRight) {
            dom.style.marginRight = modalMarginRight + "px";
          }
        }
      };

      _this.handleDragEnd = function () {
        _this.startPageX = 0;
        _this.startPageY = 0;
        document.removeEventListener('mousemove', _this.handleDragging);
        document.removeEventListener('mouseup', _this.handleDragEnd);

        _this.setState({
          dragging: false
        });
      };

      _this.renderFindAndReplace = function () {
        var _this$props = _this.props,
            draggableArea = _this$props.draggableArea,
            initialPosition = _this$props.initialPosition,
            visible = _this$props.visible,
            zIndex = _this$props.zIndex,
            wrappedRef = _this$props.wrappedRef,
            onVisibleChange = _this$props.onVisibleChange;
        var dragging = _this.state.dragging; // 设置Modal对话框起始位置(marginTop, marginRight)

        var _initialPosition$marg = initialPosition.marginTop,
            initMarginTop = _initialPosition$marg === void 0 ? 0 : _initialPosition$marg,
            _initialPosition$marg2 = initialPosition.marginRight,
            initMarginRight = _initialPosition$marg2 === void 0 ? 0 : _initialPosition$marg2;
        var styleModal = {
          zIndex: zIndex === undefined ? 'auto' : zIndex,
          marginTop: initMarginTop,
          marginRight: initMarginRight
        };
        return /*#__PURE__*/_createElement(PortalWrapper, {
          top: draggableArea.top,
          right: draggableArea.right,
          dragging: dragging,
          onMouseDown: _this.handleMouseDown,
          ref: _this.modalRef,
          visible: visible,
          style: styleModal
        }, visible && /*#__PURE__*/_createElement(WrappedComponent, _extends({}, _this.props, {
          ref: wrappedRef,
          onClose: function onClose() {
            return onVisibleChange(false);
          }
        })));
      };

      _this.state = {
        dragging: false
      };
      return _this;
    }

    var _proto = DragAndDrop.prototype;

    _proto.componentDidMount = function componentDidMount() {
      window.addEventListener('resize', this.handleResize);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      document.removeEventListener('mousemove', this.handleDragging);
      document.removeEventListener('mouseup', this.handleDragEnd);
      window.removeEventListener('resize', this.handleResize);
    };

    _proto.render = function render() {
      return /*#__PURE__*/ReactDOM.createPortal(this.renderFindAndReplace(), document.body);
    };

    return DragAndDrop;
  }(React.PureComponent), _temp;
};