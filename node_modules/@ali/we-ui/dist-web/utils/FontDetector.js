function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable consistent-return */

/* eslint-disable @typescript-eslint/no-explicit-any */
var woff = 'data:font/woff;charset=utf-8;base64,d09GRk9UVE8AAAQYAAoAAAAABlwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABDRkYgAAAA9AAAAMQAAADSEQga8UZGVE0AAAG4AAAAGwAAABxqQJGNT1MvMgAAAdQAAABDAAAAYFYPXfBjbWFwAAACGAAAADcAAAFCAA0D1mhlYWQAAAJQAAAAKQAAADb9ITBXaGhlYQAAAnwAAAAZAAAAJAN7/ztobXR4AAACmAAAAAgAAAAIAfQAAG1heHAAAAKgAAAABgAAAAYAAlAAbmFtZQAAAqgAAAFZAAACjkaWZeZwb3N0AAAEBAAAABMAAAAg/4YAMnicY2RgYWFgZGTkCs0rySzJSU0xZGBkYmBk0PjBz/BDmvGHDNMPWeYf4izdQMAqw7CIX4aBQUCGYamgDAO7DMNpIQZmkGoXBl+GMOei1MSS1BSFpEqFqtS8fCBO19HRUSjPLMlQcMvPK3HLL0pPVTDSM1DQyCgpKbDS108DiqaBRPWK0/TyUks04Y5AuAYIBBmYGBkVFLv3/nDdy7h37++Yvcx7xdR/rHzPtvdPuegP198xf1zZ+fi6RbpFu3m4ANybP/V4nGNgYGBkAIIztovOg+jzjOV2ULoeAEMOBccAeJxjYGH8wviFgZWBgamLaQ8DA0MPhGZ8wGDIyAQUZWBjZoABRgYkEJDmmsJwgMGAwYBZ4b8FQxSGGgUgZAQAfmQKqgB4nGNgYGBmgGAZBkYGELAB8hjBfBYGBSDNAoQgvsH//xDy/0WoSgZGNgYYk2hAqvrBDgBrAQbjAHicY2BkYGAA4pys3ox4fpuvDNzML4AiDOcZy3ci01DAwcAEogAU4ghtAAAAeJxjYGRgYFb4b8EQxQADjAyogAkAMlIBuQAAAAH0AAAAAAAAAABQAAACAAB4nIWQzUoDMRSFT+wPFESkT5CNUGEmzZRuOluhC8Wl3bdMph2omTpNKe1eceebCL6Ca9euXfsE7vTMNBREsBOS+92TMzc3AXCCZwjsvgs8ehZo4cPzEZr48lzDmbjyXEdL3Htu4FS8eG5Sf6dT1FvMHqq/ShZo483zEY7x6bmGS3x7rqMt7jw3IMWT5yb1V/ZXwGAMxzWBxAQbrltmFrmPUwTVkFgjo3NGGnLXkstY0GGo9aCgGTt0OI4FYnQ5Uu9N916FJTNF1VA/5zMVZuxMIicbuTU255wGQSDXmZvJYW7dMC+mRvaUlp2Zc4u4202ppqWqlqmyxrHITXVK2eG8uk1EybrMzU1CvK60DCvcMjFJtmL87xox59+SOz3CACHXkG7N2GepX23Gcn80ORqEUdjTUf9QkyNqBR8nq/qSrF1WV1Use8LIFMsst1LrSGmt5YGCP/yzcc0AAAB4nGNgZgCD/80MRgxYAAAoRAG4AA==';

var FontDetector = function FontDetector() {
  var _this = this;

  this.src = void 0;
  this.css = void 0;
  this.detection = void 0;

  this.inject = function () {
    var elem = document.getElementById('font-detect-test-block');

    if (elem == null) {
      elem = document.createElement('div');
      elem.id = 'font-detect-test-block';
      elem.innerHTML = '0';
      document.body.appendChild(elem);
    }

    var sheet = document.getElementById('font-detect-styles');

    if (sheet == null) {
      sheet = document.createElement('style');
      sheet.setAttribute('type', 'text/css');
      sheet.id = 'font-detect-styles';
      sheet.innerHTML = _this.css;
      var head = document.getElementsByTagName('head')[0];
      head.appendChild(sheet);
    }
  };

  this.remove = function () {
    var elem = document.getElementById('font-detect-test-block');

    if (elem != null) {
      elem.remove();
    }

    var sheet = document.getElementById('font-detect-styles');

    if (sheet != null) {
      return sheet.remove();
    }
  };

  this.ready = function (callback) {
    setTimeout(function () {
      var _elem;

      var elem = document.getElementById('font-detect-test-block');

      if (!elem) {
        _this.inject();

        elem = document.getElementById('font-detect-test-block');
      }

      if (((_elem = elem) == null ? void 0 : _elem.style) && elem.clientWidth === 0) {
        return callback();
      }
    }, 0);
  };

  this.getResult = function (fonts, callback) {
    var elem = document.getElementById('font-detect-test-block');
    var results = []; // eslint-disable-next-line no-restricted-syntax

    for (var _iterator = _createForOfIteratorHelperLoose(fonts), _step; !(_step = _iterator()).done;) {
      var font = _step.value;
      elem.style.fontFamily = "'" + font + "', font-detect-0-woff";
      results.push(elem.clientWidth > 0);
    }

    _this.detection = results;
    callback(results);
    return _this.remove();
  };

  this.detect = function (fonts, callback) {
    return _this.detection.length > 0 ? callback(_this.detection) : _this.ready(function () {
      return _this.getResult(fonts, callback);
    });
  };

  this.detection = [];
  this.css = "\n    @font-face {\n      font-family: font-detect-0-woff;\n      src: url(" + woff + ") format('woff');\n    }\n    #font-detect-test-block {\n      display: inline-block;\n      position: fixed;\n      left: -100%;\n      font-family: font-detect-0-woff;\n    }";
  this.src = '';
  this.inject();
};

export { FontDetector as default };