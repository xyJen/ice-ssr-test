import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable no-param-reassign */

/* eslint-disable default-case */
import tinycolor from 'tinycolor2'; // todo 后面加的工具方法都在这里export出去

export { default as copyToClipboard } from "./copyToClipboard";
export * from "./portal";
export * from "./hotKey";
export * from "./number";
export * from "./consts";
export * from "./dragAndDropHOC";
/* eslint-disable @typescript-eslint/no-explicit-any */

export var runNextTime = function runNextTime(fn) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  var ref = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;

  if (ref) {
    ref(fn);
  } else {
    setTimeout(fn, 0);
  }
};
export var pick = function pick(target, fields) {
  var newTarget = {};

  for (var i = 0; i < fields.length; i += 1) {
    var key = fields[i];
    newTarget[key] = target[key];
  }

  return newTarget;
};
export var omit = function omit(target, fields) {
  var newTarget = _extends({}, target);

  for (var i = 0; i < fields.length; i += 1) {
    var key = fields[i];
    delete newTarget[key];
  }

  return newTarget;
};
export var throttle = function throttle(callback, delay) {
  var canExecute = true;
  return function () {
    if (canExecute) {
      canExecute = false;
      callback.apply(void 0, arguments);
      setTimeout(function () {
        canExecute = true;
      }, delay);
    }
  };
};
export var debounce = function debounce(callback, delay) {
  var debounceTimer;

  var handler = function handler() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    clearTimeout(debounceTimer);
    debounceTimer = window.setTimeout(function () {
      return callback.apply(void 0, args);
    }, delay);
  };

  handler.cancel = function () {
    if (debounceTimer) {
      clearTimeout(debounceTimer);
      debounceTimer = 0;
    }
  };

  return handler;
};
export var uuid = function () {
  var id = 0;
  return function () {
    return (+new Date()).toString(36) + id++;
  };
}();
export var uniq = function uniq(targets) {
  if (!Array.isArray(targets)) {
    return targets;
  }

  return Array.from(new Set(targets));
};
export var uniqBy = function uniqBy(targets, key) {
  if (!Array.isArray(targets)) {
    return targets;
  }

  var results = [];
  var resultValues = [];
  var targetKeyValues = targets.map(function (item) {
    return item[key];
  });
  targetKeyValues.forEach(function (item, index) {
    if (resultValues.indexOf(item) === -1) {
      resultValues.push(item);
      results.push(targets[index]);
    }
  });
  return results;
};
export var typeOf = function typeOf(target) {
  return Object.prototype.toString.call(target).slice(8, -1).toLowerCase();
};
export var isEqual = function isEqual(target, ref) {
  if (typeOf(target) !== typeOf(ref)) {
    return false;
  }

  if (typeOf(target) !== 'array' && typeOf(target) !== 'object') {
    return target === ref;
  }

  if (Array.isArray(target)) {
    if (target.length !== ref.length) {
      return false;
    }

    return target.every(function (t) {
      return ref.indexOf(t) !== -1;
    });
  }

  var targetKeys = Object.keys(target);
  var refKeys = Object.keys(ref);

  if (targetKeys.length !== refKeys.length) {
    return false;
  }

  return targetKeys.every(function (k) {
    return target[k] === ref[k];
  });
};
export var camelCase = function camelCase(target) {
  return target.replace(/_([a-zA-Z])/g, function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return args[1].toUpperCase();
  });
};
export var classnames = function classnames() {
  var names = [];

  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  args.forEach(function (item) {
    if (!item) return;

    if (typeof item === 'string') {
      names.push(item);
      return;
    }

    Object.keys(item).forEach(function (k) {
      if (item[k]) names.push(k);
    });
  });
  return names.join(' ');
};
export var getAlignPointsAndOffsets = function getAlignPointsAndOffsets(placement, offset) {
  if (offset === void 0) {
    offset = 8;
  }

  switch (placement) {
    case 'right':
      return {
        points: ['cl', 'cr'],
        offsets: [offset, 0]
      };

    case 'rightTop':
      return {
        points: ['tl', 'tr'],
        offsets: [offset, 0]
      };

    case 'rightBottom':
      return {
        points: ['bl', 'br'],
        offsets: [offset, 0]
      };

    case 'left':
      return {
        points: ['cr', 'cl'],
        offsets: [-offset, 0]
      };

    case 'leftTop':
      return {
        points: ['tr', 'tl'],
        offsets: [-offset, 0]
      };

    case 'leftBottom':
      return {
        points: ['br', 'bl'],
        offsets: [-offset, 0]
      };

    case 'top':
      return {
        points: ['bc', 'tc'],
        offsets: [0, -offset]
      };

    case 'topRight':
      return {
        points: ['br', 'tr'],
        offsets: [0, -offset]
      };

    case 'topLeft':
      return {
        points: ['bl', 'tl'],
        offsets: [0, -offset]
      };

    case 'bottom':
      return {
        points: ['tc', 'bc'],
        offsets: [0, offset]
      };

    case 'bottomRight':
      return {
        points: ['tr', 'br'],
        offsets: [0, offset]
      };

    case 'bottomLeft':
      return {
        points: ['tl', 'bl'],
        offsets: [0, offset]
      };
  }
}; // 检测是否为白色

export var isWhite = function isWhite(c) {
  if (!c) return false;
  return tinycolor(c).toHex() === 'ffffff';
}; // 检测是否透明

export var isTransparent = function isTransparent(c) {
  if (!c) return false;
  return tinycolor(c).getAlpha() === 0;
};