import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { classnames } from "../../utils";
import { PathContext, MenuKeyContext } from "./contexts";
import { Dropdown } from "../dropdown";
import { ArrowRightNormal } from "../icons";
import { SubMenuWrap, SubMenuInnerWrap, TriggerWrap, TriggerIconWrap, TriggerTitleWrap } from "./styled";
import { EMenuMode, MENU_VISIBLE_TOGGLE_DELAY } from "./consts";
import { useController, useMenuKeyContext, usePath, useHotkeyController, useHotKeyScrollRef } from "./hooks";
import { Tooltip } from "../tooltip"; // eslint-disable-next-line max-lines-per-function

export var SubMenu = /*#__PURE__*/React.memo(function (props) {
  var children = props.children,
      title = props.title,
      showArrow = props.showArrow,
      disabled = props.disabled,
      disabledTip = props.disabledTip,
      overlayClassName = props.overlayClassName,
      overlayStyle = props.overlayStyle,
      testid = props.testid,
      icon = props.icon;
  var controller = useController('SubMenu');
  var mode = controller.mode,
      zIndex = controller.zIndex,
      menuId = controller.menuId,
      destroyOverlayWhenInvisible = controller.destroyOverlayWhenInvisible,
      shortcutKey = controller.shortcutKey,
      menuRootRef = controller.menuRootRef;

  var _useHotkeyController = useHotkeyController('SubMenu'),
      hotkeyPosition = _useHotkeyController.hotkeyPosition,
      setHotkeyPosition = _useHotkeyController.setHotkeyPosition,
      isHotkeyType = _useHotkeyController.isHotkeyType,
      setHotkeyType = _useHotkeyController.setHotkeyType,
      setMousePosition = _useHotkeyController.setMousePosition,
      mousePosition = _useHotkeyController.mousePosition,
      getActionNode = _useHotkeyController.getActionNode,
      registerValidNode = _useHotkeyController.registerValidNode,
      unRegisterValidNode = _useHotkeyController.unRegisterValidNode; // 处理menuKey


  var _useMenuKeyContext = useMenuKeyContext(props.menuKey),
      menuKeyCtxValue = _useMenuKeyContext[0],
      menuKey = _useMenuKeyContext[1]; // key路径


  var path = usePath(menuKey); // 层级

  var level = path.split('::').length - 1; // 是否可见

  var visible = controller.isSubMenuOpened(menuKey); // 是否为第一级横向菜单

  var isHorizontal = mode === EMenuMode.horizontal && level === 0; // 第一级横向菜单在其他菜单展开 / 非第一级横向菜单的 action 都是 hover

  var dropdownTrigger = (!isHorizontal || controller.isAnySubMenuOpened(path)) && !isHotkeyType ? 'hover' : 'click';
  var elRef = useHotKeyScrollRef(menuKey, isHotkeyType, hotkeyPosition);
  /**
   * 可见性变化处理
   * 只有显示的时候处理，不可见应该是通过click来实现
   *
   * @param {boolean} e
   * @return {void}
   */

  var handleVisibleChange = useCallback(function (e) {
    if (e && !visible) {
      if (controller.showMenuTimer) {
        window.clearTimeout(controller.showMenuTimer);
      }

      controller.showMenuTimer = window.setTimeout(function () {
        controller.showSubMenu(path);
      }, MENU_VISIBLE_TOGGLE_DELAY);
    }
  }, [controller, path, visible]);
  var finalVisible = disabled ? false : visible;

  var getContainer = function getContainer() {
    return (menuRootRef == null ? void 0 : menuRootRef.current) || document.body;
  };
  /**
   * 允许快捷键时绑定鼠标进入事件，记录当前位置
   */


  var handleMouseEnter = useCallback(function (event) {
    if (!shortcutKey || mousePosition === event.clientY) return;
    setMousePosition(event.clientY);
    setHotkeyType(false);
    setHotkeyPosition(getActionNode(menuKey));
  }, [mousePosition]);
  /**
   * 快捷键：注册有效节点
   */

  useEffect(function () {
    if (!disabled && shortcutKey) {
      registerValidNode({
        menuKey: menuKey,
        path: path,
        children: [],
        parentPath: path.split('::').slice(0, -1).join('::')
      });
      return function () {
        unRegisterValidNode({
          menuKey: menuKey,
          path: path
        });
      };
    }
  }, [shortcutKey]);
  return /*#__PURE__*/_createElement(Dropdown, {
    placement: isHorizontal ? 'bottomLeft' : 'rightTop',
    trigger: dropdownTrigger,
    visible: finalVisible,
    getContainer: getContainer,
    onVisibleChange: handleVisibleChange,
    overlayStyle: _extends({
      padding: '8px 0'
    }, overlayStyle || {}),
    overlayClassName: classnames(overlayClassName, "we-ui-submenu-" + menuId + "-overlay"),
    overlay: destroyOverlayWhenInvisible && !visible ? null : /*#__PURE__*/_createElement(PathContext.Provider, {
      value: path
    }, /*#__PURE__*/_createElement(MenuKeyContext.Provider, {
      value: menuKeyCtxValue
    }, children)),
    offsetY: isHorizontal ? 0 : -12,
    zIndex: typeof zIndex === 'number' ? zIndex + level : undefined
  }, /*#__PURE__*/_createElement(SubMenuWrap, {
    ref: elRef,
    path: path,
    menuId: controller.menuId,
    className: classnames("level-" + level + "-wrap", {
      vertical: !isHorizontal,
      horizontal: isHorizontal,
      opened: finalVisible
    }),
    "data-testid": testid ? "submenu-" + testid : undefined,
    onMouseEnter: handleMouseEnter
  }, /*#__PURE__*/_createElement(Tooltip, {
    disabled: !(disabled && disabledTip),
    title: disabledTip,
    placement: 'top'
  }, /*#__PURE__*/_createElement(SubMenuInnerWrap, {
    isHotkeyType: isHotkeyType,
    className: classnames("level-" + level + "-inner-wrap", {
      vertical: !isHorizontal,
      horizontal: isHorizontal,
      opened: finalVisible,
      disabled: disabled,
      hotkeyHover: hotkeyPosition && menuKey === hotkeyPosition.menuKey && isHotkeyType && shortcutKey
    })
  }, /*#__PURE__*/_createElement(TriggerWrap, {
    className: classnames("level-" + level + "-trigger", {
      hasArrow: showArrow && !isHorizontal
    })
  }, icon && /*#__PURE__*/_createElement(TriggerIconWrap, null, icon), /*#__PURE__*/_createElement(TriggerTitleWrap, {
    className: classnames({
      vertical: !isHorizontal
    })
  }, title)), /*#__PURE__*/_createElement(ArrowRightNormal, {
    className: classnames('icon arrow-icon', {
      disabled: disabled
    }),
    style: {
      display: showArrow && !isHorizontal ? 'inline-block' : 'none'
    }
  })))));
});
SubMenu.defaultProps = {
  showArrow: true
};