import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useContext, useEffect, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { classnames } from "../../utils";
import { MenuItemWrap, MenuItemInner, MenuItemIconWrap, MenuItemContentWrap } from "./styled";
import { useController, useMenuKeyContext, useHotkeyController, useHotKeyScrollRef } from "./hooks";
import { SelectNormal } from "../icons";
import { TextIndentContext, MenuKeyContext, PathContext } from "./contexts";
import { MENU_VISIBLE_TOGGLE_DELAY } from "./consts";
import { Tooltip } from "../tooltip"; // eslint-disable-next-line max-lines-per-function

var _ref = /*#__PURE__*/_createElement(SelectNormal, {
  className: "icon selected-icon"
});

export var MenuItem = /*#__PURE__*/React.memo(function (props) {
  var children = props.children,
      disabled = props.disabled,
      disabledTip = props.disabledTip,
      style = props.style,
      selected = props.selected,
      onClick = props.onClick,
      hoverable = props.hoverable,
      height = props.height,
      testid = props.testid,
      icon = props.icon; // 接口

  var controller = useController('MenuItem'); // 快捷键触达的位置key

  var hotkeyController = useHotkeyController('MenuItem');
  var hotkeyPosition = hotkeyController.hotkeyPosition,
      isHotkeyType = hotkeyController.isHotkeyType,
      mousePosition = hotkeyController.mousePosition,
      registerValidNode = hotkeyController.registerValidNode,
      unRegisterValidNode = hotkeyController.unRegisterValidNode; // 被 Group 包裹需要缩进

  var textIndent = useContext(TextIndentContext); // menuKey处理

  var _useMenuKeyContext = useMenuKeyContext(props.menuKey),
      menuKeyCtxValue = _useMenuKeyContext[0],
      menuKey = _useMenuKeyContext[1]; // 父组件的key路径


  var parentPath = useContext(PathContext); // 支持快捷键时 菜单过长元素自动定位

  var elRef = useHotKeyScrollRef(menuKey, isHotkeyType, hotkeyPosition); // 是否选中，props.selected优先级最高

  var isSelected = typeof selected === 'boolean' ? selected : controller.isMenuItemSelected(menuKey); // 自动关闭，当前组件的props优先级更高

  var autoClose = typeof props.autoClose === 'boolean' ? props.autoClose : controller.autoClose;
  /**
   * 点击 Item
   *
   * @param {React.MouseEvent<HTMLElement>} event
   * @return {void}
   */

  var handleClick = useCallback(function (event) {
    // 自动关闭处理
    if (autoClose) {
      controller.closeAllMenu();
    }

    if (disabled) {
      return;
    } // 点击处理


    if (onClick) {
      onClick(menuKey, event);
    } // 选中处理


    controller.selectMenuItem(menuKey);

    if (controller.clickMenuItem) {
      controller.clickMenuItem(menuKey, event);
    }
  }, [disabled, autoClose, controller, onClick, menuKey]);
  /**
   * 如果有快捷键时新增的鼠标进入事件
   */

  var hotkeyMouseEnterHander = useCallback(function (event) {
    if (!disabled && mousePosition !== event.clientY) {
      hotkeyController.setHotkeyType(false);
      hotkeyController.setMousePosition(event.clientY);
      hotkeyController.setHotkeyPosition(hotkeyController.getActionNode(menuKey));
    }
  }, [disabled, mousePosition, hotkeyController, menuKey]);
  /**
   * 鼠标移入 Item
   * 应该收起其他菜单
   *
   * @return {void}
   */

  var handleMouseEnter = useCallback(function (event) {
    if (controller.shortcutKey) {
      hotkeyMouseEnterHander(event);
    }

    if (controller.showMenuTimer) {
      window.clearTimeout(controller.showMenuTimer);
    }

    controller.showMenuTimer = window.setTimeout(function () {
      controller.showSubMenu(parentPath);
    }, MENU_VISIBLE_TOGGLE_DELAY);
  }, [parentPath, controller, hotkeyMouseEnterHander]); // 整合height样式

  var styleCombined = useMemo(function () {
    var combined = _extends({}, style || {});

    if (typeof height === 'number' || height === 'auto') {
      combined.height = height;
    }

    return combined;
  }, [height, style]);
  /**
  * 快捷键：注册有效节点
  */

  useEffect(function () {
    if (!disabled && controller.shortcutKey && elRef.current) {
      registerValidNode({
        menuKey: menuKey,
        path: "" + (parentPath ? parentPath + "::" : '') + menuKey,
        onClick: handleClick,
        parentPath: parentPath
      });
      return function () {
        unRegisterValidNode({
          menuKey: menuKey,
          path: "" + (parentPath ? parentPath + "::" : '') + menuKey
        });
      };
    }
  }, [disabled, controller]);
  return /*#__PURE__*/_createElement(Tooltip, {
    disabled: !(disabled && disabledTip),
    title: disabledTip,
    placement: 'top'
  }, /*#__PURE__*/_createElement(MenuItemWrap, {
    path: "" + (parentPath ? parentPath + "::" : '') + menuKey,
    menuId: controller.menuId,
    className: classnames('vertical', {
      selected: isSelected,
      disabled: disabled,
      hotkeyHover: hotkeyPosition && menuKey === hotkeyPosition.menuKey && !disabled && hoverable && controller.shortcutKey
    }),
    ref: elRef,
    hoverable: hoverable,
    isHotkeyType: isHotkeyType,
    textIndent: textIndent,
    onClick: handleClick,
    style: styleCombined,
    onMouseEnter: handleMouseEnter,
    "data-testid": testid ? "menu-item-" + testid : undefined
  }, _ref, /*#__PURE__*/_createElement(MenuKeyContext.Provider, {
    value: menuKeyCtxValue
  }, icon ? /*#__PURE__*/_createElement(MenuItemInner, {
    className: classnames({
      selected: isSelected
    })
  }, /*#__PURE__*/_createElement(MenuItemIconWrap, null, icon), /*#__PURE__*/_createElement(MenuItemContentWrap, null, children)) : children)));
});
MenuItem.defaultProps = {
  disabled: false,
  hoverable: true
};