import _extends from "@babel/runtime/helpers/extends";
import { useContext, useMemo, useRef, useLayoutEffect, useState, useCallback, useEffect } from 'react';
import { uuid, debounce } from "../../utils";
import { ControllerContext, MenuKeyContext, PathContext, HotkeyPositionContext } from "./contexts";

/**
 * 获取 Controller
 *
 * @param {String} name Component's name
 * @return {Controller | never}
 */
export var useController = function useController(name) {
  var ctrl = useContext(ControllerContext);

  if (!ctrl) {
    throw new Error(name + " \u7EC4\u4EF6\u5FC5\u987B\u4E3A Menu \u7EC4\u4EF6\u7684\u5B50\u7EC4\u4EF6");
  }

  return ctrl;
};
export var useHotkeyController = function useHotkeyController(name) {
  var ctrl = useContext(HotkeyPositionContext);

  if (!ctrl) {
    throw new Error(name + " \u7EC4\u4EF6\u5FC5\u987B\u4E3A Menu \u7EC4\u4EF6\u7684\u5B50\u7EC4\u4EF6");
  }

  return ctrl;
};
/**
 * 获取当前 key 路径
 * @param {string} key
 * @return {string}
 */

export var usePath = function usePath(key) {
  var parentPath = useContext(PathContext);
  return [].concat(parentPath.split('::'), [key]).filter(function (k) {
    return k;
  }).join('::');
};
/**
 * 处理menukey
 *
 * @param {string} key
 * @return {IUseMenuKeyContext}
 */

export var useMenuKeyContext = function useMenuKeyContext(key) {
  var menuKeys = useRef({});
  var ctx = useContext(MenuKeyContext); // 获取 key，如果没传，自动生成一个uuid

  var id = useMemo(function () {
    return "menu-key-" + uuid();
  }, []);
  var menuKey = key || id; // key的添加和删除方法

  var menuKeyCtxValue = useMemo(function () {
    return {
      addKey: function addKey(k, keys) {
        menuKeys.current[k] = keys || {};
      },
      delKey: function delKey(k) {
        delete menuKeys.current[k];
      }
    };
  }, []);

  if (ctx) {
    ctx.addKey(menuKey, menuKeys.current);
  } // 添加和删除


  useLayoutEffect(function () {
    return function () {
      if (ctx) {
        ctx.delKey(menuKey);
      }
    };
  }, [menuKey, ctx]);
  return [menuKeyCtxValue, menuKey, menuKeys.current];
}; // 获取鼠标最后停留位置

export var useMousePosition = function useMousePosition() {
  var _useState = useState(0),
      mousePosition = _useState[0],
      setMousePosition = _useState[1];

  var setMousePositionDebounce = useCallback(debounce(function (y) {
    setMousePosition(y);
  }, 100), []);
  var handleMouseOver = useCallback(function (e) {
    var clientY = e.clientY;
    setMousePositionDebounce(clientY);
  }, []);
  return {
    handleMouseOver: handleMouseOver,
    setMousePosition: setMousePosition,
    mousePosition: mousePosition
  };
};
/**
 * 菜单快捷键 有滚动条是 滚动到合适位置
 */

export var useHotKeyScrollRef = function useHotKeyScrollRef(menuKey, isHotkeyType, hotkeyPosition) {
  var ref = useRef();
  useEffect(function () {
    if (hotkeyPosition && menuKey === hotkeyPosition.menuKey && ref.current && isHotkeyType) {
      if (ref.current.scrollIntoView && typeof ref.current.scrollIntoView === 'function') {
        var _ref$current$style = ref.current.style,
            top = _ref$current$style.top,
            position = _ref$current$style.position;
        ref.current.style.position = 'relative';
        ref.current.style.top = hotkeyPosition.eventKey === 'arrowdown' ? '8px' : '-8px';
        ref.current.scrollIntoView({
          block: 'nearest',
          inline: 'nearest'
        });
        ref.current.style.top = top;
        ref.current.style.position = position;
      }
    }
  }, [hotkeyPosition, menuKey]);
  return ref;
};
export var useRegisterValidNode = function useRegisterValidNode(menuId, shouldSelectFirstItem, openedMenuKeys) {
  var eleMap = useRef({});
  var hotKeyPath = useRef();
  var validNodes = useRef([]);

  var _useState2 = useState(null),
      hotkeyPosition = _useState2[0],
      setHotkeyPosition = _useState2[1]; // 获取当前节点挂载的父级节点


  var getParentEle = useCallback(function (nodes, parentPathSteps) {
    var el = nodes.find(function (o) {
      return o.menuKey === parentPathSteps[0];
    });

    if (parentPathSteps.length === 1) {
      return el;
    } else if (el) {
      return getParentEle(el.children || [], parentPathSteps.slice(1));
    }

    return undefined;
  }, []); // 根据dom 实际渲染情况，重绘 menuTree 方便快捷键调用

  var getHotkeyPosition = useCallback(debounce(function (openedKeys) {
    var nodes = [];
    document.querySelectorAll("*[data-menuid=" + menuId + "]").forEach(function (o) {
      return nodes.push(o);
    });
    var nodeTree = [];

    try {
      nodes.sort(function (a, b) {
        var pathAttrA = a.getAttribute('data-path');
        var pathAttrB = b.getAttribute('data-path');

        if (pathAttrA && pathAttrB) {
          return pathAttrA.split('::').length < pathAttrB.split('::').length ? -1 : 1;
        }

        return -1;
      }).forEach(function (o) {
        var pathAttr = o.getAttribute('data-path');

        if (pathAttr) {
          var path = pathAttr.split('::');
          var menuKey = path[path.length - 1];
          if (!eleMap.current[menuKey]) return;
          var el = eleMap.current[menuKey];

          if (path.length === 1) {
            nodeTree = nodeTree.concat(_extends({}, el, {
              index: nodeTree.length
            }));
          } else {
            var parentPathSteps = path.slice(0, -1);
            var parentEle = getParentEle(nodeTree, parentPathSteps);

            if (parentEle) {
              var children = parentEle.children || [];

              var elIndex = _extends({}, el, {
                index: children.length
              });

              parentEle.children = children.concat(elIndex); // 判断节点是否是在开一个新的子层级

              var isOpenSubMenu = hotKeyPath.current && hotKeyPath.current.path.split('::').length !== elIndex.path.split('::').length; // 高亮subMenu 打开时第一个节点

              if (isOpenSubMenu && parentEle.children.length === 1 && parentPathSteps.join('::') === openedKeys.join('::')) {
                setHotkeyPosition(elIndex);
                hotKeyPath.current = elIndex;
              }
            } else {
              throw new Error("\u83DC\u5355\u5B9E\u4F8B " + menuId + " \u5B50\u8282\u70B9 " + path + " \u627E\u4E0D\u5230\u7236\u8282\u70B9 " + parentPathSteps.join('::'));
            }
          }
        } else {
          throw new Error("\u83DC\u5355\u5B9E\u4F8B " + menuId + " \u5B58\u5728\u8282\u70B9\u7F3A\u5C11\u3010data-path\u3011\u5C5E\u6027");
        }
      });
    } catch (error) {
      throw new Error('菜单实例注册失败');
    }

    validNodes.current = nodeTree; // 默认选中第一个节点

    if (shouldSelectFirstItem && !hotkeyPosition && validNodes.current.length > 0) {
      setHotkeyPosition(validNodes.current[0]);
      hotKeyPath.current = validNodes.current[0];
    }
  }, 80), [shouldSelectFirstItem, hotkeyPosition, setHotkeyPosition]);
  var registerValidNode = useCallback(function (node) {
    if (eleMap.current[node.menuKey]) return; // 如果是新增节点触发重绘

    eleMap.current[node.menuKey] = node;
    getHotkeyPosition(openedMenuKeys);
  }, [openedMenuKeys]);
  var unRegisterValidNode = useCallback(function (node) {
    delete eleMap.current[node.menuKey];
  }, []);
  return {
    registerValidNode: registerValidNode,
    unRegisterValidNode: unRegisterValidNode,
    hotkeyPosition: hotkeyPosition,
    setHotkeyPosition: setHotkeyPosition,
    validNodes: validNodes,
    hotKeyPath: hotKeyPath
  };
};