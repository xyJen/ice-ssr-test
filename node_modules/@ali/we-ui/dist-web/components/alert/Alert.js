import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { classnames } from "../../utils";
import { RoundcloseThickNormal, ReportFillNormal, CloseBetaNormal } from "../icons";
import useControlledValue from "../../hooks/useControlledValue";
import { AlertWrap, MessageWrap, DescriptionContent, DescriptionText, MessageContent, ActionWrap, AlertRoot, MessageText, CloseButton, IconWrap } from "./styled";
// [向左]TODO：info 类型图标需要等视觉给过来后替换
export var Alert = /*#__PURE__*/React.memo(function (props) {
  var message = props.message,
      description = props.description,
      className = props.className,
      type = props.type,
      style = props.style,
      actionText = props.actionText,
      onAction = props.onAction,
      onClose = props.onClose,
      testid = props.testid; // visible 是受控的

  var _useControlledValue = useControlledValue(props.visible, props.defaultVisible),
      visible = _useControlledValue[0],
      setVisible = _useControlledValue[1]; // 图标


  var TypeIconNode = ReportFillNormal;

  if (type === 'warning') {
    TypeIconNode = RoundcloseThickNormal;
  } else if (type === 'error') {
    TypeIconNode = RoundcloseThickNormal;
  }
  /**
   * 点击查看详情
   */


  var handleAction = useCallback(function () {
    var autoClose = true;

    if (onAction) {
      var returnedValue = onAction();
      autoClose = returnedValue !== false;
    }

    if (autoClose) {
      setVisible(false);
    }
  }, [onAction, setVisible]);
  /**
   * 点击关闭按钮
   */

  var handleClose = useCallback(function () {
    var autoClose = true;

    if (onClose) {
      var returnedValue = onClose();
      autoClose = returnedValue !== false;
    }

    if (autoClose) {
      setVisible(false);
    }
  }, [setVisible, onClose]);
  return /*#__PURE__*/_createElement(AlertRoot, {
    style: style,
    className: classnames(className, type, {
      hidden: !visible
    })
  }, /*#__PURE__*/_createElement(AlertWrap, null, /*#__PURE__*/_createElement(IconWrap, null, /*#__PURE__*/_createElement(TypeIconNode, {
    className: "type-icon"
  })), /*#__PURE__*/_createElement(MessageWrap, null, /*#__PURE__*/_createElement(MessageContent, {
    size: description ? 'large' : 'default'
  }, /*#__PURE__*/_createElement(MessageText, null, message)), !!description && /*#__PURE__*/_createElement(DescriptionContent, null, /*#__PURE__*/_createElement(DescriptionText, null, description))), !!actionText && /*#__PURE__*/_createElement(ActionWrap, {
    bordered: false,
    shape: "rect",
    onClick: handleAction
  }, actionText), /*#__PURE__*/_createElement(CloseButton, {
    bordered: false,
    shape: "rect",
    icon: /*#__PURE__*/_createElement(CloseBetaNormal, {
      style: {
        color: 'rgba(17, 31, 44, 0.4)'
      }
    }),
    onClick: handleClose,
    testid: testid ? "Alert-" + testid : undefined
  })));
});
Alert.defaultProps = {
  type: 'info',
  defaultVisible: true
}; // 以下为多行省略的代码，暂时注释
// return (
//   <AlertRoot
//     style={{
//       ...(style || {}),
//       display: visible ? 'block' : 'none',
//     }}
//     className={classnames(className, type, {
//       'close-mode': !actionText,
//       'action-mode': actionText,
//     })}
//   >
//     <AlertWrap size={description ? 'large' : 'default'}>
//       <TypeIconNode className="type-icon" />
//       <MessageWrap>
//         <MessageContent
//           size={description ? 'large' : 'default'}
//         >
//           <Ellipsis
//             lines={description ? 1 : 2}
//             text={message}
//             suffix={
//               !!actionText && !description && (
//                 <ActionWrap onClick={handleAction}>{actionText}</ActionWrap>
//                )
//             }
//           />
//         </MessageContent>
//         {
//           !!description && (
//             <DescriptionContent>
//               <Ellipsis lines={2} text={description} />
//             </DescriptionContent>
//           )
//         }
//       </MessageWrap>
//       <ClosedNormal
//         className="close-icon"
//         onClick={handleClose}
//       />
//     </AlertWrap>
//   </AlertRoot>
// );