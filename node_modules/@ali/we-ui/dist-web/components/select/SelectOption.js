import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable no-nested-ternary */
import React, { useCallback, useContext, useEffect, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SelectNormal } from "../icons";
import { SelectOptionWrap } from "./styled";
import { classnames } from "../../utils";
import { Tooltip } from "../tooltip";
import { createSelectContext } from "./SelectContext";
var noopWrapperStyle = {};
export var getTitleContent = function getTitleContent(title) {
  if (typeof title === 'string' || !title) {
    return title;
  }

  return title.title;
};
export var getTitlePlacement = function getTitlePlacement(title) {
  if (typeof title === 'string' || !title) {
    return 'right';
  }

  return title.placement;
}; // eslint-disable-next-line max-lines-per-function

var _ref = /*#__PURE__*/_createElement(SelectNormal, {
  className: "check-icon"
});

var SelectOptionFC = function SelectOptionFC(props) {
  var children = props.children,
      style = props.style,
      disabled = props.disabled,
      disabledTip = props.disabledTip,
      value = props.value,
      onSelect = props.onSelect,
      testid = props.testid,
      className = props.className,
      title = props.title;
  var SelectContext = createSelectContext();
  var context = useContext(SelectContext);

  if (!context) {
    throw new Error('[we-ui] Select.Option 必须为 Select 的子组件');
  }

  useEffect(function () {
    if (value) {
      context.onUpdateOption(value, children);
    }

    return function () {
      if (value) {
        context.onRemoveOption(value);
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [value]);
  useEffect(function () {
    if (value) {
      context.onCacheOptionDisabled(value, !!disabled);
    }

    return function () {
      if (value) {
        context.onUncacheOptionDisabled(value);
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [value, disabled]); // 是否选中

  var selected = context.value === value && value !== undefined; // 容器样式

  var optionWrapperStyle = context.optionWrapperStyle || noopWrapperStyle; // 输入过程中是否隐藏

  var hidden = context.isSearching && context.showOptionValues.indexOf(value) === -1; // 键盘事件中高亮

  var hovered = context && context.keyboardAt === value && value !== undefined;
  /**
   * 点击选中
   *
   * @return {void}
   */

  var handleClick = useCallback(function () {
    if (value !== undefined) {
      context.onClickOption({
        value: value,
        disabled: !!disabled
      });
    } else if (onSelect) {
      onSelect();
    }
  }, [value, disabled, context, onSelect]); // 样式

  var styleCombined = useMemo(function () {
    return _extends({}, optionWrapperStyle, style);
  }, [optionWrapperStyle, style]);
  return hidden ? null : /*#__PURE__*/_createElement(Tooltip, {
    title: disabled && disabledTip ? disabledTip : getTitleContent(title),
    placement: disabled && disabledTip ? 'top' : getTitlePlacement(title)
  }, /*#__PURE__*/_createElement(SelectOptionWrap, {
    style: styleCombined,
    className: classnames(className, {
      selected: selected,
      disabled: disabled,
      hovered: hovered
    }),
    onClick: handleClick,
    "data-testid": testid && "option-" + testid
  }, !!context.selectable && !!selected && _ref, children));
};

SelectOptionFC.defaultProps = {
  style: {}
};
SelectOptionFC.displayName = 'SelectOption';
var SelectOption = /*#__PURE__*/React.memo(SelectOptionFC);
export { SelectOption };