import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import React, { useMemo, useCallback, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ArrowDownTriangleNormal } from "../icons";
import { Dropdown } from "../dropdown";
import { classnames } from "../../utils";
import { KEY_CODES } from "../../utils/consts";
import { useTranslate } from "../../locale/locales";
import useKeyboards from "../../hooks/useKeyboards";
import { SelectOption } from "./SelectOption";
import { SelectOptionGroup } from "./SelectOptionGroup";
import { SelectWrap, TriggerWrap, TriggerContent, EmptyWrap, OverlayWrap } from "./styled";
import { SelectButton } from "./SelectButton";
import { createSelectContext } from "./SelectContext";
import { useFlush, useControlledValue } from "../../hooks";
import { isSelectOption, isSelectOptionGroup } from "./utils";

// eslint-disable-next-line max-lines-per-function
var Select = function Select(props, ref) {
  var children = props.children,
      getContainer = props.getContainer,
      style = props.style,
      className = props.className,
      overlayStyle = props.overlayStyle,
      renderTrigger = props.renderTrigger,
      bordered = props.bordered,
      onChange = props.onChange,
      disabled = props.disabled,
      onVisibleChange = props.onVisibleChange,
      optionWrapperStyle = props.optionWrapperStyle,
      selectable = props.selectable,
      locale = props.locale,
      size = props.size,
      zIndex = props.zIndex,
      showArrow = props.showArrow,
      placement = props.placement,
      overlayClassName = props.overlayClassName,
      mode = props.mode,
      rules = props.rules,
      autoClose = props.autoClose,
      testid = props.testid,
      title = props.title,
      errored = props.errored,
      restProps = _objectWithoutPropertiesLoose(props, ["children", "getContainer", "style", "className", "overlayStyle", "renderTrigger", "bordered", "onChange", "disabled", "onVisibleChange", "optionWrapperStyle", "selectable", "locale", "size", "zIndex", "showArrow", "placement", "overlayClassName", "mode", "rules", "autoClose", "testid", "title", "errored"]); // value 受控


  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1]; // visible 受控


  var _useControlledValue2 = useControlledValue(props.visible, props.defaultVisible),
      visible = _useControlledValue2[0],
      setVisible = _useControlledValue2[1]; // 初始化的时候收集一次 SelectOption 节点，选中的节点


  var OptionChildrenRecord = useMemo(function () {
    var result = new Map();

    function iterator(nodes) {
      React.Children.forEach(nodes, function (node) {
        if (isSelectOptionGroup(node)) {
          iterator(node.props.children);
        } else if (isSelectOption(node)) {
          result.set(node.props.value, node.props.children);
        }
      });
    }

    iterator(children);
    return result; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // 状态

  var state = useRef({
    OptionChildrenRecord: OptionChildrenRecord,
    OptionDisabledRecord: new Map(),
    keyword: '',
    showOptionValues: [],
    isInputFocused: false,
    keyboardAt: null
  }).current; // 是否正在搜索

  var isSearching = state.keyword.length > 0 && mode === 'search'; // Input 实例

  var inputRef = useRef(null); // 强制刷新函数

  var flush = useFlush(); // 国际化

  var t = useTranslate(locale);
  /**
   * 可见性变化处理函数
   *
   * @param {boolean} e 可见性
   * @return {void}
   */

  var handleVisibleChange = useCallback(function (e) {
    if (e !== visible) {
      if (onVisibleChange) {
        onVisibleChange(e);
      }

      setVisible(e);
    } // 下拉选择消失时，手动触发blur事件


    if (!e && inputRef && inputRef.current) {
      inputRef.current.blur();
    }
  }, [visible, onVisibleChange, setVisible]);
  /**
   * 值变化处理函数
   *
   * @param {ValueType} e 变化值
   * @return {void}
   */

  var handleValueChange = useCallback(function (e) {
    if (onChange && (e !== value || !selectable)) {
      var error;

      for (var _iterator = _createForOfIteratorHelperLoose(rules || []), _step; !(_step = _iterator()).done;) {
        var rule = _step.value;
        if (typeof rule !== 'object') return;
        var validator = rule.validator;

        if (typeof validator === 'function' && !validator(e)) {
          error = {
            violatedRule: rule,
            prevVal: value
          };
          break;
        }
      }

      onChange(e, error);
    }

    if (e !== value) {
      setValue(e);
    }
  }, [value, selectable, onChange, setValue, rules]);
  /**
   * 点击 Option 选项
   *
   * @param {IClickOptionEvent<VT>} event { value, disabled }
   * @return {void}
   */

  var handleClickOption = useCallback(function (event) {
    if (event.disabled) {
      if (autoClose) {
        handleVisibleChange(false);
      }

      return;
    } // 如果 selectable 为 false，那么一直可以触发 onChange


    if (event.value !== undefined && (!selectable || value !== event.value)) {
      handleValueChange(event.value);
    }

    if (autoClose) {
      handleVisibleChange(false);
    }
  }, [value, selectable, handleVisibleChange, handleValueChange, autoClose]);
  /**
   * Option 被移除
   *
   * @param {ValueType} key
   * @return {void}
   */

  var handleRemoveOption = useCallback(function (key) {
    state.OptionChildrenRecord["delete"](key);
    flush();
  }, [state, flush]);
  /**
   * Option 被添加或者被更新
   *
   * @param {ValueType} key
   * @return {void}
   */

  var handleUpdateOption = useCallback(function (key, newChildren) {
    var oldChildren = state.OptionChildrenRecord.get(key);

    if (oldChildren !== newChildren) {
      state.OptionChildrenRecord.set(key, newChildren);
      flush();
    }
  }, [state, flush]);
  /**
   * Option disabled更新
   *
   * @param {ValueType} key
   * @param {boolean}
   * @return {void}
   */

  var handleCacheOptionDisabled = useCallback(function (key, newDisabled) {
    state.OptionDisabledRecord.set(key, newDisabled);
  }, [state]);
  /**
   * Option disabled删除
   *
   * @param {ValueType} key
   * @return {void}
   */

  var handleUncacheOptionDisabled = useCallback(function (key) {
    state.OptionDisabledRecord["delete"](key);
  }, [state]);
  /**
   * 点开菜单输入框聚焦的时候，点击我们不希望生效，不然会收起弹层
   *
   * @return {void}
   */

  var handleClickTrigger = useCallback(function () {
    if (visible && state.isInputFocused || disabled) {
      return false;
    }
  }, [visible, state.isInputFocused, disabled]);
  /**
   * 当展开菜单的时候，点击trigger我们不希望Input失焦
   */

  var handleMouseDownTrigger = useCallback(function (e) {
    if (visible && state.isInputFocused) {
      e.preventDefault();
    }
  }, [visible, state.isInputFocused]);
  /**
   * 输入框失焦
   *
   * @param {React.FocusEvent<HTMLInputElement>} e
   * @return {void}
   */

  var handleInputBlur = useCallback(function (e) {
    var inputValue = (state.keyword || e.target.value).trim();
    state.keyword = '';
    state.showOptionValues = [];
    state.isInputFocused = false;
    var values = Array.from(state.OptionChildrenRecord.keys());

    if (mode === 'search') {
      var index = values.findIndex(function (v) {
        return "" + v === inputValue;
      });

      if (index !== -1) {
        handleValueChange(values[index]);
      }
    } else if (mode === 'input') {
      // input 模式的 ValueType 只支持 string | number
      var processedInputValue;

      if (typeof values[0] === 'number') {
        processedInputValue = Number(inputValue);
      } else {
        processedInputValue = inputValue;
      }

      handleValueChange(processedInputValue);
    }

    handleVisibleChange(false);
  }, [state, handleValueChange, handleVisibleChange, mode]);
  /**
   * 输入框聚焦
   *
   * @return {void}
   */

  var handleInputFocus = useCallback(function () {
    state.keyword = String(value);
    state.isInputFocused = true;
    state.showOptionValues = Array.from(state.OptionChildrenRecord.keys());
    flush();

    if (inputRef.current) {
      inputRef.current.select();
    }
  }, [state, flush, value]);
  /**
   * 输入框回车
   *
   * @return {void}
   */

  var handleInputEnter = useCallback(function () {
    if (state.keyboardAt === null && inputRef.current) {
      inputRef.current.blur();
    }
  }, [state]);
  /**
   * 输入值变化
   *
   * @param {React.ChangeEvent<HTMLInputElement>}
   * @return {void}
   */

  var handleInputChange = useCallback(function (e) {
    state.keyword = e.target.value;
    state.keyboardAt = null;
    state.showOptionValues = Array.from(state.OptionChildrenRecord.keys()).filter(function (v) {
      return ("" + v).includes(e.target.value.trim());
    });
    flush();
  }, [state, flush]);
  /**
   * 选项高亮移动
   *
   * @param {1 | -1} step
   * @return {void}
   */

  var handleChangeKeyboardAt = useCallback(function (step) {
    var values = isSearching ? state.showOptionValues : Array.from(state.OptionChildrenRecord.keys());
    var index = state.keyboardAt ? values.indexOf(state.keyboardAt) : -1; // 需要跳过disabled的选项

    do {
      index += step;
    } while (index < values.length && !!state.OptionDisabledRecord.get(values[index]));

    if (index >= 0 && index <= values.length - 1) {
      if (values[index] !== state.keyboardAt) {
        state.keyboardAt = values[index];
        flush();
      }
    }
  }, [state, flush, isSearching]);
  /**
   * 按下向下键，聚焦时触发选项高亮
   *
   * @return {void}
   */

  var handlePressDown = useCallback(function () {
    handleChangeKeyboardAt(1);
  }, [handleChangeKeyboardAt]);
  /**
   * 按下向上键，聚焦时触发选项高亮
   *
   * @return {void}
   */

  var handlePressUp = useCallback(function () {
    handleChangeKeyboardAt(-1);
  }, [handleChangeKeyboardAt]);
  /**
   * 按下Enter键，选择高亮选项
   */

  var handlePressEnter = useCallback(function () {
    if (state.keyboardAt !== null) {
      handleValueChange(state.keyboardAt);
    }

    handleVisibleChange(false);
  }, [handleValueChange, handleVisibleChange, state.keyboardAt]); // 键盘事件定义

  var keyboards = useMemo(function () {
    return [[[KEY_CODES.DOWN], handlePressDown], [[KEY_CODES.UP], handlePressUp], [[KEY_CODES.ENTER], handlePressEnter]];
  }, [handlePressDown, handlePressUp, handlePressEnter]); // 绑定键盘事件

  var keyboardHandlers = useKeyboards({
    keyboards: keyboards,
    on: visible
  }); // context

  var context = useMemo(function () {
    return {
      value: value,
      selectable: !!selectable,
      showOptionValues: state.showOptionValues,
      isSearching: isSearching,
      keyboardAt: state.keyboardAt,
      optionWrapperStyle: optionWrapperStyle,
      onClickOption: handleClickOption,
      onUpdateOption: handleUpdateOption,
      onRemoveOption: handleRemoveOption,
      onCacheOptionDisabled: handleCacheOptionDisabled,
      onUncacheOptionDisabled: handleUncacheOptionDisabled
    };
  }, [value, selectable, isSearching, state.keyboardAt, state.showOptionValues, optionWrapperStyle, handleClickOption, handleUpdateOption, handleRemoveOption, handleCacheOptionDisabled, handleUncacheOptionDisabled]); // 获取选中的 Option 的子节点

  var SelectedOptionChildren = null;

  if (value !== null && value !== undefined) {
    SelectedOptionChildren = state.OptionChildrenRecord.get(value) || null;
  }

  var SelectContext = createSelectContext();
  var searchNoMatch = isSearching && state.showOptionValues.length === 0;
  return /*#__PURE__*/_createElement(SelectContext.Provider, {
    value: context
  }, /*#__PURE__*/_createElement(Dropdown, {
    title: title,
    trigger: "click",
    visible: visible,
    onVisibleChange: handleVisibleChange,
    getContainer: getContainer,
    overlayStyle: overlayStyle,
    overlayClassName: overlayClassName,
    zIndex: zIndex,
    placement: placement,
    testid: testid,
    overlay: /*#__PURE__*/_createElement(OverlayWrap, {
      "data-testid": testid && "overlay-" + testid
    }, /*#__PURE__*/_createElement("div", {
      style: {
        display: searchNoMatch ? 'none' : 'block'
      }
    }, children), searchNoMatch && /*#__PURE__*/_createElement(EmptyWrap, null, /*#__PURE__*/_createElement("span", {
      className: "message"
    }, t('we_ui_search_no_data'))))
  }, /*#__PURE__*/_createElement(SelectWrap, _extends({
    showArrow: showArrow,
    ref: ref,
    tabIndex: disabled ? undefined : '0',
    style: style,
    className: classnames(className, size, {
      bordered: bordered,
      focused: state.isInputFocused,
      disabled: disabled,
      actived: visible,
      errored: !disabled && errored
    })
  }, keyboardHandlers, restProps, {
    onClick: handleClickTrigger,
    onMouseDown: handleMouseDownTrigger,
    "data-testid": testid ? "SelectWrap-" + testid : undefined
  }), /*#__PURE__*/_createElement(TriggerWrap, null, /*#__PURE__*/_createElement(TriggerContent, null, /*#__PURE__*/_createElement(SelectButton, {
    value: value,
    locale: locale,
    renderTrigger: renderTrigger,
    mode: mode,
    visible: visible,
    isInputFocused: state.isInputFocused,
    keyword: state.keyword,
    onBlur: handleInputBlur,
    onFocus: handleInputFocus,
    onEnter: handleInputEnter,
    onChange: handleInputChange,
    inputRef: inputRef,
    testid: testid
  }, SelectedOptionChildren || /*#__PURE__*/_createElement("span", null, value))), /*#__PURE__*/_createElement(ArrowDownTriangleNormal, {
    "data-testid": testid && "select-arrow-" + testid,
    className: classnames('select-arrow', {
      opened: visible,
      hidden: !showArrow
    })
  })))));
}; // 为了 hack VT的传递、Select.Option、Select.OptionGroup的定义


var SelectMemo = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Select));
SelectMemo.defaultProps = {
  defaultVisible: false,
  disabled: false,
  mode: 'default',
  selectable: true,
  size: 'normal',
  showArrow: true,
  autoClose: true
};
SelectMemo.displayName = 'Select';
SelectMemo.Option = SelectOption;
SelectMemo.OptionGroup = SelectOptionGroup;
export { SelectMemo as Select };