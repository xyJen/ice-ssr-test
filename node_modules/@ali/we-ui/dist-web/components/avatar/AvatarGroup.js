import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable max-lines-per-function */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Dropdown } from "../dropdown";
import warning from 'warning';
import { AvatarGroupWrap, GroupAvatarItem, GroupAvatarList, GroupMoreItem, GroupMoreItemSpan, OverlayWrap, CountWrap, OverlayAvatarItem, OverlayAvatarWrap, OverlayAvatarName, ListWrap // OverlayAvatarStatus,
} from "./styled";
import { EditorNormal, ViewNormal } from "../icons";
// 固化头像组中颜色角标的选用和顺序
var COLOR_SCHEME = ['#0984FF', '#12C764', '#BF5AF2', '#FF9F0C', '#3BBEFA', '#FFCC01', '#99CAFF', '#FFD399'];
var COLOR_SCHEME_LEN = COLOR_SCHEME.length;
var defaultStyle = {
  width: '165px'
};
var overlayIconSize = {
  width: 20,
  height: 20
};

var _ref = /*#__PURE__*/_createElement("i", null);

var _ref2 = /*#__PURE__*/_createElement("i", null);

var _ref3 = /*#__PURE__*/_createElement("i", null);

var AvatarGroup = /*#__PURE__*/React.memo(function (props) {
  var children = props.children,
      max = props.max,
      className = props.className,
      style = props.style,
      direction = props.direction,
      zIndex = props.zIndex,
      _onClick = props.onClick,
      overlayStyle = props.overlayStyle,
      overlayMaxHeight = props.overlayMaxHeight; // 数量

  var avatarCount = React.Children.count(children);
  var isOverflowing = avatarCount > max; // 子组件的类型判定

  React.Children.forEach(children, function (child) {
    warning( /*#__PURE__*/React.isValidElement(child) && child.type.displayName === 'Avatar', 'AvatarGroup 的子组件应该为 Avatar 组件.');
  });
  var avatarWidth = isOverflowing ? 100 / (max + 1) + "%" : 100 / avatarCount + "%";
  var avatarStyle = React.useMemo(function () {
    return {
      width: avatarWidth,
      maxWidth: 28
    };
  }, [avatarWidth]);
  return /*#__PURE__*/_createElement(AvatarGroupWrap, {
    style: _extends({}, defaultStyle, style),
    className: className
  }, /*#__PURE__*/_createElement(GroupAvatarList, {
    direction: direction
  }, React.Children.toArray(children).slice(0, max).map(function (child, idx) {
    return /*#__PURE__*/_createElement(GroupAvatarItem, {
      key: child.props.name,
      style: avatarStyle
    }, /*#__PURE__*/React.cloneElement(child, {
      color: child.props.color || COLOR_SCHEME[idx % COLOR_SCHEME_LEN],
      onClick: child.props.onClick || function () {
        return _onClick == null ? void 0 : _onClick(idx);
      }
    }));
  }), isOverflowing && /*#__PURE__*/_createElement(GroupAvatarItem, {
    className: "more",
    style: {
      width: avatarWidth,
      maxWidth: 28
    }
  }, /*#__PURE__*/_createElement(Dropdown, {
    overlayStyle: overlayStyle,
    overlay: /*#__PURE__*/_createElement(OverlayWrap, null, /*#__PURE__*/_createElement(CountWrap, null, "\u5171 ", avatarCount, " \u4EBA"), /*#__PURE__*/_createElement(ListWrap, {
      style: {
        maxHeight: overlayMaxHeight
      }
    }, React.Children.toArray(children).map(function (child, idx) {
      var _child$props = child.props,
          name = _child$props.name,
          status = _child$props.status,
          color = _child$props.color;
      var avatarColor = color || COLOR_SCHEME[idx % COLOR_SCHEME_LEN];
      var iconProps = {
        style: {
          color: avatarColor
        },
        className: 'status-icon'
      };
      return /*#__PURE__*/_createElement(OverlayAvatarItem, {
        key: name,
        onClick: function onClick() {
          return _onClick == null ? void 0 : _onClick(idx);
        }
      }, /*#__PURE__*/_createElement(OverlayAvatarWrap, null, /*#__PURE__*/React.cloneElement(child, {
        title: '',
        style: overlayIconSize,
        isInOverlay: true
      })), /*#__PURE__*/_createElement(OverlayAvatarName, null, name || ''), status === 'can-edit' || status === 'is-editing' ? /*#__PURE__*/_createElement(EditorNormal, iconProps) : /*#__PURE__*/_createElement(ViewNormal, iconProps));
    }))),
    zIndex: zIndex
  }, /*#__PURE__*/_createElement(GroupMoreItem, {
    className: "more-item-span"
  }, Number(avatarCount) < 999 ? /*#__PURE__*/_createElement(GroupMoreItemSpan, null, "" + avatarCount) : /*#__PURE__*/_createElement(React.Fragment, null, _ref, " ", _ref2, " ", _ref3))))));
});
AvatarGroup.defaultProps = {
  max: 8,
  direction: 'ltr'
};
export { AvatarGroup };