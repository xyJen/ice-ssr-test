import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Tooltip } from "../tooltip";
import { AvatarWrap, AvatarImage, AvatarInner, AvatarCorner // AvatarColor,
, TooltipWrap // TextSpan,
, NameWrap } from "./styled";
import { AvatarGroup } from "./AvatarGroup";
import { ViewNormal, EditorNormal } from "../icons";
import { isEmojiCharacter } from "./util";
var GROUP_DEFAULT_AVATAR = '//gw.alicdn.com/tfs/TB1TBGRHW61gK0jSZFlXXXDKFXa-144-144.png';
var SINGLE_DEFAULT_AVATAR = '//gw.alicdn.com/tfs/TB1yx7PjsKfxu4jSZPfXXb3dXXa-144-144.png';
export var Avatar = Object.assign( /*#__PURE__*/React.memo(function (props) {
  var _ref = props,
      url = _ref.url,
      style = _ref.style,
      className = _ref.className,
      name = _ref.name,
      color = _ref.color,
      corner = _ref.corner,
      title = _ref.title,
      status = _ref.status,
      onClick = _ref.onClick,
      size = _ref.size,
      isInOverlay = _ref.isInOverlay,
      nameWrapStyle = _ref.nameWrapStyle;
  /**
   * 头像情况：
   * 1) 名字、蓝底作为头像：url不存在，且名字存在
   * 2）多人头像：url为数组，如果url为空数组，则为默认群聊头像
   * 2）单人头像：url为字符串，如果url不存在，则为默认单人头像
   */

  var urls = []; // 过滤 emoji

  var avatarFilterName = Array.from(name || '').reverse().find(function (element) {
    return !isEmojiCharacter(element);
  });
  var isNameAvatar = !url && !!avatarFilterName; // 是否为名字头像

  if (!isNameAvatar) {
    // 统一转为字符串数组
    urls = (Array.isArray(url) ? url : [url]).filter(function (u) {
      return u;
    }).slice(-4); // 如果数组为空，根据是否群聊设置默认头像

    if (urls.length === 0) {
      urls.push(Array.isArray(url) ? GROUP_DEFAULT_AVATAR : SINGLE_DEFAULT_AVATAR);
    }
  }

  var iconProps = useMemo(function () {
    return {
      style: {
        color: color
      },
      className: 'status-icon'
    };
  }, [color]); // 优先使用 title (为空字符串则无 tooltip)，若 name 和 status 均传入则按规则渲染 tooltip

  var avatarTitle = title !== undefined ? title : typeof name === 'string' && status && /*#__PURE__*/_createElement(TooltipWrap, null, /*#__PURE__*/_createElement("span", {
    style: {
      paddingRight: 6
    }
  }, name), status === 'can-edit' || status === 'is-editing' ? /*#__PURE__*/_createElement(EditorNormal, iconProps) : /*#__PURE__*/_createElement(ViewNormal, iconProps));
  return /*#__PURE__*/_createElement(Tooltip, {
    title: avatarTitle
  }, /*#__PURE__*/_createElement(AvatarWrap, {
    style: style,
    className: className,
    onClick: onClick,
    size: size
  }, /*#__PURE__*/_createElement(AvatarInner, {
    color: isInOverlay ? undefined : color
  }, urls.map(function (src, index) {
    return /*#__PURE__*/_createElement(AvatarImage, {
      key: src,
      className: "avatar_" + urls.length + "_" + (index + 1),
      url: src
    });
  }), isNameAvatar && /*#__PURE__*/_createElement(NameWrap, null, /*#__PURE__*/_createElement("span", {
    style: nameWrapStyle
  }, avatarFilterName))), corner && /*#__PURE__*/_createElement(AvatarCorner, null, // color ? (
  //   <AvatarColor backgroundColor={color} />
  // ) : corner
  corner)));
}), {
  Group: AvatarGroup
});
Avatar.defaultProps = {
  size: 'normal'
};
Avatar.displayName = 'Avatar';