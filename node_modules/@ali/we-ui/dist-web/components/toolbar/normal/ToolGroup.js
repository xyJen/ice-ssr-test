import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/* eslint-disable react/no-did-mount-set-state */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import warning from 'warning';
import { ToolLine } from "./ToolLine";
import { ToolGroupWrap } from "./styled";
// 工具栏 单行的高度
var DEFAULT_GROUP_HEIGHT = 58;
export var ToolGroup = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ToolGroup, _React$Component);

  function ToolGroup(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.refToolGroup = /*#__PURE__*/React.createRef();

    _this.calculateWidth = function () {
      var widthSum = 0;
      var tmpHeight = 0;
      var _this$props$height = _this.props.height,
          groupHeight = _this$props$height === void 0 ? DEFAULT_GROUP_HEIGHT : _this$props$height;
      var domGroup = _this.refToolGroup.current;

      if (domGroup) {
        var children = domGroup.children;

        for (var index = 0; index < children.length; index++) {
          var item = children[index];
          var width = item.offsetWidth;
          var height = item.offsetHeight;
          tmpHeight += height;

          if (tmpHeight >= groupHeight) {
            widthSum += width;
            tmpHeight = 0;
          } else {
            tmpHeight += height;
          }
        }
      }

      return widthSum;
    };

    var hasIllegalChild = false;
    React.Children.forEach(props.children, function (child) {
      var isToolBox = child.type === ToolLine;

      if (!isToolBox) {
        hasIllegalChild = true;
      }
    });
    warning(!hasIllegalChild, 'Children of ToolGroup must be ToolLine');
    _this.state = {
      groupWidth: 0
    };
    return _this;
  }

  var _proto = ToolGroup.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var isComplexLayout = this.props.isComplexLayout;
    var domGroup = this.refToolGroup.current;

    if (isComplexLayout && domGroup) {
      var width = this.calculateWidth();
      this.setState({
        groupWidth: width
      });
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    var isComplexLayout = this.props.isComplexLayout;
    var domGroup = this.refToolGroup.current;

    if (isComplexLayout && domGroup && prevProps !== this.props) {
      var width = this.calculateWidth();
      var groupWidth = prevState.groupWidth;

      if (width !== groupWidth) {
        this.setState({
          groupWidth: width
        });
      }
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        isComplexLayout = _this$props.isComplexLayout,
        children = _this$props.children,
        _this$props$height2 = _this$props.height,
        groupHeight = _this$props$height2 === void 0 ? DEFAULT_GROUP_HEIGHT : _this$props$height2;
    var groupWidth = this.state.groupWidth;
    return /*#__PURE__*/_createElement(ToolGroupWrap, {
      isComplexLayout: isComplexLayout,
      width: groupWidth,
      height: groupHeight,
      ref: this.refToolGroup
    }, React.Children.map(children, function (child) {
      return /*#__PURE__*/React.cloneElement(child, {
        isSingleLine: false
      });
    }));
  };

  return ToolGroup;
}(React.Component);
export var HiddenToolGroup = /*#__PURE__*/function (_ToolGroup) {
  _inheritsLoose(HiddenToolGroup, _ToolGroup);

  function HiddenToolGroup() {
    return _ToolGroup.apply(this, arguments) || this;
  }

  return HiddenToolGroup;
}(ToolGroup);