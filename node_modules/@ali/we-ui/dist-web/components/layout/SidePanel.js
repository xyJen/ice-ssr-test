import React, { useRef, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { ClosedNormal } from "../icons";
var LeftWrap = /*#__PURE__*/styled.div(["position:relative;"]);
var Close = /*#__PURE__*/styled.div(["position:absolute;top:25px;right:10px;font-size:17px;width:25px;height:25px;cursor:pointer;"]);
var Resizer = /*#__PURE__*/styled.div(["position:absolute;", ";top:0;bottom:0;width:1px;box-sizing:border-box;cursor:col-resize;z-index:999;&:before{content:'';position:absolute;top:-1px;right:-1px;bottom:-1px;left:-1px;}"], function (p) {
  return p.isLeft ? 'right:0' : 'left:0';
});
var side;

(function (side) {
  side["left"] = "left";
  side["right"] = "right";
})(side || (side = {}));

var _ref2 = /*#__PURE__*/_createElement(ClosedNormal, null);

export var SidePanel = function SidePanel(_ref) {
  var closable = _ref.closable,
      isLeft = _ref.isLeft,
      maxWidth = _ref.maxWidth,
      minWidth = _ref.minWidth,
      allowResize = _ref.allowResize,
      children = _ref.children,
      onClose = _ref.onClose,
      width = _ref.width,
      onPanelWidthChange = _ref.onPanelWidthChange;
  var rootRef = useRef();
  var resizerRef = useRef();
  var onMouseDown = useCallback(function (e) {
    var ox = e.pageX;
    var ow = rootRef.current.offsetWidth;
    var resizeEl = resizerRef.current;
    var originalUserSelect = '';
    var isStarted = false;

    function adjustDiff(diff) {
      var toBeWidth = ow - diff;

      if (maxWidth) {
        if (toBeWidth > maxWidth) {
          diff = ow - maxWidth;
        }
      }

      if (minWidth) {
        if (toBeWidth < minWidth) {
          diff = ow - minWidth;
        }
      }

      return diff;
    }

    function onMouseMove(moveEvent) {
      if (!isStarted && Math.abs(moveEvent.pageX - ox) > 5) {
        isStarted = true;
        resizeEl.style.border = '1px dashed gray';
        originalUserSelect = document.body.style.userSelect;
        document.body.style.userSelect = 'none';
      }

      if (isStarted) {
        if (isLeft) {
          resizeEl.style.right = adjustDiff(ox - moveEvent.pageX) + "px";
        } else {
          resizeEl.style.left = adjustDiff(moveEvent.pageX - ox) + "px";
        }
      }
    }

    document.addEventListener('mousemove', onMouseMove, false);

    function onMouseUp() {
      if (isStarted) {
        document.body.style.userSelect = originalUserSelect;
        resizerRef.current.style.border = '';
        var w = 0;

        if (isLeft) {
          w = parseInt(resizerRef.current.style.right, 10);
        } else {
          w = parseInt(resizerRef.current.style.left, 10);
        }

        var finalWidth = Math.min(maxWidth, Math.max(minWidth, ow - w));
        onPanelWidthChange && onPanelWidthChange(finalWidth, isLeft ? side.left : side.right);
        rootRef.current.style.width = finalWidth + "px";
        resizerRef.current.style[isLeft ? 'right' : 'left'] = '0px';
      }

      document.removeEventListener('mouseup', onMouseUp, false);
      document.removeEventListener('mousemove', onMouseMove, false);
    }

    document.addEventListener('mouseup', onMouseUp, false);
  }, []);
  return /*#__PURE__*/_createElement(LeftWrap, {
    ref: rootRef,
    style: {
      width: width
    }
  }, closable ? /*#__PURE__*/_createElement(Close, {
    onClick: onClose
  }, _ref2) : null, allowResize ? /*#__PURE__*/_createElement(Resizer, {
    isLeft: !!isLeft,
    onMouseDown: onMouseDown,
    ref: resizerRef
  }) : null, children);
};