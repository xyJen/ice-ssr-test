import React, { useCallback, useEffect, useRef } from 'react';
import { supportRef, composeRef } from "../../utils/ref";
import { findDOMNode } from "../../utils/dom";
import useSingleton from "./useSingleton";
export var Tooltip = /*#__PURE__*/React.memo(function (props) {
  var zIndex = props.zIndex,
      children = props.children,
      placement = props.placement,
      title = props.title,
      disabled = props.disabled;
  var triggerRef = useRef(null);
  var child = React.Children.only(children);
  var _child$props = child.props,
      onMouseEnter = _child$props.onMouseEnter,
      onMouseLeave = _child$props.onMouseLeave;
  var singleton = useSingleton();
  useEffect(function () {
    if (singleton) {
      singleton.update({
        title: title,
        placement: placement,
        zIndex: zIndex,
        disabled: !!disabled
      });
    }
  }, [title, placement, zIndex, singleton, disabled]);
  /**
   * 鼠标进入trigger区域
   *
   * @param {React.MouseEvent<HTMLElement>} e
   * @return {void}
   */

  var handleMouseEnter = useCallback(function (e) {
    if (onMouseEnter) {
      onMouseEnter(e);
    }

    if (singleton) {
      var triggerNode = triggerRef.current // eslint-disable-next-line react/no-find-dom-node
      ? findDOMNode(triggerRef.current) : undefined;
      singleton.enter({
        title: title,
        placement: placement,
        zIndex: zIndex,
        triggerNode: triggerNode,
        disabled: !!disabled
      });
    }
  }, [onMouseEnter, title, placement, zIndex, singleton, disabled]);
  /**
   * 鼠标离开trigger区域
   *
   * @param {React.MouseEvent<HTMLElement>} e
   * @return {void}
   */

  var handleMouseLeave = useCallback(function (e) {
    if (onMouseLeave) {
      onMouseLeave(e);
    }

    if (singleton) {
      singleton.leave();
    }
  }, [onMouseLeave, singleton]);
  var cloneProps = {};

  if (supportRef(child)) {
    cloneProps.ref = composeRef(triggerRef, child.ref);
  }

  cloneProps.onMouseEnter = handleMouseEnter;
  cloneProps.onMouseLeave = handleMouseLeave;
  return title ? /*#__PURE__*/React.cloneElement(child, cloneProps) : child;
});
Tooltip.defaultProps = {
  placement: 'bottom',
  zIndex: 2000
};