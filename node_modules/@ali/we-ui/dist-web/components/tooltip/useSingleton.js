import _extends from "@babel/runtime/helpers/extends";
import React, { useMemo, useRef, useImperativeHandle, useEffect, useCallback, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import { uuid, debounce } from "../../utils";
import { Dropdown } from "../dropdown";
import { TooltipContent } from "./styled";
var DELAY_TO_SHOW = 200;
var tooltipOverlayStyle = {
  background: 'transparent',
  border: 0,
  boxShadow: 'none'
}; // 单例 Ref

var tooltipRef = /*#__PURE__*/React.createRef();
var inited = false; // 组件

var TooltipSingleton = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (_, ref) {
  var currentId = useRef('');

  var _useState = useState({
    visible: false,
    title: '',
    zIndex: undefined,
    triggerNode: undefined
  }),
      state = _useState[0],
      setState = _useState[1];

  var showTooltip = useCallback(debounce(function (id, props) {
    if (currentId.current !== id) return;
    setState(function (prevState) {
      return _extends({}, prevState, props, {
        visible: true
      });
    });
  }, DELAY_TO_SHOW), []);
  useImperativeHandle(ref, function () {
    return {
      handleEnter: function handleEnter(id, props) {
        currentId.current = id;
        showTooltip.cancel();
        showTooltip(id, props);
      },
      handleLeave: function handleLeave(id) {
        if (currentId.current !== id) return;
        showTooltip.cancel();
        setState(function (prevState) {
          return _extends({}, prevState, {
            visible: false
          });
        });
      },
      handleUpdate: function handleUpdate(id, props) {
        if (currentId.current !== id) return;
        setState(function (prevState) {
          return _extends({}, prevState, props);
        });
      }
    };
  });
  return /*#__PURE__*/_createElement(Dropdown, {
    visible: state.visible && !state.disabled,
    overlay: /*#__PURE__*/_createElement(TooltipContent, {
      className: state.overlayClassName,
      style: state.overlayStyle
    }, state.title),
    zIndex: state.zIndex,
    placement: state.placement,
    overlayStyle: tooltipOverlayStyle,
    triggerNode: state.triggerNode,
    trigger: "hover"
  });
}));

function init() {
  if (inited) {
    return;
  }

  inited = true; // 单例初始化

  var container = document.createElement('div');
  container.setAttribute('style', 'position: absolute; left: 0; top: 0; width: 100%; line-height: 0;');
  document.body.appendChild(container);
  ReactDOM.render( /*#__PURE__*/_createElement(TooltipSingleton, {
    ref: tooltipRef
  }), container);
}
/**
 * useSingleton
 */


export default (function () {
  var id = useMemo(function () {
    return uuid();
  }, []); // 节点被清除的时候应该也把tooltip清除

  useEffect(function () {
    return function () {
      if (tooltipRef.current) {
        tooltipRef.current.handleLeave(id);
      }
    };
  }, [id]);
  return useRef({
    enter: function enter(e) {
      init();

      if (tooltipRef.current && !e.disabled) {
        tooltipRef.current.handleEnter(id, e);
      }
    },
    leave: function leave() {
      if (tooltipRef.current) {
        tooltipRef.current.handleLeave(id);
      }
    },
    update: function update(e) {
      init();

      if (tooltipRef.current) {
        tooltipRef.current.handleUpdate(id, e);
      }
    }
  }).current;
});