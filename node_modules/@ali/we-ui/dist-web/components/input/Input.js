import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/* eslint-disable react/destructuring-assignment */
import React, { useState, useCallback, useMemo, useRef, useImperativeHandle } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import useControlledValue from "../../hooks/useControlledValue";
import { useTranslate } from "../../locale/locales";
import { classnames, uuid } from "../../utils";
import { RoundcloseThickNormal } from "../icons";
import { InputNode, InputPrefix, InputSuffix, InputWrap } from "./styled";
import { KEY_CODES } from "../../utils/consts";
// eslint-disable-next-line max-lines-per-function
var Input = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _ref = props,
      suffix = _ref.suffix,
      prefix = _ref.prefix,
      onChange = _ref.onChange,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'text' : _ref$type,
      locale = _ref.locale,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      allowClear = _ref.allowClear,
      id = _ref.id,
      className = _ref.className,
      disabled = _ref.disabled,
      style = _ref.style,
      onKeyDown = _ref.onKeyDown,
      onEnter = _ref.onEnter,
      testid = _ref.testid,
      placeholderColor = _ref.placeholderColor,
      defaultValue = _ref.defaultValue,
      inputStyle = _ref.inputStyle,
      restProps = _objectWithoutPropertiesLoose(_ref, ["suffix", "prefix", "onChange", "type", "locale", "onFocus", "onBlur", "allowClear", "id", "className", "disabled", "style", "onKeyDown", "onEnter", "testid", "placeholderColor", "defaultValue", "inputStyle"]);

  var inputRef = useRef(null);

  var _useState = useState(false),
      isFocused = _useState[0],
      setIsFocused = _useState[1];

  var _useControlledValue = useControlledValue(props.value, defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var uid = useMemo(function () {
    return id || uuid();
  }, [id]);
  useImperativeHandle(ref, function () {
    return {
      focus: function focus() {
        inputRef.current.focus();
      },
      select: function select() {
        inputRef.current.select();
      },
      blur: function blur() {
        inputRef.current.blur();
      }
    };
  });
  var t = useTranslate(locale);
  var placeholder = typeof props.placeholder === 'string' ? props.placeholder : t('we_ui_input_placeholder');
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }

    setValue(e.target.value);
  }, [onChange, setValue]);
  var handleFocus = useCallback(function (e) {
    if (onFocus) {
      onFocus(e);
    }

    setIsFocused(true);
  }, [onFocus]);
  var handleBlur = useCallback(function (e) {
    if (onBlur) {
      onBlur(e);
    }

    setIsFocused(false);
  }, [onBlur]);
  var handleReset = useCallback(function () {
    handleChange({
      target: {
        value: ''
      }
    });
  }, [handleChange]);
  var handleKeyDown = useCallback(function (e) {
    if (onKeyDown) {
      onKeyDown(e);
    }

    if (e.which === KEY_CODES.ENTER && onEnter) {
      onEnter(e);
    }
  }, [onKeyDown, onEnter]);
  return /*#__PURE__*/_createElement(InputWrap, {
    htmlFor: uid,
    className: classnames(className, {
      focused: isFocused,
      disabled: disabled
    }),
    style: style
  }, !!prefix && /*#__PURE__*/_createElement(InputPrefix, null, prefix), /*#__PURE__*/_createElement(InputNode, _extends({}, restProps, {
    ref: inputRef,
    value: value || '',
    onChange: handleChange,
    type: type,
    placeholder: placeholder,
    id: uid,
    key: uid,
    onFocus: handleFocus,
    onBlur: handleBlur,
    disabled: !!disabled,
    onKeyDown: handleKeyDown,
    "data-testid": testid ? "Input_" + testid : undefined,
    placeholderColor: placeholderColor,
    style: inputStyle
  })), !!allowClear && !!value && /*#__PURE__*/_createElement(RoundcloseThickNormal, {
    onClick: handleReset,
    className: "clear-icon"
  }), !!suffix && /*#__PURE__*/_createElement(InputSuffix, null, suffix));
});
Input.defaultProps = {
  allowClear: false
};
var InputMemo = /*#__PURE__*/React.memo(Input);
export { InputMemo as Input };