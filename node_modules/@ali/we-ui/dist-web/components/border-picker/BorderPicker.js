/* eslint-disable max-lines-per-function */
import React, { useState, useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SplitButton } from "../button";
import { ColorPalette } from "../color-picker";
import { CommonLineSelect } from "../lines";
import { PictureBorderNormal, LinethicknessNormal, LinetypeNormal } from "../icons";
import { useTranslate } from "../../locale/locales";
import { BorderPickerWrap, GroupWrap, TextSpan, PaletteBox, LineTypeSelectsWrap, SelectLeftWrap } from "./styled";
import { isWhite } from "../../utils"; // export interface IBorderProps {
//   color?: string;
//   lineSize?: string;
//   lineStyle?: string;
// }

var DEFAULT_COLOR = 'inherit';

var _ref = /*#__PURE__*/_createElement(LinethicknessNormal, null);

var _ref2 = /*#__PURE__*/_createElement(LinetypeNormal, null);

export var BorderPicker = function BorderPicker(props) {
  var color = props.color,
      onColorPick = props.onColorPick,
      lineSize = props.lineSize,
      defaultLineSize = props.defaultLineSize,
      lineSizeMap = props.lineSizeMap,
      onLineSizeChange = props.onLineSizeChange,
      lineStyle = props.lineStyle,
      defaultLineStyle = props.defaultLineStyle,
      lineStyleMap = props.lineStyleMap,
      onLineStyleChange = props.onLineStyleChange,
      locale = props.locale,
      style = props.style,
      bordered = props.bordered,
      className = props.className,
      disabled = props.disabled,
      title = props.title,
      onClick = props.onClick,
      size = props.size;

  var _useState = useState(false),
      dropdownVisible = _useState[0],
      setDropdownVisible = _useState[1]; // const [colorPickerVisible, setColorPickerVisible] = useState(false);


  var _useState2 = useState(false),
      sizeSelectVisible = _useState2[0],
      setSizeSelectVisible = _useState2[1];

  var _useState3 = useState(false),
      styleSelectVisible = _useState3[0],
      setStyleSelectVisible = _useState3[1];

  var t = useTranslate(locale);
  var handleDropdownVisible = useCallback(function (e) {
    setDropdownVisible(e);
  }, [setDropdownVisible]); // const handleColorPickerVisible = (e: boolean) => {
  //   setColorPickerVisible(e);
  // };

  var handleSizeSelectVisible = useCallback(function (e) {
    setSizeSelectVisible(e);
  }, [setSizeSelectVisible]);
  var handleStyleSelectVisible = useCallback(function (e) {
    setStyleSelectVisible(e);
  }, [setStyleSelectVisible]);
  var handleColorPick = useCallback(function (pickedColor) {
    if (onColorPick) onColorPick(pickedColor);
  }, [onColorPick]);
  var handleLineSizeChange = useCallback(function (value) {
    if (onLineSizeChange) onLineSizeChange(value);
    setDropdownVisible(true);
  }, [onLineSizeChange, setDropdownVisible]);
  var handleLineStyleChange = useCallback(function (value) {
    if (onLineStyleChange) onLineStyleChange(value);
    setDropdownVisible(true);
  }, [onLineStyleChange, setDropdownVisible]);
  var handleClick = useCallback(function () {
    if (onClick) {
      onClick();
    }
  }, [onClick]);

  var _ref3 = /*#__PURE__*/_createElement(CommonLineSelect, {
    lineTypeArray: lineStyleMap,
    lineType: lineStyle,
    defaultLineType: defaultLineStyle,
    length: 60,
    color: "#000000",
    onLineTypeChange: handleLineStyleChange,
    visible: styleSelectVisible,
    onVisibleChange: handleStyleSelectVisible
  });

  var getOverlay = function getOverlay() {
    return /*#__PURE__*/_createElement(BorderPickerWrap, null, /*#__PURE__*/_createElement(PaletteBox, null, /*#__PURE__*/_createElement(ColorPalette, {
      color: color,
      onPick: handleColorPick,
      automaticColor: "",
      clearColor: "",
      quickSetText: t('we_ui_color_picker_no_color'),
      showRecentColors: false
    })), /*#__PURE__*/_createElement(LineTypeSelectsWrap, null, /*#__PURE__*/_createElement(GroupWrap, null, /*#__PURE__*/_createElement(SelectLeftWrap, null, _ref, /*#__PURE__*/_createElement(TextSpan, null, t('we_ui_border_set_line_thickness'))), /*#__PURE__*/_createElement(CommonLineSelect, {
      lineTypeArray: lineSizeMap,
      lineType: lineSize,
      length: 35,
      color: "#000000",
      onLineTypeChange: handleLineSizeChange,
      defaultLineType: defaultLineSize,
      optionText: function optionText(p) {
        return p.size + "pt";
      },
      visible: sizeSelectVisible,
      onVisibleChange: handleSizeSelectVisible
    })), /*#__PURE__*/_createElement(GroupWrap, null, /*#__PURE__*/_createElement(SelectLeftWrap, null, _ref2, /*#__PURE__*/_createElement(TextSpan, null, t('we_ui_border_set_line_type'))), _ref3)));
  };

  var pathColors = useMemo(function () {
    return [// 当选中颜色为白色时，选中边框的外边缘为黑色，否则选中边框外边缘与内部颜色一致
    !color || isWhite(color) ? DEFAULT_COLOR : color, color || DEFAULT_COLOR, DEFAULT_COLOR];
  }, [color]);
  var visible = dropdownVisible || sizeSelectVisible || styleSelectVisible;
  return /*#__PURE__*/_createElement(SplitButton, {
    overlay: getOverlay(),
    active: visible,
    onClickLeft: handleClick,
    onActiveChange: handleDropdownVisible,
    className: className,
    disabled: disabled,
    style: style,
    testid: "BorderPicker",
    title: title,
    bordered: bordered,
    size: size
  }, /*#__PURE__*/_createElement(PictureBorderNormal, {
    pathColors: pathColors
  }));
};