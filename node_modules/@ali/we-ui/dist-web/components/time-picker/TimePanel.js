import _extends from "@babel/runtime/helpers/extends";
import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import dayjs from 'dayjs';
import { useTranslate } from "../../locale/locales";
import useControlledValue from "../../hooks/useControlledValue";
import { NumberSlider } from "./NumberSlider";
import { PanelWrap, PanelColumnWrap, PanelColumnTitle, PanelColumnBody } from "./styled";

var TimePanel = function TimePanel(props) {
  var locale = props.locale,
      onChange = props.onChange,
      style = props.style,
      visible = props.visible,
      testid = props.testid; // 国际化

  var t = useTranslate(locale); // 受控

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1]; // 时 0 - 23


  var hourNumbers = useMemo(function () {
    return Object.keys(Array.from({
      length: 24
    })).map(function (_, i) {
      return i;
    });
  }, []); // 分 0 - 59

  var minuteNumbers = useMemo(function () {
    return Object.keys(Array.from({
      length: 60
    })).map(function (_, i) {
      return i;
    });
  }, []); // 秒 0 - 59

  var secondNumbers = useMemo(function () {
    return Object.keys(Array.from({
      length: 60
    })).map(function (_, i) {
      return i;
    });
  }, []);
  /**
   * 修改回调函数
   */

  var handleChanges = useMemo(function () {
    var handleChange = function handleChange(type) {
      return function (e) {
        var newValue = (value || dayjs().hour(0).minute(0).second(0))[type](e);

        if (onChange) {
          onChange(newValue, newValue.format('HH:mm:ss'));
        }

        setValue(newValue);
      };
    };

    return {
      hour: handleChange('hour'),
      minute: handleChange('minute'),
      second: handleChange('second')
    };
  }, [value, onChange, setValue]);
  return /*#__PURE__*/_createElement(PanelWrap, {
    style: _extends({}, style || {}, {
      display: visible ? 'flex' : 'none'
    })
  }, /*#__PURE__*/_createElement(PanelColumnWrap, null, /*#__PURE__*/_createElement(PanelColumnTitle, null, t('we_ui_time_hour')), /*#__PURE__*/_createElement(PanelColumnBody, null, /*#__PURE__*/_createElement(NumberSlider, {
    visible: visible,
    number: value ? value.hour() : 0,
    numbers: hourNumbers,
    onChange: handleChanges.hour,
    testid: testid + "_hour"
  }))), /*#__PURE__*/_createElement(PanelColumnWrap, null, /*#__PURE__*/_createElement(PanelColumnTitle, null, t('we_ui_time_minute')), /*#__PURE__*/_createElement(PanelColumnBody, null, /*#__PURE__*/_createElement(NumberSlider, {
    visible: visible,
    number: value ? value.minute() : 0,
    numbers: minuteNumbers,
    onChange: handleChanges.minute,
    testid: testid + "_minute"
  }))), /*#__PURE__*/_createElement(PanelColumnWrap, null, /*#__PURE__*/_createElement(PanelColumnTitle, null, t('we_ui_time_second')), /*#__PURE__*/_createElement(PanelColumnBody, null, /*#__PURE__*/_createElement(NumberSlider, {
    visible: visible,
    number: value ? value.second() : 0,
    numbers: secondNumbers,
    onChange: handleChanges.second,
    testid: testid + "_second"
  }))));
};

TimePanel.defaultProps = {
  visible: true
};
var TimePanelMemo = /*#__PURE__*/React.memo(TimePanel);
export { TimePanelMemo as TimePanel };