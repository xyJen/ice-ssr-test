import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/* eslint-disable max-lines-per-function */

/* eslint-disable no-nested-ternary */

/* eslint-disable no-param-reassign */

/* eslint-disable react/no-array-index-key */
import React, { useCallback, useMemo, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import tinycolor from 'tinycolor2';
import { uuid, uniqBy, isEqual, throttle } from "../../utils";
import { Modal } from "../modal";
import { Button } from "../button";
import { useTranslate } from "../../locale/locales";
import useControlledValue from "../../hooks/useControlledValue";
import { PlusNormal, DeleteNormal, BgfontcolorNormal } from "../icons";
import { OptionsWrap, OptionItem, FooterWrap, TitleWrap, RightButtons, ButtonInner, ColorsHeaderWrap, TipTextWrap } from "./styled";
import { DragableIcon } from "./DragableIcon";
import { Input } from "../input";
import { message } from "../message";
import { ColorPicker } from "../color-picker";
import { composeRef } from "../../utils/ref";
import { themes as defaultThemes } from "./themes";
import { Theme } from "./Theme";
import useMemorizeCallback from "../../hooks/useMemorizeCallback";
var throttleMessage = throttle(function (msg) {
  return message.error(msg);
}, 3000);

var isTheme = function isTheme(themeColors, colors) {
  var themeColorsFixed = [];

  for (var i = 0, len = colors.length; i < len; i++) {
    var colorIndex = i % themeColors.length;
    themeColorsFixed.push(themeColors[colorIndex]);
  }

  return isEqual(themeColorsFixed.map(function (c) {
    return c.toLowerCase();
  }), colors.map(function (c) {
    return c.toLowerCase();
  }));
}; // eslint-disable-next-line max-lines-per-function


var _ref = /*#__PURE__*/_createElement("i", {
  className: "rect"
});

var _ref2 = /*#__PURE__*/_createElement(DragableIcon, null);

var _ref3 = /*#__PURE__*/_createElement(PlusNormal, {
  className: "add-icon"
});

export var OptionsModal = /*#__PURE__*/React.memo(function (props) {
  var onChangeOptions = props.onChangeOptions,
      removable = props.removable,
      onOk = props.onOk,
      onClickRemove = props.onClickRemove,
      zIndex = props.zIndex,
      testid = props.testid,
      themes = props.themes,
      tipText = props.tipText,
      restProps = _objectWithoutPropertiesLoose(props, ["onChangeOptions", "removable", "onOk", "onClickRemove", "zIndex", "testid", "themes", "tipText"]);

  var optionsWrapRef = useRef(null);

  var _useControlledValue = useControlledValue(props.options, props.defaultOptions),
      options = _useControlledValue[0],
      setOptions = _useControlledValue[1]; // 国际化文案


  var t = useTranslate(props.locale);
  var title = t('we_ui_options_modal_title');
  var okText = t('we_ui_ok_text');
  var cancelText = t('we_ui_cancel_text');
  var removeText = t('we_ui_options_modal_clear');
  var warningText = t('we_ui_options_modal_warning_message');
  var colorListLabel = t('we_ui_options_modal_color_list_label');
  var addText = t('we_ui_options_modal_add_item'); // 给每个option增加ID

  var optionsWithId = useMemo(function () {
    return options.map(function (option) {
      return _extends({}, option, {
        id: option.id || uuid()
      });
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [options.length]); // ID不能变化，不然输入框会失去焦点，但是值需要同步

  options.forEach(function (option, index) {
    optionsWithId[index].id = option.id || optionsWithId[index].id;
    optionsWithId[index].value = option.value;
    optionsWithId[index].color = option.color;
  }); // 主题增加无颜色

  var allThemes = useMemo(function () {
    return [{
      iconColors: [],
      colors: []
    }].concat(themes || []);
  }, [themes]); // 计算当前主题的 index

  var currentThemeIndex = useMemo(function () {
    if (options.every(function (o) {
      return !o.color;
    })) {
      return 0;
    }

    var colors = options.map(function (o) {
      return o.color || '';
    });
    var themeIndex = -1;
    themes.some(function (theme, index) {
      if (isTheme(theme.colors, colors)) {
        themeIndex = index + 1;
        return true;
      }

      return false;
    });
    return themeIndex;
  }, [options, themes]);
  var notNullThemeIndex = useRef(currentThemeIndex);

  if (currentThemeIndex !== -1) {
    notNullThemeIndex.current = currentThemeIndex;
  }
  /**
   * 输入框输入
   *
   * @param {number} index
   * @param {React.ChangeEvent<HTMLInputElement>} e
   */


  var changeValue = useMemorizeCallback(function (index) {
    return function (e) {
      var value = e.target.value;
      setOptions(function (oldOptions) {
        var newOptions = [].concat(oldOptions);
        newOptions[index] = _extends({}, newOptions[index], {
          value: value
        });

        if (onChangeOptions) {
          onChangeOptions(newOptions);
        }

        return newOptions;
      });
    };
  });
  /**
   * 添加单项
   */

  var addOption = useCallback(function () {
    var currentTheme = allThemes[notNullThemeIndex.current];
    setOptions(function (oldOptions) {
      var newOption = currentThemeIndex === 0 || !currentTheme ? {
        value: '',
        id: uuid()
      } : {
        color: currentTheme.colors[oldOptions.length % currentTheme.colors.length],
        value: '',
        id: uuid()
      };
      var newOptions = [].concat(oldOptions, [newOption]);

      if (onChangeOptions) {
        onChangeOptions(newOptions);
      }

      return newOptions;
    }); // 效果为自动滚动到底部

    setTimeout(function () {
      if (optionsWrapRef.current) {
        optionsWrapRef.current.scrollTop = optionsWrapRef.current.scrollHeight;
      }
    }, 0);
  }, [currentThemeIndex, allThemes, onChangeOptions, setOptions]);
  /**
   * 点击确定按钮处理函数
   *
   * @return {void}
   */

  var handleOk = useCallback(function () {
    var uniqOptions = uniqBy(options, 'value').filter(function (o) {
      return o.value;
    }).map(function (o) {
      var newOption = _extends({}, o);

      if (typeof newOption.color === 'undefined') {
        delete newOption.color;
      } else if (typeof newOption.color !== 'undefined') {
        newOption.color = tinycolor(newOption.color).toString();
      }

      return newOption;
    });

    if (uniqOptions.length < 2) {
      throttleMessage(warningText);
    } else {
      if (onOk) {
        onOk(uniqOptions);
      }

      if (onChangeOptions) {
        onChangeOptions(uniqOptions);
      }

      setOptions(uniqOptions);
    }
  }, [options, setOptions, onOk, warningText, onChangeOptions]);
  /**
   * 删除选项
   *
   * @param {number} index
   */

  var deleteOption = useMemorizeCallback(function (index) {
    return function () {
      setOptions(function (oldOptions) {
        var newOptions = [].concat(oldOptions);
        newOptions.splice(index, 1);

        if (onChangeOptions) {
          onChangeOptions(newOptions);
        }

        return newOptions;
      });
    };
  });
  /**
   * 拖拽结束更换顺序
   *
   * @param {DropResult} e
   */

  var handleDragEnd = useCallback(function (e) {
    var destination = e.destination,
        source = e.source;

    if (destination && destination.index !== source.index) {
      var destinationIndex = destination.index;
      var sourceIndex = source.index;
      setOptions(function (oldOptions) {
        var newOptions = [].concat(oldOptions);
        var sourceOption = newOptions[sourceIndex];
        newOptions.splice(sourceIndex, 1);
        newOptions.splice(destinationIndex, 0, sourceOption);

        if (onChangeOptions) {
          onChangeOptions(newOptions);
        }

        return newOptions;
      });
    }
  }, [onChangeOptions, setOptions]);
  /**
   * 修改颜色
   *
   * @param {number} index
   * @param {string} color
   */

  var changeColor = useMemorizeCallback(function (index) {
    return function (color) {
      setOptions(function (oldOptions) {
        var newOptions = [].concat(oldOptions);
        newOptions[index] = _extends({}, newOptions[index], {
          color: color
        });

        if (onChangeOptions) {
          onChangeOptions(newOptions);
        }

        return newOptions;
      });
    };
  });
  /**
   * 修改主题
   *
   * @param {number} index
   * @param {IOptionsModalTheme} theme
   */

  var changeTheme = useMemorizeCallback(function (index, theme) {
    return function () {
      var themeColors = theme.colors;
      setOptions(function (oldOptions) {
        var newOptions = oldOptions.map(function (o) {
          return _extends({}, o);
        });
        newOptions.forEach(function (option, optionIndex) {
          if (index === 0) {
            delete option.color;
          } else {
            option.color = themeColors[optionIndex % themeColors.length];
          }
        });

        if (onChangeOptions) {
          onChangeOptions(newOptions);
        }

        return newOptions;
      });
    };
  });
  return /*#__PURE__*/_createElement(Modal, _extends({
    zIndex: zIndex,
    testid: testid,
    title: /*#__PURE__*/_createElement(TitleWrap, null, title),
    width: 360,
    footer: /*#__PURE__*/_createElement(FooterWrap, null, /*#__PURE__*/_createElement(Button, {
      shape: "round",
      onClick: onClickRemove,
      disabled: !removable,
      testid: testid + "_remove"
    }, removeText), /*#__PURE__*/_createElement(RightButtons, null, /*#__PURE__*/_createElement(Button, {
      shape: "round",
      onClick: props.onCancel,
      style: {
        marginRight: 8
      },
      testid: testid + "_cancel"
    }, cancelText), /*#__PURE__*/_createElement(Button, {
      shape: "round",
      type: "primary",
      onClick: handleOk,
      testid: testid + "_ok"
    }, okText))),
    closable: false
  }, restProps), /*#__PURE__*/_createElement(ColorsHeaderWrap, null, /*#__PURE__*/_createElement("label", null, colorListLabel, "\uFF1A"), /*#__PURE__*/_createElement("ul", null, allThemes.map(function (theme, index) {
    return /*#__PURE__*/_createElement("li", {
      key: "" + index,
      className: index === currentThemeIndex ? 'active' : undefined,
      onClick: changeTheme(index, theme)
    }, /*#__PURE__*/_createElement(Theme, {
      theme: theme
    }), _ref);
  }))), !!tipText && /*#__PURE__*/_createElement(TipTextWrap, null, tipText), /*#__PURE__*/_createElement(DragDropContext, {
    onDragEnd: handleDragEnd
  }, /*#__PURE__*/_createElement(Droppable, {
    droppableId: "table-dropdown-list"
  }, function (dropProvided) {
    return /*#__PURE__*/_createElement(OptionsWrap, _extends({
      ref: composeRef(optionsWrapRef, dropProvided.innerRef)
    }, dropProvided.droppableProps), optionsWithId.map(function (option, index) {
      var isWhite = !option.color || tinycolor.equals('#ffffff', option.color);
      var pathColors = isWhite ? ['rgba(17,31,44,0.72)', '#ffffff', 'rgba(17,31,44,0.72)'] : [option.color, option.color, 'rgba(17,31,44,0.72)'];
      var isLight = option.color ? tinycolor(option.color).isLight() : true;
      var placeholderColor = isLight ? 'rgba(17, 31, 44, 0.56)' : 'rgba(255, 255, 255, 0.56)';
      var color = isLight ? 'rgba(17, 31, 44, 1)' : 'rgba(255, 255, 255, 1)';
      return /*#__PURE__*/_createElement(Draggable, {
        key: option.id,
        draggableId: option.id,
        index: index
      }, function (dragProvider) {
        return /*#__PURE__*/_createElement(OptionItem, _extends({
          ref: dragProvider.innerRef
        }, dragProvider.draggableProps, dragProvider.dragHandleProps, {
          tabIndex: "-1"
        }), _ref2, /*#__PURE__*/_createElement(Input, {
          className: "option-input",
          value: option.value,
          onChange: changeValue(index, onChangeOptions),
          testid: testid,
          placeholderColor: placeholderColor,
          style: {
            backgroundColor: option.color ? option.color : 'transparent'
          },
          inputStyle: {
            color: color
          }
        }), /*#__PURE__*/_createElement(ColorPicker, {
          color: option.color,
          onColorPicker: changeColor(index, onChangeOptions),
          zIndex: typeof zIndex === 'number' ? zIndex + 1 : undefined,
          colorBlockText: "A",
          automaticColor: "rgba(1,2,3,0)",
          clearColor: "rgba(1,2,3,0)"
        }, /*#__PURE__*/_createElement(Button, {
          bordered: false,
          style: {
            marginLeft: 4
          },
          icon: /*#__PURE__*/_createElement(BgfontcolorNormal, {
            testid: testid + "_color",
            pathColors: pathColors
          })
        })), /*#__PURE__*/_createElement(Button, {
          bordered: false,
          disabled: optionsWithId.length <= 2,
          icon: /*#__PURE__*/_createElement(DeleteNormal, {
            className: "close-icon",
            testid: testid + "_delete"
          }),
          onClick: deleteOption(index, onChangeOptions)
        }));
      });
    }), dropProvided.placeholder);
  })), /*#__PURE__*/_createElement(Button, {
    type: "text",
    size: "small",
    onClick: addOption,
    testid: testid,
    style: {
      lineHeight: 1,
      height: 'auto'
    }
  }, /*#__PURE__*/_createElement(ButtonInner, null, _ref3, /*#__PURE__*/_createElement("span", {
    className: "text"
  }, addText))));
});
OptionsModal.defaultProps = {
  defaultOptions: [{
    value: '',
    color: defaultThemes[0].colors[0]
  }, {
    value: '',
    color: defaultThemes[0].colors[1]
  }, {
    value: '',
    color: defaultThemes[0].colors[2]
  }],
  themes: defaultThemes,
  removable: true,
  zIndex: 500
};