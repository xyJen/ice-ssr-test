import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Avatar } from "./..";
import { Tooltip } from "../tooltip";
import { LoadingNormal } from "../icons";
import { TranslateComp } from "../../locale/locales";
import { EInsertType } from "./type";
import { ItemWrapper, ItemContent, ItemTitle, ItemDescription, EllipsisText, LoadingWrapper, LoadingText, MiddleEllipsisWrapper, AvatarWrapper } from "./styled"; // 描述信息最后显示的字符数

var DESCRIPTION_LAST_CHAR_COUNT = 10;
export var MiddleEllipsisText = /*#__PURE__*/React.memo(function (props) {
  // 文本容器的引用
  var refContainer = React.useRef(null); // prop属性

  var text = props.text,
      width = props.width,
      lastCharNum = props.lastCharNum; // state

  var _React$useState = React.useState(false),
      isTextOverflow = _React$useState[0],
      setTextOverflow = _React$useState[1];

  var _React$useState2 = React.useState(0),
      divideIndex = _React$useState2[0],
      setDivideIndex = _React$useState2[1];

  React.useEffect(function () {
    if (refContainer.current) {
      var rect = refContainer.current.getBoundingClientRect();
      var containerWidth = rect.width;
      var textWidth = refContainer.current.scrollWidth;

      if (containerWidth > 0 && textWidth > containerWidth) {
        setTextOverflow(true); // 一行展示不下时，中间省略，截取最后10个字符最后显示

        var lastLen = Math.min(text.length, lastCharNum);
        var diIndex = text.length - lastLen;
        setDivideIndex(diIndex);
      }
    }
  }, [text, width]);
  var text1 = (text == null ? void 0 : text.slice(0, divideIndex)) || '';
  var text2 = (text == null ? void 0 : text.slice(divideIndex)) || '';
  return /*#__PURE__*/_createElement(Tooltip, {
    title: text,
    disabled: !isTextOverflow
  }, /*#__PURE__*/_createElement(MiddleEllipsisWrapper, {
    width: width,
    ref: refContainer
  }, isTextOverflow ? /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(EllipsisText, null, text1), /*#__PURE__*/_createElement("span", null, text2)) : /*#__PURE__*/_createElement("span", null, text)));
});
export var QuickInsertItem = /*#__PURE__*/React.memo(function (props) {
  // Description的引用
  var refDescription = React.useRef(null); // const descriptionWidth = React.useRef<number>(0);

  var _React$useState3 = React.useState(0),
      descriptionWidth = _React$useState3[0],
      setDescriptionWidth = _React$useState3[1];

  React.useEffect(function () {
    if (refDescription.current) {
      var rect = refDescription.current.getBoundingClientRect();
      setDescriptionWidth(rect.width);
    }
  }, []);
  var data = props.data,
      active = props.active,
      onItemClick = props.onItemClick;
  var type = data.type,
      key = data.key,
      iconUrls = data.iconUrls,
      title = data.title,
      description = data.description;
  var nickName = type === EInsertType.Person ? data.nickName : ''; // 存在头像url并且第一个url不为空串

  var isNameAvatar = (iconUrls == null ? void 0 : iconUrls.length) > 0 && iconUrls[0];

  var handleClick = function handleClick() {
    if (typeof onItemClick === 'function') {
      onItemClick(data);
    }
  }; // 渲染文档icon


  var renderDocIcon = function renderDocIcon() {
    // todo
    return null;
  };

  return /*#__PURE__*/_createElement(ItemWrapper, {
    key: key,
    active: active,
    onClick: handleClick
  }, type === EInsertType.Document ? renderDocIcon() : /*#__PURE__*/_createElement(AvatarWrapper, null, /*#__PURE__*/_createElement(Avatar, {
    className: "avatar",
    size: "normal",
    url: isNameAvatar ? iconUrls : undefined,
    name: nickName
  })), /*#__PURE__*/_createElement(ItemContent, null, /*#__PURE__*/_createElement(ItemTitle, null, title), /*#__PURE__*/_createElement(ItemDescription, {
    ref: refDescription
  }, /*#__PURE__*/_createElement(MiddleEllipsisText, {
    width: descriptionWidth,
    text: description,
    lastCharNum: DESCRIPTION_LAST_CHAR_COUNT
  }))));
});

var _ref2 = /*#__PURE__*/_createElement(LoadingNormal, {
  spin: true
});

export var LoadingItem = function LoadingItem(_ref) {
  var locale = _ref.locale;
  return /*#__PURE__*/_createElement(LoadingWrapper, null, _ref2, /*#__PURE__*/_createElement(LoadingText, null, /*#__PURE__*/_createElement(TranslateComp, {
    locale: locale,
    textKey: 'we_ui_quick_insert_loading'
  })));
};