/* eslint-disable no-plusplus */

/* eslint-disable @typescript-eslint/explicit-function-return-type */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';
import { ContainerRoot, NotificationTitle, NotificationBody, NotificationFooter, NotificationWrap } from "./styled";
export var Notification = function Notification(props) {
  var notifications = props.notifications;
  return /*#__PURE__*/_createElement(ContainerRoot, null, /*#__PURE__*/_createElement(CSSTransitionGroup, {
    transitionName: "notification",
    transitionEnterTimeout: 240,
    transitionLeaveTimeout: 240
  }, notifications.map(function (noti) {
    return /*#__PURE__*/_createElement(NotificationWrap, {
      key: noti.key
    }, /*#__PURE__*/_createElement(NotificationTitle, null, noti.title || null), /*#__PURE__*/_createElement(NotificationBody, null, noti.body || null), noti.footer !== null && /*#__PURE__*/_createElement(NotificationFooter, null, noti.footer));
  })));
};
export var notification = function () {
  var uuid = 0;
  var notifications = [];
  var handleUpdate = null;

  function init() {
    if (handleUpdate) {
      return;
    }

    var oDiv = document.createElement('div');
    oDiv.style.position = 'absolute';
    oDiv.style.width = '100%';
    oDiv.style.top = '0px';
    oDiv.style.left = '0px';
    document.body.appendChild(oDiv);

    handleUpdate = function handleUpdate(notices) {
      ReactDOM.render( /*#__PURE__*/_createElement(Notification, {
        notifications: notices
      }), oDiv);
    };
  }

  return {
    open: function open(config) {
      var _this = this;

      init();
      config.key = config.key || "noid-" + ++uuid;

      if (uuid > 10000000) {
        uuid = 0;
      }

      config.duration = typeof config.duration !== 'undefined' ? config.duration || 0 : 4.5;

      if (config.duration !== 0) {
        setTimeout(function () {
          return _this.close(config.key);
        }, config.duration * 1000);
      }

      notifications = [].concat(notifications, [config]);
      handleUpdate(notifications);
    },
    close: function close(key) {
      init();

      if (key) {
        var index = notifications.findIndex(function (n) {
          return n.key === key;
        });

        if (index !== -1) {
          notifications = [].concat(notifications);
          notifications.splice(index, 1);
        }
      } else {
        notifications = [];
      }

      handleUpdate(notifications);
    }
  };
}();