import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import useControlledValue from "../../hooks/useControlledValue";
import { Dropdown } from "../dropdown";
import { ArrowDownTriangleNormal } from "../icons";
import { SplitButtonWrap, SplitButtonLeft, SplitButtonRight, SplitButtonInner } from "./styled";
import { classnames } from "../../utils";
var SplitButton = /*#__PURE__*/React.memo(function (props) {
  var disabled = props.disabled,
      overlay = props.overlay,
      overlayStyle = props.overlayStyle,
      className = props.className,
      onActiveChange = props.onActiveChange,
      children = props.children,
      style = props.style,
      size = props.size,
      bordered = props.bordered,
      onClickLeft = props.onClickLeft,
      zIndex = props.zIndex,
      testid = props.testid,
      title = props.title,
      highlight = props.highlight;

  var _useControlledValue = useControlledValue(props.active, props.defaultActive),
      active = _useControlledValue[0],
      setActive = _useControlledValue[1];
  /**
   * 下拉面板是否可见修改函数
   *
   * @param {boolean} visible
   * @return {void}
   */


  var onVisibleChange = useCallback(function (visible) {
    if (!disabled) {
      if (onActiveChange) {
        onActiveChange(visible);
      }

      setActive(visible);
    }
  }, [onActiveChange, setActive, disabled]);
  /**
   * 点击左部区域
   *
   * @param {React.MouseEvent<HTMLElement>}
   * @return {void}
   */

  var handleClickLeft = useCallback(function (e) {
    if (!disabled) {
      if (!active) {
        e.stopPropagation();
      }

      if (onClickLeft) {
        onClickLeft(e);
      }
    }
  }, [disabled, active, onClickLeft]);
  return /*#__PURE__*/_createElement(Dropdown, {
    title: title,
    visible: disabled ? false : active,
    overlay: /*#__PURE__*/React.cloneElement(overlay, {
      'data-testid': testid && "overlay-" + testid
    }),
    overlayStyle: overlayStyle,
    onVisibleChange: onVisibleChange,
    zIndex: zIndex
  }, /*#__PURE__*/_createElement(SplitButtonWrap, {
    active: active,
    disabled: disabled,
    className: classnames(className, {
      active: active || highlight
    }),
    size: size,
    style: style,
    bordered: bordered
  }, /*#__PURE__*/_createElement(SplitButtonInner, null, /*#__PURE__*/_createElement(SplitButtonLeft, {
    disabled: disabled,
    onClick: handleClickLeft,
    "data-testid": testid && "splitbutton-left-" + testid,
    className: "splitbutton-left"
  }, children), /*#__PURE__*/_createElement(SplitButtonRight, {
    active: active,
    disabled: disabled,
    className: "splitbutton-right"
  }, /*#__PURE__*/_createElement(ArrowDownTriangleNormal, {
    className: "arrow-icon",
    "data-testid": testid && "splitbutton-arrow-" + testid
  })))));
});
SplitButton.defaultProps = {
  defaultActive: false,
  size: 'normal',
  bordered: false
};
export { SplitButton };