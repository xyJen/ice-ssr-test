import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useMemo, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import useControlledValue from "../../hooks/useControlledValue";
import { useTranslate } from "../../locale/locales";
import { AlignBottomNormal, AlignCenterNormal, AlignTopNormal } from "../icons";
import { Select, SelectOption } from "../select";
import { OptionWrap, TriggerWrap } from "./styled";

var VerticalAlignSelect = function VerticalAlignSelect(props) {
  var locale = props.locale,
      style = props.style,
      onChange = props.onChange,
      zIndex = props.zIndex,
      disabledKeys = props.disabledKeys,
      title = props.title,
      titles = props.titles,
      restProps = _objectWithoutPropertiesLoose(props, ["locale", "style", "onChange", "zIndex", "disabledKeys", "title", "titles"]);

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var t = useTranslate(locale); // 垂直对齐的选项

  var options = useMemo(function () {
    return [{
      title: t('we_ui_align_top'),
      value: 'top',
      Icon: AlignTopNormal
    }, {
      title: t('we_ui_align_center'),
      value: 'middle',
      Icon: AlignCenterNormal
    }, {
      title: t('we_ui_align_bottom'),
      value: 'bottom',
      Icon: AlignBottomNormal
    }];
  }, [t]); // 该组件的trigger区域只显示Icon

  var renderTrigger = useCallback(function (align) {
    var index = options.findIndex(function (option) {
      return option.value === align;
    });
    var currentOption = options[index];
    return /*#__PURE__*/_createElement(TriggerWrap, {
      style: {
        minWidth: 16
      }
    }, currentOption && /*#__PURE__*/_createElement(currentOption.Icon, null));
  }, [options]);
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [setValue, onChange]);
  return /*#__PURE__*/_createElement(Select, _extends({}, restProps, {
    value: value,
    onChange: handleChange,
    style: style || {
      padding: '0 0 0 6px',
      marginRight: -1
    },
    renderTrigger: renderTrigger,
    zIndex: zIndex,
    title: title,
    testid: "VerticalAlignSelect"
  }), options.map(function (option) {
    return /*#__PURE__*/_createElement(SelectOption, {
      value: option.value,
      key: option.value,
      disabled: disabledKeys == null ? void 0 : disabledKeys.includes(option.value),
      title: titles[option.value]
    }, /*#__PURE__*/_createElement(OptionWrap, null, /*#__PURE__*/_createElement(option.Icon, {
      className: "icon"
    }), /*#__PURE__*/_createElement("span", null, option.title)));
  }));
};

VerticalAlignSelect.defaultProps = {
  defaultValue: 'top',
  titles: {}
};
export default VerticalAlignSelect;