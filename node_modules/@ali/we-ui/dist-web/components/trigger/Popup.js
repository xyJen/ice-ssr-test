import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable react/no-find-dom-node */
import React, { useCallback, useMemo, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ResizeObserver from 'resize-observer-polyfill';
import domAlign, { alignPoint } from 'dom-align';
import { PortalComponent } from "../portal-component";
import { OverlayWrap, OverlayMask } from "./styled";
import { getAlignPointsAndOffsets, debounce } from "../../utils";
import { useClickOuterRef } from "../../hooks";
// eslint-disable-next-line max-lines-per-function
export var Popup = function Popup(props) {
  var visible = props.visible,
      getContainer = props.getContainer,
      overlayStyle = props.overlayStyle,
      overlay = props.overlay,
      triggerNode = props.triggerNode,
      placement = props.placement,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      zIndex = props.zIndex,
      onClickOuter = props.onClickOuter,
      offsetX = props.offsetX,
      offsetY = props.offsetY,
      mask = props.mask,
      onClickMask = props.onClickMask,
      overlayClassName = props.overlayClassName,
      pageX = props.pageX,
      pageY = props.pageY,
      testid = props.testid; // 容器

  var oPopupContainer = getContainer ? getContainer() : document.body;
  var overlayRef = useClickOuterRef(onClickOuter, visible);
  /**
   * 计算位置
   *
   * @param {HTMLElement} trigger node
   * @return {void}
   */

  var handleAlign = useCallback(function (oTrigger) {
    if (!overlayRef.current) return;
    var overflow = {
      adjustX: true,
      adjustY: true
    };
    var targetOffset = [0, 0];

    var _getAlignPointsAndOff = getAlignPointsAndOffsets(placement, 2),
        points = _getAlignPointsAndOff.points,
        offsets = _getAlignPointsAndOff.offsets;

    if (typeof pageX === 'number' && typeof pageY === 'number') {
      alignPoint(overlayRef.current, {
        pageX: pageX,
        pageY: pageY
      }, {
        targetOffset: targetOffset,
        overflow: overflow,
        offset: [offsetX, offsetY],
        points: points
      });
    } else if (oTrigger) {
      domAlign(overlayRef.current, oTrigger, {
        targetOffset: targetOffset,
        overflow: overflow,
        points: points,
        offset: [offsets[0] + offsetX, offsets[1] + offsetY]
      });
    }

    if (testid) {
      overlayRef.current.setAttribute('data-testid', "Popup-" + (testid || ''));
    }
  }, [pageX, pageY, offsetY, offsetX, placement, overlayRef, testid]);
  useEffect(function () {
    var resizeObserver;
    var handleResize = debounce(function () {
      if (overlayRef.current && triggerNode) {
        handleAlign(triggerNode);
      }
    }, 300);

    if (visible && oPopupContainer && overlayRef.current && triggerNode) {
      resizeObserver = new ResizeObserver(handleResize);
    }

    if (resizeObserver) {
      resizeObserver.observe(oPopupContainer);
    }

    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();

        if (typeof handleResize.cancel === 'function') {
          handleResize.cancel();
        }
      }
    };
  }, [visible, oPopupContainer, overlayRef, triggerNode, handleAlign]);
  /**
   * 阻止blur
   */

  var handleClick = useCallback(function (e) {
    var whiteTags = ['input', 'textarea'];
    var tagName = (e.target.tagName || '').toLowerCase();

    if (!whiteTags.includes(tagName)) {
      e.preventDefault();
    }
  }, []);
  /**
   * 做位置计算的
   */

  useEffect(function () {
    if (visible) {
      if (triggerNode) {
        handleAlign(triggerNode);
      } else {
        handleAlign();
      }
    } else if (overlayRef.current) {
      overlayRef.current.style.top = '-9999px';
      overlayRef.current.style.left = '-9999px';
    }
  }, [visible, handleAlign, triggerNode, overlayRef]);
  /**
   * 合并样式
   */

  var styleCombined = useMemo(function () {
    var styles = _extends({}, overlayStyle || {});

    if (typeof zIndex === 'number') {
      styles.zIndex = zIndex;
    }

    return styles;
  }, [overlayStyle, zIndex]);
  return /*#__PURE__*/_createElement(PortalComponent, {
    visible: !!visible,
    getContainer: getContainer
  }, mask && /*#__PURE__*/_createElement(OverlayMask, {
    className: visible ? undefined : 'hidden',
    style: {
      zIndex: zIndex
    },
    onClick: onClickMask,
    onContextMenu: function onContextMenu(e) {
      return e.preventDefault();
    }
  }), /*#__PURE__*/_createElement(OverlayWrap, {
    ref: overlayRef,
    style: styleCombined,
    className: visible ? overlayClassName : overlayClassName + " hidden",
    onMouseDown: handleClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, overlay));
};