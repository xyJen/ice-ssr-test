import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/* eslint-disable @typescript-eslint/explicit-function-return-type */

/* eslint-disable react/static-property-placement */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { classnames } from "../../utils";
import { setTransform, isTransform3dSupported, getActiveIndex, noop, getTop } from "./utils";
import { InkTabBarVertical } from "./styled";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _componentDidUpdate(component, init) {
  var _component$props = component.props,
      styles = _component$props.styles,
      panes = _component$props.panes,
      activeKey = _component$props.activeKey,
      type = _component$props.type;
  var rootNode = component.props.getRef('root');
  var wrapNode = component.props.getRef('nav') || rootNode;
  var inkBarNode = component.props.getRef('inkBar');
  var activeTab = component.props.getRef('activeTab');
  var inkBarNodeStyle = inkBarNode.style;

  if (init) {
    // prevent mount animation
    inkBarNodeStyle.display = 'none';
  }

  if (activeTab) {
    var tabNode = activeTab;
    var transformSupported = isTransform3dSupported(inkBarNodeStyle); // Reset current style

    setTransform(inkBarNodeStyle, '');
    inkBarNodeStyle.width = '';
    inkBarNodeStyle.height = '';
    inkBarNodeStyle.left = '';
    inkBarNodeStyle.top = '';
    inkBarNodeStyle.bottom = '';
    inkBarNodeStyle.right = '';
    var top = getTop(tabNode, wrapNode);
    var height = tabNode.offsetHeight; // If tabNode'width equal to wrapNode'width when tabBarPosition is top or bottom
    // It means no css working, then ink bar should not have width until css is loaded
    // Fix https://github.com/ant-design/ant-design/issues/7564

    if (height === rootNode.offsetHeight) {
      height = 0;
    } else if (styles.inkBar && styles.inkBar.height !== undefined) {
      // 传入 styles ，则使用传入的宽度，并重算 left
      height = parseInt(styles.inkBar.height, 10);

      if (height) {
        top += (tabNode.offsetHeight - height) / 2;
      }
    } // 可关闭时左右 padding 不等，为使线条在文字内容中间对齐，需左移 (24 - 8) / 2 = 8px


    if (type === 'editable-line') top -= 8; // use 3d gpu to optimize render

    if (transformSupported) {
      setTransform(inkBarNodeStyle, "translate3d(0, " + top + "px, 0)");
    } else {
      inkBarNodeStyle.top = top + "px";
    }

    inkBarNodeStyle.height = '20px';
  }

  var activeIndex = getActiveIndex(panes, activeKey);
  inkBarNodeStyle.display = activeIndex !== -1 ? 'block' : 'none';
}

var InkTabBarNodeLeft = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(InkTabBarNodeLeft, _React$Component);

  function InkTabBarNodeLeft() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.timeoutID = -1;
    return _this;
  }

  var _proto = InkTabBarNodeLeft.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    // ref https://github.com/ant-design/ant-design/issues/8678
    // ref https://github.com/react-component/tabs/issues/135
    // InkTabBarNode need parent/root ref for calculating position
    // since parent componentDidMount triggered after child componentDidMount
    // we're doing a quick fix here to use setTimeout to calculate position
    // after parent/root component mounted
    this.timeoutID = window.setTimeout(function () {
      _componentDidUpdate(_this2, true);
    }, 0);
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    _componentDidUpdate(this);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    clearTimeout(this.timeoutID);
  };

  _proto.render = function render() {
    var _this$props = this.props,
        saveRef = _this$props.saveRef,
        animated = _this$props.animated;
    return /*#__PURE__*/_createElement(InkTabBarVertical, {
      className: classnames(animated && 'animated'),
      ref: saveRef('inkBar')
    });
  };

  return InkTabBarNodeLeft;
}(React.Component);

InkTabBarNodeLeft.defaultProps = {
  styles: {},
  saveRef: noop
};
export { InkTabBarNodeLeft as default };