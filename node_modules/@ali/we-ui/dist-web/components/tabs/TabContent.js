import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/* eslint-disable @typescript-eslint/explicit-function-return-type */

/* eslint-disable react/static-property-placement */

/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { Component } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { classnames } from "../../utils";
import { getTransformByIndex, getActiveIndex, getTransformPropValue } from "./utils";
import { TabContentWrap } from "./styled";

var TabContent = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TabContent, _Component);

  function TabContent() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = TabContent.prototype;

  _proto.getTabPanes = function getTabPanes() {
    var props = this.props;
    var activeKey = props.activeKey,
        animated = props.animated,
        tabPosition = props.tabPosition;
    var children = props.children;
    var newChildren = [];
    var shouldAnimated = animated && tabPosition !== 'left';
    React.Children.forEach(children, function (child) {
      if (!child) {
        return;
      }

      var key = child.key;
      var actived = activeKey === key;
      newChildren.push( /*#__PURE__*/React.cloneElement(child, {
        animated: shouldAnimated,
        actived: actived,
        className: actived ? 'actived-pane' : 'inactived-pane'
      }));
    });
    return newChildren;
  };

  _proto.render = function render() {
    var props = this.props;
    var children = props.children,
        activeKey = props.activeKey,
        animated = props.animated,
        tabPosition = props.tabPosition; // todo 左侧 切换动画没做，自动关掉，补上再打开

    var shouldAnimated = animated && tabPosition !== 'left';
    var style = props.tabContentStyle;

    if (shouldAnimated) {
      var activeIndex = getActiveIndex(children, activeKey);

      if (activeIndex !== -1) {
        var animatedStyle = getTransformPropValue(getTransformByIndex(activeIndex));
        style = _extends({}, style, animatedStyle);
      } else {
        style = _extends({}, style, {
          display: 'none'
        });
      }
    }

    return /*#__PURE__*/_createElement(TabContentWrap, {
      className: classnames(shouldAnimated && 'animated'),
      style: style
    }, this.getTabPanes());
  };

  return TabContent;
}(Component);

TabContent.defaultProps = {
  tabContentStyle: {}
};
export { TabContent as default };