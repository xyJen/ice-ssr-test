/* eslint-disable max-lines-per-function */
import React, { useRef, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ArrowUpTriangleNormal, ArrowDownTriangleNormal } from "../icons";
import { formatNumber, ENumberStrategy, addFloat, needsRounding, classnames } from "../../utils";
import { InputNumberInner, InputStyled, Adjuster, IconWrapper, UnitWrapper, NumberInputWrap } from "./styled";
import { useControlledValue } from "../../hooks";
var iconStyle = {
  width: 8,
  height: 8,
  lineHeight: 12
};
export var NumberInput = function NumberInput(props) {
  var step = props.step,
      min = props.min,
      max = props.max,
      _props$accuracy = props.accuracy,
      accuracy = _props$accuracy === void 0 ? 0 : _props$accuracy,
      defaultValue = props.defaultValue,
      unit = props.unit,
      onChange = props.onChange,
      disabled = props.disabled,
      className = props.className,
      style = props.style,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,
      testid = props.testid;

  var _useControlledValue = useControlledValue(props.value, defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var inputRef = useRef(); // 上一个合法值，用于解析得到非法值的恢复

  var lastVal = useRef(min);
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [onChange, setValue]);
  var handleIncrease = useCallback(function (e) {
    e.preventDefault();
    var addResult = addFloat(Number(value), step);
    var newValue = formatNumber(addResult, accuracy, ENumberStrategy.FLOOR);

    if (newValue <= max) {
      lastVal.current = newValue;
      handleChange(newValue);
    }
  }, [accuracy, handleChange, max, step, value]);
  var handleDecrease = useCallback(function (e) {
    e.preventDefault();
    var addResult = addFloat(Number(value), -step);
    var newValue = formatNumber(addResult, accuracy, ENumberStrategy.FLOOR);

    if (newValue >= min) {
      lastVal.current = newValue;
      handleChange(newValue);
    }
  }, [accuracy, handleChange, min, step, value]);
  var handleInputBlur = useCallback(function () {
    // parse value
    var parsedValue = Number(value);

    if (isNaN(parsedValue)) {
      parsedValue = lastVal.current;
    } else if (parsedValue > max) {
      parsedValue = max;
    } else if (parsedValue < min) {
      parsedValue = min;
    } else if (needsRounding(value, accuracy)) {
      parsedValue = formatNumber(parsedValue, accuracy, ENumberStrategy.FLOOR);
    }

    lastVal.current = parsedValue;
    handleChange(parsedValue);
  }, [value, accuracy, lastVal, max, min, handleChange]);
  var handleInputEnter = useCallback(function () {
    if (inputRef.current) {
      inputRef.current.blur();
    }
  }, [inputRef]);
  var handleInputChange = useCallback(function (e) {
    handleChange(e.target.value);
  }, [handleChange]);
  var val = Number(value);
  return /*#__PURE__*/_createElement(NumberInputWrap, null, /*#__PURE__*/_createElement(InputNumberInner, null, /*#__PURE__*/_createElement(InputStyled, {
    value: "" + (value === undefined ? '' : value),
    style: style,
    disabled: disabled,
    ref: inputRef // className 应放在哪里？
    ,
    className: className,
    onChange: handleInputChange,
    onBlur: handleInputBlur,
    onEnter: handleInputEnter,
    placeholder: placeholder,
    testid: testid ? "NumberInput-" + testid : 'input-NumberInput'
  }), /*#__PURE__*/_createElement(Adjuster, null, /*#__PURE__*/_createElement(IconWrapper, {
    isUpper: true,
    onClick: handleIncrease,
    "data-testid": "arrow-increase"
  }, /*#__PURE__*/_createElement(ArrowUpTriangleNormal, {
    testid: testid,
    style: iconStyle,
    className: classnames({
      disabled: val + step > max
    })
  })), /*#__PURE__*/_createElement(IconWrapper, {
    isUpper: false,
    onClick: handleDecrease,
    "data-testid": "arrow-decrease"
  }, /*#__PURE__*/_createElement(ArrowDownTriangleNormal, {
    testid: testid,
    style: iconStyle,
    className: classnames({
      disabled: val - step < min
    })
  })))), unit && /*#__PURE__*/_createElement(UnitWrapper, null, unit));
};