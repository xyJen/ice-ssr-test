/* eslint-disable no-console */

/* eslint-disable arrow-body-style */
import React, { useMemo, useCallback, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { createPortal } from 'react-dom';
import { Menu } from "../menu";
import { ContextRoot, ContextContainer, GlobalStyle } from "./styled";
import useClickOuterRef from "../../hooks/useClickOuterRef";

var _ref2 = /*#__PURE__*/_createElement(GlobalStyle, null);

var _ref3 = /*#__PURE__*/_createElement(GlobalStyle, null);

export var ContextMenu = function ContextMenu(props) {
  var children = props.children,
      position = props.position,
      onVisibleChange = props.onVisibleChange,
      visible = props.visible; // 进行子组件的检查：children只有一个、子组件应该为Menu

  var child = Array.isArray(children) ? children[0] : children;

  if (! /*#__PURE__*/React.isValidElement(child) || child.type !== Menu) {
    console.warn("ContextMenu's child should be Menu");
  }
  /**
   * 可不可见变化函数
   *
   * @param {Boolean} visible
   * @return void
   */


  var handleChangeVisible = useCallback(function (newVisible) {
    if (visible !== newVisible && onVisibleChange) {
      onVisibleChange(newVisible);
    }
  }, [visible, onVisibleChange]); // 位置样式

  var _ref = position || {
    x: 0,
    y: 0
  },
      x = _ref.x,
      y = _ref.y;

  var styles = useMemo(function () {
    return {
      left: x,
      top: y
    };
  }, [x, y]);
  /**
   * 点击回调函数
   *
   * @return {void}
   */

  var handleClick = useCallback(function () {
    handleChangeVisible(false);
  }, [handleChangeVisible]); // 点击菜单外

  var containerRef = useClickOuterRef(handleClick); // 右键菜单显示的时候，阻止body滚动

  useEffect(function () {
    if (visible) {
      document.body.className += ' ctxmenu-hidden';
    }

    return function () {
      if (visible) {
        document.body.className = (document.body.className || '').replace(' ctxmenu-hidden', '');
      }
    };
  }, [visible]);
  var handleContextMenu = useCallback(function (e) {
    e.preventDefault();
  }, []);
  return visible ? /*#__PURE__*/createPortal( /*#__PURE__*/_createElement(ContextRoot, {
    onContextMenu: handleContextMenu
  }, /*#__PURE__*/_createElement(ContextContainer, {
    style: styles,
    onClick: handleClick,
    ref: containerRef
  }, /*#__PURE__*/React.cloneElement(child, {
    selectedKeys: [],
    openKeys: []
  })), _ref2), document.body) : _ref3;
};
ContextMenu.defaultProps = {
  position: {
    x: 0,
    y: 0
  }
};