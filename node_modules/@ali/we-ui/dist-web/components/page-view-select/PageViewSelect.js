import React, { useMemo, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import useControlledValue from "../../hooks/useControlledValue";
import { useTranslate } from "../../locale/locales";
import { PageFlowBetaNormal, PageWebBetaNormal, PageLayoutBetaNormal } from "../icons";
import { Select, SelectOption } from "../select";
import { OptionWrap, TriggerWrap } from "./styled";

var PageViewSelect = function PageViewSelect(props) {
  var locale = props.locale,
      style = props.style,
      onChange = props.onChange,
      title = props.title,
      titles = props.titles,
      zIndex = props.zIndex,
      disabled = props.disabled;

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var t = useTranslate(locale); // 页面视图的选项

  var options = useMemo(function () {
    return [{
      title: t('we_ui_view_page_view'),
      value: 'page-view',
      Icon: PageFlowBetaNormal
    }, {
      title: t('we_ui_view_paging_view'),
      value: 'paging-view',
      Icon: PageLayoutBetaNormal
    }, {
      title: t('we_ui_view_web_view'),
      value: 'web-view',
      Icon: PageWebBetaNormal
    }];
  }, [t]); // 该组件的trigger区域显示Icon+文字

  var renderTrigger = useCallback(function (selectedView) {
    var index = options.findIndex(function (option) {
      return option.value === selectedView;
    });
    var currentOption = options[index];
    return /*#__PURE__*/_createElement(TriggerWrap, {
      style: {
        minWidth: 60
      }
    }, currentOption && /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(currentOption.Icon, {
      style: {
        marginRight: '8px'
      }
    }), currentOption.title));
  }, [options]);
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [setValue, onChange]);
  return /*#__PURE__*/_createElement(Select, {
    value: value,
    onChange: handleChange,
    style: style,
    renderTrigger: renderTrigger,
    zIndex: zIndex,
    title: title,
    testid: "PageViewSelect",
    disabled: disabled
  }, options.map(function (option) {
    return /*#__PURE__*/_createElement(SelectOption, {
      value: option.value,
      key: option.value,
      title: titles[option.value]
    }, /*#__PURE__*/_createElement(OptionWrap, null, /*#__PURE__*/_createElement(option.Icon, {
      className: "icon"
    }), /*#__PURE__*/_createElement("span", null, option.title)));
  }));
};

PageViewSelect.defaultProps = {
  defaultValue: 'page-view',
  titles: {},
  disabled: false
};
export default PageViewSelect;