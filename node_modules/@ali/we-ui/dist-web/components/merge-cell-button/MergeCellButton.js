import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/* eslint-disable max-lines-per-function */
import React, { useState, useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SplitButton } from "../button";
import { MergeNormal, MergeCellsNormal, SelectNormal } from "../icons";
import styled from 'styled-components';
import { withTheme } from "../theme";
import { useTranslate } from "../../locale/locales";
import { useControlledValue } from "../../hooks";
import { classnames } from "../../utils";
import { getTitlePlacement, getTitleContent } from "../select/SelectOption";
import { Tooltip } from "../tooltip";
import { Ellipsis } from "../../utils/styled.mixin";
var TriggerWrap = /*#__PURE__*/styled.div(["display:flex;align-items:center;.title{width:70px;margin-left:6px;", ";}"], Ellipsis);
var OverlayWrap = withTheme(styled.div(["padding:", " 0;"], function (_ref) {
  var theme = _ref.theme;
  return theme.ui.padding;
}));
var OverlayItem = withTheme(styled.div(["position:relative;display:flex;justify-content:space-between;align-items:center;padding:", " 20px;margin:0 ", ";cursor:pointer;transition:all .1s ease-in-out;font-size:", ";border-radius:", ";height:32px;box-sizing:border-box;&:hover{background-color:", ";}&.disabled{color:", ";background-color:transparent;cursor:not-allowed;}.check-icon{opacity:0;font-size:12px;color:#3296fa;position:absolute;left:4px;top:50%;transform:translateY(-50%);}.check-icon.actived{opacity:1;}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.ui.paddingSmall;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.ui.marginMedium;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.ui.fontSizeSmall;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.ui.radiusLarge;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.ui.backgroundColor;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.ui.disabledColor;
}));
var TextSpan = /*#__PURE__*/styled.span([""]);

var _ref8 = /*#__PURE__*/_createElement(MergeNormal, null);

export var MergeCellButton = function MergeCellButton(props) {
  var className = props.className,
      onSelect = props.onSelect,
      onClick = props.onClick,
      locale = props.locale,
      _props$defaultStatus = props.defaultStatus,
      defaultStatus = _props$defaultStatus === void 0 ? 'unmerged' : _props$defaultStatus,
      title = props.title,
      _props$titles = props.titles,
      titles = _props$titles === void 0 ? {} : _props$titles,
      showTitle = props.showTitle,
      disabled = props.disabled,
      restProps = _objectWithoutPropertiesLoose(props, ["className", "onSelect", "onClick", "locale", "defaultStatus", "title", "titles", "showTitle", "disabled"]);

  var _useState = useState(false),
      overlayActive = _useState[0],
      setOverlayActive = _useState[1];

  var _useControlledValue = useControlledValue(props.status, defaultStatus),
      status = _useControlledValue[0],
      setStatus = _useControlledValue[1];

  var t = useTranslate(locale);

  var toggle = function toggle(curr) {
    return curr === 'unmerged' ? 'merged' : 'unmerged';
  };

  var handleClickMerged = function handleClickMerged() {
    if (onSelect) {
      onSelect('merged');
    }

    setStatus(toggle);
    setOverlayActive(false);
  };

  var handleClickUnMerged = function handleClickUnMerged() {
    if (onSelect) {
      onSelect('unmerged');
    }

    setStatus('unmerged');
    setOverlayActive(false);
  };

  var options = [{
    title: t('we_ui_merge_cell_button_merge_cell'),
    Icon: MergeNormal,
    value: 'merged',
    handleClick: handleClickMerged
  }, {
    title: t('we_ui_merge_cell_button_split_cell'),
    Icon: MergeCellsNormal,
    value: 'unmerged',
    handleClick: handleClickUnMerged
  }];
  var anotherOption = options.find(function (o) {
    return o.value !== status;
  });
  var handleClickLeft = useCallback(function () {
    if (onClick) {
      onClick(status);
    }

    setStatus(function (curr) {
      return curr === 'merged' ? 'unmerged' : 'merged';
    });
  }, [onClick, status, setStatus]);
  var isMerged = status === 'merged';
  var getOverlay = useMemo(function () {
    return /*#__PURE__*/_createElement(OverlayWrap, null, options.map(function (item) {
      return /*#__PURE__*/_createElement(Tooltip, {
        key: item.value,
        title: getTitleContent(titles[item.value]),
        placement: getTitlePlacement(titles[item.value])
      }, /*#__PURE__*/_createElement(OverlayItem, {
        onClick: item.handleClick,
        "data-testid": "option-" + item.value,
        className: classnames({
          disabled: status === 'unmerged' && item.value === 'unmerged'
        })
      }, /*#__PURE__*/_createElement(TextSpan, null, item.title), item.value === 'merged' && /*#__PURE__*/_createElement(SelectNormal, {
        className: classnames('check-icon', {
          actived: isMerged
        })
      })));
    }));
  }, [options, status, isMerged, titles]);
  return /*#__PURE__*/_createElement(SplitButton, _extends({}, restProps, {
    overlay: getOverlay,
    onClickLeft: handleClickLeft,
    active: overlayActive,
    onActiveChange: setOverlayActive,
    className: classnames(className, {
      leftSelected: isMerged
    }),
    testid: "MergeCellButton",
    title: title,
    disabled: disabled
  }), /*#__PURE__*/_createElement(TriggerWrap, {
    className: "we-ui-merge-cell-button-trigger"
  }, _ref8, anotherOption && showTitle && /*#__PURE__*/_createElement("span", {
    className: "title"
  }, anotherOption.title)));
};