import React, { useMemo, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Select, SelectOption } from "../select";
import { useTranslate } from "../../locale/locales";
import useControlledValue from "../../hooks/useControlledValue";
import { SelectTrigger } from "./styled";

// eslint-disable-next-line max-lines-per-function
var TextTypeSelect = function TextTypeSelect(props) {
  var locale = props.locale,
      onChange = props.onChange,
      style = props.style,
      bordered = props.bordered,
      zIndex = props.zIndex,
      className = props.className,
      disabled = props.disabled,
      titles = props.titles,
      title = props.title;
  var translate = useTranslate(locale); // 文字类型列表：正文、标题1-6

  var options = useMemo(function () {
    return [{
      title: translate('we_ui_font_family_Body'),
      type: 'paragraph',
      fontSize: 14,
      fontWeight: 400,
      lineHeight: '1.45'
    }, {
      title: translate('we_ui_font_family_Title_1'),
      type: 'heading-1',
      fontSize: '20pt',
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: translate('we_ui_font_family_Title_2'),
      type: 'heading-2',
      fontSize: '16pt',
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: translate('we_ui_font_family_Title_3'),
      type: 'heading-3',
      fontSize: '14pt',
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: translate('we_ui_font_family_Title_4'),
      type: 'heading-4',
      fontSize: '12pt',
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: translate('we_ui_font_family_Title_5'),
      type: 'heading-5',
      fontSize: '12pt',
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: translate('we_ui_font_family_Title_6'),
      type: 'heading-6',
      fontSize: '12pt',
      fontWeight: 500,
      lineHeight: '1.45'
    }];
  }, [translate]); // 受控模式处理
  // eslint-disable-next-line prefer-const

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];
  /**
   * 文字类型变化回调函数
   *
   * @param {TextType} type
   * @return {void}
   */


  var handleChange = useCallback(function (type) {
    if (onChange) {
      onChange(type);
    }

    setValue(type);
  }, [setValue, onChange]);
  /**
   * 渲染下拉选择的显示区
   *
   * @param {TextType} type
   * @return {React.ReactNode}
   */

  var renderTrigger = useCallback(function (type) {
    if (type === void 0) {
      type = 'paragraph';
    }

    var index = options.findIndex(function (op) {
      return op.type === type;
    });
    var currentOption = options[index];
    return /*#__PURE__*/_createElement(SelectTrigger, null, (currentOption == null ? void 0 : currentOption.title) || options[0].title);
  }, [options]);
  return /*#__PURE__*/_createElement(Select, {
    title: title,
    value: value,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    zIndex: zIndex,
    style: style,
    bordered: bordered,
    className: className,
    disabled: disabled,
    testid: "TextTypeSelect",
    selectable: true
  }, // 目前列表要求只显示 1-4
  options.slice(0, 5).map(function (option) {
    return /*#__PURE__*/_createElement(SelectOption, {
      key: option.type,
      value: option.type,
      testid: option.type,
      title: titles[option.type]
    }, /*#__PURE__*/_createElement("span", {
      style: {
        fontSize: option.fontSize,
        fontWeight: option.fontWeight,
        lineHeight: option.lineHeight
      }
    }, option.title));
  }));
};

TextTypeSelect.defaultProps = {
  onChange: function onChange() {},
  defaultValue: 'paragraph',
  titles: {}
};
export default TextTypeSelect;