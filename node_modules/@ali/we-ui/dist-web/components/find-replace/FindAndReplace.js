import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ArrowLeftNormal, ArrowRightNormal, ClosedNormal } from "../icons";
import { isEscHotKey, isEnterHotKey, isShiftEnterHotKey } from "../../utils";
import { Tabs, TabPane } from "../tabs";
import { TranslateComp } from "../../locale/locales";
import { ModalWrapper, ModalText, ModalCloseButton, ModalInput, PanelWrapper, OperationPanel, FocusPanel, OperationButtonWrapper, Description, RowWrapper, FlexRowWrapper // FlexItemOperationPanel,
} from "./styled";
import { Button } from "../button";
import { TranslateProvider } from "../../locale/TranslateProvider";

var _ref = /*#__PURE__*/_createElement(ArrowLeftNormal, null);

var _ref2 = /*#__PURE__*/_createElement("span", null, "0/0");

var _ref3 = /*#__PURE__*/_createElement(ArrowRightNormal, null);

export var FindAndReplace = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(FindAndReplace, _React$Component);

  function FindAndReplace(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.inputRef = /*#__PURE__*/React.createRef();

    _this.handleReplaceCurrent = function () {
      var onReplaceCurrent = _this.props.onReplaceCurrent;
      var _this$state$replaceTe = _this.state.replaceText,
          replaceText = _this$state$replaceTe === void 0 ? '' : _this$state$replaceTe;

      if (onReplaceCurrent) {
        onReplaceCurrent(replaceText);
      }
    };

    _this.handleReplaceAll = function () {
      var onReplaceAll = _this.props.onReplaceAll;
      var _this$state$replaceTe2 = _this.state.replaceText,
          replaceText = _this$state$replaceTe2 === void 0 ? '' : _this$state$replaceTe2;

      if (onReplaceAll) {
        onReplaceAll(replaceText);
      }
    };

    _this.handleFindInputChange = function (event) {
      var _event$target$value = event.target.value,
          text = _event$target$value === void 0 ? '' : _event$target$value;
      var onFindInputChange = _this.props.onFindInputChange;

      if (onFindInputChange) {
        onFindInputChange(text);
      }
    };

    _this.handleClose = function () {
      var _this$props = _this.props,
          onClose = _this$props.onClose,
          onFindInputChange = _this$props.onFindInputChange;
      onClose && onClose();
      onFindInputChange('');

      _this.setState({
        replaceText: ''
      });
    };

    _this.handleFindInputKeyDown = function (event) {
      var _this$props2 = _this.props,
          onFocusIndexChange = _this$props2.onFocusIndexChange,
          focusIndex = _this$props2.focusIndex;

      if (isShiftEnterHotKey(event)) {
        onFocusIndexChange(focusIndex - 1);
      } else if (isEnterHotKey(event) && onFocusIndexChange) {
        onFocusIndexChange(focusIndex + 1);
      } else if (isEscHotKey(event)) {
        _this.handleClose();
      }
    };

    _this.handleFocusPrevMatchedItem = function () {
      var _this$props3 = _this.props,
          onFocusIndexChange = _this$props3.onFocusIndexChange,
          focusIndex = _this$props3.focusIndex;

      if (onFocusIndexChange) {
        onFocusIndexChange(focusIndex - 1);
      }
    };

    _this.handleFocusNextMatchedItem = function () {
      var _this$props4 = _this.props,
          onFocusIndexChange = _this$props4.onFocusIndexChange,
          focusIndex = _this$props4.focusIndex;

      if (onFocusIndexChange) {
        onFocusIndexChange(focusIndex + 1);
      }
    };

    _this.handleReplaceInputChange = function (event) {
      var _event$target$value2 = event.target.value,
          text = _event$target$value2 === void 0 ? '' : _event$target$value2;

      _this.setState({
        replaceText: text
      });
    };

    _this.handleReplaceInputKeyDown = function (event) {
      var onReplaceCurrent = _this.props.onReplaceCurrent;
      var replaceText = _this.state.replaceText;

      if (isEnterHotKey(event) && onReplaceCurrent) {
        onReplaceCurrent(replaceText);
      } else if (isEscHotKey(event)) {
        _this.handleClose();
      }
    };

    _this.focusInput = function () {
      if (_this.inputRef.current) {
        _this.inputRef.current.focus();
      }
    };

    _this.selectInput = function () {
      if (_this.inputRef.current) {
        _this.inputRef.current.select();
      }
    };

    _this.renderFocusIndex = function () {
      var _this$props5 = _this.props,
          matchedCount = _this$props5.matchedCount,
          focusIndex = _this$props5.focusIndex,
          testid = _this$props5.testid;
      return /*#__PURE__*/_createElement(FocusPanel, null, /*#__PURE__*/_createElement(Button, {
        shape: "circle",
        disabled: !matchedCount,
        onClick: _this.handleFocusPrevMatchedItem,
        icon: _ref,
        tabIndex: "-1",
        testid: testid ? "ArrowLeftNormal-" + testid : undefined
      }), /*#__PURE__*/_createElement(ModalText, {
        style: {
          wordBreak: 'keep-all',
          whiteSpace: 'nowrap'
        }
      }, matchedCount > 0 ? /*#__PURE__*/_createElement("span", null, focusIndex + "/" + matchedCount) // : <TranslateComp locale={locale} textKey={'we_ui_find_and_replace_result'} />
      : _ref2), /*#__PURE__*/_createElement(Button, {
        shape: "circle",
        disabled: !matchedCount,
        onClick: _this.handleFocusNextMatchedItem,
        icon: _ref3,
        tabIndex: "-1",
        testid: testid ? "ArrowRightNormal-" + testid : undefined
      }));
    };

    _this.renderFindPanel = function () {
      var findText = _this.props.findText;
      return /*#__PURE__*/_createElement(PanelWrapper, null, /*#__PURE__*/_createElement(FlexRowWrapper, null, /*#__PURE__*/_createElement(TranslateProvider, null, function (t) {
        return /*#__PURE__*/_createElement(ModalInput, {
          autoFocus: true,
          "data-testid": "J_findValueInput",
          ref: _this.inputRef,
          value: findText,
          onChange: _this.handleFindInputChange,
          onKeyDown: _this.handleFindInputKeyDown,
          placeholder: t('we_ui_find_and_replace_find_placeholder')
        });
      })), /*#__PURE__*/_createElement(OperationPanel, null, _this.renderFocusIndex()));
    };

    _this.renderReplacePanel = function () {
      var _this$props6 = _this.props,
          findText = _this$props6.findText,
          locale = _this$props6.locale,
          matchedCount = _this$props6.matchedCount;
      var replaceText = _this.state.replaceText;
      return /*#__PURE__*/_createElement(PanelWrapper, null, /*#__PURE__*/_createElement(Description, null, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_find_and_replace_find_description'
      })), /*#__PURE__*/_createElement(TranslateProvider, null, function (t) {
        return /*#__PURE__*/_createElement(ModalInput, {
          autoFocus: true,
          "data-testid": "J_findValueInput",
          ref: _this.inputRef,
          value: findText,
          onChange: _this.handleFindInputChange,
          onKeyDown: _this.handleFindInputKeyDown,
          placeholder: t('we_ui_find_and_replace_find_placeholder')
        });
      }), /*#__PURE__*/_createElement(RowWrapper, null, /*#__PURE__*/_createElement(Description, null, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_find_and_replace_replace_description'
      })), /*#__PURE__*/_createElement(TranslateProvider, null, function (t) {
        return /*#__PURE__*/_createElement(ModalInput, {
          "data-testid": "J_replaceValueInput",
          value: replaceText,
          onChange: _this.handleReplaceInputChange,
          onKeyDown: _this.handleReplaceInputKeyDown,
          placeholder: t('we_ui_find_and_replace_replace_placeholder')
        });
      })), /*#__PURE__*/_createElement(OperationPanel, null, /*#__PURE__*/_createElement(OperationButtonWrapper, null, /*#__PURE__*/_createElement(Button, {
        shape: "round",
        disabled: matchedCount === 0,
        "data-testid": "J_replaceOne",
        onClick: _this.handleReplaceCurrent
      }, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_find_and_replace_replace'
      })), /*#__PURE__*/_createElement(Button, {
        shape: "round",
        disabled: matchedCount === 0,
        style: {
          marginLeft: 10
        },
        "data-testid": "J_replaceAll",
        onClick: _this.handleReplaceAll
      }, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_find_and_replace_replace_all'
      }))), _this.renderFocusIndex()));
    };

    _this.state = {
      replaceText: props.defaultReplaceText || ''
    };
    return _this;
  }

  var _proto = FindAndReplace.prototype;

  _proto.render = function render() {
    var _this$props7 = this.props,
        activeTabKey = _this$props7.activeTabKey,
        _this$props7$focused = _this$props7.focused,
        focused = _this$props7$focused === void 0 ? false : _this$props7$focused,
        isFindOnly = _this$props7.isFindOnly,
        locale = _this$props7.locale,
        defaultTabKey = _this$props7.defaultTabKey,
        testid = _this$props7.testid,
        domRef = _this$props7.domRef,
        onTabClick = _this$props7.onTabClick;
    return /*#__PURE__*/_createElement(ModalWrapper, {
      focused: focused,
      ref: domRef
    }, /*#__PURE__*/_createElement(Tabs, {
      defaultActiveKey: defaultTabKey,
      activeKey: activeTabKey,
      onTabClick: onTabClick
    }, /*#__PURE__*/_createElement(TabPane, {
      tab: /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_find_and_replace_find'
      }),
      key: "find"
    }, this.renderFindPanel()), isFindOnly ? null : /*#__PURE__*/_createElement(TabPane, {
      tab: /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_find_and_replace_replace'
      }),
      key: "replace"
    }, this.renderReplacePanel())), /*#__PURE__*/_createElement(ModalCloseButton, {
      onMouseDown: this.handleClose
    }, /*#__PURE__*/_createElement(ClosedNormal, {
      testid: testid
    })));
  };

  return FindAndReplace;
}(React.Component);