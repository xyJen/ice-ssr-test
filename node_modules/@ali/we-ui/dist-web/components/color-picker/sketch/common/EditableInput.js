import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { Component, PureComponent } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import reactCSS from 'reactcss';
var DEFAULT_ARROW_OFFSET = 1;
var UP_KEY_CODE = 38;
var DOWN_KEY_CODE = 40;
var ENTER_KEY_CODE = 13;
var VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];

var isValidKeyCode = function isValidKeyCode(keyCode) {
  return VALID_KEY_CODES.indexOf(keyCode) > -1;
};

var getNumberValue = function getNumberValue(value) {
  return Number(String(value).replace(/%/g, ''));
};

export var EditableInput = /*#__PURE__*/function (_ref) {
  _inheritsLoose(EditableInput, _ref);

  function EditableInput(props) {
    var _this;

    _this = _ref.call(this) || this;

    _this.handleBlur = function (e) {
      // 给 e 加一个 _blur 属性
      // 用于 onChangeComplete
      e._blur = true;

      _this.setUpdatedValue(_this.state.value, e);

      if (_this.state.blurValue) {
        _this.setState({
          value: _this.state.blurValue,
          blurValue: null
        });
      }
    };

    _this.handleChange = function (e) {
      _this.setUpdatedValue(e.target.value, e);
    };

    _this.handleKeyDown = function (e) {
      // In case `e.target.value` is a percentage remove the `%` character
      // and update accordingly with a percentage
      // https://github.com/casesandberg/react-color/issues/383
      var value = getNumberValue(e.target.value);

      if (!isNaN(value) && isValidKeyCode(e.keyCode)) {
        var offset = _this.getArrowOffset();

        var updatedValue = e.keyCode === UP_KEY_CODE ? value + offset : value - offset;

        _this.setUpdatedValue(updatedValue, e);
      } // Enter to blur


      if (e.keyCode === ENTER_KEY_CODE) {
        e.target.blur();
      }
    };

    _this.handleDrag = function (e) {
      if (_this.props.dragLabel) {
        var newValue = Math.round(_this.props.value + e.movementX);

        if (newValue >= 0 && newValue <= _this.props.dragMax) {
          _this.props.onChange && _this.props.onChange(_this.getValueObjectWithLabel(newValue), e);
        }
      }
    };

    _this.handleMouseDown = function (e) {
      if (_this.props.dragLabel) {
        e.preventDefault();

        _this.handleDrag(e);

        window.addEventListener('mousemove', _this.handleDrag);
        window.addEventListener('mouseup', _this.handleMouseUp);
      }
    };

    _this.handleMouseUp = function () {
      _this.unbindEventListeners();
    };

    _this.unbindEventListeners = function () {
      window.removeEventListener('mousemove', _this.handleDrag);
      window.removeEventListener('mouseup', _this.handleMouseUp);
    };

    _this.state = {
      value: String(props.value).toUpperCase(),
      blurValue: String(props.value).toUpperCase()
    };
    return _this;
  }

  var _proto = EditableInput.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {
      if (this.input === document.activeElement) {
        this.setState({
          blurValue: String(this.props.value).toUpperCase()
        });
      } else {
        this.setState({
          value: String(this.props.value).toUpperCase(),
          blurValue: !this.state.blurValue && String(this.props.value).toUpperCase()
        });
      }
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.unbindEventListeners();
  };

  _proto.getValueObjectWithLabel = function getValueObjectWithLabel(value) {
    var _ref2;

    return _ref2 = {}, _ref2[this.props.label] = value, _ref2;
  };

  _proto.getArrowOffset = function getArrowOffset() {
    return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;
  };

  _proto.setUpdatedValue = function setUpdatedValue(value, e) {
    var onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value; // 给 e 加一个 _input 属性
    // 表明这次的 onChange 由输入框触发

    e._input = true;
    this.props.onChange && this.props.onChange(onChangeValue, e);
    this.setState({
      value: value
    });
  };

  _proto.render = function render() {
    var _this2 = this;

    var styles = reactCSS({
      "default": {
        wrap: {
          position: 'relative'
        }
      },
      'user-override': {
        wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},
        input: this.props.style && this.props.style.input ? this.props.style.input : {},
        label: this.props.style && this.props.style.label ? this.props.style.label : {}
      },
      'dragLabel-true': {
        label: {
          cursor: 'ew-resize'
        }
      }
    }, {
      'user-override': true
    }, this.props);
    return /*#__PURE__*/_createElement("div", {
      style: styles.wrap
    }, /*#__PURE__*/_createElement("input", {
      style: styles.input,
      ref: function ref(input) {
        _this2.input = input;
      },
      value: this.state.value,
      onKeyDown: this.handleKeyDown,
      onChange: this.handleChange,
      onBlur: this.handleBlur,
      placeholder: this.props.placeholder,
      spellCheck: "false"
    }), this.props.label && !this.props.hideLabel ? /*#__PURE__*/_createElement("span", {
      style: styles.label,
      onMouseDown: this.handleMouseDown
    }, this.props.label) : null);
  };

  return EditableInput;
}(PureComponent || Component);
export default EditableInput;