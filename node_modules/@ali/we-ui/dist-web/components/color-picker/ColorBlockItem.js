/* eslint-disable max-lines-per-function */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import tinycolor from 'tinycolor2';
import { classnames, isWhite, isTransparent } from "../../utils";
import { ColorBoxItem, ClearItem, ColorBlock } from "./styled";
// 勾选的填充色缓存
var fillColorCache = {}; // for:性能优化

var _ref = /*#__PURE__*/_createElement("path", {
  d: "M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"
});

// 渲染每个色块
export var ColorBlockItem = /*#__PURE__*/React.memo(function (props) {
  var colorBlockText = props.colorBlockText;
  /**
   * 将颜色值转换成颜色对象
   */

  var toColorObj = function toColorObj(colorStr, oldHue) {
    var tinyColor = tinycolor(colorStr);
    var hsl = tinyColor.toHsl();
    var hsv = tinyColor.toHsv();
    var rgb = tinyColor.toRgb();
    var hex = tinyColor.toHex();

    if (hsl.s === 0) {
      hsl.h = oldHue || 0;
      hsv.h = oldHue || 0;
    }

    var transparent = hex === '000000' && rgb.a === 0;
    return {
      hsl: hsl,
      hex: transparent ? 'transparent' : "#" + hex,
      rgb: rgb,
      hsv: hsv,
      source: colorStr
    };
  };
  /**
   * 获取对比色，即：色块选中时打勾的颜色，要和色块本身的背景色形成反差
   * @param color 字符串表示的颜色值
   */


  var getContrastingColor = function getContrastingColor(color) {
    if (!color) {
      return '#FFFFFF';
    }

    var result = fillColorCache[color];

    if (result) {
      return result;
    }

    var colorObj = toColorObj(color);

    if (colorObj.hex === 'transparent') {
      result = 'rgba(0,0,0,0.4)';
    } else {
      var yiq = (colorObj.rgb.r * 299 + colorObj.rgb.g * 587 + colorObj.rgb.b * 114) / 1000;
      result = yiq >= 210 ? '#8C8C8C' : '#FFFFFF';
    }

    fillColorCache[color] = result;
    return result;
  };

  var colorValue = props.colorValue,
      clearColor = props.clearColor,
      index = props.index,
      active = props.active,
      onColorPick = props.onColorPick;

  var _React$useState = React.useState(false),
      isHover = _React$useState[0],
      setHover = _React$useState[1];

  var key = index + "-" + colorValue; // 是否为清空色块，加上红色斜杠

  var isClear = typeof clearColor === 'string' ? clearColor.toLocaleLowerCase() === colorValue.toLocaleLowerCase() : false;

  if (isClear) {
    return /*#__PURE__*/_createElement(ClearItem, {
      key: key,
      onClick: function onClick() {
        return onColorPick(colorValue);
      },
      onMouseEnter: function onMouseEnter() {
        return setHover(true);
      },
      onMouseLeave: function onMouseLeave() {
        return setHover(false);
      },
      className: classnames({
        isHover: isHover
      })
    }, /*#__PURE__*/_createElement(ColorBlock, {
      color: colorValue,
      border: true,
      className: classnames({
        isHover: isHover
      })
    }));
  } // 颜色值为FAFAFA或FFFFFF时， 需要设置边框
  // const border = ['#FAFAFA', '#FFFFFF'].includes(colorValue); // Todo：通过计算来设置


  var border = isWhite(colorValue) || isTransparent(colorValue); // 选中的样式

  var checkStyle = {
    fill: active ? getContrastingColor(colorValue) : '#fff',
    display: active ? 'block' : 'none'
  };
  return /*#__PURE__*/_createElement(ColorBoxItem, {
    key: key,
    onClick: function onClick() {
      return onColorPick(colorValue);
    },
    onMouseEnter: function onMouseEnter() {
      return setHover(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setHover(false);
    }
  }, /*#__PURE__*/_createElement(ColorBlock, {
    color: colorValue,
    border: border || isClear,
    className: classnames({
      isHover: isHover
    })
  }, /*#__PURE__*/_createElement("svg", {
    style: checkStyle,
    viewBox: "0 0 18 18"
  }, _ref), colorBlockText && !active && isHover && /*#__PURE__*/_createElement("span", {
    className: "colorBlockText",
    style: {
      color: getContrastingColor(colorValue)
    }
  }, colorBlockText)));
});