import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import colorData from "./colorData";
import { SomecolorNormal, ArrowRightNormal } from "../icons";
import { LineGroup, PaletteWrapper, CustomGroup, CustomPicker, CustomText, DefaultGroup, LatestColorWrap, LatestColorText, CustomGroupInnerWrap, MainColorGroup } from "./styled";
import { ColorBlockItem } from "./ColorBlockItem";
import SketchPicker from "./sketch";
import { TranslateComp } from "../../locale/locales";
import { useClickOuterRef } from "../../hooks";
import classnames from "../../utils/classnames";
import { colorUtil } from "./colorUtil";

var decimalToHex = function decimalToHex(alpha) {
  return alpha === 0 ? '00' : Math.round(255 * alpha).toString(16).padStart(2, "0");
};

// 第一行常用颜色突出显示
var firstLineStyle = {
  paddingBottom: '10px'
};
var CUSTOMER_CONFIG_KEY = 'color-picker-custom-config';
var MAX_LATEST_COLOR = 10;

var ClickOuterRef = function ClickOuterRef(props) {
  var handler = props.handler,
      on = props.on,
      children = props.children;
  var ref = useClickOuterRef(handler, on);
  return children(ref);
};

var _ref = /*#__PURE__*/_createElement(SomecolorNormal, null);

export var ColorPalette = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(ColorPalette, _PureComponent);

  // eslint-disable-next-line react/static-property-placement
  function ColorPalette(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.refPalette = /*#__PURE__*/React.createRef();

    _this.handlePick = function (color) {
      var onPick = _this.props.onPick;
      onPick(color);
    };

    _this.handleCustomClick = function (e) {
      // 阻止 更多颜色面板的 点击事件冒泡
      e.preventDefault();
      e.stopPropagation();
    };

    _this.handleCustomPicker = function (e) {
      var picker = _this.props.picker;

      if (!picker) {
        return;
      }

      var target = e.target; // 确认按钮不阻止事件流

      if (!target.id || target.id !== CUSTOMER_CONFIG_KEY) {
        e.preventDefault();
        e.stopPropagation();
      }

      var showPicker = _this.state.showPicker;

      if (!showPicker) {
        _this.changePickerAlignment();
      }

      _this.setState({
        showPicker: !showPicker
      });
    };

    _this.changePickerAlignment = function () {
      if (!_this.refPalette.current) {
        return;
      }

      var _this$refPalette$curr = _this.refPalette.current.getBoundingClientRect(),
          left = _this$refPalette$curr.left,
          width = _this$refPalette$curr.width;

      var right = window.innerWidth - left - width; // SketchPicker 的宽度为 200px

      if (right <= 210) {
        _this.setState({
          isPickerAlignRight: false
        });
      } else {
        _this.setState({
          isPickerAlignRight: true
        });
      }
    };

    _this.getColorStringColorObj = function (colorObj) {
      var result = colorObj.hex; // 这里可能是 "transparent"

      if (result.startsWith("#")) {
        if (colorObj.rgb && colorObj.rgb.a !== 1) {
          result = ("" + colorObj.hex + decimalToHex(colorObj.rgb.a || 0)).toLowerCase();
        }
      }

      return result;
    };

    _this.handleCustomPickerChange = function (colorObj) {
      var _this$props = _this.props,
          onCustomColorPick = _this$props.onCustomColorPick,
          onPick = _this$props.onPick,
          onCustomColorAfterPick = _this$props.onCustomColorAfterPick;

      var color = _this.getColorStringColorObj(colorObj);

      _this.setState({
        customColor: color
      }); // 选中颜色变化时立即应用


      if (onCustomColorPick) {
        onCustomColorPick(color);
      } else {
        if (!onCustomColorAfterPick) {
          onPick(color);
        }
      }
    };

    _this.handleCustomPickerAfterChange = function (colorObj) {
      var onCustomColorAfterPick = _this.props.onCustomColorAfterPick;

      var color = _this.getColorStringColorObj(colorObj);

      if (onCustomColorAfterPick) {
        onCustomColorAfterPick(color);
      }
    };

    _this.handleConfirmCustomColor = function () {
      var customColor = _this.state.customColor;

      _this.addRecentColor(customColor);

      _this.setState({
        customColor: '',
        showPicker: false
      });
    };

    _this.addRecentColor = function (color) {
      if (!color) return;

      _this.setState(function (state) {
        var colors = [].concat(state.recentColors);
        var findIdx = colors.indexOf(color);

        if (findIdx >= 0) {
          var _colors;

          // 调整已有元素的位置
          var deleteColor = colors.splice(findIdx, 1);

          (_colors = colors).unshift.apply(_colors, deleteColor);
        } else {
          colors.unshift(color);
        }

        colors = colors.slice(0, MAX_LATEST_COLOR);
        colorUtil.saveRecentColorsToLocalStorage(colors);
        return {
          recentColors: colors
        };
      });
    };

    _this.renderCustomerColor = function () {
      var _this$props2 = _this.props,
          clearColor = _this$props2.clearColor,
          color = _this$props2.color,
          locale = _this$props2.locale,
          showRecentColors = _this$props2.showRecentColors,
          colorBlockText = _this$props2.colorBlockText;
      var _this$state = _this.state,
          isPickerAlignRight = _this$state.isPickerAlignRight,
          customColor = _this$state.customColor,
          showPicker = _this$state.showPicker,
          customerColors = _this$state.recentColors;
      var colorCount = Math.min(customerColors.length, MAX_LATEST_COLOR);
      var limitedColors = customerColors.slice(0, colorCount);
      return /*#__PURE__*/_createElement(React.Fragment, null, !colorCount || !showRecentColors ? null : /*#__PURE__*/_createElement(LatestColorWrap, null, /*#__PURE__*/_createElement(LatestColorText, null, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_color_picker_latest'
      })), /*#__PURE__*/_createElement(LineGroup, {
        key: "latestColors-" + limitedColors[0]
      }, limitedColors.map(function (curColor, index) {
        return /*#__PURE__*/_createElement(ColorBlockItem, {
          key: curColor + "-" + index,
          colorValue: curColor,
          clearColor: clearColor,
          index: index,
          active: color === curColor,
          onColorPick: _this.handlePick,
          colorBlockText: colorBlockText
        });
      }))), /*#__PURE__*/_createElement(CustomGroup, {
        onClick: _this.handleCustomPicker
      }, /*#__PURE__*/_createElement(CustomGroupInnerWrap, {
        className: classnames({
          actived: showPicker
        })
      }, /*#__PURE__*/_createElement("div", {
        style: {
          display: 'flex',
          alignItems: 'center'
        }
      }, _ref, /*#__PURE__*/_createElement(CustomText, null, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_color_picker_more'
      })), showPicker &&
      /*#__PURE__*/
      // 点击 更多颜色 面板之外的区域关闭面板，并将颜色添加到 最近颜色 中
      _createElement(ClickOuterRef, {
        handler: _this.handleConfirmCustomColor,
        on: showPicker
      }, function (customPickerRef) {
        return /*#__PURE__*/_createElement(CustomPicker, {
          rightSide: isPickerAlignRight,
          onClick: _this.handleCustomClick,
          ref: customPickerRef
        }, /*#__PURE__*/_createElement(SketchPicker, {
          color: customColor,
          onChange: _this.handleCustomPickerChange,
          onChangeComplete: _this.handleCustomPickerAfterChange
        }));
      })), /*#__PURE__*/_createElement(ArrowRightNormal, {
        style: {
          color: 'rgba(17, 31, 44, 0.4)'
        }
      }))));
    };

    _this.state = {
      customColor: '',
      showPicker: false,
      isPickerAlignRight: true,
      recentColors: colorUtil.getRecentColorsFromLocalStorage()
    };
    return _this;
  } // 选中颜色之后，数值回调


  var _proto = ColorPalette.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props3 = this.props,
        color = _this$props3.color,
        clearColor = _this$props3.clearColor,
        automaticColor = _this$props3.automaticColor,
        picker = _this$props3.picker,
        locale = _this$props3.locale,
        quickSetText = _this$props3.quickSetText,
        showAutomatic = _this$props3.showAutomatic,
        colorBlockText = _this$props3.colorBlockText;
    return /*#__PURE__*/_createElement(PaletteWrapper, {
      ref: this.refPalette
    }, showAutomatic && /*#__PURE__*/_createElement(DefaultGroup, {
      onClick: function onClick() {
        return _this2.handlePick(automaticColor);
      }
    }, /*#__PURE__*/_createElement(ColorBlockItem, {
      colorValue: automaticColor,
      clearColor: clearColor,
      index: 1,
      active: color === automaticColor,
      onColorPick: this.handlePick,
      colorBlockText: colorBlockText
    }), /*#__PURE__*/_createElement(CustomText, null, quickSetText || /*#__PURE__*/_createElement(TranslateComp, {
      locale: locale,
      textKey: 'we_ui_color_picker_default'
    }))), /*#__PURE__*/_createElement(MainColorGroup, null, colorData.map(function (data, index) {
      var groupProps = {
        key: index + "-" + data[0],
        style: index === 0 ? firstLineStyle : undefined
      }; // 渲染一行色块

      return /*#__PURE__*/_createElement(LineGroup, groupProps, data.map(function (curColor, colIndex) {
        return /*#__PURE__*/_createElement(ColorBlockItem, {
          key: curColor + "-" + colIndex,
          colorValue: curColor,
          clearColor: clearColor,
          index: colIndex,
          active: color === curColor,
          onColorPick: _this2.handlePick,
          colorBlockText: colorBlockText
        });
      }));
    })), picker ? this.renderCustomerColor() : null);
  };

  return ColorPalette;
}(PureComponent);
ColorPalette.defaultProps = {
  color: 'black',
  onPick: function onPick() {},
  canClear: false,
  automaticColor: '',
  latestColors: [],
  picker: true,
  showRecentColors: true,
  showAutomatic: true
};