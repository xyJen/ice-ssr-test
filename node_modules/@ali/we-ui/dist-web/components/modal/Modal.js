import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable no-param-reassign */

/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useRef, useMemo, useCallback, useLayoutEffect, useState, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM, { createPortal } from 'react-dom';
import { useTranslate } from "../../locale/locales";
import { TranslateProvider } from "../../locale/TranslateProvider";
import { Button } from "../button";
import { ClosedNormal, LoadingNormal, ReportFillNormal, CheckboxFillNormal, RoundcloseThickNormal, WarnFillNormal } from "../icons";
import { Mask, Root, Wrap, Title, Content, Footer, Header, Body, CloseButton, FooterWrap, ConfirmButton, TitleTextWrap, TitleIconTextWrap, TitleIconWrap } from "./styled";
import { KEY_CODES } from "../../utils";

var _ref = /*#__PURE__*/_createElement(LoadingNormal, {
  spin: true
});

var _ref4 = /*#__PURE__*/_createElement(LoadingNormal, {
  spin: true
});

var _ref5 = /*#__PURE__*/_createElement(TitleIconWrap, {
  colorKey: "colorBlue1"
}, /*#__PURE__*/_createElement(ReportFillNormal, null));

var _ref6 = /*#__PURE__*/_createElement(TitleIconWrap, {
  colorKey: "colorGreen1"
}, /*#__PURE__*/_createElement(CheckboxFillNormal, null));

var _ref7 = /*#__PURE__*/_createElement(TitleIconWrap, {
  colorKey: "colorRed1"
}, /*#__PURE__*/_createElement(RoundcloseThickNormal, null));

var _ref8 = /*#__PURE__*/_createElement(TitleIconWrap, {
  colorKey: "colorOrange1"
}, /*#__PURE__*/_createElement(WarnFillNormal, null));

// eslint-disable-next-line max-lines-per-function
export var Modal = Object.assign(function (props) {
  var visible = props.visible,
      onOk = props.onOk,
      title = props.title,
      children = props.children,
      onCancel = props.onCancel,
      width = props.width,
      footer = props.footer,
      confirmLoading = props.confirmLoading,
      bodyStyle = props.bodyStyle,
      maskStyle = props.maskStyle,
      style = props.style,
      closable = props.closable,
      okButtonProps = props.okButtonProps,
      cancelButtonProps = props.cancelButtonProps,
      zIndex = props.zIndex,
      _props$maskClosable = props.maskClosable,
      maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable,
      testid = props.testid,
      keyboard = props.keyboard; // 是否在加载中

  var _useState = useState(false),
      confirming = _useState[0],
      setConfirming = _useState[1];

  var finalConfirming = confirmLoading === undefined ? confirming : confirmLoading; // 记录是否已经显示过

  var mounted = useRef(false);
  mounted.current = mounted.current || !!visible; // 组件是否已被卸载

  var isUnmounted = useRef(false); // 国际化

  var t = useTranslate(props.locale); // OK和cancel的文案

  var okText = props.okText || t('we_ui_ok_text');
  var cancelText = props.cancelText || t('we_ui_cancel_text'); // 创建container节点

  var oContainer = useMemo(function () {
    if (mounted.current) {
      var oDiv = document.createElement('div');
      oDiv.style.position = 'absolute';
      oDiv.style.left = '0px';
      oDiv.style.top = '0px';
      oDiv.style.width = '100%';
      return oDiv;
    }

    return null; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mounted.current]); // 插入节点到body

  useLayoutEffect(function () {
    if (oContainer) {
      document.body.appendChild(oContainer);
    }

    return function () {
      if (oContainer) {
        document.body.removeChild(oContainer);
      }

      isUnmounted.current = true;
    };
  }, [oContainer]);
  /**
   * 点击遮罩
   *
   * @return {void}
   */

  var handleClose = useCallback(function () {
    if (onCancel) {
      onCancel();
    }
  }, [onCancel]);
  /**
   * 阻止冒泡
   */

  var stopPropagation = useCallback(function (e) {
    e.stopPropagation();
  }, []);
  /**
   * 确认点击
   */

  var handleConfirm = useCallback(function () {
    if (onOk) {
      var returnedValue = onOk();

      if (returnedValue && returnedValue instanceof Promise) {
        setConfirming(true);
        returnedValue.then(function () {
          if (!isUnmounted.current) setConfirming(false);
        })["catch"](function (e) {
          // eslint-disable-next-line no-console
          console.error(e);
        });
      }
    }
  }, [onOk, isUnmounted]);
  var maskStyleCombined = useMemo(function () {
    var v = _extends({}, maskStyle || {});

    if (typeof zIndex === 'number') {
      v.zIndex = zIndex;
    }

    return v;
  }, [maskStyle, zIndex]);
  var wrapStyle = useMemo(function () {
    return typeof zIndex === 'number' ? {
      zIndex: zIndex
    } : undefined;
  }, [zIndex]);
  var onClickMask = useCallback(function () {
    if (maskClosable) {
      handleClose();
    }
  }, [maskClosable, handleClose]);
  useEffect(function () {
    var handleKeyDown = function handleKeyDown(event) {
      if (event.which === KEY_CODES.ESC) {
        handleClose();
      }
    };

    if (visible && keyboard) {
      document.addEventListener('keydown', handleKeyDown);
    }

    return function () {
      if (visible && keyboard) {
        document.removeEventListener('keydown', handleKeyDown);
      }
    };
  }, [handleClose, keyboard, visible]);
  return oContainer ? /*#__PURE__*/createPortal( /*#__PURE__*/_createElement(Root, {
    "data-testid": testid ? "Modal_" + testid : undefined
  }, /*#__PURE__*/_createElement(Mask, {
    visible: visible,
    style: maskStyleCombined
  }), /*#__PURE__*/_createElement(Wrap, {
    visible: visible,
    onMouseDown: onClickMask,
    style: wrapStyle
  }, /*#__PURE__*/_createElement(Content, {
    width: width,
    onMouseDown: stopPropagation,
    style: style,
    "data-testid": testid ? "Modal_content_" + testid : undefined
  }, !!title && /*#__PURE__*/_createElement(Header, null, /*#__PURE__*/_createElement(Title, null, title)), /*#__PURE__*/_createElement(Body, {
    style: bodyStyle
  }, children), footer !== null && /*#__PURE__*/_createElement(Footer, null, footer || /*#__PURE__*/_createElement(FooterWrap, null, /*#__PURE__*/_createElement(Button, _extends({
    shape: "round",
    onClick: handleClose,
    testid: testid ? testid + "_close" : undefined
  }, cancelButtonProps || {}), cancelText), /*#__PURE__*/_createElement(ConfirmButton, _extends({
    shape: "round",
    type: "primary",
    icon: finalConfirming ? _ref : undefined,
    onClick: handleConfirm,
    testid: testid ? testid + "_confirm" : undefined
  }, okButtonProps || {}), okText))), !!closable && /*#__PURE__*/_createElement(CloseButton, {
    onClick: handleClose
  }, /*#__PURE__*/_createElement(ClosedNormal, {
    className: "close-icon",
    testid: testid ? testid + "_CloseButton" : undefined
  }))))), oContainer) : null;
}, {
  confirm: function confirm(options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        content = _options.content,
        onOk = _options.onOk,
        onCancel = _options.onCancel,
        props = _objectWithoutPropertiesLoose(_options, ["content", "onOk", "onCancel"]);

    var oConfirmContainer;
    oConfirmContainer = document.createElement('div');
    document.body.appendChild(oConfirmContainer);

    var destroy = function destroy() {
      ReactDOM.unmountComponentAtNode(oConfirmContainer);
      document.body.removeChild(oConfirmContainer);
      oConfirmContainer = undefined;
    };

    var handleOk = function handleOk() {
      var returnedValue;

      if (onOk) {
        returnedValue = onOk();
      }

      if (returnedValue && returnedValue instanceof Promise) {
        return returnedValue.then(function () {
          return destroy();
        });
      } else {
        destroy();
      }
    };

    var handleCancel = function handleCancel() {
      if (onCancel) {
        onCancel();
      }

      destroy();
    };

    ReactDOM.render( /*#__PURE__*/_createElement(Modal, _extends({}, props, {
      visible: true,
      title: options.title,
      width: options.width || 420,
      onOk: handleOk,
      onCancel: handleCancel
    }), content || ''), oConfirmContainer);
    return {
      destroy: destroy
    };
  },

  /**
   * 辅助构造不同类型的信息提示模态框（只提供一个按钮用于关闭）
   * 接受不同的 icon 元素作为参数，返回用于构造信息提示模态框的方法
   */
  // eslint-disable-next-line max-lines-per-function
  makeMessageModal: function makeMessageModal(iconNode) {
    return function (options) {
      if (options === void 0) {
        options = {};
      }

      var _options2 = options,
          content = _options2.content,
          onOk = _options2.onOk,
          title = _options2.title,
          okText = _options2.okText,
          okButtonProps = _options2.okButtonProps,
          _options2$showLoading = _options2.showLoadingIcon,
          showLoadingIcon = _options2$showLoading === void 0 ? true : _options2$showLoading,
          props = _objectWithoutPropertiesLoose(_options2, ["content", "onOk", "title", "okText", "okButtonProps", "showLoadingIcon"]);

      var oMesContainer;

      if (!oMesContainer) {
        oMesContainer = document.createElement('div');
        document.body.appendChild(oMesContainer);
      }

      var destroy = function destroy() {
        ReactDOM.unmountComponentAtNode(oMesContainer);
        document.body.removeChild(oMesContainer);
        oMesContainer = undefined;
      };

      var handleOk = function handleOk() {
        var returnedValue;

        if (onOk) {
          returnedValue = onOk();
        }

        if (returnedValue && returnedValue instanceof Promise) {
          if (showLoadingIcon) render({
            visible: true,
            loading: true
          });
          return returnedValue.then(function () {
            return destroy();
          });
        } else {
          destroy();
        }
      };

      var handleCancel = function handleCancel() {
        render({
          visible: false
        });
        destroy();
      };

      var _ref3 = /*#__PURE__*/_createElement(TitleIconTextWrap, null, iconNode, /*#__PURE__*/_createElement(TitleTextWrap, null, title));

      function render(_ref2) {
        var visible = _ref2.visible,
            loading = _ref2.loading;
        var titleNode = _ref3;

        var el = /*#__PURE__*/_createElement(Modal, _extends({}, props, {
          visible: visible,
          title: titleNode,
          width: options.width || 420,
          onCancel: handleCancel,
          bodyStyle: {
            paddingLeft: '34px'
          },
          footer: /*#__PURE__*/_createElement(FooterWrap, null, /*#__PURE__*/_createElement(TranslateProvider, null, function (t) {
            return /*#__PURE__*/_createElement(ConfirmButton, _extends({
              shape: "round",
              type: "primary",
              icon: loading ? _ref4 : undefined,
              onClick: handleOk,
              testid: options.testid ? options.testid + "_ConfirmButton" : undefined
            }, okButtonProps || {}), okText || t('we_ui_ok_text'));
          }))
        }), content || '');

        ReactDOM.render(el, oMesContainer);
      }

      render({
        visible: true,
        loading: false
      });
      return {
        destroy: destroy
      };
    };
  },
  info: function info(options) {
    if (options === void 0) {
      options = {};
    }

    var infoModal = this.makeMessageModal(_ref5);
    return infoModal(options);
  },
  success: function success(options) {
    if (options === void 0) {
      options = {};
    }

    var successModal = this.makeMessageModal(_ref6);
    return successModal(options);
  },
  error: function error(options) {
    if (options === void 0) {
      options = {};
    }

    var errorModal = this.makeMessageModal(_ref7);
    return errorModal(options);
  },
  warning: function warning(options) {
    if (options === void 0) {
      options = {};
    }

    var warningModal = this.makeMessageModal(_ref8);
    return warningModal(options);
  }
});
Modal.defaultProps = {
  width: 520,
  closable: true,
  keyboard: true
};