import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Portal } from "../../utils";
import { LinkEditor } from "./LinkEditor";
import { LinkToolbar } from "./LinkToolbar";
export var LinkPortal = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(LinkPortal, _React$PureComponent);

  function LinkPortal(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;
    _this.portalRef = /*#__PURE__*/React.createRef();

    _this.handleLinkMouseDown = function () {
      _this.onVisibleChange(true);
    };

    _this.handleSave = function (text, href) {
      var onSave = _this.props.onSave;
      if (onSave) onSave(text, href);

      _this.setState({
        editMode: false
      });

      _this.handleHide();
    };

    _this.handleRemove = function () {
      var onRemove = _this.props.onRemove;
      if (onRemove) onRemove();

      _this.setState({
        editMode: true
      });

      _this.handleHide();
    };

    _this.handleHide = function () {
      _this.onVisibleChange(false);
    };

    _this.getOverlay = function () {
      var editMode = _this.state.editMode; // text/href 从 props 读了，已经不算非受控了

      var _this$props = _this.props,
          text = _this$props.text,
          _this$props$href = _this$props.href,
          href = _this$props$href === void 0 ? '' : _this$props$href,
          locale = _this$props.locale,
          onCopied = _this$props.onCopied,
          onOpenLink = _this$props.onOpenLink,
          readOnly = _this$props.readOnly;
      var portalStyle = {
        width: 'fit-content',
        position: 'absolute'
      };
      return editMode ? /*#__PURE__*/_createElement("div", {
        ref: _this.portalRef,
        style: portalStyle
      }, /*#__PURE__*/_createElement(LinkEditor, {
        defaultText: text,
        defaultHref: href,
        onSave: _this.handleSave,
        onRemove: _this.handleRemove,
        locale: locale,
        onHide: _this.handleHide
      })) : /*#__PURE__*/_createElement("div", {
        ref: _this.portalRef,
        style: portalStyle
      }, /*#__PURE__*/_createElement(LinkToolbar, {
        href: href,
        onEdit: function onEdit() {
          return _this.setState({
            editMode: true
          });
        },
        onRemove: _this.handleRemove,
        onHide: _this.handleHide,
        onOpenLink: onOpenLink,
        onCopied: onCopied,
        locale: locale,
        readOnly: readOnly
      }));
    };

    var innerVisible = props.visible || props.defaultVisible || false;

    var _editMode = props.defaultEditMode || false;

    if (props.defaultEditMode === undefined && innerVisible && props.href.trim().length === 0) {
      _editMode = true;
    }

    _this.state = {
      editMode: _editMode,
      innerVisible: innerVisible
    };
    return _this;
  }

  var _proto = LinkPortal.prototype;

  _proto.onVisibleChange = function onVisibleChange(v) {
    var _this$props2 = this.props,
        visible = _this$props2.visible,
        onVisibleChange = _this$props2.onVisibleChange;

    if (onVisibleChange) {
      onVisibleChange(v);
    }

    if (visible === undefined) {
      this.setState({
        innerVisible: v
      });
    }
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        children = _this$props3.children,
        triggerRect = _this$props3.triggerRect,
        visible = _this$props3.visible,
        getContainer = _this$props3.getContainer;
    var innerVisible = this.state.innerVisible;
    var activeVisible = visible || innerVisible;
    return /*#__PURE__*/_createElement(Portal, {
      "data-type": "LinkPortal",
      className: "demo-link-portal",
      visible: activeVisible,
      overlay: this.getOverlay(),
      portalMatchTrigger: false,
      offset: [0, 6],
      triggerRect: triggerRect,
      getContainer: getContainer
    }, children && /*#__PURE__*/React.cloneElement(children, {
      onMouseDown: this.handleLinkMouseDown
    }));
  };

  return LinkPortal;
}(React.PureComponent);
LinkPortal.defaultProps = {
  visible: true,
  readOnly: false
};