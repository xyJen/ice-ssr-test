import React, { useState, useCallback, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Container, Box } from "./styled";
import { useTranslate } from "../../../locale/locales";
import { InputComponent } from "../input";
export var Replace = function Replace(props) {
  var visible = props.visible,
      disabled = props.disabled,
      className = props.className,
      onExpand = props.onExpand,
      replace = props.replace,
      replaceAll = props.replaceAll,
      btnMode = props.btnMode;

  var _useState = useState(''),
      text = _useState[0],
      setText = _useState[1];

  var _useState2 = useState(true),
      isMiniMode = _useState2[0],
      setMode = _useState2[1]; // 国际化


  var t = useTranslate(props.local); // 是否显示

  var style = {
    display: visible ? 'flex' : 'none'
  };
  useEffect(function () {
    btnMode !== undefined && setMode(!!btnMode);
  }, [btnMode]);
  /**
   * text change处理
   */

  var hansleChange = useCallback(function (value) {
    setText(value);
  }, []);
  /**
   * mode切换
   */

  var handleMode = useCallback(function (e) {
    if (!disabled) {
      setMode(false);
      onExpand && onExpand();
    }

    e.preventDefault();
  }, [disabled, onExpand]);
  /**
   * 替换
   */

  var handleReplace = useCallback(function (e) {
    replace(text);
    e.preventDefault();
  }, [replace, text]);
  /**
   * 替换全部
   */

  var handleReplaceAll = useCallback(function () {
    setMode(true);
    replaceAll(text);
  }, [replaceAll, text]);
  return /*#__PURE__*/_createElement("div", {
    style: style,
    className: className
  }, isMiniMode ? /*#__PURE__*/_createElement(Box, {
    className: "round " + (disabled ? 'disable' : ''),
    onMouseDown: handleMode
  }, t('we_ui_find_and_replace_replace')) : /*#__PURE__*/_createElement(Container, null, /*#__PURE__*/_createElement(InputComponent, {
    prefix: false,
    text: text,
    onChange: hansleChange,
    placeholder: t('we_ui_find_and_replace_replace_description')
  }), /*#__PURE__*/_createElement(Box, {
    onMouseDown: handleReplace
  }, t('we_ui_find_and_replace_replace')), /*#__PURE__*/_createElement(Box, {
    onClick: handleReplaceAll
  }, t('we_ui_find_and_replace_replace_all'))));
};