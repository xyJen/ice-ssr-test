/* eslint-disable max-lines-per-function */
import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import useControlledValue from "../../hooks/useControlledValue";
import { Select, SelectOption } from "../select";
import { OptionWrap, TriggerWrap } from "./styled";
import { useFontFamily } from "./hooks";

var FontFamilySelect = function FontFamilySelect(props) {
  var style = props.style,
      locale = props.locale,
      onChange = props.onChange,
      zIndex = props.zIndex,
      bordered = props.bordered,
      className = props.className,
      disabled = props.disabled,
      titles = props.titles,
      title = props.title;

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var _useFontFamily = useFontFamily(locale),
      options = _useFontFamily[0],
      installedRecord = _useFontFamily[1],
      t = _useFontFamily[2]; // 该组件的trigger区域只显示Icon


  var renderTrigger = useCallback(function (align) {
    var index = options.findIndex(function (option) {
      return option.value === align;
    });
    var currentOption = options[index];
    var useDefault = props.defaultValue ? options[0] : undefined;
    return /*#__PURE__*/_createElement(TriggerWrap, null, (currentOption == null ? void 0 : currentOption.title) || (useDefault == null ? void 0 : useDefault.title) || align);
  }, [options]);
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [onChange, setValue]);
  return /*#__PURE__*/_createElement(Select, {
    value: value,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    optionWrapperStyle: {
      minWidth: 200
    },
    style: style,
    zIndex: zIndex,
    bordered: bordered,
    className: className,
    disabled: disabled,
    testid: "FontFamilySelect",
    title: title
  }, options.map(function (option) {
    return /*#__PURE__*/_createElement(SelectOption, {
      value: option.value,
      key: option.value,
      disabled: !installedRecord[option.value],
      disabledTip: t('we_ui_font_family_UninstallFonts'),
      testid: option.value,
      title: titles[option.value]
    }, /*#__PURE__*/_createElement(OptionWrap, {
      disabled: !installedRecord[option.value]
    }, /*#__PURE__*/_createElement("span", {
      style: {
        fontFamily: option.value,
        color: 'inherit'
      }
    }, option.title)));
  }));
};

FontFamilySelect.defaultProps = {
  titles: {}
};
export default FontFamilySelect;