import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { Component } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import { Dropdown } from "../dropdown";

var AbsolutePopup = /*#__PURE__*/function (_Component) {
  _inheritsLoose(AbsolutePopup, _Component);

  function AbsolutePopup() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = _extends({}, _this.props);

    _this.handleVisibleChange = function (e) {
      _this.handleChangeState({
        visible: e
      });
    };

    return _this;
  }

  var _proto = AbsolutePopup.prototype;

  /**
   * 暴露给外面的 ref 进行状态修改
   *
   * @param {Partial<IAbsolutePopupProps>} state
   */
  _proto.handleChangeState = function handleChangeState(state) {
    var onVisibleChange = 'onVisibleChange' in state ? state.onVisibleChange : this.state.onVisibleChange;

    if ('visible' in state && state.visible !== this.state.visible && onVisibleChange) {
      onVisibleChange(!!state.visible);
    }

    this.setState(state);
  }
  /**
   * Dropdown 显示/隐藏处理
   *
   * @param {boolean} e
   * @return {void}
   */
  ;

  _proto.render = function render() {
    var _this$state = this.state,
        overlay = _this$state.overlay,
        left = _this$state.left,
        top = _this$state.top,
        visible = _this$state.visible,
        zIndex = _this$state.zIndex,
        offsetY = _this$state.offsetY,
        offsetX = _this$state.offsetX,
        overlayStyle = _this$state.overlayStyle,
        restProps = _objectWithoutPropertiesLoose(_this$state, ["overlay", "left", "top", "visible", "zIndex", "offsetY", "offsetX", "overlayStyle"]);

    return /*#__PURE__*/_createElement(Dropdown, {
      key: "" + left + top,
      visible: visible,
      overlay: /*#__PURE__*/React.cloneElement(overlay, restProps),
      zIndex: zIndex,
      placement: "bottomLeft",
      offsetX: offsetX,
      offsetY: offsetY,
      overlayStyle: overlayStyle,
      onVisibleChange: this.handleVisibleChange,
      pageX: left,
      pageY: top
    });
  };

  return AbsolutePopup;
}(Component);

AbsolutePopup.defaultProps = {
  visible: false,
  offsetX: 8,
  offsetY: 8,
  overlayStyle: {}
};

AbsolutePopup.create = function (props) {
  var popupRef = /*#__PURE__*/React.createRef(); // 容器节点初始化

  var container = document.createElement('div');
  container.setAttribute('style', 'position: absolute; left: 0; top: 0; width: 100%');
  var appended = false;
  /**
   * 插入容器节点
   *
   * @return {void}
   */

  function handleAppendContainer(visible) {
    if (visible && !appended) {
      appended = true;
      document.body.appendChild(container);
    }
  }

  handleAppendContainer(!!props.visible);
  ReactDOM.render( /*#__PURE__*/_createElement(AbsolutePopup, _extends({}, props, {
    ref: popupRef
  })), container);
  return {
    /**
     * 更新
     *
     * @param {Pick<P, keyof P>}
     * @return {void}
     */
    update: function update(newState) {
      handleAppendContainer(!!newState.visible);

      if (popupRef.current) {
        popupRef.current.handleChangeState(newState);
      }
    },

    /**
     * 隐藏
     *
     * @return {void}
     */
    hide: function hide() {
      this.update({
        visible: false
      });
    },

    /**
     * 销毁
     *
     * @return {void}
     */
    destory: function destory() {
      ReactDOM.unmountComponentAtNode(container);
      document.body.removeChild(container);
      appended = false;
    }
  };
};

export { AbsolutePopup };