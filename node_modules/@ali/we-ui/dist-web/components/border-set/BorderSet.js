import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { FillColorPicker } from "../color-picker";
import { SplitButton } from "../button";
import { BorderTopNormal, BorderNoneNormal, BorderAllNormal, BorderBottomNormal, BorderHorizontalNormal, BorderInnerNormal, BorderLeftNormal, BorderOuterNormal, BorderRightNormal, BorderVerticalNormal } from "../icons";
import { NumberInput } from "../number";
import { CommonLineSelect } from "../lines";
import { BorderTypePanel, BorderType } from "./BorderTypePanel";
import { TranslateComp } from "../../locale/locales";
import { BorderSetWrapper, LineTypeWrapper, ContentWrapper, FooterWrapper, IconWrapper, TextSpan, ThicknessInputWrapper, FillColorWrapper, LineSelectWrapper, LabelWrapper, FooterInner } from "./styled";
import { classnames, isWhite } from "../../utils";
var DEFAULT_BORDER_COLOR = '#000000';
var ICON_DEFAULT_COLOR = 'rgba(17, 31, 44, 0.72)';

var _ref = /*#__PURE__*/_createElement(BorderOuterNormal, null);

var _ref2 = /*#__PURE__*/_createElement(BorderInnerNormal, null);

var _ref3 = /*#__PURE__*/_createElement(BorderAllNormal, null);

var _ref4 = /*#__PURE__*/_createElement(BorderLeftNormal, null);

var _ref5 = /*#__PURE__*/_createElement(BorderRightNormal, null);

var _ref6 = /*#__PURE__*/_createElement(BorderTopNormal, null);

var _ref7 = /*#__PURE__*/_createElement(BorderBottomNormal, null);

var _ref8 = /*#__PURE__*/_createElement(BorderNoneNormal, null);

var _ref9 = /*#__PURE__*/_createElement(BorderHorizontalNormal, null);

var _ref10 = /*#__PURE__*/_createElement(BorderVerticalNormal, null);

var _ref11 = /*#__PURE__*/_createElement(BorderNoneNormal, null);

export var BorderSet = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(BorderSet, _React$Component);

  function BorderSet(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.handleClick = function (e) {
      // 阻止冒泡
      e.stopPropagation();
    };

    _this.handleVisibleChange = function (visible) {
      _this.setState({
        dropdownVisible: visible
      });
    };

    _this.handleClickLeft = function () {
      var onClick = _this.props.onClick;

      if (onClick) {
        var _this$state = _this.state,
            innerColor = _this$state.innerColor,
            innerLineType = _this$state.innerLineType,
            innerBorderType = _this$state.innerBorderType;
        var data = {
          borderColor: innerColor,
          borderType: innerBorderType,
          borderStyle: innerLineType
        };
        onClick(data);
      }
    };

    _this.handlePropertyChange = function (borderProps) {
      var onChange = _this.props.onChange;

      if (onChange) {
        var _this$state2 = _this.state,
            innerColor = _this$state2.innerColor,
            innerLineType = _this$state2.innerLineType,
            innerBorderType = _this$state2.innerBorderType;
        var data = {
          borderColor: innerColor,
          borderType: innerBorderType,
          borderStyle: innerLineType
        };

        var _allProps = _extends({}, data, borderProps);

        onChange(_allProps, borderProps);
      }
    };

    _this.handleColorChange = function (color) {
      _this.setState({
        innerColor: color
      });

      _this.handlePropertyChange({
        borderColor: color
      });

      _this.setState({
        dropdownVisible: true
      });
    };

    _this.handleLineChange = function (type) {
      _this.setState({
        innerLineType: type
      });

      _this.handlePropertyChange({
        borderStyle: type
      });

      _this.setState({
        dropdownVisible: true
      });
    };

    _this.handleBorderChange = function (type) {
      _this.setState({
        innerBorderType: type
      });

      _this.handlePropertyChange({
        borderType: type
      });
    };

    _this.handleColorPickerVisible = function (visible) {
      _this.setState({
        colorPickerVisible: visible
      });
    };

    _this.handleLineSelectVisible = function (e) {
      _this.setState({
        lineSelectVisible: e
      });
    };

    _this.handleBorderNoneClick = function () {
      return _this.handleBorderChange(BorderType.none);
    };

    _this.getOverlayContent = function () {
      var _this$props = _this.props,
          borderIconSize = _this$props.borderIconSize,
          lineTypes = _this$props.borderStyles,
          color = _this$props.color,
          supportConfigSize = _this$props.supportConfigSize,
          locale = _this$props.locale;
      var _this$state3 = _this.state,
          currentColor = _this$state3.innerColor,
          innerBorderType = _this$state3.innerBorderType,
          innerLineType = _this$state3.innerLineType,
          colorPickerVisible = _this$state3.colorPickerVisible,
          lineSelectVisible = _this$state3.lineSelectVisible;
      var activeColor = color || currentColor;
      var inputStyle = {
        width: 63,
        height: 22
      };
      var iconStyle = {
        width: borderIconSize,
        height: borderIconSize,
        boxSizing: 'border-box',
        padding: '1px 1px'
      };
      return /*#__PURE__*/_createElement(BorderSetWrapper, {
        onMouseDown: _this.handleClick
      }, /*#__PURE__*/_createElement(ContentWrapper, null, /*#__PURE__*/_createElement(BorderTypePanel, {
        borderType: innerBorderType,
        borderIconSize: borderIconSize,
        onBorderTypeChange: _this.handleBorderChange,
        borderSelectedColor: activeColor
      }), /*#__PURE__*/_createElement(LineTypeWrapper, null, /*#__PURE__*/_createElement(FillColorWrapper, null, /*#__PURE__*/_createElement(LabelWrapper, null, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_border_set_color'
      })), /*#__PURE__*/_createElement(FillColorPicker, {
        active: colorPickerVisible,
        onActiveChange: _this.handleColorPickerVisible,
        color: activeColor,
        automaticColor: DEFAULT_BORDER_COLOR,
        onColorPicker: _this.handleColorChange,
        size: "small",
        locale: locale
      })), /*#__PURE__*/_createElement(LineSelectWrapper, null, /*#__PURE__*/_createElement(LabelWrapper, null, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_border_set_line_type'
      })), /*#__PURE__*/_createElement(CommonLineSelect, {
        lineTypeArray: lineTypes,
        length: 80,
        style: inputStyle,
        lineType: innerLineType // 线型颜色不需要跟随变化
        ,
        color: "#000000",
        onLineTypeChange: _this.handleLineChange,
        visible: lineSelectVisible,
        onVisibleChange: _this.handleLineSelectVisible
      })), !supportConfigSize ? null : /*#__PURE__*/_createElement(ThicknessInputWrapper, null, /*#__PURE__*/_createElement(LabelWrapper, null, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_border_set_line_thickness'
      })), /*#__PURE__*/_createElement(NumberInput, {
        defaultValue: 1,
        min: 1,
        max: 6,
        step: 1,
        style: inputStyle
      })))), /*#__PURE__*/_createElement(FooterWrapper, null, /*#__PURE__*/_createElement(FooterInner, {
        className: classnames({
          active: innerBorderType === BorderType.none
        }),
        onClick: _this.handleBorderNoneClick
      }, /*#__PURE__*/_createElement(IconWrapper, {
        style: {
          color: ICON_DEFAULT_COLOR,
          backgroundColor: 'transparent'
        }
      }, /*#__PURE__*/_createElement(BorderNoneNormal, {
        style: iconStyle
      })), /*#__PURE__*/_createElement(TextSpan, null, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_ui_border_set_border_none'
      })))));
    };

    _this.renderShowIcon = function () {
      var innerBorderType = _this.state.innerBorderType;

      switch (innerBorderType) {
        case 'outer':
          return _ref;

        case 'inner':
          return _ref2;

        case 'all':
          return _ref3;

        case 'left':
          return _ref4;

        case 'right':
          return _ref5;

        case 'top':
          return _ref6;

        case 'bottom':
          return _ref7;

        case 'none':
          return _ref8;

        case 'horizon':
          return _ref9;

        case 'vertical':
          return _ref10;

        default:
          return _ref11;
      }
    };

    var _innerColor = props.color ? props.color : DEFAULT_BORDER_COLOR;

    var _innerBorderType = props.borderType || BorderType.all;

    var _innerLineType = props.defaultBorderStyle || 'single';

    _this.state = {
      innerColor: _innerColor,
      innerBorderType: _innerBorderType,
      innerLineType: _innerLineType,
      dropdownVisible: false,
      colorPickerVisible: false,
      lineSelectVisible: false
    };
    return _this;
  }

  var _proto = BorderSet.prototype;

  _proto.render = function render() {
    var _this$state4 = this.state,
        dropdownVisible = _this$state4.dropdownVisible,
        colorPickerVisible = _this$state4.colorPickerVisible,
        lineSelectVisible = _this$state4.lineSelectVisible,
        color = _this$state4.innerColor;
    var _this$props2 = this.props,
        className = _this$props2.className,
        style = _this$props2.style,
        disabled = _this$props2.disabled,
        title = _this$props2.title;
    var overlayVisible = dropdownVisible || colorPickerVisible || lineSelectVisible;
    var pathColors = [// 当选中颜色为白色时，选中边框的外边缘为黑色，否则选中边框外边缘与内部颜色一致
    !color || isWhite(color) ? ICON_DEFAULT_COLOR : color, color || ICON_DEFAULT_COLOR, ICON_DEFAULT_COLOR];
    return /*#__PURE__*/_createElement(SplitButton, {
      overlay: this.getOverlayContent(),
      active: overlayVisible,
      onClickLeft: this.handleClickLeft,
      onActiveChange: this.handleVisibleChange,
      className: className,
      disabled: disabled,
      style: style,
      testid: "BorderSet",
      title: title
    }, /*#__PURE__*/React.cloneElement(this.renderShowIcon(), {
      pathColors: pathColors
    }));
  };

  return BorderSet;
}(React.Component);
BorderSet.defaultProps = {
  supportConfigSize: true
};