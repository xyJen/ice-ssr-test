import React, { useCallback, useContext } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { CheckboxWrap, CheckboxContent, CheckboxInner, CheckboxText } from "./styled";
import useControlledValue from "../../hooks/useControlledValue";
import { KEY_CODES } from "../../utils/consts";
import { classnames } from "../../utils";
import { CheckboxContext } from "./CheckboxContext";
var Checkbox = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      onChange = props.onChange,
      value = props.value,
      label = props.label,
      _props$defaultChecked = props.defaultChecked,
      defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked; // eslint-disable-next-line prefer-const

  var _useControlledValue = useControlledValue(props.checked, defaultChecked),
      checked = _useControlledValue[0],
      setChecked = _useControlledValue[1];

  var provider = useContext(CheckboxContext); // 如果有Group，直接根据 Group的选中数组判断

  if (provider && provider.checkedValues) {
    checked = provider.checkedValues.indexOf(value) !== -1;
  } // disabeld状态，如果有Group包住，且Group的disabed为true，则disabled为true


  var disabled = provider && provider.disabled ? true : props.disabled; // Group 修改参数函数

  var onToggleValue = provider && provider.onToggleValue;
  /**
   * 修改选中状态
   *
   * @param {React.ChangeEvent<HTMLInputElement>} e
   * @return {void}
   */

  var handleChange = useCallback(function (e) {
    if (onToggleValue && value) {
      onToggleValue({
        checked: e.target.checked,
        value: value
      });
    } else {
      if (onChange) {
        onChange(e);
      }

      setChecked(e.target.checked);
    }
  }, [onChange, onToggleValue, value, setChecked]);
  /**
   * Enter键切换选中状态
   *
   * @param {React.KeyboardEvent<HTMLInputElement>} e
   * @return {void}
   */

  var handleKeyDown = useCallback(function (e) {
    if (e.which === KEY_CODES.ENTER) {
      handleChange({
        target: {
          checked: !checked
        }
      });
    }
  }, [checked, handleChange]);
  var labelNode = label || children;
  return /*#__PURE__*/_createElement(CheckboxWrap, {
    checked: checked,
    disabled: disabled,
    "data-testid": provider && provider.testid ? "CheckboxGroup-" + provider.testid : undefined
  }, /*#__PURE__*/_createElement(CheckboxContent, {
    disabled: disabled,
    checked: checked
  }, /*#__PURE__*/_createElement("input", {
    ref: ref,
    type: "checkbox",
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    disabled: disabled,
    checked: checked
  }), /*#__PURE__*/_createElement(CheckboxInner, {
    className: classnames({
      disabled: disabled
    })
  })), labelNode && /*#__PURE__*/_createElement(CheckboxText, null, labelNode));
}));
Checkbox.displayName = 'Checkbox';
export { Checkbox };