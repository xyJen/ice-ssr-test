import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import warning from 'warning';
import { Tabs, TabPane } from "../tabs";
import { RibbonWrapper, HeaderWrapper, LeftPanelWrapper, RightPanelWrapper } from "./styled";
export var Ribbon = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(Ribbon, _React$PureComponent);

  function Ribbon(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;

    _this.handleChange = function (nextActiveKey) {
      var _this$props = _this.props,
          activeKey = _this$props.activeKey,
          onChange = _this$props.onChange; // 非受控模式

      if (!activeKey) {
        _this.setState({
          innerActiveKey: nextActiveKey
        });
      }

      if (onChange) {
        onChange(nextActiveKey);
      }
    };

    var innerActiveKey;

    if (props.activeKey) {
      innerActiveKey = props.activeKey;
    } else if (props.defaultActiveKey) {
      innerActiveKey = props.defaultActiveKey;
    } else {
      var ribbonItems = props.ribbonItems;

      if (!ribbonItems || !ribbonItems.length) {
        warning('ribbonItems cannot be empty!');
        innerActiveKey = '';
      } else {
        innerActiveKey = ribbonItems[0].key;
      }
    }

    _this.state = {
      innerActiveKey: innerActiveKey
    };
    return _this;
  }

  var _proto = Ribbon.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        leftPanel = _this$props2.leftPanel,
        rightPanel = _this$props2.rightPanel,
        ribbonItems = _this$props2.ribbonItems,
        activeKey = _this$props2.activeKey;
    var innerActiveKey = this.state.innerActiveKey;
    var tabActiveKey = activeKey || innerActiveKey;
    return /*#__PURE__*/_createElement(RibbonWrapper, null, /*#__PURE__*/_createElement(HeaderWrapper, null, leftPanel ? /*#__PURE__*/_createElement(LeftPanelWrapper, null, leftPanel) : null, /*#__PURE__*/_createElement(Tabs, {
      activeKey: tabActiveKey,
      type: "card",
      onChange: this.handleChange,
      tabBarStyle: {
        marginBottom: 0
      }
    }, ribbonItems.map(function (item) {
      return /*#__PURE__*/_createElement(TabPane, {
        tab: item.name,
        key: item.key
      });
    })), rightPanel ? /*#__PURE__*/_createElement(RightPanelWrapper, null, rightPanel) : null), /*#__PURE__*/_createElement(Tabs, {
      activeKey: activeKey,
      hasTabBar: false,
      animated: false
    }, ribbonItems.map(function (item) {
      return /*#__PURE__*/_createElement(TabPane, {
        key: item.key
      }, item.toolbar);
    })));
  };

  return Ribbon;
}(React.PureComponent);