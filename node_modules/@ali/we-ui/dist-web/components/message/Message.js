/* eslint-disable arrow-body-style */

/* eslint-disable no-plusplus */

/* eslint-disable @typescript-eslint/explicit-function-return-type */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';
import { RoundcloseThickNormal, ReportFillNormal, LoadingNormal, CheckboxFillNormal } from "../icons";
import { classnames } from "../../utils";
import { ContainerRoot, MessageWrap, MessageContent, Container, MessageBox, MessageFlex } from "./styled";

var _ref = /*#__PURE__*/_createElement(CheckboxFillNormal, {
  className: "icon success-icon"
});

var _ref2 = /*#__PURE__*/_createElement(RoundcloseThickNormal, {
  className: "icon error-icon"
});

var _ref3 = /*#__PURE__*/_createElement(ReportFillNormal, {
  className: "icon info-icon"
});

var _ref4 = /*#__PURE__*/_createElement(ReportFillNormal, {
  className: "icon warning-icon"
});

var _ref5 = /*#__PURE__*/_createElement(LoadingNormal, {
  spin: true,
  className: "icon loading-icon"
});

export var Message = function Message(props) {
  var messages = props.messages;
  var IconNodes = {
    success: _ref,
    error: _ref2,
    info: _ref3,
    warning: _ref4,
    loading: _ref5
  };
  return /*#__PURE__*/_createElement(ContainerRoot, null, /*#__PURE__*/_createElement(Container, null, /*#__PURE__*/_createElement(CSSTransitionGroup, {
    transitionName: "message",
    transitionEnterTimeout: 240,
    transitionLeaveTimeout: 240
  }, messages.map(function (msg) {
    var key = msg.key,
        type = msg.type,
        content = msg.content,
        _msg$animated = msg.animated,
        animated = _msg$animated === void 0 ? true : _msg$animated;
    return /*#__PURE__*/_createElement(MessageBox, {
      key: key
    }, /*#__PURE__*/_createElement(MessageWrap, {
      className: classnames({
        animated: animated
      })
    }, /*#__PURE__*/_createElement(MessageFlex, null, IconNodes[type], /*#__PURE__*/_createElement(MessageContent, null, content))));
  }))));
};
export var message = function () {
  var uuid = 0;
  var messages = [];
  var handleUpdate = null;

  function init() {
    if (handleUpdate) {
      return;
    }

    var oDiv = document.createElement('div');
    oDiv.style.position = 'absolute';
    oDiv.style.width = '100%';
    oDiv.style.top = '0px';
    oDiv.style.left = '0px';
    document.body.appendChild(oDiv);

    handleUpdate = function handleUpdate(msgs) {
      ReactDOM.render( /*#__PURE__*/_createElement(Message, {
        messages: msgs
      }), oDiv);
    };
  }

  var getConfig = function getConfig(config, duration) {
    var newConfig = typeof config === 'string' ? {
      content: config,
      duration: typeof duration !== 'undefined' ? duration : 3
    } : config;
    newConfig.key = newConfig.key || "msgid-" + ++uuid;

    if (uuid > 10000000) {
      uuid = 0;
    }

    return newConfig;
  };

  return {
    open: function open(config) {
      var _this = this;

      init();
      messages = [].concat(messages, [config]);
      handleUpdate(messages);

      if (config.duration > 0) {
        setTimeout(function () {
          var key = config.key,
              onClose = config.onClose;

          _this.close(key);

          onClose && onClose();
        }, config.duration * 1000);
      }
    },
    close: function close(key) {
      if (key) {
        var index = messages.findIndex(function (m) {
          return m.key === key;
        });

        if (index !== -1) {
          messages = [].concat(messages);
          messages.splice(index, 1);
        }
      } else {
        messages = [];
      }

      if (handleUpdate) {
        handleUpdate(messages);
      }
    },
    success: function success(config, duration) {
      config = getConfig(config, duration);
      config.type = 'success';
      this.open(config);
    },
    error: function error(config, duration) {
      config = getConfig(config, duration);
      config.type = 'error';
      this.open(config);
    },
    warning: function warning(config, duration) {
      config = getConfig(config, duration);
      config.type = 'warning';
      this.open(config);
    },
    loading: function loading(config, duration) {
      config = getConfig(config, duration);
      config.type = 'loading';
      this.open(config);
    },
    info: function info(config, duration) {
      config = getConfig(config, duration);
      config.type = 'info';
      this.open(config);
    }
  };
}();