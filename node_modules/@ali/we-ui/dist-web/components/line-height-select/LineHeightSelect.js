import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import useControlledValue from "../../hooks/useControlledValue";
import { LineheightNormal } from "../icons";
import { Select, SelectOption, SelectOptionGroup } from "../select";
import { OptionWrap, TriggerWrap } from "./styled";
import { useTranslate } from "../../locale/locales";
export var LINE_HEIGHT_DEFAULT_VALUES = [1, 1.15, 1.5, 2, 2.5, 3];

var _ref = /*#__PURE__*/_createElement(TriggerWrap, null, /*#__PURE__*/_createElement(LineheightNormal, null));

var LineHeightSelect = function LineHeightSelect(props) {
  var style = props.style,
      zIndex = props.zIndex,
      lineHeightValues = props.lineHeightValues,
      className = props.className,
      disabled = props.disabled,
      onChange = props.onChange,
      onCustomize = props.onCustomize,
      title = props.title,
      titles = props.titles,
      locale = props.locale;

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var t = useTranslate(locale);
  var handleChange = useCallback(function (e) {
    if (e !== -1) {
      if (onChange) {
        onChange(e);
      }

      setValue(e);
    } else if (onCustomize) {
      onCustomize();
    }
  }, [onChange, setValue, onCustomize]); // 该组件的trigger区域只显示Icon

  var renderTrigger = useCallback(function () {
    return _ref;
  }, []);
  var renderOptions = useMemo(function () {
    return (lineHeightValues || LINE_HEIGHT_DEFAULT_VALUES).map(function (lineHeight) {
      return /*#__PURE__*/_createElement(SelectOption, {
        value: lineHeight,
        key: "" + lineHeight,
        testid: "" + lineHeight,
        title: titles[lineHeight]
      }, /*#__PURE__*/_createElement(OptionWrap, null, /*#__PURE__*/_createElement("span", null, lineHeight)));
    });
  }, [lineHeightValues, titles]);
  return /*#__PURE__*/_createElement(Select, {
    value: value,
    onChange: handleChange,
    style: style,
    renderTrigger: renderTrigger,
    zIndex: zIndex,
    className: className,
    disabled: disabled,
    testid: "LineHeightSelect",
    title: title
  }, /*#__PURE__*/_createElement(SelectOptionGroup, null, renderOptions), typeof onCustomize === 'function' && /*#__PURE__*/_createElement(SelectOption, {
    value: -1,
    key: "selectLineHeight"
  }, /*#__PURE__*/_createElement(OptionWrap, {
    className: "pseudo-option"
  }, /*#__PURE__*/_createElement("span", null, " ", t('we_ui_line_height_select_customized_line_height'), " "))));
};

LineHeightSelect.defaultProps = {
  defaultValue: 1,
  titles: {}
};
export default LineHeightSelect;