import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import dayjs from 'dayjs';
import useControlledValue from "../../hooks/useControlledValue";
import { useTranslate, useDayjsLocale } from "../../locale/locales";
import { classnames } from "../../utils";
import { Control } from "./Control";
import { MonthPanelWrap, MonthPanelBody, MonthPanelItem, ControlWrap, PanelControlWrap } from "./styled";

var MonthPanel = function MonthPanel(props) {
  var onChange = props.onChange,
      control = props.control,
      onChangeYear = props.onChangeYear,
      locale = props.locale,
      onClickControl = props.onClickControl,
      style = props.style,
      disabledDate = props.disabledDate,
      testid = props.testid; // 国际化

  var t = useTranslate(locale);
  var dayjsLocale = useDayjsLocale(locale); // 可传dayjs值进来，受控

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1]; // 可传当前显示年份，受控


  var _useControlledValue2 = useControlledValue(props.year, value.year()),
      year = _useControlledValue2[0],
      setYear = _useControlledValue2[1]; // 拿到语言包短月份数组


  var months = useMemo(function () {
    return dayjs().locale(dayjsLocale).localeData().monthsShort();
  }, [dayjsLocale]);
  var monthDates = useMemo(function () {
    return months.map(function (_, i) {
      return dayjs().year(year).month(i);
    });
  }, [year, months]);
  /**
   * 修改dayjs值
   *
   * @param {number} e
   * @return {void}
   */

  var handleChange = function handleChange(e) {
    var newValue = value.month(e).year(year);

    if (onChange) {
      onChange(newValue);
    }

    setValue(newValue);
  };
  /**
   * 按下左右按钮修改年份
   *
   * @param {number} e year
   * @return {void}
   */


  var handleChangeYear = function handleChangeYear(e) {
    if (onChangeYear) {
      onChangeYear(e);
    }

    setYear(e);
  }; // 控制条显示文案国际化


  var yearString = useMemo(function () {
    return dayjs().year(year).format(t('we_ui_date_year_format'));
  }, [year, t]);
  return /*#__PURE__*/_createElement(MonthPanelWrap, {
    style: style
  }, control !== false && /*#__PURE__*/_createElement(ControlWrap, null, /*#__PURE__*/_createElement(Control, {
    hasNext: false,
    hasPrev: false,
    onClickSuperNext: function onClickSuperNext() {
      return handleChangeYear(year + 1);
    },
    onClickSuperPrev: function onClickSuperPrev() {
      return handleChangeYear(year - 1);
    },
    testid: testid ? "MonthPanel-" + testid : undefined
  }, /*#__PURE__*/_createElement(PanelControlWrap, {
    className: classnames({
      clickable: !!onClickControl
    }),
    onClick: onClickControl
  }, yearString))), /*#__PURE__*/_createElement(MonthPanelBody, null, months.map(function (month, index) {
    var isDisabled = typeof disabledDate === 'function' ? disabledDate(monthDates[index], 'month') : false;
    return /*#__PURE__*/_createElement(MonthPanelItem, {
      key: month
    }, /*#__PURE__*/_createElement("span", {
      className: classnames({
        actived: year === value.year() && index === value.month(),
        isDisabled: isDisabled
      }),
      onClick: function onClick() {
        !isDisabled && handleChange(index);
      }
    }, month));
  })));
};

MonthPanel.defaultProps = {
  control: true,
  defaultValue: dayjs()
};
var MonthPanelMemo = /*#__PURE__*/React.memo(MonthPanel);
export { MonthPanelMemo as MonthPanel };