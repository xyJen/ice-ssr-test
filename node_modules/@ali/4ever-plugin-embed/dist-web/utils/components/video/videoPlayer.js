import React, { useRef, useEffect, useState, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { DownloadNormal, Tooltip } from '@ali/we-design';
import { sanitizeUrl } from '@ali/4ever-utils';
import { VideoWrapper, DownloadButton } from "./styled";

var _ref2 = /*#__PURE__*/_createElement(DownloadNormal, null);

function VideoPlayer(props) {
  var videoRef = useRef();
  var transformVideoURL = props.transformVideoURL,
      onMediaLoadSuccess = props.onMediaLoadSuccess,
      onMediaLoadError = props.onMediaLoadError,
      node = props.node,
      setTempPosterUrl = props.setTempPosterUrl,
      isSelected = props.isSelected,
      renderVideoMask = props.renderVideoMask,
      isMobile = props.isMobile,
      allowDownload = props.allowDownload,
      onDownload = props.onDownload,
      _props$locale = props.locale,
      locale = _props$locale === void 0 ? {} : _props$locale,
      allowFullscreen = props.allowFullscreen;
  var src = node.data.src;

  var _useState = useState(node.data.poster),
      poster = _useState[0],
      setPoster = _useState[1];

  var _useState2 = useState(transformVideoURL ? transformVideoURL(src) : src),
      renderSrc = _useState2[0],
      setRenderSrc = _useState2[1];

  var _useState3 = useState(false),
      canPlay = _useState3[0],
      setCanPlayState = _useState3[1];

  var _useState4 = useState(false),
      canDownload = _useState4[0],
      setCanDownloadState = _useState4[1];

  var _useState5 = useState({}),
      errorMessage = _useState5[0],
      setErrorMessage = _useState5[1];

  var setTrueSrc = useCallback(function (s) {
    if (transformVideoURL) {
      setRenderSrc(transformVideoURL(s));
      return;
    }

    setRenderSrc(s);
  }, [transformVideoURL]);
  useEffect(function () {
    setTrueSrc(src);

    if (setTempPosterUrl) {
      setTempPosterUrl(node.data).then(function (resPoster) {
        setPoster(resPoster);

        if (videoRef.current) {
          videoRef.current.load();
        }
      });
    }
  }, []); // allowDownload 是 boolean 值时，直接设置

  useEffect(function () {
    if (typeof allowDownload === 'boolean') {
      setCanDownloadState(allowDownload);
    }
  }, [allowDownload]); // allowDownload 是函数时，当 src 有变化时候，调用一次设置

  useEffect(function () {
    if (typeof allowDownload === 'function') {
      allowDownload(renderSrc).then(function (res) {
        setCanDownloadState(res);
      });
    }
  }, [allowDownload, renderSrc]);
  var handleMediaLoadSuccess = useCallback(function () {
    setCanPlayState(true);

    if (onMediaLoadSuccess) {
      onMediaLoadSuccess(renderSrc);
    }
  }, [onMediaLoadSuccess, renderSrc]);
  var handleMediaLoadError = useCallback(function (e) {
    onMediaLoadError(e);
    setErrorMessage({
      isError: true,
      errorSrc: renderSrc
    });
  }, [onMediaLoadError, renderSrc]);
  useEffect(function () {
    var currentVideoEle = videoRef.current;

    if (currentVideoEle) {
      currentVideoEle.addEventListener('canplay', handleMediaLoadSuccess);
    }

    return function () {
      setCanPlayState(false);

      if (currentVideoEle) {
        currentVideoEle.removeEventListener('canplay', handleMediaLoadSuccess);
      }
    };
  }, [handleMediaLoadSuccess]);
  var handleReload = useCallback(function () {
    setTrueSrc(src);

    if (videoRef.current) {
      videoRef.current.play();
    }
  }, [src, setTrueSrc]);
  var handleVideoClick = useCallback(function (e) {
    if (isMobile) {
      e.stopPropagation();
    }
  }, [isMobile]);

  var _ref = /*#__PURE__*/_createElement(DownloadButton, {
    onMouseDown: onDownload
  }, _ref2);

  var renderDownloadButton = useCallback(function () {
    if (!canDownload) return null;
    return /*#__PURE__*/_createElement(Tooltip, {
      placement: "bottom",
      title: locale.download
    }, _ref);
  }, [canDownload, onDownload, locale]);
  return /*#__PURE__*/_createElement(VideoWrapper, {
    isSelected: isSelected,
    isMobile: isMobile
  }, /*#__PURE__*/_createElement("video", {
    onClick: handleVideoClick,
    onMouseDown: handleVideoClick,
    controls: true,
    "data-type": "embed-video",
    "raw-controls": "true" // UC内核独有属性
    ,
    controlsList: allowFullscreen ? 'nodownload noremoteplayback' : 'nodownload nofullscreen noremoteplayback',
    ref: videoRef,
    poster: sanitizeUrl(poster),
    onError: handleMediaLoadError,
    disablePictureInPicture: true
  }, /*#__PURE__*/_createElement("source", {
    src: renderSrc,
    type: "video/mp4"
  })), renderVideoMask && renderVideoMask({
    node: node,
    canPlay: canPlay,
    reload: handleReload,
    errorMessage: errorMessage
  }), renderDownloadButton());
}

export default VideoPlayer;
//# sourceMappingURL=videoPlayer.js.map