{"version":3,"sources":["../../../../../../src/utils/components/common/embedFileCardWrapper/index.tsx"],"names":["React","useRef","useEffect","useHover","getIcon","EmbedFileCardWrapper","CardIconWrapper","EmbedCardWrapper","props","node","isSelected","isUploadFailed","children","onRef","enableBorderHighlight","type","data","wrapperRef","isHover","hoverHandlers","current","width","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;qBAC4B,a;AAA5B,SAASC,QAAT,QAAyB,sBAAzB;AAIA,SAASC,OAAT;AACA,SAASC,oBAAT,EAA+BC,eAA/B;AAWA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAwC;AAAA,MAC7CC,IAD6C,GACgCD,KADhC,CAC7CC,IAD6C;AAAA,MACvCC,UADuC,GACgCF,KADhC,CACvCE,UADuC;AAAA,MAC3BC,cAD2B,GACgCH,KADhC,CAC3BG,cAD2B;AAAA,MACXC,QADW,GACgCJ,KADhC,CACXI,QADW;AAAA,MACDC,KADC,GACgCL,KADhC,CACDK,KADC;AAAA,MACMC,qBADN,GACgCN,KADhC,CACMM,qBADN;AAAA,MAE7CC,IAF6C,GAEpCN,IAAI,CAACO,IAF+B,CAE7CD,IAF6C;AAGrD,MAAME,UAAU,GAAGhB,MAAM,CAAC,IAAD,CAAzB;;AAHqD,kBAIpBE,QAAQ,CAACW,qBAAD,CAJY;AAAA,MAI9CI,OAJ8C;AAAA,MAIrCC,aAJqC;;AAOrDjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAACI,UAAU,CAACG,OAAZ,CAAL;AACD;AACF,GAJQ,EAIN,CAACP,KAAD,CAJM,CAAT;AAMA,sBACE,eAAC,oBAAD;AACE,IAAA,UAAU,EAAEH,UADd;AAEE,IAAA,cAAc,EAAEC,cAFlB;AAGE,mBAAY,YAHd;AAIE,4BAAoBI,IAJtB;AAKE,IAAA,GAAG,EAAEE,UALP;AAME,sBAAe,WANjB;AAOE,IAAA,OAAO,EAAEC;AAPX,KASOC,aATP,gBAYE,eAAC,eAAD,qBACE;AACE,IAAA,GAAG,EAAEf,OAAO,CAACW,IAAD,CADd;AAEE,IAAA,GAAG,EAAC,MAFN;AAGE,IAAA,KAAK,EAAE;AAAEM,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB;AAHT,IADF,CAZF,EAmBGV,QAnBH,CADF;AAuBD","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useHover } from '@ali/4ever-component';\nimport {\n  EmbedNode,\n} from '../../../types';\nimport { getIcon } from '../../../fileTypeHelper';\nimport { EmbedFileCardWrapper, CardIconWrapper } from './styled';\n\ninterface Props {\n  isSelected: boolean;\n  isUploadFailed?: boolean;\n  node: EmbedNode;\n  children: React.ReactElement;\n  onRef?: Function;\n  enableBorderHighlight?: boolean;\n}\n\nexport default function EmbedCardWrapper(props: Props) {\n  const { node, isSelected, isUploadFailed, children, onRef, enableBorderHighlight } = props;\n  const { type } = node.data;\n  const wrapperRef = useRef(null);\n  const [isHover, hoverHandlers] = useHover(enableBorderHighlight);\n\n\n  useEffect(() => {\n    if (onRef) {\n      onRef(wrapperRef.current);\n    }\n  }, [onRef]);\n\n  return (\n    <EmbedFileCardWrapper\n      isSelected={isSelected}\n      isUploadFailed={isUploadFailed}\n      data-testid=\"embed-card\"\n      data-type={`embed-${type}`}\n      ref={wrapperRef}\n      data-hover-box=\"borderBox\"\n      isHover={isHover}\n      {\n        ...hoverHandlers\n      }\n    >\n      <CardIconWrapper>\n        <img\n          src={getIcon(type)}\n          alt=\"icon\"\n          style={{ width: 23, height: 24 }}\n        />\n      </CardIconWrapper>\n      {children}\n    </EmbedFileCardWrapper>\n  );\n}\n"],"file":"index.js"}