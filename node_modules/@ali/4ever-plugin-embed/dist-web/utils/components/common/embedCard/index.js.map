{"version":3,"sources":["../../../../../../src/utils/components/common/embedCard/index.tsx"],"names":["React","useCallback","CardContentInnerWrapper","CardContentWrapper","ContentHeader","ContentDesc","EmbedDownloadButton","EmbedFileCardWrapper","formatSize","EmbedCard","props","name","allowDownload","isSelected","node","locale","size","onDownloadFile","renderDesc","title"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;qBAC4B,a;AAA5B,SACEC,uBADF,EAEEC,kBAFF,EAGEC,aAHF,EAIEC,WAJF;AAMA,OAAOC,mBAAP;AACA,OAAOC,oBAAP;AACA,SAASC,UAAT;;AAYA,SAASC,SAAT,CAAmBC,KAAnB,EAAiC;AAAA,MACvBC,IADuB,GACiDD,KADjD,CACvBC,IADuB;AAAA,MACjBC,aADiB,GACiDF,KADjD,CACjBE,aADiB;AAAA,MACFC,UADE,GACiDH,KADjD,CACFG,UADE;AAAA,MACUC,IADV,GACiDJ,KADjD,CACUI,IADV;AAAA,MACgBC,MADhB,GACiDL,KADjD,CACgBK,MADhB;AAAA,MACwBC,IADxB,GACiDN,KADjD,CACwBM,IADxB;AAAA,MAC8BC,cAD9B,GACiDP,KADjD,CAC8BO,cAD9B;AAG/B,MAAMC,UAAU,GAAGjB,WAAW,CAAC,YAAM;AACnC,wBAAO,eAAC,WAAD,QAAcO,UAAU,CAACQ,IAAD,CAAxB,CAAP;AACD,GAF6B,EAE3B,CAACA,IAAD,CAF2B,CAA9B;AAIA,sBACE,eAAC,oBAAD;AAAsB,IAAA,IAAI,EAAEF,IAA5B;AAAkC,IAAA,UAAU,EAAED;AAA9C,kBACE,eAAC,KAAD,CAAO,QAAP,qBACE,eAAC,kBAAD,qBACE,eAAC,uBAAD,qBACE,eAAC,aAAD,QAAgBF,IAAhB,CADF,EAEGO,UAAU,EAFb,CADF,CADF,eAOE,eAAC,mBAAD;AACE,IAAA,KAAK,EAAEH,MAAF,oBAAEA,MAAM,CAAEI,KADjB;AAEE,IAAA,cAAc,EAAEF,cAFlB;AAGE,IAAA,aAAa,EAAEL;AAHjB,IAPF,CADF,CADF;AAiBD;;AAED,eAAeH,SAAf","sourcesContent":["import React, { useCallback } from 'react';\nimport {\n  CardContentInnerWrapper,\n  CardContentWrapper,\n  ContentHeader,\n  ContentDesc,\n} from './styled';\nimport EmbedDownloadButton from '../embedDownloadButton';\nimport EmbedFileCardWrapper from '../embedFileCardWrapper';\nimport { formatSize } from '../../../fileTypeHelper';\n\ninterface Props {\n  name: string;\n  allowDownload: boolean;\n  isSelected: boolean;\n  node: any;\n  locale: Record<string, string>\n  size: number;\n  onDownloadFile: (event: MouseEvent) => void;\n}\n\nfunction EmbedCard(props: Props) {\n  const { name, allowDownload, isSelected, node, locale, size, onDownloadFile } = props;\n\n  const renderDesc = useCallback(() => {\n    return <ContentDesc>{formatSize(size)}</ContentDesc>;\n  }, [size]);\n\n  return (\n    <EmbedFileCardWrapper node={node} isSelected={isSelected}>\n      <React.Fragment>\n        <CardContentWrapper>\n          <CardContentInnerWrapper>\n            <ContentHeader>{name}</ContentHeader>\n            {renderDesc()}\n          </CardContentInnerWrapper>\n        </CardContentWrapper>\n        <EmbedDownloadButton\n          title={locale?.title}\n          onDownloadFile={onDownloadFile}\n          allowDownload={allowDownload}\n        />\n      </React.Fragment>\n    </EmbedFileCardWrapper>\n  );\n}\n\nexport default EmbedCard;\n"],"file":"index.js"}