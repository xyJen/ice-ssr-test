{"version":3,"sources":["../../../../../src/utils/components/audio/audioPreview.tsx"],"names":["React","EmbedPreviewHeader","EmbedDownloadButton","AudioPlayer","FileTypeMap","AudioWrapper","AudioPreview","props","onMediaLoadSuccess","onMediaLoadError","transformAudioURL","locale","allowDownload","name","size","src","onDownloadFile","isMobile","Audio","title"],"mappings":"AAAA,OAAOA,KAAP,MAAsC,OAAtC;qBAC4B,a;AAA5B,OAAOC,kBAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,WAAP;AACA,SAASC,WAAT;AACA,SAASC,YAAT;AAeA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAAoC;AAAA,MAE/CC,kBAF+C,GAM7CD,KAN6C,CAE/CC,kBAF+C;AAAA,MAE3BC,gBAF2B,GAM7CF,KAN6C,CAE3BE,gBAF2B;AAAA,MAG/CC,iBAH+C,GAM7CH,KAN6C,CAG/CG,iBAH+C;AAAA,MAG5BC,MAH4B,GAM7CJ,KAN6C,CAG5BI,MAH4B;AAAA,MAI/CC,aAJ+C,GAM7CL,KAN6C,CAI/CK,aAJ+C;AAAA,MAIhCC,IAJgC,GAM7CN,KAN6C,CAIhCM,IAJgC;AAAA,MAI1BC,IAJ0B,GAM7CP,KAN6C,CAI1BO,IAJ0B;AAAA,MAIpBC,GAJoB,GAM7CR,KAN6C,CAIpBQ,GAJoB;AAAA,MAIfC,cAJe,GAM7CT,KAN6C,CAIfS,cAJe;AAAA,MAK/CC,QAL+C,GAM7CV,KAN6C,CAK/CU,QAL+C;AAQjD,sBACE,eAAC,YAAD;AAAc,iBAAU;AAAxB,kBACE,eAAC,kBAAD;AACE,IAAA,IAAI,EAAEb,WAAW,CAACc,KADpB;AAEE,IAAA,IAAI,EAAEL,IAFR;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,WAAW,EAAE;AAAA,0BACX,eAAC,mBAAD;AACE,QAAA,KAAK,EAAEH,MAAF,oBAAEA,MAAM,CAAEQ,KADjB;AAEE,QAAA,cAAc,EAAEH,cAFlB;AAGE,QAAA,aAAa,EAAEJ;AAHjB,QADW;AAAA,KAJf;AAUE,IAAA,QAAQ,EAAEK;AAVZ,IADF,eAaE,eAAC,WAAD;AACE,IAAA,iBAAiB,EAAEP,iBADrB;AAEE,IAAA,kBAAkB,EAAEF,kBAFtB;AAGE,IAAA,gBAAgB,EAAEC,gBAHpB;AAIE,IAAA,GAAG,EAAEM,GAJP;AAKE,IAAA,QAAQ,EAAEE;AALZ,IAbF,CADF;AAuBD","sourcesContent":["import React, { SyntheticEvent } from 'react';\nimport EmbedPreviewHeader from '../common/embedPreviewHeader';\nimport EmbedDownloadButton from '../common/embedDownloadButton';\nimport AudioPlayer from './audioPlayer';\nimport { FileTypeMap } from '../../fileTypeHelper';\nimport { AudioWrapper } from './styled';\n\ninterface Props {\n  allowDownload: boolean;\n  onMediaLoadSuccess: (event: SyntheticEvent<HTMLAudioElement, Event>) => void;\n  onMediaLoadError: (event: SyntheticEvent<HTMLAudioElement, Event>) => void;\n  transformAudioURL?: (src: string) => string;\n  locale: Record<string, string>;\n  name: string;\n  size: number;\n  src: string;\n  onDownloadFile: any;\n  isMobile?: boolean;\n}\n\nexport default function AudioPreview(props: Props) {\n  const {\n    onMediaLoadSuccess, onMediaLoadError,\n    transformAudioURL, locale,\n    allowDownload, name, size, src, onDownloadFile,\n    isMobile,\n  } = props;\n\n  return (\n    <AudioWrapper data-type=\"embed-audio\">\n      <EmbedPreviewHeader\n        type={FileTypeMap.Audio}\n        name={name}\n        size={size}\n        renderExtra={() => (\n          <EmbedDownloadButton\n            title={locale?.title}\n            onDownloadFile={onDownloadFile}\n            allowDownload={allowDownload}\n          />)}\n        isMobile={isMobile}\n      />\n      <AudioPlayer\n        transformAudioURL={transformAudioURL}\n        onMediaLoadSuccess={onMediaLoadSuccess}\n        onMediaLoadError={onMediaLoadError}\n        src={src}\n        isMobile={isMobile}\n      />\n    </AudioWrapper>\n  );\n}\n"],"file":"audioPreview.js"}