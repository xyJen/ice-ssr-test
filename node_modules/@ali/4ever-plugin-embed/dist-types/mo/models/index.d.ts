import { Block, BlockChildren, Data } from '@ali/4ever-cangjie';
interface EmbedData extends Data {
    readonly name?: string;
    readonly type?: string;
    readonly src?: string;
    readonly size?: number;
    readonly viewType?: string;
    readonly previewSize?: {
        readonly height: number;
    };
}
declare type EmbedChildren = BlockChildren;
export interface EmbedProperties<D = EmbedData, N extends BlockChildren = EmbedChildren> {
    data?: D;
    nodes?: N;
}
export default class Embed extends Block<EmbedData, EmbedChildren> {
    static TYPE: string;
    static create<SD = EmbedData, SN extends BlockChildren = EmbedChildren>(properties: Embed | EmbedProperties<SD, SN> | string): Block<SD, SN>;
    static isEmbed(maybeEmbed: any): maybeEmbed is Embed;
}
export {};
