"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFileTypeForRead = getFileTypeForRead;
exports.getIcon = exports.FileIconMap = exports.IconUrlMap = exports.formatSize = exports.CanPreviewFileTypes = exports.FileTypeMap = void 0;

var _weDesign = require("@ali/we-design");

const FileTypeMap = {
  Word: 'word',
  Excel: 'excel',
  Ppt: 'ppt',
  Pdf: 'pdf',
  Zip: 'zip',
  Audio: 'audio',
  Video: 'video',
  Txt: 'txt',
  Sketch: 'sketch',
  Ps: 'ps',
  Picture: 'picture',
  Keynote: 'keynote',
  Page: 'page',
  Numbers: 'numbers',
  Ai: 'ai',
  App: 'app',
  DingSheet: 'dingsheet',
  DingDoc: 'dingdoc',
  WhiteBoard: 'whiteboard',
  DingNoteSheet: 'dingnotesheet',
  DingNoteDoc: 'dingnotedoc'
};
exports.FileTypeMap = FileTypeMap;
const CanPreviewFileTypes = [FileTypeMap.Word, FileTypeMap.Excel, FileTypeMap.Ppt, FileTypeMap.Pdf, FileTypeMap.Audio, FileTypeMap.Video];
/* eslint-disable */

exports.CanPreviewFileTypes = CanPreviewFileTypes;

function getFileTypeForRead(fileName) {
  if (!fileName) {
    return FileTypeMap.App;
  }

  let lowerCaseFileName = fileName.toLowerCase();

  if (lowerCaseFileName.endsWith('.doc')) {
    return FileTypeMap.Word;
  } else if (lowerCaseFileName.endsWith('.docx')) {
    return FileTypeMap.Word;
  } else if (lowerCaseFileName.endsWith('.xls')) {
    return FileTypeMap.Excel;
  } else if (lowerCaseFileName.endsWith('.xlsx')) {
    return FileTypeMap.Excel;
  } else if (lowerCaseFileName.endsWith('.ppt')) {
    return FileTypeMap.Ppt;
  } else if (lowerCaseFileName.endsWith('.pptx')) {
    return FileTypeMap.Ppt;
  } else if (lowerCaseFileName.endsWith('.zip')) {
    return FileTypeMap.Zip;
  } else if (lowerCaseFileName.endsWith('.mp4') || lowerCaseFileName.endsWith('.ogg') || lowerCaseFileName.endsWith('.mov')) {
    return FileTypeMap.Video;
  } else if (lowerCaseFileName.endsWith('.txt')) {
    return FileTypeMap.Txt;
  } else if (lowerCaseFileName.endsWith('.sketch')) {
    return FileTypeMap.Sketch;
  } else if (lowerCaseFileName.endsWith('.ps')) {
    return FileTypeMap.Ps;
  } else if (lowerCaseFileName.endsWith('.png') || lowerCaseFileName.endsWith('.jpg') || lowerCaseFileName.endsWith('.bmp')) {
    return FileTypeMap.Picture;
  } else if (lowerCaseFileName.endsWith('.pdf')) {
    return FileTypeMap.Pdf;
  } else if (lowerCaseFileName.endsWith('.key')) {
    return FileTypeMap.Keynote;
  } else if (lowerCaseFileName.endsWith('.pages')) {
    return FileTypeMap.Page;
  } else if (lowerCaseFileName.endsWith('.numbers')) {
    return FileTypeMap.Numbers;
  } else if (lowerCaseFileName.endsWith('.ai')) {
    return FileTypeMap.Ai;
  } else if (lowerCaseFileName.endsWith('.mp3')) {
    return FileTypeMap.Audio;
  } else if (lowerCaseFileName.endsWith('.adoc')) {
    return FileTypeMap.DingDoc;
  } else if (lowerCaseFileName.endsWith('.axls')) {
    return FileTypeMap.DingSheet;
  } else if (lowerCaseFileName.endsWith('.awbd')) {
    return FileTypeMap.WhiteBoard;
  } else {
    return FileTypeMap.App;
  }
} // 真实的换算应该按照 1024，但文件系统里显示是按照1000换算，所以跟系统保持同步


const formatSize = size => {
  // 小于 1M，显示 KB
  if (size < 1 * 1000 * 1000) {
    return `${(size / 1000).toFixed(1)}KB`;
  }

  return `${(size / (1000 * 1000)).toFixed(1)}MB`;
};

exports.formatSize = formatSize;
const IconUrlMap = {
  [FileTypeMap.Word]: 'https://img.alicdn.com/tfs/TB16zxhlHY1gK0jSZTEXXXDQVXa-24-24.svg',
  [FileTypeMap.Excel]: 'https://img.alicdn.com/tfs/TB1zi5Ik1bviK0jSZFNXXaApXXa-24-24.svg',
  [FileTypeMap.Zip]: 'https://img.alicdn.com/tfs/TB1HahflQY2gK0jSZFgXXc5OFXa-24-24.svg',
  [FileTypeMap.Video]: 'https://img.alicdn.com/tfs/TB1Ns0dlUH1gK0jSZSyXXXtlpXa-24-24.svg',
  [FileTypeMap.Txt]: 'https://img.alicdn.com/tfs/TB11_NclQL0gK0jSZFtXXXQCXXa-24-24.svg',
  [FileTypeMap.Sketch]: 'https://img.alicdn.com/tfs/TB1hllglNv1gK0jSZFFXXb0sXXa-24-24.svg',
  [FileTypeMap.Ps]: 'https://img.alicdn.com/tfs/TB1q9NblFY7gK0jSZKzXXaikpXa-24-24.svg',
  [FileTypeMap.Ppt]: 'https://img.alicdn.com/tfs/TB1KI0dlUH1gK0jSZSyXXXtlpXa-24-24.svg',
  [FileTypeMap.Picture]: 'https://img.alicdn.com/tfs/TB1HORdlNz1gK0jSZSgXXavwpXa-24-24.svg',
  [FileTypeMap.Pdf]: 'https://img.alicdn.com/tfs/TB1YsthlND1gK0jSZFKXXcJrVXa-24-24.svg',
  [FileTypeMap.Keynote]: 'https://gw.alicdn.com/tfs/TB1VLh0Bbj1gK0jSZFuXXcrHpXa-24-24.svg',
  [FileTypeMap.Page]: 'https://img.alicdn.com/tfs/TB1FyRdlNz1gK0jSZSgXXavwpXa-24-24.svg',
  [FileTypeMap.Numbers]: 'https://img.alicdn.com/tfs/TB16OBflO_1gK0jSZFqXXcpaXXa-24-24.svg',
  [FileTypeMap.Ai]: 'https://img.alicdn.com/tfs/TB1PIthlND1gK0jSZFKXXcJrVXa-24-24.svg',
  [FileTypeMap.Audio]: 'https://img.alicdn.com/tfs/TB11Vy.obj1gK0jSZFOXXc7GpXa-24-24.svg',
  [FileTypeMap.App]: 'https://img.alicdn.com/tfs/TB145BflO_1gK0jSZFqXXcpaXXa-24-24.svg'
};
exports.IconUrlMap = IconUrlMap;
const FileIconMap = {
  [FileTypeMap.Word]: _weDesign.DingdriveWordBetaNormal,
  [FileTypeMap.Excel]: _weDesign.DingdriveExcelBetaNormal,
  [FileTypeMap.Ppt]: _weDesign.DingdrivePptBetaNormal,
  [FileTypeMap.Pdf]: _weDesign.DingdrivePdfBetaNormal,
  [FileTypeMap.Zip]: _weDesign.DingdriveZipBetaNormal,
  [FileTypeMap.Audio]: _weDesign.DingdriveVoiceBetaNormal,
  [FileTypeMap.Video]: _weDesign.DingdriveVideoBetaNormal,
  [FileTypeMap.Txt]: _weDesign.DingdriveTxtBetaNormal,
  [FileTypeMap.Sketch]: _weDesign.DingdriveSketchBetaNormal,
  [FileTypeMap.Ps]: _weDesign.DingdrivePsBetaNormal,
  [FileTypeMap.Picture]: _weDesign.DingdrivePictureBetaNormal,
  [FileTypeMap.Keynote]: _weDesign.DingdriveKeynoteBetaNormal,
  [FileTypeMap.Page]: _weDesign.DingdrivePageBetaNormal,
  [FileTypeMap.Numbers]: _weDesign.DingdriveNumbersBetaNormal,
  [FileTypeMap.Ai]: _weDesign.DingdriveAiBetaNormal,
  [FileTypeMap.App]: _weDesign.DingdriveOtherBetaNormal,
  [FileTypeMap.DingDoc]: _weDesign.DingdriveDingdocBetaNormal,
  [FileTypeMap.DingSheet]: _weDesign.DingdriveDingexcelBetaNormal,
  [FileTypeMap.WhiteBoard]: _weDesign.DingdriveWhitepageBetaNormal,
  [FileTypeMap.DingNoteDoc]: _weDesign.DingnoteDocBetaNormal,
  [FileTypeMap.DingNoteSheet]: _weDesign.DingnoteExcelBetaNormal
};
exports.FileIconMap = FileIconMap;

const getIcon = type => {
  return IconUrlMap[type] || IconUrlMap['app'];
};

exports.getIcon = getIcon;
//# sourceMappingURL=fileTypeHelper.js.map