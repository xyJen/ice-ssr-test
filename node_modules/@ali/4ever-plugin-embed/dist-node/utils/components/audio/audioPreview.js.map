{"version":3,"sources":["../../../../../src/utils/components/audio/audioPreview.tsx"],"names":["AudioPreview","props","onMediaLoadSuccess","onMediaLoadError","transformAudioURL","locale","allowDownload","name","size","src","onDownloadFile","isMobile","FileTypeMap","Audio","title"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;uBAJ4B,a;;AAmBb,SAASA,YAAT,CAAsBC,KAAtB,EAAoC;AACjD,QAAM;AACJC,IAAAA,kBADI;AACgBC,IAAAA,gBADhB;AAEJC,IAAAA,iBAFI;AAEeC,IAAAA,MAFf;AAGJC,IAAAA,aAHI;AAGWC,IAAAA,IAHX;AAGiBC,IAAAA,IAHjB;AAGuBC,IAAAA,GAHvB;AAG4BC,IAAAA,cAH5B;AAIJC,IAAAA;AAJI,MAKFV,KALJ;AAOA,sBACE,eAAC,oBAAD;AAAc,iBAAU;AAAxB,kBACE,eAAC,2BAAD;AACE,IAAA,IAAI,EAAEW,4BAAYC,KADpB;AAEE,IAAA,IAAI,EAAEN,IAFR;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,WAAW,EAAE,mBACX,eAAC,4BAAD;AACE,MAAA,KAAK,EAAEH,MAAM,EAAES,KADjB;AAEE,MAAA,cAAc,EAAEJ,cAFlB;AAGE,MAAA,aAAa,EAAEJ;AAHjB,MALJ;AAUE,IAAA,QAAQ,EAAEK;AAVZ,IADF,eAaE,eAAC,oBAAD;AACE,IAAA,iBAAiB,EAAEP,iBADrB;AAEE,IAAA,kBAAkB,EAAEF,kBAFtB;AAGE,IAAA,gBAAgB,EAAEC,gBAHpB;AAIE,IAAA,GAAG,EAAEM,GAJP;AAKE,IAAA,QAAQ,EAAEE;AALZ,IAbF,CADF;AAuBD","sourcesContent":["import React, { SyntheticEvent } from 'react';\nimport EmbedPreviewHeader from '../common/embedPreviewHeader';\nimport EmbedDownloadButton from '../common/embedDownloadButton';\nimport AudioPlayer from './audioPlayer';\nimport { FileTypeMap } from '../../fileTypeHelper';\nimport { AudioWrapper } from './styled';\n\ninterface Props {\n  allowDownload: boolean;\n  onMediaLoadSuccess: (event: SyntheticEvent<HTMLAudioElement, Event>) => void;\n  onMediaLoadError: (event: SyntheticEvent<HTMLAudioElement, Event>) => void;\n  transformAudioURL?: (src: string) => string;\n  locale: Record<string, string>;\n  name: string;\n  size: number;\n  src: string;\n  onDownloadFile: any;\n  isMobile?: boolean;\n}\n\nexport default function AudioPreview(props: Props) {\n  const {\n    onMediaLoadSuccess, onMediaLoadError,\n    transformAudioURL, locale,\n    allowDownload, name, size, src, onDownloadFile,\n    isMobile,\n  } = props;\n\n  return (\n    <AudioWrapper data-type=\"embed-audio\">\n      <EmbedPreviewHeader\n        type={FileTypeMap.Audio}\n        name={name}\n        size={size}\n        renderExtra={() => (\n          <EmbedDownloadButton\n            title={locale?.title}\n            onDownloadFile={onDownloadFile}\n            allowDownload={allowDownload}\n          />)}\n        isMobile={isMobile}\n      />\n      <AudioPlayer\n        transformAudioURL={transformAudioURL}\n        onMediaLoadSuccess={onMediaLoadSuccess}\n        onMediaLoadError={onMediaLoadError}\n        src={src}\n        isMobile={isMobile}\n      />\n    </AudioWrapper>\n  );\n}\n"],"file":"audioPreview.js"}