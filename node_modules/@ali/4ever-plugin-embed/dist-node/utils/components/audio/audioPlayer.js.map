{"version":3,"sources":["../../../../../src/utils/components/audio/audioPlayer.tsx"],"names":["AudioPlayer","props","src","transformAudioURL","onMediaLoadError","onMediaLoadSuccess","isMobile","trueSrc","handleAudioClick","e","stopPropagation"],"mappings":";;;;;;;;;AAAA;;uBAC4B,a;;AAS5B,SAASA,WAAT,CAAqBC,KAArB,EAAmC;AACjC,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,iBAAP;AAA0BC,IAAAA,gBAA1B;AAA4CC,IAAAA,kBAA5C;AAAgEC,IAAAA;AAAhE,MAA6EL,KAAnF;AACA,QAAMM,OAAO,GAAGJ,iBAAiB,GAAGA,iBAAiB,CAACD,GAAD,CAApB,GAA4BA,GAA7D;AAEA,QAAMM,gBAAgB,GAAG,wBAAaC,CAAD,IAAO;AAC1C,QAAIH,QAAJ,EAAc;AACZG,MAAAA,CAAC,CAACC,eAAF;AACD;AACF,GAJwB,EAItB,CAACJ,QAAD,CAJsB,CAAzB;AAMA,sBACE;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,YAAY,EAAC,0CAFf;AAGE,IAAA,SAAS,EAAED,kBAHb;AAIE,IAAA,OAAO,EAAED,gBAJX;AAKE,IAAA,OAAO,EAAEI,gBALX;AAME,IAAA,WAAW,EAAEA;AANf,kBAQE;AAAQ,IAAA,GAAG,EAAED,OAAb;AAAsB,IAAA,IAAI,EAAC;AAA3B,IARF,CADF;AAYD;;eAEcP,W","sourcesContent":["import React, { SyntheticEvent, useCallback } from 'react';\n\ninterface Props {\n  src: string;\n  transformAudioURL?: (src: string) => string;\n  onMediaLoadSuccess: (event: SyntheticEvent<HTMLAudioElement, Event>) => void;\n  onMediaLoadError: (event: SyntheticEvent<HTMLAudioElement, Event>) => void;\n  isMobile?: boolean;\n}\n\nfunction AudioPlayer(props: Props) {\n  const { src, transformAudioURL, onMediaLoadError, onMediaLoadSuccess, isMobile } = props;\n  const trueSrc = transformAudioURL ? transformAudioURL(src) : src;\n\n  const handleAudioClick = useCallback((e) => {\n    if (isMobile) {\n      e.stopPropagation();\n    }\n  }, [isMobile]);\n\n  return (\n    <audio\n      controls\n      controlsList=\"nodownload nofullscreen noremoteplayback\"\n      onCanPlay={onMediaLoadSuccess}\n      onError={onMediaLoadError}\n      onClick={handleAudioClick}\n      onMouseDown={handleAudioClick}\n    >\n      <source src={trueSrc} type=\"audio/mp3\" />\n    </audio>\n  );\n}\n\nexport default AudioPlayer;\n"],"file":"audioPlayer.js"}