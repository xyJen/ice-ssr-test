{"version":3,"sources":["../../../../../../src/utils/components/common/embedFileCardWrapper/index.tsx"],"names":["EmbedCardWrapper","props","node","isSelected","isUploadFailed","children","onRef","enableBorderHighlight","type","data","wrapperRef","isHover","hoverHandlers","current","width","height"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAIA;;AACA;;uBAL4B,a;;AAgBb,SAASA,gBAAT,CAA0BC,KAA1B,EAAwC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA,cAApB;AAAoCC,IAAAA,QAApC;AAA8CC,IAAAA,KAA9C;AAAqDC,IAAAA;AAArD,MAA+EN,KAArF;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAWN,IAAI,CAACO,IAAtB;AACA,QAAMC,UAAU,GAAG,mBAAO,IAAP,CAAnB;AACA,QAAM,CAACC,OAAD,EAAUC,aAAV,IAA2B,6BAASL,qBAAT,CAAjC;AAGA,wBAAU,MAAM;AACd,QAAID,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAACI,UAAU,CAACG,OAAZ,CAAL;AACD;AACF,GAJD,EAIG,CAACP,KAAD,CAJH;AAMA,sBACE,eAAC,4BAAD;AACE,IAAA,UAAU,EAAEH,UADd;AAEE,IAAA,cAAc,EAAEC,cAFlB;AAGE,mBAAY,YAHd;AAIE,iBAAY,SAAQI,IAAK,EAJ3B;AAKE,IAAA,GAAG,EAAEE,UALP;AAME,sBAAe,WANjB;AAOE,IAAA,OAAO,EAAEC;AAPX,KASOC,aATP,gBAYE,eAAC,uBAAD,qBACE;AACE,IAAA,GAAG,EAAE,6BAAQJ,IAAR,CADP;AAEE,IAAA,GAAG,EAAC,MAFN;AAGE,IAAA,KAAK,EAAE;AAAEM,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB;AAHT,IADF,CAZF,EAmBGV,QAnBH,CADF;AAuBD","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useHover } from '@ali/4ever-component';\nimport {\n  EmbedNode,\n} from '../../../types';\nimport { getIcon } from '../../../fileTypeHelper';\nimport { EmbedFileCardWrapper, CardIconWrapper } from './styled';\n\ninterface Props {\n  isSelected: boolean;\n  isUploadFailed?: boolean;\n  node: EmbedNode;\n  children: React.ReactElement;\n  onRef?: Function;\n  enableBorderHighlight?: boolean;\n}\n\nexport default function EmbedCardWrapper(props: Props) {\n  const { node, isSelected, isUploadFailed, children, onRef, enableBorderHighlight } = props;\n  const { type } = node.data;\n  const wrapperRef = useRef(null);\n  const [isHover, hoverHandlers] = useHover(enableBorderHighlight);\n\n\n  useEffect(() => {\n    if (onRef) {\n      onRef(wrapperRef.current);\n    }\n  }, [onRef]);\n\n  return (\n    <EmbedFileCardWrapper\n      isSelected={isSelected}\n      isUploadFailed={isUploadFailed}\n      data-testid=\"embed-card\"\n      data-type={`embed-${type}`}\n      ref={wrapperRef}\n      data-hover-box=\"borderBox\"\n      isHover={isHover}\n      {\n        ...hoverHandlers\n      }\n    >\n      <CardIconWrapper>\n        <img\n          src={getIcon(type)}\n          alt=\"icon\"\n          style={{ width: 23, height: 24 }}\n        />\n      </CardIconWrapper>\n      {children}\n    </EmbedFileCardWrapper>\n  );\n}\n"],"file":"index.js"}