{"version":3,"sources":["../../../../../src/utils/components/video/videoPlayer.tsx"],"names":["VideoPlayer","props","videoRef","transformVideoURL","onMediaLoadSuccess","onMediaLoadError","node","setTempPosterUrl","isSelected","renderVideoMask","isMobile","allowDownload","onDownload","locale","allowFullscreen","src","data","poster","setPoster","renderSrc","setRenderSrc","canPlay","setCanPlayState","canDownload","setCanDownloadState","errorMessage","setErrorMessage","setTrueSrc","s","then","resPoster","current","load","res","handleMediaLoadSuccess","handleMediaLoadError","e","isError","errorSrc","currentVideoEle","addEventListener","removeEventListener","handleReload","play","handleVideoClick","stopPropagation","renderDownloadButton","download","reload"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { DownloadNormal, Tooltip } from '@ali/we-design';\nimport { sanitizeUrl } from '@ali/4ever-utils';\nimport { VideoMaskParams, VideoErrorMessage, EmbedNode } from '../../types';\nimport { VideoWrapper, DownloadButton } from './styled';\n\ninterface Props {\n  node: EmbedNode;\n  isSelected: boolean;\n  isMobile?: boolean;\n  transformVideoURL?: (src: string) => string;\n  onMediaLoadSuccess?: Function;\n  onMediaLoadError?: any;\n  setTempPosterUrl?: (data: any) => Promise<string>; // 获取封面图地址\n  renderVideoMask?: (params: VideoMaskParams) => React.ReactElement;\n  allowDownload?: ((src: string) => Promise<boolean>) | boolean;\n  onDownload: any;\n  locale?: Record<string, string>;\n  allowFullscreen?: boolean;\n}\n\nfunction VideoPlayer(props: Props) {\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    transformVideoURL,\n    onMediaLoadSuccess,\n    onMediaLoadError,\n    node,\n    setTempPosterUrl,\n    isSelected,\n    renderVideoMask,\n    isMobile,\n    allowDownload,\n    onDownload,\n    locale = {},\n    allowFullscreen,\n  } = props;\n\n  const { src } = node.data;\n  const [poster, setPoster] = useState(node.data.poster);\n  const [renderSrc, setRenderSrc] = useState(transformVideoURL ? transformVideoURL(src) : src);\n  const [canPlay, setCanPlayState] = useState(false);\n  const [canDownload, setCanDownloadState] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<VideoErrorMessage>({});\n\n  const setTrueSrc = useCallback(\n    (s) => {\n      if (transformVideoURL) {\n        setRenderSrc(transformVideoURL(s));\n        return;\n      }\n      setRenderSrc(s);\n    },\n    [transformVideoURL],\n  );\n\n  useEffect(() => {\n    setTrueSrc(src);\n    if (setTempPosterUrl) {\n      setTempPosterUrl(node.data).then((resPoster: string) => {\n        setPoster(resPoster);\n        if (videoRef.current) {\n          videoRef.current.load();\n        }\n      });\n    }\n  }, []);\n\n  // allowDownload 是 boolean 值时，直接设置\n  useEffect(() => {\n    if (typeof allowDownload === 'boolean') {\n      setCanDownloadState(allowDownload);\n    }\n  }, [allowDownload]);\n\n  // allowDownload 是函数时，当 src 有变化时候，调用一次设置\n  useEffect(() => {\n    if (typeof allowDownload === 'function') {\n      allowDownload(renderSrc).then((res) => {\n        setCanDownloadState(res);\n      });\n    }\n  }, [allowDownload, renderSrc]);\n\n  const handleMediaLoadSuccess = useCallback(() => {\n    setCanPlayState(true);\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(renderSrc);\n    }\n  }, [onMediaLoadSuccess, renderSrc]);\n\n  const handleMediaLoadError = useCallback((e: React.SyntheticEvent<HTMLVideoElement, Event>) => {\n    onMediaLoadError(e);\n    setErrorMessage({\n      isError: true,\n      errorSrc: renderSrc,\n    });\n  }, [onMediaLoadError, renderSrc]);\n\n  useEffect(() => {\n    const currentVideoEle = videoRef.current;\n    if (currentVideoEle) {\n      currentVideoEle.addEventListener('canplay', handleMediaLoadSuccess);\n    }\n\n    return () => {\n      setCanPlayState(false);\n      if (currentVideoEle) {\n        currentVideoEle.removeEventListener('canplay', handleMediaLoadSuccess);\n      }\n    };\n  }, [handleMediaLoadSuccess]);\n\n  const handleReload = useCallback(() => {\n    setTrueSrc(src);\n    if (videoRef.current) {\n      videoRef.current.play();\n    }\n  }, [src, setTrueSrc]);\n\n  const handleVideoClick = useCallback((e) => {\n    if (isMobile) {\n      e.stopPropagation();\n    }\n  }, [isMobile]);\n\n  const renderDownloadButton = useCallback(() => {\n    if (!canDownload) return null;\n\n    return (\n      <Tooltip placement=\"bottom\" title={locale.download}>\n        <DownloadButton onMouseDown={onDownload}>\n          <DownloadNormal />\n        </DownloadButton>\n      </Tooltip>\n    );\n  }, [canDownload, onDownload, locale]);\n\n  return (\n    <VideoWrapper isSelected={isSelected} isMobile={isMobile}>\n      <video\n        onClick={handleVideoClick}\n        onMouseDown={handleVideoClick}\n        controls\n        data-type=\"embed-video\"\n        raw-controls=\"true\" // UC内核独有属性\n        controlsList={allowFullscreen ?\n          'nodownload noremoteplayback' :\n          'nodownload nofullscreen noremoteplayback'\n        }\n        ref={videoRef as any}\n        poster={sanitizeUrl(poster!)}\n        onError={handleMediaLoadError}\n        disablePictureInPicture\n      >\n        <source src={renderSrc} type=\"video/mp4\" />\n      </video>\n      {renderVideoMask &&\n        renderVideoMask({ node, canPlay, reload: handleReload, errorMessage })}\n      {renderDownloadButton()}\n    </VideoWrapper>\n  );\n}\n\nexport default VideoPlayer;\n"],"file":"videoPlayer.js"}