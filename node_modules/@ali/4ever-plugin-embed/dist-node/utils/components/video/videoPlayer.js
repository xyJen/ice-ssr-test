"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _everUtils = require("@ali/4ever-utils");

var _styled = require("./styled");

const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref2 = /*#__PURE__*/_createElement(_weDesign.DownloadNormal, null);

function VideoPlayer(props) {
  const videoRef = (0, _react.useRef)();
  const {
    transformVideoURL,
    onMediaLoadSuccess,
    onMediaLoadError,
    node,
    setTempPosterUrl,
    isSelected,
    renderVideoMask,
    isMobile,
    allowDownload,
    onDownload,
    locale = {},
    allowFullscreen
  } = props;
  const {
    src
  } = node.data;
  const [poster, setPoster] = (0, _react.useState)(node.data.poster);
  const [renderSrc, setRenderSrc] = (0, _react.useState)(transformVideoURL ? transformVideoURL(src) : src);
  const [canPlay, setCanPlayState] = (0, _react.useState)(false);
  const [canDownload, setCanDownloadState] = (0, _react.useState)(false);
  const [errorMessage, setErrorMessage] = (0, _react.useState)({});
  const setTrueSrc = (0, _react.useCallback)(s => {
    if (transformVideoURL) {
      setRenderSrc(transformVideoURL(s));
      return;
    }

    setRenderSrc(s);
  }, [transformVideoURL]);
  (0, _react.useEffect)(() => {
    setTrueSrc(src);

    if (setTempPosterUrl) {
      setTempPosterUrl(node.data).then(resPoster => {
        setPoster(resPoster);

        if (videoRef.current) {
          videoRef.current.load();
        }
      });
    }
  }, []); // allowDownload 是 boolean 值时，直接设置

  (0, _react.useEffect)(() => {
    if (typeof allowDownload === 'boolean') {
      setCanDownloadState(allowDownload);
    }
  }, [allowDownload]); // allowDownload 是函数时，当 src 有变化时候，调用一次设置

  (0, _react.useEffect)(() => {
    if (typeof allowDownload === 'function') {
      allowDownload(renderSrc).then(res => {
        setCanDownloadState(res);
      });
    }
  }, [allowDownload, renderSrc]);
  const handleMediaLoadSuccess = (0, _react.useCallback)(() => {
    setCanPlayState(true);

    if (onMediaLoadSuccess) {
      onMediaLoadSuccess(renderSrc);
    }
  }, [onMediaLoadSuccess, renderSrc]);
  const handleMediaLoadError = (0, _react.useCallback)(e => {
    onMediaLoadError(e);
    setErrorMessage({
      isError: true,
      errorSrc: renderSrc
    });
  }, [onMediaLoadError, renderSrc]);
  (0, _react.useEffect)(() => {
    const currentVideoEle = videoRef.current;

    if (currentVideoEle) {
      currentVideoEle.addEventListener('canplay', handleMediaLoadSuccess);
    }

    return () => {
      setCanPlayState(false);

      if (currentVideoEle) {
        currentVideoEle.removeEventListener('canplay', handleMediaLoadSuccess);
      }
    };
  }, [handleMediaLoadSuccess]);
  const handleReload = (0, _react.useCallback)(() => {
    setTrueSrc(src);

    if (videoRef.current) {
      videoRef.current.play();
    }
  }, [src, setTrueSrc]);
  const handleVideoClick = (0, _react.useCallback)(e => {
    if (isMobile) {
      e.stopPropagation();
    }
  }, [isMobile]);

  var _ref = /*#__PURE__*/_createElement(_styled.DownloadButton, {
    onMouseDown: onDownload
  }, _ref2);

  const renderDownloadButton = (0, _react.useCallback)(() => {
    if (!canDownload) return null;
    return /*#__PURE__*/_createElement(_weDesign.Tooltip, {
      placement: "bottom",
      title: locale.download
    }, _ref);
  }, [canDownload, onDownload, locale]);
  return /*#__PURE__*/_createElement(_styled.VideoWrapper, {
    isSelected: isSelected,
    isMobile: isMobile
  }, /*#__PURE__*/_createElement("video", {
    onClick: handleVideoClick,
    onMouseDown: handleVideoClick,
    controls: true,
    "data-type": "embed-video",
    "raw-controls": "true" // UC内核独有属性
    ,
    controlsList: allowFullscreen ? 'nodownload noremoteplayback' : 'nodownload nofullscreen noremoteplayback',
    ref: videoRef,
    poster: (0, _everUtils.sanitizeUrl)(poster),
    onError: handleMediaLoadError,
    disablePictureInPicture: true
  }, /*#__PURE__*/_createElement("source", {
    src: renderSrc,
    type: "video/mp4"
  })), renderVideoMask && renderVideoMask({
    node,
    canPlay,
    reload: handleReload,
    errorMessage
  }), renderDownloadButton());
}

var _default = VideoPlayer;
exports.default = _default;
//# sourceMappingURL=videoPlayer.js.map