{"version":3,"sources":["../../../../src/mo/models/index.ts"],"names":["Embed","Block","create","properties","Error","isEmbed","type","TYPE","maybeEmbed","isBlock","ELEMENT_TYPE"],"mappings":";;;;;;;AAAA;;AACA;;AAoBe,MAAMA,KAAN,SAAoBC,kBAApB,CAAoD;AAGjE,SAAOC,MAAP,CACEC,UADF,EAEE;AACA,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,QAAIJ,KAAK,CAACK,OAAN,CAAcF,UAAd,CAAJ,EAA+B;AAC7B,aAAOA,UAAP;AACD;;AACD,WAAO,MAAMD,MAAN,CAAqB,EAC1B,GAAGC,UADuB;AAE1BG,MAAAA,IAAI,EAAEN,KAAK,CAACO;AAFc,KAArB,CAAP;AAID;;AAED,SAAOF,OAAP,CAAeG,UAAf,EAAqD;AACnD,WAAOP,mBAAMQ,OAAN,CAAcD,UAAd,KAA6BA,UAAU,CAACF,IAAX,KAAoBN,KAAK,CAACO,IAA9D;AACD;;AApBgE;;;AAA9CP,K,CACZO,I,GAAOG,kB","sourcesContent":["import { Block, BlockChildren, Data } from '@ali/4ever-cangjie';\nimport { ELEMENT_TYPE } from '../../utils/meta';\n\ninterface EmbedData extends Data {\n  readonly name?: string;\n  readonly type?: string;\n  readonly src?: string;\n  readonly size?: number;\n  readonly viewType?: string;\n  readonly previewSize?: {\n    readonly height: number;\n  };\n}\n\ntype EmbedChildren = BlockChildren;\n\nexport interface EmbedProperties<D = EmbedData, N extends BlockChildren = EmbedChildren> {\n  data?: D;\n  nodes?: N;\n}\n\nexport default class Embed extends Block<EmbedData, EmbedChildren> {\n  static TYPE = ELEMENT_TYPE;\n\n  static create<SD = EmbedData, SN extends BlockChildren = EmbedChildren>(\n    properties: Embed | EmbedProperties<SD, SN> | string,\n  ) {\n    if (typeof properties === 'string') {\n      throw new Error('`Embed.create` does not accept string');\n    }\n    if (Embed.isEmbed(properties)) {\n      return properties as Block<SD, SN>;\n    }\n    return super.create<SD, SN>({\n      ...properties,\n      type: Embed.TYPE,\n    });\n  }\n\n  static isEmbed(maybeEmbed: any): maybeEmbed is Embed {\n    return Block.isBlock(maybeEmbed) && maybeEmbed.type === Embed.TYPE;\n  }\n}\n"],"file":"index.js"}