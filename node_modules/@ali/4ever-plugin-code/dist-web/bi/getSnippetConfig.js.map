{"version":3,"sources":["../../../src/bi/getSnippetConfig.tsx"],"names":["fuzzySearch","createCodeLanguages","insertCode","getSnippetConfig","_","next","trigger","list","config","triggerSuffix","fetchItems","map","key","title","alias","name","filterItems","text","items","searchText","slice","insertSnippet","controller","item","run","code","syntax","dispatch","mdType","info","from"],"mappings":";;;AACA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,mBAAT;AACA,SAASC,UAAT;;AAOA,IAAMC,gBAA4C,GAAG,SAA/CA,gBAA+C,CAACC,CAAD,EAAIC,IAAJ,EAAa;AAAA;;AAChE,MAAMC,OAAO,GAAG,eAAhB;AACA,MAAMC,IAAI,GAAGN,mBAAmB,EAAhC;AAEA,MAAMO,MAAkC,GAAG;AACzCF,IAAAA,OAAO,EAAPA,OADyC;AAEzCG,IAAAA,aAAa,EAAE,IAF0B;AAGzCC,IAAAA,UAAU;AAAA,iFAAE;AAAA;AAAA;AAAA;AAAA;AAAA,iDACHH,IAAI,CAACI,GAAL,CAAS;AAAA,sBAAGC,GAAH,QAAGA,GAAH;AAAA,sBAAQC,KAAR,QAAQA,KAAR;AAAA,sBAAeC,KAAf,QAAeA,KAAf;AAAA,yBAA4B;AAC1CF,oBAAAA,GAAG,EAAHA,GAD0C;AAE1CC,oBAAAA,KAAK,EAALA,KAF0C;AAG1CC,oBAAAA,KAAK,EAALA,KAH0C;AAI1CC,oBAAAA,IAAI,EAAEF;AAJoC,mBAA5B;AAAA,iBAAT,CADG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAH+B;AAWzCG,IAAAA,WAAW;AAAA,kFAAE,kBAAOC,IAAP,EAAqBC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,gBAAAA,UADK,GACQF,IAAI,CAACG,KAAL,CAAW,CAAX,CADR;;AAAA,oBAEND,UAFM;AAAA;AAAA;AAAA;;AAAA,kDAGFD,KAHE;;AAAA;AAAA,kDAKJlB,WAAW,CAACkB,KAAD,EAAQC,UAAR,EAAoB;AAAEP,kBAAAA,GAAG,EAAE;AAAP,iBAApB,CALP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAX8B;AAkBzCS,IAAAA,aAAa,EAAE,uBAACC,UAAD,EAAyBC,IAAzB,EAAkC;AAC/CD,MAAAA,UAAU,CAACE,GAAX,CAAe,UAAf,EAA2BtB,UAAU,CAAC;AAAEuB,QAAAA,IAAI,EAAE,EAAR;AAAYC,QAAAA,MAAM,EAAEH,IAAI,CAACX;AAAzB,OAAD,CAArC;AACAU,MAAAA,UAAU,CAACK,QAAX,CAAoB,6BAApB,EAAmD;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,IAAI,EAAEN,IAAI,CAACX,GAA7B;AAAkCkB,QAAAA,IAAI,EAAE;AAAxC,OAAnD;AACD;AArBwC,GAA3C;AAwBA,6CACGxB,OADH,IACaE,MADb,cAEKH,IAAI,EAFT;AAID,CAhCD;;AAkCA,eAAeF,gBAAf","sourcesContent":["import React from 'react';\nimport { fuzzySearch } from '@ali/4ever-utils';\nimport { Controller, Plugin, SnippetConfig, SnippetItemBase } from '@ali/4ever-cangjie';\nimport { createCodeLanguages } from '../utils/constants/languages';\nimport { insertCode } from './actions';\n\ninterface SnippetItem extends SnippetItemBase {\n  alias?: string[];\n  name: string;\n}\n\nconst getSnippetConfig: Plugin['getSnippetConfig'] = (_, next) => {\n  const trigger = '```[\\\\w\\+#]*$';\n  const list = createCodeLanguages();\n\n  const config: SnippetConfig<SnippetItem> = {\n    trigger,\n    triggerSuffix: '^$',\n    fetchItems: async () => {\n      return list.map(({ key, title, alias }) => ({\n        key,\n        title,\n        alias,\n        name: title,\n      }));\n    },\n    filterItems: async (text: string, items) => {\n      const searchText = text.slice(3);\n      if (!searchText) {\n        return items;\n      }\n      return fuzzySearch(items, searchText, { key: 'title' });\n    },\n    insertSnippet: (controller: Controller, item) => {\n      controller.run('onAction', insertCode({ code: '', syntax: item.key }));\n      controller.dispatch('createTriggerMarkdownAction', { mdType: 'code', info: item.key, from: 'snippet' });\n    },\n  };\n\n  return {\n    [trigger]: config,\n    ...next(),\n  }\n};\n\nexport default getSnippetConfig;"],"file":"getSnippetConfig.js"}