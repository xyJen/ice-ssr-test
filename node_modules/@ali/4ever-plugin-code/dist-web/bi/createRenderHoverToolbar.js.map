{"version":3,"sources":["../../../src/bi/createRenderHoverToolbar.tsx"],"names":["React","TBItemSlot","ToolbarThemeSelect","ToolbarLanguageSelect","ToolbarLineWrapSelect","Code","createRenderHoverToolbar","config","locale","props","controller","getNode","buttonName","extraProps","onOverlayVisibleChange","node","isCode","focusedCodeKey","key"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,EAAoDC,qBAApD;AACA,OAAOC,IAAP;AAGA,eAAe,SAASC,wBAAT,CACbC,MADa,EAEmB;AAAA,uBACPA,MADO,CACxBC,MADwB;AAAA,MACxBA,MADwB,+BACf,EADe;AAEhC,SAAO,UAACC,KAAD,EAAQC,UAAR,EAAoBC,OAApB,EAAgC;AAAA,QAC7BC,UAD6B,GACFH,KADE,CAC7BG,UAD6B;AAAA,QACjBC,UADiB,GACFJ,KADE,CACjBI,UADiB;AAAA,QAE7BC,sBAF6B,GAEFD,UAFE,CAE7BC,sBAF6B;AAGrC,QAAMC,IAAI,GAAGJ,OAAO,EAApB;;AACA,QAAI,CAACN,IAAI,CAACW,MAAL,CAAYD,IAAZ,CAAL,EAAwB;AACtB,aAAO,IAAP;AACD;;AACD,QAAME,cAAc,GAAGF,IAAI,CAACG,GAA5B;;AACA,YAAQN,UAAR;AACE,WAAK,OAAL;AACE,4BACE,eAAC,UAAD;AAAY,UAAA,OAAO,EAAC;AAApB,wBACE,eAAC,kBAAD;AACE,UAAA,UAAU,EAAEF,UADd;AAEE,UAAA,sBAAsB,EAAEI,sBAF1B;AAGE,UAAA,cAAc,EAAEG,cAHlB;AAIE,UAAA,MAAM,EAAET;AAJV,UADF,CADF;;AAUF,WAAK,QAAL;AACE,4BACE,eAAC,UAAD;AAAY,UAAA,OAAO,EAAC,YAApB;AAAiC,UAAA,KAAK,EAAE;AAAxC,wBACE,eAAC,qBAAD;AACE,UAAA,UAAU,EAAEE,UADd;AAEE,UAAA,sBAAsB,EAAEI,sBAF1B;AAGE,UAAA,cAAc,EAAEG,cAHlB;AAIE,UAAA,MAAM,EAAET;AAJV,UADF,CADF;;AAUF,WAAK,UAAL;AACE,4BACE,eAAC,UAAD;AAAY,UAAA,OAAO,EAAC;AAApB,wBACE,eAAC,qBAAD;AACE,UAAA,UAAU,EAAEE,UADd;AAEE,UAAA,sBAAsB,EAAEI,sBAF1B;AAGE,UAAA,cAAc,EAAEG,cAHlB;AAIE,UAAA,MAAM,EAAET;AAJV,UADF,CADF;;AAUF;AAAS,eAAO,IAAP;AAlCX;AAoCD,GA5CD;AA6CD","sourcesContent":["import * as React from 'react';\nimport { TBItemSlot } from '@ali/we-design-next';\nimport { ToolbarThemeSelect, ToolbarLanguageSelect, ToolbarLineWrapSelect } from './components/next';\nimport Code from '../mo/models';\nimport type { BiPlugin } from '@ali/4ever-cangjie';\n\nexport default function createRenderHoverToolbar(\n  config: any\n): BiPlugin['renderHoverToolbar'] {\n  const { locale = {}  } = config;\n  return (props, controller, getNode) => {\n    const { buttonName, extraProps } = props;\n    const { onOverlayVisibleChange } = extraProps;\n    const node = getNode();\n    if (!Code.isCode(node)) {\n      return null;\n    }\n    const focusedCodeKey = node.key;\n    switch (buttonName) {\n      case 'theme':\n        return (\n          <TBItemSlot display='iconButton'>\n            <ToolbarThemeSelect\n              controller={controller}\n              onOverlayVisibleChange={onOverlayVisibleChange}\n              focusedCodeKey={focusedCodeKey}\n              locale={locale}\n            />\n          </TBItemSlot>\n        );\n      case 'syntax':\n        return (\n          <TBItemSlot display='textSelect' width={110}>\n            <ToolbarLanguageSelect\n              controller={controller}\n              onOverlayVisibleChange={onOverlayVisibleChange}\n              focusedCodeKey={focusedCodeKey}\n              locale={locale}\n            />\n          </TBItemSlot>\n        );\n      case 'lineWrap':\n        return (\n          <TBItemSlot display='iconSelect'>\n            <ToolbarLineWrapSelect\n              controller={controller}\n              onOverlayVisibleChange={onOverlayVisibleChange}\n              focusedCodeKey={focusedCodeKey}\n              locale={locale}\n            />\n          </TBItemSlot>\n        );\n      default: return null;\n    }\n  };\n}\n"],"file":"createRenderHoverToolbar.js"}