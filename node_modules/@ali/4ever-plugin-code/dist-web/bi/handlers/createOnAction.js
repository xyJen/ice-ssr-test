import { Commands, RangeSelection, TextPoint } from '@ali/4ever-cangjie';
import { CODE_CHANGE, CODE_FOCUS_TO_CODE_EDITOR, CODE_FOCUS_TO_TEXT_EDITOR, CODE_REMOVE, CODE_BLUR, CODE_INSERT, CODE_CHANGE_DATA, CODE_TRANSFORM } from "../actions";
import updateCode from "../commands/updateCode";
import removeCode from "../commands/removeCode";
import createInsertCode from "../commands/insertCode";
import { transform } from "../commands/transform";
import { biActions as basicActions } from '@ali/4ever-plugin-basic';
import resetFocusedCode from "../commands/resetFocusedCode";
import { FOCUSED_CODE } from "../constants/value";
import { generateKey } from '@ali/4ever-utils';
import { setFocusState } from "../store";
export default function createOnAction(config) {
  return function onAction(action, controller, next) {
    var document = controller.value.document;
    var type = action.type,
        payload = action.payload;

    if (type === CODE_CHANGE) {
      var _ref = payload,
          node = _ref.node,
          patches = _ref.patches;
      var textNode = node.getFirstText();
      var opts = patches.map(function (patch) {
        return {
          selection: RangeSelection.fromJSON({
            anchor: {
              key: textNode.key,
              offset: patch.offset
            },
            focus: {
              key: textNode.key,
              offset: patch.type === 'insert' ? patch.offset : patch.offset + patch.value.length
            }
          }),
          content: patch.type === 'delete' ? '' : patch.value
        };
      });
      controller.withoutPending(function (editor) {
        opts.forEach(function (opt) {
          editor.command(Commands.insertTextAtRange, opt.selection, opt.content);
        });
      });
    }

    if (type === CODE_CHANGE_DATA) {
      var _ref2 = payload,
          _node = _ref2.node,
          data = _ref2.data;

      if (_node) {
        return controller.command(updateCode, _node, data);
      }

      return controller.command(resetFocusedCode);
    }

    if (type === CODE_FOCUS_TO_CODE_EDITOR) {
      var _ref3 = payload,
          _node2 = _ref3.node; // 代码块focus === 仓颉失焦，这时候手动更改选区到代码块

      var codeAnchor = TextPoint.create({
        key: _node2.getFirstNode().key,
        offset: 0
      });
      var range = RangeSelection.create({
        anchor: codeAnchor,
        focus: codeAnchor
      });
      controller.command(Commands.select, range);
      return controller.withoutNormalizing(function () {
        var _basicActions$createM;

        controller.run('onAction', basicActions.createMergeDataAction((_basicActions$createM = {}, _basicActions$createM[FOCUSED_CODE] = _node2.key, _basicActions$createM)));
        controller.command(Commands.blur);
      });
    }

    if (type === CODE_FOCUS_TO_TEXT_EDITOR) {
      var _ref4 = payload,
          _ref4$direction = _ref4.direction,
          direction = _ref4$direction === void 0 ? 'down' : _ref4$direction,
          _node3 = _ref4.node;
      controller.withoutNormalizing(function () {
        var _basicActions$createM2;

        controller.command(Commands.focus);

        if (direction === 'left') {
          controller.command(Commands.moveToStartOfNode, _node3);
        } // 回到代码块的上个段落


        if (direction === 'up') {
          var previousBlock = document.getPreviousBlock(_node3.key);

          if (previousBlock) {
            controller.command(Commands.moveToEndOfNode, previousBlock).flush();
          } else {
            controller.command(Commands.moveToStartOfNode, _node3);
          }
        } // 回到代码块的下个段落


        if (direction === 'down') {
          var nextBlock = document.getNextBlock(_node3.key);

          if (nextBlock) {
            controller.command(Commands.moveToStartOfNode, nextBlock);
          } else {
            controller.command(Commands.moveToEndOfNode, _node3);
          }
        }

        controller.run('onAction', basicActions.createMergeDataAction((_basicActions$createM2 = {}, _basicActions$createM2[FOCUSED_CODE] = null, _basicActions$createM2)));
      });
      return controller;
    }

    if (type === CODE_REMOVE) {
      var _ref5 = payload,
          _node4 = _ref5.node;
      return controller.command(removeCode, _node4.key).command(Commands.focus);
    }

    if (type === CODE_INSERT) {
      var _ref6 = payload,
          code = _ref6.code,
          theme = _ref6.theme,
          syntax = _ref6.syntax;
      var id = generateKey(); // eslint-disable-next-line no-param-reassign

      setFocusState(id, true);
      return controller.command(createInsertCode(config), id, code, syntax, theme);
    }

    if (type === CODE_TRANSFORM) {
      var _id = generateKey();

      setFocusState(_id, true);
      return controller.command(transform, config, _id);
    }

    if (type === CODE_BLUR) {
      var _basicActions$createM3;

      controller.run('onAction', basicActions.createMergeDataAction((_basicActions$createM3 = {}, _basicActions$createM3[FOCUSED_CODE] = null, _basicActions$createM3)));
      return controller;
    }

    return next();
  };
}
//# sourceMappingURL=createOnAction.js.map