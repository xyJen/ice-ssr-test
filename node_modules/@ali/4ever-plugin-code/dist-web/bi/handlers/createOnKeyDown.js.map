{"version":3,"sources":["../../../../src/bi/handlers/createOnKeyDown.ts"],"names":["Commands","hotkeys","isKeyHotkey","stubFalse","trimStart","insertCode","isInCode","shouldPreventEvent","createCodeLanguages","DEFAULT_LANGUAGE","isEnterHotKey","languages","createOnKeyDown","config","enableInsert","isInsertHotKey","hotKey","disabledSyntaxes","onKeyDown","event","controller","next","value","selection","focusBlock","focus","isCollapsed","query","excludeColumns","type","isAtEndOfNode","syntax","matched","text","match","alias","includes","toLowerCase","mode","find","lang","title","toLocaleLowerCase","key","preventDefault","command","moveAnchorBackward","length","del","run","code","dispatch","mdType","info","isDeleteBackward","isDeleteForward","blocks","filter","block","forEach","document","getNode","removeNodeByKey"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport { Controller, Commands, hotkeys } from '@ali/4ever-cangjie';\nimport { isKeyHotkey } from 'is-hotkey';\nimport { stubFalse, trimStart } from 'lodash-es';\nimport { CodePluginConfig } from '../types';\nimport { insertCode } from '../actions';\nimport isInCode from '../queries/isInCode';\nimport shouldPreventEvent from '../queries/shouldPreventEvent';\n;\nimport { createCodeLanguages, DEFAULT_LANGUAGE } from '../../utils/constants/languages';\n\nconst isEnterHotKey = isKeyHotkey('enter');\n\nconst languages = createCodeLanguages();\n\nexport default function createOnKeyDown(\n  config: CodePluginConfig,\n  enableInsert = true,\n) {\n  const isInsertHotKey = config.hotKey ? isKeyHotkey(config.hotKey) : stubFalse;\n  const disabledSyntaxes = config.disabledSyntaxes || [];\n\n  return function onKeyDown(\n    event: React.KeyboardEvent,\n    controller: Controller,\n    next: () => void,\n  ) {\n    const { selection, focusBlock } = controller.value;\n\n    if (!selection) {\n      return next();\n    }\n\n    const { focus, isCollapsed } = selection;\n\n    if (shouldPreventEvent(event, controller)) {\n      return controller;\n    }\n\n    if (controller.query('isSelectionInTable', { excludeColumns: true })) {\n      return next();\n    }\n\n    if (isCollapsed) {\n      // 若当前段落存在三个 ```syntax，且在末尾换行，则创建代码块\n      if (\n        enableInsert &&\n        focusBlock &&\n        focusBlock.type !== 'code' &&\n        focus.isAtEndOfNode(focusBlock) &&\n        isEnterHotKey(event)\n      ) {\n        let syntax = DEFAULT_LANGUAGE;\n        const matched = trimStart(focusBlock.text).match(/(```|···)([\\w\\-_\\#]*)$/);\n        if (matched) {\n          const alias = matched[2];\n          if (disabledSyntaxes.includes(alias.toLowerCase())) {\n            return next();\n          }\n          const mode = languages.find(\n            (lang) => lang.title.toLowerCase() === alias.toLocaleLowerCase() ||\n              (lang.alias || []).includes(alias),\n          );\n          if (mode) {\n            syntax = mode.key;\n          }\n          event.preventDefault();\n          controller\n            .command(Commands.moveAnchorBackward, `\\`\\`\\`${alias}`.length)\n            .command(Commands.del);\n          controller.run('onAction', insertCode({ code: '', syntax }));\n          controller.dispatch('createTriggerMarkdownAction', { mdType: 'code', info: mode?.key });\n          return controller;\n        }\n      }\n    } else if (\n      (hotkeys.isDeleteBackward(event) || hotkeys.isDeleteForward(event)) &&\n      isInCode(controller)\n    ) {\n      event.preventDefault();\n      const { blocks } = controller.value;\n      controller.command(Commands.del);\n      // 如果选区两边code中内容为空，会导致无法删除的问题，这里需要再次判断并删除\n      blocks.filter(block => block.type === 'code').forEach(block => {\n        const { document } = controller.value;\n        if (document.getNode(block.key)) controller.command(Commands.removeNodeByKey, block.key);\n      });\n      return controller;\n    }\n\n    if (enableInsert && isInsertHotKey(event)) {\n      event.preventDefault();\n      controller.run('onAction', insertCode({}));\n      return controller;\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnKeyDown.js"}