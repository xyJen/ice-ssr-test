/* eslint-disable import/no-extraneous-dependencies */
import { Commands, hotkeys } from '@ali/4ever-cangjie';
import { isKeyHotkey } from 'is-hotkey';
import { stubFalse, trimStart } from 'lodash-es';
import { insertCode } from "../actions";
import isInCode from "../queries/isInCode";
import shouldPreventEvent from "../queries/shouldPreventEvent";
;
import { createCodeLanguages, DEFAULT_LANGUAGE } from "../../utils/constants/languages";
var isEnterHotKey = isKeyHotkey('enter');
var languages = createCodeLanguages();
export default function createOnKeyDown(config, enableInsert) {
  if (enableInsert === void 0) {
    enableInsert = true;
  }

  var isInsertHotKey = config.hotKey ? isKeyHotkey(config.hotKey) : stubFalse;
  var disabledSyntaxes = config.disabledSyntaxes || [];
  return function onKeyDown(event, controller, next) {
    var _controller$value = controller.value,
        selection = _controller$value.selection,
        focusBlock = _controller$value.focusBlock;

    if (!selection) {
      return next();
    }

    var focus = selection.focus,
        isCollapsed = selection.isCollapsed;

    if (shouldPreventEvent(event, controller)) {
      return controller;
    }

    if (controller.query('isSelectionInTable', {
      excludeColumns: true
    })) {
      return next();
    }

    if (isCollapsed) {
      // 若当前段落存在三个 ```syntax，且在末尾换行，则创建代码块
      if (enableInsert && focusBlock && focusBlock.type !== 'code' && focus.isAtEndOfNode(focusBlock) && isEnterHotKey(event)) {
        var syntax = DEFAULT_LANGUAGE;
        var matched = trimStart(focusBlock.text).match(/(```|···)([\w\-_\#]*)$/);

        if (matched) {
          var alias = matched[2];

          if (disabledSyntaxes.includes(alias.toLowerCase())) {
            return next();
          }

          var mode = languages.find(function (lang) {
            return lang.title.toLowerCase() === alias.toLocaleLowerCase() || (lang.alias || []).includes(alias);
          });

          if (mode) {
            syntax = mode.key;
          }

          event.preventDefault();
          controller.command(Commands.moveAnchorBackward, ("```" + alias).length).command(Commands.del);
          controller.run('onAction', insertCode({
            code: '',
            syntax: syntax
          }));
          controller.dispatch('createTriggerMarkdownAction', {
            mdType: 'code',
            info: mode == null ? void 0 : mode.key
          });
          return controller;
        }
      }
    } else if ((hotkeys.isDeleteBackward(event) || hotkeys.isDeleteForward(event)) && isInCode(controller)) {
      event.preventDefault();
      var blocks = controller.value.blocks;
      controller.command(Commands.del); // 如果选区两边code中内容为空，会导致无法删除的问题，这里需要再次判断并删除

      blocks.filter(function (block) {
        return block.type === 'code';
      }).forEach(function (block) {
        var document = controller.value.document;
        if (document.getNode(block.key)) controller.command(Commands.removeNodeByKey, block.key);
      });
      return controller;
    }

    if (enableInsert && isInsertHotKey(event)) {
      event.preventDefault();
      controller.run('onAction', insertCode({}));
      return controller;
    }

    return next();
  };
}
//# sourceMappingURL=createOnKeyDown.js.map