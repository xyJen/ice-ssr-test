{"version":3,"sources":["../../../../src/bi/utils/findClosestCodeSetting.ts"],"names":["CodeModel","getCodeDataSetting","code","targetSyntax","data","syntax","theme","findClosestCodeSetting","document","anchorNode","findClosest","dire","findCodeFun","key","getPreviousBlock","getNextBlock","maybeCode","isCode","result"],"mappings":"AACA,OAAOA,SAAP;;AAOA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAgBC,YAAhB,EAAmE;AAAA,aAClED,IAAI,CAACE,IAD6D;AAAA,MACpFC,MADoF,QACpFA,MADoF;AAAA,MAC5EC,KAD4E,QAC5EA,KAD4E;;AAE5F,MAAIH,YAAY,IAAIA,YAAY,KAAKE,MAArC,EAA6C;AAC3C,WAAO;AAAEA,MAAAA,MAAM,EAANA,MAAF;AAAUC,MAAAA,KAAK,EAALA;AAAV,KAAP;AACD,GAFD,MAEO,IAAI,CAACH,YAAL,EAAmB;AACxB,WAAO;AAAEE,MAAAA,MAAM,EAANA,MAAF;AAAUC,MAAAA,KAAK,EAALA;AAAV,KAAP;AACD;;AACD,SAAO,IAAP;AACD,CARD;;AAUA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,QAAD,EAAqBC,UAArB,EAAuCN,YAAvC,EAA0F;AACvH,WAASO,WAAT,CAAqBC,IAArB,EAAqE;AACnE,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD;AAAA,aAAiBF,IAAI,KAAK,MAAT,GAAkBH,QAAQ,CAACM,gBAAT,CAA0BD,GAA1B,CAAlB,GAAmDL,QAAQ,CAACO,YAAT,CAAsBF,GAAtB,CAApE;AAAA,KAApB;;AACA,QAAIG,SAAS,GAAGJ,WAAW,CAACH,UAAU,CAACI,GAAZ,CAA3B;;AACA,WAAOG,SAAP,EAAkB;AAChB,UAAIhB,SAAS,CAACiB,MAAV,CAAiBD,SAAjB,CAAJ,EAAiC;AAC/B,YAAME,MAAM,GAAGjB,kBAAkB,CAACe,SAAD,EAAYb,YAAZ,CAAjC;AACA,YAAIe,MAAJ,EAAY,OAAOA,MAAP;AACb;;AACDF,MAAAA,SAAS,GAAGJ,WAAW,CAACI,SAAS,CAACH,GAAX,CAAvB;AACD;;AACD,WAAO,IAAP;AACD;;AACD,SAAOH,WAAW,CAAC,MAAD,CAAX,IAAuBA,WAAW,CAAC,MAAD,CAAzC;AACD,CAdD;;AAgBA,eAAeH,sBAAf","sourcesContent":["import { Document, Node, Element } from \"@ali/4ever-cangjie\";\nimport CodeModel from '../../mo/models/index'\n\ntype CodeConfigResult = {\n  syntax?: string;\n  theme?: string;\n}\n\nconst getCodeDataSetting = (code: Element, targetSyntax?: string): CodeConfigResult | null => {\n  const { syntax, theme } = code.data as CodeConfigResult;\n  if (targetSyntax && targetSyntax === syntax) {\n    return { syntax, theme };\n  } else if (!targetSyntax) {\n    return { syntax, theme };\n  }\n  return null;\n};\n\nconst findClosestCodeSetting = (document: Document, anchorNode: Node, targetSyntax?: string): CodeConfigResult | null => {\n  function findClosest(dire: 'prev' | 'next'): CodeConfigResult | null {\n    const findCodeFun = (key: string) => dire === 'prev' ? document.getPreviousBlock(key) : document.getNextBlock(key);\n    let maybeCode = findCodeFun(anchorNode.key);\n    while (maybeCode) {\n      if (CodeModel.isCode(maybeCode)) {\n        const result = getCodeDataSetting(maybeCode, targetSyntax);\n        if (result) return result;\n      }\n      maybeCode = findCodeFun(maybeCode.key);\n    }\n    return null;\n  }\n  return findClosest('prev') || findClosest('next');\n};\n\nexport default findClosestCodeSetting;\n"],"file":"findClosestCodeSetting.js"}