import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TBItemSlot } from '@ali/we-design-next';
import { ToolbarThemeSelect, ToolbarLanguageSelect, ToolbarLineWrapSelect } from "./components/next";
import Code from "../mo/models";
export default function createRenderHoverToolbar(config) {
  var _config$locale = config.locale,
      locale = _config$locale === void 0 ? {} : _config$locale;
  return function (props, controller, getNode) {
    var buttonName = props.buttonName,
        extraProps = props.extraProps;
    var onOverlayVisibleChange = extraProps.onOverlayVisibleChange;
    var node = getNode();

    if (!Code.isCode(node)) {
      return null;
    }

    var focusedCodeKey = node.key;

    switch (buttonName) {
      case 'theme':
        return /*#__PURE__*/_createElement(TBItemSlot, {
          display: "iconButton"
        }, /*#__PURE__*/_createElement(ToolbarThemeSelect, {
          controller: controller,
          onOverlayVisibleChange: onOverlayVisibleChange,
          focusedCodeKey: focusedCodeKey,
          locale: locale
        }));

      case 'syntax':
        return /*#__PURE__*/_createElement(TBItemSlot, {
          display: "textSelect",
          width: 110
        }, /*#__PURE__*/_createElement(ToolbarLanguageSelect, {
          controller: controller,
          onOverlayVisibleChange: onOverlayVisibleChange,
          focusedCodeKey: focusedCodeKey,
          locale: locale
        }));

      case 'lineWrap':
        return /*#__PURE__*/_createElement(TBItemSlot, {
          display: "iconSelect"
        }, /*#__PURE__*/_createElement(ToolbarLineWrapSelect, {
          controller: controller,
          onOverlayVisibleChange: onOverlayVisibleChange,
          focusedCodeKey: focusedCodeKey,
          locale: locale
        }));

      default:
        return null;
    }
  };
}
//# sourceMappingURL=createRenderHoverToolbar.js.map