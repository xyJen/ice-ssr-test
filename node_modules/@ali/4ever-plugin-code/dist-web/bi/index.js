import _extends from "@babel/runtime/helpers/extends";
import createOnKeyDown from "./handlers/createOnKeyDown";
import createOnAction from "./handlers/createOnAction";
import createRenderBlock from "./createRenderBlock";
import createToolbar from "./createToolbar";
import shouldPreventEvent from "./queries/shouldPreventEvent";
import lazyRenderStrategy from "../common/queries/lazyRenderStrategy";
import insertCode from "./commands/insertCode";
import removeCode from "./commands/removeCode";
import updateCode from "./commands/updateCode";
import quickInsert from "./quickInsertConfig";
import menubar from "./menubar";
import createOnCangjieSelect from "./handlers/createOnCangjieSelect";
import moFactory from "../mo/index";
import createRenderHoverToolbar from "./createRenderHoverToolbar";
import getSnippetConfig from "./getSnippetConfig";

function handleEvent(event, controller, next) {
  if (shouldPreventEvent(event, controller)) {
    return controller;
  }

  return next();
}

var commands = {
  insertCode: insertCode(),
  removeCode: removeCode,
  updateCode: updateCode
};
export var biFactory = function biFactory(configs) {
  var codeConfig = configs.code || {};
  return _extends({}, moFactory({}), {
    commands: commands,
    queries: {
      lazyRenderStrategy: lazyRenderStrategy
    },
    onKeyDown: createOnKeyDown(codeConfig),
    onAction: createOnAction(codeConfig),
    onBeforeInput: handleEvent,
    onCompositionStart: handleEvent,
    onCompositionEnd: handleEvent,
    renderNode: createRenderBlock(codeConfig),
    renderHoverToolbar: createRenderHoverToolbar(codeConfig),
    locale: codeConfig.locale,
    toolbar: createToolbar(codeConfig),
    menubar: menubar,
    quickInsert: quickInsert,
    onCangjieSelect: createOnCangjieSelect(),
    getSnippetConfig: getSnippetConfig,
    models: {
      klass: 'block',
      type: 'code'
    }
  });
};
//# sourceMappingURL=index.js.map