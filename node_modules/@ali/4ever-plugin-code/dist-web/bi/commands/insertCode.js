import { Commands, Block, Text } from '@ali/4ever-cangjie';
import { isNil } from 'lodash-es';
import { biActions as basicActions } from '@ali/4ever-plugin-basic';
import { FOCUSED_CODE } from "../constants/value";
import findClosestCodeSetting from "../utils/findClosestCodeSetting";
import { DEFAULT_LANGUAGE } from "../../utils/constants/languages";
import { DEFAULT_THEME } from "../../utils/constants/themes";
export default function createInsertCode(config) {
  return function insertCode(controller, id, code, syntax, theme) {
    var _basicActions$createM;

    var _controller$value = controller.value,
        focusBlock = _controller$value.focusBlock,
        selection = _controller$value.selection,
        blocks = _controller$value.blocks,
        document = _controller$value.document;

    if (!selection || !focusBlock) {
      return controller;
    } // 代码行之间保证有空行


    if (focusBlock.type === 'code') {
      controller.command(Commands.insertBlock, {
        type: 'paragraph'
      });
    } // 防止段落被 split


    if (selection.isCollapsed && !selection.focus.isAtEndOfNode(focusBlock)) {
      controller.command(Commands.moveToEndOfBlock);
    }

    var codeSetting = (config == null ? void 0 : config.getDefaultSetting) && config.getDefaultSetting();

    var _ref = findClosestCodeSetting(document, focusBlock, syntax) || {},
        _ref$syntax = _ref.syntax,
        closestSyntax = _ref$syntax === void 0 ? DEFAULT_LANGUAGE : _ref$syntax,
        _ref$theme = _ref.theme,
        closestTheme = _ref$theme === void 0 ? DEFAULT_THEME : _ref$theme;

    var defaultTheme = codeSetting != null && codeSetting.theme ? codeSetting.theme : closestTheme;
    var defaultSyntax = codeSetting != null && codeSetting.syntax ? codeSetting.syntax : closestSyntax;
    var data = {
      syntax: isNil(syntax) ? defaultSyntax : syntax,
      theme: isNil(theme) ? defaultTheme : theme,
      height: null,
      id: id
    };
    var text = code;

    if (isNil(code)) {
      text = selection.isExpanded ? blocks.map(function (block) {
        return block.text;
      }).join('\n') : '';
    }

    var codeNode = Block.create({
      type: 'code',
      data: data,
      nodes: [Text.create(text)]
    });
    controller.run('onAction', basicActions.createInsertBlockWithoutExtraBlankAction({
      node: codeNode
    }));
    controller.run('onAction', basicActions.createMergeDataAction((_basicActions$createM = {}, _basicActions$createM[FOCUSED_CODE] = codeNode.key, _basicActions$createM)));
    return controller;
  };
}
//# sourceMappingURL=insertCode.js.map