{"version":3,"sources":["../../../../src/bi/components/createSelect.tsx"],"names":["React","Select","SelectButton","SelectOption","Option","capitalize","useScrollableContent","createSelect","options","createList","name","search","props","onChange","tip","value","locale","renderTrigger","showArrow","style","filterOption","inputTriggerText","onVisibleChange","visible","useState","selected","setSelected","useEffect","handleChange","useCallback","val","onStopPropagation","evt","stopPropagation","scrollableContent","getScrollableContent","window","document","body","list","useMemo","filter","l","show","undefined","map","key","title","memo"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport * as React from 'react';\nimport { Select as SelectButton, SelectOption as Option } from '@ali/we-design';\nimport { capitalize } from 'lodash-es';\nimport {\n  useScrollableContent,\n} from '@ali/4ever-cangjie';\nimport { CodePluginConfig } from '../types';\n\nexport interface SelectOptions {\n  name: string;\n  createList: (\n    locale: CodePluginConfig['locale'],\n  ) => Array<{ title: React.ReactNode; key: string; show?: boolean; }>;\n  search?: boolean;\n}\n\nexport interface SelectProps {\n  value: string;\n  tip: string;\n  onChange: (value: string) => void;\n  locale: CodePluginConfig['locale'];\n  renderTrigger?: (value: any) => JSX.Element;\n  showArrow?: boolean;\n  style?: React.CSSProperties;\n  filterOption?: boolean | ((search: string, option: React.ReactNode) => boolean);\n  inputTriggerText?: (value: string) => string;\n  visible?: boolean;\n  onVisibleChange?: (v: boolean) => void;\n}\n\nexport default function createSelect(options: SelectOptions) {\n  const { createList, name, search } = options;\n  const Select: React.FC<SelectProps> = (props) => {\n    const { onChange, tip, value, locale, renderTrigger, showArrow, style, filterOption, inputTriggerText, onVisibleChange, visible } = props;\n    const [selected, setSelected] = React.useState(value);\n\n    React.useEffect(() => {\n      setSelected(value);\n    }, [value]);\n\n    const handleChange = React.useCallback(\n      (val: string) => {\n        onChange(val);\n      },\n      [onChange],\n    );\n\n    // code 不是 void，需要手动屏蔽事件传递\n    const onStopPropagation = React.useCallback((evt: any) => {\n      evt.stopPropagation();\n    }, []);\n\n    const scrollableContent = useScrollableContent();\n    const getScrollableContent = React.useCallback(() => {\n      return scrollableContent || window.document.body;\n    }, [scrollableContent]);\n\n    const list = React.useMemo(() => createList(locale).filter((l) => l.show !== false), [locale]);\n    return (\n      // onKeyDown 不阻止传递会导致删除、光标移动等操作影响编辑器\n      // onMouseDown 不阻止传递会导致首次点击时，搜索框不会聚焦\n      <div data-select-value={selected} onKeyDown={onStopPropagation} onClick={onStopPropagation} onMouseDown={onStopPropagation}>\n        <SelectButton\n          className={`code-block-${name}-select`}\n          testid={`code-block-${name}-select`}\n          title={tip}\n          value={selected}\n          onChange={handleChange}\n          style={style}\n          renderTrigger={renderTrigger}\n          showArrow={!!showArrow}\n          role={`code${capitalize(name)}`}\n          mode={ search ? 'search' : undefined }\n          filterOption={filterOption}\n          inputTriggerText={inputTriggerText}\n          getContainer={getScrollableContent}\n          placement=\"bottomLeft\"\n          // @ts-ignore we-design upgrade\n          disableDomAlign\n          onVisibleChange={onVisibleChange}\n          visible={visible}\n        >\n          {\n              list.map(l => (\n                <Option\n                  value={l.key}\n                  key={l.key}\n                  testid={l.key}\n                  role={`code${capitalize(name)}${capitalize(l.key)}`}\n                >\n                  <span>{l.title}</span>\n                </Option>\n              ))\n            }\n        </SelectButton>\n      </div>\n    );\n  };\n  return React.memo(Select);\n}\n"],"file":"createSelect.js"}