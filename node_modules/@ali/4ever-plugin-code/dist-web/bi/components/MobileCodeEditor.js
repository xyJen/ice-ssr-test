/* eslint-disable react/destructuring-assignment */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { CangjieSelectEvent, Selection, EdgePoint } from '@ali/4ever-cangjie';
import { useOnClickOutside } from '@ali/4ever-component';
import { DEFAULT_THEME } from "../../utils/constants/themes";
import SimpleCode from "../../components/SimpleCode";

var CodeEditor = function CodeEditor(props) {
  var locale = props.locale,
      node = props.node,
      controller = props.controller;
  var data = node.data;
  var _data$theme = data.theme,
      theme = _data$theme === void 0 ? DEFAULT_THEME : _data$theme,
      height = data.height,
      _data$wrap = data.wrap,
      wrap = _data$wrap === void 0 ? false : _data$wrap;
  var codeRef = React.useRef(null);
  var wrapperRef = React.useRef(null);

  var _React$useState = React.useState(false),
      selected = _React$useState[0],
      setSelected = _React$useState[1];

  var isPreviewing = controller.query('isQuickPreview');
  var handleClickOutside = React.useCallback(function () {
    // 延迟让toolbar消失，避免组件销毁导致无法删除，400是toolbar逻辑防抖时间
    setTimeout(function () {
      setSelected(false);
    }, 400);
  }, []);
  var handleSelect = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    setSelected(true);
  }, []);
  var handleCursor = React.useCallback(function () {
    // 移动端不知道为什么无法 focus 在 code 元素上，若不处理，光标会回到上一个地方，导致页面跳动。先 hack, click 后光标移动到代码块左端
    var leftPoint = EdgePoint.create({
      key: node.key,
      edge: 'before'
    });
    controller.run('onCangjieSelect', CangjieSelectEvent({
      selection: Selection.create({
        anchor: leftPoint,
        focus: leftPoint
      })
    }));
  }, [controller, node]);
  useOnClickOutside(codeRef, handleClickOutside, false, function (target) {
    var _document$querySelect;

    // 目前难以获取整个 toolbar 的 dom ref，先临时处理 delete button 解决无法删除的 bug；后续改造成基于 isSelected 判断是否展示 toolbar
    return ((_document$querySelect = document.querySelector('div[data-testid="code-block-remove"]')) == null ? void 0 : _document$querySelect.contains(target)) || false;
  });
  return /*#__PURE__*/_createElement("div", {
    ref: wrapperRef,
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/_createElement(SimpleCode, {
    ref: codeRef,
    code: node.text,
    theme: theme,
    height: height,
    node: node,
    onTouchStart: handleSelect,
    onMouseDown: handleSelect,
    onClick: handleCursor,
    lineWrapping: wrap
  }));
};

export default /*#__PURE__*/React.memo(CodeEditor);
//# sourceMappingURL=MobileCodeEditor.js.map