import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { MenuItem, InlineMenuItem } from '@ali/we-design';
import { insertCode, transformCode } from "../actions";
;
import { CODE_INSERT_HOT_KEY_TIP } from "../utils/hotKeyTips";
import { CodeRole } from "../../utils/role";
var CODE_MENU_STYLE = {
  whiteSpace: 'nowrap'
};

function WithCodeMenu(Component) {
  return function CodeMenu(props) {
    var menuItem = props.menuItem,
        controller = props.controller;

    var action = menuItem.action,
        title = menuItem.title,
        extra = menuItem.extra,
        rest = _objectWithoutPropertiesLoose(menuItem, ["action", "title", "extra"]);

    var value = controller.value;

    var handleClick = function handleClick() {
      if (action && action === 'format') {
        return controller.run('onAction', transformCode());
      }

      controller.run('onAction', insertCode());
    };

    var isDisabled = React.useMemo(function () {
      return controller.query('isSelectionInLinkCard') || controller.query('isSelectionInSubjectHeading');
    }, [value]);
    return /*#__PURE__*/_createElement(Component, _extends({
      disabled: isDisabled,
      style: CODE_MENU_STYLE,
      extra: extra !== undefined ? extra : CODE_INSERT_HOT_KEY_TIP
    }, rest, {
      onClick: handleClick,
      role: CodeRole.code
    }), title || '');
  };
}

export var menu = WithCodeMenu(MenuItem);
export var inlineMenu = WithCodeMenu(InlineMenuItem);
//# sourceMappingURL=Menu.js.map