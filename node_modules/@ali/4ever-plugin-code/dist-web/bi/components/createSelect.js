/* eslint-disable @typescript-eslint/no-explicit-any */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Select as SelectButton, SelectOption as Option } from '@ali/we-design';
import { capitalize } from 'lodash-es';
import { useScrollableContent } from '@ali/4ever-cangjie';
export default function createSelect(options) {
  var createList = options.createList,
      name = options.name,
      search = options.search;

  var Select = function Select(props) {
    var onChange = props.onChange,
        tip = props.tip,
        value = props.value,
        locale = props.locale,
        renderTrigger = props.renderTrigger,
        showArrow = props.showArrow,
        style = props.style,
        filterOption = props.filterOption,
        inputTriggerText = props.inputTriggerText,
        onVisibleChange = props.onVisibleChange,
        visible = props.visible;

    var _React$useState = React.useState(value),
        selected = _React$useState[0],
        setSelected = _React$useState[1];

    React.useEffect(function () {
      setSelected(value);
    }, [value]);
    var handleChange = React.useCallback(function (val) {
      onChange(val);
    }, [onChange]); // code 不是 void，需要手动屏蔽事件传递

    var onStopPropagation = React.useCallback(function (evt) {
      evt.stopPropagation();
    }, []);
    var scrollableContent = useScrollableContent();
    var getScrollableContent = React.useCallback(function () {
      return scrollableContent || window.document.body;
    }, [scrollableContent]);
    var list = React.useMemo(function () {
      return createList(locale).filter(function (l) {
        return l.show !== false;
      });
    }, [locale]);
    return (
      /*#__PURE__*/
      // onKeyDown 不阻止传递会导致删除、光标移动等操作影响编辑器
      // onMouseDown 不阻止传递会导致首次点击时，搜索框不会聚焦
      _createElement("div", {
        "data-select-value": selected,
        onKeyDown: onStopPropagation,
        onClick: onStopPropagation,
        onMouseDown: onStopPropagation
      }, /*#__PURE__*/_createElement(SelectButton, {
        className: "code-block-" + name + "-select",
        testid: "code-block-" + name + "-select",
        title: tip,
        value: selected,
        onChange: handleChange,
        style: style,
        renderTrigger: renderTrigger,
        showArrow: !!showArrow,
        role: "code" + capitalize(name),
        mode: search ? 'search' : undefined,
        filterOption: filterOption,
        inputTriggerText: inputTriggerText,
        getContainer: getScrollableContent,
        placement: "bottomLeft" // @ts-ignore we-design upgrade
        ,
        disableDomAlign: true,
        onVisibleChange: onVisibleChange,
        visible: visible
      }, list.map(function (l) {
        return /*#__PURE__*/_createElement(Option, {
          value: l.key,
          key: l.key,
          testid: l.key,
          role: "code" + capitalize(name) + capitalize(l.key)
        }, /*#__PURE__*/_createElement("span", null, l.title));
      })))
    );
  };

  return /*#__PURE__*/React.memo(Select);
}
//# sourceMappingURL=createSelect.js.map