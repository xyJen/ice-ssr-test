import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TBIconSelect } from '@ali/we-design-next';
import { IconAutoWrap, IconOverflow, HoverToolbarHooks } from '@ali/4ever-component';
import { CodeRole } from "../../../utils/role";
import getCurrentCode from "../../queries/getCurrentCode";
import { changeCodeData } from "../../actions";

var _ref = /*#__PURE__*/_createElement(IconAutoWrap, null);

var _ref2 = /*#__PURE__*/_createElement(IconOverflow, null);

export var ToolbarLineWrapSelect = function ToolbarLineWrapSelect(props) {
  var _code$data;

  var locale = props.locale,
      focusedCodeKey = props.focusedCodeKey,
      controller = props.controller,
      onOverlayVisibleChange = props.onOverlayVisibleChange;
  var code = getCurrentCode(controller.value, focusedCodeKey);

  var _React$useState = React.useState(code != null && (_code$data = code.data) != null && _code$data.wrap ? 'on' : 'off'),
      value = _React$useState[0],
      setValue = _React$useState[1];

  var getContainer = HoverToolbarHooks.useGetContainer();

  var _HoverToolbarHooks$us = HoverToolbarHooks.usePopoverVisible('code.lineWrap', onOverlayVisibleChange),
      isOverlayVisible = _HoverToolbarHooks$us[0],
      setOverlayVisible = _HoverToolbarHooks$us[1];

  var options = React.useMemo(function () {
    return [{
      key: 'on',
      title: locale.wrapOpen,
      icon: _ref,
      testid: 'option-on'
    }, {
      key: 'off',
      title: locale.wrapClose,
      icon: _ref2,
      testid: 'option-off'
    }];
  }, []);
  var handleChange = React.useCallback(function (val) {
    var codeBlock = getCurrentCode(controller.value, focusedCodeKey);

    if (codeBlock) {
      controller.run('onAction', changeCodeData(codeBlock, {
        wrap: val === 'on'
      }));
      setValue(val);
    }
  }, [controller, focusedCodeKey]);
  return /*#__PURE__*/_createElement(TBIconSelect, {
    value: value,
    options: options,
    onChange: handleChange,
    onVisibleChange: setOverlayVisible,
    overlayVisible: isOverlayVisible,
    getContainer: getContainer,
    tooltip: locale.wrapTitle,
    testid: "bi-toolbar-code-wrap",
    role: CodeRole.codeWrap
  });
};
//# sourceMappingURL=ToolbarLineWrapSelect.js.map