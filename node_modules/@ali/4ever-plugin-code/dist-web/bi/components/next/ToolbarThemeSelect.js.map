{"version":3,"sources":["../../../../../src/bi/components/next/ToolbarThemeSelect.tsx"],"names":["React","Popover","TBIconButton","Menu","IconPalette","HoverToolbarHooks","CodeRole","getCurrentCode","changeCodeData","DEFAULT_THEME","createThemeMenuItems","ToolbarThemeSelect","props","controller","locale","focusedCodeKey","onOverlayVisibleChange","getContainer","useGetContainer","usePopoverVisible","isOverlayVisible","setOverlayVisible","code","value","useState","data","theme","setTheme","handleChange","useCallback","themeKey","codeBlock","run","themeTitle","undefined","codeTheme"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAASC,OAAT,EAAkBC,YAAlB,EAAgCC,IAAhC,QAA4C,qBAA5C;AAEA,SAASC,WAAT,EAAsBC,iBAAtB,QAA+C,sBAA/C;AACA,SAASC,QAAT;AACA,OAAOC,cAAP;AAEA,SAASC,cAAT;AACA,SAASC,aAAT,EAAwBC,oBAAxB;;yBA4Cc,eAAC,WAAD,O;;AAnCd,OAAO,IAAMC,kBAA8C,GAAG,SAAjDA,kBAAiD,CAACC,KAAD,EAAW;AAAA;;AAAA,MAC/DC,UAD+D,GACAD,KADA,CAC/DC,UAD+D;AAAA,MACnDC,MADmD,GACAF,KADA,CACnDE,MADmD;AAAA,MAC3CC,cAD2C,GACAH,KADA,CAC3CG,cAD2C;AAAA,MAC3BC,sBAD2B,GACAJ,KADA,CAC3BI,sBAD2B;AAEvE,MAAMC,YAAY,GAAGZ,iBAAiB,CAACa,eAAlB,EAArB;;AAFuE,8BAGzBb,iBAAiB,CAACc,iBAAlB,CAAoC,YAApC,EAAkDH,sBAAlD,CAHyB;AAAA,MAGhEI,gBAHgE;AAAA,MAG9CC,iBAH8C;;AAIvE,MAAMC,IAAI,GAAGf,cAAc,CAACM,UAAU,CAACU,KAAZ,EAAmBR,cAAnB,CAA3B;;AAJuE,wBAK7Cf,KAAK,CAACwB,QAAN,CAAe,CAAAF,IAAI,QAAJ,0BAAAA,IAAI,CAAEG,IAAN,gCAAYC,KAAZ,KAAqBjB,aAApC,CAL6C;AAAA,MAKhEiB,KALgE;AAAA,MAKzDC,QALyD;;AAOvE,MAAMC,YAAY,GAAG5B,KAAK,CAAC6B,WAAN,CACnB,gBAAgB;AAAA,QAAdC,QAAc;AACd,QAAMC,SAAS,GAAGxB,cAAc,CAACM,UAAU,CAACU,KAAZ,EAAmBR,cAAnB,CAAhC;;AACA,QAAIgB,SAAJ,EAAe;AACblB,MAAAA,UAAU,CAACmB,GAAX,CAAe,UAAf,EAA2BxB,cAAc,CAACuB,SAAD,EAAY;AAAEL,QAAAA,KAAK,EAAEI;AAAT,OAAZ,CAAzC;AACAH,MAAAA,QAAQ,CAACG,QAAD,CAAR;AACAT,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD;AACF,GARkB,EASnB,CAACR,UAAD,EAAaE,cAAb,EAA6BC,sBAA7B,CATmB,CAArB;AAYA,sBACE,eAAC,OAAD;AACE,IAAA,OAAO,EAAEI,gBADX;AAEE,IAAA,eAAe,EAAEC,iBAFnB;AAGE,IAAA,YAAY,EAAEJ,YAHhB;AAIE,IAAA,OAAO,eACL,eAAC,IAAD;AACE,qBAAa,+BADf;AAEE,MAAA,KAAK,EAAEP,oBAAoB,CAACI,MAAD,EAASY,KAAT,CAF7B;AAGE,MAAA,QAAQ,EAAEE;AAHZ,MALJ;AAWE,IAAA,SAAS,EAAC,YAXZ;AAYE,mBAAY;AAZd,kBAcE,eAAC,YAAD;AACE,IAAA,IAAI,OADN;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbP,MAAAA,iBAAiB,CAAC,CAACD,gBAAF,CAAjB;AACD,KAJH;AAKE,IAAA,KAAK,EAAEN,MAAM,CAACmB,UALhB;AAME,IAAA,OAAO,EAAEb,gBAAgB,GAAGc,SAAH,GAAepB,MAAM,CAACmB,UANjD;AAOE,IAAA,MAAM,EAAC,uBAPT;AAQE,IAAA,IAAI,EAAE3B,QAAQ,CAAC6B,SARjB;AASE,IAAA,MAAM,EAAEf;AATV,IAdF,CADF;AA4BD,CA/CM;AAiDP,eAAeT,kBAAf","sourcesContent":["import * as React from 'react';\nimport { Popover, TBIconButton, Menu } from '@ali/we-design-next';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { IconPalette, HoverToolbarHooks } from '@ali/4ever-component';\nimport { CodeRole } from '../../../utils/role';\nimport getCurrentCode from '../../queries/getCurrentCode';\nimport { CodePluginConfig } from '../../types';\nimport { changeCodeData } from '../../actions';\nimport { DEFAULT_THEME, createThemeMenuItems } from '../../../utils/constants/themes';\n\nexport interface ThemeSelectProps {\n  controller: Controller;\n  locale: CodePluginConfig['locale'];\n  focusedCodeKey?: string;\n  onOverlayVisibleChange: (v: boolean) => void;\n}\n\nexport const ToolbarThemeSelect: React.FC<ThemeSelectProps> = (props) => {\n  const { controller, locale, focusedCodeKey, onOverlayVisibleChange } = props;\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('code.theme', onOverlayVisibleChange);\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n  const [theme, setTheme] = React.useState(code?.data?.theme || DEFAULT_THEME);\n\n  const handleChange = React.useCallback(\n    ([themeKey]) => {\n      const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n      if (codeBlock) {\n        controller.run('onAction', changeCodeData(codeBlock, { theme: themeKey }));\n        setTheme(themeKey);\n        setOverlayVisible(false);\n      }\n    },\n    [controller, focusedCodeKey, onOverlayVisibleChange],\n  );\n\n  return (\n    <Popover\n      visible={isOverlayVisible}\n      onVisibleChange={setOverlayVisible}\n      getContainer={getContainer}\n      content={\n        <Menu\n          data-testid={'bi-toolbar-code-theme-options'}\n          items={createThemeMenuItems(locale, theme)}\n          onSelect={handleChange}\n        />\n      }\n      placement=\"bottomLeft\"\n      data-testid=\"overlay-bi-toolbar-code-theme\"\n    >\n      <TBIconButton\n        icon={<IconPalette />}\n        onClick={() => {\n          setOverlayVisible(!isOverlayVisible);\n        }}\n        title={locale.themeTitle}\n        tooltip={isOverlayVisible ? undefined : locale.themeTitle}\n        testid=\"bi-toolbar-code-theme\"\n        role={CodeRole.codeTheme}\n        active={isOverlayVisible}\n      />\n    </Popover>\n  )\n};\n\nexport default ToolbarThemeSelect;\n"],"file":"ToolbarThemeSelect.js"}