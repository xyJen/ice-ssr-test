{"version":3,"sources":["../../../../../src/bi/components/next/ToolbarLanguageSelect.tsx"],"names":["React","styled","Select","Tooltip","constants","HoverToolbarHooks","createCodeLanguages","DEFAULT_LANGUAGE","getCurrentCode","ToolbarLanguageSelectOld","changeCodeData","Selector","WrapSelect","ToolbarLanguageSelect","props","onOverlayVisibleChange","controller","focusedCodeKey","locale","getContainer","useGetContainer","usePopoverVisible","isOverlayVisible","setOverlayVisible","code","value","useState","data","syntax","currentValue","setValue","handleChange","useCallback","codeBlock","run","languages","useMemo","filterOptions","search","option","children","toLowerCase","includes","inputTriggerText","lang","find","l","key","title","languageTitle","width"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;qBAC4B,a;AAA5B,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,qBAAhC;AACA,SAAqBC,SAArB,QAAsC,oBAAtC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,mBAAT,EAA8BC,gBAA9B;AACA,OAAOC,cAAP;AACA,OAAOC,wBAAP;AACA,SAASC,cAAT;IAUQC,Q,GAAaP,S,CAAbO,Q;AAER,IAAMC,UAAU,gBAAGX,MAAM,CAACC,MAAD,CAAT,gSAAhB;AAsBA,OAAO,IAAMW,qBAA4D,GAAG,SAA/DA,qBAA+D,CAACC,KAAD,EAAW;AAAA;;AAAA,MAC7EC,sBAD6E,GACdD,KADc,CAC7EC,sBAD6E;AAAA,MACrDC,UADqD,GACdF,KADc,CACrDE,UADqD;AAAA,MACzCC,cADyC,GACdH,KADc,CACzCG,cADyC;AAAA,MACzBC,MADyB,GACdJ,KADc,CACzBI,MADyB;AAErF,MAAMC,YAAY,GAAGd,iBAAiB,CAACe,eAAlB,EAArB;;AAFqF,8BAGvCf,iBAAiB,CAACgB,iBAAlB,CAAoC,eAApC,EAAqDN,sBAArD,CAHuC;AAAA,MAG9EO,gBAH8E;AAAA,MAG5DC,iBAH4D;;AAIrF,MAAMC,IAAI,GAAGhB,cAAc,CAACQ,UAAU,CAACS,KAAZ,EAAmBR,cAAnB,CAA3B;;AAJqF,wBAKpDjB,KAAK,CAAC0B,QAAN,CAAe,CAAAF,IAAI,QAAJ,0BAAAA,IAAI,CAAEG,IAAN,gCAAYC,MAAZ,KAAsBrB,gBAArC,CALoD;AAAA,MAK9EsB,YAL8E;AAAA,MAKhEC,QALgE,uBAMrF;;;AAEA,MAAMC,YAAY,GAAG/B,KAAK,CAACgC,WAAN,CAAkB,UAACJ,MAAD,EAAY;AACjD,QAAMK,SAAS,GAAGzB,cAAc,CAACQ,UAAU,CAACS,KAAZ,EAAmBR,cAAnB,CAAhC;;AACA,QAAIgB,SAAJ,EAAe;AACbH,MAAAA,QAAQ,CAACF,MAAD,CAAR;AACAZ,MAAAA,UAAU,CAACkB,GAAX,CACE,UADF,EAEExB,cAAc,CAACuB,SAAD,EAAY;AACxBL,QAAAA,MAAM,EAANA;AADwB,OAAZ,CAFhB;AAMD;AACF,GAXoB,EAWlB,CAACZ,UAAD,EAAaC,cAAb,EAA6Ba,QAA7B,CAXkB,CAArB;AAaA,MAAMK,SAAS,GAAGnC,KAAK,CAACoC,OAAN,CAAc;AAAA,WAAM9B,mBAAmB,EAAzB;AAAA,GAAd,EAA2C,EAA3C,CAAlB;AACA,MAAM+B,aAAa,GAAGrC,KAAK,CAACgC,WAAN,CAAkB,UAACM,MAAD,EAAiBC,MAAjB,EAA6C;AAAA;;AACnF,WAAO,iBAAIA,MAAD,CAAgBzB,KAAnB,qBAAG,OAAuB0B,QAA1B,GAAqCC,WAArC,GAAmDC,QAAnD,CAA4DJ,MAAM,CAACG,WAAP,EAA5D,CAAP;AACD,GAFqB,EAEnB,EAFmB,CAAtB;AAGA,MAAME,gBAAgB,GAAG3C,KAAK,CAACgC,WAAN,CAAkB,UAACP,KAAD,EAAmB;AAAA;;AAC5D,QAAMmB,IAAI,GAAG,oBAAAT,SAAS,CAACU,IAAV,CAAe,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACC,GAAF,KAAUtB,KAAjB;AAAA,KAAf,sCAAwCuB,KAAxC,KAAiDvB,KAA9D;AACA,WAAOmB,IAAP;AACD,GAHwB,EAGtB,CAACT,SAAD,CAHsB,CAAzB;AAKA,sBACE,eAAC,OAAD;AAAS,IAAA,KAAK,EAAEjB,MAAM,CAAC+B,aAAvB;AAAsC,IAAA,SAAS,EAAC,QAAhD;AAAyD,IAAA,YAAY,EAAE9B;AAAvE,kBAeE,eAAC,wBAAD;AACE,IAAA,MAAM,EAAED,MADV;AAEE,IAAA,KAAK,EAAEM,IAAI,GAAGA,IAAI,CAACG,IAAL,CAAUC,MAAb,GAAsBrB,gBAFnC;AAGE,IAAA,QAAQ,EAAEwB,YAHZ;AAIE,IAAA,GAAG,EAAEb,MAAM,CAAC+B,aAJd;AAKE,IAAA,SAAS,MALX;AAME,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF,KANT;AASE,IAAA,YAAY,EAAEb,aAThB;AAUE,IAAA,gBAAgB,EAAEM,gBAVpB;AAWE,IAAA,OAAO,EAAErB,gBAXX;AAYE,IAAA,eAAe,EAAEC;AAZnB,IAfF,CADF;AAgCD,CA9DM","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Select, Tooltip } from '@ali/we-design-next';\nimport { Controller, constants } from '@ali/4ever-cangjie';\nimport { HoverToolbarHooks } from '@ali/4ever-component';\nimport { createCodeLanguages, DEFAULT_LANGUAGE } from '../../../utils/constants/languages';\nimport getCurrentCode from '../../queries/getCurrentCode';\nimport ToolbarLanguageSelectOld from '../LanguageSelect';\nimport { changeCodeData } from '../../actions';\nimport { CodePluginConfig } from '../../types';\n\nexport interface IToolbarLanguageSelectProps {\n  controller: Controller;\n  focusedCodeKey?: string;\n  onOverlayVisibleChange: (v: boolean) => void;\n  locale: CodePluginConfig['locale'];\n}\n\nconst { Selector } = constants;\n\nconst WrapSelect = styled(Select)`\n  & .wdn-select-normal,&  .wdn-select-input {\n    height: 28px;\n    background: transparent;\n    &:hover{ background: rgba(25, 31, 37, 0.08) };\n  }\n    \n  input {\n    background: transparent;\n  }\n  span:not(.wdn-toolbar-select-value) {\n    margin: 0;\n    svg {\n      transition: transform 500ms;\n      transform: rotate(0deg);\n      width: 8px;\n      height: 8px;\n    }\n  }\n  width: 110px;\n`;\n\nexport const ToolbarLanguageSelect: React.FC<IToolbarLanguageSelectProps> = (props) => {\n  const { onOverlayVisibleChange, controller, focusedCodeKey, locale } = props;\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('code.language', onOverlayVisibleChange);\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n  const [currentValue, setValue] = React.useState(code?.data?.syntax || DEFAULT_LANGUAGE);\n  // const list = React.useMemo(() => createCodeLanguages(), []);\n\n  const handleChange = React.useCallback((syntax) => {\n    const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n    if (codeBlock) {\n      setValue(syntax);\n      controller.run(\n        'onAction',\n        changeCodeData(codeBlock, {\n          syntax,\n        }),\n      );\n    }\n  }, [controller, focusedCodeKey, setValue]);\n\n  const languages = React.useMemo(() => createCodeLanguages(), []);\n  const filterOptions = React.useCallback((search: string, option: React.ReactNode) => {\n    return `${(option as any).props?.children}`.toLowerCase().includes(search.toLowerCase());\n  }, []);\n  const inputTriggerText = React.useCallback((value: string) => {\n    const lang = languages.find((l) => l.key === value)?.title || value;\n    return lang;\n  }, [languages]);\n\n  return (\n    <Tooltip title={locale.languageTitle} placement=\"bottom\" getContainer={getContainer}>\n      {/* we-design-next 组件有很多功能未对齐，暂时还用老的组件 */}\n      {/* <WrapSelect\n        value={currentValue}\n        options={list}\n        onChange={handleChange}\n        visible={isOverlayVisible}\n        onVisibleChange={setOverlayVisible}\n        mode=\"input\"\n        getContainer={getContainer}\n        bordered={false}\n        {...{ [Selector.notEditable]: true }}\n        className=\"wdn-toolbar-item-select wdn-toolbar-item\"\n        data-testid='bi-toolbar-code-syntax'\n      /> */}\n      <ToolbarLanguageSelectOld\n        locale={locale}\n        value={code ? code.data.syntax : DEFAULT_LANGUAGE}\n        onChange={handleChange}\n        tip={locale.languageTitle}\n        showArrow\n        style={{\n          width: '110px',\n        }}\n        filterOption={filterOptions}\n        inputTriggerText={inputTriggerText}\n        visible={isOverlayVisible}\n        onVisibleChange={setOverlayVisible}\n      />\n    </Tooltip>\n  )\n}"],"file":"ToolbarLanguageSelect.js"}