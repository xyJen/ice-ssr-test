import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Popover, TBIconButton, Menu } from '@ali/we-design-next';
import { IconPalette, HoverToolbarHooks } from '@ali/4ever-component';
import { CodeRole } from "../../../utils/role";
import getCurrentCode from "../../queries/getCurrentCode";
import { changeCodeData } from "../../actions";
import { DEFAULT_THEME, createThemeMenuItems } from "../../../utils/constants/themes";

var _ref2 = /*#__PURE__*/_createElement(IconPalette, null);

export var ToolbarThemeSelect = function ToolbarThemeSelect(props) {
  var _code$data;

  var controller = props.controller,
      locale = props.locale,
      focusedCodeKey = props.focusedCodeKey,
      onOverlayVisibleChange = props.onOverlayVisibleChange;
  var getContainer = HoverToolbarHooks.useGetContainer();

  var _HoverToolbarHooks$us = HoverToolbarHooks.usePopoverVisible('code.theme', onOverlayVisibleChange),
      isOverlayVisible = _HoverToolbarHooks$us[0],
      setOverlayVisible = _HoverToolbarHooks$us[1];

  var code = getCurrentCode(controller.value, focusedCodeKey);

  var _React$useState = React.useState((code == null ? void 0 : (_code$data = code.data) == null ? void 0 : _code$data.theme) || DEFAULT_THEME),
      theme = _React$useState[0],
      setTheme = _React$useState[1];

  var handleChange = React.useCallback(function (_ref) {
    var themeKey = _ref[0];
    var codeBlock = getCurrentCode(controller.value, focusedCodeKey);

    if (codeBlock) {
      controller.run('onAction', changeCodeData(codeBlock, {
        theme: themeKey
      }));
      setTheme(themeKey);
      setOverlayVisible(false);
    }
  }, [controller, focusedCodeKey, onOverlayVisibleChange]);
  return /*#__PURE__*/_createElement(Popover, {
    visible: isOverlayVisible,
    onVisibleChange: setOverlayVisible,
    getContainer: getContainer,
    content: /*#__PURE__*/_createElement(Menu, {
      "data-testid": 'bi-toolbar-code-theme-options',
      items: createThemeMenuItems(locale, theme),
      onSelect: handleChange
    }),
    placement: "bottomLeft",
    "data-testid": "overlay-bi-toolbar-code-theme"
  }, /*#__PURE__*/_createElement(TBIconButton, {
    icon: _ref2,
    onClick: function onClick() {
      setOverlayVisible(!isOverlayVisible);
    },
    title: locale.themeTitle,
    tooltip: isOverlayVisible ? undefined : locale.themeTitle,
    testid: "bi-toolbar-code-theme",
    role: CodeRole.codeTheme,
    active: isOverlayVisible
  }));
};
export default ToolbarThemeSelect;
//# sourceMappingURL=ToolbarThemeSelect.js.map