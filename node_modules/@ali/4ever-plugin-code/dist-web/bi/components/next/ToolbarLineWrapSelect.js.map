{"version":3,"sources":["../../../../../src/bi/components/next/ToolbarLineWrapSelect.tsx"],"names":["React","TBIconSelect","IconAutoWrap","IconOverflow","HoverToolbarHooks","CodeRole","getCurrentCode","changeCodeData","ToolbarLineWrapSelect","props","locale","focusedCodeKey","controller","onOverlayVisibleChange","code","value","useState","data","wrap","setValue","getContainer","useGetContainer","usePopoverVisible","isOverlayVisible","setOverlayVisible","options","useMemo","key","title","wrapOpen","icon","testid","wrapClose","handleChange","useCallback","val","codeBlock","run","wrapTitle","codeWrap"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;qBAC4B,a;AAA5B,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,iBAArC,QAA8D,sBAA9D;AAEA,SAASC,QAAT;AAEA,OAAOC,cAAP;AACA,SAASC,cAAT;;wBAmBU,eAAC,YAAD,O;;yBAKA,eAAC,YAAD,O;;AAfV,OAAO,IAAMC,qBAA4D,GAAG,SAA/DA,qBAA+D,CAACC,KAAD,EAAW;AAAA;;AAAA,MAC7EC,MAD6E,GACdD,KADc,CAC7EC,MAD6E;AAAA,MACrEC,cADqE,GACdF,KADc,CACrEE,cADqE;AAAA,MACrDC,UADqD,GACdH,KADc,CACrDG,UADqD;AAAA,MACzCC,sBADyC,GACdJ,KADc,CACzCI,sBADyC;AAErF,MAAMC,IAAI,GAAGR,cAAc,CAACM,UAAU,CAACG,KAAZ,EAAmBJ,cAAnB,CAA3B;;AAFqF,wBAG3DX,KAAK,CAACgB,QAAN,CAAeF,IAAI,QAAJ,kBAAAA,IAAI,CAAEG,IAAN,wBAAYC,IAAZ,GAAmB,IAAnB,GAA0B,KAAzC,CAH2D;AAAA,MAG9EH,KAH8E;AAAA,MAGvEI,QAHuE;;AAIrF,MAAMC,YAAY,GAAGhB,iBAAiB,CAACiB,eAAlB,EAArB;;AAJqF,8BAKvCjB,iBAAiB,CAACkB,iBAAlB,CAAoC,eAApC,EAAqDT,sBAArD,CALuC;AAAA,MAK9EU,gBAL8E;AAAA,MAK5DC,iBAL4D;;AAOrF,MAAMC,OAAO,GAAGzB,KAAK,CAAC0B,OAAN,CAAc;AAAA,WAAM,CAAC;AACnCC,MAAAA,GAAG,EAAE,IAD8B;AAEnCC,MAAAA,KAAK,EAAElB,MAAM,CAACmB,QAFqB;AAGnCC,MAAAA,IAAI,MAH+B;AAInCC,MAAAA,MAAM,EAAE;AAJ2B,KAAD,EAKjC;AACDJ,MAAAA,GAAG,EAAE,KADJ;AAEDC,MAAAA,KAAK,EAAElB,MAAM,CAACsB,SAFb;AAGDF,MAAAA,IAAI,OAHH;AAIDC,MAAAA,MAAM,EAAE;AAJP,KALiC,CAAN;AAAA,GAAd,EAUZ,EAVY,CAAhB;AAYA,MAAME,YAAY,GAAGjC,KAAK,CAACkC,WAAN,CACnB,UAACC,GAAD,EAAiB;AACf,QAAMC,SAAS,GAAG9B,cAAc,CAACM,UAAU,CAACG,KAAZ,EAAmBJ,cAAnB,CAAhC;;AACA,QAAIyB,SAAJ,EAAe;AACbxB,MAAAA,UAAU,CAACyB,GAAX,CACE,UADF,EAEE9B,cAAc,CAAC6B,SAAD,EAAY;AACxBlB,QAAAA,IAAI,EAAEiB,GAAG,KAAK;AADU,OAAZ,CAFhB;AAMAhB,MAAAA,QAAQ,CAACgB,GAAD,CAAR;AACD;AACF,GAZkB,EAanB,CAACvB,UAAD,EAAaD,cAAb,CAbmB,CAArB;AAgBA,sBACE,eAAC,YAAD;AACE,IAAA,KAAK,EAAEI,KADT;AAEE,IAAA,OAAO,EAAEU,OAFX;AAGE,IAAA,QAAQ,EAAEQ,YAHZ;AAIE,IAAA,eAAe,EAAET,iBAJnB;AAKE,IAAA,cAAc,EAAED,gBALlB;AAME,IAAA,YAAY,EAAEH,YANhB;AAOE,IAAA,OAAO,EAAEV,MAAM,CAAC4B,SAPlB;AAQE,IAAA,MAAM,EAAC,sBART;AASE,IAAA,IAAI,EAAEjC,QAAQ,CAACkC;AATjB,IADF;AAaD,CAhDM","sourcesContent":["import React from 'react';\nimport { TBIconSelect } from '@ali/we-design-next';\nimport { IconAutoWrap, IconOverflow, HoverToolbarHooks } from '@ali/4ever-component';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { CodeRole } from '../../../utils/role';\nimport { CodePluginConfig } from '../../types';\nimport getCurrentCode from '../../queries/getCurrentCode';\nimport { changeCodeData } from '../../actions';\n\nexport interface IToolbarLineWrapSelectProps {\n  controller: Controller;\n  locale: CodePluginConfig['locale'];\n  focusedCodeKey?: string;\n  onOverlayVisibleChange: (v: boolean) => void;\n}\n\nexport const ToolbarLineWrapSelect: React.FC<IToolbarLineWrapSelectProps> = (props) => {\n  const { locale, focusedCodeKey, controller, onOverlayVisibleChange } = props;\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n  const [value, setValue] = React.useState(code?.data?.wrap ? 'on' : 'off');\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('code.lineWrap', onOverlayVisibleChange);\n\n  const options = React.useMemo(() => [{\n    key: 'on',\n    title: locale.wrapOpen,\n    icon: <IconAutoWrap />,\n    testid: 'option-on',\n  }, {\n    key: 'off',\n    title: locale.wrapClose,\n    icon: <IconOverflow />,\n    testid: 'option-off',\n  }], []);\n\n  const handleChange = React.useCallback(\n    (val: string) => {\n      const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n      if (codeBlock) {\n        controller.run(\n          'onAction',\n          changeCodeData(codeBlock, {\n            wrap: val === 'on',\n          }),\n        );\n        setValue(val);\n      }\n    },\n    [controller, focusedCodeKey],\n  );\n\n  return (\n    <TBIconSelect\n      value={value}\n      options={options}\n      onChange={handleChange}\n      onVisibleChange={setOverlayVisible}\n      overlayVisible={isOverlayVisible}\n      getContainer={getContainer}\n      tooltip={locale.wrapTitle}\n      testid=\"bi-toolbar-code-wrap\"\n      role={CodeRole.codeWrap}\n    />\n  )\n}"],"file":"ToolbarLineWrapSelect.js"}