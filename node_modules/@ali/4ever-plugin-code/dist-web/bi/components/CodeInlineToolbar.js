import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { copyToClipboard } from '@ali/4ever-utils';
import { Button, DeleteNormal } from '@ali/we-design';
import { ToolbarCopyNormal } from '@ali/we-icon';
import { InlineToolbar } from '@ali/4ever-component';
import { removeCode } from "../actions";
import { IconButton } from '@ali/we-toolbar';
;
var codeMobileLayout = [{
  toolButtons: [{
    name: 'code.del'
  }]
}];

var _ref = /*#__PURE__*/_createElement(ToolbarCopyNormal, null);

var _ref3 = /*#__PURE__*/_createElement(DeleteNormal, null);

var CodeInlineToolbar = function CodeInlineToolbar(props) {
  var locale = props.locale,
      controller = props.controller,
      node = props.node,
      isMobile = props.isMobile,
      focusedCodeKey = props.focusedCodeKey,
      triggerNode = props.triggerNode;
  var handleCopy = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    copyToClipboard(node.text || '');
  }, [node]);
  var handleDel = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    controller.run('onAction', removeCode(node));
  }, [controller, node]);

  var CopyCodeButton = function CopyCodeButton() {
    return /*#__PURE__*/_createElement(IconButton, {
      testid: "code-block-copy",
      onClick: handleCopy,
      title: locale.copy,
      icon: _ref
    });
  };

  var _ref2 = /*#__PURE__*/_createElement(Button, {
    testid: "code-block-remove",
    onClick: handleDel,
    bordered: false,
    icon: _ref3
  });

  var DelCodeButton = function DelCodeButton() {
    // 加上 title，二次点击 onClick 才生效
    return _ref2;
  };

  var customToolButtons = {
    'code.copy': CopyCodeButton,
    'code.del': DelCodeButton
  };

  if (isMobile) {
    return /*#__PURE__*/_createElement(InlineToolbar, {
      visible: true,
      triggerNode: triggerNode || undefined,
      inlineLayout: codeMobileLayout,
      customToolButtons: {
        'code.del': DelCodeButton
      }
    });
  }

  var moreToolButtons = [//{
  //  name: 'code.copy',
  //}, 
  {
    name: 'code.more',
    nodeKey: focusedCodeKey
  }];

  if (controller.query('canComment')) {
    moreToolButtons.unshift({
      name: 'comment'
    });
  }

  var codeToolbarLayout = [{
    toolButtons: [{
      name: 'code.theme',
      focusedCodeKey: focusedCodeKey
    }]
  }, {
    toolButtons: [{
      name: 'code.syntax',
      focusedCodeKey: focusedCodeKey
    }, {
      name: 'code.wrap',
      focusedCodeKey: focusedCodeKey
    }]
  }, {
    toolButtons: moreToolButtons
  }];
  return /*#__PURE__*/_createElement(InlineToolbar, {
    visible: true,
    triggerNode: triggerNode || undefined,
    inlineLayout: codeToolbarLayout,
    customToolButtons: customToolButtons,
    overlayClassName: "code-toolbar-overlay"
  });
};

export default CodeInlineToolbar;
//# sourceMappingURL=CodeInlineToolbar.js.map