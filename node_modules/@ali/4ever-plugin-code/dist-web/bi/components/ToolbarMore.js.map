{"version":3,"sources":["../../../../src/bi/components/ToolbarMore.tsx"],"names":["InlineToolbar","React","ToolbarCutNormal","ToolbarCopyNormal","ToolbarDeleteNormal","removeCode","ToolbarMore","props","controller","getContainer","nodeKey","locale","onClick","useCallback","type","copyOrCutNode","run","key","document","body","options","title","copy","icon","cut","node","value","getNode","rst","query","Promise","e","console","error"],"mappings":"AACA,SAASA,aAAT,QAA8B,iBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;qBAD4B,a;AAE5B,SACEC,gBADF,EAEEC,iBAFF,EAGEC,mBAHF,QAIO,cAJP;AAKA,SAASC,UAAT;AAEA;;wBA8BkB,eAAC,iBAAD,O;;yBAIA,eAAC,gBAAD,O;;yBAIA,eAAC,mBAAD,O;;AA3BlB,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA8C;AAAA,MACnDC,UADmD,GACLD,KADK,CACnDC,UADmD;AAAA,MACvCC,aADuC,GACLF,KADK,CACvCE,YADuC;AAAA,MACzBC,OADyB,GACLH,KADK,CACzBG,OADyB;AAAA,MAChBC,MADgB,GACLJ,KADK,CAChBI,MADgB;;AAE3D,MAAMC,QAAO,GAAGX,KAAK,CAACY,WAAN,CAAkB,UAACC,IAAD,EAAkB;AAClD,QAAIA,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,KAAhC,EAAuC;AACrCC,MAAAA,aAAa,CAACP,UAAD,EAAaM,IAAb,EAAmBJ,OAAnB,CAAb;AACD,KAFD,MAEO,IAAII,IAAI,KAAK,QAAb,EAAuB;AAC5BN,MAAAA,UAAU,CAACQ,GAAX,CAAe,UAAf,EAA2BX,UAAU,CAAC;AACpCY,QAAAA,GAAG,EAAEP;AAD+B,OAAD,CAArC;AAGD;AACF,GARe,EAQb,EARa,CAAhB;;AAUA,sBACE,eAAC,aAAD;AACE,IAAA,YAAY,EAAE;AAAA,aAAM,CAAAD,aAAY,QAAZ,YAAAA,aAAY,OAAQS,QAAQ,CAACC,IAAnC;AAAA,KADhB;AAEE,IAAA,cAAc,EAAE;AACdC,MAAAA,OAAO,EAAE,CACP,CAAC;AACCC,QAAAA,KAAK,EAAEV,MAAM,CAACW,IADf;AAECC,QAAAA,IAAI,MAFL;AAGCX,QAAAA,OAAO,EAAE;AAAA,iBAAMA,QAAO,CAAC,MAAD,CAAb;AAAA;AAHV,OAAD,EAIG;AACDS,QAAAA,KAAK,EAAEV,MAAM,CAACa,GAAP,IAAc,KADpB;AAEDD,QAAAA,IAAI,OAFH;AAGDX,QAAAA,OAAO,EAAE;AAAA,iBAAMA,QAAO,CAAC,KAAD,CAAb;AAAA;AAHR,OAJH,EAQG;AACDS,QAAAA,KAAK,EAAEV,MAAM,UADZ;AAEDY,QAAAA,IAAI,OAFH;AAGDX,QAAAA,OAAO,EAAE;AAAA,iBAAMA,QAAO,CAAC,QAAD,CAAb;AAAA;AAHR,OARH,CADO;AADK,KAFlB;AAmBE,IAAA,KAAK,EAAE;AAnBT,IADF;AAuBD;;AAED,SAASG,aAAT,CAAuBP,UAAvB,EAA+CM,IAA/C,EAAqEJ,OAArE,EAAsF;AACpF,MAAMe,IAAI,GAAGjB,UAAU,CAACkB,KAAX,CAAiBR,QAAjB,CAA0BS,OAA1B,CAAkCjB,OAAlC,CAAb;;AACA,MAAIe,IAAI,KAAK,IAAb,EAAmB;AACjB,QAAMG,GAAG,GAAGpB,UAAU,CAACqB,KAAX,CAAiB,WAAjB,EAA8BJ,IAA9B,CAAZ;;AACA,QAAIG,GAAG,YAAYE,OAAnB,EAA4B;AAC1BF,MAAAA,GAAG,SAAH,CAAU,UAACG,CAAD;AAAA,eAAOC,OAAO,CAACC,KAAR,CAAc,YAAd,EAA4BF,CAA5B,CAAP;AAAA,OAAV;AACD;;AACD,QAAIjB,IAAI,KAAK,KAAb,EAAoB;AAClBN,MAAAA,UAAU,CAACQ,GAAX,CAAe,UAAf,EAA2BX,UAAU,CAAC;AACpCY,QAAAA,GAAG,EAAEP;AAD+B,OAAD,CAArC;AAGD;AACF;AACF","sourcesContent":["import { Commands, Controller } from '@ali/4ever-cangjie';\nimport { InlineToolbar } from '@ali/we-toolbar';\nimport * as React from 'react';\nimport {\n  ToolbarCutNormal,\n  ToolbarCopyNormal,\n  ToolbarDeleteNormal,\n} from '@ali/we-icon';\nimport { removeCode } from '../actions';\nimport { CodeLocale } from '../types';\n;\n\nexport type MoreClickEvent = (type: 'copy' | 'cut' | 'delete') => void;\n\ninterface ToolbarMoreProps {\n  controller: Controller;\n  locale: CodeLocale;\n  getContainer: Function;\n  nodeKey: string;\n}\n\nexport default function ToolbarMore(props: ToolbarMoreProps) {\n  const { controller, getContainer, nodeKey, locale } = props;\n  const onClick = React.useCallback((type: string) => {\n    if (type === 'copy' || type === 'cut') {\n      copyOrCutNode(controller, type, nodeKey);\n    } else if (type === 'delete') {\n      controller.run('onAction', removeCode({\n        key: nodeKey\n      } as any));\n    }\n  }, []);\n\n  return (\n    <InlineToolbar\n      getContainer={() => getContainer?.() || document.body}\n      moreMenuConfig={{\n        options: [\n          [{\n            title: locale.copy,\n            icon: <ToolbarCopyNormal />,\n            onClick: () => onClick('copy'),\n          }, {\n            title: locale.cut || 'Cut',\n            icon: <ToolbarCutNormal />,\n            onClick: () => onClick('cut'),\n          }, {\n            title: locale.delete,\n            icon: <ToolbarDeleteNormal />,\n            onClick: () => onClick('delete'),\n          }],\n        ],\n      }}\n      width={300}\n    />\n  );\n}\n\nfunction copyOrCutNode(controller: Controller, type: 'copy' | 'cut', nodeKey: string) {\n  const node = controller.value.document.getNode(nodeKey);\n  if (node !== null) {\n    const rst = controller.query('copyNodes', node);\n    if (rst instanceof Promise) {\n      rst.catch((e) => console.error('copy error', e));\n    }\n    if (type === 'cut') {\n      controller.run('onAction', removeCode({\n        key: nodeKey\n      } as any));\n    }\n  }\n}\n"],"file":"ToolbarMore.js"}