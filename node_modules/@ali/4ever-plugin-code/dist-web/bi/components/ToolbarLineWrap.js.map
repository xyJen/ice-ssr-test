{"version":3,"sources":["../../../../src/bi/components/ToolbarLineWrap.tsx"],"names":["React","getCurrentCode","changeCodeData","createSelect","IconButton","ToolbarAutoWrapNormal","ToolbarOverflowNormal","WrapIcon","props","on","showTitle","locale","wrapOpen","wrapClose","WrapSelect","name","createList","title","key","ToolbarLineWrap","controller","focusedCodeKey","code","value","handleChange","useCallback","val","codeBlock","run","wrap","data","width"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport getCurrentCode from '../queries/getCurrentCode';\nimport { CodePluginConfig } from '../types';\nimport { changeCodeData } from '../actions';\nimport createSelect from './createSelect';\nimport { IconButton } from '@ali/we-toolbar';\nimport { ToolbarAutoWrapNormal, ToolbarOverflowNormal } from '@ali/we-icon';\n\nexport interface LineWrapProps {\n  controller: Controller;\n  locale: CodePluginConfig['locale'];\n  focusedCodeKey?: string;\n}\n\nfunction WrapIcon(props: {\n  on: boolean;\n  showTitle?: boolean;\n  locale: CodePluginConfig['locale'];\n}) {\n  const { on, showTitle, locale } = props;\n  if (on) {\n    return (\n      <IconButton icon={<ToolbarAutoWrapNormal />} showTitle={showTitle} title={locale.wrapOpen} />\n    )\n  } else {\n    return (\n      <IconButton icon={<ToolbarOverflowNormal />} showTitle={showTitle} title={locale.wrapClose} />\n    )\n  }\n}\n\nconst WrapSelect = createSelect({\n  name: 'wrap',\n  createList: (locale) => [\n    {\n      title: <WrapIcon showTitle locale={locale} on />,\n      key: 'on',\n    },\n    {\n      title: <WrapIcon showTitle locale={locale} on={false} />,\n      key: 'off',\n    },\n  ],\n});\n\nconst ToolbarLineWrap: React.FC<LineWrapProps> = (props) => {\n  const { controller, locale, focusedCodeKey } = props;\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n\n  const handleChange = React.useCallback(\n    (val: string) => {\n      const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n      controller.run(\n        'onAction',\n        changeCodeData(codeBlock, {\n          wrap: val === 'on',\n        }),\n      );\n    },\n    [controller, focusedCodeKey],\n  );\n\n  return (\n    <WrapSelect\n      locale={locale}\n      value={code?.data.wrap ? 'on' : 'off'}\n      onChange={handleChange}\n      tip=\"\"\n      renderTrigger={() => (\n        <WrapIcon locale={locale} on={code?.data.wrap} />\n      )}\n      showArrow\n      style={{\n        width: '48px',\n      }}\n    />\n  );\n};\nexport default ToolbarLineWrap;\n"],"file":"ToolbarLineWrap.js"}