{"version":3,"sources":["../../../../src/bi/components/ToolbarLanguageSelect.tsx"],"names":["React","LanguageSelect","getCurrentCode","changeCodeData","createCodeLanguages","DEFAULT_LANGUAGE","ToolbarLanguageSelect","props","controller","locale","focusedCodeKey","code","value","handleChange","useCallback","syntax","codeBlock","run","languages","useMemo","filterOptions","search","option","children","toLowerCase","includes","inputTriggerText","lang","find","l","key","title","data","languageTitle","width"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAC5B,OAAOC,cAAP;AACA,OAAOC,cAAP;AAEA,SAASC,cAAT;AACA,SAASC,mBAAT,EAA8BC,gBAA9B;;AAQA,IAAMC,qBAAoD,GAAG,SAAvDA,qBAAuD,CAACC,KAAD,EAAW;AAAA,MAC9DC,UAD8D,GACvBD,KADuB,CAC9DC,UAD8D;AAAA,MAClDC,MADkD,GACvBF,KADuB,CAClDE,MADkD;AAAA,MAC1CC,cAD0C,GACvBH,KADuB,CAC1CG,cAD0C;AAEtE,MAAMC,IAAI,GAAGT,cAAc,CAACM,UAAU,CAACI,KAAZ,EAAmBF,cAAnB,CAA3B;AAEA,MAAMG,YAAY,GAAGb,KAAK,CAACc,WAAN,CACnB,UAACC,MAAD,EAAY;AACV,QAAMC,SAAS,GAAGd,cAAc,CAACM,UAAU,CAACI,KAAZ,EAAmBF,cAAnB,CAAhC;AACAF,IAAAA,UAAU,CAACS,GAAX,CACE,UADF,EAEEd,cAAc,CAACa,SAAD,EAAY;AACxBD,MAAAA,MAAM,EAANA;AADwB,KAAZ,CAFhB;AAMD,GATkB,EAUnB,CAACP,UAAD,EAAaE,cAAb,CAVmB,CAArB;AAaA,MAAMQ,SAAS,GAAGlB,KAAK,CAACmB,OAAN,CAAc;AAAA,WAAMf,mBAAmB,EAAzB;AAAA,GAAd,EAA2C,EAA3C,CAAlB;AACA,MAAMgB,aAAa,GAAGpB,KAAK,CAACc,WAAN,CAAkB,UAACO,MAAD,EAAiBC,MAAjB,EAA6C;AAAA;;AACnF,WAAO,iBAAIA,MAAD,CAAgBf,KAAnB,qBAAG,OAAuBgB,QAA1B,GAAqCC,WAArC,GAAmDC,QAAnD,CAA4DJ,MAAM,CAACG,WAAP,EAA5D,CAAP;AACD,GAFqB,EAEnB,EAFmB,CAAtB;AAGA,MAAME,gBAAgB,GAAG1B,KAAK,CAACc,WAAN,CAAkB,UAACF,KAAD,EAAmB;AAAA;;AAC5D,QAAMe,IAAI,GAAG,oBAAAT,SAAS,CAACU,IAAV,CAAe,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACC,GAAF,KAAUlB,KAAjB;AAAA,KAAf,sCAAwCmB,KAAxC,KAAiDnB,KAA9D;AACA,WAAOe,IAAP;AACD,GAHwB,EAGtB,CAACT,SAAD,CAHsB,CAAzB;AAKA,sBACE,eAAC,cAAD;AACE,IAAA,MAAM,EAAET,MADV;AAEE,IAAA,KAAK,EAAEE,IAAI,GAAGA,IAAI,CAACqB,IAAL,CAAUjB,MAAb,GAAsBV,gBAFnC;AAGE,IAAA,QAAQ,EAAEQ,YAHZ;AAIE,IAAA,GAAG,EAAEJ,MAAM,CAACwB,aAJd;AAKE,IAAA,SAAS,MALX;AAME,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF,KANT;AASE,IAAA,YAAY,EAAEd,aAThB;AAUE,IAAA,gBAAgB,EAAEM;AAVpB,IADF;AAcD,CAxCD;;AAyCA,eAAepB,qBAAf","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport LanguageSelect from './LanguageSelect';\nimport getCurrentCode from '../queries/getCurrentCode';\nimport { CodePluginConfig } from '../types';\nimport { changeCodeData } from '../actions';\nimport { createCodeLanguages, DEFAULT_LANGUAGE } from '../../utils/constants/languages';\n\nexport interface LanguageSelectProps {\n  controller: Controller;\n  locale: CodePluginConfig['locale'];\n  focusedCodeKey?: string;\n}\n\nconst ToolbarLanguageSelect: React.FC<LanguageSelectProps> = (props) => {\n  const { controller, locale, focusedCodeKey } = props;\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n\n  const handleChange = React.useCallback(\n    (syntax) => {\n      const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n      controller.run(\n        'onAction',\n        changeCodeData(codeBlock, {\n          syntax,\n        }),\n      );\n    },\n    [controller, focusedCodeKey],\n  );\n\n  const languages = React.useMemo(() => createCodeLanguages(), []);\n  const filterOptions = React.useCallback((search: string, option: React.ReactNode) => {\n    return `${(option as any).props?.children}`.toLowerCase().includes(search.toLowerCase());\n  }, []);\n  const inputTriggerText = React.useCallback((value: string) => {\n    const lang = languages.find((l) => l.key === value)?.title || value;\n    return lang;\n  }, [languages]);\n\n  return (\n    <LanguageSelect\n      locale={locale}\n      value={code ? code.data.syntax : DEFAULT_LANGUAGE}\n      onChange={handleChange}\n      tip={locale.languageTitle}\n      showArrow\n      style={{\n        width: '110px',\n      }}\n      filterOption={filterOptions}\n      inputTriggerText={inputTriggerText}\n    />\n  );\n};\nexport default ToolbarLanguageSelect;\n"],"file":"ToolbarLanguageSelect.js"}