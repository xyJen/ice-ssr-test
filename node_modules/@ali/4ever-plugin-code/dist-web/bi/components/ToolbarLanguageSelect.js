import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import LanguageSelect from "./LanguageSelect";
import getCurrentCode from "../queries/getCurrentCode";
import { changeCodeData } from "../actions";
import { createCodeLanguages, DEFAULT_LANGUAGE } from "../../utils/constants/languages";

var ToolbarLanguageSelect = function ToolbarLanguageSelect(props) {
  var controller = props.controller,
      locale = props.locale,
      focusedCodeKey = props.focusedCodeKey;
  var code = getCurrentCode(controller.value, focusedCodeKey);
  var handleChange = React.useCallback(function (syntax) {
    var codeBlock = getCurrentCode(controller.value, focusedCodeKey);
    controller.run('onAction', changeCodeData(codeBlock, {
      syntax: syntax
    }));
  }, [controller, focusedCodeKey]);
  var languages = React.useMemo(function () {
    return createCodeLanguages();
  }, []);
  var filterOptions = React.useCallback(function (search, option) {
    var _props;

    return ("" + ((_props = option.props) == null ? void 0 : _props.children)).toLowerCase().includes(search.toLowerCase());
  }, []);
  var inputTriggerText = React.useCallback(function (value) {
    var _languages$find;

    var lang = ((_languages$find = languages.find(function (l) {
      return l.key === value;
    })) == null ? void 0 : _languages$find.title) || value;
    return lang;
  }, [languages]);
  return /*#__PURE__*/_createElement(LanguageSelect, {
    locale: locale,
    value: code ? code.data.syntax : DEFAULT_LANGUAGE,
    onChange: handleChange,
    tip: locale.languageTitle,
    showArrow: true,
    style: {
      width: '110px'
    },
    filterOption: filterOptions,
    inputTriggerText: inputTriggerText
  });
};

export default ToolbarLanguageSelect;
//# sourceMappingURL=ToolbarLanguageSelect.js.map