{"version":3,"sources":["../../../../src/bi/components/ToolbarThemeSelect.tsx"],"names":["React","getCurrentCode","IconButton","PaletteNormal","changeCodeData","ThemeSelect","DEFAULT_THEME","ToolbarThemeSelect","props","controller","locale","focusedCodeKey","code","value","handleChange","useCallback","theme","codeBlock","run","data","themeTitle"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAC5B,OAAOC,cAAP;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,aAAT,QAA8B,cAA9B;AAEA,SAASC,cAAT;AACA,OAAOC,WAAP;AACA,SAASC,aAAT;;wBA2BQ,eAAC,UAAD;AAAY,EAAA,IAAI,eAAE,eAAC,aAAD;AAAlB,E;;AAnBR,IAAMC,kBAA8C,GAAG,SAAjDA,kBAAiD,CAACC,KAAD,EAAW;AAAA,MACxDC,UADwD,GACjBD,KADiB,CACxDC,UADwD;AAAA,MAC5CC,MAD4C,GACjBF,KADiB,CAC5CE,MAD4C;AAAA,MACpCC,cADoC,GACjBH,KADiB,CACpCG,cADoC;AAEhE,MAAMC,IAAI,GAAGX,cAAc,CAACQ,UAAU,CAACI,KAAZ,EAAmBF,cAAnB,CAA3B;AAEA,MAAMG,YAAY,GAAGd,KAAK,CAACe,WAAN,CACnB,UAACC,KAAD,EAAW;AACT,QAAMC,SAAS,GAAGhB,cAAc,CAACQ,UAAU,CAACI,KAAZ,EAAmBF,cAAnB,CAAhC;AACAF,IAAAA,UAAU,CAACS,GAAX,CAAe,UAAf,EAA2Bd,cAAc,CAACa,SAAD,EAAY;AAAED,MAAAA,KAAK,EAALA;AAAF,KAAZ,CAAzC;AACD,GAJkB,EAKnB,CAACP,UAAD,EAAaE,cAAb,CALmB,CAArB;AAQA,sBACE,eAAC,WAAD;AACE,IAAA,KAAK,EAAEC,IAAI,GAAGA,IAAI,CAACO,IAAL,CAAUH,KAAb,GAAqBV,aADlC;AAEE,IAAA,QAAQ,EAAEQ,YAFZ;AAGE,IAAA,GAAG,EAAEJ,MAAM,CAACU,UAHd;AAIE,IAAA,MAAM,EAAEV,MAJV;AAKE,IAAA,aAAa,EAAE;AAAA;AAAA;AALjB,IADF;AAWD,CAvBD;;AAyBA,eAAeH,kBAAf","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport getCurrentCode from '../queries/getCurrentCode';\nimport { IconButton } from '@ali/we-toolbar';\nimport { PaletteNormal } from '@ali/we-icon';\nimport { CodePluginConfig } from '../types';\nimport { changeCodeData } from '../actions';\nimport ThemeSelect from './ThemeSelect';\nimport { DEFAULT_THEME } from '../../utils/constants/themes';\n\nexport interface ThemeSelectProps {\n  controller: Controller;\n  locale: CodePluginConfig['locale'];\n  focusedCodeKey?: string;\n}\n\nconst ToolbarThemeSelect: React.FC<ThemeSelectProps> = (props) => {\n  const { controller, locale, focusedCodeKey } = props;\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n\n  const handleChange = React.useCallback(\n    (theme) => {\n      const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n      controller.run('onAction', changeCodeData(codeBlock, { theme }));\n    },\n    [controller, focusedCodeKey],\n  );\n\n  return (\n    <ThemeSelect\n      value={code ? code.data.theme : DEFAULT_THEME}\n      onChange={handleChange}\n      tip={locale.themeTitle}\n      locale={locale}\n      renderTrigger={() => (\n        <IconButton icon={<PaletteNormal />}></IconButton>\n      )}\n    />\n  );\n};\n\nexport default ToolbarThemeSelect;\n"],"file":"ToolbarThemeSelect.js"}