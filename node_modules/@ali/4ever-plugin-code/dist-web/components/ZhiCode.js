import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Commands, useZoom } from '@ali/4ever-cangjie';
import getCodeHeight from "./Codemirror/utils";
import { theme as bambooTheme } from '@ali/4ever-utils';
import { MAX_HEIGHT } from "../utils/constants/dimension";
import { CodeMirrorLazy } from "./LazyCodemirror";

/**
 * TODO: 处理 code 与 cangjie 编辑器选区和复制的交互行为
 */
var Code = function Code(props) {
  var syntax = props.syntax,
      theme = props.theme,
      height = props.height,
      code = props.code,
      node = props.node,
      controller = props.controller,
      lineWrapping = props.lineWrapping,
      _props$print = props.print,
      print = _props$print === void 0 ? false : _props$print,
      rest = _objectWithoutPropertiesLoose(props, ["syntax", "theme", "height", "code", "node", "controller", "lineWrapping", "print"]);

  var wrapperRef = React.useRef(null);

  var _React$useState = React.useState(0),
      zoomHeight = _React$useState[0],
      setZoomHeight = _React$useState[1];

  var ref = React.useRef(null);
  var placeholderHeightRef = React.useRef(getCodeHeight(node));
  var _node$data$spacing = node.data.spacing,
      spacing = _node$data$spacing === void 0 ? {
    before: bambooTheme.code['margin-top'],
    after: bambooTheme.code['margin-bottom']
  } : _node$data$spacing;
  var before = spacing.before,
      after = spacing.after;
  var zoom = useZoom();
  var handleOutsideClick = React.useCallback(function (e) {
    var selection = window.getSelection();
    var wrapper = wrapperRef.current;

    if (!selection || !wrapper) {
      return;
    }

    if (wrapper.contains(selection.anchorNode) && wrapper.contains(selection.focusNode) && !wrapper.contains(e.target)) {
      var textarea = document.activeElement;
      selection.removeAllRanges(); // 移除选区的同时会导致 textarea 失焦，此处反选一下，保障首次 code-mirror blur 的时候不会致使 cangjie 失焦

      if (textarea instanceof HTMLTextAreaElement) {
        textarea.select();
      }
    }
  }, []);
  React.useEffect(function () {
    window.addEventListener('mousedown', handleOutsideClick);
    return function () {
      return window.removeEventListener('mousedown', handleOutsideClick);
    };
  }, [handleOutsideClick]);
  var handleSelectionChange = React.useCallback(function () {
    var nativeSelection = window.getSelection();
    var wrapper = wrapperRef.current;

    if (!nativeSelection || !wrapper) {
      return;
    }

    var selection = controller.value.selection; // 选择代码块的时候清空 cangjie 的选区

    if (wrapper.contains(nativeSelection.anchorNode) && wrapper.contains(nativeSelection.focusNode) && !selection.isCollapsed && selection && selection.isExpanded) {
      controller.command(Commands.moveToFocus);
    }
  }, [controller]);
  React.useEffect(function () {
    document.addEventListener('selectionchange', handleSelectionChange);
    return function () {
      return document.removeEventListener('selectionchange', handleSelectionChange);
    };
  }, [handleSelectionChange]);
  var options = React.useMemo(function () {
    return {
      readOnly: true
    };
  }, []);
  var handleCopy = React.useCallback(function (_, evt) {
    if (!controller.canCopy) {
      evt.preventDefault();
    }
  }, [controller]); // 目前 code 的内容区域选区交互没有处理，暂时禁止掉 contextmenu 的触发

  var handleContextMenu = React.useCallback(function (_, e) {
    e.stopPropagation();
    e.preventDefault();
  }, []);
  var handleMount = React.useCallback(function () {
    // mount 之后不再需要占位高度
    placeholderHeightRef.current = 0;
    var he = height || parseInt(getComputedStyle(ref.current).height, 10);

    if (he) {
      setZoomHeight(he);
    }
  }, [height]);
  var style = React.useMemo(function () {
    var s = {
      marginBottom: after + "px",
      marginTop: before + "px",
      marginLeft: bambooTheme.code['margin-left'] + "px",
      marginRight: bambooTheme.code['margin-right'] + "px",
      // eslint-disable-next-line no-nested-ternary
      height: !print ? height ? height + "px" : 'inherit' : 'auto',
      maxHeight: !print ? MAX_HEIGHT + "px" : 'none',
      // cm 未渲染时设置最小高度防止懒加载过程中高度剧烈抖动
      minHeight: placeholderHeightRef.current ? placeholderHeightRef.current : undefined,
      overflowY: 'visible'
    }; // https://alidocs.dingtalk.com/i/nodes/e5vdDPq4wYa8a4aeLn9wJj7nbm10NkB9?cid=134024%3A372551849&dontjump=true&nav=spaces&navQuery=spaceId%3Dnb9XJv4jyWLaXyAp

    if (zoom > 1) {
      s.width = 100 * zoom + "%";
      s.transform = "scale(" + 1 / zoom + ")";
      s.transformOrigin = '0px 0px';
      s.fontSize = 11 * zoom + "pt";
    }

    return s;
  }, [before, after, height, print, zoom]); // hack 兼容 zoom 模式

  var hackZoom = React.useMemo(function () {
    return zoomHeight > 0 && zoom > 1;
  }, [zoom, zoomHeight]);
  return /*#__PURE__*/_createElement("div", _extends({
    "data-type": "code"
  }, rest, {
    style: _extends({}, style, {
      height: hackZoom ? zoomHeight / zoom + "px" : style.height
    }),
    ref: ref
  }), /*#__PURE__*/_createElement(CodeMirrorLazy, {
    style: {
      userSelect: 'text',
      WebkitUserSelect: 'text',
      height: hackZoom ? zoomHeight + "px" : undefined
    },
    value: code,
    options: options,
    syntax: syntax,
    theme: theme,
    onContextMenu: handleContextMenu,
    codeMirrorRef: wrapperRef,
    onCopy: handleCopy,
    wrap: lineWrapping,
    print: print,
    onEditorMount: handleMount,
    controller: controller,
    node: node
  }));
};

export default /*#__PURE__*/React.memo(Code);
//# sourceMappingURL=ZhiCode.js.map