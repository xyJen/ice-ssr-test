import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import asyncGet from 'get-async';
import { createCodeLanguages } from "../../utils/constants/languages";
var languages = createCodeLanguages();
export function loadLanguageMode(_x) {
  return _loadLanguageMode.apply(this, arguments);
}

function _loadLanguageMode() {
  _loadLanguageMode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key) {
    var _languages$find;

    var mode;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mode = (_languages$find = languages.find(function (l) {
              return l.key === key;
            })) == null ? void 0 : _languages$find.mode;

            if (mode) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", key);

          case 3:
            _context.next = 5;
            return asyncGet("we-editor-code-language-" + key, function () {
              return import(
              /* webpackChunkName: "codemirror-lang-[request]" */
              "codemirror/mode/" + mode + "/" + mode + ".js");
            });

          case 5:
            return _context.abrupt("return", key);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadLanguageMode.apply(this, arguments);
}
//# sourceMappingURL=languageLoader.js.map