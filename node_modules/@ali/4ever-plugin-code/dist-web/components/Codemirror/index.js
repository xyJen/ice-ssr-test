import _extends from "@babel/runtime/helpers/extends";

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* eslint-disable no-unused-expressions */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import codemirror from 'codemirror'; // cidemirror addon

import 'codemirror/addon/scroll/simplescrollbars.js';
import 'codemirror/addon/edit/closebrackets.js';
import 'codemirror/addon/display/placeholder.js';
import 'codemirror/addon/search/searchcursor.js';
import { noop } from 'lodash-es';
import { environment, useZoom } from '@ali/4ever-cangjie';
import logger from '@ali/4ever-logger';
import { Wrapper } from "./styled";
import { diffsToPatchs } from "./diffMatch";
import { createCodeLanguages } from "../../utils/constants/languages";
import { loadLanguageMode } from "./languageLoader";
var BASE_OPTIONS = {
  lineNumbers: true,
  tabSize: 2,
  scrollbarStyle: 'overlay',
  autoCloseBrackets: true,
  undoDepth: 0
};

var useEventEffect = function useEventEffect(editor, eventName, callback) {
  var callbackRef = React.useRef(callback);
  React.useEffect(function () {
    callbackRef.current = callback;
  }, [callback]);
  React.useEffect(function () {
    if (editor) {
      var handleEvent = function handleEvent() {
        callbackRef.current.apply(callbackRef, arguments);
      };

      editor.on(eventName, handleEvent);
      return function () {
        return editor.off(eventName, handleEvent);
      };
    }

    return function () {};
  }, [eventName, editor]);
};

var VALUE_UPDATE_BY_PROPS_CHANGE = '__VALUE_UPDATE_BY_PROPS_CHANGE__';
var prevSelectedIndex = -1;
var prevFindText = '';
var FIND_NAME = 'find-and-replace';
var FIND_SELECTED_NAME = 'find-and-replace-selected';
var COLLAB_SELECTION_NAME = 'collab-selection';
var CodeMirror = /*#__PURE__*/React.forwardRef(function (props, forwardRef) {
  var value = props.value,
      _props$onEditorMount = props.onEditorMount,
      onEditorMount = _props$onEditorMount === void 0 ? noop : _props$onEditorMount,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      options = props.options,
      syntax = props.syntax,
      theme = props.theme,
      _props$wrap = props.wrap,
      wrap = _props$wrap === void 0 ? false : _props$wrap,
      _props$scale = props.scale,
      scale = _props$scale === void 0 ? 1.0 : _props$scale,
      style = props.style,
      _props$onChanges = props.onChanges,
      onChanges = _props$onChanges === void 0 ? noop : _props$onChanges,
      _props$onBlur = props.onBlur,
      onBlur = _props$onBlur === void 0 ? noop : _props$onBlur,
      _props$onFocus = props.onFocus,
      onFocus = _props$onFocus === void 0 ? noop : _props$onFocus,
      _props$onGutterClick = props.onGutterClick,
      onGutterClick = _props$onGutterClick === void 0 ? noop : _props$onGutterClick,
      _props$onMouseDown = props.onMouseDown,
      onMouseDown = _props$onMouseDown === void 0 ? noop : _props$onMouseDown,
      _props$onDBClick = props.onDBClick,
      onDBClick = _props$onDBClick === void 0 ? noop : _props$onDBClick,
      _props$onTouchStart = props.onTouchStart,
      onTouchStart = _props$onTouchStart === void 0 ? noop : _props$onTouchStart,
      _props$onKeyDown = props.onKeyDown,
      onKeyDown = _props$onKeyDown === void 0 ? noop : _props$onKeyDown,
      _props$onContextMenu = props.onContextMenu,
      onContextMenu = _props$onContextMenu === void 0 ? noop : _props$onContextMenu,
      _props$onCopy = props.onCopy,
      onCopy = _props$onCopy === void 0 ? noop : _props$onCopy,
      _props$onBeforeSelect = props.onBeforeSelectionChange,
      onBeforeSelectionChange = _props$onBeforeSelect === void 0 ? noop : _props$onBeforeSelect,
      collabSelections = props.collabSelections,
      placeholder = props.placeholder,
      _props$print = props.print,
      print = _props$print === void 0 ? false : _props$print,
      controller = props.controller,
      node = props.node;
  var ref = React.useRef(null);

  var _React$useState = React.useState(null),
      editor = _React$useState[0],
      setEditor = _React$useState[1]; // 用于标记当前是否由 onChange 触发导致 value 变化(非受控 => 受控)，此时 value 应该与 editor value 一致，防御性目的，防止无限循环


  var isLocalChange = React.useRef(false);
  React.useEffect(function () {
    if (editor === null) {
      var _instance = codemirror(ref.current, _extends({}, BASE_OPTIONS, options, {
        fixedGutter: false,
        value: value,
        // force not use textarea due to zoom mode
        inputStyle: options != null && options.readOnly ? 'contenteditable' : 'textarea',
        placeholder: placeholder,
        viewportMargin: print ? Infinity : 10,
        readOnly: options != null && options.readOnly ? 'nocursor' : false
      })); // 阻止移动端的事件冒泡到 slate-editor


      onEditorMount(_instance);
      setEditor(_instance);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [onEditorMount, editor, value, print]);
  React.useEffect(function () {
    if (typeof forwardRef === 'function') {
      forwardRef(ref.current);
    } else if (forwardRef) {
      forwardRef.current = ref.current;
    }
  }, [ref, forwardRef]);
  var onEditorBlur = React.useCallback(function (cm, evt) {
    onBeforeSelectionChange(cm, {
      ranges: [],
      origin: 'blur'
    });
    onBlur(cm, evt);
  }, [onBlur, onBeforeSelectionChange]);
  var onEditorChanges = React.useCallback(function (e, changes) {
    var isValueUpdatedByProps = changes.every(function (change) {
      return change.origin === VALUE_UPDATE_BY_PROPS_CHANGE;
    });

    if (isValueUpdatedByProps) {
      return;
    }

    isLocalChange.current = true;
    var patches = diffsToPatchs(value, e.getValue());
    onChanges(e, changes, patches);
  }, [value, onChanges]);
  var zoom = useZoom();
  useEventEffect(editor, 'changes', onEditorChanges);
  useEventEffect(editor, 'focus', onFocus);
  useEventEffect(editor, 'blur', onEditorBlur);
  useEventEffect(editor, 'gutterClick', onGutterClick);
  useEventEffect(editor, 'mousedown', onMouseDown);
  useEventEffect(editor, 'dblclick', onDBClick);
  useEventEffect(editor, 'touchstart', onTouchStart);
  useEventEffect(editor, 'keydown', onKeyDown);
  useEventEffect(editor, 'contextmenu', onContextMenu);
  useEventEffect(editor, 'copy', onCopy);
  useEventEffect(editor, 'beforeSelectionChange', onBeforeSelectionChange); // init

  React.useLayoutEffect(function () {
    if (editor) {
      var oldValue = editor.getValue();

      if (isLocalChange.current) {
        isLocalChange.current = false; // 防御措施，理论上不会走这段逻辑

        if (value !== oldValue) {
          console.error('EditorChange 转化为文字 Op 有逻辑缺陷，请检查');
          logger.sum('CodeInvalidChangeToOp');
          return;
        }
      }

      if (value !== oldValue) {
        var _patches = diffsToPatchs(oldValue, value);

        for (var _iterator = _createForOfIteratorHelperLoose(_patches), _step; !(_step = _iterator()).done;) {
          var patch = _step.value;
          var isInsert = patch.type === 'insert';
          var from = editor.posFromIndex(patch.offset);
          var to = isInsert ? undefined : editor.posFromIndex(patch.offset + patch.value.length);
          var replacement = isInsert ? patch.value : '';
          editor.replaceRange(replacement, from, to, VALUE_UPDATE_BY_PROPS_CHANGE);
        }
      }
    }
  }, [value, editor]); // when zoom change, update fresh height

  React.useEffect(function () {
    editor == null ? void 0 : editor.refresh(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [zoom]);
  var languages = React.useMemo(function () {
    return createCodeLanguages();
  }, []); // model 里有的 syntax 是不标准的(比如语雀拷贝)，这里先做一层处理

  var newSyntax = React.useMemo(function () {
    var s = ("" + syntax).toLowerCase();
    var match = languages.find(function (lang) {
      var _lang$alias;

      return [lang.key.toLowerCase(), lang.title.toLowerCase()].concat(((_lang$alias = lang.alias) == null ? void 0 : _lang$alias.map(function (a) {
        return a.toLowerCase();
      })) || []).includes(s);
    });
    return (match == null ? void 0 : match.key) || syntax;
  }, [syntax, languages]); // language mode 为异步加载，通过 ref 标记当前的 syntax

  var curSyntaxRef = React.useRef(newSyntax);
  curSyntaxRef.current = newSyntax;
  React.useEffect(function () {
    loadLanguageMode(newSyntax).then(function (l) {
      if (l === curSyntaxRef.current) {
        editor == null ? void 0 : editor.setOption('mode', newSyntax);
      }
    })["catch"](function () {});
  }, [newSyntax, editor]); // 避免闪烁

  React.useLayoutEffect(function () {
    editor && editor.setOption('theme', theme);
  }, [theme, editor]);
  var clearMarkHasClassNames = React.useCallback(function (classNames) {
    editor == null ? void 0 : editor.getAllMarks().forEach(function (marker) {
      // @ts-ignore codemirror type error
      if (classNames.includes(marker.className)) {
        marker.clear();
      }
    });
  }, [editor]);
  React.useEffect(function () {
    editor && editor.setOption('lineWrapping', wrap || print);
  }, [wrap, editor, print]); // collabSelections 变化时，重新绘制协同 selection

  React.useEffect(function () {
    clearMarkHasClassNames([COLLAB_SELECTION_NAME]); // eslint-disable-next-line guard-for-in

    for (var uid in collabSelections) {
      var selection = collabSelections[uid];

      for (var _iterator2 = _createForOfIteratorHelperLoose(selection.ranges), _step2; !(_step2 = _iterator2()).done;) {
        var range = _step2.value;
        editor == null ? void 0 : editor.markText(range.anchor, range.head, {
          className: 'collab-selection'
        });
      }
    }
  }, [collabSelections, editor]); // 设置查找替换高亮

  React.useEffect(function () {
    if (!editor || !controller) {
      return;
    }

    var _controller$value$dat = controller.value.data,
        _controller$value$dat2 = _controller$value$dat.findText,
        findText = _controller$value$dat2 === void 0 ? '' : _controller$value$dat2,
        findAndReplaceVisible = _controller$value$dat.findAndReplaceVisible;

    if (!findAndReplaceVisible) {
      clearMarkHasClassNames([FIND_NAME, FIND_SELECTED_NAME]);
      return;
    }

    if (findText !== prevFindText) {
      prevSelectedIndex = -1;
    }

    var _ref = controller.query('getDataValue') || controller.value,
        decorations = _ref.decorations,
        document = _ref.document;

    var selfDecorations = decorations.filter(function (d) {
      var key = d.start.key;
      var closestBlock = document.getClosestBlock(key);
      return (closestBlock == null ? void 0 : closestBlock.key) === (node == null ? void 0 : node.key);
    });
    clearMarkHasClassNames([FIND_NAME, FIND_SELECTED_NAME]);
    var selectedIndex = selfDecorations.findIndex(function (_ref2) {
      var mark = _ref2.mark;
      return mark.data.selected;
    }); // @ts-ignore searchcursor.js 注入了该方法

    var searchCursor = editor.getSearchCursor(findText, {
      line: 0,
      ch: 0
    }, true);
    var index = 0;
    var targetPosition = null;

    while (searchCursor.findNext()) {
      var selected = index === selectedIndex;
      var from = searchCursor.from();
      var to = searchCursor.to(); // eslint-disable-next-line @typescript-eslint/no-shadow

      var _className = selected ? FIND_SELECTED_NAME : FIND_NAME;

      editor.markText(from, to, {
        className: _className
      });

      if (selected) {
        targetPosition = {
          line: from.line,
          ch: to.ch
        };
      }

      index++;
    }

    if (targetPosition && prevSelectedIndex !== selectedIndex) {
      editor.setCursor(targetPosition);
    }

    prevSelectedIndex = selectedIndex;
    prevFindText = findText;
  }, [clearMarkHasClassNames, controller, editor, node]);
  return /*#__PURE__*/_createElement(Wrapper, {
    style: style,
    print: print,
    theme: theme,
    className: !environment.IS_FIREFOX ? "scaled " + className : className,
    ref: ref,
    scale: scale,
    zoom: zoom,
    readOnly: options == null ? void 0 : options.readOnly
  });
});
export default /*#__PURE__*/React.memo(CodeMirror);
//# sourceMappingURL=index.js.map