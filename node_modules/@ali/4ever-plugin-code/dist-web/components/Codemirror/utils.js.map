{"version":3,"sources":["../../../../src/components/Codemirror/utils.ts"],"names":["theme","unitsConverter","MAX_HEIGHT","CODE_THEME","code","countNewLine","str","count","i","length","CODE_LINEHEIGHT","toPX","globalStyle","getCodeContent","node","nodes","onlyText","leaves","onlyLeaf","text","getCodeHeight","height","data","Math","min"],"mappings":"AACA,SAASA,KAAT,EAAgBC,cAAhB,QAAsC,kBAAtC;AACA,SAASC,UAAT;IAEcC,U,GAAeH,K,CAArBI,I;;AAER,SAASC,YAAT,CAAsBC,GAAtB,EAAmC;AACjC,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtC,QAAIF,GAAG,CAACE,CAAD,CAAH,KAAW,IAAf,EAAqB;AACnBD,MAAAA,KAAK,IAAI,CAAT;AACD;AACF;;AACD,SAAOA,KAAP;AACD,C,CAED;;;AACA,IAAMG,eAAe,GAAGT,cAAc,CAACU,IAAf,CAAoBX,KAAK,CAACY,WAAN,CAAkB,WAAlB,CAApB,IAAsDT,UAAU,CAAC,aAAD,CAAxF,C,CAEA;;AACA,OAAO,SAASU,cAAT,CAAwBC,IAAxB,EAAqC;AAAA,oBACvBA,IAAI,CAACC,KADkB;AAAA,MACnCC,QADmC;AAAA,gBAEtBA,QAAD,CAAmBC,MAFI;AAAA,MAEnCC,QAFmC;AAG1C,SAAOA,QAAQ,CAACC,IAAhB;AACD;;AAED,SAASC,aAAT,CAAuBN,IAAvB,EAAoC;AAAA,MAC5BO,MAD4B,GACjBP,IAAI,CAACQ,IADY,CAC5BD,MAD4B;;AAElC,MAAI,CAACA,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,CAAChB,YAAY,CAACQ,cAAc,CAACC,IAAD,CAAf,CAAZ,GAAqC,CAAtC,IAA2CJ,eAA3C,IAA8D,MAAM,CAApE,CAAT;AACD;;AACD,SAAOa,IAAI,CAACC,GAAL,CAASH,MAAT,EAAiBnB,UAAjB,CAAP;AACD;;AAEDkB,aAAa,CAACV,eAAd,GAAgCA,eAAhC;AAEA,eAAeU,aAAf","sourcesContent":["import { Block, Text } from '@ali/4ever-cangjie';\nimport { theme, unitsConverter } from '@ali/4ever-utils';\nimport { MAX_HEIGHT } from '../../utils/constants/dimension';\n\nconst { code: CODE_THEME } = theme;\n\nfunction countNewLine(str: string) {\n  let count = 0;\n  for (let i = 0; i < str.length; i += 1) {\n    if (str[i] === '\\n') {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// 代码块行高\nconst CODE_LINEHEIGHT = unitsConverter.toPX(theme.globalStyle['font-size']) * CODE_THEME['line-height']\n\n// 获取 code 内容\nexport function getCodeContent(node: Block) {\n  const [onlyText] = node.nodes;\n  const [onlyLeaf] = (onlyText as Text).leaves;\n  return onlyLeaf.text;\n}\n\nfunction getCodeHeight(node: Block) {\n  let { height } = node.data;\n  if (!height) {\n    height = (countNewLine(getCodeContent(node)) + 1) * CODE_LINEHEIGHT + (10 || 0);\n  }\n  return Math.min(height, MAX_HEIGHT);\n}\n\ngetCodeHeight.CODE_LINEHEIGHT = CODE_LINEHEIGHT;\n\nexport default getCodeHeight;\n"],"file":"utils.js"}