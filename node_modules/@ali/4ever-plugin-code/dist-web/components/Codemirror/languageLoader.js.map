{"version":3,"sources":["../../../../src/components/Codemirror/languageLoader.ts"],"names":["asyncGet","createCodeLanguages","languages","loadLanguageMode","key","mode","find","l"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,SAASC,mBAAT;AAEA,IAAMC,SAAS,GAAGD,mBAAmB,EAArC;AAEA,gBAAsBE,gBAAtB;AAAA;AAAA;;;+EAAO,iBAAgCC,GAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,IADD,sBACQH,SAAS,CAACI,IAAV,CAAe,UAACC,CAAD;AAAA,qBAAOA,CAAC,CAACH,GAAF,KAAUA,GAAjB;AAAA,aAAf,CADR,qBACQ,gBAAsCC,IAD9C;;AAAA,gBAEAA,IAFA;AAAA;AAAA;AAAA;;AAAA,6CAEeD,GAFf;;AAAA;AAAA;AAAA,mBAICJ,QAAQ,8BAA4BI,GAA5B,EAAmC,YAAM;AACrD,qBAAO;AAAO;AAAP,mCAA6EC,IAA7E,SAAqFA,IAArF,SAAP;AACD,aAFa,CAJT;;AAAA;AAAA,6CAQED,GARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import asyncGet from 'get-async';\nimport { createCodeLanguages } from '../../utils/constants/languages';\n\nconst languages = createCodeLanguages();\n\nexport async function loadLanguageMode(key: string) {\n  const mode = languages.find((l) => l.key === key)?.mode;\n  if (!mode) { return key; }\n\n  await asyncGet(`we-editor-code-language-${key}`, () => {\n    return import(/* webpackChunkName: \"codemirror-lang-[request]\" */`codemirror/mode/${mode}/${mode}.js`);\n  });\n\n  return key;\n}\n"],"file":"languageLoader.js"}