{"version":3,"sources":["../../../src/mo/index.ts"],"names":["Block","Commands","Text","createSerializer","ELEMENT_TYPE","factory","key","schemas","type","isBlock","isEdgeSelectable","normalizeNode","node","controller","next","nodes","length","isText","leaves","newLeaf","create","text","i","child","command","removeNodeByKey","insertNodeByKey","serializer","models","klass","data","ind","undefined","Object","blockquote","Boolean","spacing","jc","String","calloutPr","subjectPr","uuid","shd"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,gBAAP;AACA,SAASC,YAAT;;AAEA,IAAMC,OAAkB,GAAG,SAArBA,OAAqB;AAAA,SAAO;AAChCC,IAAAA,GAAG,EAAE,MAD2B;AAEhCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAEJ,YADC;AAEPK,MAAAA,OAAO,EAAE,IAFF;AAGPC,MAAAA,gBAAgB,EAAE;AAHX,KAFuB;AAOhCC,IAAAA,aAAa,EAAE,uBAACC,IAAD,EAAOC,UAAP,EAAmBC,IAAnB,EAA4B;AACzC,UAAId,KAAK,CAACS,OAAN,CAAcG,IAAd,KAAuBA,IAAI,CAACJ,IAAL,KAAc,MAAzC,EAAiD;AAC/C,YACEI,IAAI,CAACG,KAAL,CAAWC,MAAX,KAAsB,CAAtB,IACA,CAACd,IAAI,CAACe,MAAL,CAAYL,IAAI,CAACG,KAAL,CAAW,CAAX,CAAZ,CADD,IAEAH,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcG,MAAd,CAAqBF,MAArB,KAAgC,CAHlC,EAIE;AACA,iBAAO,YAAM;AACX,gBAAMG,OAAO,GAAGjB,IAAI,CAACkB,MAAL,CAAYR,IAAI,CAACS,IAAjB,CAAhB,CADW,CAGX;;AAHW,gBAIHL,MAJG,GAIQJ,IAAI,CAACG,KAJb,CAIHC,MAJG;;AAKX,iBAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAApB,EAA4BM,CAAC,IAAI,CAAjC,EAAoC;AAClC,kBAAMC,KAAK,GAAGX,IAAI,CAACG,KAAL,CAAWO,CAAX,CAAd;AACAT,cAAAA,UAAU,CAACW,OAAX,CAAmBvB,QAAQ,CAACwB,eAA5B,EAA6CF,KAAK,CAAEjB,GAApD;AACD,aARU,CAUX;;;AACAO,YAAAA,UAAU,CAACW,OAAX,CAAmBvB,QAAQ,CAACyB,eAA5B,EAA6Cd,IAAI,CAACN,GAAlD,EAAuD,CAAvD,EAA0Da,OAA1D;AACD,WAZD;AAaD;AACF;;AAED,aAAOL,IAAI,EAAX;AACD,KA/B+B;AAgChCa,IAAAA,UAAU,EAAExB,gBAAgB,EAhCI;AAiChCyB,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,OADD;AAENrB,MAAAA,IAAI,EAAEJ,YAFA;AAGN0B,MAAAA,IAAI,EAAE;AACJC,QAAAA,GAAG,EAAE,CAACC,SAAD,EAAYC,MAAZ,CADD;AAEJC,QAAAA,UAAU,EAAE,CAACF,SAAD,EAAYG,OAAZ,CAFR;AAGJC,QAAAA,OAAO,EAAE,CAACJ,SAAD,EAAYC,MAAZ,CAHL;AAIJI,QAAAA,EAAE,EAAE,CAACL,SAAD,EAAYM,MAAZ,CAJA;AAKJC,QAAAA,SAAS,EAAE,CAACP,SAAD,EAAYC,MAAZ,CALP;AAMJO,QAAAA,SAAS,EAAE,CAACR,SAAD,EAAYC,MAAZ,CANP;AAOJQ,QAAAA,IAAI,EAAE,CAACT,SAAD,EAAYM,MAAZ,CAPF;AAQJI,QAAAA,GAAG,EAAE,CAACV,SAAD,EAAYC,MAAZ;AARD;AAHA;AAjCwB,GAAP;AAAA,CAA3B;;AAiDA,eAAe5B,OAAf","sourcesContent":["import { Block, Commands, MoFactory, Text } from '@ali/4ever-cangjie';\nimport createSerializer from './serializer';\nimport { ELEMENT_TYPE } from './meta';\n\nconst factory: MoFactory = () => ({\n  key: 'code',\n  schemas: {\n    type: ELEMENT_TYPE,\n    isBlock: true,\n    isEdgeSelectable: true,\n  },\n  normalizeNode: (node, controller, next) => {\n    if (Block.isBlock(node) && node.type === 'code') {\n      if (\n        node.nodes.length !== 1 ||\n        !Text.isText(node.nodes[0]) ||\n        node.nodes[0].leaves.length !== 1\n      ) {\n        return () => {\n          const newLeaf = Text.create(node.text);\n\n          // 删除之前的节点\n          const { length } = node.nodes;\n          for (let i = 0; i < length; i += 1) {\n            const child = node.nodes[i];\n            controller.command(Commands.removeNodeByKey, child!.key);\n          }\n\n          // 插入 text 节点\n          controller.command(Commands.insertNodeByKey, node.key, 0, newLeaf);\n        };\n      }\n    }\n\n    return next();\n  },\n  serializer: createSerializer(),\n  models: {\n    klass: 'block',\n    type: ELEMENT_TYPE,\n    data: {\n      ind: [undefined, Object],\n      blockquote: [undefined, Boolean],\n      spacing: [undefined, Object],\n      jc: [undefined, String],\n      calloutPr: [undefined, Object],\n      subjectPr: [undefined, Object],\n      uuid: [undefined, String],\n      shd: [undefined, Object],\n    },\n  },\n});\n\nexport default factory;\n"],"file":"index.js"}