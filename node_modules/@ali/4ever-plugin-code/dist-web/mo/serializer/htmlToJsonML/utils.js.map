{"version":3,"sources":["../../../../../src/mo/serializer/htmlToJsonML/utils.ts"],"names":["PLAIN_TEXT","SYNTAX_PREFIX","REG_BR_TAG","getSyntax","codeBlockDom","className","includes","getElementsByTagName","classList","Array","apply","syntaxClass","find","clsname","slice","length","getTextContent","codeBlock","testDom","document","createElement","innerHTML","replace","textContent"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,UAApC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,YAAnB,EAAkD;AACvD,MAAI,CAACA,YAAL,EAAmB;AACjB,WAAOJ,UAAP;AACD;;AACD,MAAI,CAACI,YAAY,CAACC,SAAb,CAAuBC,QAAvB,CAAgCL,aAAhC,CAAL,EAAqD;AACnDG,IAAAA,YAAY,GAAGA,YAAY,CAACG,oBAAb,CAAkC,MAAlC,EAA0C,CAA1C,CAAf;;AACA,QAAI,CAACH,YAAL,EAAmB;AACjB,aAAOJ,UAAP;AACD;AACF,GATsD,CAUvD;;;AACA,MAAMQ,SAAmB,GAAGC,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBN,YAAY,CAACI,SAA/B,CAA5B;AACA,MAAMG,WAAW,GAAGH,SAAS,CAACI,IAAV,CAAe,UAACC,OAAD;AAAA,WACjCA,OAAO,CAACP,QAAR,CAAiBL,aAAjB,CADiC;AAAA,GAAf,CAApB;AAEA,SAAOU,WAAW,GAAGA,WAAW,CAACG,KAAZ,CAAkBb,aAAa,CAACc,MAAhC,CAAH,GAA6Cf,UAA/D;AACD;AAED;AACA;AACA;;AACA,OAAO,IAAMgB,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAoC;AAChE,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAhB;AACAF,EAAAA,OAAO,CAACG,SAAR,GAAoBJ,SAAS,CAACI,SAAV,CAAoBC,OAApB,CAA4BpB,UAA5B,EAAwC,IAAxC,CAApB;AACA,SAAOgB,OAAO,CAACK,WAAR,IAAuB,EAA9B;AACD,CAJM","sourcesContent":["import { PLAIN_TEXT, SYNTAX_PREFIX, REG_BR_TAG } from './constants';\n\n/**\n * @description 获取代码块语言类型\n * @param {Element} codeBlockDom - 粘贴的代码块节点元素\n * */\nexport function getSyntax(codeBlockDom: Element): string {\n  if (!codeBlockDom) {\n    return PLAIN_TEXT;\n  }\n  if (!codeBlockDom.className.includes(SYNTAX_PREFIX)) {\n    codeBlockDom = codeBlockDom.getElementsByTagName('code')[0];\n    if (!codeBlockDom) {\n      return PLAIN_TEXT;\n    }\n  }\n  // @ts-ignore\n  const classList: string[] = Array.apply(null, codeBlockDom.classList);\n  const syntaxClass = classList.find((clsname) =>\n    clsname.includes(SYNTAX_PREFIX));\n  return syntaxClass ? syntaxClass.slice(SYNTAX_PREFIX.length) : PLAIN_TEXT;\n}\n\n/**\n * @description 获取代码块节点元素的内容\n * */\nexport const getTextContent = (codeBlock: HTMLElement): string => {\n  const testDom = document.createElement('div');\n  testDom.innerHTML = codeBlock.innerHTML.replace(REG_BR_TAG, '\\n');\n  return testDom.textContent || '';\n};\n"],"file":"utils.js"}