import * as React from 'react';
import { Editor, EditorConfiguration, EditorChange } from 'codemirror';
import 'codemirror/addon/scroll/simplescrollbars.js';
import 'codemirror/addon/edit/closebrackets.js';
import 'codemirror/addon/display/placeholder.js';
import 'codemirror/addon/search/searchcursor.js';
import { Controller, Block } from '@ali/4ever-cangjie';
import type { CodeSelectionChange } from './types';
import { Patch } from './diffMatch';
interface DomEvent<T = Event> {
    (instance: Editor, event: T): void;
}
interface CodeMirrorProps {
    value: string;
    onEditorMount?: (cm: Editor) => void;
    options?: EditorConfiguration;
    syntax: string;
    theme: string;
    wrap: boolean;
    className?: string;
    scale?: number;
    onChanges?: (editor: Editor, data: EditorChange[], patches: Patch[]) => void;
    onBlur?: DomEvent;
    onFocus?: DomEvent;
    onMouseDown?: DomEvent;
    onDBClick?: DomEvent;
    onTouchStart?: DomEvent;
    onKeyDown?: DomEvent<KeyboardEvent>;
    onContextMenu?: DomEvent;
    onCopy?: DomEvent;
    onGutterClick?: (editor: Editor, lineNumber: number, gutter: string, event: React.MouseEvent) => void;
    onBeforeSelectionChange?: (editor: Editor, data: CodeSelectionChange) => void;
    isFocused?: boolean;
    innerRef?: React.RefObject<HTMLDivElement>;
    style?: React.CSSProperties;
    collabSelections: Record<string, CodeSelectionChange>;
    placeholder?: string;
    print?: boolean;
    controller?: Controller;
    node?: Block;
}
declare const _default: React.MemoExoticComponent<React.ForwardRefExoticComponent<CodeMirrorProps & React.RefAttributes<HTMLElement>>>;
export default _default;
