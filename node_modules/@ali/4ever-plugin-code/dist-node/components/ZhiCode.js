"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _utils = _interopRequireDefault(require("./Codemirror/utils"));

var _everUtils = require("@ali/4ever-utils");

var _dimension = require("../utils/constants/dimension");

var _LazyCodemirror = require("./LazyCodemirror");

const _createElement = /*#__PURE__*/React.createElement;

/**
 * TODO: 处理 code 与 cangjie 编辑器选区和复制的交互行为
 */
const Code = props => {
  const {
    syntax,
    theme,
    height,
    code,
    node,
    controller,
    lineWrapping,
    print = false,
    ...rest
  } = props;
  const wrapperRef = React.useRef(null);
  const [zoomHeight, setZoomHeight] = React.useState(0);
  const ref = React.useRef(null);
  const placeholderHeightRef = React.useRef((0, _utils.default)(node));
  const {
    spacing = {
      before: _everUtils.theme.code['margin-top'],
      after: _everUtils.theme.code['margin-bottom']
    }
  } = node.data;
  const {
    before,
    after
  } = spacing;
  const zoom = (0, _everCangjie.useZoom)();
  const handleOutsideClick = React.useCallback(e => {
    const selection = window.getSelection();
    const wrapper = wrapperRef.current;

    if (!selection || !wrapper) {
      return;
    }

    if (wrapper.contains(selection.anchorNode) && wrapper.contains(selection.focusNode) && !wrapper.contains(e.target)) {
      const textarea = document.activeElement;
      selection.removeAllRanges(); // 移除选区的同时会导致 textarea 失焦，此处反选一下，保障首次 code-mirror blur 的时候不会致使 cangjie 失焦

      if (textarea instanceof HTMLTextAreaElement) {
        textarea.select();
      }
    }
  }, []);
  React.useEffect(() => {
    window.addEventListener('mousedown', handleOutsideClick);
    return () => window.removeEventListener('mousedown', handleOutsideClick);
  }, [handleOutsideClick]);
  const handleSelectionChange = React.useCallback(() => {
    const nativeSelection = window.getSelection();
    const wrapper = wrapperRef.current;

    if (!nativeSelection || !wrapper) {
      return;
    }

    const {
      selection
    } = controller.value; // 选择代码块的时候清空 cangjie 的选区

    if (wrapper.contains(nativeSelection.anchorNode) && wrapper.contains(nativeSelection.focusNode) && !selection.isCollapsed && selection && selection.isExpanded) {
      controller.command(_everCangjie.Commands.moveToFocus);
    }
  }, [controller]);
  React.useEffect(() => {
    document.addEventListener('selectionchange', handleSelectionChange);
    return () => document.removeEventListener('selectionchange', handleSelectionChange);
  }, [handleSelectionChange]);
  const options = React.useMemo(() => ({
    readOnly: true
  }), []);
  const handleCopy = React.useCallback((_, evt) => {
    if (!controller.canCopy) {
      evt.preventDefault();
    }
  }, [controller]); // 目前 code 的内容区域选区交互没有处理，暂时禁止掉 contextmenu 的触发

  const handleContextMenu = React.useCallback((_, e) => {
    e.stopPropagation();
    e.preventDefault();
  }, []);
  const handleMount = React.useCallback(() => {
    // mount 之后不再需要占位高度
    placeholderHeightRef.current = 0;
    const he = height || parseInt(getComputedStyle(ref.current).height, 10);

    if (he) {
      setZoomHeight(he);
    }
  }, [height]);
  const style = React.useMemo(() => {
    const s = {
      marginBottom: `${after}px`,
      marginTop: `${before}px`,
      marginLeft: `${_everUtils.theme.code['margin-left']}px`,
      marginRight: `${_everUtils.theme.code['margin-right']}px`,
      // eslint-disable-next-line no-nested-ternary
      height: !print ? height ? `${height}px` : 'inherit' : 'auto',
      maxHeight: !print ? `${_dimension.MAX_HEIGHT}px` : 'none',
      // cm 未渲染时设置最小高度防止懒加载过程中高度剧烈抖动
      minHeight: placeholderHeightRef.current ? placeholderHeightRef.current : undefined,
      overflowY: 'visible'
    }; // https://alidocs.dingtalk.com/i/nodes/e5vdDPq4wYa8a4aeLn9wJj7nbm10NkB9?cid=134024%3A372551849&dontjump=true&nav=spaces&navQuery=spaceId%3Dnb9XJv4jyWLaXyAp

    if (zoom > 1) {
      s.width = `${100 * zoom}%`;
      s.transform = `scale(${1 / zoom})`;
      s.transformOrigin = '0px 0px';
      s.fontSize = `${11 * zoom}pt`;
    }

    return s;
  }, [before, after, height, print, zoom]); // hack 兼容 zoom 模式

  const hackZoom = React.useMemo(() => zoomHeight > 0 && zoom > 1, [zoom, zoomHeight]);
  return /*#__PURE__*/_createElement("div", (0, _extends2.default)({
    "data-type": "code"
  }, rest, {
    style: { ...style,
      height: hackZoom ? `${zoomHeight / zoom}px` : style.height
    },
    ref: ref
  }), /*#__PURE__*/_createElement(_LazyCodemirror.CodeMirrorLazy, {
    style: {
      userSelect: 'text',
      WebkitUserSelect: 'text',
      height: hackZoom ? `${zoomHeight}px` : undefined
    },
    value: code,
    options: options,
    syntax: syntax,
    theme: theme,
    onContextMenu: handleContextMenu,
    codeMirrorRef: wrapperRef,
    onCopy: handleCopy,
    wrap: lineWrapping,
    print: print,
    onEditorMount: handleMount,
    controller: controller,
    node: node
  }));
};

var _default = /*#__PURE__*/React.memo(Code);

exports.default = _default;
//# sourceMappingURL=ZhiCode.js.map