{"version":3,"sources":["../../../src/__tests__/diffsToPatchs.test.ts"],"names":["testCases","name","input","output","type","value","offset","describe","forEach","testCase","it","expect","toEqual"],"mappings":";;AAAA;;AAEA,MAAMA,SAAS,GAAG,CAAC;AACjBC,EAAAA,IAAI,EAAE,QADW;AAEjBC,EAAAA,KAAK,EAAE,CACL,YADK,EAEL,aAFK,CAFU;AAMjBC,EAAAA,MAAM,EAAE,CAAC;AACPC,IAAAA,IAAI,EAAE,QADC;AAEPC,IAAAA,KAAK,EAAE,GAFA;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAD;AANS,CAAD,EAWf;AACDL,EAAAA,IAAI,EAAE,aADL;AAEDC,EAAAA,KAAK,EAAE,CACL,MADK,EAEL,QAFK,CAFN;AAMDC,EAAAA,MAAM,EAAE,CAAC;AACPC,IAAAA,IAAI,EAAE,QADC;AAEPC,IAAAA,KAAK,EAAE,GAFA;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAD,EAIL;AACDF,IAAAA,IAAI,EAAE,QADL;AAEDC,IAAAA,KAAK,EAAE,GAFN;AAGDC,IAAAA,MAAM,EAAE;AAHP,GAJK;AANP,CAXe,EA0Bf;AACDL,EAAAA,IAAI,EAAE,QADL;AAEDC,EAAAA,KAAK,EAAE,CACL,aADK,EAEL,YAFK,CAFN;AAMDC,EAAAA,MAAM,EAAE,CAAC;AACPC,IAAAA,IAAI,EAAE,QADC;AAEPC,IAAAA,KAAK,EAAE,GAFA;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAD;AANP,CA1Be,EAqCf;AACDL,EAAAA,IAAI,EAAE,aADL;AAEDC,EAAAA,KAAK,EAAE,CACL,QADK,EAEL,MAFK,CAFN;AAMDC,EAAAA,MAAM,EAAE,CAAC;AACPC,IAAAA,IAAI,EAAE,QADC;AAEPC,IAAAA,KAAK,EAAE,GAFA;AAGPC,IAAAA,MAAM,EAAE;AAHD,GAAD,EAIL;AACDF,IAAAA,IAAI,EAAE,QADL;AAEDC,IAAAA,KAAK,EAAE,GAFN;AAGDC,IAAAA,MAAM,EAAE;AAHP,GAJK;AANP,CArCe,CAAlB;AAsDAC,QAAQ,CAAC,wBAAD,EAA2B,MAAM;AACvCP,EAAAA,SAAS,CAACQ,OAAV,CAAmBC,QAAD,IAAc;AAC9B,UAAM;AAAER,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAA0BM,QAAhC;AACAC,IAAAA,EAAE,CAAE,mBAAkBT,IAAK,EAAzB,EAA4B,MAAM;AAClCU,MAAAA,MAAM,CAAC,8BAAcT,KAAK,CAAC,CAAD,CAAnB,EAAwBA,KAAK,CAAC,CAAD,CAA7B,CAAD,CAAN,CACGU,OADH,CACWT,MADX;AAED,KAHC,CAAF;AAID,GAND;AAOD,CARO,CAAR","sourcesContent":["import { diffsToPatchs } from \"../components/Codemirror/diffMatch\";\n\nconst testCases = [{\n  name: 'insert',\n  input: [\n    'const a = ',\n    'const a = 1',\n  ],\n  output: [{\n    type: 'insert',\n    value: '1',\n    offset: 10,\n  }],\n}, {\n  name: 'multiInsert',\n  input: [\n    'a\\nb',\n    ' a\\n b',\n  ],\n  output: [{\n    type: 'insert',\n    value: ' ',\n    offset: 0,\n  }, {\n    type: 'insert',\n    value: ' ',\n    offset: 3,\n  }],\n}, {\n  name: 'delete',\n  input: [\n    'const a = 1',\n    'const a = ',\n  ],\n  output: [{\n    type: 'delete',\n    value: '1',\n    offset: 10,\n  }],\n}, {\n  name: 'multiDelete',\n  input: [\n    ' a\\n b',\n    'a\\nb',\n  ],\n  output: [{\n    type: 'delete',\n    value: ' ',\n    offset: 0,\n  }, {\n    type: 'delete',\n    value: ' ',\n    offset: 2,\n  }],\n}];\n\ndescribe('test IndUtil.fromBlock', () => {\n  testCases.forEach((testCase) => {\n    const { name, input, output } = testCase;\n    it(`code diffMatch: ${name}`, () => {\n      expect(diffsToPatchs(input[0], input[1]))\n        .toEqual(output);\n    });\n  });\n});\n"],"file":"diffsToPatchs.test.js"}