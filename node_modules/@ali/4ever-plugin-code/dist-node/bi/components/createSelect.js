"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createSelect;

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _lodash = require("lodash");

var _everCangjie = require("@ali/4ever-cangjie");

/* eslint-disable @typescript-eslint/no-explicit-any */
const _createElement = /*#__PURE__*/React.createElement;

function createSelect(options) {
  const {
    createList,
    name,
    search
  } = options;

  const Select = props => {
    const {
      onChange,
      tip,
      value,
      locale,
      renderTrigger,
      showArrow,
      style,
      filterOption,
      inputTriggerText,
      onVisibleChange,
      visible
    } = props;
    const [selected, setSelected] = React.useState(value);
    React.useEffect(() => {
      setSelected(value);
    }, [value]);
    const handleChange = React.useCallback(val => {
      onChange(val);
    }, [onChange]); // code 不是 void，需要手动屏蔽事件传递

    const onStopPropagation = React.useCallback(evt => {
      evt.stopPropagation();
    }, []);
    const scrollableContent = (0, _everCangjie.useScrollableContent)();
    const getScrollableContent = React.useCallback(() => {
      return scrollableContent || window.document.body;
    }, [scrollableContent]);
    const list = React.useMemo(() => createList(locale).filter(l => l.show !== false), [locale]);
    return (
      /*#__PURE__*/
      // onKeyDown 不阻止传递会导致删除、光标移动等操作影响编辑器
      // onMouseDown 不阻止传递会导致首次点击时，搜索框不会聚焦
      _createElement("div", {
        "data-select-value": selected,
        onKeyDown: onStopPropagation,
        onClick: onStopPropagation,
        onMouseDown: onStopPropagation
      }, /*#__PURE__*/_createElement(_weDesign.Select, {
        className: `code-block-${name}-select`,
        testid: `code-block-${name}-select`,
        title: tip,
        value: selected,
        onChange: handleChange,
        style: style,
        renderTrigger: renderTrigger,
        showArrow: !!showArrow,
        role: `code${(0, _lodash.capitalize)(name)}`,
        mode: search ? 'search' : undefined,
        filterOption: filterOption,
        inputTriggerText: inputTriggerText,
        getContainer: getScrollableContent,
        placement: "bottomLeft" // @ts-ignore we-design upgrade
        ,
        disableDomAlign: true,
        onVisibleChange: onVisibleChange,
        visible: visible
      }, list.map(l => /*#__PURE__*/_createElement(_weDesign.SelectOption, {
        value: l.key,
        key: l.key,
        testid: l.key,
        role: `code${(0, _lodash.capitalize)(name)}${(0, _lodash.capitalize)(l.key)}`
      }, /*#__PURE__*/_createElement("span", null, l.title)))))
    );
  };

  return /*#__PURE__*/React.memo(Select);
}
//# sourceMappingURL=createSelect.js.map