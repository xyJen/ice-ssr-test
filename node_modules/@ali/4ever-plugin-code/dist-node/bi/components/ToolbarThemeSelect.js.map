{"version":3,"sources":["../../../../src/bi/components/ToolbarThemeSelect.tsx"],"names":["ToolbarThemeSelect","props","controller","locale","focusedCodeKey","code","value","handleChange","React","useCallback","theme","codeBlock","run","data","DEFAULT_THEME","themeTitle"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AACA;;uBAP4B,a;;wBAkCpB,eAAC,qBAAD;AAAY,EAAA,IAAI,eAAE,eAAC,qBAAD;AAAlB,E;;AAnBR,MAAMA,kBAA8C,GAAIC,KAAD,IAAW;AAChE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA;AAAtB,MAAyCH,KAA/C;AACA,QAAMI,IAAI,GAAG,6BAAeH,UAAU,CAACI,KAA1B,EAAiCF,cAAjC,CAAb;AAEA,QAAMG,YAAY,GAAGC,KAAK,CAACC,WAAN,CAClBC,KAAD,IAAW;AACT,UAAMC,SAAS,GAAG,6BAAeT,UAAU,CAACI,KAA1B,EAAiCF,cAAjC,CAAlB;AACAF,IAAAA,UAAU,CAACU,GAAX,CAAe,UAAf,EAA2B,6BAAeD,SAAf,EAA0B;AAAED,MAAAA;AAAF,KAA1B,CAA3B;AACD,GAJkB,EAKnB,CAACR,UAAD,EAAaE,cAAb,CALmB,CAArB;AAQA,sBACE,eAAC,oBAAD;AACE,IAAA,KAAK,EAAEC,IAAI,GAAGA,IAAI,CAACQ,IAAL,CAAUH,KAAb,GAAqBI,qBADlC;AAEE,IAAA,QAAQ,EAAEP,YAFZ;AAGE,IAAA,GAAG,EAAEJ,MAAM,CAACY,UAHd;AAIE,IAAA,MAAM,EAAEZ,MAJV;AAKE,IAAA,aAAa,EAAE;AALjB,IADF;AAWD,CAvBD;;eAyBeH,kB","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport getCurrentCode from '../queries/getCurrentCode';\nimport { IconButton } from '@ali/we-toolbar';\nimport { PaletteNormal } from '@ali/we-icon';\nimport { CodePluginConfig } from '../types';\nimport { changeCodeData } from '../actions';\nimport ThemeSelect from './ThemeSelect';\nimport { DEFAULT_THEME } from '../../utils/constants/themes';\n\nexport interface ThemeSelectProps {\n  controller: Controller;\n  locale: CodePluginConfig['locale'];\n  focusedCodeKey?: string;\n}\n\nconst ToolbarThemeSelect: React.FC<ThemeSelectProps> = (props) => {\n  const { controller, locale, focusedCodeKey } = props;\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n\n  const handleChange = React.useCallback(\n    (theme) => {\n      const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n      controller.run('onAction', changeCodeData(codeBlock, { theme }));\n    },\n    [controller, focusedCodeKey],\n  );\n\n  return (\n    <ThemeSelect\n      value={code ? code.data.theme : DEFAULT_THEME}\n      onChange={handleChange}\n      tip={locale.themeTitle}\n      locale={locale}\n      renderTrigger={() => (\n        <IconButton icon={<PaletteNormal />}></IconButton>\n      )}\n    />\n  );\n};\n\nexport default ToolbarThemeSelect;\n"],"file":"ToolbarThemeSelect.js"}