"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _everUtils = require("@ali/4ever-utils");

var _weDesign = require("@ali/we-design");

var _weIcon = require("@ali/we-icon");

var _everComponent = require("@ali/4ever-component");

var _actions = require("../actions");

var _weToolbar = require("@ali/we-toolbar");

const _createElement = /*#__PURE__*/_react.default.createElement;
;
const codeMobileLayout = [{
  toolButtons: [{
    name: 'code.del'
  }]
}];

var _ref = /*#__PURE__*/_createElement(_weIcon.ToolbarCopyNormal, null);

var _ref3 = /*#__PURE__*/_createElement(_weDesign.DeleteNormal, null);

const CodeInlineToolbar = props => {
  const {
    locale,
    controller,
    node,
    isMobile,
    focusedCodeKey,
    triggerNode
  } = props;

  const handleCopy = _react.default.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    (0, _everUtils.copyToClipboard)(node.text || '');
  }, [node]);

  const handleDel = _react.default.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    controller.run('onAction', (0, _actions.removeCode)(node));
  }, [controller, node]);

  const CopyCodeButton = () => {
    return /*#__PURE__*/_createElement(_weToolbar.IconButton, {
      testid: "code-block-copy",
      onClick: handleCopy,
      title: locale.copy,
      icon: _ref
    });
  };

  var _ref2 = /*#__PURE__*/_createElement(_weDesign.Button, {
    testid: "code-block-remove",
    onClick: handleDel,
    bordered: false,
    icon: _ref3
  });

  const DelCodeButton = () => {
    // 加上 title，二次点击 onClick 才生效
    return _ref2;
  };

  const customToolButtons = {
    'code.copy': CopyCodeButton,
    'code.del': DelCodeButton
  };

  if (isMobile) {
    return /*#__PURE__*/_createElement(_everComponent.InlineToolbar, {
      visible: true,
      triggerNode: triggerNode || undefined,
      inlineLayout: codeMobileLayout,
      customToolButtons: {
        'code.del': DelCodeButton
      }
    });
  }

  const moreToolButtons = [//{
  //  name: 'code.copy',
  //}, 
  {
    name: 'code.more',
    nodeKey: focusedCodeKey
  }];

  if (controller.query('canComment')) {
    moreToolButtons.unshift({
      name: 'comment'
    });
  }

  const codeToolbarLayout = [{
    toolButtons: [{
      name: 'code.theme',
      focusedCodeKey
    }]
  }, {
    toolButtons: [{
      name: 'code.syntax',
      focusedCodeKey
    }, {
      name: 'code.wrap',
      focusedCodeKey
    }]
  }, {
    toolButtons: moreToolButtons
  }];
  return /*#__PURE__*/_createElement(_everComponent.InlineToolbar, {
    visible: true,
    triggerNode: triggerNode || undefined,
    inlineLayout: codeToolbarLayout,
    customToolButtons: customToolButtons,
    overlayClassName: "code-toolbar-overlay"
  });
};

var _default = CodeInlineToolbar;
exports.default = _default;
//# sourceMappingURL=CodeInlineToolbar.js.map