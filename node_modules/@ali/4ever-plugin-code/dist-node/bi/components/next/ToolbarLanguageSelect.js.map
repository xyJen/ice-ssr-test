{"version":3,"sources":["../../../../../src/bi/components/next/ToolbarLanguageSelect.tsx"],"names":["Selector","constants","WrapSelect","Select","ToolbarLanguageSelect","props","onOverlayVisibleChange","controller","focusedCodeKey","locale","getContainer","HoverToolbarHooks","useGetContainer","isOverlayVisible","setOverlayVisible","usePopoverVisible","code","value","currentValue","setValue","React","useState","data","syntax","DEFAULT_LANGUAGE","handleChange","useCallback","codeBlock","run","languages","useMemo","filterOptions","search","option","children","toLowerCase","includes","inputTriggerText","lang","find","l","key","title","languageTitle","width"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;uBAP4B,a;AAiB5B,MAAM;AAAEA,EAAAA;AAAF,IAAeC,sBAArB;AAEA,MAAMC,UAAU,gBAAG,+BAAOC,oBAAP,CAAH,gSAAhB;;AAsBO,MAAMC,qBAA4D,GAAIC,KAAD,IAAW;AACrF,QAAM;AAAEC,IAAAA,sBAAF;AAA0BC,IAAAA,UAA1B;AAAsCC,IAAAA,cAAtC;AAAsDC,IAAAA;AAAtD,MAAiEJ,KAAvE;;AACA,QAAMK,YAAY,GAAGC,iCAAkBC,eAAlB,EAArB;;AACA,QAAM,CAACC,gBAAD,EAAmBC,iBAAnB,IAAwCH,iCAAkBI,iBAAlB,CAAoC,eAApC,EAAqDT,sBAArD,CAA9C;;AACA,QAAMU,IAAI,GAAG,6BAAeT,UAAU,CAACU,KAA1B,EAAiCT,cAAjC,CAAb;;AACA,QAAM,CAACU,YAAD,EAAeC,QAAf,IAA2BC,eAAMC,QAAN,CAAeL,IAAI,EAAEM,IAAN,EAAYC,MAAZ,IAAsBC,2BAArC,CAAjC,CALqF,CAMrF;;;AAEA,QAAMC,YAAY,GAAGL,eAAMM,WAAN,CAAmBH,MAAD,IAAY;AACjD,UAAMI,SAAS,GAAG,6BAAepB,UAAU,CAACU,KAA1B,EAAiCT,cAAjC,CAAlB;;AACA,QAAImB,SAAJ,EAAe;AACbR,MAAAA,QAAQ,CAACI,MAAD,CAAR;AACAhB,MAAAA,UAAU,CAACqB,GAAX,CACE,UADF,EAEE,6BAAeD,SAAf,EAA0B;AACxBJ,QAAAA;AADwB,OAA1B,CAFF;AAMD;AACF,GAXoB,EAWlB,CAAChB,UAAD,EAAaC,cAAb,EAA6BW,QAA7B,CAXkB,CAArB;;AAaA,QAAMU,SAAS,GAAGT,eAAMU,OAAN,CAAc,MAAM,qCAApB,EAA2C,EAA3C,CAAlB;;AACA,QAAMC,aAAa,GAAGX,eAAMM,WAAN,CAAkB,CAACM,MAAD,EAAiBC,MAAjB,KAA6C;AACnF,WAAQ,GAAGA,MAAD,CAAgB5B,KAAhB,EAAuB6B,QAAS,EAAnC,CAAqCC,WAArC,GAAmDC,QAAnD,CAA4DJ,MAAM,CAACG,WAAP,EAA5D,CAAP;AACD,GAFqB,EAEnB,EAFmB,CAAtB;;AAGA,QAAME,gBAAgB,GAAGjB,eAAMM,WAAN,CAAmBT,KAAD,IAAmB;AAC5D,UAAMqB,IAAI,GAAGT,SAAS,CAACU,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUxB,KAAhC,GAAwCyB,KAAxC,IAAiDzB,KAA9D;AACA,WAAOqB,IAAP;AACD,GAHwB,EAGtB,CAACT,SAAD,CAHsB,CAAzB;;AAKA,sBACE,eAAC,qBAAD;AAAS,IAAA,KAAK,EAAEpB,MAAM,CAACkC,aAAvB;AAAsC,IAAA,SAAS,EAAC,QAAhD;AAAyD,IAAA,YAAY,EAAEjC;AAAvE,kBAeE,eAAC,uBAAD;AACE,IAAA,MAAM,EAAED,MADV;AAEE,IAAA,KAAK,EAAEO,IAAI,GAAGA,IAAI,CAACM,IAAL,CAAUC,MAAb,GAAsBC,2BAFnC;AAGE,IAAA,QAAQ,EAAEC,YAHZ;AAIE,IAAA,GAAG,EAAEhB,MAAM,CAACkC,aAJd;AAKE,IAAA,SAAS,MALX;AAME,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF,KANT;AASE,IAAA,YAAY,EAAEb,aAThB;AAUE,IAAA,gBAAgB,EAAEM,gBAVpB;AAWE,IAAA,OAAO,EAAExB,gBAXX;AAYE,IAAA,eAAe,EAAEC;AAZnB,IAfF,CADF;AAgCD,CA9DM","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Select, Tooltip } from '@ali/we-design-next';\nimport { Controller, constants } from '@ali/4ever-cangjie';\nimport { HoverToolbarHooks } from '@ali/4ever-component';\nimport { createCodeLanguages, DEFAULT_LANGUAGE } from '../../../utils/constants/languages';\nimport getCurrentCode from '../../queries/getCurrentCode';\nimport ToolbarLanguageSelectOld from '../LanguageSelect';\nimport { changeCodeData } from '../../actions';\nimport { CodePluginConfig } from '../../types';\n\nexport interface IToolbarLanguageSelectProps {\n  controller: Controller;\n  focusedCodeKey?: string;\n  onOverlayVisibleChange: (v: boolean) => void;\n  locale: CodePluginConfig['locale'];\n}\n\nconst { Selector } = constants;\n\nconst WrapSelect = styled(Select)`\n  & .wdn-select-normal,&  .wdn-select-input {\n    height: 28px;\n    background: transparent;\n    &:hover{ background: rgba(25, 31, 37, 0.08) };\n  }\n    \n  input {\n    background: transparent;\n  }\n  span:not(.wdn-toolbar-select-value) {\n    margin: 0;\n    svg {\n      transition: transform 500ms;\n      transform: rotate(0deg);\n      width: 8px;\n      height: 8px;\n    }\n  }\n  width: 110px;\n`;\n\nexport const ToolbarLanguageSelect: React.FC<IToolbarLanguageSelectProps> = (props) => {\n  const { onOverlayVisibleChange, controller, focusedCodeKey, locale } = props;\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('code.language', onOverlayVisibleChange);\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n  const [currentValue, setValue] = React.useState(code?.data?.syntax || DEFAULT_LANGUAGE);\n  // const list = React.useMemo(() => createCodeLanguages(), []);\n\n  const handleChange = React.useCallback((syntax) => {\n    const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n    if (codeBlock) {\n      setValue(syntax);\n      controller.run(\n        'onAction',\n        changeCodeData(codeBlock, {\n          syntax,\n        }),\n      );\n    }\n  }, [controller, focusedCodeKey, setValue]);\n\n  const languages = React.useMemo(() => createCodeLanguages(), []);\n  const filterOptions = React.useCallback((search: string, option: React.ReactNode) => {\n    return `${(option as any).props?.children}`.toLowerCase().includes(search.toLowerCase());\n  }, []);\n  const inputTriggerText = React.useCallback((value: string) => {\n    const lang = languages.find((l) => l.key === value)?.title || value;\n    return lang;\n  }, [languages]);\n\n  return (\n    <Tooltip title={locale.languageTitle} placement=\"bottom\" getContainer={getContainer}>\n      {/* we-design-next 组件有很多功能未对齐，暂时还用老的组件 */}\n      {/* <WrapSelect\n        value={currentValue}\n        options={list}\n        onChange={handleChange}\n        visible={isOverlayVisible}\n        onVisibleChange={setOverlayVisible}\n        mode=\"input\"\n        getContainer={getContainer}\n        bordered={false}\n        {...{ [Selector.notEditable]: true }}\n        className=\"wdn-toolbar-item-select wdn-toolbar-item\"\n        data-testid='bi-toolbar-code-syntax'\n      /> */}\n      <ToolbarLanguageSelectOld\n        locale={locale}\n        value={code ? code.data.syntax : DEFAULT_LANGUAGE}\n        onChange={handleChange}\n        tip={locale.languageTitle}\n        showArrow\n        style={{\n          width: '110px',\n        }}\n        filterOption={filterOptions}\n        inputTriggerText={inputTriggerText}\n        visible={isOverlayVisible}\n        onVisibleChange={setOverlayVisible}\n      />\n    </Tooltip>\n  )\n}"],"file":"ToolbarLanguageSelect.js"}