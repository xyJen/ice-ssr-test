"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ToolbarThemeSelect = void 0;

var React = _interopRequireWildcard(require("react"));

var _weDesignNext = require("@ali/we-design-next");

var _everComponent = require("@ali/4ever-component");

var _role = require("../../../utils/role");

var _getCurrentCode = _interopRequireDefault(require("../../queries/getCurrentCode"));

var _actions = require("../../actions");

var _themes = require("../../../utils/constants/themes");

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_everComponent.IconPalette, null);

const ToolbarThemeSelect = props => {
  const {
    controller,
    locale,
    focusedCodeKey,
    onOverlayVisibleChange
  } = props;

  const getContainer = _everComponent.HoverToolbarHooks.useGetContainer();

  const [isOverlayVisible, setOverlayVisible] = _everComponent.HoverToolbarHooks.usePopoverVisible('code.theme', onOverlayVisibleChange);

  const code = (0, _getCurrentCode.default)(controller.value, focusedCodeKey);
  const [theme, setTheme] = React.useState(code?.data?.theme || _themes.DEFAULT_THEME);
  const handleChange = React.useCallback(([themeKey]) => {
    const codeBlock = (0, _getCurrentCode.default)(controller.value, focusedCodeKey);

    if (codeBlock) {
      controller.run('onAction', (0, _actions.changeCodeData)(codeBlock, {
        theme: themeKey
      }));
      setTheme(themeKey);
      setOverlayVisible(false);
    }
  }, [controller, focusedCodeKey, onOverlayVisibleChange]);
  return /*#__PURE__*/_createElement(_weDesignNext.Popover, {
    visible: isOverlayVisible,
    onVisibleChange: setOverlayVisible,
    getContainer: getContainer,
    content: /*#__PURE__*/_createElement(_weDesignNext.Menu, {
      "data-testid": 'bi-toolbar-code-theme-options',
      items: (0, _themes.createThemeMenuItems)(locale, theme),
      onSelect: handleChange
    }),
    placement: "bottomLeft",
    "data-testid": "overlay-bi-toolbar-code-theme"
  }, /*#__PURE__*/_createElement(_weDesignNext.TBIconButton, {
    icon: _ref,
    onClick: () => {
      setOverlayVisible(!isOverlayVisible);
    },
    title: locale.themeTitle,
    tooltip: isOverlayVisible ? undefined : locale.themeTitle,
    testid: "bi-toolbar-code-theme",
    role: _role.CodeRole.codeTheme,
    active: isOverlayVisible
  }));
};

exports.ToolbarThemeSelect = ToolbarThemeSelect;
var _default = ToolbarThemeSelect;
exports.default = _default;
//# sourceMappingURL=ToolbarThemeSelect.js.map