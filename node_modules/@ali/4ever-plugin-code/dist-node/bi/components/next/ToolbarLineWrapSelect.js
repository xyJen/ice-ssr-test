"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolbarLineWrapSelect = void 0;

var _react = _interopRequireDefault(require("react"));

var _weDesignNext = require("@ali/we-design-next");

var _everComponent = require("@ali/4ever-component");

var _role = require("../../../utils/role");

var _getCurrentCode = _interopRequireDefault(require("../../queries/getCurrentCode"));

var _actions = require("../../actions");

const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref = /*#__PURE__*/_createElement(_everComponent.IconAutoWrap, null);

var _ref2 = /*#__PURE__*/_createElement(_everComponent.IconOverflow, null);

const ToolbarLineWrapSelect = props => {
  const {
    locale,
    focusedCodeKey,
    controller,
    onOverlayVisibleChange
  } = props;
  const code = (0, _getCurrentCode.default)(controller.value, focusedCodeKey);

  const [value, setValue] = _react.default.useState(code?.data?.wrap ? 'on' : 'off');

  const getContainer = _everComponent.HoverToolbarHooks.useGetContainer();

  const [isOverlayVisible, setOverlayVisible] = _everComponent.HoverToolbarHooks.usePopoverVisible('code.lineWrap', onOverlayVisibleChange);

  const options = _react.default.useMemo(() => [{
    key: 'on',
    title: locale.wrapOpen,
    icon: _ref,
    testid: 'option-on'
  }, {
    key: 'off',
    title: locale.wrapClose,
    icon: _ref2,
    testid: 'option-off'
  }], []);

  const handleChange = _react.default.useCallback(val => {
    const codeBlock = (0, _getCurrentCode.default)(controller.value, focusedCodeKey);

    if (codeBlock) {
      controller.run('onAction', (0, _actions.changeCodeData)(codeBlock, {
        wrap: val === 'on'
      }));
      setValue(val);
    }
  }, [controller, focusedCodeKey]);

  return /*#__PURE__*/_createElement(_weDesignNext.TBIconSelect, {
    value: value,
    options: options,
    onChange: handleChange,
    onVisibleChange: setOverlayVisible,
    overlayVisible: isOverlayVisible,
    getContainer: getContainer,
    tooltip: locale.wrapTitle,
    testid: "bi-toolbar-code-wrap",
    role: _role.CodeRole.codeWrap
  });
};

exports.ToolbarLineWrapSelect = ToolbarLineWrapSelect;
//# sourceMappingURL=ToolbarLineWrapSelect.js.map