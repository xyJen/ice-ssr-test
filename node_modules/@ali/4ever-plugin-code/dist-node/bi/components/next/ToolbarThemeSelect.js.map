{"version":3,"sources":["../../../../../src/bi/components/next/ToolbarThemeSelect.tsx"],"names":["ToolbarThemeSelect","props","controller","locale","focusedCodeKey","onOverlayVisibleChange","getContainer","HoverToolbarHooks","useGetContainer","isOverlayVisible","setOverlayVisible","usePopoverVisible","code","value","theme","setTheme","React","useState","data","DEFAULT_THEME","handleChange","useCallback","themeKey","codeBlock","run","themeTitle","undefined","CodeRole","codeTheme"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;uBAP4B,a;;wBAmDd,eAAC,0BAAD,O;;AAnCP,MAAMA,kBAA8C,GAAIC,KAAD,IAAW;AACvE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,cAAtB;AAAsCC,IAAAA;AAAtC,MAAiEJ,KAAvE;;AACA,QAAMK,YAAY,GAAGC,iCAAkBC,eAAlB,EAArB;;AACA,QAAM,CAACC,gBAAD,EAAmBC,iBAAnB,IAAwCH,iCAAkBI,iBAAlB,CAAoC,YAApC,EAAkDN,sBAAlD,CAA9C;;AACA,QAAMO,IAAI,GAAG,6BAAeV,UAAU,CAACW,KAA1B,EAAiCT,cAAjC,CAAb;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBC,KAAK,CAACC,QAAN,CAAeL,IAAI,EAAEM,IAAN,EAAYJ,KAAZ,IAAqBK,qBAApC,CAA1B;AAEA,QAAMC,YAAY,GAAGJ,KAAK,CAACK,WAAN,CACnB,CAAC,CAACC,QAAD,CAAD,KAAgB;AACd,UAAMC,SAAS,GAAG,6BAAerB,UAAU,CAACW,KAA1B,EAAiCT,cAAjC,CAAlB;;AACA,QAAImB,SAAJ,EAAe;AACbrB,MAAAA,UAAU,CAACsB,GAAX,CAAe,UAAf,EAA2B,6BAAeD,SAAf,EAA0B;AAAET,QAAAA,KAAK,EAAEQ;AAAT,OAA1B,CAA3B;AACAP,MAAAA,QAAQ,CAACO,QAAD,CAAR;AACAZ,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD;AACF,GARkB,EASnB,CAACR,UAAD,EAAaE,cAAb,EAA6BC,sBAA7B,CATmB,CAArB;AAYA,sBACE,eAAC,qBAAD;AACE,IAAA,OAAO,EAAEI,gBADX;AAEE,IAAA,eAAe,EAAEC,iBAFnB;AAGE,IAAA,YAAY,EAAEJ,YAHhB;AAIE,IAAA,OAAO,eACL,eAAC,kBAAD;AACE,qBAAa,+BADf;AAEE,MAAA,KAAK,EAAE,kCAAqBH,MAArB,EAA6BW,KAA7B,CAFT;AAGE,MAAA,QAAQ,EAAEM;AAHZ,MALJ;AAWE,IAAA,SAAS,EAAC,YAXZ;AAYE,mBAAY;AAZd,kBAcE,eAAC,0BAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,OAAO,EAAE,MAAM;AACbV,MAAAA,iBAAiB,CAAC,CAACD,gBAAF,CAAjB;AACD,KAJH;AAKE,IAAA,KAAK,EAAEN,MAAM,CAACsB,UALhB;AAME,IAAA,OAAO,EAAEhB,gBAAgB,GAAGiB,SAAH,GAAevB,MAAM,CAACsB,UANjD;AAOE,IAAA,MAAM,EAAC,uBAPT;AAQE,IAAA,IAAI,EAAEE,eAASC,SARjB;AASE,IAAA,MAAM,EAAEnB;AATV,IAdF,CADF;AA4BD,CA/CM;;;eAiDQT,kB","sourcesContent":["import * as React from 'react';\nimport { Popover, TBIconButton, Menu } from '@ali/we-design-next';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { IconPalette, HoverToolbarHooks } from '@ali/4ever-component';\nimport { CodeRole } from '../../../utils/role';\nimport getCurrentCode from '../../queries/getCurrentCode';\nimport { CodePluginConfig } from '../../types';\nimport { changeCodeData } from '../../actions';\nimport { DEFAULT_THEME, createThemeMenuItems } from '../../../utils/constants/themes';\n\nexport interface ThemeSelectProps {\n  controller: Controller;\n  locale: CodePluginConfig['locale'];\n  focusedCodeKey?: string;\n  onOverlayVisibleChange: (v: boolean) => void;\n}\n\nexport const ToolbarThemeSelect: React.FC<ThemeSelectProps> = (props) => {\n  const { controller, locale, focusedCodeKey, onOverlayVisibleChange } = props;\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('code.theme', onOverlayVisibleChange);\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n  const [theme, setTheme] = React.useState(code?.data?.theme || DEFAULT_THEME);\n\n  const handleChange = React.useCallback(\n    ([themeKey]) => {\n      const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n      if (codeBlock) {\n        controller.run('onAction', changeCodeData(codeBlock, { theme: themeKey }));\n        setTheme(themeKey);\n        setOverlayVisible(false);\n      }\n    },\n    [controller, focusedCodeKey, onOverlayVisibleChange],\n  );\n\n  return (\n    <Popover\n      visible={isOverlayVisible}\n      onVisibleChange={setOverlayVisible}\n      getContainer={getContainer}\n      content={\n        <Menu\n          data-testid={'bi-toolbar-code-theme-options'}\n          items={createThemeMenuItems(locale, theme)}\n          onSelect={handleChange}\n        />\n      }\n      placement=\"bottomLeft\"\n      data-testid=\"overlay-bi-toolbar-code-theme\"\n    >\n      <TBIconButton\n        icon={<IconPalette />}\n        onClick={() => {\n          setOverlayVisible(!isOverlayVisible);\n        }}\n        title={locale.themeTitle}\n        tooltip={isOverlayVisible ? undefined : locale.themeTitle}\n        testid=\"bi-toolbar-code-theme\"\n        role={CodeRole.codeTheme}\n        active={isOverlayVisible}\n      />\n    </Popover>\n  )\n};\n\nexport default ToolbarThemeSelect;\n"],"file":"ToolbarThemeSelect.js"}