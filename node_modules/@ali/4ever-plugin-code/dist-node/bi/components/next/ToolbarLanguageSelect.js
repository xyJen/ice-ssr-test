"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolbarLanguageSelect = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _weDesignNext = require("@ali/we-design-next");

var _everCangjie = require("@ali/4ever-cangjie");

var _everComponent = require("@ali/4ever-component");

var _languages = require("../../../utils/constants/languages");

var _getCurrentCode = _interopRequireDefault(require("../../queries/getCurrentCode"));

var _LanguageSelect = _interopRequireDefault(require("../LanguageSelect"));

var _actions = require("../../actions");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  Selector
} = _everCangjie.constants;
const WrapSelect = /*#__PURE__*/(0, _styledComponents.default)(_weDesignNext.Select)(["& .wdn-select-normal,&  .wdn-select-input{height:28px;background:transparent;&:hover{background:rgba(25,31,37,0.08)};}input{background:transparent;}span:not(.wdn-toolbar-select-value){margin:0;svg{transition:transform 500ms;transform:rotate(0deg);width:8px;height:8px;}}width:110px;"]);

const ToolbarLanguageSelect = props => {
  const {
    onOverlayVisibleChange,
    controller,
    focusedCodeKey,
    locale
  } = props;

  const getContainer = _everComponent.HoverToolbarHooks.useGetContainer();

  const [isOverlayVisible, setOverlayVisible] = _everComponent.HoverToolbarHooks.usePopoverVisible('code.language', onOverlayVisibleChange);

  const code = (0, _getCurrentCode.default)(controller.value, focusedCodeKey);

  const [currentValue, setValue] = _react.default.useState(code?.data?.syntax || _languages.DEFAULT_LANGUAGE); // const list = React.useMemo(() => createCodeLanguages(), []);


  const handleChange = _react.default.useCallback(syntax => {
    const codeBlock = (0, _getCurrentCode.default)(controller.value, focusedCodeKey);

    if (codeBlock) {
      setValue(syntax);
      controller.run('onAction', (0, _actions.changeCodeData)(codeBlock, {
        syntax
      }));
    }
  }, [controller, focusedCodeKey, setValue]);

  const languages = _react.default.useMemo(() => (0, _languages.createCodeLanguages)(), []);

  const filterOptions = _react.default.useCallback((search, option) => {
    return `${option.props?.children}`.toLowerCase().includes(search.toLowerCase());
  }, []);

  const inputTriggerText = _react.default.useCallback(value => {
    const lang = languages.find(l => l.key === value)?.title || value;
    return lang;
  }, [languages]);

  return /*#__PURE__*/_createElement(_weDesignNext.Tooltip, {
    title: locale.languageTitle,
    placement: "bottom",
    getContainer: getContainer
  }, /*#__PURE__*/_createElement(_LanguageSelect.default, {
    locale: locale,
    value: code ? code.data.syntax : _languages.DEFAULT_LANGUAGE,
    onChange: handleChange,
    tip: locale.languageTitle,
    showArrow: true,
    style: {
      width: '110px'
    },
    filterOption: filterOptions,
    inputTriggerText: inputTriggerText,
    visible: isOverlayVisible,
    onVisibleChange: setOverlayVisible
  }));
};

exports.ToolbarLanguageSelect = ToolbarLanguageSelect;
//# sourceMappingURL=ToolbarLanguageSelect.js.map