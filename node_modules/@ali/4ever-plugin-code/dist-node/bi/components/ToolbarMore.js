"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ToolbarMore;

var _weToolbar = require("@ali/we-toolbar");

var React = _interopRequireWildcard(require("react"));

var _weIcon = require("@ali/we-icon");

var _actions = require("../actions");

const _createElement = /*#__PURE__*/React.createElement;
;

var _ref = /*#__PURE__*/_createElement(_weIcon.ToolbarCopyNormal, null);

var _ref2 = /*#__PURE__*/_createElement(_weIcon.ToolbarCutNormal, null);

var _ref3 = /*#__PURE__*/_createElement(_weIcon.ToolbarDeleteNormal, null);

function ToolbarMore(props) {
  const {
    controller,
    getContainer,
    nodeKey,
    locale
  } = props;
  const onClick = React.useCallback(type => {
    if (type === 'copy' || type === 'cut') {
      copyOrCutNode(controller, type, nodeKey);
    } else if (type === 'delete') {
      controller.run('onAction', (0, _actions.removeCode)({
        key: nodeKey
      }));
    }
  }, []);
  return /*#__PURE__*/_createElement(_weToolbar.InlineToolbar, {
    getContainer: () => getContainer?.() || document.body,
    moreMenuConfig: {
      options: [[{
        title: locale.copy,
        icon: _ref,
        onClick: () => onClick('copy')
      }, {
        title: locale.cut || 'Cut',
        icon: _ref2,
        onClick: () => onClick('cut')
      }, {
        title: locale.delete,
        icon: _ref3,
        onClick: () => onClick('delete')
      }]]
    },
    width: 300
  });
}

function copyOrCutNode(controller, type, nodeKey) {
  const node = controller.value.document.getNode(nodeKey);

  if (node !== null) {
    const rst = controller.query('copyNodes', node);

    if (rst instanceof Promise) {
      rst.catch(e => console.error('copy error', e));
    }

    if (type === 'cut') {
      controller.run('onAction', (0, _actions.removeCode)({
        key: nodeKey
      }));
    }
  }
}
//# sourceMappingURL=ToolbarMore.js.map