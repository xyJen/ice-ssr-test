"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _getCurrentCode = _interopRequireDefault(require("../queries/getCurrentCode"));

var _actions = require("../actions");

var _createSelect = _interopRequireDefault(require("./createSelect"));

var _weToolbar = require("@ali/we-toolbar");

var _weIcon = require("@ali/we-icon");

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_weIcon.ToolbarAutoWrapNormal, null);

var _ref2 = /*#__PURE__*/_createElement(_weIcon.ToolbarOverflowNormal, null);

function WrapIcon(props) {
  const {
    on,
    showTitle,
    locale
  } = props;

  if (on) {
    return /*#__PURE__*/_createElement(_weToolbar.IconButton, {
      icon: _ref,
      showTitle: showTitle,
      title: locale.wrapOpen
    });
  } else {
    return /*#__PURE__*/_createElement(_weToolbar.IconButton, {
      icon: _ref2,
      showTitle: showTitle,
      title: locale.wrapClose
    });
  }
}

const WrapSelect = (0, _createSelect.default)({
  name: 'wrap',
  createList: locale => [{
    title: /*#__PURE__*/_createElement(WrapIcon, {
      showTitle: true,
      locale: locale,
      on: true
    }),
    key: 'on'
  }, {
    title: /*#__PURE__*/_createElement(WrapIcon, {
      showTitle: true,
      locale: locale,
      on: false
    }),
    key: 'off'
  }]
});

const ToolbarLineWrap = props => {
  const {
    controller,
    locale,
    focusedCodeKey
  } = props;
  const code = (0, _getCurrentCode.default)(controller.value, focusedCodeKey);
  const handleChange = React.useCallback(val => {
    const codeBlock = (0, _getCurrentCode.default)(controller.value, focusedCodeKey);
    controller.run('onAction', (0, _actions.changeCodeData)(codeBlock, {
      wrap: val === 'on'
    }));
  }, [controller, focusedCodeKey]);
  return /*#__PURE__*/_createElement(WrapSelect, {
    locale: locale,
    value: code?.data.wrap ? 'on' : 'off',
    onChange: handleChange,
    tip: "",
    renderTrigger: () => /*#__PURE__*/_createElement(WrapIcon, {
      locale: locale,
      on: code?.data.wrap
    }),
    showArrow: true,
    style: {
      width: '48px'
    }
  });
};

var _default = ToolbarLineWrap;
exports.default = _default;
//# sourceMappingURL=ToolbarLineWrap.js.map