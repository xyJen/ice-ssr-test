"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everComponent = require("@ali/4ever-component");

var _themes = require("../../utils/constants/themes");

var _SimpleCode = _interopRequireDefault(require("../../components/SimpleCode"));

/* eslint-disable react/destructuring-assignment */
const _createElement = /*#__PURE__*/React.createElement;

const CodeEditor = props => {
  const {
    locale,
    node,
    controller
  } = props;
  const {
    data
  } = node;
  const {
    theme = _themes.DEFAULT_THEME,
    height,
    wrap = false
  } = data;
  const codeRef = React.useRef(null);
  const wrapperRef = React.useRef(null);
  const [selected, setSelected] = React.useState(false);
  const isPreviewing = controller.query('isQuickPreview');
  const handleClickOutside = React.useCallback(() => {
    // 延迟让toolbar消失，避免组件销毁导致无法删除，400是toolbar逻辑防抖时间
    setTimeout(() => {
      setSelected(false);
    }, 400);
  }, []);
  const handleSelect = React.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    setSelected(true);
  }, []);
  const handleCursor = React.useCallback(() => {
    // 移动端不知道为什么无法 focus 在 code 元素上，若不处理，光标会回到上一个地方，导致页面跳动。先 hack, click 后光标移动到代码块左端
    const leftPoint = _everCangjie.EdgePoint.create({
      key: node.key,
      edge: 'before'
    });

    controller.run('onCangjieSelect', (0, _everCangjie.CangjieSelectEvent)({
      selection: _everCangjie.Selection.create({
        anchor: leftPoint,
        focus: leftPoint
      })
    }));
  }, [controller, node]);
  (0, _everComponent.useOnClickOutside)(codeRef, handleClickOutside, false, target => {
    // 目前难以获取整个 toolbar 的 dom ref，先临时处理 delete button 解决无法删除的 bug；后续改造成基于 isSelected 判断是否展示 toolbar
    return document.querySelector('div[data-testid="code-block-remove"]')?.contains(target) || false;
  });
  return /*#__PURE__*/_createElement("div", {
    ref: wrapperRef,
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/_createElement(_SimpleCode.default, {
    ref: codeRef,
    code: node.text,
    theme: theme,
    height: height,
    node: node,
    onTouchStart: handleSelect,
    onMouseDown: handleSelect,
    onClick: handleCursor,
    lineWrapping: wrap
  }));
};

var _default = /*#__PURE__*/React.memo(CodeEditor);

exports.default = _default;
//# sourceMappingURL=MobileCodeEditor.js.map