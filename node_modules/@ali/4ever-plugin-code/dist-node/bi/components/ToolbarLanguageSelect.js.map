{"version":3,"sources":["../../../../src/bi/components/ToolbarLanguageSelect.tsx"],"names":["ToolbarLanguageSelect","props","controller","locale","focusedCodeKey","code","value","handleChange","React","useCallback","syntax","codeBlock","run","languages","useMemo","filterOptions","search","option","children","toLowerCase","includes","inputTriggerText","lang","find","l","key","title","data","DEFAULT_LANGUAGE","languageTitle","width"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;AACA;;uBAL4B,a;;AAa5B,MAAMA,qBAAoD,GAAIC,KAAD,IAAW;AACtE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA;AAAtB,MAAyCH,KAA/C;AACA,QAAMI,IAAI,GAAG,6BAAeH,UAAU,CAACI,KAA1B,EAAiCF,cAAjC,CAAb;AAEA,QAAMG,YAAY,GAAGC,KAAK,CAACC,WAAN,CAClBC,MAAD,IAAY;AACV,UAAMC,SAAS,GAAG,6BAAeT,UAAU,CAACI,KAA1B,EAAiCF,cAAjC,CAAlB;AACAF,IAAAA,UAAU,CAACU,GAAX,CACE,UADF,EAEE,6BAAeD,SAAf,EAA0B;AACxBD,MAAAA;AADwB,KAA1B,CAFF;AAMD,GATkB,EAUnB,CAACR,UAAD,EAAaE,cAAb,CAVmB,CAArB;AAaA,QAAMS,SAAS,GAAGL,KAAK,CAACM,OAAN,CAAc,MAAM,qCAApB,EAA2C,EAA3C,CAAlB;AACA,QAAMC,aAAa,GAAGP,KAAK,CAACC,WAAN,CAAkB,CAACO,MAAD,EAAiBC,MAAjB,KAA6C;AACnF,WAAQ,GAAGA,MAAD,CAAgBhB,KAAhB,EAAuBiB,QAAS,EAAnC,CAAqCC,WAArC,GAAmDC,QAAnD,CAA4DJ,MAAM,CAACG,WAAP,EAA5D,CAAP;AACD,GAFqB,EAEnB,EAFmB,CAAtB;AAGA,QAAME,gBAAgB,GAAGb,KAAK,CAACC,WAAN,CAAmBH,KAAD,IAAmB;AAC5D,UAAMgB,IAAI,GAAGT,SAAS,CAACU,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUnB,KAAhC,GAAwCoB,KAAxC,IAAiDpB,KAA9D;AACA,WAAOgB,IAAP;AACD,GAHwB,EAGtB,CAACT,SAAD,CAHsB,CAAzB;AAKA,sBACE,eAAC,uBAAD;AACE,IAAA,MAAM,EAAEV,MADV;AAEE,IAAA,KAAK,EAAEE,IAAI,GAAGA,IAAI,CAACsB,IAAL,CAAUjB,MAAb,GAAsBkB,2BAFnC;AAGE,IAAA,QAAQ,EAAErB,YAHZ;AAIE,IAAA,GAAG,EAAEJ,MAAM,CAAC0B,aAJd;AAKE,IAAA,SAAS,MALX;AAME,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF,KANT;AASE,IAAA,YAAY,EAAEf,aAThB;AAUE,IAAA,gBAAgB,EAAEM;AAVpB,IADF;AAcD,CAxCD;;eAyCerB,qB","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport LanguageSelect from './LanguageSelect';\nimport getCurrentCode from '../queries/getCurrentCode';\nimport { CodePluginConfig } from '../types';\nimport { changeCodeData } from '../actions';\nimport { createCodeLanguages, DEFAULT_LANGUAGE } from '../../utils/constants/languages';\n\nexport interface LanguageSelectProps {\n  controller: Controller;\n  locale: CodePluginConfig['locale'];\n  focusedCodeKey?: string;\n}\n\nconst ToolbarLanguageSelect: React.FC<LanguageSelectProps> = (props) => {\n  const { controller, locale, focusedCodeKey } = props;\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n\n  const handleChange = React.useCallback(\n    (syntax) => {\n      const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n      controller.run(\n        'onAction',\n        changeCodeData(codeBlock, {\n          syntax,\n        }),\n      );\n    },\n    [controller, focusedCodeKey],\n  );\n\n  const languages = React.useMemo(() => createCodeLanguages(), []);\n  const filterOptions = React.useCallback((search: string, option: React.ReactNode) => {\n    return `${(option as any).props?.children}`.toLowerCase().includes(search.toLowerCase());\n  }, []);\n  const inputTriggerText = React.useCallback((value: string) => {\n    const lang = languages.find((l) => l.key === value)?.title || value;\n    return lang;\n  }, [languages]);\n\n  return (\n    <LanguageSelect\n      locale={locale}\n      value={code ? code.data.syntax : DEFAULT_LANGUAGE}\n      onChange={handleChange}\n      tip={locale.languageTitle}\n      showArrow\n      style={{\n        width: '110px',\n      }}\n      filterOption={filterOptions}\n      inputTriggerText={inputTriggerText}\n    />\n  );\n};\nexport default ToolbarLanguageSelect;\n"],"file":"ToolbarLanguageSelect.js"}