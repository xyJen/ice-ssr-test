"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inlineMenu = exports.menu = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _actions = require("../actions");

var _hotKeyTips = require("../utils/hotKeyTips");

var _role = require("../../utils/role");

const _createElement = /*#__PURE__*/React.createElement;
;
const CODE_MENU_STYLE = {
  whiteSpace: 'nowrap'
};

function WithCodeMenu(Component) {
  return function CodeMenu(props) {
    const {
      menuItem,
      controller
    } = props;
    const {
      action,
      title,
      extra,
      ...rest
    } = menuItem;
    const {
      value
    } = controller;

    const handleClick = () => {
      if (action && action === 'format') {
        return controller.run('onAction', (0, _actions.transformCode)());
      }

      controller.run('onAction', (0, _actions.insertCode)());
    };

    const isDisabled = React.useMemo(() => controller.query('isSelectionInLinkCard') || controller.query('isSelectionInSubjectHeading'), [value]);
    return /*#__PURE__*/_createElement(Component, (0, _extends2.default)({
      disabled: isDisabled,
      style: CODE_MENU_STYLE,
      extra: extra !== undefined ? extra : _hotKeyTips.CODE_INSERT_HOT_KEY_TIP
    }, rest, {
      onClick: handleClick,
      role: _role.CodeRole.code
    }), title || '');
  };
}

const menu = WithCodeMenu(_weDesign.MenuItem);
exports.menu = menu;
const inlineMenu = WithCodeMenu(_weDesign.InlineMenuItem);
exports.inlineMenu = inlineMenu;
//# sourceMappingURL=Menu.js.map