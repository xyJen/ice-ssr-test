{"version":3,"sources":["../../../../src/bi/components/ToolbarLineWrap.tsx"],"names":["WrapIcon","props","on","showTitle","locale","wrapOpen","wrapClose","WrapSelect","name","createList","title","key","ToolbarLineWrap","controller","focusedCodeKey","code","value","handleChange","React","useCallback","val","codeBlock","run","wrap","data","width"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;uBAN4B,a;;wBAsBJ,eAAC,6BAAD,O;;yBAIA,eAAC,6BAAD,O;;AAZxB,SAASA,QAAT,CAAkBC,KAAlB,EAIG;AACD,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,SAAN;AAAiBC,IAAAA;AAAjB,MAA4BH,KAAlC;;AACA,MAAIC,EAAJ,EAAQ;AACN,wBACE,eAAC,qBAAD;AAAY,MAAA,IAAI,MAAhB;AAA6C,MAAA,SAAS,EAAEC,SAAxD;AAAmE,MAAA,KAAK,EAAEC,MAAM,CAACC;AAAjF,MADF;AAGD,GAJD,MAIO;AACL,wBACE,eAAC,qBAAD;AAAY,MAAA,IAAI,OAAhB;AAA6C,MAAA,SAAS,EAAEF,SAAxD;AAAmE,MAAA,KAAK,EAAEC,MAAM,CAACE;AAAjF,MADF;AAGD;AACF;;AAED,MAAMC,UAAU,GAAG,2BAAa;AAC9BC,EAAAA,IAAI,EAAE,MADwB;AAE9BC,EAAAA,UAAU,EAAGL,MAAD,IAAY,CACtB;AACEM,IAAAA,KAAK,eAAE,eAAC,QAAD;AAAU,MAAA,SAAS,MAAnB;AAAoB,MAAA,MAAM,EAAEN,MAA5B;AAAoC,MAAA,EAAE;AAAtC,MADT;AAEEO,IAAAA,GAAG,EAAE;AAFP,GADsB,EAKtB;AACED,IAAAA,KAAK,eAAE,eAAC,QAAD;AAAU,MAAA,SAAS,MAAnB;AAAoB,MAAA,MAAM,EAAEN,MAA5B;AAAoC,MAAA,EAAE,EAAE;AAAxC,MADT;AAEEO,IAAAA,GAAG,EAAE;AAFP,GALsB;AAFM,CAAb,CAAnB;;AAcA,MAAMC,eAAwC,GAAIX,KAAD,IAAW;AAC1D,QAAM;AAAEY,IAAAA,UAAF;AAAcT,IAAAA,MAAd;AAAsBU,IAAAA;AAAtB,MAAyCb,KAA/C;AACA,QAAMc,IAAI,GAAG,6BAAeF,UAAU,CAACG,KAA1B,EAAiCF,cAAjC,CAAb;AAEA,QAAMG,YAAY,GAAGC,KAAK,CAACC,WAAN,CAClBC,GAAD,IAAiB;AACf,UAAMC,SAAS,GAAG,6BAAeR,UAAU,CAACG,KAA1B,EAAiCF,cAAjC,CAAlB;AACAD,IAAAA,UAAU,CAACS,GAAX,CACE,UADF,EAEE,6BAAeD,SAAf,EAA0B;AACxBE,MAAAA,IAAI,EAAEH,GAAG,KAAK;AADU,KAA1B,CAFF;AAMD,GATkB,EAUnB,CAACP,UAAD,EAAaC,cAAb,CAVmB,CAArB;AAaA,sBACE,eAAC,UAAD;AACE,IAAA,MAAM,EAAEV,MADV;AAEE,IAAA,KAAK,EAAEW,IAAI,EAAES,IAAN,CAAWD,IAAX,GAAkB,IAAlB,GAAyB,KAFlC;AAGE,IAAA,QAAQ,EAAEN,YAHZ;AAIE,IAAA,GAAG,EAAC,EAJN;AAKE,IAAA,aAAa,EAAE,mBACb,eAAC,QAAD;AAAU,MAAA,MAAM,EAAEb,MAAlB;AAA0B,MAAA,EAAE,EAAEW,IAAI,EAAES,IAAN,CAAWD;AAAzC,MANJ;AAQE,IAAA,SAAS,MARX;AASE,IAAA,KAAK,EAAE;AACLE,MAAAA,KAAK,EAAE;AADF;AATT,IADF;AAeD,CAhCD;;eAiCeb,e","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport getCurrentCode from '../queries/getCurrentCode';\nimport { CodePluginConfig } from '../types';\nimport { changeCodeData } from '../actions';\nimport createSelect from './createSelect';\nimport { IconButton } from '@ali/we-toolbar';\nimport { ToolbarAutoWrapNormal, ToolbarOverflowNormal } from '@ali/we-icon';\n\nexport interface LineWrapProps {\n  controller: Controller;\n  locale: CodePluginConfig['locale'];\n  focusedCodeKey?: string;\n}\n\nfunction WrapIcon(props: {\n  on: boolean;\n  showTitle?: boolean;\n  locale: CodePluginConfig['locale'];\n}) {\n  const { on, showTitle, locale } = props;\n  if (on) {\n    return (\n      <IconButton icon={<ToolbarAutoWrapNormal />} showTitle={showTitle} title={locale.wrapOpen} />\n    )\n  } else {\n    return (\n      <IconButton icon={<ToolbarOverflowNormal />} showTitle={showTitle} title={locale.wrapClose} />\n    )\n  }\n}\n\nconst WrapSelect = createSelect({\n  name: 'wrap',\n  createList: (locale) => [\n    {\n      title: <WrapIcon showTitle locale={locale} on />,\n      key: 'on',\n    },\n    {\n      title: <WrapIcon showTitle locale={locale} on={false} />,\n      key: 'off',\n    },\n  ],\n});\n\nconst ToolbarLineWrap: React.FC<LineWrapProps> = (props) => {\n  const { controller, locale, focusedCodeKey } = props;\n  const code = getCurrentCode(controller.value, focusedCodeKey);\n\n  const handleChange = React.useCallback(\n    (val: string) => {\n      const codeBlock = getCurrentCode(controller.value, focusedCodeKey);\n      controller.run(\n        'onAction',\n        changeCodeData(codeBlock, {\n          wrap: val === 'on',\n        }),\n      );\n    },\n    [controller, focusedCodeKey],\n  );\n\n  return (\n    <WrapSelect\n      locale={locale}\n      value={code?.data.wrap ? 'on' : 'off'}\n      onChange={handleChange}\n      tip=\"\"\n      renderTrigger={() => (\n        <WrapIcon locale={locale} on={code?.data.wrap} />\n      )}\n      showArrow\n      style={{\n        width: '48px',\n      }}\n    />\n  );\n};\nexport default ToolbarLineWrap;\n"],"file":"ToolbarLineWrap.js"}