{"version":3,"sources":["../../../src/bi/getSnippetConfig.tsx"],"names":["getSnippetConfig","_","next","trigger","list","config","triggerSuffix","fetchItems","map","key","title","alias","name","filterItems","text","items","searchText","slice","insertSnippet","controller","item","run","code","syntax","dispatch","mdType","info","from"],"mappings":";;;;;;;AACA;;AAEA;;AACA;;AAOA,MAAMA,gBAA4C,GAAG,CAACC,CAAD,EAAIC,IAAJ,KAAa;AAChE,QAAMC,OAAO,GAAG,eAAhB;AACA,QAAMC,IAAI,GAAG,qCAAb;AAEA,QAAMC,MAAkC,GAAG;AACzCF,IAAAA,OADyC;AAEzCG,IAAAA,aAAa,EAAE,IAF0B;AAGzCC,IAAAA,UAAU,EAAE,YAAY;AACtB,aAAOH,IAAI,CAACI,GAAL,CAAS,CAAC;AAAEC,QAAAA,GAAF;AAAOC,QAAAA,KAAP;AAAcC,QAAAA;AAAd,OAAD,MAA4B;AAC1CF,QAAAA,GAD0C;AAE1CC,QAAAA,KAF0C;AAG1CC,QAAAA,KAH0C;AAI1CC,QAAAA,IAAI,EAAEF;AAJoC,OAA5B,CAAT,CAAP;AAMD,KAVwC;AAWzCG,IAAAA,WAAW,EAAE,OAAOC,IAAP,EAAqBC,KAArB,KAA+B;AAC1C,YAAMC,UAAU,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,CAAnB;;AACA,UAAI,CAACD,UAAL,EAAiB;AACf,eAAOD,KAAP;AACD;;AACD,aAAO,4BAAYA,KAAZ,EAAmBC,UAAnB,EAA+B;AAAEP,QAAAA,GAAG,EAAE;AAAP,OAA/B,CAAP;AACD,KAjBwC;AAkBzCS,IAAAA,aAAa,EAAE,CAACC,UAAD,EAAyBC,IAAzB,KAAkC;AAC/CD,MAAAA,UAAU,CAACE,GAAX,CAAe,UAAf,EAA2B,yBAAW;AAAEC,QAAAA,IAAI,EAAE,EAAR;AAAYC,QAAAA,MAAM,EAAEH,IAAI,CAACX;AAAzB,OAAX,CAA3B;AACAU,MAAAA,UAAU,CAACK,QAAX,CAAoB,6BAApB,EAAmD;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,IAAI,EAAEN,IAAI,CAACX,GAA7B;AAAkCkB,QAAAA,IAAI,EAAE;AAAxC,OAAnD;AACD;AArBwC,GAA3C;AAwBA,SAAO;AACL,KAACxB,OAAD,GAAWE,MADN;AAEL,OAAGH,IAAI;AAFF,GAAP;AAID,CAhCD;;eAkCeF,gB","sourcesContent":["import React from 'react';\nimport { fuzzySearch } from '@ali/4ever-utils';\nimport { Controller, Plugin, SnippetConfig, SnippetItemBase } from '@ali/4ever-cangjie';\nimport { createCodeLanguages } from '../utils/constants/languages';\nimport { insertCode } from './actions';\n\ninterface SnippetItem extends SnippetItemBase {\n  alias?: string[];\n  name: string;\n}\n\nconst getSnippetConfig: Plugin['getSnippetConfig'] = (_, next) => {\n  const trigger = '```[\\\\w\\+#]*$';\n  const list = createCodeLanguages();\n\n  const config: SnippetConfig<SnippetItem> = {\n    trigger,\n    triggerSuffix: '^$',\n    fetchItems: async () => {\n      return list.map(({ key, title, alias }) => ({\n        key,\n        title,\n        alias,\n        name: title,\n      }));\n    },\n    filterItems: async (text: string, items) => {\n      const searchText = text.slice(3);\n      if (!searchText) {\n        return items;\n      }\n      return fuzzySearch(items, searchText, { key: 'title' });\n    },\n    insertSnippet: (controller: Controller, item) => {\n      controller.run('onAction', insertCode({ code: '', syntax: item.key }));\n      controller.dispatch('createTriggerMarkdownAction', { mdType: 'code', info: item.key, from: 'snippet' });\n    },\n  };\n\n  return {\n    [trigger]: config,\n    ...next(),\n  }\n};\n\nexport default getSnippetConfig;"],"file":"getSnippetConfig.js"}