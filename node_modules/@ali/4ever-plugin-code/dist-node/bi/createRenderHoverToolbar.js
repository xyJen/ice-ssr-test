"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderHoverToolbar;

var React = _interopRequireWildcard(require("react"));

var _weDesignNext = require("@ali/we-design-next");

var _next = require("./components/next");

var _models = _interopRequireDefault(require("../mo/models"));

const _createElement = /*#__PURE__*/React.createElement;

function createRenderHoverToolbar(config) {
  const {
    locale = {}
  } = config;
  return (props, controller, getNode) => {
    const {
      buttonName,
      extraProps
    } = props;
    const {
      onOverlayVisibleChange
    } = extraProps;
    const node = getNode();

    if (!_models.default.isCode(node)) {
      return null;
    }

    const focusedCodeKey = node.key;

    switch (buttonName) {
      case 'theme':
        return /*#__PURE__*/_createElement(_weDesignNext.TBItemSlot, {
          display: "iconButton"
        }, /*#__PURE__*/_createElement(_next.ToolbarThemeSelect, {
          controller: controller,
          onOverlayVisibleChange: onOverlayVisibleChange,
          focusedCodeKey: focusedCodeKey,
          locale: locale
        }));

      case 'syntax':
        return /*#__PURE__*/_createElement(_weDesignNext.TBItemSlot, {
          display: "textSelect",
          width: 110
        }, /*#__PURE__*/_createElement(_next.ToolbarLanguageSelect, {
          controller: controller,
          onOverlayVisibleChange: onOverlayVisibleChange,
          focusedCodeKey: focusedCodeKey,
          locale: locale
        }));

      case 'lineWrap':
        return /*#__PURE__*/_createElement(_weDesignNext.TBItemSlot, {
          display: "iconSelect"
        }, /*#__PURE__*/_createElement(_next.ToolbarLineWrapSelect, {
          controller: controller,
          onOverlayVisibleChange: onOverlayVisibleChange,
          focusedCodeKey: focusedCodeKey,
          locale: locale
        }));

      default:
        return null;
    }
  };
}
//# sourceMappingURL=createRenderHoverToolbar.js.map