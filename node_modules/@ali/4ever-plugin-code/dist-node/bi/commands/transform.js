"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transform = exports.code2Code = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _insertCode = _interopRequireDefault(require("./insertCode"));

;

const code2Code = (controller, block) => {
  const lineArr = block.text.split('\n');
  controller.command(_everCangjie.Commands.removeNodeByKey, block.key).command(_everCangjie.Commands.deleteLineForward);
  controller.withoutNormalizing(() => {
    lineArr.forEach(line => {
      controller.command(_everCangjie.Commands.insertBlock, {
        type: _everPluginParagraph.Paragraph.TYPE
      }).command(_everCangjie.Commands.insertText, line);
    });
  });
};

exports.code2Code = code2Code;

const transform = (controller, config, id) => {
  const blocks = controller.query('getTransformNodes');
  const array = [];

  if (Array.isArray(blocks) && blocks.length > 0) {
    // 创建空段落聚焦
    controller.command(_everCangjie.Commands.moveToStartOfNode, blocks[0]).command(_everCangjie.Commands.insertBlock, _everPluginParagraph.Paragraph.TYPE).command(_everCangjie.Commands.blur);
    controller.withoutNormalizing(() => {
      blocks.forEach(block => {
        if (block.type === 'code') {
          return code2Code(controller, block);
        } else {
          array.push(block.text);
          controller.command(_everCangjie.Commands.removeNodeByKey, block.key);
        }
      });

      if (array.length > 0) {
        const text = array.join('\n');
        return controller.command((0, _insertCode.default)(config), id, text);
      }

      return undefined;
    });
  }

  return controller.command(_everCangjie.Commands.focus);
};

exports.transform = transform;
//# sourceMappingURL=transform.js.map