{"version":3,"sources":["../../../../src/bi/commands/transform.ts"],"names":["code2Code","controller","block","lineArr","text","split","command","Commands","removeNodeByKey","key","deleteLineForward","withoutNormalizing","forEach","line","insertBlock","type","Paragraph","TYPE","insertText","transform","config","id","blocks","query","array","Array","isArray","length","moveToStartOfNode","blur","push","join","undefined","focus"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEO,MAAMA,SAAS,GAAG,CAACC,UAAD,EAAyBC,KAAzB,KAAyC;AAChE,QAAMC,OAAO,GAAGD,KAAK,CAACE,IAAN,CAAWC,KAAX,CAAiB,IAAjB,CAAhB;AACAJ,EAAAA,UAAU,CACPK,OADH,CACWC,sBAASC,eADpB,EACqCN,KAAK,CAACO,GAD3C,EAEGH,OAFH,CAEWC,sBAASG,iBAFpB;AAIAT,EAAAA,UAAU,CAACU,kBAAX,CAA8B,MAAM;AAClCR,IAAAA,OAAO,CAACS,OAAR,CAAiBC,IAAD,IAAU;AACxBZ,MAAAA,UAAU,CACPK,OADH,CACWC,sBAASO,WADpB,EACiC;AAC7BC,QAAAA,IAAI,EAAEC,+BAAUC;AADa,OADjC,EAIGX,OAJH,CAIWC,sBAASW,UAJpB,EAIgCL,IAJhC;AAKD,KAND;AAOD,GARD;AASD,CAfM;;;;AAiBA,MAAMM,SAAS,GAAG,CAAClB,UAAD,EAAyBmB,MAAzB,EAAmDC,EAAnD,KAA8E;AACrG,QAAMC,MAAM,GAAGrB,UAAU,CAACsB,KAAX,CAAiB,mBAAjB,CAAf;AACA,QAAMC,KAAe,GAAG,EAAxB;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcJ,MAAd,KAAyBA,MAAM,CAACK,MAAP,GAAgB,CAA7C,EAAgD;AAC9C;AACA1B,IAAAA,UAAU,CACPK,OADH,CACWC,sBAASqB,iBADpB,EACuCN,MAAM,CAAC,CAAD,CAD7C,EAEGhB,OAFH,CAEWC,sBAASO,WAFpB,EAEiCE,+BAAUC,IAF3C,EAGGX,OAHH,CAGWC,sBAASsB,IAHpB;AAKA5B,IAAAA,UAAU,CAACU,kBAAX,CAA8B,MAAM;AAClCW,MAAAA,MAAM,CAACV,OAAP,CAAgBV,KAAD,IAAW;AACxB,YAAIA,KAAK,CAACa,IAAN,KAAe,MAAnB,EAA2B;AACzB,iBAAOf,SAAS,CAACC,UAAD,EAAaC,KAAb,CAAhB;AACD,SAFD,MAEO;AACLsB,UAAAA,KAAK,CAACM,IAAN,CAAW5B,KAAK,CAACE,IAAjB;AACAH,UAAAA,UAAU,CAACK,OAAX,CAAmBC,sBAASC,eAA5B,EAA6CN,KAAK,CAACO,GAAnD;AACD;AACF,OAPD;;AAQA,UAAIe,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACpB,cAAMvB,IAAI,GAAGoB,KAAK,CAACO,IAAN,CAAW,IAAX,CAAb;AACA,eAAO9B,UAAU,CAACK,OAAX,CAAmB,yBAAiBc,MAAjB,CAAnB,EAA6CC,EAA7C,EAAiDjB,IAAjD,CAAP;AACD;;AACD,aAAO4B,SAAP;AACD,KAdD;AAgBD;;AACD,SAAO/B,UAAU,CAACK,OAAX,CAAmBC,sBAAS0B,KAA5B,CAAP;AACD,CA5BM","sourcesContent":["import { Controller, Commands, Node } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport createInsertCode from './insertCode';\nimport { CodePluginConfig } from '../types';\n;\n\nexport const code2Code = (controller: Controller, block: Node) => {\n  const lineArr = block.text.split('\\n');\n  controller\n    .command(Commands.removeNodeByKey, block.key)\n    .command(Commands.deleteLineForward);\n\n  controller.withoutNormalizing(() => {\n    lineArr.forEach((line) => {\n      controller\n        .command(Commands.insertBlock, {\n          type: Paragraph.TYPE,\n        })\n        .command(Commands.insertText, line);\n    });\n  });\n};\n\nexport const transform = (controller: Controller, config: CodePluginConfig, id: string): Controller => {\n  const blocks = controller.query('getTransformNodes');\n  const array: string[] = [];\n  if (Array.isArray(blocks) && blocks.length > 0) {\n    // 创建空段落聚焦\n    controller\n      .command(Commands.moveToStartOfNode, blocks[0])\n      .command(Commands.insertBlock, Paragraph.TYPE)\n      .command(Commands.blur);\n\n    controller.withoutNormalizing(() => {\n      blocks.forEach((block) => {\n        if (block.type === 'code') {\n          return code2Code(controller, block);\n        } else {\n          array.push(block.text);\n          controller.command(Commands.removeNodeByKey, block.key);\n        }\n      });\n      if (array.length > 0) {\n        const text = array.join('\\n');\n        return controller.command(createInsertCode(config), id, text);\n      }\n      return undefined;\n    });\n\n  }\n  return controller.command(Commands.focus);\n};\n"],"file":"transform.js"}