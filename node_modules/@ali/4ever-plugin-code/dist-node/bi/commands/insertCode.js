"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createInsertCode;

var _everCangjie = require("@ali/4ever-cangjie");

var _lodash = require("lodash");

var _everPluginBasic = require("@ali/4ever-plugin-basic");

var _value = require("../constants/value");

var _findClosestCodeSetting = _interopRequireDefault(require("../utils/findClosestCodeSetting"));

var _languages = require("../../utils/constants/languages");

var _themes = require("../../utils/constants/themes");

function createInsertCode(config) {
  return function insertCode(controller, id, code, syntax, theme) {
    const {
      focusBlock,
      selection,
      blocks,
      document
    } = controller.value;

    if (!selection || !focusBlock) {
      return controller;
    } // 代码行之间保证有空行


    if (focusBlock.type === 'code') {
      controller.command(_everCangjie.Commands.insertBlock, {
        type: 'paragraph'
      });
    } // 防止段落被 split


    if (selection.isCollapsed && !selection.focus.isAtEndOfNode(focusBlock)) {
      controller.command(_everCangjie.Commands.moveToEndOfBlock);
    }

    const codeSetting = config?.getDefaultSetting && config.getDefaultSetting();
    const {
      syntax: closestSyntax = _languages.DEFAULT_LANGUAGE,
      theme: closestTheme = _themes.DEFAULT_THEME
    } = (0, _findClosestCodeSetting.default)(document, focusBlock, syntax) || {};
    const defaultTheme = codeSetting?.theme ? codeSetting.theme : closestTheme;
    const defaultSyntax = codeSetting?.syntax ? codeSetting.syntax : closestSyntax;
    const data = {
      syntax: (0, _lodash.isNil)(syntax) ? defaultSyntax : syntax,
      theme: (0, _lodash.isNil)(theme) ? defaultTheme : theme,
      height: null,
      id
    };
    let text = code;

    if ((0, _lodash.isNil)(code)) {
      text = selection.isExpanded ? blocks.map(block => block.text).join('\n') : '';
    }

    const codeNode = _everCangjie.Block.create({
      type: 'code',
      data,
      nodes: [_everCangjie.Text.create(text)]
    });

    controller.run('onAction', _everPluginBasic.biActions.createInsertBlockWithoutExtraBlankAction({
      node: codeNode
    }));
    controller.run('onAction', _everPluginBasic.biActions.createMergeDataAction({
      [_value.FOCUSED_CODE]: codeNode.key
    }));
    return controller;
  };
}
//# sourceMappingURL=insertCode.js.map