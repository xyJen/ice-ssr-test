"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnAction;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../actions");

var _updateCode = _interopRequireDefault(require("../commands/updateCode"));

var _removeCode = _interopRequireDefault(require("../commands/removeCode"));

var _insertCode = _interopRequireDefault(require("../commands/insertCode"));

var _transform = require("../commands/transform");

var _everPluginBasic = require("@ali/4ever-plugin-basic");

var _resetFocusedCode = _interopRequireDefault(require("../commands/resetFocusedCode"));

var _value = require("../constants/value");

var _everUtils = require("@ali/4ever-utils");

var _store = require("../store");

function createOnAction(config) {
  return function onAction(action, controller, next) {
    const {
      document
    } = controller.value;
    const {
      type,
      payload
    } = action;

    if (type === _actions.CODE_CHANGE) {
      const {
        node,
        patches
      } = payload;
      const textNode = node.getFirstText();
      const opts = patches.map(patch => {
        return {
          selection: _everCangjie.RangeSelection.fromJSON({
            anchor: {
              key: textNode.key,
              offset: patch.offset
            },
            focus: {
              key: textNode.key,
              offset: patch.type === 'insert' ? patch.offset : patch.offset + patch.value.length
            }
          }),
          content: patch.type === 'delete' ? '' : patch.value
        };
      });
      controller.withoutPending(editor => {
        opts.forEach(opt => {
          editor.command(_everCangjie.Commands.insertTextAtRange, opt.selection, opt.content);
        });
      });
    }

    if (type === _actions.CODE_CHANGE_DATA) {
      const {
        node,
        data
      } = payload;

      if (node) {
        return controller.command(_updateCode.default, node, data);
      }

      return controller.command(_resetFocusedCode.default);
    }

    if (type === _actions.CODE_FOCUS_TO_CODE_EDITOR) {
      const {
        node
      } = payload; // 代码块focus === 仓颉失焦，这时候手动更改选区到代码块

      const codeAnchor = _everCangjie.TextPoint.create({
        key: node.getFirstNode().key,
        offset: 0
      });

      const range = _everCangjie.RangeSelection.create({
        anchor: codeAnchor,
        focus: codeAnchor
      });

      controller.command(_everCangjie.Commands.select, range);
      return controller.withoutNormalizing(() => {
        controller.run('onAction', _everPluginBasic.biActions.createMergeDataAction({
          [_value.FOCUSED_CODE]: node.key
        }));
        controller.command(_everCangjie.Commands.blur);
      });
    }

    if (type === _actions.CODE_FOCUS_TO_TEXT_EDITOR) {
      const {
        direction = 'down',
        node
      } = payload;
      controller.withoutNormalizing(() => {
        controller.command(_everCangjie.Commands.focus);

        if (direction === 'left') {
          controller.command(_everCangjie.Commands.moveToStartOfNode, node);
        } // 回到代码块的上个段落


        if (direction === 'up') {
          const previousBlock = document.getPreviousBlock(node.key);

          if (previousBlock) {
            controller.command(_everCangjie.Commands.moveToEndOfNode, previousBlock).flush();
          } else {
            controller.command(_everCangjie.Commands.moveToStartOfNode, node);
          }
        } // 回到代码块的下个段落


        if (direction === 'down') {
          const nextBlock = document.getNextBlock(node.key);

          if (nextBlock) {
            controller.command(_everCangjie.Commands.moveToStartOfNode, nextBlock);
          } else {
            controller.command(_everCangjie.Commands.moveToEndOfNode, node);
          }
        }

        controller.run('onAction', _everPluginBasic.biActions.createMergeDataAction({
          [_value.FOCUSED_CODE]: null
        }));
      });
      return controller;
    }

    if (type === _actions.CODE_REMOVE) {
      const {
        node
      } = payload;
      return controller.command(_removeCode.default, node.key).command(_everCangjie.Commands.focus);
    }

    if (type === _actions.CODE_INSERT) {
      const {
        code,
        theme,
        syntax
      } = payload;
      const id = (0, _everUtils.generateKey)(); // eslint-disable-next-line no-param-reassign

      (0, _store.setFocusState)(id, true);
      return controller.command((0, _insertCode.default)(config), id, code, syntax, theme);
    }

    if (type === _actions.CODE_TRANSFORM) {
      const id = (0, _everUtils.generateKey)();
      (0, _store.setFocusState)(id, true);
      return controller.command(_transform.transform, config, id);
    }

    if (type === _actions.CODE_BLUR) {
      controller.run('onAction', _everPluginBasic.biActions.createMergeDataAction({
        [_value.FOCUSED_CODE]: null
      }));
      return controller;
    }

    return next();
  };
}
//# sourceMappingURL=createOnAction.js.map