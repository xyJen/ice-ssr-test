"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnKeyDown;

var _everCangjie = require("@ali/4ever-cangjie");

var _isHotkey = require("is-hotkey");

var _lodash = require("lodash");

var _actions = require("../actions");

var _isInCode = _interopRequireDefault(require("../queries/isInCode"));

var _shouldPreventEvent = _interopRequireDefault(require("../queries/shouldPreventEvent"));

var _languages = require("../../utils/constants/languages");

/* eslint-disable import/no-extraneous-dependencies */
;
const isEnterHotKey = (0, _isHotkey.isKeyHotkey)('enter');
const languages = (0, _languages.createCodeLanguages)();

function createOnKeyDown(config, enableInsert = true) {
  const isInsertHotKey = config.hotKey ? (0, _isHotkey.isKeyHotkey)(config.hotKey) : _lodash.stubFalse;
  const disabledSyntaxes = config.disabledSyntaxes || [];
  return function onKeyDown(event, controller, next) {
    const {
      selection,
      focusBlock
    } = controller.value;

    if (!selection) {
      return next();
    }

    const {
      focus,
      isCollapsed
    } = selection;

    if ((0, _shouldPreventEvent.default)(event, controller)) {
      return controller;
    }

    if (controller.query('isSelectionInTable', {
      excludeColumns: true
    })) {
      return next();
    }

    if (isCollapsed) {
      // 若当前段落存在三个 ```syntax，且在末尾换行，则创建代码块
      if (enableInsert && focusBlock && focusBlock.type !== 'code' && focus.isAtEndOfNode(focusBlock) && isEnterHotKey(event)) {
        let syntax = _languages.DEFAULT_LANGUAGE;
        const matched = (0, _lodash.trimStart)(focusBlock.text).match(/(```|···)([\w\-_\#]*)$/);

        if (matched) {
          const alias = matched[2];

          if (disabledSyntaxes.includes(alias.toLowerCase())) {
            return next();
          }

          const mode = languages.find(lang => lang.title.toLowerCase() === alias.toLocaleLowerCase() || (lang.alias || []).includes(alias));

          if (mode) {
            syntax = mode.key;
          }

          event.preventDefault();
          controller.command(_everCangjie.Commands.moveAnchorBackward, `\`\`\`${alias}`.length).command(_everCangjie.Commands.del);
          controller.run('onAction', (0, _actions.insertCode)({
            code: '',
            syntax
          }));
          controller.dispatch('createTriggerMarkdownAction', {
            mdType: 'code',
            info: mode?.key
          });
          return controller;
        }
      }
    } else if ((_everCangjie.hotkeys.isDeleteBackward(event) || _everCangjie.hotkeys.isDeleteForward(event)) && (0, _isInCode.default)(controller)) {
      event.preventDefault();
      const {
        blocks
      } = controller.value;
      controller.command(_everCangjie.Commands.del); // 如果选区两边code中内容为空，会导致无法删除的问题，这里需要再次判断并删除

      blocks.filter(block => block.type === 'code').forEach(block => {
        const {
          document
        } = controller.value;
        if (document.getNode(block.key)) controller.command(_everCangjie.Commands.removeNodeByKey, block.key);
      });
      return controller;
    }

    if (enableInsert && isInsertHotKey(event)) {
      event.preventDefault();
      controller.run('onAction', (0, _actions.insertCode)({}));
      return controller;
    }

    return next();
  };
}
//# sourceMappingURL=createOnKeyDown.js.map