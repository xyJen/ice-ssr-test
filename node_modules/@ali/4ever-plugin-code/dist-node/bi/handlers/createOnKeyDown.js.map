{"version":3,"sources":["../../../../src/bi/handlers/createOnKeyDown.ts"],"names":["isEnterHotKey","languages","createOnKeyDown","config","enableInsert","isInsertHotKey","hotKey","stubFalse","disabledSyntaxes","onKeyDown","event","controller","next","selection","focusBlock","value","focus","isCollapsed","query","excludeColumns","type","isAtEndOfNode","syntax","DEFAULT_LANGUAGE","matched","text","match","alias","includes","toLowerCase","mode","find","lang","title","toLocaleLowerCase","key","preventDefault","command","Commands","moveAnchorBackward","length","del","run","code","dispatch","mdType","info","hotkeys","isDeleteBackward","isDeleteForward","blocks","filter","block","forEach","document","getNode","removeNodeByKey"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport { Controller, Commands, hotkeys } from '@ali/4ever-cangjie';\nimport { isKeyHotkey } from 'is-hotkey';\nimport { stubFalse, trimStart } from 'lodash-es';\nimport { CodePluginConfig } from '../types';\nimport { insertCode } from '../actions';\nimport isInCode from '../queries/isInCode';\nimport shouldPreventEvent from '../queries/shouldPreventEvent';\n;\nimport { createCodeLanguages, DEFAULT_LANGUAGE } from '../../utils/constants/languages';\n\nconst isEnterHotKey = isKeyHotkey('enter');\n\nconst languages = createCodeLanguages();\n\nexport default function createOnKeyDown(\n  config: CodePluginConfig,\n  enableInsert = true,\n) {\n  const isInsertHotKey = config.hotKey ? isKeyHotkey(config.hotKey) : stubFalse;\n  const disabledSyntaxes = config.disabledSyntaxes || [];\n\n  return function onKeyDown(\n    event: React.KeyboardEvent,\n    controller: Controller,\n    next: () => void,\n  ) {\n    const { selection, focusBlock } = controller.value;\n\n    if (!selection) {\n      return next();\n    }\n\n    const { focus, isCollapsed } = selection;\n\n    if (shouldPreventEvent(event, controller)) {\n      return controller;\n    }\n\n    if (controller.query('isSelectionInTable', { excludeColumns: true })) {\n      return next();\n    }\n\n    if (isCollapsed) {\n      // 若当前段落存在三个 ```syntax，且在末尾换行，则创建代码块\n      if (\n        enableInsert &&\n        focusBlock &&\n        focusBlock.type !== 'code' &&\n        focus.isAtEndOfNode(focusBlock) &&\n        isEnterHotKey(event)\n      ) {\n        let syntax = DEFAULT_LANGUAGE;\n        const matched = trimStart(focusBlock.text).match(/(```|···)([\\w\\-_\\#]*)$/);\n        if (matched) {\n          const alias = matched[2];\n          if (disabledSyntaxes.includes(alias.toLowerCase())) {\n            return next();\n          }\n          const mode = languages.find(\n            (lang) => lang.title.toLowerCase() === alias.toLocaleLowerCase() ||\n              (lang.alias || []).includes(alias),\n          );\n          if (mode) {\n            syntax = mode.key;\n          }\n          event.preventDefault();\n          controller\n            .command(Commands.moveAnchorBackward, `\\`\\`\\`${alias}`.length)\n            .command(Commands.del);\n          controller.run('onAction', insertCode({ code: '', syntax }));\n          controller.dispatch('createTriggerMarkdownAction', { mdType: 'code', info: mode?.key });\n          return controller;\n        }\n      }\n    } else if (\n      (hotkeys.isDeleteBackward(event) || hotkeys.isDeleteForward(event)) &&\n      isInCode(controller)\n    ) {\n      event.preventDefault();\n      const { blocks } = controller.value;\n      controller.command(Commands.del);\n      // 如果选区两边code中内容为空，会导致无法删除的问题，这里需要再次判断并删除\n      blocks.filter(block => block.type === 'code').forEach(block => {\n        const { document } = controller.value;\n        if (document.getNode(block.key)) controller.command(Commands.removeNodeByKey, block.key);\n      });\n      return controller;\n    }\n\n    if (enableInsert && isInsertHotKey(event)) {\n      event.preventDefault();\n      controller.run('onAction', insertCode({}));\n      return controller;\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnKeyDown.js"}