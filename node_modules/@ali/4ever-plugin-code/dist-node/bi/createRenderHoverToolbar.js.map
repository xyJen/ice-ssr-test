{"version":3,"sources":["../../../src/bi/createRenderHoverToolbar.tsx"],"names":["createRenderHoverToolbar","config","locale","props","controller","getNode","buttonName","extraProps","onOverlayVisibleChange","node","Code","isCode","focusedCodeKey","key"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;uBAF4B,a;;AAKb,SAASA,wBAAT,CACbC,MADa,EAEmB;AAChC,QAAM;AAAEC,IAAAA,MAAM,GAAG;AAAX,MAAmBD,MAAzB;AACA,SAAO,CAACE,KAAD,EAAQC,UAAR,EAAoBC,OAApB,KAAgC;AACrC,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA6BJ,KAAnC;AACA,UAAM;AAAEK,MAAAA;AAAF,QAA6BD,UAAnC;AACA,UAAME,IAAI,GAAGJ,OAAO,EAApB;;AACA,QAAI,CAACK,gBAAKC,MAAL,CAAYF,IAAZ,CAAL,EAAwB;AACtB,aAAO,IAAP;AACD;;AACD,UAAMG,cAAc,GAAGH,IAAI,CAACI,GAA5B;;AACA,YAAQP,UAAR;AACE,WAAK,OAAL;AACE,4BACE,eAAC,wBAAD;AAAY,UAAA,OAAO,EAAC;AAApB,wBACE,eAAC,wBAAD;AACE,UAAA,UAAU,EAAEF,UADd;AAEE,UAAA,sBAAsB,EAAEI,sBAF1B;AAGE,UAAA,cAAc,EAAEI,cAHlB;AAIE,UAAA,MAAM,EAAEV;AAJV,UADF,CADF;;AAUF,WAAK,QAAL;AACE,4BACE,eAAC,wBAAD;AAAY,UAAA,OAAO,EAAC,YAApB;AAAiC,UAAA,KAAK,EAAE;AAAxC,wBACE,eAAC,2BAAD;AACE,UAAA,UAAU,EAAEE,UADd;AAEE,UAAA,sBAAsB,EAAEI,sBAF1B;AAGE,UAAA,cAAc,EAAEI,cAHlB;AAIE,UAAA,MAAM,EAAEV;AAJV,UADF,CADF;;AAUF,WAAK,UAAL;AACE,4BACE,eAAC,wBAAD;AAAY,UAAA,OAAO,EAAC;AAApB,wBACE,eAAC,2BAAD;AACE,UAAA,UAAU,EAAEE,UADd;AAEE,UAAA,sBAAsB,EAAEI,sBAF1B;AAGE,UAAA,cAAc,EAAEI,cAHlB;AAIE,UAAA,MAAM,EAAEV;AAJV,UADF,CADF;;AAUF;AAAS,eAAO,IAAP;AAlCX;AAoCD,GA5CD;AA6CD","sourcesContent":["import * as React from 'react';\nimport { TBItemSlot } from '@ali/we-design-next';\nimport { ToolbarThemeSelect, ToolbarLanguageSelect, ToolbarLineWrapSelect } from './components/next';\nimport Code from '../mo/models';\nimport type { BiPlugin } from '@ali/4ever-cangjie';\n\nexport default function createRenderHoverToolbar(\n  config: any\n): BiPlugin['renderHoverToolbar'] {\n  const { locale = {}  } = config;\n  return (props, controller, getNode) => {\n    const { buttonName, extraProps } = props;\n    const { onOverlayVisibleChange } = extraProps;\n    const node = getNode();\n    if (!Code.isCode(node)) {\n      return null;\n    }\n    const focusedCodeKey = node.key;\n    switch (buttonName) {\n      case 'theme':\n        return (\n          <TBItemSlot display='iconButton'>\n            <ToolbarThemeSelect\n              controller={controller}\n              onOverlayVisibleChange={onOverlayVisibleChange}\n              focusedCodeKey={focusedCodeKey}\n              locale={locale}\n            />\n          </TBItemSlot>\n        );\n      case 'syntax':\n        return (\n          <TBItemSlot display='textSelect' width={110}>\n            <ToolbarLanguageSelect\n              controller={controller}\n              onOverlayVisibleChange={onOverlayVisibleChange}\n              focusedCodeKey={focusedCodeKey}\n              locale={locale}\n            />\n          </TBItemSlot>\n        );\n      case 'lineWrap':\n        return (\n          <TBItemSlot display='iconSelect'>\n            <ToolbarLineWrapSelect\n              controller={controller}\n              onOverlayVisibleChange={onOverlayVisibleChange}\n              focusedCodeKey={focusedCodeKey}\n              locale={locale}\n            />\n          </TBItemSlot>\n        );\n      default: return null;\n    }\n  };\n}\n"],"file":"createRenderHoverToolbar.js"}