{"version":3,"sources":["../../../src/zhi/index.tsx"],"names":["zhiFactory","configs","queries","lazyRenderStrategy","renderNode","props","controller","next","node","attributes","ref","rest","type","text","data","print","code","DEFAULT_THEME","DEFAULT_LANGUAGE","undefined"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;uBAN4B,a;;AASrB,MAAMA,UAAsB,GAAIC,OAAD,IAAa;AACjD,SAAO,EACL,GAAG,oBAAU,EAAV,CADE;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,kBAAkB,EAAlBA;AADO,KAFJ;;AAKLC,IAAAA,UAAU,CAACC,KAAD,EAAQC,UAAR,EAAoBC,IAApB,EAA0B;AAClC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAuBJ,KAA7B;AACA,YAAM;AAAEK,QAAAA,GAAF;AAAO,WAAGC;AAAV,UAAmBF,UAAzB;AACA,YAAM;AAAEG,QAAAA,IAAF;AAAQC,QAAAA,IAAR;AAAcC,QAAAA;AAAd,UAAuBN,IAA7B;;AACA,UAAII,IAAI,KAAK,MAAb,EAAqB;AACnB,eAAOL,IAAI,EAAX;AACD;;AAED,YAAM;AAAEQ,QAAAA,KAAK,GAAG;AAAV,UAAoBd,OAAO,CAACe,IAAR,IAAgB,EAA1C;AAEA,0BACE,eAAC,gBAAD,6BACML,IADN;AAEE,QAAA,UAAU,EAAEL,UAFd;AAGE,QAAA,IAAI,EAAEO,IAHR;AAIE,QAAA,IAAI,EAAEL,IAJR;AAKE,QAAA,KAAK,EAAE,wBAAQM,IAAR,EAAc,OAAd,EAAuBG,qBAAvB,CALT;AAME,QAAA,MAAM,EAAE,wBAAQH,IAAR,EAAc,QAAd,EAAwBI,2BAAxB,CANV;AAOE,QAAA,MAAM,EAAE,wBAAQJ,IAAR,EAAc,QAAd,EAAwBK,SAAxB,CAPV;AAQE,QAAA,YAAY,EAAE,CAAC,CAAC,wBAAQL,IAAR,EAAc,MAAd,EAAsB,KAAtB,CARlB;AASE,QAAA,KAAK,EAAEC;AATT,SADF;AAaD;;AA5BI,GAAP;AA8BD,CA/BM","sourcesContent":["import * as React from 'react';\nimport type { ZhiFactory } from '@ali/4ever-cangjie';\nimport { getData } from '@ali/4ever-utils';\nimport moFactory from '../mo/index';\nimport lazyRenderStrategy from '../common/queries/lazyRenderStrategy';\nimport CodeComponent from '../components/ZhiCode';\nimport { DEFAULT_THEME } from '../utils/constants/themes';\nimport { DEFAULT_LANGUAGE } from '../utils/constants/languages';\nimport type CodeModel from '../mo/models';\n\nexport const zhiFactory: ZhiFactory = (configs) => {\n  return {\n    ...moFactory({}),\n    queries: {\n      lazyRenderStrategy,\n    },\n    renderNode(props, controller, next) {\n      const { node, attributes } = props;\n      const { ref, ...rest } = attributes;\n      const { type, text, data } = node as CodeModel;\n      if (type !== 'code') {\n        return next();\n      }\n\n      const { print = false } = configs.code || {};\n\n      return (\n        <CodeComponent\n          {...rest}\n          controller={controller}\n          code={text}\n          node={node as CodeModel}\n          theme={getData(data, 'theme', DEFAULT_THEME)}\n          syntax={getData(data, 'syntax', DEFAULT_LANGUAGE)}\n          height={getData(data, 'height', undefined)}\n          lineWrapping={!!getData(data, 'wrap', false)}\n          print={print}\n        />\n      );\n    },\n  }\n};\n"],"file":"index.js"}