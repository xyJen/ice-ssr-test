{"version":3,"sources":["../../../src/mo/index.ts"],"names":["factory","key","schemas","type","ELEMENT_TYPE","isBlock","isEdgeSelectable","normalizeNode","node","controller","next","Block","nodes","length","Text","isText","leaves","newLeaf","create","text","i","child","command","Commands","removeNodeByKey","insertNodeByKey","serializer","models","klass","data","ind","undefined","Object","blockquote","Boolean","spacing","jc","String","calloutPr","subjectPr","uuid","shd"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,MAAMA,OAAkB,GAAG,OAAO;AAChCC,EAAAA,GAAG,EAAE,MAD2B;AAEhCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAEC,kBADC;AAEPC,IAAAA,OAAO,EAAE,IAFF;AAGPC,IAAAA,gBAAgB,EAAE;AAHX,GAFuB;AAOhCC,EAAAA,aAAa,EAAE,CAACC,IAAD,EAAOC,UAAP,EAAmBC,IAAnB,KAA4B;AACzC,QAAIC,mBAAMN,OAAN,CAAcG,IAAd,KAAuBA,IAAI,CAACL,IAAL,KAAc,MAAzC,EAAiD;AAC/C,UACEK,IAAI,CAACI,KAAL,CAAWC,MAAX,KAAsB,CAAtB,IACA,CAACC,kBAAKC,MAAL,CAAYP,IAAI,CAACI,KAAL,CAAW,CAAX,CAAZ,CADD,IAEAJ,IAAI,CAACI,KAAL,CAAW,CAAX,EAAcI,MAAd,CAAqBH,MAArB,KAAgC,CAHlC,EAIE;AACA,eAAO,MAAM;AACX,gBAAMI,OAAO,GAAGH,kBAAKI,MAAL,CAAYV,IAAI,CAACW,IAAjB,CAAhB,CADW,CAGX;;;AACA,gBAAM;AAAEN,YAAAA;AAAF,cAAaL,IAAI,CAACI,KAAxB;;AACA,eAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAApB,EAA4BO,CAAC,IAAI,CAAjC,EAAoC;AAClC,kBAAMC,KAAK,GAAGb,IAAI,CAACI,KAAL,CAAWQ,CAAX,CAAd;AACAX,YAAAA,UAAU,CAACa,OAAX,CAAmBC,sBAASC,eAA5B,EAA6CH,KAAK,CAAEpB,GAApD;AACD,WARU,CAUX;;;AACAQ,UAAAA,UAAU,CAACa,OAAX,CAAmBC,sBAASE,eAA5B,EAA6CjB,IAAI,CAACP,GAAlD,EAAuD,CAAvD,EAA0DgB,OAA1D;AACD,SAZD;AAaD;AACF;;AAED,WAAOP,IAAI,EAAX;AACD,GA/B+B;AAgChCgB,EAAAA,UAAU,EAAE,0BAhCoB;AAiChCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE,OADD;AAENzB,IAAAA,IAAI,EAAEC,kBAFA;AAGNyB,IAAAA,IAAI,EAAE;AACJC,MAAAA,GAAG,EAAE,CAACC,SAAD,EAAYC,MAAZ,CADD;AAEJC,MAAAA,UAAU,EAAE,CAACF,SAAD,EAAYG,OAAZ,CAFR;AAGJC,MAAAA,OAAO,EAAE,CAACJ,SAAD,EAAYC,MAAZ,CAHL;AAIJI,MAAAA,EAAE,EAAE,CAACL,SAAD,EAAYM,MAAZ,CAJA;AAKJC,MAAAA,SAAS,EAAE,CAACP,SAAD,EAAYC,MAAZ,CALP;AAMJO,MAAAA,SAAS,EAAE,CAACR,SAAD,EAAYC,MAAZ,CANP;AAOJQ,MAAAA,IAAI,EAAE,CAACT,SAAD,EAAYM,MAAZ,CAPF;AAQJI,MAAAA,GAAG,EAAE,CAACV,SAAD,EAAYC,MAAZ;AARD;AAHA;AAjCwB,CAAP,CAA3B;;eAiDehC,O","sourcesContent":["import { Block, Commands, MoFactory, Text } from '@ali/4ever-cangjie';\nimport createSerializer from './serializer';\nimport { ELEMENT_TYPE } from './meta';\n\nconst factory: MoFactory = () => ({\n  key: 'code',\n  schemas: {\n    type: ELEMENT_TYPE,\n    isBlock: true,\n    isEdgeSelectable: true,\n  },\n  normalizeNode: (node, controller, next) => {\n    if (Block.isBlock(node) && node.type === 'code') {\n      if (\n        node.nodes.length !== 1 ||\n        !Text.isText(node.nodes[0]) ||\n        node.nodes[0].leaves.length !== 1\n      ) {\n        return () => {\n          const newLeaf = Text.create(node.text);\n\n          // 删除之前的节点\n          const { length } = node.nodes;\n          for (let i = 0; i < length; i += 1) {\n            const child = node.nodes[i];\n            controller.command(Commands.removeNodeByKey, child!.key);\n          }\n\n          // 插入 text 节点\n          controller.command(Commands.insertNodeByKey, node.key, 0, newLeaf);\n        };\n      }\n    }\n\n    return next();\n  },\n  serializer: createSerializer(),\n  models: {\n    klass: 'block',\n    type: ELEMENT_TYPE,\n    data: {\n      ind: [undefined, Object],\n      blockquote: [undefined, Boolean],\n      spacing: [undefined, Object],\n      jc: [undefined, String],\n      calloutPr: [undefined, Object],\n      subjectPr: [undefined, Object],\n      uuid: [undefined, String],\n      shd: [undefined, Object],\n    },\n  },\n});\n\nexport default factory;\n"],"file":"index.js"}