'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var dayjs = require('dayjs');
var localeData = require('dayjs/plugin/localeData');
var i18next = require('i18next');
require('@ali/dingtalk-jsapi/entry/union');
var core = require('@ali/dingtalk-jsapi/core');
var ddSdk$1 = require('@ali/dingtalk-jsapi/lib/ddSdk');
var env$1 = require('@ali/dingtalk-jsapi/lib/env');
var checkJsApi$1 = require('@ali/dingtalk-jsapi/plugin/checkJsApi');
var uniEvent = require('@ali/dingtalk-jsapi/plugin/uniEvent');
var toast$1 = require('@ali/dingtalk-jsapi/api/device/notification/toast');
var confirm$1 = require('@ali/dingtalk-jsapi/api/device/notification/confirm');
var alert$1 = require('@ali/dingtalk-jsapi/api/device/notification/alert');
var openLink$1 = require('@ali/dingtalk-jsapi/api/biz/util/openLink');
var _extends = require('@babel/runtime/helpers/extends');
var styled = require('styled-components');
var classnames = require('classnames');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);
var localeData__default = /*#__PURE__*/_interopDefaultLegacy(localeData);
var i18next__default = /*#__PURE__*/_interopDefaultLegacy(i18next);
var toast__default = /*#__PURE__*/_interopDefaultLegacy(toast$1);
var confirm__default = /*#__PURE__*/_interopDefaultLegacy(confirm$1);
var alert__default = /*#__PURE__*/_interopDefaultLegacy(alert$1);
var openLink__default = /*#__PURE__*/_interopDefaultLegacy(openLink$1);
var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var classnames__default = /*#__PURE__*/_interopDefaultLegacy(classnames);

dayjs__default['default'].extend(localeData__default['default']);
const resources = {};
const defaultLocale = 'zh-CN';
const LocaleContext = /*#__PURE__*/React__default['default'].createContext(defaultLocale);
const LocaleProvider = LocaleContext.Provider;
function defineLocale(lang, res) {
  resources[lang] = {
    translation: { ...(resources[lang] ? resources[lang].translation : {}),
      ...res
    }
  };
}
function useTranslate(locale) {
  const contextLocale = React.useContext(LocaleContext);
  const l = locale || contextLocale || defaultLocale;
  return getT(l);
}
function useGetContextLocale() {
  return React.useContext(LocaleContext);
}
const cacheT = {};

function getT(locale) {
  if (cacheT[locale]) {
    return cacheT[locale];
  }

  const inst = i18next__default['default'].createInstance();
  inst.init({
    fallbackLng: defaultLocale,
    lng: locale,
    resources
  });
  cacheT[locale] = inst.t.bind(inst);
  return cacheT[locale];
}

function useDayjsLocale(locale) {
  const contextLocale = React.useContext(LocaleContext);
  const l = locale || contextLocale || defaultLocale;
  const DAYJS_LOCALE_MAP = {
    'zh-CN': 'zh-cn',
    zh_CN: 'zh-cn',
    'zh-TW': 'zh-tw',
    zh_TW: 'zh-tw',
    'zh-HK': 'zh-hk',
    zh_HK: 'zh-hk',
    ja: 'ja',
    ja_JP: 'ja',
    'ja-JP': 'ja',
    'en-US': 'en',
    en_US: 'en'
  };
  return DAYJS_LOCALE_MAP[l];
}

/** 用于class组件 */
const TranslateComp = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    locale,
    textKey
  } = props;
  const t = useTranslate(locale);
  return t(textKey);
});

const TranslateProvider = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    children
  } = props;
  const translate = useTranslate(props.locale);
  return children(translate);
});

var ddJsApi = /*#__PURE__*/Object.freeze({
  __proto__: null,
  devConfig: core.devConfig,
  env: core.env,
  compareVersion: core.compareVersion,
  on: core.on,
  off: core.off,
  ddSdk: ddSdk$1.ddSdk,
  getENV: env$1.getENV,
  checkJsApi: checkJsApi$1.checkJsApi,
  getChannel: uniEvent.getChannel,
  toast: toast__default['default'],
  confirm: confirm__default['default'],
  alert: alert__default['default'],
  openLink: openLink__default['default']
});

/** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * !important: 注意，注意，这里是个大坑
 * 由于容器的bug，在iframe里面的页面，没有联通jsbridge，所以iframe里面无法调用到jsapi
 * - iframe只能从「顶层」window上去拿jsapi
 * - 「当前应用」需要给we-web提供必要的jsapi，挂载到window上
 * - 如果「当前应用」被嵌套到iframe中，jsapi需要父窗口提供
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

if (/dingtalk.com/.test(document.domain)) {
  /* 设置为同域，才能从windown上读值 */
  document.domain = 'dingtalk.com';
}

if (/dingtalk.test/.test(document.domain)) {
  // 日常环境
  try {
    document.domain = 'dingtalk.test';
  } catch (err) {
    console.error('日常环境中无法设置document.domain，原因未找到！', err);
  }
}

/* 当前的顶层窗口 */
const topWin = window.top;
/* 当前窗口是否在顶层（不在iframe里面） */

const isThisTopWindow = window === topWin;
/* 当前是否在钉钉容器中 */

let nowInDingTalk = (navigator.appVersion || '').includes('DingTalk');
/* 当前是否在钉钉容器中 */

const isDingTalk = () => nowInDingTalk;
/* 父子窗口约定在window上存放jsapi的地方 */

const FIELD = 'dd_jspi';
/* 顶层窗口的api集合 */

let JsApiFromTop = {
  isDingTalk
};

try {
  JsApiFromTop = topWin[FIELD] || {};
  topWin[FIELD] = JsApiFromTop;
} catch (e) {
  console.warn(e);
}
/**
 * 初始化jsapi集合，通过包装能做到
 * - 如果是在iframe中，就从顶层窗口去取api
 * - 保留api原来的类型
 */


function initJsApi(collection) {
  if (isThisTopWindow) {
    const {
      platform
    } = env$1.getENV();
    nowInDingTalk = nowInDingTalk || platform !== env$1.ENV_ENUM.notInDingTalk;
    /* 把api集合与已有的集合做合并（非覆盖） */

    Object.assign(JsApiFromTop, collection);
  } else {
    const judger = JsApiFromTop.isDingTalk;

    if (typeof judger === 'function') {
      nowInDingTalk = judger();
    }
  }

  /* 默认兜底空api */
  const fallback = (opts = {}) => {
    const {
      onFail,
      name
    } = opts;
    const err = new Error(`未找到对应的jsapi ${name}`);
    if (typeof onFail === 'function') onFail(err);
    return Promise.reject(err);
  };
  /* 提取一个api（保留了api原来的类型） */


  function api(name) {
    const target = JsApiFromTop[name];
    if (target) return target; // Todo 判断如果容器能在ifame成功接通jsbridge，则依然返回 collection[name];

    return () => fallback({
      name
    });
  }

  return api;
}

const getApi = initJsApi(ddJsApi);
const devConfig = getApi('devConfig');
const ddSdk = getApi('ddSdk');
const getENV = getApi('getENV');
const getChannel = getApi('getChannel');
const env = getApi('env');
const compareVersion = getApi('compareVersion');
const on = getApi('on');
const off = getApi('off');
const alert = getApi('alert');
const toast = getApi('toast');
const confirm = getApi('confirm');
const checkJsApi = getApi('checkJsApi');
const openLink = getApi('openLink');

/* \
|*|
|*|  Base64 / binary data / UTF-8 strings utilities (#2)
|*|
|*|  https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding
|*|
|*|  Author: madmurphy
|*|
\ */

const b64ToUint6 = nChr => {
  let result = 0;

  if (nChr > 64 && nChr < 91) {
    result = nChr - 65;
  } else if (nChr > 96 && nChr < 123) {
    result = nChr - 71;
  } else if (nChr > 47 && nChr < 58) {
    result = nChr + 4;
  } else if (nChr === 43) {
    result = 62;
  } else if (nChr === 47) {
    result = 63;
  } else {
    result = 0;
  }

  return result;
};

const uint6ToB64 = nUint6 => {
  let result = 0;

  if (nUint6 < 26) {
    result = nUint6 + 65;
  } else if (nUint6 < 52) {
    result = nUint6 + 71;
  } else if (nUint6 < 62) {
    result = nUint6 - 4;
  } else if (nUint6 === 62) {
    result = 43;
  } else if (nUint6 === 63) {
    result = 47;
  } else {
    result = 65;
  }

  return result;
};

const strToUTF8Arr = sDOMStr => {
  const nStrLen = sDOMStr.length; // nChr 8位的字节数

  let nArrLen = 0;
  let nChr = 0;
  /* mapping... */

  for (let nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {
    nChr = sDOMStr.charCodeAt(nMapIdx);

    if (nChr < 0x80) {
      nArrLen += 1;
    } else if (nChr < 0x800) {
      nArrLen += 2;
    } else if (nChr < 0x10000) {
      nArrLen += 3;
    } else if (nChr < 0x200000) {
      nArrLen += 4;
    } else if (nChr < 0x4000000) {
      nArrLen += 5;
    } else {
      nArrLen += 6;
    }
  } // 初始化字节数组


  const aBytes = new Uint8Array(nArrLen); // 将JS的字符串转换成UTF-8的字节数组

  for (let nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {
    nChr = sDOMStr.charCodeAt(nChrIdx);

    if (nChr < 128) {
      /* one byte */
      aBytes[nIdx++] = nChr;
    } else if (nChr < 0x800) {
      /* two bytes */
      aBytes[nIdx++] = 192 + (nChr >>> 6);
      aBytes[nIdx++] = 128 + (nChr & 63);
    } else if (nChr < 0x10000) {
      /* three bytes */
      aBytes[nIdx++] = 224 + (nChr >>> 12);
      aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
      aBytes[nIdx++] = 128 + (nChr & 63);
    } else if (nChr < 0x200000) {
      /* four bytes */
      aBytes[nIdx++] = 240 + (nChr >>> 18);
      aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
      aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
      aBytes[nIdx++] = 128 + (nChr & 63);
    } else if (nChr < 0x4000000) {
      /* five bytes */
      aBytes[nIdx++] = 248 + (nChr >>> 24);
      aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
      aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
      aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
      aBytes[nIdx++] = 128 + (nChr & 63);
    } else
      /* if (nChr <= 0x7fffffff) */
      {
        /* six bytes */
        aBytes[nIdx++] = 252 + (nChr >>> 30);
        aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);
        aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
        aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
        aBytes[nIdx++] = 128 + (nChr & 63);
      }
  }

  return aBytes;
};
const base64EncArr = aBytes => {
  const eqLen = (3 - aBytes.length % 3) % 3;
  let sB64Enc = ''; // base64编码

  for (let nMod3, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {
    nMod3 = nIdx % 3;
    /* Uncomment the following line in order to split the output in lines 76-character long: */

    /*
    if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += "\r\n"; }
    */

    nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);

    if (nMod3 === 2 || aBytes.length - nIdx === 1) {
      sB64Enc += String.fromCharCode(uint6ToB64(nUint24 >>> 18 & 63), uint6ToB64(nUint24 >>> 12 & 63), uint6ToB64(nUint24 >>> 6 & 63), uint6ToB64(nUint24 & 63));
      nUint24 = 0;
    }
  }

  return eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? '=' : '==');
}; // base64解码成utf-8字符串

const base64DecToArr = (sBase64, nBlockSize) => {
  // 过滤无效字符
  const sB64Enc = sBase64.replace(/[^A-Za-z0-9+/]/g, '');
  const nInLen = sB64Enc.length; // 初始化输出的utf-8数组

  const nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;
  const aBytes = new Uint8Array(nOutLen); // base64解析成utf-8数组

  for (let nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
    nMod4 = nInIdx & 3;
    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;

    if (nMod4 === 3 || nInLen - nInIdx === 1) {
      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
        aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
      }

      nUint24 = 0;
    }
  }

  return aBytes;
}; // utf-8字符数组转换成JS字符串

const UTF8ArrToStr = aBytes => {
  const nLen = aBytes.length;
  let sView = '';

  for (let nPart, nIdx = 0; nIdx < nLen; nIdx++) {
    nPart = aBytes[nIdx];
    let chr = 0;

    if (nPart > 251 && nPart < 254 && nIdx + 5 < nLen) {
      /* six bytes */

      /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */
      chr = (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128;
    } else if (nPart > 247 && nPart < 252 && nIdx + 4 < nLen) {
      /* five bytes */
      chr = (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128;
    } else if (nPart > 239 && nPart < 248 && nIdx + 3 < nLen) {
      /* four bytes */
      chr = (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128;
    } else if (nPart > 223 && nPart < 240 && nIdx + 2 < nLen) {
      /* three bytes */
      chr = (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128;
    } else if (nPart > 191 && nPart < 224 && nIdx + 1 < nLen) {
      /* two bytes */
      chr = (nPart - 192 << 6) + aBytes[++nIdx] - 128;
    } else {
      /* nPart < 127 ? */

      /* one byte */
      chr = nPart;
    }

    sView += String.fromCharCode(chr);
  }

  return sView;
}; // UTF-8的字符串转Base64编码

const textToBase64 = text => {
  let encode = '';

  try {
    encode = base64EncArr(strToUTF8Arr(text));
  } catch (err) {
    console.error('textToBase64 error:', err);
  }

  return encode;
}; // Base64编码转UTF-8的字符串

const base64ToText = data => {
  let decode = '';

  try {
    decode = UTF8ArrToStr(base64DecToArr(data));
  } catch (err) {
    console.error('textToBase64 error:', err);
  }

  return decode;
};

const parseErrObj = err => {
  if (!err) {
    return '';
  }

  const obj = err instanceof Error ? err.message : err;
  let result = '';

  try {
    result = JSON.stringify(obj);
  } catch (error) {
    console.error('parseErrObj error');
  }

  return result;
};

const noop = () => {};

const delay = n => new Promise(resolve => setTimeout(resolve, n));

const cancellablePromise = promise => {
  let isCanceled = false;
  const wrappedPromise = new Promise((resolve, reject) => {
    promise.then(value => isCanceled ? reject({
      isCanceled,
      value
    }) : resolve(value), error => reject({
      isCanceled,
      error
    }));
  });
  return {
    promise: wrappedPromise,
    cancel: () => isCanceled = true
  };
};

const useCancellablePromises = () => {
  const pendingPromises = React.useRef([]);

  const appendPendingPromise = promise => pendingPromises.current = [...pendingPromises.current, promise];

  const removePendingPromise = promise => pendingPromises.current = pendingPromises.current.filter(p => p !== promise);

  const clearPendingPromises = () => pendingPromises.current.map(p => p.cancel());

  const api = {
    appendPendingPromise,
    removePendingPromise,
    clearPendingPromises
  };
  return api;
};

const useClickPreventionOnDoubleClick = (onClick, onDoubleClick) => {
  if (!onDoubleClick) return [onClick || noop, noop];
  const api = useCancellablePromises();

  const handleClick = e => {
    api.clearPendingPromises();
    const waitForClick = cancellablePromise(delay(300));
    api.appendPendingPromise(waitForClick);
    return waitForClick.promise.then(() => {
      api.removePendingPromise(waitForClick);
      onClick && onClick(e);
    }).catch(errorInfo => {
      api.removePendingPromise(waitForClick);

      if (!errorInfo.isCanceled) {
        throw errorInfo.error;
      }
    });
  };

  const handleDoubleClick = e => {
    api.clearPendingPromises();
    onDoubleClick(e);
  };

  return [handleClick, handleDoubleClick];
};

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  useClickPreventionOnDoubleClick: useClickPreventionOnDoubleClick
});

const _createElement = /*#__PURE__*/React__default['default'].createElement;
const SHOW_TIME = 100;
const ORG_SCALE = 0.8;
const DropdownAnimation = /*#__PURE__*/React__default['default'].memo(props => {
  var _el$current;

  const {
    children,
    visible,
    maxHeight,
    overlayStyle,
    placement,
    className,
    ...reps
  } = props;
  const [show, setShow] = React.useState(false);
  const [hide, setHide] = React.useState(false);
  const el = React.useRef(null);
  const parentEl = (_el$current = el.current) === null || _el$current === void 0 ? void 0 : _el$current.closest('.popup-overlay-wrap');

  if (parentEl) {
    parentEl.style.padding = '0';
    parentEl.style.border = 'none';
    parentEl.style.boxShadow = 'none';
    parentEl.style.backgroundColor = 'transparent';
  }

  React.useEffect(() => {
    if (el.current && maxHeight) {
      el.current.style.overflow = 'hidden';
    }

    setShow(visible);
    const timer = setTimeout(() => {
      if (visible) setShow(false);

      if (el.current) {
        el.current.style.boxShadow = '0px 0px 1px rgba(0,0,0,0.24), 0px 8px 24px rgba(10,30,65,0.16)';

        if (maxHeight) {
          el.current.style.overflow = 'auto';
        }
      }
    }, SHOW_TIME);
    return () => {
      clearTimeout(timer);
      setHide(true);
    };
  }, [el, visible, maxHeight]);

  const placementClassName = () => {
    if (!el.current) return '';

    if (placement === 'topLeft') {
      const popup = el.current.closest('.popup-overlay-wrap');

      if (popup) {
        const position = popup.getAttribute('position') || 'tl,bl';
        if (position === 'bl,tl') return 'bottomLeft';
        if (position === 'tl,bl') return 'topLeft';
        if (position === 'bc,tc') return 'bottom';
        if (position === 'tc,bc') return 'top';
        if (position === 'tr,br') return 'topRight';
        if (position === 'br,tr') return 'bottomRight';
        if (position === 'cr,cl') return 'right';
        if (position === 'tr,tl') return 'rightTop';
        if (position === 'tl,tr') return 'leftTop';
        if (position === 'bl,br') return 'leftBottom';
        if (position === 'cl,cr') return 'left';
        if (position === 'br,bl') return 'rightBottom';
        return 'topLeft';
      }
    } else {
      return placement;
    }
  };

  return /*#__PURE__*/_createElement(Overlay, _extends__default['default']({
    ref: el,
    style: { ...overlayStyle,
      maxHeight
    },
    className: classnames__default['default']({
      show,
      hide
    }, className, placementClassName())
  }, reps), children);
});
DropdownAnimation.defaultProps = {
  placement: 'topLeft'
};
const DropdownAnimationContext = /*#__PURE__*/React__default['default'].createContext([]);
const Overlay = styled__default['default'].div`
  width: 100%;
  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.24),
    0px 8px 24px rgba(10, 30, 65, 0.16);
  border-radius: 4px;
  background-color: #fff;
  &.show {
    &.top {
      animation: ${'top'} ${SHOW_TIME}ms cubic-bezier(0.39, 0.575, 0.565, 1)
        forwards;
    }
    &.left {
      animation: ${'left'} ${SHOW_TIME}ms cubic-bezier(0.39, 0.575, 0.565, 1)
        forwards;
    }
    &.right {
      animation: ${'right'} ${SHOW_TIME}ms cubic-bezier(0.39, 0.575, 0.565, 1)
        forwards;
    }
    &.bottom {
      animation: ${'bottom'} ${SHOW_TIME}ms cubic-bezier(0.39, 0.575, 0.565, 1)
        forwards;
    }
    &.topLeft {
      animation: ${'topLeft'} ${SHOW_TIME}ms cubic-bezier(0.39, 0.575, 0.565, 1)
        forwards;
    }
    &.topRight {
      animation: ${'topRight'} ${SHOW_TIME}ms
        cubic-bezier(0.39, 0.575, 0.565, 1) forwards;
    }
    &.bottomLeft {
      animation: ${'bottomLeft'} ${SHOW_TIME}ms
        cubic-bezier(0.39, 0.575, 0.565, 1) forwards;
    }
    &.bottomRight {
      animation: ${'bottomRight'} ${SHOW_TIME}ms
        cubic-bezier(0.39, 0.575, 0.565, 1) forwards;
    }
    &.leftTop {
      animation: ${'leftTop'} ${SHOW_TIME}ms cubic-bezier(0.39, 0.575, 0.565, 1)
        forwards;
    }
    &.leftBottom {
      animation: ${'leftBottom'} ${SHOW_TIME}ms
        cubic-bezier(0.39, 0.575, 0.565, 1) forwards;
    }
    &.rightTop {
      animation: ${'rightTop'} ${SHOW_TIME}ms
        cubic-bezier(0.39, 0.575, 0.565, 1) forwards;
    }
    &.rightBottom {
      animation: ${'rightBottom'} ${SHOW_TIME}ms
        cubic-bezier(0.39, 0.575, 0.565, 1) forwards;
    }
  }

  @keyframes topLeft {
    0% {
      transform: scale(${ORG_SCALE});
      opacity: 0;
      transform-origin: 0% 0%;
    }
    100% {
      transform: scale(1);
      opacity: 1;
      transform-origin: 0% 0%;
    }
  }
  @keyframes leftTop {
    0% {
      transform: scale(${ORG_SCALE});
      opacity: 0;
      transform-origin: 0% 0%;
    }
    100% {
      transform: scale(1);
      opacity: 1;
      transform-origin: 0% 0%;
    }
  }
  @keyframes top {
    0% {
      transform: translateY(-12px);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }
  @keyframes topRight {
    0% {
      transform: scale(${ORG_SCALE});
      transform-origin: 100% 0%;
    }
    100% {
      transform: scale(1);
      transform-origin: 100% 0%;
    }
  }
  @keyframes rightTop {
    0% {
      transform: scale(${ORG_SCALE});
      transform-origin: 100% 0%;
    }
    100% {
      transform: scale(1);
      transform-origin: 100% 0%;
    }
  }
  @keyframes right {
    0% {
      transform: scale(${ORG_SCALE});
      transform-origin: 100% 50%;
    }
    100% {
      transform: scale(1);
      transform-origin: 100% 50%;
    }
  }
  @keyframes rightBottom {
    0% {
      transform: scale(${ORG_SCALE});
      transform-origin: 100% 100%;
    }
    100% {
      transform: scale(1);
      transform-origin: 100% 100%;
    }
  }
  @keyframes bottomRight {
    0% {
      transform: scale(${ORG_SCALE});
      transform-origin: 100% 100%;
    }
    100% {
      transform: scale(1);
      transform-origin: 100% 100%;
    }
  }
  @keyframes bottom {
    0% {
      transform: translateY(12px);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }
  @keyframes bottomLeft {
    0% {
      transform: scale(${ORG_SCALE});
      transform-origin: 0% 100%;
    }
    100% {
      transform: scale(1);
      transform-origin: 0% 100%;
    }
  }
  @keyframes leftBottom {
    0% {
      transform: scale(${ORG_SCALE});
      transform-origin: 0% 100%;
    }
    100% {
      transform: scale(1);
      transform-origin: 0% 100%;
    }
  }
  @keyframes left {
    0% {
      transform: scale(${ORG_SCALE});
      transform-origin: 0% 50%;
    }
    100% {
      transform: scale(1);
      transform-origin: 0% 50%;
    }
  }
`;

exports.DropdownAnimation = DropdownAnimation;
exports.DropdownAnimationContext = DropdownAnimationContext;
exports.LocaleProvider = LocaleProvider;
exports.TranslateComp = TranslateComp;
exports.TranslateProvider = TranslateProvider;
exports.UTF8ArrToStr = UTF8ArrToStr;
exports.alert = alert;
exports.base64DecToArr = base64DecToArr;
exports.base64EncArr = base64EncArr;
exports.base64ToText = base64ToText;
exports.checkJsApi = checkJsApi;
exports.compareVersion = compareVersion;
exports.confirm = confirm;
exports.ddSdk = ddSdk;
exports.defineLocale = defineLocale;
exports.devConfig = devConfig;
exports.env = env;
exports.getChannel = getChannel;
exports.getENV = getENV;
exports.hooks = index;
exports.isDingTalk = isDingTalk;
exports.off = off;
exports.on = on;
exports.openLink = openLink;
exports.parseErrObj = parseErrObj;
exports.strToUTF8Arr = strToUTF8Arr;
exports.textToBase64 = textToBase64;
exports.toast = toast;
exports.useDayjsLocale = useDayjsLocale;
exports.useGetContextLocale = useGetContextLocale;
exports.useTranslate = useTranslate;
//# sourceMappingURL=index.js.map
