import { filterFragment } from "./filter";
import { normalizeFragment } from "./normalize";
import { restructFragment } from "./restructFragment";
import { Controller, Value } from '@ali/4ever-cangjie';
export default function filterAndNormalize(props) {
  var fragment = props.fragment,
      models = props.models,
      rules = props.rules,
      schema = props.schema;
  var controllerPid = models == null ? void 0 : models.get('controllerPid');
  var result = fragment; // 业务层根据需要配置，粘贴要过滤的节点

  if (rules) {
    result = filterFragment(result, rules);
  } // 粘贴来自不同插件配置的编辑器时，处理framgment中不合法节点


  if (controllerPid && controllerPid !== (fragment == null ? void 0 : fragment.data.copyFrom)) {
    result = restructFragment(result, models);
  } // 使用Paste中的normalize对fragment进行处理


  result = normalizeFragment(result); // 使用 Mo中的strictSchema 对要粘贴的内容进行normalize处理

  var value = Value.create({
    document: result
  });
  var controller = Controller.create({
    value: value,
    plugins: [{
      schema: schema,
      models: []
    }]
  });
  return controller.value.document;
}
//# sourceMappingURL=filterAndNormalize.js.map