import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _createClass from "@babel/runtime/helpers/createClass";

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { CangjieDataTransfer, transferUtils, Value, constants } from '@ali/4ever-cangjie';
import logger from '@ali/4ever-logger';
import { escape } from 'lodash-es';
import { mimeTypes as MIME } from '@ali/4ever-utils';
import * as tester from "./tester";
import { ClipboardErrorEnum, MARKDOWN_GRAMMER_REGEXP } from "./constants";
import filterAndNormalize from "./filterAndNormalize";
var MIME_TYPES = constants.MIME_TYPES;
var cacheMimeTypes = [MIME.APPLICATION_CANGJIE_FRAGMENT, MIME.TEXT_HTML, MIME.TEXT_PLAIN];
/**
 * 自定义剪切板数据，封装了 fragment 等一些编辑器数据
 */

var ClipboardData = /*#__PURE__*/function () {
  _createClass(ClipboardData, [{
    key: "dropEffect",
    get: function get() {
      return this.nativeData.dropEffect;
    }
  }, {
    key: "effectAllowed",
    get: function get() {
      return this.nativeData.effectAllowed;
    }
  }, {
    key: "files",
    get: function get() {
      return this.nativeData.files;
    }
  }, {
    key: "items",
    get: function get() {
      return this.nativeData.items;
    }
  }, {
    key: "types",
    get: function get() {
      return this.nativeData.types;
    }
    /**
     * 1. 仓颉内容不作 markdown 语法校验
     * 2. 如果仅有 text/plain 内容 或 text 内容符合 markdown 语法，则可能为 Markdown 文本
     * 3. 属于特殊情况，则可能为 Markdown 文本：
     *   a. VSCode：MimeType === vscode-editor-data && mode === 'markdown'
     */

  }, {
    key: "maybeMarkdown",
    get: function get() {
      var _ref;

      if (this.types.includes(MIME.APPLICATION_CANGJIE_FRAGMENT)) {
        return false;
      }

      if (this.types.includes(MIME.TEXT_PLAIN) && (this.types.length === 1 || MARKDOWN_GRAMMER_REGEXP.test((_ref = this.getData(MIME.TEXT_PLAIN) || '') == null ? void 0 : _ref.trimStart == null ? void 0 : _ref.trimStart()))) {
        return true;
      }

      if (this.types.includes(MIME.APPLICATION_VSCODE)) {
        var data = this.getData(MIME.APPLICATION_VSCODE);

        try {
          if (JSON.parse(data).mode === 'markdown') {
            return true;
          }
        } catch (_unused) {
          return false;
        }
      }

      return false;
    }
  }]);

  function ClipboardData(nativeData, config, models) {
    this.nativeData = void 0;
    this.serializer = void 0;
    this.rules = void 0;
    this.schema = void 0;
    this.models = void 0;
    this.cangjieData = CangjieDataTransfer.create();
    this.fragment = null;
    this.parsedFragment = null;
    this.cacheId = '';
    this.receiveType = void 0;
    this.onError = void 0;
    this.nativeData = nativeData;
    var serializer = config.serializer,
        rules = config.rules,
        schema = config.schema,
        onError = config.onError;
    this.serializer = serializer;
    this.rules = rules;
    this.schema = schema;
    this.models = models;
    this.onError = onError;
    this.cacheId = this.getCacheId(); // 当传入的 nativeData 非仓颉类型时, 数据要 copy 一份，防止生命周期结束后被销毁

    if (nativeData && !(nativeData instanceof CangjieDataTransfer)) {
      for (var _i = 0, _Object$values = Object.values(MIME_TYPES); _i < _Object$values.length; _i++) {
        var type = _Object$values[_i];
        this.cangjieData = this.cangjieData.setData(type, nativeData.getData(type));
      }
    }
  }

  var _proto = ClipboardData.prototype;

  _proto.clearData = function clearData(format) {
    this.nativeData.clearData(format);
  };

  _proto.getData = function getData(format) {
    return this.nativeData.getData(format) || this.cangjieData.getData(format);
  };

  _proto.setData = function setData(format, data) {
    this.nativeData.setData(format, data);
  };

  _proto.setDragImage = function setDragImage(image, x, y) {
    this.nativeData.setDragImage(image, x, y);
  };

  _proto.hasData = function hasData(format) {
    return this.types.includes(format);
  } // event 支持 mutable 方式修改数据，需要通过 cacheId 校验 cache fragment 的有效性
  ;

  _proto.getCacheId = function getCacheId() {
    for (var _iterator = _createForOfIteratorHelperLoose(cacheMimeTypes), _step; !(_step = _iterator()).done;) {
      var type = _step.value;
      var data = this.nativeData.getData(type);

      if (data) {
        return data;
      }
    }

    return '';
  }
  /**
   * 读取剪切板中的 fragment
   * @param parse 是否强制解析 html/text，默认为 true
   */
  ;

  _proto.getFragment = function getFragment(parse) {
    if (parse === void 0) {
      parse = true;
    }

    // 如果有 fragment 缓存直接返回
    var currentCacheId = this.getCacheId();

    if (currentCacheId === this.cacheId) {
      if (this.fragment) {
        return this.fragment;
      } // 如果有解析后的 fragment 缓存直接返回


      if (parse && this.parsedFragment) {
        return this.parsedFragment;
      }
    }

    var fragment = null;

    try {
      var encoded = this.getData(MIME.APPLICATION_CANGJIE_FRAGMENT);

      if (encoded) {
        // 从仓颉编辑器拷贝
        fragment = transferUtils.decodeFragment(encoded);
      }

      if (parse && !fragment) {
        // 反序列化解析Html或Text
        fragment = this.getParseFragment();
      } // 如果剪切板中有 fragment, 对复制源来自仓颉或其他的内容，统一收口做normalize处理


      if (fragment) {
        fragment = this.normalizeFragment(fragment);
      }
    } catch (e) {
      if (this.onError) {
        e.type = ClipboardErrorEnum.PASTE_FAILED;
        this.onError(e);
      }

      console.error(e);
      logger.error(e);
    } // 不解析返回 null


    return fragment;
  }
  /**
   * 读取剪切板中的 纯文本内容
   */
  ;

  _proto.getTextFragment = function getTextFragment() {
    var text = this.getData(MIME.TEXT_PLAIN) || '';

    var _this$serializer$text = this.serializer.textToValue(text),
        document = _this$serializer$text.document;

    return document;
  }
  /**
   * 读取剪贴板中的纯文本内容，并返回以 Markdown 格式序列化的 Value
   *
   * @returns {Document}
   */
  ;

  _proto.getMarkdownFragment =
  /*#__PURE__*/
  function () {
    var _getMarkdownFragment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var text, _yield$this$serialize, document;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              text = this.getData(MIME.TEXT_PLAIN) || '';
              _context.next = 3;
              return this.serializer.markdownToValue(text);

            case 3:
              _yield$this$serialize = _context.sent;
              document = _yield$this$serialize.document;
              return _context.abrupt("return", document);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getMarkdownFragment() {
      return _getMarkdownFragment.apply(this, arguments);
    }

    return getMarkdownFragment;
  }()
  /**
   * 读取剪切板中的图片文件
   */
  ;

  _proto.getImages = function getImages() {
    var data = this.nativeData;
    var types = data.types;
    var exceptFileTypes = types.includes('Files') && types.filter(function (type) {
      return type !== 'Files';
    }) || []; // ms word 拷贝的图文混合内容，mime type 会带上 file 类型，这里判断防止误处理。（wps 无该问题）

    if (tester.isMicrosoftOffice(data) && exceptFileTypes.length > 1) {
      return [];
    } // perf: file 较大，每次读取 data.files 耗费大量时间，使用临时变量缓存优化


    var dataFiles = data.files;

    if (!dataFiles) {
      return [];
    }

    var images = [];

    for (var i = 0, length = dataFiles.length; i < length; i++) {
      var file = dataFiles[i]; // file 在一些特殊的情况是 undefined 🤷‍♀️

      if (file && file.type.startsWith('image/')) {
        images.push(file);
      }
    }

    return images;
  }
  /**
   * 获取第一个可接受的剪切板数据类型
   */
  ;

  _proto.getFirstReceiveType = function getFirstReceiveType() {
    if (this.receiveType) {
      return this.receiveType;
    }

    if (this.types.includes('files') && !tester.isMicrosoftOffice(this.nativeData)) {
      this.receiveType = 'files';
    } else if (this.hasData(MIME.APPLICATION_CANGJIE_FRAGMENT) || this.hasData(MIME.APPLICATION_SLATE_FRAGMENT)) {
      this.receiveType = 'fragment';
    } else if (this.hasData(MIME.TEXT_HTML)) {
      this.receiveType = 'html';
    } else if (this.hasData(MIME.TEXT_PLAIN)) {
      this.receiveType = 'text';
    } else {
      this.receiveType = 'unknown';
    }

    return this.receiveType;
  } // 根据入参判断实例化对象是否相同
  ;

  _proto.isEqual = function isEqual(nativeData, config, models) {
    var serializer = config.serializer,
        rules = config.rules,
        schema = config.schema;
    return this.nativeData === nativeData && this.serializer === serializer && this.rules === rules && this.schema === schema && this.models === models;
  };

  _proto.getTextHtml = function getTextHtml() {
    var html = '';

    if (this.hasData(MIME.APPLICATION_VSCODE)) {
      html = "<pre>" + escape(this.getData(MIME.TEXT_PLAIN)) + "</pre><p></p>";
    } else {
      html = this.getData(MIME.TEXT_HTML);
    }

    return html;
  };

  _proto.getParseFragment = function getParseFragment() {
    if (this.parsedFragment) {
      return this.parsedFragment;
    }

    var fragment = null;

    if (this.hasData(MIME.TEXT_HTML)) {
      var html = this.getTextHtml();

      if (html) {
        var _this$serializer$html = this.serializer.htmlToValue(html),
            document = _this$serializer$html.document;

        fragment = document;
        return fragment;
      }
    }

    if (this.hasData(MIME.TEXT_PLAIN)) {
      var text = this.getData(MIME.TEXT_PLAIN);

      if (text) {
        /**
         * 从 Excel 中复制表格，纯文本粘贴会附带 \t,当 \t 足够多时会造成渲染性能问题。
         * https://notes.dingtalk.com/doc/E0Vzg7l3wnjKAzJe?orgId=16872003&dd_progress=false&showmenu=false
         * */
        text = text.replace(/\t+/g, '    ');
        var textValue = this.serializer.textToValue(text);
        fragment = textValue.document;
      }
    }

    return fragment;
  };

  _proto.normalizeFragment = function normalizeFragment(fragment) {
    var newFragment = filterAndNormalize({
      fragment: fragment,
      models: this.models,
      rules: this.rules,
      schema: this.schema
    }); // 数据效验

    if (this.isValidFragment(newFragment)) {
      this.fragment = newFragment;
      this.parsedFragment = newFragment;
    }

    return newFragment;
  }
  /**
   * 拷贝过来的数据不一定完全可信，这里做一下数据效验
   * @param fragment
   */
  ;

  _proto.isValidFragment = function isValidFragment(fragment) {
    try {
      this.serializer.valueToJsonML(Value.create({
        document: fragment
      }));
      return true;
    } catch (error) {
      // eslint-disable-next-line no-console
      console.warn(error);
      return false;
    }
  };

  return ClipboardData;
}();

export default ClipboardData;
//# sourceMappingURL=ClipboardData.js.map