{"version":3,"sources":["../../../src/utils/normalize.ts"],"names":["Block","Text","Path","cloneDeep","flatten","Paragraph","DEFAULT_PAGE_WIDTH","getRandomId","createParagraph","text","create","type","nodes","markTableSpanMatrix","matrix","row","col","rowSpan","colSpan","i","rl","j","cl","normalizeTableSpan","table","firstRow","isBlock","rowSize","length","colSize","tableMatrix","Array","fill","map","normalizedTableRows","set","cell","data","hidden","maxRowSpan","maxColSpan","Math","min","normalizedTable","normalizeTableMatrix","maxColSize","reduce","size","max","Infinity","normalizedRows","offset","fillNodes","normalizeTableCell","tableRow","normalizedTableCells","tableCell","width","normalizedTableCell","normalizeTable","normalizedFirstRow","colsWidth","colsCount","colWidth","floor","normalizeEndLine","fragment","normalizedFragment","tables","filter","child","forEach","node","getNextSibling","key","isParagraphBlock","path","getPath","emptyParagraph","insertNode","increment","flatInvalidBlock","restructNodes","restructure","isParagraph","isParagraphNested","some","n","result","normalizeFragment","listIdMap","Map","mapDescendants","list","listId","newListId","has","get"],"mappings":"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","sourcesContent":["import { Document, Block, Text, Path } from '@ali/4ever-cangjie';\nimport { cloneDeep } from 'lodash-es';\nimport { flatten } from 'lodash-es';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport { DEFAULT_PAGE_WIDTH, getRandomId } from '@ali/4ever-utils';\n\nfunction createParagraph(text = '') {\n  return Block.create({\n    type: 'paragraph',\n    nodes: [Text.create(text)],\n  });\n}\n\n/**\n * 标记表格矩阵的隐藏单元格\n * @param matrix 表格矩阵\n * @param param1 起止坐标\n * @param param2 扩展跨度\n */\nfunction markTableSpanMatrix(\n  matrix: boolean[][],\n  [row, col]: [number, number],\n  [rowSpan, colSpan]: [number, number],\n) {\n  for (let i = row, rl = row + rowSpan; i < rl; i++) {\n    for (let j = col, cl = col + colSpan; j < cl; j++) {\n      if (i === row && j === col) {\n        continue;\n      }\n      matrix[i][j] = true;\n    }\n  }\n}\n\n/**\n * 订正表格的 span 属性\n * @param table\n */\nfunction normalizeTableSpan(table: Block): Block {\n  const firstRow = table.nodes[0];\n  if (!Block.isBlock(firstRow)) {\n    return table;\n  }\n  const rowSize = table.nodes.length;\n  const colSize = firstRow.nodes.length;\n  // 表格矩阵，如果是 hidden 坐标标记为 true\n  // 这里我们的遍历顺序是 左 -> 右 上 -> 下\n  const tableMatrix: boolean[][] = Array(rowSize).fill(0).map(() => Array(colSize).fill(false));\n\n  const normalizedTableRows = table.nodes.map((row, i) => {\n    if (!Block.isBlock(row)) {\n      return row;\n    }\n    return row.set('nodes', row.nodes.map((cell, j) => {\n      // 非 block 节点，这种情况可能会异常\n      if (!Block.isBlock(cell)) {\n        return cell;\n      }\n      // 如果是标记的 hidden 节点\n      if (tableMatrix[i][j]) {\n        return cell.set('data', {\n          ...cell.data,\n          rowSpan: 1,\n          colSpan: 1,\n          hidden: true,\n        });\n      }\n      // 当前坐标可允许的最大行跨度\n      const maxRowSpan = table.nodes.length - i;\n      // 当前坐标可允许的最大列跨度\n      const maxColSpan = row.nodes.length - j;\n      const rowSpan = Math.min(cell.data.rowSpan, maxRowSpan) || 1;\n      const colSpan = Math.min(cell.data.colSpan, maxColSpan) || 1;\n      // 如果单元格有跨度，则进行标记\n      if (rowSpan > 1 || colSpan > 1) {\n        markTableSpanMatrix(tableMatrix, [i, j], [rowSpan, colSpan]);\n      }\n      return cell.set('data', {\n        ...cell.data,\n        // 只有在 matrix 中标记的格子才 hidden，否则都不 hidden\n        hidden: false,\n        rowSpan,\n        colSpan,\n      });\n    }) as Block[]);\n  }) as Block[];\n\n  const normalizedTable = table.set('nodes', normalizedTableRows);\n  return normalizedTable;\n}\n\n/**\n * 订正表格的行列，使表格所有行列数量对齐\n * @param table\n */\nfunction normalizeTableMatrix(table: Block): Block {\n  const maxColSize = table.nodes.reduce((size, row) => {\n    if (Block.isBlock(row) && row.type === 'table-row') {\n      return Math.max(row.nodes.length, size);\n    }\n    return size;\n  }, -Infinity);\n\n  const normalizedRows = table.nodes.map((row) => {\n    if (Block.isBlock(row) && row.type === 'table-row' && row.nodes.length < maxColSize) {\n      // 当前行的列数与最大列数的差值\n      const offset = maxColSize - row.nodes.length;\n      // 填充空单元格\n      // TODO: 这里与 table 有强耦合，待 @灯少 重构，将 normalize 职责改为由 table 本身出发。这里先通过实现一个创建 table cell 逻辑解耦\n      //const fillNodes = Array(offset).fill(0).map(() => createEmptyTableCell());\n      const fillNodes = Array(offset).fill(0).map(() => {\n        return Block.create({\n          data: { colSpan: 1, rowSpan: 1 },\n          type: 'table-cell',\n          nodes: [Block.create({\n            type: 'paragraph',\n            nodes: [Text.create('')],\n          })]\n        })\n      });\n      return row.set('nodes', [...(row.nodes as Block[]), ...fillNodes]);\n    }\n    return row;\n  }) as Block[];\n  return table.set('nodes', normalizedRows);\n}\n\n/**\n * 订正表格单元格数据\n * @param table\n */\nfunction normalizeTableCell(table: Block): Block {\n  const normalizedTableRows = table.nodes.map((tableRow) => {\n    if (!Block.isBlock(tableRow) || tableRow.type !== 'table-row') {\n      return tableRow;\n    }\n    const normalizedTableCells = tableRow.nodes.map((tableCell) => {\n      if (!Block.isBlock(tableCell) || tableCell.type !== 'table-cell') {\n        return tableCell;\n      }\n      const data = cloneDeep(tableCell.data);\n      // width 脏数据\n      delete data.width;\n      let normalizedTableCell = tableCell.set('data', data);\n      // 如果 tc 下面是空，或者不是 block 节点，则进行数据订正\n      if (normalizedTableCell.nodes.length === 0 || !Block.isBlock(normalizedTableCell.nodes[0])) {\n        normalizedTableCell = normalizedTableCell.set('nodes', [createParagraph()]);\n      }\n      return normalizedTableCell;\n    });\n\n    return tableRow.set('nodes', normalizedTableCells);\n  });\n\n  return table.set('nodes', normalizedTableRows);\n}\n\n/**\n * normalize 表格的数据\n * @param table\n */\nfunction normalizeTable(table: Block): Block {\n  // 空行\n  if (table.nodes.length === 0) {\n    return createParagraph();\n  }\n  const firstRow = table.nodes[0] as Block;\n  // 空列\n  if (!Block.isBlock(firstRow) || firstRow.nodes.length === 0) {\n    return createParagraph();\n  }\n\n  // 填充表格空缺的单元格\n  let normalizedTable = normalizeTableMatrix(table);\n  // 填补表格单元格的跨度属性及隐藏属性\n  normalizedTable = normalizeTableSpan(normalizedTable);\n\n  const normalizedFirstRow = normalizedTable.nodes[0] as Block;\n  // colsWidth 可能为空，这种情况表格会彻底坏掉\n  let { colsWidth = [] } = normalizedTable.data as { colsWidth?: number[] };\n  const colsCount = normalizedFirstRow.nodes.length;\n  // 如果 colsWidth 和列数不相等，则重新计算\n  if (colsWidth.length !== colsCount) {\n    // 注意这里不会使用 tc 上面的 width，tc.data.width 全部是脏数据\n    // 650 的值与 Mo 中对齐，含义是纸张的宽度\n    const colWidth = Math.floor(DEFAULT_PAGE_WIDTH / colsCount);\n    colsWidth = Array(colsCount).fill(colWidth);\n    normalizedTable = normalizedTable.set('data', {\n      ...normalizedTable.data,\n      colsWidth,\n    });\n  }\n\n  // 订正表格单元格数据\n  normalizedTable = normalizeTableCell(normalizedTable);\n\n  return normalizedTable;\n}\n\n/**\n * normalize 末尾断行\n * @param fragment\n */\nfunction normalizeEndLine(fragment: Document): Document {\n  let normalizedFragment = fragment;\n  // 只有拷贝复合内容的情况下才修正表格断行的数据，只有一个表格的情况不处理，在 table 的 clipboard 中有自行的逻辑\n  if (fragment.nodes.length !== 1) {\n    const tables = fragment.nodes.filter((child) => Block.isBlock(child) && child.type === 'table');\n    tables.forEach((table) => {\n      const node = fragment.getNextSibling(table.key);\n      const isParagraphBlock = Block.isBlock(node) && node.type === 'paragraph';\n      // 如果表格的下一行不是 paragraph 节点，则创建一个空节点\n      // 这个问题是由于表格如果下行没有一个断行的话，则在文章末尾无法追加新内容，切两个表格之间同理也无法追加内容\n      if (!isParagraphBlock) {\n        const path = fragment.getPath(table.key);\n        const emptyParagraph = Block.create({\n          type: 'paragraph',\n          nodes: [Text.create('')],\n        });\n        normalizedFragment = fragment.insertNode(Path.increment(path!), emptyParagraph);\n      }\n    });\n  }\n  return normalizedFragment;\n}\n\n/**\n * normalize 打平段落嵌套段落的数据结构\n * @param fragment\n */\n\nfunction flatInvalidBlock(fragment: Document): Document {\n  const restructNodes = (nodes) => flatten(nodes.map(restructure));\n  const restructure = (node) => {\n    if (node.nodes) {\n      if (Paragraph.isParagraph(node)) {\n        const isParagraphNested = node.nodes.some(n => Paragraph.isParagraph(n));\n        if (isParagraphNested) {\n          return restructNodes(node.nodes);\n        }\n      }\n      return [node.set('nodes', restructNodes(node.nodes))];\n    }\n    return [node];\n  };\n  const [result] = restructure(fragment);\n  return result as Document;\n}\n\nexport function normalizeFragment(fragment: Document): Document {\n  // 缓存的 listId, <旧 id, 新 id>\n  const listIdMap = new Map<string, string>();\n  let normalizedFragment: Document = fragment.mapDescendants((node) => {\n    // normalize 表格\n    if (Block.isBlock(node) && node.type === 'table') {\n      return normalizeTable(node);\n    }\n    // normalize 列表\n    if (Block.isBlock(node) && node.type === 'paragraph' && node.data.list) {\n      // 待 list 改造\n      //const { listId } = (node.data.list as ListPlugin.ListProperties) || {};\n      const { listId } = node.data.list || {};\n      let newListId = '';\n      // 注意次数 listId 也可能为 undefined，我们在这里认为 listId 为 undefined 的列表项均为一组\n      if (listIdMap.has(listId)) {\n        newListId = listIdMap.get(listId)!;\n      } else if (!listId) {\n        newListId = getRandomId();\n        listIdMap.set(listId, newListId);\n      } else {\n        newListId = listId;\n      }\n      return node.set('data', {\n        ...node.data,\n        list: {\n          ...node.data.list,\n          listId: newListId,\n        },\n      });\n    }\n    return node;\n  });\n\n  // 处理日志公告中的不合法数据结构\n  // console.log('before flat', JSON.stringify(normalizedFragment));\n  normalizedFragment = flatInvalidBlock(normalizedFragment);\n  // console.log(JSON.stringify(normalizedFragment));\n  // 处理末尾断行\n  normalizedFragment = normalizeEndLine(normalizedFragment);\n  return normalizedFragment;\n}\n"],"file":"normalize.js"}