{"version":3,"sources":["../../../src/utils/filter.ts"],"names":["Block","Inline","filterFragment","fragment","rules","block","inline","pruneMap","Map","forEachDescendant","node","isBlock","includes","excludes","test","type","set","key","isInline","result","forEach","_","path","getPath","removeNode"],"mappings":"AAAA;AACA,SAAmBA,KAAnB,EAA0BC,MAA1B,QAAwC,oBAAxC;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAA4CC,KAA5C,EAA8E;AAAA,MAC3EC,KAD2E,GACzDD,KADyD,CAC3EC,KAD2E;AAAA,MACpEC,MADoE,GACzDF,KADyD,CACpEE,MADoE;AAEnF,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AACAL,EAAAA,QAAQ,CAACM,iBAAT,CAA2B,UAACC,IAAD,EAAU;AACnC;AACA,QAAIV,KAAK,CAACW,OAAN,CAAcD,IAAd,KAAuBL,KAA3B,EAAkC;AAAA,UACxBO,QADwB,GACDP,KADC,CACxBO,QADwB;AAAA,UACdC,QADc,GACDR,KADC,CACdQ,QADc;;AAEhC,UAAID,QAAQ,IAAI,CAACA,QAAQ,CAACE,IAAT,CAAcJ,IAAI,CAACK,IAAnB,CAAjB,EAA2C;AACzCR,QAAAA,QAAQ,CAACS,GAAT,CAAaN,IAAI,CAACO,GAAlB,EAAuB,IAAvB;AACD;;AACD,UAAIJ,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcJ,IAAI,CAACK,IAAnB,CAAhB,EAA0C;AACxCR,QAAAA,QAAQ,CAACS,GAAT,CAAaN,IAAI,CAACO,GAAlB,EAAuB,IAAvB;AACD;AACF,KAVkC,CAWnC;;;AACA,QAAIhB,MAAM,CAACiB,QAAP,CAAgBR,IAAhB,KAAyBJ,MAA7B,EAAqC;AAAA,UAC3BM,SAD2B,GACJN,MADI,CAC3BM,QAD2B;AAAA,UACjBC,SADiB,GACJP,MADI,CACjBO,QADiB;;AAEnC,UAAID,SAAQ,IAAI,CAACA,SAAQ,CAACE,IAAT,CAAcJ,IAAI,CAACK,IAAnB,CAAjB,EAA2C;AACzCR,QAAAA,QAAQ,CAACS,GAAT,CAAaN,IAAI,CAACO,GAAlB,EAAuB,IAAvB;AACD;;AACD,UAAIJ,SAAQ,IAAIA,SAAQ,CAACC,IAAT,CAAcJ,IAAI,CAACK,IAAnB,CAAhB,EAA0C;AACxCR,QAAAA,QAAQ,CAACS,GAAT,CAAaN,IAAI,CAACO,GAAlB,EAAuB,IAAvB;AACD;AACF;AACF,GArBD;AAsBA,MAAIE,MAAM,GAAGhB,QAAb;AACAI,EAAAA,QAAQ,CAACa,OAAT,CAAiB,UAACC,CAAD,EAAIJ,GAAJ,EAAY;AAC3B,QAAMK,IAAI,GAAGH,MAAM,CAACI,OAAP,CAAeN,GAAf,CAAb;;AACA,QAAIK,IAAJ,EAAU;AACRH,MAAAA,MAAM,GAAGA,MAAM,CAACK,UAAP,CAAkBF,IAAlB,CAAT;AACD;AACF,GALD;AAMA,SAAOH,MAAP;AACD","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { Document, Block, Inline } from '@ali/4ever-cangjie';\nimport { ClipboardFilter } from './types';\n\n/**\n * 过滤 fragment 内容\n * @param fragment\n * @param rules\n */\nexport function filterFragment(fragment: Document, rules: ClipboardFilter): Document {\n  const { block, inline } = rules;\n  const pruneMap = new Map<string, boolean>();\n  fragment.forEachDescendant((node) => {\n    // 过滤 block 节点\n    if (Block.isBlock(node) && block) {\n      const { includes, excludes } = block;\n      if (includes && !includes.test(node.type)) {\n        pruneMap.set(node.key, true);\n      }\n      if (excludes && excludes.test(node.type)) {\n        pruneMap.set(node.key, true);\n      }\n    }\n    // 过滤 inline 节点\n    if (Inline.isInline(node) && inline) {\n      const { includes, excludes } = inline;\n      if (includes && !includes.test(node.type)) {\n        pruneMap.set(node.key, true);\n      }\n      if (excludes && excludes.test(node.type)) {\n        pruneMap.set(node.key, true);\n      }\n    }\n  });\n  let result = fragment;\n  pruneMap.forEach((_, key) => {\n    const path = result.getPath(key);\n    if (path) {\n      result = result.removeNode(path);\n    }\n  });\n  return result;\n}\n"],"file":"filter.js"}