function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { DATA_CLIPBORAD_CANGJIE } from '@ali/4ever-cangjie';
import { mimeTypes as MIME } from '@ali/4ever-utils'; // eslint-disable-next-line @typescript-eslint/no-empty-interface

export function hasTextHtml(data) {
  return data.types.includes(MIME.TEXT_HTML);
}
export function hasImage(data) {
  // office 会注入一个 image 的数据
  if (isMicrosoftOffice(data)) {
    return false;
  } // files 不存在


  if (!data.types.includes('Files')) {
    return false;
  }

  for (var _iterator = _createForOfIteratorHelperLoose(data.items), _step; !(_step = _iterator()).done;) {
    var item = _step.value;

    if (item.type.startsWith('image/')) {
      return true;
    }
  }

  return false;
}
export function getSizeofClipboardData(data, format) {
  var content = '';

  if (format) {
    content = data.getData(format);
  } else {
    content = data.getData(MIME.TEXT_HTML) || data.getData(MIME.APPLICATION_CANGJIE_FRAGMENT) || data.getData(MIME.APPLICATION_SLATE_FRAGMENT) || data.getData(MIME.APPLICATION_DING_SHEET) || data.getData(MIME.APPLICATION_GOOGLE_DOCS_CLIP) || data.getData(MIME.TEXT_PLAIN);
  }

  var blob = new Blob([content]);
  return blob.size;
}
export function isDingDocs(data) {
  // 仓颉编辑器
  if (data.types.includes(MIME.APPLICATION_CANGJIE_FRAGMENT)) return true; // Slate 编辑器

  if (data.types.includes(MIME.APPLICATION_SLATE_FRAGMENT)) return true; // 仓颉编辑器，有挂载 ASL 的 HTML

  if (data.types.includes(MIME.TEXT_HTML)) {
    var html = data.getData(MIME.TEXT_HTML);
    var domparser = new DOMParser();
    var root = domparser.parseFromString(html, 'text/html');
    var clipboardDataNode = root.querySelector("[" + DATA_CLIPBORAD_CANGJIE + "]");

    if (clipboardDataNode && root.body.firstElementChild === clipboardDataNode) {
      return true;
    }
  }

  return false;
}
export function isDingSheet(data) {
  return data.types.includes(MIME.APPLICATION_DING_SHEET);
}
export function isMicrosoftOffice(data) {
  return isMicrosoftWordOrExcel(data) || isMicrosoftPowerPoint(data);
}
export function isMicrosoftWordOrExcel(data) {
  var html = data.getData(MIME.TEXT_HTML);
  return Boolean(html == null ? void 0 : html.includes('xmlns:o="urn:schemas-microsoft-com:office:office"'));
}
export function isMicrosoftWord(data) {
  var html = data.getData(MIME.TEXT_HTML);
  return Boolean(html == null ? void 0 : html.includes('xmlns:w="urn:schemas-microsoft-com:office:word"'));
}
export function isMicrosoftExcel(data) {
  var html = data.getData(MIME.TEXT_HTML);
  return Boolean(html == null ? void 0 : html.includes('xmlns:x="urn:schemas-microsoft-com:office:excel"'));
}
export function isMicrosoftPowerPoint(data) {
  var html = data.getData(MIME.TEXT_HTML);
  return Boolean(html == null ? void 0 : html.includes('<meta name=ProgId content=PowerPoint.Slide>'));
}
export function isGoogleDocs(data) {
  return data.types.includes(MIME.APPLICATION_GOOGLE_DOCS_CLIP);
}
export function isGoogleSheet(data) {
  var html = data.getData(MIME.TEXT_HTML);
  return Boolean(html == null ? void 0 : html.includes('<google-sheets-html-origin>'));
}
export function isShimoDocs(data) {
  var html = data.getData(MIME.TEXT_HTML);
  return Boolean(html == null ? void 0 : html.includes('data-shimo-docs'));
}
export function isYuqueDocs(data) {
  var html = data.getData(MIME.TEXT_HTML);
  return Boolean(html == null ? void 0 : html.includes('<meta name="source" content="lake"/>'));
}
export function isVsCode(data) {
  return data.types.includes(MIME.APPLICATION_VSCODE);
}
//# sourceMappingURL=tester.js.map