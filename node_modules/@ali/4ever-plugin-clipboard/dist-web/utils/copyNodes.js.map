{"version":3,"sources":["../../../src/utils/copyNodes.ts"],"names":["Block","Value","Document","transferUtils","constants","ClipboardManager","getHtmlFromValue","canCopyOrCut","MIME_TYPES","normalizeNode","node","isBlock","create","type","nodes","copyNodes","maybeNodes","serializer","cb","Array","isArray","fragment","map","clip","Promise","reject","value","document","result","FRAGMENT","encodeFragment","HTML","TEXT","valueToText","write"],"mappings":"AAAA,SACEA,KADF,EAGEC,KAHF,EAIEC,QAJF,EAMEC,aANF,EAOEC,SAPF,QAQO,oBARP;AASA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,gBAAP;AACA,OAAOC,YAAP;IAEQC,U,GAAeJ,S,CAAfI,U;;AAER,SAASC,aAAT,CAAuBC,IAAvB,EAA0C;AACxC,MAAI,CAACA,IAAD,IAAS,CAACV,KAAK,CAACW,OAAN,CAAcD,IAAd,CAAd,EAAmC;AACjC,WAAOV,KAAK,CAACY,MAAN,CAAa;AAClBC,MAAAA,IAAI,EAAE,WADY;AAElBC,MAAAA,KAAK,EAAE,CAACJ,IAAD;AAFW,KAAb,CAAP;AAID;;AACD,SAAOA,IAAP;AACD;;AAED,eAAe,SAASK,SAAT,CACbC,UADa,EAEbC,UAFa,EAGbC,EAHa,EAIb;AAAA;;AAAA,MAHAF,UAGA;AAHAA,IAAAA,UAGA,GAH4B,EAG5B;AAAA;;AACA,MAAMF,KAAK,GAAGK,KAAK,CAACC,OAAN,CAAcJ,UAAd,IAA4BA,UAA5B,GAAyC,CAACA,UAAD,CAAvD,CADA,CAEA;;AACA,MAAMK,QAAQ,GAAGnB,QAAQ,CAACU,MAAT,CAAgB;AAAEE,IAAAA,KAAK,EAAEA,KAAK,CAACQ,GAAN,CAAUb,aAAV;AAAT,GAAhB,CAAjB;AACA,MAAMc,IAAI,GAAG,IAAIlB,gBAAJ,EAAb;;AACA,MAAI,CAACE,YAAY,CAACc,QAAD,CAAjB,EAA6B;AAC3B,WAAOG,OAAO,CAACC,MAAR,EAAP;AACD;;AACD,MAAMC,KAAK,GAAGzB,KAAK,CAACW,MAAN,CAAa;AAAEe,IAAAA,QAAQ,EAAEN;AAAZ,GAAb,CAAd;AACA,MAAIO,MAAM,0BACPpB,UAAU,CAACqB,QADJ,IACe1B,aAAa,CAAC2B,cAAd,CAA6BT,QAA7B,CADf,UAEPb,UAAU,CAACuB,IAFJ,IAEWzB,gBAAgB,CAACW,UAAD,EAAaS,KAAb,CAF3B,UAGPlB,UAAU,CAACwB,IAHJ,IAGWf,UAAU,CAACgB,WAAX,CAAuBP,KAAvB,CAHX,UAAV;;AAKA,MAAIR,EAAJ,EAAQ;AACNU,IAAAA,MAAM,GAAGV,EAAE,CAACU,MAAD,CAAX;AACD;;AACD,SAAOL,IAAP,oBAAOA,IAAI,CAAEW,KAAN,CAAYN,MAAZ,CAAP;AACD","sourcesContent":["import {\n  Block,\n  BlockChild,\n  Value,\n  Document,\n  Node,\n  transferUtils,\n  constants,\n} from '@ali/4ever-cangjie';\nimport ClipboardManager from '@ali/clipboard-manager';\nimport getHtmlFromValue from './getHtmlFromValue';\nimport canCopyOrCut from './canCopyOrCut';\n\nconst { MIME_TYPES } = constants;\n\nfunction normalizeNode(node: Node): Block {\n  if (!node || !Block.isBlock(node)) {\n    return Block.create({\n      type: 'paragraph',\n      nodes: [node as BlockChild],\n    });\n  }\n  return node;\n}\n\nexport default function copyNodes(\n  maybeNodes: Node[] | Node = [],\n  serializer,\n  cb?: Function,\n) {\n  const nodes = Array.isArray(maybeNodes) ? maybeNodes : [maybeNodes];\n  // @ts-ignore\n  const fragment = Document.create({ nodes: nodes.map(normalizeNode) });\n  const clip = new ClipboardManager();\n  if (!canCopyOrCut(fragment)) {\n    return Promise.reject();\n  }\n  const value = Value.create({ document: fragment });\n  let result = {\n    [MIME_TYPES.FRAGMENT]: transferUtils.encodeFragment(fragment),\n    [MIME_TYPES.HTML]: getHtmlFromValue(serializer, value),\n    [MIME_TYPES.TEXT]: serializer.valueToText(value),\n  };\n  if (cb) {\n    result = cb(result);\n  }\n  return clip?.write(result);\n}\n"],"file":"copyNodes.js"}