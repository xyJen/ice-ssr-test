{"version":3,"sources":["../../../src/utils/ClipboardPad.ts"],"names":["transferUtils","Value","flatten","ClipboardData","isEqual","toHash","mimeTypes","getHtmlFromValue","clipboardPadMap","Map","currentClipboardData","ClipboardPad","getClipboardPad","conf","key","config","serializer","clipboardPadCache","get","clipboardPad","createClipboardPad","set","models","getClipboardData","event","args","clipboardData","getClipboardDataCache","copyFragment","fragment","preventDefault","value","create","document","text","valueToText","html","encoded","encodeFragment","setData","TEXT_PLAIN","TEXT_HTML","APPLICATION_CANGJIE_FRAGMENT","initPluginModels","controller","getPluginModels","pidStr","keys","model","infoMap","handlers","flatModels","forEach","info","infoKey","klass","type","infoData","data","oldValue","Array","isArray","concat","getCachedClipboardPad"],"mappings":"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","sourcesContent":["import { CangjieClipboardEvent, Controller, Document, transferUtils, Value } from '@ali/4ever-cangjie';\nimport { flatten } from 'lodash-es';\nimport { ClipboardPluginConfig, ModelsMap } from './types';\nimport ClipboardData from './ClipboardData';\nimport { isEqual } from 'lodash-es';\nimport { toHash, mimeTypes }  from '@ali/4ever-utils';\nimport getHtmlFromValue from './getHtmlFromValue';\n\n/**\n * 剪切板实例缓存缓存\n */\nconst clipboardPadMap = new Map<string, ClipboardPad>();\n\n/**\n * 当前的剪切事件\n * @description 我们假设同一次剪切板时间只能被一个编辑器实例消费，所以目前可能存在的情况是 ClipboardPad 是多实例，但是\n * 读取到的 ClipboardData 是单实例的。\n * TODO: 后续需要考虑在 Plugin 层如何设计一个多实例的配置\n */\nlet currentClipboardData: ClipboardData | null = null;\n\nclass ClipboardPad {\n  static getCachedClipboardPad = (key = 'default') => {\n    return clipboardPadMap.get(key) as ClipboardPad;\n  }\n  /**\n   * 获得一个剪切板，使用配置数据作为 union 单位，针对不同的 config 实例返回不同的剪切板\n   * @param config 编辑器的配置\n   */\n  static getClipboardPad(conf: ClipboardPluginConfig, key = 'default') {\n\n    // 默认使用 mo 的正反序列化\n    const config = {\n      ...conf,\n      serializer: conf.serializer,\n    };\n\n    const clipboardPadCache = clipboardPadMap.get(key);\n    if (clipboardPadCache) {\n      if (isEqual(clipboardPadCache.config, config)) {\n        return clipboardPadCache;\n      }\n    }\n    const clipboardPad = ClipboardPad.createClipboardPad(config);\n    if (key) {\n      clipboardPadMap.set(key, clipboardPad);\n    }\n    return clipboardPad;\n  }\n\n  static createClipboardPad(config: ClipboardPluginConfig) {\n    return new ClipboardPad(config);\n  }\n\n  /**\n   * 剪切板配置\n   */\n  config: ClipboardPluginConfig;\n\n  models?: ModelsMap;\n\n  private constructor(config: ClipboardPluginConfig) {\n    this.config = config;\n  }\n\n  /**\n   * 读取剪切板数据，相同的 event 会读取到同一个实例\n   * @param event\n   */\n  getClipboardData(event: ClipboardEvent | CangjieClipboardEvent) {\n    const args = [\n      event.clipboardData as DataTransfer,\n      this.config,\n      this.models,\n    ];\n    // @ts-ignore\n    if (currentClipboardData?.isEqual(...args)) {\n      return currentClipboardData;\n    }\n    // @ts-ignore\n    currentClipboardData = new ClipboardData(...args);\n    return currentClipboardData;\n  }\n\n  /**\n   * 读取剪切板缓存数据，切换不同粘贴模式下使用\n   * @param event\n   */\n  getClipboardDataCache() {\n    return currentClipboardData;\n  }\n\n  /**\n   * 拷贝一个 fragment\n   * @param event 拷贝事件\n   * @param fragment\n   */\n  copyFragment(event: ClipboardEvent, fragment: Document) {\n    const { clipboardData } = event;\n    if (!clipboardData) {\n      return;\n    }\n    event.preventDefault();\n    const { serializer } = this.config;\n    const value = Value.create({\n      document: fragment,\n    });\n    const text = serializer.valueToText(value);\n    const html = getHtmlFromValue(serializer, value);\n\n    const encoded = transferUtils.encodeFragment(fragment);\n\n    clipboardData.setData(mimeTypes.TEXT_PLAIN, text);\n    clipboardData.setData(mimeTypes.TEXT_HTML, html);\n    clipboardData.setData(mimeTypes.APPLICATION_CANGJIE_FRAGMENT, encoded);\n  }\n\n  initPluginModels(controller: Controller) {\n    const models = this.getPluginModels(controller);\n    let pidStr = '';\n    for (const model of models.keys()) {\n      pidStr += model;\n    }\n    models.set('controllerPid', toHash(pidStr));\n    this.models = models;\n  }\n\n  /**\n   * 获取所有插件内容的models map集合\n   * @param\n   */\n  getPluginModels(controller: Controller): ModelsMap {\n    const infoMap = new Map();\n    // @ts-ignore\n    const { models } = controller.handlers;\n    if (models) {\n      const flatModels = flatten(models);\n      flatModels.forEach((info) => {\n        if (info) {\n          // @ts-ignore\n          const infoKey = `${info.klass}_${info.type}`;\n          // @ts-ignore\n          const infoData = info.data || {};\n          const oldValue = infoMap.get(infoKey);\n          if (oldValue) {\n            if (Array.isArray(oldValue)) {\n              infoMap.set(infoKey, oldValue.concat(infoData));\n            } else {\n              infoMap.set(infoKey, [oldValue, infoData]);\n            }\n          } else {\n            // @ts-ignore\n            infoMap.set(infoKey, [infoData]);\n          }\n        }\n      });\n    }\n    return infoMap;\n  }\n}\n\nexport default ClipboardPad;\n"],"file":"ClipboardPad.js"}