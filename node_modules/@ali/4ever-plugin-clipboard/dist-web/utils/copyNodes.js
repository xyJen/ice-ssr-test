import { Block, Value, Document, transferUtils, constants } from '@ali/4ever-cangjie';
import ClipboardManager from '@ali/clipboard-manager';
import getHtmlFromValue from "./getHtmlFromValue";
import canCopyOrCut from "./canCopyOrCut";
var MIME_TYPES = constants.MIME_TYPES;

function normalizeNode(node) {
  if (!node || !Block.isBlock(node)) {
    return Block.create({
      type: 'paragraph',
      nodes: [node]
    });
  }

  return node;
}

export default function copyNodes(maybeNodes, serializer, cb) {
  var _result;

  if (maybeNodes === void 0) {
    maybeNodes = [];
  }

  var nodes = Array.isArray(maybeNodes) ? maybeNodes : [maybeNodes]; // @ts-ignore

  var fragment = Document.create({
    nodes: nodes.map(normalizeNode)
  });
  var clip = new ClipboardManager();

  if (!canCopyOrCut(fragment)) {
    return Promise.reject();
  }

  var value = Value.create({
    document: fragment
  });
  var result = (_result = {}, _result[MIME_TYPES.FRAGMENT] = transferUtils.encodeFragment(fragment), _result[MIME_TYPES.HTML] = getHtmlFromValue(serializer, value), _result[MIME_TYPES.TEXT] = serializer.valueToText(value), _result);

  if (cb) {
    result = cb(result);
  }

  return clip == null ? void 0 : clip.write(result);
}
//# sourceMappingURL=copyNodes.js.map