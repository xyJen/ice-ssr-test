{"version":3,"sources":["../../../src/utils/ClipboardData.ts"],"names":["CangjieDataTransfer","transferUtils","Value","constants","logger","escape","mimeTypes","MIME","tester","ClipboardErrorEnum","MARKDOWN_GRAMMER_REGEXP","filterAndNormalize","MIME_TYPES","cacheMimeTypes","APPLICATION_CANGJIE_FRAGMENT","TEXT_HTML","TEXT_PLAIN","ClipboardData","nativeData","dropEffect","effectAllowed","files","items","types","includes","length","test","getData","trimStart","APPLICATION_VSCODE","data","JSON","parse","mode","config","models","serializer","rules","schema","cangjieData","create","fragment","parsedFragment","cacheId","receiveType","onError","getCacheId","Object","values","type","setData","clearData","format","setDragImage","image","x","y","hasData","getFragment","currentCacheId","encoded","decodeFragment","getParseFragment","normalizeFragment","e","PASTE_FAILED","console","error","getTextFragment","text","textToValue","document","getMarkdownFragment","markdownToValue","getImages","exceptFileTypes","filter","isMicrosoftOffice","dataFiles","images","i","file","startsWith","push","getFirstReceiveType","APPLICATION_SLATE_FRAGMENT","isEqual","getTextHtml","html","htmlToValue","replace","textValue","newFragment","isValidFragment","valueToJsonML","warn"],"mappings":"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","sourcesContent":["import { CangjieDataTransfer, Document, Schema, transferUtils, Value, constants } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport { escape } from 'lodash-es';\nimport { mimeTypes as MIME } from '@ali/4ever-utils';\nimport * as tester from './tester';\nimport { ClipboardErrorEnum, MARKDOWN_GRAMMER_REGEXP } from './constants';\nimport filterAndNormalize from './filterAndNormalize';\nimport { ClipboardPluginConfig, ClipboardFilter, ModelsMap, ReceiveType, Serializer } from './types';\n\nconst { MIME_TYPES } = constants;\nconst cacheMimeTypes = [MIME.APPLICATION_CANGJIE_FRAGMENT, MIME.TEXT_HTML, MIME.TEXT_PLAIN];\n\n/**\n * 自定义剪切板数据，封装了 fragment 等一些编辑器数据\n */\nclass ClipboardData implements DataTransfer {\n  readonly nativeData: DataTransfer;\n\n  private readonly serializer: Serializer;\n\n  private readonly rules?: ClipboardFilter;\n\n  private readonly schema: Schema;\n\n  private readonly models?: ModelsMap;\n\n  get dropEffect() {\n    return this.nativeData.dropEffect;\n  }\n\n  get effectAllowed() {\n    return this.nativeData.effectAllowed;\n  }\n\n  get files() {\n    return this.nativeData.files;\n  }\n\n  get items() {\n    return this.nativeData.items;\n  }\n\n  get types() {\n    return this.nativeData.types;\n  }\n\n  /**\n   * 1. 仓颉内容不作 markdown 语法校验\n   * 2. 如果仅有 text/plain 内容 或 text 内容符合 markdown 语法，则可能为 Markdown 文本\n   * 3. 属于特殊情况，则可能为 Markdown 文本：\n   *   a. VSCode：MimeType === vscode-editor-data && mode === 'markdown'\n   */\n  get maybeMarkdown() {\n    if (this.types.includes(MIME.APPLICATION_CANGJIE_FRAGMENT)) {\n      return false;\n    }\n    if (\n      this.types.includes(MIME.TEXT_PLAIN) &&\n      (this.types.length === 1 ||\n        MARKDOWN_GRAMMER_REGEXP.test(\n          (this.getData(MIME.TEXT_PLAIN) || '')?.trimStart?.(),\n        ))\n    ) {\n      return true;\n    }\n    if (this.types.includes(MIME.APPLICATION_VSCODE)) {\n      const data = this.getData(MIME.APPLICATION_VSCODE);\n      try {\n        if (JSON.parse(data).mode === 'markdown') {\n          return true;\n        }\n      } catch {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  private readonly cangjieData = CangjieDataTransfer.create();\n\n  /**\n   * 剪切板中的 fragment\n   */\n  private fragment: Document | null = null;\n\n  /**\n   * 剪切板中解析出的 fragment\n   */\n  private parsedFragment: Document | null = null;\n\n  private cacheId = '';\n\n  /**\n   * 第一可接受类型\n   */\n  private receiveType?: ReceiveType;\n\n  private readonly onError?: Function;\n\n  constructor(nativeData: DataTransfer, config: ClipboardPluginConfig, models?: ModelsMap) {\n    this.nativeData = nativeData;\n    const {\n      serializer,\n      rules,\n      schema,\n      onError,\n    } = config;\n    this.serializer = serializer;\n    this.rules = rules;\n    this.schema = schema;\n    this.models = models;\n    this.onError = onError;\n\n    this.cacheId = this.getCacheId();\n    // 当传入的 nativeData 非仓颉类型时, 数据要 copy 一份，防止生命周期结束后被销毁\n    if (nativeData && !(nativeData instanceof CangjieDataTransfer)) {\n      for (const type of Object.values(MIME_TYPES)) {\n        this.cangjieData = this.cangjieData.setData(type, nativeData.getData(type));\n      }\n    }\n  }\n\n  clearData(format?: string | undefined): void {\n    this.nativeData.clearData(format);\n  }\n\n  getData(format: string): string {\n    return this.nativeData.getData(format) || this.cangjieData.getData(format);\n  }\n\n  setData(format: string, data: string): void {\n    this.nativeData.setData(format, data);\n  }\n\n  setDragImage(image: Element, x: number, y: number): void {\n    this.nativeData.setDragImage(image, x, y);\n  }\n\n  hasData(format: string) {\n    return this.types.includes(format);\n  }\n  \n  // event 支持 mutable 方式修改数据，需要通过 cacheId 校验 cache fragment 的有效性\n  getCacheId() {\n    for(const type of cacheMimeTypes) {\n      const data = this.nativeData.getData(type);\n      if (data) {\n        return data;\n      }\n    }\n    return '';\n  }\n\n  /**\n   * 读取剪切板中的 fragment\n   * @param parse 是否强制解析 html/text，默认为 true\n   */\n  getFragment(parse = true): Document | null {\n    // 如果有 fragment 缓存直接返回\n    const currentCacheId = this.getCacheId();\n\n    if (currentCacheId === this.cacheId) {\n      if (this.fragment) {\n        return this.fragment;\n      }\n      // 如果有解析后的 fragment 缓存直接返回\n      if (parse && this.parsedFragment) {\n        return this.parsedFragment;\n      }\n    }\n\n    let fragment: Document | null = null;\n    try {\n      const encoded = this.getData(MIME.APPLICATION_CANGJIE_FRAGMENT);\n      if (encoded) {\n        // 从仓颉编辑器拷贝\n        fragment = transferUtils.decodeFragment(encoded);\n      }\n\n      if (parse && !fragment) {\n        // 反序列化解析Html或Text\n        fragment = this.getParseFragment();\n      }\n\n      // 如果剪切板中有 fragment, 对复制源来自仓颉或其他的内容，统一收口做normalize处理\n      if (fragment) {\n        fragment = this.normalizeFragment(fragment);\n      }\n    } catch (e: any) {\n      if (this.onError) {\n        e.type = ClipboardErrorEnum.PASTE_FAILED;\n        this.onError(e);\n      }\n      console.error(e);\n      logger.error(e);\n    }\n    // 不解析返回 null\n    return fragment;\n  }\n\n  /**\n   * 读取剪切板中的 纯文本内容\n   */\n  getTextFragment(): Document | null {\n    const text = this.getData(MIME.TEXT_PLAIN) || '';\n    const { document } = this.serializer.textToValue(text);\n    return document;\n  }\n\n  /**\n   * 读取剪贴板中的纯文本内容，并返回以 Markdown 格式序列化的 Value\n   *\n   * @returns {Document}\n   */\n  async getMarkdownFragment(): Promise<Document> {\n    const text = this.getData(MIME.TEXT_PLAIN) || '';\n    const { document } = await this.serializer.markdownToValue(text);\n    return document;\n  }\n\n  /**\n   * 读取剪切板中的图片文件\n   */\n  getImages() {\n    const data = this.nativeData;\n    const { types } = data;\n    const exceptFileTypes = (types.includes('Files') && types.filter(type => type !== 'Files')) || [];\n    // ms word 拷贝的图文混合内容，mime type 会带上 file 类型，这里判断防止误处理。（wps 无该问题）\n    if ((tester.isMicrosoftOffice(data) && exceptFileTypes.length > 1)) {\n      return [];\n    }\n    // perf: file 较大，每次读取 data.files 耗费大量时间，使用临时变量缓存优化\n    const dataFiles = data.files;\n    if (!dataFiles) {\n      return [];\n    }\n\n    const images: File[] = [];\n    for (let i = 0, { length } = dataFiles; i < length; i++) {\n      const file = dataFiles[i];\n      // file 在一些特殊的情况是 undefined 🤷‍♀️\n      if (file && file.type.startsWith('image/')) {\n        images.push(file);\n      }\n    }\n    return images;\n  }\n\n  /**\n   * 获取第一个可接受的剪切板数据类型\n   */\n  getFirstReceiveType() {\n    if (this.receiveType) {\n      return this.receiveType;\n    }\n    if (this.types.includes('files') && !tester.isMicrosoftOffice(this.nativeData)) {\n      this.receiveType = 'files';\n    } else if (this.hasData(MIME.APPLICATION_CANGJIE_FRAGMENT)\n      || this.hasData(MIME.APPLICATION_SLATE_FRAGMENT)) {\n      this.receiveType = 'fragment';\n    } else if (this.hasData(MIME.TEXT_HTML)) {\n      this.receiveType = 'html';\n    } else if (this.hasData(MIME.TEXT_PLAIN)) {\n      this.receiveType = 'text';\n    } else {\n      this.receiveType = 'unknown';\n    }\n    return this.receiveType;\n  }\n\n  // 根据入参判断实例化对象是否相同\n  isEqual(\n    nativeData: DataTransfer,\n    config: ClipboardPluginConfig,\n    models?: ModelsMap,\n  ) {\n    const { serializer, rules, schema } = config;\n    return (\n      this.nativeData === nativeData &&\n      this.serializer === serializer &&\n      this.rules === rules &&\n      this.schema === schema &&\n      this.models === models\n    );\n  }\n\n  private getTextHtml() {\n    let html = '';\n    if (this.hasData(MIME.APPLICATION_VSCODE)) {\n      html = `<pre>${escape(this.getData(MIME.TEXT_PLAIN))}</pre><p></p>`;\n    } else {\n      html = this.getData(MIME.TEXT_HTML);\n    }\n    return html;\n  }\n\n  private getParseFragment(): Document | null {\n    if (this.parsedFragment) {\n      return this.parsedFragment;\n    }\n\n    let fragment: Document | null = null;\n\n    if (this.hasData(MIME.TEXT_HTML)) {\n      const html = this.getTextHtml();\n      if (html) {\n        const { document } = this.serializer.htmlToValue(html);\n        fragment = document;\n        return fragment;\n      }\n    }\n\n    if (this.hasData(MIME.TEXT_PLAIN)) {\n      let text = this.getData(MIME.TEXT_PLAIN);\n      if (text) {\n        /**\n         * 从 Excel 中复制表格，纯文本粘贴会附带 \\t,当 \\t 足够多时会造成渲染性能问题。\n         * https://notes.dingtalk.com/doc/E0Vzg7l3wnjKAzJe?orgId=16872003&dd_progress=false&showmenu=false\n         * */\n        text = text.replace(/\\t+/g, '    ');\n        const textValue = this.serializer.textToValue(text);\n        fragment = textValue.document;\n      }\n    }\n    return fragment;\n  }\n\n  normalizeFragment(fragment: Document): Document {\n    const newFragment = filterAndNormalize({\n      fragment,\n      models: this.models,\n      rules: this.rules,\n      schema: this.schema,\n    });\n    // 数据效验\n    if (this.isValidFragment(newFragment)) {\n      this.fragment = newFragment;\n      this.parsedFragment = newFragment;\n    }\n    return newFragment;\n  }\n\n  /**\n   * 拷贝过来的数据不一定完全可信，这里做一下数据效验\n   * @param fragment\n   */\n  private isValidFragment(fragment: Document) {\n    try {\n      this.serializer.valueToJsonML(Value.create({ document: fragment }));\n      return true;\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(error);\n      return false;\n    }\n  }\n}\n\nexport default ClipboardData;\n"],"file":"ClipboardData.js"}