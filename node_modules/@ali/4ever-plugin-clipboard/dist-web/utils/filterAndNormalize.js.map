{"version":3,"sources":["../../../src/utils/filterAndNormalize.ts"],"names":["filterFragment","normalizeFragment","restructFragment","Controller","Value","filterAndNormalize","props","fragment","models","rules","schema","controllerPid","get","result","data","copyFrom","value","create","document","controller","plugins"],"mappings":"AAAA,SAASA,cAAT;AACA,SAASC,iBAAT;AACA,SAASC,gBAAT;AAEA,SAASC,UAAT,EAAuCC,KAAvC,QAAoD,oBAApD;AAUA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAA6D;AAAA,MAClEC,QADkE,GAC9BD,KAD8B,CAClEC,QADkE;AAAA,MACxDC,MADwD,GAC9BF,KAD8B,CACxDE,MADwD;AAAA,MAChDC,KADgD,GAC9BH,KAD8B,CAChDG,KADgD;AAAA,MACzCC,MADyC,GAC9BJ,KAD8B,CACzCI,MADyC;AAE1E,MAAMC,aAAa,GAAGH,MAAH,oBAAGA,MAAM,CAAEI,GAAR,CAAY,eAAZ,CAAtB;AAEA,MAAIC,MAAM,GAAGN,QAAb,CAJ0E,CAK1E;;AACA,MAAIE,KAAJ,EAAW;AACTI,IAAAA,MAAM,GAAGb,cAAc,CAACa,MAAD,EAASJ,KAAT,CAAvB;AACD,GARyE,CAU1E;;;AACA,MAAIE,aAAa,IAAIA,aAAa,MAAKJ,QAAL,oBAAKA,QAAQ,CAAEO,IAAV,CAAeC,QAApB,CAAlC,EAAgE;AAC9DF,IAAAA,MAAM,GAAGX,gBAAgB,CAACW,MAAD,EAASL,MAAT,CAAzB;AACD,GAbyE,CAe1E;;;AACAK,EAAAA,MAAM,GAAGZ,iBAAiB,CAACY,MAAD,CAA1B,CAhB0E,CAkB1E;;AACA,MAAMG,KAAK,GAAGZ,KAAK,CAACa,MAAN,CAAa;AAAEC,IAAAA,QAAQ,EAAEL;AAAZ,GAAb,CAAd;AACA,MAAMM,UAAU,GAAGhB,UAAU,CAACc,MAAX,CAAkB;AACnCD,IAAAA,KAAK,EAALA,KADmC;AAEnCI,IAAAA,OAAO,EAAE,CAAC;AAAEV,MAAAA,MAAM,EAANA,MAAF;AAAUF,MAAAA,MAAM,EAAE;AAAlB,KAAD;AAF0B,GAAlB,CAAnB;AAIA,SAAOW,UAAU,CAACH,KAAX,CAAiBE,QAAxB;AACD","sourcesContent":["import { filterFragment } from './filter';\nimport { normalizeFragment } from './normalize';\nimport { restructFragment } from './restructFragment';\n\nimport { Controller, Document, Schema, Value } from '@ali/4ever-cangjie';\nimport { ClipboardFilter, ModelsMap } from './types';\n\ninterface IFilterAndNormalizeProps {\n  fragment: Document;\n  schema: Schema;\n  rules?: ClipboardFilter;\n  models?: ModelsMap;\n}\n\nexport default function filterAndNormalize(props: IFilterAndNormalizeProps) {\n  const { fragment, models, rules, schema } = props;\n  const controllerPid = models?.get('controllerPid');\n\n  let result = fragment;\n  // 业务层根据需要配置，粘贴要过滤的节点\n  if (rules) {\n    result = filterFragment(result, rules);\n  }\n\n  // 粘贴来自不同插件配置的编辑器时，处理framgment中不合法节点\n  if (controllerPid && controllerPid !== fragment?.data.copyFrom) {\n    result = restructFragment(result, models as ModelsMap);\n  }\n\n  // 使用Paste中的normalize对fragment进行处理\n  result = normalizeFragment(result);\n\n  // 使用 Mo中的strictSchema 对要粘贴的内容进行normalize处理\n  const value = Value.create({ document: result });\n  const controller = Controller.create({\n    value,\n    plugins: [{ schema, models: [] }],\n  });\n  return controller.value.document;\n}\n"],"file":"filterAndNormalize.js"}