import { Text } from '@ali/4ever-cangjie';
import { getPointAndBlockOnSelection } from '@ali/4ever-utils';
export var getExtendBlock = function getExtendBlock(doc, block) {
  if (!block) {
    return null;
  } else if (block.type) {
    return block;
  } else {
    return getExtendBlock(doc, doc.getParent(block.key));
  }
};
/**
 * @description 继承粘贴时光标所在位置 startBlock的style及type
 * @param {Document} fragment - 粘贴要插入的内存模型对象
 * */

export default function getMatchFragment(controller, fragment) {
  var document = controller.value.document;
  var pointAndBlock = getPointAndBlockOnSelection(controller);
  var startBlock = pointAndBlock.startBlock,
      startPoint = pointAndBlock.startPoint;
  var extendBlock = getExtendBlock(controller.value.document, startBlock);
  if (!startBlock) return fragment;
  var startBlockPath = document.getPath(startBlock.key);
  var pasteFromStart = startBlockPath && startBlockPath[1] === 0 && startPoint.isAtStartOfNode(startBlock);
  var marks = startBlock == null ? void 0 : startBlock.marks;

  if (marks) {
    // @ts-ignore
    var newFragment = fragment.mapDescendants(function (child) {
      if (Text.isText(child)) {
        var childMarks = child.marks;
        childMarks.forEach(function (mark) {
          child = child.removeMark(0, child.text.length, mark);
        });
        return pasteFromStart ? child : child.addMarks(0, child.text.length, marks);
      } else if (extendBlock) {
        var _child;

        if (((_child = child) == null ? void 0 : _child.type) === 'paragraph') {
          return child.set('type', extendBlock.type).set('data', extendBlock.data);
        }

        return child;
      }

      return undefined;
    });
    return newFragment;
  } else {
    return fragment;
  }
}
//# sourceMappingURL=getMatchFragment.js.map