import { Commands, Text } from '@ali/4ever-cangjie';
import { omit } from 'lodash-es';
import { getPointAndBlockOnSelection } from '@ali/4ever-utils';
import { getExtendBlock } from "./getMatchFragment"; // 不需要继承的样式

var EXCLUDE_STYLE = ['jc']; // 列表内容切换为纯文本时，第一项序号不会被删除, 列表转为普通段落

var dealFirsIsList = function dealFirsIsList(controller) {
  var listItems = controller.query("getCurrentItem");

  if (listItems != null && listItems.length) {
    var fistItem = listItems[0];
    fistItem && controller.command(Commands.setNodeByKey, fistItem.key, {
      type: 'paragraph',
      data: omit(fistItem.data, 'list')
    });
  }
};
/**
 * @description 继承粘贴时光标所在位置 startBlock的style
 * @param {Document} fragment - 粘贴要插入的内存模型对象
 * */


export default function getMarksFragment(controller, fragment) {
  var _getPointAndBlockOnSe = getPointAndBlockOnSelection(controller),
      startBlock = _getPointAndBlockOnSe.startBlock,
      startPoint = _getPointAndBlockOnSe.startPoint;

  var extendBlock = getExtendBlock(controller.value.document, startBlock);
  if (!startBlock) return fragment;
  var pasteFromStart = startPoint.isAtStartOfNode(startBlock);
  var isFirstParagraph = true;

  if (pasteFromStart) {
    dealFirsIsList(controller);
  }

  if (startBlock.marks) {
    // @ts-ignore
    var newFragment = fragment.mapDescendants(function (child) {
      if (Text.isText(child)) {
        var childMarks = child.marks;
        childMarks.forEach(function (mark) {
          child = child.removeMark(0, child.text.length, mark);
        }); // 如果粘贴位置是在段落开始位置，没有样式继承项时，只做样式清除

        return pasteFromStart ? child : child.addMarks(0, child.text.length, startBlock.marks);
      } else if (extendBlock) {
        var _child;

        if (((_child = child) == null ? void 0 : _child.type) === 'paragraph' && isFirstParagraph) {
          isFirstParagraph = false;
          return child.set('type', extendBlock.type).set('data', omit(extendBlock.data, EXCLUDE_STYLE));
        }

        return child;
      } else {
        return child;
      }
    });
    return newFragment;
  } else {
    return fragment;
  }
}
//# sourceMappingURL=getMarksFragment.js.map