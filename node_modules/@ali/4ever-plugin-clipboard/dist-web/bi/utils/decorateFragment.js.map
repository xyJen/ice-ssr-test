{"version":3,"sources":["../../../../src/bi/utils/decorateFragment.ts"],"names":["Text","isEqual","FONT_TYPE","SZ_TYPE","getMarksAtAnchor","controller","value","document","selection","anchor","anchorNode","getNode","key","isText","isTextPoint","position","anchorLeaf","leaves","find","leaf","text","length","offset","marks","isSameFontSize","fragment","defaultSz","Firstflag","isDifferent","someDescendant","node","szMark","getMarks","mark","type","decorateFragment","filter","includes","isSameSz","newFragment","mapDescendants","child","forEach","removeMark","addMarks"],"mappings":"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","sourcesContent":["import { Controller, Document, Text } from '@ali/4ever-cangjie';\nimport { isEqual } from 'lodash-es';\n\n// marks type\nconst FONT_TYPE = 'fonts';\nconst SZ_TYPE = 'sz';\n\n/**\n * @description 获取光标所在 leaf 节点的 marks\n * @param {controller}\n * */\nexport function getMarksAtAnchor(controller: Controller) {\n  const { document, selection } = controller.value;\n  const { anchor } = selection;\n  const anchorNode = document.getNode(anchor.key);\n  if (Text.isText(anchorNode) && anchor.isTextPoint()) {\n    let position = 0;\n    const anchorLeaf = anchorNode.leaves.find((leaf) => {\n      position += leaf.text.length;\n      return position >= anchor.offset;\n    });\n    return [...(anchorLeaf?.marks || [])];\n  }\n  return [];\n}\n\nfunction isSameFontSize(fragment: Document) {\n  let defaultSz;\n  let Firstflag = false;\n\n  const isDifferent = fragment.someDescendant((node) => {\n    if (Text.isText(node)) {\n      const szMark = node.getMarks().find((mark) => mark.type === SZ_TYPE);\n      if (!Firstflag) {\n        defaultSz = szMark;\n        Firstflag = true;\n      }\n      if (!isEqual(defaultSz, szMark)) {\n        return true;\n      }\n    }\n    return false;\n  });\n  return !isDifferent;\n}\n\n/**\n * @description\n *  非仓颉内容修饰加工\n *  1. 移除字体类型;\n *  2. 粘贴内容字号相同时，自动与目标字体大小合并\n * @param {Controller} controller\n * @param {Document} fragment\n */\nexport function decorateFragment(controller: Controller, fragment: Document) {\n  const marks = getMarksAtAnchor(controller).filter((mark) =>\n    [FONT_TYPE, SZ_TYPE].includes(mark.type));\n  const szMark = marks.filter((mark) => mark.type === SZ_TYPE);\n\n  const isSameSz = isSameFontSize(fragment);\n  const newFragment = fragment.mapDescendants((node) => {\n    let child = node;\n    if (!Text.isText(child)) {\n      return child;\n    }\n    child.marks.forEach((mark) => {\n      if (mark.type === FONT_TYPE || (mark.type === SZ_TYPE && isSameSz)) {\n        child = (child as Text).removeMark(0, child.text.length, mark);\n      }\n    });\n    if (isSameSz) {\n      return child.addMarks(0, child.text.length, szMark);\n    }\n    return child;\n  });\n  return newFragment;\n}\n"],"file":"decorateFragment.js"}