import { ContextMenu, environment } from '@ali/4ever-cangjie';
import { CLIPBOARD_INSERT_FRAGMENT, CLIPBOARD_SET_DECORATIONS, CLIPBOARD_DEL_SELECTION, CLIPBOARD_HIDE_PASTEPANEL, CLIPBOARD_MATCH_MODE, CLIPBOARD_TEXT_MODE, CLIPBOARD_HIDE_CUSTOM_PASTEPANEL } from "../actions";
import { insertFragmentByClipboard } from "../commands/insertFragmentByClipboard";
import setDecorations from "../commands/setDecorations";
import deleteAtRange from "../commands/deleteAtRange";
import hidePastePanel from "../utils/hidePasteButton";
import getMatchFragment from "../utils/getMatchFragment";
import getMarksFragment from "../utils/getMarksFragment";
import hideCustomPasteButton from "../utils/hideCustomPasteButton";
import onCangjiePasteFail from "./onCangjiePasteFail";
import { ClipboardErrorEnum } from "../../utils/constants";
export default function createOnAction(config) {
  var _ref = config || {},
      onError = _ref.onError;

  return function onAction(action, controller, next) {
    var _action$payload = action.payload,
        payload = _action$payload === void 0 ? {} : _action$payload,
        type = action.type;

    if (type === CLIPBOARD_INSERT_FRAGMENT) {
      var fragment = payload.fragment;
      return insertFragmentByClipboard(controller, fragment);
    }

    if (type === CLIPBOARD_SET_DECORATIONS) {
      var decoration = payload.decoration;
      return setDecorations(controller, decoration);
    }

    if (type === CLIPBOARD_DEL_SELECTION) {
      return deleteAtRange(controller);
    }

    if (type === CLIPBOARD_HIDE_PASTEPANEL) {
      return hidePastePanel(controller);
    }

    if (type === CLIPBOARD_HIDE_CUSTOM_PASTEPANEL) {
      return hideCustomPasteButton(controller);
    }

    if (type === CLIPBOARD_MATCH_MODE) {
      var _fragment = getMatchFragment(controller, payload.fragment);

      return insertFragmentByClipboard(controller, _fragment);
    }

    if (type === CLIPBOARD_TEXT_MODE) {
      var _fragment2 = getMarksFragment(controller, payload.fragment);

      return insertFragmentByClipboard(controller, _fragment2);
    }

    if (type === ContextMenu.ACTION_PASTE_FAIL) {
      var isShortcut = payload.isShortcut,
          _payload$error = payload.error,
          error = _payload$error === void 0 ? new Error(ClipboardErrorEnum.CUT_FAILED) : _payload$error;

      if (!isShortcut && !environment.IS_MOBILE) {
        // PC 端右键粘贴失败, 建议使用快捷键
        onCangjiePasteFail(config == null ? void 0 : config.locale);
      } else if (onError) {
        onError(ClipboardErrorEnum.CUT_FAILED, error);
      }
    }

    if (type === ContextMenu.ACTION_COPY_FAIL) {
      var _payload$error2 = payload.error,
          _error = _payload$error2 === void 0 ? new Error(ClipboardErrorEnum.COPY_FAILED) : _payload$error2;

      if (onError) {
        onError(ClipboardErrorEnum.COPY_FAILED, _error);
      }
    }

    if (type === ContextMenu.ACTION_CUT_FAIL) {
      var _payload$error3 = payload.error,
          _error2 = _payload$error3 === void 0 ? new Error(ClipboardErrorEnum.CUT_FAILED) : _payload$error3;

      if (onError) {
        onError(ClipboardErrorEnum.CUT_FAILED, _error2);
      }
    }

    return next();
  };
}
//# sourceMappingURL=onAction.js.map