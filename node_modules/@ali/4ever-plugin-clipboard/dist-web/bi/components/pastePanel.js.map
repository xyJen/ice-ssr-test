{"version":3,"sources":["../../../../src/bi/components/pastePanel.tsx"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","ReactDOM","useZoom","useZoomContainer","domUtils","logger","getPointAndBlockOnSelection","mimeTypes","MIME","PastePanel","Panel","useOnClickOutside","insertFragment","deleteAtRange","hidePastePanel","insertMatchFragment","insertTextFragment","hideCustomPastePanel","CARET_HEIGHT","MATCH_FORMAT","DEFAULT_PASTE_MODES","PASTE_MODES","SOURCE_FROMAT","TEXT_FORMAT","PanelWrapper","PanelWrapper4Custom","isDingDocs","props","controller","clipboardPad","customPanel","locale","config","pasteOptions","document","value","data","_clipboardPanel","updatePosTimer","panelVisible","setPanelVisible","panelRef","editorContainer","window","body","getContainer","zoom","root","querySelectorAll","key","hidePanel","run","hideCustomPanel","updatePosition","pointAndBlock","endPoint","rect","findCaretPosition","containerRect","getBoundingClientRect","panelDom","current","caret","getCaretDom","caretHeight","offsetHeight","style","left","clientLeft","top","clientTop","e","error","onSwitchMode","mode","preventDefault","stopPropagation","clipboardData","getClipboardDataCache","sum","fragment","getFragment","getTextFragment","markdownToDoc","st","Date","now","getMarkdownFragment","frag","extraData","beforeInsertMarkdown","afterInsertMarkdown","perf","console","onCustomSwitchMode","onChange","startsWith","cancelAnimationFrame","requestAnimationFrame","onClickPastePanel","event","handleClickOutside","contains","target","closest","builtinOptions","options","maybeMarkdown","unshift","autoUnfold","types","includes","TEXT_HTML","panel","createPortal"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,MAAjD,EAAyDC,QAAzD,QAAyE,OAAzE;qBAC4B,a;AAA5B,OAAOC,QAAP,MAAqB,WAArB;AACA,SAAqBC,OAArB,EAA8BC,gBAA9B,EAAgDC,QAAhD,QAA0E,oBAA1E;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,2BAAT,EAAsCC,SAAS,IAAIC,IAAnD,QAA+D,kBAA/D;AACA,SAAkBC,UAAU,IAAIC,KAAhC,QAA6C,iBAA7C;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SACEC,cADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,mBAJF,EAKEC,kBALF,EAMEC,oBANF;AAQA,SACEC,YADF,EAEEC,YAFF,EAGEC,mBAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,WANF;AAQA,SAASC,YAAT,EAAuBC,mBAAvB;AAGA,SAASC,UAAT;;AAoBA,SAASjB,UAAT,CAAoBkB,KAApB,EAA4C;AAAA,MAClCC,UADkC,GAC6BD,KAD7B,CAClCC,UADkC;AAAA,MACtBC,YADsB,GAC6BF,KAD7B,CACtBE,YADsB;AAAA,MACRC,WADQ,GAC6BH,KAD7B,CACRG,WADQ;AAAA,sBAC6BH,KAD7B,CACKI,MADL;AAAA,MACKA,MADL,8BACc,EADd;AAAA,MACkBC,MADlB,GAC6BL,KAD7B,CACkBK,MADlB;AAAA,MAElCC,YAFkC,GAEjBF,MAFiB,CAElCE,YAFkC;AAAA,MAGlCC,QAHkC,GAGrBN,UAAU,CAACO,KAHU,CAGlCD,QAHkC;;AAAA,8BAITN,UAAU,CAACO,KAAX,CAAiBC,IAJR,CAIlCC,eAJkC;AAAA,MAIlCA,eAJkC,sCAIhB,EAJgB;;AAK1C,MAAMC,cAAc,GAAGvC,MAAM,CAAS,CAAT,CAA7B;;AAL0C,kBAMFC,QAAQ,CAAC,KAAD,CANN;AAAA,MAMnCuC,YANmC;AAAA,MAMrBC,eANqB;;AAO1C,MAAMC,QAAQ,GAAG1C,MAAM,CAAiB,IAAjB,CAAvB;AACA,MAAM2C,eAAe,GAAGvC,gBAAgB,MAAMwC,MAAM,CAACT,QAAP,CAAgBU,IAA9D;;AACA,MAAMC,YAAY,GAAGlB,KAAK,CAACkB,YAAN,IAAuB;AAAA,WAAMH,eAAN;AAAA,GAA5C;;AACA,MAAMI,IAAI,GAAG5C,OAAO,EAApB;AACA,MAAM6C,IAAI,GAAGJ,MAAM,CAACT,QAAP,CAAgBc,gBAAhB,0BACWd,QAAQ,CAACe,GADpB,UAEX,CAFW,CAAb;AAIA,MAAMC,SAAS,GAAGtD,WAAW,CAAC,YAAM;AAClC4C,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAZ,IAAAA,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2BrC,cAAc,EAAzC;AACD,GAH4B,EAG1B,CAACc,UAAD,CAH0B,CAA7B;AAKA,MAAMwB,eAAe,GAAGxD,WAAW,CAAC,YAAM;AACxC4C,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAZ,IAAAA,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2BlC,oBAAoB,EAA/C;AACD,GAHkC,EAGhC,CAACW,UAAD,CAHgC,CAAnC,CApB0C,CAyB1C;;AACA,MAAMyB,cAAc,GAAGzD,WAAW,CAAC,YAAM;AACvC,QAAI;AACF,UAAM0D,aAAa,GAAGhD,2BAA2B,CAACsB,UAAD,CAAjD;AADE,UAEM2B,QAFN,GAEmBD,aAFnB,CAEMC,QAFN,EAGF;;AACA,UAAMC,IAAI,GAAGpD,QAAQ,CAACqD,iBAAT,CAA2BF,QAA3B,EAAqC,KAArC,EAA4CR,IAA5C,CAAb;;AACA,UAAIS,IAAI,IAAId,eAAZ,EAA6B;AAC3B,YAAMgB,aAAa,GAAGhB,eAAe,CAACiB,qBAAhB,EAAtB;;AACA,YAAI,CAACpB,YAAL,EAAmB;AACjBC,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AACD,YAAMoB,QAAQ,GAAGnB,QAAQ,CAACoB,OAA1B;;AACA,YAAID,QAAJ,EAAc;AACZ,cAAME,KAAK,GAAG1D,QAAQ,CAAC2D,WAAT,CAAqBrB,eAArB,CAAd;AACA,cAAMsB,WAAW,GAAGF,KAAK,GAAGA,KAAK,CAACG,YAAT,GAAwB/C,YAAjD;AACA0C,UAAAA,QAAQ,CAACM,KAAT,CAAeC,IAAf,GAAyB,CAACX,IAAI,CAACY,UAAL,GAAkBV,aAAa,CAACS,IAAjC,IAAyCrB,IAAlE;AACAc,UAAAA,QAAQ,CAACM,KAAT,CAAeG,GAAf,GACE,CAACb,IAAI,CAACc,SAAL,GAAiBZ,aAAa,CAACW,GAAhC,IAAuCvB,IAAvC,GAA8CkB,WADhD;AAGD;AACF,OAdD,MAcO,IAAI,CAACR,IAAL,EAAW;AAChB;AACA,YAAI1B,WAAJ,EAAiB;AACfsB,UAAAA,eAAe;AAChB,SAFD,MAEO;AACLF,UAAAA,SAAS;AACV;AACF;AACF,KA3BD,CA2BE,OAAOqB,CAAP,EAAe;AACflE,MAAAA,MAAM,CAACmE,KAAP,CAAaD,CAAb;AACD;AACF,GA/BiC,EA+B/B,CACD3C,UADC,EAEDE,WAFC,EAGDY,eAHC,EAIDU,eAJC,EAKDF,SALC,EAMDX,YANC,EAODQ,IAPC,CA/B+B,CAAlC,CA1B0C,CAmE1C;;AACA,MAAM0B,YAAY,GAAG7E,WAAW,CAC9B,UAAC8E,IAAD,EAAeH,CAAf,EAAqB;AACnBA,IAAAA,CAAC,QAAD,YAAAA,CAAC,CAAEI,cAAH;AACAJ,IAAAA,CAAC,QAAD,YAAAA,CAAC,CAAEK,eAAH;AACA,QAAMC,aAAa,GAAGhD,YAAY,CAACiD,qBAAb,EAAtB;AACA,QAAI,CAACD,aAAD,IAAkB,CAACH,IAAvB,EAA6B,OAJV,CAKnB;;AACA9C,IAAAA,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2BtC,aAAa,EAAxC;AACAR,IAAAA,MAAM,CAAC0E,GAAP,iBAAyBL,IAAzB;AACA,QAAIM,QAAJ;;AACA,QAAIN,IAAI,KAAKpD,aAAb,EAA4B;AAC1B;AACA0D,MAAAA,QAAQ,GAAGH,aAAH,oBAAGA,aAAa,CAAEI,WAAf,EAAX;;AACA,UAAID,QAAJ,EAAc;AACZpD,QAAAA,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2BvC,cAAc,CAACoE,QAAD,CAAzC;AACD;AACF,KAND,MAMO,IAAIN,IAAI,KAAKvD,YAAb,EAA2B;AAChC;AACA6D,MAAAA,QAAQ,GAAGH,aAAH,oBAAGA,aAAa,CAAEI,WAAf,EAAX;;AACA,UAAID,QAAJ,EAAc;AACZpD,QAAAA,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2BpC,mBAAmB,CAACiE,QAAD,CAA9C;AACD;AACF,KANM,MAMA,IAAIN,IAAI,KAAKnD,WAAb,EAA0B;AAC/B;AACAyD,MAAAA,QAAQ,GAAGH,aAAH,oBAAGA,aAAa,CAAEK,eAAf,EAAX;;AACA,UAAIF,QAAJ,EAAc;AACZpD,QAAAA,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2BnC,kBAAkB,CAACgE,QAAD,CAA7C;AACD;AACF,KANM,MAMA,IAAIN,IAAI,KAAKrD,WAAW,CAAC8D,aAAzB,EAAwC;AAC7C,+DAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACOC,gBAAAA,EADP,GACYC,IAAI,CAACC,GAAL,EADZ;AAAA;AAAA,uBAEkBT,aAFlB,oBAEkBA,aAAa,CAAEU,mBAAf,EAFlB;;AAAA;AAEKC,gBAAAA,IAFL;AAIKC,gBAAAA,SAJL,GAIiB,IAJjB;;AAKC,oBAAI9D,KAAK,CAAC+D,oBAAV,EAAgC;AAAA,0CACV/D,KAAK,CAAC+D,oBAAN,CAA2BF,IAA3B,CADU;AAC7BA,kBAAAA,IAD6B;AACvBC,kBAAAA,SADuB;AAE/B;;AACD7D,gBAAAA,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2BvC,cAAc,CAAC4E,IAAD,CAAzC;;AACA,oBAAI7D,KAAK,CAACgE,mBAAV,EAA+B;AAC7BhE,kBAAAA,KAAK,CAACgE,mBAAN,CAA0BF,SAA1B;AACD;;AACDpF,gBAAAA,MAAM,CAACuF,IAAP,CAAY,wBAAZ,EAAsCP,IAAI,CAACC,GAAL,KAAaF,EAAnD;;AAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD,cAaW,UAACb,CAAD,EAAO;AAChBlE,QAAAA,MAAM,CAACmE,KAAP,CAAaD,CAAb;AACAsB,QAAAA,OAAO,CAACrB,KAAR,CAAc,sBAAd,EAAsCD,CAAtC;AACD,OAhBD;AAiBD;AACF,GA/C6B,EAgD9B,CAAC1C,YAAD,EAAeD,UAAf,CAhD8B,CAAhC;AAmDA,MAAMkE,kBAAkB,GAAGlG,WAAW,CACpC,UAACqD,GAAD,EAAMsB,CAAN,EAAY;AACVA,IAAAA,CAAC,QAAD,YAAAA,CAAC,CAAEI,cAAH;AACAJ,IAAAA,CAAC,QAAD,YAAAA,CAAC,CAAEK,eAAH;AACA,QAAMC,aAAa,GAAGhD,YAAY,CAACiD,qBAAb,EAAtB;AACA,QAAI,CAACD,aAAD,IAAkB,CAAC/C,WAAvB,EAAoC;AACpCA,IAAAA,WAAW,QAAX,YAAAA,WAAW,CAAEiE,QAAb,CAAsB9C,GAAtB,EAA2B,YAAM;AAC/B,aAAOrB,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2BtC,aAAa,EAAxC,CAAP;AACD,KAFD;AAGAuC,IAAAA,eAAe;AAChB,GAVmC,EAWpC,CAACvB,YAAD,EAAeD,UAAf,EAA2BE,WAA3B,EAAwCsB,eAAxC,CAXoC,CAAtC;AAcAvD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIwC,eAAJ,YAAIA,eAAe,CAAE2D,UAAjB,CAA4B,MAA5B,CAAJ,EAAyC;AACvC;AACAC,MAAAA,oBAAoB,CAAC3D,cAAc,CAACuB,OAAhB,CAApB;AACAvB,MAAAA,cAAc,CAACuB,OAAf,GAAyBlB,MAAM,CAACuD,qBAAP,CAA6B7C,cAA7B,CAAzB;AACD;;AACD,WAAO,YAAM;AACX,UAAIf,cAAc,CAACuB,OAAnB,EAA4B;AAC1BoC,QAAAA,oBAAoB,CAAC3D,cAAc,CAACuB,OAAhB,CAApB;AACD;AACF,KAJD;AAKD,GAXQ,CAAT;AAaA,MAAMsC,iBAAiB,GAAGvG,WAAW,CAAC,UAACwG,KAAD,EAAW;AAC/CA,IAAAA,KAAK,CAACzB,cAAN;AACAyB,IAAAA,KAAK,CAACxB,eAAN;AACD,GAHoC,EAGlC,EAHkC,CAArC;AAKA,MAAMyB,kBAAkB,GAAGzG,WAAW,CACpC,UAACwG,KAAD,EAAW;AAAA;;AACT,QACE3D,QAAQ,CAACoB,OAAT,IACA,uBAACpB,QAAQ,CAACoB,OAAV,aAAC,kBAAkByC,QAAlB,CAA2BF,KAAK,CAACG,MAAjC,CAAD,CADA,IAEA,CAACH,KAAK,CAACG,MAAN,CAAaC,OAAb,CAAqB,WAArB,CAHH,EAIE;AACA,UAAI1E,WAAJ,EAAiB;AACfsB,QAAAA,eAAe;AAChB,OAFD,MAEO;AACLF,QAAAA,SAAS;AACV;AACF;AACF,GAbmC,EAcpC,CAACpB,WAAD,EAAcsB,eAAd,EAA+BF,SAA/B,CAdoC,CAAtC;AAiBAvC,EAAAA,iBAAiB,CAAC8B,QAAD,EAAW4D,kBAAX,EAA+B,KAA/B,CAAjB;AAEA,MAAMxB,aAAa,GAAGhD,YAAY,CAACiD,qBAAb,EAAtB;AACA,MAAM2B,cAAc,GAAG3G,OAAO,CAAC,YAAM;AACnC,QAAIgC,WAAJ,EAAiB;AACf,aAAO,EAAP;AACD;;AAED,QAAM4E,OAAgC,aAAOtF,mBAAP,CAAtC;;AACA,QAAIyD,aAAJ,YAAIA,aAAa,CAAE8B,aAAnB,EAAkC;AAChCD,MAAAA,OAAO,CAACE,OAAR,CAAgBvF,WAAW,CAAC8D,aAA5B;AACD;;AACD,WAAOuB,OAAP;AACD,GAV6B,EAU3B,CAAC7B,aAAD,EAAgB/C,WAAhB,CAV2B,CAA9B;AAYA,MAAM+E,UAAU,GAAG/G,OAAO,CAAC,YAAM;AAC/B,QACE+E,aAAa,IACb,CAACnD,UAAU,CAACmD,aAAD,CADX,IAEAA,aAAa,CAACiC,KAAd,CAAoBC,QAApB,CAA6BvG,IAAI,CAACwG,SAAlC,CAHF,EAIE;AACA,aAAO,IAAP;AACD;;AACD,WAAOnC,aAAP,oBAAOA,aAAa,CAAE8B,aAAtB;AACD,GATyB,EASvB,CAAC9B,aAAD,CATuB,CAA1B;;AAYA,MAAI/C,WAAJ,EAAiB;AACf,QAAMmF,MAAK,gBACT,eAAC,mBAAD;AAAqB,MAAA,GAAG,EAAExE,QAA1B;AAAoC,qBAAY;AAAhD,oBACE,eAAC,KAAD;AACE,MAAA,cAAc,MADhB;AAEE,MAAA,OAAO,EAAEX,WAAF,oBAAEA,WAAW,CAAE4E,OAFxB;AAGE,MAAA,QAAQ,EAAEZ,kBAHZ;AAIE,MAAA,UAAU,EAAEjB,aAAF,oBAAEA,aAAa,CAAE8B,aAJ7B;AAKE,MAAA,YAAY,EAAE9D,YALhB;AAME,MAAA,KAAK,EAAEZ;AANT,MADF,CADF;;AAYA,WAAOM,YAAY,IAAIG,eAAhB,gBACLzC,QAAQ,CAACiH,YAAT,CAAsBD,MAAtB,EAA6BvE,eAA7B,CADK,gBAEF,oCAFL;AAGD;;AAED,MAAMuE,KAAK,gBACT,eAAC,YAAD;AACE,IAAA,GAAG,EAAExE,QADP;AAEE,mBAAY,YAFd;AAGE,IAAA,WAAW,EAAE0D;AAHf,kBAKE,eAAC,KAAD;AACE,IAAA,OAAO,EAAEM,cADX;AAEE,IAAA,QAAQ,EAAEhC,YAFZ;AAGE,IAAA,KAAK,EAAExC,YAHT;AAIE,IAAA,UAAU,EAAE4E,UAJd;AAKE,IAAA,YAAY,EAAEhE,YALhB;AAME,IAAA,qBAAqB,EAAE;AANzB,IALF,CADF;;AAiBA,SAAON,YAAY,IAAIG,eAAhB,gBACLzC,QAAQ,CAACiH,YAAT,CAAsBD,KAAtB,EAA6BvE,eAA7B,CADK,gBAEF,oCAFL;AAGD;;AAED,eAAejC,UAAf","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Controller, useZoom, useZoomContainer, domUtils, Document } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport { getPointAndBlockOnSelection, mimeTypes as MIME } from '@ali/4ever-utils';\nimport { IOption, PastePanel as Panel } from '@ali/we-toolbar';\nimport { useOnClickOutside } from '@ali/4ever-component';\nimport {\n  insertFragment,\n  deleteAtRange,\n  hidePastePanel,\n  insertMatchFragment,\n  insertTextFragment,\n  hideCustomPastePanel,\n} from '../actions';\nimport {\n  CARET_HEIGHT,\n  MATCH_FORMAT,\n  DEFAULT_PASTE_MODES,\n  PASTE_MODES,\n  SOURCE_FROMAT,\n  TEXT_FORMAT,\n} from '../../utils/constants';\nimport { PanelWrapper, PanelWrapper4Custom } from './styled';\nimport ClipboardPad from '../../utils/ClipboardPad';\nimport { ClipboardPluginConfig, ClipboardPluginLocale } from '../../utils/types';\nimport { isDingDocs } from '../../utils/tester';\n\nexport interface CustomPanelConfig {\n  onChange: (key: string, deleteAtRange?: () => void) => void;\n  options: Array<'card' | 'preview' | 'text'>;\n}\n\nexport interface PastePanelProps {\n  config: ClipboardPluginConfig;\n  controller: Controller;\n  clipboardPad: ClipboardPad;\n  locale?: ClipboardPluginLocale;\n  customPanel?: CustomPanelConfig;\n  getContainer?: () => HTMLElement;\n  // 预处理 markdownFragment\n  beforeInsertMarkdown?: (value: Document) => [Document, any];\n  // 针对预处理后的结果做一些后续处理\n  afterInsertMarkdown?: (data: any) => void;\n}\n\nfunction PastePanel(props: PastePanelProps) {\n  const { controller, clipboardPad, customPanel, locale = {}, config } = props;\n  const { pasteOptions } = locale;\n  const { document } = controller.value;\n  const { _clipboardPanel = '' } = controller.value.data;\n  const updatePosTimer = useRef<number>(0);\n  const [panelVisible, setPanelVisible] = useState(false);\n  const panelRef = useRef<HTMLDivElement>(null);\n  const editorContainer = useZoomContainer() || window.document.body;\n  const getContainer = props.getContainer || (() => editorContainer);\n  const zoom = useZoom();\n  const root = window.document.querySelectorAll(\n    `[data-cangjie-key=\"${document.key}\"]`,\n  )[0];\n\n  const hidePanel = useCallback(() => {\n    setPanelVisible(false);\n    controller.run('onAction', hidePastePanel());\n  }, [controller]);\n\n  const hideCustomPanel = useCallback(() => {\n    setPanelVisible(false);\n    controller.run('onAction', hideCustomPastePanel());\n  }, [controller]);\n\n  // 显示并更新粘贴面板位置\n  const updatePosition = useCallback(() => {\n    try {\n      const pointAndBlock = getPointAndBlockOnSelection(controller);\n      const { endPoint } = pointAndBlock;\n      // 防止找光标位置时报错导致页面crash\n      const rect = domUtils.findCaretPosition(endPoint, 'end', root);\n      if (rect && editorContainer) {\n        const containerRect = editorContainer.getBoundingClientRect();\n        if (!panelVisible) {\n          setPanelVisible(true);\n        }\n        const panelDom = panelRef.current;\n        if (panelDom) {\n          const caret = domUtils.getCaretDom(editorContainer) as HTMLElement;\n          const caretHeight = caret ? caret.offsetHeight : CARET_HEIGHT;\n          panelDom.style.left = `${(rect.clientLeft - containerRect.left) / zoom}px`;\n          panelDom.style.top = `${\n            (rect.clientTop - containerRect.top) / zoom + caretHeight\n          }px`;\n        }\n      } else if (!rect) {\n        // 找不到光标时，将面板隐藏掉，防止再次聚焦时显示位置不准确\n        if (customPanel) {\n          hideCustomPanel();\n        } else {\n          hidePanel();\n        }\n      }\n    } catch (e: any) {\n      logger.error(e);\n    }\n  }, [\n    controller,\n    customPanel,\n    editorContainer,\n    hideCustomPanel,\n    hidePanel,\n    panelVisible,\n    root,\n  ]);\n\n  // 切换粘贴模式\n  const onSwitchMode = useCallback(\n    (mode: string, e) => {\n      e?.preventDefault();\n      e?.stopPropagation();\n      const clipboardData = clipboardPad.getClipboardDataCache();\n      if (!clipboardData || !mode) return;\n      // 删除Decoration组成选区之间的内容，重新插入新模式内\n      controller.run('onAction', deleteAtRange());\n      logger.sum(`paste_mode_${mode}`);\n      let fragment;\n      if (mode === SOURCE_FROMAT) {\n        // 原格式粘贴\n        fragment = clipboardData?.getFragment();\n        if (fragment) {\n          controller.run('onAction', insertFragment(fragment));\n        }\n      } else if (mode === MATCH_FORMAT) {\n        // 匹配粘贴\n        fragment = clipboardData?.getFragment();\n        if (fragment) {\n          controller.run('onAction', insertMatchFragment(fragment));\n        }\n      } else if (mode === TEXT_FORMAT) {\n        // 纯文本粘贴\n        fragment = clipboardData?.getTextFragment();\n        if (fragment) {\n          controller.run('onAction', insertTextFragment(fragment));\n        }\n      } else if (mode === PASTE_MODES.markdownToDoc) {\n        (async () => {\n          const st = Date.now();\n          let frag = await clipboardData?.getMarkdownFragment();\n\n          let extraData = null;\n          if (props.beforeInsertMarkdown) {\n            [frag, extraData] = props.beforeInsertMarkdown(frag);\n          }\n          controller.run('onAction', insertFragment(frag));\n          if (props.afterInsertMarkdown) {\n            props.afterInsertMarkdown(extraData);\n          }\n          logger.perf('markdown_to_value_time', Date.now() - st);\n        })().catch((e) => {\n          logger.error(e);\n          console.error('paste markdown error', e);\n        });\n      }\n    },\n    [clipboardPad, controller],\n  );\n\n  const onCustomSwitchMode = useCallback(\n    (key, e) => {\n      e?.preventDefault();\n      e?.stopPropagation();\n      const clipboardData = clipboardPad.getClipboardDataCache();\n      if (!clipboardData || !customPanel) return;\n      customPanel?.onChange(key, () => {\n        return controller.run('onAction', deleteAtRange());\n      });\n      hideCustomPanel();\n    },\n    [clipboardPad, controller, customPanel, hideCustomPanel],\n  );\n\n  useEffect(() => {\n    if (_clipboardPanel?.startsWith('show')) {\n      // 有粘贴操作时，更新粘贴按钮位置\n      cancelAnimationFrame(updatePosTimer.current);\n      updatePosTimer.current = window.requestAnimationFrame(updatePosition);\n    }\n    return () => {\n      if (updatePosTimer.current) {\n        cancelAnimationFrame(updatePosTimer.current);\n      }\n    };\n  });\n\n  const onClickPastePanel = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  }, []);\n\n  const handleClickOutside = useCallback(\n    (event) => {\n      if (\n        panelRef.current &&\n        !panelRef.current?.contains(event.target) &&\n        !event.target.closest('.ModeMenu')\n      ) {\n        if (customPanel) {\n          hideCustomPanel();\n        } else {\n          hidePanel();\n        }\n      }\n    },\n    [customPanel, hideCustomPanel, hidePanel],\n  );\n\n  useOnClickOutside(panelRef, handleClickOutside, false);\n  \n  const clipboardData = clipboardPad.getClipboardDataCache();\n  const builtinOptions = useMemo(() => {\n    if (customPanel) {\n      return [];\n    }\n\n    const options: Array<string | IOption> = [...DEFAULT_PASTE_MODES];\n    if (clipboardData?.maybeMarkdown) {\n      options.unshift(PASTE_MODES.markdownToDoc);\n    }\n    return options;\n  }, [clipboardData, customPanel]);\n\n  const autoUnfold = useMemo(() => {\n    if (\n      clipboardData &&\n      !isDingDocs(clipboardData) &&\n      clipboardData.types.includes(MIME.TEXT_HTML)\n    ) {\n      return true;\n    }\n    return clipboardData?.maybeMarkdown;\n  }, [clipboardData]);\n\n\n  if (customPanel) {\n    const panel = (\n      <PanelWrapper4Custom ref={panelRef} data-testid=\"pastePanel\">\n        <Panel\n          hideSplitBtton\n          options={customPanel?.options}\n          onChange={onCustomSwitchMode}\n          autoUnfold={clipboardData?.maybeMarkdown}\n          getContainer={getContainer}\n          title={pasteOptions}\n        />\n      </PanelWrapper4Custom>\n    );\n    return panelVisible && editorContainer ? (\n      ReactDOM.createPortal(panel, editorContainer)\n    ) : (<></>);\n  }\n\n  const panel = (\n    <PanelWrapper\n      ref={panelRef}\n      data-testid=\"pastePanel\"\n      onMouseDown={onClickPastePanel}\n    >\n      <Panel\n        options={builtinOptions}\n        onChange={onSwitchMode}\n        title={pasteOptions}\n        autoUnfold={autoUnfold}\n        getContainer={getContainer}\n        shouldSelectFirstItem={false}\n      />\n    </PanelWrapper>\n  );\n\n  return panelVisible && editorContainer ? (\n    ReactDOM.createPortal(panel, editorContainer)\n  ) : (<></>);\n}\n\nexport default PastePanel;\n"],"file":"pastePanel.js"}