import { zhiFactory } from "./zhi/index";
import { biFactory } from "./bi/index";
import ClipboardPad from "./utils/ClipboardPad";
import createOnCangjieCopyOrCut from "./common/handlers/createOnCangjieCopyOrCut";

var mobileBiFactory = function mobileBiFactory(configs) {
  return biFactory(configs);
};

var mobileZhiFactory = function mobileZhiFactory(configs) {
  return zhiFactory(configs);
}; // facotry


export { biFactory, zhiFactory, mobileBiFactory, mobileZhiFactory }; // types

// custom
export { ClipboardPad };
export { createClipboardManager } from "./utils/createClipboardManager";
export { PasteMode } from "./utils/types"; // other export for api compatibility

export { CLIPBOARD_INSERT_FRAGMENT, CLIPBOARD_SET_DECORATIONS, CLIPBOARD_DEL_SELECTION, CLIPBOARD_HIDE_PASTEPANEL, CLIPBOARD_HIDE_CUSTOM_PASTEPANEL, CLIPBOARD_MATCH_MODE, CLIPBOARD_TEXT_MODE, insertFragment, setDecorations, deleteAtRange, hidePastePanel, hideCustomPastePanel, insertMatchFragment, insertTextFragment } from "./bi/actions"; // TODO: tree-shaking 不友好

import * as _utils from "./bi/utils";
export { _utils as utils };
export { copyNodes, normalizeFragment } from "./bi/utils";
export { default as getHtmlFromValue } from "./utils/getHtmlFromValue";
export { default as filterAndNormalize } from "./utils/filterAndNormalize";
export { restructFragment } from "./utils/restructFragment";
export { createOnCangjieCopyOrCut };
export { default as clipboardLatency } from "./bi/latency";
//# sourceMappingURL=index.js.map