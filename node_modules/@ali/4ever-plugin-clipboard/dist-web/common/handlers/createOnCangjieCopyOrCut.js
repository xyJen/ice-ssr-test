import _extends from "@babel/runtime/helpers/extends";
import { Value, transferUtils, constants } from '@ali/4ever-cangjie';
import ClipboardPad from "../../utils/ClipboardPad";
import { dealWithFragmentOnCopy } from "../../bi/utils/dealWithFragmentOnCopy";
import getHtmlFromValue from "../../utils/getHtmlFromValue";
import canCopyOrCut from "../../utils/canCopyOrCut";
import getImageSource from "../../bi/utils/getImageSource";
import { FILE_IMG_TYPE } from "../../utils/constants";
import writeClipboardDataToHtml from "../../bi/utils/writeClipboardDataToHtml";
import getAllCustomClipboardData from "../../bi/utils/getAllCustomClipboardData";
var MIME_TYPES = constants.MIME_TYPES;
export default function createOnCangjieCopyOrCut(clipboard) {
  return function onCangjieCopyOrCut(event, controller, next) {
    var _fragment, _event$nativeEvent;

    if (!event.clipboardData) {
      return next();
    }

    var clipboardPad = ClipboardPad.getClipboardPad(_extends({
      serializer: controller.serializer,
      schema: controller.strictSchema
    }, clipboard), clipboard.key);
    var _controller$value = controller.value,
        document = _controller$value.document,
        selection = _controller$value.selection;
    var encodedFragment = event.clipboardData.getData(MIME_TYPES.FRAGMENT); // 为了保障拷贝正常使用，这里 catch 一下，防止数据层报错

    var fragment = dealWithFragmentOnCopy({
      fragment: encodedFragment ? transferUtils.decodeFragment(encodedFragment) : document.getFragmentAtRange(selection),
      controller: controller
    });

    if ((_fragment = fragment) != null && _fragment.data) {
      var _clipboardPad$models;

      fragment = fragment.set('data', _extends({}, fragment.data, {
        copyFrom: (_clipboardPad$models = clipboardPad.models) == null ? void 0 : _clipboardPad$models.get('controllerPid')
      }));
    }

    if (!canCopyOrCut(fragment) && selection.isCollapsed) {
      return;
    }

    var mediaUrl = getImageSource(fragment);

    if (mediaUrl) {
      event.clipboardData.setData(FILE_IMG_TYPE, mediaUrl);
    }

    var value = Value.create({
      document: fragment
    });
    var html = writeClipboardDataToHtml(getHtmlFromValue(clipboardPad.config.serializer, value), [].concat(getAllCustomClipboardData(event.clipboardData), getAllCustomClipboardData((_event$nativeEvent = event.nativeEvent) == null ? void 0 : _event$nativeEvent.clipboardData)));
    event.clipboardData.setData(MIME_TYPES.FRAGMENT, transferUtils.encodeFragment(fragment)).setData(MIME_TYPES.HTML, html).setData(MIME_TYPES.TEXT, clipboardPad.config.serializer.valueToText(value));
    return next();
  };
}
//# sourceMappingURL=createOnCangjieCopyOrCut.js.map