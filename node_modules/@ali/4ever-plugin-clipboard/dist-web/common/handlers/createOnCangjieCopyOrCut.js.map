{"version":3,"sources":["../../../../src/common/handlers/createOnCangjieCopyOrCut.ts"],"names":["Value","transferUtils","constants","ClipboardPad","dealWithFragmentOnCopy","getHtmlFromValue","canCopyOrCut","getImageSource","FILE_IMG_TYPE","writeClipboardDataToHtml","getAllCustomClipboardData","MIME_TYPES","createOnCangjieCopyOrCut","clipboard","onCangjieCopyOrCut","event","controller","next","clipboardData","clipboardPad","getClipboardPad","serializer","schema","strictSchema","key","value","document","selection","encodedFragment","getData","FRAGMENT","fragment","decodeFragment","getFragmentAtRange","data","set","copyFrom","models","get","isCollapsed","mediaUrl","setData","create","html","config","nativeEvent","encodeFragment","HTML","TEXT","valueToText"],"mappings":";AAAA,SACEA,KADF,EAIEC,aAJF,EAKEC,SALF,QAMO,oBANP;AAOA,OAAOC,YAAP;AACA,SAASC,sBAAT;AACA,OAAOC,gBAAP;AACA,OAAOC,YAAP;AACA,OAAOC,cAAP;AACA,SAASC,aAAT;AAEA,OAAOC,wBAAP;AACA,OAAOC,yBAAP;IAEQC,U,GAAeT,S,CAAfS,U;AAGR,eAAe,SAASC,wBAAT,CACbC,SADa,EAEY;AACzB,SAAO,SAASC,kBAAT,CACLC,KADK,EAELC,UAFK,EAGLC,IAHK,EAIL;AAAA;;AACA,QAAI,CAACF,KAAK,CAACG,aAAX,EAA0B;AACxB,aAAOD,IAAI,EAAX;AACD;;AAED,QAAME,YAAY,GAAGhB,YAAY,CAACiB,eAAb;AACnBC,MAAAA,UAAU,EAAEL,UAAU,CAACK,UADJ;AAEnBC,MAAAA,MAAM,EAAEN,UAAU,CAACO;AAFA,OAGhBV,SAHgB,GAIlBA,SAAS,CAACW,GAJQ,CAArB;AALA,4BAWgCR,UAAU,CAACS,KAX3C;AAAA,QAWQC,QAXR,qBAWQA,QAXR;AAAA,QAWkBC,SAXlB,qBAWkBA,SAXlB;AAYA,QAAMC,eAAe,GAAGb,KAAK,CAACG,aAAN,CAAoBW,OAApB,CAA4BlB,UAAU,CAACmB,QAAvC,CAAxB,CAZA,CAaA;;AACA,QAAIC,QAAQ,GAAG3B,sBAAsB,CAAC;AACpC2B,MAAAA,QAAQ,EAAEH,eAAe,GACrB3B,aAAa,CAAC+B,cAAd,CAA6BJ,eAA7B,CADqB,GAErBF,QAAQ,CAACO,kBAAT,CAA4BN,SAA5B,CAHgC;AAIpCX,MAAAA,UAAU,EAAVA;AAJoC,KAAD,CAArC;;AAMA,qBAAIe,QAAJ,aAAI,UAAUG,IAAd,EAAoB;AAAA;;AAClBH,MAAAA,QAAQ,GAAGA,QAAQ,CAACI,GAAT,CAAa,MAAb,eACNJ,QAAQ,CAACG,IADH;AAETE,QAAAA,QAAQ,0BAAEjB,YAAY,CAACkB,MAAf,qBAAE,qBAAqBC,GAArB,CAAyB,eAAzB;AAFD,SAAX;AAID;;AAED,QAAI,CAAChC,YAAY,CAACyB,QAAD,CAAb,IAA2BJ,SAAS,CAACY,WAAzC,EAAsD;AACpD;AACD;;AAED,QAAMC,QAAQ,GAAGjC,cAAc,CAACwB,QAAD,CAA/B;;AACA,QAAIS,QAAJ,EAAc;AACZzB,MAAAA,KAAK,CAACG,aAAN,CAAoBuB,OAApB,CAA4BjC,aAA5B,EAA2CgC,QAA3C;AACD;;AAED,QAAMf,KAAK,GAAGzB,KAAK,CAAC0C,MAAN,CAAa;AAAEhB,MAAAA,QAAQ,EAAEK;AAAZ,KAAb,CAAd;AAEA,QAAMY,IAAI,GAAGlC,wBAAwB,CACnCJ,gBAAgB,CAACc,YAAY,CAACyB,MAAb,CAAoBvB,UAArB,EAAiCI,KAAjC,CADmB,YAG9Bf,yBAAyB,CAACK,KAAK,CAACG,aAAP,CAHK,EAI9BR,yBAAyB,uBAACK,KAAK,CAAC8B,WAAP,qBAAC,mBAAmB3B,aAApB,CAJK,EAArC;AAQAH,IAAAA,KAAK,CAACG,aAAN,CACGuB,OADH,CACW9B,UAAU,CAACmB,QADtB,EACgC7B,aAAa,CAAC6C,cAAd,CAA6Bf,QAA7B,CADhC,EAEGU,OAFH,CAEW9B,UAAU,CAACoC,IAFtB,EAE4BJ,IAF5B,EAGGF,OAHH,CAII9B,UAAU,CAACqC,IAJf,EAKI7B,YAAY,CAACyB,MAAb,CAAoBvB,UAApB,CAA+B4B,WAA/B,CAA2CxB,KAA3C,CALJ;AAOA,WAAOR,IAAI,EAAX;AACD,GA1DD;AA2DD","sourcesContent":["import {\n  Value,\n  Plugin,\n  CangjieClipboardEvent,\n  transferUtils,\n  constants,\n} from '@ali/4ever-cangjie';\nimport ClipboardPad from '../../utils/ClipboardPad';\nimport { dealWithFragmentOnCopy } from '../../bi/utils/dealWithFragmentOnCopy';\nimport getHtmlFromValue from '../../utils/getHtmlFromValue';\nimport canCopyOrCut from '../../utils/canCopyOrCut';\nimport getImageSource from '../../bi/utils/getImageSource';\nimport { FILE_IMG_TYPE } from '../../utils/constants';\nimport { ClipboardPluginConfig } from '../../utils/types';\nimport writeClipboardDataToHtml from '../../bi/utils/writeClipboardDataToHtml';\nimport getAllCustomClipboardData from '../../bi/utils/getAllCustomClipboardData';\n\nconst { MIME_TYPES } = constants;\n\n\nexport default function createOnCangjieCopyOrCut(\n  clipboard: Partial<ClipboardPluginConfig>,\n): Plugin['onCangjieCopy'] {\n  return function onCangjieCopyOrCut(\n    event: CangjieClipboardEvent,\n    controller,\n    next,\n  ) {\n    if (!event.clipboardData) {\n      return next();\n    }\n\n    const clipboardPad = ClipboardPad.getClipboardPad({\n      serializer: controller.serializer,\n      schema: controller.strictSchema,\n      ...clipboard,\n    }, clipboard.key);\n\n    const { document, selection } = controller.value;\n    const encodedFragment = event.clipboardData.getData(MIME_TYPES.FRAGMENT);\n    // 为了保障拷贝正常使用，这里 catch 一下，防止数据层报错\n    let fragment = dealWithFragmentOnCopy({\n      fragment: encodedFragment\n        ? transferUtils.decodeFragment(encodedFragment)\n        : document.getFragmentAtRange(selection),\n      controller,\n    });\n    if (fragment?.data) {\n      fragment = fragment.set('data', {\n        ...fragment.data,\n        copyFrom: clipboardPad.models?.get('controllerPid'),\n      });\n    }\n\n    if (!canCopyOrCut(fragment) && selection.isCollapsed) {\n      return;\n    }\n\n    const mediaUrl = getImageSource(fragment);\n    if (mediaUrl) {\n      event.clipboardData.setData(FILE_IMG_TYPE, mediaUrl);\n    }\n\n    const value = Value.create({ document: fragment });\n\n    const html = writeClipboardDataToHtml(\n      getHtmlFromValue(clipboardPad.config.serializer, value),\n      [\n        ...getAllCustomClipboardData(event.clipboardData),\n        ...getAllCustomClipboardData(event.nativeEvent?.clipboardData),\n      ],\n    );\n\n    event.clipboardData\n      .setData(MIME_TYPES.FRAGMENT, transferUtils.encodeFragment(fragment))\n      .setData(MIME_TYPES.HTML, html)\n      .setData(\n        MIME_TYPES.TEXT,\n        clipboardPad.config.serializer.valueToText(value),\n      );\n    return next();\n  };\n}\n"],"file":"createOnCangjieCopyOrCut.js"}