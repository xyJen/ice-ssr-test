import { Document } from '@ali/4ever-cangjie';
import { ClipboardPluginConfig, ModelsMap, ReceiveType } from './types';
/**
 * 自定义剪切板数据，封装了 fragment 等一些编辑器数据
 */
declare class ClipboardData implements DataTransfer {
    readonly nativeData: DataTransfer;
    private readonly serializer;
    private readonly rules?;
    private readonly schema;
    private readonly models?;
    get dropEffect(): "link" | "move" | "copy" | "none";
    get effectAllowed(): "link" | "move" | "copy" | "all" | "none" | "copyLink" | "copyMove" | "linkMove" | "uninitialized";
    get files(): FileList;
    get items(): DataTransferItemList;
    get types(): readonly string[];
    /**
     * 1. 仓颉内容不作 markdown 语法校验
     * 2. 如果仅有 text/plain 内容 或 text 内容符合 markdown 语法，则可能为 Markdown 文本
     * 3. 属于特殊情况，则可能为 Markdown 文本：
     *   a. VSCode：MimeType === vscode-editor-data && mode === 'markdown'
     */
    get maybeMarkdown(): boolean;
    private readonly cangjieData;
    /**
     * 剪切板中的 fragment
     */
    private fragment;
    /**
     * 剪切板中解析出的 fragment
     */
    private parsedFragment;
    private cacheId;
    /**
     * 第一可接受类型
     */
    private receiveType?;
    private readonly onError?;
    constructor(nativeData: DataTransfer, config: ClipboardPluginConfig, models?: ModelsMap);
    clearData(format?: string | undefined): void;
    getData(format: string): string;
    setData(format: string, data: string): void;
    setDragImage(image: Element, x: number, y: number): void;
    hasData(format: string): boolean;
    getCacheId(): string;
    /**
     * 读取剪切板中的 fragment
     * @param parse 是否强制解析 html/text，默认为 true
     */
    getFragment(parse?: boolean): Document | null;
    /**
     * 读取剪切板中的 纯文本内容
     */
    getTextFragment(): Document | null;
    /**
     * 读取剪贴板中的纯文本内容，并返回以 Markdown 格式序列化的 Value
     *
     * @returns {Document}
     */
    getMarkdownFragment(): Promise<Document>;
    /**
     * 读取剪切板中的图片文件
     */
    getImages(): File[];
    /**
     * 获取第一个可接受的剪切板数据类型
     */
    getFirstReceiveType(): ReceiveType;
    isEqual(nativeData: DataTransfer, config: ClipboardPluginConfig, models?: ModelsMap): boolean;
    private getTextHtml;
    private getParseFragment;
    normalizeFragment(fragment: Document): Document;
    /**
     * 拷贝过来的数据不一定完全可信，这里做一下数据效验
     * @param fragment
     */
    private isValidFragment;
}
export default ClipboardData;
