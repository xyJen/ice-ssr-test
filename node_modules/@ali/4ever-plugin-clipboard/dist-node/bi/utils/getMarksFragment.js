"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getMarksFragment;

var _everCangjie = require("@ali/4ever-cangjie");

var _lodash = require("lodash");

var _everUtils = require("@ali/4ever-utils");

var _getMatchFragment = require("./getMatchFragment");

// 不需要继承的样式
const EXCLUDE_STYLE = ['jc']; // 列表内容切换为纯文本时，第一项序号不会被删除, 列表转为普通段落

const dealFirsIsList = controller => {
  const listItems = controller.query("getCurrentItem");

  if (listItems?.length) {
    const fistItem = listItems[0];
    fistItem && controller.command(_everCangjie.Commands.setNodeByKey, fistItem.key, {
      type: 'paragraph',
      data: (0, _lodash.omit)(fistItem.data, 'list')
    });
  }
};
/**
 * @description 继承粘贴时光标所在位置 startBlock的style
 * @param {Document} fragment - 粘贴要插入的内存模型对象
 * */


function getMarksFragment(controller, fragment) {
  const {
    startBlock,
    startPoint
  } = (0, _everUtils.getPointAndBlockOnSelection)(controller);
  const extendBlock = (0, _getMatchFragment.getExtendBlock)(controller.value.document, startBlock);
  if (!startBlock) return fragment;
  const pasteFromStart = startPoint.isAtStartOfNode(startBlock);
  let isFirstParagraph = true;

  if (pasteFromStart) {
    dealFirsIsList(controller);
  }

  if (startBlock.marks) {
    // @ts-ignore
    const newFragment = fragment.mapDescendants(child => {
      if (_everCangjie.Text.isText(child)) {
        const childMarks = child.marks;
        childMarks.forEach(mark => {
          child = child.removeMark(0, child.text.length, mark);
        }); // 如果粘贴位置是在段落开始位置，没有样式继承项时，只做样式清除

        return pasteFromStart ? child : child.addMarks(0, child.text.length, startBlock.marks);
      } else if (extendBlock) {
        if (child?.type === 'paragraph' && isFirstParagraph) {
          isFirstParagraph = false;
          return child.set('type', extendBlock.type).set('data', (0, _lodash.omit)(extendBlock.data, EXCLUDE_STYLE));
        }

        return child;
      } else {
        return child;
      }
    });
    return newFragment;
  } else {
    return fragment;
  }
}
//# sourceMappingURL=getMarksFragment.js.map