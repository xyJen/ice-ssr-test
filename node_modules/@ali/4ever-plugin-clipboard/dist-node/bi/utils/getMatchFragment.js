"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getMatchFragment;
exports.getExtendBlock = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

const getExtendBlock = (doc, block) => {
  if (!block) {
    return null;
  } else if (block.type) {
    return block;
  } else {
    return getExtendBlock(doc, doc.getParent(block.key));
  }
};
/**
 * @description 继承粘贴时光标所在位置 startBlock的style及type
 * @param {Document} fragment - 粘贴要插入的内存模型对象
 * */


exports.getExtendBlock = getExtendBlock;

function getMatchFragment(controller, fragment) {
  const {
    document
  } = controller.value;
  const pointAndBlock = (0, _everUtils.getPointAndBlockOnSelection)(controller);
  const {
    startBlock,
    startPoint
  } = pointAndBlock;
  const extendBlock = getExtendBlock(controller.value.document, startBlock);
  if (!startBlock) return fragment;
  const startBlockPath = document.getPath(startBlock.key);
  const pasteFromStart = startBlockPath && startBlockPath[1] === 0 && startPoint.isAtStartOfNode(startBlock);
  const marks = startBlock?.marks;

  if (marks) {
    // @ts-ignore
    const newFragment = fragment.mapDescendants(child => {
      if (_everCangjie.Text.isText(child)) {
        const childMarks = child.marks;
        childMarks.forEach(mark => {
          child = child.removeMark(0, child.text.length, mark);
        });
        return pasteFromStart ? child : child.addMarks(0, child.text.length, marks);
      } else if (extendBlock) {
        if (child?.type === 'paragraph') {
          return child.set('type', extendBlock.type).set('data', extendBlock.data);
        }

        return child;
      }

      return undefined;
    });
    return newFragment;
  } else {
    return fragment;
  }
}
//# sourceMappingURL=getMatchFragment.js.map