{"version":3,"sources":["../../../../src/bi/components/pastePanel.tsx"],"names":["PastePanel","props","controller","clipboardPad","customPanel","locale","config","pasteOptions","document","value","_clipboardPanel","data","updatePosTimer","panelVisible","setPanelVisible","panelRef","editorContainer","window","body","getContainer","zoom","root","querySelectorAll","key","hidePanel","run","hideCustomPanel","updatePosition","pointAndBlock","endPoint","rect","domUtils","findCaretPosition","containerRect","getBoundingClientRect","panelDom","current","caret","getCaretDom","caretHeight","offsetHeight","CARET_HEIGHT","style","left","clientLeft","top","clientTop","e","logger","error","onSwitchMode","mode","preventDefault","stopPropagation","clipboardData","getClipboardDataCache","sum","fragment","SOURCE_FROMAT","getFragment","MATCH_FORMAT","TEXT_FORMAT","getTextFragment","PASTE_MODES","markdownToDoc","st","Date","now","frag","getMarkdownFragment","extraData","beforeInsertMarkdown","afterInsertMarkdown","perf","catch","console","onCustomSwitchMode","onChange","startsWith","cancelAnimationFrame","requestAnimationFrame","onClickPastePanel","event","handleClickOutside","contains","target","closest","builtinOptions","options","DEFAULT_PASTE_MODES","maybeMarkdown","unshift","autoUnfold","types","includes","MIME","TEXT_HTML","panel","ReactDOM","createPortal"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Controller, useZoom, useZoomContainer, domUtils, Document } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport { getPointAndBlockOnSelection, mimeTypes as MIME } from '@ali/4ever-utils';\nimport { IOption, PastePanel as Panel } from '@ali/we-toolbar';\nimport { useOnClickOutside } from '@ali/4ever-component';\nimport {\n  insertFragment,\n  deleteAtRange,\n  hidePastePanel,\n  insertMatchFragment,\n  insertTextFragment,\n  hideCustomPastePanel,\n} from '../actions';\nimport {\n  CARET_HEIGHT,\n  MATCH_FORMAT,\n  DEFAULT_PASTE_MODES,\n  PASTE_MODES,\n  SOURCE_FROMAT,\n  TEXT_FORMAT,\n} from '../../utils/constants';\nimport { PanelWrapper, PanelWrapper4Custom } from './styled';\nimport ClipboardPad from '../../utils/ClipboardPad';\nimport { ClipboardPluginConfig, ClipboardPluginLocale } from '../../utils/types';\nimport { isDingDocs } from '../../utils/tester';\n\nexport interface CustomPanelConfig {\n  onChange: (key: string, deleteAtRange?: () => void) => void;\n  options: Array<'card' | 'preview' | 'text'>;\n}\n\nexport interface PastePanelProps {\n  config: ClipboardPluginConfig;\n  controller: Controller;\n  clipboardPad: ClipboardPad;\n  locale?: ClipboardPluginLocale;\n  customPanel?: CustomPanelConfig;\n  getContainer?: () => HTMLElement;\n  // 预处理 markdownFragment\n  beforeInsertMarkdown?: (value: Document) => [Document, any];\n  // 针对预处理后的结果做一些后续处理\n  afterInsertMarkdown?: (data: any) => void;\n}\n\nfunction PastePanel(props: PastePanelProps) {\n  const { controller, clipboardPad, customPanel, locale = {}, config } = props;\n  const { pasteOptions } = locale;\n  const { document } = controller.value;\n  const { _clipboardPanel = '' } = controller.value.data;\n  const updatePosTimer = useRef<number>(0);\n  const [panelVisible, setPanelVisible] = useState(false);\n  const panelRef = useRef<HTMLDivElement>(null);\n  const editorContainer = useZoomContainer() || window.document.body;\n  const getContainer = props.getContainer || (() => editorContainer);\n  const zoom = useZoom();\n  const root = window.document.querySelectorAll(\n    `[data-cangjie-key=\"${document.key}\"]`,\n  )[0];\n\n  const hidePanel = useCallback(() => {\n    setPanelVisible(false);\n    controller.run('onAction', hidePastePanel());\n  }, [controller]);\n\n  const hideCustomPanel = useCallback(() => {\n    setPanelVisible(false);\n    controller.run('onAction', hideCustomPastePanel());\n  }, [controller]);\n\n  // 显示并更新粘贴面板位置\n  const updatePosition = useCallback(() => {\n    try {\n      const pointAndBlock = getPointAndBlockOnSelection(controller);\n      const { endPoint } = pointAndBlock;\n      // 防止找光标位置时报错导致页面crash\n      const rect = domUtils.findCaretPosition(endPoint, 'end', root);\n      if (rect && editorContainer) {\n        const containerRect = editorContainer.getBoundingClientRect();\n        if (!panelVisible) {\n          setPanelVisible(true);\n        }\n        const panelDom = panelRef.current;\n        if (panelDom) {\n          const caret = domUtils.getCaretDom(editorContainer) as HTMLElement;\n          const caretHeight = caret ? caret.offsetHeight : CARET_HEIGHT;\n          panelDom.style.left = `${(rect.clientLeft - containerRect.left) / zoom}px`;\n          panelDom.style.top = `${\n            (rect.clientTop - containerRect.top) / zoom + caretHeight\n          }px`;\n        }\n      } else if (!rect) {\n        // 找不到光标时，将面板隐藏掉，防止再次聚焦时显示位置不准确\n        if (customPanel) {\n          hideCustomPanel();\n        } else {\n          hidePanel();\n        }\n      }\n    } catch (e: any) {\n      logger.error(e);\n    }\n  }, [\n    controller,\n    customPanel,\n    editorContainer,\n    hideCustomPanel,\n    hidePanel,\n    panelVisible,\n    root,\n  ]);\n\n  // 切换粘贴模式\n  const onSwitchMode = useCallback(\n    (mode: string, e) => {\n      e?.preventDefault();\n      e?.stopPropagation();\n      const clipboardData = clipboardPad.getClipboardDataCache();\n      if (!clipboardData || !mode) return;\n      // 删除Decoration组成选区之间的内容，重新插入新模式内\n      controller.run('onAction', deleteAtRange());\n      logger.sum(`paste_mode_${mode}`);\n      let fragment;\n      if (mode === SOURCE_FROMAT) {\n        // 原格式粘贴\n        fragment = clipboardData?.getFragment();\n        if (fragment) {\n          controller.run('onAction', insertFragment(fragment));\n        }\n      } else if (mode === MATCH_FORMAT) {\n        // 匹配粘贴\n        fragment = clipboardData?.getFragment();\n        if (fragment) {\n          controller.run('onAction', insertMatchFragment(fragment));\n        }\n      } else if (mode === TEXT_FORMAT) {\n        // 纯文本粘贴\n        fragment = clipboardData?.getTextFragment();\n        if (fragment) {\n          controller.run('onAction', insertTextFragment(fragment));\n        }\n      } else if (mode === PASTE_MODES.markdownToDoc) {\n        (async () => {\n          const st = Date.now();\n          let frag = await clipboardData?.getMarkdownFragment();\n\n          let extraData = null;\n          if (props.beforeInsertMarkdown) {\n            [frag, extraData] = props.beforeInsertMarkdown(frag);\n          }\n          controller.run('onAction', insertFragment(frag));\n          if (props.afterInsertMarkdown) {\n            props.afterInsertMarkdown(extraData);\n          }\n          logger.perf('markdown_to_value_time', Date.now() - st);\n        })().catch((e) => {\n          logger.error(e);\n          console.error('paste markdown error', e);\n        });\n      }\n    },\n    [clipboardPad, controller],\n  );\n\n  const onCustomSwitchMode = useCallback(\n    (key, e) => {\n      e?.preventDefault();\n      e?.stopPropagation();\n      const clipboardData = clipboardPad.getClipboardDataCache();\n      if (!clipboardData || !customPanel) return;\n      customPanel?.onChange(key, () => {\n        return controller.run('onAction', deleteAtRange());\n      });\n      hideCustomPanel();\n    },\n    [clipboardPad, controller, customPanel, hideCustomPanel],\n  );\n\n  useEffect(() => {\n    if (_clipboardPanel?.startsWith('show')) {\n      // 有粘贴操作时，更新粘贴按钮位置\n      cancelAnimationFrame(updatePosTimer.current);\n      updatePosTimer.current = window.requestAnimationFrame(updatePosition);\n    }\n    return () => {\n      if (updatePosTimer.current) {\n        cancelAnimationFrame(updatePosTimer.current);\n      }\n    };\n  });\n\n  const onClickPastePanel = useCallback((event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  }, []);\n\n  const handleClickOutside = useCallback(\n    (event) => {\n      if (\n        panelRef.current &&\n        !panelRef.current?.contains(event.target) &&\n        !event.target.closest('.ModeMenu')\n      ) {\n        if (customPanel) {\n          hideCustomPanel();\n        } else {\n          hidePanel();\n        }\n      }\n    },\n    [customPanel, hideCustomPanel, hidePanel],\n  );\n\n  useOnClickOutside(panelRef, handleClickOutside, false);\n  \n  const clipboardData = clipboardPad.getClipboardDataCache();\n  const builtinOptions = useMemo(() => {\n    if (customPanel) {\n      return [];\n    }\n\n    const options: Array<string | IOption> = [...DEFAULT_PASTE_MODES];\n    if (clipboardData?.maybeMarkdown) {\n      options.unshift(PASTE_MODES.markdownToDoc);\n    }\n    return options;\n  }, [clipboardData, customPanel]);\n\n  const autoUnfold = useMemo(() => {\n    if (\n      clipboardData &&\n      !isDingDocs(clipboardData) &&\n      clipboardData.types.includes(MIME.TEXT_HTML)\n    ) {\n      return true;\n    }\n    return clipboardData?.maybeMarkdown;\n  }, [clipboardData]);\n\n\n  if (customPanel) {\n    const panel = (\n      <PanelWrapper4Custom ref={panelRef} data-testid=\"pastePanel\">\n        <Panel\n          hideSplitBtton\n          options={customPanel?.options}\n          onChange={onCustomSwitchMode}\n          autoUnfold={clipboardData?.maybeMarkdown}\n          getContainer={getContainer}\n          title={pasteOptions}\n        />\n      </PanelWrapper4Custom>\n    );\n    return panelVisible && editorContainer ? (\n      ReactDOM.createPortal(panel, editorContainer)\n    ) : (<></>);\n  }\n\n  const panel = (\n    <PanelWrapper\n      ref={panelRef}\n      data-testid=\"pastePanel\"\n      onMouseDown={onClickPastePanel}\n    >\n      <Panel\n        options={builtinOptions}\n        onChange={onSwitchMode}\n        title={pasteOptions}\n        autoUnfold={autoUnfold}\n        getContainer={getContainer}\n        shouldSelectFirstItem={false}\n      />\n    </PanelWrapper>\n  );\n\n  return panelVisible && editorContainer ? (\n    ReactDOM.createPortal(panel, editorContainer)\n  ) : (<></>);\n}\n\nexport default PastePanel;\n"],"file":"pastePanel.js"}