"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _everUtils = require("@ali/4ever-utils");

var _weToolbar = require("@ali/we-toolbar");

var _everComponent = require("@ali/4ever-component");

var _actions = require("../actions");

var _constants = require("../../utils/constants");

var _styled = require("./styled");

var _tester = require("../../utils/tester");

const _createElement = /*#__PURE__*/_react.default.createElement;

function PastePanel(props) {
  const {
    controller,
    clipboardPad,
    customPanel,
    locale = {},
    config
  } = props;
  const {
    pasteOptions
  } = locale;
  const {
    document
  } = controller.value;
  const {
    _clipboardPanel = ''
  } = controller.value.data;
  const updatePosTimer = (0, _react.useRef)(0);
  const [panelVisible, setPanelVisible] = (0, _react.useState)(false);
  const panelRef = (0, _react.useRef)(null);
  const editorContainer = (0, _everCangjie.useZoomContainer)() || window.document.body;

  const getContainer = props.getContainer || (() => editorContainer);

  const zoom = (0, _everCangjie.useZoom)();
  const root = window.document.querySelectorAll(`[data-cangjie-key="${document.key}"]`)[0];
  const hidePanel = (0, _react.useCallback)(() => {
    setPanelVisible(false);
    controller.run('onAction', (0, _actions.hidePastePanel)());
  }, [controller]);
  const hideCustomPanel = (0, _react.useCallback)(() => {
    setPanelVisible(false);
    controller.run('onAction', (0, _actions.hideCustomPastePanel)());
  }, [controller]); // 显示并更新粘贴面板位置

  const updatePosition = (0, _react.useCallback)(() => {
    try {
      const pointAndBlock = (0, _everUtils.getPointAndBlockOnSelection)(controller);
      const {
        endPoint
      } = pointAndBlock; // 防止找光标位置时报错导致页面crash

      const rect = _everCangjie.domUtils.findCaretPosition(endPoint, 'end', root);

      if (rect && editorContainer) {
        const containerRect = editorContainer.getBoundingClientRect();

        if (!panelVisible) {
          setPanelVisible(true);
        }

        const panelDom = panelRef.current;

        if (panelDom) {
          const caret = _everCangjie.domUtils.getCaretDom(editorContainer);

          const caretHeight = caret ? caret.offsetHeight : _constants.CARET_HEIGHT;
          panelDom.style.left = `${(rect.clientLeft - containerRect.left) / zoom}px`;
          panelDom.style.top = `${(rect.clientTop - containerRect.top) / zoom + caretHeight}px`;
        }
      } else if (!rect) {
        // 找不到光标时，将面板隐藏掉，防止再次聚焦时显示位置不准确
        if (customPanel) {
          hideCustomPanel();
        } else {
          hidePanel();
        }
      }
    } catch (e) {
      _everLogger.default.error(e);
    }
  }, [controller, customPanel, editorContainer, hideCustomPanel, hidePanel, panelVisible, root]); // 切换粘贴模式

  const onSwitchMode = (0, _react.useCallback)((mode, e) => {
    e?.preventDefault();
    e?.stopPropagation();
    const clipboardData = clipboardPad.getClipboardDataCache();
    if (!clipboardData || !mode) return; // 删除Decoration组成选区之间的内容，重新插入新模式内

    controller.run('onAction', (0, _actions.deleteAtRange)());

    _everLogger.default.sum(`paste_mode_${mode}`);

    let fragment;

    if (mode === _constants.SOURCE_FROMAT) {
      // 原格式粘贴
      fragment = clipboardData?.getFragment();

      if (fragment) {
        controller.run('onAction', (0, _actions.insertFragment)(fragment));
      }
    } else if (mode === _constants.MATCH_FORMAT) {
      // 匹配粘贴
      fragment = clipboardData?.getFragment();

      if (fragment) {
        controller.run('onAction', (0, _actions.insertMatchFragment)(fragment));
      }
    } else if (mode === _constants.TEXT_FORMAT) {
      // 纯文本粘贴
      fragment = clipboardData?.getTextFragment();

      if (fragment) {
        controller.run('onAction', (0, _actions.insertTextFragment)(fragment));
      }
    } else if (mode === _constants.PASTE_MODES.markdownToDoc) {
      (async () => {
        const st = Date.now();
        let frag = await clipboardData?.getMarkdownFragment();
        let extraData = null;

        if (props.beforeInsertMarkdown) {
          [frag, extraData] = props.beforeInsertMarkdown(frag);
        }

        controller.run('onAction', (0, _actions.insertFragment)(frag));

        if (props.afterInsertMarkdown) {
          props.afterInsertMarkdown(extraData);
        }

        _everLogger.default.perf('markdown_to_value_time', Date.now() - st);
      })().catch(e => {
        _everLogger.default.error(e);

        console.error('paste markdown error', e);
      });
    }
  }, [clipboardPad, controller]);
  const onCustomSwitchMode = (0, _react.useCallback)((key, e) => {
    e?.preventDefault();
    e?.stopPropagation();
    const clipboardData = clipboardPad.getClipboardDataCache();
    if (!clipboardData || !customPanel) return;
    customPanel?.onChange(key, () => {
      return controller.run('onAction', (0, _actions.deleteAtRange)());
    });
    hideCustomPanel();
  }, [clipboardPad, controller, customPanel, hideCustomPanel]);
  (0, _react.useEffect)(() => {
    if (_clipboardPanel?.startsWith('show')) {
      // 有粘贴操作时，更新粘贴按钮位置
      cancelAnimationFrame(updatePosTimer.current);
      updatePosTimer.current = window.requestAnimationFrame(updatePosition);
    }

    return () => {
      if (updatePosTimer.current) {
        cancelAnimationFrame(updatePosTimer.current);
      }
    };
  });
  const onClickPastePanel = (0, _react.useCallback)(event => {
    event.preventDefault();
    event.stopPropagation();
  }, []);
  const handleClickOutside = (0, _react.useCallback)(event => {
    if (panelRef.current && !panelRef.current?.contains(event.target) && !event.target.closest('.ModeMenu')) {
      if (customPanel) {
        hideCustomPanel();
      } else {
        hidePanel();
      }
    }
  }, [customPanel, hideCustomPanel, hidePanel]);
  (0, _everComponent.useOnClickOutside)(panelRef, handleClickOutside, false);
  const clipboardData = clipboardPad.getClipboardDataCache();
  const builtinOptions = (0, _react.useMemo)(() => {
    if (customPanel) {
      return [];
    }

    const options = [..._constants.DEFAULT_PASTE_MODES];

    if (clipboardData?.maybeMarkdown) {
      options.unshift(_constants.PASTE_MODES.markdownToDoc);
    }

    return options;
  }, [clipboardData, customPanel]);
  const autoUnfold = (0, _react.useMemo)(() => {
    if (clipboardData && !(0, _tester.isDingDocs)(clipboardData) && clipboardData.types.includes(_everUtils.mimeTypes.TEXT_HTML)) {
      return true;
    }

    return clipboardData?.maybeMarkdown;
  }, [clipboardData]);

  if (customPanel) {
    const panel = /*#__PURE__*/_createElement(_styled.PanelWrapper4Custom, {
      ref: panelRef,
      "data-testid": "pastePanel"
    }, /*#__PURE__*/_createElement(_weToolbar.PastePanel, {
      hideSplitBtton: true,
      options: customPanel?.options,
      onChange: onCustomSwitchMode,
      autoUnfold: clipboardData?.maybeMarkdown,
      getContainer: getContainer,
      title: pasteOptions
    }));

    return panelVisible && editorContainer ? /*#__PURE__*/_reactDom.default.createPortal(panel, editorContainer) : /*#__PURE__*/_createElement(_react.default.Fragment, null);
  }

  const panel = /*#__PURE__*/_createElement(_styled.PanelWrapper, {
    ref: panelRef,
    "data-testid": "pastePanel",
    onMouseDown: onClickPastePanel
  }, /*#__PURE__*/_createElement(_weToolbar.PastePanel, {
    options: builtinOptions,
    onChange: onSwitchMode,
    title: pasteOptions,
    autoUnfold: autoUnfold,
    getContainer: getContainer,
    shouldSelectFirstItem: false
  }));

  return panelVisible && editorContainer ? /*#__PURE__*/_reactDom.default.createPortal(panel, editorContainer) : /*#__PURE__*/_createElement(_react.default.Fragment, null);
}

var _default = PastePanel;
exports.default = _default;
//# sourceMappingURL=pastePanel.js.map