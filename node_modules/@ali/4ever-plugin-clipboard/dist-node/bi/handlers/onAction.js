"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnAction;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../actions");

var _insertFragmentByClipboard = require("../commands/insertFragmentByClipboard");

var _setDecorations = _interopRequireDefault(require("../commands/setDecorations"));

var _deleteAtRange = _interopRequireDefault(require("../commands/deleteAtRange"));

var _hidePasteButton = _interopRequireDefault(require("../utils/hidePasteButton"));

var _getMatchFragment = _interopRequireDefault(require("../utils/getMatchFragment"));

var _getMarksFragment = _interopRequireDefault(require("../utils/getMarksFragment"));

var _hideCustomPasteButton = _interopRequireDefault(require("../utils/hideCustomPasteButton"));

var _onCangjiePasteFail = _interopRequireDefault(require("./onCangjiePasteFail"));

var _constants = require("../../utils/constants");

function createOnAction(config) {
  const {
    onError
  } = config || {};
  return function onAction(action, controller, next) {
    const {
      payload = {},
      type
    } = action;

    if (type === _actions.CLIPBOARD_INSERT_FRAGMENT) {
      const {
        fragment
      } = payload;
      return (0, _insertFragmentByClipboard.insertFragmentByClipboard)(controller, fragment);
    }

    if (type === _actions.CLIPBOARD_SET_DECORATIONS) {
      const {
        decoration
      } = payload;
      return (0, _setDecorations.default)(controller, decoration);
    }

    if (type === _actions.CLIPBOARD_DEL_SELECTION) {
      return (0, _deleteAtRange.default)(controller);
    }

    if (type === _actions.CLIPBOARD_HIDE_PASTEPANEL) {
      return (0, _hidePasteButton.default)(controller);
    }

    if (type === _actions.CLIPBOARD_HIDE_CUSTOM_PASTEPANEL) {
      return (0, _hideCustomPasteButton.default)(controller);
    }

    if (type === _actions.CLIPBOARD_MATCH_MODE) {
      const fragment = (0, _getMatchFragment.default)(controller, payload.fragment);
      return (0, _insertFragmentByClipboard.insertFragmentByClipboard)(controller, fragment);
    }

    if (type === _actions.CLIPBOARD_TEXT_MODE) {
      const fragment = (0, _getMarksFragment.default)(controller, payload.fragment);
      return (0, _insertFragmentByClipboard.insertFragmentByClipboard)(controller, fragment);
    }

    if (type === _everCangjie.ContextMenu.ACTION_PASTE_FAIL) {
      const {
        isShortcut,
        error = new Error(_constants.ClipboardErrorEnum.CUT_FAILED)
      } = payload;

      if (!isShortcut && !_everCangjie.environment.IS_MOBILE) {
        // PC 端右键粘贴失败, 建议使用快捷键
        (0, _onCangjiePasteFail.default)(config?.locale);
      } else if (onError) {
        onError(_constants.ClipboardErrorEnum.CUT_FAILED, error);
      }
    }

    if (type === _everCangjie.ContextMenu.ACTION_COPY_FAIL) {
      const {
        error = new Error(_constants.ClipboardErrorEnum.COPY_FAILED)
      } = payload;

      if (onError) {
        onError(_constants.ClipboardErrorEnum.COPY_FAILED, error);
      }
    }

    if (type === _everCangjie.ContextMenu.ACTION_CUT_FAIL) {
      const {
        error = new Error(_constants.ClipboardErrorEnum.CUT_FAILED)
      } = payload;

      if (onError) {
        onError(_constants.ClipboardErrorEnum.CUT_FAILED, error);
      }
    }

    return next();
  };
}
//# sourceMappingURL=onAction.js.map