{"version":3,"sources":["../../../../src/bi/handlers/onAction.ts"],"names":["createOnAction","config","onError","onAction","action","controller","next","payload","type","CLIPBOARD_INSERT_FRAGMENT","fragment","CLIPBOARD_SET_DECORATIONS","decoration","CLIPBOARD_DEL_SELECTION","CLIPBOARD_HIDE_PASTEPANEL","CLIPBOARD_HIDE_CUSTOM_PASTEPANEL","CLIPBOARD_MATCH_MODE","CLIPBOARD_TEXT_MODE","ContextMenu","ACTION_PASTE_FAIL","isShortcut","error","Error","ClipboardErrorEnum","CUT_FAILED","environment","IS_MOBILE","locale","ACTION_COPY_FAIL","COPY_FAILED","ACTION_CUT_FAIL"],"mappings":";;;;;;;;;AAAA;;AACA;;AASA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEe,SAASA,cAAT,CAAwBC,MAAxB,EAAwD;AACrE,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAAM,IAAI,EAA9B;AACA,SAAO,SAASE,QAAT,CAAkBC,MAAlB,EAAkCC,UAAlC,EAA0DC,IAA1D,EAA0E;AAC/E,UAAM;AAAEC,MAAAA,OAAO,GAAG,EAAZ;AAAgBC,MAAAA;AAAhB,QAAyBJ,MAA/B;;AACA,QAAII,IAAI,KAAKC,kCAAb,EAAwC;AACtC,YAAM;AAAEC,QAAAA;AAAF,UAAeH,OAArB;AACA,aAAO,0DAA0BF,UAA1B,EAAsCK,QAAtC,CAAP;AACD;;AACD,QAAIF,IAAI,KAAKG,kCAAb,EAAwC;AACtC,YAAM;AAAEC,QAAAA;AAAF,UAAiBL,OAAvB;AACA,aAAO,6BAAeF,UAAf,EAA2BO,UAA3B,CAAP;AACD;;AAED,QAAIJ,IAAI,KAAKK,gCAAb,EAAsC;AACpC,aAAO,4BAAcR,UAAd,CAAP;AACD;;AAED,QAAIG,IAAI,KAAKM,kCAAb,EAAwC;AACtC,aAAO,8BAAeT,UAAf,CAAP;AACD;;AAED,QAAIG,IAAI,KAAKO,yCAAb,EAA+C;AAC7C,aAAO,oCAAsBV,UAAtB,CAAP;AACD;;AAED,QAAIG,IAAI,KAAKQ,6BAAb,EAAmC;AACjC,YAAMN,QAAQ,GAAG,+BAAiBL,UAAjB,EAA6BE,OAAO,CAACG,QAArC,CAAjB;AACA,aAAO,0DAA0BL,UAA1B,EAAsCK,QAAtC,CAAP;AACD;;AAED,QAAIF,IAAI,KAAKS,4BAAb,EAAkC;AAChC,YAAMP,QAAQ,GAAG,+BAAiBL,UAAjB,EAA6BE,OAAO,CAACG,QAArC,CAAjB;AACA,aAAO,0DAA0BL,UAA1B,EAAsCK,QAAtC,CAAP;AACD;;AAED,QAAIF,IAAI,KAAKU,yBAAYC,iBAAzB,EAA4C;AAC1C,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA,KAAK,GAAG,IAAIC,KAAJ,CAAUC,8BAAmBC,UAA7B;AAAtB,UAAmEjB,OAAzE;;AACA,UAAI,CAACa,UAAD,IAAe,CAACK,yBAAYC,SAAhC,EAA2C;AACzC;AACA,yCAAmBzB,MAAM,EAAE0B,MAA3B;AACD,OAHD,MAGO,IAAIzB,OAAJ,EAAa;AAClBA,QAAAA,OAAO,CAACqB,8BAAmBC,UAApB,EAAgCH,KAAhC,CAAP;AACD;AACF;;AAED,QAAIb,IAAI,KAAKU,yBAAYU,gBAAzB,EAA2C;AACzC,YAAM;AAAEP,QAAAA,KAAK,GAAG,IAAIC,KAAJ,CAAUC,8BAAmBM,WAA7B;AAAV,UAAwDtB,OAA9D;;AACA,UAAIL,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACqB,8BAAmBM,WAApB,EAAiCR,KAAjC,CAAP;AACD;AACF;;AAED,QAAIb,IAAI,KAAKU,yBAAYY,eAAzB,EAA0C;AACxC,YAAM;AAAET,QAAAA,KAAK,GAAG,IAAIC,KAAJ,CAAUC,8BAAmBC,UAA7B;AAAV,UAAuDjB,OAA7D;;AACA,UAAIL,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACqB,8BAAmBC,UAApB,EAAgCH,KAAhC,CAAP;AACD;AACF;;AAED,WAAOf,IAAI,EAAX;AACD,GA1DD;AA2DD","sourcesContent":["import { Controller, Action, ContextMenu, environment } from '@ali/4ever-cangjie';\nimport {\n  CLIPBOARD_INSERT_FRAGMENT,\n  CLIPBOARD_SET_DECORATIONS,\n  CLIPBOARD_DEL_SELECTION,\n  CLIPBOARD_HIDE_PASTEPANEL,\n  CLIPBOARD_MATCH_MODE,\n  CLIPBOARD_TEXT_MODE,\n  CLIPBOARD_HIDE_CUSTOM_PASTEPANEL,\n} from '../actions';\nimport { insertFragmentByClipboard } from '../commands/insertFragmentByClipboard';\nimport setDecorations from '../commands/setDecorations';\nimport deleteAtRange from '../commands/deleteAtRange';\nimport hidePastePanel from '../utils/hidePasteButton';\nimport getMatchFragment from '../utils/getMatchFragment';\nimport getMarksFragment from '../utils/getMarksFragment';\nimport hideCustomPasteButton from '../utils/hideCustomPasteButton';\nimport onCangjiePasteFail from './onCangjiePasteFail';\nimport { ClipboardPluginConfig } from '../../utils/types';\nimport { ClipboardErrorEnum } from '../../utils/constants';\n\nexport default function createOnAction(config?: ClipboardPluginConfig) {\n  const { onError } = config || {};\n  return function onAction(action: Action, controller: Controller, next: Function) {\n    const { payload = {}, type } = action;\n    if (type === CLIPBOARD_INSERT_FRAGMENT) {\n      const { fragment } = payload;\n      return insertFragmentByClipboard(controller, fragment);\n    }\n    if (type === CLIPBOARD_SET_DECORATIONS) {\n      const { decoration } = payload;\n      return setDecorations(controller, decoration);\n    }\n\n    if (type === CLIPBOARD_DEL_SELECTION) {\n      return deleteAtRange(controller);\n    }\n\n    if (type === CLIPBOARD_HIDE_PASTEPANEL) {\n      return hidePastePanel(controller);\n    }\n\n    if (type === CLIPBOARD_HIDE_CUSTOM_PASTEPANEL) {\n      return hideCustomPasteButton(controller);\n    }\n\n    if (type === CLIPBOARD_MATCH_MODE) {\n      const fragment = getMatchFragment(controller, payload.fragment);\n      return insertFragmentByClipboard(controller, fragment);\n    }\n\n    if (type === CLIPBOARD_TEXT_MODE) {\n      const fragment = getMarksFragment(controller, payload.fragment);\n      return insertFragmentByClipboard(controller, fragment);\n    }\n\n    if (type === ContextMenu.ACTION_PASTE_FAIL) {\n      const { isShortcut, error = new Error(ClipboardErrorEnum.CUT_FAILED) } = payload;\n      if (!isShortcut && !environment.IS_MOBILE) {\n        // PC 端右键粘贴失败, 建议使用快捷键\n        onCangjiePasteFail(config?.locale);\n      } else if (onError) {\n        onError(ClipboardErrorEnum.CUT_FAILED, error);\n      }\n    }\n\n    if (type === ContextMenu.ACTION_COPY_FAIL) {\n      const { error = new Error(ClipboardErrorEnum.COPY_FAILED) } = payload;\n      if (onError) {\n        onError(ClipboardErrorEnum.COPY_FAILED, error);\n      }\n    }\n\n    if (type === ContextMenu.ACTION_CUT_FAIL) {\n      const { error = new Error(ClipboardErrorEnum.CUT_FAILED) } = payload;\n      if (onError) {\n        onError(ClipboardErrorEnum.CUT_FAILED, error);\n      }\n    }\n\n    return next();\n  };\n}\n"],"file":"onAction.js"}