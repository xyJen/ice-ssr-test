"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = copyNodes;

var _everCangjie = require("@ali/4ever-cangjie");

var _clipboardManager = _interopRequireDefault(require("@ali/clipboard-manager"));

var _getHtmlFromValue = _interopRequireDefault(require("./getHtmlFromValue"));

var _canCopyOrCut = _interopRequireDefault(require("./canCopyOrCut"));

const {
  MIME_TYPES
} = _everCangjie.constants;

function normalizeNode(node) {
  if (!node || !_everCangjie.Block.isBlock(node)) {
    return _everCangjie.Block.create({
      type: 'paragraph',
      nodes: [node]
    });
  }

  return node;
}

function copyNodes(maybeNodes = [], serializer, cb) {
  const nodes = Array.isArray(maybeNodes) ? maybeNodes : [maybeNodes]; // @ts-ignore

  const fragment = _everCangjie.Document.create({
    nodes: nodes.map(normalizeNode)
  });

  const clip = new _clipboardManager.default();

  if (!(0, _canCopyOrCut.default)(fragment)) {
    return Promise.reject();
  }

  const value = _everCangjie.Value.create({
    document: fragment
  });

  let result = {
    [MIME_TYPES.FRAGMENT]: _everCangjie.transferUtils.encodeFragment(fragment),
    [MIME_TYPES.HTML]: (0, _getHtmlFromValue.default)(serializer, value),
    [MIME_TYPES.TEXT]: serializer.valueToText(value)
  };

  if (cb) {
    result = cb(result);
  }

  return clip?.write(result);
}
//# sourceMappingURL=copyNodes.js.map