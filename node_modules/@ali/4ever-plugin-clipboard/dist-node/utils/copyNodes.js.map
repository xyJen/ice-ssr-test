{"version":3,"sources":["../../../src/utils/copyNodes.ts"],"names":["MIME_TYPES","constants","normalizeNode","node","Block","isBlock","create","type","nodes","copyNodes","maybeNodes","serializer","cb","Array","isArray","fragment","Document","map","clip","ClipboardManager","Promise","reject","value","Value","document","result","FRAGMENT","transferUtils","encodeFragment","HTML","TEXT","valueToText","write"],"mappings":";;;;;;;;;AAAA;;AASA;;AACA;;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,sBAAvB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA0C;AACxC,MAAI,CAACA,IAAD,IAAS,CAACC,mBAAMC,OAAN,CAAcF,IAAd,CAAd,EAAmC;AACjC,WAAOC,mBAAME,MAAN,CAAa;AAClBC,MAAAA,IAAI,EAAE,WADY;AAElBC,MAAAA,KAAK,EAAE,CAACL,IAAD;AAFW,KAAb,CAAP;AAID;;AACD,SAAOA,IAAP;AACD;;AAEc,SAASM,SAAT,CACbC,UAAyB,GAAG,EADf,EAEbC,UAFa,EAGbC,EAHa,EAIb;AACA,QAAMJ,KAAK,GAAGK,KAAK,CAACC,OAAN,CAAcJ,UAAd,IAA4BA,UAA5B,GAAyC,CAACA,UAAD,CAAvD,CADA,CAEA;;AACA,QAAMK,QAAQ,GAAGC,sBAASV,MAAT,CAAgB;AAAEE,IAAAA,KAAK,EAAEA,KAAK,CAACS,GAAN,CAAUf,aAAV;AAAT,GAAhB,CAAjB;;AACA,QAAMgB,IAAI,GAAG,IAAIC,yBAAJ,EAAb;;AACA,MAAI,CAAC,2BAAaJ,QAAb,CAAL,EAA6B;AAC3B,WAAOK,OAAO,CAACC,MAAR,EAAP;AACD;;AACD,QAAMC,KAAK,GAAGC,mBAAMjB,MAAN,CAAa;AAAEkB,IAAAA,QAAQ,EAAET;AAAZ,GAAb,CAAd;;AACA,MAAIU,MAAM,GAAG;AACX,KAACzB,UAAU,CAAC0B,QAAZ,GAAuBC,2BAAcC,cAAd,CAA6Bb,QAA7B,CADZ;AAEX,KAACf,UAAU,CAAC6B,IAAZ,GAAmB,+BAAiBlB,UAAjB,EAA6BW,KAA7B,CAFR;AAGX,KAACtB,UAAU,CAAC8B,IAAZ,GAAmBnB,UAAU,CAACoB,WAAX,CAAuBT,KAAvB;AAHR,GAAb;;AAKA,MAAIV,EAAJ,EAAQ;AACNa,IAAAA,MAAM,GAAGb,EAAE,CAACa,MAAD,CAAX;AACD;;AACD,SAAOP,IAAI,EAAEc,KAAN,CAAYP,MAAZ,CAAP;AACD","sourcesContent":["import {\n  Block,\n  BlockChild,\n  Value,\n  Document,\n  Node,\n  transferUtils,\n  constants,\n} from '@ali/4ever-cangjie';\nimport ClipboardManager from '@ali/clipboard-manager';\nimport getHtmlFromValue from './getHtmlFromValue';\nimport canCopyOrCut from './canCopyOrCut';\n\nconst { MIME_TYPES } = constants;\n\nfunction normalizeNode(node: Node): Block {\n  if (!node || !Block.isBlock(node)) {\n    return Block.create({\n      type: 'paragraph',\n      nodes: [node as BlockChild],\n    });\n  }\n  return node;\n}\n\nexport default function copyNodes(\n  maybeNodes: Node[] | Node = [],\n  serializer,\n  cb?: Function,\n) {\n  const nodes = Array.isArray(maybeNodes) ? maybeNodes : [maybeNodes];\n  // @ts-ignore\n  const fragment = Document.create({ nodes: nodes.map(normalizeNode) });\n  const clip = new ClipboardManager();\n  if (!canCopyOrCut(fragment)) {\n    return Promise.reject();\n  }\n  const value = Value.create({ document: fragment });\n  let result = {\n    [MIME_TYPES.FRAGMENT]: transferUtils.encodeFragment(fragment),\n    [MIME_TYPES.HTML]: getHtmlFromValue(serializer, value),\n    [MIME_TYPES.TEXT]: serializer.valueToText(value),\n  };\n  if (cb) {\n    result = cb(result);\n  }\n  return clip?.write(result);\n}\n"],"file":"copyNodes.js"}