{"version":3,"sources":["../../../src/utils/ClipboardPad.ts"],"names":["clipboardPadMap","Map","currentClipboardData","ClipboardPad","getClipboardPad","conf","key","config","serializer","clipboardPadCache","get","clipboardPad","createClipboardPad","set","constructor","models","getClipboardData","event","args","clipboardData","isEqual","ClipboardData","getClipboardDataCache","copyFragment","fragment","preventDefault","value","Value","create","document","text","valueToText","html","encoded","transferUtils","encodeFragment","setData","mimeTypes","TEXT_PLAIN","TEXT_HTML","APPLICATION_CANGJIE_FRAGMENT","initPluginModels","controller","getPluginModels","pidStr","model","keys","infoMap","handlers","flatModels","forEach","info","infoKey","klass","type","infoData","data","oldValue","Array","isArray","concat","getCachedClipboardPad"],"mappings":"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","sourcesContent":["import { CangjieClipboardEvent, Controller, Document, transferUtils, Value } from '@ali/4ever-cangjie';\nimport { flatten } from 'lodash-es';\nimport { ClipboardPluginConfig, ModelsMap } from './types';\nimport ClipboardData from './ClipboardData';\nimport { isEqual } from 'lodash-es';\nimport { toHash, mimeTypes }  from '@ali/4ever-utils';\nimport getHtmlFromValue from './getHtmlFromValue';\n\n/**\n * 剪切板实例缓存缓存\n */\nconst clipboardPadMap = new Map<string, ClipboardPad>();\n\n/**\n * 当前的剪切事件\n * @description 我们假设同一次剪切板时间只能被一个编辑器实例消费，所以目前可能存在的情况是 ClipboardPad 是多实例，但是\n * 读取到的 ClipboardData 是单实例的。\n * TODO: 后续需要考虑在 Plugin 层如何设计一个多实例的配置\n */\nlet currentClipboardData: ClipboardData | null = null;\n\nclass ClipboardPad {\n  static getCachedClipboardPad = (key = 'default') => {\n    return clipboardPadMap.get(key) as ClipboardPad;\n  }\n  /**\n   * 获得一个剪切板，使用配置数据作为 union 单位，针对不同的 config 实例返回不同的剪切板\n   * @param config 编辑器的配置\n   */\n  static getClipboardPad(conf: ClipboardPluginConfig, key = 'default') {\n\n    // 默认使用 mo 的正反序列化\n    const config = {\n      ...conf,\n      serializer: conf.serializer,\n    };\n\n    const clipboardPadCache = clipboardPadMap.get(key);\n    if (clipboardPadCache) {\n      if (isEqual(clipboardPadCache.config, config)) {\n        return clipboardPadCache;\n      }\n    }\n    const clipboardPad = ClipboardPad.createClipboardPad(config);\n    if (key) {\n      clipboardPadMap.set(key, clipboardPad);\n    }\n    return clipboardPad;\n  }\n\n  static createClipboardPad(config: ClipboardPluginConfig) {\n    return new ClipboardPad(config);\n  }\n\n  /**\n   * 剪切板配置\n   */\n  config: ClipboardPluginConfig;\n\n  models?: ModelsMap;\n\n  private constructor(config: ClipboardPluginConfig) {\n    this.config = config;\n  }\n\n  /**\n   * 读取剪切板数据，相同的 event 会读取到同一个实例\n   * @param event\n   */\n  getClipboardData(event: ClipboardEvent | CangjieClipboardEvent) {\n    const args = [\n      event.clipboardData as DataTransfer,\n      this.config,\n      this.models,\n    ];\n    // @ts-ignore\n    if (currentClipboardData?.isEqual(...args)) {\n      return currentClipboardData;\n    }\n    // @ts-ignore\n    currentClipboardData = new ClipboardData(...args);\n    return currentClipboardData;\n  }\n\n  /**\n   * 读取剪切板缓存数据，切换不同粘贴模式下使用\n   * @param event\n   */\n  getClipboardDataCache() {\n    return currentClipboardData;\n  }\n\n  /**\n   * 拷贝一个 fragment\n   * @param event 拷贝事件\n   * @param fragment\n   */\n  copyFragment(event: ClipboardEvent, fragment: Document) {\n    const { clipboardData } = event;\n    if (!clipboardData) {\n      return;\n    }\n    event.preventDefault();\n    const { serializer } = this.config;\n    const value = Value.create({\n      document: fragment,\n    });\n    const text = serializer.valueToText(value);\n    const html = getHtmlFromValue(serializer, value);\n\n    const encoded = transferUtils.encodeFragment(fragment);\n\n    clipboardData.setData(mimeTypes.TEXT_PLAIN, text);\n    clipboardData.setData(mimeTypes.TEXT_HTML, html);\n    clipboardData.setData(mimeTypes.APPLICATION_CANGJIE_FRAGMENT, encoded);\n  }\n\n  initPluginModels(controller: Controller) {\n    const models = this.getPluginModels(controller);\n    let pidStr = '';\n    for (const model of models.keys()) {\n      pidStr += model;\n    }\n    models.set('controllerPid', toHash(pidStr));\n    this.models = models;\n  }\n\n  /**\n   * 获取所有插件内容的models map集合\n   * @param\n   */\n  getPluginModels(controller: Controller): ModelsMap {\n    const infoMap = new Map();\n    // @ts-ignore\n    const { models } = controller.handlers;\n    if (models) {\n      const flatModels = flatten(models);\n      flatModels.forEach((info) => {\n        if (info) {\n          // @ts-ignore\n          const infoKey = `${info.klass}_${info.type}`;\n          // @ts-ignore\n          const infoData = info.data || {};\n          const oldValue = infoMap.get(infoKey);\n          if (oldValue) {\n            if (Array.isArray(oldValue)) {\n              infoMap.set(infoKey, oldValue.concat(infoData));\n            } else {\n              infoMap.set(infoKey, [oldValue, infoData]);\n            }\n          } else {\n            // @ts-ignore\n            infoMap.set(infoKey, [infoData]);\n          }\n        }\n      });\n    }\n    return infoMap;\n  }\n}\n\nexport default ClipboardPad;\n"],"file":"ClipboardPad.js"}