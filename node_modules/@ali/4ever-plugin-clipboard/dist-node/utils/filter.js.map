{"version":3,"sources":["../../../src/utils/filter.ts"],"names":["filterFragment","fragment","rules","block","inline","pruneMap","Map","forEachDescendant","node","Block","isBlock","includes","excludes","test","type","set","key","Inline","isInline","result","forEach","_","path","getPath","removeNode"],"mappings":";;;;;;;AACA;;AADA;;AAIA;AACA;AACA;AACA;AACA;AACO,SAASA,cAAT,CAAwBC,QAAxB,EAA4CC,KAA5C,EAA8E;AACnF,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBF,KAA1B;AACA,QAAMG,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AACAL,EAAAA,QAAQ,CAACM,iBAAT,CAA4BC,IAAD,IAAU;AACnC;AACA,QAAIC,mBAAMC,OAAN,CAAcF,IAAd,KAAuBL,KAA3B,EAAkC;AAChC,YAAM;AAAEQ,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAyBT,KAA/B;;AACA,UAAIQ,QAAQ,IAAI,CAACA,QAAQ,CAACE,IAAT,CAAcL,IAAI,CAACM,IAAnB,CAAjB,EAA2C;AACzCT,QAAAA,QAAQ,CAACU,GAAT,CAAaP,IAAI,CAACQ,GAAlB,EAAuB,IAAvB;AACD;;AACD,UAAIJ,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcL,IAAI,CAACM,IAAnB,CAAhB,EAA0C;AACxCT,QAAAA,QAAQ,CAACU,GAAT,CAAaP,IAAI,CAACQ,GAAlB,EAAuB,IAAvB;AACD;AACF,KAVkC,CAWnC;;;AACA,QAAIC,oBAAOC,QAAP,CAAgBV,IAAhB,KAAyBJ,MAA7B,EAAqC;AACnC,YAAM;AAAEO,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAyBR,MAA/B;;AACA,UAAIO,QAAQ,IAAI,CAACA,QAAQ,CAACE,IAAT,CAAcL,IAAI,CAACM,IAAnB,CAAjB,EAA2C;AACzCT,QAAAA,QAAQ,CAACU,GAAT,CAAaP,IAAI,CAACQ,GAAlB,EAAuB,IAAvB;AACD;;AACD,UAAIJ,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcL,IAAI,CAACM,IAAnB,CAAhB,EAA0C;AACxCT,QAAAA,QAAQ,CAACU,GAAT,CAAaP,IAAI,CAACQ,GAAlB,EAAuB,IAAvB;AACD;AACF;AACF,GArBD;AAsBA,MAAIG,MAAM,GAAGlB,QAAb;AACAI,EAAAA,QAAQ,CAACe,OAAT,CAAiB,CAACC,CAAD,EAAIL,GAAJ,KAAY;AAC3B,UAAMM,IAAI,GAAGH,MAAM,CAACI,OAAP,CAAeP,GAAf,CAAb;;AACA,QAAIM,IAAJ,EAAU;AACRH,MAAAA,MAAM,GAAGA,MAAM,CAACK,UAAP,CAAkBF,IAAlB,CAAT;AACD;AACF,GALD;AAMA,SAAOH,MAAP;AACD","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { Document, Block, Inline } from '@ali/4ever-cangjie';\nimport { ClipboardFilter } from './types';\n\n/**\n * 过滤 fragment 内容\n * @param fragment\n * @param rules\n */\nexport function filterFragment(fragment: Document, rules: ClipboardFilter): Document {\n  const { block, inline } = rules;\n  const pruneMap = new Map<string, boolean>();\n  fragment.forEachDescendant((node) => {\n    // 过滤 block 节点\n    if (Block.isBlock(node) && block) {\n      const { includes, excludes } = block;\n      if (includes && !includes.test(node.type)) {\n        pruneMap.set(node.key, true);\n      }\n      if (excludes && excludes.test(node.type)) {\n        pruneMap.set(node.key, true);\n      }\n    }\n    // 过滤 inline 节点\n    if (Inline.isInline(node) && inline) {\n      const { includes, excludes } = inline;\n      if (includes && !includes.test(node.type)) {\n        pruneMap.set(node.key, true);\n      }\n      if (excludes && excludes.test(node.type)) {\n        pruneMap.set(node.key, true);\n      }\n    }\n  });\n  let result = fragment;\n  pruneMap.forEach((_, key) => {\n    const path = result.getPath(key);\n    if (path) {\n      result = result.removeNode(path);\n    }\n  });\n  return result;\n}\n"],"file":"filter.js"}