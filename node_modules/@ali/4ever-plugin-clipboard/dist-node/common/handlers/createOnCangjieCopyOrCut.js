"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnCangjieCopyOrCut;

var _everCangjie = require("@ali/4ever-cangjie");

var _ClipboardPad = _interopRequireDefault(require("../../utils/ClipboardPad"));

var _dealWithFragmentOnCopy = require("../../bi/utils/dealWithFragmentOnCopy");

var _getHtmlFromValue = _interopRequireDefault(require("../../utils/getHtmlFromValue"));

var _canCopyOrCut = _interopRequireDefault(require("../../utils/canCopyOrCut"));

var _getImageSource = _interopRequireDefault(require("../../bi/utils/getImageSource"));

var _constants = require("../../utils/constants");

var _writeClipboardDataToHtml = _interopRequireDefault(require("../../bi/utils/writeClipboardDataToHtml"));

var _getAllCustomClipboardData = _interopRequireDefault(require("../../bi/utils/getAllCustomClipboardData"));

const {
  MIME_TYPES
} = _everCangjie.constants;

function createOnCangjieCopyOrCut(clipboard) {
  return function onCangjieCopyOrCut(event, controller, next) {
    if (!event.clipboardData) {
      return next();
    }

    const clipboardPad = _ClipboardPad.default.getClipboardPad({
      serializer: controller.serializer,
      schema: controller.strictSchema,
      ...clipboard
    }, clipboard.key);

    const {
      document,
      selection
    } = controller.value;
    const encodedFragment = event.clipboardData.getData(MIME_TYPES.FRAGMENT); // 为了保障拷贝正常使用，这里 catch 一下，防止数据层报错

    let fragment = (0, _dealWithFragmentOnCopy.dealWithFragmentOnCopy)({
      fragment: encodedFragment ? _everCangjie.transferUtils.decodeFragment(encodedFragment) : document.getFragmentAtRange(selection),
      controller
    });

    if (fragment?.data) {
      fragment = fragment.set('data', { ...fragment.data,
        copyFrom: clipboardPad.models?.get('controllerPid')
      });
    }

    if (!(0, _canCopyOrCut.default)(fragment) && selection.isCollapsed) {
      return;
    }

    const mediaUrl = (0, _getImageSource.default)(fragment);

    if (mediaUrl) {
      event.clipboardData.setData(_constants.FILE_IMG_TYPE, mediaUrl);
    }

    const value = _everCangjie.Value.create({
      document: fragment
    });

    const html = (0, _writeClipboardDataToHtml.default)((0, _getHtmlFromValue.default)(clipboardPad.config.serializer, value), [...(0, _getAllCustomClipboardData.default)(event.clipboardData), ...(0, _getAllCustomClipboardData.default)(event.nativeEvent?.clipboardData)]);
    event.clipboardData.setData(MIME_TYPES.FRAGMENT, _everCangjie.transferUtils.encodeFragment(fragment)).setData(MIME_TYPES.HTML, html).setData(MIME_TYPES.TEXT, clipboardPad.config.serializer.valueToText(value));
    return next();
  };
}
//# sourceMappingURL=createOnCangjieCopyOrCut.js.map