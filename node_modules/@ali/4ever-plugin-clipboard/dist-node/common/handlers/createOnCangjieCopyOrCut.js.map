{"version":3,"sources":["../../../../src/common/handlers/createOnCangjieCopyOrCut.ts"],"names":["MIME_TYPES","constants","createOnCangjieCopyOrCut","clipboard","onCangjieCopyOrCut","event","controller","next","clipboardData","clipboardPad","ClipboardPad","getClipboardPad","serializer","schema","strictSchema","key","document","selection","value","encodedFragment","getData","FRAGMENT","fragment","transferUtils","decodeFragment","getFragmentAtRange","data","set","copyFrom","models","get","isCollapsed","mediaUrl","setData","FILE_IMG_TYPE","Value","create","html","config","nativeEvent","encodeFragment","HTML","TEXT","valueToText"],"mappings":";;;;;;;;;AAAA;;AAOA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,sBAAvB;;AAGe,SAASC,wBAAT,CACbC,SADa,EAEY;AACzB,SAAO,SAASC,kBAAT,CACLC,KADK,EAELC,UAFK,EAGLC,IAHK,EAIL;AACA,QAAI,CAACF,KAAK,CAACG,aAAX,EAA0B;AACxB,aAAOD,IAAI,EAAX;AACD;;AAED,UAAME,YAAY,GAAGC,sBAAaC,eAAb,CAA6B;AAChDC,MAAAA,UAAU,EAAEN,UAAU,CAACM,UADyB;AAEhDC,MAAAA,MAAM,EAAEP,UAAU,CAACQ,YAF6B;AAGhD,SAAGX;AAH6C,KAA7B,EAIlBA,SAAS,CAACY,GAJQ,CAArB;;AAMA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BX,UAAU,CAACY,KAA3C;AACA,UAAMC,eAAe,GAAGd,KAAK,CAACG,aAAN,CAAoBY,OAApB,CAA4BpB,UAAU,CAACqB,QAAvC,CAAxB,CAZA,CAaA;;AACA,QAAIC,QAAQ,GAAG,oDAAuB;AACpCA,MAAAA,QAAQ,EAAEH,eAAe,GACrBI,2BAAcC,cAAd,CAA6BL,eAA7B,CADqB,GAErBH,QAAQ,CAACS,kBAAT,CAA4BR,SAA5B,CAHgC;AAIpCX,MAAAA;AAJoC,KAAvB,CAAf;;AAMA,QAAIgB,QAAQ,EAAEI,IAAd,EAAoB;AAClBJ,MAAAA,QAAQ,GAAGA,QAAQ,CAACK,GAAT,CAAa,MAAb,EAAqB,EAC9B,GAAGL,QAAQ,CAACI,IADkB;AAE9BE,QAAAA,QAAQ,EAAEnB,YAAY,CAACoB,MAAb,EAAqBC,GAArB,CAAyB,eAAzB;AAFoB,OAArB,CAAX;AAID;;AAED,QAAI,CAAC,2BAAaR,QAAb,CAAD,IAA2BL,SAAS,CAACc,WAAzC,EAAsD;AACpD;AACD;;AAED,UAAMC,QAAQ,GAAG,6BAAeV,QAAf,CAAjB;;AACA,QAAIU,QAAJ,EAAc;AACZ3B,MAAAA,KAAK,CAACG,aAAN,CAAoByB,OAApB,CAA4BC,wBAA5B,EAA2CF,QAA3C;AACD;;AAED,UAAMd,KAAK,GAAGiB,mBAAMC,MAAN,CAAa;AAAEpB,MAAAA,QAAQ,EAAEM;AAAZ,KAAb,CAAd;;AAEA,UAAMe,IAAI,GAAG,uCACX,+BAAiB5B,YAAY,CAAC6B,MAAb,CAAoB1B,UAArC,EAAiDM,KAAjD,CADW,EAEX,CACE,GAAG,wCAA0Bb,KAAK,CAACG,aAAhC,CADL,EAEE,GAAG,wCAA0BH,KAAK,CAACkC,WAAN,EAAmB/B,aAA7C,CAFL,CAFW,CAAb;AAQAH,IAAAA,KAAK,CAACG,aAAN,CACGyB,OADH,CACWjC,UAAU,CAACqB,QADtB,EACgCE,2BAAciB,cAAd,CAA6BlB,QAA7B,CADhC,EAEGW,OAFH,CAEWjC,UAAU,CAACyC,IAFtB,EAE4BJ,IAF5B,EAGGJ,OAHH,CAIIjC,UAAU,CAAC0C,IAJf,EAKIjC,YAAY,CAAC6B,MAAb,CAAoB1B,UAApB,CAA+B+B,WAA/B,CAA2CzB,KAA3C,CALJ;AAOA,WAAOX,IAAI,EAAX;AACD,GA1DD;AA2DD","sourcesContent":["import {\n  Value,\n  Plugin,\n  CangjieClipboardEvent,\n  transferUtils,\n  constants,\n} from '@ali/4ever-cangjie';\nimport ClipboardPad from '../../utils/ClipboardPad';\nimport { dealWithFragmentOnCopy } from '../../bi/utils/dealWithFragmentOnCopy';\nimport getHtmlFromValue from '../../utils/getHtmlFromValue';\nimport canCopyOrCut from '../../utils/canCopyOrCut';\nimport getImageSource from '../../bi/utils/getImageSource';\nimport { FILE_IMG_TYPE } from '../../utils/constants';\nimport { ClipboardPluginConfig } from '../../utils/types';\nimport writeClipboardDataToHtml from '../../bi/utils/writeClipboardDataToHtml';\nimport getAllCustomClipboardData from '../../bi/utils/getAllCustomClipboardData';\n\nconst { MIME_TYPES } = constants;\n\n\nexport default function createOnCangjieCopyOrCut(\n  clipboard: Partial<ClipboardPluginConfig>,\n): Plugin['onCangjieCopy'] {\n  return function onCangjieCopyOrCut(\n    event: CangjieClipboardEvent,\n    controller,\n    next,\n  ) {\n    if (!event.clipboardData) {\n      return next();\n    }\n\n    const clipboardPad = ClipboardPad.getClipboardPad({\n      serializer: controller.serializer,\n      schema: controller.strictSchema,\n      ...clipboard,\n    }, clipboard.key);\n\n    const { document, selection } = controller.value;\n    const encodedFragment = event.clipboardData.getData(MIME_TYPES.FRAGMENT);\n    // 为了保障拷贝正常使用，这里 catch 一下，防止数据层报错\n    let fragment = dealWithFragmentOnCopy({\n      fragment: encodedFragment\n        ? transferUtils.decodeFragment(encodedFragment)\n        : document.getFragmentAtRange(selection),\n      controller,\n    });\n    if (fragment?.data) {\n      fragment = fragment.set('data', {\n        ...fragment.data,\n        copyFrom: clipboardPad.models?.get('controllerPid'),\n      });\n    }\n\n    if (!canCopyOrCut(fragment) && selection.isCollapsed) {\n      return;\n    }\n\n    const mediaUrl = getImageSource(fragment);\n    if (mediaUrl) {\n      event.clipboardData.setData(FILE_IMG_TYPE, mediaUrl);\n    }\n\n    const value = Value.create({ document: fragment });\n\n    const html = writeClipboardDataToHtml(\n      getHtmlFromValue(clipboardPad.config.serializer, value),\n      [\n        ...getAllCustomClipboardData(event.clipboardData),\n        ...getAllCustomClipboardData(event.nativeEvent?.clipboardData),\n      ],\n    );\n\n    event.clipboardData\n      .setData(MIME_TYPES.FRAGMENT, transferUtils.encodeFragment(fragment))\n      .setData(MIME_TYPES.HTML, html)\n      .setData(\n        MIME_TYPES.TEXT,\n        clipboardPad.config.serializer.valueToText(value),\n      );\n    return next();\n  };\n}\n"],"file":"createOnCangjieCopyOrCut.js"}