"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dropFragment = dropFragment;
exports.dropEventFragment = dropEventFragment;
exports.dropHtml = dropHtml;
exports.clearDropHolder = clearDropHolder;
exports.updateDragHander = updateDragHander;
exports.deleteDragFragment = deleteDragFragment;
exports.updateDragFragment = updateDragFragment;
exports.updateDragHighlight = updateDragHighlight;
exports.removeDragHighlightSingle = removeDragHighlightSingle;
exports.updateDropHolder = updateDropHolder;
exports.copyAsUrl = copyAsUrl;
exports.updateImageDropHolder = updateImageDropHolder;
exports.dragMenuInsertBefore = dragMenuInsertBefore;
exports.dragMenuInsertAfter = dragMenuInsertAfter;
exports.dragMenuCutOrCopy = dragMenuCutOrCopy;
exports.dragMenuDelete = dragMenuDelete;
exports.mountDragHander = mountDragHander;
exports.isActions = exports.actions = exports.MOUNT_LINE_HEADER_TOOLBAR = exports.DRAG_MENU_DELETE = exports.DRAG_MENU_CUT_OR_COPY = exports.DRAG_MENU_INSERT_AFTER = exports.DRAG_MENU_INSERT_BEFORE = exports.UPDATE_IMAGE_DROP_HOLDER = exports.COPY_AS_URL = exports.DROP_HTML = exports.DROP_EVENT_FRAGMENT = exports.DROP_FRAGMENT = exports.REMOVE_DRAGHIGHLIGHT_SINGLE = exports.UPDATE_DRAGHIGHLIGHT = exports.UPDATE_DARGFRAGMENT = exports.DELETE_DARGFRAGMENT = exports.UPDATE_DROPHOLDER = exports.UPDATE_DRAGHANDER = exports.CLEAR_DROPHOLDER = void 0;

/** ***************** for UI ***************** */
const CLEAR_DROPHOLDER = Symbol('CLEAR_DROPHOLDER');
exports.CLEAR_DROPHOLDER = CLEAR_DROPHOLDER;
const UPDATE_DRAGHANDER = Symbol('UPDATE_DRAGHANDER');
exports.UPDATE_DRAGHANDER = UPDATE_DRAGHANDER;
const UPDATE_DROPHOLDER = Symbol('UPDATE_DROPHOLDER');
/** ***************** for controller ***************** */

exports.UPDATE_DROPHOLDER = UPDATE_DROPHOLDER;
const DELETE_DARGFRAGMENT = Symbol('DELETE_DARGFRAGMENT');
exports.DELETE_DARGFRAGMENT = DELETE_DARGFRAGMENT;
const UPDATE_DARGFRAGMENT = Symbol('UPDATE_DARGFRAGMENT');
exports.UPDATE_DARGFRAGMENT = UPDATE_DARGFRAGMENT;
const UPDATE_DRAGHIGHLIGHT = Symbol('UPDATE_DRAGHIGHLIGHT');
exports.UPDATE_DRAGHIGHLIGHT = UPDATE_DRAGHIGHLIGHT;
const REMOVE_DRAGHIGHLIGHT_SINGLE = Symbol('REMOVE_DRAGHIGHLIGHT_SINGLE');
exports.REMOVE_DRAGHIGHLIGHT_SINGLE = REMOVE_DRAGHIGHLIGHT_SINGLE;
const DROP_FRAGMENT = 'DROP_FRAGMENT';
exports.DROP_FRAGMENT = DROP_FRAGMENT;
const DROP_EVENT_FRAGMENT = Symbol('DROP_EVENT_FRAGMENT');
exports.DROP_EVENT_FRAGMENT = DROP_EVENT_FRAGMENT;
const DROP_HTML = Symbol('DROP_HTML');
exports.DROP_HTML = DROP_HTML;
const COPY_AS_URL = Symbol('COPY_AS_URL');
exports.COPY_AS_URL = COPY_AS_URL;
const UPDATE_IMAGE_DROP_HOLDER = Symbol('UPDATE_IMAGE_DROP_HOLDER');
exports.UPDATE_IMAGE_DROP_HOLDER = UPDATE_IMAGE_DROP_HOLDER;
const DRAG_MENU_INSERT_BEFORE = Symbol('DRAG_MENU_INSERT_BEFORE');
exports.DRAG_MENU_INSERT_BEFORE = DRAG_MENU_INSERT_BEFORE;
const DRAG_MENU_INSERT_AFTER = Symbol('DRAG_MENU_INSERT_AFTER');
exports.DRAG_MENU_INSERT_AFTER = DRAG_MENU_INSERT_AFTER;
const DRAG_MENU_CUT_OR_COPY = Symbol('DRAG_MENU_CUT_OR_COPY');
exports.DRAG_MENU_CUT_OR_COPY = DRAG_MENU_CUT_OR_COPY;
const DRAG_MENU_DELETE = Symbol('DRAG_MENU_DELETE');
exports.DRAG_MENU_DELETE = DRAG_MENU_DELETE;
const MOUNT_LINE_HEADER_TOOLBAR = Symbol('MOUNT_LINE_HEADER_TOOLBAR');
exports.MOUNT_LINE_HEADER_TOOLBAR = MOUNT_LINE_HEADER_TOOLBAR;

function dropFragment(payload) {
  return {
    type: DROP_FRAGMENT,
    payload
  };
}

function isDropFragmentAction(action) {
  return action.type === DROP_FRAGMENT;
}

function dropEventFragment(payload) {
  return {
    type: DROP_EVENT_FRAGMENT,
    payload
  };
}

function dropHtml(payload) {
  return {
    type: DROP_HTML,
    payload
  };
}

function clearDropHolder() {
  return {
    type: CLEAR_DROPHOLDER
  };
}

function updateDragHander(payload) {
  return {
    type: UPDATE_DRAGHANDER,
    payload
  };
}

function deleteDragFragment(payload) {
  return {
    type: DELETE_DARGFRAGMENT,
    payload
  };
}

function updateDragFragment(payload) {
  return {
    type: UPDATE_DARGFRAGMENT,
    payload
  };
}

function updateDragHighlight(payload) {
  return {
    type: UPDATE_DRAGHIGHLIGHT,
    payload
  };
}

function removeDragHighlightSingle(payload) {
  return {
    type: REMOVE_DRAGHIGHLIGHT_SINGLE,
    payload
  };
}

function updateDropHolder(payload) {
  return {
    type: UPDATE_DROPHOLDER,
    payload
  };
}

function copyAsUrl(url) {
  return {
    type: COPY_AS_URL,
    payload: {
      url
    }
  };
}

function updateImageDropHolder(payload) {
  return {
    type: UPDATE_IMAGE_DROP_HOLDER,
    payload
  };
}

function dragMenuInsertBefore(payload) {
  return {
    type: DRAG_MENU_INSERT_BEFORE,
    payload
  };
}

function dragMenuInsertAfter(payload) {
  return {
    type: DRAG_MENU_INSERT_AFTER,
    payload
  };
}

function dragMenuCutOrCopy(payload) {
  return {
    type: DRAG_MENU_CUT_OR_COPY,
    payload
  };
}

function dragMenuDelete(payload) {
  return {
    type: DRAG_MENU_DELETE,
    payload
  };
}
/**
 * mount 埋点
 */


function mountDragHander() {
  return {
    type: MOUNT_LINE_HEADER_TOOLBAR
  };
}

const actions = {};
exports.actions = actions;
const isActions = {
  isDropFragmentAction
};
exports.isActions = isActions;
//# sourceMappingURL=index.js.map