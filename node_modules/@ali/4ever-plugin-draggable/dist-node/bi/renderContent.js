"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _dropHolder = _interopRequireDefault(require("./components/dropHolder"));

var _styled = require("./components/styled");

var _draggableContext = require("./draggableContext");

var _actions = require("./actions");

var _dragOverHandler = _interopRequireWildcard(require("./dragEventHandlers/dragOverHandler"));

var _dropHandler = _interopRequireDefault(require("./dragEventHandlers/dropHandler"));

var _dragEndHandler = _interopRequireDefault(require("./dragEventHandlers/dragEndHandler"));

var _domUtils = require("./utils/domUtils");

var _draggableData = require("./model/draggableData");

/* eslint-disable react-hooks/exhaustive-deps */
const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref = /*#__PURE__*/_createElement(_styled.DragHighlightStyle, null);

const DraggableProvider = props => {
  const [draggableData, dispatch] = (0, _draggableContext.useValue)();
  const zoom = (0, _everCangjie.useZoom)();
  const {
    controller,
    draggableConfig,
    handleDragChange
  } = props;
  const value = (0, _react.useMemo)(() => {
    /**
     * PERF
     * never get the data from context when it change constantly or a lot of components useContext
     * it will cause DISASTER
     */
    return {
      dispatch
    };
  }, [dispatch]);
  const onKeyDown = (0, _react.useCallback)(() => {
    if (draggableData.dragHander?.viewKey) {
      dispatch((0, _actions.updateDragHander)());
      (0, _domUtils.removeDragHightlight)();
    }
  }, [dispatch, draggableData]);
  const onDragOver = (0, _react.useCallback)(event => {
    if ((0, _dragOverHandler.checkAndUpdatePosition)(event.pageX, event.pageY)) {
      (0, _dragOverHandler.default)(event, controller, dispatch, zoom, draggableConfig);
    }
  }, [controller, dispatch, zoom, draggableConfig]);
  const onDrop = (0, _react.useCallback)(event => {
    // 取消，避免延迟触发
    _dragOverHandler.default.cancel(); // 清除 UI 拖拽数据


    dispatch((0, _actions.clearDropHolder)()); // onDrop triggered means onDragEnd not trigger

    (0, _dropHandler.default)(event, controller, draggableData.dropHolder);
    (0, _dragEndHandler.default)(controller);
    (0, _dragOverHandler.checkAndUpdatePosition)();
    handleDragChange('clear', controller);
  }, [dispatch, controller, draggableData]);
  const onDragEnd = (0, _react.useCallback)(() => {
    // 取消拖拽
    (0, _draggableData.updateDraggableData)(controller);
    (0, _dragEndHandler.default)(controller);
    dispatch((0, _actions.clearDropHolder)());
    (0, _dragOverHandler.checkAndUpdatePosition)();
    handleDragChange('clear', controller);
  }, [controller, dispatch]);
  const zoomContainer = (0, _everCangjie.useZoomContainer)();

  _react.default.useEffect(() => {
    if (!zoomContainer) {
      return undefined;
    }

    zoomContainer.addEventListener('dragover', onDragOver);
    document.addEventListener('keydown', onKeyDown);
    zoomContainer.addEventListener('drop', onDrop);
    document.addEventListener('dragend', onDragEnd);
    return () => {
      zoomContainer.removeEventListener('dragover', onDragOver);
      document.removeEventListener('keydown', onKeyDown);
      zoomContainer.removeEventListener('drop', onDrop);
      document.removeEventListener('dragend', onDragEnd);
    };
  }, [zoomContainer, onDragOver, onKeyDown, onDrop, onDragEnd]);

  return /*#__PURE__*/_createElement(_draggableContext.DraggableContext.Provider, {
    value: value
  }, props.children, _ref, /*#__PURE__*/_createElement(_dropHolder.default, (0, _extends2.default)({}, draggableData, {
    controller: controller
  })));
};

var _default = (config, handleDragChange) => {
  return (props, controller, next) => {
    if (config.draggable?.enabled) {
      return /*#__PURE__*/_createElement(DraggableProvider, {
        draggableConfig: config.draggable,
        controller: controller,
        zoom: props.zoom,
        handleDragChange: handleDragChange
      }, next());
    }

    return next();
  };
};

exports.default = _default;
//# sourceMappingURL=renderContent.js.map