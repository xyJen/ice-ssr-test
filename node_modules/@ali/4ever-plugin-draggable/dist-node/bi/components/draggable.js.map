{"version":3,"sources":["../../../../src/bi/components/draggable.tsx"],"names":["Draggable","props","controller","renderNodeProps","node","shouldBeDraggable","query","dragDirectly","Inline","isInline","handleDragStart","event","undefined","key","handleMouseDown","stopPropagation","nativeEvent","children","dragDirectlyStyle"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAGA;;uBAL4B,a;;AAQ5B,MAAMA,SAAmC,GAAIC,KAAD,IAAW;AACrD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAkCF,KAAxC;AAEA,QAAM;AAAEG,IAAAA;AAAF,MAAWD,eAAjB,CAHqD,CAKrD;;AACA,QAAME,iBAAiB,GAAG,CAAC,CAACH,UAAU,CAACI,KAAX,CAAiB,iBAAjB,EAAoC;AAAEF,IAAAA;AAAF,GAApC,CAA5B;;AACA,QAAMG,YAAY,GAAGC,oBAAOC,QAAP,CAAgBL,IAAhB,CAArB;;AAEA,QAAMM,eAAe,GAAIC,KAAD,IAA4B;AAClD,mCAAiBA,KAAjB,EAAwBT,UAAxB,EAAoCU,SAApC,EAA+CR,IAAI,CAACS,GAApD;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAIH,KAAD,IAA6B;AACnD,QAAIJ,YAAJ,EAAkB;AAChB;AACAI,MAAAA,KAAK,CAACI,eAAN;AACAJ,MAAAA,KAAK,CAACK,WAAN,CAAkBD,eAAlB;AACD;AACF,GAND;;AAQA,MAAI,CAACV,iBAAL,EAAwB;AACtB,wBACE,8CACGJ,KAAK,CAACgB,QADT,CADF;AAKD;;AAED,sBACE;AACE,IAAA,KAAK,EAAE,EACL,GAAGC;AADE,KADT;AAIE,IAAA,SAAS,EAAE,MAJb;AAKE,IAAA,WAAW,EAAEJ,eALf;AAME,IAAA,WAAW,EAAEJ,eANf;AAOE,sBAAgBN,IAAI,CAACS;AAPvB,KASGZ,KAAK,CAACgB,QATT,CADF;AAaD,CA1CD;;eA4CejB,S","sourcesContent":["import React from 'react';\nimport { Inline } from '@ali/4ever-cangjie';\nimport { DraggableProps } from '../types';\nimport {\n  dragDirectlyStyle,\n} from './styled';\nimport dragStartHandler from '../dragEventHandlers/dragStartHandler';\n\n\nconst Draggable: React.FC<DraggableProps> = (props) => {\n  const { controller, renderNodeProps } = props;\n\n  const { node } = renderNodeProps;\n\n  // 是否开启拖拽\n  const shouldBeDraggable = !!controller.query('isNodeDraggable', { node });\n  const dragDirectly = Inline.isInline(node);\n\n  const handleDragStart = (event: React.DragEvent) => {\n    dragStartHandler(event, controller, undefined, node.key);\n  };\n\n  const handleMouseDown = (event: React.MouseEvent) => {\n    if (dragDirectly) {\n      // 避免和选区冲突\n      event.stopPropagation();\n      event.nativeEvent.stopPropagation();\n    }\n  };\n\n  if (!shouldBeDraggable) {\n    return (\n      <>\n        {props.children}\n      </>\n    );\n  }\n\n  return (\n    <span\n      style={{\n        ...dragDirectlyStyle,\n      }}\n      draggable={'true'}\n      onMouseDown={handleMouseDown}\n      onDragStart={handleDragStart}\n      data-draggable={node.key}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport default Draggable;\n"],"file":"draggable.js"}