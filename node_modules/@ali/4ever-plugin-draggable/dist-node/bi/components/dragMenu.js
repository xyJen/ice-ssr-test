"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.menuItemSizeStyle = exports.commonHeadStyle = exports.sizeStyle = void 0;

var _react = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _weIcon = require("@ali/we-icon");

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginRefblock = require("@ali/4ever-plugin-refblock");

var _everPluginCode = require("@ali/4ever-plugin-code");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _everPluginHeading = require("@ali/4ever-plugin-heading");

var _hetu = require("../utils/hetu");

var _everComponent = require("@ali/4ever-component");

var _actions = require("../actions");

var _everUtils = require("@ali/4ever-utils");

var _constants = require("../constants");

var _getDragNodes = require("../utils/getDragNodes");

var _useTransformMenus = _interopRequireDefault(require("./useTransformMenus"));

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  ACTION_COPY,
  ACTION_CUT
} = _everCangjie.ContextMenu;
const sizeStyle = {
  width: 190,
  whiteSpace: 'nowrap'
};
exports.sizeStyle = sizeStyle;
const commonHeadStyle = {
  padding: '6px 8px',
  height: 'auto',
  fontWeight: 500
};
exports.commonHeadStyle = commonHeadStyle;
const menuItemSizeStyle = {
  width: '112px',
  minWidth: '112px'
};
exports.menuItemSizeStyle = menuItemSizeStyle;
const canTransType = [_everPluginHeading.Heading.Heading1.TYPE, _everPluginHeading.Heading.Heading2.TYPE, _everPluginHeading.Heading.Heading3.TYPE, _everPluginHeading.Heading.Heading4.TYPE, _everPluginHeading.Heading.Heading5.TYPE, _everPluginHeading.Heading.Heading6.TYPE, _everPluginParagraph.Paragraph.TYPE, _everPluginCode.Code.TYPE];
const canSetColorType = [_everPluginHeading.Heading.Heading1.TYPE, _everPluginHeading.Heading.Heading2.TYPE, _everPluginHeading.Heading.Heading3.TYPE, _everPluginHeading.Heading.Heading4.TYPE, _everPluginHeading.Heading.Heading5.TYPE, _everPluginHeading.Heading.Heading6.TYPE, _everPluginParagraph.Paragraph.TYPE];
var InsertRoles; // 分享段落链接的两种形式，im 直接发送到聊天，url 复制到剪切板

(function (InsertRoles) {
  InsertRoles["copy"] = "copy";
  InsertRoles["cut"] = "cut";
  InsertRoles["copyAsUrlOld"] = "copyAsUrlOld";
  InsertRoles["shareParagraphToIm"] = "shareParagraphToIm";
  InsertRoles["copyParagraphUrl"] = "copyParagraphUrl";
  InsertRoles["menuDrag"] = "menuDrag";
  InsertRoles["insert"] = "insert";
  InsertRoles["append"] = "append";
  InsertRoles["delete"] = "delete";
  InsertRoles["paragraphColor"] = "paragraphColor";
})(InsertRoles || (InsertRoles = {}));

var ShareParagraphType;

(function (ShareParagraphType) {
  ShareParagraphType["Im"] = "im";
  ShareParagraphType["Url"] = "url";
})(ShareParagraphType || (ShareParagraphType = {}));

var _ref = /*#__PURE__*/_createElement(_weIcon.ToolbarShareNormal, null);

var _ref2 = /*#__PURE__*/_createElement(_weIcon.MaodianNormal, null);

var _ref3 = /*#__PURE__*/_createElement(_weIcon.ToolbarCopyNormal, null);

var _ref4 = /*#__PURE__*/_createElement(_weIcon.ToolbarCutNormal, null);

var _ref5 = /*#__PURE__*/_createElement(_weIcon.AddUpNormal, null);

var _ref6 = /*#__PURE__*/_createElement(_weIcon.AddDownNormal, null);

var _ref7 = /*#__PURE__*/_createElement(_weIcon.ToolbarDeleteNormal, null);

var _ref8 = /*#__PURE__*/_createElement(_weIcon.PaletteNormal, null);

const DragMenu = props => {
  const {
    currentBlock,
    locale,
    handleClickMenu,
    getCopyURL,
    shareParagraph,
    hetu,
    refblock,
    extraTransformMenu,
    customizeMenus = []
  } = props;

  const controller = _everCangjie.Controller.useController();

  const blocks = (0, _react.useMemo)(() => {
    return (0, _getDragNodes.getSiblingDraggableBlocks)(controller, currentBlock) || [];
  }, [controller, currentBlock]);
  const onCutOrCopy = (0, _react.useCallback)(action => {
    if (!currentBlock) {
      return;
    }

    controller.run('onAction', (0, _actions.dragMenuCutOrCopy)({
      node: currentBlock,
      action
    }));
  }, [currentBlock]);
  const onClickCut = (0, _react.useCallback)(() => {
    onCutOrCopy(ACTION_CUT);
  }, [onCutOrCopy]);
  const onClickCopy = (0, _react.useCallback)(() => {
    onCutOrCopy(ACTION_COPY);
  }, [onCutOrCopy]);
  const onClickDelete = (0, _react.useCallback)(() => {
    if (!currentBlock) {
      return;
    }

    controller.run('onAction', (0, _actions.dragMenuDelete)({
      node: currentBlock
    }));
  }, [currentBlock]);
  const onClickAppend = (0, _react.useCallback)(() => {
    if (!currentBlock) {
      return;
    }

    controller.run('onAction', (0, _actions.dragMenuInsertAfter)({
      node: currentBlock
    }));
  }, [currentBlock, controller]);
  const {
    menus: insertTransMenus
  } = (0, _useTransformMenus.default)(locale, currentBlock, true);
  const onClickInsert = (0, _react.useCallback)(() => {
    if (!currentBlock) {
      return;
    }

    controller.run('onAction', (0, _actions.dragMenuInsertBefore)({
      node: currentBlock
    }));
  }, [controller, currentBlock]);
  const onClickCopyLink = (0, _react.useCallback)(() => {
    if (!currentBlock || !getCopyURL) {
      return;
    }

    try {
      const {
        data: {
          subjectPr = {},
          uuid: id
        }
      } = currentBlock;
      let uuid = subjectPr.id || id;

      if (!uuid) {
        uuid = (0, _everUtils.uniqueId)();
        controller.run('onAction', (0, _everUtils.setNodeUUID)(currentBlock, uuid));
      }

      getCopyURL(uuid);
    } catch (err) {
      console.warn(err);
    }
  }, [controller, currentBlock, getCopyURL]);
  const onParagraphShare = (0, _react.useCallback)(type => {
    if (!currentBlock || !shareParagraph) {
      return;
    }

    try {
      const {
        data: {
          subjectPr = {}
        }
      } = currentBlock;
      let uuid = subjectPr.id || controller.query('anchor', currentBlock);

      if (!uuid) {
        if (controller.enableUUID) {
          controller.dispatch('generateUUID', {
            node: currentBlock
          });
          const blockWithUUID = controller.value.document.assertElement(currentBlock.key);
          uuid = controller.query('anchor', blockWithUUID);
        } else {
          uuid = (0, _everUtils.uniqueId)();
          controller.run('onAction', (0, _everUtils.setNodeUUID)(currentBlock, uuid));
        }
      }

      shareParagraph(type, uuid, currentBlock);
    } catch (err) {
      console.warn(err);
    }
  }, [controller, currentBlock, locale?.shareParagraphToImFail, locale?.copyParagraphUrlFail, locale?.shareParagraphToImSuccess, locale?.copyParagraphUrlSuccess, shareParagraph]);
  const onClickCopyRefBlock = (0, _react.useCallback)(() => {
    controller.dispatch('copyAsRefBlock', blocks);
  }, [controller, blocks]);
  const onCopyRefBlock = (0, _react.useCallback)(block => {
    controller.dispatch('copyRefBlock', block);
  }, [controller]);
  const insertMenus = (0, _react.useMemo)(() => {
    const transformMenus = [];

    if (currentBlock) {
      // 额外的 transform menu 能够独立存在
      transformMenus.push(...extraTransformMenu.map(item => ({
        type: _everComponent.TYPE_MENU_ITEM,
        action: _constants.DragMenuActionType,
        currentBlock,
        ...item
      })));
    } // 河图同步块的 menu 处理


    const hetuMenus = hetu?.enable ? (0, _hetu.getHetuDragMenuItems)({
      block: currentBlock,
      locale,
      config: hetu,
      controller
    }) : []; // 如果 shareParagraph 和 getCopyURL 都没有，不显示这个按钮

    let paragraphMenus = [];

    if (shareParagraph || getCopyURL) {
      paragraphMenus = shareParagraph ? [{
        type: _everComponent.TYPE_SUB_MENU,
        icon: _ref,
        title: locale?.shareParagraphUrl,
        menus: [{
          type: _everComponent.TYPE_MENU_ITEM,
          title: locale?.shareParagraphToIm,
          menuExtraKey: 'share',
          onClick: () => onParagraphShare(ShareParagraphType.Im),
          role: InsertRoles.shareParagraphToIm
        }, {
          type: _everComponent.TYPE_MENU_ITEM,
          title: locale?.copyParagraphUrl,
          key: 'saveUrl',
          onClick: () => onParagraphShare(ShareParagraphType.Url),
          role: InsertRoles.copyParagraphUrl
        }]
      }] : [{
        type: _everComponent.TYPE_MENU_ITEM,
        title: locale?.copyAsUrl,
        icon: _ref2,
        menuExtraKey: 'copyAsUrl',
        role: InsertRoles.copyAsUrlOld,
        onClick: onClickCopyLink
      }];
    } // 引用块菜单


    const refblockMenus = refblock?.enable ? _everPluginRefblock.utils.getRefBlockDragMenuItems({
      block: currentBlock,
      locale: locale,
      value: controller.value,
      disableNodeInRefBlock: node => controller.query('disableNodeInRefBlock', node) === true,
      onCopyAsRefBlock: onClickCopyRefBlock,
      onCopyRefBlock
    }) : [];
    const setColorMenu = {
      type: _everComponent.TYPE_GROUP,
      menus: []
    };
    const arr = [{
      type: _everComponent.TYPE_GROUP,
      menus: [{
        type: _everComponent.TYPE_MENU_ITEM,
        title: locale?.copyMenu,
        icon: _ref3,
        menuExtraKey: 'copy',
        role: InsertRoles.copy,
        onClick: onClickCopy
      }, {
        type: _everComponent.TYPE_MENU_ITEM,
        title: locale?.cutMenu,
        icon: _ref4,
        menuExtraKey: 'cut',
        role: InsertRoles.cut,
        onClick: onClickCut
      }]
    }, {
      type: _everComponent.TYPE_GROUP,
      menus: [...paragraphMenus, ...hetuMenus, ...refblockMenus, ...transformMenus]
    }, {
      type: _everComponent.TYPE_GROUP,
      menus: [{
        type: _everComponent.TYPE_MENU_ITEM,
        icon: _ref5,
        title: locale?.insert,
        menuExtraKey: 'insert',
        onClick: onClickInsert,
        role: InsertRoles.insert,
        testid: 'insert-before'
      }, {
        type: _everComponent.TYPE_MENU_ITEM,
        icon: _ref6,
        title: locale?.append,
        menuExtraKey: 'append',
        onClick: onClickAppend,
        role: InsertRoles.append,
        testid: 'insert-after'
      }]
    }, setColorMenu, {
      type: _everComponent.TYPE_GROUP,
      menus: [{
        type: _everComponent.TYPE_MENU_ITEM,
        title: locale?.deleteMenu,
        icon: _ref7,
        menuExtraKey: 'delete',
        role: InsertRoles.delete,
        onClick: onClickDelete
      }]
    }];

    if (currentBlock && canTransType.includes(currentBlock.type)) {
      arr[0].menus.push(insertTransMenus);
    }

    if (currentBlock && canSetColorType.includes(currentBlock.type)) {
      setColorMenu.menus.push({
        type: _everComponent.TYPE_SUB_MENU,
        title: locale?.paragraphColor,
        icon: _ref8,
        menus: [{
          type: _everComponent.TYPE_MENU_ITEM,
          menuKey: 'paragraphColor',
          currentBlock,
          role: InsertRoles.paragraphColor
        }]
      });
    }

    if (customizeMenus.length !== 0) {
      arr.unshift({
        type: _everComponent.TYPE_GROUP,
        menus: customizeMenus
      });
    }

    return arr;
  }, [currentBlock, onClickAppend, insertTransMenus, onClickCopy, onClickCut, onClickDelete, onClickInsert, getCopyURL, shareParagraph, extraTransformMenu, onClickCopyRefBlock, onCopyRefBlock]);
  const getMenus = (0, _react.useCallback)(() => {
    return insertMenus;
  }, [insertMenus]);
  return /*#__PURE__*/_createElement(_weDesign.Menu, {
    mode: _weDesign.EMenuMode.vertical,
    selectedKeys: [],
    destroyOverlayWhenInvisible: true,
    insertSubmenuToMenuRoot: true,
    style: sizeStyle,
    onClick: handleClickMenu,
    testid: "drag-menu",
    role: InsertRoles.menuDrag
  }, /*#__PURE__*/_createElement(_everComponent.Menu, {
    menus: getMenus()
  }));
};

var _default = DragMenu;
exports.default = _default;
//# sourceMappingURL=dragMenu.js.map