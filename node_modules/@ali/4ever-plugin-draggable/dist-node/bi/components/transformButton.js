"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransformButton;
exports.sizeStyle = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _weUtil = require("@ali/we-util");

var _weDesign = require("@ali/we-design");

var _weToolbar = require("@ali/we-toolbar");

var _everComponent = require("@ali/4ever-component");

var _useTransformMenus = _interopRequireDefault(require("./useTransformMenus"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _role = require("../../utils/role");

const _createElement = /*#__PURE__*/_react.default.createElement;

const Scrollbar = /*#__PURE__*/_styledComponents.default.div(["overflow:auto;overflow:overlay;&::-webkit-scrollbar{width:8px;}&::-webkit-scrollbar-track{border-radius:8px;}&::-webkit-scrollbar-thumb{border-radius:8px;background-color:unset;}&:hover::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,0.5);}"]);

const sizeStyle = {
  minWidth: 173,
  whiteSpace: 'nowrap',
  overflow: 'auto',
  maxHeight: 550
};
exports.sizeStyle = sizeStyle;

const Wrapper = /*#__PURE__*/_styledComponents.default.div(["display:flex;flex-direction:column;"]);

function TransformButton(props) {
  const {
    controller,
    locale,
    getContainer,
    ...rest
  } = props;
  let distance = null;

  if (typeof getContainer === 'function') {
    const test = getContainer();

    if (test) {
      const top = test.getBoundingClientRect().top - 20;
      const bottom = window.innerHeight - test.getBoundingClientRect().bottom - 20;
      distance = Math.max(top, bottom);
    }
  }

  const [visible, setVisible] = _react.default.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const hide = () => {
    setVisible(false);
  };

  const {
    extras,
    menus: insertTransMenus
  } = (0, _useTransformMenus.default)(locale);
  const allSelected = Object.keys(extras).filter(item => item !== 'paragraph');
  const isMixed = allSelected.length > 1;
  const text = isMixed ? locale?.mixed : locale[allSelected[0]];
  return /*#__PURE__*/_createElement(_weToolbar.TextMenu, (0, _extends2.default)({
    visible: visible,
    value: text || locale?.paragraph || '',
    title: locale.transform,
    tooltip: locale.transform,
    onVisibleChange: handleVisibleChange,
    testid: "transfrom-button",
    showTitle: true,
    getContainer: getContainer,
    role: _role.DraggableRole.dragTransform,
    overlay: /*#__PURE__*/_createElement(_weUtil.DropdownAnimation, {
      visible: visible
    }, /*#__PURE__*/_createElement(Scrollbar, {
      style: {
        minWidth: 173,
        maxHeight: distance || 'calc(50vh - 20px)'
      }
    }, /*#__PURE__*/_createElement(Wrapper, null, /*#__PURE__*/_createElement(_weDesign.Menu, {
      mode: _weDesign.EMenuMode.vertical,
      selectedKeys: [],
      destroyOverlayWhenInvisible: true,
      insertSubmenuToMenuRoot: true,
      style: sizeStyle,
      onClick: hide,
      getContainer: getContainer,
      role: _role.DraggableRole.dragTransform
    }, /*#__PURE__*/_createElement(_everComponent.Menu, {
      menus: insertTransMenus.menus
    })))))
  }, rest));
}
//# sourceMappingURL=transformButton.js.map