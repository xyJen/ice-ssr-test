{"version":3,"sources":["../../../src/bi/createWithDraggable.tsx"],"names":["createDraggableElement","props","controller","component","draggablePluginConfig","draggableConfig","enabled","Block","isBlock","node","createWithDraggable","renderNode","types","next","type"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;;AAIrB,SAASA,sBAAT,CACLC,KADK,EAELC,UAFK,EAGLC,SAHK,EAILC,qBAJK,EAKLC,eALK,EAMQ;AACb,MAAI,CAACD,qBAAD,IAA0B,CAACA,qBAAqB,CAACE,OAArD,EAA8D;AAC5D,WAAOH,SAAP;AACD;;AACD,MAAII,mBAAMC,OAAN,CAAcP,KAAK,CAACQ,IAApB,CAAJ,EAA+B,OAAON,SAAP;AAC/B,sBACE,eAAC,kBAAD;AACE,IAAA,UAAU,EAAED,UADd;AAEE,IAAA,eAAe,EAAED,KAFnB;AAGE,IAAA,eAAe,EAAEI;AAHnB,KAKGF,SALH,CADF;AASD;;AAEc,SAASO,mBAAT,CACbC,UADa,EAEbC,KAFa,EAGbR,qBAHa,EAIbC,eAJa,EAKb;AACA,MAAI,CAACD,qBAAD,IAA0B,CAACA,qBAAqB,CAACE,OAArD,EAA8D;AAC5D,WAAOK,UAAP;AACD;;AAED,SAAO,UAAUV,KAAV,EAAkCC,UAAlC,EAA0DW,IAA1D,EAAgE;AACrE,QAAIN,mBAAMC,OAAN,CAAcP,KAAK,CAACQ,IAApB,KAA6B,CAACG,KAAK,CAAEX,KAAK,CAACQ,IAAP,CAAsBK,IAAvB,CAAvC,EAAqE,OAAOH,UAAU,CAACV,KAAD,EAAQC,UAAR,EAAoBW,IAApB,CAAjB;AAErE,wBACE,eAAC,kBAAD;AACE,MAAA,UAAU,EAAEX,UADd;AAEE,MAAA,eAAe,EAAED,KAFnB;AAGE,MAAA,eAAe,EAAEI;AAHnB,OAKGM,UAAU,CAACV,KAAD,EAAQC,UAAR,EAAoBW,IAApB,CALb,CADF;AASD,GAZD;AAaD","sourcesContent":["import * as React from 'react';\nimport { Controller, RenderNodeProps, Block } from '@ali/4ever-cangjie';\nimport Draggable from './components/draggable';\nimport { DraggablePluginConfig, DraggableConfig } from './types';\n\nexport function createDraggableElement(\n  props: RenderNodeProps,\n  controller: Controller,\n  component: JSX.Element,\n  draggablePluginConfig? : DraggablePluginConfig,\n  draggableConfig?: DraggableConfig,\n): JSX.Element {\n  if (!draggablePluginConfig || !draggablePluginConfig.enabled) {\n    return component;\n  }\n  if (Block.isBlock(props.node)) return component;\n  return (\n    <Draggable\n      controller={controller}\n      renderNodeProps={props}\n      draggableConfig={draggableConfig}\n    >\n      {component}\n    </Draggable>\n  );\n}\n\nexport default function createWithDraggable(\n  renderNode,\n  types: Record<string, boolean>,\n  draggablePluginConfig?: DraggablePluginConfig,\n  draggableConfig?: DraggableConfig,\n) {\n  if (!draggablePluginConfig || !draggablePluginConfig.enabled) {\n    return renderNode;\n  }\n\n  return function (props: RenderNodeProps, controller: Controller, next) {\n    if (Block.isBlock(props.node) || !types[(props.node as Block).type]) return renderNode(props, controller, next);\n\n    return (\n      <Draggable\n        controller={controller}\n        renderNodeProps={props}\n        draggableConfig={draggableConfig}\n      >\n        {renderNode(props, controller, next)}\n      </Draggable>\n    );\n  };\n}\n"],"file":"createWithDraggable.js"}