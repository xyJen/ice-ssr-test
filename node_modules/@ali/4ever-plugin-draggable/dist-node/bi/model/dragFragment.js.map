{"version":3,"sources":["../../../../src/bi/model/dragFragment.ts"],"names":["MIME_TYPES","APPLICATION_CANGJIE_DRAG_FRAGMENT","TEXT_PLAIN","TEXT_LINK","TEXT_HTML","DragFragment","createDragFragment","event","nodes","controller","stopPropagation","dragFragment","forEach","mimeType","mimeData","getData","dataTransfer","setData","constructor","type","fragment","mo","Array","isArray","map","node","key","nodeJson","toJSON","parentKey","value","document","getParent","Inline","isInline","Error","DRAG_TYPE","blocks","inline","serializer","getTextFromDragNode","text","fromJSON","Block","Value","create","Document","valueToText","e","getDataFromDragNode","mime","nodeType","link","data","src","html","json","jsonMLToHTML","nodeToJsonML","JSON","stringify","dragNodes","isContainTable","some"],"mappings":"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","sourcesContent":["import { BlockJSON, Block, Inline, InlineJSON, Value, Document, Controller, Path, Mo } from '@ali/4ever-cangjie';\nimport {\n  DRAG_TYPE,\n  DRAG_DATA,\n  DragBlockProps,\n  DragInlineProps,\n} from '../types';\nimport {\n  APPLICATION_CANGJIE_DRAG_FRAGMENT,\n  TEXT_PLAIN,\n  TEXT_LINK,\n  TEXT_HTML,\n} from '@ali/4ever-utils';\n\nconst MIME_TYPES = [APPLICATION_CANGJIE_DRAG_FRAGMENT, TEXT_PLAIN, TEXT_LINK, TEXT_HTML];\ntype DragNodes = Inline | Block[];\n\nclass DragFragment {\n  static createDragFragment(\n    event: React.DragEvent,\n    nodes: DragNodes,\n    controller: Controller,\n  ) {\n    event.stopPropagation();\n    const dragFragment = new DragFragment(nodes, controller);\n\n    MIME_TYPES.forEach((mimeType) => {\n      const mimeData = dragFragment.getData(mimeType);\n      if (mimeData) {\n        event.dataTransfer.setData(mimeType, mimeData);\n      }\n    });\n\n    return dragFragment;\n  }\n\n  type: DRAG_TYPE;\n\n  fragment: DRAG_DATA;\n\n  mo: Mo;\n\n  constructor(nodes: DragNodes, controller: Controller) {\n    if (Array.isArray(nodes)) {\n      this.fragment = nodes.map((node) => {\n        return {\n          key: node.key,\n          type: node.type,\n          nodeJson: node.toJSON() as BlockJSON,\n          parentKey: controller.value.document.getParent(node.key)!.key,\n        };\n      });\n    } else if (Inline.isInline(nodes)) {\n      this.fragment = {\n        key: nodes.key,\n        type: nodes.type,\n        nodeJson: nodes.toJSON() as InlineJSON,\n        parentKey: controller.value.document.getParent(nodes.key)!.key,\n      };\n    }\n\n    // @ts-ignore\n    if (!this.fragment) {\n      throw new Error('not support drag nodes');\n    }\n\n    this.type = Array.isArray(this.fragment) ? DRAG_TYPE.blocks : DRAG_TYPE.inline;\n    this.mo = controller.serializer;\n  }\n\n  getTextFromDragNode(node: DragBlockProps | DragInlineProps) {\n    const mo = this.mo;\n    const { nodeJson } = node;\n    const isInline = this.type === DRAG_TYPE.inline;\n    let text = '';\n    try {\n      const nodes = isInline ? Inline.fromJSON(nodeJson as InlineJSON) : Block.fromJSON(nodeJson as BlockJSON);\n      const value = Value.create({\n        // @ts-ignore inline 不再强制包裹在 block 内\n        document: Document.create({ nodes: [nodes] }),\n      });\n      text = mo.valueToText(value);\n    } catch (e) {\n      // 不阻塞\n    }\n    return text;\n  }\n\n  getDataFromDragNode(mime: string, node: DragBlockProps | DragInlineProps) {\n    const mo = this.mo;\n    const { type: nodeType, nodeJson } = node;\n    const isInline = this.type === DRAG_TYPE.inline;\n    if (mime === TEXT_PLAIN) {\n      return this.getTextFromDragNode(node);\n    }\n\n    if (mime === TEXT_LINK) {\n      // 支持图片、附件等拖到浏览器中能打开\n      let link = '';\n      switch (nodeType) {\n        case 'embed':\n        case 'image':\n          link = nodeJson.data?.src || '';\n          break;\n        default:\n      }\n      return link;\n    }\n\n    if (mime === TEXT_HTML) {\n      // 仅支持部分插件，复杂插件第三方富文本编辑器识别不了\n      let html = '';\n      switch (nodeType) {\n        case 'paragraph':\n        case 'heading-1':\n        case 'heading-2':\n        case 'heading-3':\n        case 'heading-4':\n        case 'table':\n        case 'image':\n        case 'hr':\n          try {\n            const json = isInline ? Inline.fromJSON(nodeJson as InlineJSON) : Block.fromJSON(nodeJson as BlockJSON);\n            html = mo.jsonMLToHTML(mo.nodeToJsonML(json));\n          } catch (e) {\n            // 不阻塞\n          }\n          break;\n        default:\n          // 降级：取纯文本\n          html = this.getTextFromDragNode(node);\n      }\n      return html;\n    }\n\n    return '';\n  }\n\n  getData(mime) {\n    if (mime === APPLICATION_CANGJIE_DRAG_FRAGMENT) {\n      return JSON.stringify({\n        type: this.type,\n        fragment: this.fragment,\n      });\n    }\n\n    const dragNodes = Array.isArray(this.fragment) ? this.fragment : [this.fragment];\n    let data = '';\n\n    dragNodes.forEach((node) => {\n      data += this.getDataFromDragNode(mime, node);\n    });\n\n    return data;\n  }\n\n  isContainTable() {\n    if (!Array.isArray(this.fragment)) return false;\n    return this.fragment.some((node) => node.type === 'table');\n  }\n}\n\nexport default DragFragment;\n"],"file":"dragFragment.js"}