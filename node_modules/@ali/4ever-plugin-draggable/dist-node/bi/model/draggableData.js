"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDraggableData = getDraggableData;
exports.updateDraggableData = updateDraggableData;
exports.updateDragFragment = updateDragFragment;
exports.updateDropHolder = updateDropHolder;
exports.updateDragHander = updateDragHander;

/* eslint-disable no-underscore-dangle */
function checkDraggableData(controller, draggableData) {
  if (!draggableData) return true;
  const {
    dragFragment,
    dropHolder
  } = draggableData;
  const {
    key
  } = dropHolder || {};
  const {
    document
  } = controller.value;

  if (dragFragment && key && dragFragment.isContainTable() && controller.query('isNodeInTable', document.getNode(key))) {
    // 不允许表格拖入表格
    return false;
  }

  return true;
}

function getDraggableData(controller) {
  return controller.value.data._draggableData;
}

function updateDraggableData(controller, draggableData) {
  if (!checkDraggableData(controller, draggableData)) {
    return controller;
  }

  const {
    _draggableData,
    ...rest
  } = controller.value.data;

  if (!draggableData || !Object.keys(draggableData).length) {
    // 清除
    return controller.setData({ ...rest
    });
  }

  return controller.setData({ ...rest,
    _draggableData: draggableData
  });
}

function updateDragFragment(controller, dragFragment) {
  const {
    _draggableData
  } = controller.value.data;
  const nextDraggableData = { ..._draggableData,
    dragFragment
  };

  if (!nextDraggableData.dragFragment) {
    delete nextDraggableData.dragFragment;
  }

  return updateDraggableData(controller, nextDraggableData);
}

function updateDropHolder(controller, dropHolder) {
  const _draggableData = controller.value.data._draggableData; // 性能考虑，尽量避免触发 setData

  if (!_draggableData?.dropHolder && !dropHolder) {
    return controller;
  }

  if (_draggableData?.dropHolder?.key === dropHolder?.key && _draggableData?.dropHolder?.dropPosition === dropHolder?.dropPosition) {
    return controller;
  }

  const nextDraggableData = { ..._draggableData,
    dropHolder
  };
  return updateDraggableData(controller, nextDraggableData);
}

function updateDragHander(controller, dragHander) {
  const {
    _draggableData
  } = controller.value.data;
  const nextDraggableData = { ..._draggableData,
    dragHander
  };

  if (!nextDraggableData.dragHander) {
    delete nextDraggableData.dragHander;
  }

  return updateDraggableData(controller, nextDraggableData);
}
//# sourceMappingURL=draggableData.js.map