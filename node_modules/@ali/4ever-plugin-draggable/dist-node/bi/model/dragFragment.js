"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _types = require("../types");

var _everUtils = require("@ali/4ever-utils");

const MIME_TYPES = [_everUtils.APPLICATION_CANGJIE_DRAG_FRAGMENT, _everUtils.TEXT_PLAIN, _everUtils.TEXT_LINK, _everUtils.TEXT_HTML];

class DragFragment {
  static createDragFragment(event, nodes, controller) {
    event.stopPropagation();
    const dragFragment = new DragFragment(nodes, controller);
    MIME_TYPES.forEach(mimeType => {
      const mimeData = dragFragment.getData(mimeType);

      if (mimeData) {
        event.dataTransfer.setData(mimeType, mimeData);
      }
    });
    return dragFragment;
  }

  constructor(nodes, controller) {
    this.type = void 0;
    this.fragment = void 0;
    this.mo = void 0;

    if (Array.isArray(nodes)) {
      this.fragment = nodes.map(node => {
        return {
          key: node.key,
          type: node.type,
          nodeJson: node.toJSON(),
          parentKey: controller.value.document.getParent(node.key).key
        };
      });
    } else if (_everCangjie.Inline.isInline(nodes)) {
      this.fragment = {
        key: nodes.key,
        type: nodes.type,
        nodeJson: nodes.toJSON(),
        parentKey: controller.value.document.getParent(nodes.key).key
      };
    } // @ts-ignore


    if (!this.fragment) {
      throw new Error('not support drag nodes');
    }

    this.type = Array.isArray(this.fragment) ? _types.DRAG_TYPE.blocks : _types.DRAG_TYPE.inline;
    this.mo = controller.serializer;
  }

  getTextFromDragNode(node) {
    const mo = this.mo;
    const {
      nodeJson
    } = node;
    const isInline = this.type === _types.DRAG_TYPE.inline;
    let text = '';

    try {
      const nodes = isInline ? _everCangjie.Inline.fromJSON(nodeJson) : _everCangjie.Block.fromJSON(nodeJson);

      const value = _everCangjie.Value.create({
        // @ts-ignore inline 不再强制包裹在 block 内
        document: _everCangjie.Document.create({
          nodes: [nodes]
        })
      });

      text = mo.valueToText(value);
    } catch (e) {// 不阻塞
    }

    return text;
  }

  getDataFromDragNode(mime, node) {
    const mo = this.mo;
    const {
      type: nodeType,
      nodeJson
    } = node;
    const isInline = this.type === _types.DRAG_TYPE.inline;

    if (mime === _everUtils.TEXT_PLAIN) {
      return this.getTextFromDragNode(node);
    }

    if (mime === _everUtils.TEXT_LINK) {
      // 支持图片、附件等拖到浏览器中能打开
      let link = '';

      switch (nodeType) {
        case 'embed':
        case 'image':
          link = nodeJson.data?.src || '';
          break;

        default:
      }

      return link;
    }

    if (mime === _everUtils.TEXT_HTML) {
      // 仅支持部分插件，复杂插件第三方富文本编辑器识别不了
      let html = '';

      switch (nodeType) {
        case 'paragraph':
        case 'heading-1':
        case 'heading-2':
        case 'heading-3':
        case 'heading-4':
        case 'table':
        case 'image':
        case 'hr':
          try {
            const json = isInline ? _everCangjie.Inline.fromJSON(nodeJson) : _everCangjie.Block.fromJSON(nodeJson);
            html = mo.jsonMLToHTML(mo.nodeToJsonML(json));
          } catch (e) {// 不阻塞
          }

          break;

        default:
          // 降级：取纯文本
          html = this.getTextFromDragNode(node);
      }

      return html;
    }

    return '';
  }

  getData(mime) {
    if (mime === _everUtils.APPLICATION_CANGJIE_DRAG_FRAGMENT) {
      return JSON.stringify({
        type: this.type,
        fragment: this.fragment
      });
    }

    const dragNodes = Array.isArray(this.fragment) ? this.fragment : [this.fragment];
    let data = '';
    dragNodes.forEach(node => {
      data += this.getDataFromDragNode(mime, node);
    });
    return data;
  }

  isContainTable() {
    if (!Array.isArray(this.fragment)) return false;
    return this.fragment.some(node => node.type === 'table');
  }

}

var _default = DragFragment;
exports.default = _default;
//# sourceMappingURL=dragFragment.js.map