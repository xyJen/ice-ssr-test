{"version":3,"sources":["../../../../src/bi/commands/dropEventFragment.ts"],"names":["getFragment","dragFragment","type","fragment","DRAG_TYPE","blocks","Array","isArray","nodes","map","block","Block","fromJSON","nodeJson","Document","create","inline","key","node","Inline","dropEventFragment","controller","payload","selection","value","serializer","valueToJsonML","Value","document","command","Commands","insertFragmentAtRange","logger","sum","e","console","warn"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,SAASA,WAAT,CAAqBC,YAArB,EAAsD;AACpD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,YAAjB;AACA,MAAIE,QAAyB,GAAG,IAAhC;;AACA,MAAID,IAAI,KAAKE,iBAAUC,MAAnB,IAA6BC,KAAK,CAACC,OAAN,CAAcN,YAAY,CAACE,QAA3B,CAAjC,EAAuE;AACrE,UAAMK,KAAK,GAAGP,YAAY,CAACE,QAAb,CAAsBM,GAAtB,CAA2BC,KAAD,IAAW;AACjD,aAAOC,mBAAMC,QAAN,CAAe,EACpB,GAAGF,KAAK,CAACG;AADW,OAAf,CAAP;AAGD,KAJa,CAAd;AAMAV,IAAAA,QAAQ,GAAGW,sBAASC,MAAT,CAAgB;AACzBP,MAAAA;AADyB,KAAhB,CAAX;AAGD,GAVD,MAUO,IAAIN,IAAI,KAAKE,iBAAUY,MAAnB,IAA8Bf,YAAY,CAACE,QAAd,CAA2Cc,GAA5E,EAAiF;AACtF,UAAMC,IAAI,GAAGC,oBAAOP,QAAP,CAAiBX,YAAY,CAACE,QAAd,CAA2CU,QAA3D,CAAb;;AACA,UAAMH,KAAK,GAAGC,mBAAMI,MAAN,CAAa;AACzBb,MAAAA,IAAI,EAAE,WADmB;AAEzBM,MAAAA,KAAK,EAAE,CAACU,IAAD;AAFkB,KAAb,CAAd;;AAIAf,IAAAA,QAAQ,GAAGW,sBAASC,MAAT,CAAgB;AACzBP,MAAAA,KAAK,EAAE,CAACE,KAAD;AADkB,KAAhB,CAAX;AAGD;;AAED,SAAOP,QAAP;AACD;;AAEc,SAASiB,iBAAT,CAA2BC,UAA3B,EAAmDC,OAAnD,EAAgF;AAC7F,QAAM;AAAErB,IAAAA;AAAF,MAAmBqB,OAAzB;AACA,MAAI,CAACrB,YAAL,EAAmB,OAAOoB,UAAP;AAEnB,QAAM;AAAEE,IAAAA;AAAF,MAAgBF,UAAU,CAACG,KAAjC;AACA,MAAIrB,QAAJ;;AAGA,MAAI;AACFA,IAAAA,QAAQ,GAAGH,WAAW,CAACC,YAAD,CAAtB,CADE,CAEF;;AACAoB,IAAAA,UAAU,CAACI,UAAX,CAAsBC,aAAtB,CAAoCC,mBAAMZ,MAAN,CAAa;AAAEa,MAAAA,QAAQ,EAAEzB;AAAZ,KAAb,CAApC;;AAEA,QAAIA,QAAJ,EAAc;AACZkB,MAAAA,UAAU,CAACQ,OAAX,CAAmBC,sBAASC,qBAA5B,EAAmDR,SAAnD,EAA8DpB,QAA9D;AACD;;AACD6B,wBAAOC,GAAP,CAAW,eAAX;AACD,GATD,CASE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb;;AACAF,wBAAOC,GAAP,CAAW,sBAAX;AACD;;AAED,SAAOZ,UAAP;AACD","sourcesContent":["import { Controller, Commands, Document, Block, Value, Inline } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport { DraggableDataProps, DRAG_TYPE, DragFragmentProps, DragInlineProps } from '../types';\n\nfunction getFragment(dragFragment: DragFragmentProps) {\n  const { type } = dragFragment;\n  let fragment: Document | null = null;\n  if (type === DRAG_TYPE.blocks && Array.isArray(dragFragment.fragment)) {\n    const nodes = dragFragment.fragment.map((block) => {\n      return Block.fromJSON({\n        ...block.nodeJson,\n      });\n    });\n\n    fragment = Document.create({\n      nodes,\n    });\n  } else if (type === DRAG_TYPE.inline && (dragFragment.fragment as DragInlineProps).key) {\n    const node = Inline.fromJSON((dragFragment.fragment as DragInlineProps).nodeJson);\n    const block = Block.create({\n      type: 'paragraph',\n      nodes: [node],\n    });\n    fragment = Document.create({\n      nodes: [block],\n    });\n  }\n\n  return fragment;\n}\n\nexport default function dropEventFragment(controller: Controller, payload: DraggableDataProps) {\n  const { dragFragment } = payload;\n  if (!dragFragment) return controller;\n\n  const { selection } = controller.value;\n  let fragment;\n\n\n  try {\n    fragment = getFragment(dragFragment);\n    // 校验，若包含不合法数据直接放弃本次拖拽\n    controller.serializer.valueToJsonML(Value.create({ document: fragment }));\n\n    if (fragment) {\n      controller.command(Commands.insertFragmentAtRange, selection, fragment);\n    }\n    logger.sum('drag_fragment');\n  } catch (e) {\n    console.warn(e);\n    logger.sum('drag_fragment_failed');\n  }\n\n  return controller;\n}\n"],"file":"dropEventFragment.js"}