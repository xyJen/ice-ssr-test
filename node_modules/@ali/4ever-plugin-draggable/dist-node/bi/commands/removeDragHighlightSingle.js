"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = removeDragHighlightSingle;

var _everPluginHeading = require("@ali/4ever-plugin-heading");

var _getDragNodes = require("../utils/getDragNodes");

var _domUtils = require("../utils/domUtils");

var _utils = require("../utils");

const {
  Heading1
} = _everPluginHeading.Heading;
/**
 * 给已添加高亮可拖拽元素移除高亮（dom操作）
 * 不会引起 controller.value 变更
 */

function removeDragHighlightSingle(controller, payload) {
  const {
    key,
    isTableHighlight = false,
    type = 'hover'
  } = payload;
  const block = controller.value.document.getNode(key || '');
  if (!block) return controller;
  const blocks = (0, _getDragNodes.getSiblingDraggableBlocks)(controller, block); // 若支持议题拖拽，则议题的背景色需要统一

  const config = controller.query('getDraggableConfig');

  if (block?.data?.calloutPr || config && config.enableSubjectGroup && Heading1.isHeading1(block) && block.data.subjectPr) {
    const group = (0, _domUtils.findDOMNodeByKey)(`${block.key}-group`);

    if (group) {
      if (isTableHighlight) {
        (0, _domUtils.removeDragTableHightlightSingle)(group);
      } else {
        (0, _domUtils.removeDragHightlightSingle)(group);
      }

      return controller;
    }
  }

  const enableBorderHighlight = controller.query('enableBorderHighlight');
  blocks?.forEach(node => {
    const dom = (0, _utils.getClosestDom)(node);

    if (isTableHighlight) {
      (0, _domUtils.removeDragTableHightlightSingle)(dom);
    } else {
      (0, _domUtils.removeDragHightlightSingle)(dom);
    }
  });

  if (blocks && enableBorderHighlight) {
    controller.dispatch('removeHighlight', {
      node: blocks,
      type,
      reason: 'dragBtn'
    });
  }

  return controller;
}
//# sourceMappingURL=removeDragHighlightSingle.js.map