{"version":3,"sources":["../../../../src/bi/commands/updateImageDropHolder.ts"],"names":["updateImageDropHolder","controller","payload","dropHolder","dispatch","event","command","Commands","blur","focus"],"mappings":";;;;;;;;;AAAA;;AACA;;AAKA;;AAEe,SAASA,qBAAT,CAA+BC,UAA/B,EAAuDC,OAAvD,EAA+F;AAC5G,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA;AAAxB,MAAkCH,OAAxC;;AACA,MAAIC,UAAJ,EAAgB;AACdF,IAAAA,UAAU,CAACK,OAAX,CAAmBC,sBAASC,IAA5B;AACAJ,IAAAA,QAAQ,CAAC,+BAAiBD,UAAjB,CAAD,CAAR;AACD,GAHD,MAGO;AACLF,IAAAA,UAAU,CAACK,OAAX,CAAmBC,sBAASE,KAA5B;AACA,wCAAsBJ,KAAtB,EAA6BJ,UAA7B;AACAG,IAAAA,QAAQ,CAAC,+BAAD,CAAR;AACD;AACF","sourcesContent":["import { Controller, Commands } from '@ali/4ever-cangjie';\nimport {\n  clearDropHolder,\n  updateDropHolder,\n  IUpdateImageDropHolderPayload,\n} from '../actions';\nimport dragOverInlineHandler from '../dragEventHandlers/dragOverInlineHandler';\n\nexport default function updateImageDropHolder(controller: Controller, payload: IUpdateImageDropHolderPayload) {\n  const { dropHolder, dispatch, event } = payload;\n  if (dropHolder) {\n    controller.command(Commands.blur);\n    dispatch(updateDropHolder(dropHolder));\n  } else {\n    controller.command(Commands.focus);\n    dragOverInlineHandler(event, controller);\n    dispatch(clearDropHolder());\n  }\n}\n"],"file":"updateImageDropHolder.js"}