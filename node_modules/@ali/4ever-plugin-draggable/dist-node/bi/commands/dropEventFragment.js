"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dropEventFragment;

var _everCangjie = require("@ali/4ever-cangjie");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _types = require("../types");

function getFragment(dragFragment) {
  const {
    type
  } = dragFragment;
  let fragment = null;

  if (type === _types.DRAG_TYPE.blocks && Array.isArray(dragFragment.fragment)) {
    const nodes = dragFragment.fragment.map(block => {
      return _everCangjie.Block.fromJSON({ ...block.nodeJson
      });
    });
    fragment = _everCangjie.Document.create({
      nodes
    });
  } else if (type === _types.DRAG_TYPE.inline && dragFragment.fragment.key) {
    const node = _everCangjie.Inline.fromJSON(dragFragment.fragment.nodeJson);

    const block = _everCangjie.Block.create({
      type: 'paragraph',
      nodes: [node]
    });

    fragment = _everCangjie.Document.create({
      nodes: [block]
    });
  }

  return fragment;
}

function dropEventFragment(controller, payload) {
  const {
    dragFragment
  } = payload;
  if (!dragFragment) return controller;
  const {
    selection
  } = controller.value;
  let fragment;

  try {
    fragment = getFragment(dragFragment); // 校验，若包含不合法数据直接放弃本次拖拽

    controller.serializer.valueToJsonML(_everCangjie.Value.create({
      document: fragment
    }));

    if (fragment) {
      controller.command(_everCangjie.Commands.insertFragmentAtRange, selection, fragment);
    }

    _everLogger.default.sum('drag_fragment');
  } catch (e) {
    console.warn(e);

    _everLogger.default.sum('drag_fragment_failed');
  }

  return controller;
}
//# sourceMappingURL=dropEventFragment.js.map