"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginHeading = require("@ali/4ever-plugin-heading");

var _types = require("../types");

var _getRangeFromDragEvent = require("../utils/getRangeFromDragEvent");

var _dragOverBlockHandler = _interopRequireDefault(require("./dragOverBlockHandler"));

/* eslint-disable react/no-find-dom-node */

/**
 * 议题边距 40px
 */
const SUBJECT_MARGIN = 40;
/**
 * 议题拖拽至议题区域内
 * @param event
 * @param controller
 * @param subject
 * @returns
 */

function dropToSubject(event, controller, subject) {
  const {
    subjectPr = {}
  } = subject.data; // 先通过 id 找，找不到再通过 key 找

  const subjectDOM = document.getElementById(subjectPr.id || '') || _everCangjie.domUtils.findDOMNode(`${subject.key}-group`);

  if (subjectDOM) {
    // 议题的 Rect 取整个区块的大小再加上边距距离
    const clientRect = subjectDOM.getBoundingClientRect();
    const rect = {
      top: clientRect.top - SUBJECT_MARGIN / 2,
      left: clientRect.left,
      width: clientRect.width,
      height: clientRect.height + SUBJECT_MARGIN
    };
    const dropPosition = event.clientY < rect.top + rect.height / 2 ? _types.DROP_POSITION.before : _types.DROP_POSITION.after;
    const dropBlock = dropPosition === _types.DROP_POSITION.before ? subject : controller.query('getSubjectEndBlock', subject); // dropBlock 不存在

    if (!dropBlock) {
      return null;
    }

    return {
      type: dropBlock.type,
      key: dropBlock.key,
      dropPosition,
      rect
    };
  }

  return null;
}
/**
 * 议题拖拽至高亮块区域内
 * @param event
 * @param controller
 * @param block
 * @returns
 */


function dropToCallout(event, controller, block) {
  const calloutStartBlock = controller.query('getCalloutStartBlock', block);

  if (!calloutStartBlock) {
    return null;
  }

  const calloutDOM = _everCangjie.domUtils.findDOMNode(`${calloutStartBlock.key}-group`);

  if (calloutDOM) {
    const clientRect = calloutDOM.getBoundingClientRect();
    const {
      document
    } = controller.value;
    let dropPosition;
    let dropBlock;
    let rect; // drop 落在高亮块上方

    if (event.clientY < clientRect.top + clientRect.height / 2) {
      const prevBlock = document.getPreviousBlock(calloutStartBlock.key);

      if (prevBlock) {
        dropPosition = _types.DROP_POSITION.after;
        dropBlock = prevBlock;
        rect = _everCangjie.domUtils.findDOMNode(prevBlock.key).getBoundingClientRect();
      } else {
        dropPosition = _types.DROP_POSITION.before;
        dropBlock = calloutStartBlock;
        rect = calloutDOM.getBoundingClientRect();
      }
    } else {
      // drop 落在高亮块下方
      const calloutEndBlock = controller.query('getCalloutEndBlock', block);
      const nextBlock = calloutEndBlock && document.getNextBlock(calloutEndBlock.key);

      if (nextBlock) {
        dropPosition = _types.DROP_POSITION.before;
        dropBlock = nextBlock;
        rect = _everCangjie.domUtils.findDOMNode(nextBlock.key).getBoundingClientRect();
      } else if (calloutEndBlock) {
        dropPosition = _types.DROP_POSITION.after;
        dropBlock = calloutEndBlock;
        rect = calloutDOM.getBoundingClientRect();
      } else {
        return null;
      }
    }

    return {
      type: dropBlock.type,
      key: dropBlock.key,
      dropPosition,
      rect
    };
  }

  return null;
}

function dragOverSubjectHandler(event, controller, zoom) {
  const block = (0, _getRangeFromDragEvent.getBlockFromDragEvent)(controller, event, zoom); // block 为找到则不处理

  if (!block) {
    return null;
  } // 若 block 在议题区块内，则只能落在议题前后


  const subjectStartBlock = controller.query('getSubjectStartBlock', block);

  if (subjectStartBlock) {
    return dropToSubject(event, controller, subjectStartBlock);
  } // 若 block 是高亮块，则只能落在区块前后


  if (_everPluginHeading.Heading.isCallout(block)) {
    return dropToCallout(event, controller, block);
  } // 若不在区块内，则直接返回 block 的 drop 点


  return (0, _dragOverBlockHandler.default)(event, controller);
}

var _default = dragOverSubjectHandler;
exports.default = _default;
//# sourceMappingURL=dragOverSubjectHandler.js.map