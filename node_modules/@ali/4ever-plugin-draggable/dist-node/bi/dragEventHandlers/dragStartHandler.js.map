{"version":3,"sources":["../../../../src/bi/dragEventHandlers/dragStartHandler.ts"],"names":["DRAG_BLOCK_OFFSET","dragStartHandler","event","controller","dragHander","inlineKey","key","viewKey","dataKey","query","thumbnail","dataTransfer","effectAllowed","x","y","environment","IS_SAFARI","scrollableThumbnail","querySelector","SCROLLABLE_ATTRIBUTE_KEY","scrollLeft","scrollTop","setDragImage","run"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA,MAAMA,iBAAiB,GAAG,EAA1B;;AAEA,MAAMC,gBAAgB,GAAG,CACvBC,KADuB,EAEvBC,UAFuB,EAGvBC,UAHuB,EAIvBC,SAJuB,KAKpB;AACH;AACA,MAAI,CAACD,UAAD,IAAe,CAACC,SAApB,EAA+B;AAE/B,QAAMC,GAAG,GAAGD,SAAS,IAAID,UAAU,EAAEG,OAArC;AACA,MAAI,CAACD,GAAL,EAAU,OALP,CAMH;;AACA,QAAME,OAAO,GAAGL,UAAU,CAACM,KAAX,CAAiB,YAAjB,EAA+BH,GAA/B,KAAuCA,GAAvD;AAEA,QAAMI,SAAS,GAAG,gCAAkBP,UAAlB,EAA8B;AAC9CE,IAAAA,SAD8C;AAE9CE,IAAAA,OAAO,EAAEH,UAAU,EAAEG;AAFyB,GAA9B,EAGfJ,UAAU,CAACM,KAAX,CAAiB,oBAAjB,CAHe,CAAlB,CATG,CAcH;;AACAP,EAAAA,KAAK,CAACS,YAAN,CAAmBC,aAAnB,GAAmC,UAAnC,CAfG,CAiBH;;AACA,MAAIF,SAAJ,EAAe;AACb;AACA,QAAIG,CAAC,GAAGR,SAAS,GAAG,CAAH,GAAOL,iBAAxB;AACA,QAAIc,CAAC,GAAG,CAAR;;AACA,QAAI,CAACT,SAAD,IAAc,CAACU,yBAAYC,SAA/B,EAA0C;AACxC,YAAMC,mBAAmB,GAAGP,SAAS,CAACQ,aAAV,CAAyB,IAAGC,mCAAyB,GAArD,CAA5B;AACA,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA4BJ,mBAAmB,IAAI,EAAzD,CAFwC,CAGxC;;AACAJ,MAAAA,CAAC,GAAGO,UAAU,IAAIP,CAAlB;AACAC,MAAAA,CAAC,GAAGO,SAAS,IAAIP,CAAjB;AACD;;AACDZ,IAAAA,KAAK,CAACS,YAAN,CAAmBW,YAAnB,CAAgCZ,SAAhC,EAA2CG,CAA3C,EAA8CC,CAA9C;AACD;;AAED,SAAOX,UAAU,CAACoB,GAAX,CAAe,UAAf,EAA2B,iCAAmB;AACnDrB,IAAAA,KADmD;AAEnDI,IAAAA,GAAG,EAAEE;AAF8C,GAAnB,CAA3B,CAAP;AAID,CAzCD;;eA2CeP,gB","sourcesContent":["import { Controller, environment } from '@ali/4ever-cangjie';\nimport { updateDragFragment } from '../actions';\nimport getDragThumbnails from '../utils/getDragThumbnails';\nimport { SCROLLABLE_ATTRIBUTE_KEY } from '../constants';\nimport { DragHanderProps } from '../types';\n\nconst DRAG_BLOCK_OFFSET = 20;\n\nconst dragStartHandler = (\n  event: React.DragEvent,\n  controller: Controller,\n  dragHander?: DragHanderProps,\n  inlineKey?: string,\n) => {\n  // 仅支持从 行内元素或抓手 发起的拖拽，不识别复杂组件内部冒泡的拖拽事件\n  if (!dragHander && !inlineKey) return;\n\n  const key = inlineKey || dragHander?.viewKey;\n  if (!key) return;\n  // 通过 query 在排版模式下进行 key 转换\n  const dataKey = controller.query('getDataKey', key) || key;\n\n  const thumbnail = getDragThumbnails(controller, {\n    inlineKey,\n    viewKey: dragHander?.viewKey,\n  }, controller.query('getDraggableConfig'));\n\n  // 允许复制和移动\n  event.dataTransfer.effectAllowed = 'copyMove';\n\n  // 自定义缩略图\n  if (thumbnail) {\n    // 行内元素暂时不支持滚动剪裁\n    let x = inlineKey ? 0 : DRAG_BLOCK_OFFSET;\n    let y = 0;\n    if (!inlineKey && !environment.IS_SAFARI) {\n      const scrollableThumbnail = thumbnail.querySelector(`[${SCROLLABLE_ATTRIBUTE_KEY}]`);\n      const { scrollLeft, scrollTop } = scrollableThumbnail || {};\n      // TODO: 根据滚动矫正缩略图偏移，后续再看看有什么更简单的办法\n      x = scrollLeft || x;\n      y = scrollTop || y;\n    }\n    event.dataTransfer.setDragImage(thumbnail, x, y);\n  }\n\n  return controller.run('onAction', updateDragFragment({\n    event,\n    key: dataKey,\n  }));\n};\n\nexport default dragStartHandler;\n"],"file":"dragStartHandler.js"}