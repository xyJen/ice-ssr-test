"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkAndUpdatePosition = checkAndUpdatePosition;
exports.default = void 0;

var _lodash = require("lodash");

var _dragOverBlockHandler = _interopRequireDefault(require("./dragOverBlockHandler"));

var _dragOverInlineHandler = _interopRequireDefault(require("./dragOverInlineHandler"));

var _dragOverUnknownHandler = _interopRequireDefault(require("./dragOverUnknownHandler"));

var _autoScroll = _interopRequireDefault(require("../utils/autoScroll"));

var _actions = require("../actions");

var _draggableData = require("../model/draggableData");

var _types = require("../types");

var _utils = require("../utils");

var _dragOverSubjectHandler = _interopRequireDefault(require("./dragOverSubjectHandler"));

var _dragOverImageHandler = _interopRequireDefault(require("./dragOverImageHandler"));

const threshold = 5;
let lastPosition;

function checkAndUpdatePosition(x, y) {
  let res = true;

  if (x === undefined || y === undefined) {
    lastPosition = undefined;
    return res;
  }

  if (lastPosition && Math.abs(x - lastPosition.x) < threshold && Math.abs(y - lastPosition.y) < threshold) {
    res = false;
  }

  if (res) {
    lastPosition = {
      x,
      y
    };
  }

  return res;
}

const dragOverHandler = (0, _lodash.throttle)((event, controller, dispatch, zoom, draggableConfig) => {
  const {
    dragFragment
  } = (0, _draggableData.getDraggableData)(controller) || {}; // 若 fragment 是议题区块，则不能分割其他议题
  // TODO: callout 参照实现

  if (dragFragment && (0, _utils.isSubjectFragment)(dragFragment)) {
    const nextDropHolderData = (0, _dragOverSubjectHandler.default)(event, controller, zoom);

    if (nextDropHolderData) {
      dispatch((0, _actions.updateDropHolder)(nextDropHolderData));
    }
  } else if (dragFragment && (0, _utils.isImageFragment)(dragFragment)) {
    (0, _dragOverImageHandler.default)(event, controller, dispatch, zoom);
  } else if (dragFragment?.type === _types.DRAG_TYPE.blocks) {
    const nextDropHolderData = (0, _dragOverBlockHandler.default)(event, controller, zoom);

    if (nextDropHolderData) {
      dispatch((0, _actions.updateDropHolder)(nextDropHolderData));
    }
  } else if (dragFragment?.type === _types.DRAG_TYPE.inline) {
    (0, _dragOverInlineHandler.default)(event, controller);
  } else {
    (0, _dragOverUnknownHandler.default)(event, controller);
  }

  (0, _autoScroll.default)(event, draggableConfig?.autoScrollThreshold);
}, 50, {
  leading: true
});
var _default = dragOverHandler;
exports.default = _default;
//# sourceMappingURL=dragOverHandler.js.map