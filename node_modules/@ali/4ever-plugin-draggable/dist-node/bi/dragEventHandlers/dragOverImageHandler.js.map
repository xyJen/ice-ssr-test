{"version":3,"sources":["../../../../src/bi/dragEventHandlers/dragOverImageHandler.ts"],"names":["updateBlockDropHolder","controller","dropBlock","event","test","key","undefined","dropKey","query","viewKeys","clientX","clientY","nextDropHolderData","length","dragOverImageHandler","dispatch","zoom","draggableData","dragFragment","fragment","type","block","run","dropHolder"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA,SAASA,qBAAT,CACEC,UADF,EAEEC,SAFF,EAGEC,KAHF,EAIE;AACA;AACA,MAAI,iBAAiBC,IAAjB,CAAsBF,SAAS,CAACG,GAAhC,CAAJ,EAA0C,OAAOC,SAAP;AAC1C,QAAMC,OAAO,GAAGN,UAAU,CAACO,KAAX,CAAiB,YAAjB,EAA+BN,SAAS,CAACG,GAAzC,KAAiDH,SAAS,CAACG,GAA3E;AACA,QAAMI,QAAQ,GAAGR,UAAU,CAACO,KAAX,CAAiB,aAAjB,EAAgCD,OAAhC,CAAjB;AACA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBR,KAA7B;AACA,MAAIS,kBAAkB,GAAG,kCAAoBX,UAApB,EAAgCC,SAAhC,EAA2CQ,OAA3C,EAAoDC,OAApD,EAA6D,IAA7D,CAAzB;;AACA,MAAIC,kBAAkB,IAAIH,QAAQ,EAAEI,MAAV,GAAmB,CAA7C,EAAgD;AAC9C;AACAD,IAAAA,kBAAkB,GAAG,EACnB,GAAGA,kBADgB;AAEnB,SAAG,4CAA8BX,UAA9B,EAA0CE,KAA1C,EAAiDM,QAAjD;AAFgB,KAArB;AAID;;AACD,SAAOG,kBAAP;AACD;;AAED,SAASE,oBAAT,CAA8BX,KAA9B,EAAgDF,UAAhD,EAAwEc,QAAxE,EAAuGC,IAAvG,EAA2H;AACzH,QAAMC,aAAa,GAAG,qCAAiBhB,UAAjB,CAAtB;AACA,MAAI,CAACgB,aAAL,EAAoB;AAEpB,QAAM;AAAEC,IAAAA;AAAF,MAAmBD,aAAzB,CAJyH,CAKzH;;AACA,MAAI,CAACC,YAAD,IAAkBA,YAAY,CAACC,QAAd,CAA2CC,IAA3C,KAAoD,OAAzE,EAAkF;AAElF,QAAMC,KAAK,GAAG,kDAAsBpB,UAAtB,EAAkCE,KAAlC,EAAyCa,IAAzC,EAA+C,IAA/C,CAAd;;AACA,MAAI,CAACK,KAAL,EAAY;AACV;AACApB,IAAAA,UAAU,CAACqB,GAAX,CAAe,UAAf,EAA2B,oCAAsB;AAC/CP,MAAAA,QAD+C;AAE/CZ,MAAAA,KAF+C;AAG/CoB,MAAAA,UAAU,EAAE;AAHmC,KAAtB,CAA3B;AAKA,wCAAsBpB,KAAtB,EAA6BF,UAA7B;AACA;AACD;;AACD,QAAMW,kBAAkB,GAAGZ,qBAAqB,CAACC,UAAD,EAAaoB,KAAb,EAA6BlB,KAA7B,CAAhD;AACAF,EAAAA,UAAU,CAACqB,GAAX,CAAe,UAAf,EAA2B,oCAAsB;AAC/CP,IAAAA,QAD+C;AAE/CZ,IAAAA,KAF+C;AAG/CoB,IAAAA,UAAU,EAAEX;AAHmC,GAAtB,CAA3B;AAKD;;eAEcE,oB","sourcesContent":["import { Controller, Block } from '@ali/4ever-cangjie';\nimport getDropPosFromBlock from '../utils/getDropPosFromBlock';\nimport { getBlockFromDragEvent } from '../utils/getRangeFromDragEvent';\nimport getDropHolderDataFromViewKeys from '../utils/getDropHolderDataFromViewKeys';\nimport { getDraggableData } from '../model/draggableData';\nimport dragOverInlineHandler from './dragOverInlineHandler';\nimport { DragInlineProps } from '../types';\nimport { updateImageDropHolder } from '../actions';\n\nfunction updateBlockDropHolder(\n  controller: Controller,\n  dropBlock: Block,\n  event: DragEvent,\n) {\n  // 不允许落到排版相关位置\n  if (/^page|^section/.test(dropBlock.key)) return undefined;\n  const dropKey = controller.query('getDataKey', dropBlock.key) || dropBlock.key;\n  const viewKeys = controller.query('getViewKeys', dropKey);\n  const { clientX, clientY } = event;\n  let nextDropHolderData = getDropPosFromBlock(controller, dropBlock, clientX, clientY, true);\n  if (nextDropHolderData && viewKeys?.length > 1) {\n    // 兼容分页下段落跨页情形\n    nextDropHolderData = {\n      ...nextDropHolderData,\n      ...getDropHolderDataFromViewKeys(controller, event, viewKeys),\n    };\n  }\n  return nextDropHolderData;\n}\n\nfunction dragOverImageHandler(event: DragEvent, controller: Controller, dispatch: React.Dispatch<any>, zoom: number): void {\n  const draggableData = getDraggableData(controller);\n  if (!draggableData) return;\n\n  const { dragFragment } = draggableData;\n  // 仅处理图片\n  if (!dragFragment || (dragFragment.fragment as DragInlineProps).type !== 'image') return;\n\n  const block = getBlockFromDragEvent(controller, event, zoom, true);\n  if (!block) {\n    // 段中拖拽\n    controller.run('onAction', updateImageDropHolder({\n      dispatch,\n      event,\n      dropHolder: null,\n    }));\n    dragOverInlineHandler(event, controller);\n    return;\n  }\n  const nextDropHolderData = updateBlockDropHolder(controller, block as Block, event);\n  controller.run('onAction', updateImageDropHolder({\n    dispatch,\n    event,\n    dropHolder: nextDropHolderData,\n  }));\n}\n\nexport default dragOverImageHandler;\n"],"file":"dragOverImageHandler.js"}