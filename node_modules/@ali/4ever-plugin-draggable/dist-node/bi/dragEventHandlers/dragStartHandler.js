"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../actions");

var _getDragThumbnails = _interopRequireDefault(require("../utils/getDragThumbnails"));

var _constants = require("../constants");

const DRAG_BLOCK_OFFSET = 20;

const dragStartHandler = (event, controller, dragHander, inlineKey) => {
  // 仅支持从 行内元素或抓手 发起的拖拽，不识别复杂组件内部冒泡的拖拽事件
  if (!dragHander && !inlineKey) return;
  const key = inlineKey || dragHander?.viewKey;
  if (!key) return; // 通过 query 在排版模式下进行 key 转换

  const dataKey = controller.query('getDataKey', key) || key;
  const thumbnail = (0, _getDragThumbnails.default)(controller, {
    inlineKey,
    viewKey: dragHander?.viewKey
  }, controller.query('getDraggableConfig')); // 允许复制和移动

  event.dataTransfer.effectAllowed = 'copyMove'; // 自定义缩略图

  if (thumbnail) {
    // 行内元素暂时不支持滚动剪裁
    let x = inlineKey ? 0 : DRAG_BLOCK_OFFSET;
    let y = 0;

    if (!inlineKey && !_everCangjie.environment.IS_SAFARI) {
      const scrollableThumbnail = thumbnail.querySelector(`[${_constants.SCROLLABLE_ATTRIBUTE_KEY}]`);
      const {
        scrollLeft,
        scrollTop
      } = scrollableThumbnail || {}; // TODO: 根据滚动矫正缩略图偏移，后续再看看有什么更简单的办法

      x = scrollLeft || x;
      y = scrollTop || y;
    }

    event.dataTransfer.setDragImage(thumbnail, x, y);
  }

  return controller.run('onAction', (0, _actions.updateDragFragment)({
    event,
    key: dataKey
  }));
};

var _default = dragStartHandler;
exports.default = _default;
//# sourceMappingURL=dragStartHandler.js.map