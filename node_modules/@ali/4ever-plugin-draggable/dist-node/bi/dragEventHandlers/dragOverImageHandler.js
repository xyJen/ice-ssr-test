"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _getDropPosFromBlock = _interopRequireDefault(require("../utils/getDropPosFromBlock"));

var _getRangeFromDragEvent = require("../utils/getRangeFromDragEvent");

var _getDropHolderDataFromViewKeys = _interopRequireDefault(require("../utils/getDropHolderDataFromViewKeys"));

var _draggableData = require("../model/draggableData");

var _dragOverInlineHandler = _interopRequireDefault(require("./dragOverInlineHandler"));

var _actions = require("../actions");

function updateBlockDropHolder(controller, dropBlock, event) {
  // 不允许落到排版相关位置
  if (/^page|^section/.test(dropBlock.key)) return undefined;
  const dropKey = controller.query('getDataKey', dropBlock.key) || dropBlock.key;
  const viewKeys = controller.query('getViewKeys', dropKey);
  const {
    clientX,
    clientY
  } = event;
  let nextDropHolderData = (0, _getDropPosFromBlock.default)(controller, dropBlock, clientX, clientY, true);

  if (nextDropHolderData && viewKeys?.length > 1) {
    // 兼容分页下段落跨页情形
    nextDropHolderData = { ...nextDropHolderData,
      ...(0, _getDropHolderDataFromViewKeys.default)(controller, event, viewKeys)
    };
  }

  return nextDropHolderData;
}

function dragOverImageHandler(event, controller, dispatch, zoom) {
  const draggableData = (0, _draggableData.getDraggableData)(controller);
  if (!draggableData) return;
  const {
    dragFragment
  } = draggableData; // 仅处理图片

  if (!dragFragment || dragFragment.fragment.type !== 'image') return;
  const block = (0, _getRangeFromDragEvent.getBlockFromDragEvent)(controller, event, zoom, true);

  if (!block) {
    // 段中拖拽
    controller.run('onAction', (0, _actions.updateImageDropHolder)({
      dispatch,
      event,
      dropHolder: null
    }));
    (0, _dragOverInlineHandler.default)(event, controller);
    return;
  }

  const nextDropHolderData = updateBlockDropHolder(controller, block, event);
  controller.run('onAction', (0, _actions.updateImageDropHolder)({
    dispatch,
    event,
    dropHolder: nextDropHolderData
  }));
}

var _default = dragOverImageHandler;
exports.default = _default;
//# sourceMappingURL=dragOverImageHandler.js.map