{"version":3,"sources":["../../../../src/bi/dragEventHandlers/dragOverBlockHandler.ts"],"names":["updateBlockDropHolder","controller","dropBlock","event","dragFragment","document","value","fragment","length","undefined","test","type","key","dropKey","query","some","node","isContainTable","viewKeys","clientX","clientY","nextDropHolderData","dragOverBlockHandler","zoom","draggableData","DRAG_TYPE","blocks","block"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAGA;;AAMA,SAASA,qBAAT,CACEC,UADF,EAEEC,SAFF,EAGEC,KAHF,EAIEC,YAJF,EAKE;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeJ,UAAU,CAACK,KAAhC;AACA,QAAMC,QAAQ,GAAGH,YAAY,CAACG,QAA9B;AACA,MAAI,CAACA,QAAQ,CAACC,MAAd,EAAsB,OAAOC,SAAP,CAHtB,CAIA;;AACA,MAAI,UAAUC,IAAV,CAAeR,SAAS,CAACS,IAAzB,KAAkC,iBAAiBD,IAAjB,CAAsBR,SAAS,CAACU,GAAhC,CAAtC,EAA4E,OAAOH,SAAP,CAL5E,CAOA;;AACA,QAAMI,OAAO,GAAGZ,UAAU,CAACa,KAAX,CAAiB,YAAjB,EAA+BZ,SAAS,CAACU,GAAzC,KAAiDV,SAAS,CAACU,GAA3E;AACA,MAAIL,QAAQ,CAACQ,IAAT,CAAeC,IAAD,IAAUA,IAAI,CAACJ,GAAL,KAAaC,OAArC,CAAJ,EAAmD,OAAOJ,SAAP,CATnD,CAWA;;AACA,MACEL,YAAY,CAACa,cAAb,MACGhB,UAAU,CAACa,KAAX,CAAiB,eAAjB,EAAkCZ,SAAlC,EAA6C,IAA7C,CAFL,EAGE,OAAOO,SAAP;AAEF,QAAMS,QAAQ,GAAGjB,UAAU,CAACa,KAAX,CAAiB,aAAjB,EAAgCD,OAAhC,CAAjB;AAEA,QAAM;AAAEM,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBjB,KAA7B;AACA,MAAIkB,kBAAkB,GAAG,kCAAoBpB,UAApB,EAAgCC,SAAhC,EAA2CiB,OAA3C,EAAoDC,OAApD,CAAzB;;AACA,MAAIC,kBAAkB,IAAIH,QAAQ,EAAEV,MAAV,GAAmB,CAA7C,EAAgD;AAC9C;AACAa,IAAAA,kBAAkB,GAAG,EACnB,GAAGA,kBADgB;AAEnB,SAAG,4CAA8BpB,UAA9B,EAA0CE,KAA1C,EAAiDe,QAAjD;AAFgB,KAArB;AAID;;AACD,SAAOG,kBAAP;AACD;;AAEc,SAASC,oBAAT,CACbnB,KADa,EAEbF,UAFa,EAGbsB,IAHa,EAIb;AACA,QAAMC,aAAa,GAAG,qCAAiBvB,UAAjB,CAAtB;AACA,MAAI,CAACuB,aAAL,EAAoB,OAAO,IAAP;AAEpB,QAAM;AAAEpB,IAAAA;AAAF,MAAmBoB,aAAzB,CAJA,CAKA;;AACA,MAAI,CAACpB,YAAD,IAAiBA,YAAY,CAACO,IAAb,KAAsBc,iBAAUC,MAArD,EAA6D,OAAO,IAAP,CAN7D,CAQA;;AACA,QAAMC,KAAK,GAAG,kDAAsB1B,UAAtB,EAAkCE,KAAlC,EAAyCoB,IAAzC,CAAd;AACA,MAAI,CAACI,KAAL,EAAY,OAAO,IAAP;AAEZ,QAAMN,kBAAkB,GAAGrB,qBAAqB,CAACC,UAAD,EAAa0B,KAAb,EAAoBxB,KAApB,EAA2BC,YAA3B,CAAhD;AACA,MAAI,CAACiB,kBAAL,EAAyB,OAAO,IAAP;AACzB,SAAOA,kBAAP;AACD","sourcesContent":["import { Controller, Block } from '@ali/4ever-cangjie';\nimport { getBlockFromDragEvent } from '../utils/getRangeFromDragEvent';\nimport getDropPosFromBlock from '../utils/getDropPosFromBlock';\nimport getDropHolderDataFromViewKeys from '../utils/getDropHolderDataFromViewKeys';\nimport {\n  getDraggableData,\n} from '../model/draggableData';\nimport {\n  DRAG_TYPE,\n  DragBlocksProps,\n  DragFragmentProps,\n} from '../types';\n\nfunction updateBlockDropHolder(\n  controller: Controller,\n  dropBlock: Block,\n  event: DragEvent,\n  dragFragment: DragFragmentProps,\n) {\n  const { document } = controller.value;\n  const fragment = dragFragment.fragment as DragBlocksProps;\n  if (!fragment.length) return undefined;\n  // 不允许落到表格单元、行列 以及 排版相关位置\n  if (/^table-/.test(dropBlock.type) || /^page|^section/.test(dropBlock.key)) return undefined;\n\n  // 不允许拖入到 fragment 中\n  const dropKey = controller.query('getDataKey', dropBlock.key) || dropBlock.key;\n  if (fragment.some((node) => node.key === dropKey)) return undefined;\n\n  // 不允许表格嵌套\n  if (\n    dragFragment.isContainTable()\n    && controller.query('isNodeInTable', dropBlock, true)\n  ) return undefined;\n\n  const viewKeys = controller.query('getViewKeys', dropKey);\n\n  const { clientX, clientY } = event;\n  let nextDropHolderData = getDropPosFromBlock(controller, dropBlock, clientX, clientY);\n  if (nextDropHolderData && viewKeys?.length > 1) {\n    // 兼容分页下段落跨页情形\n    nextDropHolderData = {\n      ...nextDropHolderData,\n      ...getDropHolderDataFromViewKeys(controller, event, viewKeys),\n    };\n  }\n  return nextDropHolderData;\n}\n\nexport default function dragOverBlockHandler(\n  event: DragEvent,\n  controller: Controller,\n  zoom?: number,\n) {\n  const draggableData = getDraggableData(controller);\n  if (!draggableData) return null;\n\n  const { dragFragment } = draggableData;\n  // 只处理 block 元素\n  if (!dragFragment || dragFragment.type !== DRAG_TYPE.blocks) return null;\n\n  // 根据 drag 事件计算命中的 block\n  const block = getBlockFromDragEvent(controller, event, zoom) as Block;\n  if (!block) return null;\n\n  const nextDropHolderData = updateBlockDropHolder(controller, block, event, dragFragment);\n  if (!nextDropHolderData) return null;\n  return nextDropHolderData;\n}\n"],"file":"dragOverBlockHandler.js"}