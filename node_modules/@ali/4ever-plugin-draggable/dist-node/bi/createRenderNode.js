"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderNode;

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _draggable = _interopRequireDefault(require("./components/draggable"));

var _getElementType = _interopRequireDefault(require("./utils/getElementType"));

const _createElement = /*#__PURE__*/React.createElement;

function createRenderNode(config) {
  const {
    draggableInlineElements = {}
  } = config.draggable || {};
  return (props, controller, next) => {
    const {
      node
    } = props;

    if (_everCangjie.Inline.isInline(node)) {
      const type = (0, _getElementType.default)(node); // 排版下有较多诸如 inline-box, float-inline-box, filed 等暂不需要拖拽的行内元素，因此这里默认不开启
      // 优先根据 node.type 判断，以便批量设置（例如批量设置 tag 类可拖拽）

      if (draggableInlineElements[node.type] || draggableInlineElements[type]) {
        return /*#__PURE__*/_createElement(_draggable.default, {
          controller: controller,
          renderNodeProps: props
        }, next());
      }
    }

    return next();
  };
}
//# sourceMappingURL=createRenderNode.js.map