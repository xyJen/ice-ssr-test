"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = moveInlineToDrop;

var _everCangjie = require("@ali/4ever-cangjie");

function splitNodeAtCurrentRange(controller) {
  const {
    value
  } = controller;
  const {
    document
  } = value;
  const {
    start
  } = value.selection.convertToTextPoints(document);
  controller.withoutNormalizing(() => {
    controller.command(_everCangjie.Commands.splitNodeByKey, start.key, start.offset);
  });
}

function moveNodeToCurrentRange(dragNode, controller, isCopy) {
  const {
    value
  } = controller;
  const {
    document,
    selection
  } = value;
  const dragNodePath = document.getPath(dragNode.key);
  const {
    start
  } = selection.convertToTextPoints(document);
  const closestInline = document.getClosestInline(start.key); // 不允许拖拽到 inline 元素内部：start 可能位于行内元素附带的空文本节点或 link 内部

  const dropNode = document.assertNode(closestInline ? closestInline.key : start.key);
  const parent = document.getParent(dropNode.key);
  if (!parent || controller.query('isVoid', parent)) return;
  const dropNodePath = document.getPath(dropNode.key);
  if (!dragNodePath) return;

  const isYounger = _everCangjie.Path.isYounger(dragNodePath, dropNodePath);

  let index = parent.nodes.indexOf(dropNode);

  if (isYounger && !isCopy) {
    index--;
  }

  if (isCopy) {
    const copyedNode = _everCangjie.Inline.fromJSON(dragNode.toJSON());

    controller.command(_everCangjie.Commands.insertNodeByKey, parent.key, index, copyedNode).command(_everCangjie.Commands.focus);
  } else {
    controller.command(_everCangjie.Commands.moveNodeByKey, dragNode.key, parent.key, index);
  }
}

function moveInlineToDrop(controller, dragKey, isCopy) {
  splitNodeAtCurrentRange(controller);
  const {
    value
  } = controller;
  const {
    document,
    selection
  } = value;
  const dragNode = document.getNode(dragKey);
  if (!dragNode || !_everCangjie.Inline.isInline(dragNode)) return;
  const start = selection.getStart(document);

  if (start.isEdgePoint()) {
    controller.command(_everCangjie.Commands.insertEmptyBlock, start);
  }

  moveNodeToCurrentRange(dragNode, controller, isCopy);
}
//# sourceMappingURL=moveInlineToDrop.js.map