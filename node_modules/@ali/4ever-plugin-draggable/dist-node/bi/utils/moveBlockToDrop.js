"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = moveBlockToDrop;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _types = require("../types");

/**
 * 移动节点到 drop 位置
 * @param controller
 * @param dragKey
 * @param dropBlock
 * @param dropPosition
 * @param isCopy
 * @returns 返回移动后的节点
 */
function moveBlockToDrop(controller, dragKey, dropBlock, dropPosition, isCopy) {
  const {
    document
  } = controller.value;

  try {
    const dragBlock = document.getNode(dragKey);
    if (!dragBlock) return undefined;

    if (controller.query('disableDrop', dragBlock, dropBlock)) {
      return undefined;
    }

    const parent = document.getParent(dropBlock.key);
    if (!parent) return null;
    const isDropToTable = controller.query('isNodeInTable', dropBlock, true);

    if (dragBlock.type === 'table' && isDropToTable) {
      // 不允许表格拖入表格
      return null;
    }

    let index = parent.nodes.indexOf(dropBlock);
    const dragPath = document.assertPath(dragBlock.key);
    const dropPath = document.assertPath(dropBlock.key);

    const isYounger = _everCangjie.Path.isYounger(dragPath, dropPath);

    const isSibling = _everCangjie.Path.isSibling(dragPath, dropPath);

    if (isSibling && !isCopy) {
      if (isYounger && dropPosition === _types.DROP_POSITION.before) {
        index -= 1;
      } else if (!isYounger && dropPosition === _types.DROP_POSITION.after) {
        index += 1;
      }
    } else if (dropPosition === _types.DROP_POSITION.after) {
      index += 1;
    } // source 是个 TableCell，需要过滤掉 Cell 节点。


    if (controller.query('isTableCell', dragBlock)) {
      if (dragBlock === dropBlock || dragBlock.getNode(dropBlock.key)) {
        // 拖到了自己的 children，直接返回
        return null;
      }

      if (isCopy) {
        const copyedBlock = _everCangjie.Block.fromJSON(dragBlock.toJSON());

        const doc = _everCangjie.Document.create({
          nodes: copyedBlock.nodes
        });

        controller.command(_everCangjie.Commands.insertFragmentByKey, parent.key, index, doc);
      } else {
        controller.withoutNormalizing(() => {
          const parentPath = document.getPath(parent.key);
          /**
           * 由于河图卡片限制，只能使用 move node 操作。
           * move mode 之后，需要移除 dragBlock，但是此时 dragBlock 已经无法定位了（path、key 均失效了）。
           *
           * 因此这里引入了一个 dummyBlock，先插入到 dragBlock 内部，作为定位使用。
           * 这样移动完了之后，dragBlock 还剩一个 dummyBlock，可以获取最新的 dragBlock 引用。
           */

          const dummyBlock = _everPluginParagraph.Paragraph.create({
            nodes: [_everCangjie.Text.create()]
          });

          controller.command(_everCangjie.Commands.insertNodeByKey, dragBlock.key, 0, dummyBlock); // dragBlock.nodes：旧的 dragBlock 引用，不包含 dummyBlock

          [...dragBlock.nodes].reverse().forEach(n => {
            const path = controller.value.document.getPath(n.key);

            if (path && parentPath) {
              controller.command(_everCangjie.Commands.moveNodeByPath, path, parentPath, index);
            }
          }); // 参考上面注释，这里来获取最新的 dragBlock 引用

          const newDragBlock = controller.value.document.getParent(dummyBlock.key);

          if (newDragBlock) {
            controller.command(_everCangjie.Commands.removeNodeByKey, newDragBlock.key);
          }
        });
      }

      return undefined;
    }

    let draggedBlock = dragBlock;

    if (isCopy) {
      const copyedBlock = _everCangjie.Block.fromJSON(dragBlock.toJSON());

      draggedBlock = copyedBlock;
      controller.command(_everCangjie.Commands.insertNodeByKey, parent.key, index, copyedBlock).command(_everCangjie.Commands.moveToEndOfNode, copyedBlock).command(_everCangjie.Commands.focus);
    } else {
      controller.command(_everCangjie.Commands.moveNodeByKey, dragKey, parent.key, index).command(_everCangjie.Commands.moveToEndOfNode, dragBlock).command(_everCangjie.Commands.focus);
    }

    return draggedBlock;
  } catch (error) {
    _everLogger.default.error(`parse drag fragment failed: ${error.message}`);

    return null;
  }
}
//# sourceMappingURL=moveBlockToDrop.js.map