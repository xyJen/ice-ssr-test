"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isNodeDraggable;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginHeading = require("@ali/4ever-plugin-heading");

var _everPluginImage = require("@ali/4ever-plugin-image");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

function isContainInlineNode(node) {
  return node.nodes.some(n => {
    if (_everCangjie.Inline.isInline(n) && !_everPluginImage.Image.isImage(n)) {
      return true;
    } else if (n.type === 'line') {
      return isContainInlineNode(n);
    }

    return false;
  });
}
/**
 * 判断 node 是否可拖拽
 * @param node
 * @param container
 */


function isNodeDraggable(controller, node) {
  if (_everCangjie.Inline.isInline(node)) return true; // 除文字段落外都可以拖

  if (!_everPluginHeading.Heading.isHeading(node) && !_everPluginParagraph.Paragraph.isParagraph(node)) return true;

  if (isContainInlineNode(node)) {
    // 包含行内节点允许拖拽（类似公式、日期等）
    return true;
  } // PERF: node.text 迭代获取文本更费性能，这里尽量通过直接根据 nodes 判断


  const {
    nodes
  } = node;
  const firstNodeText = nodes[0].text;

  if (nodes.length === 1) {
    return !!firstNodeText;
  }

  if (nodes.length === 3) {
    const thirdNodeText = nodes[2].text;

    if (!firstNodeText && _everPluginImage.Image.isImage(nodes[1]) && !thirdNodeText) {
      // 根据特定结构判断，若是单张图片不允许拖拽
      return false;
    }
  }

  return true;
}
//# sourceMappingURL=isNodeDraggable.js.map