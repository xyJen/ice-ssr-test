"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isConvertSelected;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginColorBlocks = require("@ali/4ever-plugin-color-blocks");

var _everPluginCode = require("@ali/4ever-plugin-code");

var _everPluginHeading = require("@ali/4ever-plugin-heading");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

function isConvertSelected(type, controller, block) {
  const {
    Heading1,
    Heading2,
    Heading3,
    Heading4
  } = _everPluginHeading.Heading;
  const {
    document,
    startBlock,
    endBlock
  } = controller.value;

  if (type === 'h1') {
    if (block) {
      return Heading1.isHeading1(block);
    } else {
      return startBlock && endBlock && Heading1.isHeading1(startBlock) && Heading1.isHeading1(endBlock);
    }
  } else if (type === 'h2') {
    if (block) {
      return Heading2.isHeading2(block);
    } else {
      return startBlock && endBlock && Heading2.isHeading2(startBlock) && Heading2.isHeading2(endBlock);
    }
  } else if (type === 'h3') {
    if (block) {
      return Heading3.isHeading3(block);
    } else {
      return startBlock && endBlock && Heading3.isHeading3(startBlock) && Heading3.isHeading3(endBlock);
    }
  } else if (type === 'h4') {
    if (block) {
      return Heading4.isHeading4(block);
    } else {
      return startBlock && endBlock && Heading4.isHeading4(startBlock) && Heading4.isHeading4(endBlock);
    }
  } else if (type === 'paragraph') {
    if (block) {
      return _everPluginParagraph.Paragraph.isParagraph(block) && !_everPluginHeading.Heading.isHeading(block);
    } else {
      return startBlock && endBlock && _everPluginParagraph.Paragraph.isParagraph(startBlock) && _everPluginParagraph.Paragraph.isParagraph(endBlock) && !_everPluginHeading.Heading.isHeading(startBlock) && !_everPluginHeading.Heading.isHeading(endBlock);
    }
  } else if (type === 'olist') {
    if (block) {
      return block.data.list?.isOrdered;
    } else {
      return startBlock && endBlock && startBlock.data.list?.isOrdered && endBlock.data.list?.isOrdered;
    }
  } else if (type === 'ulist') {
    if (block) {
      return block.data.list && !block.data.list.isOrdered && !block.data.list.isTaskList;
    } else {
      return startBlock && startBlock.data.list && !startBlock.data.list.isOrdered && !startBlock.data.list.isTaskList && endBlock && endBlock.data.list && !endBlock.data.list.isOrdered && !endBlock.data.list.isTaskList;
    }
  } else if (type === 'tlist') {
    if (block) {
      return block.data.list?.isTaskList;
    } else {
      return startBlock && endBlock && startBlock.data.list?.isTaskList && endBlock.data.list?.isTaskList;
    }
  } else if (type === 'blockquote') {
    if (block) {
      return block.data.blockquote;
    } else {
      return startBlock && endBlock && startBlock.data.blockquote && endBlock.data.blockquote;
    }
  } else if (type === 'code') {
    if (block) {
      return _everPluginCode.Code.isCode(block);
    } else {
      return startBlock && endBlock && _everPluginCode.Code.isCode(startBlock) && _everPluginCode.Code.isCode(endBlock);
    }
  } else if (type === 'callout') {
    if (block) {
      if (checkColorBlock(block, document)) {
        return true;
      }
    } else {
      return startBlock && endBlock && checkColorBlock(startBlock, document) && checkColorBlock(endBlock, document);
    }
  }
}

function checkColorBlock(block, document) {
  if (_everCangjie.Block.isBlock(block) && _everPluginColorBlocks.ColorBlocks.isColorBlocks(block)) {
    return true;
  }

  const closestColorBlock = document.getClosest(block.key, _block => {
    if (_everCangjie.Block.isBlock(_block) && _everPluginColorBlocks.ColorBlocks.isColorBlocks(_block)) {
      return true;
    }

    return false;
  });

  if (closestColorBlock) {
    return true;
  }

  return false;
}
//# sourceMappingURL=isConvertSelected.js.map