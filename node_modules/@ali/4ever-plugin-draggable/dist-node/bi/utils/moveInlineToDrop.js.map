{"version":3,"sources":["../../../../src/bi/utils/moveInlineToDrop.ts"],"names":["splitNodeAtCurrentRange","controller","value","document","start","selection","convertToTextPoints","withoutNormalizing","command","Commands","splitNodeByKey","key","offset","moveNodeToCurrentRange","dragNode","isCopy","dragNodePath","getPath","closestInline","getClosestInline","dropNode","assertNode","parent","getParent","query","dropNodePath","isYounger","Path","index","nodes","indexOf","copyedNode","Inline","fromJSON","toJSON","insertNodeByKey","focus","moveNodeByKey","moveInlineToDrop","dragKey","getNode","isInline","getStart","isEdgePoint","insertEmptyBlock"],"mappings":"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","sourcesContent":["import { Controller, Commands, Path, Node, Inline } from '@ali/4ever-cangjie';\n\n\nfunction splitNodeAtCurrentRange(controller: Controller) {\n  const { value } = controller;\n  const { document } = value;\n  const { start } = value.selection.convertToTextPoints(document);\n  controller.withoutNormalizing(() => {\n    controller.command(Commands.splitNodeByKey, start.key, start.offset);\n  });\n}\n\nfunction moveNodeToCurrentRange(dragNode: Node, controller: Controller, isCopy?: boolean) {\n  const { value } = controller;\n  const { document, selection } = value;\n  const dragNodePath = document.getPath(dragNode.key);\n\n  const { start } = selection.convertToTextPoints(document);\n  const closestInline = document.getClosestInline(start.key);\n  // 不允许拖拽到 inline 元素内部：start 可能位于行内元素附带的空文本节点或 link 内部\n  const dropNode = document.assertNode(closestInline ? closestInline.key : start.key);\n\n  const parent = document.getParent(dropNode.key);\n  if (!parent || controller.query('isVoid', parent)) return;\n\n  const dropNodePath = document.getPath(dropNode.key);\n\n  if (!dragNodePath) return;\n\n  const isYounger = Path.isYounger(dragNodePath, dropNodePath!);\n\n  let index = parent.nodes.indexOf(dropNode);\n  if (isYounger && !isCopy) {\n    index--;\n  }\n\n  if (isCopy) {\n    const copyedNode = Inline.fromJSON(dragNode.toJSON());\n    controller\n      .command(Commands.insertNodeByKey, parent.key, index, copyedNode)\n      .command(Commands.focus);\n  } else {\n    controller.command(Commands.moveNodeByKey, dragNode.key, parent.key, index);\n  }\n}\n\nexport default function moveInlineToDrop(\n  controller: Controller,\n  dragKey: string,\n  isCopy?: boolean,\n) {\n  splitNodeAtCurrentRange(controller);\n\n  const { value } = controller;\n  const { document, selection } = value;\n  const dragNode = document.getNode(dragKey);\n  if (!dragNode || !Inline.isInline(dragNode)) return;\n\n  const start = selection.getStart(document);\n\n  if (start.isEdgePoint()) {\n    controller.command(Commands.insertEmptyBlock, start);\n  }\n\n  moveNodeToCurrentRange(dragNode, controller, isCopy);\n}\n"],"file":"moveInlineToDrop.js"}