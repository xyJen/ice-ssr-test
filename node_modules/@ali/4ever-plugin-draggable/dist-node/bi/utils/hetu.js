"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHetuDragMenuItems = getHetuDragMenuItems;

var _react = _interopRequireDefault(require("react"));

var _weIcon = require("@ali/we-icon");

var _everComponent = require("@ali/4ever-component");

const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref = /*#__PURE__*/_createElement(_weIcon.CopyblocklinkNormal, null);

var _ref2 = /*#__PURE__*/_createElement(_weIcon.GotoblockNormal, null);

function getHetuDragMenuItems(options) {
  const {
    block,
    locale,
    config,
    controller
  } = options;
  const {
    type
  } = block;
  const {
    metadata = {},
    cardType
  } = block.data;
  const {
    sync,
    targetId,
    id,
    type: mimeType
  } = metadata; // injection 在 block.data 没生效，直接从 value 获取

  const injections = controller.value.injections.filter(i => i.key === block.key);
  let syncStatus = '';

  if (injections.length) {
    syncStatus = injections[0].data.syncStatus;
  } // 不支持同步块的河图插件，暂不展示


  if (!(type === 'card' && cardType === 'hetu' && config.types.includes(mimeType))) {
    return [];
  }

  const isMainSync = targetId === id; // 如果是副本同步块，在 deleted 时，不展示

  if (syncStatus === 'loading' || !isMainSync && ['deleted'].includes(syncStatus)) {
    return [];
  }

  if (!sync) {
    // 变为同步块并 copy
    return [];
  } else {
    // copyItem，但行为不一致
    const copyItem = {
      type: _everComponent.TYPE_MENU_ITEM,
      title: locale?.copySyncLink,
      icon: _ref,
      menuExtraKey: 'copySyncLink',
      role: "copySyncLink",
      onClick: () => {
        config.copySyncLink(id, block.key);
      }
    };

    if (isMainSync) {
      return [copyItem];
    } else {
      const toMainItem = {
        type: _everComponent.TYPE_MENU_ITEM,
        title: locale?.toSyncMain,
        icon: _ref2,
        menuExtraKey: 'toSyncMain',
        role: "toSyncMain",
        onClick: () => {
          config.toOrigin(targetId);
        }
      };
      return [copyItem, toMainItem];
    }
  }
}
//# sourceMappingURL=hetu.js.map