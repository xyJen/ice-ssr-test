{"version":3,"sources":["../../../../src/bi/utils/getDragNodes.ts"],"names":["Heading1","Heading","groupNodes","node","document","until","path","getPath","key","nodes","index","length","item","push","getSiblingDraggableBlocks","controller","enableSubjectGroup","enableHeadingGroup","query","selection","value","tableSelection","isNormalSelection","isExpanded","allBlocks","getRootBlocksAtRange","some","block","lastBlock","isHeading1","data","subjectPr","blocks","pop","condition","headingGroupList","find","when","fold","userData","get","Paragraph","isParagraph","isHeading","calloutPr","startNode","res","nextNode","getDragNodes","getNode","Inline","isInline","getTransformNodes","anchor","currentBlock","getClosestBlock"],"mappings":"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","sourcesContent":["import { isEqual } from 'lodash-es';\nimport {\n  Controller,\n  Block,\n  Inline,\n  Document,\n} from '@ali/4ever-cangjie';\nimport { isListNode } from '@ali/4ever-utils';\nimport { Heading } from '@ali/4ever-plugin-heading';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport { headingGroupList } from '@ali/4ever-plugin-heading-group';\nimport { DraggablePluginConfig } from '../types';\n\nconst {\n  Heading1,\n} = Heading;\n\n/**\n * 聚合节点组\n * @param node 聚合开始节点\n * @param document 文档模型\n * @param until 聚合截止\n * @returns\n */\nfunction groupNodes(node: Block, document: Document, until: (node: Block) => boolean): Block[] {\n  const path = document.getPath(node.key);\n\n  if (!path) {\n    return [];\n  }\n\n  const nodes: Block[] = [node];\n  let [index] = path;\n  index += 1;\n\n  while (index < document.nodes.length) {\n    const item = document.nodes[index];\n\n    if (until(item)) {\n      break;\n    }\n\n    nodes.push(item);\n    index += 1;\n  }\n\n  return nodes;\n}\n\n/**\n * 基于 getRootBlocksAtRange 获取关联的可拖拽元素集合\n * 排版模式下有 page、section、line 等自定义层级结构较为复杂，要提取出正确的可拖拽元素比较繁琐\n * @controller 应是排版前的 controller\n */\nexport function getSiblingDraggableBlocks(controller: Controller, node: Block) {\n  const {\n    enableSubjectGroup = false,\n    enableHeadingGroup = false,\n  } = (controller.query('getDraggableConfig') || {}) as DraggablePluginConfig;\n  const { selection, document } = controller.value;\n  const tableSelection = controller.query('hasTableSelection');\n  const isNormalSelection = selection.isExpanded && !tableSelection;\n  if (isNormalSelection) {\n    const allBlocks = document.getRootBlocksAtRange(selection);\n    if (\n      allBlocks.length > 1 &&\n      allBlocks.some((block) => block.key === node.key)\n    ) {\n      // 若最后一个节点附带聚合属性，则向下聚合\n      const lastBlock = allBlocks[allBlocks.length - 1];\n      if (enableSubjectGroup && Heading1.isHeading1(lastBlock) && lastBlock.data.subjectPr) {\n        const blocks = groupNodes(lastBlock, document, (item) => Heading1.isHeading1(item) && !!item.data.subjectPr);\n        allBlocks.pop();\n        allBlocks.push(...blocks);\n      } else if (enableHeadingGroup) {\n        const condition = headingGroupList.find(({ when }) => {\n          const fold = controller.userData.get(lastBlock, 'fold');\n          return when(lastBlock) && fold;\n        });\n        if (condition) {\n          const { until } = condition;\n          const blocks = groupNodes(lastBlock, document, until);\n          allBlocks.pop();\n          allBlocks.push(...blocks);\n        }\n      }\n      // 选区包含多个块级元素 且 包含当前 node\n      return allBlocks;\n    }\n  }\n\n  if ((Paragraph.isParagraph(node) || Heading.isHeading(node)) && node.data.calloutPr) {\n\n    const startNode = controller.query('findFirstBlockOfCalloutPr', node);\n    if (startNode) {\n      const res = groupNodes(startNode, document, (nextNode) => !(nextNode\n        && (Paragraph.isParagraph(nextNode) || Heading.isHeading(nextNode))\n        && !!nextNode.data.calloutPr\n        && isEqual(nextNode.data.calloutPr, node.data.calloutPr)\n      ));\n  \n      return res;\n    }\n  }\n\n  // 议题级联\n  if (enableSubjectGroup && Heading1.isHeading1(node) && node.data.subjectPr) {\n    return groupNodes(node, document, (item) => Heading1.isHeading1(item) && !!item.data.subjectPr);\n  }\n\n  // 标题分组折叠\n  if (enableHeadingGroup) {\n    const condition = headingGroupList.find(({ when }) => {\n      const fold = controller.userData.get(node, 'fold');\n      return when(node) && fold;\n    });\n    // 若标题折叠条件查询成功，则聚合节点组\n    if (condition) {\n      const { until } = condition;\n      return groupNodes(node, document, until);\n    }\n  }\n\n\n  if (!isListNode(node)) return [node];\n  // 列表级联\n  return controller.query('getListChildItems', node);\n}\n\n/**\n * 获取可拖拽元素\n */\nexport default function getDragNodes(controller: Controller, key: string) {\n  const node = controller.value.document.getNode(key);\n  if (!node) return [];\n\n  if (Inline.isInline(node)) return node;\n\n  return getSiblingDraggableBlocks(controller, node as Block);\n}\n\n/**\n * 获取关联的可转换格式的元素，目前跟可拖拽元素保持一致\n */\nexport const getTransformNodes = (controller: Controller) => {\n  const { selection, document } = controller.value;\n  const { anchor } = selection;\n  const currentBlock = document.getClosestBlock(anchor.key);\n  return getDragNodes(controller, currentBlock?.key!);\n};\n"],"file":"getDragNodes.js"}