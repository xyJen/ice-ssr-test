"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = moveImageToDrop;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _types = require("../types");

/**
 * 移动节点到 drop 位置
 * @param controller
 * @param dragKey
 * @param dropBlock
 * @param dropPosition
 * @param isCopy
 * @returns 返回移动后的节点
 */
function moveImageToDrop(controller, dragKey, dropBlock, dropPosition, isCopy) {
  const {
    document
  } = controller.value;

  try {
    const dragImage = document.getNode(dragKey);
    if (!dragImage) return undefined;
    const parent = document.getParent(dropBlock.key);
    if (!parent) return null;
    let index = parent.nodes.indexOf(dropBlock);

    if (dropPosition === _types.DROP_POSITION.after || dropPosition === _types.DROP_POSITION.right) {
      index += 1;
    }

    const draggedBlock = _everPluginParagraph.Paragraph.create({
      nodes: [_everCangjie.Inline.fromJSON(dragImage.toJSON())]
    });

    if (isCopy) {
      controller.command(_everCangjie.Commands.insertNodeByKey, parent.key, index, draggedBlock).command(_everCangjie.Commands.moveToEndOfNode, draggedBlock).command(_everCangjie.Commands.focus);
    } else {
      controller.command(_everCangjie.Commands.insertNodeByKey, parent.key, index, draggedBlock).command(_everCangjie.Commands.removeNodeByKey, dragImage.key).command(_everCangjie.Commands.moveToEndOfNode, draggedBlock).command(_everCangjie.Commands.focus);
    }

    return draggedBlock;
  } catch (error) {
    _everLogger.default.error(`parse drag fragment failed: ${error.message}`);

    return null;
  }
}
//# sourceMappingURL=moveImageToDrop.js.map