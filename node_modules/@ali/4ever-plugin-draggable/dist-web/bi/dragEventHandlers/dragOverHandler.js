import { throttle } from 'lodash-es';
import dragOverBlockHandler from "./dragOverBlockHandler";
import dragOverInlineHandler from "./dragOverInlineHandler";
import dragOverUnknownHandler from "./dragOverUnknownHandler";
import autoScroll from "../utils/autoScroll";
import { updateDropHolder } from "../actions";
import { getDraggableData } from "../model/draggableData";
import { DRAG_TYPE } from "../types";
import { isSubjectFragment, isImageFragment } from "../utils";
import dragOverSubjectHandler from "./dragOverSubjectHandler";
import dragOverImageHandler from "./dragOverImageHandler";
var threshold = 5;
var lastPosition;
export function checkAndUpdatePosition(x, y) {
  var res = true;

  if (x === undefined || y === undefined) {
    lastPosition = undefined;
    return res;
  }

  if (lastPosition && Math.abs(x - lastPosition.x) < threshold && Math.abs(y - lastPosition.y) < threshold) {
    res = false;
  }

  if (res) {
    lastPosition = {
      x: x,
      y: y
    };
  }

  return res;
}
var dragOverHandler = throttle(function (event, controller, dispatch, zoom, draggableConfig) {
  var _ref = getDraggableData(controller) || {},
      dragFragment = _ref.dragFragment; // 若 fragment 是议题区块，则不能分割其他议题
  // TODO: callout 参照实现


  if (dragFragment && isSubjectFragment(dragFragment)) {
    var nextDropHolderData = dragOverSubjectHandler(event, controller, zoom);

    if (nextDropHolderData) {
      dispatch(updateDropHolder(nextDropHolderData));
    }
  } else if (dragFragment && isImageFragment(dragFragment)) {
    dragOverImageHandler(event, controller, dispatch, zoom);
  } else if ((dragFragment == null ? void 0 : dragFragment.type) === DRAG_TYPE.blocks) {
    var _nextDropHolderData = dragOverBlockHandler(event, controller, zoom);

    if (_nextDropHolderData) {
      dispatch(updateDropHolder(_nextDropHolderData));
    }
  } else if ((dragFragment == null ? void 0 : dragFragment.type) === DRAG_TYPE.inline) {
    dragOverInlineHandler(event, controller);
  } else {
    dragOverUnknownHandler(event, controller);
  }

  autoScroll(event, draggableConfig == null ? void 0 : draggableConfig.autoScrollThreshold);
}, 50, {
  leading: true
});
export default dragOverHandler;
//# sourceMappingURL=dragOverHandler.js.map