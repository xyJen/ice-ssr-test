/* eslint-disable react/no-find-dom-node */
import { domUtils } from '@ali/4ever-cangjie';
import { Heading } from '@ali/4ever-plugin-heading';
import { DROP_POSITION } from "../types";
import { getBlockFromDragEvent } from "../utils/getRangeFromDragEvent";
import dragOverBlockHandler from "./dragOverBlockHandler";

/**
 * 议题边距 40px
 */
var SUBJECT_MARGIN = 40;
/**
 * 议题拖拽至议题区域内
 * @param event
 * @param controller
 * @param subject
 * @returns
 */

function dropToSubject(event, controller, subject) {
  var _subject$data$subject = subject.data.subjectPr,
      subjectPr = _subject$data$subject === void 0 ? {} : _subject$data$subject; // 先通过 id 找，找不到再通过 key 找

  var subjectDOM = document.getElementById(subjectPr.id || '') || domUtils.findDOMNode(subject.key + "-group");

  if (subjectDOM) {
    // 议题的 Rect 取整个区块的大小再加上边距距离
    var clientRect = subjectDOM.getBoundingClientRect();
    var rect = {
      top: clientRect.top - SUBJECT_MARGIN / 2,
      left: clientRect.left,
      width: clientRect.width,
      height: clientRect.height + SUBJECT_MARGIN
    };
    var dropPosition = event.clientY < rect.top + rect.height / 2 ? DROP_POSITION.before : DROP_POSITION.after;
    var dropBlock = dropPosition === DROP_POSITION.before ? subject : controller.query('getSubjectEndBlock', subject); // dropBlock 不存在

    if (!dropBlock) {
      return null;
    }

    return {
      type: dropBlock.type,
      key: dropBlock.key,
      dropPosition: dropPosition,
      rect: rect
    };
  }

  return null;
}
/**
 * 议题拖拽至高亮块区域内
 * @param event
 * @param controller
 * @param block
 * @returns
 */


function dropToCallout(event, controller, block) {
  var calloutStartBlock = controller.query('getCalloutStartBlock', block);

  if (!calloutStartBlock) {
    return null;
  }

  var calloutDOM = domUtils.findDOMNode(calloutStartBlock.key + "-group");

  if (calloutDOM) {
    var clientRect = calloutDOM.getBoundingClientRect();
    var _document = controller.value.document;
    var dropPosition;
    var dropBlock;
    var rect; // drop 落在高亮块上方

    if (event.clientY < clientRect.top + clientRect.height / 2) {
      var prevBlock = _document.getPreviousBlock(calloutStartBlock.key);

      if (prevBlock) {
        dropPosition = DROP_POSITION.after;
        dropBlock = prevBlock;
        rect = domUtils.findDOMNode(prevBlock.key).getBoundingClientRect();
      } else {
        dropPosition = DROP_POSITION.before;
        dropBlock = calloutStartBlock;
        rect = calloutDOM.getBoundingClientRect();
      }
    } else {
      // drop 落在高亮块下方
      var calloutEndBlock = controller.query('getCalloutEndBlock', block);

      var nextBlock = calloutEndBlock && _document.getNextBlock(calloutEndBlock.key);

      if (nextBlock) {
        dropPosition = DROP_POSITION.before;
        dropBlock = nextBlock;
        rect = domUtils.findDOMNode(nextBlock.key).getBoundingClientRect();
      } else if (calloutEndBlock) {
        dropPosition = DROP_POSITION.after;
        dropBlock = calloutEndBlock;
        rect = calloutDOM.getBoundingClientRect();
      } else {
        return null;
      }
    }

    return {
      type: dropBlock.type,
      key: dropBlock.key,
      dropPosition: dropPosition,
      rect: rect
    };
  }

  return null;
}

function dragOverSubjectHandler(event, controller, zoom) {
  var block = getBlockFromDragEvent(controller, event, zoom); // block 为找到则不处理

  if (!block) {
    return null;
  } // 若 block 在议题区块内，则只能落在议题前后


  var subjectStartBlock = controller.query('getSubjectStartBlock', block);

  if (subjectStartBlock) {
    return dropToSubject(event, controller, subjectStartBlock);
  } // 若 block 是高亮块，则只能落在区块前后


  if (Heading.isCallout(block)) {
    return dropToCallout(event, controller, block);
  } // 若不在区块内，则直接返回 block 的 drop 点


  return dragOverBlockHandler(event, controller);
}

export default dragOverSubjectHandler;
//# sourceMappingURL=dragOverSubjectHandler.js.map