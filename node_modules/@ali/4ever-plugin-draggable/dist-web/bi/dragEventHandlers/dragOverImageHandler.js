import _extends from "@babel/runtime/helpers/extends";
import getDropPosFromBlock from "../utils/getDropPosFromBlock";
import { getBlockFromDragEvent } from "../utils/getRangeFromDragEvent";
import getDropHolderDataFromViewKeys from "../utils/getDropHolderDataFromViewKeys";
import { getDraggableData } from "../model/draggableData";
import dragOverInlineHandler from "./dragOverInlineHandler";
import { updateImageDropHolder } from "../actions";

function updateBlockDropHolder(controller, dropBlock, event) {
  // 不允许落到排版相关位置
  if (/^page|^section/.test(dropBlock.key)) return undefined;
  var dropKey = controller.query('getDataKey', dropBlock.key) || dropBlock.key;
  var viewKeys = controller.query('getViewKeys', dropKey);
  var clientX = event.clientX,
      clientY = event.clientY;
  var nextDropHolderData = getDropPosFromBlock(controller, dropBlock, clientX, clientY, true);

  if (nextDropHolderData && (viewKeys == null ? void 0 : viewKeys.length) > 1) {
    // 兼容分页下段落跨页情形
    nextDropHolderData = _extends({}, nextDropHolderData, getDropHolderDataFromViewKeys(controller, event, viewKeys));
  }

  return nextDropHolderData;
}

function dragOverImageHandler(event, controller, dispatch, zoom) {
  var draggableData = getDraggableData(controller);
  if (!draggableData) return;
  var dragFragment = draggableData.dragFragment; // 仅处理图片

  if (!dragFragment || dragFragment.fragment.type !== 'image') return;
  var block = getBlockFromDragEvent(controller, event, zoom, true);

  if (!block) {
    // 段中拖拽
    controller.run('onAction', updateImageDropHolder({
      dispatch: dispatch,
      event: event,
      dropHolder: null
    }));
    dragOverInlineHandler(event, controller);
    return;
  }

  var nextDropHolderData = updateBlockDropHolder(controller, block, event);
  controller.run('onAction', updateImageDropHolder({
    dispatch: dispatch,
    event: event,
    dropHolder: nextDropHolderData
  }));
}

export default dragOverImageHandler;
//# sourceMappingURL=dragOverImageHandler.js.map