{"version":3,"sources":["../../../../src/bi/dragEventHandlers/dragOverHandler.ts"],"names":["throttle","dragOverBlockHandler","dragOverInlineHandler","dragOverUnknownHandler","autoScroll","updateDropHolder","getDraggableData","DRAG_TYPE","isSubjectFragment","isImageFragment","dragOverSubjectHandler","dragOverImageHandler","threshold","lastPosition","checkAndUpdatePosition","x","y","res","undefined","Math","abs","dragOverHandler","event","controller","dispatch","zoom","draggableConfig","dragFragment","nextDropHolderData","type","blocks","inline","autoScrollThreshold","leading"],"mappings":"AAAA,SAASA,QAAT,QAAyB,WAAzB;AAEA,OAAOC,oBAAP;AACA,OAAOC,qBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,UAAP;AACA,SAASC,gBAAT;AACA,SACEC,gBADF;AAGA,SACEC,SADF;AAIA,SAASC,iBAAT,EAA4BC,eAA5B;AACA,OAAOC,sBAAP;AACA,OAAOC,oBAAP;AAEA,IAAMC,SAAS,GAAG,CAAlB;AACA,IAAIC,YAAJ;AAEA,OAAO,SAASC,sBAAT,CAAgCC,CAAhC,EAA4CC,CAA5C,EAAwD;AAC7D,MAAIC,GAAG,GAAG,IAAV;;AACA,MAAIF,CAAC,KAAKG,SAAN,IAAmBF,CAAC,KAAKE,SAA7B,EAAwC;AACtCL,IAAAA,YAAY,GAAGK,SAAf;AACA,WAAOD,GAAP;AACD;;AACD,MAAIJ,YAAY,IAAIM,IAAI,CAACC,GAAL,CAASL,CAAC,GAAGF,YAAY,CAACE,CAA1B,IAA+BH,SAA/C,IAA4DO,IAAI,CAACC,GAAL,CAASJ,CAAC,GAAGH,YAAY,CAACG,CAA1B,IAA+BJ,SAA/F,EAA0G;AACxGK,IAAAA,GAAG,GAAG,KAAN;AACD;;AAED,MAAIA,GAAJ,EAAS;AACPJ,IAAAA,YAAY,GAAG;AACbE,MAAAA,CAAC,EAADA,CADa;AAEbC,MAAAA,CAAC,EAADA;AAFa,KAAf;AAID;;AAED,SAAOC,GAAP;AACD;AAED,IAAMI,eAAe,GAAGrB,QAAQ,CAAC,UAC/BsB,KAD+B,EAE/BC,UAF+B,EAG/BC,QAH+B,EAI/BC,IAJ+B,EAK/BC,eAL+B,EAM5B;AAAA,aACsBpB,gBAAgB,CAACiB,UAAD,CAAhB,IAAgC,EADtD;AAAA,MACKI,YADL,QACKA,YADL,EAEH;AACA;;;AACA,MAAIA,YAAY,IAAInB,iBAAiB,CAACmB,YAAD,CAArC,EAAqD;AACnD,QAAMC,kBAAkB,GAAGlB,sBAAsB,CAACY,KAAD,EAAQC,UAAR,EAAoBE,IAApB,CAAjD;;AACA,QAAIG,kBAAJ,EAAwB;AACtBJ,MAAAA,QAAQ,CAACnB,gBAAgB,CAACuB,kBAAD,CAAjB,CAAR;AACD;AACF,GALD,MAKO,IAAID,YAAY,IAAIlB,eAAe,CAACkB,YAAD,CAAnC,EAAmD;AACxDhB,IAAAA,oBAAoB,CAACW,KAAD,EAAQC,UAAR,EAAoBC,QAApB,EAA8BC,IAA9B,CAApB;AACD,GAFM,MAEA,IAAI,CAAAE,YAAY,QAAZ,YAAAA,YAAY,CAAEE,IAAd,MAAuBtB,SAAS,CAACuB,MAArC,EAA6C;AAClD,QAAMF,mBAAkB,GAAG3B,oBAAoB,CAACqB,KAAD,EAAQC,UAAR,EAAoBE,IAApB,CAA/C;;AACA,QAAIG,mBAAJ,EAAwB;AACtBJ,MAAAA,QAAQ,CAACnB,gBAAgB,CAACuB,mBAAD,CAAjB,CAAR;AACD;AACF,GALM,MAKA,IAAI,CAAAD,YAAY,QAAZ,YAAAA,YAAY,CAAEE,IAAd,MAAuBtB,SAAS,CAACwB,MAArC,EAA6C;AAClD7B,IAAAA,qBAAqB,CAACoB,KAAD,EAAQC,UAAR,CAArB;AACD,GAFM,MAEA;AACLpB,IAAAA,sBAAsB,CAACmB,KAAD,EAAQC,UAAR,CAAtB;AACD;;AAEDnB,EAAAA,UAAU,CAACkB,KAAD,EAAQI,eAAR,oBAAQA,eAAe,CAAEM,mBAAzB,CAAV;AACD,CA7B+B,EA6B7B,EA7B6B,EA6BzB;AAAEC,EAAAA,OAAO,EAAE;AAAX,CA7ByB,CAAhC;AA+BA,eAAeZ,eAAf","sourcesContent":["import { throttle } from 'lodash-es';\nimport { Controller } from '@ali/4ever-cangjie';\nimport dragOverBlockHandler from './dragOverBlockHandler';\nimport dragOverInlineHandler from './dragOverInlineHandler';\nimport dragOverUnknownHandler from './dragOverUnknownHandler';\nimport autoScroll from '../utils/autoScroll';\nimport { updateDropHolder, clearDropHolder } from '../actions';\nimport {\n  getDraggableData,\n} from '../model/draggableData';\nimport {\n  DRAG_TYPE,\n  DraggablePluginConfig,\n} from '../types';\nimport { isSubjectFragment, isImageFragment } from '../utils';\nimport dragOverSubjectHandler from './dragOverSubjectHandler';\nimport dragOverImageHandler from './dragOverImageHandler';\n\nconst threshold = 5;\nlet lastPosition: { x: number; y: number } | undefined;\n\nexport function checkAndUpdatePosition(x?: number, y?: number) {\n  let res = true;\n  if (x === undefined || y === undefined) {\n    lastPosition = undefined;\n    return res;\n  }\n  if (lastPosition && Math.abs(x - lastPosition.x) < threshold && Math.abs(y - lastPosition.y) < threshold) {\n    res = false;\n  }\n\n  if (res) {\n    lastPosition = {\n      x,\n      y,\n    };\n  }\n\n  return res;\n}\n\nconst dragOverHandler = throttle((\n  event: DragEvent,\n  controller: Controller,\n  dispatch: React.Dispatch<any>,\n  zoom: number,\n  draggableConfig?: DraggablePluginConfig,\n) => {\n  const { dragFragment } = getDraggableData(controller) || {};\n  // 若 fragment 是议题区块，则不能分割其他议题\n  // TODO: callout 参照实现\n  if (dragFragment && isSubjectFragment(dragFragment)) {\n    const nextDropHolderData = dragOverSubjectHandler(event, controller, zoom);\n    if (nextDropHolderData) {\n      dispatch(updateDropHolder(nextDropHolderData));\n    }\n  } else if (dragFragment && isImageFragment(dragFragment)) {\n    dragOverImageHandler(event, controller, dispatch, zoom);\n  } else if (dragFragment?.type === DRAG_TYPE.blocks) {\n    const nextDropHolderData = dragOverBlockHandler(event, controller, zoom);\n    if (nextDropHolderData) {\n      dispatch(updateDropHolder(nextDropHolderData));\n    }\n  } else if (dragFragment?.type === DRAG_TYPE.inline) {\n    dragOverInlineHandler(event, controller);\n  } else {\n    dragOverUnknownHandler(event, controller);\n  }\n\n  autoScroll(event, draggableConfig?.autoScrollThreshold);\n}, 50, { leading: true });\n\nexport default dragOverHandler;\n"],"file":"dragOverHandler.js"}