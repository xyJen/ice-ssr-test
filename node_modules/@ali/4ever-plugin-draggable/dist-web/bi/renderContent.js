import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable react-hooks/exhaustive-deps */
import React, { useMemo, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useZoomContainer, useZoom } from '@ali/4ever-cangjie';
import DropHolder from "./components/dropHolder";
import { DragHighlightStyle } from "./components/styled";
import { DraggableContext, useValue } from "./draggableContext";
import { updateDragHander, clearDropHolder } from "./actions";
import dragOverHandler, { checkAndUpdatePosition } from "./dragEventHandlers/dragOverHandler";
import dropHandler from "./dragEventHandlers/dropHandler";
import dragEndHandler from "./dragEventHandlers/dragEndHandler";
import { removeDragHightlight } from "./utils/domUtils";
import { updateDraggableData } from "./model/draggableData";

var _ref = /*#__PURE__*/_createElement(DragHighlightStyle, null);

var DraggableProvider = function DraggableProvider(props) {
  var _useValue = useValue(),
      draggableData = _useValue[0],
      dispatch = _useValue[1];

  var zoom = useZoom();
  var controller = props.controller,
      draggableConfig = props.draggableConfig,
      handleDragChange = props.handleDragChange;
  var value = useMemo(function () {
    /**
     * PERF
     * never get the data from context when it change constantly or a lot of components useContext
     * it will cause DISASTER
     */
    return {
      dispatch: dispatch
    };
  }, [dispatch]);
  var onKeyDown = useCallback(function () {
    var _draggableData$dragHa;

    if ((_draggableData$dragHa = draggableData.dragHander) != null && _draggableData$dragHa.viewKey) {
      dispatch(updateDragHander());
      removeDragHightlight();
    }
  }, [dispatch, draggableData]);
  var onDragOver = useCallback(function (event) {
    if (checkAndUpdatePosition(event.pageX, event.pageY)) {
      dragOverHandler(event, controller, dispatch, zoom, draggableConfig);
    }
  }, [controller, dispatch, zoom, draggableConfig]);
  var onDrop = useCallback(function (event) {
    // 取消，避免延迟触发
    dragOverHandler.cancel(); // 清除 UI 拖拽数据

    dispatch(clearDropHolder()); // onDrop triggered means onDragEnd not trigger

    dropHandler(event, controller, draggableData.dropHolder);
    dragEndHandler(controller);
    checkAndUpdatePosition();
    handleDragChange('clear', controller);
  }, [dispatch, controller, draggableData]);
  var onDragEnd = useCallback(function () {
    // 取消拖拽
    updateDraggableData(controller);
    dragEndHandler(controller);
    dispatch(clearDropHolder());
    checkAndUpdatePosition();
    handleDragChange('clear', controller);
  }, [controller, dispatch]);
  var zoomContainer = useZoomContainer();
  React.useEffect(function () {
    if (!zoomContainer) {
      return undefined;
    }

    zoomContainer.addEventListener('dragover', onDragOver);
    document.addEventListener('keydown', onKeyDown);
    zoomContainer.addEventListener('drop', onDrop);
    document.addEventListener('dragend', onDragEnd);
    return function () {
      zoomContainer.removeEventListener('dragover', onDragOver);
      document.removeEventListener('keydown', onKeyDown);
      zoomContainer.removeEventListener('drop', onDrop);
      document.removeEventListener('dragend', onDragEnd);
    };
  }, [zoomContainer, onDragOver, onKeyDown, onDrop, onDragEnd]);
  return /*#__PURE__*/_createElement(DraggableContext.Provider, {
    value: value
  }, props.children, _ref, /*#__PURE__*/_createElement(DropHolder, _extends({}, draggableData, {
    controller: controller
  })));
};

export default (function (config, handleDragChange) {
  return function (props, controller, next) {
    var _config$draggable;

    if ((_config$draggable = config.draggable) != null && _config$draggable.enabled) {
      return /*#__PURE__*/_createElement(DraggableProvider, {
        draggableConfig: config.draggable,
        controller: controller,
        zoom: props.zoom,
        handleDragChange: handleDragChange
      }, next());
    }

    return next();
  };
});
//# sourceMappingURL=renderContent.js.map