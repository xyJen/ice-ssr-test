{"version":3,"sources":["../../../src/bi/types.ts"],"names":["DRAG_TYPE","DROP_POSITION"],"mappings":"AAAA,SAASA,SAAT;AAgBA,SAASA,SAAT;AAQA,WAAYC,aAAZ;;WAAYA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a","sourcesContent":["import { DRAG_TYPE } from './../utils/constants';\nimport { ReactNode } from 'react';\nimport {\n  Controller,\n  RenderNodeProps,\n  BlockJSON,\n  InlineJSON,\n  Block,\n  Data,\n  BlockChildren,\n  Inline,\n} from '@ali/4ever-cangjie';\nimport { RefBlockDraggableConfig } from '@ali/4ever-plugin-refblock';\nimport { HetuConfig } from './utils/hetu';\n\n\nexport { DRAG_TYPE };\nexport interface RECT {\n  top: number;\n  left: number;\n  width?: number;\n  height?: number;\n}\n\nexport enum DROP_POSITION {\n  before,\n  after,\n  left,\n  right,\n}\n\ninterface DragNodeProps {\n  key: string;\n  type: string;\n  parentKey: string;\n}\n\nexport interface DragBlockProps extends DragNodeProps {\n  nodeJson: BlockJSON;\n}\n\nexport interface DragInlineProps extends DragNodeProps {\n  nodeJson: InlineJSON;\n}\n\nexport type DragBlocksProps = DragBlockProps[];\n\nexport type DRAG_DATA = DragInlineProps | DragBlocksProps;\n\nexport interface DraggableProps {\n  controller: Controller;\n  renderNodeProps: RenderNodeProps;\n  draggableConfig?: DraggableConfig;\n}\n\nexport interface DropHolderProps {\n  type: string;\n  key: string;\n  dropPosition: DROP_POSITION;\n  pagePosition?: DROP_POSITION;\n  rect?: RECT;\n}\n\nexport interface DragHanderProps {\n  viewKey: string;\n  dataKey?: string;\n  type?: 'hover' | 'select';\n}\n\nexport interface DraggableConfig {\n  isDraggable?: (props: RenderNodeProps<Block | Inline>, controller: Controller) => boolean;\n  style?: React.CSSProperties;\n  handerStyle?: React.CSSProperties;\n}\n\nexport interface DragFragmentProps {\n  type: DRAG_TYPE;\n  fragment: DRAG_DATA;\n  isContainTable: () => boolean;\n}\n\nexport interface DraggableDataProps {\n  dragFragment?: DragFragmentProps;\n  dropHolder?: DropHolderProps;\n  dragHander?: DragHanderProps;\n  isCopy?: boolean;\n}\n\nexport interface DraggablePluginConfig {\n  enabled?: boolean;\n  locale?: Record<string, string>;\n  autoScrollThreshold?: {\n    top?: number;\n    bottom?: number;\n  };\n  /**\n   * 配置后会拖拽生成简单纯色缩略图\n   */\n  complexElements?: Record<string, boolean>;\n  /**\n   * 配置禁止拖拽类型（默认所有块级元素都可以拖拽）\n   */\n  forbiddenElements?: Record<string, boolean>;\n  /**\n   * 声明可拖拽的行内元素\n   */\n  draggableInlineElements?: Record<string, boolean>;\n  /**\n   * 聚合议题内容\n   * @default false\n   */\n  enableSubjectGroup?: boolean;\n  /**\n   * 聚合折叠标题\n   * @default false\n   */\n  enableHeadingGroup?: boolean;\n  /**\n   * 获取url\n   */\n  getCopyURL?: (id: string) => string;\n  /**\n   * 段落分享 item\n   */\n  shareParagraph?: (type: string, uuid: string, block: Block<Data, BlockChildren>) => void;\n  /**\n   * 河图配置\n   */\n  hetu?: HetuConfig;\n  /**\n   * 菜单栏 transfrom 区域的自定义菜单\n   */\n  extraTransformMenu?: IMenu[];\n  /**\n   * 引用块配置\n   */\n  refblock?: RefBlockDraggableConfig;\n  /**\n   * 汉堡菜单触发方式\n   */\n  trigger?: 'hover' | 'click';\n}\n\nexport interface IMenu {\n  title: string;\n  menuKey?: string;\n  icon: React.ReactNode;\n  extra?: ReactNode;\n}\n\nexport interface DragMenuAction {\n  node: Block;\n  action?: symbol;\n}\n"],"file":"types.js"}