{"version":3,"sources":["../../../../src/bi/model/dragFragment.ts"],"names":["Block","Inline","Value","Document","DRAG_TYPE","APPLICATION_CANGJIE_DRAG_FRAGMENT","TEXT_PLAIN","TEXT_LINK","TEXT_HTML","MIME_TYPES","DragFragment","createDragFragment","event","nodes","controller","stopPropagation","dragFragment","forEach","mimeType","mimeData","getData","dataTransfer","setData","type","fragment","mo","Array","isArray","map","node","key","nodeJson","toJSON","parentKey","value","document","getParent","isInline","Error","blocks","inline","serializer","getTextFromDragNode","text","fromJSON","create","valueToText","e","getDataFromDragNode","mime","nodeType","link","data","src","html","json","jsonMLToHTML","nodeToJsonML","JSON","stringify","dragNodes","isContainTable","some"],"mappings":"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","sourcesContent":["import { BlockJSON, Block, Inline, InlineJSON, Value, Document, Controller, Path, Mo } from '@ali/4ever-cangjie';\nimport {\n  DRAG_TYPE,\n  DRAG_DATA,\n  DragBlockProps,\n  DragInlineProps,\n} from '../types';\nimport {\n  APPLICATION_CANGJIE_DRAG_FRAGMENT,\n  TEXT_PLAIN,\n  TEXT_LINK,\n  TEXT_HTML,\n} from '@ali/4ever-utils';\n\nconst MIME_TYPES = [APPLICATION_CANGJIE_DRAG_FRAGMENT, TEXT_PLAIN, TEXT_LINK, TEXT_HTML];\ntype DragNodes = Inline | Block[];\n\nclass DragFragment {\n  static createDragFragment(\n    event: React.DragEvent,\n    nodes: DragNodes,\n    controller: Controller,\n  ) {\n    event.stopPropagation();\n    const dragFragment = new DragFragment(nodes, controller);\n\n    MIME_TYPES.forEach((mimeType) => {\n      const mimeData = dragFragment.getData(mimeType);\n      if (mimeData) {\n        event.dataTransfer.setData(mimeType, mimeData);\n      }\n    });\n\n    return dragFragment;\n  }\n\n  type: DRAG_TYPE;\n\n  fragment: DRAG_DATA;\n\n  mo: Mo;\n\n  constructor(nodes: DragNodes, controller: Controller) {\n    if (Array.isArray(nodes)) {\n      this.fragment = nodes.map((node) => {\n        return {\n          key: node.key,\n          type: node.type,\n          nodeJson: node.toJSON() as BlockJSON,\n          parentKey: controller.value.document.getParent(node.key)!.key,\n        };\n      });\n    } else if (Inline.isInline(nodes)) {\n      this.fragment = {\n        key: nodes.key,\n        type: nodes.type,\n        nodeJson: nodes.toJSON() as InlineJSON,\n        parentKey: controller.value.document.getParent(nodes.key)!.key,\n      };\n    }\n\n    // @ts-ignore\n    if (!this.fragment) {\n      throw new Error('not support drag nodes');\n    }\n\n    this.type = Array.isArray(this.fragment) ? DRAG_TYPE.blocks : DRAG_TYPE.inline;\n    this.mo = controller.serializer;\n  }\n\n  getTextFromDragNode(node: DragBlockProps | DragInlineProps) {\n    const mo = this.mo;\n    const { nodeJson } = node;\n    const isInline = this.type === DRAG_TYPE.inline;\n    let text = '';\n    try {\n      const nodes = isInline ? Inline.fromJSON(nodeJson as InlineJSON) : Block.fromJSON(nodeJson as BlockJSON);\n      const value = Value.create({\n        // @ts-ignore inline 不再强制包裹在 block 内\n        document: Document.create({ nodes: [nodes] }),\n      });\n      text = mo.valueToText(value);\n    } catch (e) {\n      // 不阻塞\n    }\n    return text;\n  }\n\n  getDataFromDragNode(mime: string, node: DragBlockProps | DragInlineProps) {\n    const mo = this.mo;\n    const { type: nodeType, nodeJson } = node;\n    const isInline = this.type === DRAG_TYPE.inline;\n    if (mime === TEXT_PLAIN) {\n      return this.getTextFromDragNode(node);\n    }\n\n    if (mime === TEXT_LINK) {\n      // 支持图片、附件等拖到浏览器中能打开\n      let link = '';\n      switch (nodeType) {\n        case 'embed':\n        case 'image':\n          link = nodeJson.data?.src || '';\n          break;\n        default:\n      }\n      return link;\n    }\n\n    if (mime === TEXT_HTML) {\n      // 仅支持部分插件，复杂插件第三方富文本编辑器识别不了\n      let html = '';\n      switch (nodeType) {\n        case 'paragraph':\n        case 'heading-1':\n        case 'heading-2':\n        case 'heading-3':\n        case 'heading-4':\n        case 'table':\n        case 'image':\n        case 'hr':\n          try {\n            const json = isInline ? Inline.fromJSON(nodeJson as InlineJSON) : Block.fromJSON(nodeJson as BlockJSON);\n            html = mo.jsonMLToHTML(mo.nodeToJsonML(json));\n          } catch (e) {\n            // 不阻塞\n          }\n          break;\n        default:\n          // 降级：取纯文本\n          html = this.getTextFromDragNode(node);\n      }\n      return html;\n    }\n\n    return '';\n  }\n\n  getData(mime) {\n    if (mime === APPLICATION_CANGJIE_DRAG_FRAGMENT) {\n      return JSON.stringify({\n        type: this.type,\n        fragment: this.fragment,\n      });\n    }\n\n    const dragNodes = Array.isArray(this.fragment) ? this.fragment : [this.fragment];\n    let data = '';\n\n    dragNodes.forEach((node) => {\n      data += this.getDataFromDragNode(mime, node);\n    });\n\n    return data;\n  }\n\n  isContainTable() {\n    if (!Array.isArray(this.fragment)) return false;\n    return this.fragment.some((node) => node.type === 'table');\n  }\n}\n\nexport default DragFragment;\n"],"file":"dragFragment.js"}