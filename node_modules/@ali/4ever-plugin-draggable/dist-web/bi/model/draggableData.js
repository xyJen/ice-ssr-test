import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/* eslint-disable no-underscore-dangle */
function checkDraggableData(controller, draggableData) {
  if (!draggableData) return true;
  var dragFragment = draggableData.dragFragment,
      dropHolder = draggableData.dropHolder;

  var _ref = dropHolder || {},
      key = _ref.key;

  var document = controller.value.document;

  if (dragFragment && key && dragFragment.isContainTable() && controller.query('isNodeInTable', document.getNode(key))) {
    // 不允许表格拖入表格
    return false;
  }

  return true;
}

export function getDraggableData(controller) {
  return controller.value.data._draggableData;
}
export function updateDraggableData(controller, draggableData) {
  if (!checkDraggableData(controller, draggableData)) {
    return controller;
  }

  var _controller$value$dat = controller.value.data,
      _draggableData = _controller$value$dat._draggableData,
      rest = _objectWithoutPropertiesLoose(_controller$value$dat, ["_draggableData"]);

  if (!draggableData || !Object.keys(draggableData).length) {
    // 清除
    return controller.setData(_extends({}, rest));
  }

  return controller.setData(_extends({}, rest, {
    _draggableData: draggableData
  }));
}
export function updateDragFragment(controller, dragFragment) {
  var _draggableData = controller.value.data._draggableData;

  var nextDraggableData = _extends({}, _draggableData, {
    dragFragment: dragFragment
  });

  if (!nextDraggableData.dragFragment) {
    delete nextDraggableData.dragFragment;
  }

  return updateDraggableData(controller, nextDraggableData);
}
export function updateDropHolder(controller, dropHolder) {
  var _draggableData$dropHo, _draggableData$dropHo2;

  var _draggableData = controller.value.data._draggableData; // 性能考虑，尽量避免触发 setData

  if (!(_draggableData != null && _draggableData.dropHolder) && !dropHolder) {
    return controller;
  }

  if ((_draggableData == null ? void 0 : (_draggableData$dropHo = _draggableData.dropHolder) == null ? void 0 : _draggableData$dropHo.key) === (dropHolder == null ? void 0 : dropHolder.key) && (_draggableData == null ? void 0 : (_draggableData$dropHo2 = _draggableData.dropHolder) == null ? void 0 : _draggableData$dropHo2.dropPosition) === (dropHolder == null ? void 0 : dropHolder.dropPosition)) {
    return controller;
  }

  var nextDraggableData = _extends({}, _draggableData, {
    dropHolder: dropHolder
  });

  return updateDraggableData(controller, nextDraggableData);
}
export function updateDragHander(controller, dragHander) {
  var _draggableData = controller.value.data._draggableData;

  var nextDraggableData = _extends({}, _draggableData, {
    dragHander: dragHander
  });

  if (!nextDraggableData.dragHander) {
    delete nextDraggableData.dragHander;
  }

  return updateDraggableData(controller, nextDraggableData);
}
//# sourceMappingURL=draggableData.js.map