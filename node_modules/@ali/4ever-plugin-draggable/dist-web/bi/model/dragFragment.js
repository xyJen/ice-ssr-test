import { Block, Inline, Value, Document } from '@ali/4ever-cangjie';
import { DRAG_TYPE } from "../types";
import { APPLICATION_CANGJIE_DRAG_FRAGMENT, TEXT_PLAIN, TEXT_LINK, TEXT_HTML } from '@ali/4ever-utils';
var MIME_TYPES = [APPLICATION_CANGJIE_DRAG_FRAGMENT, TEXT_PLAIN, TEXT_LINK, TEXT_HTML];

var DragFragment = /*#__PURE__*/function () {
  DragFragment.createDragFragment = function createDragFragment(event, nodes, controller) {
    event.stopPropagation();
    var dragFragment = new DragFragment(nodes, controller);
    MIME_TYPES.forEach(function (mimeType) {
      var mimeData = dragFragment.getData(mimeType);

      if (mimeData) {
        event.dataTransfer.setData(mimeType, mimeData);
      }
    });
    return dragFragment;
  };

  function DragFragment(nodes, controller) {
    this.type = void 0;
    this.fragment = void 0;
    this.mo = void 0;

    if (Array.isArray(nodes)) {
      this.fragment = nodes.map(function (node) {
        return {
          key: node.key,
          type: node.type,
          nodeJson: node.toJSON(),
          parentKey: controller.value.document.getParent(node.key).key
        };
      });
    } else if (Inline.isInline(nodes)) {
      this.fragment = {
        key: nodes.key,
        type: nodes.type,
        nodeJson: nodes.toJSON(),
        parentKey: controller.value.document.getParent(nodes.key).key
      };
    } // @ts-ignore


    if (!this.fragment) {
      throw new Error('not support drag nodes');
    }

    this.type = Array.isArray(this.fragment) ? DRAG_TYPE.blocks : DRAG_TYPE.inline;
    this.mo = controller.serializer;
  }

  var _proto = DragFragment.prototype;

  _proto.getTextFromDragNode = function getTextFromDragNode(node) {
    var mo = this.mo;
    var nodeJson = node.nodeJson;
    var isInline = this.type === DRAG_TYPE.inline;
    var text = '';

    try {
      var nodes = isInline ? Inline.fromJSON(nodeJson) : Block.fromJSON(nodeJson);
      var value = Value.create({
        // @ts-ignore inline 不再强制包裹在 block 内
        document: Document.create({
          nodes: [nodes]
        })
      });
      text = mo.valueToText(value);
    } catch (e) {// 不阻塞
    }

    return text;
  };

  _proto.getDataFromDragNode = function getDataFromDragNode(mime, node) {
    var _nodeJson$data;

    var mo = this.mo;
    var nodeType = node.type,
        nodeJson = node.nodeJson;
    var isInline = this.type === DRAG_TYPE.inline;

    if (mime === TEXT_PLAIN) {
      return this.getTextFromDragNode(node);
    }

    if (mime === TEXT_LINK) {
      // 支持图片、附件等拖到浏览器中能打开
      var link = '';

      switch (nodeType) {
        case 'embed':
        case 'image':
          link = ((_nodeJson$data = nodeJson.data) == null ? void 0 : _nodeJson$data.src) || '';
          break;

        default:
      }

      return link;
    }

    if (mime === TEXT_HTML) {
      // 仅支持部分插件，复杂插件第三方富文本编辑器识别不了
      var html = '';

      switch (nodeType) {
        case 'paragraph':
        case 'heading-1':
        case 'heading-2':
        case 'heading-3':
        case 'heading-4':
        case 'table':
        case 'image':
        case 'hr':
          try {
            var json = isInline ? Inline.fromJSON(nodeJson) : Block.fromJSON(nodeJson);
            html = mo.jsonMLToHTML(mo.nodeToJsonML(json));
          } catch (e) {// 不阻塞
          }

          break;

        default:
          // 降级：取纯文本
          html = this.getTextFromDragNode(node);
      }

      return html;
    }

    return '';
  };

  _proto.getData = function getData(mime) {
    var _this = this;

    if (mime === APPLICATION_CANGJIE_DRAG_FRAGMENT) {
      return JSON.stringify({
        type: this.type,
        fragment: this.fragment
      });
    }

    var dragNodes = Array.isArray(this.fragment) ? this.fragment : [this.fragment];
    var data = '';
    dragNodes.forEach(function (node) {
      data += _this.getDataFromDragNode(mime, node);
    });
    return data;
  };

  _proto.isContainTable = function isContainTable() {
    if (!Array.isArray(this.fragment)) return false;
    return this.fragment.some(function (node) {
      return node.type === 'table';
    });
  };

  return DragFragment;
}();

export default DragFragment;
//# sourceMappingURL=dragFragment.js.map