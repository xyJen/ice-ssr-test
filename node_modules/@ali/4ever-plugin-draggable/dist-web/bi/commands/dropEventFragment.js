import _extends from "@babel/runtime/helpers/extends";
import { Commands, Document, Block, Value, Inline } from '@ali/4ever-cangjie';
import logger from '@ali/4ever-logger';
import { DRAG_TYPE } from "../types";

function getFragment(dragFragment) {
  var type = dragFragment.type;
  var fragment = null;

  if (type === DRAG_TYPE.blocks && Array.isArray(dragFragment.fragment)) {
    var nodes = dragFragment.fragment.map(function (block) {
      return Block.fromJSON(_extends({}, block.nodeJson));
    });
    fragment = Document.create({
      nodes: nodes
    });
  } else if (type === DRAG_TYPE.inline && dragFragment.fragment.key) {
    var node = Inline.fromJSON(dragFragment.fragment.nodeJson);
    var block = Block.create({
      type: 'paragraph',
      nodes: [node]
    });
    fragment = Document.create({
      nodes: [block]
    });
  }

  return fragment;
}

export default function dropEventFragment(controller, payload) {
  var dragFragment = payload.dragFragment;
  if (!dragFragment) return controller;
  var selection = controller.value.selection;
  var fragment;

  try {
    fragment = getFragment(dragFragment); // 校验，若包含不合法数据直接放弃本次拖拽

    controller.serializer.valueToJsonML(Value.create({
      document: fragment
    }));

    if (fragment) {
      controller.command(Commands.insertFragmentAtRange, selection, fragment);
    }

    logger.sum('drag_fragment');
  } catch (e) {
    console.warn(e);
    logger.sum('drag_fragment_failed');
  }

  return controller;
}
//# sourceMappingURL=dropEventFragment.js.map