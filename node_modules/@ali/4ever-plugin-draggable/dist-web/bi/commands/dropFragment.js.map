{"version":3,"sources":["../../../../src/bi/commands/dropFragment.ts"],"names":["Commands","logger","DRAG_TYPE","DROP_POSITION","moveBlockToDrop","moveInlineToDrop","moveImageToDrop","updateDraggableData","isSubjectFragment","omit","cloneDeep","Heading","dropFragment","controller","payload","dragFragment","dropHolder","isCopy","type","blocks","Array","isArray","fragment","blocksCount","length","dropKey","key","dropPosition","pagePosition","position","undefined","isSubjectGroup","after","reverse","document","value","dropBlock","getNode","dragNodes","map","block","filter","node","isCallout","isAtCalloutEdge","query","isSubjectAtCalloutEdge","forEach","dragNode","command","setNodeByKey","data","calloutPr","sum","inline"],"mappings":"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","sourcesContent":["import { Block, Commands, Controller } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport { DraggableDataProps, DRAG_TYPE, DROP_POSITION, DragBlocksProps, DragInlineProps } from '../types';\nimport moveBlockToDrop from '../utils/moveBlockToDrop';\nimport moveInlineToDrop from '../utils/moveInlineToDrop';\nimport moveImageToDrop from '../utils/moveImageToDrop';\nimport { updateDraggableData } from '../model/draggableData';\nimport isSubjectFragment from '../utils/isSubjectFragment';\nimport { omit } from 'lodash-es';\nimport { cloneDeep } from 'lodash-es';\nimport { Heading } from '@ali/4ever-plugin-heading';\n\n/**\n * drop 文档中的内容（inline | blocks）\n * controller should be dataController\n */\nexport default function dropFragment(controller: Controller, payload: DraggableDataProps) {\n  const { dragFragment, dropHolder, isCopy } = payload;\n  if (!dragFragment) return controller;\n\n  const { type } = dragFragment;\n  if (type === DRAG_TYPE.blocks && Array.isArray(dragFragment.fragment) && dropHolder) {\n    const fragment = [...dragFragment.fragment] as DragBlocksProps;\n    const blocksCount = fragment.length;\n    const { key: dropKey, dropPosition, pagePosition } = dropHolder;\n\n    if (!blocksCount || !dropKey) return controller;\n\n    const position = pagePosition !== undefined ? pagePosition : dropPosition;\n\n    // 是否是议题组\n    const isSubjectGroup = isSubjectFragment(dragFragment);\n\n    if (blocksCount > 1 && position === DROP_POSITION.after) {\n      /**\n       * 0: A\n       * 1: B\n       * 2: C\n       * 3: D\n       * 现在我们将 [C, D] drop 到 A.after，假设按照正常顺序结果是：\n       * 待移动 [C, D]，文档: [A, B, C, D]\n       * 待移动 [D]，文档: [A, C, B, D]\n       * 待移动 []，文档: [A, D, C, B]\n       * 因为 A.after 是一个固定位，最终的结果 [D, C] 与预期不符，reverse 的话:\n       * 待移动 [D, C]，文档: [A, B, C, D]\n       * 待移动 [C]，文档: [A, D, B, C]\n       * 待移动 []，文档: [A, C, D, B]\n       * 最终结果 [C, D] 的顺序得以保留\n       */\n      fragment.reverse();\n    }\n\n    const { document } = controller.value;\n    const dropBlock = document.getNode(dropKey);\n\n    const dragNodes = dropBlock\n      ? fragment\n        .map((block) => moveBlockToDrop(controller, block.key, dropBlock, position, isCopy))\n        .filter((node) => !!node) as Block[]\n      : [];\n\n    if (Heading.isCallout(dropBlock)) {\n      // dropBlock 是 callout 的边缘节点\n      const isAtCalloutEdge = controller.query('getCalloutStartBlock', dropBlock as any) === dropBlock || controller.query('getCalloutEndBlock', dropBlock as any) === dropBlock;\n      // 在 callout 边缘的议题组则不予处理\n      const isSubjectAtCalloutEdge = isSubjectGroup && isAtCalloutEdge;\n      if (!isSubjectAtCalloutEdge) {\n        dragNodes.forEach((dragNode) => controller.command(Commands.setNodeByKey, dragNode.key, {\n          data: {\n            // 兜底处理，拖进 callout 的 subjectPr 置空\n            ...omit(dragNode.data, 'subjectPr'),\n            calloutPr: cloneDeep((dropBlock as any).data.calloutPr),\n          },\n        }));\n      }\n    }\n\n    if (blocksCount === 1) {\n      logger.sum('drag_block');\n    } else {\n      logger.sum('drag_blocks');\n    }\n  } else if (type === DRAG_TYPE.inline && (dragFragment.fragment as DragInlineProps).type === 'image' && dropHolder) {\n    const { dropPosition, key: dropKey } = dropHolder;\n    const { document } = controller.value;\n    const dropBlock = document.getNode(dropKey);\n    if (!dropBlock) return controller;\n    moveImageToDrop(controller, (dragFragment.fragment as DragInlineProps).key, dropBlock, dropPosition, isCopy);\n  } else if (type === DRAG_TYPE.inline && (dragFragment.fragment as DragInlineProps).key) {\n    moveInlineToDrop(controller, (dragFragment.fragment as DragInlineProps).key, isCopy);\n    logger.sum('drag_inline');\n  }\n  // 清除 controller 上的数据\n  return updateDraggableData(controller);\n}\n"],"file":"dropFragment.js"}