import { updateDragFragment as updateFragment, getDraggableData, updateDraggableData } from "../model/draggableData";
import DragFragment from "../model/dragFragment";
import getDragNodes from "../utils/getDragNodes";
/**
 * 更新 dragFragment，此处的内容应是排版前的原始数据
 * 使用 action 来更新，以便排版模式下劫持后在 behaviorController 中 getDragNodes
 */

export default function updateDragFragment(controller, payload) {
  if (!payload) {
    // 清除
    var _ref = getDraggableData(controller) || {},
        oldDragFragment = _ref.dragFragment;

    if (!oldDragFragment) return controller;
    return updateDraggableData(controller);
  }

  var event = payload.event,
      key = payload.key;
  var node = controller.value.document.getNode(key);
  if (!node) return controller; // 获取关联的可拖拽元素

  var nodes = getDragNodes(controller, key);
  var dragFragment = DragFragment.createDragFragment(event, nodes, controller);
  return updateFragment(controller, dragFragment);
}
//# sourceMappingURL=updateDragFragment.js.map