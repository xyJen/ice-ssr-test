import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { DropdownAnimation } from '@ali/we-util';
import { Menu, EMenuMode } from '@ali/we-design';
import { TextMenu } from '@ali/we-toolbar';
import { Menu as MenuAdapter } from '@ali/4ever-component';
import useTransformMenus from "./useTransformMenus";
import styled from 'styled-components';
import { DraggableRole } from "../../utils/role";
var Scrollbar = /*#__PURE__*/styled.div(["overflow:auto;overflow:overlay;&::-webkit-scrollbar{width:8px;}&::-webkit-scrollbar-track{border-radius:8px;}&::-webkit-scrollbar-thumb{border-radius:8px;background-color:unset;}&:hover::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,0.5);}"]);
export var sizeStyle = {
  minWidth: 173,
  whiteSpace: 'nowrap',
  overflow: 'auto',
  maxHeight: 550
};
var Wrapper = /*#__PURE__*/styled.div(["display:flex;flex-direction:column;"]);
export default function TransformButton(props) {
  var controller = props.controller,
      locale = props.locale,
      getContainer = props.getContainer,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "getContainer"]);

  var distance = null;

  if (typeof getContainer === 'function') {
    var test = getContainer();

    if (test) {
      var top = test.getBoundingClientRect().top - 20;
      var bottom = window.innerHeight - test.getBoundingClientRect().bottom - 20;
      distance = Math.max(top, bottom);
    }
  }

  var _React$useState = React.useState(false),
      visible = _React$useState[0],
      setVisible = _React$useState[1];

  var handleVisibleChange = function handleVisibleChange(value) {
    setVisible(value);
  };

  var hide = function hide() {
    setVisible(false);
  };

  var _useTransformMenus = useTransformMenus(locale),
      extras = _useTransformMenus.extras,
      insertTransMenus = _useTransformMenus.menus;

  var allSelected = Object.keys(extras).filter(function (item) {
    return item !== 'paragraph';
  });
  var isMixed = allSelected.length > 1;
  var text = isMixed ? locale == null ? void 0 : locale.mixed : locale[allSelected[0]];
  return /*#__PURE__*/_createElement(TextMenu, _extends({
    visible: visible,
    value: text || (locale == null ? void 0 : locale.paragraph) || '',
    title: locale.transform,
    tooltip: locale.transform,
    onVisibleChange: handleVisibleChange,
    testid: "transfrom-button",
    showTitle: true,
    getContainer: getContainer,
    role: DraggableRole.dragTransform,
    overlay: /*#__PURE__*/_createElement(DropdownAnimation, {
      visible: visible
    }, /*#__PURE__*/_createElement(Scrollbar, {
      style: {
        minWidth: 173,
        maxHeight: distance || 'calc(50vh - 20px)'
      }
    }, /*#__PURE__*/_createElement(Wrapper, null, /*#__PURE__*/_createElement(Menu, {
      mode: EMenuMode.vertical,
      selectedKeys: [],
      destroyOverlayWhenInvisible: true,
      insertSubmenuToMenuRoot: true,
      style: sizeStyle,
      onClick: hide,
      getContainer: getContainer,
      role: DraggableRole.dragTransform
    }, /*#__PURE__*/_createElement(MenuAdapter, {
      menus: insertTransMenus.menus
    })))))
  }, rest));
}
//# sourceMappingURL=transformButton.js.map