import _extends from "@babel/runtime/helpers/extends";
import React, { useMemo, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Menu, EMenuMode } from '@ali/we-design';
import { ToolbarCutNormal, ToolbarCopyNormal, ToolbarDeleteNormal, AddDownNormal, AddUpNormal, MaodianNormal, ToolbarShareNormal, PaletteNormal } from '@ali/we-icon';
import { Controller, ContextMenu } from '@ali/4ever-cangjie';
import { utils as refblockUtils } from '@ali/4ever-plugin-refblock';
import { Code } from '@ali/4ever-plugin-code';
import { Paragraph } from '@ali/4ever-plugin-paragraph';
import { Heading } from '@ali/4ever-plugin-heading';
import { getHetuDragMenuItems } from "../utils/hetu";
import { Menu as MenuAdapter, TYPE_GROUP, TYPE_MENU_ITEM, TYPE_SUB_MENU } from '@ali/4ever-component';
import { dragMenuInsertAfter, dragMenuInsertBefore, dragMenuCutOrCopy, dragMenuDelete } from "../actions";
import { setNodeUUID, uniqueId } from '@ali/4ever-utils';
import { DragMenuActionType } from "../constants";
import { getSiblingDraggableBlocks } from "../utils/getDragNodes";
import useTransformMenus from "./useTransformMenus";
var ACTION_COPY = ContextMenu.ACTION_COPY,
    ACTION_CUT = ContextMenu.ACTION_CUT;
export var sizeStyle = {
  width: 190,
  whiteSpace: 'nowrap'
};
export var commonHeadStyle = {
  padding: '6px 8px',
  height: 'auto',
  fontWeight: 500
};
export var menuItemSizeStyle = {
  width: '112px',
  minWidth: '112px'
};
var canTransType = [Heading.Heading1.TYPE, Heading.Heading2.TYPE, Heading.Heading3.TYPE, Heading.Heading4.TYPE, Heading.Heading5.TYPE, Heading.Heading6.TYPE, Paragraph.TYPE, Code.TYPE];
var canSetColorType = [Heading.Heading1.TYPE, Heading.Heading2.TYPE, Heading.Heading3.TYPE, Heading.Heading4.TYPE, Heading.Heading5.TYPE, Heading.Heading6.TYPE, Paragraph.TYPE];
var InsertRoles; // 分享段落链接的两种形式，im 直接发送到聊天，url 复制到剪切板

(function (InsertRoles) {
  InsertRoles["copy"] = "copy";
  InsertRoles["cut"] = "cut";
  InsertRoles["copyAsUrlOld"] = "copyAsUrlOld";
  InsertRoles["shareParagraphToIm"] = "shareParagraphToIm";
  InsertRoles["copyParagraphUrl"] = "copyParagraphUrl";
  InsertRoles["menuDrag"] = "menuDrag";
  InsertRoles["insert"] = "insert";
  InsertRoles["append"] = "append";
  InsertRoles["delete"] = "delete";
  InsertRoles["paragraphColor"] = "paragraphColor";
})(InsertRoles || (InsertRoles = {}));

var ShareParagraphType;

(function (ShareParagraphType) {
  ShareParagraphType["Im"] = "im";
  ShareParagraphType["Url"] = "url";
})(ShareParagraphType || (ShareParagraphType = {}));

var _ref = /*#__PURE__*/_createElement(ToolbarShareNormal, null);

var _ref2 = /*#__PURE__*/_createElement(MaodianNormal, null);

var _ref3 = /*#__PURE__*/_createElement(ToolbarCopyNormal, null);

var _ref4 = /*#__PURE__*/_createElement(ToolbarCutNormal, null);

var _ref5 = /*#__PURE__*/_createElement(AddUpNormal, null);

var _ref6 = /*#__PURE__*/_createElement(AddDownNormal, null);

var _ref7 = /*#__PURE__*/_createElement(ToolbarDeleteNormal, null);

var _ref8 = /*#__PURE__*/_createElement(PaletteNormal, null);

var DragMenu = function DragMenu(props) {
  var currentBlock = props.currentBlock,
      locale = props.locale,
      handleClickMenu = props.handleClickMenu,
      getCopyURL = props.getCopyURL,
      shareParagraph = props.shareParagraph,
      hetu = props.hetu,
      refblock = props.refblock,
      extraTransformMenu = props.extraTransformMenu,
      _props$customizeMenus = props.customizeMenus,
      customizeMenus = _props$customizeMenus === void 0 ? [] : _props$customizeMenus;
  var controller = Controller.useController();
  var blocks = useMemo(function () {
    return getSiblingDraggableBlocks(controller, currentBlock) || [];
  }, [controller, currentBlock]);
  var onCutOrCopy = useCallback(function (action) {
    if (!currentBlock) {
      return;
    }

    controller.run('onAction', dragMenuCutOrCopy({
      node: currentBlock,
      action: action
    }));
  }, [currentBlock]);
  var onClickCut = useCallback(function () {
    onCutOrCopy(ACTION_CUT);
  }, [onCutOrCopy]);
  var onClickCopy = useCallback(function () {
    onCutOrCopy(ACTION_COPY);
  }, [onCutOrCopy]);
  var onClickDelete = useCallback(function () {
    if (!currentBlock) {
      return;
    }

    controller.run('onAction', dragMenuDelete({
      node: currentBlock
    }));
  }, [currentBlock]);
  var onClickAppend = useCallback(function () {
    if (!currentBlock) {
      return;
    }

    controller.run('onAction', dragMenuInsertAfter({
      node: currentBlock
    }));
  }, [currentBlock, controller]);

  var _useTransformMenus = useTransformMenus(locale, currentBlock, true),
      insertTransMenus = _useTransformMenus.menus;

  var onClickInsert = useCallback(function () {
    if (!currentBlock) {
      return;
    }

    controller.run('onAction', dragMenuInsertBefore({
      node: currentBlock
    }));
  }, [controller, currentBlock]);
  var onClickCopyLink = useCallback(function () {
    if (!currentBlock || !getCopyURL) {
      return;
    }

    try {
      var _currentBlock$data = currentBlock.data,
          _currentBlock$data$su = _currentBlock$data.subjectPr,
          subjectPr = _currentBlock$data$su === void 0 ? {} : _currentBlock$data$su,
          _id = _currentBlock$data.uuid;

      var _uuid = subjectPr.id || _id;

      if (!_uuid) {
        _uuid = uniqueId();
        controller.run('onAction', setNodeUUID(currentBlock, _uuid));
      }

      getCopyURL(_uuid);
    } catch (err) {
      console.warn(err);
    }
  }, [controller, currentBlock, getCopyURL]);
  var onParagraphShare = useCallback(function (type) {
    if (!currentBlock || !shareParagraph) {
      return;
    }

    try {
      var _currentBlock$data$su2 = currentBlock.data.subjectPr,
          subjectPr = _currentBlock$data$su2 === void 0 ? {} : _currentBlock$data$su2;

      var _uuid2 = subjectPr.id || controller.query('anchor', currentBlock);

      if (!_uuid2) {
        if (controller.enableUUID) {
          controller.dispatch('generateUUID', {
            node: currentBlock
          });
          var blockWithUUID = controller.value.document.assertElement(currentBlock.key);
          _uuid2 = controller.query('anchor', blockWithUUID);
        } else {
          _uuid2 = uniqueId();
          controller.run('onAction', setNodeUUID(currentBlock, _uuid2));
        }
      }

      shareParagraph(type, _uuid2, currentBlock);
    } catch (err) {
      console.warn(err);
    }
  }, [controller, currentBlock, locale == null ? void 0 : locale.shareParagraphToImFail, locale == null ? void 0 : locale.copyParagraphUrlFail, locale == null ? void 0 : locale.shareParagraphToImSuccess, locale == null ? void 0 : locale.copyParagraphUrlSuccess, shareParagraph]);
  var onClickCopyRefBlock = useCallback(function () {
    controller.dispatch('copyAsRefBlock', blocks);
  }, [controller, blocks]);
  var onCopyRefBlock = useCallback(function (block) {
    controller.dispatch('copyRefBlock', block);
  }, [controller]);
  var insertMenus = useMemo(function () {
    var transformMenus = [];

    if (currentBlock) {
      // 额外的 transform menu 能够独立存在
      transformMenus.push.apply(transformMenus, extraTransformMenu.map(function (item) {
        return _extends({
          type: TYPE_MENU_ITEM,
          action: DragMenuActionType,
          currentBlock: currentBlock
        }, item);
      }));
    } // 河图同步块的 menu 处理


    var hetuMenus = hetu != null && hetu.enable ? getHetuDragMenuItems({
      block: currentBlock,
      locale: locale,
      config: hetu,
      controller: controller
    }) : []; // 如果 shareParagraph 和 getCopyURL 都没有，不显示这个按钮

    var paragraphMenus = [];

    if (shareParagraph || getCopyURL) {
      paragraphMenus = shareParagraph ? [{
        type: TYPE_SUB_MENU,
        icon: _ref,
        title: locale == null ? void 0 : locale.shareParagraphUrl,
        menus: [{
          type: TYPE_MENU_ITEM,
          title: locale == null ? void 0 : locale.shareParagraphToIm,
          menuExtraKey: 'share',
          onClick: function onClick() {
            return onParagraphShare(ShareParagraphType.Im);
          },
          role: InsertRoles.shareParagraphToIm
        }, {
          type: TYPE_MENU_ITEM,
          title: locale == null ? void 0 : locale.copyParagraphUrl,
          key: 'saveUrl',
          onClick: function onClick() {
            return onParagraphShare(ShareParagraphType.Url);
          },
          role: InsertRoles.copyParagraphUrl
        }]
      }] : [{
        type: TYPE_MENU_ITEM,
        title: locale == null ? void 0 : locale.copyAsUrl,
        icon: _ref2,
        menuExtraKey: 'copyAsUrl',
        role: InsertRoles.copyAsUrlOld,
        onClick: onClickCopyLink
      }];
    } // 引用块菜单


    var refblockMenus = refblock != null && refblock.enable ? refblockUtils.getRefBlockDragMenuItems({
      block: currentBlock,
      locale: locale,
      value: controller.value,
      disableNodeInRefBlock: function disableNodeInRefBlock(node) {
        return controller.query('disableNodeInRefBlock', node) === true;
      },
      onCopyAsRefBlock: onClickCopyRefBlock,
      onCopyRefBlock: onCopyRefBlock
    }) : [];
    var setColorMenu = {
      type: TYPE_GROUP,
      menus: []
    };
    var arr = [{
      type: TYPE_GROUP,
      menus: [{
        type: TYPE_MENU_ITEM,
        title: locale == null ? void 0 : locale.copyMenu,
        icon: _ref3,
        menuExtraKey: 'copy',
        role: InsertRoles.copy,
        onClick: onClickCopy
      }, {
        type: TYPE_MENU_ITEM,
        title: locale == null ? void 0 : locale.cutMenu,
        icon: _ref4,
        menuExtraKey: 'cut',
        role: InsertRoles.cut,
        onClick: onClickCut
      }]
    }, {
      type: TYPE_GROUP,
      menus: [].concat(paragraphMenus, hetuMenus, refblockMenus, transformMenus)
    }, {
      type: TYPE_GROUP,
      menus: [{
        type: TYPE_MENU_ITEM,
        icon: _ref5,
        title: locale == null ? void 0 : locale.insert,
        menuExtraKey: 'insert',
        onClick: onClickInsert,
        role: InsertRoles.insert,
        testid: 'insert-before'
      }, {
        type: TYPE_MENU_ITEM,
        icon: _ref6,
        title: locale == null ? void 0 : locale.append,
        menuExtraKey: 'append',
        onClick: onClickAppend,
        role: InsertRoles.append,
        testid: 'insert-after'
      }]
    }, setColorMenu, {
      type: TYPE_GROUP,
      menus: [{
        type: TYPE_MENU_ITEM,
        title: locale == null ? void 0 : locale.deleteMenu,
        icon: _ref7,
        menuExtraKey: 'delete',
        role: InsertRoles["delete"],
        onClick: onClickDelete
      }]
    }];

    if (currentBlock && canTransType.includes(currentBlock.type)) {
      arr[0].menus.push(insertTransMenus);
    }

    if (currentBlock && canSetColorType.includes(currentBlock.type)) {
      setColorMenu.menus.push({
        type: TYPE_SUB_MENU,
        title: locale == null ? void 0 : locale.paragraphColor,
        icon: _ref8,
        menus: [{
          type: TYPE_MENU_ITEM,
          menuKey: 'paragraphColor',
          currentBlock: currentBlock,
          role: InsertRoles.paragraphColor
        }]
      });
    }

    if (customizeMenus.length !== 0) {
      arr.unshift({
        type: TYPE_GROUP,
        menus: customizeMenus
      });
    }

    return arr;
  }, [currentBlock, onClickAppend, insertTransMenus, onClickCopy, onClickCut, onClickDelete, onClickInsert, getCopyURL, shareParagraph, extraTransformMenu, onClickCopyRefBlock, onCopyRefBlock]);
  var getMenus = useCallback(function () {
    return insertMenus;
  }, [insertMenus]);
  return /*#__PURE__*/_createElement(Menu, {
    mode: EMenuMode.vertical,
    selectedKeys: [],
    destroyOverlayWhenInvisible: true,
    insertSubmenuToMenuRoot: true,
    style: sizeStyle,
    onClick: handleClickMenu,
    testid: "drag-menu",
    role: InsertRoles.menuDrag
  }, /*#__PURE__*/_createElement(MenuAdapter, {
    menus: getMenus()
  }));
};

export default DragMenu;
//# sourceMappingURL=dragMenu.js.map