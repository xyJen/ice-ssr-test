{"version":3,"sources":["../../../../src/bi/components/draggable.tsx"],"names":["React","Inline","dragDirectlyStyle","dragStartHandler","Draggable","props","controller","renderNodeProps","node","shouldBeDraggable","query","dragDirectly","isInline","handleDragStart","event","undefined","key","handleMouseDown","stopPropagation","nativeEvent","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;qBAC4B,a;AAA5B,SAASC,MAAT,QAAuB,oBAAvB;AAEA,SACEC,iBADF;AAGA,OAAOC,gBAAP;;AAGA,IAAMC,SAAmC,GAAG,SAAtCA,SAAsC,CAACC,KAAD,EAAW;AAAA,MAC7CC,UAD6C,GACbD,KADa,CAC7CC,UAD6C;AAAA,MACjCC,eADiC,GACbF,KADa,CACjCE,eADiC;AAAA,MAG7CC,IAH6C,GAGpCD,eAHoC,CAG7CC,IAH6C,EAKrD;;AACA,MAAMC,iBAAiB,GAAG,CAAC,CAACH,UAAU,CAACI,KAAX,CAAiB,iBAAjB,EAAoC;AAAEF,IAAAA,IAAI,EAAJA;AAAF,GAApC,CAA5B;AACA,MAAMG,YAAY,GAAGV,MAAM,CAACW,QAAP,CAAgBJ,IAAhB,CAArB;;AAEA,MAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAA4B;AAClDX,IAAAA,gBAAgB,CAACW,KAAD,EAAQR,UAAR,EAAoBS,SAApB,EAA+BP,IAAI,CAACQ,GAApC,CAAhB;AACD,GAFD;;AAIA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACH,KAAD,EAA6B;AACnD,QAAIH,YAAJ,EAAkB;AAChB;AACAG,MAAAA,KAAK,CAACI,eAAN;AACAJ,MAAAA,KAAK,CAACK,WAAN,CAAkBD,eAAlB;AACD;AACF,GAND;;AAQA,MAAI,CAACT,iBAAL,EAAwB;AACtB,wBACE,qCACGJ,KAAK,CAACe,QADT,CADF;AAKD;;AAED,sBACE;AACE,IAAA,KAAK,eACAlB,iBADA,CADP;AAIE,IAAA,SAAS,EAAE,MAJb;AAKE,IAAA,WAAW,EAAEe,eALf;AAME,IAAA,WAAW,EAAEJ,eANf;AAOE,sBAAgBL,IAAI,CAACQ;AAPvB,KASGX,KAAK,CAACe,QATT,CADF;AAaD,CA1CD;;AA4CA,eAAehB,SAAf","sourcesContent":["import React from 'react';\nimport { Inline } from '@ali/4ever-cangjie';\nimport { DraggableProps } from '../types';\nimport {\n  dragDirectlyStyle,\n} from './styled';\nimport dragStartHandler from '../dragEventHandlers/dragStartHandler';\n\n\nconst Draggable: React.FC<DraggableProps> = (props) => {\n  const { controller, renderNodeProps } = props;\n\n  const { node } = renderNodeProps;\n\n  // 是否开启拖拽\n  const shouldBeDraggable = !!controller.query('isNodeDraggable', { node });\n  const dragDirectly = Inline.isInline(node);\n\n  const handleDragStart = (event: React.DragEvent) => {\n    dragStartHandler(event, controller, undefined, node.key);\n  };\n\n  const handleMouseDown = (event: React.MouseEvent) => {\n    if (dragDirectly) {\n      // 避免和选区冲突\n      event.stopPropagation();\n      event.nativeEvent.stopPropagation();\n    }\n  };\n\n  if (!shouldBeDraggable) {\n    return (\n      <>\n        {props.children}\n      </>\n    );\n  }\n\n  return (\n    <span\n      style={{\n        ...dragDirectlyStyle,\n      }}\n      draggable={'true'}\n      onMouseDown={handleMouseDown}\n      onDragStart={handleDragStart}\n      data-draggable={node.key}\n    >\n      {props.children}\n    </span>\n  );\n};\n\nexport default Draggable;\n"],"file":"draggable.js"}