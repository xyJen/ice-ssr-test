{"version":3,"sources":["../../../../src/bi/utils/moveInlineToDrop.ts"],"names":["Commands","Path","Inline","splitNodeAtCurrentRange","controller","value","document","selection","convertToTextPoints","start","withoutNormalizing","command","splitNodeByKey","key","offset","moveNodeToCurrentRange","dragNode","isCopy","dragNodePath","getPath","closestInline","getClosestInline","dropNode","assertNode","parent","getParent","query","dropNodePath","isYounger","index","nodes","indexOf","copyedNode","fromJSON","toJSON","insertNodeByKey","focus","moveNodeByKey","moveInlineToDrop","dragKey","getNode","isInline","getStart","isEdgePoint","insertEmptyBlock"],"mappings":"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","sourcesContent":["import { Controller, Commands, Path, Node, Inline } from '@ali/4ever-cangjie';\n\n\nfunction splitNodeAtCurrentRange(controller: Controller) {\n  const { value } = controller;\n  const { document } = value;\n  const { start } = value.selection.convertToTextPoints(document);\n  controller.withoutNormalizing(() => {\n    controller.command(Commands.splitNodeByKey, start.key, start.offset);\n  });\n}\n\nfunction moveNodeToCurrentRange(dragNode: Node, controller: Controller, isCopy?: boolean) {\n  const { value } = controller;\n  const { document, selection } = value;\n  const dragNodePath = document.getPath(dragNode.key);\n\n  const { start } = selection.convertToTextPoints(document);\n  const closestInline = document.getClosestInline(start.key);\n  // 不允许拖拽到 inline 元素内部：start 可能位于行内元素附带的空文本节点或 link 内部\n  const dropNode = document.assertNode(closestInline ? closestInline.key : start.key);\n\n  const parent = document.getParent(dropNode.key);\n  if (!parent || controller.query('isVoid', parent)) return;\n\n  const dropNodePath = document.getPath(dropNode.key);\n\n  if (!dragNodePath) return;\n\n  const isYounger = Path.isYounger(dragNodePath, dropNodePath!);\n\n  let index = parent.nodes.indexOf(dropNode);\n  if (isYounger && !isCopy) {\n    index--;\n  }\n\n  if (isCopy) {\n    const copyedNode = Inline.fromJSON(dragNode.toJSON());\n    controller\n      .command(Commands.insertNodeByKey, parent.key, index, copyedNode)\n      .command(Commands.focus);\n  } else {\n    controller.command(Commands.moveNodeByKey, dragNode.key, parent.key, index);\n  }\n}\n\nexport default function moveInlineToDrop(\n  controller: Controller,\n  dragKey: string,\n  isCopy?: boolean,\n) {\n  splitNodeAtCurrentRange(controller);\n\n  const { value } = controller;\n  const { document, selection } = value;\n  const dragNode = document.getNode(dragKey);\n  if (!dragNode || !Inline.isInline(dragNode)) return;\n\n  const start = selection.getStart(document);\n\n  if (start.isEdgePoint()) {\n    controller.command(Commands.insertEmptyBlock, start);\n  }\n\n  moveNodeToCurrentRange(dragNode, controller, isCopy);\n}\n"],"file":"moveInlineToDrop.js"}