import { environment } from '@ali/4ever-cangjie';
import { Heading } from '@ali/4ever-plugin-heading';
import { Paragraph } from '@ali/4ever-plugin-paragraph';
import getClosestDom from "./getClosestDom";
import { DRAG_HIGHLIGHT_CLASSNAME, DRAG_HIGHLIGHT_TABLE_CLASSNAME, DRAG_THUMBNAIL_ID } from "./domUtils";
import getElementType from "./getElementType";
var MAX_FIT_HEIGHT = 200;
var MAX_ALLOW_ELEMENTS = 15;

function createFakeThumbnail(element) {
  var fakeElement = window.document.createElement('div');
  fakeElement.style.cssText = "width:" + element.clientWidth + "px;height:" + element.clientHeight + "px;background-color:rgba(17,31,44,0.08);";
  return fakeElement;
}

function isComplexElement(controller, element) {
  var viewNode = element.closest('[data-cangjie-leaf-block]') || element;
  if (!viewNode) return true;
  var viewKey = viewNode.getAttribute('data-cangjie-key');
  if (!viewKey) return true;
  var block = controller.value.document.getNode(viewKey);
  return !(Paragraph.isParagraph(block) || Heading.isHeading(block));
}

function cloneElement(controller, element) {
  var isComplex = isComplexElement(controller, element);
  if (!isComplex) return element.cloneNode(true);
  return createFakeThumbnail(element);
}
/**
 * 获取拖拽的缩略图
 * 策略：最多允许 15 个元素生成缩略图，如果元素高度大于 300 将做缩放
 * 1. 行内元素直接返回元素 dom 节点
 * 2. 块级元素
 *  2.1 单个
 *    2.1.1 不是拖拽配置声明的复杂元素类型：返回元素 dom 节点
 *    2.1.2 是拖拽配置声明的复杂元素类型：返回 fake 占位 dom
 *  2.2 多个
 *    2.2.1 是 paragraph 或 heading：深度克隆元素
 *    2.2.2 不是：生成 fake 占位 dom
 * @param controller
 * @param keys
 * @param draggableConfig
 */


export default function getDragThumbnails(controller, keys, draggableConfig) {
  var inlineKey = keys.inlineKey,
      viewKey = keys.viewKey;
  var highlightElements = []; // 1 处理行内元素

  if (inlineKey) {
    var inlineDom = getClosestDom(controller.value.document.getNode(inlineKey));
    highlightElements = inlineDom ? [inlineDom] : [];
  } else {
    // 根据当前高亮的元素查询
    highlightElements = window.document.querySelectorAll("." + DRAG_HIGHLIGHT_CLASSNAME); // 由于表格走的不是通用的拖拽高亮逻辑，因此这里需要处理一下拖拽表格的情况

    if (!highlightElements.length) {
      highlightElements = window.document.querySelectorAll("." + DRAG_HIGHLIGHT_TABLE_CLASSNAME);
    }
  }

  if (!highlightElements || !highlightElements.length) {
    return null;
  }

  var elements = Array.from(highlightElements);

  if (elements.length === 1) {
    var block = viewKey ? controller.value.document.getNode(viewKey) : null;
    var isSimple = true;

    if (block && draggableConfig != null && draggableConfig.complexElements) {
      var realType = getElementType(block);
      isSimple = !draggableConfig.complexElements[realType];
    } // 单个元素也限制高度


    if (isSimple && elements[0].clientHeight < MAX_FIT_HEIGHT) {
      // 2.1.2
      var codeScrollNode = elements[0].querySelector('.CodeMirror-scroll');

      if (codeScrollNode && codeScrollNode.scrollTop) {
        // HACK: 这里针对代码块做特别的处理：重置滚动防止偏差
        codeScrollNode.scrollTop = 0;
      }

      var inline = inlineKey ? controller.value.document.getNode(inlineKey) : null; // 对图片做特别处理：取图片包含高亮边框的那一层，防止边框显示不全

      if ((inline == null ? void 0 : inline.type) === 'image') {
        var imageNode = elements[0].closest('.image-data-wrapper') || elements[0];
        return imageNode;
      }

      return elements[0];
    }
  } // 2.1.1 or 2.2


  var clientHeight = 0;
  var clientWidth = 0;
  var thumbnail = window.document.createElement('div');
  var inner = window.document.createElement('div');
  var maxLen = Math.min(MAX_ALLOW_ELEMENTS, elements.length);

  for (var i = 0; i < maxLen; i++) {
    var clonedNode = cloneElement(controller, elements[i]);
    inner.appendChild(clonedNode);
    clientHeight += elements[i].clientHeight || 0;
    clientWidth = Math.max(clientWidth, elements[i].clientWidth);
  }

  var scale = 1 / Math.max(1, clientHeight / MAX_FIT_HEIGHT);
  inner.style.cssText = "background-color:#fff;transform-origin:0 0;transform:scale(" + scale + ");width:" + clientWidth + "px;";
  thumbnail.appendChild(inner);

  if (environment.IS_SAFARI) {
    // Safari need thumbnail in viewport
    thumbnail.style.cssText = 'position:fixed;top:99.9vh;left:99.9vh;';
  } else {
    thumbnail.style.cssText = 'position:fixed;top:9999px;left:9999px;';
  }

  thumbnail.id = DRAG_THUMBNAIL_ID;
  window.document.body.appendChild(thumbnail);
  return thumbnail;
}
//# sourceMappingURL=getDragThumbnails.js.map