{"version":3,"sources":["../../../../src/bi/utils/moveBlockToDrop.ts"],"names":["Document","Block","Text","Commands","Path","Paragraph","logger","DROP_POSITION","moveBlockToDrop","controller","dragKey","dropBlock","dropPosition","isCopy","document","value","dragBlock","getNode","undefined","query","parent","getParent","key","isDropToTable","type","index","nodes","indexOf","dragPath","assertPath","dropPath","isYounger","isSibling","before","after","copyedBlock","fromJSON","toJSON","doc","create","command","insertFragmentByKey","withoutNormalizing","parentPath","getPath","dummyBlock","insertNodeByKey","reverse","forEach","n","path","moveNodeByPath","newDragBlock","removeNodeByKey","draggedBlock","moveToEndOfNode","focus","moveNodeByKey","error","message"],"mappings":"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","sourcesContent":["import { Document, Node, Block, Text, Controller, Commands, Path } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport logger from '@ali/4ever-logger';\nimport {\n  DROP_POSITION,\n} from '../types';\n\n/**\n * 移动节点到 drop 位置\n * @param controller\n * @param dragKey\n * @param dropBlock\n * @param dropPosition\n * @param isCopy\n * @returns 返回移动后的节点\n */\nexport default function moveBlockToDrop(\n  controller: Controller,\n  dragKey: string,\n  dropBlock: Node,\n  dropPosition?: DROP_POSITION,\n  isCopy?: boolean,\n) {\n  const { document } = controller.value;\n  try {\n    const dragBlock = document.getNode(dragKey);\n    if (!dragBlock) return undefined;\n\n    if (controller.query('disableDrop', dragBlock as Block, dropBlock as Block)) {\n      return undefined;\n    }\n\n    const parent = document.getParent(dropBlock.key);\n    if (!parent) return null;\n\n    const isDropToTable = controller.query('isNodeInTable', dropBlock, true);\n\n    if ((dragBlock as Block).type === 'table' && isDropToTable) {\n      // 不允许表格拖入表格\n      return null;\n    }\n\n    let index = parent.nodes.indexOf(dropBlock as Block);\n\n    const dragPath = document.assertPath(dragBlock.key);\n    const dropPath = document.assertPath(dropBlock.key);\n\n    const isYounger = Path.isYounger(dragPath, dropPath);\n    const isSibling = Path.isSibling(dragPath, dropPath);\n    if (isSibling && !isCopy) {\n      if (isYounger && dropPosition === DROP_POSITION.before) {\n        index -= 1;\n      } else if (!isYounger && dropPosition === DROP_POSITION.after) {\n        index += 1;\n      }\n    } else if (dropPosition === DROP_POSITION.after) {\n      index += 1;\n    }\n\n    // source 是个 TableCell，需要过滤掉 Cell 节点。\n    if (controller.query('isTableCell', dragBlock)) {\n      if (dragBlock === dropBlock || (dragBlock as Block).getNode(dropBlock.key)) {\n        // 拖到了自己的 children，直接返回\n        return null;\n      }\n      if (isCopy) {\n        const copyedBlock = Block.fromJSON(dragBlock.toJSON());\n        const doc = Document.create({\n          nodes: copyedBlock.nodes,\n        });\n        controller\n          .command(Commands.insertFragmentByKey, parent.key, index, doc);\n      } else {\n        controller.withoutNormalizing(() => {\n          const parentPath = document.getPath(parent.key);\n\n          /**\n           * 由于河图卡片限制，只能使用 move node 操作。\n           * move mode 之后，需要移除 dragBlock，但是此时 dragBlock 已经无法定位了（path、key 均失效了）。\n           *\n           * 因此这里引入了一个 dummyBlock，先插入到 dragBlock 内部，作为定位使用。\n           * 这样移动完了之后，dragBlock 还剩一个 dummyBlock，可以获取最新的 dragBlock 引用。\n           */\n          const dummyBlock = Paragraph.create({ nodes: [Text.create()] });\n          controller.command(Commands.insertNodeByKey, dragBlock.key, 0, dummyBlock);\n\n          // dragBlock.nodes：旧的 dragBlock 引用，不包含 dummyBlock\n          [...(dragBlock as Block).nodes].reverse().forEach((n) => {\n            const path = controller.value.document.getPath(n.key);\n            if (path && parentPath) {\n              controller.command(Commands.moveNodeByPath, path, parentPath, index);\n            }\n          });\n          // 参考上面注释，这里来获取最新的 dragBlock 引用\n          const newDragBlock = controller.value.document.getParent(dummyBlock.key);\n          if (newDragBlock) {\n            controller.command(Commands.removeNodeByKey, newDragBlock.key);\n          }\n        });\n      }\n      return undefined;\n    }\n\n    let draggedBlock = dragBlock;\n    if (isCopy) {\n      const copyedBlock = Block.fromJSON(dragBlock.toJSON());\n      draggedBlock = copyedBlock;\n      controller\n        .command(Commands.insertNodeByKey, parent.key, index, copyedBlock)\n        .command(Commands.moveToEndOfNode, copyedBlock)\n        .command(Commands.focus);\n    } else {\n      controller\n        .command(Commands.moveNodeByKey, dragKey, parent.key, index)\n        .command(Commands.moveToEndOfNode, dragBlock)\n        .command(Commands.focus);\n    }\n\n    return draggedBlock;\n  } catch (error: any) {\n    logger.error(`parse drag fragment failed: ${error.message}`);\n    return null;\n  }\n}\n"],"file":"moveBlockToDrop.js"}