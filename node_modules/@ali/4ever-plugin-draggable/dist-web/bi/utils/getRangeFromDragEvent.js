import { domUtils, Block } from '@ali/4ever-cangjie';
var COLUMN_BAR_KEY = 'data-column-dragkey';
var HORIZ_ADJUST_OFFSET = 10;

function shouldTraverseBlock(node) {
  if (!node) return false;
  if (!Block.isBlock(node)) return true;
  if (/line/.test(node.type)) return true;
  return false;
}
/**
   * 从 drag 事件中计算命中的块级元素
   * 水平位置矫正策略（I 表示 drag 事件的位置）：
   * |   [---I---  ]   |
   * |   [------ I ]   |
   * | I [-------  ]   |
   * |   [-------  ] I |
   * 当事件命中 content 的 padding 区域时，如果取原始的水平位置拿不到 block
   * 因此矫正为 dragEvent.target 的中点
   */


export function getBlockFromDragEvent(controller, event, zoom, onlyEdge) {
  var _event$target, _block3;

  if (onlyEdge === void 0) {
    onlyEdge = false;
  }

  var clientX = event.clientX,
      clientY = event.clientY;

  var _ref = ((_event$target = event.target) == null ? void 0 : _event$target.getBoundingClientRect()) || {},
      left = _ref.left,
      right = _ref.right;

  var adjustedX = (left + right) / 2 || clientX;
  var document = controller.value.document;
  var isOutsideContent = false;

  if (event.target) {
    var element = event.target;
    var dragKey = element.getAttribute(COLUMN_BAR_KEY); // 如果刚好到分隔栏上，就直接返回分隔栏的 key

    if (dragKey) {
      var _block = document.getNode(dragKey);

      if (_block != null && _block.isElement()) {
        return _block.nodes[0];
      }
    } // 如果在编辑器区域外部，需要加一下 padding，重新获取一下。


    if (element.querySelector('[data-cangjie-editable]')) {
      isOutsideContent = true;
      if (typeof zoom !== 'number') return null;

      var _window$getComputedSt = window.getComputedStyle(event.target),
          paddingLeft = _window$getComputedSt.paddingLeft,
          paddingRight = _window$getComputedSt.paddingRight;

      var l = left + parseInt(paddingLeft, 10) * zoom;
      var r = right - parseInt(paddingRight, 10) * zoom;

      if (clientX < l) {
        adjustedX = l + HORIZ_ADJUST_OFFSET * zoom;
      } else if (clientX > r) {
        adjustedX = r - HORIZ_ADJUST_OFFSET * zoom;
      }
    }
  } // 图片仅在拖拽到分隔栏和编辑器区域外部时返回 block


  if (onlyEdge && !isOutsideContent) {
    return null;
  }

  var hitedTarget = window.document.elementFromPoint(adjustedX, clientY);
  if (!hitedTarget) return null; // 兼容列表悬空区域探测

  if (hitedTarget.closest('[data-listid]')) {
    hitedTarget = hitedTarget.querySelector('[data-cangjie-key]') || hitedTarget;
  } // 兼容分栏悬空区域探测


  if (hitedTarget.hasAttribute('data-column')) {
    var _hitedTarget$firstEle;

    var pivotY = ((_hitedTarget$firstEle = hitedTarget.firstElementChild) == null ? void 0 : _hitedTarget$firstEle.getBoundingClientRect().bottom) || 0;
    var childTarget = clientY >= pivotY ? hitedTarget.lastElementChild : hitedTarget.firstElementChild;
    hitedTarget = (childTarget == null ? void 0 : childTarget.querySelector('[data-cangjie-key]')) || hitedTarget;
  }

  var node = hitedTarget.closest('[data-cangjie-key]');
  var block = null;

  if (node) {
    var _node$getAttribute;

    var _ref2 = ((_node$getAttribute = node.getAttribute('data-cangjie-key')) == null ? void 0 : _node$getAttribute.split(':')) || [],
        key = _ref2[0];

    block = document.getNode(key);

    while (shouldTraverseBlock(block)) {
      var _block2;

      block = document.getParent(((_block2 = block) == null ? void 0 : _block2.key) || '');
    }
  }

  if (((_block3 = block) == null ? void 0 : _block3.key) === document.key) {
    return null;
  }

  return block;
}
export default function getRangeFromDragEvent(controller, event) {
  getBlockFromDragEvent(controller, event);
  var clientX = event.clientX,
      clientY = event.clientY;
  var hitedTarget = window.document.elementFromPoint(clientX, clientY);
  if (!hitedTarget) return null;
  hitedTarget = hitedTarget.closest('[data-listid]') || hitedTarget;
  return domUtils.caretRangeFromTargetAndCoord(hitedTarget, clientX, clientY, controller);
}
//# sourceMappingURL=getRangeFromDragEvent.js.map