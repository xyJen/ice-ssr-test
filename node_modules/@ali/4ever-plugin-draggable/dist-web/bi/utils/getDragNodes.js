import { isEqual } from 'lodash-es';
import { Inline } from '@ali/4ever-cangjie';
import { isListNode } from '@ali/4ever-utils';
import { Heading } from '@ali/4ever-plugin-heading';
import { Paragraph } from '@ali/4ever-plugin-paragraph';
import { headingGroupList } from '@ali/4ever-plugin-heading-group';
var Heading1 = Heading.Heading1;
/**
 * 聚合节点组
 * @param node 聚合开始节点
 * @param document 文档模型
 * @param until 聚合截止
 * @returns
 */

function groupNodes(node, document, until) {
  var path = document.getPath(node.key);

  if (!path) {
    return [];
  }

  var nodes = [node];
  var index = path[0];
  index += 1;

  while (index < document.nodes.length) {
    var item = document.nodes[index];

    if (until(item)) {
      break;
    }

    nodes.push(item);
    index += 1;
  }

  return nodes;
}
/**
 * 基于 getRootBlocksAtRange 获取关联的可拖拽元素集合
 * 排版模式下有 page、section、line 等自定义层级结构较为复杂，要提取出正确的可拖拽元素比较繁琐
 * @controller 应是排版前的 controller
 */


export function getSiblingDraggableBlocks(controller, node) {
  var _ref = controller.query('getDraggableConfig') || {},
      _ref$enableSubjectGro = _ref.enableSubjectGroup,
      enableSubjectGroup = _ref$enableSubjectGro === void 0 ? false : _ref$enableSubjectGro,
      _ref$enableHeadingGro = _ref.enableHeadingGroup,
      enableHeadingGroup = _ref$enableHeadingGro === void 0 ? false : _ref$enableHeadingGro;

  var _controller$value = controller.value,
      selection = _controller$value.selection,
      document = _controller$value.document;
  var tableSelection = controller.query('hasTableSelection');
  var isNormalSelection = selection.isExpanded && !tableSelection;

  if (isNormalSelection) {
    var allBlocks = document.getRootBlocksAtRange(selection);

    if (allBlocks.length > 1 && allBlocks.some(function (block) {
      return block.key === node.key;
    })) {
      // 若最后一个节点附带聚合属性，则向下聚合
      var lastBlock = allBlocks[allBlocks.length - 1];

      if (enableSubjectGroup && Heading1.isHeading1(lastBlock) && lastBlock.data.subjectPr) {
        var blocks = groupNodes(lastBlock, document, function (item) {
          return Heading1.isHeading1(item) && !!item.data.subjectPr;
        });
        allBlocks.pop();
        allBlocks.push.apply(allBlocks, blocks);
      } else if (enableHeadingGroup) {
        var condition = headingGroupList.find(function (_ref2) {
          var when = _ref2.when;
          var fold = controller.userData.get(lastBlock, 'fold');
          return when(lastBlock) && fold;
        });

        if (condition) {
          var until = condition.until;

          var _blocks = groupNodes(lastBlock, document, until);

          allBlocks.pop();
          allBlocks.push.apply(allBlocks, _blocks);
        }
      } // 选区包含多个块级元素 且 包含当前 node


      return allBlocks;
    }
  }

  if ((Paragraph.isParagraph(node) || Heading.isHeading(node)) && node.data.calloutPr) {
    var startNode = controller.query('findFirstBlockOfCalloutPr', node);

    if (startNode) {
      var res = groupNodes(startNode, document, function (nextNode) {
        return !(nextNode && (Paragraph.isParagraph(nextNode) || Heading.isHeading(nextNode)) && !!nextNode.data.calloutPr && isEqual(nextNode.data.calloutPr, node.data.calloutPr));
      });
      return res;
    }
  } // 议题级联


  if (enableSubjectGroup && Heading1.isHeading1(node) && node.data.subjectPr) {
    return groupNodes(node, document, function (item) {
      return Heading1.isHeading1(item) && !!item.data.subjectPr;
    });
  } // 标题分组折叠


  if (enableHeadingGroup) {
    var _condition = headingGroupList.find(function (_ref3) {
      var when = _ref3.when;
      var fold = controller.userData.get(node, 'fold');
      return when(node) && fold;
    }); // 若标题折叠条件查询成功，则聚合节点组


    if (_condition) {
      var _until = _condition.until;
      return groupNodes(node, document, _until);
    }
  }

  if (!isListNode(node)) return [node]; // 列表级联

  return controller.query('getListChildItems', node);
}
/**
 * 获取可拖拽元素
 */

export default function getDragNodes(controller, key) {
  var node = controller.value.document.getNode(key);
  if (!node) return [];
  if (Inline.isInline(node)) return node;
  return getSiblingDraggableBlocks(controller, node);
}
/**
 * 获取关联的可转换格式的元素，目前跟可拖拽元素保持一致
 */

export var getTransformNodes = function getTransformNodes(controller) {
  var _controller$value2 = controller.value,
      selection = _controller$value2.selection,
      document = _controller$value2.document;
  var anchor = selection.anchor;
  var currentBlock = document.getClosestBlock(anchor.key);
  return getDragNodes(controller, currentBlock == null ? void 0 : currentBlock.key);
};
//# sourceMappingURL=getDragNodes.js.map