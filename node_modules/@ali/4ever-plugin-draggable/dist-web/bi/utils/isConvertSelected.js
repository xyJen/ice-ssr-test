import { Block } from '@ali/4ever-cangjie';
import { ColorBlocks } from '@ali/4ever-plugin-color-blocks';
import { Code } from '@ali/4ever-plugin-code';
import { Heading } from '@ali/4ever-plugin-heading';
import { Paragraph } from '@ali/4ever-plugin-paragraph';
export default function isConvertSelected(type, controller, block) {
  var Heading1 = Heading.Heading1,
      Heading2 = Heading.Heading2,
      Heading3 = Heading.Heading3,
      Heading4 = Heading.Heading4;
  var _controller$value = controller.value,
      document = _controller$value.document,
      startBlock = _controller$value.startBlock,
      endBlock = _controller$value.endBlock;

  if (type === 'h1') {
    if (block) {
      return Heading1.isHeading1(block);
    } else {
      return startBlock && endBlock && Heading1.isHeading1(startBlock) && Heading1.isHeading1(endBlock);
    }
  } else if (type === 'h2') {
    if (block) {
      return Heading2.isHeading2(block);
    } else {
      return startBlock && endBlock && Heading2.isHeading2(startBlock) && Heading2.isHeading2(endBlock);
    }
  } else if (type === 'h3') {
    if (block) {
      return Heading3.isHeading3(block);
    } else {
      return startBlock && endBlock && Heading3.isHeading3(startBlock) && Heading3.isHeading3(endBlock);
    }
  } else if (type === 'h4') {
    if (block) {
      return Heading4.isHeading4(block);
    } else {
      return startBlock && endBlock && Heading4.isHeading4(startBlock) && Heading4.isHeading4(endBlock);
    }
  } else if (type === 'paragraph') {
    if (block) {
      return Paragraph.isParagraph(block) && !Heading.isHeading(block);
    } else {
      return startBlock && endBlock && Paragraph.isParagraph(startBlock) && Paragraph.isParagraph(endBlock) && !Heading.isHeading(startBlock) && !Heading.isHeading(endBlock);
    }
  } else if (type === 'olist') {
    if (block) {
      var _block$data$list;

      return (_block$data$list = block.data.list) == null ? void 0 : _block$data$list.isOrdered;
    } else {
      var _startBlock$data$list, _endBlock$data$list;

      return startBlock && endBlock && ((_startBlock$data$list = startBlock.data.list) == null ? void 0 : _startBlock$data$list.isOrdered) && ((_endBlock$data$list = endBlock.data.list) == null ? void 0 : _endBlock$data$list.isOrdered);
    }
  } else if (type === 'ulist') {
    if (block) {
      return block.data.list && !block.data.list.isOrdered && !block.data.list.isTaskList;
    } else {
      return startBlock && startBlock.data.list && !startBlock.data.list.isOrdered && !startBlock.data.list.isTaskList && endBlock && endBlock.data.list && !endBlock.data.list.isOrdered && !endBlock.data.list.isTaskList;
    }
  } else if (type === 'tlist') {
    if (block) {
      var _block$data$list2;

      return (_block$data$list2 = block.data.list) == null ? void 0 : _block$data$list2.isTaskList;
    } else {
      var _startBlock$data$list2, _endBlock$data$list2;

      return startBlock && endBlock && ((_startBlock$data$list2 = startBlock.data.list) == null ? void 0 : _startBlock$data$list2.isTaskList) && ((_endBlock$data$list2 = endBlock.data.list) == null ? void 0 : _endBlock$data$list2.isTaskList);
    }
  } else if (type === 'blockquote') {
    if (block) {
      return block.data.blockquote;
    } else {
      return startBlock && endBlock && startBlock.data.blockquote && endBlock.data.blockquote;
    }
  } else if (type === 'code') {
    if (block) {
      return Code.isCode(block);
    } else {
      return startBlock && endBlock && Code.isCode(startBlock) && Code.isCode(endBlock);
    }
  } else if (type === 'callout') {
    if (block) {
      if (checkColorBlock(block, document)) {
        return true;
      }
    } else {
      return startBlock && endBlock && checkColorBlock(startBlock, document) && checkColorBlock(endBlock, document);
    }
  }
}

function checkColorBlock(block, document) {
  if (Block.isBlock(block) && ColorBlocks.isColorBlocks(block)) {
    return true;
  }

  var closestColorBlock = document.getClosest(block.key, function (_block) {
    if (Block.isBlock(_block) && ColorBlocks.isColorBlocks(_block)) {
      return true;
    }

    return false;
  });

  if (closestColorBlock) {
    return true;
  }

  return false;
}
//# sourceMappingURL=isConvertSelected.js.map