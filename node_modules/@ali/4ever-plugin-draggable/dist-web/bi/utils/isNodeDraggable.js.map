{"version":3,"sources":["../../../../src/bi/utils/isNodeDraggable.ts"],"names":["Inline","Heading","Image","Paragraph","isContainInlineNode","node","nodes","some","n","isInline","isImage","type","isNodeDraggable","controller","isHeading","isParagraph","firstNodeText","text","length","thirdNodeText"],"mappings":"AAAA,SAA4BA,MAA5B,QAAgD,oBAAhD;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,KAAT,QAAsB,yBAAtB;AACA,SAASC,SAAT,QAA0B,6BAA1B;;AAEA,SAASC,mBAAT,CAA6BC,IAA7B,EAA0C;AACxC,SAAOA,IAAI,CAACC,KAAL,CAAWC,IAAX,CAAgB,UAACC,CAAD,EAAO;AAC5B,QAAIR,MAAM,CAACS,QAAP,CAAgBD,CAAhB,KAAsB,CAACN,KAAK,CAACQ,OAAN,CAAcF,CAAd,CAA3B,EAA6C;AAC3C,aAAO,IAAP;AACD,KAFD,MAEO,IAAKA,CAAD,CAAaG,IAAb,KAAsB,MAA1B,EAAkC;AACvC,aAAOP,mBAAmB,CAACI,CAAD,CAA1B;AACD;;AACD,WAAO,KAAP;AACD,GAPM,CAAP;AAQD;AAED;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASI,eAAT,CAAyBC,UAAzB,EAAiDR,IAAjD,EAA6D;AAC1E,MAAIL,MAAM,CAACS,QAAP,CAAgBJ,IAAhB,CAAJ,EAA2B,OAAO,IAAP,CAD+C,CAG1E;;AACA,MAAI,CAACJ,OAAO,CAACa,SAAR,CAAkBT,IAAlB,CAAD,IAA4B,CAACF,SAAS,CAACY,WAAV,CAAsBV,IAAtB,CAAjC,EAA8D,OAAO,IAAP;;AAE9D,MAAID,mBAAmB,CAACC,IAAD,CAAvB,EAA+B;AAC7B;AACA,WAAO,IAAP;AACD,GATyE,CAW1E;;;AAX0E,MAYlEC,KAZkE,GAYxDD,IAZwD,CAYlEC,KAZkE;AAa1E,MAAMU,aAAa,GAAGV,KAAK,CAAC,CAAD,CAAL,CAASW,IAA/B;;AACA,MAAIX,KAAK,CAACY,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,CAAC,CAACF,aAAT;AACD;;AAED,MAAIV,KAAK,CAACY,MAAN,KAAiB,CAArB,EAAwB;AACtB,QAAMC,aAAa,GAAGb,KAAK,CAAC,CAAD,CAAL,CAASW,IAA/B;;AACA,QAAI,CAACD,aAAD,IAAkBd,KAAK,CAACQ,OAAN,CAAcJ,KAAK,CAAC,CAAD,CAAnB,CAAlB,IAA6C,CAACa,aAAlD,EAAiE;AAC/D;AACA,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["import { Controller, Block, Inline, Node } from '@ali/4ever-cangjie';\nimport { Heading } from '@ali/4ever-plugin-heading';\nimport { Image } from '@ali/4ever-plugin-image';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\n\nfunction isContainInlineNode(node: Block) {\n  return node.nodes.some((n) => {\n    if (Inline.isInline(n) && !Image.isImage(n)) {\n      return true;\n    } else if ((n as Block).type === 'line') {\n      return isContainInlineNode(n as Block);\n    }\n    return false;\n  });\n}\n\n/**\n * 判断 node 是否可拖拽\n * @param node\n * @param container\n */\nexport default function isNodeDraggable(controller: Controller, node: Node) {\n  if (Inline.isInline(node)) return true;\n\n  // 除文字段落外都可以拖\n  if (!Heading.isHeading(node) && !Paragraph.isParagraph(node)) return true;\n\n  if (isContainInlineNode(node)) {\n    // 包含行内节点允许拖拽（类似公式、日期等）\n    return true;\n  }\n\n  // PERF: node.text 迭代获取文本更费性能，这里尽量通过直接根据 nodes 判断\n  const { nodes } = node;\n  const firstNodeText = nodes[0].text;\n  if (nodes.length === 1) {\n    return !!firstNodeText;\n  }\n\n  if (nodes.length === 3) {\n    const thirdNodeText = nodes[2].text;\n    if (!firstNodeText && Image.isImage(nodes[1]) && !thirdNodeText) {\n      // 根据特定结构判断，若是单张图片不允许拖拽\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"file":"isNodeDraggable.js"}