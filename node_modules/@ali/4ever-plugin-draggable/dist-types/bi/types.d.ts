import { DRAG_TYPE } from './../utils/constants';
import { ReactNode } from 'react';
import { Controller, RenderNodeProps, BlockJSON, InlineJSON, Block, Data, BlockChildren, Inline } from '@ali/4ever-cangjie';
import { RefBlockDraggableConfig } from '@ali/4ever-plugin-refblock';
import { HetuConfig } from './utils/hetu';
export { DRAG_TYPE };
export interface RECT {
    top: number;
    left: number;
    width?: number;
    height?: number;
}
export declare enum DROP_POSITION {
    before = 0,
    after = 1,
    left = 2,
    right = 3
}
interface DragNodeProps {
    key: string;
    type: string;
    parentKey: string;
}
export interface DragBlockProps extends DragNodeProps {
    nodeJson: BlockJSON;
}
export interface DragInlineProps extends DragNodeProps {
    nodeJson: InlineJSON;
}
export declare type DragBlocksProps = DragBlockProps[];
export declare type DRAG_DATA = DragInlineProps | DragBlocksProps;
export interface DraggableProps {
    controller: Controller;
    renderNodeProps: RenderNodeProps;
    draggableConfig?: DraggableConfig;
}
export interface DropHolderProps {
    type: string;
    key: string;
    dropPosition: DROP_POSITION;
    pagePosition?: DROP_POSITION;
    rect?: RECT;
}
export interface DragHanderProps {
    viewKey: string;
    dataKey?: string;
    type?: 'hover' | 'select';
}
export interface DraggableConfig {
    isDraggable?: (props: RenderNodeProps<Block | Inline>, controller: Controller) => boolean;
    style?: React.CSSProperties;
    handerStyle?: React.CSSProperties;
}
export interface DragFragmentProps {
    type: DRAG_TYPE;
    fragment: DRAG_DATA;
    isContainTable: () => boolean;
}
export interface DraggableDataProps {
    dragFragment?: DragFragmentProps;
    dropHolder?: DropHolderProps;
    dragHander?: DragHanderProps;
    isCopy?: boolean;
}
export interface DraggablePluginConfig {
    enabled?: boolean;
    locale?: Record<string, string>;
    autoScrollThreshold?: {
        top?: number;
        bottom?: number;
    };
    /**
     * 配置后会拖拽生成简单纯色缩略图
     */
    complexElements?: Record<string, boolean>;
    /**
     * 配置禁止拖拽类型（默认所有块级元素都可以拖拽）
     */
    forbiddenElements?: Record<string, boolean>;
    /**
     * 声明可拖拽的行内元素
     */
    draggableInlineElements?: Record<string, boolean>;
    /**
     * 聚合议题内容
     * @default false
     */
    enableSubjectGroup?: boolean;
    /**
     * 聚合折叠标题
     * @default false
     */
    enableHeadingGroup?: boolean;
    /**
     * 获取url
     */
    getCopyURL?: (id: string) => string;
    /**
     * 段落分享 item
     */
    shareParagraph?: (type: string, uuid: string, block: Block<Data, BlockChildren>) => void;
    /**
     * 河图配置
     */
    hetu?: HetuConfig;
    /**
     * 菜单栏 transfrom 区域的自定义菜单
     */
    extraTransformMenu?: IMenu[];
    /**
     * 引用块配置
     */
    refblock?: RefBlockDraggableConfig;
    /**
     * 汉堡菜单触发方式
     */
    trigger?: 'hover' | 'click';
}
export interface IMenu {
    title: string;
    menuKey?: string;
    icon: React.ReactNode;
    extra?: ReactNode;
}
export interface DragMenuAction {
    node: Block;
    action?: symbol;
}
