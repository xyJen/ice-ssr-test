import React from 'react';
import type { Action, ConvertToPluginActionCreators, ConvertToPluginActionPredicates } from '@ali/4ever-cangjie';
import type { DraggableDataProps, DragHanderProps, DropHolderProps, DragMenuAction } from '../types';
/** ***************** for UI ***************** */
export declare const CLEAR_DROPHOLDER: unique symbol;
export declare const UPDATE_DRAGHANDER: unique symbol;
export declare const UPDATE_DROPHOLDER: unique symbol;
/** ***************** for controller ***************** */
export declare const DELETE_DARGFRAGMENT: unique symbol;
export declare const UPDATE_DARGFRAGMENT: unique symbol;
export declare const UPDATE_DRAGHIGHLIGHT: unique symbol;
export declare const REMOVE_DRAGHIGHLIGHT_SINGLE: unique symbol;
export declare const DROP_FRAGMENT = "DROP_FRAGMENT";
export declare const DROP_EVENT_FRAGMENT: unique symbol;
export declare const DROP_HTML: unique symbol;
export declare const COPY_AS_URL: unique symbol;
export declare const UPDATE_IMAGE_DROP_HOLDER: unique symbol;
export declare const DRAG_MENU_INSERT_BEFORE: unique symbol;
export declare const DRAG_MENU_INSERT_AFTER: unique symbol;
export declare const DRAG_MENU_CUT_OR_COPY: unique symbol;
export declare const DRAG_MENU_DELETE: unique symbol;
export declare const MOUNT_LINE_HEADER_TOOLBAR: unique symbol;
interface DropFragmentAction {
    type: typeof DROP_FRAGMENT;
    payload?: DraggableDataProps;
}
export declare function dropFragment(payload?: DraggableDataProps): DropFragmentAction;
declare function isDropFragmentAction(action: Action): action is DropFragmentAction;
export declare function dropEventFragment(payload: DraggableDataProps): {
    type: symbol;
    payload: DraggableDataProps;
};
export declare function dropHtml(payload: any): {
    type: symbol;
    payload: any;
};
export declare function clearDropHolder(): {
    type: symbol;
};
export declare function updateDragHander(payload?: DragHanderProps): {
    type: symbol;
    payload: DragHanderProps | undefined;
};
export declare function deleteDragFragment(payload: any): {
    type: symbol;
    payload: any;
};
export declare function updateDragFragment(payload?: any): {
    type: symbol;
    payload: any;
};
export declare function updateDragHighlight(payload: any): {
    type: symbol;
    payload: any;
};
export declare function removeDragHighlightSingle(payload: any): {
    type: symbol;
    payload: any;
};
export declare function updateDropHolder(payload: any): {
    type: symbol;
    payload: any;
};
export declare function copyAsUrl(url: string): {
    type: symbol;
    payload: {
        url: string;
    };
};
export interface IUpdateImageDropHolderPayload {
    dropHolder?: DropHolderProps | null;
    event: DragEvent;
    dispatch: React.Dispatch<any>;
}
export declare function updateImageDropHolder(payload: IUpdateImageDropHolderPayload): {
    type: symbol;
    payload: IUpdateImageDropHolderPayload;
};
export declare function dragMenuInsertBefore(payload: DragMenuAction): {
    type: symbol;
    payload: DragMenuAction;
};
export declare function dragMenuInsertAfter(payload: DragMenuAction): {
    type: symbol;
    payload: DragMenuAction;
};
export declare function dragMenuCutOrCopy(payload: DragMenuAction): {
    type: symbol;
    payload: DragMenuAction;
};
export declare function dragMenuDelete(payload: DragMenuAction): {
    type: symbol;
    payload: DragMenuAction;
};
/**
 * mount 埋点
 */
export declare function mountDragHander(): {
    type: symbol;
};
export declare const actions: {};
export declare const isActions: {
    isDropFragmentAction: typeof isDropFragmentAction;
};
declare module '@ali/4ever-cangjie' {
    /** type combination for commands、queries、actions */
    interface PluginActionCreators extends ConvertToPluginActionCreators<typeof actions> {
    }
    interface PluginActionPredicates extends ConvertToPluginActionPredicates<typeof isActions> {
    }
}
export {};
