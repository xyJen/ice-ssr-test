{"version":3,"sources":["../../../../../src/mo/serializer/htmlToJsonML/parseFromWord.ts"],"names":["camelCase","createEmptyText","toStyleObject","hrLines","HR_WIDTH","WORD_HR_REG","parseFromWord","name","onOpenTag","state","attrs","push","test","style","borderBottom","msoBorderBottomAlt","borderTop","msoBorderTopAlt","borders","every","bor","includes","border","typeAndSz","split","filter","i","ordered","reverse","type","matchHr","find","line","lineType","sz","size","color","width","onCloseTag","hr","pop","append","hrs"],"mappings":"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","sourcesContent":["import { camelCase } from 'lodash-es';\nimport { MoState as State, createEmptyText, toStyleObject, MoAttributes as Attributes, HTMLToJsonMLRule } from '@ali/4ever-cangjie';\nimport { hrLines } from '../../../utils/lineConfig';\n\nconst HR_WIDTH = '100%';\nconst WORD_HR_REG = /mso-border-(bottom|top)-alt/;\n\nfunction parseFromWord(): HTMLToJsonMLRule {\n  return {\n    name: 'hr',\n\n    onOpenTag(state: State, name: string, attrs: Attributes): boolean {\n      if (name === 'hr') {\n        state.push(['hr', createEmptyText()]);\n        return true;\n      }\n      if (!WORD_HR_REG.test(attrs.style || '') || attrs.class !== 'MsoNormal') {\n        return false;\n      }\n      const style = toStyleObject(attrs.style);\n      // @ts-ignore\n      const borderBottom = style.msoBorderBottomAlt || style.borderBottom;\n      // @ts-ignore\n      const borderTop = style.msoBorderTopAlt || style.borderTop;\n      const borders = [borderBottom, borderTop];\n      if (borders.every(bor => !bor || bor.includes('none'))) {\n        return false;\n      }\n\n      for (const border of borders) {\n        if (border) {\n          // eslint-disable-next-line prefer-const\n          const typeAndSz = border.split(' ').filter((i) => i !== 'windowtext');\n          const ordered = /^\\d+/.test(typeAndSz[0])\n            ? typeAndSz.reverse()\n            : typeAndSz;\n          let type = camelCase(ordered[0]);\n          const matchHr = hrLines.find((line) => line.lineType === type);\n          let sz = 1;\n          if (matchHr) {\n            sz = matchHr.size;\n          } else {\n            type = 'solid';\n          }\n          state.push([\n            'hr',\n            { type, sz, color: 'black', width: HR_WIDTH },\n            createEmptyText(),\n          ]);\n        }\n      }\n      return true;\n    },\n\n    onCloseTag(state: State, name: string, attrs: Attributes): boolean {\n      if (name === 'hr') {\n        const hr = state.pop();\n        state.append(hr);\n        return true;\n      }\n      if (!WORD_HR_REG.test(attrs.style || '') || attrs.class !== 'MsoNormal') {\n        return false;\n      }\n      const style = toStyleObject(attrs.style);\n      const hrs = [];\n      // @ts-ignore\n      const borderBottom = style.msoBorderBottomAlt || style.borderBottom;\n      // @ts-ignore\n      const borderTop = style.msoBorderTopAlt || style.borderTop;\n      const borders = [borderBottom, borderTop];\n      if (borders.every(bor => !bor || bor.includes('none'))) {\n        return false;\n      }\n      for (const border of borders) {\n        if (border) {\n          // @ts-ignore\n          hrs.push(state.pop());\n        }\n      }\n      state.append(...hrs.reverse());\n      return true;\n    },\n  };\n}\n\nexport default parseFromWord;\n"],"file":"parseFromWord.js"}