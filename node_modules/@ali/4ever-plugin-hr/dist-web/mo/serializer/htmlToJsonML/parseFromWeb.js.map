{"version":3,"sources":["../../../../../src/mo/serializer/htmlToJsonML/parseFromWeb.ts"],"names":["createEmptyText","parseBorder","parseFromWeb","name","onOpenTag","state","attrs","styleObj","lineStyle","borderTop","borderBottom","lineStyleObj","sz","type","color","push","width","onCloseTag","hr","pop","append"],"mappings":"AAAA,SAAyEA,eAAzE,QAAgG,oBAAhG;AACA,SAASC,WAAT;;AAEA,SAASC,YAAT,GAA0C;AACxC,SAAO;AACLC,IAAAA,IAAI,EAAE,IADD;AAGLC,IAAAA,SAHK,qBAGKC,KAHL,EAGmBF,IAHnB,EAGiCG,KAHjC,EAG6D;AAChE,UAAIH,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AAD6C,UAExDI,QAFwD,GAE3CD,KAF2C,CAExDC,QAFwD;AAGhE,UAAMC,SAAS,GAAGD,QAAQ,CAACE,SAAT,GAAqBF,QAAQ,CAACE,SAA9B,GAA0CF,QAAQ,CAACG,YAArE;;AACA,UAAIF,SAAJ,EAAe;AACb,YAAMG,YAAY,GAAGV,WAAW,CAACO,SAAD,CAAhC;AADa,YAELI,EAFK,GAEeD,YAFf,CAELC,EAFK;AAAA,YAEDC,IAFC,GAEeF,YAFf,CAEDE,IAFC;AAAA,YAEKC,KAFL,GAEeH,YAFf,CAEKG,KAFL;AAGbT,QAAAA,KAAK,CAACU,IAAN,CAAW,CACT,IADS,EAET;AAAEF,UAAAA,IAAI,EAAJA,IAAF;AAAQD,UAAAA,EAAE,EAAFA,EAAR;AAAYE,UAAAA,KAAK,EAALA,KAAZ;AAAmBE,UAAAA,KAAK,EAAE;AAA1B,SAFS,EAGThB,eAAe,EAHN,CAAX;AAKD,OARD,MAQO;AACLK,QAAAA,KAAK,CAACU,IAAN,CAAW,CAAC,IAAD,EAAOf,eAAe,EAAtB,CAAX;AACD;;AAED,aAAO,IAAP;AACD,KApBI;AAsBLiB,IAAAA,UAtBK,sBAsBMZ,KAtBN,EAsBoBF,IAtBpB,EAsB2C;AAC9C,UAAIA,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AAEnB,UAAMe,EAAE,GAAGb,KAAK,CAACc,GAAN,EAAX;AACAd,MAAAA,KAAK,CAACe,MAAN,CAAaF,EAAb;AACA,aAAO,IAAP;AACD;AA5BI,GAAP;AA8BD;;AAED,eAAehB,YAAf","sourcesContent":["import { MoState as State, MoAttributes as Attributes, HTMLToJsonMLRule, createEmptyText } from '@ali/4ever-cangjie';\nimport { parseBorder } from './utils';\n\nfunction parseFromWeb(): HTMLToJsonMLRule {\n  return {\n    name: 'hr',\n\n    onOpenTag(state: State, name: string, attrs: Attributes): boolean {\n      if (name !== 'hr') return false;\n      const { styleObj } = attrs;\n      const lineStyle = styleObj.borderTop ? styleObj.borderTop : styleObj.borderBottom;\n      if (lineStyle) {\n        const lineStyleObj = parseBorder(lineStyle);\n        const { sz, type, color } = lineStyleObj;\n        state.push([\n          'hr',\n          { type, sz, color, width: '100%' },\n          createEmptyText(),\n        ]);\n      } else {\n        state.push(['hr', createEmptyText()]);\n      }\n\n      return true;\n    },\n\n    onCloseTag(state: State, name: string): boolean {\n      if (name !== 'hr') return false;\n\n      const hr = state.pop();\n      state.append(hr);\n      return true;\n    },\n  };\n}\n\nexport default parseFromWeb;\n"],"file":"parseFromWeb.js"}