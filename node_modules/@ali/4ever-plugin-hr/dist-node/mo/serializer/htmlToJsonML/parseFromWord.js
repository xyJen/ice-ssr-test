"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _everCangjie = require("@ali/4ever-cangjie");

var _lineConfig = require("../../../utils/lineConfig");

const HR_WIDTH = '100%';
const WORD_HR_REG = /mso-border-(bottom|top)-alt/;

function parseFromWord() {
  return {
    name: 'hr',

    onOpenTag(state, name, attrs) {
      if (name === 'hr') {
        state.push(['hr', (0, _everCangjie.createEmptyText)()]);
        return true;
      }

      if (!WORD_HR_REG.test(attrs.style || '') || attrs.class !== 'MsoNormal') {
        return false;
      }

      const style = (0, _everCangjie.toStyleObject)(attrs.style); // @ts-ignore

      const borderBottom = style.msoBorderBottomAlt || style.borderBottom; // @ts-ignore

      const borderTop = style.msoBorderTopAlt || style.borderTop;
      const borders = [borderBottom, borderTop];

      if (borders.every(bor => !bor || bor.includes('none'))) {
        return false;
      }

      for (const border of borders) {
        if (border) {
          // eslint-disable-next-line prefer-const
          const typeAndSz = border.split(' ').filter(i => i !== 'windowtext');
          const ordered = /^\d+/.test(typeAndSz[0]) ? typeAndSz.reverse() : typeAndSz;
          let type = (0, _lodash.camelCase)(ordered[0]);

          const matchHr = _lineConfig.hrLines.find(line => line.lineType === type);

          let sz = 1;

          if (matchHr) {
            sz = matchHr.size;
          } else {
            type = 'solid';
          }

          state.push(['hr', {
            type,
            sz,
            color: 'black',
            width: HR_WIDTH
          }, (0, _everCangjie.createEmptyText)()]);
        }
      }

      return true;
    },

    onCloseTag(state, name, attrs) {
      if (name === 'hr') {
        const hr = state.pop();
        state.append(hr);
        return true;
      }

      if (!WORD_HR_REG.test(attrs.style || '') || attrs.class !== 'MsoNormal') {
        return false;
      }

      const style = (0, _everCangjie.toStyleObject)(attrs.style);
      const hrs = []; // @ts-ignore

      const borderBottom = style.msoBorderBottomAlt || style.borderBottom; // @ts-ignore

      const borderTop = style.msoBorderTopAlt || style.borderTop;
      const borders = [borderBottom, borderTop];

      if (borders.every(bor => !bor || bor.includes('none'))) {
        return false;
      }

      for (const border of borders) {
        if (border) {
          // @ts-ignore
          hrs.push(state.pop());
        }
      }

      state.append(...hrs.reverse());
      return true;
    }

  };
}

var _default = parseFromWord;
exports.default = _default;
//# sourceMappingURL=parseFromWord.js.map