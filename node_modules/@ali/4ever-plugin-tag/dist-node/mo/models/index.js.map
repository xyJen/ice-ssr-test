{"version":3,"sources":["../../../../src/mo/models/index.ts"],"names":["Tag","Inline","create","properties","Error","isTag","type","TYPE","maybeTag","isInline"],"mappings":";;;;;;;AAAA;;AAce,MAAMA,GAAN,SAAkBC,mBAAlB,CAAyB;AAGtC,SAAOC,MAAP,CAAcC,UAAd,EAAwD;AACtD,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACD,QAAIJ,GAAG,CAACK,KAAJ,CAAUF,UAAV,CAAJ,EAA2B;AACzB,aAAOA,UAAP;AACD;;AACD,WAAO,MAAMD,MAAN,CAAa,EAClB,GAAGC,UADe;AAElBG,MAAAA,IAAI,EAAEN,GAAG,CAACO;AAFQ,KAAb,CAAP;AAID;;AAED,SAAOF,KAAP,CAAaG,QAAb,EAA6C;AAC3C,WAAOP,oBAAOQ,QAAP,CAAgBD,QAAhB,KAA6BA,QAAQ,CAACF,IAAT,KAAkBN,GAAG,CAACO,IAA1D;AACD;;AAlBqC;;;AAAnBP,G,CACZO,I,GAAO,K","sourcesContent":["import { Inline, InlineProperties, Data } from '@ali/4ever-cangjie';\n\nexport interface TagData<T = Record<string, any>> extends Data {\n  readonly tagType?: string;\n  readonly height?: number;\n  readonly width?: number;\n  readonly metadata?: T;\n}\n\nexport interface TagProperties {\n  data?: TagData;\n  nodes?: InlineProperties['nodes'];\n}\n\nexport default class Tag extends Inline {\n  static TYPE = 'tag';\n\n  static create(properties: Tag | TagProperties | string) {\n    if (typeof properties === 'string') {\n      throw new Error('`Tag.create` does not accept string');\n    }\n    if (Tag.isTag(properties)) {\n      return properties;\n    }\n    return super.create({\n      ...properties,\n      type: Tag.TYPE,\n    }) as Tag;\n  }\n\n  static isTag(maybeTag: any): maybeTag is Tag {\n    return Inline.isInline(maybeTag) && maybeTag.type === Tag.TYPE;\n  }\n}\n"],"file":"index.js"}