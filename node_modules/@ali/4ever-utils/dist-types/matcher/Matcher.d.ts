export declare type Language = 'zh-CN' | 'en-US';
export interface Item<T> {
    /**
     * 关键词组
     */
    keywords: string[];
    /**
     * 自定义数据
     */
    data?: T;
    /**
     * 子项
     * @description 若此属性存在，则当前节点为一个分组
     */
    subItems?: Array<Item<T>>;
}
export interface ItemResult<T> {
    /**
     * 优先级得分
     */
    score: number;
    /**
     * 结果项
     */
    data?: T;
    /**
     * 子项
     */
    subItems?: Array<ItemResult<T>>;
}
export interface MatcherOptions<T> {
    /**
     * 搜索数据项
     */
    items: Array<Item<T>>;
    /**
     * 语言环境
     */
    lang: Language;
    /**
     * 仅搜索叶子节点
     * @description 仅搜索叶子节点时不检索分组名
     */
    leafOnly?: boolean;
    /**
     * 开启模糊匹配
     */
    enableFuzzy?: boolean;
    /**
     * 关键词命中的相似度阀值
     * @default 0.75
     */
    threshold?: number;
}
/**
 * 搜索工具库
 *
 * @example
 *
 * const matcher = new Matcher({
 *   lang: 'en-US',
 *   items: [
 *     {
 *       keywords: ['Table'],
 *       data: {
 *         key: 'table',
 *       }
 *     },
 *     {
 *       keywords: ['Template'],
 *       data: {
 *         key: 'template',
 *       }
 *     },
 *     {
 *       keywords: ['Temple'],
 *       data: {
 *         key: 'temple',
 *       }
 *     }
 *   ],
 * });
 *
 * const rs = matcher.match('tem);
 */
declare class Matcher<T extends object = {}> {
    protected items: Array<Item<T>>;
    protected lang: Language;
    protected leafOnly: boolean;
    protected enableFuzzy: boolean;
    protected threshold: number;
    constructor(options: MatcherOptions<T>);
    private buildItemResult;
    private matchKeywords;
    /**
     * 节点搜索，搜索此节点以及所有的子节点，此节点的权重为其所有子节点的最大值
     * @param query
     * @param item
     * @returns
     */
    private matchItem;
    match(query: string): Array<ItemResult<T>>;
}
export default Matcher;
