/// <reference types="react" />
import { Block, BlockJSON } from '@ali/4ever-cangjie';
import type { SpacingProperties } from '../modelData';
/**
 * 将行单位转换为 px 单位
 * @param lines
 * @param linePitch 网格系统相关参数
 * @returns
 */
declare function linesToPx(lines: number, linePitch?: number): number;
declare function pxToLines(px: number, linePitch?: number): number;
/**
 * 将倍数的行距转换为 px
 * 倍数在导入时会被：
 * 原始数据：480，代表24pt
 * 480 / 240 = 2，变为倍数（实际上应该除以 20 转换为 pt，都是为了兼容老数据）
 * 所以：
 * px = times * 12 * 4 / 3
 */
declare function timesToPx(times: number): number;
/**
 * 将 px 单位的行距转换为倍数
 * @param times
 * @returns
 */
declare function pxToTimes(times: number): number;
declare function fromHeadingType(type: string): SpacingProperties;
/**
 * 从html解析行高并强制转换为接近的行高（倍数）
 * 支持 2、200%、20px等
 * 策略：尽量靠近原格式视觉
 * @param value
 * @param fontSize
 */
declare function fromHtml(value: string, fontSize?: string | number): number;
/**
 * 从节点数据解析 spacing
 * before 和 after 会被转换为 px 单位（与存量 asl 一致）
 * line 则转换为：
 * px 单位（lineRule !== auto）
 * 倍数 单位（lineRule === auto）
 * @param paragraph 块级元素
 * @param inheritedData 继承值
 * @param linePitch docGrid.linePitch pt 单位
 * @returns SpacingProperties
 */
declare function fromBlock(paragraph: Block | BlockJSON, inheritedData?: Record<string, any>, linePitch?: number): SpacingProperties;
/**
 * 将节点的 spacing 数据转换为 css 样式
 * 优先走 userSet to actualSet 隐射表，否则按照 * 1.7 计算行高
 */
declare function toStyle(block: Block | BlockJSON, inheritedData?: Record<string, any>, linePitch?: number): React.CSSProperties;
declare function getLineHeightFromSpacing(spacing?: SpacingProperties): string;
export declare const SpacingUtil: {
    fromBlock: typeof fromBlock;
    fromHtml: typeof fromHtml;
    fromHeadingType: typeof fromHeadingType;
    toStyle: typeof toStyle;
    getLineHeightFromSpacing: typeof getLineHeightFromSpacing;
    linesToPx: typeof linesToPx;
    pxToLines: typeof pxToLines;
    timesToPx: typeof timesToPx;
    pxToTimes: typeof pxToTimes;
};
export {};
