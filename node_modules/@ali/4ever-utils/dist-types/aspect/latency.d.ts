export declare type Callback = (key: string, cost: number, success?: boolean) => void;
export interface LatencyOptions {
    callback?: Callback;
}
export declare function connect(speed: (key: string, value?: number) => void): Callback;
/**
 * 函数计时打点，支持同步函数和异步函数计时
 * @param key 打点的 key
 * @param fn 装饰的函数
 * @param callback 自定义打点
 */
export declare function latency<T extends Function>(key: string, fn: T, options?: LatencyOptions): T;
/**
 * 函数计时装饰器，支持同步函数和异步函数计时
 * @param key 打点计时 key
 */
export declare function Latency(key: string, options?: LatencyOptions): MethodDecorator;
export declare type FrameCallback = (key: string, cost: number, type: LatencyFrameType) => void;
export declare type LatencyFrameType = 'frame' | 'microtask' | 'macrotask';
export interface LatencyFrameOptions {
    /**
     * Frame 类型
     * frame - 探测一帧的延迟时间，延迟方法为 window.requestAnimationFrame()
     * microtask - 探测一个 microtask 的延迟时间，延迟方法为 Promise.resolve().then()
     * macrotask - 探测一个 macrotask 的延迟时间，延迟方法为 window.setTimeout()
     * @default 'frame'
     * @description 注意 macrotask 不一定能保证是仅有一个 Event Loop
     */
    type?: LatencyFrameType;
    /**
     * 若在当前 Exec Stack 中多次触发，起始点取值是否为第一次，false 则取最后一次
     * @default true
     */
    leading?: boolean;
    callback?: FrameCallback;
}
/**
 * 记录当前执行点至下一帧的耗时，帧类型支持三种 frame | microtask | macrotask
 * @param key 计时 key
 * @param options
 */
export declare function latencyCurrentFrame(key: string, options?: LatencyFrameOptions): void;
/**
 * 装饰函数，记录从函数执行开始至下一帧的耗时
 * @param key 计时 key
 * @param fn 装饰的函数
 * @param options
 */
export declare function latencyFrame<T extends Function>(key: string, fn: T, options?: LatencyFrameOptions): T;
/**
 * 装饰方法，记录从函数执行开始至下一帧的耗时
 * @param key 计时 key
 * @param options
 */
export declare function LatencyFrame(key: string, options?: LatencyFrameOptions): MethodDecorator;
export declare type TotalCallback = (key: string, cost: number, total: number) => void;
export interface LatencyTotalOptions {
    callback?: TotalCallback;
}
/**
 * 记录一个函数在一个 task 内总共执行的次数以及耗时
 * @param key 计时 key
 * @param fn 计时函数
 * @param options
 */
export declare function latencyTotal<T extends Function>(key: string, fn: T, options?: LatencyTotalOptions): T;
/**
 * 记录一个函数在一个 task 内总共执行的次数以及耗时
 * @param key 计时 key
 * @param options
 */
export declare function LatencyTotal(key: string, options?: LatencyTotalOptions): MethodDecorator;
