import _extends from "@babel/runtime/helpers/extends";

/**
 * 合并两个 PluginFactory
 * @param factory1
 * @param factory2
 */
export function combinePluginFactory(factory1, factory2) {
  function createCombinedPlugin(config) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    // @ts-ignore
    var plugin1 = factory1.apply(void 0, [config].concat(rest)); // @ts-ignore

    var plugin2 = factory2.apply(void 0, [config].concat(rest));
    return _extends({}, plugin1, plugin2);
  }

  return createCombinedPlugin;
}
/**
 * 合并两组 plugins，两组 plugins 交集的部分会合并，非交集的部分将独立存在
 * @param plugins1
 * @param plugins2
 */

export function combinePluginsFactory(plugins1, plugins2) {
  var plugins = {};
  Object.keys(plugins1).forEach(function (key) {
    var factory1 = plugins1[key];
    var factory2 = plugins2[key]; // @ts-ignore

    if (factory2 && factory1 !== factory2) {
      // 如果两个 plugins 同时存在一个 key 的插件，则合并
      plugins[key] = combinePluginFactory(factory1, factory2);
    } else {
      // plugin1 独有
      // @ts-ignore
      plugins[key] = factory1;
    }
  });
  Object.keys(plugins2).forEach(function (key) {
    var factory1 = plugins1[key];
    var factory2 = plugins2[key]; // 由于上面 plugin1 已经 combine，所以这里只需要取 plugin2 独有即可

    if (!factory1) {
      // plugin2 独有
      // @ts-ignore
      plugins[key] = factory2;
    }
  });
  return plugins;
}
//# sourceMappingURL=pluginsUtil.js.map