function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import ResizeObserver from 'resize-observer-polyfill';

var PerfResizeObserver = function PerfResizeObserver() {
  var _this = this;

  this.observer = void 0;
  this.weakMap = void 0;

  this.resizeCallback = function (entries) {
    for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
      var entry = _step.value;

      var cb = _this.weakMap.get(entry.target);

      if (cb) {
        cb(entry.target);
      }
    }
  };

  this.observe = function (target, cb, options) {
    if (_this.weakMap.has(target)) {
      _this.observer.unobserve(target);
    }

    _this.weakMap.set(target, cb); // @ts-ignore polyfill typing


    _this.observer.observe(target, options);
  };

  this.unobserve = function (target) {
    _this.weakMap["delete"](target);

    _this.observer.unobserve(target);
  };

  this.observer = new ResizeObserver(this.resizeCallback);
  this.weakMap = new WeakMap();
}
/**
 *  消费同一个实例
 */
;

PerfResizeObserver._resizeObserver = new PerfResizeObserver();

PerfResizeObserver.create = function () {
  return PerfResizeObserver._resizeObserver;
};

export default PerfResizeObserver;
//# sourceMappingURL=perfResizeObserver.js.map