import _extends from "@babel/runtime/helpers/extends";
import { createDict } from "./objectUtils";
var containerTypeMap = createDict({
  paragraph: true,
  'heading-1': true,
  'heading-2': true,
  'heading-3': true,
  'heading-4': true,
  'heading-5': true,
  'heading-6': true,
  'table-cell': true,
  page: true,
  section: true
}); // viewModel下可以当作容器节点的 data-type

var viewModelContainerTypeMap = createDict(_extends({}, containerTypeMap, {
  'paragraph-group': true,
  'hey-group': true,
  'callout-group': true,
  'subject-group': true,
  'heading-1-group': true,
  'heading-2-group': true,
  'heading-3-group': true,
  'heading-4-group': true,
  'heading-5-group': true,
  'heading-6-group': true
}));
export function getClosestContainerBlock(value, node) {
  if (!value) return null;
  var document = value.document,
      startText = value.startText;

  if (!node) {
    if (!startText) {
      return null;
    } // @ts-ignore


    node = startText;
  }

  var closest = document.getClosest(node.key, function (n) {
    return containerTypeMap[n.type];
  }); // 这个node确实归属这个document

  if (closest === null && document.getNode(node.key)) {
    return document;
  }

  return closest != null && closest.isElement() ? closest : null;
}
/**
 * 基于controller的view来寻找node的最近容器节点
 * @param document
 * @param node
 * @returns
 */

export function getClosestContainerBlockFromViewModel(document, node) {
  if (!document) return null;
  var closest = document.getClosest(node.key, function (n) {
    return viewModelContainerTypeMap[n.type];
  }); // 如果找不到node的包裹节点，就返回document这个最外层节点

  if (closest === null && document.getNode(node.key)) {
    return document;
  }

  return closest != null && closest.isElement() ? closest : null;
}
export function getClosestContainerBlockFromNative(elementNode, selector) {
  var _elementNode;

  if (!(elementNode && elementNode.nodeType === Node.ELEMENT_NODE)) {
    var selection = window.getSelection();
    var anchorNode = selection == null ? void 0 : selection.anchorNode;

    if (!anchorNode) {
      return null;
    } // @ts-ignore


    if (anchorNode.nodeType !== Node.ELEMENT_NODE) {
      elementNode = anchorNode.parentElement;
    } else {
      elementNode = anchorNode;
    } // @ts-ignore


    if (elementNode.nodeType !== Node.ELEMENT_NODE) {
      return null;
    }
  }

  if (!selector) {
    selector = '[data-type=page],[data-type=paragraph],[data-type=heading-1],[data-type=heading-2],[data-type=heading-3],[data-type=heading-4],[data-type=heading-5],[data-type=heading-6],[data-type=table-cell],[data-cangjie-content=true]';
  }

  return (_elementNode = elementNode) == null ? void 0 : _elementNode.closest(selector);
}
//# sourceMappingURL=getClosestContainerBlock.js.map