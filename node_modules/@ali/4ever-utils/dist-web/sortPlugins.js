function findAllDeps(runAfter) {
  var array = runAfter || [];
  var children = [].concat(array);

  while (children.length) {
    var child = children.pop();
    var deps = (child == null ? void 0 : child.runAfter) || [];
    deps.forEach(function (d) {
      if (!array.some(function (a) {
        return a === d;
      })) {
        array.push(d);
        children.push(d);
      }
    });
  }

  return array;
}

export function sortPlugins(pluginsFactoryMap) {
  var items = [];
  var factories = [];

  if (!pluginsFactoryMap) {
    return items;
  }

  Object.keys(pluginsFactoryMap).forEach(function (key) {
    var factory = pluginsFactoryMap[key];

    if (!factory) {
      console.error("plugin " + key + " is undefined");
      return;
    }

    factories.unshift(factory);
    items.push({
      key: key,
      factory: factory
    });
  });
  factories.forEach(function (f) {
    var _item$factory$runAfte;

    var itemIndex = items.findIndex(function (_ref) {
      var factory = _ref.factory;
      return factory === f;
    });
    var item = items[itemIndex];

    if (item != null && (_item$factory$runAfte = item.factory.runAfter) != null && _item$factory$runAfte.length) {
      var allDeps = findAllDeps(item.factory.runAfter);
      var depsIndexes = allDeps.map(function (dep) {
        return items.findIndex(function (i) {
          return i.factory === dep;
        });
      });
      var maxIndex = Math.max.apply(Math, depsIndexes);

      if (maxIndex > itemIndex) {
        items.splice(itemIndex, 1);
        items.splice(maxIndex, 0, item);
      }
    }
  });
  return items;
}
//# sourceMappingURL=sortPlugins.js.map