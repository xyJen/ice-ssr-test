{"version":3,"sources":["../../../src/aspect/bind.ts"],"names":["Bind","target","propertyKey","descriptor","value","TypeError","configurable","get","bound","bind","Object","defineProperty","writable"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,CAAkCC,MAAlC,EAAkDC,WAAlD,EAAuEC,UAAvE,EAA2I;AACzI,MAAI,CAACA,UAAD,IAAgB,OAAOA,UAAU,CAACC,KAAlB,KAA4B,UAAhD,EAA6D;AAC3D,UAAM,IAAIC,SAAJ,iDAA4DH,WAA5D,wBAAN;AACD;;AAED,SAAO;AACLI,IAAAA,YAAY,EAAE,IADT;AAELC,IAAAA,GAFK,iBAEW;AACd,UAAMC,KAAQ,GAAIL,UAAU,CAACC,KAAZ,CAA+BK,IAA/B,CAAoC,IAApC,CAAjB,CADc,CAEd;;AACAC,MAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BT,WAA5B,EAAyC;AACvCE,QAAAA,KAAK,EAAEI,KADgC;AAEvCF,QAAAA,YAAY,EAAE,IAFyB;AAGvCM,QAAAA,QAAQ,EAAE;AAH6B,OAAzC;AAKA,aAAOJ,KAAP;AACD;AAXI,GAAP;AAaD;;AAED,eAAeR,IAAf","sourcesContent":["/**\n * Creates a function that invokes func with the this binding of thisArg and partials prepended to the arguments it receives.\n *\n * The _.bind.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.\n *\n * Note: Unlike native Function#bind, this method doesn't set the \"length\" property of bound functions.\n * @param {...*} [partials] The argument to be partially applied.\n * @example\n *\n * class MyClass {\n  *   @Bind()\n  *   bound() {\n  *     return this;\n  *   }\n  *\n  *   unbound() {\n  *     return this;\n  *   }\n  * }\n  *\n  * const myClass = new MyClass();\n  *\n  * myClass.bound.call(null); // => myClass {}\n  *\n  * myClass.unbound.call(null); // => null\n  */\nfunction Bind<T extends Function>(target: object, propertyKey: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n  if (!descriptor || (typeof descriptor.value !== 'function')) {\n    throw new TypeError(`Only methods can be decorated with @Bind. <${propertyKey}> is not a method!`);\n  }\n\n  return {\n    configurable: true,\n    get(this: T): T {\n      const bound: T = (descriptor.value as Function).bind(this);\n      // Credits to https://github.com/andreypopp/autobind-decorator for memoizing the result of bind against a symbol on the instance.\n      Object.defineProperty(this, propertyKey, {\n        value: bound,\n        configurable: true,\n        writable: true,\n      });\n      return bound;\n    },\n  };\n}\n\nexport default Bind;\n"],"file":"bind.js"}