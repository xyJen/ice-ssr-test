{"version":3,"sources":["../../src/perfResizeObserver.ts"],"names":["ResizeObserver","PerfResizeObserver","observer","weakMap","resizeCallback","entries","entry","cb","get","target","observe","options","has","unobserve","set","WeakMap","_resizeObserver","create"],"mappings":";;;;;;AAAA,OAAOA,cAAP,MAA2B,0BAA3B;;IAEMC,kB,GAKJ,8BAAc;AAAA;;AAAA,OAJNC,QAIM;AAAA,OAHNC,OAGM;;AAAA,OAUNC,cAVM,GAUW,UAACC,OAAD,EAAoC;AAC3D,yDAAoBA,OAApB,wCAA6B;AAAA,UAAlBC,KAAkB;;AAC3B,UAAMC,EAAE,GAAG,KAAI,CAACJ,OAAL,CAAaK,GAAb,CAAiBF,KAAK,CAACG,MAAvB,CAAX;;AACA,UAAIF,EAAJ,EAAQ;AACNA,QAAAA,EAAE,CAACD,KAAK,CAACG,MAAP,CAAF;AACD;AACF;AACF,GAjBa;;AAAA,OAwBPC,OAxBO,GAwBG,UACfD,MADe,EAEfF,EAFe,EAGfI,OAHe,EAMZ;AACH,QAAI,KAAI,CAACR,OAAL,CAAaS,GAAb,CAAiBH,MAAjB,CAAJ,EAA8B;AAC5B,MAAA,KAAI,CAACP,QAAL,CAAcW,SAAd,CAAwBJ,MAAxB;AACD;;AACD,IAAA,KAAI,CAACN,OAAL,CAAaW,GAAb,CAAiBL,MAAjB,EAAyBF,EAAzB,EAJG,CAKH;;;AACA,IAAA,KAAI,CAACL,QAAL,CAAcQ,OAAd,CAAsBD,MAAtB,EAA8BE,OAA9B;AACD,GArCa;;AAAA,OA0CPE,SA1CO,GA0CK,UAACJ,MAAD,EAAqB;AACtC,IAAA,KAAI,CAACN,OAAL,WAAoBM,MAApB;;AACA,IAAA,KAAI,CAACP,QAAL,CAAcW,SAAd,CAAwBJ,MAAxB;AACD,GA7Ca;;AACZ,OAAKP,QAAL,GAAgB,IAAIF,cAAJ,CAAmB,KAAKI,cAAxB,CAAhB;AACA,OAAKD,OAAL,GAAe,IAAIY,OAAJ,EAAf;AACD;AAED;AACF;AACA;;;AAZMd,kB,CAGWe,e,GAAkB,IAAIf,kBAAJ,E;;AAH7BA,kB,CAaGgB,M,GAAS;AAAA,SAAMhB,kBAAkB,CAACe,eAAzB;AAAA,C;;AAwClB,eAAef,kBAAf","sourcesContent":["import ResizeObserver from 'resize-observer-polyfill';\n\nclass PerfResizeObserver {\n  private observer: ResizeObserver;\n  private weakMap: WeakMap<Element, Function>;\n  private static _resizeObserver = new PerfResizeObserver();\n\n  constructor() {\n    this.observer = new ResizeObserver(this.resizeCallback);\n    this.weakMap = new WeakMap();\n  }\n\n  /**\n   *  消费同一个实例\n   */\n  static create = () => PerfResizeObserver._resizeObserver;\n\n  private resizeCallback = (entries: ResizeObserverEntry[]) => {\n    for (const entry of entries) {\n      const cb = this.weakMap.get(entry.target);\n      if (cb) {\n        cb(entry.target);\n      }\n    }\n  };\n\n  /**\n   * @param {Element} target 要监控 Resize 的 Dom 节点\n   * @param {(rect: DOMRect) = void} cb 触发 Resize 后的回调\n   * @memberof PerfResizeObserver\n   */\n  public observe = (\n    target: Element,\n    cb: (rect: DOMRect) => void,\n    options?: {\n      box: 'content-box' | 'border-box' | 'device-pixel-content-box';\n    },\n  ) => {\n    if (this.weakMap.has(target)) {\n      this.observer.unobserve(target);\n    }\n    this.weakMap.set(target, cb);\n    // @ts-ignore polyfill typing\n    this.observer.observe(target, options);\n  };\n\n  /**\n   * 从堆栈中移除已监控 Resize 的 Dom 节点\n   */\n  public unobserve = (target: Element) => {\n    this.weakMap.delete(target);\n    this.observer.unobserve(target);\n  };\n}\n\nexport default PerfResizeObserver;\n"],"file":"perfResizeObserver.js"}