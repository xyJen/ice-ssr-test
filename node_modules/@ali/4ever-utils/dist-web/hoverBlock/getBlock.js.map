{"version":3,"sources":["../../../src/hoverBlock/getBlock.ts"],"names":["Block","domUtils","findBlockKeyFromEvent","findDocumentNode","document","domNode","findDOMNode","key","error","getBlock","event","options","zoomContainer","container","blockKey","block","getNode","isElement","type","getParent","result","isBlock"],"mappings":"AAAA;AACA,SAAqBA,KAArB,EAA4BC,QAA5B,QAAsD,oBAAtD;AACA,OAAOC,qBAAP;;AAMA,SAASC,gBAAT,CAA0BC,QAA1B,EAA8C;AAC5C,MAAI;AACF;AACA,QAAMC,OAAO,GAAGJ,QAAQ,CAACK,WAAT,CAAqBF,QAAQ,CAACG,GAA9B,CAAhB;AACA,WAAOF,OAAP;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc,CACd;AACD;;AACD,SAAO,IAAP;AACD;;AAQD,eAAe,SAASC,QAAT,CACbC,KADa,EAEbN,QAFa,EAGbO,OAHa,EAIb;AAAA;;AAAA,aAC0BA,OAAO,IAAI,EADrC;AAAA,MACQC,aADR,QACQA,aADR;;AAEA,MAAMC,SAAS,GAAGD,aAAa,IAAIT,gBAAgB,CAACC,QAAD,CAAnD;AACA,MAAMU,QAAQ,GAAGZ,qBAAqB,CAACQ,KAAD,EAAQG,SAAR,EAAmBF,OAAnB,CAAtC;AACA,MAAII,KAAK,GAAGX,QAAQ,CAACY,OAAT,CAAiBF,QAAjB,CAAZ;;AAEA,MAAI,UAAAC,KAAK,SAAL,WAAOE,SAAP,MAAsBF,KAAK,CAACG,IAAN,KAAe,MAAzC,EAAiD;AAC/CH,IAAAA,KAAK,GAAGX,QAAQ,CAACe,SAAT,CAAmBJ,KAAK,CAACR,GAAzB,CAAR;AACD;;AAED,MAAMa,MAAmB,GAAGpB,KAAK,CAACqB,OAAN,CAAcN,KAAd,IAAuB;AAAEA,IAAAA,KAAK,EAALA;AAAF,GAAvB,GAAmC,EAA/D;AACA,SAAOK,MAAP;AACD","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { Controller, Block, domUtils, Document } from '@ali/4ever-cangjie';\nimport findBlockKeyFromEvent from './utils/findBlockKeyFromEvent';\n\ntype HoverResult = {\n  block?: Block;\n};\n\nfunction findDocumentNode(document: Document) {\n  try {\n    // eslint-disable-next-line react/no-find-dom-node\n    const domNode = domUtils.findDOMNode(document.key);\n    return domNode;\n  } catch (error) {\n    // ignore\n  }\n  return null;\n}\n\ntype Options = {\n  zoomContainer?: HTMLElement | null;\n  zoom?: number;\n  filterColumn?: boolean;\n};\n\nexport default function getBlock(\n  event: MouseEvent,\n  document: Document,\n  options?: Options,\n) {\n  const { zoomContainer } = options || {};\n  const container = zoomContainer || findDocumentNode(document);\n  const blockKey = findBlockKeyFromEvent(event, container, options);\n  let block = document.getNode(blockKey);\n\n  if (block?.isElement() && block.type === 'line') {\n    block = document.getParent(block.key);\n  }\n\n  const result: HoverResult = Block.isBlock(block) ? { block } : {};\n  return result;\n}\n"],"file":"getBlock.js"}