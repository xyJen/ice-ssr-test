import _extends from "@babel/runtime/helpers/extends";
import { Block } from '@ali/4ever-cangjie';
import { TinyColor } from '@ctrl/tinycolor';
import { theme } from "../../theme";
var PCT_REG = /^pct(\d*)/;

function transformShd(shd) {
  if (!shd) return '';
  var _shd$val = shd.val,
      val = _shd$val === void 0 ? '' : _shd$val,
      _shd$color = shd.color,
      color = _shd$color === void 0 ? 'auto' : _shd$color,
      _shd$fill = shd.fill,
      fill = _shd$fill === void 0 ? 'auto' : _shd$fill;
  var isAutoColor = color === 'auto';
  var isAutoFill = fill === 'auto';

  if (val === 'clear') {
    // 清除
    return fill;
  }

  if (val === 'solid') {
    // 纯色
    if (isAutoColor) return '#000';
    return color;
  }

  var pctMatch = val.match(PCT_REG); // TODO: 不支持其它复杂纹理

  if (!pctMatch || !pctMatch[1]) return fill;
  var pct = parseInt(pctMatch[1], 10);
  if (!pct) return ''; // 前景色默认黑色，背景色默认白色

  var colorRgb = new TinyColor(isAutoColor ? '#000000' : color).toRgb();
  var fillRgb = new TinyColor(isAutoFill ? '#FFFFFF' : fill).toRgb();
  var colorFactor = pct / 100;
  var fillFactor = (100 - pct) / 100; // 针对 pctXX 模拟混合（因为比较均匀）

  return new TinyColor({
    r: colorRgb.r * colorFactor + fillRgb.r * fillFactor,
    g: colorRgb.g * colorFactor + fillRgb.g * fillFactor,
    b: colorRgb.b * colorFactor + fillRgb.b * fillFactor
  }).toHexString();
}

function fromBlock(node) {
  var shd = node.data.shd; // 暂直接返回

  return shd;
}
/**
 * 转换段落 shd 为 style
 * 装饰性样式的 padding 优先级需要低于 spacing
 */


function toStyle(node) {
  var _node$data, _node$data2;

  if (!Block.isBlock(node)) return undefined; // 「 引用 」的背景色在插件中单独处理

  if (!(node != null && (_node$data = node.data) != null && _node$data.shd) || node != null && (_node$data2 = node.data) != null && _node$data2.blockquote) return undefined;
  return _extends({}, theme.DEFAULT_SHD_STYLES, {
    backgroundColor: transformShd(node.data.shd)
  });
}

export default {
  transformShd: transformShd,
  fromBlock: fromBlock,
  toStyle: toStyle
};
//# sourceMappingURL=shd.js.map