import _extends from "@babel/runtime/helpers/extends";
import { fontSize as fsCfg } from "../../theme";
import { unitsConverter } from "../toUnits";
import { getDefaultHeadStyle } from "./common";
import { PT_TO_PIX } from "../unitConvert";
var ONE_CHAR_PX = 14;

function charsToPx(_char) {
  // 按照 10.5pt/char 转换（导入数据未作单位转换需除以100）
  return _char / 100 * ONE_CHAR_PX;
}

function pxToChars(px) {
  return px / ONE_CHAR_PX * 100;
}

function getFirstTextPxSz(node) {
  var firstText = node.getFirstText();
  if (!firstText) return fsCfg.DEFAULT * PT_TO_PIX;
  var szMark = firstText.marks.find(function (m) {
    return m.type === 'sz';
  });

  if (szMark) {
    if (szMark.data.szUnit !== 'pt') {
      return szMark.data.value;
    }

    return szMark.data.value * PT_TO_PIX;
  }

  if (/heading-\d/i.test(node.type)) {
    var headStyle = getDefaultHeadStyle(node.type);
    return unitsConverter.toPX(headStyle['font-size']);
  }

  return fsCfg.DEFAULT * PT_TO_PIX;
}
/**
 * 解析 block indent 数据
 * leftChars/rightChars/firstLineChars/hangingChars 将覆盖对应不带单位的字段，并被转换为 px 单位
 * 会处理悬挂和首行缩进冲突，并根据第一个字的字号动态计算缩进值
 * @param node BLock
 * @param inheritedData 继承数据
 * @returns IndentProperties
 */


function fromBlock(node, inheritedData) {
  // 优先级：自身 > 继承
  var nodeData = inheritedData || node.data;
  var ind = nodeData.ind;

  var newInd = _extends({}, ind);

  if (!ind) return newInd;
  var firstLine = ind.firstLine,
      originalHanging = ind.hanging,
      firstLineChars = ind.firstLineChars,
      hangingChars = ind.hangingChars,
      left = ind.left,
      leftChars = ind.leftChars,
      right = ind.right,
      rightChars = ind.rightChars;
  var firstTextPxSz = 0;
  var hanging = originalHanging;

  if (!hanging && firstLine < 0) {
    // 兼容编辑器老数据（用 firstLine < 0 表示悬挂缩进）
    hanging = -firstLine;
    newInd.hanging = hanging;
  }

  if (firstLineChars || hangingChars) {
    firstTextPxSz = getFirstTextPxSz(node);
  } // first 和 hanging 互斥，且 hanging 优先级更高


  if (hanging || hangingChars) {
    delete newInd.firstLine;
    delete newInd.firstLineChars;
  }

  if (firstLineChars) {
    newInd.firstLine = firstTextPxSz * firstLineChars / 100 || firstLine || 0;
  }

  if (hangingChars) {
    // hangingChars 存在时忽略 left 的值
    newInd.left = 0;
    newInd.hanging = firstTextPxSz * hangingChars / 100 || hanging || 0;
  }

  if (leftChars) {
    // left 视为兜底
    newInd.left = charsToPx(leftChars) || left || 0;
  }

  if (rightChars) {
    newInd.right = charsToPx(rightChars) || right || 0;
  }

  return newInd;
}

export var IndUtil = {
  fromBlock: fromBlock,
  charsToPx: charsToPx,
  pxToChars: pxToChars
};
export var IndentTrigger;

(function (IndentTrigger) {
  IndentTrigger[IndentTrigger["keyboard"] = 0] = "keyboard";
  IndentTrigger[IndentTrigger["toolbar"] = 1] = "toolbar";
})(IndentTrigger || (IndentTrigger = {}));

export var IndentType;

(function (IndentType) {
  IndentType["none"] = "noe";
  IndentType["hang"] = "hang";
  IndentType["firstLine"] = "firstLine";
})(IndentType || (IndentType = {}));

export var DEFAULT_INDENT = {
  firstLine: 0,
  firstLineChars: 0,
  left: 0,
  leftChars: 0,
  hanging: 0,
  hangingChars: 0
};
//# sourceMappingURL=ind.js.map