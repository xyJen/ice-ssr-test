import { environment } from '@ali/4ever-cangjie';
import { headDefaultStyle } from "../../heading/heading";
import { fontSize as fsCfg } from "../../theme";
import { unitsConverter, isNaN } from "../toUnits";
var FONTSIZE_BIGGER = environment.IS_MOBILE ? 1.06 : 1;

function formatUnit(num) {
  if (isNaN(num)) return fsCfg.DEFAULT; // 按最小粒度四舍五入取整

  num = fsCfg.PARTICLE * Math.round(num / fsCfg.PARTICLE);
  return Math.min(Math.max(fsCfg.MIN, num), fsCfg.MAX);
}
/**
 * 从mark中获取sz
 * @param mark
 */


function fromMark(mark) {
  if (mark && mark.data && mark.data.value) {
    // 兼容新老数据: 没有szUnit表示是以前的px单位
    var unit = mark.data.szUnit || 'px';

    if (unit === 'pt') {
      // word等转换的pt数据依然需要格式化
      return formatUnit(mark.data.value);
    } else if (unit === 'px' && mark.data.value === 14) {
      // 特殊处理默认字号：稍微放大至11pt(14.667px)
      return fsCfg.DEFAULT;
    }

    return formatUnit(unitsConverter.toPT(mark.data.value + unit));
  }

  return fsCfg.DEFAULT;
}
/**
 * 转换为pt并格式化
 * @param value
 */


function toPt(value, unit) {
  return formatUnit(unitsConverter.toPT(value, unit));
}
/**
 * 转换为px并格式化
 * @param value
 */


function toPx(value, unit) {
  return formatUnit(unitsConverter.toPX(value, unit));
}

function fromHeadingType(type, defaultParagraphSz) {
  var headStyle = headDefaultStyle[type];
  if (!headStyle) return defaultParagraphSz || fsCfg.DEFAULT; // PERF：确定数据来自 内部预置 时直接使用 parseFloat

  return formatUnit(parseFloat(headStyle['font-size']));
}

export var SzUtil = {
  fromHeadingType: fromHeadingType,
  fromMark: fromMark,
  toPx: toPx,
  toPt: toPt,
  FONTSIZE_BIGGER: FONTSIZE_BIGGER
};
//# sourceMappingURL=sz.js.map