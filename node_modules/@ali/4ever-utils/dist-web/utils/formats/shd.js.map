{"version":3,"sources":["../../../../src/utils/formats/shd.ts"],"names":["Block","TinyColor","theme","PCT_REG","transformShd","shd","val","color","fill","isAutoColor","isAutoFill","pctMatch","match","pct","parseInt","colorRgb","toRgb","fillRgb","colorFactor","fillFactor","r","g","b","toHexString","fromBlock","node","data","toStyle","isBlock","undefined","blockquote","DEFAULT_SHD_STYLES","backgroundColor"],"mappings":"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","sourcesContent":["import { Block, Node } from '@ali/4ever-cangjie';\nimport { ShdData as ShdMarkData } from '../modelData';\nimport React from 'react';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { theme } from '../../theme';\n\nconst PCT_REG = /^pct(\\d*)/;\n\nfunction transformShd(shd?: ShdMarkData) {\n  if (!shd) return '';\n\n  const { val = '', color = 'auto', fill = 'auto' } = shd;\n  const isAutoColor = color === 'auto';\n  const isAutoFill = fill === 'auto';\n\n  if (val === 'clear') {\n    // 清除\n    return fill;\n  }\n\n  if (val === 'solid') {\n    // 纯色\n    if (isAutoColor) return '#000';\n    return color;\n  }\n\n  const pctMatch = val.match(PCT_REG);\n  // TODO: 不支持其它复杂纹理\n  if (!pctMatch || !pctMatch[1]) return fill;\n\n  const pct = parseInt(pctMatch[1], 10);\n  if (!pct) return '';\n\n  // 前景色默认黑色，背景色默认白色\n  const colorRgb = new TinyColor(isAutoColor ? '#000000' : color).toRgb();\n  const fillRgb = new TinyColor(isAutoFill ? '#FFFFFF' : fill).toRgb();\n  const colorFactor = pct / 100;\n  const fillFactor = (100 - pct) / 100;\n\n  // 针对 pctXX 模拟混合（因为比较均匀）\n  return new TinyColor({\n    r: colorRgb.r * colorFactor + fillRgb.r * fillFactor,\n    g: colorRgb.g * colorFactor + fillRgb.g * fillFactor,\n    b: colorRgb.b * colorFactor + fillRgb.b * fillFactor,\n  }).toHexString();\n}\n\nfunction fromBlock(node: Block) {\n  const { shd } = node.data;\n  // 暂直接返回\n  return shd;\n}\n\n/**\n * 转换段落 shd 为 style\n * 装饰性样式的 padding 优先级需要低于 spacing\n */\nfunction toStyle(node: Block | Node): React.CSSProperties | undefined {\n  if (!Block.isBlock(node)) return undefined;\n  // 「 引用 」的背景色在插件中单独处理\n  if (!node?.data?.shd || node?.data?.blockquote) return undefined;\n  return {\n    ...theme.DEFAULT_SHD_STYLES,\n    backgroundColor: transformShd(node.data.shd),\n  };\n}\n\nexport default {\n  transformShd,\n  fromBlock,\n  toStyle,\n};\n"],"file":"shd.js"}