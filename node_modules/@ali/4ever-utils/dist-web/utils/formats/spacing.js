import _extends from "@babel/runtime/helpers/extends";
import { headDefaultStyle } from "../../heading/heading";
import { theme, fontSize as fsCfg, lineHeight as lineCfg } from "../../theme";
import { unitsConverter, ptToPx } from "../toUnits";
/**
 * 将行单位转换为 px 单位
 * @param lines
 * @param linePitch 网格系统相关参数
 * @returns
 */

function linesToPx(lines, linePitch) {
  // 默认 linePitch 为 15.6 pt
  var pitch = linePitch || theme.spacing.defaultLinePitch; // px = lines * pitch

  return lines * pitch;
}

function pxToLines(px, linePitch) {
  var pitch = linePitch || theme.spacing.defaultLinePitch; // px = lines * pitch

  return px / pitch;
}
/**
 * 将倍数的行距转换为 px
 * 倍数在导入时会被：
 * 原始数据：480，代表24pt
 * 480 / 240 = 2，变为倍数（实际上应该除以 20 转换为 pt，都是为了兼容老数据）
 * 所以：
 * px = times * 12 * 4 / 3
 */


function timesToPx(times) {
  return times * 16;
}
/**
 * 将 px 单位的行距转换为倍数
 * @param times
 * @returns
 */


function pxToTimes(times) {
  return times / 16;
} // 提前排序便于快速查找


var ASL_LINE_HEIGHT = Object.keys(lineCfg.ACTUAL_MAP).map(function (h) {
  return parseFloat(h);
}).sort(function (a, b) {
  return a - b;
});
var ASL_LINE_HEIGHT_LEN = ASL_LINE_HEIGHT.length;
var PER_REG = /^\d*\.?\d*%$/;
/**
 * 从默认的行高列表中找出最接近的行高
 */

function findClosestLineHeight(target) {
  var height = lineCfg.DEFAULT;
  var min = Infinity; // fast than some

  for (var i = 0; i < ASL_LINE_HEIGHT_LEN; i++) {
    var newMin = Math.abs(target - ASL_LINE_HEIGHT[i]);

    if (newMin > min) {
      break;
    }

    height = ASL_LINE_HEIGHT[i];
    min = newMin;
  }

  return height;
}

function fromHeadingType(type) {
  var headStyle = headDefaultStyle[type];
  if (!headStyle) return {};
  return {
    // 转换为绝对值单位 px
    before: ptToPx(headStyle['margin-top']),
    after: ptToPx(headStyle['margin-bottom']),
    line: headStyle['line-height'] / lineCfg.DEFAULT
  };
}
/**
 * 从html解析行高并强制转换为接近的行高（倍数）
 * 支持 2、200%、20px等
 * 策略：尽量靠近原格式视觉
 * @param value
 * @param fontSize
 */


function fromHtml(value, fontSize) {
  if (!value) return ASL_LINE_HEIGHT[0];
  var sz = unitsConverter.toPT(fontSize) || fsCfg.DEFAULT;
  var height = NaN;

  if (PER_REG.test(value)) {
    // 特别处理 %，兼容：@word @shimo @tengxun
    height = parseFloat(value) / 100;
  } else {
    // other: 转换为固定值 除以 字号 除以 1.7
    height = unitsConverter.toPT(value) / sz / lineCfg.DEFAULT;
  }

  if (!height) return ASL_LINE_HEIGHT[0];
  return findClosestLineHeight(height);
}
/**
 * 从节点数据解析 spacing
 * before 和 after 会被转换为 px 单位（与存量 asl 一致）
 * line 则转换为：
 * px 单位（lineRule !== auto）
 * 倍数 单位（lineRule === auto）
 * @param paragraph 块级元素
 * @param inheritedData 继承值
 * @param linePitch docGrid.linePitch pt 单位
 * @returns SpacingProperties
 */


function fromBlock(paragraph, inheritedData, linePitch) {
  var _paragraph$data;

  var type = paragraph.type;
  var nodeSpacing = (_paragraph$data = paragraph.data) == null ? void 0 : _paragraph$data.spacing;
  var inheritedSpacing = inheritedData == null ? void 0 : inheritedData.spacing;
  var spacing = {};

  if (inheritedSpacing) {
    // 有继承数据的时候忽略编辑器默认的 spacing
    spacing = _extends({}, inheritedSpacing, nodeSpacing);
  } else {
    var defaultThemeSpacing = fromHeadingType(type);
    spacing = _extends({}, defaultThemeSpacing, nodeSpacing);
  }

  if (spacing.beforeAutospacing) {
    spacing.before = theme.spacing.defaultBeforeAutospacing; // 删除无效字段避免影响提取公共属性

    delete spacing.beforeLines;
  } else if (spacing.beforeLines) {
    spacing.before = linesToPx(spacing.beforeLines, linePitch);
  } else if (typeof spacing.before === 'string') {
    // 默认单位转换为 px（word导出数据含xxpx、xxpt）
    spacing.before = unitsConverter.toPX(spacing.before);
  }

  if (spacing.afterAutospacing) {
    spacing.after = theme.spacing.defaultAfterAutospacing;
    delete spacing.afterLines;
  } else if (spacing.afterLines) {
    spacing.after = linesToPx(spacing.afterLines, linePitch);
  } else if (typeof spacing.after === 'string') {
    spacing.after = unitsConverter.toPX(spacing.after);
  }

  if ('line' in spacing) {
    var _spacing = spacing,
        line = _spacing.line,
        _spacing$lineRule = _spacing.lineRule,
        lineRule = _spacing$lineRule === void 0 ? 'auto' : _spacing$lineRule; // 存量数据中存在字符串类型的 line: 1.46667px（脏）,18px（正确）
    // 这里转换为倍数，同时防止 line 过小
    // word px 到 行高 公式：line = px / 16

    if (typeof line === 'string') {
      spacing.line = pxToTimes(unitsConverter.toPX(spacing.line)) || 1;
    }

    if (spacing.line && lineRule !== 'auto') {
      // 固定值也需要做最小限制（24 * 0.6 = 14）
      spacing.line = Math.max(14, timesToPx(spacing.line));
    }

    if (lineRule === 'auto') {
      // 对极小值多倍做限制，避免粘连（1/1.7 = 0.6）
      spacing.line = Math.max(0.6, spacing.line || 0);
    }
  }

  return spacing;
}
/**
 * 将节点的 spacing 数据转换为 css 样式
 * 优先走 userSet to actualSet 隐射表，否则按照 * 1.7 计算行高
 */


function toStyle(block, inheritedData, linePitch) {
  var _block$data;

  var style = {}; // PERF: 提前 return 提升性能

  if (!((_block$data = block.data) != null && _block$data.spacing) && !(inheritedData != null && inheritedData.spacing) && !headDefaultStyle[block.type]) {
    return style;
  }

  var spacing = fromBlock(block, inheritedData, linePitch);

  if (spacing.before) {
    style.marginTop = spacing.before;
  }

  if (spacing.after) {
    style.marginBottom = spacing.after;
  }

  if (spacing.line) {
    var _spacing$lineRule2 = spacing.lineRule,
        lineRule = _spacing$lineRule2 === void 0 ? 'auto' : _spacing$lineRule2;

    if (lineRule === 'auto') {
      // 倍数
      style.lineHeight = "" + (lineCfg.ACTUAL_MAP[spacing.line] || spacing.line * lineCfg.DEFAULT);
    } else if (lineRule === 'exact') {
      style.lineHeight = spacing.line + "px";
    } else if (lineRule === 'atLeast') {
      // 最小值降级
      style.lineHeight = 'normal';
    }
  }

  return style;
}

function getLineHeightFromSpacing(spacing) {
  var defaultLineHeight = "" + lineCfg.DEFAULT;
  if (!(spacing != null && spacing.line)) return defaultLineHeight;
  return "" + (toStyle({
    klass: 'block',
    type: 'paragraph',
    data: {
      spacing: spacing
    }
  }).lineHeight || defaultLineHeight);
}

export var SpacingUtil = {
  fromBlock: fromBlock,
  fromHtml: fromHtml,
  fromHeadingType: fromHeadingType,
  toStyle: toStyle,
  getLineHeightFromSpacing: getLineHeightFromSpacing,
  linesToPx: linesToPx,
  pxToLines: pxToLines,
  timesToPx: timesToPx,
  pxToTimes: pxToTimes
};
//# sourceMappingURL=spacing.js.map