{"version":3,"sources":["../../../../src/utils/formats/common.ts"],"names":["cloneDeep","Block","Mark","headTypeConvert","headDefaultStyle","SzUtil","getDefaultHeadStyle","type","getDefaultMarks","node","defaultParagraphSz","isBlock","defaultMarks","create","data","value","fromHeadingType","szUnit","push","replaceObject","obj","val","pathes","stack","split","copyed","length","target","key","shift","CommonFormatUtil"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,oBAA5B;AACA,SAASC,eAAT,EAA0BC,gBAA1B;AACA,SAASC,MAAT;AAEA,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAA2C;AAChD,SAAOH,gBAAgB,CAACD,eAAe,CAACI,IAAD,CAAhB,CAAvB;AACD;AAED,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA6CC,kBAA7C,EAAkF;AACvF,MAAI,CAACT,KAAK,CAACU,OAAN,CAAcF,IAAd,CAAL,EAA0B,OAAO,EAAP;AAC1B,MAAMG,YAAoB,GAAG,CAACV,IAAI,CAACW,MAAL,CAAY;AACxCN,IAAAA,IAAI,EAAE,IADkC;AAExCO,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAEV,MAAM,CAACW,eAAP,CAAuBP,IAAI,CAACF,IAA5B,EAAkCG,kBAAlC,CADH;AAEJO,MAAAA,MAAM,EAAE;AAFJ;AAFkC,GAAZ,CAAD,CAA7B;;AAQA,MAAIX,mBAAmB,CAACG,IAAI,CAACF,IAAN,CAAvB,EAAoC;AAClCK,IAAAA,YAAY,CAACM,IAAb,CAAkBhB,IAAI,CAACW,MAAL,CAAY;AAAEN,MAAAA,IAAI,EAAE;AAAR,KAAZ,CAAlB;AACD;;AACD,SAAOK,YAAP;AACD;AAED,OAAO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAcC,GAAd,EAAwBC,MAAxB,EAA2C;AACtE,MAAMC,KAAK,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,CAAd,CADsE,CAEtE;;AACA,MAAMC,MAAM,GAAGzB,SAAS,CAACoB,GAAD,CAAxB;AACA,MAAIG,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB,OAAOD,MAAP;AACtB,MAAIE,MAAM,GAAGF,MAAb;;AACA,SAAOF,KAAK,CAACG,MAAN,GAAe,CAAtB,EAAyB;AACvB,QAAME,GAAG,GAAGL,KAAK,CAACM,KAAN,MAAiB,EAA7B;AACAF,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAAN,IAAe,EAA7B;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACC,GAAD,CAAf;AACD;;AAEDD,EAAAA,MAAM,CAACJ,KAAK,CAACM,KAAN,MAAiB,EAAlB,CAAN,GAA8BR,GAA9B;AAEA,SAAOI,MAAP;AACD,CAfM;AAiBP,OAAO,IAAMK,gBAAgB,GAAG;AAC9BxB,EAAAA,mBAAmB,EAAnBA,mBAD8B;AAE9BE,EAAAA,eAAe,EAAfA,eAF8B;AAG9BW,EAAAA,aAAa,EAAbA;AAH8B,CAAzB","sourcesContent":["import { cloneDeep } from 'lodash-es';\nimport { Block, Mark } from '@ali/4ever-cangjie';\nimport { headTypeConvert, headDefaultStyle } from '../../heading/heading';\nimport { SzUtil } from './sz';\n\nexport function getDefaultHeadStyle(type: string) {\n  return headDefaultStyle[headTypeConvert(type)];\n}\n\nexport function getDefaultMarks(node: Block | Node, defaultParagraphSz?: number): Mark[] {\n  if (!Block.isBlock(node)) return [];\n  const defaultMarks: Mark[] = [Mark.create({\n    type: 'sz',\n    data: {\n      value: SzUtil.fromHeadingType(node.type, defaultParagraphSz),\n      szUnit: 'pt',\n    },\n  })];\n\n  if (getDefaultHeadStyle(node.type)) {\n    defaultMarks.push(Mark.create({ type: 'bold' }));\n  }\n  return defaultMarks;\n}\n\nexport const replaceObject = (obj: Object, val: any, pathes: string) => {\n  const stack = pathes.split('.');\n  // PERF: 避免引用的对象更改，性能不好\n  const copyed = cloneDeep(obj);\n  if (stack.length < 1) return copyed;\n  let target = copyed;\n  while (stack.length > 1) {\n    const key = stack.shift() || '';\n    target[key] = target[key] || {};\n    target = target[key];\n  }\n\n  target[stack.shift() || ''] = val;\n\n  return copyed;\n};\n\nexport const CommonFormatUtil = {\n  getDefaultHeadStyle,\n  getDefaultMarks,\n  replaceObject,\n};\n"],"file":"common.js"}