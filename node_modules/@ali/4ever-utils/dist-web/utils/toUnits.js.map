{"version":3,"sources":["../../../src/utils/toUnits.ts"],"names":["fontSize","fsCfg","INCHE_TO_UNIT","pt","cm","mm","q","pc","px","ptToPx","ABSOLUTE_UNIT_REG","PT_PX_REG","RELATIVE_UNIT_REG","NUM_REG","isNaN","value","Number","window","matchUnit","reg","match","absoluteUnitConverter","unitTo","unitFrom","unit","NaN","num","parseFloat","toLowerCase","relativeUnitConverter","test","DEFAULT","converterFactory","absoluteUnit","converter","Object","keys","forEach","toUpperCase","toPX","unitsConverter"],"mappings":"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","sourcesContent":["import { fontSize as fsCfg } from '../theme';\n\n/**\n * 绝对值单位转换公式：\n * unit a -> unit b = unit a -> 英寸(in) -> unit b\n * 1in = 72pt\n * 1in = 2.54cm\n * 1in = 10 * 2.54mm\n * 1in = 40 * 2.54q\n * 1in = 1in\n * 1in = 6pc\n * 1in = 96px\n */\nconst INCHE_TO_UNIT: Record<string, number> = {\n  pt: 72,\n  cm: 2.54,\n  mm: 10 * 2.54,\n  q: 40 * 2.54,\n  in: 1,\n  pc: 6,\n  px: 96,\n  ptToPx: 72 / 96,\n};\nconst ABSOLUTE_UNIT_REG = /^(-?\\d*\\.?\\d*)(pt|cm|mm|q|in|pc|px)$/i;\nconst PT_PX_REG = /^(-?\\d*\\.?\\d*)(pt|px)$/i;\nconst RELATIVE_UNIT_REG = /^(-?\\d*\\.?\\d*)(em|%)?$/i;\nconst NUM_REG = /^\\d*\\.?\\d*$/;\n\nexport function isNaN(value) {\n  if (Number.isNaN) {\n    return Number.isNaN(value);\n  }\n  // https://eslint.org/docs/rules/no-self-compare\n  return typeof value === 'number' && window.isNaN(value);\n}\n\nexport type UnitType = number | string | undefined | null;\ntype ABSOLUTE_UNIT_TYPE = 'pt' | 'cm' | 'mm' | 'q' | 'in' | 'pc' | 'px';\ninterface UnitFunc {\n  (value: UnitType, unit?: string): number;\n}\n\nfunction matchUnit(value: UnitType, reg: RegExp): string {\n  const match = `${value}`.match(reg);\n  if (match && match[2]) {\n    return match[2];\n  }\n  return '';\n}\n\n/**\n * 绝对值单位之间互转\n * @param value\n * @param unitTo\n */\nfunction absoluteUnitConverter(value: UnitType, unitTo: ABSOLUTE_UNIT_TYPE, unitFrom?: string): number {\n  const unit = unitFrom || matchUnit(value, ABSOLUTE_UNIT_REG);\n  if (!unit) return NaN;\n  const num = parseFloat(`${value}`);\n  // 单位换算一步到位\n  return num / INCHE_TO_UNIT[unit.toLowerCase()] * INCHE_TO_UNIT[unitTo];\n}\n\n/**\n * 将em、%和纯数字转换为绝对值\n * 策略：以默认的字号为基础计算 @word\n * @param value\n * @param unitTo value 要转换成为的单位\n * @param unitFrom 传入 value 的单位\n */\nfunction relativeUnitConverter(value: UnitType, unitTo: ABSOLUTE_UNIT_TYPE, unitFrom?: string): number {\n  const unit = unitFrom || matchUnit(value, RELATIVE_UNIT_REG);\n  // 数字字符串以外不识别\n  if (!unit && !NUM_REG.test(`${value}`)) return NaN;\n  let num = parseFloat(`${value}`);\n  if (unit === '%') {\n    num /= 100;\n  }\n  // 先转换为 pt 再转换为指定单位\n  return num * fsCfg.DEFAULT / INCHE_TO_UNIT.pt * INCHE_TO_UNIT[unitTo];\n}\n\n/**\n * 将支持的任意单位转换为指定绝对单位\n * 支持px等绝对单位，以及em、%、数字等相对单位\n * @param unitTo\n * @see https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#Lengths\n */\nfunction converterFactory(unitTo: ABSOLUTE_UNIT_TYPE): UnitFunc {\n  return (value: UnitType, unitFrom = ''): number => {\n    // undefined || '' || 0 || NaN || null\n    if (!value) return NaN;\n    const absoluteUnit = absoluteUnitConverter(value, unitTo, unitFrom);\n    if (ABSOLUTE_UNIT_REG.test(unitFrom) || !isNaN(absoluteUnit)) {\n      return absoluteUnit;\n    }\n    return relativeUnitConverter(value, unitTo, unitFrom);\n  };\n}\n\n// 提前生成转换函数\ntype ConvertMethods = 'toPT' | 'toPX' | 'toCM' | 'toMM' | 'toQ' | 'toIN' | 'toPC';\nconst converter: Record<ConvertMethods, UnitFunc> = {} as Record<ConvertMethods, UnitFunc>;\nObject.keys(INCHE_TO_UNIT).forEach((unit) => {\n  converter[`to${unit.toUpperCase()}`] = converterFactory(unit as ABSOLUTE_UNIT_TYPE);\n});\n\n/**\n * 将 pt 转换为 px（pt 组成应为 11pt ）\n * PERF: 运行 10000次 相比 unitsConverter.toPX 从 6ms 下降到 2ms 左右\n */\nexport function ptToPx(value: UnitType) {\n  if (!value) return NaN;\n  if (typeof value === 'number') return value;\n  if (PT_PX_REG.test(value)) {\n    // 确定组成为 xxpt 的情况下使用 parseFloat 提高性能\n    return parseFloat(value) / INCHE_TO_UNIT.ptToPx;\n  }\n  return converter.toPX(value);\n}\n\nexport const unitsConverter = converter;\n"],"file":"toUnits.js"}