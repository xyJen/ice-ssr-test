import { Commands, Text } from '@ali/4ever-cangjie';
import { getRangesFromEditor } from "./getRangesFromEditor";
/**
 * 移除当前位置的临时样式
 * @param controller 
 * @param type 
 * @returns 
 */

function removeMarkAtCurrentPosition(controller, type) {
  var _controller$value = controller.value,
      document = _controller$value.document,
      selection = _controller$value.selection;
  var isCollapsed = selection.isCollapsed;

  var _selection$convertToT = selection.convertToTextPoints(document),
      focus = _selection$convertToT.focus;

  var focusNode = document.getNode(focus.key);
  if (!focusNode) return controller;
  /**
   * 优先级: selection.marks > marksAtPosition
   * selection.marks = [] 代表临时的、强制的清空样式的状态
   */

  var curPosMarks = selection.marks;

  if (isCollapsed && !curPosMarks) {
    // collapsed 状态需要 getMarksAtPosition，例如在一段加粗和红色文本中单独取消加粗，此时是设置临时的 selection.marks，不落库
    curPosMarks = document.getMarksAtPosition(focusNode.key, focus.offset);
  }

  if (!curPosMarks) return controller; // 同类型的文本样式仅允许存在一个，这里直接 filter
  // 特殊业务（例如评论）允许多个存在可以使用 setUtils.remove

  curPosMarks = curPosMarks.filter(function (m) {
    return m.type !== type;
  });
  var newSelection = selection.set('marks', curPosMarks);
  controller.command('select', newSelection);
  return controller;
}
/**
 * 在给定选区内删除指定类型的 mark
 * 策略同 removeMarkAtCurrentRange
 * @param controller
 * @param selection
 * @param type
 */


export function removeMarkAtRange(controller, selection, type) {
  var document = controller.value.document;
  var isCollapsed = selection.isCollapsed;

  if (!isCollapsed) {
    // 1
    var needRemovedMarks = document.getMarksAtRange(selection).filter(function (m) {
      return m.type === type;
    });
    needRemovedMarks.forEach(function (m) {
      controller.command(Commands.removeMarkAtRange, selection, m);
    }); // 即使是 isExpanded 也需要 removeMarkAtCurrentPosition，例如标题变为普通段落

    return removeMarkAtCurrentPosition(controller, type);
  }

  var _selection$convertToT2 = selection.convertToTextPoints(document),
      focus = _selection$convertToT2.focus;

  var focusNode = document.getNode(focus.key);
  if (!focusNode) return controller;
  var isCollapsedAtEmptyParagraph = controller.query('isCollapsedAtEmptyParagraph', selection);
  var isCollapsedAtEmptyHeading = controller.query('isCollapsedAtEmptyHeading', selection);

  if (isCollapsedAtEmptyParagraph || isCollapsedAtEmptyHeading) {
    // 2
    if (focusNode && Text.isText(focusNode)) {
      var _needRemovedMarks = document.getMarksAtPosition(focusNode.key, 0).filter(function (m) {
        return m.type === type;
      });

      _needRemovedMarks.forEach(function (m) {
        controller.command(Commands.removeMarkByKey, focusNode.key, 0, 0, m);
      });
    }
  }

  return removeMarkAtCurrentPosition(controller, type);
}
/**
 * 在当前选区内删除指定类型的 mark
 * 1. 未闭合时策略：清除选区内样式
 * 2. 闭合时策略：
 *  2.1 如果是 isCollapsedAtEmptyParagraph/Heading 时需要清除选区临时样式，也需要清除 text 节点的mark（操作可持久化），对应的场景有二：
 *    a. 表格选区中的空 cell；
 *    b. focus 在空段落（paragraph 和 heading）
 *  2.2 边缘闭合选区：仅设置选区的临时样式，对应的场景：focus 在分割线、卡片、表格等左右
 *  2.3 focus 在段落中以及其它情形：仅设置选区的临时样式
 * @param controller
 * @param type 类型
 */

export function removeMarkAtCurrentRange(controller, type) {
  var selections = getRangesFromEditor(controller);
  selections.forEach(function (selection) {
    return removeMarkAtRange(controller, selection, type);
  });
  return controller;
}
//# sourceMappingURL=removeMarkAtCurrentRange.js.map