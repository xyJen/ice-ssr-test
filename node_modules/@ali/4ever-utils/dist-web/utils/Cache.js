/**
 * 一般 K/V Cache 类型
 */

/**
 * 简单 K/V cache 缓存
 * @param capacity 容量 - (真实的缓存容量会大 1 位)
 */
var SimpleCache = /*#__PURE__*/function () {
  /**
   * 缓存池容量
   */

  /**
   * 当前缓存池的大小
   */

  /**
   * 备份缓存池
   */

  /**
   * 当前缓存池
   */
  function SimpleCache(capacity) {
    if (capacity === void 0) {
      capacity = Infinity;
    }

    this.capacity = void 0;
    this.size = 0;
    this.backup = Object.create(null);
    this.cache = Object.create(null);
    this.capacity = capacity;
  }

  var _proto = SimpleCache.prototype;

  _proto.update = function update(key, value) {
    this.size += 1;
    this.cache[key] = value;

    if (this.size >= this.capacity) {
      this.size = 0;
      this.backup = this.cache;
      this.cache = Object.create(null);
    }
  };

  _proto.get = function get(key) {
    var value = this.cache[key];

    if (value !== undefined) {
      return value;
    }

    value = this.backup[key];

    if (value !== undefined) {
      this.update(key, value);
      return value;
    }

    return null;
  };

  _proto.set = function set(key, value) {
    if (this.cache[key] !== undefined) {
      this.cache[key] = value;
    } else {
      this.update(key, value);
    }
  };

  _proto.has = function has(key) {
    return key in this.cache || key in this.backup;
  };

  _proto.remove = function remove(key) {
    var value = this.cache[key];

    if (value !== undefined) {
      this.size -= 1;
      delete this.cache[key];
    } else {
      value = this.backup[key];
    }

    delete this.backup[key];
    return value || null;
  };

  _proto.clear = function clear() {
    this.size = 0;
    this.cache = Object.create(null);
    this.backup = Object.create(null);
  };

  return SimpleCache;
}();

export { SimpleCache as default };
//# sourceMappingURL=Cache.js.map