import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import ReactDOM from 'react-dom';
/**
 * 计算插件宽高
 * Tips: ReactDOM.render 在无其他 render 任务时会同步执行，有其他 render 时会变成异步方法
 * @param node 实例
 * @param containerWidth 容器宽度（eg: 取值兼容 pc 端容器宽度）
 * @param currentElement 当前实例渲染节点（查找仓颉父容器）
 */

var calculatedPluginSize = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(node, containerWidth, currentElement) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (resolve) {
              var body = window.document.body;
              var root = (currentElement == null ? void 0 : currentElement.closest('div[data-cangjie-content]')) || body.querySelector('div[data-cangjie-content]') || body;
              var div = window.document.createElement('div');
              div.style.width = (typeof containerWidth === 'number' ? containerWidth + "px" : containerWidth) || '';
              root.appendChild(div);
              ReactDOM.render(node, div, function () {
                var target = div.firstElementChild;

                if (!target) {
                  target = div;
                  target.style.display = 'inline';
                }

                var width = target.offsetWidth;
                var height = target.offsetHeight;
                div.remove();
                return resolve({
                  width: width,
                  height: height
                });
              });
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function calculatedPluginSize(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

export default calculatedPluginSize;
//# sourceMappingURL=calculatedPluginSize.js.map