{"version":3,"sources":["../../../src/utils/measure.ts"],"names":["environment","SimpleCache","CJK_REG","MEASURE_CACHE_SIZE","CJK_REG_GLOBAL","TEXT_SSR_WIDTH","getTextWidthOnServer","text","fontSize","zhChars","match","width","length","height","Measure","container","measurer","measureCache","measureSingleText","font","sz","IS_NODE","parseFloat","measureText","test","cacheKey","cache","get","ensureMeasurer","textContent","style","fontFamily","rect","getBoundingClientRect","measureInfo","set","measureTextWidth","chars","textWidth","i","warmup","batch","tasks","Object","keys","forEach","char","fontFamilies","sizes","size","push","map","task","document","createElement","appendChild","removeChild","bottom","position","visibility","zIndex","whiteSpace","body"],"mappings":"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","sourcesContent":["import { environment } from '@ali/4ever-cangjie';\nimport SimpleCache from './Cache';\n\nexport const CJK_REG = /[\\u4E00-\\u9FA5]/;\nconst MEASURE_CACHE_SIZE = 1000;\nconst CJK_REG_GLOBAL = /[\\u4E00-\\u9FA5]/ig;\nconst TEXT_SSR_WIDTH = {\n  '.': 1.225,\n  ')': 1.38,\n};\n\ninterface MeasureInfo {\n  width: number;\n  height: number;\n}\n\ntype FontSize = string;\n\n/**\n * 供非 Web 端粗略计算字符宽高使用\n * 中文字符（宽 = fontSize, 高 = fontSize）\n * 非中文字符（宽= fontSize / 2, 高 = fontSize）\n */\nexport function getTextWidthOnServer(text: string, fontSize: number) {\n  const zhChars = text.match(CJK_REG_GLOBAL) || [];\n  const width =\n  (zhChars.length + (text.length - zhChars.length) / 2) * fontSize;\n  return {\n    // TEXT_SSR_WIDTH 纯粹为了对齐实际测量结果\n    width: (TEXT_SSR_WIDTH[text] || 1) * width,\n    height: fontSize,\n  };\n}\n\nexport interface WarmupBatch {\n  [key: string /* Char */]: {\n    [key: string /* FontFamily */]: Set<FontSize>;\n  };\n}\n\nclass Measure {\n  private container!: HTMLDivElement;\n  private measurer!: HTMLSpanElement;\n  private readonly measureCache = new SimpleCache<MeasureInfo>(\n    MEASURE_CACHE_SIZE,\n  );\n\n  ensureMeasurer() {\n    if (!this.container) {\n      const container = document.createElement('div');\n      container.style.bottom = '-100px';\n      container.style.position = 'fixed';\n      container.style.visibility = 'hidden';\n      container.style.zIndex = '-999';\n      container.style.whiteSpace = 'nowrap';\n      document.body.appendChild(container);\n      this.container = container;\n    }\n    if (!this.measurer) {\n      const measurer = document.createElement('span');\n      this.container.appendChild(measurer);\n      this.measurer = measurer;\n    }\n  }\n\n  measureSingleText = (text: string, font: string, sz: string): MeasureInfo => {\n    if (environment.IS_NODE) {\n      return getTextWidthOnServer(text, parseFloat(sz));\n    }\n    let measureText = text;\n\n    if (text.length === 1 && CJK_REG.test(text)) {\n      measureText = '中';\n    }\n\n    const cacheKey = measureText + font + sz;\n    const cache = this.measureCache.get(cacheKey);\n    if (cache) {\n      return cache;\n    }\n\n    this.ensureMeasurer();\n    this.measurer.textContent = measureText;\n    this.measurer.style.fontFamily = font || 'unset';\n    this.measurer.style.fontSize = sz || 'unset';\n\n    const rect = this.measurer.getBoundingClientRect();\n    const measureInfo = { width: rect.width, height: rect.height };\n    this.measureCache.set(cacheKey, measureInfo);\n\n    return measureInfo;\n  };\n\n  measureTextWidth = (chars: string, font: string, sz: string): number => {\n    let textWidth = 0;\n    // TODO: 不会有性能问题么，不能一次性测量完？\n    for (let i = chars.length - 1; i >= 0; i--) {\n      const measureInfo = this.measureSingleText(chars[i], font, sz);\n      textWidth += measureInfo.width;\n    }\n    return textWidth;\n  };\n\n  warmup = (batch: WarmupBatch) => {\n    const tasks: Array<{ char: string; fontFamily: string; size: string }> = [];\n    Object.keys(batch).forEach((char) => {\n      const fontFamilies = batch[char];\n      Object.keys(fontFamilies).forEach((fontFamily) => {\n        const sizes = fontFamilies[fontFamily];\n        sizes.forEach((size) => {\n          tasks.push({ char, fontFamily, size });\n        });\n      });\n    });\n\n    this.ensureMeasurer();\n    const { container } = this;\n    tasks\n      .map((task) => {\n        const measurer = document.createElement('span');\n        measurer.textContent = task.char;\n        measurer.style.fontFamily = task.fontFamily || 'unset';\n        measurer.style.fontSize = task.size || 'unset';\n        container.appendChild(measurer);\n        return { task, measurer };\n      })\n      .map(({ task, measurer }) => {\n        const cacheKey = task.char + task.fontFamily + task.size;\n        const rect = measurer.getBoundingClientRect();\n        const measureInfo = { width: rect.width, height: rect.height };\n        this.measureCache.set(cacheKey, measureInfo);\n        return measurer;\n      })\n      .forEach((measurer) => container.removeChild(measurer));\n  };\n}\n\nexport default Measure;\n"],"file":"measure.js"}