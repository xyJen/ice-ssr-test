{"version":3,"sources":["../../../src/utils/fontRenderFallback.ts"],"names":["FONTS_INFO","FALLBACK_STRATEGIES_CN","SimpleMapCache","FontRenderFallback","STRATEGY_ARRAY","FALLBACK_INDEX_MAP","Map","CACHE_MAP","simpleCache","simpleBTBDCache","init","getCommonFallbackStrategy","generic","getFallbackStrategy","font","family","chinesefamily","fallback","commonFallback","fallbackStrategy","length","Array","from","Set","filter","item","cacheStrategy","strategy","btbd","key","toString","cached","undefined","push","fontFamily","index","updateFallbackIndex","keys","fallbackIndex","forEach","set","weights","charSets","postScriptName","cachedIndex","name","i","fontName","charset","nameWithWeights","j","weight","nameWithWeight","newStrategy","getSupportFonts","map","getFontBTBD","cachedValue","get","fonts","split","add","getFontFallback","mark","data","ascii","eastAsia","cs","hAnsi","hint","cacheKey","fontsArray","f","fallbackFonts","concat","fontRenderFallback"],"mappings":"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","sourcesContent":["import { Mark } from '@ali/4ever-cangjie';\nimport { FONTS_INFO, FALLBACK_STRATEGIES_CN, FontsInfo } from '../theme/fonts';\nimport SimpleMapCache from './simpleMapCache';\n\n\ninterface Strategy {\n  fontFamily: string[];\n  btbd?: number;\n}\n\nclass FontRenderFallback {\n  /**\n   * 存储降级策略\n   */\n  private STRATEGY_ARRAY: Strategy[] = [];\n\n  /**\n   * 字体名和降级策略的索引\n   */\n  private FALLBACK_INDEX_MAP: Map<string, number> = new Map();\n\n  private CACHE_MAP: Record<string, number> = {};\n\n  /**\n   * 简易缓存，减少计算消耗\n   */\n  private simpleCache: SimpleMapCache<string> = new SimpleMapCache();\n\n  private simpleBTBDCache: SimpleMapCache<number> = new SimpleMapCache();\n\n  constructor() {\n    this.init();\n  }\n\n  private getCommonFallbackStrategy(generic: string): string[] {\n    return FALLBACK_STRATEGIES_CN[generic] || [];\n  }\n\n  private getFallbackStrategy(font: FontsInfo) {\n    const { family, generic, chinesefamily, fallback } = font;\n    // 只对中文做通用降级\n    const commonFallback = chinesefamily ? this.getCommonFallbackStrategy(generic) : [];\n\n    // 优先级：font.fallback > family > chinesefamily > commonFallback > generic\n    const fallbackStrategy = fallback?.length ? [...fallback] : [family, chinesefamily || '', ...commonFallback, generic];\n\n    // 过滤下\n    return Array.from(new Set(fallbackStrategy.filter((item) => item)));\n  }\n\n  private cacheStrategy(strategy: string[], btbd?: number) {\n    const key = strategy.toString();\n    const cached = this.CACHE_MAP[key];\n    if (cached !== undefined) return cached;\n\n    this.STRATEGY_ARRAY.push({\n      fontFamily: strategy,\n      btbd,\n    });\n    const index = this.STRATEGY_ARRAY.length - 1;\n    this.CACHE_MAP[key] = index;\n    return index;\n  }\n\n  private updateFallbackIndex(keys: Array<string | undefined>, fallbackIndex: number) {\n    keys.forEach((key) => {\n      if (key) {\n        this.FALLBACK_INDEX_MAP.set(key, fallbackIndex);\n      }\n    });\n  }\n\n  private init() {\n    FONTS_INFO.forEach((font) => {\n      const { family, chinesefamily, weights = [], charSets = [], postScriptName, btbd } = font;\n      const fallbackStrategy = this.getFallbackStrategy(font);\n      let cachedIndex = this.cacheStrategy(fallbackStrategy, btbd);\n\n      // 添加英文和中文索引\n      this.updateFallbackIndex([family, chinesefamily], cachedIndex);\n      // 中英文都支持字符集和字重（例如 仿宋_GB2312 或 微软雅黑 bold ）\n      [family, chinesefamily].forEach((name) => {\n        for (let i = 0; i <= charSets.length; i++) {\n          let fontName = name;\n          // 拼接 charset\n          const charset = charSets[i];\n          if (charset) {\n            fontName += `_${charset}`;\n          }\n          if (!weights.length) {\n            this.updateFallbackIndex([fontName], cachedIndex);\n            continue;\n          }\n\n          const nameWithWeights: string[] = [];\n          for (let j = 0; j < weights.length; j++) {\n            // 拼接 weight\n            const weight = weights[j];\n            const nameWithWeight = `${fontName} ${weight}`;\n            if (postScriptName) {\n              // Chrome 不识别 family Light，需要换成 postScriptName-light\n              const newStrategy = [`${postScriptName}-${weight}`, ...fallbackStrategy];\n              cachedIndex = this.cacheStrategy(newStrategy, btbd);\n              this.updateFallbackIndex([nameWithWeight], cachedIndex);\n              continue;\n            } else {\n              nameWithWeights.push(nameWithWeight);\n            }\n          }\n          this.updateFallbackIndex(nameWithWeights, cachedIndex);\n        }\n      });\n    });\n  }\n\n  getSupportFonts() {\n    return Array.from(this.FALLBACK_INDEX_MAP).map((item) => item[0]);\n  }\n\n  getFontBTBD(font?: string) {\n    if (!font) return 1;\n    // 先走缓存逻辑\n    const cachedValue = this.simpleBTBDCache.get(font);\n    if (cachedValue) return cachedValue;\n\n    const fonts = font.split(',');\n    let btbd = 1;\n    for (let i = 0; i < fonts.length; i++) {\n      const fallbackIndex = this.FALLBACK_INDEX_MAP.get(fonts[i]);\n      if (fallbackIndex !== undefined) {\n        btbd = this.STRATEGY_ARRAY[fallbackIndex].btbd || 1;\n        break;\n      }\n    }\n\n    this.simpleBTBDCache.add(font, btbd);\n    return btbd;\n  }\n\n  getFontFallback(mark: Mark) {\n    const { ascii, eastAsia, cs, hAnsi, hint } = mark.data;\n    // 先走缓存逻辑\n    const cacheKey = `${ascii}_${eastAsia}_${cs}_${hAnsi}_${hint}`;\n    let cachedValue = this.simpleCache.get(cacheKey);\n    if (cachedValue) return cachedValue;\n\n    // 只对中英文降级，暂不处理 cs 和 hAnsi\n    let fonts: string[] = [ascii, eastAsia];\n    if (mark.data[hint]) {\n      // 优先跟踪 hint\n      fonts = [mark.data[hint]];\n    }\n\n    const fontsArray = Array.from(new Set(fonts.filter((f) => f)));\n    let fallbackFonts: string[] = [];\n\n    for (let i = 0; i < fontsArray.length; i++) {\n      const font = fontsArray[i];\n      const fallbackIndex = this.FALLBACK_INDEX_MAP.get(font);\n\n      if (fallbackIndex === undefined) {\n        fallbackFonts.push(font);\n        continue;\n      }\n\n      const strategy = this.STRATEGY_ARRAY[fallbackIndex];\n      fallbackFonts = fallbackFonts.concat([font, ...strategy.fontFamily]);\n    }\n    fallbackFonts.push(cs, hAnsi);\n    cachedValue = Array.from(new Set(fallbackFonts.filter((f) => f))).toString();\n    this.simpleCache.add(cacheKey, cachedValue);\n    return cachedValue;\n  }\n}\n\nconst fontRenderFallback = new FontRenderFallback();\n\nexport default fontRenderFallback;\n"],"file":"fontRenderFallback.js"}