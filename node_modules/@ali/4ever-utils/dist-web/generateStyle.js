function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

export function bdrToStyle(bdr, enableNilBdr) {
  if (enableNilBdr === void 0) {
    enableNilBdr = true;
  }

  var style = {};

  for (var _iterator = _createForOfIteratorHelperLoose(['top', 'bottom', 'left', 'right']), _step; !(_step = _iterator()).done;) {
    var key = _step.value;

    if (key in bdr && bdr[key]) {
      var styleKey = "border" + key.charAt(0).toUpperCase() + key.slice(1);
      var val = bdr[key].val === 'dashed' ? 'dashed' : 'solid';
      var color = isValidColor(bdr[key].color) && bdr[key].color ? bdr[key].color : '';
      var width = bdr[key].sz > 1 ? bdr[key].sz + "px" : '1px';

      if (bdr[key].sz === 0 && enableNilBdr) {
        width = '0';
      }

      style[styleKey] = val + " " + color + " " + width;
    }
  }

  return style;
} // table cell左右border占据的空间会从padding中挤占出来

export var bdrToPaddingStyle = function bdrToPaddingStyle(bdr, originalPadding) {
  var paddingObj = {
    paddingLeft: originalPadding.left,
    paddingRight: originalPadding.right,
    paddingTop: originalPadding.top,
    paddingBottom: originalPadding.bottom
  };

  if (bdr && bdr.left && +bdr.left.sz > 0) {
    paddingObj.paddingLeft = originalPadding.left - +bdr.left.sz;
  }

  if (bdr && bdr.right && +bdr.right.sz > 0) {
    paddingObj.paddingRight = originalPadding.right - +bdr.right.sz;
  }

  return paddingObj;
};

function isValidColor(color) {
  if (typeof color !== 'string') {
    return false;
  }

  if (color.indexOf('#') === 0 || color.indexOf('rgb') === 0) {
    return true;
  }

  return false;
}
//# sourceMappingURL=generateStyle.js.map