export function calcRotationObj(w, h, r) {
  r = r * Math.PI / 180;
  var diag = Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2));
  var tlX = -(Math.cos(Math.atan(h / w) + r) * diag / 2);
  var tlY = -(Math.sin(Math.atan(h / w) + r) * diag / 2);
  var trX = Math.cos(Math.atan(h / w) - r) * diag / 2;
  var trY = -(Math.sin(Math.atan(h / w) - r) * diag / 2);
  var blX = -trX;
  var blY = -trY;
  var brX = -tlX;
  var brY = -tlY;
  var width = Math.round(Math.max(Math.abs(tlX), Math.abs(trX)) * 2);
  var height = Math.round(Math.max(Math.abs(tlY), Math.abs(trY)) * 2);
  var translateX = -Math.round(Math.min(tlX, trX, blX, brX) + w / 2);
  var translateY = -Math.round(Math.min(tlY, trY, blY, brY) + h / 2);
  return {
    rWidth: width,
    rHeight: height,
    translateX: translateX,
    translateY: translateY,
    tlX: tlX,
    tlY: tlY,
    trX: trX,
    trY: trY
  };
}
export function calcXAfterRotation(x, y, rotation, translateX) {
  if (translateX === void 0) {
    translateX = 0;
  }

  return x * Math.cos(rotation / 180 * Math.PI) - y * Math.sin(rotation / 180 * Math.PI) + translateX;
}
export function calcYAfterRotation(x, y, rotation, translateY) {
  if (translateY === void 0) {
    translateY = 0;
  }

  return x * Math.sin(rotation / 180 * Math.PI) + y * Math.cos(rotation / 180 * Math.PI) + translateY;
}
export function normalizeAngle(angle, round) {
  if (round === void 0) {
    round = false;
  }

  // normalize to 0 - 360
  if (round) {
    angle = Math.round(angle);
  }

  return angle + Math.ceil(-angle / 360) * 360;
}
//# sourceMappingURL=calcRotation.js.map