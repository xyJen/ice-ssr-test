{"version":3,"sources":["../../src/regenerateUuid.ts"],"names":["Block","omitEmptyObj","uniqueId","omit","regenerateUuid","fragment","generateUuid","data","userData","uids","Object","keys","nextData","mapDescendants","node","isBlock","uuid","oldUuid","newUuid","refblockUUID","forEach","uid","set"],"mappings":";AAAA,SAAmBA,KAAnB,EAA0BC,YAA1B,QAA8C,oBAA9C;AACA,SAASC,QAAT;AACA,SAASC,IAAT,QAAqB,WAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CACLC,QADK,EAELC,YAFK,EAGL;AAAA,MADAA,YACA;AADAA,IAAAA,YACA,GAD6BJ,QAC7B;AAAA;;AAAA,aAC0BG,QAAQ,CAACE,IAAT,IAAiB,EAD3C;AAAA,2BACQC,QADR;AAAA,MACQA,QADR,8BACmB,EADnB;;AAEA,MAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYH,QAAZ,CAAb;AACA,MAAII,QAAQ,GAAGJ,QAAf;AACAH,EAAAA,QAAQ,GAAGA,QAAQ,CAACQ,cAAT,CAAwB,UAACC,IAAD,EAAU;AAC3C,QAAId,KAAK,CAACe,OAAN,CAAcD,IAAd,KAAuBA,IAAI,CAACP,IAAL,CAAUS,IAArC,EAA2C;AACzC;AACA,UAAMC,OAAO,GAAGH,IAAI,CAACP,IAAL,CAAUS,IAA1B;AACA,UAAME,OAAO,GAAGJ,IAAI,CAACP,IAAL,CAAUY,YAAV,IAA0Bb,YAAY,EAAtD,CAHyC,CAIzC;;AACA,UAAIW,OAAJ,EAAa;AACXR,QAAAA,IAAI,CAACW,OAAL,CAAa,UAACC,GAAD,EAAS;AAAA;;AACpBT,UAAAA,QAAQ,gBACHA,QADG,6BAELS,GAFK,iBAGDlB,IAAI,CAACS,QAAQ,CAACS,GAAD,CAAT,EAAgBJ,OAAhB,CAHH,6BAIHC,OAJG,IAIOV,QAAQ,CAACa,GAAD,CAAR,CAAcJ,OAAd,CAJP,0BAAR;AAOD,SARD;AASD;;AACDH,MAAAA,IAAI,GAAGA,IAAI,CAACQ,GAAL,CAAS,MAAT,eAAsBR,IAAI,CAACP,IAA3B;AAAiCS,QAAAA,IAAI,EAAEE;AAAvC,SAAP;AACD;;AACD,WAAOJ,IAAP;AACD,GApBU,CAAX;;AAqBA,MAAIF,QAAQ,KAAKJ,QAAjB,EAA2B;AACzB,WAAOH,QAAQ,CAACiB,GAAT,CAAa,MAAb,EAAqBrB,YAAY,cACnCI,QAAQ,CAACE,IAD0B;AAEtCC,MAAAA,QAAQ,EAAEI;AAF4B,OAAjC,CAAP;AAID;;AACD,SAAOP,QAAP;AACD","sourcesContent":["import { Document, Block, omitEmptyObj } from '@ali/4ever-cangjie';\nimport { uniqueId } from './utils/uniqueId';\nimport { omit } from 'lodash-es';\n\n/**\n * 重新生成 fragment 中的 uuid，并替换用户数据\n * @param fragment \n * @param generateUuid \n * @returns \n */\nexport function regenerateUuid (\n  fragment: Document,\n  generateUuid: () => string = uniqueId,\n) {\n  const { userData = {} } = fragment.data || {};\n  const uids = Object.keys(userData);\n  let nextData = userData;\n  fragment = fragment.mapDescendants((node) => {\n    if (Block.isBlock(node) && node.data.uuid) {\n      // 重新生成 uuid\n      const oldUuid = node.data.uuid;\n      const newUuid = node.data.refblockUUID || generateUuid();\n      // 修改 userData 中的 uuid\n      if (oldUuid) {\n        uids.forEach((uid) => {\n          nextData = {\n            ...nextData,\n            [uid]: {\n              ...omit(nextData[uid], oldUuid),\n              [newUuid]: userData[uid][oldUuid],\n            }\n          }\n        });\n      }\n      node = node.set('data', { ...node.data, uuid: newUuid });\n    }\n    return node;\n  });\n  if (nextData !== userData) {\n    return fragment.set('data', omitEmptyObj({\n      ...fragment.data,\n      userData: nextData,\n    }))\n  }\n  return fragment;\n}"],"file":"regenerateUuid.js"}