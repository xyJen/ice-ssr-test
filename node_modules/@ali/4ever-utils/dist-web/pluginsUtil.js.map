{"version":3,"sources":["../../src/pluginsUtil.ts"],"names":["combinePluginFactory","factory1","factory2","createCombinedPlugin","config","rest","plugin1","plugin2","combinePluginsFactory","plugins1","plugins2","plugins","Object","keys","forEach","key"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,oBAAT,CACLC,QADK,EAELC,QAFK,EAG4B;AACjC,WAASC,oBAAT,CAA8BC,MAA9B,EAA+D;AAAA,sCAAbC,IAAa;AAAbA,MAAAA,IAAa;AAAA;;AAC7D;AACA,QAAMC,OAAO,GAAGL,QAAQ,MAAR,UAASG,MAAT,SAAoBC,IAApB,EAAhB,CAF6D,CAG7D;;AACA,QAAME,OAAO,GAAGL,QAAQ,MAAR,UAASE,MAAT,SAAoBC,IAApB,EAAhB;AACA,wBACKC,OADL,EAEKC,OAFL;AAID;;AACD,SAAOJ,oBAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,qBAAT,CACLC,QADK,EAELC,QAFK,EAG4C;AACjD,MAAMC,OAAwD,GAAG,EAAjE;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,OAAtB,CAA8B,UAACC,GAAD,EAAS;AACrC,QAAMd,QAAQ,GAAGQ,QAAQ,CAACM,GAAD,CAAzB;AACA,QAAMb,QAAQ,GAAGQ,QAAQ,CAACK,GAAD,CAAzB,CAFqC,CAIrC;;AACA,QAAIb,QAAQ,IAAID,QAAQ,KAAKC,QAA7B,EAAuC;AACrC;AACAS,MAAAA,OAAO,CAACI,GAAD,CAAP,GAAef,oBAAoB,CAACC,QAAD,EAAWC,QAAX,CAAnC;AACD,KAHD,MAGO;AACL;AACA;AACAS,MAAAA,OAAO,CAACI,GAAD,CAAP,GAAed,QAAf;AACD;AACF,GAbD;AAeAW,EAAAA,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,OAAtB,CAA8B,UAACC,GAAD,EAAS;AACrC,QAAMd,QAAQ,GAAGQ,QAAQ,CAACM,GAAD,CAAzB;AACA,QAAMb,QAAQ,GAAGQ,QAAQ,CAACK,GAAD,CAAzB,CAFqC,CAIrC;;AACA,QAAI,CAACd,QAAL,EAAe;AACb;AACA;AACAU,MAAAA,OAAO,CAACI,GAAD,CAAP,GAAeb,QAAf;AACD;AACF,GAVD;AAYA,SAAOS,OAAP;AACD","sourcesContent":["export type PluginFactory<T, R> = (config: T) => R;\n\n/**\n * 合并两个 PluginFactory\n * @param factory1\n * @param factory2\n */\nexport function combinePluginFactory<C1, R1, C2, R2>(\n  factory1: PluginFactory<C1, R1>,\n  factory2: PluginFactory<C2, R2>,\n): PluginFactory<C1 & C2, R1 & R2> {\n  function createCombinedPlugin(config: C1 & C2, ...rest: any[]) {\n    // @ts-ignore\n    const plugin1 = factory1(config, ...rest);\n    // @ts-ignore\n    const plugin2 = factory2(config, ...rest);\n    return {\n      ...plugin1,\n      ...plugin2,\n    };\n  }\n  return createCombinedPlugin;\n}\n\n/**\n * 合并两组 plugins，两组 plugins 交集的部分会合并，非交集的部分将独立存在\n * @param plugins1\n * @param plugins2\n */\nexport function combinePluginsFactory<C1, R1, C2, R2>(\n  plugins1: Record<string, PluginFactory<C1, R1>>,\n  plugins2: Record<string, PluginFactory<C2, R2>>,\n): Record<string, PluginFactory<C1 & C2, R1 & R2>> {\n  const plugins: Record<string, PluginFactory<C1 & C2, R1 & R2>> = {};\n\n  Object.keys(plugins1).forEach((key) => {\n    const factory1 = plugins1[key];\n    const factory2 = plugins2[key];\n\n    // @ts-ignore\n    if (factory2 && factory1 !== factory2) {\n      // 如果两个 plugins 同时存在一个 key 的插件，则合并\n      plugins[key] = combinePluginFactory(factory1, factory2);\n    } else {\n      // plugin1 独有\n      // @ts-ignore\n      plugins[key] = factory1;\n    }\n  });\n\n  Object.keys(plugins2).forEach((key) => {\n    const factory1 = plugins1[key];\n    const factory2 = plugins2[key];\n\n    // 由于上面 plugin1 已经 combine，所以这里只需要取 plugin2 独有即可\n    if (!factory1) {\n      // plugin2 独有\n      // @ts-ignore\n      plugins[key] = factory2;\n    }\n  });\n\n  return plugins;\n}\n"],"file":"pluginsUtil.js"}