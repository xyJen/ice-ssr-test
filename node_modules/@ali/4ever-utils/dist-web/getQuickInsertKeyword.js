/**
 * 注入 composing 至文本中
 * @param txt 阶段后的文本
 * @param composing
 * @param startOffset 截断的起始位置
 * @param pointOffset composing 位置
 */
function injectComposing(txt, composing, startOffset, pointOffset) {
  var offset = pointOffset - startOffset;

  if (offset < 0 || offset > txt.length) {
    return txt;
  }

  var startTxt = txt.slice(0, offset);
  var endTxt = txt.slice(offset);
  return startTxt + composing + endTxt;
}

export function getKeyword(controller, _ref) {
  var type = _ref.type;
  var _controller$value = controller.value,
      document = _controller$value.document,
      decorations = _controller$value.decorations,
      composing = _controller$value.composing,
      selection = _controller$value.selection;
  var deco = decorations.find(function (item) {
    return item.mark.type === type;
  });

  if (!deco) {
    return '';
  }

  var start = deco.start,
      end = deco.end; // 同一个 text 节点

  if (start.key === end.key) {
    var text = document.getNode(start.key);
    var txt = text ? text.text.slice(start.offset, end.offset) : '';
    var point = selection.anchor; // 若存在 composing，则给文本注入

    if (composing && selection.isCollapsed && point.isTextPoint() && point.key === start.key) {
      txt = injectComposing(txt, composing, start.offset, point.offset);
    }

    return txt;
  } // 目前暂时不存在 Text 被分割的情况


  return '';
}
//# sourceMappingURL=getQuickInsertKeyword.js.map