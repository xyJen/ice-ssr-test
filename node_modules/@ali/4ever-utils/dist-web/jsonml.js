import { jsonMLIsText, jsonMLGetChildren, jsonMLGetTagName, jsonMLGetAttributes, createTextWithString } from '@ali/4ever-cangjie';

// 扩展插件相关的 jsonML helper 方法
function JsonML2textsAndImages(array, texts, images, currParagraph, isTop) {
  if (texts === void 0) {
    texts = [];
  }

  if (images === void 0) {
    images = [];
  }

  if (currParagraph === void 0) {
    currParagraph = -1;
  }

  if (isTop === void 0) {
    isTop = false;
  }

  var childIsTop = array[0] === 'root';

  if (isTop) {
    currParagraph++;
  }

  if (array[0] === 'span' && array[1]['data-type'] === 'leaf') {
    var text = array[2] || '';

    if (!texts[currParagraph]) {
      texts[currParagraph] = text;
    } else {
      texts[currParagraph] += text;
    }
  } else if (array[0] === 'img') {
    // @ts-ignore
    if (array[1] && array[1].src) {
      // @ts-ignore
      images.push(array[1].src);
    }
  }

  if (array[0] !== 'table') {
    var childArray = jsonMLGetChildren(array);

    for (var index in childArray) {
      if (Array.isArray(childArray[index])) {
        var res = JsonML2textsAndImages(childArray[index], texts, images, currParagraph, childIsTop);
        currParagraph = res.currParagraph;
      }
    }
  }

  return {
    texts: texts,
    images: images,
    currParagraph: currParagraph
  };
}

export function jsonMLGetImages(asl) {
  return JsonML2textsAndImages(asl).images;
}
export function jsonMLGetTexts(asl) {
  return JsonML2textsAndImages(asl).texts.filter(function (v) {
    return typeof v === 'string';
  });
}
export function jsonMLIsInline(node) {
  var tagName = jsonMLGetTagName(node);
  return tagName === 'a' || tagName === 'img';
}
export function jsonMLNormalizeChildren(node) {
  var tagName = jsonMLGetTagName(node);
  var attrs = jsonMLGetAttributes(node);
  var children = jsonMLGetChildren(node);
  var normalized = attrs ? [tagName, attrs] : [tagName];
  var isPrevText = false;
  children.forEach(function (child, index) {
    // inline 节点前后添加空文本
    if (!isPrevText && jsonMLIsInline(child)) {
      normalized.push(createTextWithString(''));
    }

    normalized.push(child);
    isPrevText = jsonMLIsText(child);

    if (index === children.length - 1 && jsonMLIsInline(child)) {
      normalized.push(createTextWithString(''));
    }
  });
  return normalized;
} // utils API 向前兼容

export {
/** @deprecated use jsonMLGetImages instead */
jsonMLGetImages as getImages
/** @deprecated use jsonMLGetTexts instead */
, jsonMLGetTexts as getTexts
/** @deprecated use jsonMLIsInline instead */
, jsonMLIsInline as isJsonMLInline
/** @deprecated use jsonMLNormalizeChildren instead */
, jsonMLNormalizeChildren as normalizeJsonMLChildren };
export {
/** @deprecated use jsonMLAppend in cangjie instead */
jsonMLAppend as append
/** @deprecated use jsonMLAppendAt in cangjie instead */
, jsonMLAppendAt as appendAt
/** @deprecated use jsonMLGetAttributes in cangjie instead */
, jsonMLGetAttributes as getAttributes
/** @deprecated use jsonMLGetChildren in cangjie instead */
, jsonMLGetChildren as getChildren
/** @deprecated use jsonMLGetTagName in cangjie instead */
, jsonMLGetTagName as getTagName
/** @deprecated use jsonMLGetDescription in cangjie instead */
, jsonMLGetDescription as getDescription
/** @deprecated use jsonMLGetLastChild in cangjie instead */
, jsonMLGetLastChild as getLastChild
/** @deprecated use jsonMLGetText in cangjie instead */
, jsonMLGetText as getText
/** @deprecated use JsonMLHasAttributes in cangjie instead */
, JsonMLHasAttributes as hasAttributes
/** @deprecated use jsonMLIsEmptyContent in cangjie instead */
, jsonMLIsEmptyContent as isEmptyContent
/** @deprecated use jsonMLIsText in cangjie instead */
, jsonMLIsText as isJsonMLText } from '@ali/4ever-cangjie';
//# sourceMappingURL=jsonml.js.map