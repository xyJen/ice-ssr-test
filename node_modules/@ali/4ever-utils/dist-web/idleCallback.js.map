{"version":3,"sources":["../../src/idleCallback.ts"],"names":["isNativeRequestIdleCallback","window","requestIdleCallback","now","Date","IdleDeadline","initTime","timeRemaining","Math","max","requestIdleCallbackShim","callback","deadline","setTimeout","cancelIdleCallbackShim","handle","clearTimeout","cancelIdleCallback"],"mappings":";AAKA,IAAMA,2BAA2B,GAC/B,OAAOC,MAAP,KAAkB,WAAlB,IACA,OAAQA,MAAD,CAAmCC,mBAA1C,KAAkE,UAFpE;;AAKA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAc;AACxB,SAAOC,IAAI,CAACD,GAAL,EAAP;AACD,CAFD;;IAIME,Y;AAGJ,wBAAYC,QAAZ,EAAsB;AAAA,SAFdA,QAEc;AACpB,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;;;SAMMC,a,GAAP,yBAA+B;AAC7B,WAAOC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,MAAMN,GAAG,KAAK,KAAKG,QAAnB,CAAZ,CAAP;AACD,G;;;;wBANyB;AACxB,aAAO,KAAP;AACD;;;;;;AAOH,IAAMI,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,QAAD,EAAgC;AAC9D,MAAMC,QAAQ,GAAG,IAAIP,YAAJ,CAAiBF,GAAG,EAApB,CAAjB;AAGA;AACA,SAAOF,MAAM,CAACY,UAAP,CAAkB;AAAA,WAAMF,QAAQ,CAACC,QAAD,CAAd;AAAA,GAAlB,EAA4C,CAA5C,CAAP;AACD,CAND;;AAQA,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,MAAD,EAAkB;AAE/Cd,EAAAA,MAAM,CAACe,YAAP,CAAoBD,MAApB;AACD,CAHD;;AAKA,IAAMb,mBAAmB,GAAGF,2BAA2B,GAAIC,MAAD,CAAmCC,mBAAtC,GAA4DQ,uBAAnH;AACA,IAAMO,kBAAkB,GAAGjB,2BAA2B,GAAIC,MAAD,CAAmCgB,kBAAtC,GAA2DH,sBAAjH;AAEA,SACEZ,mBADF,EAEEe,kBAFF","sourcesContent":["type WindowWithIdleCallback = (typeof window) & {\n  requestIdleCallback?: Function;\n  cancelIdleCallback?: Function;\n}\n\nconst isNativeRequestIdleCallback = (\n  typeof window !== 'undefined' &&\n  typeof (window as WindowWithIdleCallback).requestIdleCallback === 'function'\n);\n\nconst now = (): number => {\n  return Date.now();\n};\n\nclass IdleDeadline {\n  private initTime: number;\n\n  constructor(initTime) {\n    this.initTime = initTime;\n  }\n\n  get didTimeout(): boolean {\n    return false;\n  }\n\n  public timeRemaining(): number {\n    return Math.max(0, 50 - (now() - this.initTime));\n  }\n}\n\nconst requestIdleCallbackShim = (callback: Function): number => {\n  const deadline = new IdleDeadline(now());\n\n  console.assert(!window, 'You should not invoke requestIdleCallback out of browser.')\n  // * Push callback into task queue.\n  return window.setTimeout(() => callback(deadline), 0);\n};\n\nconst cancelIdleCallbackShim = (handle): void => {\n  console.assert(!window, 'You should not invoke cancelIdleCallback out of browser.')\n  window.clearTimeout(handle);\n};\n\nconst requestIdleCallback = isNativeRequestIdleCallback ? (window as WindowWithIdleCallback).requestIdleCallback : requestIdleCallbackShim;\nconst cancelIdleCallback = isNativeRequestIdleCallback ? (window as WindowWithIdleCallback).cancelIdleCallback : cancelIdleCallbackShim;\n\nexport {\n  requestIdleCallback,\n  cancelIdleCallback,\n}\n"],"file":"idleCallback.js"}