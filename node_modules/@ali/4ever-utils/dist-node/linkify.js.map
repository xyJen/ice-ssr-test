{"version":3,"sources":["../../src/linkify.ts"],"names":["createLinkify","protocolAllowList","linkify","fuzzyLink","filter","protocol","includes","forEach","add","orgin_src_domain","re","src_domain","new_domain","src_xn","src_pseudo_letter","updateRegex","updateSrc","origin_src_ZPCc","src_ZPCc","new_src_ZPCc","instance","pre","cur","Object","keys","name","rx","RegExp","source","split","join","flags","list","Array","isArray","sort","reduce","a","b","matchesLink","text","matches","match","filtered","idx","beforeIndex","lastIndex","afterIndex","length","index","current","slice","url","from","map","c","test"],"mappings":"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","sourcesContent":["import Linkify from 'linkify-it';\nimport { memoize } from 'lodash-es';\n\nfunction createLinkify(protocolAllowList = ['dingtalk:']) {\n  const linkify = Linkify({ fuzzyLink: false });\n  protocolAllowList\n    .filter((protocol) => !['http:', 'https:'].includes(protocol))\n    .forEach((protocol) => {\n      linkify.add(protocol, 'http:');\n    });\n\n  // HACK: 支持 domain 识别下划线, linkify 这边有对应的 pr,如果他合并了，可以直接更新\n  // https://github.com/markdown-it/linkify-it/issues/95\n  const orgin_src_domain = linkify.re.src_domain as unknown as string;\n  const new_domain = '(?:' +\n    linkify.re.src_xn +\n    '|' +\n    '(?:' + linkify.re.src_pseudo_letter + ')' +\n    '|' +\n    '(?:' + linkify.re.src_pseudo_letter + '(?:-|_|' + linkify.re.src_pseudo_letter + '){0,61}' + linkify.re.src_pseudo_letter + ')' + ')';\n\n  updateRegex(linkify, orgin_src_domain, new_domain);\n  // 非 fuzzy 状态下，会使用 str_xxx 进行拼接(性能消耗), 所以也需要替换\n  updateSrc(linkify, orgin_src_domain, new_domain);\n\n  // HACK: 中文字符后紧接链接也可以识别，之后可尝试向 linkify-it 提 MR 支持配置\n  const origin_src_ZPCc = linkify.re.src_ZPCc as unknown as string;;\n  const new_src_ZPCc = `${linkify.re.src_ZPCc}|[\\u4e00-\\u9fa5]`;\n  updateRegex(linkify, origin_src_ZPCc, new_src_ZPCc);\n\n  return linkify;\n}\n\nfunction updateRegex(instance: Linkify.LinkifyIt, pre: string, cur: string) {\n  Object.keys(instance.re).forEach((name) => {\n    const rx = instance.re[name];\n    if (rx instanceof RegExp) {\n      // @ts-ignore\n      const source = rx.source\n        .split(pre)\n        .join(cur);\n      instance.re[name] = RegExp(source, rx.flags);\n    }\n  });\n}\n\nfunction updateSrc(instance: Linkify.LinkifyIt, pre: string, cur: string) {\n  Object.keys(instance.re).forEach((name) => {\n    const rx = instance.re[name] as any;\n    if (typeof rx === 'string') {\n      const source = rx.split(pre).join(cur);\n      // @ts-ignore\n      instance.re[name] = source;\n    }\n  });\n}\n\n\nexport default memoize(createLinkify, (list) => {\n  if (Array.isArray(list)) {\n    return list.sort().reduce((a, b) => a + b, '');\n  }\n  return list;\n})\n\n/**\n * 检查字符串是否包含链接（排除 URL 包含在 md 链接、图片语法内的情况）\n * @param linkify\n * @param text 待检查的字符串\n * @returns 若不包含链接，则返回 null，否则返回符合条件的 LinkifyIt.Match[]\n */\nexport function matchesLink(linkify: Linkify.LinkifyIt, text: string) {\n  const matches = linkify.match(text);\n  if (!matches) {\n    return matches;\n  }\n  // 对每个匹配为 URL 的字符串，向前后扩展到相邻的 URL，然后检查是否在链接、图片 markdown 语法中\n  // 若匹配，则不转为 Link 元素\n  const filtered = matches.filter((match, idx) => {\n    const beforeIndex = idx > 0 ? matches[idx - 1].lastIndex + 1 : 0;\n    const afterIndex = idx < matches.length - 1 ? matches[idx + 1].index : text.length;\n    const current = text.slice(beforeIndex, afterIndex);\n    // linkify 的结果中 URL 有问题，可能包含 ()[]{} 且括号非成对出现\n    // 括号不成对出现会导致正则对象创建失败，需要转义\n    const url = Array.from(match.text).map((c) => Array.from('/|?+.-[](){}').includes(c) ? `\\\\${c}` : c).join('');\n    try {\n      return !new RegExp(`\\\\[([^\\\\[\\\\]]*)\\\\]\\\\(${url}( \"(\\\\S\\\\s)?\\\\S+(\\\\s\\\\S)?\")?\\\\)`).test(current);\n    } catch {\n      return true;\n    }\n  });\n\n  return filtered.length > 0 ? filtered : null;\n}"],"file":"linkify.js"}