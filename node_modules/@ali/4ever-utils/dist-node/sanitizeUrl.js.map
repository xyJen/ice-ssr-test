{"version":3,"sources":["../../src/sanitizeUrl.ts"],"names":["defaultProtocolAllowList","isURLProtocolValid","url","protocolAllowList","lowerCaseURL","toLowerCase","some","protocol","startsWith","indexOf","sanitizeUrl","protocolList","includes","push"],"mappings":";;;;;;AAAA;AACA,MAAMA,wBAAwB,GAAG,CAC/B,OAD+B,EAE/B,QAF+B,EAG/B,OAH+B,EAI/B,WAJ+B,EAK/B,MAL+B,EAM/B,MAN+B,EAO/B,SAP+B,EAQ/B,MAR+B,EAS/B,OAT+B,EAU/B,UAV+B,EAW/B,UAX+B,EAY/B,UAZ+B,CAAjC;;AAeA,SAASC,kBAAT,CAA4BC,GAA5B,EAAyCC,iBAAzC,EAAsE;AACpE,QAAMC,YAAY,GAAGF,GAAG,CAACG,WAAJ,EAArB;;AACA,MAAIF,iBAAiB,CAACG,IAAlB,CAAuBC,QAAQ,IAAIH,YAAY,CAACI,UAAb,CAAwBD,QAAxB,CAAnC,CAAJ,EAA2E;AACzE,WAAO,IAAP;AACD;;AACD,MAAIH,YAAY,CAACI,UAAb,CAAwB,IAAxB,KAAiCJ,YAAY,CAACI,UAAb,CAAwB,GAAxB,CAArC,EAAmE;AACjE,WAAO,IAAP;AACD;;AACD,MAAIJ,YAAY,CAACK,OAAb,CAAqB,GAArB,MAA8B,CAAC,CAAnC,EAAsC;AACpC,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,C,CAED;AACA;AACA;;;AACe,SAASC,WAAT,CAAqBR,GAArB,EAA4CC,iBAAiB,GAAGH,wBAAhE,EAA0F;AACvG,QAAMW,YAAY,GAAG,CAAC,GAAGR,iBAAJ,CAArB;;AACA,MAAI,CAACA,iBAAiB,CAACS,QAAlB,CAA2B,OAA3B,CAAL,EAA0C;AACxCD,IAAAA,YAAY,CAACE,IAAb,CAAkB,OAAlB;AACD;;AACD,SAAO,OAAOX,GAAP,KAAe,QAAf,IAA2BD,kBAAkB,CAACC,GAAD,EAAMS,YAAN,CAA7C,GAAmET,GAAnE,GAAyE,EAAhF;AACD","sourcesContent":["// 合法协议白名单，只接受业内规范，或阿里系内被广泛接受的协议\nconst defaultProtocolAllowList = [\n  'http:',\n  'https:',\n  'data:',\n  'dingtalk:',\n  'ftp:',\n  'sms:',\n  'taobao:',\n  'tel:',\n  'blob:',\n  'alipays:',\n  'iosamap:',\n  'amapuri:',\n];\n\nfunction isURLProtocolValid(url: string, protocolAllowList: string[]) {\n  const lowerCaseURL = url.toLowerCase();\n  if (protocolAllowList.some(protocol => lowerCaseURL.startsWith(protocol))) {\n    return true;\n  }\n  if (lowerCaseURL.startsWith('./') || lowerCaseURL.startsWith('/')) {\n    return true;\n  }\n  if (lowerCaseURL.indexOf(':') === -1) {\n    return true;\n  }\n  return false;\n}\n\n// 源自语雀\n// 在 Markdown 编辑器里写入 [text]() 后，经过下列步骤，会把 href 解释为 true\n// Markdown => HTML => JsonML\nexport default function sanitizeUrl(url: string | boolean, protocolAllowList = defaultProtocolAllowList) {\n  const protocolList = [...protocolAllowList];\n  if (!protocolAllowList.includes('blob:')) {\n    protocolList.push('blob:');\n  }\n  return typeof url === 'string' && isURLProtocolValid(url, protocolList) ? url : '';\n}\n"],"file":"sanitizeUrl.js"}