"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImages = exports.jsonMLGetImages = jsonMLGetImages;
exports.getTexts = exports.jsonMLGetTexts = jsonMLGetTexts;
exports.isJsonMLInline = exports.jsonMLIsInline = jsonMLIsInline;
exports.normalizeJsonMLChildren = exports.jsonMLNormalizeChildren = jsonMLNormalizeChildren;
Object.defineProperty(exports, "append", {
  enumerable: true,
  get: function () {
    return _everCangjie.jsonMLAppend;
  }
});
Object.defineProperty(exports, "appendAt", {
  enumerable: true,
  get: function () {
    return _everCangjie.jsonMLAppendAt;
  }
});
Object.defineProperty(exports, "getAttributes", {
  enumerable: true,
  get: function () {
    return _everCangjie.jsonMLGetAttributes;
  }
});
Object.defineProperty(exports, "getChildren", {
  enumerable: true,
  get: function () {
    return _everCangjie.jsonMLGetChildren;
  }
});
Object.defineProperty(exports, "getTagName", {
  enumerable: true,
  get: function () {
    return _everCangjie.jsonMLGetTagName;
  }
});
Object.defineProperty(exports, "getDescription", {
  enumerable: true,
  get: function () {
    return _everCangjie.jsonMLGetDescription;
  }
});
Object.defineProperty(exports, "getLastChild", {
  enumerable: true,
  get: function () {
    return _everCangjie.jsonMLGetLastChild;
  }
});
Object.defineProperty(exports, "getText", {
  enumerable: true,
  get: function () {
    return _everCangjie.jsonMLGetText;
  }
});
Object.defineProperty(exports, "hasAttributes", {
  enumerable: true,
  get: function () {
    return _everCangjie.JsonMLHasAttributes;
  }
});
Object.defineProperty(exports, "isEmptyContent", {
  enumerable: true,
  get: function () {
    return _everCangjie.jsonMLIsEmptyContent;
  }
});
Object.defineProperty(exports, "isJsonMLText", {
  enumerable: true,
  get: function () {
    return _everCangjie.jsonMLIsText;
  }
});

var _everCangjie = require("@ali/4ever-cangjie");

// 扩展插件相关的 jsonML helper 方法
function JsonML2textsAndImages(array, texts = [], images = [], currParagraph = -1, isTop = false) {
  const childIsTop = array[0] === 'root';

  if (isTop) {
    currParagraph++;
  }

  if (array[0] === 'span' && array[1]['data-type'] === 'leaf') {
    const text = array[2] || '';

    if (!texts[currParagraph]) {
      texts[currParagraph] = text;
    } else {
      texts[currParagraph] += text;
    }
  } else if (array[0] === 'img') {
    // @ts-ignore
    if (array[1] && array[1].src) {
      // @ts-ignore
      images.push(array[1].src);
    }
  }

  if (array[0] !== 'table') {
    const childArray = (0, _everCangjie.jsonMLGetChildren)(array);

    for (const index in childArray) {
      if (Array.isArray(childArray[index])) {
        const res = JsonML2textsAndImages(childArray[index], texts, images, currParagraph, childIsTop);
        currParagraph = res.currParagraph;
      }
    }
  }

  return {
    texts,
    images,
    currParagraph
  };
}

function jsonMLGetImages(asl) {
  return JsonML2textsAndImages(asl).images;
}

function jsonMLGetTexts(asl) {
  return JsonML2textsAndImages(asl).texts.filter(v => typeof v === 'string');
}

function jsonMLIsInline(node) {
  const tagName = (0, _everCangjie.jsonMLGetTagName)(node);
  return tagName === 'a' || tagName === 'img';
}

function jsonMLNormalizeChildren(node) {
  const tagName = (0, _everCangjie.jsonMLGetTagName)(node);
  const attrs = (0, _everCangjie.jsonMLGetAttributes)(node);
  const children = (0, _everCangjie.jsonMLGetChildren)(node);
  const normalized = attrs ? [tagName, attrs] : [tagName];
  let isPrevText = false;
  children.forEach((child, index) => {
    // inline 节点前后添加空文本
    if (!isPrevText && jsonMLIsInline(child)) {
      normalized.push((0, _everCangjie.createTextWithString)(''));
    }

    normalized.push(child);
    isPrevText = (0, _everCangjie.jsonMLIsText)(child);

    if (index === children.length - 1 && jsonMLIsInline(child)) {
      normalized.push((0, _everCangjie.createTextWithString)(''));
    }
  });
  return normalized;
} // utils API 向前兼容
//# sourceMappingURL=jsonml.js.map