"use strict";

var _sortPlugins = require("../sortPlugins");

describe('test plugin runAfter', () => {
  it('Plugin 排序: 默认排序', () => {
    const a = () => {};

    const b = () => {};

    const c = () => {};

    const d = () => {};

    const e = () => {};

    const input = {
      a,
      b,
      c,
      d,
      e
    };
    const output = ['a', 'b', 'c', 'd', 'e'];
    expect((0, _sortPlugins.sortPlugins)(input).map(i => i.key)).toEqual(output);
  });
  it('Plugin 排序: 普通排序声明', () => {
    const a = () => {};

    const b = () => {};

    const c = () => {};

    const d = () => {};

    const e = () => {};

    a.runAfter = [b];
    b.runAfter = [c];
    c.runAfter = [d];
    d.runAfter = [e];
    let input = {
      a,
      b,
      c,
      d,
      e
    };
    const output = ['e', 'd', 'c', 'b', 'a'];
    expect((0, _sortPlugins.sortPlugins)(input).map(i => i.key)).toEqual(output);
    input = {
      e,
      d,
      c,
      b,
      a
    };
    expect((0, _sortPlugins.sortPlugins)(input).map(i => i.key)).toEqual(output);
    input = {
      d,
      a,
      c,
      e,
      b
    };
    expect((0, _sortPlugins.sortPlugins)(input).map(i => i.key)).toEqual(output);
    input = {
      a,
      d,
      c,
      e,
      b
    };
    expect((0, _sortPlugins.sortPlugins)(input).map(i => i.key)).toEqual(output);
    input = {
      a,
      d,
      c,
      b,
      e
    };
    expect((0, _sortPlugins.sortPlugins)(input).map(i => i.key)).toEqual(output);
  });
  it('Plugin 排序: 多个插件', () => {
    const a = () => {};

    const b = () => {};

    const c = () => {};

    const d = () => {};

    const e = () => {};

    a.runAfter = [b, c];
    c.runAfter = [b, d, e];
    const input = {
      a,
      b,
      c,
      d,
      e
    };
    const output = ['b', 'd', 'e', 'c', 'a'];
    expect((0, _sortPlugins.sortPlugins)(input).map(i => i.key)).toEqual(output);
  });
  it('Plugin 排序: 循环声明（保证先定义的声明）', () => {
    const a = () => {};

    const b = () => {};

    const c = () => {};

    const d = () => {};

    const e = () => {};

    a.runAfter = [b]; // cannot guareente

    b.runAfter = [a];
    c.runAfter = [d, e]; // cannot guareente

    e.runAfter = [a, b, c, d];
    const input = {
      a,
      b,
      c,
      d,
      e
    };
    const output = ['b', 'a', 'd', 'e', 'c'];
    expect((0, _sortPlugins.sortPlugins)(input).map(i => i.key)).toEqual(output);
  });
  it('Plugin 排序: 未知的 plugin', () => {
    const a = () => {};

    const b = () => {};

    const c = () => {};

    const d = () => {};

    const e = () => {};

    a.runAfter = [b, d];
    b.runAfter = [c];
    c.runAfter = [d, e];
    const input = {
      a,
      b,
      c
    };
    const output = ['c', 'b', 'a'];
    expect((0, _sortPlugins.sortPlugins)(input).map(i => i.key)).toEqual(output);
  });
});
//# sourceMappingURL=sortPlugins.test.js.map