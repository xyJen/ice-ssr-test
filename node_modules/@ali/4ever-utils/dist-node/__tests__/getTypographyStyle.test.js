"use strict";

var _theme = require("../theme");

var _spacing = require("../utils/formats/spacing");

var _sz = require("../utils/formats/sz");

var _toUnits = require("../utils/toUnits");

const oldDefaultMark = {
  type: 'sz',
  data: {
    value: 14
  }
};
const oldMark = {
  type: 'sz',
  data: {
    value: 24
  }
};
const newMark = {
  type: 'sz',
  data: {
    value: 24,
    szUnit: 'pt'
  }
};
const minMark = {
  type: 'sz',
  data: {
    value: 2
  }
};
const maxMark = {
  type: 'sz',
  data: {
    value: 2400
  }
};
describe('Test getLineHeightFromSpacing', () => {
  it('Test basic lineHeight', () => {
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 1
    })).toBe('1.7');
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 1.15
    })).toBe('2');
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 1.5
    })).toBe('2.5');
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 2
    })).toBe('3.4');
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 2.5
    })).toBe('4.3');
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 3
    })).toBe('5.1');
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: '1.46666px'
    })).toBe('1.02');
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: '18px'
    })).toBe('1.9124999999999999');
  });
  it('Test other lineHeight', () => {
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 1.2
    })).toBe('2.04');
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 0.06
    })).toBe('1.02');
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 2.1
    })).toBe('3.57');
  });
  it('Test exact lineHeight', () => {
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 1,
      lineRule: 'exact'
    })).toBe('16px');
    expect(_spacing.SpacingUtil.getLineHeightFromSpacing({
      line: 2,
      lineRule: 'exact'
    })).toBe('32px');
  });
});
describe('Test SzUtil.fromMark', () => {
  it('Test mark', () => {
    expect(_sz.SzUtil.fromMark(undefined)).toBe(11);
    expect(_sz.SzUtil.fromMark(oldDefaultMark)).toBe(11);
    expect(_sz.SzUtil.fromMark(oldMark)).toBe(18);
    expect(_sz.SzUtil.fromMark(newMark)).toBe(24); // min max

    expect(_sz.SzUtil.fromMark(minMark)).toBe(5);
    expect(_sz.SzUtil.fromMark(maxMark)).toBe(200);
  });
});
describe('Test SzUtil.toPt', () => {
  it('Test toPt', () => {
    expect(_sz.SzUtil.toPt('14px')).toBe(10.5);
    expect(_sz.SzUtil.toPt('24px')).toBe(18);
    expect(_sz.SzUtil.toPt('14pt')).toBe(14);
    expect(_sz.SzUtil.toPt('2em')).toBe(22);
    expect(_sz.SzUtil.toPx('14px')).toBe(14);
    expect(_sz.SzUtil.toPx('24px')).toBe(24);
    expect(_sz.SzUtil.toPx('14pt')).toBe(18.5);
    expect(_sz.SzUtil.toPx('2em')).toBe(29.5);
  });
  it('Test get invalid sz', () => {
    expect(_sz.SzUtil.toPt(undefined)).toBe(11);
    expect(_sz.SzUtil.toPt(null)).toBe(11);
    expect(_sz.SzUtil.toPt('')).toBe(11);
    expect(_sz.SzUtil.toPx(undefined)).toBe(11);
    expect(_sz.SzUtil.toPx(null)).toBe(11);
    expect(_sz.SzUtil.toPx('')).toBe(11);
  });
});
describe('Test getSpacingLineFromHtml', () => {
  it('Test absolute units', () => {
    expect(_spacing.SpacingUtil.fromHtml('27px')).toBe(1.15);
    expect(_spacing.SpacingUtil.fromHtml('27px', '14pt')).toBe(1);
    expect(_spacing.SpacingUtil.fromHtml('27pt')).toBe(1.5);
    expect(_spacing.SpacingUtil.fromHtml('27pt', '14pt')).toBe(1.15);
  });
  it('Test relative units', () => {
    expect(_spacing.SpacingUtil.fromHtml('200%')).toBe(2);
    expect(_spacing.SpacingUtil.fromHtml('2')).toBe(1.15);
    expect(_spacing.SpacingUtil.fromHtml('2em')).toBe(1.15);
    expect(_spacing.SpacingUtil.fromHtml('200%', '14pt')).toBe(2);
    expect(_spacing.SpacingUtil.fromHtml('2', '14pt')).toBe(1);
    expect(_spacing.SpacingUtil.fromHtml('2em', '14pt')).toBe(1);
  });
  it('Test invalid units', () => {
    expect(_spacing.SpacingUtil.fromHtml('20vw')).toBe(1);
    expect(_spacing.SpacingUtil.fromHtml('xxx')).toBe(1);
    expect(_spacing.SpacingUtil.fromHtml('')).toBe(1);
  });
});
describe('Test SpacingUtil.fromBlock', () => {
  it('before/after', () => {
    const paragraph = {
      data: {
        spacing: {
          before: 32,
          after: 20
        }
      }
    };

    const spacing = _spacing.SpacingUtil.fromBlock(paragraph);

    expect(spacing.before).toBe(32);
    expect(spacing.after).toBe(20);
  });
  it('before/after pt', () => {
    const paragraph = {
      data: {
        spacing: {
          before: '20pt',
          after: '10pt'
        }
      }
    };

    const spacing = _spacing.SpacingUtil.fromBlock(paragraph);

    expect(spacing.before).toBe(_toUnits.unitsConverter.toPX('20pt'));
    expect(spacing.after).toBe(_toUnits.unitsConverter.toPX('10pt'));
  });
  it('before/afterLines', () => {
    const paragraph = {
      data: {
        spacing: {
          beforeLines: 1,
          afterLines: 2
        }
      }
    };

    const spacing = _spacing.SpacingUtil.fromBlock(paragraph);

    expect(spacing.before).toBe(_theme.spacing.defaultLinePitch);
    expect(spacing.after).toBe(_theme.spacing.defaultLinePitch * 2);
  });
  it('before/afterAutospacing', () => {
    const paragraph = {
      data: {
        spacing: {
          beforeAutospacing: true,
          afterAutospacing: true
        }
      }
    };

    const spacing = _spacing.SpacingUtil.fromBlock(paragraph);

    expect(spacing.before).toBe(_theme.spacing.defaultBeforeAutospacing);
    expect(spacing.after).toBe(_theme.spacing.defaultAfterAutospacing);
  });
});
//# sourceMappingURL=getTypographyStyle.test.js.map