"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _linkify = _interopRequireWildcard(require("../linkify"));

const valid = ["My http://example.com site", "http://example.com", "My http://example.com/ site", "http://example.com/", "http://example.com/foo_bar/", "http://user:pass@example.com:8080", "http://user@example.com", "http://user@example.com:8080", "http://user:pass@example.com", "https://www.ibm.com", "http://example.com:8080", "http://example.com/?foo=bar", "http://example.com?foo=bar", "http://example.com/#foo=bar", "http://example.com#foo=bar", "http://a.in", "HTTP://GOOGLE.COM", "http://example.invalid ", "http://example.invalid", "http://inrgess2 ", "http://inrgess2", "http://999      ", "http://999", "http://host-name ", "http://host-name", "http://example.com", "http://lyricstranslate.com/en/someone-you-നിന്നെ-പോലൊരാള്‍.html ", "http://lyricstranslate.com/en/someone-you-നിന്നെ-പോലൊരാള്‍.html", "//localhost", "//test.123", "http://localhost:8000?", "http://localhost:8000", "My ssl https://example.com site", "https://example.com", "My ftp://example.com site", "ftp://example.com", "My ssl //example.com site", "//example.com", "test.example@http://vk.com", "http://vk.com", "text:http://example.com/", "http://example.com/", "(Scoped http://example.com/foo_bar)", "http://example.com/foo_bar", "http://example.com/foo_bar_(wiki)", "http://foo.com/blah_blah_[other]", "http://foo.com/blah_blah_{I'm_king}", "http://foo.com/blah_blah_I'm_king", "http://www.kmart.com/bestway-10'-x-30inch-steel-pro-frame-pool/p-004W007538417001P", "http://foo.com/blah_blah_\"doublequoted\"", "http://foo.com/blah_blah_'singlequoted'", "(Scoped like http://example.com/foo_bar)", "http://example.com/foo_bar", "[Scoped like http://example.com/foo_bar]", "http://example.com/foo_bar", "{Scoped like http://example.com/foo_bar}", "http://example.com/foo_bar", "\"Quoted like http://example.com/foo_bar\"", "http://example.com/foo_bar", "'Quoted like http://example.com/foo_bar'", "http://example.com/foo_bar", "http://example.com/foo_bar.jpg.", "http://example.com/foo_bar.jpg", "http://example.com/foo_bar/.", "http://example.com/foo_bar/", "http://example.com/foo_bar,", "http://example.com/foo_bar", "https://github.com/markdown-it/linkify-it/compare/360b13a733f521a8d4903d3a5e1e46c357e9d3ce...f580766349525150a80a32987bb47c2d592efc33", "https://www.google.com/search?sxsrf=ACYBGNTJFmX-GjNJ8fM-2LCkqyNyxGU1Ng", "https://ourworldindata.org/grapher/covid-deaths-days-since-per-million?zoomToSelection=true&time=9..&country=FRA+DEU+ITA+ESP+GBR+USA+CAN", "http://example.com/foo_bar...", "http://example.com/foo_bar", "http://172.26.142.48/viewerjs/#../0529/slides.pdf", "http://example.com/foo_bar..", "http://example.com/foo_bar", "http://example.com/foo_bar?p=10.", "http://example.com/foo_bar?p=10", "https://www.google.ru/maps/@59.9393895,30.3165389,15z?hl=ru", "https://www.google.com/maps/place/New+York,+NY,+USA/@40.702271,-73.9968471,11z/data=!4m2!3m1!1s0x89c24fa5d33f083b:0xc80b8f06e177fe62?hl=en", "https://www.google.com/analytics/web/?hl=ru&pli=1#report/visitors-overview/a26895874w20458057p96934174/", "http://business.timesonline.co.uk/article/0,,9065-2473189,00.html", "https://google.com/mail/u/0/#label/!!!Today/15c9b8193da01e65", "http://example.com/123!", "http://example.com/123", "http://example.com/123!!!", "http://example.com/123", "http://example.com/foo--bar", "See http://example.com/123; Example link.", "http://example.com/123", "http://example.com/123;123", "http://www.bloomberg.com/news/articles/2015-06-26/from-deutsche-bank-to-siemens-what-s-troubling-germany-inc-", "http://example.com/foo-with-trailing-dash-dot-.", "http://example.com/foo-with-trailing-dash-dot-", "<http://domain.com>", "http://domain.com", "<http://domain.com>.", "http://domain.com", "<http://domain.com/foo>", "http://domain.com/foo", "<http://domain.com/foo>.", "http://domain.com/foo", "<user@domain.com>", "user@domain.com", "<user@domain.com>.", "user@domain.com", "<mailto:user@domain.com>", "mailto:user@domain.com", "test.\"foo\".bar@gmail.co.uk!", "test.\"foo\".bar@gmail.co.uk", "test@example.com", "test@example.com", "name@example.com", "name@example.com", "mailto:name@example.com", "MAILTO:NAME@EXAMPLE.COM", "mailto:foo_bar@example.com", "foo+bar@gmail.com", "192.168.1.1@gmail.com", "mailto:foo@bar      ", "mailto:foo@bar", "(foobar email@example.com)", "email@example.com", "(email@example.com foobar)", "email@example.com", "(email@example.com)", "email@example.com", "http://✪df.ws/123", "http://xn--df-oiy.ws/123", "http://www.bürgerentscheid-krankenhäuser.de", "http://www.xn--brgerentscheid-krankenhuser-xkc78d.de", "http://bündnis-für-krankenhäuser.de/wp-content/uploads/2011/11/cropped-logohp.jpg", "http://xn--bndnis-fr-krankenhuser-i5b27cha.de/wp-content/uploads/2011/11/cropped-logohp.jpg", "http://ﻡﻮﻘﻋ.ﻭﺯﺍﺭﺓ-ﺍﻼﺘﺻﺍﻼﺗ.ﻢﺻﺭ/", "http://xn--4gbrim.xn----ymcbaaajlc6dj7bxne2c.xn--wgbh1c/", "｜http://google.com｜bar", "http://google.com", "https://5b0ee223b312746c1659db3f--thelounge-chat.netlify.com/docs/", "http://a---b.com/", "http://api_stage.dz_code.io", "牛啊http://api_stage.dz_code.io太牛了", `{"url":"https://player.youku.com/embed/XNTg5NzgxNTE2MA==","type":"video","subtype":"youku"},"uuid":"l8i5jpizdkw8oyamnxi"},"nodes":[{"klass":"text","leaves":[{"klass":"leaf","text":"","marks":[]}]}]}]}`];
const invalid = ["example.invalid", "example.invalid/", "http://.example.com", "http://-example.com", "hppt://example.com", "example.coma", "-example.coma", "foo.123", "localhost           ", "localhost/", "///localhost        ", "///test.com", "//test              ", "_http://example.com", "_//example.com", "_example.com", "http://example.com_", "@example.com", "node.js and io.js", "http://", "http://.", "http://..", "http://#", "http://##", "http://?", "http://??", "google.com:500000 // invalid port", "show image.jpg", "path:to:file.pm", "/path/to/file.pl", "", "1.2.3.4.5", "1.2.3", "1.2.3.400", "1000.2.3.4", "a1.2.3.4", "1.2.3.4a", "", "foo@bar     ", "mailto:bar"];
const mdLinks = [`![](http://domain.com/foo "xxx")`, `![](http://domain.com/foo)`, `[](http://domain.com/foo)`, `[xxx](http://domain.com/foo)`, "[https](https://www.ibm.com)[mailto](mailto:someone@ibm.com) "];
const invalidMdLinks = ["[](http://domain.com/foo )", `[](http://domain.com/foo abc)`];
describe('Test linkify', () => {
  describe('Test valid link', () => {
    const linkify = (0, _linkify.default)(['http:']);

    for (const link of [...valid, ...mdLinks, ...invalidMdLinks]) {
      it(`test ${link}`, () => {
        expect(linkify.test(link)).toBeTruthy();
      });
    }
  });
  describe('Test invalid link', () => {
    const linkify = (0, _linkify.default)(['http:']);

    for (const link of invalid) {
      it(`test ${link}`, () => {
        expect(linkify.test(link)).toBeFalsy();
      });
    }
  });
  it('Test memorize', () => {
    const linkify1 = (0, _linkify.default)(['http:']);
    const linkify2 = (0, _linkify.default)(['http:']);
    const linkify3 = (0, _linkify.default)(['https:']);
    const linkify4 = (0, _linkify.default)(['https:', 'http:']);
    const linkify5 = (0, _linkify.default)(['http:', 'https:']);
    expect(linkify1).toEqual(linkify2);
    expect(linkify1).not.toEqual(linkify3);
    expect(linkify4).toEqual(linkify5);
  });
  describe('matchesLink with markdown', () => {
    describe('valid link with markdown', () => {
      const linkify = (0, _linkify.default)(['http:']);

      for (const link of [...valid, ...invalidMdLinks]) {
        it(`test ${link}`, () => {
          expect((0, _linkify.matchesLink)(linkify, link)).toBeTruthy();
        });
      }
    });
    describe('invalid link with markdown', () => {
      const linkify = (0, _linkify.default)(['http:']);

      for (const link of [...invalid, ...mdLinks]) {
        it(`test ${link}`, () => {
          expect((0, _linkify.matchesLink)(linkify, link)).toBeFalsy();
        });
      }
    });
  });
});
//# sourceMappingURL=linkify.test.js.map