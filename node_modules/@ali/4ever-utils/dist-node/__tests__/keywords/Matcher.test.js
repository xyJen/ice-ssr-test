"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _Matcher = _interopRequireDefault(require("../../matcher/Matcher"));

describe('Test Matcher', () => {
  it('Test match substring', () => {
    const matcher = new _Matcher.default({
      lang: 'en-US',
      items: [{
        keywords: ['Table'],
        data: {
          key: 'table'
        }
      }, {
        keywords: ['Template'],
        data: {
          key: 'template'
        }
      }, {
        keywords: ['Temple'],
        data: {
          key: 'temple'
        }
      }]
    });
    const rs0 = matcher.match('t');
    expect(rs0[0]).toHaveProperty('data.key', 'table');
    expect(rs0[1]).toHaveProperty('data.key', 'template');
    expect(rs0[2]).toHaveProperty('data.key', 'temple');
    const rs1 = matcher.match('templ');
    expect(rs1[0]).toHaveProperty('data.key', 'template');
    expect(rs1[1]).toHaveProperty('data.key', 'temple');
    const rs2 = matcher.match('e');
    expect(rs2[0]).toHaveProperty('data.key', 'template');
    expect(rs2[1]).toHaveProperty('data.key', 'temple');
    expect(rs2[2]).toHaveProperty('data.key', 'table');
    const rs3 = matcher.match('le');
    expect(rs3[0]).toHaveProperty('data.key', 'table');
    expect(rs3[1]).toHaveProperty('data.key', 'temple');
  });
  it('Test group search', () => {
    const matcher = new _Matcher.default({
      lang: 'en-US',
      items: [{
        keywords: ['General'],
        data: {
          key: 'general'
        },
        subItems: [{
          keywords: ['paragraph'],
          data: {
            key: 'paragraph'
          }
        }, {
          keywords: ['heading1'],
          data: {
            key: 'heading-1'
          }
        }, {
          keywords: ['heading2'],
          data: {
            key: 'heading-2'
          }
        }, {
          keywords: ['heading3'],
          data: {
            key: 'heading-3'
          }
        }]
      }, {
        data: {
          key: 'data'
        },
        keywords: ['data'],
        subItems: [{
          data: {
            key: 'table'
          },
          keywords: ['Table']
        }, {
          data: {
            key: 'database'
          },
          keywords: ['Database']
        }, {
          data: {
            key: 'timeline'
          },
          keywords: ['Timeline']
        }]
      }]
    });
    const rs = matcher.match('en');
    expect(rs[0]).toHaveProperty('data.key', 'general');
    expect(rs[0]?.subItems).toHaveLength(4);
    const rs1 = matcher.match('me');
    expect(rs1[0]).toHaveProperty('data.key', 'data');
    expect(rs1[0].subItems).toHaveLength(1);
    expect(rs1[0].subItems[0]).toHaveProperty('data.key', 'timeline');
  });
  it('Test fuzzily match', () => {
    const matcher = new _Matcher.default({
      lang: 'en-US',
      enableFuzzy: true,
      items: [{
        keywords: ['Table'],
        data: {
          key: 'table'
        }
      }, {
        keywords: ['Template'],
        data: {
          key: 'template'
        }
      }, {
        keywords: ['Temple'],
        data: {
          key: 'temple'
        }
      }]
    });
    const rs0 = matcher.match('teble');
    expect(rs0).toHaveLength(1);
    expect(rs0[0]).toHaveProperty('data.key', 'table');
    const rs1 = matcher.match('templa');
    expect(rs1).toHaveLength(2);
    expect(rs1[0]).toHaveProperty('data.key', 'template');
    expect(rs1[1]).toHaveProperty('data.key', 'temple');
  });
});
//# sourceMappingURL=Matcher.test.js.map