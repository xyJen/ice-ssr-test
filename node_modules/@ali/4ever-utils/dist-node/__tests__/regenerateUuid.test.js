"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _element = _interopRequireDefault(require("@ali/4ever-cangjie/src/models/element"));

var _regenerateUuid = require("../regenerateUuid");

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("block", {
  key: "p2"
});

var _ref2 = (0, _everDevTest.jsx)("block", {
  key: "p2"
});

describe('Cangjie/utils/regenerateUuid', () => {
  function checkValue(fragment, nextFrag) {
    const uids = Object.keys(fragment.data.userData || {});
    nextFrag.forEachDescendant(node => {
      if (_element.default.isElement(node)) {
        const path = nextFrag.getPath(node.key);
        const prevNode = fragment.getNodeByPath(path);
        expect(_element.default.isElement(prevNode)).toBe(true);

        if (_element.default.isElement(prevNode)) {
          // uuid 重新生成
          if (node.data.uuid) {
            expect(prevNode.data.uuid).not.toEqual(node.data.uuid);
            uids.forEach(uid => {
              // 用户数据值不变
              const oldV = fragment.data.userData[uid][prevNode.data.uuid];
              const newV = nextFrag.data.userData[uid][node.data.uuid];
              expect(oldV).toEqual(newV);
            });
          }
        }
      }
    });
  }

  test('regenerate key and uuid in fragment, with user data', () => {
    const userData = {
      uid1: {
        uuid1: {
          fold: true
        },
        uuid3: {
          fold: false
        }
      },
      uid2: {
        uuid1: {
          fold: false
        },
        uuid2: {
          fold: true
        }
      }
    };
    const fragment = (0, _everDevTest.jsx)("document", {
      key: "document",
      data: {
        userData
      }
    }, (0, _everDevTest.jsx)("block", {
      key: "p1",
      data: {
        uuid: 'uuid1'
      }
    }), _ref, (0, _everDevTest.jsx)("block", {
      key: "p3",
      data: {
        uuid: 'uuid2'
      }
    }, (0, _everDevTest.jsx)("block", {
      key: "p4"
    }, (0, _everDevTest.jsx)("block", {
      key: "p5",
      data: {
        uuid: 'uuid3'
      }
    }))));
    const nextFrag = (0, _regenerateUuid.regenerateUuid)(fragment);
    checkValue(fragment, nextFrag);
  });
  test('regenerate key and uuid in fragment, without user data', () => {
    const fragment = (0, _everDevTest.jsx)("document", {
      key: "document"
    }, (0, _everDevTest.jsx)("block", {
      key: "p1",
      data: {
        uuid: 'uuid1'
      }
    }), _ref2, (0, _everDevTest.jsx)("block", {
      key: "p3"
    }, (0, _everDevTest.jsx)("block", {
      key: "p4",
      data: {
        uuid: 'uuid2'
      }
    })));
    const nextFrag = (0, _regenerateUuid.regenerateUuid)(fragment);
    checkValue(fragment, nextFrag);
  });
});
//# sourceMappingURL=regenerateUuid.test.js.map