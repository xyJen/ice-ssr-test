{"version":3,"sources":["../../../src/__tests__/fuzzyQuery.test.ts"],"names":["describe","text","cases","regexp","forEach","input","output","it","expect","test","toBe"],"mappings":";;AAAA;;AAEAA,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9BA,EAAAA,QAAQ,CAAC,MAAD,EAAS,MAAM;AACrB,UAAMC,IAAI,GAAG,KAAb;AACA,UAAMC,KAA+B,GAAG,CACtC,CAAC,KAAD,EAAQ,IAAR,CADsC,EAEtC,CAAC,oBAAD,EAAuB,IAAvB,CAFsC,EAGtC,CAAC,aAAD,EAAgB,IAAhB,CAHsC,EAItC,CAAC,IAAD,EAAO,KAAP,CAJsC,EAKtC,CAAC,IAAD,EAAO,KAAP,CALsC,EAMtC,CAAC,GAAD,EAAM,KAAN,CANsC,EAOtC,CAAC,EAAD,EAAK,KAAL,CAPsC,EAQtC,CAAC,GAAD,EAAM,KAAN,CARsC,EAStC,CAAC,UAAD,EAAa,KAAb,CATsC,CAAxC;AAYA,UAAMC,MAAM,GAAG,+BAAcF,IAAd,CAAf;AACAC,IAAAA,KAAK,CAACE,OAAN,CAAc,CAAC,CAACC,KAAD,EAAQC,MAAR,CAAD,KAAqB;AACjCC,MAAAA,EAAE,CAAE,UAASN,IAAK,QAAOI,KAAM,EAA7B,EAAgC,MAAM;AACtCG,QAAAA,MAAM,CAACL,MAAM,CAACM,IAAP,CAAYJ,KAAZ,CAAD,CAAN,CAA2BK,IAA3B,CAAgCJ,MAAhC;AACD,OAFC,CAAF;AAGD,KAJD;AAKD,GApBO,CAAR;AAsBAN,EAAAA,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3B,UAAMC,IAAI,GAAG,KAAb;AACA,UAAMC,KAA+B,GAAG,CACtC,CAAC,KAAD,EAAQ,IAAR,CADsC,EAEtC,CAAC,aAAD,EAAgB,IAAhB,CAFsC,EAGtC,CAAC,UAAD,EAAa,IAAb,CAHsC,EAItC,CAAC,UAAD,EAAa,KAAb,CAJsC,CAAxC;AAOA,UAAMC,MAAM,GAAG,+BAAcF,IAAd,CAAf;AACAC,IAAAA,KAAK,CAACE,OAAN,CAAc,CAAC,CAACC,KAAD,EAAQC,MAAR,CAAD,KAAqB;AACjCC,MAAAA,EAAE,CAAE,UAASN,IAAK,QAAOI,KAAM,EAA7B,EAAgC,MAAM;AACtCG,QAAAA,MAAM,CAACL,MAAM,CAACM,IAAP,CAAYJ,KAAZ,CAAD,CAAN,CAA2BK,IAA3B,CAAgCJ,MAAhC;AACD,OAFC,CAAF;AAGD,KAJD;AAKD,GAfO,CAAR;AAgBD,CAvCO,CAAR","sourcesContent":["import { getFuzzyQuery } from '../fuzzyQuery';\n\ndescribe('getFuzzyQuery', () => {\n  describe('普通字符', () => {\n    const text = 'abc'\n    const cases: Array<[string, boolean]> = [\n      ['abc', true],\n      ['zzzaxxxxbyyyycwwww', true],\n      ['axxxxbyyyyc', true],\n      ['ac', false],\n      ['bc', false],\n      ['c', false],\n      ['', false],\n      ['d', false],\n      ['azzzzzzc', false],\n    ];\n\n    const regexp = getFuzzyQuery(text);\n    cases.forEach(([input, output]) => {\n      it(`search ${text} for ${input}`, () => {\n        expect(regexp.test(input)).toBe(output);\n      });\n    })\n  });\n\n  describe('escaped 字符', () => {\n    const text = 't*.'\n    const cases: Array<[string, boolean]> = [\n      ['t*.', true],\n      ['\\tttwww*s .', true],\n      ['tt***...', true],\n      ['\\t~~++[]', false],\n    ];\n\n    const regexp = getFuzzyQuery(text);\n    cases.forEach(([input, output]) => {\n      it(`search ${text} for ${input}`, () => {\n        expect(regexp.test(input)).toBe(output);\n      });\n    })\n  });\n});\n"],"file":"fuzzyQuery.test.js"}