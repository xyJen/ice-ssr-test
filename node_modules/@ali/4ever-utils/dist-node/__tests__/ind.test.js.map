{"version":3,"sources":["../../../src/__tests__/ind.test.ts"],"names":["testCases","name","input","klass","type","data","ind","left","nodes","leaves","text","marks","value","szUnit","output","firstLineChars","firstLine","hangingChars","hanging","describe","forEach","testCase","it","node","Block","fromJSON","expect","IndUtil","fromBlock","toEqual"],"mappings":"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","sourcesContent":["import {\n  Block,\n  BlockJSON,\n} from '@ali/4ever-cangjie';\nimport { IndUtil } from '../utils/formats/ind';\n\nconst testCases = [{\n  name: '普通段落缩进',\n  input: {\n    klass: 'block',\n    type: 'paragraph',\n    data: {\n      ind: {\n        left: 28,\n      },\n    },\n    nodes: [{\n      klass: 'text',\n      leaves: [{\n        klass: 'leaf',\n        text: '首',\n        marks: [{\n          klass: 'mark',\n          type: 'sz',\n          data: { value: 16, szUnit: 'pt' },\n        }],\n      }, {\n        klass: 'leaf',\n        text: '行',\n      }],\n    }],\n  },\n  output: {\n    left: 28,\n  },\n}, {\n  name: '首行缩进',\n  input: {\n    klass: 'block',\n    type: 'paragraph',\n    data: {\n      ind: {\n        left: 28,\n        firstLineChars: 200,\n      },\n    },\n    nodes: [{\n      klass: 'text',\n      leaves: [{\n        klass: 'leaf',\n        text: '首',\n        marks: [{\n          klass: 'mark',\n          type: 'sz',\n          data: { value: 16, szUnit: 'pt' },\n        }],\n      }, {\n        klass: 'leaf',\n        text: '行',\n      }],\n    }],\n  },\n  output: {\n    left: 28,\n    firstLine: 42.66666666666666,\n    firstLineChars: 200,\n  },\n}, {\n  name: '悬挂缩进',\n  input: {\n    klass: 'block',\n    type: 'paragraph',\n    data: {\n      ind: {\n        left: 28,\n        hangingChars: 200,\n      },\n    },\n    nodes: [{\n      klass: 'text',\n      leaves: [{\n        klass: 'leaf',\n        text: '首',\n        marks: [{\n          klass: 'mark',\n          type: 'sz',\n          data: { value: 16, szUnit: 'pt' },\n        }],\n      }, {\n        klass: 'leaf',\n        text: '行',\n      }],\n    }],\n  },\n  output: {\n    left: 0,\n    hanging: 42.66666666666666,\n    hangingChars: 200,\n  },\n}];\n\ndescribe('test IndUtil.fromBlock', () => {\n  testCases.forEach((testCase) => {\n    const { name, input, output } = testCase;\n    it(`ind: ${name}`, () => {\n      const node = Block.fromJSON(input as unknown as BlockJSON);\n      expect(IndUtil.fromBlock(node)).toEqual(output);\n    });\n  });\n});\n\n"],"file":"ind.test.js"}