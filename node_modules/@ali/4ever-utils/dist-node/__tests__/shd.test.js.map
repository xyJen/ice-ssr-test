{"version":3,"sources":["../../../src/__tests__/shd.test.ts"],"names":["testCases","name","input","shd","val","fill","output","color","describe","forEach","testCase","it","expect","ShdUtil","transformShd","toEqual"],"mappings":";;;;AAAA;;AAEA,MAAMA,SAAS,GAAG,CAAC;AACjBC,EAAAA,IAAI,EAAE,IADW;AAEjBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAE,OADF;AAEHC,MAAAA,IAAI,EAAE;AAFH;AADA,GAFU;AAQjBC,EAAAA,MAAM,EAAE;AARS,CAAD,EASf;AACDL,EAAAA,IAAI,EAAE,IADL;AAEDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAE,OADF;AAEHC,MAAAA,IAAI,EAAE,SAFH;AAGHE,MAAAA,KAAK,EAAE;AAHJ;AADA,GAFN;AASDD,EAAAA,MAAM,EAAE;AATP,CATe,EAmBf;AACDL,EAAAA,IAAI,EAAE,SADL;AAEDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAE,OADF;AAEHC,MAAAA,IAAI,EAAE,SAFH;AAGHE,MAAAA,KAAK,EAAE;AAHJ;AADA,GAFN;AASDD,EAAAA,MAAM,EAAE;AATP,CAnBe,EA6Bf;AACDL,EAAAA,IAAI,EAAE,cADL;AAEDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAE,MADF;AAEHG,MAAAA,KAAK,EAAE;AAFJ;AADA,GAFN;AAQDD,EAAAA,MAAM,EAAE;AARP,CA7Be,EAsCf;AACDL,EAAAA,IAAI,EAAE,SADL;AAEDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAE,OADF;AAEHC,MAAAA,IAAI,EAAE,SAFH;AAGHE,MAAAA,KAAK,EAAE;AAHJ;AADA,GAFN;AASDD,EAAAA,MAAM,EAAE;AATP,CAtCe,EAgDf;AACDL,EAAAA,IAAI,EAAE,WADL;AAEDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAE,OADF;AAEHC,MAAAA,IAAI,EAAE,SAFH;AAGHE,MAAAA,KAAK,EAAE;AAHJ;AADA,GAFN;AASDD,EAAAA,MAAM,EAAE;AATP,CAhDe,EA0Df;AACDL,EAAAA,IAAI,EAAE,IADL;AAEDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAE,OADF;AAEHC,MAAAA,IAAI,EAAE,SAFH;AAGHE,MAAAA,KAAK,EAAE;AAHJ;AADA,GAFN;AASDD,EAAAA,MAAM,EAAE;AATP,CA1De,EAoEf;AACDL,EAAAA,IAAI,EAAE,OADL;AAEDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAE,uBADF;AAEHC,MAAAA,IAAI,EAAE,SAFH;AAGHE,MAAAA,KAAK,EAAE;AAHJ;AADA,GAFN;AASDD,EAAAA,MAAM,EAAE;AATP,CApEe,CAAlB;AAgFAE,QAAQ,CAAC,UAAD,EAAa,MAAM;AACzBR,EAAAA,SAAS,CAACS,OAAV,CAAmBC,QAAD,IAAc;AAC9B,UAAM;AAAET,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeI,MAAAA;AAAf,QAA0BI,QAAhC;AACAC,IAAAA,EAAE,CAAE,OAAMV,IAAK,EAAb,EAAgB,MAAM;AACtBW,MAAAA,MAAM,CAACC,aAAQC,YAAR,CAAqBZ,KAAK,CAACC,GAA3B,CAAD,CAAN,CAAwCY,OAAxC,CAAgDT,MAAhD;AACD,KAFC,CAAF;AAGD,GALD;AAMD,CAPO,CAAR","sourcesContent":["import ShdUtil from \"../utils/formats/shd\";\n\nconst testCases = [{\n  name: '清除',\n  input: {\n    shd: {\n      val: 'clear',\n      fill: '#123456',\n    },\n  },\n  output: '#123456',\n}, {\n  name: '纯色',\n  input: {\n    shd: {\n      val: 'solid',\n      fill: '#123456',\n      color: '#654321',\n    },\n  },\n  output: '#654321',\n}, {\n  name: '纯色 auto',\n  input: {\n    shd: {\n      val: 'solid',\n      fill: '#123456',\n      color: 'auto',\n    },\n  },\n  output: '#000',\n}, {\n  name: 'fill 默认 auto',\n  input: {\n    shd: {\n      val: 'pct5',\n      color: '#FF0000',\n    },\n  },\n  output: '#fff2f2',\n}, {\n  name: 'word 默认',\n  input: {\n    shd: {\n      val: 'pct15',\n      fill: '#FFFFFF',\n      color: 'auto',\n    },\n  },\n  output: '#d9d9d9',\n}, {\n  name: 'word 默认有色',\n  input: {\n    shd: {\n      val: 'pct50',\n      fill: '#CC0088',\n      color: '#CC0088',\n    },\n  },\n  output: '#cc0088',\n}, {\n  name: '混合',\n  input: {\n    shd: {\n      val: 'pct15',\n      fill: '#0000FF',\n      color: '#FF0000',\n    },\n  },\n  output: '#2600d9',\n}, {\n  name: '不支持纹理',\n  input: {\n    shd: {\n      val: 'thinReverseDiagStripe',\n      fill: '#0000FF',\n      color: '#FF0000',\n    },\n  },\n  output: '#0000FF',\n}];\n\ndescribe('test shd', () => {\n  testCases.forEach((testCase) => {\n    const { name, input, output } = testCase;\n    it(`底纹: ${name}`, () => {\n      expect(ShdUtil.transformShd(input.shd)).toEqual(output);\n    });\n  });\n});\n"],"file":"shd.test.js"}