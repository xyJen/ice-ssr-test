{"version":3,"sources":["../../../src/__tests__/regenerateUuid.test.tsx"],"names":["describe","checkValue","fragment","nextFrag","uids","Object","keys","data","userData","forEachDescendant","node","Element","isElement","path","getPath","key","prevNode","getNodeByPath","expect","toBe","uuid","not","toEqual","forEach","uid","oldV","newV","test","uid1","uuid1","fold","uuid3","uid2","uuid2"],"mappings":"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","sourcesContent":["/** @jsx jsx */\n\nimport { jsx } from '@ali/4ever-dev-test';\nimport Document from '@ali/4ever-cangjie/src/models/document'\nimport Element from '@ali/4ever-cangjie/src/models/element';\nimport { regenerateUuid } from '../regenerateUuid';\n\ndescribe('Cangjie/utils/regenerateUuid', () => {\n  function checkValue (fragment: Document, nextFrag: Document) {\n    const uids = Object.keys(fragment.data.userData || {});\n    nextFrag.forEachDescendant((node) => {\n      if (Element.isElement(node)) {\n        const path = nextFrag.getPath(node.key);\n        const prevNode = fragment.getNodeByPath(path);\n        expect(Element.isElement(prevNode)).toBe(true);\n        if (Element.isElement(prevNode)) {\n          // uuid 重新生成\n          if (node.data.uuid) {\n            expect(prevNode.data.uuid).not.toEqual(node.data.uuid);\n            uids.forEach((uid) => {\n              // 用户数据值不变\n              const oldV = fragment.data.userData[uid][prevNode.data.uuid];\n              const newV = nextFrag.data.userData[uid][node.data.uuid];\n              expect(oldV).toEqual(newV);\n            })\n          }\n        }\n      }\n    })\n  }\n\n  test('regenerate key and uuid in fragment, with user data', () => {\n    const userData = {\n      uid1: {\n        uuid1: { fold: true },\n        uuid3: { fold: false },\n      },\n      uid2: {\n        uuid1: { fold: false },\n        uuid2: { fold: true },\n      },\n    };\n    const fragment: Document = (\n      <document key=\"document\" data={{ userData }}>\n        <block key='p1' data={{ uuid: 'uuid1' }} />\n        <block key='p2' />\n        <block key='p3' data={{ uuid: 'uuid2' }}>\n          <block key='p4'>\n            <block key='p5' data={{ uuid: 'uuid3' }} />\n          </block>\n        </block>\n      </document>\n    );\n    const nextFrag = regenerateUuid(fragment);\n    checkValue(fragment, nextFrag)\n  });\n\n  test('regenerate key and uuid in fragment, without user data', () => {\n    const fragment: Document = (\n      <document key=\"document\">\n        <block key='p1' data={{ uuid: 'uuid1' }} />\n        <block key='p2' />\n        <block key='p3'>\n          <block key='p4' data={{ uuid: 'uuid2' }}/>\n        </block>\n      </document>\n    );\n    const nextFrag = regenerateUuid(fragment);\n    checkValue(fragment, nextFrag)\n  });\n});\n"],"file":"regenerateUuid.test.js"}