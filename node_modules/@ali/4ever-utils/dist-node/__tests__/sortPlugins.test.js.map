{"version":3,"sources":["../../../src/__tests__/sortPlugins.test.ts"],"names":["describe","it","a","b","c","d","e","input","output","expect","map","i","key","toEqual","runAfter"],"mappings":"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","sourcesContent":["import { sortPlugins, Factory } from '../sortPlugins';\n\ndescribe('test plugin runAfter', () => {\n  it('Plugin 排序: 默认排序', () => {\n    const a: Factory = () => {};\n    const b: Factory = () => {};\n    const c: Factory = () => {};\n    const d: Factory = () => {};\n    const e: Factory = () => {};\n\n    const input = { a, b, c, d, e };\n    const output = ['a', 'b', 'c', 'd', 'e'];\n    expect(sortPlugins(input).map((i) => i.key)).toEqual(output);\n  });\n\n  it('Plugin 排序: 普通排序声明', () => {\n    const a: Factory = () => {};\n    const b: Factory = () => {};\n    const c: Factory = () => {};\n    const d: Factory = () => {};\n    const e: Factory = () => {};\n    a.runAfter = [b];\n    b.runAfter = [c];\n    c.runAfter = [d];\n    d.runAfter = [e];\n\n    let input = { a, b, c, d, e };\n    const output = ['e', 'd', 'c', 'b', 'a'];\n    expect(sortPlugins(input).map((i) => i.key)).toEqual(output);\n\n    input = { e, d, c, b, a };\n    expect(sortPlugins(input).map((i) => i.key)).toEqual(output);\n\n    input = { d, a, c, e, b };\n    expect(sortPlugins(input).map((i) => i.key)).toEqual(output);\n\n    input = { a, d, c, e, b };\n    expect(sortPlugins(input).map((i) => i.key)).toEqual(output);\n\n    input = { a, d, c, b, e };\n    expect(sortPlugins(input).map((i) => i.key)).toEqual(output);\n  });\n\n  it('Plugin 排序: 多个插件', () => {\n    const a: Factory = () => {};\n    const b: Factory = () => {};\n    const c: Factory = () => {};\n    const d: Factory = () => {};\n    const e: Factory = () => {};\n    a.runAfter = [b, c];\n    c.runAfter = [b, d, e];\n\n    const input = { a, b, c, d, e };\n    const output = ['b', 'd', 'e', 'c', 'a'];\n    expect(sortPlugins(input).map((i) => i.key)).toEqual(output);\n  });\n\n  it('Plugin 排序: 循环声明（保证先定义的声明）', () => {\n    const a: Factory = () => {};\n    const b: Factory = () => {};\n    const c: Factory = () => {};\n    const d: Factory = () => {};\n    const e: Factory = () => {};\n    a.runAfter = [b];\n    // cannot guareente\n    b.runAfter = [a];\n    c.runAfter = [d, e];\n    // cannot guareente\n    e.runAfter = [a, b, c, d];\n\n    const input = { a, b, c, d, e };\n    const output = ['b', 'a', 'd', 'e', 'c'];\n    expect(sortPlugins(input).map((i) => i.key)).toEqual(output);\n  });\n\n  it('Plugin 排序: 未知的 plugin', () => {\n    const a: Factory = () => {};\n    const b: Factory = () => {};\n    const c: Factory = () => {};\n    const d: Factory = () => {};\n    const e: Factory = () => {};\n    a.runAfter = [b, d];\n    b.runAfter = [c];\n    c.runAfter = [d, e];\n\n    const input = { a, b, c };\n    const output = ['c', 'b', 'a'];\n    expect(sortPlugins(input).map((i) => i.key)).toEqual(output);\n  });\n});\n"],"file":"sortPlugins.test.js"}