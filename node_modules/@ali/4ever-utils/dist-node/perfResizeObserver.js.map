{"version":3,"sources":["../../src/perfResizeObserver.ts"],"names":["PerfResizeObserver","constructor","observer","weakMap","resizeCallback","entries","entry","cb","get","target","observe","options","has","unobserve","set","delete","ResizeObserver","WeakMap","_resizeObserver","create"],"mappings":";;;;;;;;;AAAA;;AAEA,MAAMA,kBAAN,CAAyB;AAKvBC,EAAAA,WAAW,GAAG;AAAA,SAJNC,QAIM;AAAA,SAHNC,OAGM;;AAAA,SAUNC,cAVM,GAUYC,OAAD,IAAoC;AAC3D,WAAK,MAAMC,KAAX,IAAoBD,OAApB,EAA6B;AAC3B,cAAME,EAAE,GAAG,KAAKJ,OAAL,CAAaK,GAAb,CAAiBF,KAAK,CAACG,MAAvB,CAAX;;AACA,YAAIF,EAAJ,EAAQ;AACNA,UAAAA,EAAE,CAACD,KAAK,CAACG,MAAP,CAAF;AACD;AACF;AACF,KAjBa;;AAAA,SAwBPC,OAxBO,GAwBG,CACfD,MADe,EAEfF,EAFe,EAGfI,OAHe,KAMZ;AACH,UAAI,KAAKR,OAAL,CAAaS,GAAb,CAAiBH,MAAjB,CAAJ,EAA8B;AAC5B,aAAKP,QAAL,CAAcW,SAAd,CAAwBJ,MAAxB;AACD;;AACD,WAAKN,OAAL,CAAaW,GAAb,CAAiBL,MAAjB,EAAyBF,EAAzB,EAJG,CAKH;;AACA,WAAKL,QAAL,CAAcQ,OAAd,CAAsBD,MAAtB,EAA8BE,OAA9B;AACD,KArCa;;AAAA,SA0CPE,SA1CO,GA0CMJ,MAAD,IAAqB;AACtC,WAAKN,OAAL,CAAaY,MAAb,CAAoBN,MAApB;AACA,WAAKP,QAAL,CAAcW,SAAd,CAAwBJ,MAAxB;AACD,KA7Ca;;AACZ,SAAKP,QAAL,GAAgB,IAAIc,+BAAJ,CAAmB,KAAKZ,cAAxB,CAAhB;AACA,SAAKD,OAAL,GAAe,IAAIc,OAAJ,EAAf;AACD;AAED;AACF;AACA;;;AAZyB;;AAAnBjB,kB,CAGWkB,e,GAAkB,IAAIlB,kBAAJ,E;;AAH7BA,kB,CAaGmB,M,GAAS,MAAMnB,kBAAkB,CAACkB,e;;eAwC5BlB,kB","sourcesContent":["import ResizeObserver from 'resize-observer-polyfill';\n\nclass PerfResizeObserver {\n  private observer: ResizeObserver;\n  private weakMap: WeakMap<Element, Function>;\n  private static _resizeObserver = new PerfResizeObserver();\n\n  constructor() {\n    this.observer = new ResizeObserver(this.resizeCallback);\n    this.weakMap = new WeakMap();\n  }\n\n  /**\n   *  消费同一个实例\n   */\n  static create = () => PerfResizeObserver._resizeObserver;\n\n  private resizeCallback = (entries: ResizeObserverEntry[]) => {\n    for (const entry of entries) {\n      const cb = this.weakMap.get(entry.target);\n      if (cb) {\n        cb(entry.target);\n      }\n    }\n  };\n\n  /**\n   * @param {Element} target 要监控 Resize 的 Dom 节点\n   * @param {(rect: DOMRect) = void} cb 触发 Resize 后的回调\n   * @memberof PerfResizeObserver\n   */\n  public observe = (\n    target: Element,\n    cb: (rect: DOMRect) => void,\n    options?: {\n      box: 'content-box' | 'border-box' | 'device-pixel-content-box';\n    },\n  ) => {\n    if (this.weakMap.has(target)) {\n      this.observer.unobserve(target);\n    }\n    this.weakMap.set(target, cb);\n    // @ts-ignore polyfill typing\n    this.observer.observe(target, options);\n  };\n\n  /**\n   * 从堆栈中移除已监控 Resize 的 Dom 节点\n   */\n  public unobserve = (target: Element) => {\n    this.weakMap.delete(target);\n    this.observer.unobserve(target);\n  };\n}\n\nexport default PerfResizeObserver;\n"],"file":"perfResizeObserver.js"}