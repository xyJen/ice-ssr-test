"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combinePluginFactory = combinePluginFactory;
exports.combinePluginsFactory = combinePluginsFactory;

/**
 * 合并两个 PluginFactory
 * @param factory1
 * @param factory2
 */
function combinePluginFactory(factory1, factory2) {
  function createCombinedPlugin(config, ...rest) {
    // @ts-ignore
    const plugin1 = factory1(config, ...rest); // @ts-ignore

    const plugin2 = factory2(config, ...rest);
    return { ...plugin1,
      ...plugin2
    };
  }

  return createCombinedPlugin;
}
/**
 * 合并两组 plugins，两组 plugins 交集的部分会合并，非交集的部分将独立存在
 * @param plugins1
 * @param plugins2
 */


function combinePluginsFactory(plugins1, plugins2) {
  const plugins = {};
  Object.keys(plugins1).forEach(key => {
    const factory1 = plugins1[key];
    const factory2 = plugins2[key]; // @ts-ignore

    if (factory2 && factory1 !== factory2) {
      // 如果两个 plugins 同时存在一个 key 的插件，则合并
      plugins[key] = combinePluginFactory(factory1, factory2);
    } else {
      // plugin1 独有
      // @ts-ignore
      plugins[key] = factory1;
    }
  });
  Object.keys(plugins2).forEach(key => {
    const factory1 = plugins1[key];
    const factory2 = plugins2[key]; // 由于上面 plugin1 已经 combine，所以这里只需要取 plugin2 独有即可

    if (!factory1) {
      // plugin2 独有
      // @ts-ignore
      plugins[key] = factory2;
    }
  });
  return plugins;
}
//# sourceMappingURL=pluginsUtil.js.map