{"version":3,"sources":["../../../src/utils/calculatedPluginSize.tsx"],"names":["calculatedPluginSize","node","containerWidth","currentElement","Promise","resolve","body","window","document","root","closest","querySelector","div","createElement","style","width","appendChild","ReactDOM","render","target","firstElementChild","display","offsetWidth","height","offsetHeight","remove"],"mappings":";;;;;;;;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,oBAAoB,GAAG,OAC3BC,IAD2B,EAE3BC,cAF2B,EAG3BC,cAH2B,KAIoB;AAC/C,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAM;AAAEC,MAAAA;AAAF,QAAWC,MAAM,CAACC,QAAxB;AACA,UAAMC,IAAI,GAAGN,cAAc,EAAEO,OAAhB,CAAwB,2BAAxB,KACXJ,IAAI,CAACK,aAAL,CAAmB,2BAAnB,CADW,IAEXL,IAFF;AAGA,UAAMM,GAAG,GAAGL,MAAM,CAACC,QAAP,CAAgBK,aAAhB,CAA8B,KAA9B,CAAZ;AACAD,IAAAA,GAAG,CAACE,KAAJ,CAAUC,KAAV,GAAkB,CAAC,OAAOb,cAAP,KAA0B,QAA1B,GAAsC,GAAEA,cAAe,IAAvD,GAA6DA,cAA9D,KAAiF,EAAnG;AACAO,IAAAA,IAAI,CAACO,WAAL,CAAiBJ,GAAjB;;AACAK,sBAASC,MAAT,CAAgBjB,IAAhB,EAAsBW,GAAtB,EAA2B,MAAM;AAC/B,UAAIO,MAAM,GAAGP,GAAG,CAACQ,iBAAjB;;AACA,UAAI,CAACD,MAAL,EAAa;AACXA,QAAAA,MAAM,GAAGP,GAAT;AACAO,QAAAA,MAAM,CAACL,KAAP,CAAaO,OAAb,GAAuB,QAAvB;AACD;;AACD,YAAMN,KAAK,GAAGI,MAAM,CAACG,WAArB;AACA,YAAMC,MAAM,GAAGJ,MAAM,CAACK,YAAtB;AACAZ,MAAAA,GAAG,CAACa,MAAJ;AACA,aAAOpB,OAAO,CAAC;AAAEU,QAAAA,KAAF;AAASQ,QAAAA;AAAT,OAAD,CAAd;AACD,KAVD;AAWD,GAnBM,CAAP;AAoBD,CAzBD;;eA2BevB,oB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n/**\n * 计算插件宽高\n * Tips: ReactDOM.render 在无其他 render 任务时会同步执行，有其他 render 时会变成异步方法\n * @param node 实例\n * @param containerWidth 容器宽度（eg: 取值兼容 pc 端容器宽度）\n * @param currentElement 当前实例渲染节点（查找仓颉父容器）\n */\nconst calculatedPluginSize = async (\n  node: React.ReactElement,\n  containerWidth?: number | string,\n  currentElement?: HTMLElement,\n): Promise<{ width: number; height: number }> => {\n  return new Promise((resolve) => {\n    const { body } = window.document;\n    const root = currentElement?.closest('div[data-cangjie-content]') ||\n      body.querySelector('div[data-cangjie-content]') ||\n      body;\n    const div = window.document.createElement('div') as HTMLElement;\n    div.style.width = (typeof containerWidth === 'number' ? `${containerWidth}px` : containerWidth) || '';\n    root.appendChild(div);\n    ReactDOM.render(node, div, () => {\n      let target = div.firstElementChild as HTMLElement | null;\n      if (!target) {\n        target = div;\n        target.style.display = 'inline';\n      }\n      const width = target.offsetWidth;\n      const height = target.offsetHeight;\n      div.remove();\n      return resolve({ width, height });\n    });\n  });\n};\n\nexport default calculatedPluginSize;\n"],"file":"calculatedPluginSize.js"}