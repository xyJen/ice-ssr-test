{"version":3,"sources":["../../../src/utils/fontRenderFallback.ts"],"names":["FontRenderFallback","constructor","STRATEGY_ARRAY","FALLBACK_INDEX_MAP","Map","CACHE_MAP","simpleCache","SimpleMapCache","simpleBTBDCache","init","getCommonFallbackStrategy","generic","FALLBACK_STRATEGIES_CN","getFallbackStrategy","font","family","chinesefamily","fallback","commonFallback","fallbackStrategy","length","Array","from","Set","filter","item","cacheStrategy","strategy","btbd","key","toString","cached","undefined","push","fontFamily","index","updateFallbackIndex","keys","fallbackIndex","forEach","set","FONTS_INFO","weights","charSets","postScriptName","cachedIndex","name","i","fontName","charset","nameWithWeights","j","weight","nameWithWeight","newStrategy","getSupportFonts","map","getFontBTBD","cachedValue","get","fonts","split","add","getFontFallback","mark","ascii","eastAsia","cs","hAnsi","hint","data","cacheKey","fontsArray","f","fallbackFonts","concat","fontRenderFallback"],"mappings":";;;;;;;;;AACA;;AACA;;AAQA,MAAMA,kBAAN,CAAyB;AACvB;AACF;AACA;;AAGE;AACF;AACA;;AAKE;AACF;AACA;AAKEC,EAAAA,WAAW,GAAG;AAAA,SAhBNC,cAgBM,GAhBuB,EAgBvB;AAAA,SAXNC,kBAWM,GAXoC,IAAIC,GAAJ,EAWpC;AAAA,SATNC,SASM,GAT8B,EAS9B;AAAA,SAJNC,WAIM,GAJgC,IAAIC,uBAAJ,EAIhC;AAAA,SAFNC,eAEM,GAFoC,IAAID,uBAAJ,EAEpC;AACZ,SAAKE,IAAL;AACD;;AAEOC,EAAAA,yBAAR,CAAkCC,OAAlC,EAA6D;AAC3D,WAAOC,8BAAuBD,OAAvB,KAAmC,EAA1C;AACD;;AAEOE,EAAAA,mBAAR,CAA4BC,IAA5B,EAA6C;AAC3C,UAAM;AAAEC,MAAAA,MAAF;AAAUJ,MAAAA,OAAV;AAAmBK,MAAAA,aAAnB;AAAkCC,MAAAA;AAAlC,QAA+CH,IAArD,CAD2C,CAE3C;;AACA,UAAMI,cAAc,GAAGF,aAAa,GAAG,KAAKN,yBAAL,CAA+BC,OAA/B,CAAH,GAA6C,EAAjF,CAH2C,CAK3C;;AACA,UAAMQ,gBAAgB,GAAGF,QAAQ,EAAEG,MAAV,GAAmB,CAAC,GAAGH,QAAJ,CAAnB,GAAmC,CAACF,MAAD,EAASC,aAAa,IAAI,EAA1B,EAA8B,GAAGE,cAAjC,EAAiDP,OAAjD,CAA5D,CAN2C,CAQ3C;;AACA,WAAOU,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQJ,gBAAgB,CAACK,MAAjB,CAAyBC,IAAD,IAAUA,IAAlC,CAAR,CAAX,CAAP;AACD;;AAEOC,EAAAA,aAAR,CAAsBC,QAAtB,EAA0CC,IAA1C,EAAyD;AACvD,UAAMC,GAAG,GAAGF,QAAQ,CAACG,QAAT,EAAZ;AACA,UAAMC,MAAM,GAAG,KAAK1B,SAAL,CAAewB,GAAf,CAAf;AACA,QAAIE,MAAM,KAAKC,SAAf,EAA0B,OAAOD,MAAP;AAE1B,SAAK7B,cAAL,CAAoB+B,IAApB,CAAyB;AACvBC,MAAAA,UAAU,EAAEP,QADW;AAEvBC,MAAAA;AAFuB,KAAzB;AAIA,UAAMO,KAAK,GAAG,KAAKjC,cAAL,CAAoBkB,MAApB,GAA6B,CAA3C;AACA,SAAKf,SAAL,CAAewB,GAAf,IAAsBM,KAAtB;AACA,WAAOA,KAAP;AACD;;AAEOC,EAAAA,mBAAR,CAA4BC,IAA5B,EAA6DC,aAA7D,EAAoF;AAClFD,IAAAA,IAAI,CAACE,OAAL,CAAcV,GAAD,IAAS;AACpB,UAAIA,GAAJ,EAAS;AACP,aAAK1B,kBAAL,CAAwBqC,GAAxB,CAA4BX,GAA5B,EAAiCS,aAAjC;AACD;AACF,KAJD;AAKD;;AAEO7B,EAAAA,IAAR,GAAe;AACbgC,sBAAWF,OAAX,CAAoBzB,IAAD,IAAU;AAC3B,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,aAAV;AAAyB0B,QAAAA,OAAO,GAAG,EAAnC;AAAuCC,QAAAA,QAAQ,GAAG,EAAlD;AAAsDC,QAAAA,cAAtD;AAAsEhB,QAAAA;AAAtE,UAA+Ed,IAArF;AACA,YAAMK,gBAAgB,GAAG,KAAKN,mBAAL,CAAyBC,IAAzB,CAAzB;AACA,UAAI+B,WAAW,GAAG,KAAKnB,aAAL,CAAmBP,gBAAnB,EAAqCS,IAArC,CAAlB,CAH2B,CAK3B;;AACA,WAAKQ,mBAAL,CAAyB,CAACrB,MAAD,EAASC,aAAT,CAAzB,EAAkD6B,WAAlD,EAN2B,CAO3B;;AACA,OAAC9B,MAAD,EAASC,aAAT,EAAwBuB,OAAxB,CAAiCO,IAAD,IAAU;AACxC,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,QAAQ,CAACvB,MAA9B,EAAsC2B,CAAC,EAAvC,EAA2C;AACzC,cAAIC,QAAQ,GAAGF,IAAf,CADyC,CAEzC;;AACA,gBAAMG,OAAO,GAAGN,QAAQ,CAACI,CAAD,CAAxB;;AACA,cAAIE,OAAJ,EAAa;AACXD,YAAAA,QAAQ,IAAK,IAAGC,OAAQ,EAAxB;AACD;;AACD,cAAI,CAACP,OAAO,CAACtB,MAAb,EAAqB;AACnB,iBAAKgB,mBAAL,CAAyB,CAACY,QAAD,CAAzB,EAAqCH,WAArC;AACA;AACD;;AAED,gBAAMK,eAAyB,GAAG,EAAlC;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAAO,CAACtB,MAA5B,EAAoC+B,CAAC,EAArC,EAAyC;AACvC;AACA,kBAAMC,MAAM,GAAGV,OAAO,CAACS,CAAD,CAAtB;AACA,kBAAME,cAAc,GAAI,GAAEL,QAAS,IAAGI,MAAO,EAA7C;;AACA,gBAAIR,cAAJ,EAAoB;AAClB;AACA,oBAAMU,WAAW,GAAG,CAAE,GAAEV,cAAe,IAAGQ,MAAO,EAA7B,EAAgC,GAAGjC,gBAAnC,CAApB;AACA0B,cAAAA,WAAW,GAAG,KAAKnB,aAAL,CAAmB4B,WAAnB,EAAgC1B,IAAhC,CAAd;AACA,mBAAKQ,mBAAL,CAAyB,CAACiB,cAAD,CAAzB,EAA2CR,WAA3C;AACA;AACD,aAND,MAMO;AACLK,cAAAA,eAAe,CAACjB,IAAhB,CAAqBoB,cAArB;AACD;AACF;;AACD,eAAKjB,mBAAL,CAAyBc,eAAzB,EAA0CL,WAA1C;AACD;AACF,OA9BD;AA+BD,KAvCD;AAwCD;;AAEDU,EAAAA,eAAe,GAAG;AAChB,WAAOlC,KAAK,CAACC,IAAN,CAAW,KAAKnB,kBAAhB,EAAoCqD,GAApC,CAAyC/B,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAtD,CAAP;AACD;;AAEDgC,EAAAA,WAAW,CAAC3C,IAAD,EAAgB;AACzB,QAAI,CAACA,IAAL,EAAW,OAAO,CAAP,CADc,CAEzB;;AACA,UAAM4C,WAAW,GAAG,KAAKlD,eAAL,CAAqBmD,GAArB,CAAyB7C,IAAzB,CAApB;AACA,QAAI4C,WAAJ,EAAiB,OAAOA,WAAP;AAEjB,UAAME,KAAK,GAAG9C,IAAI,CAAC+C,KAAL,CAAW,GAAX,CAAd;AACA,QAAIjC,IAAI,GAAG,CAAX;;AACA,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,KAAK,CAACxC,MAA1B,EAAkC2B,CAAC,EAAnC,EAAuC;AACrC,YAAMT,aAAa,GAAG,KAAKnC,kBAAL,CAAwBwD,GAAxB,CAA4BC,KAAK,CAACb,CAAD,CAAjC,CAAtB;;AACA,UAAIT,aAAa,KAAKN,SAAtB,EAAiC;AAC/BJ,QAAAA,IAAI,GAAG,KAAK1B,cAAL,CAAoBoC,aAApB,EAAmCV,IAAnC,IAA2C,CAAlD;AACA;AACD;AACF;;AAED,SAAKpB,eAAL,CAAqBsD,GAArB,CAAyBhD,IAAzB,EAA+Bc,IAA/B;AACA,WAAOA,IAAP;AACD;;AAEDmC,EAAAA,eAAe,CAACC,IAAD,EAAa;AAC1B,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,EAAnB;AAAuBC,MAAAA,KAAvB;AAA8BC,MAAAA;AAA9B,QAAuCL,IAAI,CAACM,IAAlD,CAD0B,CAE1B;;AACA,UAAMC,QAAQ,GAAI,GAAEN,KAAM,IAAGC,QAAS,IAAGC,EAAG,IAAGC,KAAM,IAAGC,IAAK,EAA7D;AACA,QAAIX,WAAW,GAAG,KAAKpD,WAAL,CAAiBqD,GAAjB,CAAqBY,QAArB,CAAlB;AACA,QAAIb,WAAJ,EAAiB,OAAOA,WAAP,CALS,CAO1B;;AACA,QAAIE,KAAe,GAAG,CAACK,KAAD,EAAQC,QAAR,CAAtB;;AACA,QAAIF,IAAI,CAACM,IAAL,CAAUD,IAAV,CAAJ,EAAqB;AACnB;AACAT,MAAAA,KAAK,GAAG,CAACI,IAAI,CAACM,IAAL,CAAUD,IAAV,CAAD,CAAR;AACD;;AAED,UAAMG,UAAU,GAAGnD,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQqC,KAAK,CAACpC,MAAN,CAAciD,CAAD,IAAOA,CAApB,CAAR,CAAX,CAAnB;AACA,QAAIC,aAAuB,GAAG,EAA9B;;AAEA,SAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,UAAU,CAACpD,MAA/B,EAAuC2B,CAAC,EAAxC,EAA4C;AAC1C,YAAMjC,IAAI,GAAG0D,UAAU,CAACzB,CAAD,CAAvB;AACA,YAAMT,aAAa,GAAG,KAAKnC,kBAAL,CAAwBwD,GAAxB,CAA4B7C,IAA5B,CAAtB;;AAEA,UAAIwB,aAAa,KAAKN,SAAtB,EAAiC;AAC/B0C,QAAAA,aAAa,CAACzC,IAAd,CAAmBnB,IAAnB;AACA;AACD;;AAED,YAAMa,QAAQ,GAAG,KAAKzB,cAAL,CAAoBoC,aAApB,CAAjB;AACAoC,MAAAA,aAAa,GAAGA,aAAa,CAACC,MAAd,CAAqB,CAAC7D,IAAD,EAAO,GAAGa,QAAQ,CAACO,UAAnB,CAArB,CAAhB;AACD;;AACDwC,IAAAA,aAAa,CAACzC,IAAd,CAAmBkC,EAAnB,EAAuBC,KAAvB;AACAV,IAAAA,WAAW,GAAGrC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQmD,aAAa,CAAClD,MAAd,CAAsBiD,CAAD,IAAOA,CAA5B,CAAR,CAAX,EAAoD3C,QAApD,EAAd;AACA,SAAKxB,WAAL,CAAiBwD,GAAjB,CAAqBS,QAArB,EAA+Bb,WAA/B;AACA,WAAOA,WAAP;AACD;;AAlKsB;;AAqKzB,MAAMkB,kBAAkB,GAAG,IAAI5E,kBAAJ,EAA3B;eAEe4E,kB","sourcesContent":["import { Mark } from '@ali/4ever-cangjie';\nimport { FONTS_INFO, FALLBACK_STRATEGIES_CN, FontsInfo } from '../theme/fonts';\nimport SimpleMapCache from './simpleMapCache';\n\n\ninterface Strategy {\n  fontFamily: string[];\n  btbd?: number;\n}\n\nclass FontRenderFallback {\n  /**\n   * 存储降级策略\n   */\n  private STRATEGY_ARRAY: Strategy[] = [];\n\n  /**\n   * 字体名和降级策略的索引\n   */\n  private FALLBACK_INDEX_MAP: Map<string, number> = new Map();\n\n  private CACHE_MAP: Record<string, number> = {};\n\n  /**\n   * 简易缓存，减少计算消耗\n   */\n  private simpleCache: SimpleMapCache<string> = new SimpleMapCache();\n\n  private simpleBTBDCache: SimpleMapCache<number> = new SimpleMapCache();\n\n  constructor() {\n    this.init();\n  }\n\n  private getCommonFallbackStrategy(generic: string): string[] {\n    return FALLBACK_STRATEGIES_CN[generic] || [];\n  }\n\n  private getFallbackStrategy(font: FontsInfo) {\n    const { family, generic, chinesefamily, fallback } = font;\n    // 只对中文做通用降级\n    const commonFallback = chinesefamily ? this.getCommonFallbackStrategy(generic) : [];\n\n    // 优先级：font.fallback > family > chinesefamily > commonFallback > generic\n    const fallbackStrategy = fallback?.length ? [...fallback] : [family, chinesefamily || '', ...commonFallback, generic];\n\n    // 过滤下\n    return Array.from(new Set(fallbackStrategy.filter((item) => item)));\n  }\n\n  private cacheStrategy(strategy: string[], btbd?: number) {\n    const key = strategy.toString();\n    const cached = this.CACHE_MAP[key];\n    if (cached !== undefined) return cached;\n\n    this.STRATEGY_ARRAY.push({\n      fontFamily: strategy,\n      btbd,\n    });\n    const index = this.STRATEGY_ARRAY.length - 1;\n    this.CACHE_MAP[key] = index;\n    return index;\n  }\n\n  private updateFallbackIndex(keys: Array<string | undefined>, fallbackIndex: number) {\n    keys.forEach((key) => {\n      if (key) {\n        this.FALLBACK_INDEX_MAP.set(key, fallbackIndex);\n      }\n    });\n  }\n\n  private init() {\n    FONTS_INFO.forEach((font) => {\n      const { family, chinesefamily, weights = [], charSets = [], postScriptName, btbd } = font;\n      const fallbackStrategy = this.getFallbackStrategy(font);\n      let cachedIndex = this.cacheStrategy(fallbackStrategy, btbd);\n\n      // 添加英文和中文索引\n      this.updateFallbackIndex([family, chinesefamily], cachedIndex);\n      // 中英文都支持字符集和字重（例如 仿宋_GB2312 或 微软雅黑 bold ）\n      [family, chinesefamily].forEach((name) => {\n        for (let i = 0; i <= charSets.length; i++) {\n          let fontName = name;\n          // 拼接 charset\n          const charset = charSets[i];\n          if (charset) {\n            fontName += `_${charset}`;\n          }\n          if (!weights.length) {\n            this.updateFallbackIndex([fontName], cachedIndex);\n            continue;\n          }\n\n          const nameWithWeights: string[] = [];\n          for (let j = 0; j < weights.length; j++) {\n            // 拼接 weight\n            const weight = weights[j];\n            const nameWithWeight = `${fontName} ${weight}`;\n            if (postScriptName) {\n              // Chrome 不识别 family Light，需要换成 postScriptName-light\n              const newStrategy = [`${postScriptName}-${weight}`, ...fallbackStrategy];\n              cachedIndex = this.cacheStrategy(newStrategy, btbd);\n              this.updateFallbackIndex([nameWithWeight], cachedIndex);\n              continue;\n            } else {\n              nameWithWeights.push(nameWithWeight);\n            }\n          }\n          this.updateFallbackIndex(nameWithWeights, cachedIndex);\n        }\n      });\n    });\n  }\n\n  getSupportFonts() {\n    return Array.from(this.FALLBACK_INDEX_MAP).map((item) => item[0]);\n  }\n\n  getFontBTBD(font?: string) {\n    if (!font) return 1;\n    // 先走缓存逻辑\n    const cachedValue = this.simpleBTBDCache.get(font);\n    if (cachedValue) return cachedValue;\n\n    const fonts = font.split(',');\n    let btbd = 1;\n    for (let i = 0; i < fonts.length; i++) {\n      const fallbackIndex = this.FALLBACK_INDEX_MAP.get(fonts[i]);\n      if (fallbackIndex !== undefined) {\n        btbd = this.STRATEGY_ARRAY[fallbackIndex].btbd || 1;\n        break;\n      }\n    }\n\n    this.simpleBTBDCache.add(font, btbd);\n    return btbd;\n  }\n\n  getFontFallback(mark: Mark) {\n    const { ascii, eastAsia, cs, hAnsi, hint } = mark.data;\n    // 先走缓存逻辑\n    const cacheKey = `${ascii}_${eastAsia}_${cs}_${hAnsi}_${hint}`;\n    let cachedValue = this.simpleCache.get(cacheKey);\n    if (cachedValue) return cachedValue;\n\n    // 只对中英文降级，暂不处理 cs 和 hAnsi\n    let fonts: string[] = [ascii, eastAsia];\n    if (mark.data[hint]) {\n      // 优先跟踪 hint\n      fonts = [mark.data[hint]];\n    }\n\n    const fontsArray = Array.from(new Set(fonts.filter((f) => f)));\n    let fallbackFonts: string[] = [];\n\n    for (let i = 0; i < fontsArray.length; i++) {\n      const font = fontsArray[i];\n      const fallbackIndex = this.FALLBACK_INDEX_MAP.get(font);\n\n      if (fallbackIndex === undefined) {\n        fallbackFonts.push(font);\n        continue;\n      }\n\n      const strategy = this.STRATEGY_ARRAY[fallbackIndex];\n      fallbackFonts = fallbackFonts.concat([font, ...strategy.fontFamily]);\n    }\n    fallbackFonts.push(cs, hAnsi);\n    cachedValue = Array.from(new Set(fallbackFonts.filter((f) => f))).toString();\n    this.simpleCache.add(cacheKey, cachedValue);\n    return cachedValue;\n  }\n}\n\nconst fontRenderFallback = new FontRenderFallback();\n\nexport default fontRenderFallback;\n"],"file":"fontRenderFallback.js"}