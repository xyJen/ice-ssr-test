{"version":3,"sources":["../../../../src/utils/formats/common.ts"],"names":["getDefaultHeadStyle","type","headDefaultStyle","getDefaultMarks","node","defaultParagraphSz","Block","isBlock","defaultMarks","Mark","create","data","value","SzUtil","fromHeadingType","szUnit","push","replaceObject","obj","val","pathes","stack","split","copyed","length","target","key","shift","CommonFormatUtil"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEO,SAASA,mBAAT,CAA6BC,IAA7B,EAA2C;AAChD,SAAOC,0BAAiB,8BAAgBD,IAAhB,CAAjB,CAAP;AACD;;AAEM,SAASE,eAAT,CAAyBC,IAAzB,EAA6CC,kBAA7C,EAAkF;AACvF,MAAI,CAACC,mBAAMC,OAAN,CAAcH,IAAd,CAAL,EAA0B,OAAO,EAAP;AAC1B,QAAMI,YAAoB,GAAG,CAACC,kBAAKC,MAAL,CAAY;AACxCT,IAAAA,IAAI,EAAE,IADkC;AAExCU,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAEC,WAAOC,eAAP,CAAuBV,IAAI,CAACH,IAA5B,EAAkCI,kBAAlC,CADH;AAEJU,MAAAA,MAAM,EAAE;AAFJ;AAFkC,GAAZ,CAAD,CAA7B;;AAQA,MAAIf,mBAAmB,CAACI,IAAI,CAACH,IAAN,CAAvB,EAAoC;AAClCO,IAAAA,YAAY,CAACQ,IAAb,CAAkBP,kBAAKC,MAAL,CAAY;AAAET,MAAAA,IAAI,EAAE;AAAR,KAAZ,CAAlB;AACD;;AACD,SAAOO,YAAP;AACD;;AAEM,MAAMS,aAAa,GAAG,CAACC,GAAD,EAAcC,GAAd,EAAwBC,MAAxB,KAA2C;AACtE,QAAMC,KAAK,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,CAAd,CADsE,CAEtE;;AACA,QAAMC,MAAM,GAAG,uBAAUL,GAAV,CAAf;AACA,MAAIG,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB,OAAOD,MAAP;AACtB,MAAIE,MAAM,GAAGF,MAAb;;AACA,SAAOF,KAAK,CAACG,MAAN,GAAe,CAAtB,EAAyB;AACvB,UAAME,GAAG,GAAGL,KAAK,CAACM,KAAN,MAAiB,EAA7B;AACAF,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAAN,IAAe,EAA7B;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACC,GAAD,CAAf;AACD;;AAEDD,EAAAA,MAAM,CAACJ,KAAK,CAACM,KAAN,MAAiB,EAAlB,CAAN,GAA8BR,GAA9B;AAEA,SAAOI,MAAP;AACD,CAfM;;;AAiBA,MAAMK,gBAAgB,GAAG;AAC9B5B,EAAAA,mBAD8B;AAE9BG,EAAAA,eAF8B;AAG9Bc,EAAAA;AAH8B,CAAzB","sourcesContent":["import { cloneDeep } from 'lodash-es';\nimport { Block, Mark } from '@ali/4ever-cangjie';\nimport { headTypeConvert, headDefaultStyle } from '../../heading/heading';\nimport { SzUtil } from './sz';\n\nexport function getDefaultHeadStyle(type: string) {\n  return headDefaultStyle[headTypeConvert(type)];\n}\n\nexport function getDefaultMarks(node: Block | Node, defaultParagraphSz?: number): Mark[] {\n  if (!Block.isBlock(node)) return [];\n  const defaultMarks: Mark[] = [Mark.create({\n    type: 'sz',\n    data: {\n      value: SzUtil.fromHeadingType(node.type, defaultParagraphSz),\n      szUnit: 'pt',\n    },\n  })];\n\n  if (getDefaultHeadStyle(node.type)) {\n    defaultMarks.push(Mark.create({ type: 'bold' }));\n  }\n  return defaultMarks;\n}\n\nexport const replaceObject = (obj: Object, val: any, pathes: string) => {\n  const stack = pathes.split('.');\n  // PERF: 避免引用的对象更改，性能不好\n  const copyed = cloneDeep(obj);\n  if (stack.length < 1) return copyed;\n  let target = copyed;\n  while (stack.length > 1) {\n    const key = stack.shift() || '';\n    target[key] = target[key] || {};\n    target = target[key];\n  }\n\n  target[stack.shift() || ''] = val;\n\n  return copyed;\n};\n\nexport const CommonFormatUtil = {\n  getDefaultHeadStyle,\n  getDefaultMarks,\n  replaceObject,\n};\n"],"file":"common.js"}