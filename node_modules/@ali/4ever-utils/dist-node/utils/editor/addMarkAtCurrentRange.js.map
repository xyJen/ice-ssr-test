{"version":3,"sources":["../../../../src/utils/editor/addMarkAtCurrentRange.ts"],"names":["addMarkAtRange","controller","selection","mark","document","value","isCollapsed","sameTypeMarks","getMarksAtRange","filter","m","type","forEach","command","Commands","removeMarkAtRange","focus","convertToTextPoints","focusNode","getNode","key","isCollapsedAtEmptyParagraph","query","isCollapsedAtEmptyHeading","Text","isText","getMarksAtPosition","removeMarkByKey","addMarkByKey","valueSelection","curPosMarks","marks","offset","push","newSelection","set","addMarkAtCurrentRange","selections"],"mappings":"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","sourcesContent":["import {\n  Controller,\n  Commands,\n  Mark,\n  Text,\n  Selection,\n} from '@ali/4ever-cangjie';\nimport { getRangesFromEditor } from './getRangesFromEditor';\n\n/**\n * 在给定选区内增加指定 mark\n * 策略同 addMarkAtCurrentRange\n * @param controller\n * @param selection\n * @param mark\n */\nexport function addMarkAtRange(controller: Controller, selection: Selection, mark: Mark) {\n  const { document } = controller.value;\n  const { isCollapsed } = selection;\n  if (!isCollapsed) {\n    /**\n       * 1\n       * 先移除选区中同类型的样式\n       * TODO: 原则上我们只允许 marks 中同类型的 mark 只有一个\n       * 因此可以走更直接的 filter + push 操作\n       * 这里的 removeMarkAtRange 和 addMarkAtRange 要遍历两次 且 会使用数据层的 equal 比较，性能更低\n       */\n    const sameTypeMarks = document.getMarksAtRange(selection).filter((m) => m.type === mark.type);\n    sameTypeMarks.forEach((m) => {\n      controller.command(Commands.removeMarkAtRange, selection, m);\n    });\n\n    // 增加指定 mark\n    controller.command(Commands.addMarkAtRange, selection, mark);\n    return controller;\n  }\n\n  const { focus } = selection.convertToTextPoints(document);\n  const focusNode = document.getNode(focus.key);\n  if (!focusNode) return controller;\n\n  const isCollapsedAtEmptyParagraph = controller.query('isCollapsedAtEmptyParagraph', selection) as boolean;\n  const isCollapsedAtEmptyHeading = controller.query('isCollapsedAtEmptyHeading', selection) as boolean;\n\n  if (isCollapsedAtEmptyParagraph || isCollapsedAtEmptyHeading) {\n    // 2.1\n    if (Text.isText(focusNode)) {\n      // 依然需要先移除同类型样式\n      const sameTypeMarks = document.getMarksAtPosition(focusNode.key, 0).filter((m) => m.type === mark.type);\n      sameTypeMarks.forEach((m) => {\n        controller.command(Commands.removeMarkByKey, focusNode.key, 0, 0, m);\n      });\n      controller.command(Commands.addMarkByKey, focusNode.key, 0, 0, mark);\n    }\n  }\n\n  // 2 都需要设置选区临时样式：需要将当前位置和要设置的 mark 做合并\n  // 需要取 value.selection 否则可能会改变原有选区范围\n  const valueSelection = controller.value.selection;\n  let curPosMarks: Mark[] = valueSelection.marks || document.getMarksAtPosition(focusNode.key, focus.offset);\n  // 同类型的文本样式仅允许存在一个，这里直接 filter\n  // 特殊业务（例如评论）允许多个存在可以使用 setUtils.add\n  curPosMarks = curPosMarks.filter((m) => m.type !== mark.type);\n  curPosMarks.push(mark);\n  const newSelection = valueSelection.set('marks', curPosMarks);\n  controller.command('select', newSelection);\n  return controller;\n}\n\n\n/**\n * 在当前选区内增加指定 mark\n * 1. 未闭合时策略：在选区内增加样式\n * 2. 闭合时策略：\n *  2.1 如果是 isCollapsedAtEmptyParagraph/Heading 时需要给 text 节点加mark（操作可持久化），对应的场景有二：\n *    a. 表格选区中的空 cell；\n *    b. focus 在空段落（paragraph 和 heading）\n *  2.2 边缘闭合选区：仅设置选区的临时样式，对应的场景：focus 在分割线、卡片、表格等左右\n *  2.3 focus 在段落中以及其它情形：仅设置选区的临时样式\n * @param controller\n * @param mark 要求必须是 Mark，尽量使用 mo 中的 create 函数创建以确保兼容性（直接使用 Mark.create 不安全）\n */\nexport default function addMarkAtCurrentRange(controller: Controller, mark: Mark) {\n  const selections = getRangesFromEditor(controller);\n  selections.forEach((selection) => addMarkAtRange(controller, selection, mark));\n  return controller;\n}\n"],"file":"addMarkAtCurrentRange.js"}