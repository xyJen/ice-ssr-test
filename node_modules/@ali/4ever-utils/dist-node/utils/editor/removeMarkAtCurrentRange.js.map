{"version":3,"sources":["../../../../src/utils/editor/removeMarkAtCurrentRange.ts"],"names":["removeMarkAtCurrentPosition","controller","type","document","selection","value","isCollapsed","focus","convertToTextPoints","focusNode","getNode","key","curPosMarks","marks","getMarksAtPosition","offset","filter","m","newSelection","set","command","removeMarkAtRange","needRemovedMarks","getMarksAtRange","forEach","Commands","isCollapsedAtEmptyParagraph","query","isCollapsedAtEmptyHeading","Text","isText","removeMarkByKey","removeMarkAtCurrentRange","selections"],"mappings":";;;;;;;;AAAA;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,2BAAT,CAAqCC,UAArC,EAA6DC,IAA7D,EAA2E;AACzE,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BH,UAAU,CAACI,KAA3C;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBF,SAAxB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAYH,SAAS,CAACI,mBAAV,CAA8BL,QAA9B,CAAlB;AACA,QAAMM,SAAS,GAAGN,QAAQ,CAACO,OAAT,CAAiBH,KAAK,CAACI,GAAvB,CAAlB;AACA,MAAI,CAACF,SAAL,EAAgB,OAAOR,UAAP;AAChB;AACF;AACA;AACA;;AACE,MAAIW,WAA0B,GAAGR,SAAS,CAACS,KAA3C;;AACA,MAAIP,WAAW,IAAI,CAACM,WAApB,EAAiC;AAC/B;AACAA,IAAAA,WAAW,GAAGT,QAAQ,CAACW,kBAAT,CAA4BL,SAAS,CAACE,GAAtC,EAA2CJ,KAAK,CAACQ,MAAjD,CAAd;AACD;;AACD,MAAI,CAACH,WAAL,EAAkB,OAAOX,UAAP,CAfuD,CAgBzE;AACA;;AACAW,EAAAA,WAAW,GAAGA,WAAW,CAACI,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACf,IAAF,KAAWA,IAArC,CAAd;AACA,QAAMgB,YAAY,GAAGd,SAAS,CAACe,GAAV,CAAc,OAAd,EAAuBP,WAAvB,CAArB;AACAX,EAAAA,UAAU,CAACmB,OAAX,CAAmB,QAAnB,EAA6BF,YAA7B;AACA,SAAOjB,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASoB,iBAAT,CAA2BpB,UAA3B,EAAmDG,SAAnD,EAAyEF,IAAzE,EAAuF;AAC5F,QAAM;AAAEC,IAAAA;AAAF,MAAeF,UAAU,CAACI,KAAhC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBF,SAAxB;;AAEA,MAAI,CAACE,WAAL,EAAkB;AAChB;AACA,UAAMgB,gBAAgB,GAAGnB,QAAQ,CAACoB,eAAT,CAAyBnB,SAAzB,EAAoCY,MAApC,CAA4CC,CAAD,IAAOA,CAAC,CAACf,IAAF,KAAWA,IAA7D,CAAzB;AACAoB,IAAAA,gBAAgB,CAACE,OAAjB,CAA0BP,CAAD,IAAO;AAC9BhB,MAAAA,UAAU,CAACmB,OAAX,CAAmBK,sBAASJ,iBAA5B,EAA+CjB,SAA/C,EAA0Da,CAA1D;AACD,KAFD,EAHgB,CAMhB;;AACA,WAAOjB,2BAA2B,CAACC,UAAD,EAAaC,IAAb,CAAlC;AACD;;AAED,QAAM;AAAEK,IAAAA;AAAF,MAAYH,SAAS,CAACI,mBAAV,CAA8BL,QAA9B,CAAlB;AACA,QAAMM,SAAS,GAAGN,QAAQ,CAACO,OAAT,CAAiBH,KAAK,CAACI,GAAvB,CAAlB;AACA,MAAI,CAACF,SAAL,EAAgB,OAAOR,UAAP;AAEhB,QAAMyB,2BAA2B,GAAGzB,UAAU,CAAC0B,KAAX,CAAiB,6BAAjB,EAAgDvB,SAAhD,CAApC;AACA,QAAMwB,yBAAyB,GAAG3B,UAAU,CAAC0B,KAAX,CAAiB,2BAAjB,EAA8CvB,SAA9C,CAAlC;;AAEA,MAAIsB,2BAA2B,IAAIE,yBAAnC,EAA8D;AAC5D;AACA,QAAInB,SAAS,IAAIoB,kBAAKC,MAAL,CAAYrB,SAAZ,CAAjB,EAAyC;AACvC,YAAMa,gBAAgB,GAAGnB,QAAQ,CAACW,kBAAT,CAA4BL,SAAS,CAACE,GAAtC,EAA2C,CAA3C,EAA8CK,MAA9C,CAAsDC,CAAD,IAAOA,CAAC,CAACf,IAAF,KAAWA,IAAvE,CAAzB;AACAoB,MAAAA,gBAAgB,CAACE,OAAjB,CAA0BP,CAAD,IAAO;AAC9BhB,QAAAA,UAAU,CAACmB,OAAX,CAAmBK,sBAASM,eAA5B,EAA6CtB,SAAS,CAACE,GAAvD,EAA4D,CAA5D,EAA+D,CAA/D,EAAkEM,CAAlE;AACD,OAFD;AAGD;AACF;;AAED,SAAOjB,2BAA2B,CAACC,UAAD,EAAaC,IAAb,CAAlC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS8B,wBAAT,CAAkC/B,UAAlC,EAA0DC,IAA1D,EAAwE;AAC7E,QAAM+B,UAAU,GAAG,8CAAoBhC,UAApB,CAAnB;AACAgC,EAAAA,UAAU,CAACT,OAAX,CAAoBpB,SAAD,IAAeiB,iBAAiB,CAACpB,UAAD,EAAaG,SAAb,EAAwBF,IAAxB,CAAnD;AACA,SAAOD,UAAP;AACD","sourcesContent":["import {\n  Controller,\n  Commands,\n  Text,\n  Mark,\n  Selection,\n} from '@ali/4ever-cangjie';\nimport { getRangesFromEditor } from './getRangesFromEditor';\n\n/**\n * 移除当前位置的临时样式\n * @param controller \n * @param type \n * @returns \n */\nfunction removeMarkAtCurrentPosition(controller: Controller, type: string) {\n  const { document, selection } = controller.value;\n  const { isCollapsed } = selection;\n  const { focus } = selection.convertToTextPoints(document);\n  const focusNode = document.getNode(focus.key);\n  if (!focusNode) return controller;\n  /**\n   * 优先级: selection.marks > marksAtPosition\n   * selection.marks = [] 代表临时的、强制的清空样式的状态\n   */\n  let curPosMarks: Mark[] | null = selection.marks;\n  if (isCollapsed && !curPosMarks) {\n    // collapsed 状态需要 getMarksAtPosition，例如在一段加粗和红色文本中单独取消加粗，此时是设置临时的 selection.marks，不落库\n    curPosMarks = document.getMarksAtPosition(focusNode.key, focus.offset);\n  }\n  if (!curPosMarks) return controller;\n  // 同类型的文本样式仅允许存在一个，这里直接 filter\n  // 特殊业务（例如评论）允许多个存在可以使用 setUtils.remove\n  curPosMarks = curPosMarks.filter((m) => m.type !== type);\n  const newSelection = selection.set('marks', curPosMarks);\n  controller.command('select', newSelection);\n  return controller;\n}\n\n/**\n * 在给定选区内删除指定类型的 mark\n * 策略同 removeMarkAtCurrentRange\n * @param controller\n * @param selection\n * @param type\n */\nexport function removeMarkAtRange(controller: Controller, selection: Selection, type: string) {\n  const { document } = controller.value;\n  const { isCollapsed } = selection;\n\n  if (!isCollapsed) {\n    // 1\n    const needRemovedMarks = document.getMarksAtRange(selection).filter((m) => m.type === type);\n    needRemovedMarks.forEach((m) => {\n      controller.command(Commands.removeMarkAtRange, selection, m);\n    });\n    // 即使是 isExpanded 也需要 removeMarkAtCurrentPosition，例如标题变为普通段落\n    return removeMarkAtCurrentPosition(controller, type);\n  }\n\n  const { focus } = selection.convertToTextPoints(document);\n  const focusNode = document.getNode(focus.key);\n  if (!focusNode) return controller;\n\n  const isCollapsedAtEmptyParagraph = controller.query('isCollapsedAtEmptyParagraph', selection) as boolean;\n  const isCollapsedAtEmptyHeading = controller.query('isCollapsedAtEmptyHeading', selection) as boolean;\n\n  if (isCollapsedAtEmptyParagraph || isCollapsedAtEmptyHeading) {\n    // 2\n    if (focusNode && Text.isText(focusNode)) {\n      const needRemovedMarks = document.getMarksAtPosition(focusNode.key, 0).filter((m) => m.type === type);\n      needRemovedMarks.forEach((m) => {\n        controller.command(Commands.removeMarkByKey, focusNode.key, 0, 0, m);\n      });\n    }\n  }\n\n  return removeMarkAtCurrentPosition(controller, type);\n}\n\n/**\n * 在当前选区内删除指定类型的 mark\n * 1. 未闭合时策略：清除选区内样式\n * 2. 闭合时策略：\n *  2.1 如果是 isCollapsedAtEmptyParagraph/Heading 时需要清除选区临时样式，也需要清除 text 节点的mark（操作可持久化），对应的场景有二：\n *    a. 表格选区中的空 cell；\n *    b. focus 在空段落（paragraph 和 heading）\n *  2.2 边缘闭合选区：仅设置选区的临时样式，对应的场景：focus 在分割线、卡片、表格等左右\n *  2.3 focus 在段落中以及其它情形：仅设置选区的临时样式\n * @param controller\n * @param type 类型\n */\nexport function removeMarkAtCurrentRange(controller: Controller, type: string) {\n  const selections = getRangesFromEditor(controller);\n  selections.forEach((selection) => removeMarkAtRange(controller, selection, type));\n  return controller;\n}\n"],"file":"removeMarkAtCurrentRange.js"}