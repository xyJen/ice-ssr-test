"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactDom = _interopRequireDefault(require("react-dom"));

/**
 * 计算插件宽高
 * Tips: ReactDOM.render 在无其他 render 任务时会同步执行，有其他 render 时会变成异步方法
 * @param node 实例
 * @param containerWidth 容器宽度（eg: 取值兼容 pc 端容器宽度）
 * @param currentElement 当前实例渲染节点（查找仓颉父容器）
 */
const calculatedPluginSize = async (node, containerWidth, currentElement) => {
  return new Promise(resolve => {
    const {
      body
    } = window.document;
    const root = currentElement?.closest('div[data-cangjie-content]') || body.querySelector('div[data-cangjie-content]') || body;
    const div = window.document.createElement('div');
    div.style.width = (typeof containerWidth === 'number' ? `${containerWidth}px` : containerWidth) || '';
    root.appendChild(div);

    _reactDom.default.render(node, div, () => {
      let target = div.firstElementChild;

      if (!target) {
        target = div;
        target.style.display = 'inline';
      }

      const width = target.offsetWidth;
      const height = target.offsetHeight;
      div.remove();
      return resolve({
        width,
        height
      });
    });
  });
};

var _default = calculatedPluginSize;
exports.default = _default;
//# sourceMappingURL=calculatedPluginSize.js.map