{"version":3,"sources":["../../../src/utils/Cache.ts"],"names":["SimpleCache","constructor","capacity","Infinity","size","backup","Object","create","cache","update","key","value","get","undefined","set","has","remove","clear"],"mappings":";;;;;;;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACe,MAAMA,WAAN,CAAiD;AAC9D;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;;AAGE;AACF;AACA;AAGEC,EAAAA,WAAW,CAACC,QAAQ,GAAGC,QAAZ,EAAsB;AAAA,SAjBhBD,QAiBgB;AAAA,SAZzBE,IAYyB,GAZlB,CAYkB;AAAA,SAPzBC,MAOyB,GAPhBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAOgB;AAAA,SAFzBC,KAEyB,GAFjBF,MAAM,CAACC,MAAP,CAAc,IAAd,CAEiB;AAC/B,SAAKL,QAAL,GAAgBA,QAAhB;AACD;;AAEOO,EAAAA,MAAR,CAAeC,GAAf,EAA4BC,KAA5B,EAAsC;AACpC,SAAKP,IAAL,IAAa,CAAb;AACA,SAAKI,KAAL,CAAWE,GAAX,IAAkBC,KAAlB;;AACA,QAAI,KAAKP,IAAL,IAAa,KAAKF,QAAtB,EAAgC;AAC9B,WAAKE,IAAL,GAAY,CAAZ;AACA,WAAKC,MAAL,GAAc,KAAKG,KAAnB;AACA,WAAKA,KAAL,GAAaF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAb;AACD;AACF;;AAEDK,EAAAA,GAAG,CAACF,GAAD,EAAwB;AACzB,QAAIC,KAAK,GAAG,KAAKH,KAAL,CAAWE,GAAX,CAAZ;;AACA,QAAIC,KAAK,KAAKE,SAAd,EAAyB;AACvB,aAAOF,KAAP;AACD;;AACDA,IAAAA,KAAK,GAAG,KAAKN,MAAL,CAAYK,GAAZ,CAAR;;AACA,QAAIC,KAAK,KAAKE,SAAd,EAAyB;AACvB,WAAKJ,MAAL,CAAYC,GAAZ,EAAiBC,KAAjB;AACA,aAAOA,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDG,EAAAA,GAAG,CAACJ,GAAD,EAAcC,KAAd,EAA8B;AAC/B,QAAI,KAAKH,KAAL,CAAWE,GAAX,MAAoBG,SAAxB,EAAmC;AACjC,WAAKL,KAAL,CAAWE,GAAX,IAAkBC,KAAlB;AACD,KAFD,MAEO;AACL,WAAKF,MAAL,CAAYC,GAAZ,EAAiBC,KAAjB;AACD;AACF;;AAEDI,EAAAA,GAAG,CAACL,GAAD,EAAuB;AACxB,WAAQA,GAAG,IAAI,KAAKF,KAAb,IAAwBE,GAAG,IAAI,KAAKL,MAA3C;AACD;;AAEDW,EAAAA,MAAM,CAACN,GAAD,EAAwB;AAC5B,QAAIC,KAAK,GAAG,KAAKH,KAAL,CAAWE,GAAX,CAAZ;;AACA,QAAIC,KAAK,KAAKE,SAAd,EAAyB;AACvB,WAAKT,IAAL,IAAa,CAAb;AACA,aAAO,KAAKI,KAAL,CAAWE,GAAX,CAAP;AACD,KAHD,MAGO;AACLC,MAAAA,KAAK,GAAG,KAAKN,MAAL,CAAYK,GAAZ,CAAR;AACD;;AACD,WAAO,KAAKL,MAAL,CAAYK,GAAZ,CAAP;AACA,WAAOC,KAAK,IAAI,IAAhB;AACD;;AAEDM,EAAAA,KAAK,GAAS;AACZ,SAAKb,IAAL,GAAY,CAAZ;AACA,SAAKI,KAAL,GAAaF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAb;AACA,SAAKF,MAAL,GAAcC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAd;AACD;;AA5E6D","sourcesContent":["\n/**\n * 一般 K/V Cache 类型\n */\nexport interface Cache<K, V> {\n  get(key: K): V | null;\n  set(key: K, value: V): void;\n  has(key: K): boolean;\n  remove(key: K): V | null;\n  clear(): void;\n}\n\n/**\n * 简单 K/V cache 缓存\n * @param capacity 容量 - (真实的缓存容量会大 1 位)\n */\nexport default class SimpleCache<T> implements Cache<string, T> {\n  /**\n   * 缓存池容量\n   */\n  private readonly capacity: number;\n\n  /**\n   * 当前缓存池的大小\n   */\n  private size = 0;\n\n  /**\n   * 备份缓存池\n   */\n  private backup = Object.create(null);\n\n  /**\n   * 当前缓存池\n   */\n  private cache = Object.create(null);\n\n  constructor(capacity = Infinity) {\n    this.capacity = capacity;\n  }\n\n  private update(key: string, value: T) {\n    this.size += 1;\n    this.cache[key] = value;\n    if (this.size >= this.capacity) {\n      this.size = 0;\n      this.backup = this.cache;\n      this.cache = Object.create(null);\n    }\n  }\n\n  get(key: string): T | null {\n    let value = this.cache[key];\n    if (value !== undefined) {\n      return value;\n    }\n    value = this.backup[key];\n    if (value !== undefined) {\n      this.update(key, value);\n      return value;\n    }\n    return null;\n  }\n\n  set(key: string, value: T): void {\n    if (this.cache[key] !== undefined) {\n      this.cache[key] = value;\n    } else {\n      this.update(key, value);\n    }\n  }\n\n  has(key: string): boolean {\n    return (key in this.cache) || (key in this.backup);\n  }\n\n  remove(key: string): T | null {\n    let value = this.cache[key];\n    if (value !== undefined) {\n      this.size -= 1;\n      delete this.cache[key];\n    } else {\n      value = this.backup[key];\n    }\n    delete this.backup[key];\n    return value || null;\n  }\n\n  clear(): void {\n    this.size = 0;\n    this.cache = Object.create(null);\n    this.backup = Object.create(null);\n  }\n}\n"],"file":"Cache.js"}