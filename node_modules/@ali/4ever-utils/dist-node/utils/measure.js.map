{"version":3,"sources":["../../../src/utils/measure.ts"],"names":["CJK_REG","MEASURE_CACHE_SIZE","CJK_REG_GLOBAL","TEXT_SSR_WIDTH","getTextWidthOnServer","text","fontSize","zhChars","match","width","length","height","Measure","container","measurer","measureCache","SimpleCache","measureSingleText","font","sz","environment","IS_NODE","parseFloat","measureText","test","cacheKey","cache","get","ensureMeasurer","textContent","style","fontFamily","rect","getBoundingClientRect","measureInfo","set","measureTextWidth","chars","textWidth","i","warmup","batch","tasks","Object","keys","forEach","char","fontFamilies","sizes","size","push","map","task","document","createElement","appendChild","removeChild","bottom","position","visibility","zIndex","whiteSpace","body"],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEO,MAAMA,OAAO,GAAG,iBAAhB;;AACP,MAAMC,kBAAkB,GAAG,IAA3B;AACA,MAAMC,cAAc,GAAG,mBAAvB;AACA,MAAMC,cAAc,GAAG;AACrB,OAAK,KADgB;AAErB,OAAK;AAFgB,CAAvB;;AAYA;AACA;AACA;AACA;AACA;AACO,SAASC,oBAAT,CAA8BC,IAA9B,EAA4CC,QAA5C,EAA8D;AACnE,QAAMC,OAAO,GAAGF,IAAI,CAACG,KAAL,CAAWN,cAAX,KAA8B,EAA9C;AACA,QAAMO,KAAK,GACX,CAACF,OAAO,CAACG,MAAR,GAAiB,CAACL,IAAI,CAACK,MAAL,GAAcH,OAAO,CAACG,MAAvB,IAAiC,CAAnD,IAAwDJ,QADxD;AAEA,SAAO;AACL;AACAG,IAAAA,KAAK,EAAE,CAACN,cAAc,CAACE,IAAD,CAAd,IAAwB,CAAzB,IAA8BI,KAFhC;AAGLE,IAAAA,MAAM,EAAEL;AAHH,GAAP;AAKD;;AAQD,MAAMM,OAAN,CAAc;AAAA;AAAA,SACJC,SADI;AAAA,SAEJC,QAFI;AAAA,SAGKC,YAHL,GAGoB,IAAIC,cAAJ,CAC9Bf,kBAD8B,CAHpB;;AAAA,SAyBZgB,iBAzBY,GAyBQ,CAACZ,IAAD,EAAea,IAAf,EAA6BC,EAA7B,KAAyD;AAC3E,UAAIC,yBAAYC,OAAhB,EAAyB;AACvB,eAAOjB,oBAAoB,CAACC,IAAD,EAAOiB,UAAU,CAACH,EAAD,CAAjB,CAA3B;AACD;;AACD,UAAII,WAAW,GAAGlB,IAAlB;;AAEA,UAAIA,IAAI,CAACK,MAAL,KAAgB,CAAhB,IAAqBV,OAAO,CAACwB,IAAR,CAAanB,IAAb,CAAzB,EAA6C;AAC3CkB,QAAAA,WAAW,GAAG,GAAd;AACD;;AAED,YAAME,QAAQ,GAAGF,WAAW,GAAGL,IAAd,GAAqBC,EAAtC;AACA,YAAMO,KAAK,GAAG,KAAKX,YAAL,CAAkBY,GAAlB,CAAsBF,QAAtB,CAAd;;AACA,UAAIC,KAAJ,EAAW;AACT,eAAOA,KAAP;AACD;;AAED,WAAKE,cAAL;AACA,WAAKd,QAAL,CAAce,WAAd,GAA4BN,WAA5B;AACA,WAAKT,QAAL,CAAcgB,KAAd,CAAoBC,UAApB,GAAiCb,IAAI,IAAI,OAAzC;AACA,WAAKJ,QAAL,CAAcgB,KAAd,CAAoBxB,QAApB,GAA+Ba,EAAE,IAAI,OAArC;AAEA,YAAMa,IAAI,GAAG,KAAKlB,QAAL,CAAcmB,qBAAd,EAAb;AACA,YAAMC,WAAW,GAAG;AAAEzB,QAAAA,KAAK,EAAEuB,IAAI,CAACvB,KAAd;AAAqBE,QAAAA,MAAM,EAAEqB,IAAI,CAACrB;AAAlC,OAApB;AACA,WAAKI,YAAL,CAAkBoB,GAAlB,CAAsBV,QAAtB,EAAgCS,WAAhC;AAEA,aAAOA,WAAP;AACD,KAnDW;;AAAA,SAqDZE,gBArDY,GAqDO,CAACC,KAAD,EAAgBnB,IAAhB,EAA8BC,EAA9B,KAAqD;AACtE,UAAImB,SAAS,GAAG,CAAhB,CADsE,CAEtE;;AACA,WAAK,IAAIC,CAAC,GAAGF,KAAK,CAAC3B,MAAN,GAAe,CAA5B,EAA+B6B,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AAC1C,cAAML,WAAW,GAAG,KAAKjB,iBAAL,CAAuBoB,KAAK,CAACE,CAAD,CAA5B,EAAiCrB,IAAjC,EAAuCC,EAAvC,CAApB;AACAmB,QAAAA,SAAS,IAAIJ,WAAW,CAACzB,KAAzB;AACD;;AACD,aAAO6B,SAAP;AACD,KA7DW;;AAAA,SA+DZE,MA/DY,GA+DFC,KAAD,IAAwB;AAC/B,YAAMC,KAAgE,GAAG,EAAzE;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA4BC,IAAD,IAAU;AACnC,cAAMC,YAAY,GAAGN,KAAK,CAACK,IAAD,CAA1B;AACAH,QAAAA,MAAM,CAACC,IAAP,CAAYG,YAAZ,EAA0BF,OAA1B,CAAmCd,UAAD,IAAgB;AAChD,gBAAMiB,KAAK,GAAGD,YAAY,CAAChB,UAAD,CAA1B;AACAiB,UAAAA,KAAK,CAACH,OAAN,CAAeI,IAAD,IAAU;AACtBP,YAAAA,KAAK,CAACQ,IAAN,CAAW;AAAEJ,cAAAA,IAAF;AAAQf,cAAAA,UAAR;AAAoBkB,cAAAA;AAApB,aAAX;AACD,WAFD;AAGD,SALD;AAMD,OARD;AAUA,WAAKrB,cAAL;AACA,YAAM;AAAEf,QAAAA;AAAF,UAAgB,IAAtB;AACA6B,MAAAA,KAAK,CACFS,GADH,CACQC,IAAD,IAAU;AACb,cAAMtC,QAAQ,GAAGuC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAjB;AACAxC,QAAAA,QAAQ,CAACe,WAAT,GAAuBuB,IAAI,CAACN,IAA5B;AACAhC,QAAAA,QAAQ,CAACgB,KAAT,CAAeC,UAAf,GAA4BqB,IAAI,CAACrB,UAAL,IAAmB,OAA/C;AACAjB,QAAAA,QAAQ,CAACgB,KAAT,CAAexB,QAAf,GAA0B8C,IAAI,CAACH,IAAL,IAAa,OAAvC;AACApC,QAAAA,SAAS,CAAC0C,WAAV,CAAsBzC,QAAtB;AACA,eAAO;AAAEsC,UAAAA,IAAF;AAAQtC,UAAAA;AAAR,SAAP;AACD,OARH,EASGqC,GATH,CASO,CAAC;AAAEC,QAAAA,IAAF;AAAQtC,QAAAA;AAAR,OAAD,KAAwB;AAC3B,cAAMW,QAAQ,GAAG2B,IAAI,CAACN,IAAL,GAAYM,IAAI,CAACrB,UAAjB,GAA8BqB,IAAI,CAACH,IAApD;AACA,cAAMjB,IAAI,GAAGlB,QAAQ,CAACmB,qBAAT,EAAb;AACA,cAAMC,WAAW,GAAG;AAAEzB,UAAAA,KAAK,EAAEuB,IAAI,CAACvB,KAAd;AAAqBE,UAAAA,MAAM,EAAEqB,IAAI,CAACrB;AAAlC,SAApB;AACA,aAAKI,YAAL,CAAkBoB,GAAlB,CAAsBV,QAAtB,EAAgCS,WAAhC;AACA,eAAOpB,QAAP;AACD,OAfH,EAgBG+B,OAhBH,CAgBY/B,QAAD,IAAcD,SAAS,CAAC2C,WAAV,CAAsB1C,QAAtB,CAhBzB;AAiBD,KA9FW;AAAA;;AAOZc,EAAAA,cAAc,GAAG;AACf,QAAI,CAAC,KAAKf,SAAV,EAAqB;AACnB,YAAMA,SAAS,GAAGwC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAlB;AACAzC,MAAAA,SAAS,CAACiB,KAAV,CAAgB2B,MAAhB,GAAyB,QAAzB;AACA5C,MAAAA,SAAS,CAACiB,KAAV,CAAgB4B,QAAhB,GAA2B,OAA3B;AACA7C,MAAAA,SAAS,CAACiB,KAAV,CAAgB6B,UAAhB,GAA6B,QAA7B;AACA9C,MAAAA,SAAS,CAACiB,KAAV,CAAgB8B,MAAhB,GAAyB,MAAzB;AACA/C,MAAAA,SAAS,CAACiB,KAAV,CAAgB+B,UAAhB,GAA6B,QAA7B;AACAR,MAAAA,QAAQ,CAACS,IAAT,CAAcP,WAAd,CAA0B1C,SAA1B;AACA,WAAKA,SAAL,GAAiBA,SAAjB;AACD;;AACD,QAAI,CAAC,KAAKC,QAAV,EAAoB;AAClB,YAAMA,QAAQ,GAAGuC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAjB;AACA,WAAKzC,SAAL,CAAe0C,WAAf,CAA2BzC,QAA3B;AACA,WAAKA,QAAL,GAAgBA,QAAhB;AACD;AACF;;AAvBW;;eAiGCF,O","sourcesContent":["import { environment } from '@ali/4ever-cangjie';\nimport SimpleCache from './Cache';\n\nexport const CJK_REG = /[\\u4E00-\\u9FA5]/;\nconst MEASURE_CACHE_SIZE = 1000;\nconst CJK_REG_GLOBAL = /[\\u4E00-\\u9FA5]/ig;\nconst TEXT_SSR_WIDTH = {\n  '.': 1.225,\n  ')': 1.38,\n};\n\ninterface MeasureInfo {\n  width: number;\n  height: number;\n}\n\ntype FontSize = string;\n\n/**\n * 供非 Web 端粗略计算字符宽高使用\n * 中文字符（宽 = fontSize, 高 = fontSize）\n * 非中文字符（宽= fontSize / 2, 高 = fontSize）\n */\nexport function getTextWidthOnServer(text: string, fontSize: number) {\n  const zhChars = text.match(CJK_REG_GLOBAL) || [];\n  const width =\n  (zhChars.length + (text.length - zhChars.length) / 2) * fontSize;\n  return {\n    // TEXT_SSR_WIDTH 纯粹为了对齐实际测量结果\n    width: (TEXT_SSR_WIDTH[text] || 1) * width,\n    height: fontSize,\n  };\n}\n\nexport interface WarmupBatch {\n  [key: string /* Char */]: {\n    [key: string /* FontFamily */]: Set<FontSize>;\n  };\n}\n\nclass Measure {\n  private container!: HTMLDivElement;\n  private measurer!: HTMLSpanElement;\n  private readonly measureCache = new SimpleCache<MeasureInfo>(\n    MEASURE_CACHE_SIZE,\n  );\n\n  ensureMeasurer() {\n    if (!this.container) {\n      const container = document.createElement('div');\n      container.style.bottom = '-100px';\n      container.style.position = 'fixed';\n      container.style.visibility = 'hidden';\n      container.style.zIndex = '-999';\n      container.style.whiteSpace = 'nowrap';\n      document.body.appendChild(container);\n      this.container = container;\n    }\n    if (!this.measurer) {\n      const measurer = document.createElement('span');\n      this.container.appendChild(measurer);\n      this.measurer = measurer;\n    }\n  }\n\n  measureSingleText = (text: string, font: string, sz: string): MeasureInfo => {\n    if (environment.IS_NODE) {\n      return getTextWidthOnServer(text, parseFloat(sz));\n    }\n    let measureText = text;\n\n    if (text.length === 1 && CJK_REG.test(text)) {\n      measureText = '中';\n    }\n\n    const cacheKey = measureText + font + sz;\n    const cache = this.measureCache.get(cacheKey);\n    if (cache) {\n      return cache;\n    }\n\n    this.ensureMeasurer();\n    this.measurer.textContent = measureText;\n    this.measurer.style.fontFamily = font || 'unset';\n    this.measurer.style.fontSize = sz || 'unset';\n\n    const rect = this.measurer.getBoundingClientRect();\n    const measureInfo = { width: rect.width, height: rect.height };\n    this.measureCache.set(cacheKey, measureInfo);\n\n    return measureInfo;\n  };\n\n  measureTextWidth = (chars: string, font: string, sz: string): number => {\n    let textWidth = 0;\n    // TODO: 不会有性能问题么，不能一次性测量完？\n    for (let i = chars.length - 1; i >= 0; i--) {\n      const measureInfo = this.measureSingleText(chars[i], font, sz);\n      textWidth += measureInfo.width;\n    }\n    return textWidth;\n  };\n\n  warmup = (batch: WarmupBatch) => {\n    const tasks: Array<{ char: string; fontFamily: string; size: string }> = [];\n    Object.keys(batch).forEach((char) => {\n      const fontFamilies = batch[char];\n      Object.keys(fontFamilies).forEach((fontFamily) => {\n        const sizes = fontFamilies[fontFamily];\n        sizes.forEach((size) => {\n          tasks.push({ char, fontFamily, size });\n        });\n      });\n    });\n\n    this.ensureMeasurer();\n    const { container } = this;\n    tasks\n      .map((task) => {\n        const measurer = document.createElement('span');\n        measurer.textContent = task.char;\n        measurer.style.fontFamily = task.fontFamily || 'unset';\n        measurer.style.fontSize = task.size || 'unset';\n        container.appendChild(measurer);\n        return { task, measurer };\n      })\n      .map(({ task, measurer }) => {\n        const cacheKey = task.char + task.fontFamily + task.size;\n        const rect = measurer.getBoundingClientRect();\n        const measureInfo = { width: rect.width, height: rect.height };\n        this.measureCache.set(cacheKey, measureInfo);\n        return measurer;\n      })\n      .forEach((measurer) => container.removeChild(measurer));\n  };\n}\n\nexport default Measure;\n"],"file":"measure.js"}