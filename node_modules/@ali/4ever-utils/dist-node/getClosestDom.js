"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findDOMNodeByKey = findDOMNodeByKey;
exports.isListNode = isListNode;
exports.getClosestDom = getClosestDom;

var _everCangjie = require("@ali/4ever-cangjie");

const {
  key: cangjieKey
} = _everCangjie.constants.Selector;

function findDOMNodeByKey(key) {
  return window.document.body.querySelector(`[${cangjieKey}="${key}"]`);
}

function isListNode(node) {
  if (_everCangjie.Block.isBlock(node)) {
    // 排版模式下 data.list 未下放到 nodes.nodes 中
    return node.data.list || node.data.pi?.extra?.inList;
  }

  return false;
}

function getClosestDom(node) {
  let nodeDom = null;
  if (!node?.key) return nodeDom;

  try {
    nodeDom = findDOMNodeByKey(node.key);
    if (!nodeDom) return null;

    if (_everCangjie.Inline.isInline(node) && node.type === 'image') {
      nodeDom = nodeDom.querySelector('img');
    } else if (_everCangjie.Block.isBlock(node)) {
      nodeDom = nodeDom.closest(`[${_everCangjie.constants.Selector.leafBlock}]`) || nodeDom;
    }

    if (nodeDom && node.data.blockquote) {
      // 引用
      nodeDom = nodeDom.closest('blockquote') || nodeDom;
    } else if (nodeDom && isListNode(node)) {
      // 列表和任务
      nodeDom = nodeDom.closest('[data-testid="list"]') || nodeDom;
    } else if (nodeDom && node.data.calloutPr) {
      nodeDom = nodeDom.closest('[data-cangjie-group-block]') || nodeDom;
    }

    return nodeDom;
  } catch (e) {// do nothing
  }

  return nodeDom;
}
//# sourceMappingURL=getClosestDom.js.map