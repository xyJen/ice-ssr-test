"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCssLength = isCssLength;
exports.isWidth = isWidth;
exports.isBorderStyle = isBorderStyle;
exports.cssBorderParse = cssBorderParse;
exports.convertBorderToData = convertBorderToData;
exports.praseCSSBackground = praseCSSBackground;
exports.parseCSSSides = parseCSSSides;
exports.parseCSSMargin = parseCSSMargin;
exports.parseCSSPadding = parseCSSPadding;
exports.isNumeric = isNumeric;
exports.isCSSAbsoluteLength = isCSSAbsoluteLength;
exports.parseCSSAbsoluteLength = parseCSSAbsoluteLength;
exports.isCSSPercent = isCSSPercent;
exports.parseCSSPercent = parseCSSPercent;

var _tinycolor = require("@ctrl/tinycolor");

function assertNever(x) {
  console.warn('Unexpected value:', x);
}
/**
 * 效验是否符合 css 长度单位标准
 * @param str
 */


function isCssLength(str) {
  const length = /^(\+|-)?([0-9]*\.)?[0-9]+(em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|%)$/i;
  const zero = /^(\+|-)?(0*\.)?0+$/;
  return length.test(str) || zero.test(str);
}
/**
 * 效验是否服务 css width 值标准
 * @param str
 */


function isWidth(str) {
  return isCssLength(str) || str === 'thin' || str === 'medium' || str === 'thick';
}
/**
 * 效验是否是 css border style
 * @param str
 */


function isBorderStyle(str) {
  const value = /^(none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset)$/i;
  return value.test(str);
}

function checkCssBorder(val) {
  if (new _tinycolor.TinyColor(val).isValid) return 'color';
  if (isWidth(val)) return 'width';
  if (isBorderStyle(val)) return 'style';
  return null;
}

function cssBorderParse(str) {
  const value = str.split(' ');
  const ret = {};
  value.forEach(v => {
    const prop = checkCssBorder(v);

    if (prop) {
      ret[prop] = v;
    }
  });
  return ret;
}

function isValidBorder(value) {
  if (value === 'single') return true;
  if (value === 'dashed') return true;
  return false;
}

function convertBorderToData(parsed) {
  let sz = 1;

  if (parsed.width) {
    const w = parseFloat(parseCSSAbsoluteLength(parsed.width));
    sz = Math.round(w) || Math.ceil(w);
  }

  return {
    val: isValidBorder(parsed.style) ? parsed.style : 'single',
    sz,
    color: `#${new _tinycolor.TinyColor(parsed.color).toHex()}`
  };
}
/**
 * 解析 css 的 background 属性（目前只支持 color）
 * @param value
 */


function praseCSSBackground(value) {
  const values = value.split(' ');
  return values.reduce((prev, val) => {
    if (new _tinycolor.TinyColor(val).isValid) {
      return { ...prev,
        backgroundColor: val
      };
    }

    return prev;
  }, {});
}

/**
 * 解析 css 边距单位
 * @param value
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/padding
 */
function parseCSSSides(value) {
  // 解析前先去除多余的空白符
  const sides = value.replace(/\s+/g, ' ').split(' ');

  if (sides.length === 1) {
    const [side] = sides;
    return {
      top: side,
      right: side,
      bottom: side,
      left: side
    };
  }

  if (sides.length === 2) {
    const [vertical, horizontal] = sides;
    return {
      top: vertical,
      right: horizontal,
      bottom: vertical,
      left: horizontal
    };
  }

  if (sides.length === 3) {
    const [top, horizontal, bottom] = sides;
    return {
      top,
      right: horizontal,
      bottom,
      left: horizontal
    };
  }

  if (sides.length === 4) {
    const [top, right, bottom, left] = sides;
    return {
      top,
      right,
      bottom,
      left
    };
  }

  return {
    top: '',
    right: '',
    bottom: '',
    left: ''
  };
}
/**
 * 解析 css margin 参数
 * @param value
 */


function parseCSSMargin(value) {
  const sides = parseCSSSides(value);
  const {
    top,
    right,
    bottom,
    left
  } = sides;
  return {
    marginTop: top,
    marginRight: right,
    marginBottom: bottom,
    marginLeft: left
  };
}
/**
 * 解析 css padding 参数
 * @param value
 */


function parseCSSPadding(value) {
  const sides = parseCSSSides(value);
  const {
    top,
    right,
    bottom,
    left
  } = sides;
  return {
    paddingTop: top,
    paddingRight: right,
    paddingBottom: bottom,
    paddingLeft: left
  };
}
/**
 * 效验一个值是否符合数字规范
 * @param num 效验值
 * @see https://stackoverflow.com/questions/175739/built-in-way-in-javascript-to-check-if-a-string-is-a-valid-number
 * @description 注意一下 lodash 的 isNaN 和浏览器 API 有点不同，12px 这个值在 lodash 中会认为不是 NaN
 */


function isNumeric(num) {
  return !isNaN(Number(num));
}

function inchesToUnit(num, to) {
  switch (to) {
    case 'cm':
      return num * 2.54;

    case 'mm':
      return num * 10 * 2.54;

    case 'Q':
      return num * 40 * 2.54;

    case 'in':
      return num;

    case 'pc':
      return num * 6;

    case 'pt':
      return num * 72;

    case 'px':
      return num * 96;

    default:
      assertNever(to);
      break;
  }

  return num;
}

function unitToInches(num, from) {
  switch (from) {
    case 'cm':
      return num / 2.54;

    case 'mm':
      return num / 10 / 2.54;

    case 'Q':
      return num / 40 / 2.54;

    case 'in':
      return num;

    case 'pc':
      return num / 6;

    case 'pt':
      return num / 72;

    case 'px':
      return num / 96;

    default:
      assertNever(from);
      break;
  }

  return num;
}

const ABS_L_REG = /^(\d*\.?\d*)(cm|mm|Q|in|pc|pt|px)$/;
/**
 * 测试一个值是否是绝对单位
 * @param value
 */

function isCSSAbsoluteLength(value) {
  const length = isNumeric(value || '') ? `${value}px` : `${value}`;
  return ABS_L_REG.test(`${length}`);
}
/**
 * 解析 CSS 绝对长度单位，默认的目标单位是 px，value 值若为 number 则断言为 px 单位
 * @param value 原始值
 * @param unit 目标单位
 * @see https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#Lengths
 * @example 1in = 2.54cm = 96px
 *
 * Unit |  Name                 | Equivalent to
 *  cm  |  Centimeters          | 1cm = 96px/2.54
 *  mm  |  Millimeters          | 1mm = 1/10th of 1cm
 *  Q   |  Quarter-millimeters  | 1Q  = 1/40th of 1cm
 *  in  |  Inches               | 1in = 2.54cm = 96px
 *  pc  |  Picas                | 1pc = 1/6th of 1in
 *  pt  |  Points               | 1pt = 1/72th of 1in
 *  px  |  Pixels               | 1px = 1/96th of 1in
 */


function parseCSSAbsoluteLength(value, unit = 'px') {
  const length = isNumeric(value) ? `${value}px` : `${value}`;
  const match = length.match(ABS_L_REG);

  if (match) {
    // [原始值, 数字组, 单位组]
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [_, n, u] = match;
    const num = parseFloat(n);

    if (!isNaN(num)) {
      return inchesToUnit(unitToInches(num, u), unit) + unit;
    }
  }

  return 0 + unit;
}

const PERCENT_REG = /^(\d*\.?\d*)(%)$/;
/**
 * 测试一个值是否是 css 百分比单位
 * @param value
 */

function isCSSPercent(value) {
  return PERCENT_REG.test(value);
}
/**
 * 解析 css 百分比单位
 * @param value
 */


function parseCSSPercent(value) {
  const match = value.match(PERCENT_REG);

  if (match) {
    // [原始值, 数字组, 百分号]
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [_, n] = match;
    const num = parseFloat(n);

    if (!isNaN(num)) {
      return num / 100;
    }
  }

  return NaN;
}
//# sourceMappingURL=cssUtils.js.map