"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Creates a function that invokes func with the this binding of thisArg and partials prepended to the arguments it receives.
 *
 * The _.bind.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.
 *
 * Note: Unlike native Function#bind, this method doesn't set the "length" property of bound functions.
 * @param {...*} [partials] The argument to be partially applied.
 * @example
 *
 * class MyClass {
  *   @Bind()
  *   bound() {
  *     return this;
  *   }
  *
  *   unbound() {
  *     return this;
  *   }
  * }
  *
  * const myClass = new MyClass();
  *
  * myClass.bound.call(null); // => myClass {}
  *
  * myClass.unbound.call(null); // => null
  */
function Bind(target, propertyKey, descriptor) {
  if (!descriptor || typeof descriptor.value !== 'function') {
    throw new TypeError(`Only methods can be decorated with @Bind. <${propertyKey}> is not a method!`);
  }

  return {
    configurable: true,

    get() {
      const bound = descriptor.value.bind(this); // Credits to https://github.com/andreypopp/autobind-decorator for memoizing the result of bind against a symbol on the instance.

      Object.defineProperty(this, propertyKey, {
        value: bound,
        configurable: true,
        writable: true
      });
      return bound;
    }

  };
}

var _default = Bind;
exports.default = _default;
//# sourceMappingURL=bind.js.map