{"version":3,"sources":["../../src/regenerateUuid.ts"],"names":["regenerateUuid","fragment","generateUuid","uniqueId","userData","data","uids","Object","keys","nextData","mapDescendants","node","Block","isBlock","uuid","oldUuid","newUuid","refblockUUID","forEach","uid","set"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,cAAT,CACLC,QADK,EAELC,YAA0B,GAAGC,kBAFxB,EAGL;AACA,QAAM;AAAEC,IAAAA,QAAQ,GAAG;AAAb,MAAoBH,QAAQ,CAACI,IAAT,IAAiB,EAA3C;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAb;AACA,MAAIK,QAAQ,GAAGL,QAAf;AACAH,EAAAA,QAAQ,GAAGA,QAAQ,CAACS,cAAT,CAAyBC,IAAD,IAAU;AAC3C,QAAIC,mBAAMC,OAAN,CAAcF,IAAd,KAAuBA,IAAI,CAACN,IAAL,CAAUS,IAArC,EAA2C;AACzC;AACA,YAAMC,OAAO,GAAGJ,IAAI,CAACN,IAAL,CAAUS,IAA1B;AACA,YAAME,OAAO,GAAGL,IAAI,CAACN,IAAL,CAAUY,YAAV,IAA0Bf,YAAY,EAAtD,CAHyC,CAIzC;;AACA,UAAIa,OAAJ,EAAa;AACXT,QAAAA,IAAI,CAACY,OAAL,CAAcC,GAAD,IAAS;AACpBV,UAAAA,QAAQ,GAAG,EACT,GAAGA,QADM;AAET,aAACU,GAAD,GAAO,EACL,GAAG,kBAAKV,QAAQ,CAACU,GAAD,CAAb,EAAoBJ,OAApB,CADE;AAEL,eAACC,OAAD,GAAWZ,QAAQ,CAACe,GAAD,CAAR,CAAcJ,OAAd;AAFN;AAFE,WAAX;AAOD,SARD;AASD;;AACDJ,MAAAA,IAAI,GAAGA,IAAI,CAACS,GAAL,CAAS,MAAT,EAAiB,EAAE,GAAGT,IAAI,CAACN,IAAV;AAAgBS,QAAAA,IAAI,EAAEE;AAAtB,OAAjB,CAAP;AACD;;AACD,WAAOL,IAAP;AACD,GApBU,CAAX;;AAqBA,MAAIF,QAAQ,KAAKL,QAAjB,EAA2B;AACzB,WAAOH,QAAQ,CAACmB,GAAT,CAAa,MAAb,EAAqB,+BAAa,EACvC,GAAGnB,QAAQ,CAACI,IAD2B;AAEvCD,MAAAA,QAAQ,EAAEK;AAF6B,KAAb,CAArB,CAAP;AAID;;AACD,SAAOR,QAAP;AACD","sourcesContent":["import { Document, Block, omitEmptyObj } from '@ali/4ever-cangjie';\nimport { uniqueId } from './utils/uniqueId';\nimport { omit } from 'lodash-es';\n\n/**\n * 重新生成 fragment 中的 uuid，并替换用户数据\n * @param fragment \n * @param generateUuid \n * @returns \n */\nexport function regenerateUuid (\n  fragment: Document,\n  generateUuid: () => string = uniqueId,\n) {\n  const { userData = {} } = fragment.data || {};\n  const uids = Object.keys(userData);\n  let nextData = userData;\n  fragment = fragment.mapDescendants((node) => {\n    if (Block.isBlock(node) && node.data.uuid) {\n      // 重新生成 uuid\n      const oldUuid = node.data.uuid;\n      const newUuid = node.data.refblockUUID || generateUuid();\n      // 修改 userData 中的 uuid\n      if (oldUuid) {\n        uids.forEach((uid) => {\n          nextData = {\n            ...nextData,\n            [uid]: {\n              ...omit(nextData[uid], oldUuid),\n              [newUuid]: userData[uid][oldUuid],\n            }\n          }\n        });\n      }\n      node = node.set('data', { ...node.data, uuid: newUuid });\n    }\n    return node;\n  });\n  if (nextData !== userData) {\n    return fragment.set('data', omitEmptyObj({\n      ...fragment.data,\n      userData: nextData,\n    }))\n  }\n  return fragment;\n}"],"file":"regenerateUuid.js"}