{"version":3,"sources":["../../../../src/utils/handlers/createRenderMark.ts"],"names":["Injection","toggleFold","getSubjectStartBlock","createRenderMark","options","inject","renderMark","props","controller","next","mark","node","value","document","injections","type","data","selected","block","getFurthsestBlock","key","subject","query","injectIntoNode","userData","get","run","fold"],"mappings":"AAAA,SAASA,SAAT,QAAkC,oBAAlC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,oBAAT;;AAWA,SAASC,gBAAT,CAA0BC,OAA1B,EAAiF;AAAA,MAAvDA,OAAuD;AAAvDA,IAAAA,OAAuD,GAA1B,EAA0B;AAAA;;AAAA,iBACpDA,OADoD;AAAA,iCACvEC,MADuE;AAAA,MACvEA,MADuE,gCAC9D,KAD8D;AAE/E,SAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,UAA3B,EAAuCC,IAAvC,EAA6C;AAAA,QAC1CC,IAD0C,GAC3BH,KAD2B,CAC1CG,IAD0C;AAAA,QACpCC,IADoC,GAC3BJ,KAD2B,CACpCI,IADoC;AAAA,4BAEjBH,UAAU,CAACI,KAFM;AAAA,QAE1CC,QAF0C,qBAE1CA,QAF0C;AAAA,QAEhCC,UAFgC,qBAEhCA,UAFgC;;AAGlD,QAAIJ,IAAI,CAACK,IAAL,KAAc,OAAd,IAAyBL,IAAI,CAACM,IAAL,CAAUC,QAAvC,EAAiD;AAC/C,UAAMC,KAAK,GAAGL,QAAQ,CAACM,iBAAT,CAA2BR,IAAI,CAACS,GAAhC,CAAd;AACA,UAAIC,OAAO,GAAGH,KAAK,IAAIV,UAAU,CAACc,KAAX,CAAiBpB,oBAAjB,EAAuCgB,KAAvC,CAAvB,CAF+C,CAI/C;;AACA,UAAIb,MAAM,IAAIgB,OAAd,EAAuB;AACrBA,QAAAA,OAAO,GAAGrB,SAAS,CAACuB,cAAV,CAAyBT,UAAzB,EAAqCO,OAArC,CAAV;AACD;;AAED,UAAIA,OAAO,IAAIb,UAAU,CAACgB,QAAX,CAAoBC,GAApB,CAAwBJ,OAAxB,EAAiC,MAAjC,CAAf,EAAyD;AACvDb,QAAAA,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2BzB,UAAU,CAAC;AACpCU,UAAAA,IAAI,EAAEU,OAD8B;AAEpCM,UAAAA,IAAI,EAAE;AAF8B,SAAD,CAArC;AAID;AACF;;AACD,WAAOlB,IAAI,EAAX;AACD,GApBD;AAqBD;;AAED,eAAeN,gBAAf","sourcesContent":["import { Injection, Plugin } from '@ali/4ever-cangjie';\nimport { toggleFold } from '@ali/4ever-utils';\nimport { getSubjectStartBlock } from '../queries';\nimport { SubjectHeading } from '../utils';\n\nexport interface RenderMarkOptions {\n  /**\n   * 是否注入 Injection\n   * @default false\n   */\n  inject?: boolean;\n}\n\nfunction createRenderMark(options: RenderMarkOptions = {}): Plugin['renderMark'] {\n  const { inject = false } = options;\n  return function renderMark(props, controller, next) {\n    const { mark, node } = props;\n    const { document, injections } = controller.value;\n    if (mark.type === 'match' && mark.data.selected) {\n      const block = document.getFurthsestBlock(node.key);\n      let subject = block && controller.query(getSubjectStartBlock, block);\n\n      // 注入 Injection 数据\n      if (inject && subject) {\n        subject = Injection.injectIntoNode(injections, subject) as SubjectHeading;\n      }\n\n      if (subject && controller.userData.get(subject, 'fold')) {\n        controller.run('onAction', toggleFold({\n          node: subject,\n          fold: false,\n        }));\n      }\n    }\n    return next();\n  };\n}\n\nexport default createRenderMark;\n"],"file":"createRenderMark.js"}