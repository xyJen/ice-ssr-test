/* eslint-disable react/no-find-dom-node */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { domUtils } from '@ali/4ever-cangjie';
import { isEmptyNode } from "../utils";
import Portal from "./Portal";

var Placeholder = function Placeholder(props) {
  var controller = props.controller,
      node = props.node,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,
      _props$display = props.display,
      display = _props$display === void 0 ? isEmptyNode : _props$display,
      children = props.children;
  var _controller$value = controller.value,
      document = _controller$value.document,
      selection = _controller$value.selection,
      composing = _controller$value.composing;

  var _React$useState = React.useState(),
      domNode = _React$useState[0],
      setDomNode = _React$useState[1];

  var nodeRef = React.useRef(node);
  nodeRef.current = node;

  var _React$useReducer = React.useReducer(function (s) {
    return s + 1;
  }, 0),
      forceRender = _React$useReducer[1];

  React.useEffect(function () {
    var sub = controller.inputData$.subscribe(function (_ref) {
      var key = _ref.key;

      if (nodeRef.current.hasNode(key)) {
        forceRender();
      }
    });
    return function () {
      return sub.unsubscribe();
    };
  }, [controller, forceRender]);
  React.useLayoutEffect(function () {
    var dom = domUtils.findDOMNodeSafely(node.key);
    setDomNode(dom);
  }, [node]);
  var dataNode = document.getNode(node.key);

  var portal = (!composing || !node.hasNode(selection.anchor.key)) && dataNode && display(dataNode) && domNode && /*#__PURE__*/_createElement(Portal, {
    container: domNode
  }, placeholder);

  return /*#__PURE__*/_createElement(React.Fragment, null, portal, children);
};

Placeholder.displayName = 'Placeholder';
export default Placeholder;
//# sourceMappingURL=placeholder.js.map