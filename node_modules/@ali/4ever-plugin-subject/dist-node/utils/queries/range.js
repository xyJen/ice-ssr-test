"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSubjectStartBlock = getSubjectStartBlock;
exports.getSubjectEndBlock = getSubjectEndBlock;
exports.hasSubjectGroupBlocks = hasSubjectGroupBlocks;

var _utils = require("../utils");

/**
 * 查询节点所在的议题节点
 * @param controller
 * @param node
 * @returns
 */
function getSubjectStartBlock(controller, node) {
  // 议题节点没有父级议题
  if ((0, _utils.isSubjectHeading)(node)) {
    return node;
  }

  const {
    document
  } = controller.value;
  const path = document.getPath(node.key);

  if (!path) {
    return null;
  }

  const [index] = path; // 查询第一个议题节点返回

  let subject = null;
  let i = index - 1;

  while (i >= 0) {
    const prev = document.nodes[i];

    if ((0, _utils.isSubjectHeading)(prev)) {
      subject = prev;
      break;
    }

    i -= 1;
  }

  return subject;
}
/**
 * 查询议题的末尾节点
 * @param controller
 * @param node
 * @returns
 */


function getSubjectEndBlock(controller, node) {
  const {
    document
  } = controller.value;
  const path = document.getPath(node.key);

  if (!path) {
    return null;
  }

  const [index] = path;
  let endBlock = node;
  let i = index + 1;

  while (i < document.nodes.length) {
    const next = document.nodes[i];

    if ((0, _utils.isSubjectHeading)(next)) {
      break;
    }

    endBlock = next;
    i += 1;
  }

  return endBlock;
}
/**
 * 查询议题是否包含聚合子节点
 * @param controller
 * @param node
 */


function hasSubjectGroupBlocks(controller, node) {
  const {
    document
  } = controller.value;
  const nextBlock = document.getNextBlock(node.key);
  return !!nextBlock && !(0, _utils.isSubjectHeading)(nextBlock);
}
//# sourceMappingURL=range.js.map