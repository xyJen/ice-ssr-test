{"version":3,"sources":["../../../../src/utils/handlers/createRenderMark.ts"],"names":["createRenderMark","options","inject","renderMark","props","controller","next","mark","node","document","injections","value","type","data","selected","block","getFurthsestBlock","key","subject","query","getSubjectStartBlock","Injection","injectIntoNode","userData","get","run","fold"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAWA,SAASA,gBAAT,CAA0BC,OAA0B,GAAG,EAAvD,EAAiF;AAC/E,QAAM;AAAEC,IAAAA,MAAM,GAAG;AAAX,MAAqBD,OAA3B;AACA,SAAO,SAASE,UAAT,CAAoBC,KAApB,EAA2BC,UAA3B,EAAuCC,IAAvC,EAA6C;AAClD,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiBJ,KAAvB;AACA,UAAM;AAAEK,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA2BL,UAAU,CAACM,KAA5C;;AACA,QAAIJ,IAAI,CAACK,IAAL,KAAc,OAAd,IAAyBL,IAAI,CAACM,IAAL,CAAUC,QAAvC,EAAiD;AAC/C,YAAMC,KAAK,GAAGN,QAAQ,CAACO,iBAAT,CAA2BR,IAAI,CAACS,GAAhC,CAAd;AACA,UAAIC,OAAO,GAAGH,KAAK,IAAIV,UAAU,CAACc,KAAX,CAAiBC,6BAAjB,EAAuCL,KAAvC,CAAvB,CAF+C,CAI/C;;AACA,UAAIb,MAAM,IAAIgB,OAAd,EAAuB;AACrBA,QAAAA,OAAO,GAAGG,uBAAUC,cAAV,CAAyBZ,UAAzB,EAAqCQ,OAArC,CAAV;AACD;;AAED,UAAIA,OAAO,IAAIb,UAAU,CAACkB,QAAX,CAAoBC,GAApB,CAAwBN,OAAxB,EAAiC,MAAjC,CAAf,EAAyD;AACvDb,QAAAA,UAAU,CAACoB,GAAX,CAAe,UAAf,EAA2B,2BAAW;AACpCjB,UAAAA,IAAI,EAAEU,OAD8B;AAEpCQ,UAAAA,IAAI,EAAE;AAF8B,SAAX,CAA3B;AAID;AACF;;AACD,WAAOpB,IAAI,EAAX;AACD,GApBD;AAqBD;;eAEcN,gB","sourcesContent":["import { Injection, Plugin } from '@ali/4ever-cangjie';\nimport { toggleFold } from '@ali/4ever-utils';\nimport { getSubjectStartBlock } from '../queries';\nimport { SubjectHeading } from '../utils';\n\nexport interface RenderMarkOptions {\n  /**\n   * 是否注入 Injection\n   * @default false\n   */\n  inject?: boolean;\n}\n\nfunction createRenderMark(options: RenderMarkOptions = {}): Plugin['renderMark'] {\n  const { inject = false } = options;\n  return function renderMark(props, controller, next) {\n    const { mark, node } = props;\n    const { document, injections } = controller.value;\n    if (mark.type === 'match' && mark.data.selected) {\n      const block = document.getFurthsestBlock(node.key);\n      let subject = block && controller.query(getSubjectStartBlock, block);\n\n      // 注入 Injection 数据\n      if (inject && subject) {\n        subject = Injection.injectIntoNode(injections, subject) as SubjectHeading;\n      }\n\n      if (subject && controller.userData.get(subject, 'fold')) {\n        controller.run('onAction', toggleFold({\n          node: subject,\n          fold: false,\n        }));\n      }\n    }\n    return next();\n  };\n}\n\nexport default createRenderMark;\n"],"file":"createRenderMark.js"}