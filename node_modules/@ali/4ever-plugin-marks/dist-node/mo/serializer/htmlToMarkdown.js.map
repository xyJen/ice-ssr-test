{"version":3,"sources":["../../../../src/mo/serializer/htmlToMarkdown.ts"],"names":["mdMarks","name","value","mark","convert","content","isHeading","node","tagName","test","filter","getAttribute","replacement","mdContent","forEach","parentElement","style","includes"],"mappings":";;;;;;AAAA,MAAMA,OAAO,GAAG,CACd;AACEC,EAAAA,IAAI,EAAE,YADR;AAEEC,EAAAA,KAAK,EAAE,MAFT;AAGEC,EAAAA,IAAI,EAAE;AAHR,CADc,EAMd;AACEF,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,KAAK,EAAE,QAFT;AAGEC,EAAAA,IAAI,EAAE;AAHR,CANc,EAWd;AACEF,EAAAA,IAAI,EAAE,oBADR;AAEEC,EAAAA,KAAK,EAAE,WAFT;AAGEC,EAAAA,IAAI,EAAE;AAHR,CAXc,EAgBd;AACEF,EAAAA,IAAI,EAAE,oBADR;AAEEC,EAAAA,KAAK,EAAE,cAFT;AAGEC,EAAAA,IAAI,EAAE;AAHR,CAhBc,EAqBd;AACEF,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,KAAK,EAAE,OAFT;AAGEC,EAAAA,IAAI,EAAE;AAHR,CArBc,EA0Bd;AACEF,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,KAAK,EAAE,KAFT;AAGEC,EAAAA,IAAI,EAAE;AAHR,CA1Bc,EA+Bd;AACEF,EAAAA,IAAI,EAAE,iBADR;AAEEC,EAAAA,KAAK,EAAE,kBAFT;AAGEC,EAAAA,IAAI,EAAE;AAHR,CA/Bc,CAAhB;;AAsCA,MAAMC,OAAO,GAAG,CAACC,OAAD,EAAkBF,IAAlB,KAAmC;AACjD,SAAOA,IAAI,GAAGE,OAAP,GAAiBF,IAAxB;AACD,CAFD;;AAIA,MAAMG,SAAS,GAAIC,IAAD,IAA8B;AAC9C,QAAMC,OAAO,GAAGD,IAAI,EAAEC,OAAN,IAAiB,EAAjC;AACA,SAAO,QAAQC,IAAR,CAAaD,OAAb,CAAP;AACD,CAHD;;eAKe;AACbP,EAAAA,IAAI,EAAE,OADO;AAEbS,EAAAA,MAAM,EAAGH,IAAD,IAAuB;AAC7B,WAAOA,IAAI,CAACC,OAAL,KAAiB,MAAjB,IAA2BD,IAAI,CAACI,YAAL,CAAkB,WAAlB,MAAmC,MAArE;AACD,GAJY;AAKbC,EAAAA,WAAW,EAAE,CAACP,OAAO,GAAG,EAAX,EAAeE,IAAf,KAAsC;AACjD,QAAI,CAACA,IAAL,EAAW,OAAOF,OAAP;AAEX,QAAIQ,SAAS,GAAGR,OAAhB;AACAL,IAAAA,OAAO,CAACc,OAAR,CAAgB,CAAC;AAAEb,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA2B;AACzC,UAAI,CAACG,SAAS,CAACC,IAAI,CAACQ,aAAN,CAAV,IAAkCR,IAAI,CAACS,KAAL,CAAWf,IAAX,EAAiBgB,QAAjB,CAA0Bf,KAA1B,CAAtC,EAAwE;AACtEW,QAAAA,SAAS,GAAGT,OAAO,CAACS,SAAD,EAAYV,IAAZ,CAAnB;AACD;AACF,KAJD;AAKA,WAAOU,SAAP;AACD;AAfY,C","sourcesContent":["const mdMarks = [\n  {\n    name: 'fontWeight',\n    value: 'bold',\n    mark: '**',\n  },\n  {\n    name: 'fontStyle',\n    value: 'italic',\n    mark: '_',\n  },\n  {\n    name: 'textDecorationLine',\n    value: 'underline',\n    mark: '++',\n  },\n  {\n    name: 'textDecorationLine',\n    value: 'line-through',\n    mark: '~~',\n  },\n  {\n    name: 'verticalAlign',\n    value: 'super',\n    mark: '^',\n  },\n  {\n    name: 'verticalAlign',\n    value: 'sub',\n    mark: '~',\n  },\n  {\n    name: 'backgroundColor',\n    value: 'rgb(255, 192, 0)',\n    mark: '==',\n  },\n];\n\nconst convert = (content: string, mark: string) => {\n  return mark + content + mark;\n};\n\nconst isHeading = (node: HTMLElement | null) => {\n  const tagName = node?.tagName || '';\n  return /^H\\d$/.test(tagName);\n};\n\nexport default {\n  name: 'marks',\n  filter: (node: HTMLElement) => {\n    return node.tagName === 'SPAN' && node.getAttribute('data-type') === 'text';\n  },\n  replacement: (content = '', node?: HTMLElement) => {\n    if (!node) return content;\n\n    let mdContent = content;\n    mdMarks.forEach(({ name, value, mark }) => {\n      if (!isHeading(node.parentElement) && node.style[name].includes(value)) {\n        mdContent = convert(mdContent, mark);\n      }\n    });\n    return mdContent;\n  },\n};\n"],"file":"htmlToMarkdown.js"}