"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = removeRangesBoldMark;

var _everPluginHeading = require("@ali/4ever-plugin-heading");

var _everUtils = require("@ali/4ever-utils");

var _models = require("../../mo/models");

function removeRangesBoldMark(controller) {
  const {
    document
  } = controller.value;
  const ranges = (0, _everUtils.getRangesFromEditor)(controller);
  ranges.forEach(range => {
    const rangeBlocks = document.getLeafBlocksAtRange(range);

    const boldMark = _models.Bold.create(false);

    if (rangeBlocks.length === 1) {
      // 选区未跨段落
      if (_everPluginHeading.Heading.isHeading(rangeBlocks[0])) {
        return (0, _everUtils.addMarkAtRange)(controller, range, boldMark);
      }

      return (0, _everUtils.removeMarkAtRange)(controller, range, _models.Bold.TYPE);
    }

    const {
      start,
      end
    } = range.convertToTextPoints(document);
    const startBlock = document.getClosestBlock(start.key);
    const endBlock = document.getClosestBlock(end.key);
    rangeBlocks.forEach(block => {
      let blockRange;

      if (block.key === startBlock?.key) {
        blockRange = range.moveEndToEndOfNode(block, controller);
      } else if (block.key === endBlock?.key) {
        blockRange = range.moveStartToStartOfNode(block, controller);
      } else {
        blockRange = range.moveStartToStartOfNode(block, controller).moveEndToEndOfNode(block, controller);
      }

      if (_everPluginHeading.Heading.isHeading(block)) {
        (0, _everUtils.addMarkAtRange)(controller, blockRange, boldMark);
      } else {
        (0, _everUtils.removeMarkAtRange)(controller, blockRange, _models.Bold.TYPE);
      }
    });
    return undefined;
  });
  return controller;
}
//# sourceMappingURL=removeRangesBoldMark.js.map