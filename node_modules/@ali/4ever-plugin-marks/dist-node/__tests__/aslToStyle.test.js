"use strict";

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _index = require("../mo/index");

var _marks = require("../components/marks");

const testCases = [{
  name: 'color',
  asl: {
    color: '#FF0000'
  },
  style: {
    color: '#FF0000'
  }
}, {
  name: 'italic',
  asl: {
    italic: true
  },
  style: {
    fontStyle: 'italic'
  }
}, {
  name: 'strike',
  asl: {
    strike: true
  },
  style: {
    textDecorationLine: 'line-through',
    WebkitTextDecorationLine: 'line-through'
  }
}, {
  name: 'em dot',
  asl: {
    em: 'dot'
  },
  style: {
    WebkitTextEmphasisStyle: 'dot',
    WebkitTextEmphasisPosition: 'under'
  }
}, {
  name: 'em comma',
  asl: {
    em: 'comma'
  },
  style: {
    WebkitTextEmphasisStyle: 'sesame',
    WebkitTextEmphasisPosition: 'over'
  }
}, {
  name: 'underline',
  asl: {
    underline: 'single'
  },
  style: {
    textDecorationLine: 'underline',
    textDecorationStyle: 'solid',
    textUnderlinePosition: 'under',
    WebkitTextDecorationLine: 'underline',
    WebkitTextDecorationStyle: 'solid',
    WebkitTextUnderlinePosition: 'under'
  }
}, {
  name: 'strike underline',
  asl: {
    strike: true,
    underline: {
      value: 'wave',
      color: 'red'
    }
  },
  style: {
    textDecorationLine: 'line-through underline',
    textDecorationStyle: 'wavy',
    textDecorationColor: 'red',
    textUnderlinePosition: 'under',
    WebkitTextDecorationLine: 'line-through underline',
    WebkitTextDecorationStyle: 'wavy',
    WebkitTextDecorationColor: 'red',
    WebkitTextUnderlinePosition: 'under'
  }
}, {
  name: 'spacing',
  asl: {
    spacing: 1.0
  },
  style: {
    letterSpacing: '2pt'
  }
}, {
  name: 'bold',
  asl: {
    bold: true
  },
  style: {
    fontWeight: 'bold'
  }
}, {
  name: 'bold value is false',
  asl: {
    bold: false
  },
  style: {
    fontWeight: 'normal'
  }
}, {
  name: 'fonts en & zh',
  asl: {
    fonts: {
      ascii: 'Impact',
      eastAsia: '苹方-简'
    }
  },
  style: {
    fontFamily: 'Impact,苹方-简,PingFang SC,Microsoft YaHei,SimHei,STHeiti,sans-serif'
  }
}, {
  name: 'fonts',
  asl: {
    fonts: {
      hint: 'eastAsia',
      eastAsiaTheme: 'minorEastAsia',
      asciiTheme: 'minorHAnsi',
      hAnsiTheme: 'minorHAnsi',
      cstheme: 'minorBidi',
      ascii: '等线',
      eastAsia: '等线'
    }
  },
  style: {
    fontFamily: '等线,Dengxian,Microsoft YaHei,PingFang SC,SimHei,STHeiti,sans-serif'
  }
}, {
  name: 'highlight',
  asl: {
    highlight: '#FF0000'
  },
  style: {
    backgroundColor: '#FF0000'
  }
}, {
  name: 'shd',
  asl: {
    shd: {
      val: 'pct15',
      fill: '#0000FF',
      color: '#FF0000'
    }
  },
  style: {
    backgroundColor: '#2600d9'
  }
}, {
  name: 'vertAlign superscript',
  asl: {
    sz: 14,
    szUnit: 'pt',
    vertAlign: 'superscript'
  },
  style: {
    fontSize: '7pt',
    verticalAlign: 'super'
  }
}, {
  name: 'vertAlign baseline',
  asl: {
    sz: 14,
    szUnit: 'pt',
    vertAlign: 'baseline'
  },
  style: {
    fontSize: '14pt'
  }
}];
describe('test aslToStyle', () => {
  const mo = (0, _everCangjie.createSerializer)([(0, _everPluginParagraph.moFactory)({}), (0, _index.moFactory)({})]);
  testCases.forEach(testCase => {
    const {
      name,
      asl,
      style
    } = testCase;
    const jsonML = ['root', {}, ['p', {}, ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf',
      ...asl
    }, '']]]]; // @ts-ignore

    const value = mo.jsonMLToValue(jsonML); // @ts-ignore

    const {
      marks
    } = value.document.nodes[0].nodes[0].leaves[0];
    it(`aslToStyle: ${name}`, () => {
      expect((0, _marks.marksToStyle)(marks)).toEqual(style);
    });

    if (name !== 'underline') {
      it(`json <=> value ${name}`, () => {
        expect(mo.valueToJsonML(value)).toEqual(jsonML);
      });
    }
  });
});
//# sourceMappingURL=aslToStyle.test.js.map