"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jsonMLAttrsToMarks = void 0;

var _models = require("../mo/models");

const jsonMLAttrsToMarks = attrs => {
  const marks = [];
  const keys = [];
  const {
    bold,
    caps,
    color,
    fonts,
    highlight,
    shd,
    italic,
    smallCaps,
    strike,
    dstrike,
    sz,
    szUnit,
    underline,
    vertAlign,
    inlineCode,
    spacing,
    kern,
    em
  } = attrs;

  if ('bold' in attrs) {
    marks.push(_models.Bold.create(bold));
    keys.push('bold');
  }

  if ('caps' in attrs) {
    marks.push(_models.Caps.create(caps));
    keys.push('caps');
  }

  if ('color' in attrs) {
    marks.push(_models.Color.create(color));
    keys.push('color');
  }

  if ('fonts' in attrs) {
    // @ts-ignore
    marks.push(_models.Fonts.create(fonts));
    keys.push('fonts');
  }

  if ('highlight' in attrs) {
    marks.push(_models.Highlight.create(highlight));
    keys.push('highlight');
  }

  if ('shd' in attrs && typeof shd === 'object') {
    marks.push(_models.Shd.create(shd));
    keys.push('shd');
  }

  if ('spacing' in attrs) {
    marks.push(_models.Spacing.create(spacing));
    keys.push('spacing');
  }

  if ('kern' in attrs) {
    marks.push(_models.Kern.create(kern));
    keys.push('kern');
  }

  if ('italic' in attrs && italic) {
    marks.push(_models.Italic.create());
    keys.push('italic');
  }

  if ('smallCaps' in attrs) {
    marks.push(_models.SmallCaps.create());
    keys.push('smallCaps');
  }

  if ('strike' in attrs && strike) {
    marks.push(_models.Strike.create());
    keys.push('strike');
  }

  if ('sz' in attrs) {
    const szData = {
      value: sz
    };

    if ('szUnit' in attrs) {
      szData.szUnit = szUnit;
    } // @ts-ignore


    marks.push(_models.Sz.create(szData));
    keys.push('sz', 'szUnit');
  }

  if ('underline' in attrs) {
    // 兼容：老数据 string 类型，导入 word 数据为 object
    const underlineData = typeof underline === 'string' ? {
      value: underline
    } : underline; // @ts-ignore

    marks.push(_models.Underline.create(underlineData.value, underlineData.color));
    keys.push('underline');
  }

  if ('dstrike' in attrs) {
    if (typeof dstrike === 'object') {
      // 兼容存量导入数据 dstrike: { value: true/false }
      // @ts-ignore
      marks.push(_models.Dstrike.create(dstrike.value));
    } else {
      // @ts-ignore
      marks.push(_models.Dstrike.create(dstrike));
    }

    keys.push('dstrike');
  }

  if ('em' in attrs && em) {
    marks.push(_models.Em.create(em));
    keys.push('em');
  }

  if ('vertAlign' in attrs) {
    // @ts-ignore
    marks.push(_models.VertAlign.create(vertAlign));
    keys.push('vertAlign');
  }

  if ('inlineCode' in attrs) {
    marks.push(_models.InlineCode.create());
    keys.push('inlineCode');
  }

  return {
    marks,
    keys
  };
};

exports.jsonMLAttrsToMarks = jsonMLAttrsToMarks;
//# sourceMappingURL=jsonMLAttrsToMarks.js.map