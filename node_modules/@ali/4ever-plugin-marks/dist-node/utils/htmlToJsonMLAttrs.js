"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.htmlToJsonMLAttrs = void 0;

var _everUtils = require("@ali/4ever-utils");

var _tinycolor = require("@ctrl/tinycolor");

/**
 * 钉钉IM消息气泡默认情况会带上背景颜色
 * @param style
 */
function isDDChatBubbleBgColor(style) {
  return style.backgroundColor?.includes('im_chat_message_bg_color') || [style.caretColor, style.color].every(color => color === 'rgb(238, 242, 248)') && ['rgb(47, 48, 53)', 'rgb(47, 67, 97)'].includes(style.backgroundColor);
}
/**
 * Chrome 拷贝的时候在默认情况会带上全局的背景颜色
 * @param bgColor
 */


function isChromeDefaultBgColor(bgColor) {
  return bgColor === 'rgb(255, 255, 255)';
}

const BOLD_SIZE = 500;

const htmlToJsonMLAttrs = (name, attrs, marks) => {
  const style = attrs.styleObj; // 优先遵循css style 而不是html标签

  if (style.fontWeight) {
    if (style.fontWeight === 'bold' || parseInt(style.fontWeight, 10) > BOLD_SIZE) {
      marks.bold = true;
    }
  } else if (name === 'b' || name === 'strong') {
    marks.bold = true;
  }

  if (style.fontStyle) {
    if (style.fontStyle === 'italic' || style.fontStyle === 'oblique') {
      marks.italic = true;
    }
  } else if (name === 'i' || name === 'em') {
    marks.italic = true;
  }

  if (name === 's' || name === 'strike' || name === 'del' || (style.textDecoration || '').includes('line-through')) {
    marks.strike = true;
  }

  if (name === 'u' || name === 'ins' || name !== 'a' && (style.textDecoration || '').includes('underline')) {
    marks.underline = {
      value: 'single'
    };
  }

  if (name === 'sub' || style.verticalAlign === 'sub') {
    marks.vertAlign = 'subscript';
  }

  if (name === 'sup' || style.verticalAlign === 'super') {
    marks.vertAlign = 'superscript';
  }

  if (name === 'font') {
    if (attrs.color && new _tinycolor.TinyColor(attrs.color).isValid) {
      marks.color = attrs.color;
    }

    if (attrs.size) {
      marks.sz = _everUtils.SzUtil.toPt(attrs.size);
      marks.szUnit = 'pt';
    }

    if (attrs.face) {
      const value = attrs.face.split(',')[0].replace(/"/g, '');
      marks.fonts = {
        ascii: value,
        hAnsi: value,
        cs: value,
        eastAsia: value
      };
    }
  }

  if (style.color && new _tinycolor.TinyColor(style.color).isValid) {
    marks.color = style.color;
  } // 该代码用于在粘贴markdown/html时产生inlineCode marks模型
  // TODO inline-code全量后需要将该代码注释掉


  if (name === 'code') {
    marks.inlineCode = true;
  } // 只解析背景颜色


  if (style.background) {
    const bg = (0, _everUtils.praseCSSBackground)(style.background);
    marks.highlight = bg.backgroundColor;
  } // 显示的 bgColor 优先级高于 bg


  if (style.backgroundColor && !isChromeDefaultBgColor(style.backgroundColor) && !isDDChatBubbleBgColor(style)) {
    marks.highlight = style.backgroundColor;
  }

  if (style.fontSize) {
    // 未带单位的 fontSize, 默认单位为 px
    const defaulUnit = Number.isNaN(Number(style.fontSize)) ? '' : 'px';
    marks.sz = _everUtils.SzUtil.toPt(style.fontSize, defaulUnit);
    marks.szUnit = 'pt';
  }

  if (style.letterSpacing) {
    const spacing = _everUtils.unitsConverter.toPT(style.letterSpacing);

    if (spacing) {
      marks.spacing = spacing / 2;
    }
  }

  if (style.fontKerning === 'none') {
    marks.kern = 0;
  }

  if (style.fontFamily) {
    const value = style.fontFamily.split(',')[0].replace(/"/g, '');
    marks.fonts = {
      ascii: value,
      hAnsi: value,
      cs: value,
      eastAsia: value
    };
  }

  return marks;
};

exports.htmlToJsonMLAttrs = htmlToJsonMLAttrs;
//# sourceMappingURL=htmlToJsonMLAttrs.js.map