"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jsonMLAttrsToStyle = void 0;

var _everUtils = require("@ali/4ever-utils");

const jsonMLAttrsToStyle = (attrs, style) => {
  const {
    bold,
    italic,
    strike,
    dstrike,
    underline,
    color,
    highlight,
    vertAlign,
    sz,
    szUnit = 'px',
    fonts,
    inlineCode,
    shd,
    spacing
  } = attrs;

  if (bold) {
    style.fontWeight = 'bold';
  }

  if (italic) {
    style.fontStyle = 'italic';
  }

  if (strike || dstrike) {
    style.textDecoration = 'line-through';
  }

  if (underline) {
    // 使用最基础的 textDecoration 属性，否则 word/wps 等无法识别
    let isInvalid = true;

    if (typeof underline === 'string' || underline?.value && underline.value !== 'none') {
      isInvalid = false;
    }

    if (!isInvalid) {
      style.textDecoration = style.textDecoration ? `${style.textDecoration} underline` : 'underline';
    }
  }

  if (color) {
    style.color = color;
  }

  if (highlight) {
    style.backgroundColor = highlight;
  } else if (shd) {
    style.backgroundColor = style.backgroundColor || _everUtils.ShdUtil.transformShd(shd);
  }

  if (vertAlign) {
    if (vertAlign === 'superscript') {
      style.verticalAlign = 'super';
    } else if (vertAlign === 'subscript') {
      style.verticalAlign = 'sub';
    }
  } // TODO: 这里无法区分正文or标题，无法给正文设置默认字号


  if (sz) {
    style.fontSize = `${_everUtils.SzUtil.toPt(sz + szUnit)}pt`;
  }

  if (spacing) {
    style.letterSpacing = `${spacing}pt`;
  }

  if (fonts) {
    const {
      ascii,
      hAnsi,
      cs,
      eastAsia
    } = fonts;
    style.fontFamily = `${ascii}, ${hAnsi}, ${cs}, ${eastAsia}`;
  }

  if (inlineCode) {
    style.padding = _everUtils.inlineCodeTheme.padding;
    style.margin = _everUtils.inlineCodeTheme.margin;
    style.border = _everUtils.inlineCodeTheme.border;
    style.borderRadius = _everUtils.inlineCodeTheme['border-radius'];
    style.fontFamily = _everUtils.inlineCodeTheme['font-family'];
    style.wordBreak = _everUtils.inlineCodeTheme['word-break'];
    style.backgroundColor = _everUtils.inlineCodeTheme['background-color'];
  }

  return style;
};

exports.jsonMLAttrsToStyle = jsonMLAttrsToStyle;
//# sourceMappingURL=jsonMLAttrsToStyle.js.map