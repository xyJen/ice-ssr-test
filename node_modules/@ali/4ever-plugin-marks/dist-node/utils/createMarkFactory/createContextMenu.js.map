{"version":3,"sources":["../../../../src/utils/createMarkFactory/createContextMenu.ts"],"names":["createContextMenu","type","hotKey","contextMenuPlugin","pluginConfig","locale","contextMenu","controller","next","menus","selection","document","value","canToggle","fragement","getFragmentAtRange","Boolean","text","e","isExpanded","query","push","name","buttonTitle","action","key","options","keepMenu","group","checked","others"],"mappings":";;;;;;;AAIA;;AACA;;AAEe,SAASA,iBAAT,CACbC,IADa,EAEbC,MAFa,EAGb;AACA,SAAO,SAASC,iBAAT,CAA2BC,YAA3B,EAAyC;AAC9C,UAAMC,MAAM,GAAGD,YAAY,CAACC,MAAb,IAAuB,EAAtC;AACA,WAAO,SAASC,WAAT,CACLC,UADK,EAELC,IAFK,EAGL;AACA,YAAMC,KAAwB,GAAG,EAAjC;AACA,YAAM;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAA0BJ,UAAU,CAACK,KAA3C;AACA,UAAIC,SAAS,GAAG,KAAhB;;AACA,UAAI;AACF;AACA;AACA,cAAMC,SAAS,GAAGH,QAAQ,CAACI,kBAAT,CAA4BL,SAA5B,CAAlB;AACAG,QAAAA,SAAS,GAAGG,OAAO,CAACF,SAAS,CAACG,IAAX,CAAnB;AACD,OALD,CAKE,OAAOC,CAAP,EAAU,CACV;AACD;;AACD,UAAIL,SAAS,IAAIH,SAAS,CAACS,UAAvB,IAAqCZ,UAAU,CAACa,KAAX,CAAkB,YAAW,wBAAWnB,IAAX,CAAiB,EAA9C,CAAzC,EAA2F;AACzFQ,QAAAA,KAAK,CAACY,IAAN,CAAW;AACTC,UAAAA,IAAI,EAAEjB,MAAM,CAACkB,WADJ;AAETC,UAAAA,MAAM,EAAE,yBAAWvB,IAAX,CAFC;AAGTwB,UAAAA,GAAG,EAAG,eAAcxB,IAAK,EAHhB;AAITyB,UAAAA,OAAO,EAAE;AACPC,YAAAA,QAAQ,EAAE,IADH;AAEPzB,YAAAA,MAFO;AAGP0B,YAAAA,KAAK,EAAE,CAHA;AAIPC,YAAAA,OAAO,EAAEtB,UAAU,CAACa,KAAX,CAAkB,KAAI,wBAAWnB,IAAX,CAAiB,EAAvC;AAJF;AAJA,SAAX;AAWD;;AACD,YAAM6B,MAAM,GAAGtB,IAAI,MAAM,EAAzB;AACA,aAAO,CAAC,GAAGC,KAAJ,EAAW,GAAGqB,MAAd,CAAP;AACD,KA9BD;AA+BD,GAjCD;AAkCD","sourcesContent":["import {\n  Controller,\n  ContextMenuItem,\n} from '@ali/4ever-cangjie';\nimport { capitalize } from 'lodash-es';\nimport { toggleMark } from './actions';\n\nexport default function createContextMenu(\n  type: string,\n  hotKey: string,\n) {\n  return function contextMenuPlugin(pluginConfig) {\n    const locale = pluginConfig.locale || {};\n    return function contextMenu(\n      controller: Controller,\n      next: () => ContextMenuItem[] | null,\n    ) {\n      const menus: ContextMenuItem[] = [];\n      const { selection, document } = controller.value;\n      let canToggle = false;\n      try {\n        // getFragmentAtRange throws unknow error\n        // https://aone.alibaba-inc.com/v2/project/995011/bug/43531316\n        const fragement = document.getFragmentAtRange(selection);\n        canToggle = Boolean(fragement.text);\n      } catch (e) {\n        // ignore\n      }\n      if (canToggle && selection.isExpanded && controller.query(`canToggle${capitalize(type)}`)) {\n        menus.push({\n          name: locale.buttonTitle,\n          action: toggleMark(type),\n          key: `mark-toggle-${type}`,\n          options: {\n            keepMenu: true,\n            hotKey,\n            group: 2,\n            checked: controller.query(`is${capitalize(type)}`),\n          },\n        });\n      }\n      const others = next() || [];\n      return [...menus, ...others];\n    };\n  };\n}\n"],"file":"createContextMenu.js"}