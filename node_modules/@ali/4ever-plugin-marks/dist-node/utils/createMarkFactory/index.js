"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMarkFactory = createMarkFactory;

var _lodash = require("lodash");

var _createToolbar = _interopRequireDefault(require("./createToolbar"));

var _createMenubar = _interopRequireDefault(require("./createMenubar"));

var _createOnKeyDown = _interopRequireDefault(require("./handlers/createOnKeyDown"));

var _onCangjieInput = _interopRequireDefault(require("./handlers/onCangjieInput"));

var _createToggleMark = _interopRequireDefault(require("./commands/createToggleMark"));

var _createIsQuery = _interopRequireDefault(require("./queries/createIsQuery"));

var _canToggleMark = _interopRequireDefault(require("./queries/canToggleMark"));

var _createContextMenu = _interopRequireDefault(require("./createContextMenu"));

var _createOnAction = _interopRequireDefault(require("./createOnAction"));

var oldActions = _interopRequireWildcard(require("./actions"));

var _createRenderToolbar = _interopRequireDefault(require("./createRenderToolbar"));

/** depreacted 只为兼容，请勿使用 */
function createMarkFactory({
  type,
  hotKey,
  Button,
  delimiter,
  insideWhitespace = false,
  Icon,
  toolbarIcon,
  localeKeys = {},
  moFactory
}) {
  const toolbar = (0, _createToolbar.default)(type, hotKey, Button, Icon, delimiter);
  const createRenderToolbar = toolbarIcon && (0, _createRenderToolbar.default)({
    type,
    hotKey,
    toolbarIcon,
    localeKeys,
    delimiter
  });
  const menubar = (0, _createMenubar.default)(type);
  const onKeyDown = (0, _createOnKeyDown.default)(type, hotKey, delimiter, insideWhitespace);
  const onCangjieInput = (0, _onCangjieInput.default)(type, delimiter, insideWhitespace);
  const toggleMark = (0, _createToggleMark.default)(type);
  const isQuery = (0, _createIsQuery.default)(type);
  const contextMenu = (0, _createContextMenu.default)(type, hotKey);
  const commands = {
    [`toggle${(0, _lodash.capitalize)(type)}`]: toggleMark
  };
  const queries = {
    [`is${(0, _lodash.capitalize)(type)}`]: isQuery,
    [`canToggle${(0, _lodash.capitalize)(type)}`]: _canToggleMark.default
  };

  const biFactory = config => {
    const pluginConfig = config[type] || {};
    return { ...moFactory?.({}),
      key: type,
      contextMenu: contextMenu(pluginConfig),
      toolbar: toolbar(pluginConfig),
      renderToolbar: createRenderToolbar?.(pluginConfig.locale),
      menubar: menubar(),
      actions: oldActions.actions,
      commands,
      queries,
      onAction: (0, _createOnAction.default)(type),
      onKeyDown,
      onCangjieInput,
      models: {
        klass: 'mark',
        type
      }
    };
  }; // TODO 插件迁移: 待优化


  biFactory.commands = commands;
  biFactory.queries = queries;
  biFactory.actions = oldActions;
  return biFactory;
}
//# sourceMappingURL=index.js.map