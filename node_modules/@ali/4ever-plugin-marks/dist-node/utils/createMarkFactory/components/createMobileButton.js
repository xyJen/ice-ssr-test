"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMarkMobileButton = createMarkMobileButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _canToggleMark = _interopRequireDefault(require("../queries/canToggleMark"));

var _actions = require("../actions");

const _createElement = /*#__PURE__*/React.createElement;

function createMarkMobileButton(type, icon, buttonType) {
  return function MobileButton(props) {
    const {
      controller,
      Wrapper,
      item
    } = props;
    const isDisabled = !(0, _canToggleMark.default)(controller);
    const isActive = controller.query(`is${(0, _lodash.capitalize)(type)}`);
    const handleClick = React.useCallback(() => controller.run('onAction', (0, _actions.toggleMark)(type)), [controller]);
    const focusAttr = React.useMemo(() => {
      if (!isActive) {
        return {};
      }

      return buttonType === 'big' ? {
        isFocused: true
      } : {
        isActive: true
      };
    }, [isActive]);
    return /*#__PURE__*/_createElement(Wrapper, (0, _extends2.default)({}, focusAttr, {
      item: item,
      type: buttonType,
      icon: icon,
      isDisabled: isDisabled,
      onClick: handleClick
    }));
  };
}
//# sourceMappingURL=createMobileButton.js.map