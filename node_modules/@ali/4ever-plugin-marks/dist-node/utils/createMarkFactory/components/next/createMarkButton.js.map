{"version":3,"sources":["../../../../../../src/utils/createMarkFactory/components/next/createMarkButton.tsx"],"names":["MOD","environment","IS_MAC","createMarkButton","param","type","hotKey","defaultIcon","delimiter","localeKeys","titleKey","tooltipKey","MarkButton","props","controller","locale","title","tooltip","tooltipProp","icon","rest","isDisabled","isActive","query","handleClick","React","useCallback","run","useMemo","tip","split","slice","map","capitalize","join","markdown","shortCut","description"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;uBAN4B,a;AAQ5B,MAAMA,GAAG,GAAGC,yBAAYC,MAAZ,GAAqB,GAArB,GAA2B,MAAvC;;AAOe,SAASC,gBAAT,CACbC,KADa,EAUV;AACH,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA,WAAhB;AAA6BC,IAAAA,SAA7B;AAAwCC,IAAAA;AAAxC,MAAuDL,KAA7D;AAEA,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA2BF,UAAU,IAAI,EAA/C;AAEA,SAAO,SAASG,UAAT,CAAoBC,KAApB,EAA4C;AACjD,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA,KAAtB;AAA6BC,MAAAA,OAAO,EAAEC,WAAtC;AAAmDC,MAAAA,IAAI,GAAGZ,WAA1D;AAAuE,SAAGa;AAA1E,QAAmFP,KAAzF;AACA,UAAMQ,UAAU,GAAG,CAAC,4BAAcP,UAAd,CAApB;AACA,UAAMQ,QAAQ,GAAGR,UAAU,CAACS,KAAX,CAAkB,KAAI,wBAAWlB,IAAX,CAAiB,EAAvC,CAAjB;AACA,UAAMmB,WAAW,GAAGC,KAAK,CAACC,WAAN,CAAkB,MAAMZ,UAAU,CAACa,GAAX,CAAe,UAAf,EAA2B,yBAAWtB,IAAX,CAA3B,CAAxB,EAAsE,CAACS,UAAD,EAAaT,IAAb,CAAtE,CAApB;AAEA,UAAMY,OAAO,GAAGQ,KAAK,CAACG,OAAN,CAAc,MAAM;AAClC,UAAIC,GAAG,GAAG,EAAV;;AACA,UAAIvB,MAAJ,EAAY;AACVuB,QAAAA,GAAG,GAAI,IAAG7B,GAAI,IAAGM,MAAM,CAACwB,KAAP,CAAa,GAAb,EAAkBC,KAAlB,CAAwB,CAAxB,EAA2BC,GAA3B,CAA+BC,kBAA/B,EAA2CC,IAA3C,CAAgD,GAAhD,CAAqD,EAAtE;AACD;;AACD,YAAMC,QAAQ,GAAG,qCAAyB3B,SAAzB,EAAoCO,MAApC,CAAjB;AACA,aAAO;AACLC,QAAAA,KAAK,EAAEA,KAAK,IAAKN,QAAQ,IAAIK,MAAZ,IAAsBA,MAAM,CAACL,QAAD,CAAtC,IAAqD,EADvD;AAEL0B,QAAAA,QAAQ,EAAEP,GAFL;AAGLQ,QAAAA,WAAW,EAAEF,QAAQ,GAAI,eAAeA,QAAnB,GAA+BA,QAH/C;AAIL,WAAGjB;AAJE,OAAP;AAMD,KAZe,EAYb,CAACZ,MAAD,EAASU,KAAT,EAAgBN,QAAhB,EAA0BQ,WAA1B,CAZa,CAAhB;AAcA,wBACE,eAAC,yBAAD;AACE,MAAA,QAAQ,EAAEG,UADZ;AAEE,MAAA,OAAO,EAAEG,WAFX;AAGE,MAAA,MAAM,EAAEF,QAHV;AAIE,MAAA,MAAM,EAAG,cAAajB,IAAK,EAJ7B;AAKE,MAAA,IAAI,EAAEA,IALR;AAME,MAAA,KAAK,EAAEW,KAAK,IAAKN,QAAQ,IAAIK,MAAZ,IAAsBA,MAAM,CAACL,QAAD,CAN/C;AAOE,MAAA,OAAO,EAAEO,OAPX;AAQE,MAAA,IAAI,EAAEE;AARR,OASMC,IATN,EADF;AAaD,GAjCD;AAkCD","sourcesContent":["import * as React from 'react';\nimport { capitalize } from 'lodash-es';\nimport { Controller, environment } from '@ali/4ever-cangjie';\nimport type { Delimiter } from '@ali/4ever-utils';\nimport { IconButton, IToolbarButtonConfig } from '@ali/4ever-component';\nimport canToggleMark from '../../queries/canToggleMark';\nimport { toggleMark } from '../../actions';\nimport { getMarkdownFromDelimiter } from '../../utils';\n\nconst MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';\n\nexport interface MarkButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  locale?: Record<string, string>;\n}\n\nexport default function createMarkButton(\n  param: {\n    type: string;\n    hotKey?: string;\n    defaultIcon: React.ReactElement;\n    delimiter: Delimiter | Delimiter[];\n    localeKeys?: {\n      titleKey?: string;\n      tooltipKey?: string;\n    }\n  }) {\n  const { type, hotKey, defaultIcon, delimiter, localeKeys } = param;\n\n  const { titleKey, tooltipKey } = localeKeys || {};\n\n  return function MarkButton(props: MarkButtonProps) {\n    const { controller, locale, title, tooltip: tooltipProp, icon = defaultIcon, ...rest } = props;\n    const isDisabled = !canToggleMark(controller);\n    const isActive = controller.query(`is${capitalize(type)}`);\n    const handleClick = React.useCallback(() => controller.run('onAction', toggleMark(type)), [controller, type]);\n\n    const tooltip = React.useMemo(() => {\n      let tip = '';\n      if (hotKey) {\n        tip = ` ${MOD}+${hotKey.split('+').slice(1).map(capitalize).join('+')}`;\n      }\n      const markdown = getMarkdownFromDelimiter(delimiter, locale);\n      return {\n        title: title || (titleKey && locale && locale[titleKey]) || '',\n        shortCut: tip,\n        description: markdown ? ('Markdown: ' + markdown) : markdown,\n        ...tooltipProp,\n      };\n    }, [hotKey, title, titleKey, tooltipProp]);\n\n    return (\n      <IconButton\n        disabled={isDisabled}\n        onClick={handleClick}\n        active={isActive}\n        testid={`bi-toolbar-${type}`}\n        role={type}\n        title={title || (titleKey && locale && locale[titleKey])}\n        tooltip={tooltip}\n        icon={icon}\n        {...rest}\n      />\n    );\n  };\n}\n\n"],"file":"createMarkButton.js"}