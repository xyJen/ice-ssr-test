"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMarkButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _everCangjie = require("@ali/4ever-cangjie");

var _everComponent = require("@ali/4ever-component");

var _canToggleMark = _interopRequireDefault(require("../../queries/canToggleMark"));

var _actions = require("../../actions");

var _utils = require("../../utils");

const _createElement = /*#__PURE__*/React.createElement;
const MOD = _everCangjie.environment.IS_MAC ? 'âŒ˜' : 'Ctrl';

function createMarkButton(param) {
  const {
    type,
    hotKey,
    defaultIcon,
    delimiter,
    localeKeys
  } = param;
  const {
    titleKey,
    tooltipKey
  } = localeKeys || {};
  return function MarkButton(props) {
    const {
      controller,
      locale,
      title,
      tooltip: tooltipProp,
      icon = defaultIcon,
      ...rest
    } = props;
    const isDisabled = !(0, _canToggleMark.default)(controller);
    const isActive = controller.query(`is${(0, _lodash.capitalize)(type)}`);
    const handleClick = React.useCallback(() => controller.run('onAction', (0, _actions.toggleMark)(type)), [controller, type]);
    const tooltip = React.useMemo(() => {
      let tip = '';

      if (hotKey) {
        tip = ` ${MOD}+${hotKey.split('+').slice(1).map(_lodash.capitalize).join('+')}`;
      }

      const markdown = (0, _utils.getMarkdownFromDelimiter)(delimiter, locale);
      return {
        title: title || titleKey && locale && locale[titleKey] || '',
        shortCut: tip,
        description: markdown ? 'Markdown: ' + markdown : markdown,
        ...tooltipProp
      };
    }, [hotKey, title, titleKey, tooltipProp]);
    return /*#__PURE__*/_createElement(_everComponent.IconButton, (0, _extends2.default)({
      disabled: isDisabled,
      onClick: handleClick,
      active: isActive,
      testid: `bi-toolbar-${type}`,
      role: type,
      title: title || titleKey && locale && locale[titleKey],
      tooltip: tooltip,
      icon: icon
    }, rest));
  };
}
//# sourceMappingURL=createMarkButton.js.map