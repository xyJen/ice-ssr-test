"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMarkButton;
exports.createMarkMobileButton = createMarkMobileButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _everCangjie = require("@ali/4ever-cangjie");

var _everComponent = require("@ali/4ever-component");

var _canToggleMark = _interopRequireDefault(require("../queries/canToggleMark"));

var _actions = require("../actions");

const _createElement = /*#__PURE__*/React.createElement;
const MOD = _everCangjie.environment.IS_MAC ? 'âŒ˜' : 'Ctrl';

function createMarkButton(type, hotKey, Button, markdown) {
  let tip = '';

  if (hotKey) {
    tip = ` ${MOD}+${hotKey.split('+').slice(1).map(_lodash.capitalize).join('+')}`;
  }

  return function MarkButton(props) {
    const {
      controller,
      locale,
      ...rest
    } = props;
    const isDisabled = !(0, _canToggleMark.default)(controller);
    const isActive = controller.query(`is${(0, _lodash.capitalize)(type)}`);
    const handleClick = React.useCallback(() => controller.run('onAction', (0, _actions.toggleMark)(type)), [controller, type]);
    return /*#__PURE__*/_createElement(Button, (0, _extends2.default)({}, rest, {
      onClick: handleClick,
      active: isActive,
      disabled: isDisabled,
      testid: `bi-toolbar-${type}`,
      shortcutText: tip,
      tooltip: markdown ? /*#__PURE__*/_createElement(_everComponent.IconButtonShortcut, {
        title: locale?.buttonTitle,
        shortcut: tip,
        description: markdown ? `Markdown: ${markdown}` : ''
      }) : undefined,
      role: type
    }));
  };
}

function createMarkMobileButton(type, Icon) {
  var _ref = /*#__PURE__*/_createElement(Icon, null);

  return function MobileButton(props) {
    const {
      controller,
      Wrapper,
      item
    } = props;
    const isDisabled = !(0, _canToggleMark.default)(controller);
    const isActive = controller.query(`is${(0, _lodash.capitalize)(type)}`);
    const handleClick = React.useCallback(() => controller.run('onAction', (0, _actions.toggleMark)(type)), [controller, type]);
    return /*#__PURE__*/_createElement(Wrapper, {
      item: item,
      type: 'horiz',
      isActive: isActive,
      isDisabled: isDisabled,
      onClick: handleClick
    }, _ref);
  };
}
//# sourceMappingURL=createMarkButton.js.map