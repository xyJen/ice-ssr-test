"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMarkFactoryMobile = createMarkFactoryMobile;

var _lodash = require("lodash");

var _createMobileToolbar = _interopRequireDefault(require("./createMobileToolbar"));

var _createOnKeyDown = _interopRequireDefault(require("./handlers/createOnKeyDown"));

var _onCangjieInput = _interopRequireDefault(require("./handlers/onCangjieInput"));

var _createToggleMark = _interopRequireDefault(require("./commands/createToggleMark"));

var _createIsQuery = _interopRequireDefault(require("./queries/createIsQuery"));

var _canToggleMark = _interopRequireDefault(require("./queries/canToggleMark"));

var _createOnAction = _interopRequireDefault(require("./createOnAction"));

var _actions = require("./actions");

function createMarkFactoryMobile({
  moFactory,
  type,
  hotKey,
  delimiter,
  insideWhitespace = false,
  icon
}) {
  const toolbar = (0, _createMobileToolbar.default)(type, icon);
  const onKeyDown = (0, _createOnKeyDown.default)(type, hotKey, delimiter, insideWhitespace);
  const onCangjieInput = (0, _onCangjieInput.default)(type, delimiter, insideWhitespace);
  const toggleMark = (0, _createToggleMark.default)(type);
  const isQuery = (0, _createIsQuery.default)(type);
  const commands = {
    [`toggle${(0, _lodash.capitalize)(type)}`]: toggleMark
  };
  const queries = {
    [`is${(0, _lodash.capitalize)(type)}`]: isQuery,
    [`canToggle${(0, _lodash.capitalize)(type)}`]: _canToggleMark.default
  };

  const mobileBiFactory = config => {
    const pluginConfig = config[type] || {};
    return { ...moFactory({}),
      toolbar: toolbar(pluginConfig),
      commands,
      queries,
      actions: _actions.actions,
      onAction: (0, _createOnAction.default)(type),
      onCangjieInput,
      onKeyDown,
      models: {
        klass: 'mark',
        type
      }
    };
  };

  return mobileBiFactory;
}
//# sourceMappingURL=mobile.js.map