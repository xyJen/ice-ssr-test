import { jsonMLAttrsToStyle as _jsonMLAttrsToStyle } from "../../utils/jsonMLAttrsToStyle";
import { jsonMLAttrsToMarks as _jsonMLAttrsToMarks } from "../../utils/jsonMLAttrsToMarks";
import { markToJsonMLAttrs as _markToJsonMLAttrs } from "../../utils/markToJsonMLAttrs";
import { htmlToJsonMLAttrs as _htmlToJsonMLAttrs } from "../../utils/htmlToJsonMLAttrs";
export var createLeaf = function createLeaf(configs) {
  /**
   *
   */
  var _ref = configs || {},
      _ref$marks = _ref.marks,
      marksConfig = _ref$marks === void 0 ? {} : _ref$marks;

  var allowedMarks = marksConfig.allowedMarks;
  var allowedMarksMap = allowedMarks == null ? void 0 : allowedMarks.reduce(function (acc, k) {
    acc[k] = true;
    return acc;
  }, {});
  var leafRules = {
    jsonMLAttrsToStyle: function jsonMLAttrsToStyle(attrs, style) {
      return _jsonMLAttrsToStyle(attrs, style);
    },
    htmlToJsonMLAttrs: function htmlToJsonMLAttrs(name, attrs, curMarks) {
      var marks = _htmlToJsonMLAttrs(name, attrs, curMarks);

      if (allowedMarksMap) {
        marks = Object.keys(marks).reduce(function (acc, key) {
          if (allowedMarksMap[key]) {
            acc[key] = marks[key];
          }

          return acc;
        }, {});
      }

      return marks;
    },
    jsonMLAttrsToMarks: function jsonMLAttrsToMarks(attrs) {
      return _jsonMLAttrsToMarks(attrs);
    },
    markToJsonMLAttrs: function markToJsonMLAttrs(mark) {
      return _markToJsonMLAttrs(mark);
    }
  };
  return leafRules;
};
//# sourceMappingURL=leaf.js.map