import { SzUtil, ShdUtil, inlineCodeTheme as INLINE_CODE } from '@ali/4ever-utils';
export var jsonMLAttrsToStyle = function jsonMLAttrsToStyle(attrs, style) {
  var bold = attrs.bold,
      italic = attrs.italic,
      strike = attrs.strike,
      dstrike = attrs.dstrike,
      underline = attrs.underline,
      color = attrs.color,
      highlight = attrs.highlight,
      vertAlign = attrs.vertAlign,
      sz = attrs.sz,
      _attrs$szUnit = attrs.szUnit,
      szUnit = _attrs$szUnit === void 0 ? 'px' : _attrs$szUnit,
      fonts = attrs.fonts,
      inlineCode = attrs.inlineCode,
      shd = attrs.shd,
      spacing = attrs.spacing;

  if (bold) {
    style.fontWeight = 'bold';
  }

  if (italic) {
    style.fontStyle = 'italic';
  }

  if (strike || dstrike) {
    style.textDecoration = 'line-through';
  }

  if (underline) {
    // 使用最基础的 textDecoration 属性，否则 word/wps 等无法识别
    var isInvalid = true;

    if (typeof underline === 'string' || underline != null && underline.value && underline.value !== 'none') {
      isInvalid = false;
    }

    if (!isInvalid) {
      style.textDecoration = style.textDecoration ? style.textDecoration + " underline" : 'underline';
    }
  }

  if (color) {
    style.color = color;
  }

  if (highlight) {
    style.backgroundColor = highlight;
  } else if (shd) {
    style.backgroundColor = style.backgroundColor || ShdUtil.transformShd(shd);
  }

  if (vertAlign) {
    if (vertAlign === 'superscript') {
      style.verticalAlign = 'super';
    } else if (vertAlign === 'subscript') {
      style.verticalAlign = 'sub';
    }
  } // TODO: 这里无法区分正文or标题，无法给正文设置默认字号


  if (sz) {
    style.fontSize = SzUtil.toPt(sz + szUnit) + "pt";
  }

  if (spacing) {
    style.letterSpacing = spacing + "pt";
  }

  if (fonts) {
    var ascii = fonts.ascii,
        hAnsi = fonts.hAnsi,
        cs = fonts.cs,
        eastAsia = fonts.eastAsia;
    style.fontFamily = ascii + ", " + hAnsi + ", " + cs + ", " + eastAsia;
  }

  if (inlineCode) {
    style.padding = INLINE_CODE.padding;
    style.margin = INLINE_CODE.margin;
    style.border = INLINE_CODE.border;
    style.borderRadius = INLINE_CODE['border-radius'];
    style.fontFamily = INLINE_CODE['font-family'];
    style.wordBreak = INLINE_CODE['word-break'];
    style.backgroundColor = INLINE_CODE['background-color'];
  }

  return style;
};
//# sourceMappingURL=jsonMLAttrsToStyle.js.map