import _extends from "@babel/runtime/helpers/extends";
import { Bold, Italic, Strike, Dstrike, Underline, Em, InlineCode, Highlight, Color, Shd, Spacing, Kern, VertAlign, Sz, Fonts } from "../mo/models";
export var markToJsonMLAttrs = function markToJsonMLAttrs(mark) {
  if (Bold.isBold(mark)) {
    return {
      bold: mark.data.value !== false
    };
  }

  if (Italic.isItalic(mark)) {
    return {
      italic: true
    };
  }

  if (Strike.isStrike(mark)) {
    return {
      strike: mark.data.value !== false
    };
  }

  if (Dstrike.isDstrike(mark)) {
    return {
      dstrike: mark.data.value
    };
  }

  if (Underline.isUnderline(mark)) {
    return {
      underline: _extends({}, mark.data, {
        value: mark.data.value === undefined ? 'single' : mark.data.value
      })
    };
  }

  if (Em.isEm(mark)) {
    return {
      em: mark.data.value
    };
  }

  if (InlineCode.isInlineCode(mark)) {
    return {
      inlineCode: true
    };
  }

  if (Color.isColor(mark)) {
    return {
      color: mark.data.value
    };
  }

  if (Highlight.isHighlight(mark)) {
    return {
      highlight: mark.data.value
    };
  }

  if (Shd.isShd(mark)) {
    return {
      shd: mark.data
    };
  }

  if (Spacing.isSpacing(mark)) {
    return {
      spacing: mark.data.value
    };
  }

  if (Kern.isKern(mark)) {
    return {
      kern: mark.data.value
    };
  }

  if (VertAlign.isVertAlign(mark)) {
    return {
      vertAlign: mark.data.value
    };
  }

  if (Sz.isSz(mark)) {
    if (mark.data.szUnit) {
      return {
        sz: mark.data.value,
        szUnit: mark.data.szUnit
      };
    }

    return {
      sz: mark.data.value
    };
  }

  if (Fonts.isFonts(mark)) {
    return {
      fonts: mark.data
    };
  }

  return undefined;
};
//# sourceMappingURL=markToJsonMLAttrs.js.map