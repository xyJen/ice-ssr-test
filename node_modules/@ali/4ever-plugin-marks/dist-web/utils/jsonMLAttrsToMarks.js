import { Bold, Italic, Strike, Dstrike, Underline, Em, InlineCode, Highlight, Color, Shd, Spacing, Kern, VertAlign, Sz, Fonts, Caps, SmallCaps } from "../mo/models";
export var jsonMLAttrsToMarks = function jsonMLAttrsToMarks(attrs) {
  var marks = [];
  var keys = [];
  var bold = attrs.bold,
      caps = attrs.caps,
      color = attrs.color,
      fonts = attrs.fonts,
      highlight = attrs.highlight,
      shd = attrs.shd,
      italic = attrs.italic,
      smallCaps = attrs.smallCaps,
      strike = attrs.strike,
      dstrike = attrs.dstrike,
      sz = attrs.sz,
      szUnit = attrs.szUnit,
      underline = attrs.underline,
      vertAlign = attrs.vertAlign,
      inlineCode = attrs.inlineCode,
      spacing = attrs.spacing,
      kern = attrs.kern,
      em = attrs.em;

  if ('bold' in attrs) {
    marks.push(Bold.create(bold));
    keys.push('bold');
  }

  if ('caps' in attrs) {
    marks.push(Caps.create(caps));
    keys.push('caps');
  }

  if ('color' in attrs) {
    marks.push(Color.create(color));
    keys.push('color');
  }

  if ('fonts' in attrs) {
    // @ts-ignore
    marks.push(Fonts.create(fonts));
    keys.push('fonts');
  }

  if ('highlight' in attrs) {
    marks.push(Highlight.create(highlight));
    keys.push('highlight');
  }

  if ('shd' in attrs && typeof shd === 'object') {
    marks.push(Shd.create(shd));
    keys.push('shd');
  }

  if ('spacing' in attrs) {
    marks.push(Spacing.create(spacing));
    keys.push('spacing');
  }

  if ('kern' in attrs) {
    marks.push(Kern.create(kern));
    keys.push('kern');
  }

  if ('italic' in attrs && italic) {
    marks.push(Italic.create());
    keys.push('italic');
  }

  if ('smallCaps' in attrs) {
    marks.push(SmallCaps.create());
    keys.push('smallCaps');
  }

  if ('strike' in attrs && strike) {
    marks.push(Strike.create());
    keys.push('strike');
  }

  if ('sz' in attrs) {
    var szData = {
      value: sz
    };

    if ('szUnit' in attrs) {
      szData.szUnit = szUnit;
    } // @ts-ignore


    marks.push(Sz.create(szData));
    keys.push('sz', 'szUnit');
  }

  if ('underline' in attrs) {
    // 兼容：老数据 string 类型，导入 word 数据为 object
    var underlineData = typeof underline === 'string' ? {
      value: underline
    } : underline; // @ts-ignore

    marks.push(Underline.create(underlineData.value, underlineData.color));
    keys.push('underline');
  }

  if ('dstrike' in attrs) {
    if (typeof dstrike === 'object') {
      // 兼容存量导入数据 dstrike: { value: true/false }
      // @ts-ignore
      marks.push(Dstrike.create(dstrike.value));
    } else {
      // @ts-ignore
      marks.push(Dstrike.create(dstrike));
    }

    keys.push('dstrike');
  }

  if ('em' in attrs && em) {
    marks.push(Em.create(em));
    keys.push('em');
  }

  if ('vertAlign' in attrs) {
    // @ts-ignore
    marks.push(VertAlign.create(vertAlign));
    keys.push('vertAlign');
  }

  if ('inlineCode' in attrs) {
    marks.push(InlineCode.create());
    keys.push('inlineCode');
  }

  return {
    marks: marks,
    keys: keys
  };
};
//# sourceMappingURL=jsonMLAttrsToMarks.js.map