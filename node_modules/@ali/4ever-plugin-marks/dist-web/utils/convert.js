import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import { jsonMLAttrsToMarks } from "./jsonMLAttrsToMarks";
import { markToJsonMLAttrs } from "./markToJsonMLAttrs";
export function attrsToMarks(attrs) {
  var bold = attrs.bold,
      caps = attrs.caps,
      color = attrs.color,
      fonts = attrs.fonts,
      highlight = attrs.highlight,
      shd = attrs.shd,
      italic = attrs.italic,
      smallCaps = attrs.smallCaps,
      strike = attrs.strike,
      dstrike = attrs.dstrike,
      sz = attrs.sz,
      szUnit = attrs.szUnit,
      underline = attrs.underline,
      vertAlign = attrs.vertAlign,
      inlineCode = attrs.inlineCode,
      spacing = attrs.spacing,
      kern = attrs.kern,
      em = attrs.em,
      rest = _objectWithoutPropertiesLoose(attrs, ["bold", "caps", "color", "fonts", "highlight", "shd", "italic", "smallCaps", "strike", "dstrike", "sz", "szUnit", "underline", "vertAlign", "inlineCode", "spacing", "kern", "em"]);

  var _ref = jsonMLAttrsToMarks(attrs) || {},
      _ref$marks = _ref.marks,
      marks = _ref$marks === void 0 ? [] : _ref$marks;

  delete rest['data-type'];
  Object.keys(rest).forEach(function (key) {
    var data = rest[key];
    var markData;
    var isObj = typeof data === 'object' && !!data && !Array.isArray(data);

    if (!isObj) {
      // not a object
      markData = {
        value: data
      };
    } else {
      markData = data;
    }

    marks.push({
      type: key,
      data: markData
    });
  });
  return marks;
}
export function markToAttr(mark) {
  var _ref2;

  var m = markToJsonMLAttrs(mark);

  if (m) {
    return m;
  }

  return _ref2 = {}, _ref2[mark.type] = mark.data, _ref2;
}
export function marksToAttrs(marks) {
  return marks.reduce(function (attrs, mark) {
    return Object.assign(attrs, markToAttr(mark));
  }, {});
}
//# sourceMappingURL=convert.js.map