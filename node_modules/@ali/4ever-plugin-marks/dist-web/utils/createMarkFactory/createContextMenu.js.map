{"version":3,"sources":["../../../../src/utils/createMarkFactory/createContextMenu.ts"],"names":["capitalize","toggleMark","createContextMenu","type","hotKey","contextMenuPlugin","pluginConfig","locale","contextMenu","controller","next","menus","value","selection","document","canToggle","fragement","getFragmentAtRange","Boolean","text","e","isExpanded","query","push","name","buttonTitle","action","key","options","keepMenu","group","checked","others"],"mappings":"AAIA,SAASA,UAAT,QAA2B,WAA3B;AACA,SAASC,UAAT;AAEA,eAAe,SAASC,iBAAT,CACbC,IADa,EAEbC,MAFa,EAGb;AACA,SAAO,SAASC,iBAAT,CAA2BC,YAA3B,EAAyC;AAC9C,QAAMC,MAAM,GAAGD,YAAY,CAACC,MAAb,IAAuB,EAAtC;AACA,WAAO,SAASC,WAAT,CACLC,UADK,EAELC,IAFK,EAGL;AACA,UAAMC,KAAwB,GAAG,EAAjC;AADA,8BAEgCF,UAAU,CAACG,KAF3C;AAAA,UAEQC,SAFR,qBAEQA,SAFR;AAAA,UAEmBC,QAFnB,qBAEmBA,QAFnB;AAGA,UAAIC,SAAS,GAAG,KAAhB;;AACA,UAAI;AACF;AACA;AACA,YAAMC,SAAS,GAAGF,QAAQ,CAACG,kBAAT,CAA4BJ,SAA5B,CAAlB;AACAE,QAAAA,SAAS,GAAGG,OAAO,CAACF,SAAS,CAACG,IAAX,CAAnB;AACD,OALD,CAKE,OAAOC,CAAP,EAAU,CACV;AACD;;AACD,UAAIL,SAAS,IAAIF,SAAS,CAACQ,UAAvB,IAAqCZ,UAAU,CAACa,KAAX,eAA6BtB,UAAU,CAACG,IAAD,CAAvC,CAAzC,EAA2F;AACzFQ,QAAAA,KAAK,CAACY,IAAN,CAAW;AACTC,UAAAA,IAAI,EAAEjB,MAAM,CAACkB,WADJ;AAETC,UAAAA,MAAM,EAAEzB,UAAU,CAACE,IAAD,CAFT;AAGTwB,UAAAA,GAAG,mBAAiBxB,IAHX;AAITyB,UAAAA,OAAO,EAAE;AACPC,YAAAA,QAAQ,EAAE,IADH;AAEPzB,YAAAA,MAAM,EAANA,MAFO;AAGP0B,YAAAA,KAAK,EAAE,CAHA;AAIPC,YAAAA,OAAO,EAAEtB,UAAU,CAACa,KAAX,QAAsBtB,UAAU,CAACG,IAAD,CAAhC;AAJF;AAJA,SAAX;AAWD;;AACD,UAAM6B,MAAM,GAAGtB,IAAI,MAAM,EAAzB;AACA,uBAAWC,KAAX,EAAqBqB,MAArB;AACD,KA9BD;AA+BD,GAjCD;AAkCD","sourcesContent":["import {\n  Controller,\n  ContextMenuItem,\n} from '@ali/4ever-cangjie';\nimport { capitalize } from 'lodash-es';\nimport { toggleMark } from './actions';\n\nexport default function createContextMenu(\n  type: string,\n  hotKey: string,\n) {\n  return function contextMenuPlugin(pluginConfig) {\n    const locale = pluginConfig.locale || {};\n    return function contextMenu(\n      controller: Controller,\n      next: () => ContextMenuItem[] | null,\n    ) {\n      const menus: ContextMenuItem[] = [];\n      const { selection, document } = controller.value;\n      let canToggle = false;\n      try {\n        // getFragmentAtRange throws unknow error\n        // https://aone.alibaba-inc.com/v2/project/995011/bug/43531316\n        const fragement = document.getFragmentAtRange(selection);\n        canToggle = Boolean(fragement.text);\n      } catch (e) {\n        // ignore\n      }\n      if (canToggle && selection.isExpanded && controller.query(`canToggle${capitalize(type)}`)) {\n        menus.push({\n          name: locale.buttonTitle,\n          action: toggleMark(type),\n          key: `mark-toggle-${type}`,\n          options: {\n            keepMenu: true,\n            hotKey,\n            group: 2,\n            checked: controller.query(`is${capitalize(type)}`),\n          },\n        });\n      }\n      const others = next() || [];\n      return [...menus, ...others];\n    };\n  };\n}\n"],"file":"createContextMenu.js"}