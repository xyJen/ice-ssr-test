{"version":3,"sources":["../../../../../src/utils/createMarkFactory/components/createMobileButton.tsx"],"names":["React","capitalize","canToggleMark","toggleMark","createMarkMobileButton","type","icon","buttonType","MobileButton","props","controller","Wrapper","item","isDisabled","isActive","query","handleClick","useCallback","run","focusAttr","useMemo","isFocused"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,aAAP;AACA,SAASC,UAAT;AAGA,OAAO,SAASC,sBAAT,CACLC,IADK,EAELC,IAFK,EAGLC,UAHK,EAIL;AACA,SAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAuD;AAAA,QACpDC,UADoD,GACtBD,KADsB,CACpDC,UADoD;AAAA,QACxCC,OADwC,GACtBF,KADsB,CACxCE,OADwC;AAAA,QAC/BC,IAD+B,GACtBH,KADsB,CAC/BG,IAD+B;AAE5D,QAAMC,UAAU,GAAG,CAACX,aAAa,CAACQ,UAAD,CAAjC;AAEA,QAAMI,QAAQ,GAAGJ,UAAU,CAACK,KAAX,QAAsBd,UAAU,CAACI,IAAD,CAAhC,CAAjB;AACA,QAAMW,WAAW,GAAGhB,KAAK,CAACiB,WAAN,CAClB;AAAA,aAAMP,UAAU,CAACQ,GAAX,CAAe,UAAf,EAA2Bf,UAAU,CAACE,IAAD,CAArC,CAAN;AAAA,KADkB,EAElB,CAACK,UAAD,CAFkB,CAApB;AAIA,QAAMS,SAAS,GAAGnB,KAAK,CAACoB,OAAN,CAAc,YAAM;AACpC,UAAI,CAACN,QAAL,EAAe;AACb,eAAO,EAAP;AACD;;AACD,aAAOP,UAAU,KAAK,KAAf,GAAuB;AAAEc,QAAAA,SAAS,EAAE;AAAb,OAAvB,GAA6C;AAAEP,QAAAA,QAAQ,EAAE;AAAZ,OAApD;AACD,KALiB,EAKf,CAACA,QAAD,CALe,CAAlB;AAOA,wBACE,eAAC,OAAD,eACMK,SADN;AAEE,MAAA,IAAI,EAAEP,IAFR;AAGE,MAAA,IAAI,EAAEL,UAHR;AAIE,MAAA,IAAI,EAAED,IAJR;AAKE,MAAA,UAAU,EAAEO,UALd;AAME,MAAA,OAAO,EAAEG;AANX,OADF;AAUD,GA1BD;AA2BD","sourcesContent":["import * as React from 'react';\nimport { capitalize } from 'lodash-es';\nimport canToggleMark from '../queries/canToggleMark';\nimport { toggleMark } from '../actions';\nimport type { MobileToolbarButtonProps } from '@ali/4ever-component';\n\nexport function createMarkMobileButton(\n  type,\n  icon: string,\n  buttonType: 'big' | 'horiz',\n) {\n  return function MobileButton(props: MobileToolbarButtonProps) {\n    const { controller, Wrapper, item } = props;\n    const isDisabled = !canToggleMark(controller);\n\n    const isActive = controller.query(`is${capitalize(type)}`);\n    const handleClick = React.useCallback(\n      () => controller.run('onAction', toggleMark(type)),\n      [controller],\n    );\n    const focusAttr = React.useMemo(() => {\n      if (!isActive) {\n        return {};\n      }\n      return buttonType === 'big' ? { isFocused: true } : { isActive: true };\n    }, [isActive]);\n\n    return (\n      <Wrapper\n        {...focusAttr}\n        item={item}\n        type={buttonType}\n        icon={icon}\n        isDisabled={isDisabled}\n        onClick={handleClick}\n      />\n    );\n  };\n}\n"],"file":"createMobileButton.js"}