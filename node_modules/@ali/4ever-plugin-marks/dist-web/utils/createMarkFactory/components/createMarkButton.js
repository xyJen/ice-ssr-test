import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { capitalize } from 'lodash-es';
import { environment } from '@ali/4ever-cangjie';
import { IconButtonShortcut } from '@ali/4ever-component';
import canToggleMark from "../queries/canToggleMark";
import { toggleMark } from "../actions";
var MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';
export default function createMarkButton(type, hotKey, Button, markdown) {
  var tip = '';

  if (hotKey) {
    tip = " " + MOD + "+" + hotKey.split('+').slice(1).map(capitalize).join('+');
  }

  return function MarkButton(props) {
    var controller = props.controller,
        locale = props.locale,
        rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

    var isDisabled = !canToggleMark(controller);
    var isActive = controller.query("is" + capitalize(type));
    var handleClick = React.useCallback(function () {
      return controller.run('onAction', toggleMark(type));
    }, [controller, type]);
    return /*#__PURE__*/_createElement(Button, _extends({}, rest, {
      onClick: handleClick,
      active: isActive,
      disabled: isDisabled,
      testid: "bi-toolbar-" + type,
      shortcutText: tip,
      tooltip: markdown ? /*#__PURE__*/_createElement(IconButtonShortcut, {
        title: locale == null ? void 0 : locale.buttonTitle,
        shortcut: tip,
        description: markdown ? "Markdown: " + markdown : ''
      }) : undefined,
      role: type
    }));
  };
}
export function createMarkMobileButton(type, Icon) {
  var _ref = /*#__PURE__*/_createElement(Icon, null);

  return function MobileButton(props) {
    var controller = props.controller,
        Wrapper = props.Wrapper,
        item = props.item;
    var isDisabled = !canToggleMark(controller);
    var isActive = controller.query("is" + capitalize(type));
    var handleClick = React.useCallback(function () {
      return controller.run('onAction', toggleMark(type));
    }, [controller, type]);
    return /*#__PURE__*/_createElement(Wrapper, {
      item: item,
      type: 'horiz',
      isActive: isActive,
      isDisabled: isDisabled,
      onClick: handleClick
    }, _ref);
  };
}
//# sourceMappingURL=createMarkButton.js.map