{"version":3,"sources":["../../../../../src/utils/createMarkFactory/components/createMarkButton.tsx"],"names":["React","capitalize","environment","IconButtonShortcut","canToggleMark","toggleMark","MOD","IS_MAC","createMarkButton","type","hotKey","Button","markdown","tip","split","slice","map","join","MarkButton","props","controller","locale","rest","isDisabled","isActive","query","handleClick","useCallback","run","buttonTitle","undefined","createMarkMobileButton","Icon","MobileButton","Wrapper","item"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { capitalize } from 'lodash-es';\nimport { IconButtonPropsOmit } from '@ali/we-toolbar';\nimport { Controller, environment } from '@ali/4ever-cangjie';\nimport { IconButtonShortcut } from '@ali/4ever-component';\nimport canToggleMark from '../queries/canToggleMark';\nimport { toggleMark } from '../actions';\nimport type { MobileToolbarButtonProps } from '@ali/4ever-component';\n\nconst MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';\n\nexport interface MarkButtonProps {\n  controller: Controller;\n  locale: Record<string, string>;\n}\n\nexport default function createMarkButton(type, hotKey, Button: React.FC<IconButtonPropsOmit>, markdown?: string) {\n  let tip = '';\n  if (hotKey) {\n    tip = ` ${MOD}+${hotKey.split('+').slice(1).map(capitalize).join('+')}`;\n  }\n\n  return function MarkButton(props: MarkButtonProps) {\n    const { controller, locale, ...rest } = props;\n    const isDisabled = !canToggleMark(controller);\n\n    const isActive = controller.query(`is${capitalize(type)}`);\n    const handleClick = React.useCallback(() => controller.run('onAction', toggleMark(type)), [controller, type]);\n\n    return (\n      <Button\n        {...rest}\n        onClick={handleClick}\n        active={isActive}\n        disabled={isDisabled}\n        testid={`bi-toolbar-${type}`}\n        shortcutText={tip}\n        tooltip={\n          markdown ? <IconButtonShortcut title={locale?.buttonTitle} shortcut={tip} description={markdown ? `Markdown: ${markdown}` : ''}/> : undefined\n        }\n        role={type}\n      />\n    );\n  };\n}\n\nexport function createMarkMobileButton(type, Icon: React.ComponentType) {\n  return function MobileButton(props: MobileToolbarButtonProps) {\n    const { controller, Wrapper, item } = props;\n    const isDisabled = !canToggleMark(controller);\n\n    const isActive = controller.query(`is${capitalize(type)}`);\n    const handleClick = React.useCallback(() => controller.run('onAction', toggleMark(type)), [controller, type]);\n\n    return (\n      <Wrapper\n        item={item}\n        type={'horiz'}\n        isActive={isActive}\n        isDisabled={isDisabled}\n        onClick={handleClick}\n      >\n        <Icon />\n      </Wrapper>\n    );\n  };\n}\n"],"file":"createMarkButton.js"}