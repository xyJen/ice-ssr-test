{"version":3,"sources":["../../../../../../src/utils/createMarkFactory/components/next/createMarkButton.tsx"],"names":["React","capitalize","environment","IconButton","canToggleMark","toggleMark","getMarkdownFromDelimiter","MOD","IS_MAC","createMarkButton","param","type","hotKey","defaultIcon","delimiter","localeKeys","titleKey","tooltipKey","MarkButton","props","controller","locale","title","tooltipProp","tooltip","icon","rest","isDisabled","isActive","query","handleClick","useCallback","run","useMemo","tip","split","slice","map","join","markdown","shortCut","description"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { capitalize } from 'lodash-es';\nimport { Controller, environment } from '@ali/4ever-cangjie';\nimport type { Delimiter } from '@ali/4ever-utils';\nimport { IconButton, IToolbarButtonConfig } from '@ali/4ever-component';\nimport canToggleMark from '../../queries/canToggleMark';\nimport { toggleMark } from '../../actions';\nimport { getMarkdownFromDelimiter } from '../../utils';\n\nconst MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';\n\nexport interface MarkButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  locale?: Record<string, string>;\n}\n\nexport default function createMarkButton(\n  param: {\n    type: string;\n    hotKey?: string;\n    defaultIcon: React.ReactElement;\n    delimiter: Delimiter | Delimiter[];\n    localeKeys?: {\n      titleKey?: string;\n      tooltipKey?: string;\n    }\n  }) {\n  const { type, hotKey, defaultIcon, delimiter, localeKeys } = param;\n\n  const { titleKey, tooltipKey } = localeKeys || {};\n\n  return function MarkButton(props: MarkButtonProps) {\n    const { controller, locale, title, tooltip: tooltipProp, icon = defaultIcon, ...rest } = props;\n    const isDisabled = !canToggleMark(controller);\n    const isActive = controller.query(`is${capitalize(type)}`);\n    const handleClick = React.useCallback(() => controller.run('onAction', toggleMark(type)), [controller, type]);\n\n    const tooltip = React.useMemo(() => {\n      let tip = '';\n      if (hotKey) {\n        tip = ` ${MOD}+${hotKey.split('+').slice(1).map(capitalize).join('+')}`;\n      }\n      const markdown = getMarkdownFromDelimiter(delimiter, locale);\n      return {\n        title: title || (titleKey && locale && locale[titleKey]) || '',\n        shortCut: tip,\n        description: markdown ? ('Markdown: ' + markdown) : markdown,\n        ...tooltipProp,\n      };\n    }, [hotKey, title, titleKey, tooltipProp]);\n\n    return (\n      <IconButton\n        disabled={isDisabled}\n        onClick={handleClick}\n        active={isActive}\n        testid={`bi-toolbar-${type}`}\n        role={type}\n        title={title || (titleKey && locale && locale[titleKey])}\n        tooltip={tooltip}\n        icon={icon}\n        {...rest}\n      />\n    );\n  };\n}\n\n"],"file":"createMarkButton.js"}