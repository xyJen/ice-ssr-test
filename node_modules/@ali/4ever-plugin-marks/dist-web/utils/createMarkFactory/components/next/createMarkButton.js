import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { capitalize } from 'lodash-es';
import { environment } from '@ali/4ever-cangjie';
import { IconButton } from '@ali/4ever-component';
import canToggleMark from "../../queries/canToggleMark";
import { toggleMark } from "../../actions";
import { getMarkdownFromDelimiter } from "../../utils";
var MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';
export default function createMarkButton(param) {
  var type = param.type,
      hotKey = param.hotKey,
      defaultIcon = param.defaultIcon,
      delimiter = param.delimiter,
      localeKeys = param.localeKeys;

  var _ref = localeKeys || {},
      titleKey = _ref.titleKey,
      tooltipKey = _ref.tooltipKey;

  return function MarkButton(props) {
    var controller = props.controller,
        locale = props.locale,
        title = props.title,
        tooltipProp = props.tooltip,
        _props$icon = props.icon,
        icon = _props$icon === void 0 ? defaultIcon : _props$icon,
        rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "title", "tooltip", "icon"]);

    var isDisabled = !canToggleMark(controller);
    var isActive = controller.query("is" + capitalize(type));
    var handleClick = React.useCallback(function () {
      return controller.run('onAction', toggleMark(type));
    }, [controller, type]);
    var tooltip = React.useMemo(function () {
      var tip = '';

      if (hotKey) {
        tip = " " + MOD + "+" + hotKey.split('+').slice(1).map(capitalize).join('+');
      }

      var markdown = getMarkdownFromDelimiter(delimiter, locale);
      return _extends({
        title: title || titleKey && locale && locale[titleKey] || '',
        shortCut: tip,
        description: markdown ? 'Markdown: ' + markdown : markdown
      }, tooltipProp);
    }, [hotKey, title, titleKey, tooltipProp]);
    return /*#__PURE__*/_createElement(IconButton, _extends({
      disabled: isDisabled,
      onClick: handleClick,
      active: isActive,
      testid: "bi-toolbar-" + type,
      role: type,
      title: title || titleKey && locale && locale[titleKey],
      tooltip: tooltip,
      icon: icon
    }, rest));
  };
}
//# sourceMappingURL=createMarkButton.js.map