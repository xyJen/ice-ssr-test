import _extends from "@babel/runtime/helpers/extends";
import { capitalize } from 'lodash-es';
import createToolbar from "./createToolbar";
import createMenubar from "./createMenubar";
import createOnKeyDown from "./handlers/createOnKeyDown";
import createOnCangjieInput from "./handlers/onCangjieInput";
import createToggleMark from "./commands/createToggleMark";
import createIsQuery from "./queries/createIsQuery";
import canToggleMark from "./queries/canToggleMark";
import createContextMenu from "./createContextMenu";
import createOnAction from "./createOnAction";
/** depreacted 只为兼容，请勿使用 */

import * as oldActions from "./actions";
import { actions } from "./actions";
import createRenderToolbarFactory from "./createRenderToolbar";
export function createMarkFactory(_ref) {
  var _commands, _queries;

  var type = _ref.type,
      hotKey = _ref.hotKey,
      Button = _ref.Button,
      delimiter = _ref.delimiter,
      _ref$insideWhitespace = _ref.insideWhitespace,
      insideWhitespace = _ref$insideWhitespace === void 0 ? false : _ref$insideWhitespace,
      Icon = _ref.Icon,
      toolbarIcon = _ref.toolbarIcon,
      _ref$localeKeys = _ref.localeKeys,
      localeKeys = _ref$localeKeys === void 0 ? {} : _ref$localeKeys,
      moFactory = _ref.moFactory;
  var toolbar = createToolbar(type, hotKey, Button, Icon, delimiter);
  var createRenderToolbar = toolbarIcon && createRenderToolbarFactory({
    type: type,
    hotKey: hotKey,
    toolbarIcon: toolbarIcon,
    localeKeys: localeKeys,
    delimiter: delimiter
  });
  var menubar = createMenubar(type);
  var onKeyDown = createOnKeyDown(type, hotKey, delimiter, insideWhitespace);
  var onCangjieInput = createOnCangjieInput(type, delimiter, insideWhitespace);
  var toggleMark = createToggleMark(type);
  var isQuery = createIsQuery(type);
  var contextMenu = createContextMenu(type, hotKey);
  var commands = (_commands = {}, _commands["toggle" + capitalize(type)] = toggleMark, _commands);
  var queries = (_queries = {}, _queries["is" + capitalize(type)] = isQuery, _queries["canToggle" + capitalize(type)] = canToggleMark, _queries);

  var biFactory = function biFactory(config) {
    var pluginConfig = config[type] || {};
    return _extends({}, moFactory == null ? void 0 : moFactory({}), {
      key: type,
      contextMenu: contextMenu(pluginConfig),
      toolbar: toolbar(pluginConfig),
      renderToolbar: createRenderToolbar == null ? void 0 : createRenderToolbar(pluginConfig.locale),
      menubar: menubar(),
      actions: actions,
      commands: commands,
      queries: queries,
      onAction: createOnAction(type),
      onKeyDown: onKeyDown,
      onCangjieInput: onCangjieInput,
      models: {
        klass: 'mark',
        type: type
      }
    });
  }; // TODO 插件迁移: 待优化


  biFactory.commands = commands;
  biFactory.queries = queries;
  biFactory.actions = oldActions;
  return biFactory;
}
//# sourceMappingURL=index.js.map