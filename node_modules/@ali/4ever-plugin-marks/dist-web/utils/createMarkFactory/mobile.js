import _extends from "@babel/runtime/helpers/extends";
import { capitalize } from 'lodash-es';
import createToolbar from "./createMobileToolbar";
import createOnKeyDown from "./handlers/createOnKeyDown";
import createOnCangjieInput from "./handlers/onCangjieInput";
import createToggleMark from "./commands/createToggleMark";
import createIsQuery from "./queries/createIsQuery";
import canToggleMark from "./queries/canToggleMark";
import createOnAction from "./createOnAction";
import { actions } from "./actions";
export function createMarkFactoryMobile(_ref) {
  var _commands, _queries;

  var moFactory = _ref.moFactory,
      type = _ref.type,
      hotKey = _ref.hotKey,
      delimiter = _ref.delimiter,
      _ref$insideWhitespace = _ref.insideWhitespace,
      insideWhitespace = _ref$insideWhitespace === void 0 ? false : _ref$insideWhitespace,
      icon = _ref.icon;
  var toolbar = createToolbar(type, icon);
  var onKeyDown = createOnKeyDown(type, hotKey, delimiter, insideWhitespace);
  var onCangjieInput = createOnCangjieInput(type, delimiter, insideWhitespace);
  var toggleMark = createToggleMark(type);
  var isQuery = createIsQuery(type);
  var commands = (_commands = {}, _commands["toggle" + capitalize(type)] = toggleMark, _commands);
  var queries = (_queries = {}, _queries["is" + capitalize(type)] = isQuery, _queries["canToggle" + capitalize(type)] = canToggleMark, _queries);

  var mobileBiFactory = function mobileBiFactory(config) {
    var pluginConfig = config[type] || {};
    return _extends({}, moFactory({}), {
      toolbar: toolbar(pluginConfig),
      commands: commands,
      queries: queries,
      actions: actions,
      onAction: createOnAction(type),
      onCangjieInput: onCangjieInput,
      onKeyDown: onKeyDown,
      models: {
        klass: 'mark',
        type: type
      }
    });
  };

  return mobileBiFactory;
}
//# sourceMappingURL=mobile.js.map