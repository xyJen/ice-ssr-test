{"version":3,"sources":["../../../../src/utils/createMarkFactory/createRenderToolbar.tsx"],"names":["React","ItemSlot","SlotType","createMarkButton","factory","payload","type","hotKey","delimiter","defaultIcon","toolbarIcon","localeKeys","Component","createRenderToolbar","locale","props","controller","buttonName","extraProps","iconButton"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAASC,QAAT,EAAkCC,QAAlC,QAAkD,sBAAlD;AAEA,OAAOC,gBAAP;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAjB,EASZ;AAAA,MACOC,IADP,GACwED,OADxE,CACOC,IADP;AAAA,MACaC,MADb,GACwEF,OADxE,CACaE,MADb;AAAA,MACqBC,SADrB,GACwEH,OADxE,CACqBG,SADrB;AAAA,MAC6CC,WAD7C,GACwEJ,OADxE,CACgCK,WADhC;AAAA,MAC0DC,UAD1D,GACwEN,OADxE,CAC0DM,UAD1D;AAGD,MAAMC,SAAS,GAAGT,gBAAgB,CAAC;AAAEG,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,MAAM,EAANA,MAAR;AAAgBE,IAAAA,WAAW,EAAXA,WAAhB;AAA6BE,IAAAA,UAAU,EAAVA,UAA7B;AAAyCH,IAAAA,SAAS,EAATA;AAAzC,GAAD,CAAlC;AAEA,SAAO,SAASK,mBAAT,CACLC,MADK,EAEU;AAEf,WAAO,UAACC,KAAD,EAAQC,UAAR,EAAuB;AAAA,UAEpBC,UAFoB,GAEOF,KAFP,CAEpBE,UAFoB;AAAA,UAERC,UAFQ,GAEOH,KAFP,CAERG,UAFQ;;AAI5B,UAAID,UAAU,KAAKX,IAAnB,EAAyB;AACvB,4BACE,eAAC,QAAD;AAAU,UAAA,OAAO,EAAEJ,QAAQ,CAACiB;AAA5B,wBACE,eAAC,SAAD;AACE,UAAA,UAAU,EAAEH,UADd;AAEE,UAAA,MAAM,EAAEF;AAFV,WAGMI,UAHN,EADF,CADF;AASD;;AAED,aAAO,IAAP;AACD,KAjBD;AAkBD,GAtBD;AAuBD","sourcesContent":["import * as React from 'react';\nimport { ItemSlot, RenderToolbar, SlotType } from '@ali/4ever-component';\nimport type { Delimiter } from '@ali/4ever-utils';\nimport createMarkButton from './components/next/createMarkButton';\n\nexport default function factory(payload: {\n  type: string,\n  hotKey?: string,\n  delimiter: Delimiter | Delimiter[],\n  toolbarIcon: React.ReactElement,\n  localeKeys?: {\n    titleKey?: string;\n    tooltipKey?: string;\n  }\n}) {\n  const { type, hotKey, delimiter, toolbarIcon: defaultIcon, localeKeys} = payload;\n\n  const Component = createMarkButton({ type, hotKey, defaultIcon, localeKeys, delimiter });\n\n  return function createRenderToolbar(\n    locale: Record<string, string>,\n  ): RenderToolbar {\n\n    return (props, controller) => {\n\n      const { buttonName, extraProps } = props;\n\n      if (buttonName === type) {\n        return (\n          <ItemSlot display={SlotType.iconButton}>\n            <Component\n              controller={controller}\n              locale={locale}\n              {...extraProps}\n            />\n          </ItemSlot>\n        )\n      }\n\n      return null\n    };\n  }\n}\n\n"],"file":"createRenderToolbar.js"}