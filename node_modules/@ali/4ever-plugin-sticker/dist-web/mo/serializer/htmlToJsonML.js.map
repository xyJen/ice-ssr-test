{"version":3,"sources":["../../../../src/mo/serializer/htmlToJsonML.ts"],"names":["getTagName","getLastChild","isEmojiClsName","paragraphTags","createEmptyText","Sticker","name","onOpenTag","state","attrs","sticker","code","title","replace","TYPE","push","onCloseTag","pop","parent","peek","append","prevSibling","isPhantom","phantom"],"mappings":"AAAA,SAAiBA,UAAjB,EAA6BC,YAA7B,EAA2CC,cAA3C,EAA2DC,aAA3D,QAAyF,kBAAzF;AACA,SAAuDC,eAAvD,QAA+E,oBAA/E;AACA,OAAOC,OAAP;AAEA,eAAe;AACbC,EAAAA,IAAI,EAAE,SADO;AAGbC,EAAAA,SAHa,qBAGHC,KAHG,EAGWF,IAHX,EAGyBG,KAHzB,EAGqD;AAChE;AACA,QAAI,CAACP,cAAc,CAACO,KAAD,oBAACA,KAAK,SAAN,CAAnB,EAAmC,OAAO,KAAP;AAEnC,QAAMC,OAAe,GAAG,CACtB,MADsB,EAEtB;AAAEC,MAAAA,IAAI,EAAEF,KAAK,CAACG,KAAN,CAAYC,OAAZ,CAAoB,QAApB,EAA8B,EAA9B,CAAR;AAA2C,mBAAaR,OAAO,CAACS;AAAhE,KAFsB,EAGtBV,eAAe,EAHO,CAAxB;AAKAI,IAAAA,KAAK,CAACO,IAAN,CAAWL,OAAX;AACA,WAAO,IAAP;AACD,GAdY;AAgBbM,EAAAA,UAhBa,sBAgBFR,KAhBE,EAgBYF,IAhBZ,EAgB0BG,KAhB1B,EAgBsD;AACjE,QAAI,CAACP,cAAc,CAACO,KAAD,oBAACA,KAAK,SAAN,CAAnB,EAAmC,OAAO,KAAP;AAEnC,QAAMC,OAAO,GAAGF,KAAK,CAACS,GAAN,EAAhB;AACA,QAAMC,MAAM,GAAGV,KAAK,CAACW,IAAN,EAAf;;AACA,QAAIhB,aAAa,CAACH,UAAU,CAACkB,MAAD,CAAX,CAAjB,EAAuC;AACrCV,MAAAA,KAAK,CAACY,MAAN,CAAaV,OAAb;AACA,aAAO,IAAP;AACD;;AAED,QAAMW,WAAW,GAAGpB,YAAY,CAACiB,MAAD,CAAhC;;AACA,QAAIG,WAAW,IAAKA,WAAD,CAAyBC,SAA5C,EAAuD;AACrDD,MAAAA,WAAW,CAACN,IAAZ,CAAiBL,OAAjB,EAA0BN,eAAe,EAAzC;AACD,KAFD,MAEO;AACL,UAAMmB,OAAe,GAAG,CACtB,GADsB,EAEtBnB,eAAe,EAFO,EAGtBM,OAHsB,EAItBN,eAAe,EAJO,CAAxB;AAMCmB,MAAAA,OAAD,CAAqBD,SAArB,GAAiC,IAAjC;AACAd,MAAAA,KAAK,CAACY,MAAN,CAAaG,OAAb;AACD;;AACD,WAAO,IAAP;AACD;AAxCY,CAAf","sourcesContent":["import { JsonML, getTagName, getLastChild, isEmojiClsName, paragraphTags, Phantom } from '@ali/4ever-utils';\nimport { MoState as State, MoAttributes as Attributes, createEmptyText, } from '@ali/4ever-cangjie';\nimport Sticker from '../models';\n\nexport default {\n  name: 'sticker',\n\n  onOpenTag(state: State, name: string, attrs: Attributes): boolean {\n    // 解析来自 IM 的表情\n    if (!isEmojiClsName(attrs?.class)) return false;\n\n    const sticker: JsonML = [\n      'span',\n      { code: attrs.title.replace(/\\[|\\]/g, ''), 'data-type': Sticker.TYPE },\n      createEmptyText(),\n    ];\n    state.push(sticker);\n    return true;\n  },\n\n  onCloseTag(state: State, name: string, attrs: Attributes): boolean {\n    if (!isEmojiClsName(attrs?.class)) return false;\n\n    const sticker = state.pop();\n    const parent = state.peek();\n    if (paragraphTags[getTagName(parent)]) {\n      state.append(sticker);\n      return true;\n    }\n\n    const prevSibling = getLastChild(parent);\n    if (prevSibling && (prevSibling as Phantom).isPhantom) {\n      prevSibling.push(sticker, createEmptyText());\n    } else {\n      const phantom: JsonML = [\n        'p',\n        createEmptyText(),\n        sticker,\n        createEmptyText(),\n      ];\n      (phantom as Phantom).isPhantom = true;\n      state.append(phantom);\n    }\n    return true;\n  },\n};\n"],"file":"htmlToJsonML.js"}