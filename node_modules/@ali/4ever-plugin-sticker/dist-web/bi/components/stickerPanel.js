import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Tooltip, SpinErrorCard } from '@ali/we-design';
import { DATA_STICKER, DEFAULT_STICKERS, STICKER_SZ_IN_PANEL } from "../../utils/constants";
import { StickerPannelWrapper, StickerPanelItem, StickerSplitLine } from "./styled";
import StickerItem from "../../utils/stickerItem";
var DEFAULT_SRC = DEFAULT_STICKERS.src;
var errorCardStyle = {
  width: 296,
  height: 400,
  border: 'none'
};

var StickerPannel = function StickerPannel(props) {
  var onClick = props.onClick,
      sticker = props.sticker,
      columns = props.columns,
      locale = props.locale;

  var _React$useState = React.useState(false),
      isNetError = _React$useState[0],
      setNetError = _React$useState[1];

  var stickerList = sticker.stickerList;
  var handleClick = React.useCallback(function (event) {
    var ancestor = event.currentTarget.closest("[" + DATA_STICKER + "]");
    var code = (ancestor == null ? void 0 : ancestor.getAttribute(DATA_STICKER)) || '';
    onClick({
      event: event,
      code: code
    });
  }, [onClick]);
  var handlePreventDefault = React.useCallback(function (e) {
    e.preventDefault();
    e.stopPropagation();
  }, []);
  React.useLayoutEffect(function () {
    var image = new Image();
    image.src = DEFAULT_SRC;

    var handleImageLoad = function handleImageLoad() {
      return setNetError(false);
    };

    var handleImageError = function handleImageError() {
      return setNetError(true);
    };

    image.addEventListener('load', handleImageLoad);
    image.addEventListener('error', handleImageError);
    return function () {
      image.removeEventListener('load', handleImageLoad);
      image.removeEventListener('error', handleImageError); // @ts-ignore

      image = null;
    };
  }, []);
  return isNetError ? /*#__PURE__*/_createElement(SpinErrorCard, {
    style: errorCardStyle,
    transparent: false,
    tip: locale == null ? void 0 : locale.networkError
  }) : /*#__PURE__*/_createElement(StickerPannelWrapper, {
    className: "sticker-panel",
    "data-testid": "sticker-panel",
    onMouseDown: handlePreventDefault,
    style: {
      gridTemplateColumns: "repeat(" + columns + ", 1fr)"
    }
  }, stickerList.map(function (_ref) {
    var code = _ref.code,
        stickerId = _ref.stickerId;
    var key = code + "_" + stickerId;
    return stickerId.indexOf('sticker_split_line') >= 0 ? /*#__PURE__*/_createElement(StickerSplitLine, {
      key: key,
      columns: columns
    }) : /*#__PURE__*/_createElement(StickerPanelItem, {
      key: key
    }, /*#__PURE__*/_createElement(Tooltip, {
      key: key,
      placement: "bottom",
      title: sticker.getStickerLocale(code)
    }, /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(StickerItem, {
      key: key,
      code: code,
      sz: STICKER_SZ_IN_PANEL,
      sticker: sticker,
      onClick: handleClick // 这里已检测过网络状态，不需要再次检测
      ,
      doNotNeedCheckNet: true
    }))));
  }));
};

export default /*#__PURE__*/React.memo(StickerPannel);
//# sourceMappingURL=stickerPanel.js.map