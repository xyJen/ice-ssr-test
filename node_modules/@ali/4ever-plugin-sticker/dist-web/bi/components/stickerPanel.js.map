{"version":3,"sources":["../../../../src/bi/components/stickerPanel.tsx"],"names":["React","Tooltip","SpinErrorCard","DATA_STICKER","DEFAULT_STICKERS","STICKER_SZ_IN_PANEL","StickerPannelWrapper","StickerPanelItem","StickerSplitLine","StickerItem","DEFAULT_SRC","src","errorCardStyle","width","height","border","StickerPannel","props","onClick","sticker","columns","locale","useState","isNetError","setNetError","stickerList","handleClick","useCallback","event","ancestor","currentTarget","closest","code","getAttribute","handlePreventDefault","e","preventDefault","stopPropagation","useLayoutEffect","image","Image","handleImageLoad","handleImageError","addEventListener","removeEventListener","networkError","gridTemplateColumns","map","stickerId","key","indexOf","getStickerLocale","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Tooltip, SpinErrorCard } from '@ali/we-design';\nimport { DATA_STICKER, DEFAULT_STICKERS, STICKER_SZ_IN_PANEL } from '../../utils/constants';\nimport {\n  StickerPannelWrapper,\n  StickerPanelItem,\n  StickerSplitLine,\n} from './styled';\nimport Sticker from '../../utils/sticker';\nimport StickerItem from '../../utils/stickerItem';\n\nconst { src: DEFAULT_SRC } = DEFAULT_STICKERS;\nconst errorCardStyle: React.CSSProperties = {\n  width: 296,\n  height: 400,\n  border: 'none',\n};\n\ninterface StickerPannelProps {\n  sticker: Sticker;\n  columns: number;\n  locale?: Record<string, any>;\n  onClick: ({\n    event,\n    code,\n  }: {\n    event: React.MouseEvent<HTMLSpanElement>;\n    code: string;\n  }) => void;\n}\n\nconst StickerPannel: React.FC<StickerPannelProps> = (props) => {\n  const { onClick, sticker, columns, locale } = props;\n  const [isNetError, setNetError] = React.useState(false);\n\n  const { stickerList } = sticker;\n  const handleClick = React.useCallback(\n    (event) => {\n      const ancestor = event.currentTarget.closest(`[${DATA_STICKER}]`);\n      const code = ancestor?.getAttribute(DATA_STICKER) || '';\n      onClick({ event, code });\n    },\n    [onClick],\n  );\n\n  const handlePreventDefault = React.useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  React.useLayoutEffect(() => {\n    let image = new Image();\n    image.src = DEFAULT_SRC;\n    const handleImageLoad = () => setNetError(false);\n    const handleImageError = () => setNetError(true);\n    image.addEventListener('load', handleImageLoad);\n    image.addEventListener('error', handleImageError);\n    return () => {\n      image.removeEventListener('load', handleImageLoad);\n      image.removeEventListener('error', handleImageError);\n      // @ts-ignore\n      image = null;\n    };\n  }, []);\n\n  return isNetError ? (\n    <SpinErrorCard\n      style={errorCardStyle}\n      transparent={false}\n      tip={locale?.networkError}\n    />\n  ) : (\n    <StickerPannelWrapper\n      className=\"sticker-panel\"\n      data-testid=\"sticker-panel\"\n      onMouseDown={handlePreventDefault}\n      style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` }}\n    >\n      {stickerList.map(({ code, stickerId }) => {\n        const key = `${code}_${stickerId}`;\n        return stickerId.indexOf('sticker_split_line') >= 0 ? (\n          <StickerSplitLine\n            key={key}\n            columns={columns}\n          />\n        ) : (\n          <StickerPanelItem key={key}>\n            <Tooltip\n              key={key}\n              placement=\"bottom\"\n              title={sticker.getStickerLocale(code)}\n            >\n              <div>\n                <StickerItem\n                  key={key}\n                  code={code}\n                  sz={STICKER_SZ_IN_PANEL}\n                  sticker={sticker}\n                  onClick={handleClick}\n                  // 这里已检测过网络状态，不需要再次检测\n                  doNotNeedCheckNet\n                />\n              </div>\n            </Tooltip>\n          </StickerPanelItem>\n        );\n      })}\n    </StickerPannelWrapper>\n  );\n};\n\nexport default React.memo(StickerPannel);\n"],"file":"stickerPanel.js"}