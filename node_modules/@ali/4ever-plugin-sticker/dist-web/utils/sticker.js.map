{"version":3,"sources":["../../../src/utils/sticker.ts"],"names":["flatten","DEFAULT_LANG","SINGLE","SPRITE","Sticker","customSticker","lang","stickerMap","stickerLang","stickerList","getStickerList","Map","map","s","code","cusStk","parseStickers","type","stickers","stk","src","spriteWidth","width","spriteHeight","height","x","y","getInfoByCode","get","getStickerSource","stickerInfo","getStickerLocale","locale"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AAEA,SAASC,YAAT,EAAuBC,MAAvB,EAA+BC,MAA/B;;IAeMC,O;AACJ;AAGA;AAGA;AAGA,yBAAmE;AAAA,QAArDC,aAAqD,QAArDA,aAAqD;AAAA,yBAAtCC,IAAsC;AAAA,QAAtCA,IAAsC,0BAA/BL,YAA+B;AAAA,SAR3DM,UAQ2D;AAAA,SAL3DC,WAK2D;AAAA,SAFnEC,WAEmE;AACjE,SAAKD,WAAL,GAAmBF,IAAnB;AACA,SAAKG,WAAL,GAAmB,KAAKC,cAAL,CAAoBL,aAApB,CAAnB;AACA,SAAKE,UAAL,GAAkB,IAAII,GAAJ,CAAQ,KAAKF,WAAL,CAAiBG,GAAjB,CAAqB,UAACC,CAAD;AAAA,aAAO,CAACA,CAAC,CAACC,IAAH,EAASD,CAAT,CAAP;AAAA,KAArB,CAAR,CAAlB;AACD;;;;SAEOH,c,GAAR,wBAAuBL,aAAvB,EAAuD;AAAA;;AACrD,WAAOL,OAAO,CAACK,aAAa,CAACO,GAAd,CAAkB,UAACG,MAAD;AAAA,aAAY,KAAI,CAACC,aAAL,CAAmBD,MAAnB,CAAZ;AAAA,KAAlB,CAAD,CAAd;AACD,G;;SAEOC,a,GAAR,uBAAsBX,aAAtB,EAAsD;AACpD,QAAI,CAAAA,aAAa,QAAb,YAAAA,aAAa,CAAEY,IAAf,MAAwBd,MAA5B,EAAoC;AAClC,aAAOE,aAAa,CAACa,QAAd,CAAuBN,GAAvB,CAA2B,UAACO,GAAD,EAAS;AACzCA,QAAAA,GAAG,CAACC,GAAJ,GAAUf,aAAa,CAACe,GAAxB;AACAD,QAAAA,GAAG,CAACE,WAAJ,GAAkBhB,aAAa,CAACiB,KAAhC;AACAH,QAAAA,GAAG,CAACI,YAAJ,GAAmBlB,aAAa,CAACmB,MAAjC;AACA,eAAOL,GAAP;AACD,OALM,CAAP;AAMD,KARmD,CAUpD;;;AACA,QAAI,CAAAd,aAAa,QAAb,YAAAA,aAAa,CAAEY,IAAf,MAAwBf,MAA5B,EAAoC;AAClC,aAAOG,aAAa,CAACa,QAAd,CAAuBN,GAAvB,CAA2B,UAACO,GAAD,EAAS;AACzCA,QAAAA,GAAG,CAACM,CAAJ,GAAQ,CAAR;AACAN,QAAAA,GAAG,CAACO,CAAJ,GAAQ,CAAR;AACAP,QAAAA,GAAG,CAACE,WAAJ,GAAkBF,GAAG,CAACG,KAAtB;AACAH,QAAAA,GAAG,CAACI,YAAJ,GAAmBJ,GAAG,CAACK,MAAvB;AACA,eAAOL,GAAP;AACD,OANM,CAAP;AAOD;;AAED,WAAO,EAAP;AACD,G;;SAEDQ,a,GAAA,uBAAcb,IAAd,EAAoB;AAClB,WAAO,KAAKP,UAAL,CAAgBqB,GAAhB,CAAoBd,IAApB,CAAP;AACD,G;;SAEDe,gB,GAAA,0BAAiBf,IAAjB,EAAuB;AACrB,QAAMgB,WAAW,GAAG,KAAKH,aAAL,CAAmBb,IAAnB,CAApB;AACA,WAAOgB,WAAP,oBAAOA,WAAW,CAAEV,GAApB;AACD,G;;SAEDW,gB,GAAA,0BAAiBjB,IAAjB,EAAuBR,IAAvB,EAA8B;AAC5B,QAAMwB,WAAW,GAAG,KAAKH,aAAL,CAAmBb,IAAnB,CAApB;AACA,WAAO,CAAAgB,WAAW,QAAX,YAAAA,WAAW,CAAEE,MAAb,CAAoB1B,IAAI,IAAI,KAAKE,WAAjC,MAAiD,EAAxD;AACD,G;;;;;AAGH,eAAeJ,OAAf","sourcesContent":["import { flatten } from 'lodash-es';\nimport { ICustomSticker, SingleSticker } from './types';\nimport { DEFAULT_LANG, SINGLE, SPRITE } from './constants';\n\nexport interface IStickerProps {\n  lang?: string;\n  customSticker: ICustomSticker;\n}\n\n/**\n * @description 对 SingleSticker、SpriteSticker 加工后的通用类型\n */\ninterface CommonSticker extends SingleSticker {\n  spriteWidth: number;\n  spriteHeight: number;\n}\n\nclass Sticker {\n  // 表情映射表\n  private stickerMap: Map<string, CommonSticker>;\n\n  // 表情语言\n  private stickerLang: string;\n\n  // 表情列表\n  stickerList: CommonSticker[];\n\n  constructor({ customSticker, lang = DEFAULT_LANG }: IStickerProps) {\n    this.stickerLang = lang;\n    this.stickerList = this.getStickerList(customSticker);\n    this.stickerMap = new Map(this.stickerList.map((s) => [s.code, s]));\n  }\n\n  private getStickerList(customSticker): CommonSticker[] {\n    return flatten(customSticker.map((cusStk) => this.parseStickers(cusStk)));\n  }\n\n  private parseStickers(customSticker): CommonSticker[] {\n    if (customSticker?.type === SPRITE) {\n      return customSticker.stickers.map((stk) => {\n        stk.src = customSticker.src;\n        stk.spriteWidth = customSticker.width;\n        stk.spriteHeight = customSticker.height;\n        return stk;\n      });\n    }\n\n    // TODO 目前仅支持雪碧图，单个表情或动图待支持 @灯少\n    if (customSticker?.type === SINGLE) {\n      return customSticker.stickers.map((stk) => {\n        stk.x = 0;\n        stk.y = 0;\n        stk.spriteWidth = stk.width;\n        stk.spriteHeight = stk.height;\n        return stk;\n      });\n    }\n\n    return [];\n  }\n\n  getInfoByCode(code) {\n    return this.stickerMap.get(code);\n  }\n\n  getStickerSource(code) {\n    const stickerInfo = this.getInfoByCode(code);\n    return stickerInfo?.src;\n  }\n\n  getStickerLocale(code, lang?) {\n    const stickerInfo = this.getInfoByCode(code);\n    return stickerInfo?.locale[lang || this.stickerLang] || '';\n  }\n}\n\nexport default Sticker;\n"],"file":"sticker.js"}