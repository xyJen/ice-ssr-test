import React, { useCallback, useMemo, useEffect, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ToolbarEmojiNormal } from '@ali/we-design';
import { StickerWrapper } from "./styled";

function StickerItem(props) {
  var sz = props.sz,
      backgroundColor = props.backgroundColor,
      _props$code = props.code,
      code = _props$code === void 0 ? '' : _props$code,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? null : _props$placeholder,
      sticker = props.sticker,
      type = props.type,
      doNotNeedCheckNet = props.doNotNeedCheckNet,
      onClick = props.onClick;

  var _useState = useState(false),
      isNetError = _useState[0],
      setNetError = _useState[1];

  var stickerInfo = useMemo(function () {
    return sticker.getInfoByCode(code);
  }, [code]);

  var _ref = stickerInfo || {},
      _ref$x = _ref.x,
      x = _ref$x === void 0 ? 0 : _ref$x,
      _ref$y = _ref.y,
      y = _ref$y === void 0 ? 0 : _ref$y,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 0 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 0 : _ref$height,
      _ref$spriteWidth = _ref.spriteWidth,
      spriteWidth = _ref$spriteWidth === void 0 ? 0 : _ref$spriteWidth,
      _ref$spriteHeight = _ref.spriteHeight,
      spriteHeight = _ref$spriteHeight === void 0 ? 0 : _ref$spriteHeight,
      source = _ref.src,
      locale = _ref.locale;

  var style = useMemo(function () {
    return {
      width: sz + "px",
      height: sz + "px",
      backgroundImage: "url(" + source + ")",
      backgroundSize: sz / width * spriteWidth + "px " + sz / height * spriteHeight + "px",
      backgroundPosition: sz / width * x + "px " + sz / height * y + "px",
      backgroundColor: backgroundColor
    };
  }, [width, height, source, backgroundColor, sz, code]);
  var handleClick = useCallback(function (e) {
    return onClick && onClick(e);
  }, [onClick]);

  var _ref2 = /*#__PURE__*/_createElement("div", {
    onClick: handleClick,
    style: style
  });

  var renderItem = useMemo(function () {
    if (code && source) {
      // 网络中断时显示表情占位
      return isNetError ? /*#__PURE__*/_createElement(ToolbarEmojiNormal, {
        onClick: handleClick,
        style: {
          width: sz,
          height: sz,
          background: '#f5f6f7'
        }
      }) : _ref2;
    } else {
      // 不支持的表情，显示 placeholder
      return placeholder;
    }
  }, [width, height, source, backgroundColor, sz, code, handleClick, isNetError]);
  useEffect(function () {
    if (!source || doNotNeedCheckNet) return undefined;
    var image = new Image();
    image.src = source;

    var handleImageLoad = function handleImageLoad() {
      return setNetError(false);
    };

    var handleImageError = function handleImageError() {
      return setNetError(true);
    };

    image.addEventListener('load', handleImageLoad);
    image.addEventListener('error', handleImageError);
    return function () {
      image.removeEventListener('load', handleImageLoad);
      image.removeEventListener('error', handleImageError); // @ts-ignore

      image = null;
    };
  }, [source]);
  return /*#__PURE__*/_createElement(StickerWrapper, {
    "data-type": "sticker",
    "data-sticker": code,
    contentEditable: false,
    sz: sz
  }, type ? /*#__PURE__*/_createElement("span", null, "[" + locale + "]") : renderItem);
}

export default /*#__PURE__*/React.memo(StickerItem);
//# sourceMappingURL=stickerItem.js.map