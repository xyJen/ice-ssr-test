{"version":3,"sources":["../../../src/utils/stickerItem.tsx"],"names":["React","useCallback","useMemo","useEffect","useState","ToolbarEmojiNormal","StickerWrapper","StickerItem","props","sz","backgroundColor","code","placeholder","sticker","type","doNotNeedCheckNet","onClick","isNetError","setNetError","stickerInfo","getInfoByCode","x","y","width","height","spriteWidth","spriteHeight","source","src","locale","style","backgroundImage","backgroundSize","backgroundPosition","handleClick","e","renderItem","background","undefined","image","Image","handleImageLoad","handleImageError","addEventListener","removeEventListener","memo"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiDC,QAAjD,QAAiE,OAAjE;qBAC4B,a;AAA5B,SAASC,kBAAT,QAAmC,gBAAnC;AAGA,SAASC,cAAT;;AASA,SAASC,WAAT,CAAqBC,KAArB,EAA2C;AAAA,MAEvCC,EAFuC,GAUrCD,KAVqC,CAEvCC,EAFuC;AAAA,MAGvCC,eAHuC,GAUrCF,KAVqC,CAGvCE,eAHuC;AAAA,oBAUrCF,KAVqC,CAIvCG,IAJuC;AAAA,MAIvCA,IAJuC,4BAIhC,EAJgC;AAAA,2BAUrCH,KAVqC,CAKvCI,WALuC;AAAA,MAKvCA,WALuC,mCAKzB,IALyB;AAAA,MAMvCC,OANuC,GAUrCL,KAVqC,CAMvCK,OANuC;AAAA,MAOvCC,IAPuC,GAUrCN,KAVqC,CAOvCM,IAPuC;AAAA,MAQvCC,iBARuC,GAUrCP,KAVqC,CAQvCO,iBARuC;AAAA,MASvCC,OATuC,GAUrCR,KAVqC,CASvCQ,OATuC;;AAAA,kBAWPZ,QAAQ,CAAC,KAAD,CAXD;AAAA,MAWlCa,UAXkC;AAAA,MAWtBC,WAXsB;;AAYzC,MAAMC,WAAW,GAAGjB,OAAO,CAAC;AAAA,WAAMW,OAAO,CAACO,aAAR,CAAsBT,IAAtB,CAAN;AAAA,GAAD,EAAoC,CAACA,IAAD,CAApC,CAA3B;;AAZyC,aAsBrCQ,WAAW,IAAI,EAtBsB;AAAA,oBAcvCE,CAduC;AAAA,MAcvCA,CAduC,uBAcnC,CAdmC;AAAA,oBAevCC,CAfuC;AAAA,MAevCA,CAfuC,uBAenC,CAfmC;AAAA,wBAgBvCC,KAhBuC;AAAA,MAgBvCA,KAhBuC,2BAgB/B,CAhB+B;AAAA,yBAiBvCC,MAjBuC;AAAA,MAiBvCA,MAjBuC,4BAiB9B,CAjB8B;AAAA,8BAkBvCC,WAlBuC;AAAA,MAkBvCA,WAlBuC,iCAkBzB,CAlByB;AAAA,+BAmBvCC,YAnBuC;AAAA,MAmBvCA,YAnBuC,kCAmBxB,CAnBwB;AAAA,MAoBlCC,MApBkC,QAoBvCC,GApBuC;AAAA,MAqBvCC,MArBuC,QAqBvCA,MArBuC;;AAuBzC,MAAMC,KAAK,GAAG5B,OAAO,CAAC,YAAM;AAC1B,WAAO;AACLqB,MAAAA,KAAK,EAAKd,EAAL,OADA;AAELe,MAAAA,MAAM,EAAKf,EAAL,OAFD;AAGLsB,MAAAA,eAAe,WAASJ,MAAT,MAHV;AAILK,MAAAA,cAAc,EAAMvB,EAAE,GAAGc,KAAN,GAAeE,WAApB,WACXhB,EAAE,GAAGe,MAAN,GAAgBE,YADJ,OAJT;AAOLO,MAAAA,kBAAkB,EAAMxB,EAAE,GAAGc,KAAN,GAAeF,CAApB,WAA4BZ,EAAE,GAAGe,MAAN,GAAgBF,CAA3C,OAPb;AAQLZ,MAAAA,eAAe,EAAfA;AARK,KAAP;AAUD,GAXoB,EAWlB,CAACa,KAAD,EAAQC,MAAR,EAAgBG,MAAhB,EAAwBjB,eAAxB,EAAyCD,EAAzC,EAA6CE,IAA7C,CAXkB,CAArB;AAYA,MAAMuB,WAAW,GAAGjC,WAAW,CAC7B,UAACkC,CAAD,EAAO;AACL,WAAOnB,OAAO,IAAIA,OAAO,CAACmB,CAAD,CAAzB;AACD,GAH4B,EAI7B,CAACnB,OAAD,CAJ6B,CAA/B;;AAnCyC,2BAmDnC;AAAK,IAAA,OAAO,EAAEkB,WAAd;AAA2B,IAAA,KAAK,EAAEJ;AAAlC,IAnDmC;;AA0CzC,MAAMM,UAAU,GAAGlC,OAAO,CAAC,YAAM;AAC/B,QAAIS,IAAI,IAAIgB,MAAZ,EAAoB;AAClB;AACA,aAAOV,UAAU,gBACf,eAAC,kBAAD;AACE,QAAA,OAAO,EAAEiB,WADX;AAEE,QAAA,KAAK,EAAE;AAAEX,UAAAA,KAAK,EAAEd,EAAT;AAAae,UAAAA,MAAM,EAAEf,EAArB;AAAyB4B,UAAAA,UAAU,EAAE;AAArC;AAFT,QADe,QAAjB;AAQD,KAVD,MAUO;AACL;AACA,aAAOzB,WAAP;AACD;AACF,GAfyB,EAevB,CACDW,KADC,EAEDC,MAFC,EAGDG,MAHC,EAIDjB,eAJC,EAKDD,EALC,EAMDE,IANC,EAODuB,WAPC,EAQDjB,UARC,CAfuB,CAA1B;AA0BAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACwB,MAAD,IAAWZ,iBAAf,EAAkC,OAAOuB,SAAP;AAClC,QAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,IAAAA,KAAK,CAACX,GAAN,GAAYD,MAAZ;;AACA,QAAMc,eAAe,GAAG,SAAlBA,eAAkB;AAAA,aAAMvB,WAAW,CAAC,KAAD,CAAjB;AAAA,KAAxB;;AACA,QAAMwB,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,aAAMxB,WAAW,CAAC,IAAD,CAAjB;AAAA,KAAzB;;AACAqB,IAAAA,KAAK,CAACI,gBAAN,CAAuB,MAAvB,EAA+BF,eAA/B;AACAF,IAAAA,KAAK,CAACI,gBAAN,CAAuB,OAAvB,EAAgCD,gBAAhC;AACA,WAAO,YAAM;AACXH,MAAAA,KAAK,CAACK,mBAAN,CAA0B,MAA1B,EAAkCH,eAAlC;AACAF,MAAAA,KAAK,CAACK,mBAAN,CAA0B,OAA1B,EAAmCF,gBAAnC,EAFW,CAGX;;AACAH,MAAAA,KAAK,GAAG,IAAR;AACD,KALD;AAMD,GAdQ,EAcN,CAACZ,MAAD,CAdM,CAAT;AAgBA,sBACE,eAAC,cAAD;AACE,iBAAU,SADZ;AAEE,oBAAchB,IAFhB;AAGE,IAAA,eAAe,EAAE,KAHnB;AAIE,IAAA,EAAE,EAAEF;AAJN,KAMGK,IAAI,gBAAG,mCAAWe,MAAX,OAAH,GAAkCO,UANzC,CADF;AAUD;;AAED,4BAAepC,KAAK,CAAC6C,IAAN,CAAWtC,WAAX,CAAf","sourcesContent":["import React, { useCallback, useMemo, useEffect, useState } from 'react';\nimport { ToolbarEmojiNormal } from '@ali/we-design';\nimport Sticker from './sticker';\nimport { StickerProps } from './types';\nimport { StickerWrapper } from './styled';\n\ninterface IStickerProps extends StickerProps {\n  sticker: Sticker;\n  placeholder?: React.ReactElement;\n  // 是否需要检测网络状态\n  doNotNeedCheckNet?: boolean;\n}\n\nfunction StickerItem(props: IStickerProps) {\n  const {\n    sz,\n    backgroundColor,\n    code = '',\n    placeholder = null,\n    sticker,\n    type,\n    doNotNeedCheckNet,\n    onClick,\n  } = props;\n  const [isNetError, setNetError] = useState(false);\n  const stickerInfo = useMemo(() => sticker.getInfoByCode(code), [code]);\n  const {\n    x = 0,\n    y = 0,\n    width = 0,\n    height = 0,\n    spriteWidth = 0,\n    spriteHeight = 0,\n    src: source,\n    locale,\n  } = stickerInfo || {};\n  const style = useMemo(() => {\n    return {\n      width: `${sz }px`,\n      height: `${sz }px`,\n      backgroundImage: `url(${source})`,\n      backgroundSize: `${(sz / width) * spriteWidth}px ${\n        (sz / height) * spriteHeight\n      }px`,\n      backgroundPosition: `${(sz / width) * x}px ${(sz / height) * y}px`,\n      backgroundColor,\n    };\n  }, [width, height, source, backgroundColor, sz, code]);\n  const handleClick = useCallback(\n    (e) => {\n      return onClick && onClick(e);\n    },\n    [onClick],\n  );\n\n  const renderItem = useMemo(() => {\n    if (code && source) {\n      // 网络中断时显示表情占位\n      return isNetError ? (\n        <ToolbarEmojiNormal\n          onClick={handleClick}\n          style={{ width: sz, height: sz, background: '#f5f6f7' }}\n        />\n      ) : (\n        <div onClick={handleClick} style={style} />\n      );\n    } else {\n      // 不支持的表情，显示 placeholder\n      return placeholder;\n    }\n  }, [\n    width,\n    height,\n    source,\n    backgroundColor,\n    sz,\n    code,\n    handleClick,\n    isNetError,\n  ]);\n\n  useEffect(() => {\n    if (!source || doNotNeedCheckNet) return undefined;\n    let image = new Image();\n    image.src = source;\n    const handleImageLoad = () => setNetError(false);\n    const handleImageError = () => setNetError(true);\n    image.addEventListener('load', handleImageLoad);\n    image.addEventListener('error', handleImageError);\n    return () => {\n      image.removeEventListener('load', handleImageLoad);\n      image.removeEventListener('error', handleImageError);\n      // @ts-ignore\n      image = null;\n    };\n  }, [source]);\n\n  return (\n    <StickerWrapper\n      data-type=\"sticker\"\n      data-sticker={code}\n      contentEditable={false}\n      sz={sz}\n    >\n      {type ? <span>{`[${locale}]`}</span> : renderItem}\n    </StickerWrapper>\n  );\n}\n\nexport default React.memo(StickerItem);\n"],"file":"stickerItem.js"}