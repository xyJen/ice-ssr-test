{"version":3,"sources":["../../../../src/bi/components/stickerPanel.tsx"],"names":["src","DEFAULT_SRC","DEFAULT_STICKERS","errorCardStyle","width","height","border","StickerPannel","props","onClick","sticker","columns","locale","isNetError","setNetError","React","useState","stickerList","handleClick","useCallback","event","ancestor","currentTarget","closest","DATA_STICKER","code","getAttribute","handlePreventDefault","e","preventDefault","stopPropagation","useLayoutEffect","image","Image","handleImageLoad","handleImageError","addEventListener","removeEventListener","networkError","gridTemplateColumns","map","stickerId","key","indexOf","getStickerLocale","STICKER_SZ_IN_PANEL","memo"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAMA;;uBAR4B,a;AAU5B,MAAM;AAAEA,EAAAA,GAAG,EAAEC;AAAP,IAAuBC,2BAA7B;AACA,MAAMC,cAAmC,GAAG;AAC1CC,EAAAA,KAAK,EAAE,GADmC;AAE1CC,EAAAA,MAAM,EAAE,GAFkC;AAG1CC,EAAAA,MAAM,EAAE;AAHkC,CAA5C;;AAmBA,MAAMC,aAA2C,GAAIC,KAAD,IAAW;AAC7D,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,MAAwCJ,KAA9C;AACA,QAAM,CAACK,UAAD,EAAaC,WAAb,IAA4BC,KAAK,CAACC,QAAN,CAAe,KAAf,CAAlC;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAkBP,OAAxB;AACA,QAAMQ,WAAW,GAAGH,KAAK,CAACI,WAAN,CACjBC,KAAD,IAAW;AACT,UAAMC,QAAQ,GAAGD,KAAK,CAACE,aAAN,CAAoBC,OAApB,CAA6B,IAAGC,uBAAa,GAA7C,CAAjB;AACA,UAAMC,IAAI,GAAGJ,QAAQ,EAAEK,YAAV,CAAuBF,uBAAvB,KAAwC,EAArD;AACAf,IAAAA,OAAO,CAAC;AAAEW,MAAAA,KAAF;AAASK,MAAAA;AAAT,KAAD,CAAP;AACD,GALiB,EAMlB,CAAChB,OAAD,CANkB,CAApB;AASA,QAAMkB,oBAAoB,GAAGZ,KAAK,CAACI,WAAN,CAAmBS,CAAD,IAAyB;AACtEA,IAAAA,CAAC,CAACC,cAAF;AACAD,IAAAA,CAAC,CAACE,eAAF;AACD,GAH4B,EAG1B,EAH0B,CAA7B;AAKAf,EAAAA,KAAK,CAACgB,eAAN,CAAsB,MAAM;AAC1B,QAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,IAAAA,KAAK,CAAChC,GAAN,GAAYC,WAAZ;;AACA,UAAMiC,eAAe,GAAG,MAAMpB,WAAW,CAAC,KAAD,CAAzC;;AACA,UAAMqB,gBAAgB,GAAG,MAAMrB,WAAW,CAAC,IAAD,CAA1C;;AACAkB,IAAAA,KAAK,CAACI,gBAAN,CAAuB,MAAvB,EAA+BF,eAA/B;AACAF,IAAAA,KAAK,CAACI,gBAAN,CAAuB,OAAvB,EAAgCD,gBAAhC;AACA,WAAO,MAAM;AACXH,MAAAA,KAAK,CAACK,mBAAN,CAA0B,MAA1B,EAAkCH,eAAlC;AACAF,MAAAA,KAAK,CAACK,mBAAN,CAA0B,OAA1B,EAAmCF,gBAAnC,EAFW,CAGX;;AACAH,MAAAA,KAAK,GAAG,IAAR;AACD,KALD;AAMD,GAbD,EAaG,EAbH;AAeA,SAAOnB,UAAU,gBACf,eAAC,uBAAD;AACE,IAAA,KAAK,EAAEV,cADT;AAEE,IAAA,WAAW,EAAE,KAFf;AAGE,IAAA,GAAG,EAAES,MAAM,EAAE0B;AAHf,IADe,gBAOf,eAAC,4BAAD;AACE,IAAA,SAAS,EAAC,eADZ;AAEE,mBAAY,eAFd;AAGE,IAAA,WAAW,EAAEX,oBAHf;AAIE,IAAA,KAAK,EAAE;AAAEY,MAAAA,mBAAmB,EAAG,UAAS5B,OAAQ;AAAzC;AAJT,KAMGM,WAAW,CAACuB,GAAZ,CAAgB,CAAC;AAAEf,IAAAA,IAAF;AAAQgB,IAAAA;AAAR,GAAD,KAAyB;AACxC,UAAMC,GAAG,GAAI,GAAEjB,IAAK,IAAGgB,SAAU,EAAjC;AACA,WAAOA,SAAS,CAACE,OAAV,CAAkB,oBAAlB,KAA2C,CAA3C,gBACL,eAAC,wBAAD;AACE,MAAA,GAAG,EAAED,GADP;AAEE,MAAA,OAAO,EAAE/B;AAFX,MADK,gBAML,eAAC,wBAAD;AAAkB,MAAA,GAAG,EAAE+B;AAAvB,oBACE,eAAC,iBAAD;AACE,MAAA,GAAG,EAAEA,GADP;AAEE,MAAA,SAAS,EAAC,QAFZ;AAGE,MAAA,KAAK,EAAEhC,OAAO,CAACkC,gBAAR,CAAyBnB,IAAzB;AAHT,oBAKE,yCACE,eAAC,oBAAD;AACE,MAAA,GAAG,EAAEiB,GADP;AAEE,MAAA,IAAI,EAAEjB,IAFR;AAGE,MAAA,EAAE,EAAEoB,8BAHN;AAIE,MAAA,OAAO,EAAEnC,OAJX;AAKE,MAAA,OAAO,EAAEQ,WALX,CAME;AANF;AAOE,MAAA,iBAAiB;AAPnB,MADF,CALF,CADF,CANF;AA0BD,GA5BA,CANH,CAPF;AA4CD,CA9ED;;4BAgFeH,KAAK,CAAC+B,IAAN,CAAWvC,aAAX,C","sourcesContent":["import * as React from 'react';\nimport { Tooltip, SpinErrorCard } from '@ali/we-design';\nimport { DATA_STICKER, DEFAULT_STICKERS, STICKER_SZ_IN_PANEL } from '../../utils/constants';\nimport {\n  StickerPannelWrapper,\n  StickerPanelItem,\n  StickerSplitLine,\n} from './styled';\nimport Sticker from '../../utils/sticker';\nimport StickerItem from '../../utils/stickerItem';\n\nconst { src: DEFAULT_SRC } = DEFAULT_STICKERS;\nconst errorCardStyle: React.CSSProperties = {\n  width: 296,\n  height: 400,\n  border: 'none',\n};\n\ninterface StickerPannelProps {\n  sticker: Sticker;\n  columns: number;\n  locale?: Record<string, any>;\n  onClick: ({\n    event,\n    code,\n  }: {\n    event: React.MouseEvent<HTMLSpanElement>;\n    code: string;\n  }) => void;\n}\n\nconst StickerPannel: React.FC<StickerPannelProps> = (props) => {\n  const { onClick, sticker, columns, locale } = props;\n  const [isNetError, setNetError] = React.useState(false);\n\n  const { stickerList } = sticker;\n  const handleClick = React.useCallback(\n    (event) => {\n      const ancestor = event.currentTarget.closest(`[${DATA_STICKER}]`);\n      const code = ancestor?.getAttribute(DATA_STICKER) || '';\n      onClick({ event, code });\n    },\n    [onClick],\n  );\n\n  const handlePreventDefault = React.useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  React.useLayoutEffect(() => {\n    let image = new Image();\n    image.src = DEFAULT_SRC;\n    const handleImageLoad = () => setNetError(false);\n    const handleImageError = () => setNetError(true);\n    image.addEventListener('load', handleImageLoad);\n    image.addEventListener('error', handleImageError);\n    return () => {\n      image.removeEventListener('load', handleImageLoad);\n      image.removeEventListener('error', handleImageError);\n      // @ts-ignore\n      image = null;\n    };\n  }, []);\n\n  return isNetError ? (\n    <SpinErrorCard\n      style={errorCardStyle}\n      transparent={false}\n      tip={locale?.networkError}\n    />\n  ) : (\n    <StickerPannelWrapper\n      className=\"sticker-panel\"\n      data-testid=\"sticker-panel\"\n      onMouseDown={handlePreventDefault}\n      style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` }}\n    >\n      {stickerList.map(({ code, stickerId }) => {\n        const key = `${code}_${stickerId}`;\n        return stickerId.indexOf('sticker_split_line') >= 0 ? (\n          <StickerSplitLine\n            key={key}\n            columns={columns}\n          />\n        ) : (\n          <StickerPanelItem key={key}>\n            <Tooltip\n              key={key}\n              placement=\"bottom\"\n              title={sticker.getStickerLocale(code)}\n            >\n              <div>\n                <StickerItem\n                  key={key}\n                  code={code}\n                  sz={STICKER_SZ_IN_PANEL}\n                  sticker={sticker}\n                  onClick={handleClick}\n                  // 这里已检测过网络状态，不需要再次检测\n                  doNotNeedCheckNet\n                />\n              </div>\n            </Tooltip>\n          </StickerPanelItem>\n        );\n      })}\n    </StickerPannelWrapper>\n  );\n};\n\nexport default React.memo(StickerPannel);\n"],"file":"stickerPanel.js"}