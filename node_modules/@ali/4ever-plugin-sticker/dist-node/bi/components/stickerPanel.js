"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _constants = require("../../utils/constants");

var _styled = require("./styled");

var _stickerItem = _interopRequireDefault(require("../../utils/stickerItem"));

const _createElement = /*#__PURE__*/React.createElement;
const {
  src: DEFAULT_SRC
} = _constants.DEFAULT_STICKERS;
const errorCardStyle = {
  width: 296,
  height: 400,
  border: 'none'
};

const StickerPannel = props => {
  const {
    onClick,
    sticker,
    columns,
    locale
  } = props;
  const [isNetError, setNetError] = React.useState(false);
  const {
    stickerList
  } = sticker;
  const handleClick = React.useCallback(event => {
    const ancestor = event.currentTarget.closest(`[${_constants.DATA_STICKER}]`);
    const code = ancestor?.getAttribute(_constants.DATA_STICKER) || '';
    onClick({
      event,
      code
    });
  }, [onClick]);
  const handlePreventDefault = React.useCallback(e => {
    e.preventDefault();
    e.stopPropagation();
  }, []);
  React.useLayoutEffect(() => {
    let image = new Image();
    image.src = DEFAULT_SRC;

    const handleImageLoad = () => setNetError(false);

    const handleImageError = () => setNetError(true);

    image.addEventListener('load', handleImageLoad);
    image.addEventListener('error', handleImageError);
    return () => {
      image.removeEventListener('load', handleImageLoad);
      image.removeEventListener('error', handleImageError); // @ts-ignore

      image = null;
    };
  }, []);
  return isNetError ? /*#__PURE__*/_createElement(_weDesign.SpinErrorCard, {
    style: errorCardStyle,
    transparent: false,
    tip: locale?.networkError
  }) : /*#__PURE__*/_createElement(_styled.StickerPannelWrapper, {
    className: "sticker-panel",
    "data-testid": "sticker-panel",
    onMouseDown: handlePreventDefault,
    style: {
      gridTemplateColumns: `repeat(${columns}, 1fr)`
    }
  }, stickerList.map(({
    code,
    stickerId
  }) => {
    const key = `${code}_${stickerId}`;
    return stickerId.indexOf('sticker_split_line') >= 0 ? /*#__PURE__*/_createElement(_styled.StickerSplitLine, {
      key: key,
      columns: columns
    }) : /*#__PURE__*/_createElement(_styled.StickerPanelItem, {
      key: key
    }, /*#__PURE__*/_createElement(_weDesign.Tooltip, {
      key: key,
      placement: "bottom",
      title: sticker.getStickerLocale(code)
    }, /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(_stickerItem.default, {
      key: key,
      code: code,
      sz: _constants.STICKER_SZ_IN_PANEL,
      sticker: sticker,
      onClick: handleClick // 这里已检测过网络状态，不需要再次检测
      ,
      doNotNeedCheckNet: true
    }))));
  }));
};

var _default = /*#__PURE__*/React.memo(StickerPannel);

exports.default = _default;
//# sourceMappingURL=stickerPanel.js.map