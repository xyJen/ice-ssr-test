"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _styled = require("./styled");

const _createElement = /*#__PURE__*/_react.default.createElement;

function StickerItem(props) {
  const {
    sz,
    backgroundColor,
    code = '',
    placeholder = null,
    sticker,
    type,
    doNotNeedCheckNet,
    onClick
  } = props;
  const [isNetError, setNetError] = (0, _react.useState)(false);
  const stickerInfo = (0, _react.useMemo)(() => sticker.getInfoByCode(code), [code]);
  const {
    x = 0,
    y = 0,
    width = 0,
    height = 0,
    spriteWidth = 0,
    spriteHeight = 0,
    src: source,
    locale
  } = stickerInfo || {};
  const style = (0, _react.useMemo)(() => {
    return {
      width: `${sz}px`,
      height: `${sz}px`,
      backgroundImage: `url(${source})`,
      backgroundSize: `${sz / width * spriteWidth}px ${sz / height * spriteHeight}px`,
      backgroundPosition: `${sz / width * x}px ${sz / height * y}px`,
      backgroundColor
    };
  }, [width, height, source, backgroundColor, sz, code]);
  const handleClick = (0, _react.useCallback)(e => {
    return onClick && onClick(e);
  }, [onClick]);

  var _ref = /*#__PURE__*/_createElement("div", {
    onClick: handleClick,
    style: style
  });

  const renderItem = (0, _react.useMemo)(() => {
    if (code && source) {
      // 网络中断时显示表情占位
      return isNetError ? /*#__PURE__*/_createElement(_weDesign.ToolbarEmojiNormal, {
        onClick: handleClick,
        style: {
          width: sz,
          height: sz,
          background: '#f5f6f7'
        }
      }) : _ref;
    } else {
      // 不支持的表情，显示 placeholder
      return placeholder;
    }
  }, [width, height, source, backgroundColor, sz, code, handleClick, isNetError]);
  (0, _react.useEffect)(() => {
    if (!source || doNotNeedCheckNet) return undefined;
    let image = new Image();
    image.src = source;

    const handleImageLoad = () => setNetError(false);

    const handleImageError = () => setNetError(true);

    image.addEventListener('load', handleImageLoad);
    image.addEventListener('error', handleImageError);
    return () => {
      image.removeEventListener('load', handleImageLoad);
      image.removeEventListener('error', handleImageError); // @ts-ignore

      image = null;
    };
  }, [source]);
  return /*#__PURE__*/_createElement(_styled.StickerWrapper, {
    "data-type": "sticker",
    "data-sticker": code,
    contentEditable: false,
    sz: sz
  }, type ? /*#__PURE__*/_createElement("span", null, `[${locale}]`) : renderItem);
}

var _default = /*#__PURE__*/_react.default.memo(StickerItem);

exports.default = _default;
//# sourceMappingURL=stickerItem.js.map