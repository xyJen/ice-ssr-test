{"version":3,"sources":["../../../src/utils/stickerItem.tsx"],"names":["StickerItem","props","sz","backgroundColor","code","placeholder","sticker","type","doNotNeedCheckNet","onClick","isNetError","setNetError","stickerInfo","getInfoByCode","x","y","width","height","spriteWidth","spriteHeight","src","source","locale","style","backgroundImage","backgroundSize","backgroundPosition","handleClick","e","renderItem","background","undefined","image","Image","handleImageLoad","handleImageError","addEventListener","removeEventListener","React","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useEffect, useState } from 'react';\nimport { ToolbarEmojiNormal } from '@ali/we-design';\nimport Sticker from './sticker';\nimport { StickerProps } from './types';\nimport { StickerWrapper } from './styled';\n\ninterface IStickerProps extends StickerProps {\n  sticker: Sticker;\n  placeholder?: React.ReactElement;\n  // 是否需要检测网络状态\n  doNotNeedCheckNet?: boolean;\n}\n\nfunction StickerItem(props: IStickerProps) {\n  const {\n    sz,\n    backgroundColor,\n    code = '',\n    placeholder = null,\n    sticker,\n    type,\n    doNotNeedCheckNet,\n    onClick,\n  } = props;\n  const [isNetError, setNetError] = useState(false);\n  const stickerInfo = useMemo(() => sticker.getInfoByCode(code), [code]);\n  const {\n    x = 0,\n    y = 0,\n    width = 0,\n    height = 0,\n    spriteWidth = 0,\n    spriteHeight = 0,\n    src: source,\n    locale,\n  } = stickerInfo || {};\n  const style = useMemo(() => {\n    return {\n      width: `${sz }px`,\n      height: `${sz }px`,\n      backgroundImage: `url(${source})`,\n      backgroundSize: `${(sz / width) * spriteWidth}px ${\n        (sz / height) * spriteHeight\n      }px`,\n      backgroundPosition: `${(sz / width) * x}px ${(sz / height) * y}px`,\n      backgroundColor,\n    };\n  }, [width, height, source, backgroundColor, sz, code]);\n  const handleClick = useCallback(\n    (e) => {\n      return onClick && onClick(e);\n    },\n    [onClick],\n  );\n\n  const renderItem = useMemo(() => {\n    if (code && source) {\n      // 网络中断时显示表情占位\n      return isNetError ? (\n        <ToolbarEmojiNormal\n          onClick={handleClick}\n          style={{ width: sz, height: sz, background: '#f5f6f7' }}\n        />\n      ) : (\n        <div onClick={handleClick} style={style} />\n      );\n    } else {\n      // 不支持的表情，显示 placeholder\n      return placeholder;\n    }\n  }, [\n    width,\n    height,\n    source,\n    backgroundColor,\n    sz,\n    code,\n    handleClick,\n    isNetError,\n  ]);\n\n  useEffect(() => {\n    if (!source || doNotNeedCheckNet) return undefined;\n    let image = new Image();\n    image.src = source;\n    const handleImageLoad = () => setNetError(false);\n    const handleImageError = () => setNetError(true);\n    image.addEventListener('load', handleImageLoad);\n    image.addEventListener('error', handleImageError);\n    return () => {\n      image.removeEventListener('load', handleImageLoad);\n      image.removeEventListener('error', handleImageError);\n      // @ts-ignore\n      image = null;\n    };\n  }, [source]);\n\n  return (\n    <StickerWrapper\n      data-type=\"sticker\"\n      data-sticker={code}\n      contentEditable={false}\n      sz={sz}\n    >\n      {type ? <span>{`[${locale}]`}</span> : renderItem}\n    </StickerWrapper>\n  );\n}\n\nexport default React.memo(StickerItem);\n"],"file":"stickerItem.js"}