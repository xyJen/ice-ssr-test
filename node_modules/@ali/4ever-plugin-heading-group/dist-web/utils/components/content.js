import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import classnames from 'classnames';
var ContentBox = /*#__PURE__*/styled.div(["&.transition{max-height:fit-content;transition:all 0.2s ease-in-out;overflow:hidden;&.fold{display:block;}}&.fold{max-height:0;overflow:hidden;display:none;}"]);
var PocketBox = /*#__PURE__*/styled.div([":first-child > [data-cangjie-leaf-block] > *{margin-top:0 !important;}& >:first-child > [data-name='heading-group-title'] > [data-name='heading-group-title-content'] > [data-cangjie-leaf-block] > *{margin-top:0 !important;}"]);

var Content = function Content(props) {
  var fold = props.fold,
      animate = props.animate,
      style = props.style,
      className = props.className,
      dataName = props.dataName,
      children = props.children;
  var foldRef = React.useRef(fold);
  var contentRef = React.useRef(null);
  var pocketRef = React.useRef(null);

  var _React$useState = React.useState(fold),
      internalFold = _React$useState[0],
      setInternalFold = _React$useState[1];

  var _React$useState2 = React.useState(false),
      transition = _React$useState2[0],
      setTransition = _React$useState2[1];

  var setAnimationHeight = React.useCallback(function (fold) {
    if (pocketRef.current && contentRef.current) {
      contentRef.current.style.maxHeight = fold ? '0' : pocketRef.current.offsetHeight + "px";
    }
  }, []);
  /**
   * Step1: 折叠状态发生变化，准备添加动画，并设置动画初始状态，在 task 末尾设置动画目标状态
   */

  React.useLayoutEffect(function () {
    if (fold !== foldRef.current) {
      if (animate) {
        setTransition(true); // 设置初始状态

        setAnimationHeight(foldRef.current);
        Promise.resolve().then(function () {
          // 设置目标状态
          setAnimationHeight(fold);
        });
      } else {
        setTransition(false);
        setInternalFold(fold);
      }

      foldRef.current = fold;
    }
  }, [animate, fold]);
  /**
   * Step2: 动画结束后移除动画类，更新折叠状态并设置高度自适应
   */

  var handleTransitionEnd = React.useCallback(function () {
    setTransition(false);
    setInternalFold(foldRef.current);

    if (contentRef.current) {
      // 动画结束重置 css 状态，自动撑起高度
      contentRef.current.style.maxHeight = 'fit-content';
    }
  }, []);
  var classNames = classnames({
    transition: transition,
    fold: internalFold
  });
  return /*#__PURE__*/_createElement(ContentBox, {
    ref: contentRef,
    className: classNames,
    style: style,
    onTransitionEnd: handleTransitionEnd
  }, /*#__PURE__*/_createElement(PocketBox, {
    ref: pocketRef,
    "data-name": dataName,
    "data-heading-fold": fold,
    className: className
  }, children));
};

Content.displayName = 'Content';
export default Content;
//# sourceMappingURL=content.js.map