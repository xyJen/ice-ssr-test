import { Block } from '@ali/4ever-cangjie';
import { getHeadingAncestors } from "../queries";
import { injectToNodes } from "../utils";

function createAutoUnfold(options) {
  var onAutoUnfold = options.onAutoUnfold,
      _options$inject = options.inject,
      inject = _options$inject === void 0 ? false : _options$inject;
  return function autoUnfold(event, controller) {
    var _event$detail = event.detail,
        selection = _event$detail.selection,
        trigger = _event$detail.trigger;
    var document = controller.value.document;
    var focus = selection.focus;
    var block = document.getFurthestAncestor(focus.key); // TODO: 这里的 query 会在每次 select 时消耗一次 O(N) 的查询性能，后续考虑在 DOM 上做一次 O(h) 的查询来优化
    // 如果是议题的选区扩展行为，则不执行自动展开

    if (trigger !== 'subjectNormalize' && Block.isBlock(block)) {
      var groups = controller.query(getHeadingAncestors, block); // 若开启了注入，则自动注入 Injection 数据

      if (inject) {
        groups = injectToNodes(controller.value.injections, groups);
      } // 过滤折叠标题自动展开


      var parents = groups.filter(function (group) {
        return controller.userData.get(group, 'fold');
      });
      parents.forEach(function (parent) {
        return onAutoUnfold(controller, parent);
      });
    }
  };
}

export default createAutoUnfold;
//# sourceMappingURL=createAutoUnfold.js.map