import { toggleFold } from "../actions";
import { getHeadingAncestors } from "../queries";
import { injectToNodes } from "../utils";

function createRenderMark(options) {
  var _options$autoUnfold = options.autoUnfold,
      autoUnfold = _options$autoUnfold === void 0 ? false : _options$autoUnfold,
      _options$inject = options.inject,
      inject = _options$inject === void 0 ? false : _options$inject;
  return function renderMark(props, controller, next) {
    var mark = props.mark,
        node = props.node;
    var _controller$value = controller.value,
        document = _controller$value.document,
        injections = _controller$value.injections;

    if (autoUnfold && mark.type === 'match' && mark.data.selected) {
      var block = document.getFurthsestBlock(node.key);
      var groups = block ? controller.query(getHeadingAncestors, block) : []; // 注入 Injection 数据

      if (inject) {
        groups = injectToNodes(injections, groups);
      }

      var parents = groups.filter(function (group) {
        return controller.userData.get(group, 'fold');
      });
      parents.forEach(function (parent) {
        return controller.run('onAction', toggleFold({
          node: parent,
          fold: false
        }));
      });
    }

    return next();
  };
}

export default createRenderMark;
//# sourceMappingURL=createRenderMark.js.map