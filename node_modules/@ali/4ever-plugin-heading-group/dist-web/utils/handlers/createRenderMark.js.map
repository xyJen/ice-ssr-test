{"version":3,"sources":["../../../../src/utils/handlers/createRenderMark.ts"],"names":["toggleFold","getHeadingAncestors","injectToNodes","createRenderMark","options","autoUnfold","inject","renderMark","props","controller","next","mark","node","value","document","injections","type","data","selected","block","getFurthsestBlock","key","groups","query","parents","filter","group","userData","get","forEach","parent","run","fold"],"mappings":"AACA,SAASA,UAAT;AACA,SAASC,mBAAT;AACA,SAASC,aAAT;;AAWA,SAASC,gBAAT,CAA0BC,OAA1B,EAA4E;AAAA,4BAC3BA,OAD2B,CAClEC,UADkE;AAAA,MAClEA,UADkE,oCACrD,KADqD;AAAA,wBAC3BD,OAD2B,CAC9CE,MAD8C;AAAA,MAC9CA,MAD8C,gCACrC,KADqC;AAE1E,SAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,UAA3B,EAAuCC,IAAvC,EAA6C;AAAA,QAC1CC,IAD0C,GAC3BH,KAD2B,CAC1CG,IAD0C;AAAA,QACpCC,IADoC,GAC3BJ,KAD2B,CACpCI,IADoC;AAAA,4BAEjBH,UAAU,CAACI,KAFM;AAAA,QAE1CC,QAF0C,qBAE1CA,QAF0C;AAAA,QAEhCC,UAFgC,qBAEhCA,UAFgC;;AAGlD,QAAIV,UAAU,IAAIM,IAAI,CAACK,IAAL,KAAc,OAA5B,IAAuCL,IAAI,CAACM,IAAL,CAAUC,QAArD,EAA+D;AAC7D,UAAMC,KAAK,GAAGL,QAAQ,CAACM,iBAAT,CAA2BR,IAAI,CAACS,GAAhC,CAAd;AACA,UAAIC,MAAM,GAAGH,KAAK,GAAGV,UAAU,CAACc,KAAX,CAAiBtB,mBAAjB,EAAsCkB,KAAtC,CAAH,GAAkD,EAApE,CAF6D,CAI7D;;AACA,UAAIb,MAAJ,EAAY;AACVgB,QAAAA,MAAM,GAAGpB,aAAa,CAACa,UAAD,EAAaO,MAAb,CAAtB;AACD;;AAED,UAAME,OAAO,GAAGF,MAAM,CAACG,MAAP,CAAc,UAACC,KAAD;AAAA,eAAWjB,UAAU,CAACkB,QAAX,CAAoBC,GAApB,CAAwBF,KAAxB,EAA+B,MAA/B,CAAX;AAAA,OAAd,CAAhB;AACAF,MAAAA,OAAO,CAACK,OAAR,CAAgB,UAACC,MAAD;AAAA,eAAYrB,UAAU,CAACsB,GAAX,CAAe,UAAf,EAA2B/B,UAAU,CAAC;AAChEY,UAAAA,IAAI,EAAEkB,MAD0D;AAEhEE,UAAAA,IAAI,EAAE;AAF0D,SAAD,CAArC,CAAZ;AAAA,OAAhB;AAID;;AACD,WAAOtB,IAAI,EAAX;AACD,GAnBD;AAoBD;;AAED,eAAeP,gBAAf","sourcesContent":["import { Plugin } from '@ali/4ever-cangjie';\nimport { toggleFold } from '../actions';\nimport { getHeadingAncestors } from '../queries';\nimport { injectToNodes } from '../utils';\n\nexport interface RenderMarkOptions {\n  autoUnfold?: boolean;\n  /**\n   * 是否注入 Injection\n   * @default false\n   */\n  inject?: boolean;\n}\n\nfunction createRenderMark(options: RenderMarkOptions): Plugin['renderMark'] {\n  const { autoUnfold = false, inject = false } = options;\n  return function renderMark(props, controller, next) {\n    const { mark, node } = props;\n    const { document, injections } = controller.value;\n    if (autoUnfold && mark.type === 'match' && mark.data.selected) {\n      const block = document.getFurthsestBlock(node.key);\n      let groups = block ? controller.query(getHeadingAncestors, block) : [];\n\n      // 注入 Injection 数据\n      if (inject) {\n        groups = injectToNodes(injections, groups);\n      }\n      \n      const parents = groups.filter((group) => controller.userData.get(group, 'fold'));\n      parents.forEach((parent) => controller.run('onAction', toggleFold({\n        node: parent,\n        fold: false,\n      })));\n    }\n    return next();\n  };\n}\n\nexport default createRenderMark;\n"],"file":"createRenderMark.js"}