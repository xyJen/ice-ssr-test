"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHeadingParent = getHeadingParent;
exports.getHeadingAncestors = getHeadingAncestors;

var _everCangjie = require("@ali/4ever-cangjie");

var _utils = require("../utils");

const headings = Array(6).fill(0).map((_, i) => node => _everCangjie.Block.isBlock(node) && node.type === `heading-${i + 1}`);
/**
 * 查询节点的父级标题
 * @param controller
 * @param node
 * @returns
 */

function getHeadingParent(controller, node) {
  const {
    document
  } = controller.value;
  const nodeLevel = (0, _utils.getHeadingLevel)(node);
  const $level = controller.query('getHeadingGroupLevel');
  const level = typeof $level === 'number' ? $level : 3; // H1 没有父级组

  if (nodeLevel === 1) {
    return null;
  }

  let cond;

  if (nodeLevel === -1 || nodeLevel > level) {
    cond = (0, _utils.condition)(...headings.slice(0, level));
  } else {
    cond = (0, _utils.condition)(...headings.slice(0, nodeLevel - 1));
  }

  const path = document.getPath(node.key);

  if (!path) {
    return null;
  }

  const [index] = path; // 查询第一个高级标题节点返回

  let heading = null;
  let i = index - 1;

  while (i >= 0) {
    const prev = document.nodes[i];

    if (cond.some(prev)) {
      heading = prev;
      break;
    }

    i -= 1;
  }

  return heading;
}
/**
 * 查询节点的祖先标题组
 * @param controller
 * @param node
 * @returns
 */


function getHeadingAncestors(controller, node) {
  const ancestors = [];
  let current = node;

  while (current !== null) {
    const parent = getHeadingParent(controller, current);

    if (parent) {
      ancestors.unshift(parent);
    }

    current = parent;
  }

  return ancestors;
}
//# sourceMappingURL=parents.js.map