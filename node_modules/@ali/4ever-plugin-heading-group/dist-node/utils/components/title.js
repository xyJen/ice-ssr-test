"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _everCangjie = require("@ali/4ever-cangjie");

const _createElement = /*#__PURE__*/React.createElement;

const FoldBox = /*#__PURE__*/_styledComponents.default.div(["opacity:0;position:absolute;width:20px;height:20px;left:", "px;margin:auto;cursor:default;z-index:2;border-radius:4px;&.disabled{display:none;}&.visible{opacity:1;}&:hover{background:rgba(25,31,37,0.08);}"], props => props.foldBoxLeft || 0 - 20);

const TitleBox = /*#__PURE__*/_styledComponents.default.div(["position:relative;"]);

const ArrowIconBox = /*#__PURE__*/_styledComponents.default.span(["display:flex;justify-content:center;align-items:center;width:", "px;height:", "px;& svg{transform:rotateZ(", "deg);transition:transform 0.2s ease-in-out;}"], props => props.size, props => props.size, props => props.rotate);

const arrow = /*#__PURE__*/_createElement("svg", {
  width: "10",
  height: "7",
  viewBox: "0 0 10 7",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_createElement("path", {
  d: "M4.60369 5.98479C4.80384 6.24499 5.19616 6.24499 5.39631 5.98479L9.38088 0.804856C9.63381 0.476046 9.39941 0 8.98457 0L1.01543 0C0.600595 0 0.366189 0.476046 0.619119 0.804855L4.60369 5.98479Z",
  fill: "#171A1D",
  fillOpacity: "0.4"
}));

/**
 * 分组标题组件
 * @param props
 * @returns
 */
const Title = props => {
  const {
    style,
    className,
    fold,
    onChange,
    dataName,
    disabled,
    children,
    foldBoxLeft,
    role
  } = props;
  const foldBtnRef = React.useRef(null);
  const titleRef = React.useRef(null);
  const zoom = (0, _everCangjie.useZoom)();
  const [hovered, setHovered] = React.useState(false);
  const handleMouseEnterTitle = React.useCallback(() => setHovered(true), []);
  const handleMouseLeaveTitle = React.useCallback(() => setHovered(false), []);
  const visible = hovered || fold;
  /**
   * 点击标题折叠
   */

  const handleClickFold = React.useCallback(e => {
    e.preventDefault();
    e.stopPropagation();

    if (typeof onChange === 'function') {
      onChange(!fold);
    }
  }, [fold, onChange]);
  React.useLayoutEffect(() => {
    if (!visible) {
      return;
    }

    const title = titleRef.current;
    const foldBtn = foldBtnRef.current;

    if (!title || !foldBtn) {
      return;
    }

    const line = title.querySelector('[data-name="heading-group-title-content"]') || title;

    const [row] = _everCangjie.domUtils.splitRows(line, true);

    const rowHeight = row.height;
    const foldBtnTop = `${Math.round((rowHeight / zoom - foldBtn.offsetHeight) / 2)}px`;

    if (getComputedStyle(foldBtn).top !== foldBtnTop) {
      // 与第一行保持居中对齐
      foldBtn.style.top = foldBtnTop;
    }
  });
  const rotate = fold ? -90 : 0;
  const foldClassName = (0, _classnames.default)({
    disabled,
    visible
  });
  return /*#__PURE__*/_createElement(TitleBox, {
    ref: titleRef,
    style: style,
    className: className,
    "data-name": dataName,
    onMouseEnter: handleMouseEnterTitle,
    onMouseLeave: handleMouseLeaveTitle
  }, /*#__PURE__*/_createElement(FoldBox, {
    ref: foldBtnRef,
    foldBoxLeft: foldBoxLeft,
    "data-name": "group-fold-btn",
    className: foldClassName,
    onClick: handleClickFold,
    "data-role": role
  }, /*#__PURE__*/_createElement(ArrowIconBox, {
    size: 20,
    rotate: rotate
  }, arrow)), children);
};

var _default = Title;
exports.default = _default;
//# sourceMappingURL=title.js.map