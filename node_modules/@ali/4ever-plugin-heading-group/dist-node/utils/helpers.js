"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFoldInGroup = isFoldInGroup;
exports.isUnfoldInGroup = isUnfoldInGroup;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginSubject = require("@ali/4ever-plugin-subject");

var _utils = require("./utils");

/**
 * 节点是否在折叠的 Group 之内
 * @param document
 * @param node
 * @returns
 */
function isFoldInGroup(document, node, controller) {
  const path = document.getPath(node.key); // path 不存在则返回 false

  if (!path || path.length === 0) {
    return false;
  } // 查询节点的父节点是否是折叠态


  for (let i = 1; i < path.length; i++) {
    const subPath = path.slice(0, i);
    const block = document.getNodeByPath(subPath);

    if ((0, _everPluginSubject.isSubject)(block) || (0, _utils.isHeadingGroup)(block)) {
      const fold = (0, _everCangjie.getUserData)(document, block, controller?.uid, 'fold');

      if (fold) {
        return true;
      }

      continue;
    } else {
      // 短路优化：若不为 group 节点则返回 false
      return false;
    }
  }

  return false;
}
/**
 * 节点是否在未折叠的 Group 内
 * @param document
 * @param node
 * @returns
 * @description 通常此方法需要与 `isFoldInGroup` 配合使用
 */


function isUnfoldInGroup(document, node, controller) {
  const path = document.getPath(node.key); // path 不存在则返回 false

  if (!path || path.length === 0) {
    return false;
  }

  for (let i = 1; i < path.length; i++) {
    const subPath = path.slice(0, i);
    const block = document.getNodeByPath(subPath);

    if ((0, _everPluginSubject.isSubject)(block) || (0, _utils.isHeadingGroup)(block)) {
      const fold = (0, _everCangjie.getUserData)(document, block, controller?.uid, 'fold');

      if (fold) {
        return false;
      }

      continue;
    } else {
      // 短路优化：如果 group 组中途断掉，则返回 true
      return true;
    }
  }

  return true;
}
//# sourceMappingURL=helpers.js.map