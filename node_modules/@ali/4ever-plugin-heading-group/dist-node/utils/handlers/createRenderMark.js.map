{"version":3,"sources":["../../../../src/utils/handlers/createRenderMark.ts"],"names":["createRenderMark","options","autoUnfold","inject","renderMark","props","controller","next","mark","node","document","injections","value","type","data","selected","block","getFurthsestBlock","key","groups","query","getHeadingAncestors","parents","filter","group","userData","get","forEach","parent","run","fold"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAWA,SAASA,gBAAT,CAA0BC,OAA1B,EAA4E;AAC1E,QAAM;AAAEC,IAAAA,UAAU,GAAG,KAAf;AAAsBC,IAAAA,MAAM,GAAG;AAA/B,MAAyCF,OAA/C;AACA,SAAO,SAASG,UAAT,CAAoBC,KAApB,EAA2BC,UAA3B,EAAuCC,IAAvC,EAA6C;AAClD,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiBJ,KAAvB;AACA,UAAM;AAAEK,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA2BL,UAAU,CAACM,KAA5C;;AACA,QAAIV,UAAU,IAAIM,IAAI,CAACK,IAAL,KAAc,OAA5B,IAAuCL,IAAI,CAACM,IAAL,CAAUC,QAArD,EAA+D;AAC7D,YAAMC,KAAK,GAAGN,QAAQ,CAACO,iBAAT,CAA2BR,IAAI,CAACS,GAAhC,CAAd;AACA,UAAIC,MAAM,GAAGH,KAAK,GAAGV,UAAU,CAACc,KAAX,CAAiBC,4BAAjB,EAAsCL,KAAtC,CAAH,GAAkD,EAApE,CAF6D,CAI7D;;AACA,UAAIb,MAAJ,EAAY;AACVgB,QAAAA,MAAM,GAAG,0BAAcR,UAAd,EAA0BQ,MAA1B,CAAT;AACD;;AAED,YAAMG,OAAO,GAAGH,MAAM,CAACI,MAAP,CAAeC,KAAD,IAAWlB,UAAU,CAACmB,QAAX,CAAoBC,GAApB,CAAwBF,KAAxB,EAA+B,MAA/B,CAAzB,CAAhB;AACAF,MAAAA,OAAO,CAACK,OAAR,CAAiBC,MAAD,IAAYtB,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2B,yBAAW;AAChEpB,QAAAA,IAAI,EAAEmB,MAD0D;AAEhEE,QAAAA,IAAI,EAAE;AAF0D,OAAX,CAA3B,CAA5B;AAID;;AACD,WAAOvB,IAAI,EAAX;AACD,GAnBD;AAoBD;;eAEcP,gB","sourcesContent":["import { Plugin } from '@ali/4ever-cangjie';\nimport { toggleFold } from '../actions';\nimport { getHeadingAncestors } from '../queries';\nimport { injectToNodes } from '../utils';\n\nexport interface RenderMarkOptions {\n  autoUnfold?: boolean;\n  /**\n   * 是否注入 Injection\n   * @default false\n   */\n  inject?: boolean;\n}\n\nfunction createRenderMark(options: RenderMarkOptions): Plugin['renderMark'] {\n  const { autoUnfold = false, inject = false } = options;\n  return function renderMark(props, controller, next) {\n    const { mark, node } = props;\n    const { document, injections } = controller.value;\n    if (autoUnfold && mark.type === 'match' && mark.data.selected) {\n      const block = document.getFurthsestBlock(node.key);\n      let groups = block ? controller.query(getHeadingAncestors, block) : [];\n\n      // 注入 Injection 数据\n      if (inject) {\n        groups = injectToNodes(injections, groups);\n      }\n      \n      const parents = groups.filter((group) => controller.userData.get(group, 'fold'));\n      parents.forEach((parent) => controller.run('onAction', toggleFold({\n        node: parent,\n        fold: false,\n      })));\n    }\n    return next();\n  };\n}\n\nexport default createRenderMark;\n"],"file":"createRenderMark.js"}