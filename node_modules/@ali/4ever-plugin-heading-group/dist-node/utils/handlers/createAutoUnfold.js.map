{"version":3,"sources":["../../../../src/utils/handlers/createAutoUnfold.ts"],"names":["createAutoUnfold","options","onAutoUnfold","inject","autoUnfold","event","controller","selection","trigger","detail","document","value","focus","block","getFurthestAncestor","key","Block","isBlock","groups","query","getHeadingAncestors","injections","parents","filter","group","userData","get","forEach","parent"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAcA,SAASA,gBAAT,CAA0BC,OAA1B,EAAsD;AACpD,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,MAAM,GAAG;AAAzB,MAAmCF,OAAzC;AAEA,SAAO,SAASG,UAAT,CAAoBC,KAApB,EAA+CC,UAA/C,EAAuE;AAC5E,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBH,KAAK,CAACI,MAArC;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAeJ,UAAU,CAACK,KAAhC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYL,SAAlB;AACA,UAAMM,KAAK,GAAGH,QAAQ,CAACI,mBAAT,CAA6BF,KAAK,CAACG,GAAnC,CAAd,CAL4E,CAO5E;AACA;;AACA,QAAIP,OAAO,KAAK,kBAAZ,IAAkCQ,mBAAMC,OAAN,CAAcJ,KAAd,CAAtC,EAA4D;AAC1D,UAAIK,MAAM,GAAGZ,UAAU,CAACa,KAAX,CAAiBC,4BAAjB,EAAsCP,KAAtC,CAAb,CAD0D,CAE1D;;AACA,UAAIV,MAAJ,EAAY;AACVe,QAAAA,MAAM,GAAG,0BAAcZ,UAAU,CAACK,KAAX,CAAiBU,UAA/B,EAA2CH,MAA3C,CAAT;AACD,OALyD,CAO1D;;;AACA,YAAMI,OAAO,GAAGJ,MAAM,CAACK,MAAP,CAAeC,KAAD,IAAWlB,UAAU,CAACmB,QAAX,CAAoBC,GAApB,CAAwBF,KAAxB,EAA+B,MAA/B,CAAzB,CAAhB;AACAF,MAAAA,OAAO,CAACK,OAAR,CAAiBC,MAAD,IAAY1B,YAAY,CAACI,UAAD,EAAasB,MAAb,CAAxC;AACD;AACF,GApBD;AAqBD;;eAEc5B,gB","sourcesContent":["import { Block, CangjieSelectEvent, Controller } from '@ali/4ever-cangjie';\nimport type { FoldableHeadingData } from '@ali/4ever-plugin-heading';\nimport { getHeadingAncestors } from '../queries';\nimport { injectToNodes } from '../utils';\n\nexport interface AutoUnfoldOptions {\n  /**\n   * 触发自动展开\n   */\n  onAutoUnfold: (controller: Controller, node: Block<FoldableHeadingData>) => void;\n  /**\n   * 是否注入 Injection\n   * @default false\n   */\n  inject?: boolean;\n}\n\nfunction createAutoUnfold(options: AutoUnfoldOptions) {\n  const { onAutoUnfold, inject = false } = options;\n\n  return function autoUnfold(event: CangjieSelectEvent, controller: Controller) {\n    const { selection, trigger } = event.detail;\n\n    const { document } = controller.value;\n    const { focus } = selection;\n    const block = document.getFurthestAncestor(focus.key);\n\n    // TODO: 这里的 query 会在每次 select 时消耗一次 O(N) 的查询性能，后续考虑在 DOM 上做一次 O(h) 的查询来优化\n    // 如果是议题的选区扩展行为，则不执行自动展开\n    if (trigger !== 'subjectNormalize' && Block.isBlock(block)) {\n      let groups = controller.query(getHeadingAncestors, block);\n      // 若开启了注入，则自动注入 Injection 数据\n      if (inject) {\n        groups = injectToNodes(controller.value.injections, groups);\n      }\n\n      // 过滤折叠标题自动展开\n      const parents = groups.filter((group) => controller.userData.get(group, 'fold'));\n      parents.forEach((parent) => onAutoUnfold(controller, parent));\n    }\n  };\n}\n\nexport default createAutoUnfold;\n"],"file":"createAutoUnfold.js"}