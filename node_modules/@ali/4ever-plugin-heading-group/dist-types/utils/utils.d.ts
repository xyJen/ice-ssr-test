import { Controller, Block, Element, Injection } from '@ali/4ever-cangjie';
import type { FoldableHeadingData } from '@ali/4ever-plugin-heading';
import { generateHeadingGroupKey as generateGroupKey, generateHeadingGroupType as generateGroupType, groupHeading as group } from '@ali/4ever-utils';
export { generateGroupKey, generateGroupType, group };
export declare type Condition = (node: any) => boolean;
export declare function not<T extends (...args: any[]) => boolean>(fn: T): T;
/**
 * 生成条件组查询器
 * @param predicates
 * @returns
 */
export declare function condition<T extends Condition>(...predicates: T[]): {
    some: (node: any) => boolean;
    not: (node: any) => boolean;
};
/**
 * 判断是否是折叠标题类型
 * @param type
 * @returns
 */
export declare function isGroupType(type: string): boolean;
/**
 * 判断节点是否是标题组
 * @param node
 * @returns
 */
export declare function isHeadingGroup(node: any): node is Block<FoldableHeadingData>;
/**
 * 检测节点是否是某个类型的 group
 * @param node
 * @param type
 * @returns
 */
export declare function isGroupFrom(node: any, type: string): node is Block;
/**
 * 读取标题等级
 * @param node
 * @returns
 */
export declare function getHeadingLevel(node: Block): number;
/**
 * 注入一组 Injection 至一组节点组中
 * @param injections
 * @param nodes
 * @returns
 */
export declare function injectToNodes<T extends Element>(injections: Injection[], nodes: T[]): T[];
export declare function isHeadingGroupAvailable(controller: Controller): boolean;
/**
 * @description 获取下一个可视节点
 */
export declare function getNextViewGroupNode(node: Block, controller: Controller): Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren> | null;
/**
 * @description 获取上一个可视节点
 */
export declare function getPreviousViewGroupNode(node: Block, controller: Controller): Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren> | null;
