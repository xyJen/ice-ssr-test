import _extends from "@babel/runtime/helpers/extends";
import logger from '@ali/4ever-logger';
import { renderEditable } from "./renderEditable";
var EVENT_HANDLERS1 = ['onAction', 'onCangjieInput', 'onCangjieCopy', 'onCangjieCut', 'onCangjiePaste', 'onClick', 'onContextMenu', 'onCommand', 'onCompositionEnd', 'onCompositionStart', 'onCopy', 'onCut', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDrop', 'onInput', 'onKeyDown', 'onKeyUp', 'onMouseDown', 'onMouseUp', 'onPaste', 'onSelect', 'onTouchStart', 'onTouchMove', 'onTouchEnd'];
var EVENT_HANDLERS2 = ['onCangjieBlur', 'onChange'];

var monitHandler = function monitHandler(next) {
  try {
    return next();
  } catch (e) {
    logger.error(e);
    throw e;
  }
};

export var biFactory = function biFactory() {
  var plugins1 = EVENT_HANDLERS1.reduce(function (handlers, handler) {
    var _extends2;

    return _extends({}, handlers, (_extends2 = {}, _extends2[handler] = function (_, controller, next) {
      return monitHandler(next);
    }, _extends2));
  }, {});
  var plugins2 = EVENT_HANDLERS2.reduce(function (handlers, handler) {
    var _extends3;

    return _extends({}, handlers, (_extends3 = {}, _extends3[handler] = function (controller, next) {
      return monitHandler(next);
    }, _extends3));
  }, {});

  var cangjieSelectHandler = function cangjieSelectHandler(_, controller, next) {
    try {
      return next();
    } catch (e) {
      if (e instanceof Error && e.message.indexOf('Core[onCangjieSelect] receive invalid selection:') > -1) {
        logger.sum('Editor Error: Core[onCangjieSelect] receive invalid selection');
      } else {
        logger.error(e);
        throw e;
      }
    }
  };

  return _extends({
    key: 'exception',
    renderEditable: renderEditable,
    onCangjieSelect: cangjieSelectHandler
  }, plugins1, plugins2, {
    models: []
  });
};
//# sourceMappingURL=index.js.map