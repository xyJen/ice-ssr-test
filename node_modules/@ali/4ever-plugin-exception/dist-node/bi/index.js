"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.biFactory = void 0;

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _renderEditable = require("./renderEditable");

const EVENT_HANDLERS1 = ['onAction', 'onCangjieInput', 'onCangjieCopy', 'onCangjieCut', 'onCangjiePaste', 'onClick', 'onContextMenu', 'onCommand', 'onCompositionEnd', 'onCompositionStart', 'onCopy', 'onCut', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDrop', 'onInput', 'onKeyDown', 'onKeyUp', 'onMouseDown', 'onMouseUp', 'onPaste', 'onSelect', 'onTouchStart', 'onTouchMove', 'onTouchEnd'];
const EVENT_HANDLERS2 = ['onCangjieBlur', 'onChange'];

const monitHandler = next => {
  try {
    return next();
  } catch (e) {
    _everLogger.default.error(e);

    throw e;
  }
};

const biFactory = () => {
  const plugins1 = EVENT_HANDLERS1.reduce((handlers, handler) => {
    return { ...handlers,
      [handler]: (_, controller, next) => {
        return monitHandler(next);
      }
    };
  }, {});
  const plugins2 = EVENT_HANDLERS2.reduce((handlers, handler) => {
    return { ...handlers,
      [handler]: (controller, next) => {
        return monitHandler(next);
      }
    };
  }, {});

  const cangjieSelectHandler = (_, controller, next) => {
    try {
      return next();
    } catch (e) {
      if (e instanceof Error && e.message.indexOf('Core[onCangjieSelect] receive invalid selection:') > -1) {
        _everLogger.default.sum('Editor Error: Core[onCangjieSelect] receive invalid selection');
      } else {
        _everLogger.default.error(e);

        throw e;
      }
    }
  };

  return {
    key: 'exception',
    renderEditable: _renderEditable.renderEditable,
    onCangjieSelect: cangjieSelectHandler,
    ...plugins1,
    ...plugins2,
    models: []
  };
};

exports.biFactory = biFactory;
//# sourceMappingURL=index.js.map