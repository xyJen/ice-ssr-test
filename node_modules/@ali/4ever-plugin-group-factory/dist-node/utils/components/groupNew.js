"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everPluginHeadingGroup = require("@ali/4ever-plugin-heading-group");

var _everCangjie = require("@ali/4ever-cangjie");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _actions = require("../actions");

const _createElement = /*#__PURE__*/React.createElement;
const ContentBox = /*#__PURE__*/(0, _styledComponents.default)(_everPluginHeadingGroup.Content)(["position:relative;"]);

const TitleContent = /*#__PURE__*/_styledComponents.default.div([""]);

const GroupBox = /*#__PURE__*/_styledComponents.default.div(["position:relative;background:", ";"], props => props.backgroundColor || 'unset');

const generateRole = (role, fold) => {
  return `${role}${fold ? 'Fold' : 'UnFold'}`;
};

const GroupNew = props => {
  const {
    node,
    attributes,
    isSelected,
    controller,
    children,
    renderExtra,
    renderBackground,
    foldBoxLeft,
    role = 'Default',
    visible
  } = props;
  const style = {};

  if (visible === false) {
    style.display = 'none';
  }

  const fold = (0, _everCangjie.useUserData)(node, 'fold') || false;
  const [foldRole, setFoleRole] = React.useState(generateRole(role, fold));
  const first = node.nodes[0];
  const {
    immediatelyUnfoldMap = {}
  } = controller.value.data;
  const immediately = !!immediatelyUnfoldMap[node.key];
  const foldRef = React.useRef(fold);
  const handleFoldChange = React.useCallback(_fold => {
    controller.run('onCangjieBlur');
    controller.run('onAction', (0, _everPluginHeadingGroup.toggleFold)({
      node,
      fold: _fold
    })); // controller.run('onAction', GroupPlugin.actions.toggleGroupFold(node.key));

    setFoleRole(generateRole(role, fold));
  }, [controller, node, fold, role]);
  React.useEffect(() => {
    foldRef.current = fold;
  }, [controller, node, fold, isSelected]); // 立即展开后需要清除标记

  React.useEffect(() => {
    if (immediately) {
      controller.run('onAction', (0, _actions.clearImmediately)({
        node
      }));
    }
  }, [controller, first, immediately]);
  return /*#__PURE__*/_createElement(GroupBox, (0, _extends2.default)({}, attributes, {
    "data-cangjie-group-block": true,
    "data-name": "heading-group",
    "data-type": node.type,
    style: style,
    "data-foldable": true
  }), renderBackground, /*#__PURE__*/_createElement(_everPluginHeadingGroup.Title, {
    dataName: "heading-group-title",
    fold: fold,
    foldBoxLeft: foldBoxLeft,
    onChange: handleFoldChange,
    role: foldRole
  }, /*#__PURE__*/_createElement(TitleContent, {
    "data-name": "heading-group-title-content"
  }, children)));
};

GroupNew.displayName = 'Group';
var _default = GroupNew;
exports.default = _default;
//# sourceMappingURL=groupNew.js.map