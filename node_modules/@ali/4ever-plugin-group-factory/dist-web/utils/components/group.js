import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { toggleFold, Title as TitleBox, Content } from '@ali/4ever-plugin-heading-group';
import { useUserData } from '@ali/4ever-cangjie';
import styled from 'styled-components';
import { clearImmediately } from "../actions";
var ContentBox = /*#__PURE__*/styled(Content)(["position:relative;"]);
var TitleContent = /*#__PURE__*/styled.div([""]);
var GroupBox = /*#__PURE__*/styled.div(["position:relative;background:", ";"], function (props) {
  return props.backgroundColor || 'unset';
});

var generateRole = function generateRole(role, fold) {
  return "" + role + (fold ? 'Fold' : 'UnFold');
};

var Group = function Group(props) {
  var node = props.node,
      attributes = props.attributes,
      isSelected = props.isSelected,
      controller = props.controller,
      children = props.children,
      renderExtra = props.renderExtra,
      renderBackground = props.renderBackground,
      foldBoxLeft = props.foldBoxLeft,
      _props$role = props.role,
      role = _props$role === void 0 ? 'Default' : _props$role,
      visible = props.visible;
  var originStyle = attributes == null ? void 0 : attributes.style;
  var style = originStyle ? _extends({}, originStyle) : {};

  if (visible === false) {
    style.display = 'none';
  }

  var fold = useUserData(node, 'fold') || false;

  var _React$useState = React.useState(generateRole(role, fold)),
      foldRole = _React$useState[0],
      setFoleRole = _React$useState[1];

  var first = node.nodes[0];
  var _controller$value$dat = controller.value.data.immediatelyUnfoldMap,
      immediatelyUnfoldMap = _controller$value$dat === void 0 ? {} : _controller$value$dat;
  var immediately = !!immediatelyUnfoldMap[first.key];
  var foldRef = React.useRef(fold);
  var handleFoldChange = React.useCallback(function (_fold) {
    controller.run('onCangjieBlur');
    controller.run('onAction', toggleFold({
      node: first,
      fold: _fold
    }));
    setFoleRole(generateRole(role, fold));
  }, [controller, first, fold, role]);
  React.useEffect(function () {
    foldRef.current = fold;
  }, [controller, first, fold, isSelected]); // 立即展开后需要清除标记

  React.useEffect(function () {
    if (immediately) {
      controller.run('onAction', clearImmediately({
        node: first
      }));
    }
  }, [controller, first, immediately]); // 切割议题的标题和内容块

  var titleNode;
  var contentNodes;

  if (Array.isArray(children) && children.length >= 1) {
    titleNode = children[0];
    contentNodes = children.slice(1);
  } else {
    return /*#__PURE__*/_createElement(React.Fragment, null, children);
  }

  return /*#__PURE__*/_createElement(GroupBox, _extends({}, attributes, {
    "data-cangjie-group-block": true,
    "data-name": "heading-group",
    "data-type": node.type,
    style: style,
    "data-foldable": true
  }), renderBackground, /*#__PURE__*/_createElement(TitleBox, {
    dataName: "heading-group-title",
    fold: fold,
    foldBoxLeft: foldBoxLeft,
    onChange: handleFoldChange,
    role: foldRole
  }, /*#__PURE__*/_createElement(TitleContent, {
    "data-name": "heading-group-title-content"
  }, titleNode)), contentNodes.length > 0 && /*#__PURE__*/_createElement(ContentBox, {
    dataName: "heading-group-content",
    fold: fold
  }, renderExtra, contentNodes));
};

Group.displayName = 'Group';
export default Group;
//# sourceMappingURL=group.js.map