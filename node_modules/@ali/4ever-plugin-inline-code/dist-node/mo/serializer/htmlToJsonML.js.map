{"version":3,"sources":["../../../../src/mo/serializer/htmlToJsonML.ts"],"names":["name","InlineCode","TYPE","onOpenTag","state","attrs","code","push","onCloseTag","pop","parent","peek","parentTagName","prevSibling","isPhantom","paragraphTags","phantom","append"],"mappings":";;;;;;;;;AAAA;;AAKA;;AAMA;;eAGe;AACbA,EAAAA,IAAI,EAAEC,gBAAWC,IADJ;;AAEb;AACAC,EAAAA,SAAS,CAACC,KAAD,EAAeJ,IAAf,EAA6BK,KAA7B,EAAyD;AAChE,QAAIL,IAAI,KAAK,MAAb,EAAqB,OAAO,KAAP,CAD2C,CAEhE;;AACA,UAAMM,IAAY,GAAG,CAACL,gBAAWC,IAAZ,EAAkB,EAAlB,CAArB;AACAE,IAAAA,KAAK,CAACG,IAAN,CAAWD,IAAX;AACA,WAAO,IAAP;AACD,GATY;;AAWbE,EAAAA,UAAU,CAACJ,KAAD,EAAeJ,IAAf,EAAsC;AAC9C,QAAIA,IAAI,KAAK,MAAb,EAAqB,OAAO,KAAP;AACrB,QAAIM,IAAI,GAAGF,KAAK,CAACK,GAAN,EAAX;AACA,UAAMC,MAAM,GAAGN,KAAK,CAACO,IAAN,EAAf;AACA,UAAMC,aAAa,GAAG,2BAAWF,MAAX,CAAtB;AACA,UAAMG,WAAW,GAAG,6BAAaH,MAAb,CAApB,CAL8C,CAM9C;AACA;;AACA,QAAIG,WAAW,IAAKA,WAAD,CAAyBC,SAA5C,EAAuD;AACrDD,MAAAA,WAAW,CAACN,IAAZ,CACE,uCAAqB,EAArB,CADF,EAEED,IAFF,EAGE,uCAAqB,EAArB,CAHF;AAKD,KAND,CAOA;AAPA,SAQK,IAAIS,yBAAcH,aAAd,CAAJ,EAAkC;AACrCC,QAAAA,WAAW,GACPH,MAAM,CAACH,IAAP,CAAYD,IAAZ,EAAkB,uCAAqB,EAArB,CAAlB,CADO,GAEPI,MAAM,CAACH,IAAP,CAAY,uCAAqB,EAArB,CAAZ,EAAsCD,IAAtC,EAA4C,uCAAqB,EAArB,CAA5C,CAFJ;AAGD,OAJI,MAIE;AACL;AACA,cAAMU,OAAe,GAAG,CACtB,GADsB,EAEtB,uCAAqB,EAArB,CAFsB,EAGtBV,IAHsB,EAItB,uCAAqB,EAArB,CAJsB,CAAxB;AAMCU,QAAAA,OAAD,CAAqBF,SAArB,GAAiC,IAAjC;AACAV,QAAAA,KAAK,CAACa,MAAN,CAAaD,OAAb;AACD;;AACD,WAAO,IAAP;AACD;;AA3CY,C","sourcesContent":["import {\n  MoState as State,\n  MoAttributes as Attributes,\n  createTextWithString,\n} from '@ali/4ever-cangjie';\nimport {\n  getLastChild,\n  getTagName,\n  JsonML,\n  paragraphTags,\n} from '@ali/4ever-utils';\nimport InlineCode from '../models';\ntype Phantom = { isPhantom?: boolean };\n\nexport default {\n  name: InlineCode.TYPE,\n  // 对code标签进行处理\n  onOpenTag(state: State, name: string, attrs: Attributes): boolean {\n    if (name !== 'code') return false;\n    // TODO 暂时不对code样式做处理，以inlineCode样式为准\n    const code: JsonML = [InlineCode.TYPE, {}] as JsonML;\n    state.push(code);\n    return true;\n  },\n\n  onCloseTag(state: State, name: string): boolean {\n    if (name !== 'code') return false;\n    let code = state.pop();\n    const parent = state.peek();\n    const parentTagName = getTagName(parent);\n    const prevSibling = getLastChild(parent);\n    // 首先判断兄弟节点是否是Phantom，如果是，将code加入到兄弟节点里\n    // 前后加入两个空节点，否则单测跑不过\n    if (prevSibling && (prevSibling as Phantom).isPhantom) {\n      prevSibling.push(\n        createTextWithString(''),\n        code,\n        createTextWithString(''),\n      );\n    }\n    // 否则判断父节点时否是paragraph，如果是，将code加入到父节点里\n    else if (paragraphTags[parentTagName]) {\n      prevSibling\n        ? parent.push(code, createTextWithString(''))\n        : parent.push(createTextWithString(''), code, createTextWithString(''));\n    } else {\n      // 兜底，如果上一个兄弟节点不存在，或父节点不为paragraph，则创建一个 phantom 节点\n      const phantom: JsonML = [\n        'p',\n        createTextWithString(''),\n        code,\n        createTextWithString(''),\n      ];\n      (phantom as Phantom).isPhantom = true;\n      state.append(phantom);\n    }\n    return true;\n  },\n};\n"],"file":"htmlToJsonML.js"}