"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _models = _interopRequireDefault(require("../models"));

var _default = {
  name: _models.default.TYPE,

  // 对code标签进行处理
  onOpenTag(state, name, attrs) {
    if (name !== 'code') return false; // TODO 暂时不对code样式做处理，以inlineCode样式为准

    const code = [_models.default.TYPE, {}];
    state.push(code);
    return true;
  },

  onCloseTag(state, name) {
    if (name !== 'code') return false;
    let code = state.pop();
    const parent = state.peek();
    const parentTagName = (0, _everUtils.getTagName)(parent);
    const prevSibling = (0, _everUtils.getLastChild)(parent); // 首先判断兄弟节点是否是Phantom，如果是，将code加入到兄弟节点里
    // 前后加入两个空节点，否则单测跑不过

    if (prevSibling && prevSibling.isPhantom) {
      prevSibling.push((0, _everCangjie.createTextWithString)(''), code, (0, _everCangjie.createTextWithString)(''));
    } // 否则判断父节点时否是paragraph，如果是，将code加入到父节点里
    else if (_everUtils.paragraphTags[parentTagName]) {
        prevSibling ? parent.push(code, (0, _everCangjie.createTextWithString)('')) : parent.push((0, _everCangjie.createTextWithString)(''), code, (0, _everCangjie.createTextWithString)(''));
      } else {
        // 兜底，如果上一个兄弟节点不存在，或父节点不为paragraph，则创建一个 phantom 节点
        const phantom = ['p', (0, _everCangjie.createTextWithString)(''), code, (0, _everCangjie.createTextWithString)('')];
        phantom.isPhantom = true;
        state.append(phantom);
      }

    return true;
  }

};
exports.default = _default;
//# sourceMappingURL=htmlToJsonML.js.map