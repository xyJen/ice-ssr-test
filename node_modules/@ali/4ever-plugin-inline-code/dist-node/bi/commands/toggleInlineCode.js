"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toggleInlineCode;

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireDefault(require("../../mo/models"));

var _toggleInlineCodeMark = _interopRequireDefault(require("../../oldInlineCode/commands/toggleInlineCodeMark"));

var _hasInlineOrInlineCodeMark = _interopRequireDefault(require("../utils/hasInlineOrInlineCodeMark"));

function toggleInlineCode(controller) {
  const {
    value
  } = controller;
  const {
    selection,
    document
  } = value;
  const {
    isCollapsed
  } = selection;
  if (!selection) return controller; // 选区覆盖的位置为存量旧版 inline code，则取消其 mark

  if (controller.query('isOldInlineCode')) {
    return controller.command(_toggleInlineCodeMark.default);
  }

  const isNewInlineCode = controller.query('isInlineCode'); // 选区在新版 inlineCode 中

  if (isNewInlineCode) {
    return controller.command(_everCangjie.Commands.unwrapInline, {
      type: _models.default.TYPE
    });
  } // expanded 选区 + 不包含任何 inlneCode 元素


  if (!isCollapsed && !isNewInlineCode && !(0, _hasInlineOrInlineCodeMark.default)(controller)) {
    return controller.command(_everCangjie.Commands.wrapInline, {
      type: _models.default.TYPE
    }).command(_everCangjie.Commands.moveToEndOfInline);
  }

  return controller;
}
//# sourceMappingURL=toggleInlineCode.js.map