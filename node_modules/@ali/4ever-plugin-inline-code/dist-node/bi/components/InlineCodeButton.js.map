{"version":3,"sources":["../../../../src/bi/components/InlineCodeButton.tsx"],"names":["MOD","environment","IS_MAC","ToolbarButton","props","controller","locale","rest","handleClick","React","useCallback","run","isInlineCode","query","isDisabled","buttonTitle","text","space","InlineCodeRole","inlineCode","memo"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;uBAL4B,a;AAgB5B,MAAMA,GAAG,GAAGC,yBAAYC,MAAZ,GAAqB,GAArB,GAA2B,MAAvC;;wBA+BY,eAAC,uBAAD,O;;AA7BZ,MAAMC,aAA2C,GAAIC,KAAD,IAAW;AAC7D,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsB,OAAGC;AAAzB,MAAkCH,KAAxC;AAEA,QAAMI,WAAW,GAAGC,KAAK,CAACC,WAAN,CAAkB,MAAM;AAC1CL,IAAAA,UAAU,CAACM,GAAX,CAAe,UAAf,EAA2B,gCAA3B;AACD,GAFmB,EAEjB,CAACN,UAAD,CAFiB,CAApB;AAIA,QAAMO,YAAY,GAAGP,UAAU,CAACQ,KAAX,CAAiB,cAAjB,CAArB;AAEA,QAAMC,UAAU,GAAGT,UAAU,CAACQ,KAAX,CAAiB,oBAAjB,KACdR,UAAU,CAACQ,KAAX,CAAiB,iBAAjB,CADc,IAEdR,UAAU,CAACQ,KAAX,CAAiB,sBAAjB,CAFc,IAGdR,UAAU,CAACQ,KAAX,CAAiB,mBAAjB,CAHc,IAIdR,UAAU,CAACQ,KAAX,CAAiB,yBAAjB,CAJc,IAKdR,UAAU,CAACQ,KAAX,CAAiB,uBAAjB,CALc,IAMb,CAACD,YAAD,IAAiB,wCAA0BP,UAA1B,CANvB;AASA,sBACE,eAAC,qBAAD,6BACME,IADN;AAEE,IAAA,QAAQ,EAAEO,UAFZ;AAGE,IAAA,KAAK,EAAER,MAAM,EAAES,WAAR,IAAuB,aAHhC;AAIE,IAAA,OAAO,eAAE,eAAC,iCAAD;AACP,MAAA,KAAK,EAAET,MAAM,EAAES,WAAR,IAAuB,aADvB;AAEP,MAAA,QAAQ,EAAG,GAAEf,GAAI,IAFV;AAGP,MAAA,WAAW,EAAG,eAAeM,MAAM,EAAEU,IAAR,IAAgB,MAAQ,MAAMV,MAAM,EAAEW,KAAR,IAAiB,OAAS;AAH9E,MAJX;AASE,IAAA,MAAM,EAAC,wBATT;AAUE,IAAA,IAAI,MAVN;AAWE,IAAA,OAAO,EAAET,WAXX;AAYE,IAAA,IAAI,EAAEU,qBAAeC,UAZvB;AAaE,IAAA,MAAM,EAAEP;AAbV,KADF;AAiBD,CAnCD;;4BAqCeH,KAAK,CAACW,IAAN,CAAWjB,aAAX,C","sourcesContent":["import * as React from 'react';\nimport { Controller, environment } from '@ali/4ever-cangjie';\nimport { IconButton as Button } from '@ali/we-toolbar';\nimport { IconCode, IconButtonShortcut } from '@ali/4ever-component';\nimport { toggleInlineCode } from '../actions';\nimport { InlineCodeRole } from '../../role';\nimport hasInlineOrInlineCodeMark from '../utils/hasInlineOrInlineCodeMark';\n\nexport interface ToolbarButtonProps {\n  controller: Controller;\n  locale?: {\n    buttonTitle?: string;\n    space?: string;\n    text?: string;\n  };\n}\n\nconst MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';\n\nconst ToolbarButton: React.FC<ToolbarButtonProps> = (props) => {\n  const { controller, locale, ...rest } = props;\n\n  const handleClick = React.useCallback(() => {\n    controller.run('onAction', toggleInlineCode());\n  }, [controller]);\n\n  const isInlineCode = controller.query('isInlineCode');\n\n  const isDisabled = controller.query('isSelectionInImage')\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInMention')\n    || controller.query('isSelectionInLink')\n    || controller.query('isSelectionInListSymbol')\n    || controller.query('isSelectionInLinkCard')\n    || (!isInlineCode && hasInlineOrInlineCodeMark(controller));\n\n\n  return (\n    <Button\n      {...rest}\n      disabled={isDisabled}\n      title={locale?.buttonTitle || 'Inline code'}\n      tooltip={<IconButtonShortcut\n        title={locale?.buttonTitle || 'Inline code'}\n        shortcut={`${MOD}+e`}\n        description={`Markdown: \\`${(locale?.text || 'Text')}\\` ${(locale?.space || 'Space')}`}\n      />}\n      testid=\"bi-toolbar-inline-code\"\n      icon={<IconCode />}\n      onClick={handleClick}\n      role={InlineCodeRole.inlineCode}\n      active={isInlineCode}\n    />\n  );\n};\n\nexport default React.memo(ToolbarButton);\n"],"file":"InlineCodeButton.js"}