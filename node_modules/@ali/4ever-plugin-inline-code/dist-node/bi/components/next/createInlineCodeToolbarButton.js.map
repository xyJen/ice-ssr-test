{"version":3,"sources":["../../../../../src/bi/components/next/createInlineCodeToolbarButton.tsx"],"names":["handleClick","controller","run","MOD","environment","IS_MAC","createInlineCodeButton","props","locale","icon","title","tooltip","badgeDot","disabled","isInlineCode","query","isDisabled","buttonConfig","onClick","buttonTitle","shortCut","description","text","space","role","InlineCodeRole","inlineCode","testid","active"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;uBAN4B,a;;AAa5B,MAAMA,WAAW,GAAIC,UAAD,IAA4B;AAC9CA,EAAAA,UAAU,CAACC,GAAX,CAAe,UAAf,EAA2B,gCAA3B;AACD,CAFD;;AAIA,MAAMC,GAAG,GAAGC,yBAAYC,MAAZ,GAAqB,GAArB,GAA2B,MAAvC;;wBAiBkB,eAAC,uBAAD,O;;AAfH,SAASC,sBAAT,CAAgCC,KAAhC,EAA6E;AAC1F,QAAM;AAAEN,IAAAA,UAAF;AAAcO,IAAAA,MAAd;AAAsBC,IAAAA,IAAtB;AAA4BC,IAAAA,KAA5B;AAAmCC,IAAAA,OAAnC;AAA4CC,IAAAA,QAA5C;AAAsDC,IAAAA;AAAtD,MAAmEN,KAAzE;AACA,QAAMO,YAAY,GAAGb,UAAU,CAACc,KAAX,CAAiB,cAAjB,CAArB;AAEA,QAAMC,UAAU,GAAGH,QAAQ,IACtBZ,UAAU,CAACc,KAAX,CAAiB,oBAAjB,CADc,IAEdd,UAAU,CAACc,KAAX,CAAiB,iBAAjB,CAFc,IAGdd,UAAU,CAACc,KAAX,CAAiB,sBAAjB,CAHc,IAIdd,UAAU,CAACc,KAAX,CAAiB,mBAAjB,CAJc,IAKdd,UAAU,CAACc,KAAX,CAAiB,yBAAjB,CALc,IAMdd,UAAU,CAACc,KAAX,CAAiB,uBAAjB,CANc,IAOb,CAACD,YAAD,IAAiB,wCAA0Bb,UAA1B,CAPvB;AAUA,QAAMgB,YAA0B,GAAI;AAClCR,IAAAA,IAAI,EAAEA,IAAI,QADwB;AAElCS,IAAAA,OAAO,EAAElB,WAFyB;AAGlCU,IAAAA,KAAK,EAAEA,KAAK,IAAIF,MAAM,EAAEW,WAHU;AAIlCR,IAAAA,OAAO,EAAE;AACPD,MAAAA,KAAK,EAAEA,KAAK,IAAIF,MAAM,EAAEW,WADjB;AAEPC,MAAAA,QAAQ,EAAG,GAAEjB,GAAI,IAFV;AAGPkB,MAAAA,WAAW,EAAG,eAAeb,MAAM,EAAEc,IAAR,IAAgB,MAAQ,MAAMd,MAAM,EAAEe,KAAR,IAAiB,OAAS,EAH9E;AAIP,SAAGZ;AAJI,KAJyB;AAUlCC,IAAAA,QAVkC;AAWlCC,IAAAA,QAAQ,EAAEG,UAXwB;AAYlCQ,IAAAA,IAAI,EAAEC,qBAAeC,UAZa;AAalCC,IAAAA,MAAM,EAAE,wBAb0B;AAclCC,IAAAA,MAAM,EAAEd;AAd0B,GAApC;AAiBA,SAAOG,YAAP;AAED","sourcesContent":["import * as React from 'react';\nimport { IBasicButton, IToolbarButtonConfig, IconCode } from '@ali/4ever-component';\nimport { InlineCodeRole } from '../../../role';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { toggleInlineCode } from '../../actions';\nimport { IInlineCodeConfigs } from '../../types';\nimport { environment } from '@ali/4ever-cangjie';\nimport hasInlineOrInlineCodeMark from '../../utils/hasInlineOrInlineCodeMark';\n\nexport interface IInlineCodeButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  locale?: IInlineCodeConfigs['locale'];\n}\n\nconst handleClick = (controller: Controller) => {\n  controller.run('onAction', toggleInlineCode());\n};\n\nconst MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';\n\nexport default function createInlineCodeButton(props: IInlineCodeButtonProps): IBasicButton {\n  const { controller, locale, icon, title, tooltip, badgeDot, disabled } = props;\n  const isInlineCode = controller.query('isInlineCode');\n\n  const isDisabled = disabled\n    || controller.query('isSelectionInImage')\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInMention')\n    || controller.query('isSelectionInLink')\n    || controller.query('isSelectionInListSymbol')\n    || controller.query('isSelectionInLinkCard')\n    || (!isInlineCode && hasInlineOrInlineCodeMark(controller));\n\n\n  const buttonConfig: IBasicButton = ({\n    icon: icon || <IconCode />,\n    onClick: handleClick,\n    title: title || locale?.buttonTitle,\n    tooltip: {\n      title: title || locale?.buttonTitle,\n      shortCut: `${MOD}+e`,\n      description: `Markdown: \\`${(locale?.text || 'Text')}\\` ${(locale?.space || 'Space')}`,\n      ...tooltip,\n    },\n    badgeDot,\n    disabled: isDisabled,\n    role: InlineCodeRole.inlineCode,\n    testid: \"bi-toolbar-inline-code\",\n    active: isInlineCode,\n  });\n\n  return buttonConfig;\n\n}\n"],"file":"createInlineCodeToolbarButton.js"}