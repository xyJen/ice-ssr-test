"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weToolbar = require("@ali/we-toolbar");

var _everComponent = require("@ali/4ever-component");

var _actions = require("../actions");

var _role = require("../../role");

var _hasInlineOrInlineCodeMark = _interopRequireDefault(require("../utils/hasInlineOrInlineCodeMark"));

const _createElement = /*#__PURE__*/React.createElement;
const MOD = _everCangjie.environment.IS_MAC ? 'âŒ˜' : 'Ctrl';

var _ref = /*#__PURE__*/_createElement(_everComponent.IconCode, null);

const ToolbarButton = props => {
  const {
    controller,
    locale,
    ...rest
  } = props;
  const handleClick = React.useCallback(() => {
    controller.run('onAction', (0, _actions.toggleInlineCode)());
  }, [controller]);
  const isInlineCode = controller.query('isInlineCode');
  const isDisabled = controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInMention') || controller.query('isSelectionInLink') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard') || !isInlineCode && (0, _hasInlineOrInlineCodeMark.default)(controller);
  return /*#__PURE__*/_createElement(_weToolbar.IconButton, (0, _extends2.default)({}, rest, {
    disabled: isDisabled,
    title: locale?.buttonTitle || 'Inline code',
    tooltip: /*#__PURE__*/_createElement(_everComponent.IconButtonShortcut, {
      title: locale?.buttonTitle || 'Inline code',
      shortcut: `${MOD}+e`,
      description: `Markdown: \`${locale?.text || 'Text'}\` ${locale?.space || 'Space'}`
    }),
    testid: "bi-toolbar-inline-code",
    icon: _ref,
    onClick: handleClick,
    role: _role.InlineCodeRole.inlineCode,
    active: isInlineCode
  }));
};

var _default = /*#__PURE__*/React.memo(ToolbarButton);

exports.default = _default;
//# sourceMappingURL=InlineCodeButton.js.map