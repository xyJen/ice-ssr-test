import { createTextWithString } from '@ali/4ever-cangjie';
import { getLastChild, getTagName, paragraphTags } from '@ali/4ever-utils';
import InlineCode from "../models";
export default {
  name: InlineCode.TYPE,
  // 对code标签进行处理
  onOpenTag: function onOpenTag(state, name, attrs) {
    if (name !== 'code') return false; // TODO 暂时不对code样式做处理，以inlineCode样式为准

    var code = [InlineCode.TYPE, {}];
    state.push(code);
    return true;
  },
  onCloseTag: function onCloseTag(state, name) {
    if (name !== 'code') return false;
    var code = state.pop();
    var parent = state.peek();
    var parentTagName = getTagName(parent);
    var prevSibling = getLastChild(parent); // 首先判断兄弟节点是否是Phantom，如果是，将code加入到兄弟节点里
    // 前后加入两个空节点，否则单测跑不过

    if (prevSibling && prevSibling.isPhantom) {
      prevSibling.push(createTextWithString(''), code, createTextWithString(''));
    } // 否则判断父节点时否是paragraph，如果是，将code加入到父节点里
    else if (paragraphTags[parentTagName]) {
        prevSibling ? parent.push(code, createTextWithString('')) : parent.push(createTextWithString(''), code, createTextWithString(''));
      } else {
        // 兜底，如果上一个兄弟节点不存在，或父节点不为paragraph，则创建一个 phantom 节点
        var phantom = ['p', createTextWithString(''), code, createTextWithString('')];
        phantom.isPhantom = true;
        state.append(phantom);
      }

    return true;
  }
};
//# sourceMappingURL=htmlToJsonML.js.map