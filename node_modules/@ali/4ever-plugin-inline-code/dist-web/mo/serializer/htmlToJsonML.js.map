{"version":3,"sources":["../../../../src/mo/serializer/htmlToJsonML.ts"],"names":["createTextWithString","getLastChild","getTagName","paragraphTags","InlineCode","name","TYPE","onOpenTag","state","attrs","code","push","onCloseTag","pop","parent","peek","parentTagName","prevSibling","isPhantom","phantom","append"],"mappings":"AAAA,SAGEA,oBAHF,QAIO,oBAJP;AAKA,SACEC,YADF,EAEEC,UAFF,EAIEC,aAJF,QAKO,kBALP;AAMA,OAAOC,UAAP;AAGA,eAAe;AACbC,EAAAA,IAAI,EAAED,UAAU,CAACE,IADJ;AAEb;AACAC,EAAAA,SAHa,qBAGHC,KAHG,EAGWH,IAHX,EAGyBI,KAHzB,EAGqD;AAChE,QAAIJ,IAAI,KAAK,MAAb,EAAqB,OAAO,KAAP,CAD2C,CAEhE;;AACA,QAAMK,IAAY,GAAG,CAACN,UAAU,CAACE,IAAZ,EAAkB,EAAlB,CAArB;AACAE,IAAAA,KAAK,CAACG,IAAN,CAAWD,IAAX;AACA,WAAO,IAAP;AACD,GATY;AAWbE,EAAAA,UAXa,sBAWFJ,KAXE,EAWYH,IAXZ,EAWmC;AAC9C,QAAIA,IAAI,KAAK,MAAb,EAAqB,OAAO,KAAP;AACrB,QAAIK,IAAI,GAAGF,KAAK,CAACK,GAAN,EAAX;AACA,QAAMC,MAAM,GAAGN,KAAK,CAACO,IAAN,EAAf;AACA,QAAMC,aAAa,GAAGd,UAAU,CAACY,MAAD,CAAhC;AACA,QAAMG,WAAW,GAAGhB,YAAY,CAACa,MAAD,CAAhC,CAL8C,CAM9C;AACA;;AACA,QAAIG,WAAW,IAAKA,WAAD,CAAyBC,SAA5C,EAAuD;AACrDD,MAAAA,WAAW,CAACN,IAAZ,CACEX,oBAAoB,CAAC,EAAD,CADtB,EAEEU,IAFF,EAGEV,oBAAoB,CAAC,EAAD,CAHtB;AAKD,KAND,CAOA;AAPA,SAQK,IAAIG,aAAa,CAACa,aAAD,CAAjB,EAAkC;AACrCC,QAAAA,WAAW,GACPH,MAAM,CAACH,IAAP,CAAYD,IAAZ,EAAkBV,oBAAoB,CAAC,EAAD,CAAtC,CADO,GAEPc,MAAM,CAACH,IAAP,CAAYX,oBAAoB,CAAC,EAAD,CAAhC,EAAsCU,IAAtC,EAA4CV,oBAAoB,CAAC,EAAD,CAAhE,CAFJ;AAGD,OAJI,MAIE;AACL;AACA,YAAMmB,OAAe,GAAG,CACtB,GADsB,EAEtBnB,oBAAoB,CAAC,EAAD,CAFE,EAGtBU,IAHsB,EAItBV,oBAAoB,CAAC,EAAD,CAJE,CAAxB;AAMCmB,QAAAA,OAAD,CAAqBD,SAArB,GAAiC,IAAjC;AACAV,QAAAA,KAAK,CAACY,MAAN,CAAaD,OAAb;AACD;;AACD,WAAO,IAAP;AACD;AA3CY,CAAf","sourcesContent":["import {\n  MoState as State,\n  MoAttributes as Attributes,\n  createTextWithString,\n} from '@ali/4ever-cangjie';\nimport {\n  getLastChild,\n  getTagName,\n  JsonML,\n  paragraphTags,\n} from '@ali/4ever-utils';\nimport InlineCode from '../models';\ntype Phantom = { isPhantom?: boolean };\n\nexport default {\n  name: InlineCode.TYPE,\n  // 对code标签进行处理\n  onOpenTag(state: State, name: string, attrs: Attributes): boolean {\n    if (name !== 'code') return false;\n    // TODO 暂时不对code样式做处理，以inlineCode样式为准\n    const code: JsonML = [InlineCode.TYPE, {}] as JsonML;\n    state.push(code);\n    return true;\n  },\n\n  onCloseTag(state: State, name: string): boolean {\n    if (name !== 'code') return false;\n    let code = state.pop();\n    const parent = state.peek();\n    const parentTagName = getTagName(parent);\n    const prevSibling = getLastChild(parent);\n    // 首先判断兄弟节点是否是Phantom，如果是，将code加入到兄弟节点里\n    // 前后加入两个空节点，否则单测跑不过\n    if (prevSibling && (prevSibling as Phantom).isPhantom) {\n      prevSibling.push(\n        createTextWithString(''),\n        code,\n        createTextWithString(''),\n      );\n    }\n    // 否则判断父节点时否是paragraph，如果是，将code加入到父节点里\n    else if (paragraphTags[parentTagName]) {\n      prevSibling\n        ? parent.push(code, createTextWithString(''))\n        : parent.push(createTextWithString(''), code, createTextWithString(''));\n    } else {\n      // 兜底，如果上一个兄弟节点不存在，或父节点不为paragraph，则创建一个 phantom 节点\n      const phantom: JsonML = [\n        'p',\n        createTextWithString(''),\n        code,\n        createTextWithString(''),\n      ];\n      (phantom as Phantom).isPhantom = true;\n      state.append(phantom);\n    }\n    return true;\n  },\n};\n"],"file":"htmlToJsonML.js"}