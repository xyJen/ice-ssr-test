{"version":3,"sources":["../../../src/bi/createRenderToolbar.tsx"],"names":["ItemKey","createInlineCodeButton","createRenderToolbar","locale","props","controller","buttonName","extraProps","inlineCode"],"mappings":";AAAA,SAAwBA,OAAxB,QAAuC,sBAAvC;AACA,OAAOC,sBAAP;AAGA,eAAe,SAASC,mBAAT,CACbC,MADa,EAEE;AAEf,SAAO,UAACC,KAAD,EAAQC,UAAR,EAAuB;AAAA,QAEpBC,UAFoB,GAEOF,KAFP,CAEpBE,UAFoB;AAAA,QAERC,UAFQ,GAEOH,KAFP,CAERG,UAFQ;;AAI5B,QAAID,UAAU,KAAKN,OAAO,CAACQ,UAA3B,EAAuC;AACrC,aAAOP,sBAAsB;AAC3BI,QAAAA,UAAU,EAAVA,UAD2B;AAE3BF,QAAAA,MAAM,EAANA;AAF2B,SAGxBI,UAHwB,EAA7B;AAKD;;AAED,WAAO,IAAP;AACD,GAbD;AAcD","sourcesContent":["import { RenderToolbar, ItemKey } from '@ali/4ever-component';\nimport createInlineCodeButton from './components/next/createInlineCodeToolbarButton';\nimport { ILocale } from './types';\n\nexport default function createRenderToolbar(\n  locale?: ILocale,\n): RenderToolbar {\n\n  return (props, controller) => {\n\n    const { buttonName, extraProps } = props;\n\n    if (buttonName === ItemKey.inlineCode) {\n      return createInlineCodeButton({\n        controller,\n        locale,\n        ...extraProps,\n      });\n    }\n\n    return null\n  };\n}\n"],"file":"createRenderToolbar.js"}