import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { IconCode } from '@ali/4ever-component';
import { InlineCodeRole } from "../../../role";
import { toggleInlineCode } from "../../actions";
import { environment } from '@ali/4ever-cangjie';
import hasInlineOrInlineCodeMark from "../../utils/hasInlineOrInlineCodeMark";

var handleClick = function handleClick(controller) {
  controller.run('onAction', toggleInlineCode());
};

var MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';

var _ref = /*#__PURE__*/_createElement(IconCode, null);

export default function createInlineCodeButton(props) {
  var controller = props.controller,
      locale = props.locale,
      icon = props.icon,
      title = props.title,
      tooltip = props.tooltip,
      badgeDot = props.badgeDot,
      disabled = props.disabled;
  var isInlineCode = controller.query('isInlineCode');
  var isDisabled = disabled || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInMention') || controller.query('isSelectionInLink') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard') || !isInlineCode && hasInlineOrInlineCodeMark(controller);
  var buttonConfig = {
    icon: icon || _ref,
    onClick: handleClick,
    title: title || (locale == null ? void 0 : locale.buttonTitle),
    tooltip: _extends({
      title: title || (locale == null ? void 0 : locale.buttonTitle),
      shortCut: MOD + "+e",
      description: "Markdown: `" + ((locale == null ? void 0 : locale.text) || 'Text') + "` " + ((locale == null ? void 0 : locale.space) || 'Space')
    }, tooltip),
    badgeDot: badgeDot,
    disabled: isDisabled,
    role: InlineCodeRole.inlineCode,
    testid: "bi-toolbar-inline-code",
    active: isInlineCode
  };
  return buttonConfig;
}
//# sourceMappingURL=createInlineCodeToolbarButton.js.map