{"version":3,"sources":["../../../../src/bi/components/InlineCodeButton.tsx"],"names":["React","environment","IconButton","Button","IconCode","IconButtonShortcut","toggleInlineCode","InlineCodeRole","hasInlineOrInlineCodeMark","MOD","IS_MAC","ToolbarButton","props","controller","locale","rest","handleClick","useCallback","run","isInlineCode","query","isDisabled","buttonTitle","text","space","inlineCode","memo"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAAqBC,WAArB,QAAwC,oBAAxC;AACA,SAASC,UAAU,IAAIC,MAAvB,QAAqC,iBAArC;AACA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,sBAA7C;AACA,SAASC,gBAAT;AACA,SAASC,cAAT;AACA,OAAOC,yBAAP;AAWA,IAAMC,GAAG,GAAGR,WAAW,CAACS,MAAZ,GAAqB,GAArB,GAA2B,MAAvC;;wBA+BY,eAAC,QAAD,O;;AA7BZ,IAAMC,aAA2C,GAAG,SAA9CA,aAA8C,CAACC,KAAD,EAAW;AAAA,MACrDC,UADqD,GACrBD,KADqB,CACrDC,UADqD;AAAA,MACzCC,MADyC,GACrBF,KADqB,CACzCE,MADyC;AAAA,MAC9BC,IAD8B,iCACrBH,KADqB;;AAG7D,MAAMI,WAAW,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,YAAM;AAC1CJ,IAAAA,UAAU,CAACK,GAAX,CAAe,UAAf,EAA2BZ,gBAAgB,EAA3C;AACD,GAFmB,EAEjB,CAACO,UAAD,CAFiB,CAApB;AAIA,MAAMM,YAAY,GAAGN,UAAU,CAACO,KAAX,CAAiB,cAAjB,CAArB;AAEA,MAAMC,UAAU,GAAGR,UAAU,CAACO,KAAX,CAAiB,oBAAjB,KACdP,UAAU,CAACO,KAAX,CAAiB,iBAAjB,CADc,IAEdP,UAAU,CAACO,KAAX,CAAiB,sBAAjB,CAFc,IAGdP,UAAU,CAACO,KAAX,CAAiB,mBAAjB,CAHc,IAIdP,UAAU,CAACO,KAAX,CAAiB,yBAAjB,CAJc,IAKdP,UAAU,CAACO,KAAX,CAAiB,uBAAjB,CALc,IAMb,CAACD,YAAD,IAAiBX,yBAAyB,CAACK,UAAD,CANhD;AASA,sBACE,eAAC,MAAD,eACME,IADN;AAEE,IAAA,QAAQ,EAAEM,UAFZ;AAGE,IAAA,KAAK,EAAE,CAAAP,MAAM,QAAN,YAAAA,MAAM,CAAEQ,WAAR,KAAuB,aAHhC;AAIE,IAAA,OAAO,eAAE,eAAC,kBAAD;AACP,MAAA,KAAK,EAAE,CAAAR,MAAM,QAAN,YAAAA,MAAM,CAAEQ,WAAR,KAAuB,aADvB;AAEP,MAAA,QAAQ,EAAKb,GAAL,OAFD;AAGP,MAAA,WAAW,mBAAkB,CAAAK,MAAM,QAAN,YAAAA,MAAM,CAAES,IAAR,KAAgB,MAAlC,YAAgD,CAAAT,MAAM,QAAN,YAAAA,MAAM,CAAEU,KAAR,KAAiB,OAAjE;AAHJ,MAJX;AASE,IAAA,MAAM,EAAC,wBATT;AAUE,IAAA,IAAI,MAVN;AAWE,IAAA,OAAO,EAAER,WAXX;AAYE,IAAA,IAAI,EAAET,cAAc,CAACkB,UAZvB;AAaE,IAAA,MAAM,EAAEN;AAbV,KADF;AAiBD,CAnCD;;AAqCA,4BAAenB,KAAK,CAAC0B,IAAN,CAAWf,aAAX,CAAf","sourcesContent":["import * as React from 'react';\nimport { Controller, environment } from '@ali/4ever-cangjie';\nimport { IconButton as Button } from '@ali/we-toolbar';\nimport { IconCode, IconButtonShortcut } from '@ali/4ever-component';\nimport { toggleInlineCode } from '../actions';\nimport { InlineCodeRole } from '../../role';\nimport hasInlineOrInlineCodeMark from '../utils/hasInlineOrInlineCodeMark';\n\nexport interface ToolbarButtonProps {\n  controller: Controller;\n  locale?: {\n    buttonTitle?: string;\n    space?: string;\n    text?: string;\n  };\n}\n\nconst MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';\n\nconst ToolbarButton: React.FC<ToolbarButtonProps> = (props) => {\n  const { controller, locale, ...rest } = props;\n\n  const handleClick = React.useCallback(() => {\n    controller.run('onAction', toggleInlineCode());\n  }, [controller]);\n\n  const isInlineCode = controller.query('isInlineCode');\n\n  const isDisabled = controller.query('isSelectionInImage')\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInMention')\n    || controller.query('isSelectionInLink')\n    || controller.query('isSelectionInListSymbol')\n    || controller.query('isSelectionInLinkCard')\n    || (!isInlineCode && hasInlineOrInlineCodeMark(controller));\n\n\n  return (\n    <Button\n      {...rest}\n      disabled={isDisabled}\n      title={locale?.buttonTitle || 'Inline code'}\n      tooltip={<IconButtonShortcut\n        title={locale?.buttonTitle || 'Inline code'}\n        shortcut={`${MOD}+e`}\n        description={`Markdown: \\`${(locale?.text || 'Text')}\\` ${(locale?.space || 'Space')}`}\n      />}\n      testid=\"bi-toolbar-inline-code\"\n      icon={<IconCode />}\n      onClick={handleClick}\n      role={InlineCodeRole.inlineCode}\n      active={isInlineCode}\n    />\n  );\n};\n\nexport default React.memo(ToolbarButton);\n"],"file":"InlineCodeButton.js"}