import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment } from '@ali/4ever-cangjie';
import { IconButton as Button } from '@ali/we-toolbar';
import { IconCode, IconButtonShortcut } from '@ali/4ever-component';
import { toggleInlineCode } from "../actions";
import { InlineCodeRole } from "../../role";
import hasInlineOrInlineCodeMark from "../utils/hasInlineOrInlineCodeMark";
var MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';

var _ref = /*#__PURE__*/_createElement(IconCode, null);

var ToolbarButton = function ToolbarButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var handleClick = React.useCallback(function () {
    controller.run('onAction', toggleInlineCode());
  }, [controller]);
  var isInlineCode = controller.query('isInlineCode');
  var isDisabled = controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInMention') || controller.query('isSelectionInLink') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard') || !isInlineCode && hasInlineOrInlineCodeMark(controller);
  return /*#__PURE__*/_createElement(Button, _extends({}, rest, {
    disabled: isDisabled,
    title: (locale == null ? void 0 : locale.buttonTitle) || 'Inline code',
    tooltip: /*#__PURE__*/_createElement(IconButtonShortcut, {
      title: (locale == null ? void 0 : locale.buttonTitle) || 'Inline code',
      shortcut: MOD + "+e",
      description: "Markdown: `" + ((locale == null ? void 0 : locale.text) || 'Text') + "` " + ((locale == null ? void 0 : locale.space) || 'Space')
    }),
    testid: "bi-toolbar-inline-code",
    icon: _ref,
    onClick: handleClick,
    role: InlineCodeRole.inlineCode,
    active: isInlineCode
  }));
};

export default /*#__PURE__*/React.memo(ToolbarButton);
//# sourceMappingURL=InlineCodeButton.js.map