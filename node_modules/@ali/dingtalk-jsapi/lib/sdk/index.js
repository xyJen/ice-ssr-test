"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sdk = exports.LogLevel = exports.APP_TYPE = exports.isFunction = exports.compareVersion = exports.ENV_ENUM_SUB = exports.ENV_ENUM = void 0;
var sdkLib_1 = require("./sdkLib");
Object.defineProperty(exports, "APP_TYPE", { enumerable: true, get: function () { return sdkLib_1.APP_TYPE; } });
Object.defineProperty(exports, "LogLevel", { enumerable: true, get: function () { return sdkLib_1.LogLevel; } });
Object.defineProperty(exports, "isFunction", { enumerable: true, get: function () { return sdkLib_1.isFunction; } });
Object.defineProperty(exports, "compareVersion", { enumerable: true, get: function () { return sdkLib_1.compareVersion; } });
Object.defineProperty(exports, "ENV_ENUM", { enumerable: true, get: function () { return sdkLib_1.ENV_ENUM; } });
Object.defineProperty(exports, "ENV_ENUM_SUB", { enumerable: true, get: function () { return sdkLib_1.ENV_ENUM_SUB; } });
function getTargetApiConfigVS(apiConfig, env) {
    var targetVersion = apiConfig && apiConfig.vs;
    if (typeof targetVersion === 'object') {
        targetVersion = targetVersion[env.platformSub];
    }
    return targetVersion;
}
var Sdk = /** @class */ (function () {
    function Sdk(env, logFn) {
        var _this = this;
        this.configJsApiList = [];
        this.hadConfig = false;
        this.p = {};
        this.config$ = new Promise(function (resolve, reject) {
            _this.p.reject = reject;
            _this.p.resolve = resolve;
        });
        this.logQueue = [];
        this.devConfig = {
            debug: false,
        };
        this.platformConfigMap = {};
        this.invokeAPIConfigMapByMethod = {};
        this.isBridgeDrity = true;
        this.getExportSdk = function () {
            return _this.exportSdk;
        };
        this.setAPI = function (method, config) {
            _this.invokeAPIConfigMapByMethod[method] = config;
        };
        this.setPlatform = function (core) {
            _this.isBridgeDrity = true;
            _this.platformConfigMap[core.platform] = core;
            if (core.platform === _this.env.platform) {
                core.bridgeInit().catch(function (err) {
                    _this.customLog(sdkLib_1.LogLevel.WARNING, ['auto bridgeInit error', err || '']);
                });
            }
        };
        this.getPlatformConfigMap = function () {
            return _this.platformConfigMap;
        };
        this.deleteApiConfig = function (method, platform) {
            var invokeAPIConfig = _this.invokeAPIConfigMapByMethod[method];
            if (invokeAPIConfig) {
                delete invokeAPIConfig[platform];
            }
        };
        this.invokeAPI = function (method, params, isAuthApi) {
            if (params === void 0) { params = {}; }
            if (isAuthApi === void 0) { isAuthApi = true; }
            _this.customLog(sdkLib_1.LogLevel.INFO, ["==> \"" + method + "\" params: ", params]);
            var startTime = +new Date();
            var invokeId = startTime + '_' + Math.floor(Math.random() * 1000);
            if (_this.devConfig.onBeforeInvokeAPI) {
                try {
                    _this.devConfig.onBeforeInvokeAPI({
                        invokeId: invokeId,
                        method: method,
                        params: params,
                        startTime: startTime,
                    });
                }
                catch (err) {
                    _this.customLog(sdkLib_1.LogLevel.ERROR, ["call Hook:onBeforeInvokeAPI failed, reason:", err]);
                }
            }
            if (_this.devConfig.isAuthApi === false) {
                isAuthApi = false;
            }
            return _this.bridgeInitFn().then(function (JSBridge) {
                var invokeAPIConfig = _this.invokeAPIConfigMapByMethod[method];
                // 判断是否强制开启兼容处理
                var isForceEnableDealApi = _this.devConfig.forceEnableDealApiFnMap
                    && _this.devConfig.forceEnableDealApiFnMap[method]
                    && _this.devConfig.forceEnableDealApiFnMap[method](params) === true;
                var isDisableCurrentApiDeal = !isForceEnableDealApi &&
                    (_this.devConfig.isDisableDeal === true
                        || (_this.devConfig.disbaleDealApiWhiteList
                            && _this.devConfig.disbaleDealApiWhiteList.indexOf(method) !== -1));
                if (invokeAPIConfig || !isAuthApi) {
                    var apiConfig_1;
                    if (invokeAPIConfig) {
                        apiConfig_1 = invokeAPIConfig[_this.env.platform];
                    }
                    if (apiConfig_1 || !isAuthApi) {
                        var callParams_1 = {};
                        if (!isDisableCurrentApiDeal
                            && apiConfig_1 && apiConfig_1.paramsDeal && sdkLib_1.isFunction(apiConfig_1.paramsDeal)) {
                            callParams_1 = apiConfig_1.paramsDeal(params);
                        }
                        else {
                            callParams_1 = Object.assign({}, params);
                        }
                        var resultDealFn_1 = function (res) {
                            if (!isDisableCurrentApiDeal
                                && apiConfig_1 && apiConfig_1.resultDeal && sdkLib_1.isFunction(apiConfig_1.resultDeal)) {
                                return apiConfig_1.resultDeal(res);
                            }
                            else {
                                return res;
                            }
                        };
                        if (sdkLib_1.isFunction(callParams_1.onSuccess)) {
                            var callParamsOnSuccess_1 = callParams_1.onSuccess;
                            callParams_1.onSuccess = function (res) {
                                callParamsOnSuccess_1(resultDealFn_1(res));
                            };
                        }
                        return JSBridge(method, callParams_1).then(resultDealFn_1, function (err) {
                            var isConfiging = _this.hadConfig && _this.isReady === undefined
                                && _this.configJsApiList.indexOf(method) !== -1;
                            var isNoPermissionErr = (typeof err === 'object' && typeof err.errorCode === 'string'
                                && err.errorCode === sdkLib_1.ERROR_CODE.no_permission);
                            var isCancelErr = (typeof err === 'object' && typeof err.errorCode === 'string'
                                && err.errorCode === sdkLib_1.ERROR_CODE.cancel);
                            var targetVersionForSupport = getTargetApiConfigVS(apiConfig_1, _this.env);
                            var isSupportByStaticData = (targetVersionForSupport && _this.env.version
                                && sdkLib_1.compareVersion(_this.env.version, targetVersionForSupport));
                            // 移动端判断
                            var mobileJudgeIsRetry = (_this.env.platform === sdkLib_1.ENV_ENUM.ios || _this.env.platform === sdkLib_1.ENV_ENUM.android) &&
                                isConfiging &&
                                isNoPermissionErr;
                            // pc端判断（需要兼容老版本），jsapi支持当前平台 且 在config流程中 且 isAuthApi 且不是 -1取消错误
                            var pcJudgeIsRetry = _this.env.platform === sdkLib_1.ENV_ENUM.pc && isConfiging && ((isSupportByStaticData
                                && !isCancelErr
                                && isAuthApi) || isNoPermissionErr);
                            if (mobileJudgeIsRetry || pcJudgeIsRetry) {
                                return _this.config$.then(function () {
                                    return JSBridge(method, callParams_1).then(resultDealFn_1);
                                });
                            }
                            else {
                                return Promise.reject(err);
                            }
                        }).then(function (res) {
                            if (_this.devConfig.onAfterInvokeAPI) {
                                try {
                                    _this.devConfig.onAfterInvokeAPI({
                                        invokeId: invokeId,
                                        method: method,
                                        params: params,
                                        payload: res,
                                        isSuccess: true,
                                        startTime: startTime,
                                        duration: (+new Date()) - startTime,
                                    });
                                }
                                catch (err) {
                                    _this.customLog(sdkLib_1.LogLevel.ERROR, ["call Hook:onAfterInvokeAPI failed, reason:", err]);
                                }
                            }
                            _this.customLog(sdkLib_1.LogLevel.INFO, ["<== \"" + method + "\" success result: ", res]);
                            return res;
                        }, function (err) {
                            if (_this.devConfig.onAfterInvokeAPI) {
                                try {
                                    _this.devConfig.onAfterInvokeAPI({
                                        invokeId: invokeId,
                                        method: method,
                                        params: params,
                                        payload: err,
                                        startTime: startTime,
                                        duration: (+new Date()) - startTime,
                                        isSuccess: false,
                                    });
                                }
                                catch (err) {
                                    _this.customLog(sdkLib_1.LogLevel.ERROR, ["call Hook:onAfterInvokeAPI failed, reason:", err]);
                                }
                            }
                            _this.customLog(sdkLib_1.LogLevel.WARNING, ["<== \"" + method + "\" fail result: ", err]);
                            return Promise.reject(err);
                        });
                    }
                    else {
                        var errorMessage = "\"" + method + "\" do not support the current platform (" + _this.env.platform + ")";
                        _this.customLog(sdkLib_1.LogLevel.ERROR, [errorMessage]);
                        return Promise.reject({
                            errorCode: sdkLib_1.ERROR_CODE.jsapi_internal_error,
                            errorMessage: errorMessage,
                        });
                    }
                }
                else {
                    var errorMessage = "This API method is not configured for the platform (" + _this.env.platform + ")";
                    _this.customLog(sdkLib_1.LogLevel.ERROR, [errorMessage]);
                    return Promise.reject({
                        errorCode: sdkLib_1.ERROR_CODE.jsapi_internal_error,
                        errorMessage: errorMessage,
                    });
                }
            });
        };
        this.isLogQueueTimeout = false;
        this.customLog = function (level, text) {
            var newLogObj = {
                level: level,
                text: text,
                time: new Date(),
            };
            if (_this.devConfig.debug === true) {
                _this.customLogInstance(newLogObj);
            }
            else if (!_this.isLogQueueTimeout) {
                // 此时用户可能还来不及设置 devConfig.debug = true，为用户缓存日志
                // 设置 timer，在 10s 后清空缓存，避免内存泄漏
                if (!_this.logQueueTimer) {
                    _this.logQueueTimer = setTimeout(function () {
                        _this.isLogQueueTimeout = true;
                        _this.logQueue = [];
                    }, 10000);
                }
                _this.logQueue.push(newLogObj);
                var MAX_CACHE_LOG = 10;
                if (_this.logQueue.length > MAX_CACHE_LOG) {
                    _this.logQueue = _this.logQueue.slice(_this.logQueue.length - MAX_CACHE_LOG);
                }
            }
        };
        this.clearLogQueue = function () {
            _this.logQueue.forEach(function (logObj) {
                _this.customLogInstance(logObj);
            });
            _this.logQueue = [];
        };
        this.customLogInstance = logFn;
        this.env = env;
        this.bridgeInitFn = function () {
            if (_this.bridgeInitFnPromise && !_this.isBridgeDrity) {
                return _this.bridgeInitFnPromise;
            }
            else {
                _this.isBridgeDrity = false;
                var platformCore = _this.platformConfigMap[env.platform];
                if (platformCore) {
                    _this.bridgeInitFnPromise = platformCore.bridgeInit().catch(function (err) {
                        _this.customLog(sdkLib_1.LogLevel.ERROR, ['JsBridge initialization fails, jsapi will not work']);
                        return Promise.reject(err);
                    });
                }
                else {
                    var errMsg = "Do not support the current environment\uFF1A" + env.platform;
                    _this.customLog(sdkLib_1.LogLevel.WARNING, [errMsg]);
                    _this.bridgeInitFnPromise = Promise.reject(new Error(errMsg));
                }
                return _this.bridgeInitFnPromise;
            }
        };
        var devConfig = function (devConfigParams) {
            if (devConfigParams === void 0) { devConfigParams = {}; }
            _this.devConfig = Object.assign(_this.devConfig, devConfigParams);
            if (devConfigParams.debug === true) {
                _this.clearLogQueue();
            }
            if (devConfigParams.extraPlatform) {
                _this.setPlatform(devConfigParams.extraPlatform);
            }
        };
        this.exportSdk = {
            config: function (configParams) {
                if (configParams === void 0) { configParams = {}; }
                /** TODO: compatible */
                var isOnlyDevConfig = true;
                Object.keys(configParams).forEach(function (key) {
                    if (['debug', 'usePromise'].indexOf(key) === -1) {
                        isOnlyDevConfig = false;
                    }
                });
                if (isOnlyDevConfig) {
                    _this.customLog(sdkLib_1.LogLevel.WARNING, ['This is a deprecated feature, recommend use dd.devConfig']);
                    devConfig(configParams);
                }
                else {
                    if (!_this.hadConfig) {
                        if (configParams.jsApiList) {
                            _this.configJsApiList = configParams.jsApiList;
                        }
                        _this.hadConfig = true;
                        _this.bridgeInitFn().then(function (JSBridge) {
                            var platformCore = _this.platformConfigMap[env.platform];
                            var inConfigParams = configParams;
                            if (platformCore.authParamsDeal) {
                                inConfigParams = platformCore.authParamsDeal(inConfigParams);
                            }
                            JSBridge(platformCore.authMethod, inConfigParams).then(function (res) {
                                _this.isReady = true;
                                _this.p.resolve(res);
                            }).catch(function (err) {
                                _this.isReady = false;
                                _this.p.reject(err);
                            });
                        }, function (err) {
                            _this.customLog(sdkLib_1.LogLevel.ERROR, ['JsBridge initialization failed and "dd.config" failed to call']);
                            // SEE: https://work.aone.alibaba-inc.com/issue/29105600
                            _this.p.reject(err);
                        });
                    }
                    else {
                        _this.customLog(sdkLib_1.LogLevel.WARNING, ['Config has been executed']);
                    }
                }
            },
            devConfig: devConfig,
            ready: function (callback) {
                /** TODO: compatible */
                if (_this.hadConfig === false) {
                    _this.customLog(sdkLib_1.LogLevel.WARNING, ['You don \'t use a dd.config, '
                            + 'so you don\'t need to wrap dd.ready, recommend remove dd.ready']);
                    _this.bridgeInitFn().then(function () {
                        callback();
                    });
                }
                else {
                    _this.config$.then(function (res) {
                        callback();
                    });
                }
            },
            error: function (callback) {
                _this.config$.catch(function (res) {
                    callback(res);
                });
            },
            on: function (type, handler) {
                _this.bridgeInitFn().then(function () {
                    var platformCore = _this.platformConfigMap[env.platform];
                    platformCore.event.on(type, handler);
                });
            },
            off: function (type, handler) {
                _this.bridgeInitFn().then(function () {
                    var platformCore = _this.platformConfigMap[env.platform];
                    platformCore.event.off(type, handler);
                });
            },
            env: env,
            checkJsApi: function (params) {
                if (params === void 0) { params = {}; }
                var res = {};
                if (params.jsApiList) {
                    params.jsApiList.forEach(function (method) {
                        var invokeAPIConfig = _this.invokeAPIConfigMapByMethod[method];
                        if (invokeAPIConfig) {
                            var apiConfig = invokeAPIConfig[env.platform];
                            var targetVersion = getTargetApiConfigVS(apiConfig, env);
                            if (targetVersion
                                && env.version
                                && sdkLib_1.compareVersion(env.version, targetVersion)) {
                                res[method] = true;
                            }
                        }
                        if (!res[method]) {
                            res[method] = false;
                        }
                    });
                }
                return Promise.resolve(res);
            },
            _invoke: function (method, params) {
                if (params === void 0) { params = {}; }
                return _this.invokeAPI(method, params, false);
            },
        };
    }
    return Sdk;
}());
exports.Sdk = Sdk;
