"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getENV = exports.getUA = exports.ENV_ENUM_SUB = exports.APP_TYPE = exports.ENV_ENUM = void 0;
var sdk_1 = require("./sdk");
var sdk_2 = require("./sdk");
Object.defineProperty(exports, "ENV_ENUM", { enumerable: true, get: function () { return sdk_2.ENV_ENUM; } });
Object.defineProperty(exports, "APP_TYPE", { enumerable: true, get: function () { return sdk_2.APP_TYPE; } });
Object.defineProperty(exports, "ENV_ENUM_SUB", { enumerable: true, get: function () { return sdk_2.ENV_ENUM_SUB; } });
var dingtalk_javascript_env_1 = require("./packages/dingtalk-javascript-env");
/**
 * 获取 Top Bridge
 */
var getTopBridge = function () {
    try {
        if (typeof window !== 'undefined' && typeof window.top !== 'undefined') {
            var topWindow = window.top;
            return topWindow.__dingtalk_jsapi_top_platfrom_config__;
        }
    }
    catch (_err) {
        return;
    }
};
var EDdWeexEnv;
(function (EDdWeexEnv) {
    EDdWeexEnv["singlePage"] = "singlePage";
    EDdWeexEnv["miniApp"] = "miniApp";
    EDdWeexEnv["miniWidget"] = "miniWidget";
})(EDdWeexEnv || (EDdWeexEnv = {}));
var getUA = function () {
    var ua = '';
    try {
        if (typeof navigator !== 'undefined') {
            ua = navigator && (navigator.userAgent || navigator.swuserAgent) || '';
        }
    }
    catch (e) {
        ua = '';
    }
    return ua;
};
exports.getUA = getUA;
var getENV = function () {
    var ua = exports.getUA();
    var isInIOSEquipment = (/iPhone|iPad|iPod|iOS/i).test(ua);
    var isInAndroidEquipment = (/Android/i).test(ua);
    var isMiniAppRuntime = (/Nebula/i).test(ua);
    var isDingTalkRuntime = (/DingTalk/i).test(ua);
    var isWebviewInMiniAppRuntime = (/dd-web/i).test(ua);
    var isInNuva = (typeof nuva === 'object');
    var isHadMiniAppBridge = (typeof dd === 'object' && typeof dd.dtBridge === 'function');
    // for iOS Jailbreaking
    var isLooseIOS = (isHadMiniAppBridge && isInIOSEquipment) || (isInNuva && isInIOSEquipment);
    var inMobileDingtalk = isDingTalkRuntime || dingtalk_javascript_env_1.default.isDingTalk;
    var isIOS = (isInIOSEquipment && inMobileDingtalk || dingtalk_javascript_env_1.default.isWeexiOS) || isLooseIOS;
    var isAndroid = isInAndroidEquipment && inMobileDingtalk || dingtalk_javascript_env_1.default.isWeexAndroid;
    // const isMiniApp = isMiniAppRuntime && inMobileDingtalk || isHadMiniAppBridge; // adaptate miniapp weex env
    var isMiniApp = isHadMiniAppBridge; // adaptate miniapp weex env
    var isWebviewInMiniApp = isWebviewInMiniAppRuntime;
    var appType = sdk_1.APP_TYPE.WEB;
    if (isWebviewInMiniApp) {
        appType = sdk_1.APP_TYPE.WEBVIEW_IN_MINIAPP;
    }
    else if (isMiniApp) {
        appType = sdk_1.APP_TYPE.MINI_APP;
    }
    else if (dingtalk_javascript_env_1.default.isWeexiOS || dingtalk_javascript_env_1.default.isWeexAndroid) {
        try {
            var ddWeexEnv = weex.config.ddWeexEnv;
            // 当是小程序组件环境时
            if (ddWeexEnv === EDdWeexEnv.miniWidget) {
                appType = sdk_1.APP_TYPE.WEEX_WIDGET;
            }
            else {
                appType = sdk_1.APP_TYPE.WEEX;
            }
        }
        catch (error) {
            appType = sdk_1.APP_TYPE.WEEX;
        }
    }
    var language = '*';
    var containerId;
    var matches = ua.match(/AliApp\(\w+\/([a-zA-Z0-9.-]+)\)/);
    if (matches === null) {
        matches = ua.match(/DingTalk\/([a-zA-Z0-9.-]+)/);
    }
    var version;
    if (matches && matches[1]) {
        version = matches[1];
    }
    var frameName = '';
    if (typeof name !== 'undefined') {
        frameName = name;
    }
    var topBridge = getTopBridge();
    try {
        if (topBridge && typeof window !== 'undefined' && typeof window.top !== 'undefined'
            && window.top !== window) {
            frameName = top.name;
        }
    }
    catch (e) {
        // continue
    }
    if (frameName) {
        try {
            var frameConf = JSON.parse(frameName);
            if (frameConf.hostVersion) {
                version = frameConf.hostVersion;
            }
            language = frameConf.language || navigator.language || '*';
            containerId = frameConf.containerId;
        }
        catch (e) {
            // when parse error , continue next opration
        }
    }
    var isPC = !!containerId;
    /**
     * mac 不包含 hostVersion
     */
    if (isPC && !version) {
        matches = ua.match(/DingTalk\(([a-zA-Z0-9\.-]+)\)/);
        if (matches && matches[1]) {
            version = matches[1];
        }
    }
    var platform;
    var platformSub = sdk_1.ENV_ENUM_SUB.noSub;
    if (isIOS) {
        platform = sdk_1.ENV_ENUM.ios;
    }
    else if (isAndroid) {
        platform = sdk_1.ENV_ENUM.android;
    }
    else if (isPC) {
        platform = sdk_1.ENV_ENUM.pc;
    }
    else {
        // iFrame 下沿用宿主环境
        if (topBridge && topBridge.platform) {
            platform = topBridge.platform;
        }
        else {
            platform = sdk_1.ENV_ENUM.notInDingTalk;
        }
    }
    if (platform === sdk_1.ENV_ENUM.pc) {
        var isMac = ua.indexOf('Macintosh; Intel Mac OS') > -1;
        platformSub = isMac ? sdk_1.ENV_ENUM_SUB.mac : sdk_1.ENV_ENUM_SUB.win;
    }
    return {
        platform: platform,
        platformSub: platformSub,
        version: version,
        appType: appType,
        language: language,
    };
};
exports.getENV = getENV;
