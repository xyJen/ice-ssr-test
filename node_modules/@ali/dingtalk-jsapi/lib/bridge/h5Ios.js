"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.h5IosBridgeInit = void 0;
var h5BridgeReadyPromise;
var h5IosBridgeInit = function () {
    if (!h5BridgeReadyPromise) {
        h5BridgeReadyPromise = new Promise(function (resolve, reject) {
            if (typeof WebViewJavascriptBridge !== 'undefined') {
                try {
                    WebViewJavascriptBridge.init(function (data, responseCallback) { });
                }
                catch (e) {
                    return reject();
                }
                return resolve({});
            }
            else {
                document.addEventListener('WebViewJavascriptBridgeReady', function () {
                    if (typeof WebViewJavascriptBridge === 'undefined') {
                        return reject();
                    }
                    try {
                        WebViewJavascriptBridge.init(function (data, responseCallback) { });
                    }
                    catch (e) {
                        return reject();
                    }
                    return resolve({});
                }, false);
            }
        });
    }
    return h5BridgeReadyPromise;
};
exports.h5IosBridgeInit = h5IosBridgeInit;
var h5IosBridge = function (method, params) {
    if (!h5BridgeReadyPromise) {
        h5BridgeReadyPromise = exports.h5IosBridgeInit();
    }
    return h5BridgeReadyPromise.then(function () {
        var innerParams = Object.assign({}, params);
        return new Promise(function (resolve, reject) {
            if (innerParams.watch === true) {
                // 如果是监听事件，删除原始调用onSuccess的回调
                var successHandler_1 = innerParams.onSuccess;
                delete innerParams.onSuccess;
                if (typeof WebViewJavascriptBridge !== 'undefined') {
                    WebViewJavascriptBridge.registerHandler(method, function (data, responseCallback) {
                        // compatibility
                        if (typeof successHandler_1 === 'function') {
                            successHandler_1.call(null, data);
                        }
                        if (responseCallback) {
                            responseCallback({
                                errorCode: '0',
                                errorMessage: 'success',
                            });
                        }
                    });
                }
            }
            if (typeof window.WebViewJavascriptBridge !== 'undefined') {
                window.WebViewJavascriptBridge.callHandler(method, Object.assign({}, innerParams), function (response) {
                    var data = response || {};
                    if (data.errorCode === '0') {
                        // compatibility
                        if (typeof innerParams.onSuccess === 'function') {
                            innerParams.onSuccess.call(null, data.result);
                        }
                        resolve(data.result);
                    }
                    else {
                        if (data.errorCode === '-1') {
                            // compatibility
                            if (typeof innerParams.onCancel === 'function') {
                                innerParams.onCancel.call(null, data, data.errorCode);
                            }
                            else if (typeof innerParams.onFail === 'function') {
                                innerParams.onFail.call(null, data, data.errorCode);
                            }
                        }
                        else {
                            // compatibility
                            if (typeof innerParams.onFail === 'function') {
                                innerParams.onFail.call(null, data, data.errorCode);
                            }
                        }
                        reject(data);
                    }
                });
            }
        });
    });
};
exports.default = h5IosBridge;
