"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var noop = function () {
    // do nothing;
};
var webviewInMiniappBridge = function (method, params) {
    return new Promise(function (resolve, reject) {
        var successCallback = params.onSuccess || noop;
        var failCallback = params.onFail || noop;
        delete params.onSuccess;
        delete params.onFail;
        if (AlipayJSBridge) {
            var mArr = method.split('.');
            var actionName = mArr.pop() || '';
            var serviceName = mArr.join('.');
            AlipayJSBridge.call.apply(null, ['webDdExec', {
                    serviceName: serviceName,
                    actionName: actionName,
                    args: params,
                }, function (res) {
                    var result = {};
                    var contentStr = res.content;
                    if (contentStr) {
                        try {
                            result = JSON.parse(contentStr);
                        }
                        catch (e) {
                            console.error('parse dt api result error', contentStr, e);
                        }
                    }
                    if (res.success) {
                        successCallback.apply(null, [result]);
                        resolve(result);
                    }
                    else {
                        failCallback.apply(null, [result]);
                        reject(result);
                    }
                }]);
        }
        else {
            var err = new Error('Fatal error, cannot find bridge ,current env is WebView in MiniApp');
            failCallback(err);
            reject(err);
        }
    });
};
exports.default = webviewInMiniappBridge;
