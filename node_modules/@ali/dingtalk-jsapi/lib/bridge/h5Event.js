"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.off = exports.on = void 0;
var NON_BRIDGE_EVENTS = [
    'resume',
    'pause',
    'online',
    'offline',
    'backbutton',
    'goBack',
    'pullToRefresh',
    'message',
    'recycle',
    'restore',
    'drawer',
    'tab',
    'navHelpIcon',
    'navRightButton',
    'navMenu',
    'navTitle',
    'appLinkResponse',
    'internalPageLinkResponse',
    'networkEvent',
    'hostTaskEvent',
    'deviceOrientationChanged',
    'autoCheckIn',
    'deviceFound',
    'hostCheckIn',
    'screenshot',
    'becomeActive',
    'keepAlive',
    'navTitleClick',
    'sharePage',
    'wxNotify',
    'editNoteCommand',
    'updateStyle',
    'qrscanCommonNotify',
    '__message__',
    'dtChannelEvent',
    'livePlayerEventPlay',
    'livePlayerEventPause',
    'livePlayerEventEnded',
    'livePlayerEventError',
    'navActions',
    'attendEvents',
];
var BizEventBridgeType = 'dtBizBridgeEvent';
var EventTypeListKey = '__eventTypeList__';
var handlerProxyMap = (function () {
    if (typeof WeakMap === 'undefined') {
        return undefined;
    }
    else {
        return new WeakMap();
    }
})();
var getOnHandlerProxy = function (type, handler) {
    if (!handlerProxyMap) {
        return undefined;
    }
    var handlerProxy = handlerProxyMap.get(handler);
    if (handlerProxy === undefined) {
        handlerProxy = function (e) {
            var detail = e.detail;
            if (detail.namespace && detail.eventName) {
                var eventType = detail.namespace + "." + detail.eventName;
                // tslint:disable-next-line:no-string-literal
                if (handlerProxy && handlerProxy[EventTypeListKey].indexOf(eventType) !== -1) {
                    handler(detail.data);
                }
            }
        };
        // tslint:disable-next-line:no-string-literal
        handlerProxy[EventTypeListKey] = [type];
        handlerProxyMap.set(handler, handlerProxy);
    }
    else {
        if (handlerProxy[EventTypeListKey].indexOf(type) === -1) {
            handlerProxy[EventTypeListKey].push(type);
        }
    }
    return handlerProxy;
};
var getOffHandlerProxy = function (type, handler) {
    if (!handlerProxyMap) {
        return undefined;
    }
    var handlerProxy = handlerProxyMap.get(handler);
    if (handlerProxy && handlerProxy[EventTypeListKey].indexOf(type) !== -1) {
        handlerProxy[EventTypeListKey].splice(handlerProxy[EventTypeListKey].indexOf(type), 1);
    }
    if (handlerProxy && handlerProxy[EventTypeListKey].length <= 1) {
        return handlerProxy;
    }
    else {
        return undefined;
    }
};
var on = function (type, handler) {
    if (NON_BRIDGE_EVENTS.indexOf(type) !== -1) {
        document.addEventListener(type, handler);
    }
    else {
        var proxyFunc = getOnHandlerProxy(type, handler);
        if (proxyFunc) {
            document.addEventListener(BizEventBridgeType, proxyFunc);
        }
        else {
            // tslint:disable-next-line:no-console
            console.log("bind event : " + type + " need WeakMap support , current environment doesnot");
        }
    }
};
exports.on = on;
var off = function (type, handler) {
    if (NON_BRIDGE_EVENTS.indexOf(type) !== -1) {
        document.removeEventListener(type, handler);
    }
    else {
        var handlerProxy = getOffHandlerProxy(type, handler);
        // tslint:disable-next-line:no-unused-expression
        handlerProxy && document.removeEventListener(BizEventBridgeType, handlerProxy);
    }
};
exports.off = off;
