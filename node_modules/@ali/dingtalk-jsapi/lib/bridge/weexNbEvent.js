"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.off = exports.on = void 0;
/* tslint:disable:no-console */
var weex_1 = require("./weex");
var globalEvent = weex_1.requireModule('globalEvent');
var weexNbEvent = {
    isInitEvent: false,
    eventsMap: {},
    RequestIDCacheMap: [],
    dispatchEvent: function (evt) {
        if (evt) {
            var data = {
                func: evt.name,
                data: evt.data,
                pageId: evt.pageId || '',
                viewId: evt.viewId || '',
                clientId: '',
            };
            if (evt.clientId) {
                data.clientId = evt.clientId;
            }
            weexNbEvent.dispatchData(data);
        }
    },
    addEventListener: function (name, handler) {
        if (!weexNbEvent.isInitEvent) {
            weexNbEvent.isInitEvent = true;
            globalEvent.addEventListener('__nb_bridge__', function (res) {
                if (res && res.message) {
                    try {
                        // 兼容ios返回message是对象的情况
                        var data = parseJSON(res.message);
                        weexNbEvent.dispatchData(data);
                    }
                    catch (error) {
                        console.error('__nb_bridge__ data parse error', error);
                    }
                }
            });
        }
        if (!weexNbEvent.eventsMap[name]) {
            weexNbEvent.eventsMap[name] = [];
        }
        weexNbEvent.eventsMap[name].push(handler);
    },
    removeEventListener: function (name, handler) {
        var events = weexNbEvent.eventsMap[name];
        if (events) {
            for (var itemFn = void 0, l = events.length - 1; l >= 0; l--) {
                itemFn = events[l];
                if (itemFn === handler) {
                    events.splice(l, 1);
                }
            }
        }
    },
    dispatchData: function (data) {
        console.log('receive push data', data);
        var options = {
            param: data.param,
            pageId: data.pageId,
            viewId: data.viewId,
            clientId: data.clientId,
        };
        // webview 事件
        if (data && data.func) { // 事件监听回调
            options.eventName = data.func;
            weexNbEvent.doEventCallback(options);
        }
        else if (data && data.beforeunload) { // beforeunload 事件 ios
            options.eventName = 'beforeunload';
            options.param = {};
            weexNbEvent.doEventCallback(options);
        }
        else if (data && data.requestId != null) { // android JSAPI 回调
            if (isFunction(weexNbEvent.RequestIDCacheMap[data.requestId])) {
                weexNbEvent.RequestIDCacheMap[data.requestId](data.param);
                delete weexNbEvent.RequestIDCacheMap[data.requestId];
            }
            else {
                console.log('unknown requestId', data);
            }
        }
        else {
            console.error('unknown push data', data);
        }
    },
    doEventCallback: function (options) {
        var name = options.eventName;
        if (name) {
            var callBackFns = weexNbEvent.eventsMap[name];
            if (callBackFns && callBackFns.length > 0) {
                var evt_1 = { name: name };
                if (isObject(options.param) && weex.config.env.platform.toLowerCase() === 'android') {
                    /*
                    android 的 data.param 的实现在 jsbridge 里就是下面的逻辑
                    即会把一个 param 对象直接遍历给 event，就可能出现下面的结构
                    event: {
                    someOneKey: 123
                    data: {
                    someOneKey: 123
                    }
                    }
                    */
                    Object.assign(evt_1, options.param);
                }
                else {
                    /**
                     * ios 的 data.param 是来自原生事件的 event.data
                     */
                    evt_1.data = options.param;
                }
                evt_1.pageId = options.pageId;
                evt_1.viewId = options.viewId;
                evt_1.clientId = options.clientId;
                callBackFns.map(function (itemFn) {
                    if (isFunction(itemFn)) {
                        try {
                            itemFn(evt_1);
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                });
            }
        }
    },
};
var on = function (evt, fn) {
    weexNbEvent.addEventListener(evt, fn);
};
exports.on = on;
var off = function (evt, fn) {
    weexNbEvent.removeEventListener(evt, fn);
};
exports.off = off;
var isObject = function (o) {
    return o && typeof o === 'object';
};
var isFunction = function (f) {
    return typeof f === 'function';
};
var parseJSON = function (str) {
    try {
        str = JSON.parse(str);
    }
    catch (err) {
        // nothing
    }
    return str;
};
