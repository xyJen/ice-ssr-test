"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUniBridge = void 0;
var env_1 = require("../env");
var eapp_1 = require("./eapp");
var webviewInMiniApp_1 = require("./webviewInMiniApp");
var h5Ios_1 = require("./h5Ios");
var weex_1 = require("./weex");
var h5Android_1 = require("./h5Android");
var weex_2 = require("./weex");
var h5Pc_1 = require("./h5Pc");
var env = env_1.getENV();
var getUniBridge = function () {
    switch (env.platform) {
        case env_1.ENV_ENUM.ios:
            if (env.appType === env_1.APP_TYPE.MINI_APP) {
                return Promise.resolve(eapp_1.default);
            }
            else if (env.appType === env_1.APP_TYPE.WEBVIEW_IN_MINIAPP) {
                return Promise.resolve(webviewInMiniApp_1.default);
            }
            else if (env.appType === env_1.APP_TYPE.WEEX) {
                return weex_1.iosWeexBridge();
            }
            else {
                return h5Ios_1.h5IosBridgeInit().then(function () {
                    return h5Ios_1.default;
                });
            }
        case env_1.ENV_ENUM.android:
            if (env.appType === env_1.APP_TYPE.MINI_APP) {
                return Promise.resolve(eapp_1.default);
            }
            else if (env.appType === env_1.APP_TYPE.WEBVIEW_IN_MINIAPP) {
                return Promise.resolve(webviewInMiniApp_1.default);
            }
            else if (env.appType === env_1.APP_TYPE.WEEX) {
                return weex_2.androidWeexBridge();
            }
            else {
                return h5Android_1.h5AndroidbridgeInit().then(function () {
                    return h5Android_1.default;
                });
            }
        case env_1.ENV_ENUM.pc:
            switch (env.appType) {
                case env_1.APP_TYPE.MINI_APP:
                    return Promise.resolve(eapp_1.default);
                default:
                    return Promise.resolve(h5Pc_1.default);
            }
        default:
            return Promise.reject('Not in DingTalk runtime');
    }
};
exports.getUniBridge = getUniBridge;
var uniBridge = function (api, params) {
    return exports.getUniBridge().then(function (bridge) {
        return bridge(api, params);
    });
};
exports.default = uniBridge;
