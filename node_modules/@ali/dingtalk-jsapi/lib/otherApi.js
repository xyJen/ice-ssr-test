"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.version = exports.language = exports.compareVersion = exports.other = exports.pc = exports.android = exports.ios = void 0;
var env_1 = require("./env");
var ENV = env_1.getENV();
/**
 * @deprecated 兼容老接口，可用 `dd.env.platform === 'ios'` 代替
 */
exports.ios = ENV.platform === env_1.ENV_ENUM.ios;
/**
 * @deprecated 兼容老接口，可用 `dd.env.platform === 'ios'` 代替
 */
exports.android = ENV.platform === env_1.ENV_ENUM.android;
/**
 * @deprecated 兼容老接口，可用 `dd.env.platform === 'pc'` 代替
 */
exports.pc = ENV.platform === env_1.ENV_ENUM.pc;
/**
 * @deprecated 兼容老接口，可用 `dd.env.platform === 'notInDingTalk'` 代替
 */
exports.other = ENV.platform === env_1.ENV_ENUM.notInDingTalk;
/**
 * @deprecated 用于比较版本号，适用于钉钉内业务简易的版本比较
 * 例如3.5.0 > 3.4.9, 而semver的版本号则不支持
 * semver的版本号会忽略tag，例如3.5.0-realse.1 跟 3.5.0-realse.2 相等
 */
var compareVersion = function (oldVersion, newVersion, containEqual) {
    if (typeof oldVersion !== 'string' || typeof newVersion !== 'string') {
        return false;
    }
    function transform(item) {
        return parseInt(item, 10) || 0;
    }
    var oldArray = oldVersion.split('-')[0].split('.').map(transform);
    var newArray = newVersion.split('-')[0].split('.').map(transform);
    var o;
    var n;
    while (o === n && newArray.length > 0) {
        o = oldArray.shift();
        n = newArray.shift();
    }
    if (containEqual) {
        return (n || 0) >= (o || 0);
    }
    else {
        return (n || 0) > (o || 0);
    }
};
exports.compareVersion = compareVersion;
/**
 * @deprecated recommend use navigator.language to get current language
 */
exports.language = ENV.language;
/** @deprecated 即容器版本号, 推荐使用 dd.env.version */
exports.version = ENV.version;
