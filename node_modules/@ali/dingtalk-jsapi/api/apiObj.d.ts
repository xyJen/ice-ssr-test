import { getBioInfo$ as alipay_verifyidentity_getBioInfo } from './alipay/verifyidentity/getBioInfo';
export { IAlipayVerifyidentityGetBioInfoParams, IAlipayVerifyidentityGetBioInfoResult } from './alipay/verifyidentity/getBioInfo';
import { verifyIdentity$ as alipay_verifyidentity_verifyIdentity } from './alipay/verifyidentity/verifyIdentity';
export { IAlipayVerifyidentityVerifyIdentityParams, IAlipayVerifyidentityVerifyIdentityResult } from './alipay/verifyidentity/verifyIdentity';
import { beaconPicker$ as biz_ATMBle_beaconPicker } from './biz/ATMBle/beaconPicker';
export { IBizATMBleBeaconPickerParams, IBizATMBleBeaconPickerResult } from './biz/ATMBle/beaconPicker';
import { detectFace$ as biz_ATMBle_detectFace } from './biz/ATMBle/detectFace';
export { IBizATMBleDetectFaceParams, IBizATMBleDetectFaceResult } from './biz/ATMBle/detectFace';
import { detectFaceFullScreen$ as biz_ATMBle_detectFaceFullScreen } from './biz/ATMBle/detectFaceFullScreen';
export { IBizATMBleDetectFaceFullScreenParams, IBizATMBleDetectFaceFullScreenResult } from './biz/ATMBle/detectFaceFullScreen';
import { faceManager$ as biz_ATMBle_faceManager } from './biz/ATMBle/faceManager';
export { IBizATMBleFaceManagerParams, IBizATMBleFaceManagerResult } from './biz/ATMBle/faceManager';
import { punchModePicker$ as biz_ATMBle_punchModePicker } from './biz/ATMBle/punchModePicker';
export { IBizATMBlePunchModePickerParams, IBizATMBlePunchModePickerResult } from './biz/ATMBle/punchModePicker';
import { getClipboardData$ as biz_alidoc_getClipboardData } from './biz/alidoc/getClipboardData';
export { IBizAlidocGetClipboardDataParams, IBizAlidocGetClipboardDataResult } from './biz/alidoc/getClipboardData';
import { setStyle$ as biz_alidoc_setStyle } from './biz/alidoc/setStyle';
export { IBizAlidocSetStyleParams, IBizAlidocSetStyleResult } from './biz/alidoc/setStyle';
import { auth$ as biz_alipay_auth } from './biz/alipay/auth';
export { IBizAlipayAuthParams, IBizAlipayAuthResult } from './biz/alipay/auth';
import { bindAlipay$ as biz_alipay_bindAlipay } from './biz/alipay/bindAlipay';
export { IBizAlipayBindAlipayParams, IBizAlipayBindAlipayResult } from './biz/alipay/bindAlipay';
import { openAuth$ as biz_alipay_openAuth } from './biz/alipay/openAuth';
export { IBizAlipayOpenAuthParams, IBizAlipayOpenAuthResult } from './biz/alipay/openAuth';
import { pay$ as biz_alipay_pay } from './biz/alipay/pay';
export { IBizAlipayPayParams, IBizAlipayPayResult } from './biz/alipay/pay';
import { openAccountPwdLoginPage$ as biz_auth_openAccountPwdLoginPage } from './biz/auth/openAccountPwdLoginPage';
export { IBizAuthOpenAccountPwdLoginPageParams, IBizAuthOpenAccountPwdLoginPageResult } from './biz/auth/openAccountPwdLoginPage';
import { requestAuthCode$ as biz_auth_requestAuthCode } from './biz/auth/requestAuthCode';
export { IBizAuthRequestAuthCodeParams, IBizAuthRequestAuthCodeResult } from './biz/auth/requestAuthCode';
import { requestAuthInfo$ as biz_auth_requestAuthInfo } from './biz/auth/requestAuthInfo';
export { IBizAuthRequestAuthInfoParams, IBizAuthRequestAuthInfoResult } from './biz/auth/requestAuthInfo';
import { chooseDateTime$ as biz_calendar_chooseDateTime } from './biz/calendar/chooseDateTime';
export { IBizCalendarChooseDateTimeParams, IBizCalendarChooseDateTimeResult } from './biz/calendar/chooseDateTime';
import { chooseHalfDay$ as biz_calendar_chooseHalfDay } from './biz/calendar/chooseHalfDay';
export { IBizCalendarChooseHalfDayParams, IBizCalendarChooseHalfDayResult } from './biz/calendar/chooseHalfDay';
import { chooseInterval$ as biz_calendar_chooseInterval } from './biz/calendar/chooseInterval';
export { IBizCalendarChooseIntervalParams, IBizCalendarChooseIntervalResult } from './biz/calendar/chooseInterval';
import { chooseOneDay$ as biz_calendar_chooseOneDay } from './biz/calendar/chooseOneDay';
export { IBizCalendarChooseOneDayParams, IBizCalendarChooseOneDayResult } from './biz/calendar/chooseOneDay';
import { datePicker$ as biz_calendar_datePicker } from './biz/calendar/datePicker';
export { IBizCalendarDatePickerParams, IBizCalendarDatePickerResult } from './biz/calendar/datePicker';
import { addGroup$ as biz_chat_addGroup } from './biz/chat/addGroup';
export { IBizChatAddGroupParams, IBizChatAddGroupResult } from './biz/chat/addGroup';
import { chooseConversation$ as biz_chat_chooseConversation } from './biz/chat/chooseConversation';
export { IBizChatChooseConversationParams, IBizChatChooseConversationResult } from './biz/chat/chooseConversation';
import { chooseConversationByCorpId$ as biz_chat_chooseConversationByCorpId } from './biz/chat/chooseConversationByCorpId';
export { IBizChatChooseConversationByCorpIdParams, IBizChatChooseConversationByCorpIdResult } from './biz/chat/chooseConversationByCorpId';
import { collectSticker$ as biz_chat_collectSticker } from './biz/chat/collectSticker';
export { IBizChatCollectStickerParams, IBizChatCollectStickerResult } from './biz/chat/collectSticker';
import { createOrgPublicGroup$ as biz_chat_createOrgPublicGroup } from './biz/chat/createOrgPublicGroup';
export { IBizChatCreateOrgPublicGroupParams, IBizChatCreateOrgPublicGroupResult } from './biz/chat/createOrgPublicGroup';
import { createSceneGroup$ as biz_chat_createSceneGroup } from './biz/chat/createSceneGroup';
export { IBizChatCreateSceneGroupParams, IBizChatCreateSceneGroupResult } from './biz/chat/createSceneGroup';
import { getConversationInfo$ as biz_chat_getConversationInfo } from './biz/chat/getConversationInfo';
export { IBizChatGetConversationInfoParams, IBizChatGetConversationInfoResult } from './biz/chat/getConversationInfo';
import { getRealmCid$ as biz_chat_getRealmCid } from './biz/chat/getRealmCid';
export { IBizChatGetRealmCidParams, IBizChatGetRealmCidResult } from './biz/chat/getRealmCid';
import { locationChatMessage$ as biz_chat_locationChatMessage } from './biz/chat/locationChatMessage';
export { IBizChatLocationChatMessageParams, IBizChatLocationChatMessageResult } from './biz/chat/locationChatMessage';
import { modifyGroupDesc$ as biz_chat_modifyGroupDesc } from './biz/chat/modifyGroupDesc';
export { IBizChatModifyGroupDescParams, IBizChatModifyGroupDescResult } from './biz/chat/modifyGroupDesc';
import { open$ as biz_chat_open } from './biz/chat/open';
export { IBizChatOpenParams, IBizChatOpenResult } from './biz/chat/open';
import { openSingleChat$ as biz_chat_openSingleChat } from './biz/chat/openSingleChat';
export { IBizChatOpenSingleChatParams, IBizChatOpenSingleChatResult } from './biz/chat/openSingleChat';
import { pickConversation$ as biz_chat_pickConversation } from './biz/chat/pickConversation';
export { IBizChatPickConversationParams, IBizChatPickConversationResult } from './biz/chat/pickConversation';
import { queryUnreadSessions$ as biz_chat_queryUnreadSessions } from './biz/chat/queryUnreadSessions';
export { IBizChatQueryUnreadSessionsParams, IBizChatQueryUnreadSessionsResult } from './biz/chat/queryUnreadSessions';
import { sendEmotion$ as biz_chat_sendEmotion } from './biz/chat/sendEmotion';
export { IBizChatSendEmotionParams, IBizChatSendEmotionResult } from './biz/chat/sendEmotion';
import { sendMessageToContact$ as biz_chat_sendMessageToContact } from './biz/chat/sendMessageToContact';
export { IBizChatSendMessageToContactParams, IBizChatSendMessageToContactResult } from './biz/chat/sendMessageToContact';
import { sendReplyToInputPanel$ as biz_chat_sendReplyToInputPanel } from './biz/chat/sendReplyToInputPanel';
export { IBizChatSendReplyToInputPanelParams, IBizChatSendReplyToInputPanelResult } from './biz/chat/sendReplyToInputPanel';
import { sendRichTextToEditor$ as biz_chat_sendRichTextToEditor } from './biz/chat/sendRichTextToEditor';
export { IBizChatSendRichTextToEditorParams, IBizChatSendRichTextToEditorResult } from './biz/chat/sendRichTextToEditor';
import { toConversation$ as biz_chat_toConversation } from './biz/chat/toConversation';
export { IBizChatToConversationParams, IBizChatToConversationResult } from './biz/chat/toConversation';
import { toConversationByOpenConversationId$ as biz_chat_toConversationByOpenConversationId } from './biz/chat/toConversationByOpenConversationId';
export { IBizChatToConversationByOpenConversationIdParams, IBizChatToConversationByOpenConversationIdResult } from './biz/chat/toConversationByOpenConversationId';
import { setData$ as biz_clipboardData_setData } from './biz/clipboardData/setData';
export { IBizClipboardDataSetDataParams, IBizClipboardDataSetDataResult } from './biz/clipboardData/setData';
import { createCloudCall$ as biz_conference_createCloudCall } from './biz/conference/createCloudCall';
export { IBizConferenceCreateCloudCallParams, IBizConferenceCreateCloudCallResult } from './biz/conference/createCloudCall';
import { docRoomStatusChanged$ as biz_conference_docRoomStatusChanged } from './biz/conference/docRoomStatusChanged';
export { IBizConferenceDocRoomStatusChangedParams, IBizConferenceDocRoomStatusChangedResult } from './biz/conference/docRoomStatusChanged';
import { getCloudCallInfo$ as biz_conference_getCloudCallInfo } from './biz/conference/getCloudCallInfo';
export { IBizConferenceGetCloudCallInfoParams, IBizConferenceGetCloudCallInfoResult } from './biz/conference/getCloudCallInfo';
import { getCloudCallList$ as biz_conference_getCloudCallList } from './biz/conference/getCloudCallList';
export { IBizConferenceGetCloudCallListParams, IBizConferenceGetCloudCallListResult } from './biz/conference/getCloudCallList';
import { openLink$ as biz_conference_openLink } from './biz/conference/openLink';
export { IBizConferenceOpenLinkParams, IBizConferenceOpenLinkResult } from './biz/conference/openLink';
import { screenshot$ as biz_conference_screenshot } from './biz/conference/screenshot';
export { IBizConferenceScreenshotParams, IBizConferenceScreenshotResult } from './biz/conference/screenshot';
import { toggleConfAudio$ as biz_conference_toggleConfAudio } from './biz/conference/toggleConfAudio';
export { IBizConferenceToggleConfAudioParams, IBizConferenceToggleConfAudioResult } from './biz/conference/toggleConfAudio';
import { videoCall$ as biz_conference_videoCall } from './biz/conference/videoCall';
export { IBizConferenceVideoCallParams, IBizConferenceVideoCallResult } from './biz/conference/videoCall';
import { videoConfCall$ as biz_conference_videoConfCall } from './biz/conference/videoConfCall';
export { IBizConferenceVideoConfCallParams, IBizConferenceVideoConfCallResult } from './biz/conference/videoConfCall';
import { addFromContact$ as biz_contact_addFromContact } from './biz/contact/addFromContact';
export { IBizContactAddFromContactParams, IBizContactAddFromContactResult } from './biz/contact/addFromContact';
import { addFromManual$ as biz_contact_addFromManual } from './biz/contact/addFromManual';
export { IBizContactAddFromManualParams, IBizContactAddFromManualResult } from './biz/contact/addFromManual';
import { addSubManager$ as biz_contact_addSubManager } from './biz/contact/addSubManager';
export { IBizContactAddSubManagerParams, IBizContactAddSubManagerResult } from './biz/contact/addSubManager';
import { addUserForm$ as biz_contact_addUserForm } from './biz/contact/addUserForm';
export { IBizContactAddUserFormParams, IBizContactAddUserFormResult } from './biz/contact/addUserForm';
import { changeCustomerFollower$ as biz_contact_changeCustomerFollower } from './biz/contact/changeCustomerFollower';
export { IBizContactChangeCustomerFollowerParams, IBizContactChangeCustomerFollowerResult } from './biz/contact/changeCustomerFollower';
import { choose$ as biz_contact_choose } from './biz/contact/choose';
export { IBizContactChooseParams, IBizContactChooseResult } from './biz/contact/choose';
import { chooseMobileContacts$ as biz_contact_chooseMobileContacts } from './biz/contact/chooseMobileContacts';
export { IBizContactChooseMobileContactsParams, IBizContactChooseMobileContactsResult } from './biz/contact/chooseMobileContacts';
import { complexChoose$ as biz_contact_complexChoose } from './biz/contact/complexChoose';
export { IBizContactComplexChooseParams, IBizContactComplexChooseResult } from './biz/contact/complexChoose';
import { complexPicker$ as biz_contact_complexPicker } from './biz/contact/complexPicker';
export { IBizContactComplexPickerParams, IBizContactComplexPickerResult } from './biz/contact/complexPicker';
import { complexSelectedPicker$ as biz_contact_complexSelectedPicker } from './biz/contact/complexSelectedPicker';
export { IBizContactComplexSelectedPickerParams, IBizContactComplexSelectedPickerResult } from './biz/contact/complexSelectedPicker';
import { createGroup$ as biz_contact_createGroup } from './biz/contact/createGroup';
export { IBizContactCreateGroupParams, IBizContactCreateGroupResult } from './biz/contact/createGroup';
import { departmentsPicker$ as biz_contact_departmentsPicker } from './biz/contact/departmentsPicker';
export { IBizContactDepartmentsPickerParams, IBizContactDepartmentsPickerResult } from './biz/contact/departmentsPicker';
import { departmentsSelectedPicker$ as biz_contact_departmentsSelectedPicker } from './biz/contact/departmentsSelectedPicker';
export { IBizContactDepartmentsSelectedPickerParams, IBizContactDepartmentsSelectedPickerResult } from './biz/contact/departmentsSelectedPicker';
import { externalComplexPicker$ as biz_contact_externalComplexPicker } from './biz/contact/externalComplexPicker';
export { IBizContactExternalComplexPickerParams, IBizContactExternalComplexPickerResult } from './biz/contact/externalComplexPicker';
import { externalEditForm$ as biz_contact_externalEditForm } from './biz/contact/externalEditForm';
export { IBizContactExternalEditFormParams, IBizContactExternalEditFormResult } from './biz/contact/externalEditForm';
import { getMobileContact$ as biz_contact_getMobileContact } from './biz/contact/getMobileContact';
export { IBizContactGetMobileContactParams, IBizContactGetMobileContactResult } from './biz/contact/getMobileContact';
import { inviteGroupMember$ as biz_contact_inviteGroupMember } from './biz/contact/inviteGroupMember';
export { IBizContactInviteGroupMemberParams, IBizContactInviteGroupMemberResult } from './biz/contact/inviteGroupMember';
import { isForeignOrg$ as biz_contact_isForeignOrg } from './biz/contact/isForeignOrg';
export { IBizContactIsForeignOrgParams, IBizContactIsForeignOrgResult } from './biz/contact/isForeignOrg';
import { manageContactAlert$ as biz_contact_manageContactAlert } from './biz/contact/manageContactAlert';
export { IBizContactManageContactAlertParams, IBizContactManageContactAlertResult } from './biz/contact/manageContactAlert';
import { pickCustomer$ as biz_contact_pickCustomer } from './biz/contact/pickCustomer';
export { IBizContactPickCustomerParams, IBizContactPickCustomerResult } from './biz/contact/pickCustomer';
import { pickJobTitle$ as biz_contact_pickJobTitle } from './biz/contact/pickJobTitle';
export { IBizContactPickJobTitleParams, IBizContactPickJobTitleResult } from './biz/contact/pickJobTitle';
import { rolesPicker$ as biz_contact_rolesPicker } from './biz/contact/rolesPicker';
export { IBizContactRolesPickerParams, IBizContactRolesPickerResult } from './biz/contact/rolesPicker';
import { setRule$ as biz_contact_setRule } from './biz/contact/setRule';
export { IBizContactSetRuleParams, IBizContactSetRuleResult } from './biz/contact/setRule';
import { teamScaleSelect$ as biz_contact_teamScaleSelect } from './biz/contact/teamScaleSelect';
export { IBizContactTeamScaleSelectParams, IBizContactTeamScaleSelectResult } from './biz/contact/teamScaleSelect';
import { useTagPicker$ as biz_contact_useTagPicker } from './biz/contact/useTagPicker';
export { IBizContactUseTagPickerParams, IBizContactUseTagPickerResult } from './biz/contact/useTagPicker';
import { chooseSpaceDir$ as biz_cspace_chooseSpaceDir } from './biz/cspace/chooseSpaceDir';
export { IBizCspaceChooseSpaceDirParams, IBizCspaceChooseSpaceDirResult } from './biz/cspace/chooseSpaceDir';
import { copy$ as biz_cspace_copy } from './biz/cspace/copy';
export { IBizCspaceCopyParams, IBizCspaceCopyResult } from './biz/cspace/copy';
import { delete$ as biz_cspace_delete } from './biz/cspace/delete';
export { IBizCspaceDeleteParams, IBizCspaceDeleteResult } from './biz/cspace/delete';
import { getPlayUrl$ as biz_cspace_getPlayUrl } from './biz/cspace/getPlayUrl';
export { IBizCspaceGetPlayUrlParams, IBizCspaceGetPlayUrlResult } from './biz/cspace/getPlayUrl';
import { preview$ as biz_cspace_preview } from './biz/cspace/preview';
export { IBizCspacePreviewParams, IBizCspacePreviewResult } from './biz/cspace/preview';
import { saveFile$ as biz_cspace_saveFile } from './biz/cspace/saveFile';
export { IBizCspaceSaveFileParams, IBizCspaceSaveFileResult } from './biz/cspace/saveFile';
import { choose$ as biz_customContact_choose } from './biz/customContact/choose';
export { IBizCustomContactChooseParams, IBizCustomContactChooseResult } from './biz/customContact/choose';
import { multipleChoose$ as biz_customContact_multipleChoose } from './biz/customContact/multipleChoose';
export { IBizCustomContactMultipleChooseParams, IBizCustomContactMultipleChooseResult } from './biz/customContact/multipleChoose';
import { getAvatar$ as biz_data_getAvatar } from './biz/data/getAvatar';
export { IBizDataGetAvatarParams, IBizDataGetAvatarResult } from './biz/data/getAvatar';
import { create$ as biz_ding_create } from './biz/ding/create';
export { IBizDingCreateParams, IBizDingCreateResult } from './biz/ding/create';
import { detail$ as biz_ding_detail } from './biz/ding/detail';
export { IBizDingDetailParams, IBizDingDetailResult } from './biz/ding/detail';
import { post$ as biz_ding_post } from './biz/ding/post';
export { IBizDingPostParams, IBizDingPostResult } from './biz/ding/post';
import { update$ as biz_ding_update } from './biz/ding/update';
export { IBizDingUpdateParams, IBizDingUpdateResult } from './biz/ding/update';
import { finishMiniCourseByRecordId$ as biz_edu_finishMiniCourseByRecordId } from './biz/edu/finishMiniCourseByRecordId';
export { IBizEduFinishMiniCourseByRecordIdParams, IBizEduFinishMiniCourseByRecordIdResult } from './biz/edu/finishMiniCourseByRecordId';
import { getMiniCourseDraftList$ as biz_edu_getMiniCourseDraftList } from './biz/edu/getMiniCourseDraftList';
export { IBizEduGetMiniCourseDraftListParams, IBizEduGetMiniCourseDraftListResult } from './biz/edu/getMiniCourseDraftList';
import { joinClassroom$ as biz_edu_joinClassroom } from './biz/edu/joinClassroom';
export { IBizEduJoinClassroomParams, IBizEduJoinClassroomResult } from './biz/edu/joinClassroom';
import { makeMiniCourse$ as biz_edu_makeMiniCourse } from './biz/edu/makeMiniCourse';
export { IBizEduMakeMiniCourseParams, IBizEduMakeMiniCourseResult } from './biz/edu/makeMiniCourse';
import { newMsgNotificationStatus$ as biz_edu_newMsgNotificationStatus } from './biz/edu/newMsgNotificationStatus';
export { IBizEduNewMsgNotificationStatusParams, IBizEduNewMsgNotificationStatusResult } from './biz/edu/newMsgNotificationStatus';
import { startAuth$ as biz_edu_startAuth } from './biz/edu/startAuth';
export { IBizEduStartAuthParams, IBizEduStartAuthResult } from './biz/edu/startAuth';
import { tokenFaceImg$ as biz_edu_tokenFaceImg } from './biz/edu/tokenFaceImg';
export { IBizEduTokenFaceImgParams, IBizEduTokenFaceImgResult } from './biz/edu/tokenFaceImg';
import { notifyWeex$ as biz_event_notifyWeex } from './biz/event/notifyWeex';
export { IBizEventNotifyWeexParams, IBizEventNotifyWeexResult } from './biz/event/notifyWeex';
import { experienceFunction$ as biz_faceBox_experienceFunction } from './biz/faceBox/experienceFunction';
export { IBizFaceBoxExperienceFunctionParams, IBizFaceBoxExperienceFunctionResult } from './biz/faceBox/experienceFunction';
import { getRecognition$ as biz_faceBox_getRecognition } from './biz/faceBox/getRecognition';
export { IBizFaceBoxGetRecognitionParams, IBizFaceBoxGetRecognitionResult } from './biz/faceBox/getRecognition';
import { removeFace$ as biz_faceBox_removeFace } from './biz/faceBox/removeFace';
export { IBizFaceBoxRemoveFaceParams, IBizFaceBoxRemoveFaceResult } from './biz/faceBox/removeFace';
import { sendMessageToContact$ as biz_faceBox_sendMessageToContact } from './biz/faceBox/sendMessageToContact';
export { IBizFaceBoxSendMessageToContactParams, IBizFaceBoxSendMessageToContactResult } from './biz/faceBox/sendMessageToContact';
import { setRecognition$ as biz_faceBox_setRecognition } from './biz/faceBox/setRecognition';
export { IBizFaceBoxSetRecognitionParams, IBizFaceBoxSetRecognitionResult } from './biz/faceBox/setRecognition';
import { showRemind$ as biz_faceBox_showRemind } from './biz/faceBox/showRemind';
export { IBizFaceBoxShowRemindParams, IBizFaceBoxShowRemindResult } from './biz/faceBox/showRemind';
import { startCameraRecord$ as biz_faceBox_startCameraRecord } from './biz/faceBox/startCameraRecord';
export { IBizFaceBoxStartCameraRecordParams, IBizFaceBoxStartCameraRecordResult } from './biz/faceBox/startCameraRecord';
import { startCameraRecordFromPartner$ as biz_faceBox_startCameraRecordFromPartner } from './biz/faceBox/startCameraRecordFromPartner';
export { IBizFaceBoxStartCameraRecordFromPartnerParams, IBizFaceBoxStartCameraRecordFromPartnerResult } from './biz/faceBox/startCameraRecordFromPartner';
import { startPictureRecord$ as biz_faceBox_startPictureRecord } from './biz/faceBox/startPictureRecord';
export { IBizFaceBoxStartPictureRecordParams, IBizFaceBoxStartPictureRecordResult } from './biz/faceBox/startPictureRecord';
import { fetchData$ as biz_intent_fetchData } from './biz/intent/fetchData';
export { IBizIntentFetchDataParams, IBizIntentFetchDataResult } from './biz/intent/fetchData';
import { bind$ as biz_iot_bind } from './biz/iot/bind';
export { IBizIotBindParams, IBizIotBindResult } from './biz/iot/bind';
import { bindMeetingRoom$ as biz_iot_bindMeetingRoom } from './biz/iot/bindMeetingRoom';
export { IBizIotBindMeetingRoomParams, IBizIotBindMeetingRoomResult } from './biz/iot/bindMeetingRoom';
import { getDeviceProperties$ as biz_iot_getDeviceProperties } from './biz/iot/getDeviceProperties';
export { IBizIotGetDevicePropertiesParams, IBizIotGetDevicePropertiesResult } from './biz/iot/getDeviceProperties';
import { invokeThingService$ as biz_iot_invokeThingService } from './biz/iot/invokeThingService';
export { IBizIotInvokeThingServiceParams, IBizIotInvokeThingServiceResult } from './biz/iot/invokeThingService';
import { queryMeetingRoomList$ as biz_iot_queryMeetingRoomList } from './biz/iot/queryMeetingRoomList';
export { IBizIotQueryMeetingRoomListParams, IBizIotQueryMeetingRoomListResult } from './biz/iot/queryMeetingRoomList';
import { setDeviceProperties$ as biz_iot_setDeviceProperties } from './biz/iot/setDeviceProperties';
export { IBizIotSetDevicePropertiesParams, IBizIotSetDevicePropertiesResult } from './biz/iot/setDeviceProperties';
import { unbind$ as biz_iot_unbind } from './biz/iot/unbind';
export { IBizIotUnbindParams, IBizIotUnbindResult } from './biz/iot/unbind';
import { approvalPdf$ as biz_kingGrid_approvalPdf } from './biz/kingGrid/approvalPdf';
export { IBizKingGridApprovalPdfParams, IBizKingGridApprovalPdfResult } from './biz/kingGrid/approvalPdf';
import { chooseLiveGroup$ as biz_live_chooseLiveGroup } from './biz/live/chooseLiveGroup';
export { IBizLiveChooseLiveGroupParams, IBizLiveChooseLiveGroupResult } from './biz/live/chooseLiveGroup';
import { destroyPlayer$ as biz_live_destroyPlayer } from './biz/live/destroyPlayer';
export { IBizLiveDestroyPlayerParams, IBizLiveDestroyPlayerResult } from './biz/live/destroyPlayer';
import { getAllLiveList$ as biz_live_getAllLiveList } from './biz/live/getAllLiveList';
export { IBizLiveGetAllLiveListParams, IBizLiveGetAllLiveListResult } from './biz/live/getAllLiveList';
import { getDynamicMsgCount$ as biz_live_getDynamicMsgCount } from './biz/live/getDynamicMsgCount';
export { IBizLiveGetDynamicMsgCountParams, IBizLiveGetDynamicMsgCountResult } from './biz/live/getDynamicMsgCount';
import { getLiveFuncMsgs$ as biz_live_getLiveFuncMsgs } from './biz/live/getLiveFuncMsgs';
export { IBizLiveGetLiveFuncMsgsParams, IBizLiveGetLiveFuncMsgsResult } from './biz/live/getLiveFuncMsgs';
import { getLiveInfos$ as biz_live_getLiveInfos } from './biz/live/getLiveInfos';
export { IBizLiveGetLiveInfosParams, IBizLiveGetLiveInfosResult } from './biz/live/getLiveInfos';
import { getLiveStatistics$ as biz_live_getLiveStatistics } from './biz/live/getLiveStatistics';
export { IBizLiveGetLiveStatisticsParams, IBizLiveGetLiveStatisticsResult } from './biz/live/getLiveStatistics';
import { getPlaybackList$ as biz_live_getPlaybackList } from './biz/live/getPlaybackList';
export { IBizLiveGetPlaybackListParams, IBizLiveGetPlaybackListResult } from './biz/live/getPlaybackList';
import { getPlayerPosition$ as biz_live_getPlayerPosition } from './biz/live/getPlayerPosition';
export { IBizLiveGetPlayerPositionParams, IBizLiveGetPlayerPositionResult } from './biz/live/getPlayerPosition';
import { getStickyStatus$ as biz_live_getStickyStatus } from './biz/live/getStickyStatus';
export { IBizLiveGetStickyStatusParams, IBizLiveGetStickyStatusResult } from './biz/live/getStickyStatus';
import { hidePlayer$ as biz_live_hidePlayer } from './biz/live/hidePlayer';
export { IBizLiveHidePlayerParams, IBizLiveHidePlayerResult } from './biz/live/hidePlayer';
import { initPlayer$ as biz_live_initPlayer } from './biz/live/initPlayer';
export { IBizLiveInitPlayerParams, IBizLiveInitPlayerResult } from './biz/live/initPlayer';
import { listLiveRecords$ as biz_live_listLiveRecords } from './biz/live/listLiveRecords';
export { IBizLiveListLiveRecordsParams, IBizLiveListLiveRecordsResult } from './biz/live/listLiveRecords';
import { listLiveViewers$ as biz_live_listLiveViewers } from './biz/live/listLiveViewers';
export { IBizLiveListLiveViewersParams, IBizLiveListLiveViewersResult } from './biz/live/listLiveViewers';
import { nav2GroupAnchorList$ as biz_live_nav2GroupAnchorList } from './biz/live/nav2GroupAnchorList';
export { IBizLiveNav2GroupAnchorListParams, IBizLiveNav2GroupAnchorListResult } from './biz/live/nav2GroupAnchorList';
import { nav2PlayVideo$ as biz_live_nav2PlayVideo } from './biz/live/nav2PlayVideo';
export { IBizLiveNav2PlayVideoParams, IBizLiveNav2PlayVideoResult } from './biz/live/nav2PlayVideo';
import { playerPause$ as biz_live_playerPause } from './biz/live/playerPause';
export { IBizLivePlayerPauseParams, IBizLivePlayerPauseResult } from './biz/live/playerPause';
import { playerPlay$ as biz_live_playerPlay } from './biz/live/playerPlay';
export { IBizLivePlayerPlayParams, IBizLivePlayerPlayResult } from './biz/live/playerPlay';
import { playerSeekTo$ as biz_live_playerSeekTo } from './biz/live/playerSeekTo';
export { IBizLivePlayerSeekToParams, IBizLivePlayerSeekToResult } from './biz/live/playerSeekTo';
import { setStickyStatus$ as biz_live_setStickyStatus } from './biz/live/setStickyStatus';
export { IBizLiveSetStickyStatusParams, IBizLiveSetStickyStatusResult } from './biz/live/setStickyStatus';
import { shareToGroup$ as biz_live_shareToGroup } from './biz/live/shareToGroup';
export { IBizLiveShareToGroupParams, IBizLiveShareToGroupResult } from './biz/live/shareToGroup';
import { showPlayer$ as biz_live_showPlayer } from './biz/live/showPlayer';
export { IBizLiveShowPlayerParams, IBizLiveShowPlayerResult } from './biz/live/showPlayer';
import { startClassRoom$ as biz_live_startClassRoom } from './biz/live/startClassRoom';
export { IBizLiveStartClassRoomParams, IBizLiveStartClassRoomResult } from './biz/live/startClassRoom';
import { startDummyLive$ as biz_live_startDummyLive } from './biz/live/startDummyLive';
export { IBizLiveStartDummyLiveParams, IBizLiveStartDummyLiveResult } from './biz/live/startDummyLive';
import { startUnifiedLive$ as biz_live_startUnifiedLive } from './biz/live/startUnifiedLive';
export { IBizLiveStartUnifiedLiveParams, IBizLiveStartUnifiedLiveResult } from './biz/live/startUnifiedLive';
import { stopDummyLive$ as biz_live_stopDummyLive } from './biz/live/stopDummyLive';
export { IBizLiveStopDummyLiveParams, IBizLiveStopDummyLiveResult } from './biz/live/stopDummyLive';
import { stopDummyLiveAll$ as biz_live_stopDummyLiveAll } from './biz/live/stopDummyLiveAll';
export { IBizLiveStopDummyLiveAllParams, IBizLiveStopDummyLiveAllResult } from './biz/live/stopDummyLiveAll';
import { updateDrawingCache$ as biz_live_updateDrawingCache } from './biz/live/updateDrawingCache';
export { IBizLiveUpdateDrawingCacheParams, IBizLiveUpdateDrawingCacheResult } from './biz/live/updateDrawingCache';
import { updateSimulGroup$ as biz_live_updateSimulGroup } from './biz/live/updateSimulGroup';
export { IBizLiveUpdateSimulGroupParams, IBizLiveUpdateSimulGroupResult } from './biz/live/updateSimulGroup';
import { locate$ as biz_map_locate } from './biz/map/locate';
export { IBizMapLocateParams, IBizMapLocateResult } from './biz/map/locate';
import { search$ as biz_map_search } from './biz/map/search';
export { IBizMapSearchParams, IBizMapSearchResult } from './biz/map/search';
import { searchRoute$ as biz_map_searchRoute } from './biz/map/searchRoute';
export { IBizMapSearchRouteParams, IBizMapSearchRouteResult } from './biz/map/searchRoute';
import { view$ as biz_map_view } from './biz/map/view';
export { IBizMapViewParams, IBizMapViewResult } from './biz/map/view';
import { compressVideo$ as biz_media_compressVideo } from './biz/media/compressVideo';
export { IBizMediaCompressVideoParams, IBizMediaCompressVideoResult } from './biz/media/compressVideo';
import { openApp$ as biz_microApp_openApp } from './biz/microApp/openApp';
export { IBizMicroAppOpenAppParams, IBizMicroAppOpenAppResult } from './biz/microApp/openApp';
import { visualList$ as biz_microApp_visualList } from './biz/microApp/visualList';
export { IBizMicroAppVisualListParams, IBizMicroAppVisualListResult } from './biz/microApp/visualList';
import { back$ as biz_navigation_back } from './biz/navigation/back';
export { IBizNavigationBackParams, IBizNavigationBackResult } from './biz/navigation/back';
import { close$ as biz_navigation_close } from './biz/navigation/close';
export { IBizNavigationCloseParams, IBizNavigationCloseResult } from './biz/navigation/close';
import { createEditor$ as biz_navigation_createEditor } from './biz/navigation/createEditor';
export { IBizNavigationCreateEditorParams, IBizNavigationCreateEditorResult } from './biz/navigation/createEditor';
import { finishEditor$ as biz_navigation_finishEditor } from './biz/navigation/finishEditor';
export { IBizNavigationFinishEditorParams, IBizNavigationFinishEditorResult } from './biz/navigation/finishEditor';
import { gestures$ as biz_navigation_gestures } from './biz/navigation/gestures';
export { IBizNavigationGesturesParams, IBizNavigationGesturesResult } from './biz/navigation/gestures';
import { goBack$ as biz_navigation_goBack } from './biz/navigation/goBack';
export { IBizNavigationGoBackParams, IBizNavigationGoBackResult } from './biz/navigation/goBack';
import { hideBar$ as biz_navigation_hideBar } from './biz/navigation/hideBar';
export { IBizNavigationHideBarParams, IBizNavigationHideBarResult } from './biz/navigation/hideBar';
import { navigateToMiniProgram$ as biz_navigation_navigateToMiniProgram } from './biz/navigation/navigateToMiniProgram';
export { IBizNavigationNavigateToMiniProgramParams, IBizNavigationNavigateToMiniProgramResult } from './biz/navigation/navigateToMiniProgram';
import { popGesture$ as biz_navigation_popGesture } from './biz/navigation/popGesture';
export { IBizNavigationPopGestureParams, IBizNavigationPopGestureResult } from './biz/navigation/popGesture';
import { quit$ as biz_navigation_quit } from './biz/navigation/quit';
export { IBizNavigationQuitParams, IBizNavigationQuitResult } from './biz/navigation/quit';
import { replace$ as biz_navigation_replace } from './biz/navigation/replace';
export { IBizNavigationReplaceParams, IBizNavigationReplaceResult } from './biz/navigation/replace';
import { setActions$ as biz_navigation_setActions } from './biz/navigation/setActions';
export { IBizNavigationSetActionsParams, IBizNavigationSetActionsResult } from './biz/navigation/setActions';
import { setIcon$ as biz_navigation_setIcon } from './biz/navigation/setIcon';
export { IBizNavigationSetIconParams, IBizNavigationSetIconResult } from './biz/navigation/setIcon';
import { setLeft$ as biz_navigation_setLeft } from './biz/navigation/setLeft';
export { IBizNavigationSetLeftParams, IBizNavigationSetLeftResult } from './biz/navigation/setLeft';
import { setMenu$ as biz_navigation_setMenu } from './biz/navigation/setMenu';
export { IBizNavigationSetMenuParams, IBizNavigationSetMenuResult } from './biz/navigation/setMenu';
import { setPullGesture$ as biz_navigation_setPullGesture } from './biz/navigation/setPullGesture';
export { IBizNavigationSetPullGestureParams, IBizNavigationSetPullGestureResult } from './biz/navigation/setPullGesture';
import { setRight$ as biz_navigation_setRight } from './biz/navigation/setRight';
export { IBizNavigationSetRightParams, IBizNavigationSetRightResult } from './biz/navigation/setRight';
import { setSubtitle$ as biz_navigation_setSubtitle } from './biz/navigation/setSubtitle';
export { IBizNavigationSetSubtitleParams, IBizNavigationSetSubtitleResult } from './biz/navigation/setSubtitle';
import { setTitle$ as biz_navigation_setTitle } from './biz/navigation/setTitle';
export { IBizNavigationSetTitleParams, IBizNavigationSetTitleResult } from './biz/navigation/setTitle';
import { setTitleIcon$ as biz_navigation_setTitleIcon } from './biz/navigation/setTitleIcon';
export { IBizNavigationSetTitleIconParams, IBizNavigationSetTitleIconResult } from './biz/navigation/setTitleIcon';
import { showPopdownList$ as biz_navigation_showPopdownList } from './biz/navigation/showPopdownList';
export { IBizNavigationShowPopdownListParams, IBizNavigationShowPopdownListResult } from './biz/navigation/showPopdownList';
import { send$ as biz_notify_send } from './biz/notify/send';
export { IBizNotifySendParams, IBizNotifySendResult } from './biz/notify/send';
import { authorityVerify$ as biz_oa_authorityVerify } from './biz/oa/authorityVerify';
export { IBizOaAuthorityVerifyParams, IBizOaAuthorityVerifyResult } from './biz/oa/authorityVerify';
import { setWorkTab$ as biz_oa_setWorkTab } from './biz/oa/setWorkTab';
export { IBizOaSetWorkTabParams, IBizOaSetWorkTabResult } from './biz/oa/setWorkTab';
import { authorize$ as biz_oauth_authorize } from './biz/oauth/authorize';
export { IBizOauthAuthorizeParams, IBizOauthAuthorizeResult } from './biz/oauth/authorize';
import { componentPunchFromPartner$ as biz_pbp_componentPunchFromPartner } from './biz/pbp/componentPunchFromPartner';
export { IBizPbpComponentPunchFromPartnerParams, IBizPbpComponentPunchFromPartnerResult } from './biz/pbp/componentPunchFromPartner';
import { startMatchRuleFromPartner$ as biz_pbp_startMatchRuleFromPartner } from './biz/pbp/startMatchRuleFromPartner';
export { IBizPbpStartMatchRuleFromPartnerParams, IBizPbpStartMatchRuleFromPartnerResult } from './biz/pbp/startMatchRuleFromPartner';
import { stopMatchRuleFromPartner$ as biz_pbp_stopMatchRuleFromPartner } from './biz/pbp/stopMatchRuleFromPartner';
export { IBizPbpStopMatchRuleFromPartnerParams, IBizPbpStopMatchRuleFromPartnerResult } from './biz/pbp/stopMatchRuleFromPartner';
import { video$ as biz_preload_video } from './biz/preload/video';
export { IBizPreloadVideoParams, IBizPreloadVideoResult } from './biz/preload/video';
import { getRealtimeTracingStatus$ as biz_realm_getRealtimeTracingStatus } from './biz/realm/getRealtimeTracingStatus';
export { IBizRealmGetRealtimeTracingStatusParams, IBizRealmGetRealtimeTracingStatusResult } from './biz/realm/getRealtimeTracingStatus';
import { getUserExclusiveInfo$ as biz_realm_getUserExclusiveInfo } from './biz/realm/getUserExclusiveInfo';
export { IBizRealmGetUserExclusiveInfoParams, IBizRealmGetUserExclusiveInfoResult } from './biz/realm/getUserExclusiveInfo';
import { startRealtimeTracing$ as biz_realm_startRealtimeTracing } from './biz/realm/startRealtimeTracing';
export { IBizRealmStartRealtimeTracingParams, IBizRealmStartRealtimeTracingResult } from './biz/realm/startRealtimeTracing';
import { stopRealtimeTracing$ as biz_realm_stopRealtimeTracing } from './biz/realm/stopRealtimeTracing';
export { IBizRealmStopRealtimeTracingParams, IBizRealmStopRealtimeTracingResult } from './biz/realm/stopRealtimeTracing';
import { subscribe$ as biz_realm_subscribe } from './biz/realm/subscribe';
export { IBizRealmSubscribeParams, IBizRealmSubscribeResult } from './biz/realm/subscribe';
import { unsubscribe$ as biz_realm_unsubscribe } from './biz/realm/unsubscribe';
export { IBizRealmUnsubscribeParams, IBizRealmUnsubscribeResult } from './biz/realm/unsubscribe';
import { sendEnterpriseRedEnvelop$ as biz_redenvelop_sendEnterpriseRedEnvelop } from './biz/redenvelop/sendEnterpriseRedEnvelop';
export { IBizRedenvelopSendEnterpriseRedEnvelopParams, IBizRedenvelopSendEnterpriseRedEnvelopResult } from './biz/redenvelop/sendEnterpriseRedEnvelop';
import { sendNormalRedEnvelop$ as biz_redenvelop_sendNormalRedEnvelop } from './biz/redenvelop/sendNormalRedEnvelop';
export { IBizRedenvelopSendNormalRedEnvelopParams, IBizRedenvelopSendNormalRedEnvelopResult } from './biz/redenvelop/sendNormalRedEnvelop';
import { getInfo$ as biz_resource_getInfo } from './biz/resource/getInfo';
export { IBizResourceGetInfoParams, IBizResourceGetInfoResult } from './biz/resource/getInfo';
import { reportDebugMessage$ as biz_resource_reportDebugMessage } from './biz/resource/reportDebugMessage';
export { IBizResourceReportDebugMessageParams, IBizResourceReportDebugMessageResult } from './biz/resource/reportDebugMessage';
import { reportPerf$ as biz_resource_reportPerf } from './biz/resource/reportPerf';
export { IBizResourceReportPerfParams, IBizResourceReportPerfResult } from './biz/resource/reportPerf';
import { create$ as biz_schedule_create } from './biz/schedule/create';
export { IBizScheduleCreateParams, IBizScheduleCreateResult } from './biz/schedule/create';
import { addShortCut$ as biz_shortCut_addShortCut } from './biz/shortCut/addShortCut';
export { IBizShortCutAddShortCutParams, IBizShortCutAddShortCutResult } from './biz/shortCut/addShortCut';
import { checkHealthPermission$ as biz_sports_checkHealthPermission } from './biz/sports/checkHealthPermission';
export { IBizSportsCheckHealthPermissionParams, IBizSportsCheckHealthPermissionResult } from './biz/sports/checkHealthPermission';
import { checkSensorPermission$ as biz_sports_checkSensorPermission } from './biz/sports/checkSensorPermission';
export { IBizSportsCheckSensorPermissionParams, IBizSportsCheckSensorPermissionResult } from './biz/sports/checkSensorPermission';
import { disableStepCountSync$ as biz_sports_disableStepCountSync } from './biz/sports/disableStepCountSync';
export { IBizSportsDisableStepCountSyncParams, IBizSportsDisableStepCountSyncResult } from './biz/sports/disableStepCountSync';
import { enableStepCountSync$ as biz_sports_enableStepCountSync } from './biz/sports/enableStepCountSync';
export { IBizSportsEnableStepCountSyncParams, IBizSportsEnableStepCountSyncResult } from './biz/sports/enableStepCountSync';
import { fetchAliuid$ as biz_sports_fetchAliuid } from './biz/sports/fetchAliuid';
export { IBizSportsFetchAliuidParams, IBizSportsFetchAliuidResult } from './biz/sports/fetchAliuid';
import { fetchStephubSteps$ as biz_sports_fetchStephubSteps } from './biz/sports/fetchStephubSteps';
export { IBizSportsFetchStephubStepsParams, IBizSportsFetchStephubStepsResult } from './biz/sports/fetchStephubSteps';
import { fetchTaobaoH5TrustLoginUrlForAlisports$ as biz_sports_fetchTaobaoH5TrustLoginUrlForAlisports } from './biz/sports/fetchTaobaoH5TrustLoginUrlForAlisports';
export { IBizSportsFetchTaobaoH5TrustLoginUrlForAlisportsParams, IBizSportsFetchTaobaoH5TrustLoginUrlForAlisportsResult } from './biz/sports/fetchTaobaoH5TrustLoginUrlForAlisports';
import { fetchTaobaoId$ as biz_sports_fetchTaobaoId } from './biz/sports/fetchTaobaoId';
export { IBizSportsFetchTaobaoIdParams, IBizSportsFetchTaobaoIdResult } from './biz/sports/fetchTaobaoId';
import { getTodaysStepCount$ as biz_sports_getTodaysStepCount } from './biz/sports/getTodaysStepCount';
export { IBizSportsGetTodaysStepCountParams, IBizSportsGetTodaysStepCountResult } from './biz/sports/getTodaysStepCount';
import { requestHealthPermission$ as biz_sports_requestHealthPermission } from './biz/sports/requestHealthPermission';
export { IBizSportsRequestHealthPermissionParams, IBizSportsRequestHealthPermissionResult } from './biz/sports/requestHealthPermission';
import { requestSensorPermission$ as biz_sports_requestSensorPermission } from './biz/sports/requestSensorPermission';
export { IBizSportsRequestSensorPermissionParams, IBizSportsRequestSensorPermissionResult } from './biz/sports/requestSensorPermission';
import { closeUnpayOrder$ as biz_store_closeUnpayOrder } from './biz/store/closeUnpayOrder';
export { IBizStoreCloseUnpayOrderParams, IBizStoreCloseUnpayOrderResult } from './biz/store/closeUnpayOrder';
import { createOrder$ as biz_store_createOrder } from './biz/store/createOrder';
export { IBizStoreCreateOrderParams, IBizStoreCreateOrderResult } from './biz/store/createOrder';
import { getPayUrl$ as biz_store_getPayUrl } from './biz/store/getPayUrl';
export { IBizStoreGetPayUrlParams, IBizStoreGetPayUrlResult } from './biz/store/getPayUrl';
import { inquiry$ as biz_store_inquiry } from './biz/store/inquiry';
export { IBizStoreInquiryParams, IBizStoreInquiryResult } from './biz/store/inquiry';
import { isTab$ as biz_tabwindow_isTab } from './biz/tabwindow/isTab';
export { IBizTabwindowIsTabParams, IBizTabwindowIsTabResult } from './biz/tabwindow/isTab';
import { batchTags$ as biz_tag_batchTags } from './biz/tag/batchTags';
export { IBizTagBatchTagsParams, IBizTagBatchTagsResult } from './biz/tag/batchTags';
import { mark$ as biz_tag_mark } from './biz/tag/mark';
export { IBizTagMarkParams, IBizTagMarkResult } from './biz/tag/mark';
import { call$ as biz_telephone_call } from './biz/telephone/call';
export { IBizTelephoneCallParams, IBizTelephoneCallResult } from './biz/telephone/call';
import { callOrgExternalContacts$ as biz_telephone_callOrgExternalContacts } from './biz/telephone/callOrgExternalContacts';
export { IBizTelephoneCallOrgExternalContactsParams, IBizTelephoneCallOrgExternalContactsResult } from './biz/telephone/callOrgExternalContacts';
import { checkBizCall$ as biz_telephone_checkBizCall } from './biz/telephone/checkBizCall';
export { IBizTelephoneCheckBizCallParams, IBizTelephoneCheckBizCallResult } from './biz/telephone/checkBizCall';
import { quickCall$ as biz_telephone_quickCall } from './biz/telephone/quickCall';
export { IBizTelephoneQuickCallParams, IBizTelephoneQuickCallResult } from './biz/telephone/quickCall';
import { quickCallList$ as biz_telephone_quickCallList } from './biz/telephone/quickCallList';
export { IBizTelephoneQuickCallListParams, IBizTelephoneQuickCallListResult } from './biz/telephone/quickCallList';
import { showCallMenu$ as biz_telephone_showCallMenu } from './biz/telephone/showCallMenu';
export { IBizTelephoneShowCallMenuParams, IBizTelephoneShowCallMenuResult } from './biz/telephone/showCallMenu';
import { directLogin$ as biz_uic_directLogin } from './biz/uic/directLogin';
export { IBizUicDirectLoginParams, IBizUicDirectLoginResult } from './biz/uic/directLogin';
import { doLogin$ as biz_uic_doLogin } from './biz/uic/doLogin';
export { IBizUicDoLoginParams, IBizUicDoLoginResult } from './biz/uic/doLogin';
import { checkPassword$ as biz_user_checkPassword } from './biz/user/checkPassword';
export { IBizUserCheckPasswordParams, IBizUserCheckPasswordResult } from './biz/user/checkPassword';
import { get$ as biz_user_get } from './biz/user/get';
export { IBizUserGetParams, IBizUserGetResult } from './biz/user/get';
import { loginBySms$ as biz_user_loginBySms } from './biz/user/loginBySms';
export { IBizUserLoginBySmsParams, IBizUserLoginBySmsResult } from './biz/user/loginBySms';
import { loginTaobaoWithDingtalkUserToken$ as biz_user_loginTaobaoWithDingtalkUserToken } from './biz/user/loginTaobaoWithDingtalkUserToken';
export { IBizUserLoginTaobaoWithDingtalkUserTokenParams, IBizUserLoginTaobaoWithDingtalkUserTokenResult } from './biz/user/loginTaobaoWithDingtalkUserToken';
import { secretID$ as biz_user_secretID } from './biz/user/secretID';
export { IBizUserSecretIDParams, IBizUserSecretIDResult } from './biz/user/secretID';
import { acitveConversation$ as biz_util_acitveConversation } from './biz/util/acitveConversation';
export { IBizUtilAcitveConversationParams, IBizUtilAcitveConversationResult } from './biz/util/acitveConversation';
import { addCalendarEvent$ as biz_util_addCalendarEvent } from './biz/util/addCalendarEvent';
export { IBizUtilAddCalendarEventParams, IBizUtilAddCalendarEventResult } from './biz/util/addCalendarEvent';
import { addDesktopShortcuts$ as biz_util_addDesktopShortcuts } from './biz/util/addDesktopShortcuts';
export { IBizUtilAddDesktopShortcutsParams, IBizUtilAddDesktopShortcutsResult } from './biz/util/addDesktopShortcuts';
import { callComponent$ as biz_util_callComponent } from './biz/util/callComponent';
export { IBizUtilCallComponentParams, IBizUtilCallComponentResult } from './biz/util/callComponent';
import { chooseImage$ as biz_util_chooseImage } from './biz/util/chooseImage';
export { IBizUtilChooseImageParams, IBizUtilChooseImageResult } from './biz/util/chooseImage';
import { chosen$ as biz_util_chosen } from './biz/util/chosen';
export { IBizUtilChosenParams, IBizUtilChosenResult } from './biz/util/chosen';
import { clearWebStoreCache$ as biz_util_clearWebStoreCache } from './biz/util/clearWebStoreCache';
export { IBizUtilClearWebStoreCacheParams, IBizUtilClearWebStoreCacheResult } from './biz/util/clearWebStoreCache';
import { closePreviewImage$ as biz_util_closePreviewImage } from './biz/util/closePreviewImage';
export { IBizUtilClosePreviewImageParams, IBizUtilClosePreviewImageResult } from './biz/util/closePreviewImage';
import { compressImage$ as biz_util_compressImage } from './biz/util/compressImage';
export { IBizUtilCompressImageParams, IBizUtilCompressImageResult } from './biz/util/compressImage';
import { createVoipConference$ as biz_util_createVoipConference } from './biz/util/createVoipConference';
export { IBizUtilCreateVoipConferenceParams, IBizUtilCreateVoipConferenceResult } from './biz/util/createVoipConference';
import { datepicker$ as biz_util_datepicker } from './biz/util/datepicker';
export { IBizUtilDatepickerParams, IBizUtilDatepickerResult } from './biz/util/datepicker';
import { datetimepicker$ as biz_util_datetimepicker } from './biz/util/datetimepicker';
export { IBizUtilDatetimepickerParams, IBizUtilDatetimepickerResult } from './biz/util/datetimepicker';
import { decrypt$ as biz_util_decrypt } from './biz/util/decrypt';
export { IBizUtilDecryptParams, IBizUtilDecryptResult } from './biz/util/decrypt';
import { downloadFile$ as biz_util_downloadFile } from './biz/util/downloadFile';
export { IBizUtilDownloadFileParams, IBizUtilDownloadFileResult } from './biz/util/downloadFile';
import { editPicture$ as biz_util_editPicture } from './biz/util/editPicture';
export { IBizUtilEditPictureParams, IBizUtilEditPictureResult } from './biz/util/editPicture';
import { editSpaceFileOnline$ as biz_util_editSpaceFileOnline } from './biz/util/editSpaceFileOnline';
export { IBizUtilEditSpaceFileOnlineParams, IBizUtilEditSpaceFileOnlineResult } from './biz/util/editSpaceFileOnline';
import { encrypt$ as biz_util_encrypt } from './biz/util/encrypt';
export { IBizUtilEncryptParams, IBizUtilEncryptResult } from './biz/util/encrypt';
import { fetchFileData$ as biz_util_fetchFileData } from './biz/util/fetchFileData';
export { IBizUtilFetchFileDataParams, IBizUtilFetchFileDataResult } from './biz/util/fetchFileData';
import { fetchImageData$ as biz_util_fetchImageData } from './biz/util/fetchImageData';
export { IBizUtilFetchImageDataParams, IBizUtilFetchImageDataResult } from './biz/util/fetchImageData';
import { forwardDpFile$ as biz_util_forwardDpFile } from './biz/util/forwardDpFile';
export { IBizUtilForwardDpFileParams, IBizUtilForwardDpFileResult } from './biz/util/forwardDpFile';
import { getLocaleAndNationByCorpId$ as biz_util_getLocaleAndNationByCorpId } from './biz/util/getLocaleAndNationByCorpId';
export { IBizUtilGetLocaleAndNationByCorpIdParams, IBizUtilGetLocaleAndNationByCorpIdResult } from './biz/util/getLocaleAndNationByCorpId';
import { getPerfInfo$ as biz_util_getPerfInfo } from './biz/util/getPerfInfo';
export { IBizUtilGetPerfInfoParams, IBizUtilGetPerfInfoResult } from './biz/util/getPerfInfo';
import { invokeWorkbench$ as biz_util_invokeWorkbench } from './biz/util/invokeWorkbench';
export { IBizUtilInvokeWorkbenchParams, IBizUtilInvokeWorkbenchResult } from './biz/util/invokeWorkbench';
import { isEnableGPUAcceleration$ as biz_util_isEnableGPUAcceleration } from './biz/util/isEnableGPUAcceleration';
export { IBizUtilIsEnableGPUAccelerationParams, IBizUtilIsEnableGPUAccelerationResult } from './biz/util/isEnableGPUAcceleration';
import { isLocalFileExist$ as biz_util_isLocalFileExist } from './biz/util/isLocalFileExist';
export { IBizUtilIsLocalFileExistParams, IBizUtilIsLocalFileExistResult } from './biz/util/isLocalFileExist';
import { mailTo$ as biz_util_mailTo } from './biz/util/mailTo';
export { IBizUtilMailToParams, IBizUtilMailToResult } from './biz/util/mailTo';
import { multiSelect$ as biz_util_multiSelect } from './biz/util/multiSelect';
export { IBizUtilMultiSelectParams, IBizUtilMultiSelectResult } from './biz/util/multiSelect';
import { open$ as biz_util_open } from './biz/util/open';
export { IBizUtilOpenParams, IBizUtilOpenResult } from './biz/util/open';
import { openFloatWindow$ as biz_util_openFloatWindow } from './biz/util/openFloatWindow';
export { IBizUtilOpenFloatWindowParams, IBizUtilOpenFloatWindowResult } from './biz/util/openFloatWindow';
import { openLink$ as biz_util_openLink } from './biz/util/openLink';
export { IBizUtilOpenLinkParams, IBizUtilOpenLinkResult } from './biz/util/openLink';
import { openLocalFile$ as biz_util_openLocalFile } from './biz/util/openLocalFile';
export { IBizUtilOpenLocalFileParams, IBizUtilOpenLocalFileResult } from './biz/util/openLocalFile';
import { openModal$ as biz_util_openModal } from './biz/util/openModal';
export { IBizUtilOpenModalParams, IBizUtilOpenModalResult } from './biz/util/openModal';
import { openPrintWnd$ as biz_util_openPrintWnd } from './biz/util/openPrintWnd';
export { IBizUtilOpenPrintWndParams, IBizUtilOpenPrintWndResult } from './biz/util/openPrintWnd';
import { openShareDpFileWnd$ as biz_util_openShareDpFileWnd } from './biz/util/openShareDpFileWnd';
export { IBizUtilOpenShareDpFileWndParams, IBizUtilOpenShareDpFileWndResult } from './biz/util/openShareDpFileWnd';
import { openSlidePanel$ as biz_util_openSlidePanel } from './biz/util/openSlidePanel';
export { IBizUtilOpenSlidePanelParams, IBizUtilOpenSlidePanelResult } from './biz/util/openSlidePanel';
import { openWindowWithUrl$ as biz_util_openWindowWithUrl } from './biz/util/openWindowWithUrl';
export { IBizUtilOpenWindowWithUrlParams, IBizUtilOpenWindowWithUrlResult } from './biz/util/openWindowWithUrl';
import { perfBizReady$ as biz_util_perfBizReady } from './biz/util/perfBizReady';
export { IBizUtilPerfBizReadyParams, IBizUtilPerfBizReadyResult } from './biz/util/perfBizReady';
import { presentWindow$ as biz_util_presentWindow } from './biz/util/presentWindow';
export { IBizUtilPresentWindowParams, IBizUtilPresentWindowResult } from './biz/util/presentWindow';
import { previewFile$ as biz_util_previewFile } from './biz/util/previewFile';
export { IBizUtilPreviewFileParams, IBizUtilPreviewFileResult } from './biz/util/previewFile';
import { previewImage$ as biz_util_previewImage } from './biz/util/previewImage';
export { IBizUtilPreviewImageParams, IBizUtilPreviewImageResult } from './biz/util/previewImage';
import { previewVideo$ as biz_util_previewVideo } from './biz/util/previewVideo';
export { IBizUtilPreviewVideoParams, IBizUtilPreviewVideoResult } from './biz/util/previewVideo';
import { qrcode$ as biz_util_qrcode } from './biz/util/qrcode';
export { IBizUtilQrcodeParams, IBizUtilQrcodeResult } from './biz/util/qrcode';
import { queryConferenceList$ as biz_util_queryConferenceList } from './biz/util/queryConferenceList';
export { IBizUtilQueryConferenceListParams, IBizUtilQueryConferenceListResult } from './biz/util/queryConferenceList';
import { quitComponent$ as biz_util_quitComponent } from './biz/util/quitComponent';
export { IBizUtilQuitComponentParams, IBizUtilQuitComponentResult } from './biz/util/quitComponent';
import { recordVideoToUpload$ as biz_util_recordVideoToUpload } from './biz/util/recordVideoToUpload';
export { IBizUtilRecordVideoToUploadParams, IBizUtilRecordVideoToUploadResult } from './biz/util/recordVideoToUpload';
import { requestWorkbench$ as biz_util_requestWorkbench } from './biz/util/requestWorkbench';
export { IBizUtilRequestWorkbenchParams, IBizUtilRequestWorkbenchResult } from './biz/util/requestWorkbench';
import { saveImage$ as biz_util_saveImage } from './biz/util/saveImage';
export { IBizUtilSaveImageParams, IBizUtilSaveImageResult } from './biz/util/saveImage';
import { scan$ as biz_util_scan } from './biz/util/scan';
export { IBizUtilScanParams, IBizUtilScanResult } from './biz/util/scan';
import { scanCard$ as biz_util_scanCard } from './biz/util/scanCard';
export { IBizUtilScanCardParams, IBizUtilScanCardResult } from './biz/util/scanCard';
import { selectEmoji$ as biz_util_selectEmoji } from './biz/util/selectEmoji';
export { IBizUtilSelectEmojiParams, IBizUtilSelectEmojiResult } from './biz/util/selectEmoji';
import { setGPUAcceleration$ as biz_util_setGPUAcceleration } from './biz/util/setGPUAcceleration';
export { IBizUtilSetGPUAccelerationParams, IBizUtilSetGPUAccelerationResult } from './biz/util/setGPUAcceleration';
import { setScreenBrightnessAndKeepOn$ as biz_util_setScreenBrightnessAndKeepOn } from './biz/util/setScreenBrightnessAndKeepOn';
export { IBizUtilSetScreenBrightnessAndKeepOnParams, IBizUtilSetScreenBrightnessAndKeepOnResult } from './biz/util/setScreenBrightnessAndKeepOn';
import { setScreenKeepOn$ as biz_util_setScreenKeepOn } from './biz/util/setScreenKeepOn';
export { IBizUtilSetScreenKeepOnParams, IBizUtilSetScreenKeepOnResult } from './biz/util/setScreenKeepOn';
import { share$ as biz_util_share } from './biz/util/share';
export { IBizUtilShareParams, IBizUtilShareResult } from './biz/util/share';
import { shareImage$ as biz_util_shareImage } from './biz/util/shareImage';
export { IBizUtilShareImageParams, IBizUtilShareImageResult } from './biz/util/shareImage';
import { shareLongImage$ as biz_util_shareLongImage } from './biz/util/shareLongImage';
export { IBizUtilShareLongImageParams, IBizUtilShareLongImageResult } from './biz/util/shareLongImage';
import { shareMiniApp$ as biz_util_shareMiniApp } from './biz/util/shareMiniApp';
export { IBizUtilShareMiniAppParams, IBizUtilShareMiniAppResult } from './biz/util/shareMiniApp';
import { startDocSign$ as biz_util_startDocSign } from './biz/util/startDocSign';
export { IBizUtilStartDocSignParams, IBizUtilStartDocSignResult } from './biz/util/startDocSign';
import { stickPage$ as biz_util_stickPage } from './biz/util/stickPage';
export { IBizUtilStickPageParams, IBizUtilStickPageResult } from './biz/util/stickPage';
import { systemShare$ as biz_util_systemShare } from './biz/util/systemShare';
export { IBizUtilSystemShareParams, IBizUtilSystemShareResult } from './biz/util/systemShare';
import { timepicker$ as biz_util_timepicker } from './biz/util/timepicker';
export { IBizUtilTimepickerParams, IBizUtilTimepickerResult } from './biz/util/timepicker';
import { timestamp$ as biz_util_timestamp } from './biz/util/timestamp';
export { IBizUtilTimestampParams, IBizUtilTimestampResult } from './biz/util/timestamp';
import { updateTrackPageName$ as biz_util_updateTrackPageName } from './biz/util/updateTrackPageName';
export { IBizUtilUpdateTrackPageNameParams, IBizUtilUpdateTrackPageNameResult } from './biz/util/updateTrackPageName';
import { updateTrackProperties$ as biz_util_updateTrackProperties } from './biz/util/updateTrackProperties';
export { IBizUtilUpdateTrackPropertiesParams, IBizUtilUpdateTrackPropertiesResult } from './biz/util/updateTrackProperties';
import { uploadAttachment$ as biz_util_uploadAttachment } from './biz/util/uploadAttachment';
export { IBizUtilUploadAttachmentParams, IBizUtilUploadAttachmentResult } from './biz/util/uploadAttachment';
import { uploadFile$ as biz_util_uploadFile } from './biz/util/uploadFile';
export { IBizUtilUploadFileParams, IBizUtilUploadFileResult } from './biz/util/uploadFile';
import { uploadImage$ as biz_util_uploadImage } from './biz/util/uploadImage';
export { IBizUtilUploadImageParams, IBizUtilUploadImageResult } from './biz/util/uploadImage';
import { uploadImageFromCamera$ as biz_util_uploadImageFromCamera } from './biz/util/uploadImageFromCamera';
export { IBizUtilUploadImageFromCameraParams, IBizUtilUploadImageFromCameraResult } from './biz/util/uploadImageFromCamera';
import { uploadMedia$ as biz_util_uploadMedia } from './biz/util/uploadMedia';
export { IBizUtilUploadMediaParams, IBizUtilUploadMediaResult } from './biz/util/uploadMedia';
import { ut$ as biz_util_ut } from './biz/util/ut';
export { IBizUtilUtParams, IBizUtilUtResult } from './biz/util/ut';
import { vip$ as biz_util_vip } from './biz/util/vip';
export { IBizUtilVipParams, IBizUtilVipResult } from './biz/util/vip';
import { warn$ as biz_util_warn } from './biz/util/warn';
export { IBizUtilWarnParams, IBizUtilWarnResult } from './biz/util/warn';
import { watermarkCamera$ as biz_util_watermarkCamera } from './biz/util/watermarkCamera';
export { IBizUtilWatermarkCameraParams, IBizUtilWatermarkCameraResult } from './biz/util/watermarkCamera';
import { biometric$ as biz_verify_biometric } from './biz/verify/biometric';
export { IBizVerifyBiometricParams, IBizVerifyBiometricResult } from './biz/verify/biometric';
import { openBindIDCard$ as biz_verify_openBindIDCard } from './biz/verify/openBindIDCard';
export { IBizVerifyOpenBindIDCardParams, IBizVerifyOpenBindIDCardResult } from './biz/verify/openBindIDCard';
import { startAuth$ as biz_verify_startAuth } from './biz/verify/startAuth';
export { IBizVerifyStartAuthParams, IBizVerifyStartAuthResult } from './biz/verify/startAuth';
import { takePhoto$ as biz_verify_takePhoto } from './biz/verify/takePhoto';
export { IBizVerifyTakePhotoParams, IBizVerifyTakePhotoResult } from './biz/verify/takePhoto';
import { getWatermarkInfo$ as biz_watermarkCamera_getWatermarkInfo } from './biz/watermarkCamera/getWatermarkInfo';
export { IBizWatermarkCameraGetWatermarkInfoParams, IBizWatermarkCameraGetWatermarkInfoResult } from './biz/watermarkCamera/getWatermarkInfo';
import { setWatermarkInfo$ as biz_watermarkCamera_setWatermarkInfo } from './biz/watermarkCamera/setWatermarkInfo';
export { IBizWatermarkCameraSetWatermarkInfoParams, IBizWatermarkCameraSetWatermarkInfoResult } from './biz/watermarkCamera/setWatermarkInfo';
import { openPage$ as biz_wiki_openPage } from './biz/wiki/openPage';
export { IBizWikiOpenPageParams, IBizWikiOpenPageResult } from './biz/wiki/openPage';
import { saveToWiki$ as biz_wiki_saveToWiki } from './biz/wiki/saveToWiki';
export { IBizWikiSaveToWikiParams, IBizWikiSaveToWikiResult } from './biz/wiki/saveToWiki';
import { download$ as biz_zoloz_download } from './biz/zoloz/download';
export { IBizZolozDownloadParams, IBizZolozDownloadResult } from './biz/zoloz/download';
import { zimIdentity$ as biz_zoloz_zimIdentity } from './biz/zoloz/zimIdentity';
export { IBizZolozZimIdentityParams, IBizZolozZimIdentityResult } from './biz/zoloz/zimIdentity';
import { profile$ as channel_open_profile } from './channel/open/profile';
export { IChannelOpenProfileParams, IChannelOpenProfileResult } from './channel/open/profile';
import { requestAuthCode$ as channel_permission_requestAuthCode } from './channel/permission/requestAuthCode';
export { IChannelPermissionRequestAuthCodeParams, IChannelPermissionRequestAuthCodeResult } from './channel/permission/requestAuthCode';
import { clearShake$ as device_accelerometer_clearShake } from './device/accelerometer/clearShake';
export { IDeviceAccelerometerClearShakeParams, IDeviceAccelerometerClearShakeResult } from './device/accelerometer/clearShake';
import { watchShake$ as device_accelerometer_watchShake } from './device/accelerometer/watchShake';
export { IDeviceAccelerometerWatchShakeParams, IDeviceAccelerometerWatchShakeResult } from './device/accelerometer/watchShake';
import { download$ as device_audio_download } from './device/audio/download';
export { IDeviceAudioDownloadParams, IDeviceAudioDownloadResult } from './device/audio/download';
import { getDuration$ as device_audio_getDuration } from './device/audio/getDuration';
export { IDeviceAudioGetDurationParams, IDeviceAudioGetDurationResult } from './device/audio/getDuration';
import { getVolume$ as device_audio_getVolume } from './device/audio/getVolume';
export { IDeviceAudioGetVolumeParams, IDeviceAudioGetVolumeResult } from './device/audio/getVolume';
import { isMute$ as device_audio_isMute } from './device/audio/isMute';
export { IDeviceAudioIsMuteParams, IDeviceAudioIsMuteResult } from './device/audio/isMute';
import { onPlayEnd$ as device_audio_onPlayEnd } from './device/audio/onPlayEnd';
export { IDeviceAudioOnPlayEndParams, IDeviceAudioOnPlayEndResult } from './device/audio/onPlayEnd';
import { onRecordEnd$ as device_audio_onRecordEnd } from './device/audio/onRecordEnd';
export { IDeviceAudioOnRecordEndParams, IDeviceAudioOnRecordEndResult } from './device/audio/onRecordEnd';
import { pause$ as device_audio_pause } from './device/audio/pause';
export { IDeviceAudioPauseParams, IDeviceAudioPauseResult } from './device/audio/pause';
import { play$ as device_audio_play } from './device/audio/play';
export { IDeviceAudioPlayParams, IDeviceAudioPlayResult } from './device/audio/play';
import { resume$ as device_audio_resume } from './device/audio/resume';
export { IDeviceAudioResumeParams, IDeviceAudioResumeResult } from './device/audio/resume';
import { seek$ as device_audio_seek } from './device/audio/seek';
export { IDeviceAudioSeekParams, IDeviceAudioSeekResult } from './device/audio/seek';
import { setMute$ as device_audio_setMute } from './device/audio/setMute';
export { IDeviceAudioSetMuteParams, IDeviceAudioSetMuteResult } from './device/audio/setMute';
import { setVolume$ as device_audio_setVolume } from './device/audio/setVolume';
export { IDeviceAudioSetVolumeParams, IDeviceAudioSetVolumeResult } from './device/audio/setVolume';
import { startRecord$ as device_audio_startRecord } from './device/audio/startRecord';
export { IDeviceAudioStartRecordParams, IDeviceAudioStartRecordResult } from './device/audio/startRecord';
import { stop$ as device_audio_stop } from './device/audio/stop';
export { IDeviceAudioStopParams, IDeviceAudioStopResult } from './device/audio/stop';
import { stopRecord$ as device_audio_stopRecord } from './device/audio/stopRecord';
export { IDeviceAudioStopRecordParams, IDeviceAudioStopRecordResult } from './device/audio/stopRecord';
import { translateVoice$ as device_audio_translateVoice } from './device/audio/translateVoice';
export { IDeviceAudioTranslateVoiceParams, IDeviceAudioTranslateVoiceResult } from './device/audio/translateVoice';
import { upload$ as device_audio_upload } from './device/audio/upload';
export { IDeviceAudioUploadParams, IDeviceAudioUploadResult } from './device/audio/upload';
import { connectBleDevice$ as device_base_connectBleDevice } from './device/base/connectBleDevice';
export { IDeviceBaseConnectBleDeviceParams, IDeviceBaseConnectBleDeviceResult } from './device/base/connectBleDevice';
import { disConnectBleDevice$ as device_base_disConnectBleDevice } from './device/base/disConnectBleDevice';
export { IDeviceBaseDisConnectBleDeviceParams, IDeviceBaseDisConnectBleDeviceResult } from './device/base/disConnectBleDevice';
import { enableBluetooth$ as device_base_enableBluetooth } from './device/base/enableBluetooth';
export { IDeviceBaseEnableBluetoothParams, IDeviceBaseEnableBluetoothResult } from './device/base/enableBluetooth';
import { enableBluetoothV2$ as device_base_enableBluetoothV2 } from './device/base/enableBluetoothV2';
export { IDeviceBaseEnableBluetoothV2Params, IDeviceBaseEnableBluetoothV2Result } from './device/base/enableBluetoothV2';
import { enableLocation$ as device_base_enableLocation } from './device/base/enableLocation';
export { IDeviceBaseEnableLocationParams, IDeviceBaseEnableLocationResult } from './device/base/enableLocation';
import { enableWifi$ as device_base_enableWifi } from './device/base/enableWifi';
export { IDeviceBaseEnableWifiParams, IDeviceBaseEnableWifiResult } from './device/base/enableWifi';
import { getInterface$ as device_base_getInterface } from './device/base/getInterface';
export { IDeviceBaseGetInterfaceParams, IDeviceBaseGetInterfaceResult } from './device/base/getInterface';
import { getPhoneInfo$ as device_base_getPhoneInfo } from './device/base/getPhoneInfo';
export { IDeviceBaseGetPhoneInfoParams, IDeviceBaseGetPhoneInfoResult } from './device/base/getPhoneInfo';
import { getScanWifiList$ as device_base_getScanWifiList } from './device/base/getScanWifiList';
export { IDeviceBaseGetScanWifiListParams, IDeviceBaseGetScanWifiListResult } from './device/base/getScanWifiList';
import { getScanWifiListAsync$ as device_base_getScanWifiListAsync } from './device/base/getScanWifiListAsync';
export { IDeviceBaseGetScanWifiListAsyncParams, IDeviceBaseGetScanWifiListAsyncResult } from './device/base/getScanWifiListAsync';
import { getSettings$ as device_base_getSettings } from './device/base/getSettings';
export { IDeviceBaseGetSettingsParams, IDeviceBaseGetSettingsResult } from './device/base/getSettings';
import { getUUID$ as device_base_getUUID } from './device/base/getUUID';
export { IDeviceBaseGetUUIDParams, IDeviceBaseGetUUIDResult } from './device/base/getUUID';
import { getWifiStatus$ as device_base_getWifiStatus } from './device/base/getWifiStatus';
export { IDeviceBaseGetWifiStatusParams, IDeviceBaseGetWifiStatusResult } from './device/base/getWifiStatus';
import { openSystemSetting$ as device_base_openSystemSetting } from './device/base/openSystemSetting';
export { IDeviceBaseOpenSystemSettingParams, IDeviceBaseOpenSystemSettingResult } from './device/base/openSystemSetting';
import { scanBleDevice$ as device_base_scanBleDevice } from './device/base/scanBleDevice';
export { IDeviceBaseScanBleDeviceParams, IDeviceBaseScanBleDeviceResult } from './device/base/scanBleDevice';
import { sendDataToDevice$ as device_base_sendDataToDevice } from './device/base/sendDataToDevice';
export { IDeviceBaseSendDataToDeviceParams, IDeviceBaseSendDataToDeviceResult } from './device/base/sendDataToDevice';
import { startBindDevice$ as device_base_startBindDevice } from './device/base/startBindDevice';
export { IDeviceBaseStartBindDeviceParams, IDeviceBaseStartBindDeviceResult } from './device/base/startBindDevice';
import { stopScanBleDevice$ as device_base_stopScanBleDevice } from './device/base/stopScanBleDevice';
export { IDeviceBaseStopScanBleDeviceParams, IDeviceBaseStopScanBleDeviceResult } from './device/base/stopScanBleDevice';
import { unBindDevice$ as device_base_unBindDevice } from './device/base/unBindDevice';
export { IDeviceBaseUnBindDeviceParams, IDeviceBaseUnBindDeviceResult } from './device/base/unBindDevice';
import { getNetworkType$ as device_connection_getNetworkType } from './device/connection/getNetworkType';
export { IDeviceConnectionGetNetworkTypeParams, IDeviceConnectionGetNetworkTypeResult } from './device/connection/getNetworkType';
import { checkPermission$ as device_geolocation_checkPermission } from './device/geolocation/checkPermission';
export { IDeviceGeolocationCheckPermissionParams, IDeviceGeolocationCheckPermissionResult } from './device/geolocation/checkPermission';
import { checkService$ as device_geolocation_checkService } from './device/geolocation/checkService';
export { IDeviceGeolocationCheckServiceParams, IDeviceGeolocationCheckServiceResult } from './device/geolocation/checkService';
import { get$ as device_geolocation_get } from './device/geolocation/get';
export { IDeviceGeolocationGetParams, IDeviceGeolocationGetResult } from './device/geolocation/get';
import { isEnabled$ as device_geolocation_isEnabled } from './device/geolocation/isEnabled';
export { IDeviceGeolocationIsEnabledParams, IDeviceGeolocationIsEnabledResult } from './device/geolocation/isEnabled';
import { isEnabledHighAccuracy$ as device_geolocation_isEnabledHighAccuracy } from './device/geolocation/isEnabledHighAccuracy';
export { IDeviceGeolocationIsEnabledHighAccuracyParams, IDeviceGeolocationIsEnabledHighAccuracyResult } from './device/geolocation/isEnabledHighAccuracy';
import { openGps$ as device_geolocation_openGps } from './device/geolocation/openGps';
export { IDeviceGeolocationOpenGpsParams, IDeviceGeolocationOpenGpsResult } from './device/geolocation/openGps';
import { start$ as device_geolocation_start } from './device/geolocation/start';
export { IDeviceGeolocationStartParams, IDeviceGeolocationStartResult } from './device/geolocation/start';
import { status$ as device_geolocation_status } from './device/geolocation/status';
export { IDeviceGeolocationStatusParams, IDeviceGeolocationStatusResult } from './device/geolocation/status';
import { stop$ as device_geolocation_stop } from './device/geolocation/stop';
export { IDeviceGeolocationStopParams, IDeviceGeolocationStopResult } from './device/geolocation/stop';
import { changeSlatePosition$ as device_handwriting_changeSlatePosition } from './device/handwriting/changeSlatePosition';
export { IDeviceHandwritingChangeSlatePositionParams, IDeviceHandwritingChangeSlatePositionResult } from './device/handwriting/changeSlatePosition';
import { showHandPanel$ as device_handwriting_showHandPanel } from './device/handwriting/showHandPanel';
export { IDeviceHandwritingShowHandPanelParams, IDeviceHandwritingShowHandPanelResult } from './device/handwriting/showHandPanel';
import { dayStepCount$ as device_health_dayStepCount } from './device/health/dayStepCount';
export { IDeviceHealthDayStepCountParams, IDeviceHealthDayStepCountResult } from './device/health/dayStepCount';
import { stepCount$ as device_health_stepCount } from './device/health/stepCount';
export { IDeviceHealthStepCountParams, IDeviceHealthStepCountResult } from './device/health/stepCount';
import { checkInstalledApps$ as device_launcher_checkInstalledApps } from './device/launcher/checkInstalledApps';
export { IDeviceLauncherCheckInstalledAppsParams, IDeviceLauncherCheckInstalledAppsResult } from './device/launcher/checkInstalledApps';
import { launchApp$ as device_launcher_launchApp } from './device/launcher/launchApp';
export { IDeviceLauncherLaunchAppParams, IDeviceLauncherLaunchAppResult } from './device/launcher/launchApp';
import { nfcRead$ as device_nfc_nfcRead } from './device/nfc/nfcRead';
export { IDeviceNfcNfcReadParams, IDeviceNfcNfcReadResult } from './device/nfc/nfcRead';
import { nfcStop$ as device_nfc_nfcStop } from './device/nfc/nfcStop';
export { IDeviceNfcNfcStopParams, IDeviceNfcNfcStopResult } from './device/nfc/nfcStop';
import { nfcWrite$ as device_nfc_nfcWrite } from './device/nfc/nfcWrite';
export { IDeviceNfcNfcWriteParams, IDeviceNfcNfcWriteResult } from './device/nfc/nfcWrite';
import { actionSheet$ as device_notification_actionSheet } from './device/notification/actionSheet';
export { IDeviceNotificationActionSheetParams, IDeviceNotificationActionSheetResult } from './device/notification/actionSheet';
import { alert$ as device_notification_alert } from './device/notification/alert';
export { IDeviceNotificationAlertParams, IDeviceNotificationAlertResult } from './device/notification/alert';
import { confirm$ as device_notification_confirm } from './device/notification/confirm';
export { IDeviceNotificationConfirmParams, IDeviceNotificationConfirmResult } from './device/notification/confirm';
import { extendModal$ as device_notification_extendModal } from './device/notification/extendModal';
export { IDeviceNotificationExtendModalParams, IDeviceNotificationExtendModalResult } from './device/notification/extendModal';
import { getNotificationStatus$ as device_notification_getNotificationStatus } from './device/notification/getNotificationStatus';
export { IDeviceNotificationGetNotificationStatusParams, IDeviceNotificationGetNotificationStatusResult } from './device/notification/getNotificationStatus';
import { hidePreloader$ as device_notification_hidePreloader } from './device/notification/hidePreloader';
export { IDeviceNotificationHidePreloaderParams, IDeviceNotificationHidePreloaderResult } from './device/notification/hidePreloader';
import { modal$ as device_notification_modal } from './device/notification/modal';
export { IDeviceNotificationModalParams, IDeviceNotificationModalResult } from './device/notification/modal';
import { prompt$ as device_notification_prompt } from './device/notification/prompt';
export { IDeviceNotificationPromptParams, IDeviceNotificationPromptResult } from './device/notification/prompt';
import { showPreloader$ as device_notification_showPreloader } from './device/notification/showPreloader';
export { IDeviceNotificationShowPreloaderParams, IDeviceNotificationShowPreloaderResult } from './device/notification/showPreloader';
import { toast$ as device_notification_toast } from './device/notification/toast';
export { IDeviceNotificationToastParams, IDeviceNotificationToastResult } from './device/notification/toast';
import { vibrate$ as device_notification_vibrate } from './device/notification/vibrate';
export { IDeviceNotificationVibrateParams, IDeviceNotificationVibrateResult } from './device/notification/vibrate';
import { insetAdjust$ as device_screen_insetAdjust } from './device/screen/insetAdjust';
export { IDeviceScreenInsetAdjustParams, IDeviceScreenInsetAdjustResult } from './device/screen/insetAdjust';
import { resetView$ as device_screen_resetView } from './device/screen/resetView';
export { IDeviceScreenResetViewParams, IDeviceScreenResetViewResult } from './device/screen/resetView';
import { rotateView$ as device_screen_rotateView } from './device/screen/rotateView';
export { IDeviceScreenRotateViewParams, IDeviceScreenRotateViewResult } from './device/screen/rotateView';
import { setAutoOrientation$ as device_screen_setAutoOrientation } from './device/screen/setAutoOrientation';
export { IDeviceScreenSetAutoOrientationParams, IDeviceScreenSetAutoOrientationResult } from './device/screen/setAutoOrientation';
import { startMonitor$ as device_screenshot_startMonitor } from './device/screenshot/startMonitor';
export { IDeviceScreenshotStartMonitorParams, IDeviceScreenshotStartMonitorResult } from './device/screenshot/startMonitor';
import { stopMonitor$ as device_screenshot_stopMonitor } from './device/screenshot/stopMonitor';
export { IDeviceScreenshotStopMonitorParams, IDeviceScreenshotStopMonitorResult } from './device/screenshot/stopMonitor';
import { batchDisposeCard$ as interactive_bizCard_batchDisposeCard } from './interactive/bizCard/batchDisposeCard';
export { IInteractiveBizCardBatchDisposeCardParams, IInteractiveBizCardBatchDisposeCardResult } from './interactive/bizCard/batchDisposeCard';
import { getCardInfo$ as interactive_bizCard_getCardInfo } from './interactive/bizCard/getCardInfo';
export { IInteractiveBizCardGetCardInfoParams, IInteractiveBizCardGetCardInfoResult } from './interactive/bizCard/getCardInfo';
import { sendAction$ as interactive_bizCard_sendAction } from './interactive/bizCard/sendAction';
export { IInteractiveBizCardSendActionParams, IInteractiveBizCardSendActionResult } from './interactive/bizCard/sendAction';
import { beaconPickResult$ as internal_ATMBle_beaconPickResult } from './internal/ATMBle/beaconPickResult';
export { IInternalATMBleBeaconPickResultParams, IInternalATMBleBeaconPickResultResult } from './internal/ATMBle/beaconPickResult';
import { checkIn$ as internal_ATMBle_checkIn } from './internal/ATMBle/checkIn';
export { IInternalATMBleCheckInParams, IInternalATMBleCheckInResult } from './internal/ATMBle/checkIn';
import { detectFace$ as internal_ATMBle_detectFace } from './internal/ATMBle/detectFace';
export { IInternalATMBleDetectFaceParams, IInternalATMBleDetectFaceResult } from './internal/ATMBle/detectFace';
import { detectFaceFullScreen$ as internal_ATMBle_detectFaceFullScreen } from './internal/ATMBle/detectFaceFullScreen';
export { IInternalATMBleDetectFaceFullScreenParams, IInternalATMBleDetectFaceFullScreenResult } from './internal/ATMBle/detectFaceFullScreen';
import { faceManagerResult$ as internal_ATMBle_faceManagerResult } from './internal/ATMBle/faceManagerResult';
export { IInternalATMBleFaceManagerResultParams, IInternalATMBleFaceManagerResultResult } from './internal/ATMBle/faceManagerResult';
import { getBleLocalDevList$ as internal_ATMBle_getBleLocalDevList } from './internal/ATMBle/getBleLocalDevList';
export { IInternalATMBleGetBleLocalDevListParams, IInternalATMBleGetBleLocalDevListResult } from './internal/ATMBle/getBleLocalDevList';
import { getPunchEventClockCheckResult$ as internal_ATMBle_getPunchEventClockCheckResult } from './internal/ATMBle/getPunchEventClockCheckResult';
export { IInternalATMBleGetPunchEventClockCheckResultParams, IInternalATMBleGetPunchEventClockCheckResultResult } from './internal/ATMBle/getPunchEventClockCheckResult';
import { punchModePickResult$ as internal_ATMBle_punchModePickResult } from './internal/ATMBle/punchModePickResult';
export { IInternalATMBlePunchModePickResultParams, IInternalATMBlePunchModePickResultResult } from './internal/ATMBle/punchModePickResult';
import { requestPunchEvents$ as internal_ATMBle_requestPunchEvents } from './internal/ATMBle/requestPunchEvents';
export { IInternalATMBleRequestPunchEventsParams, IInternalATMBleRequestPunchEventsResult } from './internal/ATMBle/requestPunchEvents';
import { scanBleDevice$ as internal_ATMBle_scanBleDevice } from './internal/ATMBle/scanBleDevice';
export { IInternalATMBleScanBleDeviceParams, IInternalATMBleScanBleDeviceResult } from './internal/ATMBle/scanBleDevice';
import { showBlePopupWindowMock$ as internal_ATMBle_showBlePopupWindowMock } from './internal/ATMBle/showBlePopupWindowMock';
export { IInternalATMBleShowBlePopupWindowMockParams, IInternalATMBleShowBlePopupWindowMockResult } from './internal/ATMBle/showBlePopupWindowMock';
import { startMonitor$ as internal_ATMBle_startMonitor } from './internal/ATMBle/startMonitor';
export { IInternalATMBleStartMonitorParams, IInternalATMBleStartMonitorResult } from './internal/ATMBle/startMonitor';
import { stopMonitor$ as internal_ATMBle_stopMonitor } from './internal/ATMBle/stopMonitor';
export { IInternalATMBleStopMonitorParams, IInternalATMBleStopMonitorResult } from './internal/ATMBle/stopMonitor';
import { updateBluetoothConfig$ as internal_ATMBle_updateBluetoothConfig } from './internal/ATMBle/updateBluetoothConfig';
export { IInternalATMBleUpdateBluetoothConfigParams, IInternalATMBleUpdateBluetoothConfigResult } from './internal/ATMBle/updateBluetoothConfig';
import { cancelTask$ as internal_ai_cancelTask } from './internal/ai/cancelTask';
export { IInternalAiCancelTaskParams, IInternalAiCancelTaskResult } from './internal/ai/cancelTask';
import { createTask$ as internal_ai_createTask } from './internal/ai/createTask';
export { IInternalAiCreateTaskParams, IInternalAiCreateTaskResult } from './internal/ai/createTask';
import { frameUpload$ as internal_ai_frameUpload } from './internal/ai/frameUpload';
export { IInternalAiFrameUploadParams, IInternalAiFrameUploadResult } from './internal/ai/frameUpload';
import { keyboardAccessory$ as internal_alidoc_keyboardAccessory } from './internal/alidoc/keyboardAccessory';
export { IInternalAlidocKeyboardAccessoryParams, IInternalAlidocKeyboardAccessoryResult } from './internal/alidoc/keyboardAccessory';
import { keyboardCompression$ as internal_alidoc_keyboardCompression } from './internal/alidoc/keyboardCompression';
export { IInternalAlidocKeyboardCompressionParams, IInternalAlidocKeyboardCompressionResult } from './internal/alidoc/keyboardCompression';
import { addWdsDevice$ as internal_alpha_addWdsDevice } from './internal/alpha/addWdsDevice';
export { IInternalAlphaAddWdsDeviceParams, IInternalAlphaAddWdsDeviceResult } from './internal/alpha/addWdsDevice';
import { connectSecurityWiFi$ as internal_alpha_connectSecurityWiFi } from './internal/alpha/connectSecurityWiFi';
export { IInternalAlphaConnectSecurityWiFiParams, IInternalAlphaConnectSecurityWiFiResult } from './internal/alpha/connectSecurityWiFi';
import { copyPwd$ as internal_alpha_copyPwd } from './internal/alpha/copyPwd';
export { IInternalAlphaCopyPwdParams, IInternalAlphaCopyPwdResult } from './internal/alpha/copyPwd';
import { discover$ as internal_alpha_discover } from './internal/alpha/discover';
export { IInternalAlphaDiscoverParams, IInternalAlphaDiscoverResult } from './internal/alpha/discover';
import { getDevicePwd$ as internal_alpha_getDevicePwd } from './internal/alpha/getDevicePwd';
export { IInternalAlphaGetDevicePwdParams, IInternalAlphaGetDevicePwdResult } from './internal/alpha/getDevicePwd';
import { assistant$ as internal_attend_assistant } from './internal/attend/assistant';
export { IInternalAttendAssistantParams, IInternalAttendAssistantResult } from './internal/attend/assistant';
import { checkInRecords$ as internal_attend_checkInRecords } from './internal/attend/checkInRecords';
export { IInternalAttendCheckInRecordsParams, IInternalAttendCheckInRecordsResult } from './internal/attend/checkInRecords';
import { getAccurateLocatingInfo$ as internal_attend_getAccurateLocatingInfo } from './internal/attend/getAccurateLocatingInfo';
export { IInternalAttendGetAccurateLocatingInfoParams, IInternalAttendGetAccurateLocatingInfoResult } from './internal/attend/getAccurateLocatingInfo';
import { getOfflineResource$ as internal_attend_getOfflineResource } from './internal/attend/getOfflineResource';
export { IInternalAttendGetOfflineResourceParams, IInternalAttendGetOfflineResourceResult } from './internal/attend/getOfflineResource';
import { getProloadResource$ as internal_attend_getProloadResource } from './internal/attend/getProloadResource';
export { IInternalAttendGetProloadResourceParams, IInternalAttendGetProloadResourceResult } from './internal/attend/getProloadResource';
import { isBetaEnabled$ as internal_attend_isBetaEnabled } from './internal/attend/isBetaEnabled';
export { IInternalAttendIsBetaEnabledParams, IInternalAttendIsBetaEnabledResult } from './internal/attend/isBetaEnabled';
import { setOfflineResource$ as internal_attend_setOfflineResource } from './internal/attend/setOfflineResource';
export { IInternalAttendSetOfflineResourceParams, IInternalAttendSetOfflineResourceResult } from './internal/attend/setOfflineResource';
import { updateBluetoothCheckList$ as internal_attend_updateBluetoothCheckList } from './internal/attend/updateBluetoothCheckList';
export { IInternalAttendUpdateBluetoothCheckListParams, IInternalAttendUpdateBluetoothCheckListResult } from './internal/attend/updateBluetoothCheckList';
import { backToLoginPage$ as internal_auth_backToLoginPage } from './internal/auth/backToLoginPage';
export { IInternalAuthBackToLoginPageParams, IInternalAuthBackToLoginPageResult } from './internal/auth/backToLoginPage';
import { getActionTokenByPwd$ as internal_auth_getActionTokenByPwd } from './internal/auth/getActionTokenByPwd';
export { IInternalAuthGetActionTokenByPwdParams, IInternalAuthGetActionTokenByPwdResult } from './internal/auth/getActionTokenByPwd';
import { getCurrentTmpCode$ as internal_auth_getCurrentTmpCode } from './internal/auth/getCurrentTmpCode';
export { IInternalAuthGetCurrentTmpCodeParams, IInternalAuthGetCurrentTmpCodeResult } from './internal/auth/getCurrentTmpCode';
import { identifyByAlipay$ as internal_auth_identifyByAlipay } from './internal/auth/identifyByAlipay';
export { IInternalAuthIdentifyByAlipayParams, IInternalAuthIdentifyByAlipayResult } from './internal/auth/identifyByAlipay';
import { identifyByAssistantMail$ as internal_auth_identifyByAssistantMail } from './internal/auth/identifyByAssistantMail';
export { IInternalAuthIdentifyByAssistantMailParams, IInternalAuthIdentifyByAssistantMailResult } from './internal/auth/identifyByAssistantMail';
import { identifyByContactsVerify$ as internal_auth_identifyByContactsVerify } from './internal/auth/identifyByContactsVerify';
export { IInternalAuthIdentifyByContactsVerifyParams, IInternalAuthIdentifyByContactsVerifyResult } from './internal/auth/identifyByContactsVerify';
import { identifyByFace$ as internal_auth_identifyByFace } from './internal/auth/identifyByFace';
export { IInternalAuthIdentifyByFaceParams, IInternalAuthIdentifyByFaceResult } from './internal/auth/identifyByFace';
import { identifyByOIDC$ as internal_auth_identifyByOIDC } from './internal/auth/identifyByOIDC';
export { IInternalAuthIdentifyByOIDCParams, IInternalAuthIdentifyByOIDCResult } from './internal/auth/identifyByOIDC';
import { oidcPwdSetted$ as internal_auth_oidcPwdSetted } from './internal/auth/oidcPwdSetted';
export { IInternalAuthOidcPwdSettedParams, IInternalAuthOidcPwdSettedResult } from './internal/auth/oidcPwdSetted';
import { postLoginTempCode$ as internal_auth_postLoginTempCode } from './internal/auth/postLoginTempCode';
export { IInternalAuthPostLoginTempCodeParams, IInternalAuthPostLoginTempCodeResult } from './internal/auth/postLoginTempCode';
import { reLogin$ as internal_auth_reLogin } from './internal/auth/reLogin';
export { IInternalAuthReLoginParams, IInternalAuthReLoginResult } from './internal/auth/reLogin';
import { setCustomConfig$ as internal_backgroundAudio_setCustomConfig } from './internal/backgroundAudio/setCustomConfig';
export { IInternalBackgroundAudioSetCustomConfigParams, IInternalBackgroundAudioSetCustomConfigResult } from './internal/backgroundAudio/setCustomConfig';
import { getTabBadgeByKey$ as internal_badges_getTabBadgeByKey } from './internal/badges/getTabBadgeByKey';
export { IInternalBadgesGetTabBadgeByKeyParams, IInternalBadgesGetTabBadgeByKeyResult } from './internal/badges/getTabBadgeByKey';
import { bind$ as internal_beacon_bind } from './internal/beacon/bind';
export { IInternalBeaconBindParams, IInternalBeaconBindResult } from './internal/beacon/bind';
import { detectBeacons$ as internal_beacon_detectBeacons } from './internal/beacon/detectBeacons';
export { IInternalBeaconDetectBeaconsParams, IInternalBeaconDetectBeaconsResult } from './internal/beacon/detectBeacons';
import { detectStart$ as internal_beacon_detectStart } from './internal/beacon/detectStart';
export { IInternalBeaconDetectStartParams, IInternalBeaconDetectStartResult } from './internal/beacon/detectStart';
import { detectStop$ as internal_beacon_detectStop } from './internal/beacon/detectStop';
export { IInternalBeaconDetectStopParams, IInternalBeaconDetectStopResult } from './internal/beacon/detectStop';
import { makecall$ as internal_biz_makecall } from './internal/biz/makecall';
export { IInternalBizMakecallParams, IInternalBizMakecallResult } from './internal/biz/makecall';
import { openApp$ as internal_biz_openApp } from './internal/biz/openApp';
export { IInternalBizOpenAppParams, IInternalBizOpenAppResult } from './internal/biz/openApp';
import { uploadVideo$ as internal_biz_uploadVideo } from './internal/biz/uploadVideo';
export { IInternalBizUploadVideoParams, IInternalBizUploadVideoResult } from './internal/biz/uploadVideo';
import { webNotify$ as internal_biz_webNotify } from './internal/biz/webNotify';
export { IInternalBizWebNotifyParams, IInternalBizWebNotifyResult } from './internal/biz/webNotify';
import { batchAddExtContacts$ as internal_bizcard_batchAddExtContacts } from './internal/bizcard/batchAddExtContacts';
export { IInternalBizcardBatchAddExtContactsParams, IInternalBizcardBatchAddExtContactsResult } from './internal/bizcard/batchAddExtContacts';
import { companyPicker$ as internal_bizcard_companyPicker } from './internal/bizcard/companyPicker';
export { IInternalBizcardCompanyPickerParams, IInternalBizcardCompanyPickerResult } from './internal/bizcard/companyPicker';
import { friendCategories$ as internal_bizcard_friendCategories } from './internal/bizcard/friendCategories';
export { IInternalBizcardFriendCategoriesParams, IInternalBizcardFriendCategoriesResult } from './internal/bizcard/friendCategories';
import { friendCount$ as internal_bizcard_friendCount } from './internal/bizcard/friendCount';
export { IInternalBizcardFriendCountParams, IInternalBizcardFriendCountResult } from './internal/bizcard/friendCount';
import { friendPicker$ as internal_bizcard_friendPicker } from './internal/bizcard/friendPicker';
export { IInternalBizcardFriendPickerParams, IInternalBizcardFriendPickerResult } from './internal/bizcard/friendPicker';
import { friendsByCategory$ as internal_bizcard_friendsByCategory } from './internal/bizcard/friendsByCategory';
export { IInternalBizcardFriendsByCategoryParams, IInternalBizcardFriendsByCategoryResult } from './internal/bizcard/friendsByCategory';
import { friendsByName$ as internal_bizcard_friendsByName } from './internal/bizcard/friendsByName';
export { IInternalBizcardFriendsByNameParams, IInternalBizcardFriendsByNameResult } from './internal/bizcard/friendsByName';
import { friendsByRoom$ as internal_bizcard_friendsByRoom } from './internal/bizcard/friendsByRoom';
export { IInternalBizcardFriendsByRoomParams, IInternalBizcardFriendsByRoomResult } from './internal/bizcard/friendsByRoom';
import { mobileContactCount$ as internal_bizcard_mobileContactCount } from './internal/bizcard/mobileContactCount';
export { IInternalBizcardMobileContactCountParams, IInternalBizcardMobileContactCountResult } from './internal/bizcard/mobileContactCount';
import { roomsByTime$ as internal_bizcard_roomsByTime } from './internal/bizcard/roomsByTime';
export { IInternalBizcardRoomsByTimeParams, IInternalBizcardRoomsByTimeResult } from './internal/bizcard/roomsByTime';
import { search$ as internal_bizcard_search } from './internal/bizcard/search';
export { IInternalBizcardSearchParams, IInternalBizcardSearchResult } from './internal/bizcard/search';
import { timeZone$ as internal_bizcard_timeZone } from './internal/bizcard/timeZone';
export { IInternalBizcardTimeZoneParams, IInternalBizcardTimeZoneResult } from './internal/bizcard/timeZone';
import { updateAvatar$ as internal_bizcard_updateAvatar } from './internal/bizcard/updateAvatar';
export { IInternalBizcardUpdateAvatarParams, IInternalBizcardUpdateAvatarResult } from './internal/bizcard/updateAvatar';
import { allOrgs$ as internal_blebusiness_allOrgs } from './internal/blebusiness/allOrgs';
export { IInternalBlebusinessAllOrgsParams, IInternalBlebusinessAllOrgsResult } from './internal/blebusiness/allOrgs';
import { buildDeviceNick$ as internal_blebusiness_buildDeviceNick } from './internal/blebusiness/buildDeviceNick';
export { IInternalBlebusinessBuildDeviceNickParams, IInternalBlebusinessBuildDeviceNickResult } from './internal/blebusiness/buildDeviceNick';
import { currentMainOrgId$ as internal_blebusiness_currentMainOrgId } from './internal/blebusiness/currentMainOrgId';
export { IInternalBlebusinessCurrentMainOrgIdParams, IInternalBlebusinessCurrentMainOrgIdResult } from './internal/blebusiness/currentMainOrgId';
import { getDeviceInfo$ as internal_blebusiness_getDeviceInfo } from './internal/blebusiness/getDeviceInfo';
export { IInternalBlebusinessGetDeviceInfoParams, IInternalBlebusinessGetDeviceInfoResult } from './internal/blebusiness/getDeviceInfo';
import { getEndorseModelWithSecret$ as internal_blebusiness_getEndorseModelWithSecret } from './internal/blebusiness/getEndorseModelWithSecret';
export { IInternalBlebusinessGetEndorseModelWithSecretParams, IInternalBlebusinessGetEndorseModelWithSecretResult } from './internal/blebusiness/getEndorseModelWithSecret';
import { getHandshakeModelFromEndorseModel$ as internal_blebusiness_getHandshakeModelFromEndorseModel } from './internal/blebusiness/getHandshakeModelFromEndorseModel';
export { IInternalBlebusinessGetHandshakeModelFromEndorseModelParams, IInternalBlebusinessGetHandshakeModelFromEndorseModelResult } from './internal/blebusiness/getHandshakeModelFromEndorseModel';
import { popOrgCreatePage$ as internal_blebusiness_popOrgCreatePage } from './internal/blebusiness/popOrgCreatePage';
export { IInternalBlebusinessPopOrgCreatePageParams, IInternalBlebusinessPopOrgCreatePageResult } from './internal/blebusiness/popOrgCreatePage';
import { popOrgCreatePageForProjector$ as internal_blebusiness_popOrgCreatePageForProjector } from './internal/blebusiness/popOrgCreatePageForProjector';
export { IInternalBlebusinessPopOrgCreatePageForProjectorParams, IInternalBlebusinessPopOrgCreatePageForProjectorResult } from './internal/blebusiness/popOrgCreatePageForProjector';
import { queryDingWifiDevicesWithOrg$ as internal_blebusiness_queryDingWifiDevicesWithOrg } from './internal/blebusiness/queryDingWifiDevicesWithOrg';
export { IInternalBlebusinessQueryDingWifiDevicesWithOrgParams, IInternalBlebusinessQueryDingWifiDevicesWithOrgResult } from './internal/blebusiness/queryDingWifiDevicesWithOrg';
import { reportNetIsolate$ as internal_blebusiness_reportNetIsolate } from './internal/blebusiness/reportNetIsolate';
export { IInternalBlebusinessReportNetIsolateParams, IInternalBlebusinessReportNetIsolateResult } from './internal/blebusiness/reportNetIsolate';
import { showNotifyDingCard$ as internal_blebusiness_showNotifyDingCard } from './internal/blebusiness/showNotifyDingCard';
export { IInternalBlebusinessShowNotifyDingCardParams, IInternalBlebusinessShowNotifyDingCardResult } from './internal/blebusiness/showNotifyDingCard';
import { bluetoothState$ as internal_bleengine_bluetoothState } from './internal/bleengine/bluetoothState';
export { IInternalBleengineBluetoothStateParams, IInternalBleengineBluetoothStateResult } from './internal/bleengine/bluetoothState';
import { checkEnv$ as internal_bleengine_checkEnv } from './internal/bleengine/checkEnv';
export { IInternalBleengineCheckEnvParams, IInternalBleengineCheckEnvResult } from './internal/bleengine/checkEnv';
import { connectDevice$ as internal_bleengine_connectDevice } from './internal/bleengine/connectDevice';
export { IInternalBleengineConnectDeviceParams, IInternalBleengineConnectDeviceResult } from './internal/bleengine/connectDevice';
import { request$ as internal_bleengine_request } from './internal/bleengine/request';
export { IInternalBleengineRequestParams, IInternalBleengineRequestResult } from './internal/bleengine/request';
import { scanStart$ as internal_bleengine_scanStart } from './internal/bleengine/scanStart';
export { IInternalBleengineScanStartParams, IInternalBleengineScanStartResult } from './internal/bleengine/scanStart';
import { scanStop$ as internal_bleengine_scanStop } from './internal/bleengine/scanStop';
export { IInternalBleengineScanStopParams, IInternalBleengineScanStopResult } from './internal/bleengine/scanStop';
import { restore$ as internal_cache_restore } from './internal/cache/restore';
export { IInternalCacheRestoreParams, IInternalCacheRestoreResult } from './internal/cache/restore';
import { save$ as internal_cache_save } from './internal/cache/save';
export { IInternalCacheSaveParams, IInternalCacheSaveResult } from './internal/cache/save';
import { biometric$ as internal_certify_biometric } from './internal/certify/biometric';
export { IInternalCertifyBiometricParams, IInternalCertifyBiometricResult } from './internal/certify/biometric';
import { step$ as internal_certify_step } from './internal/certify/step';
export { IInternalCertifyStepParams, IInternalCertifyStepResult } from './internal/certify/step';
import { submit$ as internal_certify_submit } from './internal/certify/submit';
export { IInternalCertifySubmitParams, IInternalCertifySubmitResult } from './internal/certify/submit';
import { takePhoto$ as internal_certify_takePhoto } from './internal/certify/takePhoto';
export { IInternalCertifyTakePhotoParams, IInternalCertifyTakePhotoResult } from './internal/certify/takePhoto';
import { infoExist$ as internal_channel_infoExist } from './internal/channel/infoExist';
export { IInternalChannelInfoExistParams, IInternalChannelInfoExistResult } from './internal/channel/infoExist';
import { openPage$ as internal_channel_openPage } from './internal/channel/openPage';
export { IInternalChannelOpenPageParams, IInternalChannelOpenPageResult } from './internal/channel/openPage';
import { publish$ as internal_channel_publish } from './internal/channel/publish';
export { IInternalChannelPublishParams, IInternalChannelPublishResult } from './internal/channel/publish';
import { subscribe$ as internal_channel_subscribe } from './internal/channel/subscribe';
export { IInternalChannelSubscribeParams, IInternalChannelSubscribeResult } from './internal/channel/subscribe';
import { unsubscribe$ as internal_channel_unsubscribe } from './internal/channel/unsubscribe';
export { IInternalChannelUnsubscribeParams, IInternalChannelUnsubscribeResult } from './internal/channel/unsubscribe';
import { applyJoinGroup$ as internal_chat_applyJoinGroup } from './internal/chat/applyJoinGroup';
export { IInternalChatApplyJoinGroupParams, IInternalChatApplyJoinGroupResult } from './internal/chat/applyJoinGroup';
import { batchDisplayNames$ as internal_chat_batchDisplayNames } from './internal/chat/batchDisplayNames';
export { IInternalChatBatchDisplayNamesParams, IInternalChatBatchDisplayNamesResult } from './internal/chat/batchDisplayNames';
import { batchUserProfiles$ as internal_chat_batchUserProfiles } from './internal/chat/batchUserProfiles';
export { IInternalChatBatchUserProfilesParams, IInternalChatBatchUserProfilesResult } from './internal/chat/batchUserProfiles';
import { clearDraft$ as internal_chat_clearDraft } from './internal/chat/clearDraft';
export { IInternalChatClearDraftParams, IInternalChatClearDraftResult } from './internal/chat/clearDraft';
import { closeTopOneBoxCard$ as internal_chat_closeTopOneBoxCard } from './internal/chat/closeTopOneBoxCard';
export { IInternalChatCloseTopOneBoxCardParams, IInternalChatCloseTopOneBoxCardResult } from './internal/chat/closeTopOneBoxCard';
import { createApprovalGroup$ as internal_chat_createApprovalGroup } from './internal/chat/createApprovalGroup';
export { IInternalChatCreateApprovalGroupParams, IInternalChatCreateApprovalGroupResult } from './internal/chat/createApprovalGroup';
import { downloadMedias$ as internal_chat_downloadMedias } from './internal/chat/downloadMedias';
export { IInternalChatDownloadMediasParams, IInternalChatDownloadMediasResult } from './internal/chat/downloadMedias';
import { emotionTranslater$ as internal_chat_emotionTranslater } from './internal/chat/emotionTranslater';
export { IInternalChatEmotionTranslaterParams, IInternalChatEmotionTranslaterResult } from './internal/chat/emotionTranslater';
import { encryptOpenId$ as internal_chat_encryptOpenId } from './internal/chat/encryptOpenId';
export { IInternalChatEncryptOpenIdParams, IInternalChatEncryptOpenIdResult } from './internal/chat/encryptOpenId';
import { focusMessage$ as internal_chat_focusMessage } from './internal/chat/focusMessage';
export { IInternalChatFocusMessageParams, IInternalChatFocusMessageResult } from './internal/chat/focusMessage';
import { generateUrl$ as internal_chat_generateUrl } from './internal/chat/generateUrl';
export { IInternalChatGenerateUrlParams, IInternalChatGenerateUrlResult } from './internal/chat/generateUrl';
import { getConvInfo$ as internal_chat_getConvInfo } from './internal/chat/getConvInfo';
export { IInternalChatGetConvInfoParams, IInternalChatGetConvInfoResult } from './internal/chat/getConvInfo';
import { getConvUnreadMsgCount$ as internal_chat_getConvUnreadMsgCount } from './internal/chat/getConvUnreadMsgCount';
export { IInternalChatGetConvUnreadMsgCountParams, IInternalChatGetConvUnreadMsgCountResult } from './internal/chat/getConvUnreadMsgCount';
import { getConversations$ as internal_chat_getConversations } from './internal/chat/getConversations';
export { IInternalChatGetConversationsParams, IInternalChatGetConversationsResult } from './internal/chat/getConversations';
import { getCurrentOpenId$ as internal_chat_getCurrentOpenId } from './internal/chat/getCurrentOpenId';
export { IInternalChatGetCurrentOpenIdParams, IInternalChatGetCurrentOpenIdResult } from './internal/chat/getCurrentOpenId';
import { getDisplayName$ as internal_chat_getDisplayName } from './internal/chat/getDisplayName';
export { IInternalChatGetDisplayNameParams, IInternalChatGetDisplayNameResult } from './internal/chat/getDisplayName';
import { getDraft$ as internal_chat_getDraft } from './internal/chat/getDraft';
export { IInternalChatGetDraftParams, IInternalChatGetDraftResult } from './internal/chat/getDraft';
import { getDraftAndClear$ as internal_chat_getDraftAndClear } from './internal/chat/getDraftAndClear';
export { IInternalChatGetDraftAndClearParams, IInternalChatGetDraftAndClearResult } from './internal/chat/getDraftAndClear';
import { getEncryptImageThumb$ as internal_chat_getEncryptImageThumb } from './internal/chat/getEncryptImageThumb';
export { IInternalChatGetEncryptImageThumbParams, IInternalChatGetEncryptImageThumbResult } from './internal/chat/getEncryptImageThumb';
import { getMessageList$ as internal_chat_getMessageList } from './internal/chat/getMessageList';
export { IInternalChatGetMessageListParams, IInternalChatGetMessageListResult } from './internal/chat/getMessageList';
import { getPickedImageThumbData$ as internal_chat_getPickedImageThumbData } from './internal/chat/getPickedImageThumbData';
export { IInternalChatGetPickedImageThumbDataParams, IInternalChatGetPickedImageThumbDataResult } from './internal/chat/getPickedImageThumbData';
import { getRichTextPayload$ as internal_chat_getRichTextPayload } from './internal/chat/getRichTextPayload';
export { IInternalChatGetRichTextPayloadParams, IInternalChatGetRichTextPayloadResult } from './internal/chat/getRichTextPayload';
import { getTopic$ as internal_chat_getTopic } from './internal/chat/getTopic';
export { IInternalChatGetTopicParams, IInternalChatGetTopicResult } from './internal/chat/getTopic';
import { getTopicReplys$ as internal_chat_getTopicReplys } from './internal/chat/getTopicReplys';
export { IInternalChatGetTopicReplysParams, IInternalChatGetTopicReplysResult } from './internal/chat/getTopicReplys';
import { getTopicStickers$ as internal_chat_getTopicStickers } from './internal/chat/getTopicStickers';
export { IInternalChatGetTopicStickersParams, IInternalChatGetTopicStickersResult } from './internal/chat/getTopicStickers';
import { getUserProfile$ as internal_chat_getUserProfile } from './internal/chat/getUserProfile';
export { IInternalChatGetUserProfileParams, IInternalChatGetUserProfileResult } from './internal/chat/getUserProfile';
import { joinGroupByBizType$ as internal_chat_joinGroupByBizType } from './internal/chat/joinGroupByBizType';
export { IInternalChatJoinGroupByBizTypeParams, IInternalChatJoinGroupByBizTypeResult } from './internal/chat/joinGroupByBizType';
import { markSettingsReddot$ as internal_chat_markSettingsReddot } from './internal/chat/markSettingsReddot';
export { IInternalChatMarkSettingsReddotParams, IInternalChatMarkSettingsReddotResult } from './internal/chat/markSettingsReddot';
import { openConversation$ as internal_chat_openConversation } from './internal/chat/openConversation';
export { IInternalChatOpenConversationParams, IInternalChatOpenConversationResult } from './internal/chat/openConversation';
import { pickAtList$ as internal_chat_pickAtList } from './internal/chat/pickAtList';
export { IInternalChatPickAtListParams, IInternalChatPickAtListResult } from './internal/chat/pickAtList';
import { pickGroupConversation$ as internal_chat_pickGroupConversation } from './internal/chat/pickGroupConversation';
export { IInternalChatPickGroupConversationParams, IInternalChatPickGroupConversationResult } from './internal/chat/pickGroupConversation';
import { pickImage$ as internal_chat_pickImage } from './internal/chat/pickImage';
export { IInternalChatPickImageParams, IInternalChatPickImageResult } from './internal/chat/pickImage';
import { previewMessage$ as internal_chat_previewMessage } from './internal/chat/previewMessage';
export { IInternalChatPreviewMessageParams, IInternalChatPreviewMessageResult } from './internal/chat/previewMessage';
import { recallMessage$ as internal_chat_recallMessage } from './internal/chat/recallMessage';
export { IInternalChatRecallMessageParams, IInternalChatRecallMessageResult } from './internal/chat/recallMessage';
import { registTopicMessageListener$ as internal_chat_registTopicMessageListener } from './internal/chat/registTopicMessageListener';
export { IInternalChatRegistTopicMessageListenerParams, IInternalChatRegistTopicMessageListenerResult } from './internal/chat/registTopicMessageListener';
import { selectAndSendText$ as internal_chat_selectAndSendText } from './internal/chat/selectAndSendText';
export { IInternalChatSelectAndSendTextParams, IInternalChatSelectAndSendTextResult } from './internal/chat/selectAndSendText';
import { sendBizMessage$ as internal_chat_sendBizMessage } from './internal/chat/sendBizMessage';
export { IInternalChatSendBizMessageParams, IInternalChatSendBizMessageResult } from './internal/chat/sendBizMessage';
import { sendCustomMessage$ as internal_chat_sendCustomMessage } from './internal/chat/sendCustomMessage';
export { IInternalChatSendCustomMessageParams, IInternalChatSendCustomMessageResult } from './internal/chat/sendCustomMessage';
import { sendMultiMsges$ as internal_chat_sendMultiMsges } from './internal/chat/sendMultiMsges';
export { IInternalChatSendMultiMsgesParams, IInternalChatSendMultiMsgesResult } from './internal/chat/sendMultiMsges';
import { sendReplyMessage$ as internal_chat_sendReplyMessage } from './internal/chat/sendReplyMessage';
export { IInternalChatSendReplyMessageParams, IInternalChatSendReplyMessageResult } from './internal/chat/sendReplyMessage';
import { sendRichTextMessage$ as internal_chat_sendRichTextMessage } from './internal/chat/sendRichTextMessage';
export { IInternalChatSendRichTextMessageParams, IInternalChatSendRichTextMessageResult } from './internal/chat/sendRichTextMessage';
import { setHasRichTextDraft$ as internal_chat_setHasRichTextDraft } from './internal/chat/setHasRichTextDraft';
export { IInternalChatSetHasRichTextDraftParams, IInternalChatSetHasRichTextDraftResult } from './internal/chat/setHasRichTextDraft';
import { showMessageMenu$ as internal_chat_showMessageMenu } from './internal/chat/showMessageMenu';
export { IInternalChatShowMessageMenuParams, IInternalChatShowMessageMenuResult } from './internal/chat/showMessageMenu';
import { showTopicEmotionBar$ as internal_chat_showTopicEmotionBar } from './internal/chat/showTopicEmotionBar';
export { IInternalChatShowTopicEmotionBarParams, IInternalChatShowTopicEmotionBarResult } from './internal/chat/showTopicEmotionBar';
import { stickerReply$ as internal_chat_stickerReply } from './internal/chat/stickerReply';
export { IInternalChatStickerReplyParams, IInternalChatStickerReplyResult } from './internal/chat/stickerReply';
import { toConversation$ as internal_chat_toConversation } from './internal/chat/toConversation';
export { IInternalChatToConversationParams, IInternalChatToConversationResult } from './internal/chat/toConversation';
import { transmitMsg$ as internal_chat_transmitMsg } from './internal/chat/transmitMsg';
export { IInternalChatTransmitMsgParams, IInternalChatTransmitMsgResult } from './internal/chat/transmitMsg';
import { unregistTopicMessageListener$ as internal_chat_unregistTopicMessageListener } from './internal/chat/unregistTopicMessageListener';
export { IInternalChatUnregistTopicMessageListenerParams, IInternalChatUnregistTopicMessageListenerResult } from './internal/chat/unregistTopicMessageListener';
import { uploadPickedImage$ as internal_chat_uploadPickedImage } from './internal/chat/uploadPickedImage';
export { IInternalChatUploadPickedImageParams, IInternalChatUploadPickedImageResult } from './internal/chat/uploadPickedImage';
import { getStorage$ as internal_circle_getStorage } from './internal/circle/getStorage';
export { IInternalCircleGetStorageParams, IInternalCircleGetStorageResult } from './internal/circle/getStorage';
import { removeStorage$ as internal_circle_removeStorage } from './internal/circle/removeStorage';
export { IInternalCircleRemoveStorageParams, IInternalCircleRemoveStorageResult } from './internal/circle/removeStorage';
import { setStorage$ as internal_circle_setStorage } from './internal/circle/setStorage';
export { IInternalCircleSetStorageParams, IInternalCircleSetStorageResult } from './internal/circle/setStorage';
import { getData$ as internal_clipboardData_getData } from './internal/clipboardData/getData';
export { IInternalClipboardDataGetDataParams, IInternalClipboardDataGetDataResult } from './internal/clipboardData/getData';
import { sendMessage$ as internal_coap_sendMessage } from './internal/coap/sendMessage';
export { IInternalCoapSendMessageParams, IInternalCoapSendMessageResult } from './internal/coap/sendMessage';
import { chooseEnterpriseUser$ as internal_contact_chooseEnterpriseUser } from './internal/contact/chooseEnterpriseUser';
export { IInternalContactChooseEnterpriseUserParams, IInternalContactChooseEnterpriseUserResult } from './internal/contact/chooseEnterpriseUser';
import { chooseMobileContact$ as internal_contact_chooseMobileContact } from './internal/contact/chooseMobileContact';
export { IInternalContactChooseMobileContactParams, IInternalContactChooseMobileContactResult } from './internal/contact/chooseMobileContact';
import { chooseOrgAddress$ as internal_contact_chooseOrgAddress } from './internal/contact/chooseOrgAddress';
export { IInternalContactChooseOrgAddressParams, IInternalContactChooseOrgAddressResult } from './internal/contact/chooseOrgAddress';
import { commonPicker$ as internal_contact_commonPicker } from './internal/contact/commonPicker';
export { IInternalContactCommonPickerParams, IInternalContactCommonPickerResult } from './internal/contact/commonPicker';
import { internalComplexPicker$ as internal_contact_internalComplexPicker } from './internal/contact/internalComplexPicker';
export { IInternalContactInternalComplexPickerParams, IInternalContactInternalComplexPickerResult } from './internal/contact/internalComplexPicker';
import { internalComplexPickerWithUid$ as internal_contact_internalComplexPickerWithUid } from './internal/contact/internalComplexPickerWithUid';
export { IInternalContactInternalComplexPickerWithUidParams, IInternalContactInternalComplexPickerWithUidResult } from './internal/contact/internalComplexPickerWithUid';
import { openSelectUserWnd$ as internal_contact_openSelectUserWnd } from './internal/contact/openSelectUserWnd';
export { IInternalContactOpenSelectUserWndParams, IInternalContactOpenSelectUserWndResult } from './internal/contact/openSelectUserWnd';
import { queryPickedResult$ as internal_contact_queryPickedResult } from './internal/contact/queryPickedResult';
export { IInternalContactQueryPickedResultParams, IInternalContactQueryPickedResultResult } from './internal/contact/queryPickedResult';
import { removePickedResult$ as internal_contact_removePickedResult } from './internal/contact/removePickedResult';
export { IInternalContactRemovePickedResultParams, IInternalContactRemovePickedResultResult } from './internal/contact/removePickedResult';
import { getProperty$ as internal_conversation_getProperty } from './internal/conversation/getProperty';
export { IInternalConversationGetPropertyParams, IInternalConversationGetPropertyResult } from './internal/conversation/getProperty';
import { mute$ as internal_conversation_mute } from './internal/conversation/mute';
export { IInternalConversationMuteParams, IInternalConversationMuteResult } from './internal/conversation/mute';
import { switchEffectiveMode$ as internal_conversation_switchEffectiveMode } from './internal/conversation/switchEffectiveMode';
export { IInternalConversationSwitchEffectiveModeParams, IInternalConversationSwitchEffectiveModeResult } from './internal/conversation/switchEffectiveMode';
import { top$ as internal_conversation_top } from './internal/conversation/top';
export { IInternalConversationTopParams, IInternalConversationTopResult } from './internal/conversation/top';
import { listCorpInfo$ as internal_corps_listCorpInfo } from './internal/corps/listCorpInfo';
export { IInternalCorpsListCorpInfoParams, IInternalCorpsListCorpInfoResult } from './internal/corps/listCorpInfo';
import { industryInfo$ as internal_createOrg_industryInfo } from './internal/createOrg/industryInfo';
export { IInternalCreateOrgIndustryInfoParams, IInternalCreateOrgIndustryInfoResult } from './internal/createOrg/industryInfo';
import { lastCreateOrgInfo$ as internal_createOrg_lastCreateOrgInfo } from './internal/createOrg/lastCreateOrgInfo';
export { IInternalCreateOrgLastCreateOrgInfoParams, IInternalCreateOrgLastCreateOrgInfoResult } from './internal/createOrg/lastCreateOrgInfo';
import { successJump$ as internal_createOrg_successJump } from './internal/createOrg/successJump';
export { IInternalCreateOrgSuccessJumpParams, IInternalCreateOrgSuccessJumpResult } from './internal/createOrg/successJump';
import { cancelDecryptAndUpload$ as internal_cspace_cancelDecryptAndUpload } from './internal/cspace/cancelDecryptAndUpload';
export { IInternalCspaceCancelDecryptAndUploadParams, IInternalCspaceCancelDecryptAndUploadResult } from './internal/cspace/cancelDecryptAndUpload';
import { cancelFileUpload$ as internal_cspace_cancelFileUpload } from './internal/cspace/cancelFileUpload';
export { IInternalCspaceCancelFileUploadParams, IInternalCspaceCancelFileUploadResult } from './internal/cspace/cancelFileUpload';
import { cidToSpaceId$ as internal_cspace_cidToSpaceId } from './internal/cspace/cidToSpaceId';
export { IInternalCspaceCidToSpaceIdParams, IInternalCspaceCidToSpaceIdResult } from './internal/cspace/cidToSpaceId';
import { decryptAndUpload$ as internal_cspace_decryptAndUpload } from './internal/cspace/decryptAndUpload';
export { IInternalCspaceDecryptAndUploadParams, IInternalCspaceDecryptAndUploadResult } from './internal/cspace/decryptAndUpload';
import { downloadFile$ as internal_cspace_downloadFile } from './internal/cspace/downloadFile';
export { IInternalCspaceDownloadFileParams, IInternalCspaceDownloadFileResult } from './internal/cspace/downloadFile';
import { edit$ as internal_cspace_edit } from './internal/cspace/edit';
export { IInternalCspaceEditParams, IInternalCspaceEditResult } from './internal/cspace/edit';
import { fileUpload$ as internal_cspace_fileUpload } from './internal/cspace/fileUpload';
export { IInternalCspaceFileUploadParams, IInternalCspaceFileUploadResult } from './internal/cspace/fileUpload';
import { getMediaInfo$ as internal_cspace_getMediaInfo } from './internal/cspace/getMediaInfo';
export { IInternalCspaceGetMediaInfoParams, IInternalCspaceGetMediaInfoResult } from './internal/cspace/getMediaInfo';
import { getToken$ as internal_cspace_getToken } from './internal/cspace/getToken';
export { IInternalCspaceGetTokenParams, IInternalCspaceGetTokenResult } from './internal/cspace/getToken';
import { openCloudPrintPluginWnd$ as internal_cspace_openCloudPrintPluginWnd } from './internal/cspace/openCloudPrintPluginWnd';
export { IInternalCspaceOpenCloudPrintPluginWndParams, IInternalCspaceOpenCloudPrintPluginWndResult } from './internal/cspace/openCloudPrintPluginWnd';
import { openCloudPrintWnd$ as internal_cspace_openCloudPrintWnd } from './internal/cspace/openCloudPrintWnd';
export { IInternalCspaceOpenCloudPrintWndParams, IInternalCspaceOpenCloudPrintWndResult } from './internal/cspace/openCloudPrintWnd';
import { openEditInviteWnd$ as internal_cspace_openEditInviteWnd } from './internal/cspace/openEditInviteWnd';
export { IInternalCspaceOpenEditInviteWndParams, IInternalCspaceOpenEditInviteWndResult } from './internal/cspace/openEditInviteWnd';
import { openFolder$ as internal_cspace_openFolder } from './internal/cspace/openFolder';
export { IInternalCspaceOpenFolderParams, IInternalCspaceOpenFolderResult } from './internal/cspace/openFolder';
import { requestDentryUrl$ as internal_cspace_requestDentryUrl } from './internal/cspace/requestDentryUrl';
export { IInternalCspaceRequestDentryUrlParams, IInternalCspaceRequestDentryUrlResult } from './internal/cspace/requestDentryUrl';
import { sendMsgToRequestPermission$ as internal_cspace_sendMsgToRequestPermission } from './internal/cspace/sendMsgToRequestPermission';
export { IInternalCspaceSendMsgToRequestPermissionParams, IInternalCspaceSendMsgToRequestPermissionResult } from './internal/cspace/sendMsgToRequestPermission';
import { uploadFile$ as internal_cspace_uploadFile } from './internal/cspace/uploadFile';
export { IInternalCspaceUploadFileParams, IInternalCspaceUploadFileResult } from './internal/cspace/uploadFile';
import { hideQuickEntrance$ as internal_customerService_hideQuickEntrance } from './internal/customerService/hideQuickEntrance';
export { IInternalCustomerServiceHideQuickEntranceParams, IInternalCustomerServiceHideQuickEntranceResult } from './internal/customerService/hideQuickEntrance';
import { isRecording$ as internal_customerService_isRecording } from './internal/customerService/isRecording';
export { IInternalCustomerServiceIsRecordingParams, IInternalCustomerServiceIsRecordingResult } from './internal/customerService/isRecording';
import { showQuickEntrance$ as internal_customerService_showQuickEntrance } from './internal/customerService/showQuickEntrance';
export { IInternalCustomerServiceShowQuickEntranceParams, IInternalCustomerServiceShowQuickEntranceResult } from './internal/customerService/showQuickEntrance';
import { startRecord$ as internal_customerService_startRecord } from './internal/customerService/startRecord';
export { IInternalCustomerServiceStartRecordParams, IInternalCustomerServiceStartRecordResult } from './internal/customerService/startRecord';
import { stopRecord$ as internal_customerService_stopRecord } from './internal/customerService/stopRecord';
export { IInternalCustomerServiceStopRecordParams, IInternalCustomerServiceStopRecordResult } from './internal/customerService/stopRecord';
import { tryUploadRecords$ as internal_customerService_tryUploadRecords } from './internal/customerService/tryUploadRecords';
export { IInternalCustomerServiceTryUploadRecordsParams, IInternalCustomerServiceTryUploadRecordsResult } from './internal/customerService/tryUploadRecords';
import { getFastCheckInInfo$ as internal_diagnostic_getFastCheckInInfo } from './internal/diagnostic/getFastCheckInInfo';
export { IInternalDiagnosticGetFastCheckInInfoParams, IInternalDiagnosticGetFastCheckInInfoResult } from './internal/diagnostic/getFastCheckInInfo';
import { getLocalErrorMsg$ as internal_diagnostic_getLocalErrorMsg } from './internal/diagnostic/getLocalErrorMsg';
export { IInternalDiagnosticGetLocalErrorMsgParams, IInternalDiagnosticGetLocalErrorMsgResult } from './internal/diagnostic/getLocalErrorMsg';
import { bindWorkMobile$ as internal_dingCard_bindWorkMobile } from './internal/dingCard/bindWorkMobile';
export { IInternalDingCardBindWorkMobileParams, IInternalDingCardBindWorkMobileResult } from './internal/dingCard/bindWorkMobile';
import { unbindWorkMobile$ as internal_dingCard_unbindWorkMobile } from './internal/dingCard/unbindWorkMobile';
export { IInternalDingCardUnbindWorkMobileParams, IInternalDingCardUnbindWorkMobileResult } from './internal/dingCard/unbindWorkMobile';
import { auth$ as internal_dingbadge_auth } from './internal/dingbadge/auth';
export { IInternalDingbadgeAuthParams, IInternalDingbadgeAuthResult } from './internal/dingbadge/auth';
import { codeInvalidReport$ as internal_dingbadge_codeInvalidReport } from './internal/dingbadge/codeInvalidReport';
export { IInternalDingbadgeCodeInvalidReportParams, IInternalDingbadgeCodeInvalidReportResult } from './internal/dingbadge/codeInvalidReport';
import { isAuth$ as internal_dingbadge_isAuth } from './internal/dingbadge/isAuth';
export { IInternalDingbadgeIsAuthParams, IInternalDingbadgeIsAuthResult } from './internal/dingbadge/isAuth';
import { refreshCode$ as internal_dingbadge_refreshCode } from './internal/dingbadge/refreshCode';
export { IInternalDingbadgeRefreshCodeParams, IInternalDingbadgeRefreshCodeResult } from './internal/dingbadge/refreshCode';
import { refreshData$ as internal_dingbadge_refreshData } from './internal/dingbadge/refreshData';
export { IInternalDingbadgeRefreshDataParams, IInternalDingbadgeRefreshDataResult } from './internal/dingbadge/refreshData';
import { startGenCode$ as internal_dingbadge_startGenCode } from './internal/dingbadge/startGenCode';
export { IInternalDingbadgeStartGenCodeParams, IInternalDingbadgeStartGenCodeResult } from './internal/dingbadge/startGenCode';
import { stopGenCode$ as internal_dingbadge_stopGenCode } from './internal/dingbadge/stopGenCode';
export { IInternalDingbadgeStopGenCodeParams, IInternalDingbadgeStopGenCodeResult } from './internal/dingbadge/stopGenCode';
import { unAuth$ as internal_dingbadge_unAuth } from './internal/dingbadge/unAuth';
export { IInternalDingbadgeUnAuthParams, IInternalDingbadgeUnAuthResult } from './internal/dingbadge/unAuth';
import { visit$ as internal_dingbadge_visit } from './internal/dingbadge/visit';
export { IInternalDingbadgeVisitParams, IInternalDingbadgeVisitResult } from './internal/dingbadge/visit';
import { bindAlipay$ as internal_dingpay_bindAlipay } from './internal/dingpay/bindAlipay';
export { IInternalDingpayBindAlipayParams, IInternalDingpayBindAlipayResult } from './internal/dingpay/bindAlipay';
import { unbindAlipay$ as internal_dingpay_unbindAlipay } from './internal/dingpay/unbindAlipay';
export { IInternalDingpayUnbindAlipayParams, IInternalDingpayUnbindAlipayResult } from './internal/dingpay/unbindAlipay';
import { getParams$ as internal_efficiencyKit_getParams } from './internal/efficiencyKit/getParams';
export { IInternalEfficiencyKitGetParamsParams, IInternalEfficiencyKitGetParamsResult } from './internal/efficiencyKit/getParams';
import { openCustomGroupList$ as internal_efficiencyKit_openCustomGroupList } from './internal/efficiencyKit/openCustomGroupList';
export { IInternalEfficiencyKitOpenCustomGroupListParams, IInternalEfficiencyKitOpenCustomGroupListResult } from './internal/efficiencyKit/openCustomGroupList';
import { setParams$ as internal_efficiencyKit_setParams } from './internal/efficiencyKit/setParams';
export { IInternalEfficiencyKitSetParamsParams, IInternalEfficiencyKitSetParamsResult } from './internal/efficiencyKit/setParams';
import { info$ as internal_enterpriseEncryption_info } from './internal/enterpriseEncryption/info';
export { IInternalEnterpriseEncryptionInfoParams, IInternalEnterpriseEncryptionInfoResult } from './internal/enterpriseEncryption/info';
import { sendMessageToMaster$ as internal_enterpriseEncryption_sendMessageToMaster } from './internal/enterpriseEncryption/sendMessageToMaster';
export { IInternalEnterpriseEncryptionSendMessageToMasterParams, IInternalEnterpriseEncryptionSendMessageToMasterResult } from './internal/enterpriseEncryption/sendMessageToMaster';
import { turnOnWithAnimation$ as internal_enterpriseEncryption_turnOnWithAnimation } from './internal/enterpriseEncryption/turnOnWithAnimation';
export { IInternalEnterpriseEncryptionTurnOnWithAnimationParams, IInternalEnterpriseEncryptionTurnOnWithAnimationResult } from './internal/enterpriseEncryption/turnOnWithAnimation';
import { prepareScan$ as internal_faceScan_prepareScan } from './internal/faceScan/prepareScan';
export { IInternalFaceScanPrepareScanParams, IInternalFaceScanPrepareScanResult } from './internal/faceScan/prepareScan';
import { scan$ as internal_faceScan_scan } from './internal/faceScan/scan';
export { IInternalFaceScanScanParams, IInternalFaceScanScanResult } from './internal/faceScan/scan';
import { detectFace$ as internal_facialRecognition_detectFace } from './internal/facialRecognition/detectFace';
export { IInternalFacialRecognitionDetectFaceParams, IInternalFacialRecognitionDetectFaceResult } from './internal/facialRecognition/detectFace';
import { init$ as internal_facialRecognition_init } from './internal/facialRecognition/init';
export { IInternalFacialRecognitionInitParams, IInternalFacialRecognitionInitResult } from './internal/facialRecognition/init';
import { checkEnvironment$ as internal_focus_checkEnvironment } from './internal/focus/checkEnvironment';
export { IInternalFocusCheckEnvironmentParams, IInternalFocusCheckEnvironmentResult } from './internal/focus/checkEnvironment';
import { closeFocusFloatingView$ as internal_focus_closeFocusFloatingView } from './internal/focus/closeFocusFloatingView';
export { IInternalFocusCloseFocusFloatingViewParams, IInternalFocusCloseFocusFloatingViewResult } from './internal/focus/closeFocusFloatingView';
import { getCurrentProjectionData$ as internal_focus_getCurrentProjectionData } from './internal/focus/getCurrentProjectionData';
export { IInternalFocusGetCurrentProjectionDataParams, IInternalFocusGetCurrentProjectionDataResult } from './internal/focus/getCurrentProjectionData';
import { openFocusFloatingView$ as internal_focus_openFocusFloatingView } from './internal/focus/openFocusFloatingView';
export { IInternalFocusOpenFocusFloatingViewParams, IInternalFocusOpenFocusFloatingViewResult } from './internal/focus/openFocusFloatingView';
import { popProjectionSelector$ as internal_focus_popProjectionSelector } from './internal/focus/popProjectionSelector';
export { IInternalFocusPopProjectionSelectorParams, IInternalFocusPopProjectionSelectorResult } from './internal/focus/popProjectionSelector';
import { register$ as internal_focus_register } from './internal/focus/register';
export { IInternalFocusRegisterParams, IInternalFocusRegisterResult } from './internal/focus/register';
import { startProjection$ as internal_focus_startProjection } from './internal/focus/startProjection';
export { IInternalFocusStartProjectionParams, IInternalFocusStartProjectionResult } from './internal/focus/startProjection';
import { stopProjection$ as internal_focus_stopProjection } from './internal/focus/stopProjection';
export { IInternalFocusStopProjectionParams, IInternalFocusStopProjectionResult } from './internal/focus/stopProjection';
import { unRegister$ as internal_focus_unRegister } from './internal/focus/unRegister';
export { IInternalFocusUnRegisterParams, IInternalFocusUnRegisterResult } from './internal/focus/unRegister';
import { getGoogleServiceInfo$ as internal_googlePlayService_getGoogleServiceInfo } from './internal/googlePlayService/getGoogleServiceInfo';
export { IInternalGooglePlayServiceGetGoogleServiceInfoParams, IInternalGooglePlayServiceGetGoogleServiceInfoResult } from './internal/googlePlayService/getGoogleServiceInfo';
import { auth$ as internal_groupapp_auth } from './internal/groupapp/auth';
export { IInternalGroupappAuthParams, IInternalGroupappAuthResult } from './internal/groupapp/auth';
import { sendMsgAsUser$ as internal_groupapp_sendMsgAsUser } from './internal/groupapp/sendMsgAsUser';
export { IInternalGroupappSendMsgAsUserParams, IInternalGroupappSendMsgAsUserResult } from './internal/groupapp/sendMsgAsUser';
import { detail$ as internal_groupbill_detail } from './internal/groupbill/detail';
export { IInternalGroupbillDetailParams, IInternalGroupbillDetailResult } from './internal/groupbill/detail';
import { query$ as internal_groupbill_query } from './internal/groupbill/query';
export { IInternalGroupbillQueryParams, IInternalGroupbillQueryResult } from './internal/groupbill/query';
import { send$ as internal_groupbill_send } from './internal/groupbill/send';
export { IInternalGroupbillSendParams, IInternalGroupbillSendResult } from './internal/groupbill/send';
import { closeGuideBanner$ as internal_guide_closeGuideBanner } from './internal/guide/closeGuideBanner';
export { IInternalGuideCloseGuideBannerParams, IInternalGuideCloseGuideBannerResult } from './internal/guide/closeGuideBanner';
import { checkHealthPermission$ as internal_health_checkHealthPermission } from './internal/health/checkHealthPermission';
export { IInternalHealthCheckHealthPermissionParams, IInternalHealthCheckHealthPermissionResult } from './internal/health/checkHealthPermission';
import { checkSensorPermission$ as internal_health_checkSensorPermission } from './internal/health/checkSensorPermission';
export { IInternalHealthCheckSensorPermissionParams, IInternalHealthCheckSensorPermissionResult } from './internal/health/checkSensorPermission';
import { disableStepCountSync$ as internal_health_disableStepCountSync } from './internal/health/disableStepCountSync';
export { IInternalHealthDisableStepCountSyncParams, IInternalHealthDisableStepCountSyncResult } from './internal/health/disableStepCountSync';
import { enableStepCountSync$ as internal_health_enableStepCountSync } from './internal/health/enableStepCountSync';
export { IInternalHealthEnableStepCountSyncParams, IInternalHealthEnableStepCountSyncResult } from './internal/health/enableStepCountSync';
import { getTodaysStep$ as internal_health_getTodaysStep } from './internal/health/getTodaysStep';
export { IInternalHealthGetTodaysStepParams, IInternalHealthGetTodaysStepResult } from './internal/health/getTodaysStep';
import { getTodaysStepCount$ as internal_health_getTodaysStepCount } from './internal/health/getTodaysStepCount';
export { IInternalHealthGetTodaysStepCountParams, IInternalHealthGetTodaysStepCountResult } from './internal/health/getTodaysStepCount';
import { isShowPermissionTip$ as internal_health_isShowPermissionTip } from './internal/health/isShowPermissionTip';
export { IInternalHealthIsShowPermissionTipParams, IInternalHealthIsShowPermissionTipResult } from './internal/health/isShowPermissionTip';
import { openAISport$ as internal_health_openAISport } from './internal/health/openAISport';
export { IInternalHealthOpenAISportParams, IInternalHealthOpenAISportResult } from './internal/health/openAISport';
import { pedometerStatus$ as internal_health_pedometerStatus } from './internal/health/pedometerStatus';
export { IInternalHealthPedometerStatusParams, IInternalHealthPedometerStatusResult } from './internal/health/pedometerStatus';
import { queryHealthPermission$ as internal_health_queryHealthPermission } from './internal/health/queryHealthPermission';
export { IInternalHealthQueryHealthPermissionParams, IInternalHealthQueryHealthPermissionResult } from './internal/health/queryHealthPermission';
import { requestHealthPermission$ as internal_health_requestHealthPermission } from './internal/health/requestHealthPermission';
export { IInternalHealthRequestHealthPermissionParams, IInternalHealthRequestHealthPermissionResult } from './internal/health/requestHealthPermission';
import { requestSensorPermission$ as internal_health_requestSensorPermission } from './internal/health/requestSensorPermission';
export { IInternalHealthRequestSensorPermissionParams, IInternalHealthRequestSensorPermissionResult } from './internal/health/requestSensorPermission';
import { cancel$ as internal_host_cancel } from './internal/host/cancel';
export { IInternalHostCancelParams, IInternalHostCancelResult } from './internal/host/cancel';
import { lwp$ as internal_host_lwp } from './internal/host/lwp';
export { IInternalHostLwpParams, IInternalHostLwpResult } from './internal/host/lwp';
import { query$ as internal_host_query } from './internal/host/query';
export { IInternalHostQueryParams, IInternalHostQueryResult } from './internal/host/query';
import { delete$ as internal_hpm_delete } from './internal/hpm/delete';
export { IInternalHpmDeleteParams, IInternalHpmDeleteResult } from './internal/hpm/delete';
import { get$ as internal_hpm_get } from './internal/hpm/get';
export { IInternalHpmGetParams, IInternalHpmGetResult } from './internal/hpm/get';
import { queryInfo$ as internal_hpm_queryInfo } from './internal/hpm/queryInfo';
export { IInternalHpmQueryInfoParams, IInternalHpmQueryInfoResult } from './internal/hpm/queryInfo';
import { update$ as internal_hpm_update } from './internal/hpm/update';
export { IInternalHpmUpdateParams, IInternalHpmUpdateResult } from './internal/hpm/update';
import { getMsgFilterConfigDetail$ as internal_imshortcut_getMsgFilterConfigDetail } from './internal/imshortcut/getMsgFilterConfigDetail';
export { IInternalImshortcutGetMsgFilterConfigDetailParams, IInternalImshortcutGetMsgFilterConfigDetailResult } from './internal/imshortcut/getMsgFilterConfigDetail';
import { getMsgFilterTabsConfig$ as internal_imshortcut_getMsgFilterTabsConfig } from './internal/imshortcut/getMsgFilterTabsConfig';
export { IInternalImshortcutGetMsgFilterTabsConfigParams, IInternalImshortcutGetMsgFilterTabsConfigResult } from './internal/imshortcut/getMsgFilterTabsConfig';
import { initEventChannel$ as internal_imshortcut_initEventChannel } from './internal/imshortcut/initEventChannel';
export { IInternalImshortcutInitEventChannelParams, IInternalImshortcutInitEventChannelResult } from './internal/imshortcut/initEventChannel';
import { listFilterMsg$ as internal_imshortcut_listFilterMsg } from './internal/imshortcut/listFilterMsg';
export { IInternalImshortcutListFilterMsgParams, IInternalImshortcutListFilterMsgResult } from './internal/imshortcut/listFilterMsg';
import { onTabSelected$ as internal_imshortcut_onTabSelected } from './internal/imshortcut/onTabSelected';
export { IInternalImshortcutOnTabSelectedParams, IInternalImshortcutOnTabSelectedResult } from './internal/imshortcut/onTabSelected';
import { updateMsgFilterStatus$ as internal_imshortcut_updateMsgFilterStatus } from './internal/imshortcut/updateMsgFilterStatus';
export { IInternalImshortcutUpdateMsgFilterStatusParams, IInternalImshortcutUpdateMsgFilterStatusResult } from './internal/imshortcut/updateMsgFilterStatus';
import { add$ as internal_inputPanel_add } from './internal/inputPanel/add';
export { IInternalInputPanelAddParams, IInternalInputPanelAddResult } from './internal/inputPanel/add';
import { addToolBar$ as internal_inputPanel_addToolBar } from './internal/inputPanel/addToolBar';
export { IInternalInputPanelAddToolBarParams, IInternalInputPanelAddToolBarResult } from './internal/inputPanel/addToolBar';
import { atPick$ as internal_inputPanel_atPick } from './internal/inputPanel/atPick';
export { IInternalInputPanelAtPickParams, IInternalInputPanelAtPickResult } from './internal/inputPanel/atPick';
import { changeMode$ as internal_inputPanel_changeMode } from './internal/inputPanel/changeMode';
export { IInternalInputPanelChangeModeParams, IInternalInputPanelChangeModeResult } from './internal/inputPanel/changeMode';
import { getCurrentInput$ as internal_inputPanel_getCurrentInput } from './internal/inputPanel/getCurrentInput';
export { IInternalInputPanelGetCurrentInputParams, IInternalInputPanelGetCurrentInputResult } from './internal/inputPanel/getCurrentInput';
import { refreshInputExtendView$ as internal_inputPanel_refreshInputExtendView } from './internal/inputPanel/refreshInputExtendView';
export { IInternalInputPanelRefreshInputExtendViewParams, IInternalInputPanelRefreshInputExtendViewResult } from './internal/inputPanel/refreshInputExtendView';
import { remove$ as internal_inputPanel_remove } from './internal/inputPanel/remove';
export { IInternalInputPanelRemoveParams, IInternalInputPanelRemoveResult } from './internal/inputPanel/remove';
import { removeToolbar$ as internal_inputPanel_removeToolbar } from './internal/inputPanel/removeToolbar';
export { IInternalInputPanelRemoveToolbarParams, IInternalInputPanelRemoveToolbarResult } from './internal/inputPanel/removeToolbar';
import { resignInput$ as internal_inputPanel_resignInput } from './internal/inputPanel/resignInput';
export { IInternalInputPanelResignInputParams, IInternalInputPanelResignInputResult } from './internal/inputPanel/resignInput';
import { batchDisposeCard$ as internal_interactiveCard_batchDisposeCard } from './internal/interactiveCard/batchDisposeCard';
export { IInternalInteractiveCardBatchDisposeCardParams, IInternalInteractiveCardBatchDisposeCardResult } from './internal/interactiveCard/batchDisposeCard';
import { getCardInfo$ as internal_interactiveCard_getCardInfo } from './internal/interactiveCard/getCardInfo';
export { IInternalInteractiveCardGetCardInfoParams, IInternalInteractiveCardGetCardInfoResult } from './internal/interactiveCard/getCardInfo';
import { sendAction$ as internal_interactiveCard_sendAction } from './internal/interactiveCard/sendAction';
export { IInternalInteractiveCardSendActionParams, IInternalInteractiveCardSendActionResult } from './internal/interactiveCard/sendAction';
import { chooseInvoice$ as internal_invoice_chooseInvoice } from './internal/invoice/chooseInvoice';
export { IInternalInvoiceChooseInvoiceParams, IInternalInvoiceChooseInvoiceResult } from './internal/invoice/chooseInvoice';
import { startLive$ as internal_live_startLive } from './internal/live/startLive';
export { IInternalLiveStartLiveParams, IInternalLiveStartLiveResult } from './internal/live/startLive';
import { startUnifiedLive$ as internal_live_startUnifiedLive } from './internal/live/startUnifiedLive';
export { IInternalLiveStartUnifiedLiveParams, IInternalLiveStartUnifiedLiveResult } from './internal/live/startUnifiedLive';
import { add$ as internal_log_add } from './internal/log/add';
export { IInternalLogAddParams, IInternalLogAddResult } from './internal/log/add';
import { printUnifyLog$ as internal_log_printUnifyLog } from './internal/log/printUnifyLog';
export { IInternalLogPrintUnifyLogParams, IInternalLogPrintUnifyLogResult } from './internal/log/printUnifyLog';
import { searchClickLog$ as internal_log_searchClickLog } from './internal/log/searchClickLog';
export { IInternalLogSearchClickLogParams, IInternalLogSearchClickLogResult } from './internal/log/searchClickLog';
import { searchQueryLog$ as internal_log_searchQueryLog } from './internal/log/searchQueryLog';
export { IInternalLogSearchQueryLogParams, IInternalLogSearchQueryLogResult } from './internal/log/searchQueryLog';
import { upload$ as internal_log_upload } from './internal/log/upload';
export { IInternalLogUploadParams, IInternalLogUploadResult } from './internal/log/upload';
import { uploadException$ as internal_log_uploadException } from './internal/log/uploadException';
export { IInternalLogUploadExceptionParams, IInternalLogUploadExceptionResult } from './internal/log/uploadException';
import { call$ as internal_lwp_call } from './internal/lwp/call';
export { IInternalLwpCallParams, IInternalLwpCallResult } from './internal/lwp/call';
import { setSessionIdCookie$ as internal_lwp_setSessionIdCookie } from './internal/lwp/setSessionIdCookie';
export { IInternalLwpSetSessionIdCookieParams, IInternalLwpSetSessionIdCookieResult } from './internal/lwp/setSessionIdCookie';
import { checkInstalled$ as internal_microapp_checkInstalled } from './internal/microapp/checkInstalled';
export { IInternalMicroappCheckInstalledParams, IInternalMicroappCheckInstalledResult } from './internal/microapp/checkInstalled';
import { queryInfo$ as internal_microapp_queryInfo } from './internal/microapp/queryInfo';
export { IInternalMicroappQueryInfoParams, IInternalMicroappQueryInfoResult } from './internal/microapp/queryInfo';
import { triggerSync$ as internal_microapp_triggerSync } from './internal/microapp/triggerSync';
export { IInternalMicroappTriggerSyncParams, IInternalMicroappTriggerSyncResult } from './internal/microapp/triggerSync';
import { setIcon$ as internal_navigation_setIcon } from './internal/navigation/setIcon';
export { IInternalNavigationSetIconParams, IInternalNavigationSetIconResult } from './internal/navigation/setIcon';
import { add$ as internal_notify_add } from './internal/notify/add';
export { IInternalNotifyAddParams, IInternalNotifyAddResult } from './internal/notify/add';
import { closeModal$ as internal_notify_closeModal } from './internal/notify/closeModal';
export { IInternalNotifyCloseModalParams, IInternalNotifyCloseModalResult } from './internal/notify/closeModal';
import { send$ as internal_notify_send } from './internal/notify/send';
export { IInternalNotifySendParams, IInternalNotifySendResult } from './internal/notify/send';
import { showModal$ as internal_notify_showModal } from './internal/notify/showModal';
export { IInternalNotifyShowModalParams, IInternalNotifyShowModalResult } from './internal/notify/showModal';
import { activatePersonalSpace$ as internal_oa_activatePersonalSpace } from './internal/oa/activatePersonalSpace';
export { IInternalOaActivatePersonalSpaceParams, IInternalOaActivatePersonalSpaceResult } from './internal/oa/activatePersonalSpace';
import { getNavHeaderHeight$ as internal_oa_getNavHeaderHeight } from './internal/oa/getNavHeaderHeight';
export { IInternalOaGetNavHeaderHeightParams, IInternalOaGetNavHeaderHeightResult } from './internal/oa/getNavHeaderHeight';
import { isPersonalSpaceEnabled$ as internal_oa_isPersonalSpaceEnabled } from './internal/oa/isPersonalSpaceEnabled';
export { IInternalOaIsPersonalSpaceEnabledParams, IInternalOaIsPersonalSpaceEnabledResult } from './internal/oa/isPersonalSpaceEnabled';
import { setData$ as internal_openTemporary_setData } from './internal/openTemporary/setData';
export { IInternalOpenTemporarySetDataParams, IInternalOpenTemporarySetDataResult } from './internal/openTemporary/setData';
import { fetch$ as internal_pageLink_fetch } from './internal/pageLink/fetch';
export { IInternalPageLinkFetchParams, IInternalPageLinkFetchResult } from './internal/pageLink/fetch';
import { request$ as internal_pageLink_request } from './internal/pageLink/request';
export { IInternalPageLinkRequestParams, IInternalPageLinkRequestResult } from './internal/pageLink/request';
import { response$ as internal_pageLink_response } from './internal/pageLink/response';
export { IInternalPageLinkResponseParams, IInternalPageLinkResponseResult } from './internal/pageLink/response';
import { requestForInAppPurchase$ as internal_payment_requestForInAppPurchase } from './internal/payment/requestForInAppPurchase';
export { IInternalPaymentRequestForInAppPurchaseParams, IInternalPaymentRequestForInAppPurchaseResult } from './internal/payment/requestForInAppPurchase';
import { hasSelfPermissions$ as internal_permission_hasSelfPermissions } from './internal/permission/hasSelfPermissions';
export { IInternalPermissionHasSelfPermissionsParams, IInternalPermissionHasSelfPermissionsResult } from './internal/permission/hasSelfPermissions';
import { requestPermissions$ as internal_permission_requestPermissions } from './internal/permission/requestPermissions';
export { IInternalPermissionRequestPermissionsParams, IInternalPermissionRequestPermissionsResult } from './internal/permission/requestPermissions';
import { add$ as internal_phoneContact_add } from './internal/phoneContact/add';
export { IInternalPhoneContactAddParams, IInternalPhoneContactAddResult } from './internal/phoneContact/add';
import { checkPermissionAndUpload$ as internal_phoneContact_checkPermissionAndUpload } from './internal/phoneContact/checkPermissionAndUpload';
export { IInternalPhoneContactCheckPermissionAndUploadParams, IInternalPhoneContactCheckPermissionAndUploadResult } from './internal/phoneContact/checkPermissionAndUpload';
import { getMobileContactName$ as internal_phoneContact_getMobileContactName } from './internal/phoneContact/getMobileContactName';
export { IInternalPhoneContactGetMobileContactNameParams, IInternalPhoneContactGetMobileContactNameResult } from './internal/phoneContact/getMobileContactName';
import { requestPermissionAndUploadWhenAuthed$ as internal_phoneContact_requestPermissionAndUploadWhenAuthed } from './internal/phoneContact/requestPermissionAndUploadWhenAuthed';
export { IInternalPhoneContactRequestPermissionAndUploadWhenAuthedParams, IInternalPhoneContactRequestPermissionAndUploadWhenAuthedResult } from './internal/phoneContact/requestPermissionAndUploadWhenAuthed';
import { getUserExclusiveInfo$ as internal_realm_getUserExclusiveInfo } from './internal/realm/getUserExclusiveInfo';
export { IInternalRealmGetUserExclusiveInfoParams, IInternalRealmGetUserExclusiveInfoResult } from './internal/realm/getUserExclusiveInfo';
import { updateExclusiveConfig$ as internal_realm_updateExclusiveConfig } from './internal/realm/updateExclusiveConfig';
export { IInternalRealmUpdateExclusiveConfigParams, IInternalRealmUpdateExclusiveConfigResult } from './internal/realm/updateExclusiveConfig';
import { sendRandomRedEnvelop$ as internal_redenvelop_sendRandomRedEnvelop } from './internal/redenvelop/sendRandomRedEnvelop';
export { IInternalRedenvelopSendRandomRedEnvelopParams, IInternalRedenvelopSendRandomRedEnvelopResult } from './internal/redenvelop/sendRandomRedEnvelop';
import { nav2RedPacket$ as internal_redpacket_nav2RedPacket } from './internal/redpacket/nav2RedPacket';
export { IInternalRedpacketNav2RedPacketParams, IInternalRedpacketNav2RedPacketResult } from './internal/redpacket/nav2RedPacket';
import { getOrgFeatureByKey$ as internal_request_getOrgFeatureByKey } from './internal/request/getOrgFeatureByKey';
export { IInternalRequestGetOrgFeatureByKeyParams, IInternalRequestGetOrgFeatureByKeyResult } from './internal/request/getOrgFeatureByKey';
import { getSecurityToken$ as internal_request_getSecurityToken } from './internal/request/getSecurityToken';
export { IInternalRequestGetSecurityTokenParams, IInternalRequestGetSecurityTokenResult } from './internal/request/getSecurityToken';
import { httpOverLWP$ as internal_request_httpOverLWP } from './internal/request/httpOverLWP';
export { IInternalRequestHttpOverLWPParams, IInternalRequestHttpOverLWPResult } from './internal/request/httpOverLWP';
import { lwp$ as internal_request_lwp } from './internal/request/lwp';
export { IInternalRequestLwpParams, IInternalRequestLwpResult } from './internal/request/lwp';
import { sendHeadRequest$ as internal_request_sendHeadRequest } from './internal/request/sendHeadRequest';
export { IInternalRequestSendHeadRequestParams, IInternalRequestSendHeadRequestResult } from './internal/request/sendHeadRequest';
import { contactswithUids$ as internal_requestmoney_contactswithUids } from './internal/requestmoney/contactswithUids';
export { IInternalRequestmoneyContactswithUidsParams, IInternalRequestmoneyContactswithUidsResult } from './internal/requestmoney/contactswithUids';
import { currentUid$ as internal_requestmoney_currentUid } from './internal/requestmoney/currentUid';
export { IInternalRequestmoneyCurrentUidParams, IInternalRequestmoneyCurrentUidResult } from './internal/requestmoney/currentUid';
import { dingRemind$ as internal_requestmoney_dingRemind } from './internal/requestmoney/dingRemind';
export { IInternalRequestmoneyDingRemindParams, IInternalRequestmoneyDingRemindResult } from './internal/requestmoney/dingRemind';
import { generateBizId$ as internal_requestmoney_generateBizId } from './internal/requestmoney/generateBizId';
export { IInternalRequestmoneyGenerateBizIdParams, IInternalRequestmoneyGenerateBizIdResult } from './internal/requestmoney/generateBizId';
import { loadConversations$ as internal_requestmoney_loadConversations } from './internal/requestmoney/loadConversations';
export { IInternalRequestmoneyLoadConversationsParams, IInternalRequestmoneyLoadConversationsResult } from './internal/requestmoney/loadConversations';
import { notifyAlipayResult$ as internal_requestmoney_notifyAlipayResult } from './internal/requestmoney/notifyAlipayResult';
export { IInternalRequestmoneyNotifyAlipayResultParams, IInternalRequestmoneyNotifyAlipayResultResult } from './internal/requestmoney/notifyAlipayResult';
import { showContactAndGroupPick$ as internal_requestmoney_showContactAndGroupPick } from './internal/requestmoney/showContactAndGroupPick';
export { IInternalRequestmoneyShowContactAndGroupPickParams, IInternalRequestmoneyShowContactAndGroupPickResult } from './internal/requestmoney/showContactAndGroupPick';
import { showGroupMemberPick$ as internal_requestmoney_showGroupMemberPick } from './internal/requestmoney/showGroupMemberPick';
export { IInternalRequestmoneyShowGroupMemberPickParams, IInternalRequestmoneyShowGroupMemberPickResult } from './internal/requestmoney/showGroupMemberPick';
import { updateCardStatus$ as internal_requestmoney_updateCardStatus } from './internal/requestmoney/updateCardStatus';
export { IInternalRequestmoneyUpdateCardStatusParams, IInternalRequestmoneyUpdateCardStatusResult } from './internal/requestmoney/updateCardStatus';
import { getPackageInfo$ as internal_resource_getPackageInfo } from './internal/resource/getPackageInfo';
export { IInternalResourceGetPackageInfoParams, IInternalResourceGetPackageInfoResult } from './internal/resource/getPackageInfo';
import { getResourceContent$ as internal_resource_getResourceContent } from './internal/resource/getResourceContent';
export { IInternalResourceGetResourceContentParams, IInternalResourceGetResourceContentResult } from './internal/resource/getResourceContent';
import { getAppInfo$ as internal_safe_getAppInfo } from './internal/safe/getAppInfo';
export { IInternalSafeGetAppInfoParams, IInternalSafeGetAppInfoResult } from './internal/safe/getAppInfo';
import { getDeviceInfo$ as internal_safe_getDeviceInfo } from './internal/safe/getDeviceInfo';
export { IInternalSafeGetDeviceInfoParams, IInternalSafeGetDeviceInfoResult } from './internal/safe/getDeviceInfo';
import { scanPlugin$ as internal_safe_scanPlugin } from './internal/safe/scanPlugin';
export { IInternalSafeScanPluginParams, IInternalSafeScanPluginResult } from './internal/safe/scanPlugin';
import { update$ as internal_schedule_update } from './internal/schedule/update';
export { IInternalScheduleUpdateParams, IInternalScheduleUpdateResult } from './internal/schedule/update';
import { open$ as internal_schema_open } from './internal/schema/open';
export { IInternalSchemaOpenParams, IInternalSchemaOpenResult } from './internal/schema/open';
import { openPermissionSetting$ as internal_schema_openPermissionSetting } from './internal/schema/openPermissionSetting';
export { IInternalSchemaOpenPermissionSettingParams, IInternalSchemaOpenPermissionSettingResult } from './internal/schema/openPermissionSetting';
import { openWifiSetting$ as internal_schema_openWifiSetting } from './internal/schema/openWifiSetting';
export { IInternalSchemaOpenWifiSettingParams, IInternalSchemaOpenWifiSettingResult } from './internal/schema/openWifiSetting';
import { debug$ as internal_search_debug } from './internal/search/debug';
export { IInternalSearchDebugParams, IInternalSearchDebugResult } from './internal/search/debug';
import { asgCheck$ as internal_security_asgCheck } from './internal/security/asgCheck';
export { IInternalSecurityAsgCheckParams, IInternalSecurityAsgCheckResult } from './internal/security/asgCheck';
import { executeSql$ as internal_sqlite_executeSql } from './internal/sqlite/executeSql';
export { IInternalSqliteExecuteSqlParams, IInternalSqliteExecuteSqlResult } from './internal/sqlite/executeSql';
import { open$ as internal_sqlite_open } from './internal/sqlite/open';
export { IInternalSqliteOpenParams, IInternalSqliteOpenResult } from './internal/sqlite/open';
import { initRoom$ as internal_studyroom_initRoom } from './internal/studyroom/initRoom';
export { IInternalStudyroomInitRoomParams, IInternalStudyroomInitRoomResult } from './internal/studyroom/initRoom';
import { operateMusic$ as internal_studyroom_operateMusic } from './internal/studyroom/operateMusic';
export { IInternalStudyroomOperateMusicParams, IInternalStudyroomOperateMusicResult } from './internal/studyroom/operateMusic';
import { reportMemberState$ as internal_studyroom_reportMemberState } from './internal/studyroom/reportMemberState';
export { IInternalStudyroomReportMemberStateParams, IInternalStudyroomReportMemberStateResult } from './internal/studyroom/reportMemberState';
import { addMember$ as internal_teleVideo_addMember } from './internal/teleVideo/addMember';
export { IInternalTeleVideoAddMemberParams, IInternalTeleVideoAddMemberResult } from './internal/teleVideo/addMember';
import { creatConf$ as internal_teleVideo_creatConf } from './internal/teleVideo/creatConf';
export { IInternalTeleVideoCreatConfParams, IInternalTeleVideoCreatConfResult } from './internal/teleVideo/creatConf';
import { dismissMeetingFloatingView$ as internal_teleVideo_dismissMeetingFloatingView } from './internal/teleVideo/dismissMeetingFloatingView';
export { IInternalTeleVideoDismissMeetingFloatingViewParams, IInternalTeleVideoDismissMeetingFloatingViewResult } from './internal/teleVideo/dismissMeetingFloatingView';
import { registPushHandler$ as internal_teleVideo_registPushHandler } from './internal/teleVideo/registPushHandler';
export { IInternalTeleVideoRegistPushHandlerParams, IInternalTeleVideoRegistPushHandlerResult } from './internal/teleVideo/registPushHandler';
import { shareInvite$ as internal_teleVideo_shareInvite } from './internal/teleVideo/shareInvite';
export { IInternalTeleVideoShareInviteParams, IInternalTeleVideoShareInviteResult } from './internal/teleVideo/shareInvite';
import { showMeetingFloatingView$ as internal_teleVideo_showMeetingFloatingView } from './internal/teleVideo/showMeetingFloatingView';
export { IInternalTeleVideoShowMeetingFloatingViewParams, IInternalTeleVideoShowMeetingFloatingViewResult } from './internal/teleVideo/showMeetingFloatingView';
import { unregistPushHandler$ as internal_teleVideo_unregistPushHandler } from './internal/teleVideo/unregistPushHandler';
export { IInternalTeleVideoUnregistPushHandlerParams, IInternalTeleVideoUnregistPushHandlerResult } from './internal/teleVideo/unregistPushHandler';
import { getCurrentUIEnvironment$ as internal_ui_getCurrentUIEnvironment } from './internal/ui/getCurrentUIEnvironment';
export { IInternalUiGetCurrentUIEnvironmentParams, IInternalUiGetCurrentUIEnvironmentResult } from './internal/ui/getCurrentUIEnvironment';
import { allOrganizations$ as internal_user_allOrganizations } from './internal/user/allOrganizations';
export { IInternalUserAllOrganizationsParams, IInternalUserAllOrganizationsResult } from './internal/user/allOrganizations';
import { bindTaobao$ as internal_user_bindTaobao } from './internal/user/bindTaobao';
export { IInternalUserBindTaobaoParams, IInternalUserBindTaobaoResult } from './internal/user/bindTaobao';
import { dingtalkIdToUserInfos$ as internal_user_dingtalkIdToUserInfos } from './internal/user/dingtalkIdToUserInfos';
export { IInternalUserDingtalkIdToUserInfosParams, IInternalUserDingtalkIdToUserInfosResult } from './internal/user/dingtalkIdToUserInfos';
import { getClaimEnergyEntryVisibility$ as internal_user_getClaimEnergyEntryVisibility } from './internal/user/getClaimEnergyEntryVisibility';
export { IInternalUserGetClaimEnergyEntryVisibilityParams, IInternalUserGetClaimEnergyEntryVisibilityResult } from './internal/user/getClaimEnergyEntryVisibility';
import { getCurrentUserInfo$ as internal_user_getCurrentUserInfo } from './internal/user/getCurrentUserInfo';
export { IInternalUserGetCurrentUserInfoParams, IInternalUserGetCurrentUserInfoResult } from './internal/user/getCurrentUserInfo';
import { getRealmInfo$ as internal_user_getRealmInfo } from './internal/user/getRealmInfo';
export { IInternalUserGetRealmInfoParams, IInternalUserGetRealmInfoResult } from './internal/user/getRealmInfo';
import { getRole$ as internal_user_getRole } from './internal/user/getRole';
export { IInternalUserGetRoleParams, IInternalUserGetRoleResult } from './internal/user/getRole';
import { isNewUser$ as internal_user_isNewUser } from './internal/user/isNewUser';
export { IInternalUserIsNewUserParams, IInternalUserIsNewUserResult } from './internal/user/isNewUser';
import { setClaimEnergyEntryVisibility$ as internal_user_setClaimEnergyEntryVisibility } from './internal/user/setClaimEnergyEntryVisibility';
export { IInternalUserSetClaimEnergyEntryVisibilityParams, IInternalUserSetClaimEnergyEntryVisibilityResult } from './internal/user/setClaimEnergyEntryVisibility';
import { showMedalEntry$ as internal_user_showMedalEntry } from './internal/user/showMedalEntry';
export { IInternalUserShowMedalEntryParams, IInternalUserShowMedalEntryResult } from './internal/user/showMedalEntry';
import { uids2UserInfos$ as internal_user_uids2UserInfos } from './internal/user/uids2UserInfos';
export { IInternalUserUids2UserInfosParams, IInternalUserUids2UserInfosResult } from './internal/user/uids2UserInfos';
import { unbindTaobao$ as internal_user_unbindTaobao } from './internal/user/unbindTaobao';
export { IInternalUserUnbindTaobaoParams, IInternalUserUnbindTaobaoResult } from './internal/user/unbindTaobao';
import { authAlipayInvoice$ as internal_util_authAlipayInvoice } from './internal/util/authAlipayInvoice';
export { IInternalUtilAuthAlipayInvoiceParams, IInternalUtilAuthAlipayInvoiceResult } from './internal/util/authAlipayInvoice';
import { changeCloudSettingConfig$ as internal_util_changeCloudSettingConfig } from './internal/util/changeCloudSettingConfig';
export { IInternalUtilChangeCloudSettingConfigParams, IInternalUtilChangeCloudSettingConfigResult } from './internal/util/changeCloudSettingConfig';
import { chooseFile$ as internal_util_chooseFile } from './internal/util/chooseFile';
export { IInternalUtilChooseFileParams, IInternalUtilChooseFileResult } from './internal/util/chooseFile';
import { chooseIndustry$ as internal_util_chooseIndustry } from './internal/util/chooseIndustry';
export { IInternalUtilChooseIndustryParams, IInternalUtilChooseIndustryResult } from './internal/util/chooseIndustry';
import { chooseRegion$ as internal_util_chooseRegion } from './internal/util/chooseRegion';
export { IInternalUtilChooseRegionParams, IInternalUtilChooseRegionResult } from './internal/util/chooseRegion';
import { collectCell$ as internal_util_collectCell } from './internal/util/collectCell';
export { IInternalUtilCollectCellParams, IInternalUtilCollectCellResult } from './internal/util/collectCell';
import { dns$ as internal_util_dns } from './internal/util/dns';
export { IInternalUtilDnsParams, IInternalUtilDnsResult } from './internal/util/dns';
import { draw$ as internal_util_draw } from './internal/util/draw';
export { IInternalUtilDrawParams, IInternalUtilDrawResult } from './internal/util/draw';
import { encryData$ as internal_util_encryData } from './internal/util/encryData';
export { IInternalUtilEncryDataParams, IInternalUtilEncryDataResult } from './internal/util/encryData';
import { encrySHA1Data$ as internal_util_encrySHA1Data } from './internal/util/encrySHA1Data';
export { IInternalUtilEncrySHA1DataParams, IInternalUtilEncrySHA1DataResult } from './internal/util/encrySHA1Data';
import { forbidScreenShot$ as internal_util_forbidScreenShot } from './internal/util/forbidScreenShot';
export { IInternalUtilForbidScreenShotParams, IInternalUtilForbidScreenShotResult } from './internal/util/forbidScreenShot';
import { getBindSmartDeviceOrgList$ as internal_util_getBindSmartDeviceOrgList } from './internal/util/getBindSmartDeviceOrgList';
export { IInternalUtilGetBindSmartDeviceOrgListParams, IInternalUtilGetBindSmartDeviceOrgListResult } from './internal/util/getBindSmartDeviceOrgList';
import { getCloudSetting$ as internal_util_getCloudSetting } from './internal/util/getCloudSetting';
export { IInternalUtilGetCloudSettingParams, IInternalUtilGetCloudSettingResult } from './internal/util/getCloudSetting';
import { getCloudSettingConfig$ as internal_util_getCloudSettingConfig } from './internal/util/getCloudSettingConfig';
export { IInternalUtilGetCloudSettingConfigParams, IInternalUtilGetCloudSettingConfigResult } from './internal/util/getCloudSettingConfig';
import { getCorpIdByOrgId$ as internal_util_getCorpIdByOrgId } from './internal/util/getCorpIdByOrgId';
export { IInternalUtilGetCorpIdByOrgIdParams, IInternalUtilGetCorpIdByOrgIdResult } from './internal/util/getCorpIdByOrgId';
import { getCurrentOrgId$ as internal_util_getCurrentOrgId } from './internal/util/getCurrentOrgId';
export { IInternalUtilGetCurrentOrgIdParams, IInternalUtilGetCurrentOrgIdResult } from './internal/util/getCurrentOrgId';
import { getLBSWua$ as internal_util_getLBSWua } from './internal/util/getLBSWua';
export { IInternalUtilGetLBSWuaParams, IInternalUtilGetLBSWuaResult } from './internal/util/getLBSWua';
import { getOrgIdByCorpId$ as internal_util_getOrgIdByCorpId } from './internal/util/getOrgIdByCorpId';
export { IInternalUtilGetOrgIdByCorpIdParams, IInternalUtilGetOrgIdByCorpIdResult } from './internal/util/getOrgIdByCorpId';
import { getSystemSetting$ as internal_util_getSystemSetting } from './internal/util/getSystemSetting';
export { IInternalUtilGetSystemSettingParams, IInternalUtilGetSystemSettingResult } from './internal/util/getSystemSetting';
import { getUtdid$ as internal_util_getUtdid } from './internal/util/getUtdid';
export { IInternalUtilGetUtdidParams, IInternalUtilGetUtdidResult } from './internal/util/getUtdid';
import { getWua$ as internal_util_getWua } from './internal/util/getWua';
export { IInternalUtilGetWuaParams, IInternalUtilGetWuaResult } from './internal/util/getWua';
import { grayStringLemon$ as internal_util_grayStringLemon } from './internal/util/grayStringLemon';
export { IInternalUtilGrayStringLemonParams, IInternalUtilGrayStringLemonResult } from './internal/util/grayStringLemon';
import { graySwitch$ as internal_util_graySwitch } from './internal/util/graySwitch';
export { IInternalUtilGraySwitchParams, IInternalUtilGraySwitchResult } from './internal/util/graySwitch';
import { graySwitchLemon$ as internal_util_graySwitchLemon } from './internal/util/graySwitchLemon';
export { IInternalUtilGraySwitchLemonParams, IInternalUtilGraySwitchLemonResult } from './internal/util/graySwitchLemon';
import { isSimulator$ as internal_util_isSimulator } from './internal/util/isSimulator';
export { IInternalUtilIsSimulatorParams, IInternalUtilIsSimulatorResult } from './internal/util/isSimulator';
import { ratingAndFeedback$ as internal_util_ratingAndFeedback } from './internal/util/ratingAndFeedback';
export { IInternalUtilRatingAndFeedbackParams, IInternalUtilRatingAndFeedbackResult } from './internal/util/ratingAndFeedback';
import { recordShortVideo$ as internal_util_recordShortVideo } from './internal/util/recordShortVideo';
export { IInternalUtilRecordShortVideoParams, IInternalUtilRecordShortVideoResult } from './internal/util/recordShortVideo';
import { setSystemSetting$ as internal_util_setSystemSetting } from './internal/util/setSystemSetting';
export { IInternalUtilSetSystemSettingParams, IInternalUtilSetSystemSettingResult } from './internal/util/setSystemSetting';
import { showAddExternalContactDialog$ as internal_util_showAddExternalContactDialog } from './internal/util/showAddExternalContactDialog';
export { IInternalUtilShowAddExternalContactDialogParams, IInternalUtilShowAddExternalContactDialogResult } from './internal/util/showAddExternalContactDialog';
import { switchOA$ as internal_util_switchOA } from './internal/util/switchOA';
export { IInternalUtilSwitchOAParams, IInternalUtilSwitchOAResult } from './internal/util/switchOA';
import { uploadBase64EncodeImage$ as internal_util_uploadBase64EncodeImage } from './internal/util/uploadBase64EncodeImage';
export { IInternalUtilUploadBase64EncodeImageParams, IInternalUtilUploadBase64EncodeImageResult } from './internal/util/uploadBase64EncodeImage';
import { uploadFile$ as internal_util_uploadFile } from './internal/util/uploadFile';
export { IInternalUtilUploadFileParams, IInternalUtilUploadFileResult } from './internal/util/uploadFile';
import { openDebugLink$ as internal_webview_openDebugLink } from './internal/webview/openDebugLink';
export { IInternalWebviewOpenDebugLinkParams, IInternalWebviewOpenDebugLinkResult } from './internal/webview/openDebugLink';
import { dispose$ as internal_webviewTurbo_dispose } from './internal/webviewTurbo/dispose';
export { IInternalWebviewTurboDisposeParams, IInternalWebviewTurboDisposeResult } from './internal/webviewTurbo/dispose';
import { start$ as internal_webviewTurbo_start } from './internal/webviewTurbo/start';
export { IInternalWebviewTurboStartParams, IInternalWebviewTurboStartResult } from './internal/webviewTurbo/start';
import { getApplist$ as internal_work_getApplist } from './internal/work/getApplist';
export { IInternalWorkGetApplistParams, IInternalWorkGetApplistResult } from './internal/work/getApplist';
import { openNativeApp$ as internal_work_openNativeApp } from './internal/work/openNativeApp';
export { IInternalWorkOpenNativeAppParams, IInternalWorkOpenNativeAppResult } from './internal/work/openNativeApp';
import { openMiniApp$ as internal_wxsdk_openMiniApp } from './internal/wxsdk/openMiniApp';
export { IInternalWxsdkOpenMiniAppParams, IInternalWxsdkOpenMiniAppResult } from './internal/wxsdk/openMiniApp';
import { isSupportFitech$ as internal_zoloz_isSupportFitech } from './internal/zoloz/isSupportFitech';
export { IInternalZolozIsSupportFitechParams, IInternalZolozIsSupportFitechResult } from './internal/zoloz/isSupportFitech';
import { verifyFaceByFitech$ as internal_zoloz_verifyFaceByFitech } from './internal/zoloz/verifyFaceByFitech';
export { IInternalZolozVerifyFaceByFitechParams, IInternalZolozVerifyFaceByFitechResult } from './internal/zoloz/verifyFaceByFitech';
import { keepAlive$ as media_voiceRecorder_keepAlive } from './media/voiceRecorder/keepAlive';
export { IMediaVoiceRecorderKeepAliveParams, IMediaVoiceRecorderKeepAliveResult } from './media/voiceRecorder/keepAlive';
import { pause$ as media_voiceRecorder_pause } from './media/voiceRecorder/pause';
export { IMediaVoiceRecorderPauseParams, IMediaVoiceRecorderPauseResult } from './media/voiceRecorder/pause';
import { resume$ as media_voiceRecorder_resume } from './media/voiceRecorder/resume';
export { IMediaVoiceRecorderResumeParams, IMediaVoiceRecorderResumeResult } from './media/voiceRecorder/resume';
import { start$ as media_voiceRecorder_start } from './media/voiceRecorder/start';
export { IMediaVoiceRecorderStartParams, IMediaVoiceRecorderStartResult } from './media/voiceRecorder/start';
import { stop$ as media_voiceRecorder_stop } from './media/voiceRecorder/stop';
export { IMediaVoiceRecorderStopParams, IMediaVoiceRecorderStopResult } from './media/voiceRecorder/stop';
import { loginGovNet$ as net_bjGovApn_loginGovNet } from './net/bjGovApn/loginGovNet';
export { INetBjGovApnLoginGovNetParams, INetBjGovApnLoginGovNetResult } from './net/bjGovApn/loginGovNet';
import { request$ as net_tunnel_request } from './net/tunnel/request';
export { INetTunnelRequestParams, INetTunnelRequestResult } from './net/tunnel/request';
import { check$ as net_vpn_check } from './net/vpn/check';
export { INetVpnCheckParams, INetVpnCheckResult } from './net/vpn/check';
import { start$ as net_vpn_start } from './net/vpn/start';
export { INetVpnStartParams, INetVpnStartResult } from './net/vpn/start';
import { stop$ as net_vpn_stop } from './net/vpn/stop';
export { INetVpnStopParams, INetVpnStopResult } from './net/vpn/stop';
import { fetch$ as preRelease_appLink_fetch } from './preRelease/appLink/fetch';
export { IPreReleaseAppLinkFetchParams, IPreReleaseAppLinkFetchResult } from './preRelease/appLink/fetch';
import { open$ as preRelease_appLink_open } from './preRelease/appLink/open';
export { IPreReleaseAppLinkOpenParams, IPreReleaseAppLinkOpenResult } from './preRelease/appLink/open';
import { request$ as preRelease_appLink_request } from './preRelease/appLink/request';
export { IPreReleaseAppLinkRequestParams, IPreReleaseAppLinkRequestResult } from './preRelease/appLink/request';
import { response$ as preRelease_appLink_response } from './preRelease/appLink/response';
export { IPreReleaseAppLinkResponseParams, IPreReleaseAppLinkResponseResult } from './preRelease/appLink/response';
import { open$ as retail_chat_open } from './retail/chat/open';
export { IRetailChatOpenParams, IRetailChatOpenResult } from './retail/chat/open';
import { call$ as retail_telephone_call } from './retail/telephone/call';
export { IRetailTelephoneCallParams, IRetailTelephoneCallResult } from './retail/telephone/call';
import { status$ as runtime_info_status } from './runtime/info/status';
export { IRuntimeInfoStatusParams, IRuntimeInfoStatusResult } from './runtime/info/status';
import { fetch$ as runtime_message_fetch } from './runtime/message/fetch';
export { IRuntimeMessageFetchParams, IRuntimeMessageFetchResult } from './runtime/message/fetch';
import { post$ as runtime_message_post } from './runtime/message/post';
export { IRuntimeMessagePostParams, IRuntimeMessagePostResult } from './runtime/message/post';
import { enableUsability$ as runtime_monitor_enableUsability } from './runtime/monitor/enableUsability';
export { IRuntimeMonitorEnableUsabilityParams, IRuntimeMonitorEnableUsabilityResult } from './runtime/monitor/enableUsability';
import { finishLoad$ as runtime_monitor_finishLoad } from './runtime/monitor/finishLoad';
export { IRuntimeMonitorFinishLoadParams, IRuntimeMonitorFinishLoadResult } from './runtime/monitor/finishLoad';
import { getLoadTime$ as runtime_monitor_getLoadTime } from './runtime/monitor/getLoadTime';
export { IRuntimeMonitorGetLoadTimeParams, IRuntimeMonitorGetLoadTimeResult } from './runtime/monitor/getLoadTime';
import { usability$ as runtime_monitor_usability } from './runtime/monitor/usability';
export { IRuntimeMonitorUsabilityParams, IRuntimeMonitorUsabilityResult } from './runtime/monitor/usability';
import { requestAuthCode$ as runtime_permission_requestAuthCode } from './runtime/permission/requestAuthCode';
export { IRuntimePermissionRequestAuthCodeParams, IRuntimePermissionRequestAuthCodeResult } from './runtime/permission/requestAuthCode';
import { requestJsApis$ as runtime_permission_requestJsApis } from './runtime/permission/requestJsApis';
export { IRuntimePermissionRequestJsApisParams, IRuntimePermissionRequestJsApisResult } from './runtime/permission/requestJsApis';
import { requestOperateAuthCode$ as runtime_permission_requestOperateAuthCode } from './runtime/permission/requestOperateAuthCode';
export { IRuntimePermissionRequestOperateAuthCodeParams, IRuntimePermissionRequestOperateAuthCodeResult } from './runtime/permission/requestOperateAuthCode';
import { httpOverLwp$ as service_request_httpOverLwp } from './service/request/httpOverLwp';
export { IServiceRequestHttpOverLwpParams, IServiceRequestHttpOverLwpResult } from './service/request/httpOverLwp';
import { mtop$ as service_request_mtop } from './service/request/mtop';
export { IServiceRequestMtopParams, IServiceRequestMtopResult } from './service/request/mtop';
import { mtopOverLwp$ as service_request_mtopOverLwp } from './service/request/mtopOverLwp';
export { IServiceRequestMtopOverLwpParams, IServiceRequestMtopOverLwpResult } from './service/request/mtopOverLwp';
import { fetch$ as ui_appLink_fetch } from './ui/appLink/fetch';
export { IUiAppLinkFetchParams, IUiAppLinkFetchResult } from './ui/appLink/fetch';
import { open$ as ui_appLink_open } from './ui/appLink/open';
export { IUiAppLinkOpenParams, IUiAppLinkOpenResult } from './ui/appLink/open';
import { request$ as ui_appLink_request } from './ui/appLink/request';
export { IUiAppLinkRequestParams, IUiAppLinkRequestResult } from './ui/appLink/request';
import { response$ as ui_appLink_response } from './ui/appLink/response';
export { IUiAppLinkResponseParams, IUiAppLinkResponseResult } from './ui/appLink/response';
import { close$ as ui_drawer_close } from './ui/drawer/close';
export { IUiDrawerCloseParams, IUiDrawerCloseResult } from './ui/drawer/close';
import { config$ as ui_drawer_config } from './ui/drawer/config';
export { IUiDrawerConfigParams, IUiDrawerConfigResult } from './ui/drawer/config';
import { disable$ as ui_drawer_disable } from './ui/drawer/disable';
export { IUiDrawerDisableParams, IUiDrawerDisableResult } from './ui/drawer/disable';
import { enable$ as ui_drawer_enable } from './ui/drawer/enable';
export { IUiDrawerEnableParams, IUiDrawerEnableResult } from './ui/drawer/enable';
import { init$ as ui_drawer_init } from './ui/drawer/init';
export { IUiDrawerInitParams, IUiDrawerInitResult } from './ui/drawer/init';
import { open$ as ui_drawer_open } from './ui/drawer/open';
export { IUiDrawerOpenParams, IUiDrawerOpenResult } from './ui/drawer/open';
import { minimize$ as ui_floatWindow_minimize } from './ui/floatWindow/minimize';
export { IUiFloatWindowMinimizeParams, IUiFloatWindowMinimizeResult } from './ui/floatWindow/minimize';
import { plain$ as ui_input_plain } from './ui/input/plain';
export { IUiInputPlainParams, IUiInputPlainResult } from './ui/input/plain';
import { addToFloat$ as ui_multitask_addToFloat } from './ui/multitask/addToFloat';
export { IUiMultitaskAddToFloatParams, IUiMultitaskAddToFloatResult } from './ui/multitask/addToFloat';
import { removeFromFloat$ as ui_multitask_removeFromFloat } from './ui/multitask/removeFromFloat';
export { IUiMultitaskRemoveFromFloatParams, IUiMultitaskRemoveFromFloatResult } from './ui/multitask/removeFromFloat';
import { close$ as ui_nav_close } from './ui/nav/close';
export { IUiNavCloseParams, IUiNavCloseResult } from './ui/nav/close';
import { getCurrentId$ as ui_nav_getCurrentId } from './ui/nav/getCurrentId';
export { IUiNavGetCurrentIdParams, IUiNavGetCurrentIdResult } from './ui/nav/getCurrentId';
import { go$ as ui_nav_go } from './ui/nav/go';
export { IUiNavGoParams, IUiNavGoResult } from './ui/nav/go';
import { pop$ as ui_nav_pop } from './ui/nav/pop';
export { IUiNavPopParams, IUiNavPopResult } from './ui/nav/pop';
import { preload$ as ui_nav_preload } from './ui/nav/preload';
export { IUiNavPreloadParams, IUiNavPreloadResult } from './ui/nav/preload';
import { push$ as ui_nav_push } from './ui/nav/push';
export { IUiNavPushParams, IUiNavPushResult } from './ui/nav/push';
import { quit$ as ui_nav_quit } from './ui/nav/quit';
export { IUiNavQuitParams, IUiNavQuitResult } from './ui/nav/quit';
import { recycle$ as ui_nav_recycle } from './ui/nav/recycle';
export { IUiNavRecycleParams, IUiNavRecycleResult } from './ui/nav/recycle';
import { setColors$ as ui_progressBar_setColors } from './ui/progressBar/setColors';
export { IUiProgressBarSetColorsParams, IUiProgressBarSetColorsResult } from './ui/progressBar/setColors';
import { disable$ as ui_pullToRefresh_disable } from './ui/pullToRefresh/disable';
export { IUiPullToRefreshDisableParams, IUiPullToRefreshDisableResult } from './ui/pullToRefresh/disable';
import { enable$ as ui_pullToRefresh_enable } from './ui/pullToRefresh/enable';
export { IUiPullToRefreshEnableParams, IUiPullToRefreshEnableResult } from './ui/pullToRefresh/enable';
import { stop$ as ui_pullToRefresh_stop } from './ui/pullToRefresh/stop';
export { IUiPullToRefreshStopParams, IUiPullToRefreshStopResult } from './ui/pullToRefresh/stop';
import { add$ as ui_tab_add } from './ui/tab/add';
export { IUiTabAddParams, IUiTabAddResult } from './ui/tab/add';
import { config$ as ui_tab_config } from './ui/tab/config';
export { IUiTabConfigParams, IUiTabConfigResult } from './ui/tab/config';
import { init$ as ui_tab_init } from './ui/tab/init';
export { IUiTabInitParams, IUiTabInitResult } from './ui/tab/init';
import { remove$ as ui_tab_remove } from './ui/tab/remove';
export { IUiTabRemoveParams, IUiTabRemoveResult } from './ui/tab/remove';
import { select$ as ui_tab_select } from './ui/tab/select';
export { IUiTabSelectParams, IUiTabSelectResult } from './ui/tab/select';
import { start$ as ui_tab_start } from './ui/tab/start';
export { IUiTabStartParams, IUiTabStartResult } from './ui/tab/start';
import { disable$ as ui_webViewBounce_disable } from './ui/webViewBounce/disable';
export { IUiWebViewBounceDisableParams, IUiWebViewBounceDisableResult } from './ui/webViewBounce/disable';
import { enable$ as ui_webViewBounce_enable } from './ui/webViewBounce/enable';
export { IUiWebViewBounceEnableParams, IUiWebViewBounceEnableResult } from './ui/webViewBounce/enable';
import { read$ as util_cookies_read } from './util/cookies/read';
export { IUtilCookiesReadParams, IUtilCookiesReadResult } from './util/cookies/read';
import { write$ as util_cookies_write } from './util/cookies/write';
export { IUtilCookiesWriteParams, IUtilCookiesWriteResult } from './util/cookies/write';
import { clearItems$ as util_domainStorage_clearItems } from './util/domainStorage/clearItems';
export { IUtilDomainStorageClearItemsParams, IUtilDomainStorageClearItemsResult } from './util/domainStorage/clearItems';
import { getItem$ as util_domainStorage_getItem } from './util/domainStorage/getItem';
export { IUtilDomainStorageGetItemParams, IUtilDomainStorageGetItemResult } from './util/domainStorage/getItem';
import { getItems$ as util_domainStorage_getItems } from './util/domainStorage/getItems';
export { IUtilDomainStorageGetItemsParams, IUtilDomainStorageGetItemsResult } from './util/domainStorage/getItems';
import { listItems$ as util_domainStorage_listItems } from './util/domainStorage/listItems';
export { IUtilDomainStorageListItemsParams, IUtilDomainStorageListItemsResult } from './util/domainStorage/listItems';
import { removeItem$ as util_domainStorage_removeItem } from './util/domainStorage/removeItem';
export { IUtilDomainStorageRemoveItemParams, IUtilDomainStorageRemoveItemResult } from './util/domainStorage/removeItem';
import { setItem$ as util_domainStorage_setItem } from './util/domainStorage/setItem';
export { IUtilDomainStorageSetItemParams, IUtilDomainStorageSetItemResult } from './util/domainStorage/setItem';
import { getItem$ as util_localStorage_getItem } from './util/localStorage/getItem';
export { IUtilLocalStorageGetItemParams, IUtilLocalStorageGetItemResult } from './util/localStorage/getItem';
import { removeItem$ as util_localStorage_removeItem } from './util/localStorage/removeItem';
export { IUtilLocalStorageRemoveItemParams, IUtilLocalStorageRemoveItemResult } from './util/localStorage/removeItem';
import { setItem$ as util_localStorage_setItem } from './util/localStorage/setItem';
export { IUtilLocalStorageSetItemParams, IUtilLocalStorageSetItemResult } from './util/localStorage/setItem';
import { getData$ as util_openTemporary_getData } from './util/openTemporary/getData';
export { IUtilOpenTemporaryGetDataParams, IUtilOpenTemporaryGetDataResult } from './util/openTemporary/getData';
export declare const apiObj: {
    alipay: {
        verifyidentity: {
            getBioInfo: typeof alipay_verifyidentity_getBioInfo;
            verifyIdentity: typeof alipay_verifyidentity_verifyIdentity;
        };
    };
    biz: {
        ATMBle: {
            beaconPicker: typeof biz_ATMBle_beaconPicker;
            detectFace: typeof biz_ATMBle_detectFace;
            detectFaceFullScreen: typeof biz_ATMBle_detectFaceFullScreen;
            faceManager: typeof biz_ATMBle_faceManager;
            punchModePicker: typeof biz_ATMBle_punchModePicker;
        };
        alidoc: {
            getClipboardData: typeof biz_alidoc_getClipboardData;
            setStyle: typeof biz_alidoc_setStyle;
        };
        alipay: {
            auth: typeof biz_alipay_auth;
            bindAlipay: typeof biz_alipay_bindAlipay;
            openAuth: typeof biz_alipay_openAuth;
            pay: typeof biz_alipay_pay;
        };
        auth: {
            openAccountPwdLoginPage: typeof biz_auth_openAccountPwdLoginPage;
            requestAuthCode: typeof biz_auth_requestAuthCode;
            requestAuthInfo: typeof biz_auth_requestAuthInfo;
        };
        calendar: {
            chooseDateTime: typeof biz_calendar_chooseDateTime;
            chooseHalfDay: typeof biz_calendar_chooseHalfDay;
            chooseInterval: typeof biz_calendar_chooseInterval;
            chooseOneDay: typeof biz_calendar_chooseOneDay;
            datePicker: typeof biz_calendar_datePicker;
        };
        chat: {
            addGroup: typeof biz_chat_addGroup;
            chooseConversation: typeof biz_chat_chooseConversation;
            chooseConversationByCorpId: typeof biz_chat_chooseConversationByCorpId;
            collectSticker: typeof biz_chat_collectSticker;
            createOrgPublicGroup: typeof biz_chat_createOrgPublicGroup;
            createSceneGroup: typeof biz_chat_createSceneGroup;
            getConversationInfo: typeof biz_chat_getConversationInfo;
            getRealmCid: typeof biz_chat_getRealmCid;
            locationChatMessage: typeof biz_chat_locationChatMessage;
            modifyGroupDesc: typeof biz_chat_modifyGroupDesc;
            open: typeof biz_chat_open;
            openSingleChat: typeof biz_chat_openSingleChat;
            pickConversation: typeof biz_chat_pickConversation;
            queryUnreadSessions: typeof biz_chat_queryUnreadSessions;
            sendEmotion: typeof biz_chat_sendEmotion;
            sendMessageToContact: typeof biz_chat_sendMessageToContact;
            sendReplyToInputPanel: typeof biz_chat_sendReplyToInputPanel;
            sendRichTextToEditor: typeof biz_chat_sendRichTextToEditor;
            toConversation: typeof biz_chat_toConversation;
            toConversationByOpenConversationId: typeof biz_chat_toConversationByOpenConversationId;
        };
        clipboardData: {
            setData: typeof biz_clipboardData_setData;
        };
        conference: {
            createCloudCall: typeof biz_conference_createCloudCall;
            docRoomStatusChanged: typeof biz_conference_docRoomStatusChanged;
            getCloudCallInfo: typeof biz_conference_getCloudCallInfo;
            getCloudCallList: typeof biz_conference_getCloudCallList;
            openLink: typeof biz_conference_openLink;
            screenshot: typeof biz_conference_screenshot;
            toggleConfAudio: typeof biz_conference_toggleConfAudio;
            videoCall: typeof biz_conference_videoCall;
            videoConfCall: typeof biz_conference_videoConfCall;
        };
        contact: {
            addFromContact: typeof biz_contact_addFromContact;
            addFromManual: typeof biz_contact_addFromManual;
            addSubManager: typeof biz_contact_addSubManager;
            addUserForm: typeof biz_contact_addUserForm;
            changeCustomerFollower: typeof biz_contact_changeCustomerFollower;
            choose: typeof biz_contact_choose;
            chooseMobileContacts: typeof biz_contact_chooseMobileContacts;
            complexChoose: typeof biz_contact_complexChoose;
            complexPicker: typeof biz_contact_complexPicker;
            complexSelectedPicker: typeof biz_contact_complexSelectedPicker;
            createGroup: typeof biz_contact_createGroup;
            departmentsPicker: typeof biz_contact_departmentsPicker;
            departmentsSelectedPicker: typeof biz_contact_departmentsSelectedPicker;
            externalComplexPicker: typeof biz_contact_externalComplexPicker;
            externalEditForm: typeof biz_contact_externalEditForm;
            getMobileContact: typeof biz_contact_getMobileContact;
            inviteGroupMember: typeof biz_contact_inviteGroupMember;
            isForeignOrg: typeof biz_contact_isForeignOrg;
            manageContactAlert: typeof biz_contact_manageContactAlert;
            pickCustomer: typeof biz_contact_pickCustomer;
            pickJobTitle: typeof biz_contact_pickJobTitle;
            rolesPicker: typeof biz_contact_rolesPicker;
            setRule: typeof biz_contact_setRule;
            teamScaleSelect: typeof biz_contact_teamScaleSelect;
            useTagPicker: typeof biz_contact_useTagPicker;
        };
        cspace: {
            chooseSpaceDir: typeof biz_cspace_chooseSpaceDir;
            copy: typeof biz_cspace_copy;
            delete: typeof biz_cspace_delete;
            getPlayUrl: typeof biz_cspace_getPlayUrl;
            preview: typeof biz_cspace_preview;
            saveFile: typeof biz_cspace_saveFile;
        };
        customContact: {
            choose: typeof biz_customContact_choose;
            multipleChoose: typeof biz_customContact_multipleChoose;
        };
        data: {
            getAvatar: typeof biz_data_getAvatar;
        };
        ding: {
            create: typeof biz_ding_create;
            detail: typeof biz_ding_detail;
            post: typeof biz_ding_post;
            update: typeof biz_ding_update;
        };
        edu: {
            finishMiniCourseByRecordId: typeof biz_edu_finishMiniCourseByRecordId;
            getMiniCourseDraftList: typeof biz_edu_getMiniCourseDraftList;
            joinClassroom: typeof biz_edu_joinClassroom;
            makeMiniCourse: typeof biz_edu_makeMiniCourse;
            newMsgNotificationStatus: typeof biz_edu_newMsgNotificationStatus;
            startAuth: typeof biz_edu_startAuth;
            tokenFaceImg: typeof biz_edu_tokenFaceImg;
        };
        event: {
            notifyWeex: typeof biz_event_notifyWeex;
        };
        faceBox: {
            experienceFunction: typeof biz_faceBox_experienceFunction;
            getRecognition: typeof biz_faceBox_getRecognition;
            removeFace: typeof biz_faceBox_removeFace;
            sendMessageToContact: typeof biz_faceBox_sendMessageToContact;
            setRecognition: typeof biz_faceBox_setRecognition;
            showRemind: typeof biz_faceBox_showRemind;
            startCameraRecord: typeof biz_faceBox_startCameraRecord;
            startCameraRecordFromPartner: typeof biz_faceBox_startCameraRecordFromPartner;
            startPictureRecord: typeof biz_faceBox_startPictureRecord;
        };
        intent: {
            fetchData: typeof biz_intent_fetchData;
        };
        iot: {
            bind: typeof biz_iot_bind;
            bindMeetingRoom: typeof biz_iot_bindMeetingRoom;
            getDeviceProperties: typeof biz_iot_getDeviceProperties;
            invokeThingService: typeof biz_iot_invokeThingService;
            queryMeetingRoomList: typeof biz_iot_queryMeetingRoomList;
            setDeviceProperties: typeof biz_iot_setDeviceProperties;
            unbind: typeof biz_iot_unbind;
        };
        kingGrid: {
            approvalPdf: typeof biz_kingGrid_approvalPdf;
        };
        live: {
            chooseLiveGroup: typeof biz_live_chooseLiveGroup;
            destroyPlayer: typeof biz_live_destroyPlayer;
            getAllLiveList: typeof biz_live_getAllLiveList;
            getDynamicMsgCount: typeof biz_live_getDynamicMsgCount;
            getLiveFuncMsgs: typeof biz_live_getLiveFuncMsgs;
            getLiveInfos: typeof biz_live_getLiveInfos;
            getLiveStatistics: typeof biz_live_getLiveStatistics;
            getPlaybackList: typeof biz_live_getPlaybackList;
            getPlayerPosition: typeof biz_live_getPlayerPosition;
            getStickyStatus: typeof biz_live_getStickyStatus;
            hidePlayer: typeof biz_live_hidePlayer;
            initPlayer: typeof biz_live_initPlayer;
            listLiveRecords: typeof biz_live_listLiveRecords;
            listLiveViewers: typeof biz_live_listLiveViewers;
            nav2GroupAnchorList: typeof biz_live_nav2GroupAnchorList;
            nav2PlayVideo: typeof biz_live_nav2PlayVideo;
            playerPause: typeof biz_live_playerPause;
            playerPlay: typeof biz_live_playerPlay;
            playerSeekTo: typeof biz_live_playerSeekTo;
            setStickyStatus: typeof biz_live_setStickyStatus;
            shareToGroup: typeof biz_live_shareToGroup;
            showPlayer: typeof biz_live_showPlayer;
            startClassRoom: typeof biz_live_startClassRoom;
            startDummyLive: typeof biz_live_startDummyLive;
            startUnifiedLive: typeof biz_live_startUnifiedLive;
            stopDummyLive: typeof biz_live_stopDummyLive;
            stopDummyLiveAll: typeof biz_live_stopDummyLiveAll;
            updateDrawingCache: typeof biz_live_updateDrawingCache;
            updateSimulGroup: typeof biz_live_updateSimulGroup;
        };
        map: {
            locate: typeof biz_map_locate;
            search: typeof biz_map_search;
            searchRoute: typeof biz_map_searchRoute;
            view: typeof biz_map_view;
        };
        media: {
            compressVideo: typeof biz_media_compressVideo;
        };
        microApp: {
            openApp: typeof biz_microApp_openApp;
            visualList: typeof biz_microApp_visualList;
        };
        navigation: {
            back: typeof biz_navigation_back;
            close: typeof biz_navigation_close;
            createEditor: typeof biz_navigation_createEditor;
            finishEditor: typeof biz_navigation_finishEditor;
            gestures: typeof biz_navigation_gestures;
            goBack: typeof biz_navigation_goBack;
            hideBar: typeof biz_navigation_hideBar;
            navigateToMiniProgram: typeof biz_navigation_navigateToMiniProgram;
            popGesture: typeof biz_navigation_popGesture;
            quit: typeof biz_navigation_quit;
            replace: typeof biz_navigation_replace;
            setActions: typeof biz_navigation_setActions;
            setIcon: typeof biz_navigation_setIcon;
            setLeft: typeof biz_navigation_setLeft;
            setMenu: typeof biz_navigation_setMenu;
            setPullGesture: typeof biz_navigation_setPullGesture;
            setRight: typeof biz_navigation_setRight;
            setSubtitle: typeof biz_navigation_setSubtitle;
            setTitle: typeof biz_navigation_setTitle;
            setTitleIcon: typeof biz_navigation_setTitleIcon;
            showPopdownList: typeof biz_navigation_showPopdownList;
        };
        notify: {
            send: typeof biz_notify_send;
        };
        oa: {
            authorityVerify: typeof biz_oa_authorityVerify;
            setWorkTab: typeof biz_oa_setWorkTab;
        };
        oauth: {
            authorize: typeof biz_oauth_authorize;
        };
        pbp: {
            componentPunchFromPartner: typeof biz_pbp_componentPunchFromPartner;
            startMatchRuleFromPartner: typeof biz_pbp_startMatchRuleFromPartner;
            stopMatchRuleFromPartner: typeof biz_pbp_stopMatchRuleFromPartner;
        };
        preload: {
            video: typeof biz_preload_video;
        };
        realm: {
            getRealtimeTracingStatus: typeof biz_realm_getRealtimeTracingStatus;
            getUserExclusiveInfo: typeof biz_realm_getUserExclusiveInfo;
            startRealtimeTracing: typeof biz_realm_startRealtimeTracing;
            stopRealtimeTracing: typeof biz_realm_stopRealtimeTracing;
            subscribe: typeof biz_realm_subscribe;
            unsubscribe: typeof biz_realm_unsubscribe;
        };
        redenvelop: {
            sendEnterpriseRedEnvelop: typeof biz_redenvelop_sendEnterpriseRedEnvelop;
            sendNormalRedEnvelop: typeof biz_redenvelop_sendNormalRedEnvelop;
        };
        resource: {
            getInfo: typeof biz_resource_getInfo;
            reportDebugMessage: typeof biz_resource_reportDebugMessage;
            reportPerf: typeof biz_resource_reportPerf;
        };
        schedule: {
            create: typeof biz_schedule_create;
        };
        shortCut: {
            addShortCut: typeof biz_shortCut_addShortCut;
        };
        sports: {
            checkHealthPermission: typeof biz_sports_checkHealthPermission;
            checkSensorPermission: typeof biz_sports_checkSensorPermission;
            disableStepCountSync: typeof biz_sports_disableStepCountSync;
            enableStepCountSync: typeof biz_sports_enableStepCountSync;
            fetchAliuid: typeof biz_sports_fetchAliuid;
            fetchStephubSteps: typeof biz_sports_fetchStephubSteps;
            fetchTaobaoH5TrustLoginUrlForAlisports: typeof biz_sports_fetchTaobaoH5TrustLoginUrlForAlisports;
            fetchTaobaoId: typeof biz_sports_fetchTaobaoId;
            getTodaysStepCount: typeof biz_sports_getTodaysStepCount;
            requestHealthPermission: typeof biz_sports_requestHealthPermission;
            requestSensorPermission: typeof biz_sports_requestSensorPermission;
        };
        store: {
            closeUnpayOrder: typeof biz_store_closeUnpayOrder;
            createOrder: typeof biz_store_createOrder;
            getPayUrl: typeof biz_store_getPayUrl;
            inquiry: typeof biz_store_inquiry;
        };
        tabwindow: {
            isTab: typeof biz_tabwindow_isTab;
        };
        tag: {
            batchTags: typeof biz_tag_batchTags;
            mark: typeof biz_tag_mark;
        };
        telephone: {
            call: typeof biz_telephone_call;
            callOrgExternalContacts: typeof biz_telephone_callOrgExternalContacts;
            checkBizCall: typeof biz_telephone_checkBizCall;
            quickCall: typeof biz_telephone_quickCall;
            quickCallList: typeof biz_telephone_quickCallList;
            showCallMenu: typeof biz_telephone_showCallMenu;
        };
        uic: {
            directLogin: typeof biz_uic_directLogin;
            doLogin: typeof biz_uic_doLogin;
        };
        user: {
            checkPassword: typeof biz_user_checkPassword;
            get: typeof biz_user_get;
            loginBySms: typeof biz_user_loginBySms;
            loginTaobaoWithDingtalkUserToken: typeof biz_user_loginTaobaoWithDingtalkUserToken;
            secretID: typeof biz_user_secretID;
        };
        util: {
            acitveConversation: typeof biz_util_acitveConversation;
            addCalendarEvent: typeof biz_util_addCalendarEvent;
            addDesktopShortcuts: typeof biz_util_addDesktopShortcuts;
            callComponent: typeof biz_util_callComponent;
            chooseImage: typeof biz_util_chooseImage;
            chosen: typeof biz_util_chosen;
            clearWebStoreCache: typeof biz_util_clearWebStoreCache;
            closePreviewImage: typeof biz_util_closePreviewImage;
            compressImage: typeof biz_util_compressImage;
            createVoipConference: typeof biz_util_createVoipConference;
            datepicker: typeof biz_util_datepicker;
            datetimepicker: typeof biz_util_datetimepicker;
            decrypt: typeof biz_util_decrypt;
            downloadFile: typeof biz_util_downloadFile;
            editPicture: typeof biz_util_editPicture;
            editSpaceFileOnline: typeof biz_util_editSpaceFileOnline;
            encrypt: typeof biz_util_encrypt;
            fetchFileData: typeof biz_util_fetchFileData;
            fetchImageData: typeof biz_util_fetchImageData;
            forwardDpFile: typeof biz_util_forwardDpFile;
            getLocaleAndNationByCorpId: typeof biz_util_getLocaleAndNationByCorpId;
            getPerfInfo: typeof biz_util_getPerfInfo;
            invokeWorkbench: typeof biz_util_invokeWorkbench;
            isEnableGPUAcceleration: typeof biz_util_isEnableGPUAcceleration;
            isLocalFileExist: typeof biz_util_isLocalFileExist;
            mailTo: typeof biz_util_mailTo;
            multiSelect: typeof biz_util_multiSelect;
            open: typeof biz_util_open;
            openFloatWindow: typeof biz_util_openFloatWindow;
            openLink: typeof biz_util_openLink;
            openLocalFile: typeof biz_util_openLocalFile;
            openModal: typeof biz_util_openModal;
            openPrintWnd: typeof biz_util_openPrintWnd;
            openShareDpFileWnd: typeof biz_util_openShareDpFileWnd;
            openSlidePanel: typeof biz_util_openSlidePanel;
            openWindowWithUrl: typeof biz_util_openWindowWithUrl;
            perfBizReady: typeof biz_util_perfBizReady;
            presentWindow: typeof biz_util_presentWindow;
            previewFile: typeof biz_util_previewFile;
            previewImage: typeof biz_util_previewImage;
            previewVideo: typeof biz_util_previewVideo;
            qrcode: typeof biz_util_qrcode;
            queryConferenceList: typeof biz_util_queryConferenceList;
            quitComponent: typeof biz_util_quitComponent;
            recordVideoToUpload: typeof biz_util_recordVideoToUpload;
            requestWorkbench: typeof biz_util_requestWorkbench;
            saveImage: typeof biz_util_saveImage;
            scan: typeof biz_util_scan;
            scanCard: typeof biz_util_scanCard;
            selectEmoji: typeof biz_util_selectEmoji;
            setGPUAcceleration: typeof biz_util_setGPUAcceleration;
            setScreenBrightnessAndKeepOn: typeof biz_util_setScreenBrightnessAndKeepOn;
            setScreenKeepOn: typeof biz_util_setScreenKeepOn;
            share: typeof biz_util_share;
            shareImage: typeof biz_util_shareImage;
            shareLongImage: typeof biz_util_shareLongImage;
            shareMiniApp: typeof biz_util_shareMiniApp;
            startDocSign: typeof biz_util_startDocSign;
            stickPage: typeof biz_util_stickPage;
            systemShare: typeof biz_util_systemShare;
            timepicker: typeof biz_util_timepicker;
            timestamp: typeof biz_util_timestamp;
            updateTrackPageName: typeof biz_util_updateTrackPageName;
            updateTrackProperties: typeof biz_util_updateTrackProperties;
            uploadAttachment: typeof biz_util_uploadAttachment;
            uploadFile: typeof biz_util_uploadFile;
            uploadImage: typeof biz_util_uploadImage;
            uploadImageFromCamera: typeof biz_util_uploadImageFromCamera;
            uploadMedia: typeof biz_util_uploadMedia;
            ut: typeof biz_util_ut;
            vip: typeof biz_util_vip;
            warn: typeof biz_util_warn;
            watermarkCamera: typeof biz_util_watermarkCamera;
        };
        verify: {
            biometric: typeof biz_verify_biometric;
            openBindIDCard: typeof biz_verify_openBindIDCard;
            startAuth: typeof biz_verify_startAuth;
            takePhoto: typeof biz_verify_takePhoto;
        };
        watermarkCamera: {
            getWatermarkInfo: typeof biz_watermarkCamera_getWatermarkInfo;
            setWatermarkInfo: typeof biz_watermarkCamera_setWatermarkInfo;
        };
        wiki: {
            openPage: typeof biz_wiki_openPage;
            saveToWiki: typeof biz_wiki_saveToWiki;
        };
        zoloz: {
            download: typeof biz_zoloz_download;
            zimIdentity: typeof biz_zoloz_zimIdentity;
        };
    };
    channel: {
        open: {
            profile: typeof channel_open_profile;
        };
        permission: {
            requestAuthCode: typeof channel_permission_requestAuthCode;
        };
    };
    device: {
        accelerometer: {
            clearShake: typeof device_accelerometer_clearShake;
            watchShake: typeof device_accelerometer_watchShake;
        };
        audio: {
            download: typeof device_audio_download;
            getDuration: typeof device_audio_getDuration;
            getVolume: typeof device_audio_getVolume;
            isMute: typeof device_audio_isMute;
            onPlayEnd: typeof device_audio_onPlayEnd;
            onRecordEnd: typeof device_audio_onRecordEnd;
            pause: typeof device_audio_pause;
            play: typeof device_audio_play;
            resume: typeof device_audio_resume;
            seek: typeof device_audio_seek;
            setMute: typeof device_audio_setMute;
            setVolume: typeof device_audio_setVolume;
            startRecord: typeof device_audio_startRecord;
            stop: typeof device_audio_stop;
            stopRecord: typeof device_audio_stopRecord;
            translateVoice: typeof device_audio_translateVoice;
            upload: typeof device_audio_upload;
        };
        base: {
            connectBleDevice: typeof device_base_connectBleDevice;
            disConnectBleDevice: typeof device_base_disConnectBleDevice;
            enableBluetooth: typeof device_base_enableBluetooth;
            enableBluetoothV2: typeof device_base_enableBluetoothV2;
            enableLocation: typeof device_base_enableLocation;
            enableWifi: typeof device_base_enableWifi;
            getInterface: typeof device_base_getInterface;
            getPhoneInfo: typeof device_base_getPhoneInfo;
            getScanWifiList: typeof device_base_getScanWifiList;
            getScanWifiListAsync: typeof device_base_getScanWifiListAsync;
            getSettings: typeof device_base_getSettings;
            getUUID: typeof device_base_getUUID;
            getWifiStatus: typeof device_base_getWifiStatus;
            openSystemSetting: typeof device_base_openSystemSetting;
            scanBleDevice: typeof device_base_scanBleDevice;
            sendDataToDevice: typeof device_base_sendDataToDevice;
            startBindDevice: typeof device_base_startBindDevice;
            stopScanBleDevice: typeof device_base_stopScanBleDevice;
            unBindDevice: typeof device_base_unBindDevice;
        };
        connection: {
            getNetworkType: typeof device_connection_getNetworkType;
        };
        geolocation: {
            checkPermission: typeof device_geolocation_checkPermission;
            checkService: typeof device_geolocation_checkService;
            get: typeof device_geolocation_get;
            isEnabled: typeof device_geolocation_isEnabled;
            isEnabledHighAccuracy: typeof device_geolocation_isEnabledHighAccuracy;
            openGps: typeof device_geolocation_openGps;
            start: typeof device_geolocation_start;
            status: typeof device_geolocation_status;
            stop: typeof device_geolocation_stop;
        };
        handwriting: {
            changeSlatePosition: typeof device_handwriting_changeSlatePosition;
            showHandPanel: typeof device_handwriting_showHandPanel;
        };
        health: {
            dayStepCount: typeof device_health_dayStepCount;
            stepCount: typeof device_health_stepCount;
        };
        launcher: {
            checkInstalledApps: typeof device_launcher_checkInstalledApps;
            launchApp: typeof device_launcher_launchApp;
        };
        nfc: {
            nfcRead: typeof device_nfc_nfcRead;
            nfcStop: typeof device_nfc_nfcStop;
            nfcWrite: typeof device_nfc_nfcWrite;
        };
        notification: {
            actionSheet: typeof device_notification_actionSheet;
            alert: typeof device_notification_alert;
            confirm: typeof device_notification_confirm;
            extendModal: typeof device_notification_extendModal;
            getNotificationStatus: typeof device_notification_getNotificationStatus;
            hidePreloader: typeof device_notification_hidePreloader;
            modal: typeof device_notification_modal;
            prompt: typeof device_notification_prompt;
            showPreloader: typeof device_notification_showPreloader;
            toast: typeof device_notification_toast;
            vibrate: typeof device_notification_vibrate;
        };
        screen: {
            insetAdjust: typeof device_screen_insetAdjust;
            resetView: typeof device_screen_resetView;
            rotateView: typeof device_screen_rotateView;
            setAutoOrientation: typeof device_screen_setAutoOrientation;
        };
        screenshot: {
            startMonitor: typeof device_screenshot_startMonitor;
            stopMonitor: typeof device_screenshot_stopMonitor;
        };
    };
    interactive: {
        bizCard: {
            batchDisposeCard: typeof interactive_bizCard_batchDisposeCard;
            getCardInfo: typeof interactive_bizCard_getCardInfo;
            sendAction: typeof interactive_bizCard_sendAction;
        };
    };
    internal: {
        ATMBle: {
            beaconPickResult: typeof internal_ATMBle_beaconPickResult;
            checkIn: typeof internal_ATMBle_checkIn;
            detectFace: typeof internal_ATMBle_detectFace;
            detectFaceFullScreen: typeof internal_ATMBle_detectFaceFullScreen;
            faceManagerResult: typeof internal_ATMBle_faceManagerResult;
            getBleLocalDevList: typeof internal_ATMBle_getBleLocalDevList;
            getPunchEventClockCheckResult: typeof internal_ATMBle_getPunchEventClockCheckResult;
            punchModePickResult: typeof internal_ATMBle_punchModePickResult;
            requestPunchEvents: typeof internal_ATMBle_requestPunchEvents;
            scanBleDevice: typeof internal_ATMBle_scanBleDevice;
            showBlePopupWindowMock: typeof internal_ATMBle_showBlePopupWindowMock;
            startMonitor: typeof internal_ATMBle_startMonitor;
            stopMonitor: typeof internal_ATMBle_stopMonitor;
            updateBluetoothConfig: typeof internal_ATMBle_updateBluetoothConfig;
        };
        ai: {
            cancelTask: typeof internal_ai_cancelTask;
            createTask: typeof internal_ai_createTask;
            frameUpload: typeof internal_ai_frameUpload;
        };
        alidoc: {
            keyboardAccessory: typeof internal_alidoc_keyboardAccessory;
            keyboardCompression: typeof internal_alidoc_keyboardCompression;
        };
        alpha: {
            addWdsDevice: typeof internal_alpha_addWdsDevice;
            connectSecurityWiFi: typeof internal_alpha_connectSecurityWiFi;
            copyPwd: typeof internal_alpha_copyPwd;
            discover: typeof internal_alpha_discover;
            getDevicePwd: typeof internal_alpha_getDevicePwd;
        };
        attend: {
            assistant: typeof internal_attend_assistant;
            checkInRecords: typeof internal_attend_checkInRecords;
            getAccurateLocatingInfo: typeof internal_attend_getAccurateLocatingInfo;
            getOfflineResource: typeof internal_attend_getOfflineResource;
            getProloadResource: typeof internal_attend_getProloadResource;
            isBetaEnabled: typeof internal_attend_isBetaEnabled;
            setOfflineResource: typeof internal_attend_setOfflineResource;
            updateBluetoothCheckList: typeof internal_attend_updateBluetoothCheckList;
        };
        auth: {
            backToLoginPage: typeof internal_auth_backToLoginPage;
            getActionTokenByPwd: typeof internal_auth_getActionTokenByPwd;
            getCurrentTmpCode: typeof internal_auth_getCurrentTmpCode;
            identifyByAlipay: typeof internal_auth_identifyByAlipay;
            identifyByAssistantMail: typeof internal_auth_identifyByAssistantMail;
            identifyByContactsVerify: typeof internal_auth_identifyByContactsVerify;
            identifyByFace: typeof internal_auth_identifyByFace;
            identifyByOIDC: typeof internal_auth_identifyByOIDC;
            oidcPwdSetted: typeof internal_auth_oidcPwdSetted;
            postLoginTempCode: typeof internal_auth_postLoginTempCode;
            reLogin: typeof internal_auth_reLogin;
        };
        backgroundAudio: {
            setCustomConfig: typeof internal_backgroundAudio_setCustomConfig;
        };
        badges: {
            getTabBadgeByKey: typeof internal_badges_getTabBadgeByKey;
        };
        beacon: {
            bind: typeof internal_beacon_bind;
            detectBeacons: typeof internal_beacon_detectBeacons;
            detectStart: typeof internal_beacon_detectStart;
            detectStop: typeof internal_beacon_detectStop;
        };
        biz: {
            makecall: typeof internal_biz_makecall;
            openApp: typeof internal_biz_openApp;
            uploadVideo: typeof internal_biz_uploadVideo;
            webNotify: typeof internal_biz_webNotify;
        };
        bizcard: {
            batchAddExtContacts: typeof internal_bizcard_batchAddExtContacts;
            companyPicker: typeof internal_bizcard_companyPicker;
            friendCategories: typeof internal_bizcard_friendCategories;
            friendCount: typeof internal_bizcard_friendCount;
            friendPicker: typeof internal_bizcard_friendPicker;
            friendsByCategory: typeof internal_bizcard_friendsByCategory;
            friendsByName: typeof internal_bizcard_friendsByName;
            friendsByRoom: typeof internal_bizcard_friendsByRoom;
            mobileContactCount: typeof internal_bizcard_mobileContactCount;
            roomsByTime: typeof internal_bizcard_roomsByTime;
            search: typeof internal_bizcard_search;
            timeZone: typeof internal_bizcard_timeZone;
            updateAvatar: typeof internal_bizcard_updateAvatar;
        };
        blebusiness: {
            allOrgs: typeof internal_blebusiness_allOrgs;
            buildDeviceNick: typeof internal_blebusiness_buildDeviceNick;
            currentMainOrgId: typeof internal_blebusiness_currentMainOrgId;
            getDeviceInfo: typeof internal_blebusiness_getDeviceInfo;
            getEndorseModelWithSecret: typeof internal_blebusiness_getEndorseModelWithSecret;
            getHandshakeModelFromEndorseModel: typeof internal_blebusiness_getHandshakeModelFromEndorseModel;
            popOrgCreatePage: typeof internal_blebusiness_popOrgCreatePage;
            popOrgCreatePageForProjector: typeof internal_blebusiness_popOrgCreatePageForProjector;
            queryDingWifiDevicesWithOrg: typeof internal_blebusiness_queryDingWifiDevicesWithOrg;
            reportNetIsolate: typeof internal_blebusiness_reportNetIsolate;
            showNotifyDingCard: typeof internal_blebusiness_showNotifyDingCard;
        };
        bleengine: {
            bluetoothState: typeof internal_bleengine_bluetoothState;
            checkEnv: typeof internal_bleengine_checkEnv;
            connectDevice: typeof internal_bleengine_connectDevice;
            request: typeof internal_bleengine_request;
            scanStart: typeof internal_bleengine_scanStart;
            scanStop: typeof internal_bleengine_scanStop;
        };
        cache: {
            restore: typeof internal_cache_restore;
            save: typeof internal_cache_save;
        };
        certify: {
            biometric: typeof internal_certify_biometric;
            step: typeof internal_certify_step;
            submit: typeof internal_certify_submit;
            takePhoto: typeof internal_certify_takePhoto;
        };
        channel: {
            infoExist: typeof internal_channel_infoExist;
            openPage: typeof internal_channel_openPage;
            publish: typeof internal_channel_publish;
            subscribe: typeof internal_channel_subscribe;
            unsubscribe: typeof internal_channel_unsubscribe;
        };
        chat: {
            applyJoinGroup: typeof internal_chat_applyJoinGroup;
            batchDisplayNames: typeof internal_chat_batchDisplayNames;
            batchUserProfiles: typeof internal_chat_batchUserProfiles;
            clearDraft: typeof internal_chat_clearDraft;
            closeTopOneBoxCard: typeof internal_chat_closeTopOneBoxCard;
            createApprovalGroup: typeof internal_chat_createApprovalGroup;
            downloadMedias: typeof internal_chat_downloadMedias;
            emotionTranslater: typeof internal_chat_emotionTranslater;
            encryptOpenId: typeof internal_chat_encryptOpenId;
            focusMessage: typeof internal_chat_focusMessage;
            generateUrl: typeof internal_chat_generateUrl;
            getConvInfo: typeof internal_chat_getConvInfo;
            getConvUnreadMsgCount: typeof internal_chat_getConvUnreadMsgCount;
            getConversations: typeof internal_chat_getConversations;
            getCurrentOpenId: typeof internal_chat_getCurrentOpenId;
            getDisplayName: typeof internal_chat_getDisplayName;
            getDraft: typeof internal_chat_getDraft;
            getDraftAndClear: typeof internal_chat_getDraftAndClear;
            getEncryptImageThumb: typeof internal_chat_getEncryptImageThumb;
            getMessageList: typeof internal_chat_getMessageList;
            getPickedImageThumbData: typeof internal_chat_getPickedImageThumbData;
            getRichTextPayload: typeof internal_chat_getRichTextPayload;
            getTopic: typeof internal_chat_getTopic;
            getTopicReplys: typeof internal_chat_getTopicReplys;
            getTopicStickers: typeof internal_chat_getTopicStickers;
            getUserProfile: typeof internal_chat_getUserProfile;
            joinGroupByBizType: typeof internal_chat_joinGroupByBizType;
            markSettingsReddot: typeof internal_chat_markSettingsReddot;
            openConversation: typeof internal_chat_openConversation;
            pickAtList: typeof internal_chat_pickAtList;
            pickGroupConversation: typeof internal_chat_pickGroupConversation;
            pickImage: typeof internal_chat_pickImage;
            previewMessage: typeof internal_chat_previewMessage;
            recallMessage: typeof internal_chat_recallMessage;
            registTopicMessageListener: typeof internal_chat_registTopicMessageListener;
            selectAndSendText: typeof internal_chat_selectAndSendText;
            sendBizMessage: typeof internal_chat_sendBizMessage;
            sendCustomMessage: typeof internal_chat_sendCustomMessage;
            sendMultiMsges: typeof internal_chat_sendMultiMsges;
            sendReplyMessage: typeof internal_chat_sendReplyMessage;
            sendRichTextMessage: typeof internal_chat_sendRichTextMessage;
            setHasRichTextDraft: typeof internal_chat_setHasRichTextDraft;
            showMessageMenu: typeof internal_chat_showMessageMenu;
            showTopicEmotionBar: typeof internal_chat_showTopicEmotionBar;
            stickerReply: typeof internal_chat_stickerReply;
            toConversation: typeof internal_chat_toConversation;
            transmitMsg: typeof internal_chat_transmitMsg;
            unregistTopicMessageListener: typeof internal_chat_unregistTopicMessageListener;
            uploadPickedImage: typeof internal_chat_uploadPickedImage;
        };
        circle: {
            getStorage: typeof internal_circle_getStorage;
            removeStorage: typeof internal_circle_removeStorage;
            setStorage: typeof internal_circle_setStorage;
        };
        clipboardData: {
            getData: typeof internal_clipboardData_getData;
        };
        coap: {
            sendMessage: typeof internal_coap_sendMessage;
        };
        contact: {
            chooseEnterpriseUser: typeof internal_contact_chooseEnterpriseUser;
            chooseMobileContact: typeof internal_contact_chooseMobileContact;
            chooseOrgAddress: typeof internal_contact_chooseOrgAddress;
            commonPicker: typeof internal_contact_commonPicker;
            internalComplexPicker: typeof internal_contact_internalComplexPicker;
            internalComplexPickerWithUid: typeof internal_contact_internalComplexPickerWithUid;
            openSelectUserWnd: typeof internal_contact_openSelectUserWnd;
            queryPickedResult: typeof internal_contact_queryPickedResult;
            removePickedResult: typeof internal_contact_removePickedResult;
        };
        conversation: {
            getProperty: typeof internal_conversation_getProperty;
            mute: typeof internal_conversation_mute;
            switchEffectiveMode: typeof internal_conversation_switchEffectiveMode;
            top: typeof internal_conversation_top;
        };
        corps: {
            listCorpInfo: typeof internal_corps_listCorpInfo;
        };
        createOrg: {
            industryInfo: typeof internal_createOrg_industryInfo;
            lastCreateOrgInfo: typeof internal_createOrg_lastCreateOrgInfo;
            successJump: typeof internal_createOrg_successJump;
        };
        cspace: {
            cancelDecryptAndUpload: typeof internal_cspace_cancelDecryptAndUpload;
            cancelFileUpload: typeof internal_cspace_cancelFileUpload;
            cidToSpaceId: typeof internal_cspace_cidToSpaceId;
            decryptAndUpload: typeof internal_cspace_decryptAndUpload;
            downloadFile: typeof internal_cspace_downloadFile;
            edit: typeof internal_cspace_edit;
            fileUpload: typeof internal_cspace_fileUpload;
            getMediaInfo: typeof internal_cspace_getMediaInfo;
            getToken: typeof internal_cspace_getToken;
            openCloudPrintPluginWnd: typeof internal_cspace_openCloudPrintPluginWnd;
            openCloudPrintWnd: typeof internal_cspace_openCloudPrintWnd;
            openEditInviteWnd: typeof internal_cspace_openEditInviteWnd;
            openFolder: typeof internal_cspace_openFolder;
            requestDentryUrl: typeof internal_cspace_requestDentryUrl;
            sendMsgToRequestPermission: typeof internal_cspace_sendMsgToRequestPermission;
            uploadFile: typeof internal_cspace_uploadFile;
        };
        customerService: {
            hideQuickEntrance: typeof internal_customerService_hideQuickEntrance;
            isRecording: typeof internal_customerService_isRecording;
            showQuickEntrance: typeof internal_customerService_showQuickEntrance;
            startRecord: typeof internal_customerService_startRecord;
            stopRecord: typeof internal_customerService_stopRecord;
            tryUploadRecords: typeof internal_customerService_tryUploadRecords;
        };
        diagnostic: {
            getFastCheckInInfo: typeof internal_diagnostic_getFastCheckInInfo;
            getLocalErrorMsg: typeof internal_diagnostic_getLocalErrorMsg;
        };
        dingCard: {
            bindWorkMobile: typeof internal_dingCard_bindWorkMobile;
            unbindWorkMobile: typeof internal_dingCard_unbindWorkMobile;
        };
        dingbadge: {
            auth: typeof internal_dingbadge_auth;
            codeInvalidReport: typeof internal_dingbadge_codeInvalidReport;
            isAuth: typeof internal_dingbadge_isAuth;
            refreshCode: typeof internal_dingbadge_refreshCode;
            refreshData: typeof internal_dingbadge_refreshData;
            startGenCode: typeof internal_dingbadge_startGenCode;
            stopGenCode: typeof internal_dingbadge_stopGenCode;
            unAuth: typeof internal_dingbadge_unAuth;
            visit: typeof internal_dingbadge_visit;
        };
        dingpay: {
            bindAlipay: typeof internal_dingpay_bindAlipay;
            unbindAlipay: typeof internal_dingpay_unbindAlipay;
        };
        efficiencyKit: {
            getParams: typeof internal_efficiencyKit_getParams;
            openCustomGroupList: typeof internal_efficiencyKit_openCustomGroupList;
            setParams: typeof internal_efficiencyKit_setParams;
        };
        enterpriseEncryption: {
            info: typeof internal_enterpriseEncryption_info;
            sendMessageToMaster: typeof internal_enterpriseEncryption_sendMessageToMaster;
            turnOnWithAnimation: typeof internal_enterpriseEncryption_turnOnWithAnimation;
        };
        faceScan: {
            prepareScan: typeof internal_faceScan_prepareScan;
            scan: typeof internal_faceScan_scan;
        };
        facialRecognition: {
            detectFace: typeof internal_facialRecognition_detectFace;
            init: typeof internal_facialRecognition_init;
        };
        focus: {
            checkEnvironment: typeof internal_focus_checkEnvironment;
            closeFocusFloatingView: typeof internal_focus_closeFocusFloatingView;
            getCurrentProjectionData: typeof internal_focus_getCurrentProjectionData;
            openFocusFloatingView: typeof internal_focus_openFocusFloatingView;
            popProjectionSelector: typeof internal_focus_popProjectionSelector;
            register: typeof internal_focus_register;
            startProjection: typeof internal_focus_startProjection;
            stopProjection: typeof internal_focus_stopProjection;
            unRegister: typeof internal_focus_unRegister;
        };
        googlePlayService: {
            getGoogleServiceInfo: typeof internal_googlePlayService_getGoogleServiceInfo;
        };
        groupapp: {
            auth: typeof internal_groupapp_auth;
            sendMsgAsUser: typeof internal_groupapp_sendMsgAsUser;
        };
        groupbill: {
            detail: typeof internal_groupbill_detail;
            query: typeof internal_groupbill_query;
            send: typeof internal_groupbill_send;
        };
        guide: {
            closeGuideBanner: typeof internal_guide_closeGuideBanner;
        };
        health: {
            checkHealthPermission: typeof internal_health_checkHealthPermission;
            checkSensorPermission: typeof internal_health_checkSensorPermission;
            disableStepCountSync: typeof internal_health_disableStepCountSync;
            enableStepCountSync: typeof internal_health_enableStepCountSync;
            getTodaysStep: typeof internal_health_getTodaysStep;
            getTodaysStepCount: typeof internal_health_getTodaysStepCount;
            isShowPermissionTip: typeof internal_health_isShowPermissionTip;
            openAISport: typeof internal_health_openAISport;
            pedometerStatus: typeof internal_health_pedometerStatus;
            queryHealthPermission: typeof internal_health_queryHealthPermission;
            requestHealthPermission: typeof internal_health_requestHealthPermission;
            requestSensorPermission: typeof internal_health_requestSensorPermission;
        };
        host: {
            cancel: typeof internal_host_cancel;
            lwp: typeof internal_host_lwp;
            query: typeof internal_host_query;
        };
        hpm: {
            delete: typeof internal_hpm_delete;
            get: typeof internal_hpm_get;
            queryInfo: typeof internal_hpm_queryInfo;
            update: typeof internal_hpm_update;
        };
        imshortcut: {
            getMsgFilterConfigDetail: typeof internal_imshortcut_getMsgFilterConfigDetail;
            getMsgFilterTabsConfig: typeof internal_imshortcut_getMsgFilterTabsConfig;
            initEventChannel: typeof internal_imshortcut_initEventChannel;
            listFilterMsg: typeof internal_imshortcut_listFilterMsg;
            onTabSelected: typeof internal_imshortcut_onTabSelected;
            updateMsgFilterStatus: typeof internal_imshortcut_updateMsgFilterStatus;
        };
        inputPanel: {
            add: typeof internal_inputPanel_add;
            addToolBar: typeof internal_inputPanel_addToolBar;
            atPick: typeof internal_inputPanel_atPick;
            changeMode: typeof internal_inputPanel_changeMode;
            getCurrentInput: typeof internal_inputPanel_getCurrentInput;
            refreshInputExtendView: typeof internal_inputPanel_refreshInputExtendView;
            remove: typeof internal_inputPanel_remove;
            removeToolbar: typeof internal_inputPanel_removeToolbar;
            resignInput: typeof internal_inputPanel_resignInput;
        };
        interactiveCard: {
            batchDisposeCard: typeof internal_interactiveCard_batchDisposeCard;
            getCardInfo: typeof internal_interactiveCard_getCardInfo;
            sendAction: typeof internal_interactiveCard_sendAction;
        };
        invoice: {
            chooseInvoice: typeof internal_invoice_chooseInvoice;
        };
        live: {
            startLive: typeof internal_live_startLive;
            startUnifiedLive: typeof internal_live_startUnifiedLive;
        };
        log: {
            add: typeof internal_log_add;
            printUnifyLog: typeof internal_log_printUnifyLog;
            searchClickLog: typeof internal_log_searchClickLog;
            searchQueryLog: typeof internal_log_searchQueryLog;
            upload: typeof internal_log_upload;
            uploadException: typeof internal_log_uploadException;
        };
        lwp: {
            call: typeof internal_lwp_call;
            setSessionIdCookie: typeof internal_lwp_setSessionIdCookie;
        };
        microapp: {
            checkInstalled: typeof internal_microapp_checkInstalled;
            queryInfo: typeof internal_microapp_queryInfo;
            triggerSync: typeof internal_microapp_triggerSync;
        };
        navigation: {
            setIcon: typeof internal_navigation_setIcon;
        };
        notify: {
            add: typeof internal_notify_add;
            closeModal: typeof internal_notify_closeModal;
            send: typeof internal_notify_send;
            showModal: typeof internal_notify_showModal;
        };
        oa: {
            activatePersonalSpace: typeof internal_oa_activatePersonalSpace;
            getNavHeaderHeight: typeof internal_oa_getNavHeaderHeight;
            isPersonalSpaceEnabled: typeof internal_oa_isPersonalSpaceEnabled;
        };
        openTemporary: {
            setData: typeof internal_openTemporary_setData;
        };
        pageLink: {
            fetch: typeof internal_pageLink_fetch;
            request: typeof internal_pageLink_request;
            response: typeof internal_pageLink_response;
        };
        payment: {
            requestForInAppPurchase: typeof internal_payment_requestForInAppPurchase;
        };
        permission: {
            hasSelfPermissions: typeof internal_permission_hasSelfPermissions;
            requestPermissions: typeof internal_permission_requestPermissions;
        };
        phoneContact: {
            add: typeof internal_phoneContact_add;
            checkPermissionAndUpload: typeof internal_phoneContact_checkPermissionAndUpload;
            getMobileContactName: typeof internal_phoneContact_getMobileContactName;
            requestPermissionAndUploadWhenAuthed: typeof internal_phoneContact_requestPermissionAndUploadWhenAuthed;
        };
        realm: {
            getUserExclusiveInfo: typeof internal_realm_getUserExclusiveInfo;
            updateExclusiveConfig: typeof internal_realm_updateExclusiveConfig;
        };
        redenvelop: {
            sendRandomRedEnvelop: typeof internal_redenvelop_sendRandomRedEnvelop;
        };
        redpacket: {
            nav2RedPacket: typeof internal_redpacket_nav2RedPacket;
        };
        request: {
            getOrgFeatureByKey: typeof internal_request_getOrgFeatureByKey;
            getSecurityToken: typeof internal_request_getSecurityToken;
            httpOverLWP: typeof internal_request_httpOverLWP;
            lwp: typeof internal_request_lwp;
            sendHeadRequest: typeof internal_request_sendHeadRequest;
        };
        requestmoney: {
            contactswithUids: typeof internal_requestmoney_contactswithUids;
            currentUid: typeof internal_requestmoney_currentUid;
            dingRemind: typeof internal_requestmoney_dingRemind;
            generateBizId: typeof internal_requestmoney_generateBizId;
            loadConversations: typeof internal_requestmoney_loadConversations;
            notifyAlipayResult: typeof internal_requestmoney_notifyAlipayResult;
            showContactAndGroupPick: typeof internal_requestmoney_showContactAndGroupPick;
            showGroupMemberPick: typeof internal_requestmoney_showGroupMemberPick;
            updateCardStatus: typeof internal_requestmoney_updateCardStatus;
        };
        resource: {
            getPackageInfo: typeof internal_resource_getPackageInfo;
            getResourceContent: typeof internal_resource_getResourceContent;
        };
        safe: {
            getAppInfo: typeof internal_safe_getAppInfo;
            getDeviceInfo: typeof internal_safe_getDeviceInfo;
            scanPlugin: typeof internal_safe_scanPlugin;
        };
        schedule: {
            update: typeof internal_schedule_update;
        };
        schema: {
            open: typeof internal_schema_open;
            openPermissionSetting: typeof internal_schema_openPermissionSetting;
            openWifiSetting: typeof internal_schema_openWifiSetting;
        };
        search: {
            debug: typeof internal_search_debug;
        };
        security: {
            asgCheck: typeof internal_security_asgCheck;
        };
        sqlite: {
            executeSql: typeof internal_sqlite_executeSql;
            open: typeof internal_sqlite_open;
        };
        studyroom: {
            initRoom: typeof internal_studyroom_initRoom;
            operateMusic: typeof internal_studyroom_operateMusic;
            reportMemberState: typeof internal_studyroom_reportMemberState;
        };
        teleVideo: {
            addMember: typeof internal_teleVideo_addMember;
            creatConf: typeof internal_teleVideo_creatConf;
            dismissMeetingFloatingView: typeof internal_teleVideo_dismissMeetingFloatingView;
            registPushHandler: typeof internal_teleVideo_registPushHandler;
            shareInvite: typeof internal_teleVideo_shareInvite;
            showMeetingFloatingView: typeof internal_teleVideo_showMeetingFloatingView;
            unregistPushHandler: typeof internal_teleVideo_unregistPushHandler;
        };
        ui: {
            getCurrentUIEnvironment: typeof internal_ui_getCurrentUIEnvironment;
        };
        user: {
            allOrganizations: typeof internal_user_allOrganizations;
            bindTaobao: typeof internal_user_bindTaobao;
            dingtalkIdToUserInfos: typeof internal_user_dingtalkIdToUserInfos;
            getClaimEnergyEntryVisibility: typeof internal_user_getClaimEnergyEntryVisibility;
            getCurrentUserInfo: typeof internal_user_getCurrentUserInfo;
            getRealmInfo: typeof internal_user_getRealmInfo;
            getRole: typeof internal_user_getRole;
            isNewUser: typeof internal_user_isNewUser;
            setClaimEnergyEntryVisibility: typeof internal_user_setClaimEnergyEntryVisibility;
            showMedalEntry: typeof internal_user_showMedalEntry;
            uids2UserInfos: typeof internal_user_uids2UserInfos;
            unbindTaobao: typeof internal_user_unbindTaobao;
        };
        util: {
            authAlipayInvoice: typeof internal_util_authAlipayInvoice;
            changeCloudSettingConfig: typeof internal_util_changeCloudSettingConfig;
            chooseFile: typeof internal_util_chooseFile;
            chooseIndustry: typeof internal_util_chooseIndustry;
            chooseRegion: typeof internal_util_chooseRegion;
            collectCell: typeof internal_util_collectCell;
            dns: typeof internal_util_dns;
            draw: typeof internal_util_draw;
            encryData: typeof internal_util_encryData;
            encrySHA1Data: typeof internal_util_encrySHA1Data;
            forbidScreenShot: typeof internal_util_forbidScreenShot;
            getBindSmartDeviceOrgList: typeof internal_util_getBindSmartDeviceOrgList;
            getCloudSetting: typeof internal_util_getCloudSetting;
            getCloudSettingConfig: typeof internal_util_getCloudSettingConfig;
            getCorpIdByOrgId: typeof internal_util_getCorpIdByOrgId;
            getCurrentOrgId: typeof internal_util_getCurrentOrgId;
            getLBSWua: typeof internal_util_getLBSWua;
            getOrgIdByCorpId: typeof internal_util_getOrgIdByCorpId;
            getSystemSetting: typeof internal_util_getSystemSetting;
            getUtdid: typeof internal_util_getUtdid;
            getWua: typeof internal_util_getWua;
            grayStringLemon: typeof internal_util_grayStringLemon;
            graySwitch: typeof internal_util_graySwitch;
            graySwitchLemon: typeof internal_util_graySwitchLemon;
            isSimulator: typeof internal_util_isSimulator;
            ratingAndFeedback: typeof internal_util_ratingAndFeedback;
            recordShortVideo: typeof internal_util_recordShortVideo;
            setSystemSetting: typeof internal_util_setSystemSetting;
            showAddExternalContactDialog: typeof internal_util_showAddExternalContactDialog;
            switchOA: typeof internal_util_switchOA;
            uploadBase64EncodeImage: typeof internal_util_uploadBase64EncodeImage;
            uploadFile: typeof internal_util_uploadFile;
        };
        webview: {
            openDebugLink: typeof internal_webview_openDebugLink;
        };
        webviewTurbo: {
            dispose: typeof internal_webviewTurbo_dispose;
            start: typeof internal_webviewTurbo_start;
        };
        work: {
            getApplist: typeof internal_work_getApplist;
            openNativeApp: typeof internal_work_openNativeApp;
        };
        wxsdk: {
            openMiniApp: typeof internal_wxsdk_openMiniApp;
        };
        zoloz: {
            isSupportFitech: typeof internal_zoloz_isSupportFitech;
            verifyFaceByFitech: typeof internal_zoloz_verifyFaceByFitech;
        };
    };
    media: {
        voiceRecorder: {
            keepAlive: typeof media_voiceRecorder_keepAlive;
            pause: typeof media_voiceRecorder_pause;
            resume: typeof media_voiceRecorder_resume;
            start: typeof media_voiceRecorder_start;
            stop: typeof media_voiceRecorder_stop;
        };
    };
    net: {
        bjGovApn: {
            loginGovNet: typeof net_bjGovApn_loginGovNet;
        };
        tunnel: {
            request: typeof net_tunnel_request;
        };
        vpn: {
            check: typeof net_vpn_check;
            start: typeof net_vpn_start;
            stop: typeof net_vpn_stop;
        };
    };
    preRelease: {
        appLink: {
            fetch: typeof preRelease_appLink_fetch;
            open: typeof preRelease_appLink_open;
            request: typeof preRelease_appLink_request;
            response: typeof preRelease_appLink_response;
        };
    };
    retail: {
        chat: {
            open: typeof retail_chat_open;
        };
        telephone: {
            call: typeof retail_telephone_call;
        };
    };
    runtime: {
        info: {
            status: typeof runtime_info_status;
        };
        message: {
            fetch: typeof runtime_message_fetch;
            post: typeof runtime_message_post;
        };
        monitor: {
            enableUsability: typeof runtime_monitor_enableUsability;
            finishLoad: typeof runtime_monitor_finishLoad;
            getLoadTime: typeof runtime_monitor_getLoadTime;
            usability: typeof runtime_monitor_usability;
        };
        permission: {
            requestAuthCode: typeof runtime_permission_requestAuthCode;
            requestJsApis: typeof runtime_permission_requestJsApis;
            requestOperateAuthCode: typeof runtime_permission_requestOperateAuthCode;
        };
    };
    service: {
        request: {
            httpOverLwp: typeof service_request_httpOverLwp;
            mtop: typeof service_request_mtop;
            mtopOverLwp: typeof service_request_mtopOverLwp;
        };
    };
    ui: {
        appLink: {
            fetch: typeof ui_appLink_fetch;
            open: typeof ui_appLink_open;
            request: typeof ui_appLink_request;
            response: typeof ui_appLink_response;
        };
        drawer: {
            close: typeof ui_drawer_close;
            config: typeof ui_drawer_config;
            disable: typeof ui_drawer_disable;
            enable: typeof ui_drawer_enable;
            init: typeof ui_drawer_init;
            open: typeof ui_drawer_open;
        };
        floatWindow: {
            minimize: typeof ui_floatWindow_minimize;
        };
        input: {
            plain: typeof ui_input_plain;
        };
        multitask: {
            addToFloat: typeof ui_multitask_addToFloat;
            removeFromFloat: typeof ui_multitask_removeFromFloat;
        };
        nav: {
            close: typeof ui_nav_close;
            getCurrentId: typeof ui_nav_getCurrentId;
            go: typeof ui_nav_go;
            pop: typeof ui_nav_pop;
            preload: typeof ui_nav_preload;
            push: typeof ui_nav_push;
            quit: typeof ui_nav_quit;
            recycle: typeof ui_nav_recycle;
        };
        progressBar: {
            setColors: typeof ui_progressBar_setColors;
        };
        pullToRefresh: {
            disable: typeof ui_pullToRefresh_disable;
            enable: typeof ui_pullToRefresh_enable;
            stop: typeof ui_pullToRefresh_stop;
        };
        tab: {
            add: typeof ui_tab_add;
            config: typeof ui_tab_config;
            init: typeof ui_tab_init;
            remove: typeof ui_tab_remove;
            select: typeof ui_tab_select;
            start: typeof ui_tab_start;
        };
        webViewBounce: {
            disable: typeof ui_webViewBounce_disable;
            enable: typeof ui_webViewBounce_enable;
        };
    };
    util: {
        cookies: {
            read: typeof util_cookies_read;
            write: typeof util_cookies_write;
        };
        domainStorage: {
            clearItems: typeof util_domainStorage_clearItems;
            getItem: typeof util_domainStorage_getItem;
            getItems: typeof util_domainStorage_getItems;
            listItems: typeof util_domainStorage_listItems;
            removeItem: typeof util_domainStorage_removeItem;
            setItem: typeof util_domainStorage_setItem;
        };
        localStorage: {
            getItem: typeof util_localStorage_getItem;
            removeItem: typeof util_localStorage_removeItem;
            setItem: typeof util_localStorage_setItem;
        };
        openTemporary: {
            getData: typeof util_openTemporary_getData;
        };
    };
};
