"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.lwp$ = void 0;
/* tslint:disable:no-console */
var ddSdk_1 = require("../../../lib/ddSdk");
var apiName = 'internal.request.lwp';
var mobileParamsDeal = function (params) {
    var finalParams = Object.assign({}, params);
    finalParams.body = JSON.stringify(params.body);
    if (typeof location !== 'undefined') {
        finalParams.headers = Object.assign({
            referer: location.origin + location.pathname,
        }, finalParams.headers || {});
    }
    if (params.url) {
        finalParams.uri = params.url;
    }
    return finalParams;
};
var ERROR_ANDROID_DEAL_ERROR = '警告，存在 lwp 接口返回基础数据类型，在安卓下无法正常的处理，易出现异常情况，请让服务端同学修改此 lwp 接口，改为返回 object，不返回基础数据类型';
ddSdk_1.ddSdk.setAPI(apiName, (_a = {},
    _a[ddSdk_1.ENV_ENUM.pc] = {
        vs: '3.0.0',
        paramsDeal: function (params) {
            var finalParams = Object.assign({}, params);
            if (params.uri) {
                finalParams.url = params.uri;
            }
            return finalParams;
        },
    },
    _a[ddSdk_1.ENV_ENUM.ios] = {
        vs: '2.5.1',
        paramsDeal: mobileParamsDeal,
        resultDeal: function (result) {
            // ios返回的是json串
            var responseText = result.responseText, statusCode = result.statusCode, rest = __rest(result, ["responseText", "statusCode"]);
            var body; // 只有成功才返回, 错误的话安卓不返回
            try {
                body = JSON.parse(responseText);
                if (typeof body !== 'object') {
                    console.warn(ERROR_ANDROID_DEAL_ERROR);
                }
            }
            catch (e) {
                body = responseText;
            }
            return __assign(__assign({}, rest), { body: body, code: statusCode });
        },
    },
    _a[ddSdk_1.ENV_ENUM.android] = {
        vs: '2.5.1',
        paramsDeal: mobileParamsDeal,
        resultDeal: function (result) {
            var responseText = result.responseText, statusCode = result.statusCode, statusText = result.statusText, rest = __rest(result, ["responseText", "statusCode", "statusText"]);
            var body = {}; // 只有成功才返回, 错误的话安卓不返回
            var code;
            if (statusCode === 200) {
                if (responseText !== undefined) {
                    try {
                        body = JSON.parse(responseText);
                        if (typeof body !== 'object') {
                            console.warn(ERROR_ANDROID_DEAL_ERROR);
                        }
                    }
                    catch (e) {
                        body = responseText;
                    }
                }
                code = statusCode;
            }
            else {
                if (statusText !== undefined) {
                    try {
                        // 新版本改为 statusText 为 body 字符串 statusCode 为 code，尝试解析
                        body = JSON.parse(statusText);
                        code = statusCode;
                    }
                    catch (error) {
                        // 旧版处理逻辑
                        body = {
                            reason: statusText,
                            code: statusCode,
                        };
                        code = 400;
                    }
                }
                else {
                    // 兼容逻辑，保障返回的结构体正常
                    code = 400;
                }
            }
            return __assign(__assign({}, rest), { body: body, code: code });
        },
    },
    _a));
/**
 * lwp通道
 * @apiName internal.request.lwp
 * @supportVersion  pc: 3.0.0 ios: 2.5.1 android: 2.5.1
 */
function lwp$(params) {
    return ddSdk_1.ddSdk.invokeAPI(apiName, params);
}
exports.lwp$ = lwp$;
exports.default = lwp$;
