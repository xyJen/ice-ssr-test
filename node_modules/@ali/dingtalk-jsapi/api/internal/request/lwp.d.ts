/**
 * https://alidocs.dingtalk.com/i/team/nb9XJoMK71OamyAp/docs/nb9XJlea9n7nlGyA?corpId=dingd8e1123006514592&iframeQuery=#
 */
interface ICacheConfig {
    /**
     * net-only（默认值）：不使用 cache 能力，仅返回网络请求，和没有 cache 参数表现一致
     * net-first：优先使用网络请求结果，若网络不可用则返回 cache 结果。请求结果会存 cache
     * swr: 优先返回 cache 结果，参考 http 的 stale-while-revalidate 策略
     */
    strategy: 'net-only' | 'net-first' | 'swr';
    /**
     * 当 strategy="net-first" 时，若网络可用，但请求超过多少秒还未返回则返回 cache。必须 >0。单位：秒
     */
    timeout?: number;
    /**
     * 当 strategy="swr" 时，若上次缓存时间至今没有超过该时间，则直接返回 cache 且不会发送网络请求；否则进行
     * staleWhileRevalidate 参数流程。默认值 0。单位：秒
     */
    maxAge?: number;
    /**
     * 当 strategy="swr" 时，若上次缓存时间至今没有超过该时间，则返回 cache 并后台发送网络请求更新 cache；否则，
     * 若网络不可用，则返回 cache；否则 cache 失效，只返回网络请求结果并更新 cache。默认值 MAX_INT。单位：秒
     */
    staleWhileRevalidate?: number;
    /**
     * cache 存储所用的 key。不填则默认以每次请求的所有请求参数的 hash 作为 key
     */
    key?: string;
}
/**
 * lwp通道 请求参数定义
 * @apiName internal.request.lwp
 */
export interface IInternalRequestLwpParams {
    /** lwp接口请求路径 */
    uri: string;
    /** 请求头 */
    headers: {
        [key: string]: any;
    };
    /** 请求数据 */
    body: any[];
    /** cache 能力配置 */
    cache?: ICacheConfig;
}
/**
 * lwp通道 返回结果定义
 * @apiName internal.request.lwp
 */
export interface IInternalRequestLwpResult {
    /** lwp接口返回状态码 */
    code: number;
    /** lwp接口返回业务数据 */
    body: any | {
        code: number | string;
        reason: string;
    };
    /** 是否来自 cache */
    fromCache?: boolean;
    /** cache 的缓存时间 */
    cacheTime?: number;
}
/**
 * lwp通道
 * @apiName internal.request.lwp
 * @supportVersion  pc: 3.0.0 ios: 2.5.1 android: 2.5.1
 */
export declare function lwp$(params: IInternalRequestLwpParams): Promise<IInternalRequestLwpResult>;
export default lwp$;
