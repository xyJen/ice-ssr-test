"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchAppendMockApiResult = exports.appendMockApiResult = exports.emitEvent = exports.init = void 0;
var ddSdk_1 = require("../lib/ddSdk");
require("../lib/polyfills/objectKeys");
var mockData = {};
var eventMap = {};
var disableMockApiFilterMap = {};
/**
 * 一旦调用 init，当前环境下的接口调用将会走 mock 的数据（可选择部分或者全部）
 * @memberof MockApi
 */
var init = function (config) {
    var ddSdkExportSdk = ddSdk_1.ddSdk.getExportSdk();
    var currentPlatformConfig = ddSdk_1.ddSdk.getPlatformConfigMap()[ddSdkExportSdk.env.platform];
    ddSdkExportSdk.devConfig({
        isAuthApi: false,
    });
    ddSdk_1.ddSdk.setPlatform({
        platform: ddSdkExportSdk.env.platform,
        authMethod: currentPlatformConfig && currentPlatformConfig.authMethod || 'config',
        bridgeInit: function () {
            return Promise.resolve(function (method, params) {
                if (mockData[method] && (!disableMockApiFilterMap[method]
                    || disableMockApiFilterMap[method](params) === false)) {
                    return mockData[method](params).then(function (result) {
                        if (typeof params.onSuccess === 'function') {
                            params.onSuccess(result);
                        }
                        return Promise.resolve(result);
                    }).catch(function (err) {
                        if (typeof params.onFail === 'function') {
                            params.onFail(err);
                        }
                        return Promise.reject(err);
                    });
                }
                else if (config && config.isOnlyMockWhenConfig && currentPlatformConfig) {
                    return currentPlatformConfig.bridgeInit().then(function (JSBridge) {
                        return JSBridge(method, params);
                    });
                }
                else {
                    return Promise.reject({
                        errorMessage: "Not found mock data, current method: " + method,
                        errorCode: '991',
                    });
                }
            });
        },
        event: {
            on: function (eventName, handler) {
                if (eventMap[eventName]) {
                    eventMap[eventName].push(handler);
                }
                else {
                    eventMap[eventName] = [handler];
                }
            },
            off: function (eventName, handler) {
                var eventQueue = eventMap[eventName];
                if (eventQueue) {
                    var index = eventQueue.findIndex(function (event) {
                        return event === handler;
                    });
                    if (index !== -1) {
                        eventQueue.splice(index, 1);
                    }
                }
            },
        },
    });
    if (config && config.mockApiMap) {
        exports.batchAppendMockApiResult(config.mockApiMap);
    }
};
exports.init = init;
var emitEvent = function (eventName) {
    ddSdk_1.ddSdk.bridgeInitFn().then(function () {
        var eventQueue = eventMap[eventName];
        if (eventQueue) {
            eventQueue.forEach(function (event) {
                event({});
            });
        }
    });
};
exports.emitEvent = emitEvent;
var appendMockApiResult = function (method, result, disableMockFilter) {
    var ddSdkExportSdk = ddSdk_1.ddSdk.getExportSdk();
    if (disableMockFilter) {
        disableMockApiFilterMap[method] = disableMockFilter;
    }
    if (typeof result === 'function') {
        mockData[method] = result;
    }
    else {
        var resultObj_1 = result;
        mockData[method] = function (params) {
            if (resultObj_1.isSuccess) {
                return Promise.resolve(resultObj_1.payload);
            }
            else {
                return Promise.reject(resultObj_1.payload);
            }
        };
    }
    ddSdkExportSdk.devConfig({
        disbaleDealApiWhiteList: Object.keys(mockData),
        forceEnableDealApiFnMap: disableMockApiFilterMap, // 同时设置 API 级别内部的过滤
    });
};
exports.appendMockApiResult = appendMockApiResult;
var batchAppendMockApiResult = function (mockApiMap) {
    Object.keys(mockApiMap).forEach(function (method) {
        exports.appendMockApiResult(method, mockApiMap[method]);
    });
};
exports.batchAppendMockApiResult = batchAppendMockApiResult;
