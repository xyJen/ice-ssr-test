"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emitEventToDTNative = exports.removeDTEventListener = exports.addDTEventListener = void 0;
var eapp_1 = require("../lib/bridge/eapp");
var eventsHandleMap = {};
var sp = '.';
var genEventName = function (namespace, eventName) {
    return "" + namespace + sp + eventName;
};
var splitEventName = function (eventName) {
    var splitEventNameArr = eventName.split(sp);
    return {
        namespace: splitEventNameArr[0] || '',
        eventName: splitEventNameArr[1] || '',
    };
};
var tryRegisterEvent = (function () {
    var hasRegistered = false;
    return function () {
        if (!hasRegistered) {
            eapp_1.default('internal.util.registerNativeCall', {
                onSuccess: function (result) {
                    var eventsHandle = eventsHandleMap[genEventName(result.namespace, result.eventName)];
                    if (eventsHandle) {
                        eventsHandle.forEach(function (handler) {
                            handler(result.data);
                        });
                    }
                },
            });
            dd.addDTCustomEventListener(function (result) {
                var namespace = '';
                var eventName = '';
                var data = {};
                if (result.namespace && result.eventName) {
                    // TODO: 兼容旧版本线上逻辑
                    namespace = result.namespace;
                    eventName = result.eventName;
                    data = result.data;
                }
                else if (result.data.namespace
                    && result.data.eventName) {
                    // TODO: 最终端上返回数据结构
                    namespace = result.data.namespace;
                    eventName = result.data.eventName;
                    data = result.data.data;
                }
                var eventsHandle = eventsHandleMap[genEventName(namespace, eventName)];
                if (eventsHandle) {
                    eventsHandle.forEach(function (handler) {
                        handler(data);
                    });
                }
            });
            hasRegistered = true;
        }
    };
})();
var addDTEventListener = function (eventName, listener) {
    tryRegisterEvent();
    if (eventName && typeof listener === 'function') {
        var eventsHandle = eventsHandleMap[eventName];
        if (eventsHandle) {
            eventsHandle.push(listener);
        }
        else {
            eventsHandleMap[eventName] = [listener];
        }
    }
    else {
        throw (new Error('eventName is null or listener is not a function, addEAppListener fail'));
    }
};
exports.addDTEventListener = addDTEventListener;
var removeDTEventListener = function (eventName, listener) {
    if (eventName && typeof listener === 'function') {
        var eventsHandle = eventsHandleMap[eventName];
        if (Array.isArray(eventsHandle)) {
            var index = eventsHandle.indexOf(listener);
            if (index !== -1) {
                eventsHandle.splice(index, 1);
            }
        }
    }
    else {
        throw (new Error('eventName is null or listener is not a function, removeEAppListener fail'));
    }
};
exports.removeDTEventListener = removeDTEventListener;
var emitEventToDTNative = function (eventName, data, onSuccess, onFail) {
    if (typeof eventName === 'string' && typeof data === 'object') {
        var eventObj_1 = splitEventName(eventName);
        return new Promise(function (resolve, reject) {
            eapp_1.default('internal.util.callExternalNative', {
                data: data,
                namespace: eventObj_1.namespace,
                eventName: eventObj_1.eventName,
                onSuccess: function (result) {
                    if (typeof onSuccess === 'function') {
                        onSuccess(result);
                    }
                    resolve(result);
                },
                onFail: function (err) {
                    if (typeof onFail === 'function') {
                        onFail(err);
                    }
                    reject(err);
                },
            });
        });
    }
    else {
        throw (new Error('eventName is null or data is not a object, emitEventToNative fail'));
    }
};
exports.emitEventToDTNative = emitEventToDTNative;
