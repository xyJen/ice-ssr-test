"use strict";
/**
 * ref: https://yuque.antfin.com/dd-fd/union_jsapi/xrqrr3#LKXbm
 * 在桌面端上的混合容器（即支持调用dingtalk.xx.xx接口又可以调用openApi接口的容器）使用时，
 * 如果业务方自己调用了 dingtalk.event.register 的话，会使openApi失效，同时channel也无法使用，
 * 为了使channel可使用，可在 dingtalk.event.register 里的'openapi.event.emit' 事件分支上加入
 * 相关处理代码，初始化即可使用；
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.off = exports.on = void 0;
var EventEmitter = /** @class */ (function () {
    function EventEmitter() {
        this.handlerMap = {};
    }
    EventEmitter.prototype.on = function (eventName, handler) {
        this.handlerMap[eventName] = (this.handlerMap[eventName] || []).concat(handler);
    };
    EventEmitter.prototype.off = function (eventName, handler) {
        var _a;
        var found = false;
        this.handlerMap[eventName] = (_a = this.handlerMap[eventName]) === null || _a === void 0 ? void 0 : _a.filter(function (h) {
            if (!found && h === handler) {
                found = true;
                return false;
            }
            return true;
        });
    };
    EventEmitter.prototype.emit = function (eventName, eventData) {
        var _a;
        (_a = this.handlerMap[eventName]) === null || _a === void 0 ? void 0 : _a.forEach(function (h) { return h(eventData); });
    };
    return EventEmitter;
}());
var eventEmitter = new EventEmitter();
var on;
exports.on = on;
var off;
exports.off = off;
if (typeof dingtalk !== 'undefined' && dingtalk.event && dingtalk.event.register) {
    dingtalk.event.register(function (eventName, eventData) {
        var _a;
        // ref: https://yuque.antfin.com/dd-fd/union_jsapi/xrqrr3#LKXbm
        if (eventName === 'openapi.event.emit') {
            if (((_a = eventData === null || eventData === void 0 ? void 0 : eventData.body) === null || _a === void 0 ? void 0 : _a.__methodName__) === 'internal.request.lwpWin') {
                var body_str = eventData.body.body;
                if (body_str === '') {
                    eventData.body.body = {};
                }
                else {
                    try {
                        eventData.body.body = JSON.parse(body_str);
                    }
                    catch (error) {
                        var url_str = eventData.body.__methodUrl__;
                        eventData.body = { code: 502, body: { code: '0', reason: 'RPC json parse error' } };
                    }
                }
                delete eventData.body.__methodName__;
                delete eventData.body.__methodUrl__;
            }
            var messageEvent = new MessageEvent('message', {
                data: eventData,
                origin: 'app://desktop.dingtalk.com',
                source: window,
            });
            window.dispatchEvent(messageEvent);
        }
        // ... 其他代码
        eventEmitter.emit(eventName, eventData);
    });
    exports.on = on = eventEmitter.on.bind(eventEmitter);
    exports.off = off = eventEmitter.off.bind(eventEmitter);
}
else {
    exports.on = on = exports.off = off = function () {
        console.log('not support in current environment, can\'t resolve "dingtalk.event.register"');
    };
}
