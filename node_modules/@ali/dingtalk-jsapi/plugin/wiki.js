"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.chooseWikiBook = exports.chooseWikiPages = exports.CHANNEL_EVENT = exports.CHANNEL_NAMESPACE = void 0;
/**
 * 此插件用于知识库对外提供选择知识库内文章能力 @达歌
 * 调用示例 :
 * import { chooseWikiPages } from '@ali/dingtalk-jsapi/plugin/wiki';
 * const pages = await chooseWikiPages('选择文档', { limit: 5, corpId: xxxxx });
 */
var env_1 = require("../lib/env");
var openModal_1 = require("../api/biz/util/openModal");
var openLink_1 = require("../api/biz/util/openLink");
var uniEvent_1 = require("../plugin/uniEvent");
exports.CHANNEL_NAMESPACE = 'wiki_picker';
exports.CHANNEL_EVENT = 'wiki_picker_submit';
var WIKI_URL = 'https://notes.dingtalk.com';
// tslint:disable-next-line: no-empty
var unsubscribe = function () { };
var channel = uniEvent_1.getChannel(exports.CHANNEL_NAMESPACE);
var stringifyQuery = function (options) {
    if (options) {
        var urlKeyValues_1 = new Array();
        var keys = Object.keys(options);
        keys.forEach(function (key) {
            var value = options[key];
            if (value !== undefined && value !== null) {
                urlKeyValues_1.push(key + "=" + encodeURIComponent(value));
            }
        });
        if (urlKeyValues_1.length > 0) {
            return urlKeyValues_1.join('&');
        }
    }
    return '';
};
// tslint:disable-next-line: max-line-length
var openPicker = function (url, title, options) {
    var env = env_1.getENV();
    if (env.platform === env_1.ENV_ENUM.notInDingTalk) {
        throw new Error('Do not support the current environment：notInDingTalk');
    }
    if (env.platform === env_1.ENV_ENUM.pc) {
        return new Promise(function (resolve, reject) {
            openModal_1.default({ url: url + "?" + stringifyQuery(__assign({}, options)), size: 'large', title: title }).then(function (response) {
                if (response) {
                    var data = void 0;
                    if (typeof response === 'string') {
                        var responseObj = JSON.parse(response);
                        data = responseObj.message || responseObj;
                    }
                    else {
                        data = response.message || response;
                    }
                    if (data) {
                        if (typeof data === 'string') {
                            resolve(JSON.parse(data));
                            return;
                        }
                        resolve(data);
                        return;
                    }
                }
                reject(new Error('No data received'));
            });
        });
    }
    var params = __assign({}, options);
    params.showmenu = false;
    params.dd_progress = false;
    params.title = title;
    // 解除上一个监听器 窗口关闭时可能并不发事件
    unsubscribe();
    return new Promise(function (resolve, reject) {
        var handler = function (msg) {
            unsubscribe();
            if (!msg || !msg.data) {
                reject(new Error('No data received'));
                return;
            }
            if (typeof msg.data === 'string') {
                msg.data = JSON.parse(msg.data);
            }
            if (msg.data.data) {
                resolve(msg.data.data);
                return;
            }
            reject(new Error('No data received'));
        };
        // 暂存解绑的句柄
        unsubscribe = function () {
            channel.unsubscribe(exports.CHANNEL_EVENT, handler);
            // tslint:disable-next-line: no-empty
            unsubscribe = function () { };
        };
        // 打开新页面并监听关闭的回调数据
        openLink_1.default({ url: url + "?" + stringifyQuery(__assign({}, params)) }).then(function () {
            channel.subscribe(exports.CHANNEL_EVENT, handler);
        });
    });
};
/**
 * 打开知识库选文组件选择知识页
 * @param title 选文组件窗口标题
 * @param options 要传递的参数 示例{ limit: 5, corpId: xxxxx } corpId/orgId必传，传哪个都可以
 */
// tslint:disable-next-line: max-line-length
var chooseWikiPages = function (title, options) {
    return openPicker(WIKI_URL + "/picker", title, options);
};
exports.chooseWikiPages = chooseWikiPages;
/**
 * 打开知识库选文组件选择知识本
 * @param title 选文组件窗口标题
 * @param options 要传递的参数 示例{ corpId: xxxxx } corpId/orgId必传，传哪个都可以
 */
// tslint:disable-next-line: max-line-length
var chooseWikiBook = function (title, options) {
    return openPicker(WIKI_URL + "/picker/pickbook", title, options);
};
exports.chooseWikiBook = chooseWikiBook;
