{"version":3,"sources":["../../../../src/utils/hooks/useSelectionStatus.ts"],"names":["React","useSelectionData","useSelectingHots","getTableIsSelected","useSelectionStatus","controller","node","onSetSelectionStatus","deps","updaterOnPending","useCallback","pendingSelection","range","isHideSelection","isSelectWholeTable","query","isPendingSelected","updaterOnHots","hots","selection","value","some","hot","key","hasNode","isSelected","selectionData$"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAEEC,gBAFF,EAIEC,gBAJF,QAMO,oBANP;AAQA,OAAOC,kBAAP;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAT,CACLC,UADK,EAELC,IAFK,EAGLC,oBAHK,EAILC,IAJK,EAKL;AACA,MAAMC,gBAAgB,GAAGT,KAAK,CAACU,WAAN,CACvB,gBAAkD;AAAA,QAAxCC,gBAAwC,QAA/CC,KAA+C;AAAA,QAAtBC,eAAsB,QAAtBA,eAAsB;AAChD,QAAMC,kBAAkB,GAAG,CAAC,CAACT,UAAU,CAACU,KAAX,CAAiB,oBAAjB,EAAuC;AAClET,MAAAA,IAAI,EAAJA;AADkE,KAAvC,CAA7B;AAGA,QAAMU,iBAAiB,GAAGb,kBAAkB,CAACG,IAAD,EAAOD,UAAP,CAA5C;AAEAE,IAAAA,oBAAoB,CAAC;AACnBK,MAAAA,KAAK,EAAED,gBADY;AAEnBE,MAAAA,eAAe,EAAfA,eAFmB;AAGnBG,MAAAA,iBAAiB,EAAjBA,iBAHmB;AAInBF,MAAAA,kBAAkB,EAAlBA;AAJmB,KAAD,CAApB;AAMD,GAbsB,EAcvB,CAACT,UAAD,EAAaC,IAAb,EAAmBC,oBAAnB,CAduB,CAAzB;AAiBA,MAAMU,aAAa,GAAGjB,KAAK,CAACU,WAAN,CACpB,UAACQ,IAAD,EAAiB;AAAA,QACPC,SADO,GACOd,UAAU,CAACe,KADlB,CACPD,SADO,EAEf;;AACA,QACED,IAAI,CAACG,IAAL,CACE,UAACC,GAAD;AAAA,aAAShB,IAAI,CAACiB,GAAL,KAAaD,GAAG,CAAChB,IAAJ,CAASiB,GAAtB,IAA6BjB,IAAI,CAACkB,OAAL,CAAaF,GAAG,CAAChB,IAAJ,CAASiB,GAAtB,CAAtC;AAAA,KADF,CADF,EAIE;AACAd,MAAAA,gBAAgB,CAAC;AACfG,QAAAA,KAAK,EAAEO,SADQ;AAEf;AACAM,QAAAA,UAAU,EAAE,KAHG;AAIfZ,QAAAA,eAAe,EAAER,UAAU,CAACU,KAAX,CAAiB,iBAAjB;AAJF,OAAD,CAAhB;AAMD;AACF,GAhBmB,EAiBpB,CAACV,UAAD,EAAaC,IAAb,EAAmBG,gBAAnB,CAjBoB,CAAtB;AAoBAR,EAAAA,gBAAgB,CAACI,UAAU,CAACqB,cAAZ,EAA4BpB,IAAI,CAACiB,GAAjC,EAAsCd,gBAAtC,EAAwDD,IAAxD,CAAhB;AACAN,EAAAA,gBAAgB,CAACG,UAAD,EAAaY,aAAb,CAAhB;AACD","sourcesContent":["import React from 'react';\nimport {\n  Controller,\n  useSelectionData,\n  Observer,\n  useSelectingHots,\n  Hot,\n} from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport getTableIsSelected from '../utils/getTableIsSelected';\n\nexport interface SelectionStatus {\n  range: Selection;\n  isHideSelection: boolean;\n  isPendingSelected: boolean;\n  isSelectWholeTable: boolean;\n}\n/**\n * 该hook主要用于在光标状态改变时快速根据当前选区更新组件状态，避免等待仓颉更新所需要的500ms防抖延时(开启pending的情况下)\n * 该hook会自动判断当前是否支持pending，来返回对应状态值\n * @param controller Controller实例\n * @param node 需要感知光标选区变化的节点\n * @param onSetSelectionStatus 光标变化时的回调函数，用于触发组件Rerender\n * @param deps 依赖\n */\nexport function useSelectionStatus(\n  controller: Controller,\n  node: Table,\n  onSetSelectionStatus: Observer<Omit<SelectionStatus, 'blocksKeys'>>,\n  deps: any[],\n) {\n  const updaterOnPending = React.useCallback(\n    ({ range: pendingSelection, isHideSelection }) => {\n      const isSelectWholeTable = !!controller.query('isSelectWholeTable', {\n        node,\n      });\n      const isPendingSelected = getTableIsSelected(node, controller);\n\n      onSetSelectionStatus({\n        range: pendingSelection,\n        isHideSelection,\n        isPendingSelected,\n        isSelectWholeTable,\n      });\n    },\n    [controller, node, onSetSelectionStatus],\n  );\n\n  const updaterOnHots = React.useCallback(\n    (hots: Hot[]) => {\n      const { selection } = controller.value;\n      // PERF: 非当前表格热区不处理\n      if (\n        hots.some(\n          (hot) => node.key === hot.node.key || node.hasNode(hot.node.key),\n        )\n      ) {\n        updaterOnPending({\n          range: selection,\n          // 交给 isSelectionTable 判断\n          isSelected: false,\n          isHideSelection: controller.query('isHideSelection'),\n        });\n      }\n    },\n    [controller, node, updaterOnPending],\n  );\n\n  useSelectionData(controller.selectionData$, node.key, updaterOnPending, deps);\n  useSelectingHots(controller, updaterOnHots);\n}\n"],"file":"useSelectionStatus.js"}