import React from 'react';
import { useSelectionData, useSelectingHots } from '@ali/4ever-cangjie';
import getTableIsSelected from "../utils/getTableIsSelected";

/**
 * 该hook主要用于在光标状态改变时快速根据当前选区更新组件状态，避免等待仓颉更新所需要的500ms防抖延时(开启pending的情况下)
 * 该hook会自动判断当前是否支持pending，来返回对应状态值
 * @param controller Controller实例
 * @param node 需要感知光标选区变化的节点
 * @param onSetSelectionStatus 光标变化时的回调函数，用于触发组件Rerender
 * @param deps 依赖
 */
export function useSelectionStatus(controller, node, onSetSelectionStatus, deps) {
  var updaterOnPending = React.useCallback(function (_ref) {
    var pendingSelection = _ref.range,
        isHideSelection = _ref.isHideSelection;
    var isSelectWholeTable = !!controller.query('isSelectWholeTable', {
      node: node
    });
    var isPendingSelected = getTableIsSelected(node, controller);
    onSetSelectionStatus({
      range: pendingSelection,
      isHideSelection: isHideSelection,
      isPendingSelected: isPendingSelected,
      isSelectWholeTable: isSelectWholeTable
    });
  }, [controller, node, onSetSelectionStatus]);
  var updaterOnHots = React.useCallback(function (hots) {
    var selection = controller.value.selection; // PERF: 非当前表格热区不处理

    if (hots.some(function (hot) {
      return node.key === hot.node.key || node.hasNode(hot.node.key);
    })) {
      updaterOnPending({
        range: selection,
        // 交给 isSelectionTable 判断
        isSelected: false,
        isHideSelection: controller.query('isHideSelection')
      });
    }
  }, [controller, node, updaterOnPending]);
  useSelectionData(controller.selectionData$, node.key, updaterOnPending, deps);
  useSelectingHots(controller, updaterOnHots);
}
//# sourceMappingURL=useSelectionStatus.js.map