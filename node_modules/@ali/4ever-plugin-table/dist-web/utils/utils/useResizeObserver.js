import fastdom from 'fastdom';
import * as React from 'react';
import ResizeObserver from 'resize-observer-polyfill';

var useResizeObserver = function useResizeObserver(target, callback) {
  var observerRef = React.useRef();
  React.useEffect(function () {
    if (!(target instanceof HTMLElement)) return undefined;
    observerRef.current = new ResizeObserver(function () {
      fastdom.measure(function () {
        var rect = target.getBoundingClientRect();
        callback(rect);
      });
    }); // @ts-ignore resize-observer-polyfill API 不支持 options，浏览器可用

    observerRef.current.observe(target, {
      box: 'border-box'
    });
    return function () {
      var _observerRef$current;

      (_observerRef$current = observerRef.current) == null ? void 0 : _observerRef$current.unobserve(target);
    };
  }, [target, callback]);
  React.useEffect(function () {
    return function () {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, []);
};

export default useResizeObserver;
//# sourceMappingURL=useResizeObserver.js.map