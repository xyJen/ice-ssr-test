{"version":3,"sources":["../../../../src/utils/utils/colsWidthConverter.ts"],"names":["DEFAULT_PCT_WIDTH","formatColWidth","convertFromPixelToPercent","colsWidth","containerWidth","totalPercent","Array","isArray","pctColsWidth","reduce","acc","w","index","length","push","pct","convertFromPercentToPixel","table","data","totalW","cw","pixelColsWidth","i","colWidth","Math","round"],"mappings":"AACA,SAASA,iBAAT;AACA,OAAOC,cAAP;AAEA,OAAO,SAASC,yBAAT,CACLC,SADK,EAELC,cAFK,EAGLC,YAHK,EAIL;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,SAAd,CAAL,EAA+B,OAAO,EAAP;AAE/B,MAAMK,YAAsB,GAAG,EAA/B;AACAL,EAAAA,SAAS,CAACM,MAAV,CAAiB,UAACC,GAAD,EAAMC,CAAN,EAASC,KAAT,EAAmB;AAClC;AACA,QAAIA,KAAK,KAAKT,SAAS,CAACU,MAAV,GAAmB,CAAjC,EAAoC;AAClC,aAAOL,YAAY,CAACM,IAAb,CAAkB,CAACT,YAAY,IAAIL,iBAAjB,IAAsCU,GAAxD,CAAP;AACD;;AACD,QAAMK,GAAG,GAAGd,cAAc,CAACU,CAAC,GAAGP,cAAJ,GAAqBJ,iBAAtB,CAA1B;AACAQ,IAAAA,YAAY,CAACM,IAAb,CAAkBC,GAAlB;AACA,WAAOL,GAAG,GAAGK,GAAb;AACD,GARD,EAQG,CARH;AAUA,SAAOP,YAAP;AACD;AAED,OAAO,SAASQ,yBAAT,CACLC,KADK,EAELb,cAFK,EAGL;AAAA,MACQD,SADR,GACsBc,KAAK,CAACC,IAD5B,CACQf,SADR;AAGA,MAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,SAAd,CAAL,EAA+B,OAAO,EAAP;AAE/B,MAAMgB,MAAM,GAAGhB,SAAS,CAACM,MAAV,CAAiB,UAACC,GAAD,EAAMU,EAAN;AAAA,WAAcV,GAAG,GAAGU,EAApB;AAAA,GAAjB,EAA0C,CAA1C,CAAf;AAEA,MAAMC,cAAwB,GAAG,EAAjC;AACAlB,EAAAA,SAAS,CAACM,MAAV,CAAiB,UAACC,GAAD,EAAMU,EAAN,EAAUE,CAAV,EAAgB;AAC/B,QAAIA,CAAC,KAAKnB,SAAS,CAACU,MAAV,GAAmB,CAA7B,EAAgC;AAC9B,aAAOQ,cAAc,CAACP,IAAf,CAAoBV,cAAc,GAAGM,GAArC,CAAP;AACD;;AACD,QAAMa,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWrB,cAAc,IAAIgB,EAAE,GAAGD,MAAT,CAAzB,CAAjB;AACAE,IAAAA,cAAc,CAACP,IAAf,CAAoBS,QAApB;AACA,WAAOb,GAAG,GAAGa,QAAb;AACD,GAPD,EAOG,CAPH;AASA,SAAOF,cAAP;AACD","sourcesContent":["import Table from '../../mo/models';\nimport { DEFAULT_PCT_WIDTH } from '../constants';\nimport formatColWidth from './formatColWidth';\n\nexport function convertFromPixelToPercent(\n  colsWidth: number[],\n  containerWidth: number,\n  totalPercent?: number,\n) {\n  if (!Array.isArray(colsWidth)) return [];\n\n  const pctColsWidth: number[] = [];\n  colsWidth.reduce((acc, w, index) => {\n    // 使 colsWidth 总和为 100\n    if (index === colsWidth.length - 1) {\n      return pctColsWidth.push((totalPercent || DEFAULT_PCT_WIDTH) - acc);\n    }\n    const pct = formatColWidth(w / containerWidth * DEFAULT_PCT_WIDTH);\n    pctColsWidth.push(pct);\n    return acc + pct;\n  }, 0);\n\n  return pctColsWidth;\n}\n\nexport function convertFromPercentToPixel(\n  table: Table,\n  containerWidth: number,\n) {\n  const { colsWidth } = table.data;\n\n  if (!Array.isArray(colsWidth)) return [];\n\n  const totalW = colsWidth.reduce((acc, cw) => (acc + cw), 0);\n\n  const pixelColsWidth: number[] = [];\n  colsWidth.reduce((acc, cw, i) => {\n    if (i === colsWidth.length - 1) {\n      return pixelColsWidth.push(containerWidth - acc);\n    }\n    const colWidth = Math.round(containerWidth * (cw / totalW));\n    pixelColsWidth.push(colWidth);\n    return acc + colWidth;\n  }, 0);\n\n  return pixelColsWidth;\n}\n"],"file":"colsWidthConverter.js"}