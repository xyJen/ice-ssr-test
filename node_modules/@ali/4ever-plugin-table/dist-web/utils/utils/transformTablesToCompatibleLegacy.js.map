{"version":3,"sources":["../../../../src/utils/utils/transformTablesToCompatibleLegacy.ts"],"names":["Table","getInnerWidth","DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT","convertFromPercentToPixel","transformTablesToCompatibleLegacy","document","fragment","isMobile","autofitTables","filterDescendants","n","isTable","isAutofitWidth","length","pageWidth","forEach","t","newColsWidth","path","getPath","key","setNode","data","colsWidth","shouldTransfrom"],"mappings":";AACA,OAAOA,KAAP;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,+BAAT;AACA,SAASC,yBAAT;AAOA,eAAe,SAASC,iCAAT,CACbC,QADa,EAEbC,QAFa,EAGbC,QAHa,EAII;AAAA,MADjBA,QACiB;AADjBA,IAAAA,QACiB,GADN,KACM;AAAA;;AACjB,MAAMC,aAAa,GAAGF,QAAQ,CAACG,iBAAT,CACpB,UAACC,CAAD;AAAA,WAAOV,KAAK,CAACW,OAAN,CAAcD,CAAd,KAAoBV,KAAK,CAACY,cAAN,CAAqBF,CAArB,CAA3B;AAAA,GADoB,CAAtB;;AAGA,MAAIF,aAAa,CAACK,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,QAAIC,SAAS,GAAGZ,+BAAhB;;AACA,QAAI,CAACK,QAAL,EAAe;AACbO,MAAAA,SAAS,GAAGb,aAAa,CAACI,QAAD,CAAb,IAA2BH,+BAAvC;AACD;;AAEDM,IAAAA,aAAa,CAACO,OAAd,CAAsB,UAACC,CAAD,EAAO;AAC3B,UAAMC,YAAY,GAAGd,yBAAyB,CAACa,CAAD,EAAIF,SAAJ,CAA9C;AACA,UAAMI,IAAI,GAAGZ,QAAQ,CAACa,OAAT,CAAiBH,CAAC,CAACI,GAAnB,CAAb;;AACA,UAAIF,IAAJ,EAAU;AACRZ,QAAAA,QAAQ,GAAGA,QAAQ,CAACe,OAAT,CAAiBH,IAAjB,EAAuB;AAChCI,UAAAA,IAAI,eACCN,CAAC,CAACM,IADH;AAEFC,YAAAA,SAAS,EAAEN;AAFT;AAD4B,SAAvB,CAAX;AAMD;AACF,KAXD;AAYA,WAAO;AACLO,MAAAA,eAAe,EAAE,IADZ;AAELlB,MAAAA,QAAQ,EAARA;AAFK,KAAP;AAID;;AACD,SAAO;AACLkB,IAAAA,eAAe,EAAE,KADZ;AAELlB,IAAAA,QAAQ,EAARA;AAFK,GAAP;AAID","sourcesContent":["import { Document, transferUtils } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport { getInnerWidth } from '@ali/4ever-utils';\nimport { DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT } from '../constants';\nimport { convertFromPercentToPixel } from './colsWidthConverter';\n\ninterface TransformResult {\n  shouldTransfrom: boolean;\n  fragment: Document;\n}\n\nexport default function transformTablesToCompatibleLegacy(\n  document: Document,\n  fragment: Document,\n  isMobile = false,\n): TransformResult {\n  const autofitTables = fragment.filterDescendants(\n    (n) => Table.isTable(n) && Table.isAutofitWidth(n),\n  ) as Table[];\n  if (autofitTables.length > 0) {\n    let pageWidth = DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT;\n    if (!isMobile) {\n      pageWidth = getInnerWidth(document) || DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT;\n    }\n\n    autofitTables.forEach((t) => {\n      const newColsWidth = convertFromPercentToPixel(t, pageWidth);\n      const path = fragment.getPath(t.key);\n      if (path) {\n        fragment = fragment.setNode(path, {\n          data: {\n            ...t.data,\n            colsWidth: newColsWidth,\n          },\n        });\n      }\n    });\n    return {\n      shouldTransfrom: true,\n      fragment,\n    };\n  }\n  return {\n    shouldTransfrom: false,\n    fragment,\n  };\n}\n"],"file":"transformTablesToCompatibleLegacy.js"}