{"version":3,"sources":["../../../../src/utils/commands/adjustColsWidth.ts"],"names":["equal","Table","MIN_COL_WIDTH","setColsWidthInjection","convertFromPercentToPixel","convertFromPixelToPercent","getTableMaxWidthByContainer","adjustColsWidth","controller","table","containerWidthParam","tableMinColsWidth","value","data","injections","inj","find","i","key","injColsWidth","colsWidth","setInjections","filter","dataTable","document","getNode","cols","Array","isArray","slice","containerWidth","isAutofit","isAutofitWidth","minColsWidth","length","fill","path","getPath","colIndex","forEach","minColWidth","index","originColWidth","delta","totalColsWidth","reduce","acc","curr","nextColWidth","Math","max","newTotalWidth","w","resultColsWidth","totalW","undefined"],"mappings":"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","sourcesContent":["import equal from 'fast-deep-equal';\nimport { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport { MIN_COL_WIDTH } from '../constants';\nimport setColsWidthInjection from './setColsWidthInjection';\nimport {\n  convertFromPercentToPixel,\n  convertFromPixelToPercent,\n} from '../utils/colsWidthConverter';\nimport getTableMaxWidthByContainer from '../utils/getTableMaxWidthByContainer';\n\nexport default function adjustColsWidth(controller: Controller, table: Table, containerWidthParam?: number) {\n  const { tableMinColsWidth } = controller.value.data;\n  const { injections } = controller.value;\n  const inj = injections.find(i => i.key === table.key);\n  const injColsWidth = inj?.data?.colsWidth;\n  if (!tableMinColsWidth) {\n    if (injColsWidth) {\n      controller.setInjections([\n        ...injections.filter(i => i.key !== table.key),\n      ]);\n    }\n    return controller;\n  }\n  const dataTable = controller.value.document.getNode(table.key) as Table;\n  const cols = dataTable?.data?.colsWidth;\n  if (!Array.isArray(cols)) {\n    return controller;\n  }\n  let colsWidth = cols.slice();\n  const containerWidth = containerWidthParam || getTableMaxWidthByContainer(controller, table);\n  const isAutofit = Table.isAutofitWidth(dataTable);\n  if (isAutofit) {\n    colsWidth = convertFromPercentToPixel(dataTable, containerWidth);\n  }\n  const minColsWidth = Array(colsWidth.length).fill(MIN_COL_WIDTH);\n  // eslint-disable-next-line guard-for-in\n  for (const key in tableMinColsWidth) {\n    const path = table.getPath(key);\n    if (!path) {\n      continue;\n    }\n    const colIndex = path[1];\n    // 根据 value.data.tableMinColsWidth 设置每列的最小列宽\n    minColsWidth[colIndex] = tableMinColsWidth[key];\n  }\n\n  minColsWidth.forEach((minColWidth, index) => {\n    const originColWidth = colsWidth[index];\n    // 当前列宽 >= 最小列宽，则不处理\n    if (originColWidth >= minColWidth) {\n      return;\n    }\n    const delta = minColWidth - originColWidth;\n    const totalColsWidth = colsWidth.reduce((acc, curr) => (acc + curr), 0);\n    // 设置当前列的列宽\n    colsWidth[index] += delta;\n    // 调整下一列列宽，尽量保证表格整体宽度不变\n    if (totalColsWidth <= containerWidth && index < colsWidth.length - 1) {\n      const nextColWidth = colsWidth[index + 1];\n      colsWidth[index + 1] = Math.max(minColsWidth[index + 1], nextColWidth - delta);\n    }\n  });\n  const newTotalWidth = colsWidth.reduce((acc, w) => (acc + w), 0);\n  let resultColsWidth = colsWidth;\n  if (isAutofit) {\n    const totalW = newTotalWidth > containerWidth ? newTotalWidth / containerWidth * 100 : undefined;\n    resultColsWidth = convertFromPixelToPercent(colsWidth, containerWidth, totalW);\n  }\n  if (!equal(injColsWidth, resultColsWidth)) {\n    setColsWidthInjection(controller, table, resultColsWidth);\n  }\n  return controller;\n};\n"],"file":"adjustColsWidth.js"}