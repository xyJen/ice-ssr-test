import equal from 'fast-deep-equal';
import Table from "../../mo/models";
import { MIN_COL_WIDTH } from "../constants";
import setColsWidthInjection from "./setColsWidthInjection";
import { convertFromPercentToPixel, convertFromPixelToPercent } from "../utils/colsWidthConverter";
import getTableMaxWidthByContainer from "../utils/getTableMaxWidthByContainer";
export default function adjustColsWidth(controller, table, containerWidthParam) {
  var _inj$data, _dataTable$data;

  var tableMinColsWidth = controller.value.data.tableMinColsWidth;
  var injections = controller.value.injections;
  var inj = injections.find(function (i) {
    return i.key === table.key;
  });
  var injColsWidth = inj == null ? void 0 : (_inj$data = inj.data) == null ? void 0 : _inj$data.colsWidth;

  if (!tableMinColsWidth) {
    if (injColsWidth) {
      controller.setInjections([].concat(injections.filter(function (i) {
        return i.key !== table.key;
      })));
    }

    return controller;
  }

  var dataTable = controller.value.document.getNode(table.key);
  var cols = dataTable == null ? void 0 : (_dataTable$data = dataTable.data) == null ? void 0 : _dataTable$data.colsWidth;

  if (!Array.isArray(cols)) {
    return controller;
  }

  var colsWidth = cols.slice();
  var containerWidth = containerWidthParam || getTableMaxWidthByContainer(controller, table);
  var isAutofit = Table.isAutofitWidth(dataTable);

  if (isAutofit) {
    colsWidth = convertFromPercentToPixel(dataTable, containerWidth);
  }

  var minColsWidth = Array(colsWidth.length).fill(MIN_COL_WIDTH); // eslint-disable-next-line guard-for-in

  for (var key in tableMinColsWidth) {
    var path = table.getPath(key);

    if (!path) {
      continue;
    }

    var colIndex = path[1]; // 根据 value.data.tableMinColsWidth 设置每列的最小列宽

    minColsWidth[colIndex] = tableMinColsWidth[key];
  }

  minColsWidth.forEach(function (minColWidth, index) {
    var originColWidth = colsWidth[index]; // 当前列宽 >= 最小列宽，则不处理

    if (originColWidth >= minColWidth) {
      return;
    }

    var delta = minColWidth - originColWidth;
    var totalColsWidth = colsWidth.reduce(function (acc, curr) {
      return acc + curr;
    }, 0); // 设置当前列的列宽

    colsWidth[index] += delta; // 调整下一列列宽，尽量保证表格整体宽度不变

    if (totalColsWidth <= containerWidth && index < colsWidth.length - 1) {
      var nextColWidth = colsWidth[index + 1];
      colsWidth[index + 1] = Math.max(minColsWidth[index + 1], nextColWidth - delta);
    }
  });
  var newTotalWidth = colsWidth.reduce(function (acc, w) {
    return acc + w;
  }, 0);
  var resultColsWidth = colsWidth;

  if (isAutofit) {
    var totalW = newTotalWidth > containerWidth ? newTotalWidth / containerWidth * 100 : undefined;
    resultColsWidth = convertFromPixelToPercent(colsWidth, containerWidth, totalW);
  }

  if (!equal(injColsWidth, resultColsWidth)) {
    setColsWidthInjection(controller, table, resultColsWidth);
  }

  return controller;
}
;
//# sourceMappingURL=adjustColsWidth.js.map