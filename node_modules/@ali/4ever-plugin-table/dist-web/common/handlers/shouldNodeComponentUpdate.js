import equal from 'fast-deep-equal';
import Table from "../../mo/models";
import TableCell from "../../mo/models/tableCell";
import TableRow from "../../mo/models/tableRow";
import getTableCellWidth from "../../utils/utils/getTableCellWidth";
import getPositionOfCell from "../../utils/utils/getPositionOfCell";

var shouldNodeComponentUpdate = function shouldNodeComponentUpdate(prevProps, props, __, next) {
  if (TableRow.isTableRow(props.node)) {
    var _prevTable$data, _table$data, _prevTable$data2, _table$data2, _prevTable$data3, _table$data3;

    var prevTable = prevProps.parent;
    var table = props.parent; // 表格列宽变化时 update 以触发 tableCell update

    if (!equal(prevTable == null ? void 0 : (_prevTable$data = prevTable.data) == null ? void 0 : _prevTable$data.colsWidth, table == null ? void 0 : (_table$data = table.data) == null ? void 0 : _table$data.colsWidth) || !equal(prevTable == null ? void 0 : (_prevTable$data2 = prevTable.data) == null ? void 0 : _prevTable$data2.styleId, table == null ? void 0 : (_table$data2 = table.data) == null ? void 0 : _table$data2.styleId) || !equal(prevTable == null ? void 0 : (_prevTable$data3 = prevTable.data) == null ? void 0 : _prevTable$data3.tblLook, table == null ? void 0 : (_table$data3 = table.data) == null ? void 0 : _table$data3.tblLook)) {
      return true;
    }
  }

  if (TableCell.isTableCell(props.node)) {
    var _prevTable$data4, _table$data4, _prevTable$data5, _table$data5;

    var prevDocument = prevProps.value.document;

    var _prevTable = prevDocument.getClosest(prevProps.node.key, Table.isTable);

    var prevCellWidth = getTableCellWidth(prevProps.node, _prevTable);
    var prevPosition = getPositionOfCell(prevProps.node.key, _prevTable);
    var document = props.value.document;

    var _table = document.getClosest(props.node.key, Table.isTable);

    var cellWidth = getTableCellWidth(props.node, _table);
    var position = getPositionOfCell(props.node.key, _table); // tableCell 宽度变化时 update（部分插件在 cell 宽度变化时需要 rerender）

    if (!equal(prevCellWidth, cellWidth) || !equal(prevPosition, position) || !equal(_prevTable == null ? void 0 : (_prevTable$data4 = _prevTable.data) == null ? void 0 : _prevTable$data4.styleId, _table == null ? void 0 : (_table$data4 = _table.data) == null ? void 0 : _table$data4.styleId) || !equal(_prevTable == null ? void 0 : (_prevTable$data5 = _prevTable.data) == null ? void 0 : _prevTable$data5.tblLook, _table == null ? void 0 : (_table$data5 = _table.data) == null ? void 0 : _table$data5.tblLook)) {
      return true;
    }
  }

  if (Table.isTable(props.node)) {
    var _props$prevValue, _props$prevValue2;

    // 当在单元格内选区时，若由于 mousemove 造成仅有 selection.data.isByTable 变化
    // 则使表格 re-render 以显示单元格选区
    if (props.isSelected && prevProps.isSelected && ((_props$prevValue = props.prevValue) == null ? void 0 : _props$prevValue.selection.plainViewKey) === props.value.selection.plainViewKey && ((_props$prevValue2 = props.prevValue) == null ? void 0 : _props$prevValue2.selection.data.isByTable) !== props.value.selection.data.isByTable) {
      return true;
    }
  }

  return next();
};

export default shouldNodeComponentUpdate;
//# sourceMappingURL=shouldNodeComponentUpdate.js.map