import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ResizeObserver from 'resize-observer-polyfill';
import MoTable from "../../mo/models";
import constants from "../../utils/constants";
import { PixelColsWidthContext } from "../../utils/hooks";
import { adjustColsWidth } from "../../utils/actions";
import TableContextContainer from "../../components/tableContextContainer";
import TableScrollContainer from "../../components/tableScrollContainer";
import PureTable from "../../components/pureTable";
var DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT = constants.DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT;
var CommonTable = /*#__PURE__*/React.forwardRef(function (props, forwardRef) {
  var node = props.node,
      children = props.children,
      _props$attributes = props.attributes,
      attributes = _props$attributes === void 0 ? {} : _props$attributes,
      _props$config = props.config,
      config = _props$config === void 0 ? {} : _props$config,
      controller = props.controller,
      isMobile = props.isMobile,
      rest = _objectWithoutPropertiesLoose(props, ["node", "children", "attributes", "config", "controller", "isMobile"]);

  var wrapperRef = React.useRef(null);
  var ref = React.useRef(null);
  var wrapperWidthRef = React.useRef(0);
  var observerRef = React.useRef();

  var _React$useState = React.useState([]),
      pixelColsWidth = _React$useState[0],
      setPixelColsWidth = _React$useState[1];

  var pixelColsWidthValue = React.useMemo(function () {
    return [pixelColsWidth, setPixelColsWidth];
  }, [pixelColsWidth]);
  React.useEffect(function () {
    if (typeof forwardRef === 'function') {
      forwardRef(ref.current);
    } else if (forwardRef) {
      forwardRef.current = ref.current;
    }
  }, [ref, forwardRef]);
  React.useEffect(function () {
    var containerWidth = isMobile ? DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT : undefined;
    controller.run('onAction', adjustColsWidth(node, containerWidth));
  });
  var isAutofit = MoTable.isAutofitWidth(node);
  React.useEffect(function () {
    if (isMobile || !isAutofit || !wrapperRef.current) return function () {};
    observerRef.current = new ResizeObserver(function (list) {
      var contentRect = list[0].contentRect; // table 开启 prune display: none 时，宽度是 0

      if (contentRect.width === 0 || contentRect.width === wrapperWidthRef.current) return;
      wrapperWidthRef.current = contentRect.width;
      controller.run('onAction', adjustColsWidth(node));
    });
    var wrapperNode = wrapperRef.current;
    observerRef.current.observe(wrapperNode);
    return function () {
      if (wrapperNode) {
        var _observerRef$current;

        (_observerRef$current = observerRef.current) == null ? void 0 : _observerRef$current.unobserve(wrapperNode);
      }
    };
  }, [node, isMobile, controller, isAutofit]);
  React.useEffect(function () {
    return function () {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, []);
  var scrollContainerRef = React.useRef(null);
  var configOnScroll = config.onScroll;
  var onScroll = React.useCallback(function () {
    if (configOnScroll && scrollContainerRef.current) {
      configOnScroll(scrollContainerRef.current, node);
    }
  }, [node, configOnScroll]);

  var _ref = node.data || {},
      percentOfScrollLeft = _ref.percentOfScrollLeft;

  React.useEffect(function () {
    var frameId = window.requestAnimationFrame(function () {
      var scrollContainer = scrollContainerRef.current;

      if (!scrollContainer || !ref.current) {
        return;
      }

      if (typeof percentOfScrollLeft === 'number') {
        var containerWidth = scrollContainer.offsetWidth;
        var tableWidth = ref.current.offsetWidth;
        var totalScroll = tableWidth - containerWidth;
        scrollContainer.scrollTo({
          left: percentOfScrollLeft * totalScroll,
          behavior: 'smooth'
        });
      }
    });
    return function () {
      window.cancelAnimationFrame(frameId);
    };
  }, [percentOfScrollLeft]);
  return /*#__PURE__*/_createElement(PixelColsWidthContext.Provider, {
    value: pixelColsWidthValue
  }, /*#__PURE__*/_createElement(TableScrollContainer, _extends({}, rest, {
    controller: controller,
    onScroll: onScroll,
    table: node,
    ref: scrollContainerRef,
    isMobile: isMobile
  }), /*#__PURE__*/_createElement("div", _extends({}, attributes, {
    ref: wrapperRef
  }), /*#__PURE__*/_createElement(PureTable, {
    ref: forwardRef,
    node: node,
    controller: controller,
    isMobile: isMobile,
    readonly: true,
    forceRenderPercentColWidthForAutoFit: config.forceRenderPercentColWidthForAutoFit == null ? void 0 : config.forceRenderPercentColWidthForAutoFit()
  }, children()))));
});

var PCTable = function PCTable(props) {
  var controller = props.controller,
      node = props.node,
      _props$config2 = props.config,
      config = _props$config2 === void 0 ? {} : _props$config2;
  var enableHeaderSticky = config.enableHeaderSticky;
  return /*#__PURE__*/_createElement(TableContextContainer, {
    controller: controller,
    table: node,
    enableHeaderSticky: enableHeaderSticky
  }, /*#__PURE__*/_createElement(CommonTable, props));
};

var Table = function Table(props) {
  var isMobile = props.isMobile;

  if (isMobile) {
    return /*#__PURE__*/_createElement(CommonTable, props);
  }

  return /*#__PURE__*/_createElement(PCTable, props);
};

export default Table;
//# sourceMappingURL=table.js.map