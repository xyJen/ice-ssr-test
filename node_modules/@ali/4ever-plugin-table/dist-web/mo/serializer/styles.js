import _extends from "@babel/runtime/helpers/extends";
var DEFAULT_TABLE_BORDER_COLOR = '#D6D6D6';
var DEFAULT_BORDER_SIDE = {
  val: 'single',
  sz: 1,
  color: '#000000'
};

function generateBorderSideStyle(side) {
  var _DEFAULT_BORDER_SIDE$ = _extends({}, DEFAULT_BORDER_SIDE, side),
      sz = _DEFAULT_BORDER_SIDE$.sz,
      val = _DEFAULT_BORDER_SIDE$.val,
      color = _DEFAULT_BORDER_SIDE$.color;

  return sz + "px " + (val === 'single' ? 'solid' : val) + " " + color;
}

function generateBorderStyle(bdr) {
  if (bdr === void 0) {
    bdr = {};
  }

  return {
    borderTop: generateBorderSideStyle(bdr.top),
    borderRight: generateBorderSideStyle(bdr.right),
    borderBottom: generateBorderSideStyle(bdr.bottom),
    borderLeft: generateBorderSideStyle(bdr.left)
  };
}

function generatePaddingStyle(bdr, padding) {
  if (padding === void 0) {
    padding = 8;
  }

  var paddingStyle = {};

  if (bdr.left && bdr.left.sz) {
    paddingStyle.paddingLeft = padding - Math.abs(bdr.left.sz);
  }

  if (bdr.right && bdr.right.sz) {
    paddingStyle.paddingRight = padding - Math.abs(bdr.right.sz);
  }

  return paddingStyle;
}

var DEFAULT_TABLE_CELL_STYLE = {
  overflow: 'hidden',
  borderLeft: "1px solid " + DEFAULT_TABLE_BORDER_COLOR,
  borderRight: "1px solid " + DEFAULT_TABLE_BORDER_COLOR,
  borderBottom: "1px solid " + DEFAULT_TABLE_BORDER_COLOR,
  borderTop: "1px solid " + DEFAULT_TABLE_BORDER_COLOR,
  padding: '4px 8px',
  overflowWrap: 'break-word',
  wordWrap: 'break-word'
};
export function generateTableCellStyle(attrs) {
  var style = _extends({}, DEFAULT_TABLE_CELL_STYLE, generateBorderStyle(attrs.bdr));

  if (attrs.hidden) {
    style.display = 'none';
  }

  if (attrs.fill) {
    style.backgroundColor = attrs.fill;
  }

  if (attrs.vAlign) {
    style.verticalAlign = attrs.vAlign;
  }

  if (attrs.bdr) {
    style = _extends({}, style, generateBorderStyle(attrs.bdr), generatePaddingStyle(attrs.bdr));
  }

  return style;
}
export var DEFAULT_TABLE_ROW_HEIGHT = 33;
export function generateTableStyle(attrs) {
  var _attrs$colsWidth = attrs.colsWidth,
      colsWidth = _attrs$colsWidth === void 0 ? [] : _attrs$colsWidth,
      tblW = attrs.tblW;
  var isAutofit = (tblW == null ? void 0 : tblW.type) === 'pct';
  var style = {
    borderCollapse: 'collapse',
    tableLayout: 'fixed'
  };

  if (isAutofit) {
    style.width = '100%';
  } else {
    var tableWidth = colsWidth.reduce(function (sum, width) {
      return sum + width;
    }, 0);

    if (tableWidth > 0) {
      style.width = tableWidth;
    }
  }

  return style;
}
//# sourceMappingURL=styles.js.map