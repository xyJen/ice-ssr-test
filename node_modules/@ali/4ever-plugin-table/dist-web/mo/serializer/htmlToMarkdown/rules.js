import { isTable, isHeadingRow, normalizeTable } from "./utils"; // table cell replacement logic.

function cell(content, node) {
  var _node$parentNode;

  var index = Array.prototype.indexOf.call((_node$parentNode = node.parentNode) == null ? void 0 : _node$parentNode.childNodes, node);
  var prefix = ' ';
  if (index === 0) prefix = '| ';
  return prefix + content + ' |';
} //  table cell rules.


var tableCell = {
  filter: ['th', 'td'],
  replacement: function replacement(content, node) {
    var cellContent = content.replace(/\n+/g, ' ');
    return cell(cellContent, node);
  }
}; //  table row rules.

var tableRow = {
  filter: 'tr',
  replacement: function replacement(content, node) {
    var borderCells = '';
    var alignMap = {
      left: ':--',
      right: '--:',
      center: ':-:'
    };

    if (isHeadingRow(node)) {
      for (var i = 0; i < node.children.length; i++) {
        var border = '---';
        var align = (node.children[i].getAttribute('align') || '').toLowerCase();
        if (align) border = alignMap[align] || border;
        borderCells += cell(border, node.children[i]);
      }
    }

    return '\n' + content + (borderCells ? '\n' + borderCells : '');
  }
}; //  table rules.

var table = {
  filter: function filter(node) {
    if (!isTable(node)) {
      return false;
    }

    if (isHeadingRow(node.rows[0])) {
      normalizeTable(node);
      return false;
    }

    return true;
  },
  replacement: function replacement(content) {
    content = content.replace('\n\n', '\n');
    return content;
  }
}; //  table selection rules.

var tableSection = {
  filter: ['thead', 'tbody', 'tfoot'],
  replacement: function replacement(content) {
    return content;
  }
};
export default {
  tableCell: tableCell,
  tableRow: tableRow,
  table: table,
  tableSection: tableSection
};
//# sourceMappingURL=rules.js.map