{"version":3,"sources":["../../../../../src/mo/serializer/htmlToMarkdown/utils.ts"],"names":["excuteByTimes","fn","times","i","normalizeTable","table","colgroup","getElementsByTagName","colsNum","children","length","rows","Array","from","forEach","row","cell","colSpan","nextCell","nextElementSibling","correctTable","td","document","createElement","insertBefore","appendChild","range","entries","index","rowSpan","isTable","node","nodeName","isHeadingRow","tr","parentNode","firstChild"],"mappings":"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","sourcesContent":["function excuteByTimes(fn: Function, times: number) {\n  for (let i = 0; i < times; i++) {\n    fn();\n  }\n}\n\n// 拆分 table 已合并的单元格\nexport function normalizeTable(table: HTMLTableElement) {\n  const colgroup = table.getElementsByTagName('colgroup')[0];\n  const colsNum = colgroup.children.length;\n  const rows = Array.from(table.rows);\n\n  // 处理 colSpan 合并的单元格\n  rows.forEach((row) => {\n    for (let i = 0; i < colsNum; i++) {\n      const cell = row.children[i] as HTMLTableCellElement;\n      if (!cell || !(cell.colSpan > 1)) {\n        continue;\n      }\n\n      const nextCell = cell.nextElementSibling;\n      const correctTable = () => {\n        const td = document.createElement('td');\n        if (nextCell) {\n          row.insertBefore(td, nextCell);\n        } else {\n          row.appendChild(td);\n        }\n      }\n      excuteByTimes(correctTable, cell.colSpan - 1);\n    }\n  });\n\n  // 处理 rowSpan 合并的单元格\n  for (let i = 0; i < colsNum; i++) {\n    let range = 0;\n    for (const [index, row] of rows.entries()) {\n      const cell = row.children[i] as HTMLTableCellElement;\n      if (!cell) {\n        continue;\n      }\n      if (index < range) {\n        // 补上单元格\n        const td = document.createElement('td');\n        row.insertBefore(td, cell);\n\n        if (index === range - 1) {\n          range = 0;\n        }\n        continue;\n      }\n      if (cell.rowSpan > 1) {\n        range = index + cell.rowSpan;\n      }\n    }\n  }\n}\n\nexport function isTable(node: HTMLElement): node is HTMLTableElement {\n  return node.nodeName === 'TABLE';\n}\n\nexport function isHeadingRow(tr: HTMLElement) {\n  const parentNode = tr.parentNode;\n  return (\n    parentNode?.nodeName === 'THEAD' ||\n    (parentNode?.firstChild === tr && parentNode.nodeName === 'TBODY')\n  );\n}\n"],"file":"utils.js"}