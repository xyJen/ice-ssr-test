function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function excuteByTimes(fn, times) {
  for (var i = 0; i < times; i++) {
    fn();
  }
} // 拆分 table 已合并的单元格


export function normalizeTable(table) {
  var colgroup = table.getElementsByTagName('colgroup')[0];
  var colsNum = colgroup.children.length;
  var rows = Array.from(table.rows); // 处理 colSpan 合并的单元格

  rows.forEach(function (row) {
    var _loop = function _loop(i) {
      var cell = row.children[i];

      if (!cell || !(cell.colSpan > 1)) {
        return "continue";
      }

      var nextCell = cell.nextElementSibling;

      var correctTable = function correctTable() {
        var td = document.createElement('td');

        if (nextCell) {
          row.insertBefore(td, nextCell);
        } else {
          row.appendChild(td);
        }
      };

      excuteByTimes(correctTable, cell.colSpan - 1);
    };

    for (var i = 0; i < colsNum; i++) {
      var _ret = _loop(i);

      if (_ret === "continue") continue;
    }
  }); // 处理 rowSpan 合并的单元格

  for (var i = 0; i < colsNum; i++) {
    var range = 0;

    for (var _iterator = _createForOfIteratorHelperLoose(rows.entries()), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          index = _step$value[0],
          row = _step$value[1];
      var cell = row.children[i];

      if (!cell) {
        continue;
      }

      if (index < range) {
        // 补上单元格
        var td = document.createElement('td');
        row.insertBefore(td, cell);

        if (index === range - 1) {
          range = 0;
        }

        continue;
      }

      if (cell.rowSpan > 1) {
        range = index + cell.rowSpan;
      }
    }
  }
}
export function isTable(node) {
  return node.nodeName === 'TABLE';
}
export function isHeadingRow(tr) {
  var parentNode = tr.parentNode;
  return (parentNode == null ? void 0 : parentNode.nodeName) === 'THEAD' || (parentNode == null ? void 0 : parentNode.firstChild) === tr && parentNode.nodeName === 'TBODY';
}
//# sourceMappingURL=utils.js.map