{"version":3,"sources":["../../../../src/mo/serializer/valueToText.ts"],"names":["Block","Table","TableRow","TableCell","BREAK","valueToText","name","match","node","isTable","convert","isBlock","text","tableText","nodes","map","tableRow","isTableRow","rowText","tableCell","isTableCell","cellText","child","join"],"mappings":"AAAA,SAASA,KAAT,QAAuC,oBAAvC;AACA,OAAOC,KAAP;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP;AAGA,IAAMC,KAAK,GAAG,IAAd;AAEA,IAAMC,WAA4B,GAAG;AACnCC,EAAAA,IAAI,EAAE,OAD6B;AAGnCC,EAAAA,KAHmC,iBAG7BC,IAH6B,EAGvB;AACV,WAAOP,KAAK,CAACQ,OAAN,CAAcD,IAAd,CAAP;AACD,GALkC;AAOnCE,EAAAA,OAPmC,mBAO3BF,IAP2B,EAOrBE,QAPqB,EAOZ;AACrB,QAAI,CAACV,KAAK,CAACW,OAAN,CAAcH,IAAd,CAAL,EAA0B;AACxB,aAAOA,IAAI,CAACI,IAAZ;AACD;;AAED,QAAMC,SAAS,GAAGL,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAe,UAACC,QAAD,EAAc;AAC7C;AACA,UAAI,CAACd,QAAQ,CAACe,UAAT,CAAoBD,QAApB,CAAL,EAAoC;AAClC,eAAOA,QAAQ,CAACJ,IAAT,GAAgBR,KAAvB;AACD;;AAED,UAAMc,OAAO,GAAGF,QAAQ,CAACF,KAAT,CAAeC,GAAf,CAAmB,UAACI,SAAD,EAAe;AAChD;AACA,YAAI,CAAChB,SAAS,CAACiB,WAAV,CAAsBD,SAAtB,CAAL,EAAuC;AACrC,iBAAQA,SAAD,CAAmBP,IAAnB,GAA0BR,KAAjC;AACD;;AAED,YAAMiB,QAAQ,GAAGF,SAAS,CAACL,KAAV,CAAgBC,GAAhB,CAAoB,UAACO,KAAD;AAAA,iBAAWZ,QAAO,CAACY,KAAD,CAAlB;AAAA,SAApB,EAA+CC,IAA/C,CAAoD,EAApD,CAAjB;AAEA,eAAOF,QAAP;AACD,OATe,EASbE,IATa,CASR,EATQ,CAAhB;AAWA,aAAOL,OAAP;AACD,KAlBiB,EAkBfK,IAlBe,CAkBV,EAlBU,CAAlB;AAoBA,WAAOV,SAAP;AACD;AAjCkC,CAArC;AAoCA,eAAeR,WAAf","sourcesContent":["import { Block, ValueToTextRule } from '@ali/4ever-cangjie';\nimport Table from '../models';\nimport TableRow from '../models/tableRow';\nimport TableCell from '../models/tableCell';\n\n\nconst BREAK = '\\n';\n\nconst valueToText: ValueToTextRule = {\n  name: 'table',\n\n  match(node) {\n    return Table.isTable(node);\n  },\n\n  convert(node, convert) {\n    if (!Block.isBlock(node)) {\n      return node.text;\n    }\n\n    const tableText = node.nodes.map((tableRow) => {\n      // 不是 tableRow 节点，坏表格\n      if (!TableRow.isTableRow(tableRow)) {\n        return tableRow.text + BREAK;\n      }\n\n      const rowText = tableRow.nodes.map((tableCell) => {\n        // 不是 tableCell 节点，坏表格\n        if (!TableCell.isTableCell(tableCell)) {\n          return (tableCell as any).text + BREAK;\n        }\n\n        const cellText = tableCell.nodes.map((child) => convert(child)).join('');\n\n        return cellText;\n      }).join('');\n\n      return rowText;\n    }).join('');\n\n    return tableText;\n  },\n};\n\nexport default valueToText;\n"],"file":"valueToText.js"}