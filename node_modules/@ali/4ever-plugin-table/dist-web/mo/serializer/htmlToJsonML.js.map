{"version":3,"sources":["../../../../src/mo/serializer/htmlToJsonML.ts"],"names":["getTagName","getAttributes","getChildren","cssBorderParse","convertBorderToData","praseCSSBackground","parseCSSAbsoluteLength","isNumeric","isCSSAbsoluteLength","isEmpty","createEmptyParagraph","tagToType","DEFAULT_PAGE_WIDTH","TableTag","createEmptyTableCell","hidden","colSpan","rowSpan","normalizeTrAttrs","attrs","normalizedAttrs","style","styleObj","height","px","h","parseFloat","normalizeTcAttrs","element","rowspan","parseInt","colspan","computedStyle","window","getComputedStyle","getStyle","name","width","parsed","fill","backgroundColor","valign","vAlign","forEach","side","bdr","type","capType","toUpperCase","slice","normalizeTableCells","table","rows","row","cells","cell","jsonMLToTableStructure","tableAttrs","tableStructure","map","rowAttrs","rowStructure","cellAttrs","value","attributes","tableStructureToJsonML","Tr","Table","createEmptyCellStructure","normalizeTableStructure","i","length","j","fillCells","Array","splice","k","end","fillRow","maxColSize","reduce","size","Math","max","Infinity","offset","push","normalizeTableSpan","normalizeTable","firstRow","colsCount","colsWidth","tableCellAttrs","filter","colWidth","floor","flatAppendTr","state","node","tagName","chlidren","current","child","childTagName","append","htmlToJsoML","onOpenTag","rawAttrs","closest","currentDom","Tc","onCloseTag","pop"],"mappings":"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","sourcesContent":["import {\n  JsonML,\n  getTagName,\n  getAttributes,\n  getChildren,\n  cssBorderParse,\n  convertBorderToData,\n  praseCSSBackground,\n  parseCSSAbsoluteLength,\n  isNumeric,\n  isCSSAbsoluteLength,\n} from '@ali/4ever-utils';\nimport { isEmpty } from 'lodash-es';\nimport { MoState as State, MoAttributes as Attributes, HTMLToJsonMLRule, createEmptyParagraph } from '@ali/4ever-cangjie';\nimport { tagToType, DEFAULT_PAGE_WIDTH } from './constants';\nimport {\n  TableCellProperties,\n  TableRowProperties,\n  VerticalAlign,\n  TableProperties,\n  TableTag,\n} from './types';\n\nfunction createEmptyTableCell(hidden = false): JsonML {\n  return [\n    'tc',\n    {\n      hidden,\n      colSpan: 1,\n      rowSpan: 1,\n    },\n    createEmptyParagraph(),\n  ] as JsonML;\n}\n\nfunction normalizeTrAttrs(attrs: Attributes): TableRowProperties {\n  const normalizedAttrs: TableRowProperties = {};\n\n  // 如果 style 存在则解析 style\n  if (typeof attrs.style === 'string') {\n    const style = attrs.styleObj;\n\n    // 行高\n    if (style.height) {\n      const px = parseCSSAbsoluteLength(style.height, 'px');\n      normalizedAttrs.h = parseFloat(px);\n    }\n  }\n\n  return normalizedAttrs;\n}\n\nfunction normalizeTcAttrs(\n  attrs: Attributes,\n  element?: HTMLElement,\n): TableCellProperties {\n  const normalizedAttrs: TableCellProperties = {\n    // 默认值\n    rowSpan: typeof attrs.rowspan === 'number' ? attrs.rowspan : parseInt(attrs.rowspan, 10) || 1,\n    colSpan: typeof attrs.colspan === 'number' ? attrs.colspan : parseInt(attrs.colspan, 10) || 1,\n  };\n  const computedStyle = element ? window.getComputedStyle(element) : {};\n\n  // 如果 style 存在则解析 style\n  if (typeof attrs.style === 'string' || !isEmpty(computedStyle)) {\n    const getStyle = (name: string) => {\n      return computedStyle[name] || attrs?.style?.[name];\n    };\n    // 隐藏的单元格\n    if (getStyle('display') === 'none') {\n      normalizedAttrs.hidden = true;\n    }\n\n    // 单元格宽度\n    if (attrs.width && isCSSAbsoluteLength(getStyle('width'))) {\n      normalizedAttrs.width = parseCSSAbsoluteLength(attrs.width, 'px');\n    }\n\n    // 单元格填充色\n    if (getStyle('background')) {\n      const parsed = praseCSSBackground(getStyle('background'));\n      normalizedAttrs.fill = parsed.backgroundColor;\n    }\n    if (getStyle('backgroundColor')) {\n      normalizedAttrs.fill = getStyle('backgroundColor');\n    }\n\n    // 单元格垂直对齐方式\n    if (attrs.valign) {\n      normalizedAttrs.vAlign = attrs.valign as VerticalAlign;\n    }\n\n    // 边框\n    if (getStyle('border')) {\n      const parsed = cssBorderParse(getStyle('border'));\n      if (parsed && parsed.style !== 'none') {\n        ['top', 'right', 'bottom', 'left'].forEach((side) => {\n          normalizedAttrs.bdr = {\n            ...normalizedAttrs.bdr,\n            [side]: convertBorderToData(parsed),\n          };\n        });\n      }\n    }\n    // 解析不同位置的边框\n    ['left', 'right', 'top', 'bottom'].forEach((type) => {\n      const capType = `border${type[0].toUpperCase()}${type.slice(1)}`;\n      if (getStyle(capType)) {\n        const parsed = cssBorderParse(getStyle(capType));\n        if (parsed) {\n          if (parsed.style === 'none') {\n            delete normalizedAttrs.bdr?.[type];\n          } else {\n            normalizedAttrs.bdr = {\n              ...normalizedAttrs.bdr,\n              [type]: convertBorderToData(parsed),\n            };\n          }\n        }\n      }\n    });\n  }\n\n  return normalizedAttrs;\n}\n\n/**\n * 修补 table cell 的数据格式\n * @param table\n */\nfunction normalizeTableCells(table: JsonML): void {\n  const rows = getChildren(table);\n  rows.forEach((row) => {\n    const cells = getChildren(row);\n    cells.forEach((cell) => {\n      const attrs = getAttributes(cell) as TableCellProperties;\n      // 当前 td 不消费 width 数据\n      if (attrs && attrs.width) {\n        delete attrs.width;\n      }\n    });\n  });\n}\n\ninterface ICell {\n  rowSpan: number;\n  colSpan: number;\n  value: JsonML;\n}\n\ninterface IRow extends Array<ICell> {\n  attributes?: TableRowProperties;\n}\n\ninterface ITable extends Array<IRow> {\n  attributes?: TableProperties;\n}\n\n/**\n * 将 table ASL 序列化成输出格式，方便做矩阵算法\n * @param table\n */\nfunction jsonMLToTableStructure(table: JsonML): ITable {\n  const rows = getChildren(table);\n  const tableAttrs = getAttributes(table) as TableProperties;\n\n  const tableStructure: ITable = rows.map((row) => {\n    const cells = getChildren(row);\n    const rowAttrs = getAttributes(row) as TableRowProperties;\n\n    const rowStructure: IRow = cells.map((cell) => {\n      const cellAttrs = getAttributes(cell) as TableCellProperties;\n      let rowSpan = 1;\n      let colSpan = 1;\n      if (cellAttrs) {\n        if (typeof cellAttrs.rowSpan === 'number') {\n          rowSpan = cellAttrs.rowSpan;\n        }\n        if (typeof cellAttrs.colSpan === 'number') {\n          colSpan = cellAttrs.colSpan;\n        }\n      }\n\n      return {\n        rowSpan,\n        colSpan,\n        value: cell,\n      };\n    });\n\n    rowStructure.attributes = rowAttrs;\n\n    return rowStructure;\n  });\n\n  tableStructure.attributes = tableAttrs;\n\n  return tableStructure;\n}\n\n/**\n * 将表格矩阵还原为 ASL\n * @param tableStructure\n */\nfunction tableStructureToJsonML(tableStructure: ITable): JsonML {\n  const rows: JsonML[] = tableStructure.map((rowStructure) => {\n    const cells = rowStructure.map((cell) => cell.value);\n\n    const attrs = rowStructure.attributes;\n    const row = attrs\n      ? [TableTag.Tr, attrs, ...cells]\n      : [TableTag.Tr, ...cells];\n\n    return (row as unknown) as JsonML;\n  });\n\n  const tableAttrs = tableStructure.attributes;\n  const table = tableAttrs\n    ? [TableTag.Table, tableAttrs, ...rows]\n    : [TableTag.Table, ...rows];\n\n  return (table as unknown) as JsonML;\n}\n\nfunction createEmptyCellStructure(hidden = false): ICell {\n  return {\n    rowSpan: 1,\n    colSpan: 1,\n    value: createEmptyTableCell(hidden),\n  };\n}\n\n/**\n * 订正表格的单元格结构\n * 1. 补齐 span 的单元格跨度空缺\n * 2. 订正不规整的行列\n * @param table\n */\nfunction normalizeTableStructure(table: ITable) {\n  // 第一步，填补 span 的单元格\n  for (let i = 0; i < table.length; i++) {\n    const row = table[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n\n      // 如果在当前行中列跨度大于 1，则在当前坐标之后 +1 填充单元格\n      if (cell.colSpan > 1) {\n        // 由于第一个单元格已经占 1 位，所以要 -1\n        const fillCells = Array(cell.colSpan - 1)\n          .fill(true)\n          .map(createEmptyCellStructure);\n        row.splice(j + 1, 0, ...fillCells);\n      }\n    }\n  }\n  for (let i = 0; i < table.length; i++) {\n    const row = table[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      // 如果行的跨度大于 1，则需要在下面的行中填充单元格\n      if (cell.rowSpan > 1) {\n        for (let k = i + 1, end = i + cell.rowSpan; k < end; k++) {\n          let fillRow = table[k];\n          // 可能会出现一种情况，表格的行不够填充了，则这里要追加行\n          if (!fillRow) {\n            fillRow = Array(j).fill(false).map(createEmptyCellStructure);\n            table[k] = fillRow;\n          }\n          const fillCells = Array(cell.colSpan)\n            .fill(true)\n            .map(createEmptyCellStructure);\n          fillRow.splice(j, 0, ...fillCells);\n        }\n      }\n    }\n  }\n\n  // 第二步，填补不规整的行\n  const maxColSize = table.reduce(\n    (size, row) => Math.max(size, row.length),\n    -Infinity,\n  );\n  table.forEach((row) => {\n    const offset = maxColSize - row.length;\n    if (offset > 0) {\n      row.push(...Array(offset).fill(false).map(createEmptyCellStructure));\n    }\n  });\n}\n\nfunction normalizeTableSpan(table: JsonML) {\n  const tableStructure = jsonMLToTableStructure(table);\n  normalizeTableStructure(tableStructure);\n  return tableStructureToJsonML(tableStructure);\n}\n\nfunction normalizeTable(table: JsonML): JsonML {\n  // 订正单元格\n  table = normalizeTableSpan(table);\n\n  const rows = getChildren(table);\n  // 空表格\n  if (rows.length <= 0) {\n    return table;\n  }\n  const firstRow = rows[0];\n  const cells = getChildren(firstRow);\n  const colsCount = cells.length;\n  const tableAttrs = getAttributes(table) as TableProperties;\n\n  // 如果 table 的 colsWidth 缺失，则需要进行计算\n  if (tableAttrs.colsWidth.length !== colsCount) {\n    // 计算第一行的 td width 数据\n    const colsWidth = cells\n      .map((cell) => {\n        const tableCellAttrs = getAttributes(cell) as TableCellProperties;\n        return parseInt(tableCellAttrs.width || '0', 10);\n      })\n      .filter((width) => width > 0);\n\n    // 如果列宽的数量与列数相等，则认为是合法数据\n    if (colsWidth.length === colsCount) {\n      tableAttrs.colsWidth = colsWidth;\n    } else {\n      // 注意这个值可能需要优化，纸张在不同的模式下宽度都不同，考虑到自适应的问题，目前暂时设一个较少的值\n      const colWidth = Math.floor(DEFAULT_PAGE_WIDTH / colsCount);\n      tableAttrs.colsWidth = Array(colsCount).fill(colWidth);\n    }\n  }\n\n  // 单元格数据合法化\n  normalizeTableCells(table);\n\n  return table;\n}\n\nfunction flatAppendTr(state: State, node: JsonML): void {\n  const tagName = getTagName(node);\n  const attrs = getAttributes(node);\n  const chlidren = getChildren(node);\n  let current: JsonML = attrs ? [tagName, attrs] : [tagName];\n  chlidren.forEach((child) => {\n    const childTagName = getTagName(child);\n    // tr 内嵌 tr，则把嵌套的 tr 打平\n    if (childTagName === tagName) {\n      if (getChildren(current).length) {\n        state.append(current);\n      }\n      state.append(child);\n\n      current = attrs ? [tagName, attrs] : [tagName];\n      return;\n    }\n\n    // 不支持 tr 内嵌套单元格以外数据类型\n    if (childTagName !== 'tc') return;\n\n    current.push(child);\n  });\n  // 有些tr虽然没有child，但是属于合并单元格的一项，不可直接摒弃\n  state.append(current);\n}\n\nexport default function htmlToJsoML(): HTMLToJsonMLRule {\n  return {\n    name: 'table',\n\n    onOpenTag: (state: State, name: string, rawAttrs: Attributes): boolean => {\n      if (name === 'col') {\n        const table = state.closest('table');\n        if (table && isNumeric(rawAttrs.width)) {\n          const tableAttrs = getAttributes(table) as TableProperties;\n          tableAttrs.colsWidth.push(parseInt(rawAttrs.width, 10));\n        }\n        return true;\n      }\n\n      if (name === 'td' || name === 'th') {\n        name = 'tc'; // eslint-disable-line no-param-reassign\n      }\n      if (!tagToType[name]) return false;\n\n      const element = state.currentDom;\n\n      // 创建节点\n      const node: JsonML = [name];\n      state.push(node);\n\n      switch (name) {\n        case TableTag.Table: {\n          node.push({ colsWidth: [] });\n          break;\n        }\n\n        case TableTag.Tr: {\n          const attrs = normalizeTrAttrs(rawAttrs);\n          node.push(attrs);\n          break;\n        }\n\n        case TableTag.Tc: {\n          const attrs = normalizeTcAttrs(rawAttrs, element);\n          node.push(attrs);\n          break;\n        }\n\n        default:\n          return true;\n      }\n      return true;\n    },\n\n    onCloseTag: (state: State, name: string): boolean => {\n      if (name === 'td' || name === 'th') {\n        name = TableTag.Tc;\n      }\n\n      if (!tagToType[name]) return false;\n\n      const node: JsonML = state.pop();\n      const tagName = getTagName(node);\n\n      switch (tagName) {\n        case TableTag.Table: {\n          const table = normalizeTable(node);\n          // 只接受非空表格\n          if (getChildren(table).length > 0) {\n            state.append(table);\n          }\n          return true;\n        }\n\n        case TableTag.Tr: {\n          flatAppendTr(state, node);\n          return true;\n        }\n\n        case TableTag.Tc: {\n          // 空单元格\n          if (getChildren(node).length === 0) {\n            node.push(createEmptyParagraph());\n          }\n          const attrs = getAttributes(node) as TableCellProperties;\n          if (attrs.width) {\n            const width = parseFloat(parseCSSAbsoluteLength(attrs.width, 'px'));\n            // 如果是 0 宽单元格则丢弃\n            if (width === 0) {\n              return true;\n            }\n          } else if (attrs.hidden) {\n            // 隐藏的单元这里不解析，在表格的 normalize 中会自行填充空缺的单元格\n            return true;\n          }\n          state.append(node);\n          return true;\n        }\n\n        default:\n          return false;\n      }\n    },\n  };\n}\n"],"file":"htmlToJsonML.js"}