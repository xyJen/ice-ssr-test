import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import { Block } from '@ali/4ever-cangjie';
import { ELEMENT_TYPE_TABLE_ROW } from "../../utils/meta";

var TableRow = /*#__PURE__*/function (_Block) {
  _inheritsLoose(TableRow, _Block);

  function TableRow() {
    return _Block.apply(this, arguments) || this;
  }

  TableRow.create = function create(properties) {
    if (typeof properties === 'string') {
      throw new Error('`TableRow.create` does not accept string');
    }

    if (TableRow.isTableRow(properties)) {
      return properties;
    }

    return _Block.create.call(this, _extends({}, properties, {
      type: TableRow.TYPE
    }));
  };

  TableRow.isTableRow = function isTableRow(maybeTableRow) {
    return Block.isBlock(maybeTableRow) && maybeTableRow.type === TableRow.TYPE;
  };

  TableRow.isHeader = function isHeader(row) {
    return row.data.isTblHeader === true;
  };

  TableRow.shouldSticky = function shouldSticky(row) {
    return this.isTableRow(row) && this.isHeader(row) && row.nodes.every(function (cell) {
      var _cell$data;

      return (((_cell$data = cell.data) == null ? void 0 : _cell$data.rowSpan) || 1) === 1;
    });
  };

  return TableRow;
}(Block);

TableRow.TYPE = ELEMENT_TYPE_TABLE_ROW;
export { TableRow as default };
//# sourceMappingURL=tableRow.js.map