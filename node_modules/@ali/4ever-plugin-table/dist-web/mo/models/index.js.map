{"version":3,"sources":["../../../../src/mo/models/index.ts"],"names":["Block","Text","TableCell","TableRow","ELEMENT_TYPE_TABLE","Table","create","properties","Error","isTable","type","TYPE","maybeTable","isBlock","isAutofitWidth","table","data","tblW","isRowHeader","nodes","Array","isArray","length","isTblHeader","isColumnHeader","isValidTable","colsWidth","isText"],"mappings":";;AAAA,SAASA,KAAT,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,SAAP;AACA,OAAOC,QAAP;AACA,SAASC,kBAAT;;IA2CqBC,K;;;;;;;QAOZC,M,GAAP,gBACEC,UADF,EAEE;AACA,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,QAAIH,KAAK,CAACI,OAAN,CAAcF,UAAd,CAAJ,EAA+B;AAC7B,aAAOA,UAAP;AACD;;AACD,kBAAaD,MAAb,yBACKC,UADL;AAEEG,MAAAA,IAAI,EAAEL,KAAK,CAACM;AAFd;AAID,G;;QAEMF,O,GAAP,iBAAeG,UAAf,EAAqD;AACnD,WAAOZ,KAAK,CAACa,OAAN,CAAcD,UAAd,KAA6BA,UAAU,CAACF,IAAX,KAAoBL,KAAK,CAACM,IAA9D;AACD,G;;QAEMG,c,GAAP,wBAAsBC,KAAtB,EAAoC;AAAA;;AAClC,WAAO,gBAAAA,KAAK,CAACC,IAAN,qDAAYC,IAAZ,sCAAkBP,IAAlB,MAA2B,KAAlC;AACD,G;;QAEMQ,W,GAAP,qBAAmBH,KAAnB,EAAiC;AAAA;;AAAA,QACvBI,KADuB,GACbJ,KADa,CACvBI,KADuB;AAE/B,WAAOC,KAAK,CAACC,OAAN,CAAcF,KAAd,KACFA,KAAK,CAACG,MAAN,GAAe,CADb,IAEF,CAAC,aAACH,KAAK,CAAC,CAAD,CAAN,6BAAC,QAAUH,IAAX,aAAC,aAAgBO,WAAjB,CAFN;AAGD,G;;QAEMC,c,GAAP,wBAAsBT,KAAtB,EAAoC;AAAA;;AAClC,WAAO,CAAC,kBAACA,KAAK,CAACC,IAAP,aAAC,aAAYQ,cAAb,CAAR;AACD,G;;QAEMC,Y,GAAP,sBAAoBb,UAApB,EAA0D;AAAA;;AAAA,eAClCA,UAAU,CAACI,IAAX,IAAmB,EADe;AAAA,QAChDU,SADgD,QAChDA,SADgD;;AAExD,WAAO,KAAKjB,OAAL,CAAaG,UAAb,KACFQ,KAAK,CAACC,OAAN,CAAcK,SAAd,CADE,IAEF,CAAC,CAACA,SAAS,CAACJ,MAFV,IAGF,CAAC,uBAACV,UAAU,CAACO,KAAZ,aAAC,kBAAkBG,MAAnB,CAHC,IAIF,EACDV,UAAU,CAACO,KAAX,CAAiBG,MAAjB,KAA4B,CAA5B,IACArB,IAAI,CAAC0B,MAAL,CAAYf,UAAU,CAACO,KAAX,CAAiB,CAAjB,CAAZ,CAFC,CAJL;AAQD,G;;;EAnDgCnB,K;;AAAdK,K,CACZM,I,GAAOP,kB;AADKC,K,CAGZF,Q,GAAWA,Q;AAHCE,K,CAKZH,S,GAAYA,S;SALAG,K","sourcesContent":["import { Block, BlockChildren, Text } from '@ali/4ever-cangjie';\nimport type { MoInterfaces } from '@ali/4ever-cangjie';\nimport TableCell from './tableCell';\nimport TableRow from './tableRow';\nimport { ELEMENT_TYPE_TABLE } from '../../utils/meta';\n\nexport interface TableData {\n  colsWidth?: number[];\n  // Single Row Table (Columns Plugin)\n  readonly sr?: boolean;\n\n  // NOTE: 目前无消费 width & jc & bdr\n  readonly width?: number;\n  readonly jc?: 'start' | 'left' | 'center' | 'end' | 'right';\n  readonly bdr?: MoInterfaces.TableBorder.default;\n  readonly tblpPr?: MoInterfaces.TblpPr.TblpPr;\n  readonly percentOfScrollLeft?: number;\n\n  // 表格列宽形式，是否为自定义\n  tblW?: MoInterfaces.TblW.TblW;\n\n  // 是否为表头列\n  isColumnHeader?: boolean;\n\n  // 声明使用的 样式 ID\n  styleId?: string;\n\n  // 声明使用 styleId 的规则，目前只用到了 firstColumn 和 firstRow\n  // firstColumn、firstRow、lastColumn、lastRow 默认为 true\n  // noHBand、noVBand 默认为 false（对齐 Word）\n  tblLook?: {\n    firstColumn?: 0 | 1 | boolean;\n    firstRow?: 0 | 1 | boolean;\n    lastColumn?: 0 | 1 | boolean;\n    lastRow?: 0 | 1 | boolean;\n    noHBand?: 0 | 1 | boolean;\n    noVBand?: 0 | 1 | boolean;\n  };\n}\n\ntype TableChildren = TableRow[];\n\ninterface TableProperties<D = TableData, N extends BlockChildren = TableChildren> {\n  data?: D;\n  nodes?: N;\n}\n\nexport default class Table extends Block<TableData, TableChildren> {\n  static TYPE = ELEMENT_TYPE_TABLE;\n\n  static TableRow = TableRow;\n\n  static TableCell = TableCell;\n\n  static create<SD = TableData, SN extends BlockChildren = TableChildren>(\n    properties: Table | TableProperties<SD, SN> | string,\n  ) {\n    if (typeof properties === 'string') {\n      throw new Error('`Table.create` does not accept string');\n    }\n    if (Table.isTable(properties)) {\n      return properties as Block<SD, SN>;\n    }\n    return super.create<SD, SN>({\n      ...properties,\n      type: Table.TYPE,\n    });\n  }\n\n  static isTable(maybeTable: any): maybeTable is Table {\n    return Block.isBlock(maybeTable) && maybeTable.type === Table.TYPE;\n  }\n\n  static isAutofitWidth(table: Table) {\n    return table.data?.tblW?.type === 'pct';\n  }\n\n  static isRowHeader(table: Table) {\n    const { nodes } = table;\n    return Array.isArray(nodes)\n      && nodes.length > 0\n      && !!nodes[0]?.data?.isTblHeader;\n  }\n\n  static isColumnHeader(table: Table) {\n    return !!table.data?.isColumnHeader;\n  }\n\n  static isValidTable(maybeTable: any): maybeTable is Table {\n    const { colsWidth } = maybeTable.data || {};\n    return this.isTable(maybeTable)\n      && Array.isArray(colsWidth)\n      && !!colsWidth.length\n      && !!maybeTable.nodes?.length\n      && !(\n        maybeTable.nodes.length === 1 &&\n        Text.isText(maybeTable.nodes[0])\n      );\n  }\n}\n"],"file":"index.js"}