{"version":3,"sources":["../../../../src/mo/models/tableCell.ts"],"names":["Block","ELEMENT_TYPE_TABLE_CELL","TableCell","create","properties","Error","isTableCell","type","TYPE","maybeTableCell","isBlock","isValidTableCell","nodes","length"],"mappings":";;AAAA,SAASA,KAAT,QAAqC,oBAArC;AAEA,SAASC,uBAAT;;IA0BqBC,S;;;;;;;YAGZC,M,GAAP,gBACEC,UADF,EAEE;AACA,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,QAAIH,SAAS,CAACI,WAAV,CAAsBF,UAAtB,CAAJ,EAAuC;AACrC,aAAOA,UAAP;AACD;;AACD,kBAAaD,MAAb,yBACKC,UADL;AAEEG,MAAAA,IAAI,EAAEL,SAAS,CAACM;AAFlB;AAID,G;;YAEMF,W,GAAP,qBAAmBG,cAAnB,EAAqE;AACnE,WAAOT,KAAK,CAACU,OAAN,CAAcD,cAAd,KAAiCA,cAAc,CAACF,IAAf,KAAwBL,SAAS,CAACM,IAA1E;AACD,G;;YAEMG,gB,GAAP,0BAAwBF,cAAxB,EAA0E;AACxE,WAAO,KAAKH,WAAL,CAAiBG,cAAjB,KACFA,cAAc,CAACG,KAAf,CAAqBC,MAArB,IAA+B,CAD7B,IAEFb,KAAK,CAACU,OAAN,CAAcD,cAAc,CAACG,KAAf,CAAqB,CAArB,CAAd,CAFL;AAGD,G;;;EA1BoCZ,K;;AAAlBE,S,CACZM,I,GAAOP,uB;SADKC,S","sourcesContent":["import { Block, BlockChildren } from '@ali/4ever-cangjie';\nimport type { MoInterfaces } from '@ali/4ever-cangjie';\nimport { ELEMENT_TYPE_TABLE_CELL } from '../../utils/meta';\n\ninterface TableCellData {\n  readonly width?: number;\n  readonly colSpan?: number;\n  readonly rowSpan?: number;\n  bdr?: MoInterfaces.TableBorder.default;\n  fill?: string;\n  readonly color?: string;\n  readonly border?: string;\n  readonly vAlign?: string;\n  readonly hidden?: boolean;\n  uuid?: string;\n  cellMar?: Record<string, any>;\n  shd?: {\n    fill?: string;\n  };\n}\n\ntype TableCellChildren = Block[];\n\ninterface TableCellProperties<D = TableCellData, N extends BlockChildren = TableCellChildren> {\n  data?: D;\n  nodes?: N;\n}\n\nexport default class TableCell extends Block<TableCellData, TableCellChildren> {\n  static TYPE = ELEMENT_TYPE_TABLE_CELL;\n\n  static create<SD = TableCellData, SN extends BlockChildren = TableCellChildren>(\n    properties: TableCell | TableCellProperties<SD, SN> | string,\n  ) {\n    if (typeof properties === 'string') {\n      throw new Error('`TableCell.create` does not accept string');\n    }\n    if (TableCell.isTableCell(properties)) {\n      return properties as Block<SD, SN>;\n    }\n    return super.create<SD, SN>({\n      ...properties,\n      type: TableCell.TYPE,\n    });\n  }\n\n  static isTableCell(maybeTableCell: any): maybeTableCell is TableCell {\n    return Block.isBlock(maybeTableCell) && maybeTableCell.type === TableCell.TYPE;\n  }\n\n  static isValidTableCell(maybeTableCell: any): maybeTableCell is TableCell {\n    return this.isTableCell(maybeTableCell)\n      && maybeTableCell.nodes.length >= 1\n      && Block.isBlock(maybeTableCell.nodes[0]);\n  }\n}\n"],"file":"tableCell.js"}