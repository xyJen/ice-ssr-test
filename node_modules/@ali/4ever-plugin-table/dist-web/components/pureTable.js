import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import equal from 'fast-deep-equal';
import fastdom from 'fastdom';
import { Commands, domUtils, CangjieSelectEvent } from '@ali/4ever-cangjie';
import Table from "../mo/models";
import TableCell from "../mo/models/tableCell";
import { DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT, DEFAULT_BORDER_COLOR } from "../utils/constants";
import { convertFromPercentToPixel } from "../utils/utils/colsWidthConverter";
import selectionTrigger from "../utils/utils/selectionTrigger";
import setSelectionByTable from "../utils/utils/setSelectionByTable";
import { usePixelColsWidth, useRowIsSticky } from "../utils/hooks";
var findDOMNodeSafely = domUtils.findDOMNodeSafely;
var DELTA = 8;
var RealTable = /*#__PURE__*/styled.table(["position:relative;table-layout:fixed;border-collapse:collapse;border:1px solid ", ";"], DEFAULT_BORDER_COLOR);

var contains = function contains(root, node) {
  if (node) {
    var found = root.findDescendant(function (child) {
      return child.key === node.key;
    });

    if (found) {
      return true;
    }
  }

  return false;
};

var PureTable = /*#__PURE__*/forwardRef(function (props, fwdRef) {
  var _node$data2;

  var children = props.children,
      left = props.left,
      node = props.node,
      isMobile = props.isMobile,
      controller = props.controller,
      forceRenderPercentColWidthForAutoFit = props.forceRenderPercentColWidthForAutoFit;

  var _usePixelColsWidth = usePixelColsWidth(),
      colsWidth = _usePixelColsWidth[0];

  var isValidColsWidth = colsWidth.length > 0;
  var isAutofit = Table.isAutofitWidth(node);
  var timerRef = React.useRef();

  var _useRowIsSticky = useRowIsSticky(),
      isSticky = _useRowIsSticky[0];

  var ref = React.useRef(null);
  React.useEffect(function () {
    if (typeof fwdRef === 'function') {
      fwdRef(ref.current);
    } else if (fwdRef) {
      fwdRef.current = ref.current;
    }
  }, [ref, fwdRef]);
  var style = React.useMemo(function () {
    var tableWidth;

    if (isAutofit && forceRenderPercentColWidthForAutoFit) {
      tableWidth = '100%';
    } else if (isAutofit && isMobile) {
      tableWidth = DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT;
    } else if (isValidColsWidth) {
      tableWidth = colsWidth == null ? void 0 : colsWidth.reduce(function (sum, w) {
        return sum + w;
      }, 0);
    } else if (isAutofit) {
      tableWidth = '100%';
    } else {
      var _node$data;

      tableWidth = (((_node$data = node.data) == null ? void 0 : _node$data.colsWidth) || []).reduce(function (sum, w) {
        return sum + w;
      }, 0);
    }

    return {
      width: tableWidth,
      left: (left || 0) + "px",
      border: isSticky ? "1px solid " + DEFAULT_BORDER_COLOR : 'unset',
      borderTopWidth: isSticky ? '0' : 'unset'
    };
  }, [isAutofit, forceRenderPercentColWidthForAutoFit, isMobile, isValidColsWidth, left, isSticky, colsWidth, (_node$data2 = node.data) == null ? void 0 : _node$data2.colsWidth]);
  var renderColsWidth = React.useMemo(function () {
    var _node$data3;

    if (isAutofit && forceRenderPercentColWidthForAutoFit) {
      return convertFromPercentToPixel(node, 100).map(function (w) {
        return w + "%";
      });
    }

    if (isAutofit && isMobile) {
      return convertFromPercentToPixel(node, DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT);
    }

    if (isValidColsWidth) {
      return colsWidth;
    }

    if (isAutofit) {
      return convertFromPercentToPixel(node, 100).map(function (w) {
        return w + "%";
      });
    }

    return ((_node$data3 = node.data) == null ? void 0 : _node$data3.colsWidth) || [];
  }, [isAutofit, forceRenderPercentColWidthForAutoFit, isMobile, isValidColsWidth, node, colsWidth]);
  var prevRenderColsWidth = React.useRef([]); // @ts-ignore

  React.useEffect(function () {
    if (!isAutofit || equal(prevRenderColsWidth.current, renderColsWidth)) return function () {};
    prevRenderColsWidth.current = renderColsWidth;
    var _controller$value = controller.value,
        selection = _controller$value.selection,
        document = _controller$value.document;
    var selectionNode = selection.getClosestNode(document); // 不能用 node.contains(xxx)，始终为 false

    if (selectionNode && contains(node, selectionNode)) {
      controller.setScrollType('maintain');
      controller.command(Commands.select, selection.merge({
        data: _extends({}, selection.data, {
          r: Math.random()
        })
      }));
      clearTimeout(timerRef.current);
      timerRef.current = setTimeout(function () {
        controller.setScrollType('toSelection');
      });
      return function () {
        clearTimeout(timerRef.current);
        timerRef.current = setTimeout(function () {
          controller.setScrollType('toSelection');
        });
      };
    }
  }, [renderColsWidth, controller, node, isAutofit]);
  React.useEffect(function () {
    return function () {
      clearTimeout(timerRef.current);
      controller.setScrollType('toSelection');
    };
  });

  var handleMouseMove = function handleMouseMove(e) {
    if (!ref.current) return;
    var clientX = e.clientX,
        clientY = e.clientY;
    var trigger = selectionTrigger.get();

    if (trigger === 'selecting') {
      var tableSelection = controller.query('tableSelection');

      if (tableSelection) {
        return;
      }

      var _controller$value2 = controller.value,
          selection = _controller$value2.selection,
          document = _controller$value2.document;

      var _selection$convertToT = selection.convertToTextPoints(document),
          anchor = _selection$convertToT.anchor,
          focus = _selection$convertToT.focus;

      var startTd = document.getClosest(anchor.key, TableCell.isTableCell);
      var endTd = document.getClosest(focus.key, TableCell.isTableCell);
      if (!startTd || !endTd || startTd.key !== endTd.key || startTd.data.hidden) return;
      var tdDOM = findDOMNodeSafely(startTd == null ? void 0 : startTd.key, ref.current);
      if (!tdDOM) return;
      fastdom.measure(function () {
        var tdRect = tdDOM.getBoundingClientRect();
        var l = tdRect.left,
            right = tdRect.right,
            top = tdRect.top,
            bottom = tdRect.bottom;
        if (tdRect.height === 0) return;
        var isInCellEdge = !(clientX > l + DELTA && clientX < right - DELTA && clientY > top + DELTA && clientY < bottom - DELTA);

        if (isInCellEdge) {
          controller.run('onCangjieSelect', CangjieSelectEvent({
            selection: setSelectionByTable(selection, -1),
            trigger: trigger
          }));
        }
      });
    }
  };

  var handleMouseUp = function handleMouseUp() {
    var _ref$current;

    (_ref$current = ref.current) == null ? void 0 : _ref$current.removeEventListener('mousemove', handleMouseMove);
  };

  var handleMouseLeave = function handleMouseLeave() {
    var _ref$current2, _ref$current3, _ref$current4;

    (_ref$current2 = ref.current) == null ? void 0 : _ref$current2.removeEventListener('mousemove', handleMouseMove);
    (_ref$current3 = ref.current) == null ? void 0 : _ref$current3.removeEventListener('mouseup', handleMouseUp);
    (_ref$current4 = ref.current) == null ? void 0 : _ref$current4.removeEventListener('mouseleave', handleMouseLeave);
  };

  var handleMouseDown = function handleMouseDown() {
    var _ref$current5, _ref$current6, _ref$current7;

    (_ref$current5 = ref.current) == null ? void 0 : _ref$current5.addEventListener('mousemove', handleMouseMove);
    (_ref$current6 = ref.current) == null ? void 0 : _ref$current6.addEventListener('mouseup', handleMouseUp);
    (_ref$current7 = ref.current) == null ? void 0 : _ref$current7.addEventListener('mouseleave', handleMouseLeave);
  };

  return /*#__PURE__*/_createElement(RealTable, {
    ref: ref,
    style: style,
    onMouseDown: handleMouseDown
  }, /*#__PURE__*/_createElement("colgroup", null, renderColsWidth == null ? void 0 : renderColsWidth.map(function (colWidth, i) {
    return /*#__PURE__*/_createElement("col", {
      key: i,
      width: colWidth
    });
  })), /*#__PURE__*/_createElement("tbody", null, children));
});
export default PureTable;
//# sourceMappingURL=pureTable.js.map