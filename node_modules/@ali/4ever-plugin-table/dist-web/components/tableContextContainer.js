import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useZoom, useScrollableContainer } from '@ali/4ever-cangjie';
import TableRow from "../mo/models/tableRow";
import { RowIsStickyContext, ScrollableContainerRect } from "../utils/hooks";
import useResizeObserver from "../utils/utils/useResizeObserver";

var TableContextContainer = function TableContextContainer(props) {
  var _table$nodes;

  var controller = props.controller,
      table = props.table,
      enableHeaderSticky = props.enableHeaderSticky,
      children = props.children;
  var scale = useZoom();
  var scrollContainer = useScrollableContainer();

  var _React$useState = React.useState({
    top: 0
  }),
      scrollContainerRect = _React$useState[0],
      setScrollContainerRect = _React$useState[1];

  var firstRow = (_table$nodes = table.nodes) == null ? void 0 : _table$nodes[0];
  var shouldSticky = TableRow.shouldSticky(firstRow);
  var updateScrollContainerTop = React.useCallback(function (rect) {
    var actualTop = rect.top;

    if (scrollContainerRect.top !== actualTop) {
      setScrollContainerRect(function (r) {
        return _extends({}, r, {
          top: actualTop
        });
      });
    }
  }, [scrollContainerRect.top]);
  useResizeObserver(shouldSticky ? scrollContainer : null, updateScrollContainerTop);

  var _React$useState2 = React.useState(false),
      isSticky = _React$useState2[0],
      setIsSticky = _React$useState2[1];
  /**
   * 以下场景吸顶时，样式存在问题，暂时不支持
   * 1. 缩放
   * 2. 表格在表格 or 分栏 内
   * 3. 表格在高亮块内
   */


  var disableSticky = scale !== 1 || controller.query('isNodeInTable', table) || controller.query('isNodeInColorBlocks', table);
  var updateIsSticky = React.useCallback(function (sticky) {
    setIsSticky(sticky && !disableSticky && !!enableHeaderSticky && enableHeaderSticky());
  }, [disableSticky, enableHeaderSticky]);
  var isStickyContext = React.useMemo(function () {
    return [isSticky, updateIsSticky];
  }, [isSticky, updateIsSticky]);
  var scrollContainerRectValue = React.useMemo(function () {
    return [scrollContainerRect, setScrollContainerRect];
  }, [scrollContainerRect]);
  return /*#__PURE__*/_createElement(ScrollableContainerRect.Provider, {
    value: scrollContainerRectValue
  }, /*#__PURE__*/_createElement(RowIsStickyContext.Provider, {
    value: isStickyContext
  }, children));
};

export default TableContextContainer;
//# sourceMappingURL=tableContextContainer.js.map