import { Commands } from '@ali/4ever-cangjie';
import { isTableCell } from "../types";
import isSelectionInTableCell from "../utils/isSelectionInTableCell";
import { moveToStartOfCell, moveToStartOfNextSibling } from "../utils/selectionCommands";
import setSelectionByTable from "../../utils/utils/setSelectionByTable";
export default function onArrowRight(event, controller, next) {
  var value = controller.value;
  var selection = value.selection,
      document = value.document,
      startText = value.startText;
  var tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    event.preventDefault();
    var table = document.getNode(tableSelection.key);

    if (!table) {
      return;
    }

    if (controller.query('isSelectWholeTable', {
      node: table
    })) {
      return moveToStartOfNextSibling(controller, table);
    }

    var endColIndex = tableSelection.endColIndex,
        startRowIndex = tableSelection.startRowIndex;
    return moveToStartOfCell(controller, table, startRowIndex, endColIndex + 1);
  }

  if (!isSelectionInTableCell(value)) return next();
  var cell = document.getClosest(startText == null ? void 0 : startText.key, isTableCell); // document.getClosest 有可能返回空

  if (!cell) return next();
  if (!selection.getStart(document).isAtEndOfNode(cell)) return next();
  var currentCell = cell;

  do {
    var nextCell = document.getNextSibling(currentCell.key);

    if (!nextCell) {
      var currentRow = document.getParent(currentCell.key);
      var nextRow = document.getNextSibling(currentRow.key);
      if (!nextRow) return next();
      nextCell = nextRow.nodes[0];
    } // @ts-ignore


    currentCell = nextCell;
  } while (currentCell.data.hidden || false); // 阻止 Cangjie 默认事件


  event.preventDefault();
  var s = selection.moveToStartOfNode(currentCell, controller);
  return controller.command(Commands.select, setSelectionByTable(s, false));
}
//# sourceMappingURL=onArrowRight.js.map