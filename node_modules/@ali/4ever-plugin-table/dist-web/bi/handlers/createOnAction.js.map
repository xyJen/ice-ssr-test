{"version":3,"sources":["../../../../src/bi/handlers/createOnAction.ts"],"names":["Commands","ContextMenu","DRAG_TYPE","TableCell","isActions","resizeTableWidth","resizeTableWidthFitContainer","setTableAutofitWidth","resizeTableHeight","resizeColsWidth","resizeRowsHeight","emptySelections","mergeCells","splitCell","deleteTable","insertTable","insertRow","moveRows","insertRowBySelections","insertCol","moveCols","deleteRows","deleteCols","selectTableSelection","selectCols","selectRows","selectWholeTable","setCellsData","setTableBorder","createEmptyParagraph","onSelectAll","toggleRowHeader","toggleColHeader","commands","setTableMinColsWidthData","adjustColsWidth","createOnAction","config","onAction","action","controller","next","isDropFragmentAction","isActionFactory","enableAutofitWidth","enableHeader","setTableHeaderStyle","disableDefaultAutofitWidth","isTableResizeTableWidthAction","payload","node","delta","maxWidth","isTableResizeTableWidthFitContainerAction","containerWidth","isTablesetTableAutofitWidthEnableAction","isTableSetTableAutofitWidthDisableAction","isTableResizeTableHeightAction","rowsHeight","isTableResizeTableColWidthAction","colIndex","isTableSetTableRowHeightAction","newHeight","isTableSetTableCellVAlignAction","selection","vAlign","isTableSetTableCellFillAction","fill","isTableSetTableBorderAction","borderSetType","color","sz","type","isTableEmptySelectionAction","isTableMergeCellsAction","isTableSplitTableCellAction","isTableDeleteTableAction","isTableInsertTableAction","rowSize","colSize","defaultAutofit","defaultHeader","isTableInsertRowAction","isTableMoveRowsAction","targetIndex","originIndexRange","isTableInsertRowBySelectionsAction","isTableInsertColAction","colWidth","triggerColIndex","isTableMoveColsAction","isTableDeleteRowsAction","isTableDeleteColsAction","isTableSelectTableSelectionAction","isTableSelectTableColsAction","startIndex","endIndex","isTableSelectTableRowsAction","isTableSelectTableAction","isTableSetTableMinColsWidthDataAction","data","isTableAdjustColsWidthAction","isTableBlurAction","command","blur","dragFragment","fragment","blocks","Array","isArray","result","forEach","n","parentKey","parent","value","document","getNode","isTableCell","isValidTableCell","insertNodeByKey","ACTION_SELECT_ALL","isTableSetTableRowHeaderAction","isTableRemoveTableRowHeaderAction","isTableSetTableColHeaderAction","isTableRemoveTableColHeaderAction"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport { Controller, Commands, ContextMenu, Action } from '@ali/4ever-cangjie';\nimport { DRAG_TYPE } from '@ali/4ever-plugin-draggable';\nimport TableCell from '../../mo/models/tableCell';\nimport { isActions } from '../actions';\nimport resizeTableWidth from '../commands/resizeTableWidth';\nimport resizeTableWidthFitContainer from '../commands/resizeTableWidthFitContainer';\nimport setTableAutofitWidth from '../commands/setTableAutofitWidth';\nimport resizeTableHeight from '../commands/resizeTableHeight';\nimport resizeColsWidth from '../commands/resizeColsWidth';\nimport resizeRowsHeight from '../commands/resizeRowsHeight';\nimport emptySelections from '../commands/emptyTableSelection';\nimport mergeCells from '../commands/mergeCells';\nimport splitCell from '../commands/splitCell';\nimport deleteTable from '../commands/deleteTable';\nimport insertTable from '../commands/insertTable';\nimport insertRow from '../commands/insertRow';\nimport moveRows from '../commands/moveRows';\nimport insertRowBySelections from '../commands/insertRowBySelections';\nimport insertCol from '../commands/insertCol';\nimport moveCols from '../commands/moveCols';\nimport deleteRows from '../commands/deleteRows';\nimport deleteCols from '../commands/deleteCols';\nimport selectTableSelection from '../commands/selectTableSelection';\nimport selectCols from '../commands/selectCols';\nimport selectRows from '../commands/selectRows';\nimport selectWholeTable from '../commands/selectWholeTable';\nimport setCellsData from '../commands/setCellsData';\nimport setTableBorder from '../commands/setTableBorder';\nimport { createEmptyParagraph } from '../utils';\nimport onSelectAll from './onSelectAll';\nimport toggleRowHeader from '../commands/toggleRowHeader';\nimport toggleColHeader from '../commands/toggleColHeader';\nimport { TableConfig } from '../types';\nimport * as commands from '../../utils/commands';\n\nconst { setTableMinColsWidthData, adjustColsWidth } = commands;\n\nexport default function createOnAction(config: TableConfig) {\n  return function onAction(action: Action, controller: Controller, next) {\n    const isDropFragmentAction = controller.isActionFactory('isDropFragmentAction');\n    const {\n      enableAutofitWidth,\n      enableHeader,\n      setTableHeaderStyle,\n      disableDefaultAutofitWidth,\n    } = config;\n    if (isActions.isTableResizeTableWidthAction(action)) {\n      const { node, delta, maxWidth } = action.payload;\n      return resizeTableWidth(controller, node, delta, maxWidth);\n    }\n    if (isActions.isTableResizeTableWidthFitContainerAction(action)) {\n      const { node, containerWidth } = action.payload;\n      return resizeTableWidthFitContainer(controller, node, containerWidth);\n    }\n    if (isActions.isTablesetTableAutofitWidthEnableAction(action)) {\n      const { node, containerWidth } = action.payload;\n      return setTableAutofitWidth(controller, node, true, containerWidth);\n    }\n    if (isActions.isTableSetTableAutofitWidthDisableAction(action)) {\n      const { node } = action.payload;\n      return setTableAutofitWidth(controller, node, false);\n    }\n    if (isActions.isTableResizeTableHeightAction(action)) {\n      const { node, rowsHeight, delta } = action.payload;\n      return resizeTableHeight(controller, node, rowsHeight, delta);\n    }\n    if (isActions.isTableResizeTableColWidthAction(action)) {\n      const { node, colIndex, delta } = action.payload;\n      return resizeColsWidth(controller, {\n        node,\n        colIndex,\n        delta,\n      });\n    }\n    if (isActions.isTableSetTableRowHeightAction(action)) {\n      // 原来是node为table，然后传rowIndex\n      // 现在改为node为tableRow，table通过tableRow找\n      const { node, newHeight } = action.payload;\n      return resizeRowsHeight(controller, node, newHeight);\n    }\n    if (isActions.isTableSetTableCellVAlignAction(action)) {\n      const { node, selection, vAlign } = action.payload;\n      return setCellsData(controller, node, selection, 'vAlign', vAlign);\n    }\n    if (isActions.isTableSetTableCellFillAction(action)) {\n      const { node, selection, fill } = action.payload;\n      return setCellsData(controller, node, selection, 'fill', fill);\n    }\n    if (isActions.isTableSetTableBorderAction(action)) {\n      const { node, selection, borderSetType, color, sz, type } = action.payload;\n      return setTableBorder(controller, node, selection, borderSetType, color, sz, type);\n    }\n    if (isActions.isTableEmptySelectionAction(action)) {\n      const { node } = action.payload;\n      return emptySelections(controller, node);\n    }\n    if (isActions.isTableMergeCellsAction(action)) {\n      const { node } = action.payload;\n      return mergeCells(controller, node);\n    }\n    if (isActions.isTableSplitTableCellAction(action)) {\n      const { node } = action.payload;\n      return splitCell(controller, node);\n    }\n    if (isActions.isTableDeleteTableAction(action)) {\n      const { node } = action.payload;\n      return deleteTable(controller, node);\n    }\n    if (isActions.isTableInsertTableAction(action)) {\n      const { rowSize, colSize, containerWidth } = action.payload;\n      const defaultAutofit = enableAutofitWidth?.() && !disableDefaultAutofitWidth?.();\n      const defaultHeader = enableHeader?.();\n      return insertTable(\n        controller,\n        {\n          rowSize,\n          colSize,\n          containerWidth,\n          defaultAutofit,\n          defaultHeader,\n          setTableHeaderStyle,\n        },\n      );\n    }\n    if (isActions.isTableInsertRowAction(action)) {\n      const { node, type } = action.payload;\n      return insertRow(controller, node, type);\n    }\n    if (isActions.isTableMoveRowsAction(action)) {\n      const { node, targetIndex, originIndexRange } = action.payload;\n      return moveRows(controller, node, originIndexRange, targetIndex);\n    }\n    if (isActions.isTableInsertRowBySelectionsAction(action)) {\n      const { node, type } = action.payload;\n      return insertRowBySelections(controller, node, type);\n    }\n    if (isActions.isTableInsertColAction(action)) {\n      const { node, colIndex, colWidth, triggerColIndex, containerWidth } = action.payload;\n      return insertCol(controller, node, colIndex, triggerColIndex, colWidth, containerWidth);\n    }\n    if (isActions.isTableMoveColsAction(action)) {\n      const { node, targetIndex, originIndexRange } = action.payload;\n      return moveCols(controller, node, originIndexRange, targetIndex);\n    }\n    if (isActions.isTableDeleteRowsAction(action)) {\n      const { node } = action.payload;\n      return deleteRows(controller, node);\n    }\n    if (isActions.isTableDeleteColsAction(action)) {\n      const { node } = action.payload;\n      return deleteCols(controller, node);\n    }\n    if (isActions.isTableSelectTableSelectionAction(action)) {\n      const { node, selection } = action.payload;\n      return selectTableSelection(controller, node, selection);\n    }\n    if (isActions.isTableSelectTableColsAction(action)) {\n      const { node, startIndex, endIndex } = action.payload;\n      return selectCols(controller, node, startIndex, endIndex);\n    }\n    if (isActions.isTableSelectTableRowsAction(action)) {\n      const { node, startIndex, endIndex } = action.payload;\n      return selectRows(controller, node, startIndex, endIndex);\n    }\n    if (isActions.isTableSelectTableAction(action)) {\n      const { node } = action.payload;\n      return selectWholeTable(controller, node);\n    }\n    if (isActions.isTableSetTableMinColsWidthDataAction(action)) {\n      const { data } = action.payload;\n      return setTableMinColsWidthData(controller, data);\n    }\n    if (isActions.isTableAdjustColsWidthAction(action)) {\n      const { node, containerWidth } = action.payload;\n      return adjustColsWidth(controller, node, containerWidth);\n    }\n    if (isActions.isTableBlurAction(action)) {\n      return controller.command(Commands.blur);\n    }\n    if (isDropFragmentAction?.(action)) {\n      const { dragFragment } = action.payload!;\n      if (dragFragment) {\n        const { fragment, type } = dragFragment;\n        if (type === DRAG_TYPE.blocks && Array.isArray(fragment)) {\n          const result = next();\n          fragment.forEach((n) => {\n            const { parentKey } = n;\n            const parent = controller.value.document.getNode(parentKey);\n            if (\n              TableCell.isTableCell(parent)\n              && !TableCell.isValidTableCell(parent)\n            ) {\n              controller.command(Commands.insertNodeByKey, parentKey, 0, createEmptyParagraph());\n            }\n          });\n          return result;\n        }\n      }\n      return next();\n    }\n\n    if (action.type === ContextMenu.ACTION_SELECT_ALL) {\n      return onSelectAll(controller, next);\n    }\n\n    if (isActions.isTableSetTableRowHeaderAction(action)) {\n      const { node } = action.payload;\n      return toggleRowHeader(controller, node);\n    }\n\n    if (isActions.isTableRemoveTableRowHeaderAction(action)) {\n      const { node } = action.payload;\n      return toggleRowHeader(controller, node);\n    }\n\n    if (isActions.isTableSetTableColHeaderAction(action)) {\n      const { node } = action.payload;\n      return toggleColHeader(controller, node);\n    }\n\n    if (isActions.isTableRemoveTableColHeaderAction(action)) {\n      const { node } = action.payload;\n      return toggleColHeader(controller, node);\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnAction.js"}