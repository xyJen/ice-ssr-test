{"version":3,"sources":["../../../../src/bi/handlers/createOnCangjieCopy.ts"],"names":["constants","transferUtils","Commands","Table","generateClipTableFromTableSelection","transformTablesToCompatibleLegacy","setSelectionByTable","isSingleTableCell","normalizeClipboardTable","MIME_TYPES","createOnCangjieCopy","isMobile","onCangjieCopy","event","controller","next","clipboardData","value","document","selection","tableSelection","query","encodedFragment","getData","FRAGMENT","fragment","decodeFragment","setClipboardData","setData","encodeFragment","tablePath","assertPath","key","table","assertNodeByPath","isTable","noTableSelection","command","select","shouldTransfrom","newFragment"],"mappings":"AAAA,SAEEA,SAFF,EAIEC,aAJF,EAKEC,QALF,QAMO,oBANP;AAOA,OAAOC,KAAP;AACA,OAAOC,mCAAP;AACA,OAAOC,iCAAP;AACA,OAAOC,mBAAP;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,uBAAT;IAEQC,U,GAAeT,S,CAAfS,U;AAER,eAAe,SAASC,mBAAT,CAA6BC,QAA7B,EAA+C;AAAA,MAAlBA,QAAkB;AAAlBA,IAAAA,QAAkB,GAAP,KAAO;AAAA;;AAC5D,SAAO,SAASC,aAAT,CACLC,KADK,EAELC,UAFK,EAGLC,IAHK,EAIL;AACA,QAAI,CAACF,KAAK,CAACG,aAAX,EAA0B;AACxB,aAAOD,IAAI,EAAX;AACD;;AAHD,4BAKgCD,UAAU,CAACG,KAL3C;AAAA,QAKQC,QALR,qBAKQA,QALR;AAAA,QAKkBC,SALlB,qBAKkBA,SALlB;AAMA,QAAMC,cAAc,GAAGN,UAAU,CAACO,KAAX,CAAiB,gBAAjB,CAAvB;AACA,QAAMC,eAAe,GAAGT,KAAK,CAACG,aAAN,CAAoBO,OAApB,CAA4Bd,UAAU,CAACe,QAAvC,CAAxB;AACA,QAAIC,QAAQ,GAAGxB,aAAa,CAACyB,cAAd,CAA6BJ,eAA7B,CAAf;;AACA,QAAI,CAACF,cAAL,EAAqB;AACnB,UAAIK,QAAQ,IAAIlB,iBAAiB,CAACkB,QAAD,CAAjC,EAA6C;AAC3C,eAAOV,IAAI,CACTF,KAAK,CAACc,gBAAN,CACEd,KAAK,CAACG,aAAN,CAAoBY,OAApB,CACEnB,UAAU,CAACe,QADb,EAEEvB,aAAa,CAAC4B,cAAd,CAA6BrB,uBAAuB,CAACiB,QAAD,CAApD,CAFF,CADF,CADS,CAAX;AAQD;AACF,KAXD,MAWO;AACL,UAAMK,SAAS,GAAGZ,QAAQ,CAACa,UAAT,CAAoBX,cAAc,CAACY,GAAnC,CAAlB;AACA,UAAMC,KAAK,GAAGf,QAAQ,CAACgB,gBAAT,CAA0BJ,SAA1B,CAAd;;AACA,UAAI3B,KAAK,CAACgC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBR,QAAAA,QAAQ,GAAGrB,mCAAmC,CAAC6B,KAAD,EAAQb,cAAR,CAA9C;AACD;AACF;;AAED,QAAIT,QAAJ,EAAc;AACZ,UAAMyB,gBAAgB,GAAG9B,mBAAmB,CAACa,SAAD,EAAY,KAAZ,CAA5C;AACAL,MAAAA,UAAU,CAACuB,OAAX,CAAmBnC,QAAQ,CAACoC,MAA5B,EAAoCF,gBAApC;AACD;;AAED,QAAIX,QAAJ,EAAc;AAAA,kCAIRpB,iCAAiC,CAACa,QAAD,EAAWO,QAAX,EAAqBd,QAArB,CAJzB;AAAA,UAEV4B,eAFU,yBAEVA,eAFU;AAAA,UAGAC,WAHA,yBAGVf,QAHU;;AAMZ,UAAIc,eAAe,IAAInB,cAAvB,EAAuC;AACrC,eAAOL,IAAI,CACTF,KAAK,CAACc,gBAAN,CACEd,KAAK,CAACG,aAAN,CAAoBY,OAApB,CACEnB,UAAU,CAACe,QADb,EAEEvB,aAAa,CAAC4B,cAAd,CAA6BW,WAA7B,CAFF,CADF,CADS,CAAX;AAQD;AACF;;AAED,WAAOzB,IAAI,EAAX;AACD,GAxDD;AAyDD","sourcesContent":["import {\n  CangjieClipboardEvent,\n  constants,\n  Controller,\n  transferUtils,\n  Commands,\n} from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport generateClipTableFromTableSelection from '../utils/generateClipTableFromTableSelection';\nimport transformTablesToCompatibleLegacy from '../../utils/utils/transformTablesToCompatibleLegacy';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\nimport { isSingleTableCell } from '@ali/4ever-utils';\nimport { normalizeClipboardTable } from '../../utils/utils/normalizeClipboardTable';\n\nconst { MIME_TYPES } = constants;\n\nexport default function createOnCangjieCopy(isMobile = false) {\n  return function onCangjieCopy(\n    event: CangjieClipboardEvent,\n    controller: Controller,\n    next,\n  ) {\n    if (!event.clipboardData) {\n      return next();\n    }\n\n    const { document, selection } = controller.value;\n    const tableSelection = controller.query('tableSelection');\n    const encodedFragment = event.clipboardData.getData(MIME_TYPES.FRAGMENT);\n    let fragment = transferUtils.decodeFragment(encodedFragment);\n    if (!tableSelection) {\n      if (fragment && isSingleTableCell(fragment)) {\n        return next(\n          event.setClipboardData(\n            event.clipboardData.setData(\n              MIME_TYPES.FRAGMENT,\n              transferUtils.encodeFragment(normalizeClipboardTable(fragment)),\n            ),\n          ),\n        );\n      }\n    } else {\n      const tablePath = document.assertPath(tableSelection.key);\n      const table = document.assertNodeByPath(tablePath) as Table;\n      if (Table.isTable(table)) {\n        fragment = generateClipTableFromTableSelection(table, tableSelection);\n      }\n    }\n\n    if (isMobile) {\n      const noTableSelection = setSelectionByTable(selection, false);\n      controller.command(Commands.select, noTableSelection);\n    }\n\n    if (fragment) {\n      const {\n        shouldTransfrom,\n        fragment: newFragment,\n      } = transformTablesToCompatibleLegacy(document, fragment, isMobile);\n\n      if (shouldTransfrom || tableSelection) {\n        return next(\n          event.setClipboardData(\n            event.clipboardData.setData(\n              MIME_TYPES.FRAGMENT,\n              transferUtils.encodeFragment(newFragment),\n            ),\n          ),\n        );\n      }\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnCangjieCopy.js"}