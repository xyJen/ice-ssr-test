{"version":3,"sources":["../../../../src/bi/handlers/createOnCangjieCut.ts"],"names":["Block","Commands","constants","transferUtils","Table","TableCell","isSelectWholeTable","deleteTable","emptyTableSelection","generateClipTableFromTableSelection","createEmptyParagraph","setSelectionByTable","transformTablesToCompatibleLegacy","isSingleTableCell","normalizeClipboardTable","MIME_TYPES","createOnCangjieCut","isMobile","onCangjieCut","event","controller","next","clipboardData","value","document","selection","start","getStart","startCell","getClosest","key","isTableCell","hasVoidParent","nodes","length","targetCellKey","targetCell","getNode","isBlock","withoutNormalizing","notBlockNode","command","removeNodeByKey","insertNodeByKey","focusCell","s","moveToStartOfNode","select","insertBlock","encodedFragment","getData","FRAGMENT","fragment","decodeFragment","tableSelection","query","setClipboardData","setData","encodeFragment","tablePath","assertPath","table","assertNodeByPath","isTable","node","run","shouldTransfrom","newFragment"],"mappings":"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","sourcesContent":["import {\n  Block,\n  Commands,\n  constants,\n  transferUtils,\n} from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport TableCell from '../../mo/models/tableCell';\nimport isSelectWholeTable from '../queries/isSelectWholeTable';\nimport { deleteTable, emptyTableSelection } from '../actions';\nimport generateClipTableFromTableSelection from '../utils/generateClipTableFromTableSelection';\nimport { createEmptyParagraph } from '../utils';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\nimport transformTablesToCompatibleLegacy from '../../utils/utils/transformTablesToCompatibleLegacy';\nimport { isSingleTableCell } from '@ali/4ever-utils';\nimport { normalizeClipboardTable } from '../../utils/utils/normalizeClipboardTable';\n\nconst { MIME_TYPES } = constants;\n\nexport default function createOnCangjieCut(isMobile = false) {\n  return function onCangjieCut(event, controller, next) {\n    if (!event.clipboardData) {\n      return next();\n    }\n\n    const { value } = controller;\n    const { document, selection } = value;\n\n    const start = selection.getStart(document);\n    const startCell = document.getClosest(\n      start.key,\n      TableCell.isTableCell,\n    ) as TableCell;\n    if (startCell) {\n      // 当单元格内只有一个节点且类型为 block void 时\n      // 剪切该节点导致单元格内无 block 节点，单元格损坏\n      // fix：在剪切后插入空段落并使光标 focus 在单元格内\n      if (\n        document.hasVoidParent(start.key, controller) &&\n        startCell.nodes.length === 1\n      ) {\n        next();\n        const targetCellKey = startCell.key;\n        const targetCell = controller.value.document.getNode(\n          targetCellKey,\n        ) as TableCell;\n        if (!Block.isBlock(targetCell.nodes[0])) {\n          return controller.withoutNormalizing(() => {\n            const notBlockNode = targetCell.nodes[0];\n            controller\n              .command(Commands.removeNodeByKey, notBlockNode.key)\n              .command(\n                Commands.insertNodeByKey,\n                targetCell.key,\n                0,\n                createEmptyParagraph(),\n              );\n            const focusCell = controller.value.document.getNode(\n              targetCellKey,\n            ) as TableCell;\n            const s = setSelectionByTable(selection, false).moveToStartOfNode(\n              focusCell,\n              controller,\n            );\n            controller.command(Commands.select, s);\n          });\n        }\n        return controller.command(Commands.insertBlock, 'paragraph');\n      }\n    }\n\n    const encodedFragment = event.clipboardData.getData(MIME_TYPES.FRAGMENT);\n    let fragment = transferUtils.decodeFragment(encodedFragment);\n    const tableSelection = controller.query('tableSelection');\n    if (!tableSelection) {\n      if (fragment && isSingleTableCell(fragment)) {\n        return next(\n          event.setClipboardData(\n            event.clipboardData.setData(\n              MIME_TYPES.FRAGMENT,\n              transferUtils.encodeFragment(normalizeClipboardTable(fragment)),\n            ),\n          ),\n        );\n      }\n    } else if (tableSelection) {\n      const tablePath = document.assertPath(tableSelection.key);\n      const table = document.assertNodeByPath(tablePath) as Table;\n      if (Table.isTable(table)) {\n        fragment = generateClipTableFromTableSelection(table, tableSelection);\n        if (controller.query(isSelectWholeTable, { node: table })) {\n          // 删除整个 table\n          controller.run('onAction', deleteTable(table));\n        } else {\n          // 清空选区\n          controller.run('onAction', emptyTableSelection(table));\n        }\n      }\n    }\n    if (fragment) {\n      const { shouldTransfrom, fragment: newFragment } =\n        transformTablesToCompatibleLegacy(document, fragment, isMobile);\n      if (shouldTransfrom || tableSelection) {\n        return next(\n          event.setClipboardData(\n            event.clipboardData.setData(\n              MIME_TYPES.FRAGMENT,\n              transferUtils.encodeFragment(newFragment),\n            ),\n          ),\n        );\n      }\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnCangjieCut.js"}