import { Block, Commands, constants, transferUtils } from '@ali/4ever-cangjie';
import Table from "../../mo/models";
import TableCell from "../../mo/models/tableCell";
import isSelectWholeTable from "../queries/isSelectWholeTable";
import { deleteTable, emptyTableSelection } from "../actions";
import generateClipTableFromTableSelection from "../utils/generateClipTableFromTableSelection";
import { createEmptyParagraph } from "../utils";
import setSelectionByTable from "../../utils/utils/setSelectionByTable";
import transformTablesToCompatibleLegacy from "../../utils/utils/transformTablesToCompatibleLegacy";
import { isSingleTableCell } from '@ali/4ever-utils';
import { normalizeClipboardTable } from "../../utils/utils/normalizeClipboardTable";
var MIME_TYPES = constants.MIME_TYPES;
export default function createOnCangjieCut(isMobile) {
  if (isMobile === void 0) {
    isMobile = false;
  }

  return function onCangjieCut(event, controller, next) {
    if (!event.clipboardData) {
      return next();
    }

    var value = controller.value;
    var document = value.document,
        selection = value.selection;
    var start = selection.getStart(document);
    var startCell = document.getClosest(start.key, TableCell.isTableCell);

    if (startCell) {
      // 当单元格内只有一个节点且类型为 block void 时
      // 剪切该节点导致单元格内无 block 节点，单元格损坏
      // fix：在剪切后插入空段落并使光标 focus 在单元格内
      if (document.hasVoidParent(start.key, controller) && startCell.nodes.length === 1) {
        next();
        var targetCellKey = startCell.key;
        var targetCell = controller.value.document.getNode(targetCellKey);

        if (!Block.isBlock(targetCell.nodes[0])) {
          return controller.withoutNormalizing(function () {
            var notBlockNode = targetCell.nodes[0];
            controller.command(Commands.removeNodeByKey, notBlockNode.key).command(Commands.insertNodeByKey, targetCell.key, 0, createEmptyParagraph());
            var focusCell = controller.value.document.getNode(targetCellKey);
            var s = setSelectionByTable(selection, false).moveToStartOfNode(focusCell, controller);
            controller.command(Commands.select, s);
          });
        }

        return controller.command(Commands.insertBlock, 'paragraph');
      }
    }

    var encodedFragment = event.clipboardData.getData(MIME_TYPES.FRAGMENT);
    var fragment = transferUtils.decodeFragment(encodedFragment);
    var tableSelection = controller.query('tableSelection');

    if (!tableSelection) {
      if (fragment && isSingleTableCell(fragment)) {
        return next(event.setClipboardData(event.clipboardData.setData(MIME_TYPES.FRAGMENT, transferUtils.encodeFragment(normalizeClipboardTable(fragment)))));
      }
    } else if (tableSelection) {
      var tablePath = document.assertPath(tableSelection.key);
      var table = document.assertNodeByPath(tablePath);

      if (Table.isTable(table)) {
        fragment = generateClipTableFromTableSelection(table, tableSelection);

        if (controller.query(isSelectWholeTable, {
          node: table
        })) {
          // 删除整个 table
          controller.run('onAction', deleteTable(table));
        } else {
          // 清空选区
          controller.run('onAction', emptyTableSelection(table));
        }
      }
    }

    if (fragment) {
      var _transformTablesToCom = transformTablesToCompatibleLegacy(document, fragment, isMobile),
          shouldTransfrom = _transformTablesToCom.shouldTransfrom,
          newFragment = _transformTablesToCom.fragment;

      if (shouldTransfrom || tableSelection) {
        return next(event.setClipboardData(event.clipboardData.setData(MIME_TYPES.FRAGMENT, transferUtils.encodeFragment(newFragment))));
      }
    }

    return next();
  };
}
//# sourceMappingURL=createOnCangjieCut.js.map