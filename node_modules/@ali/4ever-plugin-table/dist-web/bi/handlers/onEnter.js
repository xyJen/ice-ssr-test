import { Commands } from '@ali/4ever-cangjie';
import { biActions as basicActions } from '@ali/4ever-plugin-basic';
import createTableData from "../utils/createTableData";
import createTable from "../utils/createTable";
import createEmptyParagraph from "../utils/createEmptyParagraph";
import { moveToStartOfCell } from "../utils/selectionCommands";
import { setTableRowHeader } from "../actions";
var markdownRegExp = /^\|([^|]+\|){2,}$/;
export default function onEnter(event, controller, next, config) {
  var value = controller.value;
  var selection = value.selection,
      endBlock = value.endBlock;
  var enableAutofitWidth = config.enableAutofitWidth,
      enableHeader = config.enableHeader,
      setTableHeaderStyle = config.setTableHeaderStyle,
      disableDefaultAutofitWidth = config.disableDefaultAutofitWidth;

  if (selection.isCollapsed && selection.focus.isTextPoint() && (endBlock == null ? void 0 : endBlock.nodes.length) === 1 && selection.focus.isAtEndOfNode(endBlock)) {
    var matches = endBlock.text.match(markdownRegExp);

    if (matches && controller.query('canInsertTable')) {
      event.preventDefault();
      var defaultAutofit = (enableAutofitWidth == null ? void 0 : enableAutofitWidth()) && !(disableDefaultAutofitWidth != null && disableDefaultAutofitWidth());
      var defaultHeader = enableHeader == null ? void 0 : enableHeader();
      var splited = matches[0].split('|');
      var firstLineTexts = splited.slice(1, splited.length - 1).map(function (str) {
        return str.trim();
      });
      var tableData = createTableData(controller, {
        colSize: firstLineTexts.length,
        defaultAutofit: defaultAutofit
      });
      var table = createTable({
        rowSize: 2,
        colSize: firstLineTexts.length,
        data: tableData
      });
      var hasFirstRowText = false;
      var firstRow = table.nodes[0];
      var nodes = firstLineTexts.map(function (text, index) {
        if (text) {
          hasFirstRowText = true;
          return firstRow.nodes[index].merge({
            nodes: [createEmptyParagraph(text)]
          });
        }

        return firstRow.nodes[index];
      });
      var finalTable = table.merge({
        nodes: [firstRow.merge({
          nodes: nodes
        }), table.nodes[1]]
      });

      if (defaultHeader) {
        // NOTE: 需要先执行 setTableHeaderStyle
        setTableHeaderStyle == null ? void 0 : setTableHeaderStyle();
      } // 删除 md 文本并插入表格


      controller.command(Commands.removeTextByKey, selection.focus.key, 0, endBlock.text).run('onAction', basicActions.createInsertBlockWithoutExtraBlankAction({
        node: finalTable
      })); // 首行没有文字时，插入后 focus 在第二行，否则就 focus 在第一行

      moveToStartOfCell(controller, finalTable, hasFirstRowText ? 1 : 0, 0);

      if (defaultHeader) {
        controller.run('onAction', setTableRowHeader(finalTable));
      }

      return controller;
    }
  }

  return next();
}
//# sourceMappingURL=onEnter.js.map