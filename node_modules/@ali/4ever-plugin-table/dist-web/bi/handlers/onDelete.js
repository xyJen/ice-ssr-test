import { Commands, EdgePoint, Queries } from '@ali/4ever-cangjie';
import { isEmptyParagraph } from '@ali/4ever-utils';
import TableCell from "../../mo/models/tableCell";
import emptyTableSelection from "../commands/emptyTableSelection";
import deleteTable from "../commands/deleteTable";
import selectWholeTable from "../commands/selectWholeTable";
import { isKeyHotkey } from 'is-hotkey';
var isBackspaceHotKey = isKeyHotkey('backspace');
var isDeleteHotKey = isKeyHotkey('delete');
export default function onDelete(event, controller, next) {
  var value = controller.value;
  var selection = value.selection,
      document = value.document,
      startBlock = value.startBlock,
      endBlock = value.endBlock;
  var tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    event.preventDefault();
    var table = document.getNode(tableSelection.key);

    if (table) {
      var isSelectWholeTable = controller.query('isSelectWholeTable', {
        node: table
      });

      if (isSelectWholeTable) {
        // @ts-ignore
        return controller.run('onAction', deleteTable(controller, table));
      } // 删除选区内容而非其他东西


      return emptyTableSelection(controller, table);
    }

    return controller;
  }

  var edgeSelection = value.data.edgeSelection;

  if (edgeSelection) {
    var _table = document.getNode(edgeSelection.key);

    if (edgeSelection.edge === 'before' && isDeleteHotKey(event)) {
      // @ts-ignore
      return controller.run('onAction', selectWholeTable(controller, _table));
    } else if (edgeSelection.edge === 'after' && isBackspaceHotKey(event)) {
      // @ts-ignore
      return controller.run('onAction', selectWholeTable(controller, _table));
    }

    return controller;
  }

  if (!selection || selection.isExpanded) return next();
  var startCell = startBlock ? document.getClosest(startBlock.key, TableCell.isTableCell) : null;
  var isDeleteKey = isDeleteHotKey(event);
  var isBackspaceKey = isBackspaceHotKey(event);
  var anchor = selection.anchor; // 删除时，如果单元格内只有一个 void 元素，进行特殊处理

  if (startCell != null && startCell.isElement() && startCell.nodes.length === 1) {
    var parent = document.getParent(anchor.key);

    if (parent === startCell.nodes[0] && controller.query('isVoid', parent)) {
      var insertPoint = EdgePoint.create({
        key: parent.key,
        edge: EdgePoint.BEFORE
      });
      return controller.command(Commands.insertEmptyBlock, insertPoint).command(Commands.removeNodeByKey, parent.key);
    }
  }

  var endCell = endBlock ? document.getClosest(endBlock.key, TableCell.isTableCell) : null; // 左移试探，发现移到其他单元格，则会删出问题，阻止

  if (startCell && isBackspaceKey) {
    var block = document.getClosestBlock(anchor.key);

    if (selection.isCollapsed && startCell.nodes.length !== 1 && startCell.nodes[0] === block && isEmptyParagraph(block)) {
      return controller.command(Commands.removeNodeByKey, block.key).command(Commands.moveToStartOfNextBlock);
    }

    var backwardPoint = controller.query(Queries.pointAtDistance, selection.getStart(document), -1);
    var backwardCell = (backwardPoint == null ? void 0 : backwardPoint.key) && document.getClosest(backwardPoint.key, function (n) {
      return n.key === startCell.key;
    });

    if (!backwardCell) {
      event.preventDefault();
      return controller;
    }
  }

  if (endCell && isDeleteKey) {
    var _block = document.getClosestBlock(anchor.key);

    if (selection.isCollapsed && endCell.nodes.length !== 1 && endCell.nodes[0] === _block && isEmptyParagraph(_block)) {
      return controller.command(Commands.removeNodeByKey, _block.key).command(Commands.moveToStartOfNextBlock);
    }

    var forwardPoint = controller.query(Queries.pointAtDistance, selection.getEnd(document), 1);
    var forwardCell = (forwardPoint == null ? void 0 : forwardPoint.key) && document.getClosest(forwardPoint.key, function (n) {
      return n.key === endCell.key;
    });

    if (!forwardCell) {
      event.preventDefault();
      return controller;
    }
  }

  var nextBlock = document.getNextSibling(endBlock == null ? void 0 : endBlock.key);

  if (nextBlock && nextBlock.type === 'table' && selection.getEnd(document).isAtEndOfNode(endBlock) && isDeleteHotKey(event)) {
    event.preventDefault(); // @ts-ignore

    return controller.run('onAction', selectWholeTable(controller, nextBlock));
  }

  return next();
}
//# sourceMappingURL=onDelete.js.map