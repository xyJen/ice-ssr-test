import { Commands, Queries } from '@ali/4ever-cangjie';
import Table from "../../mo/models";
import TableCell from "../../mo/models/tableCell";
import isSelectionInTableCell from "../utils/isSelectionInTableCell";
import getPositionOfCell from "../utils/getPositionOfCell";
import { isTableCell } from "../types";
import { moveToStartOfCell, moveToStartOfNextSibling } from "../utils/selectionCommands";
import getNextNonHiddenCell from "../utils/getNextVisibleCell";
import setSelectionByTable from "../../utils/utils/setSelectionByTable";
export default function onArrowDown(event, controller, next) {
  var value = controller.value;
  var document = value.document,
      selection = value.selection,
      startBlock = value.startBlock;
  var tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    event.preventDefault();
    var table = document.getNode(tableSelection.key);

    if (!table) {
      return;
    }

    if (controller.query('isSelectWholeTable', {
      node: table
    })) {
      return moveToStartOfNextSibling(controller, table);
    }

    var startColIndex = tableSelection.startColIndex,
        endRowIndex = tableSelection.endRowIndex;
    return moveToStartOfCell(controller, table, endRowIndex + 1, startColIndex);
  }

  if (!isSelectionInTableCell(value)) {
    return next();
  }

  var cell = document.getClosest(startBlock.key, isTableCell);

  if (!cell) {
    return next();
  }

  var focusTable = document.getClosest(cell.key, Table.isTable);
  var position = getPositionOfCell(cell.key, focusTable);

  if (position.rowIndex === focusTable.nodes.length - 1) {
    return next();
  }

  var newSelection = controller.query(Queries.getDownsideRange);

  if (!newSelection) {
    return next();
  }

  var anchor = newSelection.anchor;
  var newFocusCell = document.getClosest(anchor.key, TableCell.isTableCell); // 向下移动后，仍是同一个 cell 则不处理

  if ((newFocusCell == null ? void 0 : newFocusCell.key) === cell.key) {
    return next();
  }

  var nextCell = getNextNonHiddenCell(document, cell, 'down');

  if (!nextCell) {
    return next();
  }

  event.preventDefault();
  var s = selection.moveToStartOfNode(nextCell, controller);
  return controller.command(Commands.select, setSelectionByTable(s, false));
}
//# sourceMappingURL=onArrowDown.js.map