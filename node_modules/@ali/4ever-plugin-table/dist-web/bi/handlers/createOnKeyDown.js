import { hotkeys } from '@ali/4ever-cangjie';
import { isKeyHotkey } from 'is-hotkey';
import { isTable } from "../types";
import onTab from "./onTab";
import onArrowUp from "./onArrowUp";
import onArrowRight from "./onArrowRight";
import onArrowDown from "./onArrowDown";
import onArrowLeft from "./onArrowLeft";
import onSelectAll from "./onSelectAll";
import onDelete from "./onDelete";
import onEmptyDelete from "./onEmptyDelete";
import onEnter from "./onEnter";
var isTabHotKey = isKeyHotkey('shift?+tab');
var isArrowUpHotKey = isKeyHotkey('up');
var isArrowRightHotKey = isKeyHotkey('right');
var isArrowDownHotKey = isKeyHotkey('down');
var isArrowLeftHotKey = isKeyHotkey('left');
var isSelectAllHotKey = isKeyHotkey('mod+a');
var isBackspaceHotKey = isKeyHotkey('backspace');
var isDeleteHotKey = isKeyHotkey('delete');
var isEnterHotKey = isKeyHotkey('enter');
/**
 * 以下事件在当前表格内容为空时执行的默认公共逻辑会导致表格样式错乱问题，因此需要在table插件中进行拦截处理
 * @param event
 * @returns
 */

var shouldPreventDelete = function shouldPreventDelete(event) {
  return hotkeys.isDeleteLineForward(event) || hotkeys.isDeleteLineBackward(event) || hotkeys.isDeleteForward(event) || hotkeys.isDeleteBackward(event) || hotkeys.isDeleteWordForward(event) || hotkeys.isDeleteWordBackward(event);
};

export default function createOnKeyDown(config) {
  return function onKeyDown(event, controller, next) {
    var value = controller.value;
    var document = value.document,
        startBlock = value.startBlock,
        endBlock = value.endBlock;
    if (!startBlock || !endBlock) return next(); // TODO: 表格现在的 Paste 会经过严密的 normalize 保证不会挂掉，所以许多处理选区的逻辑可以废弃，后续可以接受不规整的选区
    // 阻止用户从table外围同时选择文字和表格内容时keydown产生不规则表格(选中非整个table)

    var startTable = document.getClosest(startBlock.key, isTable);
    var endTable = document.getClosest(endBlock.key, isTable);

    if (startTable && !endTable || !startTable && endTable) {
      // copy 事件放行
      if (!hotkeys.isCopy(event)) {
        event.preventDefault();
      }

      return controller;
    }

    if (isTabHotKey(event)) {
      return onTab(event, controller, next);
    }

    if (isArrowUpHotKey(event)) {
      return onArrowUp(event, controller, next);
    }

    if (isArrowRightHotKey(event)) {
      return onArrowRight(event, controller, next);
    }

    if (isArrowDownHotKey(event)) {
      return onArrowDown(event, controller, next);
    }

    if (isArrowLeftHotKey(event)) {
      return onArrowLeft(event, controller, next);
    }

    if (isSelectAllHotKey(event)) {
      return onSelectAll(controller, next, event);
    }

    if (isBackspaceHotKey(event) || isDeleteHotKey(event)) {
      return onDelete(event, controller, next);
    }

    if (isEnterHotKey(event)) {
      return onEnter(event, controller, next, config);
    } // 是否需要阻止仓颉默认删除行为


    if (shouldPreventDelete(event)) {
      return onEmptyDelete(controller, next);
    }

    return next();
  };
}
//# sourceMappingURL=createOnKeyDown.js.map