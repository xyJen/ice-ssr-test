{"version":3,"sources":["../../../../src/bi/handlers/onTab.ts"],"names":["Commands","insertRow","isSelectionInTableCell","isTable","isTableCell","isTableRow","getRealNodeInTable","getPreviousNonHiddenCell","document","cell","prevCell","getPreviousSibling","key","row","getClosest","prevRow","nodes","length","data","hidden","getNextNonHiddenCell","editor","nextCell","getNextSibling","nextRow","value","onTab","event","controller","next","startBlock","tableSelection","query","preventDefault","table","getNode","startColIndex","startRowIndex","firstCell","command","moveToRangeOfNode","shiftKey","text","moveToStartOfNode","sr"],"mappings":"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","sourcesContent":["import { Commands, Controller, Document } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport TableRow from '../../mo/models/tableRow';\nimport TableCell from '../../mo/models/tableCell';\nimport insertRow from '../commands/insertRow';\nimport isSelectionInTableCell from '../utils/isSelectionInTableCell';\nimport { isTable, isTableCell, isTableRow } from '../types';\nimport { getRealNodeInTable } from '../utils';\n\nfunction getPreviousNonHiddenCell(document: Document, cell: TableCell): TableCell | null {\n  let prevCell = document.getPreviousSibling(cell.key) as TableCell;\n  if (!prevCell) {\n    const row = document.getClosest(cell.key, isTableRow) as TableRow;\n    const prevRow = document.getPreviousSibling(row.key) as TableRow;\n    if (prevRow) {\n      prevCell = prevRow.nodes[prevRow.nodes.length - 1];\n    } else {\n      return null;\n    }\n  }\n  if (prevCell.data.hidden) {\n    return getPreviousNonHiddenCell(document, prevCell);\n  }\n  return prevCell;\n}\n\nfunction getNextNonHiddenCell(editor, document, cell) {\n  let nextCell: TableCell = document.getNextSibling(cell.key);\n  if (!nextCell) {\n    const row: TableRow = document.getClosest(cell.key, isTableRow);\n    let nextRow: TableRow = document.getNextSibling(row.key);\n    if (!nextRow) {\n      insertRow(editor, row, 'insert-row-below');\n      // 必须使用更新后的 document\n      nextRow = editor.value.document.getNextSibling(row.key);\n    }\n    nextCell = nextRow.nodes[0];\n  }\n  if (nextCell.data.hidden) {\n    return getNextNonHiddenCell(editor, document, nextCell);\n  }\n  return nextCell;\n}\n\nexport default function onTab(event, controller: Controller, next) {\n  const { value } = controller;\n  const { document, startBlock } = value;\n  const tableSelection = controller.query('tableSelection');\n  if (tableSelection) {\n    event.preventDefault();\n    const table = document.getNode(tableSelection.key) as Table;\n    const { startColIndex, startRowIndex } = tableSelection;\n    const firstCell = getRealNodeInTable(table, startRowIndex, startColIndex);\n    return controller.command(Commands.moveToRangeOfNode, firstCell!);\n  }\n\n  if (!isSelectionInTableCell(value)) return next();\n\n  event.preventDefault();\n\n  const cell = document.getClosest(startBlock!.key, isTableCell) as TableCell;\n  if (!cell) {\n    return;\n  }\n  const table = document.getClosest(startBlock!.key, isTable) as Table;\n\n  if (event.shiftKey) {\n    const prevCell = getPreviousNonHiddenCell(document, cell);\n    if (prevCell) {\n      if (prevCell.text) {\n        controller.command(Commands.moveToRangeOfNode, prevCell);\n      } else {\n        controller.command(Commands.moveToStartOfNode, prevCell);\n      }\n      return controller;\n    }\n    return next();\n  }\n\n  if (table.data.sr && !document.getNextSibling(cell.key)) {\n    return;\n  }\n\n  const nextCell = getNextNonHiddenCell(controller, document, cell);\n  if (nextCell.text) {\n    return controller.command(Commands.moveToRangeOfNode, nextCell);\n  }\n  return controller.command(Commands.moveToStartOfNode, nextCell);\n}\n"],"file":"onTab.js"}