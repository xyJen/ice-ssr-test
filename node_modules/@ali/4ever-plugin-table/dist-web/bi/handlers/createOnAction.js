/* eslint-disable no-shadow */
import { Commands, ContextMenu } from '@ali/4ever-cangjie';
import { DRAG_TYPE } from '@ali/4ever-plugin-draggable';
import TableCell from "../../mo/models/tableCell";
import { isActions } from "../actions";
import resizeTableWidth from "../commands/resizeTableWidth";
import resizeTableWidthFitContainer from "../commands/resizeTableWidthFitContainer";
import setTableAutofitWidth from "../commands/setTableAutofitWidth";
import resizeTableHeight from "../commands/resizeTableHeight";
import resizeColsWidth from "../commands/resizeColsWidth";
import resizeRowsHeight from "../commands/resizeRowsHeight";
import emptySelections from "../commands/emptyTableSelection";
import mergeCells from "../commands/mergeCells";
import splitCell from "../commands/splitCell";
import deleteTable from "../commands/deleteTable";
import insertTable from "../commands/insertTable";
import insertRow from "../commands/insertRow";
import moveRows from "../commands/moveRows";
import insertRowBySelections from "../commands/insertRowBySelections";
import insertCol from "../commands/insertCol";
import moveCols from "../commands/moveCols";
import deleteRows from "../commands/deleteRows";
import deleteCols from "../commands/deleteCols";
import selectTableSelection from "../commands/selectTableSelection";
import selectCols from "../commands/selectCols";
import selectRows from "../commands/selectRows";
import selectWholeTable from "../commands/selectWholeTable";
import setCellsData from "../commands/setCellsData";
import setTableBorder from "../commands/setTableBorder";
import { createEmptyParagraph } from "../utils";
import onSelectAll from "./onSelectAll";
import toggleRowHeader from "../commands/toggleRowHeader";
import toggleColHeader from "../commands/toggleColHeader";
import * as commands from "../../utils/commands";
var setTableMinColsWidthData = commands.setTableMinColsWidthData,
    adjustColsWidth = commands.adjustColsWidth;
export default function createOnAction(config) {
  return function onAction(action, controller, next) {
    var isDropFragmentAction = controller.isActionFactory('isDropFragmentAction');
    var enableAutofitWidth = config.enableAutofitWidth,
        enableHeader = config.enableHeader,
        setTableHeaderStyle = config.setTableHeaderStyle,
        disableDefaultAutofitWidth = config.disableDefaultAutofitWidth;

    if (isActions.isTableResizeTableWidthAction(action)) {
      var _action$payload = action.payload,
          node = _action$payload.node,
          delta = _action$payload.delta,
          maxWidth = _action$payload.maxWidth;
      return resizeTableWidth(controller, node, delta, maxWidth);
    }

    if (isActions.isTableResizeTableWidthFitContainerAction(action)) {
      var _action$payload2 = action.payload,
          _node = _action$payload2.node,
          containerWidth = _action$payload2.containerWidth;
      return resizeTableWidthFitContainer(controller, _node, containerWidth);
    }

    if (isActions.isTablesetTableAutofitWidthEnableAction(action)) {
      var _action$payload3 = action.payload,
          _node2 = _action$payload3.node,
          _containerWidth = _action$payload3.containerWidth;
      return setTableAutofitWidth(controller, _node2, true, _containerWidth);
    }

    if (isActions.isTableSetTableAutofitWidthDisableAction(action)) {
      var _node3 = action.payload.node;
      return setTableAutofitWidth(controller, _node3, false);
    }

    if (isActions.isTableResizeTableHeightAction(action)) {
      var _action$payload4 = action.payload,
          _node4 = _action$payload4.node,
          rowsHeight = _action$payload4.rowsHeight,
          _delta = _action$payload4.delta;
      return resizeTableHeight(controller, _node4, rowsHeight, _delta);
    }

    if (isActions.isTableResizeTableColWidthAction(action)) {
      var _action$payload5 = action.payload,
          _node5 = _action$payload5.node,
          colIndex = _action$payload5.colIndex,
          _delta2 = _action$payload5.delta;
      return resizeColsWidth(controller, {
        node: _node5,
        colIndex: colIndex,
        delta: _delta2
      });
    }

    if (isActions.isTableSetTableRowHeightAction(action)) {
      // 原来是node为table，然后传rowIndex
      // 现在改为node为tableRow，table通过tableRow找
      var _action$payload6 = action.payload,
          _node6 = _action$payload6.node,
          newHeight = _action$payload6.newHeight;
      return resizeRowsHeight(controller, _node6, newHeight);
    }

    if (isActions.isTableSetTableCellVAlignAction(action)) {
      var _action$payload7 = action.payload,
          _node7 = _action$payload7.node,
          selection = _action$payload7.selection,
          vAlign = _action$payload7.vAlign;
      return setCellsData(controller, _node7, selection, 'vAlign', vAlign);
    }

    if (isActions.isTableSetTableCellFillAction(action)) {
      var _action$payload8 = action.payload,
          _node8 = _action$payload8.node,
          _selection = _action$payload8.selection,
          fill = _action$payload8.fill;
      return setCellsData(controller, _node8, _selection, 'fill', fill);
    }

    if (isActions.isTableSetTableBorderAction(action)) {
      var _action$payload9 = action.payload,
          _node9 = _action$payload9.node,
          _selection2 = _action$payload9.selection,
          borderSetType = _action$payload9.borderSetType,
          color = _action$payload9.color,
          sz = _action$payload9.sz,
          type = _action$payload9.type;
      return setTableBorder(controller, _node9, _selection2, borderSetType, color, sz, type);
    }

    if (isActions.isTableEmptySelectionAction(action)) {
      var _node10 = action.payload.node;
      return emptySelections(controller, _node10);
    }

    if (isActions.isTableMergeCellsAction(action)) {
      var _node11 = action.payload.node;
      return mergeCells(controller, _node11);
    }

    if (isActions.isTableSplitTableCellAction(action)) {
      var _node12 = action.payload.node;
      return splitCell(controller, _node12);
    }

    if (isActions.isTableDeleteTableAction(action)) {
      var _node13 = action.payload.node;
      return deleteTable(controller, _node13);
    }

    if (isActions.isTableInsertTableAction(action)) {
      var _action$payload10 = action.payload,
          rowSize = _action$payload10.rowSize,
          colSize = _action$payload10.colSize,
          _containerWidth2 = _action$payload10.containerWidth;
      var defaultAutofit = (enableAutofitWidth == null ? void 0 : enableAutofitWidth()) && !(disableDefaultAutofitWidth != null && disableDefaultAutofitWidth());
      var defaultHeader = enableHeader == null ? void 0 : enableHeader();
      return insertTable(controller, {
        rowSize: rowSize,
        colSize: colSize,
        containerWidth: _containerWidth2,
        defaultAutofit: defaultAutofit,
        defaultHeader: defaultHeader,
        setTableHeaderStyle: setTableHeaderStyle
      });
    }

    if (isActions.isTableInsertRowAction(action)) {
      var _action$payload11 = action.payload,
          _node14 = _action$payload11.node,
          _type = _action$payload11.type;
      return insertRow(controller, _node14, _type);
    }

    if (isActions.isTableMoveRowsAction(action)) {
      var _action$payload12 = action.payload,
          _node15 = _action$payload12.node,
          targetIndex = _action$payload12.targetIndex,
          originIndexRange = _action$payload12.originIndexRange;
      return moveRows(controller, _node15, originIndexRange, targetIndex);
    }

    if (isActions.isTableInsertRowBySelectionsAction(action)) {
      var _action$payload13 = action.payload,
          _node16 = _action$payload13.node,
          _type2 = _action$payload13.type;
      return insertRowBySelections(controller, _node16, _type2);
    }

    if (isActions.isTableInsertColAction(action)) {
      var _action$payload14 = action.payload,
          _node17 = _action$payload14.node,
          _colIndex = _action$payload14.colIndex,
          colWidth = _action$payload14.colWidth,
          triggerColIndex = _action$payload14.triggerColIndex,
          _containerWidth3 = _action$payload14.containerWidth;
      return insertCol(controller, _node17, _colIndex, triggerColIndex, colWidth, _containerWidth3);
    }

    if (isActions.isTableMoveColsAction(action)) {
      var _action$payload15 = action.payload,
          _node18 = _action$payload15.node,
          _targetIndex = _action$payload15.targetIndex,
          _originIndexRange = _action$payload15.originIndexRange;
      return moveCols(controller, _node18, _originIndexRange, _targetIndex);
    }

    if (isActions.isTableDeleteRowsAction(action)) {
      var _node19 = action.payload.node;
      return deleteRows(controller, _node19);
    }

    if (isActions.isTableDeleteColsAction(action)) {
      var _node20 = action.payload.node;
      return deleteCols(controller, _node20);
    }

    if (isActions.isTableSelectTableSelectionAction(action)) {
      var _action$payload16 = action.payload,
          _node21 = _action$payload16.node,
          _selection3 = _action$payload16.selection;
      return selectTableSelection(controller, _node21, _selection3);
    }

    if (isActions.isTableSelectTableColsAction(action)) {
      var _action$payload17 = action.payload,
          _node22 = _action$payload17.node,
          startIndex = _action$payload17.startIndex,
          endIndex = _action$payload17.endIndex;
      return selectCols(controller, _node22, startIndex, endIndex);
    }

    if (isActions.isTableSelectTableRowsAction(action)) {
      var _action$payload18 = action.payload,
          _node23 = _action$payload18.node,
          _startIndex = _action$payload18.startIndex,
          _endIndex = _action$payload18.endIndex;
      return selectRows(controller, _node23, _startIndex, _endIndex);
    }

    if (isActions.isTableSelectTableAction(action)) {
      var _node24 = action.payload.node;
      return selectWholeTable(controller, _node24);
    }

    if (isActions.isTableSetTableMinColsWidthDataAction(action)) {
      var data = action.payload.data;
      return setTableMinColsWidthData(controller, data);
    }

    if (isActions.isTableAdjustColsWidthAction(action)) {
      var _action$payload19 = action.payload,
          _node25 = _action$payload19.node,
          _containerWidth4 = _action$payload19.containerWidth;
      return adjustColsWidth(controller, _node25, _containerWidth4);
    }

    if (isActions.isTableBlurAction(action)) {
      return controller.command(Commands.blur);
    }

    if (isDropFragmentAction != null && isDropFragmentAction(action)) {
      var _ref = action.payload,
          dragFragment = _ref.dragFragment;

      if (dragFragment) {
        var fragment = dragFragment.fragment,
            _type3 = dragFragment.type;

        if (_type3 === DRAG_TYPE.blocks && Array.isArray(fragment)) {
          var result = next();
          fragment.forEach(function (n) {
            var parentKey = n.parentKey;
            var parent = controller.value.document.getNode(parentKey);

            if (TableCell.isTableCell(parent) && !TableCell.isValidTableCell(parent)) {
              controller.command(Commands.insertNodeByKey, parentKey, 0, createEmptyParagraph());
            }
          });
          return result;
        }
      }

      return next();
    }

    if (action.type === ContextMenu.ACTION_SELECT_ALL) {
      return onSelectAll(controller, next);
    }

    if (isActions.isTableSetTableRowHeaderAction(action)) {
      var _node26 = action.payload.node;
      return toggleRowHeader(controller, _node26);
    }

    if (isActions.isTableRemoveTableRowHeaderAction(action)) {
      var _node27 = action.payload.node;
      return toggleRowHeader(controller, _node27);
    }

    if (isActions.isTableSetTableColHeaderAction(action)) {
      var _node28 = action.payload.node;
      return toggleColHeader(controller, _node28);
    }

    if (isActions.isTableRemoveTableColHeaderAction(action)) {
      var _node29 = action.payload.node;
      return toggleColHeader(controller, _node29);
    }

    return next();
  };
}
//# sourceMappingURL=createOnAction.js.map