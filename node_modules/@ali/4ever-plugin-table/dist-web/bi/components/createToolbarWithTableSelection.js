import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import equal from 'fast-deep-equal';
import { useSelectingHots, useSelectionData } from '@ali/4ever-cangjie';
import { getToolbarTableSelection } from "../utils/getToolbarTableSelection";
export default function createToolbarWithTableSeletion(Comp) {
  return function (props) {
    var controller = props.controller,
        table = props.table,
        isHoverCornerToolbar = props.isHoverCornerToolbar;

    var _React$useState = React.useState(getToolbarTableSelection(controller, table)),
        tbSelection = _React$useState[0],
        setTbSelection = _React$useState[1];

    var _React$useState2 = React.useState(isHoverCornerToolbar),
        hoverCornerToolbar = _React$useState2[0],
        setHoverCornerToolbar = _React$useState2[1];

    var prevTbSelectionRef = React.useRef(tbSelection);
    var prevHoverCornerToolbarRef = React.useRef(isHoverCornerToolbar);
    var updater = React.useCallback(function () {
      var tbSel = getToolbarTableSelection(controller, table);

      if (!equal(prevTbSelectionRef.current, tbSel)) {
        setTbSelection(tbSel);
        prevTbSelectionRef.current = tbSel;
      } // 要响应hover到左上角汉堡的状态变化


      if (prevHoverCornerToolbarRef.current !== isHoverCornerToolbar) {
        setHoverCornerToolbar(isHoverCornerToolbar);
        prevHoverCornerToolbarRef.current = isHoverCornerToolbar;
      }
    }, [controller, isHoverCornerToolbar, table]);
    useSelectionData(controller.selectionData$, null, updater, []);
    useSelectingHots(controller, updater);
    React.useMemo(updater, [controller.value.selection, updater]);
    return /*#__PURE__*/_createElement(Comp, _extends({}, props, {
      isHoverCornerToolbar: hoverCornerToolbar,
      selection: tbSelection
    }));
  };
}
//# sourceMappingURL=createToolbarWithTableSelection.js.map