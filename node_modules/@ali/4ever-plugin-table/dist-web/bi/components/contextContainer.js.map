{"version":3,"sources":["../../../../src/bi/components/contextContainer.tsx"],"names":["equal","React","PixelColsWidthContext","RowsClientHeightContext","ContextContainer","props","isSelected","useState","rowsClientHeight","setRowsClientHeight","rowsClientHeightRef","useRef","updateRowClientHeight","useCallback","rowKey","height","current","useEffect","rowsClientHeightValue","useMemo","pixelColsWidth","setPixelColsWidth","pixelColsWidthValue","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;qBAA4B,a;AAC5B,SAASC,qBAAT,EAAgCC,uBAAhC;AAQA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAkB;AAAA,MACxCC,UADwC,GACzBD,KADyB,CACxCC,UADwC;;AAAA,wBAEAL,KAAK,CAACM,QAAN,CAA2B,EAA3B,CAFA;AAAA,MAEzCC,gBAFyC;AAAA,MAEvBC,mBAFuB;;AAGhD,MAAMC,mBAAmB,GAAGT,KAAK,CAACU,MAAN,CAAyB,EAAzB,CAA5B;AAEA,MAAMC,qBAAsC,GAAGX,KAAK,CAACY,WAAN,CAAkB,UAACC,MAAD,EAASC,MAAT,EAAoB;AACnF,QAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB,aAAOL,mBAAmB,CAACM,OAApB,CAA4BF,MAA5B,CAAP;AACD,KAFD,MAEO;AACLJ,MAAAA,mBAAmB,CAACM,OAApB,CAA4BF,MAA5B,IAAsCC,MAAtC;AACD;;AACD,QAAIT,UAAJ,EAAgB;AACdG,MAAAA,mBAAmB,cAAMC,mBAAmB,CAACM,OAA1B,EAAnB;AACD;AACF,GAT8C,EAS5C,CAACV,UAAD,CAT4C,CAA/C;AAWAL,EAAAA,KAAK,CAACgB,SAAN,CAAgB,YAAM;AACpB,QAAIX,UAAU,IAAI,CAACN,KAAK,CAACQ,gBAAD,EAAmBE,mBAAmB,CAACM,OAAvC,CAAxB,EAAyE;AACvEP,MAAAA,mBAAmB,cAAMC,mBAAmB,CAACM,OAA1B,EAAnB;AACD;AACF,GAJD,EAIG,CAACV,UAAD,EAAaE,gBAAb,CAJH;AAMA,MAAMU,qBAAoD,GAAGjB,KAAK,CAACkB,OAAN,CAAc,YAAM;AAC/E,WAAO,CAACX,gBAAD,EAAmBI,qBAAnB,CAAP;AACD,GAF4D,EAE1D,CAACJ,gBAAD,EAAmBI,qBAAnB,CAF0D,CAA7D;;AAtBgD,yBA0BJX,KAAK,CAACM,QAAN,CAAyB,EAAzB,CA1BI;AAAA,MA0BzCa,cA1ByC;AAAA,MA0BzBC,iBA1ByB;;AA4BhD,MAAMC,mBAAyC,GAAGrB,KAAK,CAACkB,OAAN,CAAc,YAAM;AACpE,WAAO,CAACC,cAAD,EAAiBC,iBAAjB,CAAP;AACD,GAFiD,EAE/C,CAACD,cAAD,CAF+C,CAAlD;AAIA,sBACE,eAAC,uBAAD,CAAyB,QAAzB;AAAkC,IAAA,KAAK,EAAEF;AAAzC,kBACE,eAAC,qBAAD,CAAuB,QAAvB;AAAgC,IAAA,KAAK,EAAEI;AAAvC,KACGjB,KAAK,CAACkB,QADT,CADF,CADF;AAOD,CAvCM","sourcesContent":["import equal from 'fast-deep-equal';\nimport React from 'react';\nimport { PixelColsWidthContext, RowsClientHeightContext } from '../../utils/hooks';\nimport type { RowsHeight, UpdateRowHeight } from '../../utils/types';\n\ninterface Props {\n  isSelected: boolean;\n  children?: React.ReactNode;\n}\n\nexport const ContextContainer = (props: Props) => {\n  const { isSelected } = props;\n  const [rowsClientHeight, setRowsClientHeight] = React.useState<RowsHeight>({});\n  const rowsClientHeightRef = React.useRef<RowsHeight>({});\n\n  const updateRowClientHeight: UpdateRowHeight = React.useCallback((rowKey, height) => {\n    if (height === null) {\n      delete rowsClientHeightRef.current[rowKey];\n    } else {\n      rowsClientHeightRef.current[rowKey] = height;\n    }\n    if (isSelected) {\n      setRowsClientHeight({ ...rowsClientHeightRef.current });\n    }\n  }, [isSelected]);\n\n  React.useEffect(() => {\n    if (isSelected && !equal(rowsClientHeight, rowsClientHeightRef.current)) {\n      setRowsClientHeight({ ...rowsClientHeightRef.current });\n    }\n  }, [isSelected, rowsClientHeight]);\n\n  const rowsClientHeightValue: [RowsHeight, UpdateRowHeight] = React.useMemo(() => {\n    return [rowsClientHeight, updateRowClientHeight];\n  }, [rowsClientHeight, updateRowClientHeight]);\n\n  const [pixelColsWidth, setPixelColsWidth] = React.useState<number[]>([]);\n\n  const pixelColsWidthValue: [number[], Function] = React.useMemo(() => {\n    return [pixelColsWidth, setPixelColsWidth];\n  }, [pixelColsWidth]);\n\n  return (\n    <RowsClientHeightContext.Provider value={rowsClientHeightValue}>\n      <PixelColsWidthContext.Provider value={pixelColsWidthValue}>\n        {props.children}\n      </PixelColsWidthContext.Provider>\n    </RowsClientHeightContext.Provider>\n  );\n};\n"],"file":"contextContainer.js"}