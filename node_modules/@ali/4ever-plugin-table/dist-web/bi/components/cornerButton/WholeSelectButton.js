import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { THEME } from "../../constants";
import { REALTABLE_PADDING, TOOLBAR_ITEM_SIZE, STICKY_ROW_TOP_HEIGHT, STICKY_TOOLBAR_INDEX_MAP } from "../../../utils/constants";
import * as hooks from "../../../utils/hooks";
var useRowIsSticky = hooks.useRowIsSticky,
    useScrollableContainerRect = hooks.useScrollableContainerRect;
var Icon = /*#__PURE__*/styled.div(["cursor:default;"]);
var Wrapper = /*#__PURE__*/styled.div(["position:absolute;z-index:2;cursor:default;box-shadow:rgb(214 214 214) 1px 0px 0px 0px;"]);

var CornerIcon = function CornerIcon(props) {
  var scale = props.scale,
      _props$size = props.size,
      size = _props$size === void 0 ? TOOLBAR_ITEM_SIZE : _props$size,
      active = props.active,
      isSelected = props.isSelected,
      hoverSelection = props.hoverSelection,
      onClick = props.onClick,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave;

  var _useRowIsSticky = useRowIsSticky(),
      isSticky = _useRowIsSticky[0];

  var _useScrollableContain = useScrollableContainerRect(),
      scrollRect = _useScrollableContain[0];

  var timer = React.useRef(null);

  var _React$useState = React.useState(false),
      isHover = _React$useState[0],
      setIsHover = _React$useState[1];

  var style = React.useMemo(function () {
    var hoverBgColor = isHover ? THEME.blue1 : THEME.toolbarBgColor["default"];
    var ret = {
      backgroundColor: active ? THEME.blue1 : hoverBgColor,
      left: -(size / scale) + "px",
      top: REALTABLE_PADDING.top / scale + "px",
      width: size / scale + "px",
      height: Math.ceil(size / scale) + "px",
      borderTopLeftRadius: 5 / scale + "px",
      borderLeft: active || isHover ? "1px solid " + THEME.blue3 : "1px solid " + THEME.toolbarBorderColor,
      borderTop: active || isHover ? "1px solid " + THEME.blue3 : "1px solid " + THEME.toolbarBorderColor,
      boxShadow: active || hoverSelection ? THEME.blue3 + " 1px 0px 0px 0px" : 'rgb(214 214 214) 1px 0px 0px 0px',
      zIndex: hoverSelection ? 2 : 5 // 选中工具栏的时候需要降低全选按钮的zindex，否则会导致工具栏高亮左边框缺失，未选中时需要提升，否则滚动时全选按钮右边框会缺失

    };
    return ret;
  }, [isHover, active, size, scale]);
  var wrapperStyle = React.useMemo(function () {
    if (!isSelected) {
      return {
        visibility: 'hidden'
      };
    }

    var ret = {
      visibility: 'visible',
      left: -(size / scale) + "px",
      top: REALTABLE_PADDING.top / scale + "px"
    };

    if (isSticky) {
      ret.position = 'fixed';
      ret.top = scrollRect.top + STICKY_ROW_TOP_HEIGHT + "px";
      ret.transform = "translate(-" + size + "px, -" + size + "px)";
      ret.zIndex = STICKY_TOOLBAR_INDEX_MAP.cornerButton;
      ret.left = Number.isFinite(scrollRect.left) ? scrollRect.left : 'unset';
    }

    return ret;
  }, [isSelected, isSticky, scale, scrollRect, size]);
  var handleMouseEnter = React.useCallback(function (e) {
    timer.current = setTimeout(function () {
      onMouseEnter(e);
      setIsHover(true);
    }, 300);
  }, [onMouseEnter]);
  var handleMouseLeave = React.useCallback(function (e) {
    timer.current && clearTimeout(timer.current);
    onMouseLeave(e);
    setIsHover(false);
  }, [onMouseLeave]);
  React.useEffect(function () {
    timer.current && clearTimeout(timer.current);
  }, []);
  var wrapperRef = React.useRef(null);

  var preventDefault = function preventDefault(e) {
    e.preventDefault();
    e.stopPropagation();
  };

  return /*#__PURE__*/_createElement(Wrapper, {
    ref: wrapperRef,
    "data-sticky": isSticky,
    style: wrapperStyle,
    "data-testid": "table-whole-select-button"
  }, /*#__PURE__*/_createElement(Icon, {
    style: style,
    onClick: onClick,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onMouseDown: preventDefault
  }));
};

export default CornerIcon;
//# sourceMappingURL=WholeSelectButton.js.map