import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import fastdom from 'fastdom';
import { THEME } from "../../constants";
import calcTableSelectionPos from "../../utils/calcTableSelectionPos";
import constants from "../../../utils/constants";
var STICKY_TOOLBAR_INDEX_MAP = constants.STICKY_TOOLBAR_INDEX_MAP;
var TableSelectionRect = /*#__PURE__*/styled.div(["position:absolute;z-index:100;pointer-events:none;outline-offset:-2px;box-sizing:border-box;border:1px solid ", ";background-color:", ";"], THEME.blue3, THEME.blue0);

var SelectionRect = function SelectionRect(props) {
  var tableSelection = props.tableSelection,
      table = props.table,
      tableRef = props.tableRef,
      scale = props.scale,
      colsWidth = props.colsWidth,
      _props$style = props.style,
      propsStyle = _props$style === void 0 ? {} : _props$style,
      _props$testid = props.testid,
      testid = _props$testid === void 0 ? '' : _props$testid,
      forceUpdate = props.forceUpdate;

  var _React$useState = React.useState({}),
      style = _React$useState[0],
      setStyle = _React$useState[1];

  var prevDisplayRef = React.useRef();
  var measureTaskRef = React.useRef();
  var draw = React.useCallback(function (tblSelection) {
    measureTaskRef.current && fastdom.clear(measureTaskRef.current);
    measureTaskRef.current = fastdom.measure(function () {
      if (!tblSelection) {
        if (prevDisplayRef.current !== 'none') {
          setStyle({
            display: 'none'
          });
        }

        return;
      }

      var pos = calcTableSelectionPos({
        tblSelection: tblSelection,
        table: table,
        tableNode: tableRef.current,
        scale: scale,
        colsWidth: colsWidth
      });

      if (pos) {
        setStyle(_extends({}, pos, {
          display: 'block'
        }));
      } else {
        setStyle({
          display: 'none'
        });
      }
    });
    return function () {
      measureTaskRef.current && fastdom.clear(measureTaskRef.current);
    };
  }, [table, scale, tableRef, colsWidth]);
  React.useLayoutEffect(function () {
    draw(tableSelection);
  }, [draw, tableSelection, forceUpdate]);
  var zIndex = React.useMemo(function () {
    if (tableSelection && tableSelection.startRowIndex !== 0) {
      // selection 不包含首行时，selection zIndex 要低于首行
      // 保证首行吸顶时，滚动文档，选区不遮挡首行
      return STICKY_TOOLBAR_INDEX_MAP.selection;
    }

    return STICKY_TOOLBAR_INDEX_MAP.stickyRow + 1;
  }, [tableSelection]);
  return /*#__PURE__*/_createElement(TableSelectionRect, {
    "data-testid": testid,
    style: _extends({}, propsStyle, style, {
      zIndex: zIndex
    })
  });
};

export default SelectionRect;
//# sourceMappingURL=selectionRect.js.map