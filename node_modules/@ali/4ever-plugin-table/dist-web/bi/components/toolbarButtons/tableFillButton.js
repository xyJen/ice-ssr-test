import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ColorPicker, EColorPickerIcon } from '@ali/we-toolbar';
import { TableRole as PluginRoles } from "../../../utils/role";
import { setTableCellFill } from "../../actions";
import getTable from "../../utils/getTable";
import getTableSelection from "../../utils/getTableSelection";
import { setColorPanelMode } from '@ali/4ever-plugin-pref';
export default function TableFillButton(props) {
  var _locale$fillColor;

  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var _ref = controller,
      value = _ref.value;
  var table = getTable(value);
  var selection = getTableSelection(controller);
  var color;

  if (selection) {
    var startRowIndex = selection.startRowIndex,
        startColIndex = selection.startColIndex;
    var tablePath = value.document.getPath(table.key);
    var cellPath = [].concat(tablePath, [startRowIndex, startColIndex]);
    var cell = value.document.getNodeByPath(cellPath);

    if (cell) {
      var payload = cell.data;
      color = payload && payload.fill;
    }
  } // DEFAULT COLOR


  color = color === undefined ? '#FDBE3D' : color;

  var onChange = function onChange(fill) {
    controller.run('onAction', setTableCellFill(table, selection, fill));
  };

  var getColorPanelMode = React.useCallback(function () {
    var _controller$query;

    return (_controller$query = controller.query('getColorPanelMode')) == null ? void 0 : _controller$query.mode;
  }, [controller]);
  var handleSelectValueChange = React.useCallback(function (mode) {
    controller.run('onAction', setColorPanelMode({
      mode: mode
    }));
  }, [controller]);
  return /*#__PURE__*/_createElement(ColorPicker, _extends({}, rest, {
    tooltip: (_locale$fillColor = locale.fillColor) == null ? void 0 : _locale$fillColor.tipText,
    testid: "bi-toolbar-table-fill",
    color: color,
    automaticColor: "",
    clearColor: "",
    onColorPicker: onChange,
    btnType: EColorPickerIcon.backgroundsheet,
    role: PluginRoles.tableFillColor,
    showToggleSelect: true,
    getColorPanelMode: getColorPanelMode,
    onSelectValueChange: handleSelectValueChange
  }));
}
//# sourceMappingURL=tableFillButton.js.map