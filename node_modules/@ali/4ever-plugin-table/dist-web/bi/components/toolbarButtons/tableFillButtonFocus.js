import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Commands } from '@ali/4ever-cangjie';
import { SplitButton } from '@ali/we-toolbar';
import { ColorPanel } from '@ali/we-design';
import { ToolbarCellFillColorNormal, PaletteNormal } from '@ali/we-icon';
import { TableRole as PluginRoles } from "../../../utils/role";
import { setTableCellFill } from "../../actions";
import getTable from "../../utils/getTable";
import getTableSelection from "../../utils/getTableSelection";
import { useSelectionBarContext } from '@ali/4ever-component';

var _ref2 = /*#__PURE__*/_createElement(PaletteNormal, {
  "data-role": "table_color_fill_panel"
});

export default function TableFillButtonFocus(props) {
  var _locale$fillColor;

  var controller = props.controller,
      locale = props.locale,
      usePaletteIcon = props.usePaletteIcon,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "usePaletteIcon"]);

  var _ref = controller,
      value = _ref.value;
  var table = getTable(value);
  var selection = getTableSelection(controller);

  var _useSelectionBarConte = useSelectionBarContext(),
      context = _useSelectionBarConte[0],
      actions = _useSelectionBarConte[1];

  var lastFill = context.lastFill;
  var color;

  if (selection) {
    var startRowIndex = selection.startRowIndex,
        startColIndex = selection.startColIndex;
    var tablePath = value.document.getPath(table.key);
    var cellPath = [].concat(tablePath, [startRowIndex, startColIndex]);
    var cell = value.document.getNodeByPath(cellPath);

    if (cell) {
      var payload = cell.data;
      color = payload && payload.fill;
    }
  }

  var onChange = function onChange(fill) {
    controller.run('onAction', setTableCellFill(table, selection, fill));
    actions.updateLastFill(fill);
  };

  var handleButtonClick = function handleButtonClick() {
    controller.run('onAction', setTableCellFill(table, selection, lastFill));
  };

  var pathColors = [// 图标下方横线填充色
  lastFill === '' ? 'transparent' : lastFill, // 图标下方横线边框色， 当填充为透明或白色时边框色为 inherit
  ['#FFFFFF', 'transparent'].includes(lastFill) ? 'inherit' : lastFill];

  var handleCustomVisibleChange = function handleCustomVisibleChange(visible) {
    var isBlurred = controller.value.isBlurred;

    if (isBlurred && !visible) {
      // fix: focus 到自定义色板输入框然后关闭色板后行内工具栏立即消失
      controller.run('onCangjieFocus');

      if (context.canHide) {
        // fix: focus 到自定义色板输入框然后点击其他区域时行内工具栏不消失
        controller.command(Commands.moveToFocus);
      }
    }
  }; // fix: focus 到自定义色板输入框后行内工具栏消失


  var handleMouseEnter = React.useCallback(function () {
    return actions.updateCanHide(false);
  }, [actions]);
  var handleMouseLeave = React.useCallback(function () {
    return actions.updateCanHide(true);
  }, [actions]);
  return /*#__PURE__*/_createElement(SplitButton, _extends({}, rest, {
    testid: "bi-toolbar-table-fill",
    icon: usePaletteIcon ? _ref2 : /*#__PURE__*/_createElement(ToolbarCellFillColorNormal, {
      pathColors: pathColors,
      "data-role": "table_color_fill_panel"
    }),
    tooltip: (_locale$fillColor = locale.fillColor) == null ? void 0 : _locale$fillColor.tipText,
    overlay: /*#__PURE__*/_createElement(ColorPanel, {
      backgroundColor: color,
      onBackgroundColorClick: onChange,
      enableResetButton: true,
      isFullBackground: true,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      onCustomVisibleChange: handleCustomVisibleChange
    }),
    onClickLeft: handleButtonClick,
    role: PluginRoles.tableFillColor
  }));
}
//# sourceMappingURL=tableFillButtonFocus.js.map