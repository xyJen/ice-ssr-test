{"version":3,"sources":["../../../../../../src/bi/components/toolbarButtons/next/tableMergeButton.tsx"],"names":["React","useCallback","useMemo","TableRole","PluginRoles","mergeTableCells","splitTableCell","getTable","getTableSelection","TableMergeButton","MergeButton","props","controller","locale","disabled","rest","table","value","selection","isSelectionSupportSplit","query","visible","node","isSelectionSupportMerge","canMergeOrUnmerge","status","tooltip","contextMenuMerge","toastUnmerge","handleChange","run","options","merged","title","unmerged","contextMenuSplit","tableMerge"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../../../mo/models';\nimport { TableRole as PluginRoles } from '../../../../utils/role';\nimport { mergeTableCells, splitTableCell } from '../../../actions';\nimport getTable from '../../../utils/getTable';\nimport getTableSelection from '../../../utils/getTableSelection';\nimport { CellMergeStatus, IToolbarButtonConfig, TableMergeButton as MergeButton } from '@ali/4ever-component';\n\nexport interface TableMergeButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  locale?: Record<string, string>;\n}\n\nexport default function TableMergeButton(props: TableMergeButtonProps) {\n  const { controller, locale, disabled, ...rest } = props;\n  const table = getTable(controller.value) as Table | null;\n  const selection = getTableSelection(controller);\n  const isSelectionSupportSplit = React.useMemo(() => {\n    return !!table\n      && controller.query('isSelectionSupportSplit', { visible: true, node: table });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [table, selection, controller]);\n  const isSelectionSupportMerge = React.useMemo(() => {\n    return !!table\n      && controller.query('isSelectionSupportMerge', { visible: true, node: table });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [table, selection, controller]);\n\n  let canMergeOrUnmerge = false;\n  let status;\n  let tooltip = '';\n  if (isSelectionSupportMerge) {\n    status = 'unmerged';\n    tooltip = locale?.contextMenuMerge || '';\n  } else if (isSelectionSupportSplit) {\n    status = 'merged';\n    tooltip = locale?.toastUnmerge || '';\n  } else {\n    canMergeOrUnmerge = true;\n  }\n\n  const handleChange = useCallback((value: CellMergeStatus) => {\n    if (value === 'merged') {\n      controller.run('onAction', mergeTableCells(table));\n    } else if (value === 'unmerged') {\n      controller.run('onAction', splitTableCell(table));\n    }\n  }, [table, controller]);\n\n  const options = useMemo(() => ({\n    merged: { title: locale?.contextMenuMerge || '' },\n    unmerged: { title: locale?.contextMenuSplit || '' },\n  }), [locale]);\n\n  return (\n    <MergeButton\n      testid=\"bi-toolbar-tablemerge\"\n      disabled={canMergeOrUnmerge || disabled}\n      onChange={handleChange}\n      onClick={handleChange}\n      options={options}\n      value={status}\n      role={PluginRoles.tableMerge}\n      tooltip={tooltip}\n      {...rest}\n    />\n  );\n}\n"],"file":"tableMergeButton.js"}