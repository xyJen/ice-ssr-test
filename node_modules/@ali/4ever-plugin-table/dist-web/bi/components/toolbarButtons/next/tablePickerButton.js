import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TablePanel } from '@ali/we-design';
import { IconMenu, IconTable } from '@ali/4ever-component';
import { TableRole as PluginRoles } from "../../../../utils/role";
import isSelectionInTableCell from "../../../utils/isSelectionInTableCell";
import { insertTable } from "../../../actions";

var _ref2 = /*#__PURE__*/_createElement(IconTable, null);

export default function TablePickerButton(props) {
  var controller = props.controller,
      locale = props.locale,
      tooltipProp = props.tooltip,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "tooltip"]);

  var value = controller.value;
  var tableSelection = controller.query('hasTableSelection'); // @ts-ignore

  var isDisabled = value.selection.isBlurred || value.data.edgeSelection || tableSelection || isSelectionInTableCell(value) || controller.query('isSelectionInLink') || controller.query('isSelectionInMention') || controller.query('isSelectionInListSymbol');

  var _React$useState = React.useState(false),
      isOverlayVisible = _React$useState[0],
      setOverlayVisible = _React$useState[1];

  var handleChange = React.useCallback(function (row, col) {
    controller.run('onAction', insertTable(row, col));
    setOverlayVisible(false);
  }, [controller]);

  var _ref = /*#__PURE__*/_createElement(TablePanel, {
    row: 10,
    col: 10,
    onPick: handleChange
  });

  var tablePanel = React.useMemo(function () {
    return _ref;
  }, [handleChange]);
  var tooltip = React.useMemo(function () {
    return _extends({
      title: locale == null ? void 0 : locale.quickInsertTitle
    }, tooltipProp);
  }, []);
  return /*#__PURE__*/_createElement(IconMenu, _extends({
    testid: "bi-toolbar-table-picker",
    overlayVisible: isOverlayVisible,
    onVisibleChange: setOverlayVisible,
    overlay: tablePanel,
    disabled: isDisabled,
    role: PluginRoles.tablePicker,
    icon: _ref2,
    title: locale == null ? void 0 : locale.quickInsertTitle,
    tooltip: tooltip
  }, rest));
}
//# sourceMappingURL=tablePickerButton.js.map