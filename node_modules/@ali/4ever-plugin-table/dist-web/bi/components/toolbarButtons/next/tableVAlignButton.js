import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TableRole as PluginRoles } from "../../../../utils/role";
import getTable from "../../../utils/getTable";
import getTableSelection from "../../../utils/getTableSelection";
import { setTableCellVAlign } from "../../../actions";
import getVAlign from "../../../utils/getVAlign";
import { VerticalAlignSelect } from '@ali/4ever-component';
var SUPPORT_ALIGNMENT = {
  middle: true,
  top: true,
  bottom: true
};
export var DEFAULT_TABLE_ALIGNMENT = 'middle';
export default function TableVAlignButton(props) {
  var controller = props.controller,
      locale = props.locale,
      options = props.options,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "options"]);

  var alignment = getVAlign(controller);
  alignment = SUPPORT_ALIGNMENT[alignment] ? alignment : DEFAULT_TABLE_ALIGNMENT;
  var selection = getTableSelection(controller);
  var tip = locale.vAlignMiddle;

  if (alignment === 'top') {
    tip = locale.vAlignTop;
  } else if (alignment === 'bottom') {
    tip = locale.vAlignBottom;
  }

  var handleChange = React.useCallback(function (vAlign) {
    var table = getTable(controller.value);
    controller.run('onAction', setTableCellVAlign(table, selection, vAlign));
  }, [selection]);
  var selectOptions = React.useMemo(function () {
    var _options$top, _options$top2, _options$middle, _options$middle2, _options$bottom, _options$bottom2;

    return {
      top: {
        title: (options == null ? void 0 : (_options$top = options.top) == null ? void 0 : _options$top.title) || locale.vAlignTop,
        icon: options == null ? void 0 : (_options$top2 = options.top) == null ? void 0 : _options$top2.icon
      },
      middle: {
        title: (options == null ? void 0 : (_options$middle = options.middle) == null ? void 0 : _options$middle.title) || locale.vAlignMiddle,
        icon: options == null ? void 0 : (_options$middle2 = options.middle) == null ? void 0 : _options$middle2.icon
      },
      bottom: {
        title: (options == null ? void 0 : (_options$bottom = options.bottom) == null ? void 0 : _options$bottom.title) || locale.vAlignBottom,
        icon: options == null ? void 0 : (_options$bottom2 = options.bottom) == null ? void 0 : _options$bottom2.icon
      }
    };
  }, [locale, options]);
  return /*#__PURE__*/_createElement(VerticalAlignSelect, _extends({
    tooltip: tip,
    testid: "bi-toolbar-valign",
    options: selectOptions,
    value: alignment,
    disabled: !selection,
    onChange: handleChange,
    role: PluginRoles.tableVAlignSelect
  }, rest));
}
//# sourceMappingURL=tableVAlignButton.js.map