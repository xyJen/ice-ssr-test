import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TableRole as PluginRoles } from "../../../../utils/role";
import { EColorPanelMode } from '@ali/we-toolbar';
import { setTableCellFill } from "../../../actions";
import getTable from "../../../utils/getTable";
import getTableSelection from "../../../utils/getTableSelection";
import { setColorPanelMode } from '@ali/4ever-plugin-pref';
import { TableFillColorPicker } from '@ali/4ever-component';
export default function TableFillButton(props) {
  var _controller$query, _locale$fillColor;

  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var _ref = controller,
      value = _ref.value;
  var table = getTable(value);
  var selection = getTableSelection(controller);
  var isDisabled = !(selection && table);
  var color;

  if (selection && table) {
    var startRowIndex = selection.startRowIndex,
        startColIndex = selection.startColIndex;
    var tablePath = value.document.getPath(table.key);
    var cellPath = tablePath && [].concat(tablePath, [startRowIndex, startColIndex]);
    var cell = cellPath && value.document.getNodeByPath(cellPath);

    if (cell) {
      var payload = cell.data;
      color = payload && payload.fill;
    }
  } // DEFAULT COLOR


  color = color === undefined ? '#FDBE3D' : color;
  var handleChange = React.useCallback(function (fill) {
    controller.run('onAction', setTableCellFill(table, selection, fill));
  }, [controller, table, selection]);
  var currentPreset = (_controller$query = controller.query('getColorPanelMode')) == null ? void 0 : _controller$query.mode;
  var handleSelectValueChange = React.useCallback(function (mode) {
    controller.run('onAction', setColorPanelMode({
      mode: mode === 'art' ? EColorPanelMode.art : EColorPanelMode.normal
    }));
  }, [controller]);
  return /*#__PURE__*/_createElement(TableFillColorPicker, _extends({
    testid: "bi-toolbar-table-fill",
    disabled: !!isDisabled,
    color: color,
    onColorChange: handleChange,
    tooltip: (_locale$fillColor = locale.fillColor) == null ? void 0 : _locale$fillColor.tipText,
    role: PluginRoles.tableFillColor,
    currentPreset: currentPreset,
    onCurrentPresetChange: handleSelectValueChange
  }, rest));
}
//# sourceMappingURL=tableFillButton.js.map