import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TableRole as PluginRoles } from "../../../../utils/role";
import { mergeTableCells, splitTableCell } from "../../../actions";
import getTable from "../../../utils/getTable";
import getTableSelection from "../../../utils/getTableSelection";
import { TableMergeButton as MergeButton } from '@ali/4ever-component';
export default function TableMergeButton(props) {
  var controller = props.controller,
      locale = props.locale,
      disabled = props.disabled,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "disabled"]);

  var table = getTable(controller.value);
  var selection = getTableSelection(controller);
  var isSelectionSupportSplit = React.useMemo(function () {
    return !!table && controller.query('isSelectionSupportSplit', {
      visible: true,
      node: table
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [table, selection, controller]);
  var isSelectionSupportMerge = React.useMemo(function () {
    return !!table && controller.query('isSelectionSupportMerge', {
      visible: true,
      node: table
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [table, selection, controller]);
  var canMergeOrUnmerge = false;
  var status;
  var tooltip = '';

  if (isSelectionSupportMerge) {
    status = 'unmerged';
    tooltip = (locale == null ? void 0 : locale.contextMenuMerge) || '';
  } else if (isSelectionSupportSplit) {
    status = 'merged';
    tooltip = (locale == null ? void 0 : locale.toastUnmerge) || '';
  } else {
    canMergeOrUnmerge = true;
  }

  var handleChange = useCallback(function (value) {
    if (value === 'merged') {
      controller.run('onAction', mergeTableCells(table));
    } else if (value === 'unmerged') {
      controller.run('onAction', splitTableCell(table));
    }
  }, [table, controller]);
  var options = useMemo(function () {
    return {
      merged: {
        title: (locale == null ? void 0 : locale.contextMenuMerge) || ''
      },
      unmerged: {
        title: (locale == null ? void 0 : locale.contextMenuSplit) || ''
      }
    };
  }, [locale]);
  return /*#__PURE__*/_createElement(MergeButton, _extends({
    testid: "bi-toolbar-tablemerge",
    disabled: canMergeOrUnmerge || disabled,
    onChange: handleChange,
    onClick: handleChange,
    options: options,
    value: status,
    role: PluginRoles.tableMerge,
    tooltip: tooltip
  }, rest));
}
//# sourceMappingURL=tableMergeButton.js.map