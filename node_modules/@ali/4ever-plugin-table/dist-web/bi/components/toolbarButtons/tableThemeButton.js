import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { IconMenu } from '@ali/we-toolbar';
import { ColorPanel } from '@ali/we-design';
import { IconPalette } from '@ali/4ever-component';
import { TableRole as PluginRoles } from "../../../utils/role";
import { setTableBorder, setTableCellFill } from "../../actions";
import getTable from "../../utils/getTable";
import getTableSelection from "../../utils/getTableSelection";
import { lineMap, DEFAULT_BORDER_COLOR } from "../../../utils/constants";

var _ref2 = /*#__PURE__*/_createElement(IconPalette, null);

export default function TableThemeButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var value = controller.value;
  var table = getTable(value);
  var selection = getTableSelection(controller);

  var _React$useState = React.useState(false),
      isVisible = _React$useState[0],
      setVisible = _React$useState[1];

  var isDisabled = !(selection && table);

  var _ref = controller.query('getTableSelectionTheme') || {},
      backgroundColor = _ref.backgroundColor,
      borderColor = _ref.borderColor;

  var handleTableBorderColor = React.useCallback(function (color) {
    var val = lineMap['Thin'].lineType;
    var sz = lineMap['Thin'].size;
    var layout = 'all';

    if (table) {
      controller.run('onAction', setTableBorder(table, selection, layout, color, sz, val));
    }
  }, [controller, table, selection]);
  var handleTableBgColorChange = React.useCallback(function (fill) {
    controller.run('onAction', setTableCellFill(table, selection, fill));
  }, [controller, table, selection]);
  var handleReset = React.useCallback(function () {
    handleTableBorderColor(DEFAULT_BORDER_COLOR);
    handleTableBgColorChange('');
    setVisible(false);
    return false;
  }, [handleTableBorderColor, handleTableBgColorChange]);
  return /*#__PURE__*/_createElement(IconMenu, _extends({}, rest, {
    tooltip: (locale == null ? void 0 : locale.borderAndFillColor) || 'Border and background color',
    testid: "bi-toolbar-table-theme",
    disabled: isDisabled,
    role: PluginRoles.tableTheme,
    icon: _ref2,
    visible: isVisible,
    onVisibleChange: setVisible,
    autoClose: false,
    overlay: /*#__PURE__*/_createElement(ColorPanel, {
      backgroundColor: backgroundColor,
      onBackgroundColorClick: handleTableBgColorChange,
      borderColor: borderColor,
      onBorderColorClick: handleTableBorderColor,
      enableResetButton: true,
      onResetButtonClick: handleReset
    })
  }));
}
//# sourceMappingURL=tableThemeButton.js.map