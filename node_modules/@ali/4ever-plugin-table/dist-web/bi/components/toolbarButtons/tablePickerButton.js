import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TablePanel } from '@ali/we-design';
import { TableButton } from '@ali/we-toolbar';
import { TableRole as PluginRoles } from "../../../utils/role";
import isSelectionInTableCell from "../../utils/isSelectionInTableCell";
import { insertTable } from "../../actions";
export default function TablePickerButton(props) {
  var controller = props.controller,
      locale = props.locale,
      toolbarMode = props.toolbarMode,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "toolbarMode"]);

  var value = controller.value;
  var tableSelection = controller.query('hasTableSelection'); // @ts-ignore

  var isDisabled = value.selection.isBlurred || value.data.edgeSelection || tableSelection || isSelectionInTableCell(value) || controller.query('isSelectionInLink') || controller.query('isSelectionInMention') || controller.query('isSelectionInListSymbol');
  var handleChange = React.useCallback(function (row, col) {
    controller.run('onAction', insertTable(row, col));
  }, [controller]);

  var _ref = /*#__PURE__*/_createElement(TablePanel, {
    row: 10,
    col: 10,
    onPick: handleChange
  });

  var tablePanel = React.useMemo(function () {
    return _ref;
  }, [handleChange]);
  return /*#__PURE__*/_createElement(TableButton, _extends({}, rest, {
    testid: "bi-toolbar-table-picker",
    overlay: tablePanel,
    disabled: isDisabled,
    autoClose: true,
    role: PluginRoles.tablePicker
  }));
}
//# sourceMappingURL=tablePickerButton.js.map