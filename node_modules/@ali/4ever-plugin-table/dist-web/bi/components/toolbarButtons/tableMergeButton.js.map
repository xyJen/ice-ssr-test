{"version":3,"sources":["../../../../../src/bi/components/toolbarButtons/tableMergeButton.tsx"],"names":["React","MergeCellButton","TableRole","PluginRoles","mergeTableCells","splitTableCell","getTable","getTableSelection","TableMergeButton","props","controller","locale","rest","table","value","selection","isSelectionSupportSplit","useMemo","query","visible","node","isSelectionSupportMerge","disabled","status","title","contextMenuMerge","toastUnmerge","handleChange","run","handleClick","tableMerge"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;qBAC4B,a;AAE5B,SACEC,eADF,QAEO,iBAFP;AAGA,SAASC,SAAS,IAAIC,WAAtB;AACA,SAASC,eAAT,EAA0BC,cAA1B;AACA,OAAOC,QAAP;AACA,OAAOC,iBAAP;AAOA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAwD;AAAA,MAC7DC,UAD6D,GAC7BD,KAD6B,CAC7DC,UAD6D;AAAA,MACjDC,MADiD,GAC7BF,KAD6B,CACjDE,MADiD;AAAA,MACtCC,IADsC,iCAC7BH,KAD6B;;AAErE,MAAMI,KAAK,GAAGP,QAAQ,CAACI,UAAU,CAACI,KAAZ,CAAtB;AACA,MAAMC,SAAS,GAAGR,iBAAiB,CAACG,UAAD,CAAnC;AACA,MAAMM,uBAAuB,GAAGhB,KAAK,CAACiB,OAAN,CAAc,YAAM;AAClD,WAAO,CAAC,CAACJ,KAAF,IACFH,UAAU,CAACQ,KAAX,CAAiB,yBAAjB,EAA4C;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,IAAI,EAAEP;AAAvB,KAA5C,CADL,CADkD,CAGpD;AACC,GAJ+B,EAI7B,CAACA,KAAD,EAAQE,SAAR,EAAmBL,UAAnB,CAJ6B,CAAhC;AAKA,MAAMW,uBAAuB,GAAGrB,KAAK,CAACiB,OAAN,CAAc,YAAM;AAClD,WAAO,CAAC,CAACJ,KAAF,IACFH,UAAU,CAACQ,KAAX,CAAiB,yBAAjB,EAA4C;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,IAAI,EAAEP;AAAvB,KAA5C,CADL,CADkD,CAGpD;AACC,GAJ+B,EAI7B,CAACA,KAAD,EAAQE,SAAR,EAAmBL,UAAnB,CAJ6B,CAAhC;AAMA,MAAIY,QAAQ,GAAG,KAAf;AACA,MAAIC,MAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,MAAIH,uBAAJ,EAA6B;AAC3BE,IAAAA,MAAM,GAAG,UAAT;AACAC,IAAAA,KAAK,GAAGb,MAAM,CAACc,gBAAf;AACD,GAHD,MAGO,IAAIT,uBAAJ,EAA6B;AAClCO,IAAAA,MAAM,GAAG,QAAT;AACAC,IAAAA,KAAK,GAAGb,MAAM,CAACe,YAAf;AACD,GAHM,MAGA;AACLJ,IAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,MAAMK,YAAY,GAAG,SAAfA,YAAe,CAACb,KAAD,EAAmB;AACtC,QAAIA,KAAK,KAAK,QAAd,EAAwB;AACtBJ,MAAAA,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2BxB,eAAe,CAACS,KAAD,CAA1C;AACD,KAFD,MAEO,IAAIC,KAAK,KAAK,UAAd,EAA0B;AAC/BJ,MAAAA,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2BvB,cAAc,CAACQ,KAAD,CAAzC;AACD;AACF,GAND;;AAQA,MAAMgB,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAIN,MAAM,KAAK,QAAf,EAAyB;AACvBb,MAAAA,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2BvB,cAAc,CAACQ,KAAD,CAAzC;AACD,KAFD,MAEO,IAAIU,MAAM,KAAK,UAAf,EAA2B;AAChCb,MAAAA,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2BxB,eAAe,CAACS,KAAD,CAA1C;AACD;AACF,GAND;;AAQA,sBACE,eAAC,eAAD,eACMD,IADN;AAEE,IAAA,KAAK,EAAEY,KAFT;AAGE,IAAA,MAAM,EAAC,uBAHT;AAIE,IAAA,QAAQ,EAAEG,YAJZ;AAKE,IAAA,OAAO,EAAEE,WALX;AAME,IAAA,MAAM,EAAEN,MANV;AAOE,IAAA,QAAQ,EAAED,QAPZ;AAQE,IAAA,IAAI,EAAEnB,WAAW,CAAC2B;AARpB,KADF;AAYD","sourcesContent":["import React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../../mo/models';\nimport {\n  MergeCellButton,\n} from '@ali/we-toolbar';\nimport { TableRole as PluginRoles } from '../../../utils/role';\nimport { mergeTableCells, splitTableCell } from '../../actions';\nimport getTable from '../../utils/getTable';\nimport getTableSelection from '../../utils/getTableSelection';\n\nexport interface TableMergeButtonProps {\n  controller: Controller;\n  locale: Record<string, string>;\n}\n\nexport default function TableMergeButton(props: TableMergeButtonProps) {\n  const { controller, locale, ...rest } = props;\n  const table = getTable(controller.value) as Table | null;\n  const selection = getTableSelection(controller);\n  const isSelectionSupportSplit = React.useMemo(() => {\n    return !!table\n      && controller.query('isSelectionSupportSplit', { visible: true, node: table });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [table, selection, controller]);\n  const isSelectionSupportMerge = React.useMemo(() => {\n    return !!table\n      && controller.query('isSelectionSupportMerge', { visible: true, node: table });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [table, selection, controller]);\n\n  let disabled = false;\n  let status;\n  let title = '';\n  if (isSelectionSupportMerge) {\n    status = 'unmerged';\n    title = locale.contextMenuMerge;\n  } else if (isSelectionSupportSplit) {\n    status = 'merged';\n    title = locale.toastUnmerge;\n  } else {\n    disabled = true;\n  }\n\n  const handleChange = (value: string) => {\n    if (value === 'merged') {\n      controller.run('onAction', mergeTableCells(table));\n    } else if (value === 'unmerged') {\n      controller.run('onAction', splitTableCell(table));\n    }\n  };\n\n  const handleClick = () => {\n    if (status === 'merged') {\n      controller.run('onAction', splitTableCell(table));\n    } else if (status === 'unmerged') {\n      controller.run('onAction', mergeTableCells(table));\n    }\n  };\n\n  return (\n    <MergeCellButton\n      {...rest}\n      title={title}\n      testid=\"bi-toolbar-tablemerge\"\n      onSelect={handleChange}\n      onClick={handleClick}\n      status={status}\n      disabled={disabled}\n      role={PluginRoles.tableMerge}\n    />\n  );\n}\n"],"file":"tableMergeButton.js"}