import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import Table from "../../../mo/models";
import { IconButton } from '@ali/we-toolbar';
import { ToolbarMergeCellNormal } from '@ali/we-design';
import { TableRole as PluginRoles } from "../../../utils/role";
import { mergeTableCells } from "../../actions";
import getTable from "../../utils/getTable";
import getTableSelection from "../../utils/getTableSelection";

var _ref = /*#__PURE__*/_createElement(ToolbarMergeCellNormal, null);

export default function TableSimpleMergeButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var table = getTable(controller.value);
  var selection = getTableSelection(controller);
  var isSelectionSupportSplit = React.useMemo(function () {
    return !!table && controller.query('isSelectionSupportSplit', {
      visible: true,
      node: table
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [table, selection, controller]);
  var isSelectionSupportMerge = React.useMemo(function () {
    return !!table && controller.query('isSelectionSupportMerge', {
      visible: true,
      node: table
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [table, selection, controller]);
  var title = locale.contextMenuMerge;

  var handleClick = function handleClick() {
    controller.run('onAction', mergeTableCells(table));
  }; // MergeButton SplitButton 二选一逻辑，非常业务化
  // 但是条件又属于与表格组件逻辑强关联
  // 目前除了在此处直接蒸发，没有其他方式实现


  if (!isSelectionSupportMerge && isSelectionSupportSplit) {
    return null;
  }

  return /*#__PURE__*/_createElement(IconButton, _extends({}, rest, {
    icon: _ref,
    title: title,
    tooltip: title,
    testid: "bi-toolbar-tablesimplemerge",
    onClick: handleClick,
    disabled: !isSelectionSupportMerge,
    role: PluginRoles.tableMerge
  }));
}

TableSimpleMergeButton.needRender = function (controller) {
  var selection = getTableSelection(controller);
  if (!selection) return false;
  var node = controller.value.document.getNode(selection.key);
  if (!(node && Table.isTable(node))) return false;
  var tableRowCount = node.nodes.length - 1;
  var tableColCount = (node.data.colsWidth || []).length - 1;
  var startRowIndex = selection.startRowIndex,
      startColIndex = selection.startColIndex,
      endRowIndex = selection.endRowIndex,
      endColIndex = selection.endColIndex;
  var isSelectWholeRow = startColIndex === 0 && endColIndex >= tableColCount;
  var isSelectWholeCol = startRowIndex === 0 && endRowIndex >= tableRowCount;
  var isSelectWholeTable = isSelectWholeRow && isSelectWholeCol;
  var isSelectSingleCell = startColIndex === endColIndex && startRowIndex === endRowIndex;

  if (isSelectWholeTable || isSelectSingleCell) {
    return false;
  }

  return true;
};
//# sourceMappingURL=tableSimpleMergeButton.js.map