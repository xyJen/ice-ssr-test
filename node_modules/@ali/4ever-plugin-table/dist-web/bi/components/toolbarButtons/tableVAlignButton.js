import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { VerticalAlignSelect } from '@ali/we-toolbar';
import { TableRole as PluginRoles } from "../../../utils/role";
import getTable from "../../utils/getTable";
import getTableSelection from "../../utils/getTableSelection";
import { setTableCellVAlign } from "../../actions";
import getVAlign from "../../utils/getVAlign";
import { DEFAULT_TABLE_ALIGNMENT } from "../../constants";
var SUPPORT_ALIGNMENT = {
  middle: true,
  top: true,
  bottom: true
};
export default function TableVAlignButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var alignment = getVAlign(controller);
  alignment = SUPPORT_ALIGNMENT[alignment] ? alignment : DEFAULT_TABLE_ALIGNMENT;
  var selection = getTableSelection(controller);
  var tip = locale.vAlignMiddle;

  if (alignment === 'top') {
    tip = locale.vAlignTop;
  } else if (alignment === 'bottom') {
    tip = locale.vAlignBottom;
  }

  var handleChange = function handleChange(vAlign) {
    var table = getTable(controller.value);
    controller.run('onAction', setTableCellVAlign(table, selection, vAlign));
  };

  return /*#__PURE__*/_createElement(VerticalAlignSelect, _extends({}, rest, {
    title: tip,
    testid: "bi-toolbar-valign",
    defaultValue: DEFAULT_TABLE_ALIGNMENT,
    value: alignment,
    disabled: !selection,
    onChange: handleChange,
    role: PluginRoles.tableVAlignSelect
  }));
}
//# sourceMappingURL=tableVAlignButton.js.map