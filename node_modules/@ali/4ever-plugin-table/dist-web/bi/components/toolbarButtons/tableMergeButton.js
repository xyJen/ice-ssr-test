import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { MergeCellButton } from '@ali/we-toolbar';
import { TableRole as PluginRoles } from "../../../utils/role";
import { mergeTableCells, splitTableCell } from "../../actions";
import getTable from "../../utils/getTable";
import getTableSelection from "../../utils/getTableSelection";
export default function TableMergeButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var table = getTable(controller.value);
  var selection = getTableSelection(controller);
  var isSelectionSupportSplit = React.useMemo(function () {
    return !!table && controller.query('isSelectionSupportSplit', {
      visible: true,
      node: table
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [table, selection, controller]);
  var isSelectionSupportMerge = React.useMemo(function () {
    return !!table && controller.query('isSelectionSupportMerge', {
      visible: true,
      node: table
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [table, selection, controller]);
  var disabled = false;
  var status;
  var title = '';

  if (isSelectionSupportMerge) {
    status = 'unmerged';
    title = locale.contextMenuMerge;
  } else if (isSelectionSupportSplit) {
    status = 'merged';
    title = locale.toastUnmerge;
  } else {
    disabled = true;
  }

  var handleChange = function handleChange(value) {
    if (value === 'merged') {
      controller.run('onAction', mergeTableCells(table));
    } else if (value === 'unmerged') {
      controller.run('onAction', splitTableCell(table));
    }
  };

  var handleClick = function handleClick() {
    if (status === 'merged') {
      controller.run('onAction', splitTableCell(table));
    } else if (status === 'unmerged') {
      controller.run('onAction', mergeTableCells(table));
    }
  };

  return /*#__PURE__*/_createElement(MergeCellButton, _extends({}, rest, {
    title: title,
    testid: "bi-toolbar-tablemerge",
    onSelect: handleChange,
    onClick: handleClick,
    status: status,
    disabled: disabled,
    role: PluginRoles.tableMerge
  }));
}
//# sourceMappingURL=tableMergeButton.js.map