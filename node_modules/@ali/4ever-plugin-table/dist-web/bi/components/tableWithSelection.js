import React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import TableSelection from "./tableSelection";
import TableHoverRect from "./tableSelection/tableHoverRect";
import { UpdateTableSelectionContext } from "../../utils/hooks/useUpdateTableSelection";
import PureTable from "../../components/pureTable";
var Wrapper = /*#__PURE__*/styled.div(["position:relative;"]);
var TableWithSelection = /*#__PURE__*/forwardRef(function (props, forRef) {
  var controller = props.controller,
      node = props.node,
      children = props.children,
      left = props.left,
      isSelectionHighlight = props.isSelectionHighlight,
      hoverSelection = props.hoverSelection,
      tableSelection = props.tableSelection,
      getTableSelection = props.getTableSelection,
      scale = props.scale;
  var tableRef = useRef(null);
  var wrapperRef = useRef(null);

  var _useState = useState(0),
      update = _useState[0],
      setUpdate = _useState[1];

  useEffect(function () {
    if (typeof forRef === 'function') {
      forRef(tableRef.current);
    } else if (forRef) {
      forRef.current = tableRef.current;
    }
  }, [tableRef, forRef]);
  var forceUpdate = useCallback(function () {
    setUpdate(function (u) {
      return ++u;
    });
  }, []);
  var updateContext = useMemo(function () {
    return [update, forceUpdate];
  }, [update, forceUpdate]);
  return /*#__PURE__*/_createElement(Wrapper, {
    ref: wrapperRef
  }, /*#__PURE__*/_createElement(UpdateTableSelectionContext.Provider, {
    value: updateContext
  }, /*#__PURE__*/_createElement(PureTable, {
    ref: tableRef,
    controller: controller,
    node: node,
    left: left,
    isMobile: false
  }, children), /*#__PURE__*/_createElement(TableSelection, {
    "data-testid": "table-selection-wrapper",
    node: node,
    controller: controller,
    selection: tableSelection,
    tableRef: tableRef,
    scale: scale,
    isHighlight: isSelectionHighlight,
    getTableSelection: getTableSelection,
    forceUpdate: update
  })), /*#__PURE__*/_createElement(TableHoverRect, {
    "data-testid": "table-selection-wrapper",
    node: node,
    tableRef: tableRef,
    scale: scale,
    hoverSelection: hoverSelection
  }));
});
export default TableWithSelection;
//# sourceMappingURL=tableWithSelection.js.map