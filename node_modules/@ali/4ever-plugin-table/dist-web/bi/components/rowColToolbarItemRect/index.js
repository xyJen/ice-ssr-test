import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { THEME } from "../../constants";
var ToolbarItemBox = /*#__PURE__*/styled.div(["position:relative;box-sizing:border-box;cursor:default;"]);
export var RowColToolbarItemRect = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _dataFlags;

  var _props$style = props.style,
      propsStyle = _props$style === void 0 ? {} : _props$style,
      type = props.type,
      index = props.index,
      length = props.length,
      deleteRange = props.deleteRange,
      selectRanges = props.selectRanges,
      activeRange = props.activeRange,
      rest = _objectWithoutPropertiesLoose(props, ["style", "type", "index", "length", "deleteRange", "selectRanges", "activeRange"]);

  var isSelected = function isSelected(i) {
    return selectRanges && selectRanges.findIndex(function (range) {
      return i >= range.start && i <= range.end;
    }) !== -1;
  };

  var getBgColor = function getBgColor(i) {
    if (deleteRange && i >= deleteRange.start && i <= deleteRange.end) {
      return 'rgba(255, 0, 0, 0.67)';
    }

    if (isSelected(i)) {
      return 'rgb(138, 185, 252)';
    }

    if (activeRange && i >= activeRange.start && i <= activeRange.end) {
      return 'rgb(233, 233, 235)';
    }

    return THEME.toolbarBgColor["default"];
  };

  var getBorderColor = function getBorderColor(i) {
    if (deleteRange && i >= deleteRange.start && i <= deleteRange.end) {
      return THEME.red1;
    }

    if (isSelected(i)) {
      return THEME.blue3;
    }

    return THEME.toolbarBorderColor;
  };

  var getMiddleBorderColor = function getMiddleBorderColor(i) {
    if (i === length - 1) return getBorderColor(i);

    if (deleteRange) {
      if (i === deleteRange.start - 1 || i === deleteRange.end) {
        return THEME.red1;
      } else if (i >= deleteRange.start && i <= deleteRange.end) {
        return 'rgb(243, 94, 91, .4)';
      }
    }

    if (selectRanges) {
      if (selectRanges.find(function (range) {
        return range.start - 1 === i || i === range.end;
      })) {
        // if (i === selectRange.start - 1 || i === selectRange.end) {
        return THEME.blue3;
      } else if (isSelected(i)) {
        return '#7ba9ec';
      }
    }

    return THEME.toolbarBorderColor;
  };

  var style = {
    backgroundColor: getBgColor(index)
  };
  var borderStyle = "1px solid " + getBorderColor(index);

  if (type === 'row') {
    style.borderTop = index === 0 ? borderStyle : '';
    style.borderBottom = "1px solid " + getMiddleBorderColor(index);
    style.borderLeft = borderStyle;
    style.boxShadow = "1px 0px 0px 0px " + getBorderColor(index);
  } else if (type === 'col') {
    style.borderRight = "1px solid " + getMiddleBorderColor(index);
    style.borderTop = borderStyle;
    style.borderLeft = index === 0 ? borderStyle : '';
  }

  var dataFlags = (_dataFlags = {}, _dataFlags["data-cangjie-" + type + "-toolbar-item"] = true, _dataFlags);
  return /*#__PURE__*/_createElement(ToolbarItemBox, _extends({
    ref: ref,
    key: index,
    "data-index": index,
    "data-ob": "true",
    "data-testid": "table-" + type + "-toolbar-item"
  }, dataFlags, {
    style: _extends({}, style, propsStyle)
  }, rest), props.children);
});
//# sourceMappingURL=index.js.map