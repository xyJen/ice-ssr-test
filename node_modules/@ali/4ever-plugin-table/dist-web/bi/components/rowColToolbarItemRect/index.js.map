{"version":3,"sources":["../../../../../src/bi/components/rowColToolbarItemRect/index.tsx"],"names":["React","styled","THEME","ToolbarItemBox","div","RowColToolbarItemRect","forwardRef","props","ref","style","propsStyle","type","index","length","deleteRange","selectRanges","activeRange","rest","isSelected","i","findIndex","range","start","end","getBgColor","toolbarBgColor","getBorderColor","red1","blue3","toolbarBorderColor","getMiddleBorderColor","find","backgroundColor","borderStyle","borderTop","borderBottom","borderLeft","boxShadow","borderRight","dataFlags","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { THEME } from '../../constants';\n\nconst ToolbarItemBox = styled.div`\n  position: relative;\n  box-sizing: border-box;\n  cursor: default;\n`;\n\nexport interface Range {\n  start: number;\n  end: number;\n}\n\ntype Props = {\n  index: number;\n  length: number;\n  type: 'row' | 'col';\n  // 选区所在行列\n  activeRange?: Range | null;\n  // 选中行列、hover 行列\n  selectRanges?: Range[] | null;\n  // 删除行列范围\n  deleteRange?: Range | null;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nexport const RowColToolbarItemRect = React.forwardRef<HTMLDivElement, Props>((props, ref) => {\n  const {\n    style: propsStyle = {},\n    type,\n    index,\n    length,\n    deleteRange,\n    selectRanges,\n    activeRange,\n    ...rest\n  } = props;\n\n  const isSelected = (i: number) =>\n    selectRanges &&\n    selectRanges.findIndex((range) => i >= range.start && i <= range.end) !==\n      -1;\n\n  const getBgColor = (i: number) => {\n    if (deleteRange && i >= deleteRange.start && i <= deleteRange.end) {\n      return 'rgba(255, 0, 0, 0.67)';\n    }\n    if (isSelected(i)) {\n      return 'rgb(138, 185, 252)';\n    }\n    if (activeRange && i >= activeRange.start && i <= activeRange.end) {\n      return 'rgb(233, 233, 235)';\n    }\n    return THEME.toolbarBgColor.default;\n  };\n\n  const getBorderColor = (i: number) => {\n    if (deleteRange && i >= deleteRange.start && i <= deleteRange.end) {\n      return THEME.red1;\n    }\n    if (isSelected(i)) {\n      return THEME.blue3;\n    }\n    return THEME.toolbarBorderColor;\n  };\n\n  const getMiddleBorderColor = (i: number) => {\n    if (i === length - 1) return getBorderColor(i);\n\n    if (deleteRange) {\n      if (i === deleteRange.start - 1 || i === deleteRange.end) {\n        return THEME.red1;\n      } else if (i >= deleteRange.start && i <= deleteRange.end) {\n        return 'rgb(243, 94, 91, .4)';\n      }\n    }\n    if (selectRanges) {\n      if (selectRanges.find((range) => (range.start - 1 === i || i === range.end))) {\n      // if (i === selectRange.start - 1 || i === selectRange.end) {\n        return THEME.blue3;\n      } else if (isSelected(i)) {\n        return '#7ba9ec';\n      }\n    }\n    return THEME.toolbarBorderColor;\n  };\n\n  const style: React.CSSProperties = {\n    backgroundColor: getBgColor(index),\n  };\n  const borderStyle = `1px solid ${getBorderColor(index)}`;\n  if (type === 'row') {\n    style.borderTop = index === 0 ? borderStyle : '';\n    style.borderBottom = `1px solid ${getMiddleBorderColor(index)}`;\n    style.borderLeft = borderStyle;\n    style.boxShadow = `1px 0px 0px 0px ${getBorderColor(index)}`;\n  } else if (type === 'col') {\n    style.borderRight = `1px solid ${getMiddleBorderColor(index)}`;\n    style.borderTop = borderStyle;\n    style.borderLeft = index === 0 ? borderStyle : '';\n  }\n\n  const dataFlags = {\n    [`data-cangjie-${type}-toolbar-item`]: true,\n  };\n\n  return (\n    <ToolbarItemBox\n      ref={ref}\n      key={index}\n      data-index={index}\n      data-ob=\"true\"\n      data-testid={`table-${type}-toolbar-item`}\n      {...dataFlags}\n      style={{ ...style, ...propsStyle }}\n      {...rest}\n    >\n      {props.children}\n    </ToolbarItemBox>\n  );\n});\n"],"file":"index.js"}