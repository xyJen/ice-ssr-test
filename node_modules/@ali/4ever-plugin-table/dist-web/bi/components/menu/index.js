import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { MenuItem, SubMenu, TablePanel } from '@ali/we-design';
import { TableRole as PluginRoles } from "../../../utils/role";
import { dispatchCustomEvent, LEGAL_EVENT, removeNewlineData, removeNewlineTriggerText } from '@ali/4ever-utils';
import isSelectionInTableCell from "../../utils/isSelectionInTableCell";
import { insertTable } from "../../actions";
var DEFAULT_COL = 3;
var DEFAULT_ROW = 3;
export default function TableMenu(props) {
  var _React$useState = React.useState(DEFAULT_COL),
      selectedCol = _React$useState[0],
      setSelectedCol = _React$useState[1];

  var _React$useState2 = React.useState(DEFAULT_ROW),
      selectedRow = _React$useState2[0],
      setSelectedRow = _React$useState2[1];

  var menuItem = props.menuItem,
      controller = props.controller;
  var value = controller.value;

  var menuKey = menuItem.menuKey,
      title = menuItem.title,
      rest = _objectWithoutPropertiesLoose(menuItem, ["menuKey", "title"]);

  var tableSelection = controller.query('hasTableSelection');
  var isDisabled = tableSelection || isSelectionInTableCell(value, {
    excludeColumns: true
  }) || controller.query('isSelectionInLink') || controller.query('isSelectionInMention');

  var onChange = function onChange(row, col) {
    setSelectedCol(col);
    setSelectedRow(row);
  };

  var insert = function insert(row, col) {
    if (row === void 0) {
      row = DEFAULT_ROW;
    }

    if (col === void 0) {
      col = DEFAULT_COL;
    }

    controller.run('onAction', insertTable(row, col));
  }; // NOTE: 通过回车插入，也会调用 onClick，we-design 此时没有传入 event 参数


  var handleClickMenuItem = function handleClickMenuItem(_, e) {
    insert(selectedRow, selectedCol);
    e == null ? void 0 : e.stopPropagation();
  };

  var handleClickSubMenu = function handleClickSubMenu() {
    if (isDisabled) return;
    controller.run('onAction', removeNewlineTriggerText(false));
    controller.run('onAction', removeNewlineData());
    insert();
    dispatchCustomEvent(LEGAL_EVENT.quickInsertMenuVisible, {
      visible: false
    });
  };

  return /*#__PURE__*/_createElement("div", {
    onClick: handleClickSubMenu
  }, /*#__PURE__*/_createElement(SubMenu, _extends({}, rest, {
    disabled: isDisabled,
    title: title || '',
    overlayStyle: {
      padding: 0
    },
    overlayClassName: "menu-table-overlay"
  }), /*#__PURE__*/_createElement(MenuItem, {
    menuKey: menuKey || 'tablePicker',
    hoverable: false,
    role: PluginRoles.tablePicker,
    style: {
      height: 'auto',
      padding: 0,
      margin: 0
    },
    onClick: handleClickMenuItem
  }, /*#__PURE__*/_createElement(TablePanel, {
    row: 10,
    col: 10,
    selectedCol: selectedCol,
    selectedRow: selectedRow,
    onChange: onChange
  }))));
}
//# sourceMappingURL=index.js.map