import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/* eslint-disable react/no-find-dom-node */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { Tooltip } from '@ali/we-design';
import { ButtonWrapper, IconWrapper } from "../styled";
import ToolbarTablePlusNormal from "./plus";
var InsertOuterWrapper = /*#__PURE__*/styled(ButtonWrapper)(["position:relative;transform:scale(", ");color:white;border:none;background-color:#0089FF;cursor:default;"], function (p) {
  return p.isShow ? 1 : 0.8;
});

var InlineToolbarInsertButton = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(InlineToolbarInsertButton, _React$Component);

  function InlineToolbarInsertButton() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.handleMouseDown = function (e) {
      e.preventDefault();
      e.stopPropagation();
      var onInsert = _this.props.onInsert;
      onInsert();
    };

    return _this;
  }

  var _proto = InlineToolbarInsertButton.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    var onShowIndicatorVisible = this.props.onShowIndicatorVisible;
    onShowIndicatorVisible(false);
  };

  _proto.render = function render() {
    var _this$props = this.props,
        mode = _this$props.mode,
        locale = _this$props.locale,
        scale = _this$props.scale,
        insertIndex = _this$props.insertIndex;
    var placement = mode === 'row' ? 'left' : 'top';
    var tip = mode === 'row' ? locale.toolbarInsertRow : locale.toolbarInsertCol;
    var isShow = insertIndex !== -1;
    return /*#__PURE__*/_createElement(InsertOuterWrapper, {
      scale: scale,
      isShow: isShow,
      onMouseDown: this.handleMouseDown,
      onTouchEnd: this.handleMouseDown,
      "data-testid": "table-insert-" + mode + "-button"
    }, /*#__PURE__*/_createElement(Tooltip, {
      placement: placement,
      title: tip
    }, /*#__PURE__*/_createElement(IconWrapper, null, /*#__PURE__*/_createElement(ToolbarTablePlusNormal, {
      scale: scale
    }))));
  };

  return InlineToolbarInsertButton;
}(React.Component);

export { InlineToolbarInsertButton as default };
//# sourceMappingURL=inlineToolbarInsertButton.js.map