import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
export var INDICATOR_WRAPPER_WIDTH = 12;
export var INDICATOR_WIDTH = 3;
export var GAP_BEWTEEN_INDICATOR_TOOLBAR = 4;
var BG_COLOR = 'rgba(23, 26, 29, 0.24)';
var Svg = /*#__PURE__*/styled.svg(["transform:translate(", ");opacity:1;transition:opacity ease-in 0.2s;"], function (p) {
  return p.translateX / p.scale + "px, " + p.translateY / p.scale + "px";
});
var IndicatorWrapper = /*#__PURE__*/styled.div(["position:absolute;display:flex;width:", "px;height:", "px;justify-content:center;align-items:center;"], function (p) {
  return INDICATOR_WRAPPER_WIDTH / p.scale;
}, function (p) {
  return INDICATOR_WRAPPER_WIDTH / p.scale;
});
var InsertButtonIndicator = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _props$translateX = props.translateX,
      translateX = _props$translateX === void 0 ? 0 : _props$translateX,
      _props$translateY = props.translateY,
      translateY = _props$translateY === void 0 ? 0 : _props$translateY,
      _props$scale = props.scale,
      scale = _props$scale === void 0 ? 1 : _props$scale,
      onMouseEnter = props.onMouseEnter,
      rest = _objectWithoutPropertiesLoose(props, ["translateX", "translateY", "scale", "onMouseEnter"]);

  var indicatorWidth = Math.round(INDICATOR_WIDTH / scale);
  var hanldePreventDefault = React.useCallback(function (e) {
    e.preventDefault();
    e.stopPropagation();
  }, []);
  var handleMouseEnter = React.useCallback(function () {
    var dataIndex = rest['data-index'] || 0;
    var insertIndex = dataIndex;
    onMouseEnter && onMouseEnter(insertIndex);
  }, [onMouseEnter, rest]);
  return /*#__PURE__*/_createElement(IndicatorWrapper, _extends({
    ref: ref,
    scale: scale,
    onMouseDown: hanldePreventDefault,
    onMouseUp: hanldePreventDefault,
    onMouseEnter: handleMouseEnter
  }, rest), /*#__PURE__*/_createElement(Svg, {
    width: indicatorWidth,
    height: indicatorWidth,
    viewBox: "0 0 " + indicatorWidth + "\n        " + indicatorWidth,
    fill: "none",
    translateY: translateY,
    translateX: translateX,
    scale: scale
  }, /*#__PURE__*/_createElement("circle", {
    cx: indicatorWidth / 2,
    cy: indicatorWidth / 2,
    r: indicatorWidth / 2,
    fill: BG_COLOR
  })));
});
export default InsertButtonIndicator;
//# sourceMappingURL=insertButtonIndicator.js.map