{"version":3,"sources":["../../../../../src/bi/components/inlineToolbarButtons/inlineToolbarInsertButton.tsx"],"names":["React","styled","Tooltip","ButtonWrapper","IconWrapper","ToolbarTablePlusNormal","InsertOuterWrapper","p","isShow","InlineToolbarInsertButton","handleMouseDown","e","preventDefault","stopPropagation","onInsert","props","componentWillUnmount","onShowIndicatorVisible","render","mode","locale","scale","insertIndex","placement","tip","toolbarInsertRow","toolbarInsertCol","Component"],"mappings":";;AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAA4B,a;AAC5B,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,aAAT,EAAwBC,WAAxB;AACA,OAAOC,sBAAP;AAEA,IAAMC,kBAAkB,gBAAGL,MAAM,CAACE,aAAD,CAAT,+GAEH,UAACI,CAAD;AAAA,SAAQA,CAAC,CAACC,MAAF,GAAW,CAAX,GAAe,GAAvB;AAAA,CAFG,CAAxB;;IAwBqBC,yB;;;;;;;;;;;;UACnBC,e,GAAkB,UAACC,CAAD,EAA4C;AAC5DA,MAAAA,CAAC,CAACC,cAAF;AACAD,MAAAA,CAAC,CAACE,eAAF;AAF4D,UAGpDC,QAHoD,GAGvC,MAAKC,KAHkC,CAGpDD,QAHoD;AAI5DA,MAAAA,QAAQ;AACT,K;;;;;;;SAEDE,oB,GAAA,gCAAuB;AAAA,QACbC,sBADa,GACc,KAAKF,KADnB,CACbE,sBADa;AAErBA,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACD,G;;SAEDC,M,GAAA,kBAAS;AAAA,sBACsC,KAAKH,KAD3C;AAAA,QACCI,IADD,eACCA,IADD;AAAA,QACOC,MADP,eACOA,MADP;AAAA,QACeC,KADf,eACeA,KADf;AAAA,QACsBC,WADtB,eACsBA,WADtB;AAEP,QAAMC,SAAS,GAAGJ,IAAI,KAAK,KAAT,GAAiB,MAAjB,GAA0B,KAA5C;AACA,QAAMK,GAAG,GAAGL,IAAI,KAAK,KAAT,GAAiBC,MAAM,CAACK,gBAAxB,GAA2CL,MAAM,CAACM,gBAA9D;AACA,QAAMlB,MAAM,GAAGc,WAAW,KAAK,CAAC,CAAhC;AACA,wBACE,eAAC,kBAAD;AACE,MAAA,KAAK,EAAED,KADT;AAEE,MAAA,MAAM,EAAEb,MAFV;AAGE,MAAA,WAAW,EAAE,KAAKE,eAHpB;AAIE,MAAA,UAAU,EAAE,KAAKA,eAJnB;AAKE,uCAA6BS,IAA7B;AALF,oBAOE,eAAC,OAAD;AACE,MAAA,SAAS,EAAEI,SADb;AAEE,MAAA,KAAK,EAAEC;AAFT,oBAIE,eAAC,WAAD,qBACE,eAAC,sBAAD;AAAwB,MAAA,KAAK,EAAEH;AAA/B,MADF,CAJF,CAPF,CADF;AAkBD,G;;;EApCoDrB,KAAK,CAAC2B,S;;SAAxClB,yB","sourcesContent":["/* eslint-disable react/no-find-dom-node */\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport Table from '../../../mo/models';\nimport { Tooltip } from '@ali/we-design';\nimport { ButtonWrapper, IconWrapper } from '../styled';\nimport ToolbarTablePlusNormal from './plus';\n\nconst InsertOuterWrapper = styled(ButtonWrapper)`\n  position: relative;\n  transform: scale(${(p) => (p.isShow ? 1 : 0.8)});\n  color: white;\n  border: none;\n  background-color: #0089FF;\n  cursor: default;\n`;\n\ninterface ToolbarMenuProps {\n  mode: string;\n  selection: any;\n  insertIndex: number;\n  scale: number;\n  locale: any;\n  onInsert: () => void;\n  onShowIndicatorVisible: (isVisible: boolean) => void;\n  table?: Table;\n  tableRef?: React.RefObject<HTMLTableElement>;\n  zoomContainer?: HTMLDivElement;\n  getAllColsNodes?: () => HTMLDivElement[];\n  rowIndicatorRef?: React.RefObject<HTMLTableElement | null>;\n}\n\nexport default class InlineToolbarInsertButton extends React.Component<ToolbarMenuProps> {\n  handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { onInsert } = this.props;\n    onInsert();\n  };\n\n  componentWillUnmount() {\n    const { onShowIndicatorVisible } = this.props;\n    onShowIndicatorVisible(false);\n  }\n\n  render() {\n    const { mode, locale, scale, insertIndex } = this.props;\n    const placement = mode === 'row' ? 'left' : 'top';\n    const tip = mode === 'row' ? locale.toolbarInsertRow : locale.toolbarInsertCol;\n    const isShow = insertIndex !== -1;\n    return (\n      <InsertOuterWrapper\n        scale={scale}\n        isShow={isShow}\n        onMouseDown={this.handleMouseDown}\n        onTouchEnd={this.handleMouseDown}\n        data-testid={`table-insert-${mode}-button`}\n      >\n        <Tooltip\n          placement={placement}\n          title={tip}\n        >\n          <IconWrapper>\n            <ToolbarTablePlusNormal scale={scale} />\n          </IconWrapper>\n        </Tooltip>\n      </InsertOuterWrapper>\n    );\n  }\n}\n"],"file":"inlineToolbarInsertButton.js"}