import _extends from "@babel/runtime/helpers/extends";
import equal from 'fast-deep-equal';
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { PixelColsWidthContext, RowsClientHeightContext } from "../../utils/hooks";
export var ContextContainer = function ContextContainer(props) {
  var isSelected = props.isSelected;

  var _React$useState = React.useState({}),
      rowsClientHeight = _React$useState[0],
      setRowsClientHeight = _React$useState[1];

  var rowsClientHeightRef = React.useRef({});
  var updateRowClientHeight = React.useCallback(function (rowKey, height) {
    if (height === null) {
      delete rowsClientHeightRef.current[rowKey];
    } else {
      rowsClientHeightRef.current[rowKey] = height;
    }

    if (isSelected) {
      setRowsClientHeight(_extends({}, rowsClientHeightRef.current));
    }
  }, [isSelected]);
  React.useEffect(function () {
    if (isSelected && !equal(rowsClientHeight, rowsClientHeightRef.current)) {
      setRowsClientHeight(_extends({}, rowsClientHeightRef.current));
    }
  }, [isSelected, rowsClientHeight]);
  var rowsClientHeightValue = React.useMemo(function () {
    return [rowsClientHeight, updateRowClientHeight];
  }, [rowsClientHeight, updateRowClientHeight]);

  var _React$useState2 = React.useState([]),
      pixelColsWidth = _React$useState2[0],
      setPixelColsWidth = _React$useState2[1];

  var pixelColsWidthValue = React.useMemo(function () {
    return [pixelColsWidth, setPixelColsWidth];
  }, [pixelColsWidth]);
  return /*#__PURE__*/_createElement(RowsClientHeightContext.Provider, {
    value: rowsClientHeightValue
  }, /*#__PURE__*/_createElement(PixelColsWidthContext.Provider, {
    value: pixelColsWidthValue
  }, props.children));
};
//# sourceMappingURL=contextContainer.js.map