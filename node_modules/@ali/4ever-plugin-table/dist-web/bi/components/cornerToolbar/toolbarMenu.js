import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { DeleteBetaNormal, Tooltip } from '@ali/we-design';
var Button = /*#__PURE__*/styled.span(["position:relative;display:flex;align-items:center;justify-content:center;color:rgba(17,31,44,0.72);margin:0;padding:0;width:28px;height:28px;font-size:16px;cursor:pointer;line-height:16px;border-radius:4px;&:hover{background-color:rgba(17,31,44,0.08);}"]);

var _ref = /*#__PURE__*/_createElement("span", null, /*#__PURE__*/_createElement(DeleteBetaNormal, null));

var ToolbarMenu = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ToolbarMenu, _React$Component);

  function ToolbarMenu() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.handleMouseDown = function (e) {
      e.preventDefault(); // Prevent blur.

      e.stopPropagation();
      var onMenuEvent = _this.props.onMenuEvent;
      onMenuEvent('delete-table');
    };

    _this.highlightSelection = function () {
      var setIsHighlightSelection = _this.props.setIsHighlightSelection;
      setIsHighlightSelection(true);
    };

    _this.cancelHighlightSelection = function () {
      var setIsHighlightSelection = _this.props.setIsHighlightSelection;
      setIsHighlightSelection(false);
    };

    return _this;
  }

  var _proto = ToolbarMenu.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        style = _this$props.style,
        _this$props$locale = _this$props.locale,
        locale = _this$props$locale === void 0 ? {} : _this$props$locale;
    return /*#__PURE__*/_createElement(Button, {
      style: style,
      onMouseDown: this.handleMouseDown,
      onTouchEnd: this.handleMouseDown,
      onMouseOver: this.highlightSelection,
      onMouseLeave: this.cancelHighlightSelection
    }, /*#__PURE__*/_createElement(Tooltip, {
      placement: "top",
      title: locale.contextMenuDeleteTable
    }, _ref));
  };

  return ToolbarMenu;
}(React.Component);

export { ToolbarMenu as default };
//# sourceMappingURL=toolbarMenu.js.map