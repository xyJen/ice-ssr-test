/* eslint-disable react/no-unused-prop-types */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { Commands } from '@ali/4ever-cangjie';
import Table from "../../../mo/models";
import { AdaptNormal, SelectedNormalNormal } from '@ali/we-icon';
import { Switch } from '@ali/we-design';
import { TOOLBAR_ITEM_SIZE } from "../../constants";
import { resizeTableWidthFitContainer, setTableAutofitWidthEnable, setTableAutofitWidthDisable, selectTable, removeTableRowHeader, setTableRowHeader, removeTableColHeader, setTableColHeader } from "../../actions";
import { TYPE_MENU_ITEM, TYPE_SUB_MENU } from '@ali/4ever-component';
import { MenuTitleWithNewBadge } from '@ali/4ever-component';
import { DragDropdown } from '@ali/4ever-plugin-draggable';
import TableHeaderIcon from "./tableHeaderIcon";
import constants from "../../../utils/constants";
import * as hooks from "../../../utils/hooks"; // menu 菜单点击后不需要关闭的menuKey选项白名单

var MENU_ITEM_WHITE_LIST = ['table-autofit'];
var useRowIsSticky = hooks.useRowIsSticky,
    useScrollableContainerRect = hooks.useScrollableContainerRect;
var REALTABLE_PADDING = constants.REALTABLE_PADDING,
    STICKY_ROW_TOP_HEIGHT = constants.STICKY_ROW_TOP_HEIGHT,
    STICKY_TOOLBAR_INDEX_MAP = constants.STICKY_TOOLBAR_INDEX_MAP;
var ICON_SIZE = 16;
var GAP_X = 8;
var GAP_Y = 8;
var LEFT_OFFSET = -(ICON_SIZE + GAP_X);
var CornerToolbar = /*#__PURE__*/styled.div(["box-sizing:border-box;position:absolute;cursor:default;color:transparent;width:", "px;height:", "px;top:-", "px;left:", "px;line-height:0;font-size:", "px;z-index:1;transform-origin:left top;*{box-sizing:border-box;}"], function (props) {
  return Math.round(ICON_SIZE / props.scale);
}, function (props) {
  return Math.round(ICON_SIZE / props.scale);
}, function (props) {
  return (GAP_Y + ICON_SIZE - TOOLBAR_ITEM_SIZE - REALTABLE_PADDING.top) / props.scale;
}, function (props) {
  return Math.round(LEFT_OFFSET / props.scale);
}, ICON_SIZE);

var _ref = /*#__PURE__*/_createElement(AdaptNormal, null);

var _ref3 = /*#__PURE__*/_createElement(AdaptNormal, null);

var _ref4 = /*#__PURE__*/_createElement(TableHeaderIcon, null);

var TableCornerToolbar = function TableCornerToolbar(props) {
  var controller = props.controller,
      visible = props.visible,
      locale = props.locale,
      table = props.table,
      scale = props.scale,
      isSelectWholeTable = props.isSelectWholeTable,
      onSelect = props.onSelect,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      draggableConfig = props.draggableConfig,
      enableAutofitWidth = props.enableAutofitWidth,
      enableHeader = props.enableHeader,
      setTableHeaderStyle = props.setTableHeaderStyle;

  var _useRowIsSticky = useRowIsSticky(),
      isSticky = _useRowIsSticky[0];

  var _useScrollableContain = useScrollableContainerRect(),
      scrollRect = _useScrollableContain[0];

  var timer = React.useRef(null);
  var handleStopPropagation = React.useCallback(function (event) {
    event.stopPropagation();
  }, []);
  var isAutofit = Table.isAutofitWidth(table);
  var handleAutoFit = React.useCallback(function () {
    // 无论是否命中灰度，只要是自适应
    if (isAutofit) {
      controller.run('onAction', setTableAutofitWidthDisable(table));
    } else if (enableAutofitWidth && enableAutofitWidth()) {
      controller.run('onAction', setTableAutofitWidthEnable(table));
    } else {
      controller.run('onAction', resizeTableWidthFitContainer(table));
    }

    controller.run('onAction', selectTable(table));
  }, [isAutofit, enableAutofitWidth, controller, table]);
  var handleMouseOver = React.useCallback(function (e) {
    handleStopPropagation(e);

    if (timer && timer.current) {
      clearTimeout(timer.current);
      timer.current = null;
    }

    onMouseEnter();
  }, [onMouseEnter, handleStopPropagation]);
  var handleMouseLeave = React.useCallback(function (e) {
    handleStopPropagation(e);
    timer.current = setTimeout(function () {
      onMouseLeave();
    }, 200);
  }, [onMouseLeave, handleStopPropagation]);
  React.useEffect(function () {
    if (timer && timer.current) {
      clearTimeout(timer.current);
    }
  }, []);
  var handleToggleRowHeader = React.useCallback(function (_, e) {
    e.preventDefault();
    e.stopPropagation();
    var selection = controller.value.selection;

    if (Table.isRowHeader(table)) {
      controller.run('onAction', removeTableRowHeader(table));
    } else {
      // NOTE: 需要先执行 setTableHeaderStyle
      setTableHeaderStyle == null ? void 0 : setTableHeaderStyle();
      controller.run('onAction', setTableRowHeader(table));
    }

    controller.command(Commands.select, selection);
  }, [controller, table, setTableHeaderStyle]);
  var handleToggleColHeader = React.useCallback(function () {
    var selection = controller.value.selection;

    if (Table.isColumnHeader(table)) {
      controller.run('onAction', removeTableColHeader(table));
    } else {
      // NOTE: 需要先执行 setTableHeaderStyle
      setTableHeaderStyle == null ? void 0 : setTableHeaderStyle();
      controller.run('onAction', setTableColHeader(table));
    }

    controller.command(Commands.select, selection);
  }, [controller, table, setTableHeaderStyle]);

  var _ref2 = /*#__PURE__*/_createElement(Switch, {
    testid: "table-autofit-switch",
    checked: isAutofit,
    size: "small",
    onChange: handleAutoFit
  });

  var customizeMenus = React.useMemo(function () {
    var menus = [];

    if (enableAutofitWidth && enableAutofitWidth() || isAutofit) {
      menus.push({
        type: TYPE_MENU_ITEM,
        testid: 'table-autofit-menu-item',
        title: locale == null ? void 0 : locale.widthFitContainer,
        icon: _ref,
        menuKey: 'table-autofit',
        hoverable: false,
        autoClose: false,
        extra: _ref2
      });
    } else {
      menus.push({
        type: TYPE_MENU_ITEM,
        title: locale == null ? void 0 : locale.widthFitContainer,
        icon: _ref3,
        onClick: handleAutoFit
      });
    }

    if (enableHeader && enableHeader()) {
      menus.push({
        type: TYPE_SUB_MENU,
        testid: 'table-header-sub-menu',
        title: /*#__PURE__*/_createElement(MenuTitleWithNewBadge, {
          title: locale == null ? void 0 : locale.tableHeader
        }),
        icon: _ref4,
        menus: [{
          type: TYPE_MENU_ITEM,
          testid: 'table-header-row-menu-item',
          title: locale == null ? void 0 : locale.rowHeader,
          extra: Table.isRowHeader(table) ? /*#__PURE__*/_createElement(SelectedNormalNormal, {
            pathColors: ['#171A1D']
          }) : null,
          onClick: handleToggleRowHeader,
          menuKey: 'table-header-row'
        }, {
          type: TYPE_MENU_ITEM,
          testid: 'table-header-column-menu-item',
          title: locale == null ? void 0 : locale.columnHeader,
          extra: Table.isColumnHeader(table) ? /*#__PURE__*/_createElement(SelectedNormalNormal, {
            pathColors: ['#171A1D']
          }) : null,
          onClick: handleToggleColHeader,
          menuKey: 'table-header-col'
        }]
      });
    }

    return menus;
  }, [enableAutofitWidth, enableHeader, handleAutoFit, handleToggleColHeader, handleToggleRowHeader, isAutofit, locale == null ? void 0 : locale.columnHeader, locale == null ? void 0 : locale.rowHeader, locale == null ? void 0 : locale.tableHeader, locale == null ? void 0 : locale.widthFitContainer, table]);
  var style = React.useMemo(function () {
    if (!visible) {
      return {
        display: 'none'
      };
    }

    var ret = {
      display: 'block'
    };

    if (isSticky) {
      ret.position = 'fixed';
      ret.top = STICKY_ROW_TOP_HEIGHT + scrollRect.top - GAP_Y - ICON_SIZE;
      ret.zIndex = STICKY_TOOLBAR_INDEX_MAP.cornerToolbar;
      ret.left = Number.isFinite(scrollRect.left) ? scrollRect.left : 'unset';
      ret.transform = "translateX(" + LEFT_OFFSET + "px)";
    }

    return ret;
  }, [isSticky, scrollRect, visible]);
  var handleMenuItemClick = React.useCallback(function (menuKey, setMenuVisible) {
    var canMenuVisible = MENU_ITEM_WHITE_LIST.includes(menuKey);

    if (!canMenuVisible) {
      setMenuVisible(false);
    }

    onMouseLeave();
  }, [onMouseLeave]);
  return /*#__PURE__*/_createElement(CornerToolbar, {
    style: style,
    role: "toolbar",
    "data-testid": "table-corner-toobar-button",
    "data-sticky": isSticky,
    scale: scale,
    onMouseLeave: handleMouseLeave,
    onMouseOver: handleMouseOver,
    onContextMenu: handleStopPropagation,
    onMouseDown: handleStopPropagation,
    onTouchStart: handleStopPropagation,
    onMouseUp: handleStopPropagation // 防止触发 Cangjie 选区事件

  }, /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(DragDropdown, {
    controller: controller,
    currentBlock: table,
    draggableConfig: draggableConfig,
    scale: scale // @ts-ignore
    ,
    customizeMenus: customizeMenus,
    handleClickMenuItem: handleMenuItemClick,
    active: isSelectWholeTable,
    onClickIcon: onSelect
  })));
};

export default TableCornerToolbar;
//# sourceMappingURL=index.js.map