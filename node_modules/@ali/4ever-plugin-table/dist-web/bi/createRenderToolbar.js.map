{"version":3,"sources":["../../../src/bi/createRenderToolbar.tsx"],"names":["React","ItemKey","ItemSlot","SlotType","TablePickerButton","TableFillButton","TableBorderButton","TableMergeButton","TableVAlignButton","TableThemeButton","isSelectionInTable","buttons","enableButtons","key","isInColumns","createRenderToolbar","config","props","controller","buttonName","extraProps","value","query","isInTableOrColumns","Component","iconMenu","locale"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAAmBC,OAAnB,EAA4BC,QAA5B,EAAqDC,QAArD,QAAqE,sBAArE;AACA,OAAOC,iBAAP;AACA,OAAOC,eAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,gBAAP;AACA,SAASC,kBAAT;AAEA,IAAMC,OAA+E,GAAG;AACtF,kBAAgBP,iBADsE;AAEtF,iBAAeG,gBAFuE;AAGtF,kBAAgBD,iBAHsE;AAItF,kBAAgBE,iBAJsE;AAKtF,gBAAcH,eALwE;AAMtF,iBAAeI;AANuE,CAAxF;;AASA,SAASG,aAAT,CAAuBC,GAAvB,EAA+CC,WAA/C,EAAqE;AACnE,MAAIA,WAAJ,EAAiB;AACf,YAAQD,GAAR;AACE,WAAK,cAAL;AACA,WAAK,YAAL;AACA,WAAK,cAAL;AACE,eAAO,IAAP;;AACF;AACE,eAAO,KAAP;AANJ;AAQD,GATD,MASO;AACL,YAAQA,GAAR;AACE,WAAK,cAAL;AACA,WAAK,YAAL;AACA,WAAK,aAAL;AACA,WAAK,cAAL;AACA,WAAK,cAAL;AACA,WAAK,aAAL;AACE,eAAO,IAAP;;AACF;AACE,eAAO,KAAP;AATJ;AAWD;AAEF;;AAED,eAAe,SAASE,mBAAT,CACbC,MADa,EAEE;AAGf,SAAO,UAACC,KAAD,EAAQC,UAAR,EAAuB;AAAA,QAEpBC,UAFoB,GAEOF,KAFP,CAEpBE,UAFoB;AAAA,QAERC,UAFQ,GAEOH,KAFP,CAERG,UAFQ;AAAA,QAGpBC,KAHoB,GAGVH,UAHU,CAGpBG,KAHoB;AAI5B,QAAMP,WAAW,GAAGI,UAAU,CAACI,KAAX,CAAiB,sBAAjB,CAApB;AACA,QAAMC,kBAAkB,GAAGT,WAAW,IAAIJ,kBAAkB,CAACW,KAAD,CAA5D;AAEA,QAAMG,SAAS,GAAGb,OAAO,CAACQ,UAAD,CAAzB;;AACA,QAAIK,SAAJ,EAAe;AACb;AACA,UAAIL,UAAU,KAAKlB,OAAO,CAAC,cAAD,CAAtB,IACC,CAACsB,kBADN,EAC0B;AACxB,eAAO,IAAP;AACD;;AAED,UAAI,CAACX,aAAa,CAACO,UAAD,EAAaL,WAAb,CAAlB,EAA6C;AAC3C,eAAO,IAAP;AACD;;AAED,0BACE,eAAC,QAAD;AAAU,QAAA,OAAO,EAAEX,QAAQ,CAACsB;AAA5B,sBACE,eAAC,SAAD;AACE,QAAA,UAAU,EAAEP,UADd;AAEE,QAAA,MAAM,EAAEF,MAAM,CAACU;AAFjB,SAGMN,UAHN,EADF,CADF;AASD;;AAED,WAAO,IAAP;AACD,GA/BD;AAgCD","sourcesContent":["import * as React from 'react';\nimport { ItemKeys, ItemKey, ItemSlot, RenderToolbar, SlotType } from '@ali/4ever-component';\nimport TablePickerButton, { TablePickerButtonProps } from './components/toolbarButtons/next/tablePickerButton';\nimport TableFillButton from './components/toolbarButtons/next/tableFillButton';\nimport TableBorderButton from './components/toolbarButtons/next/tableBorderSet';\nimport TableMergeButton from './components/toolbarButtons/next/tableMergeButton';\nimport TableVAlignButton, { TableVAlignButtonProps } from './components/toolbarButtons/next/tableVAlignButton';\nimport TableThemeButton from './components/toolbarButtons/next/tableThemeButton';\nimport { isSelectionInTable } from './utils';\n\nconst buttons: Partial<Record<ItemKeys, React.ComponentType<TableVAlignButtonProps>>> = {\n  'table.picker': TablePickerButton,\n  'table.merge': TableMergeButton,\n  'table.border': TableBorderButton,\n  'table.vAlign': TableVAlignButton,\n  'table.fill': TableFillButton,\n  'table.theme': TableThemeButton,\n};\n\nfunction enableButtons(key: ItemKeys | string, isInColumns: boolean) {\n  if (isInColumns) {\n    switch (key) {\n      case 'table.picker':\n      case 'table.fill':\n      case 'table.vAlign':\n        return true;\n      default:\n        return false;\n    }\n  } else {\n    switch (key) {\n      case 'table.picker':\n      case 'table.fill':\n      case 'table.merge':\n      case 'table.vAlign':\n      case 'table.border':\n      case 'table.theme':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n}\n\nexport default function createRenderToolbar(\n  config: any,\n): RenderToolbar {\n\n\n  return (props, controller) => {\n\n    const { buttonName, extraProps } = props;\n    const { value } = controller;\n    const isInColumns = controller.query('isSelectionInColumns')\n    const isInTableOrColumns = isInColumns || isSelectionInTable(value)\n\n    const Component = buttons[buttonName] as React.ComponentType<TablePickerButtonProps>;\n    if (Component) {\n      // 处理 table.picker 以外，其他都需要在选中 table 时出现\n      if (buttonName !== ItemKey['table.picker']\n        && !isInTableOrColumns) {\n        return null;\n      }\n\n      if (!enableButtons(buttonName, isInColumns)) {\n        return null;\n      }\n\n      return (\n        <ItemSlot display={SlotType.iconMenu}>\n          <Component\n            controller={controller}\n            locale={config.locale}\n            {...extraProps}\n          />\n        </ItemSlot>\n      )\n    }\n\n    return null\n  };\n}\n"],"file":"createRenderToolbar.js"}