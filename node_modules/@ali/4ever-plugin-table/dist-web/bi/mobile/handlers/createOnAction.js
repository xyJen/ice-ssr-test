/* eslint-disable no-shadow */
import { Commands } from '@ali/4ever-cangjie';
import { isActions } from "../../actions";
import resizeColsWidth from "../../commands/resizeColsWidth";
import deleteTable from "../../commands/deleteTable";
import insertTable from "../../commands/insertTable";
import setTableMinColsWidthData from "../../../utils/commands/setTableMinColsWidthData";
import adjustColsWidth from "../../../utils/commands/adjustColsWidth";
import { selectCols, selectRows, emptyTableSelection, deleteRows, deleteCols, insertCol, insertRow, insertRowBySelections } from "../../commands";
export default function createOnAction(config) {
  return function onAction(action, controller, next) {
    var enableAutofitWidth = config.enableAutofitWidth,
        enableHeader = config.enableHeader,
        setTableHeaderStyle = config.setTableHeaderStyle;

    if (isActions.isTableResizeTableColWidthAction(action)) {
      var _action$payload = action.payload,
          node = _action$payload.node,
          colIndex = _action$payload.colIndex,
          delta = _action$payload.delta,
          containerWidth = _action$payload.containerWidth;
      return resizeColsWidth(controller, {
        node: node,
        colIndex: colIndex,
        delta: delta,
        containerWidth: containerWidth
      });
    }

    if (isActions.isTableDeleteTableAction(action)) {
      var _node = action.payload.node;
      return deleteTable(controller, _node);
    }

    if (isActions.isTableInsertTableAction(action)) {
      var _action$payload2 = action.payload,
          rowSize = _action$payload2.rowSize,
          colSize = _action$payload2.colSize,
          _containerWidth = _action$payload2.containerWidth;
      var defaultAutofit = enableAutofitWidth == null ? void 0 : enableAutofitWidth();
      var defaultHeader = enableHeader == null ? void 0 : enableHeader();
      return insertTable(controller, {
        rowSize: rowSize,
        colSize: colSize,
        containerWidth: _containerWidth,
        defaultAutofit: defaultAutofit,
        defaultHeader: defaultHeader,
        setTableHeaderStyle: setTableHeaderStyle
      });
    }

    if (isActions.isTableSetTableMinColsWidthDataAction(action)) {
      var data = action.payload.data;
      return setTableMinColsWidthData(controller, data);
    }

    if (isActions.isTableAdjustColsWidthAction(action)) {
      var _action$payload3 = action.payload,
          _node2 = _action$payload3.node,
          _containerWidth2 = _action$payload3.containerWidth;
      return adjustColsWidth(controller, _node2, _containerWidth2);
    }

    if (isActions.isTableBlurAction(action)) {
      return controller.command(Commands.blur);
    }

    if (isActions.isTableSelectTableColsAction(action)) {
      var _action$payload4 = action.payload,
          _node3 = _action$payload4.node,
          startIndex = _action$payload4.startIndex,
          endIndex = _action$payload4.endIndex;
      return selectCols(controller, _node3, startIndex, endIndex);
    }

    if (isActions.isTableSelectTableRowsAction(action)) {
      var _action$payload5 = action.payload,
          _node4 = _action$payload5.node,
          _startIndex = _action$payload5.startIndex,
          _endIndex = _action$payload5.endIndex;
      return selectRows(controller, _node4, _startIndex, _endIndex);
    }

    if (isActions.isTableEmptySelectionAction(action)) {
      var _node5 = action.payload.node;
      return emptyTableSelection(controller, _node5);
    }

    if (isActions.isTableDeleteRowsAction(action)) {
      var _node6 = action.payload.node;
      return deleteRows(controller, _node6);
    }

    if (isActions.isTableDeleteColsAction(action)) {
      var _node7 = action.payload.node;
      return deleteCols(controller, _node7);
    }

    if (isActions.isTableInsertColAction(action)) {
      var _action$payload6 = action.payload,
          _node8 = _action$payload6.node,
          _colIndex = _action$payload6.colIndex,
          colWidth = _action$payload6.colWidth,
          triggerColIndex = _action$payload6.triggerColIndex,
          _containerWidth3 = _action$payload6.containerWidth;
      return insertCol(controller, _node8, _colIndex, triggerColIndex, colWidth, _containerWidth3);
    }

    if (isActions.isTableInsertRowAction(action)) {
      var _action$payload7 = action.payload,
          _node9 = _action$payload7.node,
          type = _action$payload7.type;
      return insertRow(controller, _node9, type);
    }

    if (isActions.isTableInsertRowBySelectionsAction(action)) {
      var _action$payload8 = action.payload,
          _node10 = _action$payload8.node,
          _type = _action$payload8.type;
      return insertRowBySelections(controller, _node10, _type);
    }

    return next();
  };
}
//# sourceMappingURL=createOnAction.js.map