{"version":3,"sources":["../../../../../src/bi/mobile/handlers/createOnAction.ts"],"names":["Commands","isActions","resizeColsWidth","deleteTable","insertTable","setTableMinColsWidthData","adjustColsWidth","selectCols","selectRows","emptyTableSelection","deleteRows","deleteCols","insertCol","insertRow","insertRowBySelections","createOnAction","config","onAction","action","controller","next","enableAutofitWidth","enableHeader","setTableHeaderStyle","isTableResizeTableColWidthAction","payload","node","colIndex","delta","containerWidth","isTableDeleteTableAction","isTableInsertTableAction","rowSize","colSize","defaultAutofit","defaultHeader","isTableSetTableMinColsWidthDataAction","data","isTableAdjustColsWidthAction","isTableBlurAction","command","blur","isTableSelectTableColsAction","startIndex","endIndex","isTableSelectTableRowsAction","isTableEmptySelectionAction","isTableDeleteRowsAction","isTableDeleteColsAction","isTableInsertColAction","colWidth","triggerColIndex","isTableInsertRowAction","type","isTableInsertRowBySelectionsAction"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport { Controller, Commands, Action } from '@ali/4ever-cangjie';\nimport { isActions } from '../../actions';\nimport resizeColsWidth from '../../commands/resizeColsWidth';\nimport deleteTable from '../../commands/deleteTable';\nimport insertTable from '../../commands/insertTable';\nimport { TableConfig } from '../../types';\nimport setTableMinColsWidthData from '../../../utils/commands/setTableMinColsWidthData';\nimport adjustColsWidth from '../../../utils/commands/adjustColsWidth';\nimport {\n  selectCols,\n  selectRows,\n  emptyTableSelection,\n  deleteRows,\n  deleteCols,\n  insertCol,\n  insertRow,\n  insertRowBySelections,\n} from '../../commands';\n\nexport default function createOnAction(config: TableConfig) {\n  return function onAction(action: Action, controller: Controller, next) {\n    const { enableAutofitWidth, enableHeader, setTableHeaderStyle } = config;\n    if (isActions.isTableResizeTableColWidthAction(action)) {\n      const { node, colIndex, delta, containerWidth } = action.payload;\n      return resizeColsWidth(controller, {\n        node,\n        colIndex,\n        delta,\n        containerWidth,\n      });\n    }\n    if (isActions.isTableDeleteTableAction(action)) {\n      const { node } = action.payload;\n      return deleteTable(controller, node);\n    }\n    if (isActions.isTableInsertTableAction(action)) {\n      const { rowSize, colSize, containerWidth } = action.payload;\n      const defaultAutofit = enableAutofitWidth?.();\n      const defaultHeader = enableHeader?.();\n      return insertTable(\n        controller,\n        {\n          rowSize,\n          colSize,\n          containerWidth,\n          defaultAutofit,\n          defaultHeader,\n          setTableHeaderStyle,\n        },\n      );\n    }\n    if (isActions.isTableSetTableMinColsWidthDataAction(action)) {\n      const { data } = action.payload;\n      return setTableMinColsWidthData(controller, data);\n    }\n    if (isActions.isTableAdjustColsWidthAction(action)) {\n      const { node, containerWidth } = action.payload;\n      return adjustColsWidth(controller, node, containerWidth);\n    }\n    if (isActions.isTableBlurAction(action)) {\n      return controller.command(Commands.blur);\n    }\n    if (isActions.isTableSelectTableColsAction(action)) {\n      const { node, startIndex, endIndex } = action.payload;\n      return selectCols(controller, node, startIndex, endIndex);\n    }\n    if (isActions.isTableSelectTableRowsAction(action)) {\n      const { node, startIndex, endIndex } = action.payload;\n      return selectRows(controller, node, startIndex, endIndex);\n    }\n    if (isActions.isTableEmptySelectionAction(action)) {\n      const { node } = action.payload;\n      return emptyTableSelection(controller, node);\n    }\n    if (isActions.isTableDeleteRowsAction(action)) {\n      const { node } = action.payload;\n      return deleteRows(controller, node);\n    }\n    if (isActions.isTableDeleteColsAction(action)) {\n      const { node } = action.payload;\n      return deleteCols(controller, node);\n    }\n    if (isActions.isTableInsertColAction(action)) {\n      const { node, colIndex, colWidth, triggerColIndex, containerWidth } = action.payload;\n      return insertCol(controller, node, colIndex, triggerColIndex, colWidth, containerWidth);\n    }\n    if (isActions.isTableInsertRowAction(action)) {\n      const { node, type } = action.payload;\n      return insertRow(controller, node, type);\n    }\n    if (isActions.isTableInsertRowBySelectionsAction(action)) {\n      const { node, type } = action.payload;\n      return insertRowBySelections(controller, node, type);\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnAction.js"}