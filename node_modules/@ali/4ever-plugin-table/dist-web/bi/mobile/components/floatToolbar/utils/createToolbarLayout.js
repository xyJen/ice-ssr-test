import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ContextMenu } from '@ali/4ever-cangjie';
import Table from "../../../../../mo/models";
import { emptyTableSelection, selectTableSelection } from "../../../../commands";
import { deleteTableCols, deleteTableRows, insertTableCol, insertTableRowBySelections } from "../../../../actions";
import { DeleteColIcon, DeleteRowIcon, InsertColLeftIcon, InsertColRightIcon, InsertRowAboveIcon, InsertRowBelowIcon, CopyIcon, CutIcon, PasteIcon, ClearIcon } from "../icons";
import { DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT } from "../../../../../utils/constants";
var KeyEnum;

(function (KeyEnum) {
  KeyEnum["copy"] = "copy";
  KeyEnum["cut"] = "cut";
  KeyEnum["paste"] = "paste";
  KeyEnum["clear"] = "clear";
  KeyEnum["insertRowAbove"] = "insertRowAbove";
  KeyEnum["insertRowBelow"] = "insertRowBelow";
  KeyEnum["deleteRow"] = "deleteRow";
  KeyEnum["insertColLeft"] = "insertColLeft";
  KeyEnum["insertColRight"] = "insertColRight";
  KeyEnum["deleteCol"] = "deleteCol";
})(KeyEnum || (KeyEnum = {}));

var _ref = /*#__PURE__*/_createElement(CopyIcon, null);

var _ref2 = /*#__PURE__*/_createElement(CutIcon, null);

var _ref3 = /*#__PURE__*/_createElement(PasteIcon, null);

var _ref4 = /*#__PURE__*/_createElement(ClearIcon, null);

var _ref5 = /*#__PURE__*/_createElement(InsertRowAboveIcon, null);

var _ref6 = /*#__PURE__*/_createElement(InsertRowBelowIcon, null);

var _ref7 = /*#__PURE__*/_createElement(DeleteRowIcon, null);

var _ref8 = /*#__PURE__*/_createElement(InsertColLeftIcon, null);

var _ref9 = /*#__PURE__*/_createElement(InsertColRightIcon, null);

var _ref10 = /*#__PURE__*/_createElement(DeleteColIcon, null);

export var createToolbarLayout = function createToolbarLayout(params) {
  var _locale$mobileFloatTo, _locale$mobileFloatTo2, _locale$mobileFloatTo3, _locale$mobileFloatTo4, _locale$mobileFloatTo5;

  var controller = params.controller,
      table = params.table,
      type = params.type,
      hideToolbar = params.hideToolbar,
      tableSelection = params.tableSelection,
      locale = params.locale;
  var isAutofit = Table.isAutofitWidth(table);
  var containerWidth = isAutofit ? DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT : undefined;

  var handleClick = function handleClick(callback) {
    return function () {
      callback();
      hideToolbar();
    };
  };

  var handleCopy = function handleCopy() {
    controller.run('onAction', {
      type: ContextMenu.ACTION_COPY
    });
  };

  var handleCut = function handleCut() {
    controller.run('onAction', {
      type: ContextMenu.ACTION_CUT
    });
  };

  var handlePaste = function handlePaste() {
    controller.run('onAction', {
      type: ContextMenu.ACTION_PASTE
    });
  };

  var handleClear = function handleClear() {
    return emptyTableSelection(controller, table);
  };

  var defaultLayout = [{
    key: KeyEnum.copy,
    icon: _ref,
    title: locale == null ? void 0 : locale.contextMenuCopy,
    onClick: handleClick(handleCopy)
  }, {
    key: KeyEnum.cut,
    icon: _ref2,
    title: locale == null ? void 0 : locale.contextMenuCut,
    onClick: handleClick(handleCut)
  }, {
    key: KeyEnum.paste,
    icon: _ref3,
    title: locale == null ? void 0 : locale.contextMenuPaste,
    onClick: handleClick(handlePaste)
  }, {
    key: KeyEnum.clear,
    icon: _ref4,
    title: locale == null ? void 0 : (_locale$mobileFloatTo = locale.mobileFloatToolbar) == null ? void 0 : _locale$mobileFloatTo.clear,
    onClick: handleClick(handleClear)
  }];
  var endColIndex = tableSelection.endColIndex;
  var colsWidth = table.data.colsWidth;
  var targetColIndex = endColIndex + 1;
  var rightColWidth = colsWidth[endColIndex];
  var leftColWidth = colsWidth[tableSelection.startColIndex];

  var getNewTable = function getNewTable() {
    return controller.value.document.getNode(table.key);
  };

  var handleInsertRowAbove = function handleInsertRowAbove() {
    controller.run('onAction', insertTableRowBySelections(table, 'insert-row-above'));

    var newTblSelection = _extends({}, tableSelection, {
      startRowIndex: tableSelection.startRowIndex + 1,
      endRowIndex: tableSelection.endRowIndex + 1,
      type: 'row'
    });

    selectTableSelection(controller, getNewTable(), newTblSelection, false);
  };

  var handleInsertRowBelow = function handleInsertRowBelow() {
    controller.run('onAction', insertTableRowBySelections(table, 'insert-row-below'));

    var newTblSelection = _extends({}, tableSelection, {
      type: 'row'
    });

    selectTableSelection(controller, getNewTable(), newTblSelection, false);
  };

  var handleDeleteRow = function handleDeleteRow() {
    controller.run('onAction', deleteTableRows(table));
  };

  var handleInsertColLeft = function handleInsertColLeft() {
    controller.run('onAction', insertTableCol(table, tableSelection.startColIndex, tableSelection.startColIndex, leftColWidth, containerWidth));

    var newTblSelection = _extends({}, tableSelection, {
      startColIndex: tableSelection.startColIndex + 1,
      endColIndex: tableSelection.endColIndex + 1,
      type: 'col'
    });

    selectTableSelection(controller, getNewTable(), newTblSelection, false);
  };

  var handleInsertColRight = function handleInsertColRight() {
    controller.run('onAction', insertTableCol(table, targetColIndex, endColIndex, rightColWidth, containerWidth));

    var newTblSelection = _extends({}, tableSelection, {
      type: 'col'
    });

    selectTableSelection(controller, getNewTable(), newTblSelection, false);
  };

  var handleDeleteCol = function handleDeleteCol() {
    controller.run('onAction', deleteTableCols(table));
  };

  var appendLayout = type === 'row' ? [{
    key: KeyEnum.insertRowAbove,
    icon: _ref5,
    title: locale == null ? void 0 : (_locale$mobileFloatTo2 = locale.mobileFloatToolbar) == null ? void 0 : _locale$mobileFloatTo2.insertRowAbove,
    onClick: handleClick(handleInsertRowAbove)
  }, {
    key: KeyEnum.insertRowBelow,
    icon: _ref6,
    title: locale == null ? void 0 : (_locale$mobileFloatTo3 = locale.mobileFloatToolbar) == null ? void 0 : _locale$mobileFloatTo3.insertRowBelow,
    onClick: handleClick(handleInsertRowBelow)
  }, {
    key: KeyEnum.deleteRow,
    icon: _ref7,
    title: locale == null ? void 0 : locale.toolbarDeleteRow,
    onClick: handleClick(handleDeleteRow)
  }] : [{
    key: KeyEnum.insertColLeft,
    icon: _ref8,
    title: locale == null ? void 0 : (_locale$mobileFloatTo4 = locale.mobileFloatToolbar) == null ? void 0 : _locale$mobileFloatTo4.insertColLeft,
    onClick: handleClick(handleInsertColLeft)
  }, {
    key: KeyEnum.insertColRight,
    icon: _ref9,
    title: locale == null ? void 0 : (_locale$mobileFloatTo5 = locale.mobileFloatToolbar) == null ? void 0 : _locale$mobileFloatTo5.insertColRight,
    onClick: handleClick(handleInsertColRight)
  }, {
    key: KeyEnum.deleteCol,
    icon: _ref10,
    title: locale == null ? void 0 : locale.toolbarDeleteCol,
    onClick: handleClick(handleDeleteCol)
  }];
  return [].concat(appendLayout, defaultLayout);
};
//# sourceMappingURL=createToolbarLayout.js.map