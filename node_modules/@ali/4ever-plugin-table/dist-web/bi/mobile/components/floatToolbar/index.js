import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import { useScroll } from '@ali/4ever-cangjie';
import { BasicFloatToolbar } from "./basic";
import calcTableSelectionPos from "../../../utils/calcTableSelectionPos";
import { usePixelColsWidth } from "../../../../utils/hooks";
import { getToolbarPosition } from "./utils/getToolbarPostion";
import { createToolbarLayout } from "./utils/createToolbarLayout";
export var SINGLE_ROW_BUTTON_LENGTH = 5;
export var FloatToolbar = function FloatToolbar(props) {
  var controller = props.controller,
      table = props.table,
      tableSelection = props.tableSelection,
      tableRef = props.tableRef,
      locale = props.locale,
      selecteColRange = props.selecteColRange,
      selecteRowRange = props.selecteRowRange;
  var _controller$value$sel = controller.value.selection.data,
      isByTable = _controller$value$sel.isByTable,
      tableType = _controller$value$sel.tableType;

  var _usePixelColsWidth = usePixelColsWidth(),
      pixelColsWidth = _usePixelColsWidth[0];

  var toolbarNodeRef = React.useRef(null);

  var _React$useState = React.useState({}),
      style = _React$useState[0],
      setStyle = _React$useState[1];

  var toolbarType = tableType;
  selecteColRange && (toolbarType = 'col');
  selecteRowRange && (toolbarType = 'row');

  var setToolbarVisible = function setToolbarVisible(visible) {
    if (!toolbarNodeRef.current) return;
    toolbarNodeRef.current.style.opacity = visible ? '1' : '0';
    toolbarNodeRef.current.style.visibility = visible ? 'unset' : 'hidden';
  };

  var hideToolbar = React.useCallback(function () {
    return setToolbarVisible(false);
  }, []);
  var toolbarLayout = React.useMemo(function () {
    if (!toolbarType || !tableSelection) return [];
    var layout = createToolbarLayout({
      controller: controller,
      table: table,
      hideToolbar: hideToolbar,
      type: toolbarType,
      tableSelection: tableSelection,
      locale: locale
    });
    return [layout.slice(0, SINGLE_ROW_BUTTON_LENGTH), layout.slice(SINGLE_ROW_BUTTON_LENGTH)];
  }, [controller, hideToolbar, table, tableSelection, toolbarType, locale]);

  var updateStyle = function updateStyle() {
    if (!toolbarType || !tableSelection || !toolbarNodeRef.current || !isByTable) {
      setToolbarVisible(false);
      return;
    }

    var selectionRect = calcTableSelectionPos({
      table: table,
      tableNode: tableRef.current,
      tblSelection: tableSelection,
      colsWidth: pixelColsWidth,
      absPostion: true
    });

    if (!selectionRect) {
      setToolbarVisible(false);
      return;
    }

    var _getToolbarPosition = getToolbarPosition({
      targetRect: selectionRect,
      toolbarType: toolbarType
    }),
        x = _getToolbarPosition.x,
        y = _getToolbarPosition.y;

    setToolbarVisible(true);
    setStyle({
      left: x,
      top: y
    });
  }; // 表格选区变化时更新 toolbar 位置
  // eslint-disable-next-line react-hooks/exhaustive-deps


  React.useEffect(updateStyle, [tableSelection, table]);
  useScroll({
    onStart: function onStart() {
      setToolbarVisible(false);
    },
    onEnd: function onEnd() {
      updateStyle();
    }
  });
  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_createElement("div", {
    ref: toolbarNodeRef
  }, /*#__PURE__*/_createElement(BasicFloatToolbar, {
    toolbarLayout: toolbarLayout,
    style: _extends({
      transition: 'opacity .3s'
    }, style)
  })), document.body);
};
//# sourceMappingURL=index.js.map