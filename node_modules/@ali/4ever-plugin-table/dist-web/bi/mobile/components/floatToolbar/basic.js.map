{"version":3,"sources":["../../../../../../src/bi/mobile/components/floatToolbar/basic.tsx"],"names":["React","FloatToolbarMobile","Row","Divider","Slot","BasicFloatToolbar","props","toolbarLayout","style","shouldRender","length","width","zIndex","position","map","configs","i","config","key","title","icon","onClick"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;qBAC4B,a;AAA5B,SAASC,kBAAT,QAAmC,qBAAnC;IAEQC,G,GAAuBD,kB,CAAvBC,G;IAAKC,O,GAAkBF,kB,CAAlBE,O;IAASC,I,GAASH,kB,CAATG,I;AActB,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAkB;AAAA,MACzCC,aADyC,GAChBD,KADgB,CACzCC,aADyC;AAAA,MAC1BC,KAD0B,GAChBF,KADgB,CAC1BE,KAD0B;AAEjD,MAAMC,YAAY,GAAGF,aAAa,CAACG,MAAd,GAAuB,CAA5C;AACA,SACED,YAAY,gBACV,eAAC,kBAAD;AACE,IAAA,KAAK;AACHE,MAAAA,KAAK,EAAE,aADJ;AAEHC,MAAAA,MAAM,EAAE,KAFL;AAGHC,MAAAA,QAAQ,EAAE;AAHP,OAIAL,KAJA;AADP,KAQGD,aAAa,CAACO,GAAd,CAAkB,UAACC,OAAD,EAAUC,CAAV;AAAA,wBACjB,kDACE,eAAC,GAAD;AAAK,MAAA,GAAG,WAASA;AAAjB,OACGD,OAAO,CAACD,GAAR,CAAY,UAACG,MAAD;AAAA,0BACX,eAAC,IAAD;AACE,QAAA,GAAG,EAAEA,MAAM,CAACC,GADd;AAEE,QAAA,KAAK,EAAED,MAAM,CAACE,KAFhB;AAGE,QAAA,IAAI,EAAEF,MAAM,CAACG,IAHf;AAIE,QAAA,OAAO,EAAEH,MAAM,CAACI;AAJlB,QADW;AAAA,KAAZ,CADH,CADF,EAWGL,CAAC,KAAKT,aAAa,CAACG,MAAd,GAAuB,CAA7B,iBAAkC,eAAC,OAAD;AAAS,MAAA,GAAG,eAAaM;AAAzB,MAXrC,CADiB;AAAA,GAAlB,CARH,CADU,GAyBR,IA1BN;AA4BD,CA/BM","sourcesContent":["import React from 'react';\nimport { FloatToolbarMobile } from '@ali/we-design-next';\n\nconst { Row, Divider, Slot } = FloatToolbarMobile;\n\nexport interface LayoutConfig {\n  key?: string;\n  icon: React.ReactNode;\n  title: string;\n  onClick?: (e: any) => void;\n}\n\ntype Props = {\n  // 二维数组，每一数组代表一行\n  toolbarLayout: LayoutConfig[][];\n} & React.HTMLAttributes<HTMLDivElement>;\n\nexport const BasicFloatToolbar = (props: Props) => {\n  const { toolbarLayout, style } = props;\n  const shouldRender = toolbarLayout.length > 0;\n  return (\n    shouldRender ?\n      <FloatToolbarMobile\n        style={{\n          width: 'fit-content',\n          zIndex: 10000,\n          position: 'fixed',\n          ...style,\n        }}\n      >\n        {toolbarLayout.map((configs, i) => (\n          <>\n            <Row key={`row_${i}`}>\n              {configs.map((config) => (\n                <Slot\n                  key={config.key}\n                  title={config.title}\n                  icon={config.icon}\n                  onClick={config.onClick}\n                />\n              ))}\n            </Row>\n            {i !== toolbarLayout.length - 1 && <Divider key={`divider_${i}`} />}\n          </>\n        ))}\n      </FloatToolbarMobile>\n      : null\n  );\n};\n"],"file":"basic.js"}