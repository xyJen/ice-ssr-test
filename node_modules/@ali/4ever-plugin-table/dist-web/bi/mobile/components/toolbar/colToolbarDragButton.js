import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { DragIcon } from "./dragIcon";
import Table from "../../../../mo/models";
import { DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT } from "../../../../utils/constants";
import { resizeTableColWidth } from "../../../actions";
import { throttle } from 'lodash-es';
import { usePixelColsWidth } from "../../../../utils/hooks";
var DragWrapper = /*#__PURE__*/styled.div(["box-sizing:border-box;position:absolute;height:21px;width:30px;padding-right:4px;right:0;top:-3px;display:flex;align-items:center;justify-content:flex-end;"]);

var _ref = /*#__PURE__*/_createElement(DragIcon, null);

export var ColToolbarDragButton = function ColToolbarDragButton(props) {
  var index = props.index,
      controller = props.controller,
      table = props.table;
  var dragRef = React.useRef(null);
  var isResizingRef = React.useRef(false);
  var resizeStartRef = React.useRef(0);
  var deltaRef = React.useRef(0);

  var _usePixelColsWidth = usePixelColsWidth(),
      pixelColsWidth = _usePixelColsWidth[0];

  var originColWidthRef = React.useRef(0);

  var preventEvent = function preventEvent(e) {
    e.preventDefault();
    e.stopPropagation();
  };

  var handleResizing = throttle(function (e) {
    preventEvent(e);
    e.stopImmediatePropagation();

    if (isResizingRef.current) {
      // 这里的 table 是 resizeStart 闭包里的 table 值
      // 所以 delta 是 resizeStart - 当前 clientX
      var clientX = e.touches[0].clientX;
      deltaRef.current = clientX - resizeStartRef.current;
      var isAutofit = Table.isAutofitWidth(table);
      controller.run('onAction', resizeTableColWidth({
        node: table,
        colIndex: index,
        delta: deltaRef.current,
        containerWidth: isAutofit ? DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT : undefined
      }));
    }
  }, 100);

  var handleResizeStart = function handleResizeStart(e) {
    var _dragRef$current;

    preventEvent(e);
    e.nativeEvent.stopImmediatePropagation();
    isResizingRef.current = true;
    var clientX = e.touches[0].clientX;
    resizeStartRef.current = clientX;
    originColWidthRef.current = pixelColsWidth[index];
    (_dragRef$current = dragRef.current) == null ? void 0 : _dragRef$current.addEventListener('touchmove', handleResizing, {
      passive: false,
      capture: true
    });
  };

  var handleResizeEnd = function handleResizeEnd(e) {
    var _dragRef$current2;

    preventEvent(e);
    e.nativeEvent.stopImmediatePropagation();
    isResizingRef.current = false;
    (_dragRef$current2 = dragRef.current) == null ? void 0 : _dragRef$current2.removeEventListener('touchmove', handleResizing, {
      capture: true
    });
  };

  return /*#__PURE__*/_createElement(DragWrapper, {
    ref: dragRef,
    onTouchStart: handleResizeStart,
    onTouchEnd: handleResizeEnd,
    onTouchCancel: handleResizeEnd,
    "data-index": index
  }, _ref);
};
//# sourceMappingURL=colToolbarDragButton.js.map