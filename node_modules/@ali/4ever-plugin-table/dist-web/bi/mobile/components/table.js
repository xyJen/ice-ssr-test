import React, { useEffect, useRef, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import fastdom from 'fastdom';
import { throttle } from 'lodash-es';
import styled from 'styled-components';
import { useZoomContainer, useSelectingHots } from '@ali/4ever-cangjie';
import { getBoundingRelativeRect } from '@ali/4ever-utils';
import { TableRightSideShadow } from "../../components/styled";
import { adjustColsWidth } from "../../actions";
import { DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT, SCROLL_BAR_HEIGHT, MOBILE_SPACING } from "../../../utils/constants";
import TableScrollContainer from "../../../components/tableScrollContainer";
import PureTable from "../../../components/pureTable";
import { ContextContainer } from "../../components/contextContainer";
import { MobileRowToolbar } from "./toolbar/mobileRowToolbar";
import { MobileColToolbar } from "./toolbar/mobileColToolbar";
import { getToolbarTableSelection } from "../../utils/getToolbarTableSelection";
import TableSelection from "../../components/tableSelection";
import { getSelectedRowRangeFromTableSelection, getSelectedColRangeFromTableSelection } from "../../utils/getSelectedRangeFromTableSelection";
import getDataTableSelectionByTable from "../../utils/getDataTableSelectionByTable";
import getTableIsSelected from "../../../utils/utils/getTableIsSelected";
import { FloatToolbar } from "./floatToolbar";
import { TOOLBAR_ITEM_SIZE_MOBILE } from "../../constants";
import { Scrollbar } from "./scrollbar";
var Wrapper = /*#__PURE__*/styled.div(["position:relative;padding-top:", "px;padding-bottom:", "px;"], MOBILE_SPACING - TOOLBAR_ITEM_SIZE_MOBILE, MOBILE_SPACING - SCROLL_BAR_HEIGHT);
var TableWithSelection = /*#__PURE__*/styled.div(["position:relative;"]);
var ScrollContent = /*#__PURE__*/styled.div(["position:relative;left:", "px;width:calc(100% - ", "px);"], TOOLBAR_ITEM_SIZE_MOBILE, TOOLBAR_ITEM_SIZE_MOBILE);

var Table = function Table(props) {
  var node = props.node,
      controller = props.controller,
      children = props.children,
      tableConfig = props.tableConfig;
  var enableToolbar = tableConfig.enableToolbar;
  var _controller$value = controller.value,
      isFocused = _controller$value.isFocused,
      selection = _controller$value.selection;

  var _React$useState = React.useState(!!enableToolbar && isFocused),
      toolbarVisible = _React$useState[0],
      setToolbarVisible = _React$useState[1];

  var zoomContainer = useZoomContainer() || window.document.body;

  var _useState = useState(false),
      shouldShowTableRightShadow = _useState[0],
      setShouldShowTableRightShadow = _useState[1];

  var tableRef = useRef(null);
  var wrapperRef = useRef(null);
  var tableLeftShadowRef = useRef(null);
  var tableRightShadowRef = useRef(null);
  var updateShadowRafIdRef = useRef(0);

  var updateShadowState = function updateShadowState() {
    // 文档模型更新后，DOM 不会立刻更新，所以需要等待 DOM 更新后再计算阴影的状态
    if (updateShadowRafIdRef.current !== -1) {
      window.cancelAnimationFrame(updateShadowRafIdRef.current);
    }

    updateShadowRafIdRef.current = window.requestAnimationFrame(function () {
      fastdom.measure(function () {
        var table = tableRef.current;
        var realTableWrapper = wrapperRef.current;

        if (!table || !realTableWrapper) {
          return;
        }

        var tableRect = getBoundingRelativeRect(table, zoomContainer);
        var realTableWrapperRect = getBoundingRelativeRect(realTableWrapper, zoomContainer);
        var scrollableContentWidth = tableRect.width;
        var newShouldShowRight = scrollableContentWidth - realTableWrapper.scrollLeft > realTableWrapperRect.width;

        if (newShouldShowRight !== shouldShowTableRightShadow) {
          setShouldShowTableRightShadow(newShouldShowRight);
        }
      });
    });
  };

  var updateShadowHeight = function updateShadowHeight() {
    if (!tableRef.current) {
      return;
    }

    var tableRect = getBoundingRelativeRect(tableRef.current, zoomContainer);
    var height = Math.round(tableRect.height) + "px";

    if (tableLeftShadowRef.current) {
      tableLeftShadowRef.current.style.height = height;
    }

    if (tableRightShadowRef.current) {
      tableRightShadowRef.current.style.height = height;
    }
  };

  var isMountedRef = useRef(false);
  useEffect(function () {
    fastdom.measure(function () {
      updateShadowHeight();
    });
    controller.run('onAction', adjustColsWidth(node, DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT));

    if (!isMountedRef.current) {
      updateShadowState();
      isMountedRef.current = true;
    }
  });
  var handleTableScroll = throttle(function () {
    if (!wrapperRef.current) {
      return;
    }

    if (tableConfig != null && tableConfig.onScroll) {
      tableConfig.onScroll(wrapperRef.current, node);
    }

    updateShadowState();
  });

  var getTableSelection = function getTableSelection() {
    var tblSelections = controller.query('viewTableSelections');

    if (!tblSelections) {
      return null;
    }

    var curTableSelection = tblSelections.find(function (ts) {
      return ts.key === node.key;
    });

    if (!curTableSelection) {
      return null;
    }

    return curTableSelection;
  };

  var activeRowRange = null;
  var selecteRowRange = null;
  var activeColRange = null;
  var selecteColRange = null;
  var activeSelection = getToolbarTableSelection(controller, node);
  var tableSelection = getDataTableSelectionByTable(controller, node);
  var selectionType = selection.data.tableType;
  activeRowRange = activeSelection ? {
    start: activeSelection.startRowIndex,
    end: activeSelection.endRowIndex
  } : null;
  activeColRange = activeSelection ? {
    start: activeSelection.startColIndex,
    end: activeSelection.endColIndex
  } : null;

  if (selectionType === 'row') {
    selecteRowRange = getSelectedRowRangeFromTableSelection({
      controller: controller,
      table: node,
      tableSelection: tableSelection,
      includeTable: true
    });
  } else if (selectionType === 'col') {
    selecteColRange = getSelectedColRangeFromTableSelection({
      controller: controller,
      table: node,
      tableSelection: tableSelection,
      includeTable: true
    });
  }

  var isSelected = getTableIsSelected(node, controller);
  React.useEffect(function () {
    if (isFocused && enableToolbar) {
      setToolbarVisible(true);
    }
  }, [isFocused, enableToolbar]);

  var _React$useReducer = React.useReducer(function (c) {
    return c + 1;
  }, 0),
      _ = _React$useReducer[0],
      forceUpdate = _React$useReducer[1];

  var onHots = React.useCallback(function (hots) {
    // PERF: 非当前表格热区不处理
    if (hots.some(function (hot) {
      return node.key === hot.node.key || node.hasNode(hot.node.key);
    })) {
      forceUpdate();
    }
  }, [node]);
  useSelectingHots(controller, onHots);
  return /*#__PURE__*/_createElement(Wrapper, {
    "data-type": "table"
  }, /*#__PURE__*/_createElement(ContextContainer, {
    isSelected: isSelected
  }, /*#__PURE__*/_createElement(TableScrollContainer, {
    ref: wrapperRef,
    className: "real-table-wrapper",
    table: node,
    controller: controller,
    onScroll: handleTableScroll,
    isMobile: true,
    style: {
      left: -TOOLBAR_ITEM_SIZE_MOBILE,
      width: "calc(100% + " + TOOLBAR_ITEM_SIZE_MOBILE + "px)",
      overflowY: 'hidden'
    },
    hideScrollBar: true
  }, /*#__PURE__*/_createElement(MobileRowToolbar, {
    table: node,
    controller: controller,
    visible: isSelected && toolbarVisible,
    activeRange: activeRowRange,
    selectRange: selecteRowRange
  }), /*#__PURE__*/_createElement(ScrollContent, null, /*#__PURE__*/_createElement(MobileColToolbar, {
    table: node,
    controller: controller,
    visible: toolbarVisible && isSelected,
    activeRange: activeColRange,
    selectRange: selecteColRange
  }), /*#__PURE__*/_createElement(TableWithSelection, null, /*#__PURE__*/_createElement(PureTable, {
    ref: tableRef,
    node: node,
    controller: controller,
    isMobile: true
  }, children()), toolbarVisible && /*#__PURE__*/_createElement(TableSelection, {
    "data-testid": "table-selection-wrapper",
    node: node,
    controller: controller,
    selection: tableSelection,
    tableRef: tableRef,
    getTableSelection: getTableSelection
  })))), /*#__PURE__*/_createElement(Scrollbar, {
    scrollContainer: wrapperRef.current,
    scrollContent: tableRef.current
  }), toolbarVisible && /*#__PURE__*/_createElement(FloatToolbar, {
    controller: controller,
    table: node,
    tableSelection: tableSelection,
    tableRef: tableRef,
    locale: tableConfig.locale,
    selecteRowRange: selecteRowRange,
    selecteColRange: selecteColRange
  })), /*#__PURE__*/_createElement(TableRightSideShadow, {
    ref: tableRightShadowRef,
    style: {
      display: shouldShowTableRightShadow ? 'block' : 'none'
    }
  }));
};

export default Table;
//# sourceMappingURL=table.js.map