import { Commands, Text } from '@ali/4ever-cangjie';
import { Paragraph } from '@ali/4ever-plugin-paragraph';
import { getRealNodeInTable } from "../utils";
import getDataTableSelectionByTable from "../utils/getDataTableSelectionByTable";
import setSelectionByTable from "../../utils/utils/setSelectionByTable";
export default function emptyTableSelection(controller, table) {
  var value = controller.value;
  var document = value.document;
  var tableSelection = getDataTableSelectionByTable(controller, table);
  if (!tableSelection) return controller;
  var startRowIndex = tableSelection.startRowIndex,
      startColIndex = tableSelection.startColIndex,
      endRowIndex = tableSelection.endRowIndex,
      endColIndex = tableSelection.endColIndex;
  var tablePath = document.getPath(table.key);

  for (var rowIndex = startRowIndex; rowIndex <= endRowIndex; rowIndex += 1) {
    var row = table.nodes[rowIndex];
    if (!row) continue;

    var _loop = function _loop(colIndex) {
      var cell = row.nodes[colIndex];
      if (!cell) return "continue";
      var cellPath = [].concat(tablePath, [rowIndex, colIndex]);

      var _loop2 = function _loop2(childIndex) {
        controller.withoutNormalizing(function () {
          controller.command(Commands.removeNodeByPath, [].concat(cellPath, [childIndex]));
        });
      };

      for (var childIndex = cell.nodes.length - 1; childIndex >= 0; childIndex -= 1) {
        _loop2(childIndex);
      }

      controller.command(Commands.insertNodeByPath, cellPath, 0, Paragraph.create({
        nodes: [Text.create('')]
      }));
    };

    for (var colIndex = startColIndex; colIndex <= endColIndex; colIndex += 1) {
      var _ret = _loop(colIndex);

      if (_ret === "continue") continue;
    }
  }

  var newTable = controller.value.document.getNode(table.key);
  var cell = getRealNodeInTable(newTable, startRowIndex, startColIndex);
  var selection = controller.value.selection;
  var range = setSelectionByTable(selection, false).moveToRangeOfNode(cell, controller);
  return controller.command(Commands.select, range);
}
//# sourceMappingURL=emptyTableSelection.js.map