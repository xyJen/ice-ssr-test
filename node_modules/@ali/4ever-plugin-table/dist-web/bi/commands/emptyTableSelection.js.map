{"version":3,"sources":["../../../../src/bi/commands/emptyTableSelection.ts"],"names":["Commands","Text","Paragraph","getRealNodeInTable","getDataTableSelectionByTable","setSelectionByTable","emptyTableSelection","controller","table","value","document","tableSelection","startRowIndex","startColIndex","endRowIndex","endColIndex","tablePath","getPath","key","rowIndex","row","nodes","colIndex","cell","cellPath","childIndex","withoutNormalizing","command","removeNodeByPath","length","insertNodeByPath","create","newTable","getNode","selection","range","moveToRangeOfNode","select"],"mappings":"AAAA,SAAqBA,QAArB,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,SAAT,QAA0B,6BAA1B;AAEA,SAASC,kBAAT;AACA,OAAOC,4BAAP;AACA,OAAOC,mBAAP;AAEA,eAAe,SAASC,mBAAT,CAA6BC,UAA7B,EAAqDC,KAArD,EAAmE;AAAA,MACxEC,KADwE,GAC9DF,UAD8D,CACxEE,KADwE;AAAA,MAExEC,QAFwE,GAE3DD,KAF2D,CAExEC,QAFwE;AAGhF,MAAMC,cAAc,GAAGP,4BAA4B,CAACG,UAAD,EAAaC,KAAb,CAAnD;AACA,MAAI,CAACG,cAAL,EAAqB,OAAOJ,UAAP;AAJ2D,MAO9EK,aAP8E,GAQ5ED,cAR4E,CAO9EC,aAP8E;AAAA,MAO/DC,aAP+D,GAQ5EF,cAR4E,CAO/DE,aAP+D;AAAA,MAOhDC,WAPgD,GAQ5EH,cAR4E,CAOhDG,WAPgD;AAAA,MAOnCC,WAPmC,GAQ5EJ,cAR4E,CAOnCI,WAPmC;AAUhF,MAAMC,SAAS,GAAGN,QAAQ,CAACO,OAAT,CAAiBT,KAAK,CAACU,GAAvB,CAAlB;;AACA,OAAK,IAAIC,QAAQ,GAAGP,aAApB,EAAmCO,QAAQ,IAAIL,WAA/C,EAA4DK,QAAQ,IAAI,CAAxE,EAA2E;AACzE,QAAMC,GAAG,GAAGZ,KAAK,CAACa,KAAN,CAAYF,QAAZ,CAAZ;AACA,QAAI,CAACC,GAAL,EAAU;;AAF+D,+BAIhEE,QAJgE;AAKvE,UAAMC,IAAI,GAAGH,GAAG,CAACC,KAAJ,CAAUC,QAAV,CAAb;AACA,UAAI,CAACC,IAAL,EAAW;AAEX,UAAMC,QAAQ,aAAOR,SAAP,GAAmBG,QAAnB,EAA6BG,QAA7B,EAAd;;AARuE,mCAS9DG,UAT8D;AAUrElB,QAAAA,UAAU,CAACmB,kBAAX,CAA8B,YAAM;AAClCnB,UAAAA,UAAU,CAACoB,OAAX,CAAmB3B,QAAQ,CAAC4B,gBAA5B,YAAkDJ,QAAlD,GAA4DC,UAA5D;AACD,SAFD;AAVqE;;AASvE,WAAK,IAAIA,UAAU,GAAGF,IAAI,CAACF,KAAL,CAAWQ,MAAX,GAAoB,CAA1C,EAA6CJ,UAAU,IAAI,CAA3D,EAA8DA,UAAU,IAAI,CAA5E,EAA+E;AAAA,eAAtEA,UAAsE;AAI9E;;AAEDlB,MAAAA,UAAU,CAACoB,OAAX,CACE3B,QAAQ,CAAC8B,gBADX,EAEEN,QAFF,EAGE,CAHF,EAIEtB,SAAS,CAAC6B,MAAV,CAAiB;AACfV,QAAAA,KAAK,EAAE,CAACpB,IAAI,CAAC8B,MAAL,CAAY,EAAZ,CAAD;AADQ,OAAjB,CAJF;AAfuE;;AAIzE,SAAK,IAAIT,QAAQ,GAAGT,aAApB,EAAmCS,QAAQ,IAAIP,WAA/C,EAA4DO,QAAQ,IAAI,CAAxE,EAA2E;AAAA,uBAAlEA,QAAkE;;AAAA,+BAE9D;AAiBZ;AACF;;AAGD,MAAMU,QAAQ,GAAGzB,UAAU,CAACE,KAAX,CAAiBC,QAAjB,CAA0BuB,OAA1B,CAAkCzB,KAAK,CAACU,GAAxC,CAAjB;AACA,MAAMK,IAAI,GAAGpB,kBAAkB,CAAC6B,QAAD,EAAWpB,aAAX,EAA0BC,aAA1B,CAA/B;AAvCgF,MAwCxEqB,SAxCwE,GAwC1D3B,UAAU,CAACE,KAxC+C,CAwCxEyB,SAxCwE;AAyChF,MAAMC,KAAK,GAAG9B,mBAAmB,CAAC6B,SAAD,EAAY,KAAZ,CAAnB,CACXE,iBADW,CACOb,IADP,EACahB,UADb,CAAd;AAGA,SAAOA,UAAU,CACdoB,OADI,CACI3B,QAAQ,CAACqC,MADb,EACqBF,KADrB,CAAP;AAED","sourcesContent":["import { Controller, Commands, Text } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport Table from '../../mo/models';\nimport { getRealNodeInTable } from '../utils';\nimport getDataTableSelectionByTable from '../utils/getDataTableSelectionByTable';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\n\nexport default function emptyTableSelection(controller: Controller, table: Table) {\n  const { value } = controller;\n  const { document } = value;\n  const tableSelection = getDataTableSelectionByTable(controller, table);\n  if (!tableSelection) return controller;\n\n  const {\n    startRowIndex, startColIndex, endRowIndex, endColIndex,\n  } = tableSelection;\n\n  const tablePath = document.getPath(table.key);\n  for (let rowIndex = startRowIndex; rowIndex <= endRowIndex; rowIndex += 1) {\n    const row = table.nodes[rowIndex];\n    if (!row) continue;\n\n    for (let colIndex = startColIndex; colIndex <= endColIndex; colIndex += 1) {\n      const cell = row.nodes[colIndex];\n      if (!cell) continue;\n\n      const cellPath = [...tablePath!, rowIndex, colIndex];\n      for (let childIndex = cell.nodes.length - 1; childIndex >= 0; childIndex -= 1) {\n        controller.withoutNormalizing(() => {\n          controller.command(Commands.removeNodeByPath, [...cellPath, childIndex]);\n        });\n      }\n\n      controller.command(\n        Commands.insertNodeByPath,\n        cellPath,\n        0,\n        Paragraph.create({\n          nodes: [Text.create('')],\n        }),\n      );\n    }\n  }\n\n\n  const newTable = controller.value.document.getNode(table.key) as Table;\n  const cell = getRealNodeInTable(newTable, startRowIndex, startColIndex)!;\n  const { selection } = controller.value;\n  const range = setSelectionByTable(selection, false)\n    .moveToRangeOfNode(cell, controller);\n\n  return controller\n    .command(Commands.select, range);\n}\n"],"file":"emptyTableSelection.js"}