{"version":3,"sources":["../../../../src/bi/commands/insertCol.ts"],"names":["Commands","Table","createEmptyTableCell","getRealNodeInTable","getPositionOfCell","traverseSingleColCells","resizeTableWidthFitContainer","getVisibleCellOfCol","setTableColsWidth","setSelectionByTable","resizeTableToAutofitWidth","getTableMaxWidthByContainer","insertCol","controller","table","targetColIndex","triggerColIndex","colWidth","containerWidth","value","document","tablePath","getPath","key","withoutNormalizing","rowIndex","finalIndex","triggerCell","originalCell","data","triggerCellData","bdr","fill","hidden","realNode","position","colIndex","command","setNodeByPath","colSpan","insertNodeByPath","colsWidth","originalTotalColsWidth","reduce","acc","curr","refColIndex","length","refColWidth","splice","totalColsWidth","isAutofitWidth","newTable","getNodeByPath","containerW","updatedDoc","updatedTbl","latestTable","focusCell","s","selection","select","moveToStartOfNode"],"mappings":"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","sourcesContent":["import { Controller, Commands } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport createEmptyTableCell from '../utils/createEmptyTableCell';\nimport getRealNodeInTable from '../utils/getRealNodeInTable';\nimport getPositionOfCell from '../utils/getPositionOfCell';\nimport traverseSingleColCells from '../utils/traverseSingleColCells';\nimport resizeTableWidthFitContainer from './resizeTableWidthFitContainer';\nimport getVisibleCellOfCol from '../utils/getVisibleCellOfCol';\nimport setTableColsWidth from '../utils/setTableColsWidth';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\nimport resizeTableToAutofitWidth from './resizeTableToAutofitWidth';\nimport getTableMaxWidthByContainer from '../../utils/utils/getTableMaxWidthByContainer';\n\nexport default function insertCol(\n  controller: Controller,\n  table: Table,\n  targetColIndex: number,\n  triggerColIndex: number,\n  colWidth?: number,\n  containerWidth?: number,\n) {\n  const { value } = controller;\n  const { document } = value;\n  const tablePath = document.getPath(table.key);\n\n  controller.withoutNormalizing(() => {\n    traverseSingleColCells(table, targetColIndex, triggerColIndex, (rowIndex, finalIndex, triggerCell, originalCell) => {\n      const data = {} as any;\n      // triggerCell: 右键在哪个上面哪个就是triggerCell\n      // originalCell: 插入后新行的index，放在之前表格取的值，就是originalCell(可能不存在)\n      if (triggerCell) {\n        const triggerCellData = triggerCell.data;\n        if (triggerCellData && triggerCellData.bdr) {\n          data.bdr = triggerCellData.bdr;\n        }\n        if (triggerCellData && triggerCellData.fill) {\n          data.fill = triggerCellData.fill;\n        }\n      }\n      // 一种策略，originalCell是插入新列位置对应的原来的节点\n      // 这个节点如果处在realNode所在列后面的列(非同列)，那在这个位置上的新节点就会设置为hidden\n      // 同时比较rowIndex以保证realNode的colSpan只被拓充一次\n      if (originalCell && originalCell.data.hidden) {\n        const realNode = getRealNodeInTable(table, rowIndex, finalIndex);\n        if (realNode) {\n          const position = getPositionOfCell(realNode.key, table)!;\n          if (position.colIndex !== finalIndex) {\n            data.hidden = true;\n          }\n          if (position.rowIndex === rowIndex) {\n            controller.command(Commands.setNodeByPath, [...tablePath!, position.rowIndex, position.colIndex], {\n              data: {\n                ...realNode.data,\n                colSpan: (realNode.data.colSpan || 1) + 1,\n              },\n            });\n          }\n        }\n      }\n      controller.command(Commands.insertNodeByPath, [...tablePath!, rowIndex], finalIndex, createEmptyTableCell(data));\n    });\n  });\n\n  const colsWidth = [...table.data.colsWidth!];\n  const originalTotalColsWidth = colsWidth.reduce((acc, curr) => (acc + curr), 0);\n  // 未传入有效宽度则手动计算\n  if (!colWidth) {\n    const refColIndex = targetColIndex === colsWidth.length ? targetColIndex - 1 : targetColIndex;\n    const refColWidth = colsWidth[refColIndex];\n    colWidth = refColWidth;\n  }\n\n  colsWidth.splice(targetColIndex, 0, colWidth);\n\n  const totalColsWidth = colsWidth.reduce((acc, curr) => (acc + curr), 0);\n\n  setTableColsWidth(controller, table, colsWidth);\n\n  if (Table.isAutofitWidth(table)) {\n    const newTable = controller.value.document.getNodeByPath(tablePath) as Table;\n    resizeTableToAutofitWidth(controller, newTable, table, containerWidth);\n  } else {\n    const containerW = containerWidth || getTableMaxWidthByContainer(controller, table);\n    if (\n      totalColsWidth >= containerW\n      && originalTotalColsWidth <= containerW\n    ) {\n      const updatedDoc = controller.value.document;\n      const updatedTbl = updatedDoc.getNodeByPath(tablePath) as Table;\n\n      resizeTableWidthFitContainer(controller, updatedTbl, containerW);\n    }\n  }\n\n  const latestTable = controller.value.document.getNodeByPath(tablePath) as Table;\n  let focusCell = getVisibleCellOfCol(latestTable, targetColIndex);\n  if (!focusCell) {\n    focusCell = getRealNodeInTable(latestTable, 0, targetColIndex);\n  }\n  if (focusCell) {\n    const s = controller.value.selection;\n    return controller\n      .command(Commands.select, setSelectionByTable(s, false))\n      .command(Commands.moveToStartOfNode, focusCell!);\n  }\n  return controller;\n}\n"],"file":"insertCol.js"}