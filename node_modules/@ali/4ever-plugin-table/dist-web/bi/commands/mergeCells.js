import _extends from "@babel/runtime/helpers/extends";
import { Commands, Block, Text } from '@ali/4ever-cangjie';
import getDataTableSelectionByTable from "../utils/getDataTableSelectionByTable";
import setSelectionByTable from "../../utils/utils/setSelectionByTable";

function isEmptyCell(cell) {
  if (cell.nodes.length > 1) {
    return false;
  }

  var firstChild = cell.nodes[0];

  if (firstChild.type !== 'paragraph' || firstChild.nodes.length > 1) {
    return false;
  }

  var firstGrandChild = firstChild.nodes[0];

  if (!Text.isText(firstGrandChild)) {
    return false;
  }

  return !firstGrandChild.text.length;
}

export default function mergeCells(controller, table) {
  var value = controller.value;
  var document = value.document,
      selection = value.selection;
  var tableSelection = getDataTableSelectionByTable(controller, table);

  if (!tableSelection || !table) {
    return controller;
  }

  var startRowIndex = tableSelection.startRowIndex,
      startColIndex = tableSelection.startColIndex,
      endRowIndex = tableSelection.endRowIndex,
      endColIndex = tableSelection.endColIndex;
  var tablePath = document.getPath(table.key);
  var firstCellPath = [].concat(tablePath, [startRowIndex, startColIndex]);
  var firstCell = document.getNodeByPath(firstCellPath);
  controller.command(Commands.setNodeByPath, firstCellPath, {
    data: _extends({}, firstCell.data, {
      rowSpan: endRowIndex - startRowIndex + 1,
      colSpan: endColIndex - startColIndex + 1
    })
  });

  for (var r = startRowIndex; r <= endRowIndex; r += 1) {
    var _loop = function _loop(c) {
      var _cell$data;

      if (r === startRowIndex && c === startColIndex) return "continue"; // @ts-ignore

      var cell = table.nodes[r].nodes[c];
      if (!cell) return "continue";
      if ((_cell$data = cell.data) != null && _cell$data.hidden) return "continue";
      var cellPath = [].concat(tablePath, [r, c]);
      controller.command(Commands.setNodeByPath, cellPath, {
        data: _extends({}, cell.data, {
          rowSpan: 1,
          colSpan: 1,
          hidden: true
        })
      });
      if (isEmptyCell(cell)) return "continue";

      for (var childIndex = 0; childIndex < cell.nodes.length; childIndex += 1) {
        controller.withoutNormalizing(function () {
          controller.command(Commands.moveNodeByPath, [].concat(cellPath, [0]), firstCellPath, // @ts-ignore
          controller.value.document.getNodeByPath(firstCellPath).nodes.length);
        });
      }

      controller.command(Commands.insertNodeByPath, cellPath, 0, Block.create({
        type: 'paragraph',
        nodes: [Text.create('')]
      }));
    };

    for (var c = startColIndex; c <= endColIndex; c += 1) {
      var _ret = _loop(c);

      if (_ret === "continue") continue;
    }
  }

  var s = selection.moveToStartOfNode(firstCell, controller);
  return controller.command(Commands.select, setSelectionByTable(s, false));
}
//# sourceMappingURL=mergeCells.js.map