{"version":3,"sources":["../../../../src/bi/commands/splitCell.ts"],"names":["Commands","createTableSelectionForFocusedCell","getDataTableSelectionByTable","splitCell","controller","table","area","value","document","tableSelection","queryTableSelection","startRowIndex","startColIndex","endRowIndex","endColIndex","tablePath","getPath","key","r","c","cellPath","cell","getNodeByPath","command","setNodeByPath","data","rowSpan","colSpan","hidden"],"mappings":";AAAA,SAAqBA,QAArB,QAAqC,oBAArC;AAIA,OAAOC,kCAAP;AACA,OAAOC,4BAAP;AAEA,eAAe,SAASC,SAAT,CAAmBC,UAAnB,EAA2CC,KAA3C,EAAyDC,IAAzD,EAAiF;AAAA,MACtFC,KADsF,GAC5EH,UAD4E,CACtFG,KADsF;AAAA,MAEtFC,QAFsF,GAEzED,KAFyE,CAEtFC,QAFsF;;AAG9F,MAAI,CAACH,KAAL,EAAY;AACV,WAAOD,UAAP;AACD;;AACD,MAAIK,cAAJ;;AACA,MAAIH,IAAJ,EAAU;AACRG,IAAAA,cAAc,GAAGH,IAAjB;AACD,GAFD,MAEO;AACL,QAAMI,mBAAmB,GAAGR,4BAA4B,CAACE,UAAD,EAAaC,KAAb,CAAxD;AACAI,IAAAA,cAAc,GAAGC,mBAAmB,IAClCT,kCAAkC,CAACM,KAAD,EAAQF,KAAR,CADpC;AAED;;AAED,MAAI,CAACI,cAAL,EAAqB;AACnB,WAAOL,UAAP;AACD;;AAjB6F,wBAqB1FK,cArB0F;AAAA,MAoB5FE,aApB4F,mBAoB5FA,aApB4F;AAAA,MAoB7EC,aApB6E,mBAoB7EA,aApB6E;AAAA,MAoB9DC,WApB8D,mBAoB9DA,WApB8D;AAAA,MAoBjDC,WApBiD,mBAoBjDA,WApBiD;AAuB9F,MAAMC,SAAS,GAAGP,QAAQ,CAACQ,OAAT,CAAiBX,KAAK,CAACY,GAAvB,CAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAGP,aAAb,EAA4BO,CAAC,IAAIL,WAAjC,EAA8CK,CAAC,IAAI,CAAnD,EAAsD;AACpD,SAAK,IAAIC,CAAC,GAAGP,aAAb,EAA4BO,CAAC,IAAIL,WAAjC,EAA8CK,CAAC,IAAI,CAAnD,EAAsD;AACpD,UAAMC,QAAQ,aAAOL,SAAP,GAAmBG,CAAnB,EAAsBC,CAAtB,EAAd;AACA,UAAME,IAAI,GAAGb,QAAQ,CAACc,aAAT,CAAuBF,QAAvB,CAAb;;AACA,UAAIC,IAAJ,EAAU;AACRjB,QAAAA,UAAU,CAACmB,OAAX,CAAmBvB,QAAQ,CAACwB,aAA5B,EAA2CJ,QAA3C,EAAqD;AACnDK,UAAAA,IAAI,eACCJ,IAAI,CAACI,IADN;AAEFC,YAAAA,OAAO,EAAE,CAFP;AAGFC,YAAAA,OAAO,EAAE,CAHP;AAIFC,YAAAA,MAAM,EAAE;AAJN;AAD+C,SAArD;AAQD;AACF;AACF;;AACD,SAAOxB,UAAP;AACD","sourcesContent":["import { Controller, Commands } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport TableCell from '../../mo/models/tableCell';\nimport { ITableSelection } from '../types';\nimport createTableSelectionForFocusedCell from '../utils/createTableSelectionForFocusedCell';\nimport getDataTableSelectionByTable from '../utils/getDataTableSelectionByTable';\n\nexport default function splitCell(controller: Controller, table: Table, area?: ITableSelection) {\n  const { value } = controller;\n  const { document } = value;\n  if (!table) {\n    return controller;\n  }\n  let tableSelection: ITableSelection | null;\n  if (area) {\n    tableSelection = area;\n  } else {\n    const queryTableSelection = getDataTableSelectionByTable(controller, table);\n    tableSelection = queryTableSelection ||\n      createTableSelectionForFocusedCell(value, table);\n  }\n\n  if (!tableSelection) {\n    return controller;\n  }\n\n  const {\n    startRowIndex, startColIndex, endRowIndex, endColIndex,\n  } = tableSelection;\n\n  const tablePath = document.getPath(table.key);\n\n  for (let r = startRowIndex; r <= endRowIndex; r += 1) {\n    for (let c = startColIndex; c <= endColIndex; c += 1) {\n      const cellPath = [...tablePath!, r, c];\n      const cell = document.getNodeByPath(cellPath) as TableCell;\n      if (cell) {\n        controller.command(Commands.setNodeByPath, cellPath, {\n          data: {\n            ...cell.data,\n            rowSpan: 1,\n            colSpan: 1,\n            hidden: false,\n          },\n        });\n      }\n    }\n  }\n  return controller;\n}\n"],"file":"splitCell.js"}