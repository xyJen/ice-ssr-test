{"version":3,"sources":["../../../../src/bi/commands/setTableAutofitWidth.ts"],"names":["Commands","Table","normalizeColsWidth","calcResizeColsWidth","enableAutofitWidth","convertFromPercentToPixel","convertFromPixelToPercent","getTableMaxWidthByContainer","filterValidData","setTableColsWidth","controller","table","isAutoFitWidth","maxWidth","prevIsAutoFitWidth","isAutofitWidth","containerWidth","colsWidth","totalWidth","reduce","acc","w","pctColsWidth","newTable","value","document","getNode","key","command","setNodeByKey","data","cw","Array","isArray","newColsWidth"],"mappings":";AAAA,SAASA,QAAT,QAAqC,oBAArC;AACA,OAAOC,KAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,kBAAP;AACA,SAASC,yBAAT,EAAoCC,yBAApC;AACA,OAAOC,2BAAP;AACA,OAAOC,eAAP;AAEA,eAAe,SAASC,iBAAT,CACbC,UADa,EAEbC,KAFa,EAGbC,cAHa,EAIbC,QAJa,EAKb;AACA,MAAMC,kBAAkB,GAAGb,KAAK,CAACc,cAAN,CAAqBJ,KAArB,CAA3B;AACA,MAAIG,kBAAkB,KAAKF,cAA3B,EAA2C,OAAOF,UAAP;AAE3C,MAAIM,cAAc,GAAGH,QAArB;;AACA,MAAI,CAACG,cAAL,EAAqB;AACnBA,IAAAA,cAAc,GAAGT,2BAA2B,CAACG,UAAD,EAAaC,KAAb,CAA5C;AACD;;AACD,MAAI,CAACK,cAAL,EAAqB,OAAON,UAAP;;AAErB,MAAIE,cAAJ,EAAoB;AAClB,QAAIK,UAAS,GAAGf,kBAAkB,CAACS,KAAD,CAAlC;;AACA,QAAIO,UAAU,GAAGD,UAAS,CAACE,MAAV,CAAiB,UAACC,GAAD,EAAMC,CAAN;AAAA,aAAaD,GAAG,GAAGC,CAAnB;AAAA,KAAjB,CAAjB,CAFkB,CAGlB;;;AACA,QAAIH,UAAU,GAAGF,cAAjB,EAAiC;AAC/BC,MAAAA,UAAS,GAAGd,mBAAmB,CAACO,UAAD,EAAaC,KAAb,EAAoBK,cAAc,GAAGE,UAArC,CAA/B;AACAA,MAAAA,UAAU,GAAGD,UAAS,CAACE,MAAV,CAAiB,UAACC,GAAD,EAAMC,CAAN;AAAA,eAAaD,GAAG,GAAGC,CAAnB;AAAA,OAAjB,CAAb;;AACA,UAAIH,UAAU,GAAGF,cAAjB,EAAiC;AAC/B,eAAON,UAAP;AACD;AACF;;AACD,QAAMY,YAAY,GAAGhB,yBAAyB,CAACW,UAAD,EAAYC,UAAZ,CAA9C;AAEAd,IAAAA,kBAAkB,CAACM,UAAD,EAAaC,KAAb,CAAlB;;AACA,QAAMY,SAAQ,GAAGb,UAAU,CAACc,KAAX,CAAiBC,QAAjB,CAA0BC,OAA1B,CAAkCf,KAAK,CAACgB,GAAxC,CAAjB;;AACA,WAAOjB,UAAU,CAACkB,OAAX,CAAmB5B,QAAQ,CAAC6B,YAA5B,EAA0CN,SAAQ,CAACI,GAAnD,EAAwD;AAC7DG,MAAAA,IAAI,EAAEtB,eAAe,cAChBe,SAAQ,CAACO,IADO;AAEnBb,QAAAA,SAAS,EAAEK;AAFQ;AADwC,KAAxD,CAAP;AAMD;;AAED,MAAMS,EAAE,GAAGf,cAAX;AAjCA,MAkCQC,SAlCR,GAkCsBN,KAAK,CAACmB,IAlC5B,CAkCQb,SAlCR;AAoCA,MAAI,CAACe,KAAK,CAACC,OAAN,CAAchB,SAAd,CAAL,EAA+B,OAAOP,UAAP;AAE/B,MAAMwB,YAAY,GAAG7B,yBAAyB,CAACM,KAAD,EAAQoB,EAAR,CAA9C;AAEA3B,EAAAA,kBAAkB,CAACM,UAAD,EAAaC,KAAb,EAAoB,KAApB,CAAlB;AACA,MAAMY,QAAQ,GAAGb,UAAU,CAACc,KAAX,CAAiBC,QAAjB,CAA0BC,OAA1B,CAAkCf,KAAK,CAACgB,GAAxC,CAAjB;AACA,SAAOjB,UAAU,CAACkB,OAAX,CAAmB5B,QAAQ,CAAC6B,YAA5B,EAA0CN,QAAQ,CAACI,GAAnD,EAAwD;AAC7DG,IAAAA,IAAI,EAAEtB,eAAe,cAChBe,QAAQ,CAACO,IADO;AAEnBb,MAAAA,SAAS,EAAEiB;AAFQ;AADwC,GAAxD,CAAP;AAMD","sourcesContent":["import { Commands, Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport normalizeColsWidth from '../utils/normalizeColsWidth';\nimport calcResizeColsWidth from '../utils/calcResizeColsWidth';\nimport enableAutofitWidth from '../../utils/commands/enableAutofitWidth';\nimport { convertFromPercentToPixel, convertFromPixelToPercent } from '../../utils/utils/colsWidthConverter';\nimport getTableMaxWidthByContainer from '../../utils/utils/getTableMaxWidthByContainer';\nimport filterValidData from '../../utils/utils/filterValidData';\n\nexport default function setTableColsWidth(\n  controller: Controller,\n  table: Table,\n  isAutoFitWidth: boolean,\n  maxWidth?: number,\n) {\n  const prevIsAutoFitWidth = Table.isAutofitWidth(table);\n  if (prevIsAutoFitWidth === isAutoFitWidth) return controller;\n\n  let containerWidth = maxWidth;\n  if (!containerWidth) {\n    containerWidth = getTableMaxWidthByContainer(controller, table);\n  }\n  if (!containerWidth) return controller;\n\n  if (isAutoFitWidth) {\n    let colsWidth = normalizeColsWidth(table);\n    let totalWidth = colsWidth.reduce((acc, w) => (acc + w));\n    // 若原表格宽度大于容器，判断自适应后的表格是否超出容器，如果超出则不做处理\n    if (totalWidth > containerWidth) {\n      colsWidth = calcResizeColsWidth(controller, table, containerWidth - totalWidth);\n      totalWidth = colsWidth.reduce((acc, w) => (acc + w));\n      if (totalWidth > containerWidth) {\n        return controller;\n      }\n    }\n    const pctColsWidth = convertFromPixelToPercent(colsWidth, totalWidth);\n\n    enableAutofitWidth(controller, table);\n    const newTable = controller.value.document.getNode(table.key)! as Table;\n    return controller.command(Commands.setNodeByKey, newTable.key, {\n      data: filterValidData({\n        ...newTable.data,\n        colsWidth: pctColsWidth,\n      }),\n    });\n  }\n\n  const cw = containerWidth as number;\n  const { colsWidth } = table.data;\n\n  if (!Array.isArray(colsWidth)) return controller;\n\n  const newColsWidth = convertFromPercentToPixel(table, cw);\n\n  enableAutofitWidth(controller, table, false);\n  const newTable = controller.value.document.getNode(table.key)! as Table;\n  return controller.command(Commands.setNodeByKey, newTable.key, {\n    data: filterValidData({\n      ...newTable.data,\n      colsWidth: newColsWidth,\n    }),\n  });\n}\n"],"file":"setTableAutofitWidth.js"}