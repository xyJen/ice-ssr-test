{"version":3,"sources":["../../../../src/bi/commands/deleteRows.ts"],"names":["Commands","isEmptyTable","getRealNodeInTable","getPositionOfCell","traverseSingleRowCells","deleteTable","createTableSelectionForFocusedCell","getDataTableSelectionByTable","setSelectionByTable","deleteRow","controller","tablePath","rowIndex","table","value","document","getNodeByPath","_","colIndex","cell","data","hidden","realNode","position","key","command","setNodeByPath","rowSpan","inheritCellPath","nextRow","nodes","withoutNormalizing","removeNodeByPath","deleteRows","selection","tableSelection","queryTbSelection","startRowIndex","endRowIndex","getPath","updatedTable","rowSize","length","selectedRowIndex","focusCell","s","moveToStartOfNode","select"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport { Controller, Commands, Path } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport isEmptyTable from '../utils/isEmptyTable';\nimport selectTableSelection from './selectTableSelection';\nimport getRealNodeInTable from '../utils/getRealNodeInTable';\nimport getPositionOfCell from '../utils/getPositionOfCell';\nimport traverseSingleRowCells from '../utils/traverseSingleRowCells';\nimport deleteTable from './deleteTable';\nimport { createTableSelectionForFocusedCell } from '../utils';\nimport { ITableSelection } from '../types';\nimport getDataTableSelectionByTable from '../utils/getDataTableSelectionByTable';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\n\nfunction deleteRow(controller: Controller, tablePath: Path, rowIndex: number) {\n  const table = controller.value.document.getNodeByPath(tablePath) as Table;\n  traverseSingleRowCells(table, rowIndex, rowIndex, (_, colIndex, cell) => {\n    if (cell.data?.hidden) {\n      const realNode = getRealNodeInTable(table, rowIndex, colIndex);\n      if (!realNode) {\n        return;\n      }\n      const position = getPositionOfCell(realNode.key, table)!;\n      if (position.colIndex === colIndex && position.rowIndex < rowIndex) {\n        controller.command(Commands.setNodeByPath,\n          [...tablePath, position.rowIndex, position.colIndex], {\n            data: {\n              ...realNode.data,\n              rowSpan: (realNode.data.rowSpan || 1) - 1,\n            },\n          });\n      }\n    } else if ((cell.data?.rowSpan || 1) > 1) {\n      const inheritCellPath = [...tablePath, rowIndex + 1, colIndex];\n      const nextRow = table.nodes[rowIndex + 1];\n      // 不规整表格可能不存在下一行\n      if (nextRow) {\n        controller.command(Commands.setNodeByPath, inheritCellPath, {\n          data: {\n            ...cell.data,\n            rowSpan: (cell.data.rowSpan || 1) - 1,\n          },\n        });\n      }\n    }\n  });\n  controller.withoutNormalizing(() => {\n    controller.command(Commands.removeNodeByPath, [...tablePath, rowIndex]);\n  });\n}\n\nexport default function deleteRows(controller: Controller, table: Table) {\n  const { value } = controller;\n  const { document, selection } = value;\n  let tableSelection: ITableSelection | null = null;\n  const queryTbSelection = getDataTableSelectionByTable(controller, table);\n  if (queryTbSelection) {\n    tableSelection = queryTbSelection;\n  } else {\n    tableSelection = createTableSelectionForFocusedCell(value, table);\n  }\n  if (!tableSelection) {\n    return controller;\n  }\n  const { startRowIndex, endRowIndex } = tableSelection;\n  const tablePath = document.getPath(table.key)!;\n\n  for (let rowIndex = endRowIndex; rowIndex >= startRowIndex; rowIndex -= 1) {\n    deleteRow(controller, tablePath, rowIndex);\n  }\n\n  const updatedTable = controller.value.document.getNodeByPath(tablePath) as Table;\n  if (isEmptyTable(updatedTable)) {\n    controller.command(deleteTable, updatedTable);\n  } else {\n    const rowSize = updatedTable.nodes.length;\n    const selectedRowIndex = startRowIndex >= rowSize ? rowSize - 1 : startRowIndex;\n    const focusCell = getRealNodeInTable(updatedTable, selectedRowIndex, 0);\n    if (focusCell) {\n      const s = setSelectionByTable(selection, false)\n        .moveToStartOfNode(focusCell, controller);\n      return controller.command(Commands.select, s);\n    }\n  }\n\n  return controller;\n}\n"],"file":"deleteRows.js"}