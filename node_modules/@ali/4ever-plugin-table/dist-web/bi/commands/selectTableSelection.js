import { Block, Commands } from '@ali/4ever-cangjie';
import adjustSelection from "../utils/adjustSelection";
import deleteTable from "./deleteTable";
import getRealNodeInTable from "../utils/getRealNodeInTable";
import setSelectionByTable from "../../utils/utils/setSelectionByTable";
export default function selectTableSelection(controller, table, tableSelection, shouldAdjust) {
  if (shouldAdjust === void 0) {
    shouldAdjust = true;
  }

  var newTableSelection = null;

  if (tableSelection) {
    newTableSelection = shouldAdjust ? adjustSelection(table, tableSelection) : tableSelection;
  }

  if (!newTableSelection) {
    // TODO: history相关
    return controller;
  } // 表格未做schema，存在row被删除的情况


  if (table.nodes.length === 0) return controller.command(deleteTable, table);
  var _newTableSelection = newTableSelection,
      startRowIndex = _newTableSelection.startRowIndex,
      startColIndex = _newTableSelection.startColIndex;
  var targetRow = table.nodes[startRowIndex]; // 表格跨页时，targetRow 可能不存在

  if (!targetRow) {
    return controller;
  }

  if (!targetRow.nodes) {
    return controller.command(Commands.replaceNodeByKey, targetRow.key, Block.create('paragraph'));
  }

  var cell = getRealNodeInTable(table, startRowIndex, startColIndex);

  if (!cell) {
    return controller;
  }

  var rangeSelection = controller.query('getSelectionFromTableSelection', {
    tableSelection: newTableSelection
  });

  if (!rangeSelection) {
    return controller;
  }

  rangeSelection = setSelectionByTable(rangeSelection, true, tableSelection.type);
  return controller.command(Commands.select, rangeSelection);
}
//# sourceMappingURL=selectTableSelection.js.map