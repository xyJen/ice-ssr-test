import _extends from "@babel/runtime/helpers/extends";
import { Commands } from '@ali/4ever-cangjie';
import Table from "../../mo/models";
import { TABLE_HEADER_STYLE_ID } from "../constants";
var DEFAULT_TBLLOOK = {
  firstRow: 0,
  firstColumn: 0,
  lastRow: 0,
  lastColumn: 0
};

function updateStyleId(controller, table) {
  var newTable = controller.value.document.getNode(table.key);
  if (!newTable) return controller;

  var tableData = _extends({}, newTable.data || {});

  var styleId = tableData.styleId;
  var shouldRemoveStyleId = !Table.isRowHeader(newTable) && !Table.isColumnHeader(newTable);

  if (shouldRemoveStyleId && styleId) {
    delete tableData.styleId;
    return controller.command(Commands.setNodeByKey, newTable.key, {
      data: tableData
    });
  }

  if (!shouldRemoveStyleId && !styleId) {
    tableData.styleId = TABLE_HEADER_STYLE_ID;
    return controller.command(Commands.setNodeByKey, newTable.key, {
      data: tableData
    });
  }

  return controller;
}

function updateTblLook(controller, table) {
  var newTable = controller.value.document.getNode(table.key);
  if (!newTable) return controller;

  var tableData = _extends({}, newTable.data || {});

  var newTblLook = _extends({}, DEFAULT_TBLLOOK);

  var isRowHeader = Table.isRowHeader(newTable);
  var isColumnHeader = Table.isColumnHeader(newTable);
  newTblLook.firstRow = isRowHeader ? 1 : 0;
  newTblLook.firstColumn = isColumnHeader ? 1 : 0;
  return controller.command(Commands.setNodeByKey, newTable.key, {
    data: _extends({}, tableData, {
      tblLook: newTblLook
    })
  });
}

export default function updateTableStyle(controller, table) {
  updateStyleId(controller, table);
  updateTblLook(controller, table);
  return controller;
}
//# sourceMappingURL=updateTableStyle.js.map