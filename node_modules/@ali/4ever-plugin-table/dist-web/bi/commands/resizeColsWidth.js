import Table from "../../mo/models";
import { MIN_COL_WIDTH } from "../constants";
import isNumber from "../utils/isNumber";
import setTableColsWidth from "../utils/setTableColsWidth";
import enableAutofitWidth from "../../utils/commands/enableAutofitWidth";
import { convertFromPercentToPixel, convertFromPixelToPercent } from "../../utils/utils/colsWidthConverter";
import getTableMaxWidthByContainer from "../../utils/utils/getTableMaxWidthByContainer";
export default function resizeColsWidth(controller, payload) {
  var table = payload.node,
      resizeColIndex = payload.colIndex,
      delta = payload.delta,
      cw = payload.containerWidth;

  if (!isNumber(delta) || delta === 0) {
    return controller;
  }

  var cols = table.data.colsWidth || [];

  var calcColWidth = function calcColWidth(colIndex, d) {
    var result = colsWidth[colIndex] + d;

    if (d >= 0) {
      return result;
    }

    var _ref = controller.query('calcMinTableColWidth', {
      node: table,
      colIndex: colIndex
    }) || {},
        limitWidth = _ref.width; // 当前列包含某些特殊子节点时，限制当前最小列宽


    if (typeof limitWidth === 'number') {
      result = Math.max(result, limitWidth);
    }

    return Math.max(result, MIN_COL_WIDTH);
  };

  var pixelColsWidth = cols;
  var totalColsWidth = 0;
  var isAutofit = Table.isAutofitWidth(table);
  var containerWidth = cw || getTableMaxWidthByContainer(controller, table);

  if (isAutofit) {
    pixelColsWidth = convertFromPercentToPixel(table, containerWidth);
  }

  totalColsWidth = pixelColsWidth.reduce(function (acc, curr) {
    return acc + curr;
  }, 0);
  var colsWidth = pixelColsWidth.slice();
  var originColWidth = colsWidth[resizeColIndex];
  colsWidth[resizeColIndex] = calcColWidth(resizeColIndex, delta); // 真实的列宽变化

  var realDelta = colsWidth[resizeColIndex] - originColWidth;

  if ((isAutofit || totalColsWidth <= containerWidth) && resizeColIndex < colsWidth.length - 1) {
    colsWidth[resizeColIndex + 1] = calcColWidth(resizeColIndex + 1, -realDelta);
  }

  if (isAutofit) {
    var newTotalWidth = colsWidth.reduce(function (acc, w) {
      return acc + w;
    }, 0); // 当调整后的表格列宽超出传入的 containerWidth 时，将关闭宽度自适应（目前只有移动端会传 containerWidth

    if (cw && newTotalWidth > cw || resizeColIndex === colsWidth.length - 1) {
      enableAutofitWidth(controller, table, false);
      var newTable = controller.value.document.getNode(table.key);
      return setTableColsWidth(controller, newTable, colsWidth);
    }

    var pctColsWidth = convertFromPixelToPercent(colsWidth, containerWidth);
    return setTableColsWidth(controller, table, pctColsWidth);
  }

  return setTableColsWidth(controller, table, colsWidth);
}
//# sourceMappingURL=resizeColsWidth.js.map