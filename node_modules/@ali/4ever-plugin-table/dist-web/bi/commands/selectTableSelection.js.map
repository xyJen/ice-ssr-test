{"version":3,"sources":["../../../../src/bi/commands/selectTableSelection.ts"],"names":["Block","Commands","adjustSelection","deleteTable","getRealNodeInTable","setSelectionByTable","selectTableSelection","controller","table","tableSelection","shouldAdjust","newTableSelection","nodes","length","command","startRowIndex","startColIndex","targetRow","replaceNodeByKey","key","create","cell","rangeSelection","query","type","select"],"mappings":"AAAA,SAEEA,KAFF,EAGEC,QAHF,QAKO,oBALP;AAOA,OAAOC,eAAP;AAEA,OAAOC,WAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,mBAAP;AAEA,eAAe,SAASC,oBAAT,CACbC,UADa,EAEbC,KAFa,EAGbC,cAHa,EAIbC,YAJa,EAKb;AAAA,MADAA,YACA;AADAA,IAAAA,YACA,GADe,IACf;AAAA;;AACA,MAAIC,iBAAyC,GAAG,IAAhD;;AACA,MAAIF,cAAJ,EAAoB;AAClBE,IAAAA,iBAAiB,GAAGD,YAAY,GAAGR,eAAe,CAACM,KAAD,EAAQC,cAAR,CAAlB,GAA4CA,cAA5E;AACD;;AACD,MAAI,CAACE,iBAAL,EAAwB;AACtB;AACA,WAAOJ,UAAP;AACD,GARD,CASA;;;AACA,MAAIC,KAAK,CAACI,KAAN,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B,OAAON,UAAU,CAACO,OAAX,CAAmBX,WAAnB,EAAgCK,KAAhC,CAAP;AAV9B,2BAWyCG,iBAXzC;AAAA,MAWQI,aAXR,sBAWQA,aAXR;AAAA,MAWuBC,aAXvB,sBAWuBA,aAXvB;AAYA,MAAMC,SAAS,GAAGT,KAAK,CAACI,KAAN,CAAYG,aAAZ,CAAlB,CAZA,CAaA;;AACA,MAAI,CAACE,SAAL,EAAgB;AACd,WAAOV,UAAP;AACD;;AACD,MAAI,CAACU,SAAS,CAACL,KAAf,EAAsB;AACpB,WAAOL,UAAU,CAACO,OAAX,CAAmBb,QAAQ,CAACiB,gBAA5B,EAA8CD,SAAS,CAACE,GAAxD,EAA6DnB,KAAK,CAACoB,MAAN,CAAa,WAAb,CAA7D,CAAP;AACD;;AACD,MAAMC,IAAI,GAAGjB,kBAAkB,CAACI,KAAD,EAAQO,aAAR,EAAuBC,aAAvB,CAA/B;;AACA,MAAI,CAACK,IAAL,EAAW;AACT,WAAOd,UAAP;AACD;;AAED,MAAIe,cAAgC,GAAGf,UAAU,CAACgB,KAAX,CACrC,gCADqC,EAErC;AAAEd,IAAAA,cAAc,EAAEE;AAAlB,GAFqC,CAAvC;;AAIA,MAAI,CAACW,cAAL,EAAqB;AACnB,WAAOf,UAAP;AACD;;AACDe,EAAAA,cAAc,GAAGjB,mBAAmB,CAACiB,cAAD,EAAiB,IAAjB,EAAuBb,cAAc,CAACe,IAAtC,CAApC;AACA,SAAOjB,UAAU,CAACO,OAAX,CAAmBb,QAAQ,CAACwB,MAA5B,EAAoCH,cAApC,CAAP;AACD","sourcesContent":["import {\n  Controller,\n  Block,\n  Commands,\n  Selection,\n} from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport adjustSelection from '../utils/adjustSelection';\nimport { ITableSelection } from '../types';\nimport deleteTable from './deleteTable';\nimport getRealNodeInTable from '../utils/getRealNodeInTable';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\n\nexport default function selectTableSelection(\n  controller: Controller,\n  table: Table,\n  tableSelection: ITableSelection,\n  shouldAdjust = true,\n) {\n  let newTableSelection: ITableSelection | null = null;\n  if (tableSelection) {\n    newTableSelection = shouldAdjust ? adjustSelection(table, tableSelection) : tableSelection;\n  }\n  if (!newTableSelection) {\n    // TODO: history相关\n    return controller;\n  }\n  // 表格未做schema，存在row被删除的情况\n  if (table.nodes.length === 0) return controller.command(deleteTable, table);\n  const { startRowIndex, startColIndex } = newTableSelection;\n  const targetRow = table.nodes[startRowIndex];\n  // 表格跨页时，targetRow 可能不存在\n  if (!targetRow) {\n    return controller;\n  }\n  if (!targetRow.nodes) {\n    return controller.command(Commands.replaceNodeByKey, targetRow.key, Block.create('paragraph'));\n  }\n  const cell = getRealNodeInTable(table, startRowIndex, startColIndex)!;\n  if (!cell) {\n    return controller;\n  }\n\n  let rangeSelection: Selection | null = controller.query(\n    'getSelectionFromTableSelection',\n    { tableSelection: newTableSelection },\n  );\n  if (!rangeSelection) {\n    return controller;\n  }\n  rangeSelection = setSelectionByTable(rangeSelection, true, tableSelection.type);\n  return controller.command(Commands.select, rangeSelection);\n}\n"],"file":"selectTableSelection.js"}