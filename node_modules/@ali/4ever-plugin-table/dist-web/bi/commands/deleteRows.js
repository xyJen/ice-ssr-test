import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable no-shadow */
import { Commands } from '@ali/4ever-cangjie';
import isEmptyTable from "../utils/isEmptyTable";
import getRealNodeInTable from "../utils/getRealNodeInTable";
import getPositionOfCell from "../utils/getPositionOfCell";
import traverseSingleRowCells from "../utils/traverseSingleRowCells";
import deleteTable from "./deleteTable";
import { createTableSelectionForFocusedCell } from "../utils";
import getDataTableSelectionByTable from "../utils/getDataTableSelectionByTable";
import setSelectionByTable from "../../utils/utils/setSelectionByTable";

function deleteRow(controller, tablePath, rowIndex) {
  var table = controller.value.document.getNodeByPath(tablePath);
  traverseSingleRowCells(table, rowIndex, rowIndex, function (_, colIndex, cell) {
    var _cell$data, _cell$data2;

    if ((_cell$data = cell.data) != null && _cell$data.hidden) {
      var realNode = getRealNodeInTable(table, rowIndex, colIndex);

      if (!realNode) {
        return;
      }

      var position = getPositionOfCell(realNode.key, table);

      if (position.colIndex === colIndex && position.rowIndex < rowIndex) {
        controller.command(Commands.setNodeByPath, [].concat(tablePath, [position.rowIndex, position.colIndex]), {
          data: _extends({}, realNode.data, {
            rowSpan: (realNode.data.rowSpan || 1) - 1
          })
        });
      }
    } else if ((((_cell$data2 = cell.data) == null ? void 0 : _cell$data2.rowSpan) || 1) > 1) {
      var inheritCellPath = [].concat(tablePath, [rowIndex + 1, colIndex]);
      var nextRow = table.nodes[rowIndex + 1]; // 不规整表格可能不存在下一行

      if (nextRow) {
        controller.command(Commands.setNodeByPath, inheritCellPath, {
          data: _extends({}, cell.data, {
            rowSpan: (cell.data.rowSpan || 1) - 1
          })
        });
      }
    }
  });
  controller.withoutNormalizing(function () {
    controller.command(Commands.removeNodeByPath, [].concat(tablePath, [rowIndex]));
  });
}

export default function deleteRows(controller, table) {
  var value = controller.value;
  var document = value.document,
      selection = value.selection;
  var tableSelection = null;
  var queryTbSelection = getDataTableSelectionByTable(controller, table);

  if (queryTbSelection) {
    tableSelection = queryTbSelection;
  } else {
    tableSelection = createTableSelectionForFocusedCell(value, table);
  }

  if (!tableSelection) {
    return controller;
  }

  var _tableSelection = tableSelection,
      startRowIndex = _tableSelection.startRowIndex,
      endRowIndex = _tableSelection.endRowIndex;
  var tablePath = document.getPath(table.key);

  for (var rowIndex = endRowIndex; rowIndex >= startRowIndex; rowIndex -= 1) {
    deleteRow(controller, tablePath, rowIndex);
  }

  var updatedTable = controller.value.document.getNodeByPath(tablePath);

  if (isEmptyTable(updatedTable)) {
    controller.command(deleteTable, updatedTable);
  } else {
    var rowSize = updatedTable.nodes.length;
    var selectedRowIndex = startRowIndex >= rowSize ? rowSize - 1 : startRowIndex;
    var focusCell = getRealNodeInTable(updatedTable, selectedRowIndex, 0);

    if (focusCell) {
      var s = setSelectionByTable(selection, false).moveToStartOfNode(focusCell, controller);
      return controller.command(Commands.select, s);
    }
  }

  return controller;
}
//# sourceMappingURL=deleteRows.js.map