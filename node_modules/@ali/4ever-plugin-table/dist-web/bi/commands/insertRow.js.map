{"version":3,"sources":["../../../../src/bi/commands/insertRow.ts"],"names":["Commands","createTableRow","getPositionOfRow","getRealNodeInTable","getPositionOfCell","traverseSingleRowCells","isTable","getVisibleCellOfRow","setSelectionByTable","insertRow","controller","tableRow","type","value","document","table","getClosest","key","tablePath","getPath","triggerRowIndex","targetRowIndex","colSize","nodes","length","newTableRow","command","insertNodeByPath","_targetRowIndex","colIndex","_","originalCell","data","hidden","realNode","position","rowIndex","newCell","setNodeByPath","rowSpan","latestTable","getNodeByPath","focusCell","s","selection","select","moveToStartOfNode"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport { Controller, Commands } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport TableRow from '../../mo/models/tableRow';\nimport createTableRow from '../utils/createTableRow';\nimport getPositionOfRow from '../utils/getPositionOfRow';\nimport getRealNodeInTable from '../utils/getRealNodeInTable';\nimport getPositionOfCell from '../utils/getPositionOfCell';\nimport traverseSingleRowCells from '../utils/traverseSingleRowCells';\nimport { isTable } from '../types';\nimport getVisibleCellOfRow from '../utils/getVisibleCellOfRow';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\n\nexport default function insertRow(controller: Controller, tableRow: TableRow, type: string) {\n  const { value } = controller;\n  const { document } = value;\n  const table = document.getClosest(tableRow.key, isTable) as Table;\n  const tablePath = document.getPath(table.key)!;\n  const triggerRowIndex = getPositionOfRow(tableRow.key, table)!;\n  let targetRowIndex;\n  const colSize = tableRow.nodes.length;\n  if (type === 'insert-row-above') {\n    targetRowIndex = triggerRowIndex;\n  } else if (type === 'insert-row-below') {\n    targetRowIndex = triggerRowIndex + 1;\n  }\n\n  const newTableRow = createTableRow(colSize, tableRow);\n  controller.command(Commands.insertNodeByPath, tablePath, targetRowIndex, newTableRow);\n\n  traverseSingleRowCells(table, targetRowIndex, triggerRowIndex, (_targetRowIndex, colIndex, _, originalCell) => {\n    // 一种策略，originalCell是插入新行位置对应的原来的节点(可能不存在)\n    // 这个节点如果处在realNode所在行的后面的行(非同行)，那在这个位置上的新节点就会设置为hidden\n    // 同时比较colIndex以保证realNode的rowSpan只被拓充一次\n    if (originalCell && originalCell.data.hidden) {\n      const realNode = getRealNodeInTable(table, _targetRowIndex, colIndex);\n      if (!realNode) {\n        return;\n      }\n      const position = getPositionOfCell(realNode.key, table)!;\n      if (position.rowIndex !== _targetRowIndex) {\n        // TODO: 数据处理好再统一塞进去\n        const newCell = newTableRow.nodes[colIndex];\n        controller.command(Commands.setNodeByPath, [...tablePath, _targetRowIndex, colIndex], {\n          data: {\n            ...newCell.data,\n            hidden: true,\n          },\n        });\n      }\n      if (position.colIndex === colIndex) {\n        controller.command(Commands.setNodeByPath, [...tablePath, position.rowIndex, position.colIndex], {\n          data: {\n            ...realNode.data,\n            rowSpan: (realNode.data.rowSpan || 1) + 1,\n          },\n        });\n      }\n    }\n  });\n\n  const latestTable = controller.value.document.getNodeByPath(tablePath) as Table;\n\n  let focusCell = getVisibleCellOfRow(latestTable, targetRowIndex);\n  if (!focusCell) {\n    focusCell = getRealNodeInTable(latestTable, targetRowIndex, 0);\n  }\n  const s = controller.value.selection;\n  return controller\n    .command(Commands.select, setSelectionByTable(s, false))\n    .command(Commands.moveToStartOfNode, focusCell!);\n}\n"],"file":"insertRow.js"}