{"version":3,"sources":["../../../../src/bi/commands/resizeTableToAutofitWidth.ts"],"names":["Table","setTableColsWidth","calcResizeColsWidth","enableAutofitWidth","convertFromPercentToPixel","convertFromPixelToPercent","getTableMaxWidthByContainer","formatColWidth","resizeTableToAutofitWidth","controller","table","originTable","containerWidth","isAutofitWidth","colsWidth","data","Array","isArray","originTableWidth","reduce","acc","w","newTableWidth","ratio","newColsWidth","map","containerW","pixelTable","create","deltaPixelWidth","outputPixelColsWidth","tablePixelWidth","newTable","value","document","getNode","key"],"mappings":";AACA,OAAOA,KAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,kBAAP;AACA,SAASC,yBAAT,EAAoCC,yBAApC;AACA,OAAOC,2BAAP;AACA,OAAOC,cAAP;AAEA,eAAe,SAASC,yBAAT,CACbC,UADa,EAEbC,KAFa,EAGbC,WAHa,EAIbC,cAJa,EAKb;AACA,MAAI,CAACZ,KAAK,CAACa,cAAN,CAAqBH,KAArB,CAAL,EAAkC,OAAOD,UAAP;AADlC,MAGQK,SAHR,GAGsBJ,KAAK,CAACK,IAH5B,CAGQD,SAHR;AAKA,MAAI,CAACE,KAAK,CAACC,OAAN,CAAcH,SAAd,CAAL,EAA+B,OAAOL,UAAP;AAE/B,MAAMS,gBAAgB,GAAGP,WAAW,CAACI,IAAZ,CAAiBD,SAAjB,CAA4BK,MAA5B,CAAmC,UAACC,GAAD,EAAMC,CAAN;AAAA,WAAaD,GAAG,GAAGC,CAAnB;AAAA,GAAnC,CAAzB;AACA,MAAMC,aAAa,GAAGR,SAAS,CAACK,MAAV,CAAiB,UAACC,GAAD,EAAMC,CAAN;AAAA,WAAaD,GAAG,GAAGC,CAAnB;AAAA,GAAjB,CAAtB;AAEA,MAAME,KAAK,GAAGL,gBAAgB,GAAGI,aAAjC;AAEA,MAAIE,YAAY,GAAGV,SAAS,CAACW,GAAV,CAAc,UAACJ,CAAD,EAAO;AACtC,WAAOd,cAAc,CAACc,CAAC,GAAGE,KAAL,CAArB;AACD,GAFkB,CAAnB;;AAGA,MAAIA,KAAK,GAAG,CAAZ,EAAe;AACb,QAAMG,UAAU,GAAGd,cAAc,IAAIN,2BAA2B,CAACG,UAAD,EAAaC,KAAb,CAAhE;;AACA,QAAIgB,UAAJ,EAAgB;AACd,UAAMC,UAAU,GAAG3B,KAAK,CAAC4B,MAAN,cACdlB,KADc;AAEjBK,QAAAA,IAAI,eACCL,KAAK,CAACK,IADP;AAEFD,UAAAA,SAAS,EAAEV,yBAAyB,CAACM,KAAD,EAAQgB,UAAR;AAFlC;AAFa,SAAnB;AAOA,UAAMG,eAAe,GAAGH,UAAU,IAAIJ,aAAa,GAAGJ,gBAApB,CAAV,GAAkDA,gBAA1E;AACA,UAAMY,oBAAoB,GAAG5B,mBAAmB,CAACO,UAAD,EAAakB,UAAb,EAAyBE,eAAzB,EAA0CH,UAA1C,CAAhD;AACA,UAAMK,eAAe,GAAGD,oBAAoB,CAACX,MAArB,CAA4B,UAACC,GAAD,EAAMC,CAAN;AAAA,eAAaD,GAAG,GAAGC,CAAnB;AAAA,OAA5B,CAAxB;;AACA,UAAIU,eAAe,GAAGL,UAAtB,EAAkC;AAChCvB,QAAAA,kBAAkB,CAACM,UAAD,EAAaC,KAAb,EAAoB,KAApB,CAAlB;AACA,YAAMsB,QAAQ,GAAGvB,UAAU,CAACwB,KAAX,CAAiBC,QAAjB,CAA0BC,OAA1B,CAAkCzB,KAAK,CAAC0B,GAAxC,CAAjB;AACA,eAAOnC,iBAAiB,CAACQ,UAAD,EAAauB,QAAb,EAAuBF,oBAAvB,CAAxB;AACD;;AAEDN,MAAAA,YAAY,GAAGnB,yBAAyB,CAACyB,oBAAD,EAAuBJ,UAAvB,CAAxC;AACD;AACF;;AAED,SAAOzB,iBAAiB,CAACQ,UAAD,EAAaC,KAAb,EAAoBc,YAApB,CAAxB;AACD","sourcesContent":["import { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport setTableColsWidth from '../utils/setTableColsWidth';\nimport calcResizeColsWidth from '../utils/calcResizeColsWidth';\nimport enableAutofitWidth from '../../utils/commands/enableAutofitWidth';\nimport { convertFromPercentToPixel, convertFromPixelToPercent } from '../../utils/utils/colsWidthConverter';\nimport getTableMaxWidthByContainer from '../../utils/utils/getTableMaxWidthByContainer';\nimport formatColWidth from '../../utils/utils/formatColWidth';\n\nexport default function resizeTableToAutofitWidth(\n  controller: Controller,\n  table: Table,\n  originTable: Table,\n  containerWidth?: number,\n) {\n  if (!Table.isAutofitWidth(table)) return controller;\n\n  const { colsWidth } = table.data;\n\n  if (!Array.isArray(colsWidth)) return controller;\n\n  const originTableWidth = originTable.data.colsWidth!.reduce((acc, w) => (acc + w));\n  const newTableWidth = colsWidth.reduce((acc, w) => (acc + w));\n\n  const ratio = originTableWidth / newTableWidth;\n\n  let newColsWidth = colsWidth.map((w) => {\n    return formatColWidth(w * ratio);\n  });\n  if (ratio < 1) {\n    const containerW = containerWidth || getTableMaxWidthByContainer(controller, table);\n    if (containerW) {\n      const pixelTable = Table.create({\n        ...table,\n        data: {\n          ...table.data,\n          colsWidth: convertFromPercentToPixel(table, containerW),\n        },\n      });\n      const deltaPixelWidth = containerW * (newTableWidth - originTableWidth) / originTableWidth;\n      const outputPixelColsWidth = calcResizeColsWidth(controller, pixelTable, deltaPixelWidth, containerW);\n      const tablePixelWidth = outputPixelColsWidth.reduce((acc, w) => (acc + w));\n      if (tablePixelWidth > containerW) {\n        enableAutofitWidth(controller, table, false);\n        const newTable = controller.value.document.getNode(table.key)! as Table;\n        return setTableColsWidth(controller, newTable, outputPixelColsWidth);\n      }\n\n      newColsWidth = convertFromPixelToPercent(outputPixelColsWidth, containerW);\n    }\n  }\n\n  return setTableColsWidth(controller, table, newColsWidth);\n}\n"],"file":"resizeTableToAutofitWidth.js"}