{"version":3,"sources":["../../../../src/bi/commands/moveCols.ts"],"names":["Commands","getPositionOfCell","getRealNodeInTable","setTableColsWidth","setCellData","controller","cell","data","command","setNodeByKey","key","moveCols","table","originIndexRange","targetIndex","Array","isArray","colsWidth","nodes","start","end","direction","withoutNormalizing","tablePath","value","document","assertPath","forEach","tr","rowIndex","trPath","concat","offset","cellPath","index","moveNodeByPath","colIndex","colSpan","hidden","colIndexOfLastOfMergedCell","rightCellOfFirstRowOfMoveCols","rowSpan","realCell","position","deltaColSpan","Math","min","moveColsWidth","slice","moveColsLength","splice"],"mappings":"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","sourcesContent":["import { Controller, Commands } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport TableCell from '../../mo/models/tableCell';\nimport getPositionOfCell from '../utils/getPositionOfCell';\nimport getRealNodeInTable from '../utils/getRealNodeInTable';\nimport setTableColsWidth from '../utils/setTableColsWidth';\n\nconst setCellData = (\n  controller: Controller,\n  cell: TableCell,\n  data: TableCell['data'],\n) => {\n  return controller.command(\n    Commands.setNodeByKey,\n    cell.key,\n    {\n      data: {\n        ...cell.data,\n        ...data,\n      },\n    },\n  );\n};\n\nexport default function moveCols(\n  controller: Controller,\n  table: Table,\n  originIndexRange: {\n    start: number;\n    end: number;\n  },\n  targetIndex: number,\n) {\n  if (\n    !table ||\n    !Array.isArray(table.data?.colsWidth) ||\n    !table.nodes\n  ) {\n    return controller;\n  }\n  const { start, end } = originIndexRange;\n  const direction = end < targetIndex ? 'forward' : 'backward';\n  controller.withoutNormalizing(() => {\n    const tablePath = controller.value.document.assertPath(table.key);\n    table.nodes.forEach((tr, rowIndex) => {\n      if (!tr.nodes) {\n        return;\n      }\n      const trPath = tablePath.concat(rowIndex);\n      for (let offset = 0; start + offset <= end; offset++) {\n        const cellPath = trPath.concat(start + (direction === 'forward' ? 0 : offset));\n        const index = direction === 'forward' ? targetIndex - 1 : targetIndex + offset;\n        controller.command(\n          Commands.moveNodeByPath,\n          cellPath,\n          trPath,\n          index,\n        );\n      }\n      for (let colIndex = start; colIndex <= end; colIndex++) {\n        const cell = tr.nodes[colIndex];\n        if (!cell) {\n          return;\n        }\n        const { colSpan = 1, hidden } = cell.data;\n        if (!hidden && colSpan > 1) {\n          // 遇到合并单元格时，分为 2 种情况\n          // 1. 合并单元格完全在移动列内，不处理\n          // 2. 合并单元格被拆分为两部分，调整对应单元格 colSpan\n          const colIndexOfLastOfMergedCell = colIndex + cell.data.colSpan! - 1;\n          // 处理情况 2\n          if (colIndexOfLastOfMergedCell > end) {\n            // 更新合并单元格（realCell）colSpan\n            setCellData(\n              controller,\n              cell,\n              {\n                colSpan: end - colIndex + 1,\n              },\n            );\n            const rightCellOfFirstRowOfMoveCols = tr.nodes[end + 1];\n            setCellData(\n              controller,\n              rightCellOfFirstRowOfMoveCols,\n              {\n                colSpan: colIndexOfLastOfMergedCell - end,\n                rowSpan: cell.data.rowSpan!,\n                hidden: false,\n              },\n            );\n          }\n          colIndex += colSpan - 1;\n        } else if (hidden) {\n          // 遇到 hidden 单元格时，分为 2 种情况\n          // 1. 与合并单元格（realCell）不在同一行时，不处理\n          // 2. 合并单元格被拆分为 2 部分，调整对应单元格 colSpan\n          const realCell = getRealNodeInTable(table, rowIndex, colIndex);\n          if (!realCell) {\n            return;\n          }\n          const position = getPositionOfCell(realCell.key, table)!;\n          const colIndexOfLastOfMergedCell =\n            position.colIndex + realCell.data.colSpan! - 1;\n          // 情况 2\n          if (position.rowIndex === rowIndex) {\n            // 更新合并单元格右侧 hidden 单元格 colSpan\n            const deltaColSpan =\n              Math.min(colIndexOfLastOfMergedCell, end) - colIndex + 1;\n            setCellData(\n              controller,\n              cell,\n              {\n                colSpan: deltaColSpan,\n                rowSpan: realCell.data.rowSpan || 1,\n                hidden: false,\n              },\n            );\n            // 更新合并单元格 colSpan\n            setCellData(\n              controller,\n              realCell,\n              {\n                colSpan: realCell.data.colSpan! - deltaColSpan,\n              },\n            );\n          }\n          // 当前行后面的 hidden 单元格可以跳过\n          colIndex = colIndexOfLastOfMergedCell;\n        }\n      }\n    });\n    // 更新 colsWidth\n    const colsWidth = [...table.data.colsWidth!];\n    const moveColsWidth = colsWidth.slice(start, end + 1);\n    const moveColsLength = end - start + 1;\n    colsWidth.splice(start, moveColsLength);\n    const index = start < targetIndex ?\n      targetIndex - moveColsLength :\n      targetIndex;\n    colsWidth.splice(index, 0, ...moveColsWidth);\n    setTableColsWidth(controller, table, colsWidth);\n  });\n  return controller;\n}\n"],"file":"moveCols.js"}