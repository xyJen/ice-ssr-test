{"version":3,"sources":["../../../../src/bi/commands/mergeCells.ts"],"names":["Commands","Block","Text","getDataTableSelectionByTable","setSelectionByTable","isEmptyCell","cell","nodes","length","firstChild","type","firstGrandChild","isText","text","mergeCells","controller","table","value","document","selection","tableSelection","startRowIndex","startColIndex","endRowIndex","endColIndex","tablePath","getPath","key","firstCellPath","firstCell","getNodeByPath","command","setNodeByPath","data","rowSpan","colSpan","r","c","hidden","cellPath","childIndex","withoutNormalizing","moveNodeByPath","insertNodeByPath","create","s","moveToStartOfNode","select"],"mappings":";AAAA,SAAqBA,QAArB,EAA+BC,KAA/B,EAAsCC,IAAtC,QAA2D,oBAA3D;AAEA,OAAOC,4BAAP;AACA,OAAOC,mBAAP;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAAkC;AAChC,MAAIA,IAAI,CAACC,KAAL,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,WAAO,KAAP;AACD;;AAED,MAAMC,UAAU,GAAGH,IAAI,CAACC,KAAL,CAAW,CAAX,CAAnB;;AACA,MAAIE,UAAU,CAACC,IAAX,KAAoB,WAApB,IAAmCD,UAAU,CAACF,KAAX,CAAiBC,MAAjB,GAA0B,CAAjE,EAAoE;AAClE,WAAO,KAAP;AACD;;AAED,MAAMG,eAAe,GAAGF,UAAU,CAACF,KAAX,CAAiB,CAAjB,CAAxB;;AACA,MAAI,CAACL,IAAI,CAACU,MAAL,CAAYD,eAAZ,CAAL,EAAmC;AACjC,WAAO,KAAP;AACD;;AAED,SAAO,CAACA,eAAe,CAACE,IAAhB,CAAqBL,MAA7B;AACD;;AAED,eAAe,SAASM,UAAT,CAAoBC,UAApB,EAA4CC,KAA5C,EAA0D;AAAA,MAC/DC,KAD+D,GACrDF,UADqD,CAC/DE,KAD+D;AAAA,MAE/DC,QAF+D,GAEvCD,KAFuC,CAE/DC,QAF+D;AAAA,MAErDC,SAFqD,GAEvCF,KAFuC,CAErDE,SAFqD;AAGvE,MAAMC,cAAc,GAAGjB,4BAA4B,CAACY,UAAD,EAAaC,KAAb,CAAnD;;AACA,MAAI,CAACI,cAAD,IAAmB,CAACJ,KAAxB,EAA+B;AAC7B,WAAOD,UAAP;AACD;;AANsE,MASrEM,aATqE,GAUnED,cAVmE,CASrEC,aATqE;AAAA,MAStDC,aATsD,GAUnEF,cAVmE,CAStDE,aATsD;AAAA,MASvCC,WATuC,GAUnEH,cAVmE,CASvCG,WATuC;AAAA,MAS1BC,WAT0B,GAUnEJ,cAVmE,CAS1BI,WAT0B;AAYvE,MAAMC,SAAS,GAAGP,QAAQ,CAACQ,OAAT,CAAiBV,KAAK,CAACW,GAAvB,CAAlB;AACA,MAAMC,aAAa,aAAOH,SAAP,GAAkBJ,aAAlB,EAAiCC,aAAjC,EAAnB;AACA,MAAMO,SAAS,GAAGX,QAAQ,CAACY,aAAT,CAAuBF,aAAvB,CAAlB;AACAb,EAAAA,UAAU,CAACgB,OAAX,CAAmB/B,QAAQ,CAACgC,aAA5B,EAA2CJ,aAA3C,EAA0D;AACxDK,IAAAA,IAAI,eACCJ,SAAS,CAACI,IADX;AAEFC,MAAAA,OAAO,EAAEX,WAAW,GAAGF,aAAd,GAA8B,CAFrC;AAGFc,MAAAA,OAAO,EAAEX,WAAW,GAAGF,aAAd,GAA8B;AAHrC;AADoD,GAA1D;;AAQA,OAAK,IAAIc,CAAC,GAAGf,aAAb,EAA4Be,CAAC,IAAIb,WAAjC,EAA8Ca,CAAC,IAAI,CAAnD,EAAsD;AAAA,+BAC3CC,CAD2C;AAAA;;AAElD,UAAID,CAAC,KAAKf,aAAN,IAAuBgB,CAAC,KAAKf,aAAjC,EAAgD,kBAFE,CAGlD;;AACA,UAAMhB,IAAI,GAAGU,KAAK,CAACT,KAAN,CAAY6B,CAAZ,EAAe7B,KAAf,CAAqB8B,CAArB,CAAb;AACA,UAAI,CAAC/B,IAAL,EAAW;AACX,wBAAIA,IAAI,CAAC2B,IAAT,aAAI,WAAWK,MAAf,EAAuB;AAEvB,UAAMC,QAAQ,aAAOd,SAAP,GAAkBW,CAAlB,EAAqBC,CAArB,EAAd;AACAtB,MAAAA,UAAU,CAACgB,OAAX,CAAmB/B,QAAQ,CAACgC,aAA5B,EAA2CO,QAA3C,EAAqD;AACnDN,QAAAA,IAAI,eACC3B,IAAI,CAAC2B,IADN;AAEFC,UAAAA,OAAO,EAAE,CAFP;AAGFC,UAAAA,OAAO,EAAE,CAHP;AAIFG,UAAAA,MAAM,EAAE;AAJN;AAD+C,OAArD;AASA,UAAIjC,WAAW,CAACC,IAAD,CAAf,EAAuB;;AAEvB,WAAK,IAAIkC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGlC,IAAI,CAACC,KAAL,CAAWC,MAAjD,EAAyDgC,UAAU,IAAI,CAAvE,EAA0E;AACxEzB,QAAAA,UAAU,CAAC0B,kBAAX,CAA8B,YAAM;AAClC1B,UAAAA,UAAU,CAACgB,OAAX,CACE/B,QAAQ,CAAC0C,cADX,YAEMH,QAFN,GAEgB,CAFhB,IAGEX,aAHF,EAIE;AACAb,UAAAA,UAAU,CAACE,KAAX,CAAiBC,QAAjB,CAA0BY,aAA1B,CAAwCF,aAAxC,EAAuDrB,KAAvD,CAA6DC,MAL/D;AAOD,SARD;AASD;;AAEDO,MAAAA,UAAU,CAACgB,OAAX,CACE/B,QAAQ,CAAC2C,gBADX,EAEEJ,QAFF,EAGE,CAHF,EAIEtC,KAAK,CAAC2C,MAAN,CAAa;AACXlC,QAAAA,IAAI,EAAE,WADK;AAEXH,QAAAA,KAAK,EAAE,CAACL,IAAI,CAAC0C,MAAL,CAAY,EAAZ,CAAD;AAFI,OAAb,CAJF;AAhCkD;;AACpD,SAAK,IAAIP,CAAC,GAAGf,aAAb,EAA4Be,CAAC,IAAIb,WAAjC,EAA8Ca,CAAC,IAAI,CAAnD,EAAsD;AAAA,uBAA7CA,CAA6C;;AAAA,+BAiB7B;AAuBxB;AACF;;AAED,MAAMQ,CAAC,GAAG1B,SAAS,CAAC2B,iBAAV,CAA4BjB,SAA5B,EAAuCd,UAAvC,CAAV;AACA,SAAOA,UAAU,CAACgB,OAAX,CACL/B,QAAQ,CAAC+C,MADJ,EAEL3C,mBAAmB,CAACyC,CAAD,EAAI,KAAJ,CAFd,CAAP;AAID","sourcesContent":["import { Controller, Commands, Block, Text, Element } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport getDataTableSelectionByTable from '../utils/getDataTableSelectionByTable';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\n\nfunction isEmptyCell(cell: Block) {\n  if (cell.nodes.length > 1) {\n    return false;\n  }\n\n  const firstChild = cell.nodes[0] as Element;\n  if (firstChild.type !== 'paragraph' || firstChild.nodes.length > 1) {\n    return false;\n  }\n\n  const firstGrandChild = firstChild.nodes[0];\n  if (!Text.isText(firstGrandChild)) {\n    return false;\n  }\n\n  return !firstGrandChild.text.length;\n}\n\nexport default function mergeCells(controller: Controller, table: Table) {\n  const { value } = controller;\n  const { document, selection } = value;\n  const tableSelection = getDataTableSelectionByTable(controller, table);\n  if (!tableSelection || !table) {\n    return controller;\n  }\n\n  const {\n    startRowIndex, startColIndex, endRowIndex, endColIndex,\n  } = tableSelection;\n\n  const tablePath = document.getPath(table.key)!;\n  const firstCellPath = [...tablePath, startRowIndex, startColIndex];\n  const firstCell = document.getNodeByPath(firstCellPath) as Block;\n  controller.command(Commands.setNodeByPath, firstCellPath, {\n    data: {\n      ...firstCell.data,\n      rowSpan: endRowIndex - startRowIndex + 1,\n      colSpan: endColIndex - startColIndex + 1,\n    },\n  });\n\n  for (let r = startRowIndex; r <= endRowIndex; r += 1) {\n    for (let c = startColIndex; c <= endColIndex; c += 1) {\n      if (r === startRowIndex && c === startColIndex) continue;\n      // @ts-ignore\n      const cell = table.nodes[r].nodes[c] as Block;\n      if (!cell) continue;\n      if (cell.data?.hidden) continue;\n\n      const cellPath = [...tablePath, r, c];\n      controller.command(Commands.setNodeByPath, cellPath, {\n        data: {\n          ...cell.data,\n          rowSpan: 1,\n          colSpan: 1,\n          hidden: true,\n        },\n      });\n\n      if (isEmptyCell(cell)) continue;\n\n      for (let childIndex = 0; childIndex < cell.nodes.length; childIndex += 1) {\n        controller.withoutNormalizing(() => {\n          controller.command(\n            Commands.moveNodeByPath,\n            [...cellPath, 0],\n            firstCellPath,\n            // @ts-ignore\n            controller.value.document.getNodeByPath(firstCellPath).nodes.length,\n          );\n        });\n      }\n\n      controller.command(\n        Commands.insertNodeByPath,\n        cellPath,\n        0,\n        Block.create({\n          type: 'paragraph',\n          nodes: [Text.create('')],\n        }),\n      );\n    }\n  }\n\n  const s = selection.moveToStartOfNode(firstCell, controller);\n  return controller.command(\n    Commands.select,\n    setSelectionByTable(s, false),\n  );\n}\n"],"file":"mergeCells.js"}