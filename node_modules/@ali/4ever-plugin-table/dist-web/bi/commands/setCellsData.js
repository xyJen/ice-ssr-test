import _extends from "@babel/runtime/helpers/extends";

var _DEFAULT_CELL_DATA;

import { Commands } from '@ali/4ever-cangjie';
import { isEqualWithDefault } from '@ali/4ever-utils';
import { DEFAULT_TABLE_ALIGNMENT } from "../constants";
var CellDataKey;

(function (CellDataKey) {
  CellDataKey["fill"] = "fill";
  CellDataKey["vAlign"] = "vAlign";
})(CellDataKey || (CellDataKey = {}));

export var DEFAULT_CELL_DATA = (_DEFAULT_CELL_DATA = {}, _DEFAULT_CELL_DATA[CellDataKey.fill] = '', _DEFAULT_CELL_DATA[CellDataKey.vAlign] = DEFAULT_TABLE_ALIGNMENT, _DEFAULT_CELL_DATA);
export default function setCellsData(controller, table, selection, key, data) {
  var value = controller.value;
  var document = value.document;

  if (!selection) {
    return controller;
  }

  var startRowIndex = selection.startRowIndex,
      startColIndex = selection.startColIndex,
      endRowIndex = selection.endRowIndex,
      endColIndex = selection.endColIndex;
  var tablePath = document.getPath(table.key);

  for (var r = startRowIndex; r <= endRowIndex; r += 1) {
    for (var c = startColIndex; c <= endColIndex; c += 1) {
      var cellPath = [].concat(tablePath, [r, c]);
      var cell = document.getNodeByPath(cellPath);

      if (cell) {
        var _ref, _ref2;

        var oldData = cell.data[key] ? (_ref = {}, _ref[key] = cell.data[key], _ref) : {};
        var newData = data ? (_ref2 = {}, _ref2[key] = data, _ref2) : {};

        if (!isEqualWithDefault(oldData, newData, DEFAULT_CELL_DATA)) {
          var _extends2;

          controller.command(Commands.setNodeByPath, cellPath, {
            data: _extends({}, cell.data, (_extends2 = {}, _extends2[key] = data, _extends2))
          });
        }
      }
    }
  }

  return controller;
}
//# sourceMappingURL=setCellsData.js.map