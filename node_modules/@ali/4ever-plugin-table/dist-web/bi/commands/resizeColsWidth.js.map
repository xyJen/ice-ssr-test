{"version":3,"sources":["../../../../src/bi/commands/resizeColsWidth.ts"],"names":["Table","MIN_COL_WIDTH","isNumber","setTableColsWidth","enableAutofitWidth","convertFromPercentToPixel","convertFromPixelToPercent","getTableMaxWidthByContainer","resizeColsWidth","controller","payload","table","node","resizeColIndex","colIndex","delta","cw","containerWidth","cols","data","colsWidth","calcColWidth","d","result","query","limitWidth","width","Math","max","pixelColsWidth","totalColsWidth","isAutofit","isAutofitWidth","reduce","acc","curr","slice","originColWidth","realDelta","length","newTotalWidth","w","newTable","value","document","getNode","key","pctColsWidth"],"mappings":"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","sourcesContent":["import { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport { MIN_COL_WIDTH } from '../constants';\nimport isNumber from '../utils/isNumber';\nimport setTableColsWidth from '../utils/setTableColsWidth';\nimport enableAutofitWidth from '../../utils/commands/enableAutofitWidth';\nimport { convertFromPercentToPixel, convertFromPixelToPercent } from '../../utils/utils/colsWidthConverter';\nimport getTableMaxWidthByContainer from '../../utils/utils/getTableMaxWidthByContainer';\n\ninterface IParams {\n  node: Table;\n  colIndex: number;\n  delta: number;\n  containerWidth?: number;\n}\n\nexport default function resizeColsWidth(controller: Controller, payload: IParams) {\n  const {\n    node: table,\n    colIndex: resizeColIndex,\n    delta,\n    containerWidth: cw,\n  } = payload;\n\n  if (!isNumber(delta) || delta === 0) {\n    return controller;\n  }\n\n  const cols = table.data.colsWidth || [];\n\n  const calcColWidth = (colIndex: number, d: number) => {\n    let result = colsWidth[colIndex] + d;\n    if (d >= 0) {\n      return result;\n    }\n    const { width: limitWidth } = controller.query('calcMinTableColWidth', {\n      node: table,\n      colIndex,\n    }) || {};\n    // 当前列包含某些特殊子节点时，限制当前最小列宽\n    if (typeof limitWidth === 'number') {\n      result = Math.max(result, limitWidth);\n    }\n    return Math.max(result, MIN_COL_WIDTH);\n  };\n\n  let pixelColsWidth = cols;\n  let totalColsWidth = 0;\n  const isAutofit = Table.isAutofitWidth(table);\n  const containerWidth = cw || getTableMaxWidthByContainer(controller, table);\n  if (isAutofit) {\n    pixelColsWidth = convertFromPercentToPixel(table, containerWidth);\n  }\n  totalColsWidth = pixelColsWidth.reduce((acc, curr) => (acc + curr), 0);\n\n  const colsWidth = pixelColsWidth.slice();\n  const originColWidth = colsWidth[resizeColIndex];\n  colsWidth[resizeColIndex] = calcColWidth(resizeColIndex, delta);\n  // 真实的列宽变化\n  const realDelta = colsWidth[resizeColIndex] - originColWidth;\n\n  if (\n    (isAutofit || totalColsWidth <= containerWidth)\n    && resizeColIndex < colsWidth.length - 1\n  ) {\n    colsWidth[resizeColIndex + 1] = calcColWidth(resizeColIndex + 1, -realDelta);\n  }\n\n  if (isAutofit) {\n    const newTotalWidth = colsWidth.reduce((acc, w) => (acc + w), 0);\n    // 当调整后的表格列宽超出传入的 containerWidth 时，将关闭宽度自适应（目前只有移动端会传 containerWidth\n    if ((cw && newTotalWidth > cw) || resizeColIndex === colsWidth.length - 1) {\n      enableAutofitWidth(controller, table, false);\n      const newTable = controller.value.document.getNode(table.key)! as Table;\n      return setTableColsWidth(controller, newTable, colsWidth);\n    }\n    const pctColsWidth = convertFromPixelToPercent(colsWidth, containerWidth);\n    return setTableColsWidth(controller, table, pctColsWidth);\n  }\n  return setTableColsWidth(controller, table, colsWidth);\n}\n"],"file":"resizeColsWidth.js"}