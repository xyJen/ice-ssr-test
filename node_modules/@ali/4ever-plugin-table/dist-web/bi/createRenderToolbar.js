import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ItemKey, ItemSlot, SlotType } from '@ali/4ever-component';
import TablePickerButton from "./components/toolbarButtons/next/tablePickerButton";
import TableFillButton from "./components/toolbarButtons/next/tableFillButton";
import TableBorderButton from "./components/toolbarButtons/next/tableBorderSet";
import TableMergeButton from "./components/toolbarButtons/next/tableMergeButton";
import TableVAlignButton from "./components/toolbarButtons/next/tableVAlignButton";
import TableThemeButton from "./components/toolbarButtons/next/tableThemeButton";
import { isSelectionInTable } from "./utils";
var buttons = {
  'table.picker': TablePickerButton,
  'table.merge': TableMergeButton,
  'table.border': TableBorderButton,
  'table.vAlign': TableVAlignButton,
  'table.fill': TableFillButton,
  'table.theme': TableThemeButton
};

function enableButtons(key, isInColumns) {
  if (isInColumns) {
    switch (key) {
      case 'table.picker':
      case 'table.fill':
      case 'table.vAlign':
        return true;

      default:
        return false;
    }
  } else {
    switch (key) {
      case 'table.picker':
      case 'table.fill':
      case 'table.merge':
      case 'table.vAlign':
      case 'table.border':
      case 'table.theme':
        return true;

      default:
        return false;
    }
  }
}

export default function createRenderToolbar(config) {
  return function (props, controller) {
    var buttonName = props.buttonName,
        extraProps = props.extraProps;
    var value = controller.value;
    var isInColumns = controller.query('isSelectionInColumns');
    var isInTableOrColumns = isInColumns || isSelectionInTable(value);
    var Component = buttons[buttonName];

    if (Component) {
      // 处理 table.picker 以外，其他都需要在选中 table 时出现
      if (buttonName !== ItemKey['table.picker'] && !isInTableOrColumns) {
        return null;
      }

      if (!enableButtons(buttonName, isInColumns)) {
        return null;
      }

      return /*#__PURE__*/_createElement(ItemSlot, {
        display: SlotType.iconMenu
      }, /*#__PURE__*/_createElement(Component, _extends({
        controller: controller,
        locale: config.locale
      }, extraProps)));
    }

    return null;
  };
}
//# sourceMappingURL=createRenderToolbar.js.map