{"version":3,"sources":["../../../../src/bi/queries/isAllSelectedCellsComplete.ts"],"names":["getRealNodeInTable","getPositionOfCell","isAllSelectedCellsComplete","controller","table","node","tableSelection","_startRowIndex","startRowIndex","_endRowIndex","endRowIndex","_startColIndex","startColIndex","_endColIndex","endColIndex","data","colsWidth","MAX_ROWS_INDEX","nodes","length","MAX_COLS_INDEX","Math","min","i","cell","position","key","rowIndex","colIndex","rowSpan","colSpan"],"mappings":"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","sourcesContent":["import Table from '../../mo/models';\nimport getRealNodeInTable from '../utils/getRealNodeInTable';\nimport getPositionOfCell from '../utils/getPositionOfCell';\nimport { ITableSelection } from '../types';\n\n// 判断选择的单元格是否完整\n// NOTE：有合并单元格情况下，如果选区只覆盖了合并单元格的一部分，则认为不完整\nexport default function isAllSelectedCellsComplete(\n  controller,\n  { node: table, tableSelection }: { node: Table; tableSelection: Omit<ITableSelection, 'key'>},\n) {\n  if (!tableSelection || !table) {\n    return false;\n  }\n\n  const {\n    startRowIndex: _startRowIndex,\n    endRowIndex: _endRowIndex,\n    startColIndex: _startColIndex,\n    endColIndex: _endColIndex,\n  } = tableSelection;\n  if (!table.data.colsWidth) {\n    return false;\n  }\n\n  const MAX_ROWS_INDEX = table.nodes.length - 1;\n  const MAX_COLS_INDEX = table.data.colsWidth.length - 1;\n\n  const startRowIndex = _startRowIndex;\n  const startColIndex = _startColIndex;\n  const endRowIndex = Math.min(_endRowIndex, MAX_ROWS_INDEX);\n  const endColIndex = Math.min(_endColIndex, MAX_COLS_INDEX);\n\n  // 上边框\n  for (let i = startColIndex; i <= endColIndex; i++) {\n    const cell = getRealNodeInTable(table, startRowIndex, i);\n    if (!cell) {\n      return false;\n    }\n    const position = getPositionOfCell(cell.key, table);\n    if (!position) {\n      return false;\n    }\n    if (position.rowIndex !== startRowIndex) {\n      return false;\n    }\n  }\n  // 左边框\n  for (let i = startRowIndex; i <= endRowIndex; i++) {\n    const cell = getRealNodeInTable(table, i, startColIndex);\n    if (!cell) {\n      return false;\n    }\n    const position = getPositionOfCell(cell.key, table);\n    if (!position) {\n      return false;\n    }\n    if (position.colIndex !== startColIndex) {\n      return false;\n    }\n  }\n  // 下边框\n  for (let i = startColIndex; i <= endColIndex; i++) {\n    const cell = getRealNodeInTable(table, endRowIndex, i);\n    if (!cell) {\n      return false;\n    }\n    const position = getPositionOfCell(cell.key, table);\n    if (!position) {\n      return false;\n    }\n    if (endRowIndex !== position.rowIndex + (cell.data?.rowSpan || 1) - 1) {\n      return false;\n    }\n  }\n  // 右边框\n  for (let i = startRowIndex; i <= endRowIndex; i++) {\n    const cell = getRealNodeInTable(table, i, endColIndex);\n    if (!cell) {\n      return false;\n    }\n    const position = getPositionOfCell(cell.key, table);\n    if (!position) {\n      return false;\n    }\n    if (endColIndex !== position.colIndex + (cell.data?.colSpan || 1) - 1) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"file":"isAllSelectedCellsComplete.js"}