import Table from "../../mo/models";
import TableCell from "../../mo/models/tableCell";
import { adjustSelection, getPositionOfCell } from "../utils";
import isTableFromSameOrigin from "./isTableFromSameOrigin";
var TABLE_SELECTION_CACHE = new WeakMap();

function setCache(key, value) {
  TABLE_SELECTION_CACHE.set(key, value);
}

export default function tableSelection(controller) {
  var value = controller.value;

  if (TABLE_SELECTION_CACHE.has(value)) {
    return TABLE_SELECTION_CACHE.get(value);
  }

  var document = value.document,
      selection = value.selection;
  var anchor = selection.anchor,
      focus = selection.focus,
      data = selection.data;
  var isByTable = data.isByTable;
  var anchorCell = document.getClosest(anchor.key, TableCell.isTableCell);

  if (!anchorCell) {
    setCache(value, null);
    return null;
  }

  var anchorTable = document.getClosest(anchorCell.key, Table.isTable);
  var focusCell = document.getClosest(focus.key, TableCell.isTableCell);

  if (!focusCell || !isByTable && anchorCell.key === focusCell.key) {
    setCache(value, null);
    return null;
  }

  var focusTable = document.getClosest(focusCell.key, Table.isTable); // 处理从嵌套表格拖动到外层表格的情况

  if (!isTableFromSameOrigin(controller, {
    node: anchorTable,
    tableKey: focusTable.key
  })) {
    setCache(value, null);
    return null;
  }

  var startPosition = getPositionOfCell(anchorCell.key, anchorTable);
  var endPosition = getPositionOfCell(focusCell.key, anchorTable);

  if (!startPosition || !endPosition) {
    return null;
  }

  var minRowIndex = Math.min(startPosition.rowIndex, endPosition.rowIndex);
  var maxRowIndex = Math.max(startPosition.rowIndex, endPosition.rowIndex);
  var minColIndex = Math.min(startPosition.colIndex, endPosition.colIndex);
  var maxColIndex = Math.max(startPosition.colIndex, endPosition.colIndex);
  var result = {
    startRowIndex: minRowIndex,
    endRowIndex: maxRowIndex,
    startColIndex: minColIndex,
    endColIndex: maxColIndex,
    key: anchorTable.key
  };
  var tbSelection = isByTable !== true ? adjustSelection(focusTable, result) : result;
  TABLE_SELECTION_CACHE.set(value, tbSelection);
  return tbSelection;
}
//# sourceMappingURL=tableSelection.js.map