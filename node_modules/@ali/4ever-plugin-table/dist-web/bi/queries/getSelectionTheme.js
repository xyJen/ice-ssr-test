import getTable from "../utils/getTable";
import getTableSelection from "../utils/getTableSelection";
import { DEFAULT_BORDER_COLOR } from "../../utils/constants";

function getCellBorder(bdr) {
  var top = bdr.top,
      right = bdr.right,
      bottom = bdr.bottom,
      left = bdr.left;
  var lBdColor = left && left.sz > 0 ? left.color : '';
  var rBdColor = right && right.sz > 0 ? right.color : '';
  var tBdColor = top && top.sz > 0 ? top.color : '';
  var bBdColor = bottom && bottom.sz > 0 ? bottom.color : '';
  return lBdColor === rBdColor && tBdColor === bBdColor && lBdColor === tBdColor ? lBdColor : '';
}

function getCellsSameValue(controller, fn, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = undefined;
  }

  var value = controller.value;
  var table = getTable(value);
  var selection = getTableSelection(controller);
  var res = defaultValue;

  if (selection && table) {
    var startRowIndex = selection.startRowIndex,
        startColIndex = selection.startColIndex,
        endRowIndex = selection.endRowIndex,
        endColIndex = selection.endColIndex;
    var tablePath = value.document.getPath(table.key);

    if (tablePath) {
      for (var rowIndex = startRowIndex; rowIndex <= endRowIndex; rowIndex++) {
        for (var colIndex = startColIndex; colIndex <= endColIndex; colIndex++) {
          var isFirst = rowIndex === startRowIndex && colIndex === startColIndex;
          var cellPath = [].concat(tablePath, [rowIndex, colIndex]);
          var cell = cellPath && value.document.getNodeByPath(cellPath);

          if (cell) {
            var _payload = cell.data;

            if (_payload && !_payload.hidden) {
              if (isFirst) {
                res = fn(_payload);
              } else if (res !== fn(_payload)) {
                return defaultValue;
              }
            }
          }
        }
      }
    }
  }

  return res;
}

export function getSelectionTheme(controller) {
  var bgColor = getCellsSameValue(controller, function (payload) {
    return payload == null ? void 0 : payload.fill;
  });
  var bdColor = getCellsSameValue(controller, function (payload) {
    if (payload != null && payload.bdr) {
      return getCellBorder(payload.bdr);
    }

    return DEFAULT_BORDER_COLOR;
  }, DEFAULT_BORDER_COLOR);
  return {
    backgroundColor: bgColor,
    borderColor: bdColor
  };
}
//# sourceMappingURL=getSelectionTheme.js.map