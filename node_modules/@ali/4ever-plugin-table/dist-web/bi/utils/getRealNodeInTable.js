import { logNPEInfo } from "./logger";
export default function getRealNodeInTable(table, rowIndex, colIndex) {
  // @ts-ignore
  var row = table.nodes && table.nodes[rowIndex];

  if (!row) {
    return null;
  } // @ts-ignore


  var node = row.nodes && row.nodes[colIndex];

  if (!node) {
    return null;
  }

  if (node.data && node.data.hidden) {
    var maxRound = Math.max(rowIndex, colIndex);
    var found = false;

    for (var round = 1; round <= maxRound; round += 1) {
      var r = Math.max(rowIndex - round, 0);
      var c = Math.max(colIndex - round, 0);
      var rowToIterate = table.nodes[r];

      for (var i = c; i <= colIndex; i += 1) {
        // @ts-ignore
        var cellNode = rowToIterate.nodes[i];

        if (!cellNode) {
          logNPEInfo(table, {
            type: 'getRealNodeInTable',
            detail: "cellNode is " + cellNode,
            colIndex: i,
            rowIndex: r
          });
          return null;
        }

        var isCellHide = cellNode.data.hidden;
        var rowSpan = cellNode.data.rowSpan || 1;
        var colSpan = cellNode.data.colSpan || 1;

        if (!isCellHide && r + rowSpan - 1 >= rowIndex && i + colSpan - 1 >= colIndex) {
          node = cellNode;
          found = true;
          break;
        }
      }

      for (var _i = r; _i <= rowIndex; _i += 1) {
        // @ts-ignore
        var _cellNode = table.nodes[_i].nodes[c];
        var _isCellHide = _cellNode.data.hidden;

        var _rowSpan = _cellNode.data.rowSpan || 1;

        var _colSpan = _cellNode.data.colSpan || 1;

        if (!_isCellHide && _i + _rowSpan - 1 >= rowIndex && c + _colSpan - 1 >= colIndex) {
          node = _cellNode;
          found = true;
          break;
        }
      }

      if (found) {
        break;
      }
    }
  }

  return node;
}
//# sourceMappingURL=getRealNodeInTable.js.map