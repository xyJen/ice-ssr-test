import { Commands } from '@ali/4ever-cangjie';
import getRealNodeInTable from "./getRealNodeInTable";
import setSelectionByTable from "../../utils/utils/setSelectionByTable";
export function moveToStartOfPreviousSibling(controller, table) {
  var prevBlock = controller.value.document.getPreviousSibling(table.key);
  var selection = controller.value.selection;
  var s = selection.moveToStartOfNode(table, controller);

  if (prevBlock) {
    s = selection.moveToStartOfNode(prevBlock, controller);
  }

  return controller.command(Commands.select, setSelectionByTable(s, false));
}
export function moveToStartOfNextSibling(controller, table) {
  var nextBlock = controller.value.document.getNextSibling(table.key);
  var selection = controller.value.selection;
  var s = selection.moveToEndOfNode(table, controller);

  if (nextBlock) {
    s = selection.moveToStartOfNode(nextBlock, controller);
  }

  return controller.command(Commands.select, setSelectionByTable(s, false));
}
export function moveToBeforeOfTable(controller, table) {
  var selection = controller.value.selection;
  var s = selection.moveToStartOfNode(table, controller);
  return controller.command(Commands.select, setSelectionByTable(s, false));
}
export function moveToAfterOfTable(controller, table) {
  var selection = controller.value.selection;
  var s = selection.moveToEndOfNode(table, controller);
  return controller.command(Commands.select, setSelectionByTable(s, false));
}
export function moveToStartOfCell(controller, table, rowIndex, colIndex) {
  var maxRowIndex = table.nodes.length - 1;
  var rowI = Math.min(maxRowIndex, Math.max(0, rowIndex));
  var maxColIndex = table.nodes[rowI].nodes.length - 1;
  var colI = Math.min(maxColIndex, Math.max(0, colIndex));
  var cell = getRealNodeInTable(table, rowI, colI);
  if (!cell) return controller;
  var selection = controller.value.selection;
  var s = selection.moveToStartOfNode(cell, controller);
  return controller.command(Commands.select, setSelectionByTable(s, false));
}
//# sourceMappingURL=selectionCommands.js.map