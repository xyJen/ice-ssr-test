import getPositionOfCell from "./getPositionOfCell"; // mirrorCell可以是hiddenCell，可能合并单元格时没有实质效果，但解除合并时会有效果

export default function getMirrorCellOfSameBorder(currentCell, orientation, table) {
  var position = getPositionOfCell(currentCell.key, table);
  var colSpan = currentCell.data.colSpan && (currentCell.data.colSpan || 1);
  var rowSpan = currentCell.data.rowSpan && (currentCell.data.rowSpan || 1);
  var mirrorCell = null;

  if (!position) {
    return null;
  }

  var rowIndex = position.rowIndex,
      colIndex = position.colIndex;

  if (orientation === 'left') {
    if (colIndex <= 0) {
      return null;
    }

    var targetRow = table.nodes[rowIndex];
    if (!targetRow) return null; // @ts-ignore

    mirrorCell = targetRow.nodes[colIndex - 1]; // 注释留着，暂时不用这个方法，供以后参考
    // if (mirrorCell.data.hidden) {
    //   mirrorCell = getRealNodeInTable(table, rowIndex, colIndex - 1);
    // }
  } else if (orientation === 'right') {
    // @ts-ignore
    var colSize = table.nodes[0].nodes.length;

    if (colIndex + colSpan >= colSize) {
      return null;
    }

    var _targetRow = table.nodes[rowIndex];
    if (!_targetRow) return null; // @ts-ignore

    mirrorCell = _targetRow.nodes[colIndex + colSpan];
  } else if (orientation === 'top') {
    if (rowIndex <= 0) {
      return null;
    } // @ts-ignore


    mirrorCell = table.nodes[rowIndex - 1].nodes[colIndex]; // if (mirrorCell.data.hidden) {
    //   mirrorCell = getRealNodeInTable(table, rowIndex - 1, colIndex);
    // }
  } else if (orientation === 'bottom') {
    var rowSize = table.nodes.length;

    if (rowIndex + rowSpan >= rowSize) {
      return null;
    }

    var _targetRow2 = table.nodes[rowIndex + rowSpan];
    if (!_targetRow2) return null; // @ts-ignore

    mirrorCell = _targetRow2.nodes[colIndex];
  } // if (mirrorCell && mirrorCell.data.hidden) {
  //   return null;
  // }


  return mirrorCell;
}
//# sourceMappingURL=getMirrorCellOfSameBorder.js.map