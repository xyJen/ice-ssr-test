{"version":3,"sources":["../../../../src/bi/utils/calcResizeColsWidth.ts"],"names":["MIN_COL_WIDTH","resizeTable","calcResizeColsWidth","controller","table","delta","maxWidth","colsWidth","data","originalTotalWidth","reduce","acc","curr","expectTotalWidth","Math","min","Infinity","limitColWidths","map","_","i","query","node","colIndex","limitWidth","width","resultColsWidth"],"mappings":"AAEA,SAASA,aAAT;AACA,OAAOC,WAAP;AAEA,eAAe,SAASC,mBAAT,CACbC,UADa,EAEbC,KAFa,EAGbC,KAHa,EAIbC,QAJa,EAKb;AACA,MAAMC,SAAS,aAAQH,KAAK,CAACI,IAAN,CAAWD,SAAX,IAAwB,EAAhC,CAAf;AACA,MAAME,kBAAkB,GAAGF,SAAS,CAACG,MAAV,CAAiB,UAACC,GAAD,EAAMC,IAAN;AAAA,WAAgBD,GAAG,GAAGC,IAAtB;AAAA,GAAjB,EAA8C,CAA9C,CAA3B;AACA,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,GAAL,CACvBN,kBAAkB,GAAGJ,KADE,EAEvBC,QAAQ,IAAIU,QAFW,CAAzB;AAIA,MAAMC,cAAc,GAAGV,SAAS,CAACW,GAAV,CAAc,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC7C,QAAIf,KAAK,IAAI,CAAb,EAAgB;AACd,aAAOL,aAAP;AACD;;AAH4C,eAIfG,UAAU,CAACkB,KAAX,CAAiB,sBAAjB,EAAyC;AACrEC,MAAAA,IAAI,EAAElB,KAD+D;AAErEmB,MAAAA,QAAQ,EAAEH;AAF2D,KAAzC,KAGxB,EAPuC;AAAA,QAI9BI,UAJ8B,QAIrCC,KAJqC;;AAQ7C,WAAO,OAAOD,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8CxB,aAArD;AACD,GATsB,CAAvB;AAUA,MAAM0B,eAAe,GAAGzB,WAAW,CACjCM,SADiC,EAEjCM,gBAFiC,EAGjCI,cAHiC,CAAnC;AAKA,SAAOS,eAAP;AACD","sourcesContent":["import { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport { MIN_COL_WIDTH } from '../constants';\nimport resizeTable from '../utils/resizeTable';\n\nexport default function calcResizeColsWidth(\n  controller: Controller,\n  table: Table,\n  delta: number,\n  maxWidth?: number,\n) {\n  const colsWidth = [...(table.data.colsWidth || [])];\n  const originalTotalWidth = colsWidth.reduce((acc, curr) => (acc + curr), 0);\n  const expectTotalWidth = Math.min(\n    originalTotalWidth + delta,\n    maxWidth || Infinity,\n  );\n  const limitColWidths = colsWidth.map((_, i) => {\n    if (delta >= 0) {\n      return MIN_COL_WIDTH;\n    }\n    const { width: limitWidth } = controller.query('calcMinTableColWidth', {\n      node: table,\n      colIndex: i,\n    }) || {};\n    return typeof limitWidth === 'number' ? limitWidth : MIN_COL_WIDTH;\n  });\n  const resultColsWidth = resizeTable(\n    colsWidth,\n    expectTotalWidth,\n    limitColWidths,\n  );\n  return resultColsWidth;\n}\n"],"file":"calcResizeColsWidth.js"}