{"version":3,"sources":["../../../../src/bi/utils/handleCangjiePaste.ts"],"names":["v4","uuid","noop","Message","Commands","Table","TableRow","isSelectionInTableCell","getPositionOfCell","adjustSelection","isTable","isTableCell","insertRow","insertCol","splitCell","selectTableSelection","emptyTableSelection","MIN_COL_WIDTH","moveToStartOfCell","utils","normalizeFragment","filterValidData","setSelectionByTable","messageKey","slice","handleCangjiePaste","controller","payload","next","value","nativeFragment","fragment","tableConfig","locale","tables","filterDescendants","i","length","table","isColumnHeader","isRowHeader","setTableHeaderStyle","document","startBlock","selection","tableSelection","query","nodes","anchor","focus","anchorTable","getClosest","key","focusTable","isExpanded","node","tableKey","hasTableInFragment","hasTable","isRealTable","insertedFragment","removeTable","messageUnablePasteTable","t","getNode","run","startRowIndex","startColIndex","endRowIndex","endColIndex","tablePath","getPath","withoutNormalizing","rowIndex","row","colIndex","cell","cellPath","newCell","getNodeByPath","s","newS","moveAnchorToStartOfNode","moveFocusToEndOfNode","command","select","insertFragment","type","excludeColumns","splitBlock","moveBackward","path","adjustColsWidth","getAdjustTableColsWidth","newFragment","setNode","data","colsWidth","targetTable","targetTablePath","startCell","clipboardTable","adjustClipboardTableWithSelection","position","Math","min","area","undefined","targetRowIndex","targetRowPath","targetRow","targetColIndex","targetCell","lastColIndex","colWidth","targetCellPath","childIndex","c","removeNodeByPath","insertNodeByPath","setNodeByPath","rangeSelection","pasteTipCannotPasteTableHere","info","n","sr","findDescendant","drops","result","forEach","removeNode","width","height","create","map","Array","isArray","isAutofitWidth","cw","max"],"mappings":"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","sourcesContent":["import { v4 as uuid } from 'uuid';\nimport { noop } from 'lodash-es';\nimport { Message } from '@ali/we-design-next';\nimport { Document, Node, Block, Commands, Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport TableRow from '../../mo/models/tableRow';\nimport TableCell from '../../mo/models/tableCell';\nimport isSelectionInTableCell from '../utils/isSelectionInTableCell';\nimport getPositionOfCell from '../utils/getPositionOfCell';\nimport adjustSelection from '../utils/adjustSelection';\nimport { isTable, isTableCell, TableConfig } from '../types';\nimport insertRow from '../commands/insertRow';\nimport insertCol from '../commands/insertCol';\nimport splitCell from '../commands/splitCell';\nimport selectTableSelection from '../commands/selectTableSelection';\nimport { emptyTableSelection } from '../actions';\nimport { MIN_COL_WIDTH } from '../constants';\nimport { moveToStartOfCell } from '../utils/selectionCommands';\nimport utils from '../../utils/utils';\nimport { normalizeFragment } from '@ali/4ever-plugin-clipboard';\n\nconst { filterValidData, setSelectionByTable } = utils;\nconst messageKey = uuid().slice(0, 8);\n\ninterface Payload {\n  fragment: Document;\n  tableConfig?: TableConfig;\n}\n\nexport function handleCangjiePaste(controller: Controller, payload: Payload, next = noop) {\n  // 处理含有表头行/列的表格\n  const { value } = controller;\n  const { fragment: nativeFragment, tableConfig } = payload;\n\n  if (!nativeFragment) return next();\n\n  const fragment = normalizeFragment(nativeFragment);\n  const { locale = {} } = tableConfig || {};\n  const tables = fragment.filterDescendants(Table.isTable);\n  for (let i = 0; i < tables.length; i++) {\n    const table = tables[i];\n    if (\n      Table.isColumnHeader(table as Table) ||\n      Table.isRowHeader(table as Table)\n    ) {\n      // NOTE: 需要先执行 setTableHeaderStyle\n      const { setTableHeaderStyle } = tableConfig || {};\n      setTableHeaderStyle?.();\n      break;\n    }\n  }\n\n  const { document, startBlock, selection } = value;\n  const tableSelection = controller.query('tableSelection');\n  if (!fragment.nodes.length) {\n    return next();\n  }\n  const { anchor, focus } = selection;\n  const anchorTable = document.getClosest(anchor.key, Table.isTable);\n  const focusTable = document.getClosest(focus.key, Table.isTable);\n  // 无表格选区且 anchor、focus 不在同一个表格内时，禁止粘贴\n  if (!tableSelection && selection.isExpanded) {\n    if (\n      anchorTable &&\n      focusTable &&\n      !controller.query('isTableFromSameOrigin', {\n        node: anchorTable,\n        tableKey: focusTable.key,\n      })\n    ) {\n      return controller;\n    }\n  }\n  const hasTableInFragment = hasTable(fragment);\n  if (\n    (fragment.nodes.length === 1 && !isRealTable(fragment.nodes[0])) ||\n    fragment.nodes.length > 1\n  ) {\n    const insertedFragment = hasTableInFragment\n      ? removeTable(fragment)\n      : fragment;\n    /**\n     * 存在表格选区时，下列情况将单元格替换为 fragment\n     * 1. 粘贴板里只有一个节点，且节点不是表格\n     * 2. 粘贴板里有多个节点（fragment 需要过滤表格）\n     */\n    if (tableSelection) {\n      if (hasTableInFragment) {\n        messageUnablePasteTable(locale);\n      }\n      const t = document.getNode(tableSelection.key) as Table;\n      controller.run('onAction', emptyTableSelection(t));\n      const { startRowIndex, startColIndex, endRowIndex, endColIndex } =\n        tableSelection;\n\n      const tablePath = document.getPath(t.key);\n      controller.withoutNormalizing(() => {\n        for (\n          let rowIndex = startRowIndex;\n          rowIndex <= endRowIndex;\n          rowIndex += 1\n        ) {\n          const row = t.nodes[rowIndex];\n          if (!row) continue;\n\n          for (\n            let colIndex = startColIndex;\n            colIndex <= endColIndex;\n            colIndex += 1\n          ) {\n            const cell = row.nodes[colIndex];\n            if (!cell) continue;\n            const cellPath = [...tablePath!, rowIndex, colIndex];\n            const newCell = controller.value.document.getNodeByPath(\n              cellPath,\n            ) as TableCell;\n            const s = controller.value.selection;\n            const newS = s\n              .moveAnchorToStartOfNode(newCell, controller)\n              .moveFocusToEndOfNode(newCell, controller);\n            controller\n              .command(Commands.select, newS)\n              .command(Commands.insertFragment, insertedFragment);\n          }\n        }\n        selectTableSelection(controller, t, tableSelection);\n      });\n      return controller;\n    } else if (anchorTable && focusTable && hasTableInFragment) {\n      messageUnablePasteTable(locale);\n      return controller.command(Commands.insertFragment, insertedFragment);\n    }\n  }\n\n  if (fragment.nodes.length > 1 || fragment.nodes[0].type !== 'table') {\n    return next();\n  }\n\n  if (\n    !tableSelection &&\n    !isSelectionInTableCell(value, { excludeColumns: true })\n  ) {\n    controller.command(Commands.splitBlock).command(Commands.moveBackward, 1);\n\n    const t = fragment.nodes[0];\n    const path = fragment.getPath(t.key)!;\n    const adjustColsWidth = getAdjustTableColsWidth(t as Table);\n    const newFragment = fragment.setNode(path, {\n      data: filterValidData({\n        ...(t.data || {}),\n        colsWidth: adjustColsWidth,\n      }),\n    });\n    return controller.command('insertFragmentByClipboard', newFragment);\n  }\n\n  let targetTable: Table = tableSelection\n    ? (document.getNode(tableSelection.key) as Table)\n    : (document.getClosest(startBlock!.key, isTable) as Table);\n\n  if (!targetTable) {\n    return;\n  }\n\n  // 以下处理复制单个表格至表格内场景\n  const targetTablePath = document.getPath(targetTable.key);\n  if (!targetTablePath) return;\n  const startCell = tableSelection\n    ? document.getNodeByPath([\n      ...targetTablePath!,\n      tableSelection.startRowIndex,\n      tableSelection.startColIndex,\n    ])\n    : document.getClosest(startBlock!.key!, isTableCell);\n\n  let clipboardTable = fragment.nodes[0];\n  if (tableSelection) {\n    clipboardTable = adjustClipboardTableWithSelection(\n      clipboardTable,\n      tableSelection,\n    );\n  }\n\n  const position = getPositionOfCell(startCell!.key!, targetTable)!;\n\n  // 粘贴时被波及的区域解除合并单元格，否则粘贴时结构可能被破坏\n  const startRowIndex = position.rowIndex;\n  const startColIndex = position.colIndex;\n  const endRowIndex = Math.min(\n    position.rowIndex + clipboardTable.nodes.length - 1,\n    targetTable.nodes.length - 1,\n  );\n  // @ts-ignore\n  const endColIndex = Math.min(\n    position.colIndex + (clipboardTable.nodes[0] as Block).nodes.length - 1,\n    (targetTable.nodes[0] as Block).nodes.length - 1,\n  );\n  const area = adjustSelection(targetTable, {\n    startRowIndex,\n    startColIndex,\n    endRowIndex,\n    endColIndex,\n  });\n  splitCell(controller, targetTable, area || undefined);\n  targetTable = controller.value.document.getNodeByPath(\n    targetTablePath,\n  ) as Table;\n\n  for (\n    let rowIndex = 0;\n    rowIndex < clipboardTable.nodes.length;\n    rowIndex += 1\n  ) {\n    const targetRowIndex = position.rowIndex + rowIndex;\n    const targetRowPath = [...targetTablePath!, targetRowIndex];\n    let targetRow = controller.value.document.getNodeByPath(\n      targetRowPath,\n    ) as Block;\n    if (!targetRow) {\n      insertRow(\n        controller,\n        targetTable.nodes[targetRowIndex - 1] as TableRow,\n        'insert-row-below',\n      );\n      // update target\n      targetTable = controller.value.document.getNodeByPath(\n        targetTablePath,\n      ) as Table;\n      targetRow = controller.value.document.getNodeByPath(\n        targetRowPath,\n      ) as Block;\n    }\n\n    const row = clipboardTable.nodes[rowIndex] as Block;\n    for (let colIndex = 0; colIndex < row.nodes.length; colIndex += 1) {\n      const targetColIndex = position.colIndex + colIndex;\n      let targetCell = targetRow.nodes[targetColIndex] as Block;\n      if (!targetCell) {\n        // @ts-ignore\n        // eslint-disable-next-line no-shadow\n        const lastColIndex = targetTable.nodes[0].nodes.length - 1;\n        const colWidth = (targetTable.data.colsWidth || [])[lastColIndex];\n        insertCol(\n          controller,\n          targetTable,\n          targetColIndex,\n          targetColIndex,\n          colWidth,\n        );\n        // update targets\n        targetTable = controller.value.document.getNodeByPath(\n          targetTablePath,\n        ) as Table;\n        targetRow = controller.value.document.getNodeByPath(\n          targetRowPath,\n        ) as TableRow;\n        // @ts-ignore\n        targetCell = targetRow.nodes[targetColIndex];\n      }\n      const targetCellPath = [\n        ...targetTablePath,\n        targetRowIndex,\n        targetColIndex,\n      ];\n      for (\n        let childIndex = targetCell.nodes.length - 1;\n        childIndex >= 0;\n        childIndex -= 1\n      ) {\n        controller.withoutNormalizing((c) => {\n          c.command(Commands.removeNodeByPath, [...targetCellPath, childIndex]);\n        });\n      }\n\n      const cell = row.nodes[colIndex] as Block;\n      for (\n        let childIndex = cell.nodes.length - 1;\n        childIndex >= 0;\n        childIndex -= 1\n      ) {\n        controller.command(\n          Commands.insertNodeByPath,\n          targetCellPath,\n          0,\n          cell.nodes[childIndex],\n        );\n      }\n\n      controller.command(Commands.setNodeByPath, targetCellPath, {\n        data: cell.data,\n      });\n    }\n  }\n\n  // 恢復選區\n  if (tableSelection) {\n    selectTableSelection(controller, targetTable, tableSelection);\n    let rangeSelection = controller.value.selection;\n    rangeSelection = setSelectionByTable(rangeSelection, false);\n    controller.command(Commands.select, rangeSelection);\n  } else if (position) {\n    targetTable = controller.value.document.getNodeByPath(\n      targetTablePath,\n    ) as Table;\n    const { rowIndex, colIndex } = position;\n    moveToStartOfCell(controller, targetTable, rowIndex, colIndex);\n  }\n\n  return controller;\n}\n\n\nfunction messageUnablePasteTable(locale?: Record<string, string>) {\n  locale?.pasteTipCannotPasteTableHere\n    && Message.info(locale?.pasteTipCannotPasteTableHere, {\n      key: messageKey,\n    });\n}\n\nfunction isRealTable(n: Node) {\n  return Table.isTable(n) && !n.data.sr;\n}\n\nfunction hasTable(fragment: Document) {\n  return !!fragment.findDescendant(isRealTable);\n}\n\nfunction removeTable(fragment: Document) {\n  const drops = fragment.filterDescendants(isRealTable);\n  let result = fragment;\n  drops.forEach((n) => {\n    const path = result.getPath(n.key);\n    if (path) {\n      result = result.removeNode(path);\n    }\n  });\n  return result;\n}\n\nfunction adjustClipboardTableWithSelection(clipboardTable: Block, selection): Block {\n  const {\n    startRowIndex, startColIndex, endRowIndex, endColIndex,\n  } = selection;\n  const width = endColIndex - startColIndex + 1;\n  const height = endRowIndex - startRowIndex + 1;\n  return Table.create({\n    data: clipboardTable.data,\n    nodes: clipboardTable.nodes.slice(0, height).map((row) => TableRow.create({\n      data: (row as Block).data,\n      // @ts-ignore\n      nodes: (row as Block).nodes.slice(0, width),\n    })),\n  });\n}\n\nfunction getAdjustTableColsWidth(table: Table): number[] {\n  const data = table.data || {};\n  let { colsWidth } = data;\n  if (!Array.isArray(colsWidth)) {\n    colsWidth = [];\n  }\n  // 自适应表格不做矫正\n  if (Table.isAutofitWidth(table)) return colsWidth;\n\n  return colsWidth.map((cw) => Math.max(cw, MIN_COL_WIDTH));\n}\n"],"file":"handleCangjiePaste.js"}