import { domUtils } from '@ali/4ever-cangjie';
import Table from "../../mo/models";
import TableRow from "../../mo/models/tableRow";
import { getBoundingRelativeRect } from '@ali/4ever-utils';

// TODO: memorize
// 提取计算表格选区的方法，供极简工具栏使用
var calcTableSelectionPos = function calcTableSelectionPos(params) {
  var tblSelection = params.tblSelection,
      table = params.table,
      colsWidthParams = params.colsWidth,
      tableNode = params.tableNode,
      _params$scale = params.scale,
      scale = _params$scale === void 0 ? 1 : _params$scale,
      absPostion = params.absPostion;

  if (!tblSelection || !tableNode) {
    return undefined;
  }

  var startRowIndex = tblSelection.startRowIndex,
      startColIndex = tblSelection.startColIndex,
      endRowIndex = tblSelection.endRowIndex,
      endColIndex = tblSelection.endColIndex;
  var startRow = table.nodes[startRowIndex];
  var endRow = table.nodes[endRowIndex];

  if (!TableRow.isTableRow(startRow) || !TableRow.isTableRow(endRow)) {
    return undefined;
  }

  var colsWidth = colsWidthParams;

  if (!colsWidth) {
    var dataColsWidth = table.data.colsWidth;
    if (!Array.isArray(dataColsWidth)) return undefined;
    colsWidth = dataColsWidth;

    if (Table.isAutofitWidth(table)) {
      var tableWidth = tableNode.getBoundingClientRect().width;
      var totalColsWidth = dataColsWidth.reduce(function (acc, w) {
        return acc + w;
      });
      colsWidth = dataColsWidth.map(function (w) {
        return w / totalColsWidth * tableWidth / scale;
      });
    }
  }

  var left = colsWidth.slice(0, startColIndex).reduce(function (acc, c) {
    return acc + c;
  }, 0);
  var right = colsWidth.slice(0, endColIndex + 1).reduce(function (acc, c) {
    return acc + c;
  }, 0);
  var width = Math.max(0, right - left);
  var firstRow = table.nodes[0];
  var startCell = startRow.nodes[startColIndex];
  var endCell = endRow.nodes[endColIndex];

  if (!startCell || !endCell) {
    return undefined;
  }

  var relativeParent = tableNode.parentElement;
  if (!relativeParent) return undefined;
  var firstRowDOM = relativeParent.querySelector("[data-cangjie-key=\"" + firstRow.key + "\"]");
  var startRowNode = relativeParent.querySelector("[data-cangjie-key=\"" + startRow.key + "\"]");
  var endRowNode = relativeParent.querySelector("[data-cangjie-key=\"" + endRow.key + "\"]");

  if (!startRowNode || !endRowNode || !firstRowDOM) {
    return undefined;
  }

  var startCellRect = getBoundingRelativeRect(startRowNode, relativeParent);
  var endCellRect = getBoundingRelativeRect(endRowNode, relativeParent);
  var firstCellRect = getBoundingRelativeRect(firstRowDOM, relativeParent);
  var top = startCellRect.top;
  var bottom = Math.max(startCellRect.bottom, endCellRect.bottom);
  var height = (bottom - top) / scale;
  var topDelta = 0;
  var isSticky = false; // 纠正 top 值（在高版本 chrome 中可能会有 0.5px 的偏移，在此消除偏移）

  if (firstCellRect.top !== 0) {
    // 若首行单元格的相对表格的 top 比较大，说明首行处于 sticky 状态
    isSticky = firstCellRect.top > 1 || firstCellRect.top < -1;

    if (!isSticky) {
      topDelta = firstCellRect.top;
    } else if (startRowIndex !== 0) {
      var lastRow = table.nodes[table.nodes.length - 1];
      var lastRowDOM = domUtils.findDOMNodeSafely(lastRow.key, relativeParent);

      if (lastRowDOM) {
        var tableBottom = relativeParent.getBoundingClientRect().bottom;
        var lastRowBottom = lastRowDOM.getBoundingClientRect().bottom;
        var relativeBottom = tableBottom - lastRowBottom;

        if (relativeBottom < 1 && relativeBottom > -1) {
          topDelta = relativeBottom;
        }
      }
    }
  }

  var isSelectWholeCol = startRowIndex === 0 && endRowIndex === table.nodes.length - 1;
  var isSelectFirstRow = startRowIndex === 0 && endRowIndex === 0; // sticky 状态下选中整列时，高度不要 +1，否则会出现纵向滚动条

  var heightDelta = isSticky && (isSelectWholeCol || isSelectFirstRow) ? 0 : 1;
  top = (top - topDelta) / scale; // 计算绝对位置（默认计算相对 table 位置）

  if (absPostion) {
    var parentRect = relativeParent.getBoundingClientRect();
    top += parentRect.top / scale;
    left += parentRect.left / scale;
  }

  return {
    top: top,
    left: left,
    width: width + 1,
    height: height + heightDelta
  };
};

export default calcTableSelectionPos;
//# sourceMappingURL=calcTableSelectionPos.js.map