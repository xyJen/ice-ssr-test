{"version":3,"sources":["../../../../src/bi/utils/generateClipTableFromTableSelection.ts"],"names":["Block","Document","Table","cloneDeep","generateClipTableFromTableSelection","table","tableSelection","startRowIndex","startColIndex","endRowIndex","endColIndex","tableJs","toJSON","tableData","data","colsWidth","splice","isColumnHeader","nodes","forEach","row","klass","clipTable","fromJSON","fragment","create"],"mappings":";AAAA,SAASA,KAAT,EAA2BC,QAA3B,QAAiE,oBAAjE;AACA,OAAOC,KAAP;AACA,SAASC,SAAT,QAA0B,WAA1B;;AAGA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,mCAAT,CAA6CC,KAA7C,EAA2DC,cAA3D,EAA4F;AAAA,MAEvGC,aAFuG,GAGrGD,cAHqG,CAEvGC,aAFuG;AAAA,MAExFC,aAFwF,GAGrGF,cAHqG,CAExFE,aAFwF;AAAA,MAEzEC,WAFyE,GAGrGH,cAHqG,CAEzEG,WAFyE;AAAA,MAE5DC,WAF4D,GAGrGJ,cAHqG,CAE5DI,WAF4D;AAKzG,MAAMC,OAAO,GAAGR,SAAS,CAACE,KAAK,CAACO,MAAN,EAAD,CAAzB;AACA,MAAMC,SAAS,GAAGF,OAAO,CAACG,IAA1B;;AAEA,MAAID,SAAJ,EAAe;AACbA,IAAAA,SAAS,CAACE,SAAV,GAAsB,CAACF,SAAS,CAACE,SAAV,IAAuB,EAAxB,EAA4BC,MAA5B,CAAmCR,aAAnC,EAAkDE,WAAW,GAAGF,aAAd,GAA8B,CAAhF,CAAtB;;AACA,QAAIN,KAAK,CAACe,cAAN,CAAqBZ,KAArB,KAA+BG,aAAa,KAAK,CAArD,EAAwD;AACtD,aAAOK,SAAS,CAACI,cAAjB;AACD;AACF;;AAED,MAAIN,OAAO,CAACO,KAAZ,EAAmB;AACjBP,IAAAA,OAAO,CAACO,KAAR,GAAgBP,OAAO,CAACO,KAAR,CAAcF,MAAd,CAAqBT,aAArB,EAAoCE,WAAW,GAAGF,aAAd,GAA8B,CAAlE,CAAhB;AACAI,IAAAA,OAAO,CAACO,KAAR,CAAcC,OAAd,CAAsB,UAACC,GAAD,EAA4C;AAChE,UAAIA,GAAG,CAACC,KAAJ,KAAc,MAAd,IAAwBD,GAAG,CAACF,KAAhC,EAAuC;AACrC;AACAE,QAAAA,GAAG,CAACF,KAAJ,GAAYE,GAAG,CAACF,KAAJ,CAAUF,MAAV,CAAiBR,aAAjB,EAAgCE,WAAW,GAAGF,aAAd,GAA8B,CAA9D,CAAZ;AACD;AACF,KALD;AAMD;;AAED,MAAMc,SAAS,GAAGtB,KAAK,CAACuB,QAAN,cACbZ,OADa;AAEhBG,IAAAA,IAAI,EAAED;AAFU,KAAlB;AAIA,MAAMW,QAAQ,GAAGvB,QAAQ,CAACwB,MAAT,CAAgB;AAC/BP,IAAAA,KAAK,EAAE,CAACI,SAAD;AADwB,GAAhB,CAAjB;AAGA,SAAOE,QAAP;AACD","sourcesContent":["import { Block, BlockJSON, Document, InlineJSON, TextJSON } from '@ali/4ever-cangjie';\nimport Table, { TableData } from '../../mo/models';\nimport { cloneDeep } from 'lodash-es';\nimport { ITableSelection } from '../types';\n\n/**\n * 从一个 table 中剪切一个区域\n * @param table\n * @param tableSelection\n */\nexport default function generateClipTableFromTableSelection(table: Table, tableSelection: ITableSelection) {\n  const {\n    startRowIndex, startColIndex, endRowIndex, endColIndex,\n  } = tableSelection;\n\n  const tableJs = cloneDeep(table.toJSON()) as BlockJSON<TableData>;\n  const tableData = tableJs.data;\n\n  if (tableData) {\n    tableData.colsWidth = (tableData.colsWidth || []).splice(startColIndex, endColIndex - startColIndex + 1);\n    if (Table.isColumnHeader(table) && startColIndex !== 0) {\n      delete tableData.isColumnHeader;\n    }\n  }\n\n  if (tableJs.nodes) {\n    tableJs.nodes = tableJs.nodes.splice(startRowIndex, endRowIndex - startRowIndex + 1);\n    tableJs.nodes.forEach((row: BlockJSON | InlineJSON | TextJSON) => {\n      if (row.klass !== 'text' && row.nodes) {\n        // eslint-disable-next-line no-param-reassign\n        row.nodes = row.nodes.splice(startColIndex, endColIndex - startColIndex + 1);\n      }\n    });\n  }\n\n  const clipTable = Block.fromJSON({\n    ...tableJs,\n    data: tableData,\n  });\n  const fragment = Document.create({\n    nodes: [clipTable],\n  });\n  return fragment;\n}\n"],"file":"generateClipTableFromTableSelection.js"}