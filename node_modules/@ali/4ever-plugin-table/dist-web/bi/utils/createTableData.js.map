{"version":3,"sources":["../../../../src/bi/utils/createTableData.ts"],"names":["getClosestContainerBlock","getInnerFullWidth","MIN_COL_WIDTH","DEFAULT_PCT_WIDTH","createColsWidth","colSize","containerWidth","colsWidth","colWidth","Math","max","floor","i","push","createAutofitColsWidth","Number","toFixed","Array","fill","createTableData","controller","defaultAutofit","tableData","tblW","w","type","width","containerBlock","value","document"],"mappings":"AAAA,SAASA,wBAAT,EAAmCC,iBAAnC,QAA4D,kBAA5D;AAEA,SAASC,aAAT;AAEA,SAASC,iBAAT;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAA0CC,cAA1C,EAAkE;AAChE,MAAMC,SAAmB,GAAG,EAA5B;AACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CACfR,aADe,EAEfO,IAAI,CAACE,KAAL,CAAWL,cAAc,GAAGD,OAA5B,CAFe,CAAjB;;AAIA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,OAApB,EAA6BO,CAAC,IAAI,CAAlC,EAAqC;AACnCL,IAAAA,SAAS,CAACM,IAAV,CAAeL,QAAf;AACD;;AACD,SAAOD,SAAP;AACD;;AAED,SAASO,sBAAT,CAAgCT,OAAhC,EAAiD;AAC/C,MAAMG,QAAQ,GAAGO,MAAM,CAAC,CAACZ,iBAAiB,GAAGE,OAArB,EAA8BW,OAA9B,CAAsC,CAAtC,CAAD,CAAvB;AACA,MAAMT,SAAS,GAAGU,KAAK,CAACZ,OAAD,CAAL,CAAea,IAAf,CAAoBV,QAApB,CAAlB;AACAD,EAAAA,SAAS,CAACF,OAAO,GAAG,CAAX,CAAT,GAAyBF,iBAAiB,GAAGK,QAAQ,IAAIH,OAAO,GAAG,CAAd,CAArD;AACA,SAAOE,SAAP;AACD;;AAQD,eAAe,SAASY,eAAT,CACbC,UADa,QAGb;AAAA,MADEf,OACF,QADEA,OACF;AAAA,MADWC,cACX,QADWA,cACX;AAAA,MAD2Be,cAC3B,QAD2BA,cAC3B;AACA,MAAMC,SAAwB,GAAG,EAAjC;;AACA,MAAID,cAAJ,EAAoB;AAClBC,IAAAA,SAAS,CAACf,SAAV,GAAsBO,sBAAsB,CAACT,OAAD,CAA5C;AACAiB,IAAAA,SAAS,CAACC,IAAV,GAAiB;AACfC,MAAAA,CAAC,EAAErB,iBADY;AAEfsB,MAAAA,IAAI,EAAE;AAFS,KAAjB;AAID,GAND,MAMO;AACL,QAAIC,KAAK,GAAGpB,cAAZ;;AACA,QAAI,CAACA,cAAL,EAAqB;AACnB,UAAMqB,cAAc,GAAG3B,wBAAwB,CAACoB,UAAU,CAACQ,KAAZ,CAA/C;AADmB,UAEXC,QAFW,GAEET,UAAU,CAACQ,KAFb,CAEXC,QAFW;AAGnBH,MAAAA,KAAK,GAAGzB,iBAAiB,CAAC0B,cAAD,EAAiBE,QAAjB,CAAjB,IAA+C,CAAvD;AACD;;AAEDP,IAAAA,SAAS,CAACf,SAAV,GAAsBH,eAAe,CAACC,OAAD,EAAUqB,KAAK,GAAG,CAAlB,CAArC;AACD;;AAED,SAAOJ,SAAP;AACD","sourcesContent":["import { getClosestContainerBlock, getInnerFullWidth } from '@ali/4ever-utils';\nimport Table from '../../mo/models';\nimport { MIN_COL_WIDTH } from '../constants';\nimport type { Controller } from '@ali/4ever-cangjie';\nimport { DEFAULT_PCT_WIDTH } from '../../utils/constants';\n\nfunction createColsWidth(colSize: number, containerWidth: number) {\n  const colsWidth: number[] = [];\n  const colWidth = Math.max(\n    MIN_COL_WIDTH,\n    Math.floor(containerWidth / colSize),\n  );\n  for (let i = 0; i < colSize; i += 1) {\n    colsWidth.push(colWidth);\n  }\n  return colsWidth;\n}\n\nfunction createAutofitColsWidth(colSize: number) {\n  const colWidth = Number((DEFAULT_PCT_WIDTH / colSize).toFixed(1));\n  const colsWidth = Array(colSize).fill(colWidth);\n  colsWidth[colSize - 1] = DEFAULT_PCT_WIDTH - colWidth * (colSize - 1);\n  return colsWidth;\n}\n\ninterface CreateTableDataParams {\n  colSize: number;\n  containerWidth?: number;\n  defaultAutofit?: boolean;\n}\n\nexport default function createTableData(\n  controller: Controller,\n  { colSize, containerWidth, defaultAutofit }: CreateTableDataParams\n) {\n  const tableData: Table['data'] = {};\n  if (defaultAutofit) {\n    tableData.colsWidth = createAutofitColsWidth(colSize);\n    tableData.tblW = {\n      w: DEFAULT_PCT_WIDTH,\n      type: 'pct',\n    };\n  } else {\n    let width = containerWidth as number;\n    if (!containerWidth) {\n      const containerBlock = getClosestContainerBlock(controller.value)!;\n      const { document } = controller.value;\n      width = getInnerFullWidth(containerBlock, document) || 0;\n    }\n\n    tableData.colsWidth = createColsWidth(colSize, width - 2);\n  }\n\n  return tableData;\n}"],"file":"createTableData.js"}