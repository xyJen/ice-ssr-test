import { isTable, isTableCell } from "./types";
import { mergeTableCells, splitTableCell, insertTableRowBySelections, insertTableCol, deleteTableCols, deleteTableRows, deleteTable } from "./actions";
import createTableSelectionForFocusedCell from "./utils/createTableSelectionForFocusedCell";
import { isKeyInCell } from "./queries/canInsertTable";
import getDataTableSelectionByTable from "./utils/getDataTableSelectionByTable";
import Table from "../mo/models";

function isCutAllowed(controller) {
  var _controller$value = controller.value,
      document = _controller$value.document,
      selection = _controller$value.selection;
  var isExpanded = selection.isExpanded,
      anchor = selection.anchor,
      focus = selection.focus; // 选区中全部是单元格, 允许剪切

  var hasTableSelection = controller.query('hasTableSelection');
  if (hasTableSelection) return true;
  var isAnchorInCell = isKeyInCell(document, anchor.key);
  var isFocusInCell = isKeyInCell(document, focus.key);

  if (isAnchorInCell || isFocusInCell) {
    var anchorCell = document.getClosest(anchor.key, isTableCell);
    var focusCell = document.getClosest(focus.key, isTableCell); // 选中同一个单元格内的内容时， 允许剪切

    return isExpanded && (anchorCell == null ? void 0 : anchorCell.key) === (focusCell == null ? void 0 : focusCell.key);
  }

  return true;
}

function isCopyAllowed(controller) {
  return controller.query('hasTableSelection');
}

export default function createContextMenu() {
  return function contextMenuPlugin(pluginConfig) {
    var _pluginConfig$locale = pluginConfig.locale,
        locale = _pluginConfig$locale === void 0 ? {} : _pluginConfig$locale;
    return function contextMenu(controller, next) {
      var menus = [];
      var value = controller.value;
      var document = value.document,
          focusBlock = value.focusBlock;
      var table = (focusBlock == null ? void 0 : focusBlock.key) && ((focusBlock == null ? void 0 : focusBlock.type) === 'table' ? focusBlock : document.getClosest(focusBlock.key, isTable));

      if (table && !table.data.sr) {
        var _table$data;

        var queryTbSelection = getDataTableSelectionByTable(controller, table);
        var isSelectionSupportMerge = controller.query('isSelectionSupportMerge', {
          visible: true,
          node: table
        });
        var isSelectionSupportSplit = controller.query('isSelectionSupportSplit', {
          visible: true,
          node: table
        });
        var selection = queryTbSelection || createTableSelectionForFocusedCell(value, table);

        if (selection && (_table$data = table.data) != null && _table$data.colsWidth) {
          var endColIndex = selection ? selection.endColIndex : table.nodes[0].nodes.length - 1;
          var targetColIndex = endColIndex + 1;
          var rightColWidth = table.data.colsWidth[endColIndex];
          var leftColWidth = table.data.colsWidth[selection.startColIndex];
          var disableInsertRowAbove = selection.startRowIndex === 0 && Table.isRowHeader(table);
          var disableInsertColLeft = selection.startColIndex === 0 && Table.isColumnHeader(table);
          menus.push({
            name: locale.contextMenuMerge,
            action: mergeTableCells(table),
            key: 'merge-cells',
            options: {
              disable: !isSelectionSupportMerge,
              group: 3,
              mobile: false
            }
          }, {
            name: locale.contextMenuSplit,
            action: splitTableCell(table),
            key: 'split-cell',
            options: {
              disable: !isSelectionSupportSplit,
              group: 3,
              mobile: false
            }
          }, {
            name: locale.contextMenuInsertAbove,
            action: insertTableRowBySelections(table, 'insert-row-above'),
            key: 'insert-row-above',
            options: {
              disable: disableInsertRowAbove,
              group: 4,
              mobile: false
            }
          }, {
            name: locale.contextMenuInsertBelow,
            action: insertTableRowBySelections(table, 'insert-row-below'),
            key: 'insert-row-below',
            options: {
              group: 4,
              mobile: false
            }
          }, {
            name: locale.contextMenuInsertLeft,
            action: insertTableCol(table, selection.startColIndex, selection.startColIndex, leftColWidth),
            key: 'insert-col-left',
            options: {
              disable: disableInsertColLeft,
              group: 4,
              mobile: false
            }
          }, {
            name: locale.contextMenuInsertRight,
            action: insertTableCol(table, targetColIndex, endColIndex, rightColWidth),
            key: 'insert-col-right',
            options: {
              group: 4,
              mobile: false
            }
          }, {
            name: locale.contextMenuDeleteRow,
            action: deleteTableRows(table),
            key: 'delete-rows',
            options: {
              group: 5,
              mobile: false
            }
          }, {
            name: locale.contextMenuDeleteCol,
            action: deleteTableCols(table),
            key: 'delete-cols',
            options: {
              group: 5,
              mobile: false
            }
          }, {
            name: locale.contextMenuDeleteTable,
            action: deleteTable(table),
            key: 'delete-table',
            options: {
              group: 5,
              mobile: false
            }
          });
        }
      }

      var others = next() || [];
      others = others.map(function (contextMenuItem) {
        // 选区中包含表格的部分单元格时, 不允许剪切
        if (contextMenuItem.key === 'cut' && !isCutAllowed(controller) && contextMenuItem.options) {
          contextMenuItem.options.disable = true;
        } // 有表格选区时允许复制


        if (contextMenuItem.key === 'copy' && isCopyAllowed(controller) && contextMenuItem.options) {
          contextMenuItem.options.disable = false;
        }

        return contextMenuItem;
      });
      return menus.concat(others);
    };
  };
}
//# sourceMappingURL=createContextMenu.js.map