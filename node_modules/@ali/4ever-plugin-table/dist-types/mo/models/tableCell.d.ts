import { Block, BlockChildren } from '@ali/4ever-cangjie';
import type { MoInterfaces } from '@ali/4ever-cangjie';
interface TableCellData {
    readonly width?: number;
    readonly colSpan?: number;
    readonly rowSpan?: number;
    bdr?: MoInterfaces.TableBorder.default;
    fill?: string;
    readonly color?: string;
    readonly border?: string;
    readonly vAlign?: string;
    readonly hidden?: boolean;
    uuid?: string;
    cellMar?: Record<string, any>;
    shd?: {
        fill?: string;
    };
}
declare type TableCellChildren = Block[];
interface TableCellProperties<D = TableCellData, N extends BlockChildren = TableCellChildren> {
    data?: D;
    nodes?: N;
}
export default class TableCell extends Block<TableCellData, TableCellChildren> {
    static TYPE: string;
    static create<SD = TableCellData, SN extends BlockChildren = TableCellChildren>(properties: TableCell | TableCellProperties<SD, SN> | string): Block<SD, SN>;
    static isTableCell(maybeTableCell: any): maybeTableCell is TableCell;
    static isValidTableCell(maybeTableCell: any): maybeTableCell is TableCell;
}
export {};
