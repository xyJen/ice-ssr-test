import { Block, BlockChildren } from '@ali/4ever-cangjie';
import type { MoInterfaces } from '@ali/4ever-cangjie';
import TableCell from './tableCell';
import TableRow from './tableRow';
export interface TableData {
    colsWidth?: number[];
    readonly sr?: boolean;
    readonly width?: number;
    readonly jc?: 'start' | 'left' | 'center' | 'end' | 'right';
    readonly bdr?: MoInterfaces.TableBorder.default;
    readonly tblpPr?: MoInterfaces.TblpPr.TblpPr;
    readonly percentOfScrollLeft?: number;
    tblW?: MoInterfaces.TblW.TblW;
    isColumnHeader?: boolean;
    styleId?: string;
    tblLook?: {
        firstColumn?: 0 | 1 | boolean;
        firstRow?: 0 | 1 | boolean;
        lastColumn?: 0 | 1 | boolean;
        lastRow?: 0 | 1 | boolean;
        noHBand?: 0 | 1 | boolean;
        noVBand?: 0 | 1 | boolean;
    };
}
declare type TableChildren = TableRow[];
interface TableProperties<D = TableData, N extends BlockChildren = TableChildren> {
    data?: D;
    nodes?: N;
}
export default class Table extends Block<TableData, TableChildren> {
    static TYPE: string;
    static TableRow: typeof TableRow;
    static TableCell: typeof TableCell;
    static create<SD = TableData, SN extends BlockChildren = TableChildren>(properties: Table | TableProperties<SD, SN> | string): Block<SD, SN>;
    static isTable(maybeTable: any): maybeTable is Table;
    static isAutofitWidth(table: Table): boolean;
    static isRowHeader(table: Table): boolean;
    static isColumnHeader(table: Table): boolean;
    static isValidTable(maybeTable: any): maybeTable is Table;
}
export {};
