import getPositionOfCell from './getPositionOfCell';
import isTable from './isTable';
import HorizontalScroll from './horizontalScroll';
import { convertFromPercentToPixel, convertFromPixelToPercent } from './colsWidthConverter';
import getTableMaxWidthByContainer from './getTableMaxWidthByContainer';
import filterValidData from './filterValidData';
import formatColWidth from './formatColWidth';
import getTableCellWidth from './getTableCellWidth';
import getTableIsSelected from './getTableIsSelected';
import setSelectionByTable from './setSelectionByTable';
import transformTablesToCompatibleLegacy from './transformTablesToCompatibleLegacy';
declare const _default: {
    getPositionOfCell: typeof getPositionOfCell;
    isTable: typeof isTable;
    HorizontalScroll: typeof HorizontalScroll;
    convertFromPercentToPixel: typeof convertFromPercentToPixel;
    convertFromPixelToPercent: typeof convertFromPixelToPercent;
    getTableMaxWidthByContainer: typeof getTableMaxWidthByContainer;
    filterValidData: typeof filterValidData;
    formatColWidth: typeof formatColWidth;
    getTableCellWidth: typeof getTableCellWidth;
    getTableIsSelected: typeof getTableIsSelected;
    useResizeObserver: (target: Window | HTMLElement | null, callback: (rect: DOMRect) => void) => void;
    selectionTrigger: {
        get: () => string | undefined;
        set: (trigger?: string | undefined) => void;
    };
    setSelectionByTable: typeof setSelectionByTable;
    transformTablesToCompatibleLegacy: typeof transformTablesToCompatibleLegacy;
    visibleUtil: import("./visibleUtil").VisibleUtil;
};
export default _default;
