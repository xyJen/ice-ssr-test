/**
 * 滚动条显示模式：
 *  - always：强制常驻
 *  - default：默认只在需要的时候展示
 */
declare enum ScrollMode {
    always = "always",
    default = "default"
}
export default class Scroller {
    /**
     * 表格滚动容器
     */
    readonly targetTableWrapperEl: HTMLDivElement;
    /**
     * 滚动条宽度是否占满，占满则不显示滚动条
     */
    private fullwidth;
    /**
     * 滚动条显示模式：默认只在需要的时候展示
     */
    readonly mode: ScrollMode;
    /**
     * 需要添加的滚动条dom
     */
    readonly scrollBar: HTMLDivElement;
    /**
     * 需要添加的滚动条杆dom
     */
    readonly bar: HTMLDivElement;
    /**
     * 需要添加的滚动条滑块dom
     */
    readonly thumb: HTMLDivElement;
    /**
     * 滚动时检查是否需要隐藏或者展示滚动条
     */
    readonly checkIfScrollVisible: () => void;
    readonly handleTableWrapperScroll: () => void;
    /**
     * 销毁用于同步点击滚动条移动表格的事件监听器
     */
    readonly syncDestoryHandler: () => void;
    /**
     * 监听目标表格dom变化的observer
     */
    readonly tableElObserver: MutationObserver;
    /**
     * 滚动条挂载容器
     */
    readonly mountDom: HTMLElement | Window | null;
    /**
     * @param targetTableWrapperEl 表格滚动容器
     * @param getBottom 获取滚动条到页面底部的距离
     * @param mountDom 滚动条挂载容器
     * @param mode 滚动条显示模式：默认只在需要的时候展示
     */
    readonly getBottom: undefined | (() => number);
    /** 是否需要重新设置bottom */
    private needResetBottom;
    /** 当前bottom */
    private currentBottom;
    constructor(targetTableWrapperEl: HTMLDivElement, getBottom?: undefined | (() => number), mountDom?: HTMLElement | Window | null, mode?: ScrollMode);
    /**
     * 自动设置Bar
     * @param {boolean} changeScrollerVisible 是否开启自动设置滚动条显示与否
     */
    resetBar(changeScrollerVisible?: boolean): void;
    resetThumbPosition(): void;
    resetScroller(): void;
    get moveX(): number;
    /**
     * 让scroller的拖动行为和table的同步
     */
    initScrollSyncHandler(): () => void;
    /**
     * 显示整体
     */
    showScroller(): void;
    /**
     * 隐藏整体
     */
    hideScroller(): void;
    /**
    * 添加事件监听
    */
    addEventListener(): void;
    /**
     * 移除事件监听
     */
    removeEventListener(): void;
    /**
     * 销毁实例：
     * - 取消observer监听
     * - 监听器注销
     * - 滚动条dom移除
     */
    destroy(): void;
}
export {};
