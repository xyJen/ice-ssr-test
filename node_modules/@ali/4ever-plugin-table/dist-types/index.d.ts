/// <reference types="react" />
import * as OldBambooPlugin from './utils/bamboo';
import { moFactory } from './mo/index';
import { zhiFactory, mobileZhiFactory } from './zhi';
import { biFactory, mobileBiFactory } from './bi';
import './bi/types';
import './zhi/types';
import './utils/types';
import { ConvertToPluginActionCreators, ConvertToPluginActionPredicates, ConvertToPluginCommands } from '@ali/4ever-cangjie';
import { isActions as biIsActions, actions as biActions } from './bi/actions';
import { isActions as zhiIsActions, actions as zhiActions } from './zhi/actions';
import * as commands from './bi/commands';
export type { ITableSelection } from './bi/types';
export { actions as biActions, actionTypes as biActionTypes } from './bi/actions';
export type { TableConfig as BiConfig } from './bi/types';
export type { TableConfig as ZhiConfig } from './zhi/types';
export { moFactory, biFactory, zhiFactory, mobileBiFactory, mobileZhiFactory };
export { default as Table } from './mo/models';
export { default as TableCell } from './mo/models/tableCell';
export { default as TableRow } from './mo/models/tableRow';
export { default as createSerializationPlugin } from './mo/serializer/index';
export { createServerSerializationPlugin } from './mo/serializer/index';
export type { TableData } from './mo/models';
export type { RowsHeight, UpdateRowHeight } from './utils/types';
export { useContainerWidthResize } from './components/ContainerWidthResizeContext';
export { useRowIsSticky, RowIsStickyContext } from './utils/hooks/useRowIsSticky';
export { isPureTableNode, isTableNode } from './utils/utils/isTableNode';
export { default as getTableCellWidth } from './utils/utils/getTableCellWidth';
export { default as setSelectionByTable } from './utils/utils/setSelectionByTable';
export { default as getTable } from './bi/utils/getTable';
export { default as getTableSelection } from './bi/utils/getTableSelection';
export { default as createEmptyParagraph } from './bi/utils/createEmptyParagraph';
export { default as createEmptyTableCell } from './bi/utils/createEmptyTableCell';
export { default as isSelectionInTableCell } from './bi/utils/isSelectionInTableCell';
export { default as setTableColsWidth } from './bi/utils/setTableColsWidth';
export { handleCangjiePaste } from './bi/utils/handleCangjiePaste';
export { default as onCangjieInput } from './bi/handlers/onCangjieInput';
export declare const zhiTableCell: import("react").FC<import("./components/tableCell").TableCellProps>;
export declare const zhiTableRow: import("react").FC<import("./components/tableRow").TableRowProps>;
export { default as zhiTable } from './zhi/components/table';
export { default as biTable } from './bi/components/table';
export { default as biTableRow } from './bi/components/tableRow';
export { default as biTableCell } from './bi/components/tableCell';
export * from './utils/utils/colsWidthConverter';
export { getAllTables } from './common/queries/getSelectionContainers';
export { lineMap, DEFAULT_TABLE_BORDER_STYLE, DEFAULT_BORDER_COLOR, MIN_COL_WIDTH } from './utils/constants';
export { 
/** @deprecated 只为 bamboo 兼容。标准是按需 export */
OldBambooPlugin, };
export { TD, } from './components/styled';
declare module '@ali/4ever-cangjie' {
    /** type combination for commands、queries、actions */
    interface PluginCommands extends ConvertToPluginCommands<typeof commands> {
    }
    interface PluginActionCreators extends ConvertToPluginActionCreators<typeof biActions>, ConvertToPluginActionCreators<typeof zhiActions> {
    }
    interface PluginActionPredicates extends ConvertToPluginActionPredicates<typeof biIsActions>, ConvertToPluginActionPredicates<typeof zhiIsActions> {
    }
}
