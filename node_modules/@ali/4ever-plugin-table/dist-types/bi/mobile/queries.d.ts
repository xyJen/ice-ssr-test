import canInsertTable from '../queries/canInsertTable';
import { isSelectionInTable } from '../queries/isSelectionInTable';
import { isSelectionInTableCell } from '../queries/isSelectionInTableCell';
import calcMinTableColWidth from '../../common/queries/calcMinTableColWidth';
import getSelectionContainers from '../../common/queries/getSelectionContainers';
import isNodeInTable from '../../common/queries/isNodeInTable';
import { isTableNode } from '../../common/queries/isTableNode';
import tableSelection from '../queries/tableSelection';
import getSelectionFromTableSelection from '../queries/getSelectionFromTableSelection';
import viewTableSelections from '../queries/viewTableSelections';
import isTableFromSameOrigin from '../queries/isTableFromSameOrigin';
import isSelectWholeTable from '../queries/isSelectWholeTable';
declare const queries: {
    calcMinTableColWidth: typeof calcMinTableColWidth;
    canInsertTable: typeof canInsertTable;
    isSelectionInTable: typeof isSelectionInTable;
    isSelectionInTableCell: typeof isSelectionInTableCell;
    getSelectionContainers: typeof getSelectionContainers;
    isNodeInTable: typeof isNodeInTable;
    isTableNode: typeof isTableNode;
    tableSelection: typeof tableSelection;
    viewTableSelections: typeof viewTableSelections;
    getSelectionFromTableSelection: typeof getSelectionFromTableSelection;
    isHideSelection: import("@ali/4ever-cangjie").isHideSelectionQuery;
    isTableFromSameOrigin: typeof isTableFromSameOrigin;
    isSelectWholeTable: typeof isSelectWholeTable;
};
export default queries;
