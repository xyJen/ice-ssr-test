{"version":3,"sources":["../../../../src/zhi/handlers/createRenderNode.tsx"],"names":["createRenderNode","config","isMobile","MoTable","TYPE","props","node","isValidTable","MoTableRow","MoTableCell","TableWithWrapper","p","attributes","visible","otherProps"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;uBAR4B,a;;AAWrB,MAAMA,gBAAkC,GAAG,CAACC,MAAD,EAAsBC,QAAtB,KAA6C;AAC7F,SAAO;AACL,KAACC,gBAAQC,IAAT,GAAiBC,KAAD,IAAW;AACzB,YAAM;AAAEC,QAAAA;AAAF,UAAWD,KAAjB;;AACA,UAAI,CAACF,gBAAQI,YAAR,CAAqBD,IAArB,CAAL,EAAiC;AAC/B,4BAAO,oCAAP;AACD;;AAED,0BAAO,eAAC,gBAAD;AAAkB,QAAA,MAAM,EAAEL,MAA1B;AAAkC,QAAA,KAAK,EAAEI,KAAzC;AAAqF,QAAA,QAAQ,EAAEH;AAA/F,QAAP;AACD,KARI;AASL,KAACM,kBAAWJ,IAAZ,GAAoBC,KAAD,IAAW;AAC5B,0BAAO,eAAC,kBAAD,EAAeA,KAAf,CAAP;AACD,KAXI;AAYL,KAACI,mBAAYL,IAAb,GAAqBC,KAAD,IAAW;AAC7B,0BAAO,eAAC,mBAAD,EAAgBA,KAAhB,CAAP;AACD;AAdI,GAAP;AAgBD,CAjBM;;;;AAyBP,SAASK,gBAAT,CAA0BC,CAA1B,EAAoD;AAClD,QAAM;AAAEV,IAAAA,MAAF;AAAUI,IAAAA,KAAV;AAAiBH,IAAAA,QAAQ,GAAG;AAA5B,MAAsCS,CAA5C;AACA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA0BR,KAAhC;AAEA,QAAMS,UAAU,GAAG,kBAAKT,KAAL,EAAwC,YAAxC,CAAnB;AAEA,sBACE,eAAC,qBAAD,6BACMO,UADN;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,iBAAU,OAHZ;AAIE,IAAA,QAAQ,EAAEX;AAJZ,mBAME,eAAC,cAAD,6BACMY,UADN;AAEE,IAAA,QAAQ,EAAEZ,QAFZ;AAGE,IAAA,MAAM,EAAED;AAHV,KANF,CADF;AAcD","sourcesContent":["import * as React from 'react';\nimport { omit } from 'lodash-es';\nimport { RenderNodeProps, Block } from '@ali/4ever-cangjie';\nimport MoTable from '../../mo/models';\nimport MoTableRow from '../../mo/models/tableRow';\nimport MoTableCell from '../../mo/models/tableCell';\nimport Table from '../components/table';\nimport TableRow from '../../components/tableRow';\nimport TableCell from '../../components/tableCell';\nimport TableWrapper from '../components/tableWrapper';\nimport { CreateRenderNode, TableConfig } from '../types';\n\nexport const createRenderNode: CreateRenderNode = (config: TableConfig, isMobile?: boolean) => {\n  return {\n    [MoTable.TYPE]: (props) => {\n      const { node } = props;\n      if (!MoTable.isValidTable(node)) {\n        return <></>;\n      }\n\n      return <TableWithWrapper config={config} props={props as unknown as RenderNodeProps<Block>} isMobile={isMobile} />;\n    },\n    [MoTableRow.TYPE]: (props) => {\n      return <TableRow {...(props as unknown as RenderNodeProps<Block>)} />;\n    },\n    [MoTableCell.TYPE]: (props) => {\n      return <TableCell {...(props as unknown as RenderNodeProps<MoTableCell>)} />;\n    },\n  };\n};\n\ninterface TableWithWrapperProps {\n  config: TableConfig;\n  props: RenderNodeProps<Block>;\n  isMobile?: boolean;\n}\n\nfunction TableWithWrapper(p: TableWithWrapperProps) {\n  const { config, props, isMobile = false } = p;\n  const { attributes, visible } = props;\n\n  const otherProps = omit(props as RenderNodeProps<MoTable>, 'attributes');\n\n  return (\n    <TableWrapper\n      {...attributes}\n      visible={visible}\n      data-type=\"table\"\n      isMobile={isMobile}\n    >\n      <Table\n        {...otherProps}\n        isMobile={isMobile}\n        config={config}\n      />\n    </TableWrapper>\n  );\n}\n"],"file":"createRenderNode.js"}