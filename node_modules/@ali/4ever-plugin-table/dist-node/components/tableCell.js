"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _everCangjie = require("@ali/4ever-cangjie");

var _tableRow = _interopRequireDefault(require("../mo/models/tableRow"));

var _everUtils = require("@ali/4ever-utils");

var _getPositionOfCell = _interopRequireDefault(require("../utils/utils/getPositionOfCell"));

var _isTable = _interopRequireDefault(require("../utils/utils/isTable"));

var _actions = require("../utils/actions");

var _hooks = require("../utils/hooks");

var _getTableCellFill = _interopRequireDefault(require("../utils/utils/getTableCellFill"));

var _ContainerWidthResizeContext = require("./ContainerWidthResizeContext");

var _constants = require("../utils/constants");

const _createElement = /*#__PURE__*/React.createElement;
const {
  'table-cell': tableCellStyle
} = _everUtils.theme;

const Td = /*#__PURE__*/_styledComponents.default.td(["", " border-width:1px;border-style:solid;border-color:", ";overflow:hidden;overflow-wrap:break-word;word-wrap:break-word;", ""], (0, _everUtils.transformThemeObjToCssString)(tableCellStyle), _constants.DEFAULT_BORDER_COLOR, (0, _styledComponents.css)(["", ""], _everUtils.blockMarginStyleInContainer));

const DefaultPadding = {
  left: tableCellStyle['padding-left'],
  right: tableCellStyle['padding-right'],
  top: tableCellStyle['padding-top'],
  bottom: tableCellStyle['padding-bottom']
};

const vAlignToGridVAlign = vAlign => {
  const defaultAlign = 'center';
  const map = {
    top: 'flex-start',
    middle: defaultAlign,
    bottom: 'flex-end'
  };
  return vAlign ? map[vAlign] : defaultAlign;
};

const Cell = props => {
  const [isSticky] = (0, _hooks.useRowIsSticky)();
  const {
    node,
    attributes,
    children,
    fill,
    parent
  } = props;
  const {
    vAlign,
    bdr,
    hidden,
    rowSpan = 1,
    colSpan: cSpan,
    cellMar
  } = node.data || {};
  const colSpan = parseInt(String(cSpan), 10) || 1;
  const style = React.useMemo(() => {
    let result = {};

    if (hidden) {
      result.display = 'none';
    } else if (isSticky) {
      // 设置 grid，保障在首行吸顶时，cell 的 vAlign 样式正常
      result.display = 'flex';
      result.flexDirection = 'column';
    }

    if (fill) {
      result.backgroundColor = fill;
    } // 首行吸顶时采用 grid 布局，verticalAlign 在 grid 布局中不生效，改为 justifyContent


    if (isSticky) {
      result.justifyContent = vAlignToGridVAlign(vAlign);
    } else if (vAlign) {
      result.verticalAlign = vAlign;
    }

    const padding = { ...DefaultPadding
    };

    if (cellMar) {
      ['left', 'right', 'top', 'bottom'].forEach(orient => {
        if (typeof cellMar[orient]?.w === 'number') {
          padding[orient] = cellMar[orient]?.w;
        }
      });
    }

    if (typeof bdr === 'object') {
      result = { ...result,
        ...(0, _everUtils.bdrToStyle)(bdr),
        ...(0, _everUtils.bdrToPaddingStyle)(bdr, padding)
      };
    }

    return result;
  }, [hidden, isSticky, fill, vAlign, cellMar, bdr]);

  const isHeader = _tableRow.default.isTableRow(parent) && _tableRow.default.isHeader(parent);

  return /*#__PURE__*/_createElement(Td, (0, _extends2.default)({}, attributes, {
    "data-type": "table-cell",
    rowSpan: rowSpan || 1,
    colSpan: colSpan,
    style: style,
    "data-container-block": true
  }), children(), isHeader && /*#__PURE__*/_createElement(_everCangjie.SelectionSlot, {
    layerFor: node.key
  }));
};

const TableCell = props => {
  const {
    node,
    controller
  } = props;
  const {
    colSpan: cSpan
  } = node.data || {};
  const colSpan = parseInt(String(cSpan), 10) || 1;
  const {
    document
  } = controller.value;
  const table = document.getClosest(node.key, _isTable.default);
  const docStyle = (0, _everCangjie.useStyle)();
  const fill = (0, _getTableCellFill.default)(node, table, docStyle);
  const position = (0, _getPositionOfCell.default)(node.key, table) || {}; // @ts-ignore

  const {
    colIndex,
    rowIndex
  } = position;
  const [colsWidth] = (0, _hooks.usePixelColsWidth)();
  const width = React.useMemo(() => {
    let result = 0;

    if (typeof colIndex !== 'number') {
      return result;
    }

    if (Array.isArray(colsWidth)) {
      result = colsWidth.slice(colIndex, colIndex + colSpan).reduce((acc, v) => acc + v, 0);
    }

    return result;
  }, [colsWidth, colIndex, colSpan]);
  const didMount = React.useRef(false);
  const resetTableMinColsWidth = React.useCallback(() => {
    node.forEachDescendant(n => {
      const colWidth = controller.query('getMinTableColWidth', {
        node: n
      });

      if (typeof colWidth === 'number' && width < colWidth) {
        controller.run('onAction', (0, _actions.setTableMinColsWidthData)({
          [n.key]: colWidth
        }));
      }
    });
  }, [node]);
  React.useEffect(() => {
    // didMount 时不处理
    if (!didMount.current) {
      didMount.current = true;
      return;
    }

    resetTableMinColsWidth();
  }, [resetTableMinColsWidth]);
  const calcMinTableColWidth = React.useCallback(() => {
    if (!table || rowIndex !== 0) {
      return;
    }

    const res = controller.query('calcMinTableColWidth', {
      node: table,
      colIndex
    });
    const {
      key,
      width: minColWidth
    } = res || {};

    if (key && typeof minColWidth === 'number' && width < minColWidth) {
      controller.run('onAction', (0, _actions.setTableMinColsWidthData)({
        [key]: minColWidth
      }));
    } // perf
    // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [width]);
  React.useEffect(calcMinTableColWidth, [calcMinTableColWidth]);
  return /*#__PURE__*/_createElement(_ContainerWidthResizeContext.ContainerWidthResizeContext.Provider, {
    value: width
  }, /*#__PURE__*/_createElement(Cell, (0, _extends2.default)({}, props, {
    fill: fill
  })));
};

var _default = TableCell;
exports.default = _default;
//# sourceMappingURL=tableCell.js.map