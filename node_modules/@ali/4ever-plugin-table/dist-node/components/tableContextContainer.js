"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _tableRow = _interopRequireDefault(require("../mo/models/tableRow"));

var _hooks = require("../utils/hooks");

var _useResizeObserver = _interopRequireDefault(require("../utils/utils/useResizeObserver"));

const _createElement = /*#__PURE__*/_react.default.createElement;

const TableContextContainer = props => {
  const {
    controller,
    table,
    enableHeaderSticky,
    children
  } = props;
  const scale = (0, _everCangjie.useZoom)();
  const scrollContainer = (0, _everCangjie.useScrollableContainer)();

  const [scrollContainerRect, setScrollContainerRect] = _react.default.useState({
    top: 0
  });

  const firstRow = table.nodes?.[0];

  const shouldSticky = _tableRow.default.shouldSticky(firstRow);

  const updateScrollContainerTop = _react.default.useCallback(rect => {
    const actualTop = rect.top;

    if (scrollContainerRect.top !== actualTop) {
      setScrollContainerRect(r => ({ ...r,
        top: actualTop
      }));
    }
  }, [scrollContainerRect.top]);

  (0, _useResizeObserver.default)(shouldSticky ? scrollContainer : null, updateScrollContainerTop);

  const [isSticky, setIsSticky] = _react.default.useState(false);
  /**
   * 以下场景吸顶时，样式存在问题，暂时不支持
   * 1. 缩放
   * 2. 表格在表格 or 分栏 内
   * 3. 表格在高亮块内
   */


  const disableSticky = scale !== 1 || controller.query('isNodeInTable', table) || controller.query('isNodeInColorBlocks', table);

  const updateIsSticky = _react.default.useCallback(sticky => {
    setIsSticky(sticky && !disableSticky && !!enableHeaderSticky && enableHeaderSticky());
  }, [disableSticky, enableHeaderSticky]);

  const isStickyContext = _react.default.useMemo(() => {
    return [isSticky, updateIsSticky];
  }, [isSticky, updateIsSticky]);

  const scrollContainerRectValue = _react.default.useMemo(() => {
    return [scrollContainerRect, setScrollContainerRect];
  }, [scrollContainerRect]);

  return /*#__PURE__*/_createElement(_hooks.ScrollableContainerRect.Provider, {
    value: scrollContainerRectValue
  }, /*#__PURE__*/_createElement(_hooks.RowIsStickyContext.Provider, {
    value: isStickyContext
  }, children));
};

var _default = TableContextContainer;
exports.default = _default;
//# sourceMappingURL=tableContextContainer.js.map