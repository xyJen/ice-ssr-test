{"version":3,"sources":["../../../../../src/__tests__/bi/utils/colsWidthConverter.test.ts"],"names":["containerWidth","percentColsWidth","pixelColsWidth","describe","it","table","Table","create","data","tblW","w","type","colsWidth","result","expect","toEqual","map","cw","pxColsWidth"],"mappings":";;;;AAAA;;AACA;;AAEA,MAAMA,cAAc,GAAG,GAAvB;AACA,MAAMC,gBAAgB,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAAzB;AACA,MAAMC,cAAc,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,CAAvB;AAEAC,QAAQ,CAAC,gCAAD,EAAmC,MAAM;AAC/CA,EAAAA,QAAQ,CAAC,0BAAD,EAA6B,MAAM;AACzCC,IAAAA,EAAE,CAAC,aAAD,EAAgB,MAAM;AACtB,YAAMC,KAAK,GAAGC,gBAAMC,MAAN,CAAa;AACzBC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE;AACJC,YAAAA,CAAC,EAAE,GADC;AAEJC,YAAAA,IAAI,EAAE;AAFF,WADF;AAKJC,UAAAA,SAAS,EAAEX;AALP;AADmB,OAAb,CAAd;;AASA,YAAMY,MAAM,GAAG,mDAA0BR,KAA1B,EAAiCL,cAAjC,CAAf;AACAc,MAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,OAAf,CAAuBb,cAAvB;AACD,KAZC,CAAF;AAcAE,IAAAA,EAAE,CAAC,oCAAD,EAAuC,MAAM;AAC7C,YAAMC,KAAK,GAAGC,gBAAMC,MAAN,CAAa;AACzBC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE;AACJC,YAAAA,CAAC,EAAE,GADC;AAEJC,YAAAA,IAAI,EAAE;AAFF,WADF;AAKJC,UAAAA,SAAS,EAAEX,gBAAgB,CAACe,GAAjB,CAAqBC,EAAE,IAAKA,EAAE,GAAG,CAAjC;AALP;AADmB,OAAb,CAAd;;AASA,YAAMJ,MAAM,GAAG,mDAA0BR,KAA1B,EAAiCL,cAAjC,CAAf;AACAc,MAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,OAAf,CAAuBb,cAAvB;AACD,KAZC,CAAF;AAaD,GA5BO,CAAR;AA8BAC,EAAAA,QAAQ,CAAC,0BAAD,EAA6B,MAAM;AACzCC,IAAAA,EAAE,CAAC,aAAD,EAAgB,MAAM;AACtB,YAAMS,MAAM,GAAG,mDAA0BX,cAA1B,EAA0CF,cAA1C,CAAf;AACAc,MAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,OAAf,CAAuBd,gBAAvB;AACD,KAHC,CAAF;AAKAG,IAAAA,EAAE,CAAC,kBAAD,EAAqB,MAAM;AAC3B,YAAMc,WAAW,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAApB;AACA,YAAML,MAAM,GAAG,mDAA0BK,WAA1B,EAAuClB,cAAvC,EAAuD,GAAvD,CAAf;AACAc,MAAAA,MAAM,CAACD,MAAD,CAAN,CAAeE,OAAf,CAAuB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAAvB;AACD,KAJC,CAAF;AAKD,GAXO,CAAR;AAYD,CA3CO,CAAR","sourcesContent":["import Table from '../../../mo/models';\nimport { convertFromPercentToPixel, convertFromPixelToPercent } from '../../../utils/utils/colsWidthConverter';\n\nconst containerWidth = 500;\nconst percentColsWidth = [10, 20, 40, 30];\nconst pixelColsWidth = [50, 100, 200, 150];\n\ndescribe('table/utils/colsWidthConverter', () => {\n  describe('convert percent to pixel', () => {\n    it('normal case', () => {\n      const table = Table.create({\n        data: {\n          tblW: {\n            w: 100,\n            type: 'pct',\n          },\n          colsWidth: percentColsWidth,\n        },\n      });\n      const result = convertFromPercentToPixel(table, containerWidth);\n      expect(result).toEqual(pixelColsWidth);\n    });\n\n    it('total colsWidth larger than tblW.w', () => {\n      const table = Table.create({\n        data: {\n          tblW: {\n            w: 100,\n            type: 'pct',\n          },\n          colsWidth: percentColsWidth.map(cw => (cw * 4)),\n        },\n      });\n      const result = convertFromPercentToPixel(table, containerWidth);\n      expect(result).toEqual(pixelColsWidth);\n    })\n  });\n\n  describe('convert pixel to percent', () => {\n    it('normal case', () => {\n      const result = convertFromPixelToPercent(pixelColsWidth, containerWidth);\n      expect(result).toEqual(percentColsWidth);\n    });\n\n    it('set totalPercent', () => {\n      const pxColsWidth = [300, 100, 200, 400];\n      const result = convertFromPixelToPercent(pxColsWidth, containerWidth, 200);\n      expect(result).toEqual([60, 20, 40, 80]);\n    });\n  });\n});"],"file":"colsWidthConverter.test.js"}