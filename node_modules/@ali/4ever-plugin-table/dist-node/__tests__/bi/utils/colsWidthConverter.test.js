"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _models = _interopRequireDefault(require("../../../mo/models"));

var _colsWidthConverter = require("../../../utils/utils/colsWidthConverter");

const containerWidth = 500;
const percentColsWidth = [10, 20, 40, 30];
const pixelColsWidth = [50, 100, 200, 150];
describe('table/utils/colsWidthConverter', () => {
  describe('convert percent to pixel', () => {
    it('normal case', () => {
      const table = _models.default.create({
        data: {
          tblW: {
            w: 100,
            type: 'pct'
          },
          colsWidth: percentColsWidth
        }
      });

      const result = (0, _colsWidthConverter.convertFromPercentToPixel)(table, containerWidth);
      expect(result).toEqual(pixelColsWidth);
    });
    it('total colsWidth larger than tblW.w', () => {
      const table = _models.default.create({
        data: {
          tblW: {
            w: 100,
            type: 'pct'
          },
          colsWidth: percentColsWidth.map(cw => cw * 4)
        }
      });

      const result = (0, _colsWidthConverter.convertFromPercentToPixel)(table, containerWidth);
      expect(result).toEqual(pixelColsWidth);
    });
  });
  describe('convert pixel to percent', () => {
    it('normal case', () => {
      const result = (0, _colsWidthConverter.convertFromPixelToPercent)(pixelColsWidth, containerWidth);
      expect(result).toEqual(percentColsWidth);
    });
    it('set totalPercent', () => {
      const pxColsWidth = [300, 100, 200, 400];
      const result = (0, _colsWidthConverter.convertFromPixelToPercent)(pxColsWidth, containerWidth, 200);
      expect(result).toEqual([60, 20, 40, 80]);
    });
  });
});
//# sourceMappingURL=colsWidthConverter.test.js.map