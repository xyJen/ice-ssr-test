"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTableInstance = createTableInstance;
exports.createMergeTable = createMergeTable;
exports.getTableFromController = getTableFromController;

var _utils = require("../../bi/utils");

var _models = _interopRequireDefault(require("../../mo/models"));

var _tableCell = _interopRequireDefault(require("../../mo/models/tableCell"));

var _tableRow = _interopRequireDefault(require("../../mo/models/tableRow"));

function createTableCell({
  data = {},
  text = ''
}) {
  return _tableCell.default.create({
    data: {
      colSpan: 1,
      rowSpan: 1,
      ...(data || {})
    },
    nodes: text.split('\n').map(_utils.createEmptyParagraph)
  });
}

function createTableInstance({
  table = [['A', 'B'], ['C', 'D']],
  colsWidth,
  isAutofit
} = {}) {
  const rows = table.map(row => {
    return _tableRow.default.create({
      nodes: row.map(cell => {
        if (typeof cell === 'string') {
          cell = {
            text: cell || ''
          };
        }

        return createTableCell(cell);
      })
    });
  });
  const colsLength = table.reduce((acc, row) => Math.max(acc, row.length), 0);
  const tableData = {
    colsWidth: colsWidth === undefined ? Array(colsLength).fill(100) : colsWidth
  };

  if (isAutofit) {
    tableData.tblW = {
      w: 100,
      type: 'pct'
    };
  }

  return _models.default.create({
    data: tableData,
    nodes: rows
  });
}

function createMergeCell(rowSpan = 2, colSpan = 2) {
  return _tableCell.default.create({
    data: {
      colSpan,
      rowSpan
    },
    nodes: [(0, _utils.createEmptyParagraph)()]
  });
}

function createHiddenCell() {
  return (0, _utils.createEmptyTableCell)({
    hidden: true
  });
}
/**
 * 创建带合并单元格的 table(4x4)，结构如下
 * [
 *   ['', '', '', ''],
 *   ['', 'mergeCell', 'hidden', ''],
 *   ['', 'hidden', 'hidden', ''],
 *   ['', '', '', ''],
 * ]
 */


function createMergeTable() {
  const colLength = 4;
  return _models.default.create({
    data: {
      colsWidth: Array(colLength).fill(100)
    },
    nodes: [_tableRow.default.create({
      nodes: Array(colLength).fill('').map(_utils.createEmptyTableCell)
    }), _tableRow.default.create({
      nodes: [(0, _utils.createEmptyTableCell)(), createMergeCell(2, 2), createHiddenCell(), (0, _utils.createEmptyTableCell)()]
    }), _tableRow.default.create({
      nodes: [(0, _utils.createEmptyTableCell)(), createHiddenCell(), createHiddenCell(), (0, _utils.createEmptyTableCell)()]
    }), _tableRow.default.create({
      nodes: Array(colLength).fill('').map(_utils.createEmptyTableCell)
    })]
  });
}

function getTableFromController(controller) {
  return controller.value.document.findDescendant(el => el.type === 'table');
}
//# sourceMappingURL=helpers.js.map