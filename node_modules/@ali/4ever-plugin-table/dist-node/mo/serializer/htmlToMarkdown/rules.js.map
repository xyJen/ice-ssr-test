{"version":3,"sources":["../../../../../src/mo/serializer/htmlToMarkdown/rules.ts"],"names":["cell","content","node","index","Array","prototype","indexOf","call","parentNode","childNodes","prefix","tableCell","filter","replacement","cellContent","replace","tableRow","borderCells","alignMap","left","right","center","i","children","length","border","align","getAttribute","toLowerCase","table","rows","tableSection"],"mappings":";;;;;;;AAAA;;AAEA;AACA,SAASA,IAAT,CAAcC,OAAd,EAA+BC,IAA/B,EAA2D;AACzD,QAAMC,KAAK,GAAGC,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BL,IAAI,CAACM,UAAL,EAAiBC,UAA9C,EAA0DP,IAA1D,CAAd;AACA,MAAIQ,MAAM,GAAG,GAAb;AACA,MAAIP,KAAK,KAAK,CAAd,EAAiBO,MAAM,GAAG,IAAT;AACjB,SAAOA,MAAM,GAAGT,OAAT,GAAmB,IAA1B;AACD,C,CAED;;;AACA,MAAMU,SAAS,GAAG;AAChBC,EAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CADQ;AAEhBC,EAAAA,WAAW,EAAE,UAAUZ,OAAV,EAA2BC,IAA3B,EAAuD;AAClE,UAAMY,WAAW,GAAGb,OAAO,CAACc,OAAR,CAAgB,MAAhB,EAAwB,GAAxB,CAApB;AACA,WAAOf,IAAI,CAACc,WAAD,EAAcZ,IAAd,CAAX;AACD;AALe,CAAlB,C,CAQA;;AACA,MAAMc,QAAQ,GAAG;AACfJ,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,WAAW,EAAE,UAAUZ,OAAV,EAA2BC,IAA3B,EAAsD;AACjE,QAAIe,WAAW,GAAG,EAAlB;AACA,UAAMC,QAAQ,GAAG;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAE,KAAtB;AAA6BC,MAAAA,MAAM,EAAE;AAArC,KAAjB;;AAEA,QAAI,yBAAanB,IAAb,CAAJ,EAAwB;AACtB,WAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,IAAI,CAACqB,QAAL,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC7C,YAAIG,MAAM,GAAG,KAAb;AACA,cAAMC,KAAK,GAAG,CACZxB,IAAI,CAACqB,QAAL,CAAcD,CAAd,EAAiBK,YAAjB,CAA8B,OAA9B,KAA0C,EAD9B,EAEZC,WAFY,EAAd;AAIA,YAAIF,KAAJ,EAAWD,MAAM,GAAGP,QAAQ,CAACQ,KAAD,CAAR,IAAmBD,MAA5B;AAEXR,QAAAA,WAAW,IAAIjB,IAAI,CAACyB,MAAD,EAASvB,IAAI,CAACqB,QAAL,CAAcD,CAAd,CAAT,CAAnB;AACD;AACF;;AACD,WAAO,OAAOrB,OAAP,IAAkBgB,WAAW,GAAG,OAAOA,WAAV,GAAwB,EAArD,CAAP;AACD;AAnBc,CAAjB,C,CAsBA;;AACA,MAAMY,KAAK,GAAG;AACZjB,EAAAA,MAAM,EAAE,UAAUV,IAAV,EAA6B;AACnC,QAAI,CAAC,oBAAQA,IAAR,CAAL,EAAoB;AAClB,aAAO,KAAP;AACD;;AAED,QAAI,yBAAaA,IAAI,CAAC4B,IAAL,CAAU,CAAV,CAAb,CAAJ,EAAgC;AAC9B,iCAAe5B,IAAf;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAZW;AAcZW,EAAAA,WAAW,EAAE,UAAUZ,OAAV,EAA2B;AACtCA,IAAAA,OAAO,GAAGA,OAAO,CAACc,OAAR,CAAgB,MAAhB,EAAwB,IAAxB,CAAV;AACA,WAAOd,OAAP;AACD;AAjBW,CAAd,C,CAoBA;;AACA,MAAM8B,YAAY,GAAG;AACnBnB,EAAAA,MAAM,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CADW;AAEnBC,EAAAA,WAAW,EAAE,UAAUZ,OAAV,EAA4B;AACvC,WAAOA,OAAP;AACD;AAJkB,CAArB;eAOe;AACbU,EAAAA,SADa;AAEbK,EAAAA,QAFa;AAGba,EAAAA,KAHa;AAIbE,EAAAA;AAJa,C","sourcesContent":["import { isTable, isHeadingRow, normalizeTable } from './utils';\n\n// table cell replacement logic.\nfunction cell(content: string, node: HTMLTableCellElement) {\n  const index = Array.prototype.indexOf.call(node.parentNode?.childNodes, node);\n  let prefix = ' ';\n  if (index === 0) prefix = '| ';\n  return prefix + content + ' |';\n}\n\n//  table cell rules.\nconst tableCell = {\n  filter: ['th', 'td'],\n  replacement: function (content: string, node: HTMLTableCellElement) {\n    const cellContent = content.replace(/\\n+/g, ' ');\n    return cell(cellContent, node);\n  },\n};\n\n//  table row rules.\nconst tableRow = {\n  filter: 'tr',\n  replacement: function (content: string, node: HTMLTableRowElement) {\n    let borderCells = '';\n    const alignMap = { left: ':--', right: '--:', center: ':-:' };\n\n    if (isHeadingRow(node)) {\n      for (let i = 0; i < node.children.length; i++) {\n        let border = '---';\n        const align = (\n          node.children[i].getAttribute('align') || ''\n        ).toLowerCase();\n\n        if (align) border = alignMap[align] || border;\n\n        borderCells += cell(border, node.children[i] as HTMLTableCellElement);\n      }\n    }\n    return '\\n' + content + (borderCells ? '\\n' + borderCells : '');\n  },\n};\n\n//  table rules.\nconst table = {\n  filter: function (node: HTMLElement) {\n    if (!isTable(node)) {\n      return false;\n    }\n\n    if (isHeadingRow(node.rows[0])) {\n      normalizeTable(node);\n      return false;\n    }\n\n    return true;\n  },\n\n  replacement: function (content: string) {\n    content = content.replace('\\n\\n', '\\n');\n    return content;\n  },\n};\n\n//  table selection rules.\nconst tableSection = {\n  filter: ['thead', 'tbody', 'tfoot'],\n  replacement: function (content?: string) {\n    return content;\n  },\n};\n\nexport default {\n  tableCell,\n  tableRow,\n  table,\n  tableSection,\n};\n"],"file":"rules.js"}