{"version":3,"sources":["../../../../src/mo/serializer/jsonMLToHTML.tsx"],"names":["TableCell","props","node","children","rest","attrs","colSpan","rowSpan","hidden","style","TableRow","h","text","length","height","DEFAULT_TABLE_ROW_HEIGHT","Table","colsWidth","tblW","pixelColsWidth","type","totalColsWidth","reduce","acc","w","index","push","Math","max","DEFAULT_PAGE_WIDTH","MIN_COL_WIDTH","pixelW","round","map","width","tagToComponent","table","tr","tc","td","name","match","tagName","convert","path","Component","child","toString"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  JsonML,\n  getTagName,\n  getAttributes,\n  getChildren,\n  getText,\n} from '@ali/4ever-utils';\nimport { TableCellProperties, TableRowProperties, TableProperties } from './types';\nimport { generateTableCellStyle, generateTableStyle, DEFAULT_TABLE_ROW_HEIGHT } from './styles';\nimport { DEFAULT_PAGE_WIDTH, MIN_COL_WIDTH } from './constants';\nimport { ConvertFunc } from '@ali/4ever-cangjie';\n\ninterface TableProps {\n  node: JsonML;\n}\n\ninterface TableRowProps {\n  node: JsonML;\n}\ninterface TableCellProps {\n  node: JsonML;\n}\n\nconst TableCell: React.FC<TableCellProps> = (props): React.ReactElement => {\n  const { node, children, ...rest } = props;\n  const attrs = (getAttributes(node) || {}) as TableCellProperties;\n  const { colSpan = 1, rowSpan = 1, hidden } = attrs;\n\n  // 被合并掉的单元格不输出，在 Word 中如果输出 hidden 单元格则会异常\n  if (hidden) {\n    return <></>;\n  }\n\n  const style = generateTableCellStyle(attrs);\n\n  return (\n    <td {...rest} colSpan={colSpan} rowSpan={rowSpan} style={style}>\n      {children}\n    </td>\n  );\n};\n\nconst TableRow: React.FC<TableRowProps> = (props): React.ReactElement => {\n  const { node, children, ...rest } = props;\n  const { h }: TableRowProperties = getAttributes(node) || {};\n  const style: React.CSSProperties = {};\n  const text = getText(node);\n  // 无内容的行在 Word 中会塌陷，这里使用一个宽度让其能够撑开\n  if (text.length === 0) {\n    style.height = DEFAULT_TABLE_ROW_HEIGHT;\n  }\n  if (h) {\n    style.height = h;\n  }\n  return (\n    <tr {...rest} style={style}>\n      {children}\n    </tr>\n  );\n};\n\nconst Table: React.FC<TableProps> = (props): React.ReactElement => {\n  const { node, children, ...rest } = props;\n  const attrs = getAttributes(node) as TableProperties;\n  const { colsWidth = [], tblW } = attrs;\n  // 宽度自适应表格将列宽单位由百分比转为 px\n  let pixelColsWidth = colsWidth;\n  if (tblW?.type === 'pct') {\n    const totalColsWidth = colsWidth.reduce((acc, w) => (acc + w));\n    pixelColsWidth = [];\n    colsWidth.reduce((acc, w, index) => {\n      if (index === colsWidth.length - 1) {\n        return pixelColsWidth.push(Math.max(DEFAULT_PAGE_WIDTH - acc), MIN_COL_WIDTH);\n      }\n      const pixelW = Math.round(w / totalColsWidth * DEFAULT_PAGE_WIDTH);\n      pixelColsWidth.push(pixelW);\n      return acc + pixelW;\n    }, 0);\n  }\n\n  return (\n    <table\n      {...rest}\n      style={generateTableStyle(attrs)}\n    >\n      <colgroup>\n        {pixelColsWidth.map((width: number, index: number) => (\n          <col key={index} width={width} />\n        ))}\n      </colgroup>\n      <tbody>\n        {children}\n      </tbody>\n    </table>\n  );\n};\n\nconst tagToComponent: Record<string, React.FC<TableProps | TableRowProps | TableCellProps>> = {\n  table: Table,\n  tr: TableRow,\n  tc: TableCell,\n  td: TableCell,\n};\n\nexport default {\n  name: 'table',\n\n  match: (node: JsonML): boolean => {\n    const tagName = getTagName(node);\n    return !!tagToComponent[tagName];\n  },\n\n  convert: (node: JsonML, path: number[], convert: ConvertFunc): React.ReactElement => {\n    const tagName = getTagName(node);\n    const Component = tagToComponent[tagName];\n    const children = getChildren(node)\n      .map((child, index) => convert(child, [...path, index]));\n\n    return (\n      <Component node={node} key={path.toString()}>\n        {children}\n      </Component>\n    );\n  },\n};\n"],"file":"jsonMLToHTML.js"}