{"version":3,"sources":["../../../../src/mo/serializer/valueToText.ts"],"names":["BREAK","valueToText","name","match","node","Table","isTable","convert","Block","isBlock","text","tableText","nodes","map","tableRow","TableRow","isTableRow","rowText","tableCell","TableCell","isTableCell","cellText","child","join"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA,MAAMA,KAAK,GAAG,IAAd;AAEA,MAAMC,WAA4B,GAAG;AACnCC,EAAAA,IAAI,EAAE,OAD6B;;AAGnCC,EAAAA,KAAK,CAACC,IAAD,EAAO;AACV,WAAOC,gBAAMC,OAAN,CAAcF,IAAd,CAAP;AACD,GALkC;;AAOnCG,EAAAA,OAAO,CAACH,IAAD,EAAOG,OAAP,EAAgB;AACrB,QAAI,CAACC,mBAAMC,OAAN,CAAcL,IAAd,CAAL,EAA0B;AACxB,aAAOA,IAAI,CAACM,IAAZ;AACD;;AAED,UAAMC,SAAS,GAAGP,IAAI,CAACQ,KAAL,CAAWC,GAAX,CAAgBC,QAAD,IAAc;AAC7C;AACA,UAAI,CAACC,kBAASC,UAAT,CAAoBF,QAApB,CAAL,EAAoC;AAClC,eAAOA,QAAQ,CAACJ,IAAT,GAAgBV,KAAvB;AACD;;AAED,YAAMiB,OAAO,GAAGH,QAAQ,CAACF,KAAT,CAAeC,GAAf,CAAoBK,SAAD,IAAe;AAChD;AACA,YAAI,CAACC,mBAAUC,WAAV,CAAsBF,SAAtB,CAAL,EAAuC;AACrC,iBAAQA,SAAD,CAAmBR,IAAnB,GAA0BV,KAAjC;AACD;;AAED,cAAMqB,QAAQ,GAAGH,SAAS,CAACN,KAAV,CAAgBC,GAAhB,CAAqBS,KAAD,IAAWf,OAAO,CAACe,KAAD,CAAtC,EAA+CC,IAA/C,CAAoD,EAApD,CAAjB;AAEA,eAAOF,QAAP;AACD,OATe,EASbE,IATa,CASR,EATQ,CAAhB;AAWA,aAAON,OAAP;AACD,KAlBiB,EAkBfM,IAlBe,CAkBV,EAlBU,CAAlB;AAoBA,WAAOZ,SAAP;AACD;;AAjCkC,CAArC;eAoCeV,W","sourcesContent":["import { Block, ValueToTextRule } from '@ali/4ever-cangjie';\nimport Table from '../models';\nimport TableRow from '../models/tableRow';\nimport TableCell from '../models/tableCell';\n\n\nconst BREAK = '\\n';\n\nconst valueToText: ValueToTextRule = {\n  name: 'table',\n\n  match(node) {\n    return Table.isTable(node);\n  },\n\n  convert(node, convert) {\n    if (!Block.isBlock(node)) {\n      return node.text;\n    }\n\n    const tableText = node.nodes.map((tableRow) => {\n      // 不是 tableRow 节点，坏表格\n      if (!TableRow.isTableRow(tableRow)) {\n        return tableRow.text + BREAK;\n      }\n\n      const rowText = tableRow.nodes.map((tableCell) => {\n        // 不是 tableCell 节点，坏表格\n        if (!TableCell.isTableCell(tableCell)) {\n          return (tableCell as any).text + BREAK;\n        }\n\n        const cellText = tableCell.nodes.map((child) => convert(child)).join('');\n\n        return cellText;\n      }).join('');\n\n      return rowText;\n    }).join('');\n\n    return tableText;\n  },\n};\n\nexport default valueToText;\n"],"file":"valueToText.js"}