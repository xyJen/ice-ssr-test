"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateTableCellStyle = generateTableCellStyle;
exports.generateTableStyle = generateTableStyle;
exports.DEFAULT_TABLE_ROW_HEIGHT = void 0;
const DEFAULT_TABLE_BORDER_COLOR = '#D6D6D6';
const DEFAULT_BORDER_SIDE = {
  val: 'single',
  sz: 1,
  color: '#000000'
};

function generateBorderSideStyle(side) {
  const {
    sz,
    val,
    color
  } = { ...DEFAULT_BORDER_SIDE,
    ...side
  };
  return `${sz}px ${val === 'single' ? 'solid' : val} ${color}`;
}

function generateBorderStyle(bdr = {}) {
  return {
    borderTop: generateBorderSideStyle(bdr.top),
    borderRight: generateBorderSideStyle(bdr.right),
    borderBottom: generateBorderSideStyle(bdr.bottom),
    borderLeft: generateBorderSideStyle(bdr.left)
  };
}

function generatePaddingStyle(bdr, padding = 8) {
  const paddingStyle = {};

  if (bdr.left && bdr.left.sz) {
    paddingStyle.paddingLeft = padding - Math.abs(bdr.left.sz);
  }

  if (bdr.right && bdr.right.sz) {
    paddingStyle.paddingRight = padding - Math.abs(bdr.right.sz);
  }

  return paddingStyle;
}

const DEFAULT_TABLE_CELL_STYLE = {
  overflow: 'hidden',
  borderLeft: `1px solid ${DEFAULT_TABLE_BORDER_COLOR}`,
  borderRight: `1px solid ${DEFAULT_TABLE_BORDER_COLOR}`,
  borderBottom: `1px solid ${DEFAULT_TABLE_BORDER_COLOR}`,
  borderTop: `1px solid ${DEFAULT_TABLE_BORDER_COLOR}`,
  padding: '4px 8px',
  overflowWrap: 'break-word',
  wordWrap: 'break-word'
};

function generateTableCellStyle(attrs) {
  let style = { ...DEFAULT_TABLE_CELL_STYLE,
    ...generateBorderStyle(attrs.bdr)
  };

  if (attrs.hidden) {
    style.display = 'none';
  }

  if (attrs.fill) {
    style.backgroundColor = attrs.fill;
  }

  if (attrs.vAlign) {
    style.verticalAlign = attrs.vAlign;
  }

  if (attrs.bdr) {
    style = { ...style,
      ...generateBorderStyle(attrs.bdr),
      ...generatePaddingStyle(attrs.bdr)
    };
  }

  return style;
}

const DEFAULT_TABLE_ROW_HEIGHT = 33;
exports.DEFAULT_TABLE_ROW_HEIGHT = DEFAULT_TABLE_ROW_HEIGHT;

function generateTableStyle(attrs) {
  const {
    colsWidth = [],
    tblW
  } = attrs;
  const isAutofit = tblW?.type === 'pct';
  const style = {
    borderCollapse: 'collapse',
    tableLayout: 'fixed'
  };

  if (isAutofit) {
    style.width = '100%';
  } else {
    const tableWidth = colsWidth.reduce((sum, width) => sum + width, 0);

    if (tableWidth > 0) {
      style.width = tableWidth;
    }
  }

  return style;
}
//# sourceMappingURL=styles.js.map