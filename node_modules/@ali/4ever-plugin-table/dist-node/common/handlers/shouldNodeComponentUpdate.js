"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));

var _models = _interopRequireDefault(require("../../mo/models"));

var _tableCell = _interopRequireDefault(require("../../mo/models/tableCell"));

var _tableRow = _interopRequireDefault(require("../../mo/models/tableRow"));

var _getTableCellWidth = _interopRequireDefault(require("../../utils/utils/getTableCellWidth"));

var _getPositionOfCell = _interopRequireDefault(require("../../utils/utils/getPositionOfCell"));

const shouldNodeComponentUpdate = (prevProps, props, __, next) => {
  if (_tableRow.default.isTableRow(props.node)) {
    const prevTable = prevProps.parent;
    const table = props.parent; // 表格列宽变化时 update 以触发 tableCell update

    if (!(0, _fastDeepEqual.default)(prevTable?.data?.colsWidth, table?.data?.colsWidth) || !(0, _fastDeepEqual.default)(prevTable?.data?.styleId, table?.data?.styleId) || !(0, _fastDeepEqual.default)(prevTable?.data?.tblLook, table?.data?.tblLook)) {
      return true;
    }
  }

  if (_tableCell.default.isTableCell(props.node)) {
    const {
      document: prevDocument
    } = prevProps.value;
    const prevTable = prevDocument.getClosest(prevProps.node.key, _models.default.isTable);
    const prevCellWidth = (0, _getTableCellWidth.default)(prevProps.node, prevTable);
    const prevPosition = (0, _getPositionOfCell.default)(prevProps.node.key, prevTable);
    const {
      document
    } = props.value;
    const table = document.getClosest(props.node.key, _models.default.isTable);
    const cellWidth = (0, _getTableCellWidth.default)(props.node, table);
    const position = (0, _getPositionOfCell.default)(props.node.key, table); // tableCell 宽度变化时 update（部分插件在 cell 宽度变化时需要 rerender）

    if (!(0, _fastDeepEqual.default)(prevCellWidth, cellWidth) || !(0, _fastDeepEqual.default)(prevPosition, position) || !(0, _fastDeepEqual.default)(prevTable?.data?.styleId, table?.data?.styleId) || !(0, _fastDeepEqual.default)(prevTable?.data?.tblLook, table?.data?.tblLook)) {
      return true;
    }
  }

  if (_models.default.isTable(props.node)) {
    // 当在单元格内选区时，若由于 mousemove 造成仅有 selection.data.isByTable 变化
    // 则使表格 re-render 以显示单元格选区
    if (props.isSelected && prevProps.isSelected && props.prevValue?.selection.plainViewKey === props.value.selection.plainViewKey && props.prevValue?.selection.data.isByTable !== props.value.selection.data.isByTable) {
      return true;
    }
  }

  return next();
};

var _default = shouldNodeComponentUpdate;
exports.default = _default;
//# sourceMappingURL=shouldNodeComponentUpdate.js.map