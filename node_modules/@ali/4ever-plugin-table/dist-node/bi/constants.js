"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "MIN_COL_WIDTH", {
  enumerable: true,
  get: function () {
    return _constants.MIN_COL_WIDTH;
  }
});
Object.defineProperty(exports, "MIN_ROW_HEIGHT", {
  enumerable: true,
  get: function () {
    return _constants.MIN_ROW_HEIGHT;
  }
});
Object.defineProperty(exports, "QUICK_INSERT_BUTTON_WIDTH_HEIGHT", {
  enumerable: true,
  get: function () {
    return _constants.QUICK_INSERT_BUTTON_WIDTH_HEIGHT;
  }
});
Object.defineProperty(exports, "TOOLBAR_ITEM_SIZE_MOBILE", {
  enumerable: true,
  get: function () {
    return _constants.TOOLBAR_ITEM_SIZE_MOBILE;
  }
});
exports.DEFAULT_TABLE_ALIGNMENT = exports.TABLE_HEADER_STYLE_ID = exports.DRAG_TRIGGER_TIME = exports.THEME = exports.TOOLBAR_ITEM_SIZE = exports.DISTANCE_BETWEEN_DELETE_BUTTON_AND_TOOLBAR = exports.DISTANCE_BETWEEN_INSERT_BUTTON_AND_TOOLBAR = exports.MIN_HOVER_SHOW_INSERT_DELTA = exports.HOVER_SHOW_INSERT_DELTA = exports.DETECT_DELTA = exports.INSERT_INDICATOR_LINE_SIZE = exports.DOC_WIDTH = void 0;

var _constants = require("../utils/constants");

const DOC_WIDTH = 598; // 行列插入指示线宽度 or 高度

exports.DOC_WIDTH = DOC_WIDTH;
const INSERT_INDICATOR_LINE_SIZE = 2; // 降低以处理过于敏感容易误触的问题

exports.INSERT_INDICATOR_LINE_SIZE = INSERT_INDICATOR_LINE_SIZE;
const DETECT_DELTA = 2; //  hover 出现插入按钮在行工具栏左侧区域的宽度
// 列工具栏同理

exports.DETECT_DELTA = DETECT_DELTA;
const HOVER_SHOW_INSERT_DELTA = 15; // 当行高/列宽小于 32px 时，
// 行上下侧 8px 或列左右侧 8px 区域 hover 才出现插入按钮

exports.HOVER_SHOW_INSERT_DELTA = HOVER_SHOW_INSERT_DELTA;
const MIN_HOVER_SHOW_INSERT_DELTA = 8;
exports.MIN_HOVER_SHOW_INSERT_DELTA = MIN_HOVER_SHOW_INSERT_DELTA;
const DISTANCE_BETWEEN_INSERT_BUTTON_AND_TOOLBAR = -2;
exports.DISTANCE_BETWEEN_INSERT_BUTTON_AND_TOOLBAR = DISTANCE_BETWEEN_INSERT_BUTTON_AND_TOOLBAR;
const DISTANCE_BETWEEN_DELETE_BUTTON_AND_TOOLBAR = 2;
exports.DISTANCE_BETWEEN_DELETE_BUTTON_AND_TOOLBAR = DISTANCE_BETWEEN_DELETE_BUTTON_AND_TOOLBAR;
const TOOLBAR_ITEM_SIZE = 8;
exports.TOOLBAR_ITEM_SIZE = TOOLBAR_ITEM_SIZE;
const THEME = {
  toolbarBorderColor: '#D6D6D6',
  toolbarBgColor: {
    default: '#F5F6F7',
    hover: '#e2e4e6b3',
    active: '#87B5F6'
  },
  toolbarItemBorderColor: 'rgba(126, 134, 142, 0.08)',
  blue0: 'rgba(0, 106, 254, 0.12)',
  // blue1: 'rgba(126,134,142,0.08)',
  blue1: 'rgba(0, 122, 255, 0.5)',
  blue2: 'rgba(81, 152, 255, 0.48)',
  blue3: 'rgb(0, 106, 254)',
  dragBlue0: '#0089FF',
  dragBlue1: 'rgba(0, 106, 254, 0.24)',
  red0: 'rgba(255, 0, 0, 0.15)',
  red1: 'rgba(255, 0, 0, 0.67)',
  selectionBgColor: 'rgba(0, 122, 255, 0.1)',
  deleteBgColor: 'rgba(255, 0, 0, 0.15)',
  cellBorderColor: '#D9DBDD',
  rowColIndicatorColor: '#3296FA'
};
exports.THEME = THEME;
const DRAG_TRIGGER_TIME = 200; // 表头 styleId

exports.DRAG_TRIGGER_TIME = DRAG_TRIGGER_TIME;
const TABLE_HEADER_STYLE_ID = 'tableHeader';
exports.TABLE_HEADER_STYLE_ID = TABLE_HEADER_STYLE_ID;
const DEFAULT_TABLE_ALIGNMENT = 'middle';
exports.DEFAULT_TABLE_ALIGNMENT = DEFAULT_TABLE_ALIGNMENT;
//# sourceMappingURL=constants.js.map