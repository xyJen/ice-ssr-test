"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createContextMenu;

var _types = require("./types");

var _actions = require("./actions");

var _createTableSelectionForFocusedCell = _interopRequireDefault(require("./utils/createTableSelectionForFocusedCell"));

var _canInsertTable = require("./queries/canInsertTable");

var _getDataTableSelectionByTable = _interopRequireDefault(require("./utils/getDataTableSelectionByTable"));

var _models = _interopRequireDefault(require("../mo/models"));

function isCutAllowed(controller) {
  const {
    document,
    selection
  } = controller.value;
  const {
    isExpanded,
    anchor,
    focus
  } = selection; // 选区中全部是单元格, 允许剪切

  const hasTableSelection = controller.query('hasTableSelection');
  if (hasTableSelection) return true;
  const isAnchorInCell = (0, _canInsertTable.isKeyInCell)(document, anchor.key);
  const isFocusInCell = (0, _canInsertTable.isKeyInCell)(document, focus.key);

  if (isAnchorInCell || isFocusInCell) {
    const anchorCell = document.getClosest(anchor.key, _types.isTableCell);
    const focusCell = document.getClosest(focus.key, _types.isTableCell); // 选中同一个单元格内的内容时， 允许剪切

    return isExpanded && anchorCell?.key === focusCell?.key;
  }

  return true;
}

function isCopyAllowed(controller) {
  return controller.query('hasTableSelection');
}

function createContextMenu() {
  return function contextMenuPlugin(pluginConfig) {
    const {
      locale = {}
    } = pluginConfig;
    return function contextMenu(controller, next) {
      const menus = [];
      const {
        value
      } = controller;
      const {
        document,
        focusBlock
      } = value;
      const table = focusBlock?.key && (focusBlock?.type === 'table' ? focusBlock : document.getClosest(focusBlock.key, _types.isTable));

      if (table && !table.data.sr) {
        const queryTbSelection = (0, _getDataTableSelectionByTable.default)(controller, table);
        const isSelectionSupportMerge = controller.query('isSelectionSupportMerge', {
          visible: true,
          node: table
        });
        const isSelectionSupportSplit = controller.query('isSelectionSupportSplit', {
          visible: true,
          node: table
        });
        const selection = queryTbSelection || (0, _createTableSelectionForFocusedCell.default)(value, table);

        if (selection && table.data?.colsWidth) {
          const endColIndex = selection ? selection.endColIndex : table.nodes[0].nodes.length - 1;
          const targetColIndex = endColIndex + 1;
          const rightColWidth = table.data.colsWidth[endColIndex];
          const leftColWidth = table.data.colsWidth[selection.startColIndex];

          const disableInsertRowAbove = selection.startRowIndex === 0 && _models.default.isRowHeader(table);

          const disableInsertColLeft = selection.startColIndex === 0 && _models.default.isColumnHeader(table);

          menus.push({
            name: locale.contextMenuMerge,
            action: (0, _actions.mergeTableCells)(table),
            key: 'merge-cells',
            options: {
              disable: !isSelectionSupportMerge,
              group: 3,
              mobile: false
            }
          }, {
            name: locale.contextMenuSplit,
            action: (0, _actions.splitTableCell)(table),
            key: 'split-cell',
            options: {
              disable: !isSelectionSupportSplit,
              group: 3,
              mobile: false
            }
          }, {
            name: locale.contextMenuInsertAbove,
            action: (0, _actions.insertTableRowBySelections)(table, 'insert-row-above'),
            key: 'insert-row-above',
            options: {
              disable: disableInsertRowAbove,
              group: 4,
              mobile: false
            }
          }, {
            name: locale.contextMenuInsertBelow,
            action: (0, _actions.insertTableRowBySelections)(table, 'insert-row-below'),
            key: 'insert-row-below',
            options: {
              group: 4,
              mobile: false
            }
          }, {
            name: locale.contextMenuInsertLeft,
            action: (0, _actions.insertTableCol)(table, selection.startColIndex, selection.startColIndex, leftColWidth),
            key: 'insert-col-left',
            options: {
              disable: disableInsertColLeft,
              group: 4,
              mobile: false
            }
          }, {
            name: locale.contextMenuInsertRight,
            action: (0, _actions.insertTableCol)(table, targetColIndex, endColIndex, rightColWidth),
            key: 'insert-col-right',
            options: {
              group: 4,
              mobile: false
            }
          }, {
            name: locale.contextMenuDeleteRow,
            action: (0, _actions.deleteTableRows)(table),
            key: 'delete-rows',
            options: {
              group: 5,
              mobile: false
            }
          }, {
            name: locale.contextMenuDeleteCol,
            action: (0, _actions.deleteTableCols)(table),
            key: 'delete-cols',
            options: {
              group: 5,
              mobile: false
            }
          }, {
            name: locale.contextMenuDeleteTable,
            action: (0, _actions.deleteTable)(table),
            key: 'delete-table',
            options: {
              group: 5,
              mobile: false
            }
          });
        }
      }

      let others = next() || [];
      others = others.map(contextMenuItem => {
        // 选区中包含表格的部分单元格时, 不允许剪切
        if (contextMenuItem.key === 'cut' && !isCutAllowed(controller) && contextMenuItem.options) {
          contextMenuItem.options.disable = true;
        } // 有表格选区时允许复制


        if (contextMenuItem.key === 'copy' && isCopyAllowed(controller) && contextMenuItem.options) {
          contextMenuItem.options.disable = false;
        }

        return contextMenuItem;
      });
      return menus.concat(others);
    };
  };
}
//# sourceMappingURL=createContextMenu.js.map