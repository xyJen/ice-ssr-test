"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _fastdom = _interopRequireDefault(require("fastdom"));

var _constants = require("../../constants");

var _calcTableSelectionPos = _interopRequireDefault(require("../../utils/calcTableSelectionPos"));

var _constants2 = _interopRequireDefault(require("../../../utils/constants"));

const _createElement = /*#__PURE__*/React.createElement;
const {
  STICKY_TOOLBAR_INDEX_MAP
} = _constants2.default;

const TableSelectionRect = /*#__PURE__*/_styledComponents.default.div(["position:absolute;z-index:100;pointer-events:none;outline-offset:-2px;box-sizing:border-box;border:1px solid ", ";background-color:", ";"], _constants.THEME.blue3, _constants.THEME.blue0);

const SelectionRect = props => {
  const {
    tableSelection,
    table,
    tableRef,
    scale,
    colsWidth,
    style: propsStyle = {},
    testid = '',
    forceUpdate
  } = props;
  const [style, setStyle] = React.useState({});
  const prevDisplayRef = React.useRef();
  const measureTaskRef = React.useRef();
  const draw = React.useCallback(tblSelection => {
    measureTaskRef.current && _fastdom.default.clear(measureTaskRef.current);
    measureTaskRef.current = _fastdom.default.measure(() => {
      if (!tblSelection) {
        if (prevDisplayRef.current !== 'none') {
          setStyle({
            display: 'none'
          });
        }

        return;
      }

      const pos = (0, _calcTableSelectionPos.default)({
        tblSelection,
        table,
        tableNode: tableRef.current,
        scale,
        colsWidth
      });

      if (pos) {
        setStyle({ ...pos,
          display: 'block'
        });
      } else {
        setStyle({
          display: 'none'
        });
      }
    });
    return () => {
      measureTaskRef.current && _fastdom.default.clear(measureTaskRef.current);
    };
  }, [table, scale, tableRef, colsWidth]);
  React.useLayoutEffect(() => {
    draw(tableSelection);
  }, [draw, tableSelection, forceUpdate]);
  const zIndex = React.useMemo(() => {
    if (tableSelection && tableSelection.startRowIndex !== 0) {
      // selection 不包含首行时，selection zIndex 要低于首行
      // 保证首行吸顶时，滚动文档，选区不遮挡首行
      return STICKY_TOOLBAR_INDEX_MAP.selection;
    }

    return STICKY_TOOLBAR_INDEX_MAP.stickyRow + 1;
  }, [tableSelection]);
  return /*#__PURE__*/_createElement(TableSelectionRect, {
    "data-testid": testid,
    style: { ...propsStyle,
      ...style,
      zIndex
    }
  });
};

var _default = SelectionRect;
exports.default = _default;
//# sourceMappingURL=selectionRect.js.map