"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireDefault(require("../../../mo/models"));

var _weIcon = require("@ali/we-icon");

var _weDesign = require("@ali/we-design");

var _constants = require("../../constants");

var _actions = require("../../actions");

var _everComponent = require("@ali/4ever-component");

var _everPluginDraggable = require("@ali/4ever-plugin-draggable");

var _tableHeaderIcon = _interopRequireDefault(require("./tableHeaderIcon"));

var _constants2 = _interopRequireDefault(require("../../../utils/constants"));

var hooks = _interopRequireWildcard(require("../../../utils/hooks"));

/* eslint-disable react/no-unused-prop-types */
const _createElement = /*#__PURE__*/React.createElement;
// menu 菜单点击后不需要关闭的menuKey选项白名单
const MENU_ITEM_WHITE_LIST = ['table-autofit'];
const {
  useRowIsSticky,
  useScrollableContainerRect
} = hooks;
const {
  REALTABLE_PADDING,
  STICKY_ROW_TOP_HEIGHT,
  STICKY_TOOLBAR_INDEX_MAP
} = _constants2.default;
const ICON_SIZE = 16;
const GAP_X = 8;
const GAP_Y = 8;
const LEFT_OFFSET = -(ICON_SIZE + GAP_X);

const CornerToolbar = /*#__PURE__*/_styledComponents.default.div(["box-sizing:border-box;position:absolute;cursor:default;color:transparent;width:", "px;height:", "px;top:-", "px;left:", "px;line-height:0;font-size:", "px;z-index:1;transform-origin:left top;*{box-sizing:border-box;}"], props => Math.round(ICON_SIZE / props.scale), props => Math.round(ICON_SIZE / props.scale), props => (GAP_Y + ICON_SIZE - _constants.TOOLBAR_ITEM_SIZE - REALTABLE_PADDING.top) / props.scale, props => Math.round(LEFT_OFFSET / props.scale), ICON_SIZE);

var _ref = /*#__PURE__*/_createElement(_weIcon.AdaptNormal, null);

var _ref3 = /*#__PURE__*/_createElement(_weIcon.AdaptNormal, null);

var _ref4 = /*#__PURE__*/_createElement(_tableHeaderIcon.default, null);

const TableCornerToolbar = props => {
  const {
    controller,
    visible,
    locale,
    table,
    scale,
    isSelectWholeTable,
    onSelect,
    onMouseEnter,
    onMouseLeave,
    draggableConfig,
    enableAutofitWidth,
    enableHeader,
    setTableHeaderStyle
  } = props;
  const [isSticky] = useRowIsSticky();
  const [scrollRect] = useScrollableContainerRect();
  const timer = React.useRef(null);
  const handleStopPropagation = React.useCallback(event => {
    event.stopPropagation();
  }, []);

  const isAutofit = _models.default.isAutofitWidth(table);

  const handleAutoFit = React.useCallback(() => {
    // 无论是否命中灰度，只要是自适应
    if (isAutofit) {
      controller.run('onAction', (0, _actions.setTableAutofitWidthDisable)(table));
    } else if (enableAutofitWidth && enableAutofitWidth()) {
      controller.run('onAction', (0, _actions.setTableAutofitWidthEnable)(table));
    } else {
      controller.run('onAction', (0, _actions.resizeTableWidthFitContainer)(table));
    }

    controller.run('onAction', (0, _actions.selectTable)(table));
  }, [isAutofit, enableAutofitWidth, controller, table]);
  const handleMouseOver = React.useCallback(e => {
    handleStopPropagation(e);

    if (timer && timer.current) {
      clearTimeout(timer.current);
      timer.current = null;
    }

    onMouseEnter();
  }, [onMouseEnter, handleStopPropagation]);
  const handleMouseLeave = React.useCallback(e => {
    handleStopPropagation(e);
    timer.current = setTimeout(() => {
      onMouseLeave();
    }, 200);
  }, [onMouseLeave, handleStopPropagation]);
  React.useEffect(() => {
    if (timer && timer.current) {
      clearTimeout(timer.current);
    }
  }, []);
  const handleToggleRowHeader = React.useCallback((_, e) => {
    e.preventDefault();
    e.stopPropagation();
    const {
      selection
    } = controller.value;

    if (_models.default.isRowHeader(table)) {
      controller.run('onAction', (0, _actions.removeTableRowHeader)(table));
    } else {
      // NOTE: 需要先执行 setTableHeaderStyle
      setTableHeaderStyle?.();
      controller.run('onAction', (0, _actions.setTableRowHeader)(table));
    }

    controller.command(_everCangjie.Commands.select, selection);
  }, [controller, table, setTableHeaderStyle]);
  const handleToggleColHeader = React.useCallback(() => {
    const {
      selection
    } = controller.value;

    if (_models.default.isColumnHeader(table)) {
      controller.run('onAction', (0, _actions.removeTableColHeader)(table));
    } else {
      // NOTE: 需要先执行 setTableHeaderStyle
      setTableHeaderStyle?.();
      controller.run('onAction', (0, _actions.setTableColHeader)(table));
    }

    controller.command(_everCangjie.Commands.select, selection);
  }, [controller, table, setTableHeaderStyle]);

  var _ref2 = /*#__PURE__*/_createElement(_weDesign.Switch, {
    testid: "table-autofit-switch",
    checked: isAutofit,
    size: "small",
    onChange: handleAutoFit
  });

  const customizeMenus = React.useMemo(() => {
    const menus = [];

    if (enableAutofitWidth && enableAutofitWidth() || isAutofit) {
      menus.push({
        type: _everComponent.TYPE_MENU_ITEM,
        testid: 'table-autofit-menu-item',
        title: locale?.widthFitContainer,
        icon: _ref,
        menuKey: 'table-autofit',
        hoverable: false,
        autoClose: false,
        extra: _ref2
      });
    } else {
      menus.push({
        type: _everComponent.TYPE_MENU_ITEM,
        title: locale?.widthFitContainer,
        icon: _ref3,
        onClick: handleAutoFit
      });
    }

    if (enableHeader && enableHeader()) {
      menus.push({
        type: _everComponent.TYPE_SUB_MENU,
        testid: 'table-header-sub-menu',
        title: /*#__PURE__*/_createElement(_everComponent.MenuTitleWithNewBadge, {
          title: locale?.tableHeader
        }),
        icon: _ref4,
        menus: [{
          type: _everComponent.TYPE_MENU_ITEM,
          testid: 'table-header-row-menu-item',
          title: locale?.rowHeader,
          extra: _models.default.isRowHeader(table) ? /*#__PURE__*/_createElement(_weIcon.SelectedNormalNormal, {
            pathColors: ['#171A1D']
          }) : null,
          onClick: handleToggleRowHeader,
          menuKey: 'table-header-row'
        }, {
          type: _everComponent.TYPE_MENU_ITEM,
          testid: 'table-header-column-menu-item',
          title: locale?.columnHeader,
          extra: _models.default.isColumnHeader(table) ? /*#__PURE__*/_createElement(_weIcon.SelectedNormalNormal, {
            pathColors: ['#171A1D']
          }) : null,
          onClick: handleToggleColHeader,
          menuKey: 'table-header-col'
        }]
      });
    }

    return menus;
  }, [enableAutofitWidth, enableHeader, handleAutoFit, handleToggleColHeader, handleToggleRowHeader, isAutofit, locale?.columnHeader, locale?.rowHeader, locale?.tableHeader, locale?.widthFitContainer, table]);
  const style = React.useMemo(() => {
    if (!visible) {
      return {
        display: 'none'
      };
    }

    const ret = {
      display: 'block'
    };

    if (isSticky) {
      ret.position = 'fixed';
      ret.top = STICKY_ROW_TOP_HEIGHT + scrollRect.top - GAP_Y - ICON_SIZE;
      ret.zIndex = STICKY_TOOLBAR_INDEX_MAP.cornerToolbar;
      ret.left = Number.isFinite(scrollRect.left) ? scrollRect.left : 'unset';
      ret.transform = `translateX(${LEFT_OFFSET}px)`;
    }

    return ret;
  }, [isSticky, scrollRect, visible]);
  const handleMenuItemClick = React.useCallback((menuKey, setMenuVisible) => {
    const canMenuVisible = MENU_ITEM_WHITE_LIST.includes(menuKey);

    if (!canMenuVisible) {
      setMenuVisible(false);
    }

    onMouseLeave();
  }, [onMouseLeave]);
  return /*#__PURE__*/_createElement(CornerToolbar, {
    style: style,
    role: "toolbar",
    "data-testid": "table-corner-toobar-button",
    "data-sticky": isSticky,
    scale: scale,
    onMouseLeave: handleMouseLeave,
    onMouseOver: handleMouseOver,
    onContextMenu: handleStopPropagation,
    onMouseDown: handleStopPropagation,
    onTouchStart: handleStopPropagation,
    onMouseUp: handleStopPropagation // 防止触发 Cangjie 选区事件

  }, /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(_everPluginDraggable.DragDropdown, {
    controller: controller,
    currentBlock: table,
    draggableConfig: draggableConfig,
    scale: scale // @ts-ignore
    ,
    customizeMenus: customizeMenus,
    handleClickMenuItem: handleMenuItemClick,
    active: isSelectWholeTable,
    onClickIcon: onSelect
  })));
};

var _default = TableCornerToolbar;
exports.default = _default;
//# sourceMappingURL=index.js.map