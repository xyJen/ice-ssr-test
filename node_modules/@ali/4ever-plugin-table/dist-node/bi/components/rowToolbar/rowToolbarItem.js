"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _constants = require("../../../utils/constants");

var hooks = _interopRequireWildcard(require("../../../utils/hooks"));

var _rowColToolbarItemRect = require("../rowColToolbarItemRect");

const _createElement = /*#__PURE__*/React.createElement;
const {
  useScrollableContainerRect
} = hooks;

const RowToolbarItem = props => {
  const {
    style: propsStyle = {},
    index,
    table,
    rowHeight,
    scale = 1,
    isSticky,
    deleteRange,
    selectRanges,
    activeRange,
    width,
    children,
    ...rest
  } = props;
  const [scrollRect] = useScrollableContainerRect();
  const rowsLength = table.nodes.length;
  const style = {
    height: index === 0 ? rowHeight / scale + 1 : rowHeight / scale,
    width: _constants.TOOLBAR_ITEM_SIZE / scale,
    borderBottomLeftRadius: index === rowsLength - 1 ? 3 / scale : '',
    ...propsStyle
  };
  const wrapperStyle = {};
  const borderLeftWidth = 10;

  if (isSticky && index === 0) {
    wrapperStyle.borderLeft = `${borderLeftWidth}px solid white`;
    wrapperStyle.transform = `translateX(-${borderLeftWidth}px)`;
    wrapperStyle.position = 'fixed';
    wrapperStyle.top = `${scrollRect.top}px`;

    if (Number.isFinite(scrollRect.left)) {
      wrapperStyle.left = `${scrollRect.left - width}px`;
    }

    wrapperStyle.zIndex = 2;
    wrapperStyle.borderTop = `${_constants.STICKY_ROW_TOP_HEIGHT}px solid white`;
    wrapperStyle.borderRight = '1px solid white';
  }

  return /*#__PURE__*/_createElement("div", {
    key: index,
    style: wrapperStyle
  }, /*#__PURE__*/_createElement(_rowColToolbarItemRect.RowColToolbarItemRect, (0, _extends2.default)({
    index: index,
    type: "row",
    length: rowsLength,
    style: style,
    activeRange: activeRange,
    selectRanges: selectRanges,
    deleteRange: deleteRange
  }, rest), children));
};

var _default = RowToolbarItem;
exports.default = _default;
//# sourceMappingURL=rowToolbarItem.js.map