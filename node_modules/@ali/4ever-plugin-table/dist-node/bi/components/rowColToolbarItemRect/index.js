"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RowColToolbarItemRect = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("../../constants");

const _createElement = /*#__PURE__*/React.createElement;

const ToolbarItemBox = /*#__PURE__*/_styledComponents.default.div(["position:relative;box-sizing:border-box;cursor:default;"]);

const RowColToolbarItemRect = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    style: propsStyle = {},
    type,
    index,
    length,
    deleteRange,
    selectRanges,
    activeRange,
    ...rest
  } = props;

  const isSelected = i => selectRanges && selectRanges.findIndex(range => i >= range.start && i <= range.end) !== -1;

  const getBgColor = i => {
    if (deleteRange && i >= deleteRange.start && i <= deleteRange.end) {
      return 'rgba(255, 0, 0, 0.67)';
    }

    if (isSelected(i)) {
      return 'rgb(138, 185, 252)';
    }

    if (activeRange && i >= activeRange.start && i <= activeRange.end) {
      return 'rgb(233, 233, 235)';
    }

    return _constants.THEME.toolbarBgColor.default;
  };

  const getBorderColor = i => {
    if (deleteRange && i >= deleteRange.start && i <= deleteRange.end) {
      return _constants.THEME.red1;
    }

    if (isSelected(i)) {
      return _constants.THEME.blue3;
    }

    return _constants.THEME.toolbarBorderColor;
  };

  const getMiddleBorderColor = i => {
    if (i === length - 1) return getBorderColor(i);

    if (deleteRange) {
      if (i === deleteRange.start - 1 || i === deleteRange.end) {
        return _constants.THEME.red1;
      } else if (i >= deleteRange.start && i <= deleteRange.end) {
        return 'rgb(243, 94, 91, .4)';
      }
    }

    if (selectRanges) {
      if (selectRanges.find(range => range.start - 1 === i || i === range.end)) {
        // if (i === selectRange.start - 1 || i === selectRange.end) {
        return _constants.THEME.blue3;
      } else if (isSelected(i)) {
        return '#7ba9ec';
      }
    }

    return _constants.THEME.toolbarBorderColor;
  };

  const style = {
    backgroundColor: getBgColor(index)
  };
  const borderStyle = `1px solid ${getBorderColor(index)}`;

  if (type === 'row') {
    style.borderTop = index === 0 ? borderStyle : '';
    style.borderBottom = `1px solid ${getMiddleBorderColor(index)}`;
    style.borderLeft = borderStyle;
    style.boxShadow = `1px 0px 0px 0px ${getBorderColor(index)}`;
  } else if (type === 'col') {
    style.borderRight = `1px solid ${getMiddleBorderColor(index)}`;
    style.borderTop = borderStyle;
    style.borderLeft = index === 0 ? borderStyle : '';
  }

  const dataFlags = {
    [`data-cangjie-${type}-toolbar-item`]: true
  };
  return /*#__PURE__*/_createElement(ToolbarItemBox, (0, _extends2.default)({
    ref: ref,
    key: index,
    "data-index": index,
    "data-ob": "true",
    "data-testid": `table-${type}-toolbar-item`
  }, dataFlags, {
    style: { ...style,
      ...propsStyle
    }
  }, rest), props.children);
});
exports.RowColToolbarItemRect = RowColToolbarItemRect;
//# sourceMappingURL=index.js.map