{"version":3,"sources":["../../../../../src/bi/components/rowColToolbarItemRect/index.tsx"],"names":["ToolbarItemBox","styled","div","RowColToolbarItemRect","React","forwardRef","props","ref","style","propsStyle","type","index","length","deleteRange","selectRanges","activeRange","rest","isSelected","i","findIndex","range","start","end","getBgColor","THEME","toolbarBgColor","default","getBorderColor","red1","blue3","toolbarBorderColor","getMiddleBorderColor","find","backgroundColor","borderStyle","borderTop","borderBottom","borderLeft","boxShadow","borderRight","dataFlags","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { THEME } from '../../constants';\n\nconst ToolbarItemBox = styled.div`\n  position: relative;\n  box-sizing: border-box;\n  cursor: default;\n`;\n\nexport interface Range {\n  start: number;\n  end: number;\n}\n\ntype Props = {\n  index: number;\n  length: number;\n  type: 'row' | 'col';\n  // 选区所在行列\n  activeRange?: Range | null;\n  // 选中行列、hover 行列\n  selectRanges?: Range[] | null;\n  // 删除行列范围\n  deleteRange?: Range | null;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nexport const RowColToolbarItemRect = React.forwardRef<HTMLDivElement, Props>((props, ref) => {\n  const {\n    style: propsStyle = {},\n    type,\n    index,\n    length,\n    deleteRange,\n    selectRanges,\n    activeRange,\n    ...rest\n  } = props;\n\n  const isSelected = (i: number) =>\n    selectRanges &&\n    selectRanges.findIndex((range) => i >= range.start && i <= range.end) !==\n      -1;\n\n  const getBgColor = (i: number) => {\n    if (deleteRange && i >= deleteRange.start && i <= deleteRange.end) {\n      return 'rgba(255, 0, 0, 0.67)';\n    }\n    if (isSelected(i)) {\n      return 'rgb(138, 185, 252)';\n    }\n    if (activeRange && i >= activeRange.start && i <= activeRange.end) {\n      return 'rgb(233, 233, 235)';\n    }\n    return THEME.toolbarBgColor.default;\n  };\n\n  const getBorderColor = (i: number) => {\n    if (deleteRange && i >= deleteRange.start && i <= deleteRange.end) {\n      return THEME.red1;\n    }\n    if (isSelected(i)) {\n      return THEME.blue3;\n    }\n    return THEME.toolbarBorderColor;\n  };\n\n  const getMiddleBorderColor = (i: number) => {\n    if (i === length - 1) return getBorderColor(i);\n\n    if (deleteRange) {\n      if (i === deleteRange.start - 1 || i === deleteRange.end) {\n        return THEME.red1;\n      } else if (i >= deleteRange.start && i <= deleteRange.end) {\n        return 'rgb(243, 94, 91, .4)';\n      }\n    }\n    if (selectRanges) {\n      if (selectRanges.find((range) => (range.start - 1 === i || i === range.end))) {\n      // if (i === selectRange.start - 1 || i === selectRange.end) {\n        return THEME.blue3;\n      } else if (isSelected(i)) {\n        return '#7ba9ec';\n      }\n    }\n    return THEME.toolbarBorderColor;\n  };\n\n  const style: React.CSSProperties = {\n    backgroundColor: getBgColor(index),\n  };\n  const borderStyle = `1px solid ${getBorderColor(index)}`;\n  if (type === 'row') {\n    style.borderTop = index === 0 ? borderStyle : '';\n    style.borderBottom = `1px solid ${getMiddleBorderColor(index)}`;\n    style.borderLeft = borderStyle;\n    style.boxShadow = `1px 0px 0px 0px ${getBorderColor(index)}`;\n  } else if (type === 'col') {\n    style.borderRight = `1px solid ${getMiddleBorderColor(index)}`;\n    style.borderTop = borderStyle;\n    style.borderLeft = index === 0 ? borderStyle : '';\n  }\n\n  const dataFlags = {\n    [`data-cangjie-${type}-toolbar-item`]: true,\n  };\n\n  return (\n    <ToolbarItemBox\n      ref={ref}\n      key={index}\n      data-index={index}\n      data-ob=\"true\"\n      data-testid={`table-${type}-toolbar-item`}\n      {...dataFlags}\n      style={{ ...style, ...propsStyle }}\n      {...rest}\n    >\n      {props.children}\n    </ToolbarItemBox>\n  );\n});\n"],"file":"index.js"}