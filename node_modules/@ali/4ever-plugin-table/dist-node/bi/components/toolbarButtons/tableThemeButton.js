"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TableThemeButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _weToolbar = require("@ali/we-toolbar");

var _weDesign = require("@ali/we-design");

var _everComponent = require("@ali/4ever-component");

var _role = require("../../../utils/role");

var _actions = require("../../actions");

var _getTable = _interopRequireDefault(require("../../utils/getTable"));

var _getTableSelection = _interopRequireDefault(require("../../utils/getTableSelection"));

var _constants = require("../../../utils/constants");

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_everComponent.IconPalette, null);

function TableThemeButton(props) {
  const {
    controller,
    locale,
    ...rest
  } = props;
  const {
    value
  } = controller;
  const table = (0, _getTable.default)(value);
  const selection = (0, _getTableSelection.default)(controller);
  const [isVisible, setVisible] = React.useState(false);
  let isDisabled = !(selection && table);
  const {
    backgroundColor,
    borderColor
  } = controller.query('getTableSelectionTheme') || {};
  const handleTableBorderColor = React.useCallback(color => {
    const val = _constants.lineMap['Thin'].lineType;
    const sz = _constants.lineMap['Thin'].size;
    const layout = 'all';

    if (table) {
      controller.run('onAction', (0, _actions.setTableBorder)(table, selection, layout, color, sz, val));
    }
  }, [controller, table, selection]);
  const handleTableBgColorChange = React.useCallback(fill => {
    controller.run('onAction', (0, _actions.setTableCellFill)(table, selection, fill));
  }, [controller, table, selection]);
  const handleReset = React.useCallback(() => {
    handleTableBorderColor(_constants.DEFAULT_BORDER_COLOR);
    handleTableBgColorChange('');
    setVisible(false);
    return false;
  }, [handleTableBorderColor, handleTableBgColorChange]);
  return /*#__PURE__*/_createElement(_weToolbar.IconMenu, (0, _extends2.default)({}, rest, {
    tooltip: locale?.borderAndFillColor || 'Border and background color',
    testid: "bi-toolbar-table-theme",
    disabled: isDisabled,
    role: _role.TableRole.tableTheme,
    icon: _ref,
    visible: isVisible,
    onVisibleChange: setVisible,
    autoClose: false,
    overlay: /*#__PURE__*/_createElement(_weDesign.ColorPanel, {
      backgroundColor: backgroundColor,
      onBackgroundColorClick: handleTableBgColorChange,
      borderColor: borderColor,
      onBorderColorClick: handleTableBorderColor,
      enableResetButton: true,
      onResetButtonClick: handleReset
    })
  }));
}
//# sourceMappingURL=tableThemeButton.js.map