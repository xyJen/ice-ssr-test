"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TablePickerButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _everComponent = require("@ali/4ever-component");

var _role = require("../../../../utils/role");

var _isSelectionInTableCell = _interopRequireDefault(require("../../../utils/isSelectionInTableCell"));

var _actions = require("../../../actions");

const _createElement = /*#__PURE__*/React.createElement;

var _ref2 = /*#__PURE__*/_createElement(_everComponent.IconTable, null);

function TablePickerButton(props) {
  const {
    controller,
    locale,
    tooltip: tooltipProp,
    ...rest
  } = props;
  const {
    value
  } = controller;
  const tableSelection = controller.query('hasTableSelection'); // @ts-ignore

  const isDisabled = value.selection.isBlurred || value.data.edgeSelection || tableSelection || (0, _isSelectionInTableCell.default)(value) || controller.query('isSelectionInLink') || controller.query('isSelectionInMention') || controller.query('isSelectionInListSymbol');
  const [isOverlayVisible, setOverlayVisible] = React.useState(false);
  const handleChange = React.useCallback((row, col) => {
    controller.run('onAction', (0, _actions.insertTable)(row, col));
    setOverlayVisible(false);
  }, [controller]);

  var _ref = /*#__PURE__*/_createElement(_weDesign.TablePanel, {
    row: 10,
    col: 10,
    onPick: handleChange
  });

  const tablePanel = React.useMemo(() => _ref, [handleChange]);
  const tooltip = React.useMemo(() => ({
    title: locale?.quickInsertTitle,
    ...tooltipProp
  }), []);
  return /*#__PURE__*/_createElement(_everComponent.IconMenu, (0, _extends2.default)({
    testid: "bi-toolbar-table-picker",
    overlayVisible: isOverlayVisible,
    onVisibleChange: setOverlayVisible,
    overlay: tablePanel,
    disabled: isDisabled,
    role: _role.TableRole.tablePicker,
    icon: _ref2,
    title: locale?.quickInsertTitle,
    tooltip: tooltip
  }, rest));
}
//# sourceMappingURL=tablePickerButton.js.map