"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TableVAlignButton;
exports.DEFAULT_TABLE_ALIGNMENT = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _role = require("../../../../utils/role");

var _getTable = _interopRequireDefault(require("../../../utils/getTable"));

var _getTableSelection = _interopRequireDefault(require("../../../utils/getTableSelection"));

var _actions = require("../../../actions");

var _getVAlign = _interopRequireDefault(require("../../../utils/getVAlign"));

var _everComponent = require("@ali/4ever-component");

const _createElement = /*#__PURE__*/React.createElement;
const SUPPORT_ALIGNMENT = {
  middle: true,
  top: true,
  bottom: true
};
const DEFAULT_TABLE_ALIGNMENT = 'middle';
exports.DEFAULT_TABLE_ALIGNMENT = DEFAULT_TABLE_ALIGNMENT;

function TableVAlignButton(props) {
  const {
    controller,
    locale,
    options,
    ...rest
  } = props;
  let alignment = (0, _getVAlign.default)(controller);
  alignment = SUPPORT_ALIGNMENT[alignment] ? alignment : DEFAULT_TABLE_ALIGNMENT;
  const selection = (0, _getTableSelection.default)(controller);
  let tip = locale.vAlignMiddle;

  if (alignment === 'top') {
    tip = locale.vAlignTop;
  } else if (alignment === 'bottom') {
    tip = locale.vAlignBottom;
  }

  const handleChange = React.useCallback(vAlign => {
    const table = (0, _getTable.default)(controller.value);
    controller.run('onAction', (0, _actions.setTableCellVAlign)(table, selection, vAlign));
  }, [selection]);
  const selectOptions = React.useMemo(() => ({
    top: {
      title: options?.top?.title || locale.vAlignTop,
      icon: options?.top?.icon
    },
    middle: {
      title: options?.middle?.title || locale.vAlignMiddle,
      icon: options?.middle?.icon
    },
    bottom: {
      title: options?.bottom?.title || locale.vAlignBottom,
      icon: options?.bottom?.icon
    }
  }), [locale, options]);
  return /*#__PURE__*/_createElement(_everComponent.VerticalAlignSelect, (0, _extends2.default)({
    tooltip: tip,
    testid: "bi-toolbar-valign",
    options: selectOptions,
    value: alignment,
    disabled: !selection,
    onChange: handleChange,
    role: _role.TableRole.tableVAlignSelect
  }, rest));
}
//# sourceMappingURL=tableVAlignButton.js.map