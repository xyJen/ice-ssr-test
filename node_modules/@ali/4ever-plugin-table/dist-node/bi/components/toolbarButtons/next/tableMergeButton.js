"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TableMergeButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _role = require("../../../../utils/role");

var _actions = require("../../../actions");

var _getTable = _interopRequireDefault(require("../../../utils/getTable"));

var _getTableSelection = _interopRequireDefault(require("../../../utils/getTableSelection"));

var _everComponent = require("@ali/4ever-component");

const _createElement = /*#__PURE__*/_react.default.createElement;

function TableMergeButton(props) {
  const {
    controller,
    locale,
    disabled,
    ...rest
  } = props;
  const table = (0, _getTable.default)(controller.value);
  const selection = (0, _getTableSelection.default)(controller);

  const isSelectionSupportSplit = _react.default.useMemo(() => {
    return !!table && controller.query('isSelectionSupportSplit', {
      visible: true,
      node: table
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [table, selection, controller]);

  const isSelectionSupportMerge = _react.default.useMemo(() => {
    return !!table && controller.query('isSelectionSupportMerge', {
      visible: true,
      node: table
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [table, selection, controller]);

  let canMergeOrUnmerge = false;
  let status;
  let tooltip = '';

  if (isSelectionSupportMerge) {
    status = 'unmerged';
    tooltip = locale?.contextMenuMerge || '';
  } else if (isSelectionSupportSplit) {
    status = 'merged';
    tooltip = locale?.toastUnmerge || '';
  } else {
    canMergeOrUnmerge = true;
  }

  const handleChange = (0, _react.useCallback)(value => {
    if (value === 'merged') {
      controller.run('onAction', (0, _actions.mergeTableCells)(table));
    } else if (value === 'unmerged') {
      controller.run('onAction', (0, _actions.splitTableCell)(table));
    }
  }, [table, controller]);
  const options = (0, _react.useMemo)(() => ({
    merged: {
      title: locale?.contextMenuMerge || ''
    },
    unmerged: {
      title: locale?.contextMenuSplit || ''
    }
  }), [locale]);
  return /*#__PURE__*/_createElement(_everComponent.TableMergeButton, (0, _extends2.default)({
    testid: "bi-toolbar-tablemerge",
    disabled: canMergeOrUnmerge || disabled,
    onChange: handleChange,
    onClick: handleChange,
    options: options,
    value: status,
    role: _role.TableRole.tableMerge,
    tooltip: tooltip
  }, rest));
}
//# sourceMappingURL=tableMergeButton.js.map