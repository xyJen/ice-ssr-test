{"version":3,"sources":["../../../../../../src/bi/components/toolbarButtons/next/tableMergeButton.tsx"],"names":["TableMergeButton","props","controller","locale","disabled","rest","table","value","selection","isSelectionSupportSplit","React","useMemo","query","visible","node","isSelectionSupportMerge","canMergeOrUnmerge","status","tooltip","contextMenuMerge","toastUnmerge","handleChange","run","options","merged","title","unmerged","contextMenuSplit","PluginRoles","tableMerge"],"mappings":";;;;;;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;AACA;;AACA;;uBAN4B,a;;AAab,SAASA,gBAAT,CAA0BC,KAA1B,EAAwD;AACrE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,QAAtB;AAAgC,OAAGC;AAAnC,MAA4CJ,KAAlD;AACA,QAAMK,KAAK,GAAG,uBAASJ,UAAU,CAACK,KAApB,CAAd;AACA,QAAMC,SAAS,GAAG,gCAAkBN,UAAlB,CAAlB;;AACA,QAAMO,uBAAuB,GAAGC,eAAMC,OAAN,CAAc,MAAM;AAClD,WAAO,CAAC,CAACL,KAAF,IACFJ,UAAU,CAACU,KAAX,CAAiB,yBAAjB,EAA4C;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,IAAI,EAAER;AAAvB,KAA5C,CADL,CADkD,CAGpD;AACC,GAJ+B,EAI7B,CAACA,KAAD,EAAQE,SAAR,EAAmBN,UAAnB,CAJ6B,CAAhC;;AAKA,QAAMa,uBAAuB,GAAGL,eAAMC,OAAN,CAAc,MAAM;AAClD,WAAO,CAAC,CAACL,KAAF,IACFJ,UAAU,CAACU,KAAX,CAAiB,yBAAjB,EAA4C;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,IAAI,EAAER;AAAvB,KAA5C,CADL,CADkD,CAGpD;AACC,GAJ+B,EAI7B,CAACA,KAAD,EAAQE,SAAR,EAAmBN,UAAnB,CAJ6B,CAAhC;;AAMA,MAAIc,iBAAiB,GAAG,KAAxB;AACA,MAAIC,MAAJ;AACA,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAIH,uBAAJ,EAA6B;AAC3BE,IAAAA,MAAM,GAAG,UAAT;AACAC,IAAAA,OAAO,GAAGf,MAAM,EAAEgB,gBAAR,IAA4B,EAAtC;AACD,GAHD,MAGO,IAAIV,uBAAJ,EAA6B;AAClCQ,IAAAA,MAAM,GAAG,QAAT;AACAC,IAAAA,OAAO,GAAGf,MAAM,EAAEiB,YAAR,IAAwB,EAAlC;AACD,GAHM,MAGA;AACLJ,IAAAA,iBAAiB,GAAG,IAApB;AACD;;AAED,QAAMK,YAAY,GAAG,wBAAad,KAAD,IAA4B;AAC3D,QAAIA,KAAK,KAAK,QAAd,EAAwB;AACtBL,MAAAA,UAAU,CAACoB,GAAX,CAAe,UAAf,EAA2B,8BAAgBhB,KAAhB,CAA3B;AACD,KAFD,MAEO,IAAIC,KAAK,KAAK,UAAd,EAA0B;AAC/BL,MAAAA,UAAU,CAACoB,GAAX,CAAe,UAAf,EAA2B,6BAAehB,KAAf,CAA3B;AACD;AACF,GANoB,EAMlB,CAACA,KAAD,EAAQJ,UAAR,CANkB,CAArB;AAQA,QAAMqB,OAAO,GAAG,oBAAQ,OAAO;AAC7BC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,KAAK,EAAEtB,MAAM,EAAEgB,gBAAR,IAA4B;AAArC,KADqB;AAE7BO,IAAAA,QAAQ,EAAE;AAAED,MAAAA,KAAK,EAAEtB,MAAM,EAAEwB,gBAAR,IAA4B;AAArC;AAFmB,GAAP,CAAR,EAGZ,CAACxB,MAAD,CAHY,CAAhB;AAKA,sBACE,eAAC,+BAAD;AACE,IAAA,MAAM,EAAC,uBADT;AAEE,IAAA,QAAQ,EAAEa,iBAAiB,IAAIZ,QAFjC;AAGE,IAAA,QAAQ,EAAEiB,YAHZ;AAIE,IAAA,OAAO,EAAEA,YAJX;AAKE,IAAA,OAAO,EAAEE,OALX;AAME,IAAA,KAAK,EAAEN,MANT;AAOE,IAAA,IAAI,EAAEW,gBAAYC,UAPpB;AAQE,IAAA,OAAO,EAAEX;AARX,KASMb,IATN,EADF;AAaD","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../../../mo/models';\nimport { TableRole as PluginRoles } from '../../../../utils/role';\nimport { mergeTableCells, splitTableCell } from '../../../actions';\nimport getTable from '../../../utils/getTable';\nimport getTableSelection from '../../../utils/getTableSelection';\nimport { CellMergeStatus, IToolbarButtonConfig, TableMergeButton as MergeButton } from '@ali/4ever-component';\n\nexport interface TableMergeButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  locale?: Record<string, string>;\n}\n\nexport default function TableMergeButton(props: TableMergeButtonProps) {\n  const { controller, locale, disabled, ...rest } = props;\n  const table = getTable(controller.value) as Table | null;\n  const selection = getTableSelection(controller);\n  const isSelectionSupportSplit = React.useMemo(() => {\n    return !!table\n      && controller.query('isSelectionSupportSplit', { visible: true, node: table });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [table, selection, controller]);\n  const isSelectionSupportMerge = React.useMemo(() => {\n    return !!table\n      && controller.query('isSelectionSupportMerge', { visible: true, node: table });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [table, selection, controller]);\n\n  let canMergeOrUnmerge = false;\n  let status;\n  let tooltip = '';\n  if (isSelectionSupportMerge) {\n    status = 'unmerged';\n    tooltip = locale?.contextMenuMerge || '';\n  } else if (isSelectionSupportSplit) {\n    status = 'merged';\n    tooltip = locale?.toastUnmerge || '';\n  } else {\n    canMergeOrUnmerge = true;\n  }\n\n  const handleChange = useCallback((value: CellMergeStatus) => {\n    if (value === 'merged') {\n      controller.run('onAction', mergeTableCells(table));\n    } else if (value === 'unmerged') {\n      controller.run('onAction', splitTableCell(table));\n    }\n  }, [table, controller]);\n\n  const options = useMemo(() => ({\n    merged: { title: locale?.contextMenuMerge || '' },\n    unmerged: { title: locale?.contextMenuSplit || '' },\n  }), [locale]);\n\n  return (\n    <MergeButton\n      testid=\"bi-toolbar-tablemerge\"\n      disabled={canMergeOrUnmerge || disabled}\n      onChange={handleChange}\n      onClick={handleChange}\n      options={options}\n      value={status}\n      role={PluginRoles.tableMerge}\n      tooltip={tooltip}\n      {...rest}\n    />\n  );\n}\n"],"file":"tableMergeButton.js"}