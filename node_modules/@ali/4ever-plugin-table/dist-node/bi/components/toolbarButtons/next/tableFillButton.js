"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TableFillButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _role = require("../../../../utils/role");

var _weToolbar = require("@ali/we-toolbar");

var _actions = require("../../../actions");

var _getTable = _interopRequireDefault(require("../../../utils/getTable"));

var _getTableSelection = _interopRequireDefault(require("../../../utils/getTableSelection"));

var _everPluginPref = require("@ali/4ever-plugin-pref");

var _everComponent = require("@ali/4ever-component");

const _createElement = /*#__PURE__*/React.createElement;

function TableFillButton(props) {
  const {
    controller,
    locale,
    ...rest
  } = props;
  const {
    value
  } = controller;
  const table = (0, _getTable.default)(value);
  const selection = (0, _getTableSelection.default)(controller);
  let isDisabled = !(selection && table);
  let color;

  if (selection && table) {
    const {
      startRowIndex,
      startColIndex
    } = selection;
    const tablePath = value.document.getPath(table.key);
    const cellPath = tablePath && [...tablePath, startRowIndex, startColIndex];
    const cell = cellPath && value.document.getNodeByPath(cellPath);

    if (cell) {
      const payload = cell.data;
      color = payload && payload.fill;
    }
  } // DEFAULT COLOR


  color = color === undefined ? '#FDBE3D' : color;
  const handleChange = React.useCallback(fill => {
    controller.run('onAction', (0, _actions.setTableCellFill)(table, selection, fill));
  }, [controller, table, selection]);
  const currentPreset = controller.query('getColorPanelMode')?.mode;
  const handleSelectValueChange = React.useCallback(mode => {
    controller.run('onAction', (0, _everPluginPref.setColorPanelMode)({
      mode: mode === 'art' ? _weToolbar.EColorPanelMode.art : _weToolbar.EColorPanelMode.normal
    }));
  }, [controller]);
  return /*#__PURE__*/_createElement(_everComponent.TableFillColorPicker, (0, _extends2.default)({
    testid: "bi-toolbar-table-fill",
    disabled: !!isDisabled,
    color: color,
    onColorChange: handleChange,
    tooltip: locale.fillColor?.tipText,
    role: _role.TableRole.tableFillColor,
    currentPreset: currentPreset,
    onCurrentPresetChange: handleSelectValueChange
  }, rest));
}
//# sourceMappingURL=tableFillButton.js.map