"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TableFillButtonFocus;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weToolbar = require("@ali/we-toolbar");

var _weDesign = require("@ali/we-design");

var _weIcon = require("@ali/we-icon");

var _role = require("../../../utils/role");

var _actions = require("../../actions");

var _getTable = _interopRequireDefault(require("../../utils/getTable"));

var _getTableSelection = _interopRequireDefault(require("../../utils/getTableSelection"));

var _everComponent = require("@ali/4ever-component");

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_weIcon.PaletteNormal, {
  "data-role": "table_color_fill_panel"
});

function TableFillButtonFocus(props) {
  const {
    controller,
    locale,
    usePaletteIcon,
    ...rest
  } = props;
  const {
    value
  } = controller;
  const table = (0, _getTable.default)(value);
  const selection = (0, _getTableSelection.default)(controller);
  const [context, actions] = (0, _everComponent.useSelectionBarContext)();
  const {
    lastFill
  } = context;
  let color;

  if (selection) {
    const {
      startRowIndex,
      startColIndex
    } = selection;
    const tablePath = value.document.getPath(table.key);
    const cellPath = [...tablePath, startRowIndex, startColIndex];
    const cell = value.document.getNodeByPath(cellPath);

    if (cell) {
      const payload = cell.data;
      color = payload && payload.fill;
    }
  }

  const onChange = fill => {
    controller.run('onAction', (0, _actions.setTableCellFill)(table, selection, fill));
    actions.updateLastFill(fill);
  };

  const handleButtonClick = () => {
    controller.run('onAction', (0, _actions.setTableCellFill)(table, selection, lastFill));
  };

  const pathColors = [// 图标下方横线填充色
  lastFill === '' ? 'transparent' : lastFill, // 图标下方横线边框色， 当填充为透明或白色时边框色为 inherit
  ['#FFFFFF', 'transparent'].includes(lastFill) ? 'inherit' : lastFill];

  const handleCustomVisibleChange = visible => {
    const {
      isBlurred
    } = controller.value;

    if (isBlurred && !visible) {
      // fix: focus 到自定义色板输入框然后关闭色板后行内工具栏立即消失
      controller.run('onCangjieFocus');

      if (context.canHide) {
        // fix: focus 到自定义色板输入框然后点击其他区域时行内工具栏不消失
        controller.command(_everCangjie.Commands.moveToFocus);
      }
    }
  }; // fix: focus 到自定义色板输入框后行内工具栏消失


  const handleMouseEnter = React.useCallback(() => actions.updateCanHide(false), [actions]);
  const handleMouseLeave = React.useCallback(() => actions.updateCanHide(true), [actions]);
  return /*#__PURE__*/_createElement(_weToolbar.SplitButton, (0, _extends2.default)({}, rest, {
    testid: "bi-toolbar-table-fill",
    icon: usePaletteIcon ? _ref : /*#__PURE__*/_createElement(_weIcon.ToolbarCellFillColorNormal, {
      pathColors: pathColors,
      "data-role": "table_color_fill_panel"
    }),
    tooltip: locale.fillColor?.tipText,
    overlay: /*#__PURE__*/_createElement(_weDesign.ColorPanel, {
      backgroundColor: color,
      onBackgroundColorClick: onChange,
      enableResetButton: true,
      isFullBackground: true,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      onCustomVisibleChange: handleCustomVisibleChange
    }),
    onClickLeft: handleButtonClick,
    role: _role.TableRole.tableFillColor
  }));
}
//# sourceMappingURL=tableFillButtonFocus.js.map