"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TableDeleteButton;

var _react = _interopRequireDefault(require("react"));

var _weToolbar = require("@ali/we-toolbar");

var _weDesign = require("@ali/we-design");

var _role = require("../../../utils/role");

var _getTableSelection = _interopRequireDefault(require("../../utils/getTableSelection"));

var _actions = require("../../actions");

var _types = require("../../types");

const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref = /*#__PURE__*/_createElement(_weDesign.ToolbarTableDeleteNormal, null);

function TableDeleteButton(props) {
  const {
    controller,
    locale
  } = props;
  const selection = (0, _getTableSelection.default)(controller);
  if (!selection) return null;
  const node = controller.value.document.getNode(selection?.key);
  if (!(node && (0, _types.isTable)(node))) return null;
  const tableRowCount = node.nodes.length - 1;
  const tableColCount = (node.data.colsWidth || []).length - 1;
  const {
    startRowIndex,
    startColIndex,
    endRowIndex,
    endColIndex
  } = selection;
  const isSelectWholeRow = startColIndex === 0 && endColIndex >= tableColCount;
  const isSelectWholeCol = startRowIndex === 0 && endRowIndex >= tableRowCount;
  const isSelectWholeTable = isSelectWholeCol && isSelectWholeRow;

  if (!isSelectWholeRow && !isSelectWholeCol) {
    return null;
  }

  const handleMouseDown = () => {
    if (isSelectWholeTable) {
      controller.run('onAction', (0, _actions.deleteTable)(node));
    } else if (isSelectWholeRow) {
      controller.run('onAction', (0, _actions.deleteTableRows)(node));
    } else if (isSelectWholeCol) {
      controller.run('onAction', (0, _actions.deleteTableCols)(node));
    }
  };

  return /*#__PURE__*/_createElement(_weToolbar.IconButton, {
    icon: _ref,
    title: locale?.contextMenuDelete,
    tooltip: locale?.contextMenuDelete,
    testid: "bi-toolbar-table-delete",
    onClick: handleMouseDown,
    role: _role.TableRole.tableDelete
  });
}

TableDeleteButton.needRender = function (controller) {
  const selection = (0, _getTableSelection.default)(controller);
  if (!selection) return false;
  const node = controller.value.document.getNode(selection.key);
  if (!(node && (0, _types.isTable)(node))) return false;
  const tableRowCount = node.nodes.length - 1;
  const tableColCount = (node.data.colsWidth || []).length - 1;
  const {
    startRowIndex,
    startColIndex,
    endRowIndex,
    endColIndex
  } = selection;
  const isSelectWholeRow = startColIndex === 0 && endColIndex >= tableColCount;
  const isSelectWholeCol = startRowIndex === 0 && endRowIndex >= tableRowCount;

  if (!isSelectWholeRow && !isSelectWholeCol) {
    return false;
  }

  return true;
};
//# sourceMappingURL=tableDeleteButton.js.map