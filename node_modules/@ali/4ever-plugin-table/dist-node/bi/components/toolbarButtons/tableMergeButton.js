"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TableMergeButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _weToolbar = require("@ali/we-toolbar");

var _role = require("../../../utils/role");

var _actions = require("../../actions");

var _getTable = _interopRequireDefault(require("../../utils/getTable"));

var _getTableSelection = _interopRequireDefault(require("../../utils/getTableSelection"));

const _createElement = /*#__PURE__*/_react.default.createElement;

function TableMergeButton(props) {
  const {
    controller,
    locale,
    ...rest
  } = props;
  const table = (0, _getTable.default)(controller.value);
  const selection = (0, _getTableSelection.default)(controller);

  const isSelectionSupportSplit = _react.default.useMemo(() => {
    return !!table && controller.query('isSelectionSupportSplit', {
      visible: true,
      node: table
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [table, selection, controller]);

  const isSelectionSupportMerge = _react.default.useMemo(() => {
    return !!table && controller.query('isSelectionSupportMerge', {
      visible: true,
      node: table
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [table, selection, controller]);

  let disabled = false;
  let status;
  let title = '';

  if (isSelectionSupportMerge) {
    status = 'unmerged';
    title = locale.contextMenuMerge;
  } else if (isSelectionSupportSplit) {
    status = 'merged';
    title = locale.toastUnmerge;
  } else {
    disabled = true;
  }

  const handleChange = value => {
    if (value === 'merged') {
      controller.run('onAction', (0, _actions.mergeTableCells)(table));
    } else if (value === 'unmerged') {
      controller.run('onAction', (0, _actions.splitTableCell)(table));
    }
  };

  const handleClick = () => {
    if (status === 'merged') {
      controller.run('onAction', (0, _actions.splitTableCell)(table));
    } else if (status === 'unmerged') {
      controller.run('onAction', (0, _actions.mergeTableCells)(table));
    }
  };

  return /*#__PURE__*/_createElement(_weToolbar.MergeCellButton, (0, _extends2.default)({}, rest, {
    title: title,
    testid: "bi-toolbar-tablemerge",
    onSelect: handleChange,
    onClick: handleClick,
    status: status,
    disabled: disabled,
    role: _role.TableRole.tableMerge
  }));
}
//# sourceMappingURL=tableMergeButton.js.map