{"version":3,"sources":["../../../../../src/bi/components/toolbarButtons/tableThemeButton.tsx"],"names":["TableThemeButton","props","controller","locale","rest","value","table","selection","isVisible","setVisible","React","useState","isDisabled","backgroundColor","borderColor","query","handleTableBorderColor","useCallback","color","val","lineMap","lineType","sz","size","layout","run","handleTableBgColorChange","fill","handleReset","DEFAULT_BORDER_COLOR","borderAndFillColor","PluginRoles","tableTheme"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;uBAR4B,a;;wBAgDhB,eAAC,0BAAD,O;;AAtCG,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AAC9C,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsB,OAAGC;AAAzB,MAAkCH,KAAxC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAYH,UAAlB;AACA,QAAMI,KAAK,GAAG,uBAASD,KAAT,CAAd;AACA,QAAME,SAAS,GAAG,gCAAkBL,UAAlB,CAAlB;AACA,QAAM,CAACM,SAAD,EAAYC,UAAZ,IAA0BC,KAAK,CAACC,QAAN,CAAe,KAAf,CAAhC;AAEA,MAAIC,UAAU,GAAG,EAAEL,SAAS,IAAID,KAAf,CAAjB;AACA,QAAM;AAAEO,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAmCZ,UAAU,CAACa,KAAX,CAAiB,wBAAjB,KAA8C,EAAvF;AAEA,QAAMC,sBAAsB,GAAGN,KAAK,CAACO,WAAN,CAAmBC,KAAD,IAAW;AAC1D,UAAMC,GAAG,GAAGC,mBAAQ,MAAR,EAAgBC,QAA5B;AACA,UAAMC,EAAE,GAAGF,mBAAQ,MAAR,EAAgBG,IAA3B;AACA,UAAMC,MAAM,GAAG,KAAf;;AAEA,QAAIlB,KAAJ,EAAW;AACTJ,MAAAA,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2B,6BAAenB,KAAf,EAA+BC,SAA/B,EAA0CiB,MAA1C,EAAkDN,KAAlD,EAAyDI,EAAzD,EAA6DH,GAA7D,CAA3B;AACD;AACF,GAR8B,EAQ5B,CAACjB,UAAD,EAAaI,KAAb,EAAoBC,SAApB,CAR4B,CAA/B;AAUA,QAAMmB,wBAAwB,GAAGhB,KAAK,CAACO,WAAN,CAAmBU,IAAD,IAAkB;AACnEzB,IAAAA,UAAU,CAACuB,GAAX,CAAe,UAAf,EAA2B,+BAAiBnB,KAAjB,EAAwBC,SAAxB,EAAmCoB,IAAnC,CAA3B;AACD,GAFgC,EAE9B,CAACzB,UAAD,EAAaI,KAAb,EAAoBC,SAApB,CAF8B,CAAjC;AAIA,QAAMqB,WAAW,GAAGlB,KAAK,CAACO,WAAN,CAAkB,MAAM;AAC1CD,IAAAA,sBAAsB,CAACa,+BAAD,CAAtB;AACAH,IAAAA,wBAAwB,CAAC,EAAD,CAAxB;AACAjB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA,WAAO,KAAP;AACD,GALmB,EAKjB,CAACO,sBAAD,EAAyBU,wBAAzB,CALiB,CAApB;AAOA,sBACE,eAAC,mBAAD,6BACMtB,IADN;AAEE,IAAA,OAAO,EAAED,MAAM,EAAE2B,kBAAR,IAA8B,6BAFzC;AAGE,IAAA,MAAM,EAAC,wBAHT;AAIE,IAAA,QAAQ,EAAElB,UAJZ;AAKE,IAAA,IAAI,EAAEmB,gBAAYC,UALpB;AAME,IAAA,IAAI,MANN;AAOE,IAAA,OAAO,EAAExB,SAPX;AAQE,IAAA,eAAe,EAAEC,UARnB;AASE,IAAA,SAAS,EAAE,KATb;AAUE,IAAA,OAAO,eACL,eAAC,oBAAD;AACE,MAAA,eAAe,EAAEI,eADnB;AAEE,MAAA,sBAAsB,EAAEa,wBAF1B;AAGE,MAAA,WAAW,EAAEZ,WAHf;AAIE,MAAA,kBAAkB,EAAEE,sBAJtB;AAKE,MAAA,iBAAiB,MALnB;AAME,MAAA,kBAAkB,EAAEY;AANtB;AAXJ,KADF;AAuBD","sourcesContent":["import * as React from 'react';\nimport { Block } from '@ali/4ever-cangjie';\nimport { IconMenu } from '@ali/we-toolbar';\nimport { ColorPanel } from '@ali/we-design';\nimport { IconPalette } from '@ali/4ever-component';\nimport { TableRole as PluginRoles } from '../../../utils/role';\nimport { setTableBorder, setTableCellFill } from '../../actions';\nimport getTable from '../../utils/getTable';\nimport getTableSelection from '../../utils/getTableSelection';\nimport { lineMap, DEFAULT_BORDER_COLOR } from '../../../utils/constants';\n\nexport default function TableThemeButton(props) {\n  const { controller, locale, ...rest } = props;\n  const { value } = controller;\n  const table = getTable(value);\n  const selection = getTableSelection(controller);\n  const [isVisible, setVisible] = React.useState(false);\n\n  let isDisabled = !(selection && table)\n  const { backgroundColor, borderColor } = controller.query('getTableSelectionTheme') || {};\n\n  const handleTableBorderColor = React.useCallback((color) => {\n    const val = lineMap['Thin'].lineType;\n    const sz = lineMap['Thin'].size;\n    const layout = 'all';\n\n    if (table) {\n      controller.run('onAction', setTableBorder(table as Block, selection, layout, color, sz, val));\n    }\n  }, [controller, table, selection]);\n\n  const handleTableBgColorChange = React.useCallback((fill: string) => {\n    controller.run('onAction', setTableCellFill(table, selection, fill));\n  }, [controller, table, selection]);\n\n  const handleReset = React.useCallback(() => {\n    handleTableBorderColor(DEFAULT_BORDER_COLOR);\n    handleTableBgColorChange('');\n    setVisible(false);\n    return false;\n  }, [handleTableBorderColor, handleTableBgColorChange]);\n\n  return (\n    <IconMenu\n      {...rest}\n      tooltip={locale?.borderAndFillColor || 'Border and background color'}\n      testid=\"bi-toolbar-table-theme\"\n      disabled={isDisabled}\n      role={PluginRoles.tableTheme}\n      icon={<IconPalette />}\n      visible={isVisible}\n      onVisibleChange={setVisible}\n      autoClose={false}\n      overlay={\n        <ColorPanel\n          backgroundColor={backgroundColor}\n          onBackgroundColorClick={handleTableBgColorChange}\n          borderColor={borderColor}\n          onBorderColorClick={handleTableBorderColor}\n          enableResetButton\n          onResetButtonClick={handleReset}\n        />\n      }\n    />\n  );\n}\n"],"file":"tableThemeButton.js"}