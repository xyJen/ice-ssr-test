{"version":3,"sources":["../../../../../src/bi/components/toolbarButtons/tableMergeButton.tsx"],"names":["TableMergeButton","props","controller","locale","rest","table","value","selection","isSelectionSupportSplit","React","useMemo","query","visible","node","isSelectionSupportMerge","disabled","status","title","contextMenuMerge","toastUnmerge","handleChange","run","handleClick","PluginRoles","tableMerge"],"mappings":";;;;;;;;;;;AAAA;;AAGA;;AAGA;;AACA;;AACA;;AACA;;uBAR4B,a;;AAeb,SAASA,gBAAT,CAA0BC,KAA1B,EAAwD;AACrE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsB,OAAGC;AAAzB,MAAkCH,KAAxC;AACA,QAAMI,KAAK,GAAG,uBAASH,UAAU,CAACI,KAApB,CAAd;AACA,QAAMC,SAAS,GAAG,gCAAkBL,UAAlB,CAAlB;;AACA,QAAMM,uBAAuB,GAAGC,eAAMC,OAAN,CAAc,MAAM;AAClD,WAAO,CAAC,CAACL,KAAF,IACFH,UAAU,CAACS,KAAX,CAAiB,yBAAjB,EAA4C;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,IAAI,EAAER;AAAvB,KAA5C,CADL,CADkD,CAGpD;AACC,GAJ+B,EAI7B,CAACA,KAAD,EAAQE,SAAR,EAAmBL,UAAnB,CAJ6B,CAAhC;;AAKA,QAAMY,uBAAuB,GAAGL,eAAMC,OAAN,CAAc,MAAM;AAClD,WAAO,CAAC,CAACL,KAAF,IACFH,UAAU,CAACS,KAAX,CAAiB,yBAAjB,EAA4C;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,IAAI,EAAER;AAAvB,KAA5C,CADL,CADkD,CAGpD;AACC,GAJ+B,EAI7B,CAACA,KAAD,EAAQE,SAAR,EAAmBL,UAAnB,CAJ6B,CAAhC;;AAMA,MAAIa,QAAQ,GAAG,KAAf;AACA,MAAIC,MAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,MAAIH,uBAAJ,EAA6B;AAC3BE,IAAAA,MAAM,GAAG,UAAT;AACAC,IAAAA,KAAK,GAAGd,MAAM,CAACe,gBAAf;AACD,GAHD,MAGO,IAAIV,uBAAJ,EAA6B;AAClCQ,IAAAA,MAAM,GAAG,QAAT;AACAC,IAAAA,KAAK,GAAGd,MAAM,CAACgB,YAAf;AACD,GAHM,MAGA;AACLJ,IAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,QAAMK,YAAY,GAAId,KAAD,IAAmB;AACtC,QAAIA,KAAK,KAAK,QAAd,EAAwB;AACtBJ,MAAAA,UAAU,CAACmB,GAAX,CAAe,UAAf,EAA2B,8BAAgBhB,KAAhB,CAA3B;AACD,KAFD,MAEO,IAAIC,KAAK,KAAK,UAAd,EAA0B;AAC/BJ,MAAAA,UAAU,CAACmB,GAAX,CAAe,UAAf,EAA2B,6BAAehB,KAAf,CAA3B;AACD;AACF,GAND;;AAQA,QAAMiB,WAAW,GAAG,MAAM;AACxB,QAAIN,MAAM,KAAK,QAAf,EAAyB;AACvBd,MAAAA,UAAU,CAACmB,GAAX,CAAe,UAAf,EAA2B,6BAAehB,KAAf,CAA3B;AACD,KAFD,MAEO,IAAIW,MAAM,KAAK,UAAf,EAA2B;AAChCd,MAAAA,UAAU,CAACmB,GAAX,CAAe,UAAf,EAA2B,8BAAgBhB,KAAhB,CAA3B;AACD;AACF,GAND;;AAQA,sBACE,eAAC,0BAAD,6BACMD,IADN;AAEE,IAAA,KAAK,EAAEa,KAFT;AAGE,IAAA,MAAM,EAAC,uBAHT;AAIE,IAAA,QAAQ,EAAEG,YAJZ;AAKE,IAAA,OAAO,EAAEE,WALX;AAME,IAAA,MAAM,EAAEN,MANV;AAOE,IAAA,QAAQ,EAAED,QAPZ;AAQE,IAAA,IAAI,EAAEQ,gBAAYC;AARpB,KADF;AAYD","sourcesContent":["import React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../../mo/models';\nimport {\n  MergeCellButton,\n} from '@ali/we-toolbar';\nimport { TableRole as PluginRoles } from '../../../utils/role';\nimport { mergeTableCells, splitTableCell } from '../../actions';\nimport getTable from '../../utils/getTable';\nimport getTableSelection from '../../utils/getTableSelection';\n\nexport interface TableMergeButtonProps {\n  controller: Controller;\n  locale: Record<string, string>;\n}\n\nexport default function TableMergeButton(props: TableMergeButtonProps) {\n  const { controller, locale, ...rest } = props;\n  const table = getTable(controller.value) as Table | null;\n  const selection = getTableSelection(controller);\n  const isSelectionSupportSplit = React.useMemo(() => {\n    return !!table\n      && controller.query('isSelectionSupportSplit', { visible: true, node: table });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [table, selection, controller]);\n  const isSelectionSupportMerge = React.useMemo(() => {\n    return !!table\n      && controller.query('isSelectionSupportMerge', { visible: true, node: table });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [table, selection, controller]);\n\n  let disabled = false;\n  let status;\n  let title = '';\n  if (isSelectionSupportMerge) {\n    status = 'unmerged';\n    title = locale.contextMenuMerge;\n  } else if (isSelectionSupportSplit) {\n    status = 'merged';\n    title = locale.toastUnmerge;\n  } else {\n    disabled = true;\n  }\n\n  const handleChange = (value: string) => {\n    if (value === 'merged') {\n      controller.run('onAction', mergeTableCells(table));\n    } else if (value === 'unmerged') {\n      controller.run('onAction', splitTableCell(table));\n    }\n  };\n\n  const handleClick = () => {\n    if (status === 'merged') {\n      controller.run('onAction', splitTableCell(table));\n    } else if (status === 'unmerged') {\n      controller.run('onAction', mergeTableCells(table));\n    }\n  };\n\n  return (\n    <MergeCellButton\n      {...rest}\n      title={title}\n      testid=\"bi-toolbar-tablemerge\"\n      onSelect={handleChange}\n      onClick={handleClick}\n      status={status}\n      disabled={disabled}\n      role={PluginRoles.tableMerge}\n    />\n  );\n}\n"],"file":"tableMergeButton.js"}