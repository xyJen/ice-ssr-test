{"version":3,"sources":["../../../../../src/bi/components/toolbarButtons/tablePickerButton.tsx"],"names":["TablePickerButton","props","controller","locale","toolbarMode","rest","value","tableSelection","query","isDisabled","selection","isBlurred","data","edgeSelection","handleChange","React","useCallback","row","col","run","tablePanel","useMemo","PluginRoles","tablePicker"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;uBAL4B,a;;AAcb,SAASA,iBAAT,CAA2BC,KAA3B,EAA0D;AACvE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,WAAtB;AAAmC,OAAGC;AAAtC,MAA+CJ,KAArD;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAYJ,UAAlB;AACA,QAAMK,cAAc,GAAGL,UAAU,CAACM,KAAX,CAAiB,mBAAjB,CAAvB,CAHuE,CAIvE;;AACA,QAAMC,UAAU,GAAGH,KAAK,CAACI,SAAN,CAAgBC,SAAhB,IACZL,KAAK,CAACM,IAAN,CAAWC,aADC,IAEZN,cAFY,IAGZ,qCAAuBD,KAAvB,CAHY,IAIZJ,UAAU,CAACM,KAAX,CAAiB,mBAAjB,CAJY,IAKZN,UAAU,CAACM,KAAX,CAAiB,sBAAjB,CALY,IAMZN,UAAU,CAACM,KAAX,CAAiB,yBAAjB,CANP;AAQA,QAAMM,YAAY,GAAGC,KAAK,CAACC,WAAN,CAAkB,CAACC,GAAD,EAAcC,GAAd,KAA8B;AACnEhB,IAAAA,UAAU,CAACiB,GAAX,CAAe,UAAf,EAA2B,0BAAYF,GAAZ,EAAiBC,GAAjB,CAA3B;AACD,GAFoB,EAElB,CAAChB,UAAD,CAFkB,CAArB;;AAbuE,0BAkBrE,eAAC,oBAAD;AACE,IAAA,GAAG,EAAE,EADP;AAEE,IAAA,GAAG,EAAE,EAFP;AAGE,IAAA,MAAM,EAAEY;AAHV,IAlBqE;;AAiBvE,QAAMM,UAAU,GAAGL,KAAK,CAACM,OAAN,CAAc,UAAd,EAMhB,CAACP,YAAD,CANgB,CAAnB;AAOA,sBACE,eAAC,sBAAD,6BACMT,IADN;AAEE,IAAA,MAAM,EAAC,yBAFT;AAGE,IAAA,OAAO,EAAEe,UAHX;AAIE,IAAA,QAAQ,EAAEX,UAJZ;AAKE,IAAA,SAAS,EAAE,IALb;AAME,IAAA,IAAI,EAAEa,gBAAYC;AANpB,KADF;AAUD","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { TablePanel } from '@ali/we-design';\nimport { TableButton } from '@ali/we-toolbar';\nimport { TableRole as PluginRoles } from '../../../utils/role';\nimport isSelectionInTableCell from '../../utils/isSelectionInTableCell';\nimport { insertTable } from '../../actions';\nimport { ToolbarMode } from '@ali/4ever-component';\n\nexport interface TablePickerButtonProps {\n  controller: Controller;\n  locale: Record<string, string>;\n  toolbarMode?: ToolbarMode;\n}\n\nexport default function TablePickerButton(props: TablePickerButtonProps) {\n  const { controller, locale, toolbarMode, ...rest } = props;\n  const { value } = controller;\n  const tableSelection = controller.query('hasTableSelection');\n  // @ts-ignore\n  const isDisabled = value.selection.isBlurred\n      || value.data.edgeSelection\n      || tableSelection\n      || isSelectionInTableCell(value)\n      || controller.query('isSelectionInLink')\n      || controller.query('isSelectionInMention')\n      || controller.query('isSelectionInListSymbol');\n\n  const handleChange = React.useCallback((row: number, col: number) => {\n    controller.run('onAction', insertTable(row, col));\n  }, [controller]);\n\n  const tablePanel = React.useMemo(() => (\n    <TablePanel\n      row={10}\n      col={10}\n      onPick={handleChange}\n    />\n  ), [handleChange]);\n  return (\n    <TableButton\n      {...rest}\n      testid=\"bi-toolbar-table-picker\"\n      overlay={tablePanel}\n      disabled={isDisabled}\n      autoClose={true}\n      role={PluginRoles.tablePicker}\n    />\n  );\n}\n"],"file":"tablePickerButton.js"}