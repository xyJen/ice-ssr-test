"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DragIconMode = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

const _createElement = /*#__PURE__*/React.createElement;
// icon不同模式下的配置，比如宽高
const MODECONFIG = {
  col: {
    height: 9,
    width: 14
  },
  row: {
    height: 14,
    width: 9
  }
}; // row、col分别对应行列拖拽工具栏下的模式

let DragIconMode;
exports.DragIconMode = DragIconMode;

(function (DragIconMode) {
  DragIconMode["Row"] = "row";
  DragIconMode["Col"] = "col";
})(DragIconMode || (exports.DragIconMode = DragIconMode = {}));

const CircleIcon = /*#__PURE__*/_styledComponents.default.span(["display:inline-block;width:2px;height:2px;background:#FFFFFF;border-radius:100%;"]);

const DragButtonIconWrapper = /*#__PURE__*/_styledComponents.default.div(["display:flex;justify-content:space-between;align-items:center;transition:opacity ease-in-out .25s;"]);

const DragButtonIcon = (props, ref) => {
  const {
    scale,
    mode,
    isShow = true,
    circleNumber = 3
  } = props;
  const config = mode === DragIconMode.Col ? MODECONFIG.col : MODECONFIG.row;
  const circles = React.useMemo(() => {
    const result = [];

    for (let i = 0; i < circleNumber; i++) {
      const style = {
        width: `${2 / scale}px`,
        height: `${2 / scale}px`
      };
      result.push( /*#__PURE__*/_createElement(CircleIcon, {
        key: i,
        style: style
      }));
    }

    return result;
  }, [circleNumber, scale]);
  const style = React.useMemo(() => {
    return {
      flexDirection: mode === DragIconMode.Col ? 'row' : 'column',
      opacity: isShow ? 1 : 0,
      height: `${config.height / scale}px`,
      width: `${config.width / scale}px`
    };
  }, [config.height, config.width, isShow, mode, scale]);
  return /*#__PURE__*/_createElement(DragButtonIconWrapper, {
    ref: ref,
    style: style
  }, circles);
};

var _default = /*#__PURE__*/React.forwardRef(DragButtonIcon);

exports.default = _default;
//# sourceMappingURL=dragButtonIcon.js.map