"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("../../constants");

var _constants2 = require("../../../utils/constants");

var hooks = _interopRequireWildcard(require("../../../utils/hooks"));

const _createElement = /*#__PURE__*/React.createElement;
const {
  useRowIsSticky,
  useScrollableContainerRect
} = hooks;

const Icon = /*#__PURE__*/_styledComponents.default.div(["cursor:default;"]);

const Wrapper = /*#__PURE__*/_styledComponents.default.div(["position:absolute;z-index:2;cursor:default;box-shadow:rgb(214 214 214) 1px 0px 0px 0px;"]);

const CornerIcon = props => {
  const {
    scale,
    size = _constants2.TOOLBAR_ITEM_SIZE,
    active,
    isSelected,
    hoverSelection,
    onClick,
    onMouseEnter,
    onMouseLeave
  } = props;
  const [isSticky] = useRowIsSticky();
  const [scrollRect] = useScrollableContainerRect();
  const timer = React.useRef(null);
  const [isHover, setIsHover] = React.useState(false);
  const style = React.useMemo(() => {
    const hoverBgColor = isHover ? _constants.THEME.blue1 : _constants.THEME.toolbarBgColor.default;
    const ret = {
      backgroundColor: active ? _constants.THEME.blue1 : hoverBgColor,
      left: `${-(size / scale)}px`,
      top: `${_constants2.REALTABLE_PADDING.top / scale}px`,
      width: `${size / scale}px`,
      height: `${Math.ceil(size / scale)}px`,
      borderTopLeftRadius: `${5 / scale}px`,
      borderLeft: active || isHover ? `1px solid ${_constants.THEME.blue3}` : `1px solid ${_constants.THEME.toolbarBorderColor}`,
      borderTop: active || isHover ? `1px solid ${_constants.THEME.blue3}` : `1px solid ${_constants.THEME.toolbarBorderColor}`,
      boxShadow: active || hoverSelection ? `${_constants.THEME.blue3} 1px 0px 0px 0px` : 'rgb(214 214 214) 1px 0px 0px 0px',
      zIndex: hoverSelection ? 2 : 5 // 选中工具栏的时候需要降低全选按钮的zindex，否则会导致工具栏高亮左边框缺失，未选中时需要提升，否则滚动时全选按钮右边框会缺失

    };
    return ret;
  }, [isHover, active, size, scale]);
  const wrapperStyle = React.useMemo(() => {
    if (!isSelected) {
      return {
        visibility: 'hidden'
      };
    }

    const ret = {
      visibility: 'visible',
      left: `${-(size / scale)}px`,
      top: `${_constants2.REALTABLE_PADDING.top / scale}px`
    };

    if (isSticky) {
      ret.position = 'fixed';
      ret.top = `${scrollRect.top + _constants2.STICKY_ROW_TOP_HEIGHT}px`;
      ret.transform = `translate(-${size}px, -${size}px)`;
      ret.zIndex = _constants2.STICKY_TOOLBAR_INDEX_MAP.cornerButton;
      ret.left = Number.isFinite(scrollRect.left) ? scrollRect.left : 'unset';
    }

    return ret;
  }, [isSelected, isSticky, scale, scrollRect, size]);
  const handleMouseEnter = React.useCallback(e => {
    timer.current = setTimeout(() => {
      onMouseEnter(e);
      setIsHover(true);
    }, 300);
  }, [onMouseEnter]);
  const handleMouseLeave = React.useCallback(e => {
    timer.current && clearTimeout(timer.current);
    onMouseLeave(e);
    setIsHover(false);
  }, [onMouseLeave]);
  React.useEffect(() => {
    timer.current && clearTimeout(timer.current);
  }, []);
  const wrapperRef = React.useRef(null);

  const preventDefault = e => {
    e.preventDefault();
    e.stopPropagation();
  };

  return /*#__PURE__*/_createElement(Wrapper, {
    ref: wrapperRef,
    "data-sticky": isSticky,
    style: wrapperStyle,
    "data-testid": "table-whole-select-button"
  }, /*#__PURE__*/_createElement(Icon, {
    style: style,
    onClick: onClick,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onMouseDown: preventDefault
  }));
};

var _default = CornerIcon;
exports.default = _default;
//# sourceMappingURL=WholeSelectButton.js.map