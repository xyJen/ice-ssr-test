"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnAction;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../../actions");

var _resizeColsWidth = _interopRequireDefault(require("../../commands/resizeColsWidth"));

var _deleteTable = _interopRequireDefault(require("../../commands/deleteTable"));

var _insertTable = _interopRequireDefault(require("../../commands/insertTable"));

var _setTableMinColsWidthData = _interopRequireDefault(require("../../../utils/commands/setTableMinColsWidthData"));

var _adjustColsWidth = _interopRequireDefault(require("../../../utils/commands/adjustColsWidth"));

var _commands = require("../../commands");

/* eslint-disable no-shadow */
function createOnAction(config) {
  return function onAction(action, controller, next) {
    const {
      enableAutofitWidth,
      enableHeader,
      setTableHeaderStyle
    } = config;

    if (_actions.isActions.isTableResizeTableColWidthAction(action)) {
      const {
        node,
        colIndex,
        delta,
        containerWidth
      } = action.payload;
      return (0, _resizeColsWidth.default)(controller, {
        node,
        colIndex,
        delta,
        containerWidth
      });
    }

    if (_actions.isActions.isTableDeleteTableAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _deleteTable.default)(controller, node);
    }

    if (_actions.isActions.isTableInsertTableAction(action)) {
      const {
        rowSize,
        colSize,
        containerWidth
      } = action.payload;
      const defaultAutofit = enableAutofitWidth?.();
      const defaultHeader = enableHeader?.();
      return (0, _insertTable.default)(controller, {
        rowSize,
        colSize,
        containerWidth,
        defaultAutofit,
        defaultHeader,
        setTableHeaderStyle
      });
    }

    if (_actions.isActions.isTableSetTableMinColsWidthDataAction(action)) {
      const {
        data
      } = action.payload;
      return (0, _setTableMinColsWidthData.default)(controller, data);
    }

    if (_actions.isActions.isTableAdjustColsWidthAction(action)) {
      const {
        node,
        containerWidth
      } = action.payload;
      return (0, _adjustColsWidth.default)(controller, node, containerWidth);
    }

    if (_actions.isActions.isTableBlurAction(action)) {
      return controller.command(_everCangjie.Commands.blur);
    }

    if (_actions.isActions.isTableSelectTableColsAction(action)) {
      const {
        node,
        startIndex,
        endIndex
      } = action.payload;
      return (0, _commands.selectCols)(controller, node, startIndex, endIndex);
    }

    if (_actions.isActions.isTableSelectTableRowsAction(action)) {
      const {
        node,
        startIndex,
        endIndex
      } = action.payload;
      return (0, _commands.selectRows)(controller, node, startIndex, endIndex);
    }

    if (_actions.isActions.isTableEmptySelectionAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _commands.emptyTableSelection)(controller, node);
    }

    if (_actions.isActions.isTableDeleteRowsAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _commands.deleteRows)(controller, node);
    }

    if (_actions.isActions.isTableDeleteColsAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _commands.deleteCols)(controller, node);
    }

    if (_actions.isActions.isTableInsertColAction(action)) {
      const {
        node,
        colIndex,
        colWidth,
        triggerColIndex,
        containerWidth
      } = action.payload;
      return (0, _commands.insertCol)(controller, node, colIndex, triggerColIndex, colWidth, containerWidth);
    }

    if (_actions.isActions.isTableInsertRowAction(action)) {
      const {
        node,
        type
      } = action.payload;
      return (0, _commands.insertRow)(controller, node, type);
    }

    if (_actions.isActions.isTableInsertRowBySelectionsAction(action)) {
      const {
        node,
        type
      } = action.payload;
      return (0, _commands.insertRowBySelections)(controller, node, type);
    }

    return next();
  };
}
//# sourceMappingURL=createOnAction.js.map