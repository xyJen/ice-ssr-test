{"version":3,"sources":["../../../../../src/bi/mobile/handlers/createOnAction.ts"],"names":["createOnAction","config","onAction","action","controller","next","enableAutofitWidth","enableHeader","setTableHeaderStyle","isActions","isTableResizeTableColWidthAction","node","colIndex","delta","containerWidth","payload","isTableDeleteTableAction","isTableInsertTableAction","rowSize","colSize","defaultAutofit","defaultHeader","isTableSetTableMinColsWidthDataAction","data","isTableAdjustColsWidthAction","isTableBlurAction","command","Commands","blur","isTableSelectTableColsAction","startIndex","endIndex","isTableSelectTableRowsAction","isTableEmptySelectionAction","isTableDeleteRowsAction","isTableDeleteColsAction","isTableInsertColAction","colWidth","triggerColIndex","isTableInsertRowAction","type","isTableInsertRowBySelectionsAction"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport { Controller, Commands, Action } from '@ali/4ever-cangjie';\nimport { isActions } from '../../actions';\nimport resizeColsWidth from '../../commands/resizeColsWidth';\nimport deleteTable from '../../commands/deleteTable';\nimport insertTable from '../../commands/insertTable';\nimport { TableConfig } from '../../types';\nimport setTableMinColsWidthData from '../../../utils/commands/setTableMinColsWidthData';\nimport adjustColsWidth from '../../../utils/commands/adjustColsWidth';\nimport {\n  selectCols,\n  selectRows,\n  emptyTableSelection,\n  deleteRows,\n  deleteCols,\n  insertCol,\n  insertRow,\n  insertRowBySelections,\n} from '../../commands';\n\nexport default function createOnAction(config: TableConfig) {\n  return function onAction(action: Action, controller: Controller, next) {\n    const { enableAutofitWidth, enableHeader, setTableHeaderStyle } = config;\n    if (isActions.isTableResizeTableColWidthAction(action)) {\n      const { node, colIndex, delta, containerWidth } = action.payload;\n      return resizeColsWidth(controller, {\n        node,\n        colIndex,\n        delta,\n        containerWidth,\n      });\n    }\n    if (isActions.isTableDeleteTableAction(action)) {\n      const { node } = action.payload;\n      return deleteTable(controller, node);\n    }\n    if (isActions.isTableInsertTableAction(action)) {\n      const { rowSize, colSize, containerWidth } = action.payload;\n      const defaultAutofit = enableAutofitWidth?.();\n      const defaultHeader = enableHeader?.();\n      return insertTable(\n        controller,\n        {\n          rowSize,\n          colSize,\n          containerWidth,\n          defaultAutofit,\n          defaultHeader,\n          setTableHeaderStyle,\n        },\n      );\n    }\n    if (isActions.isTableSetTableMinColsWidthDataAction(action)) {\n      const { data } = action.payload;\n      return setTableMinColsWidthData(controller, data);\n    }\n    if (isActions.isTableAdjustColsWidthAction(action)) {\n      const { node, containerWidth } = action.payload;\n      return adjustColsWidth(controller, node, containerWidth);\n    }\n    if (isActions.isTableBlurAction(action)) {\n      return controller.command(Commands.blur);\n    }\n    if (isActions.isTableSelectTableColsAction(action)) {\n      const { node, startIndex, endIndex } = action.payload;\n      return selectCols(controller, node, startIndex, endIndex);\n    }\n    if (isActions.isTableSelectTableRowsAction(action)) {\n      const { node, startIndex, endIndex } = action.payload;\n      return selectRows(controller, node, startIndex, endIndex);\n    }\n    if (isActions.isTableEmptySelectionAction(action)) {\n      const { node } = action.payload;\n      return emptyTableSelection(controller, node);\n    }\n    if (isActions.isTableDeleteRowsAction(action)) {\n      const { node } = action.payload;\n      return deleteRows(controller, node);\n    }\n    if (isActions.isTableDeleteColsAction(action)) {\n      const { node } = action.payload;\n      return deleteCols(controller, node);\n    }\n    if (isActions.isTableInsertColAction(action)) {\n      const { node, colIndex, colWidth, triggerColIndex, containerWidth } = action.payload;\n      return insertCol(controller, node, colIndex, triggerColIndex, colWidth, containerWidth);\n    }\n    if (isActions.isTableInsertRowAction(action)) {\n      const { node, type } = action.payload;\n      return insertRow(controller, node, type);\n    }\n    if (isActions.isTableInsertRowBySelectionsAction(action)) {\n      const { node, type } = action.payload;\n      return insertRowBySelections(controller, node, type);\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnAction.js"}