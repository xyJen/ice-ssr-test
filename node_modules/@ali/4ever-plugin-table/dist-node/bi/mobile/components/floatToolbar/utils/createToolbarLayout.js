"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createToolbarLayout = void 0;

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireDefault(require("../../../../../mo/models"));

var _commands = require("../../../../commands");

var _actions = require("../../../../actions");

var _icons = require("../icons");

var _constants = require("../../../../../utils/constants");

const _createElement = /*#__PURE__*/_react.default.createElement;
var KeyEnum;

(function (KeyEnum) {
  KeyEnum["copy"] = "copy";
  KeyEnum["cut"] = "cut";
  KeyEnum["paste"] = "paste";
  KeyEnum["clear"] = "clear";
  KeyEnum["insertRowAbove"] = "insertRowAbove";
  KeyEnum["insertRowBelow"] = "insertRowBelow";
  KeyEnum["deleteRow"] = "deleteRow";
  KeyEnum["insertColLeft"] = "insertColLeft";
  KeyEnum["insertColRight"] = "insertColRight";
  KeyEnum["deleteCol"] = "deleteCol";
})(KeyEnum || (KeyEnum = {}));

var _ref = /*#__PURE__*/_createElement(_icons.CopyIcon, null);

var _ref2 = /*#__PURE__*/_createElement(_icons.CutIcon, null);

var _ref3 = /*#__PURE__*/_createElement(_icons.PasteIcon, null);

var _ref4 = /*#__PURE__*/_createElement(_icons.ClearIcon, null);

var _ref5 = /*#__PURE__*/_createElement(_icons.InsertRowAboveIcon, null);

var _ref6 = /*#__PURE__*/_createElement(_icons.InsertRowBelowIcon, null);

var _ref7 = /*#__PURE__*/_createElement(_icons.DeleteRowIcon, null);

var _ref8 = /*#__PURE__*/_createElement(_icons.InsertColLeftIcon, null);

var _ref9 = /*#__PURE__*/_createElement(_icons.InsertColRightIcon, null);

var _ref10 = /*#__PURE__*/_createElement(_icons.DeleteColIcon, null);

const createToolbarLayout = params => {
  const {
    controller,
    table,
    type,
    hideToolbar,
    tableSelection,
    locale
  } = params;

  const isAutofit = _models.default.isAutofitWidth(table);

  const containerWidth = isAutofit ? _constants.DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT : undefined;

  const handleClick = callback => () => {
    callback();
    hideToolbar();
  };

  const handleCopy = () => {
    controller.run('onAction', {
      type: _everCangjie.ContextMenu.ACTION_COPY
    });
  };

  const handleCut = () => {
    controller.run('onAction', {
      type: _everCangjie.ContextMenu.ACTION_CUT
    });
  };

  const handlePaste = () => {
    controller.run('onAction', {
      type: _everCangjie.ContextMenu.ACTION_PASTE
    });
  };

  const handleClear = () => {
    return (0, _commands.emptyTableSelection)(controller, table);
  };

  const defaultLayout = [{
    key: KeyEnum.copy,
    icon: _ref,
    title: locale?.contextMenuCopy,
    onClick: handleClick(handleCopy)
  }, {
    key: KeyEnum.cut,
    icon: _ref2,
    title: locale?.contextMenuCut,
    onClick: handleClick(handleCut)
  }, {
    key: KeyEnum.paste,
    icon: _ref3,
    title: locale?.contextMenuPaste,
    onClick: handleClick(handlePaste)
  }, {
    key: KeyEnum.clear,
    icon: _ref4,
    title: locale?.mobileFloatToolbar?.clear,
    onClick: handleClick(handleClear)
  }];
  const {
    endColIndex
  } = tableSelection;
  const colsWidth = table.data.colsWidth;
  const targetColIndex = endColIndex + 1;
  const rightColWidth = colsWidth[endColIndex];
  const leftColWidth = colsWidth[tableSelection.startColIndex];

  const getNewTable = () => {
    return controller.value.document.getNode(table.key);
  };

  const handleInsertRowAbove = () => {
    controller.run('onAction', (0, _actions.insertTableRowBySelections)(table, 'insert-row-above'));
    const newTblSelection = { ...tableSelection,
      startRowIndex: tableSelection.startRowIndex + 1,
      endRowIndex: tableSelection.endRowIndex + 1,
      type: 'row'
    };
    (0, _commands.selectTableSelection)(controller, getNewTable(), newTblSelection, false);
  };

  const handleInsertRowBelow = () => {
    controller.run('onAction', (0, _actions.insertTableRowBySelections)(table, 'insert-row-below'));
    const newTblSelection = { ...tableSelection,
      type: 'row'
    };
    (0, _commands.selectTableSelection)(controller, getNewTable(), newTblSelection, false);
  };

  const handleDeleteRow = () => {
    controller.run('onAction', (0, _actions.deleteTableRows)(table));
  };

  const handleInsertColLeft = () => {
    controller.run('onAction', (0, _actions.insertTableCol)(table, tableSelection.startColIndex, tableSelection.startColIndex, leftColWidth, containerWidth));
    const newTblSelection = { ...tableSelection,
      startColIndex: tableSelection.startColIndex + 1,
      endColIndex: tableSelection.endColIndex + 1,
      type: 'col'
    };
    (0, _commands.selectTableSelection)(controller, getNewTable(), newTblSelection, false);
  };

  const handleInsertColRight = () => {
    controller.run('onAction', (0, _actions.insertTableCol)(table, targetColIndex, endColIndex, rightColWidth, containerWidth));
    const newTblSelection = { ...tableSelection,
      type: 'col'
    };
    (0, _commands.selectTableSelection)(controller, getNewTable(), newTblSelection, false);
  };

  const handleDeleteCol = () => {
    controller.run('onAction', (0, _actions.deleteTableCols)(table));
  };

  const appendLayout = type === 'row' ? [{
    key: KeyEnum.insertRowAbove,
    icon: _ref5,
    title: locale?.mobileFloatToolbar?.insertRowAbove,
    onClick: handleClick(handleInsertRowAbove)
  }, {
    key: KeyEnum.insertRowBelow,
    icon: _ref6,
    title: locale?.mobileFloatToolbar?.insertRowBelow,
    onClick: handleClick(handleInsertRowBelow)
  }, {
    key: KeyEnum.deleteRow,
    icon: _ref7,
    title: locale?.toolbarDeleteRow,
    onClick: handleClick(handleDeleteRow)
  }] : [{
    key: KeyEnum.insertColLeft,
    icon: _ref8,
    title: locale?.mobileFloatToolbar?.insertColLeft,
    onClick: handleClick(handleInsertColLeft)
  }, {
    key: KeyEnum.insertColRight,
    icon: _ref9,
    title: locale?.mobileFloatToolbar?.insertColRight,
    onClick: handleClick(handleInsertColRight)
  }, {
    key: KeyEnum.deleteCol,
    icon: _ref10,
    title: locale?.toolbarDeleteCol,
    onClick: handleClick(handleDeleteCol)
  }];
  return [...appendLayout, ...defaultLayout];
};

exports.createToolbarLayout = createToolbarLayout;
//# sourceMappingURL=createToolbarLayout.js.map