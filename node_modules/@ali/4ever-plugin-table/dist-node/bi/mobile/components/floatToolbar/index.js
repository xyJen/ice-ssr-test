"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FloatToolbar = exports.SINGLE_ROW_BUTTON_LENGTH = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _everCangjie = require("@ali/4ever-cangjie");

var _basic = require("./basic");

var _calcTableSelectionPos = _interopRequireDefault(require("../../../utils/calcTableSelectionPos"));

var _hooks = require("../../../../utils/hooks");

var _getToolbarPostion = require("./utils/getToolbarPostion");

var _createToolbarLayout = require("./utils/createToolbarLayout");

const _createElement = /*#__PURE__*/_react.default.createElement;
const SINGLE_ROW_BUTTON_LENGTH = 5;
exports.SINGLE_ROW_BUTTON_LENGTH = SINGLE_ROW_BUTTON_LENGTH;

const FloatToolbar = props => {
  const {
    controller,
    table,
    tableSelection,
    tableRef,
    locale,
    selecteColRange,
    selecteRowRange
  } = props;
  const {
    isByTable,
    tableType
  } = controller.value.selection.data;
  const [pixelColsWidth] = (0, _hooks.usePixelColsWidth)();

  const toolbarNodeRef = _react.default.useRef(null);

  const [style, setStyle] = _react.default.useState({});

  let toolbarType = tableType;
  selecteColRange && (toolbarType = 'col');
  selecteRowRange && (toolbarType = 'row');

  const setToolbarVisible = visible => {
    if (!toolbarNodeRef.current) return;
    toolbarNodeRef.current.style.opacity = visible ? '1' : '0';
    toolbarNodeRef.current.style.visibility = visible ? 'unset' : 'hidden';
  };

  const hideToolbar = _react.default.useCallback(() => setToolbarVisible(false), []);

  const toolbarLayout = _react.default.useMemo(() => {
    if (!toolbarType || !tableSelection) return [];
    const layout = (0, _createToolbarLayout.createToolbarLayout)({
      controller,
      table,
      hideToolbar,
      type: toolbarType,
      tableSelection,
      locale
    });
    return [layout.slice(0, SINGLE_ROW_BUTTON_LENGTH), layout.slice(SINGLE_ROW_BUTTON_LENGTH)];
  }, [controller, hideToolbar, table, tableSelection, toolbarType, locale]);

  const updateStyle = () => {
    if (!toolbarType || !tableSelection || !toolbarNodeRef.current || !isByTable) {
      setToolbarVisible(false);
      return;
    }

    const selectionRect = (0, _calcTableSelectionPos.default)({
      table,
      tableNode: tableRef.current,
      tblSelection: tableSelection,
      colsWidth: pixelColsWidth,
      absPostion: true
    });

    if (!selectionRect) {
      setToolbarVisible(false);
      return;
    }

    const {
      x,
      y
    } = (0, _getToolbarPostion.getToolbarPosition)({
      targetRect: selectionRect,
      toolbarType
    });
    setToolbarVisible(true);
    setStyle({
      left: x,
      top: y
    });
  }; // 表格选区变化时更新 toolbar 位置
  // eslint-disable-next-line react-hooks/exhaustive-deps


  _react.default.useEffect(updateStyle, [tableSelection, table]);

  (0, _everCangjie.useScroll)({
    onStart: () => {
      setToolbarVisible(false);
    },
    onEnd: () => {
      updateStyle();
    }
  });
  return /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_createElement("div", {
    ref: toolbarNodeRef
  }, /*#__PURE__*/_createElement(_basic.BasicFloatToolbar, {
    toolbarLayout: toolbarLayout,
    style: {
      transition: 'opacity .3s',
      ...style
    }
  })), document.body);
};

exports.FloatToolbar = FloatToolbar;
//# sourceMappingURL=index.js.map