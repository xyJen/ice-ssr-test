"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _fastdom = _interopRequireDefault(require("fastdom"));

var _lodash = require("lodash");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _styled = require("../../components/styled");

var _actions = require("../../actions");

var _constants = require("../../../utils/constants");

var _tableScrollContainer = _interopRequireDefault(require("../../../components/tableScrollContainer"));

var _pureTable = _interopRequireDefault(require("../../../components/pureTable"));

var _contextContainer = require("../../components/contextContainer");

var _mobileRowToolbar = require("./toolbar/mobileRowToolbar");

var _mobileColToolbar = require("./toolbar/mobileColToolbar");

var _getToolbarTableSelection = require("../../utils/getToolbarTableSelection");

var _tableSelection = _interopRequireDefault(require("../../components/tableSelection"));

var _getSelectedRangeFromTableSelection = require("../../utils/getSelectedRangeFromTableSelection");

var _getDataTableSelectionByTable = _interopRequireDefault(require("../../utils/getDataTableSelectionByTable"));

var _getTableIsSelected = _interopRequireDefault(require("../../../utils/utils/getTableIsSelected"));

var _floatToolbar = require("./floatToolbar");

var _constants2 = require("../../constants");

var _scrollbar = require("./scrollbar");

const _createElement = /*#__PURE__*/_react.default.createElement;

const Wrapper = /*#__PURE__*/_styledComponents.default.div(["position:relative;padding-top:", "px;padding-bottom:", "px;"], _constants.MOBILE_SPACING - _constants2.TOOLBAR_ITEM_SIZE_MOBILE, _constants.MOBILE_SPACING - _constants.SCROLL_BAR_HEIGHT);

const TableWithSelection = /*#__PURE__*/_styledComponents.default.div(["position:relative;"]);

const ScrollContent = /*#__PURE__*/_styledComponents.default.div(["position:relative;left:", "px;width:calc(100% - ", "px);"], _constants2.TOOLBAR_ITEM_SIZE_MOBILE, _constants2.TOOLBAR_ITEM_SIZE_MOBILE);

const Table = props => {
  const {
    node,
    controller,
    children,
    tableConfig
  } = props;
  const {
    enableToolbar
  } = tableConfig;
  const {
    isFocused,
    selection
  } = controller.value;

  const [toolbarVisible, setToolbarVisible] = _react.default.useState(!!enableToolbar && isFocused);

  const zoomContainer = (0, _everCangjie.useZoomContainer)() || window.document.body;
  const [shouldShowTableRightShadow, setShouldShowTableRightShadow] = (0, _react.useState)(false);
  const tableRef = (0, _react.useRef)(null);
  const wrapperRef = (0, _react.useRef)(null);
  const tableLeftShadowRef = (0, _react.useRef)(null);
  const tableRightShadowRef = (0, _react.useRef)(null);
  const updateShadowRafIdRef = (0, _react.useRef)(0);

  const updateShadowState = () => {
    // 文档模型更新后，DOM 不会立刻更新，所以需要等待 DOM 更新后再计算阴影的状态
    if (updateShadowRafIdRef.current !== -1) {
      window.cancelAnimationFrame(updateShadowRafIdRef.current);
    }

    updateShadowRafIdRef.current = window.requestAnimationFrame(() => {
      _fastdom.default.measure(() => {
        const table = tableRef.current;
        const realTableWrapper = wrapperRef.current;

        if (!table || !realTableWrapper) {
          return;
        }

        const tableRect = (0, _everUtils.getBoundingRelativeRect)(table, zoomContainer);
        const realTableWrapperRect = (0, _everUtils.getBoundingRelativeRect)(realTableWrapper, zoomContainer);
        const scrollableContentWidth = tableRect.width;
        const newShouldShowRight = scrollableContentWidth - realTableWrapper.scrollLeft > realTableWrapperRect.width;

        if (newShouldShowRight !== shouldShowTableRightShadow) {
          setShouldShowTableRightShadow(newShouldShowRight);
        }
      });
    });
  };

  const updateShadowHeight = () => {
    if (!tableRef.current) {
      return;
    }

    const tableRect = (0, _everUtils.getBoundingRelativeRect)(tableRef.current, zoomContainer);
    const height = `${Math.round(tableRect.height)}px`;

    if (tableLeftShadowRef.current) {
      tableLeftShadowRef.current.style.height = height;
    }

    if (tableRightShadowRef.current) {
      tableRightShadowRef.current.style.height = height;
    }
  };

  const isMountedRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(() => {
    _fastdom.default.measure(() => {
      updateShadowHeight();
    });

    controller.run('onAction', (0, _actions.adjustColsWidth)(node, _constants.DEFAULT_TOTAL_WIDTH_FOR_AUTOFIT));

    if (!isMountedRef.current) {
      updateShadowState();
      isMountedRef.current = true;
    }
  });
  const handleTableScroll = (0, _lodash.throttle)(() => {
    if (!wrapperRef.current) {
      return;
    }

    if (tableConfig?.onScroll) {
      tableConfig.onScroll(wrapperRef.current, node);
    }

    updateShadowState();
  });

  const getTableSelection = () => {
    const tblSelections = controller.query('viewTableSelections');

    if (!tblSelections) {
      return null;
    }

    const curTableSelection = tblSelections.find(ts => ts.key === node.key);

    if (!curTableSelection) {
      return null;
    }

    return curTableSelection;
  };

  let activeRowRange = null;
  let selecteRowRange = null;
  let activeColRange = null;
  let selecteColRange = null;
  const activeSelection = (0, _getToolbarTableSelection.getToolbarTableSelection)(controller, node);
  const tableSelection = (0, _getDataTableSelectionByTable.default)(controller, node);
  const selectionType = selection.data.tableType;
  activeRowRange = activeSelection ? {
    start: activeSelection.startRowIndex,
    end: activeSelection.endRowIndex
  } : null;
  activeColRange = activeSelection ? {
    start: activeSelection.startColIndex,
    end: activeSelection.endColIndex
  } : null;

  if (selectionType === 'row') {
    selecteRowRange = (0, _getSelectedRangeFromTableSelection.getSelectedRowRangeFromTableSelection)({
      controller,
      table: node,
      tableSelection,
      includeTable: true
    });
  } else if (selectionType === 'col') {
    selecteColRange = (0, _getSelectedRangeFromTableSelection.getSelectedColRangeFromTableSelection)({
      controller,
      table: node,
      tableSelection,
      includeTable: true
    });
  }

  const isSelected = (0, _getTableIsSelected.default)(node, controller);

  _react.default.useEffect(() => {
    if (isFocused && enableToolbar) {
      setToolbarVisible(true);
    }
  }, [isFocused, enableToolbar]);

  const [_, forceUpdate] = _react.default.useReducer(c => c + 1, 0);

  const onHots = _react.default.useCallback(hots => {
    // PERF: 非当前表格热区不处理
    if (hots.some(hot => node.key === hot.node.key || node.hasNode(hot.node.key))) {
      forceUpdate();
    }
  }, [node]);

  (0, _everCangjie.useSelectingHots)(controller, onHots);
  return /*#__PURE__*/_createElement(Wrapper, {
    "data-type": "table"
  }, /*#__PURE__*/_createElement(_contextContainer.ContextContainer, {
    isSelected: isSelected
  }, /*#__PURE__*/_createElement(_tableScrollContainer.default, {
    ref: wrapperRef,
    className: "real-table-wrapper",
    table: node,
    controller: controller,
    onScroll: handleTableScroll,
    isMobile: true,
    style: {
      left: -_constants2.TOOLBAR_ITEM_SIZE_MOBILE,
      width: `calc(100% + ${_constants2.TOOLBAR_ITEM_SIZE_MOBILE}px)`,
      overflowY: 'hidden'
    },
    hideScrollBar: true
  }, /*#__PURE__*/_createElement(_mobileRowToolbar.MobileRowToolbar, {
    table: node,
    controller: controller,
    visible: isSelected && toolbarVisible,
    activeRange: activeRowRange,
    selectRange: selecteRowRange
  }), /*#__PURE__*/_createElement(ScrollContent, null, /*#__PURE__*/_createElement(_mobileColToolbar.MobileColToolbar, {
    table: node,
    controller: controller,
    visible: toolbarVisible && isSelected,
    activeRange: activeColRange,
    selectRange: selecteColRange
  }), /*#__PURE__*/_createElement(TableWithSelection, null, /*#__PURE__*/_createElement(_pureTable.default, {
    ref: tableRef,
    node: node,
    controller: controller,
    isMobile: true
  }, children()), toolbarVisible && /*#__PURE__*/_createElement(_tableSelection.default, {
    "data-testid": "table-selection-wrapper",
    node: node,
    controller: controller,
    selection: tableSelection,
    tableRef: tableRef,
    getTableSelection: getTableSelection
  })))), /*#__PURE__*/_createElement(_scrollbar.Scrollbar, {
    scrollContainer: wrapperRef.current,
    scrollContent: tableRef.current
  }), toolbarVisible && /*#__PURE__*/_createElement(_floatToolbar.FloatToolbar, {
    controller: controller,
    table: node,
    tableSelection: tableSelection,
    tableRef: tableRef,
    locale: tableConfig.locale,
    selecteRowRange: selecteRowRange,
    selecteColRange: selecteColRange
  })), /*#__PURE__*/_createElement(_styled.TableRightSideShadow, {
    ref: tableRightShadowRef,
    style: {
      display: shouldShowTableRightShadow ? 'block' : 'none'
    }
  }));
};

var _default = Table;
exports.default = _default;
//# sourceMappingURL=table.js.map