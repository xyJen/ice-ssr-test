"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Scrollbar = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("../../../utils/constants");

var _useResizeObserver = _interopRequireDefault(require("../../../utils/utils/useResizeObserver"));

var _constants2 = require("../../constants");

const _createElement = /*#__PURE__*/_react.default.createElement;
const SCROLLER_BG_COLOR = 'rgba(31, 35, 41, .3)';
const SCROLLER_BORDER_COLOR = 'rgba(242, 243, 245, .3)';

const Container = /*#__PURE__*/_styledComponents.default.div(["position:relative;height:", "px;padding-top:2px;box-sizing:border-box;"], _constants.SCROLL_BAR_HEIGHT);

const Slider = /*#__PURE__*/_styledComponents.default.div(["position:absolute;height:4px;border-radius:3px;background-color:", ";border:1px solid ", ";opacity:0;"], SCROLLER_BG_COLOR, SCROLLER_BORDER_COLOR);

const Scrollbar = props => {
  const {
    scrollContainer,
    scrollContent
  } = props;
  const [containerWidth, setContainerWidth] = (0, _react.useState)(0);
  const prevContainerWidthRef = (0, _react.useRef)(0);
  const [contentWidth, setContentWidth] = (0, _react.useState)(0);
  const prevContentWidthRef = (0, _react.useRef)(0);
  const sliderRef = (0, _react.useRef)(null);
  const handleContentResize = (0, _react.useCallback)(rect => {
    if (rect.width !== prevContainerWidthRef.current) {
      setContentWidth(rect.width);
      prevContainerWidthRef.current = rect.width;
    }
  }, []);
  (0, _useResizeObserver.default)(scrollContent, handleContentResize);
  const handleContainerResize = (0, _react.useCallback)(rect => {
    if (rect.width !== prevContentWidthRef.current) {
      setContainerWidth(rect.width - _constants2.TOOLBAR_ITEM_SIZE_MOBILE);
      prevContentWidthRef.current = rect.width;
    }
  }, []);
  (0, _useResizeObserver.default)(scrollContainer, handleContainerResize); // 更新滚动条位置

  (0, _react.useEffect)(() => {
    if (!scrollContainer) return () => {};
    let hideSliderTimer;

    const showSlider = visible => {
      if (sliderRef.current) {
        sliderRef.current.style.opacity = visible ? '1' : '0';
      }
    };

    const handleScroll = () => {
      if (!sliderRef.current || !scrollContainer) return;
      clearTimeout(hideSliderTimer);
      showSlider(true);
      const left = scrollContainer.scrollLeft * 100 / (scrollContainer.clientWidth - _constants2.TOOLBAR_ITEM_SIZE_MOBILE);
      sliderRef.current.style.transform = `translateX(${left}%)`;
      hideSliderTimer = setTimeout(() => {
        showSlider(false);
      }, 500);
    };

    scrollContainer.addEventListener('scroll', handleScroll);
    return () => {
      scrollContainer.removeEventListener('scroll', handleScroll);
    };
  }, [scrollContainer]);
  const scrollerWidth = containerWidth / contentWidth * containerWidth;
  return /*#__PURE__*/_createElement(Container, {
    style: {
      width: containerWidth
    }
  }, /*#__PURE__*/_createElement(Slider, {
    ref: sliderRef,
    style: {
      width: scrollerWidth
    }
  }));
};

exports.Scrollbar = Scrollbar;
//# sourceMappingURL=scrollbar.js.map