"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MobileRowToolbar = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _rowToolbarItem = _interopRequireDefault(require("../../../components/rowToolbar/rowToolbarItem"));

var _constants = require("../../../constants");

var _hooks = require("../../../../utils/hooks");

var _actions = require("../../../actions");

const _createElement = /*#__PURE__*/_react.default.createElement;

const Wrapper = /*#__PURE__*/_styledComponents.default.div(["position:absolute;width:", "px;top:", "px;left:0;"], _constants.TOOLBAR_ITEM_SIZE_MOBILE, _constants.TOOLBAR_ITEM_SIZE_MOBILE);

const MobileRowToolbar = props => {
  const {
    table,
    activeRange,
    selectRange,
    visible,
    controller
  } = props;

  const preventEvent = e => {
    e.stopPropagation();
  };

  const handleSelectRow = (i, e) => {
    preventEvent(e);
    e.preventDefault();
    e.nativeEvent.stopImmediatePropagation();
    controller.run('onAction', (0, _actions.selectTableRows)(table, i, i));
    controller.setIsFocused(false);
  };

  const [rowsClientHeight] = (0, _hooks.useRowsClientHeight)();

  const rowsHeight = _react.default.useMemo(() => {
    return table.nodes.map(row => rowsClientHeight[row.key] || 0);
  }, [rowsClientHeight, table.nodes]);

  return /*#__PURE__*/_createElement(Wrapper, {
    style: {
      display: visible ? 'block' : 'none'
    }
  }, table.nodes.map((_, i) => /*#__PURE__*/_createElement(_rowToolbarItem.default, {
    style: {
      width: _constants.TOOLBAR_ITEM_SIZE_MOBILE,
      borderTopLeftRadius: i === 0 ? 4 : 0,
      borderBottomLeftRadius: i === table.nodes.length - 1 ? 4 : 0
    },
    selectRanges: selectRange ? [selectRange] : null,
    activeRange: activeRange,
    key: table.nodes[i].key,
    index: i,
    table: table,
    onClick: e => handleSelectRow(i, e),
    onMouseDown: preventEvent,
    rowHeight: rowsHeight[i],
    width: _constants.TOOLBAR_ITEM_SIZE_MOBILE
  }, props.children)));
};

exports.MobileRowToolbar = MobileRowToolbar;
//# sourceMappingURL=mobileRowToolbar.js.map