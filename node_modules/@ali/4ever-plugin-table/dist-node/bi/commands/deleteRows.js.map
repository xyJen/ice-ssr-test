{"version":3,"sources":["../../../../src/bi/commands/deleteRows.ts"],"names":["deleteRow","controller","tablePath","rowIndex","table","value","document","getNodeByPath","_","colIndex","cell","data","hidden","realNode","position","key","command","Commands","setNodeByPath","rowSpan","inheritCellPath","nextRow","nodes","withoutNormalizing","removeNodeByPath","deleteRows","selection","tableSelection","queryTbSelection","startRowIndex","endRowIndex","getPath","updatedTable","deleteTable","rowSize","length","selectedRowIndex","focusCell","s","moveToStartOfNode","select"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport { Controller, Commands, Path } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport isEmptyTable from '../utils/isEmptyTable';\nimport selectTableSelection from './selectTableSelection';\nimport getRealNodeInTable from '../utils/getRealNodeInTable';\nimport getPositionOfCell from '../utils/getPositionOfCell';\nimport traverseSingleRowCells from '../utils/traverseSingleRowCells';\nimport deleteTable from './deleteTable';\nimport { createTableSelectionForFocusedCell } from '../utils';\nimport { ITableSelection } from '../types';\nimport getDataTableSelectionByTable from '../utils/getDataTableSelectionByTable';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\n\nfunction deleteRow(controller: Controller, tablePath: Path, rowIndex: number) {\n  const table = controller.value.document.getNodeByPath(tablePath) as Table;\n  traverseSingleRowCells(table, rowIndex, rowIndex, (_, colIndex, cell) => {\n    if (cell.data?.hidden) {\n      const realNode = getRealNodeInTable(table, rowIndex, colIndex);\n      if (!realNode) {\n        return;\n      }\n      const position = getPositionOfCell(realNode.key, table)!;\n      if (position.colIndex === colIndex && position.rowIndex < rowIndex) {\n        controller.command(Commands.setNodeByPath,\n          [...tablePath, position.rowIndex, position.colIndex], {\n            data: {\n              ...realNode.data,\n              rowSpan: (realNode.data.rowSpan || 1) - 1,\n            },\n          });\n      }\n    } else if ((cell.data?.rowSpan || 1) > 1) {\n      const inheritCellPath = [...tablePath, rowIndex + 1, colIndex];\n      const nextRow = table.nodes[rowIndex + 1];\n      // 不规整表格可能不存在下一行\n      if (nextRow) {\n        controller.command(Commands.setNodeByPath, inheritCellPath, {\n          data: {\n            ...cell.data,\n            rowSpan: (cell.data.rowSpan || 1) - 1,\n          },\n        });\n      }\n    }\n  });\n  controller.withoutNormalizing(() => {\n    controller.command(Commands.removeNodeByPath, [...tablePath, rowIndex]);\n  });\n}\n\nexport default function deleteRows(controller: Controller, table: Table) {\n  const { value } = controller;\n  const { document, selection } = value;\n  let tableSelection: ITableSelection | null = null;\n  const queryTbSelection = getDataTableSelectionByTable(controller, table);\n  if (queryTbSelection) {\n    tableSelection = queryTbSelection;\n  } else {\n    tableSelection = createTableSelectionForFocusedCell(value, table);\n  }\n  if (!tableSelection) {\n    return controller;\n  }\n  const { startRowIndex, endRowIndex } = tableSelection;\n  const tablePath = document.getPath(table.key)!;\n\n  for (let rowIndex = endRowIndex; rowIndex >= startRowIndex; rowIndex -= 1) {\n    deleteRow(controller, tablePath, rowIndex);\n  }\n\n  const updatedTable = controller.value.document.getNodeByPath(tablePath) as Table;\n  if (isEmptyTable(updatedTable)) {\n    controller.command(deleteTable, updatedTable);\n  } else {\n    const rowSize = updatedTable.nodes.length;\n    const selectedRowIndex = startRowIndex >= rowSize ? rowSize - 1 : startRowIndex;\n    const focusCell = getRealNodeInTable(updatedTable, selectedRowIndex, 0);\n    if (focusCell) {\n      const s = setSelectionByTable(selection, false)\n        .moveToStartOfNode(focusCell, controller);\n      return controller.command(Commands.select, s);\n    }\n  }\n\n  return controller;\n}\n"],"file":"deleteRows.js"}