"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resizeTableToAutofitWidth;

var _models = _interopRequireDefault(require("../../mo/models"));

var _setTableColsWidth = _interopRequireDefault(require("../utils/setTableColsWidth"));

var _calcResizeColsWidth = _interopRequireDefault(require("../utils/calcResizeColsWidth"));

var _enableAutofitWidth = _interopRequireDefault(require("../../utils/commands/enableAutofitWidth"));

var _colsWidthConverter = require("../../utils/utils/colsWidthConverter");

var _getTableMaxWidthByContainer = _interopRequireDefault(require("../../utils/utils/getTableMaxWidthByContainer"));

var _formatColWidth = _interopRequireDefault(require("../../utils/utils/formatColWidth"));

function resizeTableToAutofitWidth(controller, table, originTable, containerWidth) {
  if (!_models.default.isAutofitWidth(table)) return controller;
  const {
    colsWidth
  } = table.data;
  if (!Array.isArray(colsWidth)) return controller;
  const originTableWidth = originTable.data.colsWidth.reduce((acc, w) => acc + w);
  const newTableWidth = colsWidth.reduce((acc, w) => acc + w);
  const ratio = originTableWidth / newTableWidth;
  let newColsWidth = colsWidth.map(w => {
    return (0, _formatColWidth.default)(w * ratio);
  });

  if (ratio < 1) {
    const containerW = containerWidth || (0, _getTableMaxWidthByContainer.default)(controller, table);

    if (containerW) {
      const pixelTable = _models.default.create({ ...table,
        data: { ...table.data,
          colsWidth: (0, _colsWidthConverter.convertFromPercentToPixel)(table, containerW)
        }
      });

      const deltaPixelWidth = containerW * (newTableWidth - originTableWidth) / originTableWidth;
      const outputPixelColsWidth = (0, _calcResizeColsWidth.default)(controller, pixelTable, deltaPixelWidth, containerW);
      const tablePixelWidth = outputPixelColsWidth.reduce((acc, w) => acc + w);

      if (tablePixelWidth > containerW) {
        (0, _enableAutofitWidth.default)(controller, table, false);
        const newTable = controller.value.document.getNode(table.key);
        return (0, _setTableColsWidth.default)(controller, newTable, outputPixelColsWidth);
      }

      newColsWidth = (0, _colsWidthConverter.convertFromPixelToPercent)(outputPixelColsWidth, containerW);
    }
  }

  return (0, _setTableColsWidth.default)(controller, table, newColsWidth);
}
//# sourceMappingURL=resizeTableToAutofitWidth.js.map