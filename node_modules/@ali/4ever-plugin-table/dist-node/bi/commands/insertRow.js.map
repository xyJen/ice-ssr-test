{"version":3,"sources":["../../../../src/bi/commands/insertRow.ts"],"names":["insertRow","controller","tableRow","type","value","document","table","getClosest","key","isTable","tablePath","getPath","triggerRowIndex","targetRowIndex","colSize","nodes","length","newTableRow","command","Commands","insertNodeByPath","_targetRowIndex","colIndex","_","originalCell","data","hidden","realNode","position","rowIndex","newCell","setNodeByPath","rowSpan","latestTable","getNodeByPath","focusCell","s","selection","select","moveToStartOfNode"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport { Controller, Commands } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport TableRow from '../../mo/models/tableRow';\nimport createTableRow from '../utils/createTableRow';\nimport getPositionOfRow from '../utils/getPositionOfRow';\nimport getRealNodeInTable from '../utils/getRealNodeInTable';\nimport getPositionOfCell from '../utils/getPositionOfCell';\nimport traverseSingleRowCells from '../utils/traverseSingleRowCells';\nimport { isTable } from '../types';\nimport getVisibleCellOfRow from '../utils/getVisibleCellOfRow';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\n\nexport default function insertRow(controller: Controller, tableRow: TableRow, type: string) {\n  const { value } = controller;\n  const { document } = value;\n  const table = document.getClosest(tableRow.key, isTable) as Table;\n  const tablePath = document.getPath(table.key)!;\n  const triggerRowIndex = getPositionOfRow(tableRow.key, table)!;\n  let targetRowIndex;\n  const colSize = tableRow.nodes.length;\n  if (type === 'insert-row-above') {\n    targetRowIndex = triggerRowIndex;\n  } else if (type === 'insert-row-below') {\n    targetRowIndex = triggerRowIndex + 1;\n  }\n\n  const newTableRow = createTableRow(colSize, tableRow);\n  controller.command(Commands.insertNodeByPath, tablePath, targetRowIndex, newTableRow);\n\n  traverseSingleRowCells(table, targetRowIndex, triggerRowIndex, (_targetRowIndex, colIndex, _, originalCell) => {\n    // 一种策略，originalCell是插入新行位置对应的原来的节点(可能不存在)\n    // 这个节点如果处在realNode所在行的后面的行(非同行)，那在这个位置上的新节点就会设置为hidden\n    // 同时比较colIndex以保证realNode的rowSpan只被拓充一次\n    if (originalCell && originalCell.data.hidden) {\n      const realNode = getRealNodeInTable(table, _targetRowIndex, colIndex);\n      if (!realNode) {\n        return;\n      }\n      const position = getPositionOfCell(realNode.key, table)!;\n      if (position.rowIndex !== _targetRowIndex) {\n        // TODO: 数据处理好再统一塞进去\n        const newCell = newTableRow.nodes[colIndex];\n        controller.command(Commands.setNodeByPath, [...tablePath, _targetRowIndex, colIndex], {\n          data: {\n            ...newCell.data,\n            hidden: true,\n          },\n        });\n      }\n      if (position.colIndex === colIndex) {\n        controller.command(Commands.setNodeByPath, [...tablePath, position.rowIndex, position.colIndex], {\n          data: {\n            ...realNode.data,\n            rowSpan: (realNode.data.rowSpan || 1) + 1,\n          },\n        });\n      }\n    }\n  });\n\n  const latestTable = controller.value.document.getNodeByPath(tablePath) as Table;\n\n  let focusCell = getVisibleCellOfRow(latestTable, targetRowIndex);\n  if (!focusCell) {\n    focusCell = getRealNodeInTable(latestTable, targetRowIndex, 0);\n  }\n  const s = controller.value.selection;\n  return controller\n    .command(Commands.select, setSelectionByTable(s, false))\n    .command(Commands.moveToStartOfNode, focusCell!);\n}\n"],"file":"insertRow.js"}