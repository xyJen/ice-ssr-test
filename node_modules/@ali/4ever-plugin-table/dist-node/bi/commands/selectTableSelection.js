"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = selectTableSelection;

var _everCangjie = require("@ali/4ever-cangjie");

var _adjustSelection = _interopRequireDefault(require("../utils/adjustSelection"));

var _deleteTable = _interopRequireDefault(require("./deleteTable"));

var _getRealNodeInTable = _interopRequireDefault(require("../utils/getRealNodeInTable"));

var _setSelectionByTable = _interopRequireDefault(require("../../utils/utils/setSelectionByTable"));

function selectTableSelection(controller, table, tableSelection, shouldAdjust = true) {
  let newTableSelection = null;

  if (tableSelection) {
    newTableSelection = shouldAdjust ? (0, _adjustSelection.default)(table, tableSelection) : tableSelection;
  }

  if (!newTableSelection) {
    // TODO: history相关
    return controller;
  } // 表格未做schema，存在row被删除的情况


  if (table.nodes.length === 0) return controller.command(_deleteTable.default, table);
  const {
    startRowIndex,
    startColIndex
  } = newTableSelection;
  const targetRow = table.nodes[startRowIndex]; // 表格跨页时，targetRow 可能不存在

  if (!targetRow) {
    return controller;
  }

  if (!targetRow.nodes) {
    return controller.command(_everCangjie.Commands.replaceNodeByKey, targetRow.key, _everCangjie.Block.create('paragraph'));
  }

  const cell = (0, _getRealNodeInTable.default)(table, startRowIndex, startColIndex);

  if (!cell) {
    return controller;
  }

  let rangeSelection = controller.query('getSelectionFromTableSelection', {
    tableSelection: newTableSelection
  });

  if (!rangeSelection) {
    return controller;
  }

  rangeSelection = (0, _setSelectionByTable.default)(rangeSelection, true, tableSelection.type);
  return controller.command(_everCangjie.Commands.select, rangeSelection);
}
//# sourceMappingURL=selectTableSelection.js.map