"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resizeColsWidth;

var _models = _interopRequireDefault(require("../../mo/models"));

var _constants = require("../constants");

var _isNumber = _interopRequireDefault(require("../utils/isNumber"));

var _setTableColsWidth = _interopRequireDefault(require("../utils/setTableColsWidth"));

var _enableAutofitWidth = _interopRequireDefault(require("../../utils/commands/enableAutofitWidth"));

var _colsWidthConverter = require("../../utils/utils/colsWidthConverter");

var _getTableMaxWidthByContainer = _interopRequireDefault(require("../../utils/utils/getTableMaxWidthByContainer"));

function resizeColsWidth(controller, payload) {
  const {
    node: table,
    colIndex: resizeColIndex,
    delta,
    containerWidth: cw
  } = payload;

  if (!(0, _isNumber.default)(delta) || delta === 0) {
    return controller;
  }

  const cols = table.data.colsWidth || [];

  const calcColWidth = (colIndex, d) => {
    let result = colsWidth[colIndex] + d;

    if (d >= 0) {
      return result;
    }

    const {
      width: limitWidth
    } = controller.query('calcMinTableColWidth', {
      node: table,
      colIndex
    }) || {}; // 当前列包含某些特殊子节点时，限制当前最小列宽

    if (typeof limitWidth === 'number') {
      result = Math.max(result, limitWidth);
    }

    return Math.max(result, _constants.MIN_COL_WIDTH);
  };

  let pixelColsWidth = cols;
  let totalColsWidth = 0;

  const isAutofit = _models.default.isAutofitWidth(table);

  const containerWidth = cw || (0, _getTableMaxWidthByContainer.default)(controller, table);

  if (isAutofit) {
    pixelColsWidth = (0, _colsWidthConverter.convertFromPercentToPixel)(table, containerWidth);
  }

  totalColsWidth = pixelColsWidth.reduce((acc, curr) => acc + curr, 0);
  const colsWidth = pixelColsWidth.slice();
  const originColWidth = colsWidth[resizeColIndex];
  colsWidth[resizeColIndex] = calcColWidth(resizeColIndex, delta); // 真实的列宽变化

  const realDelta = colsWidth[resizeColIndex] - originColWidth;

  if ((isAutofit || totalColsWidth <= containerWidth) && resizeColIndex < colsWidth.length - 1) {
    colsWidth[resizeColIndex + 1] = calcColWidth(resizeColIndex + 1, -realDelta);
  }

  if (isAutofit) {
    const newTotalWidth = colsWidth.reduce((acc, w) => acc + w, 0); // 当调整后的表格列宽超出传入的 containerWidth 时，将关闭宽度自适应（目前只有移动端会传 containerWidth

    if (cw && newTotalWidth > cw || resizeColIndex === colsWidth.length - 1) {
      (0, _enableAutofitWidth.default)(controller, table, false);
      const newTable = controller.value.document.getNode(table.key);
      return (0, _setTableColsWidth.default)(controller, newTable, colsWidth);
    }

    const pctColsWidth = (0, _colsWidthConverter.convertFromPixelToPercent)(colsWidth, containerWidth);
    return (0, _setTableColsWidth.default)(controller, table, pctColsWidth);
  }

  return (0, _setTableColsWidth.default)(controller, table, colsWidth);
}
//# sourceMappingURL=resizeColsWidth.js.map