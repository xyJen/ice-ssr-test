"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mergeCells;

var _everCangjie = require("@ali/4ever-cangjie");

var _getDataTableSelectionByTable = _interopRequireDefault(require("../utils/getDataTableSelectionByTable"));

var _setSelectionByTable = _interopRequireDefault(require("../../utils/utils/setSelectionByTable"));

function isEmptyCell(cell) {
  if (cell.nodes.length > 1) {
    return false;
  }

  const firstChild = cell.nodes[0];

  if (firstChild.type !== 'paragraph' || firstChild.nodes.length > 1) {
    return false;
  }

  const firstGrandChild = firstChild.nodes[0];

  if (!_everCangjie.Text.isText(firstGrandChild)) {
    return false;
  }

  return !firstGrandChild.text.length;
}

function mergeCells(controller, table) {
  const {
    value
  } = controller;
  const {
    document,
    selection
  } = value;
  const tableSelection = (0, _getDataTableSelectionByTable.default)(controller, table);

  if (!tableSelection || !table) {
    return controller;
  }

  const {
    startRowIndex,
    startColIndex,
    endRowIndex,
    endColIndex
  } = tableSelection;
  const tablePath = document.getPath(table.key);
  const firstCellPath = [...tablePath, startRowIndex, startColIndex];
  const firstCell = document.getNodeByPath(firstCellPath);
  controller.command(_everCangjie.Commands.setNodeByPath, firstCellPath, {
    data: { ...firstCell.data,
      rowSpan: endRowIndex - startRowIndex + 1,
      colSpan: endColIndex - startColIndex + 1
    }
  });

  for (let r = startRowIndex; r <= endRowIndex; r += 1) {
    for (let c = startColIndex; c <= endColIndex; c += 1) {
      if (r === startRowIndex && c === startColIndex) continue; // @ts-ignore

      const cell = table.nodes[r].nodes[c];
      if (!cell) continue;
      if (cell.data?.hidden) continue;
      const cellPath = [...tablePath, r, c];
      controller.command(_everCangjie.Commands.setNodeByPath, cellPath, {
        data: { ...cell.data,
          rowSpan: 1,
          colSpan: 1,
          hidden: true
        }
      });
      if (isEmptyCell(cell)) continue;

      for (let childIndex = 0; childIndex < cell.nodes.length; childIndex += 1) {
        controller.withoutNormalizing(() => {
          controller.command(_everCangjie.Commands.moveNodeByPath, [...cellPath, 0], firstCellPath, // @ts-ignore
          controller.value.document.getNodeByPath(firstCellPath).nodes.length);
        });
      }

      controller.command(_everCangjie.Commands.insertNodeByPath, cellPath, 0, _everCangjie.Block.create({
        type: 'paragraph',
        nodes: [_everCangjie.Text.create('')]
      }));
    }
  }

  const s = selection.moveToStartOfNode(firstCell, controller);
  return controller.command(_everCangjie.Commands.select, (0, _setSelectionByTable.default)(s, false));
}
//# sourceMappingURL=mergeCells.js.map