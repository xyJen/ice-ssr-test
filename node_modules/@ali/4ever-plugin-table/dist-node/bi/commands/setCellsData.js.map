{"version":3,"sources":["../../../../src/bi/commands/setCellsData.ts"],"names":["CellDataKey","DEFAULT_CELL_DATA","fill","vAlign","DEFAULT_TABLE_ALIGNMENT","setCellsData","controller","table","selection","key","data","value","document","startRowIndex","startColIndex","endRowIndex","endColIndex","tablePath","getPath","r","c","cellPath","cell","getNodeByPath","oldData","newData","command","Commands","setNodeByPath"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;;IAEKA,W;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAKE,MAAMC,iBAAiB,GAAG;AAC/B,GAACD,WAAW,CAACE,IAAb,GAAoB,EADW;AAE/B,GAACF,WAAW,CAACG,MAAb,GAAsBC;AAFS,CAA1B;;;AAKQ,SAASC,YAAT,CACbC,UADa,EAEbC,KAFa,EAGbC,SAHa,EAIbC,GAJa,EAKbC,IALa,EAMb;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYL,UAAlB;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAeD,KAArB;;AACA,MAAI,CAACH,SAAL,EAAgB;AACd,WAAOF,UAAP;AACD;;AACD,QAAM;AACJO,IAAAA,aADI;AACWC,IAAAA,aADX;AAC0BC,IAAAA,WAD1B;AACuCC,IAAAA;AADvC,MAEFR,SAFJ;AAGA,QAAMS,SAAS,GAAGL,QAAQ,CAACM,OAAT,CAAiBX,KAAK,CAACE,GAAvB,CAAlB;;AAEA,OAAK,IAAIU,CAAC,GAAGN,aAAb,EAA4BM,CAAC,IAAIJ,WAAjC,EAA8CI,CAAC,IAAI,CAAnD,EAAsD;AACpD,SAAK,IAAIC,CAAC,GAAGN,aAAb,EAA4BM,CAAC,IAAIJ,WAAjC,EAA8CI,CAAC,IAAI,CAAnD,EAAsD;AACpD,YAAMC,QAAQ,GAAG,CAAC,GAAGJ,SAAJ,EAAgBE,CAAhB,EAAmBC,CAAnB,CAAjB;AACA,YAAME,IAAI,GAAGV,QAAQ,CAACW,aAAT,CAAuBF,QAAvB,CAAb;;AACA,UAAIC,IAAJ,EAAU;AACR,cAAME,OAAO,GAAGF,IAAI,CAACZ,IAAL,CAAUD,GAAV,IAAiB;AAAE,WAACA,GAAD,GAAOa,IAAI,CAACZ,IAAL,CAAUD,GAAV;AAAT,SAAjB,GAA6C,EAA7D;AACA,cAAMgB,OAAO,GAAGf,IAAI,GAAG;AAAE,WAACD,GAAD,GAAOC;AAAT,SAAH,GAAqB,EAAzC;;AACA,YAAI,CAAC,mCAAmBc,OAAnB,EAA4BC,OAA5B,EAAqCxB,iBAArC,CAAL,EAA8D;AAC5DK,UAAAA,UAAU,CAACoB,OAAX,CAAmBC,sBAASC,aAA5B,EAA2CP,QAA3C,EAAqD;AACnDX,YAAAA,IAAI,EAAE,EACJ,GAAGY,IAAI,CAACZ,IADJ;AAEJ,eAACD,GAAD,GAAOC;AAFH;AAD6C,WAArD;AAMD;AACF;AACF;AACF;;AACD,SAAOJ,UAAP;AACD","sourcesContent":["import { Controller, Block, Commands } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport { isEqualWithDefault } from '@ali/4ever-utils';\nimport { ITableSelection } from '../types';\nimport { DEFAULT_TABLE_ALIGNMENT } from '../constants';\n\nenum CellDataKey {\n  fill = 'fill',\n  vAlign = 'vAlign',\n}\n\nexport const DEFAULT_CELL_DATA = {\n  [CellDataKey.fill]: '',\n  [CellDataKey.vAlign]: DEFAULT_TABLE_ALIGNMENT,\n};\n\nexport default function setCellsData(\n  controller: Controller,\n  table: Table,\n  selection: ITableSelection,\n  key: keyof typeof CellDataKey,\n  data: Record<string, any>,\n) {\n  const { value } = controller;\n  const { document } = value;\n  if (!selection) {\n    return controller;\n  }\n  const {\n    startRowIndex, startColIndex, endRowIndex, endColIndex,\n  } = selection;\n  const tablePath = document.getPath(table.key);\n\n  for (let r = startRowIndex; r <= endRowIndex; r += 1) {\n    for (let c = startColIndex; c <= endColIndex; c += 1) {\n      const cellPath = [...tablePath!, r, c];\n      const cell = document.getNodeByPath(cellPath) as Block | null;\n      if (cell) {\n        const oldData = cell.data[key] ? { [key]: cell.data[key] } : {};\n        const newData = data ? { [key]: data } : {};\n        if (!isEqualWithDefault(oldData, newData, DEFAULT_CELL_DATA)) {\n          controller.command(Commands.setNodeByPath, cellPath, {\n            data: {\n              ...cell.data,\n              [key]: data,\n            },\n          });\n        }\n      }\n    }\n  }\n  return controller;\n}\n"],"file":"setCellsData.js"}