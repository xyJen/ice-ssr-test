{"version":3,"sources":["../../../../src/bi/commands/setTableAutofitWidth.ts"],"names":["setTableColsWidth","controller","table","isAutoFitWidth","maxWidth","prevIsAutoFitWidth","Table","isAutofitWidth","containerWidth","colsWidth","totalWidth","reduce","acc","w","pctColsWidth","newTable","value","document","getNode","key","command","Commands","setNodeByKey","data","cw","Array","isArray","newColsWidth"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,SAASA,iBAAT,CACbC,UADa,EAEbC,KAFa,EAGbC,cAHa,EAIbC,QAJa,EAKb;AACA,QAAMC,kBAAkB,GAAGC,gBAAMC,cAAN,CAAqBL,KAArB,CAA3B;;AACA,MAAIG,kBAAkB,KAAKF,cAA3B,EAA2C,OAAOF,UAAP;AAE3C,MAAIO,cAAc,GAAGJ,QAArB;;AACA,MAAI,CAACI,cAAL,EAAqB;AACnBA,IAAAA,cAAc,GAAG,0CAA4BP,UAA5B,EAAwCC,KAAxC,CAAjB;AACD;;AACD,MAAI,CAACM,cAAL,EAAqB,OAAOP,UAAP;;AAErB,MAAIE,cAAJ,EAAoB;AAClB,QAAIM,SAAS,GAAG,iCAAmBP,KAAnB,CAAhB;AACA,QAAIQ,UAAU,GAAGD,SAAS,CAACE,MAAV,CAAiB,CAACC,GAAD,EAAMC,CAAN,KAAaD,GAAG,GAAGC,CAApC,CAAjB,CAFkB,CAGlB;;AACA,QAAIH,UAAU,GAAGF,cAAjB,EAAiC;AAC/BC,MAAAA,SAAS,GAAG,kCAAoBR,UAApB,EAAgCC,KAAhC,EAAuCM,cAAc,GAAGE,UAAxD,CAAZ;AACAA,MAAAA,UAAU,GAAGD,SAAS,CAACE,MAAV,CAAiB,CAACC,GAAD,EAAMC,CAAN,KAAaD,GAAG,GAAGC,CAApC,CAAb;;AACA,UAAIH,UAAU,GAAGF,cAAjB,EAAiC;AAC/B,eAAOP,UAAP;AACD;AACF;;AACD,UAAMa,YAAY,GAAG,mDAA0BL,SAA1B,EAAqCC,UAArC,CAArB;AAEA,qCAAmBT,UAAnB,EAA+BC,KAA/B;AACA,UAAMa,QAAQ,GAAGd,UAAU,CAACe,KAAX,CAAiBC,QAAjB,CAA0BC,OAA1B,CAAkChB,KAAK,CAACiB,GAAxC,CAAjB;AACA,WAAOlB,UAAU,CAACmB,OAAX,CAAmBC,sBAASC,YAA5B,EAA0CP,QAAQ,CAACI,GAAnD,EAAwD;AAC7DI,MAAAA,IAAI,EAAE,8BAAgB,EACpB,GAAGR,QAAQ,CAACQ,IADQ;AAEpBd,QAAAA,SAAS,EAAEK;AAFS,OAAhB;AADuD,KAAxD,CAAP;AAMD;;AAED,QAAMU,EAAE,GAAGhB,cAAX;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBP,KAAK,CAACqB,IAA5B;AAEA,MAAI,CAACE,KAAK,CAACC,OAAN,CAAcjB,SAAd,CAAL,EAA+B,OAAOR,UAAP;AAE/B,QAAM0B,YAAY,GAAG,mDAA0BzB,KAA1B,EAAiCsB,EAAjC,CAArB;AAEA,mCAAmBvB,UAAnB,EAA+BC,KAA/B,EAAsC,KAAtC;AACA,QAAMa,QAAQ,GAAGd,UAAU,CAACe,KAAX,CAAiBC,QAAjB,CAA0BC,OAA1B,CAAkChB,KAAK,CAACiB,GAAxC,CAAjB;AACA,SAAOlB,UAAU,CAACmB,OAAX,CAAmBC,sBAASC,YAA5B,EAA0CP,QAAQ,CAACI,GAAnD,EAAwD;AAC7DI,IAAAA,IAAI,EAAE,8BAAgB,EACpB,GAAGR,QAAQ,CAACQ,IADQ;AAEpBd,MAAAA,SAAS,EAAEkB;AAFS,KAAhB;AADuD,GAAxD,CAAP;AAMD","sourcesContent":["import { Commands, Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport normalizeColsWidth from '../utils/normalizeColsWidth';\nimport calcResizeColsWidth from '../utils/calcResizeColsWidth';\nimport enableAutofitWidth from '../../utils/commands/enableAutofitWidth';\nimport { convertFromPercentToPixel, convertFromPixelToPercent } from '../../utils/utils/colsWidthConverter';\nimport getTableMaxWidthByContainer from '../../utils/utils/getTableMaxWidthByContainer';\nimport filterValidData from '../../utils/utils/filterValidData';\n\nexport default function setTableColsWidth(\n  controller: Controller,\n  table: Table,\n  isAutoFitWidth: boolean,\n  maxWidth?: number,\n) {\n  const prevIsAutoFitWidth = Table.isAutofitWidth(table);\n  if (prevIsAutoFitWidth === isAutoFitWidth) return controller;\n\n  let containerWidth = maxWidth;\n  if (!containerWidth) {\n    containerWidth = getTableMaxWidthByContainer(controller, table);\n  }\n  if (!containerWidth) return controller;\n\n  if (isAutoFitWidth) {\n    let colsWidth = normalizeColsWidth(table);\n    let totalWidth = colsWidth.reduce((acc, w) => (acc + w));\n    // 若原表格宽度大于容器，判断自适应后的表格是否超出容器，如果超出则不做处理\n    if (totalWidth > containerWidth) {\n      colsWidth = calcResizeColsWidth(controller, table, containerWidth - totalWidth);\n      totalWidth = colsWidth.reduce((acc, w) => (acc + w));\n      if (totalWidth > containerWidth) {\n        return controller;\n      }\n    }\n    const pctColsWidth = convertFromPixelToPercent(colsWidth, totalWidth);\n\n    enableAutofitWidth(controller, table);\n    const newTable = controller.value.document.getNode(table.key)! as Table;\n    return controller.command(Commands.setNodeByKey, newTable.key, {\n      data: filterValidData({\n        ...newTable.data,\n        colsWidth: pctColsWidth,\n      }),\n    });\n  }\n\n  const cw = containerWidth as number;\n  const { colsWidth } = table.data;\n\n  if (!Array.isArray(colsWidth)) return controller;\n\n  const newColsWidth = convertFromPercentToPixel(table, cw);\n\n  enableAutofitWidth(controller, table, false);\n  const newTable = controller.value.document.getNode(table.key)! as Table;\n  return controller.command(Commands.setNodeByKey, newTable.key, {\n    data: filterValidData({\n      ...newTable.data,\n      colsWidth: newColsWidth,\n    }),\n  });\n}\n"],"file":"setTableAutofitWidth.js"}