{"version":3,"sources":["../../../../src/bi/commands/resizeColsWidth.ts"],"names":["resizeColsWidth","controller","payload","node","table","colIndex","resizeColIndex","delta","containerWidth","cw","cols","data","colsWidth","calcColWidth","d","result","width","limitWidth","query","Math","max","MIN_COL_WIDTH","pixelColsWidth","totalColsWidth","isAutofit","Table","isAutofitWidth","reduce","acc","curr","slice","originColWidth","realDelta","length","newTotalWidth","w","newTable","value","document","getNode","key","pctColsWidth"],"mappings":"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","sourcesContent":["import { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport { MIN_COL_WIDTH } from '../constants';\nimport isNumber from '../utils/isNumber';\nimport setTableColsWidth from '../utils/setTableColsWidth';\nimport enableAutofitWidth from '../../utils/commands/enableAutofitWidth';\nimport { convertFromPercentToPixel, convertFromPixelToPercent } from '../../utils/utils/colsWidthConverter';\nimport getTableMaxWidthByContainer from '../../utils/utils/getTableMaxWidthByContainer';\n\ninterface IParams {\n  node: Table;\n  colIndex: number;\n  delta: number;\n  containerWidth?: number;\n}\n\nexport default function resizeColsWidth(controller: Controller, payload: IParams) {\n  const {\n    node: table,\n    colIndex: resizeColIndex,\n    delta,\n    containerWidth: cw,\n  } = payload;\n\n  if (!isNumber(delta) || delta === 0) {\n    return controller;\n  }\n\n  const cols = table.data.colsWidth || [];\n\n  const calcColWidth = (colIndex: number, d: number) => {\n    let result = colsWidth[colIndex] + d;\n    if (d >= 0) {\n      return result;\n    }\n    const { width: limitWidth } = controller.query('calcMinTableColWidth', {\n      node: table,\n      colIndex,\n    }) || {};\n    // 当前列包含某些特殊子节点时，限制当前最小列宽\n    if (typeof limitWidth === 'number') {\n      result = Math.max(result, limitWidth);\n    }\n    return Math.max(result, MIN_COL_WIDTH);\n  };\n\n  let pixelColsWidth = cols;\n  let totalColsWidth = 0;\n  const isAutofit = Table.isAutofitWidth(table);\n  const containerWidth = cw || getTableMaxWidthByContainer(controller, table);\n  if (isAutofit) {\n    pixelColsWidth = convertFromPercentToPixel(table, containerWidth);\n  }\n  totalColsWidth = pixelColsWidth.reduce((acc, curr) => (acc + curr), 0);\n\n  const colsWidth = pixelColsWidth.slice();\n  const originColWidth = colsWidth[resizeColIndex];\n  colsWidth[resizeColIndex] = calcColWidth(resizeColIndex, delta);\n  // 真实的列宽变化\n  const realDelta = colsWidth[resizeColIndex] - originColWidth;\n\n  if (\n    (isAutofit || totalColsWidth <= containerWidth)\n    && resizeColIndex < colsWidth.length - 1\n  ) {\n    colsWidth[resizeColIndex + 1] = calcColWidth(resizeColIndex + 1, -realDelta);\n  }\n\n  if (isAutofit) {\n    const newTotalWidth = colsWidth.reduce((acc, w) => (acc + w), 0);\n    // 当调整后的表格列宽超出传入的 containerWidth 时，将关闭宽度自适应（目前只有移动端会传 containerWidth\n    if ((cw && newTotalWidth > cw) || resizeColIndex === colsWidth.length - 1) {\n      enableAutofitWidth(controller, table, false);\n      const newTable = controller.value.document.getNode(table.key)! as Table;\n      return setTableColsWidth(controller, newTable, colsWidth);\n    }\n    const pctColsWidth = convertFromPixelToPercent(colsWidth, containerWidth);\n    return setTableColsWidth(controller, table, pctColsWidth);\n  }\n  return setTableColsWidth(controller, table, colsWidth);\n}\n"],"file":"resizeColsWidth.js"}