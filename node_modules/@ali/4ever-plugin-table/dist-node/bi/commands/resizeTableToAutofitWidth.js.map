{"version":3,"sources":["../../../../src/bi/commands/resizeTableToAutofitWidth.ts"],"names":["resizeTableToAutofitWidth","controller","table","originTable","containerWidth","Table","isAutofitWidth","colsWidth","data","Array","isArray","originTableWidth","reduce","acc","w","newTableWidth","ratio","newColsWidth","map","containerW","pixelTable","create","deltaPixelWidth","outputPixelColsWidth","tablePixelWidth","newTable","value","document","getNode","key"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,SAASA,yBAAT,CACbC,UADa,EAEbC,KAFa,EAGbC,WAHa,EAIbC,cAJa,EAKb;AACA,MAAI,CAACC,gBAAMC,cAAN,CAAqBJ,KAArB,CAAL,EAAkC,OAAOD,UAAP;AAElC,QAAM;AAAEM,IAAAA;AAAF,MAAgBL,KAAK,CAACM,IAA5B;AAEA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,SAAd,CAAL,EAA+B,OAAON,UAAP;AAE/B,QAAMU,gBAAgB,GAAGR,WAAW,CAACK,IAAZ,CAAiBD,SAAjB,CAA4BK,MAA5B,CAAmC,CAACC,GAAD,EAAMC,CAAN,KAAaD,GAAG,GAAGC,CAAtD,CAAzB;AACA,QAAMC,aAAa,GAAGR,SAAS,CAACK,MAAV,CAAiB,CAACC,GAAD,EAAMC,CAAN,KAAaD,GAAG,GAAGC,CAApC,CAAtB;AAEA,QAAME,KAAK,GAAGL,gBAAgB,GAAGI,aAAjC;AAEA,MAAIE,YAAY,GAAGV,SAAS,CAACW,GAAV,CAAeJ,CAAD,IAAO;AACtC,WAAO,6BAAeA,CAAC,GAAGE,KAAnB,CAAP;AACD,GAFkB,CAAnB;;AAGA,MAAIA,KAAK,GAAG,CAAZ,EAAe;AACb,UAAMG,UAAU,GAAGf,cAAc,IAAI,0CAA4BH,UAA5B,EAAwCC,KAAxC,CAArC;;AACA,QAAIiB,UAAJ,EAAgB;AACd,YAAMC,UAAU,GAAGf,gBAAMgB,MAAN,CAAa,EAC9B,GAAGnB,KAD2B;AAE9BM,QAAAA,IAAI,EAAE,EACJ,GAAGN,KAAK,CAACM,IADL;AAEJD,UAAAA,SAAS,EAAE,mDAA0BL,KAA1B,EAAiCiB,UAAjC;AAFP;AAFwB,OAAb,CAAnB;;AAOA,YAAMG,eAAe,GAAGH,UAAU,IAAIJ,aAAa,GAAGJ,gBAApB,CAAV,GAAkDA,gBAA1E;AACA,YAAMY,oBAAoB,GAAG,kCAAoBtB,UAApB,EAAgCmB,UAAhC,EAA4CE,eAA5C,EAA6DH,UAA7D,CAA7B;AACA,YAAMK,eAAe,GAAGD,oBAAoB,CAACX,MAArB,CAA4B,CAACC,GAAD,EAAMC,CAAN,KAAaD,GAAG,GAAGC,CAA/C,CAAxB;;AACA,UAAIU,eAAe,GAAGL,UAAtB,EAAkC;AAChC,yCAAmBlB,UAAnB,EAA+BC,KAA/B,EAAsC,KAAtC;AACA,cAAMuB,QAAQ,GAAGxB,UAAU,CAACyB,KAAX,CAAiBC,QAAjB,CAA0BC,OAA1B,CAAkC1B,KAAK,CAAC2B,GAAxC,CAAjB;AACA,eAAO,gCAAkB5B,UAAlB,EAA8BwB,QAA9B,EAAwCF,oBAAxC,CAAP;AACD;;AAEDN,MAAAA,YAAY,GAAG,mDAA0BM,oBAA1B,EAAgDJ,UAAhD,CAAf;AACD;AACF;;AAED,SAAO,gCAAkBlB,UAAlB,EAA8BC,KAA9B,EAAqCe,YAArC,CAAP;AACD","sourcesContent":["import { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport setTableColsWidth from '../utils/setTableColsWidth';\nimport calcResizeColsWidth from '../utils/calcResizeColsWidth';\nimport enableAutofitWidth from '../../utils/commands/enableAutofitWidth';\nimport { convertFromPercentToPixel, convertFromPixelToPercent } from '../../utils/utils/colsWidthConverter';\nimport getTableMaxWidthByContainer from '../../utils/utils/getTableMaxWidthByContainer';\nimport formatColWidth from '../../utils/utils/formatColWidth';\n\nexport default function resizeTableToAutofitWidth(\n  controller: Controller,\n  table: Table,\n  originTable: Table,\n  containerWidth?: number,\n) {\n  if (!Table.isAutofitWidth(table)) return controller;\n\n  const { colsWidth } = table.data;\n\n  if (!Array.isArray(colsWidth)) return controller;\n\n  const originTableWidth = originTable.data.colsWidth!.reduce((acc, w) => (acc + w));\n  const newTableWidth = colsWidth.reduce((acc, w) => (acc + w));\n\n  const ratio = originTableWidth / newTableWidth;\n\n  let newColsWidth = colsWidth.map((w) => {\n    return formatColWidth(w * ratio);\n  });\n  if (ratio < 1) {\n    const containerW = containerWidth || getTableMaxWidthByContainer(controller, table);\n    if (containerW) {\n      const pixelTable = Table.create({\n        ...table,\n        data: {\n          ...table.data,\n          colsWidth: convertFromPercentToPixel(table, containerW),\n        },\n      });\n      const deltaPixelWidth = containerW * (newTableWidth - originTableWidth) / originTableWidth;\n      const outputPixelColsWidth = calcResizeColsWidth(controller, pixelTable, deltaPixelWidth, containerW);\n      const tablePixelWidth = outputPixelColsWidth.reduce((acc, w) => (acc + w));\n      if (tablePixelWidth > containerW) {\n        enableAutofitWidth(controller, table, false);\n        const newTable = controller.value.document.getNode(table.key)! as Table;\n        return setTableColsWidth(controller, newTable, outputPixelColsWidth);\n      }\n\n      newColsWidth = convertFromPixelToPercent(outputPixelColsWidth, containerW);\n    }\n  }\n\n  return setTableColsWidth(controller, table, newColsWidth);\n}\n"],"file":"resizeTableToAutofitWidth.js"}