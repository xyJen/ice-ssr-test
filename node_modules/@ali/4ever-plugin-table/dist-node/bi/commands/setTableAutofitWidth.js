"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setTableColsWidth;

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireDefault(require("../../mo/models"));

var _normalizeColsWidth = _interopRequireDefault(require("../utils/normalizeColsWidth"));

var _calcResizeColsWidth = _interopRequireDefault(require("../utils/calcResizeColsWidth"));

var _enableAutofitWidth = _interopRequireDefault(require("../../utils/commands/enableAutofitWidth"));

var _colsWidthConverter = require("../../utils/utils/colsWidthConverter");

var _getTableMaxWidthByContainer = _interopRequireDefault(require("../../utils/utils/getTableMaxWidthByContainer"));

var _filterValidData = _interopRequireDefault(require("../../utils/utils/filterValidData"));

function setTableColsWidth(controller, table, isAutoFitWidth, maxWidth) {
  const prevIsAutoFitWidth = _models.default.isAutofitWidth(table);

  if (prevIsAutoFitWidth === isAutoFitWidth) return controller;
  let containerWidth = maxWidth;

  if (!containerWidth) {
    containerWidth = (0, _getTableMaxWidthByContainer.default)(controller, table);
  }

  if (!containerWidth) return controller;

  if (isAutoFitWidth) {
    let colsWidth = (0, _normalizeColsWidth.default)(table);
    let totalWidth = colsWidth.reduce((acc, w) => acc + w); // 若原表格宽度大于容器，判断自适应后的表格是否超出容器，如果超出则不做处理

    if (totalWidth > containerWidth) {
      colsWidth = (0, _calcResizeColsWidth.default)(controller, table, containerWidth - totalWidth);
      totalWidth = colsWidth.reduce((acc, w) => acc + w);

      if (totalWidth > containerWidth) {
        return controller;
      }
    }

    const pctColsWidth = (0, _colsWidthConverter.convertFromPixelToPercent)(colsWidth, totalWidth);
    (0, _enableAutofitWidth.default)(controller, table);
    const newTable = controller.value.document.getNode(table.key);
    return controller.command(_everCangjie.Commands.setNodeByKey, newTable.key, {
      data: (0, _filterValidData.default)({ ...newTable.data,
        colsWidth: pctColsWidth
      })
    });
  }

  const cw = containerWidth;
  const {
    colsWidth
  } = table.data;
  if (!Array.isArray(colsWidth)) return controller;
  const newColsWidth = (0, _colsWidthConverter.convertFromPercentToPixel)(table, cw);
  (0, _enableAutofitWidth.default)(controller, table, false);
  const newTable = controller.value.document.getNode(table.key);
  return controller.command(_everCangjie.Commands.setNodeByKey, newTable.key, {
    data: (0, _filterValidData.default)({ ...newTable.data,
      colsWidth: newColsWidth
    })
  });
}
//# sourceMappingURL=setTableAutofitWidth.js.map