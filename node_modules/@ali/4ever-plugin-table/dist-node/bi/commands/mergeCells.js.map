{"version":3,"sources":["../../../../src/bi/commands/mergeCells.ts"],"names":["isEmptyCell","cell","nodes","length","firstChild","type","firstGrandChild","Text","isText","text","mergeCells","controller","table","value","document","selection","tableSelection","startRowIndex","startColIndex","endRowIndex","endColIndex","tablePath","getPath","key","firstCellPath","firstCell","getNodeByPath","command","Commands","setNodeByPath","data","rowSpan","colSpan","r","c","hidden","cellPath","childIndex","withoutNormalizing","moveNodeByPath","insertNodeByPath","Block","create","s","moveToStartOfNode","select"],"mappings":"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","sourcesContent":["import { Controller, Commands, Block, Text, Element } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport getDataTableSelectionByTable from '../utils/getDataTableSelectionByTable';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\n\nfunction isEmptyCell(cell: Block) {\n  if (cell.nodes.length > 1) {\n    return false;\n  }\n\n  const firstChild = cell.nodes[0] as Element;\n  if (firstChild.type !== 'paragraph' || firstChild.nodes.length > 1) {\n    return false;\n  }\n\n  const firstGrandChild = firstChild.nodes[0];\n  if (!Text.isText(firstGrandChild)) {\n    return false;\n  }\n\n  return !firstGrandChild.text.length;\n}\n\nexport default function mergeCells(controller: Controller, table: Table) {\n  const { value } = controller;\n  const { document, selection } = value;\n  const tableSelection = getDataTableSelectionByTable(controller, table);\n  if (!tableSelection || !table) {\n    return controller;\n  }\n\n  const {\n    startRowIndex, startColIndex, endRowIndex, endColIndex,\n  } = tableSelection;\n\n  const tablePath = document.getPath(table.key)!;\n  const firstCellPath = [...tablePath, startRowIndex, startColIndex];\n  const firstCell = document.getNodeByPath(firstCellPath) as Block;\n  controller.command(Commands.setNodeByPath, firstCellPath, {\n    data: {\n      ...firstCell.data,\n      rowSpan: endRowIndex - startRowIndex + 1,\n      colSpan: endColIndex - startColIndex + 1,\n    },\n  });\n\n  for (let r = startRowIndex; r <= endRowIndex; r += 1) {\n    for (let c = startColIndex; c <= endColIndex; c += 1) {\n      if (r === startRowIndex && c === startColIndex) continue;\n      // @ts-ignore\n      const cell = table.nodes[r].nodes[c] as Block;\n      if (!cell) continue;\n      if (cell.data?.hidden) continue;\n\n      const cellPath = [...tablePath, r, c];\n      controller.command(Commands.setNodeByPath, cellPath, {\n        data: {\n          ...cell.data,\n          rowSpan: 1,\n          colSpan: 1,\n          hidden: true,\n        },\n      });\n\n      if (isEmptyCell(cell)) continue;\n\n      for (let childIndex = 0; childIndex < cell.nodes.length; childIndex += 1) {\n        controller.withoutNormalizing(() => {\n          controller.command(\n            Commands.moveNodeByPath,\n            [...cellPath, 0],\n            firstCellPath,\n            // @ts-ignore\n            controller.value.document.getNodeByPath(firstCellPath).nodes.length,\n          );\n        });\n      }\n\n      controller.command(\n        Commands.insertNodeByPath,\n        cellPath,\n        0,\n        Block.create({\n          type: 'paragraph',\n          nodes: [Text.create('')],\n        }),\n      );\n    }\n  }\n\n  const s = selection.moveToStartOfNode(firstCell, controller);\n  return controller.command(\n    Commands.select,\n    setSelectionByTable(s, false),\n  );\n}\n"],"file":"mergeCells.js"}