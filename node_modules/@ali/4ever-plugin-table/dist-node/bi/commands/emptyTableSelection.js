"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = emptyTableSelection;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _utils = require("../utils");

var _getDataTableSelectionByTable = _interopRequireDefault(require("../utils/getDataTableSelectionByTable"));

var _setSelectionByTable = _interopRequireDefault(require("../../utils/utils/setSelectionByTable"));

function emptyTableSelection(controller, table) {
  const {
    value
  } = controller;
  const {
    document
  } = value;
  const tableSelection = (0, _getDataTableSelectionByTable.default)(controller, table);
  if (!tableSelection) return controller;
  const {
    startRowIndex,
    startColIndex,
    endRowIndex,
    endColIndex
  } = tableSelection;
  const tablePath = document.getPath(table.key);

  for (let rowIndex = startRowIndex; rowIndex <= endRowIndex; rowIndex += 1) {
    const row = table.nodes[rowIndex];
    if (!row) continue;

    for (let colIndex = startColIndex; colIndex <= endColIndex; colIndex += 1) {
      const cell = row.nodes[colIndex];
      if (!cell) continue;
      const cellPath = [...tablePath, rowIndex, colIndex];

      for (let childIndex = cell.nodes.length - 1; childIndex >= 0; childIndex -= 1) {
        controller.withoutNormalizing(() => {
          controller.command(_everCangjie.Commands.removeNodeByPath, [...cellPath, childIndex]);
        });
      }

      controller.command(_everCangjie.Commands.insertNodeByPath, cellPath, 0, _everPluginParagraph.Paragraph.create({
        nodes: [_everCangjie.Text.create('')]
      }));
    }
  }

  const newTable = controller.value.document.getNode(table.key);
  const cell = (0, _utils.getRealNodeInTable)(newTable, startRowIndex, startColIndex);
  const {
    selection
  } = controller.value;
  const range = (0, _setSelectionByTable.default)(selection, false).moveToRangeOfNode(cell, controller);
  return controller.command(_everCangjie.Commands.select, range);
}
//# sourceMappingURL=emptyTableSelection.js.map