{"version":3,"sources":["../../../../src/bi/handlers/onEnter.ts"],"names":["markdownRegExp","onEnter","event","controller","next","config","value","selection","endBlock","enableAutofitWidth","enableHeader","setTableHeaderStyle","disableDefaultAutofitWidth","isCollapsed","focus","isTextPoint","nodes","length","isAtEndOfNode","matches","text","match","query","preventDefault","defaultAutofit","defaultHeader","splited","split","firstLineTexts","slice","map","str","trim","tableData","colSize","table","rowSize","data","hasFirstRowText","firstRow","index","merge","finalTable","command","Commands","removeTextByKey","key","run","basicActions","createInsertBlockWithoutExtraBlankAction","node"],"mappings":"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","sourcesContent":["import { Commands, Controller, Selection, TextPoint } from '@ali/4ever-cangjie';\nimport { biActions as basicActions } from '@ali/4ever-plugin-basic';\nimport createTableData from '../utils/createTableData';\nimport createTable from '../utils/createTable';\nimport createEmptyParagraph from '../utils/createEmptyParagraph';\nimport { moveToStartOfCell } from '../utils/selectionCommands';\nimport { setTableRowHeader } from '../actions';\nimport type { TableConfig } from '../types';\n\nconst markdownRegExp = /^\\|([^|]+\\|){2,}$/;\n\nexport default function onEnter(event, controller: Controller, next, config: TableConfig) {\n  const { value } = controller;\n  const { selection, endBlock } = value;\n  const {\n    enableAutofitWidth,\n    enableHeader,\n    setTableHeaderStyle,\n    disableDefaultAutofitWidth,\n  } = config;\n\n  if (\n    selection.isCollapsed\n    && selection.focus.isTextPoint()\n    && endBlock?.nodes.length === 1\n    && selection.focus.isAtEndOfNode(endBlock)\n  ) {\n    const matches = endBlock.text.match(markdownRegExp);\n    if (matches && controller.query('canInsertTable')) {\n      event.preventDefault();\n      const defaultAutofit = enableAutofitWidth?.() && !disableDefaultAutofitWidth?.();\n      const defaultHeader = enableHeader?.();\n      const splited = matches[0].split('|');\n      const firstLineTexts = splited.slice(1, splited.length - 1).map((str) => str.trim());\n      const tableData = createTableData(controller, { colSize: firstLineTexts.length, defaultAutofit });\n      const table = createTable({\n        rowSize: 2,\n        colSize: firstLineTexts.length,\n        data: tableData,\n      });\n\n      let hasFirstRowText = false;\n      const firstRow = table.nodes[0];\n      const nodes = firstLineTexts.map((text, index) => {\n        if (text) {\n          hasFirstRowText = true;\n          return firstRow.nodes[index].merge({\n            nodes: [createEmptyParagraph(text)]\n          });\n        }\n        return firstRow.nodes[index];\n      });\n      const finalTable = table.merge({\n        nodes: [firstRow.merge({ nodes }), table.nodes[1]]\n      });\n\n\n      if (defaultHeader) {\n        // NOTE: 需要先执行 setTableHeaderStyle\n        setTableHeaderStyle?.();\n      }\n\n      // 删除 md 文本并插入表格\n      controller\n        .command(Commands.removeTextByKey, selection.focus.key, 0, endBlock.text)\n        .run('onAction', basicActions.createInsertBlockWithoutExtraBlankAction({ node: finalTable }));\n\n      // 首行没有文字时，插入后 focus 在第二行，否则就 focus 在第一行\n      moveToStartOfCell(controller, finalTable, hasFirstRowText ? 1 : 0, 0);\n\n      if (defaultHeader) {\n        controller.run('onAction', setTableRowHeader(finalTable));\n      }\n      return controller;\n    }\n  }\n\n  return next();\n}\n"],"file":"onEnter.js"}