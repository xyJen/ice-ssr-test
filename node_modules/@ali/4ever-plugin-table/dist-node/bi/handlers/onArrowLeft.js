"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onArrowLeft;

var _everCangjie = require("@ali/4ever-cangjie");

var _types = require("../types");

var _selectionCommands = require("../utils/selectionCommands");

var _setSelectionByTable = _interopRequireDefault(require("../../utils/utils/setSelectionByTable"));

function onArrowLeft(event, controller, next) {
  const {
    value
  } = controller;
  const {
    selection,
    document,
    startText
  } = value;
  const tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    event.preventDefault();
    const table = document.getNode(tableSelection.key);

    if (!table) {
      return;
    }

    const {
      startColIndex,
      startRowIndex
    } = tableSelection;
    return (0, _selectionCommands.moveToStartOfCell)(controller, table, startRowIndex, startColIndex);
  }

  if (selection.isExpanded || !selection.getStart(document).isAtStartOfNode(startText)) return next();
  const prevText = document.getPreviousText(startText.key);
  if (!prevText) return next();
  const cell = document.getClosest(prevText.key, _types.isTableCell);
  if (!cell || !cell.data.hidden) return next();
  let currentCell = cell;

  do {
    let prevCell = document.getPreviousSibling(currentCell.key);

    if (!prevCell) {
      const currentRow = document.getParent(currentCell.key);
      const prevRow = document.getPreviousSibling(currentRow.key);
      if (!prevRow) return next(); // @ts-ignore

      prevCell = prevRow.nodes[prevRow.nodes.length - 1];
    } // @ts-ignore


    currentCell = prevCell;
  } while (currentCell.data.hidden || false);

  const s = selection.moveToEndOfNode(currentCell, controller);
  return controller.command(_everCangjie.Commands.select, (0, _setSelectionByTable.default)(s, false));
}
//# sourceMappingURL=onArrowLeft.js.map