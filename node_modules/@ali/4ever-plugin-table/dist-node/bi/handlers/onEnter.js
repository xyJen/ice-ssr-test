"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onEnter;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginBasic = require("@ali/4ever-plugin-basic");

var _createTableData = _interopRequireDefault(require("../utils/createTableData"));

var _createTable = _interopRequireDefault(require("../utils/createTable"));

var _createEmptyParagraph = _interopRequireDefault(require("../utils/createEmptyParagraph"));

var _selectionCommands = require("../utils/selectionCommands");

var _actions = require("../actions");

const markdownRegExp = /^\|([^|]+\|){2,}$/;

function onEnter(event, controller, next, config) {
  const {
    value
  } = controller;
  const {
    selection,
    endBlock
  } = value;
  const {
    enableAutofitWidth,
    enableHeader,
    setTableHeaderStyle,
    disableDefaultAutofitWidth
  } = config;

  if (selection.isCollapsed && selection.focus.isTextPoint() && endBlock?.nodes.length === 1 && selection.focus.isAtEndOfNode(endBlock)) {
    const matches = endBlock.text.match(markdownRegExp);

    if (matches && controller.query('canInsertTable')) {
      event.preventDefault();
      const defaultAutofit = enableAutofitWidth?.() && !disableDefaultAutofitWidth?.();
      const defaultHeader = enableHeader?.();
      const splited = matches[0].split('|');
      const firstLineTexts = splited.slice(1, splited.length - 1).map(str => str.trim());
      const tableData = (0, _createTableData.default)(controller, {
        colSize: firstLineTexts.length,
        defaultAutofit
      });
      const table = (0, _createTable.default)({
        rowSize: 2,
        colSize: firstLineTexts.length,
        data: tableData
      });
      let hasFirstRowText = false;
      const firstRow = table.nodes[0];
      const nodes = firstLineTexts.map((text, index) => {
        if (text) {
          hasFirstRowText = true;
          return firstRow.nodes[index].merge({
            nodes: [(0, _createEmptyParagraph.default)(text)]
          });
        }

        return firstRow.nodes[index];
      });
      const finalTable = table.merge({
        nodes: [firstRow.merge({
          nodes
        }), table.nodes[1]]
      });

      if (defaultHeader) {
        // NOTE: 需要先执行 setTableHeaderStyle
        setTableHeaderStyle?.();
      } // 删除 md 文本并插入表格


      controller.command(_everCangjie.Commands.removeTextByKey, selection.focus.key, 0, endBlock.text).run('onAction', _everPluginBasic.biActions.createInsertBlockWithoutExtraBlankAction({
        node: finalTable
      })); // 首行没有文字时，插入后 focus 在第二行，否则就 focus 在第一行

      (0, _selectionCommands.moveToStartOfCell)(controller, finalTable, hasFirstRowText ? 1 : 0, 0);

      if (defaultHeader) {
        controller.run('onAction', (0, _actions.setTableRowHeader)(finalTable));
      }

      return controller;
    }
  }

  return next();
}
//# sourceMappingURL=onEnter.js.map