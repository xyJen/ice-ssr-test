"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onTab;

var _everCangjie = require("@ali/4ever-cangjie");

var _insertRow = _interopRequireDefault(require("../commands/insertRow"));

var _isSelectionInTableCell = _interopRequireDefault(require("../utils/isSelectionInTableCell"));

var _types = require("../types");

var _utils = require("../utils");

function getPreviousNonHiddenCell(document, cell) {
  let prevCell = document.getPreviousSibling(cell.key);

  if (!prevCell) {
    const row = document.getClosest(cell.key, _types.isTableRow);
    const prevRow = document.getPreviousSibling(row.key);

    if (prevRow) {
      prevCell = prevRow.nodes[prevRow.nodes.length - 1];
    } else {
      return null;
    }
  }

  if (prevCell.data.hidden) {
    return getPreviousNonHiddenCell(document, prevCell);
  }

  return prevCell;
}

function getNextNonHiddenCell(editor, document, cell) {
  let nextCell = document.getNextSibling(cell.key);

  if (!nextCell) {
    const row = document.getClosest(cell.key, _types.isTableRow);
    let nextRow = document.getNextSibling(row.key);

    if (!nextRow) {
      (0, _insertRow.default)(editor, row, 'insert-row-below'); // 必须使用更新后的 document

      nextRow = editor.value.document.getNextSibling(row.key);
    }

    nextCell = nextRow.nodes[0];
  }

  if (nextCell.data.hidden) {
    return getNextNonHiddenCell(editor, document, nextCell);
  }

  return nextCell;
}

function onTab(event, controller, next) {
  const {
    value
  } = controller;
  const {
    document,
    startBlock
  } = value;
  const tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    event.preventDefault();
    const table = document.getNode(tableSelection.key);
    const {
      startColIndex,
      startRowIndex
    } = tableSelection;
    const firstCell = (0, _utils.getRealNodeInTable)(table, startRowIndex, startColIndex);
    return controller.command(_everCangjie.Commands.moveToRangeOfNode, firstCell);
  }

  if (!(0, _isSelectionInTableCell.default)(value)) return next();
  event.preventDefault();
  const cell = document.getClosest(startBlock.key, _types.isTableCell);

  if (!cell) {
    return;
  }

  const table = document.getClosest(startBlock.key, _types.isTable);

  if (event.shiftKey) {
    const prevCell = getPreviousNonHiddenCell(document, cell);

    if (prevCell) {
      if (prevCell.text) {
        controller.command(_everCangjie.Commands.moveToRangeOfNode, prevCell);
      } else {
        controller.command(_everCangjie.Commands.moveToStartOfNode, prevCell);
      }

      return controller;
    }

    return next();
  }

  if (table.data.sr && !document.getNextSibling(cell.key)) {
    return;
  }

  const nextCell = getNextNonHiddenCell(controller, document, cell);

  if (nextCell.text) {
    return controller.command(_everCangjie.Commands.moveToRangeOfNode, nextCell);
  }

  return controller.command(_everCangjie.Commands.moveToStartOfNode, nextCell);
}
//# sourceMappingURL=onTab.js.map