{"version":3,"sources":["../../../../src/bi/handlers/onTab.ts"],"names":["getPreviousNonHiddenCell","document","cell","prevCell","getPreviousSibling","key","row","getClosest","isTableRow","prevRow","nodes","length","data","hidden","getNextNonHiddenCell","editor","nextCell","getNextSibling","nextRow","value","onTab","event","controller","next","startBlock","tableSelection","query","preventDefault","table","getNode","startColIndex","startRowIndex","firstCell","command","Commands","moveToRangeOfNode","isTableCell","isTable","shiftKey","text","moveToStartOfNode","sr"],"mappings":"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","sourcesContent":["import { Commands, Controller, Document } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport TableRow from '../../mo/models/tableRow';\nimport TableCell from '../../mo/models/tableCell';\nimport insertRow from '../commands/insertRow';\nimport isSelectionInTableCell from '../utils/isSelectionInTableCell';\nimport { isTable, isTableCell, isTableRow } from '../types';\nimport { getRealNodeInTable } from '../utils';\n\nfunction getPreviousNonHiddenCell(document: Document, cell: TableCell): TableCell | null {\n  let prevCell = document.getPreviousSibling(cell.key) as TableCell;\n  if (!prevCell) {\n    const row = document.getClosest(cell.key, isTableRow) as TableRow;\n    const prevRow = document.getPreviousSibling(row.key) as TableRow;\n    if (prevRow) {\n      prevCell = prevRow.nodes[prevRow.nodes.length - 1];\n    } else {\n      return null;\n    }\n  }\n  if (prevCell.data.hidden) {\n    return getPreviousNonHiddenCell(document, prevCell);\n  }\n  return prevCell;\n}\n\nfunction getNextNonHiddenCell(editor, document, cell) {\n  let nextCell: TableCell = document.getNextSibling(cell.key);\n  if (!nextCell) {\n    const row: TableRow = document.getClosest(cell.key, isTableRow);\n    let nextRow: TableRow = document.getNextSibling(row.key);\n    if (!nextRow) {\n      insertRow(editor, row, 'insert-row-below');\n      // 必须使用更新后的 document\n      nextRow = editor.value.document.getNextSibling(row.key);\n    }\n    nextCell = nextRow.nodes[0];\n  }\n  if (nextCell.data.hidden) {\n    return getNextNonHiddenCell(editor, document, nextCell);\n  }\n  return nextCell;\n}\n\nexport default function onTab(event, controller: Controller, next) {\n  const { value } = controller;\n  const { document, startBlock } = value;\n  const tableSelection = controller.query('tableSelection');\n  if (tableSelection) {\n    event.preventDefault();\n    const table = document.getNode(tableSelection.key) as Table;\n    const { startColIndex, startRowIndex } = tableSelection;\n    const firstCell = getRealNodeInTable(table, startRowIndex, startColIndex);\n    return controller.command(Commands.moveToRangeOfNode, firstCell!);\n  }\n\n  if (!isSelectionInTableCell(value)) return next();\n\n  event.preventDefault();\n\n  const cell = document.getClosest(startBlock!.key, isTableCell) as TableCell;\n  if (!cell) {\n    return;\n  }\n  const table = document.getClosest(startBlock!.key, isTable) as Table;\n\n  if (event.shiftKey) {\n    const prevCell = getPreviousNonHiddenCell(document, cell);\n    if (prevCell) {\n      if (prevCell.text) {\n        controller.command(Commands.moveToRangeOfNode, prevCell);\n      } else {\n        controller.command(Commands.moveToStartOfNode, prevCell);\n      }\n      return controller;\n    }\n    return next();\n  }\n\n  if (table.data.sr && !document.getNextSibling(cell.key)) {\n    return;\n  }\n\n  const nextCell = getNextNonHiddenCell(controller, document, cell);\n  if (nextCell.text) {\n    return controller.command(Commands.moveToRangeOfNode, nextCell);\n  }\n  return controller.command(Commands.moveToStartOfNode, nextCell);\n}\n"],"file":"onTab.js"}