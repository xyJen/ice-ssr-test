{"version":3,"sources":["../../../../src/bi/handlers/createOnCangjieCut.ts"],"names":["MIME_TYPES","constants","createOnCangjieCut","isMobile","onCangjieCut","event","controller","next","clipboardData","value","document","selection","start","getStart","startCell","getClosest","key","TableCell","isTableCell","hasVoidParent","nodes","length","targetCellKey","targetCell","getNode","Block","isBlock","withoutNormalizing","notBlockNode","command","Commands","removeNodeByKey","insertNodeByKey","focusCell","s","moveToStartOfNode","select","insertBlock","encodedFragment","getData","FRAGMENT","fragment","transferUtils","decodeFragment","tableSelection","query","setClipboardData","setData","encodeFragment","tablePath","assertPath","table","assertNodeByPath","Table","isTable","isSelectWholeTable","node","run","shouldTransfrom","newFragment"],"mappings":";;;;;;;;;AAAA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,sBAAvB;;AAEe,SAASC,kBAAT,CAA4BC,QAAQ,GAAG,KAAvC,EAA8C;AAC3D,SAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCC,IAAzC,EAA+C;AACpD,QAAI,CAACF,KAAK,CAACG,aAAX,EAA0B;AACxB,aAAOD,IAAI,EAAX;AACD;;AAED,UAAM;AAAEE,MAAAA;AAAF,QAAYH,UAAlB;AACA,UAAM;AAAEI,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BF,KAAhC;AAEA,UAAMG,KAAK,GAAGD,SAAS,CAACE,QAAV,CAAmBH,QAAnB,CAAd;AACA,UAAMI,SAAS,GAAGJ,QAAQ,CAACK,UAAT,CAChBH,KAAK,CAACI,GADU,EAEhBC,mBAAUC,WAFM,CAAlB;;AAIA,QAAIJ,SAAJ,EAAe;AACb;AACA;AACA;AACA,UACEJ,QAAQ,CAACS,aAAT,CAAuBP,KAAK,CAACI,GAA7B,EAAkCV,UAAlC,KACAQ,SAAS,CAACM,KAAV,CAAgBC,MAAhB,KAA2B,CAF7B,EAGE;AACAd,QAAAA,IAAI;AACJ,cAAMe,aAAa,GAAGR,SAAS,CAACE,GAAhC;AACA,cAAMO,UAAU,GAAGjB,UAAU,CAACG,KAAX,CAAiBC,QAAjB,CAA0Bc,OAA1B,CACjBF,aADiB,CAAnB;;AAGA,YAAI,CAACG,mBAAMC,OAAN,CAAcH,UAAU,CAACH,KAAX,CAAiB,CAAjB,CAAd,CAAL,EAAyC;AACvC,iBAAOd,UAAU,CAACqB,kBAAX,CAA8B,MAAM;AACzC,kBAAMC,YAAY,GAAGL,UAAU,CAACH,KAAX,CAAiB,CAAjB,CAArB;AACAd,YAAAA,UAAU,CACPuB,OADH,CACWC,sBAASC,eADpB,EACqCH,YAAY,CAACZ,GADlD,EAEGa,OAFH,CAGIC,sBAASE,eAHb,EAIIT,UAAU,CAACP,GAJf,EAKI,CALJ,EAMI,kCANJ;AAQA,kBAAMiB,SAAS,GAAG3B,UAAU,CAACG,KAAX,CAAiBC,QAAjB,CAA0Bc,OAA1B,CAChBF,aADgB,CAAlB;AAGA,kBAAMY,CAAC,GAAG,kCAAoBvB,SAApB,EAA+B,KAA/B,EAAsCwB,iBAAtC,CACRF,SADQ,EAER3B,UAFQ,CAAV;AAIAA,YAAAA,UAAU,CAACuB,OAAX,CAAmBC,sBAASM,MAA5B,EAAoCF,CAApC;AACD,WAlBM,CAAP;AAmBD;;AACD,eAAO5B,UAAU,CAACuB,OAAX,CAAmBC,sBAASO,WAA5B,EAAyC,WAAzC,CAAP;AACD;AACF;;AAED,UAAMC,eAAe,GAAGjC,KAAK,CAACG,aAAN,CAAoB+B,OAApB,CAA4BvC,UAAU,CAACwC,QAAvC,CAAxB;;AACA,QAAIC,QAAQ,GAAGC,2BAAcC,cAAd,CAA6BL,eAA7B,CAAf;;AACA,UAAMM,cAAc,GAAGtC,UAAU,CAACuC,KAAX,CAAiB,gBAAjB,CAAvB;;AACA,QAAI,CAACD,cAAL,EAAqB;AACnB,UAAIH,QAAQ,IAAI,kCAAkBA,QAAlB,CAAhB,EAA6C;AAC3C,eAAOlC,IAAI,CACTF,KAAK,CAACyC,gBAAN,CACEzC,KAAK,CAACG,aAAN,CAAoBuC,OAApB,CACE/C,UAAU,CAACwC,QADb,EAEEE,2BAAcM,cAAd,CAA6B,sDAAwBP,QAAxB,CAA7B,CAFF,CADF,CADS,CAAX;AAQD;AACF,KAXD,MAWO,IAAIG,cAAJ,EAAoB;AACzB,YAAMK,SAAS,GAAGvC,QAAQ,CAACwC,UAAT,CAAoBN,cAAc,CAAC5B,GAAnC,CAAlB;AACA,YAAMmC,KAAK,GAAGzC,QAAQ,CAAC0C,gBAAT,CAA0BH,SAA1B,CAAd;;AACA,UAAII,gBAAMC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxBV,QAAAA,QAAQ,GAAG,kDAAoCU,KAApC,EAA2CP,cAA3C,CAAX;;AACA,YAAItC,UAAU,CAACuC,KAAX,CAAiBU,2BAAjB,EAAqC;AAAEC,UAAAA,IAAI,EAAEL;AAAR,SAArC,CAAJ,EAA2D;AACzD;AACA7C,UAAAA,UAAU,CAACmD,GAAX,CAAe,UAAf,EAA2B,0BAAYN,KAAZ,CAA3B;AACD,SAHD,MAGO;AACL;AACA7C,UAAAA,UAAU,CAACmD,GAAX,CAAe,UAAf,EAA2B,kCAAoBN,KAApB,CAA3B;AACD;AACF;AACF;;AACD,QAAIV,QAAJ,EAAc;AACZ,YAAM;AAAEiB,QAAAA,eAAF;AAAmBjB,QAAAA,QAAQ,EAAEkB;AAA7B,UACJ,gDAAkCjD,QAAlC,EAA4C+B,QAA5C,EAAsDtC,QAAtD,CADF;;AAEA,UAAIuD,eAAe,IAAId,cAAvB,EAAuC;AACrC,eAAOrC,IAAI,CACTF,KAAK,CAACyC,gBAAN,CACEzC,KAAK,CAACG,aAAN,CAAoBuC,OAApB,CACE/C,UAAU,CAACwC,QADb,EAEEE,2BAAcM,cAAd,CAA6BW,WAA7B,CAFF,CADF,CADS,CAAX;AAQD;AACF;;AAED,WAAOpD,IAAI,EAAX;AACD,GA/FD;AAgGD","sourcesContent":["import {\n  Block,\n  Commands,\n  constants,\n  transferUtils,\n} from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport TableCell from '../../mo/models/tableCell';\nimport isSelectWholeTable from '../queries/isSelectWholeTable';\nimport { deleteTable, emptyTableSelection } from '../actions';\nimport generateClipTableFromTableSelection from '../utils/generateClipTableFromTableSelection';\nimport { createEmptyParagraph } from '../utils';\nimport setSelectionByTable from '../../utils/utils/setSelectionByTable';\nimport transformTablesToCompatibleLegacy from '../../utils/utils/transformTablesToCompatibleLegacy';\nimport { isSingleTableCell } from '@ali/4ever-utils';\nimport { normalizeClipboardTable } from '../../utils/utils/normalizeClipboardTable';\n\nconst { MIME_TYPES } = constants;\n\nexport default function createOnCangjieCut(isMobile = false) {\n  return function onCangjieCut(event, controller, next) {\n    if (!event.clipboardData) {\n      return next();\n    }\n\n    const { value } = controller;\n    const { document, selection } = value;\n\n    const start = selection.getStart(document);\n    const startCell = document.getClosest(\n      start.key,\n      TableCell.isTableCell,\n    ) as TableCell;\n    if (startCell) {\n      // 当单元格内只有一个节点且类型为 block void 时\n      // 剪切该节点导致单元格内无 block 节点，单元格损坏\n      // fix：在剪切后插入空段落并使光标 focus 在单元格内\n      if (\n        document.hasVoidParent(start.key, controller) &&\n        startCell.nodes.length === 1\n      ) {\n        next();\n        const targetCellKey = startCell.key;\n        const targetCell = controller.value.document.getNode(\n          targetCellKey,\n        ) as TableCell;\n        if (!Block.isBlock(targetCell.nodes[0])) {\n          return controller.withoutNormalizing(() => {\n            const notBlockNode = targetCell.nodes[0];\n            controller\n              .command(Commands.removeNodeByKey, notBlockNode.key)\n              .command(\n                Commands.insertNodeByKey,\n                targetCell.key,\n                0,\n                createEmptyParagraph(),\n              );\n            const focusCell = controller.value.document.getNode(\n              targetCellKey,\n            ) as TableCell;\n            const s = setSelectionByTable(selection, false).moveToStartOfNode(\n              focusCell,\n              controller,\n            );\n            controller.command(Commands.select, s);\n          });\n        }\n        return controller.command(Commands.insertBlock, 'paragraph');\n      }\n    }\n\n    const encodedFragment = event.clipboardData.getData(MIME_TYPES.FRAGMENT);\n    let fragment = transferUtils.decodeFragment(encodedFragment);\n    const tableSelection = controller.query('tableSelection');\n    if (!tableSelection) {\n      if (fragment && isSingleTableCell(fragment)) {\n        return next(\n          event.setClipboardData(\n            event.clipboardData.setData(\n              MIME_TYPES.FRAGMENT,\n              transferUtils.encodeFragment(normalizeClipboardTable(fragment)),\n            ),\n          ),\n        );\n      }\n    } else if (tableSelection) {\n      const tablePath = document.assertPath(tableSelection.key);\n      const table = document.assertNodeByPath(tablePath) as Table;\n      if (Table.isTable(table)) {\n        fragment = generateClipTableFromTableSelection(table, tableSelection);\n        if (controller.query(isSelectWholeTable, { node: table })) {\n          // 删除整个 table\n          controller.run('onAction', deleteTable(table));\n        } else {\n          // 清空选区\n          controller.run('onAction', emptyTableSelection(table));\n        }\n      }\n    }\n    if (fragment) {\n      const { shouldTransfrom, fragment: newFragment } =\n        transformTablesToCompatibleLegacy(document, fragment, isMobile);\n      if (shouldTransfrom || tableSelection) {\n        return next(\n          event.setClipboardData(\n            event.clipboardData.setData(\n              MIME_TYPES.FRAGMENT,\n              transferUtils.encodeFragment(newFragment),\n            ),\n          ),\n        );\n      }\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnCangjieCut.js"}