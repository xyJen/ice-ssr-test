"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnKeyDown;

var _everCangjie = require("@ali/4ever-cangjie");

var _isHotkey = require("is-hotkey");

var _types = require("../types");

var _onTab = _interopRequireDefault(require("./onTab"));

var _onArrowUp = _interopRequireDefault(require("./onArrowUp"));

var _onArrowRight = _interopRequireDefault(require("./onArrowRight"));

var _onArrowDown = _interopRequireDefault(require("./onArrowDown"));

var _onArrowLeft = _interopRequireDefault(require("./onArrowLeft"));

var _onSelectAll = _interopRequireDefault(require("./onSelectAll"));

var _onDelete = _interopRequireDefault(require("./onDelete"));

var _onEmptyDelete = _interopRequireDefault(require("./onEmptyDelete"));

var _onEnter = _interopRequireDefault(require("./onEnter"));

const isTabHotKey = (0, _isHotkey.isKeyHotkey)('shift?+tab');
const isArrowUpHotKey = (0, _isHotkey.isKeyHotkey)('up');
const isArrowRightHotKey = (0, _isHotkey.isKeyHotkey)('right');
const isArrowDownHotKey = (0, _isHotkey.isKeyHotkey)('down');
const isArrowLeftHotKey = (0, _isHotkey.isKeyHotkey)('left');
const isSelectAllHotKey = (0, _isHotkey.isKeyHotkey)('mod+a');
const isBackspaceHotKey = (0, _isHotkey.isKeyHotkey)('backspace');
const isDeleteHotKey = (0, _isHotkey.isKeyHotkey)('delete');
const isEnterHotKey = (0, _isHotkey.isKeyHotkey)('enter');
/**
 * 以下事件在当前表格内容为空时执行的默认公共逻辑会导致表格样式错乱问题，因此需要在table插件中进行拦截处理
 * @param event
 * @returns
 */

const shouldPreventDelete = event => {
  return _everCangjie.hotkeys.isDeleteLineForward(event) || _everCangjie.hotkeys.isDeleteLineBackward(event) || _everCangjie.hotkeys.isDeleteForward(event) || _everCangjie.hotkeys.isDeleteBackward(event) || _everCangjie.hotkeys.isDeleteWordForward(event) || _everCangjie.hotkeys.isDeleteWordBackward(event);
};

function createOnKeyDown(config) {
  return function onKeyDown(event, controller, next) {
    const {
      value
    } = controller;
    const {
      document,
      startBlock,
      endBlock
    } = value;
    if (!startBlock || !endBlock) return next(); // TODO: 表格现在的 Paste 会经过严密的 normalize 保证不会挂掉，所以许多处理选区的逻辑可以废弃，后续可以接受不规整的选区
    // 阻止用户从table外围同时选择文字和表格内容时keydown产生不规则表格(选中非整个table)

    const startTable = document.getClosest(startBlock.key, _types.isTable);
    const endTable = document.getClosest(endBlock.key, _types.isTable);

    if (startTable && !endTable || !startTable && endTable) {
      // copy 事件放行
      if (!_everCangjie.hotkeys.isCopy(event)) {
        event.preventDefault();
      }

      return controller;
    }

    if (isTabHotKey(event)) {
      return (0, _onTab.default)(event, controller, next);
    }

    if (isArrowUpHotKey(event)) {
      return (0, _onArrowUp.default)(event, controller, next);
    }

    if (isArrowRightHotKey(event)) {
      return (0, _onArrowRight.default)(event, controller, next);
    }

    if (isArrowDownHotKey(event)) {
      return (0, _onArrowDown.default)(event, controller, next);
    }

    if (isArrowLeftHotKey(event)) {
      return (0, _onArrowLeft.default)(event, controller, next);
    }

    if (isSelectAllHotKey(event)) {
      return (0, _onSelectAll.default)(controller, next, event);
    }

    if (isBackspaceHotKey(event) || isDeleteHotKey(event)) {
      return (0, _onDelete.default)(event, controller, next);
    }

    if (isEnterHotKey(event)) {
      return (0, _onEnter.default)(event, controller, next, config);
    } // 是否需要阻止仓颉默认删除行为


    if (shouldPreventDelete(event)) {
      return (0, _onEmptyDelete.default)(controller, next);
    }

    return next();
  };
}
//# sourceMappingURL=createOnKeyDown.js.map