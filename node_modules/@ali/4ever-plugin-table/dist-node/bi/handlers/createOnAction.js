"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnAction;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginDraggable = require("@ali/4ever-plugin-draggable");

var _tableCell = _interopRequireDefault(require("../../mo/models/tableCell"));

var _actions = require("../actions");

var _resizeTableWidth = _interopRequireDefault(require("../commands/resizeTableWidth"));

var _resizeTableWidthFitContainer = _interopRequireDefault(require("../commands/resizeTableWidthFitContainer"));

var _setTableAutofitWidth = _interopRequireDefault(require("../commands/setTableAutofitWidth"));

var _resizeTableHeight = _interopRequireDefault(require("../commands/resizeTableHeight"));

var _resizeColsWidth = _interopRequireDefault(require("../commands/resizeColsWidth"));

var _resizeRowsHeight = _interopRequireDefault(require("../commands/resizeRowsHeight"));

var _emptyTableSelection = _interopRequireDefault(require("../commands/emptyTableSelection"));

var _mergeCells = _interopRequireDefault(require("../commands/mergeCells"));

var _splitCell = _interopRequireDefault(require("../commands/splitCell"));

var _deleteTable = _interopRequireDefault(require("../commands/deleteTable"));

var _insertTable = _interopRequireDefault(require("../commands/insertTable"));

var _insertRow = _interopRequireDefault(require("../commands/insertRow"));

var _moveRows = _interopRequireDefault(require("../commands/moveRows"));

var _insertRowBySelections = _interopRequireDefault(require("../commands/insertRowBySelections"));

var _insertCol = _interopRequireDefault(require("../commands/insertCol"));

var _moveCols = _interopRequireDefault(require("../commands/moveCols"));

var _deleteRows = _interopRequireDefault(require("../commands/deleteRows"));

var _deleteCols = _interopRequireDefault(require("../commands/deleteCols"));

var _selectTableSelection = _interopRequireDefault(require("../commands/selectTableSelection"));

var _selectCols = _interopRequireDefault(require("../commands/selectCols"));

var _selectRows = _interopRequireDefault(require("../commands/selectRows"));

var _selectWholeTable = _interopRequireDefault(require("../commands/selectWholeTable"));

var _setCellsData = _interopRequireDefault(require("../commands/setCellsData"));

var _setTableBorder = _interopRequireDefault(require("../commands/setTableBorder"));

var _utils = require("../utils");

var _onSelectAll = _interopRequireDefault(require("./onSelectAll"));

var _toggleRowHeader = _interopRequireDefault(require("../commands/toggleRowHeader"));

var _toggleColHeader = _interopRequireDefault(require("../commands/toggleColHeader"));

var commands = _interopRequireWildcard(require("../../utils/commands"));

/* eslint-disable no-shadow */
const {
  setTableMinColsWidthData,
  adjustColsWidth
} = commands;

function createOnAction(config) {
  return function onAction(action, controller, next) {
    const isDropFragmentAction = controller.isActionFactory('isDropFragmentAction');
    const {
      enableAutofitWidth,
      enableHeader,
      setTableHeaderStyle,
      disableDefaultAutofitWidth
    } = config;

    if (_actions.isActions.isTableResizeTableWidthAction(action)) {
      const {
        node,
        delta,
        maxWidth
      } = action.payload;
      return (0, _resizeTableWidth.default)(controller, node, delta, maxWidth);
    }

    if (_actions.isActions.isTableResizeTableWidthFitContainerAction(action)) {
      const {
        node,
        containerWidth
      } = action.payload;
      return (0, _resizeTableWidthFitContainer.default)(controller, node, containerWidth);
    }

    if (_actions.isActions.isTablesetTableAutofitWidthEnableAction(action)) {
      const {
        node,
        containerWidth
      } = action.payload;
      return (0, _setTableAutofitWidth.default)(controller, node, true, containerWidth);
    }

    if (_actions.isActions.isTableSetTableAutofitWidthDisableAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _setTableAutofitWidth.default)(controller, node, false);
    }

    if (_actions.isActions.isTableResizeTableHeightAction(action)) {
      const {
        node,
        rowsHeight,
        delta
      } = action.payload;
      return (0, _resizeTableHeight.default)(controller, node, rowsHeight, delta);
    }

    if (_actions.isActions.isTableResizeTableColWidthAction(action)) {
      const {
        node,
        colIndex,
        delta
      } = action.payload;
      return (0, _resizeColsWidth.default)(controller, {
        node,
        colIndex,
        delta
      });
    }

    if (_actions.isActions.isTableSetTableRowHeightAction(action)) {
      // 原来是node为table，然后传rowIndex
      // 现在改为node为tableRow，table通过tableRow找
      const {
        node,
        newHeight
      } = action.payload;
      return (0, _resizeRowsHeight.default)(controller, node, newHeight);
    }

    if (_actions.isActions.isTableSetTableCellVAlignAction(action)) {
      const {
        node,
        selection,
        vAlign
      } = action.payload;
      return (0, _setCellsData.default)(controller, node, selection, 'vAlign', vAlign);
    }

    if (_actions.isActions.isTableSetTableCellFillAction(action)) {
      const {
        node,
        selection,
        fill
      } = action.payload;
      return (0, _setCellsData.default)(controller, node, selection, 'fill', fill);
    }

    if (_actions.isActions.isTableSetTableBorderAction(action)) {
      const {
        node,
        selection,
        borderSetType,
        color,
        sz,
        type
      } = action.payload;
      return (0, _setTableBorder.default)(controller, node, selection, borderSetType, color, sz, type);
    }

    if (_actions.isActions.isTableEmptySelectionAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _emptyTableSelection.default)(controller, node);
    }

    if (_actions.isActions.isTableMergeCellsAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _mergeCells.default)(controller, node);
    }

    if (_actions.isActions.isTableSplitTableCellAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _splitCell.default)(controller, node);
    }

    if (_actions.isActions.isTableDeleteTableAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _deleteTable.default)(controller, node);
    }

    if (_actions.isActions.isTableInsertTableAction(action)) {
      const {
        rowSize,
        colSize,
        containerWidth
      } = action.payload;
      const defaultAutofit = enableAutofitWidth?.() && !disableDefaultAutofitWidth?.();
      const defaultHeader = enableHeader?.();
      return (0, _insertTable.default)(controller, {
        rowSize,
        colSize,
        containerWidth,
        defaultAutofit,
        defaultHeader,
        setTableHeaderStyle
      });
    }

    if (_actions.isActions.isTableInsertRowAction(action)) {
      const {
        node,
        type
      } = action.payload;
      return (0, _insertRow.default)(controller, node, type);
    }

    if (_actions.isActions.isTableMoveRowsAction(action)) {
      const {
        node,
        targetIndex,
        originIndexRange
      } = action.payload;
      return (0, _moveRows.default)(controller, node, originIndexRange, targetIndex);
    }

    if (_actions.isActions.isTableInsertRowBySelectionsAction(action)) {
      const {
        node,
        type
      } = action.payload;
      return (0, _insertRowBySelections.default)(controller, node, type);
    }

    if (_actions.isActions.isTableInsertColAction(action)) {
      const {
        node,
        colIndex,
        colWidth,
        triggerColIndex,
        containerWidth
      } = action.payload;
      return (0, _insertCol.default)(controller, node, colIndex, triggerColIndex, colWidth, containerWidth);
    }

    if (_actions.isActions.isTableMoveColsAction(action)) {
      const {
        node,
        targetIndex,
        originIndexRange
      } = action.payload;
      return (0, _moveCols.default)(controller, node, originIndexRange, targetIndex);
    }

    if (_actions.isActions.isTableDeleteRowsAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _deleteRows.default)(controller, node);
    }

    if (_actions.isActions.isTableDeleteColsAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _deleteCols.default)(controller, node);
    }

    if (_actions.isActions.isTableSelectTableSelectionAction(action)) {
      const {
        node,
        selection
      } = action.payload;
      return (0, _selectTableSelection.default)(controller, node, selection);
    }

    if (_actions.isActions.isTableSelectTableColsAction(action)) {
      const {
        node,
        startIndex,
        endIndex
      } = action.payload;
      return (0, _selectCols.default)(controller, node, startIndex, endIndex);
    }

    if (_actions.isActions.isTableSelectTableRowsAction(action)) {
      const {
        node,
        startIndex,
        endIndex
      } = action.payload;
      return (0, _selectRows.default)(controller, node, startIndex, endIndex);
    }

    if (_actions.isActions.isTableSelectTableAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _selectWholeTable.default)(controller, node);
    }

    if (_actions.isActions.isTableSetTableMinColsWidthDataAction(action)) {
      const {
        data
      } = action.payload;
      return setTableMinColsWidthData(controller, data);
    }

    if (_actions.isActions.isTableAdjustColsWidthAction(action)) {
      const {
        node,
        containerWidth
      } = action.payload;
      return adjustColsWidth(controller, node, containerWidth);
    }

    if (_actions.isActions.isTableBlurAction(action)) {
      return controller.command(_everCangjie.Commands.blur);
    }

    if (isDropFragmentAction?.(action)) {
      const {
        dragFragment
      } = action.payload;

      if (dragFragment) {
        const {
          fragment,
          type
        } = dragFragment;

        if (type === _everPluginDraggable.DRAG_TYPE.blocks && Array.isArray(fragment)) {
          const result = next();
          fragment.forEach(n => {
            const {
              parentKey
            } = n;
            const parent = controller.value.document.getNode(parentKey);

            if (_tableCell.default.isTableCell(parent) && !_tableCell.default.isValidTableCell(parent)) {
              controller.command(_everCangjie.Commands.insertNodeByKey, parentKey, 0, (0, _utils.createEmptyParagraph)());
            }
          });
          return result;
        }
      }

      return next();
    }

    if (action.type === _everCangjie.ContextMenu.ACTION_SELECT_ALL) {
      return (0, _onSelectAll.default)(controller, next);
    }

    if (_actions.isActions.isTableSetTableRowHeaderAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _toggleRowHeader.default)(controller, node);
    }

    if (_actions.isActions.isTableRemoveTableRowHeaderAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _toggleRowHeader.default)(controller, node);
    }

    if (_actions.isActions.isTableSetTableColHeaderAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _toggleColHeader.default)(controller, node);
    }

    if (_actions.isActions.isTableRemoveTableColHeaderAction(action)) {
      const {
        node
      } = action.payload;
      return (0, _toggleColHeader.default)(controller, node);
    }

    return next();
  };
}
//# sourceMappingURL=createOnAction.js.map