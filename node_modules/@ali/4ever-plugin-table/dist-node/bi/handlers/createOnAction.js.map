{"version":3,"sources":["../../../../src/bi/handlers/createOnAction.ts"],"names":["setTableMinColsWidthData","adjustColsWidth","commands","createOnAction","config","onAction","action","controller","next","isDropFragmentAction","isActionFactory","enableAutofitWidth","enableHeader","setTableHeaderStyle","disableDefaultAutofitWidth","isActions","isTableResizeTableWidthAction","node","delta","maxWidth","payload","isTableResizeTableWidthFitContainerAction","containerWidth","isTablesetTableAutofitWidthEnableAction","isTableSetTableAutofitWidthDisableAction","isTableResizeTableHeightAction","rowsHeight","isTableResizeTableColWidthAction","colIndex","isTableSetTableRowHeightAction","newHeight","isTableSetTableCellVAlignAction","selection","vAlign","isTableSetTableCellFillAction","fill","isTableSetTableBorderAction","borderSetType","color","sz","type","isTableEmptySelectionAction","isTableMergeCellsAction","isTableSplitTableCellAction","isTableDeleteTableAction","isTableInsertTableAction","rowSize","colSize","defaultAutofit","defaultHeader","isTableInsertRowAction","isTableMoveRowsAction","targetIndex","originIndexRange","isTableInsertRowBySelectionsAction","isTableInsertColAction","colWidth","triggerColIndex","isTableMoveColsAction","isTableDeleteRowsAction","isTableDeleteColsAction","isTableSelectTableSelectionAction","isTableSelectTableColsAction","startIndex","endIndex","isTableSelectTableRowsAction","isTableSelectTableAction","isTableSetTableMinColsWidthDataAction","data","isTableAdjustColsWidthAction","isTableBlurAction","command","Commands","blur","dragFragment","fragment","DRAG_TYPE","blocks","Array","isArray","result","forEach","n","parentKey","parent","value","document","getNode","TableCell","isTableCell","isValidTableCell","insertNodeByKey","ContextMenu","ACTION_SELECT_ALL","isTableSetTableRowHeaderAction","isTableRemoveTableRowHeaderAction","isTableSetTableColHeaderAction","isTableRemoveTableColHeaderAction"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport { Controller, Commands, ContextMenu, Action } from '@ali/4ever-cangjie';\nimport { DRAG_TYPE } from '@ali/4ever-plugin-draggable';\nimport TableCell from '../../mo/models/tableCell';\nimport { isActions } from '../actions';\nimport resizeTableWidth from '../commands/resizeTableWidth';\nimport resizeTableWidthFitContainer from '../commands/resizeTableWidthFitContainer';\nimport setTableAutofitWidth from '../commands/setTableAutofitWidth';\nimport resizeTableHeight from '../commands/resizeTableHeight';\nimport resizeColsWidth from '../commands/resizeColsWidth';\nimport resizeRowsHeight from '../commands/resizeRowsHeight';\nimport emptySelections from '../commands/emptyTableSelection';\nimport mergeCells from '../commands/mergeCells';\nimport splitCell from '../commands/splitCell';\nimport deleteTable from '../commands/deleteTable';\nimport insertTable from '../commands/insertTable';\nimport insertRow from '../commands/insertRow';\nimport moveRows from '../commands/moveRows';\nimport insertRowBySelections from '../commands/insertRowBySelections';\nimport insertCol from '../commands/insertCol';\nimport moveCols from '../commands/moveCols';\nimport deleteRows from '../commands/deleteRows';\nimport deleteCols from '../commands/deleteCols';\nimport selectTableSelection from '../commands/selectTableSelection';\nimport selectCols from '../commands/selectCols';\nimport selectRows from '../commands/selectRows';\nimport selectWholeTable from '../commands/selectWholeTable';\nimport setCellsData from '../commands/setCellsData';\nimport setTableBorder from '../commands/setTableBorder';\nimport { createEmptyParagraph } from '../utils';\nimport onSelectAll from './onSelectAll';\nimport toggleRowHeader from '../commands/toggleRowHeader';\nimport toggleColHeader from '../commands/toggleColHeader';\nimport { TableConfig } from '../types';\nimport * as commands from '../../utils/commands';\n\nconst { setTableMinColsWidthData, adjustColsWidth } = commands;\n\nexport default function createOnAction(config: TableConfig) {\n  return function onAction(action: Action, controller: Controller, next) {\n    const isDropFragmentAction = controller.isActionFactory('isDropFragmentAction');\n    const {\n      enableAutofitWidth,\n      enableHeader,\n      setTableHeaderStyle,\n      disableDefaultAutofitWidth,\n    } = config;\n    if (isActions.isTableResizeTableWidthAction(action)) {\n      const { node, delta, maxWidth } = action.payload;\n      return resizeTableWidth(controller, node, delta, maxWidth);\n    }\n    if (isActions.isTableResizeTableWidthFitContainerAction(action)) {\n      const { node, containerWidth } = action.payload;\n      return resizeTableWidthFitContainer(controller, node, containerWidth);\n    }\n    if (isActions.isTablesetTableAutofitWidthEnableAction(action)) {\n      const { node, containerWidth } = action.payload;\n      return setTableAutofitWidth(controller, node, true, containerWidth);\n    }\n    if (isActions.isTableSetTableAutofitWidthDisableAction(action)) {\n      const { node } = action.payload;\n      return setTableAutofitWidth(controller, node, false);\n    }\n    if (isActions.isTableResizeTableHeightAction(action)) {\n      const { node, rowsHeight, delta } = action.payload;\n      return resizeTableHeight(controller, node, rowsHeight, delta);\n    }\n    if (isActions.isTableResizeTableColWidthAction(action)) {\n      const { node, colIndex, delta } = action.payload;\n      return resizeColsWidth(controller, {\n        node,\n        colIndex,\n        delta,\n      });\n    }\n    if (isActions.isTableSetTableRowHeightAction(action)) {\n      // 原来是node为table，然后传rowIndex\n      // 现在改为node为tableRow，table通过tableRow找\n      const { node, newHeight } = action.payload;\n      return resizeRowsHeight(controller, node, newHeight);\n    }\n    if (isActions.isTableSetTableCellVAlignAction(action)) {\n      const { node, selection, vAlign } = action.payload;\n      return setCellsData(controller, node, selection, 'vAlign', vAlign);\n    }\n    if (isActions.isTableSetTableCellFillAction(action)) {\n      const { node, selection, fill } = action.payload;\n      return setCellsData(controller, node, selection, 'fill', fill);\n    }\n    if (isActions.isTableSetTableBorderAction(action)) {\n      const { node, selection, borderSetType, color, sz, type } = action.payload;\n      return setTableBorder(controller, node, selection, borderSetType, color, sz, type);\n    }\n    if (isActions.isTableEmptySelectionAction(action)) {\n      const { node } = action.payload;\n      return emptySelections(controller, node);\n    }\n    if (isActions.isTableMergeCellsAction(action)) {\n      const { node } = action.payload;\n      return mergeCells(controller, node);\n    }\n    if (isActions.isTableSplitTableCellAction(action)) {\n      const { node } = action.payload;\n      return splitCell(controller, node);\n    }\n    if (isActions.isTableDeleteTableAction(action)) {\n      const { node } = action.payload;\n      return deleteTable(controller, node);\n    }\n    if (isActions.isTableInsertTableAction(action)) {\n      const { rowSize, colSize, containerWidth } = action.payload;\n      const defaultAutofit = enableAutofitWidth?.() && !disableDefaultAutofitWidth?.();\n      const defaultHeader = enableHeader?.();\n      return insertTable(\n        controller,\n        {\n          rowSize,\n          colSize,\n          containerWidth,\n          defaultAutofit,\n          defaultHeader,\n          setTableHeaderStyle,\n        },\n      );\n    }\n    if (isActions.isTableInsertRowAction(action)) {\n      const { node, type } = action.payload;\n      return insertRow(controller, node, type);\n    }\n    if (isActions.isTableMoveRowsAction(action)) {\n      const { node, targetIndex, originIndexRange } = action.payload;\n      return moveRows(controller, node, originIndexRange, targetIndex);\n    }\n    if (isActions.isTableInsertRowBySelectionsAction(action)) {\n      const { node, type } = action.payload;\n      return insertRowBySelections(controller, node, type);\n    }\n    if (isActions.isTableInsertColAction(action)) {\n      const { node, colIndex, colWidth, triggerColIndex, containerWidth } = action.payload;\n      return insertCol(controller, node, colIndex, triggerColIndex, colWidth, containerWidth);\n    }\n    if (isActions.isTableMoveColsAction(action)) {\n      const { node, targetIndex, originIndexRange } = action.payload;\n      return moveCols(controller, node, originIndexRange, targetIndex);\n    }\n    if (isActions.isTableDeleteRowsAction(action)) {\n      const { node } = action.payload;\n      return deleteRows(controller, node);\n    }\n    if (isActions.isTableDeleteColsAction(action)) {\n      const { node } = action.payload;\n      return deleteCols(controller, node);\n    }\n    if (isActions.isTableSelectTableSelectionAction(action)) {\n      const { node, selection } = action.payload;\n      return selectTableSelection(controller, node, selection);\n    }\n    if (isActions.isTableSelectTableColsAction(action)) {\n      const { node, startIndex, endIndex } = action.payload;\n      return selectCols(controller, node, startIndex, endIndex);\n    }\n    if (isActions.isTableSelectTableRowsAction(action)) {\n      const { node, startIndex, endIndex } = action.payload;\n      return selectRows(controller, node, startIndex, endIndex);\n    }\n    if (isActions.isTableSelectTableAction(action)) {\n      const { node } = action.payload;\n      return selectWholeTable(controller, node);\n    }\n    if (isActions.isTableSetTableMinColsWidthDataAction(action)) {\n      const { data } = action.payload;\n      return setTableMinColsWidthData(controller, data);\n    }\n    if (isActions.isTableAdjustColsWidthAction(action)) {\n      const { node, containerWidth } = action.payload;\n      return adjustColsWidth(controller, node, containerWidth);\n    }\n    if (isActions.isTableBlurAction(action)) {\n      return controller.command(Commands.blur);\n    }\n    if (isDropFragmentAction?.(action)) {\n      const { dragFragment } = action.payload!;\n      if (dragFragment) {\n        const { fragment, type } = dragFragment;\n        if (type === DRAG_TYPE.blocks && Array.isArray(fragment)) {\n          const result = next();\n          fragment.forEach((n) => {\n            const { parentKey } = n;\n            const parent = controller.value.document.getNode(parentKey);\n            if (\n              TableCell.isTableCell(parent)\n              && !TableCell.isValidTableCell(parent)\n            ) {\n              controller.command(Commands.insertNodeByKey, parentKey, 0, createEmptyParagraph());\n            }\n          });\n          return result;\n        }\n      }\n      return next();\n    }\n\n    if (action.type === ContextMenu.ACTION_SELECT_ALL) {\n      return onSelectAll(controller, next);\n    }\n\n    if (isActions.isTableSetTableRowHeaderAction(action)) {\n      const { node } = action.payload;\n      return toggleRowHeader(controller, node);\n    }\n\n    if (isActions.isTableRemoveTableRowHeaderAction(action)) {\n      const { node } = action.payload;\n      return toggleRowHeader(controller, node);\n    }\n\n    if (isActions.isTableSetTableColHeaderAction(action)) {\n      const { node } = action.payload;\n      return toggleColHeader(controller, node);\n    }\n\n    if (isActions.isTableRemoveTableColHeaderAction(action)) {\n      const { node } = action.payload;\n      return toggleColHeader(controller, node);\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnAction.js"}