"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnCangjieCut;

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireDefault(require("../../mo/models"));

var _tableCell = _interopRequireDefault(require("../../mo/models/tableCell"));

var _isSelectWholeTable = _interopRequireDefault(require("../queries/isSelectWholeTable"));

var _actions = require("../actions");

var _generateClipTableFromTableSelection = _interopRequireDefault(require("../utils/generateClipTableFromTableSelection"));

var _utils = require("../utils");

var _setSelectionByTable = _interopRequireDefault(require("../../utils/utils/setSelectionByTable"));

var _transformTablesToCompatibleLegacy = _interopRequireDefault(require("../../utils/utils/transformTablesToCompatibleLegacy"));

var _everUtils = require("@ali/4ever-utils");

var _normalizeClipboardTable = require("../../utils/utils/normalizeClipboardTable");

const {
  MIME_TYPES
} = _everCangjie.constants;

function createOnCangjieCut(isMobile = false) {
  return function onCangjieCut(event, controller, next) {
    if (!event.clipboardData) {
      return next();
    }

    const {
      value
    } = controller;
    const {
      document,
      selection
    } = value;
    const start = selection.getStart(document);
    const startCell = document.getClosest(start.key, _tableCell.default.isTableCell);

    if (startCell) {
      // 当单元格内只有一个节点且类型为 block void 时
      // 剪切该节点导致单元格内无 block 节点，单元格损坏
      // fix：在剪切后插入空段落并使光标 focus 在单元格内
      if (document.hasVoidParent(start.key, controller) && startCell.nodes.length === 1) {
        next();
        const targetCellKey = startCell.key;
        const targetCell = controller.value.document.getNode(targetCellKey);

        if (!_everCangjie.Block.isBlock(targetCell.nodes[0])) {
          return controller.withoutNormalizing(() => {
            const notBlockNode = targetCell.nodes[0];
            controller.command(_everCangjie.Commands.removeNodeByKey, notBlockNode.key).command(_everCangjie.Commands.insertNodeByKey, targetCell.key, 0, (0, _utils.createEmptyParagraph)());
            const focusCell = controller.value.document.getNode(targetCellKey);
            const s = (0, _setSelectionByTable.default)(selection, false).moveToStartOfNode(focusCell, controller);
            controller.command(_everCangjie.Commands.select, s);
          });
        }

        return controller.command(_everCangjie.Commands.insertBlock, 'paragraph');
      }
    }

    const encodedFragment = event.clipboardData.getData(MIME_TYPES.FRAGMENT);

    let fragment = _everCangjie.transferUtils.decodeFragment(encodedFragment);

    const tableSelection = controller.query('tableSelection');

    if (!tableSelection) {
      if (fragment && (0, _everUtils.isSingleTableCell)(fragment)) {
        return next(event.setClipboardData(event.clipboardData.setData(MIME_TYPES.FRAGMENT, _everCangjie.transferUtils.encodeFragment((0, _normalizeClipboardTable.normalizeClipboardTable)(fragment)))));
      }
    } else if (tableSelection) {
      const tablePath = document.assertPath(tableSelection.key);
      const table = document.assertNodeByPath(tablePath);

      if (_models.default.isTable(table)) {
        fragment = (0, _generateClipTableFromTableSelection.default)(table, tableSelection);

        if (controller.query(_isSelectWholeTable.default, {
          node: table
        })) {
          // 删除整个 table
          controller.run('onAction', (0, _actions.deleteTable)(table));
        } else {
          // 清空选区
          controller.run('onAction', (0, _actions.emptyTableSelection)(table));
        }
      }
    }

    if (fragment) {
      const {
        shouldTransfrom,
        fragment: newFragment
      } = (0, _transformTablesToCompatibleLegacy.default)(document, fragment, isMobile);

      if (shouldTransfrom || tableSelection) {
        return next(event.setClipboardData(event.clipboardData.setData(MIME_TYPES.FRAGMENT, _everCangjie.transferUtils.encodeFragment(newFragment))));
      }
    }

    return next();
  };
}
//# sourceMappingURL=createOnCangjieCut.js.map