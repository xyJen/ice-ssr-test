"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onArrowUp;

var _everCangjie = require("@ali/4ever-cangjie");

var _isSelectionInTableCell = _interopRequireDefault(require("../utils/isSelectionInTableCell"));

var _getPositionOfCell = _interopRequireDefault(require("../utils/getPositionOfCell"));

var _types = require("../types");

var _models = _interopRequireDefault(require("../../mo/models"));

var _tableCell = _interopRequireDefault(require("../../mo/models/tableCell"));

var _selectionCommands = require("../utils/selectionCommands");

var _getNextVisibleCell = _interopRequireDefault(require("../utils/getNextVisibleCell"));

var _setSelectionByTable = _interopRequireDefault(require("../../utils/utils/setSelectionByTable"));

function onArrowUp(event, controller, next) {
  const {
    value
  } = controller;
  const {
    selection,
    document,
    startBlock
  } = value;
  const tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    event.preventDefault();
    const table = document.getNode(tableSelection.key);

    if (!table) {
      return;
    }

    if (controller.query('isSelectWholeTable', {
      node: table
    })) {
      return (0, _selectionCommands.moveToStartOfPreviousSibling)(controller, table);
    }

    const {
      startColIndex,
      startRowIndex
    } = tableSelection;
    return (0, _selectionCommands.moveToStartOfCell)(controller, table, startRowIndex - 1, startColIndex);
  }

  if (!(0, _isSelectionInTableCell.default)(value)) return next();
  const cell = document.getClosest(startBlock?.key, _types.isTableCell);

  if (!cell) {
    return next();
  }

  const focusTable = document.getClosest(cell.key, _models.default.isTable);
  const position = (0, _getPositionOfCell.default)(cell.key, focusTable);

  if (position.rowIndex === 0) {
    return next();
  }

  const newSelection = controller.query(_everCangjie.Queries.getUpsideRange);

  if (!newSelection) {
    return next();
  }

  const {
    anchor
  } = newSelection;
  const newFocusCell = document.getClosest(anchor.key, _tableCell.default.isTableCell); // 向下移动后，仍是同一个 cell 则不处理

  if (newFocusCell?.key === cell.key) {
    return next();
  }

  const nextCell = (0, _getNextVisibleCell.default)(document, cell, 'up');

  if (!nextCell) {
    return next();
  }

  event.preventDefault();
  const s = selection.moveToEndOfNode(nextCell, controller);
  return controller.command(_everCangjie.Commands.select, (0, _setSelectionByTable.default)(s, false));
}
//# sourceMappingURL=onArrowUp.js.map