"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onDelete;

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _tableCell = _interopRequireDefault(require("../../mo/models/tableCell"));

var _emptyTableSelection = _interopRequireDefault(require("../commands/emptyTableSelection"));

var _deleteTable = _interopRequireDefault(require("../commands/deleteTable"));

var _selectWholeTable = _interopRequireDefault(require("../commands/selectWholeTable"));

var _isHotkey = require("is-hotkey");

const isBackspaceHotKey = (0, _isHotkey.isKeyHotkey)('backspace');
const isDeleteHotKey = (0, _isHotkey.isKeyHotkey)('delete');

function onDelete(event, controller, next) {
  const {
    value
  } = controller;
  const {
    selection,
    document,
    startBlock,
    endBlock
  } = value;
  const tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    event.preventDefault();
    const table = document.getNode(tableSelection.key);

    if (table) {
      const isSelectWholeTable = controller.query('isSelectWholeTable', {
        node: table
      });

      if (isSelectWholeTable) {
        // @ts-ignore
        return controller.run('onAction', (0, _deleteTable.default)(controller, table));
      } // 删除选区内容而非其他东西


      return (0, _emptyTableSelection.default)(controller, table);
    }

    return controller;
  }

  const edgeSelection = value.data.edgeSelection;

  if (edgeSelection) {
    const table = document.getNode(edgeSelection.key);

    if (edgeSelection.edge === 'before' && isDeleteHotKey(event)) {
      // @ts-ignore
      return controller.run('onAction', (0, _selectWholeTable.default)(controller, table));
    } else if (edgeSelection.edge === 'after' && isBackspaceHotKey(event)) {
      // @ts-ignore
      return controller.run('onAction', (0, _selectWholeTable.default)(controller, table));
    }

    return controller;
  }

  if (!selection || selection.isExpanded) return next();
  const startCell = startBlock ? document.getClosest(startBlock.key, _tableCell.default.isTableCell) : null;
  const isDeleteKey = isDeleteHotKey(event);
  const isBackspaceKey = isBackspaceHotKey(event);
  const {
    anchor
  } = selection; // 删除时，如果单元格内只有一个 void 元素，进行特殊处理

  if (startCell?.isElement() && startCell.nodes.length === 1) {
    const parent = document.getParent(anchor.key);

    if (parent === startCell.nodes[0] && controller.query('isVoid', parent)) {
      const insertPoint = _everCangjie.EdgePoint.create({
        key: parent.key,
        edge: _everCangjie.EdgePoint.BEFORE
      });

      return controller.command(_everCangjie.Commands.insertEmptyBlock, insertPoint).command(_everCangjie.Commands.removeNodeByKey, parent.key);
    }
  }

  const endCell = endBlock ? document.getClosest(endBlock.key, _tableCell.default.isTableCell) : null; // 左移试探，发现移到其他单元格，则会删出问题，阻止

  if (startCell && isBackspaceKey) {
    const block = document.getClosestBlock(anchor.key);

    if (selection.isCollapsed && startCell.nodes.length !== 1 && startCell.nodes[0] === block && (0, _everUtils.isEmptyParagraph)(block)) {
      return controller.command(_everCangjie.Commands.removeNodeByKey, block.key).command(_everCangjie.Commands.moveToStartOfNextBlock);
    }

    const backwardPoint = controller.query(_everCangjie.Queries.pointAtDistance, selection.getStart(document), -1);
    const backwardCell = backwardPoint?.key && document.getClosest(backwardPoint.key, n => n.key === startCell.key);

    if (!backwardCell) {
      event.preventDefault();
      return controller;
    }
  }

  if (endCell && isDeleteKey) {
    const block = document.getClosestBlock(anchor.key);

    if (selection.isCollapsed && endCell.nodes.length !== 1 && endCell.nodes[0] === block && (0, _everUtils.isEmptyParagraph)(block)) {
      return controller.command(_everCangjie.Commands.removeNodeByKey, block.key).command(_everCangjie.Commands.moveToStartOfNextBlock);
    }

    const forwardPoint = controller.query(_everCangjie.Queries.pointAtDistance, selection.getEnd(document), 1);
    const forwardCell = forwardPoint?.key && document.getClosest(forwardPoint.key, n => n.key === endCell.key);

    if (!forwardCell) {
      event.preventDefault();
      return controller;
    }
  }

  const nextBlock = document.getNextSibling(endBlock?.key);

  if (nextBlock && nextBlock.type === 'table' && selection.getEnd(document).isAtEndOfNode(endBlock) && isDeleteHotKey(event)) {
    event.preventDefault(); // @ts-ignore

    return controller.run('onAction', (0, _selectWholeTable.default)(controller, nextBlock));
  }

  return next();
}
//# sourceMappingURL=onDelete.js.map