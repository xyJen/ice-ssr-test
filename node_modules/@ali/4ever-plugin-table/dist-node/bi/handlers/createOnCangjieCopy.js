"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnCangjieCopy;

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireDefault(require("../../mo/models"));

var _generateClipTableFromTableSelection = _interopRequireDefault(require("../utils/generateClipTableFromTableSelection"));

var _transformTablesToCompatibleLegacy = _interopRequireDefault(require("../../utils/utils/transformTablesToCompatibleLegacy"));

var _setSelectionByTable = _interopRequireDefault(require("../../utils/utils/setSelectionByTable"));

var _everUtils = require("@ali/4ever-utils");

var _normalizeClipboardTable = require("../../utils/utils/normalizeClipboardTable");

const {
  MIME_TYPES
} = _everCangjie.constants;

function createOnCangjieCopy(isMobile = false) {
  return function onCangjieCopy(event, controller, next) {
    if (!event.clipboardData) {
      return next();
    }

    const {
      document,
      selection
    } = controller.value;
    const tableSelection = controller.query('tableSelection');
    const encodedFragment = event.clipboardData.getData(MIME_TYPES.FRAGMENT);

    let fragment = _everCangjie.transferUtils.decodeFragment(encodedFragment);

    if (!tableSelection) {
      if (fragment && (0, _everUtils.isSingleTableCell)(fragment)) {
        return next(event.setClipboardData(event.clipboardData.setData(MIME_TYPES.FRAGMENT, _everCangjie.transferUtils.encodeFragment((0, _normalizeClipboardTable.normalizeClipboardTable)(fragment)))));
      }
    } else {
      const tablePath = document.assertPath(tableSelection.key);
      const table = document.assertNodeByPath(tablePath);

      if (_models.default.isTable(table)) {
        fragment = (0, _generateClipTableFromTableSelection.default)(table, tableSelection);
      }
    }

    if (isMobile) {
      const noTableSelection = (0, _setSelectionByTable.default)(selection, false);
      controller.command(_everCangjie.Commands.select, noTableSelection);
    }

    if (fragment) {
      const {
        shouldTransfrom,
        fragment: newFragment
      } = (0, _transformTablesToCompatibleLegacy.default)(document, fragment, isMobile);

      if (shouldTransfrom || tableSelection) {
        return next(event.setClipboardData(event.clipboardData.setData(MIME_TYPES.FRAGMENT, _everCangjie.transferUtils.encodeFragment(newFragment))));
      }
    }

    return next();
  };
}
//# sourceMappingURL=createOnCangjieCopy.js.map