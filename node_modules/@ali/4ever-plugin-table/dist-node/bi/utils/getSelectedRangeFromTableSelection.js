"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSelectedColRangeFromTableSelection = exports.getSelectedRowRangeFromTableSelection = void 0;

const getSelectedRowRangeFromTableSelection = ({
  controller,
  table,
  tableSelection,
  includeTable = false
}) => {
  if (!tableSelection) {
    return null;
  }

  const isSelectWholeTable = controller.query('isSelectWholeTable', {
    node: table
  });

  if (!includeTable && isSelectWholeTable) {
    return null;
  }

  const {
    startRowIndex,
    endRowIndex,
    startColIndex,
    endColIndex
  } = tableSelection;

  if (!Array.isArray(table.data?.colsWidth)) {
    return null;
  }

  const maxCol = table.data.colsWidth.length - 1;

  if (startColIndex === 0 && endColIndex === maxCol || startColIndex === maxCol && endColIndex === 0 || isSelectWholeTable) {
    return {
      start: startRowIndex,
      end: endRowIndex
    };
  }

  return null;
};

exports.getSelectedRowRangeFromTableSelection = getSelectedRowRangeFromTableSelection;

const getSelectedColRangeFromTableSelection = ({
  controller,
  table,
  tableSelection,
  includeTable = false
}) => {
  if (!tableSelection) {
    return null;
  }

  const isSelectWholeTable = controller.query('isSelectWholeTable', {
    node: table
  });

  if (!includeTable && isSelectWholeTable) {
    return null;
  }

  const {
    startRowIndex,
    endRowIndex,
    startColIndex,
    endColIndex
  } = tableSelection;

  if (!Array.isArray(table.nodes)) {
    return null;
  }

  const max = table.nodes.length - 1;

  if (startRowIndex === 0 && endRowIndex === max || startRowIndex === max && endRowIndex === 0 || isSelectWholeTable) {
    return {
      start: startColIndex,
      end: endColIndex
    };
  }

  return null;
};

exports.getSelectedColRangeFromTableSelection = getSelectedColRangeFromTableSelection;
//# sourceMappingURL=getSelectedRangeFromTableSelection.js.map