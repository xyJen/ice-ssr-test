"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createTableSelectionForFocusedCell;

var _everCangjie = require("@ali/4ever-cangjie");

function createTableSelectionForFocusedCell(value, table) {
  if (value.data.edgeSelection) {
    return null;
  }

  if (!table) {
    return null;
  }

  const {
    selection,
    document
  } = value;

  if (!selection) {
    return null;
  }

  const startPoint = selection.getStart(document);
  const endPoint = selection.getEnd(document);
  const startKey = startPoint?.key;
  const endKey = endPoint?.key;

  if (!startKey || !endKey) {
    return null;
  }

  const startPath = document.getPath(startKey);
  const endPath = document.getPath(endKey);

  if (!startPath || !endPath) {
    return null;
  }

  const selectionPath = _everCangjie.Path.common(startPath, endPath);

  if (!selectionPath.length) {
    return null;
  }

  const tablePath = document.getPath(table.key);

  if (!tablePath) {
    return null;
  }

  const isSelectionInTableCell = _everCangjie.Path.isAncestor(tablePath, selectionPath) && selectionPath.length - tablePath.length >= 2;

  if (!isSelectionInTableCell) {
    return null;
  }

  const [startRowIndex, startColIndex] = selectionPath.slice(tablePath.length, tablePath.length + 2); // 表格分裂时，startRowIndex 可能大于 renderTable 行数

  if (startRowIndex >= table.nodes.length) {
    return null;
  }

  const cell = table.nodes[startRowIndex].nodes[startColIndex]; // 快捷插入列时，cell 会不存在

  if (!cell) {
    return null;
  }

  const rowSpan = cell.data && cell.data.rowSpan || 1;
  const colSpan = cell.data && cell.data.colSpan || 1;
  const endRowIndex = startRowIndex + rowSpan - 1;
  const endColIndex = startColIndex + colSpan - 1;
  return {
    key: table.key,
    startRowIndex,
    endRowIndex,
    startColIndex,
    endColIndex
  };
}
//# sourceMappingURL=createTableSelectionForFocusedCell.js.map