{"version":3,"sources":["../../../../src/bi/utils/getRealNodeInTable.ts"],"names":["getRealNodeInTable","table","rowIndex","colIndex","row","nodes","node","data","hidden","maxRound","Math","max","found","round","r","c","rowToIterate","i","cellNode","type","detail","isCellHide","rowSpan","colSpan"],"mappings":"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","sourcesContent":["import Table from '../../mo/models';\nimport { logNPEInfo } from './logger';\n\nexport default function getRealNodeInTable(table: Table, rowIndex: number, colIndex: number) {\n  // @ts-ignore\n  const row = table.nodes && table.nodes[rowIndex];\n  if (!row) {\n    return null;\n  }\n  // @ts-ignore\n  let node = row.nodes && row.nodes[colIndex];\n  if (!node) {\n    return null;\n  }\n  if (node.data && node.data.hidden) {\n    const maxRound = Math.max(rowIndex, colIndex);\n    let found = false;\n    for (let round = 1; round <= maxRound; round += 1) {\n      const r = Math.max(rowIndex - round, 0);\n      const c = Math.max(colIndex - round, 0);\n      const rowToIterate = table.nodes[r];\n      for (let i = c; i <= colIndex; i += 1) {\n        // @ts-ignore\n        const cellNode = rowToIterate.nodes[i];\n        if (!cellNode) {\n          logNPEInfo(\n            table,\n            {\n              type: 'getRealNodeInTable',\n              detail: `cellNode is ${cellNode}`,\n              colIndex: i,\n              rowIndex: r,\n            },\n          );\n          return null;\n        }\n        const isCellHide = cellNode.data.hidden;\n        const rowSpan = cellNode.data.rowSpan || 1;\n        const colSpan = cellNode.data.colSpan || 1;\n        if (!isCellHide && r + rowSpan - 1 >= rowIndex && i + colSpan - 1 >= colIndex) {\n          node = cellNode;\n          found = true;\n          break;\n        }\n      }\n      for (let i = r; i <= rowIndex; i += 1) {\n        // @ts-ignore\n        const cellNode = table.nodes[i].nodes[c];\n        const isCellHide = cellNode.data.hidden;\n        const rowSpan = cellNode.data.rowSpan || 1;\n        const colSpan = cellNode.data.colSpan || 1;\n        if (!isCellHide && i + rowSpan - 1 >= rowIndex && c + colSpan - 1 >= colIndex) {\n          node = cellNode;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n  }\n\n  return node;\n}\n"],"file":"getRealNodeInTable.js"}