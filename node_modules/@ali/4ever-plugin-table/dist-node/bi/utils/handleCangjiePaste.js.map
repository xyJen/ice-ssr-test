{"version":3,"sources":["../../../../src/bi/utils/handleCangjiePaste.ts"],"names":["filterValidData","setSelectionByTable","utils","messageKey","slice","handleCangjiePaste","controller","payload","next","noop","value","fragment","nativeFragment","tableConfig","locale","tables","filterDescendants","Table","isTable","i","length","table","isColumnHeader","isRowHeader","setTableHeaderStyle","document","startBlock","selection","tableSelection","query","nodes","anchor","focus","anchorTable","getClosest","key","focusTable","isExpanded","node","tableKey","hasTableInFragment","hasTable","isRealTable","insertedFragment","removeTable","messageUnablePasteTable","t","getNode","run","startRowIndex","startColIndex","endRowIndex","endColIndex","tablePath","getPath","withoutNormalizing","rowIndex","row","colIndex","cell","cellPath","newCell","getNodeByPath","s","newS","moveAnchorToStartOfNode","moveFocusToEndOfNode","command","Commands","select","insertFragment","type","excludeColumns","splitBlock","moveBackward","path","adjustColsWidth","getAdjustTableColsWidth","newFragment","setNode","data","colsWidth","targetTable","targetTablePath","startCell","isTableCell","clipboardTable","adjustClipboardTableWithSelection","position","Math","min","area","undefined","targetRowIndex","targetRowPath","targetRow","targetColIndex","targetCell","lastColIndex","colWidth","targetCellPath","childIndex","c","removeNodeByPath","insertNodeByPath","setNodeByPath","rangeSelection","pasteTipCannotPasteTableHere","Message","info","n","sr","findDescendant","drops","result","forEach","removeNode","width","height","create","map","TableRow","Array","isArray","isAutofitWidth","cw","max","MIN_COL_WIDTH"],"mappings":"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","sourcesContent":["import { v4 as uuid } from 'uuid';\nimport { noop } from 'lodash-es';\nimport { Message } from '@ali/we-design-next';\nimport { Document, Node, Block, Commands, Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport TableRow from '../../mo/models/tableRow';\nimport TableCell from '../../mo/models/tableCell';\nimport isSelectionInTableCell from '../utils/isSelectionInTableCell';\nimport getPositionOfCell from '../utils/getPositionOfCell';\nimport adjustSelection from '../utils/adjustSelection';\nimport { isTable, isTableCell, TableConfig } from '../types';\nimport insertRow from '../commands/insertRow';\nimport insertCol from '../commands/insertCol';\nimport splitCell from '../commands/splitCell';\nimport selectTableSelection from '../commands/selectTableSelection';\nimport { emptyTableSelection } from '../actions';\nimport { MIN_COL_WIDTH } from '../constants';\nimport { moveToStartOfCell } from '../utils/selectionCommands';\nimport utils from '../../utils/utils';\nimport { normalizeFragment } from '@ali/4ever-plugin-clipboard';\n\nconst { filterValidData, setSelectionByTable } = utils;\nconst messageKey = uuid().slice(0, 8);\n\ninterface Payload {\n  fragment: Document;\n  tableConfig?: TableConfig;\n}\n\nexport function handleCangjiePaste(controller: Controller, payload: Payload, next = noop) {\n  // 处理含有表头行/列的表格\n  const { value } = controller;\n  const { fragment: nativeFragment, tableConfig } = payload;\n\n  if (!nativeFragment) return next();\n\n  const fragment = normalizeFragment(nativeFragment);\n  const { locale = {} } = tableConfig || {};\n  const tables = fragment.filterDescendants(Table.isTable);\n  for (let i = 0; i < tables.length; i++) {\n    const table = tables[i];\n    if (\n      Table.isColumnHeader(table as Table) ||\n      Table.isRowHeader(table as Table)\n    ) {\n      // NOTE: 需要先执行 setTableHeaderStyle\n      const { setTableHeaderStyle } = tableConfig || {};\n      setTableHeaderStyle?.();\n      break;\n    }\n  }\n\n  const { document, startBlock, selection } = value;\n  const tableSelection = controller.query('tableSelection');\n  if (!fragment.nodes.length) {\n    return next();\n  }\n  const { anchor, focus } = selection;\n  const anchorTable = document.getClosest(anchor.key, Table.isTable);\n  const focusTable = document.getClosest(focus.key, Table.isTable);\n  // 无表格选区且 anchor、focus 不在同一个表格内时，禁止粘贴\n  if (!tableSelection && selection.isExpanded) {\n    if (\n      anchorTable &&\n      focusTable &&\n      !controller.query('isTableFromSameOrigin', {\n        node: anchorTable,\n        tableKey: focusTable.key,\n      })\n    ) {\n      return controller;\n    }\n  }\n  const hasTableInFragment = hasTable(fragment);\n  if (\n    (fragment.nodes.length === 1 && !isRealTable(fragment.nodes[0])) ||\n    fragment.nodes.length > 1\n  ) {\n    const insertedFragment = hasTableInFragment\n      ? removeTable(fragment)\n      : fragment;\n    /**\n     * 存在表格选区时，下列情况将单元格替换为 fragment\n     * 1. 粘贴板里只有一个节点，且节点不是表格\n     * 2. 粘贴板里有多个节点（fragment 需要过滤表格）\n     */\n    if (tableSelection) {\n      if (hasTableInFragment) {\n        messageUnablePasteTable(locale);\n      }\n      const t = document.getNode(tableSelection.key) as Table;\n      controller.run('onAction', emptyTableSelection(t));\n      const { startRowIndex, startColIndex, endRowIndex, endColIndex } =\n        tableSelection;\n\n      const tablePath = document.getPath(t.key);\n      controller.withoutNormalizing(() => {\n        for (\n          let rowIndex = startRowIndex;\n          rowIndex <= endRowIndex;\n          rowIndex += 1\n        ) {\n          const row = t.nodes[rowIndex];\n          if (!row) continue;\n\n          for (\n            let colIndex = startColIndex;\n            colIndex <= endColIndex;\n            colIndex += 1\n          ) {\n            const cell = row.nodes[colIndex];\n            if (!cell) continue;\n            const cellPath = [...tablePath!, rowIndex, colIndex];\n            const newCell = controller.value.document.getNodeByPath(\n              cellPath,\n            ) as TableCell;\n            const s = controller.value.selection;\n            const newS = s\n              .moveAnchorToStartOfNode(newCell, controller)\n              .moveFocusToEndOfNode(newCell, controller);\n            controller\n              .command(Commands.select, newS)\n              .command(Commands.insertFragment, insertedFragment);\n          }\n        }\n        selectTableSelection(controller, t, tableSelection);\n      });\n      return controller;\n    } else if (anchorTable && focusTable && hasTableInFragment) {\n      messageUnablePasteTable(locale);\n      return controller.command(Commands.insertFragment, insertedFragment);\n    }\n  }\n\n  if (fragment.nodes.length > 1 || fragment.nodes[0].type !== 'table') {\n    return next();\n  }\n\n  if (\n    !tableSelection &&\n    !isSelectionInTableCell(value, { excludeColumns: true })\n  ) {\n    controller.command(Commands.splitBlock).command(Commands.moveBackward, 1);\n\n    const t = fragment.nodes[0];\n    const path = fragment.getPath(t.key)!;\n    const adjustColsWidth = getAdjustTableColsWidth(t as Table);\n    const newFragment = fragment.setNode(path, {\n      data: filterValidData({\n        ...(t.data || {}),\n        colsWidth: adjustColsWidth,\n      }),\n    });\n    return controller.command('insertFragmentByClipboard', newFragment);\n  }\n\n  let targetTable: Table = tableSelection\n    ? (document.getNode(tableSelection.key) as Table)\n    : (document.getClosest(startBlock!.key, isTable) as Table);\n\n  if (!targetTable) {\n    return;\n  }\n\n  // 以下处理复制单个表格至表格内场景\n  const targetTablePath = document.getPath(targetTable.key);\n  if (!targetTablePath) return;\n  const startCell = tableSelection\n    ? document.getNodeByPath([\n      ...targetTablePath!,\n      tableSelection.startRowIndex,\n      tableSelection.startColIndex,\n    ])\n    : document.getClosest(startBlock!.key!, isTableCell);\n\n  let clipboardTable = fragment.nodes[0];\n  if (tableSelection) {\n    clipboardTable = adjustClipboardTableWithSelection(\n      clipboardTable,\n      tableSelection,\n    );\n  }\n\n  const position = getPositionOfCell(startCell!.key!, targetTable)!;\n\n  // 粘贴时被波及的区域解除合并单元格，否则粘贴时结构可能被破坏\n  const startRowIndex = position.rowIndex;\n  const startColIndex = position.colIndex;\n  const endRowIndex = Math.min(\n    position.rowIndex + clipboardTable.nodes.length - 1,\n    targetTable.nodes.length - 1,\n  );\n  // @ts-ignore\n  const endColIndex = Math.min(\n    position.colIndex + (clipboardTable.nodes[0] as Block).nodes.length - 1,\n    (targetTable.nodes[0] as Block).nodes.length - 1,\n  );\n  const area = adjustSelection(targetTable, {\n    startRowIndex,\n    startColIndex,\n    endRowIndex,\n    endColIndex,\n  });\n  splitCell(controller, targetTable, area || undefined);\n  targetTable = controller.value.document.getNodeByPath(\n    targetTablePath,\n  ) as Table;\n\n  for (\n    let rowIndex = 0;\n    rowIndex < clipboardTable.nodes.length;\n    rowIndex += 1\n  ) {\n    const targetRowIndex = position.rowIndex + rowIndex;\n    const targetRowPath = [...targetTablePath!, targetRowIndex];\n    let targetRow = controller.value.document.getNodeByPath(\n      targetRowPath,\n    ) as Block;\n    if (!targetRow) {\n      insertRow(\n        controller,\n        targetTable.nodes[targetRowIndex - 1] as TableRow,\n        'insert-row-below',\n      );\n      // update target\n      targetTable = controller.value.document.getNodeByPath(\n        targetTablePath,\n      ) as Table;\n      targetRow = controller.value.document.getNodeByPath(\n        targetRowPath,\n      ) as Block;\n    }\n\n    const row = clipboardTable.nodes[rowIndex] as Block;\n    for (let colIndex = 0; colIndex < row.nodes.length; colIndex += 1) {\n      const targetColIndex = position.colIndex + colIndex;\n      let targetCell = targetRow.nodes[targetColIndex] as Block;\n      if (!targetCell) {\n        // @ts-ignore\n        // eslint-disable-next-line no-shadow\n        const lastColIndex = targetTable.nodes[0].nodes.length - 1;\n        const colWidth = (targetTable.data.colsWidth || [])[lastColIndex];\n        insertCol(\n          controller,\n          targetTable,\n          targetColIndex,\n          targetColIndex,\n          colWidth,\n        );\n        // update targets\n        targetTable = controller.value.document.getNodeByPath(\n          targetTablePath,\n        ) as Table;\n        targetRow = controller.value.document.getNodeByPath(\n          targetRowPath,\n        ) as TableRow;\n        // @ts-ignore\n        targetCell = targetRow.nodes[targetColIndex];\n      }\n      const targetCellPath = [\n        ...targetTablePath,\n        targetRowIndex,\n        targetColIndex,\n      ];\n      for (\n        let childIndex = targetCell.nodes.length - 1;\n        childIndex >= 0;\n        childIndex -= 1\n      ) {\n        controller.withoutNormalizing((c) => {\n          c.command(Commands.removeNodeByPath, [...targetCellPath, childIndex]);\n        });\n      }\n\n      const cell = row.nodes[colIndex] as Block;\n      for (\n        let childIndex = cell.nodes.length - 1;\n        childIndex >= 0;\n        childIndex -= 1\n      ) {\n        controller.command(\n          Commands.insertNodeByPath,\n          targetCellPath,\n          0,\n          cell.nodes[childIndex],\n        );\n      }\n\n      controller.command(Commands.setNodeByPath, targetCellPath, {\n        data: cell.data,\n      });\n    }\n  }\n\n  // 恢復選區\n  if (tableSelection) {\n    selectTableSelection(controller, targetTable, tableSelection);\n    let rangeSelection = controller.value.selection;\n    rangeSelection = setSelectionByTable(rangeSelection, false);\n    controller.command(Commands.select, rangeSelection);\n  } else if (position) {\n    targetTable = controller.value.document.getNodeByPath(\n      targetTablePath,\n    ) as Table;\n    const { rowIndex, colIndex } = position;\n    moveToStartOfCell(controller, targetTable, rowIndex, colIndex);\n  }\n\n  return controller;\n}\n\n\nfunction messageUnablePasteTable(locale?: Record<string, string>) {\n  locale?.pasteTipCannotPasteTableHere\n    && Message.info(locale?.pasteTipCannotPasteTableHere, {\n      key: messageKey,\n    });\n}\n\nfunction isRealTable(n: Node) {\n  return Table.isTable(n) && !n.data.sr;\n}\n\nfunction hasTable(fragment: Document) {\n  return !!fragment.findDescendant(isRealTable);\n}\n\nfunction removeTable(fragment: Document) {\n  const drops = fragment.filterDescendants(isRealTable);\n  let result = fragment;\n  drops.forEach((n) => {\n    const path = result.getPath(n.key);\n    if (path) {\n      result = result.removeNode(path);\n    }\n  });\n  return result;\n}\n\nfunction adjustClipboardTableWithSelection(clipboardTable: Block, selection): Block {\n  const {\n    startRowIndex, startColIndex, endRowIndex, endColIndex,\n  } = selection;\n  const width = endColIndex - startColIndex + 1;\n  const height = endRowIndex - startRowIndex + 1;\n  return Table.create({\n    data: clipboardTable.data,\n    nodes: clipboardTable.nodes.slice(0, height).map((row) => TableRow.create({\n      data: (row as Block).data,\n      // @ts-ignore\n      nodes: (row as Block).nodes.slice(0, width),\n    })),\n  });\n}\n\nfunction getAdjustTableColsWidth(table: Table): number[] {\n  const data = table.data || {};\n  let { colsWidth } = data;\n  if (!Array.isArray(colsWidth)) {\n    colsWidth = [];\n  }\n  // 自适应表格不做矫正\n  if (Table.isAutofitWidth(table)) return colsWidth;\n\n  return colsWidth.map((cw) => Math.max(cw, MIN_COL_WIDTH));\n}\n"],"file":"handleCangjiePaste.js"}