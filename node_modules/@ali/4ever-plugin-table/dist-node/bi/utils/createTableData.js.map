{"version":3,"sources":["../../../../src/bi/utils/createTableData.ts"],"names":["createColsWidth","colSize","containerWidth","colsWidth","colWidth","Math","max","MIN_COL_WIDTH","floor","i","push","createAutofitColsWidth","Number","DEFAULT_PCT_WIDTH","toFixed","Array","fill","createTableData","controller","defaultAutofit","tableData","tblW","w","type","width","containerBlock","value","document"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AAEA,SAASA,eAAT,CAAyBC,OAAzB,EAA0CC,cAA1C,EAAkE;AAChE,QAAMC,SAAmB,GAAG,EAA5B;AACA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CACfC,wBADe,EAEfF,IAAI,CAACG,KAAL,CAAWN,cAAc,GAAGD,OAA5B,CAFe,CAAjB;;AAIA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAApB,EAA6BQ,CAAC,IAAI,CAAlC,EAAqC;AACnCN,IAAAA,SAAS,CAACO,IAAV,CAAeN,QAAf;AACD;;AACD,SAAOD,SAAP;AACD;;AAED,SAASQ,sBAAT,CAAgCV,OAAhC,EAAiD;AAC/C,QAAMG,QAAQ,GAAGQ,MAAM,CAAC,CAACC,gCAAoBZ,OAArB,EAA8Ba,OAA9B,CAAsC,CAAtC,CAAD,CAAvB;AACA,QAAMX,SAAS,GAAGY,KAAK,CAACd,OAAD,CAAL,CAAee,IAAf,CAAoBZ,QAApB,CAAlB;AACAD,EAAAA,SAAS,CAACF,OAAO,GAAG,CAAX,CAAT,GAAyBY,gCAAoBT,QAAQ,IAAIH,OAAO,GAAG,CAAd,CAArD;AACA,SAAOE,SAAP;AACD;;AAQc,SAASc,eAAT,CACbC,UADa,EAEb;AAAEjB,EAAAA,OAAF;AAAWC,EAAAA,cAAX;AAA2BiB,EAAAA;AAA3B,CAFa,EAGb;AACA,QAAMC,SAAwB,GAAG,EAAjC;;AACA,MAAID,cAAJ,EAAoB;AAClBC,IAAAA,SAAS,CAACjB,SAAV,GAAsBQ,sBAAsB,CAACV,OAAD,CAA5C;AACAmB,IAAAA,SAAS,CAACC,IAAV,GAAiB;AACfC,MAAAA,CAAC,EAAET,6BADY;AAEfU,MAAAA,IAAI,EAAE;AAFS,KAAjB;AAID,GAND,MAMO;AACL,QAAIC,KAAK,GAAGtB,cAAZ;;AACA,QAAI,CAACA,cAAL,EAAqB;AACnB,YAAMuB,cAAc,GAAG,yCAAyBP,UAAU,CAACQ,KAApC,CAAvB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAeT,UAAU,CAACQ,KAAhC;AACAF,MAAAA,KAAK,GAAG,kCAAkBC,cAAlB,EAAkCE,QAAlC,KAA+C,CAAvD;AACD;;AAEDP,IAAAA,SAAS,CAACjB,SAAV,GAAsBH,eAAe,CAACC,OAAD,EAAUuB,KAAK,GAAG,CAAlB,CAArC;AACD;;AAED,SAAOJ,SAAP;AACD","sourcesContent":["import { getClosestContainerBlock, getInnerFullWidth } from '@ali/4ever-utils';\nimport Table from '../../mo/models';\nimport { MIN_COL_WIDTH } from '../constants';\nimport type { Controller } from '@ali/4ever-cangjie';\nimport { DEFAULT_PCT_WIDTH } from '../../utils/constants';\n\nfunction createColsWidth(colSize: number, containerWidth: number) {\n  const colsWidth: number[] = [];\n  const colWidth = Math.max(\n    MIN_COL_WIDTH,\n    Math.floor(containerWidth / colSize),\n  );\n  for (let i = 0; i < colSize; i += 1) {\n    colsWidth.push(colWidth);\n  }\n  return colsWidth;\n}\n\nfunction createAutofitColsWidth(colSize: number) {\n  const colWidth = Number((DEFAULT_PCT_WIDTH / colSize).toFixed(1));\n  const colsWidth = Array(colSize).fill(colWidth);\n  colsWidth[colSize - 1] = DEFAULT_PCT_WIDTH - colWidth * (colSize - 1);\n  return colsWidth;\n}\n\ninterface CreateTableDataParams {\n  colSize: number;\n  containerWidth?: number;\n  defaultAutofit?: boolean;\n}\n\nexport default function createTableData(\n  controller: Controller,\n  { colSize, containerWidth, defaultAutofit }: CreateTableDataParams\n) {\n  const tableData: Table['data'] = {};\n  if (defaultAutofit) {\n    tableData.colsWidth = createAutofitColsWidth(colSize);\n    tableData.tblW = {\n      w: DEFAULT_PCT_WIDTH,\n      type: 'pct',\n    };\n  } else {\n    let width = containerWidth as number;\n    if (!containerWidth) {\n      const containerBlock = getClosestContainerBlock(controller.value)!;\n      const { document } = controller.value;\n      width = getInnerFullWidth(containerBlock, document) || 0;\n    }\n\n    tableData.colsWidth = createColsWidth(colSize, width - 2);\n  }\n\n  return tableData;\n}"],"file":"createTableData.js"}