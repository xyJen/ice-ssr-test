{"version":3,"sources":["../../../../src/bi/utils/generateClipTableFromTableSelection.ts"],"names":["generateClipTableFromTableSelection","table","tableSelection","startRowIndex","startColIndex","endRowIndex","endColIndex","tableJs","toJSON","tableData","data","colsWidth","splice","Table","isColumnHeader","nodes","forEach","row","klass","clipTable","Block","fromJSON","fragment","Document","create"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAGA;AACA;AACA;AACA;AACA;AACe,SAASA,mCAAT,CAA6CC,KAA7C,EAA2DC,cAA3D,EAA4F;AACzG,QAAM;AACJC,IAAAA,aADI;AACWC,IAAAA,aADX;AAC0BC,IAAAA,WAD1B;AACuCC,IAAAA;AADvC,MAEFJ,cAFJ;AAIA,QAAMK,OAAO,GAAG,uBAAUN,KAAK,CAACO,MAAN,EAAV,CAAhB;AACA,QAAMC,SAAS,GAAGF,OAAO,CAACG,IAA1B;;AAEA,MAAID,SAAJ,EAAe;AACbA,IAAAA,SAAS,CAACE,SAAV,GAAsB,CAACF,SAAS,CAACE,SAAV,IAAuB,EAAxB,EAA4BC,MAA5B,CAAmCR,aAAnC,EAAkDE,WAAW,GAAGF,aAAd,GAA8B,CAAhF,CAAtB;;AACA,QAAIS,gBAAMC,cAAN,CAAqBb,KAArB,KAA+BG,aAAa,KAAK,CAArD,EAAwD;AACtD,aAAOK,SAAS,CAACK,cAAjB;AACD;AACF;;AAED,MAAIP,OAAO,CAACQ,KAAZ,EAAmB;AACjBR,IAAAA,OAAO,CAACQ,KAAR,GAAgBR,OAAO,CAACQ,KAAR,CAAcH,MAAd,CAAqBT,aAArB,EAAoCE,WAAW,GAAGF,aAAd,GAA8B,CAAlE,CAAhB;AACAI,IAAAA,OAAO,CAACQ,KAAR,CAAcC,OAAd,CAAuBC,GAAD,IAA4C;AAChE,UAAIA,GAAG,CAACC,KAAJ,KAAc,MAAd,IAAwBD,GAAG,CAACF,KAAhC,EAAuC;AACrC;AACAE,QAAAA,GAAG,CAACF,KAAJ,GAAYE,GAAG,CAACF,KAAJ,CAAUH,MAAV,CAAiBR,aAAjB,EAAgCE,WAAW,GAAGF,aAAd,GAA8B,CAA9D,CAAZ;AACD;AACF,KALD;AAMD;;AAED,QAAMe,SAAS,GAAGC,mBAAMC,QAAN,CAAe,EAC/B,GAAGd,OAD4B;AAE/BG,IAAAA,IAAI,EAAED;AAFyB,GAAf,CAAlB;;AAIA,QAAMa,QAAQ,GAAGC,sBAASC,MAAT,CAAgB;AAC/BT,IAAAA,KAAK,EAAE,CAACI,SAAD;AADwB,GAAhB,CAAjB;;AAGA,SAAOG,QAAP;AACD","sourcesContent":["import { Block, BlockJSON, Document, InlineJSON, TextJSON } from '@ali/4ever-cangjie';\nimport Table, { TableData } from '../../mo/models';\nimport { cloneDeep } from 'lodash-es';\nimport { ITableSelection } from '../types';\n\n/**\n * 从一个 table 中剪切一个区域\n * @param table\n * @param tableSelection\n */\nexport default function generateClipTableFromTableSelection(table: Table, tableSelection: ITableSelection) {\n  const {\n    startRowIndex, startColIndex, endRowIndex, endColIndex,\n  } = tableSelection;\n\n  const tableJs = cloneDeep(table.toJSON()) as BlockJSON<TableData>;\n  const tableData = tableJs.data;\n\n  if (tableData) {\n    tableData.colsWidth = (tableData.colsWidth || []).splice(startColIndex, endColIndex - startColIndex + 1);\n    if (Table.isColumnHeader(table) && startColIndex !== 0) {\n      delete tableData.isColumnHeader;\n    }\n  }\n\n  if (tableJs.nodes) {\n    tableJs.nodes = tableJs.nodes.splice(startRowIndex, endRowIndex - startRowIndex + 1);\n    tableJs.nodes.forEach((row: BlockJSON | InlineJSON | TextJSON) => {\n      if (row.klass !== 'text' && row.nodes) {\n        // eslint-disable-next-line no-param-reassign\n        row.nodes = row.nodes.splice(startColIndex, endColIndex - startColIndex + 1);\n      }\n    });\n  }\n\n  const clipTable = Block.fromJSON({\n    ...tableJs,\n    data: tableData,\n  });\n  const fragment = Document.create({\n    nodes: [clipTable],\n  });\n  return fragment;\n}\n"],"file":"generateClipTableFromTableSelection.js"}