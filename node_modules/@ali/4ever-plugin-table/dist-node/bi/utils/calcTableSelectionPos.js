"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _models = _interopRequireDefault(require("../../mo/models"));

var _tableRow = _interopRequireDefault(require("../../mo/models/tableRow"));

var _everUtils = require("@ali/4ever-utils");

// TODO: memorize
// 提取计算表格选区的方法，供极简工具栏使用
const calcTableSelectionPos = params => {
  const {
    tblSelection,
    table,
    colsWidth: colsWidthParams,
    tableNode,
    scale = 1,
    absPostion
  } = params;

  if (!tblSelection || !tableNode) {
    return undefined;
  }

  const {
    startRowIndex,
    startColIndex,
    endRowIndex,
    endColIndex
  } = tblSelection;
  const startRow = table.nodes[startRowIndex];
  const endRow = table.nodes[endRowIndex];

  if (!_tableRow.default.isTableRow(startRow) || !_tableRow.default.isTableRow(endRow)) {
    return undefined;
  }

  let colsWidth = colsWidthParams;

  if (!colsWidth) {
    const dataColsWidth = table.data.colsWidth;
    if (!Array.isArray(dataColsWidth)) return undefined;
    colsWidth = dataColsWidth;

    if (_models.default.isAutofitWidth(table)) {
      const tableWidth = tableNode.getBoundingClientRect().width;
      const totalColsWidth = dataColsWidth.reduce((acc, w) => acc + w);
      colsWidth = dataColsWidth.map(w => w / totalColsWidth * tableWidth / scale);
    }
  }

  let left = colsWidth.slice(0, startColIndex).reduce((acc, c) => acc + c, 0);
  const right = colsWidth.slice(0, endColIndex + 1).reduce((acc, c) => acc + c, 0);
  const width = Math.max(0, right - left);
  const firstRow = table.nodes[0];
  const startCell = startRow.nodes[startColIndex];
  const endCell = endRow.nodes[endColIndex];

  if (!startCell || !endCell) {
    return undefined;
  }

  const relativeParent = tableNode.parentElement;
  if (!relativeParent) return undefined;
  const firstRowDOM = relativeParent.querySelector(`[data-cangjie-key="${firstRow.key}"]`);
  const startRowNode = relativeParent.querySelector(`[data-cangjie-key="${startRow.key}"]`);
  const endRowNode = relativeParent.querySelector(`[data-cangjie-key="${endRow.key}"]`);

  if (!startRowNode || !endRowNode || !firstRowDOM) {
    return undefined;
  }

  const startCellRect = (0, _everUtils.getBoundingRelativeRect)(startRowNode, relativeParent);
  const endCellRect = (0, _everUtils.getBoundingRelativeRect)(endRowNode, relativeParent);
  const firstCellRect = (0, _everUtils.getBoundingRelativeRect)(firstRowDOM, relativeParent);
  let {
    top
  } = startCellRect;
  const bottom = Math.max(startCellRect.bottom, endCellRect.bottom);
  const height = (bottom - top) / scale;
  let topDelta = 0;
  let isSticky = false; // 纠正 top 值（在高版本 chrome 中可能会有 0.5px 的偏移，在此消除偏移）

  if (firstCellRect.top !== 0) {
    // 若首行单元格的相对表格的 top 比较大，说明首行处于 sticky 状态
    isSticky = firstCellRect.top > 1 || firstCellRect.top < -1;

    if (!isSticky) {
      topDelta = firstCellRect.top;
    } else if (startRowIndex !== 0) {
      const lastRow = table.nodes[table.nodes.length - 1];

      const lastRowDOM = _everCangjie.domUtils.findDOMNodeSafely(lastRow.key, relativeParent);

      if (lastRowDOM) {
        const tableBottom = relativeParent.getBoundingClientRect().bottom;
        const lastRowBottom = lastRowDOM.getBoundingClientRect().bottom;
        const relativeBottom = tableBottom - lastRowBottom;

        if (relativeBottom < 1 && relativeBottom > -1) {
          topDelta = relativeBottom;
        }
      }
    }
  }

  const isSelectWholeCol = startRowIndex === 0 && endRowIndex === table.nodes.length - 1;
  const isSelectFirstRow = startRowIndex === 0 && endRowIndex === 0; // sticky 状态下选中整列时，高度不要 +1，否则会出现纵向滚动条

  const heightDelta = isSticky && (isSelectWholeCol || isSelectFirstRow) ? 0 : 1;
  top = (top - topDelta) / scale; // 计算绝对位置（默认计算相对 table 位置）

  if (absPostion) {
    const parentRect = relativeParent.getBoundingClientRect();
    top += parentRect.top / scale;
    left += parentRect.left / scale;
  }

  return {
    top,
    left,
    width: width + 1,
    height: height + heightDelta
  };
};

var _default = calcTableSelectionPos;
exports.default = _default;
//# sourceMappingURL=calcTableSelectionPos.js.map