{"version":3,"sources":["../../../../src/bi/utils/setTableColsWidth.ts"],"names":["isValidColsWidth","colsWidth","Array","isArray","every","isNumber","setTableColsWidth","controller","table","currentColsWidth","data","validColsWidth","nodes","length","fill","MIN_COL_WIDTH","map","cw","index","currentCw","command","Commands","setNodeByKey","key"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA,SAASA,gBAAT,CAA0BC,SAA1B,EAA0C;AACxC,SAAOC,KAAK,CAACC,OAAN,CAAcF,SAAd,KAA4BA,SAAS,CAACG,KAAV,CAAgBC,iBAAhB,CAAnC;AACD;;AAEc,SAASC,iBAAT,CACbC,UADa,EAEbC,KAFa,EAGbP,SAHa,EAIb;AACA,QAAMQ,gBAAgB,GAAGD,KAAK,CAACE,IAAN,CAAWT,SAApC;AACA,MAAIU,cAAwB,GAAG,EAA/B;;AACA,MAAI,CAACT,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAL,EAA+B;AAC7B,QAAID,gBAAgB,CAACS,gBAAD,CAApB,EAAwC;AACtC,aAAOF,UAAP;AACD;;AAEDI,IAAAA,cAAc,GAAGT,KAAK,CAACM,KAAK,CAACI,KAAN,CAAYC,MAAb,CAAL,CAA0BC,IAA1B,CAA+BC,wBAA/B,CAAjB;AACD,GAND,MAMO;AACLJ,IAAAA,cAAc,GAAGV,SAAS,CAACe,GAAV,CAAc,CAACC,EAAD,EAAKC,KAAL,KAAe;AAC5C,UAAI,uBAASD,EAAT,CAAJ,EAAkB;AAChB,eAAOA,EAAP;AACD;;AAED,UAAIf,KAAK,CAACC,OAAN,CAAcM,gBAAd,CAAJ,EAAqC;AACnC,cAAMU,SAAS,GAAGV,gBAAgB,CAACS,KAAD,CAAlC;;AACA,YAAI,uBAASC,SAAT,CAAJ,EAAyB;AACvB,iBAAOA,SAAP;AACD;AACF;;AAED,aAAOJ,wBAAP;AACD,KAbgB,CAAjB;AAcD;;AAED,SAAOR,UAAU,CAACa,OAAX,CAAmBC,sBAASC,YAA5B,EAA0Cd,KAAK,CAACe,GAAhD,EAAqD;AAC1Db,IAAAA,IAAI,EAAE,8BAAgB,EACpB,GAAGF,KAAK,CAACE,IADW;AAEpBT,MAAAA,SAAS,EAAEU;AAFS,KAAhB;AADoD,GAArD,CAAP;AAMD","sourcesContent":["import { Commands, Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport isNumber from './isNumber';\nimport { MIN_COL_WIDTH } from '../../utils/constants';\nimport filterValidData from '../../utils/utils/filterValidData';\n\nfunction isValidColsWidth(colsWidth: any) {\n  return Array.isArray(colsWidth) && colsWidth.every(isNumber);\n}\n\nexport default function setTableColsWidth(\n  controller: Controller,\n  table: Table,\n  colsWidth: any,\n) {\n  const currentColsWidth = table.data.colsWidth;\n  let validColsWidth: number[] = [];\n  if (!Array.isArray(colsWidth)) {\n    if (isValidColsWidth(currentColsWidth)) {\n      return controller;\n    }\n\n    validColsWidth = Array(table.nodes.length).fill(MIN_COL_WIDTH);\n  } else {\n    validColsWidth = colsWidth.map((cw, index) => {\n      if (isNumber(cw)) {\n        return cw;\n      }\n\n      if (Array.isArray(currentColsWidth)) {\n        const currentCw = currentColsWidth[index];\n        if (isNumber(currentCw)) {\n          return currentCw;\n        }\n      }\n\n      return MIN_COL_WIDTH;\n    });\n  }\n\n  return controller.command(Commands.setNodeByKey, table.key, {\n    data: filterValidData({\n      ...table.data,\n      colsWidth: validColsWidth,\n    }),\n  });\n}\n"],"file":"setTableColsWidth.js"}