"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moveToStartOfPreviousSibling = moveToStartOfPreviousSibling;
exports.moveToStartOfNextSibling = moveToStartOfNextSibling;
exports.moveToBeforeOfTable = moveToBeforeOfTable;
exports.moveToAfterOfTable = moveToAfterOfTable;
exports.moveToStartOfCell = moveToStartOfCell;

var _everCangjie = require("@ali/4ever-cangjie");

var _getRealNodeInTable = _interopRequireDefault(require("./getRealNodeInTable"));

var _setSelectionByTable = _interopRequireDefault(require("../../utils/utils/setSelectionByTable"));

function moveToStartOfPreviousSibling(controller, table) {
  const prevBlock = controller.value.document.getPreviousSibling(table.key);
  const {
    selection
  } = controller.value;
  let s = selection.moveToStartOfNode(table, controller);

  if (prevBlock) {
    s = selection.moveToStartOfNode(prevBlock, controller);
  }

  return controller.command(_everCangjie.Commands.select, (0, _setSelectionByTable.default)(s, false));
}

function moveToStartOfNextSibling(controller, table) {
  const nextBlock = controller.value.document.getNextSibling(table.key);
  const {
    selection
  } = controller.value;
  let s = selection.moveToEndOfNode(table, controller);

  if (nextBlock) {
    s = selection.moveToStartOfNode(nextBlock, controller);
  }

  return controller.command(_everCangjie.Commands.select, (0, _setSelectionByTable.default)(s, false));
}

function moveToBeforeOfTable(controller, table) {
  const {
    selection
  } = controller.value;
  const s = selection.moveToStartOfNode(table, controller);
  return controller.command(_everCangjie.Commands.select, (0, _setSelectionByTable.default)(s, false));
}

function moveToAfterOfTable(controller, table) {
  const {
    selection
  } = controller.value;
  const s = selection.moveToEndOfNode(table, controller);
  return controller.command(_everCangjie.Commands.select, (0, _setSelectionByTable.default)(s, false));
}

function moveToStartOfCell(controller, table, rowIndex, colIndex) {
  const maxRowIndex = table.nodes.length - 1;
  const rowI = Math.min(maxRowIndex, Math.max(0, rowIndex));
  const maxColIndex = table.nodes[rowI].nodes.length - 1;
  const colI = Math.min(maxColIndex, Math.max(0, colIndex));
  const cell = (0, _getRealNodeInTable.default)(table, rowI, colI);
  if (!cell) return controller;
  const {
    selection
  } = controller.value;
  const s = selection.moveToStartOfNode(cell, controller);
  return controller.command(_everCangjie.Commands.select, (0, _setSelectionByTable.default)(s, false));
}
//# sourceMappingURL=selectionCommands.js.map