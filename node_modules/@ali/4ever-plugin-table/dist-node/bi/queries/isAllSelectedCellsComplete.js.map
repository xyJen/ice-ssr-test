{"version":3,"sources":["../../../../src/bi/queries/isAllSelectedCellsComplete.ts"],"names":["isAllSelectedCellsComplete","controller","node","table","tableSelection","startRowIndex","_startRowIndex","endRowIndex","_endRowIndex","startColIndex","_startColIndex","endColIndex","_endColIndex","data","colsWidth","MAX_ROWS_INDEX","nodes","length","MAX_COLS_INDEX","Math","min","i","cell","position","key","rowIndex","colIndex","rowSpan","colSpan"],"mappings":"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","sourcesContent":["import Table from '../../mo/models';\nimport getRealNodeInTable from '../utils/getRealNodeInTable';\nimport getPositionOfCell from '../utils/getPositionOfCell';\nimport { ITableSelection } from '../types';\n\n// 判断选择的单元格是否完整\n// NOTE：有合并单元格情况下，如果选区只覆盖了合并单元格的一部分，则认为不完整\nexport default function isAllSelectedCellsComplete(\n  controller,\n  { node: table, tableSelection }: { node: Table; tableSelection: Omit<ITableSelection, 'key'>},\n) {\n  if (!tableSelection || !table) {\n    return false;\n  }\n\n  const {\n    startRowIndex: _startRowIndex,\n    endRowIndex: _endRowIndex,\n    startColIndex: _startColIndex,\n    endColIndex: _endColIndex,\n  } = tableSelection;\n  if (!table.data.colsWidth) {\n    return false;\n  }\n\n  const MAX_ROWS_INDEX = table.nodes.length - 1;\n  const MAX_COLS_INDEX = table.data.colsWidth.length - 1;\n\n  const startRowIndex = _startRowIndex;\n  const startColIndex = _startColIndex;\n  const endRowIndex = Math.min(_endRowIndex, MAX_ROWS_INDEX);\n  const endColIndex = Math.min(_endColIndex, MAX_COLS_INDEX);\n\n  // 上边框\n  for (let i = startColIndex; i <= endColIndex; i++) {\n    const cell = getRealNodeInTable(table, startRowIndex, i);\n    if (!cell) {\n      return false;\n    }\n    const position = getPositionOfCell(cell.key, table);\n    if (!position) {\n      return false;\n    }\n    if (position.rowIndex !== startRowIndex) {\n      return false;\n    }\n  }\n  // 左边框\n  for (let i = startRowIndex; i <= endRowIndex; i++) {\n    const cell = getRealNodeInTable(table, i, startColIndex);\n    if (!cell) {\n      return false;\n    }\n    const position = getPositionOfCell(cell.key, table);\n    if (!position) {\n      return false;\n    }\n    if (position.colIndex !== startColIndex) {\n      return false;\n    }\n  }\n  // 下边框\n  for (let i = startColIndex; i <= endColIndex; i++) {\n    const cell = getRealNodeInTable(table, endRowIndex, i);\n    if (!cell) {\n      return false;\n    }\n    const position = getPositionOfCell(cell.key, table);\n    if (!position) {\n      return false;\n    }\n    if (endRowIndex !== position.rowIndex + (cell.data?.rowSpan || 1) - 1) {\n      return false;\n    }\n  }\n  // 右边框\n  for (let i = startRowIndex; i <= endRowIndex; i++) {\n    const cell = getRealNodeInTable(table, i, endColIndex);\n    if (!cell) {\n      return false;\n    }\n    const position = getPositionOfCell(cell.key, table);\n    if (!position) {\n      return false;\n    }\n    if (endColIndex !== position.colIndex + (cell.data?.colSpan || 1) - 1) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"file":"isAllSelectedCellsComplete.js"}