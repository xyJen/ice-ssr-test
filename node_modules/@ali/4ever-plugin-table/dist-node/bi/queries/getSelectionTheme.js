"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSelectionTheme = getSelectionTheme;

var _getTable = _interopRequireDefault(require("../utils/getTable"));

var _getTableSelection = _interopRequireDefault(require("../utils/getTableSelection"));

var _constants = require("../../utils/constants");

function getCellBorder(bdr) {
  const {
    top,
    right,
    bottom,
    left
  } = bdr;
  const lBdColor = left && left.sz > 0 ? left.color : '';
  const rBdColor = right && right.sz > 0 ? right.color : '';
  const tBdColor = top && top.sz > 0 ? top.color : '';
  const bBdColor = bottom && bottom.sz > 0 ? bottom.color : '';
  return lBdColor === rBdColor && tBdColor === bBdColor && lBdColor === tBdColor ? lBdColor : '';
}

function getCellsSameValue(controller, fn, defaultValue = undefined) {
  const {
    value
  } = controller;
  const table = (0, _getTable.default)(value);
  const selection = (0, _getTableSelection.default)(controller);
  let res = defaultValue;

  if (selection && table) {
    const {
      startRowIndex,
      startColIndex,
      endRowIndex,
      endColIndex
    } = selection;
    const tablePath = value.document.getPath(table.key);

    if (tablePath) {
      for (let rowIndex = startRowIndex; rowIndex <= endRowIndex; rowIndex++) {
        for (let colIndex = startColIndex; colIndex <= endColIndex; colIndex++) {
          const isFirst = rowIndex === startRowIndex && colIndex === startColIndex;
          const cellPath = [...tablePath, rowIndex, colIndex];
          const cell = cellPath && value.document.getNodeByPath(cellPath);

          if (cell) {
            const payload = cell.data;

            if (payload && !payload.hidden) {
              if (isFirst) {
                res = fn(payload);
              } else if (res !== fn(payload)) {
                return defaultValue;
              }
            }
          }
        }
      }
    }
  }

  return res;
}

function getSelectionTheme(controller) {
  const bgColor = getCellsSameValue(controller, payload => payload?.fill);
  const bdColor = getCellsSameValue(controller, payload => {
    if (payload?.bdr) {
      return getCellBorder(payload.bdr);
    }

    return _constants.DEFAULT_BORDER_COLOR;
  }, _constants.DEFAULT_BORDER_COLOR);
  return {
    backgroundColor: bgColor,
    borderColor: bdColor
  };
}
//# sourceMappingURL=getSelectionTheme.js.map