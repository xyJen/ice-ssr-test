"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isAllSelectedCellsComplete;

var _getRealNodeInTable = _interopRequireDefault(require("../utils/getRealNodeInTable"));

var _getPositionOfCell = _interopRequireDefault(require("../utils/getPositionOfCell"));

// 判断选择的单元格是否完整
// NOTE：有合并单元格情况下，如果选区只覆盖了合并单元格的一部分，则认为不完整
function isAllSelectedCellsComplete(controller, {
  node: table,
  tableSelection
}) {
  if (!tableSelection || !table) {
    return false;
  }

  const {
    startRowIndex: _startRowIndex,
    endRowIndex: _endRowIndex,
    startColIndex: _startColIndex,
    endColIndex: _endColIndex
  } = tableSelection;

  if (!table.data.colsWidth) {
    return false;
  }

  const MAX_ROWS_INDEX = table.nodes.length - 1;
  const MAX_COLS_INDEX = table.data.colsWidth.length - 1;
  const startRowIndex = _startRowIndex;
  const startColIndex = _startColIndex;
  const endRowIndex = Math.min(_endRowIndex, MAX_ROWS_INDEX);
  const endColIndex = Math.min(_endColIndex, MAX_COLS_INDEX); // 上边框

  for (let i = startColIndex; i <= endColIndex; i++) {
    const cell = (0, _getRealNodeInTable.default)(table, startRowIndex, i);

    if (!cell) {
      return false;
    }

    const position = (0, _getPositionOfCell.default)(cell.key, table);

    if (!position) {
      return false;
    }

    if (position.rowIndex !== startRowIndex) {
      return false;
    }
  } // 左边框


  for (let i = startRowIndex; i <= endRowIndex; i++) {
    const cell = (0, _getRealNodeInTable.default)(table, i, startColIndex);

    if (!cell) {
      return false;
    }

    const position = (0, _getPositionOfCell.default)(cell.key, table);

    if (!position) {
      return false;
    }

    if (position.colIndex !== startColIndex) {
      return false;
    }
  } // 下边框


  for (let i = startColIndex; i <= endColIndex; i++) {
    const cell = (0, _getRealNodeInTable.default)(table, endRowIndex, i);

    if (!cell) {
      return false;
    }

    const position = (0, _getPositionOfCell.default)(cell.key, table);

    if (!position) {
      return false;
    }

    if (endRowIndex !== position.rowIndex + (cell.data?.rowSpan || 1) - 1) {
      return false;
    }
  } // 右边框


  for (let i = startRowIndex; i <= endRowIndex; i++) {
    const cell = (0, _getRealNodeInTable.default)(table, i, endColIndex);

    if (!cell) {
      return false;
    }

    const position = (0, _getPositionOfCell.default)(cell.key, table);

    if (!position) {
      return false;
    }

    if (endColIndex !== position.colIndex + (cell.data?.colSpan || 1) - 1) {
      return false;
    }
  }

  return true;
}
//# sourceMappingURL=isAllSelectedCellsComplete.js.map