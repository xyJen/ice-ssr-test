"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderToolbar;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everComponent = require("@ali/4ever-component");

var _tablePickerButton = _interopRequireDefault(require("./components/toolbarButtons/next/tablePickerButton"));

var _tableFillButton = _interopRequireDefault(require("./components/toolbarButtons/next/tableFillButton"));

var _tableBorderSet = _interopRequireDefault(require("./components/toolbarButtons/next/tableBorderSet"));

var _tableMergeButton = _interopRequireDefault(require("./components/toolbarButtons/next/tableMergeButton"));

var _tableVAlignButton = _interopRequireDefault(require("./components/toolbarButtons/next/tableVAlignButton"));

var _tableThemeButton = _interopRequireDefault(require("./components/toolbarButtons/next/tableThemeButton"));

var _utils = require("./utils");

const _createElement = /*#__PURE__*/React.createElement;
const buttons = {
  'table.picker': _tablePickerButton.default,
  'table.merge': _tableMergeButton.default,
  'table.border': _tableBorderSet.default,
  'table.vAlign': _tableVAlignButton.default,
  'table.fill': _tableFillButton.default,
  'table.theme': _tableThemeButton.default
};

function enableButtons(key, isInColumns) {
  if (isInColumns) {
    switch (key) {
      case 'table.picker':
      case 'table.fill':
      case 'table.vAlign':
        return true;

      default:
        return false;
    }
  } else {
    switch (key) {
      case 'table.picker':
      case 'table.fill':
      case 'table.merge':
      case 'table.vAlign':
      case 'table.border':
      case 'table.theme':
        return true;

      default:
        return false;
    }
  }
}

function createRenderToolbar(config) {
  return (props, controller) => {
    const {
      buttonName,
      extraProps
    } = props;
    const {
      value
    } = controller;
    const isInColumns = controller.query('isSelectionInColumns');
    const isInTableOrColumns = isInColumns || (0, _utils.isSelectionInTable)(value);
    const Component = buttons[buttonName];

    if (Component) {
      // 处理 table.picker 以外，其他都需要在选中 table 时出现
      if (buttonName !== _everComponent.ItemKey['table.picker'] && !isInTableOrColumns) {
        return null;
      }

      if (!enableButtons(buttonName, isInColumns)) {
        return null;
      }

      return /*#__PURE__*/_createElement(_everComponent.ItemSlot, {
        display: _everComponent.SlotType.iconMenu
      }, /*#__PURE__*/_createElement(Component, (0, _extends2.default)({
        controller: controller,
        locale: config.locale
      }, extraProps)));
    }

    return null;
  };
}
//# sourceMappingURL=createRenderToolbar.js.map