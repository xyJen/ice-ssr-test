{"version":3,"sources":["../../../../src/utils/commands/adjustColsWidth.ts"],"names":["adjustColsWidth","controller","table","containerWidthParam","tableMinColsWidth","value","data","injections","inj","find","i","key","injColsWidth","colsWidth","setInjections","filter","dataTable","document","getNode","cols","Array","isArray","slice","containerWidth","isAutofit","Table","isAutofitWidth","minColsWidth","length","fill","MIN_COL_WIDTH","path","getPath","colIndex","forEach","minColWidth","index","originColWidth","delta","totalColsWidth","reduce","acc","curr","nextColWidth","Math","max","newTotalWidth","w","resultColsWidth","totalW","undefined"],"mappings":"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","sourcesContent":["import equal from 'fast-deep-equal';\nimport { Controller } from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport { MIN_COL_WIDTH } from '../constants';\nimport setColsWidthInjection from './setColsWidthInjection';\nimport {\n  convertFromPercentToPixel,\n  convertFromPixelToPercent,\n} from '../utils/colsWidthConverter';\nimport getTableMaxWidthByContainer from '../utils/getTableMaxWidthByContainer';\n\nexport default function adjustColsWidth(controller: Controller, table: Table, containerWidthParam?: number) {\n  const { tableMinColsWidth } = controller.value.data;\n  const { injections } = controller.value;\n  const inj = injections.find(i => i.key === table.key);\n  const injColsWidth = inj?.data?.colsWidth;\n  if (!tableMinColsWidth) {\n    if (injColsWidth) {\n      controller.setInjections([\n        ...injections.filter(i => i.key !== table.key),\n      ]);\n    }\n    return controller;\n  }\n  const dataTable = controller.value.document.getNode(table.key) as Table;\n  const cols = dataTable?.data?.colsWidth;\n  if (!Array.isArray(cols)) {\n    return controller;\n  }\n  let colsWidth = cols.slice();\n  const containerWidth = containerWidthParam || getTableMaxWidthByContainer(controller, table);\n  const isAutofit = Table.isAutofitWidth(dataTable);\n  if (isAutofit) {\n    colsWidth = convertFromPercentToPixel(dataTable, containerWidth);\n  }\n  const minColsWidth = Array(colsWidth.length).fill(MIN_COL_WIDTH);\n  // eslint-disable-next-line guard-for-in\n  for (const key in tableMinColsWidth) {\n    const path = table.getPath(key);\n    if (!path) {\n      continue;\n    }\n    const colIndex = path[1];\n    // 根据 value.data.tableMinColsWidth 设置每列的最小列宽\n    minColsWidth[colIndex] = tableMinColsWidth[key];\n  }\n\n  minColsWidth.forEach((minColWidth, index) => {\n    const originColWidth = colsWidth[index];\n    // 当前列宽 >= 最小列宽，则不处理\n    if (originColWidth >= minColWidth) {\n      return;\n    }\n    const delta = minColWidth - originColWidth;\n    const totalColsWidth = colsWidth.reduce((acc, curr) => (acc + curr), 0);\n    // 设置当前列的列宽\n    colsWidth[index] += delta;\n    // 调整下一列列宽，尽量保证表格整体宽度不变\n    if (totalColsWidth <= containerWidth && index < colsWidth.length - 1) {\n      const nextColWidth = colsWidth[index + 1];\n      colsWidth[index + 1] = Math.max(minColsWidth[index + 1], nextColWidth - delta);\n    }\n  });\n  const newTotalWidth = colsWidth.reduce((acc, w) => (acc + w), 0);\n  let resultColsWidth = colsWidth;\n  if (isAutofit) {\n    const totalW = newTotalWidth > containerWidth ? newTotalWidth / containerWidth * 100 : undefined;\n    resultColsWidth = convertFromPixelToPercent(colsWidth, containerWidth, totalW);\n  }\n  if (!equal(injColsWidth, resultColsWidth)) {\n    setColsWidthInjection(controller, table, resultColsWidth);\n  }\n  return controller;\n};\n"],"file":"adjustColsWidth.js"}