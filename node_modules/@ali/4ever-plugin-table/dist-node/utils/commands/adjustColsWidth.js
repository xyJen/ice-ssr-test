"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = adjustColsWidth;

var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));

var _models = _interopRequireDefault(require("../../mo/models"));

var _constants = require("../constants");

var _setColsWidthInjection = _interopRequireDefault(require("./setColsWidthInjection"));

var _colsWidthConverter = require("../utils/colsWidthConverter");

var _getTableMaxWidthByContainer = _interopRequireDefault(require("../utils/getTableMaxWidthByContainer"));

function adjustColsWidth(controller, table, containerWidthParam) {
  const {
    tableMinColsWidth
  } = controller.value.data;
  const {
    injections
  } = controller.value;
  const inj = injections.find(i => i.key === table.key);
  const injColsWidth = inj?.data?.colsWidth;

  if (!tableMinColsWidth) {
    if (injColsWidth) {
      controller.setInjections([...injections.filter(i => i.key !== table.key)]);
    }

    return controller;
  }

  const dataTable = controller.value.document.getNode(table.key);
  const cols = dataTable?.data?.colsWidth;

  if (!Array.isArray(cols)) {
    return controller;
  }

  let colsWidth = cols.slice();
  const containerWidth = containerWidthParam || (0, _getTableMaxWidthByContainer.default)(controller, table);

  const isAutofit = _models.default.isAutofitWidth(dataTable);

  if (isAutofit) {
    colsWidth = (0, _colsWidthConverter.convertFromPercentToPixel)(dataTable, containerWidth);
  }

  const minColsWidth = Array(colsWidth.length).fill(_constants.MIN_COL_WIDTH); // eslint-disable-next-line guard-for-in

  for (const key in tableMinColsWidth) {
    const path = table.getPath(key);

    if (!path) {
      continue;
    }

    const colIndex = path[1]; // 根据 value.data.tableMinColsWidth 设置每列的最小列宽

    minColsWidth[colIndex] = tableMinColsWidth[key];
  }

  minColsWidth.forEach((minColWidth, index) => {
    const originColWidth = colsWidth[index]; // 当前列宽 >= 最小列宽，则不处理

    if (originColWidth >= minColWidth) {
      return;
    }

    const delta = minColWidth - originColWidth;
    const totalColsWidth = colsWidth.reduce((acc, curr) => acc + curr, 0); // 设置当前列的列宽

    colsWidth[index] += delta; // 调整下一列列宽，尽量保证表格整体宽度不变

    if (totalColsWidth <= containerWidth && index < colsWidth.length - 1) {
      const nextColWidth = colsWidth[index + 1];
      colsWidth[index + 1] = Math.max(minColsWidth[index + 1], nextColWidth - delta);
    }
  });
  const newTotalWidth = colsWidth.reduce((acc, w) => acc + w, 0);
  let resultColsWidth = colsWidth;

  if (isAutofit) {
    const totalW = newTotalWidth > containerWidth ? newTotalWidth / containerWidth * 100 : undefined;
    resultColsWidth = (0, _colsWidthConverter.convertFromPixelToPercent)(colsWidth, containerWidth, totalW);
  }

  if (!(0, _fastDeepEqual.default)(injColsWidth, resultColsWidth)) {
    (0, _setColsWidthInjection.default)(controller, table, resultColsWidth);
  }

  return controller;
}

;
//# sourceMappingURL=adjustColsWidth.js.map