"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSelectionStatus = useSelectionStatus;

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _getTableIsSelected = _interopRequireDefault(require("../utils/getTableIsSelected"));

/**
 * 该hook主要用于在光标状态改变时快速根据当前选区更新组件状态，避免等待仓颉更新所需要的500ms防抖延时(开启pending的情况下)
 * 该hook会自动判断当前是否支持pending，来返回对应状态值
 * @param controller Controller实例
 * @param node 需要感知光标选区变化的节点
 * @param onSetSelectionStatus 光标变化时的回调函数，用于触发组件Rerender
 * @param deps 依赖
 */
function useSelectionStatus(controller, node, onSetSelectionStatus, deps) {
  const updaterOnPending = _react.default.useCallback(({
    range: pendingSelection,
    isHideSelection
  }) => {
    const isSelectWholeTable = !!controller.query('isSelectWholeTable', {
      node
    });
    const isPendingSelected = (0, _getTableIsSelected.default)(node, controller);
    onSetSelectionStatus({
      range: pendingSelection,
      isHideSelection,
      isPendingSelected,
      isSelectWholeTable
    });
  }, [controller, node, onSetSelectionStatus]);

  const updaterOnHots = _react.default.useCallback(hots => {
    const {
      selection
    } = controller.value; // PERF: 非当前表格热区不处理

    if (hots.some(hot => node.key === hot.node.key || node.hasNode(hot.node.key))) {
      updaterOnPending({
        range: selection,
        // 交给 isSelectionTable 判断
        isSelected: false,
        isHideSelection: controller.query('isHideSelection')
      });
    }
  }, [controller, node, updaterOnPending]);

  (0, _everCangjie.useSelectionData)(controller.selectionData$, node.key, updaterOnPending, deps);
  (0, _everCangjie.useSelectingHots)(controller, updaterOnHots);
}
//# sourceMappingURL=useSelectionStatus.js.map