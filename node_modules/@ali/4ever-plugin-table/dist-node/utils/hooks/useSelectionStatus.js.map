{"version":3,"sources":["../../../../src/utils/hooks/useSelectionStatus.ts"],"names":["useSelectionStatus","controller","node","onSetSelectionStatus","deps","updaterOnPending","React","useCallback","range","pendingSelection","isHideSelection","isSelectWholeTable","query","isPendingSelected","updaterOnHots","hots","selection","value","some","hot","key","hasNode","isSelected","selectionData$"],"mappings":";;;;;;;;;AAAA;;AACA;;AAQA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,kBAAT,CACLC,UADK,EAELC,IAFK,EAGLC,oBAHK,EAILC,IAJK,EAKL;AACA,QAAMC,gBAAgB,GAAGC,eAAMC,WAAN,CACvB,CAAC;AAAEC,IAAAA,KAAK,EAAEC,gBAAT;AAA2BC,IAAAA;AAA3B,GAAD,KAAkD;AAChD,UAAMC,kBAAkB,GAAG,CAAC,CAACV,UAAU,CAACW,KAAX,CAAiB,oBAAjB,EAAuC;AAClEV,MAAAA;AADkE,KAAvC,CAA7B;AAGA,UAAMW,iBAAiB,GAAG,iCAAmBX,IAAnB,EAAyBD,UAAzB,CAA1B;AAEAE,IAAAA,oBAAoB,CAAC;AACnBK,MAAAA,KAAK,EAAEC,gBADY;AAEnBC,MAAAA,eAFmB;AAGnBG,MAAAA,iBAHmB;AAInBF,MAAAA;AAJmB,KAAD,CAApB;AAMD,GAbsB,EAcvB,CAACV,UAAD,EAAaC,IAAb,EAAmBC,oBAAnB,CAduB,CAAzB;;AAiBA,QAAMW,aAAa,GAAGR,eAAMC,WAAN,CACnBQ,IAAD,IAAiB;AACf,UAAM;AAAEC,MAAAA;AAAF,QAAgBf,UAAU,CAACgB,KAAjC,CADe,CAEf;;AACA,QACEF,IAAI,CAACG,IAAL,CACGC,GAAD,IAASjB,IAAI,CAACkB,GAAL,KAAaD,GAAG,CAACjB,IAAJ,CAASkB,GAAtB,IAA6BlB,IAAI,CAACmB,OAAL,CAAaF,GAAG,CAACjB,IAAJ,CAASkB,GAAtB,CADxC,CADF,EAIE;AACAf,MAAAA,gBAAgB,CAAC;AACfG,QAAAA,KAAK,EAAEQ,SADQ;AAEf;AACAM,QAAAA,UAAU,EAAE,KAHG;AAIfZ,QAAAA,eAAe,EAAET,UAAU,CAACW,KAAX,CAAiB,iBAAjB;AAJF,OAAD,CAAhB;AAMD;AACF,GAhBmB,EAiBpB,CAACX,UAAD,EAAaC,IAAb,EAAmBG,gBAAnB,CAjBoB,CAAtB;;AAoBA,qCAAiBJ,UAAU,CAACsB,cAA5B,EAA4CrB,IAAI,CAACkB,GAAjD,EAAsDf,gBAAtD,EAAwED,IAAxE;AACA,qCAAiBH,UAAjB,EAA6Ba,aAA7B;AACD","sourcesContent":["import React from 'react';\nimport {\n  Controller,\n  useSelectionData,\n  Observer,\n  useSelectingHots,\n  Hot,\n} from '@ali/4ever-cangjie';\nimport Table from '../../mo/models';\nimport getTableIsSelected from '../utils/getTableIsSelected';\n\nexport interface SelectionStatus {\n  range: Selection;\n  isHideSelection: boolean;\n  isPendingSelected: boolean;\n  isSelectWholeTable: boolean;\n}\n/**\n * 该hook主要用于在光标状态改变时快速根据当前选区更新组件状态，避免等待仓颉更新所需要的500ms防抖延时(开启pending的情况下)\n * 该hook会自动判断当前是否支持pending，来返回对应状态值\n * @param controller Controller实例\n * @param node 需要感知光标选区变化的节点\n * @param onSetSelectionStatus 光标变化时的回调函数，用于触发组件Rerender\n * @param deps 依赖\n */\nexport function useSelectionStatus(\n  controller: Controller,\n  node: Table,\n  onSetSelectionStatus: Observer<Omit<SelectionStatus, 'blocksKeys'>>,\n  deps: any[],\n) {\n  const updaterOnPending = React.useCallback(\n    ({ range: pendingSelection, isHideSelection }) => {\n      const isSelectWholeTable = !!controller.query('isSelectWholeTable', {\n        node,\n      });\n      const isPendingSelected = getTableIsSelected(node, controller);\n\n      onSetSelectionStatus({\n        range: pendingSelection,\n        isHideSelection,\n        isPendingSelected,\n        isSelectWholeTable,\n      });\n    },\n    [controller, node, onSetSelectionStatus],\n  );\n\n  const updaterOnHots = React.useCallback(\n    (hots: Hot[]) => {\n      const { selection } = controller.value;\n      // PERF: 非当前表格热区不处理\n      if (\n        hots.some(\n          (hot) => node.key === hot.node.key || node.hasNode(hot.node.key),\n        )\n      ) {\n        updaterOnPending({\n          range: selection,\n          // 交给 isSelectionTable 判断\n          isSelected: false,\n          isHideSelection: controller.query('isHideSelection'),\n        });\n      }\n    },\n    [controller, node, updaterOnPending],\n  );\n\n  useSelectionData(controller.selectionData$, node.key, updaterOnPending, deps);\n  useSelectingHots(controller, updaterOnHots);\n}\n"],"file":"useSelectionStatus.js"}