{"version":3,"sources":["../../../../src/utils/utils/visibleUtil.ts"],"names":["VISIBLE_MAP","VisibleUtil","callbackMap","setVisible","key","visible","fns","forEach","fn","getVisible","registerVisibleChange","callback","push","unregisterVisibleChange","i","length","splice","visibleUtil"],"mappings":";;;;;;AAIA,MAAMA,WAAwC,GAAG,EAAjD;;AAEO,MAAMC,WAAN,CAAkB;AAAA;AAAA,SACvBC,WADuB,GAC2B,EAD3B;AAAA;;AAGvBC,EAAAA,UAAU,CAACC,GAAD,EAAkBC,OAAlB,EAAoC;AAC5C,UAAMC,GAAG,GAAG,KAAKJ,WAAL,CAAiBE,GAAjB,CAAZ;AACAJ,IAAAA,WAAW,CAACI,GAAD,CAAX,GAAmBC,OAAnB;;AACA,QAAIC,GAAJ,EAAS;AACPA,MAAAA,GAAG,CAACC,OAAJ,CAAYC,EAAE,IAAIA,EAAE,CAACH,OAAD,CAApB;AACD;AACF;;AAEDI,EAAAA,UAAU,CAACL,GAAD,EAAkB;AAC1B,WAAOJ,WAAW,CAACI,GAAD,CAAX,IAAoB,KAA3B;AACD;;AAEDM,EAAAA,qBAAqB,CAACN,GAAD,EAAkBO,QAAlB,EAA0C;AAC7D,QAAI,CAAC,KAAKT,WAAL,CAAiBE,GAAjB,CAAL,EAA4B;AAC1B,WAAKF,WAAL,CAAiBE,GAAjB,IAAwB,CAACO,QAAD,CAAxB;AACD,KAFD,MAEO;AACL,WAAKT,WAAL,CAAiBE,GAAjB,EAAsBQ,IAAtB,CAA2BD,QAA3B;AACD;AACF;;AAEDE,EAAAA,uBAAuB,CAACT,GAAD,EAAkBO,QAAlB,EAA0C;AAC/D,UAAML,GAAG,GAAG,KAAKJ,WAAL,CAAiBE,GAAjB,CAAZ;;AACA,QAAIE,GAAJ,EAAS;AACP,WAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACS,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,YAAIR,GAAG,CAACQ,CAAD,CAAH,KAAWH,QAAf,EAAyB;AACvBL,UAAAA,GAAG,CAACU,MAAJ,CAAWF,CAAX,EAAc,CAAd;AACD;AACF;AACF;AACF;;AAhCsB;;;AAmClB,MAAMG,WAAW,GAAG,IAAIhB,WAAJ,EAApB","sourcesContent":["type CangjieKey = string;\n\nexport type CallbackType = (visible: boolean) => void;\n\nconst VISIBLE_MAP: Record<CangjieKey, boolean> = {};\n\nexport class VisibleUtil {\n  callbackMap: Record<CangjieKey, CallbackType[]> = {};\n\n  setVisible(key: CangjieKey, visible: boolean) {\n    const fns = this.callbackMap[key];\n    VISIBLE_MAP[key] = visible;\n    if (fns) {\n      fns.forEach(fn => fn(visible));\n    }\n  }\n\n  getVisible(key: CangjieKey) {\n    return VISIBLE_MAP[key] || false;\n  }\n\n  registerVisibleChange(key: CangjieKey, callback: CallbackType) {\n    if (!this.callbackMap[key]) {\n      this.callbackMap[key] = [callback];\n    } else {\n      this.callbackMap[key].push(callback);\n    }\n  }\n\n  unregisterVisibleChange(key: CangjieKey, callback: CallbackType) {\n    const fns = this.callbackMap[key];\n    if (fns) {\n      for (let i = 0; i < fns.length; i++) {\n        if (fns[i] === callback) {\n          fns.splice(i, 1);\n        }\n      }\n    }\n  }\n}\n\nexport const visibleUtil = new VisibleUtil();\n"],"file":"visibleUtil.js"}