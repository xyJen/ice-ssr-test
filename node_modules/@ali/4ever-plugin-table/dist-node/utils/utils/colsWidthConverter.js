"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertFromPixelToPercent = convertFromPixelToPercent;
exports.convertFromPercentToPixel = convertFromPercentToPixel;

var _constants = require("../constants");

var _formatColWidth = _interopRequireDefault(require("./formatColWidth"));

function convertFromPixelToPercent(colsWidth, containerWidth, totalPercent) {
  if (!Array.isArray(colsWidth)) return [];
  const pctColsWidth = [];
  colsWidth.reduce((acc, w, index) => {
    // 使 colsWidth 总和为 100
    if (index === colsWidth.length - 1) {
      return pctColsWidth.push((totalPercent || _constants.DEFAULT_PCT_WIDTH) - acc);
    }

    const pct = (0, _formatColWidth.default)(w / containerWidth * _constants.DEFAULT_PCT_WIDTH);
    pctColsWidth.push(pct);
    return acc + pct;
  }, 0);
  return pctColsWidth;
}

function convertFromPercentToPixel(table, containerWidth) {
  const {
    colsWidth
  } = table.data;
  if (!Array.isArray(colsWidth)) return [];
  const totalW = colsWidth.reduce((acc, cw) => acc + cw, 0);
  const pixelColsWidth = [];
  colsWidth.reduce((acc, cw, i) => {
    if (i === colsWidth.length - 1) {
      return pixelColsWidth.push(containerWidth - acc);
    }

    const colWidth = Math.round(containerWidth * (cw / totalW));
    pixelColsWidth.push(colWidth);
    return acc + colWidth;
  }, 0);
  return pixelColsWidth;
}
//# sourceMappingURL=colsWidthConverter.js.map