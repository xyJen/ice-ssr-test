{"version":3,"sources":["../../../../src/utils/utils/getPositionOfCell.ts"],"names":["POSITION_CACHE","WeakMap","hasCache","key","table","has","tableCache","get","undefined","setCache","position","set","getPositionOfCell","cellKey","nodes","path","getPath","length","colIndex","rowIndex"],"mappings":";;;;;;AASA,MAAMA,cAAc,GAAG,IAAIC,OAAJ,EAAvB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAcC,KAAd,KAA+B;AAC9C,MAAIJ,cAAc,CAACK,GAAf,CAAmBD,KAAnB,CAAJ,EAA+B;AAC7B,UAAME,UAAU,GAAGN,cAAc,CAACO,GAAf,CAAmBH,KAAnB,CAAnB;;AACA,QAAIE,UAAU,IAAIA,UAAU,CAACH,GAAD,CAAV,KAAoBK,SAAtC,EAAiD;AAC/C,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CARD;;AAUA,MAAMC,QAAQ,GAAG,CAACN,GAAD,EAAcC,KAAd,EAA4BM,QAA5B,KAA0D;AACzE,MAAI,CAACV,cAAc,CAACK,GAAf,CAAmBD,KAAnB,CAAL,EAAgC;AAC9BJ,IAAAA,cAAc,CAACW,GAAf,CAAmBP,KAAnB,EAA0B,EAA1B;AACD;;AACD,QAAME,UAAU,GAAGN,cAAc,CAACO,GAAf,CAAmBH,KAAnB,CAAnB;AACAE,EAAAA,UAAU,CAACH,GAAD,CAAV,GAAkBO,QAAlB;AACAV,EAAAA,cAAc,CAACW,GAAf,CAAmBP,KAAnB,EAA0BE,UAA1B;AACD,CAPD;;AASe,SAASM,iBAAT,CAA2BC,OAA3B,EAA4CT,KAA5C,EAAiE;AAC9E,MAAI,CAACA,KAAK,EAAEU,KAAZ,EAAmB,OAAO,IAAP;;AAEnB,MAAIZ,QAAQ,CAACW,OAAD,EAAUT,KAAV,CAAZ,EAA8B;AAC5B,WAAOJ,cAAc,CAACO,GAAf,CAAmBH,KAAnB,EAA2BS,OAA3B,CAAP;AACD;;AAED,QAAME,IAAI,GAAGX,KAAK,CAACY,OAAN,CAAcH,OAAd,CAAb;;AAEA,MAAI,CAACE,IAAD,IAASA,IAAI,CAACE,MAAL,KAAgB,CAA7B,EAAgC;AAC9BR,IAAAA,QAAQ,CAACI,OAAD,EAAUT,KAAV,EAAiB,IAAjB,CAAR;AACA,WAAO,IAAP;AACD;;AAED,QAAMM,QAAQ,GAAG;AACfQ,IAAAA,QAAQ,EAAEH,IAAI,CAAC,CAAD,CADC;AAEfI,IAAAA,QAAQ,EAAEJ,IAAI,CAAC,CAAD;AAFC,GAAjB;AAIAN,EAAAA,QAAQ,CAACI,OAAD,EAAUT,KAAV,EAAiBM,QAAjB,CAAR;AAEA,SAAOA,QAAP;AACD","sourcesContent":["import { Block } from '@ali/4ever-cangjie';\n\ninterface Position {\n  colIndex: number;\n  rowIndex: number;\n}\n\ntype CacheValue = Record<string, Position | null>;\n\nconst POSITION_CACHE = new WeakMap<Block, CacheValue>();\n\nconst hasCache = (key: string, table: Block) => {\n  if (POSITION_CACHE.has(table)) {\n    const tableCache = POSITION_CACHE.get(table);\n    if (tableCache && tableCache[key] !== undefined) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst setCache = (key: string, table: Block, position: Position | null) => {\n  if (!POSITION_CACHE.has(table)) {\n    POSITION_CACHE.set(table, {});\n  }\n  const tableCache = POSITION_CACHE.get(table)!;\n  tableCache[key] = position;\n  POSITION_CACHE.set(table, tableCache);\n}\n\nexport default function getPositionOfCell(cellKey: string, table: Block | null) {\n  if (!table?.nodes) return null;\n\n  if (hasCache(cellKey, table)) {\n    return POSITION_CACHE.get(table)![cellKey];\n  }\n\n  const path = table.getPath(cellKey);\n\n  if (!path || path.length !== 2) {\n    setCache(cellKey, table, null);\n    return null;\n  }\n\n  const position = {\n    colIndex: path[1],\n    rowIndex: path[0],\n  };\n  setCache(cellKey, table, position);\n\n  return position;\n}\n"],"file":"getPositionOfCell.js"}