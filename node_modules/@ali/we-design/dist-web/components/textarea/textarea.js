import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/* eslint-disable max-lines-per-function */
import React, { useState, useRef, useCallback, useEffect, useMemo, useImperativeHandle } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Container, Pre, FakeLine, ErrorTip } from "./styled";
import { classnames } from "../../utils";
var WRAP_TEXT = '\n';
var TextArea = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var style = props.style,
      className = props.className,
      value = props.value,
      _props$rows = props.rows,
      rows = _props$rows === void 0 ? 2 : _props$rows,
      _props$maxRows = props.maxRows,
      maxRows = _props$maxRows === void 0 ? rows : _props$maxRows,
      _props$offsetRowHeigh = props.offsetRowHeight,
      offsetRowHeight = _props$offsetRowHeigh === void 0 ? 10 : _props$offsetRowHeigh,
      disabled = props.disabled,
      readOnly = props.readOnly,
      errored = props.errored,
      errorTip = props.errorTip,
      restProps = _objectWithoutPropertiesLoose(props, ["style", "className", "value", "rows", "maxRows", "offsetRowHeight", "disabled", "readOnly", "errored", "errorTip"]);

  var textareaRef = useRef(null);

  var _useState = useState(false),
      isFocused = _useState[0],
      setIsFocused = _useState[1];

  var _useState2 = useState(false),
      isSelected = _useState2[0],
      setIsSelected = _useState2[1];

  var _useState3 = useState('unset'),
      maxHeight = _useState3[0],
      setMaxHeight = _useState3[1];

  useEffect(function () {
    if (maxRows < 1 || !textareaRef.current) {
      return;
    }

    var _window$getComputedSt = window.getComputedStyle(textareaRef.current, null),
        lineHeight = _window$getComputedSt.lineHeight;

    var tmpMaxHeight = String(maxRows * parseInt(lineHeight, 10) + offsetRowHeight);
    setMaxHeight(tmpMaxHeight);
  }, [maxRows, offsetRowHeight]);
  useImperativeHandle(ref, function () {
    return {
      focus: function focus() {
        textareaRef.current.focus();
      },
      select: function select() {
        textareaRef.current.select();
      },
      blur: function blur() {
        textareaRef.current.blur();
      }
    };
  });
  var handleFocus = useCallback(function () {
    setIsFocused(true);
  }, []);
  var handleBlur = useCallback(function () {
    setIsFocused(false);
    setIsSelected(false);
  }, []);
  var handleSelect = useCallback(function () {
    setIsSelected(true);
  }, []);
  var initPlaceholder = useMemo(function () {
    var placeholders = [];

    for (var i = 0; i < rows; i++) {
      placeholders.push( /*#__PURE__*/_createElement(FakeLine, {
        key: i
      }, i));
    }

    return placeholders;
  }, [rows]);
  var currentPlaceholder = useMemo(function () {
    return ((value == null ? void 0 : value.toString()) || '').split(WRAP_TEXT).map(function (v, vIndex) {
      return /*#__PURE__*/_createElement(FakeLine, {
        key: vIndex
      }, v || vIndex);
    });
  }, [value]);
  var containerStyle = useMemo(function () {
    return _extends({}, style, {
      maxHeight: maxHeight + "px"
    });
  }, [maxHeight, style]);
  return /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(Container, {
    style: containerStyle,
    className: classnames(className, {
      focused: !readOnly && isFocused,
      readOnlyFocused: readOnly && isSelected,
      disabled: disabled,
      readOnly: readOnly && !isSelected,
      error: errored
    })
  }, /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(Pre, null, currentPlaceholder), /*#__PURE__*/_createElement(Pre, {
    style: {
      width: 0
    }
  }, initPlaceholder)), /*#__PURE__*/_createElement("textarea", _extends({
    ref: textareaRef,
    value: value,
    rows: rows,
    disabled: disabled,
    readOnly: readOnly,
    onSelect: handleSelect,
    onFocus: handleFocus,
    onBlur: handleBlur
  }, restProps)))), errored && errorTip && /*#__PURE__*/_createElement(ErrorTip, null, errorTip));
}));
TextArea.displayName = 'TextArea';
export { TextArea };