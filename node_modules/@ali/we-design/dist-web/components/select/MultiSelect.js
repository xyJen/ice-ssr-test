import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

var _DisableMask;

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import React, { useState, useMemo, useCallback, useRef, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ArrowDownLineNormal } from "../../components/icons";
import { Dropdown } from "../../components/dropdown";
import { classnames } from "../../utils";
import { KEY_CODES } from "../../utils/consts";
import { useTranslate, DropdownAnimation } from '@ali/we-util';
import useKeyboards from "../../hooks/useKeyboards";
import { MultiSelectOption } from "./MultiSelectOption";
import { SelectOptionGroup } from "./SelectOptionGroup";
import { MultiSelectWrap, TriggerWrap, TriggerContent, EmptyWrap, OverlayWrap, ErrorTip, MultiSelectWrapper, DisableMask } from "./styled";
import { MultiSelectButton } from "./MultiSelectButton";
import { createMultiSelectContext } from "./SelectContext";
import { useFlush, useControlledValue } from "../../hooks";
import { isMultiSelectOption, isSelectOptionGroup } from "./utils";
import Overflow from 'rc-overflow';
import { Tooltip } from "../tooltip"; // eslint-disable-next-line max-lines-per-function

var MultiSelect = function MultiSelect(props, ref) {
  var children = props.children,
      getContainer = props.getContainer,
      style = props.style,
      className = props.className,
      overlayStyle = props.overlayStyle,
      renderTrigger = props.renderTrigger,
      bordered = props.bordered,
      onChange = props.onChange,
      onSelect = props.onSelect,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      onVisibleChange = props.onVisibleChange,
      optionWrapperStyle = props.optionWrapperStyle,
      selectable = props.selectable,
      locale = props.locale,
      size = props.size,
      zIndex = props.zIndex,
      showArrow = props.showArrow,
      placement = props.placement,
      overlayClassName = props.overlayClassName,
      mode = props.mode,
      rules = props.rules,
      autoClose = props.autoClose,
      testid = props.testid,
      title = props.title,
      errored = props.errored,
      animationPlacement = props.animationPlacement,
      showSelectOnRight = props.showSelectOnRight,
      tagRender = props.tagRender,
      emptyDisplay = props.emptyDisplay,
      searchNoMatchDisplay = props.searchNoMatchDisplay,
      maxTagCount = props.maxTagCount,
      _props$maxTagPlacehol = props.maxTagPlaceholder,
      maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? function (omittedValues) {
    return "+" + omittedValues.length + "...";
  } : _props$maxTagPlacehol,
      maxTagTextLength = props.maxTagTextLength,
      errorTip = props.errorTip,
      _props$defaultValue = props.defaultValue,
      defaultValue = _props$defaultValue === void 0 ? [] : _props$defaultValue,
      _props$optionFilterPr = props.optionFilterProp,
      optionFilterProp = _props$optionFilterPr === void 0 ? 'value' : _props$optionFilterPr,
      onSearch = props.onSearch,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      restHoverTip = props.restHoverTip,
      _props$overlayAutoAli = props.overlayAutoAlign,
      overlayAutoAlign = _props$overlayAutoAli === void 0 ? false : _props$overlayAutoAli,
      overlayHeight = props.overlayHeight,
      inputVal = props.inputVal,
      onInputChange = props.onInputChange,
      restProps = _objectWithoutPropertiesLoose(props, ["children", "getContainer", "style", "className", "overlayStyle", "renderTrigger", "bordered", "onChange", "onSelect", "disabled", "onVisibleChange", "optionWrapperStyle", "selectable", "locale", "size", "zIndex", "showArrow", "placement", "overlayClassName", "mode", "rules", "autoClose", "testid", "title", "errored", "animationPlacement", "showSelectOnRight", "tagRender", "emptyDisplay", "searchNoMatchDisplay", "maxTagCount", "maxTagPlaceholder", "maxTagTextLength", "errorTip", "defaultValue", "optionFilterProp", "onSearch", "onFocus", "onBlur", "restHoverTip", "overlayAutoAlign", "overlayHeight", "inputVal", "onInputChange"]); // value 受控


  var _useControlledValue = useControlledValue(props.value, defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1]; // visible 受控


  var _useControlledValue2 = useControlledValue(props.visible, props.defaultVisible),
      visible = _useControlledValue2[0],
      setVisible = _useControlledValue2[1];

  var _useState = useState(false),
      searching = _useState[0],
      setSearching = _useState[1];

  var _useControlledValue3 = useControlledValue(inputVal, ''),
      searchVal = _useControlledValue3[0],
      setSearchVal = _useControlledValue3[1]; // 初始化的时候收集一次 SelectOption 节点，选中的节点


  var OptionChildrenRecord = useMemo(function () {
    var result = new Map();

    function iterator(nodes) {
      React.Children.forEach(nodes, function (node) {
        if (isSelectOptionGroup(node)) {
          iterator(node.props.children);
        } else if (isMultiSelectOption(node)) {
          result.set(node.props.value, node.props.children);
        }
      });
    }

    iterator(children);
    return result;
  }, [children]); // 状态

  var state = useRef({
    OptionChildrenRecord: OptionChildrenRecord,
    OptionDisabledRecord: new Map(),
    keyword: '',
    showOptionValues: [],
    isInputFocused: false,
    keyboardAt: null
  }).current; // 是否正在搜索

  var isSearching = searching && mode === 'search'; // Input 实例

  var inputRef = useRef(null); // 强制刷新函数

  var flush = useFlush(); // 国际化

  var t = useTranslate(locale);
  /**
   * 根据keyword找到对应的所有包含此keyword的option的value，模糊搜索
   */

  var obscureSearchByLabel = useCallback(function (keyword) {
    var result = [];

    function iterator(nodes) {
      React.Children.forEach(nodes, function (node) {
        if (isSelectOptionGroup(node)) {
          iterator(node.props.children);
        } else if (isMultiSelectOption(node)) {
          if (node.props.label.includes(keyword)) {
            result.push(node.props.value);
          }
        }
      });
    }

    iterator(children);
    return result;
  }, [children]);
  /**
   * 根据keyword找到的此keyword的option的value
   */

  var exactSearchByLabel = useCallback(function (keyword) {
    var result;

    function iterator(nodes) {
      React.Children.forEach(nodes, function (node) {
        if (isSelectOptionGroup(node)) {
          iterator(node.props.children);
        } else if (isMultiSelectOption(node)) {
          if (node.props.label === keyword) {
            result = node.props.value;
          }
        }
      });
    }

    iterator(children);
    return result;
  }, [children]); // console.log('children', children);
  // console.log('OptionChildrenRecord', OptionChildrenRecord);
  // console.log('state.showOptionValues', state.showOptionValues);
  // console.log('value', value);

  /**
   * 可见性变化处理函数
   *
   * @param {boolean} e 可见性
   * @return {void}
   */

  var handleVisibleChange = useCallback(function (e) {
    if (e !== visible) {
      if (onVisibleChange) {
        onVisibleChange(e);
      }

      setVisible(e);
    } // 下拉选择消失时，手动触发blur事件


    if (!e && inputRef && inputRef.current) {
      inputRef.current.blur();
    }
  }, [visible, onVisibleChange, setVisible]);
  /**
   * 值变化处理函数
   *
   * @param {ValueType} e 变化值
   * @return {void}
   */

  var handleValueChange = useCallback(function (e) {
    if (typeof value !== 'undefined') {
      var newValue = [].concat(value);
      var index = newValue.indexOf(e);

      if (index === -1) {
        newValue.push(e);
      } else {
        newValue.splice(index, 1);
      }

      setValue(newValue);
      flush();
      setSearchVal('');
      onInputChange && onInputChange(''); // if (onChange && (e !== `${value}` || !selectable)) {

      if (onChange && selectable) {
        var error;

        for (var _iterator = _createForOfIteratorHelperLoose(rules || []), _step; !(_step = _iterator()).done;) {
          var rule = _step.value;
          if (typeof rule !== 'object') return;
          var validator = rule.validator;

          if (typeof validator === 'function' && !validator(e)) {
            error = {
              violatedRule: rule,
              prevVal: newValue
            };
            break;
          }
        }

        onChange(newValue, error);
      }
    }
  }, [value, setValue, flush, setSearchVal, onInputChange, onChange, selectable, rules]);
  /**
   * 将值添加至value中
   */

  var addValue = useCallback(function (e) {
    if (typeof value !== 'undefined') {
      var newValue = [].concat(value);
      var index = newValue.indexOf(e);

      if (index === -1) {
        newValue.push(e);
      }

      setValue(newValue);
      flush(); // if (onChange && (e !== `${value}` || !selectable)) {

      if (onChange && selectable) {
        var error;

        for (var _iterator2 = _createForOfIteratorHelperLoose(rules || []), _step2; !(_step2 = _iterator2()).done;) {
          var rule = _step2.value;
          if (typeof rule !== 'object') return;
          var validator = rule.validator;

          if (typeof validator === 'function' && !validator(e)) {
            error = {
              violatedRule: rule,
              prevVal: newValue
            };
            break;
          }
        }

        onChange(newValue, error);
      }
    }
  }, [value, setValue, flush, onChange, selectable, rules]);
  /**
   * 点击 Option 选项
   *
   * @param {IClickOptionEvent<VT>} event { value, disabled }
   * @return {void}
   */

  var handleClickOption = useCallback(function (event) {
    if (event.disabled) {
      return;
    }

    if (onSelect) onSelect(event.value); // 如果 selectable 为 false，那么一直可以触发 onChange

    if (event.value !== undefined && selectable) {
      handleValueChange(event.value);
    }

    if (autoClose) {
      handleVisibleChange(false);
    }
  }, [selectable, handleVisibleChange, handleValueChange, autoClose, onSelect]);
  /**
   * Option 被移除
   *
   * @param {ValueType} key
   * @return {void}
   */

  var handleRemoveOption = useCallback(function (key) {
    state.OptionChildrenRecord["delete"](key);
    flush();
  }, [state, flush]);
  /**
   * Option 被添加或者被更新
   *
   * @param {ValueType} key
   * @return {void}
   */

  var handleUpdateOption = useCallback(function (key, newChildren) {
    var oldChildren = state.OptionChildrenRecord.get(key);

    if (oldChildren !== newChildren) {
      state.OptionChildrenRecord.set(key, newChildren);
      flush();
    }
  }, [state, flush]);
  /**
   * Option disabled更新
   *
   * @param {ValueType} key
   * @param {boolean}
   * @return {void}
   */

  var handleCacheOptionDisabled = useCallback(function (key, newDisabled) {
    state.OptionDisabledRecord.set(key, newDisabled);
  }, [state]);
  /**
   * Option disabled删除
   *
   * @param {ValueType} key
   * @return {void}
   */

  var handleUncacheOptionDisabled = useCallback(function (key) {
    state.OptionDisabledRecord["delete"](key);
  }, [state]);
  /**
   * 点开菜单输入框聚焦的时候，点击我们不希望生效，不然会收起弹层
   *
   * @return {void}
   */

  var handleClickTrigger = useCallback(function () {
    if (visible && state.isInputFocused || disabled) {
      return false;
    }
  }, [disabled, state.isInputFocused, visible]);
  /**
   * 当展开菜单的时候，点击trigger我们不希望Input失焦
   */

  var handleMouseDownTrigger = useCallback(function (e) {
    if (visible && state.isInputFocused) {
      e.preventDefault(); // if (inputRef && inputRef.current) {
      //   inputRef.current.blur();
      // }
    }
  }, [state.isInputFocused, visible]);
  /**
   * 输入框失焦
   *
   * @param {React.FocusEvent<HTMLInputElement>} e
   * @return {void}
   */

  var handleInputBlur = useCallback(function (e) {
    var inputValue = (searchVal || e.target.value).trim();
    setSearching(false);
    state.showOptionValues = [];
    state.isInputFocused = false;
    var values = Array.from(state.OptionChildrenRecord.keys());
    var inputFinalVal = inputValue;

    if (inputFinalVal !== '') {
      if (mode === 'search') {
        if (optionFilterProp === 'label') {
          var findValByLabel = exactSearchByLabel(inputValue);

          if (!findValByLabel) {
            handleVisibleChange(false);
            setSearchVal('');
            onInputChange && onInputChange('');

            if (onBlur) {
              onBlur();
            }

            return;
          }

          inputFinalVal = findValByLabel;
        }

        var index = values.findIndex(function (v) {
          return "" + v === inputFinalVal;
        });

        if (index !== -1) {
          addValue(values[index]);
        }
      } else if (mode === 'input') {
        // input 模式的 ValueType 只支持 string | number
        var processedInputValue;

        if (typeof values[0] === 'number') {
          processedInputValue = Number(inputFinalVal);
        } else {
          processedInputValue = inputFinalVal;
        }

        addValue(processedInputValue);
      }
    }

    handleVisibleChange(false);
    setSearchVal('');
    onInputChange && onInputChange('');

    if (onBlur) {
      onBlur();
    }
  }, [searchVal, state, optionFilterProp, mode, handleVisibleChange, onBlur, exactSearchByLabel, addValue, setSearchVal, onInputChange]);
  /**
   * 输入框聚焦
   *
   * @return {void}
   */

  var handleInputFocus = useCallback(function () {
    state.isInputFocused = true;
    state.showOptionValues = Array.from(state.OptionChildrenRecord.keys());

    if (onFocus) {
      onFocus();
    }

    flush(); // if (inputRef.current) {
    //   inputRef.current.select();
    // }
  }, [state, onFocus, flush]);
  /**
   * 输入框回车
   *
   * @return {void}
   */

  var handleInputEnter = useCallback(function () {
    if (state.keyboardAt === null && inputRef.current) {
      inputRef.current.blur();
    }
  }, [state]);
  useEffect(function () {
    if (mode === 'search' && searching && onSearch) {
      state.OptionChildrenRecord = OptionChildrenRecord;
      state.showOptionValues = Array.from(state.OptionChildrenRecord.keys());
      flush();
    }
  }, [state, OptionChildrenRecord, flush, mode, searching, onSearch]);
  useEffect(function () {
    // 远程搜索
    if (mode === 'search' && searching && onSearch) {
      if (searchVal === '') {
        setSearching(false);
      }

      onSearch(searchVal);
    }
  }, [mode, onSearch, searchVal, searching]);
  /**
   * 输入值变化
   *
   * @param {React.ChangeEvent<HTMLInputElement>}
   * @return {void}
   */

  var handleInputChange = useCallback(function (e) {
    setSearching(true);
    onInputChange && onInputChange(e.target.value);
    setSearchVal(e.target.value);
    state.keyboardAt = null; // 远程搜索

    if (onSearch) {
      return;
    } // 本地数据搜索


    if (optionFilterProp === 'label') {
      if (e.target.value !== '') {
        state.showOptionValues = obscureSearchByLabel(e.target.value);
      } else {
        setSearching(false);
        state.showOptionValues = Array.from(state.OptionChildrenRecord.keys());
      }
    } else {
      if (e.target.value === '') {
        setSearching(false);
      }

      state.showOptionValues = Array.from(state.OptionChildrenRecord.keys()).filter(function (v) {
        return ("" + v).includes(e.target.value);
      });
    }

    flush();
  }, [onInputChange, setSearchVal, state, onSearch, optionFilterProp, flush, obscureSearchByLabel]);
  /**
   * 选项高亮移动
   *
   * @param {1 | -1} step
   * @return {void}
   */

  var handleChangeKeyboardAt = useCallback(function (step) {
    var values = isSearching ? state.showOptionValues : Array.from(state.OptionChildrenRecord.keys());
    var index = state.keyboardAt ? values.indexOf(state.keyboardAt) : -1; // 需要跳过disabled的选项

    do {
      index += step;
    } while (index < values.length && !!state.OptionDisabledRecord.get(values[index]));

    if (index >= 0 && index <= values.length - 1) {
      if (values[index] !== state.keyboardAt) {
        state.keyboardAt = values[index];
        flush();
      }
    }
  }, [state, flush, isSearching]);
  /**
   * 按下向下键，聚焦时触发选项高亮
   *
   * @return {void}
   */

  var handlePressDown = useCallback(function () {
    handleChangeKeyboardAt(1);
  }, [handleChangeKeyboardAt]);
  /**
   * 按下向上键，聚焦时触发选项高亮
   *
   * @return {void}
   */

  var handlePressUp = useCallback(function () {
    handleChangeKeyboardAt(-1);
  }, [handleChangeKeyboardAt]);
  /**
   * 按下Enter键，选择高亮选项
   */

  var handlePressEnter = useCallback(function () {
    if (state.keyboardAt !== null) {
      handleValueChange(state.keyboardAt);
    }

    handleVisibleChange(false);
  }, [handleValueChange, handleVisibleChange, state.keyboardAt]); // 键盘事件定义

  var keyboards = useMemo(function () {
    return [[[KEY_CODES.DOWN], handlePressDown], [[KEY_CODES.UP], handlePressUp], [[KEY_CODES.ENTER], handlePressEnter]];
  }, [handlePressDown, handlePressUp, handlePressEnter]); // 绑定键盘事件

  var keyboardHandlers = useKeyboards({
    keyboards: keyboards,
    on: visible
  }); // context

  var context = useMemo(function () {
    return {
      value: value,
      selectable: !!selectable,
      showOptionValues: state.showOptionValues,
      isSearching: isSearching,
      keyboardAt: state.keyboardAt,
      optionWrapperStyle: optionWrapperStyle,
      showSelectOnRight: showSelectOnRight,
      onClickOption: handleClickOption,
      onUpdateOption: handleUpdateOption,
      onRemoveOption: handleRemoveOption,
      onCacheOptionDisabled: handleCacheOptionDisabled,
      onUncacheOptionDisabled: handleUncacheOptionDisabled
    };
  }, [value, selectable, isSearching, state.keyboardAt, state.showOptionValues, optionWrapperStyle, showSelectOnRight, handleClickOption, handleUpdateOption, handleRemoveOption, handleCacheOptionDisabled, handleUncacheOptionDisabled]); // 获取选中的 Option 的子节点

  var SelectedOptionChildren = [];

  if (value !== null && value !== undefined) {
    for (var _iterator3 = _createForOfIteratorHelperLoose(value), _step3; !(_step3 = _iterator3()).done;) {
      var option = _step3.value;
      SelectedOptionChildren.push(state.OptionChildrenRecord.get(option) || null);
    }
  }

  var SelectContext = createMultiSelectContext();
  var searchNoMatch = isSearching && state.showOptionValues.length === 0;
  var emptySource = !isSearching && children.length === 0;
  var onClickRemove = useCallback(function (content) {
    if (typeof value !== 'undefined') {
      var newValue = [].concat(value);
      var index = newValue.indexOf(content);
      newValue.splice(index, 1);
      setValue(newValue);

      if (onChange) {
        onChange(newValue);
      }

      flush();
    }
  }, [flush, onChange, setValue, value]);

  var renderChosenItems = function renderChosenItems(content) {
    var onClose = function onClose(e) {
      e.stopPropagation();
      onClickRemove(content);
    };

    var displayContent = content;

    if (typeof maxTagTextLength === 'number') {
      if (typeof content === 'string' || typeof content === 'number') {
        var strLabel = String(displayContent);

        if (strLabel.length > maxTagTextLength) {
          displayContent = strLabel.slice(0, maxTagTextLength) + "...";
        }
      }
    }

    return typeof tagRender === 'function' ? tagRender(displayContent, content, !disabled, onClose) : defaultRenderChosenItems(displayContent, !disabled, onClose);
  };

  var renderRest = function renderRest(omittedValues) {
    var content = typeof maxTagPlaceholder === 'function' ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
    return /*#__PURE__*/_createElement(Tooltip, {
      title: restHoverTip
    }, defaultRenderChosenItems(content, false));
  };

  var defaultRenderChosenItems = function defaultRenderChosenItems(content, closable, onClose) {
    if (closable === void 0) {
      closable = true;
    }

    return /*#__PURE__*/_createElement("span", {
      className: "multiple-select-item",
      title: typeof content === 'string' || typeof content === 'number' ? content.toString() : undefined
    }, /*#__PURE__*/_createElement("span", {
      className: "multiple-select-item-content"
    }, content), closable && /*#__PURE__*/_createElement("span", {
      className: "multiple-select-item-remove",
      onClick: onClose
    }, "\xD7"));
  };

  var inputNode = /*#__PURE__*/_createElement(TriggerContent, {
    className: "select_left_wrap",
    style: {
      minWidth: 9
    }
  }, /*#__PURE__*/_createElement(MultiSelectButton, {
    value: searchVal,
    locale: locale,
    renderTrigger: renderTrigger,
    mode: mode,
    visible: visible,
    onBlur: handleInputBlur,
    onFocus: handleInputFocus,
    onEnter: handleInputEnter,
    onChange: handleInputChange,
    inputRef: inputRef,
    testid: testid
  }, SelectedOptionChildren || /*#__PURE__*/_createElement("span", null, value)));

  var selectionNode = /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(Overflow, {
    style: {
      flexGrow: 1
    },
    prefixCls: "multiple-select-overflow",
    data: value,
    renderItem: renderChosenItems,
    renderRest: renderRest,
    suffix: !disabled && (mode === 'search' || mode === 'input') ? inputNode : null,
    itemKey: "key",
    maxCount: maxTagCount
  }), /*#__PURE__*/_createElement("span", {
    className: "select_right_wrap",
    style: {
      width: 20
    }
  }, /*#__PURE__*/_createElement(ArrowDownLineNormal, {
    "data-testid": testid && "select-arrow-" + testid,
    className: classnames('select-arrow', {
      opened: visible,
      hidden: !showArrow
    })
  })));

  var defaultEmptyDisplay = useMemo(function () {
    return /*#__PURE__*/_createElement(EmptyWrap, null, /*#__PURE__*/_createElement("span", {
      className: "message"
    }, t('we_ui_search_no_data')));
  }, [t]);
  var optionsNode = useMemo(function () {
    if (emptySource) {
      return emptyDisplay || defaultEmptyDisplay;
    }

    if (searchNoMatch) {
      return searchNoMatchDisplay || defaultEmptyDisplay;
    }

    return /*#__PURE__*/_createElement("div", {
      style: {
        display: 'block'
      }
    }, children);
  }, [children, defaultEmptyDisplay, emptyDisplay, emptySource, searchNoMatch, searchNoMatchDisplay]);
  var multiSelectStyle = useMemo(function () {
    return _extends({}, style, {
      padding: '0 3px 0 3px'
    });
  }, [style]);
  return /*#__PURE__*/_createElement(SelectContext.Provider, {
    value: context
  }, /*#__PURE__*/_createElement(MultiSelectWrapper, null, /*#__PURE__*/_createElement(Dropdown, {
    title: title,
    trigger: "click",
    visible: visible,
    onVisibleChange: handleVisibleChange,
    getContainer: getContainer,
    overlayStyle: overlayStyle,
    overlayClassName: overlayClassName,
    zIndex: zIndex,
    placement: placement,
    testid: testid,
    overlayAutoAlign: overlayAutoAlign,
    overlay: /*#__PURE__*/_createElement(DropdownAnimation, {
      visible: !!visible,
      placement: animationPlacement
    }, /*#__PURE__*/_createElement(OverlayWrap, {
      style: {
        height: overlayHeight
      },
      "data-testid": testid && "overlay-" + testid
    }, optionsNode))
  }, /*#__PURE__*/_createElement(MultiSelectWrap, _extends({
    showArrow: showArrow,
    ref: ref,
    tabIndex: disabled ? undefined : '0',
    style: multiSelectStyle,
    className: classnames(className, size, {
      bordered: bordered,
      focused: visible,
      disabled: disabled,
      actived: visible,
      errored: !disabled && errored
    })
  }, keyboardHandlers, restProps, {
    onClick: handleClickTrigger,
    onMouseDown: handleMouseDownTrigger,
    "data-testid": testid ? "SelectWrap-" + testid : undefined
  }), /*#__PURE__*/_createElement(TriggerWrap, {
    className: "select_trigger_wrap"
  }, selectionNode))), errored && errorTip && /*#__PURE__*/_createElement(ErrorTip, null, errorTip), disabled && (_DisableMask || (_DisableMask = /*#__PURE__*/_createElement(DisableMask, null)))));
}; // 为了 hack VT的传递、Select.Option、Select.OptionGroup的定义


var MultiSelectMemo = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(MultiSelect));
MultiSelectMemo.defaultProps = {
  defaultVisible: false,
  disabled: false,
  mode: 'default',
  selectable: true,
  size: 'normal',
  showArrow: true,
  autoClose: true,
  errored: false,
  showSelectOnRight: false
};
MultiSelectMemo.displayName = 'Select';
MultiSelectMemo.Option = MultiSelectOption;
MultiSelectMemo.OptionGroup = SelectOptionGroup;
export { MultiSelectMemo as MultiSelect };