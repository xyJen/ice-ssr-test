/* eslint-disable max-lines-per-function */

/* eslint-disable @typescript-eslint/explicit-function-return-type */
import React, { useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import warning from 'warning';
import { CloseBigNormal } from '@ali/we-icon';
import { classnames } from "../../utils";
import { RoundcloseFillBetaNormal, ClosedNormal } from "../icons";
import { TabBarTab, TabBarTabItemWrap, TabBarWrapper } from "./styled";

var TabBarTabsNode = function TabBarTabsNode(props) {
  var saveRef = props.saveRef,
      panes = props.panes,
      size = props.size,
      activeKey = props.activeKey,
      type = props.type,
      className = props.className,
      tabPosition = props.tabPosition,
      testid = props.testid,
      _props$tabBarItemClas = props.tabBarItemClassName,
      tabBarItemClassName = _props$tabBarItemClas === void 0 ? '' : _props$tabBarItemClas,
      onCloseAll = props.onCloseAll,
      onClose = props.onClose,
      singleTab = props.singleTab;
  var rst = []; // 下面两个ref是为了缓存函数引用，根据key进行缓存
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  var onTabClicks = useRef({}); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  var onTabCloses = useRef({}); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  React.Children.forEach(panes, function (child) {
    if (!child) {
      return;
    }

    var key = child.key;
    var isActived = activeKey === key;

    if (!onTabClicks.current[key] || onTabClicks.current[key] !== props.onTabClick) {
      onTabClicks.current[key] = function (e) {
        if (props.onTabClick) {
          props.onTabClick(key, e);
        }
      };
    }

    if (!onTabCloses.current[key] || onTabCloses.current[key] !== props.onClose) {
      onTabCloses.current[key] = function (e) {
        e.stopPropagation();

        if (props.onClose) {
          props.onClose(key);
        }
      };
    }

    warning('tab' in child.props, 'There must be `tab` property on children of Tabs.');
    var id = props.id ? key + "-" + props.id : key;
    var canCloseAll = typeof onCloseAll === 'function';
    var canShowSingleClose = !canCloseAll || !singleTab;
    var closable = typeof child.props.closable !== 'undefined' ? !!child.props.closable && canShowSingleClose : canShowSingleClose;

    var node = /*#__PURE__*/_createElement(TabBarTab, {
      role: "tab",
      "aria-disabled": child.props.disabled ? 'true' : 'false',
      "aria-selected": isActived ? 'true' : 'false',
      "aria-controls": "tabpane-" + id,
      tabIndex: isActived ? 0 : -1,
      key: key,
      id: "tab-" + id,
      className: classnames(type, size, tabPosition, className, tabBarItemClassName + "-wrapper", {
        disabled: !!child.props.disabled,
        actived: isActived,
        single: singleTab
      }),
      ref: isActived ? saveRef('activeTab') : saveRef("tab_" + key),
      onClick: !isActived && !child.props.disabled ? onTabClicks.current[key] : undefined,
      "data-testid": testid + "_" + id
    }, /*#__PURE__*/_createElement(TabBarTabItemWrap, {
      className: classnames(type, size, tabPosition, className, tabBarItemClassName + "-item", {
        actived: isActived,
        disabled: !!child.props.disabled,
        single: singleTab
      })
    }, child.props.tab, type === 'editable-card' && closable && /*#__PURE__*/_createElement(ClosedNormal, {
      onClick: onTabCloses.current[key],
      className: "card-tab-close-button",
      style: {
        fontSize: 14
      },
      testid: testid + "_" + id + "_close"
    }), type === 'editable-line' && closable && /*#__PURE__*/_createElement(CloseBigNormal, {
      onClick: onTabCloses.current[key],
      className: "line-tab-close-button",
      style: {
        fontSize: 14
      },
      testid: testid + "_" + id + "_close"
    }), type === 'd-design' && onClose && /*#__PURE__*/_createElement(CloseBigNormal, {
      onClick: onTabCloses.current[key],
      className: "line-tab-close-button",
      style: {
        fontSize: 20
      },
      testid: testid + "_" + id + "_close"
    }), type === 'editable-biz' && closable && /*#__PURE__*/_createElement(RoundcloseFillBetaNormal, {
      onClick: onTabCloses.current[key],
      className: classnames('biz-tab-close-button'),
      testid: testid + "_" + id + "_close"
    })));

    rst.push(node);
  });
  return /*#__PURE__*/_createElement(TabBarWrapper, {
    className: classnames(tabPosition && "" + tabPosition, tabBarItemClassName),
    ref: saveRef('navTabsContainer')
  }, rst);
};

export default TabBarTabsNode;