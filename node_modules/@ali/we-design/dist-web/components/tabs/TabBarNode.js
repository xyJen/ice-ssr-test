import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

var _MoreBetaNormal, _ArrowLeftNormal, _ArrowRightNormal, _TabOptionButton, _CloseAllDivider;

/* eslint-disable max-lines-per-function */

/* eslint-disable react/destructuring-assignment */

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable class-methods-use-this */

/* eslint-disable @typescript-eslint/explicit-function-return-type */

/* eslint-disable react/static-property-placement */
import React, { Component } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import fastdom from 'fastdom';
import ResizeObserver from 'resize-observer-polyfill';
import { CloseBigNormal } from '@ali/we-icon';
import { ArrowLeftNormal, ArrowRightNormal, ArrowDownLineNormal, MoreBetaNormal } from "../icons";
import { classnames } from "../../utils";
import { getVisibleRangePadding } from "./utils";
import debounce from "lodash-es/debounce";
import { setTransform, isTransform3dSupported, noop } from "./utils";
import { CloseAllWrapper, CloseAllDivider, TabOptionButton, NavContainer, NavWrap, Nav, PrevButton, NextButton, MoreButtonWrapper } from "./styled";
import { Select, SelectOption } from "../select";
import { MORE_BUTTON_WRAPPER_WIDTH, MORE_BUTTON_WRAPPER_HEIGHT } from "./constants";
var DEFAULT_SIZE = {
  width: 0,
  height: 0,
  left: 0,
  top: 0
};
var selectStyle = {
  width: 24,
  height: 24,
  borderRadius: 4
};
var selectOptionStyle = {
  padding: 6
};

var TabBarNode = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TabBarNode, _Component);

  function TabBarNode(_props) {
    var _this;

    _this = _Component.call(this, _props) || this;
    _this.offset = void 0;
    _this.resizeObserver = void 0;
    _this.debouncedResize = void 0;
    _this.lastNextPrevShown = void 0;
    _this.lastWheelDirection = void 0;
    _this.tabList = void 0;
    _this.tabSizeMap = void 0;
    _this.lockAnimationTimer = void 0;
    _this.wrapperOffsetWH = 0;
    _this.wrapperScrollWH = 0;

    _this.prevTransitionEnd = function (e) {
      if (e.propertyName !== 'opacity') {
        return;
      }

      var container = _this.props.getRef('container');

      _this.scrollToActiveTab({
        target: container,
        currentTarget: container
      });
    };

    _this.scrollToActiveTab = function (e) {
      var _this$props = _this.props,
          getRef = _this$props.getRef,
          excessMode = _this$props.excessMode;
      var activeTab = getRef('activeTab');
      var navWrap = getRef('navWrap');

      if (e && e.target !== e.currentTarget || !activeTab) {
        return;
      } // when not scrollable or enter scrollable first time, don't emit scrolling


      if (excessMode === 'arrow' || excessMode === 'triangle') {
        var needToScroll = _this.isNextPrevShown() && _this.lastNextPrevShown;

        _this.lastNextPrevShown = _this.isNextPrevShown();

        if (!needToScroll) {
          return;
        }
      }

      var activeTabWH = _this.getScrollWH(activeTab);

      var navWrapNodeWH = _this.getOffsetWH(navWrap);

      var _assertThisInitialize = _assertThisInitialized(_this),
          offset = _assertThisInitialize.offset;

      var wrapOffset = _this.getOffsetLT(navWrap);

      var activeTabOffset = _this.getOffsetLT(activeTab);

      if (wrapOffset > activeTabOffset) {
        // activeTab 在 wrap 的可见区域左侧
        offset += wrapOffset - activeTabOffset;

        _this.setOffset(offset);

        if (excessMode === 'arrow' || excessMode === 'triangle') {
          _this.setNextPrev();
        }
      } else if (wrapOffset + navWrapNodeWH < activeTabOffset + activeTabWH) {
        // activeTab 在 wrap 的可见区域右侧
        offset -= activeTabOffset + activeTabWH - (wrapOffset + navWrapNodeWH);
        var minOffset = _this.wrapperOffsetWH - _this.wrapperScrollWH;
        var maxOffset = 0;
        var newOffset = Math.min(Math.max(offset, minOffset), maxOffset);

        _this.setOffset(newOffset);

        if (excessMode === 'arrow' || excessMode === 'triangle') {
          _this.setNextPrev();
        }
      }
    };

    _this.prev = function (e) {
      var _this$props2 = _this.props,
          onPrevClick = _this$props2.onPrevClick,
          getRef = _this$props2.getRef;

      if (onPrevClick) {
        onPrevClick(e);
      }

      var navWrapNode = getRef('navWrap');

      var navWrapNodeWH = _this.getOffsetWH(navWrapNode);

      var _assertThisInitialize2 = _assertThisInitialized(_this),
          offset = _assertThisInitialize2.offset;

      _this.setOffset(offset + navWrapNodeWH);

      _this.setNextPrev();
    };

    _this.next = function (e) {
      var _this$props3 = _this.props,
          onNextClick = _this$props3.onNextClick,
          getRef = _this$props3.getRef;

      if (onNextClick) {
        onNextClick(e);
      }

      var navWrapNode = getRef('navWrap');

      var navWrapNodeWH = _this.getOffsetWH(navWrapNode);

      var _assertThisInitialize3 = _assertThisInitialized(_this),
          offset = _assertThisInitialize3.offset;

      _this.setOffset(offset - navWrapNodeWH);

      _this.setNextPrev();
    };

    _this.clearLockAnimationTimer = function () {
      _this.lockAnimationTimer && window.clearTimeout(_this.lockAnimationTimer);
      _this.lockAnimationTimer = 0;
    };

    _this.handleWheel = function (e) {
      var _assertThisInitialize4 = _assertThisInitialized(_this),
          wrapperOffsetWH = _assertThisInitialize4.wrapperOffsetWH,
          wrapperScrollWH = _assertThisInitialize4.wrapperScrollWH;

      if (wrapperOffsetWH >= wrapperScrollWH) {
        return false;
      }

      var deltaX = e.deltaX,
          deltaY = e.deltaY; // Convert both to x & y since wheel only happened on PC

      var mixed = 0;
      var absX = Math.abs(deltaX);
      var absY = Math.abs(deltaY);

      if (absX === absY) {
        mixed = _this.lastWheelDirection === 'x' ? deltaX : deltaY;
      } else if (absX > absY) {
        mixed = deltaX;
        _this.lastWheelDirection = 'x';
      } else {
        mixed = deltaY;
        _this.lastWheelDirection = 'y';
      }

      var minOffset = wrapperOffsetWH - wrapperScrollWH;
      var maxOffset = 0;
      var newOffset = Math.min(Math.max(-mixed + _this.offset, minOffset), maxOffset);

      _this.setOffset(newOffset);

      _this.clearLockAnimationTimer();

      _this.doLockAnimation();

      _this.updateVisibleRange();

      e.preventDefault();
    };

    _this.doLockAnimation = function () {
      _this.setState({
        lockAnimation: Date.now()
      });
    };

    _this.handleResize = function () {
      fastdom.measure(function () {
        var _this$props4 = _this.props,
            getRef = _this$props4.getRef,
            _this$props4$tabPosit = _this$props4.tabPosition,
            tabPosition = _this$props4$tabPosit === void 0 ? 'top' : _this$props4$tabPosit;
        var wrapper = getRef('navWrap');
        var tabs = getRef('navTabsContainer');
        _this.wrapperOffsetWH = tabPosition === 'top' ? wrapper.offsetWidth || 0 : wrapper.offsetHeight || 0;
        _this.wrapperScrollWH = tabPosition === 'top' ? tabs.scrollWidth || 0 : tabs.scrollHeight || 0;
      });
    };

    _this.getTabList = function (panes) {
      var tabList = [];
      React.Children.forEach(panes, function (child) {
        if (child && /*#__PURE__*/React.isValidElement(child)) {
          tabList.push({
            key: child.key,
            tab: child.props.tab
          });
        }
      });
      return tabList;
    };

    _this.updateTabSizes = function () {
      var _this$props5 = _this.props,
          getRef = _this$props5.getRef,
          activeKey = _this$props5.activeKey;
      var tabSizeMap = new Map();
      return new Promise(function (resolve) {
        fastdom.measure(function () {
          _this.tabList.forEach(function (_ref) {
            var key = _ref.key;
            var btnNode;

            if (activeKey === key) {
              btnNode = getRef('activeTab');
            } else {
              btnNode = getRef("tab_" + key);
            }

            if (btnNode) {
              tabSizeMap.set(key, {
                width: btnNode.offsetWidth || 0,
                height: btnNode.offsetHeight || 0,
                left: btnNode.offsetLeft || 0,
                top: btnNode.offsetTop || 0
              });
            }
          });

          _this.tabSizeMap = tabSizeMap;
          resolve();
        });
      });
    };

    _this.updateVisibleRange = function () {
      var _this$props6 = _this.props,
          _this$props6$tabPosit = _this$props6.tabPosition,
          tabPosition = _this$props6$tabPosit === void 0 ? 'top' : _this$props6$tabPosit,
          _this$props6$type = _this$props6.type,
          type = _this$props6$type === void 0 ? 'line' : _this$props6$type;
      var unit = 'width';
      var position = 'left';

      if (tabPosition === 'left') {
        unit = 'height';
        position = 'top';
      }

      var _getVisibleRangePaddi = getVisibleRangePadding(type, tabPosition),
          leftOrTopPadding = _getVisibleRangePaddi.leftOrTopPadding,
          rightOrBottomPadding = _getVisibleRangePaddi.rightOrBottomPadding;

      var len = _this.tabList.length;

      if (!len) {
        _this.setState({
          visibleStart: 0,
          visibleEnd: 0
        });
      }

      var _assertThisInitialize5 = _assertThisInitialized(_this),
          tabList = _assertThisInitialize5.tabList,
          tabSizeMap = _assertThisInitialize5.tabSizeMap,
          wrapperOffsetWH = _assertThisInitialize5.wrapperOffsetWH;

      var endIndex = len;

      for (var i = 0; i < len; i += 1) {
        var offset = tabSizeMap.get(tabList[i].key) || DEFAULT_SIZE;

        if (offset[position] + offset[unit] + _this.offset - rightOrBottomPadding > wrapperOffsetWH) {
          endIndex = i - 1;
          break;
        }
      }

      var startIndex = 0;

      for (var _i = len - 1; _i >= 0; _i -= 1) {
        var _offset = tabSizeMap.get(tabList[_i].key) || DEFAULT_SIZE;

        if (_offset[position] + _this.offset + leftOrTopPadding < 0) {
          startIndex = _i + 1;
          break;
        }
      }

      return _this.setState({
        visibleStart: startIndex,
        visibleEnd: endIndex
      });
    };

    _this.getDropdown = function () {
      var _this$props7 = _this.props,
          onTabClick = _this$props7.onTabClick,
          panes = _this$props7.panes,
          activeKey = _this$props7.activeKey,
          tabPosition = _this$props7.tabPosition,
          type = _this$props7.type;
      var rst = [];
      var placement = tabPosition === 'left' ? 'rightBottom' : 'bottomRight';
      React.Children.forEach(panes, function (child, index) {
        if (!child || index >= _this.state.visibleStart && index <= _this.state.visibleEnd) {
          return;
        }

        var key = child.key,
            props = child.props;
        var disabled = props.disabled,
            tab = props.tab;

        var node = /*#__PURE__*/_createElement(SelectOption, {
          disabled: disabled,
          value: key,
          style: selectOptionStyle,
          key: key
        }, tab);

        rst.push(node);
      });

      var onChange = function onChange(key) {
        onTabClick && onTabClick(key);
      };

      return /*#__PURE__*/_createElement(MoreButtonWrapper, {
        className: classnames(tabPosition || 'top', type)
      }, /*#__PURE__*/_createElement(Select, {
        autoClose: true,
        onChange: onChange,
        value: activeKey,
        renderTrigger: function renderTrigger() {
          return _MoreBetaNormal || (_MoreBetaNormal = /*#__PURE__*/_createElement(MoreBetaNormal, null));
        },
        placement: placement,
        showArrow: false,
        className: "more-button-inner-icon",
        style: selectStyle,
        selectable: false
      }, rst));
    };

    _this.rotateArrow = function (angle) {
      return {
        flex: 'none',
        transform: "rotate(" + angle + "deg)",
        width: 8,
        height: 8
      };
    };

    _this.getPrevNext = function () {
      var _this$state = _this.state,
          prev = _this$state.prev,
          next = _this$state.next;
      var _this$props8 = _this.props,
          testid = _this$props8.testid,
          excessMode = _this$props8.excessMode;
      var showNextPrev = prev || next;

      var _assertThisInitialize6 = _assertThisInitialized(_this),
          prevCallback = _assertThisInitialize6.prev,
          nextCallback = _assertThisInitialize6.next,
          prevTransitionEnd = _assertThisInitialize6.prevTransitionEnd;

      var prevButton = /*#__PURE__*/_createElement(PrevButton, {
        onClick: prev ? prevCallback : undefined,
        unselectable: "on",
        className: classnames('prevbutton', {
          disabled: !prev,
          show: showNextPrev
        }),
        onTransitionEnd: prevTransitionEnd,
        "data-testid": (testid || '') + "_pre"
      }, excessMode === 'arrow' ? _ArrowLeftNormal || (_ArrowLeftNormal = /*#__PURE__*/_createElement(ArrowLeftNormal, {
        className: "prev-icon"
      })) : /*#__PURE__*/_createElement(ArrowDownLineNormal, {
        className: "prev-icon",
        style: _this.rotateArrow(90)
      }));

      var nextButton = /*#__PURE__*/_createElement(NextButton, {
        onClick: next ? nextCallback : undefined,
        unselectable: "on",
        className: classnames('nextbutton', {
          disabled: !next,
          show: showNextPrev
        }),
        "data-testid": (testid || '') + "_next"
      }, excessMode === 'arrow' ? _ArrowRightNormal || (_ArrowRightNormal = /*#__PURE__*/_createElement(ArrowRightNormal, {
        className: "next-icon"
      })) : /*#__PURE__*/_createElement(ArrowDownLineNormal, {
        className: "next-icon",
        style: _this.rotateArrow(-90)
      }));

      return /*#__PURE__*/_createElement(React.Fragment, null, prevButton, nextButton);
    };

    _this.offset = 0;
    _this.tabList = [];
    _this.tabSizeMap = new Map();
    _this.lockAnimationTimer = 0;
    _this.state = {
      next: false,
      prev: false,
      needsDropdown: false,
      visibleStart: 0,
      visibleEnd: 0,
      lockAnimation: 0
    };
    return _this;
  }

  var _proto = TabBarNode.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var _this$props9 = this.props,
        getRef = _this$props9.getRef,
        excessMode = _this$props9.excessMode;
    this.componentDidUpdate();
    var debounceCallback = noop;

    if (excessMode === 'arrow' || excessMode === 'triangle') {
      debounceCallback = function debounceCallback() {
        _this2.setNextPrev();

        if (excessMode !== 'triangle') {
          _this2.scrollToActiveTab();
        }
      };
    } else if (excessMode === 'dropdown') {
      debounceCallback = function debounceCallback() {
        _this2.handleResize();

        var needsDropdown = _this2.isNeedsDropdown();

        if (needsDropdown !== _this2.state.needsDropdown) {
          _this2.setState({
            needsDropdown: needsDropdown
          });
        } else {
          _this2.scrollToActiveTab();

          _this2.updateVisibleRange();
        }
      };
    }

    var navWrapper = getRef('navWrap');

    if (navWrapper) {
      navWrapper.addEventListener('wheel', this.handleWheel);
    }

    this.debouncedResize = debounce(debounceCallback, 200);
    this.resizeObserver = new ResizeObserver(this.debouncedResize);
    this.resizeObserver.observe(getRef('container'));
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    var _this3 = this;

    var props = this.props;
    var excessMode = props.excessMode;

    if (excessMode === 'arrow' || excessMode === 'triangle') {
      this.setNextPrev().then(function (nextPrev) {
        // wait next, prev show hide
        if (_this3.isNextPrevShown(_this3.state) !== _this3.isNextPrevShown(nextPrev)) {
          // eslint-disable-next-line react/no-did-update-set-state
          _this3.setState({}, _this3.scrollToActiveTab);
        } else if (!prevProps || props.activeKey !== prevProps.activeKey) {
          // can not use props.activeKey
          if (excessMode !== 'triangle') {
            _this3.scrollToActiveTab();
          }
        }
      });
    }

    if (excessMode === 'dropdown') {
      if (prevState && prevState.needsDropdown !== this.state.needsDropdown) {
        this.setState({}, function () {
          _this3.handleResize();

          _this3.updateVisibleRange();

          _this3.scrollToActiveTab();
        });
      }

      if (!prevProps || props.activeKey !== prevProps.activeKey) {
        this.scrollToActiveTab();
      }
    }

    if (!prevProps || props.panes !== prevProps.panes) {
      var oldTabListKey = this.tabList && this.tabList.map(function (tab) {
        return tab.key;
      }).join('_');
      this.tabList = this.getTabList(props.panes);
      var tabListKey = this.tabList.map(function (tab) {
        return tab.key;
      }).join('_');

      if (oldTabListKey !== tabListKey) {
        this.updateTabSizes().then(function () {
          _this3.updateVisibleRange();

          _this3.handleResize();

          if (excessMode === 'dropdown') {
            var needsDropdown = _this3.isNeedsDropdown();

            if (needsDropdown !== _this3.state.needsDropdown) {
              _this3.setState({
                needsDropdown: needsDropdown
              });
            } else {
              _this3.scrollToActiveTab();
            }
          }
        });
      }
    }

    if (this.state.lockAnimation !== (prevState == null ? void 0 : prevState.lockAnimation)) {
      this.clearLockAnimationTimer();

      if (this.state.lockAnimation) {
        this.lockAnimationTimer = window.setTimeout(function () {
          _this3.setState({
            lockAnimation: 0
          });
        }, 100);
      }
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var getRef = this.props.getRef;

    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }

    if (this.debouncedResize && this.debouncedResize.cancel) {
      this.debouncedResize.cancel();
    }

    var navWrapper = getRef('navWrap');

    if (navWrapper) {
      navWrapper.removeEventListener('wheel', this.handleWheel);
    }
  }
  /**
   * 检测左右按钮的激活状态，并调整 offset
   */
  ;

  _proto.setNextPrev = function setNextPrev() {
    var _this4 = this;

    return new Promise(function (resolve) {
      fastdom.measure(function () {
        var getRef = _this4.props.getRef;
        var navNode = getRef('nav');
        var navTabsContainer = getRef('navTabsContainer');

        var navNodeWH = _this4.getScrollWH(navTabsContainer || navNode); // Add 1px to fix `offsetWidth` with decimal in Chrome not correct handle
        // https://github.com/ant-design/ant-design/issues/13423


        var containerWH = _this4.getOffsetWH(getRef('container')) + 1;

        var navWrapNodeWH = _this4.getOffsetWH(getRef('navWrap'));

        fastdom.mutate(function () {
          var offset = _this4.offset;
          var minOffset = containerWH - navNodeWH;
          var _this4$state = _this4.state,
              next = _this4$state.next,
              prev = _this4$state.prev;

          if (minOffset >= 0) {
            next = false;

            _this4.setOffset(0);

            offset = 0;
          } else if (minOffset < offset) {
            next = true;
          } else {
            next = false; // Fix https://github.com/ant-design/ant-design/issues/8861
            // Test with container offset which is stable
            // and set the offset of the nav wrap node

            var realOffset = navWrapNodeWH - navNodeWH;

            _this4.setOffset(realOffset);

            offset = realOffset;
          }

          if (offset < 0) {
            prev = true;
          } else {
            prev = false;
          }

          _this4.setNext(next);

          _this4.setPrev(prev);

          resolve({
            next: next,
            prev: prev
          });
        });
      });
    });
  }
  /**
   * 获取节点的宽度
   *
   * @param {HTMLElement} node
   * @return {number} offsetWidth
   */
  ;

  _proto.getOffsetWH = function getOffsetWH(node) {
    var _this$props$tabPositi = this.props.tabPosition,
        tabPosition = _this$props$tabPositi === void 0 ? 'top' : _this$props$tabPositi;
    return tabPosition === 'top' ? node.offsetWidth : node.offsetHeight;
  }
  /**
   * 获取节点的滚动宽度
   *
   * @param {HTMLElement} node
   * @return {number} scrollWidth
   */
  ;

  _proto.getScrollWH = function getScrollWH(node) {
    var _this$props$tabPositi2 = this.props.tabPosition,
        tabPosition = _this$props$tabPositi2 === void 0 ? 'top' : _this$props$tabPositi2;
    return tabPosition === 'top' ? node.scrollWidth : node.scrollHeight;
  }
  /**
   * 获取节点的偏移量
   *
   * @param {HTMLElement} node
   * @return {number} clientRect.left
   */
  ;

  _proto.getOffsetLT = function getOffsetLT(node) {
    var _this$props$tabPositi3 = this.props.tabPosition,
        tabPosition = _this$props$tabPositi3 === void 0 ? 'top' : _this$props$tabPositi3;
    return tabPosition === 'top' ? node.getBoundingClientRect().left : node.getBoundingClientRect().top;
  }
  /**
   * 设置偏移量
   *
   */
  ;

  _proto.setOffset = function setOffset(offset) {
    var _this$props10 = this.props,
        getRef = _this$props10.getRef,
        tabPosition = _this$props10.tabPosition;
    var target = Math.min(0, offset);

    if (this.offset !== target) {
      this.offset = target;
      var navOffset = {};
      var navStyle = getRef('nav').style;
      var transformSupported = isTransform3dSupported(navStyle);

      if (transformSupported) {
        if (tabPosition !== 'left') {
          navOffset = {
            value: "translate3d(" + target + "px,0,0)"
          };
        } else {
          navOffset = {
            value: "translate3d(0," + target + "px,0)"
          };
        }
      } else {
        if (tabPosition !== 'left') {
          navOffset = {
            name: 'left',
            value: target + "px"
          };
        } else {
          navOffset = {
            name: 'top',
            value: target + "px"
          };
        }
      }

      if (transformSupported) {
        setTransform(navStyle, navOffset.value);
      } else {
        navStyle[navOffset.name] = navOffset.value;
      } // 滚动后更新下拉菜单中的选项


      if (this.state.needsDropdown) {
        this.updateVisibleRange();
      }
    }
  };

  _proto.setPrev = function setPrev(v) {
    if (this.state.prev !== v) {
      this.setState({
        prev: v
      });
    }
  };

  _proto.setNext = function setNext(v) {
    if (this.state.next !== v) {
      this.setState({
        next: v
      });
    }
  };

  /**
   * 判断左右的按钮是否显示
   */
  _proto.isNextPrevShown = function isNextPrevShown(state) {
    if (state) {
      return state.next || state.prev;
    }

    var _this$state2 = this.state,
        next = _this$state2.next,
        prev = _this$state2.prev;
    return next || prev;
  }
  /**
   * 检测 dropdown 是否需要显示，并调整 offset
   */
  ;

  _proto.isNeedsDropdown = function isNeedsDropdown() {
    var _this$props11 = this.props,
        getRef = _this$props11.getRef,
        tabPosition = _this$props11.tabPosition;
    var navNode = getRef('nav');
    var navTabsContainer = getRef('navTabsContainer');
    var navNodeWH = this.getScrollWH(navTabsContainer || navNode);
    var containerWH = this.getOffsetWH(getRef('container'));
    var closeAllWH = getRef('closeAll') ? this.getOffsetWH(getRef('closeAll')) : 0; // 最小的偏移量（可滚动时为负值）

    var minOffset = containerWH - navNodeWH - closeAllWH;
    var needsDropdown = minOffset < 0;
    var moreButtonWH = tabPosition === 'left' ? MORE_BUTTON_WRAPPER_WIDTH : MORE_BUTTON_WRAPPER_HEIGHT;

    if (!needsDropdown) {
      this.setOffset(0);
    } else if (minOffset - moreButtonWH > this.offset) {
      // 如果此时偏移量比最小偏移量小（可能是窗口 resize 引起），则重置 offset
      this.setOffset(minOffset - moreButtonWH);
    }

    return needsDropdown;
  };

  _proto.render = function render() {
    var _this5 = this;

    var _this$state3 = this.state,
        needsDropdown = _this$state3.needsDropdown,
        lockAnimation = _this$state3.lockAnimation,
        prev = _this$state3.prev,
        next = _this$state3.next;
    var _this$props12 = this.props,
        size = _this$props12.size,
        children = _this$props12.children,
        saveRef = _this$props12.saveRef,
        animated = _this$props12.animated,
        type = _this$props12.type,
        excessMode = _this$props12.excessMode,
        tabPosition = _this$props12.tabPosition,
        navContainerStyle = _this$props12.navContainerStyle;
    var showNextPrev = prev || next;

    var excessTabsHelper = function excessTabsHelper() {
      if (excessMode === 'arrow' || excessMode === 'triangle') {
        return showNextPrev ? _this5.getPrevNext() : undefined;
      } else if (excessMode === 'dropdown') {
        return needsDropdown ? _this5.getDropdown() : undefined;
      }
    };

    var renderCloseAll = function renderCloseAll() {
      var _this5$props = _this5.props,
          onCloseAll = _this5$props.onCloseAll,
          saveRef = _this5$props.saveRef,
          tabPosition = _this5$props.tabPosition;
      var showDivider = needsDropdown || showNextPrev;

      if (tabPosition !== 'left' && typeof onCloseAll === 'function') {
        return /*#__PURE__*/_createElement(CloseAllWrapper, {
          onClick: onCloseAll,
          ref: saveRef('closeAll'),
          "data-testid": "tabs-close-all"
        }, _TabOptionButton || (_TabOptionButton = /*#__PURE__*/_createElement(TabOptionButton, null, /*#__PURE__*/_createElement(CloseBigNormal, null))), showDivider && (_CloseAllDivider || (_CloseAllDivider = /*#__PURE__*/_createElement(CloseAllDivider, null))));
      }
    };

    return /*#__PURE__*/_createElement(NavContainer, {
      className: classnames(size, type, tabPosition && "" + tabPosition, {
        scrolling: excessMode === 'arrow' || excessMode === 'triangle' ? showNextPrev : needsDropdown
      }),
      ref: saveRef('container'),
      style: navContainerStyle
    }, /*#__PURE__*/_createElement(NavWrap, {
      className: classnames(type),
      ref: saveRef('navWrap')
    }, /*#__PURE__*/_createElement(Nav, {
      className: classnames(type, animated && 'animated', tabPosition || 'top'),
      ref: saveRef('nav'),
      style: {
        transition: lockAnimation ? 'none' : undefined
      }
    }, children)), excessTabsHelper(), renderCloseAll());
  };

  return TabBarNode;
}(Component);

TabBarNode.defaultProps = {
  tabBarPosition: 'left',
  prefixCls: '',
  onPrevClick: noop,
  onNextClick: noop
};
export { TabBarNode as default };