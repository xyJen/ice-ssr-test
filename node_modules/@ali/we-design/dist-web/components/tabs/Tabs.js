import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable react/destructuring-assignment */

/* eslint-disable @typescript-eslint/explicit-function-return-type */

/* eslint-disable react/static-property-placement */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { omit, classnames, KEY_CODES } from "../../utils";
import { getDataAttr, noop } from "./utils";
import { TabsWrap } from "./styled";
import TabBar from "./TabBar";
import TabContent from "./TabContent";

function getDefaultActiveKey(props) {
  var activeKey;
  React.Children.forEach(props.children, function (child) {
    if (child && !activeKey && !child.props.disabled) {
      activeKey = child.key;
    }
  });
  return activeKey;
}

function activeKeyIsValid(props, key) {
  var keys = React.Children.map(props.children, function (child) {
    return child && child.key;
  });
  return keys.indexOf(key) >= 0;
}

export var Tabs = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Tabs, _React$Component);

  function Tabs(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.onTabClick = function (activeKey, e) {
      var onTabClick = _this.props.onTabClick;

      if (onTabClick) {
        onTabClick(activeKey, e);
      }

      _this.setActiveKey(activeKey);
    };

    _this.onNavKeyDown = function (e) {
      var keyboard = _this.props.keyboard;

      if (!keyboard) {
        return;
      }

      var eventKeyCode = e.keyCode;

      if (eventKeyCode === KEY_CODES.RIGHT) {
        e.preventDefault();

        var _nextKey = _this.getNextActiveKey(true);

        _this.onTabClick(_nextKey);
      } else if (eventKeyCode === KEY_CODES.LEFT) {
        e.preventDefault();

        var previousKey = _this.getNextActiveKey(false);

        _this.onTabClick(previousKey);
      }
    };

    _this.onScroll = function (_ref) {
      var target = _ref.target,
          currentTarget = _ref.currentTarget;

      if (target === currentTarget && target.scrollLeft > 0) {
        target.scrollLeft = 0;
      }
    };

    _this.setActiveKey = function (nextActiveKey) {
      var _this$props = _this.props,
          activeKey = _this$props.activeKey,
          onChange = _this$props.onChange;

      if (activeKey !== nextActiveKey) {
        if (!activeKey) {
          _this.setState({
            activeKey: nextActiveKey
          });
        }

        if (onChange) {
          onChange(nextActiveKey);
        }
      }
    };

    _this.getNextActiveKey = function (next) {
      var activeKey = _this.state.activeKey;
      var children = [];
      React.Children.forEach(_this.props.children, function (c) {
        if (c && !c.props.disabled) {
          if (next) {
            children.push(c);
          } else {
            children.unshift(c);
          }
        }
      });
      var length = children.length;
      var ret = length && children[0].key;
      children.forEach(function (child, i) {
        if (child.key === activeKey) {
          if (i === length - 1) {
            ret = children[0].key;
          } else {
            ret = children[i + 1].key;
          }
        }
      });
      return ret;
    };

    var _activeKey;

    if (props.activeKey) {
      _activeKey = props.activeKey;
    } else if (props.defaultActiveKey) {
      _activeKey = props.defaultActiveKey;
    } else {
      _activeKey = getDefaultActiveKey(props);
    }

    _this.state = {
      activeKey: _activeKey
    };
    return _this;
  }

  Tabs.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    var newState = {};

    if (props.activeKey) {
      newState.activeKey = props.activeKey;
    } else if (!activeKeyIsValid(props, state.activeKey)) {
      newState.activeKey = getDefaultActiveKey(props);
    }

    if (Object.keys(newState).length > 0) {
      return newState;
    }

    return null;
  };

  var _proto = Tabs.prototype;

  _proto.render = function render() {
    var props = this.props,
        state = this.state;

    var className = props.className,
        children = props.children,
        animated = props.animated,
        hasTabBar = props.hasTabBar,
        restProps = _objectWithoutPropertiesLoose(props, ["className", "children", "animated", "hasTabBar"]);

    return /*#__PURE__*/_createElement(TabsWrap, _extends({
      className: classnames(className, {
        animated: animated
      }),
      style: props.style
    }, getDataAttr(restProps), {
      onScroll: this.onScroll
    }), hasTabBar && /*#__PURE__*/_createElement(TabBar, _extends({}, omit(props, ['className']), {
      panes: children,
      activeKey: state.activeKey,
      onTabClick: this.onTabClick,
      onKeyDown: this.onNavKeyDown,
      testid: props.testid
    })), /*#__PURE__*/_createElement(TabContent, _extends({}, omit(props, ['className']), {
      activeKey: state.activeKey
    }), children));
  };

  return Tabs;
}(React.Component);
Tabs.defaultProps = {
  onChange: noop,
  keyboard: true,
  children: null,
  style: {},
  size: 'default',
  type: 'line',
  animated: true,
  destroyInactiveTabPane: false,
  hasTabBar: true,
  excessMode: 'arrow'
};