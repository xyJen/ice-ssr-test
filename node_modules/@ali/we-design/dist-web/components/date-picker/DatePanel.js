/* eslint-disable react/no-array-index-key */
import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import dayjs from 'dayjs';
import localeData from 'dayjs/plugin/localeData';
import useControlledValue from "../../hooks/useControlledValue";
import { useTranslate, useDayjsLocale } from '@ali/we-util';
import { classnames } from "../../utils";
import useComponentDidUpdate from "../../hooks/useComponentDidUpdate";
import { Control } from "./Control";
import { DatePanelWrap, DatePanelBody, ControlWrap, PanelControlWrap, CanlendarWeekday, CanlendarTable, CanlendarDate } from "./styled";
dayjs.extend(localeData);

// eslint-disable-next-line max-lines-per-function
var DatePanel = function DatePanel(props) {
  var onChange = props.onChange,
      controls = props.controls,
      locale = props.locale,
      onClickControl = props.onClickControl,
      onChangeTemporaryValue = props.onChangeTemporaryValue,
      style = props.style,
      disabledDate = props.disabledDate,
      testid = props.testid; // 国际化

  var t = useTranslate(locale);
  var dayjsLocale = useDayjsLocale(locale); // 拿到语言包短月份数组

  var weekdays = useMemo(function () {
    return dayjs().locale(dayjsLocale).localeData().weekdaysMin();
  }, [dayjsLocale]);

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var _useControlledValue2 = useControlledValue(props.temporaryValue, value || dayjs()),
      temporaryValue = _useControlledValue2[0],
      setTemporaryValue = _useControlledValue2[1]; // value 变化时，应该 reset temporary value


  useComponentDidUpdate(function () {
    setTemporaryValue(props.value || dayjs());
  }, [props.value]); // 计算要显示的天，遵循 temporaryValue 的值
  // 月份不同，可能所占的行数不一致，为了不抖动，统一取42天

  var daysArray = useMemo(function () {
    var results = [];
    var firstDate = temporaryValue.date(1);
    var lastDate = temporaryValue.add(1, 'month').date(0); // 获取 1 号是星期几，前面要补全整个星期

    var firstDateDay = firstDate.day();

    for (var _i = 0; _i < firstDateDay; _i += 1) {
      results.unshift(firstDate.subtract(_i + 1, 'day'));
    } // 本月


    var thisMonthLastDate = lastDate.date();

    for (var _i2 = 0; _i2 < thisMonthLastDate; _i2 += 1) {
      results.push(firstDate.add(_i2, 'day'));
    } // 最后补全 42 个数字


    var i = 1;

    while (results.length < 42) {
      results.push(lastDate.add(i, 'day'));
      i += 1;
    } // 7 个为一组


    var newResults = [];
    var group = [];
    results.forEach(function (item) {
      group.push(item);

      if (group.length === 7) {
        newResults.push(group);
        group = [];
      }
    });
    return newResults;
  }, [temporaryValue]);
  /**
   * 修改 dayjs 值
   *
   * @param {Dayjs} e
   * @return {void}
   */

  var handleChangeDate = function handleChangeDate(e) {
    if (onChange) {
      onChange(e);
    }

    setTemporaryValue(e);
    setValue(e);
  }; // 控制条显示文案国际化


  var controlText = useMemo(function () {
    return temporaryValue.format(t('we_ui_date_year_month_format'));
  }, [temporaryValue, t]);
  /**
   * 控制条点击左右箭头增减时间处理函数
   * 1）+1 月
   * 2）-1 月
   * 3）+1 年
   * 4）-1 年
   *
   * @return {void}
   */

  var temporaryValueChangeHandlers = useMemo(function () {
    var commonHandler = function commonHandler(fnName, dt, unit) {
      var newTemporaryValue = temporaryValue[fnName](dt, unit);

      if (onChangeTemporaryValue) {
        onChangeTemporaryValue(newTemporaryValue);
      }

      setTemporaryValue(newTemporaryValue);
    };

    return {
      addMonth: function addMonth() {
        return commonHandler('add', 1, 'month');
      },
      subtractMonth: function subtractMonth() {
        return commonHandler('subtract', 1, 'month');
      },
      addYear: function addYear() {
        return commonHandler('add', 1, 'year');
      },
      subtractYear: function subtractYear() {
        return commonHandler('subtract', 1, 'year');
      }
    };
  }, [temporaryValue, onChangeTemporaryValue, setTemporaryValue]);
  return /*#__PURE__*/_createElement(DatePanelWrap, {
    style: style
  }, /*#__PURE__*/_createElement(ControlWrap, null, /*#__PURE__*/_createElement(Control, {
    hasNext: (controls == null ? void 0 : controls.indexOf('next')) !== -1,
    hasPrev: (controls == null ? void 0 : controls.indexOf('prev')) !== -1,
    hasSuperNext: (controls == null ? void 0 : controls.indexOf('superNext')) !== -1,
    hasSuperPrev: (controls == null ? void 0 : controls.indexOf('superPrev')) !== -1,
    onClickNext: temporaryValueChangeHandlers.addMonth,
    onClickPrev: temporaryValueChangeHandlers.subtractMonth,
    onClickSuperNext: temporaryValueChangeHandlers.addYear,
    onClickSuperPrev: temporaryValueChangeHandlers.subtractYear,
    testid: testid ? "DatePanel-" + testid : undefined
  }, /*#__PURE__*/_createElement(PanelControlWrap, {
    className: classnames({
      clickable: !!onClickControl
    }),
    onClick: onClickControl
  }, controlText))), /*#__PURE__*/_createElement(DatePanelBody, null, /*#__PURE__*/_createElement(CanlendarTable, null, /*#__PURE__*/_createElement("thead", null, /*#__PURE__*/_createElement("tr", null, weekdays.map(function (weekday) {
    return /*#__PURE__*/_createElement("th", {
      key: weekday
    }, /*#__PURE__*/_createElement(CanlendarWeekday, null, weekday));
  }))), /*#__PURE__*/_createElement("tbody", null, daysArray.map(function (days, index) {
    return /*#__PURE__*/_createElement("tr", {
      key: index
    }, days.map(function (item) {
      var isDisabled = typeof disabledDate === 'function' ? disabledDate(item, 'date') : false;
      return /*#__PURE__*/_createElement("td", {
        key: item.format('YYYY-MM-DD')
      }, /*#__PURE__*/_createElement(CanlendarDate, {
        onClick: function onClick() {
          !isDisabled && handleChangeDate(item);
        },
        className: classnames({
          notCurrentMonth: !item.isSame(temporaryValue, 'month'),
          isToday: item.isSame(dayjs(), 'date'),
          selected: value && item.isSame(value, 'date'),
          isDisabled: isDisabled
        })
      }, item.format('DD')));
    }));
  })))));
};

DatePanel.defaultProps = {
  controls: ['superPrev', 'superNext', 'next', 'prev']
};
var DatePanelMemo = /*#__PURE__*/React.memo(DatePanel);
export { DatePanelMemo as DatePanel };