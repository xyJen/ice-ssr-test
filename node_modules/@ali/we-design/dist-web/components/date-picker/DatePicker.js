var _CalendarNormal;

import React, { useCallback, useState, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import dayjs from 'dayjs';
import { Dropdown } from "../../components/dropdown";
import { Button } from "../../components/button";
import { CalendarNormal, RoundcloseThickNormal } from "../../components/icons";
import { Input } from "../../components/input";
import { useTranslate } from '@ali/we-util';
import useControlledValue from "../../hooks/useControlledValue";
import { classnames } from "../../utils";
import useComponentDidUpdate from "../../hooks/useComponentDidUpdate";
import { TimePanel } from "../../components/time-picker";
import { DatePickerTrigger, DatePickerTriggerWrap, DatePickerOverlay, DatePickerOverlayInputs, DatePickerOverlayPanel, DatePickerOverlayFooter, DatePickerOverlayExtraFooter, DatePickerOverlayToday, TodayBtn } from "./styled";
import { DatePanel } from "./DatePanel";
import { MonthPanel } from "./MonthPanel";
import { YearPanel } from "./YearPanel";
import { checkDate, checkTime } from "./utils";
// eslint-disable-next-line max-lines-per-function
var DatePicker = /*#__PURE__*/React.memo(function (props) {
  var locale = props.locale,
      format = props.format,
      showTime = props.showTime,
      style = props.style,
      onChange = props.onChange,
      onVisibleChange = props.onVisibleChange,
      onOk = props.onOk,
      disabled = props.disabled,
      renderTrigger = props.renderTrigger,
      disabledDate = props.disabledDate,
      zIndex = props.zIndex,
      allowClear = props.allowClear,
      overlayStyle = props.overlayStyle,
      overlayClassName = props.overlayClassName,
      title = props.title,
      hideInput = props.hideInput,
      renderExtraFooter = props.renderExtraFooter,
      disableCloseAfterSelect = props.disableCloseAfterSelect,
      getContainer = props.getContainer,
      testid = props.testid,
      placement = props.placement,
      showToday = props.showToday,
      disableDomAlign = props.disableDomAlign,
      onClickToday = props.onClickToday; // 国际化函数

  var t = useTranslate(locale); // 时间值，受控

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1]; // 面板显示与否，受控


  var _useControlledValue2 = useControlledValue(props.visible, props.defaultVisible),
      visible = _useControlledValue2[0],
      setVisible = _useControlledValue2[1]; // 当前显示的面板


  var _useControlledValue3 = useControlledValue(props.panel, props.defaultPanel),
      panel = _useControlledValue3[0],
      setPanel = _useControlledValue3[1]; // 临时值


  var _useState = useState(value || dayjs()),
      temporaryValue = _useState[0],
      setTemporaryValue = _useState[1]; // 年份面板起始年份，暂时的状态，应该在面板关闭的时候就还原


  var _useState2 = useState(temporaryValue.year() - 4),
      yearPanelStartYear = _useState2[0],
      setYearPanelStartYear = _useState2[1]; // 月份的临时年份


  var _useState3 = useState(temporaryValue.year()),
      monthPanelYear = _useState3[0],
      setMonthPanelYear = _useState3[1]; // 提示的国际化


  var placeholder = props.placeholder || (showTime ? t('we_ui_datepicker_datetime_placeholder') : t('we_ui_datepicker_date_placeholder')); // 格式化拼装

  var dateFormat = format || 'YYYY-MM-DD';
  var timeFormat = '';

  if (typeof showTime === 'object' && showTime.format) {
    timeFormat = showTime.format;
  } else {
    timeFormat = showTime ? 'HH:mm:ss' : '';
  }

  var finalFormat = [dateFormat, timeFormat].filter(function (f) {
    return f;
  }).join(' '); // 日期输入框的值

  var _useState4 = useState(value ? value.format(dateFormat) : ''),
      dateInputValue = _useState4[0],
      setDateInputValue = _useState4[1];

  var _useState5 = useState(value ? value.format(timeFormat) : ''),
      timeInputValue = _useState5[0],
      setTimeInputValue = _useState5[1]; // temporay 受控于value


  useComponentDidUpdate(function () {
    if (typeof value !== 'undefined') {
      setTemporaryValue(value || dayjs());
    }
  }, [value]);
  /**
   * overlay可见修改
   *
   * @param {boolean} e
   * @return {void}
   */

  var handleVisibleChange = useCallback(function (e) {
    if (!disabled) {
      if (onVisibleChange) {
        onVisibleChange(e);
      }

      setVisible(e);
    }
  }, [onVisibleChange, disabled, setVisible]);
  var handleConfirm = useCallback(function () {
    if (onOk) {
      onOk(value);
    }

    handleVisibleChange(false);
  }, [handleVisibleChange, onOk, value]);
  var handleChange = useCallback(function (e) {
    var changed = !e || !value || !value.isSame(e);

    if (changed) {
      if (onChange) {
        onChange(e);
      }

      setValue(e);
    }
  }, [value, onChange, setValue]);
  var handleChangeTimeValue = useCallback(function (e) {
    handleChange(e);
    setTimeInputValue(e.format(timeFormat));
  }, [handleChange, timeFormat]);
  var handleChangeDateValue = useCallback(function (e) {
    if (!showTime && !disableCloseAfterSelect) {
      handleVisibleChange(false);
    }

    handleChange(e);
    setDateInputValue(e.format(dateFormat));
    setTimeInputValue(e.format(timeFormat));
  }, [handleVisibleChange, showTime, handleChange, disableCloseAfterSelect, dateFormat, timeFormat]);
  /**
   * 切换时间和日期面板
   *
   * @return {void}
   */

  var handleToggleTimeDatePanel = useCallback(function () {
    if (value) {
      if (panel === 'time') {
        setPanel('date');
      } else {
        setPanel('time');
      }
    }
  }, [panel, value, setPanel]);
  /**
   * 日期输入框输入
   *
   * @param {React.ChangeEvent<HTMLInputElement>}
   * @return {void}
   */

  var handleChangeDateInput = useCallback(function (e) {
    var dateString = e.target.value;
    setDateInputValue(dateString);
    var inputDate = dayjs(dateString, dateFormat);
    var isValid = inputDate.isValid();

    if (isValid && checkDate(dateString)) {
      if (value) {
        inputDate = inputDate.hour(value.hour()).minute(value.minute()).second(value.second());
      }

      handleChange(inputDate);
    }
  }, [dateFormat, value, handleChange]);
  /**
   * 日期输入框失焦
   *
   * @param {React.FocusEvent<HTMLInputElement>}
   * @return {void}
   */

  var handleDateInputBlur = useCallback(function (e) {
    var v = e.target.value.trim();
    var inputDate = dayjs(v, dateFormat);
    var isValid = inputDate.isValid();

    if (!isValid) {
      setDateInputValue(value ? value.format(dateFormat) : '');
    } else {
      if (value) {
        inputDate = inputDate.hour(value.hour()).minute(value.minute()).second(value.second());
      }

      setDateInputValue(inputDate.format(dateFormat));
      handleChange(inputDate);
    }
  }, [dateFormat, value, handleChange]);
  /**
   * 日期输入框聚焦
   *
   * @param {React.FocusEvent<HTMLInputElement>}
   * @return {void}
   */

  var handleDateInputFocus = useCallback(function () {
    if (panel === 'time') {
      setPanel('date');
    }
  }, [panel, setPanel]);
  /**
   * 日期输入框输入
   *
   * @param {React.ChangeEvent<HTMLInputElement>}
   * @return {void}
   */

  var handleChangeTimeInput = useCallback(function (e) {
    var timeString = e.target.value;
    setTimeInputValue(timeString);
    var timeDate = dayjs("1992-10-22 " + timeString, timeFormat);
    var isValid = timeDate.isValid();

    if (isValid && checkTime(timeString)) {
      if (value) {
        timeDate = timeDate.year(value.year()).month(value.month()).date(value.date());
      }

      handleChange(timeDate);
    }
  }, [handleChange, timeFormat, value]);
  /**
   * 日期输入框失焦
   *
   * @param {React.FocusEvent<HTMLInputElement>}
   * @return {void}
   */

  var handleTimeInputBlur = useCallback(function (e) {
    var v = e.target.value.trim(); // 时间format需要加个虚拟的日期进去

    var timeDate = dayjs("1992-10-22 " + v, timeFormat);
    var isValid = timeDate.isValid();

    if (!isValid) {
      setTimeInputValue(value ? value.format(timeFormat) : '');
    } else {
      if (value) {
        timeDate = timeDate.year(value.year()).month(value.month()).date(value.date());
      }

      setTimeInputValue(timeDate.format(timeFormat));
      handleChange(timeDate);
    }
  }, [timeFormat, value, handleChange]);
  /**
   * 日期输入框聚焦
   *
   * @param {React.FocusEvent<HTMLInputElement>}
   * @return {void}
   */

  var handleTimeInputFocus = useCallback(function () {
    if (panel !== 'time') {
      setPanel('time');
    }
  }, [panel, setPanel]);
  /**
   * 点击控制条进行面板切换
   *
   * @param {React.MouseEvent} e
   * @return {void}
   */

  var handleClickControl = useCallback(function (e) {
    e.stopPropagation();

    if (panel === 'date') {
      setMonthPanelYear(temporaryValue.year());
      setPanel('month');
    } else if (panel === 'month') {
      setYearPanelStartYear(monthPanelYear - 4);
      setPanel('year');
    } else if (panel === 'year') {
      setPanel('month');
    }
  }, [panel, temporaryValue, monthPanelYear, setPanel]);
  /**
   * 阻止冒泡，Dropdown自动关闭阻止
   *
   * @param {React.MouseEvent<HTMLElement>}
   * @return {void}
   */

  var handleClickOverlay = useCallback(function (e) {
    return e.stopPropagation();
  }, []);
  /**
   * 年份修改，这个修改是暂时性的值
   *
   * @param {Dayjs} newTemporayValue
   * @return {void}
   */

  var handleChangeTemporaryYear = useCallback(function (newValue) {
    setTemporaryValue(newValue); // 切换到月份面板

    setPanel('month'); // 需要将月份面板的年份重置掉

    setMonthPanelYear(newValue.year());
  }, [setPanel]);
  /**
   * 月份修改，这个修改是暂时性的值
   *
   * @param {Dayjs} newTemporayValue
   * @return {void}
   */

  var handleChangeTemporaryMonth = useCallback(function (newValue) {
    setTemporaryValue(newValue); // 切换回日期面板

    setPanel('date');
  }, [setPanel]);
  /**
   * 清除
   */

  var handleClear = useCallback(function (e) {
    e.stopPropagation();
    handleChange(null);
  }, [handleChange]);
  /**
   * 点击今天按钮
   */

  var handleTodayBtn = useCallback(function () {
    var v = dayjs();
    onClickToday == null ? void 0 : onClickToday(v);
    handleChangeDateValue(v);
  }, [handleChangeDateValue]); // 三个面板切换的隐藏样式

  var datePanelStyle = useMemo(function () {
    return {
      display: panel === 'date' ? 'block' : 'none'
    };
  }, [panel]);
  var monthPanelStyle = useMemo(function () {
    return {
      display: panel === 'month' ? 'block' : 'none'
    };
  }, [panel]);
  var yearPanelStyle = useMemo(function () {
    return {
      display: panel === 'year' ? 'block' : 'none'
    };
  }, [panel]);
  return /*#__PURE__*/_createElement(Dropdown, {
    trigger: "click",
    visible: visible,
    zIndex: zIndex,
    overlayStyle: overlayStyle,
    overlayClassName: overlayClassName,
    title: title,
    getContainer: getContainer,
    placement: placement,
    overlay: /*#__PURE__*/_createElement(DatePickerOverlay, {
      onClick: handleClickOverlay,
      onMouseDown: handleClickOverlay
    }, !hideInput && /*#__PURE__*/_createElement(DatePickerOverlayInputs, null, /*#__PURE__*/_createElement(Input, {
      value: dateInputValue,
      placeholder: dateFormat,
      className: "datetime-input",
      onChange: handleChangeDateInput,
      onBlur: handleDateInputBlur,
      onFocus: handleDateInputFocus,
      testid: testid ? testid + "_date" : undefined
    }), !!showTime && /*#__PURE__*/_createElement(Input, {
      value: timeInputValue,
      placeholder: timeFormat,
      className: "datetime-input",
      disabled: !value,
      onChange: handleChangeTimeInput,
      onBlur: handleTimeInputBlur,
      onFocus: handleTimeInputFocus,
      testid: testid ? testid + "_time" : undefined
    })), /*#__PURE__*/_createElement(DatePickerOverlayPanel, null, /*#__PURE__*/_createElement(DatePanel, {
      style: datePanelStyle,
      onClickControl: handleClickControl,
      temporaryValue: temporaryValue,
      onChangeTemporaryValue: setTemporaryValue,
      value: value,
      onChange: handleChangeDateValue,
      locale: locale,
      disabledDate: disabledDate,
      testid: testid
    }), /*#__PURE__*/_createElement(MonthPanel, {
      year: monthPanelYear,
      style: monthPanelStyle,
      onClickControl: handleClickControl,
      value: temporaryValue,
      onChangeYear: setMonthPanelYear,
      onChange: handleChangeTemporaryMonth,
      locale: locale,
      disabledDate: disabledDate,
      testid: testid
    }), /*#__PURE__*/_createElement(YearPanel, {
      startYear: yearPanelStartYear,
      style: yearPanelStyle,
      onChangeStartYear: setYearPanelStartYear,
      value: temporaryValue,
      onChange: handleChangeTemporaryYear,
      onClickControl: handleClickControl,
      disabledDate: disabledDate,
      testid: testid
    }), !!showTime && /*#__PURE__*/_createElement(TimePanel, {
      visible: panel === 'time',
      value: temporaryValue,
      format: timeFormat,
      onChange: handleChangeTimeValue,
      testid: testid
    })), !!showToday && /*#__PURE__*/_createElement(DatePickerOverlayToday, null, /*#__PURE__*/_createElement(TodayBtn, {
      onClick: handleTodayBtn
    }, t('we_ui_today'))), typeof renderExtraFooter === 'function' && /*#__PURE__*/_createElement(DatePickerOverlayExtraFooter, null, renderExtraFooter()), !!showTime && /*#__PURE__*/_createElement(DatePickerOverlayFooter, null, /*#__PURE__*/_createElement("span", {
      className: classnames('time-button', {
        disabled: !value
      }),
      onClick: handleToggleTimeDatePanel,
      "data-testid": testid ? "time-button-" + testid : undefined
    }, panel === 'time' ? t('we_ui_select_date') : t('we_ui_select_time')), /*#__PURE__*/_createElement(Button, {
      shape: "round",
      disabled: !value,
      type: "primary",
      onClick: handleConfirm,
      testid: testid
    }, t('we_ui_ok_text')))),
    onVisibleChange: handleVisibleChange,
    disableDomAlign: disableDomAlign
  }, typeof renderTrigger === 'function' ? renderTrigger(value) : /*#__PURE__*/_createElement(DatePickerTrigger, {
    className: classnames({
      placeholder: !value,
      disabled: disabled,
      allowClear: !disabled && allowClear && !visible
    }),
    style: style
  }, /*#__PURE__*/_createElement(DatePickerTriggerWrap, null, /*#__PURE__*/_createElement("span", {
    className: "text"
  }, value ? value.format(finalFormat) : placeholder), _CalendarNormal || (_CalendarNormal = /*#__PURE__*/_createElement(CalendarNormal, {
    className: "calendar-icon"
  })), !disabled && allowClear && !visible && /*#__PURE__*/_createElement(RoundcloseThickNormal, {
    className: "clear-icon",
    onClick: handleClear,
    testid: testid
  }))));
});
DatePicker.defaultProps = {
  defaultVisible: false,
  format: 'YYYY-MM-DD',
  showTime: false,
  disabled: false,
  defaultPanel: 'date'
};
export { DatePicker };