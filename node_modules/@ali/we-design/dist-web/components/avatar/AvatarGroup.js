import _extends from "@babel/runtime/helpers/extends";

var _i, _i2, _i3;

/* eslint-disable max-lines-per-function */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useTranslate } from '@ali/we-util';
import classnames from 'classnames';
import { Dropdown } from "../../components/dropdown";
import warning from 'warning';
import { AvatarGroupWrap, GroupAvatarItem, GroupAvatarList, GroupMoreItem, GroupMoreItemSpan, OverlayWrap, CountWrap, OverlayAvatarItem, OverlayAvatarWrap, OverlayAvatarName, ListWrap, Dot } from "./styled";
// 固化头像组中颜色角标的选用和顺序
var COLOR_SCHEME = ['#0984FF', '#12C764', '#BF5AF2', '#FF9F0C', '#3BBEFA', '#FFCC01', '#99CAFF', '#FFD399'];
var COLOR_SCHEME_LEN = COLOR_SCHEME.length;
var AvatarGroup = /*#__PURE__*/React.memo(function (props) {
  var children = props.children,
      max = props.max,
      className = props.className,
      style = props.style,
      direction = props.direction,
      zIndex = props.zIndex,
      _onClick = props.onClick,
      size = props.size,
      overlayStyle = props.overlayStyle,
      overlayMaxHeight = props.overlayMaxHeight,
      _props$isCustomChildr = props.isCustomChildren,
      isCustomChildren = _props$isCustomChildr === void 0 ? false : _props$isCustomChildr,
      maxDropdownNode = props.maxDropdownNode,
      overlayTitle = props.overlayTitle;

  var _React$useState = React.useState(false),
      isMoreBoxVisible = _React$useState[0],
      setMoreBoxVisible = _React$useState[1]; // 国际化文案


  var t = useTranslate(''); // 数量

  var avatarCount = React.Children.count(children);
  var isOverflowing = avatarCount > max;

  if (!isCustomChildren) {
    React.Children.forEach(children, function (child) {
      warning( /*#__PURE__*/React.isValidElement(child) && child.type.displayName === 'Avatar', 'AvatarGroup 的子组件应该为 Avatar 组件.');
    });
  }

  var avatarWidth = isOverflowing ? 100 / (max + 1) + "%" : 100 / avatarCount + "%";
  var avatarStyle = React.useMemo(function () {
    return {
      width: avatarWidth,
      maxWidth: 28
    };
  }, [avatarWidth]);
  var title = overlayTitle || t('we_ui_total_people', {
    value: avatarCount
  });
  return /*#__PURE__*/_createElement(AvatarGroupWrap, {
    style: _extends({}, style),
    className: className,
    direction: direction
  }, /*#__PURE__*/_createElement(GroupAvatarList, {
    direction: direction
  }, React.Children.toArray(children).slice(0, max).map(function (child, idx) {
    return /*#__PURE__*/_createElement(GroupAvatarItem, {
      className: "avatar-item",
      key: "" + child.props.name + idx,
      style: avatarStyle
    }, /*#__PURE__*/React.cloneElement(child, {
      color: child.props.color || COLOR_SCHEME[idx % COLOR_SCHEME_LEN],
      onClick: child.props.onClick || function () {
        return _onClick == null ? void 0 : _onClick(idx);
      },
      size: size
    }));
  }), isOverflowing && /*#__PURE__*/_createElement(GroupAvatarItem, {
    className: "more",
    style: {
      width: avatarWidth,
      maxWidth: 28
    }
  }, /*#__PURE__*/_createElement(Dropdown, {
    title: title,
    overlayStyle: overlayStyle,
    onVisibleChange: setMoreBoxVisible,
    overlay: maxDropdownNode || /*#__PURE__*/_createElement(OverlayWrap, null, /*#__PURE__*/_createElement(CountWrap, null, title), /*#__PURE__*/_createElement(ListWrap, {
      style: {
        maxHeight: overlayMaxHeight
      }
    }, React.Children.toArray(children).map(function (child, idx) {
      var _child$props = child.props,
          name = _child$props.name,
          color = _child$props.color,
          className = _child$props.className;
      var avatarColor = color || COLOR_SCHEME[idx % COLOR_SCHEME_LEN];
      return /*#__PURE__*/_createElement(OverlayAvatarItem, {
        key: "" + name + idx,
        onClick: function onClick() {
          return _onClick == null ? void 0 : _onClick(idx);
        }
      }, /*#__PURE__*/_createElement(OverlayAvatarWrap, null, /*#__PURE__*/React.cloneElement(child, {
        title: '',
        color: avatarColor,
        shape: 'rect',
        size: 'normal',
        active: false,
        className: (className ? className : '') + " avatar-in-list"
      })), /*#__PURE__*/_createElement(OverlayAvatarName, null, name || ''), /*#__PURE__*/_createElement(Dot, {
        color: avatarColor
      }));
    }))),
    zIndex: zIndex
  }, /*#__PURE__*/_createElement(GroupMoreItem, {
    className: classnames('more-item-span', {
      'more-box-active': isMoreBoxVisible
    }),
    size: size
  }, Number(avatarCount) < 999 ? /*#__PURE__*/_createElement(GroupMoreItemSpan, null, "" + avatarCount) : /*#__PURE__*/_createElement(React.Fragment, null, _i || (_i = /*#__PURE__*/_createElement("i", null)), " ", _i2 || (_i2 = /*#__PURE__*/_createElement("i", null)), " ", _i3 || (_i3 = /*#__PURE__*/_createElement("i", null))))))));
});
AvatarGroup.defaultProps = {
  max: 8,
  direction: 'ltr'
};
export { AvatarGroup };