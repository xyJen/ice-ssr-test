import React, { useState, useCallback, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
export var baseAvatarStyle = "\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n";
var TextAvatar = /*#__PURE__*/styled.div(["", " color:#fff;background-color:rgb(0,137,255);"], baseAvatarStyle);
var Avatar = /*#__PURE__*/styled.span(["", " img{width:100%;height:100%;vertical-align:unset;}"], baseAvatarStyle);

function getLastNickName(nick, num) {
  if (num === void 0) {
    num = 2;
  }

  if (!nick) return '';
  var broken = Array.from(nick);
  return broken.slice(broken.length - num).join('');
}

export default function SingleAvatar(props) {
  var imgRef = useRef(null);

  var _useState = useState(false),
      failed = _useState[0],
      setFailed = _useState[1];

  var url = props.url,
      fallbackUrl = props.fallbackUrl,
      className = props.className,
      nick = props.nick,
      style = props.style,
      _props$fallbackTo = props.fallbackTo,
      fallbackTo = _props$fallbackTo === void 0 ? 'text' : _props$fallbackTo;
  var nickName = getLastNickName(nick, 1);
  var handleError = useCallback(function () {
    if (fallbackUrl && imgRef.current && imgRef.current.src !== fallbackUrl) {
      // 1. fallback to fallback src
      imgRef.current.src = fallbackUrl;
    } else {
      // 2. fallback to TextAvatar
      setFailed(true);
    }
  }, [fallbackUrl]);

  if (!url || failed && fallbackTo === 'text') {
    return /*#__PURE__*/_createElement(Avatar, {
      style: style,
      className: className
    }, /*#__PURE__*/_createElement(TextAvatar, null, nickName));
  }

  return failed ? null : /*#__PURE__*/_createElement(Avatar, {
    style: style,
    className: className
  }, /*#__PURE__*/_createElement("img", {
    ref: imgRef,
    src: url,
    onError: handleError
  }));
}