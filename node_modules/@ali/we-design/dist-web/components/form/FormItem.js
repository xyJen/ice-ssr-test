import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled, { css } from 'styled-components';
import { Field } from 'rc-field-form';
import { FormContext } from "./Form";
/**
 * 支持 渲染函数
 */

var Wrapper = /*#__PURE__*/styled.div(["display:flex;margin-bottom:12px;", ""], function (p) {
  return p.isVertical && css(["flex-direction:column;"]);
});
var LabelWrapper = /*#__PURE__*/styled.div(["flex-grow:0;overflow:hidden;white-space:nowrap;> label{height:28px;color:#171a1d;font-size:16px;}", " ", ""], function (p) {
  return p.isVertical ? css(["text-align:left;margin-bottom:8px;"]) : css(["text-align:right;margin-right:8px;"]);
}, function (p) {
  return p.span && css(["flex:0 0 ", "%;"], p.span / 24 * 100);
});
var ControlWrapper = /*#__PURE__*/styled.div(["flex:1;display:flex;flex-direction:column;"]);
var ErrorWrapper = /*#__PURE__*/styled.div(["color:#ff5219;font-size:12px;margin-top:4px;> div{line-height:18px;}"]);

var FormItemMain = function FormItemMain(_ref) {
  var _label;

  var name = _ref.name,
      label = _ref.label,
      rules = _ref.rules,
      _ref$validateTrigger = _ref.validateTrigger,
      validateTrigger = _ref$validateTrigger === void 0 ? 'onChange' : _ref$validateTrigger,
      children = _ref.children,
      labelSpan = _ref.labelSpan,
      style = _ref.style,
      context = _ref.context;
  var isVertical = context.layout === 'vertical';
  return /*#__PURE__*/_createElement(Field, {
    name: name,
    rules: rules,
    validateTrigger: validateTrigger
  }, function (control, meta, form) {
    var childNode = typeof children === 'function' ? children(control, meta, form) : /*#__PURE__*/React.cloneElement(children, _extends({}, name == null ? {} : control, {
      meta: meta
    }));
    return /*#__PURE__*/_createElement(Wrapper, {
      isVertical: isVertical,
      style: style
    }, label != null && /*#__PURE__*/_createElement(LabelWrapper, {
      span: labelSpan || context.labelSpan,
      isVertical: isVertical
    }, _label || (_label = /*#__PURE__*/_createElement("label", {
      htmlFor: name,
      title: name
    }, label))), /*#__PURE__*/_createElement(ControlWrapper, null, childNode, meta.errors.length > 0 && /*#__PURE__*/_createElement(ErrorWrapper, null, meta.errors.map(function (msg, idx) {
      return /*#__PURE__*/_createElement("div", {
        key: idx
      }, msg);
    }))));
  });
};

var FormItem = function FormItem(props) {
  return /*#__PURE__*/_createElement(FormContext.Consumer, null, function (value) {
    return /*#__PURE__*/_createElement(FormItemMain, _extends({}, props, {
      context: value
    }));
  });
};

export default FormItem;