import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

var _LoadingNormal, _TitleIconWrap, _TitleIconWrap2, _TitleIconWrap3, _TitleIconWrap4;

/* eslint-disable no-param-reassign */

/* eslint-disable @typescript-eslint/no-explicit-any */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import { TranslateProvider } from '@ali/we-util';
import { LoadingNormal, ReportFillNormal, CheckboxFillNormal, RoundcloseThickNormal, WarnFillNormal } from "../../components/icons";
import { FooterWrap, ConfirmButton, TitleTextWrap, TitleIconTextWrap, TitleIconWrap } from "./styled";
import { BaseModal } from "./BaseModal"; // eslint-disable-next-line max-lines-per-function

export var Modal = Object.assign(BaseModal, {
  confirm: function confirm(options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        content = _options.content,
        onOk = _options.onOk,
        onCancel = _options.onCancel,
        props = _objectWithoutPropertiesLoose(_options, ["content", "onOk", "onCancel"]);

    var oConfirmContainer;
    oConfirmContainer = document.createElement('div');
    document.body.appendChild(oConfirmContainer);

    var destroy = function destroy() {
      ReactDOM.unmountComponentAtNode(oConfirmContainer);
      document.body.removeChild(oConfirmContainer);
      oConfirmContainer = undefined;
    };

    var handleOk = function handleOk() {
      var returnedValue;

      if (onOk) {
        returnedValue = onOk();
      }

      if (returnedValue && returnedValue instanceof Promise) {
        return returnedValue.then(function () {
          return destroy();
        });
      } else {
        destroy();
      }
    };

    var handleCancel = function handleCancel() {
      if (onCancel) {
        onCancel();
      }

      destroy();
    };

    ReactDOM.render( /*#__PURE__*/_createElement(Modal, _extends({}, props, {
      visible: true,
      title: options.title,
      width: options.width || 420,
      onOk: handleOk,
      onCancel: handleCancel
    }), content || ''), oConfirmContainer);
    return {
      destroy: destroy
    };
  },

  /**
   * 辅助构造不同类型的信息提示模态框（只提供一个按钮用于关闭）
   * 接受不同的 icon 元素作为参数，返回用于构造信息提示模态框的方法
   */
  // eslint-disable-next-line max-lines-per-function
  makeMessageModal: function makeMessageModal(iconNode) {
    return function (options) {
      var _TitleIconTextWrap;

      if (options === void 0) {
        options = {};
      }

      var _options2 = options,
          content = _options2.content,
          onOk = _options2.onOk,
          title = _options2.title,
          okText = _options2.okText,
          okButtonProps = _options2.okButtonProps,
          _options2$showLoading = _options2.showLoadingIcon,
          showLoadingIcon = _options2$showLoading === void 0 ? true : _options2$showLoading,
          props = _objectWithoutPropertiesLoose(_options2, ["content", "onOk", "title", "okText", "okButtonProps", "showLoadingIcon"]);

      var oMesContainer;

      if (!oMesContainer) {
        oMesContainer = document.createElement('div');
        document.body.appendChild(oMesContainer);
      }

      var destroy = function destroy() {
        ReactDOM.unmountComponentAtNode(oMesContainer);
        document.body.removeChild(oMesContainer);
        oMesContainer = undefined;
      };

      var handleOk = function handleOk() {
        var returnedValue;

        if (onOk) {
          returnedValue = onOk();
        }

        if (returnedValue && returnedValue instanceof Promise) {
          if (showLoadingIcon) render({
            visible: true,
            loading: true
          });
          return returnedValue.then(function () {
            return destroy();
          });
        } else {
          destroy();
        }
      };

      var handleCancel = function handleCancel() {
        render({
          visible: false
        });
        destroy();
      };

      function render(_ref) {
        var visible = _ref.visible,
            loading = _ref.loading;

        var titleNode = _TitleIconTextWrap || (_TitleIconTextWrap = /*#__PURE__*/_createElement(TitleIconTextWrap, null, iconNode, /*#__PURE__*/_createElement(TitleTextWrap, null, title)));

        var el = /*#__PURE__*/_createElement(Modal, _extends({}, props, {
          visible: visible,
          title: titleNode,
          width: options.width || 420,
          onCancel: handleCancel,
          bodyStyle: {
            paddingLeft: '34px'
          },
          footer: /*#__PURE__*/_createElement(FooterWrap, null, /*#__PURE__*/_createElement(TranslateProvider, null, function (t) {
            return /*#__PURE__*/_createElement(ConfirmButton, _extends({
              shape: "round",
              type: "primary",
              icon: loading ? _LoadingNormal || (_LoadingNormal = /*#__PURE__*/_createElement(LoadingNormal, {
                spin: true
              })) : undefined,
              onClick: handleOk,
              testid: options.testid ? options.testid + "_ConfirmButton" : undefined
            }, okButtonProps || {}), okText || t('we_ui_ok_text'));
          }))
        }), content || '');

        ReactDOM.render(el, oMesContainer);
      }

      render({
        visible: true,
        loading: false
      });
      return {
        destroy: destroy
      };
    };
  },
  info: function info(options) {
    if (options === void 0) {
      options = {};
    }

    var infoModal = this.makeMessageModal(_TitleIconWrap || (_TitleIconWrap = /*#__PURE__*/_createElement(TitleIconWrap, {
      colorKey: "colorBlue1"
    }, /*#__PURE__*/_createElement(ReportFillNormal, null))));
    return infoModal(options);
  },
  success: function success(options) {
    if (options === void 0) {
      options = {};
    }

    var successModal = this.makeMessageModal(_TitleIconWrap2 || (_TitleIconWrap2 = /*#__PURE__*/_createElement(TitleIconWrap, {
      colorKey: "colorGreen1"
    }, /*#__PURE__*/_createElement(CheckboxFillNormal, null))));
    return successModal(options);
  },
  error: function error(options) {
    if (options === void 0) {
      options = {};
    }

    var errorModal = this.makeMessageModal(_TitleIconWrap3 || (_TitleIconWrap3 = /*#__PURE__*/_createElement(TitleIconWrap, {
      colorKey: "colorRed1"
    }, /*#__PURE__*/_createElement(RoundcloseThickNormal, null))));
    return errorModal(options);
  },
  warning: function warning(options) {
    if (options === void 0) {
      options = {};
    }

    var warningModal = this.makeMessageModal(_TitleIconWrap4 || (_TitleIconWrap4 = /*#__PURE__*/_createElement(TitleIconWrap, {
      colorKey: "colorOrange1"
    }, /*#__PURE__*/_createElement(WarnFillNormal, null))));
    return warningModal(options);
  }
});
Modal.defaultProps = {
  width: 520,
  closable: true,
  keyboard: true
};