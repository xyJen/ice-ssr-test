import _extends from "@babel/runtime/helpers/extends";
import React, { useState, useRef, useMemo, useLayoutEffect, useCallback, useEffect, cloneElement } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { createPortal } from 'react-dom';
import { KEY_CODES } from "../../utils";
import { ModalContent } from "./ModalContent";
import { Mask, Root, Wrap } from "./styled";
export var BaseModal = function BaseModal(props) {
  var visible = props.visible,
      onOk = props.onOk,
      onCancel = props.onCancel,
      confirmLoading = props.confirmLoading,
      maskStyle = props.maskStyle,
      zIndex = props.zIndex,
      testid = props.testid,
      keyboard = props.keyboard,
      _props$maskClosable = props.maskClosable,
      maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable,
      onContentMouseDown = props.onContentMouseDown,
      customizeChildren = props.customizeChildren;
  var handleContentMouseDown = useCallback(function (e) {
    if (onContentMouseDown) {
      onContentMouseDown(e);
    } else {
      e.stopPropagation();
    }
  }, [onContentMouseDown]); // 是否在加载中

  var _useState = useState(false),
      confirming = _useState[0],
      setConfirming = _useState[1];

  var finalConfirming = confirmLoading === undefined ? confirming : confirmLoading; // 记录是否已经显示过

  var mounted = useRef(false);
  mounted.current = mounted.current || !!visible; // 组件是否已被卸载

  var isUnmounted = useRef(false); // 创建container节点

  var oContainer = useMemo(function () {
    if (mounted.current) {
      var oDiv = document.createElement('div');
      oDiv.style.position = 'absolute';
      oDiv.style.left = '0px';
      oDiv.style.top = '0px';
      oDiv.style.width = '100%';
      return oDiv;
    }

    return null; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mounted.current]); // 插入节点到body

  useLayoutEffect(function () {
    if (oContainer) {
      document.body.appendChild(oContainer);
    }

    return function () {
      if (oContainer) {
        document.body.removeChild(oContainer);
      }

      isUnmounted.current = true;
    };
  }, [oContainer]);
  /**
   * 点击遮罩
   *
   * @return {void}
   */

  var handleClose = useCallback(function () {
    if (onCancel) {
      onCancel();
    }
  }, [onCancel]);
  /**
   * 确认点击
   */

  var handleConfirm = useCallback(function () {
    if (onOk) {
      var returnedValue = onOk();

      if (returnedValue && returnedValue instanceof Promise) {
        setConfirming(true);
        returnedValue.then(function () {
          if (!isUnmounted.current) setConfirming(false);
        })["catch"](function (e) {
          // eslint-disable-next-line no-console
          console.error(e);
        });
      }
    }
  }, [onOk, isUnmounted]);
  var maskStyleCombined = useMemo(function () {
    var v = _extends({}, maskStyle || {});

    if (typeof zIndex === 'number') {
      v.zIndex = zIndex;
    }

    return v;
  }, [maskStyle, zIndex]);
  var onClickMask = useCallback(function () {
    if (maskClosable) {
      handleClose();
    }
  }, [maskClosable, handleClose]);
  useEffect(function () {
    var handleKeyDown = function handleKeyDown(event) {
      if (event.which === KEY_CODES.ESC) {
        handleClose();
      }
    };

    if (visible && keyboard) {
      document.addEventListener('keydown', handleKeyDown);
    }

    return function () {
      if (visible && keyboard) {
        document.removeEventListener('keydown', handleKeyDown);
      }
    };
  }, [handleClose, keyboard, visible]);
  var wrapStyle = useMemo(function () {
    return _extends({}, typeof zIndex === 'number' ? {
      zIndex: zIndex
    } : {});
  }, [zIndex]);
  return oContainer ? /*#__PURE__*/createPortal( /*#__PURE__*/_createElement(Root, {
    "data-testid": testid ? "Modal_" + testid : undefined
  }, /*#__PURE__*/_createElement(Mask, {
    visible: visible,
    "data-testid": testid ? "Modal_mask_" + testid : undefined,
    onMouseDown: onClickMask,
    style: maskStyleCombined
  }), /*#__PURE__*/_createElement(Wrap, {
    visible: visible,
    style: wrapStyle
  }, customizeChildren ? /*#__PURE__*/cloneElement(customizeChildren, {
    style: _extends({}, customizeChildren.props.style, {
      pointerEvents: 'auto'
    })
  }) : /*#__PURE__*/_createElement(ModalContent, _extends({}, props, {
    onCancel: handleClose,
    onOk: handleConfirm,
    confirmLoading: finalConfirming,
    onMouseDown: handleContentMouseDown
  })))), oContainer) : null;
};