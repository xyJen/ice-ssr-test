var _MinusNormal, _PlusNormal;

import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { MinusNormal, PlusNormal } from "../../components/icons";
import { useTranslate } from '@ali/we-util';
import useControlledValue from "../../hooks/useControlledValue";
import { Tooltip } from "../tooltip";
import { Select, SelectOption, SelectOptionGroup } from "../select";
import { KEY_CODES } from "../../utils/consts";
import { classnames } from "../../utils";
import { RatioSelectWrap, RatioSelectInner, Button, SelectWrap, TriggerSpanWrap } from "./styled";
var RATIOS = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2];
var triggerStyle = {
  width: 36,
  textAlign: 'center',
  fontSize: 12
}; // eslint-disable-next-line max-lines-per-function

export var RatioSelect = /*#__PURE__*/React.memo(function (props) {
  var locale = props.locale,
      onVisibleChange = props.onVisibleChange,
      onChange = props.onChange,
      step = props.step,
      zIndex = props.zIndex,
      placement = props.placement,
      disabled = props.disabled; // 国际化文案

  var t = useTranslate(locale);
  var placeholderTitle = t('we_ui_ratio_select_placeholder');
  var zoomInTitle = t('we_ui_ratio_select_zoom_in');
  var zoomOutTitle = t('we_ui_ratio_select_zoom_out');
  var addText = t('we_ui_add_text');
  var reduceText = t('we_ui_reduce_text'); // visible 受控

  var _useControlledValue = useControlledValue(props.visible, props.defaultVisible),
      visible = _useControlledValue[0],
      setVisible = _useControlledValue[1]; // value 受控


  var _useControlledValue2 = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue2[0],
      setValue = _useControlledValue2[1];
  /**
   * 可见性变化
   */


  var handleVisibleChange = useCallback(function (e) {
    if (onVisibleChange) {
      onVisibleChange(e);
    }

    setVisible(e);
  }, [setVisible, onVisibleChange]);
  /**
   * 值发生变化
   */

  var handleValueChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [onChange, setValue]);
  /**
   * 减少比例
   */

  var handleReduce = useCallback(function () {
    if (disabled) return; // 浮点数精度问题消除

    var newValue = Math.round(value * 100) - Math.round(step * 100);

    if (newValue >= RATIOS[0] * 100) {
      handleValueChange(newValue / 100);
    }
  }, [value, handleValueChange, step]);
  /**
   * 增加比例
   */

  var handleAdd = useCallback(function () {
    if (disabled) return; // 浮点数精度问题消除

    var newValue = Math.round(value * 100) + Math.round(step * 100);

    if (newValue <= RATIOS[RATIOS.length - 1] * 100) {
      handleValueChange(newValue / 100);
    }
  }, [value, handleValueChange, step]);
  /**
   * 如果是focus到减少按钮并回车
   */

  var handleMinusKeyDown = useCallback(function (e) {
    if (e.which === KEY_CODES.ENTER) {
      handleReduce();
    }
  }, [handleReduce]);
  /**
   * 如果是focus到增加按钮并回车
   */

  var handleAddKeyDown = useCallback(function (e) {
    if (e.which === KEY_CODES.ENTER) {
      handleAdd();
    }
  }, [handleAdd]);
  /**
   * 不是根据select来渲染
   */

  var renderRatio = useCallback(function (e) {
    return /*#__PURE__*/_createElement(TriggerSpanWrap, null, Math.round(e * 100), "%");
  }, []);
  return /*#__PURE__*/_createElement(RatioSelectWrap, null, /*#__PURE__*/_createElement(RatioSelectInner, null, /*#__PURE__*/_createElement(Tooltip, {
    title: zoomOutTitle
  }, /*#__PURE__*/_createElement(Button, {
    title: zoomOutTitle,
    tabIndex: 0,
    onKeyDown: handleMinusKeyDown,
    onClick: handleReduce,
    className: classnames({
      disabled: value === RATIOS[0] || disabled
    }),
    "data-testid": "RatioSelect_minus"
  }, _MinusNormal || (_MinusNormal = /*#__PURE__*/_createElement(MinusNormal, null)))), /*#__PURE__*/_createElement(SelectWrap, null, /*#__PURE__*/_createElement(Select, {
    size: "small",
    value: value,
    visible: visible,
    onChange: handleValueChange,
    renderTrigger: renderRatio,
    onVisibleChange: handleVisibleChange,
    zIndex: zIndex,
    style: triggerStyle,
    showArrow: false,
    placement: placement,
    title: placeholderTitle,
    disabled: disabled,
    testid: "RatioSelect"
  }, /*#__PURE__*/_createElement(SelectOptionGroup, null, RATIOS.map(function (ratio) {
    return /*#__PURE__*/_createElement(SelectOption, {
      key: "" + ratio,
      value: ratio,
      testid: "RatioSelect_" + ratio
    }, ratio * 100, "%");
  })), /*#__PURE__*/_createElement(SelectOption, {
    disabled: value >= RATIOS[RATIOS.length - 1],
    onSelect: handleAdd,
    testid: "RatioSelect_add"
  }, addText, step * 100, "%"), /*#__PURE__*/_createElement(SelectOption, {
    onSelect: handleReduce // @ts-ignore
    ,
    disabled: value <= RATIOS[0],
    testid: "RatioSelect_reduce"
  }, reduceText, step * 100, "%"))), /*#__PURE__*/_createElement(Tooltip, {
    title: zoomInTitle
  }, /*#__PURE__*/_createElement(Button, {
    tabIndex: 0,
    onKeyDown: handleAddKeyDown,
    onClick: handleAdd,
    className: classnames({
      disabled: value === RATIOS[RATIOS.length - 1] || disabled
    }),
    "data-testid": "RatioSelect_plus"
  }, _PlusNormal || (_PlusNormal = /*#__PURE__*/_createElement(PlusNormal, null))))));
});
RatioSelect.defaultProps = {
  defaultVisible: false,
  step: 0.05,
  defaultValue: 1,
  placement: 'top',
  disabled: false
};