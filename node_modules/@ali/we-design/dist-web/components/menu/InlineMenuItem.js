import React, { useCallback, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useController, useHotkeyController, useMousePosition, useHotKeyScrollRef } from "./hooks";
import { InlineMenuItemIconWrapper } from "./styled";
import { classnames } from "../../utils";
import { Tooltip } from "../tooltip";
export var InlineMenuItem = /*#__PURE__*/React.memo(function (props) {
  var icon = props.icon,
      testid = props.testid,
      selected = props.selected,
      disabled = props.disabled,
      tooltipZIndex = props.tooltipZIndex,
      menuKey = props.menuKey,
      autoClose = props.autoClose,
      onClick = props.onClick,
      tooltip = props.tooltip,
      _props$role = props.role,
      role = _props$role === void 0 ? '' : _props$role;
  var controller = useController('MenuItem');
  var hotkeyController = useHotkeyController('MenuItem');
  var hotkeyPosition = hotkeyController.hotkeyPosition,
      registerValidNode = hotkeyController.registerValidNode,
      unRegisterValidNode = hotkeyController.unRegisterValidNode,
      isHotkeyType = hotkeyController.isHotkeyType;
  var elRef = useHotKeyScrollRef(menuKey, isHotkeyType, hotkeyPosition);

  var _useMousePosition = useMousePosition(),
      setMousePosition = _useMousePosition.setMousePosition,
      mousePosition = _useMousePosition.mousePosition; // 是否选中，props.selected优先级最高


  var isSelected = typeof selected === 'boolean' ? selected : controller.isMenuItemSelected(menuKey);
  /**
   * 快捷键：注册有效节点
   */

  useEffect(function () {
    if (!disabled && controller.shortcutKey && elRef.current) {
      registerValidNode({
        menuKey: menuKey,
        path: menuKey,
        onClick: handleClick,
        parentPath: '',
        type: 'inline'
      });
      return function () {
        unRegisterValidNode({
          menuKey: menuKey,
          path: menuKey
        });
      };
    }
  }, [disabled, controller.shortcutKey]);
  var handleClick = useCallback(function (event) {
    // 自动关闭处理
    if (autoClose) {
      controller.closeAllMenu();
    }

    if (disabled) {
      return;
    } // 点击处理


    if (onClick) {
      onClick(menuKey, event);
    } // 选中处理


    controller.selectMenuItem(menuKey);

    if (controller.clickMenuItem) {
      controller.clickMenuItem(menuKey, event);
    }
  }, [disabled, autoClose, controller, onClick, menuKey]);
  /**
   * 如果有快捷键时新增的鼠标进入事件
   */

  var hotkeyMouseEnterHander = useCallback(function (event) {
    if (!disabled && mousePosition !== event.clientY) {
      hotkeyController.setHotkeyType(false);
      setMousePosition(event.clientY);
      hotkeyController.setHotkeyPosition(hotkeyController.getActionNode(menuKey));
    }
  }, [disabled, menuKey, mousePosition]);
  var handleMouseEnter = useCallback(function (event) {
    if (controller.shortcutKey) {
      hotkeyMouseEnterHander(event);
    }
  }, [controller, hotkeyMouseEnterHander]);
  return /*#__PURE__*/_createElement(Tooltip, {
    title: tooltip,
    placement: 'top',
    zIndex: tooltipZIndex
  }, /*#__PURE__*/_createElement(InlineMenuItemIconWrapper, {
    onClick: handleClick,
    onMouseEnter: handleMouseEnter,
    "data-path": menuKey,
    "data-menuid": controller.menuId,
    "data-testid": testid ? "menu-item-" + testid : undefined,
    "data-role": role,
    ref: elRef,
    className: classnames({
      selected: isSelected,
      disabled: disabled,
      hotkeyHover: hotkeyPosition && menuKey === hotkeyPosition.menuKey && !disabled && controller.shortcutKey
    })
  }, icon));
});