import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useContext, useEffect, useRef, useMemo, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { classnames } from "../../utils";
import { PathContext, MenuKeyContext, SubMenuContext } from "./contexts";
import { Dropdown } from "../dropdown";
import { ArrowRightNormal } from "../icons";
import { SubMenuWrap, SubMenuInnerWrap, TriggerWrap, TriggerIconWrap, TriggerTitleWrap, SubMenuTransitionWrap } from "./styled";
import { EMenuMode, MENU_VISIBLE_TOGGLE_DELAY } from "./consts";
import { useController, useMenuKeyContext, usePath, useHotkeyController, useHotKeyScrollRef, useMousePosition } from "./hooks";
import { Tooltip } from "../tooltip";
import { DropdownAnimation } from '@ali/we-util'; // eslint-disable-next-line max-lines-per-function

export var SubMenu = /*#__PURE__*/React.memo(function (props) {
  var children = props.children,
      title = props.title,
      showArrow = props.showArrow,
      disabled = props.disabled,
      disabledTip = props.disabledTip,
      tooltipZIndex = props.tooltipZIndex,
      overlayClassName = props.overlayClassName,
      overlayStyle = props.overlayStyle,
      testid = props.testid,
      icon = props.icon,
      maxHeight = props.maxHeight,
      _props$forceUnfoldByC = props.forceUnfoldByClick,
      forceUnfoldByClick = _props$forceUnfoldByC === void 0 ? false : _props$forceUnfoldByC,
      role = props.role,
      style = props.style;
  var controller = useController('SubMenu');
  var mode = controller.mode,
      zIndex = controller.zIndex,
      menuId = controller.menuId,
      destroyOverlayWhenInvisible = controller.destroyOverlayWhenInvisible,
      shortcutKey = controller.shortcutKey,
      menuRootRef = controller.menuRootRef,
      openedMenuKeys = controller.openedMenuKeys,
      getContainerCtr = controller.getContainer,
      minWidth = controller.minWidth;

  var _useHotkeyController = useHotkeyController('SubMenu'),
      hotkeyPosition = _useHotkeyController.hotkeyPosition,
      setHotkeyPosition = _useHotkeyController.setHotkeyPosition,
      isHotkeyType = _useHotkeyController.isHotkeyType,
      setHotkeyType = _useHotkeyController.setHotkeyType,
      getActionNode = _useHotkeyController.getActionNode,
      registerValidNode = _useHotkeyController.registerValidNode,
      unRegisterValidNode = _useHotkeyController.unRegisterValidNode;

  var _useState = useState(false),
      shortcutKeyLock = _useState[0],
      setShortcutKeyLock = _useState[1];

  var shortcutKeyLockRef = useRef(false);
  var shortcutKeyLockTimer = useRef(0); // 处理menuKey

  var _useMenuKeyContext = useMenuKeyContext(props.menuKey),
      menuKeyCtxValue = _useMenuKeyContext[0],
      menuKey = _useMenuKeyContext[1]; // key路径


  var path = usePath(menuKey); // 层级

  var level = path.split('::').length - 1; // 是否可见

  var visible = controller.isSubMenuOpened(menuKey); // 是否为第一级横向菜单

  var isHorizontal = mode === EMenuMode.horizontal && level === 0;

  var _useMousePosition = useMousePosition(),
      setMousePosition = _useMousePosition.setMousePosition,
      mousePosition = _useMousePosition.mousePosition; // 第一级横向菜单在其他菜单展开 / 非第一级横向菜单的 action 都是 hover


  var dropdownTrigger = (!isHorizontal || controller.isAnySubMenuOpened(path)) && !isHotkeyType ? 'hover' : 'click'; // 在 safari 浏览器和 chrome 会出现 menuItem onClick 无法触发的bug

  if ((openedMenuKeys == null ? void 0 : openedMenuKeys.length) === 1) {
    dropdownTrigger = visible ? 'click' : 'hover';
  }

  var elRef = useHotKeyScrollRef(menuKey, isHotkeyType, hotkeyPosition);
  var subMenuContext = useContext(SubMenuContext);
  /**
   * 可见性变化处理
   * 只有显示的时候处理，不可见应该是通过click来实现
   *
   * @param {boolean} e
   * @return {void}
   */

  var handleVisibleChange = useCallback(function (e) {
    if (e && !visible) {
      if (controller.showMenuTimer) {
        window.clearTimeout(controller.showMenuTimer);
      }

      controller.showMenuTimer = window.setTimeout(function () {
        !shortcutKeyLockRef.current && controller.showSubMenu(path);
      }, MENU_VISIBLE_TOGGLE_DELAY);
    } else if (!e && isHorizontal) {
      controller.closeAllMenu();
    }
  }, [controller, path, visible, isHorizontal]);
  var finalVisible = disabled || shortcutKeyLock ? false : visible;

  var getContainer = function getContainer() {
    return (menuRootRef == null ? void 0 : menuRootRef.current) || document.body;
  };
  /**
   * 允许快捷键时绑定鼠标进入事件，记录当前位置
   */


  var handleMouseEnter = useCallback(function (event) {
    if (shortcutKeyLockTimer.current) window.clearTimeout(shortcutKeyLockTimer.current);
    shortcutKeyLockRef.current = false;
    if (!shortcutKey) return;

    if (mousePosition === event.clientY) {
      setShortcutKeyLock(true);
      shortcutKeyLockRef.current = true;
      shortcutKeyLockTimer.current = window.setTimeout(function () {
        setShortcutKeyLock(false);
        shortcutKeyLockRef.current = false;
      }, 2000);
      return;
    }

    setShortcutKeyLock(false);
    shortcutKeyLockRef.current = false;
    setMousePosition(event.clientY);
    setHotkeyType(false);
    setHotkeyPosition(getActionNode(menuKey));

    if ((!isHorizontal || controller.isAnySubMenuOpened(path)) && dropdownTrigger === 'click') {
      /**
       * 这个场景是在垂直模式下，首次鼠标hover到二级菜单的时候，不展开二级菜单
       * 这个问题的原因是这个时候dropdownTrigger为click，触发了mouseenter，然后isHotkeyType被置为false
       * dropdownTrigger会变成hover，但是不会触发handleVisibleChange，导致不会展开二级菜单
       * 这个解法的改动影响最小
       */
      controller.showMenuTimer = window.setTimeout(function () {
        controller.showSubMenu(path);
      }, MENU_VISIBLE_TOGGLE_DELAY);
    }
  }, [visible, shortcutKey, mousePosition, controller, path, dropdownTrigger, isHorizontal]);
  /**
   * 允许垂直模式下通过点击事件展开submenu
   */

  var handleClick = useCallback(function () {
    if (!isHorizontal && !visible) {
      controller.showSubMenu(path);
    }
  }, [controller, isHorizontal, path, visible]);
  /**
   * 快捷键：注册有效节点
   */

  useEffect(function () {
    if (!disabled && shortcutKey) {
      registerValidNode({
        menuKey: menuKey,
        path: path,
        children: [],
        parentPath: path.split('::').slice(0, -1).join('::')
      });
      return function () {
        unRegisterValidNode({
          menuKey: menuKey,
          path: path
        });
      };
    }
  }, [shortcutKey]);
  var styleCombined = useMemo(function () {
    return _extends({
      padding: '4px 0'
    }, overlayStyle);
  }, [overlayStyle]);
  return /*#__PURE__*/_createElement(Dropdown, {
    placement: isHorizontal ? 'bottomLeft' : 'rightTop',
    trigger: dropdownTrigger,
    visible: finalVisible,
    getContainer: getContainerCtr || getContainer,
    onVisibleChange: handleVisibleChange,
    overlayStyle: {
      padding: 0,
      border: 'none',
      boxShadow: 'none',
      backgroundColor: 'transparent'
    },
    overlayClassName: classnames(overlayClassName, "we-ui-submenu-" + menuId + "-overlay"),
    overlay: destroyOverlayWhenInvisible && !finalVisible ? null : /*#__PURE__*/_createElement(SubMenuTransitionWrap, null, /*#__PURE__*/_createElement(SubMenuContext.Provider, {
      value: {
        showSelect: props.showSelect !== undefined ? props.showSelect : subMenuContext.showSelect !== undefined ? subMenuContext.showSelect : controller.showSelect
      }
    }, /*#__PURE__*/_createElement(PathContext.Provider, {
      value: path
    }, /*#__PURE__*/_createElement(MenuKeyContext.Provider, {
      value: menuKeyCtxValue
    }, /*#__PURE__*/_createElement(DropdownAnimation, {
      className: "we-design-menu-scroll-box",
      visible: visible,
      maxHeight: maxHeight,
      overlayStyle: styleCombined
    }, children))))),
    offsetY: isHorizontal ? 0 : -4,
    offsetX: 2,
    zIndex: typeof zIndex === 'number' ? zIndex + level : undefined,
    role: role
  }, /*#__PURE__*/_createElement(SubMenuWrap, {
    ref: elRef,
    path: path,
    menuId: controller.menuId,
    className: classnames("level-" + level + "-wrap", {
      vertical: !isHorizontal,
      horizontal: isHorizontal,
      opened: finalVisible
    }),
    "data-testid": testid ? "submenu-" + testid : undefined,
    "data-role": role,
    onMouseEnter: handleMouseEnter,
    onClick: forceUnfoldByClick ? handleClick : undefined
  }, /*#__PURE__*/_createElement(Tooltip, {
    disabled: !(disabled && disabledTip),
    title: disabledTip,
    placement: 'top',
    zIndex: tooltipZIndex
  }, /*#__PURE__*/_createElement(SubMenuInnerWrap, {
    isHotkeyType: isHotkeyType,
    className: classnames("level-" + level + "-inner-wrap", {
      vertical: !isHorizontal,
      horizontal: isHorizontal,
      opened: finalVisible,
      disabled: disabled,
      hotkeyHover: hotkeyPosition && menuKey === hotkeyPosition.menuKey && isHotkeyType && shortcutKey
    }),
    style: _extends({
      minWidth: minWidth
    }, style)
  }, /*#__PURE__*/_createElement(TriggerWrap, {
    showSelect: (subMenuContext.showSelect !== undefined ? subMenuContext.showSelect : controller.showSelect) && level > 0,
    showSelectOnRight: controller.showSelectOnRight,
    className: classnames("level-" + level + "-trigger", {
      hasArrow: showArrow && !isHorizontal
    })
  }, icon && /*#__PURE__*/_createElement(TriggerIconWrap, null, icon), /*#__PURE__*/_createElement(TriggerTitleWrap, {
    className: classnames({
      vertical: !isHorizontal
    })
  }, title)), /*#__PURE__*/_createElement(ArrowRightNormal, {
    className: classnames('icon arrow-icon', {
      disabled: disabled
    }),
    style: {
      display: showArrow && !isHorizontal ? 'inline-block' : 'none'
    }
  })))));
});
SubMenu.defaultProps = {
  showArrow: true
};