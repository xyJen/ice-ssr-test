import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import tinycolor from 'tinycolor2';
import { ColorPalette } from "./ColorPalette";
import { SplitButtonWrapper, ColorPaletteWrapper, FullFillColorArea, FillColorPickerButton } from "./styled";
var DEFAULT_COLOR = '#ffffff';
export var FillColorPicker = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(FillColorPicker, _React$PureComponent);

  function FillColorPicker(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;

    _this.handleColorPick = function (color) {
      _this.setState({
        currentColor: color
      });

      var _this$props = _this.props,
          onColorPicker = _this$props.onColorPicker,
          active = _this$props.active,
          onActiveChange = _this$props.onActiveChange;

      if (active !== undefined && onActiveChange) {
        onActiveChange(false);
      } else {
        _this.setState({
          currentActive: false
        });
      }

      if (onColorPicker) {
        onColorPicker(color);
      }
    };

    _this.handleCustomColorPick = function (color) {
      var onColorPicker = _this.props.onColorPicker;

      _this.setState({
        currentColor: color
      });

      if (onColorPicker) {
        onColorPicker(color);
      }
    };

    _this.handlePaletteClick = function (e) {
      // 阻止冒泡
      e.stopPropagation(); // 阻止默认行为

      e.preventDefault();
    };

    _this.handleClickLeft = function () {
      var onColorPicker = _this.props.onColorPicker;
      var currentColor = _this.state.currentColor;
      onColorPicker(currentColor);
    };

    _this.handleActive = function (active) {
      var onActiveChange = _this.props.onActiveChange;

      if (onActiveChange) {
        onActiveChange(active);
      }

      _this.setState({
        currentActive: active
      });
    };

    _this.getColorPalette = function () {
      var _this$props2 = _this.props,
          color = _this$props2.color,
          automaticColor = _this$props2.automaticColor,
          clearColor = _this$props2.clearColor,
          picker = _this$props2.picker,
          locale = _this$props2.locale,
          showAutomatic = _this$props2.showAutomatic,
          overlayClassName = _this$props2.overlayClassName;
      var currentColor = _this.state.currentColor;
      return /*#__PURE__*/_createElement(ColorPaletteWrapper, {
        onClick: _this.handlePaletteClick,
        className: overlayClassName
      }, /*#__PURE__*/_createElement(ColorPalette, {
        color: color || currentColor,
        onPick: _this.handleColorPick,
        onCustomColorPick: _this.handleCustomColorPick,
        automaticColor: automaticColor,
        clearColor: clearColor,
        picker: picker,
        locale: locale,
        showAutomatic: showAutomatic
      }));
    };

    _this.state = {
      currentColor: props.color || props.defaultColor || DEFAULT_COLOR,
      currentActive: props.defaultActive || false
    };
    return _this;
  }

  var _proto = FillColorPicker.prototype;

  _proto.render = function render() {
    var _this$state = this.state,
        currentColor = _this$state.currentColor,
        currentActive = _this$state.currentActive;
    var _this$props3 = this.props,
        color = _this$props3.color,
        size = _this$props3.size,
        style = _this$props3.style,
        propActive = _this$props3.active,
        title = _this$props3.title;
    var active = propActive !== undefined ? propActive : currentActive;
    var activeColor = color || currentColor;
    var isWhite = tinycolor.equals(activeColor, '#ffffff');
    return /*#__PURE__*/_createElement(FillColorPickerButton, {
      overlay: this.getColorPalette(),
      onClickLeft: this.handleClickLeft,
      active: active,
      onActiveChange: this.handleActive,
      style: style,
      size: size,
      testid: "FillColorPicker",
      title: title
    }, /*#__PURE__*/_createElement(SplitButtonWrapper, null, /*#__PURE__*/_createElement(FullFillColorArea, {
      isWhite: isWhite,
      color: activeColor
    })));
  };

  return FillColorPicker;
}(React.PureComponent);