import _extends from "@babel/runtime/helpers/extends";

var _CatalogueBetaNormal;

import React, { useCallback, useMemo, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Dropdown } from "../dropdown";
import { TriggerWrapper, LeftWrap, RightWrap } from "./styled";
import { CatalogueBetaNormal } from "../icons";
import { FileMenuDivider } from "./Divider";
import { FileMenuItem } from "./FileMenuItem";
import { useTranslate } from '@ali/we-util';
import { useControlledValue } from "../../hooks";
import { classnames } from "../../utils";
import { FileMenuContext } from "./context";
// eslint-disable-next-line max-lines-per-function
export var FileMenu = /*#__PURE__*/React.memo(function (props) {
  var style = props.style,
      overlayStyle = props.overlayStyle,
      zIndex = props.zIndex,
      contentStyle = props.contentStyle,
      children = props.children,
      text = props.text,
      locale = props.locale,
      trigger = props.trigger,
      onClick = props.onClick,
      onVisibleChange = props.onVisibleChange;
  var t = useTranslate(locale);

  var _useControlledValue = useControlledValue(props.visible, props.defaultVisible),
      visible = _useControlledValue[0],
      setVisible = _useControlledValue[1];

  var _useState = useState(null),
      currentItem = _useState[0],
      setCurrentItem = _useState[1];

  var fileText = text || t('we_ui_file_menu_text');
  var handleVisibleChange = useCallback(function (e) {
    if (onVisibleChange) {
      onVisibleChange(e);
    }

    setVisible(e);
  }, [onVisibleChange, setVisible]);
  var setInitialContent = useCallback(function (menuKey, content, autoClose) {
    setCurrentItem(function (item) {
      if (item) {
        return item;
      }

      return {
        menuKey: menuKey,
        content: content,
        autoClose: autoClose
      };
    });
  }, []);
  /**
   * 更新Item内容
   */

  var updateContent = useCallback(function (menuKey, content, autoClose) {
    setCurrentItem({
      menuKey: menuKey,
      content: content,
      autoClose: autoClose
    });
  }, []);
  var currentMenuKey = currentItem && currentItem.menuKey || '';
  var onMenuItemUnmount = useCallback(function (menuKey) {
    if (menuKey === currentMenuKey) {
      setCurrentItem(null);
    }
  }, [currentMenuKey]);
  var ctx = useMemo(function () {
    return {
      updateContent: updateContent,
      currentMenuKey: currentMenuKey,
      setInitialContent: setInitialContent,
      onMenuItemUnmount: onMenuItemUnmount,
      setVisible: handleVisibleChange,
      onClick: onClick
    };
  }, [updateContent, currentMenuKey, setInitialContent, onMenuItemUnmount, handleVisibleChange, onClick]);
  var overlayStyleCombined = useMemo(function () {
    return _extends({
      display: 'flex',
      alignItems: 'stretch'
    }, overlayStyle || {});
  }, [overlayStyle]);
  var handleClickRight = useCallback(function () {
    if (currentItem && currentItem.autoClose) {
      handleVisibleChange(false);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [!!(currentItem && currentItem.autoClose), handleVisibleChange]);
  return /*#__PURE__*/_createElement(Dropdown, {
    overlay: /*#__PURE__*/_createElement(FileMenuContext.Provider, {
      value: ctx
    }, /*#__PURE__*/_createElement(LeftWrap, null, children), currentItem && /*#__PURE__*/_createElement(RightWrap, {
      style: contentStyle,
      onClick: handleClickRight
    }, currentItem.content)),
    zIndex: zIndex,
    overlayStyle: overlayStyleCombined,
    trigger: trigger,
    visible: visible,
    onVisibleChange: handleVisibleChange
  }, /*#__PURE__*/_createElement(TriggerWrapper, {
    style: style,
    className: classnames({
      active: visible
    })
  }, _CatalogueBetaNormal || (_CatalogueBetaNormal = /*#__PURE__*/_createElement(CatalogueBetaNormal, {
    className: "trigger-icon"
  })), /*#__PURE__*/_createElement("span", null, fileText)));
});
FileMenu.defaultProps = {
  trigger: 'click',
  defaultVisible: false
};
FileMenu.Divider = FileMenuDivider;
FileMenu.Item = FileMenuItem;