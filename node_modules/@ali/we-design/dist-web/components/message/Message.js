var _NoticeSuccessNormal, _NoticeErrorNormal, _NoticeTipNormal, _NoticeWarningNormal, _img;

/* eslint-disable arrow-body-style */

/* eslint-disable no-plusplus */

/* eslint-disable @typescript-eslint/explicit-function-return-type */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';
import { NoticeErrorNormal, NoticeSuccessNormal, NoticeTipNormal, NoticeWarningNormal } from '@ali/we-icon';
import { classnames } from "../../utils";
import { ContainerRoot, MessageWrap, MessageContent, Container, MessageBox, MessageFlex } from "./styled";
export var Message = function Message(props) {
  var messages = props.messages,
      style = props.style;
  var IconNodes = {
    success: _NoticeSuccessNormal || (_NoticeSuccessNormal = /*#__PURE__*/_createElement(NoticeSuccessNormal, {
      className: "icon success-icon"
    })),
    error: _NoticeErrorNormal || (_NoticeErrorNormal = /*#__PURE__*/_createElement(NoticeErrorNormal, {
      className: "icon error-icon"
    })),
    info: _NoticeTipNormal || (_NoticeTipNormal = /*#__PURE__*/_createElement(NoticeTipNormal, {
      className: "icon info-icon"
    })),
    warning: _NoticeWarningNormal || (_NoticeWarningNormal = /*#__PURE__*/_createElement(NoticeWarningNormal, {
      className: "icon warning-icon"
    })),
    loading: _img || (_img = /*#__PURE__*/_createElement("img", {
      width: "20px",
      height: "20px",
      src: "https://img.alicdn.com/imgextra/i3/O1CN01uT6E7d1CkXrhFshZm_!!6000000000119-1-tps-375-375.gif"
    }))
  };
  return /*#__PURE__*/_createElement(ContainerRoot, {
    style: style
  }, /*#__PURE__*/_createElement(Container, null, /*#__PURE__*/_createElement(CSSTransitionGroup, {
    transitionName: "message",
    transitionEnterTimeout: 300,
    transitionLeaveTimeout: 300
  }, messages.map(function (msg) {
    var key = msg.key,
        type = msg.type,
        content = msg.content,
        _msg$animated = msg.animated,
        animated = _msg$animated === void 0 ? true : _msg$animated,
        node = msg.node;
    return node ? /*#__PURE__*/_createElement(MessageBox, {
      key: key
    }, /*#__PURE__*/_createElement("div", {
      className: classnames({
        animated: animated
      })
    }, node)) : /*#__PURE__*/_createElement(MessageBox, {
      key: key
    }, /*#__PURE__*/_createElement(MessageWrap, {
      className: classnames({
        animated: animated
      })
    }, /*#__PURE__*/_createElement(MessageFlex, null, IconNodes[type], /*#__PURE__*/_createElement(MessageContent, null, content))));
  }))));
};
export var message = function () {
  var uuid = 0;
  var messages = [];
  var handleUpdate = null;

  function init() {
    if (handleUpdate) {
      return;
    }

    var oDiv = document.createElement('div');
    oDiv.style.position = 'absolute';
    oDiv.style.width = '100%';
    oDiv.style.top = '0px';
    oDiv.style.left = '0px';
    document.body.appendChild(oDiv);

    handleUpdate = function handleUpdate(msgs) {
      ReactDOM.render( /*#__PURE__*/_createElement(Message, {
        messages: msgs
      }), oDiv);
    };
  }

  var getConfig = function getConfig(config, duration) {
    var newConfig = typeof config === 'string' ? {
      content: config,
      duration: typeof duration !== 'undefined' ? duration : 3
    } : config;

    if (typeof duration !== 'undefined') {
      // TODO: 坑，config 中也可以指定 duration，此处认为 单独声明的 duration 优先级更高
      newConfig.duration = duration;
    }

    newConfig.key = newConfig.key || "msgid-" + ++uuid;

    if (uuid > 10000000) {
      uuid = 0;
    }

    return newConfig;
  };

  return {
    open: function open(config) {
      var _this = this;

      init();
      messages = [].concat(messages, [config]);
      handleUpdate(messages);

      if (config.duration > 0) {
        setTimeout(function () {
          var key = config.key,
              onClose = config.onClose;

          _this.close(key);

          onClose && onClose();
        }, config.duration * 1000);
      }
    },
    custom: function custom(node, duration, config) {
      var newConfig = getConfig(config || '', duration);
      newConfig.node = node;
      this.open(newConfig);
    },
    close: function close(key) {
      if (key) {
        var index = messages.findIndex(function (m) {
          return m.key === key;
        });

        if (index !== -1) {
          messages = [].concat(messages);
          messages.splice(index, 1);
        }
      } else {
        messages = [];
      }

      if (handleUpdate) {
        handleUpdate(messages);
      }
    },
    success: function success(config, duration) {
      config = getConfig(config, duration);
      config.type = 'success';
      this.open(config);
    },
    error: function error(config, duration) {
      config = getConfig(config, duration);
      config.type = 'error';
      this.open(config);
    },
    warning: function warning(config, duration) {
      config = getConfig(config, duration);
      config.type = 'warning';
      this.open(config);
    },
    loading: function loading(config, duration) {
      config = getConfig(config, duration);
      config.type = 'loading';
      this.open(config);
    },
    info: function info(config, duration) {
      config = getConfig(config, duration);
      config.type = 'info';
      this.open(config);
    }
  };
}();