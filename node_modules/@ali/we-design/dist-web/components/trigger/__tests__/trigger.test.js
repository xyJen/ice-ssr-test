import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

var _div, _div2, _div3, _div4, _div5, _div6, _div7, _div8, _div9, _div10, _div11, _div12, _div13, _div14;

import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { cleanup, fireEvent, render, screen, waitFor } from '@testing-library/react';
import { Trigger } from "../Trigger";
import { KEY_CODES } from "../../..";
describe('Trigger renders correctly', function () {
  afterEach(cleanup);
  it('testid renders', function () {
    render( /*#__PURE__*/_createElement(Trigger, {
      testid: "test",
      action: ['click'],
      overlay: _div || (_div = /*#__PURE__*/_createElement("div", null, "test overlay"))
    }, _div2 || (_div2 = /*#__PURE__*/_createElement("div", null, "test trigger node"))));
    fireEvent.click(screen.getByText('test trigger node'));
    expect(screen.getByText('test overlay')).toBeInTheDocument();
    expect(screen.getByTestId('Popup-test')).toBeInTheDocument();
  });
  it('mask renders', function () {
    var mockOnVisibleChange = jest.fn(function () {});
    render( /*#__PURE__*/_createElement(Trigger, {
      mask: true,
      testid: "test",
      action: ['click', 'contextMenu'],
      overlay: _div3 || (_div3 = /*#__PURE__*/_createElement("div", null, "test overlay")),
      onVisibleChange: mockOnVisibleChange
    }, _div4 || (_div4 = /*#__PURE__*/_createElement("div", null, "test trigger node"))));
    fireEvent.click(screen.getByText('test trigger node'));
    fireEvent.click(screen.getByTestId('Popup_mask_test'));
    expect(mockOnVisibleChange.mock.calls.length).toBe(2);
  });
  it('popover type renders', function () {
    render( /*#__PURE__*/_createElement(Trigger, {
      testid: "test",
      type: "popover",
      action: ['click'],
      overlay: _div5 || (_div5 = /*#__PURE__*/_createElement("div", null, "test overlay"))
    }, _div6 || (_div6 = /*#__PURE__*/_createElement("div", null, "test trigger node"))));
    fireEvent.click(screen.getByText('test trigger node'));
    expect(screen.getByText('test overlay')).toBeInTheDocument();
    expect(screen.getByTestId('Popup-test')).toBeInTheDocument();
  });
});
describe('Trigger interactive logic correct', function () {
  afterEach(cleanup);
  it('handleClickTrigger works', function () {
    render( /*#__PURE__*/_createElement(Trigger, {
      action: ['click'],
      overlay: _div7 || (_div7 = /*#__PURE__*/_createElement("div", null, "test overlay"))
    }, /*#__PURE__*/_createElement("div", {
      onClick: function onClick() {
        return false;
      }
    }, "test trigger node")));
    fireEvent.click(screen.getByText('test trigger node'));
    expect(screen.queryByText('test overlay')).toBeNull();
  });
  it('handleEnter handleLeave works', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var mockOnMouseLeave, mockOverlayOnMouseEnter, mockOverlayOnMouseLeave;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mockOnMouseLeave = jest.fn(function () {});
            mockOverlayOnMouseEnter = jest.fn(function () {});
            mockOverlayOnMouseLeave = jest.fn(function () {});
            render( /*#__PURE__*/_createElement(Trigger, {
              testid: "test",
              action: ['hover'],
              overlay: /*#__PURE__*/_createElement("div", {
                onMouseEnter: mockOverlayOnMouseEnter,
                onMouseLeave: mockOverlayOnMouseLeave
              }, "test overlay")
            }, /*#__PURE__*/_createElement("div", {
              onMouseLeave: mockOnMouseLeave
            }, "test trigger node")));
            fireEvent.mouseEnter(screen.getByText('test trigger node'));
            fireEvent.mouseLeave(screen.getByText('test trigger node'));
            expect(screen.getByTestId('Popup-test')).not.toHaveClass('hidden');
            expect(mockOnMouseLeave.mock.calls.length).toBe(1);
            _context.next = 10;
            return waitFor(function () {
              // 延迟 200ms 关闭 Popup
              expect(screen.getByTestId('Popup-test')).toHaveClass('hidden');
            });

          case 10:
            fireEvent.mouseEnter(screen.getByText('test overlay'));
            expect(screen.getByTestId('Popup-test')).not.toHaveClass('hidden');
            fireEvent.mouseLeave(screen.getByText('test overlay'));
            _context.next = 15;
            return waitFor(function () {
              // 延迟 200ms 关闭 Popup
              expect(screen.getByTestId('Popup-test')).toHaveClass('hidden');
            });

          case 15:
            expect(mockOverlayOnMouseEnter.mock.calls.length).toBe(1);
            expect(mockOverlayOnMouseLeave.mock.calls.length).toBe(1);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('handleFocus works', function () {
    var mockOnFocus = jest.fn(function () {});
    render( /*#__PURE__*/_createElement(Trigger, {
      action: ['focus'],
      overlay: _div8 || (_div8 = /*#__PURE__*/_createElement("div", null, "test overlay"))
    }, /*#__PURE__*/_createElement("div", {
      onFocus: mockOnFocus
    }, "test trigger node")));
    fireEvent.focus(screen.getByText('test trigger node'));
    expect(mockOnFocus.mock.calls.length).toBe(1);
  });
  it('handleKeyDown works', function () {
    var mockOnKeyDown = jest.fn(function () {});
    render( /*#__PURE__*/_createElement(Trigger, {
      testid: "test",
      action: ['focus'],
      overlay: _div9 || (_div9 = /*#__PURE__*/_createElement("div", null, "test overlay"))
    }, /*#__PURE__*/_createElement("div", {
      onKeyDown: mockOnKeyDown
    }, "test trigger node")));
    fireEvent.focus(screen.getByText('test trigger node'));
    expect(screen.queryByText('test overlay')).toBeNull(); // 随机测试方向键

    fireEvent.keyDown(screen.getByText('test trigger node'), {
      keyCode: [KEY_CODES.UP, KEY_CODES.DOWN, KEY_CODES.LEFT, KEY_CODES.RIGHT][Math.floor(Math.random() * 4)]
    });
    expect(screen.getByTestId('Popup-test')).not.toHaveClass('hidden');
    fireEvent.keyDown(screen.getByText('test trigger node'), {
      keyCode: KEY_CODES.ESC
    });
    expect(screen.getByTestId('Popup-test')).toHaveClass('hidden');
    expect(mockOnKeyDown.mock.calls.length).toBe(2);
  });
  it('handleBlur works', function () {
    var mockOnBlur = jest.fn(function () {});
    render( /*#__PURE__*/_createElement(Trigger, {
      testid: "test",
      action: ['focus', 'click'],
      overlay: _div10 || (_div10 = /*#__PURE__*/_createElement("div", null, "test overlay"))
    }, /*#__PURE__*/_createElement("div", {
      onBlur: mockOnBlur
    }, "test trigger node")));
    fireEvent.click(screen.getByText('test trigger node'));
    fireEvent.blur(screen.getByText('test trigger node'));
    expect(screen.getByTestId('Popup-test')).toHaveClass('hidden');
    expect(mockOnBlur.mock.calls.length).toBe(1);
  });
  it('handleClickOverlayOuter works', function () {
    render( /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement("button", {
      onClick: function onClick() {}
    }, "test button"), /*#__PURE__*/_createElement(Trigger, {
      testid: "test",
      action: ['click'],
      overlay: _div11 || (_div11 = /*#__PURE__*/_createElement("div", null, "test overlay"))
    }, _div12 || (_div12 = /*#__PURE__*/_createElement("div", null, "test trigger node")))));
    fireEvent.click(screen.getByText('test trigger node'));
    expect(screen.getByTestId('Popup-test')).not.toHaveClass('hidden');
    fireEvent.mouseDown(screen.getByText('test button'));
    expect(screen.getByTestId('Popup-test')).toHaveClass('hidden');
  });
  it('handleContextMenuTrigger works', function () {
    var mockOnContextMenu = jest.fn(function () {});
    render( /*#__PURE__*/_createElement(Trigger, {
      testid: "test",
      action: ['contextMenu'],
      overlay: _div13 || (_div13 = /*#__PURE__*/_createElement("div", null, "test overlay"))
    }, /*#__PURE__*/_createElement("div", {
      onContextMenu: mockOnContextMenu
    }, "test trigger node")));
    fireEvent.contextMenu(screen.getByText('test trigger node'));
    expect(mockOnContextMenu.mock.calls.length).toBe(1);
  });
  it('Popup handleClick works', function () {
    var mockOnMouseDown = jest.fn(function () {});
    render( /*#__PURE__*/_createElement(Trigger, {
      testid: "test",
      action: ['click'],
      overlay: /*#__PURE__*/_createElement("div", {
        onMouseDown: mockOnMouseDown
      }, "test overlay")
    }, _div14 || (_div14 = /*#__PURE__*/_createElement("div", null, "test trigger node"))));
    fireEvent.click(screen.getByText('test trigger node'));
    fireEvent.mouseDown(screen.getByText('test overlay').parentNode);
    expect(mockOnMouseDown).not.toBeCalled();
  });
});