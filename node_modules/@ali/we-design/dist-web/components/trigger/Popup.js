import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable react/no-find-dom-node */
import React, { useCallback, useMemo, useEffect, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ResizeObserver from 'resize-observer-polyfill';
import domAlign, { alignPoint } from 'dom-align';
import { PortalComponent } from "../portal-component";
import { OverlayWrap, OverlayMask, PopoverContent, PopoverArrow } from "./styled";
import { getAlignPointsAndOffsets, debounce, throttle } from "../../utils";
import { useClickOuterRef } from "../../hooks";
import { isElement } from 'lodash-es';
var OFFSET_POPUP = 2;
var OFFSET_POPOVER = 10;
var OFFSET_ARROW = 2;
/**
 * 三角位置的计算
 */

var alginArrow = function alginArrow(offsetX, offsetY) {
  return [offsetX, offsetY].map(function (offset) {
    var arrowOffset = 0;

    if (offset === 0) {
      return arrowOffset;
    }

    if (offset > 0) {
      arrowOffset = OFFSET_ARROW + offset - OFFSET_POPOVER;
      return arrowOffset < 0 ? 0 : arrowOffset;
    } else {
      arrowOffset = -OFFSET_ARROW + offset + OFFSET_POPOVER;
      return arrowOffset > 0 ? 0 : arrowOffset;
    }
  });
}; // eslint-disable-next-line max-lines-per-function


export var Popup = function Popup(props) {
  var type = props.type,
      visible = props.visible,
      getContainer = props.getContainer,
      overlayStyle = props.overlayStyle,
      overlay = props.overlay,
      triggerNode = props.triggerNode,
      placement = props.placement,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave,
      zIndex = props.zIndex,
      onClickOuter = props.onClickOuter,
      offsetX = props.offsetX,
      offsetY = props.offsetY,
      mask = props.mask,
      onClickMask = props.onClickMask,
      overlayClassName = props.overlayClassName,
      pageX = props.pageX,
      pageY = props.pageY,
      testid = props.testid,
      backgroundColor = props.backgroundColor,
      maskColor = props.maskColor,
      delayDestroy = props.delayDestroy,
      disableDomAlign = props.disableDomAlign,
      overlayAutoAlign = props.overlayAutoAlign,
      overlayAutoAlignDelay = props.overlayAutoAlignDelay,
      _props$role = props.role,
      role = _props$role === void 0 ? '' : _props$role; // 容器

  var oPopupContainer = getContainer ? getContainer() : document.body;
  var overlayRef = useClickOuterRef(onClickOuter, visible);
  var popoverArrowRef = useRef(null);
  /**
   * 计算位置
   *
   * @param {HTMLElement} trigger node
   * @return {void}
   */

  var handleAlign = useCallback(function (oTrigger) {
    if (!overlayRef.current) return;
    var isPopover = type === 'popover';
    var overflow = {
      adjustX: true,
      adjustY: true
    };
    var targetOffset = [0, 0];
    var overlayPoints = [];
    var overlayOffsets = [];

    if (isPopover) {
      var overlayPosition = getAlignPointsAndOffsets(placement, OFFSET_POPOVER);
      overlayPoints = overlayPosition.points;
      overlayOffsets = overlayPosition.offsets;
    } else {
      var _getAlignPointsAndOff = getAlignPointsAndOffsets(placement, OFFSET_POPUP),
          points = _getAlignPointsAndOff.points,
          offsets = _getAlignPointsAndOff.offsets;

      overlayPoints = points;
      overlayOffsets = offsets;
    }

    var commonPosition = {
      targetOffset: targetOffset,
      overflow: overflow
    };

    if (typeof pageX === 'number' && typeof pageY === 'number') {
      alignPoint(overlayRef.current, {
        pageX: pageX,
        pageY: pageY
      }, _extends({}, commonPosition, {
        offset: [offsetX, offsetY],
        points: overlayPoints
      }));
    } else if (oTrigger) {
      var allowAdjust = disableDomAlign !== true;
      var position = domAlign(overlayRef.current, oTrigger, _extends({}, commonPosition, {
        points: overlayPoints,
        offset: [overlayOffsets[0] + offsetX, overlayOffsets[1] + offsetY],
        overflow: {
          adjustX: allowAdjust,
          adjustY: allowAdjust
        }
      }));
      overlayRef.current.setAttribute('position', (position.points || []).join());

      if (isPopover) {
        position.offset = alginArrow(position.overflow.adjustX ? -position.offset[0] : position.offset[0], position.overflow.adjustY ? -position.offset[1] : position.offset[1]);
        position.overflow = {
          adjustX: true,
          adjustY: true
        };
        domAlign(popoverArrowRef.current, oTrigger, position);
      }
    }

    if (testid) {
      overlayRef.current.setAttribute('data-testid', "Popup-" + (testid || ''));
    }
  }, [pageX, pageY, offsetY, offsetX, placement, overlayRef, testid]);
  useEffect(function () {
    var resizeObserver;
    var handleResize = debounce(function () {
      if (overlayRef.current && triggerNode) {
        handleAlign(triggerNode);
      }
    }, 300);

    if (visible && oPopupContainer && overlayRef.current && triggerNode) {
      resizeObserver = new ResizeObserver(handleResize);
    }

    if (resizeObserver && isElement(oPopupContainer)) {
      resizeObserver.observe(oPopupContainer);
    } else if (!isElement(oPopupContainer)) {
      // throw new Error('Container is not Element')
      console.error('Container is not Element');
    }

    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();

        if (typeof handleResize.cancel === 'function') {
          handleResize.cancel();
        }
      }
    };
  }, [visible, oPopupContainer, overlayRef, triggerNode, handleAlign]);
  /**
   * 监控overlay的size变化
   */

  useEffect(function () {
    if (!overlayAutoAlign) return;
    if (!overlayRef.current) return;
    var resizeObserver;
    var handleResize = throttle(function () {
      if (triggerNode) {
        handleAlign(triggerNode);
      }
    }, overlayAutoAlignDelay || 100, true);

    if (visible && triggerNode) {
      resizeObserver = new ResizeObserver(handleResize);
    }

    if (resizeObserver && isElement(overlayRef.current)) {
      resizeObserver.observe(overlayRef.current);
    }

    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, [visible, triggerNode, handleAlign, placement, disableDomAlign]);
  /**
   * 阻止blur
   */

  var handleClick = useCallback(function (e) {
    var whiteTags = ['input', 'textarea'];
    var tagName = (e.target.tagName || '').toLowerCase();

    if (!whiteTags.includes(tagName)) {
      e.preventDefault();
    }
  }, []);
  /**
   * 做位置计算的
   */

  useEffect(function () {
    var t = 0;

    if (visible) {
      if (triggerNode) {
        handleAlign(triggerNode);
      } else {
        handleAlign();
      }
    } else if (overlayRef.current) {
      var el = overlayRef.current;
      t = window.setTimeout(function () {
        el.style.top = '-9999px';
        el.style.left = '-9999px';
      }, delayDestroy || 0);
    }

    return function () {
      return clearTimeout(t);
    };
  }, [visible, handleAlign, triggerNode, overlayRef, delayDestroy]);
  /**
   * 合并样式
   */

  var styleCombined = useMemo(function () {
    var styles = _extends({}, overlayStyle || {});

    if (typeof zIndex === 'number') {
      styles.zIndex = zIndex;
    }

    if (backgroundColor) {
      styles.backgroundColor = backgroundColor;
    }

    return styles;
  }, [overlayStyle, zIndex]);
  var popoverBoxStyle = useMemo(function () {
    var styles = {};

    if (typeof zIndex === 'number') {
      styles.zIndex = zIndex + 2;
    }

    return styles;
  }, []);
  return /*#__PURE__*/_createElement(PortalComponent, {
    visible: !!visible,
    getContainer: getContainer
  }, mask && /*#__PURE__*/_createElement(OverlayMask, {
    "data-testid": testid && "Popup_mask_" + testid,
    className: visible ? undefined : 'hidden',
    style: maskColor ? {
      zIndex: zIndex,
      backgroundColor: maskColor
    } : {
      zIndex: zIndex
    },
    onClick: onClickMask,
    onContextMenu: function onContextMenu(e) {
      return e.preventDefault();
    }
  }), type === 'popup' ? /*#__PURE__*/_createElement(OverlayWrap, {
    ref: overlayRef,
    style: styleCombined,
    className: overlayClassName + " " + (visible ? '' : 'hidden') + " popup-overlay-wrap",
    onMouseDown: handleClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    "data-role": role
  }, overlay) : /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(PopoverContent, {
    className: visible ? '' : 'hidden',
    style: styleCombined,
    ref: overlayRef,
    onMouseDown: handleClick,
    "data-role": role
  }, /*#__PURE__*/_createElement("div", {
    className: "popover_content_box",
    style: popoverBoxStyle,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, overlay), /*#__PURE__*/_createElement(PopoverArrow, {
    style: styleCombined,
    className: visible ? '' : 'hidden',
    ref: popoverArrowRef,
    onMouseDown: handleClick
  }))));
};