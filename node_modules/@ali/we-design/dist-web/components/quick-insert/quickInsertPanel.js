/* eslint-disable max-lines-per-function */
import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { isEnterHotKey, isUpHotKey, isDownHotKey } from "../../utils";
import { TranslateComp } from '@ali/we-util';
import { QuickInsertItem, LoadingItem, SkeletonLoading } from "./quickInsertItem";
import { SpinErrorCard } from "../spin";
import { EQuickInsertStatus } from "./type";
import { HeaderWrapper, HeaderTitle, HeaderButton, QuickInsertWrapper, ListWrapper, GroupTitle, ButtonText, EmptyWrapper, ImageWrapper, EmptyText, IconWrapper } from "./styled";
var DEFAULT_ITEM_HEIGHT = 52;
var LIST_ITEM_HEIGHT = 52;
var GROUP_TITLE_HEIGHT = 30;
var EMPTY_IMG = 'https://img.alicdn.com/imgextra/i4/O1CN01rvr2PW1s7o9n7HXsG_!!6000000005720-2-tps-117-118.png';

var getItemSize = function getItemSize(itemData) {
  var size = DEFAULT_ITEM_HEIGHT;

  if (itemData) {
    size = typeof itemData === 'string' ? GROUP_TITLE_HEIGHT : LIST_ITEM_HEIGHT;
  }

  return size;
};

var getListData = function getListData(datas) {
  var listData = [];
  var offset = 0;
  var headerTitle = '';
  datas.forEach(function (subGroup, index) {
    // 第1个分组在标题中展示
    if (index === 0) {
      headerTitle = subGroup.title;
    } else {
      listData.push({
        pos: offset,
        itemData: subGroup.title,
        groupTitle: subGroup.title
      });
      offset += getItemSize(subGroup.title);
    }

    if (subGroup.list && subGroup.list.length > 0) {
      subGroup.list.forEach(function (item) {
        listData.push({
          pos: offset,
          groupTitle: subGroup.title,
          itemData: item
        });
        offset += getItemSize(item);
      });
    }
  });
  return [listData, headerTitle];
};

export var QuickInsertPanel = /*#__PURE__*/React.memo(function (props) {
  var _EmptyWrapper;

  var data = props.data,
      status = props.status,
      locale = props.locale,
      width = props.width,
      height = props.height,
      errorMsg = props.errorMsg,
      clearActive = props.clearActive,
      emptyUrl = props.emptyUrl,
      emptyMsg = props.emptyMsg,
      ErrorIcon = props.ErrorIcon;

  var _React$useMemo = React.useMemo(function () {
    return getListData(data);
  }, [data]),
      listData = _React$useMemo[0],
      defaultTitle = _React$useMemo[1]; // 列表引用


  var refList = React.useRef(null); // // 最近一次 mousemove event的鼠标位置

  var latestMousePosY = React.useRef(0); // // 最近一次 scroll event的滚动位置

  var latestScrollPosY = React.useRef(0); // // 当前是否在处理 keydown 事件

  var isKeyDownTyping = React.useRef(false);

  var _React$useState = React.useState(-1),
      activeIndex = _React$useState[0],
      setActiveIndex = _React$useState[1];

  var _React$useState2 = React.useState(''),
      headerTitle = _React$useState2[0],
      setHeaderTitle = _React$useState2[1]; // 是否显示标题，


  var _React$useState3 = React.useState(true),
      isShowTitle = _React$useState3[0],
      setShowTitle = _React$useState3[1];

  React.useEffect(function () {
    document.addEventListener('keydown', handleKeyDown, true);
    return function () {
      document.removeEventListener('keydown', handleKeyDown, true);
    };
  });
  React.useEffect(function () {
    if (clearActive) setActiveIndex(-1);
  }, [clearActive]); // 获取元素顶部距离滚动容器顶部距离

  var getItemOffsetTop = useCallback(function (index) {
    if (!listData || !listData.length) {
      return 0;
    }

    var uiItemData = listData[index];

    if (!uiItemData) {
      return 0;
    }

    return uiItemData.pos;
  }, [listData]); // 获取列表项(相对与列表顶部)的高度

  var getItemRelativeHeight = function getItemRelativeHeight(index) {
    if (!listData || !listData.length) {
      return 0;
    }

    var uiItemData = listData[index];

    if (!uiItemData) {
      return 0;
    }

    return uiItemData.pos + getItemSize(uiItemData.itemData);
  };

  var getListContainerHeight = function getListContainerHeight() {
    var containerHeight = 0;

    if (refList.current) {
      var rect = refList.current.getBoundingClientRect();
      containerHeight = rect.height;
    }

    return containerHeight;
  };

  var findCursorIndex = function findCursorIndex(offset) {
    if (!listData || offset < 0) {
      return -1;
    }

    var index = listData.findIndex(function (item, id, array) {
      if (offset >= item.pos && (array[id + 1] && offset < array[id + 1].pos || !array[id + 1])) {
        return true;
      } else {
        return false;
      }
    });
    return index;
  };

  var handleListScroll = function handleListScroll() {
    // 快捷键产生的事件，忽略处理
    if (isKeyDownTyping.current) {
      return;
    }

    var scrollOffset = 0;
    var scrollHeight = 0;

    if (refList.current) {
      scrollOffset = refList.current.scrollTop;
      scrollHeight = refList.current.scrollHeight;
    } // 查找距离最近的一个item


    var resultItem = listData.find(function (item, index, array) {
      if (scrollOffset >= item.pos && (array[index + 1] && scrollOffset < array[index + 1].pos || !array[index + 1])) {
        return true;
      } else {
        return false;
      }
    });

    if (resultItem) {
      var resultUiItem = resultItem;
      setHeaderTitle(resultUiItem.groupTitle); // 是否显示标题

      var isShow = typeof resultUiItem.itemData !== 'string';
      setShowTitle(isShow);
    } // 查找光标所在的列表项


    var offsetY = latestMousePosY.current + scrollOffset;
    var index = findCursorIndex(offsetY);

    if (index >= 0) {
      setActiveIndex(index);
    } // 滑动到最底部，触发“加载更多”


    var containerHeight = getListContainerHeight();

    if (scrollOffset > latestScrollPosY.current && scrollOffset >= scrollHeight - containerHeight) {
      var loadMore = props.loadMore;

      if (typeof loadMore === 'function') {
        loadMore();
      }
    }

    latestScrollPosY.current = scrollOffset;
  };

  var handleMouseMove = function handleMouseMove(e) {
    // 获取鼠标相对于列表容器的位置
    var _e$pageY = e.pageY,
        pageY = _e$pageY === void 0 ? 0 : _e$pageY;
    var containerY = 0;

    if (refList.current) {
      var rect = refList.current.getBoundingClientRect();
      containerY = rect.y;
    }

    var mouseRelativeY = pageY - containerY;
    latestMousePosY.current = mouseRelativeY; // 查找光标所在的列表项

    var index = findCursorIndex(latestScrollPosY.current + mouseRelativeY);

    if (index >= 0) {
      setActiveIndex(index);
    }
  };

  var handleKeyDown = function handleKeyDown(event) {
    var useHotKey = props.useHotKey,
        onItemClick = props.onItemClick;

    if (!useHotKey) {
      return;
    }

    isKeyDownTyping.current = true;

    if (isUpHotKey(event)) {
      var _refList$current;

      event.stopPropagation();
      event.preventDefault();
      var newActiveIndex = Math.max(activeIndex - 1, 0);
      var uiItemData = listData[newActiveIndex];

      if (typeof uiItemData.itemData === 'string') {
        newActiveIndex = Math.max(newActiveIndex - 1, 0);
      }

      var itemOffsetTop = getItemOffsetTop(newActiveIndex);
      var listScrollTop = (_refList$current = refList.current) == null ? void 0 : _refList$current.scrollTop; // 元素顶部低于滚动距离时，需要向上矫正滚动位置

      if (refList.current && itemOffsetTop < listScrollTop) {
        var uiItem = listData[newActiveIndex];
        var offset = uiItem ? uiItem.pos : 0;
        refList.current.scrollTo(0, offset);
        latestScrollPosY.current = offset;
      }

      setActiveIndex(newActiveIndex);
    } else if (isDownHotKey(event)) {
      var _refList$current2;

      event.stopPropagation();
      event.preventDefault();

      var _newActiveIndex = Math.min(activeIndex + 1, listData.length - 1);

      var _uiItemData = listData[_newActiveIndex];

      if (typeof _uiItemData.itemData === 'string') {
        _newActiveIndex = Math.min(_newActiveIndex + 1, listData.length - 1);
      }

      var containerHeight = getListContainerHeight();
      var relativeHeight = getItemRelativeHeight(_newActiveIndex);

      var _listScrollTop = (_refList$current2 = refList.current) == null ? void 0 : _refList$current2.scrollTop; // 元素底部 < 当前滚动距离 + 滚动容器高度时，需要向下矫正滚动位置


      if (refList.current && _listScrollTop + containerHeight < relativeHeight) {
        var _offset = relativeHeight - containerHeight;

        refList.current.scrollTo(0, _offset);
        latestScrollPosY.current = _offset;
      }

      setActiveIndex(_newActiveIndex);
    } else if (isEnterHotKey(event) && activeIndex !== -1) {
      event.stopPropagation();
      event.preventDefault();

      var _uiItem = listData && listData[activeIndex];

      if (_uiItem && typeof onItemClick === 'function') {
        var itemData = _uiItem.itemData;

        if (itemData) {
          onItemClick(itemData);
        }
      }
    }

    setTimeout(function () {
      isKeyDownTyping.current = false;
    }, 10);
  };

  var renderHeader = function renderHeader() {
    var advanceOption = props.advanceOption;
    if (!advanceOption) return null;
    var icon = advanceOption.icon,
        name = advanceOption.name,
        handleAdvanceSelect = advanceOption.onClick;
    var title = '';

    if (status !== EQuickInsertStatus.loading && listData && listData.length > 0) {
      title = headerTitle || defaultTitle;
    }

    return /*#__PURE__*/_createElement(HeaderWrapper, null, /*#__PURE__*/_createElement(HeaderTitle, {
      isShowTitle: isShowTitle
    }, title), /*#__PURE__*/_createElement(HeaderButton, {
      onClick: handleAdvanceSelect
    }, /*#__PURE__*/_createElement(IconWrapper, null, icon), /*#__PURE__*/_createElement(ButtonText, null, name)));
  };

  var renderList = function renderList() {
    var isEmpty = !listData || !listData.length;

    if (errorMsg) {
      return _EmptyWrapper || (_EmptyWrapper = /*#__PURE__*/_createElement(EmptyWrapper, null, /*#__PURE__*/_createElement(SpinErrorCard, {
        tip: errorMsg,
        icon: ErrorIcon
      })));
    }

    if (isEmpty) {
      return /*#__PURE__*/_createElement(EmptyWrapper, null, /*#__PURE__*/_createElement(ImageWrapper, {
        src: emptyUrl || EMPTY_IMG
      }), /*#__PURE__*/_createElement(EmptyText, null, /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: emptyMsg || 'we_ui_quick_insert_no_data'
      })));
    }

    return /*#__PURE__*/_createElement(ListWrapper, {
      className: "quick-insert-list",
      ref: refList,
      onScroll: handleListScroll,
      onMouseMove: handleMouseMove
    }, listData.map(function (item, index) {
      return renderRow(index, item.itemData);
    }));
  };

  var renderRow = function renderRow(index, dt) {
    if (!dt) {
      return null;
    }

    var onItemClick = props.onItemClick;

    if (typeof dt === 'string') {
      return /*#__PURE__*/_createElement(GroupTitle, {
        key: "group-title-" + index
      }, dt);
    } else {
      var insertData = dt;
      return /*#__PURE__*/_createElement(QuickInsertItem, {
        key: "list-item-" + index,
        active: index === activeIndex,
        onItemClick: onItemClick,
        data: insertData
      });
    }
  };

  var isLoading = status === EQuickInsertStatus.loading;
  var isSkeleton = status === EQuickInsertStatus.skeleton;
  var isLoadingMore = status === EQuickInsertStatus.loadMore;
  return /*#__PURE__*/_createElement(QuickInsertWrapper, {
    width: width,
    height: height
  }, renderHeader(), isSkeleton ? [157, 90, 127, 127, 127].map(function (width) {
    return SkeletonLoading(width);
  }) : isLoading ? /*#__PURE__*/_createElement(LoadingItem, {
    locale: locale
  }) : renderList(), isLoadingMore ? /*#__PURE__*/_createElement(LoadingItem, {
    locale: locale
  }) : null);
});