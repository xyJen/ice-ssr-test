var _LoadingNormal, _AvatarWrapper;

import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Avatar } from '..';
import { Tooltip } from "../tooltip";
import { LoadingNormal } from "../icons";
import { TranslateComp } from '@ali/we-util';
import { EInsertType, fileTypeKey2LargeIcon } from "./type";
import { ItemWrapper, ItemContent, ItemTitle, ItemDescription, EllipsisText, LoadingWrapper, LoadingText, MiddleEllipsisWrapper, AvatarWrapper, DescriptionLeft, DescriptionRight, Description, Skeleton } from "./styled"; // 描述信息最后显示的字符数

var DESCRIPTION_LAST_CHAR_COUNT = 10;
export var MiddleEllipsisText = /*#__PURE__*/React.memo(function (props) {
  // 文本容器的引用
  var refContainer = React.useRef(null); // prop属性

  var text = props.text,
      width = props.width,
      lastCharNum = props.lastCharNum; // state

  var _React$useState = React.useState(false),
      isTextOverflow = _React$useState[0],
      setTextOverflow = _React$useState[1];

  var _React$useState2 = React.useState(0),
      divideIndex = _React$useState2[0],
      setDivideIndex = _React$useState2[1];

  React.useEffect(function () {
    if (refContainer.current && text) {
      var rect = refContainer.current.getBoundingClientRect();
      var containerWidth = rect.width;
      var textWidth = refContainer.current.scrollWidth;

      if (containerWidth > 0 && textWidth > containerWidth) {
        setTextOverflow(true); // 一行展示不下时，中间省略，截取最后10个字符最后显示

        var lastLen = Math.min(text.length, lastCharNum);
        var diIndex = text.length - lastLen;
        setDivideIndex(diIndex);
      }
    }
  }, [text, width]);
  var text1 = (text == null ? void 0 : text.slice(0, divideIndex)) || '';
  var text2 = (text == null ? void 0 : text.slice(divideIndex)) || '';
  return /*#__PURE__*/_createElement(Tooltip, {
    title: text,
    disabled: !isTextOverflow
  }, /*#__PURE__*/_createElement(MiddleEllipsisWrapper, {
    width: width,
    ref: refContainer
  }, isTextOverflow ? /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(EllipsisText, null, text1), /*#__PURE__*/_createElement("span", null, text2)) : /*#__PURE__*/_createElement("span", null, text)));
});
export var QuickInsertItem = /*#__PURE__*/React.memo(function (props) {
  var _DescriptionLeft, _DescriptionRight;

  // Description的引用
  var refDescription = React.useRef(null); // const descriptionWidth = React.useRef<number>(0);

  var _React$useState3 = React.useState(0),
      descriptionWidth = _React$useState3[0],
      setDescriptionWidth = _React$useState3[1];

  React.useEffect(function () {
    if (refDescription.current) {
      var rect = refDescription.current.getBoundingClientRect();
      setDescriptionWidth(rect.width);
    }
  }, []);
  var data = props.data,
      active = props.active,
      onItemClick = props.onItemClick;
  var type = data.type,
      key = data.key,
      iconUrls = data.iconUrls,
      title = data.title,
      description = data.description,
      descriptionSupplement = data.descriptionSupplement;
  var nickName = type === EInsertType.Person ? data.nickName : ''; // 存在头像url并且第一个url不为空串

  var isNameAvatar = iconUrls && (iconUrls == null ? void 0 : iconUrls.length) > 0 && iconUrls[0];
  var handleClick = useCallback(function (e) {
    e == null ? void 0 : e.stopPropagation();

    if (typeof onItemClick === 'function') {
      onItemClick(data);
    }
  }, [data, onItemClick]); // 渲染文档icon

  var renderDocIcon = function renderDocIcon() {
    // todo
    var _ref = data,
        docType = _ref.docType;
    return /*#__PURE__*/_createElement(AvatarWrapper, null, /*#__PURE__*/_createElement("img", {
      style: {
        width: 32,
        height: 32
      },
      src: fileTypeKey2LargeIcon(docType)
    }));
  };

  React.useEffect(function () {
    if (descriptionSupplement && description) {
      var _span$parentNode;

      var span = document.createElement('span');
      var textWidth = span.offsetWidth;
      span.style.visibility = 'hidden';
      span.style.fontSize = '12px';
      span.style.display = 'inline-block';
      document.body.appendChild(span);

      if (typeof span.textContent !== 'undefined') {
        span.textContent = description;
      } else {
        span.innerText = description;
      }

      textWidth = span.clientWidth;
      setDescriptionWidth(textWidth);
      span == null ? void 0 : (_span$parentNode = span.parentNode) == null ? void 0 : _span$parentNode.removeChild(span); //删除节点
    }
  }, [title]);

  var renderSupplementDesc = function renderSupplementDesc() {
    return /*#__PURE__*/_createElement(Description, null, /*#__PURE__*/_createElement(Tooltip, {
      title: description,
      disabled: descriptionWidth <= 180
    }, _DescriptionLeft || (_DescriptionLeft = /*#__PURE__*/_createElement(DescriptionLeft, null, description, " "))), _DescriptionRight || (_DescriptionRight = /*#__PURE__*/_createElement(DescriptionRight, null, descriptionSupplement)));
  };

  return /*#__PURE__*/_createElement(ItemWrapper, {
    key: key,
    active: active,
    onClick: handleClick
  }, type === EInsertType.Document ? renderDocIcon() : /*#__PURE__*/_createElement(AvatarWrapper, null, /*#__PURE__*/_createElement(Avatar, {
    className: "avatar",
    size: "normal",
    url: isNameAvatar ? iconUrls : undefined,
    name: nickName
  })), /*#__PURE__*/_createElement(ItemContent, null, /*#__PURE__*/_createElement(ItemTitle, null, title), descriptionSupplement ? renderSupplementDesc() : /*#__PURE__*/_createElement(ItemDescription, {
    ref: refDescription
  }, /*#__PURE__*/_createElement(MiddleEllipsisText, {
    width: descriptionWidth,
    text: description,
    lastCharNum: DESCRIPTION_LAST_CHAR_COUNT
  }))));
});
export var LoadingItem = function LoadingItem(_ref2) {
  var locale = _ref2.locale;
  return /*#__PURE__*/_createElement(LoadingWrapper, null, _LoadingNormal || (_LoadingNormal = /*#__PURE__*/_createElement(LoadingNormal, {
    spin: true
  })), /*#__PURE__*/_createElement(LoadingText, null, /*#__PURE__*/_createElement(TranslateComp, {
    locale: locale,
    textKey: 'we_ui_quick_insert_loading'
  })));
};
export var SkeletonLoading = function SkeletonLoading(width) {
  return /*#__PURE__*/_createElement(ItemWrapper, {
    active: false
  }, _AvatarWrapper || (_AvatarWrapper = /*#__PURE__*/_createElement(AvatarWrapper, null, /*#__PURE__*/_createElement(Skeleton, {
    width: '32px',
    height: '32px',
    borderRadius: '4px'
  }))), /*#__PURE__*/_createElement(ItemContent, null, /*#__PURE__*/_createElement(Skeleton, {
    width: width + "px",
    height: '10px'
  })));
};