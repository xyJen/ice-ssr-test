import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Select // SelectOption as Option,
// ISelectProps,
} from "../../components/select";
import { commonLineMap } from "./common";
import { CommonLine } from "./commonLine";
import { TextSpan, OptionStyled, TriggerStyled } from "./styled";
import { classnames } from "../../utils";

var getDefaultLineTypeArray = function getDefaultLineTypeArray() {
  var typeArray = {};
  Object.keys(commonLineMap).forEach(function (key) {
    var lineProps = commonLineMap[key];
    var size = lineProps.defaultSize;
    typeArray[key] = {
      size: size,
      lineType: key
    };
  });
  return typeArray;
};

export var CommonLineSelect = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(CommonLineSelect, _React$PureComponent);

  function CommonLineSelect(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;

    _this.handleLineTypeChange = function (type) {
      _this.setState({
        innerLineType: type
      });

      var onLineTypeChange = _this.props.onLineTypeChange;

      if (onLineTypeChange) {
        onLineTypeChange(type);
      }
    };

    var innerLineType = props.lineType || props.defaultLineType || 'single';
    _this.state = {
      innerLineType: innerLineType,
      innerVisible: props.visible === undefined ? props.defaultVisible : props.visible
    };
    return _this;
  }

  CommonLineSelect.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, state) {
    var nextVisible = nextProps.visible;

    if (nextVisible !== undefined && nextVisible !== state.innerVisible) {
      return {
        innerVisible: nextVisible
      };
    }

    return null;
  };

  var _proto = CommonLineSelect.prototype;

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        selectedLineType = _this$props.lineType,
        lineTypeArray = _this$props.lineTypeArray,
        color = _this$props.color,
        overlayStyle = _this$props.overlayStyle,
        overlayClassName = _this$props.overlayClassName,
        optionWrapperStyle = _this$props.optionWrapperStyle,
        zIndex = _this$props.zIndex,
        style = _this$props.style,
        length = _this$props.length,
        optionText = _this$props.optionText,
        customTrigger = _this$props.customTrigger,
        bordered = _this$props.bordered,
        title = _this$props.title,
        onVisibleChange = _this$props.onVisibleChange,
        _this$props$selectabl = _this$props.selectable,
        selectable = _this$props$selectabl === void 0 ? true : _this$props$selectabl,
        className = _this$props.className,
        disabled = _this$props.disabled,
        getContainer = _this$props.getContainer,
        autoClose = _this$props.autoClose;
    var lineTypeMap = lineTypeArray || CommonLineSelect.lineTypes;
    var _this$state = this.state,
        innerLineType = _this$state.innerLineType,
        innerVisible = _this$state.innerVisible;
    var activeLineType = selectedLineType || innerLineType;
    var withText = !!optionText && typeof optionText === 'function';
    var activeLineProps = lineTypeMap[activeLineType];
    var getTrigger = typeof customTrigger === 'function' ? customTrigger : function () {
      return /*#__PURE__*/_createElement(TriggerStyled, null, withText && /*#__PURE__*/_createElement(TextSpan, null, activeLineProps ? optionText(activeLineProps) : ''), /*#__PURE__*/_createElement(CommonLine, {
        lineType: activeLineProps == null ? void 0 : activeLineProps.lineType,
        size: activeLineProps == null ? void 0 : activeLineProps.size,
        value: activeLineProps.value,
        color: color,
        length: length
      }));
    };

    var handleVisibleChange = function handleVisibleChange(e) {
      var visible = _this2.props.visible;
      if (onVisibleChange) onVisibleChange(e);

      if (visible === undefined) {
        _this2.setState({
          innerVisible: e
        });
      }
    };

    return /*#__PURE__*/_createElement(Select, {
      value: activeLineType,
      style: style,
      overlayStyle: overlayStyle,
      overlayClassName: overlayClassName,
      optionWrapperStyle: optionWrapperStyle // maxDropdownHeight={400}
      ,
      onChange: this.handleLineTypeChange,
      zIndex: zIndex,
      testid: "CommonLineSelect",
      renderTrigger: getTrigger,
      bordered: bordered,
      title: title,
      visible: innerVisible,
      onVisibleChange: handleVisibleChange,
      selectable: selectable,
      className: className,
      disabled: disabled,
      getContainer: getContainer,
      autoClose: autoClose
    }, Object.keys(lineTypeMap).map(function (key) {
      var lineProps = lineTypeMap[key];
      var lineType = lineProps.lineType,
          size = lineProps.size,
          value = lineProps.value;

      if (lineType === 'custom' && !value) {
        return /*#__PURE__*/_createElement(React.Fragment, null);
      }

      return /*#__PURE__*/_createElement(OptionStyled, {
        key: key,
        value: key,
        testid: key,
        className: classnames({
          'with-text': withText
        })
      }, withText && /*#__PURE__*/_createElement(TextSpan, null, "" + optionText(lineTypeMap[key])), /*#__PURE__*/_createElement(CommonLine, {
        lineType: lineType,
        size: size,
        color: color,
        length: length,
        value: value
      }));
    }));
  };

  return CommonLineSelect;
}(React.PureComponent);
CommonLineSelect.lineTypes = getDefaultLineTypeArray();
CommonLineSelect.defaultProps = {
  bordered: true,
  defaultVisible: false,
  disabled: false
};