import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import * as Lines from "./lines";
import { Select, SelectOption as Option } from "../../components/select"; // 注意：要确保这里的枚举值和lines中的组件名保持相同

export var LineType;

(function (LineType) {
  LineType["Thin"] = "Thin";
  LineType["Medium"] = "Medium";
  LineType["Dashed"] = "Dashed";
  LineType["Dotted"] = "Dotted";
  LineType["Thick"] = "Thick";
  LineType["Double"] = "Double";
  LineType["Hair"] = "Hair";
  LineType["MediumDashed"] = "MediumDashed";
  LineType["DashDot"] = "DashDot";
  LineType["MediumDashDot"] = "MediumDashDot";
  LineType["DashDotDot"] = "DashDotDot";
  LineType["MediumDashDotDot"] = "MediumDashDotDot";
  LineType["SlantedDashDot"] = "SlantedDashDot";
})(LineType || (LineType = {}));

export var LineSelect = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(LineSelect, _React$PureComponent);

  function LineSelect(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;

    _this.handleLineTypeChange = function (lineType) {
      _this.setState({
        currentLineType: lineType
      });

      var onLineTypeChange = _this.props.onLineTypeChange;

      if (onLineTypeChange) {
        onLineTypeChange(lineType);
      }
    };

    _this.getLinesList = function () {
      var lineTypes = _this.props.lineTypes;
      var renderLines = lineTypes !== undefined ? lineTypes : [];
      var lineComps = {};
      renderLines.forEach(function (lineTypItem) {
        if (Lines[lineTypItem]) {
          lineComps[lineTypItem] = Lines[lineTypItem];
        }
      });
      return lineComps;
    };

    var currentLineType = props.lineTypeValue ? props.lineTypeValue : LineType.Thin;
    _this.state = {
      currentLineType: currentLineType
    };
    return _this;
  }

  var _proto = LineSelect.prototype;

  _proto.render = function render() {
    var linesList = this.getLinesList();
    var _this$props = this.props,
        lineTypeValue = _this$props.lineTypeValue,
        color = _this$props.color,
        zIndex = _this$props.zIndex,
        disabled = _this$props.disabled;
    var currentLineType = this.state.currentLineType;
    var selectedValue = lineTypeValue || currentLineType;
    return /*#__PURE__*/_createElement(Select, {
      value: selectedValue,
      style: {
        width: 127
      },
      overlayStyle: {
        maxHeight: 400
      },
      onChange: this.handleLineTypeChange,
      zIndex: zIndex,
      disabled: disabled
    }, Object.keys(linesList).map(function (key) {
      var LineComp = linesList[key];
      return /*#__PURE__*/_createElement(Option, {
        key: key,
        value: key
      }, /*#__PURE__*/_createElement(LineComp, {
        color: color,
        width: 80
      }));
    }));
  };

  return LineSelect;
}(React.PureComponent);
LineSelect.defaultProps = {
  lineTypes: [LineType.Thin, LineType.Medium, LineType.Dashed, LineType.Dotted, LineType.Thick, LineType.Double, LineType.Hair, LineType.MediumDashed, LineType.DashDot, LineType.MediumDashDot, LineType.DashDotDot, LineType.MediumDashDotDot, LineType.SlantedDashDot],
  disabled: false
};