import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { LineBox } from "./styled";

/**
 * 每个svg图形只承载了最小可重复单元，通过重复迭代生成线
 * 根据总宽度和项目宽度，生成一个最小重复迭代的key值列表
 * @param {number} totalWidth 线条的总宽度
 * @param {number} unitWidth svg item的宽度
 */
function getCountkeys(totalWidth, unitWidth) {
  var count = Math.ceil(totalWidth / unitWidth);
  var keys = [];

  for (var i = 0; i < count; i += 1) {
    keys.push("svg-" + i);
  }

  return keys;
} // props 属性是否相同


function isPropsEqual(oldP, P) {
  return oldP.color === P.color && oldP.width === P.width;
} // 缓存虚拟dom提升性能


var linesCache = {};
export var Thin = function Thin(props) {
  var _rect;

  var cache = linesCache.thin;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color = props.color,
      color = _props$color === void 0 ? 'black' : _props$color,
      _props$width = props.width,
      width = _props$width === void 0 ? 120 : _props$width;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 8).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "8px",
      height: "2px",
      viewBox: "0 0 8 2",
      key: key
    }, _rect || (_rect = /*#__PURE__*/_createElement("rect", {
      fill: color,
      x: "0",
      y: "0",
      width: "8",
      height: "2"
    })));
  }));

  linesCache.thin = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var Medium = function Medium(props) {
  var _rect2;

  var cache = linesCache.medium;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color2 = props.color,
      color = _props$color2 === void 0 ? 'black' : _props$color2,
      _props$width2 = props.width,
      width = _props$width2 === void 0 ? 120 : _props$width2;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 8).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "12px",
      height: "4px",
      viewBox: "0 0 12 4",
      key: key
    }, _rect2 || (_rect2 = /*#__PURE__*/_createElement("rect", {
      fill: color,
      x: "0",
      y: "0",
      width: "12",
      height: "4"
    })));
  }));

  linesCache.medium = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var Dashed = function Dashed(props) {
  var _path;

  var cache = linesCache.dashed;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color3 = props.color,
      color = _props$color3 === void 0 ? 'black' : _props$color3,
      _props$width3 = props.width,
      width = _props$width3 === void 0 ? 120 : _props$width3;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 8).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "8px",
      height: "2px",
      viewBox: "0 0 8 2",
      key: key
    }, _path || (_path = /*#__PURE__*/_createElement("path", {
      d: "M0,0 L3,0 L3,2 L0,2 L0,0 Z M5,0 L8,0 L8,2 L5,2 L5,0 Z",
      fill: color
    })));
  }));

  linesCache.dashed = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var Dotted = function Dotted(props) {
  var _path2;

  var cache = linesCache.dotted;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color4 = props.color,
      color = _props$color4 === void 0 ? 'black' : _props$color4,
      _props$width4 = props.width,
      width = _props$width4 === void 0 ? 120 : _props$width4;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 8).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "8px",
      height: "2px",
      viewBox: "0 0 8 2",
      key: key
    }, _path2 || (_path2 = /*#__PURE__*/_createElement("path", {
      d: "M0,0 L2,0 L2,2 L0,2 L0,0 Z M6,0 L8,0 L8,2 L6,2 L6,0 Z",
      fill: color
    })));
  }));

  linesCache.dotted = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var Thick = function Thick(props) {
  var _rect3;

  var cache = linesCache.thick;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color5 = props.color,
      color = _props$color5 === void 0 ? 'black' : _props$color5,
      _props$width5 = props.width,
      width = _props$width5 === void 0 ? 120 : _props$width5;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 18).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "18px",
      height: "6px",
      viewBox: "0 0 18 6",
      key: key
    }, _rect3 || (_rect3 = /*#__PURE__*/_createElement("rect", {
      fill: color,
      x: "0",
      y: "0",
      width: "18",
      height: "6"
    })));
  }));

  linesCache.thick = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var Double = function Double(props) {
  var _path3;

  var cache = linesCache["double"];
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color6 = props.color,
      color = _props$color6 === void 0 ? 'black' : _props$color6,
      _props$width6 = props.width,
      width = _props$width6 === void 0 ? 120 : _props$width6;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 18).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "18px",
      height: "6px",
      viewBox: "0 0 18 6",
      key: key
    }, _path3 || (_path3 = /*#__PURE__*/_createElement("path", {
      d: "M0,0 L18,0 L18,2 L0,2 L0,0 Z M0,4 L18,4 L18,6 L0,6 L0,4 Z",
      fill: color
    })));
  }));

  linesCache["double"] = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var Hair = function Hair(props) {
  var _path4;

  var cache = linesCache.hair;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color7 = props.color,
      color = _props$color7 === void 0 ? 'black' : _props$color7,
      _props$width7 = props.width,
      width = _props$width7 === void 0 ? 120 : _props$width7;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 4).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "4px",
      height: "2px",
      viewBox: "0 0 4 2",
      key: key
    }, _path4 || (_path4 = /*#__PURE__*/_createElement("path", {
      d: "M0,0 L1,0 L1,2 L0,2 L0,0 Z M3,0 L4,0 L4,2 L3,2 L3,0 Z",
      fill: color
    })));
  }));

  linesCache.hair = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var MediumDashed = function MediumDashed(props) {
  var _path5;

  var cache = linesCache.mediumDashed;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color8 = props.color,
      color = _props$color8 === void 0 ? 'black' : _props$color8,
      _props$width8 = props.width,
      width = _props$width8 === void 0 ? 120 : _props$width8;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 22).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "22px",
      height: "4px",
      viewBox: "0 0 22 4",
      key: key
    }, _path5 || (_path5 = /*#__PURE__*/_createElement("path", {
      d: "M0,0 L9,0 L9,4 L0,4 L0,0 Z M13,0 L22,0 L22,4 L13,4 L13,0 Z",
      fill: color
    })));
  }));

  linesCache.mediumDashed = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var DashDot = function DashDot(props) {
  var _path6;

  var cache = linesCache.dashDot;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color9 = props.color,
      color = _props$color9 === void 0 ? 'black' : _props$color9,
      _props$width9 = props.width,
      width = _props$width9 === void 0 ? 120 : _props$width9;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 28).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "28px",
      height: "2px",
      viewBox: "0 0 28 2",
      key: key
    }, _path6 || (_path6 = /*#__PURE__*/_createElement("path", {
      d: "M12,0 L16,0 L16,2 L12,2 L12,0 Z M20,0 L28,0 L28,2 L20,2 L20,0 Z M0,0 L8,0 L8,2 L0,2 L0,0 Z",
      fill: color
    })));
  }));

  linesCache.dashDot = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var MediumDashDot = function MediumDashDot(props) {
  var _path7;

  var cache = linesCache.mediumDashDot;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color10 = props.color,
      color = _props$color10 === void 0 ? 'black' : _props$color10,
      _props$width10 = props.width,
      width = _props$width10 === void 0 ? 120 : _props$width10;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 30).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "30px",
      height: "4px",
      viewBox: "0 0 30 4",
      key: key
    }, _path7 || (_path7 = /*#__PURE__*/_createElement("path", {
      d: "M0,0 L9,0 L9,4 L0,4 L0,0 Z M13,0 L17,0 L17,4 L13,4 L13,0 Z M21,0 L30,0 L30,4 L21,4 L21,0 Z",
      fill: color
    })));
  }));

  linesCache.mediumDashDot = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var DashDotDot = function DashDotDot(props) {
  var _path8;

  var cache = linesCache.dashDotDot;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color11 = props.color,
      color = _props$color11 === void 0 ? 'black' : _props$color11,
      _props$width11 = props.width,
      width = _props$width11 === void 0 ? 120 : _props$width11;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 48).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "48px",
      height: "2px",
      viewBox: "0 0 48 2",
      key: key
    }, _path8 || (_path8 = /*#__PURE__*/_createElement("path", {
      d: "M27,0 L33,0 L33,2 L27,2 L27,0 Z M15,0 L21,0 L21,2 L15,2 L15,0 Z M0,0 L9,0 L9,2 L0,2 L0,0 Z M39,0 L48,0 L48,2 L39,2 L39,0 Z",
      fill: color
    })));
  }));

  linesCache.dashDotDot = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var MediumDashDotDot = function MediumDashDotDot(props) {
  var _path9;

  var cache = linesCache.mediumDashDotDot;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color12 = props.color,
      color = _props$color12 === void 0 ? 'black' : _props$color12,
      _props$width12 = props.width,
      width = _props$width12 === void 0 ? 120 : _props$width12;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 48).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "48px",
      height: "4px",
      viewBox: "0 0 48 4",
      key: key
    }, _path9 || (_path9 = /*#__PURE__*/_createElement("path", {
      d: "M27,0 L33,0 L33,4 L27,4 L27,0 Z M15,0 L21,0 L21,4 L15,4 L15,0 Z M0,0 L9,0 L9,4 L0,4 L0,0 Z M39,0 L48,0 L48,4 L39,4 L39,0 Z",
      fill: color
    })));
  }));

  linesCache.mediumDashDotDot = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export var SlantedDashDot = function SlantedDashDot(props) {
  var _path10;

  var cache = linesCache.slantedDashDot;
  if (cache && isPropsEqual(cache.props, props)) return cache.vnode;
  var _props$color13 = props.color,
      color = _props$color13 === void 0 ? 'black' : _props$color13,
      _props$width13 = props.width,
      width = _props$width13 === void 0 ? 120 : _props$width13;

  var vnode = /*#__PURE__*/_createElement(LineBox, {
    style: {
      width: width
    }
  }, getCountkeys(width, 32).map(function (key) {
    return /*#__PURE__*/_createElement("svg", {
      width: "32px",
      height: "4px",
      viewBox: "0 0 32 4",
      key: key
    }, _path10 || (_path10 = /*#__PURE__*/_createElement("path", {
      d: "M15,0 L21,0 L17,4 L11,4 L15,0 Z M0,0 L12,0 L8,4 L0,4 L0,0 Z M24,0 L32,0 L32,4 L20,4 L24,0 Z",
      fill: color
    })));
  }));

  linesCache.slantedDashDot = {
    props: _extends({}, props),
    vnode: vnode
  };
  return vnode;
};
export default {
  Thin: Thin,
  Medium: Medium,
  Dashed: Dashed,
  Dotted: Dotted,
  Thick: Thick,
  Double: Double,
  Hair: Hair,
  MediumDashed: MediumDashed,
  DashDot: DashDot,
  MediumDashDot: MediumDashDot,
  DashDotDot: DashDotDot,
  MediumDashDotDot: MediumDashDotDot,
  SlantedDashDot: SlantedDashDot
};