import React, { memo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
var LineWrapper = /*#__PURE__*/styled.div(["display:flex;flex-direction:column;justify-content:flex-start;padding:0px;margin:0px;width:100%;span{width:100%;}"]);
var singleUnits = [];
var defaultColor = ['black', 'transparent'];

function getLinearGradientSteps(units, colors, makeUpForRepeat, start) {
  if (start === void 0) {
    start = 0;
  }

  var currenPosition = start;
  var res = '';
  var maxIndex = units.length - 1;

  if (makeUpForRepeat && start > 0) {
    res += "transparent 0px, transparent " + start + "px,";
  }

  for (var i = 0; i < maxIndex; i++) {
    var nextPosition = currenPosition + units[i];
    res += colors[i] + " " + currenPosition + "px, " + colors[i] + " " + nextPosition + "px,";
    currenPosition = nextPosition;
  }

  var endPosition = currenPosition + units[maxIndex];
  res += colors[maxIndex] + " " + currenPosition + "px, " + colors[maxIndex] + " " + endPosition + "px";
  return [res, endPosition];
}

function getLineStyle(params) {
  var _params$units = params.units,
      units = _params$units === void 0 ? singleUnits : _params$units,
      _params$colors = params.colors,
      colors = _params$colors === void 0 ? defaultColor : _params$colors,
      _params$repeatFrom = params.repeatFrom,
      repeatFrom = _params$repeatFrom === void 0 ? 0 : _params$repeatFrom,
      _params$indent = params.indent,
      indent = _params$indent === void 0 ? 0 : _params$indent,
      _params$size = params.size,
      size = _params$size === void 0 ? 1 : _params$size,
      angle = params.angle;
  var direction = angle ? angle + "deg" : 'to right';
  var style = {};
  style.height = size;

  if (units.length === 0 || colors.length === 0) {
    return style;
  }

  if (units.length === 1) {
    style.backgroundColor = colors[0];
    return style;
  }

  var renderColors = colors.concat();

  while (renderColors.length < units.length) {
    renderColors = renderColors.concat(renderColors);
  }

  var startColors = renderColors.slice(0, repeatFrom);
  var repeatColors = renderColors.slice(repeatFrom);
  var startUnits = units.slice(0, repeatFrom);
  var repeatUnits = units.slice(repeatFrom);
  var startLinear = '';
  var repeatLinear = '';
  var repeatStartPosition = indent;

  if (startUnits.length !== 0) {
    var _getLinearGradientSte = getLinearGradientSteps(startUnits, startColors, true, indent),
        steps = _getLinearGradientSte[0],
        endPosition = _getLinearGradientSte[1];

    startLinear = "linear-gradient(" + direction + "," + steps + ")";
    repeatStartPosition = endPosition;
  }

  if (repeatUnits.length !== 0) {
    var _getLinearGradientSte2 = getLinearGradientSteps(repeatUnits, repeatColors, false, repeatStartPosition),
        _steps = _getLinearGradientSte2[0];

    repeatLinear = "repeating-linear-gradient(" + direction + "," + _steps + ")";
  }

  var both = startLinear && repeatLinear;
  var linear = both ? startLinear + ", " + repeatLinear : startLinear + " " + repeatLinear;
  style.backgroundImage = linear;
  return style;
}

export var CustomLine = /*#__PURE__*/memo(function (props) {
  var customLines = props.value,
      width = props.width;
  return /*#__PURE__*/_createElement(LineWrapper, {
    style: width ? {
      width: width
    } : undefined
  }, customLines.map(function (customLine, i) {
    return /*#__PURE__*/_createElement("span", {
      key: i,
      style: getLineStyle(customLine)
    });
  }));
});