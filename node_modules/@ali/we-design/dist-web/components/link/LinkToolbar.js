var _WebBetaNormal, _EditorBorderBetaNorm, _CopyNormal, _DeleteNormal;

/* eslint-disable max-lines-per-function */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useTranslate } from '@ali/we-util';
import { message } from "../../components/message";
import { Tooltip } from "../../components/tooltip";
import { WebBetaNormal, EditorBorderBetaNormal, CopyNormal, DeleteNormal } from "../../components/icons";
import { copyToClipboard, throttle } from "../../utils";
import { ToolbarWrapper, LinkHref, LinkHrefWrapper, ToolbarIconWrapper } from "./styled";
export var LinkToolbar = /*#__PURE__*/React.memo(function (props) {
  var href = props.href,
      onEdit = props.onEdit,
      onRemove = props.onRemove,
      onOpenLink = props.onOpenLink,
      onHide = props.onHide,
      _props$onCopied = props.onCopied,
      onCopied = _props$onCopied === void 0 ? throttle(function () {
    return message.success(t('we_ui_link_toolbar_copied'));
  }, 3000) : _props$onCopied,
      locale = props.locale,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      _props$readOnly = props.readOnly,
      readOnly = _props$readOnly === void 0 ? false : _props$readOnly;
  var t = useTranslate(locale);
  var handleVisit = React.useCallback(function (event) {
    event.preventDefault();

    if (event.button !== 2) {
      onOpenLink(href);
    }
  }, [href, onOpenLink]);
  var handleCopy = React.useCallback(function (event) {
    event.preventDefault();
    copyToClipboard(href, onCopied);
  }, [href, onCopied]);
  var handleRemove = React.useCallback(function (event) {
    event.preventDefault();
    onRemove();
  }, [onRemove]);
  React.useEffect(function () {
    var handleKeyDown = function handleKeyDown(event) {
      var key = event.key.toLowerCase();

      if (key.toLowerCase() === 'escape' || event.keyCode === 27) {
        event.preventDefault(); // ESC 退出

        if (onHide) {
          onHide();
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return function () {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [onHide]);
  return /*#__PURE__*/_createElement(ToolbarWrapper, {
    "data-testid": "link-toolbar",
    style: style
  }, _WebBetaNormal || (_WebBetaNormal = /*#__PURE__*/_createElement(WebBetaNormal, null)), /*#__PURE__*/_createElement(LinkHrefWrapper, null, /*#__PURE__*/_createElement(Tooltip, {
    title: t('we_ui_link_open_link')
  }, /*#__PURE__*/_createElement(LinkHref, {
    onMouseDown: handleVisit,
    "data-testid": "link-toolbar-visit"
  }, href))), !readOnly && /*#__PURE__*/_createElement(Tooltip, {
    title: t('we_ui_link_toolbar_edit')
  }, /*#__PURE__*/_createElement(ToolbarIconWrapper, {
    "data-testid": "link-toolbar-edit",
    onClick: onEdit
  }, _EditorBorderBetaNorm || (_EditorBorderBetaNorm = /*#__PURE__*/_createElement(EditorBorderBetaNormal, null)))), /*#__PURE__*/_createElement(Tooltip, {
    title: t('we_ui_link_toolbar_copy')
  }, /*#__PURE__*/_createElement(ToolbarIconWrapper, {
    "data-testid": "link-toolbar-copy",
    onClick: handleCopy
  }, _CopyNormal || (_CopyNormal = /*#__PURE__*/_createElement(CopyNormal, null)))), !readOnly && /*#__PURE__*/_createElement(Tooltip, {
    title: t('we_ui_link_delete')
  }, /*#__PURE__*/_createElement(ToolbarIconWrapper, {
    "data-testid": "link-toolbar-remove",
    onClick: handleRemove
  }, _DeleteNormal || (_DeleteNormal = /*#__PURE__*/_createElement(DeleteNormal, null)))));
});