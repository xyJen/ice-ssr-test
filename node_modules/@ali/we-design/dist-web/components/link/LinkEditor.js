var _DeleteNormal;

import React, { useCallback, useRef, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { DeleteNormal } from "../../components/icons";
import { useTranslate } from '@ali/we-util';
import { EditorWrapper, EditorContent, EditorFooter, ItemInput, SaveButton, RemoveButton } from "./styled";
// eslint-disable-next-line max-lines-per-function
export var LinkEditor = /*#__PURE__*/React.memo(function (props) {
  var defaultHref = props.defaultHref,
      defaultText = props.defaultText,
      href = props.href,
      onHrefChange = props.onHrefChange,
      text = props.text,
      onTextChange = props.onTextChange,
      onHide = props.onHide,
      locale = props.locale,
      onSave = props.onSave,
      onRemove = props.onRemove,
      onFocusedLinkEditor = props.onFocusedLinkEditor,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style;
  var t = useTranslate(locale);

  var _React$useState = React.useState(defaultHref),
      innerHref = _React$useState[0],
      setInnerHref = _React$useState[1];

  var _React$useState2 = React.useState(defaultText),
      innerText = _React$useState2[0],
      setInnerText = _React$useState2[1];

  var inputFocused = React.useRef(false);
  var save = React.useCallback(function () {
    var currentText = text || innerText || '';
    var currentHref = href || innerHref || '';
    var trimedText = currentText.trim();
    var trimedHref = currentHref.trim();

    if (trimedText.length || trimedHref.length) {
      onSave(trimedText, trimedHref);
    }

    if (onHide) {
      onHide();
    }
  }, [innerText, innerHref, onSave]);
  var handleKeyDown = useCallback(function (e) {
    var event = e.nativeEvent;
    event.stopPropagation();
    var key = event.key.toLowerCase();

    if (event.isComposing) {
      return;
    }

    if (key.toLowerCase() === 'escape' || event.keyCode === 27) {
      event.preventDefault(); // ESC 退出

      if (onHide) {
        onHide();
      }
    } else if ((key === 'enter' || event.keyCode === 13) && inputFocused.current) {
      // Enter 保存
      event.preventDefault();
      save();
    }
  }, [save]);
  var handleHrefChange = React.useCallback(function (e) {
    var textValue = e.target.value;

    if (onHrefChange) {
      // 受控模式
      onHrefChange(textValue);
    } else {
      setInnerHref(textValue);
    }
  }, []);
  var handleTextChange = React.useCallback(function (e) {
    var hrefValue = e.target.value;

    if (onTextChange) {
      onTextChange(hrefValue);
    } else {
      setInnerText(hrefValue);
    }
  }, []);
  var handleSave = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    save();
  }, [save]);
  var handleRemove = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    setInnerHref('');
    onRemove();
  }, [onRemove]);
  var handleFocus = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    inputFocused.current = true;

    if (onFocusedLinkEditor) {
      onFocusedLinkEditor();
    }
  }, []);
  var handleBlur = React.useCallback(function () {
    inputFocused.current = false;
  }, []);
  var currentText = text || innerText;
  var currentHref = href || innerHref;
  var hrefRef = useRef();
  useEffect(function () {
    if (hrefRef.current) {
      hrefRef.current.focus();
    }
  }, []);
  return /*#__PURE__*/_createElement(EditorWrapper, {
    "data-testid": "link-editor",
    contentEditable: false,
    style: style
  }, /*#__PURE__*/_createElement(EditorContent, null, /*#__PURE__*/_createElement(ItemInput, null, /*#__PURE__*/_createElement("label", {
    htmlFor: "text"
  }, t('we_ui_link_edit_text')), /*#__PURE__*/_createElement("input", {
    name: "text",
    type: "text",
    value: currentText,
    onChange: handleTextChange,
    onFocus: handleFocus,
    onBlur: handleBlur,
    autoComplete: "off",
    onKeyDown: handleKeyDown
  })), /*#__PURE__*/_createElement(ItemInput, null, /*#__PURE__*/_createElement("label", {
    htmlFor: "href"
  }, t('we_ui_link_edit_link')), /*#__PURE__*/_createElement("input", {
    name: "href",
    type: "text",
    value: currentHref,
    onChange: handleHrefChange,
    onFocus: handleFocus,
    onBlur: handleBlur,
    autoComplete: "off",
    ref: hrefRef,
    onKeyDown: handleKeyDown
  }))), /*#__PURE__*/_createElement(EditorFooter, null, /*#__PURE__*/_createElement(RemoveButton, {
    onMouseDown: handleRemove,
    "data-testid": "link-editor-remove"
  }, _DeleteNormal || (_DeleteNormal = /*#__PURE__*/_createElement(DeleteNormal, null)), /*#__PURE__*/_createElement("span", {
    className: "text"
  }, t('we_ui_link_delete'))), /*#__PURE__*/_createElement(SaveButton, {
    onMouseDown: handleSave,
    "data-testid": "link-editor-save"
  }, /*#__PURE__*/_createElement("span", {
    className: "text"
  }, t('we_ui_link_save')))));
});