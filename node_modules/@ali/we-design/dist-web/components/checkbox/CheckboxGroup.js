import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { CheckboxGroupWrap } from "./styled";
import useControlledValue from "../../hooks/useControlledValue";
import { CheckboxContext } from "./CheckboxContext";
import { Checkbox } from "./Checkbox";
var CheckboxGroup = /*#__PURE__*/React.memo(function (props) {
  var children = props.children,
      disabled = props.disabled,
      onChange = props.onChange,
      options = props.options,
      testid = props.testid;

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];
  /**
   * 选中切换
   *
   * @param {string} e
   * @return {void}
   */


  var handleToggleValue = useCallback(function (e) {
    var newValue = [].concat(value);
    var changed = false;
    var index = newValue.indexOf(e.value);

    if (e.checked && index === -1) {
      changed = true;
      newValue.push(e.value);
    } else if (!e.checked && index !== -1) {
      changed = true;
      newValue.splice(index, 1);
    }

    if (changed) {
      if (onChange) {
        onChange(newValue);
      }

      setValue(newValue);
    }
  }, [onChange, value, setValue]);
  /**
   * 透传给Checkbox组件的属性
   *
   * @return {ICheckboxContext} context
   */

  var provider = useMemo(function () {
    return {
      disabled: !!disabled,
      onToggleValue: handleToggleValue,
      checkedValues: value,
      testid: testid
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [disabled, handleToggleValue, value, testid]);
  var optionsNode = useMemo(function () {
    return (options || []).map(function (option) {
      var item = typeof option === 'string' ? {
        value: option,
        label: option
      } : option;
      return /*#__PURE__*/_createElement(Checkbox, {
        key: item.value,
        value: item.value,
        disabled: item.disabled
      }, item.label);
    });
  }, [options]);
  return /*#__PURE__*/_createElement(CheckboxGroupWrap, {
    "data-testid": testid ? "CheckboxGroup-" + testid : undefined
  }, /*#__PURE__*/_createElement(CheckboxContext.Provider, {
    value: provider
  }, options ? optionsNode : children));
});
CheckboxGroup.defaultProps = {
  defaultValue: []
};
CheckboxGroup.displayName = 'CheckboxGroup';
export { CheckboxGroup };