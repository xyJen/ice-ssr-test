import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import SketchPicker from "../color-picker/sketch";
import colorObj2String from "./utils/colorObj2String";
import { useClickOuterRef } from "../../hooks";
import { CustomColorPicker } from "./styled";
import EColorPanelRole from "./role";
var CUSTOM_PANEL_TRIGGER_SELECTOR = '[data-testid="custom-color-trigger"]';
var CUSTOM_PANEL_WIDTH = 225;

var CustomPanel = function CustomPanel(props) {
  var color = props.color,
      onColorChange = props.onColorChange,
      onVisibleChange = props.onVisibleChange,
      containerRef = props.containerRef;

  var handleClickOuter = function handleClickOuter(event) {
    // 点击 trigger 时不关闭
    var ele = event.target;

    if (ele.closest(CUSTOM_PANEL_TRIGGER_SELECTOR)) {
      return;
    }

    onVisibleChange(false);
  };

  var customPanelRef = useClickOuterRef(handleClickOuter);

  var blockEvent = function blockEvent(e) {
    e.stopPropagation();
    e.preventDefault();
  };

  var handleChange = function handleChange(colorObj) {
    var color = colorObj2String(colorObj);

    if (onColorChange) {
      onColorChange(color);
    }
  };

  var offsetStyles = useMemo(function () {
    var colorPanel = containerRef.current;

    if (colorPanel === null) {
      return {};
    }

    var _colorPanel$getBoundi = colorPanel.getBoundingClientRect(),
        left = _colorPanel$getBoundi.left,
        width = _colorPanel$getBoundi.width;

    var rightSpace = window.innerWidth - left - width;

    if (rightSpace > CUSTOM_PANEL_WIDTH) {
      return {
        left: '100%',
        // 使用透明边框模拟 margin
        // 解决某些情况下 hover 到 margin 导致弹窗关闭的问题
        borderLeft: '3px solid transparent'
      };
    } else {
      return {
        // 当左侧也不够展开时紧邻左侧边缘展开
        left: "-" + Math.min(left, CUSTOM_PANEL_WIDTH) + "px",
        borderRight: '3px solid transparent'
      };
    }
  }, [containerRef]);
  return /*#__PURE__*/_createElement(CustomColorPicker, {
    onClick: blockEvent,
    style: offsetStyles,
    ref: customPanelRef,
    "data-role": EColorPanelRole.customColor
  }, /*#__PURE__*/_createElement(SketchPicker, {
    color: color,
    onChange: handleChange
  }));
};

export default CustomPanel;