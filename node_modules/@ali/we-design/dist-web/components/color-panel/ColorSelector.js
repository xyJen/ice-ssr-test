import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

var _CustomColorIcon;

import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { debounce } from "lodash-es";
import ColorMatrix from "./ColorMatrix";
import CustomColorIcon from "./CustomColorIcon";
import { SelectorWrapper, SelectorTitle, SelectorHeader, SelectorIconWrapper } from "./styled";
import { isMobile } from "../../utils/dom";

var ColorSelector = function ColorSelector(props) {
  var title = props.title,
      setCustomPanelVisible = props.setCustomPanelVisible,
      setCustomColor = props.setCustomColor,
      setCustomClickHandler = props.setCustomClickHandler,
      shouldShowPreview = props.shouldShowPreview,
      enableCustomColor = props.enableCustomColor,
      triggerKey = props.triggerKey,
      setTriggerKey = props.setTriggerKey,
      customPanelVisible = props.customPanelVisible,
      rest = _objectWithoutPropertiesLoose(props, ["title", "setCustomPanelVisible", "setCustomColor", "setCustomClickHandler", "shouldShowPreview", "enableCustomColor", "triggerKey", "setTriggerKey", "customPanelVisible"]);

  var currentColors = rest.currentColors,
      selectedKey = rest.selectedKey,
      onClick = rest.onClick;

  var toggleCustomPanel = function toggleCustomPanel() {
    if (isMobile) {
      return;
    } // 多个 trigger 控制同一个 panel, key 相同时取反 visible, 否则更新 panel


    if (triggerKey === selectedKey) {
      return setCustomPanelVisible(function (visible) {
        return !visible;
      });
    }

    setCustomColor(currentColors[selectedKey] || '');

    if (onClick) {
      setCustomClickHandler(function () {
        return debounce(onClick, 30);
      });
    }

    setCustomPanelVisible(true);
    setTriggerKey(selectedKey);
  };

  var isTriggerActive = useMemo(function () {
    return customPanelVisible && triggerKey === selectedKey;
  }, [customPanelVisible, triggerKey, selectedKey]);
  return /*#__PURE__*/_createElement(SelectorWrapper, null, /*#__PURE__*/_createElement(SelectorHeader, null, /*#__PURE__*/_createElement(SelectorTitle, null, title), enableCustomColor && /*#__PURE__*/_createElement(SelectorIconWrapper, {
    onClick: toggleCustomPanel,
    active: isTriggerActive,
    "data-testid": 'custom-color-trigger'
  }, _CustomColorIcon || (_CustomColorIcon = /*#__PURE__*/_createElement(CustomColorIcon, null)))), /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(ColorMatrix, rest)));
};

export default ColorSelector;