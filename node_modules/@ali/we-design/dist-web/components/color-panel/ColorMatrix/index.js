var _NoColorIcon, _ColorSelectedIcon, _MoreIconWrapper;

/* eslint-disable max-lines-per-function */
import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { FontColorIcon, NoColorIcon, ColorSelectedIcon, FontBgColorIcon } from "./icons";
import { Container, MatrixWrapper, MoreIconWrapper } from "./styled";
import { NO_COLOR } from "../constants";
import { EColorType } from "../types";
import MoreColorIcon from "./icons/MoreColorIcon";
import ColorBox from "./ColorBox";
var DEFAULT_COLUMN = 10;

var ColorMatrix = function ColorMatrix(props) {
  var colorType = props.colorType,
      selectedKey = props.selectedKey,
      colors = props.colors,
      currentColors = props.currentColors,
      onClick = props.onClick,
      _props$defaultColor = props.defaultColor,
      defaultColor = _props$defaultColor === void 0 ? colors[0] : _props$defaultColor,
      showMoreIcon = props.showMoreIcon,
      _props$column = props.column,
      column = _props$column === void 0 ? DEFAULT_COLUMN : _props$column,
      isFirstRowDoubleGap = props.isFirstRowDoubleGap,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave;
  var currentColor = currentColors[selectedKey];
  var handleClick = useCallback(function (e) {
    if (typeof onClick !== 'function') {
      return;
    }

    var colorBox = e.currentTarget;
    var color = colorBox.getAttribute('color');

    if (color === currentColor) {
      // 点击已选中的颜色， 恢复默认颜色
      return onClick(defaultColor);
    }

    onClick(color);
  }, [currentColor, onClick]);

  var renderColorBoxContent = function renderColorBoxContent(color) {
    // 内容为 A 的色块
    if (colorType === EColorType.font) {
      return /*#__PURE__*/_createElement(FontColorIcon, {
        color: color
      });
    }

    if (colorType === EColorType.fontBackground) {
      var isSelected = String(color) === currentColor;
      return isSelected ? /*#__PURE__*/_createElement(ColorSelectedIcon, {
        color: color
      }) : /*#__PURE__*/_createElement(FontBgColorIcon, {
        color: color
      });
    } // 内容为清除线的色块


    if (color === NO_COLOR) {
      return _NoColorIcon || (_NoColorIcon = /*#__PURE__*/_createElement(NoColorIcon, null));
    } // 内容为 ✅ 的色块


    if (color === currentColor) {
      // 背景色选中时需要处理反色
      return colorType === EColorType.background ? /*#__PURE__*/_createElement(ColorSelectedIcon, {
        color: color
      }) : _ColorSelectedIcon || (_ColorSelectedIcon = /*#__PURE__*/_createElement(ColorSelectedIcon, null));
    }

    return null;
  };

  var handleMouseEnter = function handleMouseEnter(color) {
    if (typeof onMouseEnter === 'function') {
      onMouseEnter(colorType, color);
    }
  };

  return /*#__PURE__*/_createElement(Container, null, /*#__PURE__*/_createElement(MatrixWrapper, {
    column: column,
    isFirstRowDoubleGap: isFirstRowDoubleGap,
    onMouseLeave: onMouseLeave
  }, colors.map(function (color, index) {
    return /*#__PURE__*/_createElement(ColorBox, {
      colorType: colorType,
      key: color + "_" + index,
      color: color || defaultColor,
      isSelected: String(color) === currentColor,
      onClick: handleClick,
      onMouseEnter: function onMouseEnter() {
        return handleMouseEnter(color);
      }
    }, renderColorBoxContent(color));
  })), showMoreIcon && (_MoreIconWrapper || (_MoreIconWrapper = /*#__PURE__*/_createElement(MoreIconWrapper, null, /*#__PURE__*/_createElement(MoreColorIcon, null)))));
};

export default ColorMatrix;