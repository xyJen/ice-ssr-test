import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable max-lines-per-function */

/* eslint-disable @typescript-eslint/no-shadow */
import React, { useState, useRef, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useTranslate } from '@ali/we-util';
import ColorSelector from "./ColorSelector";
import CustomPanel from "./CustomPanel";
import ExtraCheckbox from "./ExtraCheckbox";
import MoreColorPanel from "./MoreColorPanel";
import ColorPreview from "./ColorPreview";
import isDark from "./utils/isDark";
import { PickerWrapper, ResetButton } from "./styled";
import { EColorType } from "./types";
import { DEFAULT_PREVIEW_STATE, COLOR_SELECTED_KEY, BG_SELECTED_KEY, DEFAULT_FONT_COLOR, DEFAULT_BG_COLOR, COULD_SHOW_TIP_COLORS } from "./constants";
import EColorPanelRole from "./role";

var ColorPanelCore = function ColorPanelCore(props) {
  var t = useTranslate('');
  var _props$colorPanelLayo = props.colorPanelLayout,
      colorPanelLayout = _props$colorPanelLayo === void 0 ? [] : _props$colorPanelLayo,
      _props$checkboxLayout = props.checkboxLayout,
      checkboxLayout = _props$checkboxLayout === void 0 ? [] : _props$checkboxLayout,
      _props$currentColors = props.currentColors,
      currentColors = _props$currentColors === void 0 ? {} : _props$currentColors,
      _props$enableMoreButt = props.enableMoreButton,
      enableMoreButton = _props$enableMoreButt === void 0 ? false : _props$enableMoreButt,
      renderMorePanel = props.renderMorePanel,
      _props$enableResetBut = props.enableResetButton,
      enableResetButton = _props$enableResetBut === void 0 ? false : _props$enableResetBut,
      onResetButtonClick = props.onResetButtonClick,
      resetButtonTitle = props.resetButtonTitle,
      _props$isFirstRowDoub = props.isFirstRowDoubleGap,
      isFirstRowDoubleGap = _props$isFirstRowDoub === void 0 ? false : _props$isFirstRowDoub,
      _props$role = props.role,
      role = _props$role === void 0 ? '' : _props$role,
      _props$shouldShowPrev = props.shouldShowPreview,
      shouldShowPreview = _props$shouldShowPrev === void 0 ? false : _props$shouldShowPrev,
      onCustomVisibleChange = props.onCustomVisibleChange,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave;

  var _useState = useState(DEFAULT_PREVIEW_STATE),
      previewState = _useState[0],
      setPreviewState = _useState[1];

  var _useState2 = useState(false),
      customPanelVisible = _useState2[0],
      setCustomPanelVisible = _useState2[1];

  var _useState3 = useState(''),
      customColor = _useState3[0],
      setCustomColor = _useState3[1];

  var _useState4 = useState(function () {}),
      customClickHandler = _useState4[0],
      setCustomClickHandler = _useState4[1];

  var _useState5 = useState(''),
      triggerKey = _useState5[0],
      setTriggerKey = _useState5[1];

  var colorPanelRef = useRef(null);
  useEffect(function () {
    onCustomVisibleChange && onCustomVisibleChange(customPanelVisible);
  }, [customPanelVisible]);

  var renderColorSelector = function renderColorSelector(colorPanelLayout, currentColors) {
    return /*#__PURE__*/_createElement(React.Fragment, null, colorPanelLayout.map(function (layoutItem) {
      return /*#__PURE__*/_createElement(ColorSelector, _extends({
        key: layoutItem.title
      }, layoutItem, {
        currentColors: currentColors,
        isFirstRowDoubleGap: isFirstRowDoubleGap,
        onMouseEnter: handleMouseEnterPreview,
        onMouseLeave: handleMouseLeavePreview,
        customPanelVisible: customPanelVisible,
        setCustomPanelVisible: setCustomPanelVisible,
        setCustomColor: setCustomColor,
        setCustomClickHandler: setCustomClickHandler,
        triggerKey: triggerKey,
        setTriggerKey: setTriggerKey,
        shouldShowPreview: shouldShowPreview
      }));
    }), customPanelVisible && renderCustomPanel());
  };

  var renderCustomPanel = function renderCustomPanel() {
    var handleCustomColorChange = function handleCustomColorChange(color) {
      setCustomColor(color);
      customClickHandler(color);
    };

    var handleCustomVisibleChange = function handleCustomVisibleChange(visible) {
      setCustomPanelVisible(visible);

      if (onCustomVisibleChange) {
        onCustomVisibleChange(visible);
      }
    };

    return /*#__PURE__*/_createElement(CustomPanel, {
      color: customColor,
      visible: customPanelVisible,
      onColorChange: handleCustomColorChange,
      onVisibleChange: handleCustomVisibleChange,
      containerRef: colorPanelRef
    });
  };

  var renderExtraCheckboxes = function renderExtraCheckboxes(checkboxLayout) {
    return checkboxLayout.map(function (extraCheckbox) {
      return /*#__PURE__*/_createElement(ExtraCheckbox, _extends({
        key: extraCheckbox.title
      }, extraCheckbox));
    });
  };

  var renderMoreColorPanel = function renderMoreColorPanel() {
    if (typeof renderMorePanel !== 'function') {
      return null;
    }

    var morePanelContent = renderMorePanel();
    return /*#__PURE__*/_createElement(MoreColorPanel, {
      morePanelContent: morePanelContent
    });
  };

  var renderPreviewBlock = function renderPreviewBlock() {
    var isShow = previewState.isShow,
        color = previewState.color,
        backgroundColor = previewState.backgroundColor,
        shouldShowTip = previewState.shouldShowTip;
    return isShow && /*#__PURE__*/_createElement(ColorPreview, {
      color: color,
      backgroundColor: backgroundColor,
      shouldShowTip: shouldShowTip,
      colorPanelRef: colorPanelRef
    });
  };

  var handleResetClick = function handleResetClick() {
    if (typeof onResetButtonClick === 'function') {
      var shouldContinue = onResetButtonClick();
      if (!shouldContinue) return;
    } // 所有色板恢复默认颜色


    colorPanelLayout.forEach(function (layoutItem) {
      var _layoutItem$defaultCo = layoutItem.defaultColor,
          defaultColor = _layoutItem$defaultCo === void 0 ? '' : _layoutItem$defaultCo,
          onClick = layoutItem.onClick;

      if (typeof onClick !== 'function') {
        return;
      }

      onClick(defaultColor);
    }); // 所有 checkbox 恢复默认

    checkboxLayout.forEach(function (checkboxItem) {
      var defaultValue = checkboxItem.defaultValue,
          onValueChange = checkboxItem.onValueChange;

      if (typeof onValueChange !== 'function') {
        return;
      }

      onValueChange(defaultValue || false);
    }); // 预览框恢复默认

    shouldShowPreview && setPreviewState(DEFAULT_PREVIEW_STATE);
  };

  var showMoreColorIcon = colorPanelLayout.some(function (layout) {
    return layout.showMoreIcon;
  }); // hover 色块，展示预览

  var handleMouseEnterPreview = function handleMouseEnterPreview(colorType, colorOrBgColor) {
    if (!shouldShowPreview) {
      return;
    }

    switch (colorType) {
      case EColorType.font:
        var backgroundColor = currentColors[BG_SELECTED_KEY] || DEFAULT_BG_COLOR;
        return setPreviewState({
          isShow: true,
          shouldShowTip: false,
          color: colorOrBgColor,
          backgroundColor: backgroundColor
        });

      case EColorType.background:
      case EColorType.fontBackground:
        var color = currentColors[COLOR_SELECTED_KEY] || DEFAULT_FONT_COLOR; // 当字体颜色为「默认值或第一个色值」且「hover 的背景色为深色时」
        // 推荐用户使用白色字体

        var shouldShowTip = COULD_SHOW_TIP_COLORS.includes(color) && isDark(colorOrBgColor);
        return setPreviewState({
          isShow: true,
          shouldShowTip: shouldShowTip,
          color: shouldShowTip ? '#FFFFFF' : color,
          backgroundColor: colorOrBgColor
        });

      default:
        return;
    }
  }; // 离开颜色选择面板时隐藏预览框


  var handleMouseLeavePreview = function handleMouseLeavePreview() {
    shouldShowPreview && setPreviewState(DEFAULT_PREVIEW_STATE);
  };

  var handleMouseEnterPanel = function handleMouseEnterPanel(e) {
    onMouseEnter && onMouseEnter(e);
  };

  var handleMouseLeavePanel = function handleMouseLeavePanel(e) {
    onMouseLeave && onMouseLeave(e);
  };

  return /*#__PURE__*/_createElement(PickerWrapper, {
    showMoreColorIcon: showMoreColorIcon,
    "data-role": role,
    ref: colorPanelRef,
    onMouseEnter: handleMouseEnterPanel,
    onMouseLeave: handleMouseLeavePanel
  }, renderColorSelector(colorPanelLayout, currentColors), renderExtraCheckboxes(checkboxLayout), enableMoreButton && renderMoreColorPanel(), enableResetButton && /*#__PURE__*/_createElement(ResetButton, {
    onClick: handleResetClick,
    "data-role": EColorPanelRole.resetColor
  }, /*#__PURE__*/_createElement("span", null, resetButtonTitle || t('we_ui_clear_color'))), shouldShowPreview && !customPanelVisible && renderPreviewBlock());
};

export default ColorPanelCore;