import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useTranslate } from '@ali/we-util';
import { EColorType } from "./types";
import ColorPanelCore from "./ColorPanelCore";
import { BACKGROUND_COLOR, BACKGROUND_COLOR_ALL, DEFAULT_PANEL_LAYOUT } from "./constants";
var fontColorLayout = DEFAULT_PANEL_LAYOUT[0],
    borderColorLayout = DEFAULT_PANEL_LAYOUT[1],
    backgroundColorLayout = DEFAULT_PANEL_LAYOUT[2];

var ColorPanel = function ColorPanel(props) {
  var _customCurrentColors;

  // 国际化文案
  var t = useTranslate('');
  fontColorLayout.title = t('we_ui_font_color');
  borderColorLayout.title = t('we_ui_border_color');
  backgroundColorLayout.title = t('we_ui_background_color');

  var color = props.color,
      _props$colorTitle = props.colorTitle,
      colorTitle = _props$colorTitle === void 0 ? fontColorLayout.title : _props$colorTitle,
      _props$colors = props.colors,
      colors = _props$colors === void 0 ? fontColorLayout.colors : _props$colors,
      _props$defaultColor = props.defaultColor,
      defaultColor = _props$defaultColor === void 0 ? fontColorLayout.defaultColor : _props$defaultColor,
      onColorClick = props.onColorClick,
      _props$enableMoreFont = props.enableMoreFontColor,
      enableMoreFontColor = _props$enableMoreFont === void 0 ? fontColorLayout.showMoreIcon : _props$enableMoreFont,
      _props$enableCustomFo = props.enableCustomFontColor,
      enableCustomFontColor = _props$enableCustomFo === void 0 ? fontColorLayout.enableCustomColor : _props$enableCustomFo,
      borderColor = props.borderColor,
      _props$borderColorTit = props.borderColorTitle,
      borderColorTitle = _props$borderColorTit === void 0 ? borderColorLayout.title : _props$borderColorTit,
      _props$borderColors = props.borderColors,
      borderColors = _props$borderColors === void 0 ? borderColorLayout.colors : _props$borderColors,
      _props$defaultBorderC = props.defaultBorderColor,
      defaultBorderColor = _props$defaultBorderC === void 0 ? borderColorLayout.defaultColor : _props$defaultBorderC,
      onBorderColorClick = props.onBorderColorClick,
      _props$enableMoreBord = props.enableMoreBorderColor,
      enableMoreBorderColor = _props$enableMoreBord === void 0 ? borderColorLayout.showMoreIcon : _props$enableMoreBord,
      _props$enableCustomBo = props.enableCustomBorderColor,
      enableCustomBorderColor = _props$enableCustomBo === void 0 ? borderColorLayout.enableCustomColor : _props$enableCustomBo,
      backgroundColor = props.backgroundColor,
      _props$backgroundColo = props.backgroundColorTitle,
      backgroundColorTitle = _props$backgroundColo === void 0 ? backgroundColorLayout.title : _props$backgroundColo,
      backgroundColors = props.backgroundColors,
      _props$defaultBackgro = props.defaultBackgroundColor,
      defaultBackgroundColor = _props$defaultBackgro === void 0 ? backgroundColorLayout.defaultColor : _props$defaultBackgro,
      onBackgroundColorClick = props.onBackgroundColorClick,
      _props$enableMoreBack = props.enableMoreBackgroundColor,
      enableMoreBackgroundColor = _props$enableMoreBack === void 0 ? backgroundColorLayout.showMoreIcon : _props$enableMoreBack,
      _props$enableCustomBg = props.enableCustomBgColor,
      enableCustomBgColor = _props$enableCustomBg === void 0 ? backgroundColorLayout.enableCustomColor : _props$enableCustomBg,
      _props$isFontBgColor = props.isFontBgColor,
      isFontBgColor = _props$isFontBgColor === void 0 ? false : _props$isFontBgColor,
      _props$isFullBackgrou = props.isFullBackground,
      isFullBackground = _props$isFullBackgrou === void 0 ? false : _props$isFullBackgrou,
      _props$currentColors = props.currentColors,
      currentColors = _props$currentColors === void 0 ? {} : _props$currentColors,
      rest = _objectWithoutPropertiesLoose(props, ["color", "colorTitle", "colors", "defaultColor", "onColorClick", "enableMoreFontColor", "enableCustomFontColor", "borderColor", "borderColorTitle", "borderColors", "defaultBorderColor", "onBorderColorClick", "enableMoreBorderColor", "enableCustomBorderColor", "backgroundColor", "backgroundColorTitle", "backgroundColors", "defaultBackgroundColor", "onBackgroundColorClick", "enableMoreBackgroundColor", "enableCustomBgColor", "isFontBgColor", "isFullBackground", "currentColors"]);

  var customColorPanelLayout = [];

  if (typeof onColorClick === 'function') {
    customColorPanelLayout.push(_extends({}, fontColorLayout, {
      title: colorTitle,
      colors: colors,
      defaultColor: defaultColor,
      onClick: onColorClick,
      showMoreIcon: enableMoreFontColor,
      enableCustomColor: enableCustomFontColor
    }));
  }

  if (typeof onBorderColorClick === 'function') {
    customColorPanelLayout.push(_extends({}, borderColorLayout, {
      title: borderColorTitle,
      colors: borderColors,
      defaultColor: defaultBorderColor,
      onClick: onBorderColorClick,
      showMoreIcon: enableMoreBorderColor,
      enableCustomColor: enableCustomBorderColor
    }));
  }

  if (typeof onBackgroundColorClick === 'function') {
    var defaultBgColors = isFullBackground ? BACKGROUND_COLOR_ALL : BACKGROUND_COLOR;
    customColorPanelLayout.push(_extends({}, backgroundColorLayout, {
      title: backgroundColorTitle,
      colors: backgroundColors || defaultBgColors,
      colorType: isFontBgColor ? EColorType.fontBackground : EColorType.background,
      defaultColor: defaultBackgroundColor,
      onClick: onBackgroundColorClick,
      showMoreIcon: enableMoreBackgroundColor,
      enableCustomColor: enableCustomBgColor
    }));
  }

  var customCurrentColors = (_customCurrentColors = {}, _customCurrentColors[fontColorLayout.selectedKey] = color || currentColors[fontColorLayout.selectedKey], _customCurrentColors[borderColorLayout.selectedKey] = borderColor || currentColors[borderColorLayout.selectedKey], _customCurrentColors[backgroundColorLayout.selectedKey] = backgroundColor || currentColors[backgroundColorLayout.selectedKey], _customCurrentColors);
  return /*#__PURE__*/_createElement(ColorPanelCore, _extends({
    colorPanelLayout: customColorPanelLayout,
    currentColors: customCurrentColors,
    isFirstRowDoubleGap: isFullBackground
  }, rest));
};

export default ColorPanel;