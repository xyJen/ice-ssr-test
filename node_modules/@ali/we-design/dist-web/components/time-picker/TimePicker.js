import React, { useCallback, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import dayjs from 'dayjs';
import { Dropdown } from "../../components/dropdown";
import { Input } from "../../components/input";
import { ClockNormal } from "../../components/icons";
import { classnames } from "../../utils";
import { useTranslate } from '@ali/we-util';
import useControlledValue from "../../hooks/useControlledValue";
import { Trigger, TriggerWrap, OverlayWrap, OverlayInputs, TimePanelWrap } from "./styled";
import { TimePanel } from "./TimePanel";
import useComponentDidUpdate from "../../hooks/useComponentDidUpdate";
// eslint-disable-next-line max-lines-per-function
var TimePicker = /*#__PURE__*/React.memo(function (props) {
  var locale = props.locale,
      renderTrigger = props.renderTrigger,
      disabled = props.disabled,
      format = props.format,
      style = props.style,
      onVisibleChange = props.onVisibleChange,
      onChange = props.onChange,
      zIndex = props.zIndex,
      testid = props.testid;
  var t = useTranslate(locale);

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var _useControlledValue2 = useControlledValue(props.visible, props.defaultVisible),
      visible = _useControlledValue2[0],
      setVisible = _useControlledValue2[1];

  var _useState = useState(value ? value.format(format) : ''),
      inputValue = _useState[0],
      setInputValue = _useState[1];

  var placeholder = props.placeholder || t('we_ui_timepicker_placeholder');
  /**
   * 修改函数
   */

  var handleChange = useCallback(function (e) {
    if (value !== e) {
      if (onChange) {
        onChange(e);
      }

      setValue(e);
    }
  }, [value, onChange, setValue]);
  /**
   * 阻止冒泡，Dropdown自动关闭阻止
   *
   * @param {React.MouseEvent<HTMLElement>}
   * @return {void}
   */

  var handleClickOverlay = useCallback(function (e) {
    e.stopPropagation();
  }, []);
  /**
   * 输入框输入
   *
   * @param {React.ChangeEvent<HTMLInputElement>}
   * @return {void}
   */

  var handleChangeInput = useCallback(function (e) {
    setInputValue(e.target.value);
  }, []);
  /**
   * 输入框失焦
   *
   * @param {React.FocusEvent<HTMLInputElement>}
   * @return {void}
   */

  var handleInputBlur = useCallback(function (e) {
    var v = e.target.value.trim(); // 时间format需要加个虚拟的日期进去

    var timeDate = dayjs("1992-10-22 " + v, format);
    var isValid = timeDate.isValid();

    if (!isValid) {
      setInputValue(value ? value.format(format) : '');
    } else {
      if (value) {
        timeDate = timeDate.year(value.year()).month(value.month()).date(value.date());
      }

      setInputValue(timeDate.format(format));
      handleChange(timeDate);
    }
  }, [format, value, handleChange]); // 时间输入框的值受控于value和format

  useComponentDidUpdate(function () {
    setInputValue(value ? value.format(format) : '');
  }, [value, format]);
  var handleVisibleChange = useCallback(function (e) {
    if (onVisibleChange) {
      onVisibleChange(e);
    }

    setVisible(e);
  }, [onVisibleChange, setVisible]);
  return /*#__PURE__*/_createElement(Dropdown, {
    trigger: "click",
    visible: visible,
    zIndex: zIndex,
    onVisibleChange: handleVisibleChange,
    overlay: /*#__PURE__*/_createElement(OverlayWrap, {
      onMouseDown: handleClickOverlay
    }, /*#__PURE__*/_createElement(OverlayInputs, null, /*#__PURE__*/_createElement(Input, {
      value: inputValue,
      placeholder: format,
      className: "input",
      onChange: handleChangeInput,
      onBlur: handleInputBlur,
      testid: testid
    })), /*#__PURE__*/_createElement(TimePanelWrap, null, /*#__PURE__*/_createElement(TimePanel, {
      value: value,
      onChange: handleChange,
      format: format,
      testid: testid
    })))
  }, typeof renderTrigger === 'function' ? renderTrigger(value) : /*#__PURE__*/_createElement(Trigger, {
    className: classnames({
      placeholder: !value,
      disabled: disabled
    }),
    style: style
  }, /*#__PURE__*/_createElement(TriggerWrap, null, /*#__PURE__*/_createElement("span", {
    className: "text"
  }, value ? value.format(format) : placeholder), /*#__PURE__*/_createElement(ClockNormal, {
    className: "calendar-icon",
    testid: testid
  }))));
});
TimePicker.defaultProps = {
  format: 'HH:mm:ss',
  defaultVisible: false
};
export { TimePicker };