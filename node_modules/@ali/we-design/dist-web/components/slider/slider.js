var _div, _div2;

import React, { useState, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SliderContainer } from "./styled";
import { InputNumber } from "../input-number";
import { uuid } from "../../utils";
export var Slider = function Slider(props) {
  var id = useMemo(function () {
    return uuid();
  }, []);
  var _props$disable = props.disable,
      disable = _props$disable === void 0 ? false : _props$disable,
      _props$attachToMarksO = props.attachToMarksOnly,
      attachToMarksOnly = _props$attachToMarksO === void 0 ? false : _props$attachToMarksO,
      _props$marks = props.marks,
      marks = _props$marks === void 0 ? [] : _props$marks,
      _props$max = props.max,
      max = _props$max === void 0 ? 100 : _props$max,
      _props$min = props.min,
      min = _props$min === void 0 ? 0 : _props$min,
      _props$step = props.step,
      step = _props$step === void 0 ? 1 : _props$step,
      valueFromProps = props.value,
      onChange = props.onChange,
      style = props.style,
      className = props.className,
      title = props.title,
      _props$numberInputVis = props.numberInputVisible,
      numberInputVisible = _props$numberInputVis === void 0 ? true : _props$numberInputVis,
      _props$headerVisible = props.headerVisible,
      headerVisible = _props$headerVisible === void 0 ? true : _props$headerVisible,
      _props$defaultValue = props.defaultValue,
      defaultValue = _props$defaultValue === void 0 ? (max - min) * 0.3 + min : _props$defaultValue,
      _props$percentage = props.percentage,
      percentage = _props$percentage === void 0 ? false : _props$percentage,
      _props$formatter = props.formatter,
      formatter = _props$formatter === void 0 ? function (value) {
    return percentage ? value + '%' : value + '';
  } : _props$formatter;

  var _useState = useState(defaultValue),
      sliderValue = _useState[0],
      setValue = _useState[1];

  var _useState2 = useState(false),
      isMove = _useState2[0],
      setIsMove = _useState2[1];

  var _useState3 = useState(false),
      inputError = _useState3[0],
      setInputError = _useState3[1];

  var _useState4 = useState(defaultValue),
      inputValue = _useState4[0],
      setInputValue = _useState4[1];

  var value = valueFromProps || sliderValue;

  var mouseMove = function mouseMove(e) {
    var _document$getElementB, _document$getElementB2;

    var x = e.clientX;
    var sliderLeft = (_document$getElementB = document.getElementById("slider-" + id)) == null ? void 0 : _document$getElementB.getBoundingClientRect().left;
    var sliderRight = (_document$getElementB2 = document.getElementById("slider-" + id)) == null ? void 0 : _document$getElementB2.getBoundingClientRect().right;
    var result = 0;

    if (sliderLeft && sliderRight) {
      if (x <= sliderLeft) {
        result = min;
      } else if (x >= sliderRight) {
        result = max;
      } else {
        var _value = 0;
        var dist = Number.MAX_SAFE_INTEGER;

        if (!attachToMarksOnly) {
          var spanWidth = (sliderRight - sliderLeft) / ((max - min) / step);
          var order = Math.round((x - sliderLeft) / spanWidth);
          dist = Math.abs(spanWidth * order + sliderLeft - x);
          _value = order * step;
        }

        marks.forEach(function (mark) {
          var newDist = Math.abs(mark / (max - min) * (sliderRight - sliderLeft) + sliderLeft - x);

          if (newDist < dist) {
            dist = newDist;
            _value = mark;
          }
        });
        result = _value;
      }
    }

    if (!Number.isInteger(result)) {
      result = Number(result.toFixed(6));
    }

    onChange && onChange(result);
    setValue(result);
    setInputValue(result);
    setInputError(false);
  };

  var handleInputNumberBlurOrEnter = function handleInputNumberBlurOrEnter(inputTmpValue) {
    if (inputTmpValue === void 0) {
      inputTmpValue = inputValue;
    }

    var value = Number(inputTmpValue);

    if (Number.isNaN(value) || value < min || value > max || marks.indexOf(value) === -1 && !Number.isInteger(Number(((value - min) / step).toFixed(6)))) {
      setInputValue(inputTmpValue);
      setInputError(true);
    } else {
      setInputError(false);
      setValue(value);
      onChange && onChange(value);
    }
  };

  return /*#__PURE__*/_createElement(SliderContainer, {
    isMove: isMove,
    style: style,
    disable: disable,
    className: className
  }, headerVisible && /*#__PURE__*/_createElement("div", {
    className: "slider-head"
  }, /*#__PURE__*/_createElement("div", {
    className: "title"
  }, title), /*#__PURE__*/_createElement("div", {
    className: "number-input-box"
  }, numberInputVisible && /*#__PURE__*/_createElement(InputNumber, {
    defaultValue: defaultValue,
    step: step,
    min: min,
    max: max,
    value: inputValue,
    disabled: disable,
    className: "number-input " + (inputError ? 'error' : ''),
    formatter: formatter,
    onBlur: function onBlur() {
      return handleInputNumberBlurOrEnter();
    },
    onPressEnter: function onPressEnter() {
      return handleInputNumberBlurOrEnter();
    },
    onStep: function onStep(value) {
      return handleInputNumberBlurOrEnter(value);
    },
    onChange: function onChange(value) {
      return setInputValue(value);
    }
  }))), /*#__PURE__*/_createElement("div", {
    className: "slider-wrap"
  }, /*#__PURE__*/_createElement("div", {
    className: "slider",
    id: "slider-" + id
  }, /*#__PURE__*/_createElement("div", {
    className: "left",
    style: {
      width: value / (max - min) * 100 + "%"
    }
  }), _div || (_div = /*#__PURE__*/_createElement("div", {
    className: "slider-background"
  }))), marks.map(function (item, index) {
    return /*#__PURE__*/_createElement("div", {
      className: "mark-box",
      key: index,
      style: {
        left: item / (max - min) * 100 + "%"
      },
      onClick: function onClick() {
        return !disable && setValue(item);
      }
    }, _div2 || (_div2 = /*#__PURE__*/_createElement("div", {
      className: "mark"
    })), /*#__PURE__*/_createElement("div", {
      className: "mark-text"
    }, item));
  }), /*#__PURE__*/_createElement("div", {
    onMouseDown: function onMouseDown() {
      if (!disable) {
        setIsMove(true);
        document.addEventListener("mouseup", function () {
          document.removeEventListener("mousemove", mouseMove);
          setIsMove(false);
        });
        document.addEventListener("mousemove", mouseMove);
      }
    },
    className: "dot",
    style: {
      left: value / (max - min) * 100 + "%"
    }
  }, /*#__PURE__*/_createElement("div", {
    className: "tooltip" + (isMove ? ' move' : '')
  }, value))));
};