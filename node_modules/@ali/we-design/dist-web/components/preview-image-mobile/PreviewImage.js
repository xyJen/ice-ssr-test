import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { debounce } from "lodash-es";
import ActionableBox from "./ActionableBox";
import ActionableImage from "./ActionableImage";
import Toolbar from "./Toolbar";
import { PreviewImageWrap } from "./styled";
import { CustomEventEmitter } from "./utils";
export var PreviewImage = /*#__PURE__*/React.memo(function (props) {
  var urls = props.urls,
      current = props.current,
      initialIndex = props.currentIndex,
      zIndex = props.zIndex,
      enableDownload = props.enableDownload,
      downloadImage = props.downloadImage,
      onClose = props.onClose,
      imgStyle = props.imgStyle;

  var _React$useState = React.useState(window.innerWidth),
      wrapWidth = _React$useState[0],
      setWrapWidth = _React$useState[1];

  var _React$useState2 = React.useState(window.innerHeight),
      wrapHeight = _React$useState2[0],
      setWrapHeight = _React$useState2[1];

  var _React$useState3 = React.useState(true),
      visible = _React$useState3[0],
      setVisible = _React$useState3[1];

  var wrapRef = React.useRef(null);
  var eventEmitterRef = React.useRef(new CustomEventEmitter());
  var length = urls.length;

  var _React$useState4 = React.useState(function () {
    if (typeof initialIndex === 'number' && Number.isInteger(initialIndex) && initialIndex < length) {
      return initialIndex;
    }

    var maybeIndex = urls.indexOf(current);
    return maybeIndex > -1 ? maybeIndex : 0;
  }),
      currentIndex = _React$useState4[0],
      setCurrentIndex = _React$useState4[1];

  var debouncedHandleResize = React.useMemo(function () {
    return debounce(function () {
      if (wrapRef.current) {
        setWrapWidth(wrapRef.current.offsetWidth);
        setWrapHeight(wrapRef.current.offsetHeight);
      }
    }, 200);
  }, []);
  React.useEffect(function () {
    window.addEventListener('resize', debouncedHandleResize);
    return function () {
      window.removeEventListener('resize', debouncedHandleResize);
    };
  }, [debouncedHandleResize]);
  React.useEffect(function () {
    var handleClose = function handleClose() {
      setVisible(false);
      onClose && onClose();
    };

    eventEmitterRef.current.on('click', handleClose);
    return function () {
      eventEmitterRef.current.off('click', handleClose);
    };
  }, [onClose]);
  return visible ? /*#__PURE__*/_createElement(PreviewImageWrap, {
    style: {
      zIndex: zIndex || 1000
    },
    ref: wrapRef
  }, urls.map(function (url, index) {
    return Math.abs(currentIndex - index) <= 1 ? /*#__PURE__*/_createElement(ActionableImage, {
      src: url,
      index: index,
      currentIndex: currentIndex,
      outerHeight: wrapHeight,
      outerWidth: wrapWidth,
      total: urls.length,
      onCurrentIndexChange: setCurrentIndex,
      key: index,
      eventEmitter: eventEmitterRef.current,
      imgStyle: imgStyle
    }) : null;
  }), /*#__PURE__*/_createElement(ActionableBox, {
    eventEmitter: eventEmitterRef.current
  }), /*#__PURE__*/_createElement(Toolbar, {
    enableDownload: enableDownload,
    downloadImage: downloadImage,
    currentIndex: currentIndex,
    urls: urls
  })) : null;
});