import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import { PreviewImage } from "./PreviewImage";
import "../../../locale/zh-CN";
import "../../../locale/en-US";
export var previewImageMobile = function () {
  var handleUpdate = null;
  var handleSetStatus = null;
  var divElement = null;

  var handleClose = function handleClose(key, callback) {
    if (key) {
      var previewImageElement = document.getElementById(key);

      if (previewImageElement) {
        ReactDOM.unmountComponentAtNode(previewImageElement);
        document.body.removeChild(previewImageElement);
        divElement = null;
        handleUpdate = null;
        handleSetStatus = null;
        callback && callback('success');
      } else {
        callback && callback('error');
      }

      return;
    }

    if (divElement && handleUpdate) {
      ReactDOM.unmountComponentAtNode(divElement);
      document.body.removeChild(divElement);
      handleUpdate = null;
      handleSetStatus = null;
    }
  };

  function init(config) {
    if (handleUpdate && divElement) {
      return;
    }

    divElement = document.createElement('div');
    document.body.appendChild(divElement);

    handleUpdate = function handleUpdate(config, status) {
      var urls = config.urls,
          current = config.current,
          previewImageKey = config.previewImageKey,
          imgStyle = config.imgStyle,
          enableDownload = config.enableDownload,
          downloadImage = config.downloadImage,
          _onClose = config.onClose,
          onChange = config.onChange,
          zIndex = config.zIndex,
          locale = config.locale;

      if (previewImageKey && divElement) {
        divElement.setAttribute('id', previewImageKey);
      }

      ReactDOM.render( /*#__PURE__*/_createElement(PreviewImage, {
        urls: urls,
        current: current,
        onClose: function onClose() {
          handleClose();

          if (_onClose) {
            _onClose();
          }
        },
        onChange: onChange,
        downloadImage: downloadImage,
        imgStyle: imgStyle,
        enableDownload: enableDownload,
        status: status,
        zIndex: zIndex,
        locale: locale
      }), divElement);
    }; // TODO


    handleSetStatus = function handleSetStatus(status) {
      handleUpdate && handleUpdate(config, status);
    };
  }

  return {
    open: function open(config) {
      init(config);

      if (handleUpdate) {
        handleUpdate(config);
      }
    },
    show: function show(config) {
      this.open(config);
    },
    close: function close(previewImageKey, callback) {
      handleClose(previewImageKey, callback);
    },
    // TODO
    setStatus: function setStatus(status) {
      handleSetStatus && handleSetStatus(status);
    }
  };
}();