import React, { useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import raf from "./raf";
import { IWaveWrap } from "./styled";
import { composeRef, supportRef } from "../../utils/ref";

var isHidden = function isHidden(element) {
  if (process.env.NODE_ENV === 'test') {
    return false;
  }

  return !element || element.offsetParent === null || element.hidden;
};

var supportedType = ['normal', 'primary'];
export var IWave = function IWave(props) {
  var containerRef = /*#__PURE__*/React.createRef();
  var destroyed = false;
  var animationStartId;
  var animationStart = false;
  var clickWaveTimeoutId;
  var instance;
  var size = props.size,
      testid = props.testid;
  useEffect(function () {
    var node = containerRef.current;
    var type = props.type; // 如果 type 不为 undefined 且为不支持波纹效果的 type，直接 return

    if (type && !supportedType.includes(type) || !node || node.nodeType !== 1) {
      return;
    }

    instance = bindAnimationEvent(node);
    return function () {
      if (instance) {
        instance.cancel();
      }

      if (clickWaveTimeoutId) {
        clearTimeout(clickWaveTimeoutId);
      }

      destroyed = true;
    };
  }, []);

  var handleOnClick = function handleOnClick(node) {
    if (!node || isHidden(node) || node.className.indexOf('-leave') >= 0) {
      return;
    }

    var waveClassName = getClassName();
    node.className = node.className + ' ' + waveClassName;
    ['transition', 'animation'].forEach(function (name) {
      node.addEventListener(name + "start", onTransitionStart);
      node.addEventListener(name + "end", onTransitionEnd);
    });
  };

  var getClassName = function getClassName() {
    var type = props.type;

    if (type === undefined) {
      return 'we-click-wave-animating-normal';
    }

    return "we-click-wave-animating-" + type;
  };

  var onTransitionStart = function onTransitionStart(e) {
    if (destroyed) {
      return;
    }

    var node = containerRef.current;

    if (!e || e.target !== node || animationStart) {
      return;
    }

    resetEffect(node);
  };

  var onTransitionEnd = function onTransitionEnd(e) {
    if (!e || e.animationName !== 'fadeEffect') {
      return;
    }

    resetEffect(e.target);
  };

  var bindAnimationEvent = function bindAnimationEvent(node) {
    if (!node || !node.getAttribute || node.getAttribute('disabled') !== null || node.className.indexOf('disabled') >= 0) {
      return;
    }

    var handleNodeOnClick = function handleNodeOnClick(e) {
      // Fix radio button click twice
      if (e.target.tagName === 'INPUT' || isHidden(e.target)) {
        return;
      }

      resetEffect(node);
      clickWaveTimeoutId = window.setTimeout(function () {
        handleOnClick(node);
      }, 0); // handleOnClick(node);

      raf.cancel(animationStartId);
      animationStart = true; // Render to trigger transition event cost 3 frames. Let's delay 10 frames to reset this.

      animationStartId = raf(function () {
        animationStart = false;
      }, 10);
    };

    node.addEventListener('click', handleNodeOnClick, true);
    return {
      cancel: function cancel() {
        node.removeEventListener('click', handleNodeOnClick, true);
      }
    };
  };

  var resetEffect = function resetEffect(node) {
    if (!node || !(node instanceof Element)) {
      return;
    }

    var waveClassName = getClassName();
    node.className = node.className.replace(" " + waveClassName, '');
    ['transition', 'animation'].forEach(function (name) {
      node.removeEventListener(name + "start", onTransitionStart);
      node.removeEventListener(name + "end", onTransitionEnd);
    });
  };

  var renderWave = function renderWave() {
    var children = props.children;
    if (! /*#__PURE__*/React.isValidElement(children)) return children;
    var ref = containerRef;

    if (supportRef(children)) {
      ref = composeRef(children.ref, containerRef);
    }

    return /*#__PURE__*/_createElement(IWaveWrap, {
      "data-testid": testid ? testid + "_wave" : undefined,
      size: size
    }, /*#__PURE__*/React.cloneElement(children, {
      ref: ref
    }));
  };

  return renderWave();
};