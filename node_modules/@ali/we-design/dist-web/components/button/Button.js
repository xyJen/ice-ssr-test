import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { classnames } from "../../utils";
import { ButtonWrap, ButtonChildrenWrap, ButtonInner, LoadingWrapper } from "./styled";
import { Tooltip } from "../tooltip";
import { IWave } from "./IWave";
import { CircleLoadingBetaNormal } from "../icons";
import { hooks } from '@ali/we-util';
var Button = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _hooks$useClickPreven;

  var style = props.style,
      children = props.children,
      className = props.className,
      handleOnClick = props.onClick,
      shape = props.shape,
      size = props.size,
      type = props.type,
      handleOnDoubleClick = props.onDoubleClick,
      onMouseDown = props.onMouseDown,
      bordered = props.bordered,
      icon = props.icon,
      active = props.active,
      disabled = props.disabled,
      tabIndex = props.tabIndex,
      title = props.title,
      _props$hasLoading = props.hasLoading,
      hasLoading = _props$hasLoading === void 0 ? false : _props$hasLoading,
      _props$loading = props.loading,
      loading = _props$loading === void 0 ? false : _props$loading,
      _props$hasWave = props.hasWave,
      hasWave = _props$hasWave === void 0 ? false : _props$hasWave,
      testid = props.testid,
      _props$role = props.role,
      role = _props$role === void 0 ? '' : _props$role,
      restProps = _objectWithoutPropertiesLoose(props, ["style", "children", "className", "onClick", "shape", "size", "type", "onDoubleClick", "onMouseDown", "bordered", "icon", "active", "disabled", "tabIndex", "title", "hasLoading", "loading", "hasWave", "testid", "role"]);
  /**
   * 对传入的 handleOnClick 函数进行处理，当 Button 处于 loading 时不触发
   *
   * @param e
   */


  var onClick = function onClick(e) {
    if (!loading) {
      handleOnClick && handleOnClick(e);
    }
  };
  /**
   * 对传入的 handleOnDoubleClick 函数进行处理，当 Button 处于 loading 时不触发
   *
   * @param e
   */


  var onDoubleClick = function onDoubleClick(e) {
    if (!loading) {
      handleOnDoubleClick && handleOnDoubleClick(e);
    }
  };
  /**
   * 当 handleOnClick 和 handleOnDoubleClick 同时存在时，对两个函数进行处理，
   * 不然会被 click 截获，无法触发到 doubleClick，
   */


  handleOnClick && handleOnDoubleClick && (_hooks$useClickPreven = hooks.useClickPreventionOnDoubleClick(onClick, onDoubleClick), onClick = _hooks$useClickPreven[0], onDoubleClick = _hooks$useClickPreven[1], _hooks$useClickPreven);
  var onlyIcon = !!icon && !children;
  var buttonInner = hasLoading ? /*#__PURE__*/_createElement(React.Fragment, null, !onlyIcon && /*#__PURE__*/_createElement(LoadingWrapper, {
    "data-testid": testid ? testid + "_loading_wrapper" : undefined,
    visible: loading
  }, /*#__PURE__*/_createElement(CircleLoadingBetaNormal, {
    spin: loading
  })), /*#__PURE__*/_createElement(ButtonInner, {
    "data-testid": testid ? testid + "_inner" : undefined,
    visible: !loading || onlyIcon
  }, icon, /*#__PURE__*/_createElement(ButtonChildrenWrap, null, children))) : /*#__PURE__*/_createElement(ButtonInner, {
    visible: true
  }, icon, /*#__PURE__*/_createElement(ButtonChildrenWrap, null, children));

  var buttonNode = /*#__PURE__*/_createElement(ButtonWrap, _extends({}, restProps, {
    className: classnames(className, {
      active: active
    }),
    shape: shape,
    style: style,
    size: size,
    type: type,
    ref: ref,
    onClick: disabled ? undefined : onClick,
    onDoubleClick: disabled ? undefined : onDoubleClick,
    onMouseDown: disabled ? undefined : onMouseDown,
    bordered: bordered,
    disabled: disabled,
    onlyIcon: onlyIcon,
    tabIndex: tabIndex === '-1' ? undefined : tabIndex || '0',
    "data-testid": testid ? "" + testid : undefined,
    "data-role": role
  }), buttonInner);

  var IWaveButton = onlyIcon ? buttonNode : hasWave ? /*#__PURE__*/_createElement(IWave, {
    testid: testid,
    type: type,
    size: size
  }, buttonNode) : buttonNode;
  return title ? /*#__PURE__*/_createElement(Tooltip, {
    title: title
  }, IWaveButton) : IWaveButton;
}));
Button.defaultProps = {
  shape: 'rect',
  size: 'normal',
  type: 'normal',
  bordered: true,
  icon: null,
  active: false,
  disabled: false
};
export { Button };