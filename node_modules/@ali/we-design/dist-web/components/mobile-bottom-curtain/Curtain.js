var _TouchBarWrapper;

import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import classnames from 'classnames';
import { getStartTouch } from "./utils";
import { Sticker, CurtainBox, Background, HeaderBox, TitleBox, TouchBarWrapper, TouchBar, FooterBox } from "./styled";

/**
 * 移动端底部窗帘组件，交互方式为从底部滑出
 */
var Curtain = function Curtain(props) {
  var children = props.children,
      title = props.title,
      footer = props.footer,
      destroyAfterClose = props.destroyAfterClose,
      style = props.style,
      className = props.className,
      height = props.height,
      onClose = props.onClose,
      isVisible = props.isVisible;
  var startTouchY = React.useRef(0);
  var startTouch = React.useRef(undefined);
  var translateY = React.useRef(0);
  var curtainHeight = React.useRef(0);
  var isFading = React.useRef(false);
  var headerBoxRef = React.useRef(null);
  var curtainBoxRef = React.useRef(null);
  var bgRef = React.useRef(null);

  var _React$useState = React.useState(props.isVisible),
      isRealVisible = _React$useState[0],
      setRealVisible = _React$useState[1];

  var handleTouchBarStart = React.useCallback(function (e) {
    e.stopPropagation();
    var changedTouches = e.changedTouches;
    var length = changedTouches.length;

    if (length > 1) {
      return;
    }

    startTouchY.current = changedTouches[0].clientY;
    startTouch.current = changedTouches[0].identifier;
    translateY.current = 0;
  }, []);
  var formatTransformY = React.useCallback(function (transformY) {
    var _curtainBoxRef$curren;

    var maxTransformY = curtainHeight.current || ((_curtainBoxRef$curren = curtainBoxRef.current) == null ? void 0 : _curtainBoxRef$curren.clientHeight) || 0;
    return Math.min(maxTransformY, Math.max(0, transformY));
  }, []);
  var touchEnd = React.useCallback(function (curTranslateY) {
    var _curtainBoxRef$curren2;

    var realTranslateY = curTranslateY || translateY.current;
    var height = curtainHeight.current || ((_curtainBoxRef$curren2 = curtainBoxRef.current) == null ? void 0 : _curtainBoxRef$curren2.clientHeight) || 0;

    if (realTranslateY > height * 0.25) {
      isFading.current = true;
      curtainBoxRef.current.style.transform = "translateY(" + height + "px)";
      curtainBoxRef.current.style.transition = 'transform 0.2s';
      bgRef.current.style.opacity = '0';
      bgRef.current.style.transition = 'opacity 0.6s';
      translateY.current = height;
    } else {
      curtainBoxRef.current.style.transform = 'translateY(0px)';
      curtainBoxRef.current.style.transition = 'transform 0.2s';
      bgRef.current.style.opacity = '1';
      bgRef.current.style.transition = 'none';
      translateY.current = 0;
    }

    startTouch.current = undefined;
    startTouchY.current = 0;
  }, []);
  var handleTouchBarMove = React.useCallback(function (e) {
    var changedTouches = e.changedTouches;
    var touch = getStartTouch(changedTouches, startTouch.current || 0);

    if (!touch) {
      touchEnd();
    } else {
      var clientY = touch.clientY;
      translateY.current = formatTransformY(clientY - startTouchY.current);

      if (curtainBoxRef.current) {
        curtainBoxRef.current.style.transform = "translateY(" + translateY.current + "px)";
        curtainBoxRef.current.style.transition = 'none';
      }
    }
  }, []);
  var handleTouchBarEnd = React.useCallback(function (e) {
    var changedTouches = e.changedTouches;
    var touch = getStartTouch(changedTouches, startTouch.current);

    if (!touch) {
      touchEnd();
    } else {
      translateY.current = formatTransformY(touch.clientY - startTouchY.current);
      touchEnd(translateY.current);
    }
  }, []);
  var handleBgClick = React.useCallback(function (e) {
    e.stopPropagation();

    if (e.currentTarget === e.target && typeof onClose === 'function' && bgRef.current.style.opacity === '1' && !isFading.current && isRealVisible && isVisible) {
      var _curtainBoxRef$curren3;

      var newTranslateY = curtainHeight.current || ((_curtainBoxRef$curren3 = curtainBoxRef.current) == null ? void 0 : _curtainBoxRef$curren3.clientHeight) || 0;
      curtainBoxRef.current.style.transform = "translateY(" + newTranslateY + "px)";
      curtainBoxRef.current.style.transition = 'transform 0.4s';
      bgRef.current.style.opacity = '0';
      bgRef.current.style.transition = 'opacity 0.4s';
      isFading.current = true;
    }
  }, [isRealVisible, isVisible]);
  var handleBgTransitionEnd = React.useCallback(function () {
    if (bgRef.current.style.opacity === '0') {
      onClose && onClose();
      setRealVisible(false);
    }

    isFading.current = false;
  }, [onClose, isRealVisible]);
  var handleBgTransitionCancel = React.useCallback(function () {
    isFading.current = false;
  }, []);
  var onBgRef = React.useCallback(function (bg) {
    bgRef.current = bg;

    if (bg) {
      bg.addEventListener('transitionend', handleBgTransitionEnd);
      bg.addEventListener('transitioncancel', handleBgTransitionCancel);
    }
  }, [handleBgTransitionEnd, handleBgTransitionCancel]);
  React.useEffect(function () {
    return function () {
      var _bgRef$current, _bgRef$current2;

      (_bgRef$current = bgRef.current) == null ? void 0 : _bgRef$current.removeEventListener('transitionend', handleBgTransitionEnd);
      (_bgRef$current2 = bgRef.current) == null ? void 0 : _bgRef$current2.removeEventListener('transtioncancel', handleBgTransitionCancel);
    };
  }, [handleTouchBarStart, handleBgTransitionEnd, handleTouchBarMove, handleBgTransitionEnd, handleBgTransitionCancel]);
  React.useEffect(function () {
    if (isVisible && !isRealVisible) {
      setRealVisible(true);
    }
  }, [isVisible, isRealVisible]);
  React.useEffect(function () {
    if (isRealVisible) {
      var _curtainBoxRef$curren4;

      curtainHeight.current = ((_curtainBoxRef$curren4 = curtainBoxRef.current) == null ? void 0 : _curtainBoxRef$curren4.clientHeight) || 0;

      if (bgRef.current) {
        bgRef.current.style.transition = 'opacity 0.2s';
        bgRef.current.style.opacity = '1';
      }

      if (curtainBoxRef.current) {
        curtainBoxRef.current.style.transition = 'transform 0.2s';
        curtainBoxRef.current.style.transform = 'translateY(0)';
      }

      isFading.current = true;
    }
  }, [isRealVisible]);
  return destroyAfterClose && !isRealVisible ? null : /*#__PURE__*/_createElement(Sticker, null, /*#__PURE__*/_createElement(Background, {
    ref: onBgRef,
    className: classnames(isRealVisible && 'visible'),
    onClick: handleBgClick,
    onMouseDown: function onMouseDown(e) {
      return e.stopPropagation();
    },
    onMouseUp: function onMouseUp(e) {
      return e.stopPropagation();
    }
  }, /*#__PURE__*/_createElement(CurtainBox, {
    style: style,
    className: classnames(className, {
      visible: isRealVisible
    }),
    height: height,
    ref: curtainBoxRef
  }, /*#__PURE__*/_createElement(HeaderBox, {
    ref: headerBoxRef,
    onTouchStart: handleTouchBarStart,
    onTouchMove: handleTouchBarMove,
    onTouchEnd: handleTouchBarEnd
  }, _TouchBarWrapper || (_TouchBarWrapper = /*#__PURE__*/_createElement(TouchBarWrapper, null, /*#__PURE__*/_createElement(TouchBar, null))), title ? /*#__PURE__*/_createElement(TitleBox, null, title) : null), /*#__PURE__*/_createElement(React.Fragment, null, children), /*#__PURE__*/_createElement(FooterBox, null, footer))));
};

export default Curtain;