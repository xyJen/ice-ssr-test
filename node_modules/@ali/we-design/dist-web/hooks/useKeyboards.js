import { useState, useCallback, useRef } from 'react';
import { isEqual } from "../utils";
export default (function (options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$keyboards = _options.keyboards,
      keyboards = _options$keyboards === void 0 ? [] : _options$keyboards,
      _options$on = _options.on,
      on = _options$on === void 0 ? true : _options$on,
      onFocus = _options.onFocus,
      onBlur = _options.onBlur,
      onKeyDown = _options.onKeyDown,
      onKeyUp = _options.onKeyUp; // 当前是否聚焦

  var _useState = useState(false),
      isFocused = _useState[0],
      setIsFocused = _useState[1]; // 记录当前按下的所有键位的keyCode


  var keyPressed = useRef([]); // 当on变化时，直接清除

  if (on === false) {
    keyPressed.current = [];
  }
  /**
   * 是否需要进行键位检测
   */


  var hasKeyboard = on && keyboards.some(function (_ref) {
    var enable = _ref[2];
    return enable || typeof enable === 'undefined' && isFocused;
  });
  /**
   * 聚焦
   *
   * @param {React.FocusEvent<HTMLElement>} e
   * @return {void}
   */

  var handleFocus = useCallback(function (e) {
    setIsFocused(true);

    if (onFocus) {
      onFocus(e);
    }
  }, [onFocus]);
  /**
   * 失焦
   *
   * @param {React.FocusEvent<HTMLElement>} e
   * @return {void}
   */

  var handleBlur = useCallback(function (e) {
    setIsFocused(false);

    if (onBlur) {
      onBlur(e);
    }
  }, [onBlur]);
  /**
   * 按下键盘时处理
   *
   * @param {React.FocusEvent<HTMLElement>} e
   * @return {void}
   */

  var handleKeyDown = useCallback(function (e) {
    var keyCode = e.which;

    if (keyPressed.current.indexOf(keyCode) === -1) {
      keyPressed.current.push(keyCode);
    }

    keyboards.forEach(function (_ref2) {
      var keyCodes = _ref2[0],
          handler = _ref2[1],
          enable = _ref2[2];
      var enableKeyboard = typeof enable === 'boolean' ? enable && isFocused : isFocused;

      if (enableKeyboard) {
        var meetKeyCodes = false;

        if (Array.isArray(keyCodes)) {
          meetKeyCodes = isEqual(keyCodes, keyPressed.current);
        } else if (keyCodes.and) {
          meetKeyCodes = isEqual(keyCodes.and, keyPressed.current);
        } else if (keyCodes.or) {
          meetKeyCodes = keyCodes.or.some(function (orCode) {
            return keyPressed.current.indexOf(orCode) !== -1;
          });
        }

        if (meetKeyCodes) {
          handler(e);
          e.preventDefault();
        }
      }
    });

    if (onKeyDown) {
      onKeyDown(e);
    }
  }, [onKeyDown, keyboards, isFocused]);
  /**
   * 键盘放开的处理
   *
   * @param {React.FocusEvent<HTMLElement>} e
   * @return {void}
   */

  var handleKeyUp = useCallback(function (e) {
    var keyCode = e.which;
    var index = keyPressed.current.indexOf(keyCode);

    if (index !== -1) {
      keyPressed.current.splice(index, 1);
    }

    if (onKeyUp) {
      onKeyUp(e);
    }
  }, [onKeyUp]);
  return {
    onKeyDown: hasKeyboard ? handleKeyDown : onKeyDown,
    onKeyUp: hasKeyboard ? handleKeyUp : onKeyUp,
    onFocus: handleFocus,
    onBlur: handleBlur
  };
});