import React from 'react';
import { ILineTypeValue } from '../../components/lines';
import { BorderType } from './BorderTypePanel';
export interface IBorderProps {
    borderColor?: string;
    borderType?: BorderType;
    borderStyle?: string;
}
export interface IBorderSetProps {
    /**
     * 选中的边框类型
     */
    borderType?: BorderType;
    /**
     * 边框图标的大小
     */
    borderIconSize?: number;
    /**
     * 线条类型的数组
     */
    borderStyles?: Record<string, ILineTypeValue>;
    /**
     * 默认的边框样式
     */
    defaultBorderStyle?: string;
    /**
     * 当前选中的颜色值
     */
    color?: string;
    /**
     * 边框属性发生变化时的回调
     * changeProps: 发生变化的属性值
     * allProps: BorderSet相关的所有属性集
     */
    onChange?: (allProps: Required<IBorderProps>, changeProps: IBorderProps) => void;
    /**
     * 点击左侧按钮的回调
     */
    onClick?: (allProps: Required<IBorderProps>) => void;
    /**
     * 是否有设置边框大小(粗细)的功能
     */
    supportConfigSize?: boolean;
    /**
     * 本地语言类型，如zh-CN
     */
    locale?: string;
    /**
     * SplitButton 的样式
     */
    style?: React.CSSProperties;
    /**
     * 是否禁用
     */
    disabled?: boolean;
    /**
     * 类名
     */
    className?: string;
    /**
     * tooltip提示
     */
    title?: string | React.ReactNode;
}
interface IBorderSetState {
    innerColor: string;
    innerLineType: string;
    innerBorderType: BorderType;
    dropdownVisible: boolean;
    colorPickerVisible: boolean;
    lineSelectVisible: boolean;
}
export declare class BorderSet extends React.Component<IBorderSetProps, IBorderSetState> {
    static defaultProps: {
        supportConfigSize: boolean;
    };
    constructor(props: IBorderSetProps);
    handleClick: (e: React.MouseEvent) => void;
    handleVisibleChange: (visible: boolean) => void;
    handleClickLeft: () => void;
    handlePropertyChange: (borderProps: IBorderProps) => void;
    handleColorChange: (color: string) => void;
    handleLineChange: (type: string) => void;
    handleBorderChange: (type: BorderType) => void;
    handleColorPickerVisible: (visible: boolean) => void;
    handleLineSelectVisible: (e: boolean) => void;
    handleBorderNoneClick: () => void;
    getOverlayContent: () => JSX.Element;
    renderShowIcon: () => JSX.Element;
    render(): JSX.Element;
}
export {};
