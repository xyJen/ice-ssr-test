/// <reference types="react" />
import { IPlacement } from '../trigger';
import { IInputHandle } from '../input/Input';
export declare type IRawValue = number | string;
export declare type ISelectValue = IRawValue;
export declare type IMultiSelectValue = Array<number | string>;
export interface Rule<VT> {
    validator: (e: VT) => boolean;
    message?: string;
}
export interface ValidationError<VT> {
    [key: string]: any;
    violatedRule: Rule<VT>;
}
interface ICommonSelectProps<VT> {
    /**
     * 国际化
     */
    locale?: string;
    /**
     * 弹层的可见性
     */
    visible?: boolean;
    /**
     * 默认弹层的可见性
     */
    defaultVisible?: boolean;
    /**
     * 弹层可见性变化
     */
    onVisibleChange?: (e: boolean) => void;
    /**
     * 选中值(可以不在 option 中)
     */
    value?: VT;
    /**
     * 默认选中值(可以不在 option 中)
     */
    defaultValue?: VT;
    /**
     * 容器
     */
    getContainer?: () => HTMLElement;
    /**
     * 显示区样式
     */
    style?: React.CSSProperties;
    /**
     * 弹层样式
     */
    overlayStyle?: React.CSSProperties;
    /**
     * 设置 option 容器样式
     */
    optionWrapperStyle?: React.CSSProperties;
    /**
     * 类名
     */
    className?: string;
    /**
     * Select 工作模式
     */
    mode?: 'default' | 'search' | 'input';
    /**
     * 是否有边框
     */
    bordered?: boolean;
    /**
     * 是否禁用
     */
    disabled?: boolean;
    /**
     * 是否可以选中
     */
    selectable?: boolean;
    /**
     * 尺寸
     */
    size?: 'small' | 'large' | 'normal';
    /**
     * 层级
     */
    zIndex?: number;
    /**
     * 是否显示下拉箭头
     */
    showArrow?: boolean;
    /**
     * 弹层位置
     */
    placement?: IPlacement;
    /**
     * 弹层类名
     */
    overlayClassName?: string;
    /**
     * 子节点
     */
    children: React.ReactElement[];
    /**
     * 弹层是否自动关闭
     */
    autoClose?: boolean;
    /**
     * 暴露 data-testid, 用于测试
     */
    testid?: string;
    /**
     * Tooltip消息
     */
    title?: string | React.ReactNode;
    /**
     * 是否错误
     */
    errored?: boolean;
    /**
     * 错误提示
     */
    errorTip?: string;
    animationPlacement?: 'top' | 'left' | 'right' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight' | 'leftTop' | 'leftBottom' | 'rightTop' | 'rightBottom';
    /**
     * 是否在右侧显示对勾
     */
    showSelectOnRight?: boolean;
    role?: string;
}
export declare type ISelectProps<VT extends ISelectValue = ISelectValue> = ICommonSelectProps<VT> & {
    /**
     *
     */
    showErrorState?: boolean;
    /**
     * 传入的校验规则
     */
    rules?: Array<Rule<VT>>;
    /**
     * 选中值改变
     */
    onChange?: (e: VT, error?: ValidationError<VT>) => void;
    /**
     * 自定义显示区的函数
     */
    renderTrigger?: (value?: VT) => JSX.Element;
    /**
     * 选中值是否改变都触发
     */
    onSelect?: (e: VT, error?: ValidationError<VT>) => void;
    /**
     * 选择组件样式类型
     * 默认是toolbar类型，此时是给toolbar选择组件专用
     * ！！！注意：标准样式默认带边框，bordered属性会失效！！！
     */
    styleType?: 'toolbar' | 'standard';
    /**
     * 自定义的下拉展示效果
     */
    dropdownRender?: (originNode: React.ReactNode) => React.ReactNode;
    /**
     * 是否根据输入项进行筛选。当其为一个函数时，会接收 inputValue option 两个参数，当 option 符合筛选条件时，应返回 true，反之则返回 false
     */
    filterOption?: boolean | ((inputValue: string, option: React.ReactNode) => boolean);
    /**
     * (tmp)搜索模式下，selectButton 显示的修改值，默认为 value
     */
    inputTriggerText?: (value: string) => string;
    /**
     * 禁止根据视口自适应展开位置
     */
    disableDomAlign?: boolean;
    /**
      * 监听overlay的宽高变化自适应位置
      */
    overlayAutoAlign?: boolean;
};
export declare type IMultiSelectProps<VT extends IMultiSelectValue = IMultiSelectValue> = ICommonSelectProps<VT> & {
    /**
     * 传入的校验规则
     */
    rules?: Array<Rule<IRawValue>>;
    /**
     * 选中值改变
     */
    onChange?: (e: VT, error?: ValidationError<IRawValue>) => void;
    /**
     * 自定义显示区的函数
     */
    renderTrigger?: (value?: string) => JSX.Element;
    /**
     * 选中值是否改变都触发
     */
    onSelect?: (e: IRawValue, error?: ValidationError<IRawValue>) => void;
    /**
     * 标签的渲染函数
     */
    tagRender?: (displayLabel: string | number, value: string | number, closable?: boolean, onClose?: (e: React.MouseEvent) => void) => React.ReactNode;
    /**
     * 无内容时显示的样式
     */
    emptyDisplay?: React.ReactNode;
    /**
     * 搜不到值时显示的样式
     */
    searchNoMatchDisplay?: React.ReactNode;
    /**
     * 最多显示的标签数量
     */
    maxTagCount?: number | 'responsive';
    /**
     * 每个tag最多显示文字的数量，超过显示...
     */
    maxTagTextLength?: number;
    /**
     * 缩略显示标签的样式
     */
    maxTagPlaceholder?: React.ReactNode | ((omittedValues: string[] | number[]) => React.ReactNode);
    /**
     * 文本框值变化时的回调
     */
    onSearch?: (keyword: string) => void;
    /**
     * 根据option的value还是label进行筛选，默认是value
     */
    optionFilterProp?: 'value' | 'label';
    /**
     * 获取焦点时的回调
     */
    onFocus?: () => void;
    /**
     * 失去焦点时的回调
     */
    onBlur?: () => void;
    /**
     * 缩略标签(+...)的hover提示文字
     */
    restHoverTip?: string;
    /**
     * 监听下拉菜单overlay的宽高变化自适应位置
     */
    overlayAutoAlign?: boolean;
    /**
     * overlayAutoAlign 执行延时
     * 默认 100ms
     */
    overlayAutoAlignDelay?: number;
    /**
     * 下拉菜单的固定高度
     */
    overlayHeight?: number;
    /**
     * 输入框的值受控
     */
    inputVal?: string;
    /**
     * 输入框的值变化的回调函数
     */
    onInputChange?: (val: string) => void;
};
export declare type ISelectButtonProps<VT extends ISelectValue = ISelectValue> = Pick<ISelectProps<VT>, 'locale' | 'renderTrigger' | 'value' | 'visible' | 'mode' | 'testid'> & {
    keyword: string;
    isInputFocused: boolean;
    inputRef: React.RefObject<IInputHandle>;
    onFocus: React.FocusEventHandler<HTMLInputElement>;
    onBlur: React.FocusEventHandler<HTMLInputElement>;
    onEnter: React.KeyboardEventHandler<HTMLInputElement>;
    onChange: React.ChangeEventHandler<HTMLInputElement>;
    inputTriggerText?: (value: string) => string;
};
export declare type IMultiSelectButtonProps<VT extends IMultiSelectValue = IMultiSelectValue> = Pick<IMultiSelectProps<VT>, 'locale' | 'renderTrigger' | 'visible' | 'mode' | 'testid'> & {
    value: string;
    inputRef: React.RefObject<IInputHandle>;
    onFocus: React.FocusEventHandler<HTMLInputElement>;
    onBlur: React.FocusEventHandler<HTMLInputElement>;
    onEnter: React.KeyboardEventHandler<HTMLInputElement>;
    onChange: React.ChangeEventHandler<HTMLInputElement>;
};
export declare type TOptionTitle = string | {
    title: string;
    placement: IPlacement;
};
export interface ISelectOptionProps<VT extends IRawValue = IRawValue> {
    /**
     * 是否禁止
     */
    disabled?: boolean;
    /**
     * 禁止时提示文案
     */
    disabledTip?: string;
    /**
     * Option的值，默认根据此属性进行筛选
     */
    value?: VT;
    /**
     * 样式
     */
    style?: React.CSSProperties;
    /**
     * 类名
     */
    className?: string;
    /**
     * 选中
     */
    onSelect?: () => void;
    /**
     * 暴露 data-testid, 用于测试
     */
    testid?: string;
    /**
     * tooltip提示
     */
    title?: TOptionTitle;
    /**
     * 角色
     */
    role?: string;
}
export declare type IMultiSelectOptionProps<VT extends IRawValue = IRawValue> = ISelectOptionProps<VT> & {
    label?: string;
    onClick?: (e: React.MouseEvent) => void;
};
export interface IState<VT extends IRawValue = IRawValue> {
    OptionChildrenRecord: Map<VT, React.ReactNode>;
    OptionDisabledRecord: Map<VT, boolean>;
    keyboardAt: VT | null;
    showOptionValues: VT[];
    keyword: string;
    isInputFocused: boolean;
}
export interface ISelectContextValue<VT extends ISelectValue = ISelectValue> {
    value: VT;
    optionWrapperStyle?: React.CSSProperties;
    keyboardAt: VT | null;
    selectable: boolean;
    showOptionValues: VT[];
    isSearching: boolean;
    showSelectOnRight?: boolean;
    onClickOption: (e: IClickOptionEvent<VT>) => void;
    onCacheOptionDisabled: (value: VT, disabled: boolean) => void;
    onUncacheOptionDisabled: (value: VT) => void;
    onUpdateOption: (value: VT, children: React.ReactNode) => void;
    onRemoveOption: (value: VT) => void;
}
export interface IClickOptionEvent<VT extends IRawValue = IRawValue> {
    value: VT;
    disabled: boolean;
}
export interface IMultiSelectContextValue {
    value: IMultiSelectValue;
    optionWrapperStyle?: React.CSSProperties;
    keyboardAt: IRawValue | null;
    selectable: boolean;
    showOptionValues: IRawValue[];
    isSearching: boolean;
    showSelectOnRight?: boolean;
    onClickOption: (e: IClickOptionEvent<IRawValue>) => void;
    onCacheOptionDisabled: (value: IRawValue, disabled: boolean) => void;
    onUncacheOptionDisabled: (value: IRawValue) => void;
    onUpdateOption: (value: IRawValue, children: React.ReactNode) => void;
    onRemoveOption: (value: IRawValue) => void;
}
export {};
