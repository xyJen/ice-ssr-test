/// <reference types="react" />
import { IUseMenuKeyContext, ISimpleTreeNode } from './interface';
/**
 * 获取 Controller
 *
 * @param {String} name Component's name
 * @return {Controller | never}
 */
export declare const useController: (name: string) => import("./interface").IController;
export declare const useHotkeyController: (name: string) => import("./interface").IHotkeyPositionContext;
/**
 * 获取当前 key 路径
 * @param {string} key
 * @return {string}
 */
export declare const usePath: (key: string) => string;
/**
 * 处理menukey
 *
 * @param {string} key
 * @return {IUseMenuKeyContext}
 */
export declare const useMenuKeyContext: (key?: string | undefined) => IUseMenuKeyContext;
export declare const useMousePosition: () => {
    getMousePosition: () => number;
    mousePosition: number;
    setMousePosition: (v: number) => number;
};
/**
 * 菜单快捷键 有滚动条是 滚动到合适位置
 */
export declare const useHotKeyScrollRef: (menuKey: string, isHotkeyType?: boolean | undefined, hotkeyPosition?: ISimpleTreeNode | null | undefined) => import("react").MutableRefObject<HTMLElement | undefined>;
export declare const useRegisterValidNode: (menuId: string, shouldSelectFirstItem: boolean, openedMenuKeys: string[]) => {
    registerValidNode: (node: ISimpleTreeNode) => void;
    unRegisterValidNode: (node: ISimpleTreeNode) => void;
    hotkeyPosition: ISimpleTreeNode | null;
    setHotkeyPosition: import("react").Dispatch<import("react").SetStateAction<ISimpleTreeNode | null>>;
    selectFirstItem: () => void;
    validNodes: import("react").MutableRefObject<ISimpleTreeNode[]>;
    hotKeyPath: import("react").MutableRefObject<ISimpleTreeNode | null | undefined>;
};
