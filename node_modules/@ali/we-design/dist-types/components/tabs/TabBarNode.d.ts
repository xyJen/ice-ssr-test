import React, { Component } from 'react';
import { ITabsProps } from './Tabs';
import { ISaveRef, IGetRef } from './interface';
interface ITabBarNodeProps extends ITabsProps {
    saveRef: ISaveRef;
    getRef: IGetRef;
    panes: React.ReactNode;
}
interface ITabBarNodeState {
    next: boolean;
    prev: boolean;
    needsDropdown: boolean;
    visibleStart: number;
    visibleEnd: number;
    lockAnimation: number;
}
export interface TabSize {
    width: number;
    height: number;
    left: number;
    top: number;
}
export default class TabBarNode extends Component<ITabBarNodeProps, ITabBarNodeState> {
    static defaultProps: {
        tabBarPosition: string;
        prefixCls: string;
        onPrevClick: any;
        onNextClick: any;
    };
    private offset;
    private resizeObserver;
    private debouncedResize;
    private lastNextPrevShown;
    private lastWheelDirection;
    private tabList;
    private tabSizeMap;
    private lockAnimationTimer;
    private wrapperOffsetWH;
    private wrapperScrollWH;
    constructor(props: ITabBarNodeProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps?: any, prevState?: any): void;
    componentWillUnmount(): void;
    /**
     * 检测左右按钮的激活状态，并调整 offset
     */
    setNextPrev(): Promise<unknown>;
    /**
     * 获取节点的宽度
     *
     * @param {HTMLElement} node
     * @return {number} offsetWidth
     */
    getOffsetWH(node: HTMLElement): number;
    /**
     * 获取节点的滚动宽度
     *
     * @param {HTMLElement} node
     * @return {number} scrollWidth
     */
    getScrollWH(node: HTMLElement): number;
    /**
     * 获取节点的偏移量
     *
     * @param {HTMLElement} node
     * @return {number} clientRect.left
     */
    getOffsetLT(node: HTMLElement): number;
    /**
     * 设置偏移量
     *
     */
    setOffset(offset: number): void;
    setPrev(v: boolean): void;
    setNext(v: boolean): void;
    prevTransitionEnd: (e: React.TransitionEvent<HTMLDivElement>) => void;
    scrollToActiveTab: (e?: any) => void;
    /** 点击左箭头的事件处理函数 */
    prev: (e: React.MouseEvent<HTMLDivElement>) => void;
    /** 点击右箭头的事件处理函数 */
    next: (e: React.MouseEvent<HTMLDivElement>) => void;
    /**
     * 判断左右的按钮是否显示
     */
    isNextPrevShown(state?: {
        next: boolean;
        prev: boolean;
    }): boolean;
    /**
     * 检测 dropdown 是否需要显示，并调整 offset
     */
    isNeedsDropdown(): boolean;
    clearLockAnimationTimer: () => void;
    handleWheel: (e: WheelEvent) => false | undefined;
    doLockAnimation: () => void;
    handleResize: () => void;
    getTabList: (panes: React.ReactNode) => {
        key: React.Key;
        tab: React.ReactNode;
    }[];
    updateTabSizes: () => Promise<void>;
    updateVisibleRange: () => void;
    getDropdown: () => JSX.Element;
    rotateArrow: (angle: number) => React.CSSProperties;
    getPrevNext: () => JSX.Element;
    render(): JSX.Element;
}
export {};
