/// <reference types="react" />
export interface IColorPanel {
    /**
     * 颜色选择器配置
     */
    colorPanelLayout: IColorPanelLayout;
    /**
     * 当前颜色
     */
    currentColors?: ICurrentColors;
    /**
     * checkbox 配置
     */
    checkboxLayout?: ICheckboxLayout;
    /**
     * 是否显示「更多颜色」按钮
     */
    enableMoreButton?: boolean;
    /**
     * 点击「更多颜色」弹出的面板
     */
    renderMorePanel?: () => React.ReactElement;
    /**
     * 是否显示「恢复默认」按钮
     */
    enableResetButton?: boolean;
    /**
     * 「恢复默认」按钮标题，默认为「恢复默认」
     */
    resetButtonTitle?: string;
    /**
     * 「恢复默认」按钮点击回调，默认将所有设置为默认值
     *  即调用 onClick(defaultColor) 和 onValueChange(defaultColor)
     *  函数返回 true 时继续执行默认行为，返回 false 时立即结束
     */
    onResetButtonClick?: () => boolean;
    /**
     * 色块第一行是否拥有双倍间距
     * 目前使用场景为 当有七行背景色时第一行为双倍间距
     */
    isFirstRowDoubleGap?: boolean;
    /**
     * 角色
     */
    role?: string;
    /**
     * hover 到色块时是否在右侧显示预览框
     */
    shouldShowPreview?: boolean;
    /**
     *  自定义颜色面板 visible 变化的回调
     */
    onCustomVisibleChange?: (visible: boolean) => void;
    /**
     *  光标滑入面板的回调
     */
    onMouseEnter?: (e: React.MouseEvent) => void;
    /**
     *  光标滑出面板的回调
     */
    onMouseLeave?: (e: React.MouseEvent) => void;
}
export interface ICustomLayoutConfig {
    /**
     * 当前字体颜色
     */
    color?: string;
    /**
     * 点击字体颜色的回调，注入点击的颜色作为参数，渐变色格式为 '#color1__#color2'
     */
    onColorClick?: (color: string) => void;
    /**
     * 字体颜色标题
     */
    colorTitle?: string;
    /**
     * 字体颜色列表
     */
    colors?: string[];
    /**
     * 默认的字体颜色
     */
    defaultColor?: string;
    /**
     * 是否在字体颜色选择框右边显示「更多」图标
     */
    enableMoreFontColor?: boolean;
    /**
     * 是否支持自定义字体颜色, 默认支持
     */
    enableCustomFontColor?: boolean;
    /**
     * 当前边框颜色
     */
    borderColor?: string;
    /**
     * 点击边框颜色的回调，注入点击的颜色作为参数，渐变色格式为 '#color1__#color2'
     */
    onBorderColorClick?: (color: string) => void;
    /**
     * 边框颜色标题
     */
    borderColorTitle?: string;
    /**
     * 边框颜色列表
     */
    borderColors?: string[];
    /**
     * 默认的边框颜色
     */
    defaultBorderColor?: string;
    /**
     * 是否在边框颜色选择框右边显示「更多」图标
     */
    enableMoreBorderColor?: boolean;
    /**
     * 是否支持自定义边框颜色, 默认支持
     */
    enableCustomBorderColor?: boolean;
    /**
     * 当前背景颜色
     */
    backgroundColor?: string;
    /**
     * 点击背景颜色的回调，注入点击的颜色作为参数，渐变色格式为 '#color1__#color2'
     */
    onBackgroundColorClick?: (color: string) => void;
    /**
     * 背景颜色标题
     */
    backgroundColorTitle?: string;
    /**
     * 背景颜色列表
     */
    backgroundColors?: string[];
    /**
     * 默认的背景颜色
     */
    defaultBackgroundColor?: string;
    /**
     * 是否在背景颜色选择框右边显示「更多」图标
     */
    enableMoreBackgroundColor?: boolean;
    /**
     * 是否支持自定义背景色, 默认支持
     */
    enableCustomBgColor?: boolean;
    /**
     * 是否显示全部背景色（默认三行背景色， 该选项为 true 时变成 6 行）
     */
    isFullBackground?: boolean;
    /**
     * 背景色块是否为带 A 型
     */
    isFontBgColor?: boolean;
}
export declare type IUnifiedColorPanel = ICustomLayoutConfig & Omit<IColorPanel, 'colorPanelLayout'>;
export interface ICurrentColors {
    [index: string]: string | undefined;
}
export declare type IColorPanelLayout = IColorPanelLayoutItem[];
export interface IColorPanelLayoutItem {
    /**
     * 颜色选择器标题
     */
    title: string;
    /**
     * currentColors 中的键
     */
    selectedKey: string;
    /**
     * 颜色选择器类型，目前支持 font、border、background
     */
    colorType: EColorType;
    /**
     * 颜色列表
     */
    colors: string[];
    /**
     * 每行显示的色块数
     */
    column?: number;
    /**
     * 默认颜色
     */
    defaultColor?: string;
    /**
     * 色块点击回调，注入点击的颜色作为参数，渐变色格式为 '#color1__#color2'
     */
    onClick?: (color: string) => void;
    /**
     * 是否在颜色选择框右边显示「更多」图标
     */
    showMoreIcon?: boolean;
    /**
     * 角色
     */
    role?: string;
    /**
     * 是否支持自定义颜色
     */
    enableCustomColor?: boolean;
}
export interface IColorBoxMouseEvents {
    onMouseEnter?: (colorType: EColorType, color: string) => any;
    onMouseLeave?: () => void;
}
export interface ICustomPanelProps {
    color: string;
    visible: boolean;
    onColorChange: (color: string) => void;
    onVisibleChange: (visible: boolean) => void;
    containerRef: React.RefObject<HTMLDivElement>;
}
export interface ISetCustomPanelProps {
    triggerKey: string;
    customPanelVisible: boolean;
    setTriggerKey: React.Dispatch<React.SetStateAction<string>>;
    setCustomPanelVisible: React.Dispatch<React.SetStateAction<boolean>>;
    setCustomColor: React.Dispatch<React.SetStateAction<string>>;
    setCustomClickHandler: React.Dispatch<React.SetStateAction<Function>>;
}
export declare type IColorSelector = IColorPanelLayoutItem & Required<Pick<IColorPanel, 'currentColors' | 'isFirstRowDoubleGap' | 'shouldShowPreview'>> & IColorBoxMouseEvents & ISetCustomPanelProps;
export declare enum EColorType {
    font = "font",
    border = "border",
    background = "background",
    fontBackground = "fontBackground"
}
export declare type ICheckboxLayout = ICheckboxLayoutItem[];
export interface ICheckboxLayoutItem {
    /**
     * 复选框标题
     */
    title: string;
    /**
     * 复选框值变化的回调函数
     */
    onValueChange: (value: boolean) => void;
    /**
     * 复选框值默认值
     */
    defaultValue?: boolean;
    /**
     * 复选框值当前值
     */
    value: boolean;
}
export declare type IColorMatrix = Omit<IColorPanelLayoutItem, 'title'> & Required<Pick<IColorPanel, 'currentColors' | 'isFirstRowDoubleGap'>> & IColorBoxMouseEvents;
export interface IFontColorBox {
    isSelected: boolean;
    children: React.ReactElement | null;
}
export interface IBorderColorBox {
    color: string;
    children: React.ReactElement | null;
}
export interface IBackgroundColorBox {
    color: string;
    children?: React.ReactElement | null;
}
export interface IColorBox {
    colorType: EColorType;
    color: string;
    isSelected: boolean;
    onClick: (e: React.MouseEvent) => any;
    children: React.ReactElement | null;
    onMouseEnter?: React.MouseEventHandler;
}
export interface IPreviewState {
    isShow: boolean;
    color: string;
    backgroundColor: string;
}
export interface IColorObj {
    hex: string;
    hsl: {
        h: number;
        s: number;
        l: number;
        a?: number;
    };
    rgb: {
        r: number;
        g: number;
        b: number;
        a?: number;
    };
}
export interface IColorPreviewProps {
    color: string;
    backgroundColor: string;
    shouldShowTip: boolean;
    colorPanelRef: React.RefObject<HTMLDivElement>;
}
export interface ICustomPanelProps {
    color: string;
    visible: boolean;
    onColorChange: (color: string) => void;
    onVisibleChange: (visible: boolean) => void;
    containerRef: React.RefObject<HTMLDivElement>;
}
