export declare enum ENumberStrategy {
    ROUND = 1,
    FLOOR = 2
}
/**
 * 浮点数匹配处理
 * @param num1 比较的数字1
 * @param num2 比较的数字2
 * @param accuracy 两个小数的最小差异, 0.000001
 */
export declare const equalFloat: (num1: number, num2: number, accuracy?: number) => boolean;
/**
 * 浮点数精确度处理
 * @param num 要处理的浮点数
 * @param accuracy 保存的精度位数，默认2位小数
 */
export declare const formatNumber: (num: number, accuracy?: number, strategy?: ENumberStrategy) => number;
/**
 * 先放大为整数，再完成浮点数相加，以（在日常场景）获得更接近数学的结果
 * @param num1 浮点数1
 * @param num2 浮点数2
 * 参考：https://github.com/camsong/blog/issues/9
 */
export declare const addFloat: (num1: number, num2: number) => number;
/**
 * 判断数字在给定精度（位数）下是否需要圆整
 * @param num 需判断的数字
 * @param accuracy 小数点位数
 */
export declare const needsRounding: (num: string | number, accuracy: number) => boolean;
