(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global['@ali/clipboard-manager'] = {}));
}(this, (function (exports) { 'use strict';

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var defineProperty = createCommonjsModule(function (module) {
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var _defineProperty = unwrapExports(defineProperty);

	var IS_IOS = typeof navigator !== 'undefined' && typeof window !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent) // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
	// @ts-ignore
	&& !window.MSStream;
	var IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';
	var IS_SAFARI = typeof navigator !== 'undefined' && navigator.vendor === 'Apple Computer, Inc.';
	var MIME_TYPES = {
	  HTML: 'text/html',
	  TEXT: 'text/plain'
	}; // match \s string.

	var NONEMPTY_REG = /^\s+$/;

	function createHiddenTextarea() {
	  var isRTL = document.documentElement.getAttribute('dir') === 'rtl';
	  var fakeElem = document.createElement(IS_IOS ? 'div' : 'textarea');

	  if (IS_IOS) {
	    fakeElem.setAttribute('style', '-webkit-user-select: text !important');
	  } // Prevent zooming on iOS


	  fakeElem.style.fontSize = '12pt'; // Reset box model

	  fakeElem.style.border = '0';
	  fakeElem.style.padding = '0';
	  fakeElem.style.margin = '0'; // Move element out of screen horizontally

	  fakeElem.style.position = 'absolute';
	  fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically

	  var yPosition = window.pageYOffset || document.documentElement.scrollTop;
	  fakeElem.style.top = yPosition + "px";
	  return fakeElem;
	}

	function select(element) {
	  var selectedText;

	  if (IS_IOS || element instanceof HTMLDivElement) {
	    /**
	     *  兼容至 ios 10 以上
	     *  https://stackoverflow.com/questions/34045777/copy-to-clipboard-using-javascript-in-ios
	     * */
	    var selection = window.getSelection();
	    var range = document.createRange(); // There must be html content to trigger copy event.

	    if (!element.innerHTML) {
	      element.innerHTML = '<div>123</div>';
	    }

	    range.selectNodeContents(element); // eslint-disable-next-line no-unused-expressions

	    selection == null ? void 0 : selection.removeAllRanges(); // eslint-disable-next-line no-unused-expressions

	    selection == null ? void 0 : selection.addRange(range);
	    return '';
	  }

	  if (element.nodeName === 'SELECT') {
	    element.focus();
	    selectedText = element.value;
	  } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
	    var isReadOnly = element.hasAttribute('readonly');

	    if (!isReadOnly) {
	      element.setAttribute('readonly', '');
	    }

	    if ('select' in element) {
	      element.select();
	    }

	    if ('setSelectionRange' in element) {
	      // eslint-disable-next-line no-unused-expressions
	      element == null ? void 0 : element.setSelectionRange(0, element.value.length);
	    }

	    if (!isReadOnly) {
	      element.removeAttribute('readonly');
	    }

	    selectedText = element.value;
	  } else {
	    if (element.hasAttribute('contenteditable')) {
	      element.focus();
	    }

	    var _selection = window.getSelection();

	    var _range = document.createRange();

	    _range.selectNodeContents(element); // eslint-disable-next-line no-unused-expressions


	    _selection == null ? void 0 : _selection.removeAllRanges(); // eslint-disable-next-line no-unused-expressions

	    _selection == null ? void 0 : _selection.addRange(_range);
	    selectedText = _selection == null ? void 0 : _selection.toString();
	  }

	  return selectedText || '';
	}

	var asyncToGenerator = createCommonjsModule(function (module) {
	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
	});

	var _asyncToGenerator = unwrapExports(asyncToGenerator);

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  define(IteratorPrototype, iteratorSymbol, function () {
	    return this;
	  });

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = GeneratorFunctionPrototype;
	  define(Gp, "constructor", GeneratorFunctionPrototype);
	  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
	    return this;
	  });
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  define(Gp, iteratorSymbol, function() {
	    return this;
	  });

	  define(Gp, "toString", function() {
	    return "[object Generator]";
	  });

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, in modern engines
	  // we can explicitly access globalThis. In older engines we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  if (typeof globalThis === "object") {
	    globalThis.regeneratorRuntime = runtime;
	  } else {
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	}
	});

	var regenerator = runtime_1;

	function _asyncIterator(iterable) { var method, async, sync, retry = 2; for ("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = "@@asyncIterator", sync = "@@iterator"; } throw new TypeError("Object is not async iterable"); }

	function AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object.")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, "return": function _return(value) { var ret = this.s["return"]; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, "throw": function _throw(value) { var thr = this.s["return"]; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }
	var canvas;
	var ctx;
	/**
	 * @description Clear canvas memory.
	 */

	function clearCanvas() {
	  if (canvas) {
	    canvas.width = 0;
	    canvas.height = 0;
	  }
	}
	/**
	 * @description Only support image type.
	 */


	function isFileMimeType(mimeType) {
	  return /^(image)\//.test(mimeType);
	}
	/**
	 * @description Transform media url to blob
	 */

	function urlToBlob(url) {
	  return new Promise(function (resolve, reject) {
	    var img = new Image();
	    img.setAttribute('crossOrigin', 'anonymous');

	    img.onload = function () {
	      if (!canvas || !ctx) {
	        canvas = document.createElement('canvas');
	        ctx = canvas.getContext('2d');
	      }

	      canvas.width = img.naturalWidth;
	      canvas.height = img.naturalHeight;

	      if (ctx) {
	        ctx.drawImage(img, 0, 0);
	        canvas.toBlob(function (blob) {
	          if (blob) {
	            resolve(blob);
	          }

	          clearCanvas();
	        }, 'image/png');
	      } else {
	        reject(new Error("canvas.getContext('2d') return null"));
	        clearCanvas();
	      }
	    };

	    img.onerror = function (e) {
	      reject(e);
	      clearCanvas();
	    };

	    img.src = url;
	  });
	}

	function fileDataToBlob(_x) {
	  return _fileDataToBlob.apply(this, arguments);
	}
	/**
	 * @description Support for multiple ClipboardItems is not implemented.
	 * @see https://source.chromium.org/chromium/chromium/src/+/master:ui/base/clipboard/scoped_clipboard_writer.cc;l=22?q=~ScopedClipboardWriter
	 */


	function _fileDataToBlob() {
	  _fileDataToBlob = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(fileData) {
	    var blob;
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            if (!(fileData instanceof Blob)) {
	              _context.next = 2;
	              break;
	            }

	            return _context.abrupt("return", Promise.resolve(fileData));

	          case 2:
	            _context.next = 4;
	            return urlToBlob(fileData);

	          case 4:
	            blob = _context.sent;
	            return _context.abrupt("return", blob);

	          case 6:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));
	  return _fileDataToBlob.apply(this, arguments);
	}

	function asyncClipboardDataToBlob(_x2) {
	  return _asyncClipboardDataToBlob.apply(this, arguments);
	}
	/**
	 * @description Compatible with safari.
	 * @see https://stackoverflow.com/questions/66312944/javascript-clipboard-api-write-does-not-work-in-safari
	 */


	function _asyncClipboardDataToBlob() {
	  _asyncClipboardDataToBlob = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(writeData) {
	    var result, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, key;

	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            result = {};
	            _iteratorAbruptCompletion = false;
	            _didIteratorError = false;
	            _context2.prev = 3;
	            _iterator = _asyncIterator(Object.keys(writeData));

	          case 5:
	            _context2.next = 7;
	            return _iterator.next();

	          case 7:
	            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {
	              _context2.next = 19;
	              break;
	            }

	            key = _step.value;

	            if (!isFileMimeType(key)) {
	              _context2.next = 15;
	              break;
	            }

	            _context2.next = 12;
	            return fileDataToBlob(writeData[key]);

	          case 12:
	            result['image/png'] = _context2.sent;
	            _context2.next = 16;
	            break;

	          case 15:
	            if ([MIME_TYPES.HTML, MIME_TYPES.TEXT].includes(key)) {
	              result[key] = new Blob([writeData[key]], {
	                type: key
	              });
	            } else {
	              console.warn('Support for multiple ClipboardItems is not implemented.(details: https://source.chromium.org/chromium/chromium/src/+/master:ui/base/clipboard/scoped_clipboard_writer.cc;l=22?q=~ScopedClipboardWriter)');
	            }

	          case 16:
	            _iteratorAbruptCompletion = false;
	            _context2.next = 5;
	            break;

	          case 19:
	            _context2.next = 25;
	            break;

	          case 21:
	            _context2.prev = 21;
	            _context2.t0 = _context2["catch"](3);
	            _didIteratorError = true;
	            _iteratorError = _context2.t0;

	          case 25:
	            _context2.prev = 25;
	            _context2.prev = 26;

	            if (!(_iteratorAbruptCompletion && _iterator["return"] != null)) {
	              _context2.next = 30;
	              break;
	            }

	            _context2.next = 30;
	            return _iterator["return"]();

	          case 30:
	            _context2.prev = 30;

	            if (!_didIteratorError) {
	              _context2.next = 33;
	              break;
	            }

	            throw _iteratorError;

	          case 33:
	            return _context2.finish(30);

	          case 34:
	            return _context2.finish(25);

	          case 35:
	            return _context2.abrupt("return", result);

	          case 36:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2, null, [[3, 21, 25, 35], [26,, 30, 34]]);
	  }));
	  return _asyncClipboardDataToBlob.apply(this, arguments);
	}

	function syncClipboardDataToBlob(writeData) {
	  var result = {};

	  for (var _i = 0, _Object$keys = Object.keys(writeData); _i < _Object$keys.length; _i++) {
	    var key = _Object$keys[_i];

	    if (isFileMimeType(key)) {
	      // DOMException: Type image/jpeg not supported on write.
	      result['image/png'] = fileDataToBlob(writeData[key]);
	    } else if ([MIME_TYPES.HTML, MIME_TYPES.TEXT].includes(key)) {
	      result[key] = new Blob([writeData[key]], {
	        type: key
	      });
	    } else {
	      console.warn('Support for multiple ClipboardItems is not implemented.(details: https://source.chromium.org/chromium/chromium/src/+/master:ui/base/clipboard/scoped_clipboard_writer.cc;l=22?q=~ScopedClipboardWriter)');
	    }
	  }

	  return result;
	}

	var isInValidData = function isInValidData(data) {
	  return !data || NONEMPTY_REG.test(data);
	};
	function isSupportWriteFile() {
	  var _window, _nav$clipboard;

	  var nav = window.navigator; // eslint-disable-next-line no-param-reassign

	  var ClipboardItem = (_window = window) == null ? void 0 : _window.ClipboardItem;
	  return (nav == null ? void 0 : (_nav$clipboard = nav.clipboard) == null ? void 0 : _nav$clipboard.write) && !ClipboardItem;
	}
	/**
	 * @param {WriteData} writeData
	 * @return {*}  {Promise<any>}
	 * @description Write file data(allow blob or url) to clipboard.
	 */

	function writeFileToClipboard(_x3) {
	  return _writeFileToClipboard.apply(this, arguments);
	}

	function _writeFileToClipboard() {
	  _writeFileToClipboard = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(writeData) {
	    var _window2, _nav$clipboard2, nav, ClipboardItem, _result, blobData, result;

	    return regenerator.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            _context3.prev = 0;
	            nav = window.navigator; // eslint-disable-next-line no-param-reassign

	            ClipboardItem = (_window2 = window) == null ? void 0 : _window2.ClipboardItem;

	            if (!(!(nav != null && (_nav$clipboard2 = nav.clipboard) != null && _nav$clipboard2.write) || !ClipboardItem)) {
	              _context3.next = 5;
	              break;
	            }

	            return _context3.abrupt("return", Promise.reject(new Error('Your browser does not support navigator.clipboard.write method.')));

	          case 5:
	            if (!IS_SAFARI) {
	              _context3.next = 10;
	              break;
	            }

	            _context3.next = 8;
	            return nav.clipboard.write([new ClipboardItem(syncClipboardDataToBlob(writeData))]);

	          case 8:
	            _result = _context3.sent;
	            return _context3.abrupt("return", Promise.resolve(_result));

	          case 10:
	            _context3.next = 12;
	            return asyncClipboardDataToBlob(writeData);

	          case 12:
	            blobData = _context3.sent;
	            _context3.next = 15;
	            return nav.clipboard.write([new ClipboardItem(blobData)]);

	          case 15:
	            result = _context3.sent;
	            return _context3.abrupt("return", Promise.resolve(result));

	          case 19:
	            _context3.prev = 19;
	            _context3.t0 = _context3["catch"](0);
	            return _context3.abrupt("return", Promise.reject(_context3.t0));

	          case 22:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3, null, [[0, 19]]);
	  }));
	  return _writeFileToClipboard.apply(this, arguments);
	}

	/**
	 * Cannot run on the server.
	 */

	var _commonManager = null;
	/**
	 * Inner class which performs selection from either `text` or `target`
	 * properties and then executes copy or cut operations.
	 */

	var ClipboardManager =
	/**
	 * Create a common manager, write data to clipboard directly without new object.
	 */

	/**
	 * @param {Object} options
	 */
	function ClipboardManager(options) {
	  var _this = this;

	  if (options === void 0) {
	    options = {};
	  }

	  _defineProperty(this, "action", 'copy');

	  _defineProperty(this, "fakeElem", createHiddenTextarea());

	  _defineProperty(this, "container", document.body);

	  _defineProperty(this, "text", ' ');

	  _defineProperty(this, "copyText", function () {
	    var succeeded;

	    try {
	      succeeded = window.document.execCommand(_this.action);
	    } catch (err) {
	      succeeded = false;
	    }

	    var cbResult = {
	      succeeded: succeeded,
	      action: _this.action,
	      text: _this.text
	    };
	    return cbResult;
	  });

	  _defineProperty(this, "createOnAction", function (data) {
	    var action = _this.action;

	    var onAction = function onAction(e) {
	      e.preventDefault();
	      var dataEntries = Object.entries(data);
	      dataEntries.forEach(function (item) {
	        var mimeType = item[0],
	            content = item[1];

	        if (!isFileMimeType(mimeType) && typeof content === 'string') {
	          var text = isInValidData(content) ? ' ' : content;

	          if (mimeType === MIME_TYPES.TEXT) {
	            _this.text = text;
	          }

	          e.clipboardData.setData(mimeType, text);
	        }
	      }); // @ts-ignore

	      _this.fakeElem.removeEventListener(action, onAction);

	      _this.destroy();
	    };

	    return onAction;
	  });

	  _defineProperty(this, "selectFake", function (data) {
	    if (!(_this.fakeElem instanceof HTMLDivElement)) {
	      _this.fakeElem.value = data[MIME_TYPES.TEXT] || '';
	    } else {
	      _this.fakeElem.innerHTML = data[MIME_TYPES.HTML] || '';
	    }

	    _this.container.appendChild(_this.fakeElem);

	    _this.fakeElem.focus();

	    select(_this.fakeElem);
	  });

	  _defineProperty(this, "writeFile", function (data, result) {
	    var activeElement = window.document.activeElement;
	    return new Promise(function (resolve, reject) {
	      if (!isSupportWriteFile()) {
	        _this.writeDataWithoutFile(data);
	      }

	      var selection = window.getSelection();
	      var range = document.createRange();

	      _this.selectFake(data);

	      writeFileToClipboard(data).then(resolve, function (error) {
	        console.warn(error);
	        return result.succeeded ? resolve(result) : reject(result);
	      })["finally"](function () {
	        if (selection) {
	          selection.addRange(range);
	        }

	        _this.destroy();

	        if (activeElement instanceof HTMLTextAreaElement || activeElement instanceof HTMLInputElement) {
	          activeElement.blur();
	          activeElement.focus();
	        }
	      });
	    });
	  });

	  _defineProperty(this, "writeDataWithoutFile", function (data) {
	    var onCopy = _this.createOnAction(data);

	    if (!IS_IOS) {
	      // TODO copy failed in ios version lower than 13 if prevent default event.
	      // @ts-ignore
	      _this.fakeElem.addEventListener(_this.action, onCopy);
	    }

	    var copyDataByExecCommand = function copyDataByExecCommand() {
	      _this.selectFake(data);

	      var copyResult = _this.copyText();

	      _this.destroy();

	      return copyResult;
	    };

	    return copyDataByExecCommand();
	  });

	  _defineProperty(this, "write", function (data, async) {
	    if (async === void 0) {
	      async = true;
	    }

	    var result = _this.writeDataWithoutFile(data); // set media data


	    if (Object.keys(data).some(isFileMimeType)) {
	      return _this.writeFile(data, result);
	    }

	    if (async) {
	      return new Promise(function (resolve, reject) {
	        if (result.succeeded) {
	          return resolve(result);
	        }

	        return reject(result);
	      });
	    }

	    return result;
	  });

	  _defineProperty(this, "writeText", function (clipText, async) {
	    var _this$selectFake;

	    if (async === void 0) {
	      async = true;
	    }

	    _this.text = clipText;

	    _this.selectFake((_this$selectFake = {}, _this$selectFake[MIME_TYPES.TEXT] = clipText, _this$selectFake));

	    var result = _this.copyText();

	    _this.destroy();

	    if (async) {
	      return new Promise(function (resolve, reject) {
	        if (result.succeeded) {
	          return resolve(result);
	        }

	        return reject(result);
	      });
	    }

	    return result;
	  });

	  _defineProperty(this, "destroy", function () {
	    _this.fakeElem.remove();
	  });

	  if (options.action) {
	    this.action = options.action;
	  }

	  if (options.container instanceof HTMLElement) {
	    this.container = options.container;
	  }

	  if (options.target) {
	    this.fakeElem = options.target;
	  }
	}
	/**
	 * Executes the copy operation based on the current selection.
	 */
	;

	_defineProperty(ClipboardManager, "create", function () {
	  if (!IS_BROWSER) {
	    return null;
	  }

	  if (!_commonManager) {
	    _commonManager = new ClipboardManager();
	  }

	  return _commonManager;
	});

	exports.MIME_TYPES = MIME_TYPES;
	exports.default = ClipboardManager;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.map
