import { IClipboardOptions, ICopyTextResult, WriteData } from './types';
/**
 * Inner class which performs selection from either `text` or `target`
 * properties and then executes copy or cut operations.
 */
export default class ClipboardManager {
    private readonly action;
    private fakeElem;
    private readonly container;
    private text;
    /**
     * Create a common manager, write data to clipboard directly without new object.
     */
    static create: () => ClipboardManager | null;
    /**
     * @param {Object} options
     */
    constructor(options?: IClipboardOptions);
    /**
     * Executes the copy operation based on the current selection.
     */
    private copyText;
    /**
     * Create action function.
     */
    private createOnAction;
    /**
     * Creates a fake textarea element, sets its value from `text` property,
     * and makes a selection on it.
     */
    selectFake: (data: WriteData) => void;
    /**
     * Async set file data of clipboard.
     */
    writeFile: (data: WriteData, result: ICopyTextResult) => Promise<ICopyTextResult>;
    /**
     * Set clipboard data without file.
     */
    private writeDataWithoutFile;
    /**
     * Set clipboard data by mine type.
     * Support async and sync syntactic sugars.
     */
    write: (data: WriteData, async?: boolean) => Promise<ICopyTextResult> | ICopyTextResult;
    /**
     * Only set plain text of clipboard.
     * Support async and sync syntactic sugars.
     */
    writeText: (clipText: string, async?: boolean) => Promise<ICopyTextResult> | ICopyTextResult;
    /**
     * Remove fake textarea element.
     */
    destroy: () => void;
}
