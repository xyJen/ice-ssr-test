"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _styled = require("./styled");

var _convertMarks = _interopRequireDefault(require("./convertMarks"));

var _getFileName4Show = _interopRequireDefault(require("./getFileName4Show"));

var _everPluginEmbed = require("@ali/4ever-plugin-embed");

const _createElement = /*#__PURE__*/_react.default.createElement;

const Refer = props => {
  const {
    attributes,
    onDingpanPreview,
    node
  } = props;
  const {
    data
  } = node;
  const {
    name,
    fileType,
    corpId,
    spaceId,
    fileId,
    fileSize
  } = data;
  const text = node.nodes[0];
  const leaf = text.leaves[0];
  const marks = leaf ? leaf.marks : [];
  let isClicked = false;

  const onPreview = _react.default.useCallback(() => {
    if (onDingpanPreview) {
      onDingpanPreview({
        corpId,
        spaceId,
        fileId,
        fileSize,
        fileType,
        fileName: name,
        mode: 'normal'
      });
    }
  }, []);

  const handleTouchStart = _react.default.useCallback(e => {
    e.preventDefault();
    e.stopPropagation();
    isClicked = true;
  }, []);

  const handleTouchMove = _react.default.useCallback(e => {
    e.preventDefault();
    e.stopPropagation();
    isClicked = false;
  }, []);

  const handleTouchEnd = _react.default.useCallback(e => {
    e.preventDefault();
    e.stopPropagation();

    if (isClicked) {
      onPreview();
    }
  }, []);

  const innerType = (0, _everPluginEmbed.getFileTypeForRead)(name);
  const FileIcon = _everPluginEmbed.FileIconMap[innerType];
  return /*#__PURE__*/_createElement("span", attributes, /*#__PURE__*/_createElement(_styled.ReferTextWrapper, {
    "data-testid": "refer",
    onClick: onPreview,
    style: (0, _convertMarks.default)(marks),
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd
  }, FileIcon && /*#__PURE__*/_createElement(FileIcon, null), /*#__PURE__*/_createElement(_styled.ReferText, {
    isMobile: _everCangjie.environment.IS_MOBILE
  }, (0, _getFileName4Show.default)(innerType, data.name))));
};

var _default = /*#__PURE__*/_react.default.memo(Refer);

exports.default = _default;
//# sourceMappingURL=Refer.js.map