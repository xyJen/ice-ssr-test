"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CSS_BTN_TYPE = exports.ButtonWrap = void 0;
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _colors = require("../../common/consts/colors");
var _text = require("../../basic/text");
var _common = require("../../common");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 *   ButtonWrap (button)
 *     Icon (svg)
 *     Text (span)
 */

const CSS_PRIMARY = `
  color: ${_colors.COLORS.WHITE};
  background-color: ${_colors.COLORS.COMMON.BLUE1_COLOR};
  border-color: ${_colors.COLORS.COMMON.BLUE1_COLOR};
  &:not([disabled]){
    &:hover {
      background-color: ${_colors.COLORS.COMMON.BLUE1_HOVER_COLOR};
      border-color: ${_colors.COLORS.COMMON.BLUE1_HOVER_COLOR};
    }
    &:active {
      background-color: ${_colors.COLORS.COMMON.BLUE1_ACTIVE_COLOR};
      border-color: ${_colors.COLORS.COMMON.BLUE1_ACTIVE_COLOR};
    }
  }
  &:disabled {
    color: ${_colors.COLORS.OTHERS.BASIC_WHITE2_COLOR};
    background-color: ${_colors.COLORS.COMMON.BLUE1_HOVER_COLOR};
    border-color: ${_colors.COLORS.TRANSPARENT};
  }
`;
const CSS_DAVINCI = `
  color: ${_colors.COLORS.LIGHT.LEVEL1_BASE_COLOR};
  background-color: ${_colors.COLORS.LIGHT.DAVINCI_BLUE_LIGHT};
  border-color: ${_colors.COLORS.TRANSPARENT};
  &:not([disabled]){
    &:hover {
      background-color: ${_colors.COLORS.LIGHT.DAVINCI_BLUE_LIGHT_BUTTON_HOVER};
    }
    &:active {
      background-color: ${_colors.COLORS.LIGHT.DAVINCI_BLUE_LIGHT_BUTTON_ACTIVE};
    }
  }
  &:disabled {
    color: ${_colors.COLORS.LIGHT.LEVEL4_BASE_COLOR};
  }
`;
const CSS_NORMAL = `
  color: ${_colors.COLORS.LIGHT.LEVEL1_BASE_COLOR};
  background-color: ${_colors.COLORS.WHITE};
  border-color: ${_colors.COLORS.COMMON.LINE_HARD_COLOR};
  &:not([disabled]){
    &:hover {
      background-color: ${_colors.COLORS.OTHERS.DAO_HOVER_BG_COLOR};
    }
    &:active {
      background-color: ${_colors.COLORS.COMMON.LINE_HARD_COLOR};
    }
  }
  &:disabled {
    color: ${_colors.COLORS.LIGHT.LEVEL4_BASE_COLOR};
  }
`;
const CSS_DANGER = `
  color: ${_colors.COLORS.WHITE};
  background-color: ${_colors.COLORS.COMMON.DANGER1_COLOR};
  border-color: ${_colors.COLORS.COMMON.DANGER1_COLOR};
  &:not([disabled]) {
    &:hover {
      background-color: ${_colors.COLORS.COMMON.DANGER1_HOVER_COLOR};
      border-color: ${_colors.COLORS.COMMON.DANGER1_HOVER_COLOR};
    }
    &:active {
      background-color: ${_colors.COLORS.COMMON.DANGER1_ACTIVE_COLOR};
      border-color: ${_colors.COLORS.COMMON.DANGER1_ACTIVE_COLOR};
    }
  }
  &:disabled {
    color: rgba(255, 255, 255, 0.4);
    background-color: ${_colors.COLORS.OTHERS.COMMON_DANGER2_COLOR};
    border-color: ${_colors.COLORS.TRANSPARENT};
  }
`;
const CSS_GHOST = `
  color: ${_colors.COLORS.WHITE};
  border-color: ${_colors.COLORS.WHITE};
  background-color: ${_colors.COLORS.TRANSPARENT};
  &:not([disabled]) {
    &:hover {
      background-color: rgba(255, 255, 255, 0.12);
      border-color: rgba(255, 255, 255, 0.56);
      color: rgba(255, 255, 255, 1);
    }
    &:active {
      background-color: rgba(17, 31, 44, 0.12);
      border-color: rgba(255, 255, 255, 0.56);
      color: rgba(255, 255, 255, 1);
    }
  }
  &:disabled {
    border-color: rgba(255, 255, 255, 0.5);
    color: rgba(255, 255, 255, 0.5);
  }
`;
const CSS_SUNK = `
  color: ${_colors.COLORS.LIGHT.LEVEL1_BASE_COLOR};
  background-color: ${_colors.COLORS.TRANSPARENT};
  border-color: ${_colors.COLORS.TRANSPARENT};
  &:not([disabled]) {
    &:hover {
      background: ${_colors.COLORS.OTHERS.DAO_HOVER_BG_COLOR};
    }
    &:active {
      background: ${_colors.COLORS.COMMON.LINE_HARD_COLOR};
    }
  }
  &:disabled {
    color: ${_colors.COLORS.LIGHT.LEVEL4_BASE_COLOR};
  }
`;
const CSS_TEXT = `
  color: ${_colors.COLORS.COMMON.BLUE1_COLOR};
  background-color: ${_colors.COLORS.TRANSPARENT};
  border-color: ${_colors.COLORS.TRANSPARENT};
  &:not([disabled]) {
    &:hover {
      color: ${_colors.COLORS.COMMON.BLUE1_HOVER_COLOR};
    }
    &:active {
      color: ${_colors.COLORS.COMMON.BLUE1_ACTIVE_COLOR};
    }
  }
  &:disabled {
    color: ${_colors.COLORS.LIGHT.LEVEL4_BASE_COLOR};
  }
`;
// SplitButton 也需引用到这里
const CSS_BTN_TYPE = /*#__PURE__*/(0, _styledComponents.css)(["", " ", " ", " ", " ", " ", " ", ""], ({
  btnType
}) => btnType === 'primary' && CSS_PRIMARY, ({
  btnType
}) => btnType === 'normal' && CSS_NORMAL, ({
  btnType
}) => btnType === 'danger' && CSS_DANGER, ({
  btnType
}) => btnType === 'ghost' && CSS_GHOST, ({
  btnType
}) => btnType === 'text' && CSS_TEXT, ({
  btnType
}) => btnType === 'davinci' && CSS_DAVINCI, ({
  btnType
}) => btnType === 'sunk' && CSS_SUNK);
exports.CSS_BTN_TYPE = CSS_BTN_TYPE;
const ButtonWrap = /*#__PURE__*/_styledComponents.default.button(["", " ", " ", " ", " ", " border:1px solid ", ";", " border-radius:4px;height:", ";display:inline-flex;align-items:center;vertical-align:bottom;padding:", ";", ""], _common.CSS_BORDER_BOX, _text.TEXT_CSS.H2, _common.CSS_DISABLE_SELECT, _common.CSS_CURSOR_DISABLE, (0, _common.CSS_TRANSITION)('all'), _colors.COLORS.TRANSPARENT, CSS_BTN_TYPE, ({
  size
}) => size === 'small' ? '28px' : '32px', ({
  size,
  content
}) => content === 'only-icon' ? size === 'small' ? '0 3px' : '0 4px' : size === 'small' ? '0 8px' : '0 12px', ({
  content
}) =>
// 如果同时有 icon 和 text，则 text 左侧预留 margin
content === 'icon-text' ? `
      & > :first-child{
        margin-right: 8px;
      }
    ` : null);
exports.ButtonWrap = ButtonWrap;
//# sourceMappingURL=styled.js.map