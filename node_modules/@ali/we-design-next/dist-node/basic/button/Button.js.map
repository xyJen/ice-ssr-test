{"version":3,"file":"Button.js","names":["Button","memo","forwardRef","props","ref","children","size","type","icon","disabled","rest","mergeRestProps","displayName"],"sources":["../../../../src/basic/button/Button.tsx"],"sourcesContent":["import React, { memo, forwardRef, ReactNode } from 'react';\nimport { mergeRestProps, MergePropsType } from '../../common';\nimport { ButtonWrap } from './styled';\n\nexport type IButtonProps = MergePropsType<{\n  /**\n   * 按钮类型\n   */\n  type?: 'normal' | 'primary' | 'danger' | 'text' | 'davinci' | 'sunk' | 'ghost';\n  /**\n   * 按钮尺寸\n   */\n  size?: 'small' | 'normal';\n  /**\n   * 按钮图标\n   */\n  icon?: ReactNode;\n  /**\n   * 按钮是否禁用\n   */\n  disabled?: boolean;\n}, React.ButtonHTMLAttributes<HTMLButtonElement>>;\n\nexport const Button = memo(\n\n  forwardRef<HTMLButtonElement, IButtonProps>(\n    (props, ref) => {\n      const {\n        children,\n        size,\n        type = 'normal',\n        icon,\n        disabled,\n        ...rest\n      } = props;\n\n      return (\n        <ButtonWrap\n          ref={ref}\n          size={size}\n          disabled={disabled}\n          btnType={type}\n          content={(icon && children) ? 'icon-text' : children ? 'only-text' : 'only-icon'}\n          {...mergeRestProps(rest, 'wdn-button')}\n        >\n          {icon}\n          {children}\n        </ButtonWrap>\n      );\n    }),\n);\n\nButton.displayName = 'Button';"],"mappings":";;;;;;;;AAAA;AACA;AACA;AAAsC;AAAA;AAAA,uBADV;AAsBrB,MAAMA,MAAM,gBAAG,IAAAC,WAAI,gBAExB,IAAAC,iBAAU,EACR,CAACC,KAAK,EAAEC,GAAG,KAAK;EACd,MAAM;IACJC,QAAQ;IACRC,IAAI;IACJC,IAAI,GAAG,QAAQ;IACfC,IAAI;IACJC,QAAQ;IACR,GAAGC;EACL,CAAC,GAAGP,KAAK;EAET,oBACE,eAAC,kBAAU;IACT,GAAG,EAAEC,GAAI;IACT,IAAI,EAAEE,IAAK;IACX,QAAQ,EAAEG,QAAS;IACnB,OAAO,EAAEF,IAAK;IACd,OAAO,EAAGC,IAAI,IAAIH,QAAQ,GAAI,WAAW,GAAGA,QAAQ,GAAG,WAAW,GAAG;EAAY,GAC7E,IAAAM,sBAAc,EAACD,IAAI,EAAE,YAAY,CAAC,GAErCF,IAAI,EACJH,QAAQ,CACE;AAEjB,CAAC,CAAC,CACL;AAAC;AAEFL,MAAM,CAACY,WAAW,GAAG,QAAQ"}