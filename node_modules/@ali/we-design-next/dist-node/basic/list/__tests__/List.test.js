"use strict";

var React = _interopRequireWildcard(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom");
var _index = require("../index");
var _common = require("../../../common");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/React.createElement;
test('List: should render items.', () => {
  (0, _react2.render)( /*#__PURE__*/_createElement(_index.List, {
    items: ['Item1', 'Item2', 'Item3']
  }));
  expect(_react2.screen.queryByText('Item1')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item2')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item3')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item4')).toBeNull();
});
test('List: should render divider.', () => {
  (0, _react2.render)( /*#__PURE__*/_createElement(_index.List, {
    items: ['Item1', 'divider', 'Item3']
  }));
  expect(_react2.screen.queryByRole('separator')).toBeInTheDocument();
});
test('List: should render group title.', () => {
  (0, _react2.render)( /*#__PURE__*/_createElement(_index.List, {
    items: ['Item1', {
      title: 'Group1',
      items: ['Item2', 'Item3']
    }, 'Item4']
  }));
  expect(_react2.screen.queryByText('Item1')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Group1')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item2')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item3')).toBeInTheDocument();
});
test('List: should render items (normalized).', () => {
  (0, _react2.render)( /*#__PURE__*/_createElement(_index.List, {
    items: ['Item1', 'Item2', 'Item3'].map(s => ({
      key: s,
      title: s
    }))
  }));
  expect(_react2.screen.queryByText('Item1')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item2')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item3')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item4')).toBeNull();
});
test('List: should render custom items (normalized).', () => {
  (0, _react2.render)( /*#__PURE__*/_createElement(_index.List, {
    items: ['Item1', 'Item2', 'Item3'],
    renderItem: k => /*#__PURE__*/_createElement(_index.List.Item, null, k.key + '-C')
  }));
  expect(_react2.screen.queryByText('Item1-C')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item2-C')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item3-C')).toBeInTheDocument();
});
test('List: should render custom items (content).', () => {
  (0, _react2.render)( /*#__PURE__*/_createElement(_index.List, {
    items: ['Item1', 'Item2', 'Item3'].map(s => ({
      key: s,
      content: /*#__PURE__*/_createElement("span", null, s + '-C')
    }))
  }));
  expect(_react2.screen.queryByText('Item1-C')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item2-C')).toBeInTheDocument();
  expect(_react2.screen.queryByText('Item3-C')).toBeInTheDocument();
});
test('List: should trigger active change when mouse enter.', async () => {
  const fn = jest.fn();
  (0, _react2.render)( /*#__PURE__*/_createElement(_index.List, {
    onActiveChange: fn,
    items: ['Item1', 'Item2', 'Item3']
  }));
  expect(fn).not.toHaveBeenCalled();
  _react2.fireEvent.mouseEnter(_react2.screen.getByText('Item2'));
  expect(fn).toHaveBeenCalled();
  expect(fn).toHaveBeenCalledTimes(1);
  expect(fn).toHaveBeenLastCalledWith('Item2', {
    from: 'mouse'
  });
  _react2.fireEvent.mouseEnter(_react2.screen.getByText('Item1'));
  expect(fn).toHaveBeenCalledTimes(2);
  expect(fn).toHaveBeenLastCalledWith('Item1', {
    from: 'mouse'
  });
});
test('List: should trigger active change for keyboard event.', async () => {
  const fn = jest.fn();
  const r = (0, _react2.render)( /*#__PURE__*/_createElement(_index.List, {
    id: 'list',
    onActiveChange: fn,
    items: ['Item1', 'Item2', 'Item3']
  }));
  expect(fn).not.toHaveBeenCalled();
  _react2.fireEvent.mouseEnter(_react2.screen.getByText('Item1')); // make it active

  const list = r.container.querySelector('.wdn-list');
  _react2.fireEvent.keyDown(list, {
    keyCode: _common.KEY_CODES.DOWN
  });
  expect(fn).toHaveBeenCalledTimes(2);
  expect(fn).toHaveBeenLastCalledWith('Item2', {
    from: 'keyboard'
  });
  _react2.fireEvent.keyDown(list, {
    keyCode: _common.KEY_CODES.DOWN
  });
  expect(fn).toHaveBeenCalledTimes(3);
  expect(fn).toHaveBeenLastCalledWith('Item3', {
    from: 'keyboard'
  });
  _react2.fireEvent.keyDown(list, {
    keyCode: _common.KEY_CODES.DOWN
  });
  expect(fn).toHaveBeenCalledTimes(3);
  _react2.fireEvent.keyDown(list, {
    keyCode: _common.KEY_CODES.UP
  });
  expect(fn).toHaveBeenCalledTimes(4);
  expect(fn).toHaveBeenLastCalledWith('Item2', {
    from: 'keyboard'
  });
});
test('List: should trigger on select for mouse click event.', async () => {
  const fn = jest.fn();
  (0, _react2.render)( /*#__PURE__*/_createElement(_index.List, {
    id: 'list',
    onSelect: fn,
    items: ['Item1', 'Item2', 'Item3']
  }));
  const item1 = _react2.screen.getByText('Item1');
  _react2.fireEvent.click(item1);
  expect(fn).toHaveBeenCalled();
});
test('List: should trigger on select for keyboard event.', async () => {
  const fn = jest.fn();
  const r = (0, _react2.render)( /*#__PURE__*/_createElement(_index.List, {
    id: 'list',
    onSelect: fn,
    items: ['Item1', 'Item2', 'Item3']
  }));
  _react2.fireEvent.mouseEnter(_react2.screen.getByText('Item1')); // make it active

  const list = r.container.querySelector('.wdn-list');
  _react2.fireEvent.keyDown(list, {
    keyCode: _common.KEY_CODES.ENTER
  });
  expect(fn).toHaveBeenCalled();
});
//# sourceMappingURL=List.test.js.map