"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loopNested = exports.isNormalized = exports.isEnabled = exports.isCustomized = exports.flattenNested = void 0;
const loopNested = (nested, pushItem, pushRest, fromString) => {
  let restIdx = 0;
  for (let i = 0; i < nested.length; i++) {
    const it = nested[i];
    if (it === 'divider') {
      if (i !== 0 && i !== nested.length - 1) {
        pushRest(['divider', restIdx++]);
      }
    } else if (typeof it === 'string') {
      pushItem(fromString(it));
    } else if ('key' in it && typeof it.key === 'string') {
      pushItem(it);
    } else if ('title' in it && 'items' in it && Array.isArray(it.items)) {
      if (i !== 0) {
        const prevItem = nested[i - 1];
        if (typeof prevItem !== 'string' && 'title' in prevItem && 'items' in prevItem && Array.isArray(prevItem.items)) {
          // do nothing
        } else {
          pushRest(['divider', restIdx++]);
        }
      }
      pushRest(['group', it.title, restIdx++]);
      loopNested(it.items, pushItem, pushRest, fromString);
      if (i !== nested.length - 1) {
        // 最后一个分隔线不推
        pushRest(['divider', restIdx++]);
      }
    }
  }
};
exports.loopNested = loopNested;
const flattenNested = (nested, fromString) => {
  const res = [];
  loopNested(nested, t => res.push(t), () => 0, fromString || (key => ({
    key,
    title: key
  })));
  return res;
};
exports.flattenNested = flattenNested;
const isNormalized = t => 'title' in t && !!t.title;
exports.isNormalized = isNormalized;
const isCustomized = t => !isNormalized(t);
exports.isCustomized = isCustomized;
const isEnabled = t => !isNormalized(t) || !t.disabled;
exports.isEnabled = isEnabled;
//# sourceMappingURL=nested.js.map