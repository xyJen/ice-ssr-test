"use strict";

var React = _interopRequireWildcard(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom");
var _InputNumber3 = require("../InputNumber");
var _common = require("../../../common");
var _InputNumber, _InputNumber2;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/React.createElement;
test('InputNumber: should render content.', () => {
  const r = (0, _react2.render)(_InputNumber || (_InputNumber = /*#__PURE__*/_createElement(_InputNumber3.InputNumber, {
    value: 2022
  })));
  expect(r.container.querySelector('[value="2022"]')).toBeInTheDocument();
});
test('InputNumber: should render content with digits.', () => {
  const r = (0, _react2.render)(_InputNumber2 || (_InputNumber2 = /*#__PURE__*/_createElement(_InputNumber3.InputNumber, {
    value: 3,
    digits: 2
  })));
  expect(r.container.querySelector('[value="3.00"]')).toBeInTheDocument();
});
test('InputNumber: should trigger onChange with keyboard input.', () => {
  const fn = jest.fn();
  const r = (0, _react2.render)( /*#__PURE__*/_createElement(_InputNumber3.InputNumber, {
    onChange: fn
  }));
  expect(fn).not.toHaveBeenCalled();
  _react2.fireEvent.change(r.container.querySelector('input'), {
    target: {
      value: '1'
    }
  });
  expect(fn).toHaveBeenCalled();
  expect(fn).toHaveBeenCalledTimes(1);
  expect(fn).toHaveBeenLastCalledWith(1);
  _react2.fireEvent.change(r.container.querySelector('input'), {
    target: {
      value: ''
    }
  });
  expect(fn).toHaveBeenCalledTimes(2);
  expect(fn).toHaveBeenLastCalledWith(null);
  _react2.fireEvent.change(r.container.querySelector('input'), {
    target: {
      value: '-'
    }
  });
  expect(r.container.querySelector('[value="-"]')).toBeInTheDocument();
  expect(fn).toHaveBeenCalledTimes(2);
  _react2.fireEvent.change(r.container.querySelector('input'), {
    target: {
      value: '-1'
    }
  });
  expect(fn).toHaveBeenCalledTimes(3);
  expect(fn).toHaveBeenLastCalledWith(-1);
  _react2.fireEvent.change(r.container.querySelector('input'), {
    target: {
      value: '-1.'
    }
  });
  expect(fn).toHaveBeenCalledTimes(3);
});
test('InputNumber: should trigger onChange with increase / decrease button.', () => {
  const fn = jest.fn();
  const r = (0, _react2.render)( /*#__PURE__*/_createElement(_InputNumber3.InputNumber, {
    onChange: fn,
    defaultValue: 0
  }));
  const nodes = r.container.querySelectorAll('svg');
  const [incr, decr] = [0, 1].map(i => nodes.item(i));
  _react2.fireEvent.click(incr);
  expect(fn).toHaveBeenCalledTimes(1);
  expect(fn).toHaveBeenLastCalledWith(1);
  _react2.fireEvent.click(incr);
  expect(fn).toHaveBeenCalledTimes(2);
  expect(fn).toHaveBeenLastCalledWith(2);
  _react2.fireEvent.click(decr);
  expect(fn).toHaveBeenCalledTimes(3);
  expect(fn).toHaveBeenLastCalledWith(1);
});
test('InputNumber: should trigger onChange with increase / decrease button pressing.', async () => {
  let i = 0;
  const fn = jest.fn(n => i = n);
  const r = (0, _react2.render)( /*#__PURE__*/_createElement(_InputNumber3.InputNumber, {
    onChange: fn,
    defaultValue: 0
  }));
  const nodes = r.container.querySelectorAll('svg');
  const [incr, decr] = [0, 1].map(i => nodes.item(i));
  _react2.fireEvent.mouseDown(incr);
  await new Promise(res => setTimeout(res, 2000));
  _react2.fireEvent.mouseUp(incr);
  expect(fn).toHaveBeenCalled();
  expect(i).toBeGreaterThan(3);
  await new Promise(res => setTimeout(res, 500));
  _react2.fireEvent.mouseDown(decr);
  await new Promise(res => setTimeout(res, 4000));
  _react2.fireEvent.mouseUp(decr);
  expect(fn).toHaveBeenCalled();
  expect(i).toBeLessThan(-3);
}, 10000);
test('InputNumber: should not trigger onChange with increase / decrease button pressing shortly.', async () => {
  let i = 0;
  const fn = jest.fn(n => i = n);
  const r = (0, _react2.render)( /*#__PURE__*/_createElement(_InputNumber3.InputNumber, {
    onChange: fn,
    defaultValue: 0
  }));
  const nodes = r.container.querySelectorAll('svg');
  const [incr, decr] = [0, 1].map(i => nodes.item(i));
  _react2.fireEvent.mouseDown(incr);
  await new Promise(res => setTimeout(res, 200));
  expect(fn).not.toHaveBeenCalled();
  _react2.fireEvent.mouseUp(incr);
});
test('InputNumber: should trigger onEnter.', () => {
  const fn = jest.fn();
  const r = (0, _react2.render)( /*#__PURE__*/_createElement(_InputNumber3.InputNumber, {
    onEnter: fn,
    defaultValue: 0
  }));
  _react2.fireEvent.keyDown(r.container.querySelector('input'), {
    keyCode: _common.KEY_CODES.ENTER
  });
  expect(fn).toHaveBeenCalledTimes(1);
});
test('InputNumber: should trigger onBlur.', () => {
  const fn = jest.fn();
  const r = (0, _react2.render)( /*#__PURE__*/_createElement(_InputNumber3.InputNumber, {
    onBlur: fn,
    defaultValue: 0
  }));
  const input = r.container.querySelector('input');
  _react2.fireEvent.change(input, {
    target: {
      value: '-1.'
    }
  });
  expect(r.container.querySelector('[value="-1."]')).toBeInTheDocument();
  _react2.fireEvent.blur(input);
  expect(fn).toHaveBeenCalled();
  expect(r.container.querySelector('[value="-1."]')).toBeNull();
  expect(r.container.querySelector('[value="-1"]')).toBeInTheDocument();
});
//# sourceMappingURL=InputNumber.test.js.map