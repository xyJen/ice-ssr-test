"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputNumber = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _Input = require("../input/Input");
var _common = require("../../common");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const isValidNumber = text => !isNaN(parseFloat(text));
const toValidNumber = text => parseFloat(text);

// 是否是合法的数字，或者是形如 '-' 或 '1.' 这样输入到一半的片段
const isValidNumberFragment = text => text !== '' && /^-?(\d+(\.\d*)?)?$/.test(text);

// 小数位数仅支持大于等于 0 的整数
const normalizeDigits = d => Math.floor(Math.max(d, 0));
const setDelayInterval = (fn, delay, interval) => {
  let it = 0;
  let timeout = setTimeout(() => {
    it = setInterval(fn, interval);
    timeout = null;
  }, delay);
  return () => {
    if (timeout) {
      clearTimeout(timeout);
    } else {
      clearInterval(it);
    }
  };
};
const InputNumber = /*#__PURE__*/_react.default.memo(props => {
  const {
    defaultValue,
    value,
    onChange,
    min = -Infinity,
    max = Infinity,
    step = 1,
    bordered = true,
    digits,
    control = true,
    onBlur,
    onEnter,
    disabled,
    ...rest
  } = props;
  const [v, setV] = (0, _common.useDefaultProp)(defaultValue, value, onChange);
  const [t, setT] = (0, _react.useState)(undefined);
  const handleIncrease = (0, _common.useEventCallback)(() => {
    if (typeof v === 'number') {
      setT(undefined);
      setV(Math.min(v + step, max));
    }
  });
  const handleDecrease = (0, _common.useEventCallback)(() => {
    if (typeof v === 'number') {
      setT(undefined);
      setV(Math.max(v - step, min));
    }
  });
  const timingRef = (0, _react.useRef)(undefined);
  const handleIncreasingStart = (0, _common.useEventCallback)(() => {
    if (timingRef.current === undefined) {
      timingRef.current = setDelayInterval(handleIncrease, 800, 60);
    }
  });
  const handleDecreasingStart = (0, _common.useEventCallback)(() => {
    if (timingRef.current === undefined) {
      timingRef.current = setDelayInterval(handleDecrease, 800, 60);
    }
  });
  const handleIncreasingDecreasingEnd = (0, _common.useEventCallback)(() => {
    if (typeof timingRef.current === 'function') {
      timingRef.current();
      timingRef.current = undefined;
    }
  });
  const handleChange = (0, _common.useEventCallback)(e => {
    const text = e.target.value;
    if (text === '') {
      setT(undefined);
      setV(undefined);
    } else if (isValidNumber(text)) {
      setT(text);
      setV(Math.max(Math.min(toValidNumber(text), max), min));
    } else if (isValidNumberFragment(text)) {
      setT(text);
    }
  });
  const handleEnter = (0, _common.useEventCallback)(e => {
    setT(undefined);
    onEnter && onEnter(e);
  });
  const handleBlur = (0, _common.useEventCallback)(e => {
    setT(undefined);
    onBlur && onBlur(e);
  });
  return /*#__PURE__*/_createElement(_Input.Input, (0, _extends2.default)({
    value: typeof t === 'string' ? t : typeof v === 'number' ? typeof digits === 'number' ? v.toFixed(normalizeDigits(digits)) : v.toString() : '',
    onChange: handleChange,
    disabled: disabled,
    bordered: bordered,
    onEnter: handleEnter,
    suffix: control ? /*#__PURE__*/_createElement(_styled.NumberControlWrap, null, /*#__PURE__*/_createElement(_styled.ArrowUpIcon, {
      disabled: !!disabled || typeof v !== 'number' || (control === 'flip' ? v <= min : v >= max),
      onClick: control === 'flip' ? handleDecrease : handleIncrease,
      onMouseDown: control === 'flip' ? handleDecreasingStart : handleIncreasingStart,
      onMouseUp: handleIncreasingDecreasingEnd,
      onMouseLeave: handleIncreasingDecreasingEnd
    }), /*#__PURE__*/_createElement(_styled.ArrowDownIcon, {
      disabled: !!disabled || typeof v !== 'number' || (control === 'flip' ? v >= max : v <= min),
      onClick: control === 'flip' ? handleIncrease : handleDecrease,
      onMouseDown: control === 'flip' ? handleIncreasingStart : handleDecreasingStart,
      onMouseUp: handleIncreasingDecreasingEnd,
      onMouseLeave: handleIncreasingDecreasingEnd
    })) : undefined
  }, (0, _common.mergeRestProps)(rest, 'wdn_input_number', {
    paddingRight: 0,
    overflow: 'hidden'
  }), {
    onBlur: handleBlur
  }));
});
exports.InputNumber = InputNumber;
//# sourceMappingURL=InputNumber.js.map