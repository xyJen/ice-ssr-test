"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SketchFields = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactcss = _interopRequireDefault(require("reactcss"));
var color = _interopRequireWildcard(require("./helpers/color"));
var _common = require("./common");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable no-param-reassign */
const _createElement = /*#__PURE__*/_react.default.createElement;
const SketchFields = ({
  onChange,
  rgb,
  hsl,
  hex,
  disableAlpha
}) => {
  const styles = (0, _reactcss.default)({
    default: {
      fields: {
        display: 'flex',
        paddingTop: '4px'
      },
      single: {
        flex: '1',
        paddingLeft: '6px'
      },
      alpha: {
        flex: '1',
        paddingLeft: '6px'
      },
      double: {
        flex: '2'
      },
      input: {
        width: '80%',
        padding: '4px 10% 3px',
        border: 'none',
        boxShadow: 'inset 0 0 0 1px #ccc',
        fontSize: '11px'
      },
      label: {
        display: 'block',
        textAlign: 'center',
        fontSize: '11px',
        color: '#222',
        paddingTop: '3px',
        paddingBottom: '4px',
        textTransform: 'capitalize'
      }
    },
    disableAlpha: {
      alpha: {
        display: 'none'
      }
    }
  }, {
    disableAlpha
  });
  const handleChange = (data, e) => {
    if (data.hex) {
      color.isValidHex(data.hex) && onChange({
        hex: data.hex,
        source: 'hex'
      }, e);
    } else if (data.r || data.g || data.b) {
      onChange({
        r: data.r || rgb.r,
        g: data.g || rgb.g,
        b: data.b || rgb.b,
        a: rgb.a,
        source: 'rgb'
      }, e);
    } else if (data.a) {
      if (data.a < 0) {
        data.a = 0;
      } else if (data.a > 100) {
        data.a = 100;
      }
      data.a /= 100;
      onChange({
        h: hsl.h,
        s: hsl.s,
        l: hsl.l,
        a: data.a,
        source: 'rgb'
      }, e);
    }
  };
  return /*#__PURE__*/_createElement("div", {
    style: styles.fields,
    className: "flexbox-fix"
  }, /*#__PURE__*/_createElement("div", {
    style: styles.double
  }, /*#__PURE__*/_createElement(_common.EditableInput, {
    style: {
      input: styles.input,
      label: styles.label
    },
    label: "hex",
    value: hex.replace('#', ''),
    onChange: handleChange
  })), /*#__PURE__*/_createElement("div", {
    style: styles.single
  }, /*#__PURE__*/_createElement(_common.EditableInput, {
    style: {
      input: styles.input,
      label: styles.label
    },
    label: "r",
    value: rgb.r,
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "255"
  })), /*#__PURE__*/_createElement("div", {
    style: styles.single
  }, /*#__PURE__*/_createElement(_common.EditableInput, {
    style: {
      input: styles.input,
      label: styles.label
    },
    label: "g",
    value: rgb.g,
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "255"
  })), /*#__PURE__*/_createElement("div", {
    style: styles.single
  }, /*#__PURE__*/_createElement(_common.EditableInput, {
    style: {
      input: styles.input,
      label: styles.label
    },
    label: "b",
    value: rgb.b,
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "255"
  })), /*#__PURE__*/_createElement("div", {
    style: styles.alpha
  }, /*#__PURE__*/_createElement(_common.EditableInput, {
    style: {
      input: styles.input,
      label: styles.label
    },
    label: "a",
    value: Math.round(rgb.a * 100),
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "100"
  })));
};
exports.SketchFields = SketchFields;
var _default = SketchFields;
exports.default = _default;
//# sourceMappingURL=SketchFields.js.map