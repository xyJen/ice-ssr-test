"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EditableInput = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactcss = _interopRequireDefault(require("reactcss"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const DEFAULT_ARROW_OFFSET = 1;
const UP_KEY_CODE = 38;
const DOWN_KEY_CODE = 40;
const ENTER_KEY_CODE = 13;
const VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];
const isValidKeyCode = keyCode => VALID_KEY_CODES.indexOf(keyCode) > -1;
const getNumberValue = value => Number(String(value).replace(/%/g, ''));
class EditableInput extends (_react.PureComponent || _react.Component) {
  constructor(props) {
    super();
    this.handleBlur = e => {
      // 给 e 加一个 _blur 属性
      // 用于 onChangeComplete
      e._blur = true;
      this.setUpdatedValue(this.state.value, e);
      if (this.state.blurValue) {
        this.setState({
          value: this.state.blurValue,
          blurValue: null
        });
      }
    };
    this.handleChange = e => {
      this.setUpdatedValue(e.target.value, e);
    };
    this.handleKeyDown = e => {
      e.stopPropagation();
      // In case `e.target.value` is a percentage remove the `%` character
      // and update accordingly with a percentage
      // https://github.com/casesandberg/react-color/issues/383
      const value = getNumberValue(e.target.value);
      if (!isNaN(value) && isValidKeyCode(e.keyCode)) {
        const offset = this.getArrowOffset();
        const updatedValue = e.keyCode === UP_KEY_CODE ? value + offset : value - offset;
        this.setUpdatedValue(updatedValue, e);
      }

      // Enter to blur
      if (e.keyCode === ENTER_KEY_CODE) {
        e.target.blur();
      }
    };
    this.handleDrag = e => {
      if (this.props.dragLabel) {
        const newValue = Math.round(this.props.value + e.movementX);
        if (newValue >= 0 && newValue <= this.props.dragMax) {
          this.props.onChange && this.props.onChange(this.getValueObjectWithLabel(newValue), e);
        }
      }
    };
    this.handleMouseDown = e => {
      if (this.props.dragLabel) {
        e.preventDefault();
        this.handleDrag(e);
        window.addEventListener('mousemove', this.handleDrag);
        window.addEventListener('mouseup', this.handleMouseUp);
      }
    };
    this.handleMouseUp = () => {
      this.unbindEventListeners();
    };
    this.unbindEventListeners = () => {
      window.removeEventListener('mousemove', this.handleDrag);
      window.removeEventListener('mouseup', this.handleMouseUp);
    };
    this.state = {
      value: String(props.value).toUpperCase(),
      blurValue: String(props.value).toUpperCase()
    };
  }
  componentDidUpdate(prevProps, prevState) {
    if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {
      if (this.input === document.activeElement) {
        this.setState({
          blurValue: String(this.props.value).toUpperCase()
        });
      } else {
        this.setState({
          value: String(this.props.value).toUpperCase(),
          blurValue: !this.state.blurValue && String(this.props.value).toUpperCase()
        });
      }
    }
  }
  componentWillUnmount() {
    this.unbindEventListeners();
  }
  getValueObjectWithLabel(value) {
    return {
      [this.props.label]: value
    };
  }
  getArrowOffset() {
    return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;
  }
  setUpdatedValue(value, e) {
    const onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value;

    // 给 e 加一个 _input 属性
    // 表明这次的 onChange 由输入框触发
    e._input = true;
    this.props.onChange && this.props.onChange(onChangeValue, e);
    this.setState({
      value
    });
  }
  render() {
    const styles = (0, _reactcss.default)({
      default: {
        wrap: {
          position: 'relative'
        }
      },
      'user-override': {
        wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},
        input: this.props.style && this.props.style.input ? this.props.style.input : {},
        label: this.props.style && this.props.style.label ? this.props.style.label : {}
      },
      'dragLabel-true': {
        label: {
          cursor: 'ew-resize'
        }
      }
    }, {
      'user-override': true
    }, this.props);
    return /*#__PURE__*/_createElement("div", {
      style: styles.wrap
    }, /*#__PURE__*/_createElement("input", {
      style: styles.input,
      ref: input => {
        this.input = input;
      },
      value: this.state.value,
      onKeyDown: this.handleKeyDown,
      onChange: this.handleChange,
      onBlur: this.handleBlur,
      placeholder: this.props.placeholder,
      spellCheck: "false"
    }), this.props.label && !this.props.hideLabel ? /*#__PURE__*/_createElement("span", {
      style: styles.label,
      onMouseDown: this.handleMouseDown
    }, this.props.label) : null);
  }
}
exports.EditableInput = EditableInput;
var _default = EditableInput;
exports.default = _default;
//# sourceMappingURL=EditableInput.js.map