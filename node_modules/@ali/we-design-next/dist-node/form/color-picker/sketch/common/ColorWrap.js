"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ColorWrap = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _lodash = require("lodash");
var color = _interopRequireWildcard(require("../helpers/color"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const ColorWrap = Picker => {
  class ColorPicker extends (_react.PureComponent || _react.Component) {
    constructor(props) {
      super();
      this.handleChange = (data, event) => {
        const isValidColor = color.simpleCheckForValidColor(data);
        if (isValidColor) {
          const colors = color.toState(data, data.h || this.state.oldHue);
          this.setState(colors);
          this.props.onChange && this.props.onChange(colors, event);

          // 不是来自输入框
          // 如果来自输入框，需要是 blur 触发
          if (event._input && event._blur || !event._input) {
            this.props.onChangeComplete && this.debounce(this.props.onChangeComplete, colors, event);
          }
        }
      };
      this.handleSwatchHover = (data, event) => {
        const isValidColor = color.simpleCheckForValidColor(data);
        if (isValidColor) {
          const colors = color.toState(data, data.h || this.state.oldHue);
          this.props.onSwatchHover && this.props.onSwatchHover(colors, event);
        }
      };
      this.state = {
        ...color.toState(props.color, 0)
      };
      this.debounce = (0, _lodash.debounce)((fn, data, event) => {
        fn(data, event);
      }, 100);
    }
    static getDerivedStateFromProps(nextProps, state) {
      return {
        ...color.toState(nextProps.color, state.oldHue)
      };
    }
    render() {
      const optionalEvents = {};
      if (this.props.onSwatchHover) {
        optionalEvents.onSwatchHover = this.handleSwatchHover;
      }
      return /*#__PURE__*/_createElement(Picker, (0, _extends2.default)({}, this.props, this.state, {
        onChange: this.handleChange
      }, optionalEvents));
    }
  }
  ColorPicker.propTypes = {
    ...Picker.propTypes
  };
  ColorPicker.defaultProps = {
    ...Picker.defaultProps,
    color: {
      h: 250,
      s: 0.5,
      l: 0.2,
      a: 1
    }
  };
  return ColorPicker;
};
exports.ColorWrap = ColorWrap;
var _default = ColorWrap;
exports.default = _default;
//# sourceMappingURL=ColorWrap.js.map