"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimePanel = void 0;
var _react = _interopRequireWildcard(require("react"));
var _locale = require("../../../../locale");
var _TimeColumn = require("./TimeColumn");
var _Header = require("../Header");
var _styled = require("./styled");
var _dateUtil = require("../../date-util");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const hours = (0, _TimeColumn.generateUnits)(0, 23);
const minutes = (0, _TimeColumn.generateUnits)(0, 59);
const seconds = (0, _TimeColumn.generateUnits)(0, 59);
const TimePanel = /*#__PURE__*/_react.default.memo(props => {
  const {
    value,
    onSelect,
    showNow,
    timeFormat,
    showHeader = true
  } = props;
  const dayjsLocale = (0, _locale.useDayjsLocale)();
  const t = (0, _locale.useTranslate)();
  const showSecond = timeFormat === 'hms';
  const format = showSecond ? 'HH:mm:ss' : 'HH:mm';
  const hour = value ? _dateUtil.DateController.getHour(value) : -1;
  const minute = value ? _dateUtil.DateController.getMinute(value) : -1;
  const second = value ? _dateUtil.DateController.getSecond(value) : -1;
  const setTime = (0, _react.useCallback)((newHour, newMinute, newSecond) => {
    const curDate = value || _dateUtil.DateController.getNow();
    const mergedHour = Math.max(0, newHour);
    const mergedMinute = Math.max(0, newMinute);
    const mergedSecond = Math.max(0, newSecond);
    let newDate = _dateUtil.DateController.setHour(curDate.clone(), mergedHour);
    newDate = _dateUtil.DateController.setMinute(newDate, mergedMinute);
    newDate = _dateUtil.DateController.setSecond(newDate, mergedSecond);
    return newDate;
  }, [value]);
  return /*#__PURE__*/_createElement(_styled.TimePanelWrapper, {
    showNow: showNow,
    showHeader: showHeader
  }, showHeader ? /*#__PURE__*/_createElement(_Header.Header, {
    className: "header-border"
  }, value ? _dateUtil.DateController.locale.format(dayjsLocale, value, format) : null) : null, /*#__PURE__*/_createElement(_styled.ColumWrapper, {
    showHeader: showHeader
  }, /*#__PURE__*/_createElement(_TimeColumn.TimeColumn, {
    value: hour,
    units: hours,
    onSelect: num => onSelect(setTime(num, minute, second)),
    title: t('wdn_date_picker_hour'),
    showNow: showNow
  }), /*#__PURE__*/_createElement(_TimeColumn.TimeColumn, {
    value: minute,
    units: minutes,
    onSelect: num => onSelect(setTime(hour, num, second)),
    title: t('wdn_date_picker_minute'),
    showNow: showNow
  }), showSecond ? /*#__PURE__*/_createElement(_TimeColumn.TimeColumn, {
    value: second,
    units: seconds,
    onSelect: num => onSelect(setTime(hour, minute, num)),
    title: t('wdn_date_picker_second'),
    showNow: showNow
  }) : null));
});
exports.TimePanel = TimePanel;
//# sourceMappingURL=TimePanel.js.map