"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YearPanel = void 0;
var _react = _interopRequireWildcard(require("react"));
var _styled = require("../DatePanel/styled");
var _Header = require("../Header");
var _PanelBody = require("../PanelBody");
var _dateUtil = require("../../date-util");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const YEAR_DECADE_COUNT = 10;
const YEAR_COL_COUNT = 3;
const YEAR_ROW_COUNT = 4;
const YearPanel = /*#__PURE__*/_react.default.memo(props => {
  const {
    viewDate,
    value,
    onPanelChange,
    onSelect,
    disabledDate,
    showNow,
    nowNode
  } = props;
  const yearNumber = _dateUtil.DateController.getYear(viewDate);
  const startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;
  const endYear = startYear + YEAR_DECADE_COUNT - 1;
  const baseYear = _dateUtil.DateController.setYear(viewDate, startYear - Math.ceil((YEAR_COL_COUNT * YEAR_ROW_COUNT - YEAR_DECADE_COUNT) / 2));
  const handleSelect = (0, _react.useCallback)(value => {
    onSelect(value);
    onPanelChange('year', "date");
  }, [onSelect]);
  const onDecadeChange = (0, _react.useCallback)(diff => {
    const newDate = _dateUtil.DateController.addYear(viewDate, diff * 10);
    onSelect(newDate);
  }, [viewDate, onSelect]);
  return /*#__PURE__*/_createElement(_styled.PanelWrapper, {
    showNow: showNow
  }, /*#__PURE__*/_createElement(_Header.Header, {
    onPrev: () => onDecadeChange(-1),
    onNext: () => onDecadeChange(1)
  }, /*#__PURE__*/_createElement("span", null, startYear, "-", endYear)), /*#__PURE__*/_createElement(_PanelBody.PanelBody, {
    viewDate: viewDate,
    rowNum: YEAR_ROW_COUNT,
    colNum: YEAR_COL_COUNT,
    baseDate: baseYear,
    getCellDate: _dateUtil.DateController.addYear,
    getCellText: _dateUtil.DateController.getYear,
    onSelect: handleSelect,
    disabledDate: disabledDate,
    mode: "year",
    getCellClassName: curDate => ['year', value && (0, _dateUtil.isSameYear)(curDate, value) ? 'selected' : undefined, _dateUtil.DateController.getYear(curDate) < startYear || _dateUtil.DateController.getYear(curDate) > endYear ? 'notCurrentPeriod' : undefined]
  }), nowNode);
});
exports.YearPanel = YearPanel;
//# sourceMappingURL=YearPanel.js.map