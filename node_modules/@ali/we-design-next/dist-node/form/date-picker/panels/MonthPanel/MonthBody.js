"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonthBody = void 0;
var _react = _interopRequireWildcard(require("react"));
var _locale = require("../../../../locale");
var _dateUtil = require("../../date-util");
var _PanelBody = require("../PanelBody");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const MONTH_COL_COUNT = 3;
const MONTH_ROW_COUNT = 4;
const MonthBody = /*#__PURE__*/_react.default.memo(props => {
  const {
    value,
    viewDate,
    onSelect,
    disabledDate
  } = props;
  const dayjsLocale = (0, _locale.useDayjsLocale)();
  const months = (0, _react.useMemo)(() => _dateUtil.DateController.locale.getShortMonths(dayjsLocale), [dayjsLocale]);
  const baseMonth = _dateUtil.DateController.setMonth(viewDate, 0);
  return /*#__PURE__*/_createElement(_PanelBody.PanelBody, {
    viewDate: viewDate,
    rowNum: MONTH_ROW_COUNT,
    colNum: MONTH_COL_COUNT,
    baseDate: baseMonth,
    getCellDate: _dateUtil.DateController.addMonth,
    getCellText: date => months[_dateUtil.DateController.getMonth(date)],
    onSelect: onSelect,
    disabledDate: disabledDate,
    mode: "month",
    getCellClassName: curDate => ['month', value && (0, _dateUtil.isSameMonth)(curDate, value) ? 'selected' : undefined]
  });
});
exports.MonthBody = MonthBody;
//# sourceMappingURL=MonthBody.js.map