"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonthPanel = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _styled = require("../DatePanel/styled");
var _Header = require("../Header");
var _MonthBody = require("./MonthBody");
var _dateUtil = require("../../date-util");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const MonthPanel = /*#__PURE__*/_react.default.memo(props => {
  const {
    viewDate,
    onPanelChange,
    onSelect,
    showNow,
    nowNode,
    ...rest
  } = props;
  const handleSelect = (0, _react.useCallback)(value => {
    onSelect(value);
    onPanelChange('month', "date");
  }, [onSelect]);
  const onYearChange = (0, _react.useCallback)(diff => {
    const newDate = _dateUtil.DateController.addYear(viewDate, diff);
    onSelect(newDate);
  }, [viewDate, onSelect]);
  return /*#__PURE__*/_createElement(_styled.PanelWrapper, {
    showNow: showNow
  }, /*#__PURE__*/_createElement(_Header.Header, {
    onPrev: () => onYearChange(-1),
    onNext: () => onYearChange(1)
  }, /*#__PURE__*/_createElement("span", {
    onClick: () => onPanelChange('month', "year")
  }, _dateUtil.DateController.getYear(viewDate))), /*#__PURE__*/_createElement(_MonthBody.MonthBody, (0, _extends2.default)({
    viewDate: viewDate,
    onSelect: handleSelect
  }, rest)), nowNode);
});
exports.MonthPanel = MonthPanel;
//# sourceMappingURL=MonthPanel.js.map