"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateBody = void 0;
var _react = _interopRequireWildcard(require("react"));
var _locale = require("../../../../locale");
var _dateUtil = require("../../date-util");
var _PanelBody = require("../PanelBody");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const WEEK_DAY_COUNT = 7;
const DATE_ROW_COUNT = 5;
const DateBody = /*#__PURE__*/_react.default.memo(props => {
  const {
    value,
    viewDate,
    onSelect,
    disabledDate
  } = props;
  const dayjsLocale = (0, _locale.useDayjsLocale)();
  const locale = (0, _locale.useLocale)();
  const weekdays = (0, _react.useMemo)(() => _dateUtil.DateController.locale.getShortWeekDays(dayjsLocale), [dayjsLocale]);
  const baseDate = (0, _dateUtil.getWeekStartDate)(dayjsLocale, viewDate);
  const headerCells = weekdays.map(weekday => /*#__PURE__*/_createElement(_styled.Th, {
    key: weekday
  }, weekday));
  return /*#__PURE__*/_createElement(_PanelBody.PanelBody, {
    viewDate: viewDate,
    rowNum: DATE_ROW_COUNT,
    colNum: WEEK_DAY_COUNT,
    headerCells: headerCells,
    baseDate: baseDate.subtract(1, 'day'),
    getCellDate: _dateUtil.DateController.addDate,
    getCellText: curDate => locale === 'zh-CN' && (0, _dateUtil.isSameDate)(curDate, _dateUtil.DateController.getNow()) ? 'ä»Š' : _dateUtil.DateController.getDate(curDate),
    onSelect: onSelect,
    disabledDate: disabledDate,
    mode: "date",
    getCellClassName: curDate => ['date', curDate.isSame(_dateUtil.DateController.getNow(), 'date') ? 'isToday' : undefined, value && (0, _dateUtil.isSameDate)(curDate, value) ? 'selected' : undefined, !(0, _dateUtil.isSameMonth)(curDate, viewDate) ? 'notCurrentPeriod' : '']
  });
});
exports.DateBody = DateBody;
//# sourceMappingURL=DateBody.js.map