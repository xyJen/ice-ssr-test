"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePicker = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _dayjs = _interopRequireDefault(require("dayjs"));
var _locale = require("../../locale");
var _common = require("../../common");
var _panels = require("./panels");
var _dateUtil = require("./date-util");
var _styled = require("./styled");
var _button = require("../../basic/button");
var _checkbox = require("../checkbox");
var _SpaceBar;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const DatePicker = /*#__PURE__*/_react.default.memo(props => {
  const {
    defaultValue,
    value: _value,
    onChange,
    mode = 'date',
    timeFormat = 'hm',
    clearable = false,
    confirmable = false,
    disabledDate,
    footer,
    showNow = true,
    ...rest
  } = props;
  const [value, setValue] = (0, _common.useDefaultProp)(defaultValue, _value, onChange);
  const [selectedValue, setSelectedValue] = (0, _react.useState)(value ? (0, _dayjs.default)(value) : null);
  const [curPanel, setCurPanel] = (0, _react.useState)("date");
  const prePanelRef = (0, _react.useRef)();
  const showTimeOption = (0, _react.useMemo)(() => mode === 'auto' || typeof mode === 'object', [mode]);
  const defaultShowTime = (0, _react.useMemo)(() => mode === 'datetime' || typeof mode === 'object' && mode[1].default === 'datetime', [mode]);
  const [showTime, setShowTime] = (0, _react.useState)(defaultShowTime);
  const t = (0, _locale.useTranslate)();
  (0, _react.useEffect)(() => {
    setShowTime(defaultShowTime);
  }, [mode]);
  (0, _react.useEffect)(() => {
    // 受控模式下，使selectedValue和value同步
    setSelectedValue(value ? (0, _dayjs.default)(value) : null);
  }, [value]);
  const handleDisabledDate = (0, _react.useCallback)(value => (disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(value.toDate())) || false, [disabledDate]);
  const handleSelect = (0, _react.useCallback)(date => {
    setSelectedValue(date);
    if (!confirmable && !(0, _dateUtil.isEqual)(selectedValue, date) && !handleDisabledDate(date)) {
      setValue(date.toDate(), {
        showTime
      });
    }
  }, [confirmable, selectedValue, setValue, handleDisabledDate, showTime]);
  const handlePanelChange = (0, _react.useCallback)((origin, target) => {
    if (prePanelRef.current === "month" && origin === "year" && target === "date") {
      setCurPanel("month");
    } else {
      setCurPanel(target);
    }
    prePanelRef.current = origin;
  }, []);
  const now = _dateUtil.DateController.getNow();
  const disabled = handleDisabledDate(now);
  const nowNode = showNow ? /*#__PURE__*/_createElement(_styled.NowWrapper, null, /*#__PURE__*/_createElement(_button.Button, {
    type: "text",
    disabled: disabled,
    onClick: () => handleSelect(now)
  }, showTime ? t("wdn_date_picker_now") : t("wdn_date_picker_today"))) : _SpaceBar || (_SpaceBar = /*#__PURE__*/_createElement(_styled.SpaceBar, null));
  let defaultFooter = /*#__PURE__*/_createElement(_react.default.Fragment, null);
  if (curPanel === "date") {
    defaultFooter = /*#__PURE__*/_createElement(_panels.DatePickerFooter, {
      timeSwitch: showTimeOption ? /*#__PURE__*/_createElement(_styled.SwitchOptionWrapper, null, /*#__PURE__*/_createElement(_checkbox.Checkbox, {
        checked: showTime,
        onChange: e => setShowTime(e.target.checked)
      }, t("wdn_date_picker_time"))) : null,
      clear: clearable ? /*#__PURE__*/_createElement(_button.Button, {
        disabled: !value,
        onClick: () => {
          setSelectedValue(null);
          !confirmable && setValue(null, {
            showTime
          });
        }
      }, t("wdn_date_picker_clear")) : undefined,
      confirm: confirmable ? /*#__PURE__*/_createElement(_button.Button, {
        disabled: !selectedValue,
        onClick: () => {
          if (!disabled && selectedValue) {
            setValue(selectedValue.toDate(), {
              showTime
            });
          }
        }
      }, t("wdn_ok")) : undefined
    });
  }
  const panelSharedProps = {
    value: selectedValue,
    onSelect: handleSelect,
    showNow: showNow,
    timeFormat: timeFormat
  };
  return /*#__PURE__*/_createElement(_styled.DatePickerWrapper, (0, _common.mergeRestProps)(rest, "wdn-date-picker"), mode === "time" ? /*#__PURE__*/_createElement(_panels.TimePanel, (0, _extends2.default)({
    showHeader: false
  }, panelSharedProps)) : /*#__PURE__*/_createElement(_panels.DateTimePanel, (0, _extends2.default)({
    showTime: showTime,
    disabledDate: handleDisabledDate,
    curPanel: curPanel,
    onPanelChange: handlePanelChange,
    nowNode: nowNode
  }, panelSharedProps)), (0, _common.renderReactNode)(footer, defaultFooter, undefined));
});
exports.DatePicker = DatePicker;
//# sourceMappingURL=DatePicker.js.map