"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEqual = exports.getWeekStartDate = exports.getCellDateDisabled = exports.dayjsLocaleMonthBeforeYearConfig = exports.DateController = void 0;
exports.isNullEqual = isNullEqual;
exports.leftPad = exports.isSameYear = exports.isSameTime = exports.isSameMonth = exports.isSameDate = void 0;
var _dayjs = _interopRequireDefault(require("dayjs"));
var _localeData = _interopRequireDefault(require("dayjs/plugin/localeData"));
var _weekday = _interopRequireDefault(require("dayjs/plugin/weekday"));
require("dayjs/locale/zh-cn");
require("dayjs/locale/ja");
require("dayjs/locale/zh-hk");
require("dayjs/locale/zh-tw");
_dayjs.default.extend(_weekday.default);
_dayjs.default.extend(_localeData.default);
const DateController = {
  // get
  getNow: () => (0, _dayjs.default)(),
  getFixedDate: string => (0, _dayjs.default)(string, ["YYYY-M-DD", "YYYY-MM-DD"]),
  getEndDate: date => date.endOf("month"),
  getWeekDay: date => {
    const clone = date.locale("en");
    return clone.weekday() + clone.localeData().firstDayOfWeek();
  },
  getYear: date => date.year(),
  getMonth: date => date.month(),
  getDate: date => date.date(),
  getHour: date => date.hour(),
  getMinute: date => date.minute(),
  getSecond: date => date.second(),
  // set
  addYear: (date, diff) => date.add(diff, "year"),
  addMonth: (date, diff) => date.add(diff, "month"),
  addDate: (date, diff) => date.add(diff, "day"),
  setYear: (date, year) => date.year(year),
  setMonth: (date, month) => date.month(month),
  setDate: (date, num) => date.date(num),
  setHour: (date, hour) => date.hour(hour),
  setMinute: (date, minute) => date.minute(minute),
  setSecond: (date, second) => date.second(second),
  // Compare
  isAfter: (date1, date2) => date1.isAfter(date2),
  isValidate: date => date.isValid(),
  locale: {
    getWeekFirstDay: locale => (0, _dayjs.default)().locale(locale).localeData().firstDayOfWeek(),
    getWeekFirstDate: (locale, date) => date.locale(locale).weekday(0),
    getShortWeekDays: locale => (0, _dayjs.default)().locale(locale).localeData().weekdaysMin(),
    getShortMonths: locale => (0, _dayjs.default)().locale(locale).localeData().monthsShort(),
    format: (locale, date, format) => date.locale(locale).format(format)
  }
};
exports.DateController = DateController;
const getCellDateDisabled = ({
  cellDate,
  mode,
  disabledDate
}) => {
  if (!disabledDate) return false;

  // 判断cell在此range是否是disabled
  const getDisabledFromRange = (currentMode, start, end) => {
    let current = start;
    while (current <= end) {
      let date;
      switch (currentMode) {
        case "date":
          date = DateController.setDate(cellDate, current);
          if (!disabledDate(date)) {
            return false;
          }
          break;
        case "month":
          date = DateController.setMonth(cellDate, current);
          if (!getCellDateDisabled({
            cellDate: date,
            mode: "month",
            disabledDate
          })) {
            return false;
          }
          break;
        case "year":
          date = DateController.setYear(cellDate, current);
          if (!getCellDateDisabled({
            cellDate: date,
            mode: "year",
            disabledDate
          })) {
            return false;
          }
          break;
      }
      current += 1;
    }
    return true;
  };
  switch (mode) {
    case "date":
      return disabledDate(cellDate);
    case "month":
      const startDate = 1;
      const endDate = DateController.getDate(DateController.getEndDate(cellDate));
      return getDisabledFromRange("date", startDate, endDate);
    case "year":
      return getDisabledFromRange("month", 0, 11);
  }
};
exports.getCellDateDisabled = getCellDateDisabled;
const getWeekStartDate = (locale, value) => {
  const weekFirstDay = DateController.locale.getWeekFirstDay(locale);
  const monthStartDate = DateController.setDate(value, 1);
  const startDateWeekDay = DateController.getWeekDay(monthStartDate);
  let alignStartDate = DateController.addDate(monthStartDate, weekFirstDay - startDateWeekDay);
  if (DateController.getMonth(alignStartDate) === DateController.getMonth(value) && DateController.getDate(alignStartDate) > 1) {
    alignStartDate = DateController.addDate(alignStartDate, -7);
  }
  return alignStartDate;
};
exports.getWeekStartDate = getWeekStartDate;
const leftPad = (str, length, fill = "0") => {
  let current = String(str);
  while (current.length < length) {
    current = `${fill}${str}`;
  }
  return current;
};
exports.leftPad = leftPad;
function isNullEqual(value1, value2) {
  if (!value1 && !value2) {
    return true;
  }
  if (!value1 || !value2) {
    return false;
  }
  return undefined;
}
const isSameYear = (year1, year2) => {
  const equal = isNullEqual(year1, year2);
  if (typeof equal === 'boolean') {
    return equal;
  }
  return DateController.getYear(year1) === DateController.getYear(year2);
};
exports.isSameYear = isSameYear;
const isSameMonth = (month1, month2) => {
  const equal = isNullEqual(month1, month2);
  if (typeof equal === 'boolean') {
    return equal;
  }
  return isSameYear(month1, month2) && DateController.getMonth(month1) === DateController.getMonth(month2);
};
exports.isSameMonth = isSameMonth;
const isSameDate = (date1, date2) => {
  const equal = isNullEqual(date1, date2);
  if (typeof equal === 'boolean') {
    return equal;
  }
  return isSameYear(date1, date2) && isSameMonth(date1, date2) && DateController.getDate(date1) === DateController.getDate(date2);
};
exports.isSameDate = isSameDate;
const isSameTime = (time1, time2) => {
  const equal = isNullEqual(time1, time2);
  if (typeof equal === 'boolean') {
    return equal;
  }
  return DateController.getHour(time1) === DateController.getHour(time2) && DateController.getMinute(time1) === DateController.getMinute(time2) && DateController.getSecond(time1) === DateController.getSecond(time2);
};
exports.isSameTime = isSameTime;
const isEqual = (value1, value2) => {
  const equal = isNullEqual(value1, value2);
  if (typeof equal === 'boolean') {
    return equal;
  }
  return isSameDate(value1, value2) && isSameTime(value1, value2);
};
exports.isEqual = isEqual;
const dayjsLocaleMonthBeforeYearConfig = {
  'zh-cn': false,
  'zh-tw': false,
  'zh-hk': false,
  'ja': false,
  'en': true
};
exports.dayjsLocaleMonthBeforeYearConfig = dayjsLocaleMonthBeforeYearConfig;
//# sourceMappingURL=date-util.js.map