"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Select = exports.Option = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _popover = require("../../display/popover");
var _common = require("../../common");
var _list = require("../../basic/list");
var _nested = require("../../basic/list/nested");
var _input = require("../../form/input");
var _styled = require("./styled");
var _common2 = require("../../common/");
var _icon = require("../../basic/icon");
var _IconSelected;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const Select = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  var _SelectNormalValuePla, _currentOpt$title;
  const {
    options = [],
    value: _value,
    defaultValue = '',
    onChange,
    visible: _visible,
    defaultVisible = false,
    onVisibleChange,
    size = 'small',
    mode = 'normal',
    placeholder,
    disabled,
    error,
    bordered = true,
    getContainer,
    children,
    renderValue,
    renderOption,
    autoWidth = false,
    keyboard = true,
    ...rest
  } = props;
  const flattenOptions = (0, _react.useMemo)(() => (0, _nested.flattenNested)(options), [options]);
  const [value, setValue] = (0, _common.useDefaultProp)(defaultValue, _value, onChange);
  const [inputValue, setInputValue] = (0, _react.useState)(undefined);
  const [active, setActive] = (0, _react.useState)(null);
  const [visible, setVisible] = (0, _common.useDefaultProp)(defaultVisible, _visible, onVisibleChange);
  const wrapRef = (0, _react.useRef)(null);
  const listRef = (0, _react.useRef)(null);

  // 需要在dom更新后，渲染之前更新宽度，否则会影响dom align获取content的宽度
  (0, _react.useLayoutEffect)(() => {
    if (visible && wrapRef.current && listRef.current) {
      listRef.current.style.minWidth = autoWidth ? 'auto' : wrapRef.current.clientWidth + 'px';
    }
  }, [visible, autoWidth]);
  const [focusTargetId, focusTarget, focusOwner] = (0, _common.useFocusTarget)(wrapRef);
  const onOptionClick = k => {
    setValue(k);
    setInputValue(undefined);
    setVisible(false);
  };
  const updateValueByInputValue = () => {
    if (typeof inputValue === 'string') {
      const res = flattenOptions.filter(_nested.isNormalized).find(op => {
        var _op$title;
        return (_op$title = op.title) === null || _op$title === void 0 ? void 0 : _op$title.toString().includes(inputValue);
      });
      if (res) {
        setValue(res.key);
      } else {
        setValue(inputValue);
      }
      setInputValue(undefined);
    }
  };
  const handleEsc = () => {
    focusOwner(() => {
      setActive(null);
      setVisible(false);
    });
  };
  const handleKeyDown = keyboard ? e => {
    switch (e.which) {
      case _common.KEY_CODES.ENTER:
        !visible && setVisible(true);
        mode === 'input' && updateValueByInputValue();
        e.nativeEvent.stopImmediatePropagation();
        break;
      case _common.KEY_CODES.DOWN:
        break;
      case _common.KEY_CODES.ESC:
        handleEsc();
        break;
      default:
        break;
    }
  } : undefined;
  const handleValueChange = e => {
    setInputValue(e.target.value);
  };
  const currentOpt = flattenOptions.find(k => k.key === value);
  const renderListItem = ({
    key
  }) => p => {
    const props = p.props;
    const ele = key === value ? /*#__PURE__*/(0, _react.cloneElement)(p, {
      suffix: _IconSelected || (_IconSelected = /*#__PURE__*/_createElement(_icon.IconSelected, null))
    }) : !props.suffix ? /*#__PURE__*/(0, _react.cloneElement)(p, {
      suffix: null
    }) : p;
    return (0, _common.renderReactNode)(renderOption, ele, {
      key
    });
  };
  return /*#__PURE__*/_createElement(_popover.Popover, {
    placement: "bottomLeft",
    placementOffset: [4, 0],
    animation: true,
    content: /*#__PURE__*/_createElement(_list.List, (0, _extends2.default)({
      items: options,
      id: focusTargetId,
      style: {
        minWidth: 'auto',
        maxHeight: 400
      },
      keyboard: keyboard,
      active: active,
      onActiveChange: setActive,
      onSelect: onOptionClick,
      renderItem: renderListItem
    }, (0, _common.proxyRestProps)(rest, 'list'), {
      ref: listRef
    })),
    visible: visible,
    trigger: disabled ? undefined : "click",
    onVisibleChange: e => {
      if (e) {
        if (!visible) {
          const fn = () => setVisible(e);
          if (keyboard && mode === 'normal') {
            focusTarget(fn);
          } else {
            fn();
          }
        }
      } else {
        visible && setVisible(e);
        setActive(null);
      }
    },
    getContainer: getContainer || (() => wrapRef.current || document.body),
    onKeyDown: e => {
      e.which === _common.KEY_CODES.ESC && handleEsc();
    },
    "data-testid": `overlay-${props['data-testid']}`
  }, /*#__PURE__*/_createElement(_styled.InputWrap, (0, _extends2.default)({
    ref: wrapRef,
    size: size,
    onKeyDown: handleKeyDown
  }, (0, _common.mergeRestProps)(rest, 'wdn-select')), mode === 'normal' ? /*#__PURE__*/_createElement(_styled.SelectNormal, {
    ref: ref,
    className: "wdn-select-normal",
    tabIndex: -1,
    hasError: !!error,
    disabled: !!disabled,
    size: size,
    bordered: bordered,
    visible: visible,
    onClick: () => visible && setVisible(false)
  }, /*#__PURE__*/_createElement(_styled.SelectNormalValue, null, (() => {
    if (currentOpt) {
      if ((0, _nested.isNormalized)(currentOpt)) {
        return (0, _common.renderReactNode)(renderValue, currentOpt.title, {
          key: currentOpt.key
        });
      } else {
        return currentOpt.key;
      }
    } else {
      return value ? (0, _common.renderReactNode)(renderValue, value, {
        key: value
      }) : _SelectNormalValuePla || (_SelectNormalValuePla = /*#__PURE__*/_createElement(_styled.SelectNormalValuePlaceholder, null, placeholder));
    }
  })()), /*#__PURE__*/_createElement(_styled.SuffixWrap, null, /*#__PURE__*/_createElement(_common2.ArrowUpDown12, {
    dir: visible ? 'up' : 'down'
  }))) : /*#__PURE__*/_createElement(_input.Input, {
    ref: ref,
    className: "wdn-select-input",
    size: size,
    value: typeof inputValue === 'string' ? inputValue : currentOpt ? (0, _nested.isNormalized)(currentOpt) ? (_currentOpt$title = currentOpt.title) === null || _currentOpt$title === void 0 ? void 0 : _currentOpt$title.toString() : currentOpt.key : value,
    disabled: !!disabled,
    bordered: !!bordered,
    placeholder: placeholder,
    onBlur: updateValueByInputValue,
    onChange: handleValueChange,
    style: visible && bordered ? _styled.visibleStyle : error ? _styled.errorStyle : undefined,
    suffix: /*#__PURE__*/_createElement(_styled.SuffixWrap, null, /*#__PURE__*/_createElement(_common2.ArrowUpDown12, {
      dir: visible ? 'up' : 'down'
    }))
  }), error && /*#__PURE__*/_createElement(_styled.ErrorTip, null, error)));
}));
exports.Select = Select;
const Option = _list.List.Item;
exports.Option = Option;
//# sourceMappingURL=Select.js.map