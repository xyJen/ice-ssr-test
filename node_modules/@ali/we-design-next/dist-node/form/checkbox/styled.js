"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckboxWrap = exports.CheckboxText = exports.CheckboxInput = exports.CheckboxIconWrap = void 0;
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _common = require("../../common");
var _text = require("../../basic/text");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 *   CheckboxWrap (label)
 *     CheckboxInput (input transparent)
 *     CheckboxIconWrap (span)
 *       svg (svg)
 *     CheckboxText (span)
 */

const CheckboxInput = /*#__PURE__*/_styledComponents.default.input(["position:absolute;top:0;left:0;width:0;height:0;opacity:0;z-index:1;"]);
exports.CheckboxInput = CheckboxInput;
const CheckboxIconWrap = /*#__PURE__*/_styledComponents.default.span(["", " ", " position:relative;display:inline-block;width:16px;height:16px;border:1px solid;border-radius:2px;", " ", " ", " ", " ", " ", ""], _common.CSS_BORDER_BOX, (0, _common.CSS_TRANSITION)('all'), ({
  indeterminate
}) => indeterminate ? CSS_INDETERMINATE : null, ({
  checked,
  disabled
}) => !checked && !disabled ? CSS_UNCHECK_ENABLED : null, ({
  checked,
  disabled
}) => checked && !disabled ? CSS_CHECK_ENABLED : null, ({
  checked,
  disabled
}) => checked && disabled ? CSS_CHECK_DISABLED : null, ({
  checked,
  disabled
}) => !checked && disabled ? CSS_UNCHECK_DISABLED : null, ({
  checked,
  indeterminate
}) => checked && !indeterminate ? `
  & > svg{
    display: inline-block;
    position: absolute;
    top: -1px;
    left: -1px;
  }
  ` : `
  & > svg{
    display: none;
  }
  `);
exports.CheckboxIconWrap = CheckboxIconWrap;
const CSS_CHECK_ENABLED = /*#__PURE__*/(0, _styledComponents.css)(["border-color:", ";background-color:", ";&:hover{background-color:", ";}"], _common.COLORS.TRANSPARENT, _common.COLORS.COMMON.BLUE1_COLOR, _common.COLORS.COMMON.BLUE1_HOVER_COLOR);
const CSS_CHECK_DISABLED = /*#__PURE__*/(0, _styledComponents.css)(["border-color:", ";background-color:", ";"], _common.COLORS.TRANSPARENT, _common.COLORS.COMMON.LINE_HARD_COLOR);
const CSS_UNCHECK_ENABLED = /*#__PURE__*/(0, _styledComponents.css)(["border-color:", ";background-color:", ";&:hover{border-color:", ";}"], _common.COLORS.COMMON.OVERLAY_COLOR, _common.COLORS.WHITE, _common.COLORS.COMMON.BLUE1_HOVER_COLOR);
const CSS_UNCHECK_DISABLED = /*#__PURE__*/(0, _styledComponents.css)(["border-color:", ";background-color:", ";"], _common.COLORS.COMMON.LINE_HARD_COLOR, _common.COLORS.WHITE);
const CSS_INDETERMINATE = /*#__PURE__*/(0, _styledComponents.css)(["&:after{content:\"\";position:absolute;display:block;height:2px;left:2px;right:2px;top:6px;background-color:", ";}"], _common.COLORS.WHITE);
const CheckboxText = /*#__PURE__*/_styledComponents.default.span(["padding:0 8px;"]);
exports.CheckboxText = CheckboxText;
const CheckboxWrap = /*#__PURE__*/_styledComponents.default.label(["", " ", " ", " position:relative;display:inline-block;color:", ";& > *{vertical-align:middle;}"], _text.TEXT_CSS.TEXT, _common.CSS_CURSOR_DISABLE, _common.CSS_DISABLE_SELECT, ({
  disabled
}) => disabled ? _common.COLORS.COMMON.LINE_HARD_COLOR : _common.COLORS.LIGHT.LEVEL1_BASE_COLOR);
exports.CheckboxWrap = CheckboxWrap;
//# sourceMappingURL=styled.js.map