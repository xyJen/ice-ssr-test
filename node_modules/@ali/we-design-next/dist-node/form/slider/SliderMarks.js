"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SliderMarks = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _common = require("../../common");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const SliderMarks = /*#__PURE__*/(0, _react.memo)(props => {
  var _Mark;
  const {
    marks = [],
    handleClickOnMark,
    sliderLength = 0,
    disable,
    markBgColor = _common.COLORS.LIGHT.LEVEL3_BASE_COLOR,
    markTextColor = _common.COLORS.BLACK,
    style,
    ...rest
  } = props;
  const markStyle = (0, _react.useMemo)(() => {
    return {
      backgroundColor: markBgColor
    };
  }, [markBgColor]);
  const markTextStyle = (0, _react.useMemo)(() => {
    return {
      color: markTextColor
    };
  }, [markTextColor]);
  return /*#__PURE__*/_createElement(_react.default.Fragment, null, marks.map((item, index) => /*#__PURE__*/_createElement(_styled.StyledSliderMarks, (0, _extends2.default)({
    key: index
  }, (0, _common.mergeRestProps)({
    ...rest,
    style: {
      ...style,
      left: `${item / sliderLength * 100}%`,
      cursor: disable ? 'not-allowed' : 'pointer'
    }
  }, ''), {
    onClick: () => handleClickOnMark === null || handleClickOnMark === void 0 ? void 0 : handleClickOnMark(item)
  }), _Mark || (_Mark = /*#__PURE__*/_createElement(_styled.Mark, {
    role: "mark",
    style: markStyle
  })), /*#__PURE__*/_createElement(_styled.MarkText, {
    role: "mark-text",
    style: markTextStyle
  }, item))));
});
exports.SliderMarks = SliderMarks;
SliderMarks.displayName = 'sliderMarks';
//# sourceMappingURL=SliderMarks.js.map