"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SliderLine = void 0;
var _react = _interopRequireWildcard(require("react"));
var _common = require("../../common");
var _styled = require("./styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const SliderLine = /*#__PURE__*/(0, _react.memo)(props => {
  const {
    start = 0,
    end = 0,
    sliderLength = 0,
    disable,
    lineBgColor = _common.COLORS.COMMON.LINE_HARD_COLOR,
    lineBgColorDisabled = _common.COLORS.COMMON.LINE_HARD_COLOR,
    lineColor = _common.COLORS.DING_BLUR,
    lineColorDisabled = _common.COLORS.LIGHT.LEVEL3_BASE_COLOR,
    style,
    ...rest
  } = props;
  const left = start > end ? end : start;
  const length = Math.abs(start - end);
  const bgLineStyle = (0, _react.useMemo)(() => {
    return {
      background: disable ? lineBgColorDisabled : lineBgColor,
      ...style
    };
  }, [disable, lineBgColorDisabled, lineBgColor, style]);
  return /*#__PURE__*/_createElement(_styled.StyledSliderLine, (0, _common.mergeRestProps)({
    ...rest,
    style: bgLineStyle
  }, ''), /*#__PURE__*/_createElement(_styled.LineContent, {
    role: "content",
    style: {
      background: disable ? lineColorDisabled : lineColor,
      left: `${left / sliderLength * 100}%`,
      width: `${length / sliderLength * 100}%`
    }
  }));
});
exports.SliderLine = SliderLine;
SliderLine.displayName = 'sliderLine';
//# sourceMappingURL=SliderLine.js.map