"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputWrap = exports.InputErrorMessage = exports.InputEle = void 0;
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _colors = require("../../common/consts/colors");
var _text = require("../../basic/text");
var _common = require("../../common");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 *   InputWrap (label)
 *     Icon (svg)
 *     InputEle (input)
 *     Icon (svg)
 *     InputError (span)
 */

const CSS_BORDERED_ENABLED = /*#__PURE__*/(0, _styledComponents.css)(["&:hover{border-color:", ";}&:active{border-color:", ";}&:focus-within{border-color:", ";}"], _colors.COLORS.COMMON.BLUE1_COLOR, _colors.COLORS.COMMON.BLUE1_COLOR, _colors.COLORS.COMMON.BLUE1_COLOR);
const CSS_BORDERED_DANGER = /*#__PURE__*/(0, _styledComponents.css)(["&:hover{border-color:", ";}&:active{border-color:", ";}&:focus-within{border-color:", ";}"], _colors.COLORS.COMMON.DANGER1_COLOR, _colors.COLORS.COMMON.DANGER1_COLOR, _colors.COLORS.COMMON.DANGER1_COLOR);
const InputWrap = /*#__PURE__*/_styledComponents.default.label(["display:flex;flex-wrap:keep-all;align-items:center;width:100%;height:", ";padding:0 4px;", "   color:", ";background-color:", ";border-radius:4px;border:1px solid ", ";", " ", " &:focus-within{", "}&:hover{.icon-close{display:block;}}", " ", " ", " .icon-close{display:none;color:rgba(23,26,29,0.4);&:hover{color:rgba(23,26,29,1);}}"], ({
  size
}) => size === 'normal' ? '32px' : '28px', ({
  error
}) => error ? 'padding-top: 2px;' : null, ({
  disabled
}) => disabled ? _colors.COLORS.LIGHT.LEVEL4_BASE_COLOR : _colors.COLORS.LIGHT.LEVEL1_BASE_COLOR, ({
  disabled,
  bordered
}) => bordered ? disabled ? '#f6f6f6' : _colors.COLORS.WHITE : _colors.COLORS.TRANSPARENT, _colors.COLORS.COMMON.OVERLAY_COLOR, ({
  disabled,
  error
}) => !disabled ? !error ? CSS_BORDERED_ENABLED : CSS_BORDERED_DANGER : null, ({
  bordered
}) => !bordered ? 'border: none;' : null, ({
  bordered,
  disabled,
  error
}) => bordered && !disabled && !error ? 'box-shadow: 0px 0px 0px 2px rgba(0, 106, 254, 0.12)' : bordered && !disabled && error ? 'box-shadow: 0px 0px 0px 2px rgba(255, 82, 25, 0.12)' : null, _text.TEXT_CSS.TEXT, _common.CSS_BORDER_BOX, _common.CSS_CURSOR_DISABLE);
exports.InputWrap = InputWrap;
const InputEle = /*#__PURE__*/_styledComponents.default.input(["color:", ";width:0;flex:1 auto;margin:0;padding:0 4px;outline:none;border:0;background-color:", ";&::placeholder{color:", ";}&:disabled{cursor:not-allowed;color:", ";}&::selection{background:#0089ff;color:", ";}"], _colors.COLORS.LIGHT.LEVEL1_BASE_COLOR, _colors.COLORS.TRANSPARENT, _colors.COLORS.LIGHT.LEVEL4_BASE_COLOR, _colors.COLORS.LIGHT.LEVEL4_BASE_COLOR, _colors.COLORS.WHITE);
exports.InputEle = InputEle;
const InputErrorMessage = /*#__PURE__*/_styledComponents.default.div(["width:100%;margin-top:4px;font-size:12px;line-height:18px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;color:", ";"], _colors.COLORS.COMMON.DANGER1_COLOR);
exports.InputErrorMessage = InputErrorMessage;
//# sourceMappingURL=styled.js.map