"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mention = void 0;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("../../common/react");
var _input = require("../../form/input");
var _icon = require("../../basic/icon");
var _MentionList = require("./MentionList");
var _styled = require("./styled");
var _IconSearch, _IconLoading;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const Mention = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    placeholder,
    onRequest = () => new Promise(r => r([])),
    onSelect
  } = props;
  const [items, setItems] = (0, _react.useState)([]);
  const [requestState, setRequestState] = (0, _react.useState)('complete');
  const [inputValue, setInputValue] = (0, _react.useState)('');
  const {
    invoke: request
  } = (0, _react.useMemo)(() => new LastPromiseResolver(onRequest), [onRequest]);
  const handleRequest = (0, _react2.useEventCallback)(async (searchText, page, origin) => {
    setRequestState('requesting');
    try {
      const members = await request(searchText, page);
      if (members) {
        const cloned = [...origin];
        cloned.splice(page[0], page[1], ...members);
        setItems(cloned);
        setRequestState('complete');
      }
    } catch (error) {
      setRequestState('error');
    }
  });
  (0, _react.useEffect)(() => {
    handleRequest(inputValue, [0, 10], []);
  }, []);
  return /*#__PURE__*/_createElement(_styled.MentionWrapper, {
    ref: ref
  }, /*#__PURE__*/_createElement(_input.Input, {
    value: inputValue,
    prefix: _IconSearch || (_IconSearch = /*#__PURE__*/_createElement(_icon.IconSearch, null)),
    suffix: requestState === 'requesting' ? _IconLoading || (_IconLoading = /*#__PURE__*/_createElement(_icon.IconLoading, null)) : undefined,
    onChange: e => {
      setItems([]);
      setInputValue(e.target.value);
      handleRequest(e.target.value, [0, 10], []);
    },
    placeholder: placeholder,
    bordered: false
  }), /*#__PURE__*/_createElement(_MentionList.MentionList, {
    items: items,
    onMention: () => 1,
    onLoadMore: (i, count) => {
      return handleRequest(inputValue, [i, count], items);
    }
  }));
}));
exports.Mention = Mention;
class LastPromiseResolver {
  constructor(fn) {
    this.fn = void 0;
    this.current = null;
    this.invoke = async (..._args) => {
      return new Promise(_resolve => {
        if (this.current) {
          const [resolve, args, isResolving] = this.current;
          resolve(null);
          this.current = [_resolve, _args, false];
          // do not trigger
        } else {
          this.current = [_resolve, _args, false];
          this.trigger();
        }
      });
    };
    this.trigger = () => {
      if (this.current) {
        const [resolve, args, isResolving] = this.current;
        if (isResolving === false) {
          this.current[2] = true;
          this.fn(...args).then(e => {
            if (this.current && this.current[0] === resolve) {
              this.current = null;
              resolve(e);
            } else if (this.current) {
              this.trigger();
            }
          });
        }
      }
    };
    this.fn = fn;
  }
}
//# sourceMappingURL=Mention.js.map