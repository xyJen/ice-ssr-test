"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Carousel = void 0;
var _react = _interopRequireWildcard(require("react"));
var _style = require("./style");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable max-lines-per-function */
const _createElement = /*#__PURE__*/_react.default.createElement;
const useForceUpdate = () => {
  const setValue = (0, _react.useState)(-1)[1];
  return (0, _react.useCallback)(() => {
    setValue(Math.random());
  }, [setValue]);
};
const TIME_6S = 6 * 1000;
const DEFAULT_PLAY_SPEED = 0.5;
const Carousel = props => {
  const {
    children,
    onChange = () => {},
    autoPlayTime = TIME_6S,
    playSpeed = DEFAULT_PLAY_SPEED,
    autoPlay = true,
    showCarouselDots = true,
    currentItemIndex,
    itemWidth
  } = props;
  const [isHover, setIsHover] = (0, _react.useState)(false);
  const isCurrentItemIndexNumber = typeof currentItemIndex === 'number';

  // 初始化的时候生成一次子节点
  const carouselChildrenNodes = (0, _react.useMemo)(() => {
    const result = [];
    _react.default.Children.forEach(children, node => {
      result.push(node);
    });
    return result;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const carouselWidth = (0, _react.useMemo)(() => itemWidth * carouselChildrenNodes.length, []);
  const flush = useForceUpdate();
  // 状态
  const state = (0, _react.useRef)({
    childrenNodes: carouselChildrenNodes,
    currentIndex: 0,
    timer: -1
  }).current;
  const SetCurrentIndex = (0, _react.useCallback)(i => {
    onChange(i);
    if (isCurrentItemIndexNumber) {
      return;
    }
    state.currentIndex = i >= state.childrenNodes.length ? state.childrenNodes.length - 1 : i;
    flush();
  }, [flush, isCurrentItemIndexNumber, onChange, state]);
  const next = (0, _react.useCallback)(() => {
    const {
      childrenNodes,
      currentIndex
    } = state;
    const nextIndex = currentIndex + 1;
    SetCurrentIndex(nextIndex < childrenNodes.length ? nextIndex : 0);
  }, [SetCurrentIndex, state]);
  const reSetCarouselInterval = (0, _react.useCallback)(() => {
    if (!autoPlay) {
      return;
    }
    clearInterval(state.timer);
    state.timer = window.setInterval(() => {
      if (isHover) {
        return;
      }
      next();
    }, autoPlayTime);
  }, [next, state, autoPlayTime, autoPlay, isHover]);
  (0, _react.useEffect)(() => {
    reSetCarouselInterval();
  }, [isHover]);
  (0, _react.useEffect)(() => {
    if (isCurrentItemIndexNumber && state.currentIndex !== currentItemIndex) {
      reSetCarouselInterval();
      state.currentIndex = currentItemIndex;
      flush();
    }
  }, [currentItemIndex, flush, isCurrentItemIndexNumber, reSetCarouselInterval, state]);
  const goTo = (0, _react.useCallback)(index => {
    const {
      childrenNodes,
      currentIndex
    } = state;
    if (index < 0 || index >= childrenNodes.length) {
      return;
    }
    if (currentIndex === index) {
      return;
    }
    reSetCarouselInterval();
    SetCurrentIndex(index);
  }, [state, SetCurrentIndex, reSetCarouselInterval]);
  (0, _react.useEffect)(() => {
    if (autoPlay) {
      reSetCarouselInterval();
      return () => clearInterval(state.timer);
    }
    clearInterval(state.timer);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [autoPlay]);
  const handleMouseEnter = (0, _react.useCallback)(() => {
    setIsHover(true);
  }, []);
  const handleMouseLeave = (0, _react.useCallback)(() => {
    setIsHover(false);
  }, []);
  return /*#__PURE__*/_createElement(_style.CarouselWrapper, {
    style: {
      width: itemWidth
    },
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, /*#__PURE__*/_createElement("ul", {
    className: "guide_carousel_list",
    style: {
      width: carouselWidth + 20,
      transition: `${playSpeed}s`,
      transform: `translate3d(-${itemWidth * state.currentIndex}px, 0px, 0px)`
    }
  }, state.childrenNodes.map((node, i) => /*#__PURE__*/_createElement("li", {
    key: i
  }, node))), showCarouselDots && /*#__PURE__*/_createElement("ul", {
    className: "guide_carousel_dots"
  }, state.childrenNodes.map((_item, i) => /*#__PURE__*/_createElement("li", {
    key: i,
    className: i === state.currentIndex ? 'carousel_dots_active' : ''
  }, /*#__PURE__*/_createElement("button", {
    onClick: () => goTo(i)
  })))));
};
exports.Carousel = Carousel;
//# sourceMappingURL=index.js.map