"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TitleCoverControllPanel = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _popover = require("../../display/popover");
var _locale = require("../../locale");
var _style = require("./style");
var _utils = require("./utils");
var _constants = require("./constants");
var _mergeRestProps = require("../../common/react/mergeRestProps");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const TitleCoverControllPanel = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    imagePicker,
    getImagePickerContainer,
    onChange,
    onPickImageStart,
    onPickImageEnd,
    ...rest
  } = props;
  const [position, setPosition] = (0, _react.useState)(_constants.DEFAULT_POSITION);
  const [isReposition, setIsReposition] = (0, _react.useState)(false);
  const wrapperRef = (0, _react.useRef)(null);
  const startYRef = (0, _react.useRef)(0);
  const isMovePosition = (0, _react.useRef)(false);
  const originPositionRef = (0, _react.useRef)(0);
  const titleCoverRef = (0, _react.useRef)(null);
  const positionRef = (0, _react.useRef)(position);
  const dragStartPositionRef = (0, _react.useRef)(position);
  (0, _react.useImperativeHandle)(ref, () => ({
    attach: titleCover => {
      titleCoverRef.current = titleCover;
      return titleCover.onChange(({
        isReposition: isRep,
        position: p
      }) => {
        setIsReposition(isRep);
        setPosition(p);
      });
    }
  }));
  (0, _react.useEffect)(() => {
    positionRef.current = position;
  }, [position]);
  const savePosition = () => {
    var _titleCoverRef$curren, _titleCoverRef$curren2;
    const cover = (_titleCoverRef$curren = titleCoverRef.current) === null || _titleCoverRef$curren === void 0 ? void 0 : _titleCoverRef$curren.getCover();
    if (cover) {
      onChange === null || onChange === void 0 ? void 0 : onChange({
        ...cover,
        transform: {
          offsetY: position
        }
      });
    }
    (_titleCoverRef$curren2 = titleCoverRef.current) === null || _titleCoverRef$curren2 === void 0 ? void 0 : _titleCoverRef$curren2.endReposition();
  };
  const turnOnReposition = () => {
    var _titleCoverRef$curren3;
    originPositionRef.current = position;
    (_titleCoverRef$curren3 = titleCoverRef.current) === null || _titleCoverRef$curren3 === void 0 ? void 0 : _titleCoverRef$curren3.startReposition();
  };
  _react.default.useEffect(() => {
    if (isReposition) {
      var _titleCoverRef$curren8;
      const handleMouseDownImg = e => {
        isMovePosition.current = false;
        dragStartPositionRef.current = positionRef.current;
        const handleDragging = e => {
          var _titleCoverRef$curren4, _titleCoverRef$curren5;
          const imgRef = (_titleCoverRef$curren4 = titleCoverRef.current) === null || _titleCoverRef$curren4 === void 0 ? void 0 : _titleCoverRef$curren4.getImageRef();
          if (!(imgRef !== null && imgRef !== void 0 && imgRef.current)) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          isMovePosition.current = true;
          const offsetY = e.screenY - startYRef.current;
          // x0.5 避免拖动过快（参考 notion）
          const offsetPercent = offsetY / imgRef.current.offsetHeight * 0.5;
          // position 取值范围 [0, 1]
          (_titleCoverRef$curren5 = titleCoverRef.current) === null || _titleCoverRef$curren5 === void 0 ? void 0 : _titleCoverRef$curren5.setRenderPosition(Math.max(0, Math.min(1, dragStartPositionRef.current - offsetPercent)));
        };
        const handleMouseUp = () => {
          if (!isMovePosition.current) {
            var _titleCoverRef$curren6, _titleCoverRef$curren7;
            (_titleCoverRef$curren6 = titleCoverRef.current) === null || _titleCoverRef$curren6 === void 0 ? void 0 : _titleCoverRef$curren6.setRenderPosition((0, _utils.getSafePosition)(originPositionRef.current));
            (_titleCoverRef$curren7 = titleCoverRef.current) === null || _titleCoverRef$curren7 === void 0 ? void 0 : _titleCoverRef$curren7.endReposition();
          }
          document.removeEventListener("mousemove", handleDragging);
          document.removeEventListener("mouseup", handleMouseUp);
        };
        if (isReposition) {
          startYRef.current = e.screenY;
          document.addEventListener("mousemove", handleDragging);
          document.addEventListener("mouseup", handleMouseUp);
          return () => {
            document.removeEventListener("mousemove", handleDragging);
            document.removeEventListener("mouseup", handleMouseUp);
          };
        }
      };
      const imgeRef = (_titleCoverRef$curren8 = titleCoverRef.current) === null || _titleCoverRef$curren8 === void 0 ? void 0 : _titleCoverRef$curren8.getImageRef();
      if (imgeRef !== null && imgeRef !== void 0 && imgeRef.current) {
        imgeRef.current.addEventListener("mousedown", handleMouseDownImg);
        return () => {
          var _imgeRef$current;
          (_imgeRef$current = imgeRef.current) === null || _imgeRef$current === void 0 ? void 0 : _imgeRef$current.removeEventListener("mousedown", handleMouseDownImg);
        };
      }
    }
  }, [isReposition]);
  const handleCancel = () => {
    var _titleCoverRef$curren9, _titleCoverRef$curren10;
    (_titleCoverRef$curren9 = titleCoverRef.current) === null || _titleCoverRef$curren9 === void 0 ? void 0 : _titleCoverRef$curren9.setRenderPosition((0, _utils.getSafePosition)(originPositionRef.current));
    (_titleCoverRef$curren10 = titleCoverRef.current) === null || _titleCoverRef$curren10 === void 0 ? void 0 : _titleCoverRef$curren10.endReposition();
  };
  const preventDefault = e => {
    e.stopPropagation();
  };
  (0, _react.useEffect)(() => {
    const handleClick = e => {
      var _titleCoverRef$curren11;
      const imgRef = (_titleCoverRef$curren11 = titleCoverRef.current) === null || _titleCoverRef$curren11 === void 0 ? void 0 : _titleCoverRef$curren11.getImageRef();
      if (!(imgRef !== null && imgRef !== void 0 && imgRef.current) || isMovePosition.current) {
        isMovePosition.current = false;
        return;
      }
      const {
        top,
        bottom,
        left,
        right
      } = imgRef.current.getBoundingClientRect();
      const {
        clientX,
        clientY
      } = e;
      if (clientX < left || clientX > right || clientY < top || clientY > bottom) {
        var _titleCoverRef$curren12, _titleCoverRef$curren13;
        const cover = (_titleCoverRef$curren12 = titleCoverRef.current) === null || _titleCoverRef$curren12 === void 0 ? void 0 : _titleCoverRef$curren12.getCover();
        if (cover) {
          onChange === null || onChange === void 0 ? void 0 : onChange({
            ...cover,
            transform: {
              offsetY: positionRef.current
            }
          });
        }
        (_titleCoverRef$curren13 = titleCoverRef.current) === null || _titleCoverRef$curren13 === void 0 ? void 0 : _titleCoverRef$curren13.endReposition();
      }
    };
    if (isReposition) {
      document.addEventListener("click", handleClick);
    } else {
      document.removeEventListener("click", handleClick);
    }
    return () => {
      if (isReposition) {
        document.removeEventListener("click", handleClick);
      }
    };
  }, [isReposition]);
  const handleClickPickImageButton = () => {
    onPickImageStart === null || onPickImageStart === void 0 ? void 0 : onPickImageStart();
  };
  const t = (0, _locale.useTranslate)();
  const handleOnVisibleChange = v => {
    if (!v) {
      onPickImageEnd === null || onPickImageEnd === void 0 ? void 0 : onPickImageEnd();
    }
  };
  const getContainer = () => {
    return (getImagePickerContainer === null || getImagePickerContainer === void 0 ? void 0 : getImagePickerContainer()) || wrapperRef.current || document.body;
  };
  return /*#__PURE__*/_createElement(_style.ButtonsWrapper, (0, _extends2.default)({
    ref: wrapperRef
  }, (0, _mergeRestProps.mergeRestProps)(rest, 'wdn-title-cover-controll-panel')), !isReposition ? /*#__PURE__*/_createElement(_react.default.Fragment, null, /*#__PURE__*/_createElement(_popover.Popover, {
    placement: "bottomLeft",
    trigger: "click",
    content: imagePicker,
    onVisibleChange: handleOnVisibleChange,
    getContainer: getContainer,
    style: {
      borderRadius: 8
    }
  }, /*#__PURE__*/_createElement(_style.SettingButton, {
    onClick: handleClickPickImageButton,
    style: {
      borderRight: '1px solid rgba(55, 53, 47, 0.09)'
    }
  }, t("wdn_title_cover_update_image"))), /*#__PURE__*/_createElement(_style.SettingButton, {
    onClick: turnOnReposition
  }, t("wdn_title_cover_reposition"))) : /*#__PURE__*/_createElement(_react.default.Fragment, null, /*#__PURE__*/_createElement(_style.SettingButton, {
    style: {
      borderRight: '1px solid rgba(55, 53, 47, 0.09)'
    },
    onClick: savePosition,
    onMouseDown: preventDefault
  }, t("wdn_title_cover_save_position")), /*#__PURE__*/_createElement(_style.SettingButton, {
    onClick: handleCancel,
    onMouseDown: preventDefault
  }, t("wdn_cancel"))));
}));
exports.TitleCoverControllPanel = TitleCoverControllPanel;
//# sourceMappingURL=TitleCoverControllPanel.js.map