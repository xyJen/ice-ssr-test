"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawerMobile = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _common = require("../../common");
var _styled = require("./styled");
var _constants = require("./constants");
var _Dragger = require("./Dragger");
var _utils = require("./utils");
const _createElement = /*#__PURE__*/_react.default.createElement;
const DrawerMobileComp = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    visible,
    onClose,
    content,
    height = _constants.DEFAULT_DRAWER_MOBILE_HEIGHT,
    mask,
    header,
    footer,
    touchBar,
    keepMounted,
    ...rest
  } = props;
  const drawerBoxRef = _react.default.useRef(null);
  const bgRef = _react.default.useRef(null);
  const rootRef = _react.default.useRef(null);
  const [isRealVisible, setRealVisible] = _react.default.useState(props.visible);
  const dragger = _react.default.useRef(new _Dragger.Dragger({
    getDrawer: () => drawerBoxRef.current,
    getBg: () => bgRef.current,
    getDraggable: () => drawerBoxRef.current,
    getRoot: () => rootRef.current
  }));
  const handleBgClick = e => {
    e.stopPropagation();
    if (e.currentTarget === e.target && typeof onClose === 'function' && bgRef.current.style.opacity === '1' && isRealVisible) {
      dragger.current.slideOut();
    }
  };
  const handleBgTransitionEnd = event => {
    if (!bgRef.current || event.propertyName === 'opacity' && bgRef.current.style.opacity === '0') {
      visible && onClose && onClose();
      setRealVisible(false);
    }
  };
  const onBgRef = bg => {
    bgRef.current = bg;
    if (bg) {
      bg.addEventListener('transitionend', handleBgTransitionEnd);
      bg.addEventListener('touchmove', _utils.blockEvent, {
        passive: false
      });
    }
  };
  const onDrawerBoxRef = drawer => {
    drawerBoxRef.current = drawer;
    if (drawer) {
      dragger.current.enableDrag();
    }
  };
  _react.default.useEffect(() => {
    return () => {
      var _bgRef$current;
      (_bgRef$current = bgRef.current) === null || _bgRef$current === void 0 ? void 0 : _bgRef$current.removeEventListener('transitionend', handleBgTransitionEnd);
    };
  }, [handleBgTransitionEnd]);
  _react.default.useEffect(() => {
    // 外部触发打开
    if (visible && !isRealVisible) {
      setRealVisible(true);
    }
    if (isRealVisible) {
      // 外部触发关闭
      if (!visible) {
        dragger.current.slideOut();
      } else {
        dragger.current.slideIn();
      }
    }
  }, [visible, isRealVisible]);
  _react.default.useEffect(() => {
    return () => {
      var _bgRef$current2;
      dragger.current.disableDrag();
      (_bgRef$current2 = bgRef.current) === null || _bgRef$current2 === void 0 ? void 0 : _bgRef$current2.removeEventListener('touchmove', _utils.blockEvent);
    };
  }, []);
  return keepMounted || isRealVisible ? /*#__PURE__*/_createElement(_styled.Sticker, (0, _extends2.default)({
    ref: (0, _common.mergeRef)(ref, rootRef)
  }, (0, _common.mergeRestProps)(rest, 'wdn-drawer-mobile')), /*#__PURE__*/_createElement(_styled.Background, {
    ref: onBgRef,
    isVisible: isRealVisible,
    mask: mask,
    onClick: handleBgClick
  }), /*#__PURE__*/_createElement(_styled.DrawerBox, {
    style: {
      height: height
    },
    ref: onDrawerBoxRef,
    className: "wdn-drawer-mobile-drawer-box"
  }, /*#__PURE__*/_createElement(_styled.HeaderBox, {
    className: (0, _common.mergeClassName)(touchBar ? 'wdn-drawer-mobile-show-touch-bar' : '', 'wdn-drawer-mobile-header-box')
  }, header ? /*#__PURE__*/_createElement(_styled.TitleBox, {
    className: "wdn-drawer-mobile-title-box"
  }, header) : null), /*#__PURE__*/_createElement(_react.default.Fragment, null, content), /*#__PURE__*/_createElement(_styled.FooterBox, {
    className: "wdn-drawer-mobile-footer-box"
  }, footer))) : null;
});
DrawerMobileComp.displayName = 'DrawerMobileComp';
const DrawerMobile = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    getContainer,
    ...rest
  } = props;
  const container = getContainer ? getContainer() : document.body;
  return container ? /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_createElement(DrawerMobileComp, (0, _extends2.default)({
    ref: ref
  }, rest)), container) : /*#__PURE__*/_createElement(DrawerMobileComp, (0, _extends2.default)({
    ref: ref
  }, rest));
});
exports.DrawerMobile = DrawerMobile;
DrawerMobile.displayName = 'DrawerMobile';
//# sourceMappingURL=DrawerMobile.js.map