"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Segmented = void 0;
var _react = _interopRequireWildcard(require("react"));
var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));
var _styled = require("./styled");
var _common = require("../../common");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const normalizeOptions = options => options.map(opt => typeof opt === 'string' ? {
  value: opt,
  label: opt
} : opt);
const Segmented = props => {
  const {
    defaultValue,
    onChange,
    options: _options = [],
    value: _value,
    block
  } = props;
  const options = (0, _react.useMemo)(() => normalizeOptions(_options), [_options]);
  const [value, setValue] = (0, _common.useDefaultProp)(defaultValue || options[0].value, _value, onChange);
  const optionRefs = _react.default.useRef({});
  const updateInk = (0, _common.useEventCallback)(() => {
    const optionWrapper = optionRefs.current[value];
    if (optionWrapper && inkRef.current) {
      inkRef.current.style.left = optionWrapper.offsetLeft + 'px';
      inkRef.current.style.width = optionWrapper.offsetWidth + 'px';
    }
  });
  (0, _react.useEffect)(() => {
    updateInk();
  }, [value, options]);
  (0, _react.useEffect)(() => {
    if (ref.current) {
      const observer = new _resizeObserverPolyfill.default(updateInk);
      observer.observe(ref.current);
      return () => observer.disconnect();
    }
  }, [updateInk]);
  const ref = (0, _react.useRef)(null);
  const inkRef = (0, _react.useRef)(null);
  return /*#__PURE__*/_createElement(_styled.SegmentsWrapper, {
    ref: ref,
    className: "wdn-segments-wrapper",
    isBlock: block
  }, /*#__PURE__*/_createElement(_styled.SegmentsContent, null, /*#__PURE__*/_createElement(_styled.SegmentsInk, {
    ref: inkRef
  }), options.map(option => {
    const {
      label,
      value: optionValue,
      icon,
      disabled
    } = option;
    const isCustom = /*#__PURE__*/_react.default.isValidElement(label);
    const handleClick = () => {
      if (disabled) {
        return;
      }
      setValue(optionValue);
    };
    return /*#__PURE__*/_createElement(_styled.SegmentsOption, {
      key: optionValue,
      className: (0, _common.mergeClassName)(disabled ? 'wdn-segments-option-disabled' : ''),
      onClick: handleClick,
      ref: ref => {
        optionRefs.current[optionValue] = ref;
      },
      isCustom: isCustom,
      isBlock: block,
      isActive: value === optionValue
    }, icon && /*#__PURE__*/_createElement(_styled.SegmentsOptionIcon, null, icon), /*#__PURE__*/_createElement(_styled.SegmentsOptionLabel, null, label));
  })));
};
exports.Segmented = Segmented;
//# sourceMappingURL=segmented.js.map