"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.message = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _lodash = require("lodash");
var _CSSTransitionGroup = _interopRequireDefault(require("react-transition-group/CSSTransitionGroup"));
var _icons = require("./icons");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _MessageBox = require("./MessageBox");
var _local = require("./local");
var _styled = require("./styled");
const _createElement = /*#__PURE__*/_react.default.createElement;
const MESSAGE_COMMON_DURATION = 3 * 1000;
const Root = /*#__PURE__*/(0, _styledComponents.default)(_CSSTransitionGroup.default)(["", ""], _styled.root_style);
const Message = props => {
  const {
    messages
  } = props;
  return /*#__PURE__*/_createElement(Root, {
    component: "div",
    transitionName: "message",
    transitionEnterTimeout: 300,
    transitionLeaveTimeout: 300
  }, messages.map(msg => {
    const {
      key,
      icon,
      content,
      actionTitle,
      onAction = _lodash.noop
    } = msg;
    return /*#__PURE__*/_createElement(_MessageBox.MessageBox, {
      key: key,
      icon: icon,
      content: content,
      onAction: () => {
        message.close(key);
        onAction();
      },
      actionTitle: actionTitle
    });
  }));
};
let hasRendered = false;
const message = (() => {
  let messageIndex = 0;
  let messages = [];
  let renderDom = null;
  function handleUpdate(msgs) {
    if (!renderDom || !window.document.body.contains(renderDom)) {
      const oDiv = document.createElement('div');
      oDiv.style.position = 'absolute';
      oDiv.style.width = '100%';
      oDiv.style.top = '0px';
      oDiv.style.left = '0px';
      document.body.appendChild(oDiv);
      renderDom = oDiv;
    }
    if (!hasRendered) {
      _reactDom.default.render( /*#__PURE__*/_createElement(Message, {
        messages: []
      }), renderDom);
      hasRendered = true;
    }
    messages = msgs;
    _reactDom.default.render( /*#__PURE__*/_createElement(Message, {
      messages: msgs
    }), renderDom);
  }
  const getKey = () => {
    const key = `wds-msg-id-${++messageIndex}`;
    if (messageIndex > 10000000) {
      messageIndex = 0;
    }
    return key;
  };
  const noopConfig = {};
  const getProps = (icon, title, config = noopConfig) => {
    const {
      key,
      keepAlive,
      ...restConfig
    } = config;
    return {
      icon,
      content: title,
      key: key || getKey(),
      keepAlive: keepAlive === undefined ? !!config.actionTitle : keepAlive,
      ...restConfig
    };
  };
  return {
    open(itemProps) {
      const {
        getContainer,
        onClose
      } = itemProps;
      if (getContainer) {
        const container = getContainer();
        if (container && container !== window.document.body) {
          const closeLocal = (0, _local.showLocalMessage)({
            container,
            ...itemProps
          }) || _lodash.noop;
          if (!itemProps.keepAlive) {
            setTimeout(() => {
              closeLocal();
              onClose && onClose();
            }, MESSAGE_COMMON_DURATION);
          }
          return closeLocal;
        }
      }
      const {
        key
      } = itemProps;

      // 保持非恒定的的只有三个
      messages = [...messages];
      const sameKeyIndex = messages.findIndex(msg => msg.key === key);
      if (sameKeyIndex >= 0) {
        messages.splice(sameKeyIndex, 1);
      } else if (messages.length >= 3 && !itemProps.keepAlive) {
        const autoCloseFirstIndex = messages.findIndex(msg => !msg.keepAlive);
        if (autoCloseFirstIndex >= 0) {
          messages.splice(autoCloseFirstIndex, 1);
        }
      }
      messages.push(itemProps);
      handleUpdate(messages);
      if (!itemProps.keepAlive) {
        setTimeout(() => {
          this.close(key);
          onClose && onClose();
        }, MESSAGE_COMMON_DURATION);
      }
      return () => this.close(itemProps.key);
    },
    close(key) {
      messages = messages.filter(m => m.key !== key);
      handleUpdate(messages);
    },
    closeAll() {
      handleUpdate([]);
    },
    info(content, options) {
      return this.open(getProps(_icons.info, content, options));
    },
    success(content, options) {
      return this.open(getProps(_icons.success, content, options));
    },
    warning(content, options) {
      return this.open(getProps(_icons.warning, content, options));
    },
    error(content, options) {
      return this.open(getProps(_icons.error, content, options));
    },
    loading(content, options) {
      return this.open(getProps(_icons.loading, content, {
        keepAlive: true,
        ...options
      }));
    },
    message(content, options) {
      return this.open(getProps(null, content, options));
    }
  };
})();
exports.message = message;
//# sourceMappingURL=Message.js.map