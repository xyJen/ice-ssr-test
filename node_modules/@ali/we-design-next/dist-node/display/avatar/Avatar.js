"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Avatar = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _common = require("../../common");
var _constants = require("./constants");
var _styledComponents = _interopRequireDefault(require("styled-components"));
const _createElement = /*#__PURE__*/_react.default.createElement;
const AvatarText = /*#__PURE__*/_styledComponents.default.span(["display:inline-block;width:", "px;height:", "px;line-height:", "px;text-align:center;font-size:", "px;cursor:default;color:", ";background-color:rgb(0,137,255);user-select:none;"], _constants.SMALL_SIZE, _constants.SMALL_SIZE, _constants.SMALL_SIZE, _constants.SMALL_SIZE / 2, _common.COLORS.WHITE);
const AvatarImage = /*#__PURE__*/_styledComponents.default.img(["display:inline-block;width:", "px;height:", "px;cursor:default;"], _constants.SMALL_SIZE, _constants.SMALL_SIZE);
function getRealSize(size) {
  if (typeof size === 'number') {
    return size;
  }
  switch (size) {
    case 'large':
      return _constants.LARGE_SIZE;
    case 'normal':
      return _constants.NORMAL_SIZE;
    default:
      return _constants.SMALL_SIZE;
  }
}
function getAvatarStyle(size, shape) {
  const fontSize = Math.ceil(size / 2);
  let borderRadius = size >= _constants.LARGE_SIZE ? _constants.LARGE_BORDER_RADIUS : _constants.SMALL_BORDER_RADIUS;
  if (shape === 'circle') {
    borderRadius = '50%';
  }
  return {
    borderRadius,
    fontSize,
    width: size,
    height: size,
    lineHeight: `${size}px`
  };
}
function isCdnImgSrc(src) {
  return /^https?:\/\/img.alicdn.com/.test(src);
}
function getThumbnail(src = '') {
  if (!src) return '';
  const size = 100;
  if (isCdnImgSrc(src)) {
    const [host, search = ''] = src.split('?', 2);
    // 参考文档 https://open.dingtalk.com/document/orgapp-client/image-scaling
    return `${host}_${size}x${size}${search ? '?' + search : ''}`;
  }
  const url = new URL(src);
  const oldValue = url.searchParams.get('x-oss-process');
  let newValue = `image/resize,m_fill,h_${size},w_${size}`;
  if (oldValue && oldValue.startsWith('image/')) {
    // 第一个resize 配置才会生效
    newValue = 'image/' + `resize,m_fill,h_${size},w_${size}` + oldValue.slice(5);
  }
  // 参考文档 https://help.aliyun.com/document_detail/44688.html
  url.searchParams.set('x-oss-process', newValue);
  return url.toString();
}
function getLastNickName(nick, num = 2) {
  if (!nick) return '';
  const broken = Array.from(nick);
  return broken.slice(broken.length - num).join('');
}
const Avatar = props => {
  const {
    src,
    name,
    shape = 'rect',
    size = 'small',
    style: styleProp,
    ...rest
  } = props;
  const imgRef = _react.default.useRef(null);
  const [failed, setFailed] = _react.default.useState(false);
  const nickName = getLastNickName(name, 1);
  const realSize = getRealSize(size);
  const thumbnailUrl = getThumbnail(src);
  const style = getAvatarStyle(realSize, shape);
  const handleError = _react.default.useCallback(() => {
    if (src && imgRef.current && imgRef.current.src !== src) {
      // 1. fallback to fallback src
      imgRef.current.src = src;
    } else {
      // 2. fallback to TextAvatar
      setFailed(true);
    }
  }, [src]);
  if (!src || failed) {
    return /*#__PURE__*/_createElement(AvatarText, (0, _extends2.default)({}, rest, {
      style: {
        ...style,
        ...styleProp
      }
    }), nickName);
  }
  return /*#__PURE__*/_createElement(AvatarImage, (0, _extends2.default)({
    ref: imgRef,
    src: thumbnailUrl,
    onError: handleError,
    style: {
      ...style,
      ...styleProp
    }
  }, rest));
};
exports.Avatar = Avatar;
//# sourceMappingURL=Avatar.js.map