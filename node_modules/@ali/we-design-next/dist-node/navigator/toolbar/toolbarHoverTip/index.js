"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolbarHoverTip = void 0;
var _react = _interopRequireDefault(require("react"));
var _popover = require("../../../display/popover");
var _guidePanel = require("../../../office/guide-panel");
var _Tooltip = require("../../../display/tooltip/Tooltip");
const _createElement = /*#__PURE__*/_react.default.createElement;
const placementOffset = [4, 0];
const ToolbarHoverTip = /*#__PURE__*/_react.default.memo(props => {
  const {
    children,
    disabled,
    tooltip,
    overlayVisible
  } = props;
  let contentNode;
  let overlayStyle;
  let placement = 'bottom';
  if (!overlayVisible && tooltip) {
    if (typeof tooltip === 'object' && 'title' in tooltip) {
      const {
        title,
        description,
        shortCut
      } = tooltip;
      if (disabled) {
        if (!('image' in tooltip)) {
          contentNode = /*#__PURE__*/_createElement(_Tooltip.TooltipContent, {
            title: title,
            description: description
          });
          overlayStyle = _Tooltip.tooltipOverlayRestStyle;
        }
      } else if ('image' in tooltip) {
        contentNode = /*#__PURE__*/_createElement(_guidePanel.GuidePanel, {
          title: `${title} ${shortCut ? ` (${shortCut})` : ''}`,
          description: description,
          image: tooltip.image
        });
        placement = 'bottomLeft';
      } else {
        contentNode = /*#__PURE__*/_createElement(_Tooltip.TooltipContent, {
          title: `${title} ${shortCut ? ` (${shortCut})` : ''}`,
          description: description
        });
        overlayStyle = _Tooltip.tooltipOverlayRestStyle;
      }
    } else {
      contentNode = /*#__PURE__*/_createElement(_Tooltip.TooltipContent, {
        title: tooltip
      });
      overlayStyle = _Tooltip.tooltipOverlayRestStyle;
    }
  }

  // @ts-ignore
  return /*#__PURE__*/_createElement(_popover.Popover, {
    trigger: "hover",
    placement: placement,
    content: contentNode,
    style: overlayStyle,
    placementOffset: placementOffset
    // visible={!!contentNode}
  }, children);
});
exports.ToolbarHoverTip = ToolbarHoverTip;
//# sourceMappingURL=index.js.map