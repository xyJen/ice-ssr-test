{"version":3,"file":"slot.js","names":["fixedItem","Set","Slot","props","width","mode","toolbarWidth","useContext","ToolbarContext","has","display","children","renderWidth","React","cloneElement","displayName"],"sources":["../../../../src/navigator/toolbar/slot.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { ToolbarContext } from './layout/contexts';\n\ntype SlotDisplay = 'iconMenu' | 'iconSelect' | 'textSelect' | 'iconButton' | 'splitButton' | 'custom';\n\nconst fixedItem = new Set(['iconMenu', 'iconButton']);\n\nexport const Slot: React.FC<{\n  display: SlotDisplay; width?: number | ((context: { mode: 'singleLine' | 'doubleLine', toolbarWidth: number }) => number);\n  children: React.ReactElement;\n}> = (props) => {\n  const { width } = props;\n  \n  const { mode, toolbarWidth } = useContext(ToolbarContext);\n\n  if (fixedItem.has(props.display)) {\n    return props.children;\n  }\n\n  const renderWidth = typeof width === 'function' ? width({ mode, toolbarWidth: toolbarWidth || 0 })  : width;\n\n  return renderWidth\n    ? React.cloneElement(props.children, { width: renderWidth })\n    : props.children;\n};\n\nSlot.displayName=\"toolbarSlot\";\n"],"mappings":";;;;;;AAAA;AACA;AAAmD;AAAA;AAInD,MAAMA,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;AAE9C,MAAMC,IAGX,GAAIC,KAAK,IAAK;EACd,MAAM;IAAEC;EAAM,CAAC,GAAGD,KAAK;EAEvB,MAAM;IAAEE,IAAI;IAAEC;EAAa,CAAC,GAAG,IAAAC,iBAAU,EAACC,wBAAc,CAAC;EAEzD,IAAIR,SAAS,CAACS,GAAG,CAACN,KAAK,CAACO,OAAO,CAAC,EAAE;IAChC,OAAOP,KAAK,CAACQ,QAAQ;EACvB;EAEA,MAAMC,WAAW,GAAG,OAAOR,KAAK,KAAK,UAAU,GAAGA,KAAK,CAAC;IAAEC,IAAI;IAAEC,YAAY,EAAEA,YAAY,IAAI;EAAE,CAAC,CAAC,GAAIF,KAAK;EAE3G,OAAOQ,WAAW,gBACdC,cAAK,CAACC,YAAY,CAACX,KAAK,CAACQ,QAAQ,EAAE;IAAEP,KAAK,EAAEQ;EAAY,CAAC,CAAC,GAC1DT,KAAK,CAACQ,QAAQ;AACpB,CAAC;AAAC;AAEFT,IAAI,CAACa,WAAW,GAAC,aAAa"}