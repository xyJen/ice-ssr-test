"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseSplitButton = void 0;
var _react = _interopRequireWildcard(require("react"));
var _popover = require("../../../../display/popover");
var _icon = require("../../../../basic/icon");
var _toolbarHoverTip = require("../../toolbarHoverTip");
var _common = require("../../../../common");
var _styled = require("./styled");
var _badge = require("../../../../basic/badge");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const placementOffset = [4, 0];
const BaseSplitButton = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    icon,
    title,
    tooltip,
    disabled,
    size,
    overlay,
    autoClose,
    active,
    overlayVisible,
    onVisibleChange,
    badgeDot,
    onClick,
    overlayStyle,
    testid,
    role,
    getContainer,
    placement = 'bottomLeft',
    width,
    ...restProps
  } = props;
  const [menuVisible, setMenuVisible] = (0, _common.useDefaultProp)(false, overlayVisible, onVisibleChange);
  const cRef = (0, _react.useRef)({
    lastTime: 0,
    v: menuVisible
  });
  cRef.current.v = menuVisible;
  const wrapRef = (0, _react.useRef)(null);
  const onArrowClick = (0, _react.useCallback)(e => {
    const now = Date.now().valueOf();
    if (now - cRef.current.lastTime > 300) {
      cRef.current.lastTime = now;
      setMenuVisible(!cRef.current.v);
    }
  }, []);
  const showTitle = size === 'large';
  return /*#__PURE__*/_createElement(_styled.Wrapper, {
    ref: (0, _common.mergeRef)(ref, wrapRef),
    className: (0, _common.mergeClassName)('wdn-toolbar-item', size, active && 'active', disabled && 'disabled'),
    "data-testid": testid,
    "data-role": role,
    style: width ? {
      width: width
    } : undefined
  }, /*#__PURE__*/_createElement(_popover.Popover, {
    content: overlay,
    onVisibleChange: setMenuVisible,
    visible: menuVisible,
    getContainer: getContainer || (() => wrapRef.current || document.body),
    placementOffset: placementOffset,
    placement: placement,
    animation: true,
    "data-testid": `overlay-${testid}`
  }, /*#__PURE__*/_createElement("div", {
    style: {
      lineHeight: 0,
      overflow: 'hidden'
    }
  }, /*#__PURE__*/_createElement(_toolbarHoverTip.ToolbarHoverTip, {
    overlayVisible: menuVisible,
    disabled: disabled,
    tooltip: tooltip || !showTitle && !disabled && title
  }, /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-split-btn",
    style: width ? {
      width: width
    } : undefined
  }, /*#__PURE__*/_createElement("div", {
    className: (0, _common.mergeClassName)('wdn-toolbar-split-left', active && 'active'),
    onClick: disabled ? undefined : onClick
  }, /*#__PURE__*/(0, _react.cloneElement)(icon, {
    size: size === 'large' ? 'large' : 'normal'
  })), /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-split-btn-arrow",
    onClick: onArrowClick
  }, /*#__PURE__*/_createElement(_icon.IconArrowDown, {
    className: `wdn-tb-menu-array ${menuVisible ? 'rotate' : ''}`,
    style: {
      width: 10,
      height: 10
    }
  })), badgeDot && (typeof badgeDot === 'boolean' ? /*#__PURE__*/_createElement(_badge.BadgeDot, {
    style: {
      position: 'absolute',
      top: 0,
      right: 10
    }
  }) : /*#__PURE__*/_createElement(_badge.BadgeDot, {
    style: {
      position: 'absolute',
      top: badgeDot.top,
      right: badgeDot.right + 10
    }
  })))))), showTitle && /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-title",
    onClick: disabled ? undefined : onClick
  }, title));
}));
exports.BaseSplitButton = BaseSplitButton;
//# sourceMappingURL=BaseSplitButton.js.map