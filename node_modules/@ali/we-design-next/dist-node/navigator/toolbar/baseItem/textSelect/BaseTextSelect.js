"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BseIconSelect = void 0;
var _react = _interopRequireWildcard(require("react"));
var _select = require("../../../../form/select");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _toolbarHoverTip = require("../../toolbarHoverTip");
var _common = require("../../../../common");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const SelectWrapper = /*#__PURE__*/(0, _styledComponents.default)(_select.Select)(["&.normal .wdn-select-normal,&.normal  .wdn-select-input{height:28px;background:", ";&:hover{background:rgba(25,31,37,0.08)};}&.small .wdn-select-normal,&.small .wdn-select-input{height:24px;background:rgb(255,255,255);border:1px solid rgb(17,31,44,0.12)!important;box-shadow:unset!important;}input{background:", ";}span:not(.wdn-toolbar-select-value){margin:0;svg{transition:transform 500ms;transform:rotate(0deg);width:8px;height:8px;}}"], _common.COLORS.TRANSPARENT, _common.COLORS.TRANSPARENT);
function renderValue(title) {
  return /*#__PURE__*/_createElement("div", {
    style: {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      overflowWrap: 'normal',
      whiteSpace: 'nowrap'
    }
  }, title || '');
}
;
const BseIconSelect = /*#__PURE__*/_react.default.memo(props => {
  const {
    tooltip,
    mode,
    disabled,
    size,
    options,
    overlayVisible: overlayVisible_,
    onVisibleChange,
    width,
    value,
    onChange,
    renderOption,
    renderValue: renderValue_,
    testid,
    role,
    keyboard
  } = props;
  const [overlayVisible, setOverlayVisible] = (0, _common.useDefaultProp)(false, overlayVisible_, onVisibleChange);
  const style = (0, _react.useMemo)(() => {
    const s = size === 'normal' ? {
      height: 28,
      width
    } : {
      height: 24,
      width
    };
    return s;
  }, [size, width]);
  const title = (0, _react.useMemo)(() => {
    if (value && options) {
      for (let i = 0; i < options.length; i++) {
        const t = options[i];
        if (t === value) {
          return t;
        } else if (typeof t === 'object' && 'key' in t && t.key === value) {
          // @ts-ignore
          return t.title || '';
        }
      }
    }
    return undefined;
  }, [value, options]);
  return /*#__PURE__*/_createElement(_toolbarHoverTip.ToolbarHoverTip, {
    tooltip: tooltip,
    disabled: disabled,
    overlayVisible: overlayVisible
  }, /*#__PURE__*/_createElement(SelectWrapper, {
    className: (0, _common.mergeClassName)('wdn-toolbar-item-select', 'wdn-toolbar-item', size, disabled && 'disabled'),
    style: style,
    disabled: disabled,
    mode: mode,
    bordered: false,
    value: value,
    onChange: onChange,
    options: options,
    visible: overlayVisible,
    onVisibleChange: setOverlayVisible,
    renderOption: renderOption,
    renderValue: renderValue_ ? renderValue_ : () => {
      return renderValue(title);
    },
    "data-testid": testid,
    "data-role": role,
    keyboard: keyboard
  }));
});
exports.BseIconSelect = BseIconSelect;
//# sourceMappingURL=BaseTextSelect.js.map