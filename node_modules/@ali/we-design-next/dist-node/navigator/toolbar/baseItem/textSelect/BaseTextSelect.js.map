{"version":3,"file":"BaseTextSelect.js","names":["SelectWrapper","styled","Select","COLORS","TRANSPARENT","renderValue","title","overflow","textOverflow","overflowWrap","whiteSpace","BseIconSelect","React","memo","props","tooltip","mode","disabled","size","options","overlayVisible","overlayVisible_","onVisibleChange","width","value","onChange","renderOption","renderValue_","testid","role","keyboard","setOverlayVisible","useDefaultProp","style","useMemo","s","height","i","length","t","key","undefined","mergeClassName"],"sources":["../../../../../../src/navigator/toolbar/baseItem/textSelect/BaseTextSelect.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { Select } from '../../../../form/select';\nimport type { IBaseSelectProps } from './interface';\nimport styled from 'styled-components';\nimport { ToolbarHoverTip } from '../../toolbarHoverTip';\nimport { useDefaultProp, COLORS, mergeClassName } from '../../../../common';\n\n\nconst SelectWrapper = styled(Select)`\n  &.normal .wdn-select-normal,&.normal  .wdn-select-input {\n    height: 28px;\n    background: ${COLORS.TRANSPARENT};\n    &:hover{ background: rgba(25, 31, 37, 0.08) };\n  }\n\n  &.small .wdn-select-normal,&.small .wdn-select-input {\n    height: 24px;\n    background: rgb(255, 255, 255);\n    border: 1px solid rgb(17, 31, 44, 0.12)!important;\n    box-shadow: unset!important;\n    /* &:hover{ background: rgba(25, 31, 37, 0.08) }; */\n  }\n    \n  input {\n    background: ${COLORS.TRANSPARENT};\n  }\n  span:not(.wdn-toolbar-select-value) {\n    margin: 0;\n    svg {\n      transition: transform 500ms;\n      transform: rotate(0deg);\n      width: 8px;\n      height: 8px;\n    }\n  }\n`\n\nfunction renderValue (title?: React.ReactNode | string): IBaseSelectProps['renderValue'] {\n  return <div\n    style={{ overflow: 'hidden', textOverflow: 'ellipsis', overflowWrap: 'normal', whiteSpace: 'nowrap' }}\n  >\n    {title || ''}\n  </div>;\n};\n\nexport const BseIconSelect = React.memo((props: IBaseSelectProps) => {\n  const {\n    tooltip,\n    mode,\n    disabled,\n    size,\n    options,\n    overlayVisible: overlayVisible_,\n    onVisibleChange,\n    width,\n    value,\n    onChange,\n    renderOption,\n    renderValue: renderValue_,\n    testid,\n    role,\n    keyboard,\n  } = props;\n\n  const [overlayVisible, setOverlayVisible] = useDefaultProp(false, overlayVisible_, onVisibleChange);\n\n  const style = useMemo(() => {\n    const s: React.CSSProperties = size === 'normal' ? { height: 28, width } : { height: 24, width };\n    return s;\n  }, [size, width]);\n\n  const title = useMemo(() => {\n    if (value && options) {\n      for (let i = 0; i < options.length; i++) {\n        const t = options[i];\n        if (t === value) {\n          return t;\n        } else if ((typeof t === 'object') && ('key' in t) && (t.key === value)) {\n          // @ts-ignore\n          return (t.title as React.ReactNode | string ) || '';\n        }\n\n      }\n    }\n    return undefined;\n  }, [value, options]);\n\n  return (\n    <ToolbarHoverTip tooltip={tooltip} disabled={disabled} overlayVisible={overlayVisible}>\n      <SelectWrapper\n        className={mergeClassName('wdn-toolbar-item-select', 'wdn-toolbar-item', size, disabled && 'disabled')}\n        style={style}\n        disabled={disabled}\n        mode={mode}\n        bordered={false}\n        value={value}\n        onChange={onChange}\n        options={options}\n        visible={overlayVisible}\n        onVisibleChange={setOverlayVisible}\n        renderOption={renderOption}\n        renderValue={renderValue_ ? renderValue_ : (() => { return renderValue(title)})}\n        data-testid={testid}\n        data-role={role}\n        keyboard={keyboard}\n      />\n    </ToolbarHoverTip>\n\n  );\n});"],"mappings":"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"}