"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BseIconSelect = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _select = require("../../../../form/select");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _toolbarHoverTip = require("../../toolbarHoverTip");
var _useDefaultProp = require("../../../../common/react/useDefaultProp");
var _common = require("../../../../common");
var _tooltip = require("../../../../display/tooltip");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const SelectWrapper = /*#__PURE__*/(0, _styledComponents.default)(_select.Select)(["&.normal .wdn-select-normal,.wdn-select-input{height:28px;padding-left:0}&.small .wdn-select-normal,.wdn-select-input{height:24px}.wdn-select-normal{padding-left:2px;:hover{background:", ";}}&.active .wdn-select-normal{background:", ";}.wdn-toolbar-select-value{display:flex;line-height:20px;font-size:12px;align-items:center;&>:not(:last-child){flex-shrink:0;}.title{flex-shrink:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}}span:not(.wdn-toolbar-select-value *){margin:0;svg{margin-right:-4px;transition:transform 500ms;transform:rotate(0deg);width:8px;height:8px;}}&.disabled{opacity:0.35;}&.disabled *{color:unset;}"], _common.COLORS.LIGHT.DAVINCI_BLUE_LIGHT_HOVER, _common.COLORS.LIGHT.DAVINCI_BLUE_LIGHT_ACTIVE);
function getSelectOptions(tbOption) {
  return {
    key: tbOption.key,
    prefix: tbOption.icon,
    title: tbOption.title,
    disabled: tbOption.disabled,
    testid: tbOption.testid
  };
}
function renderValueByOPt(tbOption, needTitle) {
  const node = /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-select-value"
  }, tbOption.icon, needTitle && /*#__PURE__*/_createElement("span", {
    className: "title"
  }, tbOption.title));
  return node;
}
const BseIconSelect = /*#__PURE__*/_react.default.memo(props => {
  const {
    tooltip,
    disabled,
    size,
    options,
    overlayVisible: overlayVisible_,
    onVisibleChange,
    width,
    value,
    onChange,
    getContainer,
    testid,
    role,
    keyboard
  } = props;
  const [optMap, opts] = (0, _react.useMemo)(() => {
    const validOptMap = new Map();
    const validOptions = [];
    options.forEach(opt => {
      if (opt === 'divider') {
        validOptions.push(opt);
      } else if ('items' in opt) {
        const group = {
          items: [],
          title: opt.title
        };
        opt.items.forEach(item => {
          validOptMap.set(item.key, item);
          group.items.push(getSelectOptions(item));
        });
        validOptions.push(group);
      } else {
        validOptions.push(getSelectOptions(opt));
        validOptMap.set(opt.key, opt);
      }
    });
    return [validOptMap, validOptions];
  }, [options]);
  const isNormal = size === 'normal';
  const style = (0, _react.useMemo)(() => {
    const s = isNormal ? {
      height: 28
    } : {
      height: 24
    };
    if (isNormal) {
      s.width = 37;
    } else {
      s.width = width ? Math.max(37, width) : 37;
    }
    return s;
  }, [size, width]);
  const renderValue = (0, _react.useCallback)(() => {
    const opt = value && optMap.get(value);
    const a = opt ? renderValueByOPt(opt, isNormal ? false : !!style.width && style.width > 37) : null;
    return a;
  }, [value, optMap, isNormal, style]);
  const renderOption = (0, _react.useCallback)(({
    key
  }) => {
    const opt = optMap.get(key);
    if (!opt) {
      return null;
    }
    const {
      tooltip,
      title,
      ...restOPt
    } = opt;
    const optNode = /*#__PURE__*/_createElement(_select.Select.Option, (0, _extends2.default)({
      children: title
    }, restOPt));
    const option = tooltip ? /*#__PURE__*/_createElement(_tooltip.Tooltip, {
      placement: "left",
      title: tooltip
    }, optNode) : tooltip;
    return option;
  }, [value, optMap, isNormal]);
  const [overlayVisible, setOverlayVisible] = (0, _useDefaultProp.useDefaultProp)(false, overlayVisible_, onVisibleChange);
  return /*#__PURE__*/_createElement(_toolbarHoverTip.ToolbarHoverTip, {
    disabled: disabled,
    overlayVisible: overlayVisible,
    tooltip: tooltip
  }, /*#__PURE__*/_createElement(SelectWrapper, {
    renderValue: renderValue,
    className: (0, _common.mergeClassName)('wdn-toolbar-item-select wdn-toolbar-item', overlayVisible && 'active', size, disabled && 'disabled'),
    style: style,
    renderOption: renderOption,
    disabled: disabled,
    bordered: false,
    value: value,
    onChange: onChange,
    options: opts,
    visible: overlayVisible,
    onVisibleChange: setOverlayVisible,
    getContainer: getContainer,
    "data-testid": testid,
    "data-role": role,
    keyboard: keyboard
  }));
});
exports.BseIconSelect = BseIconSelect;
//# sourceMappingURL=BaseIconSelect.js.map