"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolbarLayout = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _lodash = require("lodash");
var _react = _interopRequireWildcard(require("react"));
var _common = require("../../../../common");
var _icon = require("../../../../basic/icon");
var _style = require("./style");
var _itemLayout = require("./itemLayout");
var _CSSTransitionGroup = _interopRequireDefault(require("react-transition-group/CSSTransitionGroup"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const noopArr = [];
const styleWith0Arrow = {
  width: '100%'
};
const styleWith1Arrow = {
  width: 'calc(100% - 24px)'
};
const styleWith2Arrow = {
  width: 'calc(100% - 48px)'
};
const ToolbarLayout = /*#__PURE__*/_react.default.memo(props => {
  const {
    onModeChange,
    defaultMode,
    mode,
    doubleLineToolbar,
    singleLineToolbar,
    onLayoutRender = _lodash.noop,
    align = 'left',
    layout = 'fix-wrapper',
    style,
    ...restProps
  } = props;
  const [layoutMode, setLayoutMode] = (0, _common.useDefaultProp)(defaultMode || (doubleLineToolbar ? 'doubleLine' : 'singleLine'), mode, onModeChange);
  const layoutModeRef = (0, _react.useRef)(layoutMode);
  layoutModeRef.current = layoutMode;
  const needSwitchMode = doubleLineToolbar && singleLineToolbar;
  const onArrowClick = (0, _react.useCallback)((0, _lodash.throttle)(() => {
    setLayoutMode(layoutModeRef.current === 'singleLine' ? 'doubleLine' : 'singleLine');
  }, 800), []);
  const background = (style === null || style === void 0 ? void 0 : style.background) || (style === null || style === void 0 ? void 0 : style.backgroundColor);
  return /*#__PURE__*/_createElement(_style.ToolbarLayoutWrapper, (0, _extends2.default)({}, (0, _common.mergeRestProps)(restProps, `wdn-toolbar-layout ${layout}`), {
    style: style
  }), /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-content"
  }, align === 'center' && needSwitchMode && /*#__PURE__*/_createElement("div", {
    style: {
      flexGrow: 0,
      width: 20
    }
  }), /*#__PURE__*/_createElement(_CSSTransitionGroup.default, {
    transitionName: 'toolbar-left',
    className: `wdn-toolbar-items ${layoutMode} ${needSwitchMode ? 'with_switch' : ''}`,
    transitionEnterTimeout: 500,
    transitionLeaveTimeout: 300,
    style: needSwitchMode ? align === 'center' ? styleWith2Arrow : styleWith1Arrow : styleWith0Arrow
  }, layoutMode === 'singleLine' ? /*#__PURE__*/_createElement(_itemLayout.SingLineItemLayout, {
    background: background,
    key: "singleLine",
    autoFold: layout === 'fix-wrapper',
    align: align,
    items: singleLineToolbar || noopArr,
    onLayoutRender: onLayoutRender
  }) : /*#__PURE__*/_createElement(_itemLayout.DoubleLineItemLayout, {
    background: background,
    key: "doubleLine",
    autoFold: layout === 'fix-wrapper',
    align: align,
    items: doubleLineToolbar || noopArr,
    onLayoutRender: onLayoutRender
  })), needSwitchMode && /*#__PURE__*/_createElement("div", {
    className: "wdn-icon-switch-wrapper"
  }, /*#__PURE__*/_createElement(_icon.IconArrowUp, {
    className: `wdn-icon-switch ${layoutMode === 'singleLine' ? 'rotate' : ''}`,
    onClick: onArrowClick
  }))));
});
exports.ToolbarLayout = ToolbarLayout;
//# sourceMappingURL=toolbarLayout.js.map