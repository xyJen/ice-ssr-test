"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FontDetector = void 0;
var _uuid = require("uuid");
var _fastdom = _interopRequireDefault(require("fastdom"));
/* eslint-disable consistent-return */
/* eslint-disable @typescript-eslint/no-explicit-any */

const woff = 'data:font/woff;charset=utf-8;base64,d09GRk9UVE8AAAQYAAoAAAAABlwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABDRkYgAAAA9AAAAMQAAADSEQga8UZGVE0AAAG4AAAAGwAAABxqQJGNT1MvMgAAAdQAAABDAAAAYFYPXfBjbWFwAAACGAAAADcAAAFCAA0D1mhlYWQAAAJQAAAAKQAAADb9ITBXaGhlYQAAAnwAAAAZAAAAJAN7/ztobXR4AAACmAAAAAgAAAAIAfQAAG1heHAAAAKgAAAABgAAAAYAAlAAbmFtZQAAAqgAAAFZAAACjkaWZeZwb3N0AAAEBAAAABMAAAAg/4YAMnicY2RgYWFgZGTkCs0rySzJSU0xZGBkYmBk0PjBz/BDmvGHDNMPWeYf4izdQMAqw7CIX4aBQUCGYamgDAO7DMNpIQZmkGoXBl+GMOei1MSS1BSFpEqFqtS8fCBO19HRUSjPLMlQcMvPK3HLL0pPVTDSM1DQyCgpKbDS108DiqaBRPWK0/TyUks04Y5AuAYIBBmYGBkVFLv3/nDdy7h37++Yvcx7xdR/rHzPtvdPuegP198xf1zZ+fi6RbpFu3m4ANybP/V4nGNgYGBkAIIztovOg+jzjOV2ULoeAEMOBccAeJxjYGH8wviFgZWBgamLaQ8DA0MPhGZ8wGDIyAQUZWBjZoABRgYkEJDmmsJwgMGAwYBZ4b8FQxSGGgUgZAQAfmQKqgB4nGNgYGBmgGAZBkYGELAB8hjBfBYGBSDNAoQgvsH//xDy/0WoSgZGNgYYk2hAqvrBDgBrAQbjAHicY2BkYGAA4pys3ox4fpuvDNzML4AiDOcZy3ci01DAwcAEogAU4ghtAAAAeJxjYGRgYFb4b8EQxQADjAyogAkAMlIBuQAAAAH0AAAAAAAAAABQAAACAAB4nIWQzUoDMRSFT+wPFESkT5CNUGEmzZRuOluhC8Wl3bdMph2omTpNKe1eceebCL6Ca9euXfsE7vTMNBREsBOS+92TMzc3AXCCZwjsvgs8ehZo4cPzEZr48lzDmbjyXEdL3Htu4FS8eG5Sf6dT1FvMHqq/ShZo483zEY7x6bmGS3x7rqMt7jw3IMWT5yb1V/ZXwGAMxzWBxAQbrltmFrmPUwTVkFgjo3NGGnLXkstY0GGo9aCgGTt0OI4FYnQ5Uu9N916FJTNF1VA/5zMVZuxMIicbuTU255wGQSDXmZvJYW7dMC+mRvaUlp2Zc4u4202ppqWqlqmyxrHITXVK2eG8uk1EybrMzU1CvK60DCvcMjFJtmL87xox59+SOz3CACHXkG7N2GepX23Gcn80ORqEUdjTUf9QkyNqBR8nq/qSrF1WV1Use8LIFMsst1LrSGmt5YGCP/yzcc0AAAB4nGNgZgCD/80MRgxYAAAoRAG4AA==';

/**
 * 20200126 引入 uuid，保证多实例 hook，避免多个hook同时对dom操作造成的判断失效
 * 保证每次调用能拿到同一个值
 */
class FontDetector {
  constructor(fonts) {
    this.css = void 0;
    this.timer = void 0;
    this.uuid = void 0;
    this.styleUuid = void 0;
    this.iframeUuid = void 0;
    this.detection = void 0;
    this.fonts = void 0;
    this.ready = callback => {
      this.timer = window.setTimeout(() => {
        var _iframe;
        let iframe = document.getElementById(this.iframeUuid);
        if (!iframe) {
          this.inject();
          iframe = document.getElementById(this.iframeUuid);
        }
        // warning: 这里的判断逻辑过于 hack，无法找到ref来自哪里
        if ((_iframe = iframe) !== null && _iframe !== void 0 && _iframe.style && iframe.clientWidth === 0) {
          return callback();
        }
      }, 0);
    };
    this.detect = () => {
      return new Promise(relove => {
        if (this.detection) {
          relove(this.detection);
          return;
        }
        const detection = [];
        this.ready(() => this.getResult(res => {
          this.detection = res;
          relove(this.detection);
          return;
        }));
      });
    };
    this.fonts = fonts;
    this.detection;
    const uid = (0, _uuid.v4)();
    this.uuid = `font-${uid}`;
    this.styleUuid = `style-${uid}`;
    this.iframeUuid = `iframe-${uid}`;
    this.css = `
    @font-face {
      font-family: font-detect-0-woff;
      src: url(${woff}) format('woff');
    }
    #${this.uuid} {
      display: inline-block;
      position: fixed;
      left: -1000px;
      top: -1000px;
      font-family: font-detect-0-woff;
    }
    #${this.uuid} .fontspan {
      display: inline-block;
      position: fixed;
      left: -1000px;
      top: -1000px;
    }
    `;
    this.inject();
    this.timer = 0;
  }
  inject() {
    let iframe = document.getElementById(this.iframeUuid);
    if (!iframe) {
      iframe = document.createElement('iframe');
      iframe.id = this.iframeUuid;
      iframe.style.cssText = `
        position: fixed;
        left: -1000px;
        top: -1000px;
        width: 0;
        height: 0;
        border: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        z-index: -1;
      `;
      document.body.appendChild(iframe);
      const iframeDoc = iframe.contentDocument;
      const sheet = iframeDoc.createElement('style');
      sheet.setAttribute('type', 'text/css');
      sheet.id = this.styleUuid;
      sheet.innerHTML = this.css;
      const head = iframeDoc.getElementsByTagName('head')[0];
      head.appendChild(sheet);
      const elem = iframeDoc.createElement('div');
      elem.id = this.uuid;
      elem.innerHTML = '0';
      iframeDoc.body.appendChild(elem);
    }
  }
  remove() {
    const elem = document.getElementById(this.iframeUuid);
    if (elem != null) {
      elem.remove();
    }
  }
  destroy() {
    if (this.timer) {
      window.clearTimeout(this.timer);
      this.remove();
    }
  }
  getResult(callback) {
    const iframe = document.getElementById(this.iframeUuid);
    const iframeDoc = iframe.contentDocument;
    const elem = iframeDoc.getElementById(this.uuid);
    const fragment = iframeDoc.createDocumentFragment();
    // eslint-disable-next-line no-restricted-syntax
    for (const font of this.fonts) {
      const el = iframeDoc.createElement('span');
      el.className = 'fontspan';
      el.innerHTML = '0';
      el.style.fontFamily = `'${font}', font-detect-0-woff`;
      fragment.appendChild(el);
    }
    elem.appendChild(fragment);
    // read dom on next cycle
    _fastdom.default.measure(() => {
      const results = Array.from(elem.children).map(el => el.clientWidth > 0);
      this.detection = results;
      callback(results);
      this.remove();
    });
  }
}
exports.FontDetector = FontDetector;
//# sourceMappingURL=FontDetector.js.map