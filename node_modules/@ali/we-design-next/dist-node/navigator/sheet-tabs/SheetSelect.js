"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SheetSelect = void 0;
var _react = _interopRequireWildcard(require("react"));
var _popover = require("../../display/popover");
var _tooltip = require("../../display/tooltip");
var _input = require("../../form/input");
var _common = require("../../common");
var _locale = require("../../locale");
var _InlineTab = require("./InlineTab");
var _styled = require("./styled");
var _ListIcon;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const SHOW_SEARCH_INPUT_NUM = 10; // 超过10个工作表显示搜索框

const SheetSelect = /*#__PURE__*/_react.default.memo(props => {
  const {
    tabs,
    tab,
    setActiveTab,
    disabled,
    renderInlineTab
  } = props;
  const [visible, setVisible] = (0, _react.useState)(false);
  const [searchValue, setSearchValue] = (0, _react.useState)("");
  const t = (0, _locale.useTranslate)();
  const searchedList = (0, _react.useMemo)(() => tabs.filter(item => item.title.toLowerCase().includes(searchValue.toLowerCase())), [tabs, searchValue]);
  const onVisibleChange = (0, _react.useCallback)(e => {
    if (disabled || e && visible) {
      setVisible(false);
      setSearchValue("");
    } else {
      setVisible(e);
      !e && setSearchValue("");
    }
  }, [visible, disabled]);
  const listButton = /*#__PURE__*/_createElement(_styled.IconWrapper, {
    className: (0, _common.mergeClassName)(visible ? "active" : undefined, disabled ? "disabled" : undefined)
  }, _ListIcon || (_ListIcon = /*#__PURE__*/_createElement(_styled.ListIcon, null)));
  return /*#__PURE__*/_createElement(_popover.Popover, {
    trigger: "click",
    placement: "topLeft",
    animation: true,
    content: /*#__PURE__*/_createElement(_styled.SelectOverlay, null, tabs.length > SHOW_SEARCH_INPUT_NUM ? /*#__PURE__*/_createElement(_styled.InputWrapper, null, /*#__PURE__*/_createElement(_input.Input, {
      placeholder: t('wdn_sheet_tabs_search'),
      value: searchValue,
      onChange: e => setSearchValue(e.target.value)
    })) : null, /*#__PURE__*/_createElement(_styled.ListWrapper, {
      className: (0, _common.mergeClassName)(!!searchValue ? "searching" : undefined)
    }, searchedList.length > 0 ? searchedList.map(_tab => (0, _common.renderReactNode)(renderInlineTab, /*#__PURE__*/_createElement(_InlineTab.InlineTab, {
      key: _tab.key,
      tab: _tab.key,
      title: _tab.title,
      hidden: _tab.hidden,
      searchValue: searchValue,
      selected: _tab.key === tab,
      onClick: () => {
        if (_tab.key === tab) return;
        setActiveTab(_tab.key);
        setVisible(false);
      }
    }), {
      key: _tab.key
    })) : /*#__PURE__*/_createElement(_styled.EmptyWrapper, null, t('wdn_sheet_tabs_search_empty')))),
    visible: visible,
    onVisibleChange: onVisibleChange
  }, /*#__PURE__*/_createElement("div", {
    style: {
      height: '100%'
    }
  }, disabled ? listButton : /*#__PURE__*/_createElement(_tooltip.Tooltip, {
    title: t('wdn_sheet_tabs_all'),
    placement: "top"
  }, listButton)));
});
exports.SheetSelect = SheetSelect;
//# sourceMappingURL=SheetSelect.js.map