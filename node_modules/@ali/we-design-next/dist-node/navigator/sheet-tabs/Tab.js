"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tab = exports.TAB_ID_PREFIX = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _common = require("../../common");
var _input = require("../../form/input");
var _styled = require("./styled");
var _SheetTabs = require("./SheetTabs");
var _useClickOuterRef = require("./useClickOuterRef");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _createElement = /*#__PURE__*/_react.default.createElement;
const TAB_ID_PREFIX = 'sheet-tab-';
exports.TAB_ID_PREFIX = TAB_ID_PREFIX;
const Tab = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    switchable,
    renamable,
    onContextMenu,
    onRename,
    tab = '',
    title,
    active,
    editing,
    setActiveTab,
    onEditingTab,
    onQuitEditingTab,
    prefix,
    suffix,
    className,
    ...restProps // 拖拽透传的props
  } = props;
  const inputRef = (0, _react.useRef)(null);
  const [inputValue, setInputValue] = (0, _react.useState)();
  const {
    editHandlers
  } = (0, _react.useContext)(_SheetTabs.SheetTabsProvider);
  const handleStartEdit = (0, _react.useCallback)(() => {
    onEditingTab === null || onEditingTab === void 0 ? void 0 : onEditingTab(tab);
    setTimeout(() => {
      if (inputRef.current) {
        var _inputRef$current, _inputRef$current2;
        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
        (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.select();
      }
    }, 0);
  }, [tab, onEditingTab]);
  const handleQuitEdit = (0, _react.useCallback)(() => {
    const newTitle = inputValue && inputValue.trim();
    typeof newTitle !== 'undefined' && newTitle !== title && (onRename === null || onRename === void 0 ? void 0 : onRename(tab, newTitle));
    setInputValue(undefined);
    onQuitEditingTab === null || onQuitEditingTab === void 0 ? void 0 : onQuitEditingTab(tab);
  }, [inputValue, onRename, tab, title, onQuitEditingTab]);
  const handleKeyDown = (0, _react.useCallback)(e => {
    if (inputRef.current && (e.which === _common.KEY_CODES.ENTER || e.which === _common.KEY_CODES.ESCAPE)) {
      inputRef.current.blur();
    }
  }, []);
  const handleContextMenu = (0, _react.useCallback)(e => {
    e.preventDefault();
    e.stopPropagation();
    onContextMenu === null || onContextMenu === void 0 ? void 0 : onContextMenu(tab, e);
  }, [onContextMenu]);
  (0, _react.useLayoutEffect)(() => {
    const editHandlersCurrent = editHandlers.current;
    editHandlersCurrent[tab] = handleStartEdit;
    return () => {
      delete editHandlersCurrent[tab];
    };
  }, [handleStartEdit, tab]);
  const inputStyle = (0, _react.useMemo)(() => {
    return {
      height: _styled.BOTTOM_BAR_HEIGHT,
      position: 'absolute',
      left: 0,
      right: 0,
      border: 0,
      paddingLeft: 8,
      borderRadius: 'unset',
      transition: 'none',
      transform: editing ? undefined : 'translate(-100%, -100%)',
      backgroundColor: 'white'
    };
  }, [editing]);

  // 整合了 draggable 的 ref、点击输入框外的区域的处理
  const nodeRef = (0, _common.mergeRef)((0, _useClickOuterRef.useClickOuterRef)(handleQuitEdit, editing), ref);
  return /*#__PURE__*/_createElement(_styled.TabWrapper, (0, _extends2.default)({
    ref: nodeRef,
    id: `${TAB_ID_PREFIX}${tab}`,
    className: (0, _common.mergeClassName)(!switchable && !active ? "disabled" : undefined, active ? "active" : undefined, className),
    onMouseDown: e => {
      if (active) return;
      switchable && (setActiveTab === null || setActiveTab === void 0 ? void 0 : setActiveTab(tab));
    },
    onDoubleClick: () => renamable && handleStartEdit(),
    onContextMenu: handleContextMenu
  }, restProps), /*#__PURE__*/_createElement(_input.Input, {
    ref: inputRef,
    bordered: false,
    style: inputStyle,
    value: typeof inputValue === 'undefined' ? title : inputValue,
    onChange: e => setInputValue(e.target.value),
    onBlur: () => handleQuitEdit(),
    onKeyDown: e => handleKeyDown(e)
  }), editing ? null : prefix, /*#__PURE__*/_createElement(_styled.TabText, null, title), editing ? null : suffix);
});
exports.Tab = Tab;
//# sourceMappingURL=Tab.js.map