"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeReactNode = void 0;
var _react = require("react");
var _mergeRef = require("./mergeRef");
const mergeReactNode = (target, source, depth = 0, curDepth = depth) => {
  if (target === null) {
    return target;
  }
  if (target === undefined) {
    return source;
  }
  if (! /*#__PURE__*/(0, _react.isValidElement)(target)) {
    return target;
  }
  if (! /*#__PURE__*/(0, _react.isValidElement)(source)) {
    return target;
  }
  if (target.type === source.type) {
    const toCloneProps = {};
    const sourceRef = source.ref;
    const targetRef = target.ref;
    const mergedRef = sourceRef && targetRef ? (0, _mergeRef.mergeRef)(sourceRef, targetRef) : sourceRef || targetRef;
    if (mergedRef) {
      toCloneProps.ref = mergedRef;
    }
    const sourceKey = source.key;
    const targetKey = target.key;
    const toClonedKey = targetKey || sourceKey;
    if (toClonedKey) {
      toCloneProps.key = toClonedKey;
    }
    for (const p in source.props) {
      const sourceProp = source.props[p];
      const targetProp = target.props[p];
      if (p === 'style') {
        const sourceStyle = sourceProp || {};
        const targetStyle = targetProp || {};
        toCloneProps[p] = {
          ...sourceStyle,
          ...targetStyle
        };
      } else if (targetProp === undefined) {
        toCloneProps[p] = sourceProp;
      } else if ( /*#__PURE__*/(0, _react.isValidElement)(sourceProp) && /*#__PURE__*/(0, _react.isValidElement)(targetProp)) {
        toCloneProps[p] = mergeReactNode(targetProp, sourceProp, depth);
      } else if (typeof sourceProp === 'function' && typeof targetProp === 'function') {
        toCloneProps[p] = (...args) => {
          sourceProp(...args);
          targetProp(...args);
        };
      }
    }
    return /*#__PURE__*/(0, _react.cloneElement)(target, toCloneProps);
  }
  if (curDepth > 0 && /*#__PURE__*/(0, _react.isValidElement)(target.props.children)) {
    const mergedChildren = mergeReactNode(target.props.children, source, depth, curDepth - 1);
    return /*#__PURE__*/(0, _react.cloneElement)(target, {}, mergedChildren);
  }
  return target;
};
exports.mergeReactNode = mergeReactNode;
//# sourceMappingURL=mergeReactNode.js.map