"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCompleteFailX = isCompleteFailX;
exports.isCompleteFailY = isCompleteFailY;
exports.isFailX = isFailX;
exports.isFailY = isFailY;
/**
 * 
 * @param elFuturePos source future { left , top }
 * @param elRegion source now { left , top , width , height }
 * @param visibleRect  { left , right, top , bottom }
 * 
 * 判断 x 方向是否 不能完全显示，即是否会有区域超过可视区，形成遮挡
 * 条件是 future的left 小于 可视区域的left，也就是有一部分内容超过了可视区域的左边界
 * future的left + 宽度 大于 可视区域的right，也就是有一部分内容超过了可视区域的右边界
 */
function isFailX(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
}
function isFailY(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
}

/**
 * 判断 x 方向是否完全不能显示， 即区域完全超出可视区，一点都看不到
 * 条件是 即将的left 大于 可视区域的right， 也就是整个元素在可视区域的右边
 * 即将的left + 宽度 小于 可视区域的left，也就是整个元素在可视区域的左边
 */
function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
}
function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
}
//# sourceMappingURL=direction-utils.js.map