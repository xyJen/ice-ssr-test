import React, { useMemo, useRef, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ResizeObserver from 'resize-observer-polyfill';
import { SegmentsWrapper, SegmentsContent, SegmentsOption, SegmentsInk, SegmentsOptionIcon, SegmentsOptionLabel } from "./styled";
import { useDefaultProp, useEventCallback, mergeClassName } from "../../common";
var normalizeOptions = function normalizeOptions(options) {
  return options.map(function (opt) {
    return typeof opt === 'string' ? {
      value: opt,
      label: opt
    } : opt;
  });
};
export var Segmented = function Segmented(props) {
  var defaultValue = props.defaultValue,
    onChange = props.onChange,
    _props$options = props.options,
    _options = _props$options === void 0 ? [] : _props$options,
    _value = props.value,
    block = props.block;
  var options = useMemo(function () {
    return normalizeOptions(_options);
  }, [_options]);
  var _useDefaultProp = useDefaultProp(defaultValue || options[0].value, _value, onChange),
    value = _useDefaultProp[0],
    setValue = _useDefaultProp[1];
  var optionRefs = React.useRef({});
  var updateInk = useEventCallback(function () {
    var optionWrapper = optionRefs.current[value];
    if (optionWrapper && inkRef.current) {
      inkRef.current.style.left = optionWrapper.offsetLeft + 'px';
      inkRef.current.style.width = optionWrapper.offsetWidth + 'px';
    }
  });
  useEffect(function () {
    updateInk();
  }, [value, options]);
  useEffect(function () {
    if (ref.current) {
      var observer = new ResizeObserver(updateInk);
      observer.observe(ref.current);
      return function () {
        return observer.disconnect();
      };
    }
  }, [updateInk]);
  var ref = useRef(null);
  var inkRef = useRef(null);
  return /*#__PURE__*/_createElement(SegmentsWrapper, {
    ref: ref,
    className: "wdn-segments-wrapper",
    isBlock: block
  }, /*#__PURE__*/_createElement(SegmentsContent, null, /*#__PURE__*/_createElement(SegmentsInk, {
    ref: inkRef
  }), options.map(function (option) {
    var label = option.label,
      optionValue = option.value,
      icon = option.icon,
      disabled = option.disabled;
    var isCustom = /*#__PURE__*/React.isValidElement(label);
    var handleClick = function handleClick() {
      if (disabled) {
        return;
      }
      setValue(optionValue);
    };
    return /*#__PURE__*/_createElement(SegmentsOption, {
      key: optionValue,
      className: mergeClassName(disabled ? 'wdn-segments-option-disabled' : ''),
      onClick: handleClick,
      ref: function ref(_ref) {
        optionRefs.current[optionValue] = _ref;
      },
      isCustom: isCustom,
      isBlock: block,
      isActive: value === optionValue
    }, icon && /*#__PURE__*/_createElement(SegmentsOptionIcon, null, icon), /*#__PURE__*/_createElement(SegmentsOptionLabel, null, label));
  })));
};
//# sourceMappingURL=segmented.js.map