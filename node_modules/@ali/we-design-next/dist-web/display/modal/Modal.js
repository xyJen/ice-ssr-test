import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _IconClose;
var _excluded = ["title", "footer", "header", "content", "visible", "onConfirm", "onCancel", "onClose", "mask", "dragMove", "defaultPlacement", "getContainer"];
import React, { useRef, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import ResizeObserver from 'resize-observer-polyfill';
import { Button } from "../../basic/button";
import { IconButton } from "../../basic/icon-button";
import { ModalFooter } from "./ModalFooter";
import { ModalHeader } from "./ModalHeader";
import { MoadlRoot, ModalContainer, ModalMask, ModalHeaderTitle, ModalContent } from "./styled";
import { IconClose } from "../../basic/icon";
import { useTranslate } from "../../locale";
import { KEY_CODES } from "../../common/consts";
import { mergeRef, mergeRestProps, renderReactNode } from "../../common";
export var Modal = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, fRef) {
  var title = props.title,
    footer = props.footer,
    header = props.header,
    content = props.content,
    visible = props.visible,
    onConfirm = props.onConfirm,
    onCancel = props.onCancel,
    onClose = props.onClose,
    mask = props.mask,
    dragable = props.dragMove,
    _props$defaultPlaceme = props.defaultPlacement,
    defaultPlacement = _props$defaultPlaceme === void 0 ? 'center' : _props$defaultPlaceme,
    _props$getContainer = props.getContainer,
    getContainer = _props$getContainer === void 0 ? function () {
      return document.body;
    } : _props$getContainer,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var ref = useRef(null);
  var headerRef = useRef(null);
  useEffect(function () {
    if (visible && ref.current) {
      var aligner = createAligner(ref.current, defaultPlacement);
      if (typeof dragable === 'object') {
        aligner.setAdditionalConstraint(dragable.constraint);
      }
      var dragger = dragable && headerRef.current ? createDragger(headerRef.current, aligner.getOffset, aligner.setOffset) : null;
      return function () {
        aligner.destroy();
        dragger && dragger.destroy();
      };
    }
  }, [visible, !!dragable]);
  useEffect(function () {
    if (onClose) {
      var fn = function fn(e) {
        if (e.keyCode === KEY_CODES.ESC) {
          onClose();
        }
      };
      document.addEventListener('keydown', fn);
      return function () {
        document.removeEventListener('keydown', fn);
      };
    }
  }, [onClose]);
  var t = useTranslate();
  return visible ? /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_createElement(MoadlRoot, null, mask ? /*#__PURE__*/_createElement(ModalMask, {
    isTransparent: mask === 'transparent'
  }) : null, /*#__PURE__*/_createElement(ModalContainer, _extends({}, mergeRestProps(rest, 'wdn-modal'), {
    ref: mergeRef(fRef, ref)
  }), renderReactNode(header, /*#__PURE__*/_createElement(ModalHeader, {
    ref: headerRef
  }, /*#__PURE__*/_createElement(ModalHeaderTitle, {
    move: !!dragable
  }, title), /*#__PURE__*/_createElement(IconButton, {
    icon: _IconClose || (_IconClose = /*#__PURE__*/_createElement(IconClose, null)),
    onClick: onClose,
    style: {
      marginBottom: 16
    }
  })), undefined), /*#__PURE__*/_createElement(ModalContent, null, content), renderReactNode(footer, /*#__PURE__*/_createElement(ModalFooter, {
    cancel: /*#__PURE__*/_createElement(Button, {
      onClick: onCancel
    }, t('wdn_cancel')),
    confirm: /*#__PURE__*/_createElement(Button, {
      type: "primary",
      onClick: onConfirm
    }, t('wdn_ok'))
  }), undefined))), getContainer()) : null;
}));
var createAligner = function createAligner(ele, placement) {
  var offsets = [0, 0];
  var isAutoAlign = true;
  var isStickingRight = false;
  var isStickingBottom = false;
  var placementAligner = function placementAligner(start, end) {
    var per = function per(s) {
      var r = s.match(/^(\d+)%$/);
      if (r && r[1]) {
        var n = parseInt(r[1]);
        if (n >= 0 && n <= 100) {
          return n / 100;
        }
      }
      return 0;
    };
    var x = null,
      rx = null,
      px = null,
      prx = null;
    if (typeof start === 'number') {
      x = start;
    } else if (typeof start === 'string') {
      px = per(start);
    } else if (typeof end === 'number') {
      rx = end;
    } else if (typeof end === 'string') {
      prx = per(end);
    } else {
      // start is undefined, and end is undefined
      px = 0.5;
    }
    return function (clientSize, winSize) {
      if (x !== null) {
        return x;
      } else if (rx !== null) {
        return winSize - rx - clientSize;
      } else if (px !== null) {
        return Math.floor(winSize * px - clientSize / 2);
      } else if (prx !== null) {
        return Math.ceil(winSize - winSize * prx - clientSize / 2);
      } else {
        return Math.floor(winSize * 0.5 - clientSize / 2);
      }
    };
  };
  var alignX = placement === 'center' ? placementAligner('50%') : placementAligner(placement.left, placement.right);
  var alignY = placement === 'center' ? placementAligner('50%') : placementAligner(placement.top, placement.bottom);

  /**
   * 将线段 [start, size] 限制在区间 [min, max] 中, 返回新线段的 start。
   */
  var constraint = function constraint(start, size, min, max) {
    if (max <= min) {
      return min;
    }
    if (start < min) {
      return min;
    }
    if (start + size > max) {
      return max - size;
    }
    return start;
  };
  var additionConstraint = function additionConstraint(v) {
    return [v.left, v.top];
  };
  var align = function align() {
    var _ref = [ele.clientWidth, ele.clientHeight],
      width = _ref[0],
      height = _ref[1];
    var _ref2 = [document.documentElement.clientWidth, document.documentElement.clientHeight],
      winWidth = _ref2[0],
      winHeight = _ref2[1];
    var ax = isAutoAlign ? alignX(width, winWidth) : isStickingRight ? winWidth - width : offsets[0];
    var ay = isAutoAlign ? alignY(height, winHeight) : isStickingBottom ? winHeight - height : offsets[1];
    var cx = constraint(ax, width, 0, winWidth);
    var cy = constraint(ay, height, 0, winHeight);
    var _additionConstraint = additionConstraint({
        left: cx,
        width: width,
        top: cy,
        height: height
      }),
      tx = _additionConstraint[0],
      ty = _additionConstraint[1];
    if (tx + width >= winWidth - 1) {
      isStickingRight = true;
    }
    if (ty + height >= winHeight - 1) {
      isStickingBottom = true;
    }
    offsets[0] = tx;
    offsets[1] = ty;
    ele.style.transform = "translate(" + tx + "px, " + ty + "px)";
  };
  var eleResizeObserver = new ResizeObserver(align);
  eleResizeObserver.observe(ele);
  var winResizeObserver = new ResizeObserver(align);
  winResizeObserver.observe(document.documentElement);
  return {
    getOffset: function getOffset() {
      return [].concat(offsets);
    },
    setOffset: function setOffset(source) {
      isAutoAlign = false;
      offsets[0] = source[0];
      offsets[1] = source[1];
      isStickingRight = false;
      isStickingBottom = false;
      align();
    },
    setAdditionalConstraint: function setAdditionalConstraint(fn) {
      additionConstraint = function additionConstraint(v) {
        var r = fn();
        return [constraint(v.left, v.width, r.left, r.left + r.width), constraint(v.top, v.height, r.top, r.top + r.height)];
      };
    },
    destroy: function destroy() {
      eleResizeObserver.disconnect();
      winResizeObserver.disconnect();
    }
  };
};
var createDragger = function createDragger(ele, getOffset, setOffset) {
  var isDragging = false;
  var dragStartX = 0;
  var dragStartY = 0;
  var dragStartOffset = getOffset();
  var dragMove = function dragMove(e) {
    if (isDragging && dragStartOffset !== null) {
      var dx = e.pageX - dragStartX;
      var dy = e.pageY - dragStartY;
      setOffset([dragStartOffset[0] + dx, dragStartOffset[1] + dy]);
    }
  };
  var dragStart = function dragStart(e) {
    if (isDragging) {
      return;
    }
    dragStartX = e.pageX;
    dragStartY = e.pageY;
    dragStartOffset = getOffset();
    isDragging = true;
    document.addEventListener('mousemove', dragMove);
    document.addEventListener('mouseup', dragEnd);
  };
  var dragEnd = function dragEnd(e) {
    isDragging = false;
    dragStartOffset = null;
    document.removeEventListener('mousemove', dragMove);
    document.removeEventListener('mouseup', dragEnd);
  };
  var attach = function attach() {
    ele.addEventListener('mousedown', dragStart);
  };
  var detach = function detach() {
    ele.removeEventListener('mousedown', dragStart);
    document.removeEventListener('mousemove', dragMove);
    document.removeEventListener('mouseup', dragEnd);
  };
  attach();
  return {
    destroy: detach
  };
};
//# sourceMappingURL=Modal.js.map