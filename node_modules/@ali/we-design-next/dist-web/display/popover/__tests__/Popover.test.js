import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
var _Popover, _div, _div2, _div3, _div4;
import _regeneratorRuntime from "@babel/runtime/regenerator";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { render, fireEvent, screen, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { Popover } from "../index";
test('Popover: should render content.', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          render(_Popover || (_Popover = /*#__PURE__*/_createElement(Popover, {
            visible: true,
            content: /*#__PURE__*/_createElement("div", null, "World")
          }, /*#__PURE__*/_createElement("div", null, "Hello"))));
          expect(screen.queryByText('Hello')).toBeInTheDocument();
          expect(screen.queryByText('World')).toBeInTheDocument();
        case 3:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));
test('Popover: should trigger visible change for hover trigger.', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
  var fn, divHello;
  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          fn = jest.fn();
          render( /*#__PURE__*/_createElement(Popover, {
            trigger: "hover",
            onVisibleChange: fn,
            content: _div || (_div = /*#__PURE__*/_createElement("div", null, "World"))
          }, _div2 || (_div2 = /*#__PURE__*/_createElement("div", null, "Hello"))));
          expect(screen.queryByText('Hello')).toBeInTheDocument();
          expect(screen.queryByText('World')).toBeNull();
          divHello = screen.queryByText('Hello');
          fireEvent.mouseEnter(divHello);
          expect(fn).toHaveBeenLastCalledWith(true);
          expect(screen.queryByText('World')).toBeInTheDocument();
          fireEvent.mouseLeave(divHello);
          expect(fn).toHaveBeenLastCalledWith(false);
          expect(screen.queryByText('World')).toBeNull();
        case 11:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2);
})));
test('Popover: should trigger visible change for mouse-enter trigger.', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
  var fn, divHello, divWorld;
  return _regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          fn = jest.fn();
          render( /*#__PURE__*/_createElement(Popover, {
            trigger: "mouse-enter",
            onVisibleChange: fn,
            content: _div3 || (_div3 = /*#__PURE__*/_createElement("div", null, "World"))
          }, _div4 || (_div4 = /*#__PURE__*/_createElement("div", null, "Hello"))));
          expect(screen.queryByText('Hello')).toBeInTheDocument();
          expect(screen.queryByText('World')).toBeNull();
          divHello = screen.queryByText('Hello');
          fireEvent.mouseEnter(divHello);
          _context3.next = 8;
          return waitFor(function () {
            expect(fn).toHaveBeenLastCalledWith(true);
            expect(screen.queryByText('World')).toBeInTheDocument();
          });
        case 8:
          divWorld = screen.queryByText('World');
          fireEvent.mouseLeave(divHello);
          _context3.next = 12;
          return new Promise(function (r) {
            return setTimeout(r, 50);
          });
        case 12:
          expect(screen.queryByText('World')).toBeInTheDocument();
          fireEvent.mouseEnter(divWorld);
          _context3.next = 16;
          return new Promise(function (r) {
            return setTimeout(r, 1000);
          });
        case 16:
          fireEvent.mouseLeave(divWorld);
          _context3.next = 19;
          return waitFor(function () {
            expect(fn).toHaveBeenLastCalledWith(false);
            expect(screen.queryByText('World')).toBeNull();
          });
        case 19:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3);
})));
//# sourceMappingURL=Popover.test.js.map