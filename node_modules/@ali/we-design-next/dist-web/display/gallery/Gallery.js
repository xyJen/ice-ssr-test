import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _RenderEmptyItem;
var _excluded = ["items", "columnCount", "RenderItem", "value", "defaultValue", "onChange"];
import React, { memo, useMemo, useEffect, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { GalleryContainer, GalleryItemWrapper, GalleryItem, GalleryBorder, GalleryItemRow } from "./styled";
import { KEY_CODES, mergeRestProps, useDefaultProp } from "../../common";

/**
 * Item 唯一标识
 */

var RenderEmptyItem = function RenderEmptyItem() {
  return /*#__PURE__*/_createElement("div", {
    style: {
      width: '50px',
      height: '50px'
    }
  });
};
export var Gallery = /*#__PURE__*/memo(function (props) {
  var _props$items = props.items,
    items = _props$items === void 0 ? [] : _props$items,
    _props$columnCount = props.columnCount,
    columnCount = _props$columnCount === void 0 ? 3 : _props$columnCount,
    _props$RenderItem = props.RenderItem,
    RenderItem = _props$RenderItem === void 0 ? function () {
      return _RenderEmptyItem || (_RenderEmptyItem = /*#__PURE__*/_createElement(RenderEmptyItem, null));
    } : _props$RenderItem,
    value = props.value,
    defaultValue = props.defaultValue,
    onChange = props.onChange,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useDefaultProp = useDefaultProp(defaultValue, value, function () {}),
    selected = _useDefaultProp[0],
    setSelected = _useDefaultProp[1];
  var _useState = useState(),
    hoveredItem = _useState[0],
    setHoveredItem = _useState[1];
  var itemRows = useMemo(function () {
    var tmp = [];
    for (var i = 0; i < items.length; i += columnCount) {
      tmp.push(items.slice(i, i + columnCount));
    }
    return tmp;
  }, [items, columnCount]);
  var chooseItem = function chooseItem(item) {
    setSelected(item.key);
    onChange == null ? void 0 : onChange(item.key);
    setHoveredItem(item.key);
  };
  var hoverItem = function hoverItem(event, item) {
    event.stopPropagation();
    event.preventDefault();
    setHoveredItem(item.key);
  };
  var isSelected = function isSelected(item) {
    return item.key === selected;
  };
  var isHovered = function isHovered(item) {
    return item.key === hoveredItem;
  };
  var getHoveredItem = function getHoveredItem() {
    return items.findIndex(function (item) {
      return isHovered(item);
    });
  };
  var handleKeyDown = function handleKeyDown(event) {
    if (!event) return;
    var curIndex = getHoveredItem();
    var keyCode = event.keyCode;
    switch (keyCode) {
      case KEY_CODES.LEFT:
        if (curIndex === -1) return hoverItem(event, items[0]);
        if (curIndex > 0) {
          return hoverItem(event, items[curIndex - 1]);
        }
        break;
      case KEY_CODES.UP:
        if (curIndex === -1) return hoverItem(event, items[0]);
        if (curIndex - columnCount >= 0) {
          return hoverItem(event, items[curIndex - columnCount]);
        }
        break;
      case KEY_CODES.RIGHT:
        if (curIndex === -1) return hoverItem(event, items[0]);
        if (curIndex !== items.length - 1) {
          return hoverItem(event, items[curIndex + 1]);
        }
        break;
      case KEY_CODES.DOWN:
        if (curIndex === -1) return hoverItem(event, items[0]);
        if (curIndex + columnCount < items.length) {
          return hoverItem(event, items[curIndex + columnCount]);
        }
        break;
      case KEY_CODES.ENTER:
        if (curIndex === -1) return;
        return chooseItem == null ? void 0 : chooseItem(items[curIndex]);
    }
  };
  useEffect(function () {
    if (items.some(function (item) {
      return !item.key;
    })) {
      console.warn('every item in items should have unique key ');
    }
  }, [items]);
  return /*#__PURE__*/_createElement(GalleryContainer, _extends({
    tabIndex: -1,
    onKeyDown: handleKeyDown
  }, mergeRestProps(rest, 'wdn-gallery')), itemRows.map(function (row, index) {
    return /*#__PURE__*/_createElement(GalleryItemRow, null, row.map(function (item) {
      return /*#__PURE__*/_createElement(GalleryItemWrapper, {
        onClick: function onClick() {
          return chooseItem(item);
        },
        key: item.key || index
      }, /*#__PURE__*/_createElement(GalleryItem, null, RenderItem({
        data: item,
        index: index
      })), /*#__PURE__*/_createElement(GalleryBorder, {
        actived: isSelected(item),
        hovered: isHovered(item)
      }));
    }));
  }));
});
//# sourceMappingURL=Gallery.js.map