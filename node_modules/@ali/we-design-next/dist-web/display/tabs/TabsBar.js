var _Button;
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import ResizeObserver from 'resize-observer-polyfill';
import { debounce } from "lodash-es";
import { IconMore } from "../../basic/icon";
import { TabsBarTab } from "./TabsBarTab";
import { useDefaultProp, COLORS } from "../../common";
import { Button } from "../../basic/button";
import { Popover } from "../popover";
import { Menu } from "../menu";
import { TabsInkBar } from "./styled";
import { TAB_MARGIN } from "./constants";
var TabsNav = /*#__PURE__*/styled.div(["display:flex;position:relative;overflow:hidden;flex:none;&::after{content:'';position:absolute;height:1px;left:0px;right:0px;bottom:0px;background:rgba(126,134,142,0.16);}"]);
var TabsNavWrap = /*#__PURE__*/styled.div(["position:relative;display:inline-block;display:flex;flex:auto;align-self:stretch;overflow:hidden;white-space:nowrap;transform:translate(0);"]);
var TabsNavList = /*#__PURE__*/styled.div(["position:relative;display:flex;"]);
var TabsNavOperationWrapper = /*#__PURE__*/styled.div(["display:flex;position:relative;align-items:center;align-self:stretch;padding-left:10px;padding-bottom:3px;background:", ";&.tabs-can-scroll-to-left::after{left:-30px;top:0px;bottom:0px;width:30px;content:\"\";position:absolute;pointer-events:none;transition:opacity 0.3s ease 0s;box-shadow:rgb(0 0 0 / 8%) -10px 0px 8px -8px inset;}"], COLORS.WHITE);
var btnStyle = {
  border: 'none',
  padding: 0,
  height: 28,
  width: 28,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center'
};
var operaIconStyle = {
  fontSize: 20
};
export var TabsBar = function TabsBar(props) {
  var _tabs$;
  var activeKeyProp = props.activeKey,
    defaultActiveKey = props.defaultActiveKey,
    onActiveTabChange = props.onActiveTabChange,
    tabs = props.tabs,
    animated = props.animated;
  var _React$useState = React.useState(false),
    isOperaBoxVisible = _React$useState[0],
    setOperaBoxVisible = _React$useState[1];
  var _useDefaultProp = useDefaultProp(defaultActiveKey || ((_tabs$ = tabs[0]) == null ? void 0 : _tabs$.key), activeKeyProp, onActiveTabChange),
    activeKey = _useDefaultProp[0],
    setActiveKey = _useDefaultProp[1];
  var navRef = React.useRef(null);
  var navWrapRef = React.useRef(null);
  var navListRef = React.useRef(null);
  var scrollOffsetRef = React.useRef(0);
  var lastWheelDirectionRef = React.useRef('');
  var inkBarRef = React.useRef(null);
  var operaWrapRef = React.useRef(null);
  var _React$useState2 = React.useState(false),
    isMorePopoverVisible = _React$useState2[0],
    setMorePopoverVisible = _React$useState2[1];
  var tabRefs = React.useRef({});
  var navWidthRef = React.useRef(0);
  var navWrapWidthRef = React.useRef(0);
  var navListWidthRef = React.useRef(0);
  var activeKeyRef = React.useRef(activeKey);
  activeKeyRef.current = activeKey;
  var onTabRef = React.useCallback(function (key, elem) {
    tabRefs.current[key] = elem;
  }, []);
  var updateWidth = React.useCallback(function () {
    var _navRef$current, _navListRef$current, _navWrapRef$current;
    navWidthRef.current = ((_navRef$current = navRef.current) == null ? void 0 : _navRef$current.offsetWidth) || 0;
    navListWidthRef.current = ((_navListRef$current = navListRef.current) == null ? void 0 : _navListRef$current.offsetWidth) || 0;
    navWrapWidthRef.current = ((_navWrapRef$current = navWrapRef.current) == null ? void 0 : _navWrapRef$current.offsetWidth) || 0;
  }, []);
  var updateScrollOffset = React.useCallback(function (newScroll) {
    if (!navListRef.current) return;
    scrollOffsetRef.current = newScroll;
    navListRef.current.style.left = newScroll + 'px';
    if (operaWrapRef.current) {
      var canScrollToLeft = scrollOffsetRef.current > navWrapWidthRef.current - navListWidthRef.current;
      if (canScrollToLeft) {
        operaWrapRef.current.classList.add('tabs-can-scroll-to-left');
      } else {
        operaWrapRef.current.classList.remove('tabs-can-scroll-to-left');
      }
    }
  }, []);
  React.useEffect(function () {
    updateWidth();
  }, []);
  var updateInk = React.useCallback(function () {
    if (!inkBarRef.current) return;
    var activeTab = tabRefs.current[activeKeyRef.current];
    if (!activeTab) {
      inkBarRef.current.style.left = '0px';
      inkBarRef.current.style.width = '0px';
    } else {
      var _tabRefs$current$acti;
      var activeTabWrapper = activeTab.parentElement;
      var newOffset = activeTabWrapper.offsetLeft;
      inkBarRef.current.style.left = newOffset + 'px';
      var newWidth = ((_tabRefs$current$acti = tabRefs.current[activeKeyRef.current]) == null ? void 0 : _tabRefs$current$acti.offsetWidth) || 0;
      inkBarRef.current.style.width = newWidth + 'px';
    }
  }, []);
  var initScrollOffset = React.useCallback(function () {
    var activeTab = tabRefs.current[activeKeyRef.current];
    if (!navListRef.current || !navWrapRef.current || !activeKeyRef.current || !activeTab) {
      return;
    }
    var navWrapWidth = navWrapWidthRef.current || navWrapRef.current.offsetWidth;
    var navListWidth = navListWidthRef.current || navListRef.current.offsetWidth;
    var currentOffset = parseFloat(navListRef.current.style.left);
    var activeTabWrapper = activeTab.parentElement;
    var startOffset = activeTabWrapper.offsetLeft;
    var activeTabWidth = activeTab.offsetWidth || 0;
    var minOffset = Math.min(0, Math.max(navWrapWidth - navListWidth, -startOffset));
    var maxOffset = navWrapWidth - (startOffset + activeTabWidth + TAB_MARGIN);
    maxOffset = Math.min(0, Math.max(navWrapWidth - navListWidth, maxOffset));
    if (currentOffset >= minOffset && currentOffset <= maxOffset) {
      return;
    }
    if (Math.abs(minOffset - currentOffset) > Math.abs(maxOffset - currentOffset)) {
      updateScrollOffset(maxOffset);
    } else {
      updateScrollOffset(minOffset);
    }
  }, []);
  React.useEffect(function () {
    updateInk();
    initScrollOffset();
  }, [activeKey]);
  React.useEffect(function () {
    var handleResize = debounce(function () {
      updateWidth();
      updateInk();
      initScrollOffset();
      setOperaBoxVisible(navListWidthRef.current > navWidthRef.current);
    }, 200);
    var resizeObserver = new ResizeObserver(handleResize);
    // tab 内容变化也需要更新 ink 和 滚动偏移量
    tabs.forEach(function (tab) {
      var key = tab.key;
      var elem = tabRefs.current[key];
      elem && resizeObserver.observe(elem);
    });
    navRef.current && resizeObserver.observe(navRef.current);
    navWrapRef.current && resizeObserver.observe(navWrapRef.current);
    return function () {
      resizeObserver.disconnect();
    };
  }, [tabs]);
  var handleWheel = React.useCallback(function (e) {
    // 滚动时收起更多菜单
    setMorePopoverVisible(false);
    if (!navWrapRef.current || !navListRef.current) {
      return;
    }
    var navWrapWidth = navWrapWidthRef.current || navWrapRef.current.offsetWidth;
    var navListWidth = navListWidthRef.current || navListRef.current.offsetWidth;
    if (navWrapWidth >= navListWidth) {
      return false;
    }
    var deltaX = e.deltaX,
      deltaY = e.deltaY;
    // Convert both to x & y since wheel only happened on PC
    var mixed = 0;
    var absX = Math.abs(deltaX);
    var absY = Math.abs(deltaY);
    if (absX === absY) {
      mixed = lastWheelDirectionRef.current === 'x' ? deltaX : deltaY;
    } else if (absX > absY) {
      mixed = deltaX;
      lastWheelDirectionRef.current = 'x';
    } else {
      mixed = deltaY;
      lastWheelDirectionRef.current = 'y';
    }
    var minOffset = navWrapWidth - navListWidth;
    var maxOffset = 0;
    var newOffset = Math.min(Math.max(-mixed + scrollOffsetRef.current, minOffset), maxOffset);
    updateScrollOffset(newOffset);
    e.preventDefault();
  }, []);
  React.useEffect(function () {
    if (navWrapRef.current) {
      navWrapRef.current.addEventListener('wheel', handleWheel);
    }
    return function () {
      if (navWrapRef.current) {
        navWrapRef.current.removeEventListener('wheel', handleWheel);
      }
    };
  }, [handleWheel]);
  var moreMenuItems = React.useMemo(function () {
    if (!isOperaBoxVisible || !isMorePopoverVisible || !navWrapRef.current) {
      return [];
    }
    var navWrapWidth = navWrapWidthRef.current || navWrapRef.current.offsetWidth;
    var visibleStartOffset = -scrollOffsetRef.current;
    var visibleEndOffset = visibleStartOffset + navWrapWidth;
    var items = [];
    var startOffset = 0;
    tabs.forEach(function (tab, index) {
      var width = tabRefs.current[tab.key].offsetWidth;
      var endOffset = startOffset + width;
      if (!(startOffset >= visibleStartOffset && endOffset <= visibleEndOffset)) {
        var _tabs$index = tabs[index],
          prefix = _tabs$index.prefix,
          title = _tabs$index.title,
          disabled = _tabs$index.disabled,
          key = _tabs$index.key;
        items.push({
          key: key,
          title: title,
          prefix: prefix,
          disabled: disabled,
          selected: activeKey === key
        });
      }
      startOffset = endOffset + TAB_MARGIN;
    });
    return items;
  }, [isOperaBoxVisible, isMorePopoverVisible, tabs, activeKey]);
  var handleSelectMoreMenu = React.useCallback(function (path) {
    var selectedKey = path.at(-1);
    selectedKey && setActiveKey(selectedKey);
    setMorePopoverVisible(false);
  }, []);
  return /*#__PURE__*/_createElement(TabsNav, {
    ref: navRef,
    className: "wdn-tabs-nav"
  }, /*#__PURE__*/_createElement(TabsNavWrap, {
    ref: navWrapRef
  }, /*#__PURE__*/_createElement(TabsNavList, {
    ref: navListRef
  }, tabs.map(function (tab) {
    var key = tab.key,
      onClose = tab.onClose,
      title = tab.title,
      disabled = tab.disabled,
      prefix = tab.prefix;
    return /*#__PURE__*/_createElement(TabsBarTab, {
      key: key,
      tabKey: key,
      onClose: onClose,
      title: title,
      prefix: prefix,
      disabled: disabled,
      onClick: setActiveKey,
      activeKey: activeKey,
      onRef: onTabRef
    });
  }), /*#__PURE__*/_createElement(TabsInkBar, {
    ref: inkBarRef,
    animated: animated,
    className: "wdn-tabs-ink-bar"
  }))), isOperaBoxVisible ? /*#__PURE__*/_createElement(TabsNavOperationWrapper, {
    ref: operaWrapRef
  }, /*#__PURE__*/_createElement(Popover, {
    content: /*#__PURE__*/_createElement(Menu, {
      items: moreMenuItems,
      onSelect: handleSelectMoreMenu
    }),
    placement: "bottomLeft",
    trigger: "click",
    visible: isMorePopoverVisible,
    onVisibleChange: setMorePopoverVisible
  }, _Button || (_Button = /*#__PURE__*/_createElement(Button, {
    icon: /*#__PURE__*/_createElement(IconMore, {
      style: operaIconStyle
    }),
    style: btnStyle
  })))) : null);
};
//# sourceMappingURL=TabsBar.js.map