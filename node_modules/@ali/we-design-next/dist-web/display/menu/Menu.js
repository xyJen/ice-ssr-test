import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _IconArrowRight;
var _excluded = ["path", "onPathChange", "onSelect", "items", "renderItem", "keyboard"];
import React, { useEffect, useMemo, useReducer, useRef, memo, forwardRef, cloneElement, isValidElement } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { IconArrowRight } from "../../basic/icon";
import { List } from "../../basic/list";
import { flattenNested, isNormalized, isEnabled } from "../../basic/list/nested";
import { MenuItemDescription, MenuItemTitleDescription } from "./styled";
import { Popover } from "../popover";
import { useDefaultProp, mergeRestProps, useFocusTarget, mergeRef, renderReactNode, KEY_CODES } from "../../common";
import { noop } from 'lodash-es';
var hasSubMenu = function hasSubMenu(it) {
  return 'subMenu' in it && !!it.subMenu;
};
var hasAsyncSubMenu = function hasAsyncSubMenu(it) {
  return hasSubMenu(it) && typeof it.subMenu === 'function';
};
var hasSyncSubMenu = function hasSyncSubMenu(it) {
  return hasSubMenu(it) && Array.isArray(it.subMenu);
};
export var Menu = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (props, ref) {
  var _path = props.path,
    onPathChange = props.onPathChange,
    _props$onSelect = props.onSelect,
    _onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,
    _props$items = props.items,
    items = _props$items === void 0 ? [] : _props$items,
    renderItem = props.renderItem,
    _props$keyboard = props.keyboard,
    keyboard = _props$keyboard === void 0 ? true : _props$keyboard,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var flattenItems = useMemo(function () {
    return flattenNested(items);
  }, [items]);
  var _useDefaultProp = useDefaultProp([], _path, onPathChange),
    path = _useDefaultProp[0],
    setPath = _useDefaultProp[1];

  // 存储异步菜单项数据
  var _useReducer = useReducer(function (state, action) {
      var _extends2;
      var key = action[0],
        items = action[1];
      return _extends({}, state, (_extends2 = {}, _extends2[key] = items, _extends2));
    }, {}),
    smiState = _useReducer[0],
    smiDispatch = _useReducer[1];
  var wrapRef = useRef(null);
  var _useFocusTarget = useFocusTarget(wrapRef),
    focusTargetId = _useFocusTarget[0],
    focusTarget = _useFocusTarget[1],
    focusOwner = _useFocusTarget[2];

  // 根据列表中的当前激活项变化，设置 path
  // 注意：当通过鼠标悬浮到具有子菜单的菜单项时，自动展开子菜单
  var onActiveChange = function onActiveChange(k, op) {
    var it = flattenItems.find(function (it) {
      return it.key === k;
    });
    if (it) {
      if (hasSubMenu(it)) {
        if (op.from === 'mouse') {
          setPath([it.key, undefined]);
        } else {
          setPath([it.key]);
        }
      } else {
        setPath([it.key]);
      }
    } else {
      if (path.length === 1) {
        setPath([undefined]);
      }
    }
  };

  // 键盘方向键控制子菜单的打开关闭
  // 如果当前菜单叶子级：
  //    按下 Right 键：如果当前项有子菜单，则打开
  //    按下 Enter 键：如果当前项有子菜单，则打开
  // 如果当前菜单次叶子级（即从叶子级开始向上追溯的第二级）：
  //    按下 Left 键：收起当前子菜单
  var onKeydownLeaf = function onKeydownLeaf(e) {
    var kbKey = e.key.toLowerCase();
    var isArrowRight = kbKey === 'arrowright' || e.keyCode === KEY_CODES.RIGHT;
    var isEnter = kbKey === 'enter' || e.keyCode === KEY_CODES.ENTER;
    var curItem = flattenItems.find(function (it) {
      return it.key === path[0];
    });
    if (isArrowRight || isEnter) {
      if (hasSubMenu(curItem)) {
        var subMenuItems = curItem.subMenu === undefined ? undefined : typeof curItem.subMenu === 'function' ? smiState[curItem.key] : curItem.subMenu;
        if (subMenuItems) {
          var subFlattenItems = flattenNested(subMenuItems).filter(isNormalized).filter(isEnabled);
          if (subFlattenItems.length > 0) {
            var rightKey = subFlattenItems[0].key;
            focusTarget(function () {
              setPath([path[0], rightKey]);
            });
            e.stopPropagation();
            return;
          }
        } else {
          focusTarget(function () {
            setPath([path[0], undefined]);
          });
          e.stopPropagation();
          return;
        }
      }
    }
  };
  var onKeydownSecondaryLeaf = function onKeydownSecondaryLeaf(e) {
    var isArrowLeft = e.key.toLowerCase() === 'arrowleft' || e.keyCode === 37;
    if (isArrowLeft) {
      focusOwner(function () {
        setPath([path[0]]);
      });
      e.stopPropagation();
    }
  };
  var onKeydown = keyboard ? path.filter(Boolean).length === 1 /** isLeaf */ ? onKeydownLeaf : path.filter(Boolean).length === 2 /** isSecondaryLeaf */ ? onKeydownSecondaryLeaf : undefined : undefined;
  var subMenuRef = useRef(null);

  // 自定义列表项渲染
  var renderListItem = function renderListItem(_ref) {
    var key = _ref.key;
    return (/* 以下 arrow function 不是一个 React 组件 */
      /* eslint-disable react/display-name */
      function (sourceNode) {
        var item = flattenItems.find(function (it) {
          return it.key === key;
        });
        if (item && isNormalized(item)) {
          var itemHasSubMenu = hasSubMenu(item);
          var targetItemChildren = item.description ? /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(MenuItemTitleDescription, null, item.title), /*#__PURE__*/_createElement(MenuItemDescription, {
            disabled: !!item.disabled
          }, item.description)) : sourceNode.props.children;
          var toCloned = {
            children: targetItemChildren,
            suffix: itemHasSubMenu ? _IconArrowRight || (_IconArrowRight = /*#__PURE__*/_createElement(IconArrowRight, {
              size: 16
            })) : item.suffix
          };
          if (toCloned.suffix === undefined) {
            delete toCloned.suffix;
          }
          var targetItemWithChildren = /*#__PURE__*/cloneElement(sourceNode, toCloned);
          var targetNode = renderReactNode(renderItem, targetItemWithChildren, {
            key: key
          });
          if (itemHasSubMenu) {
            var isExpaned = path[0] === item.key && path.length > 1;
            if (isExpaned) {
              var subItems = hasSyncSubMenu(item) ? item.subMenu : smiState[item.key];

              // 对于正在加载的子菜单，subItems 为 undefined

              if (subItems) {
                return /*#__PURE__*/_createElement(Popover, {
                  animation: true,
                  visible: true,
                  onVisibleChange: function onVisibleChange(v) {
                    if (v === false) {
                      setPath([path[0]]);
                    }
                  },
                  placement: "rightTop",
                  placementOffset: [-2, -5],
                  getContainer: function getContainer() {
                    return wrapRef.current || document.body;
                  },
                  content: /*#__PURE__*/_createElement(Menu, _extends({
                    ref: subMenuRef,
                    path: path.slice(1),
                    onPathChange: function onPathChange(p) {
                      setPath([item.key].concat(p));
                    },
                    items: subItems,
                    onSelect: function onSelect(path) {
                      return _onSelect([item.key].concat(path));
                    },
                    renderItem: renderItem
                  }, rest, {
                    id: focusTargetId
                  }))
                }, /*#__PURE__*/isValidElement(targetNode) ? /*#__PURE__*/cloneElement(targetNode, {
                  onMouseLeave: function onMouseLeave(e) {
                    var t = 10;
                    var x = e.clientX,
                      y = e.clientY;
                    var subMenu = subMenuRef.current;
                    if (subMenu) {
                      var subMenuRect = subMenu.getBoundingClientRect();
                      if (x < subMenuRect.right + t && x > subMenuRect.left - t && y < subMenuRect.bottom + t && y > subMenuRect.top - t) {
                        return;
                      }
                    }
                    setPath([undefined]);
                  }
                }) : targetNode);
              } else {
                return targetNode;
              }
            } else {
              return targetNode;
            }
          } else {
            return targetNode;
          }
        } else {
          return null;
        }
      }
    );
  };
  /* eslint-enable react/display-name */

  // 根据菜单 path 变化，尝试发起异步子菜单数据获取
  var key = path[0];
  useEffect(function () {
    if (typeof key === 'string') {
      var item = flattenItems.find(function (it) {
        return it.key === key;
      });
      if (item && hasAsyncSubMenu(item) && smiState[key] === undefined) {
        item.subMenu().then(function (e) {
          smiDispatch([key, e]);
        });
      }
    }
  }, [flattenItems, key, smiState]);
  return /*#__PURE__*/_createElement(List, _extends({
    items: items,
    active: path[0] || null,
    onActiveChange: onActiveChange,
    onSelect: function onSelect(k) {
      return _onSelect([k]);
    },
    onKeyDown: onKeydown,
    renderItem: renderListItem,
    keyboard: keyboard
  }, mergeRestProps(rest, 'wdn-menu'), {
    ref: mergeRef(ref, wrapRef)
  }));
}));
Menu.displayName = 'Menu';
export var MenuItem = List.Item;
//# sourceMappingURL=Menu.js.map