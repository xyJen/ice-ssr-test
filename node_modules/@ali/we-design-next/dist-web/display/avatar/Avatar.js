import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["src", "name", "shape", "size", "style"];
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { COLORS } from "../../common";
import { LARGE_SIZE, NORMAL_SIZE, SMALL_SIZE, LARGE_BORDER_RADIUS, SMALL_BORDER_RADIUS } from "./constants";
import styled from 'styled-components';
var AvatarText = /*#__PURE__*/styled.span(["display:inline-block;width:", "px;height:", "px;line-height:", "px;text-align:center;font-size:", "px;cursor:default;color:", ";background-color:rgb(0,137,255);user-select:none;"], SMALL_SIZE, SMALL_SIZE, SMALL_SIZE, SMALL_SIZE / 2, COLORS.WHITE);
var AvatarImage = /*#__PURE__*/styled.img(["display:inline-block;width:", "px;height:", "px;cursor:default;"], SMALL_SIZE, SMALL_SIZE);
function getRealSize(size) {
  if (typeof size === 'number') {
    return size;
  }
  switch (size) {
    case 'large':
      return LARGE_SIZE;
    case 'normal':
      return NORMAL_SIZE;
    default:
      return SMALL_SIZE;
  }
}
function getAvatarStyle(size, shape) {
  var fontSize = Math.ceil(size / 2);
  var borderRadius = size >= LARGE_SIZE ? LARGE_BORDER_RADIUS : SMALL_BORDER_RADIUS;
  if (shape === 'circle') {
    borderRadius = '50%';
  }
  return {
    borderRadius: borderRadius,
    fontSize: fontSize,
    width: size,
    height: size,
    lineHeight: size + "px"
  };
}
function isCdnImgSrc(src) {
  return /^https?:\/\/img.alicdn.com/.test(src);
}
function getThumbnail(src) {
  if (src === void 0) {
    src = '';
  }
  if (!src) return '';
  var size = 100;
  if (isCdnImgSrc(src)) {
    var _src$split = src.split('?', 2),
      host = _src$split[0],
      _src$split$ = _src$split[1],
      search = _src$split$ === void 0 ? '' : _src$split$;
    // 参考文档 https://open.dingtalk.com/document/orgapp-client/image-scaling
    return host + "_" + size + "x" + size + (search ? '?' + search : '');
  }
  var url = new URL(src);
  var oldValue = url.searchParams.get('x-oss-process');
  var newValue = "image/resize,m_fill,h_" + size + ",w_" + size;
  if (oldValue && oldValue.startsWith('image/')) {
    // 第一个resize 配置才会生效
    newValue = 'image/' + ("resize,m_fill,h_" + size + ",w_" + size) + oldValue.slice(5);
  }
  // 参考文档 https://help.aliyun.com/document_detail/44688.html
  url.searchParams.set('x-oss-process', newValue);
  return url.toString();
}
function getLastNickName(nick, num) {
  if (num === void 0) {
    num = 2;
  }
  if (!nick) return '';
  var broken = Array.from(nick);
  return broken.slice(broken.length - num).join('');
}
export var Avatar = function Avatar(props) {
  var src = props.src,
    name = props.name,
    _props$shape = props.shape,
    shape = _props$shape === void 0 ? 'rect' : _props$shape,
    _props$size = props.size,
    size = _props$size === void 0 ? 'small' : _props$size,
    styleProp = props.style,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var imgRef = React.useRef(null);
  var _React$useState = React.useState(false),
    failed = _React$useState[0],
    setFailed = _React$useState[1];
  var nickName = getLastNickName(name, 1);
  var realSize = getRealSize(size);
  var thumbnailUrl = getThumbnail(src);
  var style = getAvatarStyle(realSize, shape);
  var handleError = React.useCallback(function () {
    if (src && imgRef.current && imgRef.current.src !== src) {
      // 1. fallback to fallback src
      imgRef.current.src = src;
    } else {
      // 2. fallback to TextAvatar
      setFailed(true);
    }
  }, [src]);
  if (!src || failed) {
    return /*#__PURE__*/_createElement(AvatarText, _extends({}, rest, {
      style: _extends({}, style, styleProp)
    }), nickName);
  }
  return /*#__PURE__*/_createElement(AvatarImage, _extends({
    ref: imgRef,
    src: thumbnailUrl,
    onError: handleError,
    style: _extends({}, style, styleProp)
  }, rest));
};
//# sourceMappingURL=Avatar.js.map