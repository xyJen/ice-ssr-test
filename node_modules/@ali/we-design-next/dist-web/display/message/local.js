import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["top", "container"];
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import { once } from 'lodash-es';
import { MessageBox } from "./MessageBox";
import { Z_INDEX } from "../../common";
var FlagAttributeName = 'data-elemType';
var FlagAttributeValue = '_localeMessageWrapper_';
var rootElemSelector = "[" + FlagAttributeName + "=\"" + FlagAttributeValue + "\"]";
var createRootElement = function createRootElement() {
  var root = document.createElement('div');
  root.setAttribute(FlagAttributeName, FlagAttributeValue);
  Object.assign(root.style, {
    left: '0px',
    top: '0px',
    position: 'absolute',
    width: '100%',
    background: 'transparent',
    pointerEvents: 'none',
    transition: 'all 0.24s',
    display: 'flex',
    justifyContent: 'center',
    zIndex: String(Z_INDEX.MESSAGE)
  });
  return root;
};
var MsgStyle = {
  pointerEvents: 'fill',
  transform: 'unset'
};
var closeTimerMap = new Map();
export var showLocalMessage = function showLocalMessage(opt) {
  var _opt$top = opt.top,
    top = _opt$top === void 0 ? '28px' : _opt$top,
    container = opt.container,
    restProps = _objectWithoutPropertiesLoose(opt, _excluded);
  if (!document.body.contains(container)) {
    return;
  }
  var root = container.querySelector(rootElemSelector);
  if (!root) {
    root = createRootElement();
  }
  Object.assign(root.style, {
    top: top
  });
  container.appendChild(root);
  ReactDOM.unmountComponentAtNode(root);
  root.style.opacity = '0';
  root.style.transform = 'translate(0, -40px)';
  ReactDOM.render( /*#__PURE__*/_createElement(MessageBox, restProps), root);
  var timerId = closeTimerMap.get(root);
  if (timerId) {
    window.clearTimeout(timerId);
  }
  setTimeout(function () {
    root && (root.style.opacity = '1');
    root && (root.style.transform = 'translate(0, 0)');
  }, 0);
  var close = once(function () {
    return closeLocalMessage(container);
  });
  return close;
};
function closeLocalMessage(container) {
  var root = container == null ? void 0 : container.querySelector(rootElemSelector);
  if (!root) {
    return;
  }
  setTimeout(function () {
    root.style.opacity = '0';
    root.style.transform = 'translate(0, -40px)';
  }, 0);
  var timerId = setTimeout(function () {
    if (document.body.contains(root)) {
      ReactDOM.unmountComponentAtNode(root);
    }
    closeTimerMap["delete"](root);
  }, 300);
  closeTimerMap.set(root, timerId);
}
;
//# sourceMappingURL=local.js.map