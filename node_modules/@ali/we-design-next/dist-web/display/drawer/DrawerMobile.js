import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["visible", "onClose", "content", "height", "mask", "header", "footer", "touchBar", "keepMounted"],
  _excluded2 = ["getContainer"];
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import { mergeClassName, mergeRestProps, mergeRef } from "../../common";
import { Sticker, DrawerBox, Background, HeaderBox, TitleBox, FooterBox } from "./styled";
import { DEFAULT_DRAWER_MOBILE_HEIGHT } from "./constants";
import { Dragger } from "./Dragger";
import { blockEvent } from "./utils";
var DrawerMobileComp = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var visible = props.visible,
    onClose = props.onClose,
    content = props.content,
    _props$height = props.height,
    height = _props$height === void 0 ? DEFAULT_DRAWER_MOBILE_HEIGHT : _props$height,
    mask = props.mask,
    header = props.header,
    footer = props.footer,
    touchBar = props.touchBar,
    keepMounted = props.keepMounted,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var drawerBoxRef = React.useRef(null);
  var bgRef = React.useRef(null);
  var rootRef = React.useRef(null);
  var _React$useState = React.useState(props.visible),
    isRealVisible = _React$useState[0],
    setRealVisible = _React$useState[1];
  var dragger = React.useRef(new Dragger({
    getDrawer: function getDrawer() {
      return drawerBoxRef.current;
    },
    getBg: function getBg() {
      return bgRef.current;
    },
    getDraggable: function getDraggable() {
      return drawerBoxRef.current;
    },
    getRoot: function getRoot() {
      return rootRef.current;
    }
  }));
  var handleBgClick = function handleBgClick(e) {
    e.stopPropagation();
    if (e.currentTarget === e.target && typeof onClose === 'function' && bgRef.current.style.opacity === '1' && isRealVisible) {
      dragger.current.slideOut();
    }
  };
  var handleBgTransitionEnd = function handleBgTransitionEnd(event) {
    if (!bgRef.current || event.propertyName === 'opacity' && bgRef.current.style.opacity === '0') {
      visible && onClose && onClose();
      setRealVisible(false);
    }
  };
  var onBgRef = function onBgRef(bg) {
    bgRef.current = bg;
    if (bg) {
      bg.addEventListener('transitionend', handleBgTransitionEnd);
      bg.addEventListener('touchmove', blockEvent, {
        passive: false
      });
    }
  };
  var onDrawerBoxRef = function onDrawerBoxRef(drawer) {
    drawerBoxRef.current = drawer;
    if (drawer) {
      dragger.current.enableDrag();
    }
  };
  React.useEffect(function () {
    return function () {
      var _bgRef$current;
      (_bgRef$current = bgRef.current) == null ? void 0 : _bgRef$current.removeEventListener('transitionend', handleBgTransitionEnd);
    };
  }, [handleBgTransitionEnd]);
  React.useEffect(function () {
    // 外部触发打开
    if (visible && !isRealVisible) {
      setRealVisible(true);
    }
    if (isRealVisible) {
      // 外部触发关闭
      if (!visible) {
        dragger.current.slideOut();
      } else {
        dragger.current.slideIn();
      }
    }
  }, [visible, isRealVisible]);
  React.useEffect(function () {
    return function () {
      var _bgRef$current2;
      dragger.current.disableDrag();
      (_bgRef$current2 = bgRef.current) == null ? void 0 : _bgRef$current2.removeEventListener('touchmove', blockEvent);
    };
  }, []);
  return keepMounted || isRealVisible ? /*#__PURE__*/_createElement(Sticker, _extends({
    ref: mergeRef(ref, rootRef)
  }, mergeRestProps(rest, 'wdn-drawer-mobile')), /*#__PURE__*/_createElement(Background, {
    ref: onBgRef,
    isVisible: isRealVisible,
    mask: mask,
    onClick: handleBgClick
  }), /*#__PURE__*/_createElement(DrawerBox, {
    style: {
      height: height
    },
    ref: onDrawerBoxRef,
    className: "wdn-drawer-mobile-drawer-box"
  }, /*#__PURE__*/_createElement(HeaderBox, {
    className: mergeClassName(touchBar ? 'wdn-drawer-mobile-show-touch-bar' : '', 'wdn-drawer-mobile-header-box')
  }, header ? /*#__PURE__*/_createElement(TitleBox, {
    className: "wdn-drawer-mobile-title-box"
  }, header) : null), /*#__PURE__*/_createElement(React.Fragment, null, content), /*#__PURE__*/_createElement(FooterBox, {
    className: "wdn-drawer-mobile-footer-box"
  }, footer))) : null;
});
DrawerMobileComp.displayName = 'DrawerMobileComp';
export var DrawerMobile = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var getContainer = props.getContainer,
    rest = _objectWithoutPropertiesLoose(props, _excluded2);
  var container = getContainer ? getContainer() : document.body;
  return container ? /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_createElement(DrawerMobileComp, _extends({
    ref: ref
  }, rest)), container) : /*#__PURE__*/_createElement(DrawerMobileComp, _extends({
    ref: ref
  }, rest));
});
DrawerMobile.displayName = 'DrawerMobile';
//# sourceMappingURL=DrawerMobile.js.map