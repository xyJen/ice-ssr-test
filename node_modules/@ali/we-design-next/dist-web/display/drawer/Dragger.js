import { getStartTouch, blockEvent } from "./utils";
var SCROLL_THRESHOLD = 5;
export var Dragger = function Dragger(params) {
  var _this = this;
  this.startTouch = null;
  this.translateY = 0;
  this.drawerHeight = 0;
  this.getDrawer = void 0;
  this.getBg = void 0;
  this.getDraggable = void 0;
  this.getRoot = void 0;
  this.scrollDirection = 'notScroll';
  this.status = 'none';
  this.onTouchStart = function (e) {
    var _this$getRoot, _this$getRoot2;
    e.stopPropagation();
    var changedTouches = e.changedTouches;
    var length = changedTouches.length;
    if (length > 1) {
      return;
    }
    _this.startTouch = changedTouches[0];
    _this.translateY = 0;
    (_this$getRoot = _this.getRoot()) == null ? void 0 : _this$getRoot.addEventListener('touchmove', _this.onTouchMove, {
      passive: false
    });
    (_this$getRoot2 = _this.getRoot()) == null ? void 0 : _this$getRoot2.addEventListener('touchend', _this.onTouchEnd);
  };
  this.touchEnd = function (curTranslateY) {
    var drawer = _this.getDrawer();
    var bg = _this.getBg();
    if (!drawer || !bg || !(_this.status === 'dragging')) {
      return;
    }
    var realTranslateY = curTranslateY || _this.translateY;
    var height = _this.drawerHeight || (drawer == null ? void 0 : drawer.clientHeight) || 0;
    if (realTranslateY > height * 0.25) {
      drawer.style.transform = "translateY(" + height + "px)";
      drawer.style.transition = 'transform 0.2s';
      bg.style.opacity = '0';
      bg.style.transition = 'opacity 0.6s';
      _this.translateY = height;
    } else {
      drawer.style.transform = 'translateY(0px)';
      drawer.style.transition = 'transform 0.2s';
      bg.style.opacity = '1';
      bg.style.transition = 'none';
      _this.translateY = 0;
    }
    _this.startTouch = null;
  };
  this.formatTransformY = function (transformY) {
    var _this$getDrawer;
    var maxTransformY = _this.drawerHeight || ((_this$getDrawer = _this.getDrawer()) == null ? void 0 : _this$getDrawer.clientHeight) || 0;
    return Math.min(maxTransformY, Math.max(0, transformY));
  };
  this.isScrollable = function (target, direction, delta) {
    if (!target) return false;
    var root = _this.getRoot();
    if (root === target) {
      return false;
    }
    if (direction === 'horizontal') {
      var scrollWidth = target.scrollWidth,
        clientWidth = target.clientWidth,
        scrollLeft = target.scrollLeft;
      if (scrollWidth > clientWidth) {
        var _getComputedStyle = getComputedStyle(target),
          overflowX = _getComputedStyle.overflowX,
          overflow = _getComputedStyle.overflow;
        if (overflowX === 'scroll' || overflowX === 'auto' || overflow === 'scroll' || overflow === 'auto') {
          if (delta > 0 && scrollLeft > 0 || delta < 0 && target.scrollTop + clientWidth < scrollWidth) {
            return true;
          }
        }
      }
    } else {
      var scrollHeight = target.scrollHeight,
        clientHeight = target.clientHeight,
        scrollTop = target.scrollTop;
      if (scrollHeight > clientHeight) {
        var _getComputedStyle2 = getComputedStyle(target),
          overflowY = _getComputedStyle2.overflowY,
          _overflow = _getComputedStyle2.overflow;
        if (overflowY === 'scroll' || overflowY === 'auto' || _overflow === 'scroll' || _overflow === 'auto') {
          if (delta > 0 && scrollTop > 0 || delta < 0 && target.scrollTop + clientHeight < scrollHeight) {
            return true;
          }
        }
      }
    }
    return _this.isScrollable(target.parentElement, direction, delta);
  };
  this.onTouchMove = function (e) {
    var _this$startTouch;
    var changedTouches = e.changedTouches;
    var touch = getStartTouch(changedTouches, (_this$startTouch = _this.startTouch) == null ? void 0 : _this$startTouch.identifier);
    if (!touch) {
      blockEvent(e);
      _this.touchEnd();
    } else {
      var clientY = touch.clientY,
        clientX = touch.clientX;
      var _ref = _this.startTouch,
        target = _ref.target,
        startTouchX = _ref.clientX,
        startTouchY = _ref.clientY;
      var moveX = clientX - startTouchX;
      var moveY = clientY - startTouchY;
      if (_this.status === 'none' && Math.max(Math.abs(moveX), Math.abs(moveY)) > SCROLL_THRESHOLD) {
        var direction = Math.abs(moveX) > Math.abs(moveY) ? 'horizontal' : 'vertical';
        var delta = direction === 'horizontal' ? moveX : moveY;
        var canScroll = _this.isScrollable(target, direction, delta);
        _this.scrollDirection = direction;
        if (canScroll) {
          _this.status = 'scrolling';
          e.stopPropagation();
        } else if (direction === 'vertical') {
          _this.status = 'dragging';
          blockEvent(e);
        } else {
          blockEvent(e);
        }
      } else if (_this.status === 'scrolling') {
        e.stopPropagation();
      } else if (_this.status === 'dragging') {
        blockEvent(e);
        _this.translateY = _this.formatTransformY(moveY);
        var drawer = _this.getDrawer();
        if (drawer) {
          drawer.style.transform = "translateY(" + _this.translateY + "px)";
          drawer.style.transition = 'none';
        }
      } else {
        blockEvent(e);
      }
    }
  };
  this.onTouchEnd = function (e) {
    var _this$startTouch2, _this$getRoot3, _this$getRoot4;
    e.stopPropagation();
    var changedTouches = e.changedTouches;
    var touch = getStartTouch(changedTouches, (_this$startTouch2 = _this.startTouch) == null ? void 0 : _this$startTouch2.identifier);
    if (!touch) {
      _this.touchEnd();
    } else {
      _this.translateY = _this.formatTransformY(touch.clientY - _this.startTouch.clientY);
      _this.touchEnd(_this.translateY);
    }
    (_this$getRoot3 = _this.getRoot()) == null ? void 0 : _this$getRoot3.removeEventListener('touchmove', _this.onTouchMove);
    (_this$getRoot4 = _this.getRoot()) == null ? void 0 : _this$getRoot4.removeEventListener('touchend', _this.onTouchEnd);
    _this.scrollDirection = 'notScroll';
    _this.status = 'none';
  };
  this.slideOut = function () {
    var drawer = _this.getDrawer();
    var bg = _this.getBg();
    if (!drawer || !bg) {
      return;
    }
    var newTranslateY = _this.drawerHeight || drawer.clientHeight || 0;
    drawer.style.transform = "translateY(" + newTranslateY + "px)";
    drawer.style.transition = 'transform 0.4s';
    bg.style.opacity = '0';
    bg.style.transition = 'opacity 0.4s';
  };
  this.slideIn = function () {
    var drawer = _this.getDrawer();
    var bg = _this.getBg();
    if (!drawer || !bg) {
      return;
    }
    _this.drawerHeight = drawer.clientHeight || 0;
    bg.style.transition = 'opacity 0.2s';
    bg.style.opacity = '1';
    drawer.style.transition = 'transform 0.2s';
    drawer.style.transform = 'translateY(0)';
  };
  this.enableDrag = function () {
    var draggable = _this.getDraggable();
    if (draggable) {
      draggable.addEventListener('touchstart', _this.onTouchStart);
    }
  };
  this.disableDrag = function () {
    var draggable = _this.getDraggable == null ? void 0 : _this.getDraggable();
    if (draggable) {
      draggable.removeEventListener('touchstart', _this.onTouchStart);
    }
  };
  this.getDrawer = params.getDrawer;
  this.getBg = params.getBg;
  this.getDraggable = params.getDraggable;
  this.getRoot = params.getRoot;
};
//# sourceMappingURL=Dragger.js.map