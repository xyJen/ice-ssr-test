import _objectDestructuringEmpty from "@babel/runtime/helpers/objectDestructuringEmpty";
import _extends from "@babel/runtime/helpers/extends";
import React, { useRef, useState, useImperativeHandle } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { COLORS } from "../../common/consts/colors";
import { IconUndo, IconRedo, IconDelete } from "../../index";
import { mergeRestProps } from "../../common/react/mergeRestProps";
export var DrawboardControlPanel = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var rest = _extends({}, (_objectDestructuringEmpty(props), props));
  var drawBoardRef = useRef(null);
  useImperativeHandle(ref, function () {
    return {
      attach: function attach(drawBoard) {
        drawBoardRef.current = drawBoard;
        return drawBoard.onChange(function (_ref) {
          var undoAble = _ref.undoAble,
            redoAble = _ref.redoAble,
            clearAble = _ref.clearAble;
          setUndoAble(undoAble);
          setRedoAble(redoAble);
          setClearAble(clearAble);
        });
      }
    };
  });
  var _useState = useState(false),
    undoAble = _useState[0],
    setUndoAble = _useState[1];
  var _useState2 = useState(false),
    redoAble = _useState2[0],
    setRedoAble = _useState2[1];
  var _useState3 = useState(false),
    clearAble = _useState3[0],
    setClearAble = _useState3[1];
  return /*#__PURE__*/_createElement(IconsWrap, mergeRestProps(rest, 'wdn-drawboard-control-panel'), /*#__PURE__*/_createElement(IconWrap, {
    disabled: !undoAble
  }, /*#__PURE__*/_createElement(IconUndo, {
    onClick: undoAble ? function () {
      var _drawBoardRef$current;
      return (_drawBoardRef$current = drawBoardRef.current) == null ? void 0 : _drawBoardRef$current.undo();
    } : undefined
  })), /*#__PURE__*/_createElement(IconWrap, {
    disabled: !redoAble
  }, /*#__PURE__*/_createElement(IconRedo, {
    onClick: redoAble ? function () {
      var _drawBoardRef$current2;
      return (_drawBoardRef$current2 = drawBoardRef.current) == null ? void 0 : _drawBoardRef$current2.redo();
    } : undefined
  })), /*#__PURE__*/_createElement(IconWrap, {
    disabled: !clearAble
  }, /*#__PURE__*/_createElement(IconDelete, {
    onClick: clearAble ? function () {
      var _drawBoardRef$current3;
      return (_drawBoardRef$current3 = drawBoardRef.current) == null ? void 0 : _drawBoardRef$current3.clear();
    } : undefined
  })));
}));
var IconsWrap = /*#__PURE__*/styled.div(["overflow:hidden;border-radius:4px;height:28px;"]);
var IconWrap = /*#__PURE__*/styled.span(["color:", ";display:inline-block;width:28px;height:28px;margin-left:1px;:first-child{margin-left:0;}padding:4px;background:", ";", " ", " ", ""], function (_ref2) {
  var disabled = _ref2.disabled;
  return disabled ? COLORS.LIGHT.LEVEL4_BASE_COLOR : COLORS.LIGHT.LEVEL1_BASE_COLOR;
}, COLORS.COMMON.LINE_LIGHT_COLOR, function (_ref3) {
  var disabled = _ref3.disabled;
  return !disabled ? 'transition: background 0.2s ease-out;' : '';
}, function (_ref4) {
  var disabled = _ref4.disabled;
  return disabled ? 'cursor: not-allowed;' : '';
}, function (_ref5) {
  var disabled = _ref5.disabled;
  return !disabled ? '&: hover{ background: rgba(228, 230, 233, 1); }' : '';
});
//# sourceMappingURL=DrawBoardControlPanel.js.map