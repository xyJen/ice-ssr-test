import _extends from "@babel/runtime/helpers/extends";
var _Divider, _IconBorderNone, _Select$Option;
import React, { useState, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useDefaultProp, Divider, COLORS } from "../../common";
import { Text, TextInline } from "../../basic/text";
import { Select } from "../../form/select";
import { Popover } from "../../display/popover";
import { ColorPicker } from "../../form/color-picker";
import { IconBorderAll, IconBorderNone, IconBorderOuter, IconBorderInner, IconBorderInnerHorizon, IconBorderInnerVertical, IconBorderTop, IconBorderBottom, IconBorderLeft, IconBorderRight } from "../../basic/icon";
import { BorderPickerWrapper, BorderPickerMain, BorderPickerFooter, BorderPickerLayoutWrapper, BorderPickerLayoutIconWrapper, BorderPickerColorWrap, BorderPickerColorButton, BorderPickerColorRect, BorderPickerStyleWrap } from "./styled";
import { DEFAULT_PRESET } from "./presets";
import { useTranslate } from "../../locale";
var BORDER_LAYOUTES = [['outer', /*#__PURE__*/_createElement(IconBorderOuter, null)], ['inner', /*#__PURE__*/_createElement(IconBorderInner, null)], ['all', /*#__PURE__*/_createElement(IconBorderAll, null)], ['left', /*#__PURE__*/_createElement(IconBorderLeft, null)], ['vertical', /*#__PURE__*/_createElement(IconBorderInnerVertical, null)], ['right', /*#__PURE__*/_createElement(IconBorderRight, null)], ['top', /*#__PURE__*/_createElement(IconBorderTop, null)], ['horizon', /*#__PURE__*/_createElement(IconBorderInnerHorizon, null)], ['bottom', /*#__PURE__*/_createElement(IconBorderBottom, null)]];
var DEFAULT_BORDER = {
  layout: 'all',
  color: '#000000',
  style: 'Thin'
};
export var BorderPicker = /*#__PURE__*/React.memo(function (props) {
  var _props$defaultBorder = props.defaultBorder,
    defaultBorder = _props$defaultBorder === void 0 ? DEFAULT_BORDER : _props$defaultBorder,
    _border = props.border,
    onBorderChange = props.onBorderChange,
    _props$preset = props.preset,
    preset = _props$preset === void 0 ? DEFAULT_PRESET : _props$preset;
  var _useDefaultProp = useDefaultProp(defaultBorder, _border, onBorderChange),
    border = _useDefaultProp[0],
    setBorder = _useDefaultProp[1];
  var t = useTranslate();
  return /*#__PURE__*/_createElement(BorderPickerWrapper, null, /*#__PURE__*/_createElement(BorderPickerMain, null, /*#__PURE__*/_createElement(BorderPickerLayout, {
    color: border.color,
    layout: border.layout,
    onChange: function onChange(layout) {
      return setBorder(_extends({}, border, {
        layout: layout
      }));
    }
  }), /*#__PURE__*/_createElement("div", {
    style: {
      marginLeft: 16,
      marginTop: 0
    }
  }, /*#__PURE__*/_createElement(BorderPickerColor, {
    color: border.color,
    onChange: function onChange(color) {
      return setBorder(_extends({}, border, {
        color: color
      }));
    }
  }), /*#__PURE__*/_createElement(BorderPickerStyle, {
    color: border.color,
    preset: preset,
    style: border.style,
    onChange: function onChange(style) {
      setBorder(_extends({}, border, {
        style: style
      }));
    }
  }))), _Divider || (_Divider = /*#__PURE__*/_createElement(Divider, null)), /*#__PURE__*/_createElement(BorderPickerFooter, {
    onClick: function onClick() {
      return setBorder(_extends({}, border, {
        layout: 'none'
      }));
    }
  }, _IconBorderNone || (_IconBorderNone = /*#__PURE__*/_createElement(IconBorderNone, null)), /*#__PURE__*/_createElement(Text, {
    style: {
      flexGrow: 1,
      marginLeft: 8
    }
  }, t('wdn_border_picker_no_border'))));
});
var BorderPickerLayout = /*#__PURE__*/React.memo(function (props) {
  var color = props.color,
    layout = props.layout,
    onChange = props.onChange;
  return /*#__PURE__*/_createElement(BorderPickerLayoutWrapper, {
    style: {
      color: color
    }
  }, BORDER_LAYOUTES.map(function (_ref) {
    var key = _ref[0],
      icon = _ref[1];
    return /*#__PURE__*/_createElement(BorderPickerLayoutIconWrapper, {
      onClick: function onClick() {
        return onChange(key);
      },
      active: key === layout
    }, /*#__PURE__*/React.cloneElement(icon, {
      size: 20
    }));
  }));
});
var BorderPickerColor = /*#__PURE__*/React.memo(function (props) {
  var color = props.color,
    onChange = props.onChange;
  var _useState = useState(false),
    visible = _useState[0],
    setVisible = _useState[1];
  var t = useTranslate();
  var ref = useRef(null);
  return /*#__PURE__*/_createElement(BorderPickerColorWrap, {
    ref: ref
  }, /*#__PURE__*/_createElement(TextInline, {
    style: {
      marginRight: 8
    }
  }, t('wdn_color')), /*#__PURE__*/_createElement(Popover, {
    trigger: "click",
    placement: "bottomLeft",
    onVisibleChange: setVisible,
    visible: visible,
    getContainer: function getContainer() {
      return ref.current || document.body;
    },
    content: /*#__PURE__*/_createElement(ColorPicker, {
      autoColor: "#000000",
      color: color,
      onColorChange: function onColorChange(e) {
        e && onChange(e);
        setVisible(false);
      }
    })
  }, /*#__PURE__*/_createElement(BorderPickerColorButton, null, /*#__PURE__*/_createElement(BorderPickerColorRect, {
    style: {
      backgroundColor: color
    }
  }))));
});
var BorderPickerStyle = /*#__PURE__*/React.memo(function (props) {
  var color = props.color,
    style = props.style,
    preset = props.preset,
    _onChange = props.onChange;
  var t = useTranslate();
  return /*#__PURE__*/_createElement(BorderPickerStyleWrap, null, /*#__PURE__*/_createElement(TextInline, {
    style: {
      marginRight: 8
    }
  }, t('wdn_border_picker_line_type')), /*#__PURE__*/_createElement(Select, {
    size: "small",
    value: style,
    options: preset.map(function (it) {
      return it.key;
    }),
    renderOption: function renderOption(op) {
      var border = preset.find(function (p) {
        return p.key === op.key;
      });
      if (border) {
        return /*#__PURE__*/_createElement(Select.Option, {
          children: /*#__PURE__*/_createElement(BorderStyleDisplay, {
            color: color,
            style: border.style
          })
        });
      } else {
        return _Select$Option || (_Select$Option = /*#__PURE__*/_createElement(Select.Option, null));
      }
    },
    renderValue: function renderValue(_ref2) {
      var key = _ref2.key;
      var border = preset.find(function (p) {
        return p.key === key;
      });
      if (border) {
        return /*#__PURE__*/_createElement(BorderStyleDisplay, {
          color: color,
          style: border.style
        });
      } else {
        return null;
      }
    },
    onChange: function onChange(e) {
      return _onChange(e);
    }
  }));
});
var BorderStyleDisplay = /*#__PURE__*/React.memo(function (props) {
  var color = props.color,
    style = props.style;
  var lineStyle = function lineStyle(params, color) {
    var linearGradientSteps = function linearGradientSteps(units, colors, makeUpForRepeat, start) {
      if (start === void 0) {
        start = 0;
      }
      var currenPosition = start;
      var res = '';
      var maxIndex = units.length - 1;
      if (makeUpForRepeat && start > 0) {
        res += "transparent 0px, transparent " + start + "px,";
      }
      for (var i = 0; i < maxIndex; i++) {
        var nextPosition = currenPosition + units[i];
        res += colors[i] + " " + currenPosition + "px, " + colors[i] + " " + nextPosition + "px,";
        currenPosition = nextPosition;
      }
      var endPosition = currenPosition + units[maxIndex];
      res += colors[maxIndex] + " " + currenPosition + "px, " + colors[maxIndex] + " " + endPosition + "px";
      return [res, endPosition];
    };
    var units = params.units,
      _params$width = params.width,
      size = _params$width === void 0 ? 1 : _params$width,
      angle = params.inclination;
    var indent = 0,
      repeatFrom = 0;
    var colors = [color, COLORS.WHITE];
    var direction = angle ? angle + "deg" : 'to right';
    var style = {};
    style.height = size;
    if (units.length === 0 || colors.length === 0) {
      return style;
    }
    if (units.length === 1) {
      style.backgroundColor = colors[0];
      return style;
    }
    var renderColors = colors.concat();
    while (renderColors.length < units.length) {
      renderColors = renderColors.concat(renderColors);
    }
    var startColors = renderColors.slice(0, repeatFrom);
    var repeatColors = renderColors.slice(repeatFrom);
    var startUnits = units.slice(0, repeatFrom);
    var repeatUnits = units.slice(repeatFrom);
    var startLinear = '';
    var repeatLinear = '';
    var repeatStartPosition = indent;
    if (startUnits.length !== 0) {
      var _linearGradientSteps = linearGradientSteps(startUnits, startColors, true, indent),
        steps = _linearGradientSteps[0],
        endPosition = _linearGradientSteps[1];
      startLinear = "linear-gradient(" + direction + "," + steps + ")";
      repeatStartPosition = endPosition;
    }
    if (repeatUnits.length !== 0) {
      var _linearGradientSteps2 = linearGradientSteps(repeatUnits, repeatColors, false, repeatStartPosition),
        _steps = _linearGradientSteps2[0];
      repeatLinear = "repeating-linear-gradient(" + direction + "," + _steps + ")";
    }
    var both = startLinear && repeatLinear;
    var linear = both ? startLinear + ", " + repeatLinear : startLinear + " " + repeatLinear;
    style.backgroundImage = linear;
    return style;
  };
  var segs = 'length' in style ? style : [style];
  return /*#__PURE__*/_createElement(React.Fragment, null, segs.map(function (seg) {
    return seg ? /*#__PURE__*/_createElement("div", {
      style: _extends({
        width: 50,
        minWidth: '60px',
        height: 16
      }, lineStyle(seg, color))
    }) : /*#__PURE__*/_createElement("div", {
      style: {
        width: 50,
        height: 2
      }
    });
  }));
});
//# sourceMappingURL=BorderPicker.js.map