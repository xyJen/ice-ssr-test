import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["imagePicker", "getImagePickerContainer", "onChange", "onPickImageStart", "onPickImageEnd"];
import React, { useEffect, useImperativeHandle, useRef, useState } from "react";
var _createElement = /*#__PURE__*/React.createElement;
import { Popover } from "../../display/popover";
import { useTranslate } from "../../locale";
import { ButtonsWrapper, SettingButton } from "./style";
import { getSafePosition } from "./utils";
import { DEFAULT_POSITION } from "./constants";
import { mergeRestProps } from "../../common/react/mergeRestProps";
export var TitleCoverControllPanel = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var imagePicker = props.imagePicker,
    getImagePickerContainer = props.getImagePickerContainer,
    onChange = props.onChange,
    onPickImageStart = props.onPickImageStart,
    onPickImageEnd = props.onPickImageEnd,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useState = useState(DEFAULT_POSITION),
    position = _useState[0],
    setPosition = _useState[1];
  var _useState2 = useState(false),
    isReposition = _useState2[0],
    setIsReposition = _useState2[1];
  var wrapperRef = useRef(null);
  var startYRef = useRef(0);
  var isMovePosition = useRef(false);
  var originPositionRef = useRef(0);
  var titleCoverRef = useRef(null);
  var positionRef = useRef(position);
  var dragStartPositionRef = useRef(position);
  useImperativeHandle(ref, function () {
    return {
      attach: function attach(titleCover) {
        titleCoverRef.current = titleCover;
        return titleCover.onChange(function (_ref) {
          var isRep = _ref.isReposition,
            p = _ref.position;
          setIsReposition(isRep);
          setPosition(p);
        });
      }
    };
  });
  useEffect(function () {
    positionRef.current = position;
  }, [position]);
  var savePosition = function savePosition() {
    var _titleCoverRef$curren, _titleCoverRef$curren2;
    var cover = (_titleCoverRef$curren = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren.getCover();
    if (cover) {
      onChange == null ? void 0 : onChange(_extends({}, cover, {
        transform: {
          offsetY: position
        }
      }));
    }
    (_titleCoverRef$curren2 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren2.endReposition();
  };
  var turnOnReposition = function turnOnReposition() {
    var _titleCoverRef$curren3;
    originPositionRef.current = position;
    (_titleCoverRef$curren3 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren3.startReposition();
  };
  React.useEffect(function () {
    if (isReposition) {
      var _titleCoverRef$curren8;
      var handleMouseDownImg = function handleMouseDownImg(e) {
        isMovePosition.current = false;
        dragStartPositionRef.current = positionRef.current;
        var handleDragging = function handleDragging(e) {
          var _titleCoverRef$curren4, _titleCoverRef$curren5;
          var imgRef = (_titleCoverRef$curren4 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren4.getImageRef();
          if (!(imgRef != null && imgRef.current)) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          isMovePosition.current = true;
          var offsetY = e.screenY - startYRef.current;
          // x0.5 避免拖动过快（参考 notion）
          var offsetPercent = offsetY / imgRef.current.offsetHeight * 0.5;
          // position 取值范围 [0, 1]
          (_titleCoverRef$curren5 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren5.setRenderPosition(Math.max(0, Math.min(1, dragStartPositionRef.current - offsetPercent)));
        };
        var handleMouseUp = function handleMouseUp() {
          if (!isMovePosition.current) {
            var _titleCoverRef$curren6, _titleCoverRef$curren7;
            (_titleCoverRef$curren6 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren6.setRenderPosition(getSafePosition(originPositionRef.current));
            (_titleCoverRef$curren7 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren7.endReposition();
          }
          document.removeEventListener("mousemove", handleDragging);
          document.removeEventListener("mouseup", handleMouseUp);
        };
        if (isReposition) {
          startYRef.current = e.screenY;
          document.addEventListener("mousemove", handleDragging);
          document.addEventListener("mouseup", handleMouseUp);
          return function () {
            document.removeEventListener("mousemove", handleDragging);
            document.removeEventListener("mouseup", handleMouseUp);
          };
        }
      };
      var imgeRef = (_titleCoverRef$curren8 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren8.getImageRef();
      if (imgeRef != null && imgeRef.current) {
        imgeRef.current.addEventListener("mousedown", handleMouseDownImg);
        return function () {
          var _imgeRef$current;
          (_imgeRef$current = imgeRef.current) == null ? void 0 : _imgeRef$current.removeEventListener("mousedown", handleMouseDownImg);
        };
      }
    }
  }, [isReposition]);
  var handleCancel = function handleCancel() {
    var _titleCoverRef$curren9, _titleCoverRef$curren10;
    (_titleCoverRef$curren9 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren9.setRenderPosition(getSafePosition(originPositionRef.current));
    (_titleCoverRef$curren10 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren10.endReposition();
  };
  var preventDefault = function preventDefault(e) {
    e.stopPropagation();
  };
  useEffect(function () {
    var handleClick = function handleClick(e) {
      var _titleCoverRef$curren11;
      var imgRef = (_titleCoverRef$curren11 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren11.getImageRef();
      if (!(imgRef != null && imgRef.current) || isMovePosition.current) {
        isMovePosition.current = false;
        return;
      }
      var _imgRef$current$getBo = imgRef.current.getBoundingClientRect(),
        top = _imgRef$current$getBo.top,
        bottom = _imgRef$current$getBo.bottom,
        left = _imgRef$current$getBo.left,
        right = _imgRef$current$getBo.right;
      var clientX = e.clientX,
        clientY = e.clientY;
      if (clientX < left || clientX > right || clientY < top || clientY > bottom) {
        var _titleCoverRef$curren12, _titleCoverRef$curren13;
        var _cover = (_titleCoverRef$curren12 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren12.getCover();
        if (_cover) {
          onChange == null ? void 0 : onChange(_extends({}, _cover, {
            transform: {
              offsetY: positionRef.current
            }
          }));
        }
        (_titleCoverRef$curren13 = titleCoverRef.current) == null ? void 0 : _titleCoverRef$curren13.endReposition();
      }
    };
    if (isReposition) {
      document.addEventListener("click", handleClick);
    } else {
      document.removeEventListener("click", handleClick);
    }
    return function () {
      if (isReposition) {
        document.removeEventListener("click", handleClick);
      }
    };
  }, [isReposition]);
  var handleClickPickImageButton = function handleClickPickImageButton() {
    onPickImageStart == null ? void 0 : onPickImageStart();
  };
  var t = useTranslate();
  var handleOnVisibleChange = function handleOnVisibleChange(v) {
    if (!v) {
      onPickImageEnd == null ? void 0 : onPickImageEnd();
    }
  };
  var getContainer = function getContainer() {
    return (getImagePickerContainer == null ? void 0 : getImagePickerContainer()) || wrapperRef.current || document.body;
  };
  return /*#__PURE__*/_createElement(ButtonsWrapper, _extends({
    ref: wrapperRef
  }, mergeRestProps(rest, 'wdn-title-cover-controll-panel')), !isReposition ? /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(Popover, {
    placement: "bottomLeft",
    trigger: "click",
    content: imagePicker,
    onVisibleChange: handleOnVisibleChange,
    getContainer: getContainer,
    style: {
      borderRadius: 8
    }
  }, /*#__PURE__*/_createElement(SettingButton, {
    onClick: handleClickPickImageButton,
    style: {
      borderRight: '1px solid rgba(55, 53, 47, 0.09)'
    }
  }, t("wdn_title_cover_update_image"))), /*#__PURE__*/_createElement(SettingButton, {
    onClick: turnOnReposition
  }, t("wdn_title_cover_reposition"))) : /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(SettingButton, {
    style: {
      borderRight: '1px solid rgba(55, 53, 47, 0.09)'
    },
    onClick: savePosition,
    onMouseDown: preventDefault
  }, t("wdn_title_cover_save_position")), /*#__PURE__*/_createElement(SettingButton, {
    onClick: handleCancel,
    onMouseDown: preventDefault
  }, t("wdn_cancel"))));
}));
//# sourceMappingURL=TitleCoverControllPanel.js.map