/* eslint-disable max-lines-per-function */
import React, { useRef, useState, useMemo, useCallback, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { CarouselWrapper } from "./style";
var useForceUpdate = function useForceUpdate() {
  var setValue = useState(-1)[1];
  return useCallback(function () {
    setValue(Math.random());
  }, [setValue]);
};
var TIME_6S = 6 * 1000;
var DEFAULT_PLAY_SPEED = 0.5;
export var Carousel = function Carousel(props) {
  var children = props.children,
    _props$onChange = props.onChange,
    onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
    _props$autoPlayTime = props.autoPlayTime,
    autoPlayTime = _props$autoPlayTime === void 0 ? TIME_6S : _props$autoPlayTime,
    _props$playSpeed = props.playSpeed,
    playSpeed = _props$playSpeed === void 0 ? DEFAULT_PLAY_SPEED : _props$playSpeed,
    _props$autoPlay = props.autoPlay,
    autoPlay = _props$autoPlay === void 0 ? true : _props$autoPlay,
    _props$showCarouselDo = props.showCarouselDots,
    showCarouselDots = _props$showCarouselDo === void 0 ? true : _props$showCarouselDo,
    currentItemIndex = props.currentItemIndex,
    itemWidth = props.itemWidth;
  var _useState = useState(false),
    isHover = _useState[0],
    setIsHover = _useState[1];
  var isCurrentItemIndexNumber = typeof currentItemIndex === 'number';

  // 初始化的时候生成一次子节点
  var carouselChildrenNodes = useMemo(function () {
    var result = [];
    React.Children.forEach(children, function (node) {
      result.push(node);
    });
    return result;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // eslint-disable-next-line react-hooks/exhaustive-deps
  var carouselWidth = useMemo(function () {
    return itemWidth * carouselChildrenNodes.length;
  }, []);
  var flush = useForceUpdate();
  // 状态
  var state = useRef({
    childrenNodes: carouselChildrenNodes,
    currentIndex: 0,
    timer: -1
  }).current;
  var SetCurrentIndex = useCallback(function (i) {
    onChange(i);
    if (isCurrentItemIndexNumber) {
      return;
    }
    state.currentIndex = i >= state.childrenNodes.length ? state.childrenNodes.length - 1 : i;
    flush();
  }, [flush, isCurrentItemIndexNumber, onChange, state]);
  var next = useCallback(function () {
    var childrenNodes = state.childrenNodes,
      currentIndex = state.currentIndex;
    var nextIndex = currentIndex + 1;
    SetCurrentIndex(nextIndex < childrenNodes.length ? nextIndex : 0);
  }, [SetCurrentIndex, state]);
  var reSetCarouselInterval = useCallback(function () {
    if (!autoPlay) {
      return;
    }
    clearInterval(state.timer);
    state.timer = window.setInterval(function () {
      if (isHover) {
        return;
      }
      next();
    }, autoPlayTime);
  }, [next, state, autoPlayTime, autoPlay, isHover]);
  useEffect(function () {
    reSetCarouselInterval();
  }, [isHover]);
  useEffect(function () {
    if (isCurrentItemIndexNumber && state.currentIndex !== currentItemIndex) {
      reSetCarouselInterval();
      state.currentIndex = currentItemIndex;
      flush();
    }
  }, [currentItemIndex, flush, isCurrentItemIndexNumber, reSetCarouselInterval, state]);
  var goTo = useCallback(function (index) {
    var childrenNodes = state.childrenNodes,
      currentIndex = state.currentIndex;
    if (index < 0 || index >= childrenNodes.length) {
      return;
    }
    if (currentIndex === index) {
      return;
    }
    reSetCarouselInterval();
    SetCurrentIndex(index);
  }, [state, SetCurrentIndex, reSetCarouselInterval]);
  useEffect(function () {
    if (autoPlay) {
      reSetCarouselInterval();
      return function () {
        return clearInterval(state.timer);
      };
    }
    clearInterval(state.timer);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [autoPlay]);
  var handleMouseEnter = useCallback(function () {
    setIsHover(true);
  }, []);
  var handleMouseLeave = useCallback(function () {
    setIsHover(false);
  }, []);
  return /*#__PURE__*/_createElement(CarouselWrapper, {
    style: {
      width: itemWidth
    },
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, /*#__PURE__*/_createElement("ul", {
    className: "guide_carousel_list",
    style: {
      width: carouselWidth + 20,
      transition: playSpeed + "s",
      transform: "translate3d(-" + itemWidth * state.currentIndex + "px, 0px, 0px)"
    }
  }, state.childrenNodes.map(function (node, i) {
    return /*#__PURE__*/_createElement("li", {
      key: i
    }, node);
  })), showCarouselDots && /*#__PURE__*/_createElement("ul", {
    className: "guide_carousel_dots"
  }, state.childrenNodes.map(function (_item, i) {
    return /*#__PURE__*/_createElement("li", {
      key: i,
      className: i === state.currentIndex ? 'carousel_dots_active' : ''
    }, /*#__PURE__*/_createElement("button", {
      onClick: function onClick() {
        return goTo(i);
      }
    }));
  })));
};
//# sourceMappingURL=index.js.map