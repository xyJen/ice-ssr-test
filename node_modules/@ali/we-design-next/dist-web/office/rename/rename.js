import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["filename", "renameAble", "onRename", "maxWidth"];
import React, { memo, useRef, useEffect, useCallback, useState, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Tooltip } from "../../display/tooltip";
import { TitleInput, TitleMirror, TitleBar, TitleName } from "./styled";
var mirrorOffsetWidth = 6;
var inputOffsetHeight = 6;
var inputOffsetWidth = 10;
var minWidth = 2;
var maxLength = 32;
var isSafari = window.navigator.userAgent.includes('Safari') && !window.navigator.userAgent.includes('Chrome');
export var Filename = /*#__PURE__*/memo(function (props) {
  var fileName = props.filename,
    renameAble = props.renameAble,
    onRename = props.onRename,
    _props$maxWidth = props.maxWidth,
    maxWidth = _props$maxWidth === void 0 ? -1 : _props$maxWidth,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var inputRef = useRef(null);
  var readerRef = useRef(null);
  var mirrorRef = useRef(null);
  var _useState = useState(''),
    newFileName = _useState[0],
    setFileName = _useState[1];
  var _useState2 = useState(false),
    isFocused = _useState2[0],
    setFocus = _useState2[1];
  var _useState3 = useState(false),
    isComposing = _useState3[0],
    setIsComposing = _useState3[1];
  var _useState4 = useState(false),
    illeaguePost = _useState4[0],
    setIlleaguePost = _useState4[1];
  var resizeNameInput = useCallback(function () {
    if (!mirrorRef.current) {
      return;
    }
    var _getBoundingClientRec = mirrorRef.current.getBoundingClientRect(),
      _getBoundingClientRec2 = _getBoundingClientRec.width,
      width = _getBoundingClientRec2 === void 0 ? 0 : _getBoundingClientRec2,
      height = _getBoundingClientRec.height;
    var mirrorWidth = Math.ceil(width);
    if (renameAble) {
      if (inputRef.current) {
        var inputWidth = mirrorWidth + inputOffsetWidth - mirrorOffsetWidth;
        if (isSafari) {
          inputWidth = mirrorWidth + inputOffsetWidth;
          inputRef.current.style.height = height + inputOffsetHeight + "px";
        }
        inputRef.current.style.width = (maxWidth === -1 ? Math.max(inputWidth, minWidth) : Math.min(Math.max(inputWidth, minWidth), maxWidth - inputOffsetWidth)) + "px";
        if (readerRef.current) {
          readerRef.current.style.width = (maxWidth === -1 ? Math.max(inputWidth, minWidth) : Math.min(Math.max(inputWidth, minWidth), maxWidth - mirrorOffsetWidth)) + "px";
        }
      }
    } else if (readerRef.current) {
      readerRef.current.style.width = (maxWidth === -1 ? Math.max(mirrorWidth, minWidth) : Math.min(Math.max(mirrorWidth, minWidth), maxWidth - mirrorOffsetWidth)) + "px";
    }
  }, [renameAble, isSafari, minWidth, maxWidth]);
  useEffect(function () {
    setFileName(fileName);
    resizeNameInput();
  }, [fileName, resizeNameInput]);
  useEffect(function () {
    resizeNameInput();
  }, [resizeNameInput, newFileName]);
  var handleMouseLeave = useCallback(function () {
    if (!isFocused && (inputRef == null ? void 0 : inputRef.current) instanceof HTMLInputElement) {
      var _inputRef$current$get = inputRef.current.getBoundingClientRect(),
        width = _inputRef$current$get.width;
      inputRef.current.style.width = width + "px";
      inputRef.current.scrollLeft = 0;
      resizeNameInput();
    }
  }, [isFocused, resizeNameInput]);
  var onChangeName = useCallback(function (e) {
    var value = e.target.value;
    setFileName(value);
  }, []);
  /* 响应编辑输入框失焦 */
  var handleBlur = useCallback(function () {
    var _inputRef$current, _inputRef$current$val;
    setIlleaguePost(false);
    var trimFileName = inputRef == null ? void 0 : (_inputRef$current = inputRef.current) == null ? void 0 : (_inputRef$current$val = _inputRef$current.value) == null ? void 0 : _inputRef$current$val.trim().substring(0, maxLength);
    if (trimFileName && (trimFileName == null ? void 0 : trimFileName.length) > 0) {
      setFileName(trimFileName);
      setFocus(false);
      onRename(trimFileName);
    } else {
      setFileName(fileName);
      setFocus(false);
    }
  }, [fileName, maxLength, onRename]);

  // 文件名超限时给出警告
  var alertNameLength = useCallback(function () {
    if (!illeaguePost && newFileName && newFileName.length > maxLength) {
      setIlleaguePost(true);
    }
  }, [illeaguePost, maxLength, newFileName]);

  // 聚焦时，选中文本
  var handleFocus = useCallback(function () {
    setFocus(true);
  }, []);
  var handleEnterKey = useCallback(function (e) {
    var input = inputRef.current;
    switch (e.key) {
      case 'Escape':
        if (input) {
          input.value = fileName || '';
        }
        !isComposing && (input == null ? void 0 : input.blur());
        break;
      case 'Enter':
        setIlleaguePost(false);
        !isComposing && (input == null ? void 0 : input.blur());
        break;
      default:
        break;
    }
  }, [isComposing, fileName]);
  var handleTextAreaComposition = useCallback(function (e) {
    if (e.type === 'compositionstart') {
      setIsComposing(true);
    }
    if (e.type === 'compositionend') {
      setIsComposing(false);
      setIlleaguePost(false);
    }
  }, []);
  var mirrorText = useMemo(function () {
    return (newFileName || '').replace(/\s/g, "\xA0");
  }, [newFileName]);
  return /*#__PURE__*/_createElement(TitleBar, rest, renameAble ? /*#__PURE__*/_createElement(Tooltip, {
    title: '重命名'
  }, /*#__PURE__*/_createElement(TitleInput, {
    ref: inputRef,
    value: newFileName,
    title: newFileName,
    onChange: onChangeName,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onKeyDown: handleEnterKey,
    onKeyUp: alertNameLength,
    maxLength: maxLength,
    isFocused: isFocused,
    onMouseLeave: handleMouseLeave,
    onCompositionStart: handleTextAreaComposition,
    onCompositionEnd: handleTextAreaComposition
  })) : /*#__PURE__*/_createElement(TitleName, {
    ref: readerRef,
    title: fileName
  }, fileName), /*#__PURE__*/_createElement(TitleMirror, {
    ref: mirrorRef
  }, mirrorText));
});
//# sourceMappingURL=rename.js.map