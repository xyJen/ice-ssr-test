import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["handleMouseDownOnPoint", "point", "sliderLength", "isMove", "formatter", "moveStart", "isStart", "disable", "tip", "pointBgColor", "pointBgColorDisabled", "pointBorderColor", "pointBorderColorDisabled", "style"];
import React, { memo, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { COLORS, mergeRestProps } from "../../common";
import { renderReactNode } from "../../common";
import { SliderTip } from "./SliderTip";
import { StyledSliderPoint } from "./styled";
export var SliderPoint = /*#__PURE__*/memo(function (props) {
  var handleMouseDownOnPoint = props.handleMouseDownOnPoint,
    _props$point = props.point,
    point = _props$point === void 0 ? 0 : _props$point,
    _props$sliderLength = props.sliderLength,
    sliderLength = _props$sliderLength === void 0 ? 0 : _props$sliderLength,
    isMove = props.isMove,
    formatter = props.formatter,
    moveStart = props.moveStart,
    isStart = props.isStart,
    disable = props.disable,
    tip = props.tip,
    _props$pointBgColor = props.pointBgColor,
    pointBgColor = _props$pointBgColor === void 0 ? COLORS.WHITE : _props$pointBgColor,
    _props$pointBgColorDi = props.pointBgColorDisabled,
    pointBgColorDisabled = _props$pointBgColorDi === void 0 ? '#D6D6D6' : _props$pointBgColorDi,
    _props$pointBorderCol = props.pointBorderColor,
    pointBorderColor = _props$pointBorderCol === void 0 ? COLORS.WHITE : _props$pointBorderCol,
    _props$pointBorderCol2 = props.pointBorderColorDisabled,
    pointBorderColorDisabled = _props$pointBorderCol2 === void 0 ? COLORS.LIGHT.LEVEL3_BASE_COLOR : _props$pointBorderCol2,
    style = props.style,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var renderTip = useMemo(function () {
    var pointProps = {
      point: point,
      isMove: isMove,
      formatter: formatter
    };
    return renderReactNode(tip, /*#__PURE__*/_createElement(SliderTip, pointProps), undefined);
  }, [tip, point, isMove, formatter]);
  var pointStyle = useMemo(function () {
    return _extends({
      backgroundColor: disable ? pointBgColorDisabled : pointBgColor,
      border: "1px solid " + (disable ? pointBorderColorDisabled : pointBorderColor),
      boxShadow: disable ? 'none' : "0 0 1px 1px " + COLORS.LIGHT.LEVEL3_BASE_COLOR,
      cursor: disable ? 'initial' : 'pointer'
    }, style, {
      left: point / sliderLength * 100 + "%"
    });
  }, [disable, point, style, sliderLength, pointBgColorDisabled, pointBgColor, pointBorderColor, pointBorderColorDisabled]);
  return /*#__PURE__*/_createElement(StyledSliderPoint, _extends({
    disable: disable,
    isMove: isMove,
    onMouseDown: function onMouseDown() {
      moveStart && (moveStart.current = isStart);
      handleMouseDownOnPoint == null ? void 0 : handleMouseDownOnPoint();
    }
  }, mergeRestProps(_extends({}, rest, {
    style: pointStyle
  }), '')), renderTip);
});
//# sourceMappingURL=SliderPoint.js.map