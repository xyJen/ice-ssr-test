import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["marks", "handleClickOnMark", "sliderLength", "disable", "markBgColor", "markTextColor", "style"];
import React, { memo, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { COLORS, mergeRestProps } from "../../common";
import { StyledSliderMarks, Mark, MarkText } from "./styled";
export var SliderMarks = /*#__PURE__*/memo(function (props) {
  var _Mark;
  var _props$marks = props.marks,
    marks = _props$marks === void 0 ? [] : _props$marks,
    handleClickOnMark = props.handleClickOnMark,
    _props$sliderLength = props.sliderLength,
    sliderLength = _props$sliderLength === void 0 ? 0 : _props$sliderLength,
    disable = props.disable,
    _props$markBgColor = props.markBgColor,
    markBgColor = _props$markBgColor === void 0 ? COLORS.LIGHT.LEVEL3_BASE_COLOR : _props$markBgColor,
    _props$markTextColor = props.markTextColor,
    markTextColor = _props$markTextColor === void 0 ? COLORS.BLACK : _props$markTextColor,
    style = props.style,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var markStyle = useMemo(function () {
    return {
      backgroundColor: markBgColor
    };
  }, [markBgColor]);
  var markTextStyle = useMemo(function () {
    return {
      color: markTextColor
    };
  }, [markTextColor]);
  return /*#__PURE__*/_createElement(React.Fragment, null, marks.map(function (item, index) {
    return /*#__PURE__*/_createElement(StyledSliderMarks, _extends({
      key: index
    }, mergeRestProps(_extends({}, rest, {
      style: _extends({}, style, {
        left: item / sliderLength * 100 + "%",
        cursor: disable ? 'not-allowed' : 'pointer'
      })
    }), ''), {
      onClick: function onClick() {
        return handleClickOnMark == null ? void 0 : handleClickOnMark(item);
      }
    }), _Mark || (_Mark = /*#__PURE__*/_createElement(Mark, {
      role: "mark",
      style: markStyle
    })), /*#__PURE__*/_createElement(MarkText, {
      role: "mark-text",
      style: markTextStyle
    }, item));
  }));
});
SliderMarks.displayName = 'sliderMarks';
//# sourceMappingURL=SliderMarks.js.map