import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
var _InputNumber, _InputNumber2;
import _regeneratorRuntime from "@babel/runtime/regenerator";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { render, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { InputNumber } from "../InputNumber";
import { KEY_CODES } from "../../../common";
test('InputNumber: should render content.', function () {
  var r = render(_InputNumber || (_InputNumber = /*#__PURE__*/_createElement(InputNumber, {
    value: 2022
  })));
  expect(r.container.querySelector('[value="2022"]')).toBeInTheDocument();
});
test('InputNumber: should render content with digits.', function () {
  var r = render(_InputNumber2 || (_InputNumber2 = /*#__PURE__*/_createElement(InputNumber, {
    value: 3,
    digits: 2
  })));
  expect(r.container.querySelector('[value="3.00"]')).toBeInTheDocument();
});
test('InputNumber: should trigger onChange with keyboard input.', function () {
  var fn = jest.fn();
  var r = render( /*#__PURE__*/_createElement(InputNumber, {
    onChange: fn
  }));
  expect(fn).not.toHaveBeenCalled();
  fireEvent.change(r.container.querySelector('input'), {
    target: {
      value: '1'
    }
  });
  expect(fn).toHaveBeenCalled();
  expect(fn).toHaveBeenCalledTimes(1);
  expect(fn).toHaveBeenLastCalledWith(1);
  fireEvent.change(r.container.querySelector('input'), {
    target: {
      value: ''
    }
  });
  expect(fn).toHaveBeenCalledTimes(2);
  expect(fn).toHaveBeenLastCalledWith(null);
  fireEvent.change(r.container.querySelector('input'), {
    target: {
      value: '-'
    }
  });
  expect(r.container.querySelector('[value="-"]')).toBeInTheDocument();
  expect(fn).toHaveBeenCalledTimes(2);
  fireEvent.change(r.container.querySelector('input'), {
    target: {
      value: '-1'
    }
  });
  expect(fn).toHaveBeenCalledTimes(3);
  expect(fn).toHaveBeenLastCalledWith(-1);
  fireEvent.change(r.container.querySelector('input'), {
    target: {
      value: '-1.'
    }
  });
  expect(fn).toHaveBeenCalledTimes(3);
});
test('InputNumber: should trigger onChange with increase / decrease button.', function () {
  var fn = jest.fn();
  var r = render( /*#__PURE__*/_createElement(InputNumber, {
    onChange: fn,
    defaultValue: 0
  }));
  var nodes = r.container.querySelectorAll('svg');
  var _map = [0, 1].map(function (i) {
      return nodes.item(i);
    }),
    incr = _map[0],
    decr = _map[1];
  fireEvent.click(incr);
  expect(fn).toHaveBeenCalledTimes(1);
  expect(fn).toHaveBeenLastCalledWith(1);
  fireEvent.click(incr);
  expect(fn).toHaveBeenCalledTimes(2);
  expect(fn).toHaveBeenLastCalledWith(2);
  fireEvent.click(decr);
  expect(fn).toHaveBeenCalledTimes(3);
  expect(fn).toHaveBeenLastCalledWith(1);
});
test('InputNumber: should trigger onChange with increase / decrease button pressing.', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
  var i, fn, r, nodes, _map2, incr, decr;
  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          i = 0;
          fn = jest.fn(function (n) {
            return i = n;
          });
          r = render( /*#__PURE__*/_createElement(InputNumber, {
            onChange: fn,
            defaultValue: 0
          }));
          nodes = r.container.querySelectorAll('svg');
          _map2 = [0, 1].map(function (i) {
            return nodes.item(i);
          }), incr = _map2[0], decr = _map2[1];
          fireEvent.mouseDown(incr);
          _context.next = 8;
          return new Promise(function (res) {
            return setTimeout(res, 2000);
          });
        case 8:
          fireEvent.mouseUp(incr);
          expect(fn).toHaveBeenCalled();
          expect(i).toBeGreaterThan(3);
          _context.next = 13;
          return new Promise(function (res) {
            return setTimeout(res, 500);
          });
        case 13:
          fireEvent.mouseDown(decr);
          _context.next = 16;
          return new Promise(function (res) {
            return setTimeout(res, 4000);
          });
        case 16:
          fireEvent.mouseUp(decr);
          expect(fn).toHaveBeenCalled();
          expect(i).toBeLessThan(-3);
        case 19:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})), 10000);
test('InputNumber: should not trigger onChange with increase / decrease button pressing shortly.', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
  var i, fn, r, nodes, _map3, incr, decr;
  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          i = 0;
          fn = jest.fn(function (n) {
            return i = n;
          });
          r = render( /*#__PURE__*/_createElement(InputNumber, {
            onChange: fn,
            defaultValue: 0
          }));
          nodes = r.container.querySelectorAll('svg');
          _map3 = [0, 1].map(function (i) {
            return nodes.item(i);
          }), incr = _map3[0], decr = _map3[1];
          fireEvent.mouseDown(incr);
          _context2.next = 8;
          return new Promise(function (res) {
            return setTimeout(res, 200);
          });
        case 8:
          expect(fn).not.toHaveBeenCalled();
          fireEvent.mouseUp(incr);
        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2);
})));
test('InputNumber: should trigger onEnter.', function () {
  var fn = jest.fn();
  var r = render( /*#__PURE__*/_createElement(InputNumber, {
    onEnter: fn,
    defaultValue: 0
  }));
  fireEvent.keyDown(r.container.querySelector('input'), {
    keyCode: KEY_CODES.ENTER
  });
  expect(fn).toHaveBeenCalledTimes(1);
});
test('InputNumber: should trigger onBlur.', function () {
  var fn = jest.fn();
  var r = render( /*#__PURE__*/_createElement(InputNumber, {
    onBlur: fn,
    defaultValue: 0
  }));
  var input = r.container.querySelector('input');
  fireEvent.change(input, {
    target: {
      value: '-1.'
    }
  });
  expect(r.container.querySelector('[value="-1."]')).toBeInTheDocument();
  fireEvent.blur(input);
  expect(fn).toHaveBeenCalled();
  expect(r.container.querySelector('[value="-1."]')).toBeNull();
  expect(r.container.querySelector('[value="-1"]')).toBeInTheDocument();
});
//# sourceMappingURL=InputNumber.test.js.map