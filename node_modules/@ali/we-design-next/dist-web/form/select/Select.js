import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _IconSelected;
var _excluded = ["options", "value", "defaultValue", "onChange", "visible", "defaultVisible", "onVisibleChange", "size", "mode", "placeholder", "disabled", "error", "bordered", "getContainer", "children", "renderValue", "renderOption", "autoWidth", "keyboard"];
import React, { useMemo, useState, useLayoutEffect, useRef, cloneElement } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Popover } from "../../display/popover";
import { useDefaultProp, mergeRestProps, proxyRestProps, KEY_CODES, useFocusTarget, renderReactNode } from "../../common";
import { List } from "../../basic/list";
import { flattenNested, isNormalized } from "../../basic/list/nested";
import { Input } from "../../form/input";
import { SuffixWrap, ErrorTip, SelectNormal, SelectNormalValue, SelectNormalValuePlaceholder, InputWrap, visibleStyle, errorStyle } from "./styled";
import { ArrowUpDown12 } from "../../common/";
import { IconSelected } from "../../basic/icon";
export var Select = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _SelectNormalValuePla, _currentOpt$title;
  var _props$options = props.options,
    options = _props$options === void 0 ? [] : _props$options,
    _value = props.value,
    _props$defaultValue = props.defaultValue,
    defaultValue = _props$defaultValue === void 0 ? '' : _props$defaultValue,
    onChange = props.onChange,
    _visible = props.visible,
    _props$defaultVisible = props.defaultVisible,
    defaultVisible = _props$defaultVisible === void 0 ? false : _props$defaultVisible,
    onVisibleChange = props.onVisibleChange,
    _props$size = props.size,
    size = _props$size === void 0 ? 'small' : _props$size,
    _props$mode = props.mode,
    mode = _props$mode === void 0 ? 'normal' : _props$mode,
    placeholder = props.placeholder,
    disabled = props.disabled,
    error = props.error,
    _props$bordered = props.bordered,
    bordered = _props$bordered === void 0 ? true : _props$bordered,
    getContainer = props.getContainer,
    children = props.children,
    renderValue = props.renderValue,
    renderOption = props.renderOption,
    _props$autoWidth = props.autoWidth,
    autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,
    _props$keyboard = props.keyboard,
    keyboard = _props$keyboard === void 0 ? true : _props$keyboard,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var flattenOptions = useMemo(function () {
    return flattenNested(options);
  }, [options]);
  var _useDefaultProp = useDefaultProp(defaultValue, _value, onChange),
    value = _useDefaultProp[0],
    setValue = _useDefaultProp[1];
  var _useState = useState(undefined),
    inputValue = _useState[0],
    setInputValue = _useState[1];
  var _useState2 = useState(null),
    active = _useState2[0],
    setActive = _useState2[1];
  var _useDefaultProp2 = useDefaultProp(defaultVisible, _visible, onVisibleChange),
    visible = _useDefaultProp2[0],
    setVisible = _useDefaultProp2[1];
  var wrapRef = useRef(null);
  var listRef = useRef(null);

  // 需要在dom更新后，渲染之前更新宽度，否则会影响dom align获取content的宽度
  useLayoutEffect(function () {
    if (visible && wrapRef.current && listRef.current) {
      listRef.current.style.minWidth = autoWidth ? 'auto' : wrapRef.current.clientWidth + 'px';
    }
  }, [visible, autoWidth]);
  var _useFocusTarget = useFocusTarget(wrapRef),
    focusTargetId = _useFocusTarget[0],
    focusTarget = _useFocusTarget[1],
    focusOwner = _useFocusTarget[2];
  var onOptionClick = function onOptionClick(k) {
    setValue(k);
    setInputValue(undefined);
    setVisible(false);
  };
  var updateValueByInputValue = function updateValueByInputValue() {
    if (typeof inputValue === 'string') {
      var res = flattenOptions.filter(isNormalized).find(function (op) {
        var _op$title;
        return (_op$title = op.title) == null ? void 0 : _op$title.toString().includes(inputValue);
      });
      if (res) {
        setValue(res.key);
      } else {
        setValue(inputValue);
      }
      setInputValue(undefined);
    }
  };
  var handleEsc = function handleEsc() {
    focusOwner(function () {
      setActive(null);
      setVisible(false);
    });
  };
  var handleKeyDown = keyboard ? function (e) {
    switch (e.which) {
      case KEY_CODES.ENTER:
        !visible && setVisible(true);
        mode === 'input' && updateValueByInputValue();
        e.nativeEvent.stopImmediatePropagation();
        break;
      case KEY_CODES.DOWN:
        break;
      case KEY_CODES.ESC:
        handleEsc();
        break;
      default:
        break;
    }
  } : undefined;
  var handleValueChange = function handleValueChange(e) {
    setInputValue(e.target.value);
  };
  var currentOpt = flattenOptions.find(function (k) {
    return k.key === value;
  });
  var renderListItem = function renderListItem(_ref) {
    var key = _ref.key;
    return function (p) {
      var props = p.props;
      var ele = key === value ? /*#__PURE__*/cloneElement(p, {
        suffix: _IconSelected || (_IconSelected = /*#__PURE__*/_createElement(IconSelected, null))
      }) : !props.suffix ? /*#__PURE__*/cloneElement(p, {
        suffix: null
      }) : p;
      return renderReactNode(renderOption, ele, {
        key: key
      });
    };
  };
  return /*#__PURE__*/_createElement(Popover, {
    placement: "bottomLeft",
    placementOffset: [4, 0],
    animation: true,
    content: /*#__PURE__*/_createElement(List, _extends({
      items: options,
      id: focusTargetId,
      style: {
        minWidth: 'auto',
        maxHeight: 400
      },
      keyboard: keyboard,
      active: active,
      onActiveChange: setActive,
      onSelect: onOptionClick,
      renderItem: renderListItem
    }, proxyRestProps(rest, 'list'), {
      ref: listRef
    })),
    visible: visible,
    trigger: disabled ? undefined : "click",
    onVisibleChange: function onVisibleChange(e) {
      if (e) {
        if (!visible) {
          var fn = function fn() {
            return setVisible(e);
          };
          if (keyboard && mode === 'normal') {
            focusTarget(fn);
          } else {
            fn();
          }
        }
      } else {
        visible && setVisible(e);
        setActive(null);
      }
    },
    getContainer: getContainer || function () {
      return wrapRef.current || document.body;
    },
    onKeyDown: function onKeyDown(e) {
      e.which === KEY_CODES.ESC && handleEsc();
    },
    "data-testid": "overlay-" + props['data-testid']
  }, /*#__PURE__*/_createElement(InputWrap, _extends({
    ref: wrapRef,
    size: size,
    onKeyDown: handleKeyDown
  }, mergeRestProps(rest, 'wdn-select')), mode === 'normal' ? /*#__PURE__*/_createElement(SelectNormal, {
    ref: ref,
    className: "wdn-select-normal",
    tabIndex: -1,
    hasError: !!error,
    disabled: !!disabled,
    size: size,
    bordered: bordered,
    visible: visible,
    onClick: function onClick() {
      return visible && setVisible(false);
    }
  }, /*#__PURE__*/_createElement(SelectNormalValue, null, function () {
    if (currentOpt) {
      if (isNormalized(currentOpt)) {
        return renderReactNode(renderValue, currentOpt.title, {
          key: currentOpt.key
        });
      } else {
        return currentOpt.key;
      }
    } else {
      return value ? renderReactNode(renderValue, value, {
        key: value
      }) : _SelectNormalValuePla || (_SelectNormalValuePla = /*#__PURE__*/_createElement(SelectNormalValuePlaceholder, null, placeholder));
    }
  }()), /*#__PURE__*/_createElement(SuffixWrap, null, /*#__PURE__*/_createElement(ArrowUpDown12, {
    dir: visible ? 'up' : 'down'
  }))) : /*#__PURE__*/_createElement(Input, {
    ref: ref,
    className: "wdn-select-input",
    size: size,
    value: typeof inputValue === 'string' ? inputValue : currentOpt ? isNormalized(currentOpt) ? (_currentOpt$title = currentOpt.title) == null ? void 0 : _currentOpt$title.toString() : currentOpt.key : value,
    disabled: !!disabled,
    bordered: !!bordered,
    placeholder: placeholder,
    onBlur: updateValueByInputValue,
    onChange: handleValueChange,
    style: visible && bordered ? visibleStyle : error ? errorStyle : undefined,
    suffix: /*#__PURE__*/_createElement(SuffixWrap, null, /*#__PURE__*/_createElement(ArrowUpDown12, {
      dir: visible ? 'up' : 'down'
    }))
  }), error && /*#__PURE__*/_createElement(ErrorTip, null, error)));
}));
export var Option = List.Item;
//# sourceMappingURL=Select.js.map