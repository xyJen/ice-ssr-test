import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _SpaceBar;
var _excluded = ["defaultValue", "value", "onChange", "mode", "timeFormat", "clearable", "confirmable", "disabledDate", "footer", "showNow"];
import React, { useState, useCallback, useEffect, useRef, useMemo } from "react";
var _createElement = /*#__PURE__*/React.createElement;
import dayjs from "dayjs";
import { useTranslate } from "../../locale";
import { useDefaultProp, mergeRestProps, renderReactNode } from "../../common";
import { DateTimePanel, TimePanel, DatePickerFooter } from "./panels";
import { DateController, isEqual } from "./date-util";
import { DatePickerWrapper, NowWrapper, SpaceBar, SwitchOptionWrapper } from "./styled";
import { Button } from "../../basic/button";
import { Checkbox } from "../checkbox";
export var DatePicker = /*#__PURE__*/React.memo(function (props) {
  var defaultValue = props.defaultValue,
    _value = props.value,
    onChange = props.onChange,
    _props$mode = props.mode,
    mode = _props$mode === void 0 ? 'date' : _props$mode,
    _props$timeFormat = props.timeFormat,
    timeFormat = _props$timeFormat === void 0 ? 'hm' : _props$timeFormat,
    _props$clearable = props.clearable,
    clearable = _props$clearable === void 0 ? false : _props$clearable,
    _props$confirmable = props.confirmable,
    confirmable = _props$confirmable === void 0 ? false : _props$confirmable,
    disabledDate = props.disabledDate,
    footer = props.footer,
    _props$showNow = props.showNow,
    showNow = _props$showNow === void 0 ? true : _props$showNow,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useDefaultProp = useDefaultProp(defaultValue, _value, onChange),
    value = _useDefaultProp[0],
    setValue = _useDefaultProp[1];
  var _useState = useState(value ? dayjs(value) : null),
    selectedValue = _useState[0],
    setSelectedValue = _useState[1];
  var _useState2 = useState("date"),
    curPanel = _useState2[0],
    setCurPanel = _useState2[1];
  var prePanelRef = useRef();
  var showTimeOption = useMemo(function () {
    return mode === 'auto' || typeof mode === 'object';
  }, [mode]);
  var defaultShowTime = useMemo(function () {
    return mode === 'datetime' || typeof mode === 'object' && mode[1]["default"] === 'datetime';
  }, [mode]);
  var _useState3 = useState(defaultShowTime),
    showTime = _useState3[0],
    setShowTime = _useState3[1];
  var t = useTranslate();
  useEffect(function () {
    setShowTime(defaultShowTime);
  }, [mode]);
  useEffect(function () {
    // 受控模式下，使selectedValue和value同步
    setSelectedValue(value ? dayjs(value) : null);
  }, [value]);
  var handleDisabledDate = useCallback(function (value) {
    return (disabledDate == null ? void 0 : disabledDate(value.toDate())) || false;
  }, [disabledDate]);
  var handleSelect = useCallback(function (date) {
    setSelectedValue(date);
    if (!confirmable && !isEqual(selectedValue, date) && !handleDisabledDate(date)) {
      setValue(date.toDate(), {
        showTime: showTime
      });
    }
  }, [confirmable, selectedValue, setValue, handleDisabledDate, showTime]);
  var handlePanelChange = useCallback(function (origin, target) {
    if (prePanelRef.current === "month" && origin === "year" && target === "date") {
      setCurPanel("month");
    } else {
      setCurPanel(target);
    }
    prePanelRef.current = origin;
  }, []);
  var now = DateController.getNow();
  var disabled = handleDisabledDate(now);
  var nowNode = showNow ? /*#__PURE__*/_createElement(NowWrapper, null, /*#__PURE__*/_createElement(Button, {
    type: "text",
    disabled: disabled,
    onClick: function onClick() {
      return handleSelect(now);
    }
  }, showTime ? t("wdn_date_picker_now") : t("wdn_date_picker_today"))) : _SpaceBar || (_SpaceBar = /*#__PURE__*/_createElement(SpaceBar, null));
  var defaultFooter = /*#__PURE__*/_createElement(React.Fragment, null);
  if (curPanel === "date") {
    defaultFooter = /*#__PURE__*/_createElement(DatePickerFooter, {
      timeSwitch: showTimeOption ? /*#__PURE__*/_createElement(SwitchOptionWrapper, null, /*#__PURE__*/_createElement(Checkbox, {
        checked: showTime,
        onChange: function onChange(e) {
          return setShowTime(e.target.checked);
        }
      }, t("wdn_date_picker_time"))) : null,
      clear: clearable ? /*#__PURE__*/_createElement(Button, {
        disabled: !value,
        onClick: function onClick() {
          setSelectedValue(null);
          !confirmable && setValue(null, {
            showTime: showTime
          });
        }
      }, t("wdn_date_picker_clear")) : undefined,
      confirm: confirmable ? /*#__PURE__*/_createElement(Button, {
        disabled: !selectedValue,
        onClick: function onClick() {
          if (!disabled && selectedValue) {
            setValue(selectedValue.toDate(), {
              showTime: showTime
            });
          }
        }
      }, t("wdn_ok")) : undefined
    });
  }
  var panelSharedProps = {
    value: selectedValue,
    onSelect: handleSelect,
    showNow: showNow,
    timeFormat: timeFormat
  };
  return /*#__PURE__*/_createElement(DatePickerWrapper, mergeRestProps(rest, "wdn-date-picker"), mode === "time" ? /*#__PURE__*/_createElement(TimePanel, _extends({
    showHeader: false
  }, panelSharedProps)) : /*#__PURE__*/_createElement(DateTimePanel, _extends({
    showTime: showTime,
    disabledDate: handleDisabledDate,
    curPanel: curPanel,
    onPanelChange: handlePanelChange,
    nowNode: nowNode
  }, panelSharedProps)), renderReactNode(footer, defaultFooter, undefined));
});
//# sourceMappingURL=DatePicker.js.map