import _extends from "@babel/runtime/helpers/extends";
var _React$Fragment;
import React, { useCallback, useMemo, useState, useEffect } from "react";
var _createElement = /*#__PURE__*/React.createElement;
import { useTranslate, useDayjsLocale } from "../../../../locale";
import { DateController, dayjsLocaleMonthBeforeYearConfig } from "../../date-util";
import { MonthPanel } from "../MonthPanel";
import { YearPanel } from "../YearPanel";
import { Header } from "../Header";
import { DateBody } from "./DateBody";
import { PanelWrapper } from "./styled";
export var DatePanel = /*#__PURE__*/React.memo(function (props) {
  var value = props.value,
    onSelect = props.onSelect,
    disabledDate = props.disabledDate,
    curPanel = props.curPanel,
    onPanelChange = props.onPanelChange,
    showTime = props.showTime,
    showNow = props.showNow,
    nowNode = props.nowNode;
  var dayjsLocale = useDayjsLocale();
  var t = useTranslate();
  var _useState = useState(value || DateController.getNow()),
    viewDate = _useState[0],
    setViewDate = _useState[1];
  useEffect(function () {
    // 受控模式下，value直接变化时，viewDate保持同步
    value && setViewDate(value);
  }, [value]);
  var handleSelectViewDate = useCallback(function (value) {
    setViewDate(value);
  }, [setViewDate]);
  var onMonthChange = useCallback(function (diff) {
    var newDate = DateController.addMonth(viewDate, diff);
    setViewDate(newDate);
  }, [viewDate, setViewDate]);
  var panelSharedProps = {
    value: value,
    viewDate: viewDate,
    disabledDate: disabledDate,
    showNow: showNow && curPanel === "date",
    nowNode: curPanel === "date" ? nowNode : null
  };
  var months = useMemo(function () {
    return DateController.locale.getShortMonths(dayjsLocale);
  }, [dayjsLocale]);
  var yearNode = /*#__PURE__*/_createElement("span", {
    key: "yearNode",
    onClick: function onClick() {
      return onPanelChange("date", "year");
    }
  }, DateController.locale.format(dayjsLocale, viewDate, t('wdn_date_picker_year_format')));
  var monthNode = /*#__PURE__*/_createElement("span", {
    key: "monthNode",
    onClick: function onClick() {
      return onPanelChange("date", "month");
    }
  }, months[DateController.getMonth(viewDate)]);
  var spaceNode = _React$Fragment || (_React$Fragment = /*#__PURE__*/_createElement(React.Fragment, {
    key: "spaceNode"
  }, "\xA0"));
  var monthYearNodes = dayjsLocaleMonthBeforeYearConfig[dayjsLocale] ? [monthNode, spaceNode, yearNode] : [yearNode, spaceNode, monthNode];
  return /*#__PURE__*/_createElement(React.Fragment, null, curPanel === "date" ? /*#__PURE__*/_createElement(PanelWrapper, {
    showNow: showNow
  }, /*#__PURE__*/_createElement(Header, {
    onPrev: function onPrev() {
      return onMonthChange(-1);
    },
    onNext: function onNext() {
      return onMonthChange(1);
    },
    className: showTime ? "header-border" : undefined
  }, monthYearNodes), /*#__PURE__*/_createElement(DateBody, _extends({
    onSelect: onSelect
  }, panelSharedProps)), nowNode) : null, curPanel === "month" ? /*#__PURE__*/_createElement(MonthPanel, _extends({
    onPanelChange: onPanelChange,
    onSelect: handleSelectViewDate
  }, panelSharedProps)) : null, curPanel === "year" ? /*#__PURE__*/_createElement(YearPanel, _extends({
    onPanelChange: onPanelChange,
    onSelect: handleSelectViewDate
  }, panelSharedProps)) : null);
});
//# sourceMappingURL=DatePanel.js.map