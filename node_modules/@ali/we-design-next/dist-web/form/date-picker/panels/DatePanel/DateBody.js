import React, { useMemo } from "react";
var _createElement = /*#__PURE__*/React.createElement;
import { useDayjsLocale, useLocale } from "../../../../locale";
import { DateController, getWeekStartDate, isSameMonth, isSameDate } from "../../date-util";
import { PanelBody } from "../PanelBody";
import { Th } from "./styled";
var WEEK_DAY_COUNT = 7;
var DATE_ROW_COUNT = 5;
export var DateBody = /*#__PURE__*/React.memo(function (props) {
  var value = props.value,
    viewDate = props.viewDate,
    onSelect = props.onSelect,
    disabledDate = props.disabledDate;
  var dayjsLocale = useDayjsLocale();
  var locale = useLocale();
  var weekdays = useMemo(function () {
    return DateController.locale.getShortWeekDays(dayjsLocale);
  }, [dayjsLocale]);
  var baseDate = getWeekStartDate(dayjsLocale, viewDate);
  var headerCells = weekdays.map(function (weekday) {
    return /*#__PURE__*/_createElement(Th, {
      key: weekday
    }, weekday);
  });
  return /*#__PURE__*/_createElement(PanelBody, {
    viewDate: viewDate,
    rowNum: DATE_ROW_COUNT,
    colNum: WEEK_DAY_COUNT,
    headerCells: headerCells,
    baseDate: baseDate.subtract(1, 'day'),
    getCellDate: DateController.addDate,
    getCellText: function getCellText(curDate) {
      return locale === 'zh-CN' && isSameDate(curDate, DateController.getNow()) ? 'ä»Š' : DateController.getDate(curDate);
    },
    onSelect: onSelect,
    disabledDate: disabledDate,
    mode: "date",
    getCellClassName: function getCellClassName(curDate) {
      return ['date', curDate.isSame(DateController.getNow(), 'date') ? 'isToday' : undefined, value && isSameDate(curDate, value) ? 'selected' : undefined, !isSameMonth(curDate, viewDate) ? 'notCurrentPeriod' : ''];
    }
  });
});
//# sourceMappingURL=DateBody.js.map