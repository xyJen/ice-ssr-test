import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["viewDate", "onPanelChange", "onSelect", "showNow", "nowNode"];
import React, { useCallback } from "react";
var _createElement = /*#__PURE__*/React.createElement;
import { PanelWrapper } from "../DatePanel/styled";
import { Header } from "../Header";
import { MonthBody } from "./MonthBody";
import { DateController } from "../../date-util";
export var MonthPanel = /*#__PURE__*/React.memo(function (props) {
  var viewDate = props.viewDate,
    onPanelChange = props.onPanelChange,
    onSelect = props.onSelect,
    showNow = props.showNow,
    nowNode = props.nowNode,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var handleSelect = useCallback(function (value) {
    onSelect(value);
    onPanelChange('month', "date");
  }, [onSelect]);
  var onYearChange = useCallback(function (diff) {
    var newDate = DateController.addYear(viewDate, diff);
    onSelect(newDate);
  }, [viewDate, onSelect]);
  return /*#__PURE__*/_createElement(PanelWrapper, {
    showNow: showNow
  }, /*#__PURE__*/_createElement(Header, {
    onPrev: function onPrev() {
      return onYearChange(-1);
    },
    onNext: function onNext() {
      return onYearChange(1);
    }
  }, /*#__PURE__*/_createElement("span", {
    onClick: function onClick() {
      return onPanelChange('month', "year");
    }
  }, DateController.getYear(viewDate))), /*#__PURE__*/_createElement(MonthBody, _extends({
    viewDate: viewDate,
    onSelect: handleSelect
  }, rest)), nowNode);
});
//# sourceMappingURL=MonthPanel.js.map