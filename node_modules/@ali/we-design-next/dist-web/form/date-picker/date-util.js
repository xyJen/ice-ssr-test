import dayjs from "dayjs";
import localeData from 'dayjs/plugin/localeData';
import weekday from "dayjs/plugin/weekday";
import "dayjs/locale/zh-cn";
import "dayjs/locale/ja";
import "dayjs/locale/zh-hk";
import "dayjs/locale/zh-tw";
dayjs.extend(weekday);
dayjs.extend(localeData);
export var DateController = {
  // get
  getNow: function getNow() {
    return dayjs();
  },
  getFixedDate: function getFixedDate(string) {
    return dayjs(string, ["YYYY-M-DD", "YYYY-MM-DD"]);
  },
  getEndDate: function getEndDate(date) {
    return date.endOf("month");
  },
  getWeekDay: function getWeekDay(date) {
    var clone = date.locale("en");
    return clone.weekday() + clone.localeData().firstDayOfWeek();
  },
  getYear: function getYear(date) {
    return date.year();
  },
  getMonth: function getMonth(date) {
    return date.month();
  },
  getDate: function getDate(date) {
    return date.date();
  },
  getHour: function getHour(date) {
    return date.hour();
  },
  getMinute: function getMinute(date) {
    return date.minute();
  },
  getSecond: function getSecond(date) {
    return date.second();
  },
  // set
  addYear: function addYear(date, diff) {
    return date.add(diff, "year");
  },
  addMonth: function addMonth(date, diff) {
    return date.add(diff, "month");
  },
  addDate: function addDate(date, diff) {
    return date.add(diff, "day");
  },
  setYear: function setYear(date, year) {
    return date.year(year);
  },
  setMonth: function setMonth(date, month) {
    return date.month(month);
  },
  setDate: function setDate(date, num) {
    return date.date(num);
  },
  setHour: function setHour(date, hour) {
    return date.hour(hour);
  },
  setMinute: function setMinute(date, minute) {
    return date.minute(minute);
  },
  setSecond: function setSecond(date, second) {
    return date.second(second);
  },
  // Compare
  isAfter: function isAfter(date1, date2) {
    return date1.isAfter(date2);
  },
  isValidate: function isValidate(date) {
    return date.isValid();
  },
  locale: {
    getWeekFirstDay: function getWeekFirstDay(locale) {
      return dayjs().locale(locale).localeData().firstDayOfWeek();
    },
    getWeekFirstDate: function getWeekFirstDate(locale, date) {
      return date.locale(locale).weekday(0);
    },
    getShortWeekDays: function getShortWeekDays(locale) {
      return dayjs().locale(locale).localeData().weekdaysMin();
    },
    getShortMonths: function getShortMonths(locale) {
      return dayjs().locale(locale).localeData().monthsShort();
    },
    format: function (_format) {
      function format(_x, _x2, _x3) {
        return _format.apply(this, arguments);
      }
      format.toString = function () {
        return _format.toString();
      };
      return format;
    }(function (locale, date, format) {
      return date.locale(locale).format(format);
    })
  }
};
export var getCellDateDisabled = function getCellDateDisabled(_ref) {
  var cellDate = _ref.cellDate,
    mode = _ref.mode,
    disabledDate = _ref.disabledDate;
  if (!disabledDate) return false;

  // 判断cell在此range是否是disabled
  var getDisabledFromRange = function getDisabledFromRange(currentMode, start, end) {
    var current = start;
    while (current <= end) {
      var _date = void 0;
      switch (currentMode) {
        case "date":
          _date = DateController.setDate(cellDate, current);
          if (!disabledDate(_date)) {
            return false;
          }
          break;
        case "month":
          _date = DateController.setMonth(cellDate, current);
          if (!getCellDateDisabled({
            cellDate: _date,
            mode: "month",
            disabledDate: disabledDate
          })) {
            return false;
          }
          break;
        case "year":
          _date = DateController.setYear(cellDate, current);
          if (!getCellDateDisabled({
            cellDate: _date,
            mode: "year",
            disabledDate: disabledDate
          })) {
            return false;
          }
          break;
      }
      current += 1;
    }
    return true;
  };
  switch (mode) {
    case "date":
      return disabledDate(cellDate);
    case "month":
      var startDate = 1;
      var endDate = DateController.getDate(DateController.getEndDate(cellDate));
      return getDisabledFromRange("date", startDate, endDate);
    case "year":
      return getDisabledFromRange("month", 0, 11);
  }
};
export var getWeekStartDate = function getWeekStartDate(locale, value) {
  var weekFirstDay = DateController.locale.getWeekFirstDay(locale);
  var monthStartDate = DateController.setDate(value, 1);
  var startDateWeekDay = DateController.getWeekDay(monthStartDate);
  var alignStartDate = DateController.addDate(monthStartDate, weekFirstDay - startDateWeekDay);
  if (DateController.getMonth(alignStartDate) === DateController.getMonth(value) && DateController.getDate(alignStartDate) > 1) {
    alignStartDate = DateController.addDate(alignStartDate, -7);
  }
  return alignStartDate;
};
export var leftPad = function leftPad(str, length, fill) {
  if (fill === void 0) {
    fill = "0";
  }
  var current = String(str);
  while (current.length < length) {
    current = "" + fill + str;
  }
  return current;
};
export function isNullEqual(value1, value2) {
  if (!value1 && !value2) {
    return true;
  }
  if (!value1 || !value2) {
    return false;
  }
  return undefined;
}
export var isSameYear = function isSameYear(year1, year2) {
  var equal = isNullEqual(year1, year2);
  if (typeof equal === 'boolean') {
    return equal;
  }
  return DateController.getYear(year1) === DateController.getYear(year2);
};
export var isSameMonth = function isSameMonth(month1, month2) {
  var equal = isNullEqual(month1, month2);
  if (typeof equal === 'boolean') {
    return equal;
  }
  return isSameYear(month1, month2) && DateController.getMonth(month1) === DateController.getMonth(month2);
};
export var isSameDate = function isSameDate(date1, date2) {
  var equal = isNullEqual(date1, date2);
  if (typeof equal === 'boolean') {
    return equal;
  }
  return isSameYear(date1, date2) && isSameMonth(date1, date2) && DateController.getDate(date1) === DateController.getDate(date2);
};
export var isSameTime = function isSameTime(time1, time2) {
  var equal = isNullEqual(time1, time2);
  if (typeof equal === 'boolean') {
    return equal;
  }
  return DateController.getHour(time1) === DateController.getHour(time2) && DateController.getMinute(time1) === DateController.getMinute(time2) && DateController.getSecond(time1) === DateController.getSecond(time2);
};
export var isEqual = function isEqual(value1, value2) {
  var equal = isNullEqual(value1, value2);
  if (typeof equal === 'boolean') {
    return equal;
  }
  return isSameDate(value1, value2) && isSameTime(value1, value2);
};
export var dayjsLocaleMonthBeforeYearConfig = {
  'zh-cn': false,
  'zh-tw': false,
  'zh-hk': false,
  'ja': false,
  'en': true
};
//# sourceMappingURL=date-util.js.map