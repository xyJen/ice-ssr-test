import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SingleTagWrap, ItemWrap, TagContentWrap } from "./styled";
import { IconClose } from "../../basic/icon";
export var Tag = /*#__PURE__*/React.memo(function (props) {
  var label = props.label,
    _props$closable = props.closable,
    closable = _props$closable === void 0 ? true : _props$closable,
    onClose = props.onClose,
    size = props.size;
  return /*#__PURE__*/_createElement(SingleTagWrap, {
    size: size
  }, /*#__PURE__*/_createElement(TagContentWrap, null, label), closable && /*#__PURE__*/_createElement(IconClose, {
    size: 12,
    onClick: onClose
  }));
});
export var TagMore = /*#__PURE__*/React.memo(function (props) {
  var omittedTags = props.omittedTags,
    size = props.size;
  var len = omittedTags.length;
  return /*#__PURE__*/_createElement(SingleTagWrap, {
    size: size
  }, /*#__PURE__*/_createElement(TagContentWrap, null, "+", len, "..."));
});
export var Item = /*#__PURE__*/React.memo(function (props) {
  var children = props.children,
    registerSize = props.registerSize,
    itemKey = props.itemKey,
    display = props.display,
    order = props.order,
    style = props.style;
  var ref = useRef(null);
  var mergedHidden = !display;
  var internalRegisterSize = function internalRegisterSize(width) {
    registerSize(itemKey, width);
  };
  useEffect(function () {
    if (ref.current) {
      internalRegisterSize(ref.current.offsetWidth);
      return function () {
        internalRegisterSize(null);
      };
    }
  }, []);
  var overflowStyle = {
    opacity: mergedHidden ? 0 : 1,
    height: mergedHidden ? 0 : undefined,
    overflowY: mergedHidden ? 'hidden' : undefined,
    order: order,
    pointerEvents: mergedHidden ? 'none' : undefined,
    position: mergedHidden ? 'absolute' : undefined
  };
  var overflowProps = {};
  if (mergedHidden) {
    overflowProps['aria-hidden'] = true;
  }
  return /*#__PURE__*/_createElement(ItemWrap, _extends({
    ref: ref
  }, overflowProps, {
    style: _extends({}, overflowStyle, style)
  }), children);
});
//# sourceMappingURL=Tag.js.map