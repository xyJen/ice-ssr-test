import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _ClearIcon, _IconSelected, _DisableMask;
var _excluded = ["value", "defaultValue", "options", "onChange", "visible", "defaultVisible", "onVisibleChange", "disabled", "size", "getContainer", "placeholder", "error", "inputValue", "onInputValueChange", "renderTag", "renderTagMore", "children"];
import React, { useMemo, useCallback, useState, useLayoutEffect, useEffect, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ResizeObserver from 'resize-observer-polyfill';
import { Popover } from "../../display/popover";
import { useDefaultProp, mergeRestProps, proxyRestProps, KEY_CODES, useFocusTarget } from "../../common";
import { IconSelected, List } from "../../index";
import { flattenNested } from "../../basic/list/nested";
import { Input } from "../../form/input";
import { Tag, TagMore, Item } from "./Tag";
import { MultiSelectInputWrap, SuffixWrap, OverlayWrap, ErrorTip, DisableMask, OverflowWrap, ArrowDown, ArrowUp, ClearIcon } from "./styled";
var ITEM_WIDTH = 10; // 用来限制渲染的节点，避免性能问题
var MIN_INPUT_WIDTH = 40;
export var LEFT_PADDING = 4;
var DEFAULT_OPTISON = [];
export var MultiSelect = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var outValue = props.value,
    _props$defaultValue = props.defaultValue,
    defaultValue = _props$defaultValue === void 0 ? [] : _props$defaultValue,
    _props$options = props.options,
    options = _props$options === void 0 ? DEFAULT_OPTISON : _props$options,
    onChange = props.onChange,
    outVisible = props.visible,
    _props$defaultVisible = props.defaultVisible,
    defaultVisible = _props$defaultVisible === void 0 ? false : _props$defaultVisible,
    onVisibleChange = props.onVisibleChange,
    disabled = props.disabled,
    _props$size = props.size,
    size = _props$size === void 0 ? 'normal' : _props$size,
    getContainer = props.getContainer,
    placeholder = props.placeholder,
    error = props.error,
    outInputValue = props.inputValue,
    onInputValueChange = props.onInputValueChange,
    renderTag = props.renderTag,
    renderTagMore = props.renderTagMore,
    children = props.children,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var flattenOptions = useMemo(function () {
    return flattenNested(options, function (k) {
      return {
        key: k,
        title: k
      };
    });
  }, [options]);
  var _useDefaultProp = useDefaultProp(defaultValue, outValue, onChange),
    value = _useDefaultProp[0],
    setValue = _useDefaultProp[1];
  var _useDefaultProp2 = useDefaultProp(defaultVisible, outVisible, onVisibleChange),
    visible = _useDefaultProp2[0],
    setVisible = _useDefaultProp2[1];
  var _useDefaultProp3 = useDefaultProp('', outInputValue, onInputValueChange),
    inputValue = _useDefaultProp3[0],
    setInputValue = _useDefaultProp3[1];
  var _useState = useState(0),
    containerWidth = _useState[0],
    setContainerWidth = _useState[1];
  var _useState2 = useState(new Map()),
    itemWidths = _useState2[0],
    setItemWidths = _useState2[1];
  var _useState3 = useState(0),
    restWidth = _useState3[0],
    setRestWidth = _useState3[1];
  var _useState4 = useState(0),
    inputWidth = _useState4[0],
    setInputWidth = _useState4[1];
  var _useState5 = useState(0),
    displayCount = _useState5[0],
    setDisplayCount = _useState5[1];
  var _useState6 = useState(false),
    restReady = _useState6[0],
    setRestReady = _useState6[1];
  var myRef = useRef(null);
  var _useState7 = useState(false),
    mouseInInput = _useState7[0],
    setMouseInInput = _useState7[1];
  var _useState8 = useState(null),
    active = _useState8[0],
    setActive = _useState8[1];
  var outerRef = useRef(null);
  var _useFocusTarget = useFocusTarget(outerRef),
    focusTargetId = _useFocusTarget[0],
    focusTarget = _useFocusTarget[1],
    focusOwner = _useFocusTarget[2];
  var mergedDisplayCount = useMemo(function () {
    if (displayCount === null) {
      return Number.MAX_SAFE_INTEGER;
    }
    return displayCount || 0;
  }, [displayCount, containerWidth]);
  useEffect(function () {
    if (!myRef.current) {
      return;
    }
    var calcContainerWidth = function calcContainerWidth(entries) {
      var entry = entries[0];
      if (!entry) {
        return;
      }
      var width = entry.contentRect.width;
      if (width === 0) {
        return;
      }
      setContainerWidth(width);
    };
    var eleResizeObserver = new ResizeObserver(calcContainerWidth);
    eleResizeObserver.observe(myRef.current);
    return function () {
      eleResizeObserver.disconnect();
    };
  }, []);
  var registerSize = function registerSize(key, width) {
    setItemWidths(function (origin) {
      var clone = new Map(origin);
      if (width === null) {
        clone["delete"](key);
      } else {
        clone.set(key, width);
      }
      return clone;
    });
  };
  var registerTagMoreSize = function registerTagMoreSize(_, width) {
    setRestWidth(width);
  };
  var registerInputSize = function registerInputSize(_, width) {
    setInputWidth(width);
  };
  var updateDisplayCount = function updateDisplayCount(count, notReady) {
    setDisplayCount(count);
    if (!notReady) {
      setRestReady(count < value.length - 1);
    }
  };
  var displayOptions = useMemo(function () {
    return flattenOptions.filter(function (op) {
      return value.includes(op.key);
    }).map(function (op) {
      var _op$title;
      return 'title' in op ? {
        value: op.key,
        label: ((_op$title = op.title) == null ? void 0 : _op$title.toString()) || ''
      } : {
        value: op.key,
        label: op.key
      };
    });
  }, [options, value]);
  var mergedData = useMemo(function () {
    return displayOptions.slice(0, Math.min(value.length, containerWidth / ITEM_WIDTH));
  }, [displayOptions, containerWidth]);
  useLayoutEffect(function () {
    if (containerWidth && restWidth && mergedData) {
      var totalWidth = MIN_INPUT_WIDTH + LEFT_PADDING;
      var len = mergedData.length;
      var lastIndex = len - 1;
      if (!value.length) {
        updateDisplayCount(0);
        return;
      }
      for (var i = 0; i < len; i += 1) {
        var currentItemWidth = itemWidths.get(mergedData[i].value);

        // 如果数据没ready，break
        if (currentItemWidth === undefined) {
          updateDisplayCount(i - 1, true);
          break;
        }
        totalWidth += currentItemWidth;
        if (
        // 只有一个的话，totalWidth就是最后的宽度
        lastIndex === 0 && totalWidth <= containerWidth ||
        // 最后两个宽度将会是最后宽度
        i === lastIndex - 1 && totalWidth + itemWidths.get(mergedData[lastIndex].value) <= containerWidth) {
          updateDisplayCount(lastIndex);
          break;
        } else if (totalWidth + restWidth > containerWidth) {
          updateDisplayCount(i - 1);
          break;
        }
      }
    }
  }, [containerWidth, itemWidths, restWidth, inputWidth, mergedData]);
  var onOptionClick = useCallback(function (curKey) {
    var newValue = [].concat(value);
    var curKeyIndex = newValue.indexOf(curKey);
    if (curKeyIndex !== -1) {
      newValue.splice(curKeyIndex, 1);
    } else {
      newValue.push(curKey);
    }
    setValue(newValue);
  }, [value, setValue]);
  var updateValueByInputValue = useCallback(function () {
    if (!inputValue) {
      return;
    }
    var result1 = flattenOptions.find(function (op) {
      var _op$title2;
      return 'title' in op && !op.disabled && ((_op$title2 = op.title) == null ? void 0 : _op$title2.toString().includes(inputValue));
    });
    var result = result1 && 'title' in result1 ? result1.key : undefined;
    if (!result) {
      return;
    }
    var newValue = [].concat(value);
    var index = newValue.indexOf(result);
    if (index !== -1) {
      newValue.splice(index, 1);
    } else {
      newValue.push(result);
    }
    setInputValue('');
    setValue(newValue);
  }, [options, inputValue, value, setValue, setInputValue]);
  var handleEsc = useCallback(function () {
    focusOwner(function () {
      setActive(null);
      setVisible(false);
    });
  }, [setVisible]);
  var handleKeyDown = useCallback(function (e) {
    switch (e.which) {
      case KEY_CODES.DELETE:
      case KEY_CODES.BACKSPACE:
        if (inputValue === '' && value.length) {
          var newValue = [].concat(value);
          newValue.pop();
          setValue(newValue);
        }
        break;
      case KEY_CODES.ENTER:
        !visible && setVisible(true);
        updateValueByInputValue();
        e.nativeEvent.stopImmediatePropagation();
        break;
      case KEY_CODES.DOWN:
        if (active === null) {
          var fn = function fn() {
            setVisible(true);
            var firstKey = flattenOptions.filter(function (o) {
              return !('disabled' in o && !!o.disabled);
            })[0].key;
            if (firstKey) {
              setActive(firstKey);
            }
          };
          focusTarget(fn);
        }
        break;
      case KEY_CODES.ESC:
        handleEsc();
        break;
      default:
        break;
    }
  }, [updateValueByInputValue, value, inputValue, setValue, active, setVisible, options, handleEsc]);
  var handleInputValueChange = useCallback(function (e) {
    setInputValue(e.target.value);
  }, [setInputValue]);
  var onTagClose = useCallback(function (e, key) {
    e.stopPropagation();
    e.nativeEvent.stopImmediatePropagation();
    var newValue = [].concat(value);
    var index = newValue.indexOf(key);
    if (index !== -1) {
      newValue.splice(index, 1);
    }
    setValue(newValue);
  }, [value, setValue]);
  var onArrowClick = useCallback(function (e) {
    // TODO: 点击箭头收起下拉菜单
    // TODO: (依赖menu) 自定义节点内容时的hover样式、点击自定义节点将所选项、key放到div和input
    // if (visible) {
    // ref?.current?.blur();
    // }
  }, [visible]);
  var onMouseEnter = useCallback(function (e) {
    !disabled && setMouseInInput(true);
  }, [disabled]);
  var onMouseLeave = useCallback(function (e) {
    setMouseInInput(false);
  }, []);
  var handleClear = useCallback(function (e) {
    // TODO: 如果选项有closable为false的，怎么处理
    e.stopPropagation();
    e.nativeEvent.stopImmediatePropagation();
    setValue([]);
    setInputValue('');
  }, [setValue, setInputValue]);
  var tagsNode;
  var restNode;
  if (value.length) {
    tagsNode = mergedData.map(function (item, index) {
      return /*#__PURE__*/_createElement(Item, {
        key: item.value,
        order: index,
        itemKey: item.value,
        registerSize: registerSize,
        display: index <= mergedDisplayCount
      }, /*#__PURE__*/_createElement(Tag, {
        value: item.value,
        label: item.label,
        closable: true,
        size: size,
        onClose: function onClose(e) {
          return onTagClose(e, item.value);
        }
      }));
    });
    var omittedOptions = displayOptions.slice(mergedDisplayCount + 1);
    var displayRest = restReady && !!omittedOptions.length;
    restNode = /*#__PURE__*/_createElement(Item, {
      order: displayRest ? mergedDisplayCount : Number.MAX_SAFE_INTEGER,
      registerSize: registerTagMoreSize,
      display: displayRest
    }, /*#__PURE__*/_createElement(TagMore, {
      omittedTags: omittedOptions,
      size: size
    }));
  }
  var suffixNode = /*#__PURE__*/_createElement(SuffixWrap, {
    onClick: onArrowClick
  }, !disabled && visible ? /*#__PURE__*/_createElement(ArrowUp, {
    disabled: disabled
  }) : /*#__PURE__*/_createElement(ArrowDown, {
    disabled: disabled
  }));
  if (value.length && mouseInInput) {
    suffixNode = /*#__PURE__*/_createElement(SuffixWrap, {
      onClick: handleClear
    }, _ClearIcon || (_ClearIcon = /*#__PURE__*/_createElement(ClearIcon, null)));
  }
  return /*#__PURE__*/_createElement(Popover, {
    placement: "bottomLeft",
    placementOffset: [4, 0],
    animation: true,
    content: /*#__PURE__*/_createElement(OverlayWrap, {
      style: {
        minWidth: containerWidth
      }
    }, /*#__PURE__*/_createElement(List, _extends({
      id: focusTargetId,
      items: options,
      onSelect: onOptionClick,
      active: active,
      onActiveChange: function onActiveChange(e) {
        setActive(e);
      },
      renderItem: function renderItem(_ref) {
        var key = _ref.key;
        return function (p) {
          return value.includes(key) ? /*#__PURE__*/React.cloneElement(p, {
            suffix: _IconSelected || (_IconSelected = /*#__PURE__*/_createElement(IconSelected, null))
          }) : p;
        };
      },
      style: {
        minWidth: 'auto'
      }
    }, proxyRestProps(rest, 'list')))),
    visible: !disabled && visible,
    trigger: "click",
    onVisibleChange: function onVisibleChange(e) {
      if (e) {
        !visible && setVisible(e);
      } else {
        visible && setVisible(e);
        setActive(null);
      }
    },
    getContainer: getContainer || function () {
      return outerRef.current || document.body;
    },
    onKeyDown: function onKeyDown(e) {
      e.which === KEY_CODES.ESC && handleEsc();
    }
  }, /*#__PURE__*/_createElement(MultiSelectInputWrap, _extends({
    tabIndex: -1,
    ref: outerRef,
    onKeyDown: handleKeyDown,
    error: error,
    disabled: disabled,
    size: size,
    visible: !disabled && visible,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, mergeRestProps(rest, 'wdn-multi-select')), /*#__PURE__*/_createElement(OverflowWrap, {
    ref: myRef
  }, tagsNode, restNode, /*#__PURE__*/_createElement(Item, {
    order: mergedDisplayCount,
    registerSize: registerInputSize,
    display: true,
    style: {
      flexGrow: 1
    }
  }, /*#__PURE__*/_createElement(Input, {
    ref: ref,
    className: "input",
    bordered: false,
    size: size,
    value: inputValue,
    disabled: !!disabled,
    placeholder: !value.length ? placeholder : undefined,
    onBlur: updateValueByInputValue,
    onChange: handleInputValueChange,
    suffix: suffixNode
  }))), disabled && (_DisableMask || (_DisableMask = /*#__PURE__*/_createElement(DisableMask, null))), error && /*#__PURE__*/_createElement(ErrorTip, null, error)));
}));
//# sourceMappingURL=MultiSelect.js.map