import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["defaultChecked", "checked", "onChange", "size", "disabled"];
/* eslint-disable no-param-reassign */
import React, { memo, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SwitchButton, SwitchInner } from "./styled";
import { KEY_CODES } from "../../common/consts";
import { mergeRestProps } from "../../common";
import { useDefaultProp } from "../../common/react/useDefaultProp";
var Switch = /*#__PURE__*/memo(function (props) {
  var defaultChecked = props.defaultChecked,
    checked = props.checked,
    onChange = props.onChange,
    _props$size = props.size,
    size = _props$size === void 0 ? 'normal' : _props$size,
    disabled = props.disabled,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useDefaultProp = useDefaultProp(defaultChecked || false, checked, onChange),
    ck = _useDefaultProp[0],
    setCk = _useDefaultProp[1];
  var onKeyDown = useCallback(function (e) {
    if (e.keyCode === KEY_CODES.LEFT) {
      setCk(false);
    } else if (e.keyCode === KEY_CODES.RIGHT) {
      setCk(true);
    }
  }, [setCk]);
  return /*#__PURE__*/_createElement(SwitchButton, _extends({
    checked: ck,
    size: size,
    onClick: function onClick() {
      return setCk(!ck);
    },
    onKeyDown: onKeyDown,
    disabled: disabled
  }, mergeRestProps(rest, 'wdn-switch')), /*#__PURE__*/_createElement(SwitchInner, {
    size: size,
    checked: ck
  }));
});
export { Switch };
//# sourceMappingURL=Switch.js.map