import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["color", "active", "mode"];
import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import tinycolor from 'tinycolor2';
import { COLORS } from "../../common";
import { ColorSquareWrap, NullColorSquareWrap, ColorTextA } from "./styled";
import { mergeRestProps } from "../../common/react/mergeRestProps";
import { isWhite } from "./isWhite";

/**
 * 获取对比色，即：色块选中时打勾的颜色，要和色块本身的背景色形成反差
 */
var getContrastingColor = function getContrastingColor(color) {
  // 颜色对象（包含多种颜色空间的类型）

  if (!color) {
    return COLORS.WHITE;
  }
  var toColorObj = function toColorObj(colorStr, oldHue) {
    var tinyColor = tinycolor(colorStr);
    var hsl = tinyColor.toHsl();
    var hsv = tinyColor.toHsv();
    var rgb = tinyColor.toRgb();
    var hex = tinyColor.toHex();
    if (hsl.s === 0) {
      hsl.h = oldHue || 0;
      hsv.h = oldHue || 0;
    }
    var transparent = hex === '000000' && rgb.a === 0;
    return {
      hsl: hsl,
      hex: transparent ? 'transparent' : "#" + hex,
      rgb: rgb,
      hsv: hsv,
      source: colorStr
    };
  };
  var colorObj = toColorObj(color);
  if (colorObj.hex === 'transparent') {
    return 'rgba(0,0,0,0.4)';
  } else {
    var yiq = (colorObj.rgb.r * 299 + colorObj.rgb.g * 587 + colorObj.rgb.b * 114) / 1000;
    return yiq >= 210 ? '#8C8C8C' : COLORS.WHITE;
  }
};
export var ColorSquare = /*#__PURE__*/React.memo(function (props) {
  var color = props.color,
    active = props.active,
    _props$mode = props.mode,
    mode = _props$mode === void 0 ? 'text' : _props$mode,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  if (color === null) {
    return /*#__PURE__*/_createElement(NullColorSquareWrap, mergeRestProps(rest, 'wdn-color-square', {
      background: COLORS.WHITE
    }));
  } else {
    var textAColor = useMemo(function () {
      return getContrastingColor(color);
    }, [color]);
    return /*#__PURE__*/_createElement(ColorSquareWrap, _extends({
      color: color,
      alwaysShowBorder: isWhite(color)
    }, mergeRestProps(rest, 'wdn-color-square', {
      background: color
    })), active ? /*#__PURE__*/_createElement("svg", {
      width: "14",
      height: "10",
      viewBox: "0 0 16 12",
      fill: "none"
    }, /*#__PURE__*/_createElement("path", {
      d: "M13.965 2.15533L5.63499 10.485L1.46999 6.32034",
      stroke: textAColor,
      strokeOpacity: "0.6",
      strokeWidth: "2.38",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })) : mode === 'text' ? /*#__PURE__*/_createElement(ColorTextA, {
      className: "_wdn-color-picker-text-a",
      style: {
        color: textAColor
      }
    }, "A") : null);
  }
});
//# sourceMappingURL=ColorSquare.js.map