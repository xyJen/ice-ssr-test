import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _Divider, _Divider2, _ArrowRight;
var _excluded = ["color", "defaultColor", "onColorChange", "currentPreset", "onCurrentPresetChange", "autoColor", "recentColors", "advance", "hoverMode", "presets"];
import React, { isValidElement, useState, useMemo, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { mergeRestProps, useDefaultProp, COLORS } from "../../common";
import { useTranslate } from "../../locale";
import { DEFAULT, ART } from "./presets";
import { Text } from "../../basic/text";
import { Select } from "../select";
import { ColorSquare } from "./ColorSquare";
import { Popover } from "../../display/popover";
import { ColorPickerWrapper, HeaderGroup, AutoColorWrapper, NoColorWrapper, Row, Divider, AdvanceGroup, Group, RecentGroup, SketchPickerWrap, ArrowRight } from "./styled";
import { ColorPickerSketch } from "./ColorPickerSketch";
var PRESETS = [DEFAULT, ART];
var PRESET_KEY = 'wdn_color_picker_';
var PRESET_TITLE = function PRESET_TITLE(title, t) {
  return title.startsWith(PRESET_KEY) ? t(title) : title;
};
export var ColorPicker = /*#__PURE__*/React.memo(function (props) {
  var color = props.color,
    defaultColor = props.defaultColor,
    onColorChange = props.onColorChange,
    _currentPreset = props.currentPreset,
    _onCurrentPresetChange = props.onCurrentPresetChange,
    autoColor = props.autoColor,
    recentColors = props.recentColors,
    advance = props.advance,
    _props$hoverMode = props.hoverMode,
    hoverMode = _props$hoverMode === void 0 ? 'square' : _props$hoverMode,
    _props$presets = props.presets,
    _presets = _props$presets === void 0 ? PRESETS : _props$presets,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useDefaultProp = useDefaultProp(defaultColor, color, onColorChange),
    value = _useDefaultProp[0],
    setValue = _useDefaultProp[1];
  var _useState = useState(false),
    advancePickerVisible = _useState[0],
    setAdvancePickerVisible = _useState[1];
  var t = useTranslate();
  var presets = useMemo(function () {
    return _presets.map(function (p) {
      return _extends({}, p, {
        title: PRESET_TITLE(p.title, t)
      });
    });
  }, [_presets, t]);
  var _useDefaultProp2 = useDefaultProp(presets[0].key, _currentPreset, _onCurrentPresetChange),
    currentPreset = _useDefaultProp2[0],
    setCurrentPreset = _useDefaultProp2[1];
  var ref = useRef(null);
  var advanceGroupRef = useRef(null);
  return /*#__PURE__*/_createElement(ColorPickerWrapper, _extends({
    ref: ref
  }, mergeRestProps(rest, 'wdn-color-picker')), /*#__PURE__*/_createElement(HeaderGroup, null, autoColor ? /*#__PURE__*/_createElement(AutoColorWrapper, null, /*#__PURE__*/_createElement(ColorSquare, {
    color: autoColor,
    active: value === autoColor,
    onClick: function onClick() {
      return setValue(autoColor, {
        fromSketch: false,
        intermediate: false
      });
    },
    mode: hoverMode
  }), /*#__PURE__*/_createElement(Text, {
    style: {
      marginLeft: 4,
      flexGrow: 1
    },
    onClick: function onClick() {
      return setValue(autoColor, {
        fromSketch: false,
        intermediate: false
      });
    }
  }, t('wdn_color_picker_auto_color'))) : /*#__PURE__*/_createElement(NoColorWrapper, null, /*#__PURE__*/_createElement(ColorSquare, {
    color: null,
    active: value === null,
    onClick: function onClick() {
      return setValue(undefined, {
        fromSketch: false,
        intermediate: false
      });
    },
    mode: 'square'
  }), /*#__PURE__*/_createElement(Text, {
    style: {
      marginLeft: 4,
      flexGrow: 1
    },
    onClick: function onClick() {
      return setValue(undefined, {
        fromSketch: false,
        intermediate: false
      });
    }
  }, t('wdn_color_picker_no_color'))), presets.length > 1 ? /*#__PURE__*/_createElement(Select, {
    size: "small",
    bordered: false,
    options: presets.map(function (p) {
      return {
        key: p.key,
        title: p.title
      };
    }),
    value: currentPreset,
    onChange: setCurrentPreset,
    getContainer: function getContainer() {
      return ref.current || document.body;
    }
  }) : null), /*#__PURE__*/_createElement(Group, null, (presets.find(function (p) {
    return p.key === currentPreset;
  }) || presets[0]).colors.map(function (colors, i) {
    return /*#__PURE__*/isValidElement(colors) ? colors : /*#__PURE__*/_createElement(Row, {
      key: colors[0] + "-" + i
    }, colors.map(function (color, j) {
      return /*#__PURE__*/_createElement(ColorSquare, {
        key: color + "-" + j,
        color: color,
        active: color === value,
        onClick: function onClick() {
          setValue(color, {
            fromSketch: false,
            intermediate: false
          });
        },
        mode: hoverMode
      });
    }));
  })), recentColors && recentColors.length > 0 ? /*#__PURE__*/_createElement(React.Fragment, null, _Divider || (_Divider = /*#__PURE__*/_createElement(Divider, null)), /*#__PURE__*/_createElement(RecentGroup, null, /*#__PURE__*/_createElement(Text, {
    style: {
      color: COLORS.LIGHT.LEVEL2_BASE_COLOR,
      marginBottom: 4
    }
  }, t('wdn_color_picker_recent_colors')), /*#__PURE__*/_createElement(Row, null, recentColors.map(function (color, j) {
    return /*#__PURE__*/_createElement(ColorSquare, {
      key: color + "-" + j,
      color: color,
      active: color === value,
      onClick: function onClick() {
        setValue(color, {
          fromSketch: false,
          intermediate: false
        });
      },
      mode: hoverMode
    });
  })))) : null, advance ? /*#__PURE__*/_createElement(React.Fragment, null, _Divider2 || (_Divider2 = /*#__PURE__*/_createElement(Divider, null)), /*#__PURE__*/_createElement(Popover, {
    placement: "rightBottom",
    placementOffset: [12, -6],
    trigger: "mouse-enter",
    visible: advancePickerVisible,
    onVisibleChange: setAdvancePickerVisible,
    animation: true,
    getContainer: function getContainer() {
      return advanceGroupRef.current || document.body;
    },
    content: /*#__PURE__*/_createElement(SketchPickerWrap, null, /*#__PURE__*/_createElement(ColorPickerSketch, {
      color: value || COLORS.WHITE,
      onChange: function onChange(e) {
        return setValue(e, {
          fromSketch: true,
          intermediate: true
        });
      },
      onChangeComplete: function onChangeComplete(e) {
        return setValue(e, {
          fromSketch: true,
          intermediate: false
        });
      }
    }))
  }, /*#__PURE__*/_createElement(AdvanceGroup, {
    style: {
      background: advancePickerVisible ? COLORS.OTHERS.DAO_HOVER_BG_COLOR : undefined
    },
    ref: advanceGroupRef
  }, iconAdvanceColorPicker, /*#__PURE__*/_createElement(Text, {
    style: {
      marginLeft: 8,
      flexGrow: 1
    }
  }, t('wdn_color_picker_more_colors')), _ArrowRight || (_ArrowRight = /*#__PURE__*/_createElement(ArrowRight, null))))) : null);
});
var iconAdvanceColorPicker = /*#__PURE__*/_createElement("svg", {
  width: "20",
  height: "20",
  viewBox: "0 0 1024 1024"
}, /*#__PURE__*/_createElement("path", {
  d: "M512 512m-448 0a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z",
  fill: "#FDD66F"
}), /*#__PURE__*/_createElement("path", {
  d: "M512 64v448L96.106667 345.173333C162.261333 180.352 323.541333 64 512 64z",
  fill: "#FB9855"
}), /*#__PURE__*/_createElement("path", {
  d: "M512 512l283.52 346.901333A446.144 446.144 0 0 1 512 960a445.952 445.952 0 0 1-259.498667-82.773333L512 512z",
  fill: "#4897DA"
}), /*#__PURE__*/_createElement("path", {
  d: "M101.162667 333.077333L512 510.250667 259.52 882.133333C141.482667 801.450667 64 665.770667 64 512c0-63.616 13.248-124.117333 37.162667-178.922667z",
  fill: "#DA625A"
}), /*#__PURE__*/_createElement("path", {
  d: "M922.837333 333.077333A446.506667 446.506667 0 0 1 960 512c0 153.770667-77.482667 289.450667-195.52 370.133333L512 510.250667z",
  fill: "#69B763"
}));
//# sourceMappingURL=ColorPicker.js.map