var _span;
import React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { debounce } from 'lodash-es';
import ResizeObserver from 'resize-observer-polyfill';
import { useEventCallback } from "../../common";
import { Breadcrumb } from "./Breadcrumb";
import { BreadcrumbContext, SingleLineRowContext } from "./contexts";
import { Container } from "./styles";
// .../ 的 path
var ELLIPSISPATH = '';
// .../ 的 name
var ELLIPSISNAME = '...';
export var BreadcrumbLayout = /*#__PURE__*/memo(function (props) {
  var routes = props.routes,
    onClick = props.onClick,
    renderFileName = props.renderFilename,
    _props$width = props.width,
    containerWidth = _props$width === void 0 ? -1 : _props$width,
    _props$maxWidth = props.maxWidth,
    maxWidth = _props$maxWidth === void 0 ? -1 : _props$maxWidth;
  // 组件 测量 ref
  var ref = useRef(null);
  // ../ 测量 ref
  var liRef = useRef(null);
  // 分隔符测量 ref
  var spanRef = useRef(null);
  // 响应式节点
  var _useState = useState(routes),
    singleLineRoutes = _useState[0],
    setsingleLineRoutes = _useState[1];
  // mirror 上节点的 refs
  var _useState2 = useState({}),
    references = _useState2[0];
  // 计算需要 ellipsis 节点的宽度
  var _useState3 = useState(-1),
    ellipsisBreadCrumbMaxWidth = _useState3[0],
    setEllipsisBreadCrumbMaxWidth = _useState3[1];
  // 计算需要 ellipsis 节点的位置 
  var _useState4 = useState(-1),
    ellipsisBreadCrumbIndex = _useState4[0],
    setEllipsisBreadCrumbIndex = _useState4[1];
  var onResize = useEventCallback(function () {
    if (ref != null && ref.current && Object.keys(references).length >= routes.length && liRef != null && liRef.current && spanRef != null && spanRef.current && containerWidth !== -1) {
      var _liRef$current$getBou, _spanRef$current$getB, _references$current, _references$current$g, _references$0$current, _references$0$current2;
      // .../ 的宽度
      var ELLIPSISWIDTH = (_liRef$current$getBou = liRef.current.getBoundingClientRect()) == null ? void 0 : _liRef$current$getBou.width;
      // separator 的宽度
      var SEPARATORWIDTH = (_spanRef$current$getB = spanRef.current.getBoundingClientRect()) == null ? void 0 : _spanRef$current$getB.width;
      // 节点由 ellipsis 变为收起的临界点
      var ELLIPSISMINWIDTH = SEPARATORWIDTH + 10;
      var width = Math.ceil(ref.current.getBoundingClientRect().width) - 1;
      // mirror 最右边的节点
      var lastItemWidth = (_references$current = references[routes.length - 1].current) == null ? void 0 : (_references$current$g = _references$current.getBoundingClientRect()) == null ? void 0 : _references$current$g.width;
      // mirror 最左边的节点
      var firstItemWidth = (_references$0$current = references[0].current) == null ? void 0 : (_references$0$current2 = _references$0$current.getBoundingClientRect()) == null ? void 0 : _references$0$current2.width;
      // mirror 宽度
      var totalWidth = Math.ceil(Object.keys(references).reduce(function (pre, cur) {
        var _references$Number, _references$Number2, _references$Number2$c, _references$Number2$c2;
        return (_references$Number = references[Number(cur)]) != null && _references$Number.current ? pre + ((_references$Number2 = references[Number(cur)]) == null ? void 0 : (_references$Number2$c = _references$Number2.current) == null ? void 0 : (_references$Number2$c2 = _references$Number2$c.getBoundingClientRect()) == null ? void 0 : _references$Number2$c2.width) : pre;
      }, -1));

      // lastBreadcrumb...
      if (routes.length === 1) {
        setEllipsisBreadCrumbIndex(0);
        setEllipsisBreadCrumbMaxWidth(Math.floor(width));
        return setsingleLineRoutes(routes);
      }
      // ... / lastBreadcrumb
      if (Math.floor(lastItemWidth + ELLIPSISWIDTH + ELLIPSISMINWIDTH) >= width) {
        setEllipsisBreadCrumbIndex(1);
        setEllipsisBreadCrumbMaxWidth(width - Math.floor(ELLIPSISWIDTH));
        return setsingleLineRoutes([{
          path: ELLIPSISPATH,
          name: ELLIPSISNAME,
          children: routes.slice(0, -1)
        }].concat(routes.slice(-1)));
      }
      // firstBreadcrumb... / lastBreadcrumb
      if (routes.length === 2) {
        setEllipsisBreadCrumbIndex(0);
        setEllipsisBreadCrumbMaxWidth(width - Math.floor(lastItemWidth + SEPARATORWIDTH));
        return setsingleLineRoutes(routes);
      }
      // firstBreadcrumb / ... / lastBreadcrumb
      if (Math.floor(firstItemWidth + lastItemWidth + ELLIPSISWIDTH + ELLIPSISMINWIDTH) >= width) {
        setEllipsisBreadCrumbIndex(0);
        setEllipsisBreadCrumbMaxWidth(width - Math.floor(lastItemWidth + ELLIPSISWIDTH + SEPARATORWIDTH));
        return setsingleLineRoutes([].concat(routes.slice(0, 1), [{
          path: ELLIPSISPATH,
          name: ELLIPSISNAME,
          children: routes.slice(1, -1)
        }], routes.slice(-1)));
      }

      // firstBreadcrumb / ellipsisBreadcrumb... / lastBreadcrumb 
      if (width < totalWidth && routes.length >= 3) {
        var _references$1$current, _references$1$current2;
        var secontItemWidth = Math.floor((_references$1$current = references[1].current) == null ? void 0 : (_references$1$current2 = _references$1$current.getBoundingClientRect()) == null ? void 0 : _references$1$current2.width);
        if (totalWidth - secontItemWidth + ELLIPSISMINWIDTH <= width) {
          var _references$, _references$$current, _references$$current$;
          setEllipsisBreadCrumbIndex(1);
          setEllipsisBreadCrumbMaxWidth(width - totalWidth + Math.floor(((_references$ = references[1]) == null ? void 0 : (_references$$current = _references$.current) == null ? void 0 : (_references$$current$ = _references$$current.getBoundingClientRect()) == null ? void 0 : _references$$current$.width) - SEPARATORWIDTH));
          return routes;
        }
      }
      // firstBreadcrumb / ... / ellipsisBreadcrumb... / lastBreadcrumb
      if (width < totalWidth && routes.length > 3) {
        var _references$ellipsisI4, _references$ellipsisI5, _references$ellipsisI6;
        // routes 掐头去尾累加宽度，找到 ellipsisBreadcrumb
        var _Object$keys$slice$re = Object.keys(references).slice(1, routes.length - 1).reduceRight(function (pre, _, index) {
            var _references, _references$current2, _references$current2$;
            if (pre.width > width) {
              return pre;
            }
            // 从右向左累加下一个 breadcrumb + separator
            var curWidth = pre.width + ((_references = references[index + 1]) == null ? void 0 : (_references$current2 = _references.current) == null ? void 0 : (_references$current2$ = _references$current2.getBoundingClientRect()) == null ? void 0 : _references$current2$.width);
            // 从右向左累加从 ellipsis 到 ... 里面时的临界值 
            var curEllipisisWidth = pre.width + ELLIPSISMINWIDTH;
            // index + 1 所在的位置为 ellipsisBreadcrumb
            if (curEllipisisWidth <= width && curWidth > width) {
              return {
                width: curWidth,
                index: index + 1
              };
            }
            // index + 2 所在的位置为 ellipsisBreadcrumb 
            if (curEllipisisWidth > width && curWidth > width) {
              return {
                width: width + 1,
                index: index + 2
              };
            }
            return {
              width: curWidth,
              index: index
            };
          }, {
            // 初始值为 firstBreadcrumb / ... / lastBreadcrumb 宽度之和
            width: firstItemWidth + lastItemWidth + ELLIPSISWIDTH,
            index: -1
          }),
          ellipsisWidth = _Object$keys$slice$re.width,
          ellipsisIndex = _Object$keys$slice$re.index;

        // firstBreadcrumb / ellipsisBreadcrumb... / lastBreadcrumb 
        if (ellipsisIndex === 1) {
          var _references$ellipsisI, _references$ellipsisI2, _references$ellipsisI3;
          setEllipsisBreadCrumbIndex(1);
          setEllipsisBreadCrumbMaxWidth(width - totalWidth + Math.floor(((_references$ellipsisI = references[ellipsisIndex]) == null ? void 0 : (_references$ellipsisI2 = _references$ellipsisI.current) == null ? void 0 : (_references$ellipsisI3 = _references$ellipsisI2.getBoundingClientRect()) == null ? void 0 : _references$ellipsisI3.width) - SEPARATORWIDTH + ELLIPSISWIDTH));
          return routes;
        }
        setEllipsisBreadCrumbIndex(2);
        // 总宽度 - 不包含 ellipsisBreadcrumb 总宽度 - 分割线宽度 = ellipsisBreadcrumb 能显示的最大宽度 
        setEllipsisBreadCrumbMaxWidth(width - Math.floor(ellipsisWidth - ((_references$ellipsisI4 = references[ellipsisIndex]) == null ? void 0 : (_references$ellipsisI5 = _references$ellipsisI4.current) == null ? void 0 : (_references$ellipsisI6 = _references$ellipsisI5.getBoundingClientRect()) == null ? void 0 : _references$ellipsisI6.width) + SEPARATORWIDTH));
        return setsingleLineRoutes([].concat(routes.slice(0, 1), [{
          path: ELLIPSISPATH,
          name: ELLIPSISNAME,
          children: routes.slice(1, ellipsisIndex)
        }], routes.slice(ellipsisIndex)));
      }
      // default
      setEllipsisBreadCrumbIndex(-1);
      setsingleLineRoutes(routes);
    }
  });
  var throttledOnResize = useMemo(function () {
    return debounce(onResize, 550);
  }, [onResize]);

  // routes 更新时 resize
  useEffect(function () {
    setsingleLineRoutes(routes);
  }, [routes]);

  // 没有 width 时 resize
  useEffect(function () {
    if (containerWidth === -1) {
      setEllipsisBreadCrumbIndex(-1);
      setsingleLineRoutes(routes);
    }
  }, [routes, containerWidth]);
  useEffect(function () {
    if (ref.current) {
      var obs = new ResizeObserver(throttledOnResize);
      obs.observe(ref.current);
      return function () {
        obs.disconnect();
      };
    }
  }, [routes]);

  // mirror 测量 ref
  var getOrCreateRef = useCallback(function (id, ref) {
    references[id] = ref;
  }, []);
  return /*#__PURE__*/_createElement(BreadcrumbContext.Provider, {
    value: {
      mode: 'singleLine'
    }
  }, /*#__PURE__*/_createElement(Container, null, /*#__PURE__*/_createElement(SingleLineRowContext.Provider, {
    value: {
      isSingleLine: false
    }
  }, /*#__PURE__*/_createElement("div", {
    className: "mirror-breadcrumb"
  }, /*#__PURE__*/_createElement(Breadcrumb, {
    routes: routes,
    renderLastItem: renderFileName,
    getOrCreateRef: getOrCreateRef
  }), /*#__PURE__*/_createElement("ol", null, /*#__PURE__*/_createElement("li", {
    ref: liRef
  }, _span || (_span = /*#__PURE__*/_createElement("span", {
    className: "mirror-link"
  }, ELLIPSISNAME)), /*#__PURE__*/_createElement("span", {
    className: "mirror-separator",
    ref: spanRef,
    style: {
      padding: 4
    }
  }, "/"))))), /*#__PURE__*/_createElement(SingleLineRowContext.Provider, {
    value: {
      isSingleLine: true,
      ellipisisIndex: ellipsisBreadCrumbIndex,
      ellipisisWidth: ellipsisBreadCrumbMaxWidth
    }
  }, /*#__PURE__*/_createElement("div", {
    className: "single-line-breadcrumb",
    ref: ref,
    style: {
      width: containerWidth === -1 ? '100%' : containerWidth,
      maxWidth: maxWidth
    }
  }, /*#__PURE__*/_createElement(Breadcrumb, {
    routes: singleLineRoutes,
    renderLastItem: renderFileName,
    onBreadcrumbItemClick: onClick
  })))));
});
//# sourceMappingURL=BreadcrumbLayout.js.map