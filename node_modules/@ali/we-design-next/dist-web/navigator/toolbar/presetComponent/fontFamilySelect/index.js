import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["value", "onChange", "overlayVisible", "onVisibleChange", "downloadFontInfos", "handleDownload", "enableUnSupportFont"];
import React, { useMemo, useState, useCallback, useLayoutEffect, useRef, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TBTextSelect } from "../../baseItem/textSelect";
import { Select } from "../../../../form/select";
import { Tooltip } from "../../../../display/tooltip/Tooltip";
import { getFontFamily, fontFamilies } from "./getFontFamily";
import { useTranslate } from "../../../../locale";
import { useDefaultProp } from "../../../../common";
import { FontDetector } from "./FontDetector";
import { DownloadButton } from "./DownloadButton";
var fontSet = new Set(fontFamilies);
var getFontDetector = function () {
  var fontDetectorMap = new Map();
  return function (fonts) {
    if (fonts === void 0) {
      fonts = fontFamilies;
    }
    var fontDetector = fontDetectorMap.get(fonts);
    if (fontDetector) {
      return fontDetector;
    }
    if (typeof fonts === 'string') {}
    fontDetector = new FontDetector(typeof fonts === 'string' ? [fonts] : fonts);
    return fontDetector;
  };
}();
var useFontFamily = function useFontFamily(t) {
  // 字体列表选项
  var options = useMemo(function () {
    var fontFamilies = getFontFamily(function (s) {
      return t(s);
    });
    return fontFamilies;
  }, [t]);
  return options;
};
var temp = {};
export var TBFontFamilySelect = /*#__PURE__*/React.memo(function (props) {
  var value_ = props.value,
    onChange_ = props.onChange,
    overlayVisible_ = props.overlayVisible,
    onVisibleChange_ = props.onVisibleChange,
    _props$downloadFontIn = props.downloadFontInfos,
    downloadFontInfos = _props$downloadFontIn === void 0 ? temp : _props$downloadFontIn,
    handleDownload = props.handleDownload,
    _props$enableUnSuppor = props.enableUnSupportFont,
    enableUnSupportFont = _props$enableUnSuppor === void 0 ? true : _props$enableUnSuppor,
    restProps = _objectWithoutPropertiesLoose(props, _excluded);
  var t = useTranslate();
  var _useDefaultProp = useDefaultProp('default', value_, onChange_),
    value = _useDefaultProp[0],
    setValue = _useDefaultProp[1];
  var _useDefaultProp2 = useDefaultProp(false, overlayVisible_, onVisibleChange_),
    overlayVisible = _useDefaultProp2[0],
    onVisibleChange = _useDefaultProp2[1];
  var _useState = useState({
      "default": true
    }),
    installedRecord = _useState[0],
    setInstalledRecord = _useState[1];
  // font detected
  var fontDetectedRef = useRef({
    fontDetected: false,
    installedRecord: installedRecord
  });
  fontDetectedRef.current.installedRecord = installedRecord;

  // @ts-ignore
  var fontFamiliesInfo = useFontFamily(t);
  var options = useMemo(function () {
    var res = [];
    fontFamiliesInfo.forEach(function (t) {
      if (installedRecord[t.value] || t.installable) {
        var _downloadFontInfos$t$;
        res.push({
          key: t.value,
          title: t.title,
          disabled: !installedRecord[t.value] && ((_downloadFontInfos$t$ = downloadFontInfos[t.value]) == null ? void 0 : _downloadFontInfos$t$.status) !== 'downloaded'
        });
      }
    });
    return res;
  }, [fontFamilies, installedRecord, downloadFontInfos]);

  // 单测环境下这里需要依赖浏览器 API 获取已安装字体然后显示，所以只有那些可安装的字体会显示。
  // 这里即使字体不可安装，也应该显示出来，作为列表一项
  var extendOptions = !enableUnSupportFont || options.some(function (opt) {
    return opt.key === value;
  }) ? options : [].concat(options, [{
    key: value,
    title: value,
    disabled: true
  }]);
  var detectFont = useCallback(function (font) {
    if (fontDetectedRef.current.fontDetected) {
      return;
    }
    if (font && !fontDetectedRef.current.installedRecord[font]) {
      getFontDetector(font).detect().then(function (_ref) {
        var _extends2;
        var hasFont = _ref[0];
        var newInstalledRecord = fontDetectedRef.current.installedRecord;
        setInstalledRecord(_extends({}, newInstalledRecord, (_extends2 = {}, _extends2[font] = hasFont, _extends2)));
      });
      return;
    }
    getFontDetector().detect().then(function (results) {
      var newInstalledRecord = {};
      results.forEach(function (result, index) {
        if (index !== 0) {
          newInstalledRecord[fontFamilies[index]] = result;
        }
      });
      newInstalledRecord["default"] = true;
      setInstalledRecord(newInstalledRecord);
      fontDetectedRef.current.fontDetected = true;
    });
  }, []);
  useEffect(function () {
    if (fontDetectedRef.current.fontDetected) {
      return;
    }
    if (value !== 'default') {
      detectFont(value);
    }
  }, [value]);
  useLayoutEffect(function () {
    if (overlayVisible) {
      detectFont();
    }
  }, [overlayVisible]);
  var renderOption = useCallback(function (_ref2) {
    var key = _ref2.key;
    var _ref3 = extendOptions.find(function (o) {
        return o.key === key;
      }) || {
        title: ''
      },
      title = _ref3.title,
      disabled = _ref3.disabled,
      family = _ref3.key;
    if (handleDownload && disabled && downloadFontInfos[key]) {
      return /*#__PURE__*/_createElement(Select.Option, {
        key: key,
        children: /*#__PURE__*/_createElement("div", {
          style: {
            display: 'flex',
            justifyContent: 'space-between'
          }
        }, /*#__PURE__*/_createElement(Tooltip, {
          title: t('wdn_font_UninstallFonts'),
          placement: "top"
        }, /*#__PURE__*/_createElement("div", null, title)), /*#__PURE__*/_createElement(DownloadButton, {
          handleDownload: handleDownload,
          status: downloadFontInfos[key].status,
          fontFamily: key
        }))
      });
    }
    var titleNode = /*#__PURE__*/_createElement("div", {
      style: disabled ? undefined : {
        fontFamily: family
      }
    }, title);
    return /*#__PURE__*/_createElement(Select.Option, {
      key: key,
      children: disabled ? /*#__PURE__*/_createElement(Tooltip, {
        title: t('wdn_font_UninstallFonts'),
        placement: "top"
      }, titleNode) : titleNode
    });
  }, [installedRecord, handleDownload, downloadFontInfos]);
  var fontValue = value;
  if (!enableUnSupportFont) {
    fontValue = fontSet.has(value) ? value : 'default';
  }
  return /*#__PURE__*/_createElement(TBTextSelect, _extends({}, restProps, {
    value: fontValue,
    overlayVisible: overlayVisible,
    onVisibleChange: onVisibleChange,
    onChange: setValue,
    options: extendOptions,
    renderOption: renderOption
  }));
});
TBFontFamilySelect.displayName = 'textSelect';
//# sourceMappingURL=index.js.map