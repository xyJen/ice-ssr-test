{"version":3,"file":"index.js","names":["React","Popover","GuidePanel","TooltipContent","tooltipOverlayRestStyle","placementOffset","ToolbarHoverTip","memo","props","children","disabled","tooltip","overlayVisible","contentNode","overlayStyle","placement","title","description","shortCut","image"],"sources":["../../../../../src/navigator/toolbar/toolbarHoverTip/index.tsx"],"sourcesContent":["import React from 'react';\nimport type { ICommonComponentProps } from '../baseItem/interface';\nimport { Popover } from '../../../display/popover';\nimport { GuidePanel } from '../../../office/guide-panel';\nimport { TooltipContent, tooltipOverlayRestStyle } from '../../../display/tooltip/Tooltip';\n\nconst placementOffset: [number, number] = [4, 0];\nexport const ToolbarHoverTip: React.FC<{\n  disabled?: boolean;\n  tooltip: ICommonComponentProps['tooltip'] | false;\n  overlayVisible: boolean;\n  children: React.ReactElement;\n}> = React.memo((props) => {\n  const { children, disabled, tooltip, overlayVisible } = props;\n\n  let contentNode: React.ReactNode | undefined;\n  let overlayStyle: React.CSSProperties | undefined;\n  let placement: 'bottomLeft' | 'bottom' = 'bottom';\n\n  if (!overlayVisible && tooltip) {\n    if (typeof tooltip === 'object' && 'title' in tooltip) {\n      const { title, description, shortCut } = tooltip;\n      if (disabled) {\n        if (!('image' in tooltip)) {\n          contentNode = <TooltipContent title={title} description={description} />;\n          overlayStyle = tooltipOverlayRestStyle;\n        }\n      } else if ('image' in tooltip) {\n        contentNode = <GuidePanel title={`${title} ${shortCut ? ` (${shortCut})` : ''}`} description={description} image={tooltip.image} />;\n        placement = 'bottomLeft';\n      } else {\n        contentNode = <TooltipContent title={`${title} ${shortCut ? ` (${shortCut})` : ''}`} description={description} />;\n        overlayStyle = tooltipOverlayRestStyle;\n      }\n\n    } else {\n      contentNode = <TooltipContent title={tooltip} />;\n      overlayStyle = tooltipOverlayRestStyle;\n    }\n  }\n\n  // @ts-ignore\n  return (\n    <Popover\n      trigger='hover'\n      placement={placement}\n      content={contentNode}\n      style={overlayStyle}\n      placementOffset={placementOffset}\n      // visible={!!contentNode}\n    >\n      {children}\n    </Popover>\n  );  \n});"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,qBACE;AAC5B,SAASC,OAAO;AAChB,SAASC,UAAU;AACnB,SAASC,cAAc,EAAEC,uBAAuB;AAEhD,IAAMC,eAAiC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAChD,OAAO,IAAMC,eAKX,gBAAGN,KAAK,CAACO,IAAI,CAAC,UAACC,KAAK,EAAK;EACzB,IAAQC,QAAQ,GAAwCD,KAAK,CAArDC,QAAQ;IAAEC,QAAQ,GAA8BF,KAAK,CAA3CE,QAAQ;IAAEC,OAAO,GAAqBH,KAAK,CAAjCG,OAAO;IAAEC,cAAc,GAAKJ,KAAK,CAAxBI,cAAc;EAEnD,IAAIC,WAAwC;EAC5C,IAAIC,YAA6C;EACjD,IAAIC,SAAkC,GAAG,QAAQ;EAEjD,IAAI,CAACH,cAAc,IAAID,OAAO,EAAE;IAC9B,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAI,OAAO,IAAIA,OAAO,EAAE;MACrD,IAAQK,KAAK,GAA4BL,OAAO,CAAxCK,KAAK;QAAEC,WAAW,GAAeN,OAAO,CAAjCM,WAAW;QAAEC,QAAQ,GAAKP,OAAO,CAApBO,QAAQ;MACpC,IAAIR,QAAQ,EAAE;QACZ,IAAI,EAAE,OAAO,IAAIC,OAAO,CAAC,EAAE;UACzBE,WAAW,gBAAG,eAAC,cAAc;YAAC,KAAK,EAAEG,KAAM;YAAC,WAAW,EAAEC;UAAY,EAAG;UACxEH,YAAY,GAAGV,uBAAuB;QACxC;MACF,CAAC,MAAM,IAAI,OAAO,IAAIO,OAAO,EAAE;QAC7BE,WAAW,gBAAG,eAAC,UAAU;UAAC,KAAK,EAAKG,KAAK,UAAIE,QAAQ,UAAQA,QAAQ,SAAM,EAAE,CAAG;UAAC,WAAW,EAAED,WAAY;UAAC,KAAK,EAAEN,OAAO,CAACQ;QAAM,EAAG;QACnIJ,SAAS,GAAG,YAAY;MAC1B,CAAC,MAAM;QACLF,WAAW,gBAAG,eAAC,cAAc;UAAC,KAAK,EAAKG,KAAK,UAAIE,QAAQ,UAAQA,QAAQ,SAAM,EAAE,CAAG;UAAC,WAAW,EAAED;QAAY,EAAG;QACjHH,YAAY,GAAGV,uBAAuB;MACxC;IAEF,CAAC,MAAM;MACLS,WAAW,gBAAG,eAAC,cAAc;QAAC,KAAK,EAAEF;MAAQ,EAAG;MAChDG,YAAY,GAAGV,uBAAuB;IACxC;EACF;;EAEA;EACA,oBACE,eAAC,OAAO;IACN,OAAO,EAAC,OAAO;IACf,SAAS,EAAEW,SAAU;IACrB,OAAO,EAAEF,WAAY;IACrB,KAAK,EAAEC,YAAa;IACpB,eAAe,EAAET;IACjB;EAAA,GAECI,QAAQ,CACD;AAEd,CAAC,CAAC"}