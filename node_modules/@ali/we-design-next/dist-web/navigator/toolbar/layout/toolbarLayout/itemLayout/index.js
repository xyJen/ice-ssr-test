import _extends from "@babel/runtime/helpers/extends";
var _IconMore;
import React, { useRef, useState, useEffect, useCallback, useContext, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { throttle, noop } from 'lodash-es';
import { ToolbarContextProvider, ToolbarContext, DoubleLineRowContext } from "../../contexts";
import { SingleLineWrapper, DoubleLineWrapper } from "./style";
import ResizeObserver from 'resize-observer-polyfill';
import { splitDoubleLineItemByLength, splitSingleLineItemByLength } from "./splitItemByLength";
import { BaseIconButton } from "../../../baseItem/iconButton/BaseIconButton";
import { IconMore } from "../../../../../basic/icon";
import { Popover } from "../../../../../display/popover";
import { IS_NODE, IS_UITEST, TOOLBAR_WIDTH_FOR_UITEST } from "../constants";
import { useTranslate } from "../../../../../locale";
var noopElements = [];
var overLayStyle = {
  padding: 4,
  width: 'max-content',
  borderRadius: 4
};
var useSplitItems = function useSplitItems(items, splitFun, fold, onLayoutRender) {
  var ref = useRef(null);
  var _useState = useState(!IS_NODE && fold ? undefined : items),
    itemNodes = _useState[0],
    setItemNodes = _useState[1];
  var _useState2 = useState(undefined),
    resetNodes = _useState2[0],
    setResetNodes = _useState2[1];
  var flagRef = useRef({
    width: 0
  });
  var _useContext = useContext(ToolbarContext),
    setToolbarWidth = _useContext.setToolbarWidth;
  useEffect(function () {
    if (!fold) {
      setItemNodes(items);
      return;
    }
    var dom = ref.current;
    if (!dom) {
      return;
    }
    var domClientWidth = IS_NODE || IS_UITEST ? TOOLBAR_WIDTH_FOR_UITEST : dom.clientWidth;
    setToolbarWidth(domClientWidth);
    var _splitFun = splitFun(items, domClientWidth),
      currentItems = _splitFun[0],
      resetItems = _splitFun[1];
    flagRef.current.width = domClientWidth;
    setItemNodes(currentItems);
    setResetNodes(resetItems);
    var resizeHandle = throttle(function () {
      var _ref$current;
      var currentWidth = (_ref$current = ref.current) == null ? void 0 : _ref$current.clientWidth;
      if (!currentWidth) {
        return;
      }
      if (currentWidth === flagRef.current.width) {
        return;
      }
      flagRef.current.width = currentWidth;
      setToolbarWidth(currentWidth);
      var _splitFun2 = splitFun(items, currentWidth),
        currentItems = _splitFun2[0],
        resetItems = _splitFun2[1];
      setItemNodes(currentItems);
      setResetNodes(resetItems);
      setTimeout(onLayoutRender, 0);
    }, 0);
    var resizeObserver = new ResizeObserver(function () {
      resizeHandle();
    });
    resizeObserver.observe(ref.current);
    return function () {
      resizeHandle.cancel();
      resizeObserver.disconnect();
    };
  }, [items, setToolbarWidth]);
  useEffect(function () {
    if (onLayoutRender !== noop && itemNodes) {
      onLayoutRender();
    }
  }, [itemNodes, resetNodes]);
  return [ref, itemNodes, resetNodes];
};
var MoreBtn = /*#__PURE__*/React.memo(function (props) {
  var t = useTranslate();
  var _useState3 = useState(false),
    visible = _useState3[0],
    setVisible = _useState3[1];
  var visibleRef = useRef(false);
  visibleRef.current = visible;
  useEffect(function () {
    var resizeObserver = new ResizeObserver(function () {
      setVisible(false);
    });
    resizeObserver.observe(document.body);
    return function () {
      resizeObserver.disconnect();
    };
  }, []);
  var onClick = useCallback(throttle(function () {
    setVisible(!visibleRef.current);
  }, 500, {
    trailing: false
  }), []);
  return /*#__PURE__*/_createElement(Popover, {
    content: props.content,
    placement: "bottomRight",
    visible: visible,
    onVisibleChange: setVisible,
    animation: true
  }, /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-more"
  }, /*#__PURE__*/_createElement(BaseIconButton, {
    onClick: onClick,
    active: visible,
    icon: _IconMore || (_IconMore = /*#__PURE__*/_createElement(IconMore, null)),
    title: t('wdn_more'),
    size: props.size
  })));
});
function renderSingleLineGroupItems(items) {
  var res = [];
  for (var i = 0; i < items.length; i++) {
    var group = items[i];
    if (group === 'divider') {
      continue;
    }
    res.push( /*#__PURE__*/_createElement("div", {
      className: items[i + 1] === 'divider' ? 'wdn-toolbar-group divider' : 'wdn-toolbar-group'
    }, group));
  }
  return res;
}
export var SingLineItemLayoutContent = /*#__PURE__*/React.memo(function (props) {
  var items = props.items,
    align = props.align,
    autoFold = props.autoFold,
    onLayoutRender = props.onLayoutRender,
    background = props.background;
  var _useSplitItems = useSplitItems(items, splitSingleLineItemByLength, autoFold, onLayoutRender),
    ref = _useSplitItems[0],
    itemNodes = _useSplitItems[1],
    resetNodes = _useSplitItems[2];
  var nodes = itemNodes && renderSingleLineGroupItems(itemNodes);
  var restItems = resetNodes && renderSingleLineGroupItems(resetNodes);
  var overLayWrapperStyle = useMemo(function () {
    return background ? _extends({}, overLayStyle, {
      background: background
    }) : overLayStyle;
  }, [background]);
  return /*#__PURE__*/_createElement(SingleLineWrapper, {
    className: align + " toolbar-left single",
    ref: ref
  }, nodes, restItems && /*#__PURE__*/_createElement(MoreBtn, {
    size: "normal",
    content: /*#__PURE__*/_createElement(SingleLineWrapper, {
      style: overLayWrapperStyle
    }, restItems)
  }));
});
export var SingLineItemLayout = /*#__PURE__*/React.memo(function (props) {
  return /*#__PURE__*/_createElement(ToolbarContextProvider, {
    mode: "singleLine"
  }, /*#__PURE__*/_createElement(SingLineItemLayoutContent, props));
});
function renderDoubleLineGroupItems(items) {
  var res = [];
  for (var i = 0; i < items.length; i++) {
    var group = items[i];
    if (group === 'divider') {
      continue;
    }
    var isBeforeWithDivider = items[i + 1] === 'divider';
    if (Array.isArray(group[0])) {
      res.push( /*#__PURE__*/_createElement("div", {
        className: isBeforeWithDivider ? 'wdn-toolbar-row-group divider' : 'wdn-toolbar-row-group'
      }, /*#__PURE__*/_createElement(DoubleLineRowContext.Provider, {
        value: true
      }, /*#__PURE__*/_createElement("div", {
        className: "wdn-toolbar-row"
      }, group[0]), /*#__PURE__*/_createElement("div", {
        className: "wdn-toolbar-row"
      }, group[1]))));
    } else {
      res.push( /*#__PURE__*/_createElement("div", {
        className: isBeforeWithDivider ? 'wdn-toolbar-group divider' : 'wdn-toolbar-group'
      }, group));
    }
  }
  return res;
}
var DoubleLineItemLayoutContent = function DoubleLineItemLayoutContent(props) {
  var items = props.items,
    align = props.align,
    autoFold = props.autoFold,
    onLayoutRender = props.onLayoutRender,
    background = props.background;
  var _useSplitItems2 = useSplitItems(items, splitDoubleLineItemByLength, autoFold, onLayoutRender),
    ref = _useSplitItems2[0],
    itemNodes = _useSplitItems2[1],
    resetNodes = _useSplitItems2[2];
  var nodes = itemNodes && renderDoubleLineGroupItems(itemNodes);
  var resetItems = resetNodes && renderDoubleLineGroupItems(resetNodes);
  var overLayWrapperStyle = useMemo(function () {
    return background ? _extends({}, overLayStyle, {
      background: background
    }) : overLayStyle;
  }, [background]);
  return /*#__PURE__*/_createElement(DoubleLineWrapper, {
    className: align + " toolbar-left double",
    ref: ref
  }, nodes, resetNodes && /*#__PURE__*/_createElement(MoreBtn, {
    size: "large",
    content: /*#__PURE__*/_createElement(DoubleLineWrapper, {
      style: overLayWrapperStyle
    }, resetItems)
  }));
};
export var DoubleLineItemLayout = /*#__PURE__*/React.memo(function (props) {
  return /*#__PURE__*/_createElement(ToolbarContextProvider, {
    mode: "doubleLine"
  }, /*#__PURE__*/_createElement(DoubleLineItemLayoutContent, props));
});
//# sourceMappingURL=index.js.map