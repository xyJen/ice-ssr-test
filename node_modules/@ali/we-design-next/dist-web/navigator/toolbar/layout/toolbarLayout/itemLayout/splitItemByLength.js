var presetItems = new Set(['iconSelect', 'textSelect', 'splitButton', 'iconMenu', 'iconButton']);
var noLargeItems = new Set(['iconSelect', 'textSelect', 'splitButton']);
var safeDit = 40;
var itemGroupPadding = 6;
var itemMargin_d = 6;
var itemMargin_s = 4;
var itemSize = {
  iconButton: {
    large: 36 + 9,
    normal: 28,
    small: 24
  },
  iconMenu: {
    large: 48,
    normal: 36,
    small: 36
  },
  splitButton: {
    large: 0,
    normal: 37,
    small: 37
  },
  iconSelect: {
    large: 0,
    normal: 37,
    small: 37
  },
  textSelect: {
    large: 0,
    normal: 100,
    small: 100
  }
};
function getSlotWidth(item, size, toolbarWidth) {
  var slotWidth;
  if (typeof item.props.width === 'function') {
    var mode = size === 'normal' ? 'singleLine' : 'doubleLine';
    slotWidth = item.props.width({
      mode: mode,
      toolbarWidth: toolbarWidth
    });
  } else {
    slotWidth = item.props.width;
  }
  return Number(slotWidth) || 0;
}
function getItemLength(item, size, context) {
  var typeDisplay = item.type.displayName;
  var displayName = typeDisplay === 'toolbarSlot' ? item.props.display : typeDisplay;
  var presetItemWidth = itemSize[displayName] && itemSize[displayName][size] || 0;
  if (presetItems.has(displayName)) {
    // splitButton textSelect iconSelect 逻辑特殊
    if (noLargeItems.has(displayName)) {
      // splitButton textSelect iconSelect 在双行占两行情况下不显示
      if (size === 'large') {
        return 0;
      }
      // splitButton 和 双行模式下iconSelect 和 双行模式下 取一个最大值
      if (displayName === 'splitButton' || displayName === 'iconSelect' && size === 'small') {
        return Math.max(presetItemWidth, getSlotWidth(item, size, context.toolbarWidth));
      }
      // textSelect 使用传入的width
      if (displayName === 'textSelect') {
        return getSlotWidth(item, size, context.toolbarWidth) || presetItemWidth;
      }
    }
    return presetItemWidth;
  } else {
    // 认为是custom 需要根据slot的width进行计算
    return getSlotWidth(item, size, context.toolbarWidth);
  }
}
function getItemsMargin(item1, item2, size) {
  return size === 'normal' ? itemMargin_s : itemMargin_d;
}
;
function splitGroupItemByLength(items, length, size, context) {
  var restLength = length;
  var res = [];
  var lastIndex = items.length - 1;
  for (var i = 0; i < items.length; i++) {
    var itemLength = getItemLength(items[i], size, context);
    // 拿不到有效宽度的情况下 忽略掉当前的item
    if (itemLength <= 0) {
      continue;
    }
    restLength -= itemLength;
    if (i !== lastIndex) {
      restLength -= getItemsMargin(items[i], items[i + 1], size);
    }
    if (restLength >= 0) {
      res.push(items[i]);
    } else {
      return [0, res, items.slice(i)];
    }
  }
  return [restLength, res];
}
export function splitSingleLineItemByLength(items, length) {
  var restLength = length - safeDit;
  var visibleItems = [];
  var isAfterDivider = false;
  for (var i = 0; i < items.length; i++) {
    var itemGroup = items[i];
    if (itemGroup === 'divider') {
      isAfterDivider = true;
      visibleItems.push('divider');
      continue;
    }
    if (isAfterDivider) {
      restLength -= itemGroupPadding;
      isAfterDivider = false;
    }
    var _splitGroupItemByLeng = splitGroupItemByLength(itemGroup, restLength, 'normal', {
        toolbarWidth: length
      }),
      restLength_ = _splitGroupItemByLeng[0],
      currentItems = _splitGroupItemByLeng[1],
      resetItems = _splitGroupItemByLeng[2];
    if (currentItems.length > 0) {
      visibleItems.push(currentItems);
    }
    if (resetItems) {
      return [visibleItems, [resetItems].concat(items.slice(i + 1))];
      // items.slice(i + 1)
    }

    restLength = restLength_;
    restLength -= itemGroupPadding;
  }
  return [visibleItems];
}
export function splitDoubleLineItemByLength(items, length) {
  var restLength = length - safeDit;
  var visibleItems = [];
  var hideItems = [];
  var size = 'large';
  var isAfterDivider = false;
  for (var i = 0; i < items.length; i++) {
    var itemGroup = items[i];
    if (itemGroup === 'divider') {
      isAfterDivider = true;
      visibleItems.push('divider');
      continue;
    }
    if (isAfterDivider) {
      restLength -= itemGroupPadding;
      isAfterDivider = false;
    }
    if (Array.isArray(itemGroup[0])) {
      var _splitGroupItemByLeng2 = splitGroupItemByLength(itemGroup[0], restLength, 'small', {
          toolbarWidth: length
        }),
        restLength_1 = _splitGroupItemByLeng2[0],
        currentItems1 = _splitGroupItemByLeng2[1],
        resetItems1 = _splitGroupItemByLeng2[2];
      var _splitGroupItemByLeng3 = splitGroupItemByLength(itemGroup[1], restLength, 'small', {
          toolbarWidth: length
        }),
        restLength_2 = _splitGroupItemByLeng3[0],
        currentItems2 = _splitGroupItemByLeng3[1],
        resetItems2 = _splitGroupItemByLeng3[2];
      restLength = Math.min(restLength_1, restLength_2);
      if (resetItems1 || resetItems2) {
        hideItems.push([itemGroup[0] || [], itemGroup[1] || []]);
        hideItems.push.apply(hideItems, items.slice(i + 1));
        break;
      }
      if (currentItems1.length > 0 && currentItems2.length > 0) {
        visibleItems.push([currentItems1, currentItems2]);
      }
    } else {
      var _splitGroupItemByLeng4 = splitGroupItemByLength(itemGroup, restLength, size, {
          toolbarWidth: length
        }),
        restLength_ = _splitGroupItemByLeng4[0],
        currentItems = _splitGroupItemByLeng4[1],
        resetItems = _splitGroupItemByLeng4[2];
      restLength = restLength_;
      if (currentItems.length > 0) {
        visibleItems.push(currentItems);
      }
      if (resetItems) {
        hideItems.push(resetItems);
        hideItems.push.apply(hideItems, items.slice(i + 1));
        break;
      }
    }
    restLength -= itemGroupPadding;
  }
  return hideItems.length > 0 ? [visibleItems, hideItems] : [visibleItems];
}
//# sourceMappingURL=splitItemByLength.js.map