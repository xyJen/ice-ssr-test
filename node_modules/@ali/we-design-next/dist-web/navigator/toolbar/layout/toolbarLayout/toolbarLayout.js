import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["onModeChange", "defaultMode", "mode", "doubleLineToolbar", "singleLineToolbar", "onLayoutRender", "align", "layout", "style"];
import { throttle, noop } from 'lodash-es';
import React, { useCallback, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { mergeRestProps, useDefaultProp } from "../../../../common";
import { IconArrowUp } from "../../../../basic/icon";
import { ToolbarLayoutWrapper } from "./style";
import { SingLineItemLayout, DoubleLineItemLayout } from "./itemLayout";
import CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';
var noopArr = [];
var styleWith0Arrow = {
  width: '100%'
};
var styleWith1Arrow = {
  width: 'calc(100% - 24px)'
};
var styleWith2Arrow = {
  width: 'calc(100% - 48px)'
};
export var ToolbarLayout = /*#__PURE__*/React.memo(function (props) {
  var onModeChange = props.onModeChange,
    defaultMode = props.defaultMode,
    mode = props.mode,
    doubleLineToolbar = props.doubleLineToolbar,
    singleLineToolbar = props.singleLineToolbar,
    _props$onLayoutRender = props.onLayoutRender,
    onLayoutRender = _props$onLayoutRender === void 0 ? noop : _props$onLayoutRender,
    _props$align = props.align,
    align = _props$align === void 0 ? 'left' : _props$align,
    _props$layout = props.layout,
    layout = _props$layout === void 0 ? 'fix-wrapper' : _props$layout,
    style = props.style,
    restProps = _objectWithoutPropertiesLoose(props, _excluded);
  var _useDefaultProp = useDefaultProp(defaultMode || (doubleLineToolbar ? 'doubleLine' : 'singleLine'), mode, onModeChange),
    layoutMode = _useDefaultProp[0],
    setLayoutMode = _useDefaultProp[1];
  var layoutModeRef = useRef(layoutMode);
  layoutModeRef.current = layoutMode;
  var needSwitchMode = doubleLineToolbar && singleLineToolbar;
  var onArrowClick = useCallback(throttle(function () {
    setLayoutMode(layoutModeRef.current === 'singleLine' ? 'doubleLine' : 'singleLine');
  }, 800), []);
  var background = (style == null ? void 0 : style.background) || (style == null ? void 0 : style.backgroundColor);
  return /*#__PURE__*/_createElement(ToolbarLayoutWrapper, _extends({}, mergeRestProps(restProps, "wdn-toolbar-layout " + layout), {
    style: style
  }), /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-content"
  }, align === 'center' && needSwitchMode && /*#__PURE__*/_createElement("div", {
    style: {
      flexGrow: 0,
      width: 20
    }
  }), /*#__PURE__*/_createElement(CSSTransitionGroup, {
    transitionName: 'toolbar-left',
    className: "wdn-toolbar-items " + layoutMode + " " + (needSwitchMode ? 'with_switch' : ''),
    transitionEnterTimeout: 500,
    transitionLeaveTimeout: 300,
    style: needSwitchMode ? align === 'center' ? styleWith2Arrow : styleWith1Arrow : styleWith0Arrow
  }, layoutMode === 'singleLine' ? /*#__PURE__*/_createElement(SingLineItemLayout, {
    background: background,
    key: "singleLine",
    autoFold: layout === 'fix-wrapper',
    align: align,
    items: singleLineToolbar || noopArr,
    onLayoutRender: onLayoutRender
  }) : /*#__PURE__*/_createElement(DoubleLineItemLayout, {
    background: background,
    key: "doubleLine",
    autoFold: layout === 'fix-wrapper',
    align: align,
    items: doubleLineToolbar || noopArr,
    onLayoutRender: onLayoutRender
  })), needSwitchMode && /*#__PURE__*/_createElement("div", {
    className: "wdn-icon-switch-wrapper"
  }, /*#__PURE__*/_createElement(IconArrowUp, {
    className: "wdn-icon-switch " + (layoutMode === 'singleLine' ? 'rotate' : ''),
    onClick: onArrowClick
  }))));
});
//# sourceMappingURL=toolbarLayout.js.map