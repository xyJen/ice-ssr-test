{"version":3,"file":"slot.js","names":["React","useContext","ToolbarContext","fixedItem","Set","Slot","props","width","mode","toolbarWidth","has","display","children","renderWidth","cloneElement","displayName"],"sources":["../../../../src/navigator/toolbar/slot.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { ToolbarContext } from './layout/contexts';\n\ntype SlotDisplay = 'iconMenu' | 'iconSelect' | 'textSelect' | 'iconButton' | 'splitButton' | 'custom';\n\nconst fixedItem = new Set(['iconMenu', 'iconButton']);\n\nexport const Slot: React.FC<{\n  display: SlotDisplay; width?: number | ((context: { mode: 'singleLine' | 'doubleLine', toolbarWidth: number }) => number);\n  children: React.ReactElement;\n}> = (props) => {\n  const { width } = props;\n  \n  const { mode, toolbarWidth } = useContext(ToolbarContext);\n\n  if (fixedItem.has(props.display)) {\n    return props.children;\n  }\n\n  const renderWidth = typeof width === 'function' ? width({ mode, toolbarWidth: toolbarWidth || 0 })  : width;\n\n  return renderWidth\n    ? React.cloneElement(props.children, { width: renderWidth })\n    : props.children;\n};\n\nSlot.displayName=\"toolbarSlot\";\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,cAAc;AAIvB,IAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;AAErD,OAAO,IAAMC,IAGX,GAAG,SAHQA,IAGX,CAAIC,KAAK,EAAK;EACd,IAAQC,KAAK,GAAKD,KAAK,CAAfC,KAAK;EAEb,kBAA+BN,UAAU,CAACC,cAAc,CAAC;IAAjDM,IAAI,eAAJA,IAAI;IAAEC,YAAY,eAAZA,YAAY;EAE1B,IAAIN,SAAS,CAACO,GAAG,CAACJ,KAAK,CAACK,OAAO,CAAC,EAAE;IAChC,OAAOL,KAAK,CAACM,QAAQ;EACvB;EAEA,IAAMC,WAAW,GAAG,OAAON,KAAK,KAAK,UAAU,GAAGA,KAAK,CAAC;IAAEC,IAAI,EAAJA,IAAI;IAAEC,YAAY,EAAEA,YAAY,IAAI;EAAE,CAAC,CAAC,GAAIF,KAAK;EAE3G,OAAOM,WAAW,gBACdb,KAAK,CAACc,YAAY,CAACR,KAAK,CAACM,QAAQ,EAAE;IAAEL,KAAK,EAAEM;EAAY,CAAC,CAAC,GAC1DP,KAAK,CAACM,QAAQ;AACpB,CAAC;AAEDP,IAAI,CAACU,WAAW,GAAC,aAAa"}