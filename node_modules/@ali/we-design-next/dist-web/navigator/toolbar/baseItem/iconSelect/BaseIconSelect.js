import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["tooltip", "title"];
import React, { useMemo, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Select } from "../../../../form/select";
import styled from 'styled-components';
import { ToolbarHoverTip } from "../../toolbarHoverTip";
import { useDefaultProp } from "../../../../common/react/useDefaultProp";
import { COLORS, mergeClassName } from "../../../../common";
import { Tooltip } from "../../../../display/tooltip";
var SelectWrapper = /*#__PURE__*/styled(Select)(["&.normal .wdn-select-normal,.wdn-select-input{height:28px;padding-left:0}&.small .wdn-select-normal,.wdn-select-input{height:24px}.wdn-select-normal{padding-left:2px;:hover{background:", ";}}&.active .wdn-select-normal{background:", ";}.wdn-toolbar-select-value{display:flex;line-height:20px;font-size:12px;align-items:center;&>:not(:last-child){flex-shrink:0;}.title{flex-shrink:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}}span:not(.wdn-toolbar-select-value *){margin:0;svg{margin-right:-4px;transition:transform 500ms;transform:rotate(0deg);width:8px;height:8px;}}&.disabled{opacity:0.35;}&.disabled *{color:unset;}"], COLORS.LIGHT.DAVINCI_BLUE_LIGHT_HOVER, COLORS.LIGHT.DAVINCI_BLUE_LIGHT_ACTIVE);
function getSelectOptions(tbOption) {
  return {
    key: tbOption.key,
    prefix: tbOption.icon,
    title: tbOption.title,
    disabled: tbOption.disabled,
    testid: tbOption.testid
  };
}
function renderValueByOPt(tbOption, needTitle) {
  var node = /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-select-value"
  }, tbOption.icon, needTitle && /*#__PURE__*/_createElement("span", {
    className: "title"
  }, tbOption.title));
  return node;
}
export var BseIconSelect = /*#__PURE__*/React.memo(function (props) {
  var tooltip = props.tooltip,
    disabled = props.disabled,
    size = props.size,
    options = props.options,
    overlayVisible_ = props.overlayVisible,
    onVisibleChange = props.onVisibleChange,
    width = props.width,
    value = props.value,
    onChange = props.onChange,
    getContainer = props.getContainer,
    testid = props.testid,
    role = props.role,
    keyboard = props.keyboard;
  var _useMemo = useMemo(function () {
      var validOptMap = new Map();
      var validOptions = [];
      options.forEach(function (opt) {
        if (opt === 'divider') {
          validOptions.push(opt);
        } else if ('items' in opt) {
          var group = {
            items: [],
            title: opt.title
          };
          opt.items.forEach(function (item) {
            validOptMap.set(item.key, item);
            group.items.push(getSelectOptions(item));
          });
          validOptions.push(group);
        } else {
          validOptions.push(getSelectOptions(opt));
          validOptMap.set(opt.key, opt);
        }
      });
      return [validOptMap, validOptions];
    }, [options]),
    optMap = _useMemo[0],
    opts = _useMemo[1];
  var isNormal = size === 'normal';
  var style = useMemo(function () {
    var s = isNormal ? {
      height: 28
    } : {
      height: 24
    };
    if (isNormal) {
      s.width = 37;
    } else {
      s.width = width ? Math.max(37, width) : 37;
    }
    return s;
  }, [size, width]);
  var renderValue = useCallback(function () {
    var opt = value && optMap.get(value);
    var a = opt ? renderValueByOPt(opt, isNormal ? false : !!style.width && style.width > 37) : null;
    return a;
  }, [value, optMap, isNormal, style]);
  var renderOption = useCallback(function (_ref) {
    var key = _ref.key;
    var opt = optMap.get(key);
    if (!opt) {
      return null;
    }
    var tooltip = opt.tooltip,
      title = opt.title,
      restOPt = _objectWithoutPropertiesLoose(opt, _excluded);
    var optNode = /*#__PURE__*/_createElement(Select.Option, _extends({
      children: title
    }, restOPt));
    var option = tooltip ? /*#__PURE__*/_createElement(Tooltip, {
      placement: "left",
      title: tooltip
    }, optNode) : tooltip;
    return option;
  }, [value, optMap, isNormal]);
  var _useDefaultProp = useDefaultProp(false, overlayVisible_, onVisibleChange),
    overlayVisible = _useDefaultProp[0],
    setOverlayVisible = _useDefaultProp[1];
  return /*#__PURE__*/_createElement(ToolbarHoverTip, {
    disabled: disabled,
    overlayVisible: overlayVisible,
    tooltip: tooltip
  }, /*#__PURE__*/_createElement(SelectWrapper, {
    renderValue: renderValue,
    className: mergeClassName('wdn-toolbar-item-select wdn-toolbar-item', overlayVisible && 'active', size, disabled && 'disabled'),
    style: style,
    renderOption: renderOption,
    disabled: disabled,
    bordered: false,
    value: value,
    onChange: onChange,
    options: opts,
    visible: overlayVisible,
    onVisibleChange: setOverlayVisible,
    getContainer: getContainer,
    "data-testid": testid,
    "data-role": role,
    keyboard: keyboard
  }));
});
//# sourceMappingURL=BaseIconSelect.js.map