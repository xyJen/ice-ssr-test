import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["icon", "title", "tooltip", "disabled", "size", "overlay", "autoClose", "active", "overlayVisible", "onVisibleChange", "badgeDot", "onClick", "overlayStyle", "testid", "role", "getContainer", "placement", "width"];
import React, { cloneElement, useCallback, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Popover } from "../../../../display/popover";
import { IconArrowDown } from "../../../../basic/icon";
import { ToolbarHoverTip } from "../../toolbarHoverTip";
import { mergeRef, useDefaultProp, mergeClassName } from "../../../../common";
import { Wrapper } from "./styled";
import { BadgeDot } from "../../../../basic/badge";
var placementOffset = [4, 0];
export var BaseSplitButton = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var icon = props.icon,
    title = props.title,
    tooltip = props.tooltip,
    disabled = props.disabled,
    size = props.size,
    overlay = props.overlay,
    autoClose = props.autoClose,
    active = props.active,
    overlayVisible = props.overlayVisible,
    onVisibleChange = props.onVisibleChange,
    badgeDot = props.badgeDot,
    onClick = props.onClick,
    overlayStyle = props.overlayStyle,
    testid = props.testid,
    role = props.role,
    getContainer = props.getContainer,
    _props$placement = props.placement,
    placement = _props$placement === void 0 ? 'bottomLeft' : _props$placement,
    width = props.width,
    restProps = _objectWithoutPropertiesLoose(props, _excluded);
  var _useDefaultProp = useDefaultProp(false, overlayVisible, onVisibleChange),
    menuVisible = _useDefaultProp[0],
    setMenuVisible = _useDefaultProp[1];
  var cRef = useRef({
    lastTime: 0,
    v: menuVisible
  });
  cRef.current.v = menuVisible;
  var wrapRef = useRef(null);
  var onArrowClick = useCallback(function (e) {
    var now = Date.now().valueOf();
    if (now - cRef.current.lastTime > 300) {
      cRef.current.lastTime = now;
      setMenuVisible(!cRef.current.v);
    }
  }, []);
  var showTitle = size === 'large';
  return /*#__PURE__*/_createElement(Wrapper, {
    ref: mergeRef(ref, wrapRef),
    className: mergeClassName('wdn-toolbar-item', size, active && 'active', disabled && 'disabled'),
    "data-testid": testid,
    "data-role": role,
    style: width ? {
      width: width
    } : undefined
  }, /*#__PURE__*/_createElement(Popover, {
    content: overlay,
    onVisibleChange: setMenuVisible,
    visible: menuVisible,
    getContainer: getContainer || function () {
      return wrapRef.current || document.body;
    },
    placementOffset: placementOffset,
    placement: placement,
    animation: true,
    "data-testid": "overlay-" + testid
  }, /*#__PURE__*/_createElement("div", {
    style: {
      lineHeight: 0,
      overflow: 'hidden'
    }
  }, /*#__PURE__*/_createElement(ToolbarHoverTip, {
    overlayVisible: menuVisible,
    disabled: disabled,
    tooltip: tooltip || !showTitle && !disabled && title
  }, /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-split-btn",
    style: width ? {
      width: width
    } : undefined
  }, /*#__PURE__*/_createElement("div", {
    className: mergeClassName('wdn-toolbar-split-left', active && 'active'),
    onClick: disabled ? undefined : onClick
  }, /*#__PURE__*/cloneElement(icon, {
    size: size === 'large' ? 'large' : 'normal'
  })), /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-split-btn-arrow",
    onClick: onArrowClick
  }, /*#__PURE__*/_createElement(IconArrowDown, {
    className: "wdn-tb-menu-array " + (menuVisible ? 'rotate' : ''),
    style: {
      width: 10,
      height: 10
    }
  })), badgeDot && (typeof badgeDot === 'boolean' ? /*#__PURE__*/_createElement(BadgeDot, {
    style: {
      position: 'absolute',
      top: 0,
      right: 10
    }
  }) : /*#__PURE__*/_createElement(BadgeDot, {
    style: {
      position: 'absolute',
      top: badgeDot.top,
      right: badgeDot.right + 10
    }
  })))))), showTitle && /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-title",
    onClick: disabled ? undefined : onClick
  }, title));
}));
//# sourceMappingURL=BaseSplitButton.js.map