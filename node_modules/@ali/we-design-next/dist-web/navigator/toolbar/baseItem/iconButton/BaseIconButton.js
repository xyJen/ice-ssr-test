import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["icon", "title", "tooltip", "disabled", "size", "active", "onClick", "onDoubleClick", "badgeDot", "testid", "role"];
import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ToolbarHoverTip } from "../../toolbarHoverTip";
import { Wrapper } from "./styled";
import { BadgeDot } from "../../../../basic/badge";
import { mergeClassName } from "../../../../common";
import { noop } from 'lodash-es';
export var BaseIconButton = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var icon = props.icon,
    title = props.title,
    tooltip = props.tooltip,
    disabled = props.disabled,
    size = props.size,
    active = props.active,
    _props$onClick = props.onClick,
    onClick = _props$onClick === void 0 ? noop : _props$onClick,
    onDoubleClick = props.onDoubleClick,
    badgeDot = props.badgeDot,
    testid = props.testid,
    role = props.role,
    restProps = _objectWithoutPropertiesLoose(props, _excluded);
  var _useMemo = useMemo(function () {
      if (!onDoubleClick) {
        return [onClick, undefined];
      } else {
        return sepreateDoubleClicks(onClick, onDoubleClick);
      }
    }, [onClick, onDoubleClick]),
    click = _useMemo[0],
    doubleClick = _useMemo[1];
  var showTitle = size === 'large';
  return /*#__PURE__*/_createElement(Wrapper, _extends({
    ref: ref,
    className: mergeClassName('wdn-toolbar-item', size, active && 'active', disabled && 'disabled'),
    "data-testid": testid,
    "data-role": role,
    onClick: disabled ? undefined : click,
    onDoubleClick: disabled ? undefined : doubleClick
  }, restProps), /*#__PURE__*/_createElement(ToolbarHoverTip, {
    overlayVisible: false,
    disabled: disabled,
    tooltip: tooltip || !showTitle && !disabled && title
  }, /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-icon"
  }, /*#__PURE__*/React.cloneElement(icon, {
    size: size === 'large' ? 'large' : 'normal'
  }), badgeDot && (typeof badgeDot === 'boolean' ? /*#__PURE__*/_createElement(BadgeDot, {
    style: {
      position: 'absolute',
      top: 0,
      right: 0
    }
  }) : /*#__PURE__*/_createElement(BadgeDot, {
    style: {
      position: 'absolute',
      top: badgeDot.top,
      right: badgeDot.right
    }
  })))), showTitle && /*#__PURE__*/_createElement("div", {
    className: "wdn-toolbar-title"
  }, /*#__PURE__*/_createElement("div", {
    className: "wdn-tb-title-content"
  }, title)));
}));
var sepreateDoubleClicks = function sepreateDoubleClicks(onClick, onDoubleClick) {
  var lastSingleClick = null;
  return [function (e) {
    if (lastSingleClick === null) {
      var last = lastSingleClick = Date.now();
      setTimeout(function () {
        if (lastSingleClick === last) {
          onClick(e);
          lastSingleClick = null;
        }
      }, 300);
    }
  }, function (e) {
    lastSingleClick = null;
    onDoubleClick(e);
  }];
};
//# sourceMappingURL=BaseIconButton.js.map