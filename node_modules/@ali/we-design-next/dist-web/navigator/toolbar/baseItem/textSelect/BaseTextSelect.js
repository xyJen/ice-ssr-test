import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Select } from "../../../../form/select";
import styled from 'styled-components';
import { ToolbarHoverTip } from "../../toolbarHoverTip";
import { useDefaultProp, COLORS, mergeClassName } from "../../../../common";
var SelectWrapper = /*#__PURE__*/styled(Select)(["&.normal .wdn-select-normal,&.normal  .wdn-select-input{height:28px;background:", ";&:hover{background:rgba(25,31,37,0.08)};}&.small .wdn-select-normal,&.small .wdn-select-input{height:24px;background:rgb(255,255,255);border:1px solid rgb(17,31,44,0.12)!important;box-shadow:unset!important;}input{background:", ";}span:not(.wdn-toolbar-select-value){margin:0;svg{transition:transform 500ms;transform:rotate(0deg);width:8px;height:8px;}}"], COLORS.TRANSPARENT, COLORS.TRANSPARENT);
function renderValue(title) {
  return /*#__PURE__*/_createElement("div", {
    style: {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      overflowWrap: 'normal',
      whiteSpace: 'nowrap'
    }
  }, title || '');
}
;
export var BseIconSelect = /*#__PURE__*/React.memo(function (props) {
  var tooltip = props.tooltip,
    mode = props.mode,
    disabled = props.disabled,
    size = props.size,
    options = props.options,
    overlayVisible_ = props.overlayVisible,
    onVisibleChange = props.onVisibleChange,
    width = props.width,
    value = props.value,
    onChange = props.onChange,
    renderOption = props.renderOption,
    renderValue_ = props.renderValue,
    testid = props.testid,
    role = props.role,
    keyboard = props.keyboard;
  var _useDefaultProp = useDefaultProp(false, overlayVisible_, onVisibleChange),
    overlayVisible = _useDefaultProp[0],
    setOverlayVisible = _useDefaultProp[1];
  var style = useMemo(function () {
    var s = size === 'normal' ? {
      height: 28,
      width: width
    } : {
      height: 24,
      width: width
    };
    return s;
  }, [size, width]);
  var title = useMemo(function () {
    if (value && options) {
      for (var i = 0; i < options.length; i++) {
        var t = options[i];
        if (t === value) {
          return t;
        } else if (typeof t === 'object' && 'key' in t && t.key === value) {
          // @ts-ignore
          return t.title || '';
        }
      }
    }
    return undefined;
  }, [value, options]);
  return /*#__PURE__*/_createElement(ToolbarHoverTip, {
    tooltip: tooltip,
    disabled: disabled,
    overlayVisible: overlayVisible
  }, /*#__PURE__*/_createElement(SelectWrapper, {
    className: mergeClassName('wdn-toolbar-item-select', 'wdn-toolbar-item', size, disabled && 'disabled'),
    style: style,
    disabled: disabled,
    mode: mode,
    bordered: false,
    value: value,
    onChange: onChange,
    options: options,
    visible: overlayVisible,
    onVisibleChange: setOverlayVisible,
    renderOption: renderOption,
    renderValue: renderValue_ ? renderValue_ : function () {
      return renderValue(title);
    },
    "data-testid": testid,
    "data-role": role,
    keyboard: keyboard
  }));
});
//# sourceMappingURL=BaseTextSelect.js.map