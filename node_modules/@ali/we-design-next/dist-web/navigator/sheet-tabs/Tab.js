import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["switchable", "renamable", "onContextMenu", "onRename", "tab", "title", "active", "editing", "setActiveTab", "onEditingTab", "onQuitEditingTab", "prefix", "suffix", "className"];
import React, { useRef, useState, useCallback, useMemo, useContext, useLayoutEffect } from "react";
var _createElement = /*#__PURE__*/React.createElement;
import { mergeClassName, KEY_CODES, mergeRef } from "../../common";
import { Input } from "../../form/input";
import { TabWrapper, TabText, BOTTOM_BAR_HEIGHT } from "./styled";
import { SheetTabsProvider } from "./SheetTabs";
import { useClickOuterRef } from "./useClickOuterRef";
export var TAB_ID_PREFIX = 'sheet-tab-';
export var Tab = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var switchable = props.switchable,
    renamable = props.renamable,
    onContextMenu = props.onContextMenu,
    onRename = props.onRename,
    _props$tab = props.tab,
    tab = _props$tab === void 0 ? '' : _props$tab,
    title = props.title,
    active = props.active,
    editing = props.editing,
    setActiveTab = props.setActiveTab,
    onEditingTab = props.onEditingTab,
    onQuitEditingTab = props.onQuitEditingTab,
    prefix = props.prefix,
    suffix = props.suffix,
    className = props.className,
    restProps = _objectWithoutPropertiesLoose(props, _excluded);
  var inputRef = useRef(null);
  var _useState = useState(),
    inputValue = _useState[0],
    setInputValue = _useState[1];
  var _useContext = useContext(SheetTabsProvider),
    editHandlers = _useContext.editHandlers;
  var handleStartEdit = useCallback(function () {
    onEditingTab == null ? void 0 : onEditingTab(tab);
    setTimeout(function () {
      if (inputRef.current) {
        var _inputRef$current, _inputRef$current2;
        (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();
        (_inputRef$current2 = inputRef.current) == null ? void 0 : _inputRef$current2.select();
      }
    }, 0);
  }, [tab, onEditingTab]);
  var handleQuitEdit = useCallback(function () {
    var newTitle = inputValue && inputValue.trim();
    typeof newTitle !== 'undefined' && newTitle !== title && (onRename == null ? void 0 : onRename(tab, newTitle));
    setInputValue(undefined);
    onQuitEditingTab == null ? void 0 : onQuitEditingTab(tab);
  }, [inputValue, onRename, tab, title, onQuitEditingTab]);
  var handleKeyDown = useCallback(function (e) {
    if (inputRef.current && (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.ESCAPE)) {
      inputRef.current.blur();
    }
  }, []);
  var handleContextMenu = useCallback(function (e) {
    e.preventDefault();
    e.stopPropagation();
    onContextMenu == null ? void 0 : onContextMenu(tab, e);
  }, [onContextMenu]);
  useLayoutEffect(function () {
    var editHandlersCurrent = editHandlers.current;
    editHandlersCurrent[tab] = handleStartEdit;
    return function () {
      delete editHandlersCurrent[tab];
    };
  }, [handleStartEdit, tab]);
  var inputStyle = useMemo(function () {
    return {
      height: BOTTOM_BAR_HEIGHT,
      position: 'absolute',
      left: 0,
      right: 0,
      border: 0,
      paddingLeft: 8,
      borderRadius: 'unset',
      transition: 'none',
      transform: editing ? undefined : 'translate(-100%, -100%)',
      backgroundColor: 'white'
    };
  }, [editing]);

  // 整合了 draggable 的 ref、点击输入框外的区域的处理
  var nodeRef = mergeRef(useClickOuterRef(handleQuitEdit, editing), ref);
  return /*#__PURE__*/_createElement(TabWrapper, _extends({
    ref: nodeRef,
    id: "" + TAB_ID_PREFIX + tab,
    className: mergeClassName(!switchable && !active ? "disabled" : undefined, active ? "active" : undefined, className),
    onMouseDown: function onMouseDown(e) {
      if (active) return;
      switchable && (setActiveTab == null ? void 0 : setActiveTab(tab));
    },
    onDoubleClick: function onDoubleClick() {
      return renamable && handleStartEdit();
    },
    onContextMenu: handleContextMenu
  }, restProps), /*#__PURE__*/_createElement(Input, {
    ref: inputRef,
    bordered: false,
    style: inputStyle,
    value: typeof inputValue === 'undefined' ? title : inputValue,
    onChange: function onChange(e) {
      return setInputValue(e.target.value);
    },
    onBlur: function onBlur() {
      return handleQuitEdit();
    },
    onKeyDown: function onKeyDown(e) {
      return handleKeyDown(e);
    }
  }), editing ? null : prefix, /*#__PURE__*/_createElement(TabText, null, title), editing ? null : suffix);
});
//# sourceMappingURL=Tab.js.map