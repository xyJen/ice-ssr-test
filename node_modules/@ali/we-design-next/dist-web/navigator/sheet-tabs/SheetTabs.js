import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
var _IconAdd, _IconArrowLeft, _IconArrowRight;
var _excluded = ["tabs", "defaultTab", "tab", "onTabChange", "onAdd", "onRename", "onMove", "onContextMenu", "switchable", "movable", "addable", "renamable", "renderTab", "renderInlineTab", "renderAddButton"];
import React, { useCallback, useState, useRef, useEffect, useMemo, useImperativeHandle } from "react";
var _createElement = /*#__PURE__*/React.createElement;
import { debounce } from 'lodash-es';
import { useDefaultProp, combineReactComponent, mergeRef, mergeClassName, mergeRestProps, renderReactNode } from "../../common";
import { useTranslate } from "../../locale";
import { Tooltip } from "../../display/tooltip";
import { IconAdd, IconArrowLeft, IconArrowRight } from "../../basic/icon";
import { Tab, TAB_ID_PREFIX } from "./Tab";
import { InlineTab } from "./InlineTab";
import { SheetSelect } from "./SheetSelect";
import { SheetTabsWrapper, LeftIcons, TabsWrapper, RightIcons, IconWrapper } from "./styled";
import ResizeObserver from 'resize-observer-polyfill';
export var SheetTabsProvider = /*#__PURE__*/React.createContext({});
var getDraggingTabStyle = function getDraggingTabStyle(isDragging, draggableStyle) {
  var transform = draggableStyle.transform;
  if (isDragging && transform) {
    var translateX = transform.slice(transform.indexOf('(') + 1, transform.indexOf(','));
    return _extends({}, draggableStyle, {
      transform: "translate(" + translateX + ", 0)"
    });
  }
  return draggableStyle;
};
var SheetTabsRaw = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var tabs = props.tabs,
    _props$defaultTab = props.defaultTab,
    defaultTab = _props$defaultTab === void 0 ? tabs.length > 0 ? tabs[0].key : '' : _props$defaultTab,
    _tab = props.tab,
    onTabChange = props.onTabChange,
    onAdd = props.onAdd,
    onRename = props.onRename,
    onMove = props.onMove,
    onContextMenu = props.onContextMenu,
    _props$switchable = props.switchable,
    switchable = _props$switchable === void 0 ? true : _props$switchable,
    _props$movable = props.movable,
    movable = _props$movable === void 0 ? true : _props$movable,
    _props$addable = props.addable,
    addable = _props$addable === void 0 ? true : _props$addable,
    _props$renamable = props.renamable,
    renamable = _props$renamable === void 0 ? false : _props$renamable,
    renderTab = props.renderTab,
    renderInlineTab = props.renderInlineTab,
    renderAddButton = props.renderAddButton,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _useDefaultProp = useDefaultProp(defaultTab, _tab, onTabChange),
    tab = _useDefaultProp[0],
    setTab = _useDefaultProp[1];
  var _useState = useState(null),
    editTab = _useState[0],
    setEditTab = _useState[1];
  var tabsWithoutHidden = useMemo(function () {
    return tabs.filter(function (item) {
      return !item.hidden;
    });
  }, [tabs]);
  var editHandlers = useRef({});
  var _useState2 = useState(false),
    isDragging = _useState2[0],
    setIsDragging = _useState2[1];
  var contentRef = useRef(null);
  var _useState3 = useState({
      arrowVisible: false,
      canTranslatePrev: false,
      canTranslateNext: false
    }),
    arrowState = _useState3[0],
    setArrowState = _useState3[1];
  var t = useTranslate();
  useImperativeHandle(ref, function () {
    return {
      startEdit: editHandlers.current[tab]
    };
  });

  // iframe 条件下，鼠标拖出视口外，没有触发 mouseup，因此此处进行 hack
  var handleMouseLeaveWhenDragging = useCallback(function () {
    if (isDragging && window.self !== window.top) {
      // trigger mouseup
      setTimeout(function () {
        var _contentRef$current;
        var event = document.createEvent('MouseEvents');
        event.initEvent('mouseup', true, true);
        (_contentRef$current = contentRef.current) == null ? void 0 : _contentRef$current.dispatchEvent(event);
      }, 200);
    }
  }, [isDragging]);
  useEffect(function () {
    document.body.addEventListener('mouseleave', handleMouseLeaveWhenDragging);
    return function () {
      document.body.removeEventListener('mouseleave', handleMouseLeaveWhenDragging);
    };
  }, [handleMouseLeaveWhenDragging]);
  var sheetTabsContext = useMemo(function () {
    return {
      editHandlers: editHandlers
    };
  }, [editHandlers]);
  var activeTabScrollIntoView = useCallback(function () {
    requestAnimationFrame(function () {
      var _document$getElementB;
      (_document$getElementB = document.getElementById("" + TAB_ID_PREFIX + tab)) == null ? void 0 : _document$getElementB.scrollIntoView();
    });
  }, [tab]);
  var handleArrow = useCallback(debounce(function () {
    var scrollDom = contentRef == null ? void 0 : contentRef.current;
    if (!scrollDom) return;
    var newArrowVisible = scrollDom.scrollWidth > scrollDom.clientWidth;
    var newCanTranslatePrev = scrollDom.scrollLeft > 0;
    var newCanTranslateNext = scrollDom.scrollLeft < scrollDom.scrollWidth - scrollDom.clientWidth;
    setArrowState(function (prevState) {
      if (newArrowVisible !== prevState.arrowVisible || newCanTranslatePrev !== prevState.canTranslatePrev || newCanTranslateNext !== prevState.canTranslateNext) {
        return {
          arrowVisible: newArrowVisible,
          canTranslatePrev: newCanTranslatePrev,
          canTranslateNext: newCanTranslateNext
        };
      }
      return prevState;
    });
    activeTabScrollIntoView();
  }, 0), [activeTabScrollIntoView]);
  var handleScrollToEdge = useCallback(debounce(function () {
    var scrollDom = contentRef == null ? void 0 : contentRef.current;
    if (!scrollDom) return;
    var newCanTranslatePrev = scrollDom.scrollLeft > 0;
    // ceil消除scrollDom.scrollLeft最大值有时是小数, 小0.5像素
    var newCanTranslateNext = Math.ceil(scrollDom.scrollLeft) < scrollDom.scrollWidth - scrollDom.clientWidth;
    setArrowState(function (prevState) {
      if (newCanTranslatePrev !== prevState.canTranslatePrev || newCanTranslateNext !== prevState.canTranslateNext) {
        return {
          arrowVisible: prevState.arrowVisible,
          canTranslateNext: newCanTranslateNext,
          canTranslatePrev: newCanTranslatePrev
        };
      }
      return prevState;
    });
  }, 100), []);
  useEffect(function () {
    handleArrow();
  }, [tabs.length, tab, handleArrow]);
  useEffect(function () {
    var debouncedResize = debounce(function () {
      handleArrow();
    }, 200);
    var resizeObserver = new ResizeObserver(debouncedResize);
    resizeObserver.observe(contentRef.current);
    return function () {
      resizeObserver.disconnect();
      if (debouncedResize.cancel) {
        debouncedResize.cancel();
      }
    };
  }, [handleArrow]);
  var handleTranslatePrev = useCallback(function () {
    var scrollDom = contentRef == null ? void 0 : contentRef.current;
    if (!scrollDom) return;
    var preLeft = scrollDom.scrollLeft - scrollDom.clientWidth;
    scrollDom.scrollTo({
      left: preLeft < 0 ? 0 : preLeft
    });
  }, []);
  var handleTranslateNext = useCallback(function () {
    var scrollDom = contentRef == null ? void 0 : contentRef.current;
    if (!scrollDom) return;
    var preLeft = scrollDom.scrollLeft + scrollDom.clientWidth;
    var maxLeft = scrollDom.scrollWidth - scrollDom.clientWidth;
    scrollDom.scrollTo({
      left: preLeft > maxLeft ? maxLeft : preLeft
    });
  }, []);
  var convertDestinationToAfter = useCallback(function (sourceIndex, destinationIndex) {
    if (destinationIndex === 0) return null;
    if (sourceIndex < destinationIndex) {
      return tabs[destinationIndex].key;
    }
    return tabs[destinationIndex - 1].key;
  }, [tabs]);
  var handleDragStart = useCallback(function () {
    setIsDragging(true);
  }, []);
  var handleDragEnd = useCallback(function (e) {
    setIsDragging(false);
    var destination = e.destination,
      source = e.source,
      draggableId = e.draggableId;
    if (destination && destination.index !== source.index) {
      var _after = convertDestinationToAfter(source.index, destination.index);
      onMove == null ? void 0 : onMove(draggableId, _after);
    }
  }, [onMove]);
  var handleEditTab = useCallback(function (key) {
    if (editTab !== key) {
      setEditTab(key);
    }
  }, [editTab]);
  var handleQuitEditTab = useCallback(function (key) {
    if (editTab === key) {
      setEditTab(null);
    }
  }, [editTab]);
  var addButton = /*#__PURE__*/_createElement(IconWrapper, {
    className: mergeClassName(addable === "disabled" ? "disabled" : undefined),
    style: {
      marginLeft: 8
    },
    onClick: function onClick() {
      return onAdd == null ? void 0 : onAdd(tab);
    }
  }, _IconAdd || (_IconAdd = /*#__PURE__*/_createElement(IconAdd, null)));
  var prevButton = /*#__PURE__*/_createElement(IconWrapper, {
    className: mergeClassName(arrowState.canTranslatePrev ? undefined : "disabled"),
    onClick: arrowState.canTranslatePrev ? handleTranslatePrev : undefined
  }, _IconArrowLeft || (_IconArrowLeft = /*#__PURE__*/_createElement(IconArrowLeft, null)));
  var nextButton = /*#__PURE__*/_createElement(IconWrapper, {
    className: mergeClassName(arrowState.canTranslateNext ? undefined : "disabled"),
    onClick: arrowState.canTranslateNext ? handleTranslateNext : undefined
  }, _IconArrowRight || (_IconArrowRight = /*#__PURE__*/_createElement(IconArrowRight, null)));
  var Handler = DND.Handler;
  return /*#__PURE__*/_createElement(SheetTabsWrapper, mergeRestProps(rest, 'wdn-sheet-tabs'), /*#__PURE__*/_createElement(LeftIcons, null, /*#__PURE__*/_createElement(SheetSelect, {
    tabs: tabs,
    tab: tab,
    setActiveTab: setTab,
    disabled: !switchable,
    renderInlineTab: renderInlineTab
  }), addable ? (renderAddButton == null ? void 0 : renderAddButton()) || (addable === "disabled" ? addButton : /*#__PURE__*/_createElement(Tooltip, {
    title: t('wdn_sheet_tabs_add'),
    placement: "top"
  }, addButton)) : null), /*#__PURE__*/_createElement(SheetTabsProvider.Provider, {
    value: sheetTabsContext
  }, movable && Handler ? /*#__PURE__*/_createElement(Handler.DragDropContext, {
    onDragStart: handleDragStart,
    onDragEnd: handleDragEnd
  }, /*#__PURE__*/_createElement(Handler.Droppable, {
    droppableId: "wdn-sheet-tabs",
    direction: "horizontal"
  }, function (dropProvided) {
    return /*#__PURE__*/_createElement(TabsWrapper, _extends({
      ref: mergeRef(dropProvided.innerRef, contentRef)
    }, dropProvided.droppableProps, {
      onScroll: handleScrollToEdge
    }), tabsWithoutHidden.map(function (tabInfo, index) {
      var key = tabInfo.key,
        title = tabInfo.title;
      return /*#__PURE__*/_createElement(Handler.Draggable, {
        key: key,
        draggableId: key,
        index: index
      }, function (dragProvider, dragSnapshot) {
        return renderReactNode(renderTab, /*#__PURE__*/_createElement(Tab, _extends({}, dragProvider.draggableProps, dragProvider.dragHandleProps, {
          ref: dragProvider.innerRef,
          tab: key,
          title: title,
          active: key === tab,
          editing: key === editTab,
          setActiveTab: setTab,
          onEditingTab: handleEditTab,
          onQuitEditingTab: handleQuitEditTab,
          switchable: switchable,
          renamable: renamable,
          onRename: onRename,
          onContextMenu: onContextMenu,
          style: getDraggingTabStyle(dragSnapshot.isDragging, dragProvider.draggableProps.style)
        })), {
          key: key
        });
      });
    }));
  })) : /*#__PURE__*/_createElement(TabsWrapper, {
    ref: contentRef,
    onScroll: handleScrollToEdge
  }, tabsWithoutHidden.map(function (tabInfo) {
    var key = tabInfo.key,
      title = tabInfo.title;
    return renderReactNode(renderTab, /*#__PURE__*/_createElement(Tab, {
      key: key,
      tab: key,
      title: title,
      active: key === tab,
      editing: key === editTab,
      setActiveTab: setTab,
      onEditingTab: handleEditTab,
      onQuitEditingTab: handleQuitEditTab,
      switchable: switchable,
      renamable: renamable,
      onRename: onRename,
      onContextMenu: onContextMenu
    }), {
      key: key
    });
  }))), arrowState.arrowVisible ? /*#__PURE__*/_createElement(RightIcons, null, arrowState.canTranslatePrev ? /*#__PURE__*/_createElement(Tooltip, {
    title: t('wdn_sheet_tabs_scroll_left'),
    placement: "top"
  }, prevButton) : prevButton, arrowState.canTranslateNext ? /*#__PURE__*/_createElement(Tooltip, {
    title: t('wdn_sheet_tabs_scroll_right'),
    placement: "top"
  }, nextButton) : nextButton) : null);
}));
var DND = {};
export var SheetTabs = combineReactComponent(SheetTabsRaw, {
  init: function init(handler) {
    return DND.Handler = handler;
  },
  Tab: Tab,
  InlineTab: InlineTab
});
//# sourceMappingURL=SheetTabs.js.map