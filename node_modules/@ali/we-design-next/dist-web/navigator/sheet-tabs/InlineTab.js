import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _HideIcon, _IconSelected;
var _excluded = ["disabled", "searchValue", "tab", "title", "hidden", "selected", "onClick", "tooltipTitle", "className"];
import React from "react";
var _createElement = /*#__PURE__*/React.createElement;
import { IconSelected } from "../../basic/icon";
import { mergeClassName } from "../../common";
import { HighlightText, ItemWrapper, ItemLeftWrapper, HideIcon } from "./styled";
import { Tooltip } from "../../display/tooltip/Tooltip";
var SearchHighlightItem = /*#__PURE__*/React.memo(function (props) {
  var searchValue = props.searchValue,
    title = props.title;
  if (!searchValue) {
    return /*#__PURE__*/_createElement(React.Fragment, null, title);
  }
  var index = title.toLowerCase().indexOf(searchValue.toLowerCase());
  if (index < 0) {
    return /*#__PURE__*/_createElement(React.Fragment, null, title);
  }
  return /*#__PURE__*/_createElement(React.Fragment, null, title.slice(0, index), /*#__PURE__*/_createElement(HighlightText, null, title.slice(index, index + searchValue.length)), title.slice(index + searchValue.length));
});
export var InlineTab = /*#__PURE__*/React.memo(function (props) {
  var disabled = props.disabled,
    searchValue = props.searchValue,
    _props$tab = props.tab,
    tab = _props$tab === void 0 ? '' : _props$tab,
    title = props.title,
    hidden = props.hidden,
    selected = props.selected,
    _onClick = props.onClick,
    tooltipTitle = props.tooltipTitle,
    className = props.className,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var content = /*#__PURE__*/_createElement(ItemWrapper, _extends({
    onClick: function onClick() {
      return _onClick == null ? void 0 : _onClick(tab);
    },
    className: mergeClassName(disabled ? "disabled" : undefined, className)
  }, rest), /*#__PURE__*/_createElement(ItemLeftWrapper, null, /*#__PURE__*/_createElement(SearchHighlightItem, {
    searchValue: searchValue,
    title: title
  }), hidden ? _HideIcon || (_HideIcon = /*#__PURE__*/_createElement(HideIcon, null)) : null), selected ? _IconSelected || (_IconSelected = /*#__PURE__*/_createElement(IconSelected, null)) : null);
  return tooltipTitle ? /*#__PURE__*/_createElement(Tooltip, {
    placement: "top",
    title: tooltipTitle
  }, content) : content;
});
//# sourceMappingURL=InlineTab.js.map