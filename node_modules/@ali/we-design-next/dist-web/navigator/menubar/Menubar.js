import React, { useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { MenubarWrap, MenubarItemWrap } from "./styled";
import { useFocusTarget, KEY_CODES, useDefaultProp } from "../../common";
import { Menu } from "../../display/menu";
import { flattenNested, isNormalized, isEnabled } from "../../basic/list/nested";
import { Popover } from "../../display/popover";
export var Menubar = /*#__PURE__*/React.memo(function (props) {
  var _path = props.path,
    onPathChange = props.onPathChange,
    _props$menus = props.menus,
    menus = _props$menus === void 0 ? [] : _props$menus,
    _onSelect = props.onSelect;
  var _useDefaultProp = useDefaultProp([], _path, onPathChange),
    path = _useDefaultProp[0],
    setPath = _useDefaultProp[1];
  var ref = useRef(null);
  var _useFocusTarget = useFocusTarget(ref),
    focusTargetId = _useFocusTarget[0],
    focusTarget = _useFocusTarget[1],
    focusOwner = _useFocusTarget[2];
  var onKeydown = function onKeydown(e) {
    var idx = menus.findIndex(function (m) {
      return m.key === path[0];
    });
    if (idx !== -1) {
      if (e.keyCode === KEY_CODES.RIGHT && idx < menus.length - 1) {
        focusTarget(function () {
          return setPath([menus[idx + 1].key, undefined]);
        });
      } else if (e.keyCode === KEY_CODES.LEFT && idx > 0) {
        focusTarget(function () {
          return setPath([menus[idx - 1].key, undefined]);
        });
      } else if (e.keyCode === KEY_CODES.DOWN && !path[1]) {
        var menu = menus.find(function (m) {
          return m.key === path[0];
        });
        if (menu) {
          var its = flattenNested(menu.items || []).filter(isNormalized).filter(isEnabled);
          var k = its[0].key;
          focusTarget(function () {
            return setPath([path[0], k]);
          });
        }
      } else if (e.keyCode === KEY_CODES.ESC) {
        focusOwner(function () {
          setPath([]);
          e.stopPropagation();
        });
      }
    }
  };
  return /*#__PURE__*/_createElement(MenubarWrap, {
    ref: ref,
    tabIndex: -1,
    onKeyDown: onKeydown
  }, menus.map(function (it) {
    return /*#__PURE__*/_createElement(Popover, {
      placement: "bottomLeft",
      animation: true,
      content: /*#__PURE__*/_createElement(Menu, {
        id: focusTargetId,
        items: it.items,
        path: [].concat(path).splice(1),
        onPathChange: function onPathChange(p) {
          return setPath([it.key].concat(p));
        },
        onSelect: function onSelect(p) {
          return _onSelect && _onSelect([it.key].concat(p));
        }
      }),
      visible: path[0] === it.key && path.length > 1,
      trigger: "click",
      onVisibleChange: function onVisibleChange(v) {
        if (v) {
          focusTarget(function () {
            return setPath([it.key, undefined]);
          });
        } else {
          if (it.key === path[0]) {
            setPath([path[0]]);
          }
        }
      }
    }, /*#__PURE__*/_createElement(MenubarItemWrap, {
      active: path[0] === it.key,
      onMouseEnter: function onMouseEnter() {
        if (!!path[0] && path[0] !== it.key) {
          focusTarget(function () {
            return setPath([it.key, undefined]);
          });
        }
      }
    }, it.title));
  }));
});
//# sourceMappingURL=Menubar.js.map