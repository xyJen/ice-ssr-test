import React, { useState, useRef, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { useTranslate } from "../../../locale";
import { COLORS, CSS_BORDER_BOX } from "../../../common";
var LAST_CHAR_NUM = 8;
var MiddleEllipsisText = function MiddleEllipsisText(props) {
  var _useState = useState(false),
    isTextOverflow = _useState[0],
    setTextOverflow = _useState[1];
  var subTitleRf = useRef(null);
  var _React$useState = React.useState(0),
    divideIndex = _React$useState[0],
    setDivideIndex = _React$useState[1];
  var text = props.text;
  useEffect(function () {
    if (subTitleRf.current) {
      var rect = subTitleRf.current.getBoundingClientRect();
      var containerWidth = rect.width;
      var textWidth = subTitleRf.current.scrollWidth;
      if (containerWidth > 0 && textWidth > containerWidth) {
        setTextOverflow(true);
        // 一行展示不下时，中间省略，截取最后X个字符最后显示
        var lastLen = Math.min(text == null ? void 0 : text.length, LAST_CHAR_NUM);
        var diIndex = (text == null ? void 0 : text.length) - lastLen;
        setDivideIndex(diIndex);
      }
    }
  }, [text]);
  if (!text) return null;
  var preText = text == null ? void 0 : text.slice(0, divideIndex);
  var nextText = text == null ? void 0 : text.slice(divideIndex);
  return /*#__PURE__*/_createElement(SubTitleWrapper, {
    ref: subTitleRf
  }, isTextOverflow ? /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement("p", null, preText), /*#__PURE__*/_createElement("p", null, nextText)) : /*#__PURE__*/_createElement("span", null, text));
};
var MemberItemName = /*#__PURE__*/React.memo(function (props) {
  var name = props.name;
  if (name.indexOf('<red>') === -1 || name.indexOf('</red>') === -1) {
    return /*#__PURE__*/_createElement("span", null, name);
  }
  try {
    var arr = name.split(/<red>/g).map(function (v) {
      var ret = v.split(/<\/red>/);
      if (ret.length > 1) {
        return [[ret[0], {
          bold: true
        }], [ret[1]]];
      }
      return [[ret[0]]];
    });
    var titleArr = arr.reduce(function (pre, cur) {
      return pre.concat(cur);
    }, []);
    return /*#__PURE__*/_createElement("span", null, titleArr.map(function (v) {
      if (v[1] && v[1].bold) {
        return /*#__PURE__*/_createElement("span", {
          style: {
            color: COLORS.COMMON.LINK_COLOR
          }
        }, v[0]);
      }
      return v[0];
    }));
  } catch (e) {
    return /*#__PURE__*/_createElement("span", null, name.replace(/(<red>|<\/red>)/g, ''));
  }
});
var MentionItemInner = /*#__PURE__*/React.memo(function (props) {
  var avatar = props.avatar,
    name = props.name,
    description = props.description;
  var descriptionText = !description ? '' : typeof description === 'string' ? description : description.outside ? '组织外' : description.department;
  return /*#__PURE__*/_createElement(MentionItemInnerWrapper, null, /*#__PURE__*/_createElement("div", null, avatar ? /*#__PURE__*/_createElement("img", {
    src: avatar
  }) : /*#__PURE__*/_createElement("span", null, name.replace(/(<red>|<\/red>)/g, ''))), /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(MemberItemName, {
    name: name
  })), /*#__PURE__*/_createElement("span", null, descriptionText)));
});
var MentionItemInnerWrapper = /*#__PURE__*/styled.div(["display:flex;cursor:pointer;width:100%;overflow:hidden;& > div{&:first-child{width:36px;display:flex;align-items:center;img{width:28px;height:28px;border-radius:4px;}span{width:28px;height:28px;line-height:26px;border-radius:4px;overflow:hidden;color:rgb(255,255,255);padding:2px;font-size:12px;text-align:center;background-color:rgb(0,137,255);}}&:nth-child(2){flex:1;overflow:hidden;& > div:first-child{height:20px;line-height:20px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-family:sans-serif;& > span{color:#191f25;&:first-child{font-size:14px;line-height:20px;}&.sub-title{display:inline-block;font-size:12px;margin-left:2px;}}&:only-child{height:38px;line-height:38px;}}& > span{display:block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;&:last-child{font-size:12px;line-height:17px;color:rgba(17,31,44,0.4);}}}&:last-child{display:flex;flex-direction:column;justify-content:flex-end;font-size:12px;line-height:15px;color:rgba(17,31,44,0.4);}}"]);
export var MentionItem = /*#__PURE__*/React.memo(function (props) {
  var index = props.index,
    data = props.data,
    style = props.style;
  var t = useTranslate();
  var item = data.items[index];
  var handleMouseEnter = function handleMouseEnter() {
    return data.onMouseEnter(index);
  };
  var handleClick = function handleClick(e) {
    data.onClick(index);
    e.stopPropagation();
  };
  return /*#__PURE__*/_createElement(MemberItemWrapper, {
    key: "" + index,
    style: style,
    active: data.active === index,
    onMouseEnter: handleMouseEnter,
    onClick: handleClick
  }, /*#__PURE__*/_createElement(MentionItemInner, {
    avatar: item.avatar,
    name: item.name,
    description: item.description
  }));
});
var MemberItemWrapper = /*#__PURE__*/styled.div(["", " display:flex;padding:8px 6px;border-radius:4px;", ";"], CSS_BORDER_BOX, function (_ref) {
  var active = _ref.active;
  return active && "background: " + COLORS.OTHERS.DAO_HOVER_BG_COLOR + ";";
});
var SubTitleWrapper = /*#__PURE__*/styled.div(["display:flex;flex-direction:row;width:fit-content;max-width:100%;& > span,& > p{font-size:12px;color:rgba(17,31,44,0.4);line-height:17px;}& > span{&:only-child{white-space:nowrap;width:fit-content;}}& > p{margin:0;&:first-child{flex:1;display:block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;}&:last-child{width:fit-content;}}"]);
//# sourceMappingURL=MemberItem.js.map