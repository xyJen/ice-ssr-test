import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
var _IconSearch, _IconLoading;
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useEffect, useMemo, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useEventCallback } from "../../common/react";
import { Input } from "../../form/input";
import { IconLoading, IconSearch } from "../../basic/icon";
import { MentionList } from "./MentionList";
import { MentionWrapper } from "./styled";
export var Mention = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var placeholder = props.placeholder,
    _props$onRequest = props.onRequest,
    onRequest = _props$onRequest === void 0 ? function () {
      return new Promise(function (r) {
        return r([]);
      });
    } : _props$onRequest,
    onSelect = props.onSelect;
  var _useState = useState([]),
    items = _useState[0],
    setItems = _useState[1];
  var _useState2 = useState('complete'),
    requestState = _useState2[0],
    setRequestState = _useState2[1];
  var _useState3 = useState(''),
    inputValue = _useState3[0],
    setInputValue = _useState3[1];
  var _useMemo = useMemo(function () {
      return new LastPromiseResolver(onRequest);
    }, [onRequest]),
    request = _useMemo.invoke;
  var handleRequest = useEventCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(searchText, page, origin) {
      var members, cloned;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setRequestState('requesting');
              _context.prev = 1;
              _context.next = 4;
              return request(searchText, page);
            case 4:
              members = _context.sent;
              if (members) {
                cloned = [].concat(origin);
                cloned.splice.apply(cloned, [page[0], page[1]].concat(members));
                setItems(cloned);
                setRequestState('complete');
              }
              _context.next = 11;
              break;
            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](1);
              setRequestState('error');
            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 8]]);
    }));
    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }());
  useEffect(function () {
    handleRequest(inputValue, [0, 10], []);
  }, []);
  return /*#__PURE__*/_createElement(MentionWrapper, {
    ref: ref
  }, /*#__PURE__*/_createElement(Input, {
    value: inputValue,
    prefix: _IconSearch || (_IconSearch = /*#__PURE__*/_createElement(IconSearch, null)),
    suffix: requestState === 'requesting' ? _IconLoading || (_IconLoading = /*#__PURE__*/_createElement(IconLoading, null)) : undefined,
    onChange: function onChange(e) {
      setItems([]);
      setInputValue(e.target.value);
      handleRequest(e.target.value, [0, 10], []);
    },
    placeholder: placeholder,
    bordered: false
  }), /*#__PURE__*/_createElement(MentionList, {
    items: items,
    onMention: function onMention() {
      return 1;
    },
    onLoadMore: function onLoadMore(i, count) {
      return handleRequest(inputValue, [i, count], items);
    }
  }));
}));
var LastPromiseResolver = function LastPromiseResolver(fn) {
  var _this = this;
  this.fn = void 0;
  this.current = null;
  this.invoke = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _len,
      _args,
      _key,
      _args3 = arguments;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            for (_len = _args3.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
              _args[_key] = _args3[_key];
            }
            return _context2.abrupt("return", new Promise(function (_resolve) {
              if (_this.current) {
                var _this$current = _this.current,
                  resolve = _this$current[0],
                  args = _this$current[1],
                  isResolving = _this$current[2];
                resolve(null);
                _this.current = [_resolve, _args, false];
                // do not trigger
              } else {
                _this.current = [_resolve, _args, false];
                _this.trigger();
              }
            }));
          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  this.trigger = function () {
    if (_this.current) {
      var _this$current2 = _this.current,
        resolve = _this$current2[0],
        args = _this$current2[1],
        isResolving = _this$current2[2];
      if (isResolving === false) {
        _this.current[2] = true;
        _this.fn.apply(_this, args).then(function (e) {
          if (_this.current && _this.current[0] === resolve) {
            _this.current = null;
            resolve(e);
          } else if (_this.current) {
            _this.trigger();
          }
        });
      }
    }
  };
  this.fn = fn;
};
//# sourceMappingURL=Mention.js.map