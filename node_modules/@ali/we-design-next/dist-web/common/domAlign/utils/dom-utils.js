import { utils } from "./utils";
import { isBorderBoxFn, getPBMWidth, getWHIgnoreDisplay, MARGIN_INDEX, BORDER_INDEX, CONTENT_INDEX } from "./size-utils";
var domUtils = {
  getParent: function getParent(element) {
    var parent = element;
    do {
      if (parent.nodeType === 11 && parent.host) {
        // ShadowRoot
        parent = parent.host;
      } else {
        parent = parent.parentNode;
      }
    } while (parent && parent.nodeType !== 1 && !utils.isDocument(parent)); // 非Element节点、document节点
    return parent;
  },
  viewportWidth: function viewportWidth(win) {
    // pc browser includes scrollbar in window.innerWidth
    var prop = "clientWidth";
    var doc = win.document;
    var body = doc.body;
    var documentElement = doc.documentElement;
    var documentElementProp = documentElement[prop];
    // 标准模式取 documentElement
    // backcompat 取 body
    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
  },
  viewportHeight: function viewportHeight(win) {
    // pc browser includes scrollbar in window.innerWidth
    var prop = "clientHeight";
    var doc = win.document;
    var body = doc.body;
    var documentElement = doc.documentElement;
    var documentElementProp = documentElement[prop];
    // 标准模式取 documentElement
    // backcompat 取 body
    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
  },
  docWidth: function docWidth(refWin) {
    var d = refWin.document;
    return Math.max(d.documentElement.scrollWidth, d.body.scrollWidth, domUtils.viewportWidth(refWin));
  },
  docHeight: function docHeight(refWin) {
    var d = refWin.document;
    return Math.max(
    // firefox chrome documentElement.scrollHeight< body.scrollHeight
    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
    d.documentElement.scrollHeight,
    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
    d.body.scrollHeight, domUtils.viewportHeight(refWin));
  },
  outerWidth: function outerWidth(el, includeMargin) {
    return el && getWHIgnoreDisplay(el, 'width', includeMargin ? MARGIN_INDEX : BORDER_INDEX);
  },
  outerHeight: function outerHeight(el, includeMargin) {
    return el && getWHIgnoreDisplay(el, 'height', includeMargin ? MARGIN_INDEX : BORDER_INDEX);
  },
  width: function width(elem, v) {
    var val = v;
    if (val !== undefined) {
      if (elem) {
        var isBorderBox = isBorderBoxFn(elem);
        if (isBorderBox) {
          val += getPBMWidth(elem, ['padding', 'border'], ['Left', 'Right']);
        }
        return utils.css(elem, 'width', val);
      }
      return undefined;
    }
    return elem && getWHIgnoreDisplay(elem, 'width', CONTENT_INDEX);
  },
  height: function height(elem, v) {
    var val = v;
    if (val !== undefined) {
      if (elem) {
        var isBorderBox = isBorderBoxFn(elem);
        if (isBorderBox) {
          val += getPBMWidth(elem, ['padding', 'border'], ['Top', 'Bottom']);
        }
        return utils.css(elem, 'height', val);
      }
      return undefined;
    }
    return elem && getWHIgnoreDisplay(elem, 'height', CONTENT_INDEX);
  }
};
export { domUtils };
//# sourceMappingURL=dom-utils.js.map