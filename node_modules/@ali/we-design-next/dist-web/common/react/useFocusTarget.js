import { useRef } from 'react';
export var useFocusTarget = function useFocusTarget(ownerRef) {
  var idRef = useRef(undefined);
  var focusTarget = function focusTarget(fn) {
    idRef.current = randomId();
    fn();
    wait(function () {
      var id = idRef.current;
      if (id) {
        var ele = document.getElementById(id);
        if (ele) {
          ele.focus();
          return true;
        }
      }
      return false;
    });
  };
  var focusOwner = function focusOwner(fn) {
    idRef.current = undefined;
    fn();
    wait(function () {
      if (ownerRef.current) {
        ownerRef.current.focus();
        return true;
      }
      return false;
    });
  };
  return [idRef.current, focusTarget, focusOwner];
};
var waitId = null;
var wait = function wait(callback, timeout) {
  if (timeout === void 0) {
    timeout = 3000;
  }
  var inter = 10;
  var accInter = function accInter() {
    if (inter < 500) {
      inter = Math.min(500, inter * 2);
    }
  };
  var fn = function fn() {
    var success = callback();
    if (!success) {
      var now = Date.now();
      if (now - beginTime <= timeout) {
        if (waitId) {
          clearTimeout(waitId);
          waitId = null;
        }
        waitId = setTimeout(function () {
          waitId = null;
          fn();
        }, inter);
        accInter();
      }
    }
  };
  var beginTime = Date.now();
  fn();
};
var randomId = function randomId() {
  return (Date.now() % (1000 * 3600 * 24) * 10000 + Math.floor(Math.random() * 10000)).toString(32);
};
//# sourceMappingURL=useFocusTarget.js.map