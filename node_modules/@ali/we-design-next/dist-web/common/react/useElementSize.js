import { useEffect, useRef, useState } from 'react';
import ResizeObserver from 'resize-observer-polyfill';
var onResize = function onResize(ele, fn) {
  var observer = new ResizeObserver(function () {
    return fn({
      width: ele.clientWidth,
      height: ele.clientHeight
    });
  });
  observer.observe(ele);
  return function () {
    return observer.disconnect();
  };
};
export var useElementResize = function useElementResize(ref, fn) {
  useEffect(function () {
    if (ref.current) {
      return onResize(ref.current, fn);
    }
  }, [ref, fn]);
};
export var useElementSizeRef = function useElementSizeRef(ref) {
  var sizeRef = useRef({
    width: -1,
    height: -1
  });
  useElementResize(ref, function (size) {
    return sizeRef.current = size;
  });
  return sizeRef;
};
export var useElementSizeState = function useElementSizeState(ref) {
  var _useState = useState({
      width: -1,
      height: -1
    }),
    sizeState = _useState[0],
    setSizeState = _useState[1];
  useElementResize(ref, setSizeState);
  return sizeState;
};
//# sourceMappingURL=useElementSize.js.map