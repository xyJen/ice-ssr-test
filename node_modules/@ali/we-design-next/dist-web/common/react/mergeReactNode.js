import _extends from "@babel/runtime/helpers/extends";
import { cloneElement, isValidElement } from 'react';
import { mergeRef } from "./mergeRef";
export var mergeReactNode = function mergeReactNode(target, source, depth, curDepth) {
  if (depth === void 0) {
    depth = 0;
  }
  if (curDepth === void 0) {
    curDepth = depth;
  }
  if (target === null) {
    return target;
  }
  if (target === undefined) {
    return source;
  }
  if (! /*#__PURE__*/isValidElement(target)) {
    return target;
  }
  if (! /*#__PURE__*/isValidElement(source)) {
    return target;
  }
  if (target.type === source.type) {
    var toCloneProps = {};
    var sourceRef = source.ref;
    var targetRef = target.ref;
    var mergedRef = sourceRef && targetRef ? mergeRef(sourceRef, targetRef) : sourceRef || targetRef;
    if (mergedRef) {
      toCloneProps.ref = mergedRef;
    }
    var sourceKey = source.key;
    var targetKey = target.key;
    var toClonedKey = targetKey || sourceKey;
    if (toClonedKey) {
      toCloneProps.key = toClonedKey;
    }
    var _loop = function _loop(p) {
      var sourceProp = source.props[p];
      var targetProp = target.props[p];
      if (p === 'style') {
        var sourceStyle = sourceProp || {};
        var targetStyle = targetProp || {};
        toCloneProps[p] = _extends({}, sourceStyle, targetStyle);
      } else if (targetProp === undefined) {
        toCloneProps[p] = sourceProp;
      } else if ( /*#__PURE__*/isValidElement(sourceProp) && /*#__PURE__*/isValidElement(targetProp)) {
        toCloneProps[p] = mergeReactNode(targetProp, sourceProp, depth);
      } else if (typeof sourceProp === 'function' && typeof targetProp === 'function') {
        toCloneProps[p] = function () {
          sourceProp.apply(void 0, arguments);
          targetProp.apply(void 0, arguments);
        };
      }
    };
    for (var p in source.props) {
      _loop(p);
    }
    return /*#__PURE__*/cloneElement(target, toCloneProps);
  }
  if (curDepth > 0 && /*#__PURE__*/isValidElement(target.props.children)) {
    var mergedChildren = mergeReactNode(target.props.children, source, depth, curDepth - 1);
    return /*#__PURE__*/cloneElement(target, {}, mergedChildren);
  }
  return target;
};
//# sourceMappingURL=mergeReactNode.js.map