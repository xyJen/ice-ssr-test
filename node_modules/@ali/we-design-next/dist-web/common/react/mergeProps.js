import _extends from "@babel/runtime/helpers/extends";
import { mergeClassName } from "./mergeClassName";
export var mergeProps = function mergeProps(target, source) {
  var result = _extends({}, target);
  for (var key in source) {
    result[key] = mergeProp(key, target[key], source[key]);
  }
  return cleanProps(result);
};
export var absorbProps = function absorbProps(target, from) {
  var result = _extends({}, target);
  for (var key in result) {
    result[key] = mergeProp(key, target[key], from[key]);
  }
  return cleanProps(result);
};
var mergeProp = function mergeProp(key, target, source) {
  if (typeof target === 'undefined') {
    return source;
  }
  if (typeof source === 'undefined') {
    return target;
  }
  if (key === 'className' && typeof target === 'string' && typeof source === 'string') {
    return mergeClassName(target, source);
  }
  if (key === 'style' && typeof target === 'object' && typeof source === 'object') {
    return _extends({}, source, target);
  }
  if (typeof target === 'function' && typeof source === 'function') {
    return function () {
      target.apply(void 0, arguments);
      source.apply(void 0, arguments);
    };
  }
  return target;
};
var cleanProps = function cleanProps(props) {
  for (var key in props) {
    if (props[key] === undefined) {
      delete props[key];
    }
  }
  return props;
};
//# sourceMappingURL=mergeProps.js.map