import _extends from "@babel/runtime/helpers/extends";
import React, { createContext, useContext, useLayoutEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
/* 某些应用会将 i18next 版本锁定为较低版本（未导出 createInstance）TODO：移除此条 ignore 规则 */
/* eslint-disable import/no-named-as-default-member */
import i18next from 'i18next';
var resources = {};
var defaultLocale = 'zh-CN';
export var LocaleContext = /*#__PURE__*/createContext(defaultLocale);
export var LocaleProvider = function LocaleProvider(props) {
  useLayoutEffect(function () {
    globalLang.lang = props.value;
    return function () {
      return globalLang.lang = undefined;
    };
  }, [props.value]);
  return /*#__PURE__*/_createElement(LocaleContext.Provider, {
    value: props.value
  }, props.children);
};
export function defineLocale(lang, res) {
  resources[lang] = {
    translation: _extends({}, resources[lang] ? resources[lang].translation : {}, res)
  };
}
export function useLocale() {
  return useContext(LocaleContext);
}
export function useTranslate(locale) {
  var contextLocale = useContext(LocaleContext);
  var l = locale || contextLocale || defaultLocale;
  return getT(l);
}
var cacheT = {};
function getT(locale) {
  if (cacheT[locale]) {
    return cacheT[locale];
  }
  var inst = i18next.createInstance();
  inst.init({
    fallbackLng: defaultLocale,
    lng: locale,
    resources: resources
  });
  cacheT[locale] = inst.t.bind(inst);
  return cacheT[locale];
}
export function useDayjsLocale(locale) {
  var contextLocale = useContext(LocaleContext);
  var l = locale || contextLocale || defaultLocale;
  var DAYJS_LOCALE_MAP = {
    'zh-CN': 'zh-cn',
    zh_CN: 'zh-cn',
    'zh-TW': 'zh-tw',
    zh_TW: 'zh-tw',
    'zh-HK': 'zh-hk',
    zh_HK: 'zh-hk',
    ja: 'ja',
    ja_JP: 'ja',
    'ja-JP': 'ja',
    'en-US': 'en',
    en_US: 'en'
  };
  return DAYJS_LOCALE_MAP[l];
}
export var globalLang = {
  lang: undefined
};
//# sourceMappingURL=locale.js.map