import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _IconSelected;
var _excluded = ["items", "active", "onActiveChange", "onSelect", "keyboard", "renderItem"],
  _excluded2 = ["children", "active", "prefix", "suffix", "disabled"];
import React, { memo, forwardRef, useMemo, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { noop } from 'lodash-es';
import { mergeRestProps, spreadRestProps, mergeRef, cloneReactNode, useDefaultProp, useFocusTarget, renderReactNode, KEY_CODES } from "../../common";
import { IconSelected } from "../icon";
import { ListWrap, ListItemWrap, ListItemPrefix, ListItemSuffix, ListItemContent, ListDivider, ListItemGroupTitle } from "./styled";
import { flattenNested, loopNested, isEnabled, isCustomized, isNormalized } from "./nested";
export var List = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$items = props.items,
    items = _props$items === void 0 ? [] : _props$items,
    _active = props.active,
    onActiveChange = props.onActiveChange,
    _props$onSelect = props.onSelect,
    onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,
    _props$keyboard = props.keyboard,
    keyboard = _props$keyboard === void 0 ? true : _props$keyboard,
    renderItem = props.renderItem,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var wrapRef = useRef(null);
  var _useFocusTarget = useFocusTarget(wrapRef),
    focusTargetId = _useFocusTarget[0],
    focusTarget = _useFocusTarget[1],
    focusOwner = _useFocusTarget[2];
  var _useDefaultProp = useDefaultProp(undefined, _active, onActiveChange),
    active = _useDefaultProp[0],
    setActive = _useDefaultProp[1];
  var onKeyDown = keyboard ? function (e) {
    var kbKey = e.key.toLowerCase();
    var isArrowUp = kbKey === 'arrowup' || e.keyCode === KEY_CODES.UP;
    var isArrowDown = kbKey === 'arrowdown' || e.keyCode === KEY_CODES.DOWN;
    var isEnter = kbKey === 'enter' || e.keyCode === KEY_CODES.ENTER;
    var flattenedItems = flattenNested(items);
    var flattenedEnabledKeys = flattenedItems.filter(isEnabled).map(function (it) {
      return it.key;
    });

    // 键盘导航到 content 类型的选项，需尝试主动 focus
    var setActiveFromKeyboard = function setActiveFromKeyboard(key, current) {
      var targetItem = flattenedItems.find(function (it) {
        return it.key === key;
      });
      if (targetItem) {
        var fn = function fn() {
          return setActive(key, {
            from: 'keyboard'
          });
        };
        var currentItem = current ? flattenedItems.find(function (it) {
          return it.key === current;
        }) : undefined;
        if (isCustomized(targetItem)) {
          focusTarget(fn);
        } else if (currentItem && isCustomized(currentItem)) {
          focusOwner(fn);
        } else {
          fn();
        }
      }
    };
    var i = active ? flattenedEnabledKeys.findIndex(function (key) {
      return key === active;
    }) : -1;
    if (isArrowDown) {
      var j = i === -1 ? 0 : i + 1;
      if (j < flattenedEnabledKeys.length) {
        var nextKey = flattenedEnabledKeys[j];
        setActiveFromKeyboard(nextKey, active);
        e.stopPropagation();
      }
    } else if (isArrowUp) {
      var _j = i === -1 ? flattenedEnabledKeys.length - 1 : i - 1;
      if (_j >= 0) {
        var prevKey = flattenedEnabledKeys[_j];
        setActiveFromKeyboard(prevKey, active);
        e.stopPropagation();
      }
    } else if (isEnter) {
      if (active !== undefined) {
        onSelect(active);
        e.stopPropagation();
      }
    }
  } : undefined;
  var sourceItems = useMemo(function () {
    var its = [];
    loopNested(items, function (it) {
      return its.push(it);
    }, function (it) {
      return its.push(it);
    }, function (s) {
      return {
        key: s,
        title: s
      };
    });
    return its;
  }, [items]);

  // 列表项中，若有任意一项有前缀/后缀，那么其他的项即使没有前后缀，也应空出前后缀的位置
  var _useMemo = useMemo(function () {
      var normalizedItems = flattenNested(items).filter(isNormalized);
      return [normalizedItems.findIndex(function (it) {
        return !!it.prefix;
      }) !== -1, normalizedItems.findIndex(function (it) {
        return !!it.suffix || !!it.selected;
      }) !== -1];
    }, [items]),
    hasPrefix = _useMemo[0],
    hasSuffix = _useMemo[1];
  return /*#__PURE__*/_createElement(ListWrap, _extends({
    ref: mergeRef(ref, wrapRef),
    tabIndex: -1
  }, mergeRestProps(rest, 'wdn-list', {}, {
    onKeyDown: onKeyDown
  })), sourceItems.map(function (it) {
    if (Array.isArray(it) && it[0] === 'divider') {
      return /*#__PURE__*/_createElement(ListDivider, {
        key: it[1],
        role: "separator"
      });
    } else if (Array.isArray(it) && it[0] === 'group') {
      return /*#__PURE__*/_createElement(ListItemGroupTitle, {
        key: it[2]
      }, it[1]);
    } else if ('content' in it) {
      return /*#__PURE__*/_createElement(React.Fragment, {
        key: it.key
      }, cloneReactNode(it.content, {
        key: it.key,
        id: focusTargetId,
        onMouseEnter: function onMouseEnter() {
          return setActive(it.key, {
            from: 'mouse'
          });
        },
        onMouseLeave: function onMouseLeave() {
          return setActive(undefined, {
            from: 'mouse'
          });
        }
      }));
    } else {
      var prefix = hasPrefix ? function (p) {
        return p || null;
      } : function (p) {
        return p;
      };
      var suffix = hasSuffix ? function (p) {
        return p || null;
      } : function (p) {
        return p;
      };
      return renderReactNode(renderItem, /*#__PURE__*/_createElement(ListItem, _extends({
        key: it.key,
        prefix: prefix(it.prefix),
        suffix: suffix(it.selected ? _IconSelected || (_IconSelected = /*#__PURE__*/_createElement(IconSelected, null)) : it.suffix),
        active: it.key === active,
        disabled: it.disabled,
        onMouseEnter: it.disabled ? undefined : function () {
          return setActive(it.key, {
            from: 'mouse'
          });
        },
        onMouseLeave: it.disabled ? undefined : function () {
          return setActive(undefined, {
            from: 'mouse'
          });
        },
        onClick: it.disabled ? undefined : function () {
          return onSelect(it.key);
        }
      }, spreadRestProps(rest, it.key)), it.title), {
        key: it.key
      });
    }
  }));
}));
List.displayName = 'List';
export var ListItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$children = props.children,
    children = _props$children === void 0 ? '' : _props$children,
    _props$active = props.active,
    active = _props$active === void 0 ? false : _props$active,
    prefix = props.prefix,
    suffix = props.suffix,
    _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? false : _props$disabled,
    rest = _objectWithoutPropertiesLoose(props, _excluded2);
  return /*#__PURE__*/_createElement(ListItemWrap, _extends({
    ref: ref,
    isActive: active,
    disabled: disabled
  }, mergeRestProps(rest, 'wdn-listitem')), prefix !== undefined ? /*#__PURE__*/_createElement(ListItemPrefix, null, prefix) : null, /*#__PURE__*/_createElement(ListItemContent, null, children), suffix !== undefined ? /*#__PURE__*/_createElement(ListItemSuffix, null, suffix) : null);
}));
ListItem.displayName = 'ListItem';
//# sourceMappingURL=List.js.map