export var loopNested = function loopNested(nested, pushItem, pushRest, fromString) {
  var restIdx = 0;
  for (var i = 0; i < nested.length; i++) {
    var it = nested[i];
    if (it === 'divider') {
      if (i !== 0 && i !== nested.length - 1) {
        pushRest(['divider', restIdx++]);
      }
    } else if (typeof it === 'string') {
      pushItem(fromString(it));
    } else if ('key' in it && typeof it.key === 'string') {
      pushItem(it);
    } else if ('title' in it && 'items' in it && Array.isArray(it.items)) {
      if (i !== 0) {
        var prevItem = nested[i - 1];
        if (typeof prevItem !== 'string' && 'title' in prevItem && 'items' in prevItem && Array.isArray(prevItem.items)) {
          // do nothing
        } else {
          pushRest(['divider', restIdx++]);
        }
      }
      pushRest(['group', it.title, restIdx++]);
      loopNested(it.items, pushItem, pushRest, fromString);
      if (i !== nested.length - 1) {
        // 最后一个分隔线不推
        pushRest(['divider', restIdx++]);
      }
    }
  }
};
export var flattenNested = function flattenNested(nested, fromString) {
  var res = [];
  loopNested(nested, function (t) {
    return res.push(t);
  }, function () {
    return 0;
  }, fromString || function (key) {
    return {
      key: key,
      title: key
    };
  });
  return res;
};
export var isNormalized = function isNormalized(t) {
  return 'title' in t && !!t.title;
};
export var isCustomized = function isCustomized(t) {
  return !isNormalized(t);
};
export var isEnabled = function isEnabled(t) {
  return !isNormalized(t) || !t.disabled;
};
//# sourceMappingURL=nested.js.map