import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { render, fireEvent, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { List } from "../index";
import { KEY_CODES } from "../../../common";
test('List: should render items.', function () {
  render( /*#__PURE__*/_createElement(List, {
    items: ['Item1', 'Item2', 'Item3']
  }));
  expect(screen.queryByText('Item1')).toBeInTheDocument();
  expect(screen.queryByText('Item2')).toBeInTheDocument();
  expect(screen.queryByText('Item3')).toBeInTheDocument();
  expect(screen.queryByText('Item4')).toBeNull();
});
test('List: should render divider.', function () {
  render( /*#__PURE__*/_createElement(List, {
    items: ['Item1', 'divider', 'Item3']
  }));
  expect(screen.queryByRole('separator')).toBeInTheDocument();
});
test('List: should render group title.', function () {
  render( /*#__PURE__*/_createElement(List, {
    items: ['Item1', {
      title: 'Group1',
      items: ['Item2', 'Item3']
    }, 'Item4']
  }));
  expect(screen.queryByText('Item1')).toBeInTheDocument();
  expect(screen.queryByText('Group1')).toBeInTheDocument();
  expect(screen.queryByText('Item2')).toBeInTheDocument();
  expect(screen.queryByText('Item3')).toBeInTheDocument();
});
test('List: should render items (normalized).', function () {
  render( /*#__PURE__*/_createElement(List, {
    items: ['Item1', 'Item2', 'Item3'].map(function (s) {
      return {
        key: s,
        title: s
      };
    })
  }));
  expect(screen.queryByText('Item1')).toBeInTheDocument();
  expect(screen.queryByText('Item2')).toBeInTheDocument();
  expect(screen.queryByText('Item3')).toBeInTheDocument();
  expect(screen.queryByText('Item4')).toBeNull();
});
test('List: should render custom items (normalized).', function () {
  render( /*#__PURE__*/_createElement(List, {
    items: ['Item1', 'Item2', 'Item3'],
    renderItem: function renderItem(k) {
      return /*#__PURE__*/_createElement(List.Item, null, k.key + '-C');
    }
  }));
  expect(screen.queryByText('Item1-C')).toBeInTheDocument();
  expect(screen.queryByText('Item2-C')).toBeInTheDocument();
  expect(screen.queryByText('Item3-C')).toBeInTheDocument();
});
test('List: should render custom items (content).', function () {
  render( /*#__PURE__*/_createElement(List, {
    items: ['Item1', 'Item2', 'Item3'].map(function (s) {
      return {
        key: s,
        content: /*#__PURE__*/_createElement("span", null, s + '-C')
      };
    })
  }));
  expect(screen.queryByText('Item1-C')).toBeInTheDocument();
  expect(screen.queryByText('Item2-C')).toBeInTheDocument();
  expect(screen.queryByText('Item3-C')).toBeInTheDocument();
});
test('List: should trigger active change when mouse enter.', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
  var fn;
  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          fn = jest.fn();
          render( /*#__PURE__*/_createElement(List, {
            onActiveChange: fn,
            items: ['Item1', 'Item2', 'Item3']
          }));
          expect(fn).not.toHaveBeenCalled();
          fireEvent.mouseEnter(screen.getByText('Item2'));
          expect(fn).toHaveBeenCalled();
          expect(fn).toHaveBeenCalledTimes(1);
          expect(fn).toHaveBeenLastCalledWith('Item2', {
            from: 'mouse'
          });
          fireEvent.mouseEnter(screen.getByText('Item1'));
          expect(fn).toHaveBeenCalledTimes(2);
          expect(fn).toHaveBeenLastCalledWith('Item1', {
            from: 'mouse'
          });
        case 10:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));
test('List: should trigger active change for keyboard event.', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
  var fn, r, list;
  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          fn = jest.fn();
          r = render( /*#__PURE__*/_createElement(List, {
            id: 'list',
            onActiveChange: fn,
            items: ['Item1', 'Item2', 'Item3']
          }));
          expect(fn).not.toHaveBeenCalled();
          fireEvent.mouseEnter(screen.getByText('Item1')); // make it active
          list = r.container.querySelector('.wdn-list');
          fireEvent.keyDown(list, {
            keyCode: KEY_CODES.DOWN
          });
          expect(fn).toHaveBeenCalledTimes(2);
          expect(fn).toHaveBeenLastCalledWith('Item2', {
            from: 'keyboard'
          });
          fireEvent.keyDown(list, {
            keyCode: KEY_CODES.DOWN
          });
          expect(fn).toHaveBeenCalledTimes(3);
          expect(fn).toHaveBeenLastCalledWith('Item3', {
            from: 'keyboard'
          });
          fireEvent.keyDown(list, {
            keyCode: KEY_CODES.DOWN
          });
          expect(fn).toHaveBeenCalledTimes(3);
          fireEvent.keyDown(list, {
            keyCode: KEY_CODES.UP
          });
          expect(fn).toHaveBeenCalledTimes(4);
          expect(fn).toHaveBeenLastCalledWith('Item2', {
            from: 'keyboard'
          });
        case 16:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2);
})));
test('List: should trigger on select for mouse click event.', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
  var fn, item1;
  return _regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          fn = jest.fn();
          render( /*#__PURE__*/_createElement(List, {
            id: 'list',
            onSelect: fn,
            items: ['Item1', 'Item2', 'Item3']
          }));
          item1 = screen.getByText('Item1');
          fireEvent.click(item1);
          expect(fn).toHaveBeenCalled();
        case 5:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3);
})));
test('List: should trigger on select for keyboard event.', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
  var fn, r, list;
  return _regeneratorRuntime.wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          fn = jest.fn();
          r = render( /*#__PURE__*/_createElement(List, {
            id: 'list',
            onSelect: fn,
            items: ['Item1', 'Item2', 'Item3']
          }));
          fireEvent.mouseEnter(screen.getByText('Item1')); // make it active
          list = r.container.querySelector('.wdn-list');
          fireEvent.keyDown(list, {
            keyCode: KEY_CODES.ENTER
          });
          expect(fn).toHaveBeenCalled();
        case 6:
        case "end":
          return _context4.stop();
      }
    }
  }, _callee4);
})));
//# sourceMappingURL=List.test.js.map