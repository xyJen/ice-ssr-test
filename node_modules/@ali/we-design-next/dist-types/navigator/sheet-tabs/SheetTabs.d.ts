import React, { ReactElement } from "react";
import { IRestProps, IRenderReactNode } from "../../common";
import type { IMoveHandler } from "./MoveHandler";
export declare type TabInfo = {
    key: string;
    title: string;
    hidden?: boolean;
};
export declare type ISheetTabsProps = {
    /**
     * 标签项
     */
    tabs: TabInfo[];
    /**
     * 默认选中的标签的key
     */
    defaultTab?: string;
    /**
     * 选中的标签的key
     */
    tab?: string;
    /**
     * 标签切换时的回调
     */
    onTabChange?: (key: string) => void;
    /**
     * 标签添加时的回调
     */
    onAdd?: (after: string | null) => void;
    /**
     * 标签重命名时的回调
     */
    onRename?: (key: string, title: string) => void;
    /**
     * 标签移动时的回调
     */
    onMove?: (key: string, after: string | null) => void;
    /**
     * 标签触发右键菜单时的回调
     */
    onContextMenu?: (key: string, e: React.MouseEvent) => void;
    /**
     * 标签是否可切换
     */
    switchable?: boolean;
    /**
     * 标签是否可移动
     */
    movable?: boolean;
    /**
     * 标签是否可添加，默认显示
     * true显示，false不显示, disabled表示显示但是点击无效
     */
    addable?: boolean | "disabled";
    /**
     * 标签是否可以重命名
     */
    renamable?: boolean;
    /**
     * 标签自定义渲染
     */
    renderTab?: IRenderReactNode<{
        key: string;
    }>;
    /**
     * 选项列表的标签自定义渲染
     */
    renderInlineTab?: IRenderReactNode<{
        key: string;
    }>;
    /**
     * 添加按钮自定义渲染
     */
    renderAddButton?: () => ReactElement;
} & IRestProps;
declare type ISheetTabsHandler = {
    startEdit: () => void;
};
interface ISheetTabsContext {
    editHandlers: React.MutableRefObject<Record<string, (key: string) => void>>;
}
export declare const SheetTabsProvider: React.Context<ISheetTabsContext>;
export declare const SheetTabs: React.NamedExoticComponent<{
    /**
     * 标签项
     */
    tabs: TabInfo[];
    /**
     * 默认选中的标签的key
     */
    defaultTab?: string | undefined;
    /**
     * 选中的标签的key
     */
    tab?: string | undefined;
    /**
     * 标签切换时的回调
     */
    onTabChange?: ((key: string) => void) | undefined;
    /**
     * 标签添加时的回调
     */
    onAdd?: ((after: string | null) => void) | undefined;
    /**
     * 标签重命名时的回调
     */
    onRename?: ((key: string, title: string) => void) | undefined;
    /**
     * 标签移动时的回调
     */
    onMove?: ((key: string, after: string | null) => void) | undefined;
    /**
     * 标签触发右键菜单时的回调
     */
    onContextMenu?: ((key: string, e: React.MouseEvent) => void) | undefined;
    /**
     * 标签是否可切换
     */
    switchable?: boolean | undefined;
    /**
     * 标签是否可移动
     */
    movable?: boolean | undefined;
    /**
     * 标签是否可添加，默认显示
     * true显示，false不显示, disabled表示显示但是点击无效
     */
    addable?: boolean | "disabled" | undefined;
    /**
     * 标签是否可以重命名
     */
    renamable?: boolean | undefined;
    /**
     * 标签自定义渲染
     */
    renderTab?: IRenderReactNode<{
        key: string;
    }>;
    /**
     * 选项列表的标签自定义渲染
     */
    renderInlineTab?: IRenderReactNode<{
        key: string;
    }>;
    /**
     * 添加按钮自定义渲染
     */
    renderAddButton?: (() => ReactElement) | undefined;
} & IRestProps & React.RefAttributes<ISheetTabsHandler>> & {
    readonly type: React.ForwardRefExoticComponent<{
        /**
         * 标签项
         */
        tabs: TabInfo[];
        /**
         * 默认选中的标签的key
         */
        defaultTab?: string | undefined;
        /**
         * 选中的标签的key
         */
        tab?: string | undefined;
        /**
         * 标签切换时的回调
         */
        onTabChange?: ((key: string) => void) | undefined;
        /**
         * 标签添加时的回调
         */
        onAdd?: ((after: string | null) => void) | undefined;
        /**
         * 标签重命名时的回调
         */
        onRename?: ((key: string, title: string) => void) | undefined;
        /**
         * 标签移动时的回调
         */
        onMove?: ((key: string, after: string | null) => void) | undefined;
        /**
         * 标签触发右键菜单时的回调
         */
        onContextMenu?: ((key: string, e: React.MouseEvent) => void) | undefined;
        /**
         * 标签是否可切换
         */
        switchable?: boolean | undefined;
        /**
         * 标签是否可移动
         */
        movable?: boolean | undefined;
        /**
         * 标签是否可添加，默认显示
         * true显示，false不显示, disabled表示显示但是点击无效
         */
        addable?: boolean | "disabled" | undefined;
        /**
         * 标签是否可以重命名
         */
        renamable?: boolean | undefined;
        /**
         * 标签自定义渲染
         */
        renderTab?: IRenderReactNode<{
            key: string;
        }>;
        /**
         * 选项列表的标签自定义渲染
         */
        renderInlineTab?: IRenderReactNode<{
            key: string;
        }>;
        /**
         * 添加按钮自定义渲染
         */
        renderAddButton?: (() => ReactElement) | undefined;
    } & IRestProps & React.RefAttributes<ISheetTabsHandler>>;
} & {
    init: (handler?: IMoveHandler) => {
        DragDropContext: typeof import("react-beautiful-dnd").DragDropContext;
        Droppable: typeof import("react-beautiful-dnd").Droppable;
        Draggable: typeof import("react-beautiful-dnd").Draggable;
    } | undefined;
    Tab: React.FC<Partial<Pick<Pick<ISheetTabsProps, "onContextMenu" | "switchable" | "renamable" | "onRename"> & Omit<TabInfo, "key" | "hidden"> & {
        tab?: string | undefined;
        active?: boolean | undefined;
        editing?: boolean | undefined;
        setActiveTab?: ((key: string) => void) | undefined;
        onEditingTab?: ((key: string) => void) | undefined;
        onQuitEditingTab?: ((key: string) => void) | undefined;
        prefix?: React.ReactNode;
        suffix?: React.ReactNode;
    } & Omit<IRestProps, "id"> & React.RefAttributes<HTMLDivElement>, "title" | "prefix" | "suffix"> & Omit<IRestProps, "style" | "id">>>;
    InlineTab: React.FC<Partial<Pick<Omit<TabInfo, "key"> & {
        tab?: string | undefined;
        disabled?: boolean | undefined;
        searchValue?: string | undefined;
        selected?: boolean | undefined; /**
         * 默认选中的标签的key
         */
        onClick?: ((key: string) => void) | undefined;
        tooltipTitle?: React.ReactNode;
    } & IRestProps, "title" | "onClick" | "disabled" | "tooltipTitle">> & IRestProps>;
};
export {};
