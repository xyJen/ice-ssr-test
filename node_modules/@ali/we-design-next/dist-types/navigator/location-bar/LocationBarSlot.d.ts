import React from 'react';
export declare type IPriority = 1 | 2 | 3 | 4 | 5;
export declare const Priority: {
    min: () => IPriority;
    max: () => IPriority;
    isMin: (p: IPriority) => boolean;
    isMax: (p: IPriority) => boolean;
    next: (p: IPriority) => IPriority;
    prev: (p: IPriority) => IPriority;
};
declare type ISlotWidth = number | {
    staticMeasure: () => React.ReactElement;
};
declare type ISlotFixedProps = {
    key: string;
    mode: 'fixed';
    priority: IPriority;
    align: 'left' | 'right';
    width: ISlotWidth;
    children: React.ReactElement;
};
declare type ISlotDiscreteProps = {
    key: string;
    mode: 'discrete';
    priority: Array<IPriority>;
    align: 'left' | 'right';
    width: Array<ISlotWidth>;
    children: Array<React.ReactElement>;
};
declare type ISlotDynamicProps = {
    mode: 'dynamic';
    priority: IPriority;
    align: 'left' | 'right';
    width: 'free' | 'controlled';
    children: (width?: number) => React.ReactElement;
};
export declare type ILocationBarSlotProps = ISlotFixedProps | ISlotDiscreteProps | ISlotDynamicProps;
export declare const LocationBarSlot: React.FC<ILocationBarSlotProps>;
export {};
