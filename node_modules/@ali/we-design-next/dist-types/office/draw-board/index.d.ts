/// <reference types="react" />
export declare const DrawBoard: import("react").NamedExoticComponent<{
    width?: number | undefined;
    height?: number | undefined;
    paintColor?: string | undefined;
    backgroundColor?: string | undefined;
    placeholder?: import("react").ReactNode;
    onPaint?: (() => void) | undefined;
} & import("../../common/react").IRestProps & import("react").DOMAttributes<HTMLDivElement> & import("react").RefAttributes<Omit<{
    undo: () => void;
    redo: () => void;
    clear: () => void;
    exportToImage: (type?: "dataUrl" | undefined, options?: {
        cropPadding?: number | undefined;
    } | undefined) => {
        dataUrl: string;
        width: number;
        height: number;
    } | null;
    destroy: () => void;
}, "destroy"> & {
    onChange: (fn: (option: {
        undoAble: boolean;
        redoAble: boolean;
        clearAble: boolean;
    }) => void) => () => void;
}>> & {
    readonly type: import("react").ForwardRefExoticComponent<{
        width?: number | undefined;
        height?: number | undefined;
        paintColor?: string | undefined;
        backgroundColor?: string | undefined;
        placeholder?: import("react").ReactNode;
        onPaint?: (() => void) | undefined;
    } & import("../../common/react").IRestProps & import("react").DOMAttributes<HTMLDivElement> & import("react").RefAttributes<Omit<{
        undo: () => void;
        redo: () => void;
        clear: () => void;
        exportToImage: (type?: "dataUrl" | undefined, options?: {
            cropPadding?: number | undefined;
        } | undefined) => {
            dataUrl: string;
            width: number;
            height: number;
        } | null;
        destroy: () => void;
    }, "destroy"> & {
        onChange: (fn: (option: {
            undoAble: boolean;
            redoAble: boolean;
            clearAble: boolean;
        }) => void) => () => void;
    }>>;
} & {
    ControlPanel: import("react").MemoExoticComponent<import("react").ForwardRefExoticComponent<import("../../common/react").IRestProps & import("react").DOMAttributes<HTMLDivElement> & import("react").RefAttributes<{
        attach: (drawboard: Omit<{
            undo: () => void;
            redo: () => void;
            clear: () => void;
            exportToImage: (type?: "dataUrl" | undefined, options?: {
                cropPadding?: number | undefined;
            } | undefined) => {
                dataUrl: string;
                width: number;
                height: number;
            } | null;
            destroy: () => void;
        }, "destroy"> & {
            onChange: (fn: (option: {
                undoAble: boolean;
                redoAble: boolean;
                clearAble: boolean;
            }) => void) => () => void;
        }) => () => void;
    }>>>;
};
export declare const DrawBoardMobile: import("react").NamedExoticComponent<{
    width?: number | undefined;
    height?: number | undefined;
    paintColor?: string | undefined;
    backgroundColor?: string | undefined;
    placeholder?: import("react").ReactNode;
    onPaint?: (() => void) | undefined;
} & import("../../common/react").IRestProps & import("react").DOMAttributes<HTMLDivElement> & import("react").RefAttributes<Omit<{
    undo: () => void;
    redo: () => void;
    clear: () => void;
    exportToImage: (type?: "dataUrl" | undefined, options?: {
        cropPadding?: number | undefined;
    } | undefined) => {
        dataUrl: string;
        width: number;
        height: number;
    } | null;
    destroy: () => void;
}, "destroy"> & {
    onChange: (fn: (option: {
        undoAble: boolean;
        redoAble: boolean;
        clearAble: boolean;
    }) => void) => () => void;
}>> & {
    readonly type: import("react").ForwardRefExoticComponent<{
        width?: number | undefined;
        height?: number | undefined;
        paintColor?: string | undefined;
        backgroundColor?: string | undefined;
        placeholder?: import("react").ReactNode;
        onPaint?: (() => void) | undefined;
    } & import("../../common/react").IRestProps & import("react").DOMAttributes<HTMLDivElement> & import("react").RefAttributes<Omit<{
        undo: () => void;
        redo: () => void;
        clear: () => void;
        exportToImage: (type?: "dataUrl" | undefined, options?: {
            cropPadding?: number | undefined;
        } | undefined) => {
            dataUrl: string;
            width: number;
            height: number;
        } | null;
        destroy: () => void;
    }, "destroy"> & {
        onChange: (fn: (option: {
            undoAble: boolean;
            redoAble: boolean;
            clearAble: boolean;
        }) => void) => () => void;
    }>>;
} & {
    ControlPanelMobile: import("react").MemoExoticComponent<import("react").ForwardRefExoticComponent<import("react").RefAttributes<{
        attach: (drawboard: Omit<{
            undo: () => void;
            redo: () => void;
            clear: () => void;
            exportToImage: (type?: "dataUrl" | undefined, options?: {
                cropPadding?: number | undefined;
            } | undefined) => {
                dataUrl: string;
                width: number;
                height: number;
            } | null;
            destroy: () => void;
        }, "destroy"> & {
            onChange: (fn: (option: {
                undoAble: boolean;
                redoAble: boolean;
                clearAble: boolean;
            }) => void) => () => void;
        }) => () => void;
    }>>>;
};
