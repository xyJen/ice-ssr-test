import React, { ReactNode, DOMAttributes } from 'react';
import { IRestProps } from '../../common/react/mergeRestProps';
export declare type IDrawBoardProps = {
    /**
     * 宽度，默认为 500px
     */
    width?: number;
    /**
     * 高度, 默认为 309px
     */
    height?: number;
    /**
     * 画笔颜色，默认为黑色
     */
    paintColor?: string;
    /**
     * 背景颜色，默认为透明色（此颜色会成为导出图片的背景色）
     */
    backgroundColor?: string;
    /**
     * 自定义 placeholder 文案
     */
    placeholder?: ReactNode;
    /**
     * 每次画完一笔后回调
     */
    onPaint?: () => void;
} & IRestProps & DOMAttributes<HTMLDivElement>;
declare type IDrawBoardHandlers = Omit<IController, 'destroy'> & {
    onChange: (fn: (option: IChangeOption) => void) => () => void;
};
export declare const DrawBoard: React.MemoExoticComponent<React.ForwardRefExoticComponent<{
    /**
     * 宽度，默认为 500px
     */
    width?: number | undefined;
    /**
     * 高度, 默认为 309px
     */
    height?: number | undefined;
    /**
     * 画笔颜色，默认为黑色
     */
    paintColor?: string | undefined;
    /**
     * 背景颜色，默认为透明色（此颜色会成为导出图片的背景色）
     */
    backgroundColor?: string | undefined;
    /**
     * 自定义 placeholder 文案
     */
    placeholder?: ReactNode;
    /**
     * 每次画完一笔后回调
     */
    onPaint?: (() => void) | undefined;
} & IRestProps & React.DOMAttributes<HTMLDivElement> & React.RefAttributes<IDrawBoardHandlers>>>;
declare type IChangeOption = {
    undoAble: boolean;
    redoAble: boolean;
    clearAble: boolean;
};
declare type IController = {
    undo: () => void;
    redo: () => void;
    clear: () => void;
    exportToImage: (type?: 'dataUrl', options?: {
        cropPadding?: number;
    }) => {
        dataUrl: string;
        width: number;
        height: number;
    } | null;
    destroy: () => void;
};
export {};
