/// <reference types="react" />
export declare const TitleCover: import("react").NamedExoticComponent<{
    cover: import("./TitleCover").Cover;
    renderError?: (() => import("react").ReactNode) | undefined;
} & import("../../common/react").IRestProps & import("react").DOMAttributes<HTMLDivElement> & import("react").RefAttributes<{
    onChange: (fn: (option: {
        isReposition: boolean;
        position: number;
    }) => void) => () => void;
    startReposition: () => void;
    endReposition: () => void;
    setRenderPosition: (p: number) => void;
    getImageRef: () => import("react").RefObject<HTMLImageElement>;
    getCover: () => import("./TitleCover").Cover;
}>> & {
    readonly type: import("react").ForwardRefExoticComponent<{
        cover: import("./TitleCover").Cover;
        renderError?: (() => import("react").ReactNode) | undefined;
    } & import("../../common/react").IRestProps & import("react").DOMAttributes<HTMLDivElement> & import("react").RefAttributes<{
        onChange: (fn: (option: {
            isReposition: boolean;
            position: number;
        }) => void) => () => void;
        startReposition: () => void;
        endReposition: () => void;
        setRenderPosition: (p: number) => void;
        getImageRef: () => import("react").RefObject<HTMLImageElement>;
        getCover: () => import("./TitleCover").Cover;
    }>>;
} & {
    ControlPanel: import("react").MemoExoticComponent<import("react").ForwardRefExoticComponent<{
        imagePicker: import("react").ReactNode;
        getImagePickerContainer?: (() => HTMLElement) | undefined;
        onChange?: ((cover: import("./TitleCover").Cover) => void) | undefined;
        onPickImageStart?: (() => void) | undefined;
        onPickImageEnd?: (() => void) | undefined;
    } & import("../../common/react").IRestProps & Omit<import("react").DOMAttributes<HTMLDivElement>, "onChange"> & import("react").RefAttributes<{
        attach: (titleCover: {
            onChange: (fn: (option: {
                isReposition: boolean;
                position: number;
            }) => void) => () => void;
            startReposition: () => void;
            endReposition: () => void;
            setRenderPosition: (p: number) => void;
            getImageRef: () => import("react").RefObject<HTMLImageElement>;
            getCover: () => import("./TitleCover").Cover;
        }) => () => void;
    }>>>;
    SettingButton: import("styled-components").StyledComponent<"div", any, {}, never>;
};
