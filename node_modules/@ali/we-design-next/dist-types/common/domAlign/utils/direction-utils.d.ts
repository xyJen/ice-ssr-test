import type { IFullRegion, IPos, IVisibleRect } from '../interface';
/**
 *
 * @param elFuturePos source future { left , top }
 * @param elRegion source now { left , top , width , height }
 * @param visibleRect  { left , right, top , bottom }
 *
 * 判断 x 方向是否 不能完全显示，即是否会有区域超过可视区，形成遮挡
 * 条件是 future的left 小于 可视区域的left，也就是有一部分内容超过了可视区域的左边界
 * future的left + 宽度 大于 可视区域的right，也就是有一部分内容超过了可视区域的右边界
 */
declare function isFailX(elFuturePos: IPos, elRegion: IFullRegion, visibleRect: IVisibleRect): boolean;
declare function isFailY(elFuturePos: IPos, elRegion: IFullRegion, visibleRect: IVisibleRect): boolean;
/**
 * 判断 x 方向是否完全不能显示， 即区域完全超出可视区，一点都看不到
 * 条件是 即将的left 大于 可视区域的right， 也就是整个元素在可视区域的右边
 * 即将的left + 宽度 小于 可视区域的left，也就是整个元素在可视区域的左边
 */
declare function isCompleteFailX(elFuturePos: IPos, elRegion: IFullRegion, visibleRect: IVisibleRect): boolean;
declare function isCompleteFailY(elFuturePos: IPos, elRegion: IFullRegion, visibleRect: IVisibleRect): boolean;
export { isFailX, isFailY, isCompleteFailX, isCompleteFailY, };
