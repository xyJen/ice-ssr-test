declare type NU<T> = undefined extends T ? never : T;
declare type UseDefaultProp = {
    <T, O = void>(defaultProp: NU<T>, prop: NU<T> | undefined, onChangeProp: ((v: NU<T>) => void) | undefined): [NU<T>, (v: NU<T>) => void];
    <T, R, O = void>(defaultProp: NU<T>, prop: NU<T> | undefined, onChangeProp: ((v: R, o: O) => void) | undefined, eventToValue: (e: R) => NU<T>): [NU<T>, (v: R, o: O) => void];
    <T, O = void>(defaultProp: NU<T> | undefined, prop: NU<T>, onChangeProp: ((v: NU<T>, o: O) => void) | undefined): [NU<T>, (v: NU<T>, o: O) => void];
    <T, R, O = void>(defaultProp: NU<T> | undefined, prop: NU<T>, onChangeProp: ((v: R, o: O) => void) | undefined, eventToValue: (e: R) => NU<T>): [NU<T>, (v: R, o: O) => void];
    <T, O = void>(defaultProp: NU<T> | undefined, prop: NU<T> | undefined | null, onChangeProp: ((v: NU<T> | null, o: O) => void) | undefined): [NU<T> | undefined, (v: NU<T> | undefined, o: O) => void];
    <T, R, O = void>(defaultProp: NU<T> | undefined, prop: NU<T> | undefined | null, onChangeProp: ((v: R | null, o: O) => void) | undefined, eventToValue: (e: R) => NU<T>): [NU<T> | undefined, (v: R | undefined, o: O) => void];
};
export declare const useDefaultProp: UseDefaultProp;
export {};
