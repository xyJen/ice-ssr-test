import { ReactNode } from 'react';
export declare type IListItemNormalized = {
    key: string;
    title: ReactNode;
    prefix?: ReactNode;
    suffix?: ReactNode;
    disabled?: boolean;
    selected?: boolean;
};
export declare type IListItemCustomized = {
    key: string;
    content: ReactNode;
};
export declare type IListItem = IListItemNormalized | IListItemCustomized;
export declare type INestedItem<Item extends IListItem> = string | Item | {
    title: string;
    items: Array<string | Item>;
} | 'divider';
export declare type INestedItems<Item extends IListItem> = Array<INestedItem<Item>>;
export declare const loopNested: <T extends IListItem>(nested: INestedItems<T>, pushItem: (v: T) => void, pushRest: (v: ['divider', number] | ['group', string, number]) => void, fromString: (v: string) => T) => void;
declare type FlattenNested = {
    <T extends IListItem>(nested: INestedItems<T>, fromString: (s: string) => T): Array<T>;
    <T extends IListItem>(nested: INestedItems<T>): IListItem extends T ? Array<T> : never;
};
export declare const flattenNested: FlattenNested;
export declare const isNormalized: (t: IListItem) => t is IListItemNormalized;
export declare const isCustomized: (t: IListItem) => t is IListItemCustomized;
export declare const isEnabled: (t: IListItem) => t is IListItem;
export {};
