/// <reference types="react" />
export declare const Modal: import("react").NamedExoticComponent<{
    title?: import("react").ReactNode;
    footer?: import("../../common").IRenderReactNode<void>;
    header?: import("../../common").IRenderReactNode<void>;
    content?: import("react").ReactNode;
    visible: boolean;
    defaultPlacement?: ("center" | Partial<{
        left: string | number;
        right: string | number;
        top: string | number;
        bottom: string | number;
    }>) | undefined;
    onConfirm?: (() => void) | undefined;
    onCancel?: (() => void) | undefined;
    onClose?: (() => void) | undefined;
    mask?: boolean | "transparent" | undefined;
    dragMove?: boolean | {
        constraint: () => {
            left: number;
            top: number;
            width: number;
            height: number;
        };
    } | undefined;
    getContainer?: (() => HTMLElement) | undefined;
} & import("../../common").IRestProps & import("react").DOMAttributes<HTMLDivElement> & import("react").RefAttributes<HTMLDivElement>> & {
    readonly type: import("react").ForwardRefExoticComponent<{
        title?: import("react").ReactNode;
        footer?: import("../../common").IRenderReactNode<void>;
        header?: import("../../common").IRenderReactNode<void>;
        content?: import("react").ReactNode;
        visible: boolean;
        defaultPlacement?: ("center" | Partial<{
            left: string | number;
            right: string | number;
            top: string | number;
            bottom: string | number;
        }>) | undefined;
        onConfirm?: (() => void) | undefined;
        onCancel?: (() => void) | undefined;
        onClose?: (() => void) | undefined;
        mask?: boolean | "transparent" | undefined;
        dragMove?: boolean | {
            constraint: () => {
                left: number;
                top: number;
                width: number;
                height: number;
            };
        } | undefined;
        getContainer?: (() => HTMLElement) | undefined;
    } & import("../../common").IRestProps & import("react").DOMAttributes<HTMLDivElement> & import("react").RefAttributes<HTMLDivElement>>;
} & {
    Footer: import("react").MemoExoticComponent<(props: {
        action?: import("react").ReactNode;
        confirm?: import("react").ReactNode;
        cancel?: import("react").ReactNode;
        style?: import("react").CSSProperties | undefined;
    }) => JSX.Element>;
    info: (message: string, options?: {
        title?: string | undefined;
        mask?: boolean | "transparent" | undefined;
        options?: string[] | undefined;
        onConfirm?: (() => void) | undefined;
        confirmText?: string | undefined;
    }) => void;
    warn: (message: string, options?: {
        title?: string | undefined;
        mask?: boolean | "transparent" | undefined;
        onCancel?: (() => void) | undefined;
        options?: string[] | undefined;
        onConfirm?: (() => void) | undefined;
        confirmText?: string | undefined;
        cancelText?: string | undefined;
    }) => void;
    success: (message: string, options?: {
        title?: string | undefined;
        mask?: boolean | "transparent" | undefined;
        options?: string[] | undefined;
        onConfirm?: (() => void) | undefined;
        confirmText?: string | undefined;
    }) => void;
    confirm: (message: string, options?: {
        title?: string | undefined;
        mask?: boolean | "transparent" | undefined;
        onCancel?: (() => void) | undefined;
        options?: string[] | undefined;
        onConfirm?: (() => void) | undefined;
        confirmText?: string | undefined;
        cancelText?: string | undefined;
    }) => void;
};
