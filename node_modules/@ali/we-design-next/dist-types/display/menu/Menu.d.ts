import React from 'react';
import { IListItemNormalized, IListItemCustomized, INestedItems } from '../../basic/list/nested';
import { IRestProps, IRenderReactNode } from '../../common';
export declare type IMenuItemNormalized = IListItemNormalized & {
    description?: string;
    subMenu?: INestedItems<IMenuItem> | (() => Promise<INestedItems<IMenuItem>>);
};
export declare type IMenuItemCustomized = IListItemCustomized;
export declare type IMenuItem = IMenuItemNormalized | IMenuItemCustomized;
export declare type IMenuProps = {
    /**
     * 菜单项配置
     */
    items?: INestedItems<IMenuItem>;
    /**
     * 当前激活的路径，每一项为 item 的 key；最后一项可能为 undefined，表示下级菜单被展开，但未激活其中的任意项
     */
    path?: Array<string | undefined>;
    /**
     * 当前激活路径变化
     */
    onPathChange?: (path: Array<string | undefined>) => void;
    /**
     * 某个菜单项被选中
     */
    onSelect?: (path: Array<string>) => void;
    /**
     * 是否响应键盘事件
     */
    keyboard?: boolean;
    /**
     * 自定义菜单项渲染
     */
    renderItem?: IRenderReactNode<{
        key: string;
    }>;
} & IRestProps & Omit<React.DOMAttributes<HTMLDivElement>, 'onSelect'>;
export declare const Menu: React.MemoExoticComponent<React.ForwardRefExoticComponent<{
    /**
     * 菜单项配置
     */
    items?: INestedItems<IMenuItem> | undefined;
    /**
     * 当前激活的路径，每一项为 item 的 key；最后一项可能为 undefined，表示下级菜单被展开，但未激活其中的任意项
     */
    path?: (string | undefined)[] | undefined;
    /**
     * 当前激活路径变化
     */
    onPathChange?: ((path: Array<string | undefined>) => void) | undefined;
    /**
     * 某个菜单项被选中
     */
    onSelect?: ((path: Array<string>) => void) | undefined;
    /**
     * 是否响应键盘事件
     */
    keyboard?: boolean | undefined;
    /**
     * 自定义菜单项渲染
     */
    renderItem?: IRenderReactNode<{
        key: string;
    }>;
} & IRestProps & Omit<React.DOMAttributes<HTMLDivElement>, "onSelect"> & React.RefAttributes<HTMLDivElement>>>;
export declare const MenuItem: React.MemoExoticComponent<React.ForwardRefExoticComponent<{
    children?: React.ReactNode;
    active?: boolean | undefined;
    prefix?: React.ReactNode;
    suffix?: React.ReactNode;
    disabled?: boolean | undefined;
} & IRestProps & Omit<React.HTMLAttributes<HTMLDivElement>, "children" | keyof IRestProps | "prefix" | "disabled" | "active" | "suffix"> & React.RefAttributes<HTMLDivElement>>>;
