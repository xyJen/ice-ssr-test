"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DATA_LINK_HREF_CANGJIE = void 0;

var _everUtils = require("@ali/4ever-utils");

var _lodash = require("lodash");

var _everCangjie = require("@ali/4ever-cangjie");

const DATA_LINK_HREF_CANGJIE = 'data-link-href-cangjie';
exports.DATA_LINK_HREF_CANGJIE = DATA_LINK_HREF_CANGJIE;

function isLink(name, attrs) {
  return name === 'a' && ('href' in attrs || DATA_LINK_HREF_CANGJIE in attrs);
}

function normalizeLink(link) {
  const tagName = (0, _everUtils.getTagName)(link);
  const attrs = (0, _everUtils.getAttributes)(link);
  const children = (0, _everUtils.getChildren)(link);
  const normalized = attrs ? [tagName, attrs] : [tagName];
  children.forEach(child => {
    if (_everUtils.paragraphTags[(0, _everUtils.getTagName)(child)]) {
      normalized.push(...(0, _everUtils.getChildren)(child));
    } else {
      normalized.push(child);
    }
  });
  return normalized;
}

function removeAttribute(attrs, attr) {
  const result = (0, _lodash.omit)(attrs, attr); // 如果结果已经没有其他 attribute，直接返回 null

  if (Object.keys(result).length === 0) {
    return null;
  }

  return result;
}

function dropColor(element) {
  if (typeof element === 'string') {
    return element;
  }

  const tagName = (0, _everUtils.getTagName)(element);
  const attrs = (0, _everUtils.getAttributes)(element);
  const children = (0, _everUtils.getChildren)(element);
  const normalizeAttrs = removeAttribute(attrs, 'color');
  const normalized = normalizeAttrs ? [tagName, normalizeAttrs] : [tagName]; // 如果当前节点是叶子节点，则子节点一定是字符串，不需要额外处理 dropcolor

  if (attrs && attrs['data-type'] === 'leaf') {
    normalized.push(...children);
  } else {
    children.forEach(child => {
      if (_everUtils.paragraphTags[(0, _everUtils.getTagName)(child)]) {
        normalized.push(...(0, _everUtils.getChildren)(child).map(dropColor));
      } else {
        normalized.push(dropColor(child));
      }
    });
  }

  return normalized;
}

var _default = {
  name: 'a',

  onOpenTag(state, name, attrs) {
    if (!isLink(name, attrs)) return false;
    const link = ['a', {
      href: attrs[DATA_LINK_HREF_CANGJIE] || attrs.href || ''
    }];
    state.push(link);
    return true;
  },

  onCloseTag(state, name, attrs) {
    if (!isLink(name, attrs)) return false;
    let link = state.pop(); // HACK: 通过设置 data-title，覆盖 a.innerText 的值，用于实现钉钉文档 文档引用 功能

    if ('data-title' in attrs && attrs['data-title'].length) {
      link = [(0, _everUtils.getTagName)(link), (0, _everUtils.getAttributes)(link), ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, attrs['data-title']]]];
    }

    const children = (0, _everUtils.getChildren)(link);
    if (children.length === 0) return true;
    link = dropColor(normalizeLink((0, _everUtils.normalizeJsonMLChildren)(link)));
    const parent = state.peek(); // 如果是段落行，则直接 append

    if (_everUtils.paragraphTags[(0, _everUtils.getTagName)(parent)]) {
      state.append(link);
      return true;
    }

    const prevSibling = (0, _everUtils.getLastChild)(parent);

    if (prevSibling && prevSibling.isPhantom) {
      // 如果上一个兄弟节点是 phantom，则直接添加进去
      // 追加一个 text 节点 normalize，否则单测跑不过
      prevSibling.push(link, (0, _everCangjie.createEmptyText)());
    } else {
      // 如果上一个兄弟节点不存在，或者不是 phantom 节点，则创建一个 phantom 节点
      const phantom = ['p', (0, _everCangjie.createEmptyText)(), link, (0, _everCangjie.createEmptyText)()];
      phantom.isPhantom = true;
      state.append(phantom);
    }

    return true;
  }

};
exports.default = _default;
//# sourceMappingURL=htmlToJsonML.js.map