"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDecorateNode;

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

/* eslint-disable no-param-reassign */
const blocksContainText = {
  'heading-1': true,
  'heading-2': true,
  'heading-3': true,
  'heading-4': true,
  'heading-5': true,
  'heading-6': true,
  paragraph: true
};

function isContainsText(node) {
  // PERF: 严谨的实现应该是 node.nodes.some(Text.isText)，但这会让断言复杂度变为 O(mn)
  return blocksContainText[node.type];
}

function isContainsLine(node) {
  return node.nodes.some(child => _everCangjie.Block.isBlock(child) && child.type === 'line');
}

function createDecorateNode(protocolAllowList) {
  const linkify = (0, _everUtils.createLinkify)(protocolAllowList);
  return function decorateNode(node, controller, next) {
    const others = next() || [];

    if (!isContainsText(node)) {
      return others;
    }

    const {
      value
    } = controller;
    const {
      document
    } = value;
    let linkDecorations = []; // 处理分页下的节点装饰

    if (isContainsLine(node)) {
      const textStr = node.text.replace(/\n$/, '');

      if (!linkify.test(textStr)) {
        return others;
      }

      const texts = node.getTexts();
      const allText = texts.reduce((prev, t) => prev + t.text.replace(/\n$/, ''), '');
      const matches = (0, _everUtils.matchesLink)(linkify, allText);

      if (matches) {
        const links = matches.map(match => {
          const [anchorKey, anchorOffset, focusKey, focusOffset] = texts.reduce(([ak, ao, fk, fo, from], t) => {
            // stop...
            if (ak && fk) {
              return [ak, ao, fk, fo, from];
            }

            const newFrom = from + t.text.replace(/\n$/, '').length;

            if (!ak && newFrom >= match.index) {
              ak = t.key;
              ao = match.index - from;
            }

            if (!fk && newFrom >= match.lastIndex) {
              fk = t.key;
              fo = match.lastIndex - from;
            }

            return [ak, ao, fk, fo, newFrom];
          }, [null, 0, null, 0, 0]);
          return _everCangjie.Decoration.fromJSON({
            start: {
              key: anchorKey,
              offset: anchorOffset
            },
            end: {
              key: focusKey,
              offset: focusOffset
            },
            mark: {
              type: 'link',
              data: {
                href: match.url,
                offsetInNode: anchorOffset
              }
            }
          });
        });
        linkDecorations = [...links];
      }
    } else {
      // @ts-ignore
      linkDecorations = node.nodes.reduce((decorations, text) => {
        if (!_everCangjie.Text.isText(text) || !text.text) {
          return decorations;
        } // 不对整个text节点做处理，因为其中可能包含有unlink mark的叶子节点


        const leavesWithoutUnlinkMark = [];

        for (let i = 0; i < text.leaves.length; i++) {
          const leaf = text.leaves[i]; // 存在unlink的mark则后续的leaf都不需要处理

          if (leaf.marks && leaf.marks.find(mark => mark.type === 'unlink')) {
            break;
          }

          leavesWithoutUnlinkMark.push(leaf);
        }

        const textWithoutUnlinkMark = leavesWithoutUnlinkMark.map(leaf => leaf.text).join('');
        const matches = (0, _everUtils.matchesLink)(linkify, textWithoutUnlinkMark);

        if (!matches) {
          return decorations;
        }

        const path = document.getPath(text.key);
        const point = {
          key: text.key,
          path
        };
        const links = matches.map(match => _everCangjie.Decoration.fromJSON({
          start: { ...point,
            offset: match.index
          },
          end: { ...point,
            offset: match.lastIndex
          },
          mark: {
            type: 'link',
            data: {
              href: match.url,
              offsetInNode: match.index
            }
          }
        }));
        return [...decorations, ...links];
      }, []);
    }

    return [...others, ...linkDecorations];
  };
}
//# sourceMappingURL=createDecorateNode.js.map