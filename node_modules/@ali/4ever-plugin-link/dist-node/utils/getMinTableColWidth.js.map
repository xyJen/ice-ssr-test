{"version":3,"sources":["../../../src/utils/getMinTableColWidth.ts"],"names":["width","margin","minWidth","tablePadding","theme","link","BlockLinkCardType","getMinTableColWidthForBlockLinkCard","_","node","Card","isCard","data","cardType","undefined","getMinTableColWidth","controller","injections","value","isLinkCard","getMinTableColWidthForMobile"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA;AAA3B,IAA4CC,iBAAMC,IAAxD;AASA,MAAMC,iBAAiB,GAAG,MAA1B;;AAEO,SAASC,mCAAT,CAA6CC,CAA7C,EAAgD;AAAEC,EAAAA;AAAF,CAAhD,EAAqF;AAC1F,MAAIC,qBAAKC,MAAL,CAAYF,IAAZ,KAAqBA,IAAI,CAACG,IAAL,CAAUC,QAAV,KAAuBP,iBAAhD,EAAmE;AACjE,WAAOJ,QAAQ,GAAG,KAAKD,MAAM,GAAGE,YAAd,CAAlB;AACD;;AACD,SAAOW,SAAP;AACD;;AAEc,SAASC,mBAAT,CAA6BC,UAA7B,EAAqD;AAAEP,EAAAA;AAAF,CAArD,EAAqF;AAClG,QAAM;AAAEQ,IAAAA;AAAF,MAAiBD,UAAU,CAACE,KAAlC;AACA,QAAMC,UAAU,GAAG,gCAAeV,IAAf,EAAqBQ,UAArB,CAAnB;;AACA,MAAIE,UAAJ,EAAgB;AACd,WAAOnB,KAAK,GAAG,KAAKC,MAAM,GAAGE,YAAd,CAAf;AACD;;AACD,SAAOW,SAAP;AACD;;AAEM,SAASM,4BAAT,CAAsCJ,UAAtC,EAA8D;AAAEP,EAAAA;AAAF,CAA9D,EAA8F;AACnG,QAAM;AAAEQ,IAAAA;AAAF,MAAiBD,UAAU,CAACE,KAAlC;AACA,QAAMC,UAAU,GAAG,gCAAeV,IAAf,EAAqBQ,UAArB,CAAnB;;AACA,MAAIE,UAAJ,EAAgB;AACd,WAAOjB,QAAQ,GAAG,KAAKD,MAAM,GAAGE,YAAd,CAAlB;AACD;;AACD,SAAOW,SAAP;AACD","sourcesContent":["import { Controller, Node, Block } from '@ali/4ever-cangjie';\nimport { theme } from '@ali/4ever-utils';\nimport { isLinkCardNode } from './isLinkCard';\nimport { CardData, Card } from '@ali/4ever-plugin-card';\n\nconst { width, margin, minWidth, tablePadding } = theme.link;\nexport interface IsLinkCardQueryProps {\n  node: Node;\n}\n\nexport interface IsBlockLinkCardQueryProps {\n  node: Block<CardData>;\n}\n\nconst BlockLinkCardType = 'link';\n\nexport function getMinTableColWidthForBlockLinkCard(_, { node }: IsBlockLinkCardQueryProps) {\n  if (Card.isCard(node) && node.data.cardType === BlockLinkCardType) {\n    return minWidth + 2 * (margin + tablePadding);\n  }\n  return undefined;\n}\n\nexport default function getMinTableColWidth(controller: Controller, { node }: IsLinkCardQueryProps) {\n  const { injections } = controller.value;\n  const isLinkCard = isLinkCardNode(node, injections);\n  if (isLinkCard) {\n    return width + 2 * (margin + tablePadding);\n  }\n  return undefined;\n}\n\nexport function getMinTableColWidthForMobile(controller: Controller, { node }: IsLinkCardQueryProps) {\n  const { injections } = controller.value;\n  const isLinkCard = isLinkCardNode(node, injections);\n  if (isLinkCard) {\n    return minWidth + 2 * (margin + tablePadding);\n  }\n  return undefined;\n}\n"],"file":"getMinTableColWidth.js"}