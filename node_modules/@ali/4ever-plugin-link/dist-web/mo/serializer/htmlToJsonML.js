import { getTagName, getAttributes, getChildren, getLastChild } from '@ali/4ever-utils';
import { omit } from 'lodash-es';
import { createEmptyText } from '@ali/4ever-cangjie';
import { paragraphTags, normalizeJsonMLChildren as normalizeChildren } from '@ali/4ever-utils';
export var DATA_LINK_HREF_CANGJIE = 'data-link-href-cangjie';

function isLink(name, attrs) {
  return name === 'a' && ('href' in attrs || DATA_LINK_HREF_CANGJIE in attrs);
}

function normalizeLink(link) {
  var tagName = getTagName(link);
  var attrs = getAttributes(link);
  var children = getChildren(link);
  var normalized = attrs ? [tagName, attrs] : [tagName];
  children.forEach(function (child) {
    if (paragraphTags[getTagName(child)]) {
      normalized.push.apply(normalized, getChildren(child));
    } else {
      normalized.push(child);
    }
  });
  return normalized;
}

function removeAttribute(attrs, attr) {
  var result = omit(attrs, attr); // 如果结果已经没有其他 attribute，直接返回 null

  if (Object.keys(result).length === 0) {
    return null;
  }

  return result;
}

function dropColor(element) {
  if (typeof element === 'string') {
    return element;
  }

  var tagName = getTagName(element);
  var attrs = getAttributes(element);
  var children = getChildren(element);
  var normalizeAttrs = removeAttribute(attrs, 'color');
  var normalized = normalizeAttrs ? [tagName, normalizeAttrs] : [tagName]; // 如果当前节点是叶子节点，则子节点一定是字符串，不需要额外处理 dropcolor

  if (attrs && attrs['data-type'] === 'leaf') {
    normalized.push.apply(normalized, children);
  } else {
    children.forEach(function (child) {
      if (paragraphTags[getTagName(child)]) {
        normalized.push.apply(normalized, getChildren(child).map(dropColor));
      } else {
        normalized.push(dropColor(child));
      }
    });
  }

  return normalized;
}

export default {
  name: 'a',
  onOpenTag: function onOpenTag(state, name, attrs) {
    if (!isLink(name, attrs)) return false;
    var link = ['a', {
      href: attrs[DATA_LINK_HREF_CANGJIE] || attrs.href || ''
    }];
    state.push(link);
    return true;
  },
  onCloseTag: function onCloseTag(state, name, attrs) {
    if (!isLink(name, attrs)) return false;
    var link = state.pop(); // HACK: 通过设置 data-title，覆盖 a.innerText 的值，用于实现钉钉文档 文档引用 功能

    if ('data-title' in attrs && attrs['data-title'].length) {
      link = [getTagName(link), getAttributes(link), ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, attrs['data-title']]]];
    }

    var children = getChildren(link);
    if (children.length === 0) return true;
    link = dropColor(normalizeLink(normalizeChildren(link)));
    var parent = state.peek(); // 如果是段落行，则直接 append

    if (paragraphTags[getTagName(parent)]) {
      state.append(link);
      return true;
    }

    var prevSibling = getLastChild(parent);

    if (prevSibling && prevSibling.isPhantom) {
      // 如果上一个兄弟节点是 phantom，则直接添加进去
      // 追加一个 text 节点 normalize，否则单测跑不过
      prevSibling.push(link, createEmptyText());
    } else {
      // 如果上一个兄弟节点不存在，或者不是 phantom 节点，则创建一个 phantom 节点
      var phantom = ['p', createEmptyText(), link, createEmptyText()];
      phantom.isPhantom = true;
      state.append(phantom);
    }

    return true;
  }
};
//# sourceMappingURL=htmlToJsonML.js.map