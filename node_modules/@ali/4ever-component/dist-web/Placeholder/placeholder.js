import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import PlaceholderInlineToolbar from "./PlaceholderInlineToolbar";
import { isEqual } from 'lodash-es';
import { PlaceholderWrapper } from "./bambooPlaceholder";
export var Placeholder = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Placeholder, _React$Component);

  function Placeholder(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.placeholderRef = void 0;

    _this.isSelected = function () {
      var _this$props = _this.props,
          isSelected = _this$props.isSelected,
          editor = _this$props.editor;
      var isCollapsed = editor.value.selection.isCollapsed;
      return isSelected && isCollapsed;
    };

    _this.renderText = function () {
      var _this$props2 = _this.props,
          renderText = _this$props2.renderText,
          node = _this$props2.node;
      var name = node.data.name;
      var placeholderText = '';

      if (typeof renderText === 'function') {
        placeholderText = renderText(name);
      }

      return placeholderText || (name || '') + "\u6682\u65E0\u6CD5\u89E3\u6790";
    };

    _this.placeholderRef = /*#__PURE__*/React.createRef();
    return _this;
  }

  var _proto = Placeholder.prototype;

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    var props = this.props;
    var isChange = !isEqual({
      isSelected: nextProps.isSelected,
      isCollapsed: nextProps.editor.value.selection.isCollapsed,
      renderText: nextProps.renderText,
      node: nextProps.node
    }, {
      isSelected: props.isSelected,
      isCollapsed: props.editor.value.selection.isCollapsed,
      renderText: props.renderText,
      node: props.node
    });
    return isChange;
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        attributes = _this$props3.attributes,
        isSelected = _this$props3.isSelected,
        handleRemoveNode = _this$props3.handleRemoveNode;
    var text = this.renderText();
    var isCurrSelected = this.isSelected();
    return /*#__PURE__*/_createElement(React.Fragment, null, isCurrSelected ? /*#__PURE__*/_createElement(PlaceholderInlineToolbar, {
      handleRemovePlaceholder: handleRemoveNode,
      triggerNode: this.placeholderRef.current
    }) : null, /*#__PURE__*/_createElement(PlaceholderWrapper, _extends({
      ref: this.placeholderRef
    }, attributes, {
      isSelected: isSelected,
      title: text
    }), text));
  };

  return Placeholder;
}(React.Component);
//# sourceMappingURL=placeholder.js.map