{"version":3,"sources":["../../../../src/MobileToolbar/components/line.tsx"],"names":["React","useSubline","ItemView","SubLine","LineWrapper","ScrollableWrapper","Divider","KeyboardShadow","KeyboardWrapper","useLayoutFilter","Line","allLayout","layout","plugins","controller","subLine","item","flexLayout","useMemo","filter","g","fixedOnRight","fixedGroup","find","subLineKey","name","map","group","gindex","key","items","index","String"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAE5B,SAASC,UAAT;AACA,OAAOC,QAAP;AACA,OAAOC,OAAP;AACA,SACEC,WADF,EAEEC,iBAFF,EAGEC,OAHF,EAIEC,cAJF,EAKEC,eALF;AAOA,OAAOC,eAAP;;yBA0B6B,eAAC,OAAD,O;;yBAsBnB,eAAC,cAAD,O;;AAxCV,SAASC,IAAT,OAAyE;AAAA,MAAjDC,SAAiD,QAAzDC,MAAyD;AAAA,MAAtCC,OAAsC,QAAtCA,OAAsC;AAAA,MAA7BC,UAA6B,QAA7BA,UAA6B;;AAAA,oBAC7Cb,UAAU,EADmC;AAAA,MACzDc,OADyD,eAC/DC,IAD+D;;AAEvE,MAAMJ,MAAM,GAAGH,eAAe,CAACE,SAAD,CAA9B;AACA,MAAMM,UAAU,GAAGjB,KAAK,CAACkB,OAAN,CACjB;AAAA,WAAMN,MAAM,CAACO,MAAP,CAAc,UAACC,CAAD;AAAA,aAAO,CAACA,CAAC,CAACC,YAAV;AAAA,KAAd,CAAN;AAAA,GADiB,EAEjB,CAACT,MAAD,CAFiB,CAAnB;AAIA,MAAMU,UAAU,GAAGtB,KAAK,CAACkB,OAAN,CACjB;AAAA,WAAMN,MAAM,CAACW,IAAP,CAAY,UAACH,CAAD;AAAA,aAAOA,CAAC,CAACC,YAAT;AAAA,KAAZ,CAAN;AAAA,GADiB,EAEjB,CAACT,MAAD,CAFiB,CAAnB;AAIA,MAAMY,UAAU,GAAG,OAAOT,OAAP,KAAmB,QAAnB,GAA8BA,OAAO,CAACU,IAAtC,GAA6CV,OAAhE;AAEA,sBACE,eAAC,WAAD;AAAa;AAAb,kBACE,eAAC,iBAAD,QACGE,UAAU,CAACS,GAAX,CAAe,UAACC,KAAD,EAAQC,MAAR;AAAA,wBACd,eAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,EAAED,KAAK,CAACE;AAA3B,OACGD,MAAM,KAAK,CAAX,SADH,EAEGD,KAAK,CAACG,KAAN,CAAYJ,GAAZ,CAAgB,UAACV,IAAD,EAAOe,KAAP;AAAA,0BACf,eAAC,QAAD;AACE,QAAA,GAAG,GAAK,OAAOf,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACS,IAA5C,UAAoDM,KADzD;AAEE,QAAA,IAAI,EAAEf,IAFR;AAGE,QAAA,UAAU,EAAEF,UAHd;AAIE,QAAA,OAAO,EAAED;AAJX,QADe;AAAA,KAAhB,CAFH,CADc;AAAA,GAAf,CADH,CADF,EAgBGE,OAAO,iBACN,eAAC,OAAD;AACE,IAAA,GAAG,EAAEiB,MAAM,CAACR,UAAD,CADb;AAEE,IAAA,IAAI,EAAET,OAFR;AAGE,IAAA,OAAO,EAAEF,OAHX;AAIE,IAAA,UAAU,EAAEC;AAJd,IAjBJ,EAwBG,CAAC,CAACQ,UAAF,iBACC,eAAC,eAAD,eAEGA,UAAU,CAACQ,KAAX,CAAiBJ,GAAjB,CAAqB,UAACV,IAAD;AAAA,wBACpB,eAAC,QAAD;AACE,MAAA,GAAG,EAAE,OAAOA,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACS,IAD9C;AAEE,MAAA,IAAI,EAAET,IAFR;AAGE,MAAA,UAAU,EAAEF,UAHd;AAIE,MAAA,OAAO,EAAED;AAJX,MADoB;AAAA,GAArB,CAFH,CAzBJ,CADF;AAwCD;;AAED,eAAeH,IAAf","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { MobileToolbarGroup, Plugins } from '../types';\nimport { useSubline } from '../hooks';\nimport ItemView from '../buttons/index';\nimport SubLine from './subline';\nimport {\n  LineWrapper,\n  ScrollableWrapper,\n  Divider,\n  KeyboardShadow,\n  KeyboardWrapper,\n} from './styled';\nimport useLayoutFilter from '../hooks/useLayoutFilter';\n\ninterface LineViewProps {\n  layout: MobileToolbarGroup[];\n  controller: Controller;\n  plugins: Plugins;\n}\n\nfunction Line({ layout: allLayout, plugins, controller }: LineViewProps) {\n  const { item: subLine } = useSubline();\n  const layout = useLayoutFilter(allLayout);\n  const flexLayout = React.useMemo(\n    () => layout.filter((g) => !g.fixedOnRight),\n    [layout],\n  );\n  const fixedGroup = React.useMemo(\n    () => layout.find((g) => g.fixedOnRight),\n    [layout],\n  );\n  const subLineKey = typeof subLine === 'object' ? subLine.name : subLine;\n\n  return (\n    <LineWrapper data-toolbar-line>\n      <ScrollableWrapper>\n        {flexLayout.map((group, gindex) => (\n          <React.Fragment key={group.key}>\n            {gindex !== 0 && <Divider />}\n            {group.items.map((item, index) => (\n              <ItemView\n                key={`${typeof item === 'string' ? item : item.name}_${index}`}\n                item={item}\n                controller={controller}\n                plugins={plugins}\n              />\n            ))}\n          </React.Fragment>\n        ))}\n      </ScrollableWrapper>\n      {subLine && (\n        <SubLine\n          key={String(subLineKey)}\n          item={subLine}\n          plugins={plugins}\n          controller={controller}\n        />\n      )}\n      {!!fixedGroup && (\n        <KeyboardWrapper>\n          <KeyboardShadow />\n          {fixedGroup.items.map((item) => (\n            <ItemView\n              key={typeof item === 'string' ? item : item.name}\n              item={item}\n              controller={controller}\n              plugins={plugins}\n            />\n          ))}\n        </KeyboardWrapper>\n      )}\n    </LineWrapper>\n  );\n}\n\nexport default Line;\n"],"file":"line.js"}