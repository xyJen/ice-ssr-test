import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { itemToKey, SUBLINE_MIN_LEFT } from "../constant";
import ItemView from "../buttons/index";
import { SubLineWrapper } from "./styled";

function SubLine(_ref) {
  var subLine = _ref.item,
      plugins = _ref.plugins,
      controller = _ref.controller;
  var children = typeof subLine !== 'string' && subLine.children || [];
  var ref = React.useRef(null);

  var _React$useState = React.useState(0),
      left = _React$useState[0],
      setLeft = _React$useState[1];

  var name = typeof subLine === 'string' ? subLine : subLine.name;
  React.useEffect(function () {
    var wrapper = ref.current;
    var line = wrapper == null ? void 0 : wrapper.closest('[data-toolbar-line]');

    if (!wrapper || !line || !(line instanceof HTMLElement)) {
      return;
    }

    var itemKey = itemToKey(name);
    var target = line == null ? void 0 : line.querySelector("[data-toolbar-key=" + itemKey + "]");

    var _ref2 = (target == null ? void 0 : target.getBoundingClientRect()) || {},
        _ref2$left = _ref2.left,
        sourceLeft = _ref2$left === void 0 ? 0 : _ref2$left,
        _ref2$right = _ref2.right,
        sourceRight = _ref2$right === void 0 ? 0 : _ref2$right;

    var sourceCenter = (sourceLeft + sourceRight) / 2;

    var _wrapper$getBoundingC = wrapper.getBoundingClientRect(),
        selfWidth = _wrapper$getBoundingC.width;

    var offsetLeft = Math.max(sourceCenter - selfWidth / 2, SUBLINE_MIN_LEFT);
    setLeft(offsetLeft);
  }, [name]);
  return /*#__PURE__*/_createElement(SubLineWrapper, {
    ref: ref,
    style: {
      left: left
    }
  }, children.map(function (item) {
    return /*#__PURE__*/_createElement(ItemView, {
      key: typeof item === 'string' ? item : item.name,
      item: item,
      controller: controller,
      plugins: plugins
    });
  }));
}

export default SubLine;
//# sourceMappingURL=subline.js.map