import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { Commands, ACTION_CLEAR_MOBILE_MENU } from '@ali/4ever-cangjie';
import Line from "./line";
import LayoutContent from "../panels/layoutContent";
import { PanelContext, ItemClickContext, SublineContext } from "../hooks";
import { useVisualboxTransfrom } from "../adapter/visualViewport";
import { enterFocusMode, exitFocusMode } from "../adapter/focusUtil";
import useKeyboardTop from "../hooks/useKeyboardTop";
import { useExternalClick } from "../hooks/useExternalClick";
import { ContentWrapper } from "../panels/styled";
import { BottomSafeArea, ToolbarWrapper } from "./styled";
import usePrev from "../hooks/usePrev";
import useContentScroll from "../hooks/useContentScroll";
var defaultVisualBoxDisabled = /docs\.dingtalk\.com/.test(location.host);

var blockEvent = function blockEvent(event) {
  event.stopPropagation();
  event.preventDefault();
};

var _ref2 = /*#__PURE__*/_createElement(BottomSafeArea, null);

export default function ToolbarRender(props) {
  var layout = props.layout,
      controller = props.controller,
      plugins = props.plugins,
      onItemClick = props.onItemClick,
      onPanelOps = props.onPanelOps,
      onBottomPanelChange = props.onBottomPanelChange,
      useVisualBox = props.useVisualBox;
  var isFocused = controller.value.isFocused;

  var _React$useState = React.useState(),
      panelItem = _React$useState[0],
      setPanelItem = _React$useState[1];

  var toolbarWrapperRef = React.useRef(null);
  var measureRef = React.useRef(null);
  var isVisualBoxDisabled = typeof useVisualBox === 'boolean' ? !useVisualBox : defaultVisualBoxDisabled;

  var _React$useState2 = React.useState(),
      subLine = _React$useState2[0],
      setSubline = _React$useState2[1];

  var subLineOps = React.useMemo(function () {
    return {
      openSubLine: function openSubLine(item) {
        var _item$children;

        var newSubLine = typeof item !== 'string' && (_item$children = item.children) != null && _item$children.length && item !== subLine ? item : undefined;

        if (newSubLine !== subLine) {
          setSubline(newSubLine);
        }
      },
      closeSubLine: function closeSubLine() {
        setSubline(undefined);
      },
      item: subLine
    };
  }, [subLine]);
  var panelOpsRef = React.useRef(null);
  var panelOps = React.useMemo(function () {
    var ops = {
      openPanel: function openPanel(rawItem) {
        controller.run('onAction', {
          type: ACTION_CLEAR_MOBILE_MENU
        });
        var item = typeof rawItem === 'string' ? {
          name: rawItem
        } : rawItem;

        if (item.panel) {
          // fake blur mode - on
          setPanelItem(item); // 过一阵子再收键盘，不然会透出底部的内容、看起来闪烁一下

          setTimeout(function () {
            enterFocusMode(controller);
          }, 0);
        } else if (item.name === 'keyboard') {
          controller.command(Commands.moveToFocus).run('onCangjieBlur');
        }
      },
      controller: controller,
      closePanel: function closePanel(autoFocus) {
        if (autoFocus === void 0) {
          autoFocus = true;
        }

        // fake blur mode - off
        setPanelItem(undefined);
        exitFocusMode(controller, autoFocus);
      },
      item: panelItem
    };
    panelOpsRef.current = ops;
    return ops;
  }, [controller, panelItem]);
  React.useEffect(function () {
    onPanelOps && onPanelOps(panelOps);
  }, [onPanelOps, panelOps]);
  var prev = usePrev({
    panelItem: panelItem,
    subLine: subLine
  });
  React.useEffect(function () {
    if (subLine && panelItem) {
      if (prev.panelItem) {
        panelOps.closePanel();
      } else {
        subLineOps.closeSubLine();
      }
    }
  }, [panelItem, panelOps, prev.panelItem, subLine, subLineOps]);
  React.useEffect(function () {
    onBottomPanelChange && onBottomPanelChange(panelOps.item, panelOps.closePanel);
  }, [onBottomPanelChange, panelOps]);
  var closePanel = React.useCallback(function () {
    panelOps.item && panelOps.closePanel();
  }, [panelOps]);
  var closeSubLine = React.useCallback(function () {
    subLineOps.item && subLineOps.closeSubLine();
  }, [subLineOps]);
  var closeAllPopup = React.useCallback(function () {
    closePanel();
    closeSubLine();
  }, [closePanel, closeSubLine]);
  useExternalClick(toolbarWrapperRef, closeAllPopup);
  useVisualboxTransfrom(toolbarWrapperRef, measureRef, isVisualBoxDisabled);
  React.useEffect(function () {
    if (!isFocused && panelOps.item) {
      panelOps.closePanel(false);
    }
  }, [isFocused, panelOps]);
  var panel = panelItem && typeof panelItem !== 'string' ? panelItem.panel : undefined;

  var _ref = panel || {},
      PanelContent = _ref.content;

  var panelObj = typeof PanelContent === 'object' ? PanelContent : null;
  var top = useKeyboardTop(Boolean(panelItem), panelOpsRef, toolbarWrapperRef);
  useContentScroll(subLine, panelItem, controller, top);

  if (!isFocused) {
    return null;
  }

  return /*#__PURE__*/_createElement(PanelContext.Provider, {
    value: panelOps
  }, /*#__PURE__*/_createElement(SublineContext.Provider, {
    value: subLineOps
  }, /*#__PURE__*/_createElement(ItemClickContext.Provider, {
    value: onItemClick
  }, /*#__PURE__*/_createElement(ToolbarWrapper, {
    "data-toolbar-wrapper": true,
    style: {
      top: top
    },
    onMouseDown: blockEvent,
    onMouseUp: blockEvent,
    ref: toolbarWrapperRef
  }, /*#__PURE__*/_createElement(Line, {
    layout: layout,
    controller: controller,
    plugins: plugins
  }), panelObj && /*#__PURE__*/_createElement(LayoutContent, {
    layout: panelObj,
    controller: controller,
    plugins: plugins
  }), PanelContent && typeof PanelContent !== 'object' && /*#__PURE__*/_createElement(ContentWrapper, {
    "data-toolbar-panel-custom": true
  }, /*#__PURE__*/_createElement(PanelContent, {
    controller: controller
  })), isVisualBoxDisabled && _ref2, !isVisualBoxDisabled && /*#__PURE__*/_createElement(MesaureBlock, {
    ref: measureRef
  })))));
}
var MeasureFullSize = /*#__PURE__*/styled.div(["position:fixed;width:100%;height:100%;visibility:hidden;pointer-events:none;"]);
var MesaureBlock = /*#__PURE__*/React.forwardRef(function (_, ref) {
  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_createElement(MeasureFullSize, {
    ref: ref
  }), window.document.body);
});
//# sourceMappingURL=toolbar.js.map