import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useSubline, usePanel, useItemClick } from "../hooks";
import { useSide } from "../hooks/buttonSide";
import * as icons from "../icons";
import { Boxes, Outers, ImageIcon } from "./styled";
import { itemToKey } from "../constant";
export default function ToolItemButton(props) {
  var item = props.item,
      style = props.style,
      onClick = props.onClick,
      type = props.type,
      width = props.width,
      children = props.children,
      _props$isActive = props.isActive,
      isActive = _props$isActive === void 0 ? false : _props$isActive,
      _props$isFocused = props.isFocused,
      isFocused = _props$isFocused === void 0 ? false : _props$isFocused,
      isDisabled = props.isDisabled,
      icon = props.icon,
      lineText = props.lineText;

  var _useSubline = useSubline(),
      openSubLine = _useSubline.openSubLine,
      subLine = _useSubline.item,
      closeSubLine = _useSubline.closeSubLine;

  var _usePanel = usePanel(),
      openPanel = _usePanel.openPanel,
      panelItem = _usePanel.item,
      closePanel = _usePanel.closePanel,
      controller = _usePanel.controller;

  var _useSide = useSide(),
      isStart = _useSide.isStart,
      isEnd = _useSide.isEnd;

  var onItemClick = useItemClick();

  var _React$useState = React.useState(false),
      isTouched = _React$useState[0],
      setIsTouched = _React$useState[1];

  var startTouch = React.useCallback(function (event) {
    event.stopPropagation();
    setIsTouched(true);
  }, []);
  var endTouch = React.useCallback(function (event) {
    event.stopPropagation();
    setIsTouched(false);
  }, []);
  var handleClick = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    setIsTouched(false);

    if (isDisabled) {
      return;
    } // 如果点到了引导等无关的内容，这里忽略掉


    if ( // @ts-ignore
    typeof event.target.closest === 'function' && // @ts-ignore
    event.target.closest('.highIndexPopover')) {
      return;
    } // 全局的 onClick


    onItemClick && onItemClick(item); // 如果有 closePanelOnClick / hideToolbarOnClick 标记，先处理一下

    if (typeof item !== 'string') {
      // 关闭底部 panel 并 show 键盘
      if (item.closePanelOnClick) {
        panelItem && closePanel && closePanel(true);
      } // 关闭底部 panel 并 blur 键盘


      if (item.hideToolbarOnClick) {
        panelItem && closePanel && closePanel(false);
        controller == null ? void 0 : controller.run('onCangjieBlur');
      }
    } // 如果定义了自己的 onClick，开始回调


    if (typeof item !== 'string' && item.onClick) {
      item.onClick();
    } // 处理二级浮窗


    if (subLine && subLine === item) {
      closeSubLine && closeSubLine();
    } else if (panelItem && panelItem === item) {
      closePanel && closePanel();
    } else if (typeof item === 'object' && item.children) {
      openSubLine && openSubLine(item);
    } else {
      openPanel && openPanel(item);
    } // 处理标准的 onClick


    onClick && onClick(item);
  }, [isDisabled, onItemClick, item, subLine, panelItem, onClick, closePanel, controller, closeSubLine, openSubLine, openPanel]);
  var dataKey = React.useMemo(function () {
    return itemToKey(item);
  }, [item]);
  var OuterBox = Outers[type];
  var Box = Boxes[type];
  var isIconKey = typeof icon === 'string' && icons[icon];
  var BaseIcon = isIconKey ? icons[icon] : icon;
  return /*#__PURE__*/_createElement(OuterBox, {
    flexWidth: width || 1,
    onTouchStart: startTouch,
    onTouchEnd: endTouch,
    onTouchCancel: endTouch,
    onMouseDown: handleClick,
    isTouched: isTouched,
    isActive: isActive,
    isFocused: isFocused
  }, /*#__PURE__*/_createElement(Box, {
    "data-toolbar-box": true,
    "data-toolbar-key": dataKey,
    style: style,
    isActive: isActive,
    isFocused: isFocused,
    isDisabled: isDisabled,
    isStart: isStart,
    isEnd: isEnd
  }, typeof BaseIcon === 'string' && /*#__PURE__*/_createElement(ImageIcon, {
    src: BaseIcon
  }), typeof BaseIcon === 'function' && /*#__PURE__*/_createElement(BaseIcon, null), !!children && children, !!lineText && /*#__PURE__*/_createElement("div", null, lineText)));
}
//# sourceMappingURL=toolItem.js.map