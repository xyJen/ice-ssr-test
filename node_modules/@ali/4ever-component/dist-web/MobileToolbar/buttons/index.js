import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { DIVIDER, DIVIDER_VERT, NEW_LINE, ALIGN_PLACEHOLDER, DIVIDER_NONE } from "../constant";
import ToolItemButton from "./toolItem";
import { SideContext } from "../hooks/buttonSide";
import { usePanel, useSubline } from "../hooks/index";
import { NewLine, Divider, AlignIcon, GroupTitle } from "./styled";
import { Divider as DividerVert } from "../components/styled";
var keyboard = {
  name: 'keyboard',
  Component: function Component(_ref) {
    var Wrapper = _ref.Wrapper,
        closePanel = _ref.closePanel,
        controller = _ref.controller,
        panelShowing = _ref.panelShowing,
        rest = _objectWithoutPropertiesLoose(_ref, ["Wrapper", "closePanel", "controller", "panelShowing"]);

    var _usePanel = usePanel(),
        item = _usePanel.item;

    var handleClick = React.useCallback(function () {
      if (item) {
        closePanel && closePanel();
      } else {
        controller.run('onCangjieBlur');
      }
    }, [item, closePanel, controller]);
    var style = React.useMemo(function () {
      return item ? {
        transition: 'transform 0.3s'
      } : {
        transition: 'transform 0.3s',
        transform: 'scale(1, -1)'
      };
    }, [item]);
    return /*#__PURE__*/_createElement(Wrapper, _extends({
      style: style,
      onClick: handleClick,
      type: "big"
    }, rest, {
      icon: "keybrdUp"
    }));
  }
};
/**
 * toolbar 按钮的逻辑，和 PC 端保持一致，从插件里拿 toolbar 字段
 *
 * 如果仅有 name，没有 Component，会被视为「插件按钮」
 */

function PluginButton(props) {
  var item = props.item,
      plugins = props.plugins,
      controller = props.controller,
      isStart = props.isStart,
      isEnd = props.isEnd,
      closePanel = props.closePanel;
  var name = typeof item === 'string' ? item : item.name;

  var _name$split = name.split('.'),
      pluginName = _name$split[0],
      _name$split$ = _name$split[1],
      buttonName = _name$split$ === void 0 ? 'mobile' : _name$split$;

  var plugin = plugins.hash[pluginName];

  var _ref2 = (plugin == null ? void 0 : plugin.toolbar) || {},
      _ref2$buttons = _ref2.buttons,
      buttons = _ref2$buttons === void 0 ? {} : _ref2$buttons,
      _ref2$locale = _ref2.locale,
      locale = _ref2$locale === void 0 ? {} : _ref2$locale;

  var Component = buttons[buttonName];
  var sideValue = React.useMemo(function () {
    return {
      isStart: isStart,
      isEnd: isEnd
    };
  }, [isStart, isEnd]);

  if (!Component) {
    return null;
  }

  return /*#__PURE__*/_createElement(SideContext.Provider, {
    value: sideValue
  }, /*#__PURE__*/_createElement(Component, {
    controller: controller,
    locale: locale,
    item: item,
    panelShowing: false,
    subLineShowing: false,
    closePanel: closePanel,
    Wrapper: ToolItemButton,
    selection: controller.value.selection
  }));
}
/**
 * toolbar 按钮渲染逻辑，这里会处理分割线、新行等逻辑
 */


var _ref3 = /*#__PURE__*/_createElement(Divider, null);

var _ref4 = /*#__PURE__*/_createElement(DividerVert, null);

var _ref5 = /*#__PURE__*/_createElement(NewLine, null);

var _ref6 = /*#__PURE__*/_createElement(AlignIcon, null);

export default function ItemView(props) {
  var rawItem = props.item,
      controller = props.controller;
  var item = React.useMemo(function () {
    var parsedItem = rawItem === 'keyboard' ? keyboard : rawItem;
    return typeof parsedItem === 'string' ? {
      name: parsedItem
    } : parsedItem;
  }, [rawItem]);
  var Component = item.Component;

  var _usePanel2 = usePanel(),
      closePanel = _usePanel2.closePanel,
      openPanel = _usePanel2.openPanel,
      panelItem = _usePanel2.item;

  var _useSubline = useSubline(),
      subLineItem = _useSubline.item;

  var panelShowing = panelItem === rawItem;
  var subLineShowing = subLineItem === rawItem;

  if (item.name === DIVIDER_NONE || !item.name) {
    return null;
  }

  if (item.name === DIVIDER) {
    return _ref3;
  }

  if (item.name === DIVIDER_VERT) {
    return _ref4;
  }

  if (item.name === NEW_LINE) {
    return _ref5;
  }

  if (item.name === ALIGN_PLACEHOLDER) {
    return _ref6;
  }

  if (item.title) {
    return /*#__PURE__*/_createElement(GroupTitle, null, item.title);
  }

  if (Component) {
    return /*#__PURE__*/_createElement(Component, {
      item: item,
      panelItem: panelItem,
      subLineItem: subLineItem,
      panelShowing: panelShowing,
      subLineShowing: subLineShowing,
      closePanel: closePanel,
      openPanel: openPanel,
      Wrapper: ToolItemButton,
      controller: controller,
      selection: controller.value.selection
    });
  }

  return /*#__PURE__*/_createElement(PluginButton, _extends({}, props, {
    item: item,
    closePanel: closePanel
  }));
}
//# sourceMappingURL=index.js.map