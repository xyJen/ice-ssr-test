import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { blockEvent } from "../utils";
import { HeaderWrapper, IconWrapper, HeaderText } from "./styled";
export default function Header(_ref) {
  var onDragOffsetChange = _ref.onDragOffsetChange,
      onDragStatusChange = _ref.onDragStatusChange,
      Title = _ref.title,
      Icon = _ref.Icon;
  var ref = React.useRef(null);
  var dragOffset = React.useRef(0);
  var isDragging = React.useRef(false);
  var handleTouchStart = React.useCallback(function (event) {
    blockEvent(event);
    isDragging.current = true;
    onDragStatusChange(true);
    var touchY = event.touches[0].clientY;
    dragOffset.current = touchY;
  }, []);
  var handleTouchMove = React.useCallback(function (event) {
    blockEvent(event);

    if (!isDragging.current) {
      return;
    }

    var touchY = event.touches[0].clientY;
    onDragOffsetChange(touchY - dragOffset.current);
  }, []);
  var handleTouchEnd = React.useCallback(function (event) {
    blockEvent(event);
    isDragging.current = false;
    onDragStatusChange(false);
  }, []);
  React.useEffect(function () {
    var domNode = ref.current;

    if (!domNode) {
      return undefined;
    }

    domNode.addEventListener('touchstart', handleTouchStart, {
      passive: false
    });
    domNode.addEventListener('touchmove', handleTouchMove, {
      passive: false
    });
    domNode.addEventListener('touchend', handleTouchEnd, {
      passive: false
    });
    domNode.addEventListener('touchcancel', handleTouchEnd, {
      passive: false
    });
    return function () {
      domNode.removeEventListener('touchstart', handleTouchStart);
      domNode.removeEventListener('touchmove', handleTouchMove);
      domNode.removeEventListener('touchend', handleTouchEnd);
      domNode.removeEventListener('touchcancel', handleTouchEnd);
    };
  }, [handleTouchStart, handleTouchMove, handleTouchEnd]);
  return /*#__PURE__*/_createElement(HeaderWrapper, {
    "data-panel-header": true,
    ref: ref
  }, typeof Title === 'string' ? /*#__PURE__*/_createElement(React.Fragment, null, !!Icon && /*#__PURE__*/_createElement(IconWrapper, null, /*#__PURE__*/_createElement(Icon, null)), /*#__PURE__*/_createElement(HeaderText, {
    hasIcon: !!Icon
  }, Title)) : /*#__PURE__*/_createElement(Title, null));
}
//# sourceMappingURL=header.js.map