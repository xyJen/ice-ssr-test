import React from 'react';
import { BOTTOM_BAR_SIZE } from "../constant"; // 未知高度时，找个很大值来表示

var MAX_HEIGHT = 10000; // iPad 接 keyboard 时，focus 后隔很久（约 600ms）才会发 resize 事件，这里取 700 避免闪烁

var IPAD_KEYBOARD_DELAY = 700; // iOS keyboard 事件。在 IM 场景里，实时汇报的 window.innerHeight 不正确，因此 delay 一下

var IOS_KEYBOARD_DELAY = 300; // 底部面板的最小高度

var PANEL_MIN_HEIGHT = 220;
var INPUT_ELEMENTS = [HTMLInputElement, HTMLTextAreaElement];
export default function useKeyboardTop(isPanelShowing, panelOpsRef, wrapperRef) {
  var _React$useMemo = React.useMemo(function () {
    var activeElement = window.document.activeElement;
    var innerHeight = Math.round(window.innerHeight);
    var isFocused = INPUT_ELEMENTS.some(function (E) {
      return activeElement instanceof E;
    });
    var fullHeight = isFocused ? MAX_HEIGHT : innerHeight;
    var sqHeight = isFocused ? innerHeight : MAX_HEIGHT;
    return [isFocused, fullHeight, sqHeight];
  }, []),
      initFocus = _React$useMemo[0],
      initFullHeight = _React$useMemo[1],
      initSqHeight = _React$useMemo[2];

  var _React$useState = React.useState(initFullHeight),
      fullHeight = _React$useState[0],
      setFullHeight = _React$useState[1];

  var _React$useState2 = React.useState(initSqHeight),
      squeezedHeight = _React$useState2[0],
      setSqueezedHeight = _React$useState2[1];

  React.useEffect(function () {
    var timer = null;
    var activeElement = window.document.activeElement;
    var focusedNow = INPUT_ELEMENTS.some(function (E) {
      return activeElement instanceof E;
    });
    var width = Math.round(window.innerWidth);

    var delayUpdator = function delayUpdator(time) {
      if (time === void 0) {
        time = 0;
      }

      return function () {
        timer && clearTimeout(timer);
        timer = setTimeout(function () {
          var innerHeight = Math.round(window.innerHeight);
          var innerWidth = Math.round(window.innerWidth);

          if (focusedNow) {
            var ele = wrapperRef.current;
            var safeAreaTop = ele ? parseInt(window.getComputedStyle(ele).getPropertyValue('--sab'), 10) || 0 : 0;
            setSqueezedHeight(innerHeight - safeAreaTop);
          } else {
            setFullHeight(innerHeight);
          }

          if (innerWidth !== width && panelOpsRef.current) {
            width = innerWidth;
            panelOpsRef.current.item && panelOpsRef.current.closePanel();
          }
        }, time);
      };
    };
    /**
     * 默认只需要 resize 时 setHeight，focus 时取消 timer 就好
     * 但是这个依赖浏览器的时机，需要 focus 先触发、resize 后触发。
     *
     * 为了避免兼容问题，在 focus 时也加了 setHeight 来兜底
     */


    var focusUpdator = delayUpdator(IPAD_KEYBOARD_DELAY);
    var resizeUpdator = delayUpdator(IOS_KEYBOARD_DELAY);

    if (focusedNow !== initFocus) {
      resizeUpdator();
    }

    var handleFocus = function handleFocus() {
      focusedNow = true;
      focusUpdator();
    };

    var handleBlur = function handleBlur() {
      focusedNow = false;
      focusUpdator();
    };

    window.addEventListener('focus', handleFocus, {
      capture: true
    });
    window.addEventListener('blur', handleBlur, {
      capture: true
    });
    window.addEventListener('resize', resizeUpdator, {
      capture: true
    });
    return function () {
      timer && clearTimeout(timer);
      window.removeEventListener('focus', handleFocus, {
        capture: true
      });
      window.removeEventListener('blur', handleBlur, {
        capture: true
      });
      window.removeEventListener('resize', resizeUpdator, {
        capture: true
      });
    };
  }, [initFocus, panelOpsRef, wrapperRef]); // iPad 外接键盘场景，toolbar 在最底部。这里保障有一个最小高度

  var actualHeight = isPanelShowing ? Math.min(squeezedHeight, fullHeight - PANEL_MIN_HEIGHT) : squeezedHeight;
  var top = actualHeight - BOTTOM_BAR_SIZE;
  return top;
}
//# sourceMappingURL=useKeyboardTop.js.map