{"version":3,"sources":["../../../../src/MobileToolbar/hooks/useLayoutFilter.ts"],"names":["React","debounce","useResizer","allLayout","useState","Math","round","window","innerWidth","width","setWidth","useEffect","handleResize","w","addEventListener","cancel","removeEventListener","layout","useMemo","newLayout","filter","widthRange","start","end","Number","MAX_SAFE_INTEGER"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,WAAzB;AAGA,eAAe,SAASC,UAAT,CAAoBC,SAApB,EAAqD;AAAA,wBACxCH,KAAK,CAACI,QAAN,CAAeC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,UAAlB,CAAf,CADwC;AAAA,MAC3DC,KAD2D;AAAA,MACpDC,QADoD;;AAElEV,EAAAA,KAAK,CAACW,SAAN,CAAgB,YAAM;AACpB,QAAMC,YAAY,GAAGX,QAAQ,CAAC,YAAM;AAClC,UAAMY,CAAC,GAAGR,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,UAAlB,CAAV;AACAE,MAAAA,QAAQ,CAACG,CAAD,CAAR;AACD,KAH4B,EAG1B,GAH0B,CAA7B;AAIAN,IAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACA,WAAO,YAAM;AACXA,MAAAA,YAAY,CAACG,MAAb;AACAR,MAAAA,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC;AACD,KAHD;AAID,GAVD,EAUG,EAVH;AAWA,MAAMK,MAAM,GAAGjB,KAAK,CAACkB,OAAN,CAAc,YAAM;AACjC,QAAMC,SAAS,GAAGhB,SAAS,CAACiB,MAAV,CAAiB,gBAAoB;AAAA,UAAjBC,UAAiB,QAAjBA,UAAiB;;AACrD,UAAI,CAACA,UAAL,EAAiB;AACf,eAAO,IAAP;AACD;;AAHoD,UAI9CC,KAJ8C,GAIND,UAJM;AAAA,yBAINA,UAJM;AAAA,UAIvCE,GAJuC,6BAIjCC,MAAM,CAACC,gBAJ0B;;AAKrD,UAAIhB,KAAK,IAAIa,KAAT,IAAkBb,KAAK,GAAGc,GAA9B,EAAmC;AACjC,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KATiB,CAAlB;AAUA,WAAOJ,SAAP;AACD,GAZc,EAYZ,CAAChB,SAAD,EAAYM,KAAZ,CAZY,CAAf;AAaA,SAAOQ,MAAP;AACD","sourcesContent":["import React from 'react';\nimport { debounce } from 'lodash-es';\nimport { MobileToolbarGroup } from '../types';\n\nexport default function useResizer(allLayout: MobileToolbarGroup[]) {\n  const [width, setWidth] = React.useState(Math.round(window.innerWidth));\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      const w = Math.round(window.innerWidth);\n      setWidth(w);\n    }, 100);\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.cancel();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  const layout = React.useMemo(() => {\n    const newLayout = allLayout.filter(({ widthRange }) => {\n      if (!widthRange) {\n        return true;\n      }\n      const [start, end = Number.MAX_SAFE_INTEGER] = widthRange;\n      if (width >= start && width < end) {\n        return true;\n      }\n      return false;\n    });\n    return newLayout;\n  }, [allLayout, width]);\n  return layout;\n}\n"],"file":"useLayoutFilter.js"}