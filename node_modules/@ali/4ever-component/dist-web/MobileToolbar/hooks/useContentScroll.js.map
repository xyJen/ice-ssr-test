{"version":3,"sources":["../../../../src/MobileToolbar/hooks/useContentScroll.ts"],"names":["React","domUtils","useScrollableContainer","useScrollableContent","BOTTOM_BAR_SIZE","SUBLINE_MARGIN_BOTTOM","useContentScroll","subLine","panelItem","controller","top","content","container","useEffect","visualHeight","window","_visualHeight","selection","value","defaultEle","document","documentElement","cnt","scroller","Window","scrollToSelection"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAEEC,QAFF,EAGEC,sBAHF,EAIEC,oBAJF,QAKO,oBALP;AAMA,SAASC,eAAT,EAA0BC,qBAA1B;AAGA;AACA,eAAe,SAASC,gBAAT,CACbC,OADa,EAEbC,SAFa,EAGbC,UAHa,EAIbC,GAJa,EAKb;AACA,MAAMC,OAAO,GAAGR,oBAAoB,EAApC;AACA,MAAMS,SAAS,GAAGV,sBAAsB,EAAxC;AACAF,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpB,QAAIC,YAAY,GAAG,CAAnB;;AACA,QAAIP,OAAJ,EAAa;AACXO,MAAAA,YAAY,GAAGJ,GAAG,GAAGL,qBAArB;AACD,KAFD,MAEO,IAAIG,SAAJ,EAAe;AACpBM,MAAAA,YAAY,GAAGJ,GAAG,GAAGN,eAArB;AACD,KANmB,CAOpB;;;AACAW,IAAAA,MAAM,CAACC,aAAP,GAAuBF,YAAvB;AACA,WAAO,YAAM;AACX;AACAC,MAAAA,MAAM,CAACC,aAAP,GAAuB,CAAvB;AACD,KAHD;AAID,GAbD,EAaG,CAACR,SAAD,EAAYD,OAAZ,EAAqBG,GAArB,CAbH;AAeAV,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpB,QAAIN,OAAJ,EAAa;AAAA,UACHU,SADG,GACWR,UAAU,CAACS,KADtB,CACHD,SADG;AAEX,UAAME,UAAU,GAAGJ,MAAM,CAACK,QAAP,CAAgBC,eAAnC;AACA,UAAMC,GAAG,GAAGX,OAAO,IAAIQ,UAAvB;AACA,UAAMI,QAAQ,GACZ,CAACX,SAAS,YAAYY,MAArB,GAA8BL,UAA9B,GAA2CP,SAA5C,KAA0DO,UAD5D;AAEAlB,MAAAA,QAAQ,CAACwB,iBAAT,CAA2BR,SAA3B,EAAsCK,GAAtC,EAA2CC,QAA3C,EAAqDd,UAArD;AACD;AACF,GATD,EASG,CAACF,OAAD,EAAUE,UAAV,EAAsBE,OAAtB,EAA+BC,SAA/B,CATH;AAUD","sourcesContent":["import React from 'react';\nimport {\n  Controller,\n  domUtils,\n  useScrollableContainer,\n  useScrollableContent,\n} from '@ali/4ever-cangjie';\nimport { BOTTOM_BAR_SIZE, SUBLINE_MARGIN_BOTTOM } from '../constant';\nimport { MobileToolbarItem } from '../types';\n\n// 在打开二级浮出菜单、底部二级面板时候，处理正文的滚动，避免光标被遮挡\nexport default function useContentScroll(\n  subLine: MobileToolbarItem | undefined,\n  panelItem: MobileToolbarItem | undefined,\n  controller: Controller,\n  top: number,\n) {\n  const content = useScrollableContent();\n  const container = useScrollableContainer();\n  React.useEffect(() => {\n    let visualHeight = 0;\n    if (subLine) {\n      visualHeight = top - SUBLINE_MARGIN_BOTTOM;\n    } else if (panelItem) {\n      visualHeight = top + BOTTOM_BAR_SIZE;\n    }\n    // @ts-ignore\n    window._visualHeight = visualHeight;\n    return () => {\n      // @ts-ignore\n      window._visualHeight = 0;\n    };\n  }, [panelItem, subLine, top]);\n\n  React.useEffect(() => {\n    if (subLine) {\n      const { selection } = controller.value;\n      const defaultEle = window.document.documentElement;\n      const cnt = content || defaultEle;\n      const scroller =\n        (container instanceof Window ? defaultEle : container) || defaultEle;\n      domUtils.scrollToSelection(selection, cnt, scroller, controller);\n    }\n  }, [subLine, controller, content, container]);\n}\n"],"file":"useContentScroll.js"}