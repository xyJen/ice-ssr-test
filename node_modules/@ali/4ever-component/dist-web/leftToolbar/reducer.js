import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var PREVENT_MOUSE_MOVE = Symbol('PREVENT_MOUSE_MOVE');
var CLEAR_PREVENT = Symbol('CLEAR_PREVENT');
var UPDATE_HOVER_BLOCK = Symbol('UPDATE_HOVER_BLOCK');
export function preventMouseMove() {
  return {
    type: PREVENT_MOUSE_MOVE
  };
}
export function clearPrevent() {
  return {
    type: CLEAR_PREVENT
  };
}
export function updateHoverBlock(payload) {
  return {
    type: UPDATE_HOVER_BLOCK,
    payload: payload
  };
}
export default function leftToolbarReducer(data, action) {
  var type = action.type,
      payload = action.payload;

  var block = data.block,
      rest = _objectWithoutPropertiesLoose(data, ["block"]);

  switch (type) {
    case PREVENT_MOUSE_MOVE:
      return _extends({}, data, {
        preventMouseMove: true
      });

    case UPDATE_HOVER_BLOCK:
      if (!payload) {
        return rest;
      }

      return _extends({}, rest, {
        block: payload
      });

    case CLEAR_PREVENT:
      return _extends({}, data, {
        preventMouseMove: false
      });

    default:
      return data;
  }
}
//# sourceMappingURL=reducer.js.map