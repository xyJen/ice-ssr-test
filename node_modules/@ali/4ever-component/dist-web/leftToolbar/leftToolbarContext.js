import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ActiveInteractionHooks } from "../HoverBlock/ActiveInteractionContext";
import reducer, { clearPrevent as _clearPrevent, updateHoverBlock as _updateHoverBlock, preventMouseMove as _preventMouseMove } from "./reducer";
var initData = {
  preventMouseMove: false
};
var initDispatch = {
  updateHoverBlock: function updateHoverBlock() {},
  clearPrevent: function clearPrevent() {},
  preventMouseMove: function preventMouseMove() {}
};
var useActiveInteraction = ActiveInteractionHooks.useActiveInteraction;
export var LeftToolbarContext = /*#__PURE__*/React.createContext([initData, initDispatch]);
export var useLeftToolbar = function useLeftToolbar() {
  return React.useContext(LeftToolbarContext);
};
export var LeftToolbarProvider = function LeftToolbarProvider(props) {
  var _React$useReducer = React.useReducer(reducer, initData),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  var _useActiveInteraction = useActiveInteraction(),
      activeType = _useActiveInteraction[0];

  var activeRef = React.useRef('');
  activeRef.current = activeType;
  var actions = React.useMemo(function () {
    return {
      updateHoverBlock: function updateHoverBlock(block) {
        dispatch(_updateHoverBlock(block));
      },
      clearPrevent: function clearPrevent() {
        dispatch(_clearPrevent());
      },
      preventMouseMove: function preventMouseMove() {
        dispatch(_preventMouseMove());
      }
    };
  }, [dispatch]);
  var value = React.useMemo(function () {
    return [state, actions];
  }, [state, actions]);
  return /*#__PURE__*/_createElement(LeftToolbarContext.Provider, {
    value: value
  }, props.children);
};
//# sourceMappingURL=leftToolbarContext.js.map