/* eslint-disable @typescript-eslint/ban-ts-comment */
import { Block, constants } from '@ali/4ever-cangjie';
var HOT_AREA = 100;
var _constants$Selector = constants.Selector,
    leafBlockKey = _constants$Selector.leafBlock,
    cangjieKey = _constants$Selector.key,
    edgeSelectable = _constants$Selector.edgeSelectable,
    contentKey = _constants$Selector.content,
    editable = _constants$Selector.editable;
var DRAG_BAR_KEY = 'data-drag-handler-key';
var COLUMN_SELECTOR = 'data-columns'; // 如果鼠标在 content 左侧，则往右侧偏移一部分，取新的元素。

var RIGHT_OFFSET = 20;
/** dom getParentByAttributes */

export function getParentByAttributes(attribute, target) {
  if (!target || !target.parentElement) return null;
  var attributes = Array.isArray(attribute) ? attribute : [attribute];
  var found = target.parentElement;
  var result = null;

  while (found && !found.getAttribute(contentKey) && found !== window.document.body && found !== window.document.documentElement && !found.getAttribute(COLUMN_SELECTOR) && // 容器节点不再继续往上找
  !found.getAttribute('data-container-block')) {
    for (var i = 0; i < attributes.length; i++) {
      if (found.getAttribute(attributes[i])) {
        result = found;
      }
    }

    found = found.parentElement;
  }

  return result;
}
/**
 * 用于检查那种 data-leaf-block 被一层 wrapper 包裹的段落节点
 * 比如：列表
 */

var checkIsWrapperBlock = function checkIsWrapperBlock(target) {
  if (!target) {
    return false;
  }

  return !!(target.querySelector('[data-callout-group]') || target.getAttribute('data-testid') === 'refblock-container');
};

var checkIsListWrapperBlock = function checkIsListWrapperBlock(target) {
  if (!target) {
    return false;
  }

  return !!(target.getAttribute('data-testid') === 'list');
};
/**
 * 根据鼠标移动事件查找文档 key
 * 策略：一直查找到文档内容根节点或 body/html
 * 优先使用支持
 * 其次使用 列表/leafBlock 节点
 * @param event
 * @param container
 */


export default function findBlockKeyFromEvent(event, container, controller) {
  var _oriTarget, _oriTarget2, _target;

  var oriTarget = event.target;
  var blockKey = '';
  var edgeKey = ''; // 如果落在了拖拽栏上，直接返回对应的 key

  var parentDragBar = (_oriTarget = oriTarget) == null ? void 0 : _oriTarget.closest("[" + DRAG_BAR_KEY + "]");
  var selfKey = (parentDragBar == null ? void 0 : parentDragBar.getAttribute(DRAG_BAR_KEY)) || ((_oriTarget2 = oriTarget) == null ? void 0 : _oriTarget2.getAttribute(DRAG_BAR_KEY));

  if (selfKey) {
    return selfKey;
  }

  var editableNode = container == null ? void 0 : container.querySelector("[" + editable + "]");

  if (editableNode) {
    var rect = editableNode.getBoundingClientRect();
    var clientX = event.clientX,
        clientY = event.clientY; // 兼容在左边 padding 区域也可以识别
    // @ts-ignore

    if (window.document.elementFromPoint && clientX >= rect.left - HOT_AREA && clientX <= rect.left) {
      // @ts-ignore
      oriTarget = window.document.elementFromPoint(rect.left + RIGHT_OFFSET, clientY);
    }
  }

  var target = oriTarget;
  var finnalBlock = null; // 1. 先尝试找 列表 或 leafBlock

  var blockEle = (_target = target) != null && _target.getAttribute(leafBlockKey) ? target : getParentByAttributes([leafBlockKey], target);

  if (blockEle) {
    blockKey = blockEle.getAttribute(cangjieKey) || leafBlockKey;
    finnalBlock = blockEle;
  } else {
    target = oriTarget;
  } // 2. 遍历找到最上层的 edgeBlock（例如表格里的 edge block）


  var edgeEle = getParentByAttributes(edgeSelectable, target);

  if (edgeEle) {
    edgeKey = edgeEle.getAttribute(cangjieKey) || edgeKey;
    finnalBlock = edgeEle;
  }

  var edgeNode = controller.value.document.getNode(edgeKey); // TODO: 这里与 table 耦合，先写死，待改造

  if (Block.isBlock(edgeNode) && edgeNode.type === 'table') {
    edgeKey = '';
  }

  var groupMapKey = '';

  if (!edgeKey && !blockKey && target && checkIsListWrapperBlock(target)) {
    var mapBlock = target.querySelector("[" + cangjieKey + "]");

    if (mapBlock) {
      groupMapKey = mapBlock.getAttribute(cangjieKey) || '';
      finnalBlock = mapBlock;
    }
  } else if (!edgeKey && !blockKey && target && checkIsWrapperBlock(target)) {
    groupMapKey = target.getAttribute(cangjieKey) || '';
    finnalBlock = target;
  }

  if (finnalBlock && checkIsWrapperBlock(finnalBlock)) {
    // 需要对这里的key进行一次重新定位
    var eventY = event.y;
    var firstBlock = finnalBlock.querySelector("[" + cangjieKey + "]");

    if (firstBlock) {
      var _firstBlock$getBoundi = firstBlock == null ? void 0 : firstBlock.getBoundingClientRect(),
          y = _firstBlock$getBoundi.y;

      if (eventY - y > 0) {
        return '';
      }
    }
  } // 优先级：edgeKey > leafBlockKey（比如在表格中）


  var finalKey = edgeKey || blockKey || groupMapKey;
  return finalKey || '';
}
//# sourceMappingURL=findBlockKeyFromEvent.js.map