import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { debounce } from 'lodash-es';
import { requestIdleCallback, cancelIdleCallback } from '@ali/4ever-utils';
export function idleRender(Component, delay, options) {
  return /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(IdleComponent, _React$Component);

    function IdleComponent() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.timeout = -1;
      _this.debouncedForceUpdate = debounce(function () {
        _this.forceUpdate();
      }, delay, options);

      _this.updateWhenIdle = function () {
        cancelIdleCallback(_this.timeout);
        _this.timeout = requestIdleCallback(function () {
          _this.debouncedForceUpdate();
        });
      };

      return _this;
    }

    var _proto = IdleComponent.prototype;

    _proto.shouldComponentUpdate = function shouldComponentUpdate() {
      this.updateWhenIdle();
      return false;
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.debouncedForceUpdate.cancel();
      cancelIdleCallback(this.timeout);
    };

    _proto.render = function render() {
      return /*#__PURE__*/_createElement(Component, this.props);
    };

    return IdleComponent;
  }(React.Component);
}
//# sourceMappingURL=index.js.map