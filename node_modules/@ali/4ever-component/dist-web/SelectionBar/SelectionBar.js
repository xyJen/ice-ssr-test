import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { zIndex } from '@ali/4ever-utils';
import styled, { keyframes } from 'styled-components';
import { SimpleToolbar as InlineFloatToolbar, NewToolbarMode as ToolbarMode } from "../NewToolbar";
import { noop } from 'lodash-es';
import { mountSelectionToolbar } from "./reducer";
var tableRowSlideInBottom = /*#__PURE__*/keyframes(["0%{opacity:0;transform:translate(0%,-50%);}90%{opacity:1;transform:translate(0%,-5%);}100%{opacity:1;transform:translate(0%,0%);}"]);
var tableRowSlideOutBottom = /*#__PURE__*/keyframes(["0%{opacity:1;transform:translate(0,0);}100%{opacity:0;transform:translate(0,50%);}"]);
var tableRowSlideInTop = /*#__PURE__*/keyframes(["0%{opacity:0;transform:translate(0,-50%);}90%{opacity:1;transform:translate(0,-5%);}100%{opacity:1;transform:translate(0);}"]);
var tableRowSlideOutTop = /*#__PURE__*/keyframes(["0%{opacity:1;transform:translate(0);}100%{opacity:0;transform:translate(0,-50%);}"]);
var slideInTop = /*#__PURE__*/keyframes(["0%{opacity:0;transform:translate(-50%,-50%);}90%{opacity:1;transform:translate(-50%,-5%);}100%{opacity:1;transform:translate(-50%);}"]);
var slideOutTop = /*#__PURE__*/keyframes(["0%{opacity:1;transform:translate(-50%);}100%{opacity:0;transform:translate(-50%,30%);}"]);
var slideInBottom = /*#__PURE__*/keyframes(["0%{opacity:0;transform:translate(-50%,-50%);}90%{opacity:1;transform:translate(-50%,5%);}100%{opacity:1;transform:translate(-50%);}"]);
var slideOutBottom = /*#__PURE__*/keyframes(["0%{opacity:1;transform:translate(-50%);}100%{opacity:0;transform:translate(-50%,-30%);}"]);
var SelectionBarBox = /*#__PURE__*/styled.div(["position:absolute;z-index:", ";top:", "px;left:", "px;height:", "px;width:fit-content;transform:", ";background:#FFFFFF;box-shadow:0px 0px 1px rgba(0,0,0,0.24),0px 8px 24px rgba(0,0,0,0.16);border-radius:4px;display:flex;align-items:center;padding:0;&.table-row-slide-in-bottom{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.table-row-slide-out-bottom{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.table-row-slide-in-top{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.table-row-slide-out-top{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.slide-in-top{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.slide-out-top{animation-name:", ";animation-duration:0.2s;animation-timing-function:ease;}&.slide-in-bottom{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.slide-out-bottom{animation-name:", ";animation-duration:0.2s;animation-timing-function:ease;}"], zIndex.BI_FLOAT_TOOLBAR_Z_INDEX, function (props) {
  return props.top;
}, function (props) {
  return props.left;
}, function (props) {
  return props.height;
}, function (props) {
  return props.needTransform ? 'translate(-50%, 0)' : 'none';
}, tableRowSlideInBottom, tableRowSlideOutBottom, tableRowSlideInTop, tableRowSlideOutTop, slideInTop, slideOutTop, slideInBottom, slideOutBottom);

function getAnimation(placement, visible, needTransform) {
  if (placement === 'top') {
    if (visible) {
      if (!needTransform) {
        return 'table-row-slide-in-top';
      }

      return 'slide-in-top';
    } else {
      if (!needTransform) {
        return 'table-row-slide-out-top';
      }

      return 'slide-out-top';
    }
  }

  if (visible) {
    if (!needTransform) {
      return 'table-row-slide-in-bottom';
    }

    return 'slide-in-bottom';
  } else {
    if (!needTransform) {
      return 'table-row-slide-out-bottom';
    }

    return 'slide-out-bottom';
  }
}

function usePartialState(initialState) {
  var _React$useState = React.useState(initialState),
      state = _React$useState[0],
      setState = _React$useState[1];

  var setPartialState = React.useCallback(function (nextState) {
    setState(function (prevState) {
      return _extends({}, prevState, nextState);
    });
  }, []);
  return [state, setPartialState];
}

var INITIAL_STATE = {
  internalVisible: false,
  animate: false
};
/**
 * SelectionBar 高度
 */

export var SELECTION_BAR_HEIGHT = 36;
var SelectionBar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var visible = props.visible,
      placement = props.placement,
      toolbarLayout = props.toolbarLayout,
      moreToolbarLayout = props.moreToolbarLayout,
      x = props.x,
      y = props.y,
      content = props.content,
      _props$onAnimationInS = props.onAnimationInStart,
      onAnimationInStart = _props$onAnimationInS === void 0 ? noop : _props$onAnimationInS,
      _props$onAnimationInE = props.onAnimationInEnd,
      onAnimationInEnd = _props$onAnimationInE === void 0 ? noop : _props$onAnimationInE,
      _props$onAnimationOut = props.onAnimationOutStart,
      onAnimationOutStart = _props$onAnimationOut === void 0 ? noop : _props$onAnimationOut,
      _props$onAnimationOut2 = props.onAnimationOutEnd,
      onAnimationOutEnd = _props$onAnimationOut2 === void 0 ? noop : _props$onAnimationOut2,
      needTransform = props.needTransform,
      controller = props.controller,
      customToolButtons = props.customToolButtons;

  var _usePartialState = usePartialState(INITIAL_STATE),
      state = _usePartialState[0],
      setState = _usePartialState[1];

  var boxRef = React.useRef(null);
  var internalVisible = state.internalVisible,
      animate = state.animate;
  React.useEffect(function () {
    if (typeof ref === 'function') {
      ref(boxRef.current);
    } else if (ref) {
      ref.current = boxRef.current;
    }
  });
  React.useEffect(function () {
    if (visible && !internalVisible) {
      // 激活工具栏
      setState({
        internalVisible: true,
        animate: true
      });
    } else if (!visible && internalVisible) {
      // 关闭工具栏：先展示动画，再注销组件
      setState({
        animate: true
      });
    }
  }, [internalVisible, setState, visible]);
  React.useLayoutEffect(function () {
    if (visible && animate) {
      // 这里不合理但目前测试是最准确的，先通过这里报，再梳理
      controller.run('onAction', mountSelectionToolbar());
      onAnimationInStart(boxRef.current);
    } else if (visible && !animate) {
      onAnimationInEnd(boxRef.current);
    } else if (!visible && animate) {
      onAnimationOutStart(boxRef.current);
    } else if (!visible && !animate) {
      onAnimationOutEnd();
    }
  }, [visible, animate, onAnimationInStart, onAnimationInEnd, onAnimationOutStart, onAnimationOutEnd]);
  var handleAnimationEnd = React.useCallback(function () {
    if (visible) {
      // 可见状态下，注销动画效果
      setState({
        animate: false
      });
    } else {
      // 不可见状态下，销毁组件
      setState({
        animate: false,
        internalVisible: false
      });
    }
  }, [setState, visible]);
  var offsetY = placement === 'bottom' ? y : y - SELECTION_BAR_HEIGHT;

  if (!internalVisible) {
    return null;
  }

  var className = animate ? getAnimation(placement, visible, needTransform) : '';
  return /*#__PURE__*/_createElement(SelectionBarBox, {
    needTransform: needTransform,
    ref: boxRef,
    top: offsetY,
    left: x,
    height: SELECTION_BAR_HEIGHT,
    className: className,
    onAnimationEnd: handleAnimationEnd,
    "data-testid": "selection-bar"
  }, /*#__PURE__*/_createElement(InlineFloatToolbar, {
    container: content,
    toolbarMode: ToolbarMode.single,
    singleLayout: toolbarLayout,
    moreSingleLayout: moreToolbarLayout,
    customToolButtons: customToolButtons
  }));
});
SelectionBar.displayName = 'SelectionBar';
export default SelectionBar;
//# sourceMappingURL=SelectionBar.js.map