import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import selectionBarReducer, { UPDATE_CAN_HIDE, UPDATE_LAST_COLOR, UPDATE_LAST_FILL, UPDATE_LAST_HIGHLIGHT } from "./reducer";
var DEFAULT_COLOR = '#404040',
    INITIAL_HIGHLIGHT = '#FBF3DC',
    INITIAL_FILL = '#FDBE3D',
    INITIAL_CAN_HIDE = true;
export var SelectionBarContext = /*#__PURE__*/React.createContext(null);
export function useSelectionBarContext() {
  var context = React.useContext(SelectionBarContext);

  if (!context) {
    throw new Error('SelectionBarContext not found.');
  }

  return context;
}
export var SelectionBarProvider = function SelectionBarProvider(props) {
  var _React$useReducer = React.useReducer(selectionBarReducer, {
    lastColor: DEFAULT_COLOR,
    lastHighlight: INITIAL_HIGHLIGHT,
    lastFill: INITIAL_FILL,
    canHide: INITIAL_CAN_HIDE
  }),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  var actions = React.useMemo(function () {
    return {
      updateLastColor: function updateLastColor(color) {
        dispatch({
          type: UPDATE_LAST_COLOR,
          payload: color
        });
      },
      updateLastHighlight: function updateLastHighlight(highlight) {
        dispatch({
          type: UPDATE_LAST_HIGHLIGHT,
          payload: highlight
        });
      },
      updateLastFill: function updateLastFill(fill) {
        dispatch({
          type: UPDATE_LAST_FILL,
          payload: fill
        });
      },
      updateCanHide: function updateCanHide(canHide) {
        dispatch({
          type: UPDATE_CAN_HIDE,
          payload: canHide
        });
      }
    };
  }, []);
  var contextValue = React.useMemo(function () {
    return [state, actions];
  }, [actions, state]);
  return /*#__PURE__*/_createElement(SelectionBarContext.Provider, {
    value: contextValue
  }, props.children);
};
//# sourceMappingURL=context.js.map