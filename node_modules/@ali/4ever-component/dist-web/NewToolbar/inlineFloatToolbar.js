import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useState, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { ButtonSize, ToolbarMode } from "./interface";
import { Controller, Commands, ContextMenu, environment, useSelectionData } from '@ali/4ever-cangjie';
import { usePlugins } from "../PluginsContext";
import { judgeShouldShow } from "../Toolbar/util";
import ToolbarConfig from "./config";
import { ToolbarGroupWrapper as GroupWrapper, ToolbarColumnWrapper as ColumnWrapper, IconButton } from '@ali/we-toolbar';
import { Dropdown, ToolbarMoreNormal, Menu, EMenuMode, withTheme } from '@ali/we-design';
import { DropdownAnimation } from '@ali/we-util';
import { ToolbarReduceIndentNormal, ToolbarIncreaseIndentNormal, ToolbarCutNormal, ToolbarCopyNormal, ToolbarDeleteNormal, ToolbarEraserNormal, ToolbarBrushNormal } from '@ali/we-icon';
import { renderToolArray } from "./util";
import { idleRender } from "../idleRender";
import { upperFirst } from 'lodash-es';
import { default as MenuAdapter } from "../Menu/menu";
import { TYPE_GROUP, TYPE_MENU_ITEM } from "../Menu/interface";
;
var ACTION_COPY = ContextMenu.ACTION_COPY,
    ACTION_CUT = ContextMenu.ACTION_CUT;
export var disabledStyle = {
  display: 'flex',
  opacity: 0.35,
  pointerEvents: 'none'
};
export var MenuWrapper = /*#__PURE__*/styled.div(["background:#FFF;box-shadow:0px 0px 1px rgba(0,0,0,0.24),0px 8px 24px rgba(0,0,0,0.16);border-radius:4px;"]);
export var RowWrapper = withTheme(styled.div(["display:flex;margin-bottom:4px;:last-child{margin-bottom:0px;}box-sizing:content-box;.split-button-layout,.icon-select-layout{border-left:2px solid transparent;border-right:2px solid transparent;}> *{margin-right:2px;}> *:last-child{margin-right:0;}"]));
var ToolbarWrapperHeight = 36; // icon-select-layout 覆写 设计要求下拉不能有左右边距

var ToolbarWrapper = /*#__PURE__*/styled.div(["display:flex;justify-content:center;align-items:center;position:relative;background-color:#FFFFFF;height:", "px;border-radius:4px;box-shadow:", ";.icon-select-layout{border-left:none;border-right:none;}"], ToolbarWrapperHeight, function (props) {
  return props.enableShadow ? '0px 0px 1px rgb(0 0 0 / 24%), 0px 0px 24px rgb(0 0 0 / 8%)' : 'none';
});
export var ModKey = environment.IS_MAC ? '⌘' : 'Ctrl';
export var sizeStyle = {
  width: 190
};
var noShadowStyle = {
  boxShadow: 'none'
};

function genShortcutString(parmas) {
  var keys = parmas.split('+');
  var formatKeys = keys.map(function (key) {
    return upperFirst(key === 'mod' ? ModKey : key);
  });
  return formatKeys.join('+');
}

var ToolbarRenderNext = function ToolbarRenderNext(props) {
  var controller = Controller.useController();

  var _React$useReducer = React.useReducer(function (c) {
    return !c;
  }, false),
      forceUpdate = _React$useReducer[1];

  var _isPureTableSelection = controller.query('isPureTableSelection');

  var _hasTableSelection = controller.query('hasTableSelection');

  var plugins = usePlugins() || {
    array: [],
    hash: {}
  };
  var singleLayout = props.singleLayout,
      moreSingleLayout = props.moreSingleLayout,
      _props$hiddenToolButt = props.hiddenToolButtons,
      hiddenToolButtons = _props$hiddenToolButt === void 0 ? {} : _props$hiddenToolButt,
      _props$customToolButt = props.customToolButtons,
      customToolButtons = _props$customToolButt === void 0 ? {} : _props$customToolButt,
      disableTargets = props.disableTargets,
      fineAdaptation = props.fineAdaptation,
      container = props.container;
  var value = controller.value;
  var toolbarWrapperRef = React.useRef(null);
  /**
   * 从插件查询哪个插件被选中（暂不支持多个插件同时识别）
   * 通过调用插件 getTarget 实现
   */

  var target = React.useMemo(function () {
    var pluginsArray = plugins.array;

    for (var i = 0; i < pluginsArray.length; i += 1) {
      var tgt = void 0;
      var plugin = pluginsArray[i];
      var getTarget = plugin.toolbar && plugin.toolbar.getTarget;

      if (getTarget) {
        tgt = getTarget(controller);
      }

      if (tgt) {
        return tgt;
      }
    }
  }, [plugins.array, value]);
  /**
   * 渲染单个 toolButton
   * @param toolButton配置，支持直接传一个react元素
   * @param index
   */

  var renderTool = function renderTool(item, index) {
    var _plugin$toolbar, _plugin$toolbar2;

    if ( /*#__PURE__*/React.isValidElement(item)) {
      return item;
    }

    var name = item.name,
        hideTargets = item.hideTargets,
        hideConditions = item.hideConditions,
        showTargets = item.showTargets,
        disableItems = item.disableTargets,
        size = item.size,
        rest = _objectWithoutPropertiesLoose(item, ["name", "hideTargets", "hideConditions", "showTargets", "disableTargets", "size"]);

    if (hideConditions && hideConditions.indexOf('hasTableSelection') > -1) {
      if (_isPureTableSelection) {
        return null;
      }
    }

    if (hideConditions && hideConditions.some(function (n) {
      return controller.query(n);
    })) {
      return null;
    } // hiddenToolButtons 优先


    if (hiddenToolButtons[name]) return null;

    if (name === 'more') {
      return /*#__PURE__*/_createElement(MoreMenu, {
        container: container,
        isPureTableSelection: _isPureTableSelection
      });
    } // 优先从自定义组件里匹配


    var CustomComponent = customToolButtons[name];

    var _name$split = name.split('.'),
        pluginName = _name$split[0],
        _name$split$ = _name$split[1],
        buttonName = _name$split$ === void 0 ? 'default' : _name$split$;

    var plugin = plugins.hash[pluginName];

    if (!plugin && !CustomComponent) {
      return null;
    }

    var buttons = (plugin == null ? void 0 : plugin.toolbar) && (plugin == null ? void 0 : (_plugin$toolbar = plugin.toolbar) == null ? void 0 : _plugin$toolbar.buttons);
    var Component = CustomComponent || buttons && buttons[buttonName];

    if (!Component) {
      return null;
    }

    if (plugin != null && plugin.toolbar) {
      // 判断是否隐藏
      var shouldShow = judgeShouldShow(target, showTargets, hideTargets);
      if (!shouldShow) return null;
    } // 优先取自定义国际化文案


    var locale = plugin == null ? void 0 : (_plugin$toolbar2 = plugin.toolbar) == null ? void 0 : _plugin$toolbar2.locale;
    var realSize = size || ButtonSize.medium;
    var showTitle = realSize === ButtonSize.large;

    if (Component.needRender && !Component.needRender(controller)) {
      return null;
    }

    return /*#__PURE__*/_createElement(Component, _extends({
      controller: controller,
      toolbarMode: ToolbarMode.single,
      locale: locale,
      size: realSize,
      key: index,
      showTitle: showTitle,
      getContainer: function getContainer() {
        return toolbarWrapperRef.current || container;
      }
    }, rest));
  };

  var renderLine = function renderLine(line, index, layoutMode) {
    if (layoutMode === void 0) {
      layoutMode = 'row';
    }

    var contents = renderToolArray(line, 'toolButtons', target, renderTool);
    if (!contents) return null;
    var Wrapper = layoutMode === 'row' ? RowWrapper : ColumnWrapper;
    return /*#__PURE__*/_createElement(Wrapper, {
      key: index
    }, contents);
  };

  var renderGroup = function renderGroup(group, index, toolbarMode) {
    var layoutMode = group.layoutMode,
        hideBorder = group.hideBorder,
        clearPadding = group.clearPadding,
        groupFineAdaptation = group.fineAdaptation;
    var contents = renderToolArray(group, 'toolLines', target, renderLine, layoutMode); // 单行默认精细化控制，双行默认按组收缩

    var realFineAdaption = toolbarMode === ToolbarMode.single;

    if (groupFineAdaptation !== undefined) {
      realFineAdaption = groupFineAdaptation;
    } else if (fineAdaptation !== undefined) {
      realFineAdaption = fineAdaptation;
    }

    if (!contents) return null;
    return /*#__PURE__*/_createElement(GroupWrapper, {
      layoutType: "row",
      groupKey: index.toString(),
      fineAdaptation: realFineAdaption,
      key: index,
      hideBorder: hideBorder,
      clearPadding: clearPadding
    }, contents);
  };

  var renderSingleToolbar = function renderSingleToolbar(singleLineLayout) {
    var layout = singleLineLayout || ToolbarConfig.defaultSingleLayout; // @ts-ignore

    var tls = layout.map(function (line, idx) {
      var group = {
        toolLines: [line],
        hideBorder: false
      };

      if (idx === layout.length - 1) {
        group.hideBorder = true;
      }

      return renderGroup(group, idx, ToolbarMode.single);
    }).filter(function (item) {
      return item;
    });
    if (!tls.length) return null;
    return /*#__PURE__*/_createElement("div", {
      style: {
        display: 'flex'
      }
    }, tls);
  };
  /**
   * 阻止默认事件，防止文档区域失焦
   */


  var handleMouseDown = useCallback(function (ev) {
    var _ev$target;

    var activeElement = window.document.activeElement; // 对于有自定义输入域的不可编辑对象，不阻止其失焦行为

    if (activeElement && activeElement.closest('[data-cangjie-not-editable]')) {
      return;
    }

    if (((_ev$target = ev.target) == null ? void 0 : _ev$target.tagName.toLocaleLowerCase()) !== 'input') {
      // 放过input，以便输入地方可以正常输入
      ev.preventDefault && ev.preventDefault();
      ev.stopPropagation && ev.stopPropagation();
    }
  }, []);
  var fTgts = disableTargets || ToolbarConfig.defaultDisableTargets;
  var shouldDisableWholeToolbar = fTgts[target];
  var classes = 'bi-toolbar inline-float';
  var wrapperStyle = {
    display: 'flex'
  };

  if (shouldDisableWholeToolbar) {
    wrapperStyle = disabledStyle;
  }

  var handlePendingSelectionChange = React.useCallback(function () {
    // 处理 pending 不及时导致的工具栏长度变化的问题
    if (!_hasTableSelection && controller.query('hasTableSelection')) {
      forceUpdate();
    }
  }, [controller]);
  useSelectionData(controller.selectionData$, null, handlePendingSelectionChange, []);
  return /*#__PURE__*/_createElement(ToolbarWrapper, {
    style: wrapperStyle,
    className: classes,
    onMouseDown: handleMouseDown,
    ref: toolbarWrapperRef,
    "data-role": "inlineToolbar"
  }, renderSingleToolbar(singleLayout));
};

var _ref = /*#__PURE__*/_createElement(ToolbarEraserNormal, null);

var _ref2 = /*#__PURE__*/_createElement(ToolbarBrushNormal, null);

var _ref3 = /*#__PURE__*/_createElement(ToolbarIncreaseIndentNormal, null);

var _ref4 = /*#__PURE__*/_createElement(ToolbarReduceIndentNormal, null);

var _ref5 = /*#__PURE__*/_createElement(ToolbarCopyNormal, null);

var _ref6 = /*#__PURE__*/_createElement(ToolbarCutNormal, null);

var _ref7 = /*#__PURE__*/_createElement(ToolbarDeleteNormal, null);

var _ref8 = /*#__PURE__*/_createElement(ToolbarMoreNormal, null);

var MoreMenu = function MoreMenu(props) {
  var container = props.container,
      isPureTableSelection = props.isPureTableSelection;

  var _useState = useState(false),
      moreToolbarActive = _useState[0],
      setMoreToolbarActive = _useState[1];

  var plugins = usePlugins();
  var controller = Controller.useController();
  var onCutOrCopy = useCallback(function (action) {
    controller.run('onAction', {
      type: action
    });
  }, []);
  var onClickCut = useCallback(function () {
    onCutOrCopy(ACTION_CUT);
  }, [onCutOrCopy]);
  var onClickCopy = useCallback(function () {
    onCutOrCopy(ACTION_COPY);
  }, [onCutOrCopy]);
  var onClickDelete = useCallback(function () {
    controller.command(Commands.del);
  }, [onCutOrCopy]);
  var insertMenus = React.useMemo(function () {
    var _plugins$hash, _draggablePlugin$tool, _draggablePlugin$tool2, _draggablePlugin$tool3, _draggablePlugin$tool4, _draggablePlugin$tool5, _draggablePlugin$tool6;

    // Copy Cut 的文案只有从 draggable 插件来
    var draggablePlugin = plugins == null ? void 0 : (_plugins$hash = plugins.hash) == null ? void 0 : _plugins$hash.draggable;
    var arr = [{
      type: TYPE_GROUP,
      menus: [{
        type: TYPE_MENU_ITEM,
        menuKey: 'clearStyle',
        icon: _ref,
        autoClose: false
      }, {
        type: TYPE_MENU_ITEM,
        menuKey: 'formatPainter',
        icon: _ref2,
        autoClose: false
      }]
    }, {
      type: TYPE_GROUP,
      menus: [{
        type: TYPE_MENU_ITEM,
        menuKey: 'indent.right',
        icon: _ref3,
        autoClose: false,
        extra: genShortcutString('tab')
      }, {
        type: TYPE_MENU_ITEM,
        menuKey: 'indent.left',
        icon: _ref4,
        autoClose: false,
        extra: genShortcutString('shift+tab')
      }]
    }, {
      type: TYPE_GROUP,
      menus: [{
        type: TYPE_MENU_ITEM,
        title: draggablePlugin == null ? void 0 : (_draggablePlugin$tool = draggablePlugin.toolbar) == null ? void 0 : (_draggablePlugin$tool2 = _draggablePlugin$tool.locale) == null ? void 0 : _draggablePlugin$tool2.copyMenu,
        icon: _ref5,
        menuExtraKey: 'copy',
        onClick: onClickCopy,
        extra: genShortcutString('mod+c')
      }, {
        type: TYPE_MENU_ITEM,
        title: draggablePlugin == null ? void 0 : (_draggablePlugin$tool3 = draggablePlugin.toolbar) == null ? void 0 : (_draggablePlugin$tool4 = _draggablePlugin$tool3.locale) == null ? void 0 : _draggablePlugin$tool4.cutMenu,
        icon: _ref6,
        menuExtraKey: 'cut',
        onClick: onClickCut,
        extra: genShortcutString('mod+x')
      }, {
        type: TYPE_MENU_ITEM,
        title: draggablePlugin == null ? void 0 : (_draggablePlugin$tool5 = draggablePlugin.toolbar) == null ? void 0 : (_draggablePlugin$tool6 = _draggablePlugin$tool5.locale) == null ? void 0 : _draggablePlugin$tool6.deleteMenu,
        icon: _ref7,
        menuExtraKey: 'delete',
        onClick: onClickDelete,
        hidden: isPureTableSelection
      }]
    }];
    return arr;
  }, [onClickCopy, onClickCut, onClickDelete, isPureTableSelection]);
  return /*#__PURE__*/_createElement(Dropdown, {
    visible: moreToolbarActive,
    onVisibleChange: function onVisibleChange(v) {
      setMoreToolbarActive(v);
    } // 使用 toolbarWrapperRef 作为 Container 可保证整体动画的流畅
    // 避免主体动画先完成或者后完成
    ,
    getContainer: function getContainer() {
      return container;
    },
    overlayStyle: {
      backgroundColor: 'transparent',
      boxShadow: 'none',
      border: 'none'
    },
    overlay: /*#__PURE__*/_createElement(DropdownAnimation, {
      visible: moreToolbarActive
    }, /*#__PURE__*/_createElement(MenuWrapper, {
      style: noShadowStyle
    }, /*#__PURE__*/_createElement(Menu, {
      mode: EMenuMode.vertical,
      selectedKeys: [],
      destroyOverlayWhenInvisible: true,
      insertSubmenuToMenuRoot: true,
      style: sizeStyle,
      onClick: function onClick(v) {
        setMoreToolbarActive(false);
      },
      getContainer: function getContainer() {
        return container;
      }
    }, /*#__PURE__*/_createElement(MenuAdapter, {
      menus: insertMenus
    })))),
    placement: "bottomLeft",
    offsetY: 2
  }, /*#__PURE__*/_createElement(IconButton, {
    icon: _ref8,
    testid: "toolbar_more",
    onClick: function onClick() {
      setMoreToolbarActive(!moreToolbarActive);
    },
    active: moreToolbarActive
  }));
};

export default process.env.NODE_ENV === 'test' ? ToolbarRenderNext : idleRender(ToolbarRenderNext, 400, {
  leading: true
});
//# sourceMappingURL=inlineFloatToolbar.js.map