import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/* eslint-disable @typescript-eslint/no-shadow */
import React, { useState, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ButtonSize, ToolbarMode } from "./interface";
import { judgeShouldShow } from "../Toolbar/util";
import ToolbarConfig from "./config";
import { ToolbarWrapper } from "./styled";
import { ToolbarGroupWrapper as GroupWrapper, ToolbarRowWrapper as RowWrapper, ToolbarColumnWrapper as ColumnWrapper, ToolbarLayout } from '@ali/we-toolbar';
import { renderToolArray } from "./util";
import { idleRender } from "../idleRender";
export var disabledStyle = {
  opacity: 0.35,
  pointerEvents: 'none'
};

var ToolbarRenderNext = function ToolbarRenderNext(props) {
  var controller = props.controller,
      plugins = props.plugins,
      singleLayout = props.singleLayout,
      doubleLayout = props.doubleLayout,
      _props$hiddenToolButt = props.hiddenToolButtons,
      hiddenToolButtons = _props$hiddenToolButt === void 0 ? {} : _props$hiddenToolButt,
      toolbarMode = props.toolbarMode,
      _props$customToolButt = props.customToolButtons,
      customToolButtons = _props$customToolButt === void 0 ? {} : _props$customToolButt,
      disableTargets = props.disableTargets,
      fineAdaptation = props.fineAdaptation,
      defaultToolbarMode = props.defaultToolbarMode,
      backgroundColor = props.backgroundColor,
      onToolbarModeChange = props.onToolbarModeChange;
  var value = controller.value;

  var _useState = useState(defaultToolbarMode),
      uiToolbarMode = _useState[0],
      setUiToolbarMode = _useState[1];

  var handleModeChange = useCallback(function (mode) {
    setUiToolbarMode(mode);
    onToolbarModeChange && onToolbarModeChange(mode);
  }, []);
  var realToolbarMode = 'toolbarMode' in props ? toolbarMode : uiToolbarMode;
  /**
   * 从插件查询哪个插件被选中（暂不支持多个插件同时识别）
   * 通过调用插件 getTarget 实现
   */

  var target = React.useMemo(function () {
    var pluginsArray = plugins.array;

    for (var i = 0; i < pluginsArray.length; i += 1) {
      var tgt = void 0;
      var plugin = pluginsArray[i];
      var getTarget = plugin.toolbar && plugin.toolbar.getTarget;

      if (getTarget) {
        tgt = getTarget(controller);
      }

      if (tgt) {
        return tgt;
      }
    }
  }, [plugins.array, value]);
  /**
   * 渲染单个 toolButton
   * @param toolButton配置，支持直接传一个react元素
   * @param index
   */

  var renderTool = function renderTool(item, index) {
    var _plugin$toolbar, _plugin$toolbar2;

    if ( /*#__PURE__*/React.isValidElement(item)) {
      return item;
    }

    var name = item.name,
        hideTargets = item.hideTargets,
        showTargets = item.showTargets,
        size = item.size,
        rest = _objectWithoutPropertiesLoose(item, ["name", "hideTargets", "showTargets", "size"]); // hiddenToolButtons 优先


    if (hiddenToolButtons[name]) return null; // 优先从自定义组件里匹配

    var CustomComponent = customToolButtons[name];

    var _name$split = name.split('.'),
        pluginName = _name$split[0],
        _name$split$ = _name$split[1],
        buttonName = _name$split$ === void 0 ? 'default' : _name$split$;

    var plugin = plugins.hash[pluginName];

    if (!plugin && !CustomComponent) {
      return null;
    }

    var buttons = (plugin == null ? void 0 : plugin.toolbar) && (plugin == null ? void 0 : (_plugin$toolbar = plugin.toolbar) == null ? void 0 : _plugin$toolbar.buttons);
    var Component = CustomComponent || buttons && buttons[buttonName];

    if (!Component) {
      return null;
    }

    if (plugin != null && plugin.toolbar) {
      // 判断是否隐藏
      var shouldShow = judgeShouldShow(target, showTargets, hideTargets);
      if (!shouldShow) return null;
    } // 优先取自定义国际化文案


    var locale = plugin == null ? void 0 : (_plugin$toolbar2 = plugin.toolbar) == null ? void 0 : _plugin$toolbar2.locale;
    var isDoubleMode = realToolbarMode === ToolbarMode["double"];
    var realSize = size || (isDoubleMode ? ButtonSize.small : ButtonSize.medium);
    var showTitle = realSize === ButtonSize.large;
    return /*#__PURE__*/_createElement(Component, _extends({
      controller: controller,
      toolbarMode: realToolbarMode,
      locale: locale,
      size: realSize,
      key: index,
      showTitle: showTitle
    }, rest));
  };

  var renderLine = function renderLine(line, index, layoutMode) {
    if (layoutMode === void 0) {
      layoutMode = 'row';
    }

    var contents = renderToolArray(line, 'toolButtons', target, renderTool);
    if (!contents) return null;
    var Wrapper = layoutMode === 'row' ? RowWrapper : ColumnWrapper;
    return /*#__PURE__*/_createElement(Wrapper, {
      key: index
    }, contents);
  };

  var renderGroup = function renderGroup(group, index, toolbarMode) {
    var layoutMode = group.layoutMode,
        hideBorder = group.hideBorder,
        clearPadding = group.clearPadding,
        groupFineAdaptation = group.fineAdaptation;
    var contents = renderToolArray(group, 'toolLines', target, renderLine, layoutMode); // 单行默认精细化控制，双行默认按组收缩

    var realFineAdaption = toolbarMode === ToolbarMode.single;

    if (groupFineAdaptation !== undefined) {
      realFineAdaption = groupFineAdaptation;
    } else if (fineAdaptation !== undefined) {
      realFineAdaption = fineAdaptation;
    }

    if (!contents) return null;
    return /*#__PURE__*/_createElement(GroupWrapper, {
      layoutType: "row",
      groupKey: index.toString(),
      fineAdaptation: realFineAdaption,
      key: index,
      hideBorder: hideBorder,
      clearPadding: clearPadding
    }, contents);
  };

  var renderSingleToolbar = function renderSingleToolbar(singleLineLayout) {
    var layout = singleLineLayout || ToolbarConfig.defaultSingleLayout; // @ts-ignore

    var tls = layout.map(function (line, idx) {
      var group = {
        toolLines: [line]
      };
      return renderGroup(group, idx, ToolbarMode.single);
    }).filter(function (item) {
      return item;
    });
    if (!tls.length) return null;
    return /*#__PURE__*/_createElement("div", {
      style: {
        display: 'flex'
      }
    }, tls);
  };

  var renderDoubleToolbar = function renderDoubleToolbar(doubleLineLayout) {
    var layout = doubleLineLayout || ToolbarConfig.defaultDoubleLayout;
    var tgs = layout.map(function (group, idx) {
      return renderGroup(group, idx, ToolbarMode["double"]);
    }).filter(function (item) {
      return item;
    });
    if (!tgs.length) return null;
    return /*#__PURE__*/_createElement("div", {
      style: {
        display: 'flex'
      }
    }, tgs);
  };
  /**
   * 阻止默认事件，防止文档区域失焦
   */


  var handleMouseDown = useCallback(function (ev) {
    var _ev$target;

    var activeElement = window.document.activeElement; // 对于有自定义输入域的不可编辑对象，不阻止其失焦行为

    if (activeElement && activeElement.closest('[data-cangjie-not-editable]')) {
      return;
    }

    if (((_ev$target = ev.target) == null ? void 0 : _ev$target.tagName.toLocaleLowerCase()) !== 'input') {
      // 放过input，以便输入地方可以正常输入
      ev.preventDefault && ev.preventDefault();
      ev.stopPropagation && ev.stopPropagation();
    }
  }, []);
  var fTgts = disableTargets || ToolbarConfig.defaultDisableTargets;
  var shouldDisableWholeToolbar = fTgts[target];
  var hideSwitchBtn = !singleLayout || !doubleLayout;
  var classes = 'bi-toolbar';
  var wrapperStyle = {};

  if (shouldDisableWholeToolbar) {
    wrapperStyle = disabledStyle;
  }

  if (realToolbarMode === ToolbarMode["double"]) {
    classes += ' double';
  } else {
    classes += ' single';
  } // @ts-ignore


  return /*#__PURE__*/_createElement(ToolbarWrapper, {
    style: wrapperStyle,
    className: classes,
    onMouseDown: handleMouseDown,
    "data-role": 'toolbar'
  }, /*#__PURE__*/_createElement(ToolbarLayout, {
    mode: realToolbarMode
    /*
    // @ts-ignore */
    ,
    onModeChange: handleModeChange
    /*
    // @ts-ignore */
    ,
    singleLineToolbar: renderSingleToolbar(singleLayout) || undefined
    /*
    // @ts-ignore */
    ,
    doubleLineToolbar: renderDoubleToolbar(doubleLayout) || undefined,
    hideSwitchBtn: hideSwitchBtn // @ts-ignore
    ,
    fineAdaptation: fineAdaptation,
    backgroundColor: backgroundColor
  }));
};

export default process.env.NODE_ENV === 'test' ? ToolbarRenderNext : idleRender(ToolbarRenderNext, 400, {
  leading: true
});
//# sourceMappingURL=toolbarRenderNext.js.map