import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { Controller } from '@ali/4ever-cangjie';
import { connectPlugins } from "../PluginsContext";
import Collapse from "./Collapse";
import { LazyRenderer } from "./LazyRenderer";
export var SplitLine = /*#__PURE__*/styled.div(["padding-bottom:12px;border-top:1px solid rgba(126,134,142,0.16);"]);

var _ref = /*#__PURE__*/_createElement(SplitLine, null);

var SidebarItems = function SidebarItems(props) {
  var _props$layout = props.layout,
      layout = _props$layout === void 0 ? [] : _props$layout,
      plugins = props.plugins,
      controller = props.controller;
  var sortedLayout = React.useMemo(function () {
    return layout.sort(function (a, b) {
      return (a.index || 0) - (b.index || 0);
    });
  }, [layout]);
  var renderItem = React.useCallback(function (item) {
    var _item$split = item.split('.'),
        pluginName = _item$split[0],
        _item$split$ = _item$split[1],
        itemName = _item$split$ === void 0 ? 'default' : _item$split$;

    var plugin = plugins.hash[pluginName];

    if (!plugin || !plugin.sidebar) {
      return null;
    } // lazy render


    if (typeof plugin.sidebar === 'function') {
      return /*#__PURE__*/_createElement(LazyRenderer, {
        loader: {
          fn: function fn() {
            return plugin.sidebar();
          }
        },
        render: function render(sidebar) {
          var _sidebar$items;

          var Component = (_sidebar$items = sidebar.items) == null ? void 0 : _sidebar$items[itemName];

          if (!Component) {
            return null;
          }

          return /*#__PURE__*/_createElement(Component, {
            controller: controller,
            locale: sidebar.locale || {},
            config: sidebar.config || {}
          });
        }
      });
    } else {
      var _s$items;

      // TODO：待所有插件的 sidebar 迁移为异步后删除
      var s = plugin.sidebar;
      var Component = (_s$items = s.items) == null ? void 0 : _s$items[itemName];

      if (!Component) {
        return null;
      }

      return /*#__PURE__*/_createElement(Component, {
        controller: controller,
        locale: s.locale || {},
        config: s.config || {}
      });
    }
  }, [plugins, controller]);
  var renderGroup = React.useCallback(function (group, isLast) {
    var renderTitle = group.renderTitle,
        items = group.items,
        defaultFold = group.defaultFold,
        useCollapse = group.useCollapse,
        key = group.key;
    return /*#__PURE__*/_createElement(React.Fragment, {
      key: key
    }, /*#__PURE__*/_createElement(Collapse, {
      renderTitle: renderTitle,
      defaultFold: defaultFold,
      useCollapse: useCollapse
    }, items.map(function (item) {
      return renderItem(item);
    })), !isLast && _ref);
  }, [renderItem]);
  var lastIndex = sortedLayout.length - 1;
  return /*#__PURE__*/_createElement(React.Fragment, null, sortedLayout.map(function (group, index) {
    return renderGroup(group, index === lastIndex);
  }));
};

export default Controller.connectController(connectPlugins(SidebarItems));
//# sourceMappingURL=SidebarItems.js.map