import React, { useEffect, useState, useMemo, useCallback, useRef } from 'react';
/**
 * 懒加载组件
 * 
 * @param loader.fn 加载组件的函数。返回的结果会传给 render
 * @param loader.fallback 懒加载时的 placeholder。
 * @param render 渲染函数
 * @returns 
 */

var _createElement = /*#__PURE__*/React.createElement;
export function LazyRenderer(_ref) {
  var render = _ref.render,
      loader = _ref.loader;

  var _ref2 = loader || {},
      fn = _ref2.fn,
      fallback = _ref2.fallback; // loader 加载过程 render 可能会变，取最新一次


  var renderRef = useRef(render);
  var loadFnRef = useRef(fn);
  renderRef.current = render;
  loadFnRef.current = fn; // 记录 loaded

  var loaded = useRef(); // 错误信息

  var _useState = useState(),
      error = _useState[0],
      setError = _useState[1]; // 加载函数


  var loadFn = useCallback(function () {
    // eslint-disable-next-line @typescript-eslint/no-shadow
    var fn = loadFnRef.current;

    if (fn) {
      setError(undefined);
      fn().then(function (rst) {
        loaded.current = rst;
        setEl(renderRef.current(rst));
      })["catch"](function (e) {
        console.error('sidebar lazy render error', e);
        setError(e);
      });
    }
  }, []); // placeholder

  var placeholder = useMemo(function () {
    if (!loader) {
      return null;
    }

    var fallbackJsx = (fallback == null ? void 0 : fallback({
      error: error,
      retry: function retry() {
        return loadFn();
      }
    })) || null;
    return /*#__PURE__*/_createElement(React.Fragment, null, fallbackJsx); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [error]); // 加载完成的 jsx

  var _useState2 = useState(placeholder),
      el = _useState2[0],
      setEl = _useState2[1];

  useEffect(function () {
    setEl(placeholder);
  }, [placeholder]); // 加载

  useEffect(function () {
    loadFn(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return loaded.current ? render(loaded.current) : el;
}
//# sourceMappingURL=LazyRenderer.js.map