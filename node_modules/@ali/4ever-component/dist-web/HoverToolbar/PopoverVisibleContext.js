import React from 'react';
import { noop } from 'lodash-es';
import { useScrollableContainer } from '@ali/4ever-cangjie';
import { useGetContainer } from "./GetContainerContext";
import { useIsHoverToolbarVisible } from "./HoverToolbarVisibleContext";
import { useIsPopoverVisible } from "./PopoverVisibleSetContext";
export function usePopoverVisible(key, onOverlayVisibleChange) {
  var getContainer = useGetContainer();
  var isHTVisible = useIsHoverToolbarVisible();

  var _React$useState = React.useState(useIsPopoverVisible(key)),
      visible = _React$useState[0],
      setVisible = _React$useState[1];

  var scrollableContainer = useScrollableContainer();
  var onVisibleChange = React.useCallback(function (visible) {
    setVisible(visible);
    onOverlayVisibleChange(visible);
  }, [onOverlayVisibleChange]);
  React.useEffect(function () {
    if (!isHTVisible) {
      onVisibleChange(false);
    }
  }, [isHTVisible, onVisibleChange]);
  React.useEffect(function () {
    if (!visible || !scrollableContainer) return noop;

    var handleScroll = function handleScroll() {
      onVisibleChange(false);
    };

    scrollableContainer.addEventListener('scroll', handleScroll, {
      once: true
    });
    return function () {
      scrollableContainer.removeEventListener('scroll', handleScroll);
    };
  }, [scrollableContainer, visible, onVisibleChange]); // container 变化时需要重新定位

  React.useEffect(function () {
    onVisibleChange(false);
  }, [getContainer, onOverlayVisibleChange]);
  return [visible, onVisibleChange];
}
//# sourceMappingURL=PopoverVisibleContext.js.map