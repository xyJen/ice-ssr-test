{"version":3,"sources":["../../../src/HoverToolbar/PopoverVisibleContext.ts"],"names":["React","noop","useScrollableContainer","useGetContainer","useIsHoverToolbarVisible","useIsPopoverVisible","usePopoverVisible","key","onOverlayVisibleChange","getContainer","isHTVisible","useState","visible","setVisible","scrollableContainer","onVisibleChange","useCallback","useEffect","handleScroll","addEventListener","once","removeEventListener"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,SAASC,eAAT;AACA,SAASC,wBAAT;AACA,SAASC,mBAAT;AACA,OAAO,SAASC,iBAAT,CAA4BC,GAA5B,EAAyCC,sBAAzC,EAAuF;AAC5F,MAAMC,YAAY,GAAGN,eAAe,EAApC;AACA,MAAMO,WAAW,GAAGN,wBAAwB,EAA5C;;AAF4F,wBAG9DJ,KAAK,CAACW,QAAN,CAAeN,mBAAmB,CAACE,GAAD,CAAlC,CAH8D;AAAA,MAGrFK,OAHqF;AAAA,MAG5EC,UAH4E;;AAI5F,MAAMC,mBAAmB,GAAGZ,sBAAsB,EAAlD;AACA,MAAMa,eAAe,GAAGf,KAAK,CAACgB,WAAN,CAAkB,UAACJ,OAAD,EAAsB;AAC9DC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAJ,IAAAA,sBAAsB,CAACI,OAAD,CAAtB;AACD,GAHuB,EAGrB,CAACJ,sBAAD,CAHqB,CAAxB;AAKAR,EAAAA,KAAK,CAACiB,SAAN,CAAgB,YAAM;AACpB,QAAI,CAACP,WAAL,EAAkB;AAChBK,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GAJD,EAIG,CAACL,WAAD,EAAcK,eAAd,CAJH;AAMAf,EAAAA,KAAK,CAACiB,SAAN,CAAgB,YAAM;AACpB,QAAI,CAACL,OAAD,IAAY,CAACE,mBAAjB,EAAsC,OAAOb,IAAP;;AACtC,QAAMiB,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBH,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAFD;;AAGAD,IAAAA,mBAAmB,CAACK,gBAApB,CAAqC,QAArC,EAA+CD,YAA/C,EAA6D;AAC3DE,MAAAA,IAAI,EAAE;AADqD,KAA7D;AAGA,WAAO,YAAM;AACXN,MAAAA,mBAAmB,CAACO,mBAApB,CAAwC,QAAxC,EAAkDH,YAAlD;AACD,KAFD;AAGD,GAXD,EAWG,CAACJ,mBAAD,EAAsBF,OAAtB,EAA+BG,eAA/B,CAXH,EAhB4F,CA6B5F;;AACAf,EAAAA,KAAK,CAACiB,SAAN,CAAgB,YAAM;AACpBF,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAFD,EAEG,CAACN,YAAD,EAAeD,sBAAf,CAFH;AAIA,SAAO,CAACI,OAAD,EAAUG,eAAV,CAAP;AACD","sourcesContent":["import React from 'react';\nimport { noop } from 'lodash-es';\nimport { useScrollableContainer } from '@ali/4ever-cangjie';\nimport { useGetContainer } from './GetContainerContext';\nimport { useIsHoverToolbarVisible } from './HoverToolbarVisibleContext';\nimport { useIsPopoverVisible } from './PopoverVisibleSetContext';\nexport function usePopoverVisible (key: string, onOverlayVisibleChange: (v: boolean) => void) {\n  const getContainer = useGetContainer();\n  const isHTVisible = useIsHoverToolbarVisible();\n  const [visible, setVisible] = React.useState(useIsPopoverVisible(key));\n  const scrollableContainer = useScrollableContainer();\n  const onVisibleChange = React.useCallback((visible: boolean) => {\n    setVisible(visible);\n    onOverlayVisibleChange(visible);\n  }, [onOverlayVisibleChange]);\n\n  React.useEffect(() => {\n    if (!isHTVisible) {\n      onVisibleChange(false);\n    }\n  }, [isHTVisible, onVisibleChange]);\n\n  React.useEffect(() => {\n    if (!visible || !scrollableContainer) return noop;\n    const handleScroll = () => {\n      onVisibleChange(false);\n    }\n    scrollableContainer.addEventListener('scroll', handleScroll, {\n      once: true,\n    });\n    return () => {\n      scrollableContainer.removeEventListener('scroll', handleScroll);\n    }\n  }, [scrollableContainer, visible, onVisibleChange]);\n\n  // container 变化时需要重新定位\n  React.useEffect(() => {\n    onVisibleChange(false);\n  }, [getContainer, onOverlayVisibleChange]);\n\n  return [visible, onVisibleChange] as [boolean, (v: boolean) => void];\n}"],"file":"PopoverVisibleContext.js"}