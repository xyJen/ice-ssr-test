import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable no-case-declarations */
import { TYPE_MENU_ITEM, TYPE_SUB_MENU, TYPE_GROUP } from "./interface";

function checkIsQuery(query, key) {
  if (Array.isArray(key)) {
    return key.filter(function (val) {
      return val.toLowerCase() === query.toLowerCase();
    }).length > 0;
  } else {
    return key.toLowerCase() === query.toLowerCase();
  }
}

function checkIsInclude(query, key) {
  var isInclude;
  var priority;

  if (Array.isArray(key)) {
    // 获取匹配度最高的值
    isInclude = key.filter(function (val) {
      var pos = val.toLowerCase().indexOf(query.toLowerCase());

      if (pos > -1) {
        // 记录下匹配值最高的query
        if (!priority || priority < 10 - pos) {
          priority = 10 - pos;
        }

        return true;
      }

      return false;
    }).length > 0;
  } else {
    var pos = key.toLowerCase().indexOf(query.toLowerCase());
    isInclude = pos > -1;

    if (isInclude) {
      priority = 10 - pos;
    }
  }

  return {
    isInclude: isInclude,
    // @ts-ignore
    priority: priority
  };
}

export var filterMenuByQuery = function filterMenuByQuery(query, menus) {
  /**
   * 1.全字匹配，优先级定10；2.匹配部分，根据匹配词的index分配优先级，10-index；
   * 优先级决定了group的排序
   */
  if (!menus) return [];
  return menus.map(function (item) {
    var type = item.type;

    switch (type) {
      case TYPE_GROUP:
      case TYPE_SUB_MENU:
        var itemMenus = item.menus;

        if (itemMenus) {
          // @ts-ignore
          itemMenus = filterMenuByQuery(query, itemMenus);

          if (itemMenus.length > 0) {
            return _extends({}, item, {
              menus: itemMenus,
              // @ts-ignore
              priority: itemMenus[0].priority
            });
          }
        }

        return null;

      case TYPE_MENU_ITEM:
        // 这里计算权重和筛选
        var itemQuery = item.query;

        if (itemQuery) {
          if (checkIsQuery(query, itemQuery)) {
            return _extends({}, item, {
              priority: 10
            });
          }

          var _checkIsInclude = checkIsInclude(query, itemQuery),
              isInclude = _checkIsInclude.isInclude,
              priority = _checkIsInclude.priority;

          if (isInclude) {
            return _extends({}, item, {
              priority: priority
            });
          }
        }

        return null;

      default:
        return null;
    }
  }).filter(function (item) {
    return !!item;
  }).sort(function (a, b) {
    return (b == null ? void 0 : b.priority) - (a == null ? void 0 : a.priority);
  });
};
//# sourceMappingURL=utils.js.map