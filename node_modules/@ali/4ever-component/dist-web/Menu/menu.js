import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Controller } from '@ali/4ever-cangjie';
import { SubMenu, MenuItemGroup, MenuItem, MenuDivider, InlineMenuItem, InlineMenuItemGroup } from '@ali/we-design';
import { Matcher } from '@ali/4ever-utils';
import { omit } from 'lodash-es';
import { TYPE_MENU_ITEM, TYPE_SUB_MENU, TYPE_GROUP, TYPE_INLINE_MENU_ITEM, TYPE_INLINE_MENU_GROUP, TYPE_INLINE_MENU_WRAPPER, TYPE_QUERY_ONLY_INLINE_MENU_ITEM } from "./interface";
import { InlineMenuWrapper } from "./style";
import { usePlugins } from "../PluginsContext";

var checkIfNotAllChildrenHidden = function checkIfNotAllChildrenHidden(menu) {
  var menus = menu.menus;
  return menus.some(function (item) {
    if (item && (item.type === TYPE_SUB_MENU || item.type === TYPE_GROUP)) {
      return checkIfNotAllChildrenHidden(item);
    }

    return item && !item.hidden;
  });
};

var inlineToBlockMap = new Map([['heading1Inline', 'heading1'], ['heading2Inline', 'heading2'], ['heading3Inline', 'heading3'], ['heading4Inline', 'heading4'], ['tlistInline', 'tlist'], ['olistInline', 'olist'], ['ulistInline', 'ulist']]);

var convertInlineMenus = function convertInlineMenus(menus) {
  return menus.map(function (item) {
    if (item.type === TYPE_INLINE_MENU_GROUP) {
      var items = [];
      item.menus.forEach(function (wrapper) {
        if (wrapper.type === TYPE_INLINE_MENU_WRAPPER) {
          wrapper.menus.forEach(function (inline) {
            var menuKey = inline.menuKey,
                tooltip = inline.tooltip;

            var _menuKey$split = menuKey.split('.'),
                pluginName = _menuKey$split[0],
                menuName = _menuKey$split[1];

            var key = menuKey;

            if (menuName) {
              key = pluginName + "." + (inlineToBlockMap.get(menuName) || menuName);
            }

            items.push(_extends({}, inline, {
              type: TYPE_MENU_ITEM,
              menuKey: key,
              title: tooltip
            }));
          });
        }
      });
      return {
        type: TYPE_GROUP,
        menus: items
      };
    }

    return item;
  });
};

function isNotMenuItem(maybeWrapper) {
  return maybeWrapper.menus;
}

var convertMenusToMatcherData = function convertMenusToMatcherData(menus) {
  return menus.map(function (item) {
    var keywords = [];

    if (item.query) {
      if (Array.isArray(item.query)) {
        keywords = [].concat(item.query);
      } else {
        keywords.push(item.query);
      }
    }

    if (isNotMenuItem(item)) {
      return {
        keywords: keywords,
        data: _extends({}, omit(item, 'menus')),
        subItems: convertMenusToMatcherData(item.menus)
      };
    }

    return {
      keywords: keywords,
      data: _extends({}, item)
    };
  });
};

var convertMatcherDataToMenus = function convertMatcherDataToMenus(items) {
  return items.map(function (item) {
    if (item.subItems) {
      return _extends({}, item.data, {
        menus: convertMatcherDataToMenus(item.subItems)
      });
    }

    return item.data;
  });
};

var _ref = /*#__PURE__*/_createElement(MenuDivider, null);

var _ref2 = /*#__PURE__*/_createElement(MenuDivider, null);

var MenuAdapter = function MenuAdapter(props) {
  var menus = props.menus,
      query = props.query,
      onQuery = props.onQuery; // TODO: 这里依赖父级Provider，后续有不依赖编辑器的纯menu场景需要兼容

  var controller = Controller.useController();
  var plugins = usePlugins(); // 初始化搜索工具

  var matcher = React.useMemo(function () {
    // 有query先转化掉inlineMenu
    var result = convertInlineMenus(menus);
    var matcherData = convertMenusToMatcherData(result);
    return new Matcher({
      lang: 'en-US',
      items: matcherData,
      enableFuzzy: true
    });
  }, [menus]);
  var menuData = React.useMemo(function () {
    if (!query || !matcher) return menus;
    var results = matcher.match(query);
    onQuery == null ? void 0 : onQuery(results);
    return convertMatcherDataToMenus(results);
  }, [query, menus, matcher, onQuery]);
  var notNullMenuCount = 0;
  /**
   * 从插件中获取menu组件
   * @param menu
   */

  var getMenuFromPlugin = function getMenuFromPlugin(menu, defaultMenuName) {
    var _plugin$menubar;

    if (defaultMenuName === void 0) {
      defaultMenuName = 'menu';
    }

    var menuKey = menu.menuKey;

    if (!menuKey) {
      return {
        PluginMenu: null,
        locale: {}
      };
    }

    var _menuKey$split2 = menuKey.split('.'),
        pluginName = _menuKey$split2[0],
        _menuKey$split2$ = _menuKey$split2[1],
        menuName = _menuKey$split2$ === void 0 ? defaultMenuName : _menuKey$split2$;

    var plugin = plugins == null ? void 0 : plugins.hash[pluginName];
    var PluginMenu;

    if (plugin && plugin.menubar && plugin.menubar[menuName]) {
      PluginMenu = plugin.menubar[menuName];
    }

    return {
      PluginMenu: PluginMenu,
      locale: (plugin == null ? void 0 : (_plugin$menubar = plugin.menubar) == null ? void 0 : _plugin$menubar.locale) || {}
    };
  };
  /**
   * 渲染菜单项
   * @param menu
   */


  var renderMenuItem = function renderMenuItem(menu) {
    var title = menu.title,
        hidden = menu.hidden,
        _menu$menuExtraKey = menu.menuExtraKey,
        menuExtraKey = _menu$menuExtraKey === void 0 ? '' : _menu$menuExtraKey,
        menuKey = menu.menuKey,
        rest = _objectWithoutPropertiesLoose(menu, ["title", "hidden", "menuExtraKey", "menuKey"]);

    if (hidden) return null;
    notNullMenuCount += 1;

    var _getMenuFromPlugin = getMenuFromPlugin(menu),
        PluginMenu = _getMenuFromPlugin.PluginMenu,
        locale = _getMenuFromPlugin.locale; // 通过 menuExtraKey 可实现多个相同功能 menuItem 共存


    var key = menuKey + menuExtraKey;

    if (PluginMenu) {
      return /*#__PURE__*/_createElement(PluginMenu, {
        key: key,
        controller: controller,
        menuItem: _extends({}, menu, {
          menuKey: key
        }),
        locale: locale
      });
    }

    return /*#__PURE__*/_createElement(MenuItem, _extends({}, rest, {
      key: key,
      menuKey: key
    }), title);
  };

  var renderInlineMenuItem = function renderInlineMenuItem(menu) {
    var hidden = menu.hidden,
        menuKey = menu.menuKey,
        _menu$menuExtraKey2 = menu.menuExtraKey,
        menuExtraKey = _menu$menuExtraKey2 === void 0 ? '' : _menu$menuExtraKey2,
        icon = menu.icon,
        rest = _objectWithoutPropertiesLoose(menu, ["hidden", "menuKey", "menuExtraKey", "icon"]);

    if (hidden) return null;
    notNullMenuCount += 1;

    var _getMenuFromPlugin2 = getMenuFromPlugin(menu, 'inlineMenu'),
        PluginMenu = _getMenuFromPlugin2.PluginMenu,
        locale = _getMenuFromPlugin2.locale;

    var key = menuKey + menuExtraKey;

    if (PluginMenu) {
      return /*#__PURE__*/_createElement(PluginMenu, {
        key: key,
        controller: controller,
        menuItem: _extends({}, menu, {
          menuKey: key
        }),
        locale: locale
      });
    } // @ts-ignore


    return /*#__PURE__*/_createElement(InlineMenuItem, _extends({}, rest, {
      key: key,
      menuKey: key
    }));
  };

  var renderInlineMenuGroup = function renderInlineMenuGroup(menu, index) {
    var title = menu.title,
        hidden = menu.hidden,
        menuGroupData = menu.menus;
    if (hidden) return null;
    var shouldShowDivider = index !== 0 && notNullMenuCount >= 1;
    return /*#__PURE__*/_createElement(React.Fragment, {
      key: index
    }, shouldShowDivider ? _ref : null, /*#__PURE__*/_createElement(InlineMenuItemGroup, {
      title: title
    }, renderMenus(menuGroupData)));
  };

  var renderInlineMenuWrapper = function renderInlineMenuWrapper(menu, index) {
    var menuWrapperData = menu.menus;
    return /*#__PURE__*/_createElement(InlineMenuWrapper, {
      key: index
    }, renderMenus(menuWrapperData));
  };
  /**
   * 渲染子菜单
   * @param menu
   * @param index
   */


  var renderSubMenu = function renderSubMenu(menu, index) {
    var title = menu.title,
        hidden = menu.hidden,
        subMenuData = menu.menus,
        rest = _objectWithoutPropertiesLoose(menu, ["title", "hidden", "menus"]);

    if (hidden || !checkIfNotAllChildrenHidden(menu)) return null;

    var _getMenuFromPlugin3 = getMenuFromPlugin(menu),
        PluginMenu = _getMenuFromPlugin3.PluginMenu,
        locale = _getMenuFromPlugin3.locale;

    if (PluginMenu) {
      return /*#__PURE__*/_createElement(PluginMenu, {
        key: menu.menuKey,
        controller: controller,
        menuItem: menu,
        locale: locale
      });
    }

    var menusView = renderMenus(subMenuData || []);

    if (query && (!menusView || menusView.filter(function (view) {
      return !!view;
    }).length === 0)) {
      return null;
    }

    return /*#__PURE__*/_createElement(SubMenu, _extends({}, rest, {
      title: title,
      key: menu.menuKey || index
    }), menusView);
  };
  /**
   * 渲染菜单组
   * @param menu
   * @param index
   */


  var renderMenuGroup = function renderMenuGroup(menu, index) {
    var title = menu.title,
        hidden = menu.hidden,
        menuGroupData = menu.menus,
        rest = _objectWithoutPropertiesLoose(menu, ["title", "hidden", "menus"]);

    if (hidden || !checkIfNotAllChildrenHidden(menu)) return null;
    var shouldShowDivider = index !== 0 && notNullMenuCount >= 1;
    var menusView = renderMenus(menuGroupData); // children 没有值的时候隐藏

    if (query && (!menusView || menusView.filter(function (view) {
      return !!view;
    }).length === 0)) {
      return null;
    }

    return /*#__PURE__*/_createElement(React.Fragment, {
      key: index
    }, shouldShowDivider ? _ref2 : null, /*#__PURE__*/_createElement(MenuItemGroup, _extends({}, rest, {
      title: title || ''
    }), menusView));
  };

  var renderMenu = function renderMenu(item, index) {
    if (!item) return null;
    var type = item.type;

    switch (type) {
      case TYPE_GROUP:
        return renderMenuGroup(item, index);

      case TYPE_INLINE_MENU_GROUP:
        return renderInlineMenuGroup(item, index);

      case TYPE_INLINE_MENU_WRAPPER:
        return renderInlineMenuWrapper(item, index);

      case TYPE_SUB_MENU:
        return renderSubMenu(item, index);

      case TYPE_MENU_ITEM:
        return renderMenuItem(item);

      case TYPE_INLINE_MENU_ITEM:
        return renderInlineMenuItem(item);

      case TYPE_QUERY_ONLY_INLINE_MENU_ITEM:
        // 仅支持查询的菜单项在无 query 场景不显示
        return null;

      default:
        console.warn("not support " + type + " (type should be one of: TYPE_GROUP | TYPE_SUB_MENU | TYPE_MENU_ITEM)");
        return null;
    }
  };

  var renderMenus = function renderMenus(data) {
    if (!data) return null;
    return data.map(renderMenu);
  }; // @ts-ignore


  var menuView = renderMenus(menuData);

  if (query && (!menuView || menuView.filter(function (item) {
    return item;
  }).length === 0)) {
    return null;
  }

  return /*#__PURE__*/_createElement(React.Fragment, null, menuView);
};

export default MenuAdapter;
//# sourceMappingURL=menu.js.map