import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
var UPDATE_ACTIVE_INTERACTION = Symbol('UPDATE_ACTIVE_INTERACTION');

function updateActiveInteraction(type) {
  return {
    type: UPDATE_ACTIVE_INTERACTION,
    payload: {
      type: type
    }
  };
}

function reducer(state, action) {
  var type = action.type,
      payload = action.payload;

  if (type === UPDATE_ACTIVE_INTERACTION) {
    return {
      type: payload.type
    };
  }

  return state;
}

var initState = '';

var initUpdate = function initUpdate(type) {};

var ActiveInteractionContext = /*#__PURE__*/React.createContext([initState, initUpdate]);

function useActiveInteraction() {
  return React.useContext(ActiveInteractionContext);
}

export var ActiveInteractionHooks = {
  useActiveInteraction: useActiveInteraction
};
export var ActiveInteractionProvider = function ActiveInteractionProvider(props) {
  var children = props.children;

  var _React$useReducer = React.useReducer(reducer, {
    type: ''
  }),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  var updateType = React.useCallback(function (type) {
    dispatch(updateActiveInteraction(type));
  }, [dispatch]);
  var value = React.useMemo(function () {
    return [state.type, updateType];
  }, [state.type, updateType]);
  return /*#__PURE__*/_createElement(ActiveInteractionContext.Provider, {
    value: value
  }, children);
};
//# sourceMappingURL=ActiveInteractionContext.js.map