import React from 'react';
var clearerRef = {
  current: null
};
export default function useHover(enableHover, callbacks) {
  var _React$useState = React.useState(false),
      isHover = _React$useState[0],
      setHover = _React$useState[1];

  var _ref = callbacks || {},
      onMouseLeave = _ref.onMouseLeave,
      onMouseOut = _ref.onMouseOut,
      onMouseOver = _ref.onMouseOver;

  var handleMouseOver = React.useCallback(function (e) {
    onMouseOver && onMouseOver(e);

    if (enableHover) {
      e.stopPropagation(); // 为避免在具有 hover状态的元素里移动鼠标时hover 边框闪烁，在 mouseOut 里如果是 target 是当前hover 元素的子元素则放行，
      // 带来新的问题，如果移动到的子元素中也有hover 态，就会出现重复的hover 元素，所以需要主动清理上一次的hover 状态

      clearerRef.current && clearerRef.current(false);
      setHover(true);
      clearerRef.current = setHover;
    }
  }, [onMouseOver, enableHover]);
  var handleMouseOut = React.useCallback(function (e) {
    var currentTarget = e.currentTarget,
        target = e.target;
    onMouseOut && onMouseOut(e);

    if (enableHover) {
      if (target instanceof Node && currentTarget.contains(target)) {
        return;
      }

      setHover(false);
    }
  }, [onMouseOut, enableHover]);
  var handleMouseLeave = React.useCallback(function (e) {
    onMouseLeave && onMouseLeave(e);

    if (enableHover) {
      setHover(false);
    }
  }, [onMouseLeave, enableHover]);
  React.useEffect(function () {
    return function () {
      if (clearerRef.current === setHover) {
        clearerRef.current = null;
      }
    };
  }, []);
  var handlers = React.useMemo(function () {
    return {
      onMouseOut: handleMouseOut,
      onMouseOver: handleMouseOver,
      onMouseLeave: handleMouseLeave
    };
  }, [handleMouseOver, handleMouseOut, handleMouseLeave]);
  return [isHover, handlers];
}
//# sourceMappingURL=useHover.js.map