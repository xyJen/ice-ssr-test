{"version":3,"sources":["../../../src/Toolbar/util.ts"],"names":["removeToolLineItemByName","name","toolLine","tl","toolButtons","filter","tb","removeToolbarItemByName","singleLayout","doubleLayout","sl","dl","toolRows","map","toolGroups","tg","judgeShouldShow","target","showTargets","hideTargets","shouldHide","some","t1","shouldShow","renderToolArray","props","key","renderFunc","contents","idx","item","length"],"mappings":"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","sourcesContent":["import {\n  ToolRowProps,\n  ToolGroupProps,\n} from './interface';\n\nfunction removeToolLineItemByName(name: string, toolLine?: ToolRowProps) {\n  let tl = toolLine;\n  if (tl) {\n    const { toolButtons = [] } = tl;\n    tl = {\n      ...tl,\n      toolButtons: toolButtons.filter(tb => {\n        return tb.name !== name;\n      }),\n    };\n  }\n  return tl;\n}\n\nexport function removeToolbarItemByName(\n  name: string,\n  singleLayout?: any,\n  doubleLayout?: any,\n) {\n  let sl = singleLayout;\n  let dl = doubleLayout;\n\n  if (sl) {\n    const { toolRows = [] } = sl;\n    sl = {\n      ...sl,\n      toolRows: toolRows.map(tl => removeToolLineItemByName(name, tl)),\n    };\n  }\n\n  if (dl) {\n    const { toolGroups = [] } = dl;\n    dl = {\n      ...dl,\n      toolGroups: toolGroups.map(tg => {\n        const { toolRows = [] } = tg;\n        return {\n          ...tg,\n          toolRows: toolRows.map(tl => removeToolLineItemByName(name, tl)),\n        };\n      }),\n    };\n  }\n\n  return {\n    singleLayout: sl,\n    doubleLayout: dl,\n  };\n}\n\nexport const judgeShouldShow = (target, showTargets, hideTargets) => {\n  // hideTargets 优先\n  if (hideTargets && target) {\n    const shouldHide = hideTargets.some(t1 => {\n      return t1 === target;\n    });\n    if (shouldHide) return false;\n  }\n\n  if (showTargets) {\n    if (!target) {\n      return false;\n    }\n    const shouldShow = showTargets.some(t1 => {\n      return t1 === target;\n    });\n    if (!shouldShow) return false;\n  }\n\n  return true;\n};\n\nexport const renderToolArray = (props: ToolRowProps | ToolGroupProps, key: string, target, renderFunc: Function) => {\n  const { showTargets, hideTargets } = props;\n  const shouldShow = judgeShouldShow(target, showTargets, hideTargets);\n  if (!shouldShow) return null;\n  const contents = (props[key] || []).map((tb, idx) => renderFunc(tb, idx)).filter(item => item);\n  if (!contents.length) return null;\n  return contents;\n};\n"],"file":"util.js"}