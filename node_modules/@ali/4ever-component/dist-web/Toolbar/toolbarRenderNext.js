import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/**
 * 编辑器自带toolbar组件
 */
import React, { useState, useCallback, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { DoubleLineToolbar, EToolbarMode, SingleLineToolbar, Toolbar, ToolbarDivider, ToolBox, ToolGroup, ToolLine } from '@ali/we-ui';
import { ToolbarWrapper, InlineToolbarWrapper } from "./styled";
import { idleRender } from "../idleRender";
import { ToolbarMode, ToolBoxLayoutMode } from "./interface";
import { renderToolArray, judgeShouldShow } from "./util";
import ToolbarConfig from "./config";

var _ref = /*#__PURE__*/_createElement(ToolbarDivider, null);

var ToolbarRenderNext = function ToolbarRenderNext(props) {
  var controller = props.controller,
      plugins = props.plugins,
      inlineLayout = props.inlineLayout,
      singleLayout = props.singleLayout,
      doubleLayout = props.doubleLayout,
      _props$hiddenToolButt = props.hiddenToolButtons,
      hiddenToolButtons = _props$hiddenToolButt === void 0 ? {} : _props$hiddenToolButt,
      toolbarMode = props.toolbarMode,
      _props$customToolButt = props.customToolButtons,
      customToolButtons = _props$customToolButt === void 0 ? {} : _props$customToolButt,
      disableTargets = props.disableTargets,
      style = props.style,
      alignment = props.alignment,
      autoFolding = props.autoFolding,
      defaultToolbarMode = props.defaultToolbarMode,
      testid = props.testid;
  var defaultMode = defaultToolbarMode === ToolbarMode["double"] ? EToolbarMode.doubleLine : EToolbarMode.singleLine;

  var _useState = useState(defaultMode),
      uiToolbarMode = _useState[0],
      setUiToolbarMode = _useState[1];

  var inlinetoolbarWrapperRef = useRef(null);
  var handleModeChange = useCallback(function (mode) {
    setUiToolbarMode(mode);
  }, []);
  var getContainer = useCallback(function () {
    return inlinetoolbarWrapperRef.current || window.document.body;
  }, []);
  var realToolbarMode = 'toolbarMode' in props ? toolbarMode : uiToolbarMode;
  var realAutoFolding = autoFolding !== undefined ? autoFolding : realToolbarMode !== ToolbarMode.inline;
  /**
   * 从插件查询哪个插件被选中（暂不支持多个插件同时识别）
   * 通过调用插件 getTarget 实现
   */

  var target = React.useMemo(function () {
    var pluginsArray = plugins.array;

    for (var i = 0; i < pluginsArray.length; i += 1) {
      var tgt = void 0;
      var plugin = pluginsArray[i];
      var getTarget = plugin.toolbar && plugin.toolbar.getTarget;

      if (getTarget) {
        tgt = getTarget(controller);
      }

      if (tgt) {
        return tgt;
      }
    }
  }, [controller, plugins.array]);
  /**
   * 渲染单个 toolButton
   * @param toolButton配置，支持直接传一个react元素
   * @param index
   */

  var renderTool = function renderTool(item, index) {
    var _plugin$toolbar, _plugin$toolbar2;

    if ( /*#__PURE__*/React.isValidElement(item)) {
      return /*#__PURE__*/_createElement(ToolBox, {
        key: index
      }, item);
    }

    var name = item.name,
        boxLayout = item.boxLayout,
        verticalKey = item.verticalKey,
        hideTargets = item.hideTargets,
        showTargets = item.showTargets,
        verticalText = item.verticalText,
        rest = _objectWithoutPropertiesLoose(item, ["name", "boxLayout", "verticalKey", "hideTargets", "showTargets", "verticalText"]); // 支持分割线


    if (name === 'ToolbarDivider') {
      return /*#__PURE__*/_createElement(ToolBox, {
        key: index
      }, _ref);
    } // hiddenToolButtons 优先


    if (hiddenToolButtons[name]) return null; // 优先从自定义组件里匹配

    var CustomComponent = customToolButtons[name];

    var _name$split = name.split('.'),
        pluginName = _name$split[0],
        _name$split$ = _name$split[1],
        buttonName = _name$split$ === void 0 ? 'default' : _name$split$;

    var plugin = plugins.hash[pluginName];

    if (!plugin && !CustomComponent) {
      return null;
    }

    var buttons = (plugin == null ? void 0 : plugin.toolbar) && (plugin == null ? void 0 : (_plugin$toolbar = plugin.toolbar) == null ? void 0 : _plugin$toolbar.buttons);
    var Component = CustomComponent || buttons && buttons[buttonName];

    if (!Component) {
      return null;
    }

    if (plugin != null && plugin.toolbar) {
      // 判断是否隐藏
      var shouldShow = judgeShouldShow(target, showTargets, hideTargets);
      if (!shouldShow) return null;
    } // 优先取自定义国际化文案


    var locale = plugin == null ? void 0 : (_plugin$toolbar2 = plugin.toolbar) == null ? void 0 : _plugin$toolbar2.locale;
    var toolBoxName;

    if (boxLayout === ToolBoxLayoutMode.vertical && locale) {
      // 双行模式默认用 locale.buttonTitle 作为文案
      toolBoxName = locale[verticalKey || 'buttonTitle'];
    }

    toolBoxName = verticalText || toolBoxName;
    var isDoubleMode = realToolbarMode === ToolbarMode["double"];
    var toolBoxLayout = boxLayout;

    if (!isDoubleMode && boxLayout === ToolBoxLayoutMode.vertical) {
      // TODO: 非双行模式下忽略vertical（脏）
      toolBoxLayout = ToolBoxLayoutMode.single;
      console.warn('do not support vertical layout when tolbarMode is single');
    } // normal 属于 we-ui 用法，medium 属于 we-design 用法


    return /*#__PURE__*/_createElement(ToolBox, {
      name: toolBoxName,
      layout: toolBoxLayout,
      key: index
    }, /*#__PURE__*/_createElement(Component, _extends({}, rest, {
      controller: controller,
      toolbarMode: realToolbarMode,
      locale: locale,
      size: isDoubleMode ? 'small' : 'medium',
      getContainer: toolbarMode === ToolbarMode.inline ? getContainer : undefined
    })));
  };

  var renderLine = function renderLine(lineProps, index) {
    var contents = renderToolArray(lineProps, 'toolButtons', target, renderTool);
    if (!contents) return null;
    return /*#__PURE__*/_createElement(ToolLine, {
      key: index
    }, contents);
  };

  var renderGroup = function renderGroup(groupProps, index) {
    var contents = renderToolArray(groupProps, 'toolRows', target, renderLine);
    if (!contents) return null;
    return /*#__PURE__*/_createElement(ToolGroup, {
      key: index
    }, contents);
  };
  /**
   * 渲染单行工具栏
   * @param singleLineLayout
   */


  var renderSingleToolbar = function renderSingleToolbar(singleLineLayout) {
    if (realToolbarMode === EToolbarMode.doubleLine) return null;
    var layout = singleLineLayout || ToolbarConfig.defaultSingleLayout; // @ts-ignore

    var tls = layout.map(function (lines, idx) {
      return renderLine(lines, idx);
    }).filter(function (item) {
      return item;
    });
    if (!tls.length) return null;
    return /*#__PURE__*/_createElement(SingleLineToolbar, {
      alignType: alignment,
      autoFolding: realAutoFolding
    }, tls);
  };
  /**
   * 渲染双行工具栏
   * @param doubleLineLayout
   */


  var renderDoubleToolbar = function renderDoubleToolbar(doubleLineLayout) {
    if (realToolbarMode === EToolbarMode.singleLine) return null;
    var layout = doubleLineLayout || ToolbarConfig.defaultDoubleLayout; // @ts-ignore

    var tgs = layout.map(function (group, index) {
      return renderGroup(group, index);
    }).filter(function (item) {
      return item;
    });
    if (!tgs.length) return null;
    return /*#__PURE__*/_createElement(DoubleLineToolbar, {
      alignType: alignment,
      autoFolding: realAutoFolding
    }, tgs);
  };
  /**
   * 阻止默认事件，防止文档区域失焦
   */


  var handleMouseDown = useCallback(function (ev) {
    var _ev$target;

    if (((_ev$target = ev.target) == null ? void 0 : _ev$target.tagName.toLocaleLowerCase()) !== 'input') {
      // 放过input，以便输入地方可以正常输入
      ev.preventDefault && ev.preventDefault();
      ev.stopPropagation && ev.stopPropagation();
    }
  }, []);
  var fTgts = disableTargets || ToolbarConfig.defaultDisableTargets;
  var shouldDisableWholeToolbar = realToolbarMode !== ToolbarMode.inline && fTgts[target];
  var classes = 'bi-toolbar';
  var wrapperStyle = {};

  if (shouldDisableWholeToolbar) {
    wrapperStyle = {
      opacity: 0.4,
      pointerEvents: 'none'
    };
  }

  if (realToolbarMode === EToolbarMode.doubleLine) {
    classes += ' double';
  } else {
    classes += ' single';
  }

  if (toolbarMode === ToolbarMode.inline) {
    var layout = inlineLayout || ToolbarConfig.defaultInlineLayout;
    return /*#__PURE__*/_createElement(InlineToolbarWrapper, {
      style: style,
      ref: inlinetoolbarWrapperRef,
      "data-testid": testid != null ? testid : undefined
    }, renderSingleToolbar(layout));
  }

  if (toolbarMode === ToolbarMode.single) {
    return /*#__PURE__*/_createElement(ToolbarWrapper, {
      style: _extends({}, wrapperStyle, style),
      className: classes,
      onMouseDown: handleMouseDown,
      "data-testid": testid != null ? testid : undefined
    }, renderSingleToolbar(singleLayout));
  }

  if (toolbarMode === ToolbarMode["double"]) {
    return renderDoubleToolbar(doubleLayout);
  }

  return /*#__PURE__*/_createElement(ToolbarWrapper, {
    style: _extends({}, wrapperStyle, style),
    className: classes,
    onMouseDown: handleMouseDown,
    "data-testid": testid != null ? testid : undefined
  }, /*#__PURE__*/_createElement(Toolbar, {
    mode: realToolbarMode,
    onModeChange: handleModeChange,
    singleLineToolbar: renderSingleToolbar(singleLayout) || undefined,
    doubleLineToolbar: renderDoubleToolbar(doubleLayout) || undefined,
    autoFolding: realAutoFolding
  }));
};

export default process.env.NODE_ENV === 'test' ? ToolbarRenderNext : idleRender(ToolbarRenderNext, 400, {
  leading: true
});
//# sourceMappingURL=toolbarRenderNext.js.map