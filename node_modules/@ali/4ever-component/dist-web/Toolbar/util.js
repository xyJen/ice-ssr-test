import _extends from "@babel/runtime/helpers/extends";

function removeToolLineItemByName(name, toolLine) {
  var tl = toolLine;

  if (tl) {
    var _tl = tl,
        _tl$toolButtons = _tl.toolButtons,
        toolButtons = _tl$toolButtons === void 0 ? [] : _tl$toolButtons;
    tl = _extends({}, tl, {
      toolButtons: toolButtons.filter(function (tb) {
        return tb.name !== name;
      })
    });
  }

  return tl;
}

export function removeToolbarItemByName(name, singleLayout, doubleLayout) {
  var sl = singleLayout;
  var dl = doubleLayout;

  if (sl) {
    var _sl = sl,
        _sl$toolRows = _sl.toolRows,
        toolRows = _sl$toolRows === void 0 ? [] : _sl$toolRows;
    sl = _extends({}, sl, {
      toolRows: toolRows.map(function (tl) {
        return removeToolLineItemByName(name, tl);
      })
    });
  }

  if (dl) {
    var _dl = dl,
        _dl$toolGroups = _dl.toolGroups,
        toolGroups = _dl$toolGroups === void 0 ? [] : _dl$toolGroups;
    dl = _extends({}, dl, {
      toolGroups: toolGroups.map(function (tg) {
        var _tg$toolRows = tg.toolRows,
            toolRows = _tg$toolRows === void 0 ? [] : _tg$toolRows;
        return _extends({}, tg, {
          toolRows: toolRows.map(function (tl) {
            return removeToolLineItemByName(name, tl);
          })
        });
      })
    });
  }

  return {
    singleLayout: sl,
    doubleLayout: dl
  };
}
export var judgeShouldShow = function judgeShouldShow(target, showTargets, hideTargets) {
  // hideTargets 优先
  if (hideTargets && target) {
    var shouldHide = hideTargets.some(function (t1) {
      return t1 === target;
    });
    if (shouldHide) return false;
  }

  if (showTargets) {
    if (!target) {
      return false;
    }

    var shouldShow = showTargets.some(function (t1) {
      return t1 === target;
    });
    if (!shouldShow) return false;
  }

  return true;
};
export var renderToolArray = function renderToolArray(props, key, target, renderFunc) {
  var showTargets = props.showTargets,
      hideTargets = props.hideTargets;
  var shouldShow = judgeShouldShow(target, showTargets, hideTargets);
  if (!shouldShow) return null;
  var contents = (props[key] || []).map(function (tb, idx) {
    return renderFunc(tb, idx);
  }).filter(function (item) {
    return item;
  });
  if (!contents.length) return null;
  return contents;
};
//# sourceMappingURL=util.js.map