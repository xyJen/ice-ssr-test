{"version":3,"sources":["../../../src/Toolbar/interface.ts"],"names":["EToolbarMode","EToolBoxLayout","ToolBoxLayoutMode","Vertical","Single","Horizontal","ToolbarMode","doubleLine","singleLine"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAT,EAAuBC,cAAvB,QAA6C,YAA7C;AAEA;AACA;AACA;;AACA,WAAYC,iBAAZ;AAMA;AACA;AACA;;WARYA,iB;AAAAA,EAAAA,iB,CAAAA,iB,eACCD,cAAc,CAACE,Q;AADhBD,EAAAA,iB,CAAAA,iB,aAEDD,cAAc,CAACG,M;AAFdF,EAAAA,iB,CAAAA,iB,iBAGGD,cAAc,CAACI,U;GAHlBH,iB,KAAAA,iB;;AA8EZ;AACA;AACA;AACA,WAAYI,WAAZ;;WAAYA,W;AAAAA,EAAAA,W,CAAAA,W,aAIDN,YAAY,CAACO,U;AAJZD,EAAAA,W,CAAAA,W,aAQDN,YAAY,CAACQ,U;AARZF,EAAAA,W,CAAAA,W;GAAAA,W,KAAAA,W","sourcesContent":["/**\n * 编辑器提供的默认工具栏interface\n * 数据结构参照 we-ui toolbar：\n * https://pds.alibaba-inc.com/alidocs/we-ui/?path=/docs/toolbar-%E7%A4%BA%E4%BE%8B--resize\n * 单行配置(嵌套数组)：\n * SingleToolbarProps: [{\n *    toolButtons: [{\n *      name: 'aaa'\n *    }, {\n *      name: 'bbb'\n *    }]\n *  }, {\n *    toolButtons: [{\n *      name: 'ccc'\n *    }]\n *  }]\n * 显示效果：|- 工具栏 -|\n * |- aaa bbb | ccc -|\n * **********************************************\n * 双行配置(2层嵌套数组)：\n * DoubleToolbarProps: [{\n *    toolRows: [{\n *      toolButtons: [{\n *        name: 'aaa'\n *      }, {\n *        name: 'bbb'\n *      }]\n *    }, {\n *      toolButtons: [{\n *        name: 'ccc'\n *      }, {\n *        name: 'ddd'\n *      }]\n *    }]\n *  }, {\n *    toolRows: [{\n *      toolButtons: [{\n *        name: 'eee',\n *        boxLayout: ToolBoxLayoutMode.vertical\n *      }]\n *    }]\n *  }]\n * 显示效果：|- 工具栏 -|\n * |- aaa bbb |     -|\n * |-         | eee -|\n * |- ccc ddd |     -|\n */\nimport { Controller } from '@ali/4ever-cangjie';\nimport { EToolbarMode, EToolBoxLayout } from '@ali/we-ui';\n\n/**\n * 工具栏按钮布局枚举\n */\nexport enum ToolBoxLayoutMode {\n  vertical = EToolBoxLayout.Vertical,\n  single = EToolBoxLayout.Single,\n  horizontal = EToolBoxLayout.Horizontal,\n}\n\n/**\n * 单个工具栏组件配置\n */\nexport interface ToolButtonProps {\n  /**\n   * 组件唯一标识，按照 pluginName[.buttonName] 命名\n   */\n  name: string;\n  /**\n   * 限定在特定插件选中时出现\n   */\n  showTargets?: string[];\n  /**\n   * 限定在特定插件选中时消失，优先级高于 showTargets\n   */\n  hideTargets?: string[];\n  /**\n   * 双行布局时ToolBox layout，概念继承自we-ui toolbar\n   */\n  boxLayout?: ToolBoxLayoutMode;\n  /**\n   * 垂直布局时底部文案：local[verticalKey || 'buttonTitle']\n   */\n  verticalKey?: string;\n  /**\n   * 自定义国际化文案\n   */\n  verticalText?: string;\n}\n\n/**\n * 一行工具栏\n * resize时按单个toolButton缩略\n */\nexport interface ToolRowProps {\n  /**\n   * toolButton 数组\n   */\n  toolButtons: ToolButtonProps[];\n  /**\n   * 样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 限定整行在特定插件选中时显示，优先级高于 toolButton.showTargets\n   */\n  showTargets?: string[];\n  /**\n   * 限定整行在特定插件选中时隐藏，优先级高于 toolButton.hideTargets\n   */\n  hideTargets?: string[];\n}\n\n/**\n * 一组工具栏\n * resize 是按行粒度缩略，用于双行布局\n */\nexport interface ToolGroupProps {\n  /**\n   * 一组可包含多行\n   */\n  toolRows: ToolRowProps[];\n  /**\n   * 限定整组在特定插件选中时显示，优先级高于 toolLine.showTargets\n   */\n  showTargets?: string[];\n  /**\n   * 限定整组在特定插件选中时隐藏，优先级高于 toolLine.hideTargets\n   */\n  hideTargets?: string[];\n}\n\n/**\n * 工具栏显示模式\n */\nexport enum ToolbarMode {\n  /**\n   * 双行模式\n   */\n  double = EToolbarMode.doubleLine,\n  /**\n   * 单行模式\n   */\n  single = EToolbarMode.singleLine,\n  /**\n   * Inline 工具栏\n   */\n  inline = 2,\n}\n\nexport interface ToolbarRenderProps {\n  /**\n   * 行内工具栏配置\n   */\n  inlineLayout?: ToolRowProps[];\n  /**\n   * 单行工具栏配置\n   */\n  singleLayout?: ToolRowProps[];\n  /**\n   * 双行工具栏配置\n   */\n  doubleLayout?: ToolGroupProps[];\n  /**\n   * 自定义组件\n   */\n  customToolButtons?: Record<string, any>;\n  /**\n   * 隐藏组件（用于灰度）\n   */\n  hiddenToolButtons?: Record<string, boolean>;\n  /**\n   * 工具栏模式：inline、single、double\n   */\n  toolbarMode?: ToolbarMode;\n  /**\n   * 默认模式\n   */\n  defaultToolbarMode?: ToolbarMode;\n  /**\n   * 选中后让 toolbar disable 的targets\n   */\n  disableTargets?: Record<string, boolean>;\n  /**\n   * 对齐方式\n   */\n  alignment?: 'left' | 'right' | 'center';\n  /**\n   * 自定义样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 是否自动折叠\n   */\n  autoFolding?: boolean;\n  testid?: string;\n}\n\n/**\n * @ignore\n */\nexport interface ToolbarRenderNextInnerProps extends ToolbarRenderProps {\n  controller: Controller;\n  plugins: any;\n}\n\nexport interface InlineToolbarRenderProps {\n  /**\n   * 是否可见，传给 dropdown\n   */\n  visible?: boolean;\n  /**\n   * 行内工具栏配置\n   */\n  inlineLayout: ToolRowProps[];\n  /**\n   * 自定义组件\n   */\n  customToolButtons?: Record<string, any>;\n  /**\n   * 隐藏组件（用于灰度）\n   */\n  hiddenToolButtons?: Record<string, boolean>;\n  /**\n   * 自定义样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 自定义 overlay 样式\n   */\n  overlayStyle?: React.CSSProperties;\n  /**\n   * 自定义 overlay class\n   */\n   overlayClassName?: string;\n  /**\n   * 设置dropdown挂载的容器\n   */\n  getDropdwonContainer?: () => HTMLElement;\n  /**\n   * 触发组件\n   */\n  triggerNode?: HTMLElement | undefined;\n  /**\n   * 包括的children\n   */\n  children?: React.ReactElement;\n  /**\n   * 偏移Y\n   */\n  offsetY?: number;\n  testid?: string;\n}\n"],"file":"interface.js"}