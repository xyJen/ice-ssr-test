import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { HeaderToolbarMode } from "./interface";
import { Controller } from '@ali/4ever-cangjie';
import { usePlugins } from "../PluginsContext";
import { BasicToolbar } from "./BasicToolbar";
import { defaultDisableTargets, defaultDoubleLayout, defaultSingleLayout } from "./config";
export var HeadingToolbar = function HeadingToolbar(props) {
  var _props$disableTargets = props.disableTargets,
      disableTargets = _props$disableTargets === void 0 ? defaultDisableTargets : _props$disableTargets,
      _props$doubleLayout = props.doubleLayout,
      propDoubleLayout = _props$doubleLayout === void 0 ? defaultDoubleLayout : _props$doubleLayout,
      _props$singleLayout = props.singleLayout,
      propSingleLayout = _props$singleLayout === void 0 ? defaultSingleLayout : _props$singleLayout,
      propStyle = props.style,
      _props$allowSwitch = props.allowSwitch,
      allowSwitch = _props$allowSwitch === void 0 ? true : _props$allowSwitch,
      onSwitchModeClick = props.onSwitchModeClick,
      propMode = props.mode,
      rest = _objectWithoutPropertiesLoose(props, ["disableTargets", "doubleLayout", "singleLayout", "style", "allowSwitch", "onSwitchModeClick", "mode"]);

  var controller = Controller.useController({
    maxPending: 10
  });
  var plugins = usePlugins();
  var style = React.useMemo(function () {
    return _extends({
      padding: '4px 24px'
    }, propStyle);
  }, [propStyle]);

  var _React$useState = React.useState(HeaderToolbarMode.single),
      innerMode = _React$useState[0],
      setInnerMode = _React$useState[1];

  var mode = propMode || innerMode;
  var doubleLayout = allowSwitch ? propDoubleLayout : mode === HeaderToolbarMode["double"] ? propDoubleLayout : undefined;
  var singleLayout = allowSwitch ? propSingleLayout : mode === HeaderToolbarMode.single ? propSingleLayout : undefined;
  var handleSwitch = React.useCallback(function (modeType) {
    setInnerMode(modeType);

    if (onSwitchModeClick) {
      onSwitchModeClick(modeType);
    }
  }, [onSwitchModeClick]);
  return /*#__PURE__*/_createElement(BasicToolbar, _extends({
    disableTargets: disableTargets,
    doubleLayout: doubleLayout,
    singleLayout: singleLayout,
    style: style,
    mode: mode,
    onSwitchModeClick: handleSwitch
  }, rest, {
    controller: controller,
    plugins: plugins
  }));
};
//# sourceMappingURL=HeadingToolbar.js.map