{"version":3,"sources":["../../../src/ToolbarNext/layoutConverter.ts"],"names":["areArraysIntersected","buildToolbarItem","React","convertSingleLayout","layout","context","toolbarConfig","map","line","convertLine","items","filter","config","length","result","index","item","push","convertDoubleLayout","group","convertGroup","itemArray","hideTargets","disableTargets","blocks","targets","shouldHide","shouldDisable","blockConfigs","block","isDoubleLine","convertDoubleLine","lineOrDoubleLine","Array","isArray","disable","lines","lineConfigs","itemConfigs","convertItem","isValidElement","controller","plugins","customButtons","name","disabledFromConfig","disabled","rest","extroProps","key"],"mappings":"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","sourcesContent":["import type { Controller } from '@ali/4ever-cangjie';\nimport type { IToolbarItem, IToolbarItemGroup, IToolbarItemLine, ISingleLineLayout, IDoubleLineLayout, IToolBar, IToolbarItemDoubleLine } from './interface';\nimport type { Plugins } from '../PluginsContext';\n\nimport { areArraysIntersected } from './utils';\nimport { buildToolbarItem } from './buildToolbarItem';\nimport React from 'react';\n\n\nexport interface IConvertContext {\n  targets: string[],\n  controller: Controller,\n  plugins: Plugins | null,\n  customButtons: IToolBar['customButtons']\n}\n\n\nexport function convertSingleLayout(layout: ISingleLineLayout, context: IConvertContext) {\n  const toolbarConfig = layout.map(line => convertLine(line, false, context));\n\n  const items = toolbarConfig.filter(config => config?.length > 0);\n\n  const result: (JSX.Element[] | 'divider')[] = []\n\n  for (let index = 0; index < items.length; index++) {\n    const item = items[index];\n    result.push(item);\n    if (index < items.length - 1) {\n      result.push('divider');\n    }\n  }\n\n  return result;\n}\n\n\nexport function convertDoubleLayout(layout: IDoubleLineLayout, context: IConvertContext) {\n\n  const toolbarConfig = layout.map(group => convertGroup(group, context));\n\n  const items = toolbarConfig.filter(config => config?.length > 0);\n\n  const result: ([JSX.Element[], JSX.Element[]] | JSX.Element[] | 'divider')[] = []\n\n  for (let index = 0; index < items.length; index++) {\n    const itemArray = items[index];\n    for (const item of itemArray) {\n      result.push(item);\n    }\n    if (index < items.length - 1) {\n      result.push('divider');\n    }\n  }\n\n  return result;\n}\n\nexport function convertGroup(group: IToolbarItemGroup, context: IConvertContext) {\n  const { hideTargets = [], disableTargets = [], blocks } = group;\n\n  const { targets } = context;\n\n  const shouldHide = areArraysIntersected(targets, hideTargets);\n  if (shouldHide) {\n    return [];\n  }\n  const shouldDisable = areArraysIntersected(targets, disableTargets);\n\n\n  const blockConfigs = blocks.map(block => {\n    if (isDoubleLine(block)) {\n      return convertDoubleLine(block, shouldDisable, context);\n    }\n    return convertLine(block, shouldDisable, context);\n  });\n\n  return blockConfigs.filter(config => config?.length > 0);\n\n}\n\nfunction isDoubleLine(lineOrDoubleLine: IToolbarItemDoubleLine | IToolbarItemLine): lineOrDoubleLine is IToolbarItemDoubleLine {\n  return Array.isArray(lineOrDoubleLine['lines'])\n}\n\n\nexport function convertDoubleLine(block: IToolbarItemDoubleLine, disable: boolean, context: IConvertContext): [JSX.Element[], JSX.Element[]] | [] {\n\n  const { hideTargets = [], disableTargets = [], lines } = block;\n\n  const { targets } = context;\n\n  const shouldHide = disable || areArraysIntersected(targets, hideTargets);\n  if (shouldHide) {\n    return [];\n  }\n  const shouldDisable = areArraysIntersected(targets, disableTargets);\n\n  const lineConfigs = lines.map(line => convertLine(line, shouldDisable, context))\n\n  return lineConfigs as [JSX.Element[], JSX.Element[]];\n\n}\n\nexport function convertLine(line: IToolbarItemLine, disable: boolean, context: IConvertContext): JSX.Element[] {\n\n  const { targets } = context;\n  const { hideTargets = [], disableTargets = [], items } = line;\n  const shouldHide = areArraysIntersected(targets, hideTargets);\n  if (shouldHide) {\n    return [];\n  }\n  const shouldDisable = disable || areArraysIntersected(targets, disableTargets);\n\n  const itemConfigs = items.map(item => convertItem(item, shouldDisable, context))\n\n  return itemConfigs.filter(React.isValidElement);\n\n}\n\nexport function convertItem(item: IToolbarItem, disable: boolean, context: IConvertContext): JSX.Element | null {\n\n  const { targets, controller, plugins, customButtons } = context;\n  const { hideTargets = [], disableTargets = [], name, disabled: disabledFromConfig, ...rest } = item;\n  const shouldHide = areArraysIntersected(targets, hideTargets);\n  if (shouldHide) {\n    return null;\n  }\n\n  const shouldDisable = disabledFromConfig || disable || areArraysIntersected(targets, disableTargets);\n\n  const extroProps = shouldDisable ? { disabled: shouldDisable, key: name, ...rest } : { key: name, ...rest };\n\n  return buildToolbarItem(plugins, controller, name, customButtons, extroProps);\n}\n"],"file":"layoutConverter.js"}