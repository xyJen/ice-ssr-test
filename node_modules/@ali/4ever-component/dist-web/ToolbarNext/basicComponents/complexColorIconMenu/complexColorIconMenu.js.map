{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/complexColorIconMenu/complexColorIconMenu.tsx"],"names":["React","TBIconButton","Popover","IconPalette","ColorPanel","ComplexColorIconMenu","props","getContainer","onOverlayVisibleChangeProp","onOverlayVisibleChange","isOverlayVisibleProp","isOverlayVisible","tooltip","role","rest","useState","isOverLayoutVisibleState","onOverLayoutVisibleChangeState","onOverLayoutVisibleChange","useCallback","v","undefined","isOverLayoutVisible"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;qBAC4B,a;AAA5B,SAASC,YAAT,EAAuBC,OAAvB,QAAsC,qBAAtC;AACA,SAASC,WAAT;AACA,SAA2BC,UAA3B;;wBAuCc,eAAC,WAAD,O;;AA7Bd,OAAO,IAAMC,oBAAmD,GAAG,SAAtDA,oBAAsD,CAACC,KAAD,EAAW;AAAA,MACpEC,YADoE,GACiED,KADjE,CACpEC,YADoE;AAAA,MAC9BC,0BAD8B,GACiEF,KADjE,CACtDG,sBADsD;AAAA,MACgBC,oBADhB,GACiEJ,KADjE,CACFK,gBADE;AAAA,MACsCC,OADtC,GACiEN,KADjE,CACsCM,OADtC;AAAA,MAC+CC,IAD/C,GACiEP,KADjE,CAC+CO,IAD/C;AAAA,MACwDC,IADxD,iCACiER,KADjE;;AAAA,wBAETN,KAAK,CAACe,QAAN,CAAe,KAAf,CAFS;AAAA,MAErEC,wBAFqE;AAAA,MAE3CC,8BAF2C;;AAI5E,MAAMC,yBAAyB,GAAGlB,KAAK,CAACmB,WAAN,CAAkB,UAACC,CAAD,EAAgB;AAClE,QAAIV,oBAAoB,KAAKW,SAA7B,EAAwC;AACtCJ,MAAAA,8BAA8B,CAACG,CAAD,CAA9B;AACD;;AACDZ,IAAAA,0BAA0B,IAAIA,0BAA0B,CAACY,CAAD,CAAxD;AACD,GALiC,EAK/B,CAACV,oBAAD,EAAuBF,0BAAvB,CAL+B,CAAlC;AAOA,MAAMc,mBAAmB,GAAGZ,oBAAoB,KAAKW,SAAzB,GAAqCX,oBAArC,GAA4DM,wBAAxF;AAEA,sBACE,eAAC,OAAD;AACE,IAAA,OAAO,EAAEM,mBADX;AAEE,IAAA,eAAe,EAAEJ,yBAFnB;AAGE,IAAA,OAAO,eACL,eAAC,UAAD,EACMJ,IADN,CAJJ;AAQE,IAAA,YAAY,EAAEP,YARhB;AASE,IAAA,SAAS,EAAC;AATZ,kBAWE,eAAC,YAAD;AACE,IAAA,OAAO,EAAE,mBAAM;AACbW,MAAAA,yBAAyB,CAAC,CAACI,mBAAF,CAAzB;AACD,KAHH;AAIE,IAAA,IAAI,MAJN;AAKE,IAAA,OAAO,EAAEA,mBAAmB,GAAGD,SAAH,GAAeT,OAL7C;AAME,IAAA,IAAI,EAAEC,IANR;AAOE,IAAA,MAAM,EAAES;AAPV,IAXF,CADF;AAuBD,CApCM","sourcesContent":["import React from 'react';\nimport { TBIconButton, Popover } from '@ali/we-design-next';\nimport { IconPalette } from '../icons';\nimport { IColorPanelProps, ColorPanel } from './colorPanel';\n\nexport interface IColorIconMenuProps extends IColorPanelProps {\n  getContainer?: () => HTMLElement;\n  onOverlayVisibleChange?: (v: boolean) => void;\n  isOverlayVisible?: boolean;\n  tooltip?: string;\n  role?: string;\n}\n\nexport const ComplexColorIconMenu: React.FC<IColorIconMenuProps> = (props) => {\n  const { getContainer, onOverlayVisibleChange: onOverlayVisibleChangeProp, isOverlayVisible: isOverlayVisibleProp, tooltip, role, ...rest } = props;\n  const [isOverLayoutVisibleState, onOverLayoutVisibleChangeState] = React.useState(false);\n\n  const onOverLayoutVisibleChange = React.useCallback((v: boolean) => {\n    if (isOverlayVisibleProp === undefined) {\n      onOverLayoutVisibleChangeState(v);\n    }\n    onOverlayVisibleChangeProp && onOverlayVisibleChangeProp(v);\n  }, [isOverlayVisibleProp, onOverlayVisibleChangeProp]);\n\n  const isOverLayoutVisible = isOverlayVisibleProp !== undefined ? isOverlayVisibleProp : isOverLayoutVisibleState;\n\n  return (\n    <Popover\n      visible={isOverLayoutVisible}\n      onVisibleChange={onOverLayoutVisibleChange}\n      content={\n        <ColorPanel\n          {...rest}\n        />\n      }\n      getContainer={getContainer}\n      placement=\"bottomLeft\"\n    >\n      <TBIconButton\n        onClick={() => {\n          onOverLayoutVisibleChange(!isOverLayoutVisible);\n        }}\n        icon={<IconPalette/>}\n        tooltip={isOverLayoutVisible ? undefined : tooltip}\n        role={role}\n        active={isOverLayoutVisible}\n      />\n    </Popover>\n  );\n}"],"file":"complexColorIconMenu.js"}