import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TBIconButton, Popover } from '@ali/we-design-next';
import { IconPalette } from "../icons";
import { ColorPanel } from "./colorPanel";

var _ref = /*#__PURE__*/_createElement(IconPalette, null);

export var ComplexColorIconMenu = function ComplexColorIconMenu(props) {
  var getContainer = props.getContainer,
      onOverlayVisibleChangeProp = props.onOverlayVisibleChange,
      isOverlayVisibleProp = props.isOverlayVisible,
      tooltip = props.tooltip,
      role = props.role,
      rest = _objectWithoutPropertiesLoose(props, ["getContainer", "onOverlayVisibleChange", "isOverlayVisible", "tooltip", "role"]);

  var _React$useState = React.useState(false),
      isOverLayoutVisibleState = _React$useState[0],
      onOverLayoutVisibleChangeState = _React$useState[1];

  var onOverLayoutVisibleChange = React.useCallback(function (v) {
    if (isOverlayVisibleProp === undefined) {
      onOverLayoutVisibleChangeState(v);
    }

    onOverlayVisibleChangeProp && onOverlayVisibleChangeProp(v);
  }, [isOverlayVisibleProp, onOverlayVisibleChangeProp]);
  var isOverLayoutVisible = isOverlayVisibleProp !== undefined ? isOverlayVisibleProp : isOverLayoutVisibleState;
  return /*#__PURE__*/_createElement(Popover, {
    visible: isOverLayoutVisible,
    onVisibleChange: onOverLayoutVisibleChange,
    content: /*#__PURE__*/_createElement(ColorPanel, rest),
    getContainer: getContainer,
    placement: "bottomLeft"
  }, /*#__PURE__*/_createElement(TBIconButton, {
    onClick: function onClick() {
      onOverLayoutVisibleChange(!isOverLayoutVisible);
    },
    icon: _ref,
    tooltip: isOverLayoutVisible ? undefined : tooltip,
    role: role,
    active: isOverLayoutVisible
  }));
};
//# sourceMappingURL=complexColorIconMenu.js.map