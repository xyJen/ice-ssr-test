{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/buttons/TableFillColorPicker.tsx"],"names":["React","useMemo","styled","SplitButton","ColorPicker","IconCellFillColor","keyToPreset","StopEvent","presetToKey","useRecentColors","SplitButtonWrapper","div","TableFillColorPicker","props","onVisibleChange","currentPreset","color","onColorChange","onCurrentPresetChange","disabled","icon","testid","rest","useState","isOverlayVisible","setOverlayVisible","currentColor","setCurrentColor","localPreset","setLocalPreset","recentColors","addRecentColor","useEffect","curPreset","handleCurrentPresetChange","useCallback","mode","preset","handleOverlayVisible","v","handleColorChange","options","intermediate","fromSketch","handleLeftClick","formatIcon"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { SplitButton, ColorPicker } from './Basics';\nimport { IconCellFillColor } from '../icons';\nimport { keyToPreset, StopEvent, presetToKey } from './utils';\nimport { useRecentColors } from './hooks';\n\nconst SplitButtonWrapper = styled.div`\n  line-height: 0;\n  position: relative;\n`;\nexport interface ITableFileColorPickerProps extends\n  Pick<Partial<React.ComponentProps<typeof SplitButton>>, 'onVisibleChange' | 'title' | 'tooltip' | 'icon' | 'disabled' | 'testid' | 'role'> {\n  onColorChange: (color: string) => void;\n  currentPreset: 'normal' | 'art';\n  onCurrentPresetChange?: (mode: 'normal' | 'art') => void;\n  color: string;\n}\n\n\n\nexport const TableFillColorPicker = (props: ITableFileColorPickerProps) => {\n\n  const {\n    onVisibleChange,\n    currentPreset,\n    color,\n    onColorChange,\n    onCurrentPresetChange,\n    disabled,\n    icon,\n    testid,\n    ...rest\n  } = props;\n  const [isOverlayVisible, setOverlayVisible] = React.useState(false);\n  const [currentColor, setCurrentColor] = React.useState(color);\n  const [localPreset, setLocalPreset] = React.useState(currentPreset);\n\n  const [recentColors, addRecentColor] = useRecentColors();\n\n  React.useEffect(() => {\n    setCurrentColor(color);\n  }, [color]);\n\n  React.useEffect(() => {\n    setLocalPreset(currentPreset);\n  }, [currentPreset]);\n\n  const curPreset = presetToKey(localPreset);\n\n  const handleCurrentPresetChange = React.useCallback((mode) => {\n\n    const preset = keyToPreset(mode);\n    onCurrentPresetChange?.(preset);\n    setLocalPreset(preset);\n\n  }, [onCurrentPresetChange]);\n\n  const handleOverlayVisible = React.useCallback((v: boolean) => {\n    onVisibleChange && onVisibleChange(v);\n    setOverlayVisible(v);\n  }, [onVisibleChange]);\n\n  const handleColorChange = React.useCallback((color, options) => {\n    if (!options.intermediate) {\n      setCurrentColor(color);\n      onColorChange(color);\n      addRecentColor(color);\n    }\n\n    if (!options.fromSketch) {\n      setOverlayVisible(false);\n    }\n  }, [onColorChange, recentColors]);\n\n  const handleLeftClick = React.useCallback(() => {\n    onColorChange(currentColor);\n  }, [onColorChange, currentColor]);\n\n  const formatIcon = useMemo(() => {\n    if (icon) {\n      return icon;\n    }\n    return (\n      <SplitButtonWrapper>\n        <IconCellFillColor subColor={currentColor} />\n      </SplitButtonWrapper>\n    );\n  }, [currentColor, disabled, icon])\n\n  return (\n    <SplitButton\n      onClick={handleLeftClick}\n      overlayVisible={isOverlayVisible}\n      onVisibleChange={handleOverlayVisible}\n      icon={formatIcon}\n      disabled={disabled}\n      overlay={\n        <ColorPicker\n          onClick={StopEvent}\n          color={currentColor}\n          recentColors={recentColors}\n          onColorChange={handleColorChange}\n          currentPreset={curPreset}\n          onCurrentPresetChange={handleCurrentPresetChange}\n          data-testid={testid ? testid + '-color-picker' : 'color-picker'}\n          advance\n        />\n      }\n      autoClose={false}\n      testid={testid}\n      {...rest}\n    />\n  )\n}\n"],"file":"TableFillColorPicker.js"}