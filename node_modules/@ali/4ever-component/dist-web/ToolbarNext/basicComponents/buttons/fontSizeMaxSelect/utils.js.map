{"version":3,"sources":["../../../../../../src/ToolbarNext/basicComponents/buttons/fontSizeMaxSelect/utils.ts"],"names":["noop","getDataAttr","props","Object","keys","reduce","prev","key","substr","omit","target","fields","newTarget","i","length","setTransform","style","v","transform","webkitTransform"],"mappings":";AAEA,OAAO,IAAMA,IAAS,GAAG,SAAZA,IAAY,GAAY,CAAE,CAAhC;AAEP,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAAsC;AAC3C,SAAOC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,CAA0B,UAACC,IAAD,EAAYC,GAAZ,EAAoB;AACnD,QAAIA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,OAArB,IAAgCD,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,OAArD,IAAgED,GAAG,KAAK,MAA5E,EAAoF;AAClFD,MAAAA,IAAI,CAACC,GAAD,CAAJ,GAAYL,KAAK,CAACK,GAAD,CAAjB;AACD;;AACD,WAAOD,IAAP;AACD,GALM,EAKJ,EALI,CAAP;AAMD;AAED,OAAO,IAAMG,IAAI,GAAG,SAAPA,IAAO,CAClBC,MADkB,EAElBC,MAFkB,EAGuB;AACzC,MAAMC,SAAS,gBAAQF,MAAR,CAAf;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,IAAI,CAAxC,EAA2C;AACzC,QAAMN,GAAG,GAAGI,MAAM,CAACE,CAAD,CAAlB;AACA,WAAOD,SAAS,CAACL,GAAD,CAAhB;AACD;;AACD,SAAOK,SAAP;AACD,CAVM;AAoFP,OAAO,SAASG,YAAT,CAAsBC,KAAtB,EAAkDC,CAAlD,EAAmE;AACxED,EAAAA,KAAK,CAACE,SAAN,GAAkBD,CAAlB;AACAD,EAAAA,KAAK,CAACG,eAAN,GAAwBF,CAAxB;AACD","sourcesContent":["import React from 'react';\n\nexport const noop: any = (): void => {};\n\nexport function getDataAttr(props: any): any {\n  return Object.keys(props).reduce((prev: any, key) => {\n    if (key.substr(0, 5) === 'aria-' || key.substr(0, 5) === 'data-' || key === 'role') {\n      prev[key] = props[key];\n    }\n    return prev;\n  }, {});\n}\n\nexport const omit = <T extends Record<string, any>, K extends keyof T>(\n  target: T,\n  fields: K[],\n): { [k in Exclude<keyof T, K>]: T[k] } => {\n  const newTarget = { ...target };\n  for (let i = 0; i < fields.length; i += 1) {\n    const key = fields[i];\n    delete newTarget[key];\n  }\n  return newTarget;\n};\n\nexport interface ITabsProps {\n  /**\n   * 设置根节点的类名，默认：undefined\n   */\n  className?: string;\n  /**\n   * 设置根节点样式，默认：undefined\n   */\n  style?: React.CSSProperties;\n  /**\n   * 设置tabBar位置\n   */\n  tabPosition?: 'left' | 'top';\n  /**\n   * 激活的 tabKey，默认：undefined\n   */\n  activeKey?: string;\n  /**\n   * 默认激活的 tabKey，默认：undefined，如果有activeKey，则忽略\n   */\n  defaultActiveKey?: string;\n  /**\n   * 是否强制销毁不显示的tab的节点，默认：false\n   */\n  destroyInactiveTabPane?: boolean;\n  /**\n   * activeKey发生变化时的回调函数\n   */\n  onChange?: (activeKey: string) => void;\n  /**\n   * TabBar 点击时的回调函数\n   */\n  onTabClick?: (nextKey: string, e?: React.MouseEvent<HTMLDivElement>) => void;\n  /**\n   * tab数量较多时，左滑动箭头的点击回调函数\n   */\n  onPrevClick?: (e: React.MouseEvent<HTMLElement>) => void;\n  /**\n   * tab数量较多时，右滑动箭头的点击回调函数\n   */\n  onNextClick?: (e: React.MouseEvent<HTMLElement>) => void;\n  /**\n   * 设置tabBar节点样式\n   */\n  tabBarStyle?: React.CSSProperties;\n  /**\n   * 设置tabContent节点样式\n   */\n  tabContentStyle?: React.CSSProperties;\n  /**\n   * 设置navContainer节点样式\n   */\n  navContainerStyle?: React.CSSProperties;\n  /**\n   * 测试使用\n   */\n  testid?: string;\n  tabBarItemClassName?: string;\n}\n\nexport interface ITabBarProps extends ITabsProps {\n  panes: React.ReactNode;\n}\n\nexport interface ISaveRef {\n  (name: string): (node: HTMLElement | null) => void\n}\n\nexport interface IGetRef {\n  (name: string): HTMLElement\n}\n\nexport function setTransform(style: CSSStyleDeclaration, v: string): void {\n  style.transform = v;\n  style.webkitTransform = v;\n}\n"],"file":"utils.js"}