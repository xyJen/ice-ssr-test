import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { Component } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import fastdom from 'fastdom';
import { ArrowIconDown } from "./icon";
import classnames from 'classnames';
import { setTransform, noop } from "./utils";
import { NavContainer, NavWrap, Nav, PrevButton, NextButton } from "./style";

var _ref2 = /*#__PURE__*/_createElement(ArrowIconDown, null);

var _ref3 = /*#__PURE__*/_createElement(ArrowIconDown, null);

var TabBarNode = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TabBarNode, _Component);

  function TabBarNode(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.offset = void 0;
    _this.lastNextPrevShown = void 0;
    _this.lastWheelDirection = void 0;
    _this.tabList = void 0;
    _this.tabSizeMap = void 0;
    _this.wrapperOffsetWH = 0;
    _this.wrapperScrollWH = 0;

    _this.prevTransitionEnd = function (e) {
      if (e.propertyName !== 'opacity') {
        return;
      }

      var container = _this.props.getRef('container');

      _this.scrollToActiveTab({
        target: container,
        currentTarget: container
      });
    };

    _this.scrollToActiveTab = function (e) {
      var getRef = _this.props.getRef;
      var activeTab = getRef('activeTab');
      var navWrap = getRef('navWrap');

      if (e && e.target !== e.currentTarget || !activeTab) {
        return;
      } // when not scrollable or enter scrollable first time, don't emit scrolling


      var needToScroll = _this.isNextPrevShown() && _this.lastNextPrevShown;

      _this.lastNextPrevShown = _this.isNextPrevShown();

      if (!needToScroll) {
        return;
      }

      var activeTabWH = _this.getScrollWH(activeTab);

      var navWrapNodeWH = _this.getOffsetWH(navWrap);

      var _assertThisInitialize = _assertThisInitialized(_this),
          offset = _assertThisInitialize.offset;

      var wrapOffset = _this.getOffsetLT(navWrap);

      var activeTabOffset = _this.getOffsetLT(activeTab);

      if (wrapOffset > activeTabOffset) {
        // activeTab 在 wrap 的可见区域左侧
        offset += wrapOffset - activeTabOffset;

        _this.setOffset(offset);

        _this.setNextPrev();
      } else if (wrapOffset + navWrapNodeWH < activeTabOffset + activeTabWH) {
        // activeTab 在 wrap 的可见区域右侧
        offset -= activeTabOffset + activeTabWH - (wrapOffset + navWrapNodeWH);
        var minOffset = _this.wrapperOffsetWH - _this.wrapperScrollWH;
        var maxOffset = 0;
        var newOffset = Math.min(Math.max(offset, minOffset), maxOffset);

        _this.setOffset(newOffset);

        _this.setNextPrev();
      }
    };

    _this.prev = function (e) {
      var _this$props = _this.props,
          onPrevClick = _this$props.onPrevClick,
          getRef = _this$props.getRef;

      if (onPrevClick) {
        onPrevClick(e);
      }

      var navWrapNode = getRef('navWrap');

      var navWrapNodeWH = _this.getOffsetWH(navWrapNode);

      var _assertThisInitialize2 = _assertThisInitialized(_this),
          offset = _assertThisInitialize2.offset;

      _this.setOffset(offset + navWrapNodeWH);

      _this.setNextPrev();
    };

    _this.next = function (e) {
      var _this$props2 = _this.props,
          onNextClick = _this$props2.onNextClick,
          getRef = _this$props2.getRef;

      if (onNextClick) {
        onNextClick(e);
      }

      var navWrapNode = getRef('navWrap');

      var navWrapNodeWH = _this.getOffsetWH(navWrapNode);

      var _assertThisInitialize3 = _assertThisInitialized(_this),
          offset = _assertThisInitialize3.offset;

      _this.setOffset(offset - navWrapNodeWH);

      _this.setNextPrev();
    };

    _this.handleWheel = function (e) {
      if (e) {
        var _assertThisInitialize4 = _assertThisInitialized(_this),
            wrapperOffsetWH = _assertThisInitialize4.wrapperOffsetWH,
            wrapperScrollWH = _assertThisInitialize4.wrapperScrollWH;

        if (wrapperOffsetWH >= wrapperScrollWH) {
          return false;
        }

        var deltaX = e.deltaX,
            deltaY = e.deltaY; // Convert both to x & y since wheel only happened on PC

        var mixed = 0;
        var absX = Math.abs(deltaX);
        var absY = Math.abs(deltaY);

        if (absX === absY) {
          mixed = _this.lastWheelDirection === 'x' ? deltaX : deltaY;
        } else if (absX > absY) {
          mixed = deltaX;
          _this.lastWheelDirection = 'x';
        } else {
          mixed = deltaY;
          _this.lastWheelDirection = 'y';
        }

        var minOffset = wrapperOffsetWH - wrapperScrollWH;
        var maxOffset = 0;
        var newOffset = Math.min(Math.max(-mixed + _this.offset, minOffset), maxOffset);

        _this.setOffset(newOffset);

        e.preventDefault();
        return true;
      } else {
        return false;
      }
    };

    _this.handleResize = function () {
      fastdom.measure(function () {
        var getRef = _this.props.getRef;
        var wrapper = getRef('navWrap');
        var tabs = getRef('nav');
        _this.wrapperOffsetWH = wrapper.offsetWidth || 0;
        _this.wrapperScrollWH = tabs.scrollWidth || 0;
      });
    };

    _this.getTabList = function (panes) {
      var tabList = [];
      React.Children.forEach(panes, function (child) {
        if (child && /*#__PURE__*/React.isValidElement(child)) {
          tabList.push({
            key: child.key,
            tab: child.props.tab
          });
        }
      });
      return tabList;
    };

    _this.updateTabSizes = function () {
      var _this$props3 = _this.props,
          getRef = _this$props3.getRef,
          activeKey = _this$props3.activeKey;
      var tabSizeMap = new Map();
      return new Promise(function (resolve) {
        fastdom.measure(function () {
          _this.tabList.forEach(function (_ref) {
            var key = _ref.key;
            var btnNode;

            if (activeKey === key) {
              btnNode = getRef('activeTab');
            } else {
              btnNode = getRef("tab_" + key);
            }

            if (btnNode) {
              tabSizeMap.set(key, {
                width: btnNode.offsetWidth || 0,
                height: btnNode.offsetHeight || 0,
                left: btnNode.offsetLeft || 0,
                top: btnNode.offsetTop || 0
              });
            }
          });

          _this.tabSizeMap = tabSizeMap;
          resolve();
        });
      });
    };

    _this.getPrevNext = function () {
      var _this$state = _this.state,
          prev = _this$state.prev,
          next = _this$state.next;
      var testid = _this.props.testid;
      var showNextPrev = prev || next;

      var _assertThisInitialize5 = _assertThisInitialized(_this),
          prevCallback = _assertThisInitialize5.prev,
          nextCallback = _assertThisInitialize5.next,
          prevTransitionEnd = _assertThisInitialize5.prevTransitionEnd;

      var prevButton = /*#__PURE__*/_createElement(PrevButton, {
        style: {
          left: 0
        },
        onClick: prev ? prevCallback : undefined,
        className: classnames('prevbutton', {
          disabled: !prev,
          show: showNextPrev
        }),
        onTransitionEnd: prevTransitionEnd,
        "data-testid": (testid || '') + "_pre"
      }, /*#__PURE__*/_createElement("div", {
        style: {
          transform: 'rotate(90deg)',
          transformOrigin: 'center center'
        }
      }, _ref2));

      var nextButton = /*#__PURE__*/_createElement(NextButton, {
        onClick: next ? nextCallback : undefined,
        className: classnames('nextbutton', {
          disabled: !next,
          show: showNextPrev
        }),
        "data-testid": (testid || '') + "_next"
      }, /*#__PURE__*/_createElement("div", {
        style: {
          transform: 'rotate(-90deg)',
          transformOrigin: 'center center'
        }
      }, _ref3));

      return /*#__PURE__*/_createElement(React.Fragment, null, prevButton, nextButton);
    };

    _this.excessTabsHelper = function (showNextPrev) {
      return showNextPrev ? _this.getPrevNext() : null;
    };

    _this.offset = 0;
    _this.tabList = [];
    _this.tabSizeMap = new Map();
    _this.state = {
      next: false,
      prev: false,
      visibleStart: 0,
      visibleEnd: 0
    };
    return _this;
  }

  var _proto = TabBarNode.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var getRef = this.props.getRef;
    this.componentDidUpdate();
    var navWrapper = getRef('navWrap');

    if (navWrapper) {
      navWrapper.addEventListener('wheel', this.handleWheel);
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this2 = this;

    var props = this.props;
    this.setNextPrev().then(function (nextPrev) {
      // wait next, prev show hide
      if (_this2.isNextPrevShown(_this2.state) !== _this2.isNextPrevShown(nextPrev)) {
        _this2.setState({}, _this2.scrollToActiveTab);
      } else if (!prevProps || props.activeKey !== prevProps.activeKey) {
        _this2.scrollToActiveTab();
      }
    });

    if (!prevProps) {
      this.updateTabSizes().then(function () {
        _this2.handleResize();
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var getRef = this.props.getRef;
    var navWrapper = getRef('navWrap');

    if (navWrapper) {
      navWrapper.removeEventListener('wheel', this.handleWheel);
    }
  }
  /**
   * 检测左右按钮的激活状态，并调整 offset
   */
  ;

  _proto.setNextPrev = function setNextPrev() {
    var _this3 = this;

    return new Promise(function (resolve) {
      fastdom.measure(function () {
        var getRef = _this3.props.getRef;
        var navNode = getRef('nav');

        var navNodeWH = _this3.getScrollWH(navNode); // Add 1px to fix `offsetWidth` with decimal in Chrome not correct handle


        var containerWH = _this3.getOffsetWH(getRef('container')) + 1;

        var navWrapNodeWH = _this3.getOffsetWH(getRef('navWrap'));

        fastdom.mutate(function () {
          var offset = _this3.offset;
          var minOffset = containerWH - navNodeWH;
          var _this3$state = _this3.state,
              next = _this3$state.next,
              prev = _this3$state.prev;

          if (minOffset >= 0) {
            next = false;

            _this3.setOffset(0);

            offset = 0;
          } else if (minOffset < offset) {
            next = true;
          } else {
            next = false;
            var realOffset = navWrapNodeWH - navNodeWH;

            _this3.setOffset(realOffset);

            offset = realOffset;
          }

          if (offset < 0) {
            prev = true;
          } else {
            prev = false;
          }

          _this3.setNext(next);

          _this3.setPrev(prev);

          resolve({
            next: next,
            prev: prev
          });
        });
      });
    });
  }
  /**
   * 获取节点的宽度
   *
   * @param {HTMLElement} node
   * @return {number} offsetWidth
   */
  ;

  _proto.getOffsetWH = function getOffsetWH(node) {
    return node.offsetWidth;
  }
  /**
   * 获取节点的滚动宽度
   *
   * @param {HTMLElement} node
   * @return {number} scrollWidth
   */
  ;

  _proto.getScrollWH = function getScrollWH(node) {
    return node.scrollWidth;
  }
  /**
   * 获取节点的偏移量
   *
   * @param {HTMLElement} node
   * @return {number} clientRect.left
   */
  ;

  _proto.getOffsetLT = function getOffsetLT(node) {
    return node.getBoundingClientRect().left;
  }
  /**
   * 设置偏移量
   *
   */
  ;

  _proto.setOffset = function setOffset(offset) {
    var getRef = this.props.getRef;
    var target = Math.min(0, offset);

    if (this.offset !== target) {
      this.offset = target;
      var navOffset = {};
      var navStyle = getRef('nav').style;
      navOffset = {
        value: "translate3d(" + target + "px,0,0)"
      };
      setTransform(navStyle, navOffset.value);
    }
  };

  _proto.setPrev = function setPrev(v) {
    if (this.state.prev !== v) {
      this.setState({
        prev: v
      });
    }
  };

  _proto.setNext = function setNext(v) {
    if (this.state.next !== v) {
      this.setState({
        next: v
      });
    }
  };

  /**
   * 判断左右的按钮是否显示
   */
  _proto.isNextPrevShown = function isNextPrevShown(state) {
    if (state) {
      return state.next || state.prev;
    }

    var _this$state2 = this.state,
        next = _this$state2.next,
        prev = _this$state2.prev;
    return next || prev;
  };

  _proto.render = function render() {
    var _this$state3 = this.state,
        prev = _this$state3.prev,
        next = _this$state3.next;
    var _this$props4 = this.props,
        children = _this$props4.children,
        saveRef = _this$props4.saveRef;
    var showNextPrev = prev || next;
    return /*#__PURE__*/_createElement(NavContainer, {
      className: classnames({
        scrolling: showNextPrev
      }),
      ref: saveRef('container')
    }, /*#__PURE__*/_createElement(NavWrap, {
      ref: saveRef('navWrap')
    }, /*#__PURE__*/_createElement(Nav, {
      ref: saveRef('nav')
    }, children)), this.excessTabsHelper(showNextPrev));
  };

  return TabBarNode;
}(Component);

TabBarNode.defaultProps = {
  prefixCls: '',
  onPrevClick: noop,
  onNextClick: noop
};
export { TabBarNode as default };
//# sourceMappingURL=TabBarNode.js.map