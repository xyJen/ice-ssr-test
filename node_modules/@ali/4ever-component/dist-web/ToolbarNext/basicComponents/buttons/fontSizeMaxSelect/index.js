import React, { useCallback, useMemo, useState, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import classnames from 'classnames';
import { DisableWrap, ContainerMenuDown, DesWrap, GalleryWrap, IconWrapper, TableButton, TableStyleSet, TextWrap, TitleWrap } from "./style";
import { Popover } from '@ali/we-design-next';
import { ArrowIconDown } from "./icon";
import { Tabs } from "./Tabs";
import { TabPane } from "./TabPane";
import FontSizeButton from "./FontSizeButton";

var _ref = /*#__PURE__*/_createElement(ArrowIconDown, null);

export var FontSizeMaxSelect = /*#__PURE__*/React.memo(function (props) {
  var locale = props.locale,
      onChange = props.onChange,
      value = props.value,
      defaultValue = props.defaultValue,
      disabled = props.disabled,
      testid = props.testid,
      width = props.width;
  var length = width || 490;

  var _useState = useState(false),
      showArrowDown = _useState[0],
      setShowArrowDown = _useState[1];

  var _useState2 = useState(false),
      overlayVisible = _useState2[0],
      setOverlayVisible = _useState2[1];

  var selfRef = useRef();
  var sizeComputedRef = useRef(false);
  var minFontSize = 9;
  var maxtFontSize = 13.5; // 文字类型列表：正文、标题1-6

  var options = useMemo(function () {
    return [{
      title: (locale == null ? void 0 : locale.toolbarHeading1) || 'Heading 1',
      type: 'heading-1',
      des: 'Heading 1',
      "default": 20,
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: (locale == null ? void 0 : locale.toolbarHeading2) || 'Heading 2',
      type: 'heading-2',
      des: 'Heading 2',
      "default": 16,
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: (locale == null ? void 0 : locale.toolbarHeading3) || 'Heading 3',
      type: 'heading-3',
      des: 'Heading 3',
      "default": 14,
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: (locale == null ? void 0 : locale.toolbarHeading4) || 'Heading 4',
      type: 'heading-4',
      des: 'Heading 4',
      "default": 12,
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: (locale == null ? void 0 : locale.toolbarParagraph) || 'Paragraph',
      type: 'paragraph',
      des: 'Paragraph',
      "default": 11,
      fontWeight: 400,
      lineHeight: '1.45'
    }, {
      title: (locale == null ? void 0 : locale.dropdownReference) || 'Blockquote',
      type: 'blockquote',
      des: 'Blockquote',
      "default": 11,
      fontWeight: 400,
      lineHeight: '1.45'
    }];
  }, [locale]);
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }
  }, [onChange]);
  var handleMenuChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }
  }, [onChange]);

  var getOverlay = function getOverlay() {
    return /*#__PURE__*/_createElement(TableStyleSet, {
      "data-testid": "fontSizeMaxSelect_overlay_" + testid
    }, options.map(function (option) {
      return /*#__PURE__*/_createElement(TableButton, {
        key: option.type,
        value: option.type,
        active: option.type === (value || defaultValue),
        className: classnames({
          active: option.type === (value || defaultValue)
        }),
        testid: option.type,
        onClick: function onClick() {
          if (option.type !== (value || defaultValue)) {
            handleMenuChange(option.type);
          }
        }
      }, /*#__PURE__*/_createElement(TitleWrap, {
        type: option.type,
        style: {
          fontSize: Math.min(Math.max(option["default"] * 0.75, minFontSize), maxtFontSize) + "pt",
          fontWeight: option.fontWeight,
          textOverflow: 'clip',
          maxWidth: '65px',
          lineHeight: '29px',
          height: '29px',
          overflow: 'hidden'
        }
      }, option.title), /*#__PURE__*/_createElement(DesWrap, null, /*#__PURE__*/_createElement(TextWrap, null, option.title === 'AaBbCcDdEe' ? option.des : ((locale == null ? void 0 : locale.dropdownDefaultFont) || 'Default font') + " " + (option.type === 'blockquote' ? '-' : option["default"]))));
    }));
  };

  var tabsStyle = {
    width: length,
    height: '100%'
  };

  if (!sizeComputedRef.current) {
    tabsStyle.transition = 'none';
  }

  return /*#__PURE__*/_createElement(DisableWrap, {
    className: "font-size-max-select-layout",
    disabled: disabled
  }, /*#__PURE__*/_createElement("div", {
    style: {
      position: 'relative',
      background: 'white',
      borderRadius: '4px'
    },
    onMouseEnter: function onMouseEnter() {
      return setShowArrowDown(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setShowArrowDown(false);
    },
    "data-testid": testid
  }, /*#__PURE__*/_createElement(GalleryWrap, {
    ref: selfRef
  }, /*#__PURE__*/_createElement(Tabs, {
    style: tabsStyle,
    onChange: handleChange,
    activeKey: value || defaultValue
  }, options.map(function (option) {
    return /*#__PURE__*/_createElement(TabPane, {
      tab: /*#__PURE__*/_createElement(FontSizeButton, {
        option: option,
        maxFontSize: maxtFontSize,
        minFontSize: minFontSize,
        value: value || defaultValue,
        defaultFontFamily: (locale == null ? void 0 : locale.dropdownDefaultFont) || 'Default font'
      }),
      key: option.type
    });
  })), /*#__PURE__*/_createElement(ContainerMenuDown, {
    "data-testid": "fontSizeMaxSelect_showDown_" + testid,
    style: showArrowDown ? {
      visibility: 'visible'
    } : {
      visibility: 'hidden'
    }
  }, /*#__PURE__*/_createElement(Popover, {
    content: getOverlay(),
    style: {
      backgroundColor: 'transparent',
      boxShadow: 'none',
      border: 'none'
    },
    onVisibleChange: function onVisibleChange(vi) {
      setOverlayVisible(vi);
    },
    placement: "bottom",
    visible: overlayVisible
  }, /*#__PURE__*/_createElement(IconWrapper, {
    onClick: function onClick() {
      setOverlayVisible(!overlayVisible);
    },
    active: showArrowDown || overlayVisible,
    left: length / 2,
    style: {
      transform: overlayVisible ? 'rotate(180deg)' : 'unset',
      transformOrigin: 'center center'
    }
  }, _ref))))));
});
//# sourceMappingURL=index.js.map