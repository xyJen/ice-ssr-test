import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import { IconTranslate } from "../icons";
import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { IconMenu, Menu } from "./Basics";

var _ref3 = /*#__PURE__*/_createElement(IconTranslate, null);

export var TranslationSelect = function TranslationSelect(props) {
  var onChange = props.onChange,
      testid = props.testid,
      menuItems = props.menuItems,
      restProps = _objectWithoutPropertiesLoose(props, ["onChange", "testid", "menuItems"]);

  var _React$useState = React.useState(false),
      overlayVisible = _React$useState[0],
      setOverlayVisible = _React$useState[1];

  var items = useMemo(function () {
    var options = menuItems.map(function (_ref) {
      var key = _ref.key,
          title = _ref.title;
      return {
        key: String(key),
        title: String(title),
        testid: "option-" + key
      };
    });
    return options;
  }, [menuItems]);
  var handleSelect = useCallback(function (_ref2) {
    var v = _ref2[0];
    onChange && onChange(v);
    setOverlayVisible(false);
  }, [onChange]);
  return /*#__PURE__*/_createElement(IconMenu, _extends({
    icon: _ref3,
    overlay: /*#__PURE__*/_createElement(Menu, {
      "data-testid": testid + "-options",
      items: items,
      onSelect: handleSelect
    }),
    overlayVisible: overlayVisible,
    onVisibleChange: setOverlayVisible,
    testid: testid
  }, restProps));
};
//# sourceMappingURL=TranslationSelect.js.map