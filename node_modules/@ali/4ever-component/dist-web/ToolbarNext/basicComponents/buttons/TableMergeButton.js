import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import { IconMergeCell, IconSplitCell } from "../icons";
import React, { useMemo, useCallback, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Menu, SplitButton } from "./Basics";

var _ref2 = /*#__PURE__*/_createElement(IconMergeCell, null);

var _ref3 = /*#__PURE__*/_createElement(IconSplitCell, null);

var _ref4 = /*#__PURE__*/_createElement(IconSplitCell, null);

var _ref5 = /*#__PURE__*/_createElement(IconMergeCell, null);

export var TableMergeButton = function TableMergeButton(props) {
  var value = props.value,
      onChange = props.onChange,
      onClick = props.onClick,
      icon = props.icon,
      options = props.options,
      active = props.active,
      rest = _objectWithoutPropertiesLoose(props, ["value", "onChange", "onClick", "icon", "options", "active"]);

  var _useState = useState(false),
      overlayVisible = _useState[0],
      setOverlayVisible = _useState[1];

  var handleSelect = useCallback(function (_ref) {
    var e = _ref[0];

    if (onChange) {
      onChange(e);
    }

    setOverlayVisible(false);
  }, [onChange]);
  var handleVisibleChange = useCallback(function (visible) {
    setOverlayVisible(visible);
  }, []);
  var handleClickLeft = useCallback(function () {
    if (onClick) {
      var newValue = value === 'merged' ? 'unmerged' : 'merged';
      onClick(newValue);
    }
  }, [onClick, value]);
  var items = useMemo(function () {
    return [{
      title: options.merged.title,
      value: 'merged',
      key: 'merged',
      selected: value === 'merged',
      prefix: options.merged.icon || _ref2,
      testid: 'option-merged'
    }, {
      title: options.unmerged.title,
      value: 'unmerged',
      disabled: value === 'unmerged',
      key: 'unmerged',
      prefix: options.unmerged.icon || _ref3,
      testid: 'option-unmerged'
    }];
  }, [options, value]);
  var renderTriggerIcon = useMemo(function () {
    if (icon) {
      return icon;
    }

    return value === 'merged' ? _ref4 : _ref5;
  }, [value, icon]);
  return /*#__PURE__*/_createElement(SplitButton, _extends({
    overlay: /*#__PURE__*/_createElement(Menu, {
      items: items,
      onSelect: handleSelect
    }),
    testid: "MergeCellButton",
    onClick: handleClickLeft,
    overlayVisible: overlayVisible,
    onVisibleChange: handleVisibleChange,
    icon: renderTriggerIcon,
    active: active || overlayVisible
  }, rest));
};
//# sourceMappingURL=TableMergeButton.js.map