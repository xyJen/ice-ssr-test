import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SplitButton, ColorPicker } from "./Basics";
import FontColorIcon from "./FontIcon";
import { keyToPreset, StopEvent, presetToKey } from "./utils";
import { useRecentColors } from "./hooks";
export var FontColorPicker = function FontColorPicker(props) {
  var autoColor = props.autoColor,
      onVisibleChange = props.onVisibleChange,
      currentPreset = props.currentPreset,
      color = props.color,
      onColorChange = props.onColorChange,
      onCurrentPresetChange = props.onCurrentPresetChange,
      disabled = props.disabled,
      icon = props.icon,
      defaultColor = props.defaultColor,
      testid = props.testid,
      rest = _objectWithoutPropertiesLoose(props, ["autoColor", "onVisibleChange", "currentPreset", "color", "onColorChange", "onCurrentPresetChange", "disabled", "icon", "defaultColor", "testid"]);

  var _React$useState = React.useState(false),
      isOverlayVisible = _React$useState[0],
      setOverlayVisible = _React$useState[1];

  var _React$useState2 = React.useState(color),
      currentColor = _React$useState2[0],
      setCurrentColor = _React$useState2[1];

  var _React$useState3 = React.useState(currentPreset),
      localPreset = _React$useState3[0],
      setLocalPreset = _React$useState3[1];

  var _useRecentColors = useRecentColors(),
      recentColors = _useRecentColors[0],
      addRecentColor = _useRecentColors[1];

  React.useEffect(function () {
    setLocalPreset(currentPreset);
  }, [currentPreset]);

  var _ColorPicker$PRESETS$ = ColorPicker.PRESETS.ART.colors,
      line0 = _ColorPicker$PRESETS$[0],
      lines = _ColorPicker$PRESETS$.slice(1);

  var handleColorChange = React.useCallback(function (color, options) {
    if (color) {
      if (!options.intermediate) {
        setCurrentColor(color);
        onColorChange(color);
        addRecentColor(color);
      }

      if (!options.fromSketch) {
        setOverlayVisible(false);
      }
    }
  }, [onColorChange, recentColors]);
  var handleSelect = React.useCallback(function (color) {
    setCurrentColor(color);
    onColorChange(color);
    setOverlayVisible(false);
  }, [onColorChange]);
  var presets = useMemo(function () {
    return [ColorPicker.PRESETS.DEFAULT, {
      key: ColorPicker.PRESETS.ART.key,
      title: ColorPicker.PRESETS.ART.title,
      colors: [line0, /*#__PURE__*/_createElement(ColorPicker.PresetGradient, {
        value: currentColor || '',
        onSelect: handleSelect
      })].concat(lines)
    }];
  }, [currentColor]);
  var curPreset = presetToKey(localPreset);
  var handleCurrentPresetChange = React.useCallback(function (mode) {
    var preset = keyToPreset(mode);
    onCurrentPresetChange == null ? void 0 : onCurrentPresetChange(preset);
    setLocalPreset(preset);
  }, [onCurrentPresetChange]);
  var handleOverlayVisible = React.useCallback(function (v) {
    onVisibleChange && onVisibleChange(v);
    setOverlayVisible(v);
  }, [onVisibleChange]);
  var handleLeftClick = React.useCallback(function () {
    onColorChange(currentColor);
  }, [onColorChange, currentColor]);

  var _ref = /*#__PURE__*/_createElement(FontColorIcon, {
    color: currentColor
  });

  var formatIcon = useMemo(function () {
    if (icon) {
      return icon;
    }

    return _ref;
  }, [currentColor, disabled, icon]);
  return /*#__PURE__*/_createElement(SplitButton, _extends({
    onClick: handleLeftClick,
    overlayVisible: isOverlayVisible,
    onVisibleChange: handleOverlayVisible,
    icon: formatIcon,
    disabled: disabled,
    overlay: /*#__PURE__*/_createElement(ColorPicker, {
      onClick: StopEvent,
      color: currentColor,
      recentColors: recentColors,
      onColorChange: handleColorChange,
      currentPreset: curPreset,
      onCurrentPresetChange: handleCurrentPresetChange,
      defaultColor: defaultColor,
      autoColor: autoColor,
      presets: presets,
      advance: true,
      "data-testid": testid ? testid + '-color-picker' : 'color-picker'
    }),
    autoClose: false,
    testid: testid
  }, rest));
};
//# sourceMappingURL=FontColorPicker.js.map