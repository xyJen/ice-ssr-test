import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import { IconLineHeight } from "../icons";
import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { IconMenu, Menu } from "./Basics";
export var LINE_HEIGHT_DEFAULT_VALUES = [1, 1.15, 1.5, 2, 2.5, 3];
var CUSTOMIZE_KEY = 'CUSTOMIZE_KEY';

var _ref2 = /*#__PURE__*/_createElement(IconLineHeight, null);

export var LineHeightSelect = function LineHeightSelect(props) {
  var _props$lineHeightValu = props.lineHeightValues,
      lineHeightValues = _props$lineHeightValu === void 0 ? LINE_HEIGHT_DEFAULT_VALUES : _props$lineHeightValu,
      disabled = props.disabled,
      onChange = props.onChange,
      onCustomize = props.onCustomize,
      title = props.title,
      value = props.value,
      customButtonTitle = props.customButtonTitle,
      testid = props.testid,
      restProps = _objectWithoutPropertiesLoose(props, ["lineHeightValues", "disabled", "onChange", "onCustomize", "title", "value", "customButtonTitle", "testid"]);

  var _React$useState = React.useState(false),
      overlayVisible = _React$useState[0],
      setOverlayVisible = _React$useState[1];

  var items = useMemo(function () {
    var options = lineHeightValues.map(function (key) {
      return {
        key: String(key),
        selected: value === key,
        title: String(key),
        testid: "option-" + key
      };
    });

    if (onCustomize) {
      options.push('divider');
      options.push({
        key: CUSTOMIZE_KEY,
        title: customButtonTitle || ''
      });
    }

    return options;
  }, [value, lineHeightValues, customButtonTitle, onCustomize]);
  var handleSelect = useCallback(function (_ref) {
    var v = _ref[0];

    try {
      if (v === CUSTOMIZE_KEY && onCustomize) {
        onCustomize();
      } else {
        var data = Number(v);

        if (!Number.isNaN(data) && onChange) {
          onChange(data);
        }
      }

      setOverlayVisible(false);
    } catch (_unused) {}
  }, [onChange, onCustomize]);
  return /*#__PURE__*/_createElement(IconMenu, _extends({
    icon: _ref2,
    overlay: /*#__PURE__*/_createElement(Menu, {
      "data-testid": testid + "-options",
      items: items,
      onSelect: handleSelect
    }),
    overlayVisible: overlayVisible,
    onVisibleChange: setOverlayVisible,
    testid: testid
  }, restProps));
};
//# sourceMappingURL=LineHeightSelect.js.map