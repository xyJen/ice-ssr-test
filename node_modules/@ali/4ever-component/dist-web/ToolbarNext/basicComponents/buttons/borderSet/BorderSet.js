import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useCallback, useMemo, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { IconTableBorder, IconBorderBottom, IconBorderInner, IconBorderInnerHorizon, IconBorderInnerVertical, IconBorderLeft, IconBorderNone, IconBorderOuter, IconBorderRight, IconBorderTop } from "../../icons";
import { BorderSetWrapper } from "./styled";
import { BorderPicker, SplitButton } from "../Basics";
var DEFAULT_BORDER = {
  layout: 'all',
  color: '#000000',
  style: 'Thin'
};
var DEFAULT_PRESET = [{
  key: 'Thin',
  style: {
    width: 1,
    units: [1]
  }
}, {
  key: 'Medium',
  style: {
    width: 2,
    units: [1]
  }
}, {
  key: 'Thick',
  style: {
    width: 3,
    units: [1]
  }
}, {
  key: 'Dashed',
  style: {
    width: 1,
    units: [3, 2]
  }
}, {
  key: 'MediumDashed',
  style: {
    width: 2,
    units: [9, 3]
  }
}];
var ICON_DEFAULT_COLOR = 'rgba(58, 60, 63, 1)';

var renderShowIcon = function renderShowIcon(innerBorderType, color) {
  switch (innerBorderType) {
    case 'outer':
      return /*#__PURE__*/_createElement(IconBorderOuter, {
        color: color
      });

    case 'inner':
      return /*#__PURE__*/_createElement(IconBorderInner, {
        color: color
      });

    case 'all':
      return /*#__PURE__*/_createElement(IconTableBorder, {
        color: color
      });

    case 'left':
      return /*#__PURE__*/_createElement(IconBorderLeft, {
        color: color
      });

    case 'right':
      return /*#__PURE__*/_createElement(IconBorderRight, {
        color: color
      });

    case 'top':
      return /*#__PURE__*/_createElement(IconBorderTop, {
        color: color
      });

    case 'bottom':
      return /*#__PURE__*/_createElement(IconBorderBottom, {
        color: color
      });

    case 'none':
      return /*#__PURE__*/_createElement(IconBorderNone, {
        color: color
      });

    case 'horizon':
      return /*#__PURE__*/_createElement(IconBorderInnerHorizon, {
        color: color
      });

    case 'vertical':
      return /*#__PURE__*/_createElement(IconBorderInnerVertical, {
        color: color
      });

    default:
      return /*#__PURE__*/_createElement(IconBorderNone, {
        color: color
      });
  }
};

var stopEvent = function stopEvent(e) {
  return e.stopPropagation();
};

export var BorderSet = function BorderSet(props) {
  var onChange = props.onChange,
      onLeftClick = props.onLeftClick,
      rest = _objectWithoutPropertiesLoose(props, ["onChange", "onLeftClick"]);

  var _useState = useState(DEFAULT_BORDER),
      border = _useState[0],
      setBorder = _useState[1];

  var pathColors = useMemo(function () {
    return border.layout === 'none' ? undefined : border.color || ICON_DEFAULT_COLOR;
  }, [border]);
  var handleBorderChange = useCallback(function (newBorder) {
    setBorder(newBorder);
    onChange == null ? void 0 : onChange(newBorder);
  }, [onChange]);
  var handleClickLeft = useCallback(function () {
    onLeftClick == null ? void 0 : onLeftClick(border);
  }, [border, onLeftClick]);
  return /*#__PURE__*/_createElement(SplitButton, _extends({
    testid: 'BorderSet',
    overlay: /*#__PURE__*/_createElement(BorderSetWrapper, null, /*#__PURE__*/_createElement(BorderPicker, {
      border: border,
      onBorderChange: handleBorderChange,
      preset: DEFAULT_PRESET
    })),
    icon: renderShowIcon(border.layout, pathColors),
    onClick: handleClickLeft // style={splitButtonStyle}

  }, rest));
};
//# sourceMappingURL=BorderSet.js.map