{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/buttons/TableMergeButton.tsx"],"names":["IconMergeCell","IconSplitCell","React","useMemo","useCallback","useState","Menu","SplitButton","TableMergeButton","props","value","onChange","onClick","icon","options","active","rest","overlayVisible","setOverlayVisible","handleSelect","e","handleVisibleChange","visible","handleClickLeft","newValue","items","title","merged","key","selected","prefix","testid","unmerged","disabled","renderTriggerIcon"],"mappings":"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","sourcesContent":["import { IconMergeCell, IconSplitCell } from '../icons';\nimport React, { useMemo, useCallback, useState } from 'react';\n\nimport { Menu, SplitButton } from './Basics';\n\nexport type CellMergeStatus = 'unmerged' | 'merged';\n\ninterface ISelectOption {\n  title: string;\n  key: string;\n  value: CellMergeStatus;\n  prefix: React.ReactElement;\n  disabled?: boolean;\n  selected?: boolean;\n}\n\nexport interface ITableMergeButtonProps extends\n  Pick<Partial<React.ComponentProps<typeof SplitButton>>, 'onVisibleChange' | 'title' | 'tooltip' | 'icon' | 'disabled' | 'testid' | 'role' | 'active'> {\n  onChange?: (item: CellMergeStatus) => void;\n  onClick?: (item: CellMergeStatus) => void;\n  value: CellMergeStatus,\n  options: Record<CellMergeStatus, { title: string, icon?: React.ReactElement }>;\n}\n\nexport const TableMergeButton: React.FC<ITableMergeButtonProps> = (props) => {\n  const {\n    value,\n    onChange,\n    onClick,\n    icon,\n    options,\n    active,\n    ...rest\n  } = props;\n\n\n  const [overlayVisible, setOverlayVisible] = useState(false);\n\n  const handleSelect = useCallback(\n    ([e]) => {\n      if (onChange) {\n        onChange(e);\n      }\n      setOverlayVisible(false);\n    },\n    [onChange],\n  );\n\n  const handleVisibleChange = useCallback((visible: boolean) => {\n    setOverlayVisible(visible);\n  }, []);\n\n  const handleClickLeft = useCallback(() => {\n    if (onClick) {\n      const newValue = value === 'merged' ? 'unmerged' : 'merged';\n      onClick(newValue!);\n    }\n  }, [onClick, value]);\n\n  const items: ISelectOption[] = useMemo(\n    () => [\n      {\n        title: options.merged.title,\n        value: 'merged',\n        key: 'merged',\n        selected: value === 'merged',\n        prefix: options.merged.icon || <IconMergeCell />,\n        testid: 'option-merged',\n      },\n      {\n        title: options.unmerged.title,\n        value: 'unmerged',\n        disabled: value === 'unmerged',\n        key: 'unmerged',\n        prefix: options.unmerged.icon || <IconSplitCell />,\n        testid: 'option-unmerged',\n      },\n    ],\n    [options, value]\n  );\n\n  const renderTriggerIcon = useMemo(\n    () => {\n      if (icon) {\n        return icon;\n      }\n      return value === 'merged' ? <IconSplitCell /> : <IconMergeCell />;\n    }, [value, icon],\n  );\n\n  return (\n    <SplitButton\n      overlay={(\n        <Menu\n          items={items}\n          onSelect={handleSelect} />\n      )}\n      testid='MergeCellButton'\n      onClick={handleClickLeft}\n      overlayVisible={overlayVisible}\n      onVisibleChange={handleVisibleChange}\n      icon={renderTriggerIcon}\n      active={active || overlayVisible}\n      {...rest}\n    />\n  );\n};\n\n\n"],"file":"TableMergeButton.js"}