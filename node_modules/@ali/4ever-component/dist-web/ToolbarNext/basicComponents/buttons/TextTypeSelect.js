import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { TextSelect, TextTypeSingleLineDefaultWidth, SelectOption } from "./Basics";
export var Item = /*#__PURE__*/styled.span(["font-size:", ";font-weight:", ";line-height:1.45;"], function (p) {
  return p.fontSize;
}, function (p) {
  return p.fontWeight;
});
var TitleWrapper = /*#__PURE__*/styled.div(["overflow:hidden;text-overflow:ellipsis;overflow-wrap:normal;white-space:nowrap;"]);
var optionsMap = {
  paragraph: function paragraph(title) {
    return /*#__PURE__*/_createElement(Item, {
      fontSize: "14px",
      fontWeight: 400
    }, title);
  },
  'heading-1': function heading1(title) {
    return /*#__PURE__*/_createElement(Item, {
      fontSize: "20pt",
      fontWeight: 500
    }, title);
  },
  'heading-2': function heading2(title) {
    return /*#__PURE__*/_createElement(Item, {
      fontSize: "16pt",
      fontWeight: 500
    }, title);
  },
  'heading-3': function heading3(title) {
    return /*#__PURE__*/_createElement(Item, {
      fontSize: "14pt",
      fontWeight: 500
    }, title);
  },
  'heading-4': function heading4(title) {
    return /*#__PURE__*/_createElement(Item, {
      fontSize: "12pt",
      fontWeight: 500
    }, title);
  }
};
export var TextTypeSelect = function TextTypeSelect(props) {
  var onChange = props.onChange,
      disabled = props.disabled,
      testid = props.testid,
      value = props.value,
      role = props.role,
      options = props.options,
      tooltip = props.tooltip;
  var handleChange = useCallback(function (v) {
    if (onChange) {
      onChange(v);
    }
  }, [onChange]);
  return /*#__PURE__*/_createElement(TextSelect, {
    value: value,
    disabled: disabled,
    renderOption: function renderOption(_ref) {
      var _optionsMap$key;

      var key = _ref.key;

      var _ref2 = options.find(function (op) {
        return op.key === key;
      }) || {},
          title = _ref2.title;

      return /*#__PURE__*/_createElement(SelectOption, null, ((_optionsMap$key = optionsMap[key]) == null ? void 0 : _optionsMap$key.call(optionsMap, title)) || title);
    },
    renderValue: function renderValue() {
      return /*#__PURE__*/_createElement(TitleWrapper, null, tooltip.title);
    },
    testid: testid || 'TextTypeSelect',
    role: role,
    width: TextTypeSingleLineDefaultWidth,
    options: options,
    onChange: handleChange,
    tooltip: tooltip
  });
};
//# sourceMappingURL=TextTypeSelect.js.map