{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/buttons/FontColorPicker.tsx"],"names":["React","useMemo","SplitButton","ColorPicker","FontColorIcon","keyToPreset","StopEvent","presetToKey","useRecentColors","FontColorPicker","props","autoColor","onVisibleChange","currentPreset","color","onColorChange","onCurrentPresetChange","disabled","icon","defaultColor","testid","rest","useState","isOverlayVisible","setOverlayVisible","currentColor","setCurrentColor","localPreset","setLocalPreset","recentColors","addRecentColor","useEffect","PRESETS","ART","colors","line0","lines","handleColorChange","useCallback","options","intermediate","fromSketch","handleSelect","presets","DEFAULT","key","title","curPreset","handleCurrentPresetChange","mode","preset","handleOverlayVisible","v","handleLeftClick","formatIcon"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { SplitButton, ColorPicker } from './Basics';\nimport FontColorIcon from './FontIcon';\nimport { keyToPreset, StopEvent, presetToKey } from './utils';\nimport { useRecentColors } from './hooks';\n\nexport interface IFontColorPickerProps extends\n  Pick<Partial<React.ComponentProps<typeof SplitButton>>, 'onVisibleChange' | 'title' | 'tooltip' | 'icon' | 'disabled' | 'testid' | 'role'>,\n  Pick<React.ComponentProps<typeof ColorPicker>, 'autoColor' | 'defaultColor'> {\n  onColorChange: (color: string) => void;\n  currentPreset: 'normal' | 'art';\n  onCurrentPresetChange?: (mode: 'normal' | 'art') => void;\n  color: string;\n}\n\nexport const FontColorPicker = (props: IFontColorPickerProps) => {\n  const {\n    autoColor,\n    onVisibleChange,\n    currentPreset,\n    color,\n    onColorChange,\n    onCurrentPresetChange,\n    disabled,\n    icon,\n    defaultColor,\n    testid,\n    ...rest\n  } = props;\n  const [isOverlayVisible, setOverlayVisible] = React.useState(false);\n  const [currentColor, setCurrentColor] = React.useState(color);\n  const [localPreset, setLocalPreset] = React.useState(currentPreset);\n\n  const [recentColors, addRecentColor] = useRecentColors();\n\n  React.useEffect(() => {\n    setLocalPreset(currentPreset);\n  }, [currentPreset]);\n\n  const [line0, ...lines] = ColorPicker.PRESETS.ART.colors;\n\n  const handleColorChange = React.useCallback((color, options) => {\n    if (color) {\n      if (!options.intermediate) {\n        setCurrentColor(color);\n        onColorChange(color);\n        addRecentColor(color);\n      }\n\n      if (!options.fromSketch) {\n        setOverlayVisible(false);\n      }\n    }\n  }, [onColorChange, recentColors]);\n\n  const handleSelect = React.useCallback((color: string) => {\n    setCurrentColor(color);\n    onColorChange(color);\n    setOverlayVisible(false);\n  }, [onColorChange]);\n\n  const presets = useMemo(() => {\n    return [\n      ColorPicker.PRESETS.DEFAULT\n      ,\n      {\n        key: ColorPicker.PRESETS.ART.key,\n        title: ColorPicker.PRESETS.ART.title,\n        colors: [\n          line0,\n          <ColorPicker.PresetGradient value={currentColor || ''} onSelect={handleSelect} />,\n          ...lines\n        ],\n      }\n    ]\n  }, [currentColor]);\n\n  const curPreset = presetToKey(localPreset);\n\n  const handleCurrentPresetChange = React.useCallback((mode) => {\n\n    const preset = keyToPreset(mode);\n    onCurrentPresetChange?.(preset);\n    setLocalPreset(preset);\n\n  }, [onCurrentPresetChange]);\n\n  const handleOverlayVisible = React.useCallback((v: boolean) => {\n    onVisibleChange && onVisibleChange(v);\n    setOverlayVisible(v);\n  }, [onVisibleChange]);\n\n  const handleLeftClick = React.useCallback(() => {\n    onColorChange(currentColor);\n  }, [onColorChange, currentColor]);\n\n  const formatIcon = useMemo(() => {\n    if (icon) {\n      return icon;\n    }\n    return (\n      <FontColorIcon color={currentColor} />\n    );\n  }, [currentColor, disabled, icon])\n\n  return (\n    <SplitButton\n      onClick={handleLeftClick}\n      overlayVisible={isOverlayVisible}\n      onVisibleChange={handleOverlayVisible}\n      icon={formatIcon}\n      disabled={disabled}\n      overlay={\n        <ColorPicker\n          onClick={StopEvent}\n          color={currentColor}\n          recentColors={recentColors}\n          onColorChange={handleColorChange}\n          currentPreset={curPreset}\n          onCurrentPresetChange={handleCurrentPresetChange}\n          defaultColor={defaultColor}\n          autoColor={autoColor}\n          presets={presets}\n          advance\n          data-testid={testid ? testid + '-color-picker' : 'color-picker'}\n        />\n      }\n      autoClose={false}\n      testid={testid}\n      {...rest}\n    />\n  )\n}\n"],"file":"FontColorPicker.js"}