{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/overlays/colorPick.tsx"],"names":["React","TBIconMenu","ColorPicker","BaseColorPicker","props","autoColor","onChangeVisibleProp","onVisibleChange","overlayVisibleProp","overlayVisible","currentPreset","color","onColorChange","onCurrentPresetChange","recentColors","title","useSubColor","useColor","icon","getContainer","testid","role","useState","overlayVisibleState","changeOverlayVisibleState","currentColor","setCurrentColor","handleOverlayVisible","useCallback","v","undefined","handleColorChange","options","intermediate","iconWithColor","cloneElement","subColor","isOverlayVisible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TBIconMenu, ColorPicker } from '@ali/we-design-next';\n\ntype IColorPickerProps = React.ComponentProps<typeof ColorPicker>;\ntype ITBIconMenuProps = React.ComponentProps<typeof TBIconMenu>;\n\nexport interface IBaseColorPickerProps extends Pick<ITBIconMenuProps, 'onVisibleChange' | 'title' | 'icon' | 'overlayVisible'>, Pick<IColorPickerProps, 'autoColor' | 'onCurrentPresetChange' | 'currentPreset' | 'recentColors'> {\n  onColorChange: (color: string) => void;\n  color: string;\n  // 需要改变Icon subColor 颜色\n  useSubColor?: boolean;\n  // 需要改变Icon color 颜色\n  useColor?: boolean;\n  getContainer?: () => HTMLElement;\n  testid?: string;\n  role?: string;\n}\n\nexport const BaseColorPicker: React.FC<IBaseColorPickerProps> = (props) => {\n  const { autoColor, onVisibleChange: onChangeVisibleProp, overlayVisible: overlayVisibleProp, currentPreset, color, onColorChange, onCurrentPresetChange, recentColors, title, useSubColor, useColor, icon, getContainer, testid, role } = props;\n  const [overlayVisibleState, changeOverlayVisibleState] = React.useState(false);\n  const [currentColor, setCurrentColor] = React.useState(color);\n\n  const handleOverlayVisible = React.useCallback((v: boolean) => {\n    if (overlayVisibleProp === undefined) {\n      changeOverlayVisibleState(v);\n    }\n    onChangeVisibleProp && onChangeVisibleProp(v);\n  }, [changeOverlayVisibleState]);\n\n  const handleColorChange: IColorPickerProps['onColorChange'] = React.useCallback((color, options) => {\n    if (color && !options.intermediate) {\n      setCurrentColor(color);\n      onColorChange(color);\n      handleOverlayVisible(false);\n    }\n  }, [handleOverlayVisible]);\n\n  const iconWithColor = React.cloneElement(icon, {\n    subColor: useSubColor ? currentColor : undefined,\n    color: useColor ? currentColor : undefined,\n  });\n\n  const isOverlayVisible = overlayVisibleProp !== undefined ? overlayVisibleProp : overlayVisibleState;\n\n  return (\n    <TBIconMenu\n      overlayVisible={isOverlayVisible}\n      onVisibleChange={handleOverlayVisible}\n      icon={iconWithColor}\n      title={title}\n      tooltip={title}\n      overlay={\n        <ColorPicker\n          color={currentColor}\n          onColorChange={handleColorChange}\n          recentColors={recentColors}\n          currentPreset={currentPreset}\n          onCurrentPresetChange={onCurrentPresetChange}\n          autoColor={autoColor}\n          advance\n        />\n      }\n      autoClose={false}\n      getContainer={getContainer}\n      testid={testid}\n      role={role}\n    />\n  )\n}"],"file":"colorPick.js"}