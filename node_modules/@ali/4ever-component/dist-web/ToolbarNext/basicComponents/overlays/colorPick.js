import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TBIconMenu, ColorPicker } from '@ali/we-design-next';
export var BaseColorPicker = function BaseColorPicker(props) {
  var autoColor = props.autoColor,
      onChangeVisibleProp = props.onVisibleChange,
      overlayVisibleProp = props.overlayVisible,
      currentPreset = props.currentPreset,
      color = props.color,
      onColorChange = props.onColorChange,
      onCurrentPresetChange = props.onCurrentPresetChange,
      recentColors = props.recentColors,
      title = props.title,
      useSubColor = props.useSubColor,
      useColor = props.useColor,
      icon = props.icon,
      getContainer = props.getContainer,
      testid = props.testid,
      role = props.role;

  var _React$useState = React.useState(false),
      overlayVisibleState = _React$useState[0],
      changeOverlayVisibleState = _React$useState[1];

  var _React$useState2 = React.useState(color),
      currentColor = _React$useState2[0],
      setCurrentColor = _React$useState2[1];

  var handleOverlayVisible = React.useCallback(function (v) {
    if (overlayVisibleProp === undefined) {
      changeOverlayVisibleState(v);
    }

    onChangeVisibleProp && onChangeVisibleProp(v);
  }, [changeOverlayVisibleState]);
  var handleColorChange = React.useCallback(function (color, options) {
    if (color && !options.intermediate) {
      setCurrentColor(color);
      onColorChange(color);
      handleOverlayVisible(false);
    }
  }, [handleOverlayVisible]);
  var iconWithColor = /*#__PURE__*/React.cloneElement(icon, {
    subColor: useSubColor ? currentColor : undefined,
    color: useColor ? currentColor : undefined
  });
  var isOverlayVisible = overlayVisibleProp !== undefined ? overlayVisibleProp : overlayVisibleState;
  return /*#__PURE__*/_createElement(TBIconMenu, {
    overlayVisible: isOverlayVisible,
    onVisibleChange: handleOverlayVisible,
    icon: iconWithColor,
    title: title,
    tooltip: title,
    overlay: /*#__PURE__*/_createElement(ColorPicker, {
      color: currentColor,
      onColorChange: handleColorChange,
      recentColors: recentColors,
      currentPreset: currentPreset,
      onCurrentPresetChange: onCurrentPresetChange,
      autoColor: autoColor,
      advance: true
    }),
    autoClose: false,
    getContainer: getContainer,
    testid: testid,
    role: role
  });
};
//# sourceMappingURL=colorPick.js.map