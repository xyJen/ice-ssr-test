import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { ToolbarLayout } from '@ali/we-design-next';
import { HeaderToolbarMode } from "./interface";
import { areArraysContentEqual, areArraysIntersected } from "./utils";
import { convertSingleLayout, convertDoubleLayout } from "./layoutConverter";
var ToolbarWrapper = /*#__PURE__*/styled.div(["position:relative;"]);

function convertToolbarMode(mode) {
  if (mode === HeaderToolbarMode["double"]) {
    return 'doubleLine';
  }

  return 'singleLine';
}

function convertBackToolbarMode(mode) {
  if (mode === 'doubleLine') {
    return HeaderToolbarMode["double"];
  }

  return HeaderToolbarMode.single;
}

var disabledStyle = {
  opacity: 0.35,
  pointerEvents: 'none'
};
export var BasicToolbar = function BasicToolbar(props) {
  var controller = props.controller,
      plugins = props.plugins,
      singleLayout = props.singleLayout,
      doubleLayout = props.doubleLayout,
      mode = props.mode,
      _props$disableTargets = props.disableTargets,
      disableTargets = _props$disableTargets === void 0 ? [] : _props$disableTargets,
      _props$hideTargets = props.hideTargets,
      hideTargets = _props$hideTargets === void 0 ? [] : _props$hideTargets,
      _props$customButtons = props.customButtons,
      customButtons = _props$customButtons === void 0 ? {} : _props$customButtons,
      onSwitchModeClick = props.onSwitchModeClick,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "plugins", "singleLayout", "doubleLayout", "mode", "disableTargets", "hideTargets", "customButtons", "onSwitchModeClick"]);

  var value = controller.value;
  var selection = value.selection;
  var pluginsArray = (plugins == null ? void 0 : plugins.array) || [];

  var _React$useState = React.useState([]),
      currentTarget = _React$useState[0],
      setCurrentTargets = _React$useState[1];
  /**
   * 从插件查询哪个插件被选中（暂不支持多个插件同时识别）
   * 通过调用插件 getTarget 实现
   */


  var targets = React.useMemo(function () {
    var results = [];

    for (var i = 0; i < pluginsArray.length; i += 1) {
      var _plugin$toolbar;

      var plugin = pluginsArray[i];
      var getTarget = (_plugin$toolbar = plugin.toolbar) == null ? void 0 : _plugin$toolbar.getTarget;

      if (getTarget && typeof getTarget === 'function') {
        var tgt = getTarget(controller);

        if (tgt && !results.includes(tgt)) {
          results.push(tgt);
        }
      }
    }

    return results;
  }, [pluginsArray, selection]);
  React.useEffect(function () {
    if (currentTarget !== targets && !areArraysContentEqual(currentTarget, targets)) {
      setCurrentTargets(targets);
    }
  }, [currentTarget, targets]);
  var singleLineToolbar = singleLayout && convertSingleLayout(singleLayout, {
    controller: controller,
    plugins: plugins,
    targets: currentTarget,
    customButtons: customButtons
  });
  var doubleLineToolbar = doubleLayout && convertDoubleLayout(doubleLayout, {
    controller: controller,
    plugins: plugins,
    targets: currentTarget,
    customButtons: customButtons
  });

  if (areArraysIntersected(currentTarget, hideTargets)) {
    return null;
  }

  var shouldDisable = areArraysIntersected(currentTarget, disableTargets);
  var style = React.useMemo(function () {
    if (shouldDisable) {
      return disabledStyle;
    }

    return {};
  }, [shouldDisable]);
  var handleMouseDown = React.useCallback(function (ev) {
    var _ev$target, _ev$target$tagName;

    var activeElement = window.document.activeElement; // 对于有自定义输入域的不可编辑对象，不阻止其失焦行为

    if (activeElement && activeElement.closest('[data-cangjie-not-editable]')) {
      return;
    }

    if (((_ev$target = ev.target) == null ? void 0 : (_ev$target$tagName = _ev$target.tagName) == null ? void 0 : _ev$target$tagName.toLocaleLowerCase()) !== 'input') {
      // 放过input，以便输入地方可以正常输入
      ev.preventDefault && ev.preventDefault(); // 允许工具栏子节点上元素点击冒泡，避免下拉菜单无法收起
      // ev.stopPropagation && ev.stopPropagation();
    }
  }, []);
  var handleModeChange = React.useCallback(function (modeType) {
    if (onSwitchModeClick) {
      var type = convertBackToolbarMode(modeType);
      onSwitchModeClick(type);
    }
  }, [onSwitchModeClick]);
  return /*#__PURE__*/_createElement(ToolbarWrapper, {
    style: style,
    onMouseDown: handleMouseDown,
    "data-role": 'toolbar',
    className: "bi-toolbar " + (mode === HeaderToolbarMode["double"] ? 'double' : 'single')
  }, /*#__PURE__*/_createElement(ToolbarLayout, _extends({
    mode: convertToolbarMode(mode),
    singleLineToolbar: singleLineToolbar,
    doubleLineToolbar: doubleLineToolbar,
    onModeChange: handleModeChange
  }, rest)));
};
//# sourceMappingURL=BasicToolbar.js.map