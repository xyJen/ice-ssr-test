import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { IconButton, ItemSlot, SlotType } from "./basicComponents";

function isValidItem(item) {
  var displayName;

  if (String(item.type.displayName) === 'toolbarSlot') {
    displayName = item.props.display;
  } else {
    displayName = String(item.type.displayName);
  }

  switch (displayName) {
    case SlotType.iconButton:
    case SlotType.iconMenu:
    case SlotType.iconSelect:
    case SlotType.splitButton:
    case SlotType.textSelect:
    case SlotType.custom:
      return true;

    default:
      return false;
  }
}

export function buildToolbarItem(plugins, controller, buttonName, customButtons, extraProps) {
  var customButton = customButtons == null ? void 0 : customButtons[buttonName]; // 自定义按钮优先

  if (customButton && typeof customButton === 'function') {
    var CustomComponent = customButton({
      extraProps: extraProps
    }, controller);
    return renderComponent(controller, extraProps, CustomComponent);
  }

  var _buttonName$split = buttonName.split('.'),
      pluginName = _buttonName$split[0];

  var plugin = plugins == null ? void 0 : plugins.hash[pluginName];

  if (!plugin) {
    return null;
  }

  var Component = plugin == null ? void 0 : plugin.renderToolbar == null ? void 0 : plugin.renderToolbar({
    buttonName: buttonName,
    extraProps: extraProps
  }, controller);
  return renderComponent(controller, extraProps, Component);
}

function renderComponent(controller, extraProps, Component) {
  if (!Component) {
    return null;
  }

  if ( /*#__PURE__*/React.isValidElement(Component)) {
    if (!isValidItem(Component)) {
      throw new Error("Component with key:" + extraProps.key + " must wrapped by ItemSlot");
    }

    return Component;
  }

  return /*#__PURE__*/_createElement(ItemSlot, {
    display: SlotType.iconButton
  }, /*#__PURE__*/_createElement(BasicButton, _extends({}, Component, extraProps, {
    controller: controller
  })));
}

var BasicButton = function BasicButton(props) {
  var icon = props.icon,
      onClick = props.onClick,
      controller = props.controller,
      rest = _objectWithoutPropertiesLoose(props, ["icon", "onClick", "controller"]);

  var handleClick = React.useCallback(function () {
    if (onClick && typeof onClick === 'function') {
      onClick(controller);
    }
  }, [onClick, controller]);
  return /*#__PURE__*/_createElement(IconButton, _extends({}, rest, {
    icon: icon,
    onClick: handleClick
  }));
};
//# sourceMappingURL=buildToolbarItem.js.map