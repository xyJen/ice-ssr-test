/// <reference types="react" />
/**
 * bi内置的菜单栏组件
 * 菜单栏呈横向排布，MenuBar 是菜单栏入口，Menu是嵌套的菜单
 * **********************************************
 * 数据结构：
 * <MenuBar menus=[{
 *  title: '文档',
 *  children: (<Menu menus={[{
 *    type: TYPE_MENU_ITEM,
 *    title: '文档菜单项1'
 *  }]} />)
 * }, {
 *  title: '插入'
 *  children: (<Menu menus={[{
 *    type: TYPE_SUB_MENU,
 *    title: '文件',
 *    menus: [{
 *      type: TYPE_MENU_ITEM,
 *      title: '本地文件',
 *    }, {
 *      type: TYPE_MENU_ITEM,
 *      title: '在线文件',
 *    }]
 *  }]} />)
 * }] />
 * **********************************************
 * 效果：
 * |-         文档         |         插入          -|
 *            |- 文档菜单项1 - |      |- 文件 - |
 *                                     |- 本地文件 -|
 *                                     |- 在线文件 -|
 */
import { IMenuItemProps, ISubMenuProps, IInlineMenuItemProps } from '@ali/we-design';
import { Controller } from '@ali/4ever-cangjie';
import { MatchItemResult } from '@ali/4ever-utils';
import { Plugins } from '../PluginsContext';
/**
 * 菜单组（title + 支持的菜单类型）
 */
export declare const TYPE_GROUP: unique symbol;
/**
 * 子菜单（可以嵌套任意支持的菜单类型）
 */
export declare const TYPE_SUB_MENU: unique symbol;
/**
 * 菜单项（最小的菜单粒度）
 */
export declare const TYPE_MENU_ITEM: unique symbol;
/**
 * 行内菜单
 */
export declare const TYPE_INLINE_MENU_GROUP: unique symbol;
/**
 * 行内菜单分组
 */
export declare const TYPE_INLINE_MENU_WRAPPER: unique symbol;
/**
 * 菜单横向排列的按钮组件
 */
export declare const TYPE_INLINE_MENU_ITEM: unique symbol;
/**
 * 仅在 query 场景显示的菜单按钮组件
 */
export declare const TYPE_QUERY_ONLY_INLINE_MENU_ITEM: unique symbol;
/**
 * 支持的菜单类型
 */
export declare type MENU_ITEM_TYPE = MenuItemProps | SubMenuProps | MenuGroupProps | InlineMenuGroupProps | InlineMenuItemProps | QueryOnlyInlineMenuItemProps | InlineMenuWrapperProps;
/**
 * 传给menu组件data的菜单类型数组
 */
export declare type TYPE_MENU_DATA = MENU_ITEM_TYPE[];
/**
 * MenuBar组件
 */
export interface MenuBarProps {
    /**
     * MenuBar 接受的菜单配置
     */
    menus: MenuBarItemProps[];
    /**
     * 样式
     */
    style?: React.CSSProperties;
    /**
     * 点击菜单项的钩子
     */
    onClick?: (menuKey: string, e: React.MouseEvent<HTMLElement>) => void;
}
export interface MenuBarItemProps {
    /**
     * 菜单标题
     */
    title: React.ReactNode;
    /**
     * 组件，一般是传入 Menu 组件
     */
    children: React.ReactElement;
    /**
     * 测试用id
     */
    testid?: string;
    role?: string;
}
/**
 * MenuItem props
 */
export interface MenuItemProps extends IMenuItemProps {
    type: typeof TYPE_MENU_ITEM;
    /**
     * 菜单项的key
     */
    menuKey: string;
    /**
     * 菜单项的文案（支持react组件）
     */
    title?: React.ReactNode;
    /**
     * 是否隐藏
     */
    hidden?: boolean;
    MenuContentWrapper?: React.ComponentType;
    /**
     * finalMenuKey = menuKey + (menuExtraKey || '')
     * 用于需要多个相同 menuKey 共存的情况
     */
    menuExtraKey?: string;
    /**
     * menu 搜索能力
     */
    query?: string | string[];
    /**
     * 是否删除原格式
     */
    action?: string;
}
/**
 * SubMenu props
 */
export interface SubMenuProps extends ISubMenuProps {
    type: typeof TYPE_SUB_MENU;
    /**
     * 子菜单项的文案
     */
    title: React.ReactNode;
    /**
     * 是否隐藏
     */
    hidden?: boolean;
    /**
     * 菜单配置
     */
    menus: TYPE_MENU_DATA;
    /**
     * 角色
     */
    role?: string;
    /**
     * menu 搜索能力
     */
    query?: string | string[];
}
/**
 * MenuGroup props
 */
export interface MenuGroupProps {
    type: typeof TYPE_GROUP;
    /**
     * 菜单组title
     */
    title?: React.ReactNode;
    /**
     * 是否隐藏
     */
    hidden?: boolean;
    /**
     * 菜单配置
     */
    menus: TYPE_MENU_DATA;
    /**
     * 角色
     */
    role?: string;
    /**
     * menu 搜索能力
     */
    query?: string | string[];
}
export interface InlineMenuGroupProps {
    type: typeof TYPE_INLINE_MENU_GROUP;
    /**
     * 标题
     */
    title?: React.ReactNode;
    /**
     * 是否隐藏
     */
    hidden?: boolean;
    /**
     * 菜单配置
     */
    menus: Array<InlineMenuItemProps | InlineMenuWrapperProps>;
}
export interface InlineMenuWrapperProps {
    type: typeof TYPE_INLINE_MENU_WRAPPER;
    /**
     * 菜单配置
     */
    menus: Array<InlineMenuItemProps | QueryOnlyInlineMenuItemProps>;
}
export interface InlineMenuItemProps extends IInlineMenuItemProps {
    type: typeof TYPE_INLINE_MENU_ITEM;
    /**
     * 菜单项的key
     */
    menuKey: string;
    /**
     * 菜单项的文案（支持react组件）
     */
    tooltip?: React.ReactNode;
    /**
     * 是否隐藏
     */
    hidden?: boolean;
    /**
     * finalMenuKey = menuKey + (menuExtraKey || '')
     * 用于需要多个相同 menuKey 共存的情况
     */
    menuExtraKey?: string;
    /**
     * menu 搜索能力
     */
    query?: string | string[];
}
export declare type QueryOnlyInlineMenuItemProps = Omit<InlineMenuItemProps, 'type'> & {
    type: typeof TYPE_QUERY_ONLY_INLINE_MENU_ITEM;
};
/**
 * MenuBar 中放置的Menu组件
 */
export interface MenuProps {
    /**
     * 菜单配置
     */
    menus: TYPE_MENU_DATA;
    /**
     * 菜单搜索
     */
    query?: string;
    /**
     * 菜单搜索结果回调
     */
    onQuery?: (results: Array<MatchItemResult<{}>>) => void;
}
/**
 * @ignore
 */
export interface MenuItemInnerProps {
    controller: Controller;
    plugins: Plugins;
    menuItem: MenuItemProps;
    locale: any;
}
/**
 * @ignore
 */
export interface SubMenuInnerProps {
    controller: Controller;
    plugins: Plugins;
    menuItem: SubMenuProps & {
        MenuContentWrapper?: React.ComponentType;
    };
    locale: any;
}
