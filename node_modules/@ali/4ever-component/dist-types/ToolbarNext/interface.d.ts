import * as React from 'react';
import type { Controller } from '@ali/4ever-cangjie';
import type { ItemKeys } from './ItemKeys';
import type { ITBIconButtonProps, ToolbarLayout } from '@ali/we-design-next';
import { IRenderHoverToolbar } from './renderHoverToolbar';
/**
 * 基础的 toolbar 按钮，可以使用声明方式直接创建
 */
export declare type IBasicButton = Pick<ITBIconButtonProps, 'disabled' | 'title' | 'tooltip' | 'testid' | 'badgeDot' | 'role' | 'icon' | 'active'> & {
    onClick?: (controller: Controller) => void;
};
/**
 * toolbar 按钮的配置
 */
export declare type IToolbarButtonConfig = Partial<Pick<IBasicButton, 'disabled' | 'icon' | 'badgeDot' | 'title'>> & {
    key?: string;
    tooltip?: {
        title?: string;
        description?: string;
        image?: string;
    };
};
/**
 * 兼容现在 getTarget 逻辑, 允许在配置中对按钮进行禁用或者隐藏
 */
export interface IUnderControlItem {
    hideTargets?: string[];
    disableTargets?: string[];
}
export declare enum ItemState {
    'hidden' = 0,
    'disabled' = 1,
    'visiable' = 2
}
export interface IToolbarItem extends IUnderControlItem, IToolbarButtonConfig {
    name: ItemKeys | string;
}
export interface IToolbarItemLine extends IUnderControlItem {
    items: IToolbarItem[];
}
export declare type ISingleLineLayout = IToolbarItemLine[];
export interface IToolbarItemDoubleLine extends IUnderControlItem {
    lines: [IToolbarItemLine, IToolbarItemLine];
}
export interface IToolbarItemGroup extends IUnderControlItem {
    blocks: (IToolbarItemLine | IToolbarItemDoubleLine)[];
}
export declare type IDoubleLineLayout = IToolbarItemGroup[];
export declare enum HeaderToolbarMode {
    'single' = "single",
    'double' = "double"
}
export interface IToolBar extends IUnderControlItem, Pick<React.ComponentProps<typeof ToolbarLayout>, 'onLayoutRender'> {
    singleLayout?: ISingleLineLayout;
    doubleLayout?: IDoubleLineLayout;
    customButtons?: Partial<Record<ItemKeys | string, (props: {
        extraProps?: IToolbarButtonConfig & Record<string, any>;
    }, controller: Controller) => IBasicButton | React.ReactElement<IToolbarButtonConfig> | null>>;
    mode: HeaderToolbarMode;
    onSwitchModeClick?: (targetMode: HeaderToolbarMode) => void;
    style?: React.CSSProperties;
    align?: 'left' | 'center';
}
export declare type RenderToolbar = (props: {
    buttonName: ItemKeys | string;
    extraProps?: IToolbarButtonConfig & Record<string, any>;
}, controller: Controller) => IBasicButton | React.ReactElement<IToolbarButtonConfig> | null;
declare module '@ali/4ever-cangjie' {
    interface BiPlugin {
        toolbar?: any;
        renderToolbar?: RenderToolbar;
        renderHoverToolbar?: IRenderHoverToolbar;
    }
}
