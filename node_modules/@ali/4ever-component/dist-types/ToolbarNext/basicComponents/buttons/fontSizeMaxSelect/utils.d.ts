import React from 'react';
export declare const noop: any;
export declare function getDataAttr(props: any): any;
export declare const omit: <T extends Record<string, any>, K extends keyof T>(target: T, fields: K[]) => { [k in Exclude<keyof T, K>]: T[k]; };
export interface ITabsProps {
    /**
     * 设置根节点的类名，默认：undefined
     */
    className?: string;
    /**
     * 设置根节点样式，默认：undefined
     */
    style?: React.CSSProperties;
    /**
     * 设置tabBar位置
     */
    tabPosition?: 'left' | 'top';
    /**
     * 激活的 tabKey，默认：undefined
     */
    activeKey?: string;
    /**
     * 默认激活的 tabKey，默认：undefined，如果有activeKey，则忽略
     */
    defaultActiveKey?: string;
    /**
     * 是否强制销毁不显示的tab的节点，默认：false
     */
    destroyInactiveTabPane?: boolean;
    /**
     * activeKey发生变化时的回调函数
     */
    onChange?: (activeKey: string) => void;
    /**
     * TabBar 点击时的回调函数
     */
    onTabClick?: (nextKey: string, e?: React.MouseEvent<HTMLDivElement>) => void;
    /**
     * tab数量较多时，左滑动箭头的点击回调函数
     */
    onPrevClick?: (e: React.MouseEvent<HTMLElement>) => void;
    /**
     * tab数量较多时，右滑动箭头的点击回调函数
     */
    onNextClick?: (e: React.MouseEvent<HTMLElement>) => void;
    /**
     * 设置tabBar节点样式
     */
    tabBarStyle?: React.CSSProperties;
    /**
     * 设置tabContent节点样式
     */
    tabContentStyle?: React.CSSProperties;
    /**
     * 设置navContainer节点样式
     */
    navContainerStyle?: React.CSSProperties;
    /**
     * 测试使用
     */
    testid?: string;
    tabBarItemClassName?: string;
}
export interface ITabBarProps extends ITabsProps {
    panes: React.ReactNode;
}
export interface ISaveRef {
    (name: string): (node: HTMLElement | null) => void;
}
export interface IGetRef {
    (name: string): HTMLElement;
}
export declare function setTransform(style: CSSStyleDeclaration, v: string): void;
