import React, { Component } from 'react';
import { ITabsProps, ISaveRef, IGetRef } from './utils';
interface ITabBarNodeProps extends ITabsProps {
    saveRef: ISaveRef;
    getRef: IGetRef;
    panes: React.ReactNode;
}
interface ITabBarNodeState {
    next: boolean;
    prev: boolean;
    visibleStart: number;
    visibleEnd: number;
}
export default class TabBarNode extends Component<ITabBarNodeProps, ITabBarNodeState> {
    static defaultProps: {
        prefixCls: string;
        onPrevClick: any;
        onNextClick: any;
    };
    private offset;
    private lastNextPrevShown;
    private lastWheelDirection;
    private readonly tabList;
    private tabSizeMap;
    private wrapperOffsetWH;
    private wrapperScrollWH;
    constructor(props: ITabBarNodeProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps?: any): void;
    componentWillUnmount(): void;
    /**
     * 检测左右按钮的激活状态，并调整 offset
     */
    setNextPrev(): Promise<unknown>;
    /**
     * 获取节点的宽度
     *
     * @param {HTMLElement} node
     * @return {number} offsetWidth
     */
    getOffsetWH(node: HTMLElement): number;
    /**
     * 获取节点的滚动宽度
     *
     * @param {HTMLElement} node
     * @return {number} scrollWidth
     */
    getScrollWH(node: HTMLElement): number;
    /**
     * 获取节点的偏移量
     *
     * @param {HTMLElement} node
     * @return {number} clientRect.left
     */
    getOffsetLT(node: HTMLElement): number;
    /**
     * 设置偏移量
     *
     */
    setOffset(offset: number): void;
    setPrev(v: boolean): void;
    setNext(v: boolean): void;
    prevTransitionEnd: (e: React.TransitionEvent<HTMLElement>) => void;
    scrollToActiveTab: (e?: any) => void;
    /** 点击左箭头的事件处理函数 */
    prev: (e: React.MouseEvent<HTMLElement>) => void;
    /** 点击右箭头的事件处理函数 */
    next: (e: React.MouseEvent<HTMLElement>) => void;
    /**
     * 判断左右的按钮是否显示
     */
    isNextPrevShown(state?: {
        next: boolean;
        prev: boolean;
    }): boolean;
    handleWheel: (e: WheelEvent) => boolean;
    handleResize: () => void;
    getTabList: (panes: React.ReactNode) => {
        key: React.Key;
        tab: React.ReactNode;
    }[];
    updateTabSizes: () => Promise<void>;
    getPrevNext: () => JSX.Element;
    excessTabsHelper: (showNextPrev: Boolean) => JSX.Element | null;
    render(): JSX.Element;
}
export {};
