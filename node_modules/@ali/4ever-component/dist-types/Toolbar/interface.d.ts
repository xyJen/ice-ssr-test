/// <reference types="react" />
/**
 * 编辑器提供的默认工具栏interface
 * 数据结构参照 we-ui toolbar：
 * https://pds.alibaba-inc.com/alidocs/we-ui/?path=/docs/toolbar-%E7%A4%BA%E4%BE%8B--resize
 * 单行配置(嵌套数组)：
 * SingleToolbarProps: [{
 *    toolButtons: [{
 *      name: 'aaa'
 *    }, {
 *      name: 'bbb'
 *    }]
 *  }, {
 *    toolButtons: [{
 *      name: 'ccc'
 *    }]
 *  }]
 * 显示效果：|- 工具栏 -|
 * |- aaa bbb | ccc -|
 * **********************************************
 * 双行配置(2层嵌套数组)：
 * DoubleToolbarProps: [{
 *    toolRows: [{
 *      toolButtons: [{
 *        name: 'aaa'
 *      }, {
 *        name: 'bbb'
 *      }]
 *    }, {
 *      toolButtons: [{
 *        name: 'ccc'
 *      }, {
 *        name: 'ddd'
 *      }]
 *    }]
 *  }, {
 *    toolRows: [{
 *      toolButtons: [{
 *        name: 'eee',
 *        boxLayout: ToolBoxLayoutMode.vertical
 *      }]
 *    }]
 *  }]
 * 显示效果：|- 工具栏 -|
 * |- aaa bbb |     -|
 * |-         | eee -|
 * |- ccc ddd |     -|
 */
import { Controller } from '@ali/4ever-cangjie';
/**
 * 工具栏按钮布局枚举
 */
export declare enum ToolBoxLayoutMode {
    vertical = "vertical",
    single = "single",
    horizontal = "horizontal"
}
/**
 * 单个工具栏组件配置
 */
export interface ToolButtonProps {
    /**
     * 组件唯一标识，按照 pluginName[.buttonName] 命名
     */
    name: string;
    /**
     * 限定在特定插件选中时出现
     */
    showTargets?: string[];
    /**
     * 限定在特定插件选中时消失，优先级高于 showTargets
     */
    hideTargets?: string[];
    /**
     * 双行布局时ToolBox layout，概念继承自we-ui toolbar
     */
    boxLayout?: ToolBoxLayoutMode;
    /**
     * 垂直布局时底部文案：local[verticalKey || 'buttonTitle']
     */
    verticalKey?: string;
    /**
     * 自定义国际化文案
     */
    verticalText?: string;
}
/**
 * 一行工具栏
 * resize时按单个toolButton缩略
 */
export interface ToolRowProps {
    /**
     * toolButton 数组
     */
    toolButtons: ToolButtonProps[];
    /**
     * 样式
     */
    style?: React.CSSProperties;
    /**
     * 限定整行在特定插件选中时显示，优先级高于 toolButton.showTargets
     */
    showTargets?: string[];
    /**
     * 限定整行在特定插件选中时隐藏，优先级高于 toolButton.hideTargets
     */
    hideTargets?: string[];
}
/**
 * 一组工具栏
 * resize 是按行粒度缩略，用于双行布局
 */
export interface ToolGroupProps {
    /**
     * 一组可包含多行
     */
    toolRows: ToolRowProps[];
    /**
     * 限定整组在特定插件选中时显示，优先级高于 toolLine.showTargets
     */
    showTargets?: string[];
    /**
     * 限定整组在特定插件选中时隐藏，优先级高于 toolLine.hideTargets
     */
    hideTargets?: string[];
}
/**
 * 工具栏显示模式
 */
export declare enum ToolbarMode {
    /**
     * 双行模式
     */
    double = "doubleLine",
    /**
     * 单行模式
     */
    single = "singleLine",
    /**
     * Inline 工具栏
     */
    inline = 2
}
export interface ToolbarRenderProps {
    /**
     * 行内工具栏配置
     */
    inlineLayout?: ToolRowProps[];
    /**
     * 单行工具栏配置
     */
    singleLayout?: ToolRowProps[];
    /**
     * 双行工具栏配置
     */
    doubleLayout?: ToolGroupProps[];
    /**
     * 自定义组件
     */
    customToolButtons?: Record<string, any>;
    /**
     * 隐藏组件（用于灰度）
     */
    hiddenToolButtons?: Record<string, boolean>;
    /**
     * 工具栏模式：inline、single、double
     */
    toolbarMode?: ToolbarMode;
    /**
     * 默认模式
     */
    defaultToolbarMode?: ToolbarMode;
    /**
     * 选中后让 toolbar disable 的targets
     */
    disableTargets?: Record<string, boolean>;
    /**
     * 对齐方式
     */
    alignment?: 'left' | 'right' | 'center';
    /**
     * 自定义样式
     */
    style?: React.CSSProperties;
    /**
     * 是否自动折叠
     */
    autoFolding?: boolean;
    testid?: string;
}
/**
 * @ignore
 */
export interface ToolbarRenderNextInnerProps extends ToolbarRenderProps {
    controller: Controller;
    plugins: any;
}
export interface InlineToolbarRenderProps {
    /**
     * 是否可见，传给 dropdown
     */
    visible?: boolean;
    /**
     * 行内工具栏配置
     */
    inlineLayout: ToolRowProps[];
    /**
     * 自定义组件
     */
    customToolButtons?: Record<string, any>;
    /**
     * 隐藏组件（用于灰度）
     */
    hiddenToolButtons?: Record<string, boolean>;
    /**
     * 自定义样式
     */
    style?: React.CSSProperties;
    /**
     * 自定义 overlay 样式
     */
    overlayStyle?: React.CSSProperties;
    /**
     * 自定义 overlay class
     */
    overlayClassName?: string;
    /**
     * 设置dropdown挂载的容器
     */
    getDropdwonContainer?: () => HTMLElement;
    /**
     * 触发组件
     */
    triggerNode?: HTMLElement | undefined;
    /**
     * 包括的children
     */
    children?: React.ReactElement;
    /**
     * 偏移Y
     */
    offsetY?: number;
    testid?: string;
}
