import * as React from 'react';
import { Controller, Selection, Plugin } from '@ali/4ever-cangjie';
export interface Plugins {
    array: Plugin[];
    hash: Record<string, Plugin>;
}
export declare type PanelConfig = {
    title: string | React.ComponentType;
    icon?: React.ComponentType;
    height?: string;
    content: MobileToolbarGroup[] | React.ComponentType<{
        controller: Controller;
    }>;
};
export declare type MobileToolbarItem = string | {
    /**
     * 唯一标记
     *
     * 自定义组件：定义唯一字符串。
     * 插件：pluginName | pluginName.buttonName。前者取 pluginName.toolbar.default
     */
    name: string;
    title?: string;
    Component?: React.ComponentType<MobileToolbarButtonProps>;
    onClick?: () => boolean;
    children?: MobileToolbarItem[];
    panel?: PanelConfig;
    hideConditions?: string[];
    showTargets?: string[];
    closePanelOnClick?: boolean;
    hideToolbarOnClick?: boolean;
};
export declare type MobileToolbarGroup = {
    key: string;
    borderless?: boolean;
    fixedOnRight?: boolean;
    items: MobileToolbarItem[];
    widthRange?: [number] | [number, number];
    hideConditions?: string[];
    showTargets?: string[];
};
export interface MobileToolbarProps {
    layout: MobileToolbarGroup[];
    onItemClick?: (item: MobileToolbarItem) => void;
    useVisualBox?: boolean;
    onPanelOps?: (ops: PanelOps) => void;
    onBottomPanelChange?: (item: MobileToolbarItem | undefined, closePanel: (autoFocus?: boolean) => void) => void;
}
/**
 * 默认的 wrapper，提供了；
 * 1. 统一的 UI 样式（传入 isActive、isDisabled）
 * 2. 大区域的 click 事件（传入 onClick）
 * 3. 统一的 utClick 上报（传入 item ）
 */
export declare type ButtonWrapperProps = {
    item: MobileToolbarItem;
    children?: any;
    type: 'big' | 'horiz' | 'icon' | 'line';
    width?: number;
    isActive?: boolean;
    isFocused?: boolean;
    isDisabled?: boolean;
    onClick?: Function;
    icon?: string | React.ComponentType;
    lineText?: string;
    style?: React.CSSProperties;
};
export declare type PanelOps = {
    panelItem?: MobileToolbarItem;
    closePanel?: () => void;
    openPanel?: (panel: MobileToolbarItem) => void;
};
/**
 * 插件进行自定义渲染时候，一定会给对应的组件，传入这些字段
 */
export declare type MobileToolbarButtonProps = PanelOps & {
    Wrapper: React.FC<ButtonWrapperProps>;
    controller: Controller;
    selection: Selection;
    item: MobileToolbarItem;
    subLineItem?: MobileToolbarItem;
    panelShowing: boolean;
    subLineShowing: boolean;
    locale?: any;
};
