"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LeftToolbarProvider = exports.useLeftToolbar = exports.LeftToolbarContext = void 0;

var React = _interopRequireWildcard(require("react"));

var _ActiveInteractionContext = require("../HoverBlock/ActiveInteractionContext");

var _reducer = _interopRequireWildcard(require("./reducer"));

const _createElement = /*#__PURE__*/React.createElement;
const initData = {
  preventMouseMove: false
};
const initDispatch = {
  updateHoverBlock: () => {},
  clearPrevent: () => {},
  preventMouseMove: () => {}
};
const {
  useActiveInteraction
} = _ActiveInteractionContext.ActiveInteractionHooks;
const LeftToolbarContext = /*#__PURE__*/React.createContext([initData, initDispatch]);
exports.LeftToolbarContext = LeftToolbarContext;

const useLeftToolbar = () => {
  return React.useContext(LeftToolbarContext);
};

exports.useLeftToolbar = useLeftToolbar;

const LeftToolbarProvider = props => {
  const [state, dispatch] = React.useReducer(_reducer.default, initData);
  const [activeType] = useActiveInteraction();
  const activeRef = React.useRef('');
  activeRef.current = activeType;
  const actions = React.useMemo(() => ({
    updateHoverBlock: block => {
      dispatch((0, _reducer.updateHoverBlock)(block));
    },
    clearPrevent: () => {
      dispatch((0, _reducer.clearPrevent)());
    },
    preventMouseMove: () => {
      dispatch((0, _reducer.preventMouseMove)());
    }
  }), [dispatch]);
  const value = React.useMemo(() => [state, actions], [state, actions]);
  return /*#__PURE__*/_createElement(LeftToolbarContext.Provider, {
    value: value
  }, props.children);
};

exports.LeftToolbarProvider = LeftToolbarProvider;
//# sourceMappingURL=leftToolbarContext.js.map