"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineToolbar = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weDesign = require("@ali/we-design");

var _interface = require("./interface");

var _toolbarRenderNext = _interopRequireDefault(require("./toolbarRenderNext"));

var _PluginsContext = require("../PluginsContext");

const _createElement = /*#__PURE__*/React.createElement;

/**
 * 使用dropdown包装一层toolbar，防止toolbar被其它元素遮挡
 * @param props
 */
const InlineToolbar = props => {
  const controller = _everCangjie.Controller.useController();

  const plugins = (0, _PluginsContext.usePlugins)();
  const {
    triggerNode,
    visible,
    children,
    getDropdwonContainer,
    inlineLayout,
    customToolButtons,
    hiddenToolButtons,
    style,
    overlayStyle,
    overlayClassName,
    testid,
    ...rest
  } = props;
  const scrollableContent = (0, _everCangjie.useScrollableContent)();
  const getScrollableContent = React.useCallback(() => {
    return scrollableContent || window.document.body;
  }, [scrollableContent]);
  const overlay = visible ? /*#__PURE__*/_createElement(_toolbarRenderNext.default, {
    style: style,
    controller: controller,
    plugins: plugins,
    toolbarMode: _interface.ToolbarMode.inline,
    inlineLayout: inlineLayout,
    customToolButtons: customToolButtons,
    hiddenToolButtons: hiddenToolButtons,
    testid: testid ? `inline-toolbar-${testid}` : undefined
  }) : null;
  return /*#__PURE__*/_createElement(_weDesign.Dropdown, (0, _extends2.default)({
    visible: visible,
    placement: "topLeft",
    trigger: "click",
    offsetY: -6,
    triggerNode: triggerNode,
    getContainer: getDropdwonContainer || getScrollableContent,
    overlayStyle: overlayStyle,
    overlayClassName: overlayClassName
  }, rest, {
    overlay: overlay
  }), children);
};

exports.InlineToolbar = InlineToolbar;
//# sourceMappingURL=inlineToolbar.js.map