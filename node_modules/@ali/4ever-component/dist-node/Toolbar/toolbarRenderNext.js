"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _weUi = require("@ali/we-ui");

var _styled = require("./styled");

var _idleRender = require("../idleRender");

var _interface = require("./interface");

var _util = require("./util");

var _config = _interopRequireDefault(require("./config"));

/**
 * 编辑器自带toolbar组件
 */
const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref = /*#__PURE__*/_createElement(_weUi.ToolbarDivider, null);

const ToolbarRenderNext = props => {
  const {
    controller,
    plugins,
    inlineLayout,
    singleLayout,
    doubleLayout,
    hiddenToolButtons = {},
    toolbarMode,
    customToolButtons = {},
    disableTargets,
    style,
    alignment,
    autoFolding,
    defaultToolbarMode,
    testid
  } = props;
  const defaultMode = defaultToolbarMode === _interface.ToolbarMode.double ? _weUi.EToolbarMode.doubleLine : _weUi.EToolbarMode.singleLine;
  const [uiToolbarMode, setUiToolbarMode] = (0, _react.useState)(defaultMode);
  const inlinetoolbarWrapperRef = (0, _react.useRef)(null);
  const handleModeChange = (0, _react.useCallback)(mode => {
    setUiToolbarMode(mode);
  }, []);
  const getContainer = (0, _react.useCallback)(() => inlinetoolbarWrapperRef.current || window.document.body, []);
  const realToolbarMode = 'toolbarMode' in props ? toolbarMode : uiToolbarMode;
  const realAutoFolding = autoFolding !== undefined ? autoFolding : realToolbarMode !== _interface.ToolbarMode.inline;
  /**
   * 从插件查询哪个插件被选中（暂不支持多个插件同时识别）
   * 通过调用插件 getTarget 实现
   */

  const target = _react.default.useMemo(() => {
    const pluginsArray = plugins.array;

    for (let i = 0; i < pluginsArray.length; i += 1) {
      let tgt;
      const plugin = pluginsArray[i];
      const getTarget = plugin.toolbar && plugin.toolbar.getTarget;

      if (getTarget) {
        tgt = getTarget(controller);
      }

      if (tgt) {
        return tgt;
      }
    }
  }, [controller, plugins.array]);
  /**
   * 渲染单个 toolButton
   * @param toolButton配置，支持直接传一个react元素
   * @param index
   */


  const renderTool = (item, index) => {
    if ( /*#__PURE__*/_react.default.isValidElement(item)) {
      return /*#__PURE__*/_createElement(_weUi.ToolBox, {
        key: index
      }, item);
    }

    const {
      name,
      boxLayout,
      verticalKey,
      hideTargets,
      showTargets,
      verticalText,
      ...rest
    } = item; // 支持分割线

    if (name === 'ToolbarDivider') {
      return /*#__PURE__*/_createElement(_weUi.ToolBox, {
        key: index
      }, _ref);
    } // hiddenToolButtons 优先


    if (hiddenToolButtons[name]) return null; // 优先从自定义组件里匹配

    const CustomComponent = customToolButtons[name];
    const [pluginName, buttonName = 'default'] = name.split('.');
    const plugin = plugins.hash[pluginName];

    if (!plugin && !CustomComponent) {
      return null;
    }

    const buttons = plugin?.toolbar && plugin?.toolbar?.buttons;
    const Component = CustomComponent || buttons && buttons[buttonName];

    if (!Component) {
      return null;
    }

    if (plugin?.toolbar) {
      // 判断是否隐藏
      const shouldShow = (0, _util.judgeShouldShow)(target, showTargets, hideTargets);
      if (!shouldShow) return null;
    } // 优先取自定义国际化文案


    const locale = plugin?.toolbar?.locale;
    let toolBoxName;

    if (boxLayout === _interface.ToolBoxLayoutMode.vertical && locale) {
      // 双行模式默认用 locale.buttonTitle 作为文案
      toolBoxName = locale[verticalKey || 'buttonTitle'];
    }

    toolBoxName = verticalText || toolBoxName;
    const isDoubleMode = realToolbarMode === _interface.ToolbarMode.double;
    let toolBoxLayout = boxLayout;

    if (!isDoubleMode && boxLayout === _interface.ToolBoxLayoutMode.vertical) {
      // TODO: 非双行模式下忽略vertical（脏）
      toolBoxLayout = _interface.ToolBoxLayoutMode.single;
      console.warn('do not support vertical layout when tolbarMode is single');
    } // normal 属于 we-ui 用法，medium 属于 we-design 用法


    return /*#__PURE__*/_createElement(_weUi.ToolBox, {
      name: toolBoxName,
      layout: toolBoxLayout,
      key: index
    }, /*#__PURE__*/_createElement(Component, (0, _extends2.default)({}, rest, {
      controller: controller,
      toolbarMode: realToolbarMode,
      locale: locale,
      size: isDoubleMode ? 'small' : 'medium',
      getContainer: toolbarMode === _interface.ToolbarMode.inline ? getContainer : undefined
    })));
  };

  const renderLine = (lineProps, index) => {
    const contents = (0, _util.renderToolArray)(lineProps, 'toolButtons', target, renderTool);
    if (!contents) return null;
    return /*#__PURE__*/_createElement(_weUi.ToolLine, {
      key: index
    }, contents);
  };

  const renderGroup = (groupProps, index) => {
    const contents = (0, _util.renderToolArray)(groupProps, 'toolRows', target, renderLine);
    if (!contents) return null;
    return /*#__PURE__*/_createElement(_weUi.ToolGroup, {
      key: index
    }, contents);
  };
  /**
   * 渲染单行工具栏
   * @param singleLineLayout
   */


  const renderSingleToolbar = singleLineLayout => {
    if (realToolbarMode === _weUi.EToolbarMode.doubleLine) return null;
    const layout = singleLineLayout || _config.default.defaultSingleLayout; // @ts-ignore

    const tls = layout.map((lines, idx) => renderLine(lines, idx)).filter(item => item);
    if (!tls.length) return null;
    return /*#__PURE__*/_createElement(_weUi.SingleLineToolbar, {
      alignType: alignment,
      autoFolding: realAutoFolding
    }, tls);
  };
  /**
   * 渲染双行工具栏
   * @param doubleLineLayout
   */


  const renderDoubleToolbar = doubleLineLayout => {
    if (realToolbarMode === _weUi.EToolbarMode.singleLine) return null;
    const layout = doubleLineLayout || _config.default.defaultDoubleLayout; // @ts-ignore

    const tgs = layout.map((group, index) => renderGroup(group, index)).filter(item => item);
    if (!tgs.length) return null;
    return /*#__PURE__*/_createElement(_weUi.DoubleLineToolbar, {
      alignType: alignment,
      autoFolding: realAutoFolding
    }, tgs);
  };
  /**
   * 阻止默认事件，防止文档区域失焦
   */


  const handleMouseDown = (0, _react.useCallback)(ev => {
    if (ev.target?.tagName.toLocaleLowerCase() !== 'input') {
      // 放过input，以便输入地方可以正常输入
      ev.preventDefault && ev.preventDefault();
      ev.stopPropagation && ev.stopPropagation();
    }
  }, []);
  const fTgts = disableTargets || _config.default.defaultDisableTargets;
  const shouldDisableWholeToolbar = realToolbarMode !== _interface.ToolbarMode.inline && fTgts[target];
  let classes = 'bi-toolbar';
  let wrapperStyle = {};

  if (shouldDisableWholeToolbar) {
    wrapperStyle = {
      opacity: 0.4,
      pointerEvents: 'none'
    };
  }

  if (realToolbarMode === _weUi.EToolbarMode.doubleLine) {
    classes += ' double';
  } else {
    classes += ' single';
  }

  if (toolbarMode === _interface.ToolbarMode.inline) {
    const layout = inlineLayout || _config.default.defaultInlineLayout;
    return /*#__PURE__*/_createElement(_styled.InlineToolbarWrapper, {
      style: style,
      ref: inlinetoolbarWrapperRef,
      "data-testid": testid ?? undefined
    }, renderSingleToolbar(layout));
  }

  if (toolbarMode === _interface.ToolbarMode.single) {
    return /*#__PURE__*/_createElement(_styled.ToolbarWrapper, {
      style: { ...wrapperStyle,
        ...style
      },
      className: classes,
      onMouseDown: handleMouseDown,
      "data-testid": testid ?? undefined
    }, renderSingleToolbar(singleLayout));
  }

  if (toolbarMode === _interface.ToolbarMode.double) {
    return renderDoubleToolbar(doubleLayout);
  }

  return /*#__PURE__*/_createElement(_styled.ToolbarWrapper, {
    style: { ...wrapperStyle,
      ...style
    },
    className: classes,
    onMouseDown: handleMouseDown,
    "data-testid": testid ?? undefined
  }, /*#__PURE__*/_createElement(_weUi.Toolbar, {
    mode: realToolbarMode,
    onModeChange: handleModeChange,
    singleLineToolbar: renderSingleToolbar(singleLayout) || undefined,
    doubleLineToolbar: renderDoubleToolbar(doubleLayout) || undefined,
    autoFolding: realAutoFolding
  }));
};

var _default = process.env.NODE_ENV === 'test' ? ToolbarRenderNext : (0, _idleRender.idleRender)(ToolbarRenderNext, 400, {
  leading: true
});

exports.default = _default;
//# sourceMappingURL=toolbarRenderNext.js.map