"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeToolbarItemByName = removeToolbarItemByName;
exports.renderToolArray = exports.judgeShouldShow = void 0;

function removeToolLineItemByName(name, toolLine) {
  let tl = toolLine;

  if (tl) {
    const {
      toolButtons = []
    } = tl;
    tl = { ...tl,
      toolButtons: toolButtons.filter(tb => {
        return tb.name !== name;
      })
    };
  }

  return tl;
}

function removeToolbarItemByName(name, singleLayout, doubleLayout) {
  let sl = singleLayout;
  let dl = doubleLayout;

  if (sl) {
    const {
      toolRows = []
    } = sl;
    sl = { ...sl,
      toolRows: toolRows.map(tl => removeToolLineItemByName(name, tl))
    };
  }

  if (dl) {
    const {
      toolGroups = []
    } = dl;
    dl = { ...dl,
      toolGroups: toolGroups.map(tg => {
        const {
          toolRows = []
        } = tg;
        return { ...tg,
          toolRows: toolRows.map(tl => removeToolLineItemByName(name, tl))
        };
      })
    };
  }

  return {
    singleLayout: sl,
    doubleLayout: dl
  };
}

const judgeShouldShow = (target, showTargets, hideTargets) => {
  // hideTargets 优先
  if (hideTargets && target) {
    const shouldHide = hideTargets.some(t1 => {
      return t1 === target;
    });
    if (shouldHide) return false;
  }

  if (showTargets) {
    if (!target) {
      return false;
    }

    const shouldShow = showTargets.some(t1 => {
      return t1 === target;
    });
    if (!shouldShow) return false;
  }

  return true;
};

exports.judgeShouldShow = judgeShouldShow;

const renderToolArray = (props, key, target, renderFunc) => {
  const {
    showTargets,
    hideTargets
  } = props;
  const shouldShow = judgeShouldShow(target, showTargets, hideTargets);
  if (!shouldShow) return null;
  const contents = (props[key] || []).map((tb, idx) => renderFunc(tb, idx)).filter(item => item);
  if (!contents.length) return null;
  return contents;
};

exports.renderToolArray = renderToolArray;
//# sourceMappingURL=util.js.map