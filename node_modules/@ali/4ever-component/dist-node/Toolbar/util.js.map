{"version":3,"sources":["../../../src/Toolbar/util.ts"],"names":["removeToolLineItemByName","name","toolLine","tl","toolButtons","filter","tb","removeToolbarItemByName","singleLayout","doubleLayout","sl","dl","toolRows","map","toolGroups","tg","judgeShouldShow","target","showTargets","hideTargets","shouldHide","some","t1","shouldShow","renderToolArray","props","key","renderFunc","contents","idx","item","length"],"mappings":"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","sourcesContent":["import {\n  ToolRowProps,\n  ToolGroupProps,\n} from './interface';\n\nfunction removeToolLineItemByName(name: string, toolLine?: ToolRowProps) {\n  let tl = toolLine;\n  if (tl) {\n    const { toolButtons = [] } = tl;\n    tl = {\n      ...tl,\n      toolButtons: toolButtons.filter(tb => {\n        return tb.name !== name;\n      }),\n    };\n  }\n  return tl;\n}\n\nexport function removeToolbarItemByName(\n  name: string,\n  singleLayout?: any,\n  doubleLayout?: any,\n) {\n  let sl = singleLayout;\n  let dl = doubleLayout;\n\n  if (sl) {\n    const { toolRows = [] } = sl;\n    sl = {\n      ...sl,\n      toolRows: toolRows.map(tl => removeToolLineItemByName(name, tl)),\n    };\n  }\n\n  if (dl) {\n    const { toolGroups = [] } = dl;\n    dl = {\n      ...dl,\n      toolGroups: toolGroups.map(tg => {\n        const { toolRows = [] } = tg;\n        return {\n          ...tg,\n          toolRows: toolRows.map(tl => removeToolLineItemByName(name, tl)),\n        };\n      }),\n    };\n  }\n\n  return {\n    singleLayout: sl,\n    doubleLayout: dl,\n  };\n}\n\nexport const judgeShouldShow = (target, showTargets, hideTargets) => {\n  // hideTargets 优先\n  if (hideTargets && target) {\n    const shouldHide = hideTargets.some(t1 => {\n      return t1 === target;\n    });\n    if (shouldHide) return false;\n  }\n\n  if (showTargets) {\n    if (!target) {\n      return false;\n    }\n    const shouldShow = showTargets.some(t1 => {\n      return t1 === target;\n    });\n    if (!shouldShow) return false;\n  }\n\n  return true;\n};\n\nexport const renderToolArray = (props: ToolRowProps | ToolGroupProps, key: string, target, renderFunc: Function) => {\n  const { showTargets, hideTargets } = props;\n  const shouldShow = judgeShouldShow(target, showTargets, hideTargets);\n  if (!shouldShow) return null;\n  const contents = (props[key] || []).map((tb, idx) => renderFunc(tb, idx)).filter(item => item);\n  if (!contents.length) return null;\n  return contents;\n};\n"],"file":"util.js"}