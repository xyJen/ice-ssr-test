{"version":3,"sources":["../../../src/HoverToolbar/PopoverVisibleContext.ts"],"names":["usePopoverVisible","key","onOverlayVisibleChange","getContainer","isHTVisible","visible","setVisible","React","useState","scrollableContainer","onVisibleChange","useCallback","useEffect","noop","handleScroll","addEventListener","once","removeEventListener"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACO,SAASA,iBAAT,CAA4BC,GAA5B,EAAyCC,sBAAzC,EAAuF;AAC5F,QAAMC,YAAY,GAAG,2CAArB;AACA,QAAMC,WAAW,GAAG,2DAApB;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBC,eAAMC,QAAN,CAAe,mDAAoBP,GAApB,CAAf,CAA9B;;AACA,QAAMQ,mBAAmB,GAAG,0CAA5B;;AACA,QAAMC,eAAe,GAAGH,eAAMI,WAAN,CAAmBN,OAAD,IAAsB;AAC9DC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAH,IAAAA,sBAAsB,CAACG,OAAD,CAAtB;AACD,GAHuB,EAGrB,CAACH,sBAAD,CAHqB,CAAxB;;AAKAK,iBAAMK,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACR,WAAL,EAAkB;AAChBM,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GAJD,EAIG,CAACN,WAAD,EAAcM,eAAd,CAJH;;AAMAH,iBAAMK,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACP,OAAD,IAAY,CAACI,mBAAjB,EAAsC,OAAOI,YAAP;;AACtC,UAAMC,YAAY,GAAG,MAAM;AACzBJ,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAFD;;AAGAD,IAAAA,mBAAmB,CAACM,gBAApB,CAAqC,QAArC,EAA+CD,YAA/C,EAA6D;AAC3DE,MAAAA,IAAI,EAAE;AADqD,KAA7D;AAGA,WAAO,MAAM;AACXP,MAAAA,mBAAmB,CAACQ,mBAApB,CAAwC,QAAxC,EAAkDH,YAAlD;AACD,KAFD;AAGD,GAXD,EAWG,CAACL,mBAAD,EAAsBJ,OAAtB,EAA+BK,eAA/B,CAXH,EAhB4F,CA6B5F;;;AACAH,iBAAMK,SAAN,CAAgB,MAAM;AACpBF,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAFD,EAEG,CAACP,YAAD,EAAeD,sBAAf,CAFH;;AAIA,SAAO,CAACG,OAAD,EAAUK,eAAV,CAAP;AACD","sourcesContent":["import React from 'react';\nimport { noop } from 'lodash-es';\nimport { useScrollableContainer } from '@ali/4ever-cangjie';\nimport { useGetContainer } from './GetContainerContext';\nimport { useIsHoverToolbarVisible } from './HoverToolbarVisibleContext';\nimport { useIsPopoverVisible } from './PopoverVisibleSetContext';\nexport function usePopoverVisible (key: string, onOverlayVisibleChange: (v: boolean) => void) {\n  const getContainer = useGetContainer();\n  const isHTVisible = useIsHoverToolbarVisible();\n  const [visible, setVisible] = React.useState(useIsPopoverVisible(key));\n  const scrollableContainer = useScrollableContainer();\n  const onVisibleChange = React.useCallback((visible: boolean) => {\n    setVisible(visible);\n    onOverlayVisibleChange(visible);\n  }, [onOverlayVisibleChange]);\n\n  React.useEffect(() => {\n    if (!isHTVisible) {\n      onVisibleChange(false);\n    }\n  }, [isHTVisible, onVisibleChange]);\n\n  React.useEffect(() => {\n    if (!visible || !scrollableContainer) return noop;\n    const handleScroll = () => {\n      onVisibleChange(false);\n    }\n    scrollableContainer.addEventListener('scroll', handleScroll, {\n      once: true,\n    });\n    return () => {\n      scrollableContainer.removeEventListener('scroll', handleScroll);\n    }\n  }, [scrollableContainer, visible, onVisibleChange]);\n\n  // container 变化时需要重新定位\n  React.useEffect(() => {\n    onVisibleChange(false);\n  }, [getContainer, onOverlayVisibleChange]);\n\n  return [visible, onVisibleChange] as [boolean, (v: boolean) => void];\n}"],"file":"PopoverVisibleContext.js"}