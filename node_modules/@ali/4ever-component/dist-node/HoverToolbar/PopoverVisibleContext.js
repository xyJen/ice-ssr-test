"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePopoverVisible = usePopoverVisible;

var _react = _interopRequireDefault(require("react"));

var _lodash = require("lodash");

var _everCangjie = require("@ali/4ever-cangjie");

var _GetContainerContext = require("./GetContainerContext");

var _HoverToolbarVisibleContext = require("./HoverToolbarVisibleContext");

var _PopoverVisibleSetContext = require("./PopoverVisibleSetContext");

function usePopoverVisible(key, onOverlayVisibleChange) {
  const getContainer = (0, _GetContainerContext.useGetContainer)();
  const isHTVisible = (0, _HoverToolbarVisibleContext.useIsHoverToolbarVisible)();

  const [visible, setVisible] = _react.default.useState((0, _PopoverVisibleSetContext.useIsPopoverVisible)(key));

  const scrollableContainer = (0, _everCangjie.useScrollableContainer)();

  const onVisibleChange = _react.default.useCallback(visible => {
    setVisible(visible);
    onOverlayVisibleChange(visible);
  }, [onOverlayVisibleChange]);

  _react.default.useEffect(() => {
    if (!isHTVisible) {
      onVisibleChange(false);
    }
  }, [isHTVisible, onVisibleChange]);

  _react.default.useEffect(() => {
    if (!visible || !scrollableContainer) return _lodash.noop;

    const handleScroll = () => {
      onVisibleChange(false);
    };

    scrollableContainer.addEventListener('scroll', handleScroll, {
      once: true
    });
    return () => {
      scrollableContainer.removeEventListener('scroll', handleScroll);
    };
  }, [scrollableContainer, visible, onVisibleChange]); // container 变化时需要重新定位


  _react.default.useEffect(() => {
    onVisibleChange(false);
  }, [getContainer, onOverlayVisibleChange]);

  return [visible, onVisibleChange];
}
//# sourceMappingURL=PopoverVisibleContext.js.map