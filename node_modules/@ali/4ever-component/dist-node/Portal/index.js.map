{"version":3,"sources":["../../../src/Portal/index.tsx"],"names":["Portal","React","Component","triggerRef","createRef","portalRef","updatePortalPosition","visible","container","portalMatchTrigger","getPosition","zoom","maxWidth","props","trigger","ReactDOM","findDOMNode","current","portal","triggerRect","getBoundingClientRect","offset","position","offsetX","offsetY","containerRect","top","bottom","left","portalRect","height","width","Math","min","style","minWidth","computedLeft","computedTop","bottomSpace","rightSpace","triggerTop","triggerRight","right","zIndex","componentDidMount","componentDidUpdate","componentWillUnmount","cancel","render","children","overlay","className","destroyOverlayOnHide","cloneElement","ref","createPortal","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { throttle } from 'lodash-es';\n\nexport type GetPosition = (containerRect: DOMRect, triggerRect: DOMRect, portalRect: DOMRect) => { top: number, left: number };\n\nexport interface PortalProps {\n  overlay: React.ReactElement;\n  visible?: boolean;\n  destroyOverlayOnHide?: boolean;\n  // portal 相对原始位置偏移量\n  offset: number[];\n  container: HTMLElement;\n  zoom: number;\n  className?: string;\n  portalMatchTrigger: boolean;\n  // portal 的元素 ref\n  portalRef?: React.RefObject<HTMLElement>;\n  // 触发 portal 的元素 ref\n  triggerRef?: React.RefObject<HTMLElement>;\n  // 获取 portal 指定位置的自定义函数\n  getPosition?: GetPosition;\n  // 指定固定的 position（优先级高于 offset 和 getPosition）\n  position?: {\n    top: number;\n    left: number;\n  };\n  /**\n   * 面板最大宽度\n   */\n  maxWidth?: number;\n}\n\nexport class Portal extends React.Component<PortalProps> {\n  private triggerRef = React.createRef<HTMLDivElement>();\n\n  private portalRef = React.createRef<HTMLDivElement>();\n\n  private updatePortalPosition = throttle(() => {\n    const { visible, container, portalMatchTrigger, portalRef, triggerRef, getPosition, zoom = 1, maxWidth } = this.props;\n    if (!visible) {\n      return;\n    }\n\n    // eslint-disable-next-line react/no-find-dom-node\n    const trigger = ReactDOM.findDOMNode(\n      triggerRef ? triggerRef.current : this.triggerRef.current,\n    ) as HTMLDivElement;\n    // eslint-disable-next-line react/no-find-dom-node\n    const portal = ReactDOM.findDOMNode(\n      portalRef ? portalRef.current : this.portalRef.current,\n    ) as HTMLDivElement;\n    if (!trigger || !portal) {\n      return;\n    }\n\n    const triggerRect = trigger.getBoundingClientRect();\n    if (!triggerRect) {\n      return;\n    }\n\n    const { offset, position } = this.props;\n    const [offsetX, offsetY] = offset;\n    const containerRect = container.getBoundingClientRect();\n    const top = triggerRect.bottom - containerRect.top;\n    const left = triggerRect.left - containerRect.left;\n    const portalRect = portal.getBoundingClientRect();\n    const { height, width } = portalRect;\n\n    if (portalMatchTrigger) {\n      const width = maxWidth ? Math.min(maxWidth, triggerRect.width) : triggerRect.width;\n      portal.style.minWidth = `${width}px`;\n    }\n\n    /**\n     * zoom 场景下，left 和 top 需要乘以 zoom\n     * ┌────────┬────────────┐                      ┌──────────────┬───────────────┐\n     * │        │            │                      │              │               │\n     * │        │ left       │        zoom          │              │               │\n     * ├────────┘            │  ────────────────►   │              │ left * zoom   │\n     * │   top               │                      │              │               │\n     * │                     │                      ├──────────────┘               │\n     * │                     │                      │  top * zoom                  │\n     * └─────────────────────┘                      │                              │\n     *                                              │                              │\n     *                                              │                              │\n     *                                              └──────────────────────────────┘\n     * 我们这边使用 getBoundingClientRect 获取的是相对 viewport 的数据\n     * 在 zoom 情况下，需要除以 zoom 获得真实的 style 设置\n     * \n     * ┌────────┬────────────┐                      ┌──────────────┬───────────────┐\n     * │        │            │                      │              │               │\n     * │        │left / zoom │          zoom        │              │               │\n     * ├────────┘            │  ◄─────────────────  │              │ left          │\n     * │ top / zoom          │                      │              │               │\n     * │                     │                      ├──────────────┘               │\n     * │                     │                      │      top                     │\n     * └─────────────────────┘                      │                              │\n     *                                              │                              │\n     *                                              │                              │\n     *                                              └──────────────────────────────┘\n     */\n    /* 当有外部传入固定position时，优先采用position */\n    if (position) {\n      // position 的绝对位置，不受 zoom 影响\n      portal.style.top = `${position.top}px`;\n      portal.style.left = `${position.left}px`;\n    } else if (getPosition && typeof getPosition === 'function') {\n      const { left: computedLeft, top: computedTop } = getPosition(containerRect, triggerRect, portalRect);\n      portal.style.top = `${computedTop / zoom}px`;\n      portal.style.left = `${computedLeft / zoom}px`;\n    } else {\n      // 计算底部剩余空间，若剩余空间能够容纳 portal，则向下展示 portal\n      // 如果下方剩余空间无法容纳 portal，还需要判断上方空间能否容纳\n      // 若上方也无法容纳(triggerTop < height)，则仍然放到下方\n      // 左右则优先放右侧\n      const bottomSpace = containerRect.height - top;\n      const rightSpace = containerRect.width - left;\n      const triggerTop = triggerRect.top - containerRect.top;\n      const triggerRight = triggerRect.right - containerRect.left;\n      portal.style.top =\n        bottomSpace < height && triggerTop > height\n          ? `${(triggerTop + offsetY - height - 4) / zoom}px` // 放到上方\n          : `${(top + offsetY) / zoom}px`;\n      portal.style.left =\n        rightSpace < width && triggerRight > width\n          ? `${(left + offsetX - width - 4) / zoom}px`\n          : `${(left + offsetX) / zoom}px`;\n    }\n    portal.style.zIndex = '999';\n  });\n\n  static defaultProps = {\n    offset: [0, 0],\n    portalMatchTrigger: true,\n    className: '',\n    visible: false,\n  };\n\n  componentDidMount() {\n    this.updatePortalPosition();\n  }\n\n  componentDidUpdate() {\n    this.updatePortalPosition();\n  }\n\n  componentWillUnmount() {\n    this.updatePortalPosition.cancel();\n  }\n\n  render() {\n    const {\n      children,\n      container,\n      overlay,\n      className,\n      visible,\n      destroyOverlayOnHide = true,\n      portalRef,\n      triggerRef,\n    } = this.props;\n    return (\n      <React.Fragment>\n        {React.cloneElement(children as React.ReactElement, {\n          ref: triggerRef || this.triggerRef,\n        })}\n        {visible || !destroyOverlayOnHide\n          ? ReactDOM.createPortal(\n            <div className={className}>\n              {React.cloneElement(overlay, { ref: portalRef || this.portalRef })}\n            </div>,\n            container,\n          )\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n"],"file":"index.js"}