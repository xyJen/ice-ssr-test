{"version":3,"sources":["../../../src/Placeholder/inlinePlaceholder.tsx"],"names":["InlinePlaceholderWrapper","styled","span","theme","inlinePlaceholder","props","isSelected","InlinePlaceholder","React","PureComponent","renderText","node","name","data","placeholderText","render","attributes","text"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;;AAIrB,MAAMA,wBAAwB,gBAAGC,0BAAOC,IAAV,wGACjC,6CAA6BC,iBAAMC,iBAAnC,CADiC,EAKlBC,KAAD,IAAYA,KAAK,CAACC,UAAN,GAAmB,SAAnB,GAA+B,SALxB,CAA9B;;;;AAkBA,MAAMC,iBAAN,SAAgCC,eAAMC,aAAtC,CAA4D;AAAA;AAAA;;AAAA,SACjEC,UADiE,GACpD,MAAM;AACjB,YAAM;AAAEA,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAAuB,KAAKN,KAAlC;AACA,YAAM;AAAEO,QAAAA;AAAF,UAAWD,IAAI,CAACE,IAAtB;AACA,UAAIC,eAAe,GAAG,EAAtB;;AACA,UAAI,OAAOJ,UAAP,KAAsB,UAA1B,EAAsC;AACpCI,QAAAA,eAAe,GAAGJ,UAAU,CAACE,IAAD,CAA5B;AACD;;AACD,aAAOE,eAAe,IAAK,GAAEF,IAAI,IAAI,EAAG,OAAxC;AACD,KATgE;AAAA;;AAWjEG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,UAAF;AAAcV,MAAAA;AAAd,QAA6B,KAAKD,KAAxC;AACA,UAAMY,IAAI,GAAG,KAAKP,UAAL,EAAb;AACA,wBACE,eAAC,wBAAD,6BACMM,UADN;AAEE,MAAA,UAAU,EAAEV,UAFd;AAGE,MAAA,KAAK,EAAEW;AAHT,QAKGA,IALH,CADF;AASD;;AAvBgE","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { transformThemeObjToCssString, theme } from '@ali/4ever-utils';\nimport type { Controller } from '@ali/4ever-cangjie';\n\nexport const InlinePlaceholderWrapper = styled.span<{isSelected?: boolean}>`\n  ${transformThemeObjToCssString(theme.inlinePlaceholder)}\n  color: #A0A5AB;\n  background-color: #F2F4F5;\n  border-style: solid;\n  border-color: ${(props) => (props.isSelected ? '#D9DBDD' : '#ECEDEF')};\n  white-space: pre;\n`;\n\n\ninterface IProps {\n  renderText?: (name: string) => string;\n  node: any;\n  attributes: any;\n  isSelected: boolean;\n  editor?: Controller;\n}\n\nexport class InlinePlaceholder extends React.PureComponent<IProps> {\n  renderText = () => {\n    const { renderText, node } = this.props;\n    const { name } = node.data;\n    let placeholderText = '';\n    if (typeof renderText === 'function') {\n      placeholderText = renderText(name);\n    }\n    return placeholderText || `${name || ''}暂无法解析`;\n  };\n\n  render() {\n    const { attributes, isSelected } = this.props;\n    const text = this.renderText();\n    return (\n      <InlinePlaceholderWrapper\n        {...attributes}\n        isSelected={isSelected}\n        title={text}\n      >\n        {text}\n      </InlinePlaceholderWrapper>\n    );\n  }\n}\n"],"file":"inlinePlaceholder.js"}