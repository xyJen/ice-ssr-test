"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Placeholder = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _PlaceholderInlineToolbar = _interopRequireDefault(require("./PlaceholderInlineToolbar"));

var _lodash = require("lodash");

var _bambooPlaceholder = require("./bambooPlaceholder");

const _createElement = /*#__PURE__*/_react.default.createElement;

class Placeholder extends _react.default.Component {
  constructor(props) {
    super(props);
    this.placeholderRef = void 0;

    this.isSelected = () => {
      const {
        isSelected,
        editor
      } = this.props;
      const {
        isCollapsed
      } = editor.value.selection;
      return isSelected && isCollapsed;
    };

    this.renderText = () => {
      const {
        renderText,
        node
      } = this.props;
      const {
        name
      } = node.data;
      let placeholderText = '';

      if (typeof renderText === 'function') {
        placeholderText = renderText(name);
      }

      return placeholderText || `${name || ''}暂无法解析`;
    };

    this.placeholderRef = /*#__PURE__*/_react.default.createRef();
  }

  shouldComponentUpdate(nextProps) {
    const {
      props
    } = this;
    const isChange = !(0, _lodash.isEqual)({
      isSelected: nextProps.isSelected,
      isCollapsed: nextProps.editor.value.selection.isCollapsed,
      renderText: nextProps.renderText,
      node: nextProps.node
    }, {
      isSelected: props.isSelected,
      isCollapsed: props.editor.value.selection.isCollapsed,
      renderText: props.renderText,
      node: props.node
    });
    return isChange;
  }

  render() {
    const {
      attributes,
      isSelected,
      handleRemoveNode
    } = this.props;
    const text = this.renderText();
    const isCurrSelected = this.isSelected();
    return /*#__PURE__*/_createElement(_react.default.Fragment, null, isCurrSelected ? /*#__PURE__*/_createElement(_PlaceholderInlineToolbar.default, {
      handleRemovePlaceholder: handleRemoveNode,
      triggerNode: this.placeholderRef.current
    }) : null, /*#__PURE__*/_createElement(_bambooPlaceholder.PlaceholderWrapper, (0, _extends2.default)({
      ref: this.placeholderRef
    }, attributes, {
      isSelected: isSelected,
      title: text
    }), text));
  }

}

exports.Placeholder = Placeholder;
//# sourceMappingURL=placeholder.js.map