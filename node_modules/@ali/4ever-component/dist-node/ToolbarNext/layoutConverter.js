"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertSingleLayout = convertSingleLayout;
exports.convertDoubleLayout = convertDoubleLayout;
exports.convertGroup = convertGroup;
exports.convertDoubleLine = convertDoubleLine;
exports.convertLine = convertLine;
exports.convertItem = convertItem;

var _utils = require("./utils");

var _buildToolbarItem = require("./buildToolbarItem");

var _react = _interopRequireDefault(require("react"));

function convertSingleLayout(layout, context) {
  const toolbarConfig = layout.map(line => convertLine(line, false, context));
  const items = toolbarConfig.filter(config => config?.length > 0);
  const result = [];

  for (let index = 0; index < items.length; index++) {
    const item = items[index];
    result.push(item);

    if (index < items.length - 1) {
      result.push('divider');
    }
  }

  return result;
}

function convertDoubleLayout(layout, context) {
  const toolbarConfig = layout.map(group => convertGroup(group, context));
  const items = toolbarConfig.filter(config => config?.length > 0);
  const result = [];

  for (let index = 0; index < items.length; index++) {
    const itemArray = items[index];

    for (const item of itemArray) {
      result.push(item);
    }

    if (index < items.length - 1) {
      result.push('divider');
    }
  }

  return result;
}

function convertGroup(group, context) {
  const {
    hideTargets = [],
    disableTargets = [],
    blocks
  } = group;
  const {
    targets
  } = context;
  const shouldHide = (0, _utils.areArraysIntersected)(targets, hideTargets);

  if (shouldHide) {
    return [];
  }

  const shouldDisable = (0, _utils.areArraysIntersected)(targets, disableTargets);
  const blockConfigs = blocks.map(block => {
    if (isDoubleLine(block)) {
      return convertDoubleLine(block, shouldDisable, context);
    }

    return convertLine(block, shouldDisable, context);
  });
  return blockConfigs.filter(config => config?.length > 0);
}

function isDoubleLine(lineOrDoubleLine) {
  return Array.isArray(lineOrDoubleLine['lines']);
}

function convertDoubleLine(block, disable, context) {
  const {
    hideTargets = [],
    disableTargets = [],
    lines
  } = block;
  const {
    targets
  } = context;
  const shouldHide = disable || (0, _utils.areArraysIntersected)(targets, hideTargets);

  if (shouldHide) {
    return [];
  }

  const shouldDisable = (0, _utils.areArraysIntersected)(targets, disableTargets);
  const lineConfigs = lines.map(line => convertLine(line, shouldDisable, context));
  return lineConfigs;
}

function convertLine(line, disable, context) {
  const {
    targets
  } = context;
  const {
    hideTargets = [],
    disableTargets = [],
    items
  } = line;
  const shouldHide = (0, _utils.areArraysIntersected)(targets, hideTargets);

  if (shouldHide) {
    return [];
  }

  const shouldDisable = disable || (0, _utils.areArraysIntersected)(targets, disableTargets);
  const itemConfigs = items.map(item => convertItem(item, shouldDisable, context));
  return itemConfigs.filter(_react.default.isValidElement);
}

function convertItem(item, disable, context) {
  const {
    targets,
    controller,
    plugins,
    customButtons
  } = context;
  const {
    hideTargets = [],
    disableTargets = [],
    name,
    disabled: disabledFromConfig,
    ...rest
  } = item;
  const shouldHide = (0, _utils.areArraysIntersected)(targets, hideTargets);

  if (shouldHide) {
    return null;
  }

  const shouldDisable = disabledFromConfig || disable || (0, _utils.areArraysIntersected)(targets, disableTargets);
  const extroProps = shouldDisable ? {
    disabled: shouldDisable,
    key: name,
    ...rest
  } : {
    key: name,
    ...rest
  };
  return (0, _buildToolbarItem.buildToolbarItem)(plugins, controller, name, customButtons, extroProps);
}
//# sourceMappingURL=layoutConverter.js.map