{"version":3,"sources":["../../../src/ToolbarNext/HeadingToolbar.tsx"],"names":["HeadingToolbar","props","disableTargets","defaultDisableTargets","doubleLayout","propDoubleLayout","defaultDoubleLayout","singleLayout","propSingleLayout","defaultSingleLayout","style","propStyle","allowSwitch","onSwitchModeClick","mode","propMode","rest","controller","Controller","useController","maxPending","plugins","React","useMemo","padding","innerMode","setInnerMode","useState","HeaderToolbarMode","single","double","undefined","handleSwitch","useCallback","modeType"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;uBAJ4B,a;;AAUrB,MAAMA,cAAyC,GAAIC,KAAD,IAAW;AAClE,QAAM;AACJC,IAAAA,cAAc,GAAGC,6BADb;AAEJC,IAAAA,YAAY,EAAEC,gBAAgB,GAAGC,2BAF7B;AAGJC,IAAAA,YAAY,EAAEC,gBAAgB,GAAGC,2BAH7B;AAIJC,IAAAA,KAAK,EAAEC,SAJH;AAKJC,IAAAA,WAAW,GAAG,IALV;AAMJC,IAAAA,iBANI;AAOJC,IAAAA,IAAI,EAAEC,QAPF;AAQJ,OAAGC;AARC,MASFf,KATJ;;AAWA,QAAMgB,UAAU,GAAGC,wBAAWC,aAAX,CAAyB;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAAzB,CAAnB;;AACA,QAAMC,OAAO,GAAG,iCAAhB;AACA,QAAMX,KAAK,GAAGY,KAAK,CAACC,OAAN,CAAc,OAAO;AACjCC,IAAAA,OAAO,EAAE,UADwB;AAEjC,OAAGb;AAF8B,GAAP,CAAd,EAGV,CAACA,SAAD,CAHU,CAAd;AAKA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4BJ,KAAK,CAACK,QAAN,CAAiCC,6BAAkBC,MAAnD,CAAlC;AAEA,QAAMf,IAAI,GAAGC,QAAQ,IAAIU,SAAzB;AAEA,QAAMrB,YAAY,GAAGQ,WAAW,GAAGP,gBAAH,GAAuBS,IAAI,KAAKc,6BAAkBE,MAA3B,GAAoCzB,gBAApC,GAAuD0B,SAA9G;AACA,QAAMxB,YAAY,GAAGK,WAAW,GAAGJ,gBAAH,GAAuBM,IAAI,KAAKc,6BAAkBC,MAA3B,GAAoCrB,gBAApC,GAAuDuB,SAA9G;AAEA,QAAMC,YAAY,GAAGV,KAAK,CAACW,WAAN,CAAmBC,QAAD,IAA6C;AAClFR,IAAAA,YAAY,CAACQ,QAAD,CAAZ;;AACA,QAAIrB,iBAAJ,EAAuB;AACrBA,MAAAA,iBAAiB,CAACqB,QAAD,CAAjB;AACD;AACF,GALoB,EAKlB,CAACrB,iBAAD,CALkB,CAArB;AAOA,sBACE,eAAC,0BAAD;AACE,IAAA,cAAc,EAAEX,cADlB;AAEE,IAAA,YAAY,EAAEE,YAFhB;AAGE,IAAA,YAAY,EAAEG,YAHhB;AAIE,IAAA,KAAK,EAAEG,KAJT;AAKE,IAAA,IAAI,EAAEI,IALR;AAME,IAAA,iBAAiB,EAAEkB;AANrB,KAOMhB,IAPN;AAQE,IAAA,UAAU,EAAEC,UARd;AASE,IAAA,OAAO,EAAEI;AATX,KADF;AAaD,CA9CM","sourcesContent":["import * as React from 'react';\nimport { HeaderToolbarMode, IToolBar } from './interface';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { usePlugins } from '../PluginsContext';\nimport { BasicToolbar } from './BasicToolbar';\nimport { defaultDisableTargets, defaultDoubleLayout, defaultSingleLayout } from './config';\n\nexport interface IHeadingToolbar extends Partial<IToolBar> {\n  allowSwitch?: boolean;\n}\n\nexport const HeadingToolbar: React.FC<IHeadingToolbar> = (props) => {\n  const {\n    disableTargets = defaultDisableTargets,\n    doubleLayout: propDoubleLayout = defaultDoubleLayout,\n    singleLayout: propSingleLayout = defaultSingleLayout,\n    style: propStyle,\n    allowSwitch = true,\n    onSwitchModeClick,\n    mode: propMode,\n    ...rest\n  } = props;\n\n  const controller = Controller.useController({ maxPending: 10 });\n  const plugins = usePlugins();\n  const style = React.useMemo(() => ({\n    padding: '4px 24px',\n    ...propStyle\n  }), [propStyle]);\n\n  const [innerMode, setInnerMode] = React.useState<IToolBar['mode']>(HeaderToolbarMode.single);\n\n  const mode = propMode || innerMode\n\n  const doubleLayout = allowSwitch ? propDoubleLayout : (mode === HeaderToolbarMode.double ? propDoubleLayout : undefined);\n  const singleLayout = allowSwitch ? propSingleLayout : (mode === HeaderToolbarMode.single ? propSingleLayout : undefined);\n\n  const handleSwitch = React.useCallback((modeType: NonNullable<IToolBar['mode']>) => {\n    setInnerMode(modeType)\n    if (onSwitchModeClick) {\n      onSwitchModeClick(modeType);\n    }\n  }, [onSwitchModeClick]);\n\n  return (\n    <BasicToolbar\n      disableTargets={disableTargets}\n      doubleLayout={doubleLayout}\n      singleLayout={singleLayout}\n      style={style}\n      mode={mode}\n      onSwitchModeClick={handleSwitch}\n      {...rest}\n      controller={controller}\n      plugins={plugins}\n    />\n  )\n}\n"],"file":"HeadingToolbar.js"}