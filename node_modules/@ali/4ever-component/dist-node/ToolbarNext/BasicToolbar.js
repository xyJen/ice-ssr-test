"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasicToolbar = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _weDesignNext = require("@ali/we-design-next");

var _interface = require("./interface");

var _utils = require("./utils");

var _layoutConverter = require("./layoutConverter");

const _createElement = /*#__PURE__*/React.createElement;

const ToolbarWrapper = /*#__PURE__*/_styledComponents.default.div(["position:relative;"]);

function convertToolbarMode(mode) {
  if (mode === _interface.HeaderToolbarMode.double) {
    return 'doubleLine';
  }

  return 'singleLine';
}

function convertBackToolbarMode(mode) {
  if (mode === 'doubleLine') {
    return _interface.HeaderToolbarMode.double;
  }

  return _interface.HeaderToolbarMode.single;
}

const disabledStyle = {
  opacity: 0.35,
  pointerEvents: 'none'
};

const BasicToolbar = props => {
  const {
    controller,
    plugins,
    singleLayout,
    doubleLayout,
    mode,
    disableTargets = [],
    hideTargets = [],
    customButtons = {},
    onSwitchModeClick,
    ...rest
  } = props;
  const {
    value
  } = controller;
  const {
    selection
  } = value;
  const pluginsArray = plugins?.array || [];
  const [currentTarget, setCurrentTargets] = React.useState([]);
  /**
   * 从插件查询哪个插件被选中（暂不支持多个插件同时识别）
   * 通过调用插件 getTarget 实现
   */

  const targets = React.useMemo(() => {
    const results = [];

    for (let i = 0; i < pluginsArray.length; i += 1) {
      const plugin = pluginsArray[i];
      const getTarget = plugin.toolbar?.getTarget;

      if (getTarget && typeof getTarget === 'function') {
        const tgt = getTarget(controller);

        if (tgt && !results.includes(tgt)) {
          results.push(tgt);
        }
      }
    }

    return results;
  }, [pluginsArray, selection]);
  React.useEffect(() => {
    if (currentTarget !== targets && !(0, _utils.areArraysContentEqual)(currentTarget, targets)) {
      setCurrentTargets(targets);
    }
  }, [currentTarget, targets]);
  const singleLineToolbar = singleLayout && (0, _layoutConverter.convertSingleLayout)(singleLayout, {
    controller,
    plugins,
    targets: currentTarget,
    customButtons
  });
  const doubleLineToolbar = doubleLayout && (0, _layoutConverter.convertDoubleLayout)(doubleLayout, {
    controller,
    plugins,
    targets: currentTarget,
    customButtons
  });

  if ((0, _utils.areArraysIntersected)(currentTarget, hideTargets)) {
    return null;
  }

  const shouldDisable = (0, _utils.areArraysIntersected)(currentTarget, disableTargets);
  const style = React.useMemo(() => {
    if (shouldDisable) {
      return disabledStyle;
    }

    return {};
  }, [shouldDisable]);
  const handleMouseDown = React.useCallback(ev => {
    const {
      activeElement
    } = window.document; // 对于有自定义输入域的不可编辑对象，不阻止其失焦行为

    if (activeElement && activeElement.closest('[data-cangjie-not-editable]')) {
      return;
    }

    if (ev.target?.tagName?.toLocaleLowerCase() !== 'input') {
      // 放过input，以便输入地方可以正常输入
      ev.preventDefault && ev.preventDefault(); // 允许工具栏子节点上元素点击冒泡，避免下拉菜单无法收起
      // ev.stopPropagation && ev.stopPropagation();
    }
  }, []);
  const handleModeChange = React.useCallback(modeType => {
    if (onSwitchModeClick) {
      const type = convertBackToolbarMode(modeType);
      onSwitchModeClick(type);
    }
  }, [onSwitchModeClick]);
  return /*#__PURE__*/_createElement(ToolbarWrapper, {
    style: style,
    onMouseDown: handleMouseDown,
    "data-role": 'toolbar',
    className: `bi-toolbar ${mode === _interface.HeaderToolbarMode.double ? 'double' : 'single'}`
  }, /*#__PURE__*/_createElement(_weDesignNext.ToolbarLayout, (0, _extends2.default)({
    mode: convertToolbarMode(mode),
    singleLineToolbar: singleLineToolbar,
    doubleLineToolbar: doubleLineToolbar,
    onModeChange: handleModeChange
  }, rest)));
};

exports.BasicToolbar = BasicToolbar;
//# sourceMappingURL=BasicToolbar.js.map