{"version":3,"sources":["../../../src/ToolbarNext/interface.ts"],"names":["ItemState","HeaderToolbarMode"],"mappings":";;;;;;;AAKA;AACA;AACA;;AAMA;AACA;AACA;;AAYA;AACA;AACA;IAMYA,S;;;WAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,yBAAAA,S;;IA4BAC,iB;;;WAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,iCAAAA,iB","sourcesContent":["import * as React from 'react';\nimport type { Controller } from '@ali/4ever-cangjie';\nimport type { ItemKeys } from './ItemKeys';\nimport type { ITBIconButtonProps, ToolbarLayout } from '@ali/we-design-next';\nimport { IRenderHoverToolbar } from './renderHoverToolbar';\n/**\n * 基础的 toolbar 按钮，可以使用声明方式直接创建\n */\nexport type IBasicButton = Pick<ITBIconButtonProps, 'disabled' | 'title' | 'tooltip' | 'testid' | 'badgeDot' | 'role' | 'icon' | 'active'> & {\n  // 按钮的点击响应事件\n  onClick?: (controller: Controller) => void;\n};\n\n/**\n * toolbar 按钮的配置\n */\nexport type IToolbarButtonConfig = Partial<Pick<IBasicButton, 'disabled' | 'icon' | 'badgeDot' | 'title'>> & {\n  // 唯一标识，react 数组渲染使用\n  key?: string;\n  tooltip?: {\n    title?: string;\n    description?: string;\n    image?: string;\n  }\n}\n\n\n/**\n * 兼容现在 getTarget 逻辑, 允许在配置中对按钮进行禁用或者隐藏\n */\nexport interface IUnderControlItem {\n  hideTargets?: string[];\n  disableTargets?: string[];\n}\n\nexport enum ItemState {\n  'hidden',\n  'disabled',\n  'visiable'\n}\n\nexport interface IToolbarItem extends IUnderControlItem, IToolbarButtonConfig {\n  // pluginName.buttonName\n  name: ItemKeys | string,\n}\n\nexport interface IToolbarItemLine extends IUnderControlItem {\n  items: IToolbarItem[]\n}\n\nexport type ISingleLineLayout = IToolbarItemLine[]\n\nexport interface IToolbarItemDoubleLine extends IUnderControlItem {\n  lines: [IToolbarItemLine, IToolbarItemLine]\n}\n\nexport interface IToolbarItemGroup extends IUnderControlItem {\n  blocks: (IToolbarItemLine | IToolbarItemDoubleLine)[]\n}\n\nexport type IDoubleLineLayout = IToolbarItemGroup[]\n\n\nexport enum HeaderToolbarMode {\n  'single' = 'single',\n  'double' = 'double',\n}\n\nexport interface IToolBar extends IUnderControlItem, Pick<React.ComponentProps<typeof ToolbarLayout>, 'onLayoutRender'> {\n  singleLayout?: ISingleLineLayout,\n  doubleLayout?: IDoubleLineLayout,\n  customButtons?: Partial<Record<ItemKeys | string, (props: { extraProps?: IToolbarButtonConfig & Record<string, any> }, controller: Controller,)\n    => IBasicButton | React.ReactElement<IToolbarButtonConfig> | null>>,\n  mode: HeaderToolbarMode,\n  onSwitchModeClick?: (targetMode: HeaderToolbarMode) => void,\n  style?: React.CSSProperties,\n  align?: 'left' | 'center',\n}\n\n\nexport type RenderToolbar = (props: { buttonName: ItemKeys | string, extraProps?: IToolbarButtonConfig & Record<string, any> }, controller: Controller,)\n  => IBasicButton | React.ReactElement<IToolbarButtonConfig> | null\n\n\ndeclare module '@ali/4ever-cangjie' {\n  interface BiPlugin {\n    toolbar?: any;\n    renderToolbar?: RenderToolbar;\n    renderHoverToolbar?: IRenderHoverToolbar;\n  }\n}\n"],"file":"interface.js"}