{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/complexColorIconMenu/complexColorIconMenu.tsx"],"names":["ComplexColorIconMenu","props","getContainer","onOverlayVisibleChange","onOverlayVisibleChangeProp","isOverlayVisible","isOverlayVisibleProp","tooltip","role","rest","isOverLayoutVisibleState","onOverLayoutVisibleChangeState","React","useState","onOverLayoutVisibleChange","useCallback","v","undefined","isOverLayoutVisible"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;uBAF4B,a;;wBAyCd,eAAC,kBAAD,O;;AA7BP,MAAMA,oBAAmD,GAAIC,KAAD,IAAW;AAC5E,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,sBAAsB,EAAEC,0BAAxC;AAAoEC,IAAAA,gBAAgB,EAAEC,oBAAtF;AAA4GC,IAAAA,OAA5G;AAAqHC,IAAAA,IAArH;AAA2H,OAAGC;AAA9H,MAAuIR,KAA7I;;AACA,QAAM,CAACS,wBAAD,EAA2BC,8BAA3B,IAA6DC,eAAMC,QAAN,CAAe,KAAf,CAAnE;;AAEA,QAAMC,yBAAyB,GAAGF,eAAMG,WAAN,CAAmBC,CAAD,IAAgB;AAClE,QAAIV,oBAAoB,KAAKW,SAA7B,EAAwC;AACtCN,MAAAA,8BAA8B,CAACK,CAAD,CAA9B;AACD;;AACDZ,IAAAA,0BAA0B,IAAIA,0BAA0B,CAACY,CAAD,CAAxD;AACD,GALiC,EAK/B,CAACV,oBAAD,EAAuBF,0BAAvB,CAL+B,CAAlC;;AAOA,QAAMc,mBAAmB,GAAGZ,oBAAoB,KAAKW,SAAzB,GAAqCX,oBAArC,GAA4DI,wBAAxF;AAEA,sBACE,eAAC,qBAAD;AACE,IAAA,OAAO,EAAEQ,mBADX;AAEE,IAAA,eAAe,EAAEJ,yBAFnB;AAGE,IAAA,OAAO,eACL,eAAC,sBAAD,EACML,IADN,CAJJ;AAQE,IAAA,YAAY,EAAEP,YARhB;AASE,IAAA,SAAS,EAAC;AATZ,kBAWE,eAAC,0BAAD;AACE,IAAA,OAAO,EAAE,MAAM;AACbY,MAAAA,yBAAyB,CAAC,CAACI,mBAAF,CAAzB;AACD,KAHH;AAIE,IAAA,IAAI,MAJN;AAKE,IAAA,OAAO,EAAEA,mBAAmB,GAAGD,SAAH,GAAeV,OAL7C;AAME,IAAA,IAAI,EAAEC,IANR;AAOE,IAAA,MAAM,EAAEU;AAPV,IAXF,CADF;AAuBD,CApCM","sourcesContent":["import React from 'react';\nimport { TBIconButton, Popover } from '@ali/we-design-next';\nimport { IconPalette } from '../icons';\nimport { IColorPanelProps, ColorPanel } from './colorPanel';\n\nexport interface IColorIconMenuProps extends IColorPanelProps {\n  getContainer?: () => HTMLElement;\n  onOverlayVisibleChange?: (v: boolean) => void;\n  isOverlayVisible?: boolean;\n  tooltip?: string;\n  role?: string;\n}\n\nexport const ComplexColorIconMenu: React.FC<IColorIconMenuProps> = (props) => {\n  const { getContainer, onOverlayVisibleChange: onOverlayVisibleChangeProp, isOverlayVisible: isOverlayVisibleProp, tooltip, role, ...rest } = props;\n  const [isOverLayoutVisibleState, onOverLayoutVisibleChangeState] = React.useState(false);\n\n  const onOverLayoutVisibleChange = React.useCallback((v: boolean) => {\n    if (isOverlayVisibleProp === undefined) {\n      onOverLayoutVisibleChangeState(v);\n    }\n    onOverlayVisibleChangeProp && onOverlayVisibleChangeProp(v);\n  }, [isOverlayVisibleProp, onOverlayVisibleChangeProp]);\n\n  const isOverLayoutVisible = isOverlayVisibleProp !== undefined ? isOverlayVisibleProp : isOverLayoutVisibleState;\n\n  return (\n    <Popover\n      visible={isOverLayoutVisible}\n      onVisibleChange={onOverLayoutVisibleChange}\n      content={\n        <ColorPanel\n          {...rest}\n        />\n      }\n      getContainer={getContainer}\n      placement=\"bottomLeft\"\n    >\n      <TBIconButton\n        onClick={() => {\n          onOverLayoutVisibleChange(!isOverLayoutVisible);\n        }}\n        icon={<IconPalette/>}\n        tooltip={isOverLayoutVisible ? undefined : tooltip}\n        role={role}\n        active={isOverLayoutVisible}\n      />\n    </Popover>\n  );\n}"],"file":"complexColorIconMenu.js"}