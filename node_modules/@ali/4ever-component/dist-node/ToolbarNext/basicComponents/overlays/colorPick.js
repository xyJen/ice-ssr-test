"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseColorPicker = void 0;

var _react = _interopRequireDefault(require("react"));

var _weDesignNext = require("@ali/we-design-next");

const _createElement = /*#__PURE__*/_react.default.createElement;

const BaseColorPicker = props => {
  const {
    autoColor,
    onVisibleChange: onChangeVisibleProp,
    overlayVisible: overlayVisibleProp,
    currentPreset,
    color,
    onColorChange,
    onCurrentPresetChange,
    recentColors,
    title,
    useSubColor,
    useColor,
    icon,
    getContainer,
    testid,
    role
  } = props;

  const [overlayVisibleState, changeOverlayVisibleState] = _react.default.useState(false);

  const [currentColor, setCurrentColor] = _react.default.useState(color);

  const handleOverlayVisible = _react.default.useCallback(v => {
    if (overlayVisibleProp === undefined) {
      changeOverlayVisibleState(v);
    }

    onChangeVisibleProp && onChangeVisibleProp(v);
  }, [changeOverlayVisibleState]);

  const handleColorChange = _react.default.useCallback((color, options) => {
    if (color && !options.intermediate) {
      setCurrentColor(color);
      onColorChange(color);
      handleOverlayVisible(false);
    }
  }, [handleOverlayVisible]);

  const iconWithColor = /*#__PURE__*/_react.default.cloneElement(icon, {
    subColor: useSubColor ? currentColor : undefined,
    color: useColor ? currentColor : undefined
  });

  const isOverlayVisible = overlayVisibleProp !== undefined ? overlayVisibleProp : overlayVisibleState;
  return /*#__PURE__*/_createElement(_weDesignNext.TBIconMenu, {
    overlayVisible: isOverlayVisible,
    onVisibleChange: handleOverlayVisible,
    icon: iconWithColor,
    title: title,
    tooltip: title,
    overlay: /*#__PURE__*/_createElement(_weDesignNext.ColorPicker, {
      color: currentColor,
      onColorChange: handleColorChange,
      recentColors: recentColors,
      currentPreset: currentPreset,
      onCurrentPresetChange: onCurrentPresetChange,
      autoColor: autoColor,
      advance: true
    }),
    autoClose: false,
    getContainer: getContainer,
    testid: testid,
    role: role
  });
};

exports.BaseColorPicker = BaseColorPicker;
//# sourceMappingURL=colorPick.js.map