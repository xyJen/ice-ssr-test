{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/overlays/colorPick.tsx"],"names":["BaseColorPicker","props","autoColor","onVisibleChange","onChangeVisibleProp","overlayVisible","overlayVisibleProp","currentPreset","color","onColorChange","onCurrentPresetChange","recentColors","title","useSubColor","useColor","icon","getContainer","testid","role","overlayVisibleState","changeOverlayVisibleState","React","useState","currentColor","setCurrentColor","handleOverlayVisible","useCallback","v","undefined","handleColorChange","options","intermediate","iconWithColor","cloneElement","subColor","isOverlayVisible"],"mappings":";;;;;;;;;AAAA;;AACA;;uBAA4B,a;;AAiBrB,MAAMA,eAAgD,GAAIC,KAAD,IAAW;AACzE,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,eAAe,EAAEC,mBAA9B;AAAmDC,IAAAA,cAAc,EAAEC,kBAAnE;AAAuFC,IAAAA,aAAvF;AAAsGC,IAAAA,KAAtG;AAA6GC,IAAAA,aAA7G;AAA4HC,IAAAA,qBAA5H;AAAmJC,IAAAA,YAAnJ;AAAiKC,IAAAA,KAAjK;AAAwKC,IAAAA,WAAxK;AAAqLC,IAAAA,QAArL;AAA+LC,IAAAA,IAA/L;AAAqMC,IAAAA,YAArM;AAAmNC,IAAAA,MAAnN;AAA2NC,IAAAA;AAA3N,MAAoOjB,KAA1O;;AACA,QAAM,CAACkB,mBAAD,EAAsBC,yBAAtB,IAAmDC,eAAMC,QAAN,CAAe,KAAf,CAAzD;;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,eAAMC,QAAN,CAAed,KAAf,CAAxC;;AAEA,QAAMiB,oBAAoB,GAAGJ,eAAMK,WAAN,CAAmBC,CAAD,IAAgB;AAC7D,QAAIrB,kBAAkB,KAAKsB,SAA3B,EAAsC;AACpCR,MAAAA,yBAAyB,CAACO,CAAD,CAAzB;AACD;;AACDvB,IAAAA,mBAAmB,IAAIA,mBAAmB,CAACuB,CAAD,CAA1C;AACD,GAL4B,EAK1B,CAACP,yBAAD,CAL0B,CAA7B;;AAOA,QAAMS,iBAAqD,GAAGR,eAAMK,WAAN,CAAkB,CAAClB,KAAD,EAAQsB,OAAR,KAAoB;AAClG,QAAItB,KAAK,IAAI,CAACsB,OAAO,CAACC,YAAtB,EAAoC;AAClCP,MAAAA,eAAe,CAAChB,KAAD,CAAf;AACAC,MAAAA,aAAa,CAACD,KAAD,CAAb;AACAiB,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD;AACF,GAN6D,EAM3D,CAACA,oBAAD,CAN2D,CAA9D;;AAQA,QAAMO,aAAa,gBAAGX,eAAMY,YAAN,CAAmBlB,IAAnB,EAAyB;AAC7CmB,IAAAA,QAAQ,EAAErB,WAAW,GAAGU,YAAH,GAAkBK,SADM;AAE7CpB,IAAAA,KAAK,EAAEM,QAAQ,GAAGS,YAAH,GAAkBK;AAFY,GAAzB,CAAtB;;AAKA,QAAMO,gBAAgB,GAAG7B,kBAAkB,KAAKsB,SAAvB,GAAmCtB,kBAAnC,GAAwDa,mBAAjF;AAEA,sBACE,eAAC,wBAAD;AACE,IAAA,cAAc,EAAEgB,gBADlB;AAEE,IAAA,eAAe,EAAEV,oBAFnB;AAGE,IAAA,IAAI,EAAEO,aAHR;AAIE,IAAA,KAAK,EAAEpB,KAJT;AAKE,IAAA,OAAO,EAAEA,KALX;AAME,IAAA,OAAO,eACL,eAAC,yBAAD;AACE,MAAA,KAAK,EAAEW,YADT;AAEE,MAAA,aAAa,EAAEM,iBAFjB;AAGE,MAAA,YAAY,EAAElB,YAHhB;AAIE,MAAA,aAAa,EAAEJ,aAJjB;AAKE,MAAA,qBAAqB,EAAEG,qBALzB;AAME,MAAA,SAAS,EAAER,SANb;AAOE,MAAA,OAAO;AAPT,MAPJ;AAiBE,IAAA,SAAS,EAAE,KAjBb;AAkBE,IAAA,YAAY,EAAEc,YAlBhB;AAmBE,IAAA,MAAM,EAAEC,MAnBV;AAoBE,IAAA,IAAI,EAAEC;AApBR,IADF;AAwBD,CAnDM","sourcesContent":["import React from 'react';\nimport { TBIconMenu, ColorPicker } from '@ali/we-design-next';\n\ntype IColorPickerProps = React.ComponentProps<typeof ColorPicker>;\ntype ITBIconMenuProps = React.ComponentProps<typeof TBIconMenu>;\n\nexport interface IBaseColorPickerProps extends Pick<ITBIconMenuProps, 'onVisibleChange' | 'title' | 'icon' | 'overlayVisible'>, Pick<IColorPickerProps, 'autoColor' | 'onCurrentPresetChange' | 'currentPreset' | 'recentColors'> {\n  onColorChange: (color: string) => void;\n  color: string;\n  // 需要改变Icon subColor 颜色\n  useSubColor?: boolean;\n  // 需要改变Icon color 颜色\n  useColor?: boolean;\n  getContainer?: () => HTMLElement;\n  testid?: string;\n  role?: string;\n}\n\nexport const BaseColorPicker: React.FC<IBaseColorPickerProps> = (props) => {\n  const { autoColor, onVisibleChange: onChangeVisibleProp, overlayVisible: overlayVisibleProp, currentPreset, color, onColorChange, onCurrentPresetChange, recentColors, title, useSubColor, useColor, icon, getContainer, testid, role } = props;\n  const [overlayVisibleState, changeOverlayVisibleState] = React.useState(false);\n  const [currentColor, setCurrentColor] = React.useState(color);\n\n  const handleOverlayVisible = React.useCallback((v: boolean) => {\n    if (overlayVisibleProp === undefined) {\n      changeOverlayVisibleState(v);\n    }\n    onChangeVisibleProp && onChangeVisibleProp(v);\n  }, [changeOverlayVisibleState]);\n\n  const handleColorChange: IColorPickerProps['onColorChange'] = React.useCallback((color, options) => {\n    if (color && !options.intermediate) {\n      setCurrentColor(color);\n      onColorChange(color);\n      handleOverlayVisible(false);\n    }\n  }, [handleOverlayVisible]);\n\n  const iconWithColor = React.cloneElement(icon, {\n    subColor: useSubColor ? currentColor : undefined,\n    color: useColor ? currentColor : undefined,\n  });\n\n  const isOverlayVisible = overlayVisibleProp !== undefined ? overlayVisibleProp : overlayVisibleState;\n\n  return (\n    <TBIconMenu\n      overlayVisible={isOverlayVisible}\n      onVisibleChange={handleOverlayVisible}\n      icon={iconWithColor}\n      title={title}\n      tooltip={title}\n      overlay={\n        <ColorPicker\n          color={currentColor}\n          onColorChange={handleColorChange}\n          recentColors={recentColors}\n          currentPreset={currentPreset}\n          onCurrentPresetChange={onCurrentPresetChange}\n          autoColor={autoColor}\n          advance\n        />\n      }\n      autoClose={false}\n      getContainer={getContainer}\n      testid={testid}\n      role={role}\n    />\n  )\n}"],"file":"colorPick.js"}