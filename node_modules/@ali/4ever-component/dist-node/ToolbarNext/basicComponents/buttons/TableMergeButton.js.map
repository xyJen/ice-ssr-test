{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/buttons/TableMergeButton.tsx"],"names":["TableMergeButton","props","value","onChange","onClick","icon","options","active","rest","overlayVisible","setOverlayVisible","handleSelect","e","handleVisibleChange","visible","handleClickLeft","newValue","items","title","merged","key","selected","prefix","testid","unmerged","disabled","renderTriggerIcon"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;uBAF4B,a;;wBAiEW,eAAC,oBAAD,O;;yBAQE,eAAC,oBAAD,O;;yBAYP,eAAC,oBAAD,O;;yBAAoB,eAAC,oBAAD,O;;AA9D/C,MAAMA,gBAAkD,GAAIC,KAAD,IAAW;AAC3E,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA,MANI;AAOJ,OAAGC;AAPC,MAQFP,KARJ;AAWA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsC,qBAAS,KAAT,CAA5C;AAEA,QAAMC,YAAY,GAAG,wBACnB,CAAC,CAACC,CAAD,CAAD,KAAS;AACP,QAAIT,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACS,CAAD,CAAR;AACD;;AACDF,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,GANkB,EAOnB,CAACP,QAAD,CAPmB,CAArB;AAUA,QAAMU,mBAAmB,GAAG,wBAAaC,OAAD,IAAsB;AAC5DJ,IAAAA,iBAAiB,CAACI,OAAD,CAAjB;AACD,GAF2B,EAEzB,EAFyB,CAA5B;AAIA,QAAMC,eAAe,GAAG,wBAAY,MAAM;AACxC,QAAIX,OAAJ,EAAa;AACX,YAAMY,QAAQ,GAAGd,KAAK,KAAK,QAAV,GAAqB,UAArB,GAAkC,QAAnD;AACAE,MAAAA,OAAO,CAACY,QAAD,CAAP;AACD;AACF,GALuB,EAKrB,CAACZ,OAAD,EAAUF,KAAV,CALqB,CAAxB;AAOA,QAAMe,KAAsB,GAAG,oBAC7B,MAAM,CACJ;AACEC,IAAAA,KAAK,EAAEZ,OAAO,CAACa,MAAR,CAAeD,KADxB;AAEEhB,IAAAA,KAAK,EAAE,QAFT;AAGEkB,IAAAA,GAAG,EAAE,QAHP;AAIEC,IAAAA,QAAQ,EAAEnB,KAAK,KAAK,QAJtB;AAKEoB,IAAAA,MAAM,EAAEhB,OAAO,CAACa,MAAR,CAAed,IAAf,QALV;AAMEkB,IAAAA,MAAM,EAAE;AANV,GADI,EASJ;AACEL,IAAAA,KAAK,EAAEZ,OAAO,CAACkB,QAAR,CAAiBN,KAD1B;AAEEhB,IAAAA,KAAK,EAAE,UAFT;AAGEuB,IAAAA,QAAQ,EAAEvB,KAAK,KAAK,UAHtB;AAIEkB,IAAAA,GAAG,EAAE,UAJP;AAKEE,IAAAA,MAAM,EAAEhB,OAAO,CAACkB,QAAR,CAAiBnB,IAAjB,SALV;AAMEkB,IAAAA,MAAM,EAAE;AANV,GATI,CADuB,EAmB7B,CAACjB,OAAD,EAAUJ,KAAV,CAnB6B,CAA/B;AAsBA,QAAMwB,iBAAiB,GAAG,oBACxB,MAAM;AACJ,QAAIrB,IAAJ,EAAU;AACR,aAAOA,IAAP;AACD;;AACD,WAAOH,KAAK,KAAK,QAAV,gBAAP;AACD,GANuB,EAMrB,CAACA,KAAD,EAAQG,IAAR,CANqB,CAA1B;AASA,sBACE,eAAC,mBAAD;AACE,IAAA,OAAO,eACL,eAAC,YAAD;AACE,MAAA,KAAK,EAAEY,KADT;AAEE,MAAA,QAAQ,EAAEN;AAFZ,MAFJ;AAME,IAAA,MAAM,EAAC,iBANT;AAOE,IAAA,OAAO,EAAEI,eAPX;AAQE,IAAA,cAAc,EAAEN,cARlB;AASE,IAAA,eAAe,EAAEI,mBATnB;AAUE,IAAA,IAAI,EAAEa,iBAVR;AAWE,IAAA,MAAM,EAAEnB,MAAM,IAAIE;AAXpB,KAYMD,IAZN,EADF;AAgBD,CAlFM","sourcesContent":["import { IconMergeCell, IconSplitCell } from '../icons';\nimport React, { useMemo, useCallback, useState } from 'react';\n\nimport { Menu, SplitButton } from './Basics';\n\nexport type CellMergeStatus = 'unmerged' | 'merged';\n\ninterface ISelectOption {\n  title: string;\n  key: string;\n  value: CellMergeStatus;\n  prefix: React.ReactElement;\n  disabled?: boolean;\n  selected?: boolean;\n}\n\nexport interface ITableMergeButtonProps extends\n  Pick<Partial<React.ComponentProps<typeof SplitButton>>, 'onVisibleChange' | 'title' | 'tooltip' | 'icon' | 'disabled' | 'testid' | 'role' | 'active'> {\n  onChange?: (item: CellMergeStatus) => void;\n  onClick?: (item: CellMergeStatus) => void;\n  value: CellMergeStatus,\n  options: Record<CellMergeStatus, { title: string, icon?: React.ReactElement }>;\n}\n\nexport const TableMergeButton: React.FC<ITableMergeButtonProps> = (props) => {\n  const {\n    value,\n    onChange,\n    onClick,\n    icon,\n    options,\n    active,\n    ...rest\n  } = props;\n\n\n  const [overlayVisible, setOverlayVisible] = useState(false);\n\n  const handleSelect = useCallback(\n    ([e]) => {\n      if (onChange) {\n        onChange(e);\n      }\n      setOverlayVisible(false);\n    },\n    [onChange],\n  );\n\n  const handleVisibleChange = useCallback((visible: boolean) => {\n    setOverlayVisible(visible);\n  }, []);\n\n  const handleClickLeft = useCallback(() => {\n    if (onClick) {\n      const newValue = value === 'merged' ? 'unmerged' : 'merged';\n      onClick(newValue!);\n    }\n  }, [onClick, value]);\n\n  const items: ISelectOption[] = useMemo(\n    () => [\n      {\n        title: options.merged.title,\n        value: 'merged',\n        key: 'merged',\n        selected: value === 'merged',\n        prefix: options.merged.icon || <IconMergeCell />,\n        testid: 'option-merged',\n      },\n      {\n        title: options.unmerged.title,\n        value: 'unmerged',\n        disabled: value === 'unmerged',\n        key: 'unmerged',\n        prefix: options.unmerged.icon || <IconSplitCell />,\n        testid: 'option-unmerged',\n      },\n    ],\n    [options, value]\n  );\n\n  const renderTriggerIcon = useMemo(\n    () => {\n      if (icon) {\n        return icon;\n      }\n      return value === 'merged' ? <IconSplitCell /> : <IconMergeCell />;\n    }, [value, icon],\n  );\n\n  return (\n    <SplitButton\n      overlay={(\n        <Menu\n          items={items}\n          onSelect={handleSelect} />\n      )}\n      testid='MergeCellButton'\n      onClick={handleClickLeft}\n      overlayVisible={overlayVisible}\n      onVisibleChange={handleVisibleChange}\n      icon={renderTriggerIcon}\n      active={active || overlayVisible}\n      {...rest}\n    />\n  );\n};\n\n\n"],"file":"TableMergeButton.js"}