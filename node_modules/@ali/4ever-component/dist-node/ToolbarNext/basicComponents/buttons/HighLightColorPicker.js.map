{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/buttons/HighLightColorPicker.tsx"],"names":["SplitButtonWrapper","styled","div","HighlightColorPicker","props","onVisibleChange","currentPreset","color","onColorChange","onCurrentPresetChange","disabled","icon","testid","rest","isOverlayVisible","setOverlayVisible","React","useState","currentColor","setCurrentColor","localPreset","setLocalPreset","recentColors","addRecentColor","useEffect","curPreset","handleCurrentPresetChange","useCallback","mode","preset","handleOverlayVisible","v","handleColorChange","options","intermediate","fromSketch","handleLeftClick","formatIcon","StopEvent"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { SplitButton, ColorPicker } from './Basics';\nimport { IconPen } from '../icons';\nimport { keyToPreset, StopEvent, presetToKey } from './utils';\nimport { useRecentColors } from './hooks';\n\nconst SplitButtonWrapper = styled.div`\n  line-height: 0;\n  position: relative;\n`;\nexport interface IHighLightColorPickerProps extends\n  Pick<Partial<React.ComponentProps<typeof SplitButton>>, 'onVisibleChange' | 'title' | 'tooltip' | 'icon' | 'disabled' | 'testid' | 'role'> {\n  onColorChange: (color: string) => void;\n  currentPreset: 'normal' | 'art';\n  onCurrentPresetChange?: (mode: 'normal' | 'art') => void;\n  color: string;\n}\n\n\n\nexport const HighlightColorPicker = (props: IHighLightColorPickerProps) => {\n\n  const {\n    onVisibleChange,\n    currentPreset,\n    color,\n    onColorChange,\n    onCurrentPresetChange,\n    disabled,\n    icon,\n    testid,\n    ...rest\n  } = props;\n  const [isOverlayVisible, setOverlayVisible] = React.useState(false);\n  const [currentColor, setCurrentColor] = React.useState(color);\n  const [localPreset, setLocalPreset] = React.useState(currentPreset);\n\n  const [recentColors, addRecentColor] = useRecentColors();\n\n  React.useEffect(() => {\n    setLocalPreset(currentPreset);\n  }, [currentPreset]);\n\n  const curPreset = presetToKey(localPreset);\n\n  const handleCurrentPresetChange = React.useCallback((mode) => {\n\n    const preset = keyToPreset(mode);\n    onCurrentPresetChange?.(preset);\n    setLocalPreset(preset);\n\n  }, [onCurrentPresetChange]);\n\n  const handleOverlayVisible = React.useCallback((v: boolean) => {\n    onVisibleChange && onVisibleChange(v);\n    setOverlayVisible(v);\n  }, [onVisibleChange]);\n\n  const handleColorChange = React.useCallback((color, options) => {\n    if (!options.intermediate) {\n      setCurrentColor(color);\n      onColorChange(color);\n      addRecentColor(color);\n    }\n\n    if (!options.fromSketch) {\n      setOverlayVisible(false);\n    }\n  }, [onColorChange, recentColors]);\n\n  const handleLeftClick = React.useCallback(() => {\n    onColorChange(currentColor);\n  }, [onColorChange, currentColor]);\n\n  const formatIcon = useMemo(() => {\n    if (icon) {\n      return icon;\n    }\n    return (\n      <SplitButtonWrapper>\n        <IconPen subColor={currentColor} />\n      </SplitButtonWrapper>\n    );\n  }, [currentColor, disabled, icon])\n\n  return (\n    <SplitButton\n      onClick={handleLeftClick}\n      overlayVisible={isOverlayVisible}\n      onVisibleChange={handleOverlayVisible}\n      icon={formatIcon}\n      disabled={disabled}\n      overlay={\n        <ColorPicker\n          onClick={StopEvent}\n          color={currentColor}\n          onColorChange={handleColorChange}\n          recentColors={recentColors}\n          currentPreset={curPreset}\n          onCurrentPresetChange={handleCurrentPresetChange}\n          data-testid={testid ? testid + '-color-picker' : 'color-picker'}\n          advance\n        />\n      }\n      autoClose={false}\n      testid={testid}\n      {...rest}\n    />\n  )\n}\n"],"file":"HighLightColorPicker.js"}