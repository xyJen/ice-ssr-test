{"version":3,"sources":["../../../../../../src/ToolbarNext/basicComponents/buttons/borderSet/BorderSet.tsx"],"names":["DEFAULT_BORDER","layout","color","style","DEFAULT_PRESET","key","width","units","ICON_DEFAULT_COLOR","renderShowIcon","innerBorderType","stopEvent","e","stopPropagation","BorderSet","props","onChange","onLeftClick","rest","border","setBorder","pathColors","undefined","handleBorderChange","newBorder","handleClickLeft"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  IconTableBorder,\n  IconBorderBottom,\n  IconBorderInner,\n  IconBorderInnerHorizon,\n  IconBorderInnerVertical,\n  IconBorderLeft,\n  IconBorderNone,\n  IconBorderOuter,\n  IconBorderRight,\n  IconBorderTop,\n} from '../../icons';\nimport {\n  BorderSetWrapper,\n} from './styled';\nimport { BorderPicker, SplitButton } from '../Basics';\n\n\ntype IBorder = NonNullable<React.ComponentProps<typeof BorderPicker>['border']>\ntype IBorderStylePreset = NonNullable<React.ComponentProps<typeof BorderPicker>['preset']>\n\nconst DEFAULT_BORDER: IBorder = {\n  layout: 'all',\n  color: '#000000',\n  style: 'Thin'\n};\n\nconst DEFAULT_PRESET: IBorderStylePreset = [\n  {\n    key: 'Thin', style: { width: 1, units: [1] },\n  },\n  {\n    key: 'Medium', style: { width: 2, units: [1] },\n  },\n  {\n    key: 'Thick', style: { width: 3, units: [1] },\n  },\n  {\n    key: 'Dashed', style: { width: 1, units: [3, 2] },\n  },\n  {\n    key: 'MediumDashed', style: { width: 2, units: [9, 3] },\n  },\n];\n\nexport interface IBorderSetProps extends Pick<Partial<React.ComponentProps<typeof SplitButton>>, 'onVisibleChange' | 'title' | 'tooltip' | 'icon' | 'disabled' | 'testid' | 'role'> {\n  /**\n   * 边框属性发生变化时的回调\n   * changeProps: 发生变化的属性值\n   * allProps: BorderSet相关的所有属性集\n   */\n  onChange?: (\n    allProps: Required<IBorder>,\n  ) => void;\n  /**\n   * 点击左侧按钮的回调\n   */\n  onLeftClick?: (allProps: Required<IBorder>) => void;\n}\n\n\n\nconst ICON_DEFAULT_COLOR = 'rgba(58, 60, 63, 1)';\n\nconst renderShowIcon = (innerBorderType: IBorder['layout'], color) => {\n\n  switch (innerBorderType) {\n    case 'outer':\n      return <IconBorderOuter color={color} />;\n    case 'inner':\n      return <IconBorderInner color={color} />;\n    case 'all':\n      return <IconTableBorder color={color} />;\n    case 'left':\n      return <IconBorderLeft color={color} />;\n    case 'right':\n      return <IconBorderRight color={color} />;\n    case 'top':\n      return <IconBorderTop color={color} />;\n    case 'bottom':\n      return <IconBorderBottom color={color} />;\n    case 'none':\n      return <IconBorderNone color={color} />;\n    case 'horizon':\n      return <IconBorderInnerHorizon color={color} />;\n    case 'vertical':\n      return <IconBorderInnerVertical color={color} />;\n    default:\n      return <IconBorderNone color={color} />;\n  }\n};\n\nconst stopEvent = (e: React.MouseEvent) => e.stopPropagation();\n\n\nexport const BorderSet: React.FC<IBorderSetProps> = (props) => {\n  const { onChange, onLeftClick, ...rest } = props;\n\n  const [border, setBorder] = useState<IBorder>(DEFAULT_BORDER);\n\n  const pathColors = useMemo(() => {\n    return border.layout === 'none'\n      ? undefined\n      : border.color || ICON_DEFAULT_COLOR;\n  }, [border])\n\n\n  const handleBorderChange = useCallback((newBorder: IBorder) => {\n    setBorder(newBorder);\n    onChange?.(newBorder);\n  }, [onChange]);\n\n  const handleClickLeft = useCallback(() => {\n    onLeftClick?.(border);\n  }, [border, onLeftClick]);\n\n\n\n  return (\n    <SplitButton\n      testid={'BorderSet'}\n      overlay={(\n        <BorderSetWrapper >\n          <BorderPicker\n            border={border}\n            onBorderChange={handleBorderChange}\n            preset={DEFAULT_PRESET}\n          />\n        </BorderSetWrapper>\n      )}\n      icon={renderShowIcon(border.layout, pathColors)}\n      onClick={handleClickLeft}\n      // style={splitButtonStyle}\n      {...rest}\n    />)\n}\n\n"],"file":"BorderSet.js"}