"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BorderSet = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _icons = require("../../icons");

var _styled = require("./styled");

var _Basics = require("../Basics");

const _createElement = /*#__PURE__*/_react.default.createElement;
const DEFAULT_BORDER = {
  layout: 'all',
  color: '#000000',
  style: 'Thin'
};
const DEFAULT_PRESET = [{
  key: 'Thin',
  style: {
    width: 1,
    units: [1]
  }
}, {
  key: 'Medium',
  style: {
    width: 2,
    units: [1]
  }
}, {
  key: 'Thick',
  style: {
    width: 3,
    units: [1]
  }
}, {
  key: 'Dashed',
  style: {
    width: 1,
    units: [3, 2]
  }
}, {
  key: 'MediumDashed',
  style: {
    width: 2,
    units: [9, 3]
  }
}];
const ICON_DEFAULT_COLOR = 'rgba(58, 60, 63, 1)';

const renderShowIcon = (innerBorderType, color) => {
  switch (innerBorderType) {
    case 'outer':
      return /*#__PURE__*/_createElement(_icons.IconBorderOuter, {
        color: color
      });

    case 'inner':
      return /*#__PURE__*/_createElement(_icons.IconBorderInner, {
        color: color
      });

    case 'all':
      return /*#__PURE__*/_createElement(_icons.IconTableBorder, {
        color: color
      });

    case 'left':
      return /*#__PURE__*/_createElement(_icons.IconBorderLeft, {
        color: color
      });

    case 'right':
      return /*#__PURE__*/_createElement(_icons.IconBorderRight, {
        color: color
      });

    case 'top':
      return /*#__PURE__*/_createElement(_icons.IconBorderTop, {
        color: color
      });

    case 'bottom':
      return /*#__PURE__*/_createElement(_icons.IconBorderBottom, {
        color: color
      });

    case 'none':
      return /*#__PURE__*/_createElement(_icons.IconBorderNone, {
        color: color
      });

    case 'horizon':
      return /*#__PURE__*/_createElement(_icons.IconBorderInnerHorizon, {
        color: color
      });

    case 'vertical':
      return /*#__PURE__*/_createElement(_icons.IconBorderInnerVertical, {
        color: color
      });

    default:
      return /*#__PURE__*/_createElement(_icons.IconBorderNone, {
        color: color
      });
  }
};

const stopEvent = e => e.stopPropagation();

const BorderSet = props => {
  const {
    onChange,
    onLeftClick,
    ...rest
  } = props;
  const [border, setBorder] = (0, _react.useState)(DEFAULT_BORDER);
  const pathColors = (0, _react.useMemo)(() => {
    return border.layout === 'none' ? undefined : border.color || ICON_DEFAULT_COLOR;
  }, [border]);
  const handleBorderChange = (0, _react.useCallback)(newBorder => {
    setBorder(newBorder);
    onChange?.(newBorder);
  }, [onChange]);
  const handleClickLeft = (0, _react.useCallback)(() => {
    onLeftClick?.(border);
  }, [border, onLeftClick]);
  return /*#__PURE__*/_createElement(_Basics.SplitButton, (0, _extends2.default)({
    testid: 'BorderSet',
    overlay: /*#__PURE__*/_createElement(_styled.BorderSetWrapper, null, /*#__PURE__*/_createElement(_Basics.BorderPicker, {
      border: border,
      onBorderChange: handleBorderChange,
      preset: DEFAULT_PRESET
    })),
    icon: renderShowIcon(border.layout, pathColors),
    onClick: handleClickLeft // style={splitButtonStyle}

  }, rest));
};

exports.BorderSet = BorderSet;
//# sourceMappingURL=BorderSet.js.map