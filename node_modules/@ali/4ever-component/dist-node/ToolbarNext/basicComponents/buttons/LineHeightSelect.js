"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineHeightSelect = exports.LINE_HEIGHT_DEFAULT_VALUES = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _icons = require("../icons");

var _react = _interopRequireWildcard(require("react"));

var _Basics = require("./Basics");

const _createElement = /*#__PURE__*/_react.default.createElement;
const LINE_HEIGHT_DEFAULT_VALUES = [1, 1.15, 1.5, 2, 2.5, 3];
exports.LINE_HEIGHT_DEFAULT_VALUES = LINE_HEIGHT_DEFAULT_VALUES;
const CUSTOMIZE_KEY = 'CUSTOMIZE_KEY';

var _ref = /*#__PURE__*/_createElement(_icons.IconLineHeight, null);

const LineHeightSelect = props => {
  const {
    lineHeightValues = LINE_HEIGHT_DEFAULT_VALUES,
    disabled,
    onChange,
    onCustomize,
    title,
    value,
    customButtonTitle,
    testid,
    ...restProps
  } = props;

  const [overlayVisible, setOverlayVisible] = _react.default.useState(false);

  const items = (0, _react.useMemo)(() => {
    const options = lineHeightValues.map(key => ({
      key: String(key),
      selected: value === key,
      title: String(key),
      testid: `option-${key}`
    }));

    if (onCustomize) {
      options.push('divider');
      options.push({
        key: CUSTOMIZE_KEY,
        title: customButtonTitle || ''
      });
    }

    return options;
  }, [value, lineHeightValues, customButtonTitle, onCustomize]);
  const handleSelect = (0, _react.useCallback)(([v]) => {
    try {
      if (v === CUSTOMIZE_KEY && onCustomize) {
        onCustomize();
      } else {
        const data = Number(v);

        if (!Number.isNaN(data) && onChange) {
          onChange(data);
        }
      }

      setOverlayVisible(false);
    } catch {}
  }, [onChange, onCustomize]);
  return /*#__PURE__*/_createElement(_Basics.IconMenu, (0, _extends2.default)({
    icon: _ref,
    overlay: /*#__PURE__*/_createElement(_Basics.Menu, {
      "data-testid": `${testid}-options`,
      items: items,
      onSelect: handleSelect
    }),
    overlayVisible: overlayVisible,
    onVisibleChange: setOverlayVisible,
    testid: testid
  }, restProps));
};

exports.LineHeightSelect = LineHeightSelect;
//# sourceMappingURL=LineHeightSelect.js.map