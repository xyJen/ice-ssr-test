{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/buttons/FontColorPicker.tsx"],"names":["FontColorPicker","props","autoColor","onVisibleChange","currentPreset","color","onColorChange","onCurrentPresetChange","disabled","icon","defaultColor","testid","rest","isOverlayVisible","setOverlayVisible","React","useState","currentColor","setCurrentColor","localPreset","setLocalPreset","recentColors","addRecentColor","useEffect","line0","lines","ColorPicker","PRESETS","ART","colors","handleColorChange","useCallback","options","intermediate","fromSketch","handleSelect","presets","DEFAULT","key","title","curPreset","handleCurrentPresetChange","mode","preset","handleOverlayVisible","v","handleLeftClick","formatIcon","StopEvent"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { SplitButton, ColorPicker } from './Basics';\nimport FontColorIcon from './FontIcon';\nimport { keyToPreset, StopEvent, presetToKey } from './utils';\nimport { useRecentColors } from './hooks';\n\nexport interface IFontColorPickerProps extends\n  Pick<Partial<React.ComponentProps<typeof SplitButton>>, 'onVisibleChange' | 'title' | 'tooltip' | 'icon' | 'disabled' | 'testid' | 'role'>,\n  Pick<React.ComponentProps<typeof ColorPicker>, 'autoColor' | 'defaultColor'> {\n  onColorChange: (color: string) => void;\n  currentPreset: 'normal' | 'art';\n  onCurrentPresetChange?: (mode: 'normal' | 'art') => void;\n  color: string;\n}\n\nexport const FontColorPicker = (props: IFontColorPickerProps) => {\n  const {\n    autoColor,\n    onVisibleChange,\n    currentPreset,\n    color,\n    onColorChange,\n    onCurrentPresetChange,\n    disabled,\n    icon,\n    defaultColor,\n    testid,\n    ...rest\n  } = props;\n  const [isOverlayVisible, setOverlayVisible] = React.useState(false);\n  const [currentColor, setCurrentColor] = React.useState(color);\n  const [localPreset, setLocalPreset] = React.useState(currentPreset);\n\n  const [recentColors, addRecentColor] = useRecentColors();\n\n  React.useEffect(() => {\n    setLocalPreset(currentPreset);\n  }, [currentPreset]);\n\n  const [line0, ...lines] = ColorPicker.PRESETS.ART.colors;\n\n  const handleColorChange = React.useCallback((color, options) => {\n    if (color) {\n      if (!options.intermediate) {\n        setCurrentColor(color);\n        onColorChange(color);\n        addRecentColor(color);\n      }\n\n      if (!options.fromSketch) {\n        setOverlayVisible(false);\n      }\n    }\n  }, [onColorChange, recentColors]);\n\n  const handleSelect = React.useCallback((color: string) => {\n    setCurrentColor(color);\n    onColorChange(color);\n    setOverlayVisible(false);\n  }, [onColorChange]);\n\n  const presets = useMemo(() => {\n    return [\n      ColorPicker.PRESETS.DEFAULT\n      ,\n      {\n        key: ColorPicker.PRESETS.ART.key,\n        title: ColorPicker.PRESETS.ART.title,\n        colors: [\n          line0,\n          <ColorPicker.PresetGradient value={currentColor || ''} onSelect={handleSelect} />,\n          ...lines\n        ],\n      }\n    ]\n  }, [currentColor]);\n\n  const curPreset = presetToKey(localPreset);\n\n  const handleCurrentPresetChange = React.useCallback((mode) => {\n\n    const preset = keyToPreset(mode);\n    onCurrentPresetChange?.(preset);\n    setLocalPreset(preset);\n\n  }, [onCurrentPresetChange]);\n\n  const handleOverlayVisible = React.useCallback((v: boolean) => {\n    onVisibleChange && onVisibleChange(v);\n    setOverlayVisible(v);\n  }, [onVisibleChange]);\n\n  const handleLeftClick = React.useCallback(() => {\n    onColorChange(currentColor);\n  }, [onColorChange, currentColor]);\n\n  const formatIcon = useMemo(() => {\n    if (icon) {\n      return icon;\n    }\n    return (\n      <FontColorIcon color={currentColor} />\n    );\n  }, [currentColor, disabled, icon])\n\n  return (\n    <SplitButton\n      onClick={handleLeftClick}\n      overlayVisible={isOverlayVisible}\n      onVisibleChange={handleOverlayVisible}\n      icon={formatIcon}\n      disabled={disabled}\n      overlay={\n        <ColorPicker\n          onClick={StopEvent}\n          color={currentColor}\n          recentColors={recentColors}\n          onColorChange={handleColorChange}\n          currentPreset={curPreset}\n          onCurrentPresetChange={handleCurrentPresetChange}\n          defaultColor={defaultColor}\n          autoColor={autoColor}\n          presets={presets}\n          advance\n          data-testid={testid ? testid + '-color-picker' : 'color-picker'}\n        />\n      }\n      autoClose={false}\n      testid={testid}\n      {...rest}\n    />\n  )\n}\n"],"file":"FontColorPicker.js"}