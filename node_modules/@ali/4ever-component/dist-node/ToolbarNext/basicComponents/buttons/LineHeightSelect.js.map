{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/buttons/LineHeightSelect.tsx"],"names":["LINE_HEIGHT_DEFAULT_VALUES","CUSTOMIZE_KEY","LineHeightSelect","props","lineHeightValues","disabled","onChange","onCustomize","title","value","customButtonTitle","testid","restProps","overlayVisible","setOverlayVisible","React","useState","items","options","map","key","String","selected","push","handleSelect","v","data","Number","isNaN"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;AAKrB,MAAMA,0BAA0B,GAAG,CAAC,CAAD,EAAI,IAAJ,EAAU,GAAV,EAAe,CAAf,EAAkB,GAAlB,EAAuB,CAAvB,CAAnC;;AAgCP,MAAMC,aAAa,GAAG,eAAtB;;wBAyDY,eAAC,qBAAD,O;;AAvDL,MAAMC,gBAAkD,GAAIC,KAAD,IAAW;AAC3E,QAAM;AACJC,IAAAA,gBAAgB,GAAGJ,0BADf;AAEJK,IAAAA,QAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA,iBAPI;AAQJC,IAAAA,MARI;AASJ,OAAGC;AATC,MAUFT,KAVJ;;AAWA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCC,eAAMC,QAAN,CAAe,KAAf,CAA5C;;AAEA,QAAMC,KAAK,GAAG,oBAAQ,MAAM;AAC1B,UAAMC,OAAmD,GAAGd,gBAAgB,CAACe,GAAjB,CAAsBC,GAAD,KAAU;AACzFA,MAAAA,GAAG,EAAEC,MAAM,CAACD,GAAD,CAD8E;AAEzFE,MAAAA,QAAQ,EAAEb,KAAK,KAAKW,GAFqE;AAGzFZ,MAAAA,KAAK,EAAEa,MAAM,CAACD,GAAD,CAH4E;AAIzFT,MAAAA,MAAM,EAAG,UAASS,GAAI;AAJmE,KAAV,CAArB,CAA5D;;AAMA,QAAIb,WAAJ,EAAiB;AACfW,MAAAA,OAAO,CAACK,IAAR,CAAa,SAAb;AACAL,MAAAA,OAAO,CAACK,IAAR,CACE;AACEH,QAAAA,GAAG,EAAEnB,aADP;AAEEO,QAAAA,KAAK,EAAEE,iBAAiB,IAAI;AAF9B,OADF;AAMD;;AACD,WAAOQ,OAAP;AACD,GAjBa,EAiBX,CAACT,KAAD,EAAQL,gBAAR,EAA0BM,iBAA1B,EAA6CH,WAA7C,CAjBW,CAAd;AAoBA,QAAMiB,YAAY,GAAG,wBAAY,CAAC,CAACC,CAAD,CAAD,KAAS;AAExC,QAAI;AACF,UAAIA,CAAC,KAAKxB,aAAN,IAAuBM,WAA3B,EAAwC;AACtCA,QAAAA,WAAW;AACZ,OAFD,MAEO;AACL,cAAMmB,IAAI,GAAGC,MAAM,CAACF,CAAD,CAAnB;;AACA,YAAI,CAACE,MAAM,CAACC,KAAP,CAAaF,IAAb,CAAD,IAAuBpB,QAA3B,EAAqC;AACnCA,UAAAA,QAAQ,CAACoB,IAAD,CAAR;AACD;AACF;;AACDZ,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,KAVD,CAUE,MAAM,CAEP;AAEF,GAhBoB,EAgBlB,CAACR,QAAD,EAAWC,WAAX,CAhBkB,CAArB;AAmBA,sBACE,eAAC,gBAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,OAAO,eACL,eAAC,YAAD;AACE,qBAAc,GAAEI,MAAO,UADzB;AAEE,MAAA,KAAK,EAAEM,KAFT;AAGE,MAAA,QAAQ,EAAEO;AAHZ,MAHJ;AASE,IAAA,cAAc,EAAEX,cATlB;AAUE,IAAA,eAAe,EAAEC,iBAVnB;AAWE,IAAA,MAAM,EAAEH;AAXV,KAYMC,SAZN,EADF;AAgBD,CArEM","sourcesContent":["import { IconLineHeight } from '../icons';\nimport React, { useCallback, useMemo } from 'react';\nimport { IconMenu, Menu } from './Basics';\n\n\n\nexport const LINE_HEIGHT_DEFAULT_VALUES = [1, 1.15, 1.5, 2, 2.5, 3];\n\nexport interface ILineHeightSelectProps extends\n  Pick<Partial<React.ComponentProps<typeof IconMenu>>, 'onVisibleChange' | 'title' | 'tooltip' | 'icon' | 'disabled' | 'testid' | 'role'> {\n\n  /**\n   * 行高\n   */\n  value: number;\n  /**\n   * 行高值列表\n   */\n  lineHeightValues?: number[];\n  /**\n   * 设置国际化语言\n   */\n  customButtonTitle?: string;\n  /**\n   * 对齐方式修改时的回调函数\n   */\n  onChange?: (lineHeight: number) => void;\n  /**\n   * 是否禁用\n   */\n  disabled?: boolean;\n\n  /**\n   * 选中 “自定义行高” 项的回调函数， 不传（或传入的不是函数）则无 “自定义行高” 选项\n   */\n  onCustomize?: () => void;\n}\n\nconst CUSTOMIZE_KEY = 'CUSTOMIZE_KEY';\n\nexport const LineHeightSelect: React.FC<ILineHeightSelectProps> = (props) => {\n  const {\n    lineHeightValues = LINE_HEIGHT_DEFAULT_VALUES,\n    disabled,\n    onChange,\n    onCustomize,\n    title,\n    value,\n    customButtonTitle,\n    testid,\n    ...restProps\n  } = props;\n  const [overlayVisible, setOverlayVisible] = React.useState(false);\n\n  const items = useMemo(() => {\n    const options: React.ComponentProps<typeof Menu>['items'] = lineHeightValues.map((key) => ({\n      key: String(key),\n      selected: value === key,\n      title: String(key),\n      testid: `option-${key}`,\n    }));\n    if (onCustomize) {\n      options.push('divider');\n      options.push(\n        {\n          key: CUSTOMIZE_KEY,\n          title: customButtonTitle || '',\n        }\n      )\n    }\n    return options;\n  }, [value, lineHeightValues, customButtonTitle, onCustomize]);\n\n\n  const handleSelect = useCallback(([v]) => {\n\n    try {\n      if (v === CUSTOMIZE_KEY && onCustomize) {\n        onCustomize();\n      } else {\n        const data = Number(v);\n        if (!Number.isNaN(data) && onChange) {\n          onChange(data);\n        }\n      }\n      setOverlayVisible(false);\n    } catch {\n\n    }\n\n  }, [onChange, onCustomize]);\n\n\n  return (\n    <IconMenu\n      icon={<IconLineHeight />}\n      overlay={\n        <Menu\n          data-testid={`${testid}-options`}\n          items={items}\n          onSelect={handleSelect}\n        />\n      }\n      overlayVisible={overlayVisible}\n      onVisibleChange={setOverlayVisible}\n      testid={testid}\n      {...restProps}\n    />\n  );\n};\n\n"],"file":"LineHeightSelect.js"}