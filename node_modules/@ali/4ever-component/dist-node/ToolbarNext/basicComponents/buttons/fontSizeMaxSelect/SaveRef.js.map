{"version":3,"sources":["../../../../../../src/ToolbarNext/basicComponents/buttons/fontSizeMaxSelect/SaveRef.tsx"],"names":["SaveRef","Component","getRef","name","saveRef","node","render","children","props","defaultProps"],"mappings":";;;;;;;AAAA;;AAOe,MAAMA,OAAN,SAAsBC,gBAAtB,CAA+C;AAAA;AAAA;;AAAA,SAK5DC,MAL4D,GAKlDC,IAAD,IAAuB,KAAKA,IAAL,CAL4B;;AAAA,SAO5DC,OAP4D,GAOjDD,IAAD,IAAmBE,IAAD,IAAe;AACzC,UAAIA,IAAJ,EAAU;AACR,aAAKF,IAAL,IAAaE,IAAb;AACD;AACF,KAX2D;AAAA;;AAe5DC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKC,KAA1B;AACA,WAAOD,QAAQ,CAAC,KAAKH,OAAN,EAAe,KAAKF,MAApB,CAAf;AACD;;AAlB2D;;;AAAzCF,O,CACZS,Y,GAAe;AACpBF,EAAAA,QAAQ,EAAE,MAAM;AADI,C","sourcesContent":["import { ReactElement, Component } from 'react';\nimport { IGetRef, ISaveRef } from './utils';\n\ninterface ISaveRefProps {\n  children: (saveRef: ISaveRef, getRef: IGetRef) => ReactElement | null;\n}\n\nexport default class SaveRef extends Component<ISaveRefProps> {\n  static defaultProps = {\n    children: () => null,\n  };\n\n  getRef = (name: string): any => this[name];\n\n  saveRef = (name: string) => (node: any) => {\n    if (node) {\n      this[name] = node;\n    }\n  };\n\n  [x: string]: any;\n\n  render() {\n    const { children } = this.props;\n    return children(this.saveRef, this.getRef) as ReactElement;\n  }\n}\n"],"file":"SaveRef.js"}