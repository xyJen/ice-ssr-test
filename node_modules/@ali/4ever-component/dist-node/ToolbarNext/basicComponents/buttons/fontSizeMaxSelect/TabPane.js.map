{"version":3,"sources":["../../../../../../src/ToolbarNext/basicComponents/buttons/fontSizeMaxSelect/TabPane.tsx"],"names":["TabPane","props","className","actived","forceRender","key","id","children","restProps","isActived","current","shouldRender","tabKeyExists","String","length","uuid","defaultProps","disabled"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;uBAF4B,a;;AAgCrB,MAAMA,OAAgC,GAAIC,KAAD,IAAW;AACzD,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,GAJI;AAKJC,IAAAA,EALI;AAMJC,IAAAA,QANI;AAOJ,OAAGC;AAPC,MAQFP,KARJ,CADyD,CAUzD;;AACA,QAAMQ,SAAS,GAAG,mBAAgB,CAAC,CAACN,OAAlB,CAAlB;AACAM,EAAAA,SAAS,CAACC,OAAV,GAAoBD,SAAS,CAACC,OAAV,IAAqB,CAAC,CAACP,OAA3C;AAEA,QAAMQ,YAAY,GAAGF,SAAS,CAACC,OAAV,IAAqBN,WAA1C;AAEA,QAAMQ,YAAY,GAAGP,GAAG,IAAIQ,MAAM,CAACR,GAAD,CAAN,CAAYS,MAAZ,GAAqB,CAAjD;AACA,QAAMC,IAAI,GAAGH,YAAY,KAAKN,EAAE,GAAI,GAAED,GAAI,IAAGC,EAAG,EAAhB,GAAqB,GAAED,GAAI,EAAlC,CAAzB;AAEA,sBACE,eAAC,kBAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,mBAAaF,OAAO,GAAG,OAAH,GAAa,MAFnC;AAGE,IAAA,QAAQ,EAAEA,OAAO,GAAG,CAAH,GAAO,CAAC,CAH3B;AAIE,IAAA,SAAS,EAAE,yBAAWD,SAAX,EAAsB;AAC/BC,MAAAA;AAD+B,KAAtB,CAJb;AAOE,IAAA,EAAE,EAAEY,IAAI,IAAK,WAAUA,IAAK,EAP9B;AAQE,uBAAiBA,IAAI,IAAK,OAAMA,IAAK;AARvC,KASM,wBAAYP,SAAZ,CATN,GAWGG,YAAY,GAAGJ,QAAH,GAAc,IAX7B,CADF;AAeD,CAlCM;;;AAoCPP,OAAO,CAACgB,YAAR,GAAuB;AACrBC,EAAAA,QAAQ,EAAE;AADW,CAAvB","sourcesContent":["import React, { useRef, PropsWithChildren } from 'react';\nimport classnames from 'classnames';\nimport { TabPaneWrap } from './style';\nimport { getDataAttr } from './utils';\n\nexport interface ITabPaneProps {\n  /**\n   * TabPane的ID\n   */\n  id?: string;\n  /**\n   * TabPane的唯一key\n   */\n  key: string;\n  /**\n   * tab名称\n   */\n  tab?: React.ReactNode;\n  /**\n   * TabPane的根节点类名\n   */\n  className?: string;\n  /**\n   * 当前TabPane不是激活态的时候是否强制渲染内容，默认值：false\n   */\n  forceRender?: boolean;\n  /**\n   * 能不能被选中，默认：false\n   */\n  disabled?: boolean;\n  actived?: boolean;\n}\n\nexport const TabPane: React.FC<ITabPaneProps> = (props) => {\n  const {\n    className,\n    actived,\n    forceRender,\n    key,\n    id,\n    children,\n    ...restProps\n  } = props as PropsWithChildren<ITabPaneProps>;\n  // 此缓存是为了让最近显示过的tab项不销毁\n  const isActived = useRef<boolean>(!!actived);\n  isActived.current = isActived.current || !!actived;\n\n  const shouldRender = isActived.current || forceRender;\n\n  const tabKeyExists = key && String(key).length > 0;\n  const uuid = tabKeyExists && (id ? `${key}-${id}` : `${key}`);\n\n  return (\n    <TabPaneWrap\n      role=\"tabpanel\"\n      aria-hidden={actived ? 'false' : 'true'}\n      tabIndex={actived ? 0 : -1}\n      className={classnames(className, {\n        actived\n      })}\n      id={uuid && `tabpane-${uuid}`}\n      aria-labelledby={uuid && `tab-${uuid}`}\n      {...getDataAttr(restProps)}\n    >\n      {shouldRender ? children : null}\n    </TabPaneWrap>\n  );\n};\n\nTabPane.defaultProps = {\n  disabled: false,\n};\n"],"file":"TabPane.js"}