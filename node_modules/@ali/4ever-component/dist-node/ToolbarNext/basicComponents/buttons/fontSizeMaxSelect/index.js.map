{"version":3,"sources":["../../../../../../src/ToolbarNext/basicComponents/buttons/fontSizeMaxSelect/index.tsx"],"names":["FontSizeMaxSelect","React","memo","props","locale","onChange","value","defaultValue","disabled","testid","width","length","showArrowDown","setShowArrowDown","overlayVisible","setOverlayVisible","selfRef","sizeComputedRef","minFontSize","maxtFontSize","options","title","toolbarHeading1","type","des","default","fontWeight","lineHeight","toolbarHeading2","toolbarHeading3","toolbarHeading4","toolbarParagraph","dropdownReference","handleChange","e","handleMenuChange","getOverlay","map","option","active","fontSize","Math","min","max","textOverflow","maxWidth","height","overflow","dropdownDefaultFont","tabsStyle","current","transition","position","background","borderRadius","visibility","backgroundColor","boxShadow","border","vi","transform","transformOrigin"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useMemo,\n  useState,\n  useRef,\n} from 'react';\nimport classnames from 'classnames';\nimport {\n  DisableWrap,\n  ContainerMenuDown,\n  DesWrap,\n  GalleryWrap,\n  IconWrapper,\n  TableButton,\n  TableStyleSet,\n  TextWrap,\n  TitleWrap,\n} from './style';\nimport { Popover } from '@ali/we-design-next';\nimport { ArrowIconDown } from './icon';\nimport { Tabs } from './Tabs';\nimport { TabPane } from './TabPane';\nimport FontSizeButton, { ITextTypeSelectOption } from './FontSizeButton';\n\nexport interface GalleryContainerProps {\n  onChange?: (nextKey: string) => void;\n  value?: string | null;\n  defaultValue?: string;\n  testid?: string;\n  width?: number;\n  disabled?: boolean;\n  disabledTip?: string;\n  role?: string;\n  locale?: Record<string, string>;\n}\n\nexport const FontSizeMaxSelect: React.FC<GalleryContainerProps> = React.memo(\n  (props) => {\n    const {\n      locale,\n      onChange,\n      value,\n      defaultValue,\n      disabled,\n      testid,\n      width,\n    } = props;\n    const length = width || 490;\n    const [showArrowDown, setShowArrowDown] = useState(false);\n    const [overlayVisible, setOverlayVisible] = useState(false);\n    const selfRef = useRef<HTMLElement>();\n    const sizeComputedRef = useRef<boolean>(false);\n\n    const minFontSize = 9;\n    const maxtFontSize = 13.5;\n    // 文字类型列表：正文、标题1-6\n    const options = useMemo<ITextTypeSelectOption[]>(\n      () => [\n        {\n          title: locale?.toolbarHeading1 || 'Heading 1',\n          type: 'heading-1',\n          des: 'Heading 1',\n          default: 20,\n          fontWeight: 500,\n          lineHeight: '1.45',\n        },\n        {\n          title: locale?.toolbarHeading2 || 'Heading 2',\n          type: 'heading-2',\n          des: 'Heading 2',\n          default: 16,\n          fontWeight: 500,\n          lineHeight: '1.45',\n        },\n        {\n          title: locale?.toolbarHeading3 || 'Heading 3',\n          type: 'heading-3',\n          des: 'Heading 3',\n          default: 14,\n          fontWeight: 500,\n          lineHeight: '1.45',\n        },\n        {\n          title: locale?.toolbarHeading4 || 'Heading 4',\n          type: 'heading-4',\n          des: 'Heading 4',\n          default: 12,\n          fontWeight: 500,\n          lineHeight: '1.45',\n        },\n        {\n          title: locale?.toolbarParagraph || 'Paragraph',\n          type: 'paragraph',\n          des: 'Paragraph',\n          default: 11,\n          fontWeight: 400,\n          lineHeight: '1.45',\n        },\n        {\n          title: locale?.dropdownReference || 'Blockquote',\n          type: 'blockquote',\n          des: 'Blockquote',\n          default: 11,\n          fontWeight: 400,\n          lineHeight: '1.45',\n        },\n      ], [locale],\n    );\n\n    const handleChange = useCallback(\n      (e: string) => {\n        if (onChange) {\n          onChange(e);\n        }\n      },\n      [onChange],\n    );\n\n    const handleMenuChange = useCallback(\n      (e: string) => {\n        if (onChange) {\n          onChange(e);\n        }\n      },\n      [onChange],\n    );\n\n    const getOverlay = () => {\n      return (\n        <TableStyleSet\n          data-testid={`fontSizeMaxSelect_overlay_${testid}`}\n        >\n          {options.map((option) => {\n            return (\n              <TableButton\n                key={option.type}\n                value={option.type}\n                active={option.type === (value || defaultValue)}\n                className={classnames({\n                  active: option.type === (value || defaultValue),\n                })}\n                testid={option.type}\n                onClick={() => {\n                  if (option.type !== (value || defaultValue)) {\n                    handleMenuChange(option.type);\n                  }\n                }}\n              >\n                <TitleWrap\n                  type={option.type}\n                  style={{\n                    fontSize: `${Math.min(\n                      Math.max(option.default * 0.75, minFontSize),\n                      maxtFontSize,\n                    )}pt`,\n                    fontWeight: option.fontWeight,\n                    textOverflow: 'clip',\n                    maxWidth: '65px',\n                    lineHeight: '29px',\n                    height: '29px',\n                    overflow: 'hidden',\n                  }}\n                >\n                  {option.title}\n                </TitleWrap>\n                <DesWrap>\n                  <TextWrap>\n                    {option.title === 'AaBbCcDdEe'\n                      ? option.des\n                      : `${locale?.dropdownDefaultFont || 'Default font'} ${\n                        option.type === 'blockquote' ? '-' : option.default\n                      }`}\n                  </TextWrap>\n                </DesWrap>\n              </TableButton>\n            );\n          })}\n        </TableStyleSet>\n      );\n    };\n\n    const tabsStyle: React.CSSProperties = {\n      width: length,\n      height: '100%',\n    };\n\n    if (!sizeComputedRef.current) {\n      tabsStyle.transition = 'none';\n    }\n\n    return (\n      <DisableWrap\n        className=\"font-size-max-select-layout\"\n        disabled={disabled}\n      >\n        <div\n          style={{\n            position: 'relative',\n            background: 'white',\n            borderRadius: '4px',\n          }}\n          onMouseEnter={() => setShowArrowDown(true)}\n          onMouseLeave={() => setShowArrowDown(false)}\n          data-testid={testid}\n        >\n          <GalleryWrap ref={selfRef}>\n            <Tabs\n              style={tabsStyle}\n              onChange={handleChange}\n              activeKey={value || defaultValue}\n            >\n              {options.map((option) => {\n                return (\n                  <TabPane\n                    tab={\n                      <FontSizeButton\n                        option={option}\n                        maxFontSize={maxtFontSize}\n                        minFontSize={minFontSize}\n                        value={value || defaultValue}\n                        defaultFontFamily={locale?.dropdownDefaultFont || 'Default font'}\n                      />\n                          }\n                    key={option.type}\n                  />\n                );\n              })}\n            </Tabs>\n            <ContainerMenuDown\n              data-testid={`fontSizeMaxSelect_showDown_${testid}`}\n              style={\n                      showArrowDown\n                        ? { visibility: 'visible' }\n                        : { visibility: 'hidden' }\n                    }\n            >\n              <Popover\n                content={getOverlay()}\n                style={{\n                  backgroundColor: 'transparent',\n                  boxShadow: 'none',\n                  border: 'none',\n                }}\n                onVisibleChange={(vi) => {\n                  setOverlayVisible(vi);\n                }}\n                placement=\"bottom\"\n                visible={overlayVisible}\n              >\n                <IconWrapper\n                  onClick={() => {\n                    setOverlayVisible(!overlayVisible);\n                  }}\n                  active={showArrowDown || overlayVisible}\n                  left={length / 2}\n                  style={{\n                    transform: overlayVisible ? 'rotate(180deg)' : 'unset',\n                    transformOrigin: 'center center',\n                  }}\n                >\n                  <ArrowIconDown />\n                </IconWrapper>\n              </Popover>\n            </ContainerMenuDown>\n          </GalleryWrap>\n        </div>\n      </DisableWrap>\n    );\n  },\n);\n"],"file":"index.js"}