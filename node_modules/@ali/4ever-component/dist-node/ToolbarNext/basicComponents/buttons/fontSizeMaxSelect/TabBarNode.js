"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _fastdom = _interopRequireDefault(require("fastdom"));

var _icon = require("./icon");

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("./utils");

var _style = require("./style");

const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref = /*#__PURE__*/_createElement(_icon.ArrowIconDown, null);

var _ref2 = /*#__PURE__*/_createElement(_icon.ArrowIconDown, null);

class TabBarNode extends _react.Component {
  constructor(props) {
    super(props);
    this.offset = void 0;
    this.lastNextPrevShown = void 0;
    this.lastWheelDirection = void 0;
    this.tabList = void 0;
    this.tabSizeMap = void 0;
    this.wrapperOffsetWH = 0;
    this.wrapperScrollWH = 0;

    this.prevTransitionEnd = e => {
      if (e.propertyName !== 'opacity') {
        return;
      }

      const container = this.props.getRef('container');
      this.scrollToActiveTab({
        target: container,
        currentTarget: container
      });
    };

    this.scrollToActiveTab = e => {
      const {
        getRef
      } = this.props;
      const activeTab = getRef('activeTab');
      const navWrap = getRef('navWrap');

      if (e && e.target !== e.currentTarget || !activeTab) {
        return;
      } // when not scrollable or enter scrollable first time, don't emit scrolling


      const needToScroll = this.isNextPrevShown() && this.lastNextPrevShown;
      this.lastNextPrevShown = this.isNextPrevShown();

      if (!needToScroll) {
        return;
      }

      const activeTabWH = this.getScrollWH(activeTab);
      const navWrapNodeWH = this.getOffsetWH(navWrap);
      let {
        offset
      } = this;
      const wrapOffset = this.getOffsetLT(navWrap);
      const activeTabOffset = this.getOffsetLT(activeTab);

      if (wrapOffset > activeTabOffset) {
        // activeTab 在 wrap 的可见区域左侧
        offset += wrapOffset - activeTabOffset;
        this.setOffset(offset);
        this.setNextPrev();
      } else if (wrapOffset + navWrapNodeWH < activeTabOffset + activeTabWH) {
        // activeTab 在 wrap 的可见区域右侧
        offset -= activeTabOffset + activeTabWH - (wrapOffset + navWrapNodeWH);
        const minOffset = this.wrapperOffsetWH - this.wrapperScrollWH;
        const maxOffset = 0;
        const newOffset = Math.min(Math.max(offset, minOffset), maxOffset);
        this.setOffset(newOffset);
        this.setNextPrev();
      }
    };

    this.prev = e => {
      const {
        onPrevClick,
        getRef
      } = this.props;

      if (onPrevClick) {
        onPrevClick(e);
      }

      const navWrapNode = getRef('navWrap');
      const navWrapNodeWH = this.getOffsetWH(navWrapNode);
      const {
        offset
      } = this;
      this.setOffset(offset + navWrapNodeWH);
      this.setNextPrev();
    };

    this.next = e => {
      const {
        onNextClick,
        getRef
      } = this.props;

      if (onNextClick) {
        onNextClick(e);
      }

      const navWrapNode = getRef('navWrap');
      const navWrapNodeWH = this.getOffsetWH(navWrapNode);
      const {
        offset
      } = this;
      this.setOffset(offset - navWrapNodeWH);
      this.setNextPrev();
    };

    this.handleWheel = e => {
      if (e) {
        const {
          wrapperOffsetWH,
          wrapperScrollWH
        } = this;

        if (wrapperOffsetWH >= wrapperScrollWH) {
          return false;
        }

        const {
          deltaX,
          deltaY
        } = e; // Convert both to x & y since wheel only happened on PC

        let mixed = 0;
        const absX = Math.abs(deltaX);
        const absY = Math.abs(deltaY);

        if (absX === absY) {
          mixed = this.lastWheelDirection === 'x' ? deltaX : deltaY;
        } else if (absX > absY) {
          mixed = deltaX;
          this.lastWheelDirection = 'x';
        } else {
          mixed = deltaY;
          this.lastWheelDirection = 'y';
        }

        const minOffset = wrapperOffsetWH - wrapperScrollWH;
        const maxOffset = 0;
        const newOffset = Math.min(Math.max(-mixed + this.offset, minOffset), maxOffset);
        this.setOffset(newOffset);
        e.preventDefault();
        return true;
      } else {
        return false;
      }
    };

    this.handleResize = () => {
      _fastdom.default.measure(() => {
        const {
          getRef
        } = this.props;
        const wrapper = getRef('navWrap');
        const tabs = getRef('nav');
        this.wrapperOffsetWH = wrapper.offsetWidth || 0;
        this.wrapperScrollWH = tabs.scrollWidth || 0;
      });
    };

    this.getTabList = panes => {
      const tabList = [];

      _react.default.Children.forEach(panes, child => {
        if (child && /*#__PURE__*/_react.default.isValidElement(child)) {
          tabList.push({
            key: child.key,
            tab: child.props.tab
          });
        }
      });

      return tabList;
    };

    this.updateTabSizes = () => {
      const {
        getRef,
        activeKey
      } = this.props;
      const tabSizeMap = new Map();
      return new Promise(resolve => {
        _fastdom.default.measure(() => {
          this.tabList.forEach(({
            key
          }) => {
            let btnNode;

            if (activeKey === key) {
              btnNode = getRef('activeTab');
            } else {
              btnNode = getRef(`tab_${key}`);
            }

            if (btnNode) {
              tabSizeMap.set(key, {
                width: btnNode.offsetWidth || 0,
                height: btnNode.offsetHeight || 0,
                left: btnNode.offsetLeft || 0,
                top: btnNode.offsetTop || 0
              });
            }
          });
          this.tabSizeMap = tabSizeMap;
          resolve();
        });
      });
    };

    this.getPrevNext = () => {
      const {
        prev,
        next
      } = this.state;
      const {
        testid
      } = this.props;
      const showNextPrev = prev || next;
      const {
        prev: prevCallback,
        next: nextCallback,
        prevTransitionEnd
      } = this;

      const prevButton = /*#__PURE__*/_createElement(_style.PrevButton, {
        style: {
          left: 0
        },
        onClick: prev ? prevCallback : undefined,
        className: (0, _classnames.default)('prevbutton', {
          disabled: !prev,
          show: showNextPrev
        }),
        onTransitionEnd: prevTransitionEnd,
        "data-testid": `${testid || ''}_pre`
      }, /*#__PURE__*/_createElement("div", {
        style: {
          transform: 'rotate(90deg)',
          transformOrigin: 'center center'
        }
      }, _ref));

      const nextButton = /*#__PURE__*/_createElement(_style.NextButton, {
        onClick: next ? nextCallback : undefined,
        className: (0, _classnames.default)('nextbutton', {
          disabled: !next,
          show: showNextPrev
        }),
        "data-testid": `${testid || ''}_next`
      }, /*#__PURE__*/_createElement("div", {
        style: {
          transform: 'rotate(-90deg)',
          transformOrigin: 'center center'
        }
      }, _ref2));

      return /*#__PURE__*/_createElement(_react.default.Fragment, null, prevButton, nextButton);
    };

    this.excessTabsHelper = showNextPrev => {
      return showNextPrev ? this.getPrevNext() : null;
    };

    this.offset = 0;
    this.tabList = [];
    this.tabSizeMap = new Map();
    this.state = {
      next: false,
      prev: false,
      visibleStart: 0,
      visibleEnd: 0
    };
  }

  componentDidMount() {
    const {
      getRef
    } = this.props;
    this.componentDidUpdate();
    const navWrapper = getRef('navWrap');

    if (navWrapper) {
      navWrapper.addEventListener('wheel', this.handleWheel);
    }
  }

  componentDidUpdate(prevProps) {
    const {
      props
    } = this;
    this.setNextPrev().then(nextPrev => {
      // wait next, prev show hide
      if (this.isNextPrevShown(this.state) !== this.isNextPrevShown(nextPrev)) {
        this.setState({}, this.scrollToActiveTab);
      } else if (!prevProps || props.activeKey !== prevProps.activeKey) {
        this.scrollToActiveTab();
      }
    });

    if (!prevProps) {
      this.updateTabSizes().then(() => {
        this.handleResize();
      });
    }
  }

  componentWillUnmount() {
    const {
      getRef
    } = this.props;
    const navWrapper = getRef('navWrap');

    if (navWrapper) {
      navWrapper.removeEventListener('wheel', this.handleWheel);
    }
  }
  /**
   * 检测左右按钮的激活状态，并调整 offset
   */


  setNextPrev() {
    return new Promise(resolve => {
      _fastdom.default.measure(() => {
        const {
          getRef
        } = this.props;
        const navNode = getRef('nav');
        const navNodeWH = this.getScrollWH(navNode); // Add 1px to fix `offsetWidth` with decimal in Chrome not correct handle

        const containerWH = this.getOffsetWH(getRef('container')) + 1;
        const navWrapNodeWH = this.getOffsetWH(getRef('navWrap'));

        _fastdom.default.mutate(() => {
          let {
            offset
          } = this;
          const minOffset = containerWH - navNodeWH;
          let {
            next,
            prev
          } = this.state;

          if (minOffset >= 0) {
            next = false;
            this.setOffset(0);
            offset = 0;
          } else if (minOffset < offset) {
            next = true;
          } else {
            next = false;
            const realOffset = navWrapNodeWH - navNodeWH;
            this.setOffset(realOffset);
            offset = realOffset;
          }

          if (offset < 0) {
            prev = true;
          } else {
            prev = false;
          }

          this.setNext(next);
          this.setPrev(prev);
          resolve({
            next,
            prev
          });
        });
      });
    });
  }
  /**
   * 获取节点的宽度
   *
   * @param {HTMLElement} node
   * @return {number} offsetWidth
   */


  getOffsetWH(node) {
    return node.offsetWidth;
  }
  /**
   * 获取节点的滚动宽度
   *
   * @param {HTMLElement} node
   * @return {number} scrollWidth
   */


  getScrollWH(node) {
    return node.scrollWidth;
  }
  /**
   * 获取节点的偏移量
   *
   * @param {HTMLElement} node
   * @return {number} clientRect.left
   */


  getOffsetLT(node) {
    return node.getBoundingClientRect().left;
  }
  /**
   * 设置偏移量
   *
   */


  setOffset(offset) {
    const {
      getRef
    } = this.props;
    const target = Math.min(0, offset);

    if (this.offset !== target) {
      this.offset = target;
      let navOffset = {};
      const navStyle = getRef('nav').style;
      navOffset = {
        value: `translate3d(${target}px,0,0)`
      };
      (0, _utils.setTransform)(navStyle, navOffset.value);
    }
  }

  setPrev(v) {
    if (this.state.prev !== v) {
      this.setState({
        prev: v
      });
    }
  }

  setNext(v) {
    if (this.state.next !== v) {
      this.setState({
        next: v
      });
    }
  }

  /**
   * 判断左右的按钮是否显示
   */
  isNextPrevShown(state) {
    if (state) {
      return state.next || state.prev;
    }

    const {
      next,
      prev
    } = this.state;
    return next || prev;
  }

  render() {
    const {
      prev,
      next
    } = this.state;
    const {
      children,
      saveRef
    } = this.props;
    const showNextPrev = prev || next;
    return /*#__PURE__*/_createElement(_style.NavContainer, {
      className: (0, _classnames.default)({
        scrolling: showNextPrev
      }),
      ref: saveRef('container')
    }, /*#__PURE__*/_createElement(_style.NavWrap, {
      ref: saveRef('navWrap')
    }, /*#__PURE__*/_createElement(_style.Nav, {
      ref: saveRef('nav')
    }, children)), this.excessTabsHelper(showNextPrev));
  }

}

exports.default = TabBarNode;
TabBarNode.defaultProps = {
  prefixCls: '',
  onPrevClick: _utils.noop,
  onNextClick: _utils.noop
};
//# sourceMappingURL=TabBarNode.js.map