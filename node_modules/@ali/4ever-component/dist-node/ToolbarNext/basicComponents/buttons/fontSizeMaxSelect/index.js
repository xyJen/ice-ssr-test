"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FontSizeMaxSelect = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _style = require("./style");

var _weDesignNext = require("@ali/we-design-next");

var _icon = require("./icon");

var _Tabs = require("./Tabs");

var _TabPane = require("./TabPane");

var _FontSizeButton = _interopRequireDefault(require("./FontSizeButton"));

const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref = /*#__PURE__*/_createElement(_icon.ArrowIconDown, null);

const FontSizeMaxSelect = /*#__PURE__*/_react.default.memo(props => {
  const {
    locale,
    onChange,
    value,
    defaultValue,
    disabled,
    testid,
    width
  } = props;
  const length = width || 490;
  const [showArrowDown, setShowArrowDown] = (0, _react.useState)(false);
  const [overlayVisible, setOverlayVisible] = (0, _react.useState)(false);
  const selfRef = (0, _react.useRef)();
  const sizeComputedRef = (0, _react.useRef)(false);
  const minFontSize = 9;
  const maxtFontSize = 13.5; // 文字类型列表：正文、标题1-6

  const options = (0, _react.useMemo)(() => [{
    title: locale?.toolbarHeading1 || 'Heading 1',
    type: 'heading-1',
    des: 'Heading 1',
    default: 20,
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: locale?.toolbarHeading2 || 'Heading 2',
    type: 'heading-2',
    des: 'Heading 2',
    default: 16,
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: locale?.toolbarHeading3 || 'Heading 3',
    type: 'heading-3',
    des: 'Heading 3',
    default: 14,
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: locale?.toolbarHeading4 || 'Heading 4',
    type: 'heading-4',
    des: 'Heading 4',
    default: 12,
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: locale?.toolbarParagraph || 'Paragraph',
    type: 'paragraph',
    des: 'Paragraph',
    default: 11,
    fontWeight: 400,
    lineHeight: '1.45'
  }, {
    title: locale?.dropdownReference || 'Blockquote',
    type: 'blockquote',
    des: 'Blockquote',
    default: 11,
    fontWeight: 400,
    lineHeight: '1.45'
  }], [locale]);
  const handleChange = (0, _react.useCallback)(e => {
    if (onChange) {
      onChange(e);
    }
  }, [onChange]);
  const handleMenuChange = (0, _react.useCallback)(e => {
    if (onChange) {
      onChange(e);
    }
  }, [onChange]);

  const getOverlay = () => {
    return /*#__PURE__*/_createElement(_style.TableStyleSet, {
      "data-testid": `fontSizeMaxSelect_overlay_${testid}`
    }, options.map(option => {
      return /*#__PURE__*/_createElement(_style.TableButton, {
        key: option.type,
        value: option.type,
        active: option.type === (value || defaultValue),
        className: (0, _classnames.default)({
          active: option.type === (value || defaultValue)
        }),
        testid: option.type,
        onClick: () => {
          if (option.type !== (value || defaultValue)) {
            handleMenuChange(option.type);
          }
        }
      }, /*#__PURE__*/_createElement(_style.TitleWrap, {
        type: option.type,
        style: {
          fontSize: `${Math.min(Math.max(option.default * 0.75, minFontSize), maxtFontSize)}pt`,
          fontWeight: option.fontWeight,
          textOverflow: 'clip',
          maxWidth: '65px',
          lineHeight: '29px',
          height: '29px',
          overflow: 'hidden'
        }
      }, option.title), /*#__PURE__*/_createElement(_style.DesWrap, null, /*#__PURE__*/_createElement(_style.TextWrap, null, option.title === 'AaBbCcDdEe' ? option.des : `${locale?.dropdownDefaultFont || 'Default font'} ${option.type === 'blockquote' ? '-' : option.default}`)));
    }));
  };

  const tabsStyle = {
    width: length,
    height: '100%'
  };

  if (!sizeComputedRef.current) {
    tabsStyle.transition = 'none';
  }

  return /*#__PURE__*/_createElement(_style.DisableWrap, {
    className: "font-size-max-select-layout",
    disabled: disabled
  }, /*#__PURE__*/_createElement("div", {
    style: {
      position: 'relative',
      background: 'white',
      borderRadius: '4px'
    },
    onMouseEnter: () => setShowArrowDown(true),
    onMouseLeave: () => setShowArrowDown(false),
    "data-testid": testid
  }, /*#__PURE__*/_createElement(_style.GalleryWrap, {
    ref: selfRef
  }, /*#__PURE__*/_createElement(_Tabs.Tabs, {
    style: tabsStyle,
    onChange: handleChange,
    activeKey: value || defaultValue
  }, options.map(option => {
    return /*#__PURE__*/_createElement(_TabPane.TabPane, {
      tab: /*#__PURE__*/_createElement(_FontSizeButton.default, {
        option: option,
        maxFontSize: maxtFontSize,
        minFontSize: minFontSize,
        value: value || defaultValue,
        defaultFontFamily: locale?.dropdownDefaultFont || 'Default font'
      }),
      key: option.type
    });
  })), /*#__PURE__*/_createElement(_style.ContainerMenuDown, {
    "data-testid": `fontSizeMaxSelect_showDown_${testid}`,
    style: showArrowDown ? {
      visibility: 'visible'
    } : {
      visibility: 'hidden'
    }
  }, /*#__PURE__*/_createElement(_weDesignNext.Popover, {
    content: getOverlay(),
    style: {
      backgroundColor: 'transparent',
      boxShadow: 'none',
      border: 'none'
    },
    onVisibleChange: vi => {
      setOverlayVisible(vi);
    },
    placement: "bottom",
    visible: overlayVisible
  }, /*#__PURE__*/_createElement(_style.IconWrapper, {
    onClick: () => {
      setOverlayVisible(!overlayVisible);
    },
    active: showArrowDown || overlayVisible,
    left: length / 2,
    style: {
      transform: overlayVisible ? 'rotate(180deg)' : 'unset',
      transformOrigin: 'center center'
    }
  }, _ref))))));
});

exports.FontSizeMaxSelect = FontSizeMaxSelect;
//# sourceMappingURL=index.js.map