"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tabs = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _style = require("./style");

var _utils = require("./utils");

var _TabBar = _interopRequireDefault(require("./TabBar"));

const _createElement = /*#__PURE__*/_react.default.createElement;

function getDefaultActiveKey(props) {
  let activeKey;

  _react.default.Children.forEach(props.children, child => {
    if (child && !activeKey && !child.props.disabled) {
      activeKey = child.key;
    }
  });

  return activeKey;
}

function activeKeyIsValid(props, key) {
  const keys = _react.default.Children.map(props.children, child => child && child.key);

  return keys.indexOf(key) >= 0;
}

class Tabs extends _react.default.Component {
  constructor(props) {
    super(props);

    this.onTabClick = (activeKey, e) => {
      const {
        onTabClick
      } = this.props;

      if (onTabClick) {
        onTabClick(activeKey, e);
      }

      this.setActiveKey(activeKey);
    };

    this.onScroll = ({
      target,
      currentTarget
    }) => {
      if (target === currentTarget && target.scrollLeft > 0) {
        target.scrollLeft = 0;
      }
    };

    this.setActiveKey = nextActiveKey => {
      const {
        activeKey,
        onChange
      } = this.props;

      if (activeKey !== nextActiveKey) {
        if (!activeKey) {
          this.setState({
            activeKey: nextActiveKey
          });
        }

        if (onChange) {
          onChange(nextActiveKey);
        }
      }
    };

    this.getNextActiveKey = next => {
      const {
        activeKey
      } = this.state;
      const children = [];

      _react.default.Children.forEach(this.props.children, c => {
        if (c && !c.props.disabled) {
          if (next) {
            children.push(c);
          } else {
            children.unshift(c);
          }
        }
      });

      const {
        length
      } = children;
      let ret = length && children[0].key;
      children.forEach((child, i) => {
        if (child.key === activeKey) {
          if (i === length - 1) {
            ret = children[0].key;
          } else {
            ret = children[i + 1].key;
          }
        }
      });
      return ret;
    };

    let _activeKey;

    if (props.activeKey) {
      _activeKey = props.activeKey;
    } else if (props.defaultActiveKey) {
      _activeKey = props.defaultActiveKey;
    } else {
      _activeKey = getDefaultActiveKey(props);
    }

    this.state = {
      activeKey: _activeKey
    };
  }

  static getDerivedStateFromProps(props, state) {
    const newState = {};

    if (props.activeKey) {
      newState.activeKey = props.activeKey;
    } else if (!activeKeyIsValid(props, state.activeKey)) {
      newState.activeKey = getDefaultActiveKey(props);
    }

    if (Object.keys(newState).length > 0) {
      return newState;
    }

    return null;
  }

  render() {
    const {
      props,
      state
    } = this;
    const {
      children,
      ...restProps
    } = props;
    return /*#__PURE__*/_createElement(_style.TabsWrap, (0, _extends2.default)({
      style: props.style
    }, (0, _utils.getDataAttr)(restProps), {
      onScroll: this.onScroll
    }), /*#__PURE__*/_createElement(_TabBar.default, (0, _extends2.default)({}, (0, _utils.omit)(props, ['className']), {
      panes: children,
      style: props.style,
      activeKey: state.activeKey,
      onTabClick: this.onTabClick,
      testid: props.testid
    })));
  }

}

exports.Tabs = Tabs;
Tabs.defaultProps = {
  onChange: () => {},
  children: null,
  style: {},
  destroyInactiveTabPane: false
};
//# sourceMappingURL=Tabs.js.map