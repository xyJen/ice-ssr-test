"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _tinyWarning = _interopRequireDefault(require("tiny-warning"));

var _classnames = _interopRequireDefault(require("classnames"));

var _style = require("./style");

/* eslint-disable max-lines-per-function */

/* eslint-disable @typescript-eslint/explicit-function-return-type */
const _createElement = /*#__PURE__*/_react.default.createElement;

const TabBarTabsNode = props => {
  const {
    saveRef,
    panes,
    activeKey,
    testid
  } = props;
  const rst = []; // 下面两个ref是为了缓存函数引用，根据key进行缓存
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  const onTabClicks = (0, _react.useRef)({}); // eslint-disable-next-line @typescript-eslint/no-explicit-any

  _react.default.Children.forEach(panes, child => {
    if (!child) {
      return;
    }

    const key = child.key;
    const isActived = activeKey === key;

    if (!onTabClicks.current[key] || onTabClicks.current[key] !== props.onTabClick) {
      onTabClicks.current[key] = e => {
        if (props.onTabClick) {
          props.onTabClick(key, e);
        }
      };
    }

    (0, _tinyWarning.default)('tab' in child.props, 'There must be `tab` property on children of Tabs.');
    const id = props.id ? `${key}-${props.id}` : key;

    const node = /*#__PURE__*/_createElement(_style.TabBarTab, {
      role: "tab",
      "aria-disabled": child.props.disabled ? 'true' : 'false',
      "aria-selected": isActived ? 'true' : 'false',
      "aria-controls": `tabpane-${id}`,
      tabIndex: isActived ? 0 : -1,
      key: key,
      id: `tab-${id}`,
      className: (0, _classnames.default)({
        disabled: !!child.props.disabled,
        actived: isActived
      }),
      ref: isActived ? saveRef('activeTab') : saveRef(`tab_${key}`),
      onClick: !isActived && !child.props.disabled ? onTabClicks.current[key] : undefined,
      "data-testid": `${testid}_${id}`
    }, child.props.tab);

    rst.push(node);
  });

  return /*#__PURE__*/_createElement(_style.TabBarWrapper, null, rst);
};

var _default = TabBarTabsNode;
exports.default = _default;
//# sourceMappingURL=TabBarTabsNode.js.map