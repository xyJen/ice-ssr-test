"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableMergeButton = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _icons = require("../icons");

var _react = _interopRequireWildcard(require("react"));

var _Basics = require("./Basics");

const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref = /*#__PURE__*/_createElement(_icons.IconMergeCell, null);

var _ref2 = /*#__PURE__*/_createElement(_icons.IconSplitCell, null);

var _ref3 = /*#__PURE__*/_createElement(_icons.IconSplitCell, null);

var _ref4 = /*#__PURE__*/_createElement(_icons.IconMergeCell, null);

const TableMergeButton = props => {
  const {
    value,
    onChange,
    onClick,
    icon,
    options,
    active,
    ...rest
  } = props;
  const [overlayVisible, setOverlayVisible] = (0, _react.useState)(false);
  const handleSelect = (0, _react.useCallback)(([e]) => {
    if (onChange) {
      onChange(e);
    }

    setOverlayVisible(false);
  }, [onChange]);
  const handleVisibleChange = (0, _react.useCallback)(visible => {
    setOverlayVisible(visible);
  }, []);
  const handleClickLeft = (0, _react.useCallback)(() => {
    if (onClick) {
      const newValue = value === 'merged' ? 'unmerged' : 'merged';
      onClick(newValue);
    }
  }, [onClick, value]);
  const items = (0, _react.useMemo)(() => [{
    title: options.merged.title,
    value: 'merged',
    key: 'merged',
    selected: value === 'merged',
    prefix: options.merged.icon || _ref,
    testid: 'option-merged'
  }, {
    title: options.unmerged.title,
    value: 'unmerged',
    disabled: value === 'unmerged',
    key: 'unmerged',
    prefix: options.unmerged.icon || _ref2,
    testid: 'option-unmerged'
  }], [options, value]);
  const renderTriggerIcon = (0, _react.useMemo)(() => {
    if (icon) {
      return icon;
    }

    return value === 'merged' ? _ref3 : _ref4;
  }, [value, icon]);
  return /*#__PURE__*/_createElement(_Basics.SplitButton, (0, _extends2.default)({
    overlay: /*#__PURE__*/_createElement(_Basics.Menu, {
      items: items,
      onSelect: handleSelect
    }),
    testid: "MergeCellButton",
    onClick: handleClickLeft,
    overlayVisible: overlayVisible,
    onVisibleChange: handleVisibleChange,
    icon: renderTriggerIcon,
    active: active || overlayVisible
  }, rest));
};

exports.TableMergeButton = TableMergeButton;
//# sourceMappingURL=TableMergeButton.js.map