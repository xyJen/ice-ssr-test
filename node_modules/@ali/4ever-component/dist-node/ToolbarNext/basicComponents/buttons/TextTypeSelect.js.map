{"version":3,"sources":["../../../../../src/ToolbarNext/basicComponents/buttons/TextTypeSelect.tsx"],"names":["Item","styled","span","p","fontSize","fontWeight","TitleWrapper","div","optionsMap","paragraph","title","TextTypeSelect","props","onChange","disabled","testid","value","role","options","tooltip","handleChange","v","key","find","op","TextTypeSingleLineDefaultWidth"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;;AAgBrB,MAAMA,IAAI,gBAAGC,0BAAOC,IAAV,wDACDC,CAAD,IAAOA,CAAC,CAACC,QADP,EAEED,CAAD,IAAOA,CAAC,CAACE,UAFV,CAAV;;;;AAMP,MAAMC,YAAY,gBAAGL,0BAAOM,GAAV,qFAAlB;;AAoCA,MAAMC,UAAmE,GAAG;AAC1EC,EAAAA,SAAS,EAAGC,KAAD,iBAAW,eAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,MAAf;AAAsB,IAAA,UAAU,EAAE;AAAlC,KAAyCA,KAAzC,CADoD;AAE1E,eAAcA,KAAD,iBAAW,eAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,MAAf;AAAsB,IAAA,UAAU,EAAE;AAAlC,KAAyCA,KAAzC,CAFkD;AAG1E,eAAcA,KAAD,iBAAW,eAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,MAAf;AAAsB,IAAA,UAAU,EAAE;AAAlC,KAAyCA,KAAzC,CAHkD;AAI1E,eAAcA,KAAD,iBAAW,eAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,MAAf;AAAsB,IAAA,UAAU,EAAE;AAAlC,KAAyCA,KAAzC,CAJkD;AAK1E,eAAcA,KAAD,iBAAW,eAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,MAAf;AAAsB,IAAA,UAAU,EAAE;AAAlC,KAAyCA,KAAzC;AALkD,CAA5E;;AAQO,MAAMC,cAA8C,GAAIC,KAAD,IAAW;AACvE,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,IALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA;AAPI,MAQFP,KARJ;AAUA,QAAMQ,YAAY,GAAG,wBAAaC,CAAD,IAAO;AACtC,QAAIR,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACQ,CAAD,CAAR;AACD;AACF,GAJoB,EAIlB,CAACR,QAAD,CAJkB,CAArB;AAOA,sBACE,eAAC,kBAAD;AACE,IAAA,KAAK,EAAEG,KADT;AAEE,IAAA,QAAQ,EAAEF,QAFZ;AAGE,IAAA,YAAY,EAAE,CAAC;AAAEQ,MAAAA;AAAF,KAAD,KAAa;AACzB,YAAM;AAAEZ,QAAAA;AAAF,UAAYQ,OAAO,CAACK,IAAR,CAAcC,EAAD,IAAQA,EAAE,CAACF,GAAH,KAAWA,GAAhC,KAAwC,EAA1D;AACA,0BACE,eAAC,oBAAD,QACGd,UAAU,CAACc,GAAD,CAAV,GAAkBZ,KAAlB,KAA4BA,KAD/B,CADF;AAKD,KAVH;AAWE,IAAA,WAAW,EAAE,mBACX,eAAC,YAAD,QAAeS,OAAO,CAACT,KAAvB,CAZJ;AAcE,IAAA,MAAM,EAAEK,MAAM,IAAI,gBAdpB;AAeE,IAAA,IAAI,EAAEE,IAfR;AAgBE,IAAA,KAAK,EAAEQ,sCAhBT;AAiBE,IAAA,OAAO,EAAEP,OAjBX;AAkBE,IAAA,QAAQ,EAAEE,YAlBZ;AAmBE,IAAA,OAAO,EAAED;AAnBX,IADF;AAuBD,CAzCM","sourcesContent":["import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { TextSelect, TextTypeSingleLineDefaultWidth, SelectOption } from './Basics';\n\n\nexport interface ITextTypeSelectOption {\n  key: TextType;\n  title: string;\n}\n\nexport type TextType =\n  | 'paragraph'\n  | 'heading-1'\n  | 'heading-2'\n  | 'heading-3'\n  | 'heading-4';\n\nexport const Item = styled.span<{ fontSize: string; fontWeight: number }>`\n  font-size: ${(p) => p.fontSize};\n  font-weight:  ${(p) => p.fontWeight}; \n  line-height: 1.45;\n`;\n\nconst TitleWrapper = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  overflow-wrap: normal;\n  white-space: nowrap;\n`;\n\ntype ExtendsTextSelectProps = Omit<React.ComponentProps<typeof TextSelect>, 'value' | 'onChange' | 'options' | 'width' | 'tooltip'>;\n\nexport interface ITextTypeSelectProps extends ExtendsTextSelectProps {\n  /**\n   * 文本类型\n   */\n  value?: TextType;\n  /**\n   * 文本类型变化回调函数，type TextType\n   */\n  onChange?: (type: TextType) => void;\n  /**\n   * 是否禁用\n   */\n  disabled?: boolean;\n\n  options: ITextTypeSelectOption[];\n\n  testid?: string;\n\n  role?: string;\n\n  tooltip: {\n    title: string;\n    shortCut?: string;\n    description?: string;\n  };\n}\n\nconst optionsMap: Record<TextType, (title: string) => React.ReactElement> = {\n  paragraph: (title) => <Item fontSize=\"14px\" fontWeight={400} >{title}</Item>,\n  'heading-1': (title) => <Item fontSize=\"20pt\" fontWeight={500} >{title}</Item>,\n  'heading-2': (title) => <Item fontSize=\"16pt\" fontWeight={500} >{title}</Item>,\n  'heading-3': (title) => <Item fontSize=\"14pt\" fontWeight={500} >{title}</Item>,\n  'heading-4': (title) => <Item fontSize=\"12pt\" fontWeight={500} >{title}</Item>,\n};\n\nexport const TextTypeSelect: React.FC<ITextTypeSelectProps> = (props) => {\n  const {\n    onChange,\n    disabled,\n    testid,\n    value,\n    role,\n    options,\n    tooltip,\n  } = props;\n\n  const handleChange = useCallback((v) => {\n    if (onChange) {\n      onChange(v);\n    }\n  }, [onChange]);\n\n\n  return (\n    <TextSelect\n      value={value}\n      disabled={disabled}\n      renderOption={({ key }) => {\n        const { title } = options.find((op) => op.key === key) || {};\n        return (\n          <SelectOption>\n            {optionsMap[key]?.(title) || title}\n          </SelectOption>\n        );\n      }}\n      renderValue={() => (\n        <TitleWrapper>{tooltip.title}</TitleWrapper>\n      )}\n      testid={testid || 'TextTypeSelect'}\n      role={role}\n      width={TextTypeSingleLineDefaultWidth}\n      options={options}\n      onChange={handleChange}\n      tooltip={tooltip}\n    />\n  );\n};\n"],"file":"TextTypeSelect.js"}