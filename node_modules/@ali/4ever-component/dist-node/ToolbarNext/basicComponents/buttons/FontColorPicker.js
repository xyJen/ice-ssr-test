"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FontColorPicker = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _Basics = require("./Basics");

var _FontIcon = _interopRequireDefault(require("./FontIcon"));

var _utils = require("./utils");

var _hooks = require("./hooks");

const _createElement = /*#__PURE__*/_react.default.createElement;

const FontColorPicker = props => {
  const {
    autoColor,
    onVisibleChange,
    currentPreset,
    color,
    onColorChange,
    onCurrentPresetChange,
    disabled,
    icon,
    defaultColor,
    testid,
    ...rest
  } = props;

  const [isOverlayVisible, setOverlayVisible] = _react.default.useState(false);

  const [currentColor, setCurrentColor] = _react.default.useState(color);

  const [localPreset, setLocalPreset] = _react.default.useState(currentPreset);

  const [recentColors, addRecentColor] = (0, _hooks.useRecentColors)();

  _react.default.useEffect(() => {
    setLocalPreset(currentPreset);
  }, [currentPreset]);

  const [line0, ...lines] = _Basics.ColorPicker.PRESETS.ART.colors;

  const handleColorChange = _react.default.useCallback((color, options) => {
    if (color) {
      if (!options.intermediate) {
        setCurrentColor(color);
        onColorChange(color);
        addRecentColor(color);
      }

      if (!options.fromSketch) {
        setOverlayVisible(false);
      }
    }
  }, [onColorChange, recentColors]);

  const handleSelect = _react.default.useCallback(color => {
    setCurrentColor(color);
    onColorChange(color);
    setOverlayVisible(false);
  }, [onColorChange]);

  const presets = (0, _react.useMemo)(() => {
    return [_Basics.ColorPicker.PRESETS.DEFAULT, {
      key: _Basics.ColorPicker.PRESETS.ART.key,
      title: _Basics.ColorPicker.PRESETS.ART.title,
      colors: [line0, /*#__PURE__*/_createElement(_Basics.ColorPicker.PresetGradient, {
        value: currentColor || '',
        onSelect: handleSelect
      }), ...lines]
    }];
  }, [currentColor]);
  const curPreset = (0, _utils.presetToKey)(localPreset);

  const handleCurrentPresetChange = _react.default.useCallback(mode => {
    const preset = (0, _utils.keyToPreset)(mode);
    onCurrentPresetChange?.(preset);
    setLocalPreset(preset);
  }, [onCurrentPresetChange]);

  const handleOverlayVisible = _react.default.useCallback(v => {
    onVisibleChange && onVisibleChange(v);
    setOverlayVisible(v);
  }, [onVisibleChange]);

  const handleLeftClick = _react.default.useCallback(() => {
    onColorChange(currentColor);
  }, [onColorChange, currentColor]);

  var _ref = /*#__PURE__*/_createElement(_FontIcon.default, {
    color: currentColor
  });

  const formatIcon = (0, _react.useMemo)(() => {
    if (icon) {
      return icon;
    }

    return _ref;
  }, [currentColor, disabled, icon]);
  return /*#__PURE__*/_createElement(_Basics.SplitButton, (0, _extends2.default)({
    onClick: handleLeftClick,
    overlayVisible: isOverlayVisible,
    onVisibleChange: handleOverlayVisible,
    icon: formatIcon,
    disabled: disabled,
    overlay: /*#__PURE__*/_createElement(_Basics.ColorPicker, {
      onClick: _utils.StopEvent,
      color: currentColor,
      recentColors: recentColors,
      onColorChange: handleColorChange,
      currentPreset: curPreset,
      onCurrentPresetChange: handleCurrentPresetChange,
      defaultColor: defaultColor,
      autoColor: autoColor,
      presets: presets,
      advance: true,
      "data-testid": testid ? testid + '-color-picker' : 'color-picker'
    }),
    autoClose: false,
    testid: testid
  }, rest));
};

exports.FontColorPicker = FontColorPicker;
//# sourceMappingURL=FontColorPicker.js.map