"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildToolbarItem = buildToolbarItem;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _basicComponents = require("./basicComponents");

const _createElement = /*#__PURE__*/React.createElement;

function isValidItem(item) {
  let displayName;

  if (String(item.type.displayName) === 'toolbarSlot') {
    displayName = item.props.display;
  } else {
    displayName = String(item.type.displayName);
  }

  switch (displayName) {
    case _basicComponents.SlotType.iconButton:
    case _basicComponents.SlotType.iconMenu:
    case _basicComponents.SlotType.iconSelect:
    case _basicComponents.SlotType.splitButton:
    case _basicComponents.SlotType.textSelect:
    case _basicComponents.SlotType.custom:
      return true;

    default:
      return false;
  }
}

function buildToolbarItem(plugins, controller, buttonName, customButtons, extraProps) {
  const customButton = customButtons?.[buttonName]; // 自定义按钮优先

  if (customButton && typeof customButton === 'function') {
    const CustomComponent = customButton({
      extraProps
    }, controller);
    return renderComponent(controller, extraProps, CustomComponent);
  }

  const [pluginName] = buttonName.split('.');
  const plugin = plugins?.hash[pluginName];

  if (!plugin) {
    return null;
  }

  const Component = plugin?.renderToolbar?.({
    buttonName,
    extraProps
  }, controller);
  return renderComponent(controller, extraProps, Component);
}

function renderComponent(controller, extraProps, Component) {
  if (!Component) {
    return null;
  }

  if ( /*#__PURE__*/React.isValidElement(Component)) {
    if (!isValidItem(Component)) {
      throw new Error(`Component with key:${extraProps.key} must wrapped by ItemSlot`);
    }

    return Component;
  }

  return /*#__PURE__*/_createElement(_basicComponents.ItemSlot, {
    display: _basicComponents.SlotType.iconButton
  }, /*#__PURE__*/_createElement(BasicButton, (0, _extends2.default)({}, Component, extraProps, {
    controller: controller
  })));
}

const BasicButton = props => {
  const {
    icon,
    onClick,
    controller,
    ...rest
  } = props;
  const handleClick = React.useCallback(() => {
    if (onClick && typeof onClick === 'function') {
      onClick(controller);
    }
  }, [onClick, controller]);
  return /*#__PURE__*/_createElement(_basicComponents.IconButton, (0, _extends2.default)({}, rest, {
    icon: icon,
    onClick: handleClick
  }));
};
//# sourceMappingURL=buildToolbarItem.js.map