"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeadingToolbar = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _interface = require("./interface");

var _everCangjie = require("@ali/4ever-cangjie");

var _PluginsContext = require("../PluginsContext");

var _BasicToolbar = require("./BasicToolbar");

var _config = require("./config");

const _createElement = /*#__PURE__*/React.createElement;

const HeadingToolbar = props => {
  const {
    disableTargets = _config.defaultDisableTargets,
    doubleLayout: propDoubleLayout = _config.defaultDoubleLayout,
    singleLayout: propSingleLayout = _config.defaultSingleLayout,
    style: propStyle,
    allowSwitch = true,
    onSwitchModeClick,
    mode: propMode,
    ...rest
  } = props;

  const controller = _everCangjie.Controller.useController({
    maxPending: 10
  });

  const plugins = (0, _PluginsContext.usePlugins)();
  const style = React.useMemo(() => ({
    padding: '4px 24px',
    ...propStyle
  }), [propStyle]);
  const [innerMode, setInnerMode] = React.useState(_interface.HeaderToolbarMode.single);
  const mode = propMode || innerMode;
  const doubleLayout = allowSwitch ? propDoubleLayout : mode === _interface.HeaderToolbarMode.double ? propDoubleLayout : undefined;
  const singleLayout = allowSwitch ? propSingleLayout : mode === _interface.HeaderToolbarMode.single ? propSingleLayout : undefined;
  const handleSwitch = React.useCallback(modeType => {
    setInnerMode(modeType);

    if (onSwitchModeClick) {
      onSwitchModeClick(modeType);
    }
  }, [onSwitchModeClick]);
  return /*#__PURE__*/_createElement(_BasicToolbar.BasicToolbar, (0, _extends2.default)({
    disableTargets: disableTargets,
    doubleLayout: doubleLayout,
    singleLayout: singleLayout,
    style: style,
    mode: mode,
    onSwitchModeClick: handleSwitch
  }, rest, {
    controller: controller,
    plugins: plugins
  }));
};

exports.HeadingToolbar = HeadingToolbar;
//# sourceMappingURL=HeadingToolbar.js.map