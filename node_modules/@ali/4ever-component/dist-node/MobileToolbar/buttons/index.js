"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ItemView;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _constant = require("../constant");

var _toolItem = _interopRequireDefault(require("./toolItem"));

var _buttonSide = require("../hooks/buttonSide");

var _index = require("../hooks/index");

var _styled = require("./styled");

var _styled2 = require("../components/styled");

const _createElement = /*#__PURE__*/React.createElement;
const keyboard = {
  name: 'keyboard',
  Component: ({
    Wrapper,
    closePanel,
    controller,
    panelShowing,
    ...rest
  }) => {
    const {
      item
    } = (0, _index.usePanel)();
    const handleClick = React.useCallback(() => {
      if (item) {
        closePanel && closePanel();
      } else {
        controller.run('onCangjieBlur');
      }
    }, [item, closePanel, controller]);
    const style = React.useMemo(() => {
      return item ? {
        transition: 'transform 0.3s'
      } : {
        transition: 'transform 0.3s',
        transform: 'scale(1, -1)'
      };
    }, [item]);
    return /*#__PURE__*/_createElement(Wrapper, (0, _extends2.default)({
      style: style,
      onClick: handleClick,
      type: "big"
    }, rest, {
      icon: "keybrdUp"
    }));
  }
};
/**
 * toolbar 按钮的逻辑，和 PC 端保持一致，从插件里拿 toolbar 字段
 *
 * 如果仅有 name，没有 Component，会被视为「插件按钮」
 */

function PluginButton(props) {
  const {
    item,
    plugins,
    controller,
    isStart,
    isEnd,
    closePanel
  } = props;
  const name = typeof item === 'string' ? item : item.name;
  const [pluginName, buttonName = 'mobile'] = name.split('.');
  const plugin = plugins.hash[pluginName];
  const {
    buttons = {},
    locale = {}
  } = plugin?.toolbar || {};
  const Component = buttons[buttonName];
  const sideValue = React.useMemo(() => ({
    isStart,
    isEnd
  }), [isStart, isEnd]);

  if (!Component) {
    return null;
  }

  return /*#__PURE__*/_createElement(_buttonSide.SideContext.Provider, {
    value: sideValue
  }, /*#__PURE__*/_createElement(Component, {
    controller: controller,
    locale: locale,
    item: item,
    panelShowing: false,
    subLineShowing: false,
    closePanel: closePanel,
    Wrapper: _toolItem.default,
    selection: controller.value.selection
  }));
}
/**
 * toolbar 按钮渲染逻辑，这里会处理分割线、新行等逻辑
 */


var _ref = /*#__PURE__*/_createElement(_styled.Divider, null);

var _ref2 = /*#__PURE__*/_createElement(_styled2.Divider, null);

var _ref3 = /*#__PURE__*/_createElement(_styled.NewLine, null);

var _ref4 = /*#__PURE__*/_createElement(_styled.AlignIcon, null);

function ItemView(props) {
  const {
    item: rawItem,
    controller
  } = props;
  const item = React.useMemo(() => {
    const parsedItem = rawItem === 'keyboard' ? keyboard : rawItem;
    return typeof parsedItem === 'string' ? {
      name: parsedItem
    } : parsedItem;
  }, [rawItem]);
  const {
    Component
  } = item;
  const {
    closePanel,
    openPanel,
    item: panelItem
  } = (0, _index.usePanel)();
  const {
    item: subLineItem
  } = (0, _index.useSubline)();
  const panelShowing = panelItem === rawItem;
  const subLineShowing = subLineItem === rawItem;

  if (item.name === _constant.DIVIDER_NONE || !item.name) {
    return null;
  }

  if (item.name === _constant.DIVIDER) {
    return _ref;
  }

  if (item.name === _constant.DIVIDER_VERT) {
    return _ref2;
  }

  if (item.name === _constant.NEW_LINE) {
    return _ref3;
  }

  if (item.name === _constant.ALIGN_PLACEHOLDER) {
    return _ref4;
  }

  if (item.title) {
    return /*#__PURE__*/_createElement(_styled.GroupTitle, null, item.title);
  }

  if (Component) {
    return /*#__PURE__*/_createElement(Component, {
      item: item,
      panelItem: panelItem,
      subLineItem: subLineItem,
      panelShowing: panelShowing,
      subLineShowing: subLineShowing,
      closePanel: closePanel,
      openPanel: openPanel,
      Wrapper: _toolItem.default,
      controller: controller,
      selection: controller.value.selection
    });
  }

  return /*#__PURE__*/_createElement(PluginButton, (0, _extends2.default)({}, props, {
    item: item,
    closePanel: closePanel
  }));
}
//# sourceMappingURL=index.js.map