"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ToolItemButton;

var React = _interopRequireWildcard(require("react"));

var _hooks = require("../hooks");

var _buttonSide = require("../hooks/buttonSide");

var icons = _interopRequireWildcard(require("../icons"));

var _styled = require("./styled");

var _constant = require("../constant");

const _createElement = /*#__PURE__*/React.createElement;

function ToolItemButton(props) {
  const {
    item,
    style,
    onClick,
    type,
    width,
    children,
    isActive = false,
    isFocused = false,
    isDisabled,
    icon,
    lineText
  } = props;
  const {
    openSubLine,
    item: subLine,
    closeSubLine
  } = (0, _hooks.useSubline)();
  const {
    openPanel,
    item: panelItem,
    closePanel,
    controller
  } = (0, _hooks.usePanel)();
  const {
    isStart,
    isEnd
  } = (0, _buttonSide.useSide)();
  const onItemClick = (0, _hooks.useItemClick)();
  const [isTouched, setIsTouched] = React.useState(false);
  const startTouch = React.useCallback(event => {
    event.stopPropagation();
    setIsTouched(true);
  }, []);
  const endTouch = React.useCallback(event => {
    event.stopPropagation();
    setIsTouched(false);
  }, []);
  const handleClick = React.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    setIsTouched(false);

    if (isDisabled) {
      return;
    } // 如果点到了引导等无关的内容，这里忽略掉


    if ( // @ts-ignore
    typeof event.target.closest === 'function' && // @ts-ignore
    event.target.closest('.highIndexPopover')) {
      return;
    } // 全局的 onClick


    onItemClick && onItemClick(item); // 如果有 closePanelOnClick / hideToolbarOnClick 标记，先处理一下

    if (typeof item !== 'string') {
      // 关闭底部 panel 并 show 键盘
      if (item.closePanelOnClick) {
        panelItem && closePanel && closePanel(true);
      } // 关闭底部 panel 并 blur 键盘


      if (item.hideToolbarOnClick) {
        panelItem && closePanel && closePanel(false);
        controller?.run('onCangjieBlur');
      }
    } // 如果定义了自己的 onClick，开始回调


    if (typeof item !== 'string' && item.onClick) {
      item.onClick();
    } // 处理二级浮窗


    if (subLine && subLine === item) {
      closeSubLine && closeSubLine();
    } else if (panelItem && panelItem === item) {
      closePanel && closePanel();
    } else if (typeof item === 'object' && item.children) {
      openSubLine && openSubLine(item);
    } else {
      openPanel && openPanel(item);
    } // 处理标准的 onClick


    onClick && onClick(item);
  }, [isDisabled, onItemClick, item, subLine, panelItem, onClick, closePanel, controller, closeSubLine, openSubLine, openPanel]);
  const dataKey = React.useMemo(() => (0, _constant.itemToKey)(item), [item]);
  const OuterBox = _styled.Outers[type];
  const Box = _styled.Boxes[type];
  const isIconKey = typeof icon === 'string' && icons[icon];
  const BaseIcon = isIconKey ? icons[icon] : icon;
  return /*#__PURE__*/_createElement(OuterBox, {
    flexWidth: width || 1,
    onTouchStart: startTouch,
    onTouchEnd: endTouch,
    onTouchCancel: endTouch,
    onMouseDown: handleClick,
    isTouched: isTouched,
    isActive: isActive,
    isFocused: isFocused
  }, /*#__PURE__*/_createElement(Box, {
    "data-toolbar-box": true,
    "data-toolbar-key": dataKey,
    style: style,
    isActive: isActive,
    isFocused: isFocused,
    isDisabled: isDisabled,
    isStart: isStart,
    isEnd: isEnd
  }, typeof BaseIcon === 'string' && /*#__PURE__*/_createElement(_styled.ImageIcon, {
    src: BaseIcon
  }), typeof BaseIcon === 'function' && /*#__PURE__*/_createElement(BaseIcon, null), !!children && children, !!lineText && /*#__PURE__*/_createElement("div", null, lineText)));
}
//# sourceMappingURL=toolItem.js.map