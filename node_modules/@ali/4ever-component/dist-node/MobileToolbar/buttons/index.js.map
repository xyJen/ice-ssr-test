{"version":3,"sources":["../../../../src/MobileToolbar/buttons/index.tsx"],"names":["keyboard","name","Component","Wrapper","closePanel","controller","panelShowing","rest","item","handleClick","React","useCallback","run","style","useMemo","transition","transform","PluginButton","props","plugins","isStart","isEnd","pluginName","buttonName","split","plugin","hash","buttons","locale","toolbar","sideValue","ToolItemButton","value","selection","ItemView","rawItem","parsedItem","openPanel","panelItem","subLineItem","subLineShowing","DIVIDER_NONE","DIVIDER","DIVIDER_VERT","NEW_LINE","ALIGN_PLACEHOLDER","title"],"mappings":";;;;;;;;;;;;;AAAA;;AAIA;;AAOA;;AACA;;AACA;;AACA;;AACA;;uBAd4B,a;AAgC5B,MAAMA,QAA2B,GAAG;AAClCC,EAAAA,IAAI,EAAE,UAD4B;AAElCC,EAAAA,SAAS,EAAE,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA,UAAvB;AAAmCC,IAAAA,YAAnC;AAAiD,OAAGC;AAApD,GAAD,KAAgE;AACzE,UAAM;AAAEC,MAAAA;AAAF,QAAW,sBAAjB;AACA,UAAMC,WAAW,GAAGC,KAAK,CAACC,WAAN,CAAkB,MAAM;AAC1C,UAAIH,IAAJ,EAAU;AACRJ,QAAAA,UAAU,IAAIA,UAAU,EAAxB;AACD,OAFD,MAEO;AACLC,QAAAA,UAAU,CAACO,GAAX,CAAe,eAAf;AACD;AACF,KANmB,EAMjB,CAACJ,IAAD,EAAOJ,UAAP,EAAmBC,UAAnB,CANiB,CAApB;AAOA,UAAMQ,KAA0B,GAAGH,KAAK,CAACI,OAAN,CAAc,MAAM;AACrD,aAAON,IAAI,GACP;AAAEO,QAAAA,UAAU,EAAE;AAAd,OADO,GAEP;AAAEA,QAAAA,UAAU,EAAE,gBAAd;AAAgCC,QAAAA,SAAS,EAAE;AAA3C,OAFJ;AAGD,KAJkC,EAIhC,CAACR,IAAD,CAJgC,CAAnC;AAKA,wBACE,eAAC,OAAD;AACE,MAAA,KAAK,EAAEK,KADT;AAEE,MAAA,OAAO,EAAEJ,WAFX;AAGE,MAAA,IAAI,EAAC;AAHP,OAIMF,IAJN;AAKE,MAAA,IAAI,EAAC;AALP,OADF;AASD;AAzBiC,CAApC;AA4BA;AACA;AACA;AACA;AACA;;AACA,SAASU,YAAT,CAAsBC,KAAtB,EAAiD;AAC/C,QAAM;AAAEV,IAAAA,IAAF;AAAQW,IAAAA,OAAR;AAAiBd,IAAAA,UAAjB;AAA6Be,IAAAA,OAA7B;AAAsCC,IAAAA,KAAtC;AAA6CjB,IAAAA;AAA7C,MAA4Dc,KAAlE;AACA,QAAMjB,IAAI,GAAG,OAAOO,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACP,IAApD;AACA,QAAM,CAACqB,UAAD,EAAaC,UAAU,GAAG,QAA1B,IAAsCtB,IAAI,CAACuB,KAAL,CAAW,GAAX,CAA5C;AACA,QAAMC,MAAM,GAAGN,OAAO,CAACO,IAAR,CAAaJ,UAAb,CAAf;AACA,QAAM;AAAEK,IAAAA,OAAO,GAAG,EAAZ;AAAgBC,IAAAA,MAAM,GAAG;AAAzB,MAAgCH,MAAM,EAAEI,OAAR,IAAmB,EAAzD;AACA,QAAM3B,SAAS,GAAGyB,OAAO,CACvBJ,UADuB,CAAzB;AAIA,QAAMO,SAAS,GAAGpB,KAAK,CAACI,OAAN,CAChB,OAAO;AACLM,IAAAA,OADK;AAELC,IAAAA;AAFK,GAAP,CADgB,EAKhB,CAACD,OAAD,EAAUC,KAAV,CALgB,CAAlB;;AAQA,MAAI,CAACnB,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AACD,sBACE,eAAC,uBAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE4B;AAA7B,kBACE,eAAC,SAAD;AACE,IAAA,UAAU,EAAEzB,UADd;AAEE,IAAA,MAAM,EAAEuB,MAFV;AAGE,IAAA,IAAI,EAAEpB,IAHR;AAIE,IAAA,YAAY,EAAE,KAJhB;AAKE,IAAA,cAAc,EAAE,KALlB;AAME,IAAA,UAAU,EAAEJ,UANd;AAOE,IAAA,OAAO,EAAE2B,iBAPX;AAQE,IAAA,SAAS,EAAE1B,UAAU,CAAC2B,KAAX,CAAiBC;AAR9B,IADF,CADF;AAcD;AAED;AACA;AACA;;;wBAkBW,eAAC,eAAD,O;;yBAIA,eAAC,gBAAD,O;;yBAIA,eAAC,eAAD,O;;yBAIA,eAAC,iBAAD,O;;AA7BI,SAASC,QAAT,CAAkBhB,KAAlB,EAAwC;AACrD,QAAM;AAAEV,IAAAA,IAAI,EAAE2B,OAAR;AAAiB9B,IAAAA;AAAjB,MAAgCa,KAAtC;AACA,QAAMV,IAAI,GAAGE,KAAK,CAACI,OAAN,CAAc,MAAM;AAC/B,UAAMsB,UAAU,GAAGD,OAAO,KAAK,UAAZ,GAAyBnC,QAAzB,GAAoCmC,OAAvD;AACA,WAAO,OAAOC,UAAP,KAAsB,QAAtB,GAAiC;AAAEnC,MAAAA,IAAI,EAAEmC;AAAR,KAAjC,GAAwDA,UAA/D;AACD,GAHY,EAGV,CAACD,OAAD,CAHU,CAAb;AAIA,QAAM;AAAEjC,IAAAA;AAAF,MAAgBM,IAAtB;AACA,QAAM;AAAEJ,IAAAA,UAAF;AAAciC,IAAAA,SAAd;AAAyB7B,IAAAA,IAAI,EAAE8B;AAA/B,MAA6C,sBAAnD;AACA,QAAM;AAAE9B,IAAAA,IAAI,EAAE+B;AAAR,MAAwB,wBAA9B;AACA,QAAMjC,YAAY,GAAGgC,SAAS,KAAKH,OAAnC;AACA,QAAMK,cAAc,GAAGD,WAAW,KAAKJ,OAAvC;;AAEA,MAAI3B,IAAI,CAACP,IAAL,KAAcwC,sBAAd,IAA8B,CAACjC,IAAI,CAACP,IAAxC,EAA8C;AAC5C,WAAO,IAAP;AACD;;AAED,MAAIO,IAAI,CAACP,IAAL,KAAcyC,iBAAlB,EAA2B;AACzB;AACD;;AAED,MAAIlC,IAAI,CAACP,IAAL,KAAc0C,sBAAlB,EAAgC;AAC9B;AACD;;AAED,MAAInC,IAAI,CAACP,IAAL,KAAc2C,kBAAlB,EAA4B;AAC1B;AACD;;AAED,MAAIpC,IAAI,CAACP,IAAL,KAAc4C,2BAAlB,EAAqC;AACnC;AACD;;AAED,MAAIrC,IAAI,CAACsC,KAAT,EAAgB;AACd,wBAAO,eAAC,kBAAD,QAAatC,IAAI,CAACsC,KAAlB,CAAP;AACD;;AAED,MAAI5C,SAAJ,EAAe;AACb,wBACE,eAAC,SAAD;AACE,MAAA,IAAI,EAAEM,IADR;AAEE,MAAA,SAAS,EAAE8B,SAFb;AAGE,MAAA,WAAW,EAAEC,WAHf;AAIE,MAAA,YAAY,EAAEjC,YAJhB;AAKE,MAAA,cAAc,EAAEkC,cALlB;AAME,MAAA,UAAU,EAAEpC,UANd;AAOE,MAAA,SAAS,EAAEiC,SAPb;AAQE,MAAA,OAAO,EAAEN,iBARX;AASE,MAAA,UAAU,EAAE1B,UATd;AAUE,MAAA,SAAS,EAAEA,UAAU,CAAC2B,KAAX,CAAiBC;AAV9B,MADF;AAcD;;AACD,sBAAO,eAAC,YAAD,6BAAkBf,KAAlB;AAAyB,IAAA,IAAI,EAAEV,IAA/B;AAAqC,IAAA,UAAU,EAAEJ;AAAjD,KAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\n\nimport { MobileToolbarItem, MobileToolbarButtonProps, Plugins } from '../types';\nimport {\n  DIVIDER,\n  DIVIDER_VERT,\n  NEW_LINE,\n  ALIGN_PLACEHOLDER,\n  DIVIDER_NONE,\n} from '../constant';\nimport ToolItemButton from './toolItem';\nimport { SideContext } from '../hooks/buttonSide';\nimport { usePanel, useSubline } from '../hooks/index';\nimport { NewLine, Divider, AlignIcon, GroupTitle } from './styled';\nimport { Divider as DividerVert } from '../components/styled';\n\ninterface CommonProps {\n  controller: Controller;\n  plugins: Plugins;\n  isStart?: boolean;\n  isEnd?: boolean;\n}\n\ninterface PluginToolbarProps extends CommonProps {\n  item: MobileToolbarItem;\n  closePanel: MobileToolbarButtonProps['closePanel'];\n}\n\ninterface ItemViewProps extends CommonProps {\n  item: MobileToolbarItem;\n}\n\nconst keyboard: MobileToolbarItem = {\n  name: 'keyboard',\n  Component: ({ Wrapper, closePanel, controller, panelShowing, ...rest }) => {\n    const { item } = usePanel();\n    const handleClick = React.useCallback(() => {\n      if (item) {\n        closePanel && closePanel();\n      } else {\n        controller.run('onCangjieBlur');\n      }\n    }, [item, closePanel, controller]);\n    const style: React.CSSProperties = React.useMemo(() => {\n      return item\n        ? { transition: 'transform 0.3s' }\n        : { transition: 'transform 0.3s', transform: 'scale(1, -1)' };\n    }, [item]);\n    return (\n      <Wrapper\n        style={style}\n        onClick={handleClick}\n        type=\"big\"\n        {...rest}\n        icon=\"keybrdUp\"\n      />\n    );\n  },\n};\n\n/**\n * toolbar 按钮的逻辑，和 PC 端保持一致，从插件里拿 toolbar 字段\n *\n * 如果仅有 name，没有 Component，会被视为「插件按钮」\n */\nfunction PluginButton(props: PluginToolbarProps) {\n  const { item, plugins, controller, isStart, isEnd, closePanel } = props;\n  const name = typeof item === 'string' ? item : item.name;\n  const [pluginName, buttonName = 'mobile'] = name.split('.');\n  const plugin = plugins.hash[pluginName];\n  const { buttons = {}, locale = {} } = plugin?.toolbar || {};\n  const Component = buttons[\n    buttonName\n  ] as React.ComponentType<MobileToolbarButtonProps>;\n\n  const sideValue = React.useMemo(\n    () => ({\n      isStart,\n      isEnd,\n    }),\n    [isStart, isEnd],\n  );\n\n  if (!Component) {\n    return null;\n  }\n  return (\n    <SideContext.Provider value={sideValue}>\n      <Component\n        controller={controller}\n        locale={locale}\n        item={item}\n        panelShowing={false}\n        subLineShowing={false}\n        closePanel={closePanel}\n        Wrapper={ToolItemButton}\n        selection={controller.value.selection}\n      />\n    </SideContext.Provider>\n  );\n}\n\n/**\n * toolbar 按钮渲染逻辑，这里会处理分割线、新行等逻辑\n */\nexport default function ItemView(props: ItemViewProps) {\n  const { item: rawItem, controller } = props;\n  const item = React.useMemo(() => {\n    const parsedItem = rawItem === 'keyboard' ? keyboard : rawItem;\n    return typeof parsedItem === 'string' ? { name: parsedItem } : parsedItem;\n  }, [rawItem]);\n  const { Component } = item;\n  const { closePanel, openPanel, item: panelItem } = usePanel();\n  const { item: subLineItem } = useSubline();\n  const panelShowing = panelItem === rawItem;\n  const subLineShowing = subLineItem === rawItem;\n\n  if (item.name === DIVIDER_NONE || !item.name) {\n    return null;\n  }\n\n  if (item.name === DIVIDER) {\n    return <Divider />;\n  }\n\n  if (item.name === DIVIDER_VERT) {\n    return <DividerVert />;\n  }\n\n  if (item.name === NEW_LINE) {\n    return <NewLine />;\n  }\n\n  if (item.name === ALIGN_PLACEHOLDER) {\n    return <AlignIcon />;\n  }\n\n  if (item.title) {\n    return <GroupTitle>{item.title}</GroupTitle>;\n  }\n\n  if (Component) {\n    return (\n      <Component\n        item={item}\n        panelItem={panelItem}\n        subLineItem={subLineItem}\n        panelShowing={panelShowing}\n        subLineShowing={subLineShowing}\n        closePanel={closePanel}\n        openPanel={openPanel}\n        Wrapper={ToolItemButton}\n        controller={controller}\n        selection={controller.value.selection}\n      />\n    );\n  }\n  return <PluginButton {...props} item={item} closePanel={closePanel} />;\n}\n"],"file":"index.js"}