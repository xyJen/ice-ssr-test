{"version":3,"sources":["../../../../src/MobileToolbar/buttons/toolItem.tsx"],"names":["ToolItemButton","props","item","style","onClick","type","width","children","isActive","isFocused","isDisabled","icon","lineText","openSubLine","subLine","closeSubLine","openPanel","panelItem","closePanel","controller","isStart","isEnd","onItemClick","isTouched","setIsTouched","React","useState","startTouch","useCallback","event","stopPropagation","endTouch","handleClick","preventDefault","target","closest","closePanelOnClick","hideToolbarOnClick","run","dataKey","useMemo","OuterBox","Outers","Box","Boxes","isIconKey","icons","BaseIcon"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useSubline, usePanel, useItemClick } from '../hooks';\nimport { useSide } from '../hooks/buttonSide';\nimport { ButtonWrapperProps } from '../types';\nimport * as icons from '../icons';\nimport { Boxes, Outers, ImageIcon } from './styled';\nimport { itemToKey } from '../constant';\n\nexport default function ToolItemButton(props: ButtonWrapperProps) {\n  const {\n    item,\n    style,\n    onClick,\n    type,\n    width,\n    children,\n    isActive = false,\n    isFocused = false,\n    isDisabled,\n    icon,\n    lineText,\n  } = props;\n  const { openSubLine, item: subLine, closeSubLine } = useSubline();\n  const { openPanel, item: panelItem, closePanel, controller } = usePanel();\n  const { isStart, isEnd } = useSide();\n  const onItemClick = useItemClick();\n  const [isTouched, setIsTouched] = React.useState(false);\n\n  const startTouch = React.useCallback(\n    (event: React.MouseEvent | React.TouchEvent) => {\n      event.stopPropagation();\n      setIsTouched(true);\n    },\n    [],\n  );\n  const endTouch = React.useCallback(\n    (event: React.MouseEvent | React.TouchEvent) => {\n      event.stopPropagation();\n      setIsTouched(false);\n    },\n    [],\n  );\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n      setIsTouched(false);\n      if (isDisabled) {\n        return;\n      }\n\n      // 如果点到了引导等无关的内容，这里忽略掉\n      if (\n        // @ts-ignore\n        typeof event.target.closest === 'function' &&\n        // @ts-ignore\n        event.target.closest('.highIndexPopover')\n      ) {\n        return;\n      }\n      // 全局的 onClick\n      onItemClick && onItemClick(item);\n\n      // 如果有 closePanelOnClick / hideToolbarOnClick 标记，先处理一下\n      if (typeof item !== 'string') {\n        // 关闭底部 panel 并 show 键盘\n        if (item.closePanelOnClick) {\n          panelItem && closePanel && closePanel(true);\n        }\n        // 关闭底部 panel 并 blur 键盘\n        if (item.hideToolbarOnClick) {\n          panelItem && closePanel && closePanel(false);\n          controller?.run('onCangjieBlur');\n        }\n      }\n\n      // 如果定义了自己的 onClick，开始回调\n      if (typeof item !== 'string' && item.onClick) {\n        item.onClick();\n      }\n\n      // 处理二级浮窗\n      if (subLine && subLine === item) {\n        closeSubLine && closeSubLine();\n      } else if (panelItem && panelItem === item) {\n        closePanel && closePanel();\n      } else if (typeof item === 'object' && item.children) {\n        openSubLine && openSubLine(item);\n      } else {\n        openPanel && openPanel(item);\n      }\n\n      // 处理标准的 onClick\n      onClick && onClick(item);\n    },\n    [\n      isDisabled,\n      onItemClick,\n      item,\n      subLine,\n      panelItem,\n      onClick,\n      closePanel,\n      controller,\n      closeSubLine,\n      openSubLine,\n      openPanel,\n    ],\n  );\n\n  const dataKey = React.useMemo(() => itemToKey(item), [item]);\n\n  const OuterBox = Outers[type];\n  const Box = Boxes[type];\n  const isIconKey = typeof icon === 'string' && icons[icon];\n  const BaseIcon = isIconKey ? icons[icon] : icon;\n\n  return (\n    <OuterBox\n      flexWidth={width || 1}\n      onTouchStart={startTouch}\n      onTouchEnd={endTouch}\n      onTouchCancel={endTouch}\n      onMouseDown={handleClick}\n      isTouched={isTouched}\n      isActive={isActive}\n      isFocused={isFocused}\n    >\n      <Box\n        data-toolbar-box\n        data-toolbar-key={dataKey}\n        style={style}\n        isActive={isActive}\n        isFocused={isFocused}\n        isDisabled={isDisabled}\n        isStart={isStart}\n        isEnd={isEnd}\n      >\n        {typeof BaseIcon === 'string' && <ImageIcon src={BaseIcon} />}\n        {typeof BaseIcon === 'function' && <BaseIcon />}\n        {!!children && children}\n        {!!lineText && <div>{lineText}</div>}\n      </Box>\n    </OuterBox>\n  );\n}\n"],"file":"toolItem.js"}