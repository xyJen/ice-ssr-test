"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _constant = require("../constant");

var _index = _interopRequireDefault(require("../buttons/index"));

var _styled = require("./styled");

const _createElement = /*#__PURE__*/React.createElement;

function SubLine({
  item: subLine,
  plugins,
  controller
}) {
  const children = typeof subLine !== 'string' && subLine.children || [];
  const ref = React.useRef(null);
  const [left, setLeft] = React.useState(0);
  const name = typeof subLine === 'string' ? subLine : subLine.name;
  React.useEffect(() => {
    const {
      current: wrapper
    } = ref;
    const line = wrapper?.closest('[data-toolbar-line]');

    if (!wrapper || !line || !(line instanceof HTMLElement)) {
      return;
    }

    const itemKey = (0, _constant.itemToKey)(name);
    const target = line?.querySelector(`[data-toolbar-key=${itemKey}]`);
    const {
      left: sourceLeft = 0,
      right: sourceRight = 0
    } = target?.getBoundingClientRect() || {};
    const sourceCenter = (sourceLeft + sourceRight) / 2;
    const {
      width: selfWidth
    } = wrapper.getBoundingClientRect();
    const offsetLeft = Math.max(sourceCenter - selfWidth / 2, _constant.SUBLINE_MIN_LEFT);
    setLeft(offsetLeft);
  }, [name]);
  return /*#__PURE__*/_createElement(_styled.SubLineWrapper, {
    ref: ref,
    style: {
      left
    }
  }, children.map(item => /*#__PURE__*/_createElement(_index.default, {
    key: typeof item === 'string' ? item : item.name,
    item: item,
    controller: controller,
    plugins: plugins
  })));
}

var _default = SubLine;
exports.default = _default;
//# sourceMappingURL=subline.js.map