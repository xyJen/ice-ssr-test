"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _hooks = require("../hooks");

var _index = _interopRequireDefault(require("../buttons/index"));

var _subline = _interopRequireDefault(require("./subline"));

var _styled = require("./styled");

var _useLayoutFilter = _interopRequireDefault(require("../hooks/useLayoutFilter"));

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_styled.Divider, null);

var _ref2 = /*#__PURE__*/_createElement(_styled.KeyboardShadow, null);

function Line({
  layout: allLayout,
  plugins,
  controller
}) {
  const {
    item: subLine
  } = (0, _hooks.useSubline)();
  const layout = (0, _useLayoutFilter.default)(allLayout);
  const flexLayout = React.useMemo(() => layout.filter(g => !g.fixedOnRight), [layout]);
  const fixedGroup = React.useMemo(() => layout.find(g => g.fixedOnRight), [layout]);
  const subLineKey = typeof subLine === 'object' ? subLine.name : subLine;
  return /*#__PURE__*/_createElement(_styled.LineWrapper, {
    "data-toolbar-line": true
  }, /*#__PURE__*/_createElement(_styled.ScrollableWrapper, null, flexLayout.map((group, gindex) => /*#__PURE__*/_createElement(React.Fragment, {
    key: group.key
  }, gindex !== 0 && _ref, group.items.map((item, index) => /*#__PURE__*/_createElement(_index.default, {
    key: `${typeof item === 'string' ? item : item.name}_${index}`,
    item: item,
    controller: controller,
    plugins: plugins
  }))))), subLine && /*#__PURE__*/_createElement(_subline.default, {
    key: String(subLineKey),
    item: subLine,
    plugins: plugins,
    controller: controller
  }), !!fixedGroup && /*#__PURE__*/_createElement(_styled.KeyboardWrapper, null, _ref2, fixedGroup.items.map(item => /*#__PURE__*/_createElement(_index.default, {
    key: typeof item === 'string' ? item : item.name,
    item: item,
    controller: controller,
    plugins: plugins
  }))));
}

var _default = Line;
exports.default = _default;
//# sourceMappingURL=line.js.map