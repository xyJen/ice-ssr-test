"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ToolbarRender;

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everCangjie = require("@ali/4ever-cangjie");

var _line = _interopRequireDefault(require("./line"));

var _layoutContent = _interopRequireDefault(require("../panels/layoutContent"));

var _hooks = require("../hooks");

var _visualViewport = require("../adapter/visualViewport");

var _focusUtil = require("../adapter/focusUtil");

var _useKeyboardTop = _interopRequireDefault(require("../hooks/useKeyboardTop"));

var _useExternalClick = require("../hooks/useExternalClick");

var _styled = require("../panels/styled");

var _styled2 = require("./styled");

var _usePrev = _interopRequireDefault(require("../hooks/usePrev"));

var _useContentScroll = _interopRequireDefault(require("../hooks/useContentScroll"));

const _createElement = /*#__PURE__*/React.createElement;
const defaultVisualBoxDisabled = /docs\.dingtalk\.com/.test(location.host);

const blockEvent = event => {
  event.stopPropagation();
  event.preventDefault();
};

var _ref = /*#__PURE__*/_createElement(_styled2.BottomSafeArea, null);

function ToolbarRender(props) {
  const {
    layout,
    controller,
    plugins,
    onItemClick,
    onPanelOps,
    onBottomPanelChange,
    useVisualBox
  } = props;
  const {
    isFocused
  } = controller.value;
  const [panelItem, setPanelItem] = React.useState();
  const toolbarWrapperRef = React.useRef(null);
  const measureRef = React.useRef(null);
  const isVisualBoxDisabled = typeof useVisualBox === 'boolean' ? !useVisualBox : defaultVisualBoxDisabled;
  const [subLine, setSubline] = React.useState();
  const subLineOps = React.useMemo(() => {
    return {
      openSubLine: item => {
        const newSubLine = typeof item !== 'string' && item.children?.length && item !== subLine ? item : undefined;

        if (newSubLine !== subLine) {
          setSubline(newSubLine);
        }
      },
      closeSubLine: () => {
        setSubline(undefined);
      },
      item: subLine
    };
  }, [subLine]);
  const panelOpsRef = React.useRef(null);
  const panelOps = React.useMemo(() => {
    const ops = {
      openPanel: rawItem => {
        controller.run('onAction', {
          type: _everCangjie.ACTION_CLEAR_MOBILE_MENU
        });
        const item = typeof rawItem === 'string' ? {
          name: rawItem
        } : rawItem;

        if (item.panel) {
          // fake blur mode - on
          setPanelItem(item); // 过一阵子再收键盘，不然会透出底部的内容、看起来闪烁一下

          setTimeout(() => {
            (0, _focusUtil.enterFocusMode)(controller);
          }, 0);
        } else if (item.name === 'keyboard') {
          controller.command(_everCangjie.Commands.moveToFocus).run('onCangjieBlur');
        }
      },
      controller,
      closePanel: (autoFocus = true) => {
        // fake blur mode - off
        setPanelItem(undefined);
        (0, _focusUtil.exitFocusMode)(controller, autoFocus);
      },
      item: panelItem
    };
    panelOpsRef.current = ops;
    return ops;
  }, [controller, panelItem]);
  React.useEffect(() => {
    onPanelOps && onPanelOps(panelOps);
  }, [onPanelOps, panelOps]);
  const prev = (0, _usePrev.default)({
    panelItem,
    subLine
  });
  React.useEffect(() => {
    if (subLine && panelItem) {
      if (prev.panelItem) {
        panelOps.closePanel();
      } else {
        subLineOps.closeSubLine();
      }
    }
  }, [panelItem, panelOps, prev.panelItem, subLine, subLineOps]);
  React.useEffect(() => {
    onBottomPanelChange && onBottomPanelChange(panelOps.item, panelOps.closePanel);
  }, [onBottomPanelChange, panelOps]);
  const closePanel = React.useCallback(() => {
    panelOps.item && panelOps.closePanel();
  }, [panelOps]);
  const closeSubLine = React.useCallback(() => {
    subLineOps.item && subLineOps.closeSubLine();
  }, [subLineOps]);
  const closeAllPopup = React.useCallback(() => {
    closePanel();
    closeSubLine();
  }, [closePanel, closeSubLine]);
  (0, _useExternalClick.useExternalClick)(toolbarWrapperRef, closeAllPopup);
  (0, _visualViewport.useVisualboxTransfrom)(toolbarWrapperRef, measureRef, isVisualBoxDisabled);
  React.useEffect(() => {
    if (!isFocused && panelOps.item) {
      panelOps.closePanel(false);
    }
  }, [isFocused, panelOps]);
  const panel = panelItem && typeof panelItem !== 'string' ? panelItem.panel : undefined;
  const {
    content: PanelContent
  } = panel || {};
  const panelObj = typeof PanelContent === 'object' ? PanelContent : null;
  const top = (0, _useKeyboardTop.default)(Boolean(panelItem), panelOpsRef, toolbarWrapperRef);
  (0, _useContentScroll.default)(subLine, panelItem, controller, top);

  if (!isFocused) {
    return null;
  }

  return /*#__PURE__*/_createElement(_hooks.PanelContext.Provider, {
    value: panelOps
  }, /*#__PURE__*/_createElement(_hooks.SublineContext.Provider, {
    value: subLineOps
  }, /*#__PURE__*/_createElement(_hooks.ItemClickContext.Provider, {
    value: onItemClick
  }, /*#__PURE__*/_createElement(_styled2.ToolbarWrapper, {
    "data-toolbar-wrapper": true,
    style: {
      top
    },
    onMouseDown: blockEvent,
    onMouseUp: blockEvent,
    ref: toolbarWrapperRef
  }, /*#__PURE__*/_createElement(_line.default, {
    layout: layout,
    controller: controller,
    plugins: plugins
  }), panelObj && /*#__PURE__*/_createElement(_layoutContent.default, {
    layout: panelObj,
    controller: controller,
    plugins: plugins
  }), PanelContent && typeof PanelContent !== 'object' && /*#__PURE__*/_createElement(_styled.ContentWrapper, {
    "data-toolbar-panel-custom": true
  }, /*#__PURE__*/_createElement(PanelContent, {
    controller: controller
  })), isVisualBoxDisabled && _ref, !isVisualBoxDisabled && /*#__PURE__*/_createElement(MesaureBlock, {
    ref: measureRef
  })))));
}

const MeasureFullSize = /*#__PURE__*/_styledComponents.default.div(["position:fixed;width:100%;height:100%;visibility:hidden;pointer-events:none;"]);

const MesaureBlock = /*#__PURE__*/React.forwardRef((_, ref) => {
  return /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_createElement(MeasureFullSize, {
    ref: ref
  }), window.document.body);
});
//# sourceMappingURL=toolbar.js.map