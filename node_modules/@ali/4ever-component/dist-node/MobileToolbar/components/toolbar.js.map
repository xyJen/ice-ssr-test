{"version":3,"sources":["../../../../src/MobileToolbar/components/toolbar.tsx"],"names":["defaultVisualBoxDisabled","test","location","host","blockEvent","event","stopPropagation","preventDefault","ToolbarRender","props","layout","controller","plugins","onItemClick","onPanelOps","onBottomPanelChange","useVisualBox","isFocused","value","panelItem","setPanelItem","React","useState","toolbarWrapperRef","useRef","measureRef","isVisualBoxDisabled","subLine","setSubline","subLineOps","useMemo","openSubLine","item","newSubLine","children","length","undefined","closeSubLine","panelOpsRef","panelOps","ops","openPanel","rawItem","run","type","ACTION_CLEAR_MOBILE_MENU","name","panel","setTimeout","command","Commands","moveToFocus","closePanel","autoFocus","current","useEffect","prev","useCallback","closeAllPopup","content","PanelContent","panelObj","top","Boolean","MeasureFullSize","styled","div","MesaureBlock","forwardRef","_","ref","ReactDOM","createPortal","window","document","body"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport {\n  Controller,\n  Commands,\n  ACTION_CLEAR_MOBILE_MENU,\n} from '@ali/4ever-cangjie';\n\nimport { MobileToolbarItem, MobileToolbarProps, Plugins } from '../types';\nimport Line from './line';\nimport LayoutContent from '../panels/layoutContent';\nimport { PanelContext, ItemClickContext, SublineContext } from '../hooks';\nimport { useVisualboxTransfrom } from '../adapter/visualViewport';\nimport { enterFocusMode, exitFocusMode } from '../adapter/focusUtil';\nimport useKeyboardTop from '../hooks/useKeyboardTop';\nimport { useExternalClick } from '../hooks/useExternalClick';\nimport { ContentWrapper } from '../panels/styled';\nimport { BottomSafeArea, ToolbarWrapper } from './styled';\nimport usePrev from '../hooks/usePrev';\nimport useContentScroll from '../hooks/useContentScroll';\n\nconst defaultVisualBoxDisabled = /docs\\.dingtalk\\.com/.test(location.host);\n\nexport interface IProps extends MobileToolbarProps {\n  controller: Controller;\n  plugins: Plugins;\n}\n\nconst blockEvent = (event: React.MouseEvent) => {\n  event.stopPropagation();\n  event.preventDefault();\n};\n\nexport default function ToolbarRender(props: IProps) {\n  const {\n    layout,\n    controller,\n    plugins,\n    onItemClick,\n    onPanelOps,\n    onBottomPanelChange,\n    useVisualBox,\n  } = props;\n  const { isFocused } = controller.value;\n  const [panelItem, setPanelItem] = React.useState<MobileToolbarItem>();\n  const toolbarWrapperRef = React.useRef<HTMLDivElement | null>(null);\n  const measureRef = React.useRef<HTMLDivElement | null>(null);\n  const isVisualBoxDisabled =\n    typeof useVisualBox === 'boolean'\n      ? !useVisualBox\n      : defaultVisualBoxDisabled;\n\n  const [subLine, setSubline] = React.useState<MobileToolbarItem | undefined>();\n  const subLineOps = React.useMemo(() => {\n    return {\n      openSubLine: (item: MobileToolbarItem) => {\n        const newSubLine =\n          typeof item !== 'string' && item.children?.length && item !== subLine\n            ? item\n            : undefined;\n        if (newSubLine !== subLine) {\n          setSubline(newSubLine);\n        }\n      },\n      closeSubLine: () => {\n        setSubline(undefined);\n      },\n      item: subLine,\n    };\n  }, [subLine]);\n\n  const panelOpsRef = React.useRef<{ closePanel: Function } | null>(null);\n  const panelOps = React.useMemo(() => {\n    const ops = {\n      openPanel: (rawItem: MobileToolbarItem) => {\n        controller.run('onAction', { type: ACTION_CLEAR_MOBILE_MENU });\n        const item = typeof rawItem === 'string' ? { name: rawItem } : rawItem;\n        if (item.panel) {\n          // fake blur mode - on\n          setPanelItem(item);\n          // 过一阵子再收键盘，不然会透出底部的内容、看起来闪烁一下\n          setTimeout(() => {\n            enterFocusMode(controller);\n          }, 0);\n        } else if (item.name === 'keyboard') {\n          controller.command(Commands.moveToFocus).run('onCangjieBlur');\n        }\n      },\n      controller,\n      closePanel: (autoFocus = true) => {\n        // fake blur mode - off\n        setPanelItem(undefined);\n        exitFocusMode(controller, autoFocus);\n      },\n      item: panelItem,\n    };\n    panelOpsRef.current = ops;\n    return ops;\n  }, [controller, panelItem]);\n  React.useEffect(() => {\n    onPanelOps && onPanelOps(panelOps);\n  }, [onPanelOps, panelOps]);\n\n  const prev = usePrev({ panelItem, subLine });\n  React.useEffect(() => {\n    if (subLine && panelItem) {\n      if (prev.panelItem) {\n        panelOps.closePanel();\n      } else {\n        subLineOps.closeSubLine();\n      }\n    }\n  }, [panelItem, panelOps, prev.panelItem, subLine, subLineOps]);\n\n  React.useEffect(() => {\n    onBottomPanelChange &&\n      onBottomPanelChange(panelOps.item, panelOps.closePanel);\n  }, [onBottomPanelChange, panelOps]);\n\n  const closePanel = React.useCallback(() => {\n    panelOps.item && panelOps.closePanel();\n  }, [panelOps]);\n  const closeSubLine = React.useCallback(() => {\n    subLineOps.item && subLineOps.closeSubLine();\n  }, [subLineOps]);\n  const closeAllPopup = React.useCallback(() => {\n    closePanel();\n    closeSubLine();\n  }, [closePanel, closeSubLine]);\n  useExternalClick(toolbarWrapperRef, closeAllPopup);\n  useVisualboxTransfrom(toolbarWrapperRef, measureRef, isVisualBoxDisabled);\n\n  React.useEffect(() => {\n    if (!isFocused && panelOps.item) {\n      panelOps.closePanel(false);\n    }\n  }, [isFocused, panelOps]);\n\n  const panel =\n    panelItem && typeof panelItem !== 'string' ? panelItem.panel : undefined;\n  const { content: PanelContent } = panel || {};\n  const panelObj = typeof PanelContent === 'object' ? PanelContent : null;\n  const top = useKeyboardTop(\n    Boolean(panelItem),\n    panelOpsRef,\n    toolbarWrapperRef,\n  );\n  useContentScroll(subLine, panelItem, controller, top);\n\n  if (!isFocused) {\n    return null;\n  }\n\n  return (\n    <PanelContext.Provider value={panelOps}>\n      <SublineContext.Provider value={subLineOps}>\n        <ItemClickContext.Provider value={onItemClick}>\n          <ToolbarWrapper\n            data-toolbar-wrapper\n            style={{ top }}\n            onMouseDown={blockEvent}\n            onMouseUp={blockEvent}\n            ref={toolbarWrapperRef}\n          >\n            <Line layout={layout} controller={controller} plugins={plugins} />\n            {panelObj && (\n              <LayoutContent\n                layout={panelObj}\n                controller={controller}\n                plugins={plugins}\n              />\n            )}\n            {PanelContent && typeof PanelContent !== 'object' && (\n              <ContentWrapper data-toolbar-panel-custom>\n                <PanelContent controller={controller} />\n              </ContentWrapper>\n            )}\n            {isVisualBoxDisabled && <BottomSafeArea />}\n            {!isVisualBoxDisabled && <MesaureBlock ref={measureRef} />}\n          </ToolbarWrapper>\n        </ItemClickContext.Provider>\n      </SublineContext.Provider>\n    </PanelContext.Provider>\n  );\n}\n\nconst MeasureFullSize = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  visibility: hidden;\n  pointer-events: none;\n`;\n\nconst MesaureBlock = React.forwardRef<HTMLDivElement>((_, ref) => {\n  return ReactDOM.createPortal(\n    <MeasureFullSize ref={ref} />,\n    window.document.body,\n  );\n});\n"],"file":"toolbar.js"}