"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Header;

var React = _interopRequireWildcard(require("react"));

var _utils = require("../utils");

var _styled = require("./styled");

const _createElement = /*#__PURE__*/React.createElement;

function Header({
  onDragOffsetChange,
  onDragStatusChange,
  title: Title,
  Icon
}) {
  const ref = React.useRef(null);
  const dragOffset = React.useRef(0);
  const isDragging = React.useRef(false);
  const handleTouchStart = React.useCallback(event => {
    (0, _utils.blockEvent)(event);
    isDragging.current = true;
    onDragStatusChange(true);
    const {
      clientY: touchY
    } = event.touches[0];
    dragOffset.current = touchY;
  }, []);
  const handleTouchMove = React.useCallback(event => {
    (0, _utils.blockEvent)(event);

    if (!isDragging.current) {
      return;
    }

    const {
      clientY: touchY
    } = event.touches[0];
    onDragOffsetChange(touchY - dragOffset.current);
  }, []);
  const handleTouchEnd = React.useCallback(event => {
    (0, _utils.blockEvent)(event);
    isDragging.current = false;
    onDragStatusChange(false);
  }, []);
  React.useEffect(() => {
    const domNode = ref.current;

    if (!domNode) {
      return undefined;
    }

    domNode.addEventListener('touchstart', handleTouchStart, {
      passive: false
    });
    domNode.addEventListener('touchmove', handleTouchMove, {
      passive: false
    });
    domNode.addEventListener('touchend', handleTouchEnd, {
      passive: false
    });
    domNode.addEventListener('touchcancel', handleTouchEnd, {
      passive: false
    });
    return () => {
      domNode.removeEventListener('touchstart', handleTouchStart);
      domNode.removeEventListener('touchmove', handleTouchMove);
      domNode.removeEventListener('touchend', handleTouchEnd);
      domNode.removeEventListener('touchcancel', handleTouchEnd);
    };
  }, [handleTouchStart, handleTouchMove, handleTouchEnd]);
  return /*#__PURE__*/_createElement(_styled.HeaderWrapper, {
    "data-panel-header": true,
    ref: ref
  }, typeof Title === 'string' ? /*#__PURE__*/_createElement(React.Fragment, null, !!Icon && /*#__PURE__*/_createElement(_styled.IconWrapper, null, /*#__PURE__*/_createElement(Icon, null)), /*#__PURE__*/_createElement(_styled.HeaderText, {
    hasIcon: !!Icon
  }, Title)) : /*#__PURE__*/_createElement(Title, null));
}
//# sourceMappingURL=header.js.map