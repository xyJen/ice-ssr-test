"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _hooks = require("../hooks");

var _utils = require("../utils");

var _icons = require("../icons");

var _line = _interopRequireDefault(require("../components/line"));

var _header = _interopRequireDefault(require("./header"));

var _styled = require("./styled");

const _createElement = /*#__PURE__*/React.createElement;
const PANEL_TRANSITION_SHORT = 'none';
const PANEL_TRANSITION_LONG = 'opacity 350ms, transform 350ms';
const HEADER_BG_FADING = '#ffa39e';

var _ref = /*#__PURE__*/_createElement(_icons.close, null);

function CloseButton({
  onClick
}) {
  const [isTouched, setIsTouched] = React.useState(false);
  const startTouch = React.useCallback(event => {
    event.stopPropagation();
    setIsTouched(true);
  }, []);
  const endTouch = React.useCallback(event => {
    event.stopPropagation();
    setIsTouched(false);
  }, []);
  return /*#__PURE__*/_createElement(_styled.CloseButtonWrapper, {
    onTouchStart: startTouch,
    onTouchEnd: endTouch,
    onTouchCancel: endTouch,
    onMouseDown: onClick,
    isTouched: isTouched
  }, _ref);
}

function BottomPanel(props) {
  const {
    children,
    title,
    icon,
    height,
    layout,
    controller,
    plugins
  } = props;
  const {
    closePanel
  } = (0, _hooks.usePanel)();
  const ref = React.useRef(null);
  const offsetRef = React.useRef(0);
  const isFadingRef = React.useRef(false);

  const handleDragStatusChange = isDragging => {
    const domNode = ref.current;

    if (!domNode) {
      return;
    }

    const transition = isDragging ? PANEL_TRANSITION_SHORT : PANEL_TRANSITION_LONG;
    domNode.style.transition = transition;
    isFadingRef.current = false;
    requestAnimationFrame(() => {
      if (offsetRef.current < 100) {
        domNode.style.transform = 'translate3d(0,0,0)';
      } else {
        closePanel && closePanel();
      }
    });
  };

  const handleDragOffsetChange = rawOffset => {
    const domNode = ref.current;

    if (!domNode) {
      return;
    }

    const offset = rawOffset > 0 ? rawOffset : 0;
    domNode.style.transform = `translate3d(0,${offset}px,0)`;
    offsetRef.current = offset;
    const isFading = offset >= 100;

    if (isFading !== isFadingRef.current) {
      isFadingRef.current = isFading;
      const color = isFading ? HEADER_BG_FADING : _styled.HEADER_BG;
      const headerNode = domNode.querySelector('[data-panel-header]');

      if (headerNode) {// headerNode.style.background = color;
      }
    }
  };

  return /*#__PURE__*/_createElement(_styled.BottomPanelWrapper, {
    "data-toobar-subpanel": true,
    height: height,
    ref: ref,
    onMouseDown: _utils.blockEvent
  }, /*#__PURE__*/_createElement(CloseButton, {
    onClick: closePanel
  }), !title && /*#__PURE__*/_createElement(_line.default, {
    layout: layout,
    controller: controller,
    plugins: plugins
  }), !!title && /*#__PURE__*/_createElement(_header.default, {
    title: title,
    Icon: icon,
    onDragOffsetChange: handleDragOffsetChange,
    onDragStatusChange: handleDragStatusChange
  }), /*#__PURE__*/_createElement(_styled.PanelContentWrapper, null, children));
}

var _default = BottomPanel;
exports.default = _default;
//# sourceMappingURL=index.js.map