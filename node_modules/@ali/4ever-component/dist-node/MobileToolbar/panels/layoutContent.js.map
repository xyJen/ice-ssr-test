{"version":3,"sources":["../../../../src/MobileToolbar/panels/layoutContent.tsx"],"names":["Group","items","controller","plugins","borderless","map","item","index","isStart","DIVIDER","DIVIDER_NONE","NEW_LINE","isEnd","length","name","LayoutPanel","layout","group","key"],"mappings":";;;;;;;;;;;AACA;;AAEA;;AACA;;AAGA;;AAPA;uBAC4B,a;;AAsB5B,SAASA,KAAT,CAAe;AAAEC,EAAAA,KAAF;AAASC,EAAAA,UAAT;AAAqBC,EAAAA,OAArB;AAA8BC,EAAAA;AAA9B,CAAf,EAAqE;AACnE,sBACE,eAAC,oBAAD;AAAc,IAAA,UAAU,EAAEA;AAA1B,KACGH,KAAK,CAACI,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1B,UAAMC,OAAO,GACXD,KAAK,KAAK,CAAV,IACAN,KAAK,CAACM,KAAK,GAAG,CAAT,CAAL,KAAqBE,iBADrB,IAEAR,KAAK,CAACM,KAAK,GAAG,CAAT,CAAL,KAAqBG,sBAFrB,IAGAT,KAAK,CAACM,KAAK,GAAG,CAAT,CAAL,KAAqBI,kBAJvB;AAKA,UAAMC,KAAK,GACTL,KAAK,KAAKN,KAAK,CAACY,MAAN,GAAe,CAAzB,IACAZ,KAAK,CAACM,KAAK,GAAG,CAAT,CAAL,KAAqBE,iBADrB,IAEAR,KAAK,CAACM,KAAK,GAAG,CAAT,CAAL,KAAqBG,sBAFrB,IAGAT,KAAK,CAACM,KAAK,GAAG,CAAT,CAAL,KAAqBI,kBAJvB;AAKA,wBACE,eAAC,gBAAD;AACE,MAAA,GAAG,EAAE,OAAOL,IAAP,KAAgB,QAAhB,GAA4B,GAAEA,IAAK,IAAGC,KAAM,EAA5C,GAAgDD,IAAI,CAACQ,IAD5D;AAEE,MAAA,IAAI,EAAER,IAFR;AAGE,MAAA,OAAO,EAAEE,OAHX;AAIE,MAAA,KAAK,EAAEI,KAJT;AAKE,MAAA,UAAU,EAAEV,UALd;AAME,MAAA,OAAO,EAAEC;AANX,MADF;AAUD,GArBA,CADH,CADF;AA0BD;;wBAQ2B,eAAC,sBAAD,O;;AAN5B,SAASY,WAAT,CAAqB;AAAEb,EAAAA,UAAF;AAAcC,EAAAA,OAAd;AAAuBa,EAAAA;AAAvB,CAArB,EAA8D;AAC5D,sBACE,eAAC,sBAAD;AAAgB;AAAhB,KACGA,MAAM,CAACX,GAAP,CAAW,CAACY,KAAD,EAAQV,KAAR,KAAkB;AAC5B,wBACE,eAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,EAAEU,KAAK,CAACC;AAA3B,OACGX,KAAK,KAAK,CAAV,QADH,eAEE,eAAC,KAAD;AACE,MAAA,KAAK,EAAEU,KAAK,CAAChB,KADf;AAEE,MAAA,UAAU,EAAEgB,KAAK,CAACb,UAFpB;AAGE,MAAA,UAAU,EAAEF,UAHd;AAIE,MAAA,OAAO,EAAEC;AAJX,MAFF,CADF;AAWD,GAZA,CADH,CADF;AAiBD;;eAEcY,W","sourcesContent":["/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport ItemView from '../buttons';\nimport { DIVIDER, NEW_LINE, DIVIDER_NONE } from '../constant';\nimport { MobileToolbarGroup, MobileToolbarItem, Plugins } from '../types';\n\nimport { GroupWrapper, ContentWrapper, SectionDivider } from './styled';\n\ntype CommonProps = {\n  controller: Controller;\n  plugins: Plugins;\n};\n\ntype RowProps = CommonProps & {\n  items: MobileToolbarItem[];\n  borderless?: boolean;\n};\n\ntype IProps = CommonProps & {\n  layout: MobileToolbarGroup[];\n};\n\nfunction Group({ items, controller, plugins, borderless }: RowProps) {\n  return (\n    <GroupWrapper borderless={borderless}>\n      {items.map((item, index) => {\n        const isStart =\n          index === 0 ||\n          items[index - 1] === DIVIDER ||\n          items[index - 1] === DIVIDER_NONE ||\n          items[index - 1] === NEW_LINE;\n        const isEnd =\n          index === items.length - 1 ||\n          items[index + 1] === DIVIDER ||\n          items[index + 1] === DIVIDER_NONE ||\n          items[index + 1] === NEW_LINE;\n        return (\n          <ItemView\n            key={typeof item === 'string' ? `${item}_${index}` : item.name}\n            item={item}\n            isStart={isStart}\n            isEnd={isEnd}\n            controller={controller}\n            plugins={plugins}\n          />\n        );\n      })}\n    </GroupWrapper>\n  );\n}\n\nfunction LayoutPanel({ controller, plugins, layout }: IProps) {\n  return (\n    <ContentWrapper data-toolbar-panel-layout>\n      {layout.map((group, index) => {\n        return (\n          <React.Fragment key={group.key}>\n            {index !== 0 && <SectionDivider />}\n            <Group\n              items={group.items}\n              borderless={group.borderless}\n              controller={controller}\n              plugins={plugins}\n            />\n          </React.Fragment>\n        );\n      })}\n    </ContentWrapper>\n  );\n}\n\nexport default LayoutPanel;\n"],"file":"layoutContent.js"}