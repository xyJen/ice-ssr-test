{"version":3,"sources":["../../../../src/MobileToolbar/hooks/useContentScroll.ts"],"names":["useContentScroll","subLine","panelItem","controller","top","content","container","React","useEffect","visualHeight","SUBLINE_MARGIN_BOTTOM","BOTTOM_BAR_SIZE","window","_visualHeight","selection","value","defaultEle","document","documentElement","cnt","scroller","Window","domUtils","scrollToSelection"],"mappings":";;;;;;;;;AAAA;;AACA;;AAMA;;AAGA;AACe,SAASA,gBAAT,CACbC,OADa,EAEbC,SAFa,EAGbC,UAHa,EAIbC,GAJa,EAKb;AACA,QAAMC,OAAO,GAAG,wCAAhB;AACA,QAAMC,SAAS,GAAG,0CAAlB;;AACAC,iBAAMC,SAAN,CAAgB,MAAM;AACpB,QAAIC,YAAY,GAAG,CAAnB;;AACA,QAAIR,OAAJ,EAAa;AACXQ,MAAAA,YAAY,GAAGL,GAAG,GAAGM,+BAArB;AACD,KAFD,MAEO,IAAIR,SAAJ,EAAe;AACpBO,MAAAA,YAAY,GAAGL,GAAG,GAAGO,yBAArB;AACD,KANmB,CAOpB;;;AACAC,IAAAA,MAAM,CAACC,aAAP,GAAuBJ,YAAvB;AACA,WAAO,MAAM;AACX;AACAG,MAAAA,MAAM,CAACC,aAAP,GAAuB,CAAvB;AACD,KAHD;AAID,GAbD,EAaG,CAACX,SAAD,EAAYD,OAAZ,EAAqBG,GAArB,CAbH;;AAeAG,iBAAMC,SAAN,CAAgB,MAAM;AACpB,QAAIP,OAAJ,EAAa;AACX,YAAM;AAAEa,QAAAA;AAAF,UAAgBX,UAAU,CAACY,KAAjC;AACA,YAAMC,UAAU,GAAGJ,MAAM,CAACK,QAAP,CAAgBC,eAAnC;AACA,YAAMC,GAAG,GAAGd,OAAO,IAAIW,UAAvB;AACA,YAAMI,QAAQ,GACZ,CAACd,SAAS,YAAYe,MAArB,GAA8BL,UAA9B,GAA2CV,SAA5C,KAA0DU,UAD5D;;AAEAM,4BAASC,iBAAT,CAA2BT,SAA3B,EAAsCK,GAAtC,EAA2CC,QAA3C,EAAqDjB,UAArD;AACD;AACF,GATD,EASG,CAACF,OAAD,EAAUE,UAAV,EAAsBE,OAAtB,EAA+BC,SAA/B,CATH;AAUD","sourcesContent":["import React from 'react';\nimport {\n  Controller,\n  domUtils,\n  useScrollableContainer,\n  useScrollableContent,\n} from '@ali/4ever-cangjie';\nimport { BOTTOM_BAR_SIZE, SUBLINE_MARGIN_BOTTOM } from '../constant';\nimport { MobileToolbarItem } from '../types';\n\n// 在打开二级浮出菜单、底部二级面板时候，处理正文的滚动，避免光标被遮挡\nexport default function useContentScroll(\n  subLine: MobileToolbarItem | undefined,\n  panelItem: MobileToolbarItem | undefined,\n  controller: Controller,\n  top: number,\n) {\n  const content = useScrollableContent();\n  const container = useScrollableContainer();\n  React.useEffect(() => {\n    let visualHeight = 0;\n    if (subLine) {\n      visualHeight = top - SUBLINE_MARGIN_BOTTOM;\n    } else if (panelItem) {\n      visualHeight = top + BOTTOM_BAR_SIZE;\n    }\n    // @ts-ignore\n    window._visualHeight = visualHeight;\n    return () => {\n      // @ts-ignore\n      window._visualHeight = 0;\n    };\n  }, [panelItem, subLine, top]);\n\n  React.useEffect(() => {\n    if (subLine) {\n      const { selection } = controller.value;\n      const defaultEle = window.document.documentElement;\n      const cnt = content || defaultEle;\n      const scroller =\n        (container instanceof Window ? defaultEle : container) || defaultEle;\n      domUtils.scrollToSelection(selection, cnt, scroller, controller);\n    }\n  }, [subLine, controller, content, container]);\n}\n"],"file":"useContentScroll.js"}