"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useKeyboardTop;

var _react = _interopRequireDefault(require("react"));

var _constant = require("../constant");

// 未知高度时，找个很大值来表示
const MAX_HEIGHT = 10000; // iPad 接 keyboard 时，focus 后隔很久（约 600ms）才会发 resize 事件，这里取 700 避免闪烁

const IPAD_KEYBOARD_DELAY = 700; // iOS keyboard 事件。在 IM 场景里，实时汇报的 window.innerHeight 不正确，因此 delay 一下

const IOS_KEYBOARD_DELAY = 300; // 底部面板的最小高度

const PANEL_MIN_HEIGHT = 220;
const INPUT_ELEMENTS = [HTMLInputElement, HTMLTextAreaElement];

function useKeyboardTop(isPanelShowing, panelOpsRef, wrapperRef) {
  const [initFocus, initFullHeight, initSqHeight] = _react.default.useMemo(() => {
    const {
      activeElement
    } = window.document;
    const innerHeight = Math.round(window.innerHeight);
    const isFocused = INPUT_ELEMENTS.some(E => activeElement instanceof E);
    const fullHeight = isFocused ? MAX_HEIGHT : innerHeight;
    const sqHeight = isFocused ? innerHeight : MAX_HEIGHT;
    return [isFocused, fullHeight, sqHeight];
  }, []);

  const [fullHeight, setFullHeight] = _react.default.useState(initFullHeight);

  const [squeezedHeight, setSqueezedHeight] = _react.default.useState(initSqHeight);

  _react.default.useEffect(() => {
    let timer = null;
    const {
      activeElement
    } = window.document;
    let focusedNow = INPUT_ELEMENTS.some(E => activeElement instanceof E);
    let width = Math.round(window.innerWidth);

    const delayUpdator = (time = 0) => () => {
      timer && clearTimeout(timer);
      timer = setTimeout(() => {
        const innerHeight = Math.round(window.innerHeight);
        const innerWidth = Math.round(window.innerWidth);

        if (focusedNow) {
          const ele = wrapperRef.current;
          const safeAreaTop = ele ? parseInt(window.getComputedStyle(ele).getPropertyValue('--sab'), 10) || 0 : 0;
          setSqueezedHeight(innerHeight - safeAreaTop);
        } else {
          setFullHeight(innerHeight);
        }

        if (innerWidth !== width && panelOpsRef.current) {
          width = innerWidth;
          panelOpsRef.current.item && panelOpsRef.current.closePanel();
        }
      }, time);
    };
    /**
     * 默认只需要 resize 时 setHeight，focus 时取消 timer 就好
     * 但是这个依赖浏览器的时机，需要 focus 先触发、resize 后触发。
     *
     * 为了避免兼容问题，在 focus 时也加了 setHeight 来兜底
     */


    const focusUpdator = delayUpdator(IPAD_KEYBOARD_DELAY);
    const resizeUpdator = delayUpdator(IOS_KEYBOARD_DELAY);

    if (focusedNow !== initFocus) {
      resizeUpdator();
    }

    const handleFocus = () => {
      focusedNow = true;
      focusUpdator();
    };

    const handleBlur = () => {
      focusedNow = false;
      focusUpdator();
    };

    window.addEventListener('focus', handleFocus, {
      capture: true
    });
    window.addEventListener('blur', handleBlur, {
      capture: true
    });
    window.addEventListener('resize', resizeUpdator, {
      capture: true
    });
    return () => {
      timer && clearTimeout(timer);
      window.removeEventListener('focus', handleFocus, {
        capture: true
      });
      window.removeEventListener('blur', handleBlur, {
        capture: true
      });
      window.removeEventListener('resize', resizeUpdator, {
        capture: true
      });
    };
  }, [initFocus, panelOpsRef, wrapperRef]); // iPad 外接键盘场景，toolbar 在最底部。这里保障有一个最小高度


  const actualHeight = isPanelShowing ? Math.min(squeezedHeight, fullHeight - PANEL_MIN_HEIGHT) : squeezedHeight;
  const top = actualHeight - _constant.BOTTOM_BAR_SIZE;
  return top;
}
//# sourceMappingURL=useKeyboardTop.js.map