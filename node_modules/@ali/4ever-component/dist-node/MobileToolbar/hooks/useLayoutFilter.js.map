{"version":3,"sources":["../../../../src/MobileToolbar/hooks/useLayoutFilter.ts"],"names":["useResizer","allLayout","width","setWidth","React","useState","Math","round","window","innerWidth","useEffect","handleResize","w","addEventListener","cancel","removeEventListener","layout","useMemo","newLayout","filter","widthRange","start","end","Number","MAX_SAFE_INTEGER"],"mappings":";;;;;;;;;AAAA;;AACA;;AAGe,SAASA,UAAT,CAAoBC,SAApB,EAAqD;AAClE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,eAAMC,QAAN,CAAeC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,UAAlB,CAAf,CAA1B;;AACAL,iBAAMM,SAAN,CAAgB,MAAM;AACpB,UAAMC,YAAY,GAAG,sBAAS,MAAM;AAClC,YAAMC,CAAC,GAAGN,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,UAAlB,CAAV;AACAN,MAAAA,QAAQ,CAACS,CAAD,CAAR;AACD,KAHoB,EAGlB,GAHkB,CAArB;AAIAJ,IAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACA,WAAO,MAAM;AACXA,MAAAA,YAAY,CAACG,MAAb;AACAN,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC;AACD,KAHD;AAID,GAVD,EAUG,EAVH;;AAWA,QAAMK,MAAM,GAAGZ,eAAMa,OAAN,CAAc,MAAM;AACjC,UAAMC,SAAS,GAAGjB,SAAS,CAACkB,MAAV,CAAiB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAoB;AACrD,UAAI,CAACA,UAAL,EAAiB;AACf,eAAO,IAAP;AACD;;AACD,YAAM,CAACC,KAAD,EAAQC,GAAG,GAAGC,MAAM,CAACC,gBAArB,IAAyCJ,UAA/C;;AACA,UAAIlB,KAAK,IAAImB,KAAT,IAAkBnB,KAAK,GAAGoB,GAA9B,EAAmC;AACjC,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KATiB,CAAlB;AAUA,WAAOJ,SAAP;AACD,GAZc,EAYZ,CAACjB,SAAD,EAAYC,KAAZ,CAZY,CAAf;;AAaA,SAAOc,MAAP;AACD","sourcesContent":["import React from 'react';\nimport { debounce } from 'lodash-es';\nimport { MobileToolbarGroup } from '../types';\n\nexport default function useResizer(allLayout: MobileToolbarGroup[]) {\n  const [width, setWidth] = React.useState(Math.round(window.innerWidth));\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      const w = Math.round(window.innerWidth);\n      setWidth(w);\n    }, 100);\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.cancel();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  const layout = React.useMemo(() => {\n    const newLayout = allLayout.filter(({ widthRange }) => {\n      if (!widthRange) {\n        return true;\n      }\n      const [start, end = Number.MAX_SAFE_INTEGER] = widthRange;\n      if (width >= start && width < end) {\n        return true;\n      }\n      return false;\n    });\n    return newLayout;\n  }, [allLayout, width]);\n  return layout;\n}\n"],"file":"useLayoutFilter.js"}