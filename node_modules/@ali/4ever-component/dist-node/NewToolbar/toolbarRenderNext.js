"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.disabledStyle = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _interface = require("./interface");

var _util = require("../Toolbar/util");

var _config = _interopRequireDefault(require("./config"));

var _styled = require("./styled");

var _weToolbar = require("@ali/we-toolbar");

var _util2 = require("./util");

var _idleRender = require("../idleRender");

/* eslint-disable @typescript-eslint/no-shadow */
const _createElement = /*#__PURE__*/_react.default.createElement;
const disabledStyle = {
  opacity: 0.35,
  pointerEvents: 'none'
};
exports.disabledStyle = disabledStyle;

const ToolbarRenderNext = props => {
  const {
    controller,
    plugins,
    singleLayout,
    doubleLayout,
    hiddenToolButtons = {},
    toolbarMode,
    customToolButtons = {},
    disableTargets,
    fineAdaptation,
    defaultToolbarMode,
    backgroundColor,
    onToolbarModeChange
  } = props;
  const {
    value
  } = controller;
  const [uiToolbarMode, setUiToolbarMode] = (0, _react.useState)(defaultToolbarMode);
  const handleModeChange = (0, _react.useCallback)(mode => {
    setUiToolbarMode(mode);
    onToolbarModeChange && onToolbarModeChange(mode);
  }, []);
  const realToolbarMode = 'toolbarMode' in props ? toolbarMode : uiToolbarMode;
  /**
   * 从插件查询哪个插件被选中（暂不支持多个插件同时识别）
   * 通过调用插件 getTarget 实现
   */

  const target = _react.default.useMemo(() => {
    const pluginsArray = plugins.array;

    for (let i = 0; i < pluginsArray.length; i += 1) {
      let tgt;
      const plugin = pluginsArray[i];
      const getTarget = plugin.toolbar && plugin.toolbar.getTarget;

      if (getTarget) {
        tgt = getTarget(controller);
      }

      if (tgt) {
        return tgt;
      }
    }
  }, [plugins.array, value]);
  /**
   * 渲染单个 toolButton
   * @param toolButton配置，支持直接传一个react元素
   * @param index
   */


  const renderTool = (item, index) => {
    if ( /*#__PURE__*/_react.default.isValidElement(item)) {
      return item;
    }

    const {
      name,
      hideTargets,
      showTargets,
      size,
      ...rest
    } = item; // hiddenToolButtons 优先

    if (hiddenToolButtons[name]) return null; // 优先从自定义组件里匹配

    const CustomComponent = customToolButtons[name];
    const [pluginName, buttonName = 'default'] = name.split('.');
    const plugin = plugins.hash[pluginName];

    if (!plugin && !CustomComponent) {
      return null;
    }

    const buttons = plugin?.toolbar && plugin?.toolbar?.buttons;
    const Component = CustomComponent || buttons && buttons[buttonName];

    if (!Component) {
      return null;
    }

    if (plugin?.toolbar) {
      // 判断是否隐藏
      const shouldShow = (0, _util.judgeShouldShow)(target, showTargets, hideTargets);
      if (!shouldShow) return null;
    } // 优先取自定义国际化文案


    const locale = plugin?.toolbar?.locale;
    const isDoubleMode = realToolbarMode === _interface.ToolbarMode.double;
    const realSize = size || (isDoubleMode ? _interface.ButtonSize.small : _interface.ButtonSize.medium);
    const showTitle = realSize === _interface.ButtonSize.large;
    return /*#__PURE__*/_createElement(Component, (0, _extends2.default)({
      controller: controller,
      toolbarMode: realToolbarMode,
      locale: locale,
      size: realSize,
      key: index,
      showTitle: showTitle
    }, rest));
  };

  const renderLine = (line, index, layoutMode = 'row') => {
    const contents = (0, _util2.renderToolArray)(line, 'toolButtons', target, renderTool);
    if (!contents) return null;
    const Wrapper = layoutMode === 'row' ? _weToolbar.ToolbarRowWrapper : _weToolbar.ToolbarColumnWrapper;
    return /*#__PURE__*/_createElement(Wrapper, {
      key: index
    }, contents);
  };

  const renderGroup = (group, index, toolbarMode) => {
    const {
      layoutMode,
      hideBorder,
      clearPadding,
      fineAdaptation: groupFineAdaptation
    } = group;
    const contents = (0, _util2.renderToolArray)(group, 'toolLines', target, renderLine, layoutMode); // 单行默认精细化控制，双行默认按组收缩

    let realFineAdaption = toolbarMode === _interface.ToolbarMode.single;

    if (groupFineAdaptation !== undefined) {
      realFineAdaption = groupFineAdaptation;
    } else if (fineAdaptation !== undefined) {
      realFineAdaption = fineAdaptation;
    }

    if (!contents) return null;
    return /*#__PURE__*/_createElement(_weToolbar.ToolbarGroupWrapper, {
      layoutType: "row",
      groupKey: index.toString(),
      fineAdaptation: realFineAdaption,
      key: index,
      hideBorder: hideBorder,
      clearPadding: clearPadding
    }, contents);
  };

  const renderSingleToolbar = singleLineLayout => {
    const layout = singleLineLayout || _config.default.defaultSingleLayout; // @ts-ignore

    const tls = layout.map((line, idx) => {
      const group = {
        toolLines: [line]
      };
      return renderGroup(group, idx, _interface.ToolbarMode.single);
    }).filter(item => item);
    if (!tls.length) return null;
    return /*#__PURE__*/_createElement("div", {
      style: {
        display: 'flex'
      }
    }, tls);
  };

  const renderDoubleToolbar = doubleLineLayout => {
    const layout = doubleLineLayout || _config.default.defaultDoubleLayout;
    const tgs = layout.map((group, idx) => renderGroup(group, idx, _interface.ToolbarMode.double)).filter(item => item);
    if (!tgs.length) return null;
    return /*#__PURE__*/_createElement("div", {
      style: {
        display: 'flex'
      }
    }, tgs);
  };
  /**
   * 阻止默认事件，防止文档区域失焦
   */


  const handleMouseDown = (0, _react.useCallback)(ev => {
    const {
      activeElement
    } = window.document; // 对于有自定义输入域的不可编辑对象，不阻止其失焦行为

    if (activeElement && activeElement.closest('[data-cangjie-not-editable]')) {
      return;
    }

    if (ev.target?.tagName.toLocaleLowerCase() !== 'input') {
      // 放过input，以便输入地方可以正常输入
      ev.preventDefault && ev.preventDefault();
      ev.stopPropagation && ev.stopPropagation();
    }
  }, []);
  const fTgts = disableTargets || _config.default.defaultDisableTargets;
  const shouldDisableWholeToolbar = fTgts[target];
  const hideSwitchBtn = !singleLayout || !doubleLayout;
  let classes = 'bi-toolbar';
  let wrapperStyle = {};

  if (shouldDisableWholeToolbar) {
    wrapperStyle = disabledStyle;
  }

  if (realToolbarMode === _interface.ToolbarMode.double) {
    classes += ' double';
  } else {
    classes += ' single';
  } // @ts-ignore


  return /*#__PURE__*/_createElement(_styled.ToolbarWrapper, {
    style: wrapperStyle,
    className: classes,
    onMouseDown: handleMouseDown,
    "data-role": 'toolbar'
  }, /*#__PURE__*/_createElement(_weToolbar.ToolbarLayout, {
    mode: realToolbarMode
    /*
    // @ts-ignore */
    ,
    onModeChange: handleModeChange
    /*
    // @ts-ignore */
    ,
    singleLineToolbar: renderSingleToolbar(singleLayout) || undefined
    /*
    // @ts-ignore */
    ,
    doubleLineToolbar: renderDoubleToolbar(doubleLayout) || undefined,
    hideSwitchBtn: hideSwitchBtn // @ts-ignore
    ,
    fineAdaptation: fineAdaptation,
    backgroundColor: backgroundColor
  }));
};

var _default = process.env.NODE_ENV === 'test' ? ToolbarRenderNext : (0, _idleRender.idleRender)(ToolbarRenderNext, 400, {
  leading: true
});

exports.default = _default;
//# sourceMappingURL=toolbarRenderNext.js.map