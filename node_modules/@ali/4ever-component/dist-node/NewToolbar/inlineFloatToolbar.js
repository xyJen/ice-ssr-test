"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.sizeStyle = exports.ModKey = exports.RowWrapper = exports.MenuWrapper = exports.disabledStyle = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _interface = require("./interface");

var _everCangjie = require("@ali/4ever-cangjie");

var _PluginsContext = require("../PluginsContext");

var _util = require("../Toolbar/util");

var _config = _interopRequireDefault(require("./config"));

var _weToolbar = require("@ali/we-toolbar");

var _weDesign = require("@ali/we-design");

var _weUtil = require("@ali/we-util");

var _weIcon = require("@ali/we-icon");

var _util2 = require("./util");

var _idleRender = require("../idleRender");

var _lodash = require("lodash");

var _menu = _interopRequireDefault(require("../Menu/menu"));

var _interface2 = require("../Menu/interface");

const _createElement = /*#__PURE__*/_react.default.createElement;
;
const {
  ACTION_COPY,
  ACTION_CUT
} = _everCangjie.ContextMenu;
const disabledStyle = {
  display: 'flex',
  opacity: 0.35,
  pointerEvents: 'none'
};
exports.disabledStyle = disabledStyle;

const MenuWrapper = /*#__PURE__*/_styledComponents.default.div(["background:#FFF;box-shadow:0px 0px 1px rgba(0,0,0,0.24),0px 8px 24px rgba(0,0,0,0.16);border-radius:4px;"]);

exports.MenuWrapper = MenuWrapper;
const RowWrapper = (0, _weDesign.withTheme)(_styledComponents.default.div(["display:flex;margin-bottom:4px;:last-child{margin-bottom:0px;}box-sizing:content-box;.split-button-layout,.icon-select-layout{border-left:2px solid transparent;border-right:2px solid transparent;}> *{margin-right:2px;}> *:last-child{margin-right:0;}"]));
exports.RowWrapper = RowWrapper;
const ToolbarWrapperHeight = 36; // icon-select-layout 覆写 设计要求下拉不能有左右边距

const ToolbarWrapper = /*#__PURE__*/_styledComponents.default.div(["display:flex;justify-content:center;align-items:center;position:relative;background-color:#FFFFFF;height:", "px;border-radius:4px;box-shadow:", ";.icon-select-layout{border-left:none;border-right:none;}"], ToolbarWrapperHeight, props => props.enableShadow ? '0px 0px 1px rgb(0 0 0 / 24%), 0px 0px 24px rgb(0 0 0 / 8%)' : 'none');

const ModKey = _everCangjie.environment.IS_MAC ? '⌘' : 'Ctrl';
exports.ModKey = ModKey;
const sizeStyle = {
  width: 190
};
exports.sizeStyle = sizeStyle;
const noShadowStyle = {
  boxShadow: 'none'
};

function genShortcutString(parmas) {
  const keys = parmas.split('+');
  const formatKeys = keys.map(key => {
    return (0, _lodash.upperFirst)(key === 'mod' ? ModKey : key);
  });
  return formatKeys.join('+');
}

const ToolbarRenderNext = props => {
  const controller = _everCangjie.Controller.useController();

  const [, forceUpdate] = _react.default.useReducer(c => !c, false);

  const _isPureTableSelection = controller.query('isPureTableSelection');

  const _hasTableSelection = controller.query('hasTableSelection');

  const plugins = (0, _PluginsContext.usePlugins)() || {
    array: [],
    hash: {}
  };
  const {
    singleLayout,
    moreSingleLayout,
    hiddenToolButtons = {},
    customToolButtons = {},
    disableTargets,
    fineAdaptation,
    container
  } = props;
  const {
    value
  } = controller;

  const toolbarWrapperRef = _react.default.useRef(null);
  /**
   * 从插件查询哪个插件被选中（暂不支持多个插件同时识别）
   * 通过调用插件 getTarget 实现
   */


  const target = _react.default.useMemo(() => {
    const pluginsArray = plugins.array;

    for (let i = 0; i < pluginsArray.length; i += 1) {
      let tgt;
      const plugin = pluginsArray[i];
      const getTarget = plugin.toolbar && plugin.toolbar.getTarget;

      if (getTarget) {
        tgt = getTarget(controller);
      }

      if (tgt) {
        return tgt;
      }
    }
  }, [plugins.array, value]);
  /**
   * 渲染单个 toolButton
   * @param toolButton配置，支持直接传一个react元素
   * @param index
   */


  const renderTool = (item, index) => {
    if ( /*#__PURE__*/_react.default.isValidElement(item)) {
      return item;
    }

    const {
      name,
      hideTargets,
      hideConditions,
      showTargets,
      disableTargets: disableItems,
      size,
      ...rest
    } = item;

    if (hideConditions && hideConditions.indexOf('hasTableSelection') > -1) {
      if (_isPureTableSelection) {
        return null;
      }
    }

    if (hideConditions && hideConditions.some(n => controller.query(n))) {
      return null;
    } // hiddenToolButtons 优先


    if (hiddenToolButtons[name]) return null;

    if (name === 'more') {
      return /*#__PURE__*/_createElement(MoreMenu, {
        container: container,
        isPureTableSelection: _isPureTableSelection
      });
    } // 优先从自定义组件里匹配


    const CustomComponent = customToolButtons[name];
    const [pluginName, buttonName = 'default'] = name.split('.');
    const plugin = plugins.hash[pluginName];

    if (!plugin && !CustomComponent) {
      return null;
    }

    const buttons = plugin?.toolbar && plugin?.toolbar?.buttons;
    const Component = CustomComponent || buttons && buttons[buttonName];

    if (!Component) {
      return null;
    }

    if (plugin?.toolbar) {
      // 判断是否隐藏
      const shouldShow = (0, _util.judgeShouldShow)(target, showTargets, hideTargets);
      if (!shouldShow) return null;
    } // 优先取自定义国际化文案


    const locale = plugin?.toolbar?.locale;
    const realSize = size || _interface.ButtonSize.medium;
    const showTitle = realSize === _interface.ButtonSize.large;

    if (Component.needRender && !Component.needRender(controller)) {
      return null;
    }

    return /*#__PURE__*/_createElement(Component, (0, _extends2.default)({
      controller: controller,
      toolbarMode: _interface.ToolbarMode.single,
      locale: locale,
      size: realSize,
      key: index,
      showTitle: showTitle,
      getContainer: () => toolbarWrapperRef.current || container
    }, rest));
  };

  const renderLine = (line, index, layoutMode = 'row') => {
    const contents = (0, _util2.renderToolArray)(line, 'toolButtons', target, renderTool);
    if (!contents) return null;
    const Wrapper = layoutMode === 'row' ? RowWrapper : _weToolbar.ToolbarColumnWrapper;
    return /*#__PURE__*/_createElement(Wrapper, {
      key: index
    }, contents);
  };

  const renderGroup = (group, index, toolbarMode) => {
    const {
      layoutMode,
      hideBorder,
      clearPadding,
      fineAdaptation: groupFineAdaptation
    } = group;
    const contents = (0, _util2.renderToolArray)(group, 'toolLines', target, renderLine, layoutMode); // 单行默认精细化控制，双行默认按组收缩

    let realFineAdaption = toolbarMode === _interface.ToolbarMode.single;

    if (groupFineAdaptation !== undefined) {
      realFineAdaption = groupFineAdaptation;
    } else if (fineAdaptation !== undefined) {
      realFineAdaption = fineAdaptation;
    }

    if (!contents) return null;
    return /*#__PURE__*/_createElement(_weToolbar.ToolbarGroupWrapper, {
      layoutType: "row",
      groupKey: index.toString(),
      fineAdaptation: realFineAdaption,
      key: index,
      hideBorder: hideBorder,
      clearPadding: clearPadding
    }, contents);
  };

  const renderSingleToolbar = singleLineLayout => {
    const layout = singleLineLayout || _config.default.defaultSingleLayout; // @ts-ignore

    const tls = layout.map((line, idx) => {
      const group = {
        toolLines: [line],
        hideBorder: false
      };

      if (idx === layout.length - 1) {
        group.hideBorder = true;
      }

      return renderGroup(group, idx, _interface.ToolbarMode.single);
    }).filter(item => item);
    if (!tls.length) return null;
    return /*#__PURE__*/_createElement("div", {
      style: {
        display: 'flex'
      }
    }, tls);
  };
  /**
   * 阻止默认事件，防止文档区域失焦
   */


  const handleMouseDown = (0, _react.useCallback)(ev => {
    const {
      activeElement
    } = window.document; // 对于有自定义输入域的不可编辑对象，不阻止其失焦行为

    if (activeElement && activeElement.closest('[data-cangjie-not-editable]')) {
      return;
    }

    if (ev.target?.tagName.toLocaleLowerCase() !== 'input') {
      // 放过input，以便输入地方可以正常输入
      ev.preventDefault && ev.preventDefault();
      ev.stopPropagation && ev.stopPropagation();
    }
  }, []);
  const fTgts = disableTargets || _config.default.defaultDisableTargets;
  const shouldDisableWholeToolbar = fTgts[target];
  const classes = 'bi-toolbar inline-float';
  let wrapperStyle = {
    display: 'flex'
  };

  if (shouldDisableWholeToolbar) {
    wrapperStyle = disabledStyle;
  }

  const handlePendingSelectionChange = _react.default.useCallback(() => {
    // 处理 pending 不及时导致的工具栏长度变化的问题
    if (!_hasTableSelection && controller.query('hasTableSelection')) {
      forceUpdate();
    }
  }, [controller]);

  (0, _everCangjie.useSelectionData)(controller.selectionData$, null, handlePendingSelectionChange, []);
  return /*#__PURE__*/_createElement(ToolbarWrapper, {
    style: wrapperStyle,
    className: classes,
    onMouseDown: handleMouseDown,
    ref: toolbarWrapperRef,
    "data-role": "inlineToolbar"
  }, renderSingleToolbar(singleLayout));
};

var _ref = /*#__PURE__*/_createElement(_weIcon.ToolbarEraserNormal, null);

var _ref2 = /*#__PURE__*/_createElement(_weIcon.ToolbarBrushNormal, null);

var _ref3 = /*#__PURE__*/_createElement(_weIcon.ToolbarIncreaseIndentNormal, null);

var _ref4 = /*#__PURE__*/_createElement(_weIcon.ToolbarReduceIndentNormal, null);

var _ref5 = /*#__PURE__*/_createElement(_weIcon.ToolbarCopyNormal, null);

var _ref6 = /*#__PURE__*/_createElement(_weIcon.ToolbarCutNormal, null);

var _ref7 = /*#__PURE__*/_createElement(_weIcon.ToolbarDeleteNormal, null);

var _ref8 = /*#__PURE__*/_createElement(_weDesign.ToolbarMoreNormal, null);

const MoreMenu = props => {
  const {
    container,
    isPureTableSelection
  } = props;
  const [moreToolbarActive, setMoreToolbarActive] = (0, _react.useState)(false);
  const plugins = (0, _PluginsContext.usePlugins)();

  const controller = _everCangjie.Controller.useController();

  const onCutOrCopy = (0, _react.useCallback)(action => {
    controller.run('onAction', {
      type: action
    });
  }, []);
  const onClickCut = (0, _react.useCallback)(() => {
    onCutOrCopy(ACTION_CUT);
  }, [onCutOrCopy]);
  const onClickCopy = (0, _react.useCallback)(() => {
    onCutOrCopy(ACTION_COPY);
  }, [onCutOrCopy]);
  const onClickDelete = (0, _react.useCallback)(() => {
    controller.command(_everCangjie.Commands.del);
  }, [onCutOrCopy]);

  const insertMenus = _react.default.useMemo(() => {
    // Copy Cut 的文案只有从 draggable 插件来
    const draggablePlugin = plugins?.hash?.draggable;
    const arr = [{
      type: _interface2.TYPE_GROUP,
      menus: [{
        type: _interface2.TYPE_MENU_ITEM,
        menuKey: 'clearStyle',
        icon: _ref,
        autoClose: false
      }, {
        type: _interface2.TYPE_MENU_ITEM,
        menuKey: 'formatPainter',
        icon: _ref2,
        autoClose: false
      }]
    }, {
      type: _interface2.TYPE_GROUP,
      menus: [{
        type: _interface2.TYPE_MENU_ITEM,
        menuKey: 'indent.right',
        icon: _ref3,
        autoClose: false,
        extra: genShortcutString('tab')
      }, {
        type: _interface2.TYPE_MENU_ITEM,
        menuKey: 'indent.left',
        icon: _ref4,
        autoClose: false,
        extra: genShortcutString('shift+tab')
      }]
    }, {
      type: _interface2.TYPE_GROUP,
      menus: [{
        type: _interface2.TYPE_MENU_ITEM,
        title: draggablePlugin?.toolbar?.locale?.copyMenu,
        icon: _ref5,
        menuExtraKey: 'copy',
        onClick: onClickCopy,
        extra: genShortcutString('mod+c')
      }, {
        type: _interface2.TYPE_MENU_ITEM,
        title: draggablePlugin?.toolbar?.locale?.cutMenu,
        icon: _ref6,
        menuExtraKey: 'cut',
        onClick: onClickCut,
        extra: genShortcutString('mod+x')
      }, {
        type: _interface2.TYPE_MENU_ITEM,
        title: draggablePlugin?.toolbar?.locale?.deleteMenu,
        icon: _ref7,
        menuExtraKey: 'delete',
        onClick: onClickDelete,
        hidden: isPureTableSelection
      }]
    }];
    return arr;
  }, [onClickCopy, onClickCut, onClickDelete, isPureTableSelection]);

  return /*#__PURE__*/_createElement(_weDesign.Dropdown, {
    visible: moreToolbarActive,
    onVisibleChange: v => {
      setMoreToolbarActive(v);
    } // 使用 toolbarWrapperRef 作为 Container 可保证整体动画的流畅
    // 避免主体动画先完成或者后完成
    ,
    getContainer: () => {
      return container;
    },
    overlayStyle: {
      backgroundColor: 'transparent',
      boxShadow: 'none',
      border: 'none'
    },
    overlay: /*#__PURE__*/_createElement(_weUtil.DropdownAnimation, {
      visible: moreToolbarActive
    }, /*#__PURE__*/_createElement(MenuWrapper, {
      style: noShadowStyle
    }, /*#__PURE__*/_createElement(_weDesign.Menu, {
      mode: _weDesign.EMenuMode.vertical,
      selectedKeys: [],
      destroyOverlayWhenInvisible: true,
      insertSubmenuToMenuRoot: true,
      style: sizeStyle,
      onClick: v => {
        setMoreToolbarActive(false);
      },
      getContainer: () => {
        return container;
      }
    }, /*#__PURE__*/_createElement(_menu.default, {
      menus: insertMenus
    })))),
    placement: "bottomLeft",
    offsetY: 2
  }, /*#__PURE__*/_createElement(_weToolbar.IconButton, {
    icon: _ref8,
    testid: "toolbar_more",
    onClick: () => {
      setMoreToolbarActive(!moreToolbarActive);
    },
    active: moreToolbarActive
  }));
};

var _default = process.env.NODE_ENV === 'test' ? ToolbarRenderNext : (0, _idleRender.idleRender)(ToolbarRenderNext, 400, {
  leading: true
});

exports.default = _default;
//# sourceMappingURL=inlineFloatToolbar.js.map