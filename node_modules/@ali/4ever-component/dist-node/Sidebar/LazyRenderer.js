"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LazyRenderer = LazyRenderer;

var _react = _interopRequireWildcard(require("react"));

const _createElement = /*#__PURE__*/_react.default.createElement;

/**
 * 懒加载组件
 * 
 * @param loader.fn 加载组件的函数。返回的结果会传给 render
 * @param loader.fallback 懒加载时的 placeholder。
 * @param render 渲染函数
 * @returns 
 */
function LazyRenderer({
  render,
  loader
}) {
  const {
    fn,
    fallback
  } = loader || {}; // loader 加载过程 render 可能会变，取最新一次

  const renderRef = (0, _react.useRef)(render);
  const loadFnRef = (0, _react.useRef)(fn);
  renderRef.current = render;
  loadFnRef.current = fn; // 记录 loaded

  const loaded = (0, _react.useRef)(); // 错误信息

  const [error, setError] = (0, _react.useState)(); // 加载函数

  const loadFn = (0, _react.useCallback)(() => {
    // eslint-disable-next-line @typescript-eslint/no-shadow
    const fn = loadFnRef.current;

    if (fn) {
      setError(undefined);
      fn().then(rst => {
        loaded.current = rst;
        setEl(renderRef.current(rst));
      }).catch(e => {
        console.error('sidebar lazy render error', e);
        setError(e);
      });
    }
  }, []); // placeholder

  const placeholder = (0, _react.useMemo)(() => {
    if (!loader) {
      return null;
    }

    const fallbackJsx = fallback?.({
      error,
      retry: () => loadFn()
    }) || null;
    return /*#__PURE__*/_createElement(_react.default.Fragment, null, fallbackJsx); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [error]); // 加载完成的 jsx

  const [el, setEl] = (0, _react.useState)(placeholder);
  (0, _react.useEffect)(() => {
    setEl(placeholder);
  }, [placeholder]); // 加载

  (0, _react.useEffect)(() => {
    loadFn(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return loaded.current ? render(loaded.current) : el;
}
//# sourceMappingURL=LazyRenderer.js.map