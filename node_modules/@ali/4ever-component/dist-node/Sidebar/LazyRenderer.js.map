{"version":3,"sources":["../../../src/Sidebar/LazyRenderer.tsx"],"names":["LazyRenderer","render","loader","fn","fallback","renderRef","loadFnRef","current","loaded","error","setError","loadFn","undefined","then","rst","setEl","catch","e","console","placeholder","fallbackJsx","retry","el"],"mappings":";;;;;;;;;AACA;;uBAA4B,a;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,YAAT,CAAyB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAzB,EAWJ;AACD,QAAM;AACJC,IAAAA,EADI;AACAC,IAAAA;AADA,MAEFF,MAAM,IAAI,EAFd,CADC,CAKD;;AACA,QAAMG,SAAS,GAAG,mBAAOJ,MAAP,CAAlB;AACA,QAAMK,SAAS,GAAG,mBAAOH,EAAP,CAAlB;AACAE,EAAAA,SAAS,CAACE,OAAV,GAAoBN,MAApB;AACAK,EAAAA,SAAS,CAACC,OAAV,GAAoBJ,EAApB,CATC,CAWD;;AACA,QAAMK,MAAM,GAAG,oBAAf,CAZC,CAcD;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,sBAA1B,CAfC,CAiBD;;AACA,QAAMC,MAAM,GAAG,wBACb,MAAM;AACJ;AACA,UAAMR,EAAE,GAAGG,SAAS,CAACC,OAArB;;AACA,QAAIJ,EAAJ,EAAQ;AACNO,MAAAA,QAAQ,CAACE,SAAD,CAAR;AACAT,MAAAA,EAAE,GAAGU,IAAL,CAAWC,GAAD,IAAS;AACjBN,QAAAA,MAAM,CAACD,OAAP,GAAiBO,GAAjB;AACAC,QAAAA,KAAK,CAACV,SAAS,CAACE,OAAV,CAAkBO,GAAlB,CAAD,CAAL;AACD,OAHD,EAGGE,KAHH,CAGUC,CAAD,IAAO;AACdC,QAAAA,OAAO,CAACT,KAAR,CAAc,2BAAd,EAA2CQ,CAA3C;AACAP,QAAAA,QAAQ,CAACO,CAAD,CAAR;AACD,OAND;AAOD;AACF,GAdY,EAeb,EAfa,CAAf,CAlBC,CAoCD;;AACA,QAAME,WAAW,GAAG,oBAAQ,MAAM;AAChC,QAAI,CAACjB,MAAL,EAAa;AACX,aAAO,IAAP;AACD;;AAED,UAAMkB,WAAW,GAAGhB,QAAQ,GAAG;AAC7BK,MAAAA,KAD6B;AAE7BY,MAAAA,KAAK,EAAE,MAAMV,MAAM;AAFU,KAAH,CAAR,IAGd,IAHN;AAKA,wBACE,8CACGS,WADH,CADF,CAVgC,CAgBhC;AACD,GAjBmB,EAiBjB,CAACX,KAAD,CAjBiB,CAApB,CArCC,CAwDD;;AACA,QAAM,CAACa,EAAD,EAAKP,KAAL,IAAc,qBAA6BI,WAA7B,CAApB;AAEA,wBAAU,MAAM;AACdJ,IAAAA,KAAK,CAACI,WAAD,CAAL;AACD,GAFD,EAEG,CAACA,WAAD,CAFH,EA3DC,CA+DD;;AACA,wBAAU,MAAM;AACdR,IAAAA,MAAM,GADQ,CAEhB;AACC,GAHD,EAGG,EAHH;AAKA,SAAOH,MAAM,CAACD,OAAP,GAAiBN,MAAM,CAACO,MAAM,CAACD,OAAR,CAAvB,GAA0Ce,EAAjD;AACD","sourcesContent":["\nimport React, { useEffect, useState, useMemo, useCallback, useRef } from 'react';\n\n/**\n * 懒加载组件\n * \n * @param loader.fn 加载组件的函数。返回的结果会传给 render\n * @param loader.fallback 懒加载时的 placeholder。\n * @param render 渲染函数\n * @returns \n */\nexport function LazyRenderer<T>({ render, loader }: {\n  loader: {\n    // loader fn\n    fn: () => Promise<T>;\n    // fallback fn\n    fallback?: (props: {\n      error?: Error;\n      retry: () => void;\n    }) => JSX.Element;\n  };\n  render: (result?: T) => JSX.Element | null;\n}) {\n  const {\n    fn, fallback,\n  } = loader || {};\n\n  // loader 加载过程 render 可能会变，取最新一次\n  const renderRef = useRef(render);\n  const loadFnRef = useRef(fn);\n  renderRef.current = render;\n  loadFnRef.current = fn;\n\n  // 记录 loaded\n  const loaded = useRef<T | undefined>();\n\n  // 错误信息\n  const [error, setError] = useState<Error>();\n\n  // 加载函数\n  const loadFn = useCallback(\n    () => {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const fn = loadFnRef.current;\n      if (fn) {\n        setError(undefined);\n        fn().then((rst) => {\n          loaded.current = rst;\n          setEl(renderRef.current(rst));\n        }).catch((e) => {\n          console.error('sidebar lazy render error', e);\n          setError(e);\n        });\n      }\n    },\n    [],\n  );\n\n  // placeholder\n  const placeholder = useMemo(() => {\n    if (!loader) {\n      return null;\n    }\n\n    const fallbackJsx = fallback?.({\n      error,\n      retry: () => loadFn(),\n    }) || null;\n\n    return (\n      <>\n        {fallbackJsx}\n      </>\n    );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [error]);\n\n  // 加载完成的 jsx\n  const [el, setEl] = useState<JSX.Element | null>(placeholder);\n\n  useEffect(() => {\n    setEl(placeholder);\n  }, [placeholder]);\n\n  // 加载\n  useEffect(() => {\n    loadFn();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return loaded.current ? render(loaded.current) : el;\n}\n"],"file":"LazyRenderer.js"}