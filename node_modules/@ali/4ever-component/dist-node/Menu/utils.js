"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterMenuByQuery = void 0;

var _interface = require("./interface");

/* eslint-disable no-case-declarations */
function checkIsQuery(query, key) {
  if (Array.isArray(key)) {
    return key.filter(val => val.toLowerCase() === query.toLowerCase()).length > 0;
  } else {
    return key.toLowerCase() === query.toLowerCase();
  }
}

function checkIsInclude(query, key) {
  let isInclude;
  let priority;

  if (Array.isArray(key)) {
    // 获取匹配度最高的值
    isInclude = key.filter(val => {
      const pos = val.toLowerCase().indexOf(query.toLowerCase());

      if (pos > -1) {
        // 记录下匹配值最高的query
        if (!priority || priority < 10 - pos) {
          priority = 10 - pos;
        }

        return true;
      }

      return false;
    }).length > 0;
  } else {
    const pos = key.toLowerCase().indexOf(query.toLowerCase());
    isInclude = pos > -1;

    if (isInclude) {
      priority = 10 - pos;
    }
  }

  return {
    isInclude,
    // @ts-ignore
    priority
  };
}

const filterMenuByQuery = (query, menus) => {
  /**
   * 1.全字匹配，优先级定10；2.匹配部分，根据匹配词的index分配优先级，10-index；
   * 优先级决定了group的排序
   */
  if (!menus) return [];
  return menus.map(item => {
    const {
      type
    } = item;

    switch (type) {
      case _interface.TYPE_GROUP:
      case _interface.TYPE_SUB_MENU:
        let itemMenus = item.menus;

        if (itemMenus) {
          // @ts-ignore
          itemMenus = filterMenuByQuery(query, itemMenus);

          if (itemMenus.length > 0) {
            return { ...item,
              menus: itemMenus,
              // @ts-ignore
              priority: itemMenus[0].priority
            };
          }
        }

        return null;

      case _interface.TYPE_MENU_ITEM:
        // 这里计算权重和筛选
        const itemQuery = item.query;

        if (itemQuery) {
          if (checkIsQuery(query, itemQuery)) {
            return { ...item,
              priority: 10
            };
          }

          const {
            isInclude,
            priority
          } = checkIsInclude(query, itemQuery);

          if (isInclude) {
            return { ...item,
              priority
            };
          }
        }

        return null;

      default:
        return null;
    }
  }).filter(item => !!item).sort((a, b) => {
    return b?.priority - a?.priority;
  });
};

exports.filterMenuByQuery = filterMenuByQuery;
//# sourceMappingURL=utils.js.map