"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weDesign = require("@ali/we-design");

var _everUtils = require("@ali/4ever-utils");

var _lodash = require("lodash");

var _interface = require("./interface");

var _style = require("./style");

var _PluginsContext = require("../PluginsContext");

const _createElement = /*#__PURE__*/_react.default.createElement;

const checkIfNotAllChildrenHidden = menu => {
  const {
    menus
  } = menu;
  return menus.some(item => {
    if (item && (item.type === _interface.TYPE_SUB_MENU || item.type === _interface.TYPE_GROUP)) {
      return checkIfNotAllChildrenHidden(item);
    }

    return item && !item.hidden;
  });
};

const inlineToBlockMap = new Map([['heading1Inline', 'heading1'], ['heading2Inline', 'heading2'], ['heading3Inline', 'heading3'], ['heading4Inline', 'heading4'], ['tlistInline', 'tlist'], ['olistInline', 'olist'], ['ulistInline', 'ulist']]);

const convertInlineMenus = menus => {
  return menus.map(item => {
    if (item.type === _interface.TYPE_INLINE_MENU_GROUP) {
      const items = [];
      item.menus.forEach(wrapper => {
        if (wrapper.type === _interface.TYPE_INLINE_MENU_WRAPPER) {
          wrapper.menus.forEach(inline => {
            const {
              menuKey,
              tooltip
            } = inline;
            const [pluginName, menuName] = menuKey.split('.');
            let key = menuKey;

            if (menuName) {
              key = `${pluginName}.${inlineToBlockMap.get(menuName) || menuName}`;
            }

            items.push({ ...inline,
              type: _interface.TYPE_MENU_ITEM,
              menuKey: key,
              title: tooltip
            });
          });
        }
      });
      return {
        type: _interface.TYPE_GROUP,
        menus: items
      };
    }

    return item;
  });
};

function isNotMenuItem(maybeWrapper) {
  return maybeWrapper.menus;
}

const convertMenusToMatcherData = menus => {
  return menus.map(item => {
    let keywords = [];

    if (item.query) {
      if (Array.isArray(item.query)) {
        keywords = [...item.query];
      } else {
        keywords.push(item.query);
      }
    }

    if (isNotMenuItem(item)) {
      return {
        keywords,
        data: { ...(0, _lodash.omit)(item, 'menus')
        },
        subItems: convertMenusToMatcherData(item.menus)
      };
    }

    return {
      keywords,
      data: { ...item
      }
    };
  });
};

const convertMatcherDataToMenus = items => {
  return items.map(item => {
    if (item.subItems) {
      return { ...item.data,
        menus: convertMatcherDataToMenus(item.subItems)
      };
    }

    return item.data;
  });
};

var _ref = /*#__PURE__*/_createElement(_weDesign.MenuDivider, null);

var _ref2 = /*#__PURE__*/_createElement(_weDesign.MenuDivider, null);

const MenuAdapter = props => {
  const {
    menus,
    query,
    onQuery
  } = props; // TODO: 这里依赖父级Provider，后续有不依赖编辑器的纯menu场景需要兼容

  const controller = _everCangjie.Controller.useController();

  const plugins = (0, _PluginsContext.usePlugins)(); // 初始化搜索工具

  const matcher = _react.default.useMemo(() => {
    // 有query先转化掉inlineMenu
    const result = convertInlineMenus(menus);
    const matcherData = convertMenusToMatcherData(result);
    return new _everUtils.Matcher({
      lang: 'en-US',
      items: matcherData,
      enableFuzzy: true
    });
  }, [menus]);

  const menuData = _react.default.useMemo(() => {
    if (!query || !matcher) return menus;
    const results = matcher.match(query);
    onQuery?.(results);
    return convertMatcherDataToMenus(results);
  }, [query, menus, matcher, onQuery]);

  let notNullMenuCount = 0;
  /**
   * 从插件中获取menu组件
   * @param menu
   */

  const getMenuFromPlugin = (menu, defaultMenuName = 'menu') => {
    const {
      menuKey
    } = menu;

    if (!menuKey) {
      return {
        PluginMenu: null,
        locale: {}
      };
    }

    const [pluginName, menuName = defaultMenuName] = menuKey.split('.');
    const plugin = plugins?.hash[pluginName];
    let PluginMenu;

    if (plugin && plugin.menubar && plugin.menubar[menuName]) {
      PluginMenu = plugin.menubar[menuName];
    }

    return {
      PluginMenu,
      locale: plugin?.menubar?.locale || {}
    };
  };
  /**
   * 渲染菜单项
   * @param menu
   */


  const renderMenuItem = menu => {
    const {
      title,
      hidden,
      menuExtraKey = '',
      menuKey,
      ...rest
    } = menu;
    if (hidden) return null;
    notNullMenuCount += 1;
    const {
      PluginMenu,
      locale
    } = getMenuFromPlugin(menu); // 通过 menuExtraKey 可实现多个相同功能 menuItem 共存

    const key = menuKey + menuExtraKey;

    if (PluginMenu) {
      return /*#__PURE__*/_createElement(PluginMenu, {
        key: key,
        controller: controller,
        menuItem: { ...menu,
          menuKey: key
        },
        locale: locale
      });
    }

    return /*#__PURE__*/_createElement(_weDesign.MenuItem, (0, _extends2.default)({}, rest, {
      key: key,
      menuKey: key
    }), title);
  };

  const renderInlineMenuItem = menu => {
    const {
      hidden,
      menuKey,
      menuExtraKey = '',
      icon,
      ...rest
    } = menu;
    if (hidden) return null;
    notNullMenuCount += 1;
    const {
      PluginMenu,
      locale
    } = getMenuFromPlugin(menu, 'inlineMenu');
    const key = menuKey + menuExtraKey;

    if (PluginMenu) {
      return /*#__PURE__*/_createElement(PluginMenu, {
        key: key,
        controller: controller,
        menuItem: { ...menu,
          menuKey: key
        },
        locale: locale
      });
    } // @ts-ignore


    return /*#__PURE__*/_createElement(_weDesign.InlineMenuItem, (0, _extends2.default)({}, rest, {
      key: key,
      menuKey: key
    }));
  };

  const renderInlineMenuGroup = (menu, index) => {
    const {
      title,
      hidden,
      menus: menuGroupData
    } = menu;
    if (hidden) return null;
    const shouldShowDivider = index !== 0 && notNullMenuCount >= 1;
    return /*#__PURE__*/_createElement(_react.default.Fragment, {
      key: index
    }, shouldShowDivider ? _ref : null, /*#__PURE__*/_createElement(_weDesign.InlineMenuItemGroup, {
      title: title
    }, renderMenus(menuGroupData)));
  };

  const renderInlineMenuWrapper = (menu, index) => {
    const {
      menus: menuWrapperData
    } = menu;
    return /*#__PURE__*/_createElement(_style.InlineMenuWrapper, {
      key: index
    }, renderMenus(menuWrapperData));
  };
  /**
   * 渲染子菜单
   * @param menu
   * @param index
   */


  const renderSubMenu = (menu, index) => {
    const {
      title,
      hidden,
      menus: subMenuData,
      ...rest
    } = menu;
    if (hidden || !checkIfNotAllChildrenHidden(menu)) return null;
    const {
      PluginMenu,
      locale
    } = getMenuFromPlugin(menu);

    if (PluginMenu) {
      return /*#__PURE__*/_createElement(PluginMenu, {
        key: menu.menuKey,
        controller: controller,
        menuItem: menu,
        locale: locale
      });
    }

    const menusView = renderMenus(subMenuData || []);

    if (query && (!menusView || menusView.filter(view => !!view).length === 0)) {
      return null;
    }

    return /*#__PURE__*/_createElement(_weDesign.SubMenu, (0, _extends2.default)({}, rest, {
      title: title,
      key: menu.menuKey || index
    }), menusView);
  };
  /**
   * 渲染菜单组
   * @param menu
   * @param index
   */


  const renderMenuGroup = (menu, index) => {
    const {
      title,
      hidden,
      menus: menuGroupData,
      ...rest
    } = menu;
    if (hidden || !checkIfNotAllChildrenHidden(menu)) return null;
    const shouldShowDivider = index !== 0 && notNullMenuCount >= 1;
    const menusView = renderMenus(menuGroupData); // children 没有值的时候隐藏

    if (query && (!menusView || menusView.filter(view => !!view).length === 0)) {
      return null;
    }

    return /*#__PURE__*/_createElement(_react.default.Fragment, {
      key: index
    }, shouldShowDivider ? _ref2 : null, /*#__PURE__*/_createElement(_weDesign.MenuItemGroup, (0, _extends2.default)({}, rest, {
      title: title || ''
    }), menusView));
  };

  const renderMenu = (item, index) => {
    if (!item) return null;
    const {
      type
    } = item;

    switch (type) {
      case _interface.TYPE_GROUP:
        return renderMenuGroup(item, index);

      case _interface.TYPE_INLINE_MENU_GROUP:
        return renderInlineMenuGroup(item, index);

      case _interface.TYPE_INLINE_MENU_WRAPPER:
        return renderInlineMenuWrapper(item, index);

      case _interface.TYPE_SUB_MENU:
        return renderSubMenu(item, index);

      case _interface.TYPE_MENU_ITEM:
        return renderMenuItem(item);

      case _interface.TYPE_INLINE_MENU_ITEM:
        return renderInlineMenuItem(item);

      case _interface.TYPE_QUERY_ONLY_INLINE_MENU_ITEM:
        // 仅支持查询的菜单项在无 query 场景不显示
        return null;

      default:
        console.warn(`not support ${type} (type should be one of: TYPE_GROUP | TYPE_SUB_MENU | TYPE_MENU_ITEM)`);
        return null;
    }
  };

  const renderMenus = data => {
    if (!data) return null;
    return data.map(renderMenu);
  }; // @ts-ignore


  const menuView = renderMenus(menuData);

  if (query && (!menuView || menuView.filter(item => item).length === 0)) {
    return null;
  }

  return /*#__PURE__*/_createElement(_react.default.Fragment, null, menuView);
};

var _default = MenuAdapter;
exports.default = _default;
//# sourceMappingURL=menu.js.map