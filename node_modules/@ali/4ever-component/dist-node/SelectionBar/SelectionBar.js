"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SELECTION_BAR_HEIGHT = void 0;

var React = _interopRequireWildcard(require("react"));

var _everUtils = require("@ali/4ever-utils");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _NewToolbar = require("../NewToolbar");

var _lodash = require("lodash");

var _reducer = require("./reducer");

const _createElement = /*#__PURE__*/React.createElement;
const tableRowSlideInBottom = /*#__PURE__*/(0, _styledComponents.keyframes)(["0%{opacity:0;transform:translate(0%,-50%);}90%{opacity:1;transform:translate(0%,-5%);}100%{opacity:1;transform:translate(0%,0%);}"]);
const tableRowSlideOutBottom = /*#__PURE__*/(0, _styledComponents.keyframes)(["0%{opacity:1;transform:translate(0,0);}100%{opacity:0;transform:translate(0,50%);}"]);
const tableRowSlideInTop = /*#__PURE__*/(0, _styledComponents.keyframes)(["0%{opacity:0;transform:translate(0,-50%);}90%{opacity:1;transform:translate(0,-5%);}100%{opacity:1;transform:translate(0);}"]);
const tableRowSlideOutTop = /*#__PURE__*/(0, _styledComponents.keyframes)(["0%{opacity:1;transform:translate(0);}100%{opacity:0;transform:translate(0,-50%);}"]);
const slideInTop = /*#__PURE__*/(0, _styledComponents.keyframes)(["0%{opacity:0;transform:translate(-50%,-50%);}90%{opacity:1;transform:translate(-50%,-5%);}100%{opacity:1;transform:translate(-50%);}"]);
const slideOutTop = /*#__PURE__*/(0, _styledComponents.keyframes)(["0%{opacity:1;transform:translate(-50%);}100%{opacity:0;transform:translate(-50%,30%);}"]);
const slideInBottom = /*#__PURE__*/(0, _styledComponents.keyframes)(["0%{opacity:0;transform:translate(-50%,-50%);}90%{opacity:1;transform:translate(-50%,5%);}100%{opacity:1;transform:translate(-50%);}"]);
const slideOutBottom = /*#__PURE__*/(0, _styledComponents.keyframes)(["0%{opacity:1;transform:translate(-50%);}100%{opacity:0;transform:translate(-50%,-30%);}"]);

const SelectionBarBox = /*#__PURE__*/_styledComponents.default.div(["position:absolute;z-index:", ";top:", "px;left:", "px;height:", "px;width:fit-content;transform:", ";background:#FFFFFF;box-shadow:0px 0px 1px rgba(0,0,0,0.24),0px 8px 24px rgba(0,0,0,0.16);border-radius:4px;display:flex;align-items:center;padding:0;&.table-row-slide-in-bottom{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.table-row-slide-out-bottom{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.table-row-slide-in-top{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.table-row-slide-out-top{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.slide-in-top{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.slide-out-top{animation-name:", ";animation-duration:0.2s;animation-timing-function:ease;}&.slide-in-bottom{animation-duration:0.2s;animation-timing-function:ease-out;animation-name:", ";}&.slide-out-bottom{animation-name:", ";animation-duration:0.2s;animation-timing-function:ease;}"], _everUtils.zIndex.BI_FLOAT_TOOLBAR_Z_INDEX, props => props.top, props => props.left, props => props.height, props => props.needTransform ? 'translate(-50%, 0)' : 'none', tableRowSlideInBottom, tableRowSlideOutBottom, tableRowSlideInTop, tableRowSlideOutTop, slideInTop, slideOutTop, slideInBottom, slideOutBottom);

function getAnimation(placement, visible, needTransform) {
  if (placement === 'top') {
    if (visible) {
      if (!needTransform) {
        return 'table-row-slide-in-top';
      }

      return 'slide-in-top';
    } else {
      if (!needTransform) {
        return 'table-row-slide-out-top';
      }

      return 'slide-out-top';
    }
  }

  if (visible) {
    if (!needTransform) {
      return 'table-row-slide-in-bottom';
    }

    return 'slide-in-bottom';
  } else {
    if (!needTransform) {
      return 'table-row-slide-out-bottom';
    }

    return 'slide-out-bottom';
  }
}

function usePartialState(initialState) {
  const [state, setState] = React.useState(initialState);
  const setPartialState = React.useCallback(nextState => {
    setState(prevState => {
      return { ...prevState,
        ...nextState
      };
    });
  }, []);
  return [state, setPartialState];
}

const INITIAL_STATE = {
  internalVisible: false,
  animate: false
};
/**
 * SelectionBar 高度
 */

const SELECTION_BAR_HEIGHT = 36;
exports.SELECTION_BAR_HEIGHT = SELECTION_BAR_HEIGHT;
const SelectionBar = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    visible,
    placement,
    toolbarLayout,
    moreToolbarLayout,
    x,
    y,
    content,
    onAnimationInStart = _lodash.noop,
    onAnimationInEnd = _lodash.noop,
    onAnimationOutStart = _lodash.noop,
    onAnimationOutEnd = _lodash.noop,
    needTransform,
    controller,
    customToolButtons
  } = props;
  const [state, setState] = usePartialState(INITIAL_STATE);
  const boxRef = React.useRef(null);
  const {
    internalVisible,
    animate
  } = state;
  React.useEffect(() => {
    if (typeof ref === 'function') {
      ref(boxRef.current);
    } else if (ref) {
      ref.current = boxRef.current;
    }
  });
  React.useEffect(() => {
    if (visible && !internalVisible) {
      // 激活工具栏
      setState({
        internalVisible: true,
        animate: true
      });
    } else if (!visible && internalVisible) {
      // 关闭工具栏：先展示动画，再注销组件
      setState({
        animate: true
      });
    }
  }, [internalVisible, setState, visible]);
  React.useLayoutEffect(() => {
    if (visible && animate) {
      // 这里不合理但目前测试是最准确的，先通过这里报，再梳理
      controller.run('onAction', (0, _reducer.mountSelectionToolbar)());
      onAnimationInStart(boxRef.current);
    } else if (visible && !animate) {
      onAnimationInEnd(boxRef.current);
    } else if (!visible && animate) {
      onAnimationOutStart(boxRef.current);
    } else if (!visible && !animate) {
      onAnimationOutEnd();
    }
  }, [visible, animate, onAnimationInStart, onAnimationInEnd, onAnimationOutStart, onAnimationOutEnd]);
  const handleAnimationEnd = React.useCallback(() => {
    if (visible) {
      // 可见状态下，注销动画效果
      setState({
        animate: false
      });
    } else {
      // 不可见状态下，销毁组件
      setState({
        animate: false,
        internalVisible: false
      });
    }
  }, [setState, visible]);
  const offsetY = placement === 'bottom' ? y : y - SELECTION_BAR_HEIGHT;

  if (!internalVisible) {
    return null;
  }

  const className = animate ? getAnimation(placement, visible, needTransform) : '';
  return /*#__PURE__*/_createElement(SelectionBarBox, {
    needTransform: needTransform,
    ref: boxRef,
    top: offsetY,
    left: x,
    height: SELECTION_BAR_HEIGHT,
    className: className,
    onAnimationEnd: handleAnimationEnd,
    "data-testid": "selection-bar"
  }, /*#__PURE__*/_createElement(_NewToolbar.SimpleToolbar, {
    container: content,
    toolbarMode: _NewToolbar.NewToolbarMode.single,
    singleLayout: toolbarLayout,
    moreSingleLayout: moreToolbarLayout,
    customToolButtons: customToolButtons
  }));
});
SelectionBar.displayName = 'SelectionBar';
var _default = SelectionBar;
exports.default = _default;
//# sourceMappingURL=SelectionBar.js.map