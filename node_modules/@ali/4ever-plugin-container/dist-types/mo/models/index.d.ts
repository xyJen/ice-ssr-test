import { Block, Data, BlockChildren, Controller, Node } from '@ali/4ever-cangjie';
export interface ContainerData<T, M = Record<string, any>> extends Data {
    readonly subType: T;
    readonly metadata?: M;
}
export declare type ContainerChildren = BlockChildren;
interface ContainerProperties<D extends ContainerData<string> = ContainerData<string>, N extends BlockChildren = ContainerChildren> {
    data: D;
    nodes?: N;
}
export declare abstract class Container<T extends ContainerData<string> = ContainerData<string>> extends Block<T, Block[]> {
    static TYPE: string;
    static createContainer(properties: ContainerProperties | string): Block<{
        subType: string;
    }, BlockChildren> | Block<ContainerData<string, Record<string, any>>, BlockChildren>;
    static isContainer<D extends ContainerData<string> = ContainerData<string>>(maybeContainer: any, subType?: D['subType']): maybeContainer is Container<D>;
    /**
     * @deprecated
     * 临时冗余，待 container 迁移为 cangjie 内置插件后移除
     */
    static isVoid(controller: Controller, node: Node): boolean;
}
export {};
