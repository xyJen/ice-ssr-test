import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import { Block } from '@ali/4ever-cangjie';
import { ELEMENT_TYPE } from "../../utils/meta";
export var Container = /*#__PURE__*/function (_Block) {
  _inheritsLoose(Container, _Block);

  function Container() {
    return _Block.apply(this, arguments) || this;
  }

  Container.createContainer = function createContainer(properties) {
    if (typeof properties === 'string') {
      return _Block.create.call(this, {
        type: Container.TYPE,
        data: {
          subType: properties
        }
      });
    }

    return _Block.create.call(this, _extends({}, properties, {
      type: Container.TYPE
    }));
  };

  Container.isContainer = function isContainer(maybeContainer, subType) {
    if (!Block.isBlock(maybeContainer)) {
      return false;
    }

    var matchSubType = subType ? maybeContainer.data.subType === subType : true;
    return maybeContainer.type === Container.TYPE && matchSubType;
  }
  /**
   * @deprecated
   * 临时冗余，待 container 迁移为 cangjie 内置插件后移除
   */
  ;

  Container.isVoid = function isVoid(controller, node) {
    var _injections$find$data, _injections$find, _injections$find$data2, _injections$find$data3;

    var isTemplateButton = Container.isContainer(node, 'templateButton');
    var injections = controller.value.injections;
    var isTemplateButtonOpen = (_injections$find$data = (_injections$find = injections.find(function (inj) {
      var _inj$data, _inj$data$metadata;

      return ((_inj$data = inj.data) == null ? void 0 : (_inj$data$metadata = _inj$data.metadata) == null ? void 0 : _inj$data$metadata.isOpen) !== undefined && inj.key === node.key;
    })) == null ? void 0 : (_injections$find$data2 = _injections$find.data) == null ? void 0 : (_injections$find$data3 = _injections$find$data2.metadata) == null ? void 0 : _injections$find$data3.isOpen) != null ? _injections$find$data : false;
    return isTemplateButton && !isTemplateButtonOpen;
  };

  return Container;
}(Block);
Container.TYPE = ELEMENT_TYPE;
//# sourceMappingURL=index.js.map