{"version":3,"sources":["../../../../src/mo/models/index.ts"],"names":["Container","Block","createContainer","properties","create","type","TYPE","data","subType","isContainer","maybeContainer","isBlock","matchSubType","isVoid","controller","node","isTemplateButton","injections","value","isTemplateButtonOpen","find","inj","metadata","isOpen","undefined","key","ELEMENT_TYPE"],"mappings":";;;;;;;AAAA;;AACA;;AAcO,MAAeA,SAAf,SAA0FC,kBAA1F,CAA4G;AAGjH,SAAOC,eAAP,CACEC,UADF,EAEE;AACA,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,aAAO,MAAMC,MAAN,CAAa;AAClBC,QAAAA,IAAI,EAAEL,SAAS,CAACM,IADE;AAElBC,QAAAA,IAAI,EAAE;AACJC,UAAAA,OAAO,EAAEL;AADL;AAFY,OAAb,CAAP;AAMD;;AACD,WAAO,MAAMC,MAAN,CAAa,EAClB,GAAGD,UADe;AAElBE,MAAAA,IAAI,EAAEL,SAAS,CAACM;AAFE,KAAb,CAAP;AAID;;AAED,SAAOG,WAAP,CACEC,cADF,EAEEF,OAFF,EAGkC;AAChC,QAAI,CAACP,mBAAMU,OAAN,CAAcD,cAAd,CAAL,EAAoC;AAClC,aAAO,KAAP;AACD;;AACD,UAAME,YAAY,GAAGJ,OAAO,GACxBE,cAAc,CAACH,IAAf,CAAoBC,OAApB,KAAgCA,OADR,GAExB,IAFJ;AAGA,WACEE,cAAc,CAACL,IAAf,KAAwBL,SAAS,CAACM,IAAlC,IACAM,YAFF;AAID;AAED;AACF;AACA;AACA;;;AACE,SAAOC,MAAP,CAAcC,UAAd,EAAsCC,IAAtC,EAAkD;AAChD,UAAMC,gBAAgB,GAAGhB,SAAS,CAACS,WAAV,CAAsBM,IAAtB,EAA4B,gBAA5B,CAAzB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAiBH,UAAU,CAACI,KAAlC;AACA,UAAMC,oBAAoB,GAAIF,UAAU,CAACG,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACd,IAAJ,EAAUe,QAAV,EAAoBC,MAApB,KAA+BC,SAA/B,IAA4CH,GAAG,CAACI,GAAJ,KAAYV,IAAI,CAACU,GAApF,GAA0FlB,IAA1F,EAAgGe,QAAhG,EAA0GC,MAA1G,IAAoH,KAAlJ;AACA,WAAOP,gBAAgB,IAAI,CAACG,oBAA5B;AACD;;AA7CgH;;;AAA7FnB,S,CACbM,I,GAAOoB,kB","sourcesContent":["import { Block, Data, BlockChildren, Controller, Node } from '@ali/4ever-cangjie';\nimport { ELEMENT_TYPE } from '../../utils/meta';\n\nexport interface ContainerData<T, M = Record<string, any>> extends Data {\n  readonly subType: T;\n  readonly metadata?: M;\n}\n\nexport type ContainerChildren = BlockChildren;\n\ninterface ContainerProperties<D extends ContainerData<string> = ContainerData<string>, N extends BlockChildren = ContainerChildren> {\n  data: D;\n  nodes?: N;\n}\n\nexport abstract class Container<T extends ContainerData<string> = ContainerData<string>> extends Block<T, Block[]> {\n  static TYPE = ELEMENT_TYPE;\n  \n  static createContainer(\n    properties: ContainerProperties | string,\n  ) {\n    if (typeof properties === 'string') {\n      return super.create({\n        type: Container.TYPE,\n        data: {\n          subType: properties,\n        },\n      });\n    }\n    return super.create({\n      ...properties,\n      type: Container.TYPE,\n    });\n  }\n\n  static isContainer<D extends ContainerData<string> = ContainerData<string>>(\n    maybeContainer: any,\n    subType?: D['subType'],\n  ): maybeContainer is Container<D> {\n    if (!Block.isBlock(maybeContainer)) {\n      return false;\n    }\n    const matchSubType = subType\n      ? maybeContainer.data.subType === subType\n      : true;\n    return (\n      maybeContainer.type === Container.TYPE &&\n      matchSubType\n    );\n  }\n\n  /**\n   * @deprecated\n   * 临时冗余，待 container 迁移为 cangjie 内置插件后移除\n   */\n  static isVoid(controller: Controller, node: Node) {\n    const isTemplateButton = Container.isContainer(node, 'templateButton');\n    const { injections } = controller.value;\n    const isTemplateButtonOpen =  injections.find(inj => inj.data?.metadata?.isOpen !== undefined && inj.key === node.key)?.data?.metadata?.isOpen ?? false;\n    return isTemplateButton && !isTemplateButtonOpen;\n  }\n}\n"],"file":"index.js"}