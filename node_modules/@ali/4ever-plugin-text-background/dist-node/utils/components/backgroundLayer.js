"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _probe = require("../probe");

var _everUtils = require("@ali/4ever-utils");

const _createElement = /*#__PURE__*/React.createElement;

const TextLayer = /*#__PURE__*/_styledComponents.default.div(["float:left;position:relative;width:0;height:0;& ~ *{position:relative;}"]);

function getRenderItems(overlayDom, marks) {
  const items = [];

  if (!overlayDom) {
    return items;
  }

  const parentDOMNode = overlayDom.parentElement;

  if (!parentDOMNode) {
    return items;
  }

  const rows = _everCangjie.domUtils.splitRows(parentDOMNode);

  const overlayRect = overlayDom.getBoundingClientRect();
  marks.forEach(mark => {
    const domNode = parentDOMNode.querySelector(`[data-cangjie-key='${mark.key}:${mark.offset}']`);

    if (!domNode) {
      return;
    }

    const boundingRects = Array.from(domNode.getClientRects());

    const rects = _everCangjie.domUtils.fitRows(rows, boundingRects, overlayRect);

    if (!rects.length) {
      return;
    }

    let color;

    if (mark.mark.type === 'highlight' && mark.mark.data.value !== 'transparent') {
      color = mark.mark.data.value;
    } else if (mark.mark.type === 'shd') {
      color = _everUtils.ShdUtil.transformShd(mark.mark.data);
    }

    if (color === 'transparent') {
      return;
    }

    const item = items.find(i => i.color === color);

    if (item) {
      item.rects = item.rects.concat(rects);
    } else {
      const {
        key
      } = mark;
      items.push({
        color,
        key,
        rects
      });
    }
  });
  return items.map(item => {
    return { ...item,
      rects: _everCangjie.domUtils.mergeRects(item.rects)
    };
  });
}

const BackgroundOverlay = /*#__PURE__*/React.memo(props => {
  const {
    marks,
    zoom
  } = props;
  const ref = React.useRef(null);
  const [renderItems, setRenderItems] = React.useState([]);
  const updateMarks = React.useCallback(() => {
    const newItems = getRenderItems(ref.current, marks);
    setRenderItems(newItems);
  }, [marks]);
  React.useEffect(() => {
    updateMarks();
  }, [marks, updateMarks, zoom]);
  (0, _everCangjie.useLeafBlockResizer)(ref, updateMarks, [marks]);
  const probeChanged = (0, _probe.useMeasureProbe)();
  React.useEffect(() => {
    if (probeChanged !== undefined) {
      // TODO: 因为引入了 puring，放弃使用 probe 带来的性能优化，@多鱼后续考虑性能优化吧
      // 策略：在表格和高亮块里监听原来的 leafBlock，其它走全局的 probe 探测
      updateMarks();
    }
  }, [updateMarks, probeChanged]);
  const attrbiute = {
    [_everCangjie.constants.Selector.nonSelect]: true
  };
  return /*#__PURE__*/_createElement(TextLayer, {
    ref: ref,
    "data-cangjie-text-layer": true
  }, renderItems.map(renderItem => {
    return renderItem.rects && renderItem.rects.map(rect => {
      const backgroundColor = renderItem.color;
      const position = 'absolute';
      const {
        left,
        top,
        width,
        height
      } = rect;
      const keyStr = `${renderItem.key}-${left}-${top}-${width}-${height}`;
      const style = {
        position,
        left: left / zoom,
        top: top / zoom,
        width: width / zoom,
        height: height / zoom,
        backgroundColor
      };
      return /*#__PURE__*/_createElement("div", (0, _extends2.default)({}, attrbiute, {
        key: keyStr,
        style: style
      }));
    });
  }));
});

var _default = props => {
  const zoom = (0, _everCangjie.useZoom)();
  return /*#__PURE__*/_createElement(BackgroundOverlay, (0, _extends2.default)({}, props, {
    zoom: zoom
  }));
};

exports.default = _default;
//# sourceMappingURL=backgroundLayer.js.map