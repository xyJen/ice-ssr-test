{"version":3,"sources":["../../../src/utils/renderNode.tsx"],"names":["shouldRenderBySelf","text","prevSz","leaves","every","leaf","szMark","marks","find","type","sz","data","isSameSize","colorMark","color","value","shouldAntiAliasing","node","nodes","length","Text","isTextList","cachedMarksMap","WeakMap","buildHightlightMarks","cachedMarks","get","getTexts","forEach","offset","inlineCodeMark","mark","push","key","set","marksOption","disableHighlight","COLORS_WHITE","invalidMark","m","String","replace","some","c","createRenderNode","configs","disableAntiAliasing","renderNode","props","controller","next","children","Block","isLeafBlock","isAntiAliasingDisabled","newChildren","newProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport equal from 'fast-deep-equal';\nimport { Node, Block, Text, RenderNodeProps, Mark, Controller } from '@ali/4ever-cangjie';\nimport { MarksOptionContext } from '@ali/4ever-plugin-marks';\nimport BackgroundOverlay, { MarkItem } from './components/backgroundLayer';\nimport { isGradientColor } from '@ali/4ever-utils';\nimport { TextBackgroundPluginConfigs } from './types';\n\n// 当文字字体大小相同且不为渐变色时，通过自身 background 渲染背景色，否则使用 div 模拟背景色\nfunction shouldRenderBySelf(text: Text) {\n  let prevSz: Record<string, any> | null = null;\n  return text.leaves.every((leaf) => {\n    const szMark = leaf.marks.find(({ type }) => type === 'sz');\n    const sz = szMark?.data || null;\n    const isSameSize = !prevSz || equal(sz, prevSz);\n    prevSz = sz;\n\n    const colorMark = leaf.marks.find(({ type }) => type === 'color');\n    const color = colorMark?.data?.value;\n    return isSameSize && !isGradientColor(color);\n  });\n}\n\nfunction shouldAntiAliasing(node: Block) {\n  return (\n    node.nodes.length > 1 ||\n    !Text.isTextList(node.nodes) ||\n    !node.nodes.every(shouldRenderBySelf)\n  );\n}\n\nconst cachedMarksMap = new WeakMap<Node, MarkItem[]>();\nfunction buildHightlightMarks(node: Node) {\n  const cachedMarks = cachedMarksMap.get(node);\n  if (cachedMarks) {\n    return cachedMarks;\n  }\n  const marks: MarkItem[] = [];\n  node.getTexts().forEach((text) => {\n    let offset = 0;\n    text.leaves.forEach((leaf) => {\n      const inlineCodeMark = leaf.marks.find(\n        (mark) => mark.type === 'inlineCode',\n      );\n      // 存在 行内代码 样式，则忽略其他背景色效果\n      if (inlineCodeMark) {\n        marks.push({ mark: inlineCodeMark!, key: text.key, offset });\n        offset += leaf.text.length;\n        return;\n      }\n      let colorMark;\n      leaf.marks.forEach((mark) => {\n        if (mark.type === 'highlight') {\n          colorMark = mark;\n        } else if (mark.type === 'shd') {\n          colorMark = colorMark || mark;\n        }\n      });\n\n      if (colorMark) {\n        const { key } = text;\n        marks.push({ mark: colorMark as Mark, key, offset });\n      }\n      offset += leaf.text.length;\n    });\n  });\n  cachedMarksMap.set(node, marks);\n  return marks;\n}\n\nconst marksOption = { disableHighlight: true };\n\nconst COLORS_WHITE = ['rgba(0,0,0,0)', 'white'];\n\n/**\n * 如果是白色的 mark，直接无视掉。\n * 一些外部拷贝的内容可能会加很多白色背景，严重影响性能。\n */\nconst invalidMark = (m: MarkItem) => {\n  const color = String(m.mark.data.value).replace(/ /g, '');\n  return COLORS_WHITE.some((c) => c === color);\n};\n\nexport default function createRenderNode(\n  configs?: TextBackgroundPluginConfigs,\n) {\n  const { disableAntiAliasing } = configs || {};\n  return function renderNode(props: RenderNodeProps, controller: Controller, next) {\n    const { node, children } = props;\n\n    if (!Block.isLeafBlock(node)) {\n      return next();\n    }\n\n    const isAntiAliasingDisabled =\n      disableAntiAliasing && disableAntiAliasing() === true;\n    if (isAntiAliasingDisabled || !shouldAntiAliasing(node as Block)) {\n      return next();\n    }\n\n    const marks = buildHightlightMarks(node);\n    if (!marks.length || marks.every(invalidMark)) {\n      return next();\n    }\n\n    const newChildren = () => {\n      return (\n        <MarksOptionContext.Provider value={marksOption}>\n          <BackgroundOverlay marks={marks} node={node as Block} controller={controller} />\n          {children()}\n        </MarksOptionContext.Provider>\n      );\n    };\n    const newProps = {\n      ...props,\n      children: newChildren,\n    };\n\n    return next(newProps);\n  };\n}\n"],"file":"renderNode.js"}