import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import { orderBy } from 'lodash-es';
import { Commands, Block } from '@ali/4ever-cangjie';
import { Card } from '@ali/4ever-plugin-card';
import setCardInjectionCommand from "../commands/setCardInjection";
import { VOTE_SAVE, VOTING_ACTIVE, VOTE_EDITING, VOTE_CANCEL_EDITING, VOTE_CANCEL_VOTING, VOTE_DELETE, VOTE_COPY, VOTE_CUT, VOTE_SUBMIT } from "../actions";
export var removeVoteId = function removeVoteId(node) {
  return Block.create({
    type: Card.TYPE,
    data: {
      cardType: 'vote',
      height: 400,
      metadata: _extends({}, node == null ? void 0 : node.data.metadata, {
        voteId: undefined
      })
    }
  });
};

var createOnAction = function createOnAction(votePluginConfig, copyNodes) {
  return function (action, controller, next) {
    var createVote = votePluginConfig.createVote,
        modifyVote = votePluginConfig.modifyVote,
        submitVote = votePluginConfig.submitVote;
    var type = action.type,
        payload = action.payload; // 切换到投票状态

    if (type === VOTING_ACTIVE) {
      var node = payload.node;
      return controller.command(setCardInjectionCommand, node, {
        voting: true
      });
    } // 投票内容提交


    if (type === VOTE_SAVE) {
      var _node = payload.node,
          setData = payload.setData,
          rest = _objectWithoutPropertiesLoose(payload, ["node", "setData"]);

      if (!modifyVote) {
        console.warn('Missing `modifyVote`');
        return;
      }

      if (!createVote) {
        console.warn('Missing `createVote`');
        return;
      }

      var func = _node.data.metadata.voteId ? modifyVote : createVote;
      func(rest).then(function (data) {
        data.optionInfoList = orderBy(data.optionInfoList, 'pos');
        setData(data);
        var readOnly = controller.readOnly;
        !readOnly && controller.withoutSaving(function () {
          return controller.command(Commands.setNodeByKey, _node.key, {
            type: _node.type,
            data: _extends({}, _node.data, {
              metadata: data
            })
          });
        });
      });
      return controller.command(setCardInjectionCommand, _node, {});
    } // 切换到编辑态


    if (type === VOTE_EDITING) {
      var _node2 = payload.node;
      return controller.command(setCardInjectionCommand, _node2, {
        editing: true
      });
    } // 取消编辑


    if (type === VOTE_CANCEL_EDITING) {
      var _node3 = payload.node,
          _rest = _objectWithoutPropertiesLoose(payload, ["node"]);

      if (!_rest.voteId) {
        controller.command(Commands.removeNodeByKey, _node3.key);
      }

      return controller.command(setCardInjectionCommand, _node3, {});
    } // 删除


    if (type === VOTE_DELETE) {
      var key = payload.key;
      return controller.command(Commands.removeNodeByKey, key);
    } // 复制


    if (type === VOTE_COPY) {
      var _controller$value$doc;

      var _key = payload.key;

      var _node4 = (_controller$value$doc = controller.value.document.getNode(_key)) != null ? _controller$value$doc : undefined;

      if (_node4) {
        var copyNode = removeVoteId(_node4);
        var rst = controller.query('copyNodes', copyNode);

        if (rst instanceof Promise) {
          rst["catch"](function (e) {
            return console.error('copy error', e);
          });
        }
      }
    } // 剪切


    if (type === VOTE_CUT) {
      var _controller$value$doc2;

      var _key2 = payload.key;

      var _node5 = (_controller$value$doc2 = controller.value.document.getNode(_key2)) != null ? _controller$value$doc2 : undefined;

      if (_node5) {
        var _copyNode = removeVoteId(_node5);

        var _rst = controller.query('copyNodes', _copyNode);

        if (_rst instanceof Promise) {
          _rst["catch"](function (e) {
            return console.error('copy error', e);
          });
        }

        return controller.command(Commands.removeNodeByKey, _key2);
      }
    } // 投票


    if (type === VOTE_SUBMIT) {
      if (!submitVote) {
        console.warn('Missing `submitVote`');
        return;
      }

      var _node6 = payload.node,
          _setData = payload.setData,
          _rest2 = _objectWithoutPropertiesLoose(payload, ["node", "setData"]);

      submitVote(_rest2).then(function (data) {
        if (data.optionInfoList) {
          data.optionInfoList = orderBy(data.optionInfoList, 'pos');

          _setData(data);

          var readOnly = controller.readOnly;
          !readOnly && controller.withoutSaving(function () {
            return controller.command(Commands.setNodeByKey, _node6.key, {
              type: _node6.type,
              data: _extends({}, _node6.data, {
                metadata: data
              })
            });
          });
        } else {
          _setData(function (state) {
            return _extends({}, state, {
              hasEnded: true
            });
          });
        }
      });
      return controller.command(setCardInjectionCommand, _node6, {});
    } // 取消投票


    if (type === VOTE_CANCEL_VOTING) {
      var _node7 = payload.node;
      return controller.command(setCardInjectionCommand, _node7, {});
    }

    return next();
  };
};

export default createOnAction;
//# sourceMappingURL=createOnAction.js.map