import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useMemo, useEffect, useState, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment } from '@ali/4ever-cangjie';
import classnames from 'classnames';
import { orderBy } from 'lodash-es';
import produce from 'immer';
import dayjs from 'dayjs';
import { ToolbarAddNormal, SelectArrowDownNormalNormal, DragallNormal, ToolbarDeleteNormal } from '@ali/we-icon';
import { Select, DatePicker } from '@ali/we-design';
import { Button } from '@ali/we-design-next';
import { EnumVoteType, EnumModifyType } from "../types";
import { cancelEditing, voteSave } from "../actions";
import { ContainerWrapper, ContainerEditWrapper, DatePickerWrapper, InputTitleWrapper, InputContentWrapper, InputPrefixWrapper, Separator, InputSuffixWrapper } from "./styled";
var Option = Select.Option;
var MAX_OPTIONS_LENGTH = 50;

var _ref3 = /*#__PURE__*/_createElement(Separator, null);

var _ref4 = /*#__PURE__*/_createElement(DragallNormal, null);

var _ref5 = /*#__PURE__*/_createElement(ToolbarAddNormal, null);

var _ref6 = /*#__PURE__*/_createElement(SelectArrowDownNormalNormal, null);

var Edit = /*#__PURE__*/React.memo(function (props) {
  var controller = props.controller,
      node = props.node,
      locale = props.locale,
      isSelected = props.isSelected,
      data = props.data,
      setData = props.setData;
  var titleRef = useRef(null);
  var optionRef = useRef(null);
  var modifyData = useRef({
    voteId: data.voteId,
    optionInfoList: []
  });
  var modifyList = useRef([]);
  var optionHeightRef = useRef(0);
  var draggingObj = useRef(); // @ts-ignore

  var _useState = useState(data),
      form = _useState[0],
      setForm = _useState[1];

  useEffect(function () {// isSelected && titleRef.current?.focus();
  }, [isSelected]);
  useEffect(function () {
    setForm(function (state) {
      return produce(state, function (draft) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        draft = data;
      });
    });
  }, [data]);
  var options = useMemo(function () {
    return orderBy(form.optionInfoList, 'pos');
  }, [form]);
  var handleCancel = useCallback(function () {
    controller.run('onAction', cancelEditing(node, data));
  }, []);
  var collectModifyData = useCallback(function (realData) {
    var _modifyData$current$o;

    if (!realData.voteId) return; // title, voteType, endTime, showTicketBeforeVoting 变化

    modifyList.current.forEach(function (item) {
      if (realData[item] !== form[item]) {
        modifyData.current[item] = form[item];
      }
    });
    var addOptions = form.optionInfoList.filter(function (item) {
      return !item.optionId && item.content;
    });
    modifyData.current.optionInfoList = [].concat((_modifyData$current$o = modifyData.current.optionInfoList) != null ? _modifyData$current$o : [], addOptions.map(function (item) {
      return _extends({}, item, {
        operationType: EnumModifyType.ADD
      });
    }));
  }, [form]); // 内容修改结束

  var handleBlurContent = useCallback(function (index, e) {
    e.persist();
    var target = options[index];
    collectModifyKey('optionInfo', target.optionId, EnumModifyType.MODIFY, e.target.value);
  }, [options]); // 内容修改

  var handleContentChange = useCallback(function (index, e) {
    e.persist();
    setForm(function (state) {
      return produce(state, function (draft) {
        var _e$target;

        draft.optionInfoList[index].content = (_e$target = e.target) == null ? void 0 : _e$target.value;
      });
    });
  }, [options]); // 收集修改内容的 key

  var collectModifyKey = useCallback(function (key, id, type, content) {
    // 如果是新增投票，不用收集差异数据
    if (!data.voteId) return;

    if (key === 'optionInfo') {
      if (!id) return;

      if (type === EnumModifyType.DELETE) {
        var _modifyData$current$o2;

        (_modifyData$current$o2 = modifyData.current.optionInfoList) == null ? void 0 : _modifyData$current$o2.push({
          optionId: id,
          operationType: EnumModifyType.DELETE
        });
      } else if (type === EnumModifyType.MODIFY) {
        var _modifyData$current$o3, _modifyData$current$o4;

        content ? (_modifyData$current$o3 = modifyData.current.optionInfoList) == null ? void 0 : _modifyData$current$o3.push({
          optionId: id,
          operationType: EnumModifyType.MODIFY,
          content: content
        }) : (_modifyData$current$o4 = modifyData.current.optionInfoList) == null ? void 0 : _modifyData$current$o4.push({
          optionId: id,
          operationType: EnumModifyType.DELETE
        });
      } else if (type === EnumModifyType.MOVE) {
        var _modifyData$current$o5;

        (_modifyData$current$o5 = modifyData.current.optionInfoList) == null ? void 0 : _modifyData$current$o5.push({
          optionId: id,
          operationType: EnumModifyType.MOVE,
          pos: content
        });
      }

      return;
    }

    if (!modifyList.current.includes(key)) {
      modifyList.current.push(key);
    }
  }, [data]); // 标题修改

  var handleTitleChange = useCallback(function (e) {
    e.persist();
    collectModifyKey('title');
    setForm(function (state) {
      return produce(state, function (draft) {
        var _e$target2;

        draft.title = (_e$target2 = e.target) == null ? void 0 : _e$target2.value;
      });
    });
  }, []); // 添加

  var handleAdd = useCallback(function () {
    if (form.optionInfoList.length >= MAX_OPTIONS_LENGTH) {
      return;
    }

    setForm(function (state) {
      return produce(state, function (draft) {
        draft.optionInfoList = [].concat(state.optionInfoList, [{
          content: '',
          pos: state.optionInfoList[state.optionInfoList.length - 1].pos + 1,
          userOptionTicket: 0,
          optionTicket: 0
        }]);
      });
    });
  }, [form]); // 删除

  var handleRemove = useCallback(function (index) {
    var target = options[index];
    collectModifyKey('optionInfo', target.optionId, EnumModifyType.DELETE);
    setForm(function (state) {
      return produce(state, function (draft) {
        draft.optionInfoList = state.optionInfoList.filter(function (_, i) {
          return index !== i;
        });
      });
    });
  }, [form]);
  var handleSave = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            collectModifyData(data);
            controller.run('onAction', voteSave({
              node: node,
              data: data.voteId ? modifyData.current : _extends({}, form, {
                optionInfoList: form.optionInfoList.filter(function (_ref2) {
                  var content = _ref2.content;
                  return content;
                })
              }),
              setData: setData
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [node, form, data.voteId]);
  var handleDragStart = useCallback(function (e, index) {
    var dragging = e.target;
    draggingObj.current = {
      index: index,
      rect: dragging.getBoundingClientRect(),
      offset: 0
    };
  }, []);
  /** 计算 options 的单位高度 */

  useEffect(function () {
    if (!optionRef.current) return;
    var optionsRect = optionRef.current.getBoundingClientRect();
    optionHeightRef.current = optionsRect.height / form.optionInfoList.length;
  }, [form.optionInfoList]);
  var handleDragOver = useCallback(function (e) {
    if (!draggingObj.current) return;
    var target = e.target;
    var targetRect = target.getBoundingClientRect();
    draggingObj.current.offset = targetRect.top - draggingObj.current.rect.top;
  }, []);
  var handleClickShowTicket = useCallback(function () {
    collectModifyKey('showTicketBeforeVoting');
    setForm(function (state) {
      return produce(state, function (draft) {
        draft.showTicketBeforeVoting = !state.showTicketBeforeVoting;
      });
    });
  }, []);
  var handleChangeEndTime = useCallback(function (e) {
    collectModifyKey('endTime');
    setForm(function (state) {
      return produce(state, function (draft) {
        draft.endTime = dayjs(e).valueOf();
      });
    });
  }, []);
  var handleVoteTypeChange = useCallback(function (e) {
    collectModifyKey('voteType');
    setForm(function (state) {
      return produce(state, function (draft) {
        draft.voteType = Number(e);
      });
    });
  }, []); // 拖拽后排序

  var handleDragEnd = useCallback(function () {
    if (!draggingObj.current) return;
    var _draggingObj$current = draggingObj.current,
        index = _draggingObj$current.index,
        offset = _draggingObj$current.offset;
    var finallyIndex = index + Math.floor(offset / optionHeightRef.current);
    var targetIndex = Math.max(0, Math.min(finallyIndex, options.length - 1)); // 位置未发生变化

    if (targetIndex === index) return;
    setForm(function (state) {
      return produce(state, function (draft) {
        var temp = orderBy(state.optionInfoList, 'pos').map(function (item, i) {
          if (i !== index) return item;
          var pos = item.pos;

          if (targetIndex === 0) {
            // 拖拽到第一位
            pos = state.optionInfoList[0].pos / 2;
          } else if (targetIndex === state.optionInfoList.length - 1) {
            // 拖拽到最后
            pos = state.optionInfoList[state.optionInfoList.length - 1].pos + 1;
          } else {
            // 拖拽到中间位置
            pos = (state.optionInfoList[targetIndex].pos + state.optionInfoList[targetIndex - 1].pos) / 2;
          }

          collectModifyKey('optionInfo', item.optionId, EnumModifyType.MOVE, pos);
          return _extends({}, item, {
            pos: pos
          });
        });
        draft.optionInfoList = [].concat(orderBy(temp, 'pos'));
      });
    });
  }, [options]);
  var saveDisable = useMemo(function () {
    // title 不能为空
    if (!form.title) return true;
    if (form.optionInfoList.filter(function (item) {
      return item.content;
    }).length < 2) return true;
    return false;
  }, [form]);
  var currentDate = dayjs();
  var disabledDate = useCallback(function (date) {
    if (!date) {
      return false;
    }

    return date.valueOf() <= currentDate.add(-1, 'day').valueOf();
  }, []);
  return /*#__PURE__*/_createElement(ContainerWrapper, {
    isSelected: isSelected,
    "data-cangjie-not-editable": true,
    "data-role": "vote",
    "data-testid": "card-vote-container-edit"
  }, /*#__PURE__*/_createElement(ContainerEditWrapper, null, /*#__PURE__*/_createElement("div", {
    className: "editing-header"
  }, /*#__PURE__*/_createElement(InputPrefixWrapper, null, /*#__PURE__*/_createElement(Select, {
    disabled: data.totalVoteCount > 0,
    style: {
      width: '60px'
    },
    value: String(form.voteType),
    onChange: handleVoteTypeChange,
    testid: "test",
    styleType: "toolbar"
  }, /*#__PURE__*/_createElement(Option, {
    key: "radio",
    value: String(EnumVoteType.RADIO)
  }, locale == null ? void 0 : locale.radio), /*#__PURE__*/_createElement(Option, {
    key: "checkbox",
    value: String(EnumVoteType.CHECKBOX)
  }, locale == null ? void 0 : locale.checkbox)), _ref3), /*#__PURE__*/_createElement(InputTitleWrapper, {
    "data-testid": "card-vote-edit-title",
    ref: titleRef,
    type: "text",
    onChange: handleTitleChange,
    value: form.title,
    maxLength: 100,
    placeholder: locale == null ? void 0 : locale.titlePlaceholder
  })), /*#__PURE__*/_createElement("div", {
    className: "editing-options",
    "data-testid": "card-vote-edit-options",
    ref: optionRef
  }, options.map(function (item, index) {
    return /*#__PURE__*/_createElement("div", {
      key: item.optionId || index,
      draggable: form.optionInfoList.length > 1,
      onDragEnd: handleDragEnd,
      onDragOver: handleDragOver,
      onDragStart: function onDragStart(e) {
        return handleDragStart(e, index);
      }
    }, /*#__PURE__*/_createElement("span", {
      className: classnames({
        'drag-icon': form.optionInfoList.length > 1
      })
    }, _ref4), /*#__PURE__*/_createElement(InputContentWrapper, {
      onDragStart: function onDragStart(e) {
        e.stopPropagation();
        e.preventDefault();
      },
      draggable: !environment.IS_SAFARI,
      type: "text",
      value: item.content,
      maxLength: 100,
      onChange: function onChange(e) {
        return handleContentChange(index, e);
      },
      onBlur: function onBlur(e) {
        return handleBlurContent(index, e);
      },
      placeholder: (locale == null ? void 0 : locale.optionPlaceholder) + " " + (index + 1)
    }), /*#__PURE__*/_createElement(InputSuffixWrapper, null, options.length > 2 && /*#__PURE__*/_createElement(ToolbarDeleteNormal, {
      onClick: function onClick() {
        return handleRemove(index);
      }
    })));
  })), /*#__PURE__*/_createElement("div", {
    className: classnames({
      'editing-add': true,
      disabled: options.length >= MAX_OPTIONS_LENGTH
    }),
    onClick: handleAdd
  }, _ref5, locale == null ? void 0 : locale.add), /*#__PURE__*/_createElement("div", {
    className: "editing-datepicker"
  }, /*#__PURE__*/_createElement(DatePicker, {
    showTime: true,
    disabledDate: disabledDate,
    renderTrigger: function renderTrigger(v) {
      return /*#__PURE__*/_createElement(DatePickerWrapper, null, locale == null ? void 0 : locale.deadline, /*#__PURE__*/_createElement("span", null, v ? v.format('YYYY-MM-DD HH:mm:ss') : locale == null ? void 0 : locale.noDeadline), _ref6);
    },
    defaultValue: dayjs(form.endTime),
    onChange: handleChangeEndTime,
    style: {
      width: 280
    },
    testid: "DatePicker",
    locale: "ja",
    allowClear: true
  })), /*#__PURE__*/_createElement("div", {
    className: "editing-footer"
  }, /*#__PURE__*/_createElement("span", null, locale == null ? void 0 : locale.resultShow), [locale == null ? void 0 : locale.afterVote, locale == null ? void 0 : locale.always].map(function (item, index) {
    return /*#__PURE__*/_createElement("div", {
      onClick: handleClickShowTicket
    }, /*#__PURE__*/_createElement("span", {
      className: classnames({
        checked: form.showTicketBeforeVoting === Boolean(index)
      })
    }), item);
  }), /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(Button, {
    onClick: handleCancel
  }, locale == null ? void 0 : locale.cancel), /*#__PURE__*/_createElement(Button, {
    "data-role": "create",
    disabled: saveDisable,
    type: "primary",
    onClick: handleSave
  }, locale == null ? void 0 : locale.save)))));
});
export default Edit;
//# sourceMappingURL=edit.js.map