import React, { useMemo, useState, useEffect, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SpinErrorCard, SpinCard } from '@ali/we-design';
import produce from 'immer';
import { VoteNormal } from '@ali/we-icon';
import Voting from "./voting";
import Result from "./result";
import Edit from "./edit";
import { voteSaveCP } from "../actions";
var styleCard = {
  padding: '20px',
  minHeight: '140px'
};

var _ref2 = /*#__PURE__*/_createElement(SpinCard, {
  style: styleCard,
  size: "medium"
});

var _ref3 = /*#__PURE__*/_createElement(VoteNormal, null);

var Container = function Container(props) {
  var locale = props.locale,
      controller = props.controller,
      node = props.node,
      isSelected = props.isSelected,
      getVote = props.getVote,
      onSocketMsg = props.onSocketMsg,
      isPublish = props.isPublish,
      readOnly = props.readOnly;

  var _useState = useState(node.data.metadata),
      data = _useState[0],
      setData = _useState[1];

  var isEditStatus = controller.query('isVoteCardEditingStatus', {
    node: node
  });
  var isNewVote = useMemo(function () {
    return !node.data.metadata.voteId;
  }, [node]);
  var isUserUnTicketed = useMemo(function () {
    var _data$optionInfoList;

    return ((_data$optionInfoList = data.optionInfoList) == null ? void 0 : _data$optionInfoList.filter(function (_ref) {
      var userOptionTicket = _ref.userOptionTicket;
      return userOptionTicket !== 0;
    }).length) !== 0;
  }, [data]);
  var updateVoteData = useCallback(function (payload) {
    if (!getVote) {
      console.warn('Missing `getVote`');
      return;
    }

    var voteId = node.data.metadata.voteId;

    if (!data.isServiceError) {
      controller.run('onAction', voteSaveCP(node.key, data));
    }

    if (!payload) {
      setData(function (state) {
        return produce(state, function (draft) {
          draft.loading = true;
        });
      });
      getVote(voteId, setData);
      return;
    }

    if (isEditStatus || isNewVote) return;
    if (payload.payload.voteId !== voteId) return; // 协同时，直接更新数据，不需要 loading，避免闪动
    // setData((state) => {
    //   return produce(state, draft => {
    //     draft.loading = true;
    //   });
    // });

    getVote(voteId, setData);
  }, [node, isEditStatus, isNewVote]);
  useEffect(function () {
    // 如果是新创建的投票，返回默认数据
    if (isNewVote) {
      setData(node.data.metadata);
      return;
    }

    if (getVote) {
      try {
        updateVoteData();
      } catch (err) {
        // 如果数据请求失败，取 cp 中的数据，在公开发布场景下适用
        setData(node.data.metadata);
      }
    }
  }, [isNewVote, controller]);
  useEffect(function () {
    var remove = onSocketMsg && onSocketMsg(updateVoteData)();
    return function () {
      remove && remove();
    };
  }, [onSocketMsg]);

  if (data.loading) {
    return _ref2;
  }

  if (data.isServiceError) {
    return /*#__PURE__*/_createElement(SpinErrorCard, {
      style: styleCard,
      icon: _ref3,
      title: locale == null ? void 0 : locale.submit,
      highlightIcon: true,
      tip: data.serviceErrorMsg,
      role: "spin-card",
      onRefresh: function onRefresh() {
        updateVoteData();
      }
    });
  } // 公开发布等只读场景


  if (isPublish) {
    // 投票结果页
    return /*#__PURE__*/_createElement(Result, {
      data: data,
      node: node,
      locale: locale,
      controller: controller,
      isSelected: isSelected,
      readOnly: readOnly
    });
  } // 编辑状态


  if (isEditStatus || isNewVote) {
    return /*#__PURE__*/_createElement(Edit, {
      data: data,
      node: node,
      controller: controller,
      locale: locale,
      setData: setData,
      isSelected: isSelected
    });
  } // 点击重新发起投票，此时是一个内存态


  var isVotingStatus = controller.query('isVoteCardVotingStatus', {
    node: node
  });

  if (isVotingStatus || !data.hasEnded && ( // 始终可见，无人投
  data.totalVoteCount === 0 && data.showTicketBeforeVoting || // 投票后可见，我未投
  !data.showTicketBeforeVoting && !isUserUnTicketed)) {
    // 投票状态
    return /*#__PURE__*/_createElement(Voting, {
      data: data,
      node: node,
      locale: locale,
      controller: controller,
      isSelected: isSelected,
      setData: setData,
      readOnly: readOnly
    });
  } // 投票结果页


  return /*#__PURE__*/_createElement(Result, {
    data: data,
    node: node,
    locale: locale,
    controller: controller,
    isSelected: isSelected,
    readOnly: readOnly
  });
};

export default Container;
//# sourceMappingURL=container.js.map