"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.removeVoteId = void 0;

var _lodash = require("lodash");

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginCard = require("@ali/4ever-plugin-card");

var _setCardInjection = _interopRequireDefault(require("../commands/setCardInjection"));

var _actions = require("../actions");

const removeVoteId = node => {
  return _everCangjie.Block.create({
    type: _everPluginCard.Card.TYPE,
    data: {
      cardType: 'vote',
      height: 400,
      metadata: { // @ts-ignore
        ...node?.data.metadata,
        voteId: undefined
      }
    }
  });
};

exports.removeVoteId = removeVoteId;

const createOnAction = (votePluginConfig, copyNodes) => (action, controller, next) => {
  const {
    createVote,
    modifyVote,
    submitVote
  } = votePluginConfig;
  const {
    type,
    payload
  } = action; // 切换到投票状态

  if (type === _actions.VOTING_ACTIVE) {
    const {
      node
    } = payload;
    return controller.command(_setCardInjection.default, node, {
      voting: true
    });
  } // 投票内容提交


  if (type === _actions.VOTE_SAVE) {
    const {
      node,
      setData,
      ...rest
    } = payload;

    if (!modifyVote) {
      console.warn('Missing `modifyVote`');
      return;
    }

    if (!createVote) {
      console.warn('Missing `createVote`');
      return;
    }

    const func = node.data.metadata.voteId ? modifyVote : createVote;
    func(rest).then(data => {
      data.optionInfoList = (0, _lodash.orderBy)(data.optionInfoList, 'pos');
      setData(data);
      const {
        readOnly
      } = controller;
      !readOnly && controller.withoutSaving(() => controller.command(_everCangjie.Commands.setNodeByKey, node.key, {
        type: node.type,
        data: { ...node.data,
          metadata: data
        }
      }));
    });
    return controller.command(_setCardInjection.default, node, {});
  } // 切换到编辑态


  if (type === _actions.VOTE_EDITING) {
    const {
      node
    } = payload;
    return controller.command(_setCardInjection.default, node, {
      editing: true
    });
  } // 取消编辑


  if (type === _actions.VOTE_CANCEL_EDITING) {
    const {
      node,
      ...rest
    } = payload;

    if (!rest.voteId) {
      controller.command(_everCangjie.Commands.removeNodeByKey, node.key);
    }

    return controller.command(_setCardInjection.default, node, {});
  } // 删除


  if (type === _actions.VOTE_DELETE) {
    const {
      key
    } = payload;
    return controller.command(_everCangjie.Commands.removeNodeByKey, key);
  } // 复制


  if (type === _actions.VOTE_COPY) {
    const {
      key
    } = payload;
    const node = controller.value.document.getNode(key) ?? undefined;

    if (node) {
      const copyNode = removeVoteId(node);
      const rst = controller.query('copyNodes', copyNode);

      if (rst instanceof Promise) {
        rst.catch(e => console.error('copy error', e));
      }
    }
  } // 剪切


  if (type === _actions.VOTE_CUT) {
    const {
      key
    } = payload;
    const node = controller.value.document.getNode(key) ?? undefined;

    if (node) {
      const copyNode = removeVoteId(node);
      const rst = controller.query('copyNodes', copyNode);

      if (rst instanceof Promise) {
        rst.catch(e => console.error('copy error', e));
      }

      return controller.command(_everCangjie.Commands.removeNodeByKey, key);
    }
  } // 投票


  if (type === _actions.VOTE_SUBMIT) {
    if (!submitVote) {
      console.warn('Missing `submitVote`');
      return;
    }

    const {
      node,
      setData,
      ...rest
    } = payload;
    submitVote(rest).then(data => {
      if (data.optionInfoList) {
        data.optionInfoList = (0, _lodash.orderBy)(data.optionInfoList, 'pos');
        setData(data);
        const {
          readOnly
        } = controller;
        !readOnly && controller.withoutSaving(() => controller.command(_everCangjie.Commands.setNodeByKey, node.key, {
          type: node.type,
          data: { ...node.data,
            metadata: data
          }
        }));
      } else {
        setData(state => {
          return { ...state,
            hasEnded: true
          };
        });
      }
    });
    return controller.command(_setCardInjection.default, node, {});
  } // 取消投票


  if (type === _actions.VOTE_CANCEL_VOTING) {
    const {
      node
    } = payload;
    return controller.command(_setCardInjection.default, node, {});
  }

  return next();
};

var _default = createOnAction;
exports.default = _default;
//# sourceMappingURL=createOnAction.js.map