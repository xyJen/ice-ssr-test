{"version":3,"sources":["../../../src/utils/types.ts"],"names":["EnumVoteType","EnumSceneCode","EnumModifyType"],"mappings":";;;;;;AAkBA;IAkBYA,Y;;;WAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;AAAAA,EAAAA,Y,CAAAA,Y;GAAAA,Y,4BAAAA,Y;;IAKAC,a;;;WAAAA,a;AAAAA,EAAAA,a;GAAAA,a,6BAAAA,a;;IAIAC,c;;;WAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,8BAAAA,c","sourcesContent":["interface VoteCardInjectionType {\n  isFirstLoaded?: boolean;// 首次是否已完成加载\n  isLoading?: boolean;// 首次是否正在加载\n  injectionMetadata?: VoteCardMetadataType;// 最新数据，首次同步完不会主动更新。\n}\n\nexport interface VoteCardDataType extends VoteCardInjectionType {\n  cardType: string;\n  height?: number;\n  spacing?: {\n    before?: number;\n    after?: number;\n  };\n  data: {\n    metadata: VoteCardMetadataType;\n  };\n}\n\n// 接受者列表\nexport interface IUser {\n  uid: number | string;\n  name?: string;\n  /** 头像，需要经过处理 */\n  avatarMediaId?: string;\n}\n\nexport type IOptions = {\n  id: string;\n  content: string;\n  users: number;\n  pos: number;\n};\n\nexport interface VoteCardMetadataType extends IVoteData {\n}\n\nexport enum EnumVoteType {\n  RADIO,\n  CHECKBOX,\n}\n\nexport enum EnumSceneCode {\n  doc = 'DOC',\n}\n\nexport enum EnumModifyType {\n  ADD = 'ADD',\n  DELETE = 'DELETE',\n  MODIFY = 'MODIFY',\n  MOVE = 'MOVE',\n}\nexport interface IOptionInfo {\n  /** 选项ID */\n  optionId?: number;\n  /** 选项内容 */\n  content: string;\n  /* 该项有多少人投票 */\n  optionTicket: number;\n  /** 该用户对该项的投票情况 */\n  userOptionTicket: number;\n  /** 位置信息 */\n  pos: number;\n}\n\nexport interface IModifyOptionInfo {\n  /** 选项ID */\n  optionId?: number;\n  /** 选项内容 */\n  content?: string;\n  /** 位置信息 */\n  pos?: number;\n  /** 修改类型 */\n  operationType?: EnumModifyType;\n}\n\nexport interface IVoteData {\n  /** 投票ID */\n  voteId?: string;\n  /** 创建者ID */\n  creatorId: number;\n  /** 创建者昵称 */\n  creatorNick: string;\n  /**\n   * 投票类型\n   * 0 单选\n   * 1 多选\n   */\n  voteType: EnumVoteType;\n  /** 标题 */\n  title: string;\n  /** 是否投票前显示结果 */\n  showTicketBeforeVoting: boolean;\n  /** 截止时间 */\n  endTime: number;\n  /** 是否截止 */\n  hasEnded: boolean;\n  /** 投票场景，目前文字为 DOC */\n  sceneCode: EnumSceneCode;\n  /** 多少人投票 */\n  participateUserCount: number;\n  /** 总计多少票 */\n  totalVoteCount: number;\n  optionInfoList: IOptionInfo[];\n  /** 网络失败 */\n  isServiceError?: boolean;\n  serviceErrorMsg?: string;\n  /** 加载中 */\n  loading?: boolean;\n}\n\nexport type IAddVoteReq = Omit<IVoteData, 'voteId'>;\n\nexport type VotePluginConfig = {\n  locale?: {\n    /** 添加选项 */\n    add: string;\n    /** 删除选项 */\n    remove: string;\n    /** 多选 */\n    checkbox: string;\n    /** 单选 */\n    radio: string;\n    /** 编辑 */\n    edit: string;\n    /** 保存 */\n    save: string;\n    /** 取消 */\n    cancel: string;\n    /** 截止日期 */\n    deadline: string;\n    /** 未设置截止日期 */\n    noDeadline: string;\n    /** 已截止 */\n    expired: string;\n    /** 内容占位符 */\n    optionPlaceholder: string;\n    /** 标题占位符 */\n    titlePlaceholder: string;\n    /** 重新投票 */\n    reVote: string;\n    /** 总计多少人投票 */\n    total: string;\n    /** 每项多少票 */\n    unit: string;\n    /** 投票操作 */\n    submit: string;\n    /** 创建 */\n    creator: string;\n    /** 何时显示投票结果 */\n    resultShow: string;\n    /** 始终显示 */\n    always: string;\n    /** 投票后显示 */\n    afterVote: string;\n  };\n  isMobile?: boolean;\n  payload?: any;\n  createVote: (data: IAddVoteReq) => Promise<IVoteData>;\n  getVote: (\n    id: number,\n    setResult: (result: IVoteData) => void,\n  ) => Promise<IVoteData>;\n  submitVote: (payload: { userId: string; optionId: string; voteId: string }) => Promise<IVoteData>;\n  modifyVote: (link?: string) => Promise<IVoteData>;\n  onSocketMsg: (updateFunc: () => void) => Function;\n  isGrayEnable?: boolean;\n  isPublish?: boolean;\n};\n"],"file":"types.js"}