"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _immer = _interopRequireDefault(require("immer"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var _weIcon = require("@ali/we-icon");

var _weDesign = require("@ali/we-design");

var _weDesignNext = require("@ali/we-design-next");

var _types = require("../types");

var _actions = require("../actions");

var _styled = require("./styled");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  Option
} = _weDesign.Select;
const MAX_OPTIONS_LENGTH = 50;

var _ref = /*#__PURE__*/_createElement(_styled.Separator, null);

var _ref2 = /*#__PURE__*/_createElement(_weIcon.DragallNormal, null);

var _ref3 = /*#__PURE__*/_createElement(_weIcon.ToolbarAddNormal, null);

var _ref4 = /*#__PURE__*/_createElement(_weIcon.SelectArrowDownNormalNormal, null);

const Edit = /*#__PURE__*/_react.default.memo(props => {
  const {
    controller,
    node,
    locale,
    isSelected,
    data,
    setData
  } = props;
  const titleRef = (0, _react.useRef)(null);
  const optionRef = (0, _react.useRef)(null);
  const modifyData = (0, _react.useRef)({
    voteId: data.voteId,
    optionInfoList: []
  });
  const modifyList = (0, _react.useRef)([]);
  const optionHeightRef = (0, _react.useRef)(0);
  const draggingObj = (0, _react.useRef)(); // @ts-ignore

  const [form, setForm] = (0, _react.useState)(data);
  (0, _react.useEffect)(() => {// isSelected && titleRef.current?.focus();
  }, [isSelected]);
  (0, _react.useEffect)(() => {
    setForm(state => {
      return (0, _immer.default)(state, draft => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        draft = data;
      });
    });
  }, [data]);
  const options = (0, _react.useMemo)(() => {
    return (0, _lodash.orderBy)(form.optionInfoList, 'pos');
  }, [form]);
  const handleCancel = (0, _react.useCallback)(() => {
    controller.run('onAction', (0, _actions.cancelEditing)(node, data));
  }, []);
  const collectModifyData = (0, _react.useCallback)(realData => {
    if (!realData.voteId) return; // title, voteType, endTime, showTicketBeforeVoting 变化

    modifyList.current.forEach(item => {
      if (realData[item] !== form[item]) {
        modifyData.current[item] = form[item];
      }
    });
    const addOptions = form.optionInfoList.filter(item => !item.optionId && item.content);
    modifyData.current.optionInfoList = [...(modifyData.current.optionInfoList ?? []), ...addOptions.map(item => ({ ...item,
      operationType: _types.EnumModifyType.ADD
    }))];
  }, [form]); // 内容修改结束

  const handleBlurContent = (0, _react.useCallback)((index, e) => {
    e.persist();
    const target = options[index];
    collectModifyKey('optionInfo', target.optionId, _types.EnumModifyType.MODIFY, e.target.value);
  }, [options]); // 内容修改

  const handleContentChange = (0, _react.useCallback)((index, e) => {
    e.persist();
    setForm(state => {
      return (0, _immer.default)(state, draft => {
        draft.optionInfoList[index].content = e.target?.value;
      });
    });
  }, [options]); // 收集修改内容的 key

  const collectModifyKey = (0, _react.useCallback)((key, id, type, content) => {
    // 如果是新增投票，不用收集差异数据
    if (!data.voteId) return;

    if (key === 'optionInfo') {
      if (!id) return;

      if (type === _types.EnumModifyType.DELETE) {
        modifyData.current.optionInfoList?.push({
          optionId: id,
          operationType: _types.EnumModifyType.DELETE
        });
      } else if (type === _types.EnumModifyType.MODIFY) {
        content ? modifyData.current.optionInfoList?.push({
          optionId: id,
          operationType: _types.EnumModifyType.MODIFY,
          content: content
        }) : modifyData.current.optionInfoList?.push({
          optionId: id,
          operationType: _types.EnumModifyType.DELETE
        });
      } else if (type === _types.EnumModifyType.MOVE) {
        modifyData.current.optionInfoList?.push({
          optionId: id,
          operationType: _types.EnumModifyType.MOVE,
          pos: content
        });
      }

      return;
    }

    if (!modifyList.current.includes(key)) {
      modifyList.current.push(key);
    }
  }, [data]); // 标题修改

  const handleTitleChange = (0, _react.useCallback)(e => {
    e.persist();
    collectModifyKey('title');
    setForm(state => {
      return (0, _immer.default)(state, draft => {
        draft.title = e.target?.value;
      });
    });
  }, []); // 添加

  const handleAdd = (0, _react.useCallback)(() => {
    if (form.optionInfoList.length >= MAX_OPTIONS_LENGTH) {
      return;
    }

    setForm(state => {
      return (0, _immer.default)(state, draft => {
        draft.optionInfoList = [...state.optionInfoList, {
          content: '',
          pos: state.optionInfoList[state.optionInfoList.length - 1].pos + 1,
          userOptionTicket: 0,
          optionTicket: 0
        }];
      });
    });
  }, [form]); // 删除

  const handleRemove = (0, _react.useCallback)(index => {
    const target = options[index];
    collectModifyKey('optionInfo', target.optionId, _types.EnumModifyType.DELETE);
    setForm(state => {
      return (0, _immer.default)(state, draft => {
        draft.optionInfoList = state.optionInfoList.filter((_, i) => index !== i);
      });
    });
  }, [form]);
  const handleSave = (0, _react.useCallback)(async () => {
    collectModifyData(data);
    controller.run('onAction', (0, _actions.voteSave)({
      node,
      data: data.voteId ? modifyData.current : { ...form,
        optionInfoList: form.optionInfoList.filter(({
          content
        }) => content)
      },
      setData
    }));
  }, [node, form, data.voteId]);
  const handleDragStart = (0, _react.useCallback)((e, index) => {
    const dragging = e.target;
    draggingObj.current = {
      index,
      rect: dragging.getBoundingClientRect(),
      offset: 0
    };
  }, []);
  /** 计算 options 的单位高度 */

  (0, _react.useEffect)(() => {
    if (!optionRef.current) return;
    const optionsRect = optionRef.current.getBoundingClientRect();
    optionHeightRef.current = optionsRect.height / form.optionInfoList.length;
  }, [form.optionInfoList]);
  const handleDragOver = (0, _react.useCallback)(e => {
    if (!draggingObj.current) return;
    const target = e.target;
    const targetRect = target.getBoundingClientRect();
    draggingObj.current.offset = targetRect.top - draggingObj.current.rect.top;
  }, []);
  const handleClickShowTicket = (0, _react.useCallback)(() => {
    collectModifyKey('showTicketBeforeVoting');
    setForm(state => {
      return (0, _immer.default)(state, draft => {
        draft.showTicketBeforeVoting = !state.showTicketBeforeVoting;
      });
    });
  }, []);
  const handleChangeEndTime = (0, _react.useCallback)(e => {
    collectModifyKey('endTime');
    setForm(state => {
      return (0, _immer.default)(state, draft => {
        draft.endTime = (0, _dayjs.default)(e).valueOf();
      });
    });
  }, []);
  const handleVoteTypeChange = (0, _react.useCallback)(e => {
    collectModifyKey('voteType');
    setForm(state => {
      return (0, _immer.default)(state, draft => {
        draft.voteType = Number(e);
      });
    });
  }, []); // 拖拽后排序

  const handleDragEnd = (0, _react.useCallback)(() => {
    if (!draggingObj.current) return;
    const {
      index,
      offset
    } = draggingObj.current;
    const finallyIndex = index + Math.floor(offset / optionHeightRef.current);
    const targetIndex = Math.max(0, Math.min(finallyIndex, options.length - 1)); // 位置未发生变化

    if (targetIndex === index) return;
    setForm(state => {
      return (0, _immer.default)(state, draft => {
        const temp = (0, _lodash.orderBy)(state.optionInfoList, 'pos').map((item, i) => {
          if (i !== index) return item;
          let pos = item.pos;

          if (targetIndex === 0) {
            // 拖拽到第一位
            pos = state.optionInfoList[0].pos / 2;
          } else if (targetIndex === state.optionInfoList.length - 1) {
            // 拖拽到最后
            pos = state.optionInfoList[state.optionInfoList.length - 1].pos + 1;
          } else {
            // 拖拽到中间位置
            pos = (state.optionInfoList[targetIndex].pos + state.optionInfoList[targetIndex - 1].pos) / 2;
          }

          collectModifyKey('optionInfo', item.optionId, _types.EnumModifyType.MOVE, pos);
          return { ...item,
            pos
          };
        });
        draft.optionInfoList = [...(0, _lodash.orderBy)(temp, 'pos')];
      });
    });
  }, [options]);
  const saveDisable = (0, _react.useMemo)(() => {
    // title 不能为空
    if (!form.title) return true;
    if (form.optionInfoList.filter(item => item.content).length < 2) return true;
    return false;
  }, [form]);
  const currentDate = (0, _dayjs.default)();
  const disabledDate = (0, _react.useCallback)(date => {
    if (!date) {
      return false;
    }

    return date.valueOf() <= currentDate.add(-1, 'day').valueOf();
  }, []);
  return /*#__PURE__*/_createElement(_styled.ContainerWrapper, {
    isSelected: isSelected,
    "data-cangjie-not-editable": true,
    "data-role": "vote",
    "data-testid": "card-vote-container-edit"
  }, /*#__PURE__*/_createElement(_styled.ContainerEditWrapper, null, /*#__PURE__*/_createElement("div", {
    className: "editing-header"
  }, /*#__PURE__*/_createElement(_styled.InputPrefixWrapper, null, /*#__PURE__*/_createElement(_weDesign.Select, {
    disabled: data.totalVoteCount > 0,
    style: {
      width: '60px'
    },
    value: String(form.voteType),
    onChange: handleVoteTypeChange,
    testid: "test",
    styleType: "toolbar"
  }, /*#__PURE__*/_createElement(Option, {
    key: "radio",
    value: String(_types.EnumVoteType.RADIO)
  }, locale?.radio), /*#__PURE__*/_createElement(Option, {
    key: "checkbox",
    value: String(_types.EnumVoteType.CHECKBOX)
  }, locale?.checkbox)), _ref), /*#__PURE__*/_createElement(_styled.InputTitleWrapper, {
    "data-testid": "card-vote-edit-title",
    ref: titleRef,
    type: "text",
    onChange: handleTitleChange,
    value: form.title,
    maxLength: 100,
    placeholder: locale?.titlePlaceholder
  })), /*#__PURE__*/_createElement("div", {
    className: "editing-options",
    "data-testid": "card-vote-edit-options",
    ref: optionRef
  }, options.map((item, index) => /*#__PURE__*/_createElement("div", {
    key: item.optionId || index,
    draggable: form.optionInfoList.length > 1,
    onDragEnd: handleDragEnd,
    onDragOver: handleDragOver,
    onDragStart: e => handleDragStart(e, index)
  }, /*#__PURE__*/_createElement("span", {
    className: (0, _classnames.default)({
      'drag-icon': form.optionInfoList.length > 1
    })
  }, _ref2), /*#__PURE__*/_createElement(_styled.InputContentWrapper, {
    onDragStart: e => {
      e.stopPropagation();
      e.preventDefault();
    },
    draggable: !_everCangjie.environment.IS_SAFARI,
    type: "text",
    value: item.content,
    maxLength: 100,
    onChange: e => handleContentChange(index, e),
    onBlur: e => handleBlurContent(index, e),
    placeholder: `${locale?.optionPlaceholder} ${index + 1}`
  }), /*#__PURE__*/_createElement(_styled.InputSuffixWrapper, null, options.length > 2 && /*#__PURE__*/_createElement(_weIcon.ToolbarDeleteNormal, {
    onClick: () => handleRemove(index)
  }))))), /*#__PURE__*/_createElement("div", {
    className: (0, _classnames.default)({
      'editing-add': true,
      disabled: options.length >= MAX_OPTIONS_LENGTH
    }),
    onClick: handleAdd
  }, _ref3, locale?.add), /*#__PURE__*/_createElement("div", {
    className: "editing-datepicker"
  }, /*#__PURE__*/_createElement(_weDesign.DatePicker, {
    showTime: true,
    disabledDate: disabledDate,
    renderTrigger: v => {
      return /*#__PURE__*/_createElement(_styled.DatePickerWrapper, null, locale?.deadline, /*#__PURE__*/_createElement("span", null, v ? v.format('YYYY-MM-DD HH:mm:ss') : locale?.noDeadline), _ref4);
    },
    defaultValue: (0, _dayjs.default)(form.endTime),
    onChange: handleChangeEndTime,
    style: {
      width: 280
    },
    testid: "DatePicker",
    locale: "ja",
    allowClear: true
  })), /*#__PURE__*/_createElement("div", {
    className: "editing-footer"
  }, /*#__PURE__*/_createElement("span", null, locale?.resultShow), [locale?.afterVote, locale?.always].map((item, index) => /*#__PURE__*/_createElement("div", {
    onClick: handleClickShowTicket
  }, /*#__PURE__*/_createElement("span", {
    className: (0, _classnames.default)({
      checked: form.showTicketBeforeVoting === Boolean(index)
    })
  }), item)), /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(_weDesignNext.Button, {
    onClick: handleCancel
  }, locale?.cancel), /*#__PURE__*/_createElement(_weDesignNext.Button, {
    "data-role": "create",
    disabled: saveDisable,
    type: "primary",
    onClick: handleSave
  }, locale?.save)))));
});

var _default = Edit;
exports.default = _default;
//# sourceMappingURL=edit.js.map