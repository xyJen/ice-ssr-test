"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _immer = _interopRequireDefault(require("immer"));

var _weIcon = require("@ali/we-icon");

var _voting = _interopRequireDefault(require("./voting"));

var _result = _interopRequireDefault(require("./result"));

var _edit = _interopRequireDefault(require("./edit"));

var _actions = require("../actions");

const _createElement = /*#__PURE__*/_react.default.createElement;
const styleCard = {
  padding: '20px',
  minHeight: '140px'
};

var _ref = /*#__PURE__*/_createElement(_weDesign.SpinCard, {
  style: styleCard,
  size: "medium"
});

var _ref2 = /*#__PURE__*/_createElement(_weIcon.VoteNormal, null);

const Container = props => {
  const {
    locale,
    controller,
    node,
    isSelected,
    getVote,
    onSocketMsg,
    isPublish,
    readOnly
  } = props;
  const [data, setData] = (0, _react.useState)(node.data.metadata);
  const isEditStatus = controller.query('isVoteCardEditingStatus', {
    node
  });
  const isNewVote = (0, _react.useMemo)(() => !node.data.metadata.voteId, [node]);
  const isUserUnTicketed = (0, _react.useMemo)(() => data.optionInfoList?.filter(({
    userOptionTicket
  }) => userOptionTicket !== 0).length !== 0, [data]);
  const updateVoteData = (0, _react.useCallback)(payload => {
    if (!getVote) {
      console.warn('Missing `getVote`');
      return;
    }

    const voteId = node.data.metadata.voteId;

    if (!data.isServiceError) {
      controller.run('onAction', (0, _actions.voteSaveCP)(node.key, data));
    }

    if (!payload) {
      setData(state => {
        return (0, _immer.default)(state, draft => {
          draft.loading = true;
        });
      });
      getVote(voteId, setData);
      return;
    }

    if (isEditStatus || isNewVote) return;
    if (payload.payload.voteId !== voteId) return; // 协同时，直接更新数据，不需要 loading，避免闪动
    // setData((state) => {
    //   return produce(state, draft => {
    //     draft.loading = true;
    //   });
    // });

    getVote(voteId, setData);
  }, [node, isEditStatus, isNewVote]);
  (0, _react.useEffect)(() => {
    // 如果是新创建的投票，返回默认数据
    if (isNewVote) {
      setData(node.data.metadata);
      return;
    }

    if (getVote) {
      try {
        updateVoteData();
      } catch (err) {
        // 如果数据请求失败，取 cp 中的数据，在公开发布场景下适用
        setData(node.data.metadata);
      }
    }
  }, [isNewVote, controller]);
  (0, _react.useEffect)(() => {
    const remove = onSocketMsg && onSocketMsg(updateVoteData)();
    return () => {
      remove && remove();
    };
  }, [onSocketMsg]);

  if (data.loading) {
    return _ref;
  }

  if (data.isServiceError) {
    return /*#__PURE__*/_createElement(_weDesign.SpinErrorCard, {
      style: styleCard,
      icon: _ref2,
      title: locale?.submit,
      highlightIcon: true,
      tip: data.serviceErrorMsg,
      role: "spin-card",
      onRefresh: () => {
        updateVoteData();
      }
    });
  } // 公开发布等只读场景


  if (isPublish) {
    // 投票结果页
    return /*#__PURE__*/_createElement(_result.default, {
      data: data,
      node: node,
      locale: locale,
      controller: controller,
      isSelected: isSelected,
      readOnly: readOnly
    });
  } // 编辑状态


  if (isEditStatus || isNewVote) {
    return /*#__PURE__*/_createElement(_edit.default, {
      data: data,
      node: node,
      controller: controller,
      locale: locale,
      setData: setData,
      isSelected: isSelected
    });
  } // 点击重新发起投票，此时是一个内存态


  const isVotingStatus = controller.query('isVoteCardVotingStatus', {
    node
  });

  if (isVotingStatus || !data.hasEnded && ( // 始终可见，无人投
  data.totalVoteCount === 0 && data.showTicketBeforeVoting || // 投票后可见，我未投
  !data.showTicketBeforeVoting && !isUserUnTicketed)) {
    // 投票状态
    return /*#__PURE__*/_createElement(_voting.default, {
      data: data,
      node: node,
      locale: locale,
      controller: controller,
      isSelected: isSelected,
      setData: setData,
      readOnly: readOnly
    });
  } // 投票结果页


  return /*#__PURE__*/_createElement(_result.default, {
    data: data,
    node: node,
    locale: locale,
    controller: controller,
    isSelected: isSelected,
    readOnly: readOnly
  });
};

var _default = Container;
exports.default = _default;
//# sourceMappingURL=container.js.map