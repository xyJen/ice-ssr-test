import React from 'react';
import { Block } from '@ali/4ever-cangjie';
import { IVoteData } from '../types';
export declare const VOTING_ACTIVE: unique symbol;
export declare const VOTE_EDITING: unique symbol;
export declare const VOTE_CANCEL_EDITING: unique symbol;
export declare const VOTE_CANCEL_VOTING: unique symbol;
export declare const VOTE_SAVE: unique symbol;
export declare const VOTE_DELETE: unique symbol;
export declare const VOTE_COPY: unique symbol;
export declare const VOTE_CUT: unique symbol;
export declare const VOTE_SUBMIT: unique symbol;
export declare const VOTE_MODIFY: unique symbol;
export declare const VOTE_SAVE_CP: unique symbol;
interface IVoteSubmit {
    node: Block;
    voteId: string;
    optionIds: number[];
    setData: React.Dispatch<React.SetStateAction<IVoteData>>;
}
export declare function votingActive(node: Block): {
    type: symbol;
    payload: {
        node: Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>;
    };
};
export declare function voteEditing(node: Block): {
    type: symbol;
    payload: {
        node: Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>;
    };
};
export declare function cancelEditing(node: Block, data: IVoteData): {
    type: symbol;
    payload: {
        voteId?: string | undefined;
        creatorId: number;
        creatorNick: string;
        voteType: import("../types").EnumVoteType;
        title: string;
        showTicketBeforeVoting: boolean;
        endTime: number;
        hasEnded: boolean;
        sceneCode: import("../types").EnumSceneCode;
        participateUserCount: number;
        totalVoteCount: number;
        optionInfoList: import("../types").IOptionInfo[];
        isServiceError?: boolean | undefined;
        serviceErrorMsg?: string | undefined;
        loading?: boolean | undefined;
        node: Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>;
    };
};
export declare function voteSave({ node, data, setData }: {
    node: Block;
    data: IVoteData;
    setData: React.Dispatch<React.SetStateAction<IVoteData>>;
}): {
    type: symbol;
    payload: {
        voteId?: string | undefined;
        creatorId: number;
        creatorNick: string;
        voteType: import("../types").EnumVoteType;
        title: string;
        showTicketBeforeVoting: boolean;
        endTime: number;
        hasEnded: boolean;
        sceneCode: import("../types").EnumSceneCode;
        participateUserCount: number;
        totalVoteCount: number;
        optionInfoList: import("../types").IOptionInfo[];
        isServiceError?: boolean | undefined;
        serviceErrorMsg?: string | undefined;
        loading?: boolean | undefined;
        node: Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>;
        setData: React.Dispatch<React.SetStateAction<IVoteData>>;
    };
};
export declare function voteDelete(nodeKey: string): {
    type: symbol;
    payload: {
        key: string;
    };
};
export declare function voteCopy(nodeKey: string): {
    type: symbol;
    payload: {
        key: string;
    };
};
export declare function voteCut(nodeKey: string): {
    type: symbol;
    payload: {
        key: string;
    };
};
export declare function voteSubmit(payload: IVoteSubmit): {
    type: symbol;
    payload: IVoteSubmit;
};
export declare function voteModify(nodeKey: string): {
    type: symbol;
    payload: {
        key: string;
    };
};
export declare function voteSaveCP(nodeKey: string, payload: IVoteData): {
    type: symbol;
    payload: {
        key: string;
        payload: IVoteData;
    };
};
export declare function cancelVoting(node: Block): {
    type: symbol;
    payload: {
        node: Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>;
    };
};
export {};
