interface VoteCardInjectionType {
    isFirstLoaded?: boolean;
    isLoading?: boolean;
    injectionMetadata?: VoteCardMetadataType;
}
export interface VoteCardDataType extends VoteCardInjectionType {
    cardType: string;
    height?: number;
    spacing?: {
        before?: number;
        after?: number;
    };
    data: {
        metadata: VoteCardMetadataType;
    };
}
export interface IUser {
    uid: number | string;
    name?: string;
    /** 头像，需要经过处理 */
    avatarMediaId?: string;
}
export declare type IOptions = {
    id: string;
    content: string;
    users: number;
    pos: number;
};
export interface VoteCardMetadataType extends IVoteData {
}
export declare enum EnumVoteType {
    RADIO = 0,
    CHECKBOX = 1
}
export declare enum EnumSceneCode {
    doc = "DOC"
}
export declare enum EnumModifyType {
    ADD = "ADD",
    DELETE = "DELETE",
    MODIFY = "MODIFY",
    MOVE = "MOVE"
}
export interface IOptionInfo {
    /** 选项ID */
    optionId?: number;
    /** 选项内容 */
    content: string;
    optionTicket: number;
    /** 该用户对该项的投票情况 */
    userOptionTicket: number;
    /** 位置信息 */
    pos: number;
}
export interface IModifyOptionInfo {
    /** 选项ID */
    optionId?: number;
    /** 选项内容 */
    content?: string;
    /** 位置信息 */
    pos?: number;
    /** 修改类型 */
    operationType?: EnumModifyType;
}
export interface IVoteData {
    /** 投票ID */
    voteId?: string;
    /** 创建者ID */
    creatorId: number;
    /** 创建者昵称 */
    creatorNick: string;
    /**
     * 投票类型
     * 0 单选
     * 1 多选
     */
    voteType: EnumVoteType;
    /** 标题 */
    title: string;
    /** 是否投票前显示结果 */
    showTicketBeforeVoting: boolean;
    /** 截止时间 */
    endTime: number;
    /** 是否截止 */
    hasEnded: boolean;
    /** 投票场景，目前文字为 DOC */
    sceneCode: EnumSceneCode;
    /** 多少人投票 */
    participateUserCount: number;
    /** 总计多少票 */
    totalVoteCount: number;
    optionInfoList: IOptionInfo[];
    /** 网络失败 */
    isServiceError?: boolean;
    serviceErrorMsg?: string;
    /** 加载中 */
    loading?: boolean;
}
export declare type IAddVoteReq = Omit<IVoteData, 'voteId'>;
export declare type VotePluginConfig = {
    locale?: {
        /** 添加选项 */
        add: string;
        /** 删除选项 */
        remove: string;
        /** 多选 */
        checkbox: string;
        /** 单选 */
        radio: string;
        /** 编辑 */
        edit: string;
        /** 保存 */
        save: string;
        /** 取消 */
        cancel: string;
        /** 截止日期 */
        deadline: string;
        /** 未设置截止日期 */
        noDeadline: string;
        /** 已截止 */
        expired: string;
        /** 内容占位符 */
        optionPlaceholder: string;
        /** 标题占位符 */
        titlePlaceholder: string;
        /** 重新投票 */
        reVote: string;
        /** 总计多少人投票 */
        total: string;
        /** 每项多少票 */
        unit: string;
        /** 投票操作 */
        submit: string;
        /** 创建 */
        creator: string;
        /** 何时显示投票结果 */
        resultShow: string;
        /** 始终显示 */
        always: string;
        /** 投票后显示 */
        afterVote: string;
    };
    isMobile?: boolean;
    payload?: any;
    createVote: (data: IAddVoteReq) => Promise<IVoteData>;
    getVote: (id: number, setResult: (result: IVoteData) => void) => Promise<IVoteData>;
    submitVote: (payload: {
        userId: string;
        optionId: string;
        voteId: string;
    }) => Promise<IVoteData>;
    modifyVote: (link?: string) => Promise<IVoteData>;
    onSocketMsg: (updateFunc: () => void) => Function;
    isGrayEnable?: boolean;
    isPublish?: boolean;
};
export {};
