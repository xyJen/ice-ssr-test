{"version":3,"sources":["../../../../src/utils/uitls/getReceiverWidth.ts"],"names":["TOTAL_EXTRA","AVATAR_WRAPPER_SZ","NAME_WRAPPER_PADDING","RECEIVER_WRAPPER_MARGIN","AUTO_FONT","FOURTEEN_SZ","TWELVE_SZ","getReceiverWidth","receiver","locale","type","name","typeName","ReceiverTypeEnum","toString","nameWidth","TextMeasure","measureTextWidth","typeWidth","getReceiversHeight","receivers","totalCountText","singleLineHeight","innerWidth","widths","map","w","RECEIVER_MAX_WIDTH","actualWidth","remain","forEach","moreInfoWidth","MORE_INDO_EXTRA","Math","ceil"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAQA,MAAMA,WAAW,GACfC,+BAAoBC,+BAApB,GAA2CC,kCAA3C,GAAqE,CADvE;AAGA,MAAMC,SAAS,GAAG,MAAlB;AACA,MAAMC,WAAW,GAAG,MAApB;AACA,MAAMC,SAAS,GAAG,MAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAA4BC,MAA5B,KAAoD;AAC3E,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAI,GAAG;AAAf,MAAsBH,QAA5B;AACA,QAAMI,QAAQ,GAAG,CAACH,MAAM,IAAI,EAAX,EAAeI,uBAAiBH,IAAjB,GAAwBI,QAAxB,EAAf,KAAsD,EAAvE;;AACA,QAAMC,SAAS,GAAGC,4BAAYC,gBAAZ,CAA6BN,IAA7B,EAAmCP,SAAnC,EAA8CC,WAA9C,CAAlB;;AACA,QAAMa,SAAS,GAAGF,4BAAYC,gBAAZ,CAChBL,QADgB,EAEhBR,SAFgB,EAGhBE,SAHgB,CAAlB;;AAKA,SAAON,WAAW,GAAGe,SAAd,GAA0BG,SAAjC;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAUA,MAAMC,kBAAkB,GAAG,CAAC;AAC1BC,EAAAA,SAD0B;AAE1BX,EAAAA,MAF0B;AAG1BY,EAAAA,cAH0B;AAI1BC,EAAAA,gBAJ0B;AAK1BC,EAAAA;AAL0B,CAAD,KAMQ;AACjC,QAAMC,MAAM,GAAGJ,SAAS,CAACK,GAAV,CAAejB,QAAD,IAAc;AACzC,UAAMkB,CAAC,GAAGnB,gBAAgB,CAACC,QAAD,EAAWC,MAAX,CAA1B;AACA,WAAOiB,CAAC,GAAGC,6BAAJ,GAAyBA,6BAAzB,GAA8CD,CAArD;AACD,GAHc,CAAf;AAKA,MAAIE,WAAW,GAAG,CAAlB;AACA,MAAIC,MAAM,GAAGN,UAAb;AAEAC,EAAAA,MAAM,CAACM,OAAP,CAAgBJ,CAAD,IAAO;AACpB,QAAIA,CAAJ,EAAO;AACL,UAAIG,MAAM,GAAGH,CAAT,GAAa,CAAjB,EAAoB;AAClBG,QAAAA,MAAM,IAAIH,CAAV;AACAE,QAAAA,WAAW,IAAIF,CAAf;AACD,OAHD,MAGO;AACLE,QAAAA,WAAW,IAAIC,MAAM,GAAGH,CAAxB;AACAG,QAAAA,MAAM,GAAGN,UAAU,GAAGG,CAAtB;AACD;AACF;AACF,GAVD;;AAWA,QAAMK,aAAa,GACjBf,4BAAYC,gBAAZ,CAA6BI,cAA7B,EAA6CjB,SAA7C,EAAwDC,WAAxD,IACA2B,0BAFF;;AAGA,SACEC,IAAI,CAACC,IAAL,CAAU,CAACN,WAAW,GAAGG,aAAf,IAAgCR,UAA1C,IAAwDD,gBAD1D;AAGD,CAhCD","sourcesContent":["import { TextMeasure } from '@ali/4ever-plugin-list';\nimport { ReceiverTypeEnum, IOrganizerModel } from '../type';\nimport {\n  AVATAR_WRAPPER_SZ,\n  NAME_WRAPPER_PADDING,\n  RECEIVER_WRAPPER_MARGIN,\n  MORE_INDO_EXTRA,\n  RECEIVER_MAX_WIDTH,\n} from '../constants';\n\nconst TOTAL_EXTRA =\n  AVATAR_WRAPPER_SZ + NAME_WRAPPER_PADDING + RECEIVER_WRAPPER_MARGIN + 2;\n\nconst AUTO_FONT = 'auto';\nconst FOURTEEN_SZ = '14px';\nconst TWELVE_SZ = '12px';\n\n/**\n * @param {IOrganizerModel} receiver 接收者信息\n * @param {*} locale 语言\n * @return {*}  {number} 单个接收者 UI 的实际渲染宽度\n */\nconst getReceiverWidth = (receiver: IOrganizerModel, locale: any): number => {\n  const { type, name = '' } = receiver;\n  const typeName = (locale || {})[ReceiverTypeEnum[type]?.toString()] || '';\n  const nameWidth = TextMeasure.measureTextWidth(name, AUTO_FONT, FOURTEEN_SZ);\n  const typeWidth = TextMeasure.measureTextWidth(\n    typeName,\n    AUTO_FONT,\n    TWELVE_SZ,\n  );\n  return TOTAL_EXTRA + nameWidth + typeWidth;\n};\n\n/**\n * @param {IOrganizerModel[]} receivers 所有接收者信息\n * @param {*} locale 语言(需要根据语言测量实际文字宽度)\n * @param {string} totalCountText 参会人数文字\n * @param {number} singleLineHeight 一行接收者的 UI 高度\n * @param {number} innerWidth 日程卡片容器的宽度\n * @return {*}  {number} 返回渲染出来接受者信息 UI 的实际高度\n */\n\ninterface IGetReceiversHeight {\n  receivers: IOrganizerModel[];\n  locale: any;\n  totalCountText: string;\n  singleLineHeight: number;\n  innerWidth: number;\n}\n\nconst getReceiversHeight = ({\n  receivers,\n  locale,\n  totalCountText,\n  singleLineHeight,\n  innerWidth,\n}: IGetReceiversHeight): number => {\n  const widths = receivers.map((receiver) => {\n    const w = getReceiverWidth(receiver, locale);\n    return w > RECEIVER_MAX_WIDTH ? RECEIVER_MAX_WIDTH : w;\n  });\n\n  let actualWidth = 0;\n  let remain = innerWidth;\n\n  widths.forEach((w) => {\n    if (w) {\n      if (remain - w > 0) {\n        remain -= w;\n        actualWidth += w;\n      } else {\n        actualWidth += remain + w;\n        remain = innerWidth - w;\n      }\n    }\n  });\n  const moreInfoWidth =\n    TextMeasure.measureTextWidth(totalCountText, AUTO_FONT, FOURTEEN_SZ) +\n    MORE_INDO_EXTRA;\n  return (\n    Math.ceil((actualWidth + moreInfoWidth) / innerWidth) * singleLineHeight\n  );\n};\n\nexport { getReceiverWidth, getReceiversHeight };\n"],"file":"getReceiverWidth.js"}