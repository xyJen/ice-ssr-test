import _extends from "@babel/runtime/helpers/extends";
import React, { useState, useRef, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Dropdown, LoadingNormalNormal, Tooltip } from '@ali/we-design';
import { GotoNormalNormal, RefreshNormalNormal } from '@ali/we-icon';
import preventDefaultOnClick from "../../uitls/preventDefaultOnClick";
import { ExtraButtonWrapper, ExtraWrapper, IconWrapper } from "./styled";
import { DEFAULT_ICON_STYLE } from "../../constants";
import RefreshTips from "./RefreshTips";

var _ref = /*#__PURE__*/_createElement(GotoNormalNormal, {
  testid: "goto",
  title: 'viewCalendardetails',
  style: DEFAULT_ICON_STYLE
});

function renderViewCalendardetails(jumpToCalendar, viewCalendardetails) {
  if (!jumpToCalendar) return null;
  return /*#__PURE__*/_createElement(Tooltip, {
    title: viewCalendardetails
  }, /*#__PURE__*/_createElement(IconWrapper, {
    onMouseDown: jumpToCalendar,
    onClick: preventDefaultOnClick
  }, _ref));
}

var _ref2 = /*#__PURE__*/_createElement(LoadingNormalNormal, {
  style: DEFAULT_ICON_STYLE
});

var RefreshExtra = function RefreshExtra(props) {
  var refreshCalendar = props.refreshCalendar,
      isLoading = props.isLoading,
      tipsNode = props.tipsNode;
  var iconRef = useRef(null);
  if (!refreshCalendar) return null;
  var loading = isLoading ? _ref2 : /*#__PURE__*/_createElement(RefreshIconWithTips, _extends({}, props, {
    tipsNode: tipsNode,
    container: iconRef.current
  }));
  return /*#__PURE__*/_createElement(IconWrapper, {
    ref: iconRef,
    onMouseDown: refreshCalendar,
    onTouchEnd: refreshCalendar,
    onClick: preventDefaultOnClick
  }, loading);
};

var _ref3 = /*#__PURE__*/_createElement("span", null, /*#__PURE__*/_createElement(RefreshNormalNormal, {
  testid: "refresh",
  style: DEFAULT_ICON_STYLE
}));

var _ref4 = /*#__PURE__*/_createElement("span", null, /*#__PURE__*/_createElement(RefreshNormalNormal, {
  testid: "refresh",
  style: DEFAULT_ICON_STYLE
}));

var RefreshIconWithTips = function RefreshIconWithTips(props) {
  var _props$isChangeData = props.isChangeData,
      isChangeData = _props$isChangeData === void 0 ? false : _props$isChangeData,
      refreshToast = props.refreshToast,
      refreshTips = props.refreshTips,
      container = props.container,
      tipsNode = props.tipsNode,
      disableTip = props.disableTip;

  var _useState = useState(0),
      offsetX = _useState[0],
      setOffsetX = _useState[1];

  var getContainer = useCallback(function () {
    return container || document.body;
  }, [container]);

  if (!isChangeData && !tipsNode || disableTip) {
    return /*#__PURE__*/_createElement(Tooltip, {
      title: refreshToast
    }, _ref3);
  }

  return /*#__PURE__*/_createElement(Dropdown, {
    offsetX: offsetX,
    placement: "bottom",
    visible: true,
    getContainer: getContainer,
    overlay: /*#__PURE__*/_createElement(RefreshTips, {
      offsetX: offsetX,
      refreshTips: refreshTips,
      tipsNode: tipsNode,
      onChangeOffsetX: setOffsetX
    })
  }, _ref4);
};

export var ExtraArea = function ExtraArea(props) {
  var isShanhui = props.isShanhui,
      isOnlyRefresh = props.isOnlyRefresh,
      jumpToCalendar = props.jumpToCalendar,
      refreshCalendar = props.refreshCalendar,
      viewCalendardetails = props.viewCalendardetails,
      isLoading = props.isLoading,
      isPlaceholder = props.isPlaceholder,
      refreshToast = props.refreshToast,
      isChangeData = props.isChangeData,
      refreshTips = props.refreshTips,
      tipsNode = props.tipsNode,
      createCalendarBtn = props.createCalendarBtn;

  if (isPlaceholder && createCalendarBtn) {
    return isShanhui ? /*#__PURE__*/_createElement(ExtraButtonWrapper, {
      style: {
        marginTop: 2
      }
    }, createCalendarBtn()) : /*#__PURE__*/_createElement(ExtraWrapper, null, createCalendarBtn());
  }

  return /*#__PURE__*/_createElement(ExtraWrapper, null, /*#__PURE__*/_createElement(RefreshExtra, {
    tipsNode: tipsNode,
    refreshCalendar: refreshCalendar,
    isLoading: isLoading,
    isChangeData: isChangeData,
    refreshToast: refreshToast,
    refreshTips: refreshTips,
    disableTip: isShanhui
  }), isOnlyRefresh ? null : renderViewCalendardetails(jumpToCalendar, viewCalendardetails));
};
//# sourceMappingURL=index.js.map