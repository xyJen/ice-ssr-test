import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { throttle } from 'lodash-es';
import { AddHeadNormal, ArrowRightNormal, MemberNormalNormal } from '@ali/we-design';
import { loadImg } from '@ali/4ever-utils';
import paragraphFactory from "../paragraphFactory";
import preventDefaultOnClick from "../../uitls/preventDefaultOnClick";
import { LoadingWrapper } from "../loadingWarpper";
import { ReceiverTypeEnum, CalendarType } from "../../type";
import { zhLocale } from "../../locale";
import { AddReceiverIconWrapper, AuxiliaryLoadingWrapper, AvatarWrapper, ContainerWapper, EllipsisWrapper, NameWrapper, ReceiverWrapper, SquareAvatarWrapper, SquareTextAvatarWrapper, TipContentWrapper, TipTextWrapper, TipWrapper, TotalBodyWapper, TotalIconWapper, TypeName } from "./styled";
import { DEFAULT_ICON_STYLE, RECEIVER_MARGIN } from "../../constants";
import getTextWithoutEmoji from "../../uitls/getTextWithoutEmoji";
var SQUAREAVATAR_SIZE_STYLE = {
  width: '20px',
  height: '20px'
}; // 检查是否有中文

var HAS_CHINESE_REG = RegExp("[\\u4E00-\\u9FFF]+", 'g');

var _ref = /*#__PURE__*/_createElement(TotalIconWapper, null, /*#__PURE__*/_createElement(ArrowRightNormal, null));

export var TotalWarpper = function TotalWarpper(props) {
  var text = props.text,
      isReadonly = props.isReadonly,
      jumpToCalendar = props.jumpToCalendar,
      mode = props.mode;
  var isShanhui = mode === CalendarType.SHANHUI;
  return /*#__PURE__*/_createElement(ReceiverWrapper, {
    isReadonly: isReadonly,
    onMouseDown: jumpToCalendar,
    onClick: preventDefaultOnClick,
    backgroundColor: isShanhui ? 'transparent' : '',
    textHoverColor: isShanhui ? 'rgba(49, 126, 208, 1)' : ''
  }, /*#__PURE__*/_createElement(TotalBodyWapper, {
    margin: isShanhui ? '0' : ''
  }, /*#__PURE__*/_createElement(NameWrapper, null, text), _ref));
};

var SquareAvatarImage = function SquareAvatarImage(props) {
  var url = props.url;

  var _React$useState = React.useState('loading'),
      status = _React$useState[0],
      setStatus = _React$useState[1];

  var handleLoad = useCallback(function () {
    setStatus('loaded');
  }, []);
  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(SquareAvatarWrapper, _extends({
    style: SQUAREAVATAR_SIZE_STYLE
  }, props)), status === 'loading' ? /*#__PURE__*/_createElement(AuxiliaryLoadingWrapper, {
    src: url,
    "data-type": "avatar",
    "data-status": status,
    onLoad: handleLoad,
    onError: handleLoad
  }) : null);
};

var SquareAvatar = function SquareAvatar(props) {
  var url = props.url,
      title = props.title;

  var _React$useState2 = React.useState(!!url),
      urlEnable = _React$useState2[0],
      setUrlEnable = _React$useState2[1];

  useEffect(function () {
    if (url) {
      loadImg(url).then(function () {
        setUrlEnable(true);
      })["catch"](function () {
        setUrlEnable(false);
      });
    }
  }, [url]);

  if (url && urlEnable) {
    return /*#__PURE__*/_createElement(SquareAvatarImage, {
      url: url,
      title: title
    });
  }

  var titles = Array.from(props.title || '');
  return /*#__PURE__*/_createElement(SquareTextAvatarWrapper, null, /*#__PURE__*/_createElement("span", null, titles[titles.length - 1]));
};

var _ref2 = /*#__PURE__*/_createElement(AddReceiverIconWrapper, null, /*#__PURE__*/_createElement(AddHeadNormal, null));

export var ReceiverComponent = /*#__PURE__*/React.memo(function (props) {
  var _ReceiverTypeEnum$typ, _ReceiverTypeEnum$typ2;

  var isReadonly = props.isReadonly,
      isReceiverPlaceholder = props.isReceiverPlaceholder,
      locale = props.locale,
      type = props.type,
      _props$name = props.name,
      name = _props$name === void 0 ? '' : _props$name,
      uid = props.uid,
      avatarMediaId = props.avatarMediaId,
      _props$organizer = props.organizer,
      organizer = _props$organizer === void 0 ? [] : _props$organizer,
      openProfile = props.openProfile,
      mode = props.mode;
  var typeName = (locale || {})[(_ReceiverTypeEnum$typ = ReceiverTypeEnum[type]) == null ? void 0 : _ReceiverTypeEnum$typ.toString()] || ''; // TODO：解决国际化tips宽度不一致问题，tips的宽度按照中文的字符数来计算

  var chineseTypeName = (zhLocale || {})[(_ReceiverTypeEnum$typ2 = ReceiverTypeEnum[type]) == null ? void 0 : _ReceiverTypeEnum$typ2.toString()] || '';

  if (organizer.some(function (org) {
    return org.uid === uid;
  }) && locale) {
    typeName = locale.organizer;
    chineseTypeName = zhLocale.organizer;
  } // 防止双击重复弹出profile问题


  var openTargetProfile = useCallback(throttle(function () {
    if (!openProfile) return;
    openProfile(uid);
  }, 350), [uid, openProfile]);
  var onMouseDown = useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    openTargetProfile();
  }, [openTargetProfile]);
  var withoutEmoji = getTextWithoutEmoji(name); // 如果该用户没有头像信息，这里是移除姓取名 与端上保持一致

  var showName = withoutEmoji.substr(1) || withoutEmoji; // 中文不限制宽度，非中文限制 tip 宽度

  var tipWidth = !typeName || HAS_CHINESE_REG.test(typeName) ? 'auto' : chineseTypeName.length * 1.1 + "em";
  var avatarNode = isReceiverPlaceholder ? _ref2 : /*#__PURE__*/_createElement(SquareAvatar, {
    url: avatarMediaId,
    title: showName
  });

  if (mode === CalendarType.SHANHUI) {
    return /*#__PURE__*/_createElement(ReceiverWrapper, {
      "data-testid": "calendar-receiver",
      isReadonly: isReadonly,
      onMouseDown: onMouseDown,
      onClick: preventDefaultOnClick,
      backgroundColor: "transparent",
      textHoverColor: "rgba(49, 126, 208, 1)",
      style: {
        marginRight: 6
      }
    }, !isReceiverPlaceholder && /*#__PURE__*/_createElement(AvatarWrapper, null, avatarNode), /*#__PURE__*/_createElement(NameWrapper, {
      style: {
        paddingLeft: isReceiverPlaceholder ? 0 : 4
      }
    }, /*#__PURE__*/_createElement(EllipsisWrapper, null, name, !isReceiverPlaceholder && typeName ? /*#__PURE__*/_createElement(TypeName, null, "(", typeName, ")") : null)));
  }

  return /*#__PURE__*/_createElement(ReceiverWrapper, {
    "data-testid": "calendar-receiver",
    isReadonly: isReadonly,
    onMouseDown: onMouseDown,
    onClick: preventDefaultOnClick
  }, /*#__PURE__*/_createElement(AvatarWrapper, null, avatarNode), /*#__PURE__*/_createElement(NameWrapper, null, /*#__PURE__*/_createElement(EllipsisWrapper, null, name)), /*#__PURE__*/_createElement(TipWrapper, null, typeName ? /*#__PURE__*/_createElement(TipContentWrapper, null, /*#__PURE__*/_createElement(TipTextWrapper, {
    style: {
      width: tipWidth
    }
  }, typeName)) : null));
});

var _ref4 = /*#__PURE__*/_createElement(LoadingWrapper, {
  widthRange: "98%"
});

export var ReceiversParagraph = /*#__PURE__*/React.memo(function (props) {
  var metadata = props.metadata,
      openProfile = props.openProfile,
      locale = props.locale,
      isLoading = props.isLoading,
      isReadonly = props.isReadonly,
      jumpToCalendar = props.jumpToCalendar;

  var _ref3 = metadata || {},
      _ref3$topReceivers = _ref3.topReceivers,
      topReceivers = _ref3$topReceivers === void 0 ? [] : _ref3$topReceivers,
      organizer = _ref3.organizer,
      totalCount = _ref3.totalCount,
      mode = _ref3.mode;

  var Paragraph = paragraphFactory( /*#__PURE__*/_createElement(MemberNormalNormal, {
    style: _extends({}, DEFAULT_ICON_STYLE, {
      marginTop: '3px'
    })
  }), {
    marginBottom: "-" + RECEIVER_MARGIN + "px"
  });
  var totleCountText = ((locale == null ? void 0 : locale.receiverCount) || '').replace('{count}', String(totalCount));
  var totleNode = totalCount && totalCount > topReceivers.length ? /*#__PURE__*/_createElement(TotalWarpper, {
    text: totleCountText,
    isReadonly: isReadonly,
    jumpToCalendar: jumpToCalendar,
    mode: mode
  }) : null;

  if (isLoading && topReceivers.length === 0) {
    return /*#__PURE__*/_createElement(Paragraph, null, _ref4);
  }

  return /*#__PURE__*/_createElement(Paragraph, null, /*#__PURE__*/_createElement(ContainerWapper, null, topReceivers.map(function (rec) {
    return /*#__PURE__*/_createElement(ReceiverComponent, _extends({
      key: rec.uid || rec.name
    }, rec, {
      isReadonly: isReadonly,
      openProfile: openProfile,
      locale: locale,
      organizer: organizer,
      mode: mode
    }));
  }), totleNode));
});
//# sourceMappingURL=index.js.map