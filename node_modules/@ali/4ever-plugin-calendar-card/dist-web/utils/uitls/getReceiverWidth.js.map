{"version":3,"sources":["../../../../src/utils/uitls/getReceiverWidth.ts"],"names":["TextMeasure","ReceiverTypeEnum","AVATAR_WRAPPER_SZ","NAME_WRAPPER_PADDING","RECEIVER_WRAPPER_MARGIN","MORE_INDO_EXTRA","RECEIVER_MAX_WIDTH","TOTAL_EXTRA","AUTO_FONT","FOURTEEN_SZ","TWELVE_SZ","getReceiverWidth","receiver","locale","type","name","typeName","toString","nameWidth","measureTextWidth","typeWidth","getReceiversHeight","receivers","totalCountText","singleLineHeight","innerWidth","widths","map","w","actualWidth","remain","forEach","moreInfoWidth","Math","ceil"],"mappings":"AAAA,SAASA,WAAT,QAA4B,wBAA5B;AACA,SAASC,gBAAT;AACA,SACEC,iBADF,EAEEC,oBAFF,EAGEC,uBAHF,EAIEC,eAJF,EAKEC,kBALF;AAQA,IAAMC,WAAW,GACfL,iBAAiB,GAAGC,oBAApB,GAA2CC,uBAA3C,GAAqE,CADvE;AAGA,IAAMI,SAAS,GAAG,MAAlB;AACA,IAAMC,WAAW,GAAG,MAApB;AACA,IAAMC,SAAS,GAAG,MAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD,EAA4BC,MAA5B,EAAoD;AAAA;;AAAA,MACnEC,IADmE,GAC/CF,QAD+C,CACnEE,IADmE;AAAA,uBAC/CF,QAD+C,CAC7DG,IAD6D;AAAA,MAC7DA,IAD6D,+BACtD,EADsD;AAE3E,MAAMC,QAAQ,GAAG,CAACH,MAAM,IAAI,EAAX,2BAAeZ,gBAAgB,CAACa,IAAD,CAA/B,qBAAe,sBAAwBG,QAAxB,EAAf,KAAsD,EAAvE;AACA,MAAMC,SAAS,GAAGlB,WAAW,CAACmB,gBAAZ,CAA6BJ,IAA7B,EAAmCP,SAAnC,EAA8CC,WAA9C,CAAlB;AACA,MAAMW,SAAS,GAAGpB,WAAW,CAACmB,gBAAZ,CAChBH,QADgB,EAEhBR,SAFgB,EAGhBE,SAHgB,CAAlB;AAKA,SAAOH,WAAW,GAAGW,SAAd,GAA0BE,SAAjC;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAUA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAMQ;AAAA,MALjCC,SAKiC,QALjCA,SAKiC;AAAA,MAJjCT,MAIiC,QAJjCA,MAIiC;AAAA,MAHjCU,cAGiC,QAHjCA,cAGiC;AAAA,MAFjCC,gBAEiC,QAFjCA,gBAEiC;AAAA,MADjCC,UACiC,QADjCA,UACiC;AACjC,MAAMC,MAAM,GAAGJ,SAAS,CAACK,GAAV,CAAc,UAACf,QAAD,EAAc;AACzC,QAAMgB,CAAC,GAAGjB,gBAAgB,CAACC,QAAD,EAAWC,MAAX,CAA1B;AACA,WAAOe,CAAC,GAAGtB,kBAAJ,GAAyBA,kBAAzB,GAA8CsB,CAArD;AACD,GAHc,CAAf;AAKA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,MAAM,GAAGL,UAAb;AAEAC,EAAAA,MAAM,CAACK,OAAP,CAAe,UAACH,CAAD,EAAO;AACpB,QAAIA,CAAJ,EAAO;AACL,UAAIE,MAAM,GAAGF,CAAT,GAAa,CAAjB,EAAoB;AAClBE,QAAAA,MAAM,IAAIF,CAAV;AACAC,QAAAA,WAAW,IAAID,CAAf;AACD,OAHD,MAGO;AACLC,QAAAA,WAAW,IAAIC,MAAM,GAAGF,CAAxB;AACAE,QAAAA,MAAM,GAAGL,UAAU,GAAGG,CAAtB;AACD;AACF;AACF,GAVD;AAWA,MAAMI,aAAa,GACjBhC,WAAW,CAACmB,gBAAZ,CAA6BI,cAA7B,EAA6Cf,SAA7C,EAAwDC,WAAxD,IACAJ,eAFF;AAGA,SACE4B,IAAI,CAACC,IAAL,CAAU,CAACL,WAAW,GAAGG,aAAf,IAAgCP,UAA1C,IAAwDD,gBAD1D;AAGD,CAhCD;;AAkCA,SAASb,gBAAT,EAA2BU,kBAA3B","sourcesContent":["import { TextMeasure } from '@ali/4ever-plugin-list';\nimport { ReceiverTypeEnum, IOrganizerModel } from '../type';\nimport {\n  AVATAR_WRAPPER_SZ,\n  NAME_WRAPPER_PADDING,\n  RECEIVER_WRAPPER_MARGIN,\n  MORE_INDO_EXTRA,\n  RECEIVER_MAX_WIDTH,\n} from '../constants';\n\nconst TOTAL_EXTRA =\n  AVATAR_WRAPPER_SZ + NAME_WRAPPER_PADDING + RECEIVER_WRAPPER_MARGIN + 2;\n\nconst AUTO_FONT = 'auto';\nconst FOURTEEN_SZ = '14px';\nconst TWELVE_SZ = '12px';\n\n/**\n * @param {IOrganizerModel} receiver 接收者信息\n * @param {*} locale 语言\n * @return {*}  {number} 单个接收者 UI 的实际渲染宽度\n */\nconst getReceiverWidth = (receiver: IOrganizerModel, locale: any): number => {\n  const { type, name = '' } = receiver;\n  const typeName = (locale || {})[ReceiverTypeEnum[type]?.toString()] || '';\n  const nameWidth = TextMeasure.measureTextWidth(name, AUTO_FONT, FOURTEEN_SZ);\n  const typeWidth = TextMeasure.measureTextWidth(\n    typeName,\n    AUTO_FONT,\n    TWELVE_SZ,\n  );\n  return TOTAL_EXTRA + nameWidth + typeWidth;\n};\n\n/**\n * @param {IOrganizerModel[]} receivers 所有接收者信息\n * @param {*} locale 语言(需要根据语言测量实际文字宽度)\n * @param {string} totalCountText 参会人数文字\n * @param {number} singleLineHeight 一行接收者的 UI 高度\n * @param {number} innerWidth 日程卡片容器的宽度\n * @return {*}  {number} 返回渲染出来接受者信息 UI 的实际高度\n */\n\ninterface IGetReceiversHeight {\n  receivers: IOrganizerModel[];\n  locale: any;\n  totalCountText: string;\n  singleLineHeight: number;\n  innerWidth: number;\n}\n\nconst getReceiversHeight = ({\n  receivers,\n  locale,\n  totalCountText,\n  singleLineHeight,\n  innerWidth,\n}: IGetReceiversHeight): number => {\n  const widths = receivers.map((receiver) => {\n    const w = getReceiverWidth(receiver, locale);\n    return w > RECEIVER_MAX_WIDTH ? RECEIVER_MAX_WIDTH : w;\n  });\n\n  let actualWidth = 0;\n  let remain = innerWidth;\n\n  widths.forEach((w) => {\n    if (w) {\n      if (remain - w > 0) {\n        remain -= w;\n        actualWidth += w;\n      } else {\n        actualWidth += remain + w;\n        remain = innerWidth - w;\n      }\n    }\n  });\n  const moreInfoWidth =\n    TextMeasure.measureTextWidth(totalCountText, AUTO_FONT, FOURTEEN_SZ) +\n    MORE_INDO_EXTRA;\n  return (\n    Math.ceil((actualWidth + moreInfoWidth) / innerWidth) * singleLineHeight\n  );\n};\n\nexport { getReceiverWidth, getReceiversHeight };\n"],"file":"getReceiverWidth.js"}