"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKatexString = getKatexString;
exports.calcuSize = calcuSize;
exports.getValue = getValue;
exports.measureFormula = measureFormula;
exports.createPlaceholderSize = exports.FORMULA_PREVIEW_MIN_HEIGHT = exports.FORMULA_PREVIEW_MIN_WIDTH = exports.FORMULA_PLACEHOLDER_HEIGHT = exports.FORMULA_PLACEHOLDER_WIDTH = exports.CONTENT_MARGIN = void 0;

var _katex = require("katex");

// 公式内容的边距
const CONTENT_MARGIN = 4;
exports.CONTENT_MARGIN = CONTENT_MARGIN;
const ERROR_COLOR = '#FF5219';
const FORMULA_PLACEHOLDER_WIDTH = 98;
exports.FORMULA_PLACEHOLDER_WIDTH = FORMULA_PLACEHOLDER_WIDTH;
const FORMULA_PLACEHOLDER_HEIGHT = 32;
exports.FORMULA_PLACEHOLDER_HEIGHT = FORMULA_PLACEHOLDER_HEIGHT;
const FORMULA_PREVIEW_MIN_WIDTH = 8;
exports.FORMULA_PREVIEW_MIN_WIDTH = FORMULA_PREVIEW_MIN_WIDTH;
const FORMULA_PREVIEW_MIN_HEIGHT = 32;
exports.FORMULA_PREVIEW_MIN_HEIGHT = FORMULA_PREVIEW_MIN_HEIGHT;

const createPlaceholderSize = () => ({
  width: FORMULA_PLACEHOLDER_WIDTH,
  height: FORMULA_PLACEHOLDER_HEIGHT
});

exports.createPlaceholderSize = createPlaceholderSize;

function getKatexString(text, throwOnError = false) {
  return (0, _katex.renderToString)(text, {
    errorColor: ERROR_COLOR,
    throwOnError
  });
}

function calcuSize(formula) {
  if (!formula) {
    return createPlaceholderSize();
  }

  const size = measureFormula(formula);
  const width = getValue(FORMULA_PREVIEW_MIN_WIDTH, CONTENT_MARGIN * 2 + size.width);
  const height = getValue(FORMULA_PREVIEW_MIN_HEIGHT, CONTENT_MARGIN * 2 + size.height);
  return {
    width,
    height
  };
}
/**
 * 返回一个不超过最小值和最大值的数字
 * @param min 最小值
 * @param value 计算值
 * @param max 最大值
 */


function getValue(min, value, max) {
  if (!max) {
    return Math.max(min, value);
  }

  return Math.min(Math.max(min, value), max);
}
/**
 * 返回公式内容的大小
 * @param text 公式字符串
 */


function measureFormula(text) {
  const editorContent = document.querySelector('div[data-cangjie-content]');

  if (!editorContent) {
    return createPlaceholderSize();
  }

  const domString = getKatexString(text);
  const faker = document.createElement('div');
  faker.style.width = 'fit-content';
  faker.innerHTML = domString;
  editorContent.appendChild(faker);
  const {
    width,
    height
  } = faker.getBoundingClientRect();
  editorContent.removeChild(faker);
  return {
    width,
    height
  };
}
//# sourceMappingURL=measureFormula.js.map