import { createFocusToNodeAction, isFocusToNodeAction } from './focusToNode';
import { createValidateLastNodeAction, isValidateLastNodeAction } from './validateLastNode';
import { createInsertBlockWithoutExtraBlankAction, isInsertBlockWithoutExtraBlankAction } from './insertBlockWithoutExtraBlank';
import { createMergeDataAction, isMergeDataAction } from './mergeData';
import { createTriggerMarkdownAction, isTriggerMarkdownAction } from './triggerMarkdown';
export { createFocusToNodeAction, createValidateLastNodeAction, createInsertBlockWithoutExtraBlankAction, createMergeDataAction, createTriggerMarkdownAction, isFocusToNodeAction, isInsertBlockWithoutExtraBlankAction, isValidateLastNodeAction, isMergeDataAction, isTriggerMarkdownAction, };
export declare const actions: {
    createFocusToNodeAction: (payload?: import("./focusToNode").FocusToNodePayload | undefined) => import("@ali/4ever-cangjie").Action<import("./focusToNode").FocusToNodePayload>;
    createValidateLastNodeAction: (payload?: {} | undefined) => import("@ali/4ever-cangjie").Action<{}>;
    createInsertBlockWithoutExtraBlankAction: (payload?: import("./insertBlockWithoutExtraBlank").InsertBlockWithoutExtraBlankPayload | undefined) => import("@ali/4ever-cangjie").Action<import("./insertBlockWithoutExtraBlank").InsertBlockWithoutExtraBlankPayload>;
    createMergeDataAction: (payload?: import("./mergeData").ValueData | undefined) => import("@ali/4ever-cangjie").Action<import("./mergeData").ValueData>;
    createTriggerMarkdownAction: (payload?: import("./triggerMarkdown").TriggerMarkdownData | undefined) => import("@ali/4ever-cangjie").Action<import("./triggerMarkdown").TriggerMarkdownData>;
};
export declare const isActions: {
    isFocusToNodeAction: (action: import("@ali/4ever-cangjie").Action<any>) => action is import("@ali/4ever-cangjie").Action<import("./focusToNode").FocusToNodePayload>;
    isInsertBlockWithoutExtraBlankAction: (action: import("@ali/4ever-cangjie").Action<any>) => action is import("@ali/4ever-cangjie").Action<import("./insertBlockWithoutExtraBlank").InsertBlockWithoutExtraBlankPayload>;
    isValidateLastNodeAction: (action: import("@ali/4ever-cangjie").Action<any>) => action is import("@ali/4ever-cangjie").Action<{}>;
    isMergeDataAction: (action: import("@ali/4ever-cangjie").Action<any>) => action is import("@ali/4ever-cangjie").Action<import("./mergeData").ValueData>;
    isTriggerMarkdownAction: (action: import("@ali/4ever-cangjie").Action<any>) => action is import("@ali/4ever-cangjie").Action<import("./triggerMarkdown").TriggerMarkdownData>;
};
