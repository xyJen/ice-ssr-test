{"version":3,"sources":["../../../../src/bi/commands/insertBlockWithoutExtraBlank.ts"],"names":["Block","Commands","EdgePoint","logger","BlockInsertPosition","insertBlockWithoutExtraBlank","controller","newBlock","value","selection","isExpanded","command","getCurrentInfo","document","start","currentBlock","currentInline","getClosestInline","key","error","nextBlock","getNextBlock","query","moveToStartOfNextText","focus","isEdgePoint","edge","AFTER","moveToStartOfNode","moveToStartOfNextBlock","isTextPoint","insertBlock","DEFAULT_TYPE","insertEmptyBlock","tempStart","tempBlock","isAtStartOfNode","isAtEndOfNode","withoutNormalizing","splitDescendantsByKey","offset","newDocument","insertStart","finalAtBlock","parent","getParent","index","nodes","indexOf","After","insertNodeByKey","convertToTextPoints","getClosestBlock"],"mappings":"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","sourcesContent":["import { Block, Controller, Commands, EdgePoint } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport { BlockInsertPosition } from '../constants';\n\n/**\n * 统一插入 Block 逻辑\n *\n * * 插入后内容前无空行\n * * 仅当在段尾(包括空段落)或文末的 void 元素上插入内容后有空行\n *\n * @param {Controller} controller\n * @param {Block} newBlock 待插入的 Block\n * @returns\n */\nexport default function insertBlockWithoutExtraBlank(controller: Controller, newBlock: Block) {\n  // 删除选区内内容\n  if (controller.value.selection.isExpanded) {\n    controller.command('deleteAtRange', controller.value.selection);\n  }\n\n  // 删除选区内内容后的 document\n  const { document, start, currentBlock } = getCurrentInfo(controller);\n  const currentInline = document.getClosestInline(start.key);\n\n  if (!currentBlock) {\n    logger.error('Cannot find currentBlock when insert block');\n    return controller;\n  }\n\n  const nextBlock = document.getNextBlock(currentBlock.key);\n  // 处理 focus 在 void 元素的情况\n  if (currentInline && controller.query('isVoid', currentInline)) {\n    // 移动光标到下一个 text\n    controller.command(Commands.moveToStartOfNextText);\n  } else if (controller.query('isVoid', currentBlock)) {\n    const { focus } = controller.value.selection;\n    if (nextBlock) { // 有下一个 block 时\n      if (focus.isEdgePoint()) {\n        // 若为 Edge Selection，且 edge 为 after，则将光标设置到下一个 block\n        if (focus.edge === EdgePoint.AFTER) {\n          controller.command(Commands.moveToStartOfNode, nextBlock);\n        }\n      } else {\n        // 否则移动光标到下一个 block\n        controller.command(Commands.moveToStartOfNextBlock);\n      }\n    } else {\n      // 后面无 block 时，直接插入的效果是会在当前元素前插入，所以需要提前在后面插入空行\n      // eslint-disable-next-line no-lonely-if\n      if (focus.isTextPoint()) {\n        // 光标是普通 point 时，插入一个空行\n        controller.command(Commands.insertBlock, Block.DEFAULT_TYPE);\n      } else if (focus.isEdgePoint() && focus.edge === EdgePoint.AFTER) {\n        // 光标在 edge after 时，插入一个空行（插入方式跟 TextPoint 略有区别）\n        controller.command(Commands.insertEmptyBlock, focus);\n      }\n    }\n  }\n\n  const { start: tempStart, currentBlock: tempBlock } = getCurrentInfo(controller);\n  if (tempBlock && !tempStart.isAtStartOfNode(tempBlock) && !tempStart.isAtEndOfNode(tempBlock)) {\n    // 光标在段落中间\n    controller.withoutNormalizing(() => {\n      controller.command(\n        Commands.splitDescendantsByKey,\n        tempBlock.key,\n        tempStart.key,\n        tempStart.offset,\n      );\n    });\n  }\n\n  const { document: newDocument, start: insertStart, currentBlock: finalAtBlock } = getCurrentInfo(controller);\n\n  if (!finalAtBlock) {\n    logger.error('Cannot find finalAtBlock when insert block');\n    return controller;\n  }\n\n  const parent = newDocument.getParent(finalAtBlock.key)!;\n  let index = parent.nodes.indexOf(finalAtBlock);\n\n  // 若不在开头 或是 空标题节点，则在光标所在段落的后面插入内容\n  if (\n    !insertStart.isAtStartOfNode(finalAtBlock)\n    || controller.query('getBlockInsertPosition', finalAtBlock) === BlockInsertPosition.After\n  ) {\n    index += 1;\n  }\n\n  controller.command(Commands.insertNodeByKey, parent.key, index, newBlock);\n\n  return controller;\n}\n\nfunction getCurrentInfo(controller: Controller) {\n  const { document, selection } = controller.value;\n  const { start } = selection.convertToTextPoints(document);\n  const currentBlock = document.getClosestBlock(start.key);\n  return {\n    document,\n    selection,\n    currentBlock,\n    start,\n  };\n}\n"],"file":"insertBlockWithoutExtraBlank.js"}