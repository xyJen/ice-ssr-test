{"version":3,"sources":["../../../../src/mo/serializer/htmlToJsonML.ts"],"names":["isTextNode","node","length","name","onOpenTag","state","parent","peek","prevSibling","lastTextChild","phantom","isPhantom","push","onCloseTag","br","pop","append"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,UAAU,GAAIC,IAAD,IAAkC;AACnD,MAAIA,IAAI,IAAI,6BAAaA,IAAb,CAAR,IAA8BA,IAAI,CAACA,IAAI,CAACC,MAAL,GAAc,CAAf,CAAJ,GAAwB,CAAxB,CAAlC,EAA8D;AAC5D,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CALD;;eAOe;AACbC,EAAAA,IAAI,EAAE,IADO;AAGbC,EAAAA,SAAS,EAAE,CAACC,KAAD,EAAeF,IAAf,KAAyC;AAClD,QAAIA,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP,CAD+B,CAGlD;;AACA,UAAMG,MAAM,GAAGD,KAAK,CAACE,IAAN,EAAf;AACA,UAAMC,WAAW,GAAG,6BAAaF,MAAb,CAApB;;AACA,QAAIN,UAAU,CAACQ,WAAD,CAAd,EAA6B;AAC3B;AACA,YAAMC,aAAa,GAAGD,WAAW,GAAGA,WAAW,CAACN,MAAZ,GAAqB,CAAxB,CAAjC,CAF2B,CAG3B;;AACAO,MAAAA,aAAa,CAAC,CAAD,CAAb,IAAoB,IAApB;AACA,aAAO,IAAP;AACD;;AACD,UAAMC,OAAe,GAAG,wCAAxB;AACCA,IAAAA,OAAD,CAAqBC,SAArB,GAAiC,IAAjC;AACAN,IAAAA,KAAK,CAACO,IAAN,CAAWF,OAAX;AACA,WAAO,IAAP;AACD,GApBY;AAsBbG,EAAAA,UAAU,EAAE,CAACR,KAAD,EAAeF,IAAf,KAAyC;AACnD,QAAIA,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,UAAMG,MAAM,GAAGD,KAAK,CAACE,IAAN,EAAf;AACA,UAAMC,WAAW,GAAG,6BAAaF,MAAb,CAApB;;AACA,QAAIN,UAAU,CAACQ,WAAD,CAAd,EAA6B;AAC3B,aAAO,IAAP;AACD;;AACD,UAAMM,EAAE,GAAGT,KAAK,CAACU,GAAN,EAAX;AACAV,IAAAA,KAAK,CAACW,MAAN,CAAaF,EAAb;AACA,WAAO,IAAP;AACD;AAhCY,C","sourcesContent":["import { getLastChild, isJsonMLText, JsonML, Phantom } from '@ali/4ever-utils';\nimport { MoState as State, createEmptyParagraph, } from '@ali/4ever-cangjie';\n\nconst isTextNode = (node: JsonML | null): boolean => {\n  if (node && isJsonMLText(node) && node[node.length - 1]?.[2]) {\n    return true;\n  }\n  return false;\n};\n\nexport default {\n  name: 'br',\n\n  onOpenTag: (state: State, name: string): boolean => {\n    if (name !== 'br') return false;\n\n    // ref: src/plugins/text/htmlToJsonML.js\n    const parent = state.peek();\n    const prevSibling = getLastChild(parent);\n    if (isTextNode(prevSibling)) {\n      // 前一个兄弟节点是文本类型，直接在前一个节点内容尾插入 \\n, 防止产生 unnormalized 数据结构\n      const lastTextChild = prevSibling?.[prevSibling.length - 1];\n      // @ts-ignore\n      lastTextChild[2] += '\\n';\n      return true;\n    }\n    const phantom: JsonML = createEmptyParagraph();\n    (phantom as Phantom).isPhantom = true;\n    state.push(phantom);\n    return true;\n  },\n\n  onCloseTag: (state: State, name: string): boolean => {\n    if (name !== 'br') return false;\n    const parent = state.peek();\n    const prevSibling = getLastChild(parent);\n    if (isTextNode(prevSibling)) {\n      return true;\n    }\n    const br = state.pop();\n    state.append(br);\n    return true;\n  },\n};\n"],"file":"htmlToJsonML.js"}