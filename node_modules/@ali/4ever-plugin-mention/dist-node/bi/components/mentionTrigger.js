"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _lodash = require("lodash");

var _everCangjie = require("@ali/4ever-cangjie");

var ReactDOM = _interopRequireWildcard(require("react-dom"));

var _styled = require("./styled");

var _suggestion = _interopRequireDefault(require("./suggestion"));

var _everComponent = require("@ali/4ever-component");

var _actions = require("../actions");

const _createElement = /*#__PURE__*/_react.default.createElement;

const PanelBox = /*#__PURE__*/_styledComponents.default.div([""]);

const MentionSuggestionPortal = props => {
  const {
    controller,
    searchSuggestions,
    loadMoreSuggestions,
    renderItem,
    renderHeader,
    renderFooter,
    renderLoading,
    renderEmpty,
    renderPanel,
    isComposing,
    text,
    popupOptions = {},
    theme
  } = props;
  const {
    offsetBottom,
    itemHeight,
    alignment = 'follow',
    offsets = [0, 0]
  } = popupOptions;
  const suggestionOffset = offsets;
  const scrollableContainer = (0, _everCangjie.useScrollableContainer)();
  const [panelVisible, setPanelVisible] = (0, _react.useState)(!isComposing);
  const [suggestions, setSuggestions] = (0, _react.useState)([]);
  const searching = (0, _react.useRef)(false);
  const [delayedSearching, setDelayedSearching] = (0, _everComponent.useDelayedState)(false);
  const [position, setPosition] = (0, _react.useState)({
    top: 9999,
    left: 9999
  });

  const portalRef = _react.default.useRef(null);

  const left = (0, _react.useRef)(0);
  const [topOffset, leftOffset] = suggestionOffset; // reset loading when search done

  (0, _react.useEffect)(() => {
    setDelayedSearching(false);
    searching.current = false;
  }, [setDelayedSearching, suggestions]); // do search when text changed

  (0, _react.useEffect)(() => {
    if (isComposing) {
      return;
    }

    if (!searchSuggestions) {
      // eslint-disable-next-line no-console
      console.warn('Missing `searchSuggestions`');
      return;
    }

    setDelayedSearching(true, 200);
    searching.current = true;
    searchSuggestions(text.slice(1), setSuggestions);
  }, [isComposing, text, searchSuggestions, setDelayedSearching, setSuggestions]);
  (0, _react.useEffect)(() => {
    if (suggestions || delayedSearching) {
      setPanelVisible(true);
    } else {
      setPanelVisible(false);
    }
  }, [delayedSearching, setPanelVisible, suggestions]);
  const updatePosition = (0, _react.useCallback)((0, _lodash.throttle)(flag => {
    if (isComposing) {
      return;
    }

    const pos = controller.query('getMentionPanelPosition', {
      controller,
      scrollableContainer: scrollableContainer,
      portalDom: portalRef.current.children[0],
      align: alignment
    });
    const p = {
      left: typeof flag === 'boolean' ? pos.left : left.current,
      top: pos.top
    };
    setPosition(p);
    left.current = p.left;
  }), [controller.value, scrollableContainer]);
  (0, _react.useEffect)(() => {
    const callback = event => {
      if (event.target instanceof HTMLElement && event.target.closest('.mention-suggestion-portal')) {
        // click inside
        return;
      }

      controller.run('onAction', (0, _actions.deactiveMention)());
    };

    window.document.addEventListener('mousedown', callback);
    return () => {
      window.document.removeEventListener('mousedown', callback);
    };
  }, [controller]);
  const close = (0, _react.useCallback)(() => {
    return controller.run('onAction', (0, _actions.deactiveMention)());
  }, [controller]);
  (0, _react.useEffect)(() => {
    updatePosition(true);
    scrollableContainer?.addEventListener('scroll', updatePosition);
    return () => {
      scrollableContainer?.removeEventListener('scroll', updatePosition);
    };
  }, [scrollableContainer]);
  (0, _react.useEffect)(() => {
    if (text.length === 1) {
      updatePosition(true);
    }
  }, [text, controller.value]);

  const overlay = /*#__PURE__*/_createElement(_styled.Toolbar, {
    active: true,
    style: {
      left: position.left + leftOffset,
      top: position.top + topOffset,
      zIndex: 999
    }
  }, /*#__PURE__*/_createElement(_styled.SuggestionsWrapper, {
    theme: theme,
    className: "mention-suggestion",
    "data-testid": "mention-suggestion"
  }, renderPanel ? renderPanel() : /*#__PURE__*/_createElement(_suggestion.default, {
    offsetBottom: offsetBottom,
    loadMoreSuggestions: loadMoreSuggestions,
    renderItem: renderItem,
    renderHeader: renderHeader,
    renderFooter: renderFooter,
    delayedSearching: delayedSearching,
    renderLoading: renderLoading,
    renderEmpty: renderEmpty,
    controller: controller,
    suggestions: suggestions,
    setSuggestions: setSuggestions,
    searching: searching,
    text: text.slice(1),
    theme: theme,
    itemHeight: itemHeight
  })));

  return panelVisible ? /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_createElement(PanelBox, {
    className: "mention-suggestion-portal",
    "data-testid": "mention-suggestion-portal",
    ref: portalRef
  }, overlay), document.body) : null;
};

var _default = MentionSuggestionPortal;
exports.default = _default;
//# sourceMappingURL=mentionTrigger.js.map