"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Status = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everComponent = require("@ali/4ever-component");

var _suggestionForQuickInsert = _interopRequireDefault(require("../components/suggestionForQuickInsert"));

var _actions = require("../actions");

var _styled = require("./styled");

var _weToolbar = require("@ali/we-toolbar");

var _placeholder = _interopRequireDefault(require("../../components/placeholder"));

const _createElement = /*#__PURE__*/_react.default.createElement;
let Status;
exports.Status = Status;

(function (Status) {
  Status[Status["normal"] = 0] = "normal";
  Status[Status["active"] = 1] = "active";
})(Status || (exports.Status = Status = {}));

const PRE_FIX = '@';

const Placeholder = /*#__PURE__*/_react.default.memo(props => {
  const placeholderRef = _react.default.useRef(null);

  const {
    node,
    controller
  } = props;
  const [status, setStatus] = (0, _react.useState)(node.data.active ? Status.active : Status.normal);
  const handleClick = (0, _react.useCallback)(() => {
    setStatus(Status.active);
  }, []);
  return /*#__PURE__*/_createElement(_placeholder.default, {
    ref: placeholderRef
  }, status === Status.active && !controller.query('isDisableMentionPanel') ? /*#__PURE__*/_createElement(PlaceholderPortal, (0, _extends2.default)({}, props, {
    parentRef: placeholderRef,
    onStatusChange: setStatus
  })) : /*#__PURE__*/_createElement(PlaceholderBtn, (0, _extends2.default)({}, props, {
    onClick: handleClick
  })));
});

const PlaceholderPortal = /*#__PURE__*/_react.default.memo(props => {
  const inputRef = _react.default.useRef(null);

  const portalRef = _react.default.useRef(null);

  const scrollableContent = (0, _everCangjie.useZoomContainer)() || document.body;
  const zoom = (0, _everCangjie.useZoom)();
  const {
    controller,
    onStatusChange,
    mentionConfig,
    node
  } = props;
  const [value, setValue] = (0, _react.useState)(PRE_FIX);
  (0, _react.useEffect)(() => {
    inputRef.current?.focus();
    moveAnchorEnd();
  }, [inputRef.current]);
  const close = (0, _react.useCallback)(e => {
    // 如点击了 portal 区域 不触发关闭
    if (portalRef.current?.contains(e.target)) {
      return;
    } // 清除掉 injection


    controller.run('onAction', (0, _actions.cancelPlaceholder)(node.key)); // 如未输入内容，变成占位符状态
    // 如输入部分内容，变成文本

    if (value.trim() === PRE_FIX) {
      onStatusChange(Status.normal);
      return;
    }

    return controller.run('onAction', (0, _actions.exitPlaceholder)(value.trim(), node));
  }, [controller, onStatusChange, node, value]);
  (0, _everComponent.useOnClickOutside)(props.parentRef, close);

  const overlay = /*#__PURE__*/_createElement(_styled.InsertWrapper, null, /*#__PURE__*/_createElement(_suggestionForQuickInsert.default, (0, _extends2.default)({}, mentionConfig, {
    controller: controller,
    at: node.key,
    text: value.slice(1).trim()
  })));

  const handleChange = () => {
    const innerHtml = inputRef.current?.innerText;

    if (innerHtml === '') {
      onStatusChange(Status.normal);
      return controller.run('onAction', (0, _actions.exitPlaceholder)('', node));
    }

    setValue(inputRef.current?.innerText);
  };

  const moveAnchorEnd = () => {
    const range = window.getSelection();

    if (range?.anchorNode !== inputRef.current?.childNodes[0]) {
      return;
    }

    range?.selectAllChildren && range?.selectAllChildren(inputRef.current);
    range?.collapseToEnd && range?.collapseToEnd();
  };

  return /*#__PURE__*/_createElement(_styled.PlaceholderInputWrapper, null, /*#__PURE__*/_createElement(_everComponent.Portal, {
    className: "menu-insert-mention-portal",
    "data-testid": "menu-insert-mention-portal",
    visible: true,
    container: scrollableContent,
    overlay: overlay,
    portalRef: portalRef,
    maxWidth: 420,
    zoom: zoom
  }, /*#__PURE__*/_createElement(_styled.InputWrapper, null, /*#__PURE__*/_createElement(_weToolbar.InlinePlaceholder, {
    icon: /*#__PURE__*/_createElement(_styled.InputSpanWrapper, {
      "data-testid": "menu-insert-mention-input",
      contentEditable: true,
      "data-cangjie-not-editable": true,
      ref: inputRef,
      onInput: handleChange
    }, PRE_FIX),
    type: "normal",
    className: "inline-placeholder"
  }, value === PRE_FIX && /*#__PURE__*/_createElement(_styled.PlaceholderTextWrapper, null, mentionConfig.locale?.mentionPlaceholder)))));
});

var _ref = /*#__PURE__*/_createElement(_styled.PlaceholderIcon, null, PRE_FIX);

const PlaceholderBtn = /*#__PURE__*/_react.default.memo(props => {
  const {
    mentionConfig,
    controller,
    isSelected,
    node,
    onClick
  } = props;
  const handleClick = (0, _react.useCallback)(e => {
    e.stopPropagation(); // 移动端不触发默认逻辑，只传递 action
    // TODO 移动端 mention 占位符功能

    if (!_everCangjie.environment.IS_MOBILE) {
      onClick();
    }

    return controller.run('onAction', (0, _actions.activePlaceholder)(node));
  }, [controller, node, onClick]);
  return /*#__PURE__*/_createElement(_weToolbar.InlinePlaceholder, {
    icon: _ref,
    type: "normal",
    isSelected: isSelected,
    onClick: handleClick,
    testid: "mention-placeholder-normal"
  }, mentionConfig.locale?.mentionPlaceholder);
});

var _default = Placeholder;
exports.default = _default;
//# sourceMappingURL=placeholder.js.map