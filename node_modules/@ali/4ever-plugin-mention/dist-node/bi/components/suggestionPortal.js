"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everComponent = require("@ali/4ever-component");

var _styled = require("./styled");

var _suggestion = _interopRequireDefault(require("./suggestion"));

var _removeMention = _interopRequireDefault(require("../commands/removeMention"));

const _createElement = /*#__PURE__*/React.createElement;

const MentionSuggestionPortal = props => {
  const {
    controller,
    children,
    attributes,
    searchSuggestions,
    loadMoreSuggestions,
    renderItem,
    renderHeader,
    renderFooter,
    renderLoading,
    renderEmpty,
    isComposing,
    text,
    popupOptions = {},
    theme,
    getSuggestionTarget
  } = props;
  const {
    offsetBottom,
    itemHeight,
    alignment = 'follow',
    mountOnBody = false,
    offsets = [0, 0]
  } = popupOptions;
  const suggestionPosition = alignment;
  const suggestionOffset = offsets;
  const zoomContainer = (0, _everCangjie.useZoomContainer)() || document.body;
  const scrollableContent = mountOnBody ? document.body : zoomContainer;
  const zoom = (0, _everCangjie.useZoom)();
  const [panelVisible, setPanelVisible] = React.useState(!isComposing);
  const [suggestions, setSuggestions] = React.useState([]);
  const searching = React.useRef(false);
  const [delayedSearching, setDelayedSearching] = (0, _everComponent.useDelayedState)(false);
  const [position, setPosition] = React.useState(undefined);
  const portalRef = React.useRef(null);
  const [topOffset, leftOffset] = suggestionOffset; // reset loading when search done

  React.useEffect(() => {
    setDelayedSearching(false);
    searching.current = false;
  }, [setDelayedSearching, suggestions]); // do search when text changed

  React.useEffect(() => {
    if (isComposing) {
      return;
    }

    if (!searchSuggestions) {
      // eslint-disable-next-line no-console
      console.warn('Missing `searchSuggestions`');
      return;
    }

    setDelayedSearching(true);
    searching.current = true;
    searchSuggestions(text.slice(1), setSuggestions);
  }, [isComposing, text, searchSuggestions, setDelayedSearching, setSuggestions]);
  React.useEffect(() => {
    if (suggestions || delayedSearching) {
      setPanelVisible(true);
    } else {
      setPanelVisible(false);
    }
  }, [delayedSearching, setPanelVisible, suggestions]);
  React.useEffect(() => {
    const callback = event => {
      if (event.target instanceof HTMLElement && event.target.closest('.mention-suggestion-list')) {
        // click inside
        return;
      }

      controller.command(_removeMention.default);
    };

    window.document.addEventListener('mousedown', callback);
    return () => {
      window.document.removeEventListener('mousedown', callback);
    };
  }, [controller]);
  React.useLayoutEffect(() => {
    if (isComposing) {
      return;
    }

    if (suggestionPosition !== 'follow') {
      const target = getSuggestionTarget && getSuggestionTarget();

      if (!target) {
        return;
      }

      const {
        current
      } = portalRef;

      if (!('getBoundingClientRect' in target) || !(current && 'getBoundingClientRect' in current)) {
        return;
      }

      const cangjieRect = target.getBoundingClientRect();
      const portalRect = current.getBoundingClientRect();
      let pos = null;

      if (suggestionPosition === 'top') {
        pos = {
          top: cangjieRect.top - portalRect.height,
          left: cangjieRect.left
        };
      } else if (suggestionPosition === 'bottom') {
        pos = {
          top: cangjieRect.bottom,
          left: cangjieRect.left
        };
      }

      if (!pos) {
        return;
      }

      setPosition({
        top: pos.top + portalRect.height + topOffset,
        left: pos.left + leftOffset
      });
    }
  }, [suggestionPosition, leftOffset, topOffset, isComposing, getSuggestionTarget]);

  const overlay = /*#__PURE__*/_createElement(_styled.Toolbar, {
    active: true
  }, /*#__PURE__*/_createElement(_styled.SuggestionsWrapper, {
    "data-testid": "mention-suggestion",
    theme: theme
  }, /*#__PURE__*/_createElement(_suggestion.default, {
    offsetBottom: offsetBottom,
    loadMoreSuggestions: loadMoreSuggestions,
    renderItem: renderItem,
    renderHeader: renderHeader,
    renderFooter: renderFooter,
    delayedSearching: delayedSearching,
    renderLoading: renderLoading,
    renderEmpty: renderEmpty,
    controller: controller,
    suggestions: suggestions,
    setSuggestions: setSuggestions,
    searching: searching,
    text: text.slice(1),
    theme: theme,
    itemHeight: itemHeight
  })));

  return /*#__PURE__*/_createElement(_everComponent.Portal, {
    portalRef: portalRef,
    overlay: overlay,
    visible: panelVisible,
    container: scrollableContent,
    position: position,
    className: "metion-suggestion-portal",
    zoom: zoom
  }, /*#__PURE__*/_createElement(_styled.MentionAt, (0, _extends2.default)({}, attributes, {
    "data-type": "mention-at",
    active: true
  }), children()));
};

var _default = MentionSuggestionPortal;
exports.default = _default;
//# sourceMappingURL=suggestionPortal.js.map