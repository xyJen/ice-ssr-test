"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var ReactDOM = _interopRequireWildcard(require("react-dom"));

var _everPluginMarks = require("@ali/4ever-plugin-marks");

var _mention = _interopRequireDefault(require("../../components/mention"));

var _styled = require("../../components/styled");

const _createElement = /*#__PURE__*/React.createElement;

const returnNull = () => null;

class Mention extends React.Component {
  constructor(...args) {
    super(...args);

    this.handleMentionHover = () => {
      const {
        mentionConfig,
        node
      } = this.props;
      const {
        onMentionHover
      } = mentionConfig;

      if (onMentionHover) {
        onMentionHover(node);
      }
    };
  }

  componentDidMount() {
    const {
      node,
      mentionId
    } = this.props;
    const {
      id
    } = node.data;

    if (mentionId && mentionId === id) {
      // eslint-disable-next-line react/no-find-dom-node
      const dom = ReactDOM.findDOMNode(this);
      dom.scrollIntoView();
    }
  }

  render() {
    const {
      node,
      attributes,
      controller,
      isSelected,
      injections,
      Placeholder,
      mentionConfig
    } = this.props;
    const {
      selection
    } = controller.value;
    const {
      id,
      name,
      login,
      isPlaceholder
    } = node.data;
    const text = node.getFirstText();
    const leaf = text.leaves[0];
    const marks = leaf ? leaf.marks : [];
    const currentUser = mentionConfig.getCurrentUser ? mentionConfig.getCurrentUser() : returnNull;
    const {
      onMentionClick,
      locale = {}
    } = mentionConfig;
    const isSelf = currentUser && login ? currentUser.toString() === login.toString() : false;
    const style = (0, _everPluginMarks.marksToStyle)(marks);

    const handleMentionClick = event => {
      event.preventDefault();
      event.stopPropagation();

      if (onMentionClick) {
        onMentionClick(node);
      }
    };

    if (isPlaceholder && !!Placeholder) {
      return /*#__PURE__*/_createElement(Placeholder, {
        controller: controller,
        injections: injections,
        node: node,
        mentionConfig: mentionConfig,
        locale: locale,
        isSelected: isSelected && selection.isCollapsed
      });
    }

    return /*#__PURE__*/_createElement(_mention.default, (0, _extends2.default)({}, attributes, {
      "data-type": "mention",
      isSelf: isSelf,
      id: id,
      isSelected: isSelected && selection.isCollapsed,
      onClick: handleMentionClick,
      onMouseEnter: this.handleMentionHover,
      style: style,
      node: node
    }), "@", /*#__PURE__*/_createElement(_styled.MentionNameWrapper, null, name));
  }

}

var _default = Mention;
exports.default = _default;
//# sourceMappingURL=mention.js.map