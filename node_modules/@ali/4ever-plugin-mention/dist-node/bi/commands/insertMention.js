"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = insertMention;
exports.exitPlaceholder = exports.insertPlaceholder = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _isSelectionInMention = _interopRequireDefault(require("../utils/isSelectionInMention"));

const DEFAULT_PLACEHOLDER_DATA = {
  id: '',
  login: '',
  name: '',
  avatarUrl: '',
  isPlaceholder: true
};

function insertMention(controller) {
  const {
    value
  } = controller;

  if (!_everCangjie.environment.IS_MOBILE && (controller.query('isCollapsedInInlineVoid') || (0, _isSelectionInMention.default)(value))) {
    controller.command(_everCangjie.Commands.moveToStartOfNextText);
  }

  controller.command(_everCangjie.Commands.insertText, '@');
  const decorations = value.decorations.filter(item => item.mark.type !== 'mention');
  const point = controller.value.selection.anchor;
  decorations.push(_everCangjie.Decoration.fromJSON({
    start: {
      key: point.key,
      offset: point.offset - 1,
      klass: 'point'
    },
    end: {
      key: point.key,
      offset: point.offset,
      klass: 'point'
    },
    mark: {
      type: 'mention',
      klass: 'mark'
    }
  }));
  return controller.setDecorations(decorations);
}

const insertPlaceholder = controller => {
  const {
    value
  } = controller;

  if (controller.query('isCollapsedInInlineVoid') || (0, _isSelectionInMention.default)(value)) {
    controller.command(_everCangjie.Commands.moveToStartOfNextText);
  }

  const inline = _everCangjie.Inline.create({
    type: 'mention',
    data: DEFAULT_PLACEHOLDER_DATA
  });

  const {
    injections
  } = controller.value;

  const injection = _everCangjie.Injection.create({
    key: inline.key,
    data: {
      active: true
    }
  });

  controller.setInjections([...injections, injection]).command(_everCangjie.Commands.insertInline, inline);
  return controller.setIsFocused(false);
};

exports.insertPlaceholder = insertPlaceholder;

const exitPlaceholder = (controller, text, node) => {
  const {
    value
  } = controller;

  if (controller.query('isCollapsedInInlineVoid') || (0, _isSelectionInMention.default)(value)) {
    controller.command(_everCangjie.Commands.moveToStartOfNextText);
  }

  if (!text) {
    return controller.command(_everCangjie.Commands.moveToStartOfNode, node).command(_everCangjie.Commands.moveToStartOfNextText).command(_everCangjie.Commands.focus);
  }

  return controller.command(_everCangjie.Commands.moveToStartOfNode, node).command(_everCangjie.Commands.removeNodeByKey, node.key).command(_everCangjie.Commands.insertText, text);
};

exports.exitPlaceholder = exitPlaceholder;
//# sourceMappingURL=insertMention.js.map