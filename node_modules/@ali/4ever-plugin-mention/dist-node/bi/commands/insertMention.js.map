{"version":3,"sources":["../../../../src/bi/commands/insertMention.ts"],"names":["DEFAULT_PLACEHOLDER_DATA","id","login","name","avatarUrl","isPlaceholder","insertMention","controller","value","environment","IS_MOBILE","query","command","Commands","moveToStartOfNextText","insertText","decorations","filter","item","mark","type","point","selection","anchor","push","Decoration","fromJSON","start","key","offset","klass","end","setDecorations","insertPlaceholder","inline","Inline","create","data","injections","injection","Injection","active","setInjections","insertInline","setIsFocused","exitPlaceholder","text","node","moveToStartOfNode","focus","removeNodeByKey"],"mappings":"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","sourcesContent":["import { Controller, Decoration, Commands, Injection, Inline, TextPoint, environment } from '@ali/4ever-cangjie';\n\nimport { MentionData } from '../../mo/models';\nimport isSelectionInMention from '../utils/isSelectionInMention';\n\nconst DEFAULT_PLACEHOLDER_DATA: MentionData = {\n  id: '',\n  login: '',\n  name: '',\n  avatarUrl: '',\n  isPlaceholder: true,\n};\n\nexport default function insertMention(controller: Controller) {\n  const { value } = controller;\n\n  if (!environment.IS_MOBILE && (controller.query('isCollapsedInInlineVoid') || isSelectionInMention(value))) {\n    controller.command(Commands.moveToStartOfNextText);\n  }\n\n  controller.command(Commands.insertText, '@');\n  const decorations: Decoration[] = value.decorations.filter(\n    (item) => item.mark.type !== 'mention',\n  );\n\n  const point = controller.value.selection.anchor as TextPoint;\n  decorations.push(\n    Decoration.fromJSON({\n      start: {\n        key: point.key,\n        offset: point.offset - 1,\n        klass: 'point',\n      },\n      end: {\n        key: point.key,\n        offset: point.offset,\n        klass: 'point',\n      },\n      mark: {\n        type: 'mention',\n        klass: 'mark',\n      },\n    }),\n  );\n\n  return controller.setDecorations(decorations);\n}\n\nexport const insertPlaceholder = (controller: Controller) => {\n  const { value } = controller;\n\n  if (controller.query('isCollapsedInInlineVoid') || isSelectionInMention(value)) {\n    controller.command(Commands.moveToStartOfNextText);\n  }\n\n  const inline = Inline.create({\n    type: 'mention',\n    data: DEFAULT_PLACEHOLDER_DATA,\n  });\n  const { injections } = controller.value;\n  const injection = Injection.create({\n    key: inline.key,\n    data: {\n      active: true,\n    },\n  });\n\n  controller.setInjections([...injections, injection]).command(Commands.insertInline, inline);\n  return controller.setIsFocused(false);\n};\n\nexport const exitPlaceholder = (controller: Controller, text: string, node: Inline) => {\n  const { value } = controller;\n  if (controller.query('isCollapsedInInlineVoid') || isSelectionInMention(value)) {\n    controller.command(Commands.moveToStartOfNextText);\n  }\n\n  if (!text) {\n    return controller\n      .command(Commands.moveToStartOfNode, node)\n      .command(Commands.moveToStartOfNextText).command(Commands.focus);\n  }\n\n  return controller\n    .command(Commands.moveToStartOfNode, node)\n    .command(Commands.removeNodeByKey, node.key)\n    .command(Commands.insertText, text);\n};\n"],"file":"insertMention.js"}