"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnAction;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../actions");

var _insertMention = _interopRequireWildcard(require("../commands/insertMention"));

var _insertMentions = _interopRequireDefault(require("../commands/insertMentions"));

var _removeMention = _interopRequireWildcard(require("../commands/removeMention"));

var _setMention = _interopRequireDefault(require("../commands/setMention"));

function createOnAction({
  onSuggestionSelected
}) {
  return function onAction(action, controller, next) {
    const {
      type,
      payload
    } = action;

    if (type === _actions.MENTION_ACTIVE) {
      return (0, _insertMention.default)(controller);
    }

    if (type === _actions.MENTION_INSERT) {
      const {
        suggestion,
        at
      } = payload;

      if (!onSuggestionSelected) {
        return controller.command(_setMention.default, suggestion, at);
      }

      onSuggestionSelected(suggestion, suggest => {
        // 这里为什么要 flush 呢🤔，导致了排版模式下插入 mention 后光标移动有 BUG
        // eslint-disable-next-line @typescript-eslint/indent
        controller.command(_setMention.default, suggest, at).flush();
      });
      return controller;
    }

    if (type === _actions.MENTION_DEACTIVE) {
      return controller.command(_removeMention.default);
    }

    if (type === _actions.MENTION_MULTIPLE_INSERT) {
      const {
        suggestions
      } = payload;
      return controller.command(_insertMentions.default, suggestions);
    }

    if (type === _actions.MENTION_PLACEHOLDER_INSERT) {
      return controller.command(_insertMention.insertPlaceholder);
    }

    if (type === _actions.MENTION_PLACEHOLDER_EXIT) {
      const {
        text,
        node
      } = payload;
      return controller.command(_insertMention.exitPlaceholder, text, node);
    }

    if (type === _actions.MENTION_PLACEHOLDER_CANCEL) {
      const {
        key
      } = payload;
      return controller.command(_removeMention.cancelPlaceholder, key);
    }

    if (type === _actions.MENTION_PLACEHOLDER_ACTIVE) {
      const {
        node
      } = payload;
      return controller.command(_everCangjie.Commands.moveToEndOfNode, node);
    }

    return next();
  };
}
//# sourceMappingURL=createOnAction.js.map