"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onKeyDown;

var _everCangjie = require("@ali/4ever-cangjie");

var _isHotkey = require("is-hotkey");

var _utils = require("../utils");

var _removeMention = _interopRequireDefault(require("../commands/removeMention"));

var _getMentionAtFocusEdge = _interopRequireDefault(require("../queries/getMentionAtFocusEdge"));

const isEnterHotkey = (0, _isHotkey.isKeyHotkey)('enter');
const isBackspaceHotkey = (0, _isHotkey.isKeyHotkey)('backspace');
const isEscHotkey = (0, _isHotkey.isKeyHotkey)('esc');
const isArrowRightHotKey = (0, _isHotkey.isKeyHotkey)('right');
const isArrowLeftHotKey = (0, _isHotkey.isKeyHotkey)('left');

const isMoveHotKey = event => ['up', 'down', 'left', 'right'].map(key => (0, _isHotkey.isKeyHotkey)(key)).some(isEvent => isEvent(event));

const isSelectKeyDown = event => ['del', 'backspace', 'left', 'right'].map(key => (0, _isHotkey.isKeyHotkey)(key)).some(isEvent => isEvent(event));

function onKeyDown(event, controller, next) {
  const {
    value
  } = controller;
  const {
    selection,
    document
  } = value;

  if (!selection) {
    return next();
  }

  const {
    anchor
  } = selection;
  const anchorText = document.getNode(anchor.key);
  const anchorOffset = selection.anchor.offset;
  const prevText = anchorText && anchorText.text ? anchorText.text.charAt(anchorOffset - 1) : '';

  if (selection && selection.isCollapsed && isSelectKeyDown(event)) {
    let tagElement;

    if (_everCangjie.hotkeys.isDeleteBackward(event) || _everCangjie.hotkeys.isDeleteForward(event)) {
      tagElement = (0, _getMentionAtFocusEdge.default)(controller, _everCangjie.hotkeys.isDeleteBackward(event) ? 'backward' : 'forward');
    } else if (isArrowLeftHotKey(event)) {
      tagElement = (0, _getMentionAtFocusEdge.default)(controller, 'backward');
    } else if (isArrowRightHotKey(event)) {
      tagElement = (0, _getMentionAtFocusEdge.default)(controller, 'forward');
    }

    if (tagElement) {
      event.preventDefault();
      return controller.command(_everCangjie.Commands.moveAnchorToStartOfNode, tagElement).command(_everCangjie.Commands.moveFocusToEndOfNode, tagElement);
    }
  }

  if ((0, _utils.isSelectionInMentionSuggestion)(value) && isEscHotkey(event)) {
    return controller.command(_removeMention.default);
  }

  if ((0, _utils.isSelectionInMentionSuggestion)(value) && (isEnterHotkey(event) || isMoveHotKey(event))) {
    event.preventDefault();
    event.stopPropagation();
    return controller;
  }

  if ((0, _utils.isSelectionInMentionSuggestion)(value) && isBackspaceHotkey(event) && prevText === '@') {
    controller.command(_removeMention.default);
  }

  return next();
}
//# sourceMappingURL=onKeyDown.js.map