"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mobileBiFactory = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _toolbar = _interopRequireDefault(require("./toolbar"));

var _renderNode = _interopRequireDefault(require("./renderNode"));

var _onCangjieInput = _interopRequireDefault(require("./onCangjieInput"));

var _onCangjieBlur = _interopRequireDefault(require("./onCangjieBlur"));

var _insertMention = _interopRequireDefault(require("./insertMention"));

var _isSelectionInMention = require("../queries/isSelectionInMention");

var _getMentionKeyword = _interopRequireDefault(require("../queries/getMentionKeyword"));

var _insertMention2 = _interopRequireDefault(require("../commands/insertMention"));

var _actions = require("../actions");

var _removeMention = _interopRequireDefault(require("./removeMention"));

var _mo = require("../../mo");

var _renderMark = _interopRequireDefault(require("./renderMark"));

const mobileBiFactory = configs => {
  const mentionConfig = configs.mention || {};
  const mentionId = mentionConfig.getMentionId ? mentionConfig.getMentionId() : '';
  const extraItems = {};

  if (mentionConfig.renderMentionPanel) {
    // @ts-ignore
    extraItems.renderMark = (0, _renderMark.default)(mentionConfig.renderMentionPanel);
  }

  return { ...(0, _mo.moFactory)({}),
    toolbar: (0, _toolbar.default)(mentionConfig),
    commands: {
      insertMention: _insertMention.default
    },
    actions: _actions.actions,
    isActions: _actions.isActions,
    renderNode: (0, _renderNode.default)(mentionId, mentionConfig),
    onCangjieInput: _onCangjieInput.default,
    onCangjieBlur: _onCangjieBlur.default,

    onAction(action, controller, next) {
      const {
        type,
        payload
      } = action;

      if (type === _actions.MENTION_SELECT) {
        (0, _insertMention2.default)(controller);
        return controller;
      }

      if (type === _actions.MENTION_INSERT) {
        const {
          suggestion
        } = payload;
        controller.command(_everCangjie.Commands.focus);
        return controller.command(_insertMention.default, suggestion);
      }

      if (type === _actions.MENTION_CANCEL_SELECT) {
        return controller.command(_removeMention.default);
      }

      return next();
    },

    queries: {
      isSelectionInMention: _isSelectionInMention.isSelectionInMention,
      getMentionKeyword: _getMentionKeyword.default
    },
    ...extraItems
  };
};

exports.mobileBiFactory = mobileBiFactory;
//# sourceMappingURL=index.js.map