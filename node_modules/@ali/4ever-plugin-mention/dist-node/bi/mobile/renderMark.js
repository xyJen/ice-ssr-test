"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _styled = require("../components/styled");

const _createElement = /*#__PURE__*/_react.default.createElement;

const Portal = props => {
  const {
    className,
    overlay,
    children
  } = props;
  return /*#__PURE__*/_createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.cloneElement(children), /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_createElement("div", {
    className: className
  }, /*#__PURE__*/_react.default.cloneElement(overlay)), document.body));
};

const MentionSuggestionPortal = props => {
  const {
    overlay,
    children
  } = props;
  const mentionRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(() => {
    if (!mentionRef.current) return;
    const screenY = mentionRef.current.getBoundingClientRect().y;
    if (screenY < 100) return;
    window.scrollBy({
      top: screenY - 100,
      left: 0,
      behavior: 'smooth'
    });
  }, []);
  return /*#__PURE__*/_createElement(Portal, {
    overlay: overlay,
    className: "mobile-mention-suggestion-portal"
  }, /*#__PURE__*/_createElement(_styled.MentionAt, {
    ref: mentionRef,
    "data-type": "mention-at",
    active: true
  }, children()));
};

var _default = mentionPanel => {
  return function renderMark(props, controller, next) {
    const {
      mark,
      text: markText
    } = props;

    if (mark.type === 'mention' && !controller.query('isDisableMentionPanel')) {
      const text = controller.query('getMentionKeyword');
      if (!mentionPanel) return next();
      if (!text) return next();
      if (text[0] !== markText[0]) return next();
      const overlayElement = mentionPanel(text, controller);
      return /*#__PURE__*/_createElement(MentionSuggestionPortal, (0, _extends2.default)({}, props, {
        overlay: overlayElement,
        isComposing: !!controller.value.composing
      }));
    }

    return next();
  };
};

exports.default = _default;
//# sourceMappingURL=renderMark.js.map