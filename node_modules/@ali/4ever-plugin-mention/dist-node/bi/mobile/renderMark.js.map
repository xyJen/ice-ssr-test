{"version":3,"sources":["../../../../src/bi/mobile/renderMark.tsx"],"names":["Portal","props","className","overlay","children","React","cloneElement","ReactDOM","createPortal","document","body","MentionSuggestionPortal","mentionRef","current","screenY","getBoundingClientRect","y","window","scrollBy","top","left","behavior","mentionPanel","renderMark","controller","next","mark","text","markText","type","query","overlayElement","value","composing"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;uBAF4B,a;;AAiB5B,MAAMA,MAAM,GAAIC,KAAD,IAAyB;AACtC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA;AAAtB,MAAmCH,KAAzC;AACA,sBACE,2DACGI,eAAMC,YAAN,CAAmBF,QAAnB,CADH,eAGIG,kBAASC,YAAT,eACE;AAAK,IAAA,SAAS,EAAEN;AAAhB,kBACGG,eAAMC,YAAN,CAAmBH,OAAnB,CADH,CADF,EAIEM,QAAQ,CAACC,IAJX,CAHJ,CADF;AAaD,CAfD;;AAiBA,MAAMC,uBAAuB,GAAIV,KAAD,IAAqC;AACnE,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBH,KAA9B;AACA,QAAMW,UAAU,GAAG,mBAAuB,IAAvB,CAAnB;AAEA,wBAAU,MAAM;AACd,QAAI,CAACA,UAAU,CAACC,OAAhB,EAAyB;AAEzB,UAAMC,OAAO,GAAGF,UAAU,CAACC,OAAX,CAAmBE,qBAAnB,GAA2CC,CAA3D;AACA,QAAIF,OAAO,GAAG,GAAd,EAAmB;AAEnBG,IAAAA,MAAM,CAACC,QAAP,CAAgB;AACdC,MAAAA,GAAG,EAAEL,OAAO,GAAG,GADD;AAEdM,MAAAA,IAAI,EAAE,CAFQ;AAGdC,MAAAA,QAAQ,EAAE;AAHI,KAAhB;AAKD,GAXD,EAWG,EAXH;AAaA,sBACE,eAAC,MAAD;AACE,IAAA,OAAO,EAAElB,OADX;AAEE,IAAA,SAAS,EAAC;AAFZ,kBAIE,eAAC,iBAAD;AAAW,IAAA,GAAG,EAAES,UAAhB;AAA4B,iBAAU,YAAtC;AAAmD,IAAA,MAAM;AAAzD,KACGR,QAAQ,EADX,CAJF,CADF;AAUD,CA3BD;;eA6BgBkB,YAAD,IAA6D;AAC1E,SAAO,SAASC,UAAT,CAAoBtB,KAApB,EAA2BuB,UAA3B,EAAuCC,IAAvC,EAA6C;AAClD,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAI,EAAEC;AAAd,QAA2B3B,KAAjC;;AACA,QAAIyB,IAAI,CAACG,IAAL,KAAc,SAAd,IAA2B,CAACL,UAAU,CAACM,KAAX,CAAiB,uBAAjB,CAAhC,EAA2E;AACzE,YAAMH,IAAI,GAAGH,UAAU,CAACM,KAAX,CAAiB,mBAAjB,CAAb;AACA,UAAI,CAACR,YAAL,EAAmB,OAAOG,IAAI,EAAX;AACnB,UAAI,CAACE,IAAL,EAAW,OAAOF,IAAI,EAAX;AACX,UAAIE,IAAI,CAAC,CAAD,CAAJ,KAAYC,QAAQ,CAAC,CAAD,CAAxB,EAA6B,OAAOH,IAAI,EAAX;AAE7B,YAAMM,cAAc,GAAGT,YAAY,CAACK,IAAD,EAAOH,UAAP,CAAnC;AAEA,0BACE,eAAC,uBAAD,6BACMvB,KADN;AAEE,QAAA,OAAO,EAAE8B,cAFX;AAGE,QAAA,WAAW,EAAE,CAAC,CAACP,UAAU,CAACQ,KAAX,CAAiBC;AAHlC,SADF;AAOD;;AAED,WAAOR,IAAI,EAAX;AACD,GApBD;AAqBD,C","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { RenderMarkProps } from '@ali/4ever-cangjie';\nimport { MentionAt } from '../components/styled';\nimport { MentionPluginConfig } from '../types';\n\ninterface IMentionSuggestionPortal {\n  overlay: React.ReactElement;\n  children: RenderMarkProps['children'];\n}\n\n\ninterface IPortalProps {\n  overlay: React.ReactElement;\n  className: string;\n  children: React.ReactElement;\n}\n\nconst Portal = (props: IPortalProps) => {\n  const { className, overlay, children } = props;\n  return (\n    <>\n      {React.cloneElement(children)}\n      {\n        ReactDOM.createPortal(\n          <div className={className}>\n            {React.cloneElement(overlay)}\n          </div>,\n          document.body,\n        )\n      }\n    </>\n  );\n};\n\nconst MentionSuggestionPortal = (props: IMentionSuggestionPortal) => {\n  const { overlay, children } = props;\n  const mentionRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!mentionRef.current) return;\n\n    const screenY = mentionRef.current.getBoundingClientRect().y;\n    if (screenY < 100) return;\n\n    window.scrollBy({\n      top: screenY - 100,\n      left: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  return (\n    <Portal\n      overlay={overlay}\n      className=\"mobile-mention-suggestion-portal\"\n    >\n      <MentionAt ref={mentionRef} data-type=\"mention-at\" active>\n        {children()}\n      </MentionAt>\n    </Portal>\n  );\n};\n\nexport default (mentionPanel: MentionPluginConfig['renderMentionPanel']) => {\n  return function renderMark(props, controller, next) {\n    const { mark, text: markText } = props;\n    if (mark.type === 'mention' && !controller.query('isDisableMentionPanel')) {\n      const text = controller.query('getMentionKeyword');\n      if (!mentionPanel) return next();\n      if (!text) return next();\n      if (text[0] !== markText[0]) return next();\n\n      const overlayElement = mentionPanel(text, controller);\n\n      return (\n        <MentionSuggestionPortal\n          {...props}\n          overlay={overlayElement}\n          isComposing={!!controller.value.composing}\n        />\n      );\n    }\n\n    return next();\n  };\n};\n"],"file":"renderMark.js"}