import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { FixedSizeList as List } from 'react-window';
import AutoSizer from 'react-virtualized-auto-sizer';
import { isNil } from 'lodash-es';
import { LoadingBetaNormal } from '@ali/we-design';
import isKeyHotkey from 'is-hotkey';
import { deactiveMention, insertMention } from "../actions";
import MentionSuggestionItem from "./suggestionItem";
import { LoadingWrapper } from "./styled";
var isUpHotKey = isKeyHotkey('up');
var isDownHotKey = isKeyHotkey('down');
var isLeftHotKey = isKeyHotkey('left');
var isRightHotKey = isKeyHotkey('right');
var isEnterHotKey = isKeyHotkey('enter');

var _ref3 = /*#__PURE__*/_createElement(LoadingBetaNormal, null);

var MentionSuggestion = function MentionSuggestion(props) {
  var controller = props.controller,
      text = props.text,
      renderItem = props.renderItem,
      renderHeader = props.renderHeader,
      searching = props.searching,
      renderFooter = props.renderFooter,
      renderLoading = props.renderLoading,
      renderEmpty = props.renderEmpty,
      _props$offsetBottom = props.offsetBottom,
      offsetBottom = _props$offsetBottom === void 0 ? 0 : _props$offsetBottom,
      loadMoreSuggestions = props.loadMoreSuggestions,
      suggestions = props.suggestions,
      setSuggestions = props.setSuggestions,
      delayedSearching = props.delayedSearching,
      _props$itemHeight = props.itemHeight,
      itemHeight = _props$itemHeight === void 0 ? 50 : _props$itemHeight;

  var _React$useState = React.useState(0),
      selectedIndex = _React$useState[0],
      setSelectedIndex = _React$useState[1];

  var listRef = React.useRef(null);
  var lastItem = React.useRef(null);
  var editorRef = React.useRef(controller);
  var isEmptyText = text.trim().length === 0;
  var isEmptySuggestions = suggestions.length === 0;
  var handleSelect = React.useCallback(function (index) {
    var suggestion = suggestions[isNil(index) ? selectedIndex : index];
    editorRef.current.run('onAction', insertMention(suggestion));
  }, [suggestions, selectedIndex]);
  var handleScroll = React.useCallback(function (_ref) {
    var scrollOffset = _ref.scrollOffset;

    if (!loadMoreSuggestions || !listRef.current) {
      return;
    }
    /* 当倒数第 offsetBottom + 1 个元素进入可视区域时触发 loadMoreSuggestions */


    var startOffset = (suggestions.length - offsetBottom - 2) * itemHeight - listRef.current.props.height;

    if (startOffset > 0 && startOffset <= scrollOffset && lastItem.current !== suggestions.length) {
      lastItem.current = suggestions.length;
      loadMoreSuggestions(text, suggestions.length, setSuggestions);
    }
  }, [loadMoreSuggestions, suggestions.length, offsetBottom, itemHeight, text, setSuggestions]);
  var itemData = React.useMemo(function () {
    return {
      suggestions: suggestions,
      onSelect: handleSelect,
      renderItem: renderItem,
      selectedIndex: selectedIndex,
      onSelectedIndexChange: setSelectedIndex
    };
  }, [suggestions, renderItem, selectedIndex, handleSelect]);
  React.useEffect(function () {
    editorRef.current = controller;
  }, [controller]); // listen up & down

  React.useEffect(function () {
    var handleMove = function handleMove(event) {
      if (event.isComposing || searching.current) {
        return;
      }

      if (isRightHotKey(event) || isDownHotKey(event)) {
        event.preventDefault();
        setSelectedIndex(function (index) {
          return (index + 1) % suggestions.length;
        });
      }

      if (isLeftHotKey(event) || isUpHotKey(event)) {
        event.preventDefault();
        setSelectedIndex(function (index) {
          return index === 0 ? suggestions.length - 1 : index - 1;
        });
      }

      if (isEnterHotKey(event)) {
        event.preventDefault();
        event.stopPropagation();
        handleSelect();
        editorRef.current.run('onAction', deactiveMention());
      }
    };

    document.addEventListener('keyup', handleMove);
    return function () {
      document.removeEventListener('keyup', handleMove);
    };
  }, [searching, suggestions, selectedIndex]);
  React.useEffect(function () {
    var handleKeyDown = function handleKeyDown(event) {
      if (!event.key) {
        return;
      }

      var key = event.key.toLowerCase();

      if (event.isComposing || searching.current) {
        return;
      }

      if (key === ' ' && event.keyCode === 32) {
        if (!isEmptyText && !isEmptySuggestions) {
          event.preventDefault();
          event.stopPropagation();
          handleSelect(0);
        } else {
          editorRef.current.run('onAction', deactiveMention());
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return function () {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleSelect, isEmptySuggestions, isEmptyText, searching]); // scroll to selected index

  React.useEffect(function () {
    if (listRef.current) {
      listRef.current.scrollToItem(selectedIndex);
    }
  }, [selectedIndex]);

  if (!delayedSearching && suggestions.length === 0 && renderEmpty) {
    return renderEmpty();
  }

  return /*#__PURE__*/_createElement(React.Fragment, null, renderHeader && renderHeader(), /*#__PURE__*/_createElement("div", {
    style: {
      flex: 1
    }
  }, /*#__PURE__*/_createElement(AutoSizer, null, function (_ref2) {
    var height = _ref2.height,
        width = _ref2.width;
    return delayedSearching ? /*#__PURE__*/_createElement(LoadingWrapper, {
      "data-testid": "mention-suggestion-loading",
      height: height,
      width: width
    }, renderLoading ? renderLoading() : _ref3) : /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(List, {
      className: "mention-suggestion-list",
      ref: listRef,
      height: height,
      itemCount: suggestions.length,
      itemSize: itemHeight,
      itemData: itemData,
      width: width,
      onScroll: handleScroll
    }, MentionSuggestionItem));
  })), renderFooter && renderFooter());
};

export default /*#__PURE__*/React.memo(MentionSuggestion);
//# sourceMappingURL=suggestion.js.map