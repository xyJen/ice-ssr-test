import _extends from "@babel/runtime/helpers/extends";
import React, { useState, useCallback, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment, useZoom, useZoomContainer } from '@ali/4ever-cangjie';
import { Portal } from '@ali/4ever-component';
import MentionSuggestion from "../components/suggestionForQuickInsert";
import { useOnClickOutside } from '@ali/4ever-component';
import { exitPlaceholder, cancelPlaceholder, activePlaceholder } from "../actions";
import { PlaceholderInputWrapper, InputSpanWrapper, InputWrapper, InsertWrapper, PlaceholderTextWrapper, PlaceholderIcon } from "./styled";
import { InlinePlaceholder } from '@ali/we-toolbar';
import PlaceholderComponent from "../../components/placeholder";
export var Status;

(function (Status) {
  Status[Status["normal"] = 0] = "normal";
  Status[Status["active"] = 1] = "active";
})(Status || (Status = {}));

var PRE_FIX = '@';
var Placeholder = /*#__PURE__*/React.memo(function (props) {
  var placeholderRef = React.useRef(null);
  var node = props.node,
      controller = props.controller;

  var _useState = useState(node.data.active ? Status.active : Status.normal),
      status = _useState[0],
      setStatus = _useState[1];

  var handleClick = useCallback(function () {
    setStatus(Status.active);
  }, []);
  return /*#__PURE__*/_createElement(PlaceholderComponent, {
    ref: placeholderRef
  }, status === Status.active && !controller.query('isDisableMentionPanel') ? /*#__PURE__*/_createElement(PlaceholderPortal, _extends({}, props, {
    parentRef: placeholderRef,
    onStatusChange: setStatus
  })) : /*#__PURE__*/_createElement(PlaceholderBtn, _extends({}, props, {
    onClick: handleClick
  })));
});
var PlaceholderPortal = /*#__PURE__*/React.memo(function (props) {
  var _mentionConfig$locale;

  var inputRef = React.useRef(null);
  var portalRef = React.useRef(null);
  var scrollableContent = useZoomContainer() || document.body;
  var zoom = useZoom();
  var controller = props.controller,
      onStatusChange = props.onStatusChange,
      mentionConfig = props.mentionConfig,
      node = props.node;

  var _useState2 = useState(PRE_FIX),
      value = _useState2[0],
      setValue = _useState2[1];

  useEffect(function () {
    var _inputRef$current;

    (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();
    moveAnchorEnd();
  }, [inputRef.current]);
  var close = useCallback(function (e) {
    var _portalRef$current;

    // 如点击了 portal 区域 不触发关闭
    if ((_portalRef$current = portalRef.current) != null && _portalRef$current.contains(e.target)) {
      return;
    } // 清除掉 injection


    controller.run('onAction', cancelPlaceholder(node.key)); // 如未输入内容，变成占位符状态
    // 如输入部分内容，变成文本

    if (value.trim() === PRE_FIX) {
      onStatusChange(Status.normal);
      return;
    }

    return controller.run('onAction', exitPlaceholder(value.trim(), node));
  }, [controller, onStatusChange, node, value]);
  useOnClickOutside(props.parentRef, close);

  var overlay = /*#__PURE__*/_createElement(InsertWrapper, null, /*#__PURE__*/_createElement(MentionSuggestion, _extends({}, mentionConfig, {
    controller: controller,
    at: node.key,
    text: value.slice(1).trim()
  })));

  var handleChange = function handleChange() {
    var _inputRef$current2, _inputRef$current3;

    var innerHtml = (_inputRef$current2 = inputRef.current) == null ? void 0 : _inputRef$current2.innerText;

    if (innerHtml === '') {
      onStatusChange(Status.normal);
      return controller.run('onAction', exitPlaceholder('', node));
    }

    setValue((_inputRef$current3 = inputRef.current) == null ? void 0 : _inputRef$current3.innerText);
  };

  var moveAnchorEnd = function moveAnchorEnd() {
    var _inputRef$current4;

    var range = window.getSelection();

    if ((range == null ? void 0 : range.anchorNode) !== ((_inputRef$current4 = inputRef.current) == null ? void 0 : _inputRef$current4.childNodes[0])) {
      return;
    }

    (range == null ? void 0 : range.selectAllChildren) && (range == null ? void 0 : range.selectAllChildren(inputRef.current));
    (range == null ? void 0 : range.collapseToEnd) && (range == null ? void 0 : range.collapseToEnd());
  };

  return /*#__PURE__*/_createElement(PlaceholderInputWrapper, null, /*#__PURE__*/_createElement(Portal, {
    className: "menu-insert-mention-portal",
    "data-testid": "menu-insert-mention-portal",
    visible: true,
    container: scrollableContent,
    overlay: overlay,
    portalRef: portalRef,
    maxWidth: 420,
    zoom: zoom
  }, /*#__PURE__*/_createElement(InputWrapper, null, /*#__PURE__*/_createElement(InlinePlaceholder, {
    icon: /*#__PURE__*/_createElement(InputSpanWrapper, {
      "data-testid": "menu-insert-mention-input",
      contentEditable: true,
      "data-cangjie-not-editable": true,
      ref: inputRef,
      onInput: handleChange
    }, PRE_FIX),
    type: "normal",
    className: "inline-placeholder"
  }, value === PRE_FIX && /*#__PURE__*/_createElement(PlaceholderTextWrapper, null, (_mentionConfig$locale = mentionConfig.locale) == null ? void 0 : _mentionConfig$locale.mentionPlaceholder)))));
});

var _ref = /*#__PURE__*/_createElement(PlaceholderIcon, null, PRE_FIX);

var PlaceholderBtn = /*#__PURE__*/React.memo(function (props) {
  var _mentionConfig$locale2;

  var mentionConfig = props.mentionConfig,
      controller = props.controller,
      isSelected = props.isSelected,
      node = props.node,
      onClick = props.onClick;
  var handleClick = useCallback(function (e) {
    e.stopPropagation(); // 移动端不触发默认逻辑，只传递 action
    // TODO 移动端 mention 占位符功能

    if (!environment.IS_MOBILE) {
      onClick();
    }

    return controller.run('onAction', activePlaceholder(node));
  }, [controller, node, onClick]);
  return /*#__PURE__*/_createElement(InlinePlaceholder, {
    icon: _ref,
    type: "normal",
    isSelected: isSelected,
    onClick: handleClick,
    testid: "mention-placeholder-normal"
  }, (_mentionConfig$locale2 = mentionConfig.locale) == null ? void 0 : _mentionConfig$locale2.mentionPlaceholder);
});
export default Placeholder;
//# sourceMappingURL=placeholder.js.map