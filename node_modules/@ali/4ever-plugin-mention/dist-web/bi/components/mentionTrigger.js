import React, { useState, useRef, useEffect, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { throttle } from 'lodash-es';
import { useScrollableContainer } from '@ali/4ever-cangjie';
import * as ReactDOM from 'react-dom';
import { Toolbar, SuggestionsWrapper } from "./styled";
import MentionSuggestion from "./suggestion";
import { useDelayedState } from '@ali/4ever-component';
import { deactiveMention } from "../actions";
var PanelBox = /*#__PURE__*/styled.div([""]);

var MentionSuggestionPortal = function MentionSuggestionPortal(props) {
  var controller = props.controller,
      searchSuggestions = props.searchSuggestions,
      loadMoreSuggestions = props.loadMoreSuggestions,
      renderItem = props.renderItem,
      renderHeader = props.renderHeader,
      renderFooter = props.renderFooter,
      renderLoading = props.renderLoading,
      renderEmpty = props.renderEmpty,
      renderPanel = props.renderPanel,
      isComposing = props.isComposing,
      text = props.text,
      _props$popupOptions = props.popupOptions,
      popupOptions = _props$popupOptions === void 0 ? {} : _props$popupOptions,
      theme = props.theme;
  var offsetBottom = popupOptions.offsetBottom,
      itemHeight = popupOptions.itemHeight,
      _popupOptions$alignme = popupOptions.alignment,
      alignment = _popupOptions$alignme === void 0 ? 'follow' : _popupOptions$alignme,
      _popupOptions$offsets = popupOptions.offsets,
      offsets = _popupOptions$offsets === void 0 ? [0, 0] : _popupOptions$offsets;
  var suggestionOffset = offsets;
  var scrollableContainer = useScrollableContainer();

  var _useState = useState(!isComposing),
      panelVisible = _useState[0],
      setPanelVisible = _useState[1];

  var _useState2 = useState([]),
      suggestions = _useState2[0],
      setSuggestions = _useState2[1];

  var searching = useRef(false);

  var _useDelayedState = useDelayedState(false),
      delayedSearching = _useDelayedState[0],
      setDelayedSearching = _useDelayedState[1];

  var _useState3 = useState({
    top: 9999,
    left: 9999
  }),
      position = _useState3[0],
      setPosition = _useState3[1];

  var portalRef = React.useRef(null);
  var left = useRef(0);
  var topOffset = suggestionOffset[0],
      leftOffset = suggestionOffset[1]; // reset loading when search done

  useEffect(function () {
    setDelayedSearching(false);
    searching.current = false;
  }, [setDelayedSearching, suggestions]); // do search when text changed

  useEffect(function () {
    if (isComposing) {
      return;
    }

    if (!searchSuggestions) {
      // eslint-disable-next-line no-console
      console.warn('Missing `searchSuggestions`');
      return;
    }

    setDelayedSearching(true, 200);
    searching.current = true;
    searchSuggestions(text.slice(1), setSuggestions);
  }, [isComposing, text, searchSuggestions, setDelayedSearching, setSuggestions]);
  useEffect(function () {
    if (suggestions || delayedSearching) {
      setPanelVisible(true);
    } else {
      setPanelVisible(false);
    }
  }, [delayedSearching, setPanelVisible, suggestions]);
  var updatePosition = useCallback(throttle(function (flag) {
    if (isComposing) {
      return;
    }

    var pos = controller.query('getMentionPanelPosition', {
      controller: controller,
      scrollableContainer: scrollableContainer,
      portalDom: portalRef.current.children[0],
      align: alignment
    });
    var p = {
      left: typeof flag === 'boolean' ? pos.left : left.current,
      top: pos.top
    };
    setPosition(p);
    left.current = p.left;
  }), [controller.value, scrollableContainer]);
  useEffect(function () {
    var callback = function callback(event) {
      if (event.target instanceof HTMLElement && event.target.closest('.mention-suggestion-portal')) {
        // click inside
        return;
      }

      controller.run('onAction', deactiveMention());
    };

    window.document.addEventListener('mousedown', callback);
    return function () {
      window.document.removeEventListener('mousedown', callback);
    };
  }, [controller]);
  var close = useCallback(function () {
    return controller.run('onAction', deactiveMention());
  }, [controller]);
  useEffect(function () {
    updatePosition(true);
    scrollableContainer == null ? void 0 : scrollableContainer.addEventListener('scroll', updatePosition);
    return function () {
      scrollableContainer == null ? void 0 : scrollableContainer.removeEventListener('scroll', updatePosition);
    };
  }, [scrollableContainer]);
  useEffect(function () {
    if (text.length === 1) {
      updatePosition(true);
    }
  }, [text, controller.value]);

  var overlay = /*#__PURE__*/_createElement(Toolbar, {
    active: true,
    style: {
      left: position.left + leftOffset,
      top: position.top + topOffset,
      zIndex: 999
    }
  }, /*#__PURE__*/_createElement(SuggestionsWrapper, {
    theme: theme,
    className: "mention-suggestion",
    "data-testid": "mention-suggestion"
  }, renderPanel ? renderPanel() : /*#__PURE__*/_createElement(MentionSuggestion, {
    offsetBottom: offsetBottom,
    loadMoreSuggestions: loadMoreSuggestions,
    renderItem: renderItem,
    renderHeader: renderHeader,
    renderFooter: renderFooter,
    delayedSearching: delayedSearching,
    renderLoading: renderLoading,
    renderEmpty: renderEmpty,
    controller: controller,
    suggestions: suggestions,
    setSuggestions: setSuggestions,
    searching: searching,
    text: text.slice(1),
    theme: theme,
    itemHeight: itemHeight
  })));

  return panelVisible ? /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_createElement(PanelBox, {
    className: "mention-suggestion-portal",
    "data-testid": "mention-suggestion-portal",
    ref: portalRef
  }, overlay), document.body) : null;
};

export default MentionSuggestionPortal;
//# sourceMappingURL=mentionTrigger.js.map