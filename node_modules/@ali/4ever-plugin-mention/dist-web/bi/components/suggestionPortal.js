import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useZoom, useZoomContainer } from '@ali/4ever-cangjie';
import { Portal } from '@ali/4ever-component';
import { MentionAt, Toolbar, SuggestionsWrapper } from "./styled";
import MentionSuggestion from "./suggestion";
import { useDelayedState } from '@ali/4ever-component';
import removeMention from "../commands/removeMention";

var MentionSuggestionPortal = function MentionSuggestionPortal(props) {
  var controller = props.controller,
      children = props.children,
      attributes = props.attributes,
      searchSuggestions = props.searchSuggestions,
      loadMoreSuggestions = props.loadMoreSuggestions,
      renderItem = props.renderItem,
      renderHeader = props.renderHeader,
      renderFooter = props.renderFooter,
      renderLoading = props.renderLoading,
      renderEmpty = props.renderEmpty,
      isComposing = props.isComposing,
      text = props.text,
      _props$popupOptions = props.popupOptions,
      popupOptions = _props$popupOptions === void 0 ? {} : _props$popupOptions,
      theme = props.theme,
      getSuggestionTarget = props.getSuggestionTarget;
  var offsetBottom = popupOptions.offsetBottom,
      itemHeight = popupOptions.itemHeight,
      _popupOptions$alignme = popupOptions.alignment,
      alignment = _popupOptions$alignme === void 0 ? 'follow' : _popupOptions$alignme,
      _popupOptions$mountOn = popupOptions.mountOnBody,
      mountOnBody = _popupOptions$mountOn === void 0 ? false : _popupOptions$mountOn,
      _popupOptions$offsets = popupOptions.offsets,
      offsets = _popupOptions$offsets === void 0 ? [0, 0] : _popupOptions$offsets;
  var suggestionPosition = alignment;
  var suggestionOffset = offsets;
  var zoomContainer = useZoomContainer() || document.body;
  var scrollableContent = mountOnBody ? document.body : zoomContainer;
  var zoom = useZoom();

  var _React$useState = React.useState(!isComposing),
      panelVisible = _React$useState[0],
      setPanelVisible = _React$useState[1];

  var _React$useState2 = React.useState([]),
      suggestions = _React$useState2[0],
      setSuggestions = _React$useState2[1];

  var searching = React.useRef(false);

  var _useDelayedState = useDelayedState(false),
      delayedSearching = _useDelayedState[0],
      setDelayedSearching = _useDelayedState[1];

  var _React$useState3 = React.useState(undefined),
      position = _React$useState3[0],
      setPosition = _React$useState3[1];

  var portalRef = React.useRef(null);
  var topOffset = suggestionOffset[0],
      leftOffset = suggestionOffset[1]; // reset loading when search done

  React.useEffect(function () {
    setDelayedSearching(false);
    searching.current = false;
  }, [setDelayedSearching, suggestions]); // do search when text changed

  React.useEffect(function () {
    if (isComposing) {
      return;
    }

    if (!searchSuggestions) {
      // eslint-disable-next-line no-console
      console.warn('Missing `searchSuggestions`');
      return;
    }

    setDelayedSearching(true);
    searching.current = true;
    searchSuggestions(text.slice(1), setSuggestions);
  }, [isComposing, text, searchSuggestions, setDelayedSearching, setSuggestions]);
  React.useEffect(function () {
    if (suggestions || delayedSearching) {
      setPanelVisible(true);
    } else {
      setPanelVisible(false);
    }
  }, [delayedSearching, setPanelVisible, suggestions]);
  React.useEffect(function () {
    var callback = function callback(event) {
      if (event.target instanceof HTMLElement && event.target.closest('.mention-suggestion-list')) {
        // click inside
        return;
      }

      controller.command(removeMention);
    };

    window.document.addEventListener('mousedown', callback);
    return function () {
      window.document.removeEventListener('mousedown', callback);
    };
  }, [controller]);
  React.useLayoutEffect(function () {
    if (isComposing) {
      return;
    }

    if (suggestionPosition !== 'follow') {
      var target = getSuggestionTarget && getSuggestionTarget();

      if (!target) {
        return;
      }

      var current = portalRef.current;

      if (!('getBoundingClientRect' in target) || !(current && 'getBoundingClientRect' in current)) {
        return;
      }

      var cangjieRect = target.getBoundingClientRect();
      var portalRect = current.getBoundingClientRect();
      var pos = null;

      if (suggestionPosition === 'top') {
        pos = {
          top: cangjieRect.top - portalRect.height,
          left: cangjieRect.left
        };
      } else if (suggestionPosition === 'bottom') {
        pos = {
          top: cangjieRect.bottom,
          left: cangjieRect.left
        };
      }

      if (!pos) {
        return;
      }

      setPosition({
        top: pos.top + portalRect.height + topOffset,
        left: pos.left + leftOffset
      });
    }
  }, [suggestionPosition, leftOffset, topOffset, isComposing, getSuggestionTarget]);

  var overlay = /*#__PURE__*/_createElement(Toolbar, {
    active: true
  }, /*#__PURE__*/_createElement(SuggestionsWrapper, {
    "data-testid": "mention-suggestion",
    theme: theme
  }, /*#__PURE__*/_createElement(MentionSuggestion, {
    offsetBottom: offsetBottom,
    loadMoreSuggestions: loadMoreSuggestions,
    renderItem: renderItem,
    renderHeader: renderHeader,
    renderFooter: renderFooter,
    delayedSearching: delayedSearching,
    renderLoading: renderLoading,
    renderEmpty: renderEmpty,
    controller: controller,
    suggestions: suggestions,
    setSuggestions: setSuggestions,
    searching: searching,
    text: text.slice(1),
    theme: theme,
    itemHeight: itemHeight
  })));

  return /*#__PURE__*/_createElement(Portal, {
    portalRef: portalRef,
    overlay: overlay,
    visible: panelVisible,
    container: scrollableContent,
    position: position,
    className: "metion-suggestion-portal",
    zoom: zoom
  }, /*#__PURE__*/_createElement(MentionAt, _extends({}, attributes, {
    "data-type": "mention-at",
    active: true
  }), children()));
};

export default MentionSuggestionPortal;
//# sourceMappingURL=suggestionPortal.js.map