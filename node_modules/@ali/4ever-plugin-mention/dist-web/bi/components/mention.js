import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import * as ReactDOM from 'react-dom';
import { marksToStyle as convertMarks } from '@ali/4ever-plugin-marks';
import MentionComponent from "../../components/mention";
import { MentionNameWrapper } from "../../components/styled";

var returnNull = function returnNull() {
  return null;
};

var Mention = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Mention, _React$Component);

  function Mention() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.handleMentionHover = function () {
      var _this$props = _this.props,
          mentionConfig = _this$props.mentionConfig,
          node = _this$props.node;
      var onMentionHover = mentionConfig.onMentionHover;

      if (onMentionHover) {
        onMentionHover(node);
      }
    };

    return _this;
  }

  var _proto = Mention.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$props2 = this.props,
        node = _this$props2.node,
        mentionId = _this$props2.mentionId;
    var id = node.data.id;

    if (mentionId && mentionId === id) {
      // eslint-disable-next-line react/no-find-dom-node
      var dom = ReactDOM.findDOMNode(this);
      dom.scrollIntoView();
    }
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        node = _this$props3.node,
        attributes = _this$props3.attributes,
        controller = _this$props3.controller,
        isSelected = _this$props3.isSelected,
        injections = _this$props3.injections,
        Placeholder = _this$props3.Placeholder,
        mentionConfig = _this$props3.mentionConfig;
    var selection = controller.value.selection;
    var _node$data = node.data,
        id = _node$data.id,
        name = _node$data.name,
        login = _node$data.login,
        isPlaceholder = _node$data.isPlaceholder;
    var text = node.getFirstText();
    var leaf = text.leaves[0];
    var marks = leaf ? leaf.marks : [];
    var currentUser = mentionConfig.getCurrentUser ? mentionConfig.getCurrentUser() : returnNull;
    var onMentionClick = mentionConfig.onMentionClick,
        _mentionConfig$locale = mentionConfig.locale,
        locale = _mentionConfig$locale === void 0 ? {} : _mentionConfig$locale;
    var isSelf = currentUser && login ? currentUser.toString() === login.toString() : false;
    var style = convertMarks(marks);

    var handleMentionClick = function handleMentionClick(event) {
      event.preventDefault();
      event.stopPropagation();

      if (onMentionClick) {
        onMentionClick(node);
      }
    };

    if (isPlaceholder && !!Placeholder) {
      return /*#__PURE__*/_createElement(Placeholder, {
        controller: controller,
        injections: injections,
        node: node,
        mentionConfig: mentionConfig,
        locale: locale,
        isSelected: isSelected && selection.isCollapsed
      });
    }

    return /*#__PURE__*/_createElement(MentionComponent, _extends({}, attributes, {
      "data-type": "mention",
      isSelf: isSelf,
      id: id,
      isSelected: isSelected && selection.isCollapsed,
      onClick: handleMentionClick,
      onMouseEnter: this.handleMentionHover,
      style: style,
      node: node
    }), "@", /*#__PURE__*/_createElement(MentionNameWrapper, null, name));
  };

  return Mention;
}(React.Component);

export default Mention;
//# sourceMappingURL=mention.js.map