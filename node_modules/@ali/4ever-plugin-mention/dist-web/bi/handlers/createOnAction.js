import { Commands } from '@ali/4ever-cangjie';
import { MENTION_ACTIVE, MENTION_DEACTIVE, MENTION_INSERT, MENTION_MULTIPLE_INSERT, MENTION_PLACEHOLDER_INSERT, MENTION_PLACEHOLDER_EXIT, MENTION_PLACEHOLDER_CANCEL, MENTION_PLACEHOLDER_ACTIVE } from "../actions";
import insertMentionSuggestion, { insertPlaceholder, exitPlaceholder } from "../commands/insertMention";
import insertMentions from "../commands/insertMentions";
import removeMention, { cancelPlaceholder } from "../commands/removeMention";
import setMention from "../commands/setMention";
export default function createOnAction(_ref) {
  var onSuggestionSelected = _ref.onSuggestionSelected;
  return function onAction(action, controller, next) {
    var type = action.type,
        payload = action.payload;

    if (type === MENTION_ACTIVE) {
      return insertMentionSuggestion(controller);
    }

    if (type === MENTION_INSERT) {
      var _ref2 = payload,
          suggestion = _ref2.suggestion,
          at = _ref2.at;

      if (!onSuggestionSelected) {
        return controller.command(setMention, suggestion, at);
      }

      onSuggestionSelected(suggestion, function (suggest) {
        // ËøôÈáå‰∏∫‰ªÄ‰πàË¶Å flush Âë¢ü§îÔºåÂØºËá¥‰∫ÜÊéíÁâàÊ®°Âºè‰∏ãÊèíÂÖ• mention ÂêéÂÖâÊ†áÁßªÂä®Êúâ BUG
        // eslint-disable-next-line @typescript-eslint/indent
        controller.command(setMention, suggest, at).flush();
      });
      return controller;
    }

    if (type === MENTION_DEACTIVE) {
      return controller.command(removeMention);
    }

    if (type === MENTION_MULTIPLE_INSERT) {
      var _ref3 = payload,
          suggestions = _ref3.suggestions;
      return controller.command(insertMentions, suggestions);
    }

    if (type === MENTION_PLACEHOLDER_INSERT) {
      return controller.command(insertPlaceholder);
    }

    if (type === MENTION_PLACEHOLDER_EXIT) {
      var _ref4 = payload,
          text = _ref4.text,
          node = _ref4.node;
      return controller.command(exitPlaceholder, text, node);
    }

    if (type === MENTION_PLACEHOLDER_CANCEL) {
      var _ref5 = payload,
          key = _ref5.key;
      return controller.command(cancelPlaceholder, key);
    }

    if (type === MENTION_PLACEHOLDER_ACTIVE) {
      var _ref6 = payload,
          _node = _ref6.node;
      return controller.command(Commands.moveToEndOfNode, _node);
    }

    return next();
  };
}
//# sourceMappingURL=createOnAction.js.map