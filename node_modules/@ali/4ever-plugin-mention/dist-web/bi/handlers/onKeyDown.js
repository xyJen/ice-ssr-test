import { hotkeys, Commands } from '@ali/4ever-cangjie';
import { isKeyHotkey } from 'is-hotkey';
import { isSelectionInMentionSuggestion } from "../utils";
import removeMention from "../commands/removeMention";
import getMentionAtFocusEdge from "../queries/getMentionAtFocusEdge";
var isEnterHotkey = isKeyHotkey('enter');
var isBackspaceHotkey = isKeyHotkey('backspace');
var isEscHotkey = isKeyHotkey('esc');
var isArrowRightHotKey = isKeyHotkey('right');
var isArrowLeftHotKey = isKeyHotkey('left');

var isMoveHotKey = function isMoveHotKey(event) {
  return ['up', 'down', 'left', 'right'].map(function (key) {
    return isKeyHotkey(key);
  }).some(function (isEvent) {
    return isEvent(event);
  });
};

var isSelectKeyDown = function isSelectKeyDown(event) {
  return ['del', 'backspace', 'left', 'right'].map(function (key) {
    return isKeyHotkey(key);
  }).some(function (isEvent) {
    return isEvent(event);
  });
};

export default function onKeyDown(event, controller, next) {
  var value = controller.value;
  var selection = value.selection,
      document = value.document;

  if (!selection) {
    return next();
  }

  var anchor = selection.anchor;
  var anchorText = document.getNode(anchor.key);
  var anchorOffset = selection.anchor.offset;
  var prevText = anchorText && anchorText.text ? anchorText.text.charAt(anchorOffset - 1) : '';

  if (selection && selection.isCollapsed && isSelectKeyDown(event)) {
    var tagElement;

    if (hotkeys.isDeleteBackward(event) || hotkeys.isDeleteForward(event)) {
      tagElement = getMentionAtFocusEdge(controller, hotkeys.isDeleteBackward(event) ? 'backward' : 'forward');
    } else if (isArrowLeftHotKey(event)) {
      tagElement = getMentionAtFocusEdge(controller, 'backward');
    } else if (isArrowRightHotKey(event)) {
      tagElement = getMentionAtFocusEdge(controller, 'forward');
    }

    if (tagElement) {
      event.preventDefault();
      return controller.command(Commands.moveAnchorToStartOfNode, tagElement).command(Commands.moveFocusToEndOfNode, tagElement);
    }
  }

  if (isSelectionInMentionSuggestion(value) && isEscHotkey(event)) {
    return controller.command(removeMention);
  }

  if (isSelectionInMentionSuggestion(value) && (isEnterHotkey(event) || isMoveHotKey(event))) {
    event.preventDefault();
    event.stopPropagation();
    return controller;
  }

  if (isSelectionInMentionSuggestion(value) && isBackspaceHotkey(event) && prevText === '@') {
    controller.command(removeMention);
  }

  return next();
}
//# sourceMappingURL=onKeyDown.js.map