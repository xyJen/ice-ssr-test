import { Decoration, Commands, Injection, Inline, environment } from '@ali/4ever-cangjie';
import isSelectionInMention from "../utils/isSelectionInMention";
var DEFAULT_PLACEHOLDER_DATA = {
  id: '',
  login: '',
  name: '',
  avatarUrl: '',
  isPlaceholder: true
};
export default function insertMention(controller) {
  var value = controller.value;

  if (!environment.IS_MOBILE && (controller.query('isCollapsedInInlineVoid') || isSelectionInMention(value))) {
    controller.command(Commands.moveToStartOfNextText);
  }

  controller.command(Commands.insertText, '@');
  var decorations = value.decorations.filter(function (item) {
    return item.mark.type !== 'mention';
  });
  var point = controller.value.selection.anchor;
  decorations.push(Decoration.fromJSON({
    start: {
      key: point.key,
      offset: point.offset - 1,
      klass: 'point'
    },
    end: {
      key: point.key,
      offset: point.offset,
      klass: 'point'
    },
    mark: {
      type: 'mention',
      klass: 'mark'
    }
  }));
  return controller.setDecorations(decorations);
}
export var insertPlaceholder = function insertPlaceholder(controller) {
  var value = controller.value;

  if (controller.query('isCollapsedInInlineVoid') || isSelectionInMention(value)) {
    controller.command(Commands.moveToStartOfNextText);
  }

  var inline = Inline.create({
    type: 'mention',
    data: DEFAULT_PLACEHOLDER_DATA
  });
  var injections = controller.value.injections;
  var injection = Injection.create({
    key: inline.key,
    data: {
      active: true
    }
  });
  controller.setInjections([].concat(injections, [injection])).command(Commands.insertInline, inline);
  return controller.setIsFocused(false);
};
export var exitPlaceholder = function exitPlaceholder(controller, text, node) {
  var value = controller.value;

  if (controller.query('isCollapsedInInlineVoid') || isSelectionInMention(value)) {
    controller.command(Commands.moveToStartOfNextText);
  }

  if (!text) {
    return controller.command(Commands.moveToStartOfNode, node).command(Commands.moveToStartOfNextText).command(Commands.focus);
  }

  return controller.command(Commands.moveToStartOfNode, node).command(Commands.removeNodeByKey, node.key).command(Commands.insertText, text);
};
//# sourceMappingURL=insertMention.js.map