import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { unitsConverter, IndUtil } from '@ali/4ever-utils';
import { InputNumber, Select } from '@ali/we-design';
import logger from '@ali/4ever-logger';
import { ConfigItem } from "../styled";
import { commonInputNumberProps, inputNumberStyle, commonSelectStyle, UnitSelect, formatNumber10, checkInputValue, parseInputNumberPara } from "./common";
import { Controller } from '@ali/4ever-cangjie';
/**
 * 右侧面板允许的范围：
 * 比 tab 等交互更大
 * 比word/wps 允许的范围更小，溢出不可见没有意义？
 * 70：A3 横向 窄页边距 时的宽度
 */

var MAX_CHARS = 70;
var MAX = unitsConverter.toPT(IndUtil.charsToPx(MAX_CHARS * 100) + "px"); // pt

export default function IndSet(props) {
  var controller = Controller.useController();
  var locale = props.locale;
  var _locale$paragraph = locale.paragraph,
      pLocale = _locale$paragraph === void 0 ? {} : _locale$paragraph,
      _locale$indent = locale.indent,
      iLocale = _locale$indent === void 0 ? {} : _locale$indent;
  var unitsLocale = [{
    key: 'chars',
    value: pLocale.charsUnit
  }, {
    key: 'pt',
    value: pLocale.ptUnit
  }];

  var _ref = controller.query('getCommonInd'),
      left = _ref.left,
      leftChars = _ref.leftChars,
      right = _ref.right,
      rightChars = _ref.rightChars,
      firstLine = _ref.firstLine,
      firstLineChars = _ref.firstLineChars,
      hanging = _ref.hanging,
      hangingChars = _ref.hangingChars;

  var specialType = 'none';
  var units = {
    left: 'chars',
    right: 'chars',
    special: 'chars'
  };
  var values = {
    left: undefined,
    right: undefined,
    special: undefined
  };

  if (hanging || hangingChars) {
    // hanging > firstLine
    specialType = 'hanging';
    units.special = hangingChars || !hanging ? 'chars' : 'pt';
    values.special = hangingChars ? hangingChars / 100 : unitsConverter.toPT(hanging + "px");
  } else if (firstLine || firstLineChars) {
    specialType = 'firstLine';
    units.special = firstLineChars || !firstLine ? 'chars' : 'pt';
    values.special = firstLineChars ? firstLineChars / 100 : unitsConverter.toPT(firstLine + "px");
  } else {
    units.special = 'chars';
  }

  units.left = leftChars || !left ? 'chars' : 'pt';

  if (leftChars) {
    values.left = leftChars / 100;
  } else if (left !== undefined) {
    values.left = unitsConverter.toPT(left + "px");
  }

  units.right = rightChars || !right ? 'chars' : 'pt';

  if (rightChars) {
    values.right = rightChars / 100;
  } else if (right !== undefined) {
    values.right = unitsConverter.toPT(right + "px");
  }

  var createIndChangeHandler = function createIndChangeHandler(type) {
    return function (arg) {
      var val = parseInputNumberPara(arg);
      if (!checkInputValue(val)) return; // 过滤「相同值」or「特殊缩进值为 0 且之前为 undefined」时的情况，提前 return

      if (val === values[type] || type === 'special' && val === 0 && values[type] === undefined) return;
      var nextInd = {};
      var key = type;

      if (type === 'special') {
        key = specialType === 'none' ? 'firstLine' : specialType;
      }

      var isCharsUnit = units[type] === 'chars';
      val = Math.min(val, isCharsUnit ? MAX_CHARS : MAX);

      if (isCharsUnit) {
        // 换算为与导入一致的单位
        nextInd[key + "Chars"] = val * 100; // 换算兜底

        nextInd["" + key] = IndUtil.charsToPx(nextInd[key + "Chars"]);
      } else {
        nextInd["" + key] = unitsConverter.toPX(val + "pt");
      }

      controller.dispatch('setParagraphInd', nextInd);
      logger.sum("paragraph_sidebar_ind_" + type);
    };
  };

  var handleLeftChange = createIndChangeHandler('left');
  var handleRightChange = createIndChangeHandler('right');
  var handleIndChange = createIndChangeHandler('special');

  var createIndUnitChangeHandler = function createIndUnitChangeHandler(type) {
    return function (unit) {
      // 不允许在未设置首行或缩进的时候改单位
      if (type === 'special' && specialType === 'none') return;
      var isCharsUnit = units[type] === 'chars';
      var max = isCharsUnit ? MAX : MAX_CHARS;
      var nextInd = {}; // 默认 2 字符 24 pt

      var nextValue = isCharsUnit ? 24 : 2;

      if (values[type]) {
        nextValue = Math.min(values[type], max);
      }

      var key = type !== 'special' ? type : specialType;

      if (unit === 'pt') {
        nextInd["" + key] = unitsConverter.toPX(nextValue + "pt");
      } else if (unit === 'chars') {
        nextInd[key + "Chars"] = nextValue * 100; // 兜底

        nextInd["" + key] = IndUtil.charsToPx(nextInd[key + "Chars"]);
      }

      controller.dispatch('setParagraphInd', nextInd);
      logger.sum("paragraph_sidebar_ind_" + type + "_unit_" + unit);
    };
  };

  var handleLeftUnitChange = createIndUnitChangeHandler('left');
  var handleRightUnitChange = createIndUnitChangeHandler('right');
  var handleIndUnitChange = createIndUnitChangeHandler('special');

  var handleIndTypeChange = function handleIndTypeChange(type) {
    if (type === 'none') {
      controller.dispatch('setParagraphInd', {
        firstLine: 0,
        firstLineChars: 0,
        hanging: 0,
        hangingChars: 0
      });
    } else {
      var nextInd = {}; // 默认两字符

      nextInd[type + "Chars"] = 200;
      nextInd["" + type] = IndUtil.charsToPx(nextInd[type + "Chars"]); // 兜底

      controller.dispatch('setParagraphInd', nextInd);
    }

    logger.sum("paragraph_sidebar_ind_special_" + type);
  };

  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(ConfigItem, null, /*#__PURE__*/_createElement("span", {
    className: "label"
  }, iLocale.leftIndent), /*#__PURE__*/_createElement(InputNumber, _extends({
    value: values.left,
    formatter: formatNumber10
  }, commonInputNumberProps, {
    style: inputNumberStyle,
    onStep: handleLeftChange,
    onPressEnter: handleLeftChange,
    onBlur: handleLeftChange,
    key: "left_" + values.left
  })), /*#__PURE__*/_createElement(UnitSelect, {
    value: units.left,
    units: unitsLocale,
    onChange: handleLeftUnitChange
  })), /*#__PURE__*/_createElement(ConfigItem, null, /*#__PURE__*/_createElement("span", {
    className: "label"
  }, iLocale.rightIndent), /*#__PURE__*/_createElement(InputNumber, _extends({
    value: values.right,
    formatter: formatNumber10
  }, commonInputNumberProps, {
    style: inputNumberStyle,
    onStep: handleRightChange,
    onPressEnter: handleRightChange,
    onBlur: handleRightChange,
    key: "right_" + values.right
  })), /*#__PURE__*/_createElement(UnitSelect, {
    value: units.right,
    units: unitsLocale,
    onChange: handleRightUnitChange
  })), /*#__PURE__*/_createElement(ConfigItem, null, /*#__PURE__*/_createElement(Select, {
    defaultValue: "none",
    value: specialType,
    style: commonSelectStyle,
    onChange: handleIndTypeChange
  }, /*#__PURE__*/_createElement(Select.Option, {
    value: "none"
  }, iLocale.noneIndent), /*#__PURE__*/_createElement(Select.Option, {
    value: "firstLine"
  }, iLocale.firstLineIndent), /*#__PURE__*/_createElement(Select.Option, {
    value: "hanging"
  }, iLocale.hangIndent)), /*#__PURE__*/_createElement(InputNumber, _extends({
    value: values.special
  }, commonInputNumberProps, {
    formatter: formatNumber10,
    style: inputNumberStyle,
    onPressEnter: handleIndChange,
    onBlur: handleIndChange,
    onStep: handleIndChange,
    key: "special_" + values.special
  })), /*#__PURE__*/_createElement(UnitSelect, {
    value: units.special,
    units: unitsLocale,
    onChange: handleIndUnitChange
  })));
}
//# sourceMappingURL=ind.js.map