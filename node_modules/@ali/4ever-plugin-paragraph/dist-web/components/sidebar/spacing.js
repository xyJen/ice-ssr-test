import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Controller, useStyle } from '@ali/4ever-cangjie';
import { unitsConverter, theme, SpacingUtil } from '@ali/4ever-utils';
import { InputNumber, Select } from '@ali/we-design';
import logger from '@ali/4ever-logger';
import { ConfigItem } from "../styled";
import { commonInputNumberProps, inputNumberStyle, UnitSelect, commonSelectStyle, formatNumber10, formatNumber100, checkInputValue, parseInputNumberPara } from "./common";
/** 
 * TODO: 待 lineHeight 插件迁移后，改为 package 引入
 */

var setLineHeight = function setLineHeight(lineHeight, lineRule) {
  return {
    type: 'ACTION_LINEHEIGHT_SET',
    payload: {
      lineHeight: lineHeight,
      lineRule: lineRule
    }
  };
};
/**
 * 50：大概是一页的高度
 */


var MAX_LINES = 50;
var MAX = unitsConverter.toPT(SpacingUtil.linesToPx(MAX_LINES) + "px");
export default function SpacingSet(props) {
  var _docStyle$docDefaults, _docStyle$docDefaults2, _docStyle$docDefaults3;

  var controller = Controller.useController();
  var locale = props.locale;
  var _locale$paragraph = locale.paragraph,
      pLocale = _locale$paragraph === void 0 ? {} : _locale$paragraph,
      _locale$line = locale.line,
      lLocale = _locale$line === void 0 ? {} : _locale$line;
  var unitsLocale = [{
    key: 'pt',
    value: pLocale.ptUnit
  }, {
    key: 'lines',
    value: pLocale.linesUnit
  }, {
    key: 'auto',
    value: pLocale.autoUnit
  }];
  var docStyle = useStyle();

  var _ref = controller.query('getCommonSpacing', docStyle == null ? void 0 : (_docStyle$docDefaults = docStyle.docDefaults) == null ? void 0 : (_docStyle$docDefaults2 = _docStyle$docDefaults.data) == null ? void 0 : (_docStyle$docDefaults3 = _docStyle$docDefaults2.pPr) == null ? void 0 : _docStyle$docDefaults3.spacing),
      before = _ref.before,
      beforeLines = _ref.beforeLines,
      beforeAutospacing = _ref.beforeAutospacing,
      after = _ref.after,
      afterLines = _ref.afterLines,
      afterAutospacing = _ref.afterAutospacing,
      _ref$lineRule = _ref.lineRule,
      lineRule = _ref$lineRule === void 0 ? 'auto' : _ref$lineRule,
      line = _ref.line;

  var units = {
    before: 'pt',
    after: 'pt',
    line: lineRule !== 'auto' ? 'pt' : 'lines'
  };
  var values = {
    before: before,
    after: after,
    line: line
  };

  if (lineRule !== 'auto') {
    values.line = unitsConverter.toPT(line + "px");
  }

  if (beforeAutospacing) {
    units.before = 'auto';
    values.before = undefined;
  } else if (beforeLines) {
    units.before = 'lines';
    values.before = beforeLines;
  }

  if (units.before === 'pt' && values.before) {
    // 转换为 pt
    values.before = unitsConverter.toPT(values.before + "px");
  }

  if (afterAutospacing) {
    units.after = 'auto';
    values.after = undefined;
  } else if (afterLines) {
    units.after = 'lines';
    values.after = afterLines;
  }

  if (units.after === 'pt' && values.after) {
    values.after = unitsConverter.toPT(values.after + "px");
  }

  var handleLineChange = function handleLineChange(arg) {
    var val = parseInputNumberPara(arg);

    if (lineRule === 'exact' || lineRule === 'atLeast') {
      // 转换为与导入一致的单位
      val /= 12;
    } // 不允许设置 0


    if (!val || !checkInputValue(val)) return;
    if (val === values.line) return;
    val = Math.min(val, units.line === 'lines' ? MAX_LINES : MAX);
    controller.run('onAction', setLineHeight(val, lineRule));
    logger.sum('paragraph_sidebar_spacing_line');
  };

  var handleLineRuleChange = function handleLineRuleChange(type) {
    if (type === 'exact') {
      // 切换为固定值时默认为 24pt
      controller.run('onAction', setLineHeight(2, type));
    } else if (type === 'auto') {
      // 切换为多倍时默认为 1倍行距
      controller.run('onAction', setLineHeight(1, type));
    }

    logger.sum("paragraph_sidebar_spacing_lineRule_" + type);
  };

  var createSpacingChangeHandler = function createSpacingChangeHandler(type) {
    return function (arg) {
      var val = parseInputNumberPara(arg);
      if (!checkInputValue(val)) return;
      if (val === values[type]) return;
      val = Math.min(val, units[type] === 'lines' ? MAX_LINES : MAX);
      var nextSpacing = {};
      var isLinesUnit = units[type] === 'lines';
      nextSpacing[type + "Autospacing"] = false;

      if (isLinesUnit) {
        nextSpacing[type + "Lines"] = val; // 同步设置 before/after 作为兜底

        nextSpacing[type] = SpacingUtil.linesToPx(val);
      } else {
        nextSpacing[type] = unitsConverter.toPX(val + "pt");
      }

      controller.dispatch('setParagraphSpacing', nextSpacing);
      logger.sum("paragraph_sidebar_spacing_" + type);
    };
  };

  var handleBeforeChange = createSpacingChangeHandler('before');
  var handleAfterChange = createSpacingChangeHandler('after');

  var createSpacingUnitChangeHandler = function createSpacingUnitChangeHandler(type) {
    return function (unit) {
      var nextSpacing = {};

      if (unit === 'pt' || unit === 'lines') {
        nextSpacing[type + "Autospacing"] = false;
        nextSpacing[type] = unit === 'pt' ? theme.spacing.defaultLinePitch : 0;
        nextSpacing[type + "Lines"] = unit === 'pt' ? 0 : 1;
      } else if (unit === 'auto') {
        nextSpacing[type + "Autospacing"] = true; // 按照前 5pt 后 10pt 兜底

        nextSpacing[type] = type === 'after' ? theme.spacing.defaultAfterAutospacing : theme.spacing.defaultBeforeAutospacing;
      }

      controller.dispatch('setParagraphSpacing', nextSpacing);
      logger.sum("paragraph_sidebar_spacing_" + type + "_unit_" + unit);
    };
  };

  var handleBeforeUnitChange = createSpacingUnitChangeHandler('before');
  var handleAfterUnitChange = createSpacingUnitChangeHandler('after');
  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(ConfigItem, null, /*#__PURE__*/_createElement("span", {
    className: "label"
  }, pLocale.spacingBefore), /*#__PURE__*/_createElement(InputNumber, _extends({
    value: values.before,
    formatter: formatNumber10
  }, commonInputNumberProps, {
    style: inputNumberStyle,
    onStep: handleBeforeChange,
    onPressEnter: handleBeforeChange,
    onBlur: handleBeforeChange,
    key: "before_" + values.before
  })), /*#__PURE__*/_createElement(UnitSelect, {
    value: units.before,
    units: unitsLocale,
    onChange: handleBeforeUnitChange
  })), /*#__PURE__*/_createElement(ConfigItem, null, /*#__PURE__*/_createElement("span", {
    className: "label"
  }, pLocale.spacingAfter), /*#__PURE__*/_createElement(InputNumber, _extends({
    value: values.after
  }, commonInputNumberProps, {
    formatter: formatNumber10,
    style: inputNumberStyle,
    onStep: handleAfterChange,
    onPressEnter: handleAfterChange,
    onBlur: handleAfterChange,
    key: "after_" + values.after
  })), /*#__PURE__*/_createElement(UnitSelect, {
    value: units.after,
    units: unitsLocale,
    onChange: handleAfterUnitChange
  })), /*#__PURE__*/_createElement(ConfigItem, null, /*#__PURE__*/_createElement(Select, {
    defaultValue: "auto",
    value: lineRule !== 'auto' ? 'exact' : 'auto',
    style: commonSelectStyle,
    onChange: handleLineRuleChange
  }, /*#__PURE__*/_createElement(Select.Option, {
    value: "auto"
  }, lLocale.multipleLineRule), /*#__PURE__*/_createElement(Select.Option, {
    value: "exact"
  }, lLocale.exactlyLineRule)), /*#__PURE__*/_createElement(InputNumber, _extends({
    value: values.line
  }, commonInputNumberProps, {
    max: 100,
    step: lineRule === 'auto' ? 0.1 : 1,
    formatter: lineRule === 'auto' ? formatNumber100 : formatNumber10,
    style: inputNumberStyle,
    onPressEnter: handleLineChange,
    onBlur: handleLineChange,
    onStep: handleLineChange,
    key: "line_" + values.line
  })), units.line === 'pt' ? /*#__PURE__*/_createElement("span", {
    style: {
      marginLeft: 7
    }
  }, pLocale.ptUnit) : null));
}
//# sourceMappingURL=spacing.js.map