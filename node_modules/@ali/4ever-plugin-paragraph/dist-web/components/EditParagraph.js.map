{"version":3,"sources":["../../../src/components/EditParagraph.tsx"],"names":["React","MoCommon","IndUtil","SpacingUtil","ShdUtil","Component","BorderStyleEnum","DEFAULT_BORDER_COLOR","Paragraph","render","props","id","node","attributes","children","visible","isPi","data","pi","alignType","jc","textAlignLast","color","spacing","shd","fromBlock","left","firstLine","right","hanging","isList","list","paddingLeft","nodeStyle","style","nodePaddingLeft","paddingRight","nodePaddingRight","textAlign","textIndent","line","lineHeight","getLineHeightFromSpacing","display","marginTop","marginBottom","box","margin","top","bottom","backgroundColor","transformShd","bdr","val","Single","sz","bdrColor","space","borderStyle","borderColor","borderTop","paddingTop","borderBottom","paddingBottom","borderLeft","borderRight","type","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport * as React from 'react';\nimport { Controller, Block, MoCommon } from '@ali/4ever-cangjie';\nimport { IndUtil, SpacingUtil, ShdUtil } from '@ali/4ever-utils';\nimport type { ParagraphData } from '../mo/models';\nimport { Component } from './styled';\n\n\ntype BdrProperties = Required<ParagraphData>['bdr'];\n\nconst { BorderStyleEnum } = MoCommon;\n\nconst DEFAULT_BORDER_COLOR = '#000000';\n\nexport interface ParagraphProps {\n  id?: string;\n  controller: Controller;\n  node: Block;\n  Component: string;\n  attributes: Record<string, any>;\n  isList?: boolean;\n  visible?: boolean;\n}\n\n\nclass Paragraph extends React.Component<ParagraphProps> {\n  static defaultProps = {\n    Component,\n  };\n\n  render() {\n    const {\n      Component,\n      id,\n      node,\n      attributes,\n      children,\n      visible,\n    } = this.props;\n\n    // TODO: HACK pi 和 bi 实现缩进机制不一致\n    const isPi = !!node.data.pi;\n\n    /* 段落对齐 */\n    let alignType = node.data.jc || 'left';\n    let textAlignLast: 'justify' | undefined;\n\n    if (alignType === 'distribute') {\n      alignType = 'justify';\n      textAlignLast = 'justify';\n    }\n\n    const { color, spacing, shd } = node.data;\n    const {\n      left,\n      firstLine = 0,\n      right,\n      hanging,\n    } = IndUtil.fromBlock(node);\n\n    /* 列表 */\n    const isList = !!node.data.list;\n\n    let paddingLeft = left || 0;\n    if (!isPi && hanging) {\n      // 悬挂缩进时整体 paddingLeft 增加，靠 text-indent < 0 实现\n      paddingLeft += hanging;\n    }\n    const nodeStyle = attributes?.style ?? {};\n    const {\n      paddingLeft: nodePaddingLeft = 0,\n      paddingRight: nodePaddingRight = 0,\n    } = nodeStyle as Record<string, number>;\n\n    // 缩进\n    const style: React.CSSProperties = {\n      ...nodeStyle,\n      textAlign: alignType,\n      textIndent: (isList || isPi) ? 0 : (hanging ? -hanging : firstLine),\n      paddingLeft: isList ? 0 : paddingLeft + nodePaddingLeft,\n      paddingRight: right || nodePaddingRight,\n    };\n\n    if (spacing?.line) {\n      style.lineHeight = SpacingUtil.getLineHeightFromSpacing(spacing);\n    }\n\n    // TODO: refactor\n    if (textAlignLast) {\n      style.textAlignLast = textAlignLast;\n    }\n\n    if (visible === false) {\n      style.display = 'none';\n    }\n\n    if (isPi) {\n      // 列表场景下清空上下边距，在列表处渲染，否则采用盒模型中的边距数据\n      if (isList) {\n        style.marginTop = 0;\n        style.marginBottom = 0;\n      } else {\n      // pi-1.0 中也注入了 pi 信息，但是不全...\n        const { margin = {} } = node.data.pi.box || {};\n        const { top = 0, bottom = 0 } = margin;\n        style.marginTop = top;\n        style.marginBottom = bottom;\n      }\n      // 排版下没有外部统一的 block div，这里特殊兼容下\n      if (shd) {\n        style.backgroundColor = ShdUtil.transformShd(shd);\n      }\n    }\n\n    // 边框：目前的段落和列表结构不严谨，列表会包裹一层 DOM\n    if (!isList) {\n      const bdr = (node.data.bdr || {}) as BdrProperties;\n      if (bdr.top) {\n        const { val = BorderStyleEnum.Single, sz = 1, color: bdrColor = DEFAULT_BORDER_COLOR, space = 0 } = bdr.top;\n        const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;\n        const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;\n        style.borderTop = `${sz}px ${borderStyle} ${borderColor}`;\n        style.paddingTop = space;\n      }\n      if (bdr.bottom) {\n        const { val = BorderStyleEnum.Single, sz = 1, color: bdrColor = DEFAULT_BORDER_COLOR, space = 0 } = bdr.bottom;\n        const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;\n        const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;\n        style.borderBottom = `${sz}px ${borderStyle} ${borderColor}`;\n        style.paddingBottom = space;\n      }\n      if (bdr.left) {\n        const { val = BorderStyleEnum.Single, sz = 1, color: bdrColor = DEFAULT_BORDER_COLOR, space = 0 } = bdr.left;\n        const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;\n        const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;\n        style.borderLeft = `${sz}px ${borderStyle} ${borderColor}`;\n        style.paddingLeft = space + (isList ? 0 : paddingLeft);\n      }\n      if (bdr.right) {\n        const { val = BorderStyleEnum.Single, sz = 1, color: bdrColor = DEFAULT_BORDER_COLOR, space = 0 } = bdr.right;\n        const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;\n        const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;\n        style.borderRight = `${sz}px ${borderStyle} ${borderColor}`;\n        style.paddingRight = space;\n      }\n    }\n\n    if (color) {\n      style.color = color;\n    }\n\n    return (\n      // @ts-ignore\n      <Component {...attributes} data-type={node.type} id={id} style={style}>\n        {children}\n      </Component>\n    );\n  }\n}\n\nexport default Paragraph;\n"],"file":"EditParagraph.js"}