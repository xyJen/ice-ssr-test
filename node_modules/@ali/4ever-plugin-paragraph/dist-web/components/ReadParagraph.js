import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { MoCommon } from '@ali/4ever-cangjie';
import { IndUtil, SpacingUtil, ShdUtil } from '@ali/4ever-utils';
var BorderStyleEnum = MoCommon.BorderStyleEnum;
var DEFAULT_BORDER_COLOR = '#000000';
export default /*#__PURE__*/React.forwardRef(function (props, ref) {
  var Component = props.Component,
      node = props.node,
      children = props.children,
      isList = props.isList,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      rest = _objectWithoutPropertiesLoose(props, ["Component", "node", "children", "isList", "style"]);

  var _ref = node.data,
      _ref$jc = _ref.jc,
      jc = _ref$jc === void 0 ? 'left' : _ref$jc,
      spacing = _ref.spacing,
      shd = _ref.shd; // TODO: HACK pi 和 bi 实现缩进机制不一致

  var isPi = !!node.data.pi;

  var _IndUtil$fromBlock = IndUtil.fromBlock(node),
      left = _IndUtil$fromBlock.left,
      _IndUtil$fromBlock$fi = _IndUtil$fromBlock.firstLine,
      firstLine = _IndUtil$fromBlock$fi === void 0 ? 0 : _IndUtil$fromBlock$fi,
      right = _IndUtil$fromBlock.right,
      hanging = _IndUtil$fromBlock.hanging;

  var paddingLeft = left || 0;

  if (!isPi && hanging) {
    // 悬挂缩进时整体 paddingLeft 增加，靠 text-indent < 0 实现
    paddingLeft += hanging;
  }

  var _ref2 = style,
      _ref2$paddingLeft = _ref2.paddingLeft,
      nodePaddingLeft = _ref2$paddingLeft === void 0 ? 0 : _ref2$paddingLeft,
      _ref2$paddingRight = _ref2.paddingRight,
      nodePaddingRight = _ref2$paddingRight === void 0 ? 0 : _ref2$paddingRight;

  var paragraphStyle = _extends({}, style, {
    textAlign: jc === 'distribute' ? 'justify' : jc,
    textIndent: isList || isPi ? 0 : hanging ? -hanging : firstLine,
    paddingLeft: isList ? 0 : paddingLeft + nodePaddingLeft,
    paddingRight: right || nodePaddingRight
  });

  if (jc === 'distribute') {
    paragraphStyle.textAlignLast = 'justify';
  }

  if (spacing != null && spacing.line) {
    paragraphStyle.lineHeight = SpacingUtil.getLineHeightFromSpacing(spacing);
  } // Pi-2.0 会注入 pi 数据


  if (node.data.pi) {
    // 列表场景下清空上下边距，在列表处渲染，否则采用盒模型中的边距数据
    if (isList) {
      paragraphStyle.marginTop = 0;
      paragraphStyle.marginBottom = 0;
    } else {
      // pi-1.0 中也注入了 pi 信息，但是不全...
      var _ref3 = node.data.pi.box || {},
          _ref3$margin = _ref3.margin,
          margin = _ref3$margin === void 0 ? {} : _ref3$margin;

      var _margin$top = margin.top,
          top = _margin$top === void 0 ? 0 : _margin$top,
          _margin$bottom = margin.bottom,
          bottom = _margin$bottom === void 0 ? 0 : _margin$bottom;
      paragraphStyle.marginTop = top;
      paragraphStyle.marginBottom = bottom;
    } // 排版下没有外部统一的 block div，这里特殊兼容下


    if (shd) {
      paragraphStyle.backgroundColor = ShdUtil.transformShd(shd);
    }
  } // 段落边框：在列表的场景下由于被 wrapper 包裹所以要消掉 border


  var bdr = node.data.bdr || {};

  if (!isList && bdr.top) {
    var _bdr$top = bdr.top,
        _bdr$top$val = _bdr$top.val,
        val = _bdr$top$val === void 0 ? BorderStyleEnum.Single : _bdr$top$val,
        _bdr$top$sz = _bdr$top.sz,
        sz = _bdr$top$sz === void 0 ? 1 : _bdr$top$sz,
        _bdr$top$color = _bdr$top.color,
        bdrColor = _bdr$top$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$top$color,
        _bdr$top$space = _bdr$top.space,
        space = _bdr$top$space === void 0 ? 0 : _bdr$top$space;
    var borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
    var borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
    paragraphStyle.borderTop = sz + "px " + borderStyle + " " + borderColor;
    paragraphStyle.paddingTop = space;
  }

  if (!isList && bdr.bottom) {
    var _bdr$bottom = bdr.bottom,
        _bdr$bottom$val = _bdr$bottom.val,
        _val = _bdr$bottom$val === void 0 ? BorderStyleEnum.Single : _bdr$bottom$val,
        _bdr$bottom$sz = _bdr$bottom.sz,
        _sz = _bdr$bottom$sz === void 0 ? 1 : _bdr$bottom$sz,
        _bdr$bottom$color = _bdr$bottom.color,
        _bdrColor = _bdr$bottom$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$bottom$color,
        _bdr$bottom$space = _bdr$bottom.space,
        _space = _bdr$bottom$space === void 0 ? 0 : _bdr$bottom$space;

    var _borderStyle = _val === BorderStyleEnum.Single ? 'solid' : _val;

    var _borderColor = _bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : _bdrColor;

    paragraphStyle.borderBottom = _sz + "px " + _borderStyle + " " + _borderColor;
    paragraphStyle.paddingBottom = _space;
  }

  if (!isList && bdr.left) {
    var _bdr$left = bdr.left,
        _bdr$left$val = _bdr$left.val,
        _val2 = _bdr$left$val === void 0 ? BorderStyleEnum.Single : _bdr$left$val,
        _bdr$left$sz = _bdr$left.sz,
        _sz2 = _bdr$left$sz === void 0 ? 1 : _bdr$left$sz,
        _bdr$left$color = _bdr$left.color,
        _bdrColor2 = _bdr$left$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$left$color,
        _bdr$left$space = _bdr$left.space,
        _space2 = _bdr$left$space === void 0 ? 0 : _bdr$left$space;

    var _borderStyle2 = _val2 === BorderStyleEnum.Single ? 'solid' : _val2;

    var _borderColor2 = _bdrColor2 === 'auto' ? DEFAULT_BORDER_COLOR : _bdrColor2;

    paragraphStyle.borderLeft = _sz2 + "px " + _borderStyle2 + " " + _borderColor2;
    paragraphStyle.paddingLeft = _space2;
  }

  if (!isList && bdr.right) {
    var _bdr$right = bdr.right,
        _bdr$right$val = _bdr$right.val,
        _val3 = _bdr$right$val === void 0 ? BorderStyleEnum.Single : _bdr$right$val,
        _bdr$right$sz = _bdr$right.sz,
        _sz3 = _bdr$right$sz === void 0 ? 1 : _bdr$right$sz,
        _bdr$right$color = _bdr$right.color,
        _bdrColor3 = _bdr$right$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$right$color,
        _bdr$right$space = _bdr$right.space,
        _space3 = _bdr$right$space === void 0 ? 0 : _bdr$right$space;

    var _borderStyle3 = _val3 === BorderStyleEnum.Single ? 'solid' : _val3;

    var _borderColor3 = _bdrColor3 === 'auto' ? DEFAULT_BORDER_COLOR : _bdrColor3;

    paragraphStyle.borderRight = _sz3 + "px " + _borderStyle3 + " " + _borderColor3;
    paragraphStyle.paddingRight = _space3;
  }

  return /*#__PURE__*/_createElement(Component, _extends({}, rest, {
    "data-type": node.type,
    ref: ref,
    style: paragraphStyle
  }), children);
});
//# sourceMappingURL=ReadParagraph.js.map