import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/* eslint-disable import/no-extraneous-dependencies */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { MoCommon } from '@ali/4ever-cangjie';
import { IndUtil, SpacingUtil, ShdUtil } from '@ali/4ever-utils';
import { Component } from "./styled";
var BorderStyleEnum = MoCommon.BorderStyleEnum;
var DEFAULT_BORDER_COLOR = '#000000';

var Paragraph = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Paragraph, _React$Component);

  function Paragraph() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Paragraph.prototype;

  _proto.render = function render() {
    var _attributes$style;

    var _this$props = this.props,
        Component = _this$props.Component,
        id = _this$props.id,
        node = _this$props.node,
        attributes = _this$props.attributes,
        children = _this$props.children,
        visible = _this$props.visible; // TODO: HACK pi 和 bi 实现缩进机制不一致

    var isPi = !!node.data.pi;
    /* 段落对齐 */

    var alignType = node.data.jc || 'left';
    var textAlignLast;

    if (alignType === 'distribute') {
      alignType = 'justify';
      textAlignLast = 'justify';
    }

    var _node$data = node.data,
        color = _node$data.color,
        spacing = _node$data.spacing,
        shd = _node$data.shd;

    var _IndUtil$fromBlock = IndUtil.fromBlock(node),
        left = _IndUtil$fromBlock.left,
        _IndUtil$fromBlock$fi = _IndUtil$fromBlock.firstLine,
        firstLine = _IndUtil$fromBlock$fi === void 0 ? 0 : _IndUtil$fromBlock$fi,
        right = _IndUtil$fromBlock.right,
        hanging = _IndUtil$fromBlock.hanging;
    /* 列表 */


    var isList = !!node.data.list;
    var paddingLeft = left || 0;

    if (!isPi && hanging) {
      // 悬挂缩进时整体 paddingLeft 增加，靠 text-indent < 0 实现
      paddingLeft += hanging;
    }

    var nodeStyle = (_attributes$style = attributes == null ? void 0 : attributes.style) != null ? _attributes$style : {};
    var _ref = nodeStyle,
        _ref$paddingLeft = _ref.paddingLeft,
        nodePaddingLeft = _ref$paddingLeft === void 0 ? 0 : _ref$paddingLeft,
        _ref$paddingRight = _ref.paddingRight,
        nodePaddingRight = _ref$paddingRight === void 0 ? 0 : _ref$paddingRight; // 缩进

    var style = _extends({}, nodeStyle, {
      textAlign: alignType,
      textIndent: isList || isPi ? 0 : hanging ? -hanging : firstLine,
      paddingLeft: isList ? 0 : paddingLeft + nodePaddingLeft,
      paddingRight: right || nodePaddingRight
    });

    if (spacing != null && spacing.line) {
      style.lineHeight = SpacingUtil.getLineHeightFromSpacing(spacing);
    } // TODO: refactor


    if (textAlignLast) {
      style.textAlignLast = textAlignLast;
    }

    if (visible === false) {
      style.display = 'none';
    }

    if (isPi) {
      // 列表场景下清空上下边距，在列表处渲染，否则采用盒模型中的边距数据
      if (isList) {
        style.marginTop = 0;
        style.marginBottom = 0;
      } else {
        // pi-1.0 中也注入了 pi 信息，但是不全...
        var _ref2 = node.data.pi.box || {},
            _ref2$margin = _ref2.margin,
            margin = _ref2$margin === void 0 ? {} : _ref2$margin;

        var _margin$top = margin.top,
            top = _margin$top === void 0 ? 0 : _margin$top,
            _margin$bottom = margin.bottom,
            bottom = _margin$bottom === void 0 ? 0 : _margin$bottom;
        style.marginTop = top;
        style.marginBottom = bottom;
      } // 排版下没有外部统一的 block div，这里特殊兼容下


      if (shd) {
        style.backgroundColor = ShdUtil.transformShd(shd);
      }
    } // 边框：目前的段落和列表结构不严谨，列表会包裹一层 DOM


    if (!isList) {
      var bdr = node.data.bdr || {};

      if (bdr.top) {
        var _bdr$top = bdr.top,
            _bdr$top$val = _bdr$top.val,
            val = _bdr$top$val === void 0 ? BorderStyleEnum.Single : _bdr$top$val,
            _bdr$top$sz = _bdr$top.sz,
            sz = _bdr$top$sz === void 0 ? 1 : _bdr$top$sz,
            _bdr$top$color = _bdr$top.color,
            bdrColor = _bdr$top$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$top$color,
            _bdr$top$space = _bdr$top.space,
            space = _bdr$top$space === void 0 ? 0 : _bdr$top$space;
        var borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
        var borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
        style.borderTop = sz + "px " + borderStyle + " " + borderColor;
        style.paddingTop = space;
      }

      if (bdr.bottom) {
        var _bdr$bottom = bdr.bottom,
            _bdr$bottom$val = _bdr$bottom.val,
            _val = _bdr$bottom$val === void 0 ? BorderStyleEnum.Single : _bdr$bottom$val,
            _bdr$bottom$sz = _bdr$bottom.sz,
            _sz = _bdr$bottom$sz === void 0 ? 1 : _bdr$bottom$sz,
            _bdr$bottom$color = _bdr$bottom.color,
            _bdrColor = _bdr$bottom$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$bottom$color,
            _bdr$bottom$space = _bdr$bottom.space,
            _space = _bdr$bottom$space === void 0 ? 0 : _bdr$bottom$space;

        var _borderStyle = _val === BorderStyleEnum.Single ? 'solid' : _val;

        var _borderColor = _bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : _bdrColor;

        style.borderBottom = _sz + "px " + _borderStyle + " " + _borderColor;
        style.paddingBottom = _space;
      }

      if (bdr.left) {
        var _bdr$left = bdr.left,
            _bdr$left$val = _bdr$left.val,
            _val2 = _bdr$left$val === void 0 ? BorderStyleEnum.Single : _bdr$left$val,
            _bdr$left$sz = _bdr$left.sz,
            _sz2 = _bdr$left$sz === void 0 ? 1 : _bdr$left$sz,
            _bdr$left$color = _bdr$left.color,
            _bdrColor2 = _bdr$left$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$left$color,
            _bdr$left$space = _bdr$left.space,
            _space2 = _bdr$left$space === void 0 ? 0 : _bdr$left$space;

        var _borderStyle2 = _val2 === BorderStyleEnum.Single ? 'solid' : _val2;

        var _borderColor2 = _bdrColor2 === 'auto' ? DEFAULT_BORDER_COLOR : _bdrColor2;

        style.borderLeft = _sz2 + "px " + _borderStyle2 + " " + _borderColor2;
        style.paddingLeft = _space2 + (isList ? 0 : paddingLeft);
      }

      if (bdr.right) {
        var _bdr$right = bdr.right,
            _bdr$right$val = _bdr$right.val,
            _val3 = _bdr$right$val === void 0 ? BorderStyleEnum.Single : _bdr$right$val,
            _bdr$right$sz = _bdr$right.sz,
            _sz3 = _bdr$right$sz === void 0 ? 1 : _bdr$right$sz,
            _bdr$right$color = _bdr$right.color,
            _bdrColor3 = _bdr$right$color === void 0 ? DEFAULT_BORDER_COLOR : _bdr$right$color,
            _bdr$right$space = _bdr$right.space,
            _space3 = _bdr$right$space === void 0 ? 0 : _bdr$right$space;

        var _borderStyle3 = _val3 === BorderStyleEnum.Single ? 'solid' : _val3;

        var _borderColor3 = _bdrColor3 === 'auto' ? DEFAULT_BORDER_COLOR : _bdrColor3;

        style.borderRight = _sz3 + "px " + _borderStyle3 + " " + _borderColor3;
        style.paddingRight = _space3;
      }
    }

    if (color) {
      style.color = color;
    }

    return (
      /*#__PURE__*/
      // @ts-ignore
      _createElement(Component, _extends({}, attributes, {
        "data-type": node.type,
        id: id,
        style: style
      }), children)
    );
  };

  return Paragraph;
}(React.Component);

Paragraph.defaultProps = {
  Component: Component
};
export default Paragraph;
//# sourceMappingURL=EditParagraph.js.map