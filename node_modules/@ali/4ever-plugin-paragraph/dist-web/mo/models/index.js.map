{"version":3,"sources":["../../../../src/mo/models/index.ts"],"names":["Block","ELEMENT_TYPE","Paragraph","create","properties","Error","isParagraph","type","TYPE","maybeParagraph","isBlock"],"mappings":";;AAAA,SAASA,KAAT,QAAmD,oBAAnD;AAEA,SAASC,YAAT;;IAiFqBC,S;;;;;;;YAGZC,M,GAAP,gBACEC,UADF,EAEE;AAAA,QADAA,UACA;AADAA,MAAAA,UACA,GAD+D,EAC/D;AAAA;;AACA,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,QAAIH,SAAS,CAACI,WAAV,CAAsBF,UAAtB,CAAJ,EAAuC;AACrC,aAAOA,UAAP;AACD;;AACD,kBAAaD,MAAb,yBACKC,UADL;AAEEG,MAAAA,IAAI,EAAEL,SAAS,CAACM;AAFlB;AAID,G;;YAEMF,W,GAAP,qBAAmBG,cAAnB,EAAqE;AACnE,WAAOT,KAAK,CAACU,OAAN,CAAcD,cAAd,KAAiCA,cAAc,CAACF,IAAf,KAAwBL,SAAS,CAACM,IAA1E;AACD,G;;;EApBoCR,K;;AAAlBE,S,CACZM,I,GAAOP,Y;SADKC,S","sourcesContent":["import { Block, BlockChildren, Data, Inline } from '@ali/4ever-cangjie';\nimport type { MoInterfaces } from '@ali/4ever-cangjie';\nimport { ELEMENT_TYPE } from '../meta';\nimport type { IndentProperties, SpacingProperties, ShdData, ListProperties, TabStyle } from '@ali/4ever-utils';\n\nexport interface ParagraphData extends Data {\n\n  /**\n   * 段落水平对齐方式\n   * justify == both\n   * start == left\n   * end == right\n   */\n  jc?: 'left' | 'center' | 'right' | 'both' | 'distribute' | 'justify';\n  /**\n   * 段落缩进方式\n   */\n  ind?: IndentProperties;\n\n  /**\n   * 列表定义\n   */\n  list?: ListProperties;\n\n  /**\n   * 引用定义\n   */\n  blockquote?: boolean;\n\n  /**\n   * 行间距定义\n   */\n  spacing?: SpacingProperties;\n\n  /**\n   * 段落边框\n   */\n  bdr?: MoInterfaces.Border.Border;\n\n  /**\n   * 段落-孤行控制\n   */\n  widowControl?: boolean;\n\n  /**\n   * 段落-与下段同页\n   */\n  keepNext?: boolean;\n\n  /**\n   * 段落-段中不分页\n   */\n  keepLines?: boolean;\n\n  /**\n   * 段落-段前分页\n   */\n  pageBreakBefore?: boolean;\n  /**\n   * 图文框 - 浮动页码/首字下沉\n   */\n  framePr?: MoInterfaces.FramePr.FramePr;\n  /**\n   * 段落底纹\n   */\n  shd?: ShdData;\n  /**\n   * 制表符样式\n   */\n  tabs?: TabStyle[];\n  /**\n   * 高亮块\n   */\n  calloutPr?: MoInterfaces.CalloutPr.CalloutPr;\n}\n\nexport type ParagraphChildren<T extends Inline = Inline> = Array<T>;\n\nexport interface ParagraphProperties<D = ParagraphData, N extends BlockChildren = ParagraphChildren> {\n  data?: D;\n  nodes?: N;\n}\n\nexport default class Paragraph extends Block<ParagraphData, ParagraphChildren> {\n  static TYPE = ELEMENT_TYPE;\n\n  static create<SD = ParagraphData, SN extends BlockChildren = ParagraphChildren>(\n    properties: Paragraph | ParagraphProperties<SD, SN> | string = {},\n  ) {\n    if (typeof properties === 'string') {\n      throw new Error('`Paragraph.create` does not accept string');\n    }\n    if (Paragraph.isParagraph(properties)) {\n      return properties as Block<SD, SN>;\n    }\n    return super.create<SD, SN>({\n      ...properties,\n      type: Paragraph.TYPE,\n    });\n  }\n\n  static isParagraph(maybeParagraph: any): maybeParagraph is Paragraph {\n    return Block.isBlock(maybeParagraph) && maybeParagraph.type === Paragraph.TYPE;\n  }\n}\n"],"file":"index.js"}