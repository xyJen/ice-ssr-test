{"version":3,"sources":["../../../../src/mo/serializer/valueToText.ts"],"names":["Paragraph","isPureParagraphValue","BREAK","valueToText","name","TYPE","match","node","convert","text","nodes","map","child","join"],"mappings":"AACA,OAAOA,SAAP;AACA,OAAOC,oBAAP;AAEA,IAAMC,KAAK,GAAG,IAAd;AAEA,IAAMC,WAA4B,GAAG;AACnCC,EAAAA,IAAI,EAAEJ,SAAS,CAACK,IADmB;AAGnCC,EAAAA,KAHmC,iBAG7BC,IAH6B,EAGvB;AACV,WAAON,oBAAoB,CAACM,IAAD,CAA3B;AACD,GALkC;AAOnCC,EAAAA,OAPmC,mBAO3BD,IAP2B,EAOrBC,QAPqB,EAOZ;AACrB,QAAMC,IAAI,GAAIF,IAAD,CAAgBG,KAAhB,CAAsBC,GAAtB,CAA0B,UAACC,KAAD;AAAA,aAAWJ,QAAO,CAACI,KAAD,CAAlB;AAAA,KAA1B,EAAqDC,IAArD,CAA0D,EAA1D,CAAb;AACA,WAAOJ,IAAI,GAAGP,KAAd;AACD;AAVkC,CAArC;AAaA,eAAeC,WAAf","sourcesContent":["import type { Block, ValueToTextRule } from '@ali/4ever-cangjie';\nimport Paragraph from '../models';\nimport isPureParagraphValue from './utils/isPureParagraphValue';\n\nconst BREAK = '\\n';\n\nconst valueToText: ValueToTextRule = {\n  name: Paragraph.TYPE,\n\n  match(node) {\n    return isPureParagraphValue(node);\n  },\n\n  convert(node, convert) {\n    const text = (node as Block).nodes.map((child) => convert(child)).join('');\n    return text + BREAK;\n  },\n};\n\nexport default valueToText;\n"],"file":"valueToText.js"}