{"version":3,"sources":["../../../../src/mo/serializer/jsonMLToValue.ts"],"names":["getTagName","getAttributes","Paragraph","name","TYPE","match","node","parent","tag","parentTagName","console","warn","convert","data","ind","firstline","firstLine","list","hasInvalidLevel","level","test","String","create"],"mappings":"AACA,SAEEA,UAFF,EAGEC,aAHF,QAIO,kBAJP;AAKA,OAAOC,SAAP;AAEA,eAAe;AACbC,EAAAA,IAAI,EAAED,SAAS,CAACE,IADH;AAGbC,EAAAA,KAAK,EAAE,eAACC,IAAD,EAAeC,MAAf,EAA4C;AACjD,QAAMC,GAAG,GAAGR,UAAU,CAACM,IAAD,CAAtB;;AACA,QAAIE,GAAG,KAAK,GAAZ,EAAiB;AACf,aAAO,IAAP;AACD,KAFD,MAEO,IAAID,MAAJ,EAAY;AACjB,UAAME,aAAa,GAAGT,UAAU,CAACO,MAAD,CAAhC;;AACA,UAAIE,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,MAAhD,EAAwD;AACtDC,QAAAA,OAAO,CAACC,IAAR,CAAgBH,GAAhB,eAA6BC,aAA7B;AACA,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD,GAfY;AAiBbG,EAAAA,OAAO,EAAE,iBAACN,IAAD,EAAyB;AAChC,QAAMO,IAAmB,GAAGZ,aAAa,CAACK,IAAD,CAAb,IAAuB,EAAnD;;AACA,QAAIO,IAAI,CAACC,GAAL,IAAY,OAAQD,IAAI,CAACC,GAAN,CAAkBC,SAAzB,KAAuC,QAAvD,EAAiE;AAC/DF,MAAAA,IAAI,CAACC,GAAL,CAASE,SAAT,GAAsBH,IAAI,CAACC,GAAN,CAAkBC,SAAvC;AACA,aAAQF,IAAI,CAACC,GAAN,CAAkBC,SAAzB;AACD,KAL+B,CAMhC;;;AACA,QAAIF,IAAI,CAACI,IAAT,EAAe;AACb,UAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACD,IAAD,EAAe;AAAA,YAC7BE,KAD6B,GACnBF,IADmB,CAC7BE,KAD6B;AAErC,eAAO,CAAC,MAAMC,IAAN,CAAWC,MAAM,CAACF,KAAD,CAAjB,CAAD,IAA8BA,KAAK,GAAG,CAA7C;AACD,OAHD;;AAIA,UAAID,eAAe,CAACL,IAAI,CAACI,IAAN,CAAnB,EAAgC;AAC9BJ,QAAAA,IAAI,CAACI,IAAL,CAAUE,KAAV,GAAkB,CAAlB;AACD;AACF;;AACD,WAAOjB,SAAS,CAACoB,MAAV,CAAiB;AAAET,MAAAA,IAAI,EAAJA;AAAF,KAAjB,CAAP;AACD;AAlCY,CAAf","sourcesContent":["import { Block } from '@ali/4ever-cangjie';\nimport {\n  JsonML,\n  getTagName,\n  getAttributes,\n} from '@ali/4ever-utils';\nimport Paragraph, { ParagraphData } from '../models';\n\nexport default {\n  name: Paragraph.TYPE,\n\n  match: (node: JsonML, parent?: JsonML): boolean => {\n    const tag = getTagName(node);\n    if (tag === 'p') {\n      return true;\n    } else if (parent) {\n      const parentTagName = getTagName(parent);\n      if (parentTagName === 'tc' || parentTagName === 'root') {\n        console.warn(`${tag} under ${parentTagName} is not supported, forcely revert to paragraph`);\n        return true;\n      }\n    }\n    return false;\n  },\n\n  convert: (node: JsonML): Block => {\n    const data: ParagraphData = getAttributes(node) || {};\n    if (data.ind && typeof (data.ind as any).firstline === 'number') {\n      data.ind.firstLine = (data.ind as any).firstline;\n      delete (data.ind as any).firstline;\n    }\n    // 序列化时对不合法 level 进行矫正\n    if (data.list) {\n      const hasInvalidLevel = (list: any) => {\n        const { level } = list;\n        return !/\\d/g.test(String(level)) || level < 0;\n      };\n      if (hasInvalidLevel(data.list)) {\n        data.list.level = 0;\n      }\n    }\n    return Paragraph.create({ data });\n  },\n};\n"],"file":"jsonMLToValue.js"}