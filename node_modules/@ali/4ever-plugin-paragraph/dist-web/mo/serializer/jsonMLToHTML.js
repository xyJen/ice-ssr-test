import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Block } from '@ali/4ever-cangjie';
import { getTagName, getAttributes, getChildren, SpacingUtil, CommonFormatUtil } from '@ali/4ever-utils';
import ParagraphModel from "../models";
// TODO: heading 相关逻辑迁移到 heading 中
var tagToComponent = {
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  p: 'p'
};

function getHeadStyle(tagName) {
  var headDefaultStyle = CommonFormatUtil.getDefaultHeadStyle(tagName);
  if (!headDefaultStyle) return {};
  return {
    fontSize: headDefaultStyle['font-size'],
    lineHeight: headDefaultStyle['line-height'],
    marginTop: headDefaultStyle['margin-top'],
    marginBottom: headDefaultStyle['margin-bottom']
  };
}

function renderList(props) {
  var node = props.node,
      children = props.children,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      key = props.key;
  var attrs = getAttributes(node) || {}; // @ts-ignore

  var _attrs$jc = attrs.jc,
      jc = _attrs$jc === void 0 ? 'left' : _attrs$jc,
      list = attrs.list; // @ts-ignore

  var ind = attrs.ind || {};
  var firstLine = ind.firstLine || ind.firstline || 0;
  var isChecked = list.isChecked,
      isTaskList = list.isTaskList;

  var listStyle = _extends({}, style, {
    textAlign: jc === 'distribute' ? 'justify' : jc,
    textIndent: firstLine
  });

  if (jc === 'distribute') {
    listStyle.textAlignLast = 'justify';
  }

  return /*#__PURE__*/_createElement("div", {
    style: listStyle,
    key: key
  }, isTaskList && /*#__PURE__*/_createElement("input", {
    type: "checkbox",
    checked: isChecked,
    readOnly: true
  }), children);
}

function Paragraph(props) {
  var Component = props.Component,
      node = props.node,
      children = props.children,
      _props$style2 = props.style,
      style = _props$style2 === void 0 ? {} : _props$style2,
      path = props.path,
      config = props.config,
      rest = _objectWithoutPropertiesLoose(props, ["Component", "node", "children", "style", "path", "config"]);

  var attrs = getAttributes(node) || {};
  var dataType = attrs.blockquote && 'blockquote'; // @ts-ignore

  var _attrs$jc2 = attrs.jc,
      jc = _attrs$jc2 === void 0 ? 'left' : _attrs$jc2,
      list = attrs.list,
      _attrs$spacing = attrs.spacing,
      spacing = _attrs$spacing === void 0 ? {} : _attrs$spacing; // Fixed: ind 可能出现 null 的数据情况
  // @ts-ignore

  var ind = attrs.ind || {};
  var _ind$left = ind.left,
      left = _ind$left === void 0 ? 0 : _ind$left;
  var firstLine = ind.firstLine || ind.firstline || 0;
  if (list) return renderList(props);
  var block = Block.create({
    type: 'paragraph',
    data: {
      spacing: spacing
    }
  });
  var spacingStyle = SpacingUtil.toStyle(block);

  var paragraphStyle = _extends({}, getHeadStyle(getTagName(node)), style, {
    textAlign: jc === 'distribute' ? 'justify' : jc,
    textIndent: firstLine,
    marginLeft: left,
    // 浏览器里 p 标签会带上 1em marginTop、marginBottom，导致 safari 浏览器自动纠正 text/plain 数据, 产生多余空行
    marginTop: 0,
    marginBottom: 0
  }, spacingStyle);

  if (jc === 'distribute') {
    paragraphStyle.textAlignLast = 'justify';
  }

  var useWebLineHeight = config && config.useWebLineHeight;

  if (spacing.line && !useWebLineHeight) {
    // 转换为百分比兼容word和竞品
    paragraphStyle.lineHeight = (spacing.line * 100).toFixed(0) + "%";
  }

  return (
    /*#__PURE__*/
    // @ts-ignore
    _createElement(Component, _extends({
      "data-type": dataType
    }, rest, {
      style: paragraphStyle
    }), children)
  );
}

export default function createJsonMLToHTML(configs) {
  return {
    name: ParagraphModel.TYPE,
    match: function match(node) {
      var tagName = getTagName(node);
      return !!tagToComponent[tagName];
    },
    convert: function convert(node, key, _convert) {
      if (key === void 0) {
        key = [];
      }

      var tagName = getTagName(node);
      var Component = tagToComponent[tagName];
      var children = getChildren(node).map(function (child, index) {
        return _convert(child, [].concat(key, [index]));
      });

      var _ref = configs || {},
          paragraphConfig = _ref.paragraph;

      return (
        /*#__PURE__*/
        // @ts-ignore
        _createElement(Paragraph, {
          Component: Component,
          node: node // @ts-ignore
          ,
          key: key,
          path: key,
          config: paragraphConfig
        }, children)
      );
    }
  };
}
//# sourceMappingURL=jsonMLToHTML.js.map