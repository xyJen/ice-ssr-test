{"version":3,"sources":["../../../../../src/mo/serializer/htmlToJsonML/parseFromWeb.ts"],"names":["getTagName","getAttributes","getChildren","parseCSSMargin","isCSSAbsoluteLength","isJsonMLInline","isJsonMLText","SpacingUtil","unitsConverter","paragraphTags","createTextWithString","REMAIN_STYLE_SOURCES","Paragraph","getParagraphTagStyle","validAlign","left","center","right","justify","distribute","spacingAttrs","marginTop","marginBottom","isValidAlign","align","generateAttrsFromStyle","style","attrs","ind","textAlign","jc","textAlignLast","textIndent","firstLine","toPX","margin","margins","marginLeft","padding","paddings","marginLeftNum","paddingLeft","paddingLeftNum","indentNum","Object","keys","length","key","valNum","spacing","lineHeight","line","fromHtml","fontSize","normalizeAttrs","rawAttrs","tagName","pasteFrom","styleObj","includes","before","after","list","listId","level","parseInt","isOrdered","isTaskList","isChecked","listStyle","format","text","flatAppend","state","node","chlidren","current","isPrevText","forEach","child","childTagName","append","slice","push","lastChild","parseHtml","name","TYPE","onOpenTag","rAttrs","p","onCloseTag","pop"],"mappings":"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","sourcesContent":["import {\n  JsonML,\n  getTagName,\n  getAttributes,\n  getChildren,\n  parseCSSMargin,\n  isCSSAbsoluteLength,\n  isJsonMLInline,\n  isJsonMLText,\n  SpacingUtil,\n  unitsConverter,\n  paragraphTags,\n} from '@ali/4ever-utils';\nimport {\n  createTextWithString,\n  REMAIN_STYLE_SOURCES } from '@ali/4ever-cangjie';\nimport type { MoState as State, MoAttributes as Attributes, HTMLToJsonMLRule } from '@ali/4ever-cangjie';\nimport Paragraph, { ParagraphData } from '../../models';\nimport getParagraphTagStyle from '../utils/getParagraphTagStyle';\n\ntype ListProperties = Required<ParagraphData>['list'];\n\ntype IndentProperties = Required<ParagraphData>['ind'];\n\nconst validAlign: Record<string, boolean> = {\n  left: true,\n  center: true,\n  right: true,\n  justify: true,\n  distribute: true,\n};\n\nconst spacingAttrs = {\n  marginTop: 'before',\n  marginBottom: 'after',\n};\n\nfunction isValidAlign(align = ''): align is Required<ParagraphData>['jc'] {\n  return !!validAlign[align];\n}\n\nfunction generateAttrsFromStyle(\n  style: Partial<CSSStyleDeclaration>,\n): ParagraphData {\n  const attrs: ParagraphData = {};\n  const ind: IndentProperties = {};\n\n  if (isValidAlign(style.textAlign)) {\n    attrs.jc = style.textAlign;\n  }\n\n  if (attrs.jc === 'justify' && style.textAlignLast === 'justify') {\n    attrs.jc = 'distribute';\n  }\n\n  if (style.textIndent) {\n    const firstLine = unitsConverter.toPX(style.textIndent);\n    if (firstLine) {\n      ind.firstLine = firstLine;\n    }\n  }\n\n  if (style.margin) {\n    const margins = parseCSSMargin(style.margin);\n    ind.left = unitsConverter.toPX(margins.marginLeft);\n  }\n\n  if (style.padding) {\n    const paddings = parseCSSMargin(style.padding);\n    ind.left = (ind.left ? ind.left : 0) + unitsConverter.toPX(paddings.marginLeft);\n  }\n\n  if (style.marginLeft && isCSSAbsoluteLength(style.marginLeft)) {\n    const marginLeftNum = unitsConverter.toPX(style.marginLeft);\n    ind.left = (ind.left || 0) + marginLeftNum;\n  }\n\n  if (style.paddingLeft && isCSSAbsoluteLength(style.paddingLeft)) {\n    const paddingLeftNum = unitsConverter.toPX(style.paddingLeft);\n    if (paddingLeftNum) {\n      ind.left = (ind.left || 0) + paddingLeftNum;\n    }\n  }\n\n  if (ind.left) {\n    // @ts-ignore 修正负悬挂缩进与预期不一致\n    const indentNum = ind.firstLine || 0;\n    if (indentNum < 0) {\n      ind.left += indentNum;\n    }\n  }\n\n  if (Object.keys(ind).length) {\n    attrs.ind = ind;\n  }\n\n  for (const key in spacingAttrs) {\n    if (!style[key]) continue;\n    const valNum = unitsConverter.toPX(style[key]);\n    if (!valNum) continue;\n    if (!attrs.spacing) {\n      attrs.spacing = {};\n    }\n    attrs.spacing[spacingAttrs[key]] = valNum;\n  }\n\n  if (style.lineHeight) {\n    if (!attrs.spacing) {\n      attrs.spacing = {};\n    }\n    attrs.spacing.line = SpacingUtil.fromHtml(style.lineHeight, style.fontSize);\n  }\n\n  return attrs;\n}\n\nfunction normalizeAttrs(\n  rawAttrs: Attributes,\n  tagName: string,\n  pasteFrom: string,\n): ParagraphData {\n  let attrs: ParagraphData = {};\n\n  if (rawAttrs.style) {\n    const style = rawAttrs.styleObj;\n    attrs = {\n      ...attrs,\n      ...generateAttrsFromStyle(style),\n    };\n    if (attrs && !REMAIN_STYLE_SOURCES.includes(pasteFrom)) {\n      delete attrs.spacing?.before;\n      delete attrs.spacing?.after;\n      delete attrs.spacing?.line;\n      delete attrs.ind?.left;\n    }\n  }\n\n  const list: ListProperties = {};\n  if (rawAttrs['data-listid']) {\n    list.listId = rawAttrs['data-listid'];\n  }\n  if (rawAttrs['data-level']) {\n    list.level = parseInt(rawAttrs['data-level'], 10);\n  }\n  if ('data-isordered' in rawAttrs) {\n    list.isOrdered = rawAttrs['data-isordered'] === 'true';\n  }\n  if ('data-istasklist' in rawAttrs) {\n    list.isTaskList = rawAttrs['data-istasklist'] === 'true';\n  }\n  if ('data-ischecked' in rawAttrs) {\n    list.isChecked = rawAttrs['data-ischecked'] === 'true';\n  }\n  if (\n    rawAttrs['data-format'] ||\n    rawAttrs['data-text'] ||\n    rawAttrs['data-align']\n  ) {\n    list.listStyle = {\n      format: rawAttrs['data-format'],\n      text: rawAttrs['data-text'],\n      align: rawAttrs['data-align'],\n    };\n    // @ts-ignore to fix list style\n    if (!rawAttrs['data-format']) delete list.listStyle.format;\n    // @ts-ignore to fix list style\n    if (!rawAttrs['data-text']) delete list.listStyle.text;\n    // @ts-ignore to fix list style\n    if (!rawAttrs['data-align']) delete list.listStyle.align;\n  }\n  if (Object.keys(list).length) {\n    attrs.list = list;\n  }\n\n  return attrs;\n}\n\nfunction flatAppend(state: State, node: JsonML): void {\n  const tagName = getTagName(node);\n  const attrs = getAttributes(node);\n  const chlidren = getChildren(node);\n  let current: JsonML = attrs ? [tagName, attrs] : [tagName];\n  let isPrevText = false;\n  chlidren.forEach((child: JsonML) => {\n    const childTagName = getTagName(child);\n    if (\n      paragraphTags[childTagName] ||\n      childTagName === 'hr' ||\n      childTagName === 'table' ||\n      childTagName === 'code'\n    ) {\n      if (getChildren(current).length) {\n        state.append(current);\n      }\n\n      if (childTagName === 'p') {\n        state.append([tagName, ...child.slice(1)]);\n      } else {\n        state.append(child);\n      }\n\n      current = attrs ? [tagName, attrs] : [tagName];\n      isPrevText = false;\n      return;\n    }\n\n    if (!isPrevText && isJsonMLInline(child)) {\n      current.push(createTextWithString(''));\n    }\n\n    current.push(child);\n    isPrevText = isJsonMLText(child);\n  });\n\n  if (getChildren(current).length) {\n    const lastChild = current[current.length - 1];\n    if (isJsonMLInline(lastChild as JsonML)) {\n      current.push(createTextWithString(''));\n    }\n    state.append(current);\n  }\n}\n\nexport default function parseHtml(pasteFrom: string): HTMLToJsonMLRule {\n  return {\n    name: Paragraph.TYPE,\n\n    onOpenTag: (state: State, name: string, rAttrs: Attributes): boolean => {\n      if (!paragraphTags[name]) return false;\n      const { p, rawAttrs } = getParagraphTagStyle(name, rAttrs);\n      const attrs = normalizeAttrs(rawAttrs, name, pasteFrom);\n      if (Object.keys(attrs).length) {\n        p.push(attrs);\n      }\n      state.push(p);\n      return true;\n    },\n\n    onCloseTag: (state: State, name: string): boolean => {\n      if (!paragraphTags[name]) return false;\n\n      const p = state.pop();\n\n      if (getChildren(p).length === 0) {\n        p.push(createTextWithString(''));\n      }\n\n      flatAppend(state, p);\n      return true;\n    },\n  };\n}\n"],"file":"parseFromWeb.js"}