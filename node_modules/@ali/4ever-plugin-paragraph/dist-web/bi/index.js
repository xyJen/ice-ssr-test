import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import { isEmptyParagraph } from '@ali/4ever-utils';
import moFactory from "../mo/index";
import onAction from "./handlers/onAction";
import createRenderNode from "./createRenderNode";
import { queries } from "./queries";
import { actions, isActions } from "./actions";

var factory = function factory(configs) {
  var _configs$paragraph = configs.paragraph,
      paragraph = _configs$paragraph === void 0 ? {} : _configs$paragraph;
  var locale = paragraph.locale;

  var plugin = _extends({}, moFactory({}), {
    onAction: onAction,
    actions: actions,
    isActions: isActions,
    queries: queries,
    renderNode: createRenderNode(),
    sidebar: function () {
      var _sidebar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var sidebar;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return import(
                /* webpackChunkName: "paragraph_bi_sidebar" */
                "./sidebar");

              case 2:
                sidebar = _context.sent;
                return _context.abrupt("return", sidebar["default"](configs));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function sidebar() {
        return _sidebar.apply(this, arguments);
      }

      return sidebar;
    }(),
    placeholder: {
      text: locale == null ? void 0 : locale.placeholder,
      focusMode: true,
      when: function when(_, node) {
        return isEmptyParagraph(node);
      }
    }
  });

  return plugin;
};

export default factory;
//# sourceMappingURL=index.js.map