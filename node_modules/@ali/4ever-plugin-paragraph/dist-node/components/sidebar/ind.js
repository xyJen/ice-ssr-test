"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = IndSet;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everUtils = require("@ali/4ever-utils");

var _weDesign = require("@ali/we-design");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _styled = require("../styled");

var _common = require("./common");

var _everCangjie = require("@ali/4ever-cangjie");

const _createElement = /*#__PURE__*/React.createElement;

/**
 * 右侧面板允许的范围：
 * 比 tab 等交互更大
 * 比word/wps 允许的范围更小，溢出不可见没有意义？
 * 70：A3 横向 窄页边距 时的宽度
 */
const MAX_CHARS = 70;

const MAX = _everUtils.unitsConverter.toPT(`${_everUtils.IndUtil.charsToPx(MAX_CHARS * 100)}px`); // pt


function IndSet(props) {
  const controller = _everCangjie.Controller.useController();

  const {
    locale
  } = props;
  const {
    paragraph: pLocale = {},
    indent: iLocale = {}
  } = locale;
  const unitsLocale = [{
    key: 'chars',
    value: pLocale.charsUnit
  }, {
    key: 'pt',
    value: pLocale.ptUnit
  }];
  const {
    left,
    leftChars,
    right,
    rightChars,
    firstLine,
    firstLineChars,
    hanging,
    hangingChars
  } = controller.query('getCommonInd');
  let specialType = 'none';
  const units = {
    left: 'chars',
    right: 'chars',
    special: 'chars'
  };
  const values = {
    left: undefined,
    right: undefined,
    special: undefined
  };

  if (hanging || hangingChars) {
    // hanging > firstLine
    specialType = 'hanging';
    units.special = hangingChars || !hanging ? 'chars' : 'pt';
    values.special = hangingChars ? hangingChars / 100 : _everUtils.unitsConverter.toPT(`${hanging}px`);
  } else if (firstLine || firstLineChars) {
    specialType = 'firstLine';
    units.special = firstLineChars || !firstLine ? 'chars' : 'pt';
    values.special = firstLineChars ? firstLineChars / 100 : _everUtils.unitsConverter.toPT(`${firstLine}px`);
  } else {
    units.special = 'chars';
  }

  units.left = leftChars || !left ? 'chars' : 'pt';

  if (leftChars) {
    values.left = leftChars / 100;
  } else if (left !== undefined) {
    values.left = _everUtils.unitsConverter.toPT(`${left}px`);
  }

  units.right = rightChars || !right ? 'chars' : 'pt';

  if (rightChars) {
    values.right = rightChars / 100;
  } else if (right !== undefined) {
    values.right = _everUtils.unitsConverter.toPT(`${right}px`);
  }

  const createIndChangeHandler = type => {
    return arg => {
      let val = (0, _common.parseInputNumberPara)(arg);
      if (!(0, _common.checkInputValue)(val)) return; // 过滤「相同值」or「特殊缩进值为 0 且之前为 undefined」时的情况，提前 return

      if (val === values[type] || type === 'special' && val === 0 && values[type] === undefined) return;
      const nextInd = {};
      let key = type;

      if (type === 'special') {
        key = specialType === 'none' ? 'firstLine' : specialType;
      }

      const isCharsUnit = units[type] === 'chars';
      val = Math.min(val, isCharsUnit ? MAX_CHARS : MAX);

      if (isCharsUnit) {
        // 换算为与导入一致的单位
        nextInd[`${key}Chars`] = val * 100; // 换算兜底

        nextInd[`${key}`] = _everUtils.IndUtil.charsToPx(nextInd[`${key}Chars`]);
      } else {
        nextInd[`${key}`] = _everUtils.unitsConverter.toPX(`${val}pt`);
      }

      controller.dispatch('setParagraphInd', nextInd);

      _everLogger.default.sum(`paragraph_sidebar_ind_${type}`);
    };
  };

  const handleLeftChange = createIndChangeHandler('left');
  const handleRightChange = createIndChangeHandler('right');
  const handleIndChange = createIndChangeHandler('special');

  const createIndUnitChangeHandler = type => {
    return unit => {
      // 不允许在未设置首行或缩进的时候改单位
      if (type === 'special' && specialType === 'none') return;
      const isCharsUnit = units[type] === 'chars';
      const max = isCharsUnit ? MAX : MAX_CHARS;
      const nextInd = {}; // 默认 2 字符 24 pt

      let nextValue = isCharsUnit ? 24 : 2;

      if (values[type]) {
        nextValue = Math.min(values[type], max);
      }

      const key = type !== 'special' ? type : specialType;

      if (unit === 'pt') {
        nextInd[`${key}`] = _everUtils.unitsConverter.toPX(`${nextValue}pt`);
      } else if (unit === 'chars') {
        nextInd[`${key}Chars`] = nextValue * 100; // 兜底

        nextInd[`${key}`] = _everUtils.IndUtil.charsToPx(nextInd[`${key}Chars`]);
      }

      controller.dispatch('setParagraphInd', nextInd);

      _everLogger.default.sum(`paragraph_sidebar_ind_${type}_unit_${unit}`);
    };
  };

  const handleLeftUnitChange = createIndUnitChangeHandler('left');
  const handleRightUnitChange = createIndUnitChangeHandler('right');
  const handleIndUnitChange = createIndUnitChangeHandler('special');

  const handleIndTypeChange = type => {
    if (type === 'none') {
      controller.dispatch('setParagraphInd', {
        firstLine: 0,
        firstLineChars: 0,
        hanging: 0,
        hangingChars: 0
      });
    } else {
      const nextInd = {}; // 默认两字符

      nextInd[`${type}Chars`] = 200;
      nextInd[`${type}`] = _everUtils.IndUtil.charsToPx(nextInd[`${type}Chars`]); // 兜底

      controller.dispatch('setParagraphInd', nextInd);
    }

    _everLogger.default.sum(`paragraph_sidebar_ind_special_${type}`);
  };

  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(_styled.ConfigItem, null, /*#__PURE__*/_createElement("span", {
    className: "label"
  }, iLocale.leftIndent), /*#__PURE__*/_createElement(_weDesign.InputNumber, (0, _extends2.default)({
    value: values.left,
    formatter: _common.formatNumber10
  }, _common.commonInputNumberProps, {
    style: _common.inputNumberStyle,
    onStep: handleLeftChange,
    onPressEnter: handleLeftChange,
    onBlur: handleLeftChange,
    key: `left_${values.left}`
  })), /*#__PURE__*/_createElement(_common.UnitSelect, {
    value: units.left,
    units: unitsLocale,
    onChange: handleLeftUnitChange
  })), /*#__PURE__*/_createElement(_styled.ConfigItem, null, /*#__PURE__*/_createElement("span", {
    className: "label"
  }, iLocale.rightIndent), /*#__PURE__*/_createElement(_weDesign.InputNumber, (0, _extends2.default)({
    value: values.right,
    formatter: _common.formatNumber10
  }, _common.commonInputNumberProps, {
    style: _common.inputNumberStyle,
    onStep: handleRightChange,
    onPressEnter: handleRightChange,
    onBlur: handleRightChange,
    key: `right_${values.right}`
  })), /*#__PURE__*/_createElement(_common.UnitSelect, {
    value: units.right,
    units: unitsLocale,
    onChange: handleRightUnitChange
  })), /*#__PURE__*/_createElement(_styled.ConfigItem, null, /*#__PURE__*/_createElement(_weDesign.Select, {
    defaultValue: "none",
    value: specialType,
    style: _common.commonSelectStyle,
    onChange: handleIndTypeChange
  }, /*#__PURE__*/_createElement(_weDesign.Select.Option, {
    value: "none"
  }, iLocale.noneIndent), /*#__PURE__*/_createElement(_weDesign.Select.Option, {
    value: "firstLine"
  }, iLocale.firstLineIndent), /*#__PURE__*/_createElement(_weDesign.Select.Option, {
    value: "hanging"
  }, iLocale.hangIndent)), /*#__PURE__*/_createElement(_weDesign.InputNumber, (0, _extends2.default)({
    value: values.special
  }, _common.commonInputNumberProps, {
    formatter: _common.formatNumber10,
    style: _common.inputNumberStyle,
    onPressEnter: handleIndChange,
    onBlur: handleIndChange,
    onStep: handleIndChange,
    key: `special_${values.special}`
  })), /*#__PURE__*/_createElement(_common.UnitSelect, {
    value: units.special,
    units: unitsLocale,
    onChange: handleIndUnitChange
  })));
}
//# sourceMappingURL=ind.js.map