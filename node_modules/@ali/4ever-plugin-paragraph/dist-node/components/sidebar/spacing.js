"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SpacingSet;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _weDesign = require("@ali/we-design");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _styled = require("../styled");

var _common = require("./common");

const _createElement = /*#__PURE__*/React.createElement;

/** 
 * TODO: 待 lineHeight 插件迁移后，改为 package 引入
 */
const setLineHeight = (lineHeight, lineRule) => {
  return {
    type: 'ACTION_LINEHEIGHT_SET',
    payload: {
      lineHeight,
      lineRule
    }
  };
};
/**
 * 50：大概是一页的高度
 */


const MAX_LINES = 50;

const MAX = _everUtils.unitsConverter.toPT(`${_everUtils.SpacingUtil.linesToPx(MAX_LINES)}px`);

function SpacingSet(props) {
  const controller = _everCangjie.Controller.useController();

  const {
    locale
  } = props;
  const {
    paragraph: pLocale = {},
    line: lLocale = {}
  } = locale;
  const unitsLocale = [{
    key: 'pt',
    value: pLocale.ptUnit
  }, {
    key: 'lines',
    value: pLocale.linesUnit
  }, {
    key: 'auto',
    value: pLocale.autoUnit
  }];
  const docStyle = (0, _everCangjie.useStyle)();
  const {
    before,
    beforeLines,
    beforeAutospacing,
    after,
    afterLines,
    afterAutospacing,
    lineRule = 'auto',
    line
  } = controller.query('getCommonSpacing', docStyle?.docDefaults?.data?.pPr?.spacing);
  const units = {
    before: 'pt',
    after: 'pt',
    line: lineRule !== 'auto' ? 'pt' : 'lines'
  };
  const values = {
    before,
    after,
    line
  };

  if (lineRule !== 'auto') {
    values.line = _everUtils.unitsConverter.toPT(`${line}px`);
  }

  if (beforeAutospacing) {
    units.before = 'auto';
    values.before = undefined;
  } else if (beforeLines) {
    units.before = 'lines';
    values.before = beforeLines;
  }

  if (units.before === 'pt' && values.before) {
    // 转换为 pt
    values.before = _everUtils.unitsConverter.toPT(`${values.before}px`);
  }

  if (afterAutospacing) {
    units.after = 'auto';
    values.after = undefined;
  } else if (afterLines) {
    units.after = 'lines';
    values.after = afterLines;
  }

  if (units.after === 'pt' && values.after) {
    values.after = _everUtils.unitsConverter.toPT(`${values.after}px`);
  }

  const handleLineChange = arg => {
    let val = (0, _common.parseInputNumberPara)(arg);

    if (lineRule === 'exact' || lineRule === 'atLeast') {
      // 转换为与导入一致的单位
      val /= 12;
    } // 不允许设置 0


    if (!val || !(0, _common.checkInputValue)(val)) return;
    if (val === values.line) return;
    val = Math.min(val, units.line === 'lines' ? MAX_LINES : MAX);
    controller.run('onAction', setLineHeight(val, lineRule));

    _everLogger.default.sum('paragraph_sidebar_spacing_line');
  };

  const handleLineRuleChange = type => {
    if (type === 'exact') {
      // 切换为固定值时默认为 24pt
      controller.run('onAction', setLineHeight(2, type));
    } else if (type === 'auto') {
      // 切换为多倍时默认为 1倍行距
      controller.run('onAction', setLineHeight(1, type));
    }

    _everLogger.default.sum(`paragraph_sidebar_spacing_lineRule_${type}`);
  };

  const createSpacingChangeHandler = type => {
    return arg => {
      let val = (0, _common.parseInputNumberPara)(arg);
      if (!(0, _common.checkInputValue)(val)) return;
      if (val === values[type]) return;
      val = Math.min(val, units[type] === 'lines' ? MAX_LINES : MAX);
      const nextSpacing = {};
      const isLinesUnit = units[type] === 'lines';
      nextSpacing[`${type}Autospacing`] = false;

      if (isLinesUnit) {
        nextSpacing[`${type}Lines`] = val; // 同步设置 before/after 作为兜底

        nextSpacing[type] = _everUtils.SpacingUtil.linesToPx(val);
      } else {
        nextSpacing[type] = _everUtils.unitsConverter.toPX(`${val}pt`);
      }

      controller.dispatch('setParagraphSpacing', nextSpacing);

      _everLogger.default.sum(`paragraph_sidebar_spacing_${type}`);
    };
  };

  const handleBeforeChange = createSpacingChangeHandler('before');
  const handleAfterChange = createSpacingChangeHandler('after');

  const createSpacingUnitChangeHandler = type => {
    return unit => {
      const nextSpacing = {};

      if (unit === 'pt' || unit === 'lines') {
        nextSpacing[`${type}Autospacing`] = false;
        nextSpacing[type] = unit === 'pt' ? _everUtils.theme.spacing.defaultLinePitch : 0;
        nextSpacing[`${type}Lines`] = unit === 'pt' ? 0 : 1;
      } else if (unit === 'auto') {
        nextSpacing[`${type}Autospacing`] = true; // 按照前 5pt 后 10pt 兜底

        nextSpacing[type] = type === 'after' ? _everUtils.theme.spacing.defaultAfterAutospacing : _everUtils.theme.spacing.defaultBeforeAutospacing;
      }

      controller.dispatch('setParagraphSpacing', nextSpacing);

      _everLogger.default.sum(`paragraph_sidebar_spacing_${type}_unit_${unit}`);
    };
  };

  const handleBeforeUnitChange = createSpacingUnitChangeHandler('before');
  const handleAfterUnitChange = createSpacingUnitChangeHandler('after');
  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(_styled.ConfigItem, null, /*#__PURE__*/_createElement("span", {
    className: "label"
  }, pLocale.spacingBefore), /*#__PURE__*/_createElement(_weDesign.InputNumber, (0, _extends2.default)({
    value: values.before,
    formatter: _common.formatNumber10
  }, _common.commonInputNumberProps, {
    style: _common.inputNumberStyle,
    onStep: handleBeforeChange,
    onPressEnter: handleBeforeChange,
    onBlur: handleBeforeChange,
    key: `before_${values.before}`
  })), /*#__PURE__*/_createElement(_common.UnitSelect, {
    value: units.before,
    units: unitsLocale,
    onChange: handleBeforeUnitChange
  })), /*#__PURE__*/_createElement(_styled.ConfigItem, null, /*#__PURE__*/_createElement("span", {
    className: "label"
  }, pLocale.spacingAfter), /*#__PURE__*/_createElement(_weDesign.InputNumber, (0, _extends2.default)({
    value: values.after
  }, _common.commonInputNumberProps, {
    formatter: _common.formatNumber10,
    style: _common.inputNumberStyle,
    onStep: handleAfterChange,
    onPressEnter: handleAfterChange,
    onBlur: handleAfterChange,
    key: `after_${values.after}`
  })), /*#__PURE__*/_createElement(_common.UnitSelect, {
    value: units.after,
    units: unitsLocale,
    onChange: handleAfterUnitChange
  })), /*#__PURE__*/_createElement(_styled.ConfigItem, null, /*#__PURE__*/_createElement(_weDesign.Select, {
    defaultValue: "auto",
    value: lineRule !== 'auto' ? 'exact' : 'auto',
    style: _common.commonSelectStyle,
    onChange: handleLineRuleChange
  }, /*#__PURE__*/_createElement(_weDesign.Select.Option, {
    value: "auto"
  }, lLocale.multipleLineRule), /*#__PURE__*/_createElement(_weDesign.Select.Option, {
    value: "exact"
  }, lLocale.exactlyLineRule)), /*#__PURE__*/_createElement(_weDesign.InputNumber, (0, _extends2.default)({
    value: values.line
  }, _common.commonInputNumberProps, {
    max: 100,
    step: lineRule === 'auto' ? 0.1 : 1,
    formatter: lineRule === 'auto' ? _common.formatNumber100 : _common.formatNumber10,
    style: _common.inputNumberStyle,
    onPressEnter: handleLineChange,
    onBlur: handleLineChange,
    onStep: handleLineChange,
    key: `line_${values.line}`
  })), units.line === 'pt' ? /*#__PURE__*/_createElement("span", {
    style: {
      marginLeft: 7
    }
  }, pLocale.ptUnit) : null));
}
//# sourceMappingURL=spacing.js.map