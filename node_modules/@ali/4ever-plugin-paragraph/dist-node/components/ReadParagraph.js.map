{"version":3,"sources":["../../../src/components/ReadParagraph.tsx"],"names":["BorderStyleEnum","MoCommon","DEFAULT_BORDER_COLOR","React","forwardRef","props","ref","Component","node","children","isList","style","rest","jc","spacing","shd","data","isPi","pi","left","firstLine","right","hanging","IndUtil","fromBlock","paddingLeft","nodePaddingLeft","paddingRight","nodePaddingRight","paragraphStyle","textAlign","textIndent","textAlignLast","line","lineHeight","SpacingUtil","getLineHeightFromSpacing","marginTop","marginBottom","margin","box","top","bottom","backgroundColor","ShdUtil","transformShd","bdr","val","Single","sz","color","bdrColor","space","borderStyle","borderColor","borderTop","paddingTop","borderBottom","paddingBottom","borderLeft","borderRight","type"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Block, MoCommon } from '@ali/4ever-cangjie';\nimport { IndUtil, SpacingUtil, ShdUtil } from '@ali/4ever-utils';\nimport type { ParagraphData } from '../mo/models';\n\ntype BdrProperties = Required<ParagraphData>['bdr'];\n\nconst { BorderStyleEnum } = MoCommon;\n\ninterface ParagraphProps {\n  Component: React.ComponentType<any>;\n  node: Block;\n  isList?: boolean;\n  children: React.ReactNode;\n  style?: React.CSSProperties;\n  id?: string;\n}\n\nconst DEFAULT_BORDER_COLOR = '#000000';\n\nexport default React.forwardRef<HTMLElement, ParagraphProps>((props: ParagraphProps, ref) => {\n  const { Component, node, children, isList, style = {}, ...rest } = props;\n\n  const { jc = 'left', spacing, shd } = node.data as ParagraphData;\n\n  // TODO: HACK pi 和 bi 实现缩进机制不一致\n  const isPi = !!node.data.pi;\n\n  const {\n    left,\n    firstLine = 0,\n    right,\n    hanging,\n  } = IndUtil.fromBlock(node);\n\n  let paddingLeft = left || 0;\n  if (!isPi && hanging) {\n    // 悬挂缩进时整体 paddingLeft 增加，靠 text-indent < 0 实现\n    paddingLeft += hanging;\n  }\n\n  const {\n    paddingLeft: nodePaddingLeft = 0,\n    paddingRight: nodePaddingRight = 0,\n  } = style as Record<string, number>;\n\n  const paragraphStyle = {\n    ...style,\n    textAlign: jc === 'distribute' ? 'justify' : jc,\n    textIndent: (isList || isPi) ? 0 : (hanging ? -hanging : firstLine),\n    paddingLeft: isList ? 0 : paddingLeft + nodePaddingLeft,\n    paddingRight: right || nodePaddingRight,\n  };\n\n  if (jc === 'distribute') {\n    paragraphStyle.textAlignLast = 'justify';\n  }\n\n  if (spacing?.line) {\n    paragraphStyle.lineHeight = SpacingUtil.getLineHeightFromSpacing(spacing);\n  }\n\n  // Pi-2.0 会注入 pi 数据\n  if (node.data.pi) {\n    // 列表场景下清空上下边距，在列表处渲染，否则采用盒模型中的边距数据\n    if (isList) {\n      paragraphStyle.marginTop = 0;\n      paragraphStyle.marginBottom = 0;\n    } else {\n      // pi-1.0 中也注入了 pi 信息，但是不全...\n      const { margin = {} } = node.data.pi.box || {};\n      const { top = 0, bottom = 0 } = margin;\n      paragraphStyle.marginTop = top;\n      paragraphStyle.marginBottom = bottom;\n    }\n    // 排版下没有外部统一的 block div，这里特殊兼容下\n    if (shd) {\n      paragraphStyle.backgroundColor = ShdUtil.transformShd(shd);\n    }\n  }\n\n  // 段落边框：在列表的场景下由于被 wrapper 包裹所以要消掉 border\n  const bdr = (node.data.bdr || {}) as BdrProperties;\n  if (!isList && bdr.top) {\n    const { val = BorderStyleEnum.Single, sz = 1, color: bdrColor = DEFAULT_BORDER_COLOR, space = 0 } = bdr.top;\n    const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;\n    const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;\n    paragraphStyle.borderTop = `${sz}px ${borderStyle} ${borderColor}`;\n    paragraphStyle.paddingTop = space;\n  }\n  if (!isList && bdr.bottom) {\n    const { val = BorderStyleEnum.Single, sz = 1, color: bdrColor = DEFAULT_BORDER_COLOR, space = 0 } = bdr.bottom;\n    const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;\n    const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;\n    paragraphStyle.borderBottom = `${sz}px ${borderStyle} ${borderColor}`;\n    paragraphStyle.paddingBottom = space;\n  }\n  if (!isList && bdr.left) {\n    const { val = BorderStyleEnum.Single, sz = 1, color: bdrColor = DEFAULT_BORDER_COLOR, space = 0 } = bdr.left;\n    const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;\n    const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;\n    paragraphStyle.borderLeft = `${sz}px ${borderStyle} ${borderColor}`;\n    paragraphStyle.paddingLeft = space;\n  }\n  if (!isList && bdr.right) {\n    const { val = BorderStyleEnum.Single, sz = 1, color: bdrColor = DEFAULT_BORDER_COLOR, space = 0 } = bdr.right;\n    const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;\n    const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;\n    paragraphStyle.borderRight = `${sz}px ${borderStyle} ${borderColor}`;\n    paragraphStyle.paddingRight = space;\n  }\n\n  return (\n    <Component {...rest} data-type={node.type} ref={ref} style={paragraphStyle}>\n      {children}\n    </Component>\n  );\n});\n"],"file":"ReadParagraph.js"}