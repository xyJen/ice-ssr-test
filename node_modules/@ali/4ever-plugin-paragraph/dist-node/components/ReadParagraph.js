"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

const _createElement = /*#__PURE__*/React.createElement;
const {
  BorderStyleEnum
} = _everCangjie.MoCommon;
const DEFAULT_BORDER_COLOR = '#000000';

var _default = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    Component,
    node,
    children,
    isList,
    style = {},
    ...rest
  } = props;
  const {
    jc = 'left',
    spacing,
    shd
  } = node.data; // TODO: HACK pi 和 bi 实现缩进机制不一致

  const isPi = !!node.data.pi;

  const {
    left,
    firstLine = 0,
    right,
    hanging
  } = _everUtils.IndUtil.fromBlock(node);

  let paddingLeft = left || 0;

  if (!isPi && hanging) {
    // 悬挂缩进时整体 paddingLeft 增加，靠 text-indent < 0 实现
    paddingLeft += hanging;
  }

  const {
    paddingLeft: nodePaddingLeft = 0,
    paddingRight: nodePaddingRight = 0
  } = style;
  const paragraphStyle = { ...style,
    textAlign: jc === 'distribute' ? 'justify' : jc,
    textIndent: isList || isPi ? 0 : hanging ? -hanging : firstLine,
    paddingLeft: isList ? 0 : paddingLeft + nodePaddingLeft,
    paddingRight: right || nodePaddingRight
  };

  if (jc === 'distribute') {
    paragraphStyle.textAlignLast = 'justify';
  }

  if (spacing?.line) {
    paragraphStyle.lineHeight = _everUtils.SpacingUtil.getLineHeightFromSpacing(spacing);
  } // Pi-2.0 会注入 pi 数据


  if (node.data.pi) {
    // 列表场景下清空上下边距，在列表处渲染，否则采用盒模型中的边距数据
    if (isList) {
      paragraphStyle.marginTop = 0;
      paragraphStyle.marginBottom = 0;
    } else {
      // pi-1.0 中也注入了 pi 信息，但是不全...
      const {
        margin = {}
      } = node.data.pi.box || {};
      const {
        top = 0,
        bottom = 0
      } = margin;
      paragraphStyle.marginTop = top;
      paragraphStyle.marginBottom = bottom;
    } // 排版下没有外部统一的 block div，这里特殊兼容下


    if (shd) {
      paragraphStyle.backgroundColor = _everUtils.ShdUtil.transformShd(shd);
    }
  } // 段落边框：在列表的场景下由于被 wrapper 包裹所以要消掉 border


  const bdr = node.data.bdr || {};

  if (!isList && bdr.top) {
    const {
      val = BorderStyleEnum.Single,
      sz = 1,
      color: bdrColor = DEFAULT_BORDER_COLOR,
      space = 0
    } = bdr.top;
    const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
    const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
    paragraphStyle.borderTop = `${sz}px ${borderStyle} ${borderColor}`;
    paragraphStyle.paddingTop = space;
  }

  if (!isList && bdr.bottom) {
    const {
      val = BorderStyleEnum.Single,
      sz = 1,
      color: bdrColor = DEFAULT_BORDER_COLOR,
      space = 0
    } = bdr.bottom;
    const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
    const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
    paragraphStyle.borderBottom = `${sz}px ${borderStyle} ${borderColor}`;
    paragraphStyle.paddingBottom = space;
  }

  if (!isList && bdr.left) {
    const {
      val = BorderStyleEnum.Single,
      sz = 1,
      color: bdrColor = DEFAULT_BORDER_COLOR,
      space = 0
    } = bdr.left;
    const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
    const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
    paragraphStyle.borderLeft = `${sz}px ${borderStyle} ${borderColor}`;
    paragraphStyle.paddingLeft = space;
  }

  if (!isList && bdr.right) {
    const {
      val = BorderStyleEnum.Single,
      sz = 1,
      color: bdrColor = DEFAULT_BORDER_COLOR,
      space = 0
    } = bdr.right;
    const borderStyle = val === BorderStyleEnum.Single ? 'solid' : val;
    const borderColor = bdrColor === 'auto' ? DEFAULT_BORDER_COLOR : bdrColor;
    paragraphStyle.borderRight = `${sz}px ${borderStyle} ${borderColor}`;
    paragraphStyle.paddingRight = space;
  }

  return /*#__PURE__*/_createElement(Component, (0, _extends2.default)({}, rest, {
    "data-type": node.type,
    ref: ref,
    style: paragraphStyle
  }), children);
});

exports.default = _default;
//# sourceMappingURL=ReadParagraph.js.map