"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getShdFromBlock = getShdFromBlock;
exports.getCommonSpacing = getCommonSpacing;
exports.getCommonInd = getCommonInd;
exports.getCommonShd = getCommonShd;

var _everUtils = require("@ali/4ever-utils");

const defaultSpacing = {
  before: 0,
  after: 0,
  line: 1
};
const defaultInd = {
  left: 0,
  right: 0
};
const defaultShd = {
  val: 'clear',
  color: 'auto',
  fill: 'auto'
};

function createGetSpacingFromBlock(defaultProperties) {
  return function getSpacingFromBlock(block) {
    let mergedSpacing = {}; // 拿到转换后的 spacing

    const spacing = _everUtils.SpacingUtil.fromBlock(block);

    mergedSpacing = { ...defaultSpacing,
      ...defaultProperties,
      ...spacing
    };
    return mergedSpacing;
  };
}

function getIndFromBlock(block) {
  let mergedInd = {}; // 拿到转换后的 spacing

  const ind = _everUtils.IndUtil.fromBlock(block);

  mergedInd = { ...defaultInd,
    ...ind
  };
  return mergedInd;
}

function getShdFromBlock(block) {
  let mergedShd = {}; // 拿到转换后的 shd

  const shd = _everUtils.ShdUtil.fromBlock(block);

  mergedShd = { ...defaultShd,
    ...shd
  };
  return mergedShd;
}
/**
 * 提取公共属性
 * 这是个 n * m 复杂度的计算
 * 3000个段落大概是 5ms
 * TODO: 或许有人有更好的解法？
 */


function getCommonProperties(items, processor) {
  let first = {};
  if (!items.length) return first;
  first = processor(items[0]);
  if (items.length === 1) return first;
  const dirtyMap = {};

  for (let i = 1; i < items.length; i++) {
    const nextSpacing = processor(items[i]);
    const keys = Object.keys(nextSpacing);

    for (let j = 0; j < keys.length; j++) {
      const key = keys[j];
      if (dirtyMap[key]) continue;

      if (!(key in dirtyMap)) {
        dirtyMap[key] = false;
      }

      if (!dirtyMap[key] && nextSpacing[key] !== first[key]) {
        // 标记不一致
        dirtyMap[key] = true;
      }
    }
  }

  Object.keys(dirtyMap).forEach(dirtyKey => {
    if (dirtyMap[dirtyKey]) {
      // 发现了不一样的视为未发现公共属性
      delete first[dirtyKey];
    }
  });
  Object.keys(first).forEach(key => {
    if (first[key] !== undefined && !(key in dirtyMap)) {
      // 从未发现后续 block 有此属性也视为未发现公共属性
      delete first[key];
    }
  });
  return first;
}

function getCommonSpacing(controller, defaultProperties) {
  const blocks = (0, _everUtils.getBlocksFromEditor)(controller);
  return getCommonProperties(blocks, createGetSpacingFromBlock(defaultProperties));
}

function getCommonInd(controller) {
  const blocks = (0, _everUtils.getBlocksFromEditor)(controller);
  return getCommonProperties(blocks, getIndFromBlock);
}

function getCommonShd(controller) {
  const blocks = (0, _everUtils.getBlocksFromEditor)(controller);
  return getCommonProperties(blocks, getShdFromBlock);
}
//# sourceMappingURL=getParagraphData.js.map