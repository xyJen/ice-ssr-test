{"version":3,"sources":["../../../../src/bi/queries/getParagraphData.ts"],"names":["defaultSpacing","before","after","line","defaultInd","left","right","defaultShd","val","color","fill","createGetSpacingFromBlock","defaultProperties","getSpacingFromBlock","block","mergedSpacing","spacing","SpacingUtil","fromBlock","getIndFromBlock","mergedInd","ind","IndUtil","getShdFromBlock","mergedShd","shd","ShdUtil","getCommonProperties","items","processor","first","length","dirtyMap","i","nextSpacing","keys","Object","j","key","forEach","dirtyKey","undefined","getCommonSpacing","controller","blocks","getCommonInd","getCommonShd"],"mappings":"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","sourcesContent":["import { Controller, Block } from '@ali/4ever-cangjie';\nimport { getBlocksFromEditor, SpacingUtil, IndUtil, ShdUtil, SpacingProperties, IndentProperties }  from '@ali/4ever-utils';\n\nconst defaultSpacing = {\n  before: 0,\n  after: 0,\n  line: 1,\n};\n\nconst defaultInd = {\n  left: 0,\n  right: 0,\n};\n\nconst defaultShd = {\n  val: 'clear',\n  color: 'auto',\n  fill: 'auto',\n};\n\nfunction createGetSpacingFromBlock(defaultProperties?: SpacingProperties) {\n  return function getSpacingFromBlock(block: Block) {\n    let mergedSpacing: SpacingProperties = {};\n\n    // 拿到转换后的 spacing\n    const spacing = SpacingUtil.fromBlock(block);\n\n    mergedSpacing = {\n      ...defaultSpacing,\n      ...defaultProperties,\n      ...spacing,\n    };\n\n    return mergedSpacing;\n  }\n}\n\nfunction getIndFromBlock(block: Block) {\n  let mergedInd: IndentProperties = {};\n\n  // 拿到转换后的 spacing\n  const ind = IndUtil.fromBlock(block);\n\n  mergedInd = {\n    ...defaultInd,\n    ...ind,\n  };\n\n  return mergedInd;\n}\n\nexport function getShdFromBlock(block: Block) {\n  let mergedShd: any = {};\n\n  // 拿到转换后的 shd\n  const shd = ShdUtil.fromBlock(block);\n\n  mergedShd = {\n    ...defaultShd,\n    ...shd,\n  };\n\n  return mergedShd;\n}\n\n/**\n * 提取公共属性\n * 这是个 n * m 复杂度的计算\n * 3000个段落大概是 5ms\n * TODO: 或许有人有更好的解法？\n */\nfunction getCommonProperties(\n  items: Array<Record<string, any>>, \n  processor: Function, \n) {\n  let first: Record<string, any> = {};\n  if (!items.length) return first;\n\n  first = processor(items[0]);\n  if (items.length === 1) return first;\n  const dirtyMap = {};\n\n  for (let i = 1; i < items.length; i++) {\n    const nextSpacing = processor(items[i]);\n    const keys = Object.keys(nextSpacing);\n    for (let j = 0; j < keys.length; j++) {\n      const key = keys[j];\n      if (dirtyMap[key]) continue;\n\n      if (!(key in dirtyMap)) {\n        dirtyMap[key] = false;\n      }\n\n      if (!dirtyMap[key] && nextSpacing[key] !== first[key]) {\n        // 标记不一致\n        dirtyMap[key] = true;\n      }\n    }\n  }\n\n  Object.keys(dirtyMap).forEach((dirtyKey) => {\n    if (dirtyMap[dirtyKey]) {\n      // 发现了不一样的视为未发现公共属性\n      delete first[dirtyKey];\n    }\n  });\n\n  Object.keys(first).forEach((key) => {\n    if (first[key] !== undefined && !(key in dirtyMap)) {\n      // 从未发现后续 block 有此属性也视为未发现公共属性\n      delete first[key];\n    }\n  });\n\n  return first;\n}\n\nexport function getCommonSpacing(controller: Controller, defaultProperties?: SpacingProperties) {\n  const blocks = getBlocksFromEditor(controller);\n  return getCommonProperties(blocks, createGetSpacingFromBlock(defaultProperties)) as SpacingProperties;\n}\n\nexport function getCommonInd(controller: Controller) {\n  const blocks = getBlocksFromEditor(controller);\n  return getCommonProperties(blocks, getIndFromBlock) as IndentProperties;\n}\n\nexport function getCommonShd(controller: Controller) {\n  const blocks = getBlocksFromEditor(controller);\n  return getCommonProperties(blocks, getShdFromBlock) as IndentProperties;\n}\n"],"file":"getParagraphData.js"}