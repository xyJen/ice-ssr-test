{"version":3,"sources":["../../../../src/mo/serializer/valueToText.ts"],"names":["BREAK","valueToText","name","Paragraph","TYPE","match","node","convert","text","nodes","map","child","join"],"mappings":";;;;;;;;;AACA;;AACA;;AAEA,MAAMA,KAAK,GAAG,IAAd;AAEA,MAAMC,WAA4B,GAAG;AACnCC,EAAAA,IAAI,EAAEC,gBAAUC,IADmB;;AAGnCC,EAAAA,KAAK,CAACC,IAAD,EAAO;AACV,WAAO,mCAAqBA,IAArB,CAAP;AACD,GALkC;;AAOnCC,EAAAA,OAAO,CAACD,IAAD,EAAOC,OAAP,EAAgB;AACrB,UAAMC,IAAI,GAAIF,IAAD,CAAgBG,KAAhB,CAAsBC,GAAtB,CAA2BC,KAAD,IAAWJ,OAAO,CAACI,KAAD,CAA5C,EAAqDC,IAArD,CAA0D,EAA1D,CAAb;AACA,WAAOJ,IAAI,GAAGR,KAAd;AACD;;AAVkC,CAArC;eAaeC,W","sourcesContent":["import type { Block, ValueToTextRule } from '@ali/4ever-cangjie';\nimport Paragraph from '../models';\nimport isPureParagraphValue from './utils/isPureParagraphValue';\n\nconst BREAK = '\\n';\n\nconst valueToText: ValueToTextRule = {\n  name: Paragraph.TYPE,\n\n  match(node) {\n    return isPureParagraphValue(node);\n  },\n\n  convert(node, convert) {\n    const text = (node as Block).nodes.map((child) => convert(child)).join('');\n    return text + BREAK;\n  },\n};\n\nexport default valueToText;\n"],"file":"valueToText.js"}