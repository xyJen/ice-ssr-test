"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createJsonMLToHTML;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _models = _interopRequireDefault(require("../models"));

const _createElement = /*#__PURE__*/React.createElement;
// TODO: heading 相关逻辑迁移到 heading 中
const tagToComponent = {
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  p: 'p'
};

function getHeadStyle(tagName) {
  const headDefaultStyle = _everUtils.CommonFormatUtil.getDefaultHeadStyle(tagName);

  if (!headDefaultStyle) return {};
  return {
    fontSize: headDefaultStyle['font-size'],
    lineHeight: headDefaultStyle['line-height'],
    marginTop: headDefaultStyle['margin-top'],
    marginBottom: headDefaultStyle['margin-bottom']
  };
}

function renderList(props) {
  const {
    node,
    children,
    style = {},
    key
  } = props;
  const attrs = (0, _everUtils.getAttributes)(node) || {}; // @ts-ignore

  const {
    jc = 'left',
    list
  } = attrs; // @ts-ignore

  const ind = attrs.ind || {};
  const firstLine = ind.firstLine || ind.firstline || 0;
  const {
    isChecked,
    isTaskList
  } = list;
  const listStyle = { ...style,
    textAlign: jc === 'distribute' ? 'justify' : jc,
    textIndent: firstLine
  };

  if (jc === 'distribute') {
    listStyle.textAlignLast = 'justify';
  }

  return /*#__PURE__*/_createElement("div", {
    style: listStyle,
    key: key
  }, isTaskList && /*#__PURE__*/_createElement("input", {
    type: "checkbox",
    checked: isChecked,
    readOnly: true
  }), children);
}

function Paragraph(props) {
  const {
    Component,
    node,
    children,
    style = {},
    path,
    config,
    ...rest
  } = props;
  const attrs = (0, _everUtils.getAttributes)(node) || {};
  const dataType = attrs.blockquote && 'blockquote'; // @ts-ignore

  const {
    jc = 'left',
    list,
    spacing = {}
  } = attrs; // Fixed: ind 可能出现 null 的数据情况
  // @ts-ignore

  const ind = attrs.ind || {};
  const {
    left = 0
  } = ind;
  const firstLine = ind.firstLine || ind.firstline || 0;
  if (list) return renderList(props);

  const block = _everCangjie.Block.create({
    type: 'paragraph',
    data: {
      spacing
    }
  });

  const spacingStyle = _everUtils.SpacingUtil.toStyle(block);

  const paragraphStyle = { ...getHeadStyle((0, _everUtils.getTagName)(node)),
    ...style,
    textAlign: jc === 'distribute' ? 'justify' : jc,
    textIndent: firstLine,
    marginLeft: left,
    // 浏览器里 p 标签会带上 1em marginTop、marginBottom，导致 safari 浏览器自动纠正 text/plain 数据, 产生多余空行
    marginTop: 0,
    marginBottom: 0,
    ...spacingStyle
  };

  if (jc === 'distribute') {
    paragraphStyle.textAlignLast = 'justify';
  }

  const useWebLineHeight = config && config.useWebLineHeight;

  if (spacing.line && !useWebLineHeight) {
    // 转换为百分比兼容word和竞品
    paragraphStyle.lineHeight = `${(spacing.line * 100).toFixed(0)}%`;
  }

  return (
    /*#__PURE__*/
    // @ts-ignore
    _createElement(Component, (0, _extends2.default)({
      "data-type": dataType
    }, rest, {
      style: paragraphStyle
    }), children)
  );
}

function createJsonMLToHTML(configs) {
  return {
    name: _models.default.TYPE,
    match: node => {
      const tagName = (0, _everUtils.getTagName)(node);
      return !!tagToComponent[tagName];
    },
    convert: (node, key = [], convert) => {
      const tagName = (0, _everUtils.getTagName)(node);
      const Component = tagToComponent[tagName];
      const children = (0, _everUtils.getChildren)(node).map((child, index) => convert(child, [...key, index]));
      const {
        paragraph: paragraphConfig
      } = configs || {};
      return (
        /*#__PURE__*/
        // @ts-ignore
        _createElement(Paragraph, {
          Component: Component,
          node: node // @ts-ignore
          ,
          key: key,
          path: key,
          config: paragraphConfig
        }, children)
      );
    }
  };
}
//# sourceMappingURL=jsonMLToHTML.js.map