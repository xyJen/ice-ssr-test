"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSequent = isSequent;

var _everCangjie = require("@ali/4ever-cangjie");

var _sortNodeKeys = require("./sortNodeKeys");

function isSequent(keys, controller) {
  const {
    document
  } = controller.value;
  const sortedNodeKeys = (0, _sortNodeKeys.sortNodeKeys)(keys, document);
  const {
    length
  } = sortedNodeKeys;
  return sortedNodeKeys.every((key, index) => {
    if (index < length - 1) {
      const nextKey = sortedNodeKeys[index + 1];
      const path = document.getPath(key);
      const nextPath = document.getPath(nextKey);

      if (path && nextPath) {
        if (_everCangjie.Path.isSibling(path, nextPath) && (path.at(-1) || 0) - (nextPath.at(-1) || 0) === -1) {
          return true;
        }

        const node = document.getNode(key);
        const nextNode = document.getNode(sortedNodeKeys[index + 1]);
        const isColumnsChild = controller.query('isColumnsChild', node);
        const isNextNodeColumnsChild = controller.query('isColumnsChild', nextNode);

        if (isColumnsChild || isNextNodeColumnsChild) {
          if (!isColumnsChild) {
            const nextColumnsPath = _everCangjie.Path.parent(_everCangjie.Path.parent(nextPath));

            if (_everCangjie.Path.isSibling(path, nextColumnsPath) && nextPath.at(-1) === 0 && path.at(-1) - nextColumnsPath.at(-1) === -1) {
              return true;
            }
          } else if (!isNextNodeColumnsChild) {
            const columnsRowPath = _everCangjie.Path.parent(path);

            const columnsPath = _everCangjie.Path.parent(_everCangjie.Path.parent(path));

            const columnsNum = document.getNodeByPath(columnsRowPath).nodes.length;
            return _everCangjie.Path.isSibling(columnsPath, nextPath) && path.at(-1) === columnsNum - 1 && columnsPath.at(-1) - nextPath.at(-1) === -1;
          } else {
            const nextColumnsPath = _everCangjie.Path.parent(_everCangjie.Path.parent(nextPath));

            const columnsRowPath = _everCangjie.Path.parent(path);

            const columnsPath = _everCangjie.Path.parent(_everCangjie.Path.parent(path));

            const columnsNum = document.getNodeByPath(columnsRowPath).nodes.length;
            return _everCangjie.Path.isSibling(columnsPath, nextColumnsPath) && path.at(-1) === columnsNum - 1 && nextPath.at(-1) === 0 && columnsPath.at(-1) - nextColumnsPath.at(-1) === -1;
          }
        }

        return false;
      }
    }

    return true;
  });
}
//# sourceMappingURL=isSequent.js.map