"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectManager = void 0;

class SelectManager {
  constructor(params) {
    this.selectedNodeKetSet = new Set();
    this.handlers = {};
    this.onSelectingChange = void 0;
    this.onNodeSelectedChange = void 0;
    this.onSelectingChange = params.onSelectingChange;
    this.onNodeSelectedChange = params.onNodeSelectedChange;
  }

  get isSelecting() {
    return this.selectedNodeKetSet.size > 0;
  }

  closeSelect() {
    this.selectedNodeKetSet.clear();
    this.emitter('hideSelect');
  }

  emitter(type, ...args) {
    this.handlers[type]?.forEach(fn => fn(...args));
  }

  on(type, callback) {
    if (!this.handlers[type]) {
      this.handlers[type] = [callback];
    } else {
      this.handlers[type].push(callback);
    }
  }

  off(type, callback) {
    if (this.handlers[type]) {
      const index = this.handlers[type].indexOf(callback);

      if (index > -1) {
        this.handlers[type].splice(index, 1);
      }
    }
  }

  setNodeSelected(key, flag) {
    if (flag) {
      if (this.selectedNodeKetSet.size === 0) {
        this.emitter('showSelect');
        this.onSelectingChange?.(true);
      }

      this.selectedNodeKetSet.add(key);
      this.onNodeSelectedChange?.(true, key);
    } else {
      this.selectedNodeKetSet.delete(key);
      this.onNodeSelectedChange?.(false, key);

      if (this.selectedNodeKetSet.size === 0) {
        this.emitter('hideSelect');
        this.onSelectingChange?.(false);
      }
    }

    this.emitter('selectedNodeChange', this.getSelectedNodeKeys());
  }

  isNodeSelected(key) {
    return this.selectedNodeKetSet.has(key);
  }

  getSelectedNodeKeys() {
    return Array.from(this.selectedNodeKetSet.keys());
  }

}

exports.SelectManager = SelectManager;
//# sourceMappingURL=SelectManager.js.map