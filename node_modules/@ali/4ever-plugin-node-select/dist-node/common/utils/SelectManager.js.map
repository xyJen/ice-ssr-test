{"version":3,"sources":["../../../../src/common/utils/SelectManager.ts"],"names":["SelectManager","constructor","params","selectedNodeKetSet","Set","handlers","onSelectingChange","onNodeSelectedChange","isSelecting","size","closeSelect","clear","emitter","type","args","forEach","fn","on","callback","push","off","index","indexOf","splice","setNodeSelected","key","flag","add","delete","getSelectedNodeKeys","isNodeSelected","has","Array","from","keys"],"mappings":";;;;;;;AAMO,MAAMA,aAAN,CAAoB;AAMzBC,EAAAA,WAAW,CAACC,MAAD,EAA8B;AAAA,SALxBC,kBAKwB,GALU,IAAIC,GAAJ,EAKV;AAAA,SAJjCC,QAIiC,GAJM,EAIN;AAAA,SAHxBC,iBAGwB;AAAA,SAFxBC,oBAEwB;AACvC,SAAKD,iBAAL,GAAyBJ,MAAM,CAACI,iBAAhC;AACA,SAAKC,oBAAL,GAA4BL,MAAM,CAACK,oBAAnC;AACD;;AAED,MAAIC,WAAJ,GAAkB;AAChB,WAAO,KAAKL,kBAAL,CAAwBM,IAAxB,GAA+B,CAAtC;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,SAAKP,kBAAL,CAAwBQ,KAAxB;AACA,SAAKC,OAAL,CAAa,YAAb;AACD;;AAEDA,EAAAA,OAAO,CAACC,IAAD,EAAkB,GAAGC,IAArB,EAA2B;AAChC,SAAKT,QAAL,CAAcQ,IAAd,GAAqBE,OAArB,CAA8BC,EAAD,IAAQA,EAAE,CAAC,GAAGF,IAAJ,CAAvC;AACD;;AAEDG,EAAAA,EAAE,CAACJ,IAAD,EAAkBK,QAAlB,EAAsC;AACtC,QAAI,CAAC,KAAKb,QAAL,CAAcQ,IAAd,CAAL,EAA0B;AACxB,WAAKR,QAAL,CAAcQ,IAAd,IAAsB,CAACK,QAAD,CAAtB;AACD,KAFD,MAEO;AACL,WAAKb,QAAL,CAAcQ,IAAd,EAAoBM,IAApB,CAAyBD,QAAzB;AACD;AACF;;AAEDE,EAAAA,GAAG,CAACP,IAAD,EAAkBK,QAAlB,EAAsC;AACvC,QAAI,KAAKb,QAAL,CAAcQ,IAAd,CAAJ,EAAyB;AACvB,YAAMQ,KAAK,GAAG,KAAKhB,QAAL,CAAcQ,IAAd,EAAoBS,OAApB,CAA4BJ,QAA5B,CAAd;;AACA,UAAIG,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,aAAKhB,QAAL,CAAcQ,IAAd,EAAoBU,MAApB,CAA2BF,KAA3B,EAAkC,CAAlC;AACD;AACF;AACF;;AAEDG,EAAAA,eAAe,CAACC,GAAD,EAAcC,IAAd,EAA6B;AAC1C,QAAIA,IAAJ,EAAU;AACR,UAAI,KAAKvB,kBAAL,CAAwBM,IAAxB,KAAiC,CAArC,EAAwC;AACtC,aAAKG,OAAL,CAAa,YAAb;AACA,aAAKN,iBAAL,GAAyB,IAAzB;AACD;;AACD,WAAKH,kBAAL,CAAwBwB,GAAxB,CAA4BF,GAA5B;AACA,WAAKlB,oBAAL,GAA4B,IAA5B,EAAkCkB,GAAlC;AACD,KAPD,MAOO;AACL,WAAKtB,kBAAL,CAAwByB,MAAxB,CAA+BH,GAA/B;AACA,WAAKlB,oBAAL,GAA4B,KAA5B,EAAmCkB,GAAnC;;AACA,UAAI,KAAKtB,kBAAL,CAAwBM,IAAxB,KAAiC,CAArC,EAAwC;AACtC,aAAKG,OAAL,CAAa,YAAb;AACA,aAAKN,iBAAL,GAAyB,KAAzB;AACD;AACF;;AACD,SAAKM,OAAL,CAAa,oBAAb,EAAmC,KAAKiB,mBAAL,EAAnC;AACD;;AAEDC,EAAAA,cAAc,CAACL,GAAD,EAAc;AAC1B,WAAO,KAAKtB,kBAAL,CAAwB4B,GAAxB,CAA4BN,GAA5B,CAAP;AACD;;AAEDI,EAAAA,mBAAmB,GAAG;AACpB,WAAOG,KAAK,CAACC,IAAN,CAAW,KAAK9B,kBAAL,CAAwB+B,IAAxB,EAAX,CAAP;AACD;;AAlEwB","sourcesContent":["type EventType = 'showSelect' | 'hideSelect' | 'selectedNodeChange';\n\ninterface SelectManagerParams {\n  onSelectingChange?: (selecting: boolean) => void;\n  onNodeSelectedChange?: (visible: boolean, key: string) => void;\n}\nexport class SelectManager {\n  private readonly selectedNodeKetSet: Set<string> = new Set();\n  private handlers: Record<string, Function[]> = {};\n  private readonly onSelectingChange?: (selecting: boolean) => void;\n  private readonly onNodeSelectedChange?: (visible: boolean, key: string) => void;\n\n  constructor(params: SelectManagerParams) {\n    this.onSelectingChange = params.onSelectingChange;\n    this.onNodeSelectedChange = params.onNodeSelectedChange;\n  }\n\n  get isSelecting() {\n    return this.selectedNodeKetSet.size > 0;\n  }\n\n  closeSelect() {\n    this.selectedNodeKetSet.clear();\n    this.emitter('hideSelect');\n  }\n\n  emitter(type: EventType, ...args) {\n    this.handlers[type]?.forEach((fn) => fn(...args));\n  }\n\n  on(type: EventType, callback: Function) {\n    if (!this.handlers[type]) {\n      this.handlers[type] = [callback];\n    } else {\n      this.handlers[type].push(callback);\n    }\n  }\n\n  off(type: EventType, callback: Function) {\n    if (this.handlers[type]) {\n      const index = this.handlers[type].indexOf(callback);\n      if (index > -1) {\n        this.handlers[type].splice(index, 1);\n      }\n    }\n  }\n\n  setNodeSelected(key: string, flag: boolean) {\n    if (flag) {\n      if (this.selectedNodeKetSet.size === 0) {\n        this.emitter('showSelect');\n        this.onSelectingChange?.(true);\n      }\n      this.selectedNodeKetSet.add(key);\n      this.onNodeSelectedChange?.(true, key);\n    } else {\n      this.selectedNodeKetSet.delete(key);\n      this.onNodeSelectedChange?.(false, key);\n      if (this.selectedNodeKetSet.size === 0) {\n        this.emitter('hideSelect');\n        this.onSelectingChange?.(false);\n      }\n    }\n    this.emitter('selectedNodeChange', this.getSelectedNodeKeys());\n  }\n\n  isNodeSelected(key: string) {\n    return this.selectedNodeKetSet.has(key);\n  }\n\n  getSelectedNodeKeys() {\n    return Array.from(this.selectedNodeKetSet.keys());\n  }\n}\n"],"file":"SelectManager.js"}