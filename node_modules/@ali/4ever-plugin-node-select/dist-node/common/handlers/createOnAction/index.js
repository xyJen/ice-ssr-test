"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnAction;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../../actions");

function createOnAction(configs, manager) {
  return (action, controller, next) => {
    const {
      type,
      payload
    } = action;

    if (type === _actions.CANCEL_SELECT_NODE) {
      const selectedNodeKeys = manager.getSelectedNodeKeys();
      const selectedNodes = selectedNodeKeys.map(key => controller.value.document.getNode(key)).filter(node => !!node);
      controller.dispatch('removeHighlight', {
        node: selectedNodes,
        type: 'hover',
        reason: 'blockSelect'
      });
      manager.closeSelect();
      return controller;
    }

    if (type === _actions.COPY_SELECTED_NODES) {
      const {
        selectedNodes,
        isCut
      } = payload;
      const copyNodes = controller.run('beforeCopySelectedNodes', selectedNodes) || selectedNodes;
      controller.query('copyNodes', copyNodes).then(res => {
        !isCut && configs.onCopy?.(res && res.succeeded);
      }).catch(() => {
        !isCut && configs.onCopy?.(false);
      });
      controller.dispatch('cancelSelectNode');
      return controller;
    }

    if (type === _actions.CUT_SELECTED_NODES) {
      const {
        selectedNodes
      } = payload;
      controller.dispatch('copySelectedNodes', {
        selectedNodes,
        isCut: true
      });
      controller.dispatch('deleteSelectedNodes', {
        selectedNodes
      });
      return controller;
    }

    if (type === _actions.DELETE_SELECTED_NODES) {
      const {
        selectedNodes
      } = payload;
      controller.dispatch('cancelSelectNode');
      const {
        length
      } = selectedNodes;

      for (let i = length - 1; i >= 0; i--) {
        controller.command(_everCangjie.Commands.removeNodeByKey, selectedNodes[i].key);
      }

      if (controller.query('isQuickPreview')) {
        controller.dispatch('exitPreview', {
          noFocus: true
        });
      }

      return controller;
    }

    return next();
  };
}
//# sourceMappingURL=index.js.map