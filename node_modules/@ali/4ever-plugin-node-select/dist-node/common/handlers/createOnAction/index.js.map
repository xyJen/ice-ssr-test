{"version":3,"sources":["../../../../../src/common/handlers/createOnAction/index.ts"],"names":["createOnAction","configs","manager","action","controller","next","type","payload","CANCEL_SELECT_NODE","selectedNodeKeys","getSelectedNodeKeys","selectedNodes","map","key","value","document","getNode","filter","node","dispatch","reason","closeSelect","COPY_SELECTED_NODES","isCut","copyNodes","run","query","then","res","onCopy","succeeded","catch","CUT_SELECTED_NODES","DELETE_SELECTED_NODES","length","i","command","Commands","removeNodeByKey","noFocus"],"mappings":";;;;;;;AAAA;;AAGA;;AAEe,SAASA,cAAT,CAAwBC,OAAxB,EAA2DC,OAA3D,EAAmF;AAChG,SAAO,CAACC,MAAD,EAASC,UAAT,EAAiCC,IAAjC,KAA0C;AAC/C,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBJ,MAA1B;;AACA,QAAIG,IAAI,KAAKE,2BAAb,EAAiC;AAC/B,YAAMC,gBAAgB,GAAGP,OAAO,CAACQ,mBAAR,EAAzB;AACA,YAAMC,aAAa,GAAGF,gBAAgB,CACnCG,GADmB,CACdC,GAAD,IAAST,UAAU,CAACU,KAAX,CAAiBC,QAAjB,CAA0BC,OAA1B,CAAkCH,GAAlC,CADM,EAEnBI,MAFmB,CAEXC,IAAD,IAAU,CAAC,CAACA,IAFA,CAAtB;AAGAd,MAAAA,UAAU,CAACe,QAAX,CAAoB,iBAApB,EAAuC;AACrCD,QAAAA,IAAI,EAAEP,aAD+B;AAErCL,QAAAA,IAAI,EAAE,OAF+B;AAGrCc,QAAAA,MAAM,EAAE;AAH6B,OAAvC;AAKAlB,MAAAA,OAAO,CAACmB,WAAR;AACA,aAAOjB,UAAP;AACD;;AACD,QAAIE,IAAI,KAAKgB,4BAAb,EAAkC;AAChC,YAAM;AAAEX,QAAAA,aAAF;AAAiBY,QAAAA;AAAjB,UAA2BhB,OAAjC;AACA,YAAMiB,SAAS,GAAGpB,UAAU,CAACqB,GAAX,CAAe,yBAAf,EAA0Cd,aAA1C,KAA4DA,aAA9E;AACAP,MAAAA,UAAU,CAACsB,KAAX,CAAiB,WAAjB,EAA8BF,SAA9B,EAAyCG,IAAzC,CAA+CC,GAAD,IAAS;AACrD,SAACL,KAAD,IAAUtB,OAAO,CAAC4B,MAAR,GAAiBD,GAAG,IAAIA,GAAG,CAACE,SAA5B,CAAV;AACD,OAFD,EAEGC,KAFH,CAES,MAAM;AACb,SAACR,KAAD,IAAUtB,OAAO,CAAC4B,MAAR,GAAiB,KAAjB,CAAV;AACD,OAJD;AAKAzB,MAAAA,UAAU,CAACe,QAAX,CAAoB,kBAApB;AACA,aAAOf,UAAP;AACD;;AACD,QAAIE,IAAI,KAAK0B,2BAAb,EAAiC;AAC/B,YAAM;AAAErB,QAAAA;AAAF,UAAoBJ,OAA1B;AACAH,MAAAA,UAAU,CAACe,QAAX,CAAoB,mBAApB,EAAyC;AACvCR,QAAAA,aADuC;AAEvCY,QAAAA,KAAK,EAAE;AAFgC,OAAzC;AAIAnB,MAAAA,UAAU,CAACe,QAAX,CAAoB,qBAApB,EAA2C;AACzCR,QAAAA;AADyC,OAA3C;AAGA,aAAOP,UAAP;AACD;;AACD,QAAIE,IAAI,KAAK2B,8BAAb,EAAoC;AAClC,YAAM;AAAEtB,QAAAA;AAAF,UAAoBJ,OAA1B;AACAH,MAAAA,UAAU,CAACe,QAAX,CAAoB,kBAApB;AACA,YAAM;AAAEe,QAAAA;AAAF,UAAavB,aAAnB;;AACA,WAAK,IAAIwB,CAAC,GAAGD,MAAM,GAAG,CAAtB,EAAyBC,CAAC,IAAI,CAA9B,EAAiCA,CAAC,EAAlC,EAAsC;AACpC/B,QAAAA,UAAU,CAACgC,OAAX,CAAmBC,sBAASC,eAA5B,EAA6C3B,aAAa,CAACwB,CAAD,CAAb,CAAiBtB,GAA9D;AACD;;AACD,UAAIT,UAAU,CAACsB,KAAX,CAAiB,gBAAjB,CAAJ,EAAwC;AACtCtB,QAAAA,UAAU,CAACe,QAAX,CAAoB,aAApB,EAAmC;AACjCoB,UAAAA,OAAO,EAAE;AADwB,SAAnC;AAGD;;AACD,aAAOnC,UAAP;AACD;;AACD,WAAOC,IAAI,EAAX;AACD,GApDD;AAqDD","sourcesContent":["import { Commands, Controller } from '@ali/4ever-cangjie';\nimport { INodeSelectPluginConfigs } from '../../types';\nimport { SelectManager } from '../../utils/SelectManager';\nimport { CANCEL_SELECT_NODE, COPY_SELECTED_NODES, CUT_SELECTED_NODES, DELETE_SELECTED_NODES } from '../../actions';\n\nexport default function createOnAction(configs: INodeSelectPluginConfigs, manager: SelectManager) {\n  return (action, controller: Controller, next) => {\n    const { type, payload } = action;\n    if (type === CANCEL_SELECT_NODE) {\n      const selectedNodeKeys = manager.getSelectedNodeKeys();\n      const selectedNodes = selectedNodeKeys\n        .map((key) => controller.value.document.getNode(key))\n        .filter((node) => !!node);\n      controller.dispatch('removeHighlight', {\n        node: selectedNodes,\n        type: 'hover',\n        reason: 'blockSelect',\n      });\n      manager.closeSelect();\n      return controller;\n    }\n    if (type === COPY_SELECTED_NODES) {\n      const { selectedNodes, isCut } = payload;\n      const copyNodes = controller.run('beforeCopySelectedNodes', selectedNodes) || selectedNodes;\n      controller.query('copyNodes', copyNodes).then((res) => {\n        !isCut && configs.onCopy?.(res && res.succeeded);\n      }).catch(() => {\n        !isCut && configs.onCopy?.(false);\n      });\n      controller.dispatch('cancelSelectNode');\n      return controller;\n    }\n    if (type === CUT_SELECTED_NODES) {\n      const { selectedNodes } = payload;\n      controller.dispatch('copySelectedNodes', {\n        selectedNodes,\n        isCut: true,\n      });\n      controller.dispatch('deleteSelectedNodes', {\n        selectedNodes,\n      });\n      return controller;\n    }\n    if (type === DELETE_SELECTED_NODES) {\n      const { selectedNodes } = payload;\n      controller.dispatch('cancelSelectNode');\n      const { length } = selectedNodes;\n      for (let i = length - 1; i >= 0; i--) {\n        controller.command(Commands.removeNodeByKey, selectedNodes[i].key);\n      }\n      if (controller.query('isQuickPreview')) {\n        controller.dispatch('exitPreview', {\n          noFocus: true,\n        });\n      }\n      return controller;\n    }\n    return next();\n  };\n}\n"],"file":"index.js"}