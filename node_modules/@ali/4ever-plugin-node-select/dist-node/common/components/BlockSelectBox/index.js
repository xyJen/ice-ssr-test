"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockSelectBox = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everComponent = require("@ali/4ever-component");

var _Swiper = require("./Swiper");

var _constants = require("../constants");

const _createElement = /*#__PURE__*/_react.default.createElement;

const Box = /*#__PURE__*/_styledComponents.default.div(["position:relative;"]);

const CHECKBOX_SIZE = 20;
const CHECKBOX_HOT_SIZE = 4;

const InnerCheckbox = /*#__PURE__*/_styledComponents.default.div(["width:", "px;height:", "px;box-sizing:border-box;border-radius:50%;background:", ";border:", ";transition:0.2s background,0.2s border;display:flex;align-items:center;justify-content:center;"], CHECKBOX_SIZE, CHECKBOX_SIZE, p => p.isSelected ? '#0089FF' : '#FFFFFF', p => p.isSelected ? '1.5px solid #0089FF' : '1.5px solid rgba(126, 134, 142, 0.24)');

const Checkbox = /*#__PURE__*/_styledComponents.default.div(["position:absolute;right:0;top:50%;transform:translate3d(50%,-50%,0);width:", "px;height:", "px;box-sizing:border-box;border-radius:50%;display:flex;align-items:center;justify-content:center;z-index:1;.icon,", "{pointer-events:none;}"], CHECKBOX_SIZE + CHECKBOX_HOT_SIZE * 2, CHECKBOX_SIZE + CHECKBOX_HOT_SIZE * 2, InnerCheckbox);

function blockEvent(e) {
  e.stopPropagation();
  e.preventDefault();
}

var _ref = /*#__PURE__*/_createElement(_everComponent.MobileIconCheck, {
  color: "#ffffff"
});

const BlockSelectBox = props => {
  const {
    children,
    node,
    manager,
    controller,
    style,
    className
  } = props;
  const {
    key
  } = node;

  const ref = _react.default.useRef(null);

  const [isSelected, setSelected] = _react.default.useState(manager.isNodeSelected(key));

  const [selectBox, setSelectBox] = _react.default.useState(manager.isSelecting);

  const swiper = _react.default.useRef(new _Swiper.Swiper(() => ref.current, {
    onPress: () => {
      setSelected(v => {
        const {
          isExpanded
        } = controller.value.selection; // 若不在多选状态，长按后选区为 isExpanded 状态，表示触发了右键菜单，状态保持不变

        if (!manager.isSelecting && isExpanded) {
          return v;
        } // 已经在多选状态，长按一定会切换节点的选择状态


        controller.dispatch(!v ? 'updateHighlight' : 'removeHighlight', {
          node,
          type: 'hover',
          reason: 'blockSelect'
        });
        manager.setNodeSelected(node.key, !v);
        return !v;
      });
    },
    onSwipeEnd: () => {
      setSelected(v => {
        controller.dispatch(!v ? 'updateHighlight' : 'removeHighlight', {
          node,
          type: 'hover',
          reason: 'blockSelect'
        });
        manager.setNodeSelected(node.key, !v);
        return !v;
      });
    },
    onClick: () => {
      setSelected(v => {
        controller.dispatch(!v ? 'updateHighlight' : 'removeHighlight', {
          node,
          type: 'hover',
          reason: 'blockSelect'
        });
        manager.setNodeSelected(node.key, !v);
        return !v;
      });
    }
  }));

  _react.default.useEffect(() => {
    // 处理渲染多选 checkbox
    const handleShowSelect = () => {
      setSelectBox(true);
    };

    manager.on('showSelect', handleShowSelect);
    return () => {
      manager.off('showSelect', handleShowSelect);
    };
  }, [manager]);

  _react.default.useEffect(() => {
    swiper.current.setEnableClick(selectBox);
  }, [selectBox]);

  _react.default.useEffect(() => {
    const handleHideSelect = () => {
      setSelectBox(false);
      setSelected(false);
    };

    manager.on('hideSelect', handleHideSelect);
    return () => {
      manager.off('hideSelect', handleHideSelect);
    };
  }, [manager]);

  const handleClickCheckBox = e => {
    e.preventDefault();
    e.stopPropagation();
    setSelected(v => {
      controller.dispatch(!v ? 'updateHighlight' : 'removeHighlight', {
        node,
        type: 'hover',
        reason: 'blockSelect'
      });
      manager.setNodeSelected(node.key, !v);
      return !v;
    });
  };

  const onRef = _react.default.useCallback(elem => {
    // @ts-ignore
    ref.current = elem;

    if (elem) {
      elem.addEventListener('touchstart', swiper.current.onTouchStart);
    }
  }, []);

  const handleTouchBox = _react.default.useCallback(e => {
    if (selectBox) {
      e.preventDefault();
    }
  }, [selectBox]);

  _react.default.useEffect(() => {
    return () => {
      if (manager.isNodeSelected(key)) {
        manager.setNodeSelected(key, false);
      }
    };
  }, [key, manager]);

  return /*#__PURE__*/_createElement(Box, {
    ref: onRef,
    className: `${_constants.NODE_SELECT_CLICKABLE_BOX_CLASS_NAME} ${className ?? ''}`,
    onTouchStart: handleTouchBox,
    onTouchEnd: handleTouchBox,
    style: style
  }, children, selectBox && /*#__PURE__*/_createElement(Checkbox, {
    onClick: handleClickCheckBox,
    onTouchEnd: blockEvent,
    className: "node-select-checkbox"
  }, /*#__PURE__*/_createElement(InnerCheckbox, {
    className: "node-select-visible-checkbox",
    isSelected: isSelected
  }, isSelected && _ref)));
};

exports.BlockSelectBox = BlockSelectBox;
//# sourceMappingURL=index.js.map