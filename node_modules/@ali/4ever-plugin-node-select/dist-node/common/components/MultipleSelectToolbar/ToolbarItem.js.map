{"version":3,"sources":["../../../../../src/common/components/MultipleSelectToolbar/ToolbarItem.tsx"],"names":["Wrapper","styled","div","Title","p","disabled","COLORS","LIGHT","LEVEL4_BASE_COLOR","ToolbarItem","props","title","key","icon","onClick","handleClick","React","useCallback","e","stopPropagation","preventDefault","cloneElement","color"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;;AAQ5B,MAAMA,OAAO,gBAAGC,0BAAOC,GAAV,0IAAb;;AAYA,MAAMC,KAAK,gBAAGF,0BAAOC,GAAV,mGAMCE,CAAD,IAAQA,CAAC,CAACC,QAAF,GAAaC,sBAAOC,KAAP,CAAaC,iBAA1B,GAA8C,SANtD,CAAX;;AASO,MAAMC,WAAW,GAAIC,KAAD,IAA8B;AACvD,QAAM;AAAEC,IAAAA,KAAF;AAASN,IAAAA,QAAT;AAAmBO,IAAAA,GAAnB;AAAwBC,IAAAA,IAAxB;AAA8BC,IAAAA;AAA9B,MAA0CJ,KAAhD;;AAEA,QAAMK,WAAW,GAAGC,eAAMC,WAAN,CAAmBC,CAAD,IAAyB;AAC7DA,IAAAA,CAAC,CAACC,eAAF;AACAD,IAAAA,CAAC,CAACE,cAAF;AACA,QAAIf,QAAJ,EAAc;AACdS,IAAAA,OAAO,CAACF,GAAD,CAAP;AACD,GALmB,EAKjB,CAACE,OAAD,EAAUT,QAAV,EAAoBO,GAApB,CALiB,CAApB;;AAOA,sBACE,eAAC,OAAD;AAAS,IAAA,OAAO,EAAEG;AAAlB,KAEIV,QAAQ,gBAAGW,eAAMK,YAAN,CAAmBR,IAAnB,EAA+C;AACxDS,IAAAA,KAAK,EAAEhB,sBAAOC,KAAP,CAAaC;AADoC,GAA/C,CAAH,GAEHK,IAJT,eAME,eAAC,KAAD;AAAO,IAAA,QAAQ,EAAER;AAAjB,KACGM,KADH,CANF,CADF;AAYD,CAtBM","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { COLORS } from '@ali/4ever-component';\nimport type { NodeSelectToolbarItem } from '@ali/4ever-cangjie';\n\nexport interface IToolbarItemProps extends Omit<NodeSelectToolbarItem, 'action' | 'priority'> {\n  onClick: (key: string) => void;\n}\n\nconst Wrapper = styled.div`\n  width: 72px;\n  padding: 8px 0 10px 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  & + & {\n    margin-left: 4px;\n  }\n`;\n\nconst Title = styled.div<{disabled?: boolean}>`\n  margin-top: 8px;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 20px;\n  text-align: center;\n  color: ${(p) => (p.disabled ? COLORS.LIGHT.LEVEL4_BASE_COLOR : '#35405A')};\n`;\n\nexport const ToolbarItem = (props: IToolbarItemProps) => {\n  const { title, disabled, key, icon, onClick } = props;\n\n  const handleClick = React.useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    if (disabled) return;\n    onClick(key);\n  }, [onClick, disabled, key]);\n\n  return (\n    <Wrapper onClick={handleClick}>\n      {\n        disabled ? React.cloneElement(icon as React.ReactElement, {\n          color: COLORS.LIGHT.LEVEL4_BASE_COLOR,\n        }) : icon\n      }\n      <Title disabled={disabled}>\n        {title}\n      </Title>\n    </Wrapper>\n  );\n};\n"],"file":"ToolbarItem.js"}