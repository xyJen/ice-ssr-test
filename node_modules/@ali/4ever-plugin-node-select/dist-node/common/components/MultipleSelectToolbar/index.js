"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultipleSelectToolbar = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _lodash = require("lodash");

var _weDesignNext = require("@ali/we-design-next");

var _everCangjie = require("@ali/4ever-cangjie");

var _everComponent = require("@ali/4ever-component");

var _isSequent = require("../../utils/isSequent");

var _sortNodeKeys = require("../../utils/sortNodeKeys");

var _ToolbarItem = require("./ToolbarItem");

var _constants = require("../constants");

const _createElement = /*#__PURE__*/_react.default.createElement;
const NODE_SELECTING_ATTRIBUTE = 'data-node-selecting';

const ToolbarWrapper = /*#__PURE__*/_styledComponents.default.div(["position:relative;margin:0 auto;width:min-content;background:#ffffff;box-shadow:0px 0px 1px rgba(126,134,142,0.18),0px 12px 32px 0px rgba(53,64,90,0.18);border-radius:8px;padding:34px 6px 6px 6px;display:flex;flex-direction:row;"]);

const ToolbarBtnsWrapper = /*#__PURE__*/_styledComponents.default.div(["display:flex;flex-direction:row;"]);

const ToolbarDropDownIconWrapper = /*#__PURE__*/_styledComponents.default.div(["position:absolute;left:50%;transform:translateX(-50%) rotate(-90deg);top:0px;font-size:0;padding:4px;"]);

const Drawer = /*#__PURE__*/(0, _styledComponents.default)(_weDesignNext.DrawerMobile)(["& > div{pointer-events:none;}& .wdn-drawer-mobile-drawer-box{background:transparent;height:auto;box-shadow:unset;border-radius:0;padding:0;padding-bottom:40px;}& .wdn-drawer-mobile-drawer-box > .node-select-clickable-box{pointer-events:auto;}"]);

var _ref = /*#__PURE__*/_createElement(_everComponent.MobileIconBack, {
  color: "rgba(53, 64, 90, 0.48)"
});

const MultipleSelectToolbar = props => {
  const {
    controller,
    manager,
    toolbarItemsPriority
  } = props;

  const [isVisible, setVisible] = _react.default.useState(false);

  const [layout, setLayout] = _react.default.useState([]);

  const handleClose = _react.default.useCallback(() => {
    const selectedNodeKeys = manager.getSelectedNodeKeys();
    const selectedNodes = selectedNodeKeys.map(key => controller.value.document.getNode(key)).filter(node => !!node); // 清除掉高亮效果

    controller.dispatch('removeHighlight', {
      node: selectedNodes,
      type: 'hover',
      reason: 'blockSelect'
    });
    manager.closeSelect();
  }, [manager, controller]);

  _react.default.useEffect(() => {
    const handleHide = () => {
      setVisible(false);
    };

    let timer = null;

    const handleShow = () => {
      setVisible(true);
      const {
        isExpanded
      } = controller.value.selection;

      if (isExpanded) {
        controller.command(_everCangjie.Commands.moveToFocus);
      }

      timer = setTimeout(() => {
        controller.run('onCangjieBlur');
      });
    };

    manager.on('showSelect', handleShow);
    manager.on('hideSelect', handleHide);
    return () => {
      manager.off('showSelect', handleShow);
      manager.off('hideSelect', handleHide);
      timer && clearTimeout(timer);
      timer = null;
    };
  }, [manager, controller]);

  _react.default.useEffect(() => {
    const handleSelectedNodeChange = selectedNodeKeys => {
      const sequent = (0, _isSequent.isSequent)(selectedNodeKeys, controller);
      const toolbarItems = controller.run('getNodeSelectToolbarItems', {
        isSequent: sequent,
        // TODO
        selectedNodeTypes: []
      }) || [];
      const sortedLayout = toolbarItems.filter(item => {
        return !!item && (typeof toolbarItemsPriority?.[item.key] === 'number' ? toolbarItemsPriority?.[item.key] > 0 : item.priority > 0);
      }).sort((item1, item2) => {
        const item1Priority = typeof toolbarItemsPriority?.[item1.key] === 'number' ? toolbarItemsPriority?.[item1.key] : item1.priority || 0;
        const item2Priority = typeof toolbarItemsPriority?.[item2.key] === 'number' ? toolbarItemsPriority?.[item2.key] : item2.priority || 0;
        return item1Priority - item2Priority;
      });
      setLayout(oldLayout => {
        if (!(0, _lodash.isEqual)(oldLayout, sortedLayout)) {
          return sortedLayout;
        }

        return oldLayout;
      });
    };

    manager.on('selectedNodeChange', handleSelectedNodeChange);
    return () => {
      manager.off('selectedNodeChange', handleSelectedNodeChange);
    };
  }, [controller, manager, toolbarItemsPriority]);

  const handleClick = _react.default.useCallback(key => {
    const btn = layout.find(item => item.key === key);

    if (btn && btn.action) {
      const keys = manager.getSelectedNodeKeys(); // @ts-ignore

      const sortedNodeKeys = (0, _sortNodeKeys.sortNodeKeys)(keys, controller.value.document);
      const sortedNodes = sortedNodeKeys.map(nodeKey => {
        return controller.value.document.getNode(nodeKey);
      }).filter(node => !!node);
      controller.dispatch(btn.action, {
        selectedNodes: sortedNodes
      });
    }
  }, [layout, controller, manager]);

  _react.default.useEffect(() => {
    const handleClickOutside = e => {
      const {
        target
      } = e;

      if (!target.closest(`.${_constants.NODE_SELECT_CLICKABLE_BOX_CLASS_NAME}`)) {
        handleClose();
      }
    };

    if (isVisible) {
      document.body.addEventListener('click', handleClickOutside);
    }

    return () => {
      if (isVisible) {
        document.body.removeEventListener('click', handleClickOutside);
      }
    };
  }, [handleClose, isVisible]);

  _react.default.useEffect(() => {
    if (isVisible) {
      window.document.body.setAttribute(NODE_SELECTING_ATTRIBUTE, '');
    } else {
      window.document.body.removeAttribute(NODE_SELECTING_ATTRIBUTE);
    }

    return () => {
      window.document.body.removeAttribute(NODE_SELECTING_ATTRIBUTE);
    };
  }, [isVisible]);

  return /*#__PURE__*/_createElement(Drawer, {
    content: /*#__PURE__*/_createElement(ToolbarWrapper, {
      className: _constants.NODE_SELECT_CLICKABLE_BOX_CLASS_NAME
    }, /*#__PURE__*/_createElement(ToolbarDropDownIconWrapper, {
      onClick: handleClose
    }, _ref), /*#__PURE__*/_createElement(ToolbarBtnsWrapper, null, layout.map(item => /*#__PURE__*/_createElement(_ToolbarItem.ToolbarItem, {
      onClick: () => handleClick(item.key),
      title: item.title,
      key: item.key,
      icon: item.icon,
      disabled: item.disabled
    })))),
    height: 'auto',
    visible: isVisible,
    onClose: handleClose,
    getContainer: () => document.body
  });
};

exports.MultipleSelectToolbar = MultipleSelectToolbar;
//# sourceMappingURL=index.js.map