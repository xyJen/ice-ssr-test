import _createClass from "@babel/runtime/helpers/createClass";
export var SelectManager = /*#__PURE__*/function () {
  function SelectManager(params) {
    this.selectedNodeKetSet = new Set();
    this.handlers = {};
    this.onSelectingChange = void 0;
    this.onNodeSelectedChange = void 0;
    this.onSelectingChange = params.onSelectingChange;
    this.onNodeSelectedChange = params.onNodeSelectedChange;
  }

  var _proto = SelectManager.prototype;

  _proto.closeSelect = function closeSelect() {
    this.selectedNodeKetSet.clear();
    this.emitter('hideSelect');
  };

  _proto.emitter = function emitter(type) {
    var _this$handlers$type;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    (_this$handlers$type = this.handlers[type]) == null ? void 0 : _this$handlers$type.forEach(function (fn) {
      return fn.apply(void 0, args);
    });
  };

  _proto.on = function on(type, callback) {
    if (!this.handlers[type]) {
      this.handlers[type] = [callback];
    } else {
      this.handlers[type].push(callback);
    }
  };

  _proto.off = function off(type, callback) {
    if (this.handlers[type]) {
      var index = this.handlers[type].indexOf(callback);

      if (index > -1) {
        this.handlers[type].splice(index, 1);
      }
    }
  };

  _proto.setNodeSelected = function setNodeSelected(key, flag) {
    if (flag) {
      var _this$onNodeSelectedC;

      if (this.selectedNodeKetSet.size === 0) {
        var _this$onSelectingChan;

        this.emitter('showSelect');
        (_this$onSelectingChan = this.onSelectingChange) == null ? void 0 : _this$onSelectingChan.call(this, true);
      }

      this.selectedNodeKetSet.add(key);
      (_this$onNodeSelectedC = this.onNodeSelectedChange) == null ? void 0 : _this$onNodeSelectedC.call(this, true, key);
    } else {
      var _this$onNodeSelectedC2;

      this.selectedNodeKetSet["delete"](key);
      (_this$onNodeSelectedC2 = this.onNodeSelectedChange) == null ? void 0 : _this$onNodeSelectedC2.call(this, false, key);

      if (this.selectedNodeKetSet.size === 0) {
        var _this$onSelectingChan2;

        this.emitter('hideSelect');
        (_this$onSelectingChan2 = this.onSelectingChange) == null ? void 0 : _this$onSelectingChan2.call(this, false);
      }
    }

    this.emitter('selectedNodeChange', this.getSelectedNodeKeys());
  };

  _proto.isNodeSelected = function isNodeSelected(key) {
    return this.selectedNodeKetSet.has(key);
  };

  _proto.getSelectedNodeKeys = function getSelectedNodeKeys() {
    return Array.from(this.selectedNodeKetSet.keys());
  };

  _createClass(SelectManager, [{
    key: "isSelecting",
    get: function get() {
      return this.selectedNodeKetSet.size > 0;
    }
  }]);

  return SelectManager;
}();
//# sourceMappingURL=SelectManager.js.map