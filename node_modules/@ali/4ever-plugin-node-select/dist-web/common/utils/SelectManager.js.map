{"version":3,"sources":["../../../../src/common/utils/SelectManager.ts"],"names":["SelectManager","params","selectedNodeKetSet","Set","handlers","onSelectingChange","onNodeSelectedChange","closeSelect","clear","emitter","type","args","forEach","fn","on","callback","push","off","index","indexOf","splice","setNodeSelected","key","flag","size","add","getSelectedNodeKeys","isNodeSelected","has","Array","from","keys"],"mappings":";AAMA,WAAaA,aAAb;AAME,yBAAYC,MAAZ,EAAyC;AAAA,SALxBC,kBAKwB,GALU,IAAIC,GAAJ,EAKV;AAAA,SAJjCC,QAIiC,GAJM,EAIN;AAAA,SAHxBC,iBAGwB;AAAA,SAFxBC,oBAEwB;AACvC,SAAKD,iBAAL,GAAyBJ,MAAM,CAACI,iBAAhC;AACA,SAAKC,oBAAL,GAA4BL,MAAM,CAACK,oBAAnC;AACD;;AATH;;AAAA,SAeEC,WAfF,GAeE,uBAAc;AACZ,SAAKL,kBAAL,CAAwBM,KAAxB;AACA,SAAKC,OAAL,CAAa,YAAb;AACD,GAlBH;;AAAA,SAoBEA,OApBF,GAoBE,iBAAQC,IAAR,EAAkC;AAAA;;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAChC,gCAAKP,QAAL,CAAcM,IAAd,0CAAqBE,OAArB,CAA6B,UAACC,EAAD;AAAA,aAAQA,EAAE,MAAF,SAAMF,IAAN,CAAR;AAAA,KAA7B;AACD,GAtBH;;AAAA,SAwBEG,EAxBF,GAwBE,YAAGJ,IAAH,EAAoBK,QAApB,EAAwC;AACtC,QAAI,CAAC,KAAKX,QAAL,CAAcM,IAAd,CAAL,EAA0B;AACxB,WAAKN,QAAL,CAAcM,IAAd,IAAsB,CAACK,QAAD,CAAtB;AACD,KAFD,MAEO;AACL,WAAKX,QAAL,CAAcM,IAAd,EAAoBM,IAApB,CAAyBD,QAAzB;AACD;AACF,GA9BH;;AAAA,SAgCEE,GAhCF,GAgCE,aAAIP,IAAJ,EAAqBK,QAArB,EAAyC;AACvC,QAAI,KAAKX,QAAL,CAAcM,IAAd,CAAJ,EAAyB;AACvB,UAAMQ,KAAK,GAAG,KAAKd,QAAL,CAAcM,IAAd,EAAoBS,OAApB,CAA4BJ,QAA5B,CAAd;;AACA,UAAIG,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,aAAKd,QAAL,CAAcM,IAAd,EAAoBU,MAApB,CAA2BF,KAA3B,EAAkC,CAAlC;AACD;AACF;AACF,GAvCH;;AAAA,SAyCEG,eAzCF,GAyCE,yBAAgBC,GAAhB,EAA6BC,IAA7B,EAA4C;AAC1C,QAAIA,IAAJ,EAAU;AAAA;;AACR,UAAI,KAAKrB,kBAAL,CAAwBsB,IAAxB,KAAiC,CAArC,EAAwC;AAAA;;AACtC,aAAKf,OAAL,CAAa,YAAb;AACA,sCAAKJ,iBAAL,sDAAyB,IAAzB;AACD;;AACD,WAAKH,kBAAL,CAAwBuB,GAAxB,CAA4BH,GAA5B;AACA,oCAAKhB,oBAAL,sDAA4B,IAA5B,EAAkCgB,GAAlC;AACD,KAPD,MAOO;AAAA;;AACL,WAAKpB,kBAAL,WAA+BoB,GAA/B;AACA,qCAAKhB,oBAAL,uDAA4B,KAA5B,EAAmCgB,GAAnC;;AACA,UAAI,KAAKpB,kBAAL,CAAwBsB,IAAxB,KAAiC,CAArC,EAAwC;AAAA;;AACtC,aAAKf,OAAL,CAAa,YAAb;AACA,uCAAKJ,iBAAL,uDAAyB,KAAzB;AACD;AACF;;AACD,SAAKI,OAAL,CAAa,oBAAb,EAAmC,KAAKiB,mBAAL,EAAnC;AACD,GA1DH;;AAAA,SA4DEC,cA5DF,GA4DE,wBAAeL,GAAf,EAA4B;AAC1B,WAAO,KAAKpB,kBAAL,CAAwB0B,GAAxB,CAA4BN,GAA5B,CAAP;AACD,GA9DH;;AAAA,SAgEEI,mBAhEF,GAgEE,+BAAsB;AACpB,WAAOG,KAAK,CAACC,IAAN,CAAW,KAAK5B,kBAAL,CAAwB6B,IAAxB,EAAX,CAAP;AACD,GAlEH;;AAAA;AAAA;AAAA,wBAWoB;AAChB,aAAO,KAAK7B,kBAAL,CAAwBsB,IAAxB,GAA+B,CAAtC;AACD;AAbH;;AAAA;AAAA","sourcesContent":["type EventType = 'showSelect' | 'hideSelect' | 'selectedNodeChange';\n\ninterface SelectManagerParams {\n  onSelectingChange?: (selecting: boolean) => void;\n  onNodeSelectedChange?: (visible: boolean, key: string) => void;\n}\nexport class SelectManager {\n  private readonly selectedNodeKetSet: Set<string> = new Set();\n  private handlers: Record<string, Function[]> = {};\n  private readonly onSelectingChange?: (selecting: boolean) => void;\n  private readonly onNodeSelectedChange?: (visible: boolean, key: string) => void;\n\n  constructor(params: SelectManagerParams) {\n    this.onSelectingChange = params.onSelectingChange;\n    this.onNodeSelectedChange = params.onNodeSelectedChange;\n  }\n\n  get isSelecting() {\n    return this.selectedNodeKetSet.size > 0;\n  }\n\n  closeSelect() {\n    this.selectedNodeKetSet.clear();\n    this.emitter('hideSelect');\n  }\n\n  emitter(type: EventType, ...args) {\n    this.handlers[type]?.forEach((fn) => fn(...args));\n  }\n\n  on(type: EventType, callback: Function) {\n    if (!this.handlers[type]) {\n      this.handlers[type] = [callback];\n    } else {\n      this.handlers[type].push(callback);\n    }\n  }\n\n  off(type: EventType, callback: Function) {\n    if (this.handlers[type]) {\n      const index = this.handlers[type].indexOf(callback);\n      if (index > -1) {\n        this.handlers[type].splice(index, 1);\n      }\n    }\n  }\n\n  setNodeSelected(key: string, flag: boolean) {\n    if (flag) {\n      if (this.selectedNodeKetSet.size === 0) {\n        this.emitter('showSelect');\n        this.onSelectingChange?.(true);\n      }\n      this.selectedNodeKetSet.add(key);\n      this.onNodeSelectedChange?.(true, key);\n    } else {\n      this.selectedNodeKetSet.delete(key);\n      this.onNodeSelectedChange?.(false, key);\n      if (this.selectedNodeKetSet.size === 0) {\n        this.emitter('hideSelect');\n        this.onSelectingChange?.(false);\n      }\n    }\n    this.emitter('selectedNodeChange', this.getSelectedNodeKeys());\n  }\n\n  isNodeSelected(key: string) {\n    return this.selectedNodeKetSet.has(key);\n  }\n\n  getSelectedNodeKeys() {\n    return Array.from(this.selectedNodeKetSet.keys());\n  }\n}\n"],"file":"SelectManager.js"}