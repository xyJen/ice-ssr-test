import { Commands } from '@ali/4ever-cangjie';
import { CANCEL_SELECT_NODE, COPY_SELECTED_NODES, CUT_SELECTED_NODES, DELETE_SELECTED_NODES } from "../../actions";
export default function createOnAction(configs, manager) {
  return function (action, controller, next) {
    var type = action.type,
        payload = action.payload;

    if (type === CANCEL_SELECT_NODE) {
      var selectedNodeKeys = manager.getSelectedNodeKeys();
      var selectedNodes = selectedNodeKeys.map(function (key) {
        return controller.value.document.getNode(key);
      }).filter(function (node) {
        return !!node;
      });
      controller.dispatch('removeHighlight', {
        node: selectedNodes,
        type: 'hover',
        reason: 'blockSelect'
      });
      manager.closeSelect();
      return controller;
    }

    if (type === COPY_SELECTED_NODES) {
      var _selectedNodes = payload.selectedNodes,
          isCut = payload.isCut;

      var copyNodes = controller.run('beforeCopySelectedNodes', _selectedNodes) || _selectedNodes;

      controller.query('copyNodes', copyNodes).then(function (res) {
        !isCut && (configs.onCopy == null ? void 0 : configs.onCopy(res && res.succeeded));
      })["catch"](function () {
        !isCut && (configs.onCopy == null ? void 0 : configs.onCopy(false));
      });
      controller.dispatch('cancelSelectNode');
      return controller;
    }

    if (type === CUT_SELECTED_NODES) {
      var _selectedNodes2 = payload.selectedNodes;
      controller.dispatch('copySelectedNodes', {
        selectedNodes: _selectedNodes2,
        isCut: true
      });
      controller.dispatch('deleteSelectedNodes', {
        selectedNodes: _selectedNodes2
      });
      return controller;
    }

    if (type === DELETE_SELECTED_NODES) {
      var _selectedNodes3 = payload.selectedNodes;
      controller.dispatch('cancelSelectNode');
      var length = _selectedNodes3.length;

      for (var i = length - 1; i >= 0; i--) {
        controller.command(Commands.removeNodeByKey, _selectedNodes3[i].key);
      }

      if (controller.query('isQuickPreview')) {
        controller.dispatch('exitPreview', {
          noFocus: true
        });
      }

      return controller;
    }

    return next();
  };
}
//# sourceMappingURL=index.js.map