{"version":3,"sources":["../../../../../src/common/handlers/createOnAction/index.ts"],"names":["Commands","CANCEL_SELECT_NODE","COPY_SELECTED_NODES","CUT_SELECTED_NODES","DELETE_SELECTED_NODES","createOnAction","configs","manager","action","controller","next","type","payload","selectedNodeKeys","getSelectedNodeKeys","selectedNodes","map","key","value","document","getNode","filter","node","dispatch","reason","closeSelect","isCut","copyNodes","run","query","then","res","onCopy","succeeded","length","i","command","removeNodeByKey","noFocus"],"mappings":"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","sourcesContent":["import { Commands, Controller } from '@ali/4ever-cangjie';\nimport { INodeSelectPluginConfigs } from '../../types';\nimport { SelectManager } from '../../utils/SelectManager';\nimport { CANCEL_SELECT_NODE, COPY_SELECTED_NODES, CUT_SELECTED_NODES, DELETE_SELECTED_NODES } from '../../actions';\n\nexport default function createOnAction(configs: INodeSelectPluginConfigs, manager: SelectManager) {\n  return (action, controller: Controller, next) => {\n    const { type, payload } = action;\n    if (type === CANCEL_SELECT_NODE) {\n      const selectedNodeKeys = manager.getSelectedNodeKeys();\n      const selectedNodes = selectedNodeKeys\n        .map((key) => controller.value.document.getNode(key))\n        .filter((node) => !!node);\n      controller.dispatch('removeHighlight', {\n        node: selectedNodes,\n        type: 'hover',\n        reason: 'blockSelect',\n      });\n      manager.closeSelect();\n      return controller;\n    }\n    if (type === COPY_SELECTED_NODES) {\n      const { selectedNodes, isCut } = payload;\n      const copyNodes = controller.run('beforeCopySelectedNodes', selectedNodes) || selectedNodes;\n      controller.query('copyNodes', copyNodes).then((res) => {\n        !isCut && configs.onCopy?.(res && res.succeeded);\n      }).catch(() => {\n        !isCut && configs.onCopy?.(false);\n      });\n      controller.dispatch('cancelSelectNode');\n      return controller;\n    }\n    if (type === CUT_SELECTED_NODES) {\n      const { selectedNodes } = payload;\n      controller.dispatch('copySelectedNodes', {\n        selectedNodes,\n        isCut: true,\n      });\n      controller.dispatch('deleteSelectedNodes', {\n        selectedNodes,\n      });\n      return controller;\n    }\n    if (type === DELETE_SELECTED_NODES) {\n      const { selectedNodes } = payload;\n      controller.dispatch('cancelSelectNode');\n      const { length } = selectedNodes;\n      for (let i = length - 1; i >= 0; i--) {\n        controller.command(Commands.removeNodeByKey, selectedNodes[i].key);\n      }\n      if (controller.query('isQuickPreview')) {\n        controller.dispatch('exitPreview', {\n          noFocus: true,\n        });\n      }\n      return controller;\n    }\n    return next();\n  };\n}\n"],"file":"index.js"}