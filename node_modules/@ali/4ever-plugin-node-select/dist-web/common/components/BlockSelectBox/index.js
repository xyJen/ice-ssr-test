import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { MobileIconCheck } from '@ali/4ever-component';
import { Swiper } from "./Swiper";
import { NODE_SELECT_CLICKABLE_BOX_CLASS_NAME } from "../constants";
var Box = /*#__PURE__*/styled.div(["position:relative;"]);
var CHECKBOX_SIZE = 20;
var CHECKBOX_HOT_SIZE = 4;
var InnerCheckbox = /*#__PURE__*/styled.div(["width:", "px;height:", "px;box-sizing:border-box;border-radius:50%;background:", ";border:", ";transition:0.2s background,0.2s border;display:flex;align-items:center;justify-content:center;"], CHECKBOX_SIZE, CHECKBOX_SIZE, function (p) {
  return p.isSelected ? '#0089FF' : '#FFFFFF';
}, function (p) {
  return p.isSelected ? '1.5px solid #0089FF' : '1.5px solid rgba(126, 134, 142, 0.24)';
});
var Checkbox = /*#__PURE__*/styled.div(["position:absolute;right:0;top:50%;transform:translate3d(50%,-50%,0);width:", "px;height:", "px;box-sizing:border-box;border-radius:50%;display:flex;align-items:center;justify-content:center;z-index:1;.icon,", "{pointer-events:none;}"], CHECKBOX_SIZE + CHECKBOX_HOT_SIZE * 2, CHECKBOX_SIZE + CHECKBOX_HOT_SIZE * 2, InnerCheckbox);

function blockEvent(e) {
  e.stopPropagation();
  e.preventDefault();
}

var _ref = /*#__PURE__*/_createElement(MobileIconCheck, {
  color: "#ffffff"
});

export var BlockSelectBox = function BlockSelectBox(props) {
  var children = props.children,
      node = props.node,
      manager = props.manager,
      controller = props.controller,
      style = props.style,
      className = props.className;
  var key = node.key;
  var ref = React.useRef(null);

  var _React$useState = React.useState(manager.isNodeSelected(key)),
      isSelected = _React$useState[0],
      setSelected = _React$useState[1];

  var _React$useState2 = React.useState(manager.isSelecting),
      selectBox = _React$useState2[0],
      setSelectBox = _React$useState2[1];

  var swiper = React.useRef(new Swiper(function () {
    return ref.current;
  }, {
    onPress: function onPress() {
      setSelected(function (v) {
        var isExpanded = controller.value.selection.isExpanded; // 若不在多选状态，长按后选区为 isExpanded 状态，表示触发了右键菜单，状态保持不变

        if (!manager.isSelecting && isExpanded) {
          return v;
        } // 已经在多选状态，长按一定会切换节点的选择状态


        controller.dispatch(!v ? 'updateHighlight' : 'removeHighlight', {
          node: node,
          type: 'hover',
          reason: 'blockSelect'
        });
        manager.setNodeSelected(node.key, !v);
        return !v;
      });
    },
    onSwipeEnd: function onSwipeEnd() {
      setSelected(function (v) {
        controller.dispatch(!v ? 'updateHighlight' : 'removeHighlight', {
          node: node,
          type: 'hover',
          reason: 'blockSelect'
        });
        manager.setNodeSelected(node.key, !v);
        return !v;
      });
    },
    onClick: function onClick() {
      setSelected(function (v) {
        controller.dispatch(!v ? 'updateHighlight' : 'removeHighlight', {
          node: node,
          type: 'hover',
          reason: 'blockSelect'
        });
        manager.setNodeSelected(node.key, !v);
        return !v;
      });
    }
  }));
  React.useEffect(function () {
    // 处理渲染多选 checkbox
    var handleShowSelect = function handleShowSelect() {
      setSelectBox(true);
    };

    manager.on('showSelect', handleShowSelect);
    return function () {
      manager.off('showSelect', handleShowSelect);
    };
  }, [manager]);
  React.useEffect(function () {
    swiper.current.setEnableClick(selectBox);
  }, [selectBox]);
  React.useEffect(function () {
    var handleHideSelect = function handleHideSelect() {
      setSelectBox(false);
      setSelected(false);
    };

    manager.on('hideSelect', handleHideSelect);
    return function () {
      manager.off('hideSelect', handleHideSelect);
    };
  }, [manager]);

  var handleClickCheckBox = function handleClickCheckBox(e) {
    e.preventDefault();
    e.stopPropagation();
    setSelected(function (v) {
      controller.dispatch(!v ? 'updateHighlight' : 'removeHighlight', {
        node: node,
        type: 'hover',
        reason: 'blockSelect'
      });
      manager.setNodeSelected(node.key, !v);
      return !v;
    });
  };

  var onRef = React.useCallback(function (elem) {
    // @ts-ignore
    ref.current = elem;

    if (elem) {
      elem.addEventListener('touchstart', swiper.current.onTouchStart);
    }
  }, []);
  var handleTouchBox = React.useCallback(function (e) {
    if (selectBox) {
      e.preventDefault();
    }
  }, [selectBox]);
  React.useEffect(function () {
    return function () {
      if (manager.isNodeSelected(key)) {
        manager.setNodeSelected(key, false);
      }
    };
  }, [key, manager]);
  return /*#__PURE__*/_createElement(Box, {
    ref: onRef,
    className: NODE_SELECT_CLICKABLE_BOX_CLASS_NAME + " " + (className != null ? className : ''),
    onTouchStart: handleTouchBox,
    onTouchEnd: handleTouchBox,
    style: style
  }, children, selectBox && /*#__PURE__*/_createElement(Checkbox, {
    onClick: handleClickCheckBox,
    onTouchEnd: blockEvent,
    className: "node-select-checkbox"
  }, /*#__PURE__*/_createElement(InnerCheckbox, {
    className: "node-select-visible-checkbox",
    isSelected: isSelected
  }, isSelected && _ref)));
};
//# sourceMappingURL=index.js.map