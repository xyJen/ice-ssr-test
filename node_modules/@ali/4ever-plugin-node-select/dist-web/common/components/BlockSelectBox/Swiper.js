import { PRESS_TIMEOUT, SWIPE_THRESHOLD, MAX_SWIPE_DISTANCE } from "./constants";

function getStartAndCurrentTouch(changedTouches, touches) {
  var length = changedTouches.length;

  for (var i = 0; i < length; i++) {
    var identifier = changedTouches[i].identifier;

    for (var j = 0; j < touches.length; j++) {
      var _touches$item;

      if (((_touches$item = touches.item(j)) == null ? void 0 : _touches$item.identifier) === identifier) {
        return {
          start: touches.item(j),
          current: changedTouches.item(i)
        };
      }
    }
  }

  return {};
} // 子元素是否在水平滚动


function isScrollingHorizontally(elem, scrollRight, root) {
  if (root === void 0) {
    root = document.body;
  }

  var scrollableContainer = elem.closest('[data-plugin-scrollable]');

  if (scrollableContainer && root.contains(scrollableContainer)) {
    var scrollLeft = scrollableContainer.scrollLeft,
        scrollWidth = scrollableContainer.scrollWidth,
        clientWidth = scrollableContainer.clientWidth;
    var isScrolling = !scrollRight ? scrollLeft + clientWidth < scrollWidth : scrollLeft > 0;

    if (isScrolling) {
      return true;
    }

    var parentElement = scrollableContainer.parentElement;
    return parentElement ? isScrollingHorizontally(parentElement, scrollRight, root) : false;
  }

  return false;
}

export var Swiper = function Swiper(getDomRef, handlers) {
  var _this = this;

  this.getDomRef = void 0;
  this.status = 'init';
  this.isPressingTimer = null;
  this.handlers = void 0;
  this.startTouches = null;
  this.enableClick = false;
  this.canScrollingHorizontally = undefined;
  this.initZIndex = '';

  this.setEnableClick = function (flag) {
    _this.enableClick = flag;
  };

  this.onPress = function (touch) {
    _this.status = 'isPressing';
    _this.handlers.onPress == null ? void 0 : _this.handlers.onPress(touch);
  };

  this.onSwipeEnd = function () {
    var dom = _this.getDomRef();

    if (dom) {
      dom.style.transition = 'transform 0.2s';
      dom.style.transform = 'translateX(0)';
      dom.style.zIndex = _this.initZIndex;
      _this.initZIndex = '';
    }

    _this.handlers.onSwipeEnd == null ? void 0 : _this.handlers.onSwipeEnd();
  };

  this.onTouchStart = function (e) {
    var touches = e.touches;
    _this.startTouches = touches;
    _this.isPressingTimer = setTimeout(function () {
      _this.onPress(touches[0]);
    }, PRESS_TIMEOUT);
    _this.canScrollingHorizontally = undefined;
    _this.status = 'init';

    var dom = _this.getDomRef();

    _this.initZIndex = dom ? getComputedStyle(dom).zIndex : '';
    document.body.addEventListener('touchmove', _this.onTouchMove, {
      passive: false,
      capture: true
    });
    document.body.addEventListener('touchend', _this.onTouchEnd, true);
    document.body.addEventListener('touchcancel', _this.onTouchCancel, true);
  };

  this.onTouchMove = function (e) {
    if (!_this.startTouches) {
      return;
    } // 处理阈值
    // 如果已经识别成长按或者垂直方向滚动，则后续的 swipe 不执行


    if (_this.status === 'isPressing' || _this.status === 'isScroll') {
      return;
    }

    var changedTouches = e.changedTouches;

    var dom = _this.getDomRef();

    var _getStartAndCurrentTo = getStartAndCurrentTouch(changedTouches, _this.startTouches),
        start = _getStartAndCurrentTo.start,
        current = _getStartAndCurrentTo.current;

    if (start && current && dom && _this.startTouches) {
      var swipeX = current.clientX - start.clientX;
      var swipeY = current.clientY - start.clientY; // 纵向滚动忽略不计

      if (Math.abs(swipeY) > Math.abs(swipeX) && _this.status === 'init') {
        _this.status = 'isScroll';
        _this.isPressingTimer && clearTimeout(_this.isPressingTimer);
        return;
      }

      if (Math.abs(swipeX) > SWIPE_THRESHOLD) {
        _this.isPressingTimer && clearTimeout(_this.isPressingTimer);
        _this.canScrollingHorizontally = _this.canScrollingHorizontally === undefined ? isScrollingHorizontally(current.target, swipeX > 0, dom) : _this.canScrollingHorizontally;

        if (_this.canScrollingHorizontally === false) {
          if (e.cancelable) {
            e.preventDefault();
          }

          e.stopPropagation();
          _this.status = 'isSwiping'; // TODO @miaomiao! 阻尼感

          var realSwipeX = Math.min(Math.log2(Math.abs(swipeX)) * (swipeX > 0 ? 1 : -1) * 5, MAX_SWIPE_DISTANCE);
          dom.style.transform = "translateX(" + realSwipeX + "px)";
          dom.style.zIndex = '1';
        }

        if (_this.canScrollingHorizontally === true) {
          _this.status = 'isScroll';
        }
      }
    }
  };

  this.reset = function () {
    _this.status = 'init';
    _this.startTouches = null;
    _this.isPressingTimer && clearTimeout(_this.isPressingTimer);
    document.body.removeEventListener('touchmove', _this.onTouchMove);
    document.body.removeEventListener('touchcancel', _this.onTouchCancel, true);
    document.body.removeEventListener('touchend', _this.onTouchEnd, true);
  };

  this.onEnd = function () {
    if (_this.status === 'isSwiping') {
      _this.onSwipeEnd();
    }

    _this.reset();
  };

  this.onTouchEnd = function (e) {
    if (_this.enableClick && _this.status === 'init' && _this.handlers.onClick) {
      var _touch$start, _touch$current;

      var _touch = getStartAndCurrentTouch(e.changedTouches, _this.startTouches);

      if (_touch && ((_touch$start = _touch.start) == null ? void 0 : _touch$start.target) === ((_touch$current = _touch.current) == null ? void 0 : _touch$current.target)) {
        _this.handlers.onClick();
      }
    }

    _this.onEnd();
  };

  this.onTouchCancel = function () {
    _this.onEnd();
  };

  this.getDomRef = getDomRef;
  this.handlers = handlers;
};
//# sourceMappingURL=Swiper.js.map