import React from 'react'; // import ReactDOM from 'react-dom';

var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { isEqual } from 'lodash-es';
import { DrawerMobile } from '@ali/we-design-next';
import { Commands } from '@ali/4ever-cangjie';
import { MobileIconBack } from '@ali/4ever-component';
import { isSequent } from "../../utils/isSequent";
import { sortNodeKeys } from "../../utils/sortNodeKeys";
import { ToolbarItem } from "./ToolbarItem";
import { NODE_SELECT_CLICKABLE_BOX_CLASS_NAME } from "../constants";
var NODE_SELECTING_ATTRIBUTE = 'data-node-selecting';
var ToolbarWrapper = /*#__PURE__*/styled.div(["position:relative;margin:0 auto;width:min-content;background:#ffffff;box-shadow:0px 0px 1px rgba(126,134,142,0.18),0px 12px 32px 0px rgba(53,64,90,0.18);border-radius:8px;padding:34px 6px 6px 6px;display:flex;flex-direction:row;"]);
var ToolbarBtnsWrapper = /*#__PURE__*/styled.div(["display:flex;flex-direction:row;"]);
var ToolbarDropDownIconWrapper = /*#__PURE__*/styled.div(["position:absolute;left:50%;transform:translateX(-50%) rotate(-90deg);top:0px;font-size:0;padding:4px;"]);
var Drawer = /*#__PURE__*/styled(DrawerMobile)(["& > div{pointer-events:none;}& .wdn-drawer-mobile-drawer-box{background:transparent;height:auto;box-shadow:unset;border-radius:0;padding:0;padding-bottom:40px;}& .wdn-drawer-mobile-drawer-box > .node-select-clickable-box{pointer-events:auto;}"]);

var _ref = /*#__PURE__*/_createElement(MobileIconBack, {
  color: "rgba(53, 64, 90, 0.48)"
});

export var MultipleSelectToolbar = function MultipleSelectToolbar(props) {
  var controller = props.controller,
      manager = props.manager,
      toolbarItemsPriority = props.toolbarItemsPriority;

  var _React$useState = React.useState(false),
      isVisible = _React$useState[0],
      setVisible = _React$useState[1];

  var _React$useState2 = React.useState([]),
      layout = _React$useState2[0],
      setLayout = _React$useState2[1];

  var handleClose = React.useCallback(function () {
    var selectedNodeKeys = manager.getSelectedNodeKeys();
    var selectedNodes = selectedNodeKeys.map(function (key) {
      return controller.value.document.getNode(key);
    }).filter(function (node) {
      return !!node;
    }); // 清除掉高亮效果

    controller.dispatch('removeHighlight', {
      node: selectedNodes,
      type: 'hover',
      reason: 'blockSelect'
    });
    manager.closeSelect();
  }, [manager, controller]);
  React.useEffect(function () {
    var handleHide = function handleHide() {
      setVisible(false);
    };

    var timer = null;

    var handleShow = function handleShow() {
      setVisible(true);
      var isExpanded = controller.value.selection.isExpanded;

      if (isExpanded) {
        controller.command(Commands.moveToFocus);
      }

      timer = setTimeout(function () {
        controller.run('onCangjieBlur');
      });
    };

    manager.on('showSelect', handleShow);
    manager.on('hideSelect', handleHide);
    return function () {
      manager.off('showSelect', handleShow);
      manager.off('hideSelect', handleHide);
      timer && clearTimeout(timer);
      timer = null;
    };
  }, [manager, controller]);
  React.useEffect(function () {
    var handleSelectedNodeChange = function handleSelectedNodeChange(selectedNodeKeys) {
      var sequent = isSequent(selectedNodeKeys, controller);
      var toolbarItems = controller.run('getNodeSelectToolbarItems', {
        isSequent: sequent,
        // TODO
        selectedNodeTypes: []
      }) || [];
      var sortedLayout = toolbarItems.filter(function (item) {
        return !!item && (typeof (toolbarItemsPriority == null ? void 0 : toolbarItemsPriority[item.key]) === 'number' ? (toolbarItemsPriority == null ? void 0 : toolbarItemsPriority[item.key]) > 0 : item.priority > 0);
      }).sort(function (item1, item2) {
        var item1Priority = typeof (toolbarItemsPriority == null ? void 0 : toolbarItemsPriority[item1.key]) === 'number' ? toolbarItemsPriority == null ? void 0 : toolbarItemsPriority[item1.key] : item1.priority || 0;
        var item2Priority = typeof (toolbarItemsPriority == null ? void 0 : toolbarItemsPriority[item2.key]) === 'number' ? toolbarItemsPriority == null ? void 0 : toolbarItemsPriority[item2.key] : item2.priority || 0;
        return item1Priority - item2Priority;
      });
      setLayout(function (oldLayout) {
        if (!isEqual(oldLayout, sortedLayout)) {
          return sortedLayout;
        }

        return oldLayout;
      });
    };

    manager.on('selectedNodeChange', handleSelectedNodeChange);
    return function () {
      manager.off('selectedNodeChange', handleSelectedNodeChange);
    };
  }, [controller, manager, toolbarItemsPriority]);
  var handleClick = React.useCallback(function (key) {
    var btn = layout.find(function (item) {
      return item.key === key;
    });

    if (btn && btn.action) {
      var keys = manager.getSelectedNodeKeys(); // @ts-ignore

      var sortedNodeKeys = sortNodeKeys(keys, controller.value.document);
      var sortedNodes = sortedNodeKeys.map(function (nodeKey) {
        return controller.value.document.getNode(nodeKey);
      }).filter(function (node) {
        return !!node;
      });
      controller.dispatch(btn.action, {
        selectedNodes: sortedNodes
      });
    }
  }, [layout, controller, manager]);
  React.useEffect(function () {
    var handleClickOutside = function handleClickOutside(e) {
      var target = e.target;

      if (!target.closest("." + NODE_SELECT_CLICKABLE_BOX_CLASS_NAME)) {
        handleClose();
      }
    };

    if (isVisible) {
      document.body.addEventListener('click', handleClickOutside);
    }

    return function () {
      if (isVisible) {
        document.body.removeEventListener('click', handleClickOutside);
      }
    };
  }, [handleClose, isVisible]);
  React.useEffect(function () {
    if (isVisible) {
      window.document.body.setAttribute(NODE_SELECTING_ATTRIBUTE, '');
    } else {
      window.document.body.removeAttribute(NODE_SELECTING_ATTRIBUTE);
    }

    return function () {
      window.document.body.removeAttribute(NODE_SELECTING_ATTRIBUTE);
    };
  }, [isVisible]);
  return /*#__PURE__*/_createElement(Drawer, {
    content: /*#__PURE__*/_createElement(ToolbarWrapper, {
      className: NODE_SELECT_CLICKABLE_BOX_CLASS_NAME
    }, /*#__PURE__*/_createElement(ToolbarDropDownIconWrapper, {
      onClick: handleClose
    }, _ref), /*#__PURE__*/_createElement(ToolbarBtnsWrapper, null, layout.map(function (item) {
      return /*#__PURE__*/_createElement(ToolbarItem, {
        onClick: function onClick() {
          return handleClick(item.key);
        },
        title: item.title,
        key: item.key,
        icon: item.icon,
        disabled: item.disabled
      });
    }))),
    height: 'auto',
    visible: isVisible,
    onClose: handleClose,
    getContainer: function getContainer() {
      return document.body;
    }
  });
};
//# sourceMappingURL=index.js.map