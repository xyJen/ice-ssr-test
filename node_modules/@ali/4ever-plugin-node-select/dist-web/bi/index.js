import createRenderContent from "../common/createRenderContent";
import createRenderNode from "../common/createRenderNode";
import { SelectManager } from "../common/utils/SelectManager";
import createOnAction from "../common/handlers/createOnAction";
import { createOnCangjieFocus } from "../common/handlers/createOnCangjieFocus";
import { createOnCangjieSelect } from "../common/handlers/createOnCangjieSelect";
import { createGetNodeSelectToolbarItems } from "./createGetNodeSelectToolbarItems";
import { createQueries } from "../common/createQueries";
import { actions } from "../common/actions";
export var biFactory = function biFactory(configs) {
  var _configs$nodeSelect2;

  var _configs$nodeSelect = configs.nodeSelect,
      nodeSelectConfigs = _configs$nodeSelect === void 0 ? {} : _configs$nodeSelect;
  var manager = new SelectManager({
    onSelectingChange: nodeSelectConfigs == null ? void 0 : nodeSelectConfigs.onSelectingChange,
    onNodeSelectedChange: nodeSelectConfigs == null ? void 0 : nodeSelectConfigs.onNodeSelectedChange
  });
  (_configs$nodeSelect2 = configs.nodeSelect) == null ? void 0 : _configs$nodeSelect2.onManagerCallback == null ? void 0 : _configs$nodeSelect2.onManagerCallback(manager);
  return {
    key: 'nodeSelect',
    actions: actions,
    queries: createQueries(manager),
    renderContent: createRenderContent(nodeSelectConfigs, manager),
    renderNode: createRenderNode(nodeSelectConfigs, manager),
    onAction: createOnAction(nodeSelectConfigs, manager),
    getNodeSelectToolbarItems: createGetNodeSelectToolbarItems(nodeSelectConfigs.locale || {}),
    onCangjieFocus: createOnCangjieFocus(manager),
    onCangjieSelect: createOnCangjieSelect(manager)
  };
};
//# sourceMappingURL=index.js.map