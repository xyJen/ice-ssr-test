import { Block, BlockChildren, Data } from '@ali/4ever-cangjie';
export interface CardData<T = Record<string, any>> extends Data {
    readonly cardType?: string;
    readonly height?: number;
    readonly spacing?: {
        readonly before?: number;
        readonly after?: number;
    };
    readonly metadata?: T;
}
declare type CardChildren = BlockChildren;
export interface CardProperties<D = CardData, N extends BlockChildren = CardChildren> {
    data?: D;
    nodes?: N;
}
export default class Card extends Block<CardData, CardChildren> {
    static TYPE: string;
    static create<SD = CardData, SN extends BlockChildren = CardChildren>(properties: Card | CardProperties<SD, SN> | string): Block<SD, SN>;
    static isCard(maybeCard: any): maybeCard is Card;
}
export {};
