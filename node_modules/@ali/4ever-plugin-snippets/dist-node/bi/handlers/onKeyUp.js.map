{"version":3,"sources":["../../../../src/bi/handlers/onKeyUp.ts"],"names":["FN_KEYS","isFnKey","isUpDownEnterHotKey","createOnKeyUp","manager","prevFocusText","onKeyUp","event","controller","next","focusText","selection","value","trigger","originTrigger","text","originText","getSnippet","isExpanded","focus","isEdgePoint","undefined","setCurrentSnippet","slice","offset","configs","triggerText","Object","keys","find","regexp","RegExp","matched","match","matchedText","triggerPrefix","triggerSuffix","prefixText","length","test","suffixText"],"mappings":"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","sourcesContent":["import { Controller, Node } from '@ali/4ever-cangjie';\nimport type SnippetManger from '../snippetManager';\nimport { isKeyHotkey } from 'is-hotkey';\n\nconst FN_KEYS = [\n  'tab',\n  'shift',\n  'control',\n  'alt',\n  'pause',\n  'capslock',\n  'escape',\n  'pageup',\n  'pagedown',\n  'end',\n  'home',\n  'arrowleft',\n  'arrowright',\n  // 'insert',\n  // 'delete',\n  'meta',\n  'numlock',\n  'scrolllock',\n]\nconst isFnKey = isKeyHotkey(FN_KEYS);\nconst isUpDownEnterHotKey = isKeyHotkey(['up', 'down', 'enter'])\n\nexport function createOnKeyUp(manager: SnippetManger) {\n  let prevFocusText: Node | undefined;\n\n  return function onKeyUp(\n    event: React.KeyboardEvent,\n    controller: Controller,\n    next: Function,\n  ) {\n    const { focusText, selection } = controller.value;\n    const { trigger: originTrigger, text: originText } = manager.getSnippet();\n    if (selection.isExpanded || selection.focus.isEdgePoint() || isFnKey(event)) {\n      if (originTrigger !== undefined || originText !== undefined) {\n        manager.setCurrentSnippet();\n      }\n      return next();\n    }\n\n    if (isUpDownEnterHotKey(event) || !focusText || focusText === prevFocusText) {\n      return next();\n    }\n\n    prevFocusText = focusText;\n    const text = focusText.text.slice(0, selection.focus.offset);\n    const configs = manager.configs;\n\n    let triggerText: string | undefined = undefined;\n    const trigger = Object.keys(configs || {}).find((trigger) => {\n      const regexp = new RegExp(trigger);\n      const matched = text.match(regexp);\n      if (matched) {\n        const [matchedText] = matched;\n        const { triggerPrefix, triggerSuffix } = configs[trigger] || {};\n        // 检查 prefix 字符串\n        const prefixText = text.slice(0, text.length - matchedText.length);\n        if (triggerPrefix && !new RegExp(triggerPrefix).test(prefixText)) {\n          return false;\n        }\n        // 检查 suffix 字符串\n        const suffixText = focusText.text.slice(text.length);\n        if (triggerSuffix && !new RegExp(triggerSuffix).test(suffixText)) {\n          return false;\n        }\n        triggerText = matchedText;\n        return true;\n      }\n      return false;\n    });\n    if (trigger !== originTrigger || triggerText !== originText) {\n      manager.setCurrentSnippet(trigger, triggerText);\n    }\n    return next();\n  }\n}"],"file":"onKeyUp.js"}