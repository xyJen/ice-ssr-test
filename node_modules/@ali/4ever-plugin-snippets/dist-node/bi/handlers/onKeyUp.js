"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOnKeyUp = createOnKeyUp;

var _isHotkey = require("is-hotkey");

const FN_KEYS = ['tab', 'shift', 'control', 'alt', 'pause', 'capslock', 'escape', 'pageup', 'pagedown', 'end', 'home', 'arrowleft', 'arrowright', // 'insert',
// 'delete',
'meta', 'numlock', 'scrolllock'];
const isFnKey = (0, _isHotkey.isKeyHotkey)(FN_KEYS);
const isUpDownEnterHotKey = (0, _isHotkey.isKeyHotkey)(['up', 'down', 'enter']);

function createOnKeyUp(manager) {
  let prevFocusText;
  return function onKeyUp(event, controller, next) {
    const {
      focusText,
      selection
    } = controller.value;
    const {
      trigger: originTrigger,
      text: originText
    } = manager.getSnippet();

    if (selection.isExpanded || selection.focus.isEdgePoint() || isFnKey(event)) {
      if (originTrigger !== undefined || originText !== undefined) {
        manager.setCurrentSnippet();
      }

      return next();
    }

    if (isUpDownEnterHotKey(event) || !focusText || focusText === prevFocusText) {
      return next();
    }

    prevFocusText = focusText;
    const text = focusText.text.slice(0, selection.focus.offset);
    const configs = manager.configs;
    let triggerText = undefined;
    const trigger = Object.keys(configs || {}).find(trigger => {
      const regexp = new RegExp(trigger);
      const matched = text.match(regexp);

      if (matched) {
        const [matchedText] = matched;
        const {
          triggerPrefix,
          triggerSuffix
        } = configs[trigger] || {}; // 检查 prefix 字符串

        const prefixText = text.slice(0, text.length - matchedText.length);

        if (triggerPrefix && !new RegExp(triggerPrefix).test(prefixText)) {
          return false;
        } // 检查 suffix 字符串


        const suffixText = focusText.text.slice(text.length);

        if (triggerSuffix && !new RegExp(triggerSuffix).test(suffixText)) {
          return false;
        }

        triggerText = matchedText;
        return true;
      }

      return false;
    });

    if (trigger !== originTrigger || triggerText !== originText) {
      manager.setCurrentSnippet(trigger, triggerText);
    }

    return next();
  };
}
//# sourceMappingURL=onKeyUp.js.map