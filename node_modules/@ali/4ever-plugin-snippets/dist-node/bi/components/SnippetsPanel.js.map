{"version":3,"sources":["../../../../src/bi/components/SnippetsPanel.tsx"],"names":["arePropsEqual","prevProps","nextProps","currentTrigger","currentText","controller","SnippetsPanel","props","manager","items","setItems","React","useState","list","filteredItems","setFilteredItems","visible","setVisible","popoverContainer","window","document","body","finalVisible","length","style","useMemo","defaultPos","top","left","height","position","visibility","caret","wrapper","domUtils","getLocalCaretPosDetail","useEffect","fetchItems","configs","then","res","trigger","filterItems","setIsShowing","handleMenuItemSelected","useCallback","item","insertSnippet","focus","value","selection","anchor","query","Queries","pointAtDistance","dispatch","sourceRange","Selection","create","insertTarget","setCurrentSnippet","handleEnterDirectly","event","run","content","renderPanelContent","anchorStyle","ReactDOM","createPortal","MemoSnippetsPanel","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Controller, domUtils, Queries, Selection, SnippetItemBase, useScrollableContent } from '@ali/4ever-cangjie';\nimport { Popover } from '@ali/we-design-next';\nimport { SnippetsMenu } from './Menu';\nimport type SnippetManager from '../snippetManager';\nimport ReactDOM from 'react-dom';\n\ninterface SnippetsPanelProps {\n  controller: Controller;\n  manager: SnippetManager;\n  currentTrigger?: string;\n  currentText?: string;\n}\n\nconst arePropsEqual = (prevProps: SnippetsPanelProps, nextProps: SnippetsPanelProps) => {\n  return (\n    prevProps.currentTrigger === nextProps.currentTrigger\n    && prevProps.currentText === nextProps.currentText\n    && prevProps.controller === nextProps.controller\n  )\n};\n\nfunction SnippetsPanel<T extends SnippetItemBase = SnippetItemBase>(props: SnippetsPanelProps) {\n  const { controller, manager, currentTrigger, currentText = '' } = props;\n  const [items, setItems] = React.useState<{ list: T[]; trigger?: string}>({ list: [] });\n  const [filteredItems, setFilteredItems] = React.useState<T[]>([]);\n  const [visible, setVisible] = React.useState(true);\n  const popoverContainer = useScrollableContent() || window.document.body;\n\n  const finalVisible = !!currentTrigger && filteredItems.length > 0 && visible;\n\n  const style: React.CSSProperties & { wrapper?: HTMLDivElement } = React.useMemo(() => {\n    const defaultPos = {\n      top: 0,\n      left: 0,\n      height: 0,\n    };\n    if (!currentTrigger) {\n      return {\n        ...defaultPos,\n        position: 'absolute',\n        visibility: 'hidden',\n      };\n    }\n\n    const { caret = defaultPos, wrapper } = domUtils.getLocalCaretPosDetail(controller) || {};\n    return {\n      ...{\n        top: caret.top,\n        left: caret.left,\n        height: caret.height,\n      },\n      position: 'absolute',\n      wrapper,\n    }\n  }, [controller, currentTrigger]);\n\n  // 根据 trigger 得到所有候选项\n  React.useEffect(() => {\n    if (currentTrigger) {\n      const { fetchItems } = manager.configs[currentTrigger];\n      fetchItems().then((res) => {\n        setItems({ list: res, trigger: currentTrigger });\n        setVisible(true);\n      });\n    } else {\n      setItems({ list: [] });\n      setVisible(false);\n    }\n  }, [currentTrigger]);\n\n  // 根据 currentText 筛选出匹配的候选项\n  React.useEffect(() => {\n    if (currentTrigger && items.trigger === currentTrigger) {\n      const { filterItems } = manager.configs[currentTrigger];\n      filterItems(currentText, items.list).then((list) => {\n        setFilteredItems(list);\n      });\n    }\n  }, [currentTrigger, currentText, items]);\n\n  React.useEffect(() => {\n    manager.setIsShowing(finalVisible);\n  }, [finalVisible]);\n\n  const handleMenuItemSelected = React.useCallback((item) => {\n    if (!currentTrigger) {\n      return;\n    }\n    setVisible(false);\n    const { insertSnippet } = manager.configs[currentTrigger];\n    const { focus } = controller.value.selection;\n    const anchor = controller.query(Queries.pointAtDistance, focus, -currentText.length);\n    // 插入\n    controller.dispatch('replaceWithSnippet', {\n      sourceRange: Selection.create({ anchor, focus }),\n      insertTarget: () => insertSnippet(controller, item),\n    });\n    manager.setCurrentSnippet();\n  }, [currentTrigger, currentText, controller]);\n\n  // 未选择具体选项时，按 enter 的行为\n  const handleEnterDirectly = React.useCallback((event: KeyboardEvent) => {\n    if (!currentTrigger && filteredItems.length > 0) {\n      return;\n    }\n    setVisible(false);\n    manager.setCurrentSnippet();\n    controller.run('onKeyDown', event as any);\n  }, [currentTrigger, controller]);\n\n  // 面板内容\n  const content = React.useMemo(() => {\n    if (!currentTrigger || filteredItems.length === 0) {\n      return null;\n    }\n    const { renderPanelContent } = manager.configs[currentTrigger];\n    if (renderPanelContent) {\n      return renderPanelContent(filteredItems);\n    }\n\n    return (\n      <SnippetsMenu\n        items={filteredItems}\n        controller={controller}\n        onItemSelected={handleMenuItemSelected}\n        onEnterDirectly={handleEnterDirectly}\n      />\n    );\n  }, [filteredItems, currentTrigger, controller]);\n\n  const { wrapper, ...anchorStyle } = style;\n  if (!wrapper) {\n    return null;\n  }\n\n  return ReactDOM.createPortal(\n    <Popover\n      visible={finalVisible}\n      content={content}\n      getContainer={() => popoverContainer}\n      placement=\"bottomLeft\"\n    >\n      <div data-testid=\"snippets-panel-anchor\" style={anchorStyle}></div>\n    </Popover>,\n    wrapper\n  );\n}\n\nconst MemoSnippetsPanel = React.memo(SnippetsPanel, arePropsEqual);\n\nexport { MemoSnippetsPanel as SnippetsPanel };"],"file":"SnippetsPanel.js"}