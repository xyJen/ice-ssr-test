"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnippetsMenu = SnippetsMenu;

var _react = _interopRequireDefault(require("react"));

var _isHotkey = require("is-hotkey");

var _weDesignNext = require("@ali/we-design-next");

var _styledComponents = _interopRequireDefault(require("styled-components"));

const _createElement = /*#__PURE__*/_react.default.createElement;

const ListWrapper = /*#__PURE__*/_styledComponents.default.div(["max-height:280px;overflow-y:scroll;"]);

const isUpHotKey = (0, _isHotkey.isKeyHotkey)('up');
const isDownHotKey = (0, _isHotkey.isKeyHotkey)('down');
const isEnterHotKey = (0, _isHotkey.isKeyHotkey)('enter');

function SnippetsMenu(props) {
  const {
    items,
    controller,
    onItemSelected,
    onEnterDirectly
  } = props;

  const [selectedIndex, setSelectedIndex] = _react.default.useState();

  const listRef = _react.default.useRef(null);

  const itemsMap = _react.default.useMemo(() => items.reduce((record, current, index) => ({ ...record,
    [current.key]: {
      item: current,
      index
    }
  }), {}), [items]);

  const handleActiveChange = _react.default.useCallback((key, _opt) => {
    if (typeof key !== 'string') {
      setSelectedIndex(undefined);
    } else {
      setSelectedIndex(itemsMap[key || ''].index);
    }
  }, [itemsMap]);

  const handleSelected = _react.default.useCallback(key => {
    onItemSelected(itemsMap[key].item);
  }, [itemsMap]);

  const handleKeyDown = _react.default.useCallback(event => {
    // composing 过程中的 keydown 不予处理
    if (controller.value.composing.length > 0) {
      return;
    }

    if (isUpHotKey(event)) {
      event.preventDefault();
      const index = typeof selectedIndex === 'number' && selectedIndex > 0 ? selectedIndex - 1 : items.length - 1;
      setSelectedIndex(index); // @ts-ignore

      listRef.current?.children[index].scrollIntoViewIfNeeded(false);
    } else if (isDownHotKey(event)) {
      event.preventDefault();
      const index = typeof selectedIndex === 'undefined' ? 0 : selectedIndex < items.length - 1 ? selectedIndex + 1 : undefined;
      setSelectedIndex(index); // Ref: [兼容性](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoViewIfNeeded#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81)
      // @ts-ignore

      listRef.current?.children[index || 0].scrollIntoViewIfNeeded(false);
    } else if (isEnterHotKey(event)) {
      if (typeof selectedIndex === 'number') {
        event.preventDefault();
        onItemSelected(items[selectedIndex]);
      } else {
        // 未选中选项，按 enter 则走原本编辑器的逻辑
        onEnterDirectly(event);
      }
    }
  }, [selectedIndex, items]);

  _react.default.useEffect(() => {
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleKeyDown]);

  _react.default.useEffect(() => {
    // reset active item
    setSelectedIndex(undefined);
  }, [items]);

  return /*#__PURE__*/_createElement(ListWrapper, null, /*#__PURE__*/_createElement(_weDesignNext.List, {
    ref: listRef,
    items: items,
    active: typeof selectedIndex === 'undefined' ? undefined : items[selectedIndex]?.key,
    onActiveChange: handleActiveChange,
    onSelect: handleSelected
  }));
}
//# sourceMappingURL=Menu.js.map