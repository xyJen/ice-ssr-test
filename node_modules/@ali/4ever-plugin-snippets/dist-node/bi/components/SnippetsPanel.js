"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnippetsPanel = void 0;

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weDesignNext = require("@ali/we-design-next");

var _Menu = require("./Menu");

var _reactDom = _interopRequireDefault(require("react-dom"));

const _createElement = /*#__PURE__*/_react.default.createElement;

const arePropsEqual = (prevProps, nextProps) => {
  return prevProps.currentTrigger === nextProps.currentTrigger && prevProps.currentText === nextProps.currentText && prevProps.controller === nextProps.controller;
};

function SnippetsPanel(props) {
  const {
    controller,
    manager,
    currentTrigger,
    currentText = ''
  } = props;

  const [items, setItems] = _react.default.useState({
    list: []
  });

  const [filteredItems, setFilteredItems] = _react.default.useState([]);

  const [visible, setVisible] = _react.default.useState(true);

  const popoverContainer = (0, _everCangjie.useScrollableContent)() || window.document.body;
  const finalVisible = !!currentTrigger && filteredItems.length > 0 && visible;

  const style = _react.default.useMemo(() => {
    const defaultPos = {
      top: 0,
      left: 0,
      height: 0
    };

    if (!currentTrigger) {
      return { ...defaultPos,
        position: 'absolute',
        visibility: 'hidden'
      };
    }

    const {
      caret = defaultPos,
      wrapper
    } = _everCangjie.domUtils.getLocalCaretPosDetail(controller) || {};
    return { ...{
        top: caret.top,
        left: caret.left,
        height: caret.height
      },
      position: 'absolute',
      wrapper
    };
  }, [controller, currentTrigger]); // 根据 trigger 得到所有候选项


  _react.default.useEffect(() => {
    if (currentTrigger) {
      const {
        fetchItems
      } = manager.configs[currentTrigger];
      fetchItems().then(res => {
        setItems({
          list: res,
          trigger: currentTrigger
        });
        setVisible(true);
      });
    } else {
      setItems({
        list: []
      });
      setVisible(false);
    }
  }, [currentTrigger]); // 根据 currentText 筛选出匹配的候选项


  _react.default.useEffect(() => {
    if (currentTrigger && items.trigger === currentTrigger) {
      const {
        filterItems
      } = manager.configs[currentTrigger];
      filterItems(currentText, items.list).then(list => {
        setFilteredItems(list);
      });
    }
  }, [currentTrigger, currentText, items]);

  _react.default.useEffect(() => {
    manager.setIsShowing(finalVisible);
  }, [finalVisible]);

  const handleMenuItemSelected = _react.default.useCallback(item => {
    if (!currentTrigger) {
      return;
    }

    setVisible(false);
    const {
      insertSnippet
    } = manager.configs[currentTrigger];
    const {
      focus
    } = controller.value.selection;
    const anchor = controller.query(_everCangjie.Queries.pointAtDistance, focus, -currentText.length); // 插入

    controller.dispatch('replaceWithSnippet', {
      sourceRange: _everCangjie.Selection.create({
        anchor,
        focus
      }),
      insertTarget: () => insertSnippet(controller, item)
    });
    manager.setCurrentSnippet();
  }, [currentTrigger, currentText, controller]); // 未选择具体选项时，按 enter 的行为


  const handleEnterDirectly = _react.default.useCallback(event => {
    if (!currentTrigger && filteredItems.length > 0) {
      return;
    }

    setVisible(false);
    manager.setCurrentSnippet();
    controller.run('onKeyDown', event);
  }, [currentTrigger, controller]); // 面板内容


  var _ref = /*#__PURE__*/_createElement(_Menu.SnippetsMenu, {
    items: filteredItems,
    controller: controller,
    onItemSelected: handleMenuItemSelected,
    onEnterDirectly: handleEnterDirectly
  });

  const content = _react.default.useMemo(() => {
    if (!currentTrigger || filteredItems.length === 0) {
      return null;
    }

    const {
      renderPanelContent
    } = manager.configs[currentTrigger];

    if (renderPanelContent) {
      return renderPanelContent(filteredItems);
    }

    return _ref;
  }, [filteredItems, currentTrigger, controller]);

  const {
    wrapper,
    ...anchorStyle
  } = style;

  if (!wrapper) {
    return null;
  }

  return /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_createElement(_weDesignNext.Popover, {
    visible: finalVisible,
    content: content,
    getContainer: () => popoverContainer,
    placement: "bottomLeft"
  }, /*#__PURE__*/_createElement("div", {
    "data-testid": "snippets-panel-anchor",
    style: anchorStyle
  })), wrapper);
}

const MemoSnippetsPanel = /*#__PURE__*/_react.default.memo(SnippetsPanel, arePropsEqual);

exports.SnippetsPanel = MemoSnippetsPanel;
//# sourceMappingURL=SnippetsPanel.js.map