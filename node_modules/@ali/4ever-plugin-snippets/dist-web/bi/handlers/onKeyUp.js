import { isKeyHotkey } from 'is-hotkey';
var FN_KEYS = ['tab', 'shift', 'control', 'alt', 'pause', 'capslock', 'escape', 'pageup', 'pagedown', 'end', 'home', 'arrowleft', 'arrowright', // 'insert',
// 'delete',
'meta', 'numlock', 'scrolllock'];
var isFnKey = isKeyHotkey(FN_KEYS);
var isUpDownEnterHotKey = isKeyHotkey(['up', 'down', 'enter']);
export function createOnKeyUp(manager) {
  var prevFocusText;
  return function onKeyUp(event, controller, next) {
    var _controller$value = controller.value,
        focusText = _controller$value.focusText,
        selection = _controller$value.selection;

    var _manager$getSnippet = manager.getSnippet(),
        originTrigger = _manager$getSnippet.trigger,
        originText = _manager$getSnippet.text;

    if (selection.isExpanded || selection.focus.isEdgePoint() || isFnKey(event)) {
      if (originTrigger !== undefined || originText !== undefined) {
        manager.setCurrentSnippet();
      }

      return next();
    }

    if (isUpDownEnterHotKey(event) || !focusText || focusText === prevFocusText) {
      return next();
    }

    prevFocusText = focusText;
    var text = focusText.text.slice(0, selection.focus.offset);
    var configs = manager.configs;
    var triggerText = undefined;
    var trigger = Object.keys(configs || {}).find(function (trigger) {
      var regexp = new RegExp(trigger);
      var matched = text.match(regexp);

      if (matched) {
        var matchedText = matched[0];

        var _ref = configs[trigger] || {},
            triggerPrefix = _ref.triggerPrefix,
            triggerSuffix = _ref.triggerSuffix; // 检查 prefix 字符串


        var prefixText = text.slice(0, text.length - matchedText.length);

        if (triggerPrefix && !new RegExp(triggerPrefix).test(prefixText)) {
          return false;
        } // 检查 suffix 字符串


        var suffixText = focusText.text.slice(text.length);

        if (triggerSuffix && !new RegExp(triggerSuffix).test(suffixText)) {
          return false;
        }

        triggerText = matchedText;
        return true;
      }

      return false;
    });

    if (trigger !== originTrigger || triggerText !== originText) {
      manager.setCurrentSnippet(trigger, triggerText);
    }

    return next();
  };
}
//# sourceMappingURL=onKeyUp.js.map