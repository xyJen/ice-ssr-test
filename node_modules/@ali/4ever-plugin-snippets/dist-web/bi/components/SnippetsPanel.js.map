{"version":3,"sources":["../../../../src/bi/components/SnippetsPanel.tsx"],"names":["React","domUtils","Queries","Selection","useScrollableContent","Popover","SnippetsMenu","ReactDOM","arePropsEqual","prevProps","nextProps","currentTrigger","currentText","controller","SnippetsPanel","props","manager","useState","list","items","setItems","filteredItems","setFilteredItems","visible","setVisible","popoverContainer","window","document","body","finalVisible","length","style","useMemo","defaultPos","top","left","height","position","visibility","getLocalCaretPosDetail","caret","wrapper","useEffect","fetchItems","configs","then","res","trigger","filterItems","setIsShowing","handleMenuItemSelected","useCallback","item","insertSnippet","focus","value","selection","anchor","query","pointAtDistance","dispatch","sourceRange","create","insertTarget","setCurrentSnippet","handleEnterDirectly","event","run","content","renderPanelContent","anchorStyle","createPortal","MemoSnippetsPanel","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Controller, domUtils, Queries, Selection, SnippetItemBase, useScrollableContent } from '@ali/4ever-cangjie';\nimport { Popover } from '@ali/we-design-next';\nimport { SnippetsMenu } from './Menu';\nimport type SnippetManager from '../snippetManager';\nimport ReactDOM from 'react-dom';\n\ninterface SnippetsPanelProps {\n  controller: Controller;\n  manager: SnippetManager;\n  currentTrigger?: string;\n  currentText?: string;\n}\n\nconst arePropsEqual = (prevProps: SnippetsPanelProps, nextProps: SnippetsPanelProps) => {\n  return (\n    prevProps.currentTrigger === nextProps.currentTrigger\n    && prevProps.currentText === nextProps.currentText\n    && prevProps.controller === nextProps.controller\n  )\n};\n\nfunction SnippetsPanel<T extends SnippetItemBase = SnippetItemBase>(props: SnippetsPanelProps) {\n  const { controller, manager, currentTrigger, currentText = '' } = props;\n  const [items, setItems] = React.useState<{ list: T[]; trigger?: string}>({ list: [] });\n  const [filteredItems, setFilteredItems] = React.useState<T[]>([]);\n  const [visible, setVisible] = React.useState(true);\n  const popoverContainer = useScrollableContent() || window.document.body;\n\n  const finalVisible = !!currentTrigger && filteredItems.length > 0 && visible;\n\n  const style: React.CSSProperties & { wrapper?: HTMLDivElement } = React.useMemo(() => {\n    const defaultPos = {\n      top: 0,\n      left: 0,\n      height: 0,\n    };\n    if (!currentTrigger) {\n      return {\n        ...defaultPos,\n        position: 'absolute',\n        visibility: 'hidden',\n      };\n    }\n\n    const { caret = defaultPos, wrapper } = domUtils.getLocalCaretPosDetail(controller) || {};\n    return {\n      ...{\n        top: caret.top,\n        left: caret.left,\n        height: caret.height,\n      },\n      position: 'absolute',\n      wrapper,\n    }\n  }, [controller, currentTrigger]);\n\n  // 根据 trigger 得到所有候选项\n  React.useEffect(() => {\n    if (currentTrigger) {\n      const { fetchItems } = manager.configs[currentTrigger];\n      fetchItems().then((res) => {\n        setItems({ list: res, trigger: currentTrigger });\n        setVisible(true);\n      });\n    } else {\n      setItems({ list: [] });\n      setVisible(false);\n    }\n  }, [currentTrigger]);\n\n  // 根据 currentText 筛选出匹配的候选项\n  React.useEffect(() => {\n    if (currentTrigger && items.trigger === currentTrigger) {\n      const { filterItems } = manager.configs[currentTrigger];\n      filterItems(currentText, items.list).then((list) => {\n        setFilteredItems(list);\n      });\n    }\n  }, [currentTrigger, currentText, items]);\n\n  React.useEffect(() => {\n    manager.setIsShowing(finalVisible);\n  }, [finalVisible]);\n\n  const handleMenuItemSelected = React.useCallback((item) => {\n    if (!currentTrigger) {\n      return;\n    }\n    setVisible(false);\n    const { insertSnippet } = manager.configs[currentTrigger];\n    const { focus } = controller.value.selection;\n    const anchor = controller.query(Queries.pointAtDistance, focus, -currentText.length);\n    // 插入\n    controller.dispatch('replaceWithSnippet', {\n      sourceRange: Selection.create({ anchor, focus }),\n      insertTarget: () => insertSnippet(controller, item),\n    });\n    manager.setCurrentSnippet();\n  }, [currentTrigger, currentText, controller]);\n\n  // 未选择具体选项时，按 enter 的行为\n  const handleEnterDirectly = React.useCallback((event: KeyboardEvent) => {\n    if (!currentTrigger && filteredItems.length > 0) {\n      return;\n    }\n    setVisible(false);\n    manager.setCurrentSnippet();\n    controller.run('onKeyDown', event as any);\n  }, [currentTrigger, controller]);\n\n  // 面板内容\n  const content = React.useMemo(() => {\n    if (!currentTrigger || filteredItems.length === 0) {\n      return null;\n    }\n    const { renderPanelContent } = manager.configs[currentTrigger];\n    if (renderPanelContent) {\n      return renderPanelContent(filteredItems);\n    }\n\n    return (\n      <SnippetsMenu\n        items={filteredItems}\n        controller={controller}\n        onItemSelected={handleMenuItemSelected}\n        onEnterDirectly={handleEnterDirectly}\n      />\n    );\n  }, [filteredItems, currentTrigger, controller]);\n\n  const { wrapper, ...anchorStyle } = style;\n  if (!wrapper) {\n    return null;\n  }\n\n  return ReactDOM.createPortal(\n    <Popover\n      visible={finalVisible}\n      content={content}\n      getContainer={() => popoverContainer}\n      placement=\"bottomLeft\"\n    >\n      <div data-testid=\"snippets-panel-anchor\" style={anchorStyle}></div>\n    </Popover>,\n    wrapper\n  );\n}\n\nconst MemoSnippetsPanel = React.memo(SnippetsPanel, arePropsEqual);\n\nexport { MemoSnippetsPanel as SnippetsPanel };"],"file":"SnippetsPanel.js"}