import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { isKeyHotkey } from 'is-hotkey';
import { List } from '@ali/we-design-next';
import styled from 'styled-components';
var ListWrapper = /*#__PURE__*/styled.div(["max-height:280px;overflow-y:scroll;"]);
var isUpHotKey = isKeyHotkey('up');
var isDownHotKey = isKeyHotkey('down');
var isEnterHotKey = isKeyHotkey('enter');
export function SnippetsMenu(props) {
  var _items$selectedIndex;

  var items = props.items,
      controller = props.controller,
      onItemSelected = props.onItemSelected,
      onEnterDirectly = props.onEnterDirectly;

  var _React$useState = React.useState(),
      selectedIndex = _React$useState[0],
      setSelectedIndex = _React$useState[1];

  var listRef = React.useRef(null);
  var itemsMap = React.useMemo(function () {
    return items.reduce(function (record, current, index) {
      var _extends2;

      return _extends({}, record, (_extends2 = {}, _extends2[current.key] = {
        item: current,
        index: index
      }, _extends2));
    }, {});
  }, [items]);
  var handleActiveChange = React.useCallback(function (key, _opt) {
    if (typeof key !== 'string') {
      setSelectedIndex(undefined);
    } else {
      setSelectedIndex(itemsMap[key || ''].index);
    }
  }, [itemsMap]);
  var handleSelected = React.useCallback(function (key) {
    onItemSelected(itemsMap[key].item);
  }, [itemsMap]);
  var handleKeyDown = React.useCallback(function (event) {
    // composing 过程中的 keydown 不予处理
    if (controller.value.composing.length > 0) {
      return;
    }

    if (isUpHotKey(event)) {
      var _listRef$current;

      event.preventDefault();
      var index = typeof selectedIndex === 'number' && selectedIndex > 0 ? selectedIndex - 1 : items.length - 1;
      setSelectedIndex(index); // @ts-ignore

      (_listRef$current = listRef.current) == null ? void 0 : _listRef$current.children[index].scrollIntoViewIfNeeded(false);
    } else if (isDownHotKey(event)) {
      var _listRef$current2;

      event.preventDefault();

      var _index = typeof selectedIndex === 'undefined' ? 0 : selectedIndex < items.length - 1 ? selectedIndex + 1 : undefined;

      setSelectedIndex(_index); // Ref: [兼容性](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoViewIfNeeded#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81)
      // @ts-ignore

      (_listRef$current2 = listRef.current) == null ? void 0 : _listRef$current2.children[_index || 0].scrollIntoViewIfNeeded(false);
    } else if (isEnterHotKey(event)) {
      if (typeof selectedIndex === 'number') {
        event.preventDefault();
        onItemSelected(items[selectedIndex]);
      } else {
        // 未选中选项，按 enter 则走原本编辑器的逻辑
        onEnterDirectly(event);
      }
    }
  }, [selectedIndex, items]);
  React.useEffect(function () {
    document.addEventListener('keydown', handleKeyDown);
    return function () {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleKeyDown]);
  React.useEffect(function () {
    // reset active item
    setSelectedIndex(undefined);
  }, [items]);
  return /*#__PURE__*/_createElement(ListWrapper, null, /*#__PURE__*/_createElement(List, {
    ref: listRef,
    items: items,
    active: typeof selectedIndex === 'undefined' ? undefined : (_items$selectedIndex = items[selectedIndex]) == null ? void 0 : _items$selectedIndex.key,
    onActiveChange: handleActiveChange,
    onSelect: handleSelected
  }));
}
//# sourceMappingURL=Menu.js.map