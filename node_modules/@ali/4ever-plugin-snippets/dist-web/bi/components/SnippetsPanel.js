import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { domUtils, Queries, Selection, useScrollableContent } from '@ali/4ever-cangjie';
import { Popover } from '@ali/we-design-next';
import { SnippetsMenu } from "./Menu";
import ReactDOM from 'react-dom';

var arePropsEqual = function arePropsEqual(prevProps, nextProps) {
  return prevProps.currentTrigger === nextProps.currentTrigger && prevProps.currentText === nextProps.currentText && prevProps.controller === nextProps.controller;
};

function SnippetsPanel(props) {
  var controller = props.controller,
      manager = props.manager,
      currentTrigger = props.currentTrigger,
      _props$currentText = props.currentText,
      currentText = _props$currentText === void 0 ? '' : _props$currentText;

  var _React$useState = React.useState({
    list: []
  }),
      items = _React$useState[0],
      setItems = _React$useState[1];

  var _React$useState2 = React.useState([]),
      filteredItems = _React$useState2[0],
      setFilteredItems = _React$useState2[1];

  var _React$useState3 = React.useState(true),
      visible = _React$useState3[0],
      setVisible = _React$useState3[1];

  var popoverContainer = useScrollableContent() || window.document.body;
  var finalVisible = !!currentTrigger && filteredItems.length > 0 && visible;
  var style = React.useMemo(function () {
    var defaultPos = {
      top: 0,
      left: 0,
      height: 0
    };

    if (!currentTrigger) {
      return _extends({}, defaultPos, {
        position: 'absolute',
        visibility: 'hidden'
      });
    }

    var _ref = domUtils.getLocalCaretPosDetail(controller) || {},
        _ref$caret = _ref.caret,
        caret = _ref$caret === void 0 ? defaultPos : _ref$caret,
        wrapper = _ref.wrapper;

    return _extends({}, {
      top: caret.top,
      left: caret.left,
      height: caret.height
    }, {
      position: 'absolute',
      wrapper: wrapper
    });
  }, [controller, currentTrigger]); // 根据 trigger 得到所有候选项

  React.useEffect(function () {
    if (currentTrigger) {
      var fetchItems = manager.configs[currentTrigger].fetchItems;
      fetchItems().then(function (res) {
        setItems({
          list: res,
          trigger: currentTrigger
        });
        setVisible(true);
      });
    } else {
      setItems({
        list: []
      });
      setVisible(false);
    }
  }, [currentTrigger]); // 根据 currentText 筛选出匹配的候选项

  React.useEffect(function () {
    if (currentTrigger && items.trigger === currentTrigger) {
      var filterItems = manager.configs[currentTrigger].filterItems;
      filterItems(currentText, items.list).then(function (list) {
        setFilteredItems(list);
      });
    }
  }, [currentTrigger, currentText, items]);
  React.useEffect(function () {
    manager.setIsShowing(finalVisible);
  }, [finalVisible]);
  var handleMenuItemSelected = React.useCallback(function (item) {
    if (!currentTrigger) {
      return;
    }

    setVisible(false);
    var insertSnippet = manager.configs[currentTrigger].insertSnippet;
    var focus = controller.value.selection.focus;
    var anchor = controller.query(Queries.pointAtDistance, focus, -currentText.length); // 插入

    controller.dispatch('replaceWithSnippet', {
      sourceRange: Selection.create({
        anchor: anchor,
        focus: focus
      }),
      insertTarget: function insertTarget() {
        return insertSnippet(controller, item);
      }
    });
    manager.setCurrentSnippet();
  }, [currentTrigger, currentText, controller]); // 未选择具体选项时，按 enter 的行为

  var handleEnterDirectly = React.useCallback(function (event) {
    if (!currentTrigger && filteredItems.length > 0) {
      return;
    }

    setVisible(false);
    manager.setCurrentSnippet();
    controller.run('onKeyDown', event);
  }, [currentTrigger, controller]); // 面板内容

  var _ref2 = /*#__PURE__*/_createElement(SnippetsMenu, {
    items: filteredItems,
    controller: controller,
    onItemSelected: handleMenuItemSelected,
    onEnterDirectly: handleEnterDirectly
  });

  var content = React.useMemo(function () {
    if (!currentTrigger || filteredItems.length === 0) {
      return null;
    }

    var renderPanelContent = manager.configs[currentTrigger].renderPanelContent;

    if (renderPanelContent) {
      return renderPanelContent(filteredItems);
    }

    return _ref2;
  }, [filteredItems, currentTrigger, controller]);

  var wrapper = style.wrapper,
      anchorStyle = _objectWithoutPropertiesLoose(style, ["wrapper"]);

  if (!wrapper) {
    return null;
  }

  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_createElement(Popover, {
    visible: finalVisible,
    content: content,
    getContainer: function getContainer() {
      return popoverContainer;
    },
    placement: "bottomLeft"
  }, /*#__PURE__*/_createElement("div", {
    "data-testid": "snippets-panel-anchor",
    style: anchorStyle
  })), wrapper);
}

var MemoSnippetsPanel = /*#__PURE__*/React.memo(SnippetsPanel, arePropsEqual);
export { MemoSnippetsPanel as SnippetsPanel };
//# sourceMappingURL=SnippetsPanel.js.map