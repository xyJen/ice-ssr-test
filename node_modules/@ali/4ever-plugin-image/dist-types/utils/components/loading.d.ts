import * as React from 'react';
import { Status } from './types';
import { ILocale } from '../types';
interface IProps {
    src?: string;
    status: Status;
    renderSrc: string;
    forceLoading?: boolean;
    isMobile?: boolean;
    locale?: ILocale | Record<string, any>;
    onReload: () => void;
    renderLoading?: ((isError: boolean) => React.ReactNode) | null;
    enableBlink: boolean;
}
export interface IState {
    hideReloadTip: boolean;
}
declare class Loading extends React.Component<IProps, IState> {
    private shouldReload;
    private loadingRef;
    constructor(props: any);
    componentDidUpdate: (prevProps: IProps) => void;
    reload: () => void;
    onClick: (e: React.MouseEvent) => void;
    renderReload: () => JSX.Element;
    renderCustomLoading: (isError: boolean) => React.ReactNode;
    renderDefaultLoading: (isError: boolean) => JSX.Element;
    renderLoading: () => React.ReactNode;
    onTouchStart: () => void;
    onTouchMove: () => void;
    onTouchEnd: (e: React.SyntheticEvent) => void;
    render(): JSX.Element;
}
export default Loading;
