{"version":3,"sources":["../../../src/utils/mobile.tsx"],"names":["React","forwardRef","props","ref","node","onLoad","controller","imageConfig","readonly","isSelected","rest","previewImage","shouldZoom","useRef","isLoaded","setIsLoaded","useState","data","src","handleZoomImage","useCallback","event","isSelectingNode","query","isQuickPreview","current","handlers","useMemo","onTouchEnd","onTouchStart","onTouchMove","onClick","preventDefault","handleOnLoad"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;uBAH4B,a;;4BAkBbA,KAAK,CAACC,UAAN,CAAiB,CAACC,KAAD,EAAgBC,GAAhB,KAA8D;AAC5F,QAAM;AACJC,IAAAA,IADI;AACEC,IAAAA,MADF;AACUC,IAAAA,UADV;AACsBC,IAAAA,WADtB;AACmCC,IAAAA,QADnC;AAC6CC,IAAAA,UAD7C;AACyD,OAAGC;AAD5D,MAEFR,KAFJ;AAGA,QAAM;AAAES,IAAAA;AAAF,MAAmBJ,WAAzB;AAEA,QAAMK,UAAU,GAAGZ,KAAK,CAACa,MAAN,CAAa,IAAb,CAAnB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,KAAK,CAACgB,QAAN,CAAe,KAAf,CAAhC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWb,IAAjB;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAUD,IAAhB;AACA,QAAME,eAAe,GAAGnB,KAAK,CAACoB,WAAN,CAAmBC,KAAD,IAA6B;AACrE,UAAMC,eAAe,GAAGhB,UAAU,CAACiB,KAAX,CAAiB,iBAAjB,CAAxB;;AACA,QAAI,gCAAkBjB,UAAlB,EAA8BF,IAA9B,KAAuCkB,eAA3C,EAA6D;AAC3D;AACD,KAJoE,CAKrE;;;AACA,UAAME,cAAc,GAAGlB,UAAU,CAACiB,KAAX,CAAiB,gBAAjB,CAAvB;;AACA,QACE,OAAOZ,YAAP,KAAwB,UAAxB,IAAsCC,UAAU,CAACa,OAAjD,IACI,CAACjB,QAAQ,IAAIC,UAAZ,IAA0Be,cAA3B,KAA8CV,QAFpD,EAGE;AACAH,MAAAA,YAAY,CAACO,GAAD,EAAMd,IAAN,CAAZ;AACD;AACF,GAbuB,EAarB,CAACE,UAAD,EAAaF,IAAb,EAAmBO,YAAnB,EAAiCH,QAAjC,EAA2CC,UAA3C,EAAuDK,QAAvD,EAAiEI,GAAjE,CAbqB,CAAxB;AAeA,QAAMQ,QAAQ,GAAG1B,KAAK,CAAC2B,OAAN,CAAc,MAAM;AACnC,WAAO;AACLC,MAAAA,UAAU,EAAET,eADP;AAELU,MAAAA,YAAY,EAAE,MAAM;AAClB,cAAMP,eAAe,GAAGhB,UAAU,CAACiB,KAAX,CAAiB,iBAAjB,CAAxB;AACAX,QAAAA,UAAU,CAACa,OAAX,GAAqB,CAACH,eAAtB;AACD,OALI;AAMLQ,MAAAA,WAAW,EAAE,MAAM;AACjBlB,QAAAA,UAAU,CAACa,OAAX,GAAqB,KAArB;AACD,OARI;AASLM,MAAAA,OAAO,EAAGV,KAAD,IAA6B;AACpC,YAAI,CAAC,gCAAkBf,UAAlB,EAA8BF,IAA9B,CAAL,EAA0C;AACxCiB,UAAAA,KAAK,CAACW,cAAN;AACD;AACF;AAbI,KAAP;AAeD,GAhBgB,EAgBd,CAACb,eAAD,EAAkBb,UAAlB,EAA8BF,IAA9B,CAhBc,CAAjB;AAkBA,QAAM6B,YAAY,GAAGjC,KAAK,CAACoB,WAAN,CAAkB,MAAM;AAC3CL,IAAAA,WAAW,CAAC,IAAD,CAAX;;AACA,QAAI,OAAOV,MAAP,KAAkB,UAAtB,EAAkC;AAChCA,MAAAA,MAAM;AACP;AACF,GALoB,EAKlB,CAACa,GAAD,EAAMb,MAAN,CALkB,CAArB;AAOA,sBACE,eAAC,cAAD,6BACMK,IADN;AAEE,IAAA,GAAG,EAAEP,GAFP;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,UAAU,EAAEE,UAJd;AAKE,IAAA,MAAM,EAAE2B,YALV;AAME,IAAA,WAAW,EAAE1B;AANf,KAOMmB,QAPN;AAQE,IAAA,QAAQ;AARV,KADF;AAYD,CA9Dc,C","sourcesContent":["import * as React from 'react';\nimport { Controller, Inline } from '@ali/4ever-cangjie';\nimport Image from './components/image';\nimport { ImagePluginConfig } from './types';\nimport isParentClickable from './utils/isParentClickable';\n\ninterface IProps {\n  node: Inline;\n  controller: Controller;\n  readonly?: boolean;\n  onClick?: (event: React.MouseEvent) => void;\n  onLoad?: () => void;\n  imageConfig: ImagePluginConfig;\n  isSelected: boolean;\n  isInserting?: boolean;\n  uploadPlaceholder?: string;\n  isTransferring?: boolean;\n}\n\nexport default React.forwardRef((props: IProps, ref: React.ForwardedRef<HTMLImageElement>) => {\n  const {\n    node, onLoad, controller, imageConfig, readonly, isSelected, ...rest\n  } = props;\n  const { previewImage } = imageConfig;\n\n  const shouldZoom = React.useRef(true);\n  const [isLoaded, setIsLoaded] = React.useState(false);\n  const { data } = node;\n  const { src } = data;\n  const handleZoomImage = React.useCallback((event: React.TouchEvent) => {\n    const isSelectingNode = controller.query('isSelectingNode');\n    if (isParentClickable(controller, node) || isSelectingNode ) {\n      return;\n    }\n    // 非只读的预览模式，点击可以放大\n    const isQuickPreview = controller.query('isQuickPreview');\n    if (\n      typeof previewImage === 'function' && shouldZoom.current\n      && ((readonly || isSelected || isQuickPreview) && isLoaded)\n    ) {\n      previewImage(src, node);\n    }\n  }, [controller, node, previewImage, readonly, isSelected, isLoaded, src]);\n\n  const handlers = React.useMemo(() => {\n    return {\n      onTouchEnd: handleZoomImage,\n      onTouchStart: () => {\n        const isSelectingNode = controller.query('isSelectingNode');\n        shouldZoom.current = !isSelectingNode;\n      },\n      onTouchMove: () => {\n        shouldZoom.current = false;\n      },\n      onClick: (event: React.MouseEvent) => {\n        if (!isParentClickable(controller, node)) {\n          event.preventDefault();\n        }\n      },\n    };\n  }, [handleZoomImage, controller, node]);\n\n  const handleOnLoad = React.useCallback(() => {\n    setIsLoaded(true);\n    if (typeof onLoad === 'function') {\n      onLoad();\n    }\n  }, [src, onLoad]);\n\n  return (\n    <Image\n      {...rest}\n      ref={ref}\n      node={node}\n      controller={controller}\n      onLoad={handleOnLoad}\n      imageConfig={imageConfig}\n      {...handlers}\n      isMobile\n    />\n  );\n});\n"],"file":"mobile.js"}