{"version":3,"sources":["../../../src/utils/imageManager.ts"],"names":["ImageManager","constructor","transformImageURL","controller","imageTransformMap","updateImageData","image","data","Image","isImage","withoutSaving","command","updateInlineImage","register","src","transformedRes","transformedURL","renderSrc","forceUpdatedData","e","getTransformedURL","isImgSrcRegistered"],"mappings":";;;;;;;;;AACA;;AAGA;;AAEe,MAAMA,YAAN,CAAmB;AAKhCC,EAAAA,WAAW,CAACC,iBAAD,EAA4DC,UAA6B,GAAG,IAA5F,EAAkG;AAAA,SAJrGC,iBAIqG,GAJzD,EAIyD;AAAA,SAH5FF,iBAG4F;AAAA,SAF5FC,UAE4F;;AAAA,SAK7GE,eAL6G,GAK3F,CAACC,KAAD,EAAgBC,IAAhB,KAAoC;AACpD,UAAIC,gBAAMC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxB,aAAKH,UAAL,EAAiBO,aAAjB,CAA+B,MAAM;AACnC,eAAKP,UAAL,EAAiBQ,OAAjB,CAAyBC,0BAAzB,EAA4CN,KAA5C,EAAmDC,IAAnD;AACD,SAFD;AAGD;AACF,KAX4G;;AAAA,SAa7GM,QAb6G,GAalG,OAAOC,GAAP,EAAoBR,KAApB,KAAsC;AAC/C,UAAI,KAAKF,iBAAL,CAAuBU,GAAvB,CAAJ,EAAiC;AAC/B,eAAO,KAAKV,iBAAL,CAAuBU,GAAvB,CAAP;AACD;;AACD,UAAI,OAAO,KAAKZ,iBAAZ,KAAkC,UAAtC,EAAkD;AAChD,YAAI;AACF,gBAAMa,cAAc,GAAG,MAAM,KAAKb,iBAAL,CAAuBY,GAAvB,EAA4BR,KAA5B,CAA7B;AACA,cAAIU,cAAJ;;AACA,cAAI,OAAOD,cAAP,KAA0B,QAA9B,EAAwC;AACtC,kBAAM;AAAEE,cAAAA,SAAF;AAAaC,cAAAA;AAAb,gBAAkCH,cAAc,IAAI,EAA1D;AACAC,YAAAA,cAAc,GAAGC,SAAjB;AACAC,YAAAA,gBAAgB,IAAI,KAAKb,eAAL,CAAqBC,KAArB,EAA4BY,gBAA5B,CAApB;AACD,WAJD,MAIO,IAAI,OAAOH,cAAP,KAA0B,QAA9B,EAAwC;AAC7CC,YAAAA,cAAc,GAAGD,cAAjB;AACD;;AACD,eAAKX,iBAAL,CAAuBU,GAAvB,IAA8BE,cAA9B;AACA,iBAAOA,cAAP;AACD,SAZD,CAYE,OAAOG,CAAP,EAAU;AACV,iBAAOL,GAAP;AACD;AACF;;AACD,aAAOA,GAAP;AACD,KAnC4G;;AAC3G,SAAKZ,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAiCDiB,EAAAA,iBAAiB,CAACN,GAAD,EAAkC;AACjD,WAAO,KAAKV,iBAAL,CAAuBU,GAAvB,CAAP;AACD;;AACDO,EAAAA,kBAAkB,CAACP,GAAD,EAA0B;AAC1C,WAAO,CAAC,CAACA,GAAF,IAAS,CAAC,CAAC,KAAKV,iBAAL,CAAuBU,GAAvB,CAAlB;AACD;;AA9C+B","sourcesContent":["import type { Controller, Inline } from '@ali/4ever-cangjie';\nimport Image from '../mo/models';\nimport type { ImagePluginConfig } from './types';\nimport type { ImageData } from '../mo/models';\nimport updateInlineImage from '../utils/commands/updateInlineImage';\n\nexport default class ImageManager {\n  private imageTransformMap: Record<string, string> = {};\n  private readonly transformImageURL: ImagePluginConfig['transformImageURL'];\n  private readonly controller: Controller | null;\n  \n  constructor(transformImageURL: ImagePluginConfig['transformImageURL'], controller: Controller | null = null) {\n    this.transformImageURL = transformImageURL;\n    this.controller = controller;\n  }\n\n  updateImageData = (image: Inline, data: ImageData) => {\n    if (Image.isImage(image)) {\n      this.controller?.withoutSaving(() => {\n        this.controller?.command(updateInlineImage, image, data);\n      });\n    }\n  }\n\n  register = async (src: string, image: Inline) => {\n    if (this.imageTransformMap[src]) {\n      return this.imageTransformMap[src];\n    }\n    if (typeof this.transformImageURL === 'function') {\n      try {\n        const transformedRes = await this.transformImageURL(src, image);\n        let transformedURL;\n        if (typeof transformedRes === 'object') {\n          const { renderSrc, forceUpdatedData } = transformedRes || {};\n          transformedURL = renderSrc;\n          forceUpdatedData && this.updateImageData(image, forceUpdatedData);\n        } else if (typeof transformedRes === 'string') {\n          transformedURL = transformedRes;\n        }\n        this.imageTransformMap[src] = transformedURL;\n        return transformedURL;\n      } catch (e) {\n        return src;\n      }\n    }\n    return src;\n  };\n  getTransformedURL(src: string): string | undefined {\n    return this.imageTransformMap[src];\n  }\n  isImgSrcRegistered(src: string | undefined) {\n    return !!src && !!this.imageTransformMap[src];\n  }\n}\n"],"file":"imageManager.js"}