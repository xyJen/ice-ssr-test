{"version":3,"sources":["../../../../src/utils/commands/updateInlineImage.ts"],"names":["injectionKeys","updateInlineImage","controller","image","data","container","document","value","path","getPath","key","node","getNodeByPath","newData","forEach","width","height","rotation","root","domUtils","findDOMNodeSafely","img","clientWidth","clientHeight","command","Commands","setNodeByKey"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA,MAAMA,aAAa,GAAG,CACpB,iBADoB,EAEpB,eAFoB,EAGpB,SAHoB,EAIpB,iBAJoB,CAAtB;;AAOe,SAASC,iBAAT,CAA2BC,UAA3B,EAAmDC,KAAnD,EAAkEC,IAAlE,EAAwFC,SAAxF,EAAiH;AAC9H,MAAI,CAACF,KAAL,EAAY;AACV,WAAOD,UAAP;AACD;;AACD,QAAM;AAAEI,IAAAA;AAAF,MAAeJ,UAAU,CAACK,KAAhC;AACA,QAAMC,IAAI,GAAGF,QAAQ,CAACG,OAAT,CAAiBN,KAAK,CAACO,GAAvB,CAAb;AACA,QAAMC,IAAI,GAAGL,QAAQ,CAACM,aAAT,CAAuBJ,IAAvB,CAAb;AACA,MAAI,CAACG,IAAL,EAAW,OAAOT,UAAP;AACX,QAAMW,OAAO,GAAG,EACd,GAAIF,IAAD,EAAiBP,IADN;AAEd,OAAGA;AAFW,GAAhB;AAIAJ,EAAAA,aAAa,CAACc,OAAd,CAAuBJ,GAAD,IAAS;AAC7B,WAAOG,OAAO,CAACH,GAAD,CAAd;AACD,GAFD,EAZ8H,CAe9H;;AACA,MAAI,CAAC,6BAAYG,OAAO,CAACE,KAApB,EAA2BF,OAAO,CAACG,MAAnC,CAAD,IAA+CZ,IAAI,CAACa,QAAL,GAAgB,CAAnE,EAAsE;AACpE,UAAMC,IAAI,GAAGb,SAAS,IAAIc,sBAASC,iBAAT,CAA2BlB,UAAU,CAACK,KAAX,CAAiBD,QAAjB,CAA0BI,GAArD,CAA1B;;AACA,UAAMW,GAAG,GAAGF,sBAASC,iBAAT,CAA2BjB,KAAK,CAACO,GAAjC,EAAsCQ,IAAtC,CAAZ;;AACAL,IAAAA,OAAO,CAACE,KAAR,GAAgBM,GAAG,EAAEC,WAArB;AACAT,IAAAA,OAAO,CAACG,MAAR,GAAiBK,GAAG,EAAEE,YAAtB;AACD;;AACD,SAAOrB,UAAU,CAACsB,OAAX,CAAmBC,sBAASC,YAA5B,EAA0CvB,KAAK,CAACO,GAAhD,EAAqD;AAC1DN,IAAAA,IAAI,EAAES;AADoD,GAArD,CAAP;AAGD","sourcesContent":["import { Controller, Inline, Commands, domUtils } from '@ali/4ever-cangjie';\nimport type { default as Image } from '../../mo/models';\nimport { isValidSize } from '../utils/aslService';\n\nconst injectionKeys = [\n  'isImageCropping',\n  'uploadPercent',\n  'isError',\n  'isSettingBorder',\n];\n\nexport default function updateInlineImage(controller: Controller, image: Inline, data: Inline['data'], container?: HTMLElement) {\n  if (!image) {\n    return controller;\n  }\n  const { document } = controller.value;\n  const path = document.getPath(image.key);\n  const node = document.getNodeByPath(path);\n  if (!node) return controller;\n  const newData = {\n    ...(node as Image)?.data,\n    ...data,\n  };\n  injectionKeys.forEach((key) => {\n    delete newData[key];\n  });\n  // 更新 rotation 的时候，若宽或高未落库，会影响后续计算\n  if (!isValidSize(newData.width, newData.height) && data.rotation > 0) {\n    const root = container ?? domUtils.findDOMNodeSafely(controller.value.document.key);\n    const img = domUtils.findDOMNodeSafely(image.key, root);\n    newData.width = img?.clientWidth;\n    newData.height = img?.clientHeight;\n  }\n  return controller.command(Commands.setNodeByKey, image.key, {\n    data: newData,\n  });\n}\n"],"file":"updateInlineImage.js"}