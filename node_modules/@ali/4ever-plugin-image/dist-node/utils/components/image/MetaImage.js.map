{"version":3,"sources":["../../../../../src/utils/components/image/MetaImage.tsx"],"names":["Img","styled","img","HoverOutline","span","MetaImage","props","style","data","imgSrc","onStatusChange","isMobile","onImgRef","onWrapperRef","disableLoading","forceLoading","restProps","status","setStatus","React","useState","Status","Loading","width","height","src","imageDataSrc","outline","radius","shadow","imgRef","useRef","handleLoad","useCallback","Success","handleError","Error","borderStyle","border","borderRadius","boxShadow","onReload","current","reloadSrc","onRef","elem","isStatic","isUploading","startsWith","IMAGE_HOVER_BORDER"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { IMetaImageProps, Status } from './types';\nimport Loading from '../loading';\nimport getReloadSrc from '../../utils/getReloadSrc';\nimport getBorder from '../../utils/getBorder';\nimport { isValidSize } from '../../utils/aslService';\nimport ImageBorder from '../imageBorder';\nimport { IMAGE_HOVER_BORDER } from '../../constants';\n\nconst Img = styled.img`\n  display: inline-block;\n  vertical-align: initial;\n  user-select: none;\n  image-orientation: from-image;\n`;\n\nexport const HoverOutline = styled.span`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  border-color: transparent;\n  transition: border-color 0.3s ease-in-out;\n  pointer-events: none;\n`;\n\nexport const MetaImage: React.FC<IMetaImageProps> = (props) => {\n  const { style, data, imgSrc, onStatusChange, isMobile, onImgRef, onWrapperRef, disableLoading, forceLoading, ...restProps } = props;\n  const [status, setStatus] = React.useState(Status.Loading);\n  const { width, height, src: imageDataSrc, outline, radius, shadow } = data;\n  const imgRef = React.useRef<HTMLImageElement>();\n\n  const handleLoad = React.useCallback(() => {\n    setStatus(Status.Success);\n    onStatusChange(Status.Success);\n  }, [imageDataSrc]);\n\n  const handleError = React.useCallback(() => {\n    setStatus(Status.Error);\n    onStatusChange(Status.Error);\n  }, []);\n\n  const borderStyle = {\n    border: getBorder(outline),\n    borderRadius: radius,\n    boxShadow: shadow,\n  }\n\n  const onReload = () => {\n    if (!imgRef.current) {\n      return;\n    }\n    setStatus(Status.Loading);\n    const reloadSrc = getReloadSrc(imgSrc);\n    imgRef.current.src = reloadSrc;\n  }\n\n  const onRef = React.useCallback((elem) => {\n    imgRef.current = elem;\n    if (typeof onImgRef === 'function') {\n      onImgRef(elem)\n    } else if (onImgRef) {\n      onImgRef.current = elem;\n    }\n  }, []);\n\n  const isStatic = status === Status.Success && !isValidSize(width, height);\n  const isUploading = !imageDataSrc && imgSrc.startsWith('blob:');\n  return (\n    <>\n      <ImageBorder style={borderStyle} onRef={onWrapperRef} isStatic={isStatic}>\n        {\n          imgSrc && \n          <Img\n            style={style}\n            src={imgSrc}\n            data-src={imageDataSrc}\n            data-width={width}\n            data-height={height}\n            data-type=\"image\"\n            data-status={status}\n            onLoad={handleLoad}\n            onError={handleError}\n            ref={onRef}\n            data-testid=\"cangjie-image\"\n            {...restProps}\n          />\n        }\n        {\n          !isUploading && ((!imgSrc) || (status !== Status.Success && !disableLoading)) && (\n            <Loading\n              status={status}\n              src={imageDataSrc}\n              renderSrc={imgSrc}\n              isMobile={isMobile}\n              onReload={onReload}\n              forceLoading={forceLoading}\n              enableBlink={!!imgSrc}\n            />\n          )\n        }\n      </ImageBorder>\n      <HoverOutline\n        className={IMAGE_HOVER_BORDER}\n        style={{\n          borderRadius: radius,\n        }}\n      />\n    </>\n  );\n}\n"],"file":"MetaImage.js"}