"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _weIcon = require("@ali/we-icon");

var _styled = require("./styled");

var _types = require("./types");

var _constants = require("../constants");

const _createElement = /*#__PURE__*/React.createElement;
const style = {
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%'
};

class Loading extends React.Component {
  constructor(props) {
    super(props);
    this.shouldReload = void 0;
    this.loadingRef = /*#__PURE__*/React.createRef();

    this.componentDidUpdate = prevProps => {
      const {
        status: prevStatus
      } = prevProps;

      if (this.props.src && prevStatus !== _types.Status.Error && this.props.status === _types.Status.Error) {
        const width = this.loadingRef.current?.clientWidth || _constants.DEFAULT_WIDTH;

        if (width < _constants.HIDE_RELOAD_TIP_MAX_WIDTH) {
          !this.state.hideReloadTip && this.setState({
            hideReloadTip: true
          });
        } else {
          this.state.hideReloadTip && this.setState({
            hideReloadTip: false
          });
        }
      }
    };

    this.reload = () => {
      const {
        onReload,
        src
      } = this.props;

      if (src) {
        onReload();
      }
    };

    this.onClick = e => {
      const {
        isMobile
      } = this.props;

      if (!isMobile) {
        e.preventDefault();
        e.stopPropagation();
        this.reload();
      }
    };

    this.renderReload = () => {
      const {
        hideReloadTip
      } = this.state;
      return /*#__PURE__*/_createElement(_weDesign.SpinErrorCard, {
        style: style,
        icon: /*#__PURE__*/_createElement(_weIcon.NopicNormal, {
          size: "large",
          style: {
            fontSize: 24
          }
        }),
        onRefresh: !hideReloadTip ? this.onClick : undefined,
        onClick: hideReloadTip ? this.onClick : undefined,
        refreshPlacement: "right"
      });
    };

    this.renderCustomLoading = isError => {
      const {
        renderLoading
      } = this.props;
      const loading = renderLoading && renderLoading(isError);
      return loading;
    };

    this.renderDefaultLoading = isError => {
      return isError ? /*#__PURE__*/_createElement(_weDesign.SpinErrorCard, {
        style: style,
        icon: /*#__PURE__*/_createElement(_weIcon.NopicNormal, {
          size: "large",
          style: {
            fontSize: 24
          }
        })
      }) : /*#__PURE__*/_createElement(_weDesign.SpinGridSimpleCard, {
        style: style,
        blink: this.props.enableBlink
      });
    };

    this.renderLoading = () => {
      const {
        forceLoading,
        src,
        renderLoading
      } = this.props;
      const isError = !src && !forceLoading;
      return renderLoading ? this.renderCustomLoading(isError) : this.renderDefaultLoading(isError);
    };

    this.onTouchStart = () => {
      this.shouldReload = true;
    };

    this.onTouchMove = () => {
      this.shouldReload = false;
    };

    this.onTouchEnd = e => {
      e.preventDefault();
      e.stopPropagation();
      const {
        isMobile
      } = this.props;

      if (isMobile && this.shouldReload) {
        this.reload();
      }
    };

    this.state = {
      hideReloadTip: false
    };
    this.shouldReload = false;
  }

  render() {
    const {
      isMobile,
      status,
      src,
      renderSrc
    } = this.props;
    const isReload = status === _types.Status.Error && src;
    const handlers = isMobile ? {
      onTouchStart: this.onTouchStart,
      onTouchMove: this.onTouchMove,
      onTouchEnd: this.onTouchEnd
    } : undefined;
    return /*#__PURE__*/_createElement(_styled.LoadingContent, (0, _extends2.default)({
      "data-status": status,
      "data-placeholder": "true",
      "data-src": src,
      "data-render-src": renderSrc,
      "data-testid": "image-loading",
      ref: this.loadingRef
    }, handlers), isReload ? this.renderReload() : this.renderLoading());
  }

}

var _default = Loading;
exports.default = _default;
//# sourceMappingURL=loading.js.map