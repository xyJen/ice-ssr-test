{"version":3,"sources":["../../../../src/utils/components/loading.tsx"],"names":["style","position","top","left","width","height","Loading","React","Component","constructor","props","shouldReload","loadingRef","createRef","componentDidUpdate","prevProps","status","prevStatus","src","Status","Error","current","clientWidth","DEFAULT_WIDTH","HIDE_RELOAD_TIP_MAX_WIDTH","state","hideReloadTip","setState","reload","onReload","onClick","e","isMobile","preventDefault","stopPropagation","renderReload","fontSize","undefined","renderCustomLoading","isError","renderLoading","loading","renderDefaultLoading","enableBlink","forceLoading","onTouchStart","onTouchMove","onTouchEnd","render","renderSrc","isReload","handlers"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { SpinGridSimpleCard, SpinErrorCard } from '@ali/we-design';\nimport { NopicNormal } from '@ali/we-icon';\nimport { LoadingContent } from './styled';\nimport { Status } from './types';\nimport { ILocale } from '../types';\nimport { DEFAULT_WIDTH, HIDE_RELOAD_TIP_MAX_WIDTH } from '../constants';\n\ninterface IProps {\n  src?: string;\n  status: Status;\n  renderSrc: string;\n  forceLoading?: boolean; // 强制加载状态，适用于粘贴浏览器无法加载的图片\n  isMobile?: boolean;\n  locale?: ILocale | Record<string, any>;\n  onReload: () => void;\n  renderLoading?: ((isError: boolean) => React.ReactNode) | null;\n  enableBlink: boolean;\n}\n\nexport interface IState {\n  hideReloadTip: boolean;\n}\n\nconst style: React.CSSProperties = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n};\n\nclass Loading extends React.Component<IProps, IState> {\n  private shouldReload: boolean;\n  private loadingRef = React.createRef<HTMLDivElement>();\n  constructor(props) {\n    super(props);\n    this.state = {\n      hideReloadTip: false,\n    };\n    this.shouldReload = false;\n  }\n  componentDidUpdate = (prevProps: IProps) => {\n    const { status: prevStatus } = prevProps;\n    if (this.props.src && prevStatus !== Status.Error && this.props.status === Status.Error) {\n      const width = this.loadingRef.current?.clientWidth || DEFAULT_WIDTH;\n      if (width < HIDE_RELOAD_TIP_MAX_WIDTH) {\n        !this.state.hideReloadTip && this.setState({\n          hideReloadTip: true,\n        });\n      } else {\n        this.state.hideReloadTip && this.setState({\n          hideReloadTip: false,\n        });\n      }\n    }\n  };\n\n  reload = () => {\n    const { onReload, src } = this.props;\n    if (src) {\n      onReload();\n    }\n  };\n\n  onClick = (e: React.MouseEvent) => {\n    const { isMobile } = this.props;\n    if (!isMobile) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.reload();\n    }\n  };\n\n  renderReload = () => {\n    const { hideReloadTip } = this.state;\n    return (\n      <SpinErrorCard\n        style={style}\n        icon={<NopicNormal size=\"large\" style={{ fontSize: 24 }} />}\n        onRefresh={!hideReloadTip ? this.onClick : undefined}\n        onClick={hideReloadTip ? this.onClick : undefined}\n        refreshPlacement=\"right\"\n      />\n    );\n  };\n\n  renderCustomLoading = (isError: boolean) => {\n    const { renderLoading } = this.props;\n    const loading = renderLoading && renderLoading(isError);\n    return loading;\n  };\n\n  renderDefaultLoading = (isError: boolean) => {\n    return isError\n      ? (\n        <SpinErrorCard\n          style={style}\n          icon={<NopicNormal size=\"large\" style={{ fontSize: 24 }} />}\n        />\n      ) : (\n        <SpinGridSimpleCard\n          style={style}\n          blink={this.props.enableBlink}\n        />\n      );\n  };\n\n  renderLoading = () => {\n    const { forceLoading, src, renderLoading } = this.props;\n    const isError = !src && !forceLoading;\n    return (\n      renderLoading ? this.renderCustomLoading(isError) : this.renderDefaultLoading(isError)\n    );\n  };\n\n  onTouchStart = () => {\n    this.shouldReload = true;\n  };\n\n  onTouchMove = () => {\n    this.shouldReload = false;\n  };\n\n  onTouchEnd = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { isMobile } = this.props;\n    if (isMobile && this.shouldReload) {\n      this.reload();\n    }\n  };\n\n  render() {\n    const { isMobile, status, src, renderSrc } = this.props;\n    const isReload = status === Status.Error && src;\n    const handlers = isMobile ? {\n      onTouchStart: this.onTouchStart,\n      onTouchMove: this.onTouchMove,\n      onTouchEnd: this.onTouchEnd,\n    } : undefined;\n    return (\n      <LoadingContent\n        data-status={status}\n        data-placeholder=\"true\"\n        data-src={src}\n        data-render-src={renderSrc}\n        data-testid=\"image-loading\"\n        ref={this.loadingRef}\n        {...handlers}\n      >\n        {\n          isReload ? (\n            this.renderReload()\n          ) : (\n            this.renderLoading()\n          )\n        }\n      </LoadingContent>\n    );\n  }\n}\n\nexport default Loading;\n"],"file":"loading.js"}