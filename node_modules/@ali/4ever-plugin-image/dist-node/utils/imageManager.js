"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _models = _interopRequireDefault(require("../mo/models"));

var _updateInlineImage = _interopRequireDefault(require("../utils/commands/updateInlineImage"));

class ImageManager {
  constructor(transformImageURL, controller = null) {
    this.imageTransformMap = {};
    this.transformImageURL = void 0;
    this.controller = void 0;

    this.updateImageData = (image, data) => {
      if (_models.default.isImage(image)) {
        this.controller?.withoutSaving(() => {
          this.controller?.command(_updateInlineImage.default, image, data);
        });
      }
    };

    this.register = async (src, image) => {
      if (this.imageTransformMap[src]) {
        return this.imageTransformMap[src];
      }

      if (typeof this.transformImageURL === 'function') {
        try {
          const transformedRes = await this.transformImageURL(src, image);
          let transformedURL;

          if (typeof transformedRes === 'object') {
            const {
              renderSrc,
              forceUpdatedData
            } = transformedRes || {};
            transformedURL = renderSrc;
            forceUpdatedData && this.updateImageData(image, forceUpdatedData);
          } else if (typeof transformedRes === 'string') {
            transformedURL = transformedRes;
          }

          this.imageTransformMap[src] = transformedURL;
          return transformedURL;
        } catch (e) {
          return src;
        }
      }

      return src;
    };

    this.transformImageURL = transformImageURL;
    this.controller = controller;
  }

  getTransformedURL(src) {
    return this.imageTransformMap[src];
  }

  isImgSrcRegistered(src) {
    return !!src && !!this.imageTransformMap[src];
  }

}

exports.default = ImageManager;
//# sourceMappingURL=imageManager.js.map