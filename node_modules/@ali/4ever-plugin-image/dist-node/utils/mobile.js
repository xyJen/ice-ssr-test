"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _image = _interopRequireDefault(require("./components/image"));

var _isParentClickable = _interopRequireDefault(require("./utils/isParentClickable"));

const _createElement = /*#__PURE__*/React.createElement;

var _default = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    node,
    onLoad,
    controller,
    imageConfig,
    readonly,
    isSelected,
    ...rest
  } = props;
  const {
    previewImage
  } = imageConfig;
  const shouldZoom = React.useRef(true);
  const [isLoaded, setIsLoaded] = React.useState(false);
  const {
    data
  } = node;
  const {
    src
  } = data;
  const handleZoomImage = React.useCallback(event => {
    const isSelectingNode = controller.query('isSelectingNode');

    if ((0, _isParentClickable.default)(controller, node) || isSelectingNode) {
      return;
    } // 非只读的预览模式，点击可以放大


    const isQuickPreview = controller.query('isQuickPreview');

    if (typeof previewImage === 'function' && shouldZoom.current && (readonly || isSelected || isQuickPreview) && isLoaded) {
      previewImage(src, node);
    }
  }, [controller, node, previewImage, readonly, isSelected, isLoaded, src]);
  const handlers = React.useMemo(() => {
    return {
      onTouchEnd: handleZoomImage,
      onTouchStart: () => {
        const isSelectingNode = controller.query('isSelectingNode');
        shouldZoom.current = !isSelectingNode;
      },
      onTouchMove: () => {
        shouldZoom.current = false;
      },
      onClick: event => {
        if (!(0, _isParentClickable.default)(controller, node)) {
          event.preventDefault();
        }
      }
    };
  }, [handleZoomImage, controller, node]);
  const handleOnLoad = React.useCallback(() => {
    setIsLoaded(true);

    if (typeof onLoad === 'function') {
      onLoad();
    }
  }, [src, onLoad]);
  return /*#__PURE__*/_createElement(_image.default, (0, _extends2.default)({}, rest, {
    ref: ref,
    node: node,
    controller: controller,
    onLoad: handleOnLoad,
    imageConfig: imageConfig
  }, handlers, {
    isMobile: true
  }));
});

exports.default = _default;
//# sourceMappingURL=mobile.js.map