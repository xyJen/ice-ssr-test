{"version":3,"sources":["../../../../src/mo/serializer/jsonMLToHTML.tsx"],"names":["Image","props","src","style","path","config","rest","protocolAllowList","toString","name","match","node","convert","width","height","opacity","outline","border","color"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;uBAA4B,a;;AAuB5B,MAAMA,KAA2B,GAAIC,KAAD,IAA+B;AACjE,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAP;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,MAApB;AAA4B,OAAGC;AAA/B,MAAwCL,KAA9C;AACA,sBACE;AAAK,IAAA,GAAG,EAAE,4BAAYC,GAAZ,EAAiBG,MAAM,EAAEE,iBAAzB,CAAV;AAAuD,IAAA,KAAK,EAAEJ,KAA9D;AAAqE,IAAA,GAAG,EAAEC,IAAI,CAACI,QAAL;AAA1E,KAA+FF,IAA/F,EADF;AAGD,CALD;;eAOgBD,MAAD,KAA6C;AAC1DI,EAAAA,IAAI,EAAE,KADoD;;AAG1DC,EAAAA,KAAK,CAACC,IAAD,EAAwB;AAC3B,WAAO,2BAAWA,IAAX,MAAqB,KAA5B;AACD,GALyD;;AAO1DC,EAAAA,OAAO,CAACD,IAAD,EAAeP,IAAf,EAAyD;AAC9D;AACA,UAAM;AAAEF,MAAAA,GAAF;AAAOW,MAAAA,KAAP;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA,OAAtB;AAA+BC,MAAAA;AAA/B,QAA2C,8BAAcL,IAAd,CAAjD;AACA,QAAIM,MAAJ;;AAEA,QAAID,OAAO,IAAIA,OAAO,CAACH,KAAvB,EAA8B;AAC5BI,MAAAA,MAAM,GAAI,GAAED,OAAO,CAACH,KAAM,YAAWG,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACE,KAAxB,GAAgC,SAAU,EAA/E;AACD;;AAED,QAAI,CAAChB,GAAL,EAAU,OAAO,IAAP;AAEV,wBACE,eAAC,KAAD;AACE,MAAA,GAAG,EAAEA,GADP;AAEE,MAAA,KAAK,EAAE;AACLW,QAAAA,KADK;AACEC,QAAAA,MADF;AACUC,QAAAA,OADV;AACmBE,QAAAA;AADnB,OAFT;AAKE,MAAA,IAAI,EAAEb,IALR;AAME,MAAA,MAAM,EAAEC;AANV,MADF;AAUD;;AA5ByD,CAA7C,C","sourcesContent":["import * as React from 'react';\nimport {\n  JsonML,\n  getTagName,\n  getAttributes,\n  sanitizeUrl,\n} from '@ali/4ever-utils';\nimport {\n  JsonMLToHTMLRule\n} from '@ali/4ever-cangjie';\nimport type { ImageConfig } from '../../utils/types';\n\ntype ImageProps = {\n  src: string;\n  path: number[];\n  style: {\n    width: number;\n    height: number;\n    opacity?: number;\n    border?: string\n  };\n  config?: ImageConfig;\n};\n\nconst Image: React.FC<ImageProps> = (props): React.ReactElement => {\n  const { src, style, path, config, ...rest } = props;\n  return (\n    <img src={sanitizeUrl(src, config?.protocolAllowList)} style={style} key={path.toString()} {...rest} />\n  );\n};\n\nexport default (config?: ImageConfig): JsonMLToHTMLRule => ({\n  name: 'img',\n\n  match(node: JsonML): boolean {\n    return getTagName(node) === 'img';\n  },\n\n  convert(node: JsonML, path: number[]): React.ReactElement | null{\n    // @ts-ignore\n    const { src, width, height, opacity, outline } = getAttributes(node);\n    let border: string | undefined;\n\n    if (outline && outline.width) {\n      border = `${outline.width}px solid ${outline.color ? outline.color : '#000000'}`;\n    }\n\n    if (!src) return null;\n\n    return (\n      <Image\n        src={src}\n        style={{\n          width, height, opacity, border,\n        }}\n        path={path}\n        config={config}\n      />\n    );\n  },\n});\n"],"file":"jsonMLToHTML.js"}