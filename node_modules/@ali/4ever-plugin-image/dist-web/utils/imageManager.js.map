{"version":3,"sources":["../../../src/utils/imageManager.ts"],"names":["Image","updateInlineImage","ImageManager","transformImageURL","controller","imageTransformMap","updateImageData","image","data","isImage","withoutSaving","command","register","src","transformedRes","renderSrc","forceUpdatedData","transformedURL","getTransformedURL","isImgSrcRegistered"],"mappings":";;AACA,OAAOA,KAAP;AAGA,OAAOC,iBAAP;;IAEqBC,Y;AAKnB,wBAAYC,iBAAZ,EAAuEC,UAAvE,EAA6G;AAAA;;AAAA,QAAtCA,UAAsC;AAAtCA,MAAAA,UAAsC,GAAN,IAAM;AAAA;;AAAA,SAJrGC,iBAIqG,GAJzD,EAIyD;AAAA,SAH5FF,iBAG4F;AAAA,SAF5FC,UAE4F;;AAAA,SAK7GE,eAL6G,GAK3F,UAACC,KAAD,EAAgBC,IAAhB,EAAoC;AACpD,UAAIR,KAAK,CAACS,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AAAA;;AACxB,4BAAA,KAAI,CAACH,UAAL,sCAAiBM,aAAjB,CAA+B,YAAM;AAAA;;AACnC,+BAAA,KAAI,CAACN,UAAL,uCAAiBO,OAAjB,CAAyBV,iBAAzB,EAA4CM,KAA5C,EAAmDC,IAAnD;AACD,SAFD;AAGD;AACF,KAX4G;;AAAA,SAa7GI,QAb6G;AAAA,0EAalG,iBAAOC,GAAP,EAAoBN,KAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBACL,KAAI,CAACF,iBAAL,CAAuBQ,GAAvB,CADK;AAAA;AAAA;AAAA;;AAAA,iDAEA,KAAI,CAACR,iBAAL,CAAuBQ,GAAvB,CAFA;;AAAA;AAAA,sBAIL,OAAO,KAAI,CAACV,iBAAZ,KAAkC,UAJ7B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAMwB,KAAI,CAACA,iBAAL,CAAuBU,GAAvB,EAA4BN,KAA5B,CANxB;;AAAA;AAMCO,gBAAAA,cAND;;AAQL,oBAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC;AAAA,0BACEA,cAAc,IAAI,EADpB,EAC9BC,SAD8B,SAC9BA,SAD8B,EACnBC,gBADmB,SACnBA,gBADmB;AAEtCC,kBAAAA,cAAc,GAAGF,SAAjB;AACAC,kBAAAA,gBAAgB,IAAI,KAAI,CAACV,eAAL,CAAqBC,KAArB,EAA4BS,gBAA5B,CAApB;AACD,iBAJD,MAIO,IAAI,OAAOF,cAAP,KAA0B,QAA9B,EAAwC;AAC7CG,kBAAAA,cAAc,GAAGH,cAAjB;AACD;;AACD,gBAAA,KAAI,CAACT,iBAAL,CAAuBQ,GAAvB,IAA8BI,cAA9B;AAfK,iDAgBEA,cAhBF;;AAAA;AAAA;AAAA;AAAA,iDAkBEJ,GAlBF;;AAAA;AAAA,iDAqBFA,GArBE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAbkG;;AAAA;AAAA;AAAA;AAAA;;AAC3G,SAAKV,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;;;SAiCDc,iB,GAAA,2BAAkBL,GAAlB,EAAmD;AACjD,WAAO,KAAKR,iBAAL,CAAuBQ,GAAvB,CAAP;AACD,G;;SACDM,kB,GAAA,4BAAmBN,GAAnB,EAA4C;AAC1C,WAAO,CAAC,CAACA,GAAF,IAAS,CAAC,CAAC,KAAKR,iBAAL,CAAuBQ,GAAvB,CAAlB;AACD,G;;;;;SA9CkBX,Y","sourcesContent":["import type { Controller, Inline } from '@ali/4ever-cangjie';\nimport Image from '../mo/models';\nimport type { ImagePluginConfig } from './types';\nimport type { ImageData } from '../mo/models';\nimport updateInlineImage from '../utils/commands/updateInlineImage';\n\nexport default class ImageManager {\n  private imageTransformMap: Record<string, string> = {};\n  private readonly transformImageURL: ImagePluginConfig['transformImageURL'];\n  private readonly controller: Controller | null;\n  \n  constructor(transformImageURL: ImagePluginConfig['transformImageURL'], controller: Controller | null = null) {\n    this.transformImageURL = transformImageURL;\n    this.controller = controller;\n  }\n\n  updateImageData = (image: Inline, data: ImageData) => {\n    if (Image.isImage(image)) {\n      this.controller?.withoutSaving(() => {\n        this.controller?.command(updateInlineImage, image, data);\n      });\n    }\n  }\n\n  register = async (src: string, image: Inline) => {\n    if (this.imageTransformMap[src]) {\n      return this.imageTransformMap[src];\n    }\n    if (typeof this.transformImageURL === 'function') {\n      try {\n        const transformedRes = await this.transformImageURL(src, image);\n        let transformedURL;\n        if (typeof transformedRes === 'object') {\n          const { renderSrc, forceUpdatedData } = transformedRes || {};\n          transformedURL = renderSrc;\n          forceUpdatedData && this.updateImageData(image, forceUpdatedData);\n        } else if (typeof transformedRes === 'string') {\n          transformedURL = transformedRes;\n        }\n        this.imageTransformMap[src] = transformedURL;\n        return transformedURL;\n      } catch (e) {\n        return src;\n      }\n    }\n    return src;\n  };\n  getTransformedURL(src: string): string | undefined {\n    return this.imageTransformMap[src];\n  }\n  isImgSrcRegistered(src: string | undefined) {\n    return !!src && !!this.imageTransformMap[src];\n  }\n}\n"],"file":"imageManager.js"}