{"version":3,"sources":["../../../../src/utils/components/loading.tsx"],"names":["React","SpinGridSimpleCard","SpinErrorCard","NopicNormal","LoadingContent","Status","DEFAULT_WIDTH","HIDE_RELOAD_TIP_MAX_WIDTH","style","position","top","left","width","height","Loading","props","shouldReload","loadingRef","createRef","componentDidUpdate","prevProps","prevStatus","status","src","Error","current","clientWidth","state","hideReloadTip","setState","reload","onReload","onClick","e","isMobile","preventDefault","stopPropagation","renderReload","fontSize","undefined","renderCustomLoading","isError","renderLoading","loading","renderDefaultLoading","enableBlink","forceLoading","onTouchStart","onTouchMove","onTouchEnd","render","renderSrc","isReload","handlers","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { SpinGridSimpleCard, SpinErrorCard } from '@ali/we-design';\nimport { NopicNormal } from '@ali/we-icon';\nimport { LoadingContent } from './styled';\nimport { Status } from './types';\nimport { ILocale } from '../types';\nimport { DEFAULT_WIDTH, HIDE_RELOAD_TIP_MAX_WIDTH } from '../constants';\n\ninterface IProps {\n  src?: string;\n  status: Status;\n  renderSrc: string;\n  forceLoading?: boolean; // 强制加载状态，适用于粘贴浏览器无法加载的图片\n  isMobile?: boolean;\n  locale?: ILocale | Record<string, any>;\n  onReload: () => void;\n  renderLoading?: ((isError: boolean) => React.ReactNode) | null;\n  enableBlink: boolean;\n}\n\nexport interface IState {\n  hideReloadTip: boolean;\n}\n\nconst style: React.CSSProperties = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n};\n\nclass Loading extends React.Component<IProps, IState> {\n  private shouldReload: boolean;\n  private loadingRef = React.createRef<HTMLDivElement>();\n  constructor(props) {\n    super(props);\n    this.state = {\n      hideReloadTip: false,\n    };\n    this.shouldReload = false;\n  }\n  componentDidUpdate = (prevProps: IProps) => {\n    const { status: prevStatus } = prevProps;\n    if (this.props.src && prevStatus !== Status.Error && this.props.status === Status.Error) {\n      const width = this.loadingRef.current?.clientWidth || DEFAULT_WIDTH;\n      if (width < HIDE_RELOAD_TIP_MAX_WIDTH) {\n        !this.state.hideReloadTip && this.setState({\n          hideReloadTip: true,\n        });\n      } else {\n        this.state.hideReloadTip && this.setState({\n          hideReloadTip: false,\n        });\n      }\n    }\n  };\n\n  reload = () => {\n    const { onReload, src } = this.props;\n    if (src) {\n      onReload();\n    }\n  };\n\n  onClick = (e: React.MouseEvent) => {\n    const { isMobile } = this.props;\n    if (!isMobile) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.reload();\n    }\n  };\n\n  renderReload = () => {\n    const { hideReloadTip } = this.state;\n    return (\n      <SpinErrorCard\n        style={style}\n        icon={<NopicNormal size=\"large\" style={{ fontSize: 24 }} />}\n        onRefresh={!hideReloadTip ? this.onClick : undefined}\n        onClick={hideReloadTip ? this.onClick : undefined}\n        refreshPlacement=\"right\"\n      />\n    );\n  };\n\n  renderCustomLoading = (isError: boolean) => {\n    const { renderLoading } = this.props;\n    const loading = renderLoading && renderLoading(isError);\n    return loading;\n  };\n\n  renderDefaultLoading = (isError: boolean) => {\n    return isError\n      ? (\n        <SpinErrorCard\n          style={style}\n          icon={<NopicNormal size=\"large\" style={{ fontSize: 24 }} />}\n        />\n      ) : (\n        <SpinGridSimpleCard\n          style={style}\n          blink={this.props.enableBlink}\n        />\n      );\n  };\n\n  renderLoading = () => {\n    const { forceLoading, src, renderLoading } = this.props;\n    const isError = !src && !forceLoading;\n    return (\n      renderLoading ? this.renderCustomLoading(isError) : this.renderDefaultLoading(isError)\n    );\n  };\n\n  onTouchStart = () => {\n    this.shouldReload = true;\n  };\n\n  onTouchMove = () => {\n    this.shouldReload = false;\n  };\n\n  onTouchEnd = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { isMobile } = this.props;\n    if (isMobile && this.shouldReload) {\n      this.reload();\n    }\n  };\n\n  render() {\n    const { isMobile, status, src, renderSrc } = this.props;\n    const isReload = status === Status.Error && src;\n    const handlers = isMobile ? {\n      onTouchStart: this.onTouchStart,\n      onTouchMove: this.onTouchMove,\n      onTouchEnd: this.onTouchEnd,\n    } : undefined;\n    return (\n      <LoadingContent\n        data-status={status}\n        data-placeholder=\"true\"\n        data-src={src}\n        data-render-src={renderSrc}\n        data-testid=\"image-loading\"\n        ref={this.loadingRef}\n        {...handlers}\n      >\n        {\n          isReload ? (\n            this.renderReload()\n          ) : (\n            this.renderLoading()\n          )\n        }\n      </LoadingContent>\n    );\n  }\n}\n\nexport default Loading;\n"],"file":"loading.js"}