import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SpinGridSimpleCard, SpinErrorCard } from '@ali/we-design';
import { NopicNormal } from '@ali/we-icon';
import { LoadingContent } from "./styled";
import { Status } from "./types";
import { DEFAULT_WIDTH, HIDE_RELOAD_TIP_MAX_WIDTH } from "../constants";
var style = {
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%'
};

var Loading = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Loading, _React$Component);

  function Loading(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.shouldReload = void 0;
    _this.loadingRef = /*#__PURE__*/React.createRef();

    _this.componentDidUpdate = function (prevProps) {
      var prevStatus = prevProps.status;

      if (_this.props.src && prevStatus !== Status.Error && _this.props.status === Status.Error) {
        var _this$loadingRef$curr;

        var width = ((_this$loadingRef$curr = _this.loadingRef.current) == null ? void 0 : _this$loadingRef$curr.clientWidth) || DEFAULT_WIDTH;

        if (width < HIDE_RELOAD_TIP_MAX_WIDTH) {
          !_this.state.hideReloadTip && _this.setState({
            hideReloadTip: true
          });
        } else {
          _this.state.hideReloadTip && _this.setState({
            hideReloadTip: false
          });
        }
      }
    };

    _this.reload = function () {
      var _this$props = _this.props,
          onReload = _this$props.onReload,
          src = _this$props.src;

      if (src) {
        onReload();
      }
    };

    _this.onClick = function (e) {
      var isMobile = _this.props.isMobile;

      if (!isMobile) {
        e.preventDefault();
        e.stopPropagation();

        _this.reload();
      }
    };

    _this.renderReload = function () {
      var hideReloadTip = _this.state.hideReloadTip;
      return /*#__PURE__*/_createElement(SpinErrorCard, {
        style: style,
        icon: /*#__PURE__*/_createElement(NopicNormal, {
          size: "large",
          style: {
            fontSize: 24
          }
        }),
        onRefresh: !hideReloadTip ? _this.onClick : undefined,
        onClick: hideReloadTip ? _this.onClick : undefined,
        refreshPlacement: "right"
      });
    };

    _this.renderCustomLoading = function (isError) {
      var renderLoading = _this.props.renderLoading;
      var loading = renderLoading && renderLoading(isError);
      return loading;
    };

    _this.renderDefaultLoading = function (isError) {
      return isError ? /*#__PURE__*/_createElement(SpinErrorCard, {
        style: style,
        icon: /*#__PURE__*/_createElement(NopicNormal, {
          size: "large",
          style: {
            fontSize: 24
          }
        })
      }) : /*#__PURE__*/_createElement(SpinGridSimpleCard, {
        style: style,
        blink: _this.props.enableBlink
      });
    };

    _this.renderLoading = function () {
      var _this$props2 = _this.props,
          forceLoading = _this$props2.forceLoading,
          src = _this$props2.src,
          renderLoading = _this$props2.renderLoading;
      var isError = !src && !forceLoading;
      return renderLoading ? _this.renderCustomLoading(isError) : _this.renderDefaultLoading(isError);
    };

    _this.onTouchStart = function () {
      _this.shouldReload = true;
    };

    _this.onTouchMove = function () {
      _this.shouldReload = false;
    };

    _this.onTouchEnd = function (e) {
      e.preventDefault();
      e.stopPropagation();
      var isMobile = _this.props.isMobile;

      if (isMobile && _this.shouldReload) {
        _this.reload();
      }
    };

    _this.state = {
      hideReloadTip: false
    };
    _this.shouldReload = false;
    return _this;
  }

  var _proto = Loading.prototype;

  _proto.render = function render() {
    var _this$props3 = this.props,
        isMobile = _this$props3.isMobile,
        status = _this$props3.status,
        src = _this$props3.src,
        renderSrc = _this$props3.renderSrc;
    var isReload = status === Status.Error && src;
    var handlers = isMobile ? {
      onTouchStart: this.onTouchStart,
      onTouchMove: this.onTouchMove,
      onTouchEnd: this.onTouchEnd
    } : undefined;
    return /*#__PURE__*/_createElement(LoadingContent, _extends({
      "data-status": status,
      "data-placeholder": "true",
      "data-src": src,
      "data-render-src": renderSrc,
      "data-testid": "image-loading",
      ref: this.loadingRef
    }, handlers), isReload ? this.renderReload() : this.renderLoading());
  };

  return Loading;
}(React.Component);

export default Loading;
//# sourceMappingURL=loading.js.map