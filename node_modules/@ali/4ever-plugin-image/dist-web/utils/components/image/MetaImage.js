import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from "react";
var _createElement = /*#__PURE__*/React.createElement;
import styled from "styled-components";
import { Status } from "./types";
import Loading from "../loading";
import getReloadSrc from "../../utils/getReloadSrc";
import getBorder from "../../utils/getBorder";
import { isValidSize } from "../../utils/aslService";
import ImageBorder from "../imageBorder";
import { IMAGE_HOVER_BORDER } from "../../constants";
var Img = /*#__PURE__*/styled.img(["display:inline-block;vertical-align:initial;user-select:none;image-orientation:from-image;"]);
export var HoverOutline = /*#__PURE__*/styled.span(["position:absolute;width:100%;height:100%;left:0;top:0;border-color:transparent;transition:border-color 0.3s ease-in-out;pointer-events:none;"]);
export var MetaImage = function MetaImage(props) {
  var style = props.style,
      data = props.data,
      imgSrc = props.imgSrc,
      onStatusChange = props.onStatusChange,
      isMobile = props.isMobile,
      onImgRef = props.onImgRef,
      onWrapperRef = props.onWrapperRef,
      disableLoading = props.disableLoading,
      forceLoading = props.forceLoading,
      restProps = _objectWithoutPropertiesLoose(props, ["style", "data", "imgSrc", "onStatusChange", "isMobile", "onImgRef", "onWrapperRef", "disableLoading", "forceLoading"]);

  var _React$useState = React.useState(Status.Loading),
      status = _React$useState[0],
      setStatus = _React$useState[1];

  var width = data.width,
      height = data.height,
      imageDataSrc = data.src,
      outline = data.outline,
      radius = data.radius,
      shadow = data.shadow;
  var imgRef = React.useRef();
  var handleLoad = React.useCallback(function () {
    setStatus(Status.Success);
    onStatusChange(Status.Success);
  }, [imageDataSrc]);
  var handleError = React.useCallback(function () {
    setStatus(Status.Error);
    onStatusChange(Status.Error);
  }, []);
  var borderStyle = {
    border: getBorder(outline),
    borderRadius: radius,
    boxShadow: shadow
  };

  var onReload = function onReload() {
    if (!imgRef.current) {
      return;
    }

    setStatus(Status.Loading);
    var reloadSrc = getReloadSrc(imgSrc);
    imgRef.current.src = reloadSrc;
  };

  var onRef = React.useCallback(function (elem) {
    imgRef.current = elem;

    if (typeof onImgRef === 'function') {
      onImgRef(elem);
    } else if (onImgRef) {
      onImgRef.current = elem;
    }
  }, []);
  var isStatic = status === Status.Success && !isValidSize(width, height);
  var isUploading = !imageDataSrc && imgSrc.startsWith('blob:');
  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(ImageBorder, {
    style: borderStyle,
    onRef: onWrapperRef,
    isStatic: isStatic
  }, imgSrc && /*#__PURE__*/_createElement(Img, _extends({
    style: style,
    src: imgSrc,
    "data-src": imageDataSrc,
    "data-width": width,
    "data-height": height,
    "data-type": "image",
    "data-status": status,
    onLoad: handleLoad,
    onError: handleError,
    ref: onRef,
    "data-testid": "cangjie-image"
  }, restProps)), !isUploading && (!imgSrc || status !== Status.Success && !disableLoading) && /*#__PURE__*/_createElement(Loading, {
    status: status,
    src: imageDataSrc,
    renderSrc: imgSrc,
    isMobile: isMobile,
    onReload: onReload,
    forceLoading: forceLoading,
    enableBlink: !!imgSrc
  })), /*#__PURE__*/_createElement(HoverOutline, {
    className: IMAGE_HOVER_BORDER,
    style: {
      borderRadius: radius
    }
  }));
};
//# sourceMappingURL=MetaImage.js.map