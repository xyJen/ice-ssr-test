import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import Image from "../mo/models";
import updateInlineImage from "../utils/commands/updateInlineImage";

var ImageManager = /*#__PURE__*/function () {
  function ImageManager(transformImageURL, controller) {
    var _this = this;

    if (controller === void 0) {
      controller = null;
    }

    this.imageTransformMap = {};
    this.transformImageURL = void 0;
    this.controller = void 0;

    this.updateImageData = function (image, data) {
      if (Image.isImage(image)) {
        var _this$controller;

        (_this$controller = _this.controller) == null ? void 0 : _this$controller.withoutSaving(function () {
          var _this$controller2;

          (_this$controller2 = _this.controller) == null ? void 0 : _this$controller2.command(updateInlineImage, image, data);
        });
      }
    };

    this.register = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(src, image) {
        var transformedRes, transformedURL, _ref2, renderSrc, forceUpdatedData;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this.imageTransformMap[src]) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", _this.imageTransformMap[src]);

              case 2:
                if (!(typeof _this.transformImageURL === 'function')) {
                  _context.next = 15;
                  break;
                }

                _context.prev = 3;
                _context.next = 6;
                return _this.transformImageURL(src, image);

              case 6:
                transformedRes = _context.sent;

                if (typeof transformedRes === 'object') {
                  _ref2 = transformedRes || {}, renderSrc = _ref2.renderSrc, forceUpdatedData = _ref2.forceUpdatedData;
                  transformedURL = renderSrc;
                  forceUpdatedData && _this.updateImageData(image, forceUpdatedData);
                } else if (typeof transformedRes === 'string') {
                  transformedURL = transformedRes;
                }

                _this.imageTransformMap[src] = transformedURL;
                return _context.abrupt("return", transformedURL);

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](3);
                return _context.abrupt("return", src);

              case 15:
                return _context.abrupt("return", src);

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[3, 12]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();

    this.transformImageURL = transformImageURL;
    this.controller = controller;
  }

  var _proto = ImageManager.prototype;

  _proto.getTransformedURL = function getTransformedURL(src) {
    return this.imageTransformMap[src];
  };

  _proto.isImgSrcRegistered = function isImgSrcRegistered(src) {
    return !!src && !!this.imageTransformMap[src];
  };

  return ImageManager;
}();

export { ImageManager as default };
//# sourceMappingURL=imageManager.js.map