{"version":3,"sources":["../../../../src/utils/commands/updateInlineImage.ts"],"names":["Commands","domUtils","isValidSize","injectionKeys","updateInlineImage","controller","image","data","container","document","value","path","getPath","key","node","getNodeByPath","newData","forEach","width","height","rotation","root","findDOMNodeSafely","img","clientWidth","clientHeight","command","setNodeByKey"],"mappings":";AAAA,SAA6BA,QAA7B,EAAuCC,QAAvC,QAAuD,oBAAvD;AAEA,SAASC,WAAT;AAEA,IAAMC,aAAa,GAAG,CACpB,iBADoB,EAEpB,eAFoB,EAGpB,SAHoB,EAIpB,iBAJoB,CAAtB;AAOA,eAAe,SAASC,iBAAT,CAA2BC,UAA3B,EAAmDC,KAAnD,EAAkEC,IAAlE,EAAwFC,SAAxF,EAAiH;AAC9H,MAAI,CAACF,KAAL,EAAY;AACV,WAAOD,UAAP;AACD;;AAH6H,MAItHI,QAJsH,GAIzGJ,UAAU,CAACK,KAJ8F,CAItHD,QAJsH;AAK9H,MAAME,IAAI,GAAGF,QAAQ,CAACG,OAAT,CAAiBN,KAAK,CAACO,GAAvB,CAAb;AACA,MAAMC,IAAI,GAAGL,QAAQ,CAACM,aAAT,CAAuBJ,IAAvB,CAAb;AACA,MAAI,CAACG,IAAL,EAAW,OAAOT,UAAP;;AACX,MAAMW,OAAO,gBACPF,IADO,oBACPA,IAAD,CAAiBP,IADT,EAERA,IAFQ,CAAb;;AAIAJ,EAAAA,aAAa,CAACc,OAAd,CAAsB,UAACJ,GAAD,EAAS;AAC7B,WAAOG,OAAO,CAACH,GAAD,CAAd;AACD,GAFD,EAZ8H,CAe9H;;AACA,MAAI,CAACX,WAAW,CAACc,OAAO,CAACE,KAAT,EAAgBF,OAAO,CAACG,MAAxB,CAAZ,IAA+CZ,IAAI,CAACa,QAAL,GAAgB,CAAnE,EAAsE;AACpE,QAAMC,IAAI,GAAGb,SAAH,WAAGA,SAAH,GAAgBP,QAAQ,CAACqB,iBAAT,CAA2BjB,UAAU,CAACK,KAAX,CAAiBD,QAAjB,CAA0BI,GAArD,CAA1B;AACA,QAAMU,GAAG,GAAGtB,QAAQ,CAACqB,iBAAT,CAA2BhB,KAAK,CAACO,GAAjC,EAAsCQ,IAAtC,CAAZ;AACAL,IAAAA,OAAO,CAACE,KAAR,GAAgBK,GAAhB,oBAAgBA,GAAG,CAAEC,WAArB;AACAR,IAAAA,OAAO,CAACG,MAAR,GAAiBI,GAAjB,oBAAiBA,GAAG,CAAEE,YAAtB;AACD;;AACD,SAAOpB,UAAU,CAACqB,OAAX,CAAmB1B,QAAQ,CAAC2B,YAA5B,EAA0CrB,KAAK,CAACO,GAAhD,EAAqD;AAC1DN,IAAAA,IAAI,EAAES;AADoD,GAArD,CAAP;AAGD","sourcesContent":["import { Controller, Inline, Commands, domUtils } from '@ali/4ever-cangjie';\nimport type { default as Image } from '../../mo/models';\nimport { isValidSize } from '../utils/aslService';\n\nconst injectionKeys = [\n  'isImageCropping',\n  'uploadPercent',\n  'isError',\n  'isSettingBorder',\n];\n\nexport default function updateInlineImage(controller: Controller, image: Inline, data: Inline['data'], container?: HTMLElement) {\n  if (!image) {\n    return controller;\n  }\n  const { document } = controller.value;\n  const path = document.getPath(image.key);\n  const node = document.getNodeByPath(path);\n  if (!node) return controller;\n  const newData = {\n    ...(node as Image)?.data,\n    ...data,\n  };\n  injectionKeys.forEach((key) => {\n    delete newData[key];\n  });\n  // 更新 rotation 的时候，若宽或高未落库，会影响后续计算\n  if (!isValidSize(newData.width, newData.height) && data.rotation > 0) {\n    const root = container ?? domUtils.findDOMNodeSafely(controller.value.document.key);\n    const img = domUtils.findDOMNodeSafely(image.key, root);\n    newData.width = img?.clientWidth;\n    newData.height = img?.clientHeight;\n  }\n  return controller.command(Commands.setNodeByKey, image.key, {\n    data: newData,\n  });\n}\n"],"file":"updateInlineImage.js"}