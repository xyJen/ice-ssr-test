import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import Image from "./components/image";
import isParentClickable from "./utils/isParentClickable";
export default /*#__PURE__*/React.forwardRef(function (props, ref) {
  var node = props.node,
      onLoad = props.onLoad,
      controller = props.controller,
      imageConfig = props.imageConfig,
      readonly = props.readonly,
      isSelected = props.isSelected,
      rest = _objectWithoutPropertiesLoose(props, ["node", "onLoad", "controller", "imageConfig", "readonly", "isSelected"]);

  var previewImage = imageConfig.previewImage;
  var shouldZoom = React.useRef(true);

  var _React$useState = React.useState(false),
      isLoaded = _React$useState[0],
      setIsLoaded = _React$useState[1];

  var data = node.data;
  var src = data.src;
  var handleZoomImage = React.useCallback(function (event) {
    var isSelectingNode = controller.query('isSelectingNode');

    if (isParentClickable(controller, node) || isSelectingNode) {
      return;
    } // 非只读的预览模式，点击可以放大


    var isQuickPreview = controller.query('isQuickPreview');

    if (typeof previewImage === 'function' && shouldZoom.current && (readonly || isSelected || isQuickPreview) && isLoaded) {
      previewImage(src, node);
    }
  }, [controller, node, previewImage, readonly, isSelected, isLoaded, src]);
  var handlers = React.useMemo(function () {
    return {
      onTouchEnd: handleZoomImage,
      onTouchStart: function onTouchStart() {
        var isSelectingNode = controller.query('isSelectingNode');
        shouldZoom.current = !isSelectingNode;
      },
      onTouchMove: function onTouchMove() {
        shouldZoom.current = false;
      },
      onClick: function onClick(event) {
        if (!isParentClickable(controller, node)) {
          event.preventDefault();
        }
      }
    };
  }, [handleZoomImage, controller, node]);
  var handleOnLoad = React.useCallback(function () {
    setIsLoaded(true);

    if (typeof onLoad === 'function') {
      onLoad();
    }
  }, [src, onLoad]);
  return /*#__PURE__*/_createElement(Image, _extends({}, rest, {
    ref: ref,
    node: node,
    controller: controller,
    onLoad: handleOnLoad,
    imageConfig: imageConfig
  }, handlers, {
    isMobile: true
  }));
});
//# sourceMappingURL=mobile.js.map