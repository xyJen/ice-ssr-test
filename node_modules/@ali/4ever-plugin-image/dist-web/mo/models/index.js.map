{"version":3,"sources":["../../../../src/mo/models/index.ts"],"names":["Inline","ELEMENT_TYPE","Image","create","properties","Error","isImage","type","TYPE","maybeImage","isInline"],"mappings":";;AAAA,SAASA,MAAT,QAA+C,oBAA/C;AAEA,SAASC,YAAT;;IAmCqBC,K;;;;;;;QAGZC,M,GAAP,gBAAcC,UAAd,EAA4D;AAC1D,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,QAAIH,KAAK,CAACI,OAAN,CAAcF,UAAd,CAAJ,EAA+B;AAC7B,aAAOA,UAAP;AACD;;AACD,mBAAaD,MAAb,yBACKC,UADL;AAEEG,MAAAA,IAAI,EAAEL,KAAK,CAACM;AAFd;AAID,G;;QAEMF,O,GAAP,iBAAeG,UAAf,EAAqD;AACnD,WAAOT,MAAM,CAACU,QAAP,CAAgBD,UAAhB,KAA+BA,UAAU,CAACF,IAAX,KAAoBL,KAAK,CAACM,IAAhE;AACD,G;;;EAlBgCR,M;;AAAdE,K,CACZM,I,GAAOP,Y;SADKC,K","sourcesContent":["import { Inline, InlineProperties, Data } from '@ali/4ever-cangjie';\nimport type { MoInterfaces } from '@ali/4ever-cangjie';\nimport { ELEMENT_TYPE } from '../../utils/meta';\n\nexport interface ImageData extends Data {\n  readonly src?: string;\n  readonly width?: number;\n  readonly height?: number;\n  readonly outline?: {\n    readonly width?: number;\n    readonly type?: string;\n    readonly color?: string;\n  };\n  readonly rectClip?: {\n    readonly right?: number;\n    readonly left?: number;\n    readonly top?: number;\n    readonly bottom?: number;\n  };\n  readonly rotation?: number;\n  readonly radius?: number;\n  readonly shadow?: string;\n  readonly extraData?: any;\n\n  // NOTE: 目前无消费 name & opacity & lockRatio\n  readonly name?: string;\n  readonly size?: number;\n  readonly opacity?: number;\n  readonly lockRatio?: number;\n  readonly wrap?: MoInterfaces.WrapPr.WrapPr;\n}\n\nexport interface ImageProperties {\n  data?: ImageData;\n  nodes?: InlineProperties['nodes'];\n}\n\nexport default class Image extends Inline {\n  static TYPE = ELEMENT_TYPE;\n\n  static create(properties: Image | ImageProperties | string) {\n    if (typeof properties === 'string') {\n      throw new Error('`Image.create` does not accept string');\n    }\n    if (Image.isImage(properties)) {\n      return properties;\n    }\n    return super.create({\n      ...properties,\n      type: Image.TYPE,\n    }) as Image;\n  }\n\n  static isImage(maybeImage: any): maybeImage is Image {\n    return Inline.isInline(maybeImage) && maybeImage.type === Image.TYPE;\n  }\n}\n"],"file":"index.js"}