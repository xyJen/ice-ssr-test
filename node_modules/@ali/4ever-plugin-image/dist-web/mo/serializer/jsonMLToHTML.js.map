{"version":3,"sources":["../../../../src/mo/serializer/jsonMLToHTML.tsx"],"names":["React","getTagName","getAttributes","sanitizeUrl","Image","props","src","style","path","config","rest","protocolAllowList","toString","name","match","node","convert","width","height","opacity","outline","border","color"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAEEC,UAFF,EAGEC,aAHF,EAIEC,WAJF,QAKO,kBALP;;AAuBA,IAAMC,KAA2B,GAAG,SAA9BA,KAA8B,CAACC,KAAD,EAA+B;AAAA,MACzDC,GADyD,GACnBD,KADmB,CACzDC,GADyD;AAAA,MACpDC,KADoD,GACnBF,KADmB,CACpDE,KADoD;AAAA,MAC7CC,IAD6C,GACnBH,KADmB,CAC7CG,IAD6C;AAAA,MACvCC,MADuC,GACnBJ,KADmB,CACvCI,MADuC;AAAA,MAC5BC,IAD4B,iCACnBL,KADmB;;AAEjE,sBACE;AAAK,IAAA,GAAG,EAAEF,WAAW,CAACG,GAAD,EAAMG,MAAN,oBAAMA,MAAM,CAAEE,iBAAd,CAArB;AAAuD,IAAA,KAAK,EAAEJ,KAA9D;AAAqE,IAAA,GAAG,EAAEC,IAAI,CAACI,QAAL;AAA1E,KAA+FF,IAA/F,EADF;AAGD,CALD;;AAOA,gBAAe,UAACD,MAAD;AAAA,SAA6C;AAC1DI,IAAAA,IAAI,EAAE,KADoD;AAG1DC,IAAAA,KAH0D,iBAGpDC,IAHoD,EAG7B;AAC3B,aAAOd,UAAU,CAACc,IAAD,CAAV,KAAqB,KAA5B;AACD,KALyD;AAO1DC,IAAAA,OAP0D,mBAOlDD,IAPkD,EAOpCP,IAPoC,EAOM;AAC9D;AAD8D,2BAEbN,aAAa,CAACa,IAAD,CAFA;AAAA,UAEtDT,GAFsD,kBAEtDA,GAFsD;AAAA,UAEjDW,KAFiD,kBAEjDA,KAFiD;AAAA,UAE1CC,MAF0C,kBAE1CA,MAF0C;AAAA,UAElCC,OAFkC,kBAElCA,OAFkC;AAAA,UAEzBC,OAFyB,kBAEzBA,OAFyB;;AAG9D,UAAIC,MAAJ;;AAEA,UAAID,OAAO,IAAIA,OAAO,CAACH,KAAvB,EAA8B;AAC5BI,QAAAA,MAAM,GAAMD,OAAO,CAACH,KAAd,kBAA+BG,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACE,KAAxB,GAAgC,SAA/D,CAAN;AACD;;AAED,UAAI,CAAChB,GAAL,EAAU,OAAO,IAAP;AAEV,0BACE,eAAC,KAAD;AACE,QAAA,GAAG,EAAEA,GADP;AAEE,QAAA,KAAK,EAAE;AACLW,UAAAA,KAAK,EAALA,KADK;AACEC,UAAAA,MAAM,EAANA,MADF;AACUC,UAAAA,OAAO,EAAPA,OADV;AACmBE,UAAAA,MAAM,EAANA;AADnB,SAFT;AAKE,QAAA,IAAI,EAAEb,IALR;AAME,QAAA,MAAM,EAAEC;AANV,QADF;AAUD;AA5ByD,GAA7C;AAAA,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  JsonML,\n  getTagName,\n  getAttributes,\n  sanitizeUrl,\n} from '@ali/4ever-utils';\nimport {\n  JsonMLToHTMLRule\n} from '@ali/4ever-cangjie';\nimport type { ImageConfig } from '../../utils/types';\n\ntype ImageProps = {\n  src: string;\n  path: number[];\n  style: {\n    width: number;\n    height: number;\n    opacity?: number;\n    border?: string\n  };\n  config?: ImageConfig;\n};\n\nconst Image: React.FC<ImageProps> = (props): React.ReactElement => {\n  const { src, style, path, config, ...rest } = props;\n  return (\n    <img src={sanitizeUrl(src, config?.protocolAllowList)} style={style} key={path.toString()} {...rest} />\n  );\n};\n\nexport default (config?: ImageConfig): JsonMLToHTMLRule => ({\n  name: 'img',\n\n  match(node: JsonML): boolean {\n    return getTagName(node) === 'img';\n  },\n\n  convert(node: JsonML, path: number[]): React.ReactElement | null{\n    // @ts-ignore\n    const { src, width, height, opacity, outline } = getAttributes(node);\n    let border: string | undefined;\n\n    if (outline && outline.width) {\n      border = `${outline.width}px solid ${outline.color ? outline.color : '#000000'}`;\n    }\n\n    if (!src) return null;\n\n    return (\n      <Image\n        src={src}\n        style={{\n          width, height, opacity, border,\n        }}\n        path={path}\n        config={config}\n      />\n    );\n  },\n});\n"],"file":"jsonMLToHTML.js"}