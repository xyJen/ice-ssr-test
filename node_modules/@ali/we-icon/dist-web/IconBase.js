import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useContext } from 'react';
import styled, { keyframes } from 'styled-components';
import { ToolbarIconContext } from "./context";
var loadingCircle = /*#__PURE__*/keyframes(["100%{transform:rotate(360deg);}"]);
var Weicon = /*#__PURE__*/styled.span(["display:inline-block;color:inherit;font-style:normal;line-height:0;text-align:center;text-transform:none;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;outline:none;font-size:16px;> *{line-height:1;}> svg{display:inline-block;}::before{display:none;}> .weicon-icon{display:block;}> .weicon[tabindex]{cursor:pointer;}> .weicon-spin::before,> .weicon-spin{display:inline-block;animation:", " 1s infinite linear;}"], loadingCircle); // Icon 暴露给应用层的接口

export var svgDefaultProps = {
  width: '1em',
  height: '1em',
  fill: 'currentColor',
  'aria-hidden': true,
  focusable: false
};
export var IconBase = function IconBase(icon) {
  var name = icon.name,
      pathNormal = icon.path,
      pathLarge = icon.pathLarge,
      pathColors = icon.pathColors,
      className = icon.className,
      onClick = icon.onClick,
      onMouseDown = icon.onMouseDown,
      spin = icon.spin,
      style = icon.style,
      rotate = icon.rotate,
      tabIndex = icon.tabIndex,
      title = icon.title,
      testid = icon.testid,
      disabled = icon.disabled,
      size = icon.size,
      restProps = _objectWithoutPropertiesLoose(icon, ["name", "path", "pathLarge", "pathColors", "className", "onClick", "onMouseDown", "spin", "style", "rotate", "tabIndex", "title", "testid", "disabled", "size"]);

  var classString = "weicon weicon-" + name + " " + (className || ''); // TODO: 不懂为什么 icon 要跟 toolbar 耦合

  var _useContext = useContext(ToolbarIconContext),
      toolbarSize = _useContext.size; // prop.size 优先


  var iconSize = size || toolbarSize;
  var svgClassString = '';

  if (!!spin || name === 'loading' || name === 'LoadingNormal') {
    svgClassString = 'weicon-spin';
  }

  var rotateStyle = rotate ? {
    msTransform: "rotate(" + rotate + "deg)",
    transform: "rotate(" + rotate + "deg)"
  } : {};
  var svgStyle = Object.assign(rotateStyle, style, disabled ? {
    opacity: 0.35
  } : {});
  var iconTabIndex = tabIndex;

  if (iconTabIndex === undefined && onClick) {
    iconTabIndex = -1;
  }

  var path = iconSize === 'large' && pathLarge ? pathLarge : pathNormal;
  var viewBox = iconSize === 'large' && pathLarge ? '0 0 24 24' : '0 0 20 20';
  var pathes = null;

  if (typeof path === 'string') {
    pathes = /*#__PURE__*/React.createElement("path", {
      d: path
    });
  } else if (path instanceof Array) {
    // eslint-disable-next-line react/no-array-index-key
    pathes = path.map(function (p, index) {
      return /*#__PURE__*/React.createElement("path", {
        d: p,
        key: index,
        style: {
          fill: pathColors && pathColors[index] ? pathColors[index] === '#171A1D' ? 'inherit' : pathColors[index] : 'inherit'
        }
      });
    });
  }

  var iconNode = /*#__PURE__*/React.createElement(Weicon, _extends({
    role: "img",
    "aria-label": name,
    "data-testid": testid ? "Icon_" + testid : undefined
  }, restProps, {
    tabIndex: iconTabIndex,
    className: classString
  }), /*#__PURE__*/React.createElement("svg", _extends({}, svgDefaultProps, {
    viewBox: viewBox,
    className: svgClassString,
    style: svgStyle,
    onClick: onClick,
    onMouseDown: onMouseDown
  }), pathes));
  return iconNode;
};