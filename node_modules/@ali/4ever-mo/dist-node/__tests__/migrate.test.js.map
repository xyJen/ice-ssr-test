{"version":3,"sources":["../../../src/__tests__/migrate.test.tsx"],"names":["describe","migrations","prevVersion","nextVersion","upgrade","document","set","data","vv","downgrade","test","corrections","cp","JSON","parse","ok","slice","src","moSerializer","nodeToJsonML","KEY_OF_VERSION","stringify","targetVersion","expected","expect","toEqual","srcCp","toBe","onError","jest","fn","Error","toBeCalledWith","code","MigrateErrorCode","Unknown","message","anything","MissingMigrationError","migrated","not","toBeCalled","toJSON","algs","count","migration","documentV1","documentV2","upgraded","downgraded"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@ali/4ever-dev-test';\nimport { Document } from '@ali/4ever-cangjie';\nimport { getAttributes, JsonML } from '@ali/4ever-utils';\nimport { moSerializer } from '..';\nimport migrate, { MissingMigrationError } from '../migrate';\nimport { MigrateAlg, MigrateErrorCode, Migration } from '../type';\nimport { KEY_OF_VERSION } from '../version';\nimport createMigration from '../migrations/createMigration';\n\ndescribe('#migrate', () => {\n  const migrations: Migration[] = [\n    {\n      prevVersion: 1,\n      nextVersion: 2,\n      upgrade: (document: Document) => {\n        return document.set('data', { ...document.data, vv: 2 });\n      },\n      downgrade: (document: Document) => {\n        return document.set('data', { ...document.data, vv: 1 });\n      },\n    },\n    {\n      prevVersion: 2,\n      nextVersion: 3,\n      upgrade: (document: Document) => {\n        return document.set('data', { ...document.data, vv: 3 });\n      },\n      downgrade: (document: Document) => {\n        return document.set('data', { ...document.data, vv: 2 });\n      },\n    },\n  ];\n\n  test('逐版本升级模型', () => {\n    const corrections = [\n      (cp: string | JsonML) => {\n        if (typeof cp === 'string') {\n          return JSON.parse(cp) as JsonML;\n        }\n        return cp;\n      },\n      (cp: JsonML) => {\n        const data = getAttributes(cp);\n        if (!data.ok) {\n          return [cp[0], { ...data, ok: true }, ...cp.slice(2)] as JsonML;\n        }\n        return cp;\n      },\n    ];\n\n    const src = moSerializer.nodeToJsonML(\n      ((\n        <document data={{ [KEY_OF_VERSION]: 1 }}>\n          <block type=\"paragraph\">Hello</block>\n        </document>\n      ) as unknown) as Document,\n    );\n\n    const cp = migrate({\n      src: JSON.stringify(src),\n      migrations,\n      corrections,\n      targetVersion: 3,\n    });\n\n    const expected = moSerializer.nodeToJsonML(\n      ((\n        <document data={{ [KEY_OF_VERSION]: 3, vv: 3, ok: true }}>\n          <block type=\"paragraph\">Hello</block>\n        </document>\n      ) as unknown) as Document,\n    );\n\n    expect(cp).toEqual(expected);\n  });\n\n  test('逐版本降级模型', () => {\n    const src = moSerializer.nodeToJsonML(\n      ((\n        <document data={{ [KEY_OF_VERSION]: 3 }}>\n          <block type=\"paragraph\">Hello</block>\n        </document>\n      ) as unknown) as Document,\n    );\n\n    const cp = migrate({\n      src,\n      migrations,\n      corrections: [],\n      targetVersion: 1,\n    });\n\n    const expected = moSerializer.nodeToJsonML(\n      ((\n        <document data={{ [KEY_OF_VERSION]: 1, vv: 1 }}>\n          <block type=\"paragraph\">Hello</block>\n        </document>\n      ) as unknown) as Document,\n    );\n\n    expect(cp).toEqual(expected);\n  });\n\n  test('版本未变更时，不迁移', () => {\n    // 缺失版本号为 1\n    const srcCp = ['root'];\n    const cp = migrate({\n      src: srcCp,\n      migrations,\n      corrections: [],\n      targetVersion: 1,\n    });\n    expect(cp).toBe(srcCp);\n  });\n\n  test('遇到异常时，中断迁移', () => {\n    const onError = jest.fn();\n    const srcCp = ['root', { [KEY_OF_VERSION]: 1 }];\n    const cp = migrate({\n      src: srcCp,\n      migrations: [\n        {\n          prevVersion: 1,\n          nextVersion: 2,\n          upgrade: (cp) => {\n            throw Error('Bomb!');\n          },\n          downgrade: (cp) => cp,\n        },\n      ],\n      corrections: [],\n      targetVersion: 2,\n      onError,\n    });\n    expect(cp).toBe(srcCp);\n    expect(onError).toBeCalledWith({\n      code: MigrateErrorCode.Unknown,\n      message: expect.anything(),\n    });\n  });\n\n  test('缺失迁移脚本时，抛出异常', () => {\n    const onError = jest.fn();\n    const srcCp = ['root', { [KEY_OF_VERSION]: 1 }];\n    const cp = migrate({\n      src: srcCp,\n      migrations: [],\n      corrections: [],\n      targetVersion: 2,\n      onError,\n    });\n    expect(cp).toBe(srcCp);\n    expect(onError).toBeCalledWith(MissingMigrationError);\n  });\n\n  test('初始版本允许无迁移脚本', () => {\n    const onError = jest.fn();\n    const src = moSerializer.nodeToJsonML(\n      ((\n        <document data={{ [KEY_OF_VERSION]: -1 }}>\n          <block type=\"paragraph\">Hello</block>\n        </document>\n      ) as unknown) as Document,\n    );\n    const migrated = migrate({\n      src,\n      migrations: [],\n      corrections: [],\n      targetVersion: 1,\n      onError,\n    });\n    const expected = moSerializer.nodeToJsonML(\n      ((\n        <document data={{ [KEY_OF_VERSION]: 1 }}>\n          <block type=\"paragraph\">Hello</block>\n        </document>\n      ) as unknown) as Document,\n    );\n\n    expect(migrated).toEqual(expected);\n    expect(onError).not.toBeCalled();\n  });\n\n  test('支持缺失版本号的 CP 升级', () => {\n    const src = moSerializer.nodeToJsonML(\n      ((\n        <document>\n          <block type=\"paragraph\">Hello</block>\n        </document>\n      ) as unknown) as Document,\n    );\n\n    const cp = migrate({\n      src,\n      migrations,\n      corrections: [],\n      targetVersion: 2,\n    });\n\n    const expected = moSerializer.nodeToJsonML(\n      ((\n        <document data={{ [KEY_OF_VERSION]: 2, vv: 2 }}>\n          <block type=\"paragraph\">Hello</block>\n        </document>\n      ) as unknown) as Document,\n    );\n\n    expect(cp).toEqual(expected);\n  });\n\n  test('若 src 为内存模型，则返回升级后的内存模型', () => {\n    const document = ((\n      <document data={{ [KEY_OF_VERSION]: 1 }}>\n        <block type=\"paragraph\">Hello</block>\n      </document>\n    ) as unknown) as Document;\n\n    const cp = migrate({\n      src: document,\n      migrations,\n      corrections: [],\n      targetVersion: 3,\n    }) as Document;\n\n    const expected = ((\n      <document data={{ [KEY_OF_VERSION]: 3, vv: 3 }}>\n        <block type=\"paragraph\">Hello</block>\n      </document>\n    ) as unknown) as Document;\n\n    expect(cp.toJSON()).toEqual(expected.toJSON());\n  });\n\n  test('若 src 为内存模型，且版本无变更，不迁移并返回内存模型', () => {\n    const document = ((\n      // 缺省版本为 1\n      <document>\n        <block type=\"paragraph\">Hello</block>\n      </document>\n    ) as unknown) as Document;\n\n    const cp = migrate({\n      src: document,\n      migrations,\n      corrections: [],\n      targetVersion: 1,\n    }) as Document;\n\n    expect(cp).toBe(document);\n  });\n});\n\ndescribe('#createMigration', () => {\n  test('自定义迁移算法将依次升级 cp', () => {\n    const algs: MigrateAlg[] = [\n      {\n        upgrade: (document) =>\n          document.set('data', {\n            ...document.data,\n            count: document.data.count + 1,\n          }),\n        downgrade: (document) =>\n          document.set('data', {\n            ...document.data,\n            count: document.data.count - 1,\n          }),\n      },\n      {\n        upgrade: (document) =>\n          document.set('data', {\n            ...document.data,\n            count: document.data.count + 1,\n          }),\n        downgrade: (document) =>\n          document.set('data', {\n            ...document.data,\n            count: document.data.count - 1,\n          }),\n      },\n    ];\n\n    const migration = createMigration(1, 2, algs);\n\n    const documentV1 = ((\n      <document data={{ count: 0 }}>\n        <block type=\"paragraph\">Hello</block>\n      </document>\n    ) as unknown) as Document;\n\n    const documentV2 = ((\n      <document data={{ count: 2 }}>\n        <block type=\"paragraph\">Hello</block>\n      </document>\n    ) as unknown) as Document;\n\n    const upgraded = migration.upgrade(documentV1);\n    const downgraded = migration.downgrade(documentV2);\n\n    expect(upgraded.toJSON()).toEqual(documentV2.toJSON());\n    expect(downgraded.toJSON()).toEqual(documentV1.toJSON());\n  });\n});\n"],"file":"migrate.test.js"}