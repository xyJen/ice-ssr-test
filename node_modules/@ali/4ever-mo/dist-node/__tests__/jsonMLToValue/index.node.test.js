"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var fs = _interopRequireWildcard(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _jestFileSnapshot = require("jest-file-snapshot");

const {
  Mo
} = require("../../../dist/server-mo.production.min.js");

expect.extend({
  toMatchFile: _jestFileSnapshot.toMatchFile
});
const fixturesPath = path.join(__dirname, 'fixtures');
const fixtures = fs.readdirSync(fixturesPath);
describe('Mo.jsonMLToValue', () => {
  fixtures.forEach(fixture => {
    it(fixture, () => {
      const fixturePath = path.join(fixturesPath, fixture);
      const inputPath = path.join(fixturePath, 'input.json');
      const outputPath = path.join(fixturePath, 'output.js');
      const strictOutputPath = path.join(fixturePath, 'strictOutput.js');
      let value;
      let strictValue;

      try {
        value = require(outputPath).default;
      } catch (error) {
        console.error('import output error', error);
      }

      try {
        strictValue = require(strictOutputPath).default;
      } catch (error) {// do nothing;
      }

      if (!value) {
        return;
      }

      const input = JSON.parse(fs.readFileSync(inputPath).toString());
      const generated = Mo.jsonMLToValue(input).toJSON();
      const expected = value.toJSON();
      expect(generated).toEqual(expected);
      const valueRegenerate = Mo.jsonMLToValue(Mo.valueToJsonML(value)).toJSON();
      expect(valueRegenerate).toEqual(expected);

      if (strictValue) {
        const expectedStrict = strictValue.toJSON();
        const generatedValidated = Mo.jsonMLToValue(input, {
          strict: true
        }).toJSON();
        expect(generatedValidated).toEqual(expectedStrict);
      }
    });
  });
});
//# sourceMappingURL=index.node.test.js.map