{"version":3,"sources":["../../../../src/__tests__/jsonMLToValue/index.node.test.ts"],"names":["Mo","require","expect","extend","toMatchFile","fixturesPath","path","join","__dirname","fixtures","fs","readdirSync","describe","forEach","fixture","it","fixturePath","inputPath","outputPath","strictOutputPath","value","strictValue","default","error","console","input","JSON","parse","readFileSync","toString","generated","jsonMLToValue","toJSON","expected","toEqual","valueRegenerate","valueToJsonML","expectedStrict","generatedValidated","strict"],"mappings":";;;;AAAA;;AACA;;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAASC,OAAO,6CAAtB;;AAEAC,MAAM,CAACC,MAAP,CAAc;AAAEC,EAAAA,WAAW,EAAXA;AAAF,CAAd;AAEA,MAAMC,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAArB;AACA,MAAMC,QAAQ,GAAGC,EAAE,CAACC,WAAH,CAAeN,YAAf,CAAjB;AAEAO,QAAQ,CAAC,kBAAD,EAAqB,MAAM;AACjCH,EAAAA,QAAQ,CAACI,OAAT,CAAkBC,OAAD,IAAa;AAC5BC,IAAAA,EAAE,CAACD,OAAD,EAAU,MAAM;AAChB,YAAME,WAAW,GAAGV,IAAI,CAACC,IAAL,CAAUF,YAAV,EAAwBS,OAAxB,CAApB;AACA,YAAMG,SAAS,GAAGX,IAAI,CAACC,IAAL,CAAUS,WAAV,EAAuB,YAAvB,CAAlB;AACA,YAAME,UAAU,GAAGZ,IAAI,CAACC,IAAL,CAAUS,WAAV,EAAuB,WAAvB,CAAnB;AACA,YAAMG,gBAAgB,GAAGb,IAAI,CAACC,IAAL,CAAUS,WAAV,EAAuB,iBAAvB,CAAzB;AACA,UAAII,KAAJ;AACA,UAAIC,WAAJ;;AACA,UAAI;AACFD,QAAAA,KAAK,GAAGnB,OAAO,CAACiB,UAAD,CAAP,CAAoBI,OAA5B;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACD;;AACD,UAAI;AACFF,QAAAA,WAAW,GAAGpB,OAAO,CAACkB,gBAAD,CAAP,CAA0BG,OAAxC;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc,CACd;AACD;;AAED,UAAI,CAACH,KAAL,EAAY;AAEV;AACD;;AAED,YAAMK,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWjB,EAAE,CAACkB,YAAH,CAAgBX,SAAhB,EAA2BY,QAA3B,EAAX,CAAd;AACA,YAAMC,SAAS,GAAG9B,EAAE,CAAC+B,aAAH,CAAiBN,KAAjB,EAAwBO,MAAxB,EAAlB;AACA,YAAMC,QAAQ,GAAGb,KAAK,CAACY,MAAN,EAAjB;AACA9B,MAAAA,MAAM,CAAC4B,SAAD,CAAN,CAAkBI,OAAlB,CAA0BD,QAA1B;AAEA,YAAME,eAAe,GAAGnC,EAAE,CAAC+B,aAAH,CAAiB/B,EAAE,CAACoC,aAAH,CAAiBhB,KAAjB,CAAjB,EAA0CY,MAA1C,EAAxB;AACA9B,MAAAA,MAAM,CAACiC,eAAD,CAAN,CAAwBD,OAAxB,CAAgCD,QAAhC;;AAEA,UAAIZ,WAAJ,EAAiB;AACf,cAAMgB,cAAc,GAAGhB,WAAW,CAACW,MAAZ,EAAvB;AACA,cAAMM,kBAAkB,GAAGtC,EAAE,CAAC+B,aAAH,CAAiBN,KAAjB,EAAwB;AAAEc,UAAAA,MAAM,EAAE;AAAV,SAAxB,EAA0CP,MAA1C,EAA3B;AACA9B,QAAAA,MAAM,CAACoC,kBAAD,CAAN,CAA2BJ,OAA3B,CAAmCG,cAAnC;AACD;AACF,KApCC,CAAF;AAqCD,GAtCD;AAuCD,CAxCO,CAAR","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { toMatchFile } from 'jest-file-snapshot';\n\nconst { Mo } = require('../../../dist/server-mo.production.min.js');\n\nexpect.extend({ toMatchFile });\n\nconst fixturesPath = path.join(__dirname, 'fixtures');\nconst fixtures = fs.readdirSync(fixturesPath);\n\ndescribe('Mo.jsonMLToValue', () => {\n  fixtures.forEach((fixture) => {\n    it(fixture, () => {\n      const fixturePath = path.join(fixturesPath, fixture);\n      const inputPath = path.join(fixturePath, 'input.json');\n      const outputPath = path.join(fixturePath, 'output.js');\n      const strictOutputPath = path.join(fixturePath, 'strictOutput.js');\n      let value;\n      let strictValue;\n      try {\n        value = require(outputPath).default;\n      } catch (error) {\n        console.error('import output error', error);\n      }\n      try {\n        strictValue = require(strictOutputPath).default;\n      } catch (error) {\n        // do nothing;\n      }\n\n      if (!value) {\n        console.log(`[test skipped]${fixture}`)\n        return;\n      }\n\n      const input = JSON.parse(fs.readFileSync(inputPath).toString());\n      const generated = Mo.jsonMLToValue(input).toJSON();\n      const expected = value.toJSON();\n      expect(generated).toEqual(expected);\n\n      const valueRegenerate = Mo.jsonMLToValue(Mo.valueToJsonML(value)).toJSON();\n      expect(valueRegenerate).toEqual(expected);\n\n      if (strictValue) {\n        const expectedStrict = strictValue.toJSON();\n        const generatedValidated = Mo.jsonMLToValue(input, { strict: true }).toJSON();\n        expect(generatedValidated).toEqual(expectedStrict);\n      }\n    });\n  });\n});\n"],"file":"index.node.test.js"}