"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _strictSchema = _interopRequireDefault(require("../strictSchema"));

var _everPluginTable = require("@ali/4ever-plugin-table");

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "table"
}, (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
  type: "tag"
}), (0, _everDevTest.jsx)("text", null))))));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "table"
}, (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "paragraph0"), (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
  type: "tag"
}), (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "paragraph1"))))));

describe('Mo.strictSchema', () => {
  describe('Table.strictSchema', () => {
    test('tableCell contains invalid child nodes', () => {
      const value = _ref;
      const plugins = [{
        schema: _strictSchema.default
      }];

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const cell = controller.value.document.findDescendant(_everPluginTable.TableCell.isTableCell);
      expect(cell.nodes.length).toBe(1);
      expect(cell.nodes[0].type).toBe('paragraph');
    });
    test('tableCell contains valid and invalid child nodes', () => {
      const value = _ref2;
      const plugins = [{
        schema: _strictSchema.default
      }];

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const cell = controller.value.document.findDescendant(_everPluginTable.TableCell.isTableCell);
      expect(cell.nodes.length).toBe(2);
      expect(cell.nodes[0].text).toBe('paragraph0');
      expect(cell.nodes[1].text).toBe('paragraph1');
    });
  });
});
//# sourceMappingURL=strictSchema.test.js.map