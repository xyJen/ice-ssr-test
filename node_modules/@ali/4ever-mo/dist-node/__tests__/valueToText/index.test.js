"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var fs = _interopRequireWildcard(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _jestFileSnapshot = require("jest-file-snapshot");

var _serializer = _interopRequireDefault(require("../serializer"));

var _index = require("../../index");

expect.extend({
  toMatchFile: _jestFileSnapshot.toMatchFile
});
const fixturesPath = path.join(__dirname, 'fixtures');
const fixtures = fs.readdirSync(fixturesPath);
describe('Mo.valueToText', () => {
  fixtures.forEach(fixture => {
    it(fixture, () => {
      const fixturePath = path.join(fixturesPath, fixture);
      const inputPath = path.join(fixturePath, 'input.js');
      const outputPath = path.join(fixturePath, 'output.js');
      let value;
      let expected;

      try {
        value = require(inputPath).default;
      } catch (error) {// do nothing;
      }

      try {
        expected = require(outputPath).default;
      } catch (error) {// do nothing;
      }

      const text = _serializer.default.valueToText(value);

      expect(text).toEqual(expected);
    });
  });
  it('image with locale', () => {
    const serializer = (0, _index.Serializer)({
      plugins: (0, _index.createMoPlugins)({
        image: {
          locale: {
            imageTitle: 'picture'
          }
        }
      })
    });
    const asl = ['root', {}, ['p', ['img', {
      src: 'xxx'
    }]]];
    const value = serializer.jsonMLToValue(asl, {
      normalize: false
    });
    const text = serializer.valueToText(value);
    const expected = '[picture]';
    expect(text).toEqual(expected);
  });
});
//# sourceMappingURL=index.test.js.map