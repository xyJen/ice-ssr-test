{"version":3,"sources":["../../../../src/__tests__/valueToText/index.test.ts"],"names":["expect","extend","toMatchFile","fixturesPath","path","join","__dirname","fixtures","fs","readdirSync","describe","forEach","fixture","it","fixturePath","inputPath","outputPath","value","expected","require","default","error","text","Mo","valueToText","toEqual","serializer","plugins","image","locale","imageTitle","asl","src","jsonMLToValue","normalize"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEAA,MAAM,CAACC,MAAP,CAAc;AAAEC,EAAAA,WAAW,EAAXA;AAAF,CAAd;AAEA,MAAMC,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAArB;AACA,MAAMC,QAAQ,GAAGC,EAAE,CAACC,WAAH,CAAeN,YAAf,CAAjB;AAEAO,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BH,EAAAA,QAAQ,CAACI,OAAT,CAAkBC,OAAD,IAAa;AAC5BC,IAAAA,EAAE,CAACD,OAAD,EAAU,MAAM;AAChB,YAAME,WAAW,GAAGV,IAAI,CAACC,IAAL,CAAUF,YAAV,EAAwBS,OAAxB,CAApB;AACA,YAAMG,SAAS,GAAGX,IAAI,CAACC,IAAL,CAAUS,WAAV,EAAuB,UAAvB,CAAlB;AACA,YAAME,UAAU,GAAGZ,IAAI,CAACC,IAAL,CAAUS,WAAV,EAAuB,WAAvB,CAAnB;AACA,UAAIG,KAAJ;AACA,UAAIC,QAAJ;;AACA,UAAI;AACFD,QAAAA,KAAK,GAAGE,OAAO,CAACJ,SAAD,CAAP,CAAmBK,OAA3B;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc,CACd;AACD;;AACD,UAAI;AACFH,QAAAA,QAAQ,GAAGC,OAAO,CAACH,UAAD,CAAP,CAAoBI,OAA/B;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc,CACd;AACD;;AAED,YAAMC,IAAI,GAAGC,oBAAGC,WAAH,CAAeP,KAAf,CAAb;;AACAjB,MAAAA,MAAM,CAACsB,IAAD,CAAN,CAAaG,OAAb,CAAqBP,QAArB;AACD,KAnBC,CAAF;AAoBD,GArBD;AAsBAL,EAAAA,EAAE,CAAC,mBAAD,EAAsB,MAAM;AAC5B,UAAMa,UAAU,GAAG,uBAAW;AAAEC,MAAAA,OAAO,EAAE,4BACvC;AACEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,UAAU,EAAE;AADN;AADH;AADT,OADuC;AAAX,KAAX,CAAnB;AAWA,UAAMC,GAAG,GAAG,CACV,MADU,EAEV,EAFU,EAGV,CACE,GADF,EAEE,CACE,KADF,EAEE;AACEC,MAAAA,GAAG,EAAE;AADP,KAFF,CAFF,CAHU,CAAZ;AAcA,UAAMf,KAAK,GAAGS,UAAU,CAACO,aAAX,CAAyBF,GAAzB,EAA8B;AAAEG,MAAAA,SAAS,EAAE;AAAb,KAA9B,CAAd;AACA,UAAMZ,IAAI,GAAGI,UAAU,CAACF,WAAX,CAAuBP,KAAvB,CAAb;AACA,UAAMC,QAAQ,GAAG,WAAjB;AACAlB,IAAAA,MAAM,CAACsB,IAAD,CAAN,CAAaG,OAAb,CAAqBP,QAArB;AACD,GA9BC,CAAF;AA+BD,CAtDO,CAAR","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { toMatchFile } from 'jest-file-snapshot';\nimport Mo from '../serializer';\nimport { Serializer, createMoPlugins } from '../../index';\n\nexpect.extend({ toMatchFile });\n\nconst fixturesPath = path.join(__dirname, 'fixtures');\nconst fixtures = fs.readdirSync(fixturesPath);\n\ndescribe('Mo.valueToText', () => {\n  fixtures.forEach((fixture) => {\n    it(fixture, () => {\n      const fixturePath = path.join(fixturesPath, fixture);\n      const inputPath = path.join(fixturePath, 'input.js');\n      const outputPath = path.join(fixturePath, 'output.js');\n      let value;\n      let expected;\n      try {\n        value = require(inputPath).default;\n      } catch (error) {\n        // do nothing;\n      }\n      try {\n        expected = require(outputPath).default;\n      } catch (error) {\n        // do nothing;\n      }\n      \n      const text = Mo.valueToText(value);\n      expect(text).toEqual(expected);\n    });\n  });\n  it('image with locale', () => {\n    const serializer = Serializer({ plugins: createMoPlugins(\n      {\n        image: {\n          locale: {\n            imageTitle: 'picture',\n          },\n        },\n      }\n    )});\n    \n    \n    const asl = [\n      'root',\n      {},\n      [\n        'p',\n        [\n          'img',\n          {\n            src: 'xxx',\n          }\n        ]\n      ],\n    ];\n    \n    const value = serializer.jsonMLToValue(asl, { normalize: false });\n    const text = serializer.valueToText(value);\n    const expected = '[picture]';\n    expect(text).toEqual(expected);\n  });\n});\n"],"file":"index.test.js"}