{"version":3,"sources":["../../../src/__tests__/helper.ts"],"names":["wrapTextToValue","text","Value","create","document","Document","nodes","Paragraph","wrapTextToASL","wrapStringToText","string","regenerateJsonML","jsonml","value","Mo","jsonMLToValue","valueToJsonML","regenerateValue","createValueWithBlocks","blocks","selection","key","createValueWithContent","content","Block","type"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEO,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAOC,mBAAMC,MAAN,CAAa;AAClBC,IAAAA,QAAQ,EAAEC,sBAASF,MAAT,CAAgB;AACxBG,MAAAA,KAAK,EAAE,CAACC,+BAAUJ,MAAV,CAAiB;AACvBG,QAAAA,KAAK,EAAE,CAACL,IAAD;AADgB,OAAjB,CAAD;AADiB,KAAhB;AADQ,GAAb,CAAP;AAOD;;AAEM,SAASO,aAAT,CAAuBP,IAAvB,EAA6B;AAClC,SAAO,CAAC,MAAD,EAAS,EAAT,EACL,CAAC,GAAD,EAAM,EAAN,EAAUA,IAAV,CADK,CAAP;AAGD;;AAEM,SAASQ,gBAAT,CAA0BC,MAA1B,EAAkC;AACvC,SAAO,CAAC,MAAD,EAAS;AAAE,iBAAa;AAAf,GAAT,EACL,CAAC,MAAD,EAAS;AAAE,iBAAa;AAAf,GAAT,EAAkCA,MAAlC,CADK,CAAP;AAGD;;AAEM,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;AACvC,QAAMC,KAAK,GAAGC,oBAAGC,aAAH,CAAiBH,MAAjB,CAAd;;AACA,SAAOE,oBAAGE,aAAH,CAAiBH,KAAjB,CAAP;AACD;;AAEM,SAASI,eAAT,CAAyBJ,KAAzB,EAAgC;AACrC,QAAMD,MAAM,GAAGE,oBAAGE,aAAH,CAAiBH,KAAjB,CAAf;;AACA,SAAOC,oBAAGC,aAAH,CAAiBH,MAAjB,CAAP;AACD;;AAEM,SAASM,qBAAT,CACLC,MADK,EAELC,SAFK,EAGL;AACA,SAAOlB,mBAAMC,MAAN,CAAa;AAClBC,IAAAA,QAAQ,EAAEC,sBAASF,MAAT,CAAgB;AACxBkB,MAAAA,GAAG,EAAE,KADmB;AAExBf,MAAAA,KAAK,EAAEa;AAFiB,KAAhB,CADQ;AAKlBC,IAAAA;AALkB,GAAb,CAAP;AAOD;;AAEM,SAASE,sBAAT,CACLC,OADK,EAELH,SAFK,EAGL;AACA,SAAOF,qBAAqB,CAC1B,CACEM,mBAAMrB,MAAN,CAAa;AACXkB,IAAAA,GAAG,EAAE,GADM;AAEXI,IAAAA,IAAI,EAAE,WAFK;AAGXnB,IAAAA,KAAK,EAAEiB;AAHI,GAAb,CADF,CAD0B,EAQ1BH,SAR0B,CAA5B;AAUD","sourcesContent":["import { Value, Document, Block, Selection, Text, Inline } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-plugin-paragraph';\nimport Mo from './serializer';\n\nexport function wrapTextToValue(text) {\n  return Value.create({\n    document: Document.create({\n      nodes: [Paragraph.create({\n        nodes: [text],\n      })],\n    }),\n  });\n}\n\nexport function wrapTextToASL(text) {\n  return ['root', {},\n    ['p', {}, text],\n  ];\n}\n\nexport function wrapStringToText(string) {\n  return ['span', { 'data-type': 'text' },\n    ['span', { 'data-type': 'leaf' }, string],\n  ];\n}\n\nexport function regenerateJsonML(jsonml) {\n  const value = Mo.jsonMLToValue(jsonml);\n  return Mo.valueToJsonML(value);\n}\n\nexport function regenerateValue(value) {\n  const jsonml = Mo.valueToJsonML(value);\n  return Mo.jsonMLToValue(jsonml);\n}\n\nexport function createValueWithBlocks(\n  blocks: Block[],\n  selection?: Selection,\n) {\n  return Value.create({\n    document: Document.create({\n      key: 'doc',\n      nodes: blocks,\n    }),\n    selection,\n  });\n}\n\nexport function createValueWithContent(\n  content: (Inline | Text)[],\n  selection?: Selection,\n) {\n  return createValueWithBlocks(\n    [\n      Block.create({\n        key: 'p',\n        type: 'paragraph',\n        nodes: content,\n      }),\n    ],\n    selection,\n  );\n}\n"],"file":"helper.js"}