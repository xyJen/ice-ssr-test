{"version":3,"sources":["../../../../src/__tests__/jsonMLToHTML/index.test.ts"],"names":["expect","extend","toMatchFile","fixturesPath","path","join","__dirname","fixtures","fs","readdirSync","describe","forEach","fixture","fixturePath","inputPath","outputPath","configPath","moConfigPath","config","conf","require","default","error","moConfig","plugins","unshift","mo","input","readFileSync","toString","jsonML","JSON","parse","it","jsonMLToHTML"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGAA,MAAM,CAACC,MAAP,CAAc;AAAEC,EAAAA,WAAW,EAAXA;AAAF,CAAd;AAEA,MAAMC,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAArB;AACA,MAAMC,QAAQ,GAAGC,EAAE,CAACC,WAAH,CAAeN,YAAf,CAAjB;AAEAO,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCH,EAAAA,QAAQ,CAACI,OAAT,CAAkBC,OAAD,IAAa;AAC5B,UAAMC,WAAW,GAAGT,IAAI,CAACC,IAAL,CAAUF,YAAV,EAAwBS,OAAxB,CAApB;AACA,UAAME,SAAS,GAAGV,IAAI,CAACC,IAAL,CAAUQ,WAAV,EAAuB,YAAvB,CAAlB;AACA,UAAME,UAAU,GAAGX,IAAI,CAACC,IAAL,CAAUQ,WAAV,EAAuB,aAAvB,CAAnB;AACA,UAAMG,UAAU,GAAGZ,IAAI,CAACC,IAAL,CAAUQ,WAAV,EAAuB,QAAvB,CAAnB;AACA,UAAMI,YAAY,GAAGb,IAAI,CAACC,IAAL,CAAUQ,WAAV,EAAuB,UAAvB,CAArB;AACA,QAAIK,MAAwC,GAAG,EAA/C;;AACA,QAAI;AACF;AACA,YAAMC,IAAI,GAAGC,OAAO,CAACJ,UAAD,CAApB;;AACAE,MAAAA,MAAM,GAAGC,IAAI,CAACE,OAAd;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc,CACd;AACD;;AACD,QAAIC,QAAkB,GAAG,EAAzB;;AACA,QAAI;AACF;AACA,YAAMJ,IAAI,GAAGC,OAAO,CAACH,YAAD,CAApB;;AACAM,MAAAA,QAAQ,GAAGJ,IAAI,CAACE,OAAhB;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc,CACd;AACD;;AACD,UAAME,OAAO,GAAG,4BAAgBD,QAAhB,CAAhB;AACAC,IAAAA,OAAO,CAACC,OAAR,CAAgB,sBAAUF,QAAV,CAAhB;AACA,UAAMG,EAAE,GAAG,uBAAG;AAAEF,MAAAA;AAAF,KAAH,CAAX;AAEA,UAAMG,KAAK,GAAGnB,EAAE,CAACoB,YAAH,CAAgBd,SAAhB,EAA2Be,QAA3B,EAAd;AACA,UAAMC,MAAM,GAAG,oBAAO,CAAC,MAAD,CAAP,EAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAX,CAApB,CAAf;AACAM,IAAAA,EAAE,CAACrB,OAAD,EAAU,MAAM;AAChBZ,MAAAA,MAAM,CAAC0B,EAAE,CAACQ,YAAH,CAAgBJ,MAAhB,EAAwBZ,MAAxB,CAAD,CAAN,CAAwChB,WAAxC,CAAoDa,UAApD;AACD,KAFC,CAAF;AAGD,GA/BD;AAgCD,CAjCO,CAAR","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { append } from '@ali/4ever-utils/src/jsonml';\nimport { toMatchFile } from 'jest-file-snapshot';\nimport { Serializer as Mo, createMoPlugins, TagPlugin } from '../../index';\nimport { JsonMLToHTMLRule, MoConfig } from '../../type';\n\nexpect.extend({ toMatchFile });\n\nconst fixturesPath = path.join(__dirname, 'fixtures');\nconst fixtures = fs.readdirSync(fixturesPath);\n\ndescribe('Mo.jsonMLToHTML', () => {\n  fixtures.forEach((fixture) => {\n    const fixturePath = path.join(fixturesPath, fixture);\n    const inputPath = path.join(fixturePath, 'input.json');\n    const outputPath = path.join(fixturePath, 'output.html');\n    const configPath = path.join(fixturePath, 'config');\n    const moConfigPath = path.join(fixturePath, 'moConfig');\n    let config: Record<string, JsonMLToHTMLRule> = {};\n    try {\n      // 尝试加载配置\n      const conf = require(configPath);\n      config = conf.default;\n    } catch (error) {\n      // do nothing;\n    }\n    let moConfig: MoConfig = {};\n    try {\n      // 尝试加载配置\n      const conf = require(moConfigPath);\n      moConfig = conf.default;\n    } catch (error) {\n      // do nothing;\n    }\n    const plugins = createMoPlugins(moConfig);\n    plugins.unshift(TagPlugin(moConfig));\n    const mo = Mo({ plugins });\n\n    const input = fs.readFileSync(inputPath).toString();\n    const jsonML = append(['root'], ...JSON.parse(input));\n    it(fixture, () => {\n      expect(mo.jsonMLToHTML(jsonML, config)).toMatchFile(outputPath);\n    });\n  });\n});\n"],"file":"index.test.js"}