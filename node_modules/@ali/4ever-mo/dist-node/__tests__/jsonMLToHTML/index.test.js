"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var fs = _interopRequireWildcard(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _jsonml = require("@ali/4ever-utils/src/jsonml");

var _jestFileSnapshot = require("jest-file-snapshot");

var _index = require("../../index");

expect.extend({
  toMatchFile: _jestFileSnapshot.toMatchFile
});
const fixturesPath = path.join(__dirname, 'fixtures');
const fixtures = fs.readdirSync(fixturesPath);
describe('Mo.jsonMLToHTML', () => {
  fixtures.forEach(fixture => {
    const fixturePath = path.join(fixturesPath, fixture);
    const inputPath = path.join(fixturePath, 'input.json');
    const outputPath = path.join(fixturePath, 'output.html');
    const configPath = path.join(fixturePath, 'config');
    const moConfigPath = path.join(fixturePath, 'moConfig');
    let config = {};

    try {
      // 尝试加载配置
      const conf = require(configPath);

      config = conf.default;
    } catch (error) {// do nothing;
    }

    let moConfig = {};

    try {
      // 尝试加载配置
      const conf = require(moConfigPath);

      moConfig = conf.default;
    } catch (error) {// do nothing;
    }

    const plugins = (0, _index.createMoPlugins)(moConfig);
    plugins.unshift((0, _index.TagPlugin)(moConfig));
    const mo = (0, _index.Serializer)({
      plugins
    });
    const input = fs.readFileSync(inputPath).toString();
    const jsonML = (0, _jsonml.append)(['root'], ...JSON.parse(input));
    it(fixture, () => {
      expect(mo.jsonMLToHTML(jsonML, config)).toMatchFile(outputPath);
    });
  });
});
//# sourceMappingURL=index.test.js.map