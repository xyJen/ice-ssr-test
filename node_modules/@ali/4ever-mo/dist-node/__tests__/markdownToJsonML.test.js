"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _serializer = _interopRequireDefault(require("./serializer"));

var _helper = require("./helper");

jest.mock('uuid/v4', () => () => '123');
describe('Mo.markdownToJsonML', () => {
  describe('默认情况下', () => {
    [{
      title: '空文本返回为空',
      input: '',
      expected: ['root']
    }, {
      title: '一行文本被处理成一个普通段落',
      input: 'Hello world!',
      expected: ['root', ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'Hello world!']]]]
    }, {
      title: '连续多行文本处理成一个段落',
      input: 'First line.\nSecond line.\nThird line.',
      expected: ['root', ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'First line.\nSecond line.\nThird line.']]]]
    }, {
      title: '间隔文本处理成多个段落',
      input: 'First line.\n\nSecond line.',
      expected: ['root', ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'First line.']]], ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'Second line.']]]]
    }, {
      title: 'IM 换行消息内容',
      input: 'ABC\r\nDEF',
      expected: ['root', ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'ABC\nDEF']]]]
    }, {
      title: 'IM 隔行消息内容1',
      input: 'ABC\n\rDEF',
      expected: ['root', ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'ABC']]], ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'DEF']]]]
    }, {
      title: 'IM 隔行消息内容2',
      input: 'ABC\r\rDEF',
      expected: ['root', ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'ABC']]], ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'DEF']]]]
    }, {
      title: '高亮文本',
      input: 'Hello ==world==!',
      expected: ['root', ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'Hello '], ['span', {
        'data-type': 'leaf',
        color: 'black',
        highlight: '#FFC000'
      }, 'world'], ['span', {
        'data-type': 'leaf'
      }, '!']]]]
    }, {
      title: 'HTML 代码',
      input: '<div style="color: red">HTML Tag</div>',
      expected: ['root', ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf',
        color: 'red'
      }, 'HTML Tag']]]]
    }, {
      title: '高亮块 :::',
      input: ':::\ntext\n:::',
      expected: ['root', ['container', {
        subType: 'colorBlocks',
        metadata: {
          showstk: false,
          bgcolor: undefined
        }
      }, ['p', (0, _helper.wrapStringToText)('text')]]]
    }, {
      title: '高亮块 ::: warning',
      input: '::: warning\ntext\n:::',
      expected: ['root', ['container', {
        subType: 'colorBlocks',
        metadata: {
          showstk: false,
          bgcolor: '#FEF8E8'
        }
      }, ['p', (0, _helper.wrapStringToText)('text')]]]
    }, {
      title: '高亮块 ::: danger',
      input: '::: danger\ntext\n:::',
      expected: ['root', ['container', {
        subType: 'colorBlocks',
        metadata: {
          showstk: false,
          bgcolor: '#FEF3F3'
        }
      }, ['p', (0, _helper.wrapStringToText)('text')]]]
    }, {
      title: '高亮块 ::: info',
      input: '::: info\ntext\n:::',
      expected: ['root', ['container', {
        subType: 'colorBlocks',
        metadata: {
          showstk: false,
          bgcolor: '#E8F2FE'
        }
      }, ['p', (0, _helper.wrapStringToText)('text')]]]
    }, {
      title: '高亮块 ::: success',
      input: '::: success\ntext\n:::',
      expected: ['root', ['container', {
        subType: 'colorBlocks',
        metadata: {
          showstk: false,
          bgcolor: '#ECF9F0'
        }
      }, ['p', (0, _helper.wrapStringToText)('text')]]]
    }, {
      title: '高亮块 ::: tips',
      input: '::: tips\ntext\n:::',
      expected: ['root', ['container', {
        subType: 'colorBlocks',
        metadata: {
          showstk: false,
          bgcolor: '#F5F6F7'
        }
      }, ['p', (0, _helper.wrapStringToText)('text')]]]
    }
    /** makrdown 依赖 dynamic import，先注释 */
    //{
    //  title: 'emoji :person_frowning:',
    //  input: ':person_frowning:',
    //  expected: [
    //    'root',
    //    ['p', wrapStringToText('\ud83d\ude4d')],
    //  ],
    //}
    ].forEach(({
      title,
      input,
      expected
    }) => {
      it(title, async () => {
        const jsonml = await _serializer.default.markdownToJsonML(input);
        expect(jsonml).toEqual(expected);
        expect(_serializer.default.jsonMLToValue(jsonml).toJSON()).toEqual(_serializer.default.jsonMLToValue(jsonml, {
          normalize: false
        }).toJSON());
      });
    });
  });
  describe('公式', () => {
    [{
      input: '$1+1=2$',
      expected: ['p', ['tag', {
        tagType: 'hetu',
        metadata: {
          id: '123',
          type: 'application/x-alidocs-plugin-formula',
          formula: '1+1=2'
        }
      }, (0, _helper.wrapStringToText)('')]]
    }, {
      input: '$$1+1=2$$',
      expected: ['p', {
        jc: 'center'
      }, (0, _helper.wrapStringToText)(''), ['tag', {
        tagType: 'hetu',
        metadata: {
          id: '123',
          type: 'application/x-alidocs-plugin-formula',
          formula: '1+1=2'
        }
      }, (0, _helper.wrapStringToText)('')], (0, _helper.wrapStringToText)('')]
    }].forEach(({
      input,
      expected
    }) => {
      it(input, async () => {
        const jsonml = await _serializer.default.markdownToJsonML(input);
        expect(jsonml).toEqual(['root', expected]);
      });
    });
  });
});
//# sourceMappingURL=markdownToJsonML.test.js.map