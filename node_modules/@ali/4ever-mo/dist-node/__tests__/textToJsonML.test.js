"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _serializer = _interopRequireDefault(require("./serializer"));

var _helper = require("./helper");

describe('Mo.textToJsonML', () => {
  [{
    title: '空文本被处理成一个空段落',
    input: '',
    expected: ['root', ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, '']]]]
  }, {
    title: '一行文本被处理成一个普通段落',
    input: 'Hello world!',
    expected: ['root', ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'Hello world!']]]]
  }, {
    title: '替换掉文本中的特殊字符',
    input: 'Hello\u00a0\u00a0world! Hello\u200c\u200cword! Hello\u200d\u200dword!',
    expected: ['root', ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'Hello  world! Helloword! Helloword!']]]]
  }, {
    title: '连续多行文本处理成多个段落',
    input: 'First line.\nSecond line.\nThird line.',
    expected: ['root', ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'First line.']]], ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'Second line.']]], ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'Third line.']]]]
  }, {
    title: '间隔文本处理成多个段落',
    input: 'First line.\n\nSecond line.',
    expected: ['root', ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'First line.']]], ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, '']]], ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'Second line.']]]]
  }, {
    title: 'IM 换行消息内容',
    input: 'ABC\r\nDEF',
    expected: ['root', ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'ABC']]], ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'DEF']]]]
  }, {
    title: 'IM 隔行消息内容1',
    input: 'ABC\n\rDEF',
    expected: ['root', ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'ABC']]], ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, '']]], ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'DEF']]]]
  }, {
    title: 'IM 隔行消息内容2',
    input: 'ABC\r\rDEF',
    expected: ['root', ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'ABC']]], ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, '']]], ['p', ['span', {
      'data-type': 'text'
    }, ['span', {
      'data-type': 'leaf'
    }, 'DEF']]]]
  }].forEach(({
    title,
    input,
    expected
  }, index) => {
    it(title, () => {
      const jsonml = _serializer.default.textToJsonML(input);

      expect(jsonml).toEqual(expected);
      expect(_serializer.default.jsonMLToValue(jsonml).toJSON()).toEqual(_serializer.default.jsonMLToValue(jsonml, {
        normalize: false
      }).toJSON());
    });
  });
  describe('link', () => {
    [{
      input: 'www.baidu.com',
      expected: ['p', (0, _helper.wrapStringToText)('www.baidu.com')]
    }, {
      input: 'http://www.baidu.com',
      expected: ['p', (0, _helper.wrapStringToText)(''), ['a', {
        href: 'http://www.baidu.com'
      }, (0, _helper.wrapStringToText)('http://www.baidu.com')], (0, _helper.wrapStringToText)('')]
    }, {
      input: 'dingtalk://www.baidu.com',
      expected: ['p', (0, _helper.wrapStringToText)(''), ['a', {
        href: 'dingtalk://www.baidu.com'
      }, (0, _helper.wrapStringToText)('dingtalk://www.baidu.com')], (0, _helper.wrapStringToText)('')]
    }, {
      input: '头http://www.baidu.com 尾',
      expected: ['p', (0, _helper.wrapStringToText)('头'), ['a', {
        href: 'http://www.baidu.com'
      }, (0, _helper.wrapStringToText)('http://www.baidu.com')], (0, _helper.wrapStringToText)(' 尾')]
    }, {
      input: 'Headwww.baidu.comTail',
      expected: ['p', ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, 'Headwww.baidu.comTail']]]
    }, {
      input: 'Head www.baidu.com Tail',
      expected: ['p', (0, _helper.wrapStringToText)('Head www.baidu.com Tail')]
    }].forEach(({
      input,
      expected
    }) => {
      it(input, () => {
        const jsonml = _serializer.default.textToJsonML(input);

        expect(jsonml).toEqual(['root', expected]);
        expect(_serializer.default.jsonMLToValue(jsonml).toJSON()).toEqual(_serializer.default.jsonMLToValue(jsonml, {
          normalize: false
        }).toJSON());
      });
    });
  });
});
//# sourceMappingURL=textToJsonML.test.js.map