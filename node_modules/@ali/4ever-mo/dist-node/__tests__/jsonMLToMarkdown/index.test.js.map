{"version":3,"sources":["../../../../src/__tests__/jsonMLToMarkdown/index.test.ts"],"names":["expect","extend","toMatchFile","fixturesPath","path","join","__dirname","fixtures","fs","readdirSync","describe","forEach","fixture","fixturePath","endsWith","inputPath","outputPath","mo","plugins","jsonml","JSON","parse","readFileSync","toString","it","markdown","jsonMLToMarkdown"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,MAAM,CAACC,MAAP,CAAc;AAAEC,EAAAA,WAAW,EAAXA;AAAF,CAAd;AAEA,MAAMC,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAArB;AACA,MAAMC,QAAQ,GAAGC,EAAE,CAACC,WAAH,CAAeN,YAAf,CAAjB;AAEAO,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCH,EAAAA,QAAQ,CAACI,OAAT,CAAiB,MAAMC,OAAN,IAAkB;AACjC,UAAMC,WAAW,GAAGT,IAAI,CAACC,IAAL,CAAUF,YAAV,EAAwBS,OAAxB,CAApB;AACA,QAAIC,WAAW,CAACC,QAAZ,CAAqB,OAArB,CAAJ,EAAmC;AACnC,UAAMC,SAAS,GAAGX,IAAI,CAACC,IAAL,CAAUQ,WAAV,EAAuB,YAAvB,CAAlB;AACA,UAAMG,UAAU,GAAGZ,IAAI,CAACC,IAAL,CAAUQ,WAAV,EAAuB,WAAvB,CAAnB;AACA,UAAMI,EAAE,GAAG,uBAAG;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAH,CAAX;AAEA,UAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWb,EAAE,CAACc,YAAH,CAAgBP,SAAhB,EAA2BQ,QAA3B,EAAX,CAAf;AAEAC,IAAAA,EAAE,CAACZ,OAAD,EAAU,YAAW;AACrB,YAAMa,QAAQ,GAAG,MAAMR,EAAE,CAACS,gBAAH,CAAoBP,MAApB,CAAvB;AACAnB,MAAAA,MAAM,CAACyB,QAAD,CAAN,CAAiBvB,WAAjB,CAA6Bc,UAA7B;AACD,KAHC,CAAF;AAID,GAbD;AAcD,CAfO,CAAR","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { toMatchFile } from 'jest-file-snapshot';\nimport { Serializer as Mo, createMoPlugins } from '../../index';\n\nexpect.extend({ toMatchFile });\n\nconst fixturesPath = path.join(__dirname, 'fixtures');\nconst fixtures = fs.readdirSync(fixturesPath);\n\ndescribe('Mo.htmlToMarkdown', () => {\n  fixtures.forEach(async(fixture) => {\n    const fixturePath = path.join(fixturesPath, fixture);\n    if (fixturePath.endsWith('_skip')) return;\n    const inputPath = path.join(fixturePath, 'input.json');\n    const outputPath = path.join(fixturePath, 'output.md');\n    const mo = Mo({ plugins: createMoPlugins() });\n\n    const jsonml = JSON.parse(fs.readFileSync(inputPath).toString());\n\n    it(fixture, async() => {\n      const markdown = await mo.jsonMLToMarkdown(jsonml);\n      expect(markdown).toMatchFile(outputPath);\n    });\n  });\n});\n"],"file":"index.test.js"}