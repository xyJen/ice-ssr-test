{"version":3,"sources":["../../../src/__tests__/schema.test.tsx"],"names":["emptyValue","describe","test","textLink","Inline","create","type","plugins","schema","controller","Controller","value","expect","query","toBe","cardLink","data","cardInfo","displayType"],"mappings":";;;;AAIA;;AACA;;AACA;;AANA;AAQA,MAAMA,UAAU,GAAG,oCAAuB,EAAvB,CAAnB;AAEAC,QAAQ,CAAC,WAAD,EAAc,MAAM;AAC1BA,EAAAA,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvBC,IAAAA,IAAI,CAAC,wCAAD,EAA2C,MAAM;AACnD,YAAMC,QAAQ,GAAGC,oBAAOC,MAAP,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd,CAAjB;;AACA,YAAMC,OAAO,GAAG,CAAC;AAAEC,QAAAA,MAAM,EAANA;AAAF,OAAD,CAAhB;;AACA,YAAMC,UAAU,GAAGC,wBAAWL,MAAX,CAAkB;AAAEM,QAAAA,KAAK,EAAEX,UAAT;AAAqBO,QAAAA;AAArB,OAAlB,CAAnB;;AACAK,MAAAA,MAAM,CAACH,UAAU,CAACI,KAAX,CAAiB,QAAjB,EAA2BV,QAA3B,CAAD,CAAN,CAA6CW,IAA7C,CAAkD,KAAlD;AACD,KALG,CAAJ;AAOAZ,IAAAA,IAAI,CAAC,oCAAD,EAAuC,MAAM;AAC/C,YAAMa,QAAQ,GAAGX,oBAAOC,MAAP,CAAc;AAC7BC,QAAAA,IAAI,EAAE,MADuB;AAE7BU,QAAAA,IAAI,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,WAAW,EAAE;AAAf;AAAZ;AAFuB,OAAd,CAAjB;;AAIA,YAAMX,OAAO,GAAG,CAAC;AAAEC,QAAAA,MAAM,EAANA;AAAF,OAAD,CAAhB;;AACA,YAAMC,UAAU,GAAGC,wBAAWL,MAAX,CAAkB;AAAEM,QAAAA,KAAK,EAAEX,UAAT;AAAqBO,QAAAA;AAArB,OAAlB,CAAnB;;AACAK,MAAAA,MAAM,CAACH,UAAU,CAACI,KAAX,CAAiB,QAAjB,EAA2BE,QAA3B,CAAD,CAAN,CAA6CD,IAA7C,CAAkD,IAAlD;AACD,KARG,CAAJ;AASD,GAjBO,CAAR;AAkBD,CAnBO,CAAR","sourcesContent":["/** @jsx jsx */\nimport * as React from 'react';\nimport { Value, Commands } from '@ali/4ever-cangjie';\nimport { jsx } from '@ali/4ever-dev-test';\nimport { Controller, Inline } from '@ali/4ever-cangjie';\nimport schema from '../schema';\nimport { createValueWithContent } from './helper';\n\nconst emptyValue = createValueWithContent([]);\n\ndescribe('Mo.schema', () => {\n  describe('isVoid', () => {\n    test('link with link displayType is not void', () => {\n      const textLink = Inline.create({ type: 'link' });\n      const plugins = [{ schema }];\n      const controller = Controller.create({ value: emptyValue, plugins });\n      expect(controller.query('isVoid', textLink)).toBe(false);\n    });\n\n    test('link with card displayType is void', () => {\n      const cardLink = Inline.create({\n        type: 'link',\n        data: { cardInfo: { displayType: 'card' } },\n      });\n      const plugins = [{ schema }];\n      const controller = Controller.create({ value: emptyValue, plugins });\n      expect(controller.query('isVoid', cardLink)).toBe(true);\n    });\n  });\n});\n"],"file":"schema.test.js"}