"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var fs = _interopRequireWildcard(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _jestFileSnapshot = require("jest-file-snapshot");

var _index = require("../../index");

expect.extend({
  toMatchFile: _jestFileSnapshot.toMatchFile
});
const fixturesPath = path.join(__dirname, 'fixtures');
const fixtures = fs.readdirSync(fixturesPath);
describe('Mo.htmlToJsonML', () => {
  fixtures.forEach(fixture => {
    const fixturePath = path.join(fixturesPath, fixture); // Inline Code灰度过程中，需跳过含有<code>标签的单测，全量后改回
    // 1.alignment-from-github
    // 2.code-from-html-jianshu
    // 3.inlineCode-from-yuque
    // 4.list-from-ata
    // 5.list-ul-from-blog
    // 如果ut文件夹文件夹以_skip结尾，则跳过该单测

    if (fixturePath.endsWith('_skip')) return;
    const inputPath = path.join(fixturePath, 'input.html');
    const outputPath = path.join(fixturePath, 'output.json');
    const configPath = path.join(fixturePath, 'config.json');
    const isConfigExists = fs.existsSync(configPath);
    let moConfig;

    if (isConfigExists) {
      moConfig = JSON.parse(fs.readFileSync(configPath).toString());
    }

    const mo = (0, _index.Serializer)({
      plugins: (0, _index.createMoPlugins)(moConfig)
    });
    const input = fs.readFileSync(inputPath).toString();
    it(fixture, () => {
      // Match snapshot
      const jsonML = mo.htmlToJsonML(input);
      const snapshot = JSON.stringify(jsonML, null, 2);
      expect(snapshot).toMatchFile(outputPath);
      const valueJsonWithoutNormalize = mo.jsonMLToValue(jsonML, {
        normalize: false
      }).toJSON(); // Should be normalized.

      expect(mo.jsonMLToValue(jsonML).toJSON()).toEqual(valueJsonWithoutNormalize); // Should be strictly validated.

      expect(mo.jsonMLToValue(jsonML, {
        strict: true
      }).toJSON()).toEqual(valueJsonWithoutNormalize);
    });
  });
});
//# sourceMappingURL=index.test.js.map