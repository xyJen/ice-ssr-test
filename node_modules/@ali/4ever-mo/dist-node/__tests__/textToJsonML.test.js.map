{"version":3,"sources":["../../../src/__tests__/textToJsonML.test.js"],"names":["describe","title","input","expected","forEach","index","it","jsonml","Mo","textToJsonML","expect","toEqual","jsonMLToValue","toJSON","normalize","href"],"mappings":"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","sourcesContent":["import Mo from './serializer';\nimport { wrapStringToText } from './helper';\n\ndescribe('Mo.textToJsonML', () => {\n  [{\n    title: '空文本被处理成一个空段落',\n    input: '',\n    expected: [\n      'root',\n      ['p',\n        ['span', { 'data-type': 'text' },\n          ['span', { 'data-type': 'leaf' }, ''],\n        ],\n      ],\n    ],\n  }, {\n    title: '一行文本被处理成一个普通段落',\n    input: 'Hello world!',\n    expected: [\n      'root',\n      ['p',\n        ['span', { 'data-type': 'text' },\n          ['span', { 'data-type': 'leaf' }, 'Hello world!'],\n        ],\n      ],\n    ],\n  }, {\n    title: '替换掉文本中的特殊字符',\n    input: 'Hello\\u00a0\\u00a0world! Hello\\u200c\\u200cword! Hello\\u200d\\u200dword!',\n    expected: [\n      'root',\n      ['p',\n        ['span', { 'data-type': 'text' },\n          ['span', { 'data-type': 'leaf' }, 'Hello  world! Helloword! Helloword!'],\n        ],\n      ],\n    ],\n  }, {\n    title: '连续多行文本处理成多个段落',\n    input: 'First line.\\nSecond line.\\nThird line.',\n    expected: [\n      'root',\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'First line.']]],\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'Second line.']]],\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'Third line.']]],\n    ],\n  }, {\n    title: '间隔文本处理成多个段落',\n    input: 'First line.\\n\\nSecond line.',\n    expected: [\n      'root',\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'First line.']]],\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, '']]],\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'Second line.']]],\n    ],\n  }, {\n    title: 'IM 换行消息内容',\n    input: 'ABC\\r\\nDEF',\n    expected: [\n      'root',\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'ABC']]],\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'DEF']]],\n    ],\n  }, {\n    title: 'IM 隔行消息内容1',\n    input: 'ABC\\n\\rDEF',\n    expected: [\n      'root',\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'ABC']]],\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, '']]],\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'DEF']]],\n    ],\n  }, {\n    title: 'IM 隔行消息内容2',\n    input: 'ABC\\r\\rDEF',\n    expected: [\n      'root',\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'ABC']]],\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, '']]],\n      ['p', ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'DEF']]],\n    ],\n  }].forEach(({ title, input, expected }, index) => {\n    it(title, () => {\n      const jsonml = Mo.textToJsonML(input);\n      expect(jsonml).toEqual(expected);\n\n      expect(Mo.jsonMLToValue(jsonml).toJSON())\n        .toEqual(Mo.jsonMLToValue(jsonml, { normalize: false }).toJSON());\n    });\n  });\n\n  describe('link', () => {\n    [{\n      input: 'www.baidu.com',\n      expected: [\n        'p',\n        wrapStringToText('www.baidu.com'),\n      ],\n    }, {\n      input: 'http://www.baidu.com',\n      expected: [\n        'p',\n        wrapStringToText(''),\n        ['a', { href: 'http://www.baidu.com' }, wrapStringToText('http://www.baidu.com')],\n        wrapStringToText(''),\n      ],\n    }, {\n      input: 'dingtalk://www.baidu.com',\n      expected: [\n        'p',\n        wrapStringToText(''),\n        ['a', { href: 'dingtalk://www.baidu.com' }, wrapStringToText('dingtalk://www.baidu.com')],\n        wrapStringToText(''),\n      ],\n    }, {\n      input: '头http://www.baidu.com 尾',\n      expected: [\n        'p',\n        wrapStringToText('头'),\n        ['a', { href: 'http://www.baidu.com' }, wrapStringToText('http://www.baidu.com')],\n        wrapStringToText(' 尾'),\n      ],\n    }, {\n      input: 'Headwww.baidu.comTail',\n      expected: [\n        'p',\n        ['span', { 'data-type': 'text' }, ['span', { 'data-type': 'leaf' }, 'Headwww.baidu.comTail']],\n      ],\n    }, {\n      input: 'Head www.baidu.com Tail',\n      expected: [\n        'p',\n        wrapStringToText('Head www.baidu.com Tail'),\n      ],\n    }].forEach(({ input, expected }) => {\n      it(input, () => {\n        const jsonml = Mo.textToJsonML(input);\n        expect(jsonml).toEqual(['root', expected]);\n\n        expect(Mo.jsonMLToValue(jsonml).toJSON())\n          .toEqual(Mo.jsonMLToValue(jsonml, { normalize: false }).toJSON());\n      });\n    });\n  });\n});\n"],"file":"textToJsonML.test.js"}