"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _migrate = _interopRequireDefault(require("../../migrate"));

const fixturesPath = _path.default.join(__dirname, 'fixtures');

const migrations = _fs.default.readdirSync(fixturesPath);

describe('migrations', () => {
  migrations.forEach(migration => {
    const migrationPath = _path.default.join(fixturesPath, migration);

    const algs = _fs.default.readdirSync(migrationPath);

    algs.forEach(alg => {
      const algPath = _path.default.join(migrationPath, alg);

      const downgradeAndUpgrade = _fs.default.readdirSync(algPath);

      describe(`${migration}`, () => {
        describe(`${alg}`, () => {
          downgradeAndUpgrade.forEach(downgradeOrUpgrade => {
            test(`${downgradeOrUpgrade}`, async () => {
              const dest = _path.default.join(algPath, downgradeOrUpgrade);

              const inputPath = _path.default.join(dest, 'input.json');

              const outputPath = _path.default.join(dest, 'output.json');

              const {
                default: src
              } = await Promise.resolve(`${inputPath}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
              const {
                default: expected
              } = await Promise.resolve(`${outputPath}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
              const {
                default: migr
              } = await Promise.resolve(`${_path.default.join(__dirname, `../../migrations/${migration}`)}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
              const [from, to] = migration.split('_').map(n => Number(n));
              const targetVersion = downgradeOrUpgrade === 'upgrade' ? to : from;
              const actual = (0, _migrate.default)({
                src,
                migrations: [migr],
                corrections: [],
                targetVersion,
                onError: e => {
                  console.error(e);
                }
              });
              expect(actual).toEqual(expected);
            });
          });
        });
      });
    });
  });
});
//# sourceMappingURL=index.test.js.map