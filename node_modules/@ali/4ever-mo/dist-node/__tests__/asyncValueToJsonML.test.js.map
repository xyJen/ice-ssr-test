{"version":3,"sources":["../../../src/__tests__/asyncValueToJsonML.test.tsx"],"names":["describe","test","value","count","controller","Controller","create","createMoPlugins","testAsync","valueToJsonML","match","node","type","convert","Error","asyncConvert","Promise","resolve","setTimeout","mo","plugins","jsonml","asyncValueToJsonML","expect","toEqual"],"mappings":";;AACA;;AACA;;AACA;;AAHA;AAMAA,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpCC,EAAAA,IAAI,CAAC,IAAD,EAAO,YAAY;AACrB,UAAMC,KAAK,GACT,qCACE,wCACE;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAwB,MAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAA9B,MADF,CADF,CADF;;AAQA,UAAMC,UAAU,GAAGC,wBAAWC,MAAX,CACjB;AAAEJ,MAAAA;AAAF,KADiB,CAAnB;;AAGA,UAAMK,eAAe,GAAG,sCAA0B;AAChDC,MAAAA,SAAS,EAAE,MAAM;AACf,eAAO;AACLC,UAAAA,aAAa,EAAE;AACbC,YAAAA,KAAK,EAAGC,IAAD,IAAU;AACf;AACA,qBAAOA,IAAI,CAACC,IAAL,KAAc,WAArB;AACD,aAJY;AAKbC,YAAAA,OAAO,EAAE,MAAM;AACb,oBAAMC,KAAK,CAAC,sBAAD,CAAX;AACD,aAPY;AAQbC,YAAAA,YAAY,EAAE,MAAOJ,IAAP,IAAgB;AAC5B,qBAAO,IAAIK,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,gBAAAA,UAAU,CAAC,MAAM;AACf;AACAD,kBAAAA,OAAO,CAAC,CAAC,WAAD,EAAc;AAAEd,oBAAAA,KAAK,EAAE;AAAT,mBAAd,CAAD,CAAP;AACD,iBAHS,EAGP,EAHO,CAAV;AAID,eALM,CAAP;AAMD;AAfY;AADV,SAAP;AAmBD;AArB+C,KAA1B,CAAxB;AAwBA,UAAMgB,EAAE,GAAG,uBAAW;AAAEC,MAAAA,OAAO,EAAEb,eAAe;AAA1B,KAAX,CAAX;AAEA,UAAMc,MAAM,GAAG,MAAMF,EAAE,CAACG,kBAAH,CAAsBlB,UAAU,CAACF,KAAjC,CAArB;AACAqB,IAAAA,MAAM,CAACF,MAAD,CAAN,CAAeG,OAAf,CAAuB,CAAC,MAAD,EAAS,EAAT,EACrB,CAAC,WAAD,EAAc;AAAErB,MAAAA,KAAK,EAAE;AAAT,KAAd,EAA4B,CAC1B,MAD0B,EAE1B;AACE,mBAAa;AADf,KAF0B,EAK1B,CACE,MADF,EAEE;AACE,mBAAa;AADf,KAFF,EAKE,EALF,CAL0B,CAA5B,CADqB,CAAvB;AAeD,GAtDG,CAAJ;AAuDD,CAxDO,CAAR","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@ali/4ever-dev-test';\nimport { Controller, Value } from '@ali/4ever-cangjie';\nimport { createCustomizedMoPlugins, Serializer, plugins } from '../index';\n\n\ndescribe('Mo.markdownToJsonML', () => {\n  test('公式', async () => {\n    const value = (\n      <value>\n        <document>\n          <block type=\"testAsync\" data={{ count: 0 }} />\n        </document>\n      </value>\n    ) as unknown as Value;\n  \n    const controller = Controller.create(\n      { value }\n    );\n    const createMoPlugins = createCustomizedMoPlugins({\n      testAsync: () => {\n        return {\n          valueToJsonML: {\n            match: (node) => {\n              // @ts-ignore\n              return node.type === 'testAsync';\n            },\n            convert: () => {\n              throw Error('should not be called');\n            },\n            asyncConvert: async (node) => {\n              return new Promise((resolve) => {\n                setTimeout(() => {\n                  // @ts-ignore\n                  resolve(['testAsync', { count: 1 }]);\n                }, 50);\n              });\n            }\n          }\n        }\n      }\n    });\n\n    const mo = Serializer({ plugins: createMoPlugins() });\n\n    const jsonml = await mo.asyncValueToJsonML(controller.value);\n    expect(jsonml).toEqual(['root', {},\n      ['testAsync', { count: 1 }, [\n        'span',\n        {\n          'data-type': 'text',\n        },\n        [\n          'span',\n          {\n            'data-type': 'leaf',\n          },\n          ''\n        ]\n      ]]\n    ]);\n  });\n});\n"],"file":"asyncValueToJsonML.test.js"}