{"version":3,"sources":["../../../../src/__tests__/valueToJsonML/index.test.ts"],"names":["expect","extend","toMatchFile","fixturesPath","path","join","__dirname","fixtures","fs","readdirSync","describe","forEach","fixture","it","fixturePath","inputPath","outputPath","value","require","default","error","expected","JSON","parse","readFileSync","toString","jsonml","Mo","valueToJsonML","toEqual","jsonml2"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEAA,MAAM,CAACC,MAAP,CAAc;AAAEC,EAAAA,WAAW,EAAXA;AAAF,CAAd;AAEA,MAAMC,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAArB;AACA,MAAMC,QAAQ,GAAGC,EAAE,CAACC,WAAH,CAAeN,YAAf,CAAjB;AAEAO,QAAQ,CAAC,kBAAD,EAAqB,MAAM;AACjCH,EAAAA,QAAQ,CAACI,OAAT,CAAkBC,OAAD,IAAa;AAC5BC,IAAAA,EAAE,CAACD,OAAD,EAAU,MAAM;AAChB,YAAME,WAAW,GAAGV,IAAI,CAACC,IAAL,CAAUF,YAAV,EAAwBS,OAAxB,CAApB;AACA,YAAMG,SAAS,GAAGX,IAAI,CAACC,IAAL,CAAUS,WAAV,EAAuB,UAAvB,CAAlB;AACA,YAAME,UAAU,GAAGZ,IAAI,CAACC,IAAL,CAAUS,WAAV,EAAuB,aAAvB,CAAnB;AACA,UAAIG,KAAJ;;AACA,UAAI;AACFA,QAAAA,KAAK,GAAGC,OAAO,CAACH,SAAD,CAAP,CAAmBI,OAA3B;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc,CACd;AACD;;AAED,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWf,EAAE,CAACgB,YAAH,CAAgBR,UAAhB,EAA4BS,QAA5B,EAAX,CAAjB;;AACA,YAAMC,MAAM,GAAGC,oBAAGC,aAAH,CAAiBX,KAAjB,CAAf;;AACAjB,MAAAA,MAAM,CAAC0B,MAAD,CAAN,CAAeG,OAAf,CAAuBR,QAAvB;AAEA,YAAMS,OAAO,GAAG,8BAAiBJ,MAAjB,CAAhB;AACA1B,MAAAA,MAAM,CAAC0B,MAAD,CAAN,CAAeG,OAAf,CAAuBC,OAAvB;AACD,KAjBC,CAAF;AAkBD,GAnBD;AAoBD,CArBO,CAAR","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { toMatchFile } from 'jest-file-snapshot';\nimport Mo from '../serializer';\nimport { regenerateJsonML } from '../helper';\n\nexpect.extend({ toMatchFile });\n\nconst fixturesPath = path.join(__dirname, 'fixtures');\nconst fixtures = fs.readdirSync(fixturesPath);\n\ndescribe('Mo.valueToJsonML', () => {\n  fixtures.forEach((fixture) => {\n    it(fixture, () => {\n      const fixturePath = path.join(fixturesPath, fixture);\n      const inputPath = path.join(fixturePath, 'input.js');\n      const outputPath = path.join(fixturePath, 'output.json');\n      let value;\n      try {\n        value = require(inputPath).default;\n      } catch (error) {\n        // do nothing;\n      }\n\n      const expected = JSON.parse(fs.readFileSync(outputPath).toString());\n      const jsonml = Mo.valueToJsonML(value);\n      expect(jsonml).toEqual(expected);\n\n      const jsonml2 = regenerateJsonML(jsonml);\n      expect(jsonml).toEqual(jsonml2);\n    });\n  });\n});\n"],"file":"index.test.js"}