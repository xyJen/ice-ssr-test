{"version":3,"sources":["../../src/migrate.ts"],"names":["MissingMigrationError","code","MigrateErrorCode","MissingMigration","message","normalizeError","e","Unknown","assertHasMigrations","migrations","targetVersion","isUpgrade","find","nextVersion","prevVersion","migrate","options","src","allMigrations","corrections","allCorrections","VERSION","onError","noop","document","cp","Document","isDocument","getVersionFromDocument","reduce","corrected","correct","version","getVersionFromCP","moSerializer","jsonMLToValue","start","end","migrs","slice","migrated","updateVersion","upgraded","upgrade","reduceRight","downgraded","downgrade","nodeToJsonML","attrs","KEY_OF_VERSION","DEFAULT_VERSION","data","set"],"mappings":"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","sourcesContent":["import { Document } from '@ali/4ever-cangjie';\nimport { JsonML, getAttributes } from '@ali/4ever-utils';\nimport { noop } from 'lodash-es';\nimport { VERSION, KEY_OF_VERSION, DEFAULT_VERSION } from './version';\nimport {\n  MigrateError,\n  MigrateErrorCode,\n  MigrateOptions,\n  Migration,\n} from './type';\nimport allMigrations from './migrations';\nimport allCorrections from './corrections';\nimport { moSerializer } from './serializer';\n\nexport const MissingMigrationError = {\n  code: MigrateErrorCode.MissingMigration,\n  message: 'missing migration',\n};\n\nexport function normalizeError(e: any): MigrateError {\n  return {\n    code: e.code || MigrateErrorCode.Unknown,\n    message: e.code ? e.message : e,\n  };\n}\n\n/**\n * 校验是否拥有迁移脚本\n * @param migrations\n * @param targetVersion\n * @param isUpgrade\n */\nexport function assertHasMigrations(\n  migrations: Pick<Migration, 'prevVersion' | 'nextVersion'>[],\n  targetVersion: number,\n  isUpgrade: boolean,\n) {\n  // 若迁移到初始版本允许无迁移脚本\n  if (targetVersion === 1) {\n    return;\n  }\n  if (\n    (isUpgrade &&\n      !migrations.find(({ nextVersion }) => nextVersion === targetVersion)) ||\n    (!isUpgrade &&\n      !migrations.find(({ prevVersion }) => prevVersion === targetVersion))\n  ) {\n    throw MissingMigrationError;\n  }\n}\n\n/**\n * Mo 模型升降级\n * @param options\n * @returns\n */\nexport default function migrate(options: MigrateOptions): JsonML | Document {\n  /* istanbul ignore next */\n  const {\n    src,\n    migrations = allMigrations,\n    corrections = allCorrections,\n    targetVersion = VERSION,\n    onError = noop,\n  } = options;\n\n  let document: Document;\n  let cp: JsonML;\n  if (Document.isDocument(src)) {\n    document = src;\n    if (getVersionFromDocument(src) === targetVersion) {\n      return document;\n    }\n  } else {\n    cp = corrections.reduce(\n      (corrected, correct) => correct(corrected),\n      src as any,\n    );\n    const version = getVersionFromCP(cp);\n    if (version === targetVersion) {\n      return cp;\n    }\n    document = moSerializer.jsonMLToValue(cp).document;\n  }\n\n  try {\n    const version = getVersionFromDocument(document);\n    const isUpgrade = targetVersion > version;\n    assertHasMigrations(migrations, targetVersion, isUpgrade);\n\n    const start = isUpgrade ? version : targetVersion;\n    const end = isUpgrade ? targetVersion : version;\n    const migrs = migrations.slice(start - 1, end - 1);\n\n    const migrated = updateVersion(\n      isUpgrade\n        ? migrs.reduce((upgraded, { upgrade }) => upgrade(upgraded), document)\n        : migrs.reduceRight(\n            (downgraded, { downgrade }) => downgrade(downgraded),\n            document,\n          ),\n      targetVersion,\n    );\n\n    return Document.isDocument(src)\n      ? migrated\n      : moSerializer.nodeToJsonML(migrated);\n  } catch (e) {\n    onError(normalizeError(e));\n    return Document.isDocument(src) ? document : cp!;\n  }\n}\n\n/**\n * 获得 `cp` 携带的版本号\n * @param cp\n * @returns\n */\nexport function getVersionFromCP(cp: JsonML) {\n  const attrs = getAttributes<{ [KEY_OF_VERSION]: number }>(cp) || {\n    [KEY_OF_VERSION]: DEFAULT_VERSION,\n  };\n  return attrs[KEY_OF_VERSION] || DEFAULT_VERSION;\n}\n\n/**\n * 获得内存模型的版本号\n * @param document\n */\nexport function getVersionFromDocument(document: Document) {\n  return document.data[KEY_OF_VERSION] || DEFAULT_VERSION;\n}\n\n/**\n * 更新模型版本\n * @param document\n * @param version\n * @returns\n */\nfunction updateVersion(document: Document, version: number) {\n  return document.set('data', {\n    ...document.data,\n    [KEY_OF_VERSION]: version,\n  });\n}\n"],"file":"migrate.js"}