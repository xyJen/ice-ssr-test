{"version":3,"sources":["../../src/strictSchema.ts"],"names":["blockTypes","Object","keys","schema","blocks","inlineTypes","inlines","strictSchema","moPlugins","createStrictSchemaOld","opts","inTableBlockTypes","s","document","nodes","match","map","t","type","min"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEO,MAAMA,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYC,gBAAOC,MAAnB,CAAnB;;AACA,MAAMC,WAAW,GAAGJ,MAAM,CAACC,IAAP,CAAYC,gBAAOG,OAAnB,CAApB;AAEP;;;AACA,MAAMC,YAAY,GAAG,qCAAmBC,iBAAnB,CAArB;eAEeD,Y;AAEf;AACA;AACA;AACA;AACA;;;;AACO,MAAME,qBAAqB,GAAIC,IAAD,IAIvB;AACZ,QAAM;AAAEV,IAAAA,UAAU,GAAG,EAAf;AAAmBK,IAAAA,WAAW,GAAG,EAAjC;AAAqCM,IAAAA,iBAAiB,GAAG;AAAzD,MAAgED,IAAtE;AAEA,QAAME,CAAS,GAAG,EAChB,GAAGL,YADa;AAEhBM,IAAAA,QAAQ,EAAE,EACR,GAAGN,YAAY,CAACM,QADR;AAERC,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,KAAK,EAAEf,UAAU,CAACgB,GAAX,CAAgBC,CAAD,KAAQ;AAAEC,UAAAA,IAAI,EAAED;AAAR,SAAR,CAAf,CAAT;AAA+CE,QAAAA,GAAG,EAAE;AAApD,OAAD;AAFC,KAFM;AAMhBf,IAAAA,MAAM,EAAE,EACN,GAAGG,YAAY,CAACH,MADV;AAEN,oBAAc,EACZ,GAAGG,YAAY,CAACH,MAAb,CAAqB,YAArB,CADS;AAEZU,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAEJ,iBAAiB,CAACK,GAAlB,CAAuBC,CAAD,KAAQ;AAAEC,YAAAA,IAAI,EAAED;AAAR,WAAR,CAAtB,CAAT;AAAsDE,UAAAA,GAAG,EAAE;AAA3D,SAAD;AAFK;AAFR;AANQ,GAAlB;AAcA,SAAOP,CAAP;AACD,CAtBM","sourcesContent":["import schema, { moPlugins } from './schema';\nimport { createStrictSchema, Schema } from '@ali/4ever-cangjie';\n\nexport const blockTypes = Object.keys(schema.blocks!);\nexport const inlineTypes = Object.keys(schema.inlines!);\n\n/** @deprecated use controller.strictSchema instead  */\nconst strictSchema = createStrictSchema(moPlugins);\n\nexport default strictSchema;\n\n/**\n * @deprecated use controller.strictSchema instead\n *\n * 这个方法 pi 里面还在用，先兼容\n */\nexport const createStrictSchemaOld = (opts: {\n  blockTypes?: string[];\n  inTableBlockTypes?: string[];\n  inlineTypes?: string[];\n}): Schema => {\n  const { blockTypes = [], inlineTypes = [], inTableBlockTypes = [] } = opts;\n\n  const s: Schema = {\n    ...strictSchema,\n    document: {\n      ...strictSchema.document!,\n      nodes: [{ match: blockTypes.map((t) => ({ type: t })), min: 1 }],\n    },\n    blocks: {\n      ...strictSchema.blocks,\n      'table-cell': {\n        ...strictSchema.blocks!['table-cell'],\n        nodes: [{ match: inTableBlockTypes.map((t) => ({ type: t })), min: 1 }],\n      },\n    },\n  };\n  return s;\n};\n"],"file":"strictSchema.js"}