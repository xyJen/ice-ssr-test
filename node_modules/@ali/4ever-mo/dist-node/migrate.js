"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeError = normalizeError;
exports.assertHasMigrations = assertHasMigrations;
exports.default = migrate;
exports.getVersionFromCP = getVersionFromCP;
exports.getVersionFromDocument = getVersionFromDocument;
exports.MissingMigrationError = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _lodash = require("lodash");

var _version = require("./version");

var _type = require("./type");

var _migrations = _interopRequireDefault(require("./migrations"));

var _corrections = _interopRequireDefault(require("./corrections"));

var _serializer = require("./serializer");

const MissingMigrationError = {
  code: _type.MigrateErrorCode.MissingMigration,
  message: 'missing migration'
};
exports.MissingMigrationError = MissingMigrationError;

function normalizeError(e) {
  return {
    code: e.code || _type.MigrateErrorCode.Unknown,
    message: e.code ? e.message : e
  };
}
/**
 * 校验是否拥有迁移脚本
 * @param migrations
 * @param targetVersion
 * @param isUpgrade
 */


function assertHasMigrations(migrations, targetVersion, isUpgrade) {
  // 若迁移到初始版本允许无迁移脚本
  if (targetVersion === 1) {
    return;
  }

  if (isUpgrade && !migrations.find(({
    nextVersion
  }) => nextVersion === targetVersion) || !isUpgrade && !migrations.find(({
    prevVersion
  }) => prevVersion === targetVersion)) {
    throw MissingMigrationError;
  }
}
/**
 * Mo 模型升降级
 * @param options
 * @returns
 */


function migrate(options) {
  /* istanbul ignore next */
  const {
    src,
    migrations = _migrations.default,
    corrections = _corrections.default,
    targetVersion = _version.VERSION,
    onError = _lodash.noop
  } = options;
  let document;
  let cp;

  if (_everCangjie.Document.isDocument(src)) {
    document = src;

    if (getVersionFromDocument(src) === targetVersion) {
      return document;
    }
  } else {
    cp = corrections.reduce((corrected, correct) => correct(corrected), src);
    const version = getVersionFromCP(cp);

    if (version === targetVersion) {
      return cp;
    }

    document = _serializer.moSerializer.jsonMLToValue(cp).document;
  }

  try {
    const version = getVersionFromDocument(document);
    const isUpgrade = targetVersion > version;
    assertHasMigrations(migrations, targetVersion, isUpgrade);
    const start = isUpgrade ? version : targetVersion;
    const end = isUpgrade ? targetVersion : version;
    const migrs = migrations.slice(start - 1, end - 1);
    const migrated = updateVersion(isUpgrade ? migrs.reduce((upgraded, {
      upgrade
    }) => upgrade(upgraded), document) : migrs.reduceRight((downgraded, {
      downgrade
    }) => downgrade(downgraded), document), targetVersion);
    return _everCangjie.Document.isDocument(src) ? migrated : _serializer.moSerializer.nodeToJsonML(migrated);
  } catch (e) {
    onError(normalizeError(e));
    return _everCangjie.Document.isDocument(src) ? document : cp;
  }
}
/**
 * 获得 `cp` 携带的版本号
 * @param cp
 * @returns
 */


function getVersionFromCP(cp) {
  const attrs = (0, _everUtils.getAttributes)(cp) || {
    [_version.KEY_OF_VERSION]: _version.DEFAULT_VERSION
  };
  return attrs[_version.KEY_OF_VERSION] || _version.DEFAULT_VERSION;
}
/**
 * 获得内存模型的版本号
 * @param document
 */


function getVersionFromDocument(document) {
  return document.data[_version.KEY_OF_VERSION] || _version.DEFAULT_VERSION;
}
/**
 * 更新模型版本
 * @param document
 * @param version
 * @returns
 */


function updateVersion(document, version) {
  return document.set('data', { ...document.data,
    [_version.KEY_OF_VERSION]: version
  });
}
//# sourceMappingURL=migrate.js.map