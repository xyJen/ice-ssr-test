import Serializer, { moSerializer } from './serializer';
import createMoPlugins from './createMoPlugins';
import createCustomizedMoPlugins from './createCustomizedMoPlugins';
import plugins from './plugins';
import { createEmptyParagraph, attrsToMarks, markToAttr, marksToAttrs } from './plugins/utils';
import { Bold, Color, Fonts, Highlight, InlineCode, Italic, SmallCaps, Strike, Dstrike, Sz, Underline, VertAlign, Shd, Spacing, Kern, Em } from '@ali/4ever-plugin-marks';
export type { TextMark } from '@ali/4ever-cangjie';
export declare const pluginUtils: {
    createEmptyParagraph: typeof createEmptyParagraph;
    createEmptyText: () => import("@ali/4ever-cangjie").JsonML;
    attrsToMarks: typeof attrsToMarks;
    markToAttr: typeof markToAttr;
    marksToAttrs: typeof marksToAttrs;
};
export { MoCommon as Common, MoInterfaces as Interfaces, } from '@ali/4ever-cangjie';
export { paragraph as ParagraphPlugin, br as BrPlugin, code as CodePlugin, embed as EmbedPlugin, hr as HrPlugin, image as ImagePlugin, link as LinkPlugin, list as ListPlugin, mention as MentionPlugin, onlineVideo as OnlineVideoPlugin, placeholder as PlaceholderPlugin, inlineCode as InlineCodePlugin, refer as ReferPlugin, table as TablePlugin, tagWithFormula as TagPlugin, refblock as RefBlockPlugin, } from './plugins';
export declare const BasicPlugin: () => {};
export * from './type';
export { MoState as State, DATA_CLIPBORAD_CANGJIE, SLASH_PLACEHOLDER, HtmlParser, } from '@ali/4ever-cangjie';
export { Card } from '@ali/4ever-plugin-card';
export type { CardData } from '@ali/4ever-plugin-card';
export { Tag } from '@ali/4ever-plugin-tag';
export type { TagData } from '@ali/4ever-plugin-tag';
export { Embed } from '@ali/4ever-plugin-embed';
export { Code } from '@ali/4ever-plugin-code';
export { Heading } from '@ali/4ever-plugin-heading';
export type { FoldableHeadingData, Heading1Data, SubjectProperties, } from '@ali/4ever-plugin-heading';
export { Hr } from '@ali/4ever-plugin-hr';
export type { HrData } from '@ali/4ever-plugin-hr';
export { Image } from '@ali/4ever-plugin-image';
export type { ImageProperties, ImageData } from '@ali/4ever-plugin-image';
export { Link } from '@ali/4ever-plugin-link';
export type { LinkProperties } from '@ali/4ever-plugin-link';
export { Mention } from '@ali/4ever-plugin-mention';
export { InlineCode } from '@ali/4ever-plugin-inline-code';
export type { MentionData } from '@ali/4ever-plugin-mention';
export { Paragraph } from '@ali/4ever-plugin-paragraph';
export type { ParagraphData } from '@ali/4ever-plugin-paragraph';
export type { SpacingProperties, IndentProperties, TabStyle, } from '@ali/4ever-utils';
export { Table, TableRow, TableCell } from '@ali/4ever-plugin-table';
export type { TableData } from '@ali/4ever-plugin-table';
export { OnlineVideo } from '@ali/4ever-plugin-online-video';
export { Placeholder } from '@ali/4ever-plugin-placeholder';
export { InlinePlaceholder } from '@ali/4ever-plugin-inline-placeholder';
export { Refer } from '@ali/4ever-plugin-refer';
export { Sticker } from '@ali/4ever-plugin-sticker';
export { Container } from '@ali/4ever-plugin-container';
export { TemplateButton } from '@ali/4ever-plugin-template-button';
export type { TemplateButtonData } from '@ali/4ever-plugin-template-button';
export type { ContainerData, ContainerChildren, } from '@ali/4ever-plugin-container';
export { ColorBlocks } from '@ali/4ever-plugin-color-blocks';
export type { ColorBlocksMetaData, ColorBlocksData, } from '@ali/4ever-plugin-color-blocks';
export declare const Marks: {
    Bold: {
        TYPE: string;
        create(bold?: boolean | undefined): Bold;
        isBold(maybeBold: any): maybeBold is Bold;
    };
    Caps: {
        TYPE: string;
        create(capData?: import("@ali/4ever-plugin-marks/src/mo/models/caps").CapData | null | undefined): import("@ali/4ever-cangjie").Mark<import("@ali/4ever-cangjie/src/interfaces/data").default>;
        isCaps(maybeCaps: any): maybeCaps is import("@ali/4ever-cangjie").Mark<import("@ali/4ever-cangjie/src/interfaces/data").default>;
    };
    Color: {
        TYPE: string;
        create(color: string): Color;
        isColor(maybeColor: any): maybeColor is Color;
    };
    Fonts: {
        TYPE: string;
        create(data: import("@ali/4ever-plugin-marks").FontsData): Fonts;
        isFonts(maybeFonts: any): maybeFonts is Fonts;
    };
    Highlight: {
        TYPE: string;
        create(highlight: string): Highlight;
        isHighlight(maybeHighlight: any): maybeHighlight is Highlight;
    };
    InlineCode: {
        TYPE: string;
        create(): InlineCode;
        isInlineCode(maybeInlineCode: any): maybeInlineCode is InlineCode;
    };
    Italic: {
        TYPE: string;
        create(): Italic;
        isItalic(maybeItalic: any): maybeItalic is Italic;
    };
    SmallCaps: {
        TYPE: string;
        create(): SmallCaps;
        isSmallCaps(maybeSmallCaps: any): maybeSmallCaps is SmallCaps;
    };
    Strike: {
        TYPE: string;
        create(): Strike;
        isStrike(maybeStrike: any): maybeStrike is Strike;
    };
    Dstrike: {
        TYPE: string;
        create(value?: boolean | undefined): Dstrike;
        isDstrike(maybeDstrike: any): maybeDstrike is Dstrike;
    };
    Sz: {
        TYPE: string;
        create(data: import("@ali/4ever-plugin-marks").SzData): Sz;
        isSz(maybeSz: any): maybeSz is Sz;
    };
    Underline: {
        TYPE: string;
        create(underline?: string, color?: string | undefined): Underline;
        isUnderline(maybeUnderline: any): maybeUnderline is Underline;
    };
    VertAlign: {
        TYPE: string;
        create(vertAlign: "baseline" | "superscript" | "subscript"): VertAlign;
        isVertAlign(maybeVertAlign: any): maybeVertAlign is VertAlign;
    };
    Shd: {
        TYPE: string;
        create(data: import("@ali/4ever-plugin-marks").ShdData): Shd;
        isShd(maybeShd: any): maybeShd is Shd;
    };
    Spacing: {
        TYPE: string;
        create(value: number): Spacing;
        isSpacing(maybeSpacing: any): maybeSpacing is Spacing;
    };
    Kern: {
        TYPE: string;
        create(value: number): Kern;
        isKern(maybeKern: any): maybeKern is Kern;
    };
    Em: {
        TYPE: string;
        create(value: string): import("@ali/4ever-cangjie").Mark<import("@ali/4ever-plugin-marks").EmData>;
        isEm(maybeEm: any): maybeEm is Em;
    };
};
export { Bold as BoldMark, Caps as CapsMark, Color as ColorMark, Fonts as FontsMark, Highlight as HighlightMark, InlineCode as InlineCodeMark, Italic as ItalicMark, SmallCaps as SmallCapsMark, Strike as StrikeMark, Sz as SzMark, Underline as UnderlineMark, VertAlign as VertAlignMark, Shd as ShdMark, } from '@ali/4ever-plugin-marks';
export type { ColorData as ColorMarkData, FontsData as FontsMarkData, HighlightData as HighlightMarkData, SzData as SzMarkData, UnderlineData as UnderlineMarkData, VertAlignData as VertAlignMarkData, ShdData as ShdMarkData, } from '@ali/4ever-plugin-marks';
export { default as schema } from './schema';
export { default as strictSchema, inlineTypes, blockTypes, createStrictSchemaOld as createStrictSchema, } from './strictSchema';
export { default as ServerSerializer, createServerMoPlugins, serverPlugins, moServerSerializer, } from './serializerValueJsonML';
export { moSerializer, plugins, Serializer, createMoPlugins, createCustomizedMoPlugins, };
export { VERSION, KEY_OF_VERSION, DEFAULT_VERSION } from './version';
export { default as migrate, getVersionFromCP, getVersionFromDocument, assertHasMigrations, normalizeError as normalizeMigrateError, MissingMigrationError, } from './migrate';
export { default as migrations } from './migrations';
export { default as createMigration } from './migrations/createMigration';
export { default as corrections } from './corrections';
declare const _default: {
    Serializer: typeof Serializer;
    createMoPlugins: (configs?: import("@ali/4ever-cangjie").MoPluginConfig) => import("@ali/4ever-cangjie").MoSerializationPlugin[];
    createCustomizedMoPlugins: typeof createCustomizedMoPlugins;
};
export default _default;
