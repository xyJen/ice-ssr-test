{"version":3,"sources":["../../src/migrate.ts"],"names":["Document","getAttributes","noop","VERSION","KEY_OF_VERSION","DEFAULT_VERSION","MigrateErrorCode","allMigrations","allCorrections","moSerializer","MissingMigrationError","code","MissingMigration","message","normalizeError","e","Unknown","assertHasMigrations","migrations","targetVersion","isUpgrade","find","nextVersion","prevVersion","migrate","options","src","corrections","onError","document","cp","isDocument","getVersionFromDocument","reduce","corrected","correct","version","getVersionFromCP","jsonMLToValue","start","end","migrs","slice","migrated","updateVersion","upgraded","upgrade","reduceRight","downgraded","downgrade","nodeToJsonML","attrs","data","set"],"mappings":"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","sourcesContent":["import { Document } from '@ali/4ever-cangjie';\nimport { JsonML, getAttributes } from '@ali/4ever-utils';\nimport { noop } from 'lodash-es';\nimport { VERSION, KEY_OF_VERSION, DEFAULT_VERSION } from './version';\nimport {\n  MigrateError,\n  MigrateErrorCode,\n  MigrateOptions,\n  Migration,\n} from './type';\nimport allMigrations from './migrations';\nimport allCorrections from './corrections';\nimport { moSerializer } from './serializer';\n\nexport const MissingMigrationError = {\n  code: MigrateErrorCode.MissingMigration,\n  message: 'missing migration',\n};\n\nexport function normalizeError(e: any): MigrateError {\n  return {\n    code: e.code || MigrateErrorCode.Unknown,\n    message: e.code ? e.message : e,\n  };\n}\n\n/**\n * 校验是否拥有迁移脚本\n * @param migrations\n * @param targetVersion\n * @param isUpgrade\n */\nexport function assertHasMigrations(\n  migrations: Pick<Migration, 'prevVersion' | 'nextVersion'>[],\n  targetVersion: number,\n  isUpgrade: boolean,\n) {\n  // 若迁移到初始版本允许无迁移脚本\n  if (targetVersion === 1) {\n    return;\n  }\n  if (\n    (isUpgrade &&\n      !migrations.find(({ nextVersion }) => nextVersion === targetVersion)) ||\n    (!isUpgrade &&\n      !migrations.find(({ prevVersion }) => prevVersion === targetVersion))\n  ) {\n    throw MissingMigrationError;\n  }\n}\n\n/**\n * Mo 模型升降级\n * @param options\n * @returns\n */\nexport default function migrate(options: MigrateOptions): JsonML | Document {\n  /* istanbul ignore next */\n  const {\n    src,\n    migrations = allMigrations,\n    corrections = allCorrections,\n    targetVersion = VERSION,\n    onError = noop,\n  } = options;\n\n  let document: Document;\n  let cp: JsonML;\n  if (Document.isDocument(src)) {\n    document = src;\n    if (getVersionFromDocument(src) === targetVersion) {\n      return document;\n    }\n  } else {\n    cp = corrections.reduce(\n      (corrected, correct) => correct(corrected),\n      src as any,\n    );\n    const version = getVersionFromCP(cp);\n    if (version === targetVersion) {\n      return cp;\n    }\n    document = moSerializer.jsonMLToValue(cp).document;\n  }\n\n  try {\n    const version = getVersionFromDocument(document);\n    const isUpgrade = targetVersion > version;\n    assertHasMigrations(migrations, targetVersion, isUpgrade);\n\n    const start = isUpgrade ? version : targetVersion;\n    const end = isUpgrade ? targetVersion : version;\n    const migrs = migrations.slice(start - 1, end - 1);\n\n    const migrated = updateVersion(\n      isUpgrade\n        ? migrs.reduce((upgraded, { upgrade }) => upgrade(upgraded), document)\n        : migrs.reduceRight(\n            (downgraded, { downgrade }) => downgrade(downgraded),\n            document,\n          ),\n      targetVersion,\n    );\n\n    return Document.isDocument(src)\n      ? migrated\n      : moSerializer.nodeToJsonML(migrated);\n  } catch (e) {\n    onError(normalizeError(e));\n    return Document.isDocument(src) ? document : cp!;\n  }\n}\n\n/**\n * 获得 `cp` 携带的版本号\n * @param cp\n * @returns\n */\nexport function getVersionFromCP(cp: JsonML) {\n  const attrs = getAttributes<{ [KEY_OF_VERSION]: number }>(cp) || {\n    [KEY_OF_VERSION]: DEFAULT_VERSION,\n  };\n  return attrs[KEY_OF_VERSION] || DEFAULT_VERSION;\n}\n\n/**\n * 获得内存模型的版本号\n * @param document\n */\nexport function getVersionFromDocument(document: Document) {\n  return document.data[KEY_OF_VERSION] || DEFAULT_VERSION;\n}\n\n/**\n * 更新模型版本\n * @param document\n * @param version\n * @returns\n */\nfunction updateVersion(document: Document, version: number) {\n  return document.set('data', {\n    ...document.data,\n    [KEY_OF_VERSION]: version,\n  });\n}\n"],"file":"migrate.js"}