import _extends from "@babel/runtime/helpers/extends";
import { Document } from '@ali/4ever-cangjie';
import { getAttributes } from '@ali/4ever-utils';
import { noop } from 'lodash-es';
import { VERSION, KEY_OF_VERSION, DEFAULT_VERSION } from "./version";
import { MigrateErrorCode } from "./type";
import allMigrations from "./migrations";
import allCorrections from "./corrections";
import { moSerializer } from "./serializer";
export var MissingMigrationError = {
  code: MigrateErrorCode.MissingMigration,
  message: 'missing migration'
};
export function normalizeError(e) {
  return {
    code: e.code || MigrateErrorCode.Unknown,
    message: e.code ? e.message : e
  };
}
/**
 * 校验是否拥有迁移脚本
 * @param migrations
 * @param targetVersion
 * @param isUpgrade
 */

export function assertHasMigrations(migrations, targetVersion, isUpgrade) {
  // 若迁移到初始版本允许无迁移脚本
  if (targetVersion === 1) {
    return;
  }

  if (isUpgrade && !migrations.find(function (_ref) {
    var nextVersion = _ref.nextVersion;
    return nextVersion === targetVersion;
  }) || !isUpgrade && !migrations.find(function (_ref2) {
    var prevVersion = _ref2.prevVersion;
    return prevVersion === targetVersion;
  })) {
    throw MissingMigrationError;
  }
}
/**
 * Mo 模型升降级
 * @param options
 * @returns
 */

export default function migrate(options) {
  /* istanbul ignore next */
  var src = options.src,
      _options$migrations = options.migrations,
      migrations = _options$migrations === void 0 ? allMigrations : _options$migrations,
      _options$corrections = options.corrections,
      corrections = _options$corrections === void 0 ? allCorrections : _options$corrections,
      _options$targetVersio = options.targetVersion,
      targetVersion = _options$targetVersio === void 0 ? VERSION : _options$targetVersio,
      _options$onError = options.onError,
      onError = _options$onError === void 0 ? noop : _options$onError;
  var document;
  var cp;

  if (Document.isDocument(src)) {
    document = src;

    if (getVersionFromDocument(src) === targetVersion) {
      return document;
    }
  } else {
    cp = corrections.reduce(function (corrected, correct) {
      return correct(corrected);
    }, src);
    var version = getVersionFromCP(cp);

    if (version === targetVersion) {
      return cp;
    }

    document = moSerializer.jsonMLToValue(cp).document;
  }

  try {
    var _version = getVersionFromDocument(document);

    var isUpgrade = targetVersion > _version;
    assertHasMigrations(migrations, targetVersion, isUpgrade);
    var start = isUpgrade ? _version : targetVersion;
    var end = isUpgrade ? targetVersion : _version;
    var migrs = migrations.slice(start - 1, end - 1);
    var migrated = updateVersion(isUpgrade ? migrs.reduce(function (upgraded, _ref3) {
      var upgrade = _ref3.upgrade;
      return upgrade(upgraded);
    }, document) : migrs.reduceRight(function (downgraded, _ref4) {
      var downgrade = _ref4.downgrade;
      return downgrade(downgraded);
    }, document), targetVersion);
    return Document.isDocument(src) ? migrated : moSerializer.nodeToJsonML(migrated);
  } catch (e) {
    onError(normalizeError(e));
    return Document.isDocument(src) ? document : cp;
  }
}
/**
 * 获得 `cp` 携带的版本号
 * @param cp
 * @returns
 */

export function getVersionFromCP(cp) {
  var _ref5;

  var attrs = getAttributes(cp) || (_ref5 = {}, _ref5[KEY_OF_VERSION] = DEFAULT_VERSION, _ref5);
  return attrs[KEY_OF_VERSION] || DEFAULT_VERSION;
}
/**
 * 获得内存模型的版本号
 * @param document
 */

export function getVersionFromDocument(document) {
  return document.data[KEY_OF_VERSION] || DEFAULT_VERSION;
}
/**
 * 更新模型版本
 * @param document
 * @param version
 * @returns
 */

function updateVersion(document, version) {
  var _extends2;

  return document.set('data', _extends({}, document.data, (_extends2 = {}, _extends2[KEY_OF_VERSION] = version, _extends2)));
}
//# sourceMappingURL=migrate.js.map