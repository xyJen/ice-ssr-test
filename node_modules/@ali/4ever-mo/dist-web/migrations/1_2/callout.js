import _extends from "@babel/runtime/helpers/extends";
import { Path } from '@ali/4ever-cangjie';
import equal from 'fast-deep-equal';
import { ColorBlocks } from '@ali/4ever-plugin-color-blocks';
import { Heading } from '@ali/4ever-plugin-heading';

/*         New Callout                             Old Callout        
 * ┌─────────────────────┐                    ┌─────────────────────┐
 * │    Introduction     │                    │    Introduction     │
 * └─────────────────────┘                    └─────────────────────┘
 * ┌─────────────────────┐                                           
 * │Callout              │                                           
 * │  ┌──────────────┐   │                    ┌─────────────────────┐
 * │  │   Commands   │   │                    │      Commands       │
 * │  └──────────────┘   │   ────flatten───▶  └─────────────────────┘
 * │  ┌──────────────┐   │                    ┌─────────────────────┐
 * │  │  Operations  │   │                    │     Operations      │
 * │  └──────────────┘   │   ◀────wrap─────── └─────────────────────┘
 * │  ┌──────────────┐   │                    ┌─────────────────────┐
 * │  │   Plugins    │   │                    │       Plugins       │
 * │  └──────────────┘   │                    └─────────────────────┘
 * └─────────────────────┘                                           
 * ┌─────────────────────┐                    ┌─────────────────────┐
 * │ Powered By Cangjie  │                    │ Powered By Cangjie  │
 * └─────────────────────┘                    └─────────────────────┘
 */
var callout = {
  upgrade: function upgrade(document) {
    var newDocument = document; // 1. 获得所有老高亮块

    var callouts = [];
    var len = document.nodes.length;
    var i = 0;

    while (i < len) {
      var first = document.nodes[i];

      if (Heading.isCallout(first)) {
        var blocks = [first];
        callouts.push(blocks);
        var j = i + 1;

        while (j < len) {
          var next = document.nodes[j];

          if (Heading.isCallout(next) && equal(next.data.calloutPr, first.data.calloutPr)) {
            blocks.push(next);
            j++;
          } else {
            break;
          }
        }

        i = j;
      } else {
        i++;
      }
    } // 2. 转换高亮块为新的高两块


    callouts.forEach(function (blocks) {
      var _start$data;

      var start = blocks[0];
      var prevAttrs = (_start$data = start.data) == null ? void 0 : _start$data.calloutPr;

      var _ref = prevAttrs || {},
          bgcolor = _ref.backgroundColor,
          sticker = _ref.stickerCode; // 创建高亮块容器


      var colorBlock = ColorBlocks.createColorBlocks({
        bgcolor: bgcolor,
        sticker: sticker,
        showstk: true
      }, []); // 在原高亮块位置插入新高亮块

      var startPath = newDocument.getPath(start.key);
      newDocument = newDocument.insertNode(startPath, colorBlock); // 将旧高亮块内容移动到新高亮块

      var colorBlockPath = newDocument.getPath(colorBlock.key);
      blocks.reverse().forEach(function (block) {
        var from = newDocument.getPath(block.key);
        var to = Path.link(colorBlockPath, [0]);
        newDocument = newDocument.moveNode(from, to);
      }); // 删除 callout 标记，避免再被识别为高亮块

      blocks.forEach(function (block) {
        var _block$data;

        var path = newDocument.getPath(block.key);

        if ((_block$data = block.data) != null && _block$data.calloutPr) {
          var data = _extends({}, block.data);

          delete data.calloutPr;
          newDocument = newDocument.setNode(path, {
            data: data
          });
        }
      });
    });
    return newDocument;
  },
  downgrade: function downgrade(document) {
    return document;
  }
};
export default callout;
//# sourceMappingURL=callout.js.map