{"version":3,"sources":["../../src/reader.tsx"],"names":["React","styled","Provider","Content","theme","isEmptyValue","EmptyWrapper","div","Zhi","props","dataUid","plugins","value","content","renderEmpty","style","canCopy","controllerRef","onChange","options","flushType","configs","docStyle","rest","useState","renderValue","setRenderValue","valueRef","useRef","current","handleChange","useCallback","change","isEmpty","defaultKeyTypographyStyle"],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module Reader\n */\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport {\n  Controller,\n  Provider,\n  Plugin,\n  Content,\n  ContentOwnProps,\n  Value,\n  Change,\n  ControllerOptions,\n  ControllerConfigs,\n  FlushType,\n  DocStyle,\n} from '@ali/4ever-cangjie';\nimport {\n  theme,\n} from '@ali/4ever-bamboo';\nimport { isEmptyValue } from '@ali/4ever-utils';\n\n/**\n * @ignore\n */\nconst EmptyWrapper = styled.div`\n  height: 100%;\n`;\n\n/**\n * 编辑器只读组件的选项。\n */\nexport interface ZhiOwnProps extends ContentOwnProps {\n  /**\n   * 展示相应 uid 下的用户数据\n   */\n  dataUid?: string | number | undefined;\n  /**\n   * 插件列表。\n   */\n  plugins: Plugin[];\n  /**\n   * 编辑器数据。\n   */\n  content: Value;\n  /**\n   * 是否允许拷贝\n   */\n  canCopy?: boolean;\n  /**\n   * 编辑器参数\n   */\n  options?: ControllerOptions;\n  /**\n   * 编辑器的调度模式\n   */\n  flushType?: FlushType;\n  /**\n   * 产生变更回调，主要的变更内容来源于选区操作，如果不注入回调，则组件内部会自行更新视图数据\n   */\n  onChange?: (change: Change) => void;\n  /**\n   * 编辑器无内容时，render 回调。\n   */\n  renderEmpty?: () => React.ReactNode;\n  /**\n   * 获取编辑器的 controller 对象。\n   */\n  controllerRef?: (controller: Controller) => void;\n  /**\n   * 给编辑器提供滚动的 dom 节点，用户后续使用 useScrollableContrainer 来获取。默认是 window 对象。\n   */\n  getScrollableContainer?: () => HTMLElement | Window;\n  getScrollableContent?: () => HTMLElement;\n  /**\n   * 编辑器配置\n   *\n   * 目前提供的配置：移动端「复制粘贴」气泡的国际化文案配置\n   */\n  configs?: ControllerConfigs;\n  /**\n   * 文档样式表\n   */\n  docStyle?: DocStyle;\n}\n\nexport type ZhiProps = ZhiOwnProps & Record<string, any>;\n\n/**\n * 编辑器只读组件\n */\nfunction Zhi(props: ZhiProps) {\n  const {\n    dataUid,\n    plugins,\n    content: value,\n    renderEmpty,\n    style,\n    canCopy = true,\n    controllerRef,\n    onChange,\n    options,\n    flushType,\n    configs,\n    docStyle,\n    ...rest\n  } = props;\n\n  const [renderValue, setRenderValue] = React.useState(value);\n  const valueRef = React.useRef(value);\n\n  // 若 value 数据变更，则更新渲染数据\n  if (value !== valueRef.current) {\n    valueRef.current = value;\n    setRenderValue(value);\n  }\n\n  // 如果上层有处理 onChange 则上抛，否则进行内部消化，保证基础选区交互能够 works\n  const handleChange = React.useCallback((change: Change) => {\n    if (typeof onChange === 'function') {\n      onChange(change);\n    } else {\n      setRenderValue(change.value);\n    }\n  }, [onChange]);\n\n  const isEmpty = isEmptyValue(renderValue);\n  if (isEmpty && renderEmpty) {\n    // @ts-ignore\n    return <EmptyWrapper {...rest}>{renderEmpty()}</EmptyWrapper>;\n  }\n\n  return (\n    <Provider\n      dataUid={dataUid}\n      plugins={plugins}\n      onChange={handleChange}\n      value={renderValue}\n      controllerRef={controllerRef}\n      readOnly\n      canCopy={canCopy}\n      options={options}\n      flushType={flushType}\n      configs={configs}\n      docStyle={docStyle}\n    >\n      <Content {...rest} tagName=\"article\" defaultStyle={theme.defaultKeyTypographyStyle} style={style} />\n    </Provider>\n  );\n}\n\nexport default Zhi;\n"],"file":"reader.js"}