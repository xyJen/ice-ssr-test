import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/**
 * @packageDocumentation
 * @module Reader
 */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { Provider, Content } from '@ali/4ever-cangjie';
import { theme } from '@ali/4ever-bamboo';
import { isEmptyValue } from '@ali/4ever-utils';
/**
 * @ignore
 */

var EmptyWrapper = /*#__PURE__*/styled.div(["height:100%;"]);
/**
 * 编辑器只读组件的选项。
 */

/**
 * 编辑器只读组件
 */
function Zhi(props) {
  var dataUid = props.dataUid,
      plugins = props.plugins,
      value = props.content,
      renderEmpty = props.renderEmpty,
      style = props.style,
      _props$canCopy = props.canCopy,
      canCopy = _props$canCopy === void 0 ? true : _props$canCopy,
      controllerRef = props.controllerRef,
      onChange = props.onChange,
      options = props.options,
      flushType = props.flushType,
      configs = props.configs,
      docStyle = props.docStyle,
      rest = _objectWithoutPropertiesLoose(props, ["dataUid", "plugins", "content", "renderEmpty", "style", "canCopy", "controllerRef", "onChange", "options", "flushType", "configs", "docStyle"]);

  var _React$useState = React.useState(value),
      renderValue = _React$useState[0],
      setRenderValue = _React$useState[1];

  var valueRef = React.useRef(value); // 若 value 数据变更，则更新渲染数据

  if (value !== valueRef.current) {
    valueRef.current = value;
    setRenderValue(value);
  } // 如果上层有处理 onChange 则上抛，否则进行内部消化，保证基础选区交互能够 works


  var handleChange = React.useCallback(function (change) {
    if (typeof onChange === 'function') {
      onChange(change);
    } else {
      setRenderValue(change.value);
    }
  }, [onChange]);
  var isEmpty = isEmptyValue(renderValue);

  if (isEmpty && renderEmpty) {
    // @ts-ignore
    return /*#__PURE__*/_createElement(EmptyWrapper, rest, renderEmpty());
  }

  return /*#__PURE__*/_createElement(Provider, {
    dataUid: dataUid,
    plugins: plugins,
    onChange: handleChange,
    value: renderValue,
    controllerRef: controllerRef,
    readOnly: true,
    canCopy: canCopy,
    options: options,
    flushType: flushType,
    configs: configs,
    docStyle: docStyle
  }, /*#__PURE__*/_createElement(Content, _extends({}, rest, {
    tagName: "article",
    defaultStyle: theme.defaultKeyTypographyStyle,
    style: style
  })));
}

export default Zhi;
//# sourceMappingURL=reader.js.map