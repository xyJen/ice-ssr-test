import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment } from '@ali/4ever-cangjie';
import { Link as LinkComponent } from "./styled";

var Link = function Link(props) {
  var href = props.href,
      children = props.children,
      onOpenLink = props.onOpenLink,
      rest = _objectWithoutPropertiesLoose(props, ["href", "children", "onOpenLink"]);

  var shouldOpenLink = React.useRef(true);
  var isMobile = environment.IS_MOBILE;
  var handleOpenLink = useCallback(function (event) {
    if (onOpenLink && shouldOpenLink.current) {
      event.preventDefault();

      if (!isMobile) {
        /**
         * 下面的提交为了修复演示模式切页问题，阻止了冒泡。但是会导致移动端 touchEnd 不触发，引发跳转后选区异常
         * https://gitlab.alibaba-inc.com/alidocs/we-editor/commit/d870afb4bf623a9b3422bd4fe7c29b6515d720c2
         */
        event.stopPropagation();
      }

      onOpenLink(href);
    }
  }, [onOpenLink, href, isMobile]);
  var handlers = React.useMemo(function () {
    return environment.IS_MOBILE ? {
      onTouchEnd: handleOpenLink,
      onTouchStart: function onTouchStart() {
        shouldOpenLink.current = true;
      },
      onTouchMove: function onTouchMove() {
        shouldOpenLink.current = false;
      },
      onClick: function onClick(event) {
        return event.preventDefault();
      }
    } : {
      onClick: handleOpenLink
    };
  }, [handleOpenLink]);
  return /*#__PURE__*/_createElement(LinkComponent, _extends({}, rest, handlers, {
    href: href,
    className: "link"
  }), children);
};

export default /*#__PURE__*/React.memo(Link);
//# sourceMappingURL=link.js.map