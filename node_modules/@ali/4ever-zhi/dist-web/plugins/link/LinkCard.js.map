{"version":3,"sources":["../../../../src/plugins/link/LinkCard.tsx"],"names":["React","styled","theme","URLLinkCard","LinkPlugin","getClosestContainerBlock","getInnerWidth","LINK_COPY_LINK","actions","link","CARD_WIDTH","width","CARD_HEIGHT","height","margin","getMobileMaxWidth","value","node","closestBlock","copyLink","type","payload","Wrapper","span","LinkCard","props","controller","handleOpen","attributes","locale","isMobile","cardWidth","cardHeight","linkNode","data","href","cardInfo","title","imgURL","desc","text","query","urlInfo","useMemo","trim","cardLocale","edit","copy","unlink","deleteLocale","styleText","tooltipLocale","editTooltip","copyTooltip","unlinkTooltip","deleteTooltip","switchStyleTooltip","linkCardLocale","useState","maxWidth","setMaxwidth","useEffect","handleCopy","useCallback","e","preventDefault","stopPropagation","run","canCopy","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { theme } from '@ali/4ever-bamboo';\nimport { URLLinkCard } from '@ali/we-biz-link-card';\nimport { LinkProperties } from '@ali/4ever-mo';\nimport { Value, Inline, RenderNodeProps, Action } from '@ali/4ever-cangjie';\nimport { LinkPlugin } from '@ali/4ever-bi';\nimport { getClosestContainerBlock, getInnerWidth } from '@ali/4ever-utils';\nimport { LinkPluginConfig, ILocale } from './types';\n\nconst { LINK_COPY_LINK } = LinkPlugin.actions;\n\nconst { width: CARD_WIDTH, height: CARD_HEIGHT, margin } = theme.link;\n\nconst getMobileMaxWidth = (value: Value, node: Inline) => {\n  const closestBlock = getClosestContainerBlock(value, node);\n  if (closestBlock)\n    return getInnerWidth(closestBlock) ?? '100%';\n  return '100%';\n};\n\nfunction copyLink(\n  node: Inline,\n): Action<{ node: Inline }> {\n  return {\n    type: LINK_COPY_LINK,\n    payload: {\n      node,\n    },\n  };\n}\n\ninterface LinkCardProps extends RenderNodeProps<Inline> {\n  locale: LinkPluginConfig['locale'];\n  handleOpen?: (href: string) => void;\n  isMobile: boolean;\n}\n\nconst Wrapper = styled.span`\n  cursor: default;\n  display: inline-block;\n  line-height: normal;\n`;\n\nconst LinkCard: React.FC<LinkCardProps> = (props) => {\n  const { node, controller, handleOpen, attributes, locale, isMobile } = props;\n\n  const cardWidth = CARD_WIDTH;\n  const cardHeight = CARD_HEIGHT;\n  const linkNode = node as LinkProperties;\n\n  const { href = '', cardInfo } = linkNode.data || {};\n  const { title = '', imgURL = '', desc = '' } = cardInfo || {};\n  const text = controller.query('getText', { node }) || '';\n  const urlInfo = React.useMemo(() => ({\n    title: text.trim() === href.trim() ? title : text,\n    imgURL,\n    desc,\n  }), [text, title, imgURL, desc]);\n\n  const cardLocale = locale as ILocale;\n  const { edit = '', copy = '', unlink = '', delete: deleteLocale = '', styleText = '' } = cardLocale;\n  const tooltipLocale = {\n    editTooltip: edit,\n    copyTooltip: copy,\n    unlinkTooltip: unlink,\n    deleteTooltip: deleteLocale,\n    switchStyleTooltip: styleText,\n  };\n\n  const linkCardLocale = React.useMemo(() => ({ ...cardLocale, ...tooltipLocale }), [locale]);\n\n  const [maxWidth, setMaxwidth] = React.useState<number | string>('100%');\n\n  React.useEffect(() => {\n    setMaxwidth(getMobileMaxWidth(controller.value, node));\n  }, []);\n\n  const handleCopy = React.useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    controller.run('onAction', copyLink(node));\n  }, [controller, node]);\n\n  return (\n    <Wrapper {...attributes} style={{ width: isMobile ? maxWidth : cardWidth, height: cardHeight, margin }}>\n      <URLLinkCard\n        isSelected={false}\n        state={'normal'}\n        cardStyle={'indoc'}\n        url={href}\n        readonly\n        isMobile={isMobile}\n        locale={linkCardLocale}\n        urlInfo={urlInfo}\n        onOpenURL={handleOpen}\n        // @ts-ignore\n        onCopy={controller.canCopy && handleCopy}\n        // @ts-ignore\n        urlTestID=\"link-toolbar-visit\"\n        cardTestID=\"link-card\"\n        copyBtnTestID=\"link-toolbar-copy\"\n      />\n    </Wrapper>\n  );\n};\n\nexport default React.memo(LinkCard);\n"],"file":"LinkCard.js"}