import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { LinkPlugin } from '@ali/4ever-bamboo';
import { sanitizeUrl } from '@ali/4ever-utils';
import { LinkPlugin as LinkBiPlugin } from '@ali/4ever-bi';
import Link from "./link";
import LinkCard from "./LinkCard";
import { moFactory } from '@ali/4ever-plugin-link';
var normalizeLink = LinkPlugin.normalizeLink,
    openLinkInWindow = LinkPlugin.openLink;
var createCopyLink = LinkBiPlugin.utils.createCopyLink;
var LINK_COPY_LINK = LinkBiPlugin.actions.LINK_COPY_LINK;
export function createLinkPluginFactory(isMoblie) {
  var getMinTableColWidth = isMoblie ? LinkPlugin.getMinTableColWidthForMobile : LinkPlugin.getMinTableColWidth;
  return function createLinkPlugin(config) {
    var _config$clipboard;

    var _ref = config.link || {},
        openLink = _ref.openLink,
        _ref$protocolAllowLis = _ref.protocolAllowList,
        protocolAllowList = _ref$protocolAllowLis === void 0 ? ['http:', 'https:', 'dingtalk:', 'taobao:'] : _ref$protocolAllowLis,
        _ref$locale = _ref.locale,
        locale = _ref$locale === void 0 ? {} : _ref$locale,
        _ref$disableTextRecog = _ref.disableTextRecognize,
        disableTextRecognize = _ref$disableTextRecog === void 0 ? false : _ref$disableTextRecog;

    var handleOpen = function handleOpen(href) {
      if (openLink) {
        var normalizedLink = normalizeLink(href, protocolAllowList);
        openLink(normalizedLink);
      } else {
        openLinkInWindow(href, protocolAllowList);
      }
    };

    var serializer = (_config$clipboard = config.clipboard) == null ? void 0 : _config$clipboard.serializer;

    var plugin = _extends({}, moFactory({}), {
      renderNode: {
        link: function link(props, controller) {
          var node = props.node;
          var linkNode = node;
          var attributes = props.attributes,
              children = props.children;

          var _ref2 = linkNode.data || {},
              _ref2$href = _ref2.href,
              href = _ref2$href === void 0 ? '' : _ref2$href,
              cardInfo = _ref2.cardInfo;

          var isRenderCard = cardInfo && cardInfo.displayType === 'card';
          return isRenderCard ? /*#__PURE__*/_createElement(LinkCard, _extends({}, props, {
            locale: locale,
            isMobile: isMoblie,
            handleOpen: handleOpen,
            controller: controller
          })) : /*#__PURE__*/_createElement(Link, _extends({}, attributes, {
            target: "_blank",
            href: sanitizeUrl(href, protocolAllowList),
            onOpenLink: handleOpen
          }), children());
        }
      },
      commands: {
        copyLink: createCopyLink(serializer)
      },
      onAction: function onAction(action, controller, next) {
        var type = action.type,
            payload = action.payload;

        if (type === LINK_COPY_LINK) {
          var _ref3 = payload,
              node = _ref3.node;
          return controller.command('copyLink', node);
        }

        return next();
      },
      queries: {
        getText: function getText(_, _ref4) {
          var node = _ref4.node;
          return node.text;
        },
        getMinTableColWidth: getMinTableColWidth
      }
    }); // 支持 purelink 识别的情况下，添加 decorateNode 和 renderMark


    if (!disableTextRecognize) {
      plugin.renderMark = function (props, _, next) {
        var mark = props.mark,
            marks = props.marks;

        if (mark.type === 'link' && !marks.find(function (_ref5) {
          var type = _ref5.type;
          return type === 'unlink';
        })) {
          var attributes = props.attributes,
              children = props.children;
          var href = mark.data.href;
          return /*#__PURE__*/_createElement(Link, _extends({}, attributes, {
            target: "_blank",
            href: sanitizeUrl(href, protocolAllowList),
            onOpenLink: handleOpen
          }), children());
        }

        return next();
      }; // @ts-ignore


      plugin.decorateNode = LinkPlugin.createDecorateNode(protocolAllowList);
    }

    return plugin;
  };
}
//# sourceMappingURL=createLinkPlugin.js.map