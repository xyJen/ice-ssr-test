{"version":3,"sources":["../../../../src/plugins/link/createLinkPlugin.tsx"],"names":["React","LinkPlugin","sanitizeUrl","LinkBiPlugin","Link","LinkCard","moFactory","normalizeLink","openLinkInWindow","openLink","createCopyLink","utils","LINK_COPY_LINK","actions","createLinkPluginFactory","isMoblie","getMinTableColWidth","getMinTableColWidthForMobile","createLinkPlugin","config","link","protocolAllowList","locale","disableTextRecognize","handleOpen","href","normalizedLink","serializer","clipboard","plugin","renderNode","props","controller","node","linkNode","attributes","children","data","cardInfo","isRenderCard","displayType","commands","copyLink","onAction","action","next","type","payload","command","queries","getText","_","text","renderMark","mark","marks","find","decorateNode","createDecorateNode"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { LinkPlugin } from '@ali/4ever-bamboo';\nimport { Controller, Action, Inline, Plugin } from '@ali/4ever-cangjie';\nimport { sanitizeUrl } from '@ali/4ever-utils';\nimport { LinkProperties } from '@ali/4ever-mo';\nimport { LinkPlugin as LinkBiPlugin } from '@ali/4ever-bi';\nimport Link from './link';\nimport LinkCard from './LinkCard';\nimport { LinkPluginConfig } from './types';\nimport { moFactory } from '@ali/4ever-plugin-link';\n\nconst { normalizeLink, openLink: openLinkInWindow } = LinkPlugin;\n\nconst { createCopyLink } = LinkBiPlugin.utils;\nconst { LINK_COPY_LINK } = LinkBiPlugin.actions;\n\nexport function createLinkPluginFactory(isMoblie: boolean) {\n  const getMinTableColWidth = isMoblie ? LinkPlugin.getMinTableColWidthForMobile : LinkPlugin.getMinTableColWidth;\n\n  return function createLinkPlugin(config: { link?: LinkPluginConfig; clipboard?: { serializer?: any } }) {\n    const { openLink, protocolAllowList = ['http:', 'https:', 'dingtalk:', 'taobao:'], locale = {}, disableTextRecognize = false } = config.link || {};\n\n    const handleOpen = (href: string) => {\n      if (openLink) {\n        const normalizedLink = normalizeLink(href, protocolAllowList);\n        openLink(normalizedLink);\n      } else {\n        openLinkInWindow(href, protocolAllowList);\n      }\n    };\n\n    const serializer = config.clipboard?.serializer;\n\n    const plugin = {\n      ...moFactory({}),\n      renderNode: {\n        link: (props, controller) => {\n          const { node } = props;\n          const linkNode = node as LinkProperties;\n\n          const { attributes, children } = props;\n          const { href = '', cardInfo } = linkNode.data || {};\n          const isRenderCard = cardInfo && cardInfo.displayType === 'card';\n\n          return (\n            isRenderCard\n              ?\n                <LinkCard\n                  {...props}\n                  locale={locale}\n                  isMobile={isMoblie}\n                  handleOpen={handleOpen}\n                  controller={controller}\n                />\n              :\n                <Link\n                  {...attributes}\n                  target=\"_blank\"\n                  href={sanitizeUrl(href, protocolAllowList)}\n                  onOpenLink={handleOpen}\n                >\n                  {children()}\n                </Link>\n          );\n        },\n      },\n      commands: {\n        copyLink: createCopyLink(serializer),\n      },\n      onAction(\n        action: Action,\n        controller: Controller,\n        next: () => Controller,\n      ): Controller {\n        const { type, payload } = action;\n        if (type === LINK_COPY_LINK) {\n          const { node } = payload as { node: Inline };\n          return controller.command('copyLink', node);\n        }\n        return next();\n      },\n      queries: {\n        getText(_, { node }: { node: Inline }) {\n          return node.text;\n        },\n        getMinTableColWidth,\n      },\n    } as unknown as Plugin;\n\n    // 支持 purelink 识别的情况下，添加 decorateNode 和 renderMark\n    if (!disableTextRecognize) {\n      plugin.renderMark = (props, _, next) => {\n        const { mark, marks } = props;\n\n        if (mark.type === 'link' && !marks.find(({ type }) => type === 'unlink')) {\n          const { attributes, children } = props;\n          const { href } = mark.data;\n          return (\n            <Link\n              {...attributes}\n              target=\"_blank\"\n              href={sanitizeUrl(href, protocolAllowList)}\n              onOpenLink={handleOpen}\n            >\n              {children()}\n            </Link>\n          );\n        }\n        return next();\n      };\n      // @ts-ignore\n      plugin.decorateNode = LinkPlugin.createDecorateNode(protocolAllowList);\n    }\n\n    return plugin;\n  };\n}\n"],"file":"createLinkPlugin.js"}