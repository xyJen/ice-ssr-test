import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { theme } from '@ali/4ever-bamboo';
import { URLLinkCard } from '@ali/we-biz-link-card';
import { LinkPlugin } from '@ali/4ever-bi';
import { getClosestContainerBlock, getInnerWidth } from '@ali/4ever-utils';
var LINK_COPY_LINK = LinkPlugin.actions.LINK_COPY_LINK;
var _theme$link = theme.link,
    CARD_WIDTH = _theme$link.width,
    CARD_HEIGHT = _theme$link.height,
    margin = _theme$link.margin;

var getMobileMaxWidth = function getMobileMaxWidth(value, node) {
  var _getInnerWidth;

  var closestBlock = getClosestContainerBlock(value, node);
  if (closestBlock) return (_getInnerWidth = getInnerWidth(closestBlock)) != null ? _getInnerWidth : '100%';
  return '100%';
};

function copyLink(node) {
  return {
    type: LINK_COPY_LINK,
    payload: {
      node: node
    }
  };
}

var Wrapper = /*#__PURE__*/styled.span(["cursor:default;display:inline-block;line-height:normal;"]);

var LinkCard = function LinkCard(props) {
  var node = props.node,
      controller = props.controller,
      handleOpen = props.handleOpen,
      attributes = props.attributes,
      locale = props.locale,
      isMobile = props.isMobile;
  var cardWidth = CARD_WIDTH;
  var cardHeight = CARD_HEIGHT;
  var linkNode = node;

  var _ref = linkNode.data || {},
      _ref$href = _ref.href,
      href = _ref$href === void 0 ? '' : _ref$href,
      cardInfo = _ref.cardInfo;

  var _ref2 = cardInfo || {},
      _ref2$title = _ref2.title,
      title = _ref2$title === void 0 ? '' : _ref2$title,
      _ref2$imgURL = _ref2.imgURL,
      imgURL = _ref2$imgURL === void 0 ? '' : _ref2$imgURL,
      _ref2$desc = _ref2.desc,
      desc = _ref2$desc === void 0 ? '' : _ref2$desc;

  var text = controller.query('getText', {
    node: node
  }) || '';
  var urlInfo = React.useMemo(function () {
    return {
      title: text.trim() === href.trim() ? title : text,
      imgURL: imgURL,
      desc: desc
    };
  }, [text, title, imgURL, desc]);
  var cardLocale = locale;
  var _cardLocale$edit = cardLocale.edit,
      edit = _cardLocale$edit === void 0 ? '' : _cardLocale$edit,
      _cardLocale$copy = cardLocale.copy,
      copy = _cardLocale$copy === void 0 ? '' : _cardLocale$copy,
      _cardLocale$unlink = cardLocale.unlink,
      unlink = _cardLocale$unlink === void 0 ? '' : _cardLocale$unlink,
      _cardLocale$delete = cardLocale["delete"],
      deleteLocale = _cardLocale$delete === void 0 ? '' : _cardLocale$delete,
      _cardLocale$styleText = cardLocale.styleText,
      styleText = _cardLocale$styleText === void 0 ? '' : _cardLocale$styleText;
  var tooltipLocale = {
    editTooltip: edit,
    copyTooltip: copy,
    unlinkTooltip: unlink,
    deleteTooltip: deleteLocale,
    switchStyleTooltip: styleText
  };
  var linkCardLocale = React.useMemo(function () {
    return _extends({}, cardLocale, tooltipLocale);
  }, [locale]);

  var _React$useState = React.useState('100%'),
      maxWidth = _React$useState[0],
      setMaxwidth = _React$useState[1];

  React.useEffect(function () {
    setMaxwidth(getMobileMaxWidth(controller.value, node));
  }, []);
  var handleCopy = React.useCallback(function (e) {
    e.preventDefault();
    e.stopPropagation();
    controller.run('onAction', copyLink(node));
  }, [controller, node]);
  return /*#__PURE__*/_createElement(Wrapper, _extends({}, attributes, {
    style: {
      width: isMobile ? maxWidth : cardWidth,
      height: cardHeight,
      margin: margin
    }
  }), /*#__PURE__*/_createElement(URLLinkCard, {
    isSelected: false,
    state: 'normal',
    cardStyle: 'indoc',
    url: href,
    readonly: true,
    isMobile: isMobile,
    locale: linkCardLocale,
    urlInfo: urlInfo,
    onOpenURL: handleOpen // @ts-ignore
    ,
    onCopy: controller.canCopy && handleCopy // @ts-ignore
    ,
    urlTestID: "link-toolbar-visit",
    cardTestID: "link-card",
    copyBtnTestID: "link-toolbar-copy"
  }));
};

export default /*#__PURE__*/React.memo(LinkCard);
//# sourceMappingURL=LinkCard.js.map