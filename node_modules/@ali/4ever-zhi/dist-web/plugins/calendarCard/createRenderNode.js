import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useCallback, useEffect, useRef, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { memoize } from 'lodash-es';
import { CalendarCardPlugin } from '@ali/4ever-bamboo';
import FlashCalendarCardContainer from "./shanhui/FlashCalendarCardContainer";
import { JumpToCalendarEventType, CalendarType } from "./type";
var TimeTextParagraph = CalendarCardPlugin.TimeTextParagraph,
    PlaceTextParagraph = CalendarCardPlugin.PlaceTextParagraph,
    SubjectParagraph = CalendarCardPlugin.SubjectParagraph,
    ReceiversParagraph = CalendarCardPlugin.ReceiversParagraph,
    CommentTextParagraph = CalendarCardPlugin.CommentTextParagraph,
    CommentTextWrapper = CalendarCardPlugin.CommentTextWrapper,
    ContainerWrapper = CalendarCardPlugin.ContainerWrapper,
    BodyWrapper = CalendarCardPlugin.BodyWrapper,
    SubjectPlaceholder = CalendarCardPlugin.SubjectPlaceholder,
    TimePlaceholder = CalendarCardPlugin.TimePlaceholder;
export default function createRenderNode(cardConfig) {
  var locale = cardConfig.locale,
      isMobile = cardConfig.isMobile,
      calendarMode = cardConfig.mode,
      rest = _objectWithoutPropertiesLoose(cardConfig, ["locale", "isMobile", "mode"]);

  return function (props) {
    var node = props.node;
    var _ref = node.data,
        metadata = _ref.metadata;
    var _metadata$mode = metadata.mode,
        mode = _metadata$mode === void 0 ? calendarMode : _metadata$mode;

    if (mode === CalendarType.SHANHUI) {
      return /*#__PURE__*/_createElement(FlashCalendarCardContainer, _extends({}, rest, {
        metadata: metadata,
        locale: locale
      }));
    }

    return /*#__PURE__*/_createElement(CalendarCardContainer, _extends({}, rest, {
      metadata: metadata,
      locale: locale
    }));
  };
} // 当mousedown与click之间的间隔少于150ms时认为是点击点击而不是拖动选中

var clickTimeout = 150;

function CalendarCardContainer(props) {
  var locale = props.locale,
      metadata = props.metadata,
      jumpToCalendar = props.jumpToCalendar,
      openProfile = props.openProfile;
  var time = metadata.time,
      place = metadata.place,
      comment = metadata.comment,
      _metadata$subject = metadata.subject,
      subject = _metadata$subject === void 0 ? '' : _metadata$subject,
      redirectUrl = metadata.redirectUrl,
      isPlaceholder = metadata.isPlaceholder;
  var jumpToCalendarFactory = useCallback(memoize(function (eventType) {
    return function (event) {
      event.preventDefault();
      event.stopPropagation();
      if (!jumpToCalendar) return;
      if (isPlaceholder) return;
      jumpToCalendar(redirectUrl, eventType);
    };
  }), [jumpToCalendar]);

  var _useState = useState({}),
      style = _useState[0],
      setStyle = _useState[1];

  useEffect(function () {
    setStyle({
      color: isPlaceholder ? 'rgba(17,31,44,0.4)' : '',
      height: 'auto',
      width: 'auto',
      border: '1px solid rgba(17,31,44,0)'
    });
  }, [isPlaceholder]);
  var clickTimeRef = useRef();
  var handleMouseDown = useCallback(function (event) {
    clickTimeRef.current = new Date().getTime();
    event.stopPropagation();
  }, []);
  var handleClick = useCallback(function (event) {
    if (!clickTimeRef.current || new Date().getTime() - clickTimeRef.current > clickTimeout) {
      event.stopPropagation();
    }

    clickTimeRef.current = undefined;
  }, []);
  return /*#__PURE__*/_createElement(ContainerWrapper, {
    onMouseDown: handleMouseDown,
    onClick: handleClick,
    style: style
  }, /*#__PURE__*/_createElement(BodyWrapper, null, /*#__PURE__*/_createElement(SubjectParagraph, {
    isPlaceholder: isPlaceholder,
    metadata: metadata,
    subject: isPlaceholder ? /*#__PURE__*/_createElement(SubjectPlaceholder, null, subject) : subject,
    jumpToCalendar: jumpToCalendarFactory(JumpToCalendarEventType.RECEIVER)
  }), /*#__PURE__*/_createElement(TimeTextParagraph, null, isPlaceholder ? /*#__PURE__*/_createElement(TimePlaceholder, null, time) : time), /*#__PURE__*/_createElement(PlaceTextParagraph, null, place), /*#__PURE__*/_createElement(ReceiversParagraph, {
    locale: locale,
    metadata: metadata,
    openProfile: openProfile,
    jumpToCalendar: jumpToCalendarFactory(JumpToCalendarEventType.RECEIVER)
  }), comment ? /*#__PURE__*/_createElement(CommentTextParagraph, null, /*#__PURE__*/_createElement(CommentTextWrapper, null, comment)) : null));
}
//# sourceMappingURL=createRenderNode.js.map