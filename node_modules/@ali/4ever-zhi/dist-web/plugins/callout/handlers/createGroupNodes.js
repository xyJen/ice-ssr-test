import equal from 'fast-deep-equal';
import { Heading, Paragraph } from '@ali/4ever-mo';
import { createCallout, isCallout } from "../utils";
export default function createGroupNodes(config) {
  return function groupNodes(_ref, ctx, controller, next) {
    var start = _ref[0],
        end = _ref[1];
    var parent = ctx.parent,
        groups = ctx.groups;
    var parentGroup = groups[groups.length - 1];
    var first = parent.nodes[start];

    if (config.shouldDisableGroup && config.shouldDisableGroup()) {
      return next();
    } // 仅仅支持一级分组


    if ((Paragraph.isParagraph(first) || Heading.isHeading(first)) && first.data.calloutPr && !isCallout(parentGroup)) {
      var i = start + 1;

      while (i < end) {
        var node = parent.nodes[i];

        if (!((Paragraph.isParagraph(node) || Heading.isHeading(node)) && node.data.calloutPr && equal(node.data.calloutPr, first.data.calloutPr))) {
          break;
        }

        i += 1;
      }

      var children = parent.nodes.slice(start, i);
      var result = createCallout({
        data: first.data,
        key: first.key + "-group",
        nodes: children
      });
      return {
        node: result,
        remainedRange: [i, end]
      };
    }

    return next();
  };
}
//# sourceMappingURL=createGroupNodes.js.map