{"version":3,"sources":["../../../../src/plugins/onlineVideo/index.tsx"],"names":["React","environment","sanitizeUrl","moFactory","YoukuPlayer","VideoWrapper","YoukuPlayerWrapper","YoukuPlayerPlaceholder","EmbedFileCardWrapper","CardIconWrapper","CardContentWrapper","CardContentInnerWrapper","ContentHeader","isMobile","IS_MOBILE","createEmbedPlugin","config","onlineVideoConfig","onlineVideo","locale","getIFramePlayerURL","isIFramePlayerSupported","enableVideoPreview","handleMediaLoadError","src","onMediaLoadError","handleMediaLoadSuccess","onMediaLoadSuccess","renderVideoContent","props","node","data","type","poster","width","height","videoRef","createRef","setTimeout","current","disablePictureInPicture","notSupportText","url","renderNode","_","attributes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { environment } from '@ali/4ever-cangjie';\nimport { sanitizeUrl } from '@ali/4ever-utils';\nimport { moFactory } from '@ali/4ever-plugin-online-video';\nimport {\n  YoukuPlayer,\n  VideoWrapper,\n  YoukuPlayerWrapper,\n  YoukuPlayerPlaceholder,\n  EmbedFileCardWrapper,\n  CardIconWrapper,\n  CardContentWrapper,\n  CardContentInnerWrapper,\n  ContentHeader,\n} from './styled';\n\nconst isMobile = environment.IS_MOBILE;\n\nexport default function createEmbedPlugin(config) {\n  const onlineVideoConfig = config.onlineVideo || {};\n  const { locale = {} } = onlineVideoConfig;\n  const {\n    getIFramePlayerURL,\n    isIFramePlayerSupported,\n    enableVideoPreview = true,\n  } = onlineVideoConfig;\n\n  const handleMediaLoadError = (src) => {\n    const { onMediaLoadError } = onlineVideoConfig;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  const handleMediaLoadSuccess = (src) => {\n    const { onMediaLoadSuccess } = onlineVideoConfig;\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(src);\n    }\n  };\n\n  const renderVideoContent = (props) => {\n    const { node } = props;\n    const { data } = node;\n    const { src } = data;\n    const { type } = data;\n    const { poster } = data;\n    if (!enableVideoPreview) {\n      return (\n        <EmbedFileCardWrapper>\n          <CardIconWrapper>\n            <img\n              src=\"https://img.alicdn.com/tfs/TB1Ns0dlUH1gK0jSZSyXXXtlpXa-24-24.svg\"\n              alt=\"icon\"\n              style={{ width: 23, height: 24 }}\n            />\n          </CardIconWrapper>\n          <CardContentWrapper>\n            <CardContentInnerWrapper>\n              <ContentHeader>{src}</ContentHeader>\n            </CardContentInnerWrapper>\n          </CardContentWrapper>\n        </EmbedFileCardWrapper>\n      );\n    }\n\n    if (type === 'mp4') {\n      const videoRef = React.createRef<HTMLVideoElement>();\n      // React16.8 不支持 video 标签的 disablePictureInPicture 属性，16.9 支持\n      // 暂时只能通过这种方式，后续升级 React 后，改回 disablePictureInPicture 属性\n      setTimeout(() => {\n        if (videoRef.current) {\n          // @ts-ignore\n          videoRef.current.disablePictureInPicture = true;\n        }\n      }, 100);\n\n      return (\n        <VideoWrapper isMobile={isMobile}>\n          <video // eslint-disable-line\n            controls\n            data-type=\"onlineVideo\"\n            raw-controls=\"true\" // UC内核独有属性\n            controlsList=\"nodownload noremoteplayback\"\n            ref={videoRef}\n            poster={sanitizeUrl(poster)}\n            onCanPlay={() => handleMediaLoadSuccess(src)}\n            onError={() => handleMediaLoadError(src)}\n          >\n            <source src={src} type=\"video/mp4\" />\n          </video>\n        </VideoWrapper>\n      );\n    }\n    if (type === 'youku') {\n      // 容器有bug：https://work.aone.alibaba-inc.com/issue/26118887\n      if (isIFramePlayerSupported && !isIFramePlayerSupported()) {\n        return (\n          <YoukuPlayerPlaceholder>\n            <span>{locale.notSupportText}</span>\n          </YoukuPlayerPlaceholder>\n        );\n      }\n      const url = getIFramePlayerURL && getIFramePlayerURL(src);\n      if (url) {\n        return (\n          <YoukuPlayerWrapper isMobile={isMobile}>\n            <YoukuPlayer src={url} allowFullScreen />\n          </YoukuPlayerWrapper>\n        );\n      }\n      return null;\n    }\n\n    return null;\n  };\n\n  return {\n    ...moFactory({}),\n    renderNode: {\n      onlineVideo: (props, _) => {\n        const { attributes } = props;\n        return <div {...attributes}>{renderVideoContent(props)}</div>;\n      },\n    },\n  };\n}\n"],"file":"index.js"}