import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useUserData } from '@ali/4ever-cangjie';
import styled from 'styled-components';
import { HeadingGroupPlugin, SubjectPlugin } from '@ali/4ever-bamboo';
import Content from "./content";
var components = SubjectPlugin.components,
    utils = SubjectPlugin.utils;
var InlinePlaceholder = components.InlinePlaceholder,
    Placeholder = components.Placeholder;
var isEmptyNode = utils.isEmptyNode;
var Title = HeadingGroupPlugin.Title;
var toggleFold = HeadingGroupPlugin.actions.toggleFold;
var SubjectBox = /*#__PURE__*/styled.div(["position:relative;padding-left:24px;margin-top:36px;"]);
var ToolBox = /*#__PURE__*/styled.div(["position:absolute;height:28px;right:0;top:0;display:flex;align-items:center;justify-content:flex-end;"]);
var ContentBox = /*#__PURE__*/styled(Content)(["& > [data-type='heading-1-group'] > [data-name='heading-group-title']{padding-right:", "px;}& > *{margin-left:-24px;padding-left:24px !important;}"], function (props) {
  return props.paddingRight || 0;
});
var BorderBar = /*#__PURE__*/styled.div(["position:absolute;left:0;top:0;width:4px;height:100%;background:", ";transition:all 0.2s ease-in-out;"], function (props) {
  return props.color;
});
var TitleContent = /*#__PURE__*/styled.div(["& > *{margin-left:-24px;padding-left:24px !important;}"]);
var TitleBox = /*#__PURE__*/styled(Title)(["padding-right:", "px;& .data-comment-bubbles{left:", "px;}"], function (props) {
  return props.paddingRight;
}, function (props) {
  return props.paddingRight;
});

/**
 * 议题区块
 * @param props
 * @returns
 * @todo 标题 margin 会导致 border 在折叠状态下偏长，这个比较难解
 */
var Subject = function Subject(props) {
  var node = props.node,
      attributes = props.attributes,
      controller = props.controller,
      children = props.children,
      config = props.config;
  var _config$disableFold = config.disableFold,
      disableFold = _config$disableFold === void 0 ? false : _config$disableFold,
      _config$locale = config.locale,
      locale = _config$locale === void 0 ? {} : _config$locale,
      reviewConfig = config.review;

  var _ref = reviewConfig || {},
      MeetingClock = _ref.renderMeetingClock;

  var topicTitlePlaceholderBefore = locale.topicTitlePlaceholderBefore,
      topicTitlePlaceholderAfter = locale.topicTitlePlaceholderAfter;
  var fold = useUserData(node, 'fold') || false;
  var _node$data$subjectPr = node.data.subjectPr,
      subjectPr = _node$data$subjectPr === void 0 ? {} : _node$data$subjectPr;
  var id = subjectPr.id,
      name = subjectPr.name;

  var _React$useState = React.useState(0),
      toolWidth = _React$useState[0],
      setToolWidth = _React$useState[1];

  var toolRef = React.useRef(null);
  var handleFoldChange = React.useCallback(function (_fold) {
    var first = node.nodes[0];
    controller.run('onAction', toggleFold({
      node: first,
      fold: _fold
    }));
  }, [controller, node]);
  var refreshToolWidth = React.useCallback(function () {
    var tool = toolRef.current;

    if (tool && tool.offsetWidth !== toolWidth) {
      setToolWidth(tool.offsetWidth);
    }
  }, [toolWidth]);
  React.useLayoutEffect(function () {
    refreshToolWidth();
  }, [refreshToolWidth]);
  /**
   * 议题边框颜色 @狗毛
   */

  var color = React.useMemo(function () {
    if (name === 'review') {
      return '#F4C800';
    }

    if (name === 'topic') {
      return '#0089FF';
    }

    if (name === 'conclusion') {
      return '#00B042';
    }

    return '#0089FF';
  }, [name]); // 切割议题的标题和内容块

  var titleNode;
  var titleElement;
  var contentElements;

  if (Array.isArray(children) && children.length >= 1) {
    titleNode = node.nodes[0];
    titleElement = children[0];
    contentElements = children.slice(1);
  } else {
    return /*#__PURE__*/_createElement(React.Fragment, null, children);
  }

  var displayTitlePlaceholder = function displayTitlePlaceholder(item) {
    // 类型是议题 && 非预览模式 && 没有标题 && 有 placeholder 文字配置才展示
    if (name === 'topic' && isEmptyNode(item) && topicTitlePlaceholderBefore && topicTitlePlaceholderAfter) {
      return true;
    }

    return false;
  };

  var _ref2 = /*#__PURE__*/_createElement(MeetingClock, {
    node: node
  });

  var renderTitleToolbar = function renderTitleToolbar() {
    var toolbars = [];

    if (name === 'topic') {
      MeetingClock && toolbars.push(_ref2);
    }

    return toolbars;
  };

  var _ref3 = /*#__PURE__*/_createElement(InlinePlaceholder, null, topicTitlePlaceholderBefore, ' @ ', topicTitlePlaceholderAfter);

  var renderTitlePlaceholder = function renderTitlePlaceholder() {
    if (name === 'topic') {
      return _ref3;
    }

    return '';
  };

  return /*#__PURE__*/_createElement(SubjectBox, _extends({}, attributes, {
    id: id,
    "data-name": "subject-group",
    "data-type": node.type,
    "data-foldable": true,
    "data-cangjie-group-block": true,
    paddingRight: toolWidth
  }), /*#__PURE__*/_createElement(BorderBar, {
    color: color
  }), /*#__PURE__*/_createElement(TitleBox, {
    dataName: "subject-group-title",
    fold: fold,
    onChange: handleFoldChange,
    disabled: disableFold,
    paddingRight: toolWidth
  }, /*#__PURE__*/_createElement(TitleContent, {
    "data-name": "subject-group-title-content"
  }, /*#__PURE__*/_createElement(Placeholder, {
    controller: controller,
    node: titleNode,
    display: displayTitlePlaceholder,
    placeholder: renderTitlePlaceholder()
  }, titleElement)), /*#__PURE__*/_createElement(ToolBox, {
    ref: toolRef
  }, renderTitleToolbar())), /*#__PURE__*/_createElement(ContentBox, {
    config: config,
    dataName: "subject-group-content",
    controller: controller,
    node: node,
    fold: !disableFold && fold,
    paddingRight: toolWidth
  }, contentElements));
};

Subject.displayName = 'Subject';
export default Subject;
//# sourceMappingURL=subject.js.map