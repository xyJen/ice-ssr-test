import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { sanitizeUrl } from '@ali/4ever-utils';
import { v4 as uuid } from 'uuid';
import { get } from 'lodash-es';
import { EmbedPlugin, theme } from '@ali/4ever-bamboo';
import { CardIconWrapper, CardContentWrapper, ContentHeader, ContentDesc, EmbedFilePreviewWrapper, PreviewHeaderWrapper, PreviewContentWrapper, CardContentInnerWrapper, PreviewError, PreviewErrorText, PreviewErrorRetry, EnlargeIconHide } from "./styled";
import { moFactory } from '@ali/4ever-plugin-embed';
var DEFAULT_PREVIEW_HEIGHT = theme.embed.previewHeight;
var getFileTypeForRead = EmbedPlugin.getFileTypeForRead,
    getIcon = EmbedPlugin.getIcon,
    formatSize = EmbedPlugin.formatSize,
    FileTypeMap = EmbedPlugin.FileTypeMap,
    EmbedDownloadButton = EmbedPlugin.EmbedDownloadButton,
    EmbedCard = EmbedPlugin.EmbedCard,
    EmbedFailedCard = EmbedPlugin.EmbedFailedCard; // 只读下 allowDownload 附件只支持 boolean 类型

export default function createEmbedPlugin(config) {
  var onDownloadFile = function onDownloadFile(props) {
    return function () {
      var node = props.node;
      var data = node.data;
      var src = data.src,
          name = data.name,
          type = data.type,
          size = data.size;
      var embedConfig = config.embed || {};
      var downloadFile = embedConfig.downloadFile;

      if (downloadFile) {
        downloadFile(src, {
          name: name,
          type: type,
          size: size
        });
      }
    };
  };

  var preview = function preview(props, iframeId, previewErrorId, enlargeHideId) {
    var node = props.node;
    var data = node.data;
    var src = data.src,
        type = data.type;
    var embedConfig = config.embed || {};
    var onPreview = embedConfig.transformDocURL;

    if (!onPreview) {
      return;
    }

    if (type === FileTypeMap.Video || type === FileTypeMap.Audio) {
      return;
    }

    onPreview(src).then(function (res) {
      var _ref = res || {},
          previewUrl = _ref.previewUrl;

      if (previewUrl) {
        var iframe = document.getElementById(iframeId);

        if (iframe) {
          iframe.src = sanitizeUrl(previewUrl);
        }

        var enlargeHide = document.getElementById(enlargeHideId);

        if (enlargeHide) {
          enlargeHide.style.display = 'block';
        }

        return Promise.resolve();
      } else {
        return Promise.reject('empty previewUrl');
      }
    })["catch"](function (e) {
      console.error(e);
      var previewError = document.getElementById(previewErrorId);
      var iframe = document.getElementById(iframeId);

      if (previewError) {
        previewError.style.display = 'block';
      }

      if (iframe) {
        iframe.style.display = 'none';
      }
    });
  };

  var renderCard = function renderCard(props) {
    var node = props.node;

    var _ref2 = config.embed || {},
        _ref2$locale = _ref2.locale,
        locale = _ref2$locale === void 0 ? {} : _ref2$locale,
        allowDownload = _ref2.allowDownload;

    var data = node.data;
    var name = data.name,
        size = data.size;
    return /*#__PURE__*/_createElement(EmbedCard, {
      name: name,
      allowDownload: allowDownload,
      isSelected: false,
      node: node,
      locale: locale,
      onDownloadFile: onDownloadFile(props),
      size: size
    });
  };

  var renderPreviewHeader = function renderPreviewHeader(props, mode) {
    var _ref3 = config.embed || {},
        _ref3$locale = _ref3.locale,
        locale = _ref3$locale === void 0 ? {} : _ref3$locale,
        allowDownload = _ref3.allowDownload;

    var node = props.node;
    var data = node.data;
    var size = data.size,
        name = data.name;
    return /*#__PURE__*/_createElement(PreviewHeaderWrapper, {
      mode: mode
    }, /*#__PURE__*/_createElement(CardIconWrapper, null, /*#__PURE__*/_createElement("img", {
      src: getIcon(getFileTypeForRead(name)),
      alt: "icon",
      style: {
        width: 16,
        height: 23
      }
    })), /*#__PURE__*/_createElement(CardContentWrapper, null, /*#__PURE__*/_createElement(CardContentInnerWrapper, null, /*#__PURE__*/_createElement(ContentHeader, {
      mode: mode
    }, name), /*#__PURE__*/_createElement(ContentDesc, {
      mode: mode
    }, formatSize(size)))), allowDownload && /*#__PURE__*/_createElement(EmbedDownloadButton, {
      title: locale == null ? void 0 : locale.download,
      onDownloadFile: onDownloadFile(props),
      allowDownload: allowDownload
    }));
  };

  var AutoInitPreview = function AutoInitPreview(_ref4) {
    var initPreview = _ref4.initPreview;
    useEffect(function () {
      if (initPreview) initPreview();
    }, [initPreview]);
    return null;
  };

  var renderPreview = function renderPreview(props) {
    var _ref5 = config.embed || {},
        _ref5$locale = _ref5.locale,
        locale = _ref5$locale === void 0 ? {} : _ref5$locale;

    var node = props.node;
    var data = node.data;
    var previewSize = data.previewSize,
        type = data.type;
    var iframeId = uuid();
    var previewErrorId = uuid();
    var height = get(previewSize, 'height', DEFAULT_PREVIEW_HEIGHT);
    var enlargeHideId = uuid();
    return /*#__PURE__*/_createElement(EmbedFilePreviewWrapper, {
      style: {
        height: height
      }
    }, renderPreviewHeader(props), /*#__PURE__*/_createElement(PreviewContentWrapper, null, /*#__PURE__*/_createElement(PreviewError, {
      id: previewErrorId
    }, /*#__PURE__*/_createElement(PreviewErrorText, null, locale.previewError, /*#__PURE__*/_createElement(PreviewErrorRetry, {
      onClick: function onClick() {
        return preview(props, iframeId, previewErrorId, enlargeHideId);
      }
    }, locale.reTryPreview))), /*#__PURE__*/_createElement("iframe", {
      style: {
        width: '100%',
        height: '100%',
        border: 'none',
        background: '#EDEDED'
      },
      title: "preview",
      src: "",
      id: iframeId
    }), type === FileTypeMap.Ppt && /*#__PURE__*/_createElement(EnlargeIconHide, {
      id: enlargeHideId
    })), /*#__PURE__*/_createElement(AutoInitPreview, {
      initPreview: function initPreview() {
        preview(props, iframeId, previewErrorId, enlargeHideId);
      }
    }));
  };

  return _extends({}, moFactory({}), {
    renderNode: function renderNode(props, _, next) {
      var node = props.node;

      if (node.type !== 'embed' || node.data.type === FileTypeMap.Video || node.data.type === FileTypeMap.Audio) {
        return next();
      }

      var data = node.data;
      var viewType = data.viewType,
          errorType = data.errorType;
      var attributes = props.attributes;

      var _ref6 = config.embed || {},
          _ref6$locale = _ref6.locale,
          locale = _ref6$locale === void 0 ? {} : _ref6$locale;

      if (errorType) return /*#__PURE__*/_createElement(EmbedFailedCard, {
        node: node,
        locale: locale
      });
      return /*#__PURE__*/_createElement("div", attributes, viewType === 'preview' ? renderPreview(props) : renderCard(props));
    }
  });
}
//# sourceMappingURL=index.js.map