import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { EmbedPlugin } from '@ali/4ever-bamboo';
var FileTypeMap = EmbedPlugin.FileTypeMap,
    VideoPlayer = EmbedPlugin.VideoPlayer,
    MobileEmbedCard = EmbedPlugin.MobileEmbedCard,
    EmbedFailedCard = EmbedPlugin.EmbedFailedCard;
export default function createEmbedPlugin(config) {
  var onDownloadFile = function onDownloadFile(props) {
    var node = props.node;
    var data = node.data;
    var src = data.src,
        name = data.name,
        type = data.type,
        size = data.size;
    var embedConfig = config.video || {};
    var downloadFile = embedConfig.downloadFile;

    if (downloadFile) {
      downloadFile(src, {
        name: name,
        type: type,
        size: size
      });
    }
  };

  var handleMediaLoadError = function handleMediaLoadError(src) {
    var embedConfig = config.video || {};
    var onMediaLoadError = embedConfig.onMediaLoadError;

    if (onMediaLoadError) {
      onMediaLoadError(src);
    }
  };

  var handleMediaLoadSuccess = function handleMediaLoadSuccess(src) {
    var embedConfig = config.video || {};
    var onMediaLoadSuccess = embedConfig.onMediaLoadSuccess;

    if (onMediaLoadSuccess) {
      onMediaLoadSuccess(src);
    }
  };

  var renderCard = function renderCard(props) {
    var node = props.node,
        onPreview = props.onPreview;
    var data = node.data;
    var src = data.src,
        name = data.name,
        type = data.type,
        size = data.size;
    return /*#__PURE__*/_createElement(MobileEmbedCard, {
      name: name,
      onPreview: onPreview,
      src: src,
      type: type,
      size: size
    });
  };

  var renderPreview = function renderPreview(props) {
    var isSelected = props.isSelected,
        node = props.node;

    var _ref = config.video || {},
        transformVideoURL = _ref.transformVideoURL,
        renderVideoMask = _ref.renderVideoMask,
        setTempPosterUrl = _ref.setTempPosterUrl,
        downloadFile = _ref.downloadFile,
        allowDownload = _ref.allowDownload,
        locale = _ref.locale,
        allowFullscreen = _ref.allowFullscreen;

    return /*#__PURE__*/_createElement(VideoPlayer, {
      transformVideoURL: transformVideoURL,
      onMediaLoadSuccess: handleMediaLoadSuccess,
      onMediaLoadError: handleMediaLoadError,
      setTempPosterUrl: setTempPosterUrl,
      node: node,
      isSelected: isSelected,
      renderVideoMask: renderVideoMask,
      allowDownload: downloadFile && allowDownload,
      onDownload: function onDownload() {
        return onDownloadFile(props);
      },
      locale: locale,
      allowFullscreen: allowFullscreen
    });
  };

  return {
    renderNode: {
      embed: function embed(props, _, next) {
        var node = props.node;

        if (node.data.type === FileTypeMap.Video && node.data.errorType) {
          var _config$video;

          return /*#__PURE__*/_createElement(EmbedFailedCard, {
            node: node,
            locale: (config == null ? void 0 : (_config$video = config.video) == null ? void 0 : _config$video.locale) || {}
          });
        }

        if (node.data.type === FileTypeMap.Video && node.data.src) {
          var data = node.data;
          var viewType = data.viewType;
          var attributes = props.attributes;
          return /*#__PURE__*/_createElement("div", attributes, viewType === 'preview' ? renderPreview(props) : renderCard(props));
        }

        return next();
      }
    }
  };
}
//# sourceMappingURL=index.js.map