{"version":3,"sources":["../../../../src/plugins/video/index.tsx"],"names":["React","EmbedPlugin","FileTypeMap","VideoPlayer","MobileEmbedCard","EmbedFailedCard","createEmbedPlugin","config","onDownloadFile","props","node","data","src","name","type","size","embedConfig","video","downloadFile","handleMediaLoadError","onMediaLoadError","handleMediaLoadSuccess","onMediaLoadSuccess","renderCard","onPreview","renderPreview","isSelected","transformVideoURL","renderVideoMask","setTempPosterUrl","allowDownload","locale","allowFullscreen","renderNode","embed","_","next","Video","errorType","viewType","attributes"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  EmbedPlugin,\n} from '@ali/4ever-bamboo';\n\nconst {\n  FileTypeMap,\n  VideoPlayer,\n  MobileEmbedCard,\n  EmbedFailedCard,\n} = EmbedPlugin;\n\nexport default function createEmbedPlugin(config) {\n  const onDownloadFile = (props) => {\n    const { node } = props;\n    const { data } = node;\n    const { src, name, type, size } = data;\n    const embedConfig = config.video || {};\n    const { downloadFile } = embedConfig;\n    if (downloadFile) {\n      downloadFile(src, {\n        name,\n        type,\n        size,\n      });\n    }\n  };\n\n  const handleMediaLoadError = (src) => {\n    const embedConfig = config.video || {};\n    const { onMediaLoadError } = embedConfig;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  const handleMediaLoadSuccess = (src) => {\n    const embedConfig = config.video || {};\n    const { onMediaLoadSuccess } = embedConfig;\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(src);\n    }\n  };\n\n  const renderCard = (props) => {\n    const { node, onPreview } = props;\n    const { data } = node;\n    const { src, name, type, size } = data;\n\n    return (\n      <MobileEmbedCard\n        name={name}\n        onPreview={onPreview}\n        src={src}\n        type={type}\n        size={size}\n      />\n    );\n  };\n\n  const renderPreview = (props) => {\n    const {\n      isSelected, node,\n    } = props;\n\n    const {\n      transformVideoURL, renderVideoMask, setTempPosterUrl,\n      downloadFile, allowDownload, locale, allowFullscreen,\n    } = config.video || {};\n\n    return (\n      <VideoPlayer\n        transformVideoURL={transformVideoURL}\n        onMediaLoadSuccess={handleMediaLoadSuccess}\n        onMediaLoadError={handleMediaLoadError}\n        setTempPosterUrl={setTempPosterUrl}\n        node={node}\n        isSelected={isSelected}\n        renderVideoMask={renderVideoMask}\n        allowDownload={downloadFile && allowDownload}\n        onDownload={() => onDownloadFile(props)}\n        locale={locale}\n        allowFullscreen={allowFullscreen}\n      />\n    );\n  };\n\n  return {\n    renderNode: {\n      embed: (props, _, next) => {\n        const { node } = props;\n        if (node.data.type === FileTypeMap.Video && node.data.errorType) {\n          return <EmbedFailedCard node={node} locale={config?.video?.locale || {}} />;\n        }\n  \n        if (node.data.type === FileTypeMap.Video && node.data.src) {\n          const { data } = node;\n          const { viewType } = data;\n          const { attributes } = props;\n          return (\n            <div\n              {...attributes}\n            >\n              {viewType === 'preview' ? renderPreview(props) : renderCard(props)}\n            </div>\n          );\n        }\n        return next();\n      },\n    },\n  };\n}\n"],"file":"index.js"}