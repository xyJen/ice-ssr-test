import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ImagePlugin } from '@ali/4ever-bamboo';
import { ImageWrapper } from "./styled";

var Image = function Image(props) {
  var imageRef = React.useRef(null);
  var controller = props.controller,
      node = props.node,
      imageConfig = props.imageConfig;
  var src = node.data.src;
  var previewImage = imageConfig.previewImage;

  var _React$useState = React.useState(false),
      isLoaded = _React$useState[0],
      setIsLoaded = _React$useState[1];

  var handleZoomImage = useCallback(function (event) {
    if (ImagePlugin.isParentClickable(controller, node)) {
      return;
    }

    event.preventDefault();
    event.stopPropagation();

    if (previewImage) {
      previewImage(src, node);
    }
  }, [previewImage, src, node, controller]);
  var handlers = React.useMemo(function () {
    return {
      onClick: handleZoomImage
    };
  }, [handleZoomImage]);
  var cursorStyle = !!imageConfig.previewImage && isLoaded ? 'zoom-in' : 'auto';
  return /*#__PURE__*/_createElement(ImageWrapper, {
    cursorStyle: cursorStyle
  }, /*#__PURE__*/_createElement(ImagePlugin.Img, _extends({
    ref: imageRef,
    node: node,
    controller: controller,
    imageConfig: imageConfig
  }, handlers, {
    onLoad: function onLoad() {
      return setIsLoaded(true);
    }
  })));
};

export default Image;
//# sourceMappingURL=image.js.map