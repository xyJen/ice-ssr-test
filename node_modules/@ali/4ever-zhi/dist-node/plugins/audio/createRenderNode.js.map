{"version":3,"sources":["../../../../src/plugins/audio/createRenderNode.tsx"],"names":["EmbedFailedCard","EmbedPlugin","createRenderNode","config","audioConfig","audio","locale","audioLocaleConfig","downloadFile","transformAudioURL","onMediaLoadSuccess","onMediaLoadError","allowDownload","embed","props","controller","next","node","data","type","src","errorType"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAGA;;uBAH4B,a;AAK5B,MAAM;AAAEA,EAAAA;AAAF,IAAsBC,uBAA5B;;AAEe,SAASC,gBAAT,CAA0BC,MAA1B,EAAuD;AACpE,QAAMC,WAAW,GAAGD,MAAM,CAACE,KAAP,IAAgB,EAApC;AACA,QAAM;AACJC,IAAAA,MAAM,EAAEC,iBAAiB,GAAG,EADxB;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,iBAHI;AAIJC,IAAAA,kBAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA;AANI,MAOFR,WAPJ;AASA,SAAO;AACLS,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAQC,UAAR,EAAoBC,IAApB,KAA6B;AAClC,YAAM;AAAEC,QAAAA;AAAF,UAAWH,KAAjB;;AACA,UAAIG,IAAI,CAACC,IAAL,CAAUC,IAAV,KAAmB,OAAnB,IAA8BF,IAAI,CAACC,IAAL,CAAUE,GAA5C,EAAiD;AAC/C,4BACE,eAAC,cAAD,6BACMN,KADN;AAEE,UAAA,UAAU,EAAEC,UAFd;AAGE,UAAA,UAAU,EAAEP,YAHd;AAIE,UAAA,MAAM,EAAED,iBAJV;AAKE,UAAA,iBAAiB,EAAEE,iBALrB;AAME,UAAA,kBAAkB,EAAEC,kBANtB;AAOE,UAAA,gBAAgB,EAAEC,gBAPpB;AAQE,UAAA,aAAa,EAAEC;AARjB,WADF;AAYD;;AACD,UAAIK,IAAI,CAACC,IAAL,CAAUC,IAAV,KAAmB,OAAnB,IAA8BF,IAAI,CAACC,IAAL,CAAUG,SAA5C,EAAuD;AACrD,4BAAO,eAAC,eAAD;AAAiB,UAAA,IAAI,EAAEJ,IAAvB;AAA6B,UAAA,MAAM,EAAEV;AAArC,UAAP;AACD;;AACD,aAAOS,IAAI,EAAX;AACD;AArBI,GAAP;AAuBD","sourcesContent":["import * as React from 'react';\nimport {\n  EmbedPlugin,\n} from '@ali/4ever-bamboo';\nimport Audio from './components/audio';\n\nconst { EmbedFailedCard } = EmbedPlugin;\n\nexport default function createRenderNode(config: Record<string, any>) {\n  const audioConfig = config.audio || {};\n  const {\n    locale: audioLocaleConfig = {},\n    downloadFile,\n    transformAudioURL,\n    onMediaLoadSuccess,\n    onMediaLoadError,\n    allowDownload,\n  } = audioConfig;\n\n  return {\n    embed: (props, controller, next) => {\n      const { node } = props;\n      if (node.data.type === 'audio' && node.data.src) {\n        return (\n          <Audio\n            {...props}\n            controller={controller}\n            onDownload={downloadFile}\n            locale={audioLocaleConfig}\n            transformAudioURL={transformAudioURL}\n            onMediaLoadSuccess={onMediaLoadSuccess}\n            onMediaLoadError={onMediaLoadError}\n            allowDownload={allowDownload}\n          />\n        );\n      }\n      if (node.data.type === 'audio' && node.data.errorType) {\n        return <EmbedFailedCard node={node} locale={audioLocaleConfig} />;\n      }\n      return next();\n    },\n  };\n}\n"],"file":"createRenderNode.js"}