{"version":3,"sources":["../../../../src/plugins/onlineVideo/index.tsx"],"names":["isMobile","environment","IS_MOBILE","createEmbedPlugin","config","onlineVideoConfig","onlineVideo","locale","getIFramePlayerURL","isIFramePlayerSupported","enableVideoPreview","handleMediaLoadError","src","onMediaLoadError","handleMediaLoadSuccess","onMediaLoadSuccess","renderVideoContent","props","node","data","type","poster","width","height","videoRef","React","createRef","setTimeout","current","disablePictureInPicture","notSupportText","url","renderNode","_","attributes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { environment } from '@ali/4ever-cangjie';\nimport { sanitizeUrl } from '@ali/4ever-utils';\nimport { moFactory } from '@ali/4ever-plugin-online-video';\nimport {\n  YoukuPlayer,\n  VideoWrapper,\n  YoukuPlayerWrapper,\n  YoukuPlayerPlaceholder,\n  EmbedFileCardWrapper,\n  CardIconWrapper,\n  CardContentWrapper,\n  CardContentInnerWrapper,\n  ContentHeader,\n} from './styled';\n\nconst isMobile = environment.IS_MOBILE;\n\nexport default function createEmbedPlugin(config) {\n  const onlineVideoConfig = config.onlineVideo || {};\n  const { locale = {} } = onlineVideoConfig;\n  const {\n    getIFramePlayerURL,\n    isIFramePlayerSupported,\n    enableVideoPreview = true,\n  } = onlineVideoConfig;\n\n  const handleMediaLoadError = (src) => {\n    const { onMediaLoadError } = onlineVideoConfig;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  const handleMediaLoadSuccess = (src) => {\n    const { onMediaLoadSuccess } = onlineVideoConfig;\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(src);\n    }\n  };\n\n  const renderVideoContent = (props) => {\n    const { node } = props;\n    const { data } = node;\n    const { src } = data;\n    const { type } = data;\n    const { poster } = data;\n    if (!enableVideoPreview) {\n      return (\n        <EmbedFileCardWrapper>\n          <CardIconWrapper>\n            <img\n              src=\"https://img.alicdn.com/tfs/TB1Ns0dlUH1gK0jSZSyXXXtlpXa-24-24.svg\"\n              alt=\"icon\"\n              style={{ width: 23, height: 24 }}\n            />\n          </CardIconWrapper>\n          <CardContentWrapper>\n            <CardContentInnerWrapper>\n              <ContentHeader>{src}</ContentHeader>\n            </CardContentInnerWrapper>\n          </CardContentWrapper>\n        </EmbedFileCardWrapper>\n      );\n    }\n\n    if (type === 'mp4') {\n      const videoRef = React.createRef<HTMLVideoElement>();\n      // React16.8 不支持 video 标签的 disablePictureInPicture 属性，16.9 支持\n      // 暂时只能通过这种方式，后续升级 React 后，改回 disablePictureInPicture 属性\n      setTimeout(() => {\n        if (videoRef.current) {\n          // @ts-ignore\n          videoRef.current.disablePictureInPicture = true;\n        }\n      }, 100);\n\n      return (\n        <VideoWrapper isMobile={isMobile}>\n          <video // eslint-disable-line\n            controls\n            data-type=\"onlineVideo\"\n            raw-controls=\"true\" // UC内核独有属性\n            controlsList=\"nodownload noremoteplayback\"\n            ref={videoRef}\n            poster={sanitizeUrl(poster)}\n            onCanPlay={() => handleMediaLoadSuccess(src)}\n            onError={() => handleMediaLoadError(src)}\n          >\n            <source src={src} type=\"video/mp4\" />\n          </video>\n        </VideoWrapper>\n      );\n    }\n    if (type === 'youku') {\n      // 容器有bug：https://work.aone.alibaba-inc.com/issue/26118887\n      if (isIFramePlayerSupported && !isIFramePlayerSupported()) {\n        return (\n          <YoukuPlayerPlaceholder>\n            <span>{locale.notSupportText}</span>\n          </YoukuPlayerPlaceholder>\n        );\n      }\n      const url = getIFramePlayerURL && getIFramePlayerURL(src);\n      if (url) {\n        return (\n          <YoukuPlayerWrapper isMobile={isMobile}>\n            <YoukuPlayer src={url} allowFullScreen />\n          </YoukuPlayerWrapper>\n        );\n      }\n      return null;\n    }\n\n    return null;\n  };\n\n  return {\n    ...moFactory({}),\n    renderNode: {\n      onlineVideo: (props, _) => {\n        const { attributes } = props;\n        return <div {...attributes}>{renderVideoContent(props)}</div>;\n      },\n    },\n  };\n}\n"],"file":"index.js"}