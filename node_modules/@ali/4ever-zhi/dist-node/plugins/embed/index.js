"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createEmbedPlugin;

var _react = _interopRequireWildcard(require("react"));

var _everUtils = require("@ali/4ever-utils");

var _uuid = require("uuid");

var _lodash = require("lodash");

var _everBamboo = require("@ali/4ever-bamboo");

var _styled = require("./styled");

var _everPluginEmbed = require("@ali/4ever-plugin-embed");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  previewHeight: DEFAULT_PREVIEW_HEIGHT
} = _everBamboo.theme.embed;
const {
  getFileTypeForRead,
  getIcon,
  formatSize,
  FileTypeMap,
  EmbedDownloadButton,
  EmbedCard,
  EmbedFailedCard
} = _everBamboo.EmbedPlugin; // 只读下 allowDownload 附件只支持 boolean 类型

function createEmbedPlugin(config) {
  const onDownloadFile = props => () => {
    const {
      node
    } = props;
    const {
      data
    } = node;
    const {
      src,
      name,
      type,
      size
    } = data;
    const embedConfig = config.embed || {};
    const {
      downloadFile
    } = embedConfig;

    if (downloadFile) {
      downloadFile(src, {
        name,
        type,
        size
      });
    }
  };

  const preview = (props, iframeId, previewErrorId, enlargeHideId) => {
    const {
      node
    } = props;
    const {
      data
    } = node;
    const {
      src,
      type
    } = data;
    const embedConfig = config.embed || {};
    const {
      transformDocURL: onPreview
    } = embedConfig;

    if (!onPreview) {
      return;
    }

    if (type === FileTypeMap.Video || type === FileTypeMap.Audio) {
      return;
    }

    onPreview(src).then(res => {
      const {
        previewUrl
      } = res || {};

      if (previewUrl) {
        const iframe = document.getElementById(iframeId);

        if (iframe) {
          iframe.src = (0, _everUtils.sanitizeUrl)(previewUrl);
        }

        const enlargeHide = document.getElementById(enlargeHideId);

        if (enlargeHide) {
          enlargeHide.style.display = 'block';
        }

        return Promise.resolve();
      } else {
        return Promise.reject('empty previewUrl');
      }
    }).catch(e => {
      console.error(e);
      const previewError = document.getElementById(previewErrorId);
      const iframe = document.getElementById(iframeId);

      if (previewError) {
        previewError.style.display = 'block';
      }

      if (iframe) {
        iframe.style.display = 'none';
      }
    });
  };

  const renderCard = props => {
    const {
      node
    } = props;
    const {
      locale = {},
      allowDownload
    } = config.embed || {};
    const {
      data
    } = node;
    const {
      name,
      size
    } = data;
    return /*#__PURE__*/_createElement(EmbedCard, {
      name: name,
      allowDownload: allowDownload,
      isSelected: false,
      node: node,
      locale: locale,
      onDownloadFile: onDownloadFile(props),
      size: size
    });
  };

  const renderPreviewHeader = (props, mode) => {
    const {
      locale = {},
      allowDownload
    } = config.embed || {};
    const {
      node
    } = props;
    const {
      data
    } = node;
    const {
      size,
      name
    } = data;
    return /*#__PURE__*/_createElement(_styled.PreviewHeaderWrapper, {
      mode: mode
    }, /*#__PURE__*/_createElement(_styled.CardIconWrapper, null, /*#__PURE__*/_createElement("img", {
      src: getIcon(getFileTypeForRead(name)),
      alt: "icon",
      style: {
        width: 16,
        height: 23
      }
    })), /*#__PURE__*/_createElement(_styled.CardContentWrapper, null, /*#__PURE__*/_createElement(_styled.CardContentInnerWrapper, null, /*#__PURE__*/_createElement(_styled.ContentHeader, {
      mode: mode
    }, name), /*#__PURE__*/_createElement(_styled.ContentDesc, {
      mode: mode
    }, formatSize(size)))), allowDownload && /*#__PURE__*/_createElement(EmbedDownloadButton, {
      title: locale?.download,
      onDownloadFile: onDownloadFile(props),
      allowDownload: allowDownload
    }));
  };

  const AutoInitPreview = ({
    initPreview
  }) => {
    (0, _react.useEffect)(() => {
      if (initPreview) initPreview();
    }, [initPreview]);
    return null;
  };

  const renderPreview = props => {
    const {
      locale = {}
    } = config.embed || {};
    const {
      node
    } = props;
    const {
      data
    } = node;
    const {
      previewSize,
      type
    } = data;
    const iframeId = (0, _uuid.v4)();
    const previewErrorId = (0, _uuid.v4)();
    const height = (0, _lodash.get)(previewSize, 'height', DEFAULT_PREVIEW_HEIGHT);
    const enlargeHideId = (0, _uuid.v4)();
    return /*#__PURE__*/_createElement(_styled.EmbedFilePreviewWrapper, {
      style: {
        height
      }
    }, renderPreviewHeader(props), /*#__PURE__*/_createElement(_styled.PreviewContentWrapper, null, /*#__PURE__*/_createElement(_styled.PreviewError, {
      id: previewErrorId
    }, /*#__PURE__*/_createElement(_styled.PreviewErrorText, null, locale.previewError, /*#__PURE__*/_createElement(_styled.PreviewErrorRetry, {
      onClick: () => preview(props, iframeId, previewErrorId, enlargeHideId)
    }, locale.reTryPreview))), /*#__PURE__*/_createElement("iframe", {
      style: {
        width: '100%',
        height: '100%',
        border: 'none',
        background: '#EDEDED'
      },
      title: "preview",
      src: "",
      id: iframeId
    }), type === FileTypeMap.Ppt && /*#__PURE__*/_createElement(_styled.EnlargeIconHide, {
      id: enlargeHideId
    })), /*#__PURE__*/_createElement(AutoInitPreview, {
      initPreview: () => {
        preview(props, iframeId, previewErrorId, enlargeHideId);
      }
    }));
  };

  return { ...(0, _everPluginEmbed.moFactory)({}),

    renderNode(props, _, next) {
      const {
        node
      } = props;

      if (node.type !== 'embed' || node.data.type === FileTypeMap.Video || node.data.type === FileTypeMap.Audio) {
        return next();
      }

      const {
        data
      } = node;
      const {
        viewType,
        errorType
      } = data;
      const {
        attributes
      } = props;
      const {
        locale = {}
      } = config.embed || {};
      if (errorType) return /*#__PURE__*/_createElement(EmbedFailedCard, {
        node: node,
        locale: locale
      });
      return /*#__PURE__*/_createElement("div", attributes, viewType === 'preview' ? renderPreview(props) : renderCard(props));
    }

  };
}
//# sourceMappingURL=index.js.map