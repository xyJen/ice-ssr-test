{"version":3,"sources":["../../../../src/plugins/image/image.tsx"],"names":["Image","props","imageRef","React","useRef","controller","node","imageConfig","src","data","previewImage","isLoaded","setIsLoaded","useState","handleZoomImage","event","ImagePlugin","isParentClickable","preventDefault","stopPropagation","handlers","useMemo","onClick","cursorStyle"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;uBAF4B,a;;AAW5B,MAAMA,KAA2B,GAAIC,KAAD,IAAW;AAC7C,QAAMC,QAAQ,GAAGC,eAAMC,MAAN,CAA+B,IAA/B,CAAjB;;AACA,QAAM;AACJC,IAAAA,UADI;AACQC,IAAAA,IADR;AACcC,IAAAA;AADd,MAEFN,KAFJ;AAGA,QAAM;AAAEO,IAAAA;AAAF,MAAUF,IAAI,CAACG,IAArB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAmBH,WAAzB;;AAEA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BT,eAAMU,QAAN,CAAe,KAAf,CAAhC;;AAEA,QAAMC,eAAe,GAAG,wBAAaC,KAAD,IAA6B;AAC/D,QAAIC,wBAAYC,iBAAZ,CAA8BZ,UAA9B,EAA0CC,IAA1C,CAAJ,EAAqD;AACnD;AACD;;AACDS,IAAAA,KAAK,CAACG,cAAN;AACAH,IAAAA,KAAK,CAACI,eAAN;;AACA,QAAIT,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACF,GAAD,EAAMF,IAAN,CAAZ;AACD;AACF,GATuB,EASrB,CAACI,YAAD,EAAeF,GAAf,EAAoBF,IAApB,EAA0BD,UAA1B,CATqB,CAAxB;;AAWA,QAAMe,QAAQ,GAAGjB,eAAMkB,OAAN,CAAc,MAAM;AACnC,WAAO;AACLC,MAAAA,OAAO,EAAER;AADJ,KAAP;AAGD,GAJgB,EAId,CAACA,eAAD,CAJc,CAAjB;;AAMA,QAAMS,WAAW,GAAG,CAAC,CAAChB,WAAW,CAACG,YAAd,IAA8BC,QAA9B,GAAyC,SAAzC,GAAqD,MAAzE;AAEA,sBACE,eAAC,oBAAD;AAAc,IAAA,WAAW,EAAEY;AAA3B,kBACE,eAAC,uBAAD,CAAa,GAAb;AACE,IAAA,GAAG,EAAErB,QADP;AAEE,IAAA,IAAI,EAAEI,IAFR;AAGE,IAAA,UAAU,EAAED,UAHd;AAIE,IAAA,WAAW,EAAEE;AAJf,KAKMa,QALN;AAME,IAAA,MAAM,EAAE,MAAMR,WAAW,CAAC,IAAD;AAN3B,KADF,CADF;AAYD,CAzCD;;eA2CeZ,K","sourcesContent":["import React, { useCallback } from 'react';\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Inline, Controller } from '@ali/4ever-cangjie';\nimport { ImageWrapper } from './styled';\n\nexport interface ImageProps {\n  src: string;\n  node: Inline;\n  controller: Controller;\n  imageConfig: ImagePlugin.ImagePluginConfig;\n}\n\nconst Image: React.FC<ImageProps> = (props) => {\n  const imageRef = React.useRef<HTMLImageElement>(null);\n  const {\n    controller, node, imageConfig,\n  } = props;\n  const { src } = node.data;\n  const { previewImage } = imageConfig;\n\n  const [isLoaded, setIsLoaded] = React.useState(false);\n\n  const handleZoomImage = useCallback((event: React.MouseEvent) => {\n    if (ImagePlugin.isParentClickable(controller, node)) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    if (previewImage) {\n      previewImage(src, node);\n    }\n  }, [previewImage, src, node, controller]);\n\n  const handlers = React.useMemo(() => {\n    return {\n      onClick: handleZoomImage,\n    };\n  }, [handleZoomImage]);\n\n  const cursorStyle = !!imageConfig.previewImage && isLoaded ? 'zoom-in' : 'auto';\n\n  return (\n    <ImageWrapper cursorStyle={cursorStyle}>\n      <ImagePlugin.Img\n        ref={imageRef}\n        node={node}\n        controller={controller}\n        imageConfig={imageConfig}\n        {...handlers}\n        onLoad={() => setIsLoaded(true)}\n      />\n    </ImageWrapper>\n  );\n};\n\nexport default Image;\n"],"file":"image.js"}