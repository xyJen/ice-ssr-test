"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createEmbedPlugin;

var React = _interopRequireWildcard(require("react"));

var _everBamboo = require("@ali/4ever-bamboo");

const _createElement = /*#__PURE__*/React.createElement;
const {
  FileTypeMap,
  VideoPlayer,
  MobileEmbedCard,
  EmbedFailedCard
} = _everBamboo.EmbedPlugin;

function createEmbedPlugin(config) {
  const onDownloadFile = props => {
    const {
      node
    } = props;
    const {
      data
    } = node;
    const {
      src,
      name,
      type,
      size
    } = data;
    const embedConfig = config.video || {};
    const {
      downloadFile
    } = embedConfig;

    if (downloadFile) {
      downloadFile(src, {
        name,
        type,
        size
      });
    }
  };

  const handleMediaLoadError = src => {
    const embedConfig = config.video || {};
    const {
      onMediaLoadError
    } = embedConfig;

    if (onMediaLoadError) {
      onMediaLoadError(src);
    }
  };

  const handleMediaLoadSuccess = src => {
    const embedConfig = config.video || {};
    const {
      onMediaLoadSuccess
    } = embedConfig;

    if (onMediaLoadSuccess) {
      onMediaLoadSuccess(src);
    }
  };

  const renderCard = props => {
    const {
      node,
      onPreview
    } = props;
    const {
      data
    } = node;
    const {
      src,
      name,
      type,
      size
    } = data;
    return /*#__PURE__*/_createElement(MobileEmbedCard, {
      name: name,
      onPreview: onPreview,
      src: src,
      type: type,
      size: size
    });
  };

  const renderPreview = props => {
    const {
      isSelected,
      node
    } = props;
    const {
      transformVideoURL,
      renderVideoMask,
      setTempPosterUrl,
      downloadFile,
      allowDownload,
      locale,
      allowFullscreen
    } = config.video || {};
    return /*#__PURE__*/_createElement(VideoPlayer, {
      transformVideoURL: transformVideoURL,
      onMediaLoadSuccess: handleMediaLoadSuccess,
      onMediaLoadError: handleMediaLoadError,
      setTempPosterUrl: setTempPosterUrl,
      node: node,
      isSelected: isSelected,
      renderVideoMask: renderVideoMask,
      allowDownload: downloadFile && allowDownload,
      onDownload: () => onDownloadFile(props),
      locale: locale,
      allowFullscreen: allowFullscreen
    });
  };

  return {
    renderNode: {
      embed: (props, _, next) => {
        const {
          node
        } = props;

        if (node.data.type === FileTypeMap.Video && node.data.errorType) {
          return /*#__PURE__*/_createElement(EmbedFailedCard, {
            node: node,
            locale: config?.video?.locale || {}
          });
        }

        if (node.data.type === FileTypeMap.Video && node.data.src) {
          const {
            data
          } = node;
          const {
            viewType
          } = data;
          const {
            attributes
          } = props;
          return /*#__PURE__*/_createElement("div", attributes, viewType === 'preview' ? renderPreview(props) : renderCard(props));
        }

        return next();
      }
    }
  };
}
//# sourceMappingURL=index.js.map