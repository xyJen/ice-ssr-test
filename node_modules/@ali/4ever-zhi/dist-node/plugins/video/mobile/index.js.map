{"version":3,"sources":["../../../../../src/plugins/video/mobile/index.tsx"],"names":["FileTypeMap","VideoPlayer","MobileEmbedCard","EmbedFailedCard","EmbedPlugin","createEmbedPlugin","config","onDownloadFile","props","node","data","src","name","type","size","videoConfig","video","downloadFile","handleMediaLoadError","onMediaLoadError","handleMediaLoadSuccess","onMediaLoadSuccess","renderPreview","isSelected","transformVideoURL","renderVideoMask","setTempPosterUrl","allowDownload","locale","enableVideoPreview","allowFullscreen","renderCard","onPreview","renderNode","embed","_","next","Video","attributes","viewType","errorType"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  EmbedPlugin,\n} from '@ali/4ever-bamboo';\nimport { ZhiConfig } from '../../../types';\n\nconst {\n  FileTypeMap,\n  VideoPlayer,\n  MobileEmbedCard,\n  EmbedFailedCard,\n} = EmbedPlugin;\n\nexport default function createEmbedPlugin(config: ZhiConfig) {\n\n  const onDownloadFile = (props) => {\n    const { node } = props;\n    const { data } = node;\n    const { src, name, type, size } = data;\n    const videoConfig = config.video || {};\n    const { downloadFile } = videoConfig;\n    if (downloadFile) {\n      downloadFile(src, {\n        name,\n        type,\n        size,\n      });\n    }\n  };\n\n  const handleMediaLoadError = (src) => {\n    const videoConfig = config.video || {};\n    const { onMediaLoadError } = videoConfig;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  const handleMediaLoadSuccess = (src) => {\n    const videoConfig = config.video || {};\n    const { onMediaLoadSuccess } = videoConfig;\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(src);\n    }\n  };\n\n  const renderPreview = (props) => {\n    const {\n      isSelected, node,\n    } = props;\n\n    const {\n      transformVideoURL, renderVideoMask, setTempPosterUrl,\n      downloadFile, allowDownload, locale, enableVideoPreview = true,\n      allowFullscreen,\n    } = config.video || {};\n\n    if (!enableVideoPreview) {\n      return renderCard(props);\n    }\n\n    return (\n      <VideoPlayer\n        transformVideoURL={transformVideoURL}\n        onMediaLoadSuccess={handleMediaLoadSuccess}\n        onMediaLoadError={handleMediaLoadError}\n        setTempPosterUrl={setTempPosterUrl}\n        node={node}\n        isSelected={isSelected}\n        renderVideoMask={renderVideoMask}\n        isMobile\n        allowDownload={downloadFile && allowDownload}\n        onDownload={() => onDownloadFile(props)}\n        allowFullscreen={allowFullscreen}\n        locale={locale}\n      />\n    );\n  };\n\n  const renderCard = (props) => {\n    const { node } = props;\n    const { data } = node;\n    const { src, name, type, size } = data;\n    const { onPreview } = config.video || {};\n\n    return (\n      <MobileEmbedCard\n        name={name}\n        onPreview={onPreview}\n        src={src}\n        type={type}\n        size={size}\n      />\n    );\n  };\n\n  return {\n    renderNode: {\n      embed: (props, _, next) => {\n        const { node } = props;\n        if (node.data.type === FileTypeMap.Video && node.data.src) {\n          const { attributes } = props;\n          const { data } = node;\n          const { viewType } = data;\n          return (\n            <div {...attributes}>\n              {viewType === 'preview' ? renderPreview(props) : renderCard(props)}\n            </div>\n          );\n        }\n  \n        if (node.data.type === FileTypeMap.Video && node.data.errorType) {\n          return <EmbedFailedCard node={node} locale={config?.video?.locale || {}} />;\n        }\n        return next();\n      },\n    },\n  };\n}\n"],"file":"index.js"}