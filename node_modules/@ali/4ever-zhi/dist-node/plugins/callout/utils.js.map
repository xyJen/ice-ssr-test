{"version":3,"sources":["../../../../src/plugins/callout/utils.ts"],"names":["isCalloutParagraph","node","Paragraph","isParagraph","Heading","isHeading","data","calloutPr","isCallout","Block","isBlock","type","createCallout","props","create"],"mappings":";;;;;;;;;AAAA;;AACA;;AAIO,SAASA,kBAAT,CAA4BC,IAA5B,EAA2E;AAChF,SAAO,CAACC,kBAAUC,WAAV,CAAsBF,IAAtB,KAA+BG,gBAAQC,SAAR,CAAkBJ,IAAlB,CAAhC,KAA4D,CAAC,CAACA,IAAI,CAACK,IAAL,CAAUC,SAA/E;AACD;;AAEM,SAASC,SAAT,CAAmBP,IAAnB,EAA+C;AACpD,SAAOQ,mBAAMC,OAAN,CAAcT,IAAd,KAAuBA,IAAI,CAACU,IAAL,KAAc,eAA5C;AACD;;AAQM,SAASC,aAAT,CAAuBC,KAAvB,EAAqD;AAC1D,SAAOJ,mBAAMK,MAAN,CAAa,EAClB,GAAGD,KADe;AAElBF,IAAAA,IAAI,EAAE;AAFY,GAAb,CAAP;AAID","sourcesContent":["import { Paragraph, ParagraphData, Heading } from '@ali/4ever-mo';\nimport { Block, BlockChildren } from '@ali/4ever-cangjie';\n\nexport type Callout = Block<ParagraphData, BlockChildren>;\n\nexport function isCalloutParagraph(node: any): node is typeof Paragraph | Heading {\n  return (Paragraph.isParagraph(node) || Heading.isHeading(node)) && !!node.data.calloutPr;\n}\n\nexport function isCallout(node: any): node is Callout {\n  return Block.isBlock(node) && node.type === 'callout-group';\n}\n\nexport interface CalloutProps {\n  key?: string;\n  data: ParagraphData;\n  nodes?: Block[];\n}\n\nexport function createCallout(props: CalloutProps): Callout {\n  return Block.create({\n    ...props,\n    type: 'callout-group',\n  });\n}\n"],"file":"utils.js"}