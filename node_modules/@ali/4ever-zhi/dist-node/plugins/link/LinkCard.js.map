{"version":3,"sources":["../../../../src/plugins/link/LinkCard.tsx"],"names":["LINK_COPY_LINK","LinkPlugin","actions","width","CARD_WIDTH","height","CARD_HEIGHT","margin","theme","link","getMobileMaxWidth","value","node","closestBlock","copyLink","type","payload","Wrapper","styled","span","LinkCard","props","controller","handleOpen","attributes","locale","isMobile","cardWidth","cardHeight","linkNode","href","cardInfo","data","title","imgURL","desc","text","query","urlInfo","React","useMemo","trim","cardLocale","edit","copy","unlink","delete","deleteLocale","styleText","tooltipLocale","editTooltip","copyTooltip","unlinkTooltip","deleteTooltip","switchStyleTooltip","linkCardLocale","maxWidth","setMaxwidth","useState","useEffect","handleCopy","useCallback","e","preventDefault","stopPropagation","run","canCopy","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { theme } from '@ali/4ever-bamboo';\nimport { URLLinkCard } from '@ali/we-biz-link-card';\nimport { LinkProperties } from '@ali/4ever-mo';\nimport { Value, Inline, RenderNodeProps, Action } from '@ali/4ever-cangjie';\nimport { LinkPlugin } from '@ali/4ever-bi';\nimport { getClosestContainerBlock, getInnerWidth } from '@ali/4ever-utils';\nimport { LinkPluginConfig, ILocale } from './types';\n\nconst { LINK_COPY_LINK } = LinkPlugin.actions;\n\nconst { width: CARD_WIDTH, height: CARD_HEIGHT, margin } = theme.link;\n\nconst getMobileMaxWidth = (value: Value, node: Inline) => {\n  const closestBlock = getClosestContainerBlock(value, node);\n  if (closestBlock)\n    return getInnerWidth(closestBlock) ?? '100%';\n  return '100%';\n};\n\nfunction copyLink(\n  node: Inline,\n): Action<{ node: Inline }> {\n  return {\n    type: LINK_COPY_LINK,\n    payload: {\n      node,\n    },\n  };\n}\n\ninterface LinkCardProps extends RenderNodeProps<Inline> {\n  locale: LinkPluginConfig['locale'];\n  handleOpen?: (href: string) => void;\n  isMobile: boolean;\n}\n\nconst Wrapper = styled.span`\n  cursor: default;\n  display: inline-block;\n  line-height: normal;\n`;\n\nconst LinkCard: React.FC<LinkCardProps> = (props) => {\n  const { node, controller, handleOpen, attributes, locale, isMobile } = props;\n\n  const cardWidth = CARD_WIDTH;\n  const cardHeight = CARD_HEIGHT;\n  const linkNode = node as LinkProperties;\n\n  const { href = '', cardInfo } = linkNode.data || {};\n  const { title = '', imgURL = '', desc = '' } = cardInfo || {};\n  const text = controller.query('getText', { node }) || '';\n  const urlInfo = React.useMemo(() => ({\n    title: text.trim() === href.trim() ? title : text,\n    imgURL,\n    desc,\n  }), [text, title, imgURL, desc]);\n\n  const cardLocale = locale as ILocale;\n  const { edit = '', copy = '', unlink = '', delete: deleteLocale = '', styleText = '' } = cardLocale;\n  const tooltipLocale = {\n    editTooltip: edit,\n    copyTooltip: copy,\n    unlinkTooltip: unlink,\n    deleteTooltip: deleteLocale,\n    switchStyleTooltip: styleText,\n  };\n\n  const linkCardLocale = React.useMemo(() => ({ ...cardLocale, ...tooltipLocale }), [locale]);\n\n  const [maxWidth, setMaxwidth] = React.useState<number | string>('100%');\n\n  React.useEffect(() => {\n    setMaxwidth(getMobileMaxWidth(controller.value, node));\n  }, []);\n\n  const handleCopy = React.useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    controller.run('onAction', copyLink(node));\n  }, [controller, node]);\n\n  return (\n    <Wrapper {...attributes} style={{ width: isMobile ? maxWidth : cardWidth, height: cardHeight, margin }}>\n      <URLLinkCard\n        isSelected={false}\n        state={'normal'}\n        cardStyle={'indoc'}\n        url={href}\n        readonly\n        isMobile={isMobile}\n        locale={linkCardLocale}\n        urlInfo={urlInfo}\n        onOpenURL={handleOpen}\n        // @ts-ignore\n        onCopy={controller.canCopy && handleCopy}\n        // @ts-ignore\n        urlTestID=\"link-toolbar-visit\"\n        cardTestID=\"link-card\"\n        copyBtnTestID=\"link-toolbar-copy\"\n      />\n    </Wrapper>\n  );\n};\n\nexport default React.memo(LinkCard);\n"],"file":"LinkCard.js"}