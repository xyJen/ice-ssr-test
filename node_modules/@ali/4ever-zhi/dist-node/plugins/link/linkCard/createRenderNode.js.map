{"version":3,"sources":["../../../../../src/plugins/link/linkCard/createRenderNode.tsx"],"names":["normalizeLink","openLink","LinkPlugin","copyBlockLinkCard","LinkCardPlugin","actions","Wrapper","styled","div","LinkCardNode","props","nodeProps","controller","linkConfig","isMobile","locale","protocolAllowList","openLinkOfConfig","node","isSelected","selection","value","href","cardInfo","text","data","metadata","scrollContent","document","body","getContainer","React","useCallback","urlInfo","useMemo","isTitleEqualsHref","trim","actualTitle","title","desc","imgURL","linkCardLocale","tooltipLocale","editTooltip","edit","copyTooltip","copy","unlinkTooltip","unlink","deleteTooltip","delete","switchStyleTooltip","styleText","handleVisit","normalizedLink","handleCopy","e","preventDefault","stopPropagation","run","isCollapsed","canCopy","undefined","createRenderNode"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { URLLinkCard } from '@ali/we-biz-link-card';\nimport { Controller, RenderNodeProps } from '@ali/4ever-cangjie';\nimport { LinkCardPlugin } from '@ali/4ever-bi';\nimport { LinkPlugin, useScrollableContent } from '@ali/4ever-bamboo';\nimport { CustomizedZhiCardPluginType } from '@ali/4ever-factory';\nimport { BlockLinkCard, LinkPluginConfig } from '../types';\n\nconst { normalizeLink, openLink } = LinkPlugin;\n\nconst { copyBlockLinkCard } = LinkCardPlugin.actions;\n\nconst Wrapper = styled.div`\n  cursor: pointer;\n`;\n\nfunction LinkCardNode(props: {\n  nodeProps: RenderNodeProps<BlockLinkCard>,\n  controller: Controller,\n  linkConfig: LinkPluginConfig,\n  isMobile: boolean\n}) {\n\n  const { nodeProps, controller, linkConfig, isMobile } = props;\n\n  const {\n    locale,\n    protocolAllowList = ['http:', 'https:', 'dingtalk:', 'taobao:'],\n    openLink: openLinkOfConfig,\n  } = linkConfig;\n\n  const { node, isSelected } = nodeProps;\n\n  const { selection } = controller.value;\n\n  const { href, cardInfo, text } = node.data.metadata!;\n\n  const scrollContent = useScrollableContent() || document.body;\n\n  const getContainer = React.useCallback(() => {\n    return scrollContent;\n  }, [scrollContent]);\n\n  const urlInfo = React.useMemo(() => {\n    const isTitleEqualsHref = text.trim() === href.trim();\n    const actualTitle = isTitleEqualsHref ? cardInfo.title : text;\n    return ({\n      title: actualTitle || '',\n      desc: cardInfo.desc || '',\n      imgURL: cardInfo.imgURL || '',\n    })\n  }, [cardInfo, text, href]);\n\n  const linkCardLocale = React.useMemo(() => {\n    const tooltipLocale = {\n      editTooltip: locale.edit,\n      copyTooltip: locale.copy,\n      unlinkTooltip: locale.unlink,\n      deleteTooltip: locale.delete,\n      switchStyleTooltip: locale.styleText,\n    };\n    return { ...locale, ...tooltipLocale };\n  }, [locale]);\n\n  const handleVisit = React.useCallback(\n    () => {\n      if (openLinkOfConfig) {\n        const normalizedLink = normalizeLink(href, protocolAllowList);\n        openLinkOfConfig(normalizedLink);\n      } else {\n        openLink(href, protocolAllowList);\n      }\n    },\n    [href, protocolAllowList, openLinkOfConfig],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      // 卡片形式下，使用仓颉复制\n      controller.run('onAction', copyBlockLinkCard(node));\n    },\n    [href, node, controller],\n  );\n\n  return (\n    <Wrapper>\n      <URLLinkCard\n        getContainer={getContainer}\n        isSelected={isSelected && selection.isCollapsed}\n        cardStyle={'indoc'}\n        state={'normal'}\n        url={href}\n        readonly={true}\n        locale={linkCardLocale}\n        urlInfo={urlInfo}\n        isMobile={isMobile}\n        // @ts-ignore\n        onCopy={controller.canCopy ? handleCopy : undefined}\n        onOpenURL={handleVisit}\n        editBtnTestID=\"link-toolbar-edit\"\n        copyBtnTestID=\"link-toolbar-copy\"\n        cutBtnTestID=\"link-toolbar-cut\"\n        unlinkBtnTestID=\"link-toolbar-unlink\"\n        deleteBtnTestID=\"link-toolbar-remove\"\n        switchStyleBtnTestID=\"link-toolbar-switch\"\n        linkStyleBtnTestID=\"link-toolbar-switch-link\"\n        cardStyleBtnTestID=\"link-toolbar-switch-card\"\n        cardTestID=\"link-card\"\n      />\n    </Wrapper>);\n}\n\nexport default function createRenderNode(\n  linkConfig: LinkPluginConfig,\n  isMobile: boolean\n): CustomizedZhiCardPluginType['renderNode'] {\n\n  return (nodeProps: RenderNodeProps<BlockLinkCard>, controller: Controller) => {\n    return (\n      <LinkCardNode\n        linkConfig={linkConfig}\n        isMobile={isMobile}\n        nodeProps={nodeProps}\n        controller={controller}\n      />\n    )\n  };\n}\n"],"file":"createRenderNode.js"}