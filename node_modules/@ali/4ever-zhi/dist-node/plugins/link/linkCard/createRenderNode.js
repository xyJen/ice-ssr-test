"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderNode;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _weBizLinkCard = require("@ali/we-biz-link-card");

var _everBi = require("@ali/4ever-bi");

var _everBamboo = require("@ali/4ever-bamboo");

const _createElement = /*#__PURE__*/React.createElement;
const {
  normalizeLink,
  openLink
} = _everBamboo.LinkPlugin;
const {
  copyBlockLinkCard
} = _everBi.LinkCardPlugin.actions;

const Wrapper = /*#__PURE__*/_styledComponents.default.div(["cursor:pointer;"]);

function LinkCardNode(props) {
  const {
    nodeProps,
    controller,
    linkConfig,
    isMobile
  } = props;
  const {
    locale,
    protocolAllowList = ['http:', 'https:', 'dingtalk:', 'taobao:'],
    openLink: openLinkOfConfig
  } = linkConfig;
  const {
    node,
    isSelected
  } = nodeProps;
  const {
    selection
  } = controller.value;
  const {
    href,
    cardInfo,
    text
  } = node.data.metadata;
  const scrollContent = (0, _everBamboo.useScrollableContent)() || document.body;
  const getContainer = React.useCallback(() => {
    return scrollContent;
  }, [scrollContent]);
  const urlInfo = React.useMemo(() => {
    const isTitleEqualsHref = text.trim() === href.trim();
    const actualTitle = isTitleEqualsHref ? cardInfo.title : text;
    return {
      title: actualTitle || '',
      desc: cardInfo.desc || '',
      imgURL: cardInfo.imgURL || ''
    };
  }, [cardInfo, text, href]);
  const linkCardLocale = React.useMemo(() => {
    const tooltipLocale = {
      editTooltip: locale.edit,
      copyTooltip: locale.copy,
      unlinkTooltip: locale.unlink,
      deleteTooltip: locale.delete,
      switchStyleTooltip: locale.styleText
    };
    return { ...locale,
      ...tooltipLocale
    };
  }, [locale]);
  const handleVisit = React.useCallback(() => {
    if (openLinkOfConfig) {
      const normalizedLink = normalizeLink(href, protocolAllowList);
      openLinkOfConfig(normalizedLink);
    } else {
      openLink(href, protocolAllowList);
    }
  }, [href, protocolAllowList, openLinkOfConfig]);
  const handleCopy = React.useCallback(e => {
    e.preventDefault();
    e.stopPropagation(); // 卡片形式下，使用仓颉复制

    controller.run('onAction', copyBlockLinkCard(node));
  }, [href, node, controller]);
  return /*#__PURE__*/_createElement(Wrapper, null, /*#__PURE__*/_createElement(_weBizLinkCard.URLLinkCard, {
    getContainer: getContainer,
    isSelected: isSelected && selection.isCollapsed,
    cardStyle: 'indoc',
    state: 'normal',
    url: href,
    readonly: true,
    locale: linkCardLocale,
    urlInfo: urlInfo,
    isMobile: isMobile // @ts-ignore
    ,
    onCopy: controller.canCopy ? handleCopy : undefined,
    onOpenURL: handleVisit,
    editBtnTestID: "link-toolbar-edit",
    copyBtnTestID: "link-toolbar-copy",
    cutBtnTestID: "link-toolbar-cut",
    unlinkBtnTestID: "link-toolbar-unlink",
    deleteBtnTestID: "link-toolbar-remove",
    switchStyleBtnTestID: "link-toolbar-switch",
    linkStyleBtnTestID: "link-toolbar-switch-link",
    cardStyleBtnTestID: "link-toolbar-switch-card",
    cardTestID: "link-card"
  }));
}

function createRenderNode(linkConfig, isMobile) {
  return (nodeProps, controller) => {
    return /*#__PURE__*/_createElement(LinkCardNode, {
      linkConfig: linkConfig,
      isMobile: isMobile,
      nodeProps: nodeProps,
      controller: controller
    });
  };
}
//# sourceMappingURL=createRenderNode.js.map