{"version":3,"sources":["../../../../src/plugins/link/link.tsx"],"names":["Link","props","href","children","onOpenLink","rest","shouldOpenLink","React","useRef","isMobile","environment","IS_MOBILE","handleOpenLink","event","current","preventDefault","stopPropagation","handlers","useMemo","onTouchEnd","onTouchStart","onTouchMove","onClick","memo"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;;AAQ5B,MAAMA,IAAyB,GAAIC,KAAD,IAAW;AAC3C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,UAAlB;AAA8B,OAAGC;AAAjC,MAA0CJ,KAAhD;;AAEA,QAAMK,cAAc,GAAGC,eAAMC,MAAN,CAAa,IAAb,CAAvB;;AAEA,QAAMC,QAAQ,GAAGC,yBAAYC,SAA7B;AAEA,QAAMC,cAAc,GAAG,wBAEnBC,KADF,IAIK;AACH,QAAIT,UAAU,IAAIE,cAAc,CAACQ,OAAjC,EAA0C;AACxCD,MAAAA,KAAK,CAACE,cAAN;;AACA,UAAI,CAACN,QAAL,EAAe;AACb;AACV;AACA;AACA;AACUI,QAAAA,KAAK,CAACG,eAAN;AACD;;AACDZ,MAAAA,UAAU,CAACF,IAAD,CAAV;AACD;AACF,GAjBoB,EAkBrB,CAACE,UAAD,EAAaF,IAAb,EAAmBO,QAAnB,CAlBqB,CAAvB;;AAqBA,QAAMQ,QAAQ,GAAGV,eAAMW,OAAN,CAAc,MAAM;AACnC,WAAOR,yBAAYC,SAAZ,GACH;AACAQ,MAAAA,UAAU,EAAEP,cADZ;AAEAQ,MAAAA,YAAY,EAAE,MAAM;AAClBd,QAAAA,cAAc,CAACQ,OAAf,GAAyB,IAAzB;AACD,OAJD;AAKAO,MAAAA,WAAW,EAAE,MAAM;AACjBf,QAAAA,cAAc,CAACQ,OAAf,GAAyB,KAAzB;AACD,OAPD;AAQAQ,MAAAA,OAAO,EAAGT,KAAD,IAA6BA,KAAK,CAACE,cAAN;AARtC,KADG,GAWH;AACAO,MAAAA,OAAO,EAAEV;AADT,KAXJ;AAcD,GAfgB,EAed,CAACA,cAAD,CAfc,CAAjB;;AAiBA,sBACE,eAAC,YAAD,6BAAmBP,IAAnB,EAA6BY,QAA7B;AAAuC,IAAA,IAAI,EAAEf,IAA7C;AAAmD,IAAA,SAAS,EAAC;AAA7D,MACGC,QADH,CADF;AAKD,CAlDD;;4BAoDeI,eAAMgB,IAAN,CAAWvB,IAAX,C","sourcesContent":["import React, { useCallback } from 'react';\nimport { environment } from '@ali/4ever-cangjie';\nimport { Link as LinkComponent } from './styled';\n\ninterface LinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  href: string;\n  onOpenLink?: (href: string) => void;\n}\n\nconst Link: React.FC<LinkProps> = (props) => {\n  const { href, children, onOpenLink, ...rest } = props;\n\n  const shouldOpenLink = React.useRef(true);\n\n  const isMobile = environment.IS_MOBILE;\n\n  const handleOpenLink = useCallback(\n    (\n      event:\n        | React.MouseEvent<HTMLAnchorElement>\n        | React.TouchEvent<HTMLAnchorElement>,\n    ) => {\n      if (onOpenLink && shouldOpenLink.current) {\n        event.preventDefault();\n        if (!isMobile) {\n          /**\n           * 下面的提交为了修复演示模式切页问题，阻止了冒泡。但是会导致移动端 touchEnd 不触发，引发跳转后选区异常\n           * https://gitlab.alibaba-inc.com/alidocs/we-editor/commit/d870afb4bf623a9b3422bd4fe7c29b6515d720c2\n           */\n          event.stopPropagation();\n        }\n        onOpenLink(href);\n      }\n    },\n    [onOpenLink, href, isMobile],\n  );\n\n  const handlers = React.useMemo(() => {\n    return environment.IS_MOBILE\n      ? {\n        onTouchEnd: handleOpenLink,\n        onTouchStart: () => {\n          shouldOpenLink.current = true;\n        },\n        onTouchMove: () => {\n          shouldOpenLink.current = false;\n        },\n        onClick: (event: React.MouseEvent) => event.preventDefault(),\n      }\n      : {\n        onClick: handleOpenLink,\n      };\n  }, [handleOpenLink]);\n\n  return (\n    <LinkComponent {...rest} {...handlers} href={href} className=\"link\" >\n      {children}\n    </LinkComponent>\n  );\n};\n\nexport default React.memo(Link);\n"],"file":"link.js"}