{"version":3,"sources":["../../../../src/plugins/link/createLinkPlugin.tsx"],"names":["normalizeLink","openLink","openLinkInWindow","LinkPlugin","createCopyLink","LinkBiPlugin","utils","LINK_COPY_LINK","actions","createLinkPluginFactory","isMoblie","getMinTableColWidth","getMinTableColWidthForMobile","createLinkPlugin","config","protocolAllowList","locale","disableTextRecognize","link","handleOpen","href","normalizedLink","serializer","clipboard","plugin","renderNode","props","controller","node","linkNode","attributes","children","cardInfo","data","isRenderCard","displayType","commands","copyLink","onAction","action","next","type","payload","command","queries","getText","_","text","renderMark","mark","marks","find","decorateNode","createDecorateNode"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { LinkPlugin } from '@ali/4ever-bamboo';\nimport { Controller, Action, Inline, Plugin } from '@ali/4ever-cangjie';\nimport { sanitizeUrl } from '@ali/4ever-utils';\nimport { LinkProperties } from '@ali/4ever-mo';\nimport { LinkPlugin as LinkBiPlugin } from '@ali/4ever-bi';\nimport Link from './link';\nimport LinkCard from './LinkCard';\nimport { LinkPluginConfig } from './types';\nimport { moFactory } from '@ali/4ever-plugin-link';\n\nconst { normalizeLink, openLink: openLinkInWindow } = LinkPlugin;\n\nconst { createCopyLink } = LinkBiPlugin.utils;\nconst { LINK_COPY_LINK } = LinkBiPlugin.actions;\n\nexport function createLinkPluginFactory(isMoblie: boolean) {\n  const getMinTableColWidth = isMoblie ? LinkPlugin.getMinTableColWidthForMobile : LinkPlugin.getMinTableColWidth;\n\n  return function createLinkPlugin(config: { link?: LinkPluginConfig; clipboard?: { serializer?: any } }) {\n    const { openLink, protocolAllowList = ['http:', 'https:', 'dingtalk:', 'taobao:'], locale = {}, disableTextRecognize = false } = config.link || {};\n\n    const handleOpen = (href: string) => {\n      if (openLink) {\n        const normalizedLink = normalizeLink(href, protocolAllowList);\n        openLink(normalizedLink);\n      } else {\n        openLinkInWindow(href, protocolAllowList);\n      }\n    };\n\n    const serializer = config.clipboard?.serializer;\n\n    const plugin = {\n      ...moFactory({}),\n      renderNode: {\n        link: (props, controller) => {\n          const { node } = props;\n          const linkNode = node as LinkProperties;\n\n          const { attributes, children } = props;\n          const { href = '', cardInfo } = linkNode.data || {};\n          const isRenderCard = cardInfo && cardInfo.displayType === 'card';\n\n          return (\n            isRenderCard\n              ?\n                <LinkCard\n                  {...props}\n                  locale={locale}\n                  isMobile={isMoblie}\n                  handleOpen={handleOpen}\n                  controller={controller}\n                />\n              :\n                <Link\n                  {...attributes}\n                  target=\"_blank\"\n                  href={sanitizeUrl(href, protocolAllowList)}\n                  onOpenLink={handleOpen}\n                >\n                  {children()}\n                </Link>\n          );\n        },\n      },\n      commands: {\n        copyLink: createCopyLink(serializer),\n      },\n      onAction(\n        action: Action,\n        controller: Controller,\n        next: () => Controller,\n      ): Controller {\n        const { type, payload } = action;\n        if (type === LINK_COPY_LINK) {\n          const { node } = payload as { node: Inline };\n          return controller.command('copyLink', node);\n        }\n        return next();\n      },\n      queries: {\n        getText(_, { node }: { node: Inline }) {\n          return node.text;\n        },\n        getMinTableColWidth,\n      },\n    } as unknown as Plugin;\n\n    // 支持 purelink 识别的情况下，添加 decorateNode 和 renderMark\n    if (!disableTextRecognize) {\n      plugin.renderMark = (props, _, next) => {\n        const { mark, marks } = props;\n\n        if (mark.type === 'link' && !marks.find(({ type }) => type === 'unlink')) {\n          const { attributes, children } = props;\n          const { href } = mark.data;\n          return (\n            <Link\n              {...attributes}\n              target=\"_blank\"\n              href={sanitizeUrl(href, protocolAllowList)}\n              onOpenLink={handleOpen}\n            >\n              {children()}\n            </Link>\n          );\n        }\n        return next();\n      };\n      // @ts-ignore\n      plugin.decorateNode = LinkPlugin.createDecorateNode(protocolAllowList);\n    }\n\n    return plugin;\n  };\n}\n"],"file":"createLinkPlugin.js"}