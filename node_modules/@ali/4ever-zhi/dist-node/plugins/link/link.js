"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _styled = require("./styled");

const _createElement = /*#__PURE__*/_react.default.createElement;

const Link = props => {
  const {
    href,
    children,
    onOpenLink,
    ...rest
  } = props;

  const shouldOpenLink = _react.default.useRef(true);

  const isMobile = _everCangjie.environment.IS_MOBILE;
  const handleOpenLink = (0, _react.useCallback)(event => {
    if (onOpenLink && shouldOpenLink.current) {
      event.preventDefault();

      if (!isMobile) {
        /**
         * 下面的提交为了修复演示模式切页问题，阻止了冒泡。但是会导致移动端 touchEnd 不触发，引发跳转后选区异常
         * https://gitlab.alibaba-inc.com/alidocs/we-editor/commit/d870afb4bf623a9b3422bd4fe7c29b6515d720c2
         */
        event.stopPropagation();
      }

      onOpenLink(href);
    }
  }, [onOpenLink, href, isMobile]);

  const handlers = _react.default.useMemo(() => {
    return _everCangjie.environment.IS_MOBILE ? {
      onTouchEnd: handleOpenLink,
      onTouchStart: () => {
        shouldOpenLink.current = true;
      },
      onTouchMove: () => {
        shouldOpenLink.current = false;
      },
      onClick: event => event.preventDefault()
    } : {
      onClick: handleOpenLink
    };
  }, [handleOpenLink]);

  return /*#__PURE__*/_createElement(_styled.Link, (0, _extends2.default)({}, rest, handlers, {
    href: href,
    className: "link"
  }), children);
};

var _default = /*#__PURE__*/_react.default.memo(Link);

exports.default = _default;
//# sourceMappingURL=link.js.map