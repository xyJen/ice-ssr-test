"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLinkPluginFactory = createLinkPluginFactory;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everBamboo = require("@ali/4ever-bamboo");

var _everUtils = require("@ali/4ever-utils");

var _everBi = require("@ali/4ever-bi");

var _link = _interopRequireDefault(require("./link"));

var _LinkCard = _interopRequireDefault(require("./LinkCard"));

var _everPluginLink = require("@ali/4ever-plugin-link");

const _createElement = /*#__PURE__*/React.createElement;
const {
  normalizeLink,
  openLink: openLinkInWindow
} = _everBamboo.LinkPlugin;
const {
  createCopyLink
} = _everBi.LinkPlugin.utils;
const {
  LINK_COPY_LINK
} = _everBi.LinkPlugin.actions;

function createLinkPluginFactory(isMoblie) {
  const getMinTableColWidth = isMoblie ? _everBamboo.LinkPlugin.getMinTableColWidthForMobile : _everBamboo.LinkPlugin.getMinTableColWidth;
  return function createLinkPlugin(config) {
    const {
      openLink,
      protocolAllowList = ['http:', 'https:', 'dingtalk:', 'taobao:'],
      locale = {},
      disableTextRecognize = false
    } = config.link || {};

    const handleOpen = href => {
      if (openLink) {
        const normalizedLink = normalizeLink(href, protocolAllowList);
        openLink(normalizedLink);
      } else {
        openLinkInWindow(href, protocolAllowList);
      }
    };

    const serializer = config.clipboard?.serializer;
    const plugin = { ...(0, _everPluginLink.moFactory)({}),
      renderNode: {
        link: (props, controller) => {
          const {
            node
          } = props;
          const linkNode = node;
          const {
            attributes,
            children
          } = props;
          const {
            href = '',
            cardInfo
          } = linkNode.data || {};
          const isRenderCard = cardInfo && cardInfo.displayType === 'card';
          return isRenderCard ? /*#__PURE__*/_createElement(_LinkCard.default, (0, _extends2.default)({}, props, {
            locale: locale,
            isMobile: isMoblie,
            handleOpen: handleOpen,
            controller: controller
          })) : /*#__PURE__*/_createElement(_link.default, (0, _extends2.default)({}, attributes, {
            target: "_blank",
            href: (0, _everUtils.sanitizeUrl)(href, protocolAllowList),
            onOpenLink: handleOpen
          }), children());
        }
      },
      commands: {
        copyLink: createCopyLink(serializer)
      },

      onAction(action, controller, next) {
        const {
          type,
          payload
        } = action;

        if (type === LINK_COPY_LINK) {
          const {
            node
          } = payload;
          return controller.command('copyLink', node);
        }

        return next();
      },

      queries: {
        getText(_, {
          node
        }) {
          return node.text;
        },

        getMinTableColWidth
      }
    }; // 支持 purelink 识别的情况下，添加 decorateNode 和 renderMark

    if (!disableTextRecognize) {
      plugin.renderMark = (props, _, next) => {
        const {
          mark,
          marks
        } = props;

        if (mark.type === 'link' && !marks.find(({
          type
        }) => type === 'unlink')) {
          const {
            attributes,
            children
          } = props;
          const {
            href
          } = mark.data;
          return /*#__PURE__*/_createElement(_link.default, (0, _extends2.default)({}, attributes, {
            target: "_blank",
            href: (0, _everUtils.sanitizeUrl)(href, protocolAllowList),
            onOpenLink: handleOpen
          }), children());
        }

        return next();
      }; // @ts-ignore


      plugin.decorateNode = _everBamboo.LinkPlugin.createDecorateNode(protocolAllowList);
    }

    return plugin;
  };
}
//# sourceMappingURL=createLinkPlugin.js.map