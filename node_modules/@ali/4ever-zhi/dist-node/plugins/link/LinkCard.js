"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everBamboo = require("@ali/4ever-bamboo");

var _weBizLinkCard = require("@ali/we-biz-link-card");

var _everBi = require("@ali/4ever-bi");

var _everUtils = require("@ali/4ever-utils");

const _createElement = /*#__PURE__*/React.createElement;
const {
  LINK_COPY_LINK
} = _everBi.LinkPlugin.actions;
const {
  width: CARD_WIDTH,
  height: CARD_HEIGHT,
  margin
} = _everBamboo.theme.link;

const getMobileMaxWidth = (value, node) => {
  const closestBlock = (0, _everUtils.getClosestContainerBlock)(value, node);
  if (closestBlock) return (0, _everUtils.getInnerWidth)(closestBlock) ?? '100%';
  return '100%';
};

function copyLink(node) {
  return {
    type: LINK_COPY_LINK,
    payload: {
      node
    }
  };
}

const Wrapper = /*#__PURE__*/_styledComponents.default.span(["cursor:default;display:inline-block;line-height:normal;"]);

const LinkCard = props => {
  const {
    node,
    controller,
    handleOpen,
    attributes,
    locale,
    isMobile
  } = props;
  const cardWidth = CARD_WIDTH;
  const cardHeight = CARD_HEIGHT;
  const linkNode = node;
  const {
    href = '',
    cardInfo
  } = linkNode.data || {};
  const {
    title = '',
    imgURL = '',
    desc = ''
  } = cardInfo || {};
  const text = controller.query('getText', {
    node
  }) || '';
  const urlInfo = React.useMemo(() => ({
    title: text.trim() === href.trim() ? title : text,
    imgURL,
    desc
  }), [text, title, imgURL, desc]);
  const cardLocale = locale;
  const {
    edit = '',
    copy = '',
    unlink = '',
    delete: deleteLocale = '',
    styleText = ''
  } = cardLocale;
  const tooltipLocale = {
    editTooltip: edit,
    copyTooltip: copy,
    unlinkTooltip: unlink,
    deleteTooltip: deleteLocale,
    switchStyleTooltip: styleText
  };
  const linkCardLocale = React.useMemo(() => ({ ...cardLocale,
    ...tooltipLocale
  }), [locale]);
  const [maxWidth, setMaxwidth] = React.useState('100%');
  React.useEffect(() => {
    setMaxwidth(getMobileMaxWidth(controller.value, node));
  }, []);
  const handleCopy = React.useCallback(e => {
    e.preventDefault();
    e.stopPropagation();
    controller.run('onAction', copyLink(node));
  }, [controller, node]);
  return /*#__PURE__*/_createElement(Wrapper, (0, _extends2.default)({}, attributes, {
    style: {
      width: isMobile ? maxWidth : cardWidth,
      height: cardHeight,
      margin
    }
  }), /*#__PURE__*/_createElement(_weBizLinkCard.URLLinkCard, {
    isSelected: false,
    state: 'normal',
    cardStyle: 'indoc',
    url: href,
    readonly: true,
    isMobile: isMobile,
    locale: linkCardLocale,
    urlInfo: urlInfo,
    onOpenURL: handleOpen // @ts-ignore
    ,
    onCopy: controller.canCopy && handleCopy // @ts-ignore
    ,
    urlTestID: "link-toolbar-visit",
    cardTestID: "link-card",
    copyBtnTestID: "link-toolbar-copy"
  }));
};

var _default = /*#__PURE__*/React.memo(LinkCard);

exports.default = _default;
//# sourceMappingURL=LinkCard.js.map