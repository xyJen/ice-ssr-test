"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _react2 = require("@testing-library/react");

var _reader = _interopRequireWildcard(require("./reader"));

var _code = _interopRequireDefault(require("./fixtures/code.json"));

const _createElement = /*#__PURE__*/React.createElement;

// jest.mock(
//   "@ali/4ever-bamboo/src/plugins/code/components/simpleCode",
//   () => () => <code />,
// );
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

describe('Zhi:code', () => {
  it('正确渲染', async () => {
    const asl = ['root', _code.default];
    const {
      container,
      rerender
    } = (0, _react2.render)( /*#__PURE__*/_createElement(_reader.default, {
      content: asl
    }));
    expect(container).toMatchSnapshot();

    var _ref = /*#__PURE__*/_createElement(_reader.default, {
      content: asl
    });

    await (0, _react2.waitFor)(async () => {
      // codemirror.setOption 似乎不会触发 container 的更新，必须要 rerender
      rerender(_ref);
      await sleep(1);
      const mark = container.querySelector('.cm-variable');

      if (!mark) {
        return Promise.reject(Error('no highlight'));
      }
    }, {
      timeout: 1000 * 10
    });
    expect(container).toMatchSnapshot();
  });
  it('正确渲染(mobile)', async () => {
    const asl = ['root', _code.default];
    const {
      container,
      rerender
    } = (0, _react2.render)( /*#__PURE__*/_createElement(_reader.MobileReader, {
      content: asl
    }));
    expect(container).toMatchSnapshot();

    var _ref2 = /*#__PURE__*/_createElement(_reader.MobileReader, {
      content: asl
    });

    await (0, _react2.waitFor)(async () => {
      // codemirror.setOption 似乎不会触发 container 的更新，必须要 rerender
      rerender(_ref2);
      const mark = container.querySelector('pre>code');

      if (!mark) {
        return Promise.reject(Error('no simple code'));
      }
    });
    expect(container).toMatchSnapshot();
  });
});
//# sourceMappingURL=code.test.js.map