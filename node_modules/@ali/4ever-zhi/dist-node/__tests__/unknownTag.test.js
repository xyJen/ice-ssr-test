"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _react2 = require("@testing-library/react");

var _reader = _interopRequireDefault(require("./reader"));

var _unknownTag = _interopRequireDefault(require("./fixtures/unknownTag.json"));

var _unknownTagError = _interopRequireDefault(require("./fixtures/unknownTag-error.json"));

var _unknownTagErrorChildren = _interopRequireDefault(require("./fixtures/unknownTag-error-children.json"));

const _createElement = /*#__PURE__*/React.createElement;
const textNode = ['span', {
  'data-type': 'text'
}, ['span', {
  'data-type': 'leaf'
}, 'This is paragraph.']];
describe('Zhi:tag', () => {
  it('正确渲染', () => {
    const asl = ['root', ['p', textNode, _unknownTag.default]];
    const container = (0, _react2.render)( /*#__PURE__*/_createElement(_reader.default, {
      content: asl
    }));
    expect(container).toMatchSnapshot();
    expect(!!container.queryByText('暂无法解析')).toBe(true);
  });
  it('renderNode 异常渲染', () => {
    const asl = ['root', ['p', textNode, _unknownTagError.default]];
    const container = (0, _react2.render)( /*#__PURE__*/_createElement(_reader.default, {
      content: asl
    }));
    expect(container).toMatchSnapshot();
    expect(!!container.queryByText('暂无法解析')).toBe(true);
  });
  it('renderChildren 异常渲染', () => {
    const asl = ['root', ['p', textNode, _unknownTagErrorChildren.default]];
    const container = (0, _react2.render)( /*#__PURE__*/_createElement(_reader.default, {
      content: asl
    }));
    expect(container).toMatchSnapshot();
    expect(!!container.queryByText('暂无法解析')).toBe(true);
  });
});
//# sourceMappingURL=unknownTag.test.js.map