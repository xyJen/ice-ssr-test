{"version":3,"sources":["../../../src/__tests__/notSupport.test.tsx"],"names":["describe","it","skip","originError","console","error","jest","fn","expect","Value","fromJSON","notSupport","not","toThrow","toBeCalled","asl","container","querySelectorAll","toHaveLength","table","only","src","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Value } from '@ali/4ever-cangjie';\nimport { render } from '@testing-library/react';\nimport Zhi from './reader';\nimport table from './fixtures/table.json';\nimport notSupport from './slateFixtures/notSupport.json';\n\ndescribe('Zhi:empty', () => {\n  it.skip('对不识别节点进行容错', () => {\n    const originError = console.error;\n    console.error = jest.fn();\n    expect(() => { render(<Zhi content={Value.fromJSON(notSupport)} />); }).not.toThrow();\n    expect(console.error).toBeCalled();\n    console.error = originError;\n  });\n\n  it('对空 ASL 进行容错', () => {\n    const asl = ['root', {}];\n    expect(() => { render(<Zhi content={asl} />); }).not.toThrow();\n  });\n\n  it('对空 ASL 使用自定义的 renderEmpty ', () => {\n    const asl = ['root', {}];\n    const { container } = render(<Zhi content={asl} renderEmpty={() => <my_empty />} />);\n    expect(container.querySelectorAll('my_empty')).toHaveLength(1);\n  });\n\n  it('对非空 ASL 使用自定义的 renderEmpty, 不会使用该 renderEmpty - TABLE', () => {\n    const asl = ['root', table];\n    const { container } = render(<Zhi content={asl} renderEmpty={() => <my_empty />} />);\n    expect(container.querySelectorAll('my_empty')).toHaveLength(0);\n    expect(container.querySelectorAll('table')).toHaveLength(1);\n  });\n\n  it.only('对非空 ASL 使用自定义的 renderEmpty, 不会使用该 renderEmpty - IMAGE', () => {\n    const asl = ['root',\n      ['p', ['img', { src: 'http://aa' }]],\n    ];\n    const { container } = render(<Zhi content={asl} renderEmpty={() => <my_empty />} />);\n    expect(container.querySelectorAll('my_empty')).toHaveLength(0);\n    expect(container.querySelectorAll('img')).toHaveLength(1);\n  });\n\n  it('对非空 ASL 使用自定义的 renderEmpty, 不会使用该 renderEmpty - HR', () => {\n    const asl = ['root',\n      ['hr', { color: 'black' }],\n    ];\n    const { container } = render(<Zhi content={asl} renderEmpty={() => <my_empty />} />);\n    expect(container.querySelectorAll('my_empty')).toHaveLength(0);\n    expect(container.querySelectorAll('hr')).toHaveLength(1);\n  });\n});\n"],"file":"notSupport.test.js"}