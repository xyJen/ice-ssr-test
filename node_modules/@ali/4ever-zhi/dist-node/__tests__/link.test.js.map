{"version":3,"sources":["../../../src/__tests__/link.test.tsx"],"names":["describe","openLink","jest","fn","spiedWindowOpen","spiedConsoleError","beforeAll","spyOn","window","mockImplementation","afterAll","mockRestore","afterEach","mockReset","it","asl","link","container","expect","toMatchSnapshot","linkButton","querySelector","not","toBeInTheDocument","handleOpenLink","fireEvent","click","toHaveBeenCalledWith","linkInCardStyle","reader","getByTestId","toBeTruthy","image","getComputedStyle","backgroundImage","toBe","queryByText","blockLinkCard"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;uBAR4B,a;AAU5BA,QAAQ,CAAC,UAAD,EAAa,MAAM;AAEzB,QAAMC,QAAQ,GAAGC,IAAI,CAACC,EAAL,EAAjB;AACA,MAAIC,eAAJ;AACA,MAAIC,iBAAJ;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdF,IAAAA,eAAe,GAAGF,IAAI,CAACK,KAAL,CAAWC,MAAX,EAAmB,MAAnB,CAAlB;AACAJ,IAAAA,eAAe,CAACK,kBAAhB,CAAmCR,QAAnC;AACD,GAHQ,CAAT;AAKAS,EAAAA,QAAQ,CAAC,MAAM;AACbL,IAAAA,iBAAiB,CAACM,WAAlB;AACAP,IAAAA,eAAe,CAACO,WAAhB;AACD,GAHO,CAAR;AAKAC,EAAAA,SAAS,CAAC,MAAM;AACdX,IAAAA,QAAQ,CAACY,SAAT;AACD,GAFQ,CAAT;AAIAC,EAAAA,EAAE,CAAC,MAAD,EAAS,MAAM;AACf,UAAMC,GAAG,GAAG,CAAC,MAAD,EAASC,aAAT,CAAZ;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAgB,kCAAO,eAAC,eAAD;AAAK,MAAA,OAAO,EAAEF;AAAd,MAAP,CAAtB;AACAG,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;AACD,GAJC,CAAF;AAMAL,EAAAA,EAAE,CAAC,gBAAD,EAAmB,MAAM;AACzB,UAAMC,GAAG,GAAG,CAAC,MAAD,EAAS,CAAC,GAAD,EACnB,CACE,MADF,EAEE;AACE,mBAAa;AADf,KAFF,EAKE,CACE,MADF,EAEE;AACE,mBAAa,MADf;AAEE,gBAAU;AAFZ,KAFF,EAME,eANF,CALF,CADmB,CAAT,CAAZ;AAgBA,UAAM;AAAEE,MAAAA;AAAF,QAAgB,kCAAO,eAAC,eAAD;AAAK,MAAA,OAAO,EAAEF;AAAd,MAAP,CAAtB;AACAG,IAAAA,MAAM,CAACD,SAAD,CAAN,CAAkBE,eAAlB;AACA,UAAMC,UAAU,GAAGH,SAAS,CAACI,aAAV,CAAwB,GAAxB,CAAnB;AACAH,IAAAA,MAAM,CAACE,UAAD,CAAN,CAAmBE,GAAnB,CAAuBC,iBAAvB;AACD,GArBC,CAAF;AAuBAT,EAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/B,UAAMC,GAAG,GAAG,CAAC,MAAD,EAASC,aAAT,CAAZ;AACA,UAAMQ,cAAc,GAAGtB,IAAI,CAACC,EAAL,EAAvB;AACA,UAAM;AAAEc,MAAAA;AAAF,QAAgB,kCAAO,eAAC,eAAD;AAAK,MAAA,OAAO,EAAEF,GAAd;AAAmB,MAAA,QAAQ,EAAES;AAA7B,MAAP,CAAtB;AACA,UAAMJ,UAAU,GAAGH,SAAS,CAACI,aAAV,CAAwB,GAAxB,CAAnB;;AACAI,2BAAUC,KAAV,CAAgBN,UAAhB;;AACAF,IAAAA,MAAM,CAACM,cAAD,CAAN,CAAuBG,oBAAvB,CAA4C,wBAA5C;AACD,GAPC,CAAF;AASD,CA1DO,CAAR;AA4DA3B,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpC;AACAc,EAAAA,EAAE,CAAC,MAAD,EAAS,MAAM;AACf,UAAMC,GAAG,GAAG,CAAC,MAAD,EAASa,wBAAT,CAAZ;AACA,UAAMC,MAAM,GAAG,kCAAO,eAAC,eAAD;AAAK,MAAA,OAAO,EAAEd;AAAd,MAAP,CAAf;AACAG,IAAAA,MAAM,CAACW,MAAM,CAACC,WAAP,CAAmB,WAAnB,CAAD,CAAN,CAAwCC,UAAxC;AACD,GAJC,CAAF;AAMAjB,EAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAClC,UAAMC,GAAG,GAAG,CAAC,MAAD,EAAS,CACnB,GADmB,EAEnB,CACE,GADF,EAEE;AACE,cAAQ,gBADV;AAEE,kBAAY;AACV,iBAAS,IADC;AAEV,iBAAS,GAFC;AAGV,kBAAU,GAHA;AAIV,gBAAQ,MAJE;AAKV,uBAAe;AALL;AAFd,KAFF,CAFmB,CAAT,CAAZ;AAgBA,UAAM;AAAEE,MAAAA;AAAF,QAAgB,kCAAO,eAAC,eAAD;AAAK,MAAA,OAAO,EAAEF;AAAd,MAAP,CAAtB;AACA,UAAMiB,KAAK,GAAGf,SAAS,CAACI,aAAV,CAAwB,iBAAxB,CAAd;AACAH,IAAAA,MAAM,CAACe,gBAAgB,CAACD,KAAD,CAAhB,CAAwBE,eAAzB,CAAN,CACGC,IADH,CACQ,mGADR;AAED,GArBC,CAAF;AAuBArB,EAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/B,UAAMC,GAAG,GAAG,CAAC,MAAD,EAASa,wBAAT,CAAZ;AACA,UAAMJ,cAAc,GAAGtB,IAAI,CAACC,EAAL,EAAvB;AACA,UAAM0B,MAAM,GAAG,kCAAO,eAAC,eAAD;AAAK,MAAA,OAAO,EAAEd,GAAd;AAAmB,MAAA,QAAQ,EAAES;AAA7B,MAAP,CAAf;AACA,UAAMJ,UAAU,GAAGS,MAAM,CAACO,WAAP,CAAmB,MAAnB,CAAnB;;AACAX,2BAAUC,KAAV,CAAgBN,UAAhB;;AACAF,IAAAA,MAAM,CAACM,cAAD,CAAN,CAAuBG,oBAAvB,CAA4C,wBAA5C;AACD,GAPC,CAAF;AAQD,CAvCO,CAAR;AAyCA3B,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClC;AACAc,EAAAA,EAAE,CAAC,MAAD,EAAS,MAAM;AACf,UAAMC,GAAG,GAAG,CAAC,MAAD,EAASsB,sBAAT,CAAZ;AACA,UAAMR,MAAM,GAAG,kCAAO,eAAC,eAAD;AAAK,MAAA,OAAO,EAAEd;AAAd,MAAP,CAAf;AACAG,IAAAA,MAAM,CAACW,MAAM,CAACC,WAAP,CAAmB,WAAnB,CAAD,CAAN,CAAwCC,UAAxC;AACD,GAJC,CAAF;AAMAjB,EAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAClC,UAAMC,GAAG,GAAG,CAAC,MAAD,EACZ,CACE,MADF,EAEE;AACE,kBAAY,MADd;AAEE,gBAAU,EAFZ;AAGE,iBAAW;AACT,kBAAU,EADD;AAET,iBAAS;AAFA,OAHb;AAOE,kBAAY;AACV,gBAAQ,MADE;AAEV,gBAAQ,gBAFE;AAGV,oBAAY;AACV,mBAAS,IADC;AAEV,mBAAS,GAFC;AAGV,oBAAU,GAHA;AAIV,kBAAQ,MAJE;AAKV,yBAAe;AALL;AAHF;AAPd,KAFF,EAqBE,CACE,MADF,EAEE;AACE,mBAAa;AADf,KAFF,EAKE,CACE,MADF,EAEE;AACE,mBAAa;AADf,KAFF,EAKE,EALF,CALF,CArBF,CADY,CAAZ;AAqCA,UAAM;AAAEE,MAAAA;AAAF,QAAgB,kCAAO,eAAC,eAAD;AAAK,MAAA,OAAO,EAAEF;AAAd,MAAP,CAAtB;AACA,UAAMiB,KAAK,GAAGf,SAAS,CAACI,aAAV,CAAwB,iBAAxB,CAAd;AACAH,IAAAA,MAAM,CAACe,gBAAgB,CAACD,KAAD,CAAhB,CAAwBE,eAAzB,CAAN,CACGC,IADH,CACQ,mGADR;AAED,GA1CC,CAAF;AA4CArB,EAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/B,UAAMC,GAAG,GAAG,CAAC,MAAD,EAASsB,sBAAT,CAAZ;AACA,UAAMb,cAAc,GAAGtB,IAAI,CAACC,EAAL,EAAvB;AACA,UAAM0B,MAAM,GAAG,kCAAO,eAAC,eAAD;AAAK,MAAA,OAAO,EAAEd,GAAd;AAAmB,MAAA,QAAQ,EAAES;AAA7B,MAAP,CAAf;AACA,UAAMJ,UAAU,GAAGS,MAAM,CAACO,WAAP,CAAmB,IAAnB,CAAnB;;AACAX,2BAAUC,KAAV,CAAgBN,UAAhB;;AACAF,IAAAA,MAAM,CAACM,cAAD,CAAN,CAAuBG,oBAAvB,CAA4C,uBAA5C;AACD,GAPC,CAAF;AAQD,CA5DO,CAAR","sourcesContent":["import * as React from 'react';\nimport { render } from '@testing-library/react';\nimport {\n  fireEvent,\n} from '@ali/4ever-dev-test';\nimport '@testing-library/jest-dom/extend-expect';\nimport Zhi from './reader';\nimport link from './fixtures/link.json';\nimport linkInCardStyle from './fixtures/linkInCardStyle.json';\nimport blockLinkCard from './fixtures/blockLinkCard.json';\n\ndescribe('Zhi:link', () => {\n\n  const openLink = jest.fn();\n  let spiedWindowOpen: jest.SpyInstance;\n  let spiedConsoleError: jest.SpyInstance;\n\n  beforeAll(() => {\n    spiedWindowOpen = jest.spyOn(window, 'open');\n    spiedWindowOpen.mockImplementation(openLink);\n  });\n\n  afterAll(() => {\n    spiedConsoleError.mockRestore();\n    spiedWindowOpen.mockRestore();\n  });\n\n  afterEach(() => {\n    openLink.mockReset();\n  });\n\n  it('正确渲染', () => {\n    const asl = ['root', link];\n    const { container } = render(<Zhi content={asl} />);\n    expect(container).toMatchSnapshot();\n  });\n\n  it('正确渲染 unlink 链接', () => {\n    const asl = ['root', [\"p\",\n      [\n        'span',\n        {\n          'data-type': 'text'\n        },\n        [\n          'span',\n          {\n            'data-type': 'leaf',\n            'unlink': {}\n          },\n          'www.baidu.com'\n        ]\n      ],\n    ]];\n    const { container } = render(<Zhi content={asl} />);\n    expect(container).toMatchSnapshot();\n    const linkButton = container.querySelector('a');\n    expect(linkButton).not.toBeInTheDocument();\n  });\n\n  it('点击链接触发 onOpenLink 事件', () => {\n    const asl = ['root', link];\n    const handleOpenLink = jest.fn();\n    const { container } = render(<Zhi content={asl} openLink={handleOpenLink} />);\n    const linkButton = container.querySelector('a');\n    fireEvent.click(linkButton);\n    expect(handleOpenLink).toHaveBeenCalledWith('https://www.baidu.com/');\n  });\n\n});\n\ndescribe('Zhi:linkInCardStyle', () => {\n  // 链接卡片依赖于 we-design 不应该使用 snapshot\n  it('正确渲染', () => {\n    const asl = ['root', linkInCardStyle];\n    const reader = render(<Zhi content={asl} />);\n    expect(reader.getByTestId('link-card')).toBeTruthy();\n  });\n\n  it('对于没有获得图片的「百度」链接，显示默认占位图', () => {\n    const asl = ['root', [\n      \"p\",\n      [\n        \"a\",\n        {\n          \"href\": \"www.baidu.com/\",\n          \"cardInfo\": {\n            \"title\": \"百度\",\n            \"width\": 480,\n            \"height\": 150,\n            \"desc\": \"测试测试\",\n            \"displayType\": \"card\"\n          }\n        },\n      ],\n    ]];\n    const { container } = render(<Zhi content={asl} />);\n    const image = container.querySelector('.background-img') as HTMLDivElement;\n    expect(getComputedStyle(image).backgroundImage)\n      .toBe('url(https://img.alicdn.com/imgextra/i3/O1CN01n0JkDW1cBtqqiRXkU_!!6000000003563-2-tps-128-128.png)');\n  });\n\n  it('点击链接触发 onOpenLink 事件', () => {\n    const asl = ['root', linkInCardStyle];\n    const handleOpenLink = jest.fn();\n    const reader = render(<Zhi content={asl} openLink={handleOpenLink} />);\n    const linkButton = reader.queryByText('link');\n    fireEvent.click(linkButton);\n    expect(handleOpenLink).toHaveBeenCalledWith('https://www.baidu.com/');\n  });\n});\n\ndescribe('Zhi:blockLinkCard', () => {\n  // 链接卡片依赖于 we-design 不应该使用 snapshot\n  it('正确渲染', () => {\n    const asl = ['root', blockLinkCard];\n    const reader = render(<Zhi content={asl} />);\n    expect(reader.getByTestId('link-card')).toBeTruthy();\n  });\n\n  it('对于没有获得图片的「百度」链接，显示默认占位图', () => {\n    const asl = ['root', \n    [\n      \"card\",\n      {\n        \"cardType\": \"link\",\n        \"height\": 88,\n        \"spacing\": {\n          \"before\": 10,\n          \"after\": 10\n        },\n        \"metadata\": {\n          \"text\": \"1234\",\n          \"href\": \"www.baidu.com/\",\n          \"cardInfo\": {\n            \"title\": \"百度\",\n            \"width\": 480,\n            \"height\": 150,\n            \"desc\": \"测试测试\",\n            \"displayType\": \"card\"\n          }\n        }\n      },\n      [\n        \"span\",\n        {\n          \"data-type\": \"text\"\n        },\n        [\n          \"span\",\n          {\n            \"data-type\": \"leaf\"\n          },\n          \"\"\n        ]\n      ]\n    ]\n    ];\n    const { container } = render(<Zhi content={asl} />);\n    const image = container.querySelector('.background-img') as HTMLDivElement;\n    expect(getComputedStyle(image).backgroundImage)\n      .toBe('url(https://img.alicdn.com/imgextra/i3/O1CN01n0JkDW1cBtqqiRXkU_!!6000000003563-2-tps-128-128.png)');\n  });\n\n  it('点击链接触发 onOpenLink 事件', () => {\n    const asl = ['root', blockLinkCard];\n    const handleOpenLink = jest.fn();\n    const reader = render(<Zhi content={asl} openLink={handleOpenLink} />);\n    const linkButton = reader.queryByText('百度');\n    fireEvent.click(linkButton);\n    expect(handleOpenLink).toHaveBeenCalledWith('http://www.baidu.com/');\n  });\n});\n"],"file":"link.test.js"}