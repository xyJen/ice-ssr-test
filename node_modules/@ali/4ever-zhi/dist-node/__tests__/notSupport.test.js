"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _react2 = require("@testing-library/react");

var _reader = _interopRequireDefault(require("./reader"));

var _table = _interopRequireDefault(require("./fixtures/table.json"));

var _notSupport = _interopRequireDefault(require("./slateFixtures/notSupport.json"));

const _createElement = /*#__PURE__*/React.createElement;

var _ref2 = /*#__PURE__*/_createElement("my_empty", null);

var _ref3 = /*#__PURE__*/_createElement("my_empty", null);

var _ref4 = /*#__PURE__*/_createElement("my_empty", null);

var _ref5 = /*#__PURE__*/_createElement("my_empty", null);

describe('Zhi:empty', () => {
  it.skip('对不识别节点进行容错', () => {
    const originError = console.error;
    console.error = jest.fn();
    expect(() => {
      (0, _react2.render)( /*#__PURE__*/_createElement(_reader.default, {
        content: _everCangjie.Value.fromJSON(_notSupport.default)
      }));
    }).not.toThrow();
    expect(console.error).toBeCalled();
    console.error = originError;
  });
  it('对空 ASL 进行容错', () => {
    const asl = ['root', {}];

    var _ref = /*#__PURE__*/_createElement(_reader.default, {
      content: asl
    });

    expect(() => {
      (0, _react2.render)(_ref);
    }).not.toThrow();
  });
  it('对空 ASL 使用自定义的 renderEmpty ', () => {
    const asl = ['root', {}];
    const {
      container
    } = (0, _react2.render)( /*#__PURE__*/_createElement(_reader.default, {
      content: asl,
      renderEmpty: () => _ref2
    }));
    expect(container.querySelectorAll('my_empty')).toHaveLength(1);
  });
  it('对非空 ASL 使用自定义的 renderEmpty, 不会使用该 renderEmpty - TABLE', () => {
    const asl = ['root', _table.default];
    const {
      container
    } = (0, _react2.render)( /*#__PURE__*/_createElement(_reader.default, {
      content: asl,
      renderEmpty: () => _ref3
    }));
    expect(container.querySelectorAll('my_empty')).toHaveLength(0);
    expect(container.querySelectorAll('table')).toHaveLength(1);
  });
  it.only('对非空 ASL 使用自定义的 renderEmpty, 不会使用该 renderEmpty - IMAGE', () => {
    const asl = ['root', ['p', ['img', {
      src: 'http://aa'
    }]]];
    const {
      container
    } = (0, _react2.render)( /*#__PURE__*/_createElement(_reader.default, {
      content: asl,
      renderEmpty: () => _ref4
    }));
    expect(container.querySelectorAll('my_empty')).toHaveLength(0);
    expect(container.querySelectorAll('img')).toHaveLength(1);
  });
  it('对非空 ASL 使用自定义的 renderEmpty, 不会使用该 renderEmpty - HR', () => {
    const asl = ['root', ['hr', {
      color: 'black'
    }]];
    const {
      container
    } = (0, _react2.render)( /*#__PURE__*/_createElement(_reader.default, {
      content: asl,
      renderEmpty: () => _ref5
    }));
    expect(container.querySelectorAll('my_empty')).toHaveLength(0);
    expect(container.querySelectorAll('hr')).toHaveLength(1);
  });
});
//# sourceMappingURL=notSupport.test.js.map