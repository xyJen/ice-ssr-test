import { Controller, Element, Group } from '@ali/4ever-cangjie';
declare const HeadingGroupPlugin: (config: any) => {
    renderGroup: import("@ali/4ever-cangjie/src/interfaces/renderGroup").default | undefined;
    generateGroup: ((element: Element<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").Node[]>, controller: Controller, next: import("@ali/4ever-cangjie/src/interfaces/next").default<void>) => void | (Pick<Group<Record<string, any>>, "type"> & {
        data: Omit<Record<string, any> & {
            cangjieGroupCollpased: boolean;
        }, "cangjieGroupCollpased">;
    })) | undefined;
    renderMark: ((props: import("@ali/4ever-cangjie").RenderMarkProps, controller: Controller, next: import("@ali/4ever-cangjie/src/interfaces/next").default<JSX.Element>) => JSX.Element) | undefined;
    queries: {
        getHeadingParent(controller: Controller, node: import("@ali/4ever-cangjie").Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>): import("@ali/4ever-cangjie").Block<import("@ali/4ever-mo").FoldableHeadingData, import("@ali/4ever-cangjie").BlockChildren> | null;
        getHeadingAncestors(controller: Controller, node: import("@ali/4ever-cangjie").Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>): import("@ali/4ever-cangjie").Block<import("@ali/4ever-mo").FoldableHeadingData, import("@ali/4ever-cangjie").BlockChildren>[];
        getHeadingGroupLevel: () => any;
        isHeadingGroupAvailable: () => boolean;
        isElementInGroup: (controller: Controller, element: Element, group: Group) => boolean;
    };
};
export default HeadingGroupPlugin;
