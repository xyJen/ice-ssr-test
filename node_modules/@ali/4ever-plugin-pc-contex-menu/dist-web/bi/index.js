import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Selection, Queries, CangjieSelectEvent } from '@ali/4ever-cangjie';
import { LEGAL_EVENT, dispatchCustomEvent } from '@ali/4ever-utils';
import { ACTION_CLOSE, openContextMenu } from "../utils/actions";
import ContextMenu from "../utils/PCContextMenu";
import { key } from "../utils/meta";

function handleAction(action, controller, next) {
  var type = action.type;

  if (type === ACTION_CLOSE) {
    handleCloseContextMenu(controller);
  }

  return next();
}

function handleCloseContextMenu(controller) {
  var data = controller.value.data;

  if (data.contextData) {
    dispatchCustomEvent(LEGAL_EVENT.contextMenuVisible, {
      visible: false
    });

    if (controller.enableHots || controller.isPendingEnable) {
      // BACKGROUND: 右键菜单全选时，形成的 op 序列是：
      // -- set_selection -- set_data --
      // 导致无法匹配选区 pending 的模式，因此将隐藏菜单的变更滞后
      // -- set_selection -- pending -- set_data -- ...
      setTimeout(function () {
        controller.setData(_extends({}, data, {
          contextData: null
        }));
      }, 0);
    } else {
      controller.setData(_extends({}, data, {
        contextData: null
      }));
    }
  }
}

export var biFactory = function biFactory(configs) {
  var pcContextMenu = (configs == null ? void 0 : configs.pcContextMenu) || {};

  function handleContextMenu(event, controller, next) {
    event.preventDefault();
    var contextData = {
      x: event.clientX,
      y: event.clientY
    }; // 如果右键的时候，当前选区选中了一个 void，则选中这个 void 元素

    var _controller$value = controller.value,
        selection = _controller$value.selection,
        document = _controller$value.document;

    if (selection.isCollapsed) {
      var point = selection.anchor;
      var voidParent = document.getClosestVoid(point.key, controller);

      if (voidParent) {
        var anchor = controller.query(Queries.pointAtDistance, point, -1);
        var focus = controller.query(Queries.pointAtDistance, point, 1);
        var newSelection = Selection.create({
          anchor: anchor,
          focus: focus
        });
        controller.run('onCangjieSelect', CangjieSelectEvent({
          selection: newSelection
        }));
      }
    }

    var data = controller.value.data;
    dispatchCustomEvent(LEGAL_EVENT.contextMenuVisible, {
      visible: true
    });
    controller.setData(_extends({}, data, {
      contextData: contextData
    }));
    controller.run('onAction', openContextMenu());
    return next();
  }

  function handleMouseDown(event, controller, next) {
    handleCloseContextMenu(controller);
    return next();
  }

  function renderEditable(_, controller, next) {
    return /*#__PURE__*/_createElement(React.Fragment, null, next(), /*#__PURE__*/_createElement(ContextMenu, pcContextMenu));
  }

  return {
    key: key,
    onAction: handleAction,
    onContextMenu: handleContextMenu,
    onMouseDown: handleMouseDown,
    renderEditable: renderEditable,
    models: []
  };
};
//# sourceMappingURL=index.js.map