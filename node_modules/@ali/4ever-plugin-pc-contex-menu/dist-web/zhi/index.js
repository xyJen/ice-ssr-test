import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Commands, Selection, Queries, CangjieSelectEvent } from '@ali/4ever-cangjie';
import { key } from "../utils/meta";
import ContextMenu from "../utils/PCContextMenu";
import { ACTION_CLOSE, openContextMenu } from "../utils/actions";

function handleAction(action, controller, next) {
  var type = action.type;

  if (type === ACTION_CLOSE) {
    handleCloseContextMenu(controller);
  }

  return next();
}

function handleCloseContextMenu(controller) {
  var data = controller.value.data;

  if (data.contextData) {
    controller.setData(_extends({}, data, {
      contextData: null
    }));
  }
}

export var zhiFactory = function zhiFactory(configs) {
  var pcContextMenu = (configs == null ? void 0 : configs.pcContextMenu) || {};

  function handleContextMenu(event, controller, next) {
    event.preventDefault();
    var contextData = {
      x: event.clientX,
      y: event.clientY
    };
    var _controller$value = controller.value,
        data = _controller$value.data,
        selection = _controller$value.selection,
        document = _controller$value.document;
    controller.command(Commands.focus);

    if (selection.isCollapsed) {
      var point = selection.anchor;
      var voidParent = document.getClosestVoid(point.key, controller);

      if (voidParent) {
        var anchor = controller.query(Queries.pointAtDistance, point, -1);
        var focus = controller.query(Queries.pointAtDistance, point, 1);
        var newSelection = Selection.create({
          anchor: anchor,
          focus: focus
        });
        controller.run('onCangjieSelect', CangjieSelectEvent({
          selection: newSelection
        }));
      }
    }

    controller.setData(_extends({}, data, {
      contextData: contextData
    }));
    controller.run('onAction', openContextMenu());
    return next();
  }

  function handleMouseDown(event, controller, next) {
    handleCloseContextMenu(controller);
    return next();
  }

  function renderEditable(_, controller, next) {
    return /*#__PURE__*/_createElement(React.Fragment, null, next(), /*#__PURE__*/_createElement(ContextMenu, pcContextMenu));
  }

  return {
    key: key,
    onAction: handleAction,
    onContextMenu: handleContextMenu,
    onMouseDown: handleMouseDown,
    renderEditable: renderEditable
  };
};
//# sourceMappingURL=index.js.map