"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zhiFactory = void 0;

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _meta = require("../utils/meta");

var _PCContextMenu = _interopRequireDefault(require("../utils/PCContextMenu"));

var _actions = require("../utils/actions");

const _createElement = /*#__PURE__*/_react.default.createElement;

function handleAction(action, controller, next) {
  const {
    type
  } = action;

  if (type === _actions.ACTION_CLOSE) {
    handleCloseContextMenu(controller);
  }

  return next();
}

function handleCloseContextMenu(controller) {
  const {
    data
  } = controller.value;

  if (data.contextData) {
    controller.setData({ ...data,
      contextData: null
    });
  }
}

const zhiFactory = configs => {
  const pcContextMenu = configs?.pcContextMenu || {};

  function handleContextMenu(event, controller, next) {
    event.preventDefault();
    const contextData = {
      x: event.clientX,
      y: event.clientY
    };
    const {
      data,
      selection,
      document
    } = controller.value;
    controller.command(_everCangjie.Commands.focus);

    if (selection.isCollapsed) {
      const {
        anchor: point
      } = selection;
      const voidParent = document.getClosestVoid(point.key, controller);

      if (voidParent) {
        const anchor = controller.query(_everCangjie.Queries.pointAtDistance, point, -1);
        const focus = controller.query(_everCangjie.Queries.pointAtDistance, point, 1);

        const newSelection = _everCangjie.Selection.create({
          anchor,
          focus
        });

        controller.run('onCangjieSelect', (0, _everCangjie.CangjieSelectEvent)({
          selection: newSelection
        }));
      }
    }

    controller.setData({ ...data,
      contextData
    });
    controller.run('onAction', (0, _actions.openContextMenu)());
    return next();
  }

  function handleMouseDown(event, controller, next) {
    handleCloseContextMenu(controller);
    return next();
  }

  function renderEditable(_, controller, next) {
    return /*#__PURE__*/_createElement(_react.default.Fragment, null, next(), /*#__PURE__*/_createElement(_PCContextMenu.default, pcContextMenu));
  }

  return {
    key: _meta.key,
    onAction: handleAction,
    onContextMenu: handleContextMenu,
    onMouseDown: handleMouseDown,
    renderEditable
  };
};

exports.zhiFactory = zhiFactory;
//# sourceMappingURL=index.js.map