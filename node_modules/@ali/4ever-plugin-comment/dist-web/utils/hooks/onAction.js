import { Commands, Point, Selection } from '@ali/4ever-cangjie';
import { ACTION_COMMENT_CLICK, ACTION_COMMENT_SHOW, ACTION_COMMENT_ADD, ACTION_COMMENT_CANCEL, ACTION_COMMENT_SET_ID, ACTION_COMMENT_SET_COMMENTS, ACTION_COMMENT_SET_SIDE_BAR, ACTION_COMMENT_SELECTED_NODES } from "../actions";
import addNewComment from "../actions/addNewComment";
import cancelComment from "../actions/cancelComment";
import newCommentClick from "../actions/newCommentClick";
import showComment from "../actions/showComment";
import setActiveId from "../commands/setActiveId";
import setComments from "../commands/setComments";
import setSidebarVisible from "../commands/setSidebarVisible";
export default (function (configs) {
  return function onAction(action, controller, next) {
    var type = action.type;
    /**
     * 缩放模式下，也要允许设置侧边栏是否可见。不然设置无效，返回后，会出现重叠。
     */

    if (type === ACTION_COMMENT_SET_SIDE_BAR) {
      if (!action.payload) {
        throw new Error('ACTION_COMMENT_SET_SIDE_BAR: action.payload is empty');
      }

      var visible = action.payload.visible;
      setSidebarVisible(controller, visible);

      var _ref = configs || {},
          onSidebarVisibleChange = _ref.onSidebarVisibleChange;

      onSidebarVisibleChange && onSidebarVisibleChange(visible);
      return next();
    }

    if (configs != null && configs.isDisabled && configs.isDisabled()) {
      if (type === ACTION_COMMENT_CLICK) {
        configs.onDisabled && configs.onDisabled();
      }

      return next();
    }

    if (type === ACTION_COMMENT_CLICK) {
      var _configs$locale;

      controller.run('onCangjieBlur');
      newCommentClick(controller, configs == null ? void 0 : (_configs$locale = configs.locale) == null ? void 0 : _configs$locale.comment);
    } else if (type === ACTION_COMMENT_ADD) {
      addNewComment(controller);
    } else if (type === ACTION_COMMENT_SHOW) {
      var _action$payload, _action$payload2;

      showComment(controller, (_action$payload = action.payload) == null ? void 0 : _action$payload.contentId, (_action$payload2 = action.payload) == null ? void 0 : _action$payload2.options, configs);
    } else if (type === ACTION_COMMENT_CANCEL) {
      cancelComment(controller);
    } else if (type === ACTION_COMMENT_SET_ID) {
      if (!action.payload) {
        throw new Error('ACTION_COMMENT_SET_ID: action.payload is empty');
      }

      var _action$payload3 = action.payload,
          contentId = _action$payload3.contentId,
          isAutoFocus = _action$payload3.isAutoFocus;
      setActiveId(controller, contentId, isAutoFocus);

      var _ref2 = configs || {},
          onActiveIdChange = _ref2.onActiveIdChange;

      onActiveIdChange && onActiveIdChange(contentId);
    } else if (type === ACTION_COMMENT_SET_COMMENTS) {
      if (!action.payload) {
        throw new Error('ACTION_COMMENT_SET_COMMENTS: action.payload is empty');
      }

      var comments = action.payload.comments;
      setComments(controller, comments);
    } else if (type === ACTION_COMMENT_SELECTED_NODES) {
      var _ref3 = action.payload,
          selectedNodes = _ref3.selectedNodes;
      var firstNode = selectedNodes[0];
      var lastNode = selectedNodes[selectedNodes.length - 1];
      var anchor = Point.createFromParams(firstNode.key, 'before');
      var focus = Point.createFromParams(lastNode.key, 'after');
      var newSelection = Selection.create({
        anchor: anchor,
        focus: focus
      });
      controller.command(Commands.select, newSelection);
      controller.run('onAction', {
        type: ACTION_COMMENT_CLICK
      });
      controller.dispatch('cancelSelectNode');
      return controller;
    }

    return next();
  };
});
//# sourceMappingURL=onAction.js.map