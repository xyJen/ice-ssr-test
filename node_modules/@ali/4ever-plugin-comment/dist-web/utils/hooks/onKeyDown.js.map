{"version":3,"sources":["../../../../src/utils/hooks/onKeyDown.ts"],"names":["Commands","Text","Selection","TextPoint","isKeyHotkey","ACTION_COMMENT_CLICK","DataMark","hoverCapture","isCommentHotkey","isBackspaceHotKey","isEnterHotKey","filterCommentMarkInNewLine","controller","value","focusBlock","selection","isCollapsed","text","isText","nodes","leave","leaves","length","mark","marks","find","m","isDataMark","newLeave","set","filter","newText","key","offset","newSelection","create","anchor","focus","command","replaceNodeByKey","select","configs","onKeyDown","event","next","isDisabled","res","trigger","preventDefault","run","type"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Controller,\n  Commands,\n  Text,\n  Selection,\n  TextPoint,\n} from '@ali/4ever-cangjie';\nimport { isKeyHotkey } from 'is-hotkey';\nimport { ACTION_COMMENT_CLICK } from '../actions';\nimport { CommentPluginConfigs } from '../types';\nimport { DataMark } from '../models/marks';\nimport hoverCapture from '../utils/hoverCapture';\n\nconst isCommentHotkey = isKeyHotkey('mod+shift+m');\nconst isBackspaceHotKey = isKeyHotkey('backspace');\nconst isEnterHotKey = isKeyHotkey('enter');\n\n/**\n * 在新行中，过滤掉评论标记。\n *\n * 目前 mark 和底层耦合很深，无法在新行、输入时，过滤掉 mark。这里在插件手动过滤。\n */\nfunction filterCommentMarkInNewLine(controller: Controller) {\n  const { focusBlock, selection } = controller.value;\n  // 用户按 Enter 键后，我们在一个新行\n  if (\n    selection.isCollapsed &&\n    focusBlock &&\n    !focusBlock.text &&\n    Text.isText(focusBlock.nodes[0])\n  ) {\n    const text = focusBlock.nodes[0] as Text;\n    const leave = text.leaves.length === 1 ? text.leaves[0] : null;\n    const mark = leave?.marks.find((m) => DataMark.isDataMark(m));\n    if (leave && mark) {\n      const newLeave = leave.set(\n        'marks',\n        leave.marks.filter((m) => m !== mark),\n      );\n      const newText = text.set('leaves', [newLeave]);\n      const { key } = newText;\n      const offset = 0;\n      const newSelection = Selection.create({\n        anchor: TextPoint.create({ key, offset }),\n        focus: TextPoint.create({ key, offset }),\n      });\n      controller\n        .command(Commands.replaceNodeByKey, text.key, newText)\n        .command(Commands.select, newSelection);\n    }\n  }\n}\n\nexport default (configs: CommentPluginConfigs | undefined) => {\n  return function onKeyDown(\n    event: React.KeyboardEvent,\n    controller: Controller,\n    next: () => void,\n  ) {\n    if (configs?.isDisabled && configs.isDisabled()) {\n      return next();\n    }\n    const { value } = controller;\n    const { selection } = value;\n\n    if (selection.isCollapsed && isEnterHotKey(event)) {\n      const res = next();\n      filterCommentMarkInNewLine(controller);\n      return res;\n    }\n\n    if (isBackspaceHotKey(event)) {\n      hoverCapture.trigger();\n    }\n\n    if (selection.isCollapsed || !isCommentHotkey(event)) return next();\n\n    event.preventDefault();\n    controller.run('onAction', {\n      type: ACTION_COMMENT_CLICK,\n    });\n  };\n};\n"],"file":"onKeyDown.js"}