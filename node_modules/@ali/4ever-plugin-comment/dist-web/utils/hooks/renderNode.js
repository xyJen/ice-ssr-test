import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Block } from '@ali/4ever-cangjie';
import { ViewMark } from "../models/marks";
import { VoidMarkView } from "../components/markView";
import CommentView from "../components/commentView";
export default function createRenderNode(configs) {
  return function renderNode(props, controller, next) {
    /**
     * 这里不要乱 return，不然会导致整个页面刷新，全量调用 renderNode。
     */
    if (configs != null && configs.isGrayed && !configs.isGrayed()) {
      return next();
    }

    var document = controller.value.document;
    var node = props.node;
    var isDisabled = Boolean((configs == null ? void 0 : configs.isDisabled) && configs.isDisabled());

    if (!node.isElement()) {
      // texts
      return next();
    }

    var isVoid = controller.query('isVoid', node);

    if (!isVoid && !node.isBlock()) {
      // non-void inlines
      return next();
    }

    var isLeafBlock = Block.isLeafBlock(node);
    var isEdgeSelectable = controller.query('isEdgeSelectable', node);
    var firstChild = node.nodes[0];
    var hasVoidWrapper = (isVoid || node.type === 'code') && (firstChild == null ? void 0 : firstChild.isText());
    var voidMark = hasVoidWrapper && firstChild != null && firstChild.isText() ? firstChild.marks.find(ViewMark.isViewMark) : undefined; // add text marks for void elements

    var children;

    if (hasVoidWrapper) {
      children = /*#__PURE__*/_createElement(VoidMarkView, {
        isDisabled: isDisabled,
        isBlock: node.isBlock(),
        nodeKey: node.key,
        mark: voidMark,
        nextElements: next()
      });
    } else {
      children = next();
    }

    if (!isLeafBlock && !isEdgeSelectable) {
      return children;
    } // eslint-disable-next-line react-hooks/rules-of-hooks


    var isInsideTable = document.getClosest(node.key, function (parent) {
      return Block.isBlock(parent) && parent.type === 'table';
    });

    if (isInsideTable) {
      return children;
    }

    var closestSelectable = document.getClosestSelectableBlock(node.key, controller);

    if (closestSelectable && closestSelectable.key !== node.key) {
      return children;
    } // right side icon


    var block = node;
    return /*#__PURE__*/_createElement(CommentView, {
      block: block
    }, children);
  };
}
//# sourceMappingURL=renderNode.js.map