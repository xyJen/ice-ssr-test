import { Selection } from '@ali/4ever-cangjie';
import { ViewMark } from "../models/marks";
import isSidebarVisible from "../queries/isSidebarVisible";
import getActiveId from "../queries/getActiveId";
import showComment from "../actions/showComment";
import { cancelComment } from "../actions";
export default (function (configs) {
  return function onCangjieSelect(event, controller, next) {
    if (configs != null && configs.isDisabled && configs.isDisabled()) {
      return next();
    }

    var isSidebarOpen = isSidebarVisible(controller);

    if (!isSidebarOpen || controller.readOnly) {
      return next();
    }

    var selection = event.detail.selection;
    var point = selection.anchor;

    var _ref = configs || {},
        blurPopupOnClick = _ref.blurPopupOnClick,
        showInline = _ref.showInline;

    if (selection.isCollapsed && point.isTextPoint()) {
      var _controller$value = controller.value,
          decorations = _controller$value.decorations,
          document = _controller$value.document;
      var dec = decorations.find(function (d) {
        if (ViewMark.isViewMark(d.mark)) {
          var start = d.start,
              end = d.end;

          if (start.key === point.key && end.key === point.key) {
            // same text
            if (start.offset === end.offset) {
              // void
              return true;
            }

            return point.offset > start.offset && point.offset <= end.offset;
          } else if (start.key === point.key) {
            return point.offset > start.offset;
          } else if (end.key === point.key) {
            return point.offset <= end.offset;
          }

          var range = Selection.create({
            anchor: start,
            focus: end
          });
          return document.isNodeInRange(point.key, range);
        }

        return false;
      });

      if (dec && !showInline) {
        var mark = dec.mark;
        var readOnly = controller.readOnly;
        showComment(controller, mark.data.contentId, {
          skipAutoFocus: !readOnly
        });
      } else if (getActiveId(controller)) {
        var autoBlur = !blurPopupOnClick || blurPopupOnClick() === true;

        if (autoBlur) {
          showComment(controller, undefined);
        }

        if (autoBlur && showInline) {
          controller.run('onAction', cancelComment());
        }
      }
    }

    return next();
  };
});
//# sourceMappingURL=onCangjieSelect.js.map