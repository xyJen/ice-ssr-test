import { Commands, Text, Selection, TextPoint } from '@ali/4ever-cangjie';
import { isKeyHotkey } from 'is-hotkey';
import { ACTION_COMMENT_CLICK } from "../actions";
import { DataMark } from "../models/marks";
import hoverCapture from "../utils/hoverCapture";
var isCommentHotkey = isKeyHotkey('mod+shift+m');
var isBackspaceHotKey = isKeyHotkey('backspace');
var isEnterHotKey = isKeyHotkey('enter');
/**
 * 在新行中，过滤掉评论标记。
 *
 * 目前 mark 和底层耦合很深，无法在新行、输入时，过滤掉 mark。这里在插件手动过滤。
 */

function filterCommentMarkInNewLine(controller) {
  var _controller$value = controller.value,
      focusBlock = _controller$value.focusBlock,
      selection = _controller$value.selection; // 用户按 Enter 键后，我们在一个新行

  if (selection.isCollapsed && focusBlock && !focusBlock.text && Text.isText(focusBlock.nodes[0])) {
    var text = focusBlock.nodes[0];
    var leave = text.leaves.length === 1 ? text.leaves[0] : null;
    var mark = leave == null ? void 0 : leave.marks.find(function (m) {
      return DataMark.isDataMark(m);
    });

    if (leave && mark) {
      var newLeave = leave.set('marks', leave.marks.filter(function (m) {
        return m !== mark;
      }));
      var newText = text.set('leaves', [newLeave]);
      var key = newText.key;
      var offset = 0;
      var newSelection = Selection.create({
        anchor: TextPoint.create({
          key: key,
          offset: offset
        }),
        focus: TextPoint.create({
          key: key,
          offset: offset
        })
      });
      controller.command(Commands.replaceNodeByKey, text.key, newText).command(Commands.select, newSelection);
    }
  }
}

export default (function (configs) {
  return function onKeyDown(event, controller, next) {
    if (configs != null && configs.isDisabled && configs.isDisabled()) {
      return next();
    }

    var value = controller.value;
    var selection = value.selection;

    if (selection.isCollapsed && isEnterHotKey(event)) {
      var res = next();
      filterCommentMarkInNewLine(controller);
      return res;
    }

    if (isBackspaceHotKey(event)) {
      hoverCapture.trigger();
    }

    if (selection.isCollapsed || !isCommentHotkey(event)) return next();
    event.preventDefault();
    controller.run('onAction', {
      type: ACTION_COMMENT_CLICK
    });
  };
});
//# sourceMappingURL=onKeyDown.js.map