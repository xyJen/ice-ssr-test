{"version":3,"sources":["../../../../src/utils/hooks/renderNode.tsx"],"names":["React","Block","ViewMark","VoidMarkView","CommentView","createRenderNode","configs","renderNode","props","controller","next","isGrayed","document","value","node","isDisabled","Boolean","isElement","isVoid","query","isBlock","isLeafBlock","isEdgeSelectable","firstChild","nodes","hasVoidWrapper","type","isText","voidMark","marks","find","isViewMark","undefined","children","key","isInsideTable","getClosest","parent","closestSelectable","getClosestSelectableBlock","block"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Node, Block, RenderNodeProps, Controller } from '@ali/4ever-cangjie';\nimport { CommentPluginConfigs } from '../types';\nimport { ViewMark } from '../models/marks';\nimport { VoidMarkView } from '../components/markView';\nimport CommentView from '../components/commentView';\n\nexport default function createRenderNode(\n  configs: CommentPluginConfigs | undefined,\n) {\n  return function renderNode(\n    props: RenderNodeProps<Node>,\n    controller: Controller,\n    next,\n  ) {\n    /**\n     * 这里不要乱 return，不然会导致整个页面刷新，全量调用 renderNode。\n     */\n    if (configs?.isGrayed && !configs.isGrayed()) {\n      return next();\n    }\n    const { document } = controller.value;\n    const { node } = props;\n\n    const isDisabled = Boolean(configs?.isDisabled && configs.isDisabled());\n\n    if (!node.isElement()) {\n      // texts\n      return next();\n    }\n\n    const isVoid = controller.query('isVoid', node);\n\n    if (!isVoid && !node.isBlock()) {\n      // non-void inlines\n      return next();\n    }\n    const isLeafBlock = Block.isLeafBlock(node);\n    const isEdgeSelectable = controller.query('isEdgeSelectable', node);\n    const firstChild = node.nodes[0];\n    const hasVoidWrapper =\n      (isVoid || node.type === 'code') && firstChild?.isText();\n    const voidMark =\n      hasVoidWrapper && firstChild?.isText()\n        ? firstChild.marks.find(ViewMark.isViewMark)\n        : undefined;\n\n    // add text marks for void elements\n    let children;\n    if (hasVoidWrapper) {\n      children = (\n        <VoidMarkView\n          isDisabled={isDisabled}\n          isBlock={node.isBlock()}\n          nodeKey={node.key}\n          mark={voidMark}\n          nextElements={next()}\n        />\n      );\n    } else {\n      children = next();\n    }\n\n    if (!isLeafBlock && !isEdgeSelectable) {\n      return children;\n    }\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const isInsideTable = document.getClosest(\n      node.key,\n      (parent) => Block.isBlock(parent) && parent.type === 'table',\n    );\n    if (isInsideTable) {\n      return children;\n    }\n\n    const closestSelectable = document.getClosestSelectableBlock(\n      node.key,\n      controller,\n    );\n\n    if (closestSelectable && closestSelectable.key !== node.key) {\n      return children;\n    }\n\n    // right side icon\n    const block = node as Block;\n\n    return <CommentView block={block}>{children}</CommentView>;\n  };\n}\n"],"file":"renderNode.js"}