{"version":3,"sources":["../../../src/utils/types.ts"],"names":["MARK_TYPE_DATA","MARK_TYPE_VIEW"],"mappings":"AACA,OAAO,wBAAP;AAEA,OAAO,IAAMA,cAAc,GAAG,SAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,WAAvB","sourcesContent":["import { Decoration, Selection } from '@ali/4ever-cangjie';\nimport '@ali/4ever-plugin-fold';\n\nexport const MARK_TYPE_DATA = 'comment';\nexport const MARK_TYPE_VIEW = 'comment-v';\n\nexport type CommentItem = {\n  summary: string;\n  contentId: string;\n  // 50 char. path1-offset1-path2-offset2-ref.length-8hash\n  position: string;\n  count: number;\n  isClosed?: boolean;\n};\n\nexport type ShowCommentOptions = {\n  // 禁用「自动聚焦」\n  skipAutoFocus?: boolean;\n  // 禁用「自动滚动」\n  skipScroll?: boolean;\n  // 启动始终滚动，即便设置是同一个 contentId。\n  alwaysScroll?: boolean;\n  // 禁用「检查 contentId 是否在正文」。即使评论不在正文，也继续设置 id\n  ignoreCheck?: boolean;\n  // 滚动高度百分比\n  heightPercent?: number;\n};\n\nexport type CommentLocale = {\n  comment?: string;\n  addComment?: string;\n  showComent?: string;\n  finish?: string;\n  inlineComment?: string;\n  prev?: string;\n  next?: string;\n  hide?: string;\n  summary?: string;\n  closeComment?: string;\n};\n\nexport type BasicCommentRequest = {\n  content: string;\n  contentId: string;\n  replyId?: string;\n};\n\nexport type BasicCommentItem = BasicCommentRequest & {\n  id: string;\n  date: string;\n  author: string;\n};\n\nexport type PostionRowItem = {\n  // row key (split row clientTop)\n  rowKey: number;\n  // top offset\n  top: number;\n  // client top offset\n  clientTop: number;\n  selection?: Selection;\n  decorations: Decoration[];\n};\n\nexport type RenderPopupProps = {\n  isNew: boolean;\n  isAutoFocus: boolean;\n  isActive: boolean;\n  contentId: string;\n  summary: string;\n  readonlyPosition?: string;\n  // 添加成功。编辑器需要存储 contentId\n  onAdd: (contentId: string) => void;\n  // 删除成功。编辑器需要删除 contentId\n  onDelete: (contentId: string) => void;\n  onLoad?: () => void;\n  onCancel?: () => void;\n};\n\nexport type SidebarCardInfo = {\n  // 划词评论的唯一标记。每一个 contentId 代表一组划词评论。\n  contentId: string;\n  // top 偏移\n  top: number;\n  // client top 偏移\n  clientTop: number;\n  // 是否新建\n  isNew: boolean;\n  // 是否需要自动聚焦\n  isAutoFocus: boolean;\n  // 是否 active 状态\n  isActive: boolean;\n  // 有几个划词评论\n  count: number;\n  // 划词评论的引用文本\n  summary: string;\n  // 只读权限下的定位信息。comment-box 组件内使用\n  position: any;\n};\n\n/*\n * SidebarInfo 结构。编辑器构建，通过上述 API 传递出去，业务侧消费。\n */\nexport interface SidebarInfo {\n  // 获取文档的划词评论列表、以及定位信息。需要 debounce 获取，避免影响编辑性能\n  cards: SidebarCardInfo[];\n  // 新建的回调函数。新评论发送后，需要回调编辑器，来更新正文。\n  onAdd: () => void;\n  // 新建的取消。需要回调编辑器，取消 activeId\n  onCancel: () => void;\n  // 评论是否加载完毕\n  isCommentLoaded: boolean;\n}\n\nexport type RenderCustomPopupProps = {\n  /**\n   * 是否是新建\n   */\n  isNew: boolean;\n  /**\n   * 是否期望自动 focus。比如 PC 编辑页面，有时候不希望是自动 focus 的\n   */\n  isAutoFocus: boolean;\n  /**\n   * 右侧面板：是否是 active 状态\n   */\n  isActive: boolean;\n  /**\n   * 评论的 contentId\n   */\n  contentId: string;\n  /**\n   * 应用内容的 description\n   */\n  summary: string;\n  /**\n   * 只读模式下定位信息\n   */\n  readonlyPosition?: string;\n  // 添加成功。编辑器需要存储 contentId\n  onAdd: (contentId: string) => void;\n  // 删除成功。编辑器需要删除 contentId\n  onDelete: (contentId: string) => void;\n  /**\n   * 取消回调，可以取消正在输入的评论、并且隐藏 activeID\n   */\n  cancelPopup?: () => void;\n  /**\n   * 上一个 contentID\n   */\n  prev: string | undefined;\n  /**\n   * 下一个 contentID\n   */\n  next: string | undefined;\n  /**\n   * 移动到上一个\n   */\n  navigateToPrev: () => void;\n  /**\n   * 移动到下一个\n   */\n  navigateToNext: () => void;\n  /**\n   * 评论的定位信息\n   */\n  position:\n    | undefined\n    | {\n        top: number;\n        left: number;\n        width: number;\n        rects: DOMRect[];\n        parentRect: DOMRect;\n      };\n};\n\nexport type CommentPluginConfigs = {\n  locale?: CommentLocale;\n  /**\n   * 发送评论接口（SimplePopup 使用）\n   */\n  sendComment?: (req: BasicCommentRequest) => Promise<boolean>;\n  /**\n   * 获取评论接口（SimplePopup 使用）\n   */\n  getCommentList?: (contentId: string) => Promise<BasicCommentItem[]>;\n  /**\n   * 右侧面板显示：渲染 PC 端的 Popup\n   */\n  renderPopup?: (props: RenderPopupProps) => JSX.Element;\n  /**\n   * 右侧面板显示：面板颜色\n   */\n  sidebarBackgroundColor?: () => string | undefined;\n  /**\n   * 内联显示\n   */\n  showInline?: boolean;\n  /**\n   * 内联显示：渲染 Popup（移动端、PC 端均会调用）\n   */\n  renderCustomPopup?: (props: RenderCustomPopupProps) => JSX.Element;\n  /**\n   * 获取缓存的评论数据\n   */\n  fetchCachedComment?: () => Promise<CommentItem[]>;\n  /**\n   * 刷新评论数据\n   */\n  reloadComments?: () => void;\n  /**\n   * 使用自定义 api\n   */\n  withCustomApiAdaptor: () => void;\n  /**\n   * 右侧面板显示：关闭评论回调\n   */\n  closeComment?: (contentId: string, callback?: () => void) => Promise<boolean>;\n  /**\n   * 右侧面板显示：打开评论回调\n   */\n  reopenComment?: (\n    contentId: string,\n    callback?: () => void,\n  ) => Promise<boolean>;\n  /**\n   * 文档是否已加载完成\n   */\n  isDocLoaded?: () => boolean;\n  /**\n   * 返回当前所有的划词评论 contentId\n   */\n  contentIds?: (ids: string[], isLoaded: boolean) => void;\n  /**\n   * 是否暂时禁用评论。在某些场景，比如缩放、权限等，可以动态的返回禁用标记\n   */\n  isDisabled?: () => boolean;\n  /**\n   * 控制是否灰度。如果返回 false，不会加载相关的评论代码。默认返回 true\n   */\n  isGrayed?: () => boolean;\n  /**\n   * 禁用时，调用添加评论 action 的回调\n   */\n  onDisabled?: () => void;\n  /**\n   * 初始加载后，定位的某一个评论\n   */\n  showCommentOnLoaded?: {\n    /**\n     * 初始定位的评论 id\n     */\n    subObjectId?: string | (() => Promise<string>);\n    /**\n     * 后续定位的引用\n     */\n    navigateRef?: (\n      ref: (contentId?: string, options?: ShowCommentOptions) => void,\n    ) => void;\n    /**\n     * 评论不存在的回调\n     */\n    onCommentInvalid?: () => void;\n  };\n  /**\n   * 右侧面板：隐藏顶部的 Tab\n   */\n  hideSidebarTab?: boolean;\n  /**\n   * 评论变化 ref，调用可以触发编辑器刷新\n   */\n  onCommentsChangeRef?: (ref: Function | null) => void;\n  /**\n   * 当前高亮的评论变化 ref\n   */\n  onActiveIdChange?: (contentId: string | undefined) => void;\n  /**\n   * 右侧面板的 visible 属性变化\n   */\n  onSidebarVisibleChange?: (visible: boolean) => void;\n  /**\n   * autoBlur 特性：滚动出视口外，当前的划词弹窗会自动 blur 掉\n   */\n  enableAutoBlur?: boolean;\n  /**\n   * 禁用选区的新增按钮。\n   * 设置后，选区 expand 状态和点击图片（void 元素）均不会显示右侧的添加按钮。\n   */\n  disableRangeAdd?: boolean;\n  /**\n   * 页面加载回调\n   */\n  onContentMounted?: () => void;\n  /**\n   * 页面销毁回调\n   */\n  onContentUnMounted?: () => void;\n  /**\n   * 自动滚动的时候，以目标底部作为基准 align\n   */\n  scrollByBottomAlign?: () => boolean;\n  /**\n   * 自动滚动时，顶部额外的空间\n   */\n  scrollTopExtraOffset?: number;\n  /**\n   * 弹窗在点击其它地方时关闭。默认是 true\n   */\n  blurPopupOnClick?: () => boolean;\n  /**\n   * 禁用解决评论按钮\n   */\n  hideCloseMenu?: () => boolean;\n  /**\n   * sidebar info 监听。如果设置，就不渲染默认的 sidebar 了，业务需要自行实现 sidebar\n   */\n  onSidebarInfoUpdated?: (info: SidebarInfo) => void;\n  /**\n   * 默认 sidebar 的 dom 引用\n   */\n  sidebarRef?: (ref?: React.RefObject<HTMLDivElement>) => void;\n  /**\n   * 评论气泡的点击回调\n   */\n  onBubbleClick?: (contentId: string) => void;\n  /**\n   * 是否禁用移动端 bottomBar\n   */\n  disableBottomBar?: boolean;\n  /**\n   * 懒加载组件\n   */\n  lazyload?: any;\n};\n\ndeclare module '@ali/4ever-cangjie' {\n  interface UserDataContent {\n    fold?: boolean;\n  }\n}\n"],"file":"types.js"}