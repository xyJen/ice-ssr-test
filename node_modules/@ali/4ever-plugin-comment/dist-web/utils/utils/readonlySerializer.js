import { Decoration, Selection, TextPoint } from '@ali/4ever-cangjie';
import { ViewMark } from "../models/marks";
import hashCode from "./hashCode";
export function serialize(start, end, document) {
  var startPath = document.getPath(start.key);
  var endPath = document.getPath(end.key);

  if (!startPath || !endPath) {
    return undefined;
  }

  var selection = Selection.create({
    anchor: start,
    focus: end
  });

  var _document$getFragment = document.getFragmentAtRange(selection),
      summary = _document$getFragment.text;

  var hashStr = hashCode(summary);
  var startPathStr = startPath.join(',');
  var endPathStr = endPath.join(',');
  var position = startPathStr + "-" + start.offset + "-" + endPathStr + "-" + end.offset + "-" + summary.length + "-" + hashStr;
  return {
    position: position,
    summary: summary
  };
}
export function deserialize(comment, document) {
  var contentId = comment.contentId,
      position = comment.position,
      count = comment.count;

  var _position$split = position.split('-'),
      pathStartStr = _position$split[0],
      offsetStartStr = _position$split[1],
      pathEndStr = _position$split[2],
      offsetEndStr = _position$split[3],
      lengthStr = _position$split[4],
      hashStr = _position$split[5];

  if (!pathStartStr || !offsetStartStr || !pathEndStr || !offsetEndStr || !lengthStr || !hashStr) {
    return undefined;
  }

  var pathStart = pathStartStr.split(',').map(function (p) {
    return parseInt(p, 10);
  });
  var pathEnd = pathEndStr.split(',').map(function (p) {
    return parseInt(p, 10);
  });
  var offsetStart = parseInt(offsetStartStr, 10);
  var offsetEnd = parseInt(offsetEndStr, 10);
  var length = parseInt(lengthStr, 10);
  var startNode = document.getNodeByPath(pathStart);
  var endNode = document.getNodeByPath(pathEnd);

  if (!startNode || !endNode) {
    return undefined;
  }

  var anchor = TextPoint.create({
    key: startNode.key,
    offset: offsetStart
  });
  var focus = TextPoint.create({
    key: endNode.key,
    offset: offsetEnd
  });
  var selection = Selection.create({
    anchor: anchor,
    focus: focus
  });

  var _document$getFragment2 = document.getFragmentAtRange(selection),
      text = _document$getFragment2.text;

  var newHash = hashCode(text);

  if (newHash !== hashStr || length !== text.length) {
    return undefined;
  }

  var mark = ViewMark.create({
    contentId: contentId,
    count: count,
    summary: text,
    isReadonly: true
  });
  var decoration = Decoration.create({
    start: anchor,
    end: focus,
    mark: mark
  });
  return decoration;
}
//# sourceMappingURL=readonlySerializer.js.map