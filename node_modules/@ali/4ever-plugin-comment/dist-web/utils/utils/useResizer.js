import * as React from 'react';
import ResizeObserver from 'resize-observer-polyfill';

/**
 * 在 ref 尺寸变动时，调用 updator
 */
export default function useResizer(params) {
  var ref = params.ref,
      updator = params.updator,
      popHeights = params.popHeights,
      contentId = params.contentId,
      isVisible = params.isVisible,
      zoom = params.zoom;
  var updateRef = React.useRef();
  updateRef.current = updator;
  React.useEffect(function () {
    return function () {
      updateRef.current = undefined;
    };
  }, []);
  React.useEffect(function () {
    var node = ref.current;

    if (!node || !isVisible) {
      return undefined;
    }

    var _node$getBoundingClie = node.getBoundingClientRect(),
        height = _node$getBoundingClie.height; // eslint-disable-next-line no-param-reassign


    popHeights[contentId] = Math.round(height);

    var callback = function callback() {
      requestAnimationFrame(function () {
        var _node$getBoundingClie2 = node.getBoundingClientRect(),
            newHeight = _node$getBoundingClie2.height;

        newHeight = Math.round(newHeight / zoom);

        if (newHeight !== popHeights[contentId]) {
          // eslint-disable-next-line no-param-reassign
          popHeights[contentId] = newHeight;
          updateRef.current && updateRef.current();
        }
      });
    };

    var observer = new ResizeObserver(callback);
    observer.observe(node);
    return function () {
      observer.unobserve(node);
    };
  }, [isVisible, updateRef, ref, popHeights, contentId, zoom]);
}
//# sourceMappingURL=useResizer.js.map