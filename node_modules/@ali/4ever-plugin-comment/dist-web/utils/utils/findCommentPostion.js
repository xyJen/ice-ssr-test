import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable no-console */
import { EdgePoint, Path, domUtils } from '@ali/4ever-cangjie';
import { getRowTopFromPoint } from "../commentPosition/getRowTopFromPoint";
import { validateCaches } from "../commentPosition/positionCache";
import { ViewMark } from "../models/marks";
import { canComment } from "../queries";

/**
 * 对比两个 Point 在 document 的出现位置
 */
function comparePoint(lp, rp, document) {
  var edgeToOffset = function edgeToOffset(p) {
    return p.edge === EdgePoint.BEFORE ? -1 : Number.MAX_SAFE_INTEGER;
  };

  if (lp.key === rp.key) {
    var lOffset = lp.isEdgePoint() ? edgeToOffset(lp) : lp.offset;
    var rOffset = rp.isEdgePoint() ? edgeToOffset(rp) : rp.offset;
    return lOffset - rOffset;
  }

  var lPath = document.getPath(lp.key);
  var rPath = document.getPath(rp.key);

  if (!lPath || !rPath) {
    return 0;
  }

  return Path.compare(lPath, rPath) || 0;
}

/**
 * 获取评论框的位置。返回相对于当前 block 的位置，和屏幕绝对位置
 */
export function findCommentPostion(_ref) {
  var controller = _ref.controller,
      decorations = _ref.decorations,
      selection = _ref.selection,
      _ref$container = _ref.container,
      container = _ref$container === void 0 ? window : _ref$container,
      isFromPopup = _ref.isFromPopup;
  var document = controller.value.document;
  var docKey = document.key;
  var docNode = domUtils.findDOMNodeSafely(docKey, container);

  if (!docNode) {
    return [];
  }

  var _docNode$getBoundingC = docNode.getBoundingClientRect(),
      docTop = _docNode$getBoundingC.top,
      docWidth = _docNode$getBoundingC.width,
      docHeight = _docNode$getBoundingC.height;

  var allRows = validateCaches({
    controller: controller,
    docWidth: docWidth,
    container: container,
    docTop: docTop,
    docHeight: docHeight
  }); // 初始化分行对象

  var result = []; // 如果当前已经有评论了，就 skip 掉（处理 block void 的 collapse 场景）

  var skipSelection = false;

  if (selection != null && selection.isCollapsed) {
    var allDecs = controller.value.decorations;

    var _selection$convertToT = selection.convertToTextPoints(document),
        anchor = _selection$convertToT.anchor;

    skipSelection = allDecs.some(function (d) {
      return ViewMark.isViewMark(d.mark) && comparePoint(anchor, d.start, document) >= 0 && comparePoint(anchor, d.end, document) <= 0;
    });
  }

  var commonParams = {
    allRows: allRows,
    controller: controller,
    container: container,
    isFromPopup: isFromPopup,
    docTop: docTop
  };

  if (!skipSelection && selection && canComment(controller, selection)) {
    var item = getRowTopFromPoint(_extends({}, commonParams, {
      paramPoint: selection == null ? void 0 : selection.focus
    }));

    if (item) {
      var rowKey = item[0],
          top = item[1];
      var clientTop = top + docTop;
      var newRowItem = {
        rowKey: rowKey,
        top: top,
        clientTop: clientTop,
        selection: selection,
        decorations: []
      };
      result.push(newRowItem);
    }
  } // 处理 decorations


  decorations.forEach(function (decoration) {
    var item = getRowTopFromPoint(_extends({}, commonParams, {
      paramPoint: decoration.start
    }));

    if (!item) {
      return;
    }

    var rowKey = item[0],
        top = item[1];
    var existingRow = result.find(function (r) {
      return r.rowKey === rowKey;
    });

    if (!existingRow) {
      var _clientTop = top + docTop;

      var _newRowItem = {
        rowKey: rowKey,
        top: top,
        clientTop: _clientTop,
        decorations: [decoration]
      };
      result.push(_newRowItem);
    } else {
      existingRow.top = top;
      existingRow.decorations.push(decoration);
    }
  });
  return result;
}
//# sourceMappingURL=findCommentPostion.js.map