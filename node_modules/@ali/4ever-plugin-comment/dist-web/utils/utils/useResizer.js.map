{"version":3,"sources":["../../../../src/utils/utils/useResizer.ts"],"names":["React","ResizeObserver","useResizer","params","ref","updator","popHeights","contentId","isVisible","zoom","updateRef","useRef","current","useEffect","undefined","node","getBoundingClientRect","height","Math","round","callback","requestAnimationFrame","newHeight","observer","observe","unobserve"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;;AAWA;AACA;AACA;AACA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAAoC;AAAA,MACzCC,GADyC,GACgBD,MADhB,CACzCC,GADyC;AAAA,MACpCC,OADoC,GACgBF,MADhB,CACpCE,OADoC;AAAA,MAC3BC,UAD2B,GACgBH,MADhB,CAC3BG,UAD2B;AAAA,MACfC,SADe,GACgBJ,MADhB,CACfI,SADe;AAAA,MACJC,SADI,GACgBL,MADhB,CACJK,SADI;AAAA,MACOC,IADP,GACgBN,MADhB,CACOM,IADP;AAEjD,MAAMC,SAAS,GAAGV,KAAK,CAACW,MAAN,EAAlB;AACAD,EAAAA,SAAS,CAACE,OAAV,GAAoBP,OAApB;AACAL,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpB,WAAO,YAAM;AACXH,MAAAA,SAAS,CAACE,OAAV,GAAoBE,SAApB;AACD,KAFD;AAGD,GAJD,EAIG,EAJH;AAKAd,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpB,QAAME,IAAI,GAAGX,GAAG,CAACQ,OAAjB;;AACA,QAAI,CAACG,IAAD,IAAS,CAACP,SAAd,EAAyB;AACvB,aAAOM,SAAP;AACD;;AAJmB,gCAKDC,IAAI,CAACC,qBAAL,EALC;AAAA,QAKZC,MALY,yBAKZA,MALY,EAMpB;;;AACAX,IAAAA,UAAU,CAACC,SAAD,CAAV,GAAwBW,IAAI,CAACC,KAAL,CAAWF,MAAX,CAAxB;;AACA,QAAMG,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBC,MAAAA,qBAAqB,CAAC,YAAM;AAAA,qCACEN,IAAI,CAACC,qBAAL,EADF;AAAA,YACZM,SADY,0BACpBL,MADoB;;AAE1BK,QAAAA,SAAS,GAAGJ,IAAI,CAACC,KAAL,CAAWG,SAAS,GAAGb,IAAvB,CAAZ;;AACA,YAAIa,SAAS,KAAKhB,UAAU,CAACC,SAAD,CAA5B,EAAyC;AACvC;AACAD,UAAAA,UAAU,CAACC,SAAD,CAAV,GAAwBe,SAAxB;AACAZ,UAAAA,SAAS,CAACE,OAAV,IAAqBF,SAAS,CAACE,OAAV,EAArB;AACD;AACF,OARoB,CAArB;AASD,KAVD;;AAWA,QAAMW,QAAQ,GAAG,IAAItB,cAAJ,CAAmBmB,QAAnB,CAAjB;AACAG,IAAAA,QAAQ,CAACC,OAAT,CAAiBT,IAAjB;AACA,WAAO,YAAM;AACXQ,MAAAA,QAAQ,CAACE,SAAT,CAAmBV,IAAnB;AACD,KAFD;AAGD,GAxBD,EAwBG,CAACP,SAAD,EAAYE,SAAZ,EAAuBN,GAAvB,EAA4BE,UAA5B,EAAwCC,SAAxC,EAAmDE,IAAnD,CAxBH;AAyBD","sourcesContent":["import * as React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\ninterface Params {\n  ref: React.RefObject<Element>;\n  updator: Function;\n  popHeights: Record<string, number>;\n  contentId: string;\n  isVisible: boolean;\n  zoom: number;\n}\n\n/**\n * 在 ref 尺寸变动时，调用 updator\n */\nexport default function useResizer(params: Params) {\n  const { ref, updator, popHeights, contentId, isVisible, zoom } = params;\n  const updateRef = React.useRef<Function>();\n  updateRef.current = updator;\n  React.useEffect(() => {\n    return () => {\n      updateRef.current = undefined;\n    };\n  }, []);\n  React.useEffect(() => {\n    const node = ref.current;\n    if (!node || !isVisible) {\n      return undefined;\n    }\n    const { height } = node.getBoundingClientRect();\n    // eslint-disable-next-line no-param-reassign\n    popHeights[contentId] = Math.round(height);\n    const callback = () => {\n      requestAnimationFrame(() => {\n        let { height: newHeight } = node.getBoundingClientRect();\n        newHeight = Math.round(newHeight / zoom);\n        if (newHeight !== popHeights[contentId]) {\n          // eslint-disable-next-line no-param-reassign\n          popHeights[contentId] = newHeight;\n          updateRef.current && updateRef.current();\n        }\n      });\n    };\n    const observer = new ResizeObserver(callback);\n    observer.observe(node);\n    return () => {\n      observer.unobserve(node);\n    };\n  }, [isVisible, updateRef, ref, popHeights, contentId, zoom]);\n}\n"],"file":"useResizer.js"}