{"version":3,"sources":["../../../../src/utils/commands/setComments.ts"],"names":["Commands","Selection","equal","DataMark","ViewMark","marksToDecorations","deserialize","lastUpdatedDocMap","WeakMap","setComments","controller","comments","value","document","data","prevData","_commentsCachedData","isSameCommentsData","setData","newDecs","forEach","comment","position","decoration","push","updatedDecos","decorations","setDecorations","filter","dec","mark","find","d","isViewMark","contentId","length","flush","prevDoc","get","anchor","start","focus","end","dataMark","create","range","isValid","isValidRangeSelection","isCollapsed","node","getNode","key","text","parent","getParent","isText","isBlock","type","command","addMarkByKey","addMarkAtRange","set"],"mappings":"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","sourcesContent":["import {\n  Commands,\n  Controller,\n  Decoration,\n  Document,\n  Selection,\n} from '@ali/4ever-cangjie';\nimport equal from 'fast-deep-equal';\nimport { DataMark, ViewMark } from '../models/marks';\nimport { CommentItem } from '../types';\nimport { marksToDecorations } from '../utils/marksToDecorations';\nimport { deserialize } from '../utils/readonlySerializer';\n\nconst lastUpdatedDocMap = new WeakMap<Controller, Document>();\n\nexport default function setComments(\n  controller: Controller,\n  comments: CommentItem[],\n) {\n  const { document, data } = controller.value;\n  const { _commentsCachedData: prevData } = data;\n\n  const isSameCommentsData = equal(comments, prevData);\n  // skipped seting same comments\n  if (!isSameCommentsData) {\n    controller.setData({\n      ...data,\n      _commentsCachedData: comments,\n    });\n  }\n  let newDecs: Decoration[] = [];\n  comments.forEach((comment) => {\n    if (!comment.position) {\n      return;\n    }\n    const decoration = deserialize(comment, document);\n    decoration && newDecs.push(decoration);\n  });\n  const updatedDecos = marksToDecorations(controller);\n  if (!equal(updatedDecos, controller.value.decorations)) {\n    controller.setDecorations(updatedDecos);\n  }\n  const { decorations } = controller.value;\n  newDecs = newDecs.filter((dec) => {\n    const mark = dec.mark as ViewMark;\n    if (\n      decorations.find(\n        (d) =>\n          ViewMark.isViewMark(d.mark) &&\n          d.mark.data.contentId === mark.data.contentId,\n      )\n    ) {\n      return false;\n    }\n    return true;\n  });\n  if (!newDecs.length) {\n    return controller.flush();\n  }\n\n  const prevDoc = lastUpdatedDocMap.get(controller);\n\n\n  /**\n   * 自上次更新后，comments 和 document 均无变化，就不需要在继续了。\n   *\n   * 这里是保障，万一 addMark 不生效，会导致无限循环的问题：\n   * addMark -> document change -> setComments -> addMark\n   */\n  if (isSameCommentsData && prevDoc === document) {\n    return controller.flush();\n  }\n\n  newDecs.forEach((dec) => {\n    const mark = dec.mark as ViewMark;\n    const anchor = dec.start;\n    const focus = dec.end;\n    const { contentId } = mark.data;\n    const dataMark = DataMark.create({ contentId });\n    const range = Selection.create({ anchor, focus });\n    const isValid = Selection.isValidRangeSelection(document, range);\n    if (!isValid) {\n      return;\n    }\n    if (range.isCollapsed) {\n      const node = document.getNode(anchor.key);\n      /**\n       * 如果 Text 节点非空，decorations 校验会过滤掉。\n       */\n      if (node?.text) {\n        /**\n         * 对 Code 的特殊处理。\n         * TODO：Code 插件重构后，移除这里。\n         */\n        const parent = document.getParent(anchor.key);\n        if (node.isText() && parent?.isBlock() && parent.type === 'code') {\n          controller.command(\n            Commands.addMarkByKey,\n            node.key,\n            0,\n            node.text.length,\n            dataMark,\n          );\n        }\n      } else {\n        controller.command(Commands.addMarkByKey, anchor.key, 0, 0, dataMark);\n      }\n    } else {\n      controller.command(Commands.addMarkAtRange, range, dataMark);\n    }\n  });\n  lastUpdatedDocMap.set(controller, controller.value.document);\n  return controller.setDecorations(marksToDecorations(controller)).flush();\n}\n"],"file":"setComments.js"}