import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

/* eslint-disable react-hooks/exhaustive-deps */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment, useZoom } from '@ali/4ever-cangjie';
import { debounce } from 'lodash-es';
import CommentSideBar from "./commentSidebar";
import isSidebarVisible from "../queries/isSidebarVisible";
import CommentBottomBar from "./CommentBottomBar";
import getActiveId from "../queries/getActiveId";
import { addComment, showComment, setComments } from "../actions";
import { DataMark, ViewMark } from "../models/marks";
import CommentInlinePanel from "./CommentInlinePanel";
import useContentIds from "../utils/useContentIds";
import ExternalSidebar from "./ExternalSidebar";
var IS_MOBILE = environment.IS_MOBILE,
    IS_IPAD = environment.IS_IPAD;
var IS_PHONE = IS_MOBILE && !IS_IPAD;
var DEBOUNCE_LOAD_TIME = 500;
var INIT_SCROLL_DELAY = 700;
var initNavigate = false;

var navigateToComment = function navigateToComment(controller, onCommentInvalid) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(subId, options) {
      var subObjectId, validInPage, _;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof subId === 'function')) {
                _context.next = 6;
                break;
              }

              _context.next = 3;
              return subId();

            case 3:
              _context.t0 = _context.sent;
              _context.next = 7;
              break;

            case 6:
              _context.t0 = subId;

            case 7:
              subObjectId = _context.t0;

              if (!(typeof subId === 'function' && !subObjectId)) {
                _context.next = 10;
                break;
              }

              return _context.abrupt("return");

            case 10:
              validInPage = controller.value.decorations.some(function (d) {
                return ViewMark.isViewMark(d.mark) && d.mark.data.contentId === subObjectId;
              });
              _ = validInPage || options != null && options.ignoreCheck ? controller.run('onAction', showComment(subObjectId, options)) : onCommentInvalid(subObjectId);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
};

function CommentContent(props) {
  var controller = props.controller,
      configs = props.configs;
  var showInline = Boolean(configs == null ? void 0 : configs.showInline);
  var document = controller.value.document;
  var contentId = getActiveId(controller);
  var isInited = React.useRef(false);
  var isCommentLoaded = React.useRef(false);
  useZoom();
  var showBottomBar = IS_PHONE && contentId && !showInline;
  var isDisabled = Boolean((configs == null ? void 0 : configs.isDisabled) && configs.isDisabled());

  var _ref2 = configs || {},
      fetchCachedComment = _ref2.fetchCachedComment,
      reloadComments = _ref2.reloadComments,
      isDocLoaded = _ref2.isDocLoaded,
      enableAutoBlur = _ref2.enableAutoBlur,
      contentIds = _ref2.contentIds,
      onContentMounted = _ref2.onContentMounted,
      onContentUnMounted = _ref2.onContentUnMounted,
      onSidebarInfoUpdated = _ref2.onSidebarInfoUpdated,
      disableBottomBar = _ref2.disableBottomBar,
      withCustomApiAdaptor = _ref2.withCustomApiAdaptor;

  var isLoaded = isDocLoaded ? isDocLoaded() : true;
  var showSideBar = !showInline && !onSidebarInfoUpdated && !IS_PHONE && isSidebarVisible(controller);
  var loadKey = controller.readOnly ? document : isLoaded;
  useContentIds(controller, isCommentLoaded.current, contentIds);
  React.useEffect(function () {
    if (isDisabled) {
      // timeout 出于体验考虑，下一个 tick 再更新，避免频繁闪烁
      setTimeout(function () {
        var decorations = controller.value.decorations;
        controller.setDecorations(decorations.filter(function (d) {
          return !ViewMark.isViewMark(d.mark);
        }));
        var sideBarStatus = !IS_PHONE && isSidebarVisible(controller);

        if (sideBarStatus && configs != null && configs.onDisabled) {
          configs.onDisabled();
        }
      });
    } else if (isInited.current) {
      controller.setData(_extends({}, controller.value.data));
    }

    isInited.current = true;
  }, [controller, isDisabled]);
  var loadCachedComment = React.useCallback(debounce( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var result;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;

            if (!(!fetchCachedComment || !loadKey)) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return");

          case 3:
            _context2.next = 5;
            return fetchCachedComment();

          case 5:
            result = _context2.sent;

            if (!(!result || !Array.isArray(result))) {
              _context2.next = 8;
              break;
            }

            return _context2.abrupt("return");

          case 8:
            isCommentLoaded.current = true;
            controller.run('onAction', setComments([].concat(result)));
            _context2.next = 15;
            break;

          case 12:
            _context2.prev = 12;
            _context2.t0 = _context2["catch"](0);
            // eslint-disable-next-line no-console
            console.error(_context2.t0);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 12]]);
  })), DEBOUNCE_LOAD_TIME, {
    leading: true,
    trailing: true
  }), [controller, fetchCachedComment, loadKey, isDisabled]);
  React.useEffect(function () {
    if (!isCommentLoaded.current) {
      return undefined;
    }

    var _ref4 = configs || {},
        showCommentOnLoaded = _ref4.showCommentOnLoaded,
        onDisabled = _ref4.onDisabled;

    var _ref5 = showCommentOnLoaded || {},
        subObjectId = _ref5.subObjectId,
        _ref5$onCommentInvali = _ref5.onCommentInvalid,
        onCommentInvalid = _ref5$onCommentInvali === void 0 ? function () {} : _ref5$onCommentInvali,
        navigateRef = _ref5.navigateRef;

    var navigate = navigateToComment(controller, onCommentInvalid);

    if (isDisabled) {
      onDisabled && navigateRef && navigateRef(onDisabled);
    } else {
      navigateRef && navigateRef(navigate);
    }

    if (!subObjectId || initNavigate) {
      return undefined;
    }

    initNavigate = true; // timeout 出于体验考虑，下一个 tick 再更新，避免频繁闪烁

    var timer = window.setTimeout(function () {
      navigate(subObjectId);
      controller.flush();
    }, INIT_SCROLL_DELAY);
    return function () {
      window.clearTimeout(timer);
    };
  }, [controller, isCommentLoaded.current]);
  var curentCount = React.useMemo(function () {
    var texts = document.getTexts();
    var allContentIds = [];
    texts.forEach(function (text) {
      text.leaves.forEach(function (leave) {
        leave.marks.forEach(function (m) {
          if (DataMark.isDataMark(m)) {
            if (!allContentIds.some(function (id) {
              return id === m.data.contentId;
            })) {
              allContentIds.push(m.data.contentId);
            }
          }
        });
      });
    });
    return allContentIds.length;
  }, [document]); // 使用 customApi, 必须放到 reloadComments 之前

  React.useEffect(function () {
    withCustomApiAdaptor && withCustomApiAdaptor();
  }, [withCustomApiAdaptor]);
  React.useEffect(function () {
    reloadComments && reloadComments();
  }, [reloadComments, curentCount]);
  React.useEffect(function () {
    onContentMounted && onContentMounted();
    return function () {
      onContentUnMounted && onContentUnMounted();
    };
  }, []);
  React.useEffect(function () {
    loadCachedComment();
  }, [loadCachedComment]);
  React.useEffect(function () {
    if (configs != null && configs.onCommentsChangeRef) {
      configs.onCommentsChangeRef(loadCachedComment);
    }

    return function () {
      if (configs != null && configs.onCommentsChangeRef) {
        configs.onCommentsChangeRef(null);
      }
    };
  }, [loadCachedComment, configs]);
  var handleAdd = React.useCallback(function () {
    controller.run('onAction', addComment());
  }, [controller]);
  var handleDelete = React.useCallback(function () {// controller.run('onAction', addComment());
  }, [controller]);
  var commonsProps = {
    onAdd: handleAdd,
    onDelete: handleDelete,
    configs: configs
  };
  return /*#__PURE__*/_createElement(React.Fragment, null, showSideBar && !isDisabled && /*#__PURE__*/_createElement(CommentSideBar, _extends({
    enableAutoBlur: enableAutoBlur
  }, commonsProps, {
    controller: controller
  })), !!onSidebarInfoUpdated && !!configs && /*#__PURE__*/_createElement(ExternalSidebar, {
    configs: configs,
    isCommentLoaded: isCommentLoaded.current,
    controller: controller
  }), showInline && contentId && /*#__PURE__*/_createElement(CommentInlinePanel, _extends({}, commonsProps, {
    contentId: contentId
  })), showBottomBar && !isDisabled && !disableBottomBar && /*#__PURE__*/_createElement(CommentBottomBar, _extends({}, commonsProps, {
    contentId: contentId
  })));
}

export default CommentContent;
//# sourceMappingURL=CommentContent.js.map