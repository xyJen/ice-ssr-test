import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { useZoomContainer, domUtils, useZoom, environment } from '@ali/4ever-cangjie';
import { CloseBigNormal } from '@ali/we-icon';
import { ViewMark } from "../models/marks";
import PopupView from "../components/popupView";
import { findCommentPostion } from "../utils/findCommentPostion";
import getActiveId from "../queries/getActiveId";
import { hideComment, cancelComment, setSidebarVisible, showComment } from "../actions";
import { SIDEBAR_WIDTH as WIDTH, CARD_SPACE as SPACE } from "../utils/constants";
import isAutoFocus from "../queries/isAutoFocus";
import getSiblings from "../queries/getSiblings";
import useAutoBlur from "../hooks/useAutoBlur";
import { useDocSize } from "../hooks/useDocSize";
import { SCROLL_HEIGHT_PERCENT_SIDEBAR } from "../constants";
var ATTR_SIDEBAR = 'data-comment-sidebar';
var EFFECT_DEBOUNCE_TIME = 300;
var IS_IPAD = environment.IS_IPAD;
var RootWrapper = /*#__PURE__*/styled.div(["position:absolute;right:", "px;top:-6px;z-index:1;height:100%;width:", "px;&:focus{outline:none;}", ""], IS_IPAD ? 0 : -WIDTH, WIDTH, IS_IPAD ? "\n    background: white;\n    @media (max-width: 700px) {\n      box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.24), 0px 8px 24px rgba(0, 0, 0, 0.16);\n    }\n    @media (min-width: 700px) {\n      border-left: 1px solid rgba(126, 134, 142, 0.16);\n    }\n  " : ''); // iPad 下有 h5 top bar，这里加上 64px 的偏移

var TopBarWrapper = /*#__PURE__*/styled.div(["z-index:1;position:fixed;top:", ";right:0;width:", "px;font-size:16px;color:#111F2C;font-weight:500;"], IS_IPAD ? '64px' : 0, WIDTH);
var TopBarInner = /*#__PURE__*/styled.div(["margin-left:16px;display:flex;justify-content:space-between;align-items:center;"]);
var TopBarLine = /*#__PURE__*/styled.div(["margin:0 16px;border-bottom:1px solid rgba(126,134,142,0.16);"]);
var CloseIconWrapper = /*#__PURE__*/styled.div(["font-size:0;font-weight:normal;width:52px;height:52px;display:flex;justify-content:center;align-items:center;color:rgba(23,26,29,0.6);cursor:pointer;"]);
var SKIP_BLUR_PROPS = ['data-comment-popup', 'data-panel-emoji', 'data-comment-noblur', 'data-comment-no-capture'];
var SKIP_BLUR_SELECOTR = ['.mention-suggestion-list', '.ant-popconfirm', '.popup-overlay-wrap'];

function skipBlur(target) {
  return SKIP_BLUR_PROPS.some(function (s) {
    return target.hasAttribute(s) || target.closest("[" + s + "]");
  });
}

function adjustHeight(rawCards, activeContentId) {
  var focusedIndex = rawCards.findIndex(function (card) {
    return card.contentId === activeContentId;
  });
  var cards = rawCards.slice(0);

  function updateHeight(card, prev, next) {
    if (prev && prev.top + prev.height + SPACE > card.top) {
      return _extends({}, card, {
        top: prev.top + prev.height + SPACE
      });
    }

    if (next && card.top + card.height + SPACE > next.top) {
      return _extends({}, card, {
        top: next.top - SPACE - card.height
      });
    }

    return card;
  }

  for (var i = 1; i < focusedIndex; i++) {
    var card = updateHeight(cards[i], cards[i - 1], undefined);
    cards[i] = card;
  } // eslint-disable-next-line for-direction


  for (var _i = focusedIndex - 1; _i >= 0; _i--) {
    var _card = updateHeight(cards[_i], undefined, cards[_i + 1]);

    cards[_i] = _card;
  }

  for (var _i2 = focusedIndex + 1; _i2 < cards.length; _i2++) {
    var _card2 = updateHeight(cards[_i2], cards[_i2 - 1], undefined);

    cards[_i2] = _card2;
  }

  return cards;
}

function usePrevious(value) {
  var ref = React.useRef();
  React.useEffect(function () {
    ref.current = value;
  });
  return ref.current;
}

var _ref3 = /*#__PURE__*/_createElement(TopBarLine, null);

export default function CommentSideBar(props) {
  var _configs$locale;

  var configs = props.configs,
      onAdd = props.onAdd,
      onDelete = props.onDelete,
      enableAutoBlur = props.enableAutoBlur,
      controller = props.controller;
  var container = useZoomContainer();
  var ref = React.useRef(null);
  var _controller$value = controller.value,
      document = _controller$value.document,
      decorations = _controller$value.decorations;

  var _ref = configs || {},
      hideSidebarTab = _ref.hideSidebarTab,
      sidebarRef = _ref.sidebarRef;

  var _React$useState = React.useState([]),
      cards = _React$useState[0],
      setCards = _React$useState[1];

  var popHeights = React.useMemo(function () {
    return {};
  }, []);
  var zoom = useZoom();
  /**
   * 在渲染出 DOM 后，遍历 DOM 位置，获取对应的 offset
   */

  var updatePosition = React.useCallback(function () {
    var _ref$current;

    var commentDecorations = decorations.filter(function (d) {
      return ViewMark.isViewMark(d.mark);
    });
    var rowItems = findCommentPostion({
      controller: controller,
      decorations: commentDecorations,
      selection: undefined,
      container: container || undefined,
      isFromPopup: true
    });
    var activeContentId = getActiveId(controller);
    var autoFocus = isAutoFocus(controller);

    var _ref2 = ((_ref$current = ref.current) == null ? void 0 : _ref$current.getBoundingClientRect()) || {},
        barTop = _ref2.top; // eslint-disable-next-line react/no-find-dom-node


    var _domUtils$findDOMNode = domUtils.findDOMNode(document.key).getBoundingClientRect(),
        docTop = _domUtils$findDOMNode.top;

    var verticalOffset = barTop ? barTop - docTop : 0; // 生成 card 基本信息（这里可能有覆盖的场景）

    var newCards = rowItems.reduce(function (array, item) {
      item.decorations.forEach(function (decoration) {
        var _cards$find;

        var top = item.top;
        var mark = decoration.mark;
        var _mark$data = mark.data,
            isNew = _mark$data.isNew,
            contentId = _mark$data.contentId,
            summary = _mark$data.summary,
            position = _mark$data.position,
            count = _mark$data.count;
        var isActive = contentId === activeContentId;
        var defaultHeight = isNew ? 121 : 180;
        var height = popHeights[contentId] || (cards == null ? void 0 : (_cards$find = cards.find(function (vc) {
          return vc.contentId === contentId;
        })) == null ? void 0 : _cards$find.height) || defaultHeight;
        var card = {
          top: Math.round(top - verticalOffset),
          isNew: Boolean(isNew),
          prio: 0,
          isAutoFocus: Boolean(autoFocus && isActive),
          isActive: isActive,
          height: height * zoom,
          count: count,
          summary: summary,
          position: position,
          contentId: contentId
        };
        array.push(card);
      });
      return array;
    }, []);
    newCards = adjustHeight(newCards, activeContentId);
    var activeIndex = newCards.findIndex(function (c) {
      return c.contentId === activeContentId;
    });
    newCards.forEach(function (c, i) {
      c.prio = Math.abs(i - activeIndex);
    });
    setCards(newCards);
  }, [decorations, controller, document, container, zoom]);
  var prevDocument = usePrevious(document);
  React.useEffect(function () {
    /**
     * 非 document 变化，比如 decorations 变了，立刻刷新
     */
    if (prevDocument === document) {
      updatePosition();
      return undefined;
    }
    /**
     * document 变化，延迟刷新
     *
     * 一些场景比如（折叠标题），有动画延迟，等一会儿再更新，不然会闪烁
     * 首次打开也要延迟刷新，因为侧边栏展开可能导致图片等元素缩放, 高度发生变化
     */


    var timer = setTimeout(function () {
      updatePosition();
    }, EFFECT_DEBOUNCE_TIME);
    return function () {
      clearTimeout(timer);
    };
  }, [updatePosition]);
  useAutoBlur(controller, enableAutoBlur);
  useDocSize(ref, updatePosition);
  React.useLayoutEffect(function () {
    sidebarRef && sidebarRef(ref);
    return function () {
      sidebarRef && sidebarRef(undefined);
    };
  }, [sidebarRef, ref]);
  React.useEffect(function () {
    var activeContentId = getActiveId(controller);

    if (!activeContentId) {
      return undefined;
    } // timeout 出于体验考虑，下一个 tick 再更新，避免频繁闪烁


    var showTimer = setTimeout(function () {
      controller.run('onAction', showComment(activeContentId, {
        alwaysScroll: true
      }));
    }, 0);
    return function () {
      clearTimeout(showTimer);
    };
  }, [controller]);
  React.useEffect(function () {
    window.document.body.setAttribute(ATTR_SIDEBAR, '');
    return function () {
      window.document.body.removeAttribute(ATTR_SIDEBAR);
    };
  }, []);
  React.useEffect(function () {
    var clicker = function clicker(event) {
      var target = event.target;

      if (target instanceof Element && !skipBlur(target) && !SKIP_BLUR_SELECOTR.some(function (s) {
        return target.closest(s);
      })) {
        controller.run('onAction', showComment(undefined));
      }
    };

    window.document.addEventListener('mousedown', clicker, {
      capture: true
    });
    return function () {
      window.document.removeEventListener('mousedown', clicker, {
        capture: true
      });
    };
  }, [controller]);
  var hideActive = React.useCallback(function () {
    controller.run('onAction', hideComment());
    controller.run('onAction', cancelComment());
  }, [controller]);
  var handleCloseClick = React.useCallback(function () {
    controller.run('onAction', setSidebarVisible(false));
    hideActive();
  }, [controller, hideActive]);
  var handleCancelClick = React.useCallback(function () {
    controller.run('onAction', cancelComment());
  }, [controller]);
  var handleKeydown = React.useCallback(function (event) {
    if (event.nativeEvent.isComposing) return;

    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
      event.preventDefault();

      var _controller$query = controller.query(getSiblings),
          next = _controller$query.next,
          prev = _controller$query.prev;

      var target = event.key === 'ArrowDown' ? next : prev;

      if (target) {
        var heightPercent = SCROLL_HEIGHT_PERCENT_SIDEBAR;
        controller.run('onAction', showComment(target, {
          heightPercent: heightPercent
        }));
      }
    }
  }, [controller]);
  var backgroundColor = (configs == null ? void 0 : configs.sidebarBackgroundColor) && configs.sidebarBackgroundColor();
  var topBarStyle = {};

  if (backgroundColor) {
    topBarStyle.background = backgroundColor;
  }

  var count = cards.reduce(function (t, c) {
    return t + c.count;
  }, 0);
  var titleStr = ((configs == null ? void 0 : (_configs$locale = configs.locale) == null ? void 0 : _configs$locale.inlineComment) || 'Comment') + " (" + count + ")";
  return /*#__PURE__*/_createElement(RootWrapper, {
    "data-inline-comment-sidebar": true,
    tabIndex: 0,
    ref: ref,
    "data-cache-ignore": true,
    onKeyDown: handleKeydown
  }, !hideSidebarTab && /*#__PURE__*/_createElement(TopBarWrapper, {
    style: topBarStyle
  }, /*#__PURE__*/_createElement(TopBarInner, null, /*#__PURE__*/_createElement("div", null, titleStr), /*#__PURE__*/_createElement(CloseIconWrapper, {
    onClick: handleCloseClick
  }, /*#__PURE__*/_createElement(CloseBigNormal, {
    style: {
      fontSize: '20px'
    }
  }))), _ref3), cards.map(function (card) {
    return /*#__PURE__*/_createElement(PopupView, _extends({}, card, {
      controller: controller,
      onAdd: onAdd,
      popHeights: popHeights,
      onCancel: handleCancelClick,
      onDelete: onDelete,
      key: card.contentId,
      configs: configs,
      updatePosition: updatePosition
    }));
  }));
}
//# sourceMappingURL=commentSidebar.js.map