import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment } from '@ali/4ever-cangjie';
import styled from 'styled-components';
import { COLOR, COLOR_ACTIVE, COLOR_UNDERLINE } from "../constants";
import isSidebarVisible from "../queries/isSidebarVisible";
import { setActiveId, setSidebarVisible, showComment } from "../actions";
var IS_MOBILE = environment.IS_MOBILE;
var MarkWrapper = /*#__PURE__*/styled.span(["border-bottom:2px solid ", ";"], COLOR_UNDERLINE);
var ReadOnlyMarkWrapper = /*#__PURE__*/styled(MarkWrapper)(["cursor:pointer;transition:background 0.25s;&:hover{background-color:", ";}"], COLOR);
var VoidMarkWrapper = /*#__PURE__*/styled.span(["width:100%;height:2px;position:absolute;bottom:-2px;left:0px;background-color:", ";"], COLOR_UNDERLINE);
var VoidActiveWrapper = /*#__PURE__*/styled(VoidMarkWrapper)(["height:100%;min-height:3px;bottom:-2px;background:", ";border-bottom:2px solid ", ";pointer-events:none;"], COLOR_ACTIVE, COLOR_UNDERLINE);
var VoidBlockWrapper = /*#__PURE__*/styled.div(["position:absolute;bottom:0;left:0;width:100%;height:0;border-bottom:2px solid ", ";box-sizing:content-box;border-top:", ";"], COLOR_UNDERLINE, function (_ref) {
  var isActive = _ref.isActive;
  return isActive ? "4px solid " + COLOR_ACTIVE : 'none';
});
var VoidBlockPH = /*#__PURE__*/styled.div(["margin-top:", ";position:relative;"], function (_ref2) {
  var isActive = _ref2.isActive;
  return isActive ? '8px' : '4px';
});
/**
 * Mark 渲染
 */

export function MarkView(_ref3) {
  var mark = _ref3.mark,
      children = _ref3.children,
      controller = _ref3.controller,
      showInline = _ref3.showInline,
      customClick = _ref3.customClick;
  var _mark$data = mark.data,
      contentId = _mark$data.contentId,
      isActive = _mark$data.isActive,
      isNew = _mark$data.isNew;
  var readOnly = controller.readOnly;
  var style = {};

  if (isActive || isNew) {
    style.backgroundColor = COLOR_ACTIVE;
  }

  var handleClick = React.useCallback(function () {
    if (customClick) {
      return customClick(contentId);
    }

    var isSideBarShowing = isSidebarVisible(controller); // 编辑视图 + 右侧没打开，就 ignore 了。

    if (!controller.readOnly && !isSideBarShowing) {
      return;
    }

    if (!controller.readOnly && showInline) {
      return;
    }

    if (IS_MOBILE) {
      controller.run('onAction', showComment(contentId));
    } else {
      controller.run('onAction', setActiveId(contentId, controller.readOnly));
      !isSideBarShowing && controller.run('onAction', setSidebarVisible(true));
    }
  }, [controller, contentId, showInline]);
  var View = readOnly ? ReadOnlyMarkWrapper : MarkWrapper;
  var extraProps = readOnly ? {
    'data-comment-noblur': true
  } : {};
  return /*#__PURE__*/_createElement(View, _extends({}, extraProps, {
    "data-comment": contentId,
    onClick: handleClick,
    style: style
  }), children);
}
/**
 * Void 类型的 Mark 渲染
 */

export function VoidMarkView(props) {
  var nextElements = props.nextElements,
      mark = props.mark,
      isBlock = props.isBlock,
      isDisabled = props.isDisabled,
      nodeKey = props.nodeKey;
  var hideAll = Boolean(isDisabled || !mark);
  var isActive = Boolean(mark == null ? void 0 : mark.data.isActive);
  var extraProps = {
    'data-comment-void': mark == null ? void 0 : mark.data.contentId,
    // 节点 key。由于 dom 位置调整，从 dom 结构上找 key 不可靠，因此这里自己传入了一个
    'data-comment-nodekey': nodeKey
  };
  return /*#__PURE__*/_createElement(React.Fragment, null, nextElements, !hideAll && isBlock && /*#__PURE__*/_createElement(VoidBlockPH, {
    isActive: isActive
  }, /*#__PURE__*/_createElement(VoidBlockWrapper, _extends({
    isActive: isActive
  }, extraProps))), !hideAll && !isBlock && isActive && /*#__PURE__*/_createElement(VoidActiveWrapper, extraProps), !hideAll && !isBlock && !isActive && /*#__PURE__*/_createElement(VoidMarkWrapper, extraProps));
}
//# sourceMappingURL=markView.js.map