import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { useZoom } from '@ali/4ever-cangjie';
import { Tooltip } from '@ali/we-design';
import { CompleteNormal, ToolbarArrowDownNormal } from '@ali/we-icon';
import SimplePopup from "./simplePopup";
import useResizer from "../utils/useResizer";
import { showComment } from "../actions";
import getSiblings from "../queries/getSiblings";
import blockEvent from "../utils/blockEvent";
import { tipStyle } from "../common";
import { cancelQueue, enqueue } from "../common/pendingIDs";
import requestIdle from "../utils/requestIdle";
import { SCROLL_HEIGHT_PERCENT_SIDEBAR } from "../constants";
var EXTRA_HEIGHT_OFFSET = -14;
var TRANSITION_WAIT_TIME = 1000;
var POPUP_TRANSITION = 'border 0.25s, box-shadow 0.25s, top 0.25s';
var ToolbarArrowUpNormal = /*#__PURE__*/styled(ToolbarArrowDownNormal)(["transform:rotate(180deg);"]);
var PopupWrapper = /*#__PURE__*/styled.div(["position:absolute;-webkit-font-smoothing:antialiased;width:calc(100% - 28px);left:0px;margin:14px;background-color:white;border:1px solid ", ";border-radius:8px;overflow:hidden;cursor:", ";box-sizing:border-box;box-shadow:", ";&:focus{outline:none;}&:hover{border:1px solid ", ";box-shadow:0px 0px 1px rgba(0,0,0,0.24),0px 8px 24px rgba(0,0,0,0.16);}& article[data-cangjie-content]{padding:0;}"], function (props) {
  return props.isActive ? '#0089FF' : 'rgba(126, 134, 142, 0.16)';
}, function (props) {
  return props.isActive ? 'initial' : 'pointer';
}, function (props) {
  return props.isActive ? '0px 0px 1px rgba(0, 0, 0, 0.24), 0px 8px 24px rgba(0, 0, 0, 0.16)' : 'none';
}, function (props) {
  return props.isActive ? '#0089FF' : 'white';
});
var TitleRef = /*#__PURE__*/styled.div(["width:2px;height:14px;background-color:#171a1d;opacity:0.24;margin-right:4px;"]);
var Title = /*#__PURE__*/styled.div(["flex:1;padding-right:8px;font-size:14px;height:26px;line-height:26px;opacity:0.6;color:#171a1d;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;"]);
var ArrowWrapper = /*#__PURE__*/styled.div(["opacity:", ";height:24px;border:1px solid rgba(126,134,142,0.16);border-radius:4px;display:flex;flex-direction:row;align-items:center;"], function (props) {
  return props.visible ? '1' : '0';
});
var TitleWrapper = /*#__PURE__*/styled.div(["padding:12px 16px;display:flex;flex-direction:row;align-items:center;&:hover ", "{opacity:1;}"], ArrowWrapper);
var IconWrapper = /*#__PURE__*/styled.div(["height:24px;width:24px;flex:1;display:flex;cursor:pointer;flex-direction:row;justify-content:center;align-items:center;color:", ";&:hover{background:", ";}& > span{font-size:20px;}"], function (props) {
  return props.isDisabled ? 'rgba(23, 26, 29, 0.24)' : '#171A1D';
}, function (props) {
  return props.isDisabled ? 'transparent' : 'rgba(126, 134, 142, 0.12)';
});
var Spliter = /*#__PURE__*/styled.div(["width:1px;height:22px;background:rgba(126,134,142,0.16);"]);
var Panel = /*#__PURE__*/styled.div([""]);

var _ref2 = /*#__PURE__*/_createElement(TitleRef, null);

var _ref3 = /*#__PURE__*/_createElement(ToolbarArrowUpNormal, null);

var _ref4 = /*#__PURE__*/_createElement(Spliter, null);

var _ref5 = /*#__PURE__*/_createElement(ToolbarArrowDownNormal, null);

var _ref6 = /*#__PURE__*/_createElement(Spliter, null);

var _ref7 = /*#__PURE__*/_createElement(CompleteNormal, null);

var Popup = /*#__PURE__*/React.memo(function (props) {
  var _configs$locale, _configs$locale2, _configs$locale3;

  var controller = props.controller,
      contentId = props.contentId,
      configs = props.configs,
      isNew = props.isNew,
      isAutoFocus = props.isAutoFocus,
      isActive = props.isActive,
      summary = props.summary,
      position = props.position,
      onAdd = props.onAdd,
      onDelete = props.onDelete,
      onCancel = props.onCancel;

  var _ref = configs || {},
      sendComment = _ref.sendComment,
      getCommentList = _ref.getCommentList,
      renderPopup = _ref.renderPopup,
      closeComment = _ref.closeComment;

  var _controller$query = controller.query(getSiblings),
      prev = _controller$query.prev,
      next = _controller$query.next;

  var children;
  var canCloseComment = !!closeComment;
  var readonlyPosition = controller.readOnly ? position : undefined;
  var renderProps = {
    contentId: contentId,
    isNew: isNew,
    isAutoFocus: isAutoFocus,
    isActive: isActive,
    summary: summary,
    readonlyPosition: readonlyPosition,
    onAdd: onAdd,
    onDelete: onDelete,
    onCancel: isNew ? onCancel : undefined
  };
  var navigateToPrev = React.useCallback(function (event) {
    if (prev) {
      var heightPercent = SCROLL_HEIGHT_PERCENT_SIDEBAR;
      controller.run('onAction', showComment(prev, {
        heightPercent: heightPercent
      }));
    }

    blockEvent(event);
  }, [controller, prev]);
  var navigateToNext = React.useCallback(function (event) {
    if (next) {
      var heightPercent = SCROLL_HEIGHT_PERCENT_SIDEBAR;
      controller.run('onAction', showComment(next, {
        heightPercent: heightPercent
      }));
    }

    blockEvent(event);
  }, [controller, next]);
  var navigateToClose = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    closeComment && closeComment(contentId);
  }, [closeComment, contentId]);

  if (renderPopup) {
    children = renderPopup(renderProps);
  } else {
    children = /*#__PURE__*/_createElement(SimplePopup, _extends({
      sendComment: sendComment,
      getCommentList: getCommentList
    }, renderProps));
  }

  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(TitleWrapper, null, _ref2, /*#__PURE__*/_createElement(Title, null, summary), !isNew && /*#__PURE__*/_createElement(ArrowWrapper, {
    visible: isActive
  }, isActive && /*#__PURE__*/_createElement(Tooltip, {
    overlayStyle: tipStyle,
    title: (configs == null ? void 0 : (_configs$locale = configs.locale) == null ? void 0 : _configs$locale.prev) || 'Prev',
    placement: "top"
  }, /*#__PURE__*/_createElement(IconWrapper, {
    isDisabled: !prev,
    onClick: navigateToPrev
  }, _ref3)), isActive && !canCloseComment && _ref4, isActive && /*#__PURE__*/_createElement(Tooltip, {
    overlayStyle: tipStyle,
    title: (configs == null ? void 0 : (_configs$locale2 = configs.locale) == null ? void 0 : _configs$locale2.next) || 'Next',
    placement: "top"
  }, /*#__PURE__*/_createElement(IconWrapper, {
    isDisabled: !next,
    onClick: navigateToNext
  }, _ref5)), canCloseComment && /*#__PURE__*/_createElement(React.Fragment, null, isActive && _ref6, /*#__PURE__*/_createElement(Tooltip, {
    overlayStyle: tipStyle,
    title: (configs == null ? void 0 : (_configs$locale3 = configs.locale) == null ? void 0 : _configs$locale3.closeComment) || 'Resolve and hide comments',
    placement: "top"
  }, /*#__PURE__*/_createElement(IconWrapper, {
    "data-comment-noblur": true,
    "data-comment-no-capture": true,
    onMouseDown: navigateToClose
  }, _ref7))))), /*#__PURE__*/_createElement(Panel, null, children));
});
export default function PopupView(props) {
  var _configs$locale4;

  var controller = props.controller,
      top = props.top,
      prio = props.prio,
      popHeights = props.popHeights,
      updatePosition = props.updatePosition,
      isAutoFocus = props.isAutoFocus,
      contentId = props.contentId,
      configs = props.configs,
      isNew = props.isNew,
      isActive = props.isActive,
      summary = props.summary,
      position = props.position,
      onAdd = props.onAdd,
      onDelete = props.onDelete,
      onCancel = props.onCancel;
  var ref = React.useRef(null);
  var zoom = useZoom();
  var handleMouseDown = React.useCallback(function (event) {
    var target = event.target;
    var noCaptureAttr = 'data-comment-no-capture';

    if (target instanceof Element && !target.closest('.ant-popconfirm') && !target.closest('.popup-overlay-wrap') && !target.hasAttribute(noCaptureAttr) && !target.closest("[" + noCaptureAttr + "]")) {
      controller.run('onAction', showComment(contentId));
    }
  }, [contentId, controller]);
  var topPx = top + EXTRA_HEIGHT_OFFSET;
  var style = {
    top: topPx / zoom + "px"
  };

  var _React$useState = React.useState(isActive),
      isVisible = _React$useState[0],
      setIsVisible = _React$useState[1];

  React.useEffect(function () {
    if (isVisible) {
      return undefined;
    }

    var callback = function callback() {
      return setIsVisible(true);
    };

    var p = {
      prio: prio,
      callback: callback
    };
    enqueue(p);
    return function () {
      cancelQueue(p);
    };
  }, [isVisible, prio]);
  useResizer({
    ref: ref,
    updator: updatePosition,
    popHeights: popHeights,
    contentId: contentId,
    isVisible: isVisible,
    zoom: zoom
  });
  React.useEffect(function () {
    if (!ref.current) {
      return undefined;
    }

    var domNode = ref.current;

    var prettier = function prettier() {
      domNode.style.transition = POPUP_TRANSITION;
    };

    var _requestIdle = requestIdle(prettier),
        cancel = _requestIdle.cancel;

    return cancel;
  }, [isVisible]);

  if (!isVisible) {
    return null;
  }

  if (!contentId) {
    return null;
  }

  return /*#__PURE__*/_createElement(PopupWrapper, {
    ref: ref,
    tabIndex: 0,
    style: style,
    "data-comment-popup": true,
    "data-comment-id": contentId,
    "data-comment-active": isActive,
    onMouseDownCapture: handleMouseDown,
    isActive: isActive
  }, /*#__PURE__*/_createElement(Popup, {
    controller: controller,
    contentId: contentId,
    isAutoFocus: isAutoFocus,
    configs: configs,
    isNew: isNew,
    isActive: isActive,
    summary: summary || (configs == null ? void 0 : (_configs$locale4 = configs.locale) == null ? void 0 : _configs$locale4.comment) || '',
    position: position,
    onAdd: onAdd,
    onDelete: onDelete,
    onCancel: onCancel
  }));
}
//# sourceMappingURL=popupView.js.map