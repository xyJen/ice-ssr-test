import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { useZoom } from '@ali/4ever-cangjie';
import { COLOR } from "../constants";
var HoverEffectWrapper = /*#__PURE__*/styled.div(["z-index:1;width:0;height:0;float:left;position:relative;"]);
var HoverEffectNode = /*#__PURE__*/styled.div(["position:absolute;left:0;top:0;border-radius:4px;transition:background 0.25s;"]);
export default function HoverEffect(_ref) {
  var blockKey = _ref.blockKey;
  var ref = React.useRef(null);
  var zoom = useZoom();
  React.useEffect(function () {
    var _ref$current, _ref$current$parentEl;

    var target = (_ref$current = ref.current) == null ? void 0 : (_ref$current$parentEl = _ref$current.parentElement) == null ? void 0 : _ref$current$parentEl.nextElementSibling;
    var node = ref.current;

    if (!target || !node) {
      return undefined;
    }

    var _target$getBoundingCl = target.getBoundingClientRect(),
        top = _target$getBoundingCl.top,
        width = _target$getBoundingCl.width,
        height = _target$getBoundingCl.height;

    var _ref$current$parentEl2 = ref.current.parentElement.getBoundingClientRect(),
        selfTop = _ref$current$parentEl2.top;

    node.style.width = width / zoom + "px";
    node.style.height = height / zoom + "px";
    node.style.top = (top - selfTop) / zoom + "px";
    var timer = requestAnimationFrame(function () {
      node.style.backgroundColor = COLOR;
    });
    return function () {
      cancelAnimationFrame(timer);
    };
  }, [zoom]);
  return /*#__PURE__*/_createElement(HoverEffectWrapper, {
    "data-drag-handler-key": blockKey
  }, /*#__PURE__*/_createElement(HoverEffectNode, {
    ref: ref
  }));
}
//# sourceMappingURL=HoverEffect.js.map