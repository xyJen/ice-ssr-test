import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { useZoomContainer } from '@ali/4ever-cangjie';
import { getActiveId } from "../queries";
import { ViewMark } from "../models/marks";
import { findCommentPostion } from "../utils/findCommentPostion";
import isAutoFocus from "../queries/isAutoFocus";
import { addComment, cancelComment } from "../actions";
import { useDocSize } from "../hooks/useDocSize";
var EmptyDiv = /*#__PURE__*/styled.div(["width:0;height:0;display:none;"]);
export default function ExternalSidebar(props) {
  var ref = React.useRef(null);
  var controller = props.controller,
      _props$configs = props.configs,
      configs = _props$configs === void 0 ? {} : _props$configs,
      isCommentLoaded = props.isCommentLoaded;
  var onAdd = React.useCallback(function () {
    controller.run('onAction', addComment());
  }, [controller]);
  var onCancel = React.useCallback(function () {
    controller.run('onAction', cancelComment());
  }, [controller]);
  var container = useZoomContainer();
  var _controller$value = controller.value,
      document = _controller$value.document,
      decorations = _controller$value.decorations;
  var activeContentId = getActiveId(controller);
  var updatePosition = React.useCallback(function () {
    var _ref = configs,
        onSidebarInfoUpdated = _ref.onSidebarInfoUpdated;

    if (!onSidebarInfoUpdated) {
      return;
    }

    var commentDecorations = decorations.filter(function (d) {
      return ViewMark.isViewMark(d.mark);
    });
    var rowItems = commentDecorations.length ? findCommentPostion({
      controller: controller,
      decorations: commentDecorations,
      selection: undefined,
      container: container || undefined,
      isFromPopup: true
    }) : [];
    var autoFocus = isAutoFocus(controller); // 生成 card 基本信息（这里可能有覆盖的场景）

    var cards = rowItems.reduce(function (array, item) {
      item.decorations.forEach(function (decoration) {
        var top = item.top,
            clientTop = item.clientTop;
        var mark = decoration.mark;
        var _mark$data = mark.data,
            isNew = _mark$data.isNew,
            contentId = _mark$data.contentId,
            summary = _mark$data.summary,
            position = _mark$data.position,
            count = _mark$data.count;
        var isActive = contentId === activeContentId;
        var card = {
          top: top,
          clientTop: clientTop,
          isNew: Boolean(isNew),
          isAutoFocus: Boolean(autoFocus && isActive),
          isActive: isActive,
          count: count,
          summary: summary,
          position: position,
          contentId: contentId
        };
        array.push(card);
      });
      return array;
    }, []);
    onSidebarInfoUpdated({
      cards: cards,
      onAdd: onAdd,
      onCancel: onCancel,
      isCommentLoaded: isCommentLoaded
    });
  }, [decorations, controller, document, container, activeContentId, isCommentLoaded]);
  var prevDocument = usePrevious(document);
  React.useEffect(function () {
    /**
     * 非 document 变化，比如 decorations 变了，立刻刷新
     */
    if (!prevDocument || prevDocument === document) {
      updatePosition();
      return undefined;
    }
    /**
     * document 变化，延迟刷新
     *
     * 一些场景比如（折叠标题），有动画延迟，等一会儿再更新，不然会闪烁
     */


    var timer = setTimeout(function () {
      updatePosition();
    }, EFFECT_DEBOUNCE_TIME);
    return function () {
      clearTimeout(timer);
    };
  }, [updatePosition]);
  useDocSize(ref, updatePosition);
  return /*#__PURE__*/_createElement(EmptyDiv, {
    ref: ref
  });
}
var EFFECT_DEBOUNCE_TIME = 300;

function usePrevious(value) {
  var ref = React.useRef();
  React.useEffect(function () {
    ref.current = value;
  });
  return ref.current;
}
//# sourceMappingURL=ExternalSidebar.js.map