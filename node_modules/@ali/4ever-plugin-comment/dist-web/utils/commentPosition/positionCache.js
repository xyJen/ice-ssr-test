import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable no-console */
import { domUtils } from '@ali/4ever-cangjie';
var CONTROLELR_CACHE = new WeakMap();

/**
 * 每次获取缓存之前，先清理一遍失效的缓存，针对的场景：
 * 1. document dom 的宽度变了
 * 2. 某一个节点变化了
 */
export function validateCaches(params) {
  var controller = params.controller,
      docTop = params.docTop,
      _docHeight = params.docHeight,
      _docWidth = params.docWidth,
      container = params.container;
  var document = controller.value.document;
  var docWidth = Math.round(_docWidth);
  var docHeight = Math.round(_docHeight);
  var nodes = document.nodes;
  var allRows = {};
  var cache = CONTROLELR_CACHE.get(controller); // 如果 document 宽度变了，重置所有的缓存

  if (!cache || cache.docWidth !== docWidth) {
    CONTROLELR_CACHE.set(controller, {
      nodes: nodes,
      docWidth: docWidth,
      docHeight: docHeight,
      allRows: allRows
    });
    return allRows;
  }

  var prevNodes = cache.nodes,
      prevAllRows = cache.allRows;
  Object.keys(prevAllRows).forEach(function (key) {
    var prevNode = prevNodes.find(function (n) {
      return n.key === key;
    });
    var isValid = prevNode && nodes.find(function (n) {
      return n === prevNode;
    });

    if (!isValid) {
      return;
    }

    var _prevAllRows$key = prevAllRows[key],
        oldTop = _prevAllRows$key.top,
        rows = _prevAllRows$key.rows,
        oldPoints = _prevAllRows$key.points,
        prevNodeHeight = _prevAllRows$key.height;
    var node = domUtils.findDOMNodeSafely(key, container);

    if (!node) {
      return;
    }

    var _node$getBoundingClie = node.getBoundingClientRect(),
        nodeClientTop = _node$getBoundingClie.top,
        nodeHeight = _node$getBoundingClie.height;

    if (Math.round(nodeHeight) !== Math.round(prevNodeHeight)) {
      return;
    }

    var top = nodeClientTop - docTop;
    var topOffsetInSession = top - oldTop;
    var points = oldPoints.map(function (p) {
      return _extends({}, p, {
        caretTop: p.caretTop + topOffsetInSession
      });
    });
    allRows[key] = {
      top: top,
      height: nodeHeight,
      points: points,
      rows: rows
    };
  }); // 计算完成，这时缓存都是有效的计算结果

  cache.allRows = allRows;
  cache.docWidth = docWidth;
  cache.docHeight = docHeight;
  cache.nodes = nodes;
  return allRows;
}
//# sourceMappingURL=positionCache.js.map