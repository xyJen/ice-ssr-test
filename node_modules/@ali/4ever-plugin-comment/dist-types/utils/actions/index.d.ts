import type { NodeSelectToolbarActionPayload } from '@ali/4ever-cangjie';
import { CommentItem, ShowCommentOptions } from '../types';
export declare const ACTION_COMMENT_CLICK: unique symbol;
export declare const ACTION_COMMENT_ADD: unique symbol;
export declare const ACTION_COMMENT_SHOW: unique symbol;
export declare const ACTION_COMMENT_CANCEL: unique symbol;
export declare const ACTION_COMMENT_SET_ID: unique symbol;
export declare const ACTION_COMMENT_SET_COMMENTS: unique symbol;
export declare const ACTION_COMMENT_SET_SIDE_BAR: unique symbol;
export declare const ACTION_COMMENT_SELECTED_NODES: unique symbol;
/**
 * 显示评论
 */
export declare const showComment: (contentId?: string, options?: ShowCommentOptions) => {
    type: symbol;
    payload: {
        contentId: string | undefined;
        options: ShowCommentOptions | undefined;
    };
};
/**
 * 隐藏评论
 */
export declare const hideComment: () => {
    type: symbol;
    payload: undefined;
};
/**
 * 添加评论
 */
export declare const addComment: () => {
    type: symbol;
};
/**
 * 取消正在添加的评论
 */
export declare const cancelComment: () => {
    type: symbol;
};
/**
 * 设置显示的 comment （showComment 会触发滚动，这里没有副作用）
 */
export declare const setActiveId: (contentId: string | undefined, isAutoFocus?: boolean) => {
    type: symbol;
    payload: {
        contentId: string | undefined;
        isAutoFocus: boolean;
    };
};
/**
 * 设置 comments 数据
 */
export declare const setComments: (comments: CommentItem[]) => {
    type: symbol;
    payload: {
        comments: CommentItem[];
    };
};
/**
 * 设置右侧栏是否可见
 */
export declare const setSidebarVisible: (visible: boolean) => {
    type: symbol;
    payload: {
        visible: boolean;
    };
};
export declare const commentSelectedNodes: (payload?: NodeSelectToolbarActionPayload | undefined) => import("@ali/4ever-cangjie").Action<NodeSelectToolbarActionPayload>, isCommentSelectedNodes: (action: import("@ali/4ever-cangjie").Action<any>) => action is import("@ali/4ever-cangjie").Action<NodeSelectToolbarActionPayload>;
