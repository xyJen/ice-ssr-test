/// <reference types="react" />
import { Decoration, Selection } from '@ali/4ever-cangjie';
import '@ali/4ever-plugin-fold';
export declare const MARK_TYPE_DATA = "comment";
export declare const MARK_TYPE_VIEW = "comment-v";
export declare type CommentItem = {
    summary: string;
    contentId: string;
    position: string;
    count: number;
    isClosed?: boolean;
};
export declare type ShowCommentOptions = {
    skipAutoFocus?: boolean;
    skipScroll?: boolean;
    alwaysScroll?: boolean;
    ignoreCheck?: boolean;
    heightPercent?: number;
};
export declare type CommentLocale = {
    comment?: string;
    addComment?: string;
    showComent?: string;
    finish?: string;
    inlineComment?: string;
    prev?: string;
    next?: string;
    hide?: string;
    summary?: string;
    closeComment?: string;
};
export declare type BasicCommentRequest = {
    content: string;
    contentId: string;
    replyId?: string;
};
export declare type BasicCommentItem = BasicCommentRequest & {
    id: string;
    date: string;
    author: string;
};
export declare type PostionRowItem = {
    rowKey: number;
    top: number;
    clientTop: number;
    selection?: Selection;
    decorations: Decoration[];
};
export declare type RenderPopupProps = {
    isNew: boolean;
    isAutoFocus: boolean;
    isActive: boolean;
    contentId: string;
    summary: string;
    readonlyPosition?: string;
    onAdd: (contentId: string) => void;
    onDelete: (contentId: string) => void;
    onLoad?: () => void;
    onCancel?: () => void;
};
export declare type SidebarCardInfo = {
    contentId: string;
    top: number;
    clientTop: number;
    isNew: boolean;
    isAutoFocus: boolean;
    isActive: boolean;
    count: number;
    summary: string;
    position: any;
};
export interface SidebarInfo {
    cards: SidebarCardInfo[];
    onAdd: () => void;
    onCancel: () => void;
    isCommentLoaded: boolean;
}
export declare type RenderCustomPopupProps = {
    /**
     * 是否是新建
     */
    isNew: boolean;
    /**
     * 是否期望自动 focus。比如 PC 编辑页面，有时候不希望是自动 focus 的
     */
    isAutoFocus: boolean;
    /**
     * 右侧面板：是否是 active 状态
     */
    isActive: boolean;
    /**
     * 评论的 contentId
     */
    contentId: string;
    /**
     * 应用内容的 description
     */
    summary: string;
    /**
     * 只读模式下定位信息
     */
    readonlyPosition?: string;
    onAdd: (contentId: string) => void;
    onDelete: (contentId: string) => void;
    /**
     * 取消回调，可以取消正在输入的评论、并且隐藏 activeID
     */
    cancelPopup?: () => void;
    /**
     * 上一个 contentID
     */
    prev: string | undefined;
    /**
     * 下一个 contentID
     */
    next: string | undefined;
    /**
     * 移动到上一个
     */
    navigateToPrev: () => void;
    /**
     * 移动到下一个
     */
    navigateToNext: () => void;
    /**
     * 评论的定位信息
     */
    position: undefined | {
        top: number;
        left: number;
        width: number;
        rects: DOMRect[];
        parentRect: DOMRect;
    };
};
export declare type CommentPluginConfigs = {
    locale?: CommentLocale;
    /**
     * 发送评论接口（SimplePopup 使用）
     */
    sendComment?: (req: BasicCommentRequest) => Promise<boolean>;
    /**
     * 获取评论接口（SimplePopup 使用）
     */
    getCommentList?: (contentId: string) => Promise<BasicCommentItem[]>;
    /**
     * 右侧面板显示：渲染 PC 端的 Popup
     */
    renderPopup?: (props: RenderPopupProps) => JSX.Element;
    /**
     * 右侧面板显示：面板颜色
     */
    sidebarBackgroundColor?: () => string | undefined;
    /**
     * 内联显示
     */
    showInline?: boolean;
    /**
     * 内联显示：渲染 Popup（移动端、PC 端均会调用）
     */
    renderCustomPopup?: (props: RenderCustomPopupProps) => JSX.Element;
    /**
     * 获取缓存的评论数据
     */
    fetchCachedComment?: () => Promise<CommentItem[]>;
    /**
     * 刷新评论数据
     */
    reloadComments?: () => void;
    /**
     * 使用自定义 api
     */
    withCustomApiAdaptor: () => void;
    /**
     * 右侧面板显示：关闭评论回调
     */
    closeComment?: (contentId: string, callback?: () => void) => Promise<boolean>;
    /**
     * 右侧面板显示：打开评论回调
     */
    reopenComment?: (contentId: string, callback?: () => void) => Promise<boolean>;
    /**
     * 文档是否已加载完成
     */
    isDocLoaded?: () => boolean;
    /**
     * 返回当前所有的划词评论 contentId
     */
    contentIds?: (ids: string[], isLoaded: boolean) => void;
    /**
     * 是否暂时禁用评论。在某些场景，比如缩放、权限等，可以动态的返回禁用标记
     */
    isDisabled?: () => boolean;
    /**
     * 控制是否灰度。如果返回 false，不会加载相关的评论代码。默认返回 true
     */
    isGrayed?: () => boolean;
    /**
     * 禁用时，调用添加评论 action 的回调
     */
    onDisabled?: () => void;
    /**
     * 初始加载后，定位的某一个评论
     */
    showCommentOnLoaded?: {
        /**
         * 初始定位的评论 id
         */
        subObjectId?: string | (() => Promise<string>);
        /**
         * 后续定位的引用
         */
        navigateRef?: (ref: (contentId?: string, options?: ShowCommentOptions) => void) => void;
        /**
         * 评论不存在的回调
         */
        onCommentInvalid?: () => void;
    };
    /**
     * 右侧面板：隐藏顶部的 Tab
     */
    hideSidebarTab?: boolean;
    /**
     * 评论变化 ref，调用可以触发编辑器刷新
     */
    onCommentsChangeRef?: (ref: Function | null) => void;
    /**
     * 当前高亮的评论变化 ref
     */
    onActiveIdChange?: (contentId: string | undefined) => void;
    /**
     * 右侧面板的 visible 属性变化
     */
    onSidebarVisibleChange?: (visible: boolean) => void;
    /**
     * autoBlur 特性：滚动出视口外，当前的划词弹窗会自动 blur 掉
     */
    enableAutoBlur?: boolean;
    /**
     * 禁用选区的新增按钮。
     * 设置后，选区 expand 状态和点击图片（void 元素）均不会显示右侧的添加按钮。
     */
    disableRangeAdd?: boolean;
    /**
     * 页面加载回调
     */
    onContentMounted?: () => void;
    /**
     * 页面销毁回调
     */
    onContentUnMounted?: () => void;
    /**
     * 自动滚动的时候，以目标底部作为基准 align
     */
    scrollByBottomAlign?: () => boolean;
    /**
     * 自动滚动时，顶部额外的空间
     */
    scrollTopExtraOffset?: number;
    /**
     * 弹窗在点击其它地方时关闭。默认是 true
     */
    blurPopupOnClick?: () => boolean;
    /**
     * 禁用解决评论按钮
     */
    hideCloseMenu?: () => boolean;
    /**
     * sidebar info 监听。如果设置，就不渲染默认的 sidebar 了，业务需要自行实现 sidebar
     */
    onSidebarInfoUpdated?: (info: SidebarInfo) => void;
    /**
     * 默认 sidebar 的 dom 引用
     */
    sidebarRef?: (ref?: React.RefObject<HTMLDivElement>) => void;
    /**
     * 评论气泡的点击回调
     */
    onBubbleClick?: (contentId: string) => void;
    /**
     * 是否禁用移动端 bottomBar
     */
    disableBottomBar?: boolean;
    /**
     * 懒加载组件
     */
    lazyload?: any;
};
declare module '@ali/4ever-cangjie' {
    interface UserDataContent {
        fold?: boolean;
    }
}
