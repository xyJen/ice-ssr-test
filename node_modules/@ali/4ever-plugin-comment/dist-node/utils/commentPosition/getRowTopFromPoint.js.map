{"version":3,"sources":["../../../../src/utils/commentPosition/getRowTopFromPoint.ts"],"names":["BLOCK_TOP_OFFSET","BLOCK_TOP_OFFSET_POPUP","SAMPLE_BLOCK_HEIGHT","corretCaretPoint","controller","point","document","value","getClosestVoid","key","getParent","type","query","Queries","pointAtDistance","getRootBlock","pointKey","path","getPath","firstPath","slice","firstRoot","length","getNodeByPath","findRow","params","docTop","top","allRows","container","undefined","rootKey","cachedRows","domNode","domUtils","findDOMNodeSafely","newRows","splitRows","clientTop","height","getBoundingClientRect","forEach","r","points","rows","blockTop","targetTop","index","row","getRowTopFromPoint","paramPoint","isFromPopup","blockTopOffset","targetPoint","getNode","block","getClosestBlock","foldBlocks","firstFoldBlock","find","b","userData","get","firstFoldText","getFirstText","TextPoint","create","offset","pointCacheKey","viewKey","cachedPoint","p","caretTop","rowTop","Math","round","caretPosition","findCaretPosition","caretClientTop","result","rowHeight","rowOffsetTop","push"],"mappings":"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","sourcesContent":["import {\n  EdgePoint,\n  TextPoint,\n  Controller,\n  Document,\n  Block,\n  Queries,\n  domUtils,\n} from '@ali/4ever-cangjie';\n\n// Block 元素顶部的偏移，主要处理 border-radius 情况。\nconst BLOCK_TOP_OFFSET = 6;\n// sidebar POPUP 时的偏移。\nconst BLOCK_TOP_OFFSET_POPUP = -1;\n// 大于此值，会视为 Block 元素，定位到右上角；否则视为 Inline 元素，定位到光标中间\nconst SAMPLE_BLOCK_HEIGHT = 41;\n\ninterface MemoPoint {\n  // point 的 view key\n  key: string;\n  // 缓存的 point 位置计算结果\n  caretTop: number;\n  // splitRows 里面的一个 row\n  row: ReturnType<typeof domUtils.splitRows>[number];\n}\n\ninterface CachedRowsItem {\n  // offsetTop to docTop\n  top: number;\n  /// node height\n  height: number;\n  // 缓存的 point 点\n  points: MemoPoint[];\n  // 缓存的 rows\n  rows: ReturnType<typeof domUtils.splitRows>;\n}\n\n/**\n * 光标位置处理。由于 void 节点内的光标无法定位，尝试获取前一个位置\n */\nfunction corretCaretPoint(\n  controller: Controller,\n  point: EdgePoint | TextPoint,\n) {\n  const { document } = controller.value;\n  if (\n    document.getClosestVoid(point.key, controller) ||\n    document.getParent(point.key)?.type === 'code'\n  ) {\n    return controller.query(Queries.pointAtDistance, point, -1);\n  }\n  return point;\n}\n\n/**\n * 根据 key 获取 document 下面的一级节点\n */\nfunction getRootBlock(document: Document, pointKey: string) {\n  const path = document.getPath(pointKey);\n  const firstPath = path && path.slice(0, 1);\n  const firstRoot = firstPath?.length\n    ? document.getNodeByPath(firstPath)\n    : null;\n  return firstRoot;\n}\n\n/**\n * 根据 top 坐标，获取对应的分行（row）\n */\nfunction findRow(params: {\n  docTop: number;\n  top: number;\n  allRows: Record<string, CachedRowsItem>;\n  pointKey: string;\n  document: Document;\n  container: HTMLElement | Window;\n}) {\n  const { docTop, top, pointKey, document, allRows, container } = params;\n  const firstRoot = getRootBlock(document, pointKey);\n  if (!firstRoot) {\n    return undefined;\n  }\n  const { key: rootKey } = firstRoot;\n  let cachedRows = allRows[rootKey];\n\n  if (!cachedRows) {\n    const domNode = domUtils.findDOMNodeSafely(firstRoot.key, container);\n    const newRows = domNode && domUtils.splitRows(domNode);\n    if (!newRows || !newRows.length) {\n      return undefined;\n    }\n    const { top: clientTop, height } = domNode.getBoundingClientRect();\n    newRows.forEach((r) => {\n      // eslint-disable-next-line no-param-reassign\n      r.top -= clientTop;\n    });\n    cachedRows = {\n      top: clientTop - docTop,\n      height,\n      points: [],\n      rows: newRows,\n    };\n    allRows[rootKey] = cachedRows;\n  }\n\n  const { rows, top: blockTop } = cachedRows;\n  const targetTop = top - blockTop;\n  for (let index = 0; index < rows.length; index++) {\n    const row = rows[index];\n    if (row.top + row.height > targetTop) {\n      return { row, cachedRows };\n    }\n  }\n  const row = rows[rows.length - 1];\n  return { row, cachedRows };\n}\n\ninterface IParams {\n  controller: Controller;\n  isFromPopup?: boolean;\n  docTop: number;\n  container: HTMLElement | Window;\n  allRows: Record<string, CachedRowsItem>;\n  paramPoint: EdgePoint | TextPoint | undefined;\n}\n\n/**\n * 根据一个 point，获取对应的分行（row）、相对于 document 的 offsetTop\n */\nexport function getRowTopFromPoint(params: IParams) {\n  const {\n    controller,\n    paramPoint,\n    isFromPopup,\n    docTop,\n    container,\n    allRows,\n  } = params;\n  const { document } = controller.value;\n  const blockTopOffset = isFromPopup\n    ? BLOCK_TOP_OFFSET_POPUP\n    : BLOCK_TOP_OFFSET;\n  let targetPoint = paramPoint;\n  if (!targetPoint || !document.getNode(targetPoint.key)) {\n    return undefined;\n  }\n\n  // 0. 处理折叠逻辑等特殊场景，修正 point\n  const block = document.getClosestBlock(targetPoint.key);\n  const foldBlocks =\n    block && (controller.query('getHeadingAncestors', block) as Block[]);\n  const firstFoldBlock = foldBlocks && foldBlocks.find((b) => controller.userData.get(b, 'fold'));\n  const firstFoldText = firstFoldBlock?.getFirstText();\n  // 气泡形式，如果被折叠，就直接藏起来\n  if (!isFromPopup && firstFoldText) {\n    return undefined;\n  }\n  // 非气泡形式，如果被折叠，就找到折叠的段落\n  if (firstFoldText) {\n    targetPoint = TextPoint.create({\n      key: firstFoldText.key,\n      offset: 0,\n    });\n  }\n\n  const point = corretCaretPoint(controller, targetPoint);\n\n  // 1. 这里开始正式分行计算，获取 point 的 key\n  const pointCacheKey = point.viewKey;\n\n  // 1.1 先查有没有缓存，有的话， 就不需要计算了\n  const firstRoot = getRootBlock(document, point.key);\n  if (firstRoot) {\n    const cachedRows = firstRoot && allRows[firstRoot.key];\n    const cachedPoint = cachedRows?.points.find((p) => p.key === pointCacheKey);\n    if (cachedRows && cachedPoint) {\n      const { caretTop, row } = cachedPoint;\n      const rowTop = cachedRows.top + row.top;\n      return [Math.round(rowTop), Math.round(caretTop)];\n    }\n  }\n\n  // 2. 没有缓存，开始获取高度\n  const caretPosition = domUtils.findCaretPosition(point);\n  const caretClientTop = caretPosition?.clientTop;\n\n  if (typeof caretClientTop !== 'number') {\n    return undefined;\n  }\n\n  // 3. 计算分行（row）\n  const result = findRow({\n    top: caretClientTop - docTop,\n    docTop,\n    pointKey: point.key,\n    document,\n    container,\n    allRows,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  const { row, cachedRows } = result;\n  const { height: rowHeight, top: rowOffsetTop } = row;\n  const rowTop = cachedRows.top + rowOffsetTop;\n\n  // case 1：分行\n  // case 2：整个 void block\n  const top =\n    rowHeight <= SAMPLE_BLOCK_HEIGHT\n      ? caretClientTop - docTop\n      : rowTop + blockTopOffset;\n\n  // 4. 存到缓存里\n  cachedRows.points.push({\n    key: pointCacheKey,\n    caretTop: Math.round(top),\n    row,\n  });\n  return [Math.round(rowTop), Math.round(top)];\n}\n"],"file":"getRowTopFromPoint.js"}