{"version":3,"sources":["../../../../src/utils/commentPosition/positionCache.ts"],"names":["CONTROLELR_CACHE","WeakMap","validateCaches","params","controller","docTop","docHeight","_docHeight","docWidth","_docWidth","container","document","value","Math","round","nodes","allRows","cache","get","set","prevNodes","prevAllRows","Object","keys","forEach","key","prevNode","find","n","isValid","top","oldTop","rows","points","oldPoints","height","prevNodeHeight","node","domUtils","findDOMNodeSafely","nodeClientTop","nodeHeight","getBoundingClientRect","topOffsetInSession","map","p","caretTop"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport { Controller, Block, domUtils } from '@ali/4ever-cangjie';\n\ninterface MemoPoint {\n  key: string;\n  caretTop: number;\n  row: ReturnType<typeof domUtils.splitRows>[number];\n}\n\ninterface CachedRowsItem {\n  // offsetTop to docTop\n  top: number;\n  height: number;\n  points: MemoPoint[];\n  rows: ReturnType<typeof domUtils.splitRows>;\n}\n\ntype AllRows = Record<string, CachedRowsItem>;\n\ninterface ControllerCache {\n  // 一级节点\n  nodes: Block[];\n  // 文档宽度\n  docWidth: number;\n  // 文档高度\n  docHeight: number;\n  // splitRows 缓存\n  allRows: AllRows;\n}\nconst CONTROLELR_CACHE = new WeakMap<Controller, ControllerCache>();\n\ninterface IParams {\n  controller: Controller;\n  docWidth: number;\n  docHeight: number;\n  docTop: number;\n  container: HTMLElement | Window;\n}\n\n/**\n * 每次获取缓存之前，先清理一遍失效的缓存，针对的场景：\n * 1. document dom 的宽度变了\n * 2. 某一个节点变化了\n */\nexport function validateCaches(params: IParams): AllRows {\n  const {\n    controller,\n    docTop,\n    docHeight: _docHeight,\n    docWidth: _docWidth,\n    container,\n  } = params;\n  const { document } = controller.value;\n  const docWidth = Math.round(_docWidth);\n  const docHeight = Math.round(_docHeight);\n  const { nodes } = document;\n  const allRows: Record<string, CachedRowsItem> = {};\n\n  const cache = CONTROLELR_CACHE.get(controller);\n\n  // 如果 document 宽度变了，重置所有的缓存\n  if (!cache || cache.docWidth !== docWidth) {\n    CONTROLELR_CACHE.set(controller, { nodes, docWidth, docHeight, allRows });\n    return allRows;\n  }\n  const { nodes: prevNodes, allRows: prevAllRows } = cache;\n\n  Object.keys(prevAllRows).forEach((key) => {\n    const prevNode = prevNodes.find((n) => n.key === key);\n    const isValid = prevNode && nodes.find((n) => n === prevNode);\n    if (!isValid) {\n      return;\n    }\n    const { top: oldTop, rows, points: oldPoints, height: prevNodeHeight } = prevAllRows[key];\n    const node = domUtils.findDOMNodeSafely(key, container);\n    if (!node) {\n      return;\n    }\n    const { top: nodeClientTop, height: nodeHeight } = node.getBoundingClientRect();\n    if (Math.round(nodeHeight) !== Math.round(prevNodeHeight)) {\n      return;\n    }\n    const top = nodeClientTop - docTop;\n    const topOffsetInSession = top - oldTop;\n    const points = oldPoints.map((p) => ({\n      ...p,\n      caretTop: p.caretTop + topOffsetInSession,\n    }));\n    allRows[key] = {\n      top,\n      height: nodeHeight,\n      points,\n      rows,\n    };\n  });\n\n  // 计算完成，这时缓存都是有效的计算结果\n  cache.allRows = allRows;\n  cache.docWidth = docWidth;\n  cache.docHeight = docHeight;\n  cache.nodes = nodes;\n  return allRows;\n}\n"],"file":"positionCache.js"}