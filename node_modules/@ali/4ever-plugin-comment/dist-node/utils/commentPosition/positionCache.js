"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateCaches = validateCaches;

var _everCangjie = require("@ali/4ever-cangjie");

/* eslint-disable no-console */
const CONTROLELR_CACHE = new WeakMap();

/**
 * 每次获取缓存之前，先清理一遍失效的缓存，针对的场景：
 * 1. document dom 的宽度变了
 * 2. 某一个节点变化了
 */
function validateCaches(params) {
  const {
    controller,
    docTop,
    docHeight: _docHeight,
    docWidth: _docWidth,
    container
  } = params;
  const {
    document
  } = controller.value;
  const docWidth = Math.round(_docWidth);
  const docHeight = Math.round(_docHeight);
  const {
    nodes
  } = document;
  const allRows = {};
  const cache = CONTROLELR_CACHE.get(controller); // 如果 document 宽度变了，重置所有的缓存

  if (!cache || cache.docWidth !== docWidth) {
    CONTROLELR_CACHE.set(controller, {
      nodes,
      docWidth,
      docHeight,
      allRows
    });
    return allRows;
  }

  const {
    nodes: prevNodes,
    allRows: prevAllRows
  } = cache;
  Object.keys(prevAllRows).forEach(key => {
    const prevNode = prevNodes.find(n => n.key === key);
    const isValid = prevNode && nodes.find(n => n === prevNode);

    if (!isValid) {
      return;
    }

    const {
      top: oldTop,
      rows,
      points: oldPoints,
      height: prevNodeHeight
    } = prevAllRows[key];

    const node = _everCangjie.domUtils.findDOMNodeSafely(key, container);

    if (!node) {
      return;
    }

    const {
      top: nodeClientTop,
      height: nodeHeight
    } = node.getBoundingClientRect();

    if (Math.round(nodeHeight) !== Math.round(prevNodeHeight)) {
      return;
    }

    const top = nodeClientTop - docTop;
    const topOffsetInSession = top - oldTop;
    const points = oldPoints.map(p => ({ ...p,
      caretTop: p.caretTop + topOffsetInSession
    }));
    allRows[key] = {
      top,
      height: nodeHeight,
      points,
      rows
    };
  }); // 计算完成，这时缓存都是有效的计算结果

  cache.allRows = allRows;
  cache.docWidth = docWidth;
  cache.docHeight = docHeight;
  cache.nodes = nodes;
  return allRows;
}
//# sourceMappingURL=positionCache.js.map