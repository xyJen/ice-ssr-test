"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarkView = MarkView;
exports.VoidMarkView = VoidMarkView;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("../constants");

var _isSidebarVisible = _interopRequireDefault(require("../queries/isSidebarVisible"));

var _actions = require("../actions");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  IS_MOBILE
} = _everCangjie.environment;

const MarkWrapper = /*#__PURE__*/_styledComponents.default.span(["border-bottom:2px solid ", ";"], _constants.COLOR_UNDERLINE);

const ReadOnlyMarkWrapper = /*#__PURE__*/(0, _styledComponents.default)(MarkWrapper)(["cursor:pointer;transition:background 0.25s;&:hover{background-color:", ";}"], _constants.COLOR);

const VoidMarkWrapper = /*#__PURE__*/_styledComponents.default.span(["width:100%;height:2px;position:absolute;bottom:-2px;left:0px;background-color:", ";"], _constants.COLOR_UNDERLINE);

const VoidActiveWrapper = /*#__PURE__*/(0, _styledComponents.default)(VoidMarkWrapper)(["height:100%;min-height:3px;bottom:-2px;background:", ";border-bottom:2px solid ", ";pointer-events:none;"], _constants.COLOR_ACTIVE, _constants.COLOR_UNDERLINE);

const VoidBlockWrapper = /*#__PURE__*/_styledComponents.default.div(["position:absolute;bottom:0;left:0;width:100%;height:0;border-bottom:2px solid ", ";box-sizing:content-box;border-top:", ";"], _constants.COLOR_UNDERLINE, ({
  isActive
}) => isActive ? `4px solid ${_constants.COLOR_ACTIVE}` : 'none');

const VoidBlockPH = /*#__PURE__*/_styledComponents.default.div(["margin-top:", ";position:relative;"], ({
  isActive
}) => isActive ? '8px' : '4px');
/**
 * Mark 渲染
 */


function MarkView({
  mark,
  children,
  controller,
  showInline,
  customClick
}) {
  const {
    contentId,
    isActive,
    isNew
  } = mark.data;
  const {
    readOnly
  } = controller;
  const style = {};

  if (isActive || isNew) {
    style.backgroundColor = _constants.COLOR_ACTIVE;
  }

  const handleClick = _react.default.useCallback(() => {
    if (customClick) {
      return customClick(contentId);
    }

    const isSideBarShowing = (0, _isSidebarVisible.default)(controller); // 编辑视图 + 右侧没打开，就 ignore 了。

    if (!controller.readOnly && !isSideBarShowing) {
      return;
    }

    if (!controller.readOnly && showInline) {
      return;
    }

    if (IS_MOBILE) {
      controller.run('onAction', (0, _actions.showComment)(contentId));
    } else {
      controller.run('onAction', (0, _actions.setActiveId)(contentId, controller.readOnly));
      !isSideBarShowing && controller.run('onAction', (0, _actions.setSidebarVisible)(true));
    }
  }, [controller, contentId, showInline]);

  const View = readOnly ? ReadOnlyMarkWrapper : MarkWrapper;
  const extraProps = readOnly ? {
    'data-comment-noblur': true
  } : {};
  return /*#__PURE__*/_createElement(View, (0, _extends2.default)({}, extraProps, {
    "data-comment": contentId,
    onClick: handleClick,
    style: style
  }), children);
}
/**
 * Void 类型的 Mark 渲染
 */


function VoidMarkView(props) {
  const {
    nextElements,
    mark,
    isBlock,
    isDisabled,
    nodeKey
  } = props;
  const hideAll = Boolean(isDisabled || !mark);
  const isActive = Boolean(mark?.data.isActive);
  const extraProps = {
    'data-comment-void': mark?.data.contentId,
    // 节点 key。由于 dom 位置调整，从 dom 结构上找 key 不可靠，因此这里自己传入了一个
    'data-comment-nodekey': nodeKey
  };
  return /*#__PURE__*/_createElement(_react.default.Fragment, null, nextElements, !hideAll && isBlock && /*#__PURE__*/_createElement(VoidBlockPH, {
    isActive: isActive
  }, /*#__PURE__*/_createElement(VoidBlockWrapper, (0, _extends2.default)({
    isActive: isActive
  }, extraProps))), !hideAll && !isBlock && isActive && /*#__PURE__*/_createElement(VoidActiveWrapper, extraProps), !hideAll && !isBlock && !isActive && /*#__PURE__*/_createElement(VoidMarkWrapper, extraProps));
}
//# sourceMappingURL=markView.js.map