"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PopupView;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weDesign = require("@ali/we-design");

var _weIcon = require("@ali/we-icon");

var _simplePopup = _interopRequireDefault(require("./simplePopup"));

var _useResizer = _interopRequireDefault(require("../utils/useResizer"));

var _actions = require("../actions");

var _getSiblings = _interopRequireDefault(require("../queries/getSiblings"));

var _blockEvent = _interopRequireDefault(require("../utils/blockEvent"));

var _common = require("../common");

var _pendingIDs = require("../common/pendingIDs");

var _requestIdle = _interopRequireDefault(require("../utils/requestIdle"));

var _constants = require("../constants");

const _createElement = /*#__PURE__*/_react.default.createElement;
const EXTRA_HEIGHT_OFFSET = -14;
const TRANSITION_WAIT_TIME = 1000;
const POPUP_TRANSITION = 'border 0.25s, box-shadow 0.25s, top 0.25s';
const ToolbarArrowUpNormal = /*#__PURE__*/(0, _styledComponents.default)(_weIcon.ToolbarArrowDownNormal)(["transform:rotate(180deg);"]);

const PopupWrapper = /*#__PURE__*/_styledComponents.default.div(["position:absolute;-webkit-font-smoothing:antialiased;width:calc(100% - 28px);left:0px;margin:14px;background-color:white;border:1px solid ", ";border-radius:8px;overflow:hidden;cursor:", ";box-sizing:border-box;box-shadow:", ";&:focus{outline:none;}&:hover{border:1px solid ", ";box-shadow:0px 0px 1px rgba(0,0,0,0.24),0px 8px 24px rgba(0,0,0,0.16);}& article[data-cangjie-content]{padding:0;}"], props => props.isActive ? '#0089FF' : 'rgba(126, 134, 142, 0.16)', props => props.isActive ? 'initial' : 'pointer', props => props.isActive ? '0px 0px 1px rgba(0, 0, 0, 0.24), 0px 8px 24px rgba(0, 0, 0, 0.16)' : 'none', props => props.isActive ? '#0089FF' : 'white');

const TitleRef = /*#__PURE__*/_styledComponents.default.div(["width:2px;height:14px;background-color:#171a1d;opacity:0.24;margin-right:4px;"]);

const Title = /*#__PURE__*/_styledComponents.default.div(["flex:1;padding-right:8px;font-size:14px;height:26px;line-height:26px;opacity:0.6;color:#171a1d;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;"]);

const ArrowWrapper = /*#__PURE__*/_styledComponents.default.div(["opacity:", ";height:24px;border:1px solid rgba(126,134,142,0.16);border-radius:4px;display:flex;flex-direction:row;align-items:center;"], props => props.visible ? '1' : '0');

const TitleWrapper = /*#__PURE__*/_styledComponents.default.div(["padding:12px 16px;display:flex;flex-direction:row;align-items:center;&:hover ", "{opacity:1;}"], ArrowWrapper);

const IconWrapper = /*#__PURE__*/_styledComponents.default.div(["height:24px;width:24px;flex:1;display:flex;cursor:pointer;flex-direction:row;justify-content:center;align-items:center;color:", ";&:hover{background:", ";}& > span{font-size:20px;}"], props => props.isDisabled ? 'rgba(23, 26, 29, 0.24)' : '#171A1D', props => props.isDisabled ? 'transparent' : 'rgba(126, 134, 142, 0.12)');

const Spliter = /*#__PURE__*/_styledComponents.default.div(["width:1px;height:22px;background:rgba(126,134,142,0.16);"]);

const Panel = /*#__PURE__*/_styledComponents.default.div([""]);

var _ref = /*#__PURE__*/_createElement(TitleRef, null);

var _ref2 = /*#__PURE__*/_createElement(ToolbarArrowUpNormal, null);

var _ref3 = /*#__PURE__*/_createElement(Spliter, null);

var _ref4 = /*#__PURE__*/_createElement(_weIcon.ToolbarArrowDownNormal, null);

var _ref5 = /*#__PURE__*/_createElement(Spliter, null);

var _ref6 = /*#__PURE__*/_createElement(_weIcon.CompleteNormal, null);

const Popup = /*#__PURE__*/_react.default.memo(props => {
  const {
    controller,
    contentId,
    configs,
    isNew,
    isAutoFocus,
    isActive,
    summary,
    position,
    onAdd,
    onDelete,
    onCancel
  } = props;
  const {
    sendComment,
    getCommentList,
    renderPopup,
    closeComment
  } = configs || {};
  const {
    prev,
    next
  } = controller.query(_getSiblings.default);
  let children;
  const canCloseComment = !!closeComment;
  const readonlyPosition = controller.readOnly ? position : undefined;
  const renderProps = {
    contentId,
    isNew,
    isAutoFocus,
    isActive,
    summary,
    readonlyPosition,
    onAdd,
    onDelete,
    onCancel: isNew ? onCancel : undefined
  };

  const navigateToPrev = _react.default.useCallback(event => {
    if (prev) {
      const heightPercent = _constants.SCROLL_HEIGHT_PERCENT_SIDEBAR;
      controller.run('onAction', (0, _actions.showComment)(prev, {
        heightPercent
      }));
    }

    (0, _blockEvent.default)(event);
  }, [controller, prev]);

  const navigateToNext = _react.default.useCallback(event => {
    if (next) {
      const heightPercent = _constants.SCROLL_HEIGHT_PERCENT_SIDEBAR;
      controller.run('onAction', (0, _actions.showComment)(next, {
        heightPercent
      }));
    }

    (0, _blockEvent.default)(event);
  }, [controller, next]);

  const navigateToClose = _react.default.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    closeComment && closeComment(contentId);
  }, [closeComment, contentId]);

  if (renderPopup) {
    children = renderPopup(renderProps);
  } else {
    children = /*#__PURE__*/_createElement(_simplePopup.default, (0, _extends2.default)({
      sendComment: sendComment,
      getCommentList: getCommentList
    }, renderProps));
  }

  return /*#__PURE__*/_createElement(_react.default.Fragment, null, /*#__PURE__*/_createElement(TitleWrapper, null, _ref, /*#__PURE__*/_createElement(Title, null, summary), !isNew && /*#__PURE__*/_createElement(ArrowWrapper, {
    visible: isActive
  }, isActive && /*#__PURE__*/_createElement(_weDesign.Tooltip, {
    overlayStyle: _common.tipStyle,
    title: configs?.locale?.prev || 'Prev',
    placement: "top"
  }, /*#__PURE__*/_createElement(IconWrapper, {
    isDisabled: !prev,
    onClick: navigateToPrev
  }, _ref2)), isActive && !canCloseComment && _ref3, isActive && /*#__PURE__*/_createElement(_weDesign.Tooltip, {
    overlayStyle: _common.tipStyle,
    title: configs?.locale?.next || 'Next',
    placement: "top"
  }, /*#__PURE__*/_createElement(IconWrapper, {
    isDisabled: !next,
    onClick: navigateToNext
  }, _ref4)), canCloseComment && /*#__PURE__*/_createElement(_react.default.Fragment, null, isActive && _ref5, /*#__PURE__*/_createElement(_weDesign.Tooltip, {
    overlayStyle: _common.tipStyle,
    title: configs?.locale?.closeComment || 'Resolve and hide comments',
    placement: "top"
  }, /*#__PURE__*/_createElement(IconWrapper, {
    "data-comment-noblur": true,
    "data-comment-no-capture": true,
    onMouseDown: navigateToClose
  }, _ref6))))), /*#__PURE__*/_createElement(Panel, null, children));
});

function PopupView(props) {
  const {
    controller,
    top,
    prio,
    popHeights,
    updatePosition,
    isAutoFocus,
    contentId,
    configs,
    isNew,
    isActive,
    summary,
    position,
    onAdd,
    onDelete,
    onCancel
  } = props;

  const ref = _react.default.useRef(null);

  const zoom = (0, _everCangjie.useZoom)();

  const handleMouseDown = _react.default.useCallback(event => {
    const {
      target
    } = event;
    const noCaptureAttr = 'data-comment-no-capture';

    if (target instanceof Element && !target.closest('.ant-popconfirm') && !target.closest('.popup-overlay-wrap') && !target.hasAttribute(noCaptureAttr) && !target.closest(`[${noCaptureAttr}]`)) {
      controller.run('onAction', (0, _actions.showComment)(contentId));
    }
  }, [contentId, controller]);

  const topPx = top + EXTRA_HEIGHT_OFFSET;
  const style = {
    top: `${topPx / zoom}px`
  };

  const [isVisible, setIsVisible] = _react.default.useState(isActive);

  _react.default.useEffect(() => {
    if (isVisible) {
      return undefined;
    }

    const callback = () => setIsVisible(true);

    const p = {
      prio,
      callback
    };
    (0, _pendingIDs.enqueue)(p);
    return () => {
      (0, _pendingIDs.cancelQueue)(p);
    };
  }, [isVisible, prio]);

  (0, _useResizer.default)({
    ref,
    updator: updatePosition,
    popHeights,
    contentId,
    isVisible,
    zoom
  });

  _react.default.useEffect(() => {
    if (!ref.current) {
      return undefined;
    }

    const domNode = ref.current;

    const prettier = () => {
      domNode.style.transition = POPUP_TRANSITION;
    };

    const {
      cancel
    } = (0, _requestIdle.default)(prettier);
    return cancel;
  }, [isVisible]);

  if (!isVisible) {
    return null;
  }

  if (!contentId) {
    return null;
  }

  return /*#__PURE__*/_createElement(PopupWrapper, {
    ref: ref,
    tabIndex: 0,
    style: style,
    "data-comment-popup": true,
    "data-comment-id": contentId,
    "data-comment-active": isActive,
    onMouseDownCapture: handleMouseDown,
    isActive: isActive
  }, /*#__PURE__*/_createElement(Popup, {
    controller: controller,
    contentId: contentId,
    isAutoFocus: isAutoFocus,
    configs: configs,
    isNew: isNew,
    isActive: isActive,
    summary: summary || configs?.locale?.comment || '',
    position: position,
    onAdd: onAdd,
    onDelete: onDelete,
    onCancel: onCancel
  }));
}
//# sourceMappingURL=popupView.js.map