"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ExternalSidebar;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everCangjie = require("@ali/4ever-cangjie");

var _queries = require("../queries");

var _marks = require("../models/marks");

var _findCommentPostion = require("../utils/findCommentPostion");

var _isAutoFocus = _interopRequireDefault(require("../queries/isAutoFocus"));

var _actions = require("../actions");

var _useDocSize = require("../hooks/useDocSize");

const _createElement = /*#__PURE__*/React.createElement;

const EmptyDiv = /*#__PURE__*/_styledComponents.default.div(["width:0;height:0;display:none;"]);

function ExternalSidebar(props) {
  const ref = React.useRef(null);
  const {
    controller,
    configs = {},
    isCommentLoaded
  } = props;
  const onAdd = React.useCallback(() => {
    controller.run('onAction', (0, _actions.addComment)());
  }, [controller]);
  const onCancel = React.useCallback(() => {
    controller.run('onAction', (0, _actions.cancelComment)());
  }, [controller]);
  const container = (0, _everCangjie.useZoomContainer)();
  const {
    document,
    decorations
  } = controller.value;
  const activeContentId = (0, _queries.getActiveId)(controller);
  const updatePosition = React.useCallback(() => {
    const {
      onSidebarInfoUpdated
    } = configs;

    if (!onSidebarInfoUpdated) {
      return;
    }

    const commentDecorations = decorations.filter(d => {
      return _marks.ViewMark.isViewMark(d.mark);
    });
    const rowItems = commentDecorations.length ? (0, _findCommentPostion.findCommentPostion)({
      controller,
      decorations: commentDecorations,
      selection: undefined,
      container: container || undefined,
      isFromPopup: true
    }) : [];
    const autoFocus = (0, _isAutoFocus.default)(controller); // 生成 card 基本信息（这里可能有覆盖的场景）

    const cards = rowItems.reduce((array, item) => {
      item.decorations.forEach(decoration => {
        const {
          top,
          clientTop
        } = item;
        const mark = decoration.mark;
        const {
          isNew,
          contentId,
          summary,
          position,
          count
        } = mark.data;
        const isActive = contentId === activeContentId;
        const card = {
          top,
          clientTop,
          isNew: Boolean(isNew),
          isAutoFocus: Boolean(autoFocus && isActive),
          isActive,
          count,
          summary,
          position,
          contentId
        };
        array.push(card);
      });
      return array;
    }, []);
    onSidebarInfoUpdated({
      cards,
      onAdd,
      onCancel,
      isCommentLoaded
    });
  }, [decorations, controller, document, container, activeContentId, isCommentLoaded]);
  const prevDocument = usePrevious(document);
  React.useEffect(() => {
    /**
     * 非 document 变化，比如 decorations 变了，立刻刷新
     */
    if (!prevDocument || prevDocument === document) {
      updatePosition();
      return undefined;
    }
    /**
     * document 变化，延迟刷新
     *
     * 一些场景比如（折叠标题），有动画延迟，等一会儿再更新，不然会闪烁
     */


    const timer = setTimeout(() => {
      updatePosition();
    }, EFFECT_DEBOUNCE_TIME);
    return () => {
      clearTimeout(timer);
    };
  }, [updatePosition]);
  (0, _useDocSize.useDocSize)(ref, updatePosition);
  return /*#__PURE__*/_createElement(EmptyDiv, {
    ref: ref
  });
}

const EFFECT_DEBOUNCE_TIME = 300;

function usePrevious(value) {
  const ref = React.useRef();
  React.useEffect(() => {
    ref.current = value;
  });
  return ref.current;
}
//# sourceMappingURL=ExternalSidebar.js.map