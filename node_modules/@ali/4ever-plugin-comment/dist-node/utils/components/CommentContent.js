"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _lodash = require("lodash");

var _commentSidebar = _interopRequireDefault(require("./commentSidebar"));

var _isSidebarVisible = _interopRequireDefault(require("../queries/isSidebarVisible"));

var _CommentBottomBar = _interopRequireDefault(require("./CommentBottomBar"));

var _getActiveId = _interopRequireDefault(require("../queries/getActiveId"));

var _actions = require("../actions");

var _marks = require("../models/marks");

var _CommentInlinePanel = _interopRequireDefault(require("./CommentInlinePanel"));

var _useContentIds = _interopRequireDefault(require("../utils/useContentIds"));

var _ExternalSidebar = _interopRequireDefault(require("./ExternalSidebar"));

/* eslint-disable react-hooks/exhaustive-deps */
const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  IS_MOBILE,
  IS_IPAD
} = _everCangjie.environment;
const IS_PHONE = IS_MOBILE && !IS_IPAD;
const DEBOUNCE_LOAD_TIME = 500;
const INIT_SCROLL_DELAY = 700;
let initNavigate = false;

const navigateToComment = (controller, onCommentInvalid) => async (subId, options) => {
  const subObjectId = typeof subId === 'function' ? await subId() : subId;

  if (typeof subId === 'function' && !subObjectId) {
    return;
  }

  const validInPage = controller.value.decorations.some(d => _marks.ViewMark.isViewMark(d.mark) && d.mark.data.contentId === subObjectId);

  const _ = validInPage || options?.ignoreCheck ? controller.run('onAction', (0, _actions.showComment)(subObjectId, options)) : onCommentInvalid(subObjectId);
};

function CommentContent(props) {
  const {
    controller,
    configs
  } = props;
  const showInline = Boolean(configs?.showInline);
  const {
    document
  } = controller.value;
  const contentId = (0, _getActiveId.default)(controller);

  const isInited = _react.default.useRef(false);

  const isCommentLoaded = _react.default.useRef(false);

  (0, _everCangjie.useZoom)();
  const showBottomBar = IS_PHONE && contentId && !showInline;
  const isDisabled = Boolean(configs?.isDisabled && configs.isDisabled());
  const {
    fetchCachedComment,
    reloadComments,
    isDocLoaded,
    enableAutoBlur,
    contentIds,
    onContentMounted,
    onContentUnMounted,
    onSidebarInfoUpdated,
    disableBottomBar,
    withCustomApiAdaptor
  } = configs || {};
  const isLoaded = isDocLoaded ? isDocLoaded() : true;
  const showSideBar = !showInline && !onSidebarInfoUpdated && !IS_PHONE && (0, _isSidebarVisible.default)(controller);
  const loadKey = controller.readOnly ? document : isLoaded;
  (0, _useContentIds.default)(controller, isCommentLoaded.current, contentIds);

  _react.default.useEffect(() => {
    if (isDisabled) {
      // timeout 出于体验考虑，下一个 tick 再更新，避免频繁闪烁
      setTimeout(() => {
        const {
          decorations
        } = controller.value;
        controller.setDecorations(decorations.filter(d => !_marks.ViewMark.isViewMark(d.mark)));
        const sideBarStatus = !IS_PHONE && (0, _isSidebarVisible.default)(controller);

        if (sideBarStatus && configs?.onDisabled) {
          configs.onDisabled();
        }
      });
    } else if (isInited.current) {
      controller.setData({ ...controller.value.data
      });
    }

    isInited.current = true;
  }, [controller, isDisabled]);

  const loadCachedComment = _react.default.useCallback((0, _lodash.debounce)(async () => {
    try {
      if (!fetchCachedComment || !loadKey) {
        return;
      }

      const result = await fetchCachedComment();

      if (!result || !Array.isArray(result)) {
        return;
      }

      isCommentLoaded.current = true;
      controller.run('onAction', (0, _actions.setComments)([...result]));
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error(error);
    }
  }, DEBOUNCE_LOAD_TIME, {
    leading: true,
    trailing: true
  }), [controller, fetchCachedComment, loadKey, isDisabled]);

  _react.default.useEffect(() => {
    if (!isCommentLoaded.current) {
      return undefined;
    }

    const {
      showCommentOnLoaded,
      onDisabled
    } = configs || {};
    const {
      subObjectId,
      onCommentInvalid = () => {},
      navigateRef
    } = showCommentOnLoaded || {};
    const navigate = navigateToComment(controller, onCommentInvalid);

    if (isDisabled) {
      onDisabled && navigateRef && navigateRef(onDisabled);
    } else {
      navigateRef && navigateRef(navigate);
    }

    if (!subObjectId || initNavigate) {
      return undefined;
    }

    initNavigate = true; // timeout 出于体验考虑，下一个 tick 再更新，避免频繁闪烁

    const timer = window.setTimeout(() => {
      navigate(subObjectId);
      controller.flush();
    }, INIT_SCROLL_DELAY);
    return () => {
      window.clearTimeout(timer);
    };
  }, [controller, isCommentLoaded.current]);

  const curentCount = _react.default.useMemo(() => {
    const texts = document.getTexts();
    const allContentIds = [];
    texts.forEach(text => {
      text.leaves.forEach(leave => {
        leave.marks.forEach(m => {
          if (_marks.DataMark.isDataMark(m)) {
            if (!allContentIds.some(id => id === m.data.contentId)) {
              allContentIds.push(m.data.contentId);
            }
          }
        });
      });
    });
    return allContentIds.length;
  }, [document]); // 使用 customApi, 必须放到 reloadComments 之前


  _react.default.useEffect(() => {
    withCustomApiAdaptor && withCustomApiAdaptor();
  }, [withCustomApiAdaptor]);

  _react.default.useEffect(() => {
    reloadComments && reloadComments();
  }, [reloadComments, curentCount]);

  _react.default.useEffect(() => {
    onContentMounted && onContentMounted();
    return () => {
      onContentUnMounted && onContentUnMounted();
    };
  }, []);

  _react.default.useEffect(() => {
    loadCachedComment();
  }, [loadCachedComment]);

  _react.default.useEffect(() => {
    if (configs?.onCommentsChangeRef) {
      configs.onCommentsChangeRef(loadCachedComment);
    }

    return () => {
      if (configs?.onCommentsChangeRef) {
        configs.onCommentsChangeRef(null);
      }
    };
  }, [loadCachedComment, configs]);

  const handleAdd = _react.default.useCallback(() => {
    controller.run('onAction', (0, _actions.addComment)());
  }, [controller]);

  const handleDelete = _react.default.useCallback(() => {// controller.run('onAction', addComment());
  }, [controller]);

  const commonsProps = {
    onAdd: handleAdd,
    onDelete: handleDelete,
    configs
  };
  return /*#__PURE__*/_createElement(_react.default.Fragment, null, showSideBar && !isDisabled && /*#__PURE__*/_createElement(_commentSidebar.default, (0, _extends2.default)({
    enableAutoBlur: enableAutoBlur
  }, commonsProps, {
    controller: controller
  })), !!onSidebarInfoUpdated && !!configs && /*#__PURE__*/_createElement(_ExternalSidebar.default, {
    configs: configs,
    isCommentLoaded: isCommentLoaded.current,
    controller: controller
  }), showInline && contentId && /*#__PURE__*/_createElement(_CommentInlinePanel.default, (0, _extends2.default)({}, commonsProps, {
    contentId: contentId
  })), showBottomBar && !isDisabled && !disableBottomBar && /*#__PURE__*/_createElement(_CommentBottomBar.default, (0, _extends2.default)({}, commonsProps, {
    contentId: contentId
  })));
}

var _default = CommentContent;
exports.default = _default;
//# sourceMappingURL=CommentContent.js.map