"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CommentSideBar;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weIcon = require("@ali/we-icon");

var _marks = require("../models/marks");

var _popupView = _interopRequireDefault(require("../components/popupView"));

var _findCommentPostion = require("../utils/findCommentPostion");

var _getActiveId = _interopRequireDefault(require("../queries/getActiveId"));

var _actions = require("../actions");

var _constants = require("../utils/constants");

var _isAutoFocus = _interopRequireDefault(require("../queries/isAutoFocus"));

var _getSiblings = _interopRequireDefault(require("../queries/getSiblings"));

var _useAutoBlur = _interopRequireDefault(require("../hooks/useAutoBlur"));

var _useDocSize = require("../hooks/useDocSize");

var _constants2 = require("../constants");

const _createElement = /*#__PURE__*/_react.default.createElement;
const ATTR_SIDEBAR = 'data-comment-sidebar';
const EFFECT_DEBOUNCE_TIME = 300;
const {
  IS_IPAD
} = _everCangjie.environment;

const RootWrapper = /*#__PURE__*/_styledComponents.default.div(["position:absolute;right:", "px;top:-6px;z-index:1;height:100%;width:", "px;&:focus{outline:none;}", ""], IS_IPAD ? 0 : -_constants.SIDEBAR_WIDTH, _constants.SIDEBAR_WIDTH, IS_IPAD ? `
    background: white;
    @media (max-width: 700px) {
      box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.24), 0px 8px 24px rgba(0, 0, 0, 0.16);
    }
    @media (min-width: 700px) {
      border-left: 1px solid rgba(126, 134, 142, 0.16);
    }
  ` : ''); // iPad 下有 h5 top bar，这里加上 64px 的偏移


const TopBarWrapper = /*#__PURE__*/_styledComponents.default.div(["z-index:1;position:fixed;top:", ";right:0;width:", "px;font-size:16px;color:#111F2C;font-weight:500;"], IS_IPAD ? '64px' : 0, _constants.SIDEBAR_WIDTH);

const TopBarInner = /*#__PURE__*/_styledComponents.default.div(["margin-left:16px;display:flex;justify-content:space-between;align-items:center;"]);

const TopBarLine = /*#__PURE__*/_styledComponents.default.div(["margin:0 16px;border-bottom:1px solid rgba(126,134,142,0.16);"]);

const CloseIconWrapper = /*#__PURE__*/_styledComponents.default.div(["font-size:0;font-weight:normal;width:52px;height:52px;display:flex;justify-content:center;align-items:center;color:rgba(23,26,29,0.6);cursor:pointer;"]);

const SKIP_BLUR_PROPS = ['data-comment-popup', 'data-panel-emoji', 'data-comment-noblur', 'data-comment-no-capture'];
const SKIP_BLUR_SELECOTR = ['.mention-suggestion-list', '.ant-popconfirm', '.popup-overlay-wrap'];

function skipBlur(target) {
  return SKIP_BLUR_PROPS.some(s => target.hasAttribute(s) || target.closest(`[${s}]`));
}

function adjustHeight(rawCards, activeContentId) {
  const focusedIndex = rawCards.findIndex(card => card.contentId === activeContentId);
  const cards = rawCards.slice(0);

  function updateHeight(card, prev, next) {
    if (prev && prev.top + prev.height + _constants.CARD_SPACE > card.top) {
      return { ...card,
        top: prev.top + prev.height + _constants.CARD_SPACE
      };
    }

    if (next && card.top + card.height + _constants.CARD_SPACE > next.top) {
      return { ...card,
        top: next.top - _constants.CARD_SPACE - card.height
      };
    }

    return card;
  }

  for (let i = 1; i < focusedIndex; i++) {
    const card = updateHeight(cards[i], cards[i - 1], undefined);
    cards[i] = card;
  } // eslint-disable-next-line for-direction


  for (let i = focusedIndex - 1; i >= 0; i--) {
    const card = updateHeight(cards[i], undefined, cards[i + 1]);
    cards[i] = card;
  }

  for (let i = focusedIndex + 1; i < cards.length; i++) {
    const card = updateHeight(cards[i], cards[i - 1], undefined);
    cards[i] = card;
  }

  return cards;
}

function usePrevious(value) {
  const ref = _react.default.useRef();

  _react.default.useEffect(() => {
    ref.current = value;
  });

  return ref.current;
}

var _ref = /*#__PURE__*/_createElement(TopBarLine, null);

function CommentSideBar(props) {
  const {
    configs,
    onAdd,
    onDelete,
    enableAutoBlur,
    controller
  } = props;
  const container = (0, _everCangjie.useZoomContainer)();

  const ref = _react.default.useRef(null);

  const {
    document,
    decorations
  } = controller.value;
  const {
    hideSidebarTab,
    sidebarRef
  } = configs || {};

  const [cards, setCards] = _react.default.useState([]);

  const popHeights = _react.default.useMemo(() => ({}), []);

  const zoom = (0, _everCangjie.useZoom)();
  /**
   * 在渲染出 DOM 后，遍历 DOM 位置，获取对应的 offset
   */

  const updatePosition = _react.default.useCallback(() => {
    const commentDecorations = decorations.filter(d => {
      return _marks.ViewMark.isViewMark(d.mark);
    });
    const rowItems = (0, _findCommentPostion.findCommentPostion)({
      controller,
      decorations: commentDecorations,
      selection: undefined,
      container: container || undefined,
      isFromPopup: true
    });
    const activeContentId = (0, _getActiveId.default)(controller);
    const autoFocus = (0, _isAutoFocus.default)(controller);
    const {
      top: barTop
    } = ref.current?.getBoundingClientRect() || {}; // eslint-disable-next-line react/no-find-dom-node

    const {
      top: docTop
    } = _everCangjie.domUtils.findDOMNode(document.key).getBoundingClientRect();

    const verticalOffset = barTop ? barTop - docTop : 0; // 生成 card 基本信息（这里可能有覆盖的场景）

    let newCards = rowItems.reduce((array, item) => {
      item.decorations.forEach(decoration => {
        const {
          top
        } = item;
        const mark = decoration.mark;
        const {
          isNew,
          contentId,
          summary,
          position,
          count
        } = mark.data;
        const isActive = contentId === activeContentId;
        const defaultHeight = isNew ? 121 : 180;
        const height = popHeights[contentId] || cards?.find(vc => vc.contentId === contentId)?.height || defaultHeight;
        const card = {
          top: Math.round(top - verticalOffset),
          isNew: Boolean(isNew),
          prio: 0,
          isAutoFocus: Boolean(autoFocus && isActive),
          isActive,
          height: height * zoom,
          count,
          summary,
          position,
          contentId
        };
        array.push(card);
      });
      return array;
    }, []);
    newCards = adjustHeight(newCards, activeContentId);
    const activeIndex = newCards.findIndex(c => c.contentId === activeContentId);
    newCards.forEach((c, i) => {
      c.prio = Math.abs(i - activeIndex);
    });
    setCards(newCards);
  }, [decorations, controller, document, container, zoom]);

  const prevDocument = usePrevious(document);

  _react.default.useEffect(() => {
    /**
     * 非 document 变化，比如 decorations 变了，立刻刷新
     */
    if (prevDocument === document) {
      updatePosition();
      return undefined;
    }
    /**
     * document 变化，延迟刷新
     *
     * 一些场景比如（折叠标题），有动画延迟，等一会儿再更新，不然会闪烁
     * 首次打开也要延迟刷新，因为侧边栏展开可能导致图片等元素缩放, 高度发生变化
     */


    const timer = setTimeout(() => {
      updatePosition();
    }, EFFECT_DEBOUNCE_TIME);
    return () => {
      clearTimeout(timer);
    };
  }, [updatePosition]);

  (0, _useAutoBlur.default)(controller, enableAutoBlur);
  (0, _useDocSize.useDocSize)(ref, updatePosition);

  _react.default.useLayoutEffect(() => {
    sidebarRef && sidebarRef(ref);
    return () => {
      sidebarRef && sidebarRef(undefined);
    };
  }, [sidebarRef, ref]);

  _react.default.useEffect(() => {
    const activeContentId = (0, _getActiveId.default)(controller);

    if (!activeContentId) {
      return undefined;
    } // timeout 出于体验考虑，下一个 tick 再更新，避免频繁闪烁


    const showTimer = setTimeout(() => {
      controller.run('onAction', (0, _actions.showComment)(activeContentId, {
        alwaysScroll: true
      }));
    }, 0);
    return () => {
      clearTimeout(showTimer);
    };
  }, [controller]);

  _react.default.useEffect(() => {
    window.document.body.setAttribute(ATTR_SIDEBAR, '');
    return () => {
      window.document.body.removeAttribute(ATTR_SIDEBAR);
    };
  }, []);

  _react.default.useEffect(() => {
    const clicker = event => {
      const {
        target
      } = event;

      if (target instanceof Element && !skipBlur(target) && !SKIP_BLUR_SELECOTR.some(s => target.closest(s))) {
        controller.run('onAction', (0, _actions.showComment)(undefined));
      }
    };

    window.document.addEventListener('mousedown', clicker, {
      capture: true
    });
    return () => {
      window.document.removeEventListener('mousedown', clicker, {
        capture: true
      });
    };
  }, [controller]);

  const hideActive = _react.default.useCallback(() => {
    controller.run('onAction', (0, _actions.hideComment)());
    controller.run('onAction', (0, _actions.cancelComment)());
  }, [controller]);

  const handleCloseClick = _react.default.useCallback(() => {
    controller.run('onAction', (0, _actions.setSidebarVisible)(false));
    hideActive();
  }, [controller, hideActive]);

  const handleCancelClick = _react.default.useCallback(() => {
    controller.run('onAction', (0, _actions.cancelComment)());
  }, [controller]);

  const handleKeydown = _react.default.useCallback(event => {
    if (event.nativeEvent.isComposing) return;

    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
      event.preventDefault();
      const {
        next,
        prev
      } = controller.query(_getSiblings.default);
      const target = event.key === 'ArrowDown' ? next : prev;

      if (target) {
        const heightPercent = _constants2.SCROLL_HEIGHT_PERCENT_SIDEBAR;
        controller.run('onAction', (0, _actions.showComment)(target, {
          heightPercent
        }));
      }
    }
  }, [controller]);

  const backgroundColor = configs?.sidebarBackgroundColor && configs.sidebarBackgroundColor();
  const topBarStyle = {};

  if (backgroundColor) {
    topBarStyle.background = backgroundColor;
  }

  const count = cards.reduce((t, c) => t + c.count, 0);
  const titleStr = `${configs?.locale?.inlineComment || 'Comment'} (${count})`;
  return /*#__PURE__*/_createElement(RootWrapper, {
    "data-inline-comment-sidebar": true,
    tabIndex: 0,
    ref: ref,
    "data-cache-ignore": true,
    onKeyDown: handleKeydown
  }, !hideSidebarTab && /*#__PURE__*/_createElement(TopBarWrapper, {
    style: topBarStyle
  }, /*#__PURE__*/_createElement(TopBarInner, null, /*#__PURE__*/_createElement("div", null, titleStr), /*#__PURE__*/_createElement(CloseIconWrapper, {
    onClick: handleCloseClick
  }, /*#__PURE__*/_createElement(_weIcon.CloseBigNormal, {
    style: {
      fontSize: '20px'
    }
  }))), _ref), cards.map(card => {
    return /*#__PURE__*/_createElement(_popupView.default, (0, _extends2.default)({}, card, {
      controller: controller,
      onAdd: onAdd,
      popHeights: popHeights,
      onCancel: handleCancelClick,
      onDelete: onDelete,
      key: card.contentId,
      configs: configs,
      updatePosition: updatePosition
    }));
  }));
}
//# sourceMappingURL=commentSidebar.js.map