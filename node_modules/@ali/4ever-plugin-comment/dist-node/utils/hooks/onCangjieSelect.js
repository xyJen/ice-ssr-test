"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _marks = require("../models/marks");

var _isSidebarVisible = _interopRequireDefault(require("../queries/isSidebarVisible"));

var _getActiveId = _interopRequireDefault(require("../queries/getActiveId"));

var _showComment = _interopRequireDefault(require("../actions/showComment"));

var _actions = require("../actions");

var _default = configs => {
  return function onCangjieSelect(event, controller, next) {
    if (configs?.isDisabled && configs.isDisabled()) {
      return next();
    }

    const isSidebarOpen = (0, _isSidebarVisible.default)(controller);

    if (!isSidebarOpen || controller.readOnly) {
      return next();
    }

    const {
      selection
    } = event.detail;
    const {
      anchor: point
    } = selection;
    const {
      blurPopupOnClick,
      showInline
    } = configs || {};

    if (selection.isCollapsed && point.isTextPoint()) {
      const {
        decorations,
        document
      } = controller.value;
      const dec = decorations.find(d => {
        if (_marks.ViewMark.isViewMark(d.mark)) {
          const {
            start,
            end
          } = d;

          if (start.key === point.key && end.key === point.key) {
            // same text
            if (start.offset === end.offset) {
              // void
              return true;
            }

            return point.offset > start.offset && point.offset <= end.offset;
          } else if (start.key === point.key) {
            return point.offset > start.offset;
          } else if (end.key === point.key) {
            return point.offset <= end.offset;
          }

          const range = _everCangjie.Selection.create({
            anchor: start,
            focus: end
          });

          return document.isNodeInRange(point.key, range);
        }

        return false;
      });

      if (dec && !showInline) {
        const mark = dec.mark;
        const {
          readOnly
        } = controller;
        (0, _showComment.default)(controller, mark.data.contentId, {
          skipAutoFocus: !readOnly
        });
      } else if ((0, _getActiveId.default)(controller)) {
        const autoBlur = !blurPopupOnClick || blurPopupOnClick() === true;

        if (autoBlur) {
          (0, _showComment.default)(controller, undefined);
        }

        if (autoBlur && showInline) {
          controller.run('onAction', (0, _actions.cancelComment)());
        }
      }
    }

    return next();
  };
};

exports.default = _default;
//# sourceMappingURL=onCangjieSelect.js.map