{"version":3,"sources":["../../../../src/utils/hooks/onKeyDown.ts"],"names":["isCommentHotkey","isBackspaceHotKey","isEnterHotKey","filterCommentMarkInNewLine","controller","focusBlock","selection","value","isCollapsed","text","Text","isText","nodes","leave","leaves","length","mark","marks","find","m","DataMark","isDataMark","newLeave","set","filter","newText","key","offset","newSelection","Selection","create","anchor","TextPoint","focus","command","Commands","replaceNodeByKey","select","configs","onKeyDown","event","next","isDisabled","res","hoverCapture","trigger","preventDefault","run","type","ACTION_COMMENT_CLICK"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Controller,\n  Commands,\n  Text,\n  Selection,\n  TextPoint,\n} from '@ali/4ever-cangjie';\nimport { isKeyHotkey } from 'is-hotkey';\nimport { ACTION_COMMENT_CLICK } from '../actions';\nimport { CommentPluginConfigs } from '../types';\nimport { DataMark } from '../models/marks';\nimport hoverCapture from '../utils/hoverCapture';\n\nconst isCommentHotkey = isKeyHotkey('mod+shift+m');\nconst isBackspaceHotKey = isKeyHotkey('backspace');\nconst isEnterHotKey = isKeyHotkey('enter');\n\n/**\n * 在新行中，过滤掉评论标记。\n *\n * 目前 mark 和底层耦合很深，无法在新行、输入时，过滤掉 mark。这里在插件手动过滤。\n */\nfunction filterCommentMarkInNewLine(controller: Controller) {\n  const { focusBlock, selection } = controller.value;\n  // 用户按 Enter 键后，我们在一个新行\n  if (\n    selection.isCollapsed &&\n    focusBlock &&\n    !focusBlock.text &&\n    Text.isText(focusBlock.nodes[0])\n  ) {\n    const text = focusBlock.nodes[0] as Text;\n    const leave = text.leaves.length === 1 ? text.leaves[0] : null;\n    const mark = leave?.marks.find((m) => DataMark.isDataMark(m));\n    if (leave && mark) {\n      const newLeave = leave.set(\n        'marks',\n        leave.marks.filter((m) => m !== mark),\n      );\n      const newText = text.set('leaves', [newLeave]);\n      const { key } = newText;\n      const offset = 0;\n      const newSelection = Selection.create({\n        anchor: TextPoint.create({ key, offset }),\n        focus: TextPoint.create({ key, offset }),\n      });\n      controller\n        .command(Commands.replaceNodeByKey, text.key, newText)\n        .command(Commands.select, newSelection);\n    }\n  }\n}\n\nexport default (configs: CommentPluginConfigs | undefined) => {\n  return function onKeyDown(\n    event: React.KeyboardEvent,\n    controller: Controller,\n    next: () => void,\n  ) {\n    if (configs?.isDisabled && configs.isDisabled()) {\n      return next();\n    }\n    const { value } = controller;\n    const { selection } = value;\n\n    if (selection.isCollapsed && isEnterHotKey(event)) {\n      const res = next();\n      filterCommentMarkInNewLine(controller);\n      return res;\n    }\n\n    if (isBackspaceHotKey(event)) {\n      hoverCapture.trigger();\n    }\n\n    if (selection.isCollapsed || !isCommentHotkey(event)) return next();\n\n    event.preventDefault();\n    controller.run('onAction', {\n      type: ACTION_COMMENT_CLICK,\n    });\n  };\n};\n"],"file":"onKeyDown.js"}