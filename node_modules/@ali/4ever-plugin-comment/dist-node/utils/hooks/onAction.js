"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../actions");

var _addNewComment = _interopRequireDefault(require("../actions/addNewComment"));

var _cancelComment = _interopRequireDefault(require("../actions/cancelComment"));

var _newCommentClick = _interopRequireDefault(require("../actions/newCommentClick"));

var _showComment = _interopRequireDefault(require("../actions/showComment"));

var _setActiveId = _interopRequireDefault(require("../commands/setActiveId"));

var _setComments = _interopRequireDefault(require("../commands/setComments"));

var _setSidebarVisible = _interopRequireDefault(require("../commands/setSidebarVisible"));

var _default = configs => {
  return function onAction(action, controller, next) {
    const {
      type
    } = action;
    /**
     * 缩放模式下，也要允许设置侧边栏是否可见。不然设置无效，返回后，会出现重叠。
     */

    if (type === _actions.ACTION_COMMENT_SET_SIDE_BAR) {
      if (!action.payload) {
        throw new Error('ACTION_COMMENT_SET_SIDE_BAR: action.payload is empty');
      }

      const {
        visible
      } = action.payload;
      (0, _setSidebarVisible.default)(controller, visible);
      const {
        onSidebarVisibleChange
      } = configs || {};
      onSidebarVisibleChange && onSidebarVisibleChange(visible);
      return next();
    }

    if (configs?.isDisabled && configs.isDisabled()) {
      if (type === _actions.ACTION_COMMENT_CLICK) {
        configs.onDisabled && configs.onDisabled();
      }

      return next();
    }

    if (type === _actions.ACTION_COMMENT_CLICK) {
      controller.run('onCangjieBlur');
      (0, _newCommentClick.default)(controller, configs?.locale?.comment);
    } else if (type === _actions.ACTION_COMMENT_ADD) {
      (0, _addNewComment.default)(controller);
    } else if (type === _actions.ACTION_COMMENT_SHOW) {
      (0, _showComment.default)(controller, action.payload?.contentId, action.payload?.options, configs);
    } else if (type === _actions.ACTION_COMMENT_CANCEL) {
      (0, _cancelComment.default)(controller);
    } else if (type === _actions.ACTION_COMMENT_SET_ID) {
      if (!action.payload) {
        throw new Error('ACTION_COMMENT_SET_ID: action.payload is empty');
      }

      const {
        contentId,
        isAutoFocus
      } = action.payload;
      (0, _setActiveId.default)(controller, contentId, isAutoFocus);
      const {
        onActiveIdChange
      } = configs || {};
      onActiveIdChange && onActiveIdChange(contentId);
    } else if (type === _actions.ACTION_COMMENT_SET_COMMENTS) {
      if (!action.payload) {
        throw new Error('ACTION_COMMENT_SET_COMMENTS: action.payload is empty');
      }

      const {
        comments
      } = action.payload;
      (0, _setComments.default)(controller, comments);
    } else if (type === _actions.ACTION_COMMENT_SELECTED_NODES) {
      const {
        selectedNodes
      } = action.payload;
      const firstNode = selectedNodes[0];
      const lastNode = selectedNodes[selectedNodes.length - 1];

      const anchor = _everCangjie.Point.createFromParams(firstNode.key, 'before');

      const focus = _everCangjie.Point.createFromParams(lastNode.key, 'after');

      const newSelection = _everCangjie.Selection.create({
        anchor,
        focus
      });

      controller.command(_everCangjie.Commands.select, newSelection);
      controller.run('onAction', {
        type: _actions.ACTION_COMMENT_CLICK
      });
      controller.dispatch('cancelSelectNode');
      return controller;
    }

    return next();
  };
};

exports.default = _default;
//# sourceMappingURL=onAction.js.map