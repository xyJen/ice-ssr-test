{"version":3,"sources":["../../../../src/utils/hooks/useDocSize.ts"],"names":["DEBOUNCE_TIME","docs","WeakMap","CONTENT","constants","Selector","content","EDITABLE","editable","handleSizeChange","doc","doUpdate","isWidthChanged","isHeightChanged","callbacks","forEach","c","error","console","fastdom","measure","docNode","prevHeight","prevWidth","width","height","getBoundingClientRect","w","h","Math","round","setTimeout","onElementRemoved","element","onDetachCallback","observer","MutationObserver","isDetached","el","closest","disconnect","observe","childList","subtree","addObserver","node","callback","contentNode","parentElement","querySelector","undefined","get","push","newObj","changeCallback","ResizeObserver","delete","set","removeObserver","filter","useDocSize","nodeRef","React","useEffect","current"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { debounce } from 'lodash-es';\nimport fastdom from 'fastdom';\nimport { constants } from '@ali/4ever-cangjie';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst DEBOUNCE_TIME = 300;\n\ntype Callback = (isWidthChanged: boolean, isHeightChanged: boolean) => void;\n\ntype DocObj = {\n  callbacks: Callback[];\n  docNode: HTMLElement;\n  prevWidth?: number;\n  prevHeight?: number;\n};\n\nconst docs = new WeakMap<HTMLElement, DocObj>();\nconst CONTENT = `[${constants.Selector.content}]`;\nconst EDITABLE = `[${constants.Selector.editable}]`;\n\n/**\n * size change, 触发 callback\n */\nconst handleSizeChange = (doc: DocObj) => () => {\n  const doUpdate = (isWidthChanged: boolean, isHeightChanged: boolean) => {\n    const { callbacks } = doc;\n    try {\n      // 移动端由于键盘弹起，可能会导致迅速的切换。\n      // 这里 callback 使用了 findDOMNode，报错的话需要 ignore 掉\n      callbacks.forEach((c) => c(isWidthChanged, isHeightChanged));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  fastdom.measure(() => {\n    const { docNode, prevHeight, prevWidth } = doc;\n    const { width, height } = docNode.getBoundingClientRect();\n    const [w, h] = [Math.round(width), Math.round(height)];\n    const isWidthChanged = prevWidth !== w;\n    const isHeightChanged = prevHeight !== h;\n    if (isWidthChanged || isHeightChanged) {\n      // timeout 出于性能考虑，避免再 measure 期间调用更新\n      setTimeout(() => {\n        doUpdate(isWidthChanged, isHeightChanged);\n      }, 0);\n    }\n    doc.prevWidth = w;\n    doc.prevHeight = h;\n  });\n};\n\n/**\n * DOM 元素被移除的回调\n */\nfunction onElementRemoved(element: HTMLElement, onDetachCallback: Function) {\n  const observer = new MutationObserver(\n    debounce(() => {\n      const isDetached = (el: HTMLElement) => !el.closest('html');\n      if (isDetached(element)) {\n        observer.disconnect();\n        onDetachCallback();\n      }\n    }, DEBOUNCE_TIME),\n  );\n  observer.observe(element, {\n    childList: true,\n    subtree: true,\n  });\n}\n\nfunction addObserver(node: HTMLElement | null, callback: Callback) {\n  const contentNode =\n    node?.closest(CONTENT) || node?.parentElement?.querySelector(CONTENT);\n  const docNode = contentNode?.querySelector(EDITABLE) as\n    | HTMLElement\n    | undefined;\n  if (!docNode) {\n    return undefined;\n  }\n  const doc = docs.get(docNode);\n  if (doc) {\n    doc.callbacks.push(callback);\n    return doc;\n  }\n  const callbacks = [callback];\n  const newObj: DocObj = {\n    callbacks,\n    docNode,\n  };\n  const changeCallback = handleSizeChange(newObj);\n  const observer = new ResizeObserver(debounce(changeCallback, DEBOUNCE_TIME));\n  observer.observe(docNode);\n  onElementRemoved(docNode, () => {\n    newObj.callbacks = [];\n    observer.disconnect();\n    docs.delete(docNode);\n  });\n  changeCallback();\n  docs.set(docNode, newObj);\n  return newObj;\n}\n\nfunction removeObserver(doc: DocObj | undefined, callback: Function) {\n  if (!doc) {\n    return;\n  }\n  doc.callbacks = doc.callbacks.filter((c) => c !== callback);\n}\n\nexport function useDocSize(\n  nodeRef: React.RefObject<HTMLElement>,\n  callback: Callback,\n) {\n  React.useEffect(() => {\n    const doc = addObserver(nodeRef.current, callback);\n    return () => {\n      removeObserver(doc, callback);\n    };\n  }, [callback, nodeRef]);\n}\n"],"file":"useDocSize.js"}