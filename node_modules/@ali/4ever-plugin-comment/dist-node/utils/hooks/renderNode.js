"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderNode;

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _marks = require("../models/marks");

var _markView = require("../components/markView");

var _commentView = _interopRequireDefault(require("../components/commentView"));

const _createElement = /*#__PURE__*/_react.default.createElement;

function createRenderNode(configs) {
  return function renderNode(props, controller, next) {
    /**
     * 这里不要乱 return，不然会导致整个页面刷新，全量调用 renderNode。
     */
    if (configs?.isGrayed && !configs.isGrayed()) {
      return next();
    }

    const {
      document
    } = controller.value;
    const {
      node
    } = props;
    const isDisabled = Boolean(configs?.isDisabled && configs.isDisabled());

    if (!node.isElement()) {
      // texts
      return next();
    }

    const isVoid = controller.query('isVoid', node);

    if (!isVoid && !node.isBlock()) {
      // non-void inlines
      return next();
    }

    const isLeafBlock = _everCangjie.Block.isLeafBlock(node);

    const isEdgeSelectable = controller.query('isEdgeSelectable', node);
    const firstChild = node.nodes[0];
    const hasVoidWrapper = (isVoid || node.type === 'code') && firstChild?.isText();
    const voidMark = hasVoidWrapper && firstChild?.isText() ? firstChild.marks.find(_marks.ViewMark.isViewMark) : undefined; // add text marks for void elements

    let children;

    if (hasVoidWrapper) {
      children = /*#__PURE__*/_createElement(_markView.VoidMarkView, {
        isDisabled: isDisabled,
        isBlock: node.isBlock(),
        nodeKey: node.key,
        mark: voidMark,
        nextElements: next()
      });
    } else {
      children = next();
    }

    if (!isLeafBlock && !isEdgeSelectable) {
      return children;
    } // eslint-disable-next-line react-hooks/rules-of-hooks


    const isInsideTable = document.getClosest(node.key, parent => _everCangjie.Block.isBlock(parent) && parent.type === 'table');

    if (isInsideTable) {
      return children;
    }

    const closestSelectable = document.getClosestSelectableBlock(node.key, controller);

    if (closestSelectable && closestSelectable.key !== node.key) {
      return children;
    } // right side icon


    const block = node;
    return /*#__PURE__*/_createElement(_commentView.default, {
      block: block
    }, children);
  };
}
//# sourceMappingURL=renderNode.js.map