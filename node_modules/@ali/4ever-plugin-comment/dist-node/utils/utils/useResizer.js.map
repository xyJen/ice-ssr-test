{"version":3,"sources":["../../../../src/utils/utils/useResizer.ts"],"names":["useResizer","params","ref","updator","popHeights","contentId","isVisible","zoom","updateRef","React","useRef","current","useEffect","undefined","node","height","getBoundingClientRect","Math","round","callback","requestAnimationFrame","newHeight","observer","ResizeObserver","observe","unobserve"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAWA;AACA;AACA;AACe,SAASA,UAAT,CAAoBC,MAApB,EAAoC;AACjD,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA,SAA5B;AAAuCC,IAAAA,SAAvC;AAAkDC,IAAAA;AAAlD,MAA2DN,MAAjE;AACA,QAAMO,SAAS,GAAGC,KAAK,CAACC,MAAN,EAAlB;AACAF,EAAAA,SAAS,CAACG,OAAV,GAAoBR,OAApB;AACAM,EAAAA,KAAK,CAACG,SAAN,CAAgB,MAAM;AACpB,WAAO,MAAM;AACXJ,MAAAA,SAAS,CAACG,OAAV,GAAoBE,SAApB;AACD,KAFD;AAGD,GAJD,EAIG,EAJH;AAKAJ,EAAAA,KAAK,CAACG,SAAN,CAAgB,MAAM;AACpB,UAAME,IAAI,GAAGZ,GAAG,CAACS,OAAjB;;AACA,QAAI,CAACG,IAAD,IAAS,CAACR,SAAd,EAAyB;AACvB,aAAOO,SAAP;AACD;;AACD,UAAM;AAAEE,MAAAA;AAAF,QAAaD,IAAI,CAACE,qBAAL,EAAnB,CALoB,CAMpB;;AACAZ,IAAAA,UAAU,CAACC,SAAD,CAAV,GAAwBY,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAxB;;AACA,UAAMI,QAAQ,GAAG,MAAM;AACrBC,MAAAA,qBAAqB,CAAC,MAAM;AAC1B,YAAI;AAAEL,UAAAA,MAAM,EAAEM;AAAV,YAAwBP,IAAI,CAACE,qBAAL,EAA5B;AACAK,QAAAA,SAAS,GAAGJ,IAAI,CAACC,KAAL,CAAWG,SAAS,GAAGd,IAAvB,CAAZ;;AACA,YAAIc,SAAS,KAAKjB,UAAU,CAACC,SAAD,CAA5B,EAAyC;AACvC;AACAD,UAAAA,UAAU,CAACC,SAAD,CAAV,GAAwBgB,SAAxB;AACAb,UAAAA,SAAS,CAACG,OAAV,IAAqBH,SAAS,CAACG,OAAV,EAArB;AACD;AACF,OARoB,CAArB;AASD,KAVD;;AAWA,UAAMW,QAAQ,GAAG,IAAIC,+BAAJ,CAAmBJ,QAAnB,CAAjB;AACAG,IAAAA,QAAQ,CAACE,OAAT,CAAiBV,IAAjB;AACA,WAAO,MAAM;AACXQ,MAAAA,QAAQ,CAACG,SAAT,CAAmBX,IAAnB;AACD,KAFD;AAGD,GAxBD,EAwBG,CAACR,SAAD,EAAYE,SAAZ,EAAuBN,GAAvB,EAA4BE,UAA5B,EAAwCC,SAAxC,EAAmDE,IAAnD,CAxBH;AAyBD","sourcesContent":["import * as React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\ninterface Params {\n  ref: React.RefObject<Element>;\n  updator: Function;\n  popHeights: Record<string, number>;\n  contentId: string;\n  isVisible: boolean;\n  zoom: number;\n}\n\n/**\n * 在 ref 尺寸变动时，调用 updator\n */\nexport default function useResizer(params: Params) {\n  const { ref, updator, popHeights, contentId, isVisible, zoom } = params;\n  const updateRef = React.useRef<Function>();\n  updateRef.current = updator;\n  React.useEffect(() => {\n    return () => {\n      updateRef.current = undefined;\n    };\n  }, []);\n  React.useEffect(() => {\n    const node = ref.current;\n    if (!node || !isVisible) {\n      return undefined;\n    }\n    const { height } = node.getBoundingClientRect();\n    // eslint-disable-next-line no-param-reassign\n    popHeights[contentId] = Math.round(height);\n    const callback = () => {\n      requestAnimationFrame(() => {\n        let { height: newHeight } = node.getBoundingClientRect();\n        newHeight = Math.round(newHeight / zoom);\n        if (newHeight !== popHeights[contentId]) {\n          // eslint-disable-next-line no-param-reassign\n          popHeights[contentId] = newHeight;\n          updateRef.current && updateRef.current();\n        }\n      });\n    };\n    const observer = new ResizeObserver(callback);\n    observer.observe(node);\n    return () => {\n      observer.unobserve(node);\n    };\n  }, [isVisible, updateRef, ref, popHeights, contentId, zoom]);\n}\n"],"file":"useResizer.js"}