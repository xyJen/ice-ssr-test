"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useResizer;

var React = _interopRequireWildcard(require("react"));

var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));

/**
 * 在 ref 尺寸变动时，调用 updator
 */
function useResizer(params) {
  const {
    ref,
    updator,
    popHeights,
    contentId,
    isVisible,
    zoom
  } = params;
  const updateRef = React.useRef();
  updateRef.current = updator;
  React.useEffect(() => {
    return () => {
      updateRef.current = undefined;
    };
  }, []);
  React.useEffect(() => {
    const node = ref.current;

    if (!node || !isVisible) {
      return undefined;
    }

    const {
      height
    } = node.getBoundingClientRect(); // eslint-disable-next-line no-param-reassign

    popHeights[contentId] = Math.round(height);

    const callback = () => {
      requestAnimationFrame(() => {
        let {
          height: newHeight
        } = node.getBoundingClientRect();
        newHeight = Math.round(newHeight / zoom);

        if (newHeight !== popHeights[contentId]) {
          // eslint-disable-next-line no-param-reassign
          popHeights[contentId] = newHeight;
          updateRef.current && updateRef.current();
        }
      });
    };

    const observer = new _resizeObserverPolyfill.default(callback);
    observer.observe(node);
    return () => {
      observer.unobserve(node);
    };
  }, [isVisible, updateRef, ref, popHeights, contentId, zoom]);
}
//# sourceMappingURL=useResizer.js.map