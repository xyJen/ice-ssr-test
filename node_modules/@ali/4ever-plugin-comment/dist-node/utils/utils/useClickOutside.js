"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useClickOutsideRef = useClickOutsideRef;
exports.useClickOutsideAttr = useClickOutsideAttr;
exports.useClickInsideAttr = useClickInsideAttr;

var _react = _interopRequireDefault(require("react"));

function useClickOutsideRef(callback, ref) {
  _react.default.useEffect(() => {
    const handler = event => {
      const {
        target
      } = event;

      if (target instanceof Node && ref.current && ref.current !== target && !ref.current.contains(target)) {
        callback();
      }
    };

    window.document.addEventListener('mousedown', handler, {
      capture: true
    });
    return () => {
      window.document.removeEventListener('mousedown', handler, {
        capture: true
      });
    };
  }, [callback, ref]);
}

function useClickOutsideAttr(callback, attr) {
  _react.default.useEffect(() => {
    const selector = `[${attr}]`;

    const handler = event => {
      let {
        target
      } = event;

      if (target instanceof Node && target instanceof Element === false) {
        target = target.parentElement;
      }

      if (target instanceof Element && !target.closest(selector) && !target.hasAttribute(attr)) {
        callback();
      }
    };

    window.document.addEventListener('mousedown', handler, {
      capture: true
    });
    return () => {
      window.document.removeEventListener('mousedown', handler, {
        capture: true
      });
    };
  }, [attr, callback]);
}

function useClickInsideAttr(callback, attr, excludeAttr) {
  _react.default.useEffect(() => {
    const selector = `[${attr}]`;
    const excludeSelector = `[${excludeAttr}]`;

    const handler = event => {
      let {
        target
      } = event;

      if (target instanceof Node && target instanceof Element === false) {
        target = target.parentElement;
      }

      if (target instanceof Element && !target.closest(excludeSelector)) {
        if (target.closest(selector) || target.hasAttribute(attr)) callback();
      }
    };

    window.document.addEventListener('mousedown', handler, {
      capture: true
    });
    return () => {
      window.document.removeEventListener('mousedown', handler, {
        capture: true
      });
    };
  }, [attr, callback, excludeAttr]);
}
//# sourceMappingURL=useClickOutside.js.map