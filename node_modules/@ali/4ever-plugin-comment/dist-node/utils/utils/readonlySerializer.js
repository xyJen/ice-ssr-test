"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serialize = serialize;
exports.deserialize = deserialize;

var _everCangjie = require("@ali/4ever-cangjie");

var _marks = require("../models/marks");

var _hashCode = _interopRequireDefault(require("./hashCode"));

function serialize(start, end, document) {
  const startPath = document.getPath(start.key);
  const endPath = document.getPath(end.key);

  if (!startPath || !endPath) {
    return undefined;
  }

  const selection = _everCangjie.Selection.create({
    anchor: start,
    focus: end
  });

  const {
    text: summary
  } = document.getFragmentAtRange(selection);
  const hashStr = (0, _hashCode.default)(summary);
  const startPathStr = startPath.join(',');
  const endPathStr = endPath.join(',');
  const position = `${startPathStr}-${start.offset}-${endPathStr}-${end.offset}-${summary.length}-${hashStr}`;
  return {
    position,
    summary
  };
}

function deserialize(comment, document) {
  const {
    contentId,
    position,
    count
  } = comment;
  const [pathStartStr, offsetStartStr, pathEndStr, offsetEndStr, lengthStr, hashStr] = position.split('-');

  if (!pathStartStr || !offsetStartStr || !pathEndStr || !offsetEndStr || !lengthStr || !hashStr) {
    return undefined;
  }

  const pathStart = pathStartStr.split(',').map(p => parseInt(p, 10));
  const pathEnd = pathEndStr.split(',').map(p => parseInt(p, 10));
  const offsetStart = parseInt(offsetStartStr, 10);
  const offsetEnd = parseInt(offsetEndStr, 10);
  const length = parseInt(lengthStr, 10);
  const startNode = document.getNodeByPath(pathStart);
  const endNode = document.getNodeByPath(pathEnd);

  if (!startNode || !endNode) {
    return undefined;
  }

  const anchor = _everCangjie.TextPoint.create({
    key: startNode.key,
    offset: offsetStart
  });

  const focus = _everCangjie.TextPoint.create({
    key: endNode.key,
    offset: offsetEnd
  });

  const selection = _everCangjie.Selection.create({
    anchor,
    focus
  });

  const {
    text
  } = document.getFragmentAtRange(selection);
  const newHash = (0, _hashCode.default)(text);

  if (newHash !== hashStr || length !== text.length) {
    return undefined;
  }

  const mark = _marks.ViewMark.create({
    contentId,
    count,
    summary: text,
    isReadonly: true
  });

  const decoration = _everCangjie.Decoration.create({
    start: anchor,
    end: focus,
    mark
  });

  return decoration;
}
//# sourceMappingURL=readonlySerializer.js.map