"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findCommentPostion = findCommentPostion;

var _everCangjie = require("@ali/4ever-cangjie");

var _getRowTopFromPoint = require("../commentPosition/getRowTopFromPoint");

var _positionCache = require("../commentPosition/positionCache");

var _marks = require("../models/marks");

var _queries = require("../queries");

/* eslint-disable no-console */

/**
 * 对比两个 Point 在 document 的出现位置
 */
function comparePoint(lp, rp, document) {
  const edgeToOffset = p => p.edge === _everCangjie.EdgePoint.BEFORE ? -1 : Number.MAX_SAFE_INTEGER;

  if (lp.key === rp.key) {
    const lOffset = lp.isEdgePoint() ? edgeToOffset(lp) : lp.offset;
    const rOffset = rp.isEdgePoint() ? edgeToOffset(rp) : rp.offset;
    return lOffset - rOffset;
  }

  const lPath = document.getPath(lp.key);
  const rPath = document.getPath(rp.key);

  if (!lPath || !rPath) {
    return 0;
  }

  return _everCangjie.Path.compare(lPath, rPath) || 0;
}

/**
 * 获取评论框的位置。返回相对于当前 block 的位置，和屏幕绝对位置
 */
function findCommentPostion({
  controller,
  decorations,
  selection,
  container = window,
  isFromPopup
}) {
  const {
    document
  } = controller.value;
  const {
    key: docKey
  } = document;

  const docNode = _everCangjie.domUtils.findDOMNodeSafely(docKey, container);

  if (!docNode) {
    return [];
  }

  const {
    top: docTop,
    width: docWidth,
    height: docHeight
  } = docNode.getBoundingClientRect();
  const allRows = (0, _positionCache.validateCaches)({
    controller,
    docWidth,
    container,
    docTop,
    docHeight
  }); // 初始化分行对象

  const result = []; // 如果当前已经有评论了，就 skip 掉（处理 block void 的 collapse 场景）

  let skipSelection = false;

  if (selection?.isCollapsed) {
    const {
      decorations: allDecs
    } = controller.value;
    const {
      anchor
    } = selection.convertToTextPoints(document);
    skipSelection = allDecs.some(d => {
      return _marks.ViewMark.isViewMark(d.mark) && comparePoint(anchor, d.start, document) >= 0 && comparePoint(anchor, d.end, document) <= 0;
    });
  }

  const commonParams = {
    allRows,
    controller,
    container,
    isFromPopup,
    docTop
  };

  if (!skipSelection && selection && (0, _queries.canComment)(controller, selection)) {
    const item = (0, _getRowTopFromPoint.getRowTopFromPoint)({ ...commonParams,
      paramPoint: selection?.focus
    });

    if (item) {
      const [rowKey, top] = item;
      const clientTop = top + docTop;
      const newRowItem = {
        rowKey,
        top,
        clientTop,
        selection,
        decorations: []
      };
      result.push(newRowItem);
    }
  } // 处理 decorations


  decorations.forEach(decoration => {
    const item = (0, _getRowTopFromPoint.getRowTopFromPoint)({ ...commonParams,
      paramPoint: decoration.start
    });

    if (!item) {
      return;
    }

    const [rowKey, top] = item;
    const existingRow = result.find(r => r.rowKey === rowKey);

    if (!existingRow) {
      const clientTop = top + docTop;
      const newRowItem = {
        rowKey,
        top,
        clientTop,
        decorations: [decoration]
      };
      result.push(newRowItem);
    } else {
      existingRow.top = top;
      existingRow.decorations.push(decoration);
    }
  });
  return result;
}
//# sourceMappingURL=findCommentPostion.js.map