"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = newCommentClick;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../actions");

var _marks = require("../models/marks");

var _hashCode = _interopRequireDefault(require("../utils/hashCode"));

var _readonlySerializer = require("../utils/readonlySerializer");

function newCommentClick(controller, defaultSummary) {
  const {
    document,
    decorations
  } = controller.value;
  let {
    selection
  } = controller.value;
  const hash = (0, _hashCode.default)(`${Math.random()}`);
  const hash2 = (0, _hashCode.default)(`${new Date().getTime()}`);
  const contentId = `${hash}${hash2}`;
  /**
   * 场景优化 - 表格（单元格）
   */

  const {
    start: spoint,
    end: epoint
  } = selection.sort(document);
  const [startCell, endCell] = [spoint, epoint].map(({
    key
  }) => document.getClosest(key, node => node.isElement() && node.type === 'table-cell'));

  if (startCell && endCell && startCell !== endCell) {
    selection = selection.moveStartToStartOfNode(startCell, controller).moveEndToEndOfNode(endCell, controller);
  }
  /**
   * 场景优化 - 代码块
   */


  const node = document.getNode(selection.anchor.key);

  if (selection.isCollapsed && node?.isElement() && node.type === 'code') {
    selection = selection.moveToRangeOfNode(node, controller);
  }
  /**
   * 用户体验优化：如果是光标状态，尝试选中最近的一个 block 进行评论
   */


  let finalSelection = selection;
  let shouldExtendSelection = false; // 只有 collapse 状态，并且不在 void 元素内，才会触发此优化

  if (selection.isCollapsed) {
    const parent = document.getParent(selection.anchor.key);
    const isParentVoid = parent && controller.query('isVoid', parent);
    shouldExtendSelection = !isParentVoid;
  }

  if (shouldExtendSelection) {
    const parentBlock = document.getClosestBlock(selection.anchor.key);
    finalSelection = parentBlock ? selection.moveAnchorToStartOfNode(parentBlock, controller).moveFocusToEndOfNode(parentBlock, controller) : selection;
  }

  const {
    start,
    end
  } = finalSelection.convertToTextPoints(document);
  const result = (0, _readonlySerializer.serialize)(start, end, document);
  const summary = result?.summary || defaultSummary || '';
  const position = result?.position;

  const mark = _marks.ViewMark.create({
    contentId,
    isNew: true,
    count: 0,
    summary,
    position
  });

  const dec = _everCangjie.Decoration.create({
    start,
    end,
    mark
  });

  controller.run('onAction', (0, _actions.setActiveId)(contentId, true));
  controller.setDecorations([...decorations.filter(d => !(_marks.ViewMark.isViewMark(d.mark) && d.mark.data.isNew)), dec]).command(_everCangjie.Commands.moveToFocus);
}
//# sourceMappingURL=newCommentClick.js.map