import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

var _TriggerWrap, _OnIdlePlaceholder;

import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SelectOption, SelectOptionGroup, ToolbarLineHeightNormal } from '@ali/we-design';
import { useTranslate } from '@ali/we-util';
import { OptionWrap, TriggerWrap } from "./styled";
import useControlledValue from "../../../hooks/useControlledValue";
import { IconSelectDefaultProps } from "../../../utils/defaultProps";
import IconSelect from "../../../common/iconSelect";
import OnIdle, { OnIdlePlaceholder } from "../../../common/onIdle";
export var LINE_HEIGHT_DEFAULT_VALUES = [1, 1.15, 1.5, 2, 2.5, 3];

var LineHeightSelect = function LineHeightSelect(props) {
  var lineHeightValues = props.lineHeightValues,
      disabled = props.disabled,
      onChange = props.onChange,
      onCustomize = props.onCustomize,
      title = props.title,
      titles = props.titles,
      locale = props.locale,
      restProps = _objectWithoutPropertiesLoose(props, ["lineHeightValues", "disabled", "onChange", "onCustomize", "title", "titles", "locale"]);

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var t = useTranslate(locale);
  var handleChange = useCallback(function (e) {
    if (e !== -1) {
      if (onChange) {
        onChange(e);
      }

      setValue(e);
    } else if (onCustomize) {
      onCustomize();
    }
  }, [onChange, setValue, onCustomize]); // 该组件的trigger区域只显示Icon

  var renderTrigger = useCallback(function () {
    return _TriggerWrap || (_TriggerWrap = /*#__PURE__*/_createElement(TriggerWrap, null, /*#__PURE__*/_createElement(ToolbarLineHeightNormal, null)));
  }, []);
  var renderOptions = useMemo(function () {
    return (lineHeightValues || LINE_HEIGHT_DEFAULT_VALUES).map(function (lineHeight) {
      return /*#__PURE__*/_createElement(SelectOption, {
        value: lineHeight,
        key: "" + lineHeight,
        testid: "" + lineHeight,
        title: titles[lineHeight]
      }, /*#__PURE__*/_createElement(OptionWrap, null, /*#__PURE__*/_createElement("span", null, lineHeight)));
    });
  }, [lineHeightValues, titles]);
  return /*#__PURE__*/_createElement(IconSelect, _extends({
    value: value,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    disabled: disabled,
    testid: "LineHeightSelect",
    title: title
  }, restProps), /*#__PURE__*/_createElement(React.Fragment, null), /*#__PURE__*/_createElement(OnIdle, {
    placeholder: _OnIdlePlaceholder || (_OnIdlePlaceholder = /*#__PURE__*/_createElement(OnIdlePlaceholder, null))
  }, /*#__PURE__*/_createElement(SelectOptionGroup, null, renderOptions), typeof onCustomize === 'function' && /*#__PURE__*/_createElement(SelectOption, {
    value: -1,
    key: "selectLineHeight"
  }, /*#__PURE__*/_createElement(OptionWrap, {
    className: "pseudo-option"
  }, /*#__PURE__*/_createElement("span", null, t('we_toolbar_line_height_select_customized_line_height'))))));
};

LineHeightSelect.defaultProps = _extends({
  defaultValue: 1,
  titles: {}
}, IconSelectDefaultProps);
export default LineHeightSelect;