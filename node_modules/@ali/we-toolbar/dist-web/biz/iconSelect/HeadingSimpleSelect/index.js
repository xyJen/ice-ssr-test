import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useMemo, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { QuoteNormal } from '@ali/we-design';
import { DocToolbarTextNormal, DocToolbarH1Normal, DocToolbarH2Normal, DocToolbarH3Normal, DocToolbarH4Normal } from '@ali/we-icon';
import { useTranslate } from '@ali/we-util';
import useControlledValue from "../../../hooks/useControlledValue";
import { IconSelectDefaultProps } from "../../../utils/defaultProps";
import IconSelect from "../../../common/iconSelect";
import { TriggerWrap, OptionWrap, IconSelectWrap } from "./styled";
export var HeadingSimpleSelect = function HeadingSimpleSelect(props) {
  var locale = props.locale,
      onChange = props.onChange,
      disabledKeys = props.disabledKeys,
      title = props.title,
      active = props.active,
      showTitle = props.showTitle,
      size = props.size,
      getContainer = props.getContainer,
      role = props.role,
      restProps = _objectWithoutPropertiesLoose(props, ["locale", "onChange", "disabledKeys", "title", "active", "showTitle", "size", "getContainer", "role"]);

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var t = useTranslate(locale); // 标题的选项

  var options = useMemo(function () {
    return [{
      title: t('we_toolbar_font_family_ts_Title_1'),
      value: 'heading-1',
      Icon: DocToolbarH1Normal
    }, {
      title: t('we_toolbar_font_family_ts_Title_2'),
      value: 'heading-2',
      Icon: DocToolbarH2Normal
    }, {
      title: t('we_toolbar_font_family_ts_Title_3'),
      value: 'heading-3',
      Icon: DocToolbarH3Normal
    }, {
      title: t('we_toolbar_font_family_ts_Title_4'),
      value: 'heading-4',
      Icon: DocToolbarH4Normal
    }, {
      title: t('we_toolbar_reference_simple'),
      value: 'blockquote',
      Icon: QuoteNormal
    }, {
      title: t('we_toolbar_font_family_ts_Body'),
      value: 'paragraph',
      Icon: DocToolbarTextNormal
    }];
  }, [t]); // 该组件的trigger区域只显示Icon

  var renderTrigger = useCallback(function (align) {
    var index = options.findIndex(function (option) {
      return option.value === align;
    });
    var currentOption = options[index];
    return /*#__PURE__*/_createElement(TriggerWrap, {
      style: {
        minWidth: 16
      }
    }, currentOption && /*#__PURE__*/_createElement(currentOption.Icon, null));
  }, [options]);
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [onChange, setValue]);
  return /*#__PURE__*/_createElement(IconSelectWrap, null, /*#__PURE__*/_createElement(IconSelect, _extends({}, restProps, {
    value: value,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    testid: "HeadingSimpleSelect",
    title: title,
    tooltip: t('we_toolbar_heading_selection'),
    active: active,
    size: size,
    showTitle: showTitle,
    disabledKeys: disabledKeys,
    role: role
  }), options.map(function (option) {
    // 设计变更 - 不要前面的勾，被选中的对象在列表中高亮显示
    return /*#__PURE__*/_createElement(OptionWrap, {
      value: option.value,
      key: option.value,
      testid: option.value,
      disabled: disabledKeys == null ? void 0 : disabledKeys.includes(option.value),
      title: {
        title: option.title,
        placement: 'left'
      },
      "data-role": option.value
    }, /*#__PURE__*/_createElement(option.Icon, {
      className: "icon",
      style: {
        fontSize: 20
      }
    }));
  })));
};
HeadingSimpleSelect.defaultProps = _extends({
  defaultValue: 'paragraph'
}, IconSelectDefaultProps);