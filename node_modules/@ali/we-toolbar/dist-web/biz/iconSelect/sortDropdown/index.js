import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import styled from 'styled-components';
import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SelectOption, useControlledValue, withTheme, ToolbarTableAscendingNormal, ToolbarTableDescendingNormal, ToolbarConstituencyAscendingNormal, ToolbarConstituencyDescendingNormal } from '@ali/we-design';
import { useTranslate } from '@ali/we-util';
import IconSelect from "../../../common/iconSelect";
var OptionWrap = withTheme(styled.div(["display:flex;align-items:center;span{margin-right:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.ui.marginSmall;
}));
export var SORT_ORDERS = ['ascSheet', 'descSheet', 'ascRange', 'descRange'];
export var SortDropdown = /*#__PURE__*/React.memo(function (props) {
  var onSortChange = props.onSortChange,
      disabled = props.disabled,
      locale = props.locale,
      restProps = _objectWithoutPropertiesLoose(props, ["onSortChange", "disabled", "locale"]);

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var t = useTranslate(locale);
  var options = useMemo(function () {
    return [{
      title: t('we_toolbar_table_ascending'),
      value: 'ascSheet',
      Icon: ToolbarTableAscendingNormal
    }, {
      title: t('we_toolbar_table_descending'),
      value: 'descSheet',
      Icon: ToolbarTableDescendingNormal
    }, {
      title: t('we_toolbar_constituency_ascending'),
      value: 'ascRange',
      Icon: ToolbarConstituencyAscendingNormal
    }, {
      title: t('we_toolbar_constituency_descending'),
      value: 'descRange',
      Icon: ToolbarConstituencyDescendingNormal
    }];
  }, [t]); // 该组件的trigger区域显示Icon+文字

  var renderTrigger = useCallback(function (selectedView) {
    var index = options.findIndex(function (option) {
      return option.value === selectedView;
    });
    var currentOption = options[index] || options[0];
    return /*#__PURE__*/_createElement(React.Fragment, null, currentOption && /*#__PURE__*/_createElement(currentOption.Icon, null));
  }, [options]);
  var handleChange = useCallback(function (e) {
    setValue(e);
    onSortChange && onSortChange(e);
  }, [onSortChange]);
  return /*#__PURE__*/_createElement(IconSelect, _extends({
    disabled: disabled,
    value: value,
    title: t('we_toolbar_sort'),
    renderTrigger: renderTrigger,
    selectable: false,
    onChange: handleChange
  }, restProps), options.map(function (option) {
    return /*#__PURE__*/_createElement(SelectOption, {
      value: option.value,
      key: option.value
    }, /*#__PURE__*/_createElement(OptionWrap, null, /*#__PURE__*/_createElement(option.Icon, {
      className: "icon"
    }), /*#__PURE__*/_createElement("span", null, option.title)));
  }));
});