import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useMemo, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SelectOption, ToolbarVerticalAlignBottomNormal, ToolbarVerticalAlignMiddleNormal, ToolbarVerticalAlignTopNormal } from '@ali/we-design';
import { useTranslate } from '@ali/we-util';
import { OptionWrap, TriggerWrap } from "./styled";
import useControlledValue from "../../../hooks/useControlledValue";
import { IconSelectDefaultProps } from "../../../utils/defaultProps";
import IconSelect from "../../../common/iconSelect";

var VerticalAlignSelect = function VerticalAlignSelect(props) {
  var locale = props.locale,
      onChange = props.onChange,
      disabledKeys = props.disabledKeys,
      title = props.title,
      titles = props.titles,
      restProps = _objectWithoutPropertiesLoose(props, ["locale", "onChange", "disabledKeys", "title", "titles"]);

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var t = useTranslate(locale); // 垂直对齐的选项

  var options = useMemo(function () {
    return [{
      title: t('we_toolbar_vertical_align_top'),
      value: 'top',
      Icon: ToolbarVerticalAlignTopNormal
    }, {
      title: t('we_toolbar_vertical_align_middle'),
      value: 'middle',
      Icon: ToolbarVerticalAlignMiddleNormal
    }, {
      title: t('we_toolbar_vertical_align_bottom'),
      value: 'bottom',
      Icon: ToolbarVerticalAlignBottomNormal
    }];
  }, [t]); // 该组件的trigger区域只显示Icon

  var renderTrigger = useCallback(function (align) {
    var index = options.findIndex(function (option) {
      return option.value === align;
    });
    var currentOption = options[index];
    return /*#__PURE__*/_createElement(TriggerWrap, {
      style: {
        minWidth: 16
      }
    }, currentOption && /*#__PURE__*/_createElement(currentOption.Icon, null));
  }, [options]);
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [setValue, onChange]);
  return /*#__PURE__*/_createElement(IconSelect, _extends({
    value: value,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    title: title,
    testid: "VerticalAlignSelect"
  }, restProps), options.map(function (option) {
    return /*#__PURE__*/_createElement(SelectOption, {
      value: option.value,
      key: option.value,
      disabled: disabledKeys == null ? void 0 : disabledKeys.includes(option.value),
      title: titles[option.value]
    }, /*#__PURE__*/_createElement(OptionWrap, null, /*#__PURE__*/_createElement(option.Icon, {
      className: "icon"
    }), /*#__PURE__*/_createElement("span", null, option.title)));
  }));
};

VerticalAlignSelect.defaultProps = _extends({
  defaultValue: 'top',
  titles: {}
}, IconSelectDefaultProps);
export default VerticalAlignSelect;