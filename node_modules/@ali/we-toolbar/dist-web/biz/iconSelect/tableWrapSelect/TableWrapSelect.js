import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useMemo, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SelectOption, ToolbarAutoWrapNormal, ToolbarOverflowNormal, ToolbarLineClipNormal } from '@ali/we-design';
import { useTranslate } from '@ali/we-util';
import useControlledValue from "../../../hooks/useControlledValue";
import { IconSelectDefaultProps } from "../../../utils/defaultProps";
import IconSelect from "../../../common/iconSelect";
import { OptionWrap, TriggerWrap } from "./styled";

var TableWrapSelect = function TableWrapSelect(props) {
  var locale = props.locale,
      style = props.style,
      onChange = props.onChange,
      title = props.title,
      titles = props.titles,
      showTitle = props.showTitle,
      disabled = props.disabled,
      restProps = _objectWithoutPropertiesLoose(props, ["locale", "style", "onChange", "title", "titles", "showTitle", "disabled"]);

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var t = useTranslate(locale); // 垂直对齐的选项

  var options = useMemo(function () {
    return [{
      title: t('we_toolbar_overflow'),
      value: 'overflow',
      Icon: ToolbarOverflowNormal
    }, {
      title: t('we_toolbar_auto_wrap'),
      value: 'auto-wrap',
      Icon: ToolbarAutoWrapNormal
    }, {
      title: t('we_toolbar_line_clip'),
      value: 'line-clip',
      Icon: ToolbarLineClipNormal
    }];
  }, [t]); // 该组件的trigger区域只显示Icon

  var renderTrigger = useCallback(function (align) {
    var index = options.findIndex(function (option) {
      return option.value === align;
    });
    var currentOption = options[index];
    return /*#__PURE__*/_createElement(TriggerWrap, {
      className: "we-ui-table-wrap-select-trigger",
      size: props.size,
      style: {
        minWidth: 16
      }
    }, currentOption && /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(currentOption.Icon, null), showTitle && /*#__PURE__*/_createElement("span", {
      className: "title"
    }, currentOption.title)));
  }, [options, showTitle]);
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [setValue, onChange]);
  return /*#__PURE__*/_createElement(IconSelect, _extends({
    value: value,
    onChange: handleChange,
    style: style,
    renderTrigger: renderTrigger,
    title: title,
    disabled: disabled,
    testid: "TableWrapSelect"
  }, restProps), options.map(function (option) {
    return /*#__PURE__*/_createElement(SelectOption, {
      value: option.value,
      key: option.value,
      title: titles[option.value],
      testid: 'item_' + option.value
    }, /*#__PURE__*/_createElement(OptionWrap, null, /*#__PURE__*/_createElement(option.Icon, {
      className: "icon"
    }), /*#__PURE__*/_createElement("span", null, option.title)));
  }));
};

TableWrapSelect.defaultProps = _extends({
  defaultValue: 'overflow',
  titles: {}
}, IconSelectDefaultProps);
export default TableWrapSelect;