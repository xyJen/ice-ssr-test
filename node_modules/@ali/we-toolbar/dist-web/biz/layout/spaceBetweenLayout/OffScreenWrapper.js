import React, { useEffect, useCallback, useRef, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { OffScreenWrapper as OffScreenWrapperEl, CenterWrapper, LeftWrapper } from "./styled";
import { GroupWrapperContext } from "../contexts";
export var SpaceBetweenLayoutOffScreenWrapper = /*#__PURE__*/React.memo(function (props) {
  var leftModule = props.leftModule,
      centerModule = props.centerModule,
      onBlockChange = props.onBlockChange,
      needGetPositions = props.needGetPositions;

  var _useState = useState(false),
      needRender = _useState[0],
      setNeedRender = _useState[1];

  var outElRef = useRef();
  useEffect(function () {
    setNeedRender(true);
  }, [needGetPositions]);
  useEffect(function () {
    var timer;

    if (outElRef.current && needRender) {
      onBlockChange(registerEl(outElRef.current));
      timer = window.setTimeout(function () {// setNeedRender(false)
      }, 500);
    }

    return function () {
      timer && clearTimeout(timer);
    };
  }, [needRender]);
  var registerEl = useCallback(function (outElRef) {
    var blocks = [];
    var bizEls = outElRef.querySelectorAll('*[data-biz-key]');
    bizEls.forEach(function (el) {
      if (el.clientWidth !== 0) {
        var id = el.getAttribute('data-biz-key') || '';
        var groupId = el.getAttribute('data-group-id') || '';
        var val = {
          id: id,
          offset: el.offsetLeft + el.clientWidth + (groupId === 'center' ? 80 : 0),
          elType: 'biz',
          groupId: groupId,
          width: el.clientWidth
        };
        blocks.push(val);
      }
    });
    return blocks;
  }, []);
  return /*#__PURE__*/_createElement(OffScreenWrapperEl, {
    ref: outElRef
  }, needRender && /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(GroupWrapperContext.Provider, {
    value: {
      fineAdaptation: true,
      groupKey: 'left'
    }
  }, /*#__PURE__*/_createElement(LeftWrapper, {
    "data-group-key": 'left'
  }, leftModule)), /*#__PURE__*/_createElement(GroupWrapperContext.Provider, {
    value: {
      fineAdaptation: true,
      groupKey: 'center'
    }
  }, /*#__PURE__*/_createElement(CenterWrapper, {
    "data-group-key": "center"
  }, centerModule))));
});