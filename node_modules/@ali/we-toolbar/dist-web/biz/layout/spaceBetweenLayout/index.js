var _MoreBetaNormal;

import React, { useEffect, useRef, useMemo, useState, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ToolbarWrapper, LeftWrapper, CenterWrapper, RightWrapper } from "./styled";
import { MoreOverlay, ToolbarLeftWrapper } from "../toolbar/styled";
import ResizeObserver from 'resize-observer-polyfill';
import { debounce, uuid } from "../../../utils";
import { GroupWrapperContext, ToolbarContext, OverLayContext } from "../contexts";
import { SpaceBetweenLayoutOffScreenWrapper } from "./OffScreenWrapper";
import { Dropdown, MoreBetaNormal } from '@ali/we-design';
import { IconButton } from "../../../common";
import { useGetContextLocale, useTranslate } from '@ali/we-util';
import { ToolbarGroupWrapper, ToolbarRowWrapper } from "../toolbar";
export var SpaceBetweenLayout = /*#__PURE__*/React.memo(function (props) {
  var _ToolbarGroupWrapper, _ToolbarGroupWrapper2;

  var elRef = useRef();
  var leftElRef = useRef();
  var centerElRef = useRef();

  var _useState = useState(0),
      needGetPositions = _useState[0],
      setNeedGetPositions = _useState[1];

  var id = useMemo(function () {
    return uuid();
  }, []);

  var _useState2 = useState([]),
      blocks = _useState2[0],
      setBlocks = _useState2[1];

  var _useState3 = useState([]),
      hideBlocks = _useState3[0],
      setHideBlocks = _useState3[1];

  var _useState4 = useState([]),
      overlayHideBlocks = _useState4[0],
      setOverlayShowBlocks = _useState4[1];

  var _useState5 = useState(),
      moreOverlayCss = _useState5[0],
      setMoreOverlayCss = _useState5[1];

  var _useState6 = useState(false),
      moreVisible = _useState6[0],
      setMoreVisible = _useState6[1];

  var leftModule = props.leftModule,
      centerModule = props.centerModule,
      locale = props.locale,
      leftOutModule = props.leftOutModule,
      rightOutModule = props.rightOutModule,
      leftOutModuleWidth = props.leftOutModuleWidth,
      rightOutModuleWidth = props.rightOutModuleWidth;
  var contextLocale = useGetContextLocale();
  var t = useTranslate(locale || contextLocale);
  var offset = 100;
  useEffect(function () {
    setNeedGetPositions(new Date().getTime());
  }, []);
  var layoutResize = useCallback(function (width) {
    if (elRef.current) {
      var hideEl = [];
      var showEl = [];
      blocks.forEach(function (o) {
        o.offset + offset < width ? showEl.push(o) : hideEl.push(o);
      });
      setHideBlocks(hideEl.map(function (o) {
        return o.id;
      }).concat(Array.from(new Set(hideEl.map(function (o) {
        return o.groupId || '';
      }))).filter(function (key) {
        return key && showEl.findIndex(function (o) {
          return o.groupId === key;
        }) === -1;
      })));
      setOverlayShowBlocks(showEl.map(function (o) {
        return o.id;
      }).concat(Array.from(new Set(showEl.map(function (o) {
        return o.groupId || '';
      }))).filter(function (key) {
        return key && hideEl.findIndex(function (o) {
          return o.groupId === key;
        }) === -1;
      })));
    }
  }, [elRef, blocks]);
  useEffect(function () {
    var handleResize = debounce(function (width) {
      layoutResize(width - leftOutModuleWidth - rightOutModuleWidth);
    }, 50);
    var resizeObserver = new ResizeObserver(function (entries) {
      var entrie = entries.find(function (o) {
        return o.target.getAttribute('data-id') === "ToolbarWrapper_" + id;
      });

      if (entrie) {
        handleResize(entrie.contentRect.width);
      }
    });

    if (resizeObserver && elRef.current && leftElRef.current && centerElRef.current) {
      resizeObserver.observe(elRef.current);
      resizeObserver.observe(leftElRef.current);
      resizeObserver.observe(centerElRef.current);
    }

    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();

        if (typeof handleResize.cancel === 'function') {
          handleResize.cancel();
        }
      }
    };
  }, [blocks]);
  var renderMoreBtn = useMemo(function () {
    if (hideBlocks.length === 0) return null;
    /**
     * 展开收起动画
     */

    var moreTransition = function moreTransition() {
      setMoreOverlayCss(moreVisible ? 'scale-out' : 'scale-up');
      !moreVisible && setTimeout(function () {
        return setMoreOverlayCss('');
      }, 100);
      setTimeout(function () {
        return setMoreVisible(!moreVisible);
      }, !moreVisible ? 0 : 500);
    };

    return /*#__PURE__*/_createElement(Dropdown, {
      visible: moreVisible,
      overlayStyle: {
        backgroundColor: 'transparent',
        boxShadow: 'none',
        border: 'none'
      },
      overlay: /*#__PURE__*/_createElement(MoreOverlay, {
        className: moreOverlayCss
      }, /*#__PURE__*/_createElement(ToolbarLeftWrapper, {
        className: "show-left-wrapper"
      }, /*#__PURE__*/_createElement(OverLayContext.Provider, {
        value: {
          inOverlay: true,
          overlayHideBlocks: overlayHideBlocks,
          ignoreRegister: true
        }
      }, _ToolbarGroupWrapper || (_ToolbarGroupWrapper = /*#__PURE__*/_createElement(ToolbarGroupWrapper, {
        groupKey: "left",
        fineAdaptation: true
      }, /*#__PURE__*/_createElement(ToolbarRowWrapper, null, leftModule))), _ToolbarGroupWrapper2 || (_ToolbarGroupWrapper2 = /*#__PURE__*/_createElement(ToolbarGroupWrapper, {
        groupKey: "center",
        fineAdaptation: true
      }, /*#__PURE__*/_createElement(ToolbarRowWrapper, null, centerModule)))))),
      onVisibleChange: moreTransition,
      placement: "bottomRight"
    }, /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(IconButton, {
      icon: _MoreBetaNormal || (_MoreBetaNormal = /*#__PURE__*/_createElement(MoreBetaNormal, null)),
      title: t('we_toolbar_more'),
      testid: "toolbar_more",
      className: "more-btn"
    })));
  }, [hideBlocks, overlayHideBlocks, moreVisible, moreOverlayCss]);
  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(SpaceBetweenLayoutOffScreenWrapper, {
    onBlockChange: setBlocks,
    needGetPositions: needGetPositions,
    centerModule: centerModule,
    leftModule: leftModule
  }), /*#__PURE__*/_createElement(ToolbarContext.Provider, {
    value: {
      hideBlocks: hideBlocks
    }
  }, /*#__PURE__*/_createElement(OverLayContext.Provider, {
    value: {
      inOverlay: false,
      overlayHideBlocks: [],
      ignoreRegister: true
    }
  }, /*#__PURE__*/_createElement(ToolbarWrapper, {
    ref: elRef,
    "data-id": "ToolbarWrapper_" + id
  }, /*#__PURE__*/_createElement(GroupWrapperContext.Provider, {
    value: {
      fineAdaptation: true,
      groupKey: 'left'
    }
  }, /*#__PURE__*/_createElement(LeftWrapper, {
    ref: leftElRef,
    "data-id": "LeftWrapper_" + id
  }, leftOutModule, leftModule)), /*#__PURE__*/_createElement(GroupWrapperContext.Provider, {
    value: {
      fineAdaptation: true,
      groupKey: 'center'
    }
  }, /*#__PURE__*/_createElement(CenterWrapper, {
    ref: centerElRef,
    "data-id": "CenterWrapper_" + id
  }, centerModule, renderMoreBtn)), /*#__PURE__*/_createElement(RightWrapper, null, rightOutModule)))));
});