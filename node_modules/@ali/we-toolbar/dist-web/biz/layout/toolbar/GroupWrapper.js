import React, { useContext, useMemo, useRef, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { GroupWrapper as GroupWrapperEl } from "./styled";
import { ToolbarContext, GroupWrapperContext, OverLayContext } from "../contexts";
import { LAYOUT_TYPE } from "../interface";
import CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';
export var GroupWrapper = /*#__PURE__*/React.memo(function (props) {
  var layoutType = props.layoutType,
      fineAdaptation = props.fineAdaptation,
      groupKey = props.groupKey,
      hideBorder = props.hideBorder,
      clearPadding = props.clearPadding;

  var _useContext = useContext(ToolbarContext),
      mode = _useContext.mode,
      _useContext$hideBlock = _useContext.hideBlocks,
      hideBlocks = _useContext$hideBlock === void 0 ? [] : _useContext$hideBlock,
      isInOffScreenWrap = _useContext.isInOffScreenWrap;

  var _useContext2 = useContext(OverLayContext),
      inOverlay = _useContext2.inOverlay,
      overlayHideBlocks = _useContext2.overlayHideBlocks;

  var el = useRef();
  var controller = useMemo(function () {
    return {
      fineAdaptation: fineAdaptation,
      groupKey: groupKey
    };
  }, [fineAdaptation, groupKey]);
  var isHide = useCallback(function () {
    if (inOverlay) {
      return overlayHideBlocks.indexOf(mode + "-" + groupKey) !== -1;
    } else {
      return hideBlocks.indexOf(mode + "-" + groupKey) !== -1;
    }
  }, [inOverlay, overlayHideBlocks, hideBlocks]);
  return /*#__PURE__*/_createElement(GroupWrapperContext.Provider, {
    value: controller
  }, /*#__PURE__*/_createElement(CSSTransitionGroup, {
    transitionName: "group-wrapper",
    transitionEnterTimeout: 200,
    transitionLeaveTimeout: 200,
    className: "group-transition"
  }, !isHide() && /*#__PURE__*/_createElement(GroupWrapperEl, {
    className: "group-wrapper",
    "data-group-key": !fineAdaptation ? mode + "-" + groupKey : undefined,
    "data-testid": !isInOffScreenWrap ? mode + "_GroupWrapper" : undefined,
    "data-mode": mode,
    ref: el,
    mode: mode,
    layoutType: layoutType,
    hideBorder: hideBorder,
    clearPadding: clearPadding
  }, props.children)));
});
GroupWrapper.defaultProps = {
  layoutType: LAYOUT_TYPE.row,
  fineAdaptation: false
};