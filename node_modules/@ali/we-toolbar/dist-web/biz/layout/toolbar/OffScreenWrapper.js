import React, { useEffect, useCallback, useRef, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import fastdom from 'fastdom';
import { MODE_TYPE } from "../interface";
import { OffScreenWrapper as OffScreenWrapperEl } from "./styled";
import { ToolbarContext } from "../contexts";
export var OffScreenWrapper = /*#__PURE__*/React.memo(function (props) {
  var mode = props.mode,
      doubleLineToolbar = props.doubleLineToolbar,
      singleLineToolbar = props.singleLineToolbar,
      onBlockChange = props.onBlockChange,
      needGetPositions = props.needGetPositions,
      id = props.id;

  var _useState = useState(false),
      needRender = _useState[0],
      setNeedRender = _useState[1];

  var _useState2 = useState(false),
      laterNeedRender = _useState2[0],
      setLaterNeedRender = _useState2[1];

  var outElRef = useRef();
  var createTimer = useRef(0);
  var destroyTimer = useRef(0);
  var registersLasterNum = useRef(0);
  var destroy = 2000;
  useEffect(function () {
    var timer = 0;

    if (destroyTimer.current) {
      window.clearTimeout(destroyTimer.current);
      destroyTimer.current = window.setTimeout(function () {
        setLaterNeedRender(false);
        setNeedRender(false);
        destroyTimer.current = 0;
      }, destroy);
    } else {
      setLaterNeedRender(false);
      setNeedRender(false);
      setNeedRender(true);
    }

    return function () {
      timer && window.clearTimeout(timer);
    };
  }, [needGetPositions]);
  useEffect(function () {
    if (outElRef.current && needRender) {
      registerEl(function (blocks) {
        onBlockChange(blocks);
        createTimer.current = window.setTimeout(function () {
          setLaterNeedRender(true);
        }, 200);
      });
    }

    return function () {
      createTimer.current && window.clearTimeout(createTimer.current);
    };
  }, [needRender]);
  useEffect(function () {
    if (laterNeedRender && outElRef.current) {
      registerEl(function (blocks) {
        onBlockChange(blocks);
        destroyTimer.current = window.setTimeout(function () {
          setLaterNeedRender(false);
          setNeedRender(false);
          destroyTimer.current = 0;
        }, destroy);
      });
    }
  }, [laterNeedRender]);
  useEffect(function () {
    registerEl(function (registers) {
      registersLasterNum.current !== registers.length;
      registers.filter(function (o) {
        return o.mode === 'singleLine';
      }).length > 0 && registers.filter(function (o) {
        return o.mode === 'doubleLine';
      }).length > 0 && destroyTimer.current && onBlockChange(registers);
      registersLasterNum.current = registers.length;
    });
  });
  var registerEl = useCallback(function (cb) {
    if (cb === void 0) {
      cb = function cb() {};
    }

    fastdom.measure(function () {
      var _outElRef$current;

      var outElLeft = ((_outElRef$current = outElRef.current) == null ? void 0 : _outElRef$current.getBoundingClientRect().left) || -10000;
      var blocks = [];
      var groupEls = document.querySelectorAll("#" + id + "_offScreen *[data-group-key]");
      groupEls.forEach(function (el) {
        if (el.clientWidth !== 0) {
          var _id = el.getAttribute('data-group-key') || '';

          var index = blocks.findIndex(function (o) {
            return o.id === _id;
          });

          var _el$getBoundingClient = el.getBoundingClientRect(),
              left = _el$getBoundingClient.left,
              width = _el$getBoundingClient.width;

          var val = {
            id: _id,
            offset: left + width - outElLeft,
            elType: 'group',
            width: width,
            mode: el.getAttribute('data-mode'),
            hasFontSizeMaxSelect: el.querySelectorAll('.font-size-max-select-layout').length !== 0
          };

          if (index === -1) {
            blocks.push(val);
          } else {
            blocks.splice(index, 1, val);
          }
        }
      });
      var bizEls = document.querySelectorAll("#" + id + "_offScreen *[data-biz-key]");
      bizEls.forEach(function (el) {
        if (el.clientWidth !== 0) {
          var _id2 = el.getAttribute('data-biz-key') || '';

          var index = blocks.findIndex(function (o) {
            return o.id === _id2;
          });

          var _el$getBoundingClient2 = el.getBoundingClientRect(),
              left = _el$getBoundingClient2.left,
              width = _el$getBoundingClient2.width;

          var val = {
            id: _id2,
            offset: left + width - outElLeft,
            elType: 'biz',
            groupId: el.getAttribute('data-group-id') || '',
            width: width,
            mode: el.getAttribute('data-mode')
          };

          if (index === -1) {
            blocks.push(val);
          } else {
            blocks.splice(index, 1, val);
          }
        }
      });
      cb(blocks);
    });
  }, []);
  return /*#__PURE__*/_createElement(OffScreenWrapperEl, {
    ref: outElRef,
    id: id + "_offScreen"
  }, needRender && /*#__PURE__*/_createElement(ToolbarContext.Provider, {
    value: {
      mode: mode,
      hideBlocks: [],
      isInOffScreenWrap: true
    }
  }, mode === MODE_TYPE.doubleLine ? doubleLineToolbar : singleLineToolbar), laterNeedRender && /*#__PURE__*/_createElement(ToolbarContext.Provider, {
    value: {
      mode: mode === MODE_TYPE.doubleLine ? 'singleLine' : 'doubleLine',
      hideBlocks: [],
      isInOffScreenWrap: true
    }
  }, mode !== MODE_TYPE.doubleLine ? doubleLineToolbar : singleLineToolbar));
});