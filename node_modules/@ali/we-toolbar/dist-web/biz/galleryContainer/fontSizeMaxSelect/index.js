import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useContext, useEffect, useMemo, useState, useRef } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ContainerMenuDown, DesWrap, GalleryWrap, IconWrapper, TableButton, TableStyleSet, TextWrap, TitleWrap } from "./style";
import { useTranslate } from '@ali/we-util';
import { ArrowDownLineNormal, classnames, Dropdown, TabPane, Tabs, Tooltip } from '@ali/we-design';
import { ToolbarContext } from "../../layout/contexts";
import { DisableWrap } from "../../../common/styled";
import OnIdle from "../../../common/onIdle";
import FontSizeButton from "./FontSizeButton";
var cellWidth = 76;
var margin = 34;
export var FontSizeMaxSelect = /*#__PURE__*/React.memo(function (props) {
  var locale = props.locale,
      onChange = props.onChange,
      value = props.value,
      defaultValue = props.defaultValue,
      disabled = props.disabled,
      disabledTip = props.disabledTip,
      testid = props.testid;

  var _useState = useState(false),
      showArrowDown = _useState[0],
      setShowArrowDown = _useState[1];

  var _useState2 = useState(false),
      overlayVisible = _useState2[0],
      setOverlayVisible = _useState2[1];

  var _useContext = useContext(ToolbarContext),
      _useContext$fontSizeM = _useContext.fontSizeMaxSelectSafeWidth,
      fontSizeMaxSelectSafeWidth = _useContext$fontSizeM === void 0 ? 0 : _useContext$fontSizeM;

  var _useState3 = useState(),
      moreOverlayCss = _useState3[0],
      setMoreOverlayCss = _useState3[1];

  var getLength = function getLength() {
    var moreLength = Math.floor((fontSizeMaxSelectSafeWidth - margin) / cellWidth);
    return Math.min(Math.max(2, moreLength), 6);
  };

  var _useState4 = useState(getLength),
      length = _useState4[0],
      setLength = _useState4[1];

  var translate = useTranslate(locale);
  var selfRef = useRef();
  var sizeComputedRef = useRef(false);
  useEffect(function () {
    var timer = setTimeout(function () {
      setLength(getLength()); // 未计算好 size 之前去掉缓动（from xingtain）

      sizeComputedRef.current = sizeComputedRef.current || fontSizeMaxSelectSafeWidth !== 0;
    }, 200);
    return function () {
      return clearTimeout(timer);
    };
  }, [fontSizeMaxSelectSafeWidth]);
  var minFontSize = 9;
  var maxtFontSize = 13.5; // 文字类型列表：正文、标题1-6

  var options = useMemo(function () {
    return [{
      title: translate('we_toolbar_font_family_Title_1'),
      type: 'heading-1',
      des: 'Heading 1',
      "default": 20,
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: translate('we_toolbar_font_family_Title_2'),
      type: 'heading-2',
      des: 'Heading 2',
      "default": 16,
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: translate('we_toolbar_font_family_Title_3'),
      type: 'heading-3',
      des: 'Heading 3',
      "default": 14,
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: translate('we_toolbar_font_family_Title_4'),
      type: 'heading-4',
      des: 'Heading 4',
      "default": 12,
      fontWeight: 500,
      lineHeight: '1.45'
    }, {
      title: translate('we_toolbar_font_family_Body'),
      type: 'paragraph',
      des: 'Paragraph',
      "default": 11,
      fontWeight: 400,
      lineHeight: '1.45'
    }, // todo huilan：locale
    {
      title: translate('we_toolbar_reference'),
      type: 'blockquote',
      des: 'Blockquote',
      "default": 11,
      fontWeight: 400,
      lineHeight: '1.45'
    }];
  }, [translate]);
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }
  }, [onChange]);
  var handleMenuChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }
  }, [onChange]);

  var getOverlay = function getOverlay() {
    return /*#__PURE__*/_createElement(TableStyleSet, {
      className: moreOverlayCss,
      "data-testid": "fontSizeMaxSelect_overlay_" + testid
    }, options.map(function (option) {
      return /*#__PURE__*/_createElement(TableButton, {
        key: option.type,
        value: option.type,
        active: option.type === (value || defaultValue),
        className: classnames({
          active: option.type === (value || defaultValue)
        }),
        testid: option.type,
        onClick: function onClick() {
          if (option.type !== (value || defaultValue)) {
            handleMenuChange(option.type);
          }
        }
      }, /*#__PURE__*/_createElement(TitleWrap, {
        type: option.type,
        style: {
          fontSize: Math.min(Math.max(option["default"] * 0.75, minFontSize), maxtFontSize) + "pt",
          fontWeight: option.fontWeight,
          textOverflow: 'clip',
          maxWidth: '65px',
          lineHeight: '29px',
          height: '29px',
          overflow: 'hidden'
        }
      }, option.title), /*#__PURE__*/_createElement(DesWrap, null, /*#__PURE__*/_createElement(TextWrap, null, option.title === 'AaBbCcDdEe' ? option.des : translate('we_toolbar_font_family_detault') + " " + (option.type === 'blockquote' ? '-' : option["default"]))));
    }));
  };
  /**
   * 展开收起动画
   */


  var moreTransition = function moreTransition() {
    setMoreOverlayCss(overlayVisible ? 'scale-out' : 'scale-up');
    !overlayVisible && setTimeout(function () {
      return setMoreOverlayCss('');
    }, 150);
  };

  var tabsStyle = {
    width: length * 76 + 34,
    height: '100%'
  };
  var WrapperPlaceholder = React.useMemo(function () {
    return /*#__PURE__*/_createElement("div", {
      style: _extends({}, tabsStyle, {
        padding: '3px 22px',
        display: 'flex',
        cursor: 'not-allowed',
        filter: 'opacity(0.3)'
      })
    }, options.slice(0, 2).map(function (option) {
      return /*#__PURE__*/_createElement("div", {
        key: option.type,
        style: {
          padding: '0 3px'
        }
      }, /*#__PURE__*/_createElement(FontSizeButton, {
        option: option,
        maxFontSize: maxtFontSize,
        minFontSize: minFontSize,
        value: value || defaultValue,
        defaultFontFamily: translate('we_toolbar_font_family_detault')
      }));
    }));
  }, [options, value, defaultValue, minFontSize, maxtFontSize]);

  if (!sizeComputedRef.current) {
    tabsStyle.transition = 'none';
  }

  return /*#__PURE__*/_createElement(Tooltip, {
    disabled: !disabled,
    title: disabledTip
  }, /*#__PURE__*/_createElement(DisableWrap, {
    className: "font-size-max-select-layout",
    disabled: disabled
  }, /*#__PURE__*/_createElement("div", {
    style: {
      position: 'relative',
      background: 'white',
      borderRadius: '4px'
    },
    onMouseEnter: function onMouseEnter() {
      return setShowArrowDown(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setShowArrowDown(false);
    },
    "data-testid": testid
  }, /*#__PURE__*/_createElement(Dropdown, {
    offsetY: -3,
    overlayStyle: {
      border: '0px'
    },
    overlay: /*#__PURE__*/_createElement(OnIdle, null, /*#__PURE__*/_createElement(ContainerMenuDown, {
      "data-testid": "fontSizeMaxSelect_showDown_" + testid
    }, /*#__PURE__*/_createElement(Dropdown, {
      overlay: getOverlay(),
      overlayStyle: {
        backgroundColor: 'transparent',
        boxShadow: 'none',
        border: 'none'
      },
      onVisibleChange: function onVisibleChange(vi) {
        setOverlayVisible(vi);
        moreTransition();
      },
      placement: "bottom",
      visible: overlayVisible
    }, /*#__PURE__*/_createElement(IconWrapper, {
      isDown: true,
      onClick: function onClick() {
        return setOverlayVisible(!overlayVisible);
      },
      active: showArrowDown || overlayVisible,
      left: (length * 76 + 34) / 2
    }, /*#__PURE__*/_createElement(ArrowDownLineNormal, {
      className: classnames({
        opened: overlayVisible
      }),
      style: showArrowDown || overlayVisible ? {
        width: 8,
        height: 8
      } : {
        visibility: 'hidden',
        width: 8,
        height: 8
      }
    }))))),
    placement: "bottom",
    trigger: 'hover'
  }, /*#__PURE__*/_createElement(GalleryWrap, {
    ref: selfRef
  }, /*#__PURE__*/_createElement(OnIdle, {
    placeholder: WrapperPlaceholder
  }, /*#__PURE__*/_createElement(Tabs, {
    excessMode: "triangle",
    type: "custom",
    style: tabsStyle,
    onChange: handleChange,
    activeKey: value || defaultValue
  }, options.map(function (option) {
    return /*#__PURE__*/_createElement(TabPane, {
      tab: /*#__PURE__*/_createElement(FontSizeButton, {
        option: option,
        maxFontSize: maxtFontSize,
        minFontSize: minFontSize,
        value: value || defaultValue,
        defaultFontFamily: translate('we_toolbar_font_family_detault')
      }),
      key: option.type
    });
  }))))))));
});