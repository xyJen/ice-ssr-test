/* eslint-disable max-lines-per-function */
import React, { useState, useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { StrokeNormal } from '@ali/we-icon';
import SplitButton from "../../../common/splitButton";
import BorderPickerOverlay from "./BorderPickerOverlay";
var DEFAULT_COLOR = 'inherit';
export var BorderPicker = function BorderPicker(props) {
  var color = props.color,
      onColorPick = props.onColorPick,
      lineSize = props.lineSize,
      defaultLineSize = props.defaultLineSize,
      lineSizeMap = props.lineSizeMap,
      onLineSizeChange = props.onLineSizeChange,
      lineStyle = props.lineStyle,
      defaultLineStyle = props.defaultLineStyle,
      lineStyleMap = props.lineStyleMap,
      onLineStyleChange = props.onLineStyleChange,
      locale = props.locale,
      disabled = props.disabled,
      title = props.title,
      tooltip = props.tooltip,
      onClick = props.onClick,
      size = props.size,
      showAutomatic = props.showAutomatic,
      automaticColor = props.automaticColor,
      clearColor = props.clearColor,
      picker = props.picker,
      testid = props.testid,
      onActiveChange = props.onActiveChange,
      getContainer = props.getContainer,
      role = props.role,
      showToggleSelect = props.showToggleSelect,
      onSelectValueChange = props.onSelectValueChange,
      showGradient = props.showGradient,
      getColorPanelMode = props.getColorPanelMode,
      doubleGapRowIndex = props.doubleGapRowIndex;

  var _useState = useState(false),
      dropdownVisible = _useState[0],
      setDropdownVisible = _useState[1];

  var _useState2 = useState(false),
      sizeSelectVisible = _useState2[0],
      setSizeSelectVisible = _useState2[1];

  var _useState3 = useState(false),
      styleSelectVisible = _useState3[0],
      setStyleSelectVisible = _useState3[1];

  var handleDropdownVisible = useCallback(function (e) {
    if (!e && (sizeSelectVisible || styleSelectVisible)) {
      return;
    }

    onActiveChange && onActiveChange(e);
    setDropdownVisible(e);
  }, [setDropdownVisible, onActiveChange, sizeSelectVisible, styleSelectVisible]);
  var handleClick = useCallback(function () {
    if (onClick) {
      onClick();
    }
  }, [onClick]);
  var pathColors = useMemo(function () {
    return [// 当选中颜色为白色时，选中边框的外边缘为黑色，否则选中边框外边缘与内部颜色一致
    !color ? DEFAULT_COLOR : color, DEFAULT_COLOR];
  }, [color]);
  var visible = dropdownVisible || sizeSelectVisible || styleSelectVisible;
  var handleLineSizeChange = React.useCallback(function (change) {
    onLineSizeChange && onLineSizeChange(change);
  }, [onLineSizeChange]);
  var handleLineStyleChange = React.useCallback(function (change) {
    onLineStyleChange && onLineStyleChange(change);
  }, [onLineStyleChange]);
  return /*#__PURE__*/_createElement(SplitButton, {
    overlay: /*#__PURE__*/_createElement(BorderPickerOverlay, {
      color: color,
      onColorPick: onColorPick,
      showAutomatic: showAutomatic,
      automaticColor: automaticColor,
      clearColor: clearColor,
      picker: picker,
      lineSizeMap: lineSizeMap,
      lineSize: lineSize,
      defaultLineSize: defaultLineSize,
      onLineSizeChange: handleLineSizeChange,
      sizeSelectVisible: sizeSelectVisible,
      onSizeSelectVisibleChange: setSizeSelectVisible,
      lineStyleMap: lineStyleMap,
      lineStyle: lineStyle,
      defaultLineStyle: defaultLineStyle,
      onLineStyleChange: handleLineStyleChange,
      styleSelectVisible: styleSelectVisible,
      onStyleSelectVisibleChange: setStyleSelectVisible,
      locale: locale,
      showToggleSelect: showToggleSelect,
      getColorPanelMode: getColorPanelMode,
      showGradient: showGradient,
      onSelectValueChange: onSelectValueChange,
      doubleGapRowIndex: doubleGapRowIndex
    }),
    active: visible,
    onClickLeft: handleClick,
    onActiveChange: handleDropdownVisible,
    disabled: disabled,
    testid: testid || 'BorderPicker',
    title: title,
    tooltip: tooltip,
    size: size,
    icon: /*#__PURE__*/_createElement(StrokeNormal, {
      pathColors: pathColors
    }),
    getContainer: getContainer,
    role: role
  });
};