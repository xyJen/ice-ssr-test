import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Tooltip, ToolbarBorderAllNormal, ToolbarBorderInnerNormal, ToolbarBorderLeftNormal, ToolbarBorderOuterNormal, ToolbarBorderRightNormal, ToolbarBorderTopNormal, ToolbarBorderVerticalNormal, ToolbarBorderHorizonNormal, ToolbarBorderBottomNormal } from '@ali/we-design';
import { TranslateProvider } from '@ali/we-util';
import { BorderTypeWrapper, IconWrapper } from "./styled";
import { isWhite } from "../../../utils";
export var BorderType;

(function (BorderType) {
  BorderType["top"] = "top";
  BorderType["bottom"] = "bottom";
  BorderType["left"] = "left";
  BorderType["right"] = "right";
  BorderType["none"] = "none";
  BorderType["outer"] = "outer";
  BorderType["inner"] = "inner";
  BorderType["horizon"] = "horizon";
  BorderType["vertical"] = "vertical";
  BorderType["all"] = "all";
  BorderType["unselected"] = "unselected";
})(BorderType || (BorderType = {}));

var UNSELECTED = 'unselected';
export var BorderTypePanel = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(BorderTypePanel, _React$PureComponent);

  function BorderTypePanel(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;

    _this.handleBorderTypeChange = function (borderType) {
      _this.setState({
        currentBorderType: borderType
      });

      var onBorderTypeChange = _this.props.onBorderTypeChange;

      if (onBorderTypeChange) {
        onBorderTypeChange(borderType);
      }
    };

    var currentBorderType = props.borderType ? props.borderType : UNSELECTED;
    _this.state = {
      currentBorderType: currentBorderType
    };
    return _this;
  }

  var _proto = BorderTypePanel.prototype;

  _proto.render = function render() {
    var _borderList,
        _this2 = this;

    var _this$props = this.props,
        borderType = _this$props.borderType,
        _this$props$borderIco = _this$props.borderIconSize,
        borderIconSize = _this$props$borderIco === void 0 ? 20 : _this$props$borderIco,
        _this$props$borderSel = _this$props.borderSelectedColor,
        borderSelectedColor = _this$props$borderSel === void 0 ? '#000000' : _this$props$borderSel,
        style = _this$props.style;
    var currentBorderType = this.state.currentBorderType;
    var activeBorderType = borderType || currentBorderType;
    var defaultWrapperStyle = {
      width: '100px',
      height: '100px'
    };

    var wrapperStyle = _extends({}, defaultWrapperStyle, style || {});

    var iconStyle = {
      width: borderIconSize,
      height: borderIconSize,
      fontSize: borderIconSize,
      boxSizing: 'border-box',
      padding: '1px 1px'
    };
    var ICON_DEFAULT_COLOR = 'rgba(58, 60, 63, 1)';
    var pathColors = [borderSelectedColor || ICON_DEFAULT_COLOR, // 当选中颜色为白色时，选中边框的外边缘为黑色，否则选中边框外边缘与内部颜色一致
    !borderSelectedColor || isWhite(borderSelectedColor) ? ICON_DEFAULT_COLOR : borderSelectedColor];
    var borderList = (_borderList = {}, _borderList[BorderType.outer] = /*#__PURE__*/_createElement(ToolbarBorderOuterNormal, {
      pathColors: pathColors,
      style: iconStyle
    }), _borderList[BorderType.inner] = /*#__PURE__*/_createElement(ToolbarBorderInnerNormal, {
      pathColors: pathColors,
      style: iconStyle
    }), _borderList[BorderType.all] = /*#__PURE__*/_createElement(ToolbarBorderAllNormal, {
      pathColors: pathColors,
      style: iconStyle
    }), _borderList[BorderType.left] = /*#__PURE__*/_createElement(ToolbarBorderLeftNormal, {
      pathColors: pathColors,
      style: iconStyle
    }), _borderList[BorderType.vertical] = /*#__PURE__*/_createElement(ToolbarBorderVerticalNormal, {
      pathColors: pathColors,
      style: iconStyle
    }), _borderList[BorderType.right] = /*#__PURE__*/_createElement(ToolbarBorderRightNormal, {
      pathColors: pathColors,
      style: iconStyle
    }), _borderList[BorderType.top] = /*#__PURE__*/_createElement(ToolbarBorderTopNormal, {
      pathColors: pathColors,
      style: iconStyle
    }), _borderList[BorderType.horizon] = /*#__PURE__*/_createElement(ToolbarBorderHorizonNormal, {
      pathColors: pathColors,
      style: iconStyle
    }), _borderList[BorderType.bottom] = /*#__PURE__*/_createElement(ToolbarBorderBottomNormal, {
      pathColors: pathColors,
      style: iconStyle
    }), _borderList);
    return /*#__PURE__*/_createElement(BorderTypeWrapper, {
      style: wrapperStyle
    }, Object.keys(borderList).map(function (key) {
      var iconComp = borderList[key];
      var tipTitle = "we_toolbar_border_" + BorderType[key];
      return /*#__PURE__*/_createElement(TranslateProvider, {
        key: key
      }, function (t) {
        return /*#__PURE__*/_createElement(Tooltip, {
          title: t(tipTitle)
        }, /*#__PURE__*/_createElement(IconWrapper, {
          active: activeBorderType === key,
          onClick: function onClick() {
            return _this2.handleBorderTypeChange(key);
          }
        }, iconComp));
      });
    }));
  };

  return BorderTypePanel;
}(React.PureComponent);
BorderTypePanel.defaultProps = {
  borderIconSize: 20
};