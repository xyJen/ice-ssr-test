import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { Component, PureComponent } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { debounce } from "../../../../../utils";
import * as color from "../helpers/color";
export var ColorWrap = function ColorWrap(Picker) {
  var ColorPicker = /*#__PURE__*/function (_ref) {
    _inheritsLoose(ColorPicker, _ref);

    function ColorPicker(props) {
      var _this;

      _this = _ref.call(this) || this;

      _this.handleChange = function (data, event) {
        var isValidColor = color.simpleCheckForValidColor(data);

        if (isValidColor) {
          var colors = color.toState(data, data.h || _this.state.oldHue);

          _this.setState(colors);

          _this.props.onChange && _this.props.onChange(colors, event); // 不是来自输入框
          // 如果来自输入框，需要是 blur 触发

          if (event._input && event._blur || !event._input) {
            _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors, event);
          }
        }
      };

      _this.handleSwatchHover = function (data, event) {
        var isValidColor = color.simpleCheckForValidColor(data);

        if (isValidColor) {
          var colors = color.toState(data, data.h || _this.state.oldHue);
          _this.props.onSwatchHover && _this.props.onSwatchHover(colors, event);
        }
      };

      _this.state = _extends({}, color.toState(props.color, 0));
      _this.debounce = debounce(function (fn, data, event) {
        fn(data, event);
      }, 100);
      return _this;
    }

    ColorPicker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, state) {
      return _extends({}, color.toState(nextProps.color, state.oldHue));
    };

    var _proto = ColorPicker.prototype;

    _proto.render = function render() {
      var optionalEvents = {};

      if (this.props.onSwatchHover) {
        optionalEvents.onSwatchHover = this.handleSwatchHover;
      }

      return /*#__PURE__*/_createElement(Picker, _extends({}, this.props, this.state, {
        onChange: this.handleChange
      }, optionalEvents));
    };

    return ColorPicker;
  }(PureComponent || Component);

  ColorPicker.propTypes = _extends({}, Picker.propTypes);
  ColorPicker.defaultProps = _extends({}, Picker.defaultProps, {
    color: {
      h: 250,
      s: 0.5,
      l: 0.2,
      a: 1
    }
  });
  return ColorPicker;
};
export default ColorWrap;