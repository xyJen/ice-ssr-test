import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/* eslint-disable @typescript-eslint/explicit-function-return-type */
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Dropdown, ToolbarCellFillColorNormal, ToolbarPenNormal } from '@ali/we-design';
import { TranslateComp } from '@ali/we-util';
import { ColorPalette } from "./ColorPalette";
import { SplitButtonWrapper, ColorPaletteWrapper, FillColorArea } from "./styled";
import { isWhite, isTransparent } from "../../../utils";
import SplitButton from "../../../common/splitButton";
import FontIcon from "./FontIcon";
var DEFAULT_COLOR = '#ffffff';
var ICON_DEFAULT_COLOR = 'inherit';
export var EColorPickerIcon;

(function (EColorPickerIcon) {
  EColorPickerIcon["font"] = "font";
  EColorPickerIcon["background"] = "background";
  EColorPickerIcon["backgroundfont"] = "backgroundfont";
  EColorPickerIcon["backgroundsheet"] = "backgroundsheet";
})(EColorPickerIcon || (EColorPickerIcon = {}));

export var ColorPicker = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(ColorPicker, _React$PureComponent);

  function ColorPicker(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;

    _this.handlePaletteClick = function (e) {
      // 阻止冒泡
      e.stopPropagation(); // 阻止默认行为

      e.preventDefault();
    };

    _this.handleColorPick = function (color) {
      var onColorPicker = _this.props.onColorPicker;

      _this.setState({
        currentColor: color,
        currentActive: false
      });

      if (onColorPicker) {
        onColorPicker(color, true);
      }
    };

    _this.handleCustomColor = function (color, isAfter) {
      var onColorPicker = _this.props.onColorPicker; // 设置 custom color 后立即应用，但 colorPicker 不收起

      _this.setState({
        currentColor: color
      });

      if (onColorPicker) {
        onColorPicker(color, isAfter);
      }
    };

    _this.handleCustomColorPick = function (color) {
      _this.handleCustomColor(color, false);
    };

    _this.handleCustomColorAfterPick = function (color) {
      _this.handleCustomColor(color, true);
    };

    _this.handleClickLeft = function () {
      var _this$props = _this.props,
          onClickLeft = _this$props.onClickLeft,
          onColorPicker = _this$props.onColorPicker;
      var currentColor = _this.state.currentColor;

      if (onClickLeft) {
        onClickLeft(currentColor);
      } else {
        onColorPicker(currentColor, true);
      }
    };

    _this.handleActive = function (active) {
      _this.setState({
        currentActive: active
      });
    };

    _this.getColorPalette = function () {
      var _this$props2 = _this.props,
          color = _this$props2.color,
          automaticColor = _this$props2.automaticColor,
          clearColor = _this$props2.clearColor,
          picker = _this$props2.picker,
          locale = _this$props2.locale,
          btnType = _this$props2.btnType,
          showRecentColors = _this$props2.showRecentColors,
          showAutomatic = _this$props2.showAutomatic,
          colorBlockText = _this$props2.colorBlockText,
          customColorPalette = _this$props2.customColorPalette,
          customColorBlockTextColor = _this$props2.customColorBlockTextColor,
          _this$props2$showGrad = _this$props2.showGradient,
          showGradient = _this$props2$showGrad === void 0 ? false : _this$props2$showGrad,
          _this$props2$showTogg = _this$props2.showToggleSelect,
          showToggleSelect = _this$props2$showTogg === void 0 ? false : _this$props2$showTogg,
          _this$props2$doubleGa = _this$props2.doubleGapRowIndex,
          doubleGapRowIndex = _this$props2$doubleGa === void 0 ? showGradient ? 1 : 0 : _this$props2$doubleGa,
          getColorPanelMode = _this$props2.getColorPanelMode,
          onSelectValueChange = _this$props2.onSelectValueChange;
      var currentColor = _this.state.currentColor;
      var customText = btnType === EColorPickerIcon.font ? /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_toolbar_color_picker_default'
      }) : /*#__PURE__*/_createElement(TranslateComp, {
        locale: locale,
        textKey: 'we_toolbar_color_picker_no_color'
      });
      return /*#__PURE__*/_createElement(ColorPaletteWrapper, {
        onClick: _this.handlePaletteClick
      }, /*#__PURE__*/_createElement(ColorPalette, {
        color: color || currentColor,
        onPick: _this.handleColorPick,
        onCustomColorPick: _this.handleCustomColorPick,
        onCustomColorAfterPick: _this.handleCustomColorAfterPick,
        automaticColor: automaticColor,
        clearColor: clearColor,
        picker: picker,
        locale: locale,
        showRecentColors: showRecentColors,
        quickSetText: customText,
        showAutomatic: showAutomatic,
        colorBlockText: colorBlockText,
        customColorBlockTextColor: customColorBlockTextColor,
        customColorPalette: customColorPalette,
        showGradient: showGradient,
        showToggleSelect: showToggleSelect,
        doubleGapRowIndex: doubleGapRowIndex,
        getColorPanelMode: getColorPanelMode,
        onSelectValueChange: onSelectValueChange
      }));
    };

    _this.state = {
      currentColor: props.color || props.defaultColor || DEFAULT_COLOR,
      currentActive: props.defaultActive || false
    };
    return _this;
  }

  var _proto = ColorPicker.prototype;

  _proto.renderCustomTrigger = function renderCustomTrigger() {
    var _this$props3 = this.props,
        children = _this$props3.children,
        title = _this$props3.title;
    var currentActive = this.state.currentActive;
    return /*#__PURE__*/_createElement(Dropdown, {
      visible: currentActive,
      onVisibleChange: this.handleActive,
      overlay: currentActive ? this.getColorPalette() : null,
      title: title
    }, children);
  };

  _proto.render = function render() {
    var _btnTypeList;

    var _this$state = this.state,
        currentColor = _this$state.currentColor,
        currentActive = _this$state.currentActive;
    var _this$props4 = this.props,
        btnType = _this$props4.btnType,
        btnIcon = _this$props4.btnIcon,
        color = _this$props4.color,
        children = _this$props4.children,
        title = _this$props4.title,
        disabled = _this$props4.disabled,
        size = _this$props4.size,
        activeLeft = _this$props4.active; // 如果填充部分表现为白色（传入空字符串，白色或透明），则填充的外围边界线需有颜色

    var whiteFilling = !currentColor || isWhite(currentColor) || isTransparent(currentColor);
    var pathColors = disabled ? undefined : [!whiteFilling ? currentColor : 'white', !whiteFilling ? 'transparent' : ICON_DEFAULT_COLOR];
    var btnTypeList = (_btnTypeList = {}, _btnTypeList[EColorPickerIcon.font] = /*#__PURE__*/_createElement(FontIcon, {
      pathColors: pathColors,
      color: currentColor
    }), _btnTypeList[EColorPickerIcon.background] = /*#__PURE__*/_createElement(ToolbarCellFillColorNormal, {
      pathColors: pathColors
    }), _btnTypeList[EColorPickerIcon.backgroundfont] = /*#__PURE__*/_createElement(ToolbarPenNormal, {
      pathColors: pathColors
    }), _btnTypeList[EColorPickerIcon.backgroundsheet] = /*#__PURE__*/_createElement(ToolbarCellFillColorNormal, {
      pathColors: pathColors
    }), _btnTypeList);
    return children ? this.renderCustomTrigger() : /*#__PURE__*/_createElement(SplitButton, _extends({
      overlay: currentActive ? this.getColorPalette() : /*#__PURE__*/_createElement(React.Fragment, null),
      onClickLeft: this.handleClickLeft,
      onActiveChange: this.handleActive,
      disabled: disabled,
      testid: "ColorPicker-" + btnType,
      title: title,
      size: size,
      icon: /*#__PURE__*/_createElement(SplitButtonWrapper, null, btnType ? btnTypeList[btnType] : /*#__PURE__*/_createElement(React.Fragment, null, btnIcon, /*#__PURE__*/_createElement(FillColorArea, {
        color: color || currentColor
      })))
    }, this.props, {
      active: currentActive,
      activeLeft: activeLeft
    }));
  };

  return ColorPicker;
}(React.PureComponent);