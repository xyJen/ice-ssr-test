import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

var _ToolbarMergeCellNorm, _ToolbarSplitCellNorm, _ToolbarMergeCellNorm2, _ToolbarSplitCellNorm2;

/* eslint-disable max-lines-per-function */
import { useControlledValue, ToolbarMergeCellNormal, ToolbarSplitCellNormal, Menu, MenuItem } from '@ali/we-design';
import { useTranslate } from '@ali/we-util';
import React, { useState, useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import SplitButton from "../../../common/splitButton";
import styled from 'styled-components';
import { Ellipsis } from "../../../utils/styled.mixin";
var TriggerWrap = /*#__PURE__*/styled.div(["display:flex;align-items:center;.title{width:70px;margin-left:6px;", ";}"], Ellipsis);
export var MergeCellButton = function MergeCellButton(props) {
  var onSelect = props.onSelect,
      onClick = props.onClick,
      locale = props.locale,
      _props$defaultStatus = props.defaultStatus,
      defaultStatus = _props$defaultStatus === void 0 ? 'unmerged' : _props$defaultStatus,
      title = props.title,
      _props$titles = props.titles,
      titles = _props$titles === void 0 ? {} : _props$titles,
      disabled = props.disabled,
      leftActive = props.active,
      size = props.size,
      restProps = _objectWithoutPropertiesLoose(props, ["onSelect", "onClick", "locale", "defaultStatus", "title", "titles", "disabled", "active", "size"]);

  var _useState = useState(false),
      overlayActive = _useState[0],
      setOverlayActive = _useState[1];

  var _useControlledValue = useControlledValue(props.status, defaultStatus),
      status = _useControlledValue[0],
      setStatus = _useControlledValue[1];

  var t = useTranslate(locale);

  var toggle = function toggle(curr) {
    return curr === 'unmerged' ? 'merged' : 'unmerged';
  };

  var handleClickMerged = function handleClickMerged() {
    if (onSelect) {
      onSelect('merged');
    }

    setStatus(toggle);
    setOverlayActive(false);
  };

  var handleClickUnMerged = function handleClickUnMerged() {
    if (onSelect) {
      onSelect('unmerged');
    }

    setStatus('unmerged');
    setOverlayActive(false);
  };

  var options = [{
    title: t('we_toolbar_merge_cell'),
    Icon: ToolbarMergeCellNormal,
    value: 'merged',
    handleClick: handleClickMerged
  }, {
    title: t('we_toolbar_split_cell'),
    Icon: ToolbarSplitCellNormal,
    value: 'unmerged',
    handleClick: handleClickUnMerged
  }];
  var handleClickLeft = useCallback(function () {
    if (onClick) {
      onClick(status);
    }

    setStatus(function (curr) {
      return curr === 'merged' ? 'unmerged' : 'merged';
    });
  }, [onClick, status, setStatus]);
  var isMerged = status === 'merged';
  var getOverlay = useMemo(function () {
    return /*#__PURE__*/_createElement(Menu, {
      showSelect: true,
      minWidth: 120
    }, options.map(function (item, index) {
      return /*#__PURE__*/_createElement(MenuItem, {
        key: index,
        icon: status === 'unmerged' ? _ToolbarMergeCellNorm || (_ToolbarMergeCellNorm = /*#__PURE__*/_createElement(ToolbarMergeCellNormal, null)) : _ToolbarSplitCellNorm || (_ToolbarSplitCellNorm = /*#__PURE__*/_createElement(ToolbarSplitCellNormal, null)),
        selected: item.value === 'merged' && isMerged,
        disabled: status === 'unmerged' && item.value === 'unmerged',
        menuKey: item.value,
        onClick: item.handleClick,
        testid: "option-" + item.value
      }, item.title);
    }));
  }, [options, status, isMerged, titles]);
  var rendertTitle = useMemo(function () {
    return status === 'unmerged' ? t('we_toolbar_merge_cell') : t('we_toolbar_split_cell');
  }, [status]);
  var renderTriggerIcon = useMemo(function () {
    return /*#__PURE__*/_createElement(TriggerWrap, {
      className: "we-ui-merge-cell-button-trigger"
    }, status === 'unmerged' ? _ToolbarMergeCellNorm2 || (_ToolbarMergeCellNorm2 = /*#__PURE__*/_createElement(ToolbarMergeCellNormal, null)) : _ToolbarSplitCellNorm2 || (_ToolbarSplitCellNorm2 = /*#__PURE__*/_createElement(ToolbarSplitCellNormal, null)));
  }, [status]);
  return /*#__PURE__*/_createElement(SplitButton, _extends({}, restProps, {
    overlay: getOverlay,
    onClickLeft: handleClickLeft,
    active: overlayActive,
    activeLeft: leftActive,
    onActiveChange: setOverlayActive,
    testid: "MergeCellButton",
    title: rendertTitle,
    size: size,
    disabled: disabled,
    icon: renderTriggerIcon
  }));
};