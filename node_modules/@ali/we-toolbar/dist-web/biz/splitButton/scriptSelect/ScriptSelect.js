import _extends from "@babel/runtime/helpers/extends";

var _ToolbarSuperscriptNo, _ToolbarSubscriptNorm;

import React, { useCallback, useState, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useControlledValue, Menu, MenuItem, ToolbarSuperscriptNormal, ToolbarSubscriptNormal } from '@ali/we-design';
import SplitButton from "../../../common/splitButton";
import { useTranslate } from '@ali/we-util';

var ScriptSelect = function ScriptSelect(props) {
  var onClick = props.onClick,
      title = props.title,
      disabled = props.disabled,
      size = props.size,
      locale = props.locale,
      activeLeft = props.active;

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var _useState = useState(false),
      active = _useState[0],
      setActive = _useState[1];

  var t = useTranslate(locale);
  /**
   * 点击上下标操作
   */

  var handleClickLeft = useCallback(function (event) {
    if (onClick) {
      onClick(value, event);
    }
  }, [value, onClick]);
  var isSuper = value === 'super';
  var superText = t('we_toolbar_superscript'); // 上标文案

  var subText = t('we_toolbar_subscript'); // 下标文案

  var handleChooseScript = useCallback(function (script) {
    if (onClick) {
      onClick(script);
    }

    setValue(script);
  }, [onClick, setValue]);
  var handleChooseSuper = useCallback(function () {
    if (value !== 'super') {
      handleChooseScript('super');
      setActive(false);
    }
  }, [value, handleChooseScript]);
  var handleChooseSub = useCallback(function () {
    if (value !== 'sub') {
      handleChooseScript('sub');
      setActive(false);
    }
  }, [value, handleChooseScript]);
  var chooses = [{
    title: superText,
    value: 'super',
    Icon: ToolbarSuperscriptNormal,
    onClick: handleChooseSuper
  }, {
    title: subText,
    value: 'sub',
    Icon: ToolbarSubscriptNormal,
    onClick: handleChooseSub
  }];
  /**
   * 下拉选项
   */

  var DropContent = useMemo(function () {
    return /*#__PURE__*/_createElement(Menu, {
      showSelect: true,
      style: {
        minWidth: 'auto'
      },
      minWidth: 100
    }, chooses.map(function (item) {
      return /*#__PURE__*/_createElement(MenuItem, {
        testid: "option-" + item.value,
        menuKey: "option-" + item.value,
        icon: /*#__PURE__*/_createElement(item.Icon, {
          className: "script-icon"
        }),
        selected: value === item.value,
        onClick: item.onClick,
        style: {
          minWidth: 'auto'
        }
      }, /*#__PURE__*/_createElement("div", null, item.title));
    }));
  }, [value]);
  var iconMeno = useMemo(function () {
    return isSuper ? _ToolbarSuperscriptNo || (_ToolbarSuperscriptNo = /*#__PURE__*/_createElement(ToolbarSuperscriptNormal, null)) : _ToolbarSubscriptNorm || (_ToolbarSubscriptNorm = /*#__PURE__*/_createElement(ToolbarSubscriptNormal, null));
  }, [isSuper]);
  return /*#__PURE__*/_createElement(SplitButton, _extends({
    overlay: DropContent,
    onClickLeft: handleClickLeft,
    onActiveChange: setActive,
    size: size,
    disabled: disabled,
    title: title || (isSuper ? superText : subText),
    icon: iconMeno,
    testid: "ScriptSelect"
  }, props, {
    active: active,
    activeLeft: activeLeft
  }));
};

ScriptSelect.defaultProps = {
  defaultValue: 'super',
  titles: {}
};
export default ScriptSelect;