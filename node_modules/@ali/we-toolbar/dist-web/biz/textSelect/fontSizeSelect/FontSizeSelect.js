import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useCallback, useState, useRef, useEffect, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import useControlledValue from "../../../hooks/useControlledValue";
import TextSelect from "../../../common/textSelect";
import { debounce, SelectOption } from '@ali/we-design';
export var DEFAULT_SIZES = ['12', '14', '16', '18', '20', '24', '30', '36'];
export var CHINESE_SIZES = ['初号', '小初', '一号', '小一', '二号', '小二', '三号', '小三', '四号', '小四', '五号', '小五', '六号', '小六', '七号', '八号'];
var CHINESE_SIZES_NUMBERS_MAPPER = ['42', '36', '26', '24', '22', '18', '16', '15', '14', '12', '10.5', '9', '7.5', '6.5', '5.5', '5'];

var ch2num = function ch2num(size) {
  var index = CHINESE_SIZES.indexOf(size);
  return CHINESE_SIZES_NUMBERS_MAPPER[index];
};

var num2ch = function num2ch(size) {
  var index = CHINESE_SIZES_NUMBERS_MAPPER.indexOf(size);
  return CHINESE_SIZES[index] || size;
}; // 增加对于.5的小数正则校验


var isNumberSize = function isNumberSize(num) {
  return /^[0-9]+$|^([0-9]+[.][5])$/.test(num);
};

var fontSizeRules = [{
  validator: function validator(e) {
    var value = Number(isNumberSize(e) ? e : ch2num(e));
    return value >= 5 && value <= 200 && Number.isInteger(value * 2);
  },
  message: 'min step should be 0.5'
}];
var SelectStyled = /*#__PURE__*/styled(TextSelect)(["&.select-wrap{font-size:12px;line-height:20px;}"]); // eslint-disable-next-line max-lines-per-function

var FontSizeSelect = /*#__PURE__*/React.memo(function (props) {
  var sizes = props.sizes,
      onChange = props.onChange,
      bordered = props.bordered,
      allowInput = props.allowInput,
      disabled = props.disabled,
      title = props.title,
      titles = props.titles,
      supportChinese = props.supportChinese,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      role = props.role,
      restProps = _objectWithoutPropertiesLoose(props, ["sizes", "onChange", "bordered", "allowInput", "disabled", "title", "titles", "supportChinese", "style", "role"]); // 受控的值


  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      valueControlled = _useControlledValue[0],
      setValue = _useControlledValue[1]; // 是否使用中文选项


  var usingChinese = localStorage.getItem('we-ui-using-chinese') === 'true'; // 将值都转化为string

  var value = useMemo(function () {
    if (supportChinese && usingChinese) {
      return num2ch("" + valueControlled) || '';
    }

    return "" + valueControlled;
  }, [valueControlled, supportChinese, usingChinese]); // 有没有错误

  var _useState = useState(false),
      hasError = _useState[0],
      setError = _useState[1];

  var rules = allowInput ? fontSizeRules : undefined;
  var mode = allowInput ? 'input' : undefined;
  var renderTrigger = allowInput ? undefined : function (val) {
    return /*#__PURE__*/_createElement("div", {
      style: _extends({
        boxSizing: 'border-box',
        minWidth: '35px',
        padding: '0 4px',
        fontSize: '13px',
        fontFamily: 'Arial'
      }, style)
    }, val);
  };
  var lastVal = useRef(valueControlled);
  /**
   * 自动修复数据
   */
  // eslint-disable-next-line react-hooks/exhaustive-deps

  var autoFixValue = useCallback(debounce(function (fixValue) {
    setValue(fixValue);
    setError(false);
  }, 1000), [setValue, setError]);
  useEffect(function () {
    return function () {
      return autoFixValue.cancel();
    };
  }, [autoFixValue]);
  var handleChange = useCallback(function (e, error) {
    if (error) {
      setError(true);
      autoFixValue(lastVal.current);
    } else {
      var isNumber = isNumberSize(e);
      localStorage.setItem('we-ui-using-chinese', (!isNumber).toString());
      var newValue = Number(isNumber ? e : ch2num(e));

      if (onChange) {
        onChange(newValue);
      }

      lastVal.current = newValue;
      setValue(newValue);
    }
  }, [onChange, setValue, autoFixValue]);
  var options = useMemo(function () {
    var fontSizesArray = [].concat(supportChinese ? CHINESE_SIZES : [], sizes || DEFAULT_SIZES).map(function (size) {
      return "" + size;
    });
    return fontSizesArray.map(function (size) {
      return /*#__PURE__*/_createElement(SelectOption, {
        value: size,
        key: "" + size,
        testid: size,
        title: titles[size]
      }, /*#__PURE__*/_createElement("span", null, size));
    });
  }, [sizes, titles, supportChinese]);
  return /*#__PURE__*/_createElement(SelectStyled, _extends({
    value: value,
    onChange: handleChange,
    bordered: bordered,
    mode: mode,
    rules: rules,
    disabled: disabled,
    testid: "FontSizeSelect",
    title: title,
    errored: hasError,
    renderTrigger: renderTrigger
  }, restProps, {
    "data-role": role || 'font_size_select'
  }), options);
});
FontSizeSelect.defaultProps = {
  defaultValue: 12,
  titles: {}
};
export default FontSizeSelect;