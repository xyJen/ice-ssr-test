import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SelectOption } from '@ali/we-design';
import { OptionWrap, OptionTitle, OptionExample } from "./styled";
import TextSelect from "../../../common/textSelect";
import { useTranslate } from '@ali/we-util';
export var NumberFormatSelect = /*#__PURE__*/React.memo(function (props) {
  var targetValue = props.targetValue,
      format = props.format,
      onChange = props.onChange,
      bordered = props.bordered,
      numberFormatter = props.numberFormatter,
      locale = props.locale,
      restProps = _objectWithoutPropertiesLoose(props, ["targetValue", "format", "onChange", "bordered", "numberFormatter", "locale"]);

  var t = useTranslate(locale);
  var NUMBER_FORMATS = useMemo(function () {
    return [{
      values: ['General'],
      title: t('we_toolbar_routine')
    }, {
      values: ['0'],
      title: t('we_toolbar_number'),
      example: '1234'
    }, {
      values: ['0.00'],
      title: t('we_toolbar_number') + "\uFF08" + t('we_toolbar_decimal_point') + "\uFF09",
      example: '1234.56'
    }, {
      values: ['0%'],
      title: t('we_toolbar_percentage'),
      example: '12%'
    }, {
      values: ['0.00%'],
      title: t('we_toolbar_percentage') + "\uFF08" + t('we_toolbar_decimal_point') + "\uFF09",
      example: '12.34%'
    }, {
      values: ['0.00E+00'],
      title: t('we_toolbar_scientific_counting'),
      example: '1.01E+03'
    }, {
      values: ['짜0'],
      title: t('we_toolbar_rmb'),
      example: '짜1,234'
    }, {
      values: ['짜0.00'],
      title: t('we_toolbar_rmb') + "\uFF08" + t('we_toolbar_decimal_point') + "\uFF09",
      example: '짜1,234.56'
    }, {
      values: ['$0'],
      title: t('we_toolbar_dollar'),
      example: '$1,234'
    }, {
      values: ['$0.00'],
      title: t('we_toolbar_dollar') + "\uFF08" + t('we_toolbar_decimal_point') + "\uFF09",
      example: '$1,234.56'
    }, {
      values: ['yyyy/m/d', "m\u6708d\u65E5", 'm/d/yyyy'],
      title: t('we_toolbar_date'),
      example: '2020/05/20'
    }, {
      values: ['hh:mm:ss', 'h:mm', 'h:mm:ss', 'h:mm:ss.0'],
      title: t('we_toolbar_time'),
      example: '13:14:00'
    }, {
      values: ['yyyy/m/d hh:mm:ss', 'yyyy/m/d h:mm:ss.0', 'yyyy/m/d h:mm', 'yyyy/m/d h:mm:ss'],
      title: t('we_toolbar_date_time'),
      example: '2020/05/20 13:14:00'
    }, {
      values: ['@'],
      title: t('we_toolbar_text')
    }];
  }, [t]);
  var finalValue = format || 'General';
  var renderTrigger = useCallback(function (v) {
    var found = NUMBER_FORMATS.find(function (f) {
      return f.values.includes(v || 'General');
    });

    if (found) {
      return /*#__PURE__*/_createElement("span", null, found.title);
    }

    return /*#__PURE__*/_createElement("span", null, NUMBER_FORMATS[0].title);
  }, []);

  var isNil = function isNil(v) {
    return v === undefined || v === null;
  };

  var isNumber = function isNumber(v) {
    return typeof v === 'number';
  };

  return /*#__PURE__*/_createElement(TextSelect, _extends({
    value: finalValue,
    onChange: onChange,
    renderTrigger: renderTrigger,
    bordered: bordered,
    testid: "NumberFormatSelect"
  }, restProps), NUMBER_FORMATS.map(function (_ref) {
    var title = _ref.title,
        v = _ref.values,
        example = _ref.example;
    var formatedValue = example != null ? example : '';
    var key = v.includes(finalValue) ? finalValue : v[0];

    if (!isNil(targetValue) && targetValue !== '') {
      formatedValue = isNumber(targetValue) ? numberFormatter.format(targetValue, key) : targetValue;
    }

    return /*#__PURE__*/_createElement(SelectOption, {
      key: key,
      value: key,
      testid: "NumberFormatSelectOption_" + key
    }, /*#__PURE__*/_createElement(OptionWrap, null, /*#__PURE__*/_createElement(OptionTitle, null, title), /*#__PURE__*/_createElement(OptionExample, null, formatedValue)));
  }));
});