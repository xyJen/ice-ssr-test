import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import getAsync from 'get-async';
import { getSharedFontDetector } from "../../../utils/FontDetector";
import { getFontFamily } from "./getFontFamily"; // 并发请求时，保证只有一次 font 计算

export var detectFonts = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var asyncTaskKey, rsts;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            asyncTaskKey = '@/ali/we-toolbar/detect-font';
            rsts = getAsync(asyncTaskKey, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
              var detector, fonts, result;
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      detector = getSharedFontDetector();
                      fonts = getFontFamily(function (s) {
                        return s;
                      }).map(function (s) {
                        return s.value;
                      });
                      _context.next = 4;
                      return new Promise(function (resolve) {
                        detector.detect(fonts, function (rst) {
                          resolve(rst);
                          detector.destroy();
                        });
                      });

                    case 4:
                      result = _context.sent;
                      return _context.abrupt("return", result);

                    case 6:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })));
            return _context2.abrupt("return", rsts);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function detectFonts() {
    return _ref.apply(this, arguments);
  };
}();