import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/* eslint-disable max-lines-per-function */
import React, { useCallback, useState, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import useControlledValue from "../../../hooks/useControlledValue";
import { SelectOption } from '@ali/we-design';
import TextSelect from "../../../common/textSelect";
import { OptionWrap, TriggerWrap } from "./styled";
import { useFontFamily } from "./hooks";
import { useGetContextLocale } from '@ali/we-util';
import { DownloadButton } from "./DownloadButton";
import { detectFonts } from "./detectFont";
export var FontFamilySelect = /*#__PURE__*/React.memo(function (props) {
  var locale = props.locale,
      onChange = props.onChange,
      disabled = props.disabled,
      titles = props.titles,
      title = props.title,
      size = props.size,
      active = props.active,
      _props$disabledKeys = props.disabledKeys,
      disabledKeys = _props$disabledKeys === void 0 ? [] : _props$disabledKeys,
      width = props.width,
      handleDownload = props.handleDownload,
      _props$downloadFontIn = props.downloadFontInfos,
      downloadFontInfos = _props$downloadFontIn === void 0 ? {} : _props$downloadFontIn,
      role = props.role,
      restProps = _objectWithoutPropertiesLoose(props, ["locale", "onChange", "disabled", "titles", "title", "size", "active", "disabledKeys", "width", "handleDownload", "downloadFontInfos", "role"]);

  var _useControlledValue = useControlledValue(props.value, props.defaultValue),
      value = _useControlledValue[0],
      setValue = _useControlledValue[1];

  var contextLocale = useGetContextLocale();

  var _useFontFamily = useFontFamily(locale || contextLocale),
      options = _useFontFamily[0],
      t = _useFontFamily[1];

  var _useState = useState({
    "default": true
  }),
      installedRecord = _useState[0],
      setInstalledRecord = _useState[1]; // font detected


  var _useState2 = useState(false),
      fontDetected = _useState2[0],
      setFontDetected = _useState2[1]; // 该组件的trigger区域只显示Icon


  var renderTrigger = useCallback(function (align) {
    var index = options.findIndex(function (option) {
      return option.value === align;
    });
    var currentOption = options[index];
    var useDefault = props.defaultValue ? options[0] : undefined;
    return /*#__PURE__*/_createElement(TriggerWrap, null, (currentOption == null ? void 0 : currentOption.title) || (useDefault == null ? void 0 : useDefault.title) || align);
  }, [options]);
  var isFontDisable = useCallback(function (font) {
    var _downloadFontInfos$fo;

    return !installedRecord[font] && ((_downloadFontInfos$fo = downloadFontInfos[font]) == null ? void 0 : _downloadFontInfos$fo.status) !== 'downloaded' || disabledKeys.indexOf(font) > -1;
  }, [installedRecord, downloadFontInfos, disabledKeys]);
  var handleChange = useCallback(function (e) {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [onChange, setValue]); // 首次打开面板/value 不为 default 时，再做 font detect

  var detectFont = useCallback(function () {
    if (fontDetected) {
      return;
    }

    detectFonts().then(function (results) {
      var newInstalledRecord = {};
      results.forEach(function (result, index) {
        if (index !== 0) {
          newInstalledRecord[options[index].value] = result;
        }
      });
      newInstalledRecord["default"] = true;
      setInstalledRecord(newInstalledRecord);
      setFontDetected(true);
    });
    return function () {
      setInstalledRecord({
        "default": true
      });
    };
  }, [fontDetected]);
  useEffect(function () {
    // 字体懒加载会导致字体列表延迟 1-2s 出现(大文档场景)
    if (value && value !== 'default') {
      detectFont();
    }
  }, [value]);
  return /*#__PURE__*/_createElement(TextSelect, _extends({
    width: width,
    value: value,
    size: size,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    optionWrapperStyle: {
      minWidth: 200
    },
    disabled: disabled,
    testid: "FontFamilySelect",
    title: title,
    locale: locale,
    active: active,
    role: role,
    onVisibleChange: function onVisibleChange(visible) {
      if (visible) {
        detectFont();
      }
    }
  }, restProps), options // 是否展示在列表：用户已安装、可下载的字体
  .filter(function (option) {
    return installedRecord[option.value] || option.installable;
  }).map(function (option) {
    var _downloadFontInfos$op;

    return /*#__PURE__*/_createElement(SelectOption, {
      value: option.value,
      key: option.value,
      disabled: isFontDisable(option.value),
      disabledTip: t('we_toolbar_font_family_UninstallFonts'),
      testid: option.value,
      title: titles[option.value]
    }, /*#__PURE__*/_createElement(OptionWrap, {
      disabled: isFontDisable(option.value)
    }, /*#__PURE__*/_createElement("span", {
      style: {
        fontFamily: option.value,
        color: 'inherit'
      }
    }, option.title)), // 具有下载能力且尚未安装
    handleDownload && !installedRecord[option.value] && /*#__PURE__*/_createElement(DownloadButton, {
      handleDownload: handleDownload,
      fontFamily: option.value,
      status: (_downloadFontInfos$op = downloadFontInfos[option.value]) == null ? void 0 : _downloadFontInfos$op.status
    }));
  }));
});
FontFamilySelect.defaultProps = {
  titles: {}
};