import { withTheme } from "@ali/we-design";
import { useTranslate } from "@ali/we-util";
import React, { useCallback, useMemo } from "react";
var _createElement = /*#__PURE__*/React.createElement;
import styled from "styled-components";
var DownloadTip = withTheme(styled.span(["color:", ";:hover{color:", ";}"], function (_ref) {
  var theme = _ref.theme;
  return theme.ui.disabledColor;
}, function (_ref2) {
  var theme = _ref2.theme,
      status = _ref2.status;
  return status === 'unDownload' ? theme.ui.textColor : theme.ui.disabledColor;
}));
export var DownloadButton = function DownloadButton(props) {
  var _props$status = props.status,
      status = _props$status === void 0 ? 'unDownload' : _props$status,
      _props$fontFamily = props.fontFamily,
      fontFamily = _props$fontFamily === void 0 ? 'Arials' : _props$fontFamily;
  var t = useTranslate(undefined);
  var statusMap = useMemo(function () {
    return {
      unDownload: t('we_toolbar_font_download'),
      downloading: t('we_toolbar_font_downloading'),
      downloaded: ''
    };
  }, [t]);
  var handleDownload = useCallback(function (e) {
    if (status === 'unDownload') {
      props.handleDownload(fontFamily);
    }

    e.stopPropagation();
  }, []);
  return /*#__PURE__*/_createElement(DownloadTip, {
    status: status,
    onClick: handleDownload,
    style: {
      cursor: status === 'unDownload' ? 'pointer' : 'unt-allowed'
    }
  }, statusMap[status]);
};