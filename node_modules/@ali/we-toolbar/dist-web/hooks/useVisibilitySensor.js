import { useCallback, useMemo, useRef, useContext } from 'react';
import { ToolbarContext, GroupWrapperContext, OverLayContext } from "../biz/layout/contexts";
import { uuid } from "../utils"; // @ts-ignore

export default (function (ref, testid) {
  var el = useRef();

  var _useContext = useContext(GroupWrapperContext),
      fineAdaptation = _useContext.fineAdaptation,
      groupKey = _useContext.groupKey;

  var _useContext2 = useContext(OverLayContext),
      inOverlay = _useContext2.inOverlay,
      overlayHideBlocks = _useContext2.overlayHideBlocks,
      ignoreRegister = _useContext2.ignoreRegister;

  var _useContext3 = useContext(ToolbarContext),
      _useContext3$hideBloc = _useContext3.hideBlocks,
      hideBlocks = _useContext3$hideBloc === void 0 ? [] : _useContext3$hideBloc,
      mode = _useContext3.mode,
      isInOffScreenWrap = _useContext3.isInOffScreenWrap;

  var id = useMemo(function () {
    return [mode, groupKey, testid || uuid()].filter(function (o) {
      return o;
    }).join('-');
  }, [groupKey, mode]);
  var isHide = useCallback(function () {
    if (!fineAdaptation) return false;

    if (inOverlay) {
      return overlayHideBlocks.indexOf(id) !== -1;
    } else {
      return hideBlocks.indexOf(id) !== -1;
    }
  }, [inOverlay, overlayHideBlocks, hideBlocks, groupKey, fineAdaptation, testid]);
  return {
    el: ref || el,
    id: id,
    isHide: isHide(),
    fineAdaptation: fineAdaptation,
    groupKey: [mode, groupKey].filter(function (o) {
      return o;
    }).join('-'),
    mode: mode,
    ignoreRegister: ignoreRegister,
    inOverlay: inOverlay,
    isInOffScreenWrap: isInOffScreenWrap
  };
});