import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

var _OnIdlePlaceholder;

import React, { useCallback, useMemo, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Select as SelectUI, Tooltip, theme } from '@ali/we-design';
import { useTranslate, useGetContextLocale } from '@ali/we-util';
import { ToolbarIconContext } from '@ali/we-icon';
import { ButtonWrap, TextWarp, TitleWrap } from "./styled";
import { TOOL_SIZE } from "../../utils/consts";
import { classnames } from "../../utils";
import useVisibilitySensor from "../../hooks/useVisibilitySensor";
import { DisableWrap } from "../styled";
import OnIdle, { OnIdlePlaceholder } from "../onIdle";
export var IconSelect = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var title = props.title,
      showTitle = props.showTitle,
      disabled = props.disabled,
      size = props.size,
      active = props.active,
      disabledTip = props.disabledTip,
      renderTrigger = props.renderTrigger,
      children = props.children,
      value = props.value,
      propsVisiable = props.visible,
      onChange = props.onChange,
      locale = props.locale,
      tooltip = props.tooltip,
      shortcutText = props.shortcutText,
      testid = props.testid,
      width = props.width,
      style = props.style,
      borderRadius = props.borderRadius,
      extraNode = props.extraNode,
      animationPlacement = props.animationPlacement,
      getContainer = props.getContainer,
      role = props.role,
      restProps = _objectWithoutPropertiesLoose(props, ["title", "showTitle", "disabled", "size", "active", "disabledTip", "renderTrigger", "children", "value", "visible", "onChange", "locale", "tooltip", "shortcutText", "testid", "width", "style", "borderRadius", "extraNode", "animationPlacement", "getContainer", "role"]);

  var contextLocale = useGetContextLocale();
  var t = useTranslate(contextLocale);

  var _useState = useState(propsVisiable),
      visible = _useState[0],
      setVisible = _useState[1];

  var _useVisibilitySensor = useVisibilitySensor(ref, testid),
      el = _useVisibilitySensor.el,
      id = _useVisibilitySensor.id,
      isHide = _useVisibilitySensor.isHide,
      fineAdaptation = _useVisibilitySensor.fineAdaptation,
      groupKey = _useVisibilitySensor.groupKey,
      isInOffScreenWrap = _useVisibilitySensor.isInOffScreenWrap,
      mode = _useVisibilitySensor.mode;

  var styleProps = {
    size: size,
    active: active,
    showTitle: showTitle,
    locale: locale || contextLocale
  };
  var titleNode = useMemo(function () {
    return /*#__PURE__*/_createElement("div", null, title && typeof title !== 'string' ? title : t(title));
  }, [t, title]);
  var makeTrigger = useCallback(function (val) {
    return /*#__PURE__*/_createElement(React.Fragment, null, renderTrigger && renderTrigger(val), ' ', showTitle && size !== TOOL_SIZE.LARGE ? /*#__PURE__*/_createElement(TextWarp, styleProps, titleNode) : null);
  }, [renderTrigger, title, showTitle]);
  var tooltipForButton = '';

  if (typeof tooltip === 'string') {
    tooltipForButton = t(tooltip);

    if (shortcutText != null) {
      tooltipForButton += " " + shortcutText;
    }
  } else {
    tooltipForButton = tooltip;
  }

  var ToolbarIconMemo = useMemo(function () {
    return {
      size: size || 'medium'
    };
  }, [size]);
  var styleWrap = useMemo(function () {
    return _extends({}, style, {
      width: width,
      borderRadius: borderRadius
    }, visible ? {
      backgroundColor: theme.toolbarButtonClick
    } : {});
  }, [style, visible, width, borderRadius]);
  if (isHide) return null;
  return /*#__PURE__*/_createElement(ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement(Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement(DisableWrap, {
    disabled: disabled,
    className: classnames('icon-select-layout')
  }, /*#__PURE__*/_createElement(ButtonWrap, _extends({
    ref: el,
    "data-id": id,
    "data-mode": mode,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey,
    "data-role": role
  }, styleProps), showTitle && size === TOOL_SIZE.LARGE && /*#__PURE__*/_createElement(TitleWrap, _extends({}, styleProps, {
    onClick: function onClick() {
      return setVisible(true);
    }
  }), /*#__PURE__*/_createElement("div", null, titleNode)), /*#__PURE__*/_createElement(SelectUI, _extends({}, restProps, {
    className: "select-toolbar",
    onChange: onChange,
    value: value,
    style: styleWrap,
    renderTrigger: makeTrigger,
    title: disabled ? disabledTip : tooltipForButton,
    visible: visible,
    onVisibleChange: function onVisibleChange(visible) {
      return setVisible(visible);
    },
    testid: isInOffScreenWrap ? '' : testid,
    overlayClassName: "select-toolbar-overlay",
    animationPlacement: animationPlacement,
    getContainer: getContainer
  }), /*#__PURE__*/_createElement(React.Fragment, null), /*#__PURE__*/_createElement(OnIdle, {
    placeholder: _OnIdlePlaceholder || (_OnIdlePlaceholder = /*#__PURE__*/_createElement(OnIdlePlaceholder, null))
  }, children)), extraNode))));
}));
IconSelect.defaultProps = {
  size: 'medium'
};
export default IconSelect;