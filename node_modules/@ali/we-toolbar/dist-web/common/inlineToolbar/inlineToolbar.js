import _extends from "@babel/runtime/helpers/extends";

var _TemplateCloseNormal, _ToolbarDownloadNorma, _OpenNormal, _RefreshNormalNormal, _ToolbarDeleteNormal, _ToolbarCopyNormal, _ToolbarCutNormal, _IconBox, _IconBox2, _IconBox3, _IconBox4, _MenuDivider, _IconBox5, _MenuDivider2, _TextIcon, _CardIcon, _PreviewIcon, _ToolbarMoreNormal, _StyleIcon;

import React, { useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ToolbarContainer, SelectGalleryBox, StyleSelectFontBox, ChildrenBoxSize, IconBox, MenuFoldedContentContainer, MoreMenuIconContainer, StyleSelectIconContainer } from "./styled";
import { ToolbarMoreNormal, SelectGallery, Menu, MenuItem, MenuDivider, SubMenu // inline toolbar icons
, TemplateCloseNormal, RefreshNormalNormal, ToolbarCopyNormal, ToolbarDeleteNormal, ToolbarCutNormal, ToolbarDownloadNormal, OpenNormal } from '@ali/we-design';
import { useTranslate } from '@ali/we-util';
import { IconMenu } from "../iconMenu";
import { StyleIcon, TextIcon, PreviewIcon, CardIcon, CardSmallIcon, PreviewSmallIcon, TextSmallIcon } from "./styleSelectIcon";
import { InlineToolbarContext } from "./inlineToolbarContext";
export var InlineToolbar = function InlineToolbar(props) {
  var _MenuFoldedContentCon;

  var _React$useContext = React.useContext(InlineToolbarContext),
      widthFromContext = _React$useContext.width,
      onVisibleChange = _React$useContext.onVisibleChange;

  var minWidth = 323;
  var type = props.type,
      children = props.children,
      _props$width = props.width,
      widthFromProps = _props$width === void 0 ? 0 : _props$width,
      _props$moreMenuConfig = props.moreMenuConfig,
      moreMenuConfig = _props$moreMenuConfig === void 0 ? {
    options: []
  } : _props$moreMenuConfig,
      _props$styleSelectCon = props.styleSelectConfig,
      styleSelectConfig = _props$styleSelectCon === void 0 ? {
    options: []
  } : _props$styleSelectCon,
      locale = props.locale,
      getContainer = props.getContainer;
  var width = widthFromContext || widthFromProps;

  var _useState = useState(styleSelectConfig.defaultValue || 0),
      styleSelectedValue = _useState[0],
      setStyleSelectedValue = _useState[1]; // const [isStyleSelectShow, setIsStyleSelectShow] = useState(false);
  // const [isMoreMenuShow, setIsMoreMenuShow] = useState(false);


  var t = useTranslate(locale);

  var menuGroupRender = function menuGroupRender(items) {
    return items.map(function (item, index) {
      var _item$name = item.name,
          name = _item$name === void 0 ? "other-" + index : _item$name,
          _item$icon = item.icon,
          icon = _item$icon === void 0 ? _TemplateCloseNormal || (_TemplateCloseNormal = /*#__PURE__*/_createElement(TemplateCloseNormal, null)) : _item$icon,
          _item$title = item.title,
          title = _item$title === void 0 ? 'Error: Title needs' : _item$title,
          onClick = item.onClick;

      switch (name) {
        case 'download':
          icon = _ToolbarDownloadNorma || (_ToolbarDownloadNorma = /*#__PURE__*/_createElement(ToolbarDownloadNormal, null));
          title = t('we_toolbar_download');
          break;

        case 'open':
          icon = _OpenNormal || (_OpenNormal = /*#__PURE__*/_createElement(OpenNormal, null));
          title = t('we_toolbar_open');
          break;

        case 'refresh':
          icon = _RefreshNormalNormal || (_RefreshNormalNormal = /*#__PURE__*/_createElement(RefreshNormalNormal, null));
          title = t('we_toolbar_refresh');
          break;

        case 'delete':
          icon = _ToolbarDeleteNormal || (_ToolbarDeleteNormal = /*#__PURE__*/_createElement(ToolbarDeleteNormal, null));
          title = t('we_toolbar_delete');
          break;

        case 'copy':
          icon = _ToolbarCopyNormal || (_ToolbarCopyNormal = /*#__PURE__*/_createElement(ToolbarCopyNormal, null));
          title = t('we_toolbar_copy');
          break;

        case 'cut':
          icon = _ToolbarCutNormal || (_ToolbarCutNormal = /*#__PURE__*/_createElement(ToolbarCutNormal, null));
          title = t('we_toolbar_cut');
          break;
      }

      return /*#__PURE__*/_createElement(MenuItem, {
        key: name,
        menuKey: name,
        icon: icon,
        onClick: onClick
      }, title);
    });
  };

  var getStyleSelectSubMenuIcon = function getStyleSelectSubMenuIcon(key) {
    switch (key) {
      case 'text':
        return _IconBox || (_IconBox = /*#__PURE__*/_createElement(IconBox, null, /*#__PURE__*/_createElement(TextSmallIcon, null)));

      case 'card':
        return _IconBox2 || (_IconBox2 = /*#__PURE__*/_createElement(IconBox, null, /*#__PURE__*/_createElement(CardSmallIcon, null)));

      case 'preview':
        return _IconBox3 || (_IconBox3 = /*#__PURE__*/_createElement(IconBox, null, /*#__PURE__*/_createElement(PreviewSmallIcon, null)));

      default:
        return _IconBox4 || (_IconBox4 = /*#__PURE__*/_createElement(IconBox, null, "233"));
    }
  };

  var moreMenuOverlay = function moreMenuOverlay() {
    var options = moreMenuConfig.options;
    var onChange = styleSelectConfig.onChange;
    return /*#__PURE__*/_createElement(ChildrenBoxSize, null, /*#__PURE__*/_createElement(Menu, {
      style: {
        width: '100%'
      },
      selectedKeys: ["" + styleSelectedValue]
    }, width < minWidth && /*#__PURE__*/_createElement(React.Fragment, null, children && (_MenuFoldedContentCon || (_MenuFoldedContentCon = /*#__PURE__*/_createElement(MenuFoldedContentContainer, null, children))), children && styleSelectConfig.options.length > 0 && (_MenuDivider || (_MenuDivider = /*#__PURE__*/_createElement(MenuDivider, null))), styleSelectConfig.options.length > 0 && /*#__PURE__*/_createElement(SubMenu, {
      icon: _IconBox5 || (_IconBox5 = /*#__PURE__*/_createElement(IconBox, null, /*#__PURE__*/_createElement(StyleIcon, null))),
      menuKey: "style_select",
      key: "style_select",
      title: t('we_toolbar_style_select'),
      showSelect: true
    }, styleSelectConfig.options.map(function (item, index) {
      return /*#__PURE__*/_createElement(MenuItem, {
        icon: getStyleSelectSubMenuIcon(item),
        menuKey: "" + index,
        key: index,
        onClick: function onClick(key) {
          onChange && onChange(key);
          setStyleSelectedValue(index);
        }
      }, t("we_toolbar_" + item));
    }))), (children || styleSelectConfig.options.length > 0) && width < minWidth && options.length > 0 && (_MenuDivider2 || (_MenuDivider2 = /*#__PURE__*/_createElement(MenuDivider, null))), options.length > 0 && options.reduce(function (pre, items, index) {
      if (index !== 0) {
        pre = pre.concat([/*#__PURE__*/_createElement(MenuDivider, {
          key: index
        })]);
      }

      return pre.concat(menuGroupRender(items));
    }, [])));
  };

  var getNode = function getNode(item) {
    var text = '';

    var image = /*#__PURE__*/_createElement(React.Fragment, null);

    switch (item) {
      case 'text':
        text = t('we_toolbar_text');
        image = _TextIcon || (_TextIcon = /*#__PURE__*/_createElement(TextIcon, null));
        break;

      case 'card':
        text = t('we_toolbar_card');
        image = _CardIcon || (_CardIcon = /*#__PURE__*/_createElement(CardIcon, null));
        break;

      case 'preview':
        text = t('we_toolbar_preview');
        image = _PreviewIcon || (_PreviewIcon = /*#__PURE__*/_createElement(PreviewIcon, null));
        break;

      default:
        text = item;
        image = /*#__PURE__*/_createElement(React.Fragment, null);
        break;
    }

    return /*#__PURE__*/_createElement(SelectGalleryBox, {
      key: text
    }, image, /*#__PURE__*/_createElement(StyleSelectFontBox, null, text));
  };

  var moreMenuRender = function moreMenuRender() {
    return /*#__PURE__*/_createElement(MoreMenuIconContainer, {
      onClick: function onClick(e) {
        return e.stopPropagation();
      },
      onMouseDown: function onMouseDown(e) {
        return e.stopPropagation();
      } // onMouseEnter={() => {clearTimeout(moreMenuClose); setIsStyleSelectShow(false); setIsMoreMenuShow(true)}}
      // onMouseLeave={() => moreMenuClose = setTimeout(() => setIsMoreMenuShow(false), 300)}

    }, /*#__PURE__*/_createElement(IconMenu, {
      key: "more-menu",
      placement: "bottomLeft",
      getContainer: getContainer // visible={isMoreMenuShow}
      // autoClose={false}
      ,
      icon: _ToolbarMoreNormal || (_ToolbarMoreNormal = /*#__PURE__*/_createElement(ToolbarMoreNormal, null)),
      overlay: moreMenuOverlay(),
      showArrow: false,
      onVisibleChange: onVisibleChange
    }));
  };

  var StyleSelectRender = function StyleSelectRender() {
    var options = styleSelectConfig.options,
        _onChange = styleSelectConfig.onChange;
    return (options == null ? void 0 : options.length) > 0 ? /*#__PURE__*/_createElement(StyleSelectIconContainer, {
      onClick: function onClick(e) {
        return e.stopPropagation();
      },
      onMouseDown: function onMouseDown(e) {
        return e.stopPropagation();
      } // onMouseEnter={() => {clearTimeout(styleSelectClose); setIsMoreMenuShow(false);setIsStyleSelectShow(true)}}
      // onMouseLeave={() => styleSelectClose = setTimeout(() => setIsStyleSelectShow(false), 300)}

    }, /*#__PURE__*/_createElement(IconMenu, {
      key: "style-select",
      placement: "bottomLeft" // autoClose={false}
      // visible={isStyleSelectShow}
      ,
      getContainer: getContainer,
      overlay: /*#__PURE__*/_createElement(SelectGallery, {
        groups: [{
          title: t('we_toolbar_style_select'),
          showDivider: false,
          items: options.map(function (item, index) {
            return {
              id: index,
              node: getNode(item),
              testID: "inlineToolbarSeletOptions-" + index
            };
          })
        }],
        itemsPerRow: options.length,
        value: styleSelectedValue,
        onChange: function onChange(e) {
          setStyleSelectedValue(e);
          _onChange && _onChange("" + e);
        }
      }),
      icon: _StyleIcon || (_StyleIcon = /*#__PURE__*/_createElement(StyleIcon, null)),
      overlayStyle: {
        border: 0,
        boxShadow: 'unset',
        backgroundColor: 'unset'
      },
      onVisibleChange: onVisibleChange
    })) : /*#__PURE__*/_createElement(React.Fragment, null);
  };

  var menuCount = React.Children.count(children) + Number(styleSelectConfig.options.length > 0) + Number(moreMenuConfig.options.length > 0);
  var childrenList = [];
  children && React.Children.forEach(children, function (child, index) {
    childrenList.push( /*#__PURE__*/React.cloneElement(child, _extends({}, child.props, {
      key: index,
      onVisibleChange: onVisibleChange
    })));
  });
  styleSelectConfig.options.length > 0 && childrenList.push(StyleSelectRender());
  moreMenuConfig.options.length > 0 && childrenList.push(moreMenuRender());
  return /*#__PURE__*/_createElement(ToolbarContainer, {
    className: "inline-toolbar-container",
    type: type
  }, width < minWidth && menuCount > 1 ? moreMenuRender() : childrenList);
};