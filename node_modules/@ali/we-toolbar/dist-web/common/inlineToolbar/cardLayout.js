import React, { useState, useEffect, useRef, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { CardLayoutContainer, ToolbarBox } from "./styled";
import ResizeObserve from 'resize-observer-polyfill';
import { uuid } from '@ali/we-design';
import { InlineToolbarContext } from "./inlineToolbarContext";
export var CardLayout = function CardLayout(props) {
  var children = props.children,
      toolbar = props.toolbar,
      isSelected = props.isSelected,
      onToolbarWidthChange = props.onToolbarWidthChange,
      onHoverChange = props.onHoverChange,
      toolbarVisible = props.toolbarVisible,
      style = props.style,
      toolbarOffsetX = props.toolbarOffsetX,
      toolbarOffsetY = props.toolbarOffsetY;
  var id = useMemo(function () {
    return uuid();
  }, []);

  var _useState = useState(0),
      opacity = _useState[0],
      setOpacity = _useState[1];

  var _useState2 = useState(0),
      cardLayoutWidth = _useState2[0],
      setCardLayoutWidth = _useState2[1];

  var _useState3 = useState(0),
      menuFoldedOpacity = _useState3[0],
      setMenuFoldedOpacity = _useState3[1];

  var cardLayoutRef = useRef(null);
  var toolbarBoxRef = useRef(null);
  useEffect(function () {
    if (!cardLayoutRef.current || !toolbarBoxRef.current) return;
    var resizerObserve = new ResizeObserve(function (entries) {
      entries.forEach(function (item) {
        switch (item.target.getAttribute('data-id')) {
          case "card-layout-container-" + id:
            setCardLayoutWidth(item.contentRect.width);
            break;

          case "toolbar-box-" + id:
            onToolbarWidthChange && onToolbarWidthChange(item.contentRect.width);

          default:
            break;
        }
      });
    });

    if (resizerObserve && cardLayoutRef.current && toolbarBoxRef.current) {
      resizerObserve.observe(cardLayoutRef.current);
      resizerObserve.observe(toolbarBoxRef.current);
    }

    return function () {
      if (ResizeObserve) {
        resizerObserve.disconnect();
      }
    };
  }, [cardLayoutRef, toolbarBoxRef]);

  var onVisibleChange = function onVisibleChange(e) {
    setMenuFoldedOpacity(e ? 1 : 0);
  };

  var controlledOpacity = typeof toolbarVisible === 'boolean' ? toolbarVisible ? 1 : 0 : opacity || menuFoldedOpacity;
  return /*#__PURE__*/_createElement(InlineToolbarContext.Provider, {
    value: {
      width: cardLayoutWidth,
      onVisibleChange: onVisibleChange
    }
  }, /*#__PURE__*/_createElement(CardLayoutContainer, {
    style: style,
    isSelected: isSelected,
    className: "card-layout-container",
    "data-id": "card-layout-container-" + id,
    ref: cardLayoutRef,
    onMouseEnter: function onMouseEnter() {
      setOpacity(1);
      onHoverChange && onHoverChange(true);
    },
    onMouseLeave: function onMouseLeave() {
      setOpacity(0);
      onHoverChange && onHoverChange(false);
    }
  }, children, /*#__PURE__*/_createElement(ToolbarBox, {
    onClick: function onClick(e) {
      return e.stopPropagation();
    },
    onMouseDown: function onMouseDown(e) {
      return e.stopPropagation();
    },
    style: {
      opacity: controlledOpacity
    },
    ref: toolbarBoxRef,
    "data-id": "toolbar-box-" + id,
    toolbarOffsetX: toolbarOffsetX,
    toolbarOffsetY: toolbarOffsetY
  }, toolbar)));
};