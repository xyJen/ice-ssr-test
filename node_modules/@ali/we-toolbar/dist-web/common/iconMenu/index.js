import _extends from "@babel/runtime/helpers/extends";

var _OnIdlePlaceholder, _div;

import React, { useCallback, useState, useEffect, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useGetContextLocale, useTranslate, DropdownAnimation } from '@ali/we-util';
import { ToolbarIconContext } from '@ali/we-icon';
import { Dropdown, ArrowDownLineNormal, Tooltip, theme } from '@ali/we-design';
import { ButtonWrap, TextWarp, Warp } from "./styled";
import { TOOL_SIZE } from "../../utils/consts";
import useVisibilitySensor from "../../hooks/useVisibilitySensor";
import IconButton from "../iconButton";
import { DisableWrap } from "../styled";
import OnIdle, { OnIdlePlaceholder } from "../onIdle";
export var IconMenu = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var icon = props.icon,
      title = props.title,
      tooltip = props.tooltip,
      shortcutText = props.shortcutText,
      showTitle = props.showTitle,
      disabled = props.disabled,
      size = props.size,
      overlay = props.overlay,
      onVisibleChange = props.onVisibleChange,
      visible = props.visible,
      active = props.active,
      locale = props.locale,
      titleWidth = props.titleWidth,
      testid = props.testid,
      showArrow = props.showArrow,
      autoClose = props.autoClose,
      disabledTip = props.disabledTip,
      offsetY = props.offsetY,
      overlayStyle = props.overlayStyle,
      placement = props.placement,
      style = props.style,
      offsetX = props.offsetX,
      trigger = props.trigger,
      getContainer = props.getContainer,
      animationPlacement = props.animationPlacement,
      extraNode = props.extraNode,
      _props$role = props.role,
      role = _props$role === void 0 ? '' : _props$role,
      zIndex = props.zIndex;
  var contextLocale = useGetContextLocale();
  var t = useTranslate(contextLocale);

  var _useState = useState(false),
      showOverlay = _useState[0],
      setShowOverlay = _useState[1];

  useEffect(function () {
    return setShowOverlay(!!visible);
  }, [visible]);
  var handleVisibleChange = useCallback(function (e) {
    setShowOverlay(e);
    onVisibleChange && onVisibleChange(e);
  }, [onVisibleChange]);
  var hideOverlay = useCallback(function () {
    if (autoClose) {
      setShowOverlay(false);
      onVisibleChange && onVisibleChange(false);
    }
  }, [autoClose]);

  var _useVisibilitySensor = useVisibilitySensor(ref, testid),
      el = _useVisibilitySensor.el,
      id = _useVisibilitySensor.id,
      isHide = _useVisibilitySensor.isHide,
      fineAdaptation = _useVisibilitySensor.fineAdaptation,
      groupKey = _useVisibilitySensor.groupKey,
      isInOffScreenWrap = _useVisibilitySensor.isInOffScreenWrap,
      mode = _useVisibilitySensor.mode;

  var styleProps = {
    size: size,
    showTitle: showTitle,
    active: active,
    locale: locale || contextLocale,
    showOverlay: showOverlay
  };
  var tooltipForButton = '';

  if (typeof tooltip === 'string') {
    tooltipForButton = t(tooltip);

    if (shortcutText != null) {
      tooltipForButton += " " + shortcutText;
    }
  } else {
    tooltipForButton = tooltip;
  }

  var ToolbarIconMemo = useMemo(function () {
    return {
      size: size || 'medium'
    };
  }, [size]);
  var styleWrap = useMemo(function () {
    return _extends({}, style, showOverlay ? {
      backgroundColor: theme.toolbarButtonClick
    } : {});
  }, [style, showOverlay]);
  var titleNode = useMemo(function () {
    return /*#__PURE__*/_createElement("div", null, title && typeof title !== 'string' ? title : t(title));
  }, [t, title]);
  if (isHide) return null;
  return /*#__PURE__*/_createElement(Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement(DisableWrap, {
    disabled: disabled,
    className: "icon-menu-layout menu-wrap",
    "data-testid": (testid || '') + '_wrap'
  }, /*#__PURE__*/_createElement(Dropdown, {
    getContainer: getContainer,
    trigger: trigger,
    role: role,
    zIndex: zIndex,
    overlay: /*#__PURE__*/_createElement(OnIdle, {
      placeholder: _OnIdlePlaceholder || (_OnIdlePlaceholder = /*#__PURE__*/_createElement(OnIdlePlaceholder, null))
    }, /*#__PURE__*/_createElement(DropdownAnimation, {
      visible: disabled ? false : showOverlay,
      onClick: hideOverlay,
      placement: animationPlacement
    }, overlay)),
    visible: disabled ? false : showOverlay,
    onVisibleChange: handleVisibleChange,
    offsetY: offsetY || (size === TOOL_SIZE.LARGE && showTitle ? -25 : 0),
    testid: isInOffScreenWrap ? '' : testid,
    overlayStyle: overlayStyle,
    placement: placement,
    offsetX: offsetX
  }, showArrow ? /*#__PURE__*/_createElement(Warp, _extends({
    ref: el,
    "data-id": id,
    "data-mode": mode,
    "data-testid": isInOffScreenWrap ? '' : testid,
    key: testid,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey
  }, styleProps, {
    locale: locale || contextLocale
  }), showTitle && size === TOOL_SIZE.LARGE && /*#__PURE__*/_createElement(TextWarp, styleProps, /*#__PURE__*/_createElement("div", null, titleNode)), /*#__PURE__*/_createElement(Tooltip, {
    title: tooltipForButton,
    disabled: showOverlay
  }, /*#__PURE__*/_createElement(ButtonWrap, _extends({}, styleProps, {
    style: styleWrap,
    className: "button-box"
  }), /*#__PURE__*/_createElement("div", {
    className: "left-wrap"
  }, /*#__PURE__*/_createElement(ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement("div", null, icon)), showTitle && size !== TOOL_SIZE.LARGE && /*#__PURE__*/_createElement("div", {
    className: "left-wrap-text",
    style: {
      width: titleWidth
    }
  }, titleNode)), _div || (_div = /*#__PURE__*/_createElement("div", {
    className: "right-wrap"
  }, /*#__PURE__*/_createElement(ArrowDownLineNormal, null))))), extraNode) : /*#__PURE__*/_createElement(IconButton, _extends({}, props, {
    extraNode: extraNode,
    style: styleWrap,
    testid: isInOffScreenWrap ? '' : testid,
    tooltip: showOverlay ? null : tooltipForButton
  })))));
}));
IconMenu.defaultProps = {
  size: 'medium',
  showArrow: true,
  autoClose: true
};
export default IconMenu;