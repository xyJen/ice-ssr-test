import _extends from "@babel/runtime/helpers/extends";
import React, { useState, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { InlinePlaceholderContainer } from "./styled";
import { Dropdown } from '@ali/we-design';
import { DropdownAnimation } from '@ali/we-util';
export var InlinePlaceholder = function InlinePlaceholder(props) {
  var _span, _span2, _span3, _span4, _span5, _span6;

  var style = props.style,
      className = props.className,
      icon = props.icon,
      children = props.children,
      _props$type = props.type,
      type = _props$type === void 0 ? 'dropdown' : _props$type,
      visible = props.visible,
      offsetX = props.offsetX,
      _props$offsetY = props.offsetY,
      offsetY = _props$offsetY === void 0 ? 4 : _props$offsetY,
      onVisibleChangeFromProps = props.onVisibleChange,
      _props$overlay = props.overlay,
      overlay = _props$overlay === void 0 ? /*#__PURE__*/_createElement(React.Fragment, null) : _props$overlay,
      overlayStyle = props.overlayStyle,
      overlayClassName = props.overlayClassName,
      _props$isSelected = props.isSelected,
      isSelected = _props$isSelected === void 0 ? false : _props$isSelected,
      onClick = props.onClick,
      getContainer = props.getContainer,
      testid = props.testid,
      disabled = props.disabled,
      role = props.role;

  var _useState = useState(''),
      click = _useState[0],
      setClick = _useState[1];

  var _useState2 = useState(false),
      active = _useState2[0],
      setActive = _useState2[1];

  var onVisibleChange = function onVisibleChange(v) {
    setActive(v);
    onVisibleChangeFromProps && onVisibleChangeFromProps(v);
  };

  var onMouseDown = useCallback(function () {
    setClick(' click');
  }, [setClick]);
  var onMouseUp = useCallback(function () {
    setClick('');
  }, [setClick]);

  switch (type) {
    case 'normal':
      return /*#__PURE__*/_createElement(InlinePlaceholderContainer, {
        style: style,
        className: (className || '') + " " + click + " " + (active || visible ? ' active' : '') + " " + (isSelected ? 'select' : ''),
        onMouseDown: disabled ? undefined : onMouseDown,
        onMouseUp: disabled ? undefined : onMouseUp,
        onClick: disabled ? undefined : onClick,
        "data-testid": testid,
        "data-role": role,
        disabled: disabled
      }, _span || (_span = /*#__PURE__*/_createElement("span", {
        className: "inline-placeholder-icon-box"
      }, icon)), _span2 || (_span2 = /*#__PURE__*/_createElement("span", null, children)));

    case 'export':
      return /*#__PURE__*/_createElement(InlinePlaceholderContainer, {
        style: style,
        className: className + " active",
        onClick: disabled ? undefined : onClick,
        "data-testid": testid,
        disabled: disabled
      }, _span3 || (_span3 = /*#__PURE__*/_createElement("span", {
        className: "inline-placeholder-icon-box"
      }, icon)), _span4 || (_span4 = /*#__PURE__*/_createElement("span", null, children)));

    case 'dropdown':
    default:
      return /*#__PURE__*/_createElement(Dropdown, {
        getContainer: getContainer,
        overlay: /*#__PURE__*/_createElement(DropdownAnimation, {
          overlayStyle: _extends({
            border: 'none',
            borderRadius: '8px',
            boxShadow: '0px 0px 1px rgba(0, 0, 0, 0.24), 0px 8px 24px rgba(0, 0, 0, 0.16)'
          }, overlayStyle),
          visible: active
        }, overlay),
        overlayClassName: overlayClassName,
        overlayStyle: {
          border: 'none',
          boxShadow: 'none',
          background: 'none'
        },
        onVisibleChange: onVisibleChange,
        offsetX: offsetX,
        offsetY: offsetY,
        visible: !disabled && visible,
        disableDomAlign: true
      }, /*#__PURE__*/_createElement(InlinePlaceholderContainer, {
        style: style,
        className: (className || '') + " " + click + " " + (active || visible ? ' active' : '') + " " + (isSelected ? 'select' : ''),
        onMouseDown: disabled ? undefined : onMouseDown,
        onMouseUp: disabled ? undefined : onMouseUp,
        onClick: disabled ? undefined : onClick,
        "data-testid": testid,
        disabled: disabled
      }, _span5 || (_span5 = /*#__PURE__*/_createElement("span", {
        className: "inline-placeholder-icon-box"
      }, icon)), _span6 || (_span6 = /*#__PURE__*/_createElement("span", null, children))));
  }
};