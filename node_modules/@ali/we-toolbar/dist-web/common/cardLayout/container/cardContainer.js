import React, { useEffect, useRef, useState, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import ResizeObserve from 'resize-observer-polyfill';
import { uuid } from '@ali/we-design';
import { InlineToolbarContext } from "../toolbar";
var id = uuid();
var THROTTLE_TIME = 100; // 延迟显示 & 消失

var DEALY_APPEAR = 100;
var DELAY_DISAPPEAR = 200;
var CardContainerBox = /*#__PURE__*/styled.div(["box-sizing:border-box;"]);
export var CardContainer = function CardContainer(props) {
  var cardContainerBoxRef = useRef(null);

  var _useState = useState(false),
      mouseEnter = _useState[0],
      setMouseEnter = _useState[1];

  var _useState2 = useState(false),
      isFolded = _useState2[0],
      setIsFolded = _useState2[1];

  var _useState3 = useState(false),
      menuVisible = _useState3[0],
      setMenuVisible = _useState3[1];

  var _useState4 = useState(setTimeout(function () {}, 0)),
      delay = _useState4[0],
      setDelay = _useState4[1];

  var children = props.children,
      toolbarVisible = props.toolbarVisible,
      className = props.className,
      _props$thresholdWidth = props.thresholdWidth,
      thresholdWidth = _props$thresholdWidth === void 0 ? -Infinity : _props$thresholdWidth;
  var preDate = useMemo(function () {
    return Date.now();
  }, []);

  var onVisibleChange = function onVisibleChange(e) {
    setMenuVisible(e);
  };

  useEffect(function () {
    if (!cardContainerBoxRef.current) return;
    var resizeObserve = new ResizeObserve(function (entries) {
      var entry = entries.find(function (item) {
        return item.target.getAttribute('data-id') === "card-container-" + id;
      });
      entry && setIsFolded(entry.contentRect.width < thresholdWidth);
    });

    if (resizeObserve && cardContainerBoxRef.current) {
      resizeObserve.observe(cardContainerBoxRef.current);
    }

    return function () {
      if (resizeObserve) {
        resizeObserve.disconnect();
      }
    };
  }, [cardContainerBoxRef]);
  useEffect(function () {
    return function () {
      clearTimeout(delay);
    };
  }, []);

  var handleMouseEnterOrLeave = function handleMouseEnterOrLeave(e) {
    var delayTime = e ? DEALY_APPEAR : DELAY_DISAPPEAR;
    clearTimeout(delay);
    setDelay(setTimeout(function () {
      setMouseEnter(e);
    }, delayTime));
  };

  var handleMouseOver = function handleMouseOver() {
    if (Date.now() - preDate > THROTTLE_TIME) {
      handleMouseEnterOrLeave(true);
      preDate = Date.now();
    }
  };

  return /*#__PURE__*/_createElement(InlineToolbarContext.Provider, {
    value: {
      isFolded: isFolded,
      onVisibleChange: onVisibleChange,
      isToolbarVisible: mouseEnter || menuVisible,
      toolbarDefault: toolbarVisible
    }
  }, /*#__PURE__*/_createElement(CardContainerBox, {
    ref: cardContainerBoxRef,
    "data-id": "card-container-" + id,
    onMouseEnter: function onMouseEnter() {
      return handleMouseEnterOrLeave(true);
    },
    onMouseLeave: function onMouseLeave() {
      return handleMouseEnterOrLeave(false);
    } // TODO: onMouseOver 检测鼠标 over 事件
    ,
    onMouseOver: function onMouseOver() {
      return handleMouseOver();
    },
    className: className
  }, children));
};