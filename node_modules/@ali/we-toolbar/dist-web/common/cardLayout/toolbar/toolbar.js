import _extends from "@babel/runtime/helpers/extends";

var _ArrowDownLineNormal, _ToolbarMoreNormal, _IconBox, _ToolbarMoreNormal2;

import React, { useMemo, useState, useEffect, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { StyleIcon, AbstractSmallIcon, PreviewSmallIcon, TextSmallIcon } from "./styleSelectIcon";
import { Menu, MenuItem, MenuDivider, SubMenu, ToolbarMoreNormal, MenuGroupNormal, ToolbarArrowDownTriangleNormal, ArrowDownLineNormal, EMenuMode, SelectGallery, RefreshNormalNormal, ToolbarDeleteNormal, ToolbarCopyNormal, ToolbarCutNormal, ToolbarDownloadNormal, OpenNormal } from '@ali/we-design';
import { IconButton, IconMenu } from "../../../common";
import { InlineToolbarBlock, InlineToolbarContainer, MenuTitleIconBox, SelectGalleryBox, StyleSelectFontBox, IconBox, TitleWithLeftMargin, StyleSelectIconContainer, MenuTriggerButton } from "./styled";
import { useTranslate } from '@ali/we-util';
import { NopicNormal } from '@ali/we-icon';
import { InlineToolbarContext } from "./inlineToolbarContext"; // 根据 toolbar 按钮类型转 icon
// 依次为：风格展示、更多按钮、自定义菜单、一般按钮

var typeToIcon = {
  style: /*#__PURE__*/_createElement(StyleIcon, null),
  more: /*#__PURE__*/_createElement(ToolbarMoreNormal, null),
  menu: /*#__PURE__*/_createElement(MenuGroupNormal, null),
  button: /*#__PURE__*/_createElement(ToolbarArrowDownTriangleNormal, null)
}; // 根据 menu 的 name 转 icon
// 这是 toolbar「更多」功能中的 menu

var nameToIcon = {
  download: /*#__PURE__*/_createElement(ToolbarDownloadNormal, null),
  open: /*#__PURE__*/_createElement(OpenNormal, null),
  refresh: /*#__PURE__*/_createElement(RefreshNormalNormal, null),
  "delete": /*#__PURE__*/_createElement(ToolbarDeleteNormal, null),
  copy: /*#__PURE__*/_createElement(ToolbarCopyNormal, null),
  cut: /*#__PURE__*/_createElement(ToolbarCutNormal, null)
}; // 风格展示，根据类型转 icon
// 依次为：文本、摘要卡片、预览卡片

var styleTypeToIcon = {
  text: /*#__PURE__*/_createElement(TextSmallIcon, null),
  "abstract": /*#__PURE__*/_createElement(AbstractSmallIcon, null),
  preview: /*#__PURE__*/_createElement(PreviewSmallIcon, null),
  artCard: /*#__PURE__*/_createElement(PreviewSmallIcon, null) // TODO 待更新为 art 所需 icon

};
var clearStyle = {
  width: 'unset',
  height: 'unset',
  padding: 'unset',
  margin: 'unset',
  minWidth: 'unset',
  borderRadius: 'unset'
};

function FallbackImage(_ref) {
  var src = _ref.src,
      alt = _ref.alt;

  var _useState = useState(false),
      loadFailed = _useState[0],
      setLoadState = _useState[1];

  var handleOnError = useCallback(function () {
    setLoadState(true);
  }, []);
  return loadFailed ? /*#__PURE__*/_createElement(NopicNormal, {
    style: {
      width: '40px',
      height: '40px',
      color: '#9FA1A3'
    }
  }) : /*#__PURE__*/_createElement("img", {
    src: src,
    onError: handleOnError,
    alt: alt
  });
}

export var Toolbar = function Toolbar(props) {
  var _toolbar$find, _InlineToolbarContain;

  var _React$useContext = React.useContext(InlineToolbarContext),
      isFoldedFromContext = _React$useContext.isFolded,
      onVisibleChange = _React$useContext.onVisibleChange,
      isToolbarVisible = _React$useContext.isToolbarVisible,
      toolbarDefault = _React$useContext.toolbarDefault;

  var toolbar = props.toolbarConfigs,
      locale = props.locale,
      _props$isFolded = props.isFolded,
      isFolded = _props$isFolded === void 0 ? isFoldedFromContext : _props$isFolded,
      getContainer = props.getContainer,
      _props$buttonStyle = props.buttonStyle,
      buttonStyle = _props$buttonStyle === void 0 ? 'default' : _props$buttonStyle;
  var t = useTranslate(locale); // 风格选择状态

  var _useState2 = useState(Number(toolbar == null ? void 0 : (_toolbar$find = toolbar.find(function (item) {
    return item.type === 'style';
  })) == null ? void 0 : _toolbar$find.defaultValue)),
      styleSelectValue = _useState2[0],
      setStyleSelectValue = _useState2[1];

  var _useState3 = useState(''),
      className = _useState3[0],
      setClassName = _useState3[1];

  var _useState4 = useState(null),
      display = _useState4[0],
      setDisplay = _useState4[1]; // 风格切换中，大图资源


  var nameToTextAndImage = useMemo(function () {
    return {
      text: {
        title: t('we_toolbar_text'),
        icon: 'https://img.alicdn.com/imgextra/i4/O1CN01SVRR9O1cHOarEhMi5_!!6000000003575-2-tps-180-140.png'
      },
      "abstract": {
        title: t('we_toolbar_abstract'),
        icon: 'https://img.alicdn.com/imgextra/i2/O1CN01fPfwUo1RSskY9PviT_!!6000000002111-2-tps-180-140.png'
      },
      preview: {
        title: t('we_toolbar_preview'),
        icon: 'https://img.alicdn.com/imgextra/i1/O1CN01I7NSjK1RPfypgAwaG_!!6000000002104-2-tps-180-140.png'
      },
      artCard: {
        title: t('we_toolbar_artCard'),
        icon: 'https://img.alicdn.com/imgextra/i4/O1CN01FpZNeM1uZPJXxerke_!!6000000006051-2-tps-378-278.png'
      }
    };
  }, []);
  if (!toolbar) return /*#__PURE__*/_createElement(React.Fragment, null); // 根据 MoreMenuConfiguration[][] 进行「更多菜单」渲染

  var moreMenuRender = function moreMenuRender(menu) {
    var menuItemList = [];
    menu.forEach(function (items, index) {
      // 如果 toolbar 折叠，即其他功能需要整合进「更多菜单」中
      // 需要在上方添加一根分割线 <MenuDivider/>
      if (index + Number(isFolded) > 0 && toolbar.length > 1) {
        menuItemList.push( /*#__PURE__*/_createElement(MenuDivider, {
          key: "divider-" + index
        }));
      } // 对于每一组


      items.forEach(function (item, innerIndex) {
        // 获取 name
        var _item$name = item.name,
            name = _item$name === void 0 ? 'refresh' : _item$name; // 如果 name 为预定菜单选项
        // 则为其提供标题、icon 等信息

        var _item$title = item.title,
            title = _item$title === void 0 ? t("we_toolbar_" + name) : _item$title,
            _item$icon = item.icon,
            icon = _item$icon === void 0 ? nameToIcon[name] : _item$icon,
            onClick = item.onClick,
            testId = item.testId,
            role = item.role;
        menuItemList.push( /*#__PURE__*/_createElement(MenuItem, {
          key: "more-menu-" + index + "-" + innerIndex,
          menuKey: "more-menu-" + index + "-" + innerIndex,
          icon: icon,
          testid: testId,
          role: role,
          onClick: onClick
        }, title));
      });
    });
    return menuItemList;
  }; // 自定义菜单渲染


  var normalMenuRender = function normalMenuRender(index, toolbar) {
    // type === 'menu'
    var type = toolbar.type;
    var title = toolbar.title,
        _toolbar$icon = toolbar.icon,
        icon = _toolbar$icon === void 0 ? typeToIcon[type] : _toolbar$icon,
        overlay = toolbar.overlay,
        active = toolbar.active,
        testId = toolbar.testId;
    return /*#__PURE__*/_createElement(MenuTriggerButton, {
      key: "submenu-" + index,
      active: active
    }, /*#__PURE__*/_createElement(SubMenu, {
      key: "submenu-" + index,
      overlayStyle: {
        padding: 0
      },
      title: /*#__PURE__*/_createElement(TitleWithLeftMargin, null, title),
      icon: icon
    }, /*#__PURE__*/_createElement(MenuItem, {
      key: "menu-{index}",
      testid: testId,
      hoverable: false,
      menuKey: "menu-" + index,
      style: _extends({}, clearStyle)
    }, overlay)));
  }; // 风格切换菜单渲染


  var styleMenuRender = function styleMenuRender(index, toolbar) {
    var type = toolbar.type;
    var _toolbar$icon2 = toolbar.icon,
        icon = _toolbar$icon2 === void 0 ? typeToIcon[type] : _toolbar$icon2,
        _onChange = toolbar.onChange,
        options = toolbar.options,
        optionsTestId = toolbar.optionsTestId,
        testId = toolbar.testId; // 若没有提供 options 选项，也不进行渲染

    if (!options || options.length < 1) {
      return /*#__PURE__*/_createElement(React.Fragment, null);
    } // 结构：SubMenu - MenuItem - SelectGallery（风格切换组件）


    return /*#__PURE__*/_createElement(SubMenu, {
      key: "submenu-" + index,
      icon: /*#__PURE__*/_createElement(MenuTitleIconBox, null, icon, _ArrowDownLineNormal || (_ArrowDownLineNormal = /*#__PURE__*/_createElement(ArrowDownLineNormal, null))),
      testid: testId,
      title: "",
      overlayStyle: {
        padding: 0
      }
    }, /*#__PURE__*/_createElement(MenuItem, {
      key: "style-select",
      hoverable: false,
      menuKey: "style-select",
      style: _extends({}, clearStyle)
    }, /*#__PURE__*/_createElement(SelectGallery, {
      groups: [{
        title: t('we_toolbar_style_select'),
        showDivider: false,
        items: options.map(function (name, index) {
          var _nameToTextAndImage$n = nameToTextAndImage[name],
              title = _nameToTextAndImage$n.title,
              icon = _nameToTextAndImage$n.icon; // 自定义组件（风格切换每一个 item）

          var node = /*#__PURE__*/_createElement(SelectGalleryBox, {
            key: index
          }, /*#__PURE__*/_createElement(StyleSelectIconContainer, null, /*#__PURE__*/_createElement(FallbackImage, {
            src: icon
          })), /*#__PURE__*/_createElement(StyleSelectFontBox, null, title));

          return {
            id: index,
            node: node,
            testID: optionsTestId && optionsTestId[name]
          };
        })
      }],
      style: {
        height: 151,
        border: 'none',
        boxShadow: 'none',
        padding: '2px 12px'
      },
      itemsPerRow: options.length,
      value: styleSelectValue,
      onChange: function onChange(id) {
        setStyleSelectValue(id);
        _onChange && _onChange(id);
      }
    })));
  };

  var toolbarList = []; // 如果折叠或者只有一个按钮，那么直接显示，否则：

  if (!isFolded || toolbar.length < 2) {
    for (var i = 0; i < toolbar.length; i++) {
      // 类型：button（一般 button），menu（自定义菜单），style（风格切换），more（更多菜单）
      var type = toolbar[i].type; // toolbar 除一般 button 外，用 menu 实现
      // button 独立于 menu 外

      if (type === 'button') {
        var _toolbar$i = toolbar[i],
            title = _toolbar$i.title,
            _toolbar$i$icon = _toolbar$i.icon,
            icon = _toolbar$i$icon === void 0 ? typeToIcon[type] : _toolbar$i$icon,
            onClick = _toolbar$i.onClick,
            active = _toolbar$i.active,
            testId = _toolbar$i.testId;
        toolbarList.push( /*#__PURE__*/_createElement(IconButton, {
          key: "button-" + i,
          icon: icon,
          active: active,
          onClick: onClick,
          tooltip: title,
          testid: testId
        }));
      } else {
        // 非 button 组件用 menu 实现
        var menuList = [];
        var j = i;

        for (; j < toolbar.length && toolbar[j].type !== 'button'; j++) {
          var _type = toolbar[j].type;

          if (_type === 'menu') {
            menuList.push(normalMenuRender(j, toolbar[j]));
          } else if (_type === 'style') {
            menuList.push(styleMenuRender(j, toolbar[j]));
          } else if (_type === 'more') {
            var menu = toolbar[j].menu;

            if (!menu) {
              continue;
            }

            menuList.push( /*#__PURE__*/_createElement(SubMenu, {
              menuKey: "more-menu",
              key: "more-menu",
              icon: _ToolbarMoreNormal || (_ToolbarMoreNormal = /*#__PURE__*/_createElement(ToolbarMoreNormal, null)),
              title: ""
            }, moreMenuRender(menu)));
          }
        }

        i = j + 1; // TODO: 给 Menu 添加 getContainer

        toolbarList.push( /*#__PURE__*/_createElement(Menu, {
          getContainer: getContainer,
          key: "menu-" + i,
          onSubmenuOpenedKeysChange: function onSubmenuOpenedKeysChange(keys) {
            return onVisibleChange && onVisibleChange(Boolean(keys.length > 0));
          },
          className: "toolbar-menu",
          style: {
            height: 28
          },
          mode: EMenuMode.horizontal,
          destroyOverlayWhenInvisible: true
        }, menuList));
      }
    }
  } else {
    // 只渲染一个按钮
    // 1. 只有一个按钮
    // 2. 折叠
    var menuItemList = [];
    toolbar.forEach(function (item, index) {
      var type = item.type;

      if (type === 'more') {
        var _menu = item.menu;

        if (!_menu) {
          return;
        }

        menuItemList = menuItemList.concat(moreMenuRender(_menu));
      } else if (type === 'style') {
        // 与非折叠状态不同
        // style 作为 SubMenu 二级菜单渲染
        var options = item.options,
            onChange = item.onChange,
            optionsTestId = item.optionsTestId,
            _testId = item.testId;

        if (!options || options.length < 1) {
          return;
        }

        menuItemList.push( /*#__PURE__*/_createElement(SubMenu, {
          icon: _IconBox || (_IconBox = /*#__PURE__*/_createElement(IconBox, {
            size: 20
          }, /*#__PURE__*/_createElement(StyleIcon, null))),
          testid: _testId,
          menuKey: "style_select",
          key: "style_select",
          title: t('we_toolbar_style_select'),
          showSelect: true
        }, options.map(function (item, index) {
          return /*#__PURE__*/_createElement(MenuItem, {
            icon: styleTypeToIcon[item],
            testid: optionsTestId && optionsTestId[item],
            menuKey: index + '',
            key: index,
            onClick: function onClick() {
              onChange && onChange(index);
              setStyleSelectValue(index);
            }
          }, t("we_toolbar_" + item));
        })));
      } else if (type === 'button') {
        // button 也作为一个菜单选项渲染
        var _icon = item.icon,
            _title = item.title,
            _testId2 = item.testId,
            _item$active = item.active,
            _active = _item$active === void 0 ? false : _item$active,
            _onClick = item.onClick;

        menuItemList.push(MenuSelectRectRender( /*#__PURE__*/_createElement(MenuItem, {
          icon: _icon,
          key: "button-" + index,
          menuKey: "button-" + index,
          testid: _testId2,
          onClick: function onClick(_, e) {
            _onClick && _onClick(e);
          }
        }, _title), _active, index));
      } else {
        // 自定义菜单
        var _title2 = item.title,
            _icon2 = item.icon,
            overlay = item.overlay,
            _testId3 = item.testId,
            _item$active2 = item.active,
            _active2 = _item$active2 === void 0 ? false : _item$active2;

        menuItemList.push(MenuSelectRectRender( /*#__PURE__*/_createElement(SubMenu, {
          key: "subment-" + index,
          overlayStyle: {
            padding: 0
          },
          icon: _icon2,
          title: _title2
        }, /*#__PURE__*/_createElement(MenuItem, {
          hoverable: false,
          testid: _testId3,
          style: _extends({}, clearStyle),
          menuKey: "button-" + index,
          key: "button-" + index
        }, overlay)), _active2, index));
      }
    });
    toolbarList.push( /*#__PURE__*/_createElement(IconMenu, {
      getContainer: getContainer,
      key: "icon-menu",
      icon: _ToolbarMoreNormal2 || (_ToolbarMoreNormal2 = /*#__PURE__*/_createElement(ToolbarMoreNormal, null)),
      showArrow: false,
      trigger: "click",
      onVisibleChange: onVisibleChange,
      overlay: /*#__PURE__*/_createElement(Menu, {
        className: "toolbar-menu",
        selectedKeys: [styleSelectValue + ''],
        autoClose: true
      }, menuItemList)
    }));
  }

  useEffect(function () {
    // hover 控制 toolbar 显示
    if (toolbarDefault === undefined || toolbarDefault === null) {
      if (isToolbarVisible === true) {
        setDisplay('block');
        setTimeout(function () {
          setClassName('fade-in');
        }, 20);
      } else if (isToolbarVisible === false) {
        setClassName('fade-out');
        setTimeout(function () {
          setDisplay('none');
          setClassName('');
        }, 150);
      }
    }
  }, [isToolbarVisible]);
  return useMemo(function () {
    return /*#__PURE__*/_createElement(InlineToolbarBlock, {
      toolbarDefault: toolbarDefault,
      onClick: function onClick(e) {
        e.stopPropagation();
        e.preventDefault();
      },
      onMouseDown: function onMouseDown(e) {
        return e.stopPropagation();
      },
      className: className,
      style: display ? {
        display: display
      } : {}
    }, _InlineToolbarContain || (_InlineToolbarContain = /*#__PURE__*/_createElement(InlineToolbarContainer, {
      buttonStyle: buttonStyle
    }, toolbarList)));
  }, [isFolded, toolbar, locale, display, className, styleSelectValue, buttonStyle]);
}; // 统一修改 Menu 选择样式

var MenuSelectRectRender = function MenuSelectRectRender(children, active, index) {
  if (index === void 0) {
    index = 0;
  }

  return /*#__PURE__*/_createElement("div", {
    key: "menuSelectRectRender-" + index,
    style: {
      width: '100%',
      height: 34,
      position: 'relative',
      boxSizing: 'border-box'
    }
  }, /*#__PURE__*/_createElement("div", {
    style: {
      position: 'absolute',
      width: '100%',
      height: '100%',
      padding: '0 4px',
      boxSizing: 'border-box'
    }
  }, /*#__PURE__*/_createElement("div", {
    style: {
      width: '100%',
      height: '100%',
      borderRadius: 4,
      backgroundColor: active ? 'rgba(17,31,44,0.08)' : 'unset'
    }
  })), children);
};