import _extends from "@babel/runtime/helpers/extends";

var _DragLevelIcon, _DragLevelIcon2;

import React, { useState, useMemo, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { PreviewCardLayoutContainer } from "./styled";
import { CardContainer } from "../container";
import { DragLevelIcon } from "./dragLevel";
import { Toolbar, InlineToolbarContext } from "../toolbar";
import { ArrowRightOutlineSmallBetaNormal, uuid } from '@ali/we-design';
export var PreviewCardLayout = function PreviewCardLayout(props) {
  var id = useMemo(function () {
    return uuid();
  }, []);
  var _props$defaultHeight = props.defaultHeight,
      defaultHeight = _props$defaultHeight === void 0 ? 170 : _props$defaultHeight,
      _props$minHeight = props.minHeight,
      minHeight = _props$minHeight === void 0 ? 38 : _props$minHeight,
      _props$maxHeight = props.maxHeight,
      maxHeight = _props$maxHeight === void 0 ? Infinity : _props$maxHeight,
      isSelected = props.isSelected,
      children = props.children,
      icon = props.icon,
      title = props.title,
      linkTitleClick = props.linkTitleClick,
      toolbarConfigs = props.toolbarConfigs,
      style = props.style,
      _props$dragLevel = props.dragLevel,
      dragLevel = _props$dragLevel === void 0 ? false : _props$dragLevel,
      className = props.className,
      onClick = props.onClick,
      onMoveStart = props.onMoveStart,
      onMove = props.onMove,
      onMoveEnd = props.onMoveEnd,
      _props$throttle = props.throttle,
      throttle = _props$throttle === void 0 ? 0 : _props$throttle,
      _props$type = props.type,
      type = _props$type === void 0 ? 'normal' : _props$type,
      thresholdWidth = props.thresholdWidth,
      getContainer = props.getContainer,
      currentHeight = props.height;
  var _props$toolbarOffsetX = props.toolbarOffsetX,
      toolbarOffsetX = _props$toolbarOffsetX === void 0 ? !title ? 4 : 6 : _props$toolbarOffsetX,
      _props$toolbarOffsetY = props.toolbarOffsetY,
      toolbarOffsetY = _props$toolbarOffsetY === void 0 ? toolbarOffsetX : _props$toolbarOffsetY;

  var _useState = useState(defaultHeight),
      height = _useState[0],
      setHeight = _useState[1];

  useEffect(function () {
    currentHeight && setHeight(currentHeight);
  }, [currentHeight]); // 是否拖拽

  var _useState2 = useState(false),
      drag = _useState2[0],
      setDrag = _useState2[1];

  var preDate = useMemo(function () {
    return Date.now();
  }, []); // 鼠标抬起

  var mouseUp = function mouseUp() {
    setDrag(false);
    onMoveEnd && onMoveEnd();
    document.removeEventListener('mousemove', mouseMove);
  }; // 拖拽时移动鼠标


  var mouseMove = function mouseMove(e) {
    // 节流
    var now = Date.now();

    if (now - preDate < throttle) {
      return;
    }

    preDate = now; // 计算 height

    var container = document.getElementById("preview-card-layout-" + id);

    if (!container) {
      return;
    }

    var clientY = e.clientY;
    var topPosition = container.getBoundingClientRect().top;
    var height = clientY - topPosition;

    if (height > maxHeight) {
      height = maxHeight;
    }

    if (height < minHeight) {
      height = minHeight;
    }

    setHeight(height);
    onMove && onMove(height);
  };

  return type === 'custom' ? /*#__PURE__*/_createElement(PreviewCardLayoutContainer, {
    toolbarOffset: [toolbarOffsetX, toolbarOffsetY],
    id: "preview-card-layout-" + id,
    className: className,
    drag: drag,
    style: isSelected ? _extends({
      border: '1px solid #0089FF',
      boxShadow: '0px 0px 0px 3px rgba(0, 106, 254, 0.12)',
      height: height
    }, style) : _extends({
      border: '1px solid #EBECF0',
      height: height
    }, style)
  }, /*#__PURE__*/_createElement(CardContainer, {
    className: "card-layout-container",
    thresholdWidth: thresholdWidth
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-wrap-custom"
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-content-wrap-custom"
  }, children), /*#__PURE__*/_createElement("div", {
    className: "card-layout-toolbar-custom",
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, /*#__PURE__*/_createElement(Toolbar, {
    toolbarConfigs: toolbarConfigs,
    getContainer: getContainer
  }))), /*#__PURE__*/_createElement(InlineToolbarContext.Consumer, null, function (_ref) {
    var isToolbarVisible = _ref.isToolbarVisible;
    return dragLevel && /*#__PURE__*/_createElement("div", {
      className: "drag-level",
      style: {
        opacity: isToolbarVisible || drag ? 1 : 0
      },
      onMouseDown: function onMouseDown() {
        setDrag(true);
        onMoveStart && onMoveStart(height);
        document.addEventListener('mouseup', mouseUp);
        document.addEventListener('mousemove', mouseMove);
      }
    }, _DragLevelIcon || (_DragLevelIcon = /*#__PURE__*/_createElement(DragLevelIcon, null)));
  }))) : type === 'normal' ? /*#__PURE__*/_createElement(PreviewCardLayoutContainer, {
    toolbarOffset: [toolbarOffsetX, toolbarOffsetY],
    id: "preview-card-layout-" + id,
    className: className,
    drag: drag,
    style: isSelected ? _extends({
      border: '1px solid #0089FF',
      boxShadow: '0px 0px 0px 3px rgba(0, 106, 254, 0.12)',
      height: height
    }, style) : _extends({
      height: height
    }, style)
  }, /*#__PURE__*/_createElement(CardContainer, {
    className: "card-layout-container",
    thresholdWidth: thresholdWidth
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-wrap"
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-head",
    style: {
      height: !title ? 32 : 39
    }
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-icon",
    onClick: linkTitleClick
  }, icon), /*#__PURE__*/_createElement("div", {
    className: "card-layout-head-right"
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-title " + (linkTitleClick && 'link'),
    onClick: linkTitleClick
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-title-arrow"
  }, /*#__PURE__*/_createElement("span", {
    className: "text"
  }, title), linkTitleClick && /*#__PURE__*/_createElement(ArrowRightOutlineSmallBetaNormal, {
    className: "right-arrow link",
    onClick: linkTitleClick
  }))), /*#__PURE__*/_createElement("div", {
    className: "card-layout-toolbar",
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, /*#__PURE__*/_createElement(Toolbar, {
    toolbarConfigs: toolbarConfigs,
    getContainer: getContainer
  })))), /*#__PURE__*/_createElement("div", {
    className: "card-layout-content-wrap"
  }, children), !title && /*#__PURE__*/_createElement("div", {
    className: "no-title-box",
    onClick: onClick,
    style: (style == null ? void 0 : style.backgroundColor) && {
      backgroundColor: style == null ? void 0 : style.backgroundColor
    }
  })), /*#__PURE__*/_createElement(InlineToolbarContext.Consumer, null, function (_ref2) {
    var isToolbarVisible = _ref2.isToolbarVisible;
    return dragLevel && /*#__PURE__*/_createElement("div", {
      className: "drag-level",
      style: {
        opacity: isToolbarVisible || drag ? 1 : 0
      },
      onMouseDown: function onMouseDown() {
        setDrag(true);
        onMoveStart && onMoveStart(height);
        document.addEventListener('mouseup', mouseUp);
        document.addEventListener('mousemove', mouseMove);
      }
    }, _DragLevelIcon2 || (_DragLevelIcon2 = /*#__PURE__*/_createElement(DragLevelIcon, null)));
  }))) : /*#__PURE__*/_createElement(PreviewCardLayoutContainer, {
    toolbarOffset: [toolbarOffsetX, toolbarOffsetY],
    id: "preview-card-layout-" + id,
    className: className,
    drag: drag
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-wrap"
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-head"
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-icon"
  }, icon), /*#__PURE__*/_createElement("div", {
    className: "card-layout-head-right"
  }, /*#__PURE__*/_createElement("div", {
    className: "card-layout-title"
  }, title), linkTitleClick && /*#__PURE__*/_createElement(ArrowRightOutlineSmallBetaNormal, {
    className: "right-arrow link",
    onClick: onClick
  }), /*#__PURE__*/_createElement("div", {
    className: "card-layout-toolbar",
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, /*#__PURE__*/_createElement(Toolbar, {
    toolbarConfigs: toolbarConfigs
  })))), /*#__PURE__*/_createElement("div", {
    className: "card-layout-content-wrap"
  }, children)));
};