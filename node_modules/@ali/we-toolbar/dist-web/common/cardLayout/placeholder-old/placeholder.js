import _extends from "@babel/runtime/helpers/extends";

var _ArrowRightNormal;

import { ArrowRightNormal, Dropdown } from '@ali/we-design';
import React, { useEffect, useMemo, useRef, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { CardLayout, InlineToolbar } from "../../inlineToolbar";
import ResizeObserver from 'resize-observer-polyfill';
import { ClickAreaContainer, DesCription, IconContainer, PlaceholderWrapper, RightContainer, Title, TitleWrapper } from "./styled";
export var CardPlaceholder = /*#__PURE__*/React.memo(function (props) {
  var _Title, _DesCription, _InlineToolbar;

  var height = props.height,
      title = props.title,
      desc = props.desc,
      icon = props.icon,
      type = props.type,
      overlay = props.overlay,
      isSelected = props.isSelected,
      moreMenuConfig = props.moreMenuConfig,
      clickable = props.clickable,
      visible = props.visible,
      offsetX = props.offsetX,
      offsetY = props.offsetY,
      testid = props.testid,
      overlayStyle = props.overlayStyle,
      onEdgeClick = props.onEdgeClick,
      onCenterClick = props.onCenterClick,
      onVisibleChange = props.onVisibleChange;
  var elRef = useRef();

  var _useState = useState(0),
      width = _useState[0],
      setWidth = _useState[1];

  var _useState2 = useState(0),
      toolbarWidth = _useState2[0],
      setToolbarWidth = _useState2[1];

  var _useState3 = useState(false),
      toolbarVisible = _useState3[0],
      setToolbarVisible = _useState3[1]; // overlay 宽度跟随


  useEffect(function () {
    if (!elRef.current) return;
    var myObserver = new ResizeObserver(function (entries) {
      entries.forEach(function (entry) {
        var width = entry.contentRect.width;
        if (width === 0) return;
        var floorWidth = Math.floor(width);
        setWidth(floorWidth);
      });
    });
    myObserver.observe(elRef.current);
    return function () {
      return myObserver.disconnect();
    };
  }, [elRef]); // 阻塞 overlay click 事件，否则会影响 onEdgeClick

  var overlayClone = useMemo(function () {
    return overlay ? /*#__PURE__*/_createElement("div", {
      onClick: function onClick(e) {
        e.preventDefault();
        e.stopPropagation();
      }
    }, /*#__PURE__*/React.cloneElement(overlay)) : null;
  }, [overlay]);

  var handleCenterClick = function handleCenterClick(e) {
    e.preventDefault();
    e.stopPropagation();
    clickable && onCenterClick && onCenterClick();
  };

  var handleEdgeClick = function handleEdgeClick(_e) {
    clickable && onEdgeClick && onEdgeClick();
  };

  var handleVisibleChange = function handleVisibleChange(e) {
    onVisibleChange && onVisibleChange(e);
  };

  var handleToolbarWidthChange = function handleToolbarWidthChange(width) {
    setToolbarWidth(width + 8 - 20);
  };

  var handleToolbarVisiable = function handleToolbarVisiable(e) {
    setToolbarVisible(e);
  };

  var defaultoverlayStyle = useMemo(function () {
    return _extends({
      border: 0,
      boxShadow: '0px 0px 1px rgb(0 0 0 / 24%), 0px 8px 24px rgb(0 0 0 / 16%)',
      background: 'white',
      width: width === 0 ? -1 : width
    }, overlayStyle);
  }, [width, overlayStyle]);
  var isSingleLine = !desc;
  var placeholder = useMemo(function () {
    return /*#__PURE__*/_createElement(ClickAreaContainer, {
      onClick: handleCenterClick
    }, icon && /*#__PURE__*/_createElement(IconContainer, null, /*#__PURE__*/React.cloneElement(icon, {
      className: 'placeholder-icon'
    })), /*#__PURE__*/_createElement(RightContainer, {
      isSingleLine: isSingleLine
    }, /*#__PURE__*/_createElement(TitleWrapper, null, _Title || (_Title = /*#__PURE__*/_createElement(Title, {
      className: "placeholder-title",
      isSingleLine: isSingleLine,
      toolbarWidth: toolbarWidth,
      toolbarVisible: toolbarVisible,
      type: type
    }, title)), type === 'export' && (_ArrowRightNormal || (_ArrowRightNormal = /*#__PURE__*/_createElement(ArrowRightNormal, null)))), !isSingleLine && (_DesCription || (_DesCription = /*#__PURE__*/_createElement(DesCription, null, desc)))));
  }, [title, icon, desc, toolbarWidth, toolbarVisible]);
  var toolbar = useMemo(function () {
    return moreMenuConfig && !visible ? _InlineToolbar || (_InlineToolbar = /*#__PURE__*/_createElement(InlineToolbar, {
      moreMenuConfig: moreMenuConfig
    })) : undefined;
  }, [moreMenuConfig]);
  var dropdown = useMemo(function () {
    return /*#__PURE__*/_createElement(PlaceholderWrapper, {
      ref: elRef,
      "data-testid": testid,
      height: height,
      isSelected: isSelected,
      clickable: clickable,
      visible: visible,
      onClick: handleEdgeClick
    }, overlay ? /*#__PURE__*/_createElement(Dropdown, {
      visible: visible,
      overlay: overlayClone,
      offsetX: -11 + offsetX,
      offsetY: 15 + offsetY,
      overlayStyle: defaultoverlayStyle,
      trigger: 'click',
      onVisibleChange: handleVisibleChange
    }, placeholder) : placeholder);
  }, [height, placeholder, visible, overlay]);
  return clickable ? /*#__PURE__*/_createElement(CardLayout, {
    onToolbarWidthChange: handleToolbarWidthChange,
    onHoverChange: handleToolbarVisiable,
    toolbar: toolbar,
    isSelected: isSelected,
    style: {
      width: '100%'
    }
  }, dropdown) : dropdown;
});
CardPlaceholder.defaultProps = {
  height: 65,
  offsetX: 0,
  offsetY: 0,
  clickable: true,
  type: 'normal'
};