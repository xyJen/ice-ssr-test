import _extends from "@babel/runtime/helpers/extends";
import React, { useEffect, useMemo, useRef, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { CardPlaceholderContainer } from "./styled";
import { Toolbar } from "../toolbar";
import { CardContainer } from "../container";
import { Dropdown, uuid } from '@ali/we-design';
import ResizeObserver from 'resize-observer-polyfill';
import { DropdownAnimation } from '@ali/we-util';
var delay = 150;
export var Placeholder = function Placeholder(props) {
  var _props$height = props.height,
      height = _props$height === void 0 ? 65 : _props$height,
      title = props.title,
      icon = props.icon,
      desc = props.desc,
      _props$type = props.type,
      type = _props$type === void 0 ? 'normal' : _props$type,
      _props$isSelected = props.isSelected,
      isSelected = _props$isSelected === void 0 ? false : _props$isSelected,
      toolbarConfigs = props.toolbarConfigs,
      onClick = props.onClick,
      _onVisibleChange = props.onVisibleChange,
      _props$clickable = props.clickable,
      clickable = _props$clickable === void 0 ? true : _props$clickable,
      _props$overlay = props.overlay,
      overlay = _props$overlay === void 0 ? /*#__PURE__*/_createElement(React.Fragment, null) : _props$overlay,
      visible = props.visible,
      offsetX = props.offsetX,
      _props$offsetY = props.offsetY,
      offsetY = _props$offsetY === void 0 ? 4 : _props$offsetY,
      overlayStyle = props.overlayStyle,
      thresholdWidth = props.thresholdWidth,
      getContainer = props.getContainer;
  var id = useMemo(function () {
    return uuid();
  }, []);
  var cardPlaceholderContainerRef = useRef(null);

  var _useState = useState(false),
      active = _useState[0],
      setActive = _useState[1];

  var _useState2 = useState(0),
      placeholderWidth = _useState2[0],
      setPlaceholderWidth = _useState2[1];

  var _useState3 = useState(false),
      dropdownVisible = _useState3[0],
      setDropdownVisible = _useState3[1]; // 实时计算宽度


  useEffect(function () {
    if (!cardPlaceholderContainerRef.current) {
      return;
    }

    var resizeObserver = new ResizeObserver(function (entries) {
      var entry = entries.find(function (item) {
        return item.target.getAttribute('data-id') === "card-placeholder-container-" + id;
      });

      if (entry) {
        setPlaceholderWidth(entry.contentRect.width);
      }
    });

    if (resizeObserver && cardPlaceholderContainerRef.current) {
      resizeObserver.observe(cardPlaceholderContainerRef.current);
    }

    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, [cardPlaceholderContainerRef]);
  return type === 'normal' ? /*#__PURE__*/_createElement(Dropdown, {
    getContainer: getContainer,
    overlay: /*#__PURE__*/_createElement(DropdownAnimation, {
      visible: visible || dropdownVisible,
      overlayStyle: _extends({
        width: placeholderWidth,
        borderRadius: '8px',
        border: 'none',
        boxShadow: '0px 0px 1px rgba(0, 0, 0, 0.24), 0px 8px 24px rgba(0, 0, 0, 0.16)'
      }, overlayStyle)
    }, overlay),
    overlayStyle: {
      border: 'none',
      boxShadow: 'none',
      background: 'none'
    },
    offsetX: offsetX,
    offsetY: offsetY,
    placement: "bottom",
    visible: visible,
    onVisibleChange: function onVisibleChange(e) {
      setDropdownVisible(e);
      _onVisibleChange && _onVisibleChange(e);
    },
    disableDomAlign: true
  }, /*#__PURE__*/_createElement(CardPlaceholderContainer, {
    delay: delay,
    height: height,
    isSelected: isSelected,
    clickable: clickable,
    onClick: onClick,
    className: (active ? 'active' : '') + " " + (visible || dropdownVisible ? 'select' : ''),
    onMouseDown: function onMouseDown() {
      return setActive(true);
    },
    onMouseUp: function onMouseUp() {
      return setActive(false);
    },
    ref: cardPlaceholderContainerRef,
    "data-id": "card-placeholder-container-" + id,
    type: type
  }, /*#__PURE__*/_createElement(CardContainer, {
    className: "card-container",
    thresholdWidth: thresholdWidth
  }, icon && /*#__PURE__*/_createElement("div", {
    className: "placeholder-icon-box"
  }, icon), /*#__PURE__*/_createElement("div", {
    className: "placeholder-right"
  }, /*#__PURE__*/_createElement("div", {
    className: "placeholder-top"
  }, /*#__PURE__*/_createElement("div", {
    className: "placeholder-title",
    style: !desc ? {
      lineHeight: '38px'
    } : {}
  }, title), /*#__PURE__*/_createElement("div", {
    className: "placeholder-toolbar"
  }, /*#__PURE__*/_createElement(Toolbar, {
    toolbarConfigs: toolbarConfigs,
    getContainer: getContainer
  }))), desc && /*#__PURE__*/_createElement("div", {
    className: "placeholder-desc"
  }, /*#__PURE__*/_createElement("div", {
    className: "desc-text"
  }, desc)))))) : /*#__PURE__*/_createElement(CardPlaceholderContainer, {
    delay: delay,
    height: height,
    clickable: clickable,
    onClick: onClick,
    "data-id": "card-placeholder-container-" + id,
    type: type
  }, /*#__PURE__*/_createElement(CardContainer, {
    className: "card-container"
  }, icon && /*#__PURE__*/_createElement("div", {
    className: "placeholder-icon-box"
  }, icon), /*#__PURE__*/_createElement("div", {
    className: "placeholder-right"
  }, /*#__PURE__*/_createElement("div", {
    className: "placeholder-top"
  }, /*#__PURE__*/_createElement("div", {
    className: "placeholder-title"
  }, title)))));
};