var _TextSmallIcon, _AbstractSmallIcon, _AbstractSmallIcon2, _CardPreviewNormal, _div, _ToolbarPasteNormal;

import { Dropdown, Menu, MenuItem } from '@ali/we-design';
import { CardPreviewNormal, ToolbarPasteNormal } from '@ali/we-icon';
import { DropdownAnimation, useTranslate } from '@ali/we-util';
import React, { useRef, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { AbstractSmallIcon, TextSmallIcon } from "../cardLayout/toolbar/styleSelectIcon";
import IconMenu from "../iconMenu";
import { SelectGalleryBox, StyleSelectFontBox, StyleSelectIconContainer, Wrapper } from "./styled";
import useDelayedState from "./useDelayedState";

var isCardType = function isCardType(type) {
  return type === 'text' || type === 'card' || type === 'wideCard' || type === 'preview';
};

var isCCPType = function isCCPType(type) {
  return type === 'textFormat' || type === 'sourceFormat' || type === 'matchFormat' || type === 'markdownToDoc';
};

export var PastePanel = function PastePanel(props) {
  var options = props.options,
      onChange = props.onChange,
      _props$hideSplitBtton = props.hideSplitBtton,
      hideSplitBtton = _props$hideSplitBtton === void 0 ? false : _props$hideSplitBtton,
      _props$autoUnfold = props.autoUnfold,
      autoUnfold = _props$autoUnfold === void 0 ? false : _props$autoUnfold,
      locale = props.locale,
      getContainer = props.getContainer,
      width = props.width,
      _props$title = props.title,
      title = _props$title === void 0 ? '' : _props$title;

  var _useDelayedState = useDelayedState(-1),
      visibleIndex = _useDelayedState[0],
      setVisibleIndex = _useDelayedState[1];

  var _useState = useState(0),
      selectKey = _useState[0],
      setSelectKey = _useState[1];

  var _useState2 = useState(autoUnfold),
      buttonVisible = _useState2[0],
      setButtonVisible = _useState2[1];

  var isCreate = useRef(0);
  var t = useTranslate(locale); // 卡片默认配置

  var defaultCardOptionMap = {
    text: {
      icon: _TextSmallIcon || (_TextSmallIcon = /*#__PURE__*/_createElement(TextSmallIcon, null)),
      title: t('we_toolbar_locale_paste_custom_panel_link'),
      des: t('we_toolbar_locale_paste_custom_panel_text'),
      desImg: 'https://img.alicdn.com/imgextra/i4/O1CN01SVRR9O1cHOarEhMi5_!!6000000003575-2-tps-180-140.png'
    },
    card: {
      icon: _AbstractSmallIcon || (_AbstractSmallIcon = /*#__PURE__*/_createElement(AbstractSmallIcon, null)),
      title: t('we_toolbar_locale_paste_custom_panel_abstract_card'),
      des: t('we_toolbar_locale_paste_custom_panel_abstract'),
      desImg: 'https://img.alicdn.com/imgextra/i2/O1CN01fPfwUo1RSskY9PviT_!!6000000002111-2-tps-180-140.png'
    },
    wideCard: {
      icon: _AbstractSmallIcon2 || (_AbstractSmallIcon2 = /*#__PURE__*/_createElement(AbstractSmallIcon, null)),
      title: t('we_toolbar_locale_paste_custom_panel_abstract_card'),
      des: t('we_toolbar_locale_paste_custom_panel_abstract'),
      desImg: 'https://img.alicdn.com/imgextra/i2/O1CN01fPfwUo1RSskY9PviT_!!6000000002111-2-tps-180-140.png'
    },
    preview: {
      icon: _CardPreviewNormal || (_CardPreviewNormal = /*#__PURE__*/_createElement(CardPreviewNormal, null)),
      title: t('we_toolbar_locale_paste_custom_panel_preview_card'),
      des: t('we_toolbar_locale_paste_custom_panel_preview'),
      desImg: 'https://img.alicdn.com/imgextra/i1/O1CN01I7NSjK1RPfypgAwaG_!!6000000002104-2-tps-180-140.png'
    }
  };
  var defaultCCPOptionMap = {
    textFormat: {
      title: t('we_toolbar_locale_paste_mode_text')
    },
    sourceFormat: {
      title: t('we_toolbar_locale_paste_mode_source')
    },
    matchFormat: {
      title: t('we_toolbar_locale_paste_mode_match')
    },
    markdownToDoc: {
      title: t('we_toolbar_locale_paste_mode_markdown')
    }
  };

  var handleVisibleChange = function handleVisibleChange(v, index) {
    if (v) {
      isCreate.current += 1;
      setVisibleIndex(index, 300);
    }
  };

  var handleFocusItemChange = function handleFocusItemChange(key) {
    if (key !== undefined) {
      isCreate.current += 1;
      setVisibleIndex(Number(key), 300);
    }
  };

  var handleButtonVisibleChange = function handleButtonVisibleChange(v) {
    setButtonVisible(v);
  };

  var renderOptionItem = function renderOptionItem(index, key, title, des, desImg, icon) {
    return /*#__PURE__*/_createElement(Dropdown, {
      placement: "rightTop",
      trigger: "hover",
      key: "paste-dropdown-" + key,
      offsetY: -4,
      offsetX: 2,
      onVisibleChange: function onVisibleChange(v) {
        return handleVisibleChange(v, index);
      },
      visible: visibleIndex === index,
      overlay: /*#__PURE__*/_createElement(DropdownAnimation, {
        visible: visibleIndex === index
      }, des && isCreate.current > 1 && visibleIndex === index ? /*#__PURE__*/_createElement(SelectGalleryBox, {
        key: title
      }, /*#__PURE__*/_createElement(StyleSelectIconContainer, null, /*#__PURE__*/_createElement("img", {
        alt: des,
        src: desImg
      })), /*#__PURE__*/_createElement(StyleSelectFontBox, null, title)) : null),
      getContainer: getContainer
    }, /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(MenuItem, {
      icon: icon,
      menuKey: key,
      testid: key,
      role: key,
      onClick: function onClick(_, e) {
        onChange && onChange(key, e);

        if (!hideSplitBtton) {
          setButtonVisible(false);
          setSelectKey(index);
        }
      }
    }, title)));
  };

  var renderMenu = function renderMenu() {
    return /*#__PURE__*/_createElement(Menu, {
      selectedKeys: ["" + selectKey],
      onFocusItemChange: handleFocusItemChange,
      showSelect: true,
      shortcutKey: true,
      showSelectOnRight: true,
      shouldSelectFirstItem: true
    }, options == null ? void 0 : options.map(function (item, index) {
      // 传入的 option 为卡片自定义
      if (typeof item === 'string') {
        if (isCardType(item)) {
          var _defaultCardOptionMap = defaultCardOptionMap[item],
              _title = _defaultCardOptionMap.title,
              icon = _defaultCardOptionMap.icon,
              des = _defaultCardOptionMap.des,
              desImg = _defaultCardOptionMap.desImg;
          return renderOptionItem(index, "" + index, _title, des, desImg, icon) || _div || (_div = /*#__PURE__*/_createElement("div", null));
        } else if (isCCPType(item)) {
          var _title2 = defaultCCPOptionMap[item].title;
          return renderOptionItem(index, item, _title2);
        }
      } else {
        var _ref = item,
            _key = _ref.key,
            _title3 = _ref.title,
            _icon = _ref.icon,
            _des = _ref.des,
            _desImg = _ref.desImg;
        return renderOptionItem(index, _key, _title3, _des, _desImg, _icon);
      }
    }));
  };

  var renderOptions = function renderOptions() {
    return /*#__PURE__*/_createElement(Wrapper, {
      width: width,
      className: "ModeMenu"
    }, /*#__PURE__*/_createElement(DropdownAnimation, {
      visible: true
    }, renderMenu()));
  };

  var renderOverlay = function renderOverlay() {
    return /*#__PURE__*/_createElement(Wrapper, {
      width: width,
      className: "ModeMenu"
    }, renderMenu());
  };

  var renderButton = function renderButton() {
    return /*#__PURE__*/_createElement(IconMenu, {
      icon: _ToolbarPasteNormal || (_ToolbarPasteNormal = /*#__PURE__*/_createElement(ToolbarPasteNormal, null)),
      title: title,
      showTitle: Boolean(title),
      overlay: renderOverlay(),
      visible: buttonVisible,
      onVisibleChange: handleButtonVisibleChange,
      getContainer: getContainer,
      testid: "paste-panel-button"
    });
  };

  return hideSplitBtton ? renderOptions() : renderButton();
};