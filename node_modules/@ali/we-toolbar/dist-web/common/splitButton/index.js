import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

var _OnIdlePlaceholder;

import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SplitButton as SplitButtonUI, Tooltip } from '@ali/we-design';
import { useGetContextLocale, useTranslate } from '@ali/we-util';
import { ToolbarIconContext } from '@ali/we-icon';
import { ButtonWrap, LeftWrapper, TitleWrap } from "./styled";
import { TOOL_SIZE } from "../../utils/consts";
import { classnames } from "../../utils";
import useVisibilitySensor from "../../hooks/useVisibilitySensor";
import { DisableWrap } from "../styled";
import OnIdle, { OnIdlePlaceholder } from "../onIdle";
export var SplitButton = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var icon = props.icon,
      title = props.title,
      showTitle = props.showTitle,
      disabled = props.disabled,
      overlay = props.overlay,
      size = props.size,
      onClickLeft = props.onClickLeft,
      activeLeft = props.activeLeft,
      onActiveChange = props.onActiveChange,
      active = props.active,
      disabledTip = props.disabledTip,
      shortcutText = props.shortcutText,
      tooltip = props.tooltip,
      locale = props.locale,
      testid = props.testid,
      extraNode = props.extraNode,
      getContainer = props.getContainer,
      restProps = _objectWithoutPropertiesLoose(props, ["icon", "title", "showTitle", "disabled", "overlay", "size", "onClickLeft", "activeLeft", "onActiveChange", "active", "disabledTip", "shortcutText", "tooltip", "locale", "testid", "extraNode", "getContainer"]);

  var contextLocale = useGetContextLocale();
  var t = useTranslate(contextLocale);

  var _useVisibilitySensor = useVisibilitySensor(ref, testid),
      el = _useVisibilitySensor.el,
      id = _useVisibilitySensor.id,
      isHide = _useVisibilitySensor.isHide,
      fineAdaptation = _useVisibilitySensor.fineAdaptation,
      groupKey = _useVisibilitySensor.groupKey,
      isInOffScreenWrap = _useVisibilitySensor.isInOffScreenWrap,
      mode = _useVisibilitySensor.mode;

  var onTextClick = useCallback(function (e) {
    onClickLeft && onClickLeft(e);
  }, [onClickLeft]);
  var styleProps = {
    size: size,
    active: activeLeft,
    locale: locale || contextLocale,
    showTitle: showTitle
  };
  var OverlayEl = useMemo(function () {
    var dataTestId = testid ? "overlay-" + testid : '';
    if (!overlay) return /*#__PURE__*/_createElement("div", {
      "data-testid": dataTestId
    });
    return /*#__PURE__*/_createElement(OnIdle, {
      placeholder: _OnIdlePlaceholder || (_OnIdlePlaceholder = /*#__PURE__*/_createElement(OnIdlePlaceholder, null))
    }, /*#__PURE__*/React.cloneElement(overlay, {
      'data-testid': dataTestId
    }));
  }, [overlay, testid]);
  var tooltipForButton = t(tooltip);

  if (shortcutText != null) {
    tooltipForButton += " " + shortcutText;
  }

  var ToolbarIconMemo = useMemo(function () {
    return {
      size: size || 'medium'
    };
  }, [size]);
  var titleNode = useMemo(function () {
    return /*#__PURE__*/_createElement("div", null, title && typeof title !== 'string' ? title : t(title));
  }, [t, title]);
  if (isHide) return null;
  return /*#__PURE__*/_createElement(Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement(DisableWrap, {
    disabled: disabled,
    className: classnames('split-button-layout')
  }, /*#__PURE__*/_createElement(ButtonWrap, _extends({
    ref: el,
    "data-id": id,
    "data-mode": mode,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey
  }, styleProps, {
    active: active,
    activeLeft: activeLeft,
    "data-testid": isInOffScreenWrap ? '' : testid
  }), showTitle && size === TOOL_SIZE.LARGE && /*#__PURE__*/_createElement(TitleWrap, _extends({}, styleProps, {
    onClick: onTextClick
  }), /*#__PURE__*/_createElement("div", null, titleNode)), /*#__PURE__*/_createElement(SplitButtonUI, _extends({
    bordered: false,
    defaultActive: activeLeft,
    active: active,
    overlay: OverlayEl,
    className: "split_btn_toolbar",
    onClickLeft: onTextClick,
    onActiveChange: onActiveChange,
    testid: isInOffScreenWrap ? '' : testid,
    getContainer: getContainer
  }, restProps), /*#__PURE__*/_createElement(ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement(Tooltip, {
    title: disabled ? disabledTip : tooltipForButton
  }, showTitle ? /*#__PURE__*/_createElement(LeftWrapper, _extends({}, styleProps, {
    className: classnames({
      activeLeft: activeLeft
    })
  }), icon, size !== TOOL_SIZE.LARGE && /*#__PURE__*/_createElement("div", {
    className: "split_btn_left_toolbar"
  }, titleNode)) : /*#__PURE__*/_createElement(LeftWrapper, _extends({}, styleProps, {
    className: classnames({
      activeLeft: activeLeft
    })
  }), icon)))), extraNode)));
}));
SplitButton.defaultProps = {
  size: 'medium'
};
export default SplitButton;