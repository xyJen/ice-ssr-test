import _extends from "@babel/runtime/helpers/extends";
import React, { useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useGetContextLocale, useTranslate, hooks } from '@ali/we-util';
import { Button, Tooltip } from '@ali/we-design';
import { ButtonWrap, TitleWrap } from "./styled";
import useVisibilitySensor from "../../hooks/useVisibilitySensor";
import { classnames } from "../../utils";
import { DisableWrap } from "../styled";
import { ToolbarIconContext } from '@ali/we-icon';
export var IconButton = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var icon = props.icon,
      title = props.title,
      tooltip = props.tooltip,
      shortcutText = props.shortcutText,
      showTitle = props.showTitle,
      disabled = props.disabled,
      size = props.size,
      active = props.active,
      onClick = props.onClick,
      testid = props.testid,
      className = props.className,
      onDoubleClick = props.onDoubleClick,
      borderRadius = props.borderRadius,
      disabledTip = props.disabledTip,
      style = props.style,
      extraNode = props.extraNode,
      getContainer = props.getContainer,
      _props$role = props.role,
      role = _props$role === void 0 ? '' : _props$role;
  var contextLocale = useGetContextLocale();
  var t = useTranslate(contextLocale);

  var _hooks$useClickPreven = hooks.useClickPreventionOnDoubleClick(onClick, onDoubleClick),
      click = _hooks$useClickPreven[0],
      doubleClick = _hooks$useClickPreven[1];

  var _useVisibilitySensor = useVisibilitySensor(ref, testid),
      el = _useVisibilitySensor.el,
      id = _useVisibilitySensor.id,
      isHide = _useVisibilitySensor.isHide,
      fineAdaptation = _useVisibilitySensor.fineAdaptation,
      groupKey = _useVisibilitySensor.groupKey,
      isInOffScreenWrap = _useVisibilitySensor.isInOffScreenWrap,
      mode = _useVisibilitySensor.mode;

  var styleProps = {
    size: size,
    active: active,
    showTitle: showTitle,
    borderRadius: borderRadius
  };
  var tooltipForButton = '';

  if (typeof tooltip === 'string') {
    tooltipForButton = t(tooltip);

    if (shortcutText != null) {
      tooltipForButton += " " + shortcutText;
    }
  } else {
    tooltipForButton = tooltip;
  }

  var ToolbarIconMemo = useMemo(function () {
    return {
      size: size || 'medium'
    };
  }, [size]);
  if (isHide) return null;
  return /*#__PURE__*/_createElement(ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement(Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement(DisableWrap, {
    className: "icon-button-layout button-wrap",
    disabled: disabled
  }, /*#__PURE__*/_createElement(ButtonWrap, _extends({
    ref: el,
    "data-id": id,
    "data-mode": mode
  }, styleProps, {
    key: testid,
    locale: contextLocale,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey,
    className: classnames(className, 'button-box', active ? 'actived' : ''),
    onClick: disabled ? undefined : click,
    onDoubleClick: disabled ? undefined : doubleClick,
    style: style,
    "data-testid": (isInOffScreenWrap ? '' : testid) + "_wrap",
    "data-role": role
  }), /*#__PURE__*/_createElement(Button, {
    bordered: false,
    icon: icon,
    testid: isInOffScreenWrap ? '' : testid,
    className: classnames('icon-button'),
    title: tooltipForButton
  }), showTitle ? /*#__PURE__*/_createElement(TitleWrap, _extends({}, styleProps, {
    locale: contextLocale
  }), /*#__PURE__*/_createElement("div", null, title && typeof title !== 'string' ? title : t(title))) : null, extraNode))));
}));
IconButton.defaultProps = {
  size: 'medium'
};
export default IconButton;