import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useCallback, useMemo, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Select as SelectUI, Tooltip } from '@ali/we-design';
import { useGetContextLocale, useTranslate } from '@ali/we-util';
import { ButtonWrap, TextWarp } from "./styled";
import { TOOL_SIZE } from "../../utils/consts";
import { classnames } from "../../utils";
import useVisibilitySensor from "../../hooks/useVisibilitySensor";
import { DisableWrap } from "../styled";
import { ToolbarIconContext } from '@ali/we-icon';
export var TextSelect = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {
  var title = props.title,
      showTitle = props.showTitle,
      disabled = props.disabled,
      size = props.size,
      active = props.active,
      disabledTip = props.disabledTip,
      renderTrigger = props.renderTrigger,
      children = props.children,
      value = props.value,
      onChange = props.onChange,
      locale = props.locale,
      mode = props.mode,
      bordered = props.bordered,
      rules = props.rules,
      style = props.style,
      tooltip = props.tooltip,
      shortcutText = props.shortcutText,
      width = props.width,
      testid = props.testid,
      getContainer = props.getContainer,
      role = props.role,
      _onVisibleChange = props.onVisibleChange,
      restProps = _objectWithoutPropertiesLoose(props, ["title", "showTitle", "disabled", "size", "active", "disabledTip", "renderTrigger", "children", "value", "onChange", "locale", "mode", "bordered", "rules", "style", "tooltip", "shortcutText", "width", "testid", "getContainer", "role", "onVisibleChange"]);

  var contextLocale = useGetContextLocale();
  var t = useTranslate(contextLocale);

  var _useState = useState(false),
      visible = _useState[0],
      setVisible = _useState[1];

  var _useVisibilitySensor = useVisibilitySensor(ref, testid),
      el = _useVisibilitySensor.el,
      id = _useVisibilitySensor.id,
      isHide = _useVisibilitySensor.isHide,
      fineAdaptation = _useVisibilitySensor.fineAdaptation,
      groupKey = _useVisibilitySensor.groupKey,
      isInOffScreenWrap = _useVisibilitySensor.isInOffScreenWrap;

  var styleProps = {
    size: size,
    active: active,
    bordered: bordered,
    showTitle: showTitle,
    mode: mode,
    locale: locale || contextLocale
  };
  var titleNode = useMemo(function () {
    return /*#__PURE__*/_createElement("div", null, title && typeof title !== 'string' ? title : t(title));
  }, [t, title]);
  var makeTrigger = useCallback(function (val) {
    return /*#__PURE__*/_createElement(React.Fragment, null, renderTrigger && renderTrigger(val), ' ', showTitle && size !== TOOL_SIZE.LARGE ? /*#__PURE__*/_createElement(TextWarp, styleProps, titleNode) : null);
  }, [renderTrigger, title, showTitle]);
  var finalTrigger = mode === 'search' || mode === 'input' ? undefined : makeTrigger;
  var height = size === TOOL_SIZE.SMALL ? 24 : 28; // 解决 父组件 box-sizing 失效问题

  var cssStyle = useMemo(function () {
    return _extends({
      width: width,
      height: height
    }, style);
  }, [style]);
  var tooltipForButton = t(tooltip);

  if (shortcutText != null) {
    tooltipForButton += " " + shortcutText;
  }

  var openOverLay = useCallback(function () {
    return setVisible(true);
  }, []);
  var ToolbarIconMemo = useMemo(function () {
    return {
      size: size || 'medium'
    };
  }, [size]);
  if (isHide) return null;
  return /*#__PURE__*/_createElement(ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement(Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement(DisableWrap, {
    disabled: disabled,
    className: classnames('text-select-layout')
  }, /*#__PURE__*/_createElement(ButtonWrap, _extends({
    ref: el,
    "data-id": id,
    "data-mode": mode,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey,
    "data-role": role
  }, styleProps), showTitle && size === TOOL_SIZE.LARGE && /*#__PURE__*/_createElement(TextWarp, _extends({}, styleProps, {
    onClick: openOverLay
  }), titleNode), /*#__PURE__*/_createElement(SelectUI, _extends({}, restProps, {
    className: "select-toolbar",
    onChange: onChange,
    value: value,
    mode: mode,
    style: cssStyle,
    bordered: bordered,
    renderTrigger: finalTrigger,
    title: disabled ? disabledTip : tooltipForButton,
    visible: visible,
    rules: rules,
    onVisibleChange: function onVisibleChange(e) {
      _onVisibleChange == null ? void 0 : _onVisibleChange(e);
      setVisible(e);
    },
    testid: isInOffScreenWrap ? '' : testid,
    showErrorState: false,
    getContainer: getContainer
  }), children)))));
}));
TextSelect.defaultProps = {
  size: 'medium'
};
export default TextSelect;