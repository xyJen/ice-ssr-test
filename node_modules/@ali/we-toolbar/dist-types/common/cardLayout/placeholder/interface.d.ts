/// <reference types="react" />
import { ToolbarConfigsProps } from '../toolbar';
export interface CardPlaceholderProps {
    /**
     * 占位符宽度，可为 number，string（包括百分比表示）
     */
    width?: string | number;
    /**
     * 占位符高度，可为 number，string（包括百分比表示）
     */
    height?: string | number;
    title?: string | React.ReactNode;
    desc?: string;
    testid?: string;
    icon?: React.ReactElement;
    style?: React.CSSProperties;
    className?: string;
    /**
     * export 控制 title 样式，为导出时的样式
     */
    type?: 'export' | 'normal';
    /**
     * 占位符是否被选中 选中有蓝色边框
     */
    isSelected?: boolean;
    /**
     * inlintoolbar 配置项, 这里负责透传
     */
    toolbarConfigs?: ToolbarConfigsProps[];
    /**
     * 点击事件
     */
    onClick?: (e: React.MouseEvent) => void;
    /**
     * 是否支持点击
     */
    clickable?: boolean;
    /**
     * 弹层
     */
    overlay?: React.ReactElement;
    /**
     * 控制弹层是否可见 + 是否 action 状态
     */
    visible?: boolean;
    /**
     * 可见性变化回调
     */
    onVisibleChange?: (e: boolean) => void;
    /**
     * 弹层偏移
     */
    offsetX?: number;
    /**
     * 弹层偏移
     */
    offsetY?: number;
    /**
     * 透传弹层样式
     */
    overlayStyle?: React.CSSProperties;
    /**
     * 是否显示刷新
     */
    refresh?: boolean;
    /**
     * 刷新点击回调
     */
    refreshClick?: (e: React.MouseEvent) => void;
    /**
     * 国际化文案
     */
    locale?: string;
    /**
     * 行内工具栏是否展开的断点宽度
     */
    thresholdWidth?: number;
    /**
     * 挂载元素
     */
    getContainer?: () => HTMLElement;
}
export interface CardPlaceholderH5Props extends Pick<CardPlaceholderProps, 'width' | 'height' | 'title' | 'icon' | 'desc' | 'type' | 'isSelected' | 'clickable' | 'thresholdWidth'> {
    onMouseDown?: () => void;
}
