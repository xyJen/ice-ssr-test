import { CSSProperties } from 'react';
import type { TOptionTitle, IPlacement, SelectRule as Rule } from '@ali/we-design';
declare type Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};
declare type Exclude<T, U> = T extends U ? never : T;
export declare type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;
export declare type ISelectValue = number | string;
export interface CommonComponentProps {
    /**
     * 组件尺寸
     */
    size?: 'medium' | 'small' | 'large';
    /**
     * 是否禁用
     */
    disabled?: boolean;
    /**
     * 禁用时 tooltip 提示文案
     */
    disabledTip?: string;
    /**
     * 工具的 title 文案
     */
    title?: string | React.ReactNode;
    /**
     * 工具的 tooltip 文案
     */
    tooltip?: string | React.ReactNode;
    /**
     * 显示在 tooltip 文案后面
     */
    shortcutText?: string | React.ReactNode;
    /**
     * css 样式
     */
    style?: CSSProperties;
    /**
     * 样式
     */
    className?: string;
    /**
     * 国际化
     */
    locale?: string;
    /**
     * 单测Id
     */
    testid?: string;
    /**
     * 额外节点（如红点等）
     */
    extraNode?: React.ReactNode;
    /**
     * 挂在容器
     */
    getContainer?: () => HTMLElement;
    /**
     * 声明角色
     */
    role?: string;
    /**
     * 下拉菜单的层级
     */
    zIndex?: number;
}
export interface IconButtonProps extends CommonComponentProps {
    /**
     *  icon
     */
    icon: React.ReactNode;
    /**
     * 按钮是否被选中
     */
    active?: boolean;
    /**
     * 是否展示 Title
     */
    showTitle?: boolean;
    /**
     * 点击回调
     */
    onClick?: (e: React.MouseEvent<HTMLElement>) => void;
    /**
     * 双击点击回调
     */
    onDoubleClick?: (e: React.MouseEvent<HTMLElement>) => void;
    /**
     * 定制 BorderRadius
     */
    borderRadius?: number;
}
export declare type IconButtonPropsOmit = Omit<IconButtonProps, 'className' | 'style' | 'icon' | 'optionWrapperStyle'>;
export interface TextSelectProps<T> extends CommonComponentProps {
    /**
     * 当前值
     */
    value?: T;
    /**
     * 默认值
     */
    defaultValue?: T;
    /**
     * 选项的tooltip提示
     */
    titles?: Record<string, TOptionTitle>;
    /**
     * 禁用的选项列表
     */
    disabledKeys?: string[];
    /**
     * 是否显示 title
     */
    showTitle?: boolean;
    /**
     * 是否为激活态
     */
    active?: boolean;
    /**
     * select 样式
     */
    style?: React.CSSProperties;
    /**
     * 对齐方式修改时的回调函数
     */
    onChange?: (align: T) => void;
    /**
     * 弹层可见性变化处理函数
     */
    onVisibleChange?: (e: boolean) => void;
    /**
     * 自定义显示区的函数
     */
    renderTrigger?: (value?: T) => JSX.Element;
    children: React.ReactElement[];
    optionWrapperStyle?: React.CSSProperties;
    /**
     * 是否有边框
     */
    bordered?: boolean;
    /**
     * Select 工作模式
     */
    mode?: 'default' | 'search' | 'input';
    /**
     * 选项是否在选中时显示选中态
     */
    selectable?: boolean;
    /**
     * 是否可以点击
     */
    visible?: boolean;
    /**
     * 传入的校验规则
     */
    rules?: Array<Rule<T>>;
    /**
     * 是否错误
     */
    errored?: boolean;
    /**
     * 定制宽度
     */
    width?: number;
}
export declare type TextSelectPropsOmit<T> = Omit<IconSelectProps<T>, 'className' | 'style' | 'icon' | 'renderTrigger' | 'children' | 'optionWrapperStyle'>;
export interface IconSelectProps<T> extends CommonComponentProps {
    /**
     * 当前值
     */
    value?: T;
    /**
     * 默认值
     */
    defaultValue?: T;
    /**
     * 选项的tooltip提示
     */
    titles?: Record<string, TOptionTitle>;
    /**
     * 禁用的选项列表
     */
    disabledKeys?: string[];
    /**
     * 是否显示 title
     */
    showTitle?: boolean;
    /**
     * 是否为激活态
     */
    active?: boolean;
    /**
     * select 样式
     */
    style?: React.CSSProperties;
    /**
     * 值改变时回调
     */
    onChange?: (align: T) => void;
    /**
     * 值点击时回调
     */
    onSelect?: (align: T) => void;
    /**
     * 自定义显示区的函数
     */
    renderTrigger?: (value?: T) => JSX.Element;
    children: React.ReactElement[];
    optionWrapperStyle?: React.CSSProperties;
    /**
     * 是否有边框
     */
    bordered?: boolean;
    /**
     * 选项是否在选中时显示选中态
     */
    selectable?: boolean;
    /**
     * 是否可以点击
     */
    visible?: boolean;
    /**
     * 传入的校验规则
     */
    rules?: Array<Rule<T>>;
    /**
     * 是否错误
     */
    errored?: boolean;
    /**
     * 定制宽度
     */
    width?: number;
    /**
     * 定制 BorderRadius
     */
    borderRadius?: number;
    animationPlacement?: 'top' | 'left' | 'right' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight' | 'leftTop' | 'leftBottom' | 'rightTop' | 'rightBottom';
}
export interface CardLayoutProps {
    /**
     * 行内工具栏
     */
    toolbar?: React.ReactElement | null;
    /**
     * 子组件
     */
    children: React.ReactElement;
    /**
     * 是否选中
     */
    isSelected?: boolean;
    /**
     * 监听 toolbar 宽度
     */
    onToolbarWidthChange?: (width: number) => void;
    /**
     * 监听 hover 事件
     */
    onHoverChange?: (e: boolean) => void;
    /**
     * 行内工具栏受控显示
     */
    toolbarVisible?: boolean;
    /**
     * 自定义样式
     */
    style?: React.CSSProperties;
    /**
     * 行内工具栏 X 漂移
     */
    toolbarOffsetX?: number;
    /**
     * 行内工具栏 Y 漂移
     */
    toolbarOffsetY?: number;
}
export declare type IconSelectPropsOmit<T> = Omit<IconSelectProps<T>, 'className' | 'style' | 'icon' | 'renderTrigger' | 'children'>;
export interface IconMenuProps extends CommonComponentProps {
    /**
     * 触发机制
     */
    trigger?: 'hover' | 'click' | 'contextMenu';
    /**
     *  icon
     */
    icon: React.ReactNode;
    /**
     * 是否展示 Title
     */
    showTitle?: boolean;
    /**
     * 弹层节点
     */
    overlay: React.ReactElement | null;
    /**
     * 是否默认收起
     */
    autoClose?: boolean;
    /**
     * 弹层可见性变化处理函数
     */
    onVisibleChange?: (e: boolean) => void;
    /**
     * 弹层位置
     */
    placement?: IPlacement;
    /**
     * 弹层可见性
     */
    visible?: boolean;
    /**
     * 按钮是否被选中
     */
    active?: boolean;
    /**
     *  title 容器的宽度
     */
    titleWidth?: number;
    /**
     * 是否展示右边小三角
     */
    showArrow?: boolean;
    /**
     * overlay 控制 offsetY
     */
    offsetY?: number;
    /**
     * overlay 的 X轴的偏移
     */
    offsetX?: number;
    /**
     * 弹层样式
     */
    overlayStyle?: React.CSSProperties;
    animationPlacement?: 'top' | 'left' | 'right' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight' | 'leftTop' | 'leftBottom' | 'rightTop' | 'rightBottom';
}
export declare type IconMenuPropsOmit = Omit<IconMenuProps, 'className' | 'style' | 'icon'>;
export interface SplitButtonProps extends CommonComponentProps {
    /**
     * 是否为激活态
     */
    active?: boolean;
    /**
     * 左侧按钮是否被选中
     */
    activeLeft?: boolean;
    /**
     * 左侧按钮 icon
     */
    icon?: React.ReactElement;
    /**
     * 下拉内容，可以根据用户自定义
     */
    overlay?: React.ReactElement;
    /**
     * 默认是否展开
     */
    defaultActive?: boolean;
    /**
     * 暴露 data-testid, 用于测试
     */
    testid?: string;
    /**
     * 背景色高亮
     */
    highlight?: boolean;
    /**
     * 是否展示 Title
     */
    showTitle?: boolean;
    /**
     * 右侧悬浮窗是否显示
     */
    onActiveChange?: (visible: boolean) => void;
    /**
     * 点击回调
     */
    onClickLeft?: (e?: any) => void;
    /**
     * 是否显示发生变化的回调
     */
    onVisibleChange?: (visible: boolean) => void;
}
export declare type SplitButtonOmit = Omit<SplitButtonProps, 'className' | 'style' | 'title' | 'icon' | 'locale' | 'overlay' | 'onActiveChange' | 'onClickLeft' | 'highlight' | 'activeLeft' | 'defaultActive'>;
export {};
