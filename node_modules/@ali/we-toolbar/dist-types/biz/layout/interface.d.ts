/// <reference types="react" />
export interface BlockType {
    id: string;
    offset: number;
    elType: 'group' | 'biz';
    groupId?: string;
    width: number;
    mode?: string | null;
    hasFontSizeMaxSelect?: boolean | null;
}
export interface ToolbarController {
    mode?: ModeType;
    containment?: HTMLElement;
    hideBlocks?: string[];
    width?: number;
    leftWrapWidth?: number;
    layoutResize?: (width: number) => void;
    isInOffScreenWrap?: boolean;
    fontSizeMaxSelectSafeWidth?: number;
}
export declare enum MODE_TYPE {
    singleLine = "singleLine",
    doubleLine = "doubleLine"
}
export declare enum LAYOUT_TYPE {
    column = "column",
    row = "row"
}
export declare type ModeType = 'singleLine' | 'doubleLine';
export declare type LayoutType = 'column' | 'row';
export interface ToolbarLayoutProps {
    /**
     * 工具栏的模式(单行或双行)，非受控模式
     */
    defaultMode?: ModeType;
    /**
     * 工具栏的模式(单行或双行)，受控模式
     */
    mode?: ModeType;
    /**
     * 工具栏模式发生变化时回调
     */
    onModeChange?: (mode: ModeType) => void;
    /**
     * 单行工具栏
     */
    singleLineToolbar: React.ReactElement;
    /**
     * 双行工具栏
     */
    doubleLineToolbar: React.ReactElement;
    /**
     * 菜单栏宽度
     */
    width?: number | string;
    /**
     * 国际化
     */
    locale?: string;
    /**
     * 工具栏右边缩放安全距离
     */
    safeDistance?: number;
    /**
     * 隐藏单双行切换按钮
     */
    hideSwitchBtn?: boolean;
    /**
     * 背景色值
     */
    backgroundColor?: string;
}
export interface GroupWrapperProps {
    /**
     * 优先的布局方式
     */
    layoutType?: LayoutType;
    /**
     * 精细自适应缩进，否则整个 group 缩进
     */
    fineAdaptation?: boolean;
    /**
     * group 的索引值
     */
    groupKey: string;
    /**
     * 不要右边边框
     */
    hideBorder?: boolean;
    /**
     * 分组不要内间距
     */
    clearPadding?: boolean;
}
export interface RowWrapperProps {
}
export interface ColumnWrapperProps {
}
export interface IOverLayContext {
    inOverlay: boolean;
    overlayHideBlocks: string[];
    ignoreRegister: boolean;
}
export interface OffScreenWrapperProps {
    /**
     * 单行工具栏
     */
    singleLineToolbar: React.ReactElement;
    /**
     * 双行工具栏
     */
    doubleLineToolbar: React.ReactElement;
    /**
     * 工具栏的模式(单行或双行)，受控模式
     */
    mode?: ModeType;
    /**
     * 菜单工具变化
     */
    onBlockChange: (e: BlockType[]) => void;
    /**
     * 需要重新计算位置
     */
    needGetPositions: number;
    id: string;
}
export interface SpaceBetweenLayoutProps {
    /**
     * 菜单外部左边的容器
     */
    leftOutModule: React.ReactElement;
    /**
     * 菜单外部左边的容器宽度
     */
    leftOutModuleWidth: number;
    /**
     * 菜单外部右边的容器
     */
    rightOutModule: React.ReactElement;
    /**
     * 菜单外部右边的容器宽度
     */
    rightOutModuleWidth: number;
    /**
     * 左边容器
     */
    leftModule: React.ReactElement;
    /**
     * 右边容器
     */
    centerModule: React.ReactElement;
    /**
     * 国际化
     */
    locale?: string;
}
export interface SpaceBetweenLayoutOffScreenProps {
    /**
     * 左边容器
     */
    leftModule: React.ReactElement;
    /**
     * 右边容器
     */
    centerModule: React.ReactElement;
    /**
     * 菜单工具变化
     */
    onBlockChange: (e: BlockType[]) => void;
    /**
     * 需要重新计算位置
     */
    needGetPositions: number;
}
