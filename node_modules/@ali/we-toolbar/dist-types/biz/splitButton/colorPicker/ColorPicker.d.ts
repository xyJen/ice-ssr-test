import React from 'react';
import { EColorPanelMode } from './ColorPalette';
import { SplitButtonOmit } from '../../../common/interface';
export interface IColorPickerProps extends SplitButtonOmit {
    /**
     * SplitButton的默认激活状态
     */
    defaultActive?: boolean;
    /**
     * 默认的初始颜色值
     */
    defaultColor?: string;
    /**
     * 当前选中的颜色值
     */
    color?: string;
    /**
     * 自动颜色块的颜色
     */
    automaticColor: string;
    /**
     * 要显示清楚线的颜色块的颜色值
     */
    clearColor?: string;
    /**
     * 是否显示 colorPicker 组件, 即：选择“更多”颜色的组件
     */
    picker?: boolean;
    /**
     * 颜色选中后的回调函数，isAfter 为 true 表明颜色面板中用户停止操作之后触发的事件
     */
    onColorPicker: (color: string, isAfter: boolean) => void;
    /**
     * 颜色选择按钮类型，会覆盖 btnIcon 属性
     */
    btnType?: EColorPickerIcon;
    /**
     * 颜色选择按钮的图标组件
     */
    btnIcon?: React.ReactNode;
    /**
     * SplitButton左侧点击时的回调函数
     */
    onClickLeft?: (color: string) => void;
    /**
     * 本地语言类型，如zh-CN
     */
    locale?: string;
    /**
     * tooltip提示
     */
    title?: string | React.ReactNode;
    showRecentColors?: boolean;
    /**
     * 是否显示自动
     */
    showAutomatic?: boolean;
    /**
     * 色块hover出现的字
     */
    colorBlockText?: string;
    /**
     * 自定义色块hover出现的字的颜色
     */
    customColorBlockTextColor?: (color: string) => string;
    /**
     * 自定义颜色面板插槽
     */
    customColorPalette?: React.ReactElement;
    /**
     * 是否显示面板样式切换下拉框, 默认不显示
     */
    showToggleSelect?: boolean;
    /**
     * 面板样式下拉框响应函数函数
     */
    onSelectValueChange?: (mode: EColorPanelMode) => void;
    /**
     * 艺术色板是否显示渐变色, 默认不显示
     */
    showGradient?: boolean;
    /**
     * 艺术色板第几行拥有双倍下间距，有渐变色时默认 1， 其它默认 0
     */
    doubleGapRowIndex?: number;
    /**
     * 获取色板样式, 默认返回 normal
     */
    getColorPanelMode?: () => EColorPanelMode;
}
interface IColorPickerState {
    currentColor: string;
    currentActive: boolean;
}
export declare enum EColorPickerIcon {
    font = "font",
    background = "background",
    backgroundfont = "backgroundfont",
    backgroundsheet = "backgroundsheet"
}
export declare class ColorPicker extends React.PureComponent<IColorPickerProps, IColorPickerState> {
    constructor(props: IColorPickerProps);
    handlePaletteClick: (e: any) => void;
    handleColorPick: (color: string) => void;
    handleCustomColor: (color: string, isAfter: boolean) => void;
    handleCustomColorPick: (color: string) => void;
    handleCustomColorAfterPick: (color: string) => void;
    handleClickLeft: () => void;
    handleActive: (active: boolean) => void;
    getColorPalette: () => React.ReactElement;
    renderCustomTrigger(): React.ReactElement;
    render(): JSX.Element;
}
export {};
