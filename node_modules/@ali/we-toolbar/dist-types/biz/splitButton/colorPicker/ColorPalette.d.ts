import React, { PureComponent } from 'react';
import { IColorResult } from './ColorBlockItem';
export declare enum EColorPanelMode {
    normal = "normal",
    art = "art"
}
export interface IColorPaletteProps {
    /**
     * 要选中的目标颜色
     */
    color: string;
    /**
     * 快捷设置（自动）的颜色
     */
    automaticColor: string;
    /**
     * 要显示清楚线的颜色块的颜色值
     */
    clearColor?: string;
    /**
     * 是否显示 colorPicker 组件, 即：选择“更多”颜色的组件
     */
    picker?: boolean;
    /**
     * 是否显示 最近使用 的颜色
     */
    showRecentColors?: boolean;
    /**
     * 选中颜色的回调
     */
    onPick: (color: string) => void;
    /**
     * 选中自定义颜色的回调，picker为true时生效
     */
    onCustomColorPick?: (color: string) => void;
    /**
     * 拖动放开后自定义颜色的回调，picker为true时生效
     */
    onCustomColorAfterPick?: (color: string) => void;
    /**
     * 本地语言类型，如zh-CN
     */
    locale?: string;
    /**
     * 快捷设置颜色的文案（如 "自动" "无颜色"）
     */
    quickSetText?: string | React.ReactNode;
    /**
     * 是否显示自动
     */
    showAutomatic?: boolean;
    /**
     * 色块hover出现的字
     */
    colorBlockText?: string;
    /**
     * 自定义色块hover出现的字的颜色
     */
    customColorBlockTextColor?: (color: string) => string;
    /**
     * 自定义颜色面板插槽
     */
    customColorPalette?: React.ReactElement;
    /**
     * 是否显示面板样式切换下拉框, 默认不显示
     */
    showToggleSelect?: boolean;
    /**
     * 面板样式下拉框响应函数函数
     */
    onSelectValueChange?: (mode: EColorPanelMode) => void;
    /**
     * 艺术色板是否显示渐变色, 默认不显示
     */
    showGradient?: boolean;
    /**
     * 艺术色板第几行拥有双倍下间距，有渐变色时默认 1， 其它默认 0
     */
    doubleGapRowIndex?: number;
    /**
     * 获取色板样式, 默认返回 normal
     */
    getColorPanelMode?: () => EColorPanelMode;
}
interface IColorPaletteState {
    customColor: string;
    showPicker: boolean;
    isPickerAlignRight: boolean;
    recentColors: string[];
    mode: EColorPanelMode;
}
export declare class ColorPalette extends PureComponent<IColorPaletteProps, IColorPaletteState> {
    static defaultProps: {
        color: string;
        onPick: () => void;
        canClear: boolean;
        automaticColor: string;
        latestColors: never[];
        picker: boolean;
        showRecentColors: boolean;
        showAutomatic: boolean;
    };
    private readonly refPalette;
    private readonly moreButtonRef;
    private timer;
    constructor(props: IColorPaletteProps);
    handlePick: (color: string) => void;
    handleCustomClick: (e: any) => void;
    showHandleCustomPicker: (e: any) => void;
    hideHandleCustomPicker: () => void;
    componentWillUnmount(): void;
    changePickerAlignment: () => void;
    getColorStringColorObj: (colorObj: IColorResult) => string;
    handleCustomPickerChange: (colorObj: IColorResult) => void;
    handleCustomPickerAfterChange: (colorObj: IColorResult) => void;
    handleConfirmCustomColor: () => void;
    addRecentColor: (color: string) => void;
    handleSelectChange: (mode: EColorPanelMode) => void;
    getColorData: () => string[][];
    renderCustomerColor: () => JSX.Element;
    render(): JSX.Element;
}
export {};
