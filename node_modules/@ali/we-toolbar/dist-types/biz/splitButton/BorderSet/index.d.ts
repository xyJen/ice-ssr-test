import React from 'react';
import { SplitButtonOmit } from '../../../common/interface';
import { ILineTypeValue } from '@ali/we-design';
import { EColorPanelMode } from '../colorPicker';
import { BorderType } from './BorderTypePanel';
export interface IBorderProps {
    borderColor?: string;
    borderType?: BorderType;
    borderStyle?: string;
}
export declare type ILineType = ILineTypeValue;
export interface IBorderSetProps extends SplitButtonOmit {
    /**
     * 选中的边框类型
     */
    borderType?: BorderType;
    /**
     * 边框图标的大小
     */
    borderIconSize?: number;
    /**
     * 线条类型的数组
     */
    borderStyles?: Record<string, ILineType>;
    /**
     * 默认的边框样式
     */
    defaultBorderStyle?: string;
    /**
     * 当前选中的颜色值
     */
    color?: string;
    /**
     * 边框属性发生变化时的回调
     * changeProps: 发生变化的属性值
     * allProps: BorderSet相关的所有属性集
     */
    onChange?: (allProps: Required<IBorderProps>, changeProps: IBorderProps) => void;
    /**
     * 点击左侧按钮的回调
     */
    onClick?: (allProps: Required<IBorderProps>) => void;
    /**
     * 本地语言类型，如zh-CN
     */
    locale?: string;
    /**
     * 是否禁用
     */
    disabled?: boolean;
    /**
     * 标题
     */
    title?: string | React.ReactNode;
    /**
     * 是否显示面板样式切换下拉框, 默认不显示
     */
    showToggleSelect?: boolean;
    /**
     * 面板样式下拉框响应函数函数
     */
    onSelectValueChange?: (mode: EColorPanelMode) => void;
    /**
     * 艺术色板是否显示渐变色, 默认不显示
     */
    showGradient?: boolean;
    /**
     * 艺术色板第几行拥有双倍下间距，有渐变色时默认 1， 其它默认 0
     */
    doubleGapRowIndex?: number;
    /**
     * 获取色板样式, 默认返回 normal
     */
    getColorPanelMode?: () => EColorPanelMode;
}
interface IBorderSetState {
    innerColor: string;
    innerLineType: string;
    innerBorderType: BorderType;
    dropdownVisible: boolean;
    colorPickerVisible: boolean;
    lineSelectVisible: boolean;
}
export declare class BorderSet extends React.PureComponent<IBorderSetProps, IBorderSetState> {
    static defaultProps: {
        title?: React.ReactNode;
        getContainer?: (() => HTMLElement) | undefined;
        role?: string | undefined;
        onClick?: ((e: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        onDoubleClick?: ((e: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
        disabled?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        zIndex?: number | undefined;
        testid?: string | undefined;
        locale?: string | undefined;
        tooltip?: React.ReactNode;
        active?: boolean | undefined;
        disabledTip?: string | undefined;
        borderRadius?: number | undefined;
        showTitle?: boolean | undefined;
        shortcutText?: React.ReactNode;
        extraNode?: React.ReactNode;
        borderIconSize: number;
    };
    constructor(props: IBorderSetProps);
    handleClick: (e: React.MouseEvent) => void;
    handleVisibleChange: (visible: boolean) => void;
    handleClickLeft: () => void;
    handlePropertyChange: (borderProps: IBorderProps) => void;
    handleColorChange: (color: string) => void;
    handleLineChange: (type: string) => void;
    handleBorderChange: (type: BorderType) => void;
    handleColorPickerVisible: (visible: boolean) => void;
    handleLineSelectVisible: (e: boolean) => void;
    handleBorderNoneClick: () => void;
    getOverlayContent: () => JSX.Element;
    renderShowIcon: () => JSX.Element;
    render(): JSX.Element;
}
export {};
