import { IPlacement } from '@ali/we-design';
export { default as copyToClipboard } from './copyToClipboard';
export * from './portal';
export * from './hotKey';
export * from './number';
export * from './consts';
export * from './dragAndDropHOC';
export declare const runNextTime: (fn: FrameRequestCallback) => void;
export declare const pick: <T extends unknown, K extends keyof T>(target: T, fields: K[]) => { [k in keyof T]: T[k]; };
export declare const omit: <T extends Record<string, any>, K extends keyof T>(target: T, fields: K[]) => { [k in Exclude<keyof T, K>]: T[k]; };
export declare const throttle: (callback: (...args: any[]) => void, delay: number) => (...args: any[]) => void;
export declare const debounce: (callback: (...args: any[]) => void, delay: number) => {
    (...args: any[]): any;
    cancel(): void;
};
export declare const uuid: () => string;
export declare const uniq: (targets: any[]) => any[];
export declare const uniqBy: (targets: any[], key: string) => any[];
export declare const typeOf: (target: any) => string;
export declare const isEqual: (target: any, ref: any) => boolean;
export declare const camelCase: (target: string) => string;
export declare const classnames: (...args: any[]) => string;
export declare const getAlignPointsAndOffsets: (placement: IPlacement, offset?: number) => {
    points: string[];
    offsets: number[];
};
export declare const isWhite: (c: string | null) => boolean;
export declare const isTransparent: (c: string) => boolean;
export declare function get(source: object, path: string, defaultValue: any): any;
