'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var _extends = require('@babel/runtime/helpers/extends');
var weDesign = require('@ali/we-design');
var weUtil = require('@ali/we-util');
var weIcon = require('@ali/we-icon');
var styled = require('styled-components');
var tinycolor = require('tinycolor2');
var reactCSS = require('reactcss');
var PropTypes = require('prop-types');
require('react-dom');
var getAsync = require('get-async');
var uuid$1 = require('uuid');
var fastdom = require('fastdom');
var CSSTransitionGroup = require('react-transition-group/CSSTransitionGroup');
var ResizeObserver = require('resize-observer-polyfill');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var tinycolor__default = /*#__PURE__*/_interopDefaultLegacy(tinycolor);
var reactCSS__default = /*#__PURE__*/_interopDefaultLegacy(reactCSS);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var getAsync__default = /*#__PURE__*/_interopDefaultLegacy(getAsync);
var fastdom__default = /*#__PURE__*/_interopDefaultLegacy(fastdom);
var CSSTransitionGroup__default = /*#__PURE__*/_interopDefaultLegacy(CSSTransitionGroup);
var ResizeObserver__default = /*#__PURE__*/_interopDefaultLegacy(ResizeObserver);

const IconButtonDefaultProps = {
  active: false,
  size: 'medium',
  disabled: false
};
const IconSelectDefaultProps = {
  active: false,
  size: 'medium',
  disabled: false
};

const TOOL_SIZE = {
  MEDIUM: 'medium',
  SMALL: 'small',
  LARGE: 'large'
};

const TitleWrap$3 = weDesign.withTheme(styled__default['default'].div(["font-size:", ";color:", ";font-weight:normal;user-select:none;cursor:default;margin-left:", ";align-items:center;display:flex;flex:1;text-align:center;max-width:52px;min-width:45px;justify-content:center;div{overflow:hidden;text-overflow:ellipsis;padding-top:2px;-webkit-line-clamp:2;word-break:break-word;line-height:12px;}", ";"], ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  theme
}) => theme.ui.commonActionIconColor, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? '' : theme.ui.marginMini, ({
  disabled
}) => disabled && 'opacity:.35;cursor:not-allowed;'));
const LeftWrapper$1 = weDesign.withTheme(styled__default['default'].div(["display:flex;user-select:none;padding:", ";font-weight:normal;flex-direction:", ";.split_btn_left_toolbar{margin-left:", ";color:", ";font-size:", ";", "}"], ({
  theme,
  size
}) => `${size === TOOL_SIZE.MEDIUM ? theme.ui.paddingTiny : theme.ui.paddingMini} ${theme.ui.paddingMini}`, ({
  size
}) => size === TOOL_SIZE.LARGE ? 'column' : 'row', ({
  theme
}) => theme.ui.marginMini, ({
  theme
}) => theme.ui.commonActionIconColor, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : '13px', ({
  disabled
}) => disabled && styled.css(["opacity:0.75;"])));
const largeAndShowTitleWrap$1 = /*#__PURE__*/styled.css(["max-width:52px;min-width:45px;:hover .split_btn_toolbar{background-color:", ";}:hover .split_btn_toolbar .splitbutton-left{border-right:1px solid ", ";}", ";"], ({
  theme,
  disabled,
  activeLeft
}) => disabled && !activeLeft ? theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonHover, ({
  theme,
  disabled,
  activeLeft
}) => disabled && !activeLeft ? theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonHover, ({
  activeLeft,
  theme
}) => activeLeft && styled.css(["background-color:", ";.split_btn_toolbar{background-color:", ";}"], theme.ui.toolbarButtonTransparent, theme.ui.toolbarButtonHover));
weDesign.withTheme(styled__default['default'].div(["text-align:center;display:flex;align-items:flex-end;height:24px;line-height:11px;font-size:", ";color:", ";justify-content:center;", ""], ({
  theme
}) => theme.ui.fontSizeMenu, ({
  theme
}) => theme.ui.toolbarButtonIcon, ({
  theme,
  disabled,
  activeLeft
}) => disabled ? styled.css(["opacity:0.35;"]) : styled.css([":hover ~ .split_btn_toolbar{background-color:", ";}:hover ~ .split_btn_toolbar .splitbutton-left{border-right:1px solid ", ";}:active ~ .split_btn_toolbar .splitbutton-left{background-color:", ";border-right:1px solid transparent;}"], theme.ui.toolbarButtonHover, ({
  theme
}) => theme.ui.toolbarButtonHover, disabled ? activeLeft ? theme.ui.toolbarButtonSelect : theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonClick)));
const ButtonWrap$5 = weDesign.withTheme(styled__default['default'].div(["position:relative;user-select:none;flex-direction:column-reverse;display:flex;cursor:", ";border-radius:", ";", " .splitbutton-left{margin:0;padding:0;height:auto;border-right:1px solid transparent;", "}.splitbutton-left:hover{padding-right:0;border-right:1px solid ", ";}.splitbutton-left:active{background-color:", ";", "}.splitbutton-right{padding:0;width:12px;display:flex;justify-content:center;align-items:center;}.splitbutton-right:hover{background-color:", ";}.splitbutton-right:active{background-color:", ";}.split_btn_toolbar .splitbutton-right .weicon{transform:rotate(0deg) scale(1);font-size:8px;color:", ";opacity:", ";}.split_btn_toolbar .splitbutton-right .weicon.opened{transform:rotate(180deg) scale(1);font-size:8px;color:", ";opacity:", ";}.split_btn_toolbar{height:auto;display:flex;cursor:", ";margin:auto;}.split_btn_toolbar:hover{background-color:", ";}.weicon{font-size:", ";}", " ", ";"], ({
  disabled
}) => disabled ? 'not-allowed' : 'default', ({
  theme
}) => theme.ui.radius, ({
  size
}) => size === TOOL_SIZE.LARGE && styled.css(["height:52px;"]), ({
  activeLeft,
  theme
}) => activeLeft && styled.css(["background-color:", ";border-right:1px solid ", ";"], theme.ui.toolbarButtonSelect, ({
  theme
}) => theme.ui.toolbarButton4), ({
  theme,
  disabled,
  activeLeft
}) => disabled && !activeLeft ? theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonHover, ({
  theme,
  disabled,
  activeLeft
}) => disabled ? activeLeft ? theme.ui.toolbarButtonSelect : theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonClick, ({
  disabled
}) => !disabled && styled.css(["border-right:1px solid transparent;"]), ({
  theme,
  disabled,
  active
}) => disabled ? theme.ui.toolbarButtonTransparent : active ? theme.ui.toolbarButtonClick : theme.ui.toolbarButtonHover, ({
  theme,
  disabled
}) => disabled ? theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonClick, ({
  theme
}) => theme.ui.toolbarButtonIcon56, ({
  disabled
}) => disabled && 0.35, ({
  theme
}) => theme.ui.toolbarButtonIcon56, ({
  disabled
}) => disabled && 0.35, ({
  disabled
}) => disabled ? 'not-allowed' : 'default', ({
  theme,
  disabled,
  activeLeft
}) => disabled ? activeLeft ? theme.ui.toolbarButtonHover : theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonHover, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.toolbarFontSizeIconLarge : theme.ui.toolbarFontSizeIcon, ({
  activeLeft,
  theme
}) => activeLeft && styled.css([".split_btn_toolbar{background-color:", ";}"], theme.ui.toolbarButtonHover), ({
  size,
  showTitle
}) => size === TOOL_SIZE.LARGE && showTitle && largeAndShowTitleWrap$1));

function elementContain(box, el) {
  if (!box) return false;
  let target = el;

  while (target) {
    if (target === box) return true;
    target = target.parentElement;
  }

  return false;
}
const mobileReg = /(android|iphone|symbianos|windows phone|ipad|ipod)/i;
mobileReg.test(navigator.userAgent.toLocaleLowerCase());
const iosReg = /os ([\\.\\_\d]+) like mac os/i;
iosReg.test(navigator.userAgent.toLocaleLowerCase());

/* eslint-disable no-param-reassign */
const debounce = (callback, delay) => {
  let debounceTimer;

  const handler = (...args) => {
    clearTimeout(debounceTimer);
    debounceTimer = window.setTimeout(() => callback(...args), delay);
  };

  handler.cancel = () => {
    if (debounceTimer) {
      clearTimeout(debounceTimer);
      debounceTimer = 0;
    }
  };

  return handler;
};
const uuid = (() => {
  let id = 0;
  return () => (+new Date()).toString(36) + id++;
})();
const classnames = (...args) => {
  const names = [];
  args.forEach(item => {
    if (!item) return;

    if (typeof item === 'string') {
      names.push(item);
      return;
    }

    Object.keys(item).forEach(k => {
      if (item[k]) names.push(k);
    });
  });
  return names.join(' ');
};

const isWhite = function (c) {
  if (!c) return false;
  return tinycolor__default['default'](c).toHex() === 'ffffff';
}; // 检测是否透明

const isTransparent = function (c) {
  if (!c) return false;
  return tinycolor__default['default'](c).getAlpha() === 0;
};

const ToolbarContext = /*#__PURE__*/React__default['default'].createContext({
  hideBlocks: [],
  width: 0,
  leftWrapWidth: 0,
  layoutResize: () => {},
  fontSizeMaxSelectSafeWidth: 0
});
const GroupWrapperContext = /*#__PURE__*/React__default['default'].createContext({
  groupKey: ''
});
const OverLayContext = /*#__PURE__*/React__default['default'].createContext({
  inOverlay: true,
  overlayHideBlocks: [],
  ignoreRegister: false
});

var useVisibilitySensor = ((ref, testid) => {
  const el = React.useRef();
  const {
    fineAdaptation,
    groupKey
  } = React.useContext(GroupWrapperContext);
  const {
    inOverlay,
    overlayHideBlocks,
    ignoreRegister
  } = React.useContext(OverLayContext);
  const {
    hideBlocks = [],
    mode,
    isInOffScreenWrap
  } = React.useContext(ToolbarContext);
  const id = React.useMemo(() => [mode, groupKey, testid || uuid()].filter(o => o).join('-'), [groupKey, mode]);
  const isHide = React.useCallback(() => {
    if (!fineAdaptation) return false;

    if (inOverlay) {
      return overlayHideBlocks.indexOf(id) !== -1;
    } else {
      return hideBlocks.indexOf(id) !== -1;
    }
  }, [inOverlay, overlayHideBlocks, hideBlocks, groupKey, fineAdaptation, testid]);
  return {
    el: ref || el,
    id,
    isHide: isHide(),
    fineAdaptation,
    groupKey: [mode, groupKey].filter(o => o).join('-'),
    mode,
    ignoreRegister,
    inOverlay,
    isInOffScreenWrap
  };
});

const DisableWrap = weDesign.withTheme(styled__default['default'].div(["display:flex;", ""], ({
  disabled
}) => disabled && styled.css(["opacity:0.35;position:relative;&:before{content:'';position:absolute;top:0;left:0;right:0;bottom:0;z-index:1;cursor:not-allowed;}"])));

// @ts-nocheck

/*
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const supportsRequestIdleCallback_ = typeof requestIdleCallback === 'function';
/**
 * A minimal shim of the native IdleDeadline class.
 */

class IdleDeadline {
  /** @param {number} initTime */
  constructor(initTime) {
    this.didTimeout = false;
    this.initTime_ = initTime;
  }
  /** @return {boolean} */


  /** @return {number} */
  timeRemaining() {
    return Math.max(0, 50 - (Date.now() - this.initTime_));
  }

}
/**
 * A minimal shim for the requestIdleCallback function. This accepts a
 * callback function and runs it at the next idle period, passing in an
 * object with a `timeRemaining()` method.
 * @private
 * @param {!Function} callback
 * @return {number}
 */


const requestIdleCallbackShim = callback => {
  const deadline = new IdleDeadline(Date.now());
  return setTimeout(() => callback(deadline), 0);
};
/**
 * A minimal shim for the  cancelIdleCallback function. This accepts a
 * handle identifying the idle callback to cancel.
 * @private
 * @param {number|null} handle
 */


const cancelIdleCallbackShim = handle => {
  clearTimeout(handle);
};
/**
 * The native `requestIdleCallback()` function or `cancelIdleCallbackShim()`
 *.if the browser doesn't support it.
 * @param {!Function} callback
 * @return {number}
 */


const rIC = supportsRequestIdleCallback_ ? requestIdleCallback : requestIdleCallbackShim;
/**
 * The native `cancelIdleCallback()` function or `cancelIdleCallbackShim()`
 * if the browser doesn't support it.
 * @param {number} handle
 */

const cIC = supportsRequestIdleCallback_ ? cancelIdleCallback : cancelIdleCallbackShim;

// @ts-nocheck

/*
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @return {!Function}
 */
const createQueueMicrotaskViaPromises = () => {
  return microtask => {
    Promise.resolve().then(microtask);
  };
};
/**
 * @return {!Function}
 */


const createQueueMicrotaskViaMutationObserver = () => {
  let i = 0;
  let microtaskQueue = [];
  const observer = new MutationObserver(() => {
    microtaskQueue.forEach(microtask => microtask());
    microtaskQueue = [];
  });
  const node = document.createTextNode('');
  observer.observe(node, {
    characterData: true
  });
  return microtask => {
    microtaskQueue.push(microtask); // Trigger a mutation observer callback, which is a microtask.

    node.data = String(++i % 2);
  };
};
/**
 * Queues a function to be run in the next microtask. If the browser supports
 * Promises, those are used. Otherwise it falls back to MutationObserver.
 * Note: since Promise polyfills are popular but not all support microtasks,
 * we check for native implementation rather than a polyfill.
 * @private
 * @param {!Function} microtask
 */


const queueMicrotask = typeof Promise === 'function' && Promise.toString().indexOf('[native code]') > -1 ? createQueueMicrotaskViaPromises() : createQueueMicrotaskViaMutationObserver();

// @ts-nocheck
const DEFAULT_MIN_TASK_TIME = 0;
const isSafari_ = !!(typeof safari === 'object' && safari.pushNotification);
/**
 * A class wraps a queue of requestIdleCallback functions for two reasons:
 *   1. So other callers can know whether or not the queue is empty.
 *   2. So we can provide some guarantees that the queued functions will
 *      run in unload-type situations.
 */

class IdleQueue {
  /**
   * Creates the IdleQueue instance and adds lifecycle event listeners to
   * run the queue if the page is hidden (with fallback behavior for Safari).
   * @param {{
   *   ensureTasksRun: boolean,
   *   defaultMinTaskTime: number,
   * }=} param1
   */
  constructor({
    ensureTasksRun = false,
    defaultMinTaskTime = DEFAULT_MIN_TASK_TIME
  } = {}) {
    this.idleCallbackHandle_ = null;
    this.taskQueue_ = [];
    this.isProcessing_ = false;
    this.state_ = null;
    this.defaultMinTaskTime_ = defaultMinTaskTime;
    this.ensureTasksRun_ = ensureTasksRun; // Bind methods

    this.runTasksImmediately = this.runTasksImmediately.bind(this);
    this.runTasks_ = this.runTasks_.bind(this);
    this.onVisibilityChange_ = this.onVisibilityChange_.bind(this);

    if (this.ensureTasksRun_) {
      addEventListener('visibilitychange', this.onVisibilityChange_, true); // Safari does not reliably fire the `pagehide` or `visibilitychange`
      // events when closing a tab, so we have to use `beforeunload` with a
      // timeout to check whether the default action was prevented.
      // - https://bugs.webkit.org/show_bug.cgi?id=151610
      // - https://bugs.webkit.org/show_bug.cgi?id=151234
      // NOTE: we only add this to Safari because adding it to Firefox would
      // prevent the page from being eligible for bfcache.

      if (isSafari_) {
        addEventListener('beforeunload', this.runTasksImmediately, true);
      }
    }
  }
  /**
   * @param {...*} args
   */


  pushTask(...args) {
    this.addTask_(Array.prototype.push, ...args);
  }
  /**
   * @param {...*} args
   */


  unshiftTask(...args) {
    this.addTask_(Array.prototype.unshift, ...args);
  }
  /**
   * Runs all scheduled tasks synchronously.
   */


  runTasksImmediately() {
    // By not passing a deadline, all tasks will be run sync.
    this.runTasks_();
  }
  /**
   * @return {boolean}
   */


  hasPendingTasks() {
    return this.taskQueue_.length > 0;
  }
  /**
   * Clears all pending tasks for the queue and stops any scheduled tasks
   * from running.
   */


  clearPendingTasks() {
    this.taskQueue_ = [];
    this.cancelScheduledRun_();
  }
  /**
   * Returns the state object for the currently running task. If no task is
   * running, null is returned.
   * @return {?Object}
   */


  getState() {
    return this.state_;
  }
  /**
   * Destroys the instance by unregistering all added event listeners and
   * removing any overridden methods.
   */


  destroy() {
    this.taskQueue_ = [];
    this.cancelScheduledRun_();

    if (this.ensureTasksRun_) {
      removeEventListener('visibilitychange', this.onVisibilityChange_, true); // Safari does not reliably fire the `pagehide` or `visibilitychange`
      // events when closing a tab, so we have to use `beforeunload` with a
      // timeout to check whether the default action was prevented.
      // - https://bugs.webkit.org/show_bug.cgi?id=151610
      // - https://bugs.webkit.org/show_bug.cgi?id=151234
      // NOTE: we only add this to Safari because adding it to Firefox would
      // prevent the page from being eligible for bfcache.

      if (isSafari_) {
        removeEventListener('beforeunload', this.runTasksImmediately, true);
      }
    }
  }
  /**
   * @param {!Function} arrayMethod Either the Array.prototype{push|shift}.
   * @param {!Function} task
   * @param {{minTaskTime: number}=} param1
   * @private
   */


  addTask_(arrayMethod, task, {
    minTaskTime = this.defaultMinTaskTime_
  } = {}) {
    const state = {
      time: Date.now(),
      visibilityState: document.visibilityState
    };
    arrayMethod.call(this.taskQueue_, {
      state,
      task,
      minTaskTime
    });
    this.scheduleTasksToRun_();
  }
  /**
   * Schedules the task queue to be processed. If the document is in the
   * hidden state, they queue is scheduled as a microtask so it can be run
   * in cases where a macrotask couldn't (like if the page is unloading). If
   * the document is in the visible state, `requestIdleCallback` is used.
   * @private
   */


  scheduleTasksToRun_() {
    if (this.ensureTasksRun_ && document.visibilityState === 'hidden') {
      queueMicrotask(this.runTasks_);
    } else if (!this.idleCallbackHandle_) {
      this.idleCallbackHandle_ = rIC(this.runTasks_);
    }
  }
  /**
   * Runs as many tasks in the queue as it can before reaching the
   * deadline. If no deadline is passed, it will run all tasks.
   * If an `IdleDeadline` object is passed (as is with `requestIdleCallback`)
   * then the tasks are run until there's no time remaining, at which point
   * we yield to input or other script and wait until the next idle time.
   * @param {IdleDeadline=} deadline
   * @private
   */


  runTasks_(deadline = undefined) {
    this.cancelScheduledRun_();

    if (!this.isProcessing_) {
      this.isProcessing_ = true; // Process tasks until there's no time left or we need to yield to input.

      while (this.hasPendingTasks() && !shouldYield(deadline, this.taskQueue_[0].minTaskTime)) {
        const {
          task,
          state
        } = this.taskQueue_.shift();
        this.state_ = state;
        task(state);
        this.state_ = null;
      }

      this.isProcessing_ = false;

      if (this.hasPendingTasks()) {
        // Schedule the rest of the tasks for the next idle time.
        this.scheduleTasksToRun_();
      }
    }
  }
  /**
   * Cancels any scheduled idle callback and removes the handler (if set).
   * @private
   */


  cancelScheduledRun_() {
    cIC(this.idleCallbackHandle_);
    this.idleCallbackHandle_ = null;
  }
  /**
   * A callback for the `visibilitychange` event that runs all pending
   * callbacks immediately if the document's visibility state is hidden.
   * @private
   */


  onVisibilityChange_() {
    if (document.visibilityState === 'hidden') {
      this.runTasksImmediately();
    }
  }

}
/**
 * Returns true if the IdleDealine object exists and the remaining time is
 * less or equal to than the minTaskTime. Otherwise returns false.
 * @param {IdleDeadline|undefined} deadline
 * @param {number} minTaskTime
 * @return {boolean}
 * @private
 */

const shouldYield = (deadline, minTaskTime) => {
  if (deadline && deadline.timeRemaining() <= minTaskTime) {
    return true;
  }

  return false;
};

var _SpinGridPreviewCard;
const _createElement$2c = /*#__PURE__*/React__default['default'].createElement;
const placeholderStyle = {
  height: 120,
  width: 120,
  background: '#fff'
};

const Placeholder$1 = () => {
  return _SpinGridPreviewCard || (_SpinGridPreviewCard = /*#__PURE__*/_createElement$2c(weDesign.SpinGridPreviewCard, {
    style: placeholderStyle
  }));
};

const queue = new IdleQueue();

class OnIdle extends React__namespace.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      ready: process.env.NODE_ENV === 'test'
    };

    this.clearJob = () => {
      // Remove this task from the global queue
      queue.unshiftTask(this.queueRendering);
    };

    this.requestIdle = () => {
      // Clear the existing job if exists to avoid duplicates
      this.clearJob();

      if (this.props.skipSSR !== true) {
        // Queue up
        queue.pushTask(this.queueRendering);
      }
    };

    this.queueRendering = () => {
      // We request animation frame so that rendering doesn't happen during another ongoing process
      requestAnimationFrame(this.readyToRender);
    };

    this.readyToRender = () => {
      this.setState({
        ready: true
      });
    };
  }

  componentDidMount() {
    this.requestIdle();
  }

  componentWillUnmount() {
    // Cleanup
    this.clearJob();
  }

  render() {
    return this.state.ready ? this.props.children : this.props.placeholder || null;
  }

}

OnIdle.defaultProps = {
  placeholder: null
};

var _OnIdlePlaceholder$3;
const _createElement$2b = /*#__PURE__*/React__default['default'].createElement;
const SplitButton = /*#__PURE__*/React__default['default'].memo( /*#__PURE__*/React__default['default'].forwardRef((props, ref) => {
  const {
    icon,
    title,
    showTitle,
    disabled,
    overlay,
    size,
    onClickLeft,
    activeLeft,
    onActiveChange,
    active,
    disabledTip,
    shortcutText,
    tooltip,
    locale,
    testid,
    extraNode,
    getContainer,
    ...restProps
  } = props;
  const contextLocale = weUtil.useGetContextLocale();
  const t = weUtil.useTranslate(contextLocale);
  const {
    el,
    id,
    isHide,
    fineAdaptation,
    groupKey,
    isInOffScreenWrap,
    mode
  } = useVisibilitySensor(ref, testid);
  const onTextClick = React.useCallback(e => {
    onClickLeft && onClickLeft(e);
  }, [onClickLeft]);
  const styleProps = {
    size,
    active: activeLeft,
    locale: locale || contextLocale,
    showTitle
  };
  const OverlayEl = React.useMemo(() => {
    const dataTestId = testid ? `overlay-${testid}` : '';
    if (!overlay) return /*#__PURE__*/_createElement$2b("div", {
      "data-testid": dataTestId
    });
    return /*#__PURE__*/_createElement$2b(OnIdle, {
      placeholder: _OnIdlePlaceholder$3 || (_OnIdlePlaceholder$3 = /*#__PURE__*/_createElement$2b(Placeholder$1, null))
    }, /*#__PURE__*/React__default['default'].cloneElement(overlay, {
      'data-testid': dataTestId
    }));
  }, [overlay, testid]);
  let tooltipForButton = t(tooltip);

  if (shortcutText != null) {
    tooltipForButton += ` ${shortcutText}`;
  }

  const ToolbarIconMemo = React.useMemo(() => ({
    size: size || 'medium'
  }), [size]);
  const titleNode = React.useMemo(() => {
    return /*#__PURE__*/_createElement$2b("div", null, title && typeof title !== 'string' ? title : t(title));
  }, [t, title]);
  if (isHide) return null;
  return /*#__PURE__*/_createElement$2b(weDesign.Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement$2b(DisableWrap, {
    disabled: disabled,
    className: classnames('split-button-layout')
  }, /*#__PURE__*/_createElement$2b(ButtonWrap$5, _extends__default['default']({
    ref: el,
    "data-id": id,
    "data-mode": mode,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey
  }, styleProps, {
    active: active,
    activeLeft: activeLeft,
    "data-testid": isInOffScreenWrap ? '' : testid
  }), showTitle && size === TOOL_SIZE.LARGE && /*#__PURE__*/_createElement$2b(TitleWrap$3, _extends__default['default']({}, styleProps, {
    onClick: onTextClick
  }), /*#__PURE__*/_createElement$2b("div", null, titleNode)), /*#__PURE__*/_createElement$2b(weDesign.SplitButton, _extends__default['default']({
    bordered: false,
    defaultActive: activeLeft,
    active: active,
    overlay: OverlayEl,
    className: "split_btn_toolbar",
    onClickLeft: onTextClick,
    onActiveChange: onActiveChange,
    testid: isInOffScreenWrap ? '' : testid,
    getContainer: getContainer
  }, restProps), /*#__PURE__*/_createElement$2b(weIcon.ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement$2b(weDesign.Tooltip, {
    title: disabled ? disabledTip : tooltipForButton
  }, showTitle ? /*#__PURE__*/_createElement$2b(LeftWrapper$1, _extends__default['default']({}, styleProps, {
    className: classnames({
      activeLeft
    })
  }), icon, size !== TOOL_SIZE.LARGE && /*#__PURE__*/_createElement$2b("div", {
    className: "split_btn_left_toolbar"
  }, titleNode)) : /*#__PURE__*/_createElement$2b(LeftWrapper$1, _extends__default['default']({}, styleProps, {
    className: classnames({
      activeLeft
    })
  }), icon)))), extraNode)));
}));
SplitButton.defaultProps = {
  size: 'medium'
};

const BorderSetWrapper = /*#__PURE__*/styled__default['default'].div(["display:flex;flex-direction:column;justify-content:center;align-items:center;padding:14px 14px 9px 14px;align-items:baseline;user-select:none;"]);
const BorderTypeWrapper = weDesign.withTheme(styled__default['default'].div(["display:grid;grid-template-columns:repeat(3,1fr);grid-gap:2px;justify-items:center;align-items:center;border:1px solid ", ";border-radius:", ";"], p => p.theme.ui.commonLineLightColor, p => p.theme.ui.radius));
const LineTypeWrapper = /*#__PURE__*/styled__default['default'].div(["display:flex;flex-direction:column;justify-content:flex-start;height:100px;width:100px;margin-left:16px;margin-right:2px;"]);
const IconWrapper$1 = weDesign.withTheme(styled__default['default'].span(["box-sizing:border-box;border-radius:4px;width:28px;height:28px;background-color:", ";cursor:pointer;display:flex;align-items:center;justify-content:center;&:hover{background-color:", ";}"], p => p.active && p.theme.ui.buttonNormalActiveBgColor, p => p.theme.ui.buttonNormalHoverBgColor));
const ContentWrapper = /*#__PURE__*/styled__default['default'].div(["display:flex;flex-direction:row;align-items:center;padding-bottom:14px;"]);
const FooterWrapper$1 = weDesign.withTheme(styled__default['default'].div(["width:100%;padding-top:5px;border-top:1px solid ", ";"], p => p.theme.ui.commonLineLightColor));
const FooterInner = weDesign.withTheme(styled__default['default'].div(["display:flex;flex-direction:row;justify-content:start;align-items:center;width:100%;border-radius:8px;&:hover{background-color:", ";}&.active{background-color:", ";}"], p => p.theme.ui.buttonNormalHoverBgColor, ({
  theme: {
    ui
  }
}) => ui.buttonNormalActiveBgColor));
const TextSpan$1 = /*#__PURE__*/styled__default['default'].span(["font-size:12px;line-height:17px;margin-left:3px;color:", ";cursor:pointer;"], weDesign.theme.colorText5);
const FillColorWrapper = /*#__PURE__*/styled__default['default'].div(["display:flex;flex-direction:row;justify-content:flex-start;align-items:center;margin-top:2px;"]);
const LineSelectWrapper = /*#__PURE__*/styled__default['default'].div(["display:flex;flex-direction:row;justify-content:flex-start;align-items:center;margin:12px 0;"]);
const LabelWrapper = /*#__PURE__*/styled__default['default'].div(["font-size:12px;line-height:17px;color:", ";width:37px;"], weDesign.theme.colorText5);

const _createElement$2a = /*#__PURE__*/React__default['default'].createElement;
let BorderType;

(function (BorderType) {
  BorderType["top"] = "top";
  BorderType["bottom"] = "bottom";
  BorderType["left"] = "left";
  BorderType["right"] = "right";
  BorderType["none"] = "none";
  BorderType["outer"] = "outer";
  BorderType["inner"] = "inner";
  BorderType["horizon"] = "horizon";
  BorderType["vertical"] = "vertical";
  BorderType["all"] = "all";
  BorderType["unselected"] = "unselected";
})(BorderType || (BorderType = {}));

const UNSELECTED = 'unselected';
class BorderTypePanel extends React__default['default'].PureComponent {
  constructor(props) {
    super(props);

    this.handleBorderTypeChange = borderType => {
      this.setState({
        currentBorderType: borderType
      });
      const {
        onBorderTypeChange
      } = this.props;

      if (onBorderTypeChange) {
        onBorderTypeChange(borderType);
      }
    };

    const currentBorderType = props.borderType ? props.borderType : UNSELECTED;
    this.state = {
      currentBorderType
    };
  }

  render() {
    const {
      borderType,
      borderIconSize = 20,
      borderSelectedColor = '#000000',
      style
    } = this.props;
    const {
      currentBorderType
    } = this.state;
    const activeBorderType = borderType || currentBorderType;
    const defaultWrapperStyle = {
      width: '100px',
      height: '100px'
    };
    const wrapperStyle = { ...defaultWrapperStyle,
      ...(style || {})
    };
    const iconStyle = {
      width: borderIconSize,
      height: borderIconSize,
      fontSize: borderIconSize,
      boxSizing: 'border-box',
      padding: '1px 1px'
    };
    const ICON_DEFAULT_COLOR = 'rgba(58, 60, 63, 1)';
    const pathColors = [borderSelectedColor || ICON_DEFAULT_COLOR, // 当选中颜色为白色时，选中边框的外边缘为黑色，否则选中边框外边缘与内部颜色一致
    !borderSelectedColor || isWhite(borderSelectedColor) ? ICON_DEFAULT_COLOR : borderSelectedColor];
    const borderList = {
      [BorderType.outer]: /*#__PURE__*/_createElement$2a(weDesign.ToolbarBorderOuterNormal, {
        pathColors: pathColors,
        style: iconStyle
      }),
      [BorderType.inner]: /*#__PURE__*/_createElement$2a(weDesign.ToolbarBorderInnerNormal, {
        pathColors: pathColors,
        style: iconStyle
      }),
      [BorderType.all]: /*#__PURE__*/_createElement$2a(weDesign.ToolbarBorderAllNormal, {
        pathColors: pathColors,
        style: iconStyle
      }),
      [BorderType.left]: /*#__PURE__*/_createElement$2a(weDesign.ToolbarBorderLeftNormal, {
        pathColors: pathColors,
        style: iconStyle
      }),
      [BorderType.vertical]: /*#__PURE__*/_createElement$2a(weDesign.ToolbarBorderVerticalNormal, {
        pathColors: pathColors,
        style: iconStyle
      }),
      [BorderType.right]: /*#__PURE__*/_createElement$2a(weDesign.ToolbarBorderRightNormal, {
        pathColors: pathColors,
        style: iconStyle
      }),
      [BorderType.top]: /*#__PURE__*/_createElement$2a(weDesign.ToolbarBorderTopNormal, {
        pathColors: pathColors,
        style: iconStyle
      }),
      [BorderType.horizon]: /*#__PURE__*/_createElement$2a(weDesign.ToolbarBorderHorizonNormal, {
        pathColors: pathColors,
        style: iconStyle
      }),
      [BorderType.bottom]: /*#__PURE__*/_createElement$2a(weDesign.ToolbarBorderBottomNormal, {
        pathColors: pathColors,
        style: iconStyle
      })
    };
    return /*#__PURE__*/_createElement$2a(BorderTypeWrapper, {
      style: wrapperStyle
    }, Object.keys(borderList).map(key => {
      const iconComp = borderList[key];
      const tipTitle = `we_toolbar_border_${BorderType[key]}`;
      return /*#__PURE__*/_createElement$2a(weUtil.TranslateProvider, {
        key: key
      }, t => /*#__PURE__*/_createElement$2a(weDesign.Tooltip, {
        title: t(tipTitle)
      }, /*#__PURE__*/_createElement$2a(IconWrapper$1, {
        active: activeBorderType === key,
        onClick: () => this.handleBorderTypeChange(key)
      }, iconComp)));
    }));
  }

}
BorderTypePanel.defaultProps = {
  borderIconSize: 20
};

/**
 * 颜色版的色值
 */
const colorDataNormal = [['#C10002', '#FE0300', '#FCC102', '#FEFF00', '#92D04F', '#00B14D', '#04B0F1', '#0071C1', '#00205C', '#6E30A4'], ['#FFFFFF', '#000000', '#E8E6E7', '#44536B', '#4472C6', '#ED7D33', '#A5A5A5', '#FFC000', '#579AD5', '#70AD48'], ['#F3F3F3', '#7F7F7F', '#CFCECF', '#D7DCE5', '#DAE2F6', '#F9E5D7', '#ECECEC', '#FFF3CE', '#DFEBF6', '#E4EDDB'], ['#D8D8D8', '#595959', '#B0ABAC', '#AEB9CC', '#B2C7E6', '#F6CCAC', '#DBDBDB', '#FEE598', '#BDD8EE', '#C5DFB4'], ['#BFBFBF', '#3F3F3F', '#76716F', '#8495B1', '#90A9DC', '#F7B07F', '#CACACA', '#FFD966', '#9EC3E7', '#A9D08D'], ['#A4A5A5', '#262626', '#3A3839', '#333E4E', '#305299', '#C65A14', '#7B7B7B', '#BF900A', '#3076B6', '#558036'], ['#7e7F7F', '#0C0C0C', '#191718', '#222A35', '#1F3762', '#88370A', '#525252', '#7F6100', '#224E7C', '#375621']];
const colorDataArtWithGradient = [['#222328', '#9B9A97', '#64473A', '#D9730D', '#DFAB01', '#0F7B6C', '#408BFB', '#6940A5', '#AD1A72', '#E03E3E'], ['#FFFFFF', '#28B4BE__#3935DD', '#2449FE__#CA4BA7', '#FF7100__#F300AD', '#B16A4D__#D5A638', '#1890FF__#4FF3E0', '#F3AA00__#E43E29', '#EB47FF__#F95101', '#10CCF7__#AB44FB', '#F55B2D__#510101'], ['#FFFFFF', '#F5F6F7', '#F5F1F0', '#FEF6E9', '#FFFAE5', '#ECF9F0', '#E8F2FE', '#F0EBF7', '#FCEFF3', '#FEF3F3'], ['#858689', '#E6E7E7', '#D7CCC8', '#F9DDB2', '#FFF8B9', '#D8ECE7', '#B7DCFB', '#D5C8EE', '#F4B9CD', '#F2BABA'], ['#646568', '#CBCCCD', '#C0A9A1', '#FFA726', '#FFEE58', '#B0D4CC', '#72B7EF', '#9C79D9', '#EB6793', '#EE7268'], ['#434448', '#B6B8B9', '#9F786B', '#FB8C00', '#FDD835', '#5DBEAC', '#0089FF', '#6C3BCF', '#D81B60', '#E53935'], ['#222328', '#979A9B', '#704F43', '#D16A15', '#DFB600', '#16816D', '#1564DC', '#44279B', '#A41D57', '#BB2626']];
const colorDataArt = colorDataArtWithGradient.filter((_, index) => index !== 1);

const RECENT_COLOR_KEY = 'alidocs:we-ui:recent-colors';
const GRADIENT_FLAG = '__';
const colorUtil = {
  getRecentColorsFromLocalStorage() {
    try {
      const colorsString = window.localStorage.getItem(RECENT_COLOR_KEY) || '[]';
      return JSON.parse(colorsString);
    } catch (e) {
      return [];
    }
  },

  saveRecentColorsToLocalStorage(colors) {
    try {
      const colorsString = JSON.stringify(colors);
      window.localStorage.setItem(RECENT_COLOR_KEY, colorsString);
    } catch (e) {// do nothing
    }
  },

  isGradientColor(color) {
    // 判断是否为渐变色，渐变色格式为 ‘#color1__#color2’
    return color && color.includes(GRADIENT_FLAG);
  },

  // 将 #color1_#color2 转换为 [color1, color2]
  transferGradientColor(color) {
    if (!this.isGradientColor(color)) {
      return [];
    }

    return color.split(GRADIENT_FLAG);
  }

};

const Divider$1 = /*#__PURE__*/styled.css(["content:'';display:block;position:absolute;background-color:rgba(17,31,44,0.08);height:1px;width:100%;"]);
const groupCommon = /*#__PURE__*/styled.css(["margin:0 ", ";margin-bottom:10px;padding-bottom:10px;position:relative;&:after{", " bottom:0;}"], ({
  theme
}) => theme.ui.marginMedium, Divider$1);
const ColorBoxItem = /*#__PURE__*/styled__default['default'].span(["position:relative;box-sizing:border-box;width:20px;height:20px;display:inline-block;border-radius:3px 3px;border:1px solid transparent;flex:0 0 auto;cursor:pointer;background-color:#fff;&:hover{padding:2px 2px;border:1px solid #d9d9d9;box-shadow:0 1px 2px rgba(0,0,0,0.12);}"]);
const ColorBlock = weDesign.withTheme(styled__default['default'].span(["position:relative;box-sizing:border-box;width:100%;height:100%;display:block;border:1px solid transparent;svg{position:absolute;top:-1px;left:1px;width:12px;height:12px;}&.isHover{svg{top:-3px;left:-1px;}}.colorBlockText{position:absolute;left:0;right:0;bottom:0;top:0;display:flex;justify-content:center;align-items:center;font-size:12px;}"]));
const ClearItem = /*#__PURE__*/styled__default['default'](ColorBoxItem)(["&:after{content:'';display:block;position:absolute;top:8px;left:-2px;width:22px;height:0;border-bottom:2px solid #ff5151;transform:rotate(45deg);}&.isHover{&:after{top:8px;left:1px;width:16px;}}"]);
const MainColorGroup = weDesign.withTheme(styled__default['default'].div(["", ";"], groupCommon));
const LineGroupNormal = weDesign.withTheme(styled__default['default'].div(["position:relative;display:flex;width:100%;height:auto;"]));
const LineGroupArt = weDesign.withTheme(styled__default['default'].div(["display:grid;grid-template-columns:repeat(10,20px);grid-template-rows:20px;gap:2px;margin-bottom:2px;"]));
const PaletteWrapper = /*#__PURE__*/styled__default['default'].div(["box-sizing:border-box;margin:12px 12px;border-radius:4px;user-select:none;"]);
const CustomGroup = weDesign.withTheme(styled__default['default'].div(["height:auto;cursor:pointer;.sketch-picker{*,*::before,*::after{box-sizing:content-box;}input{border-radius:6px;&:focus{outline:none;}}}"]));
const CustomGroupInnerWrap = weDesign.withTheme(styled__default['default'].div(["display:flex;flex-direction:row;justify-content:space-between;align-items:center;position:relative;border-radius:4px;margin-top:", ";padding:0 ", ";height:36px;&:hover,&.actived{background-color:", ";}"], ({
  theme
}) => theme.ui.marginTiny, ({
  theme
}) => theme.ui.paddingMedium, ({
  theme
}) => theme.ui.commonBgHoverColor));
const CustomPicker = /*#__PURE__*/styled__default['default'].div(["position:absolute;top:-233px;right:", ";"], p => p.rightSide ? '-236px' : '256px');
const CustomText = /*#__PURE__*/styled__default['default'].div(["height:20px;line-height:20px;font-size:12px;padding-left:4px;flex:0 0 auto;display:inline-block;"]);
const DefaultGroup = weDesign.withTheme(styled__default['default'].div(["display:flex;position:relative;height:auto;cursor:pointer;"]));
const SplitButtonWrapper = /*#__PURE__*/styled__default['default'].div(["line-height:0;position:relative;"]);
const FillColorArea = /*#__PURE__*/styled__default['default'].div(["height:2px;background-color:", ";"], p => p.color);
const LatestColorWrap = weDesign.withTheme(styled__default['default'].div(["", ";display:flex;flex-direction:column;"], groupCommon));
const LatestColorText = weDesign.withTheme(styled__default['default'].div(["padding-bottom:8px;font-size:12px;"]));
const ColorPaletteWrapper = /*#__PURE__*/styled__default['default'].div(["padding:4px 0;"]);
const FullFillColorArea = weDesign.withTheme(styled__default['default'].div(["width:", "px;height:", "px;margin:", ";background-color:", ";border-radius:2px;border:", ";"], ({
  theme: {
    ui
  }
}) => ui.fillColorAreaWidth, ({
  theme: {
    ui
  }
}) => ui.fillColorAreaHeight, ({
  theme: {
    ui
  }
}) => ui.fillColorAreaMargin, p => p.color, ({
  isWhite,
  theme: {
    ui
  }
}) => isWhite ? `1px solid ${ui.colorLine1}` : 'none'));
const FillColorPickerButton = weDesign.withTheme(styled__default['default'](SplitButton)(["border:1px solid ", ";border-radius:", ";.splitbutton-right .arrow-icon{font-size:12px;}"], ({
  theme: {
    ui
  }
}) => ui.commonLineLightColor, ({
  theme: {
    ui
  }
}) => ui.radius));
const Header = weDesign.withTheme(styled__default['default'].div(["", ";display:flex;justify-content:space-between;"], groupCommon));
const ColorBoxWrapper = /*#__PURE__*/styled__default['default'].div(["display:flex;justify-content:center;align-items:center;position:relative;box-sizing:border-box;border-radius:4px;cursor:pointer;", ";", ";&:hover{border:2px solid #0089ff;}"], ({
  color,
  isClear
}) => {
  if (color === '#FFFFFF' || isClear) {
    return styled.css(["border:2px solid rgba(126,134,142,0.16);"]);
  }
}, ({
  color
}) => {
  if (colorUtil.isGradientColor(color)) {
    const [startColor, endColor] = colorUtil.transferGradientColor(color);
    return styled.css(["background-image:linear-gradient(90deg,", ",", ");"], startColor, endColor);
  } else {
    return styled.css(["background:", ";"], color);
  }
});

const _createElement$29 = /*#__PURE__*/React__default['default'].createElement;

const ColorSelectedIcon = ({
  color
}) => {
  return /*#__PURE__*/_createElement$29("svg", {
    width: "14",
    height: "10",
    viewBox: "0 0 16 12",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_createElement$29("path", {
    d: "M13.965 2.15533L5.63499 10.485L1.46999 6.32034",
    stroke: color,
    strokeOpacity: "0.6",
    strokeWidth: "2.38",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }));
};

var _svg$3;
const _createElement$28 = /*#__PURE__*/React__default['default'].createElement;

const ClearColorIcon = () => {
  return _svg$3 || (_svg$3 = /*#__PURE__*/_createElement$28("svg", {
    width: "22",
    height: "22",
    viewBox: "0 0 22 22",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_createElement$28("rect", {
    x: "1.41431",
    width: "28.9146",
    height: "2",
    transform: "rotate(45 1.41431 0)",
    fill: "#E41100"
  })));
};

var _ClearColorIcon;
const _createElement$27 = /*#__PURE__*/React__default['default'].createElement;

const ColorBoxArt = props => {
  const {
    handleClick,
    isClear,
    color,
    active,
    getContrastingColor
  } = props;
  return /*#__PURE__*/_createElement$27(ColorBoxWrapper, {
    color: color,
    onClick: handleClick,
    isClear: isClear
  }, isClear ? _ClearColorIcon || (_ClearColorIcon = /*#__PURE__*/_createElement$27(ClearColorIcon, null)) : active && /*#__PURE__*/_createElement$27(ColorSelectedIcon, {
    color: getContrastingColor(color)
  }));
};

var _path$1;
const _createElement$26 = /*#__PURE__*/React__default['default'].createElement;
// 勾选的填充色缓存
const fillColorCache = {}; // for:性能优化

/**
 * 将颜色值转换成颜色对象
 */
const toColorObj = (colorStr, oldHue) => {
  const tinyColor = tinycolor__default['default'](colorStr);
  const hsl = tinyColor.toHsl();
  const hsv = tinyColor.toHsv();
  const rgb = tinyColor.toRgb();
  const hex = tinyColor.toHex();

  if (hsl.s === 0) {
    hsl.h = oldHue || 0;
    hsv.h = oldHue || 0;
  }

  const transparent = hex === '000000' && rgb.a === 0;
  return {
    hsl,
    hex: transparent ? 'transparent' : `#${hex}`,
    rgb,
    hsv,
    source: colorStr
  };
};
/**
 * 获取对比色，即：色块选中时打勾的颜色，要和色块本身的背景色形成反差
 * @param color 字符串表示的颜色值
 */


const getContrastingColor = color => {
  if (!color) {
    return '#FFFFFF';
  }

  let result = fillColorCache[color];

  if (result) {
    return result;
  }

  const colorObj = toColorObj(color);

  if (colorObj.hex === 'transparent') {
    result = 'rgba(0,0,0,0.4)';
  } else {
    const yiq = (colorObj.rgb.r * 299 + colorObj.rgb.g * 587 + colorObj.rgb.b * 114) / 1000;
    result = yiq >= 210 ? '#8C8C8C' : '#FFFFFF';
  }

  fillColorCache[color] = result;
  return result;
}; // 渲染每个色块


const ColorBlockItem = weDesign.withTheme( /*#__PURE__*/React__default['default'].memo(props => {
  const {
    colorBlockText,
    theme,
    colorValue,
    clearColor,
    index,
    active,
    onColorPick,
    setColorBlockTextColor,
    mode
  } = props;
  const [isHover, setHover] = React__default['default'].useState(false);
  const key = `${index}-${colorValue}`; // 是否为清空色块，加上红色斜杠

  const isClear = typeof clearColor === 'string' && clearColor.toLocaleLowerCase() === colorValue.toLocaleLowerCase(); // 颜色值为FAFAFA或FFFFFF时， 需要设置边框
  // const border = ['#FAFAFA', '#FFFFFF'].includes(colorValue); // Todo：通过计算来设置

  const border = isClear || isWhite(colorValue) || isTransparent(colorValue);
  const style = React.useMemo(() => ({
    backgroundColor: colorValue || '#fff',
    borderColor: border ? theme.ui.borderColor : 'transparent'
  }), [colorValue, border, theme]);
  const customColor = setColorBlockTextColor ? setColorBlockTextColor(colorValue) : getContrastingColor(colorValue); // 选中的样式

  const checkStyle = React.useMemo(() => ({
    fill: active ? customColor : '#fff',
    display: active ? 'block' : 'none'
  }), [colorValue, active]);

  if (mode === 'art') {
    return /*#__PURE__*/_createElement$26(ColorBoxArt, {
      handleClick: () => onColorPick(colorValue),
      color: colorValue,
      active: active,
      isClear: isClear,
      getContrastingColor: getContrastingColor
    });
  }

  if (isClear) {
    return /*#__PURE__*/_createElement$26(ClearItem, {
      key: key,
      onClick: () => onColorPick(colorValue),
      onMouseEnter: () => setHover(true),
      onMouseLeave: () => setHover(false),
      className: classnames({
        isHover
      })
    }, /*#__PURE__*/_createElement$26(ColorBlock, {
      style: style,
      className: classnames({
        isHover
      }),
      color: colorValue
    }));
  }

  return /*#__PURE__*/_createElement$26(ColorBoxItem, {
    key: key,
    onClick: () => onColorPick(colorValue),
    onMouseEnter: () => setHover(true),
    onMouseLeave: () => setHover(false)
  }, /*#__PURE__*/_createElement$26(ColorBlock, {
    color: colorValue,
    style: style,
    className: classnames({
      isHover
    })
  }, /*#__PURE__*/_createElement$26("svg", {
    style: checkStyle,
    viewBox: "0 0 18 18"
  }, _path$1 || (_path$1 = /*#__PURE__*/_createElement$26("path", {
    d: "M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"
  }))), colorBlockText && !active && isHover && /*#__PURE__*/_createElement$26("span", {
    className: "colorBlockText",
    style: {
      color: customColor
    }
  }, colorBlockText)));
}));

const simpleCheckForValidColor = data => {
  const keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];
  let checked = 0;
  let passed = 0;
  keysToCheck.forEach(letter => {
    if (data[letter]) {
      checked += 1;

      if (!isNaN(data[letter])) {
        passed += 1;
      }

      if (letter === 's' || letter === 'l') {
        const percentPatt = /^\d+%$/;

        if (percentPatt.test(data[letter])) {
          passed += 1;
        }
      }
    }
  });
  return checked === passed ? data : false;
};
const toState = (data, oldHue) => {
  const color = data.hex ? tinycolor__default['default'](data.hex) : tinycolor__default['default'](data);
  const hsl = color.toHsl();
  const hsv = color.toHsv();
  const rgb = color.toRgb();
  const hex = color.toHex();

  if (hsl.s === 0) {
    hsl.h = oldHue || 0;
    hsv.h = oldHue || 0;
  }

  const transparent = hex === '000000' && rgb.a === 0;
  return {
    hsl,
    hex: transparent ? 'transparent' : `#${hex}`,
    rgb,
    hsv,
    oldHue: data.h || oldHue || hsl.h,
    source: data.source
  };
};
const isValidHex = hex => {
  // disable hex4 and hex8
  const lh = String(hex).charAt(0) === '#' ? 1 : 0;
  return hex.length !== 4 + lh && hex.length < 7 + lh && tinycolor__default['default'](hex).isValid();
};
 // export default exports;

const _createElement$25 = /*#__PURE__*/React__default['default'].createElement;
const ColorWrap = Picker => {
  class ColorPicker extends (React.PureComponent || React.Component) {
    constructor(props) {
      super();

      this.handleChange = (data, event) => {
        const isValidColor = simpleCheckForValidColor(data);

        if (isValidColor) {
          const colors = toState(data, data.h || this.state.oldHue);
          this.setState(colors);
          this.props.onChange && this.props.onChange(colors, event); // 不是来自输入框
          // 如果来自输入框，需要是 blur 触发

          if (event._input && event._blur || !event._input) {
            this.props.onChangeComplete && this.debounce(this.props.onChangeComplete, colors, event);
          }
        }
      };

      this.handleSwatchHover = (data, event) => {
        const isValidColor = simpleCheckForValidColor(data);

        if (isValidColor) {
          const colors = toState(data, data.h || this.state.oldHue);
          this.props.onSwatchHover && this.props.onSwatchHover(colors, event);
        }
      };

      this.state = { ...toState(props.color, 0)
      };
      this.debounce = debounce((fn, data, event) => {
        fn(data, event);
      }, 100);
    }

    static getDerivedStateFromProps(nextProps, state) {
      return { ...toState(nextProps.color, state.oldHue)
      };
    }

    render() {
      const optionalEvents = {};

      if (this.props.onSwatchHover) {
        optionalEvents.onSwatchHover = this.handleSwatchHover;
      }

      return /*#__PURE__*/_createElement$25(Picker, _extends__default['default']({}, this.props, this.state, {
        onChange: this.handleChange
      }, optionalEvents));
    }

  }

  ColorPicker.propTypes = { ...Picker.propTypes
  };
  ColorPicker.defaultProps = { ...Picker.defaultProps,
    color: {
      h: 250,
      s: 0.5,
      l: 0.2,
      a: 1
    }
  };
  return ColorPicker;
};

const calculateChange$2 = (e, hsl, container) => {
  const {
    width: containerWidth,
    height: containerHeight
  } = container.getBoundingClientRect();
  const x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
  const y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
  let left = x - (container.getBoundingClientRect().left + window.pageXOffset);
  let top = y - (container.getBoundingClientRect().top + window.pageYOffset);

  if (left < 0) {
    left = 0;
  } else if (left > containerWidth) {
    left = containerWidth;
  }

  if (top < 0) {
    top = 0;
  } else if (top > containerHeight) {
    top = containerHeight;
  }

  const saturation = left / containerWidth;
  const bright = 1 - top / containerHeight;
  return {
    h: hsl.h,
    s: saturation,
    v: bright,
    a: hsl.a,
    source: 'hsv'
  };
};

var _style$1;
const _createElement$24 = /*#__PURE__*/React__default['default'].createElement;
class Saturation extends (React.PureComponent || React.Component) {
  constructor(props) {
    super(props); // todo
    // this.throttle = throttle((fn, data, e) => {
    //   fn(data, e);
    // }, 50);

    this.handleChange = e => {
      typeof this.props.onChange === 'function' && this.throttle(this.props.onChange, calculateChange$2(e, this.props.hsl, this.container), e);
    };

    this.handleMouseDown = e => {
      this.handleChange(e);
      window.addEventListener('mousemove', this.handleChange);
      window.addEventListener('mouseup', this.handleMouseUp);
    };

    this.handleMouseUp = () => {
      this.unbindEventListeners();
    };

    this.throttle = debounce((fn, data, e) => {
      fn(data, e);
    }, 5);
  }

  componentWillUnmount() {
    // this.throttle.cancel();
    this.unbindEventListeners();
  }

  unbindEventListeners() {
    window.removeEventListener('mousemove', this.handleChange);
    window.removeEventListener('mouseup', this.handleMouseUp);
  }

  render() {
    const {
      color,
      white,
      black,
      pointer,
      circle
    } = this.props.style || {};
    const styles = reactCSS__default['default']({
      default: {
        color: {
          absolute: '0px 0px 0px 0px',
          background: `hsl(${this.props.hsl.h},100%, 50%)`,
          borderRadius: this.props.radius
        },
        white: {
          absolute: '0px 0px 0px 0px',
          borderRadius: this.props.radius
        },
        black: {
          absolute: '0px 0px 0px 0px',
          boxShadow: this.props.shadow,
          borderRadius: this.props.radius
        },
        pointer: {
          position: 'absolute',
          top: `${-(this.props.hsv.v * 100) + 100}%`,
          left: `${this.props.hsv.s * 100}%`,
          cursor: 'default'
        },
        circle: {
          width: '4px',
          height: '4px',
          boxShadow: `0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),
            0 0 1px 2px rgba(0,0,0,.4)`,
          borderRadius: '50%',
          cursor: 'hand',
          transform: 'translate(-2px, -2px)'
        }
      },
      custom: {
        color,
        white,
        black,
        pointer,
        circle
      }
    }, {
      custom: !!this.props.style
    });
    return /*#__PURE__*/_createElement$24("div", {
      style: styles.color,
      ref: container => {
        this.container = container;
      },
      onMouseDown: this.handleMouseDown,
      onTouchMove: this.handleChange,
      onTouchStart: this.handleChange
    }, _style$1 || (_style$1 = /*#__PURE__*/_createElement$24("style", null, `
          .saturation-white {
            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));
            background: linear-gradient(to right, #fff, rgba(255,255,255,0));
          }
          .saturation-black {
            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));
            background: linear-gradient(to top, #000, rgba(0,0,0,0));
          }
        `)), /*#__PURE__*/_createElement$24("div", {
      style: styles.white,
      className: "saturation-white"
    }, /*#__PURE__*/_createElement$24("div", {
      style: styles.black,
      className: "saturation-black"
    }), /*#__PURE__*/_createElement$24("div", {
      style: styles.pointer
    }, this.props.pointer ? /*#__PURE__*/_createElement$24(this.props.pointer, this.props) : /*#__PURE__*/_createElement$24("div", {
      style: styles.circle
    }))));
  }

}

const calculateChange$1 = (e, direction, hsl, container) => {
  const containerWidth = container.clientWidth;
  const containerHeight = container.clientHeight;
  const x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
  const y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
  const left = x - (container.getBoundingClientRect().left + window.pageXOffset);
  const top = y - (container.getBoundingClientRect().top + window.pageYOffset);

  if (direction === 'vertical') {
    let h;

    if (top < 0) {
      h = 359;
    } else if (top > containerHeight) {
      h = 0;
    } else {
      const percent = -(top * 100 / containerHeight) + 100;
      h = 360 * percent / 100;
    }

    if (hsl.h !== h) {
      return {
        h,
        s: hsl.s,
        l: hsl.l,
        a: hsl.a,
        source: 'hsl'
      };
    }
  } else {
    let h;

    if (left < 0) {
      h = 0;
    } else if (left > containerWidth) {
      h = 359;
    } else {
      const percent = left * 100 / containerWidth;
      h = 360 * percent / 100;
    }

    if (hsl.h !== h) {
      return {
        h,
        s: hsl.s,
        l: hsl.l,
        a: hsl.a,
        source: 'hsl'
      };
    }
  }

  return null;
};

var _style;
const _createElement$23 = /*#__PURE__*/React__default['default'].createElement;
class Hue extends (React.PureComponent || React.Component) {
  constructor(...args) {
    super(...args);

    this.handleChange = e => {
      const change = calculateChange$1(e, this.props.direction, this.props.hsl, this.container);
      change && typeof this.props.onChange === 'function' && this.props.onChange(change, e);
    };

    this.handleMouseDown = e => {
      this.handleChange(e);
      window.addEventListener('mousemove', this.handleChange);
      window.addEventListener('mouseup', this.handleMouseUp);
    };

    this.handleMouseUp = () => {
      this.unbindEventListeners();
    };
  }

  componentWillUnmount() {
    this.unbindEventListeners();
  }

  unbindEventListeners() {
    window.removeEventListener('mousemove', this.handleChange);
    window.removeEventListener('mouseup', this.handleMouseUp);
  }

  render() {
    const {
      direction = 'horizontal'
    } = this.props;
    const styles = reactCSS__default['default']({
      default: {
        hue: {
          absolute: '0px 0px 0px 0px',
          borderRadius: this.props.radius,
          boxShadow: this.props.shadow
        },
        container: {
          padding: '0 2px',
          position: 'relative',
          height: '100%',
          borderRadius: this.props.radius
        },
        pointer: {
          position: 'absolute',
          left: `${this.props.hsl.h * 100 / 360}%`
        },
        slider: {
          marginTop: '1px',
          width: '4px',
          borderRadius: '1px',
          height: '8px',
          boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
          background: '#fff',
          transform: 'translateX(-2px)'
        }
      },
      vertical: {
        pointer: {
          left: '0px',
          top: `${-(this.props.hsl.h * 100 / 360) + 100}%`
        }
      }
    }, {
      vertical: direction === 'vertical'
    });
    return /*#__PURE__*/_createElement$23("div", {
      style: styles.hue
    }, /*#__PURE__*/_createElement$23("div", {
      className: `hue-${direction}`,
      style: styles.container,
      ref: container => {
        this.container = container;
      },
      onMouseDown: this.handleMouseDown,
      onTouchMove: this.handleChange,
      onTouchStart: this.handleChange
    }, _style || (_style = /*#__PURE__*/_createElement$23("style", null, `
            .hue-horizontal {
              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0
                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);
              background: -webkit-linear-gradient(to right, #f00 0%, #ff0
                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);
            }

            .hue-vertical {
              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,
                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);
              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,
                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);
            }
          `)), /*#__PURE__*/_createElement$23("div", {
      style: styles.pointer
    }, this.props.pointer ? /*#__PURE__*/_createElement$23(this.props.pointer, this.props) : /*#__PURE__*/_createElement$23("div", {
      style: styles.slider
    }))));
  }

}

const calculateChange = (e, hsl, direction, initialA, container) => {
  const containerWidth = container.clientWidth;
  const containerHeight = container.clientHeight;
  const x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
  const y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
  const left = x - (container.getBoundingClientRect().left + window.pageXOffset);
  const top = y - (container.getBoundingClientRect().top + window.pageYOffset);

  if (direction === 'vertical') {
    let a;

    if (top < 0) {
      a = 0;
    } else if (top > containerHeight) {
      a = 1;
    } else {
      a = Math.round(top * 100 / containerHeight) / 100;
    }

    if (hsl.a !== a) {
      return {
        h: hsl.h,
        s: hsl.s,
        l: hsl.l,
        a,
        source: 'rgb'
      };
    }
  } else {
    let a;

    if (left < 0) {
      a = 0;
    } else if (left > containerWidth) {
      a = 1;
    } else {
      a = Math.round(left * 100 / containerWidth) / 100;
    }

    if (initialA !== a) {
      return {
        h: hsl.h,
        s: hsl.s,
        l: hsl.l,
        a,
        source: 'rgb'
      };
    }
  }

  return null;
};

const checkboardCache = {};
const render = (c1, c2, size, serverCanvas) => {
  if (typeof document === 'undefined' && !serverCanvas) {
    return null;
  } // eslint-disable-next-line new-cap


  const canvas = serverCanvas ? new serverCanvas() : document.createElement('canvas');
  canvas.width = size * 2;
  canvas.height = size * 2;
  const ctx = canvas.getContext('2d');

  if (!ctx) {
    return null;
  } // If no context can be found, return early.


  ctx.fillStyle = c1;
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = c2;
  ctx.fillRect(0, 0, size, size);
  ctx.translate(size, size);
  ctx.fillRect(0, 0, size, size);
  return canvas.toDataURL();
};
const get = (c1, c2, size, serverCanvas) => {
  const key = `${c1}-${c2}-${size}${serverCanvas ? '-server' : ''}`;

  if (checkboardCache[key]) {
    return checkboardCache[key];
  }

  const checkboard = render(c1, c2, size, serverCanvas);
  checkboardCache[key] = checkboard;
  return checkboard;
};

const _createElement$22 = /*#__PURE__*/React__default['default'].createElement;
const Checkboard = ({
  white,
  grey,
  size,
  renderers,
  borderRadius,
  boxShadow,
  children
}) => {
  const styles = reactCSS__default['default']({
    default: {
      grid: {
        borderRadius,
        boxShadow,
        absolute: '0px 0px 0px 0px',
        background: `url(${get(white, grey, size, renderers.canvas)}) center left`
      }
    }
  });
  return /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React__default['default'].cloneElement(children, { ...children.props,
    style: { ...children.props.style,
      ...styles.grid
    }
  }) : /*#__PURE__*/_createElement$22("div", {
    style: styles.grid
  });
};
Checkboard.defaultProps = {
  size: 8,
  white: 'transparent',
  grey: 'rgba(0,0,0,.08)',
  renderers: {}
};

const _createElement$21 = /*#__PURE__*/React__default['default'].createElement;
class Alpha extends (React.PureComponent || React.Component) {
  constructor(...args) {
    super(...args);

    this.handleChange = e => {
      const change = calculateChange(e, this.props.hsl, this.props.direction, this.props.a, this.container);
      change && typeof this.props.onChange === 'function' && this.props.onChange(change, e);
    };

    this.handleMouseDown = e => {
      this.handleChange(e);
      window.addEventListener('mousemove', this.handleChange);
      window.addEventListener('mouseup', this.handleMouseUp);
    };

    this.handleMouseUp = () => {
      this.unbindEventListeners();
    };

    this.unbindEventListeners = () => {
      window.removeEventListener('mousemove', this.handleChange);
      window.removeEventListener('mouseup', this.handleMouseUp);
    };
  }

  componentWillUnmount() {
    this.unbindEventListeners();
  }

  render() {
    const {
      rgb
    } = this.props;
    const styles = reactCSS__default['default']({
      default: {
        alpha: {
          absolute: '0px 0px 0px 0px',
          borderRadius: this.props.radius
        },
        checkboard: {
          absolute: '0px 0px 0px 0px',
          overflow: 'hidden',
          borderRadius: this.props.radius
        },
        gradient: {
          absolute: '0px 0px 0px 0px',
          background: `linear-gradient(to right, rgba(${rgb.r},${rgb.g},${rgb.b}, 0) 0%,
           rgba(${rgb.r},${rgb.g},${rgb.b}, 1) 100%)`,
          boxShadow: this.props.shadow,
          borderRadius: this.props.radius
        },
        container: {
          position: 'relative',
          height: '100%',
          margin: '0 3px'
        },
        pointer: {
          position: 'absolute',
          left: `${rgb.a * 100}%`
        },
        slider: {
          width: '4px',
          borderRadius: '1px',
          height: '8px',
          boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
          background: '#fff',
          marginTop: '1px',
          transform: 'translateX(-2px)'
        }
      },
      vertical: {
        gradient: {
          background: `linear-gradient(to bottom, rgba(${rgb.r},${rgb.g},${rgb.b}, 0) 0%,
           rgba(${rgb.r},${rgb.g},${rgb.b}, 1) 100%)`
        },
        pointer: {
          left: 0,
          top: `${rgb.a * 100}%`
        }
      },
      overwrite: { ...this.props.style
      }
    }, {
      vertical: this.props.direction === 'vertical',
      overwrite: true
    });
    return /*#__PURE__*/_createElement$21("div", {
      style: styles.alpha
    }, /*#__PURE__*/_createElement$21("div", {
      style: styles.checkboard
    }, /*#__PURE__*/_createElement$21(Checkboard, {
      renderers: this.props.renderers
    })), /*#__PURE__*/_createElement$21("div", {
      style: styles.gradient
    }), /*#__PURE__*/_createElement$21("div", {
      style: styles.container,
      ref: container => {
        this.container = container;
      },
      onMouseDown: this.handleMouseDown,
      onTouchMove: this.handleChange,
      onTouchStart: this.handleChange
    }, /*#__PURE__*/_createElement$21("div", {
      style: styles.pointer
    }, this.props.pointer ? /*#__PURE__*/_createElement$21(this.props.pointer, this.props) : /*#__PURE__*/_createElement$21("div", {
      style: styles.slider
    }))));
  }

}

const _createElement$20 = /*#__PURE__*/React__default['default'].createElement;
const DEFAULT_ARROW_OFFSET = 1;
const UP_KEY_CODE = 38;
const DOWN_KEY_CODE = 40;
const ENTER_KEY_CODE = 13;
const VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];

const isValidKeyCode = keyCode => VALID_KEY_CODES.indexOf(keyCode) > -1;

const getNumberValue = value => Number(String(value).replace(/%/g, ''));

class EditableInput extends (React.PureComponent || React.Component) {
  constructor(props) {
    super();

    this.handleBlur = e => {
      // 给 e 加一个 _blur 属性
      // 用于 onChangeComplete
      e._blur = true;
      this.setUpdatedValue(this.state.value, e);

      if (this.state.blurValue) {
        this.setState({
          value: this.state.blurValue,
          blurValue: null
        });
      }
    };

    this.handleChange = e => {
      this.setUpdatedValue(e.target.value, e);
    };

    this.handleKeyDown = e => {
      e.stopPropagation(); // In case `e.target.value` is a percentage remove the `%` character
      // and update accordingly with a percentage
      // https://github.com/casesandberg/react-color/issues/383

      const value = getNumberValue(e.target.value);

      if (!isNaN(value) && isValidKeyCode(e.keyCode)) {
        const offset = this.getArrowOffset();
        const updatedValue = e.keyCode === UP_KEY_CODE ? value + offset : value - offset;
        this.setUpdatedValue(updatedValue, e);
      } // Enter to blur


      if (e.keyCode === ENTER_KEY_CODE) {
        e.target.blur();
      }
    };

    this.handleDrag = e => {
      if (this.props.dragLabel) {
        const newValue = Math.round(this.props.value + e.movementX);

        if (newValue >= 0 && newValue <= this.props.dragMax) {
          this.props.onChange && this.props.onChange(this.getValueObjectWithLabel(newValue), e);
        }
      }
    };

    this.handleMouseDown = e => {
      if (this.props.dragLabel) {
        e.preventDefault();
        this.handleDrag(e);
        window.addEventListener('mousemove', this.handleDrag);
        window.addEventListener('mouseup', this.handleMouseUp);
      }
    };

    this.handleMouseUp = () => {
      this.unbindEventListeners();
    };

    this.unbindEventListeners = () => {
      window.removeEventListener('mousemove', this.handleDrag);
      window.removeEventListener('mouseup', this.handleMouseUp);
    };

    this.state = {
      value: String(props.value).toUpperCase(),
      blurValue: String(props.value).toUpperCase()
    };
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {
      if (this.input === document.activeElement) {
        this.setState({
          blurValue: String(this.props.value).toUpperCase()
        });
      } else {
        this.setState({
          value: String(this.props.value).toUpperCase(),
          blurValue: !this.state.blurValue && String(this.props.value).toUpperCase()
        });
      }
    }
  }

  componentWillUnmount() {
    this.unbindEventListeners();
  }

  getValueObjectWithLabel(value) {
    return {
      [this.props.label]: value
    };
  }

  getArrowOffset() {
    return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;
  }

  setUpdatedValue(value, e) {
    const onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value; // 给 e 加一个 _input 属性
    // 表明这次的 onChange 由输入框触发

    e._input = true;
    this.props.onChange && this.props.onChange(onChangeValue, e);
    this.setState({
      value
    });
  }

  render() {
    const styles = reactCSS__default['default']({
      default: {
        wrap: {
          position: 'relative'
        }
      },
      'user-override': {
        wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},
        input: this.props.style && this.props.style.input ? this.props.style.input : {},
        label: this.props.style && this.props.style.label ? this.props.style.label : {}
      },
      'dragLabel-true': {
        label: {
          cursor: 'ew-resize'
        }
      }
    }, {
      'user-override': true
    }, this.props);
    return /*#__PURE__*/_createElement$20("div", {
      style: styles.wrap
    }, /*#__PURE__*/_createElement$20("input", {
      style: styles.input,
      ref: input => {
        this.input = input;
      },
      value: this.state.value,
      onKeyDown: this.handleKeyDown,
      onChange: this.handleChange,
      onBlur: this.handleBlur,
      placeholder: this.props.placeholder,
      spellCheck: "false"
    }), this.props.label && !this.props.hideLabel ? /*#__PURE__*/_createElement$20("span", {
      style: styles.label,
      onMouseDown: this.handleMouseDown
    }, this.props.label) : null);
  }

}

const _createElement$1$ = /*#__PURE__*/React__default['default'].createElement;
const handleFocus = (Component, Span = 'span') => class Focus extends React__default['default'].Component {
  constructor(...args) {
    super(...args);
    this.state = {
      focus: false
    };

    this.handleFocus = () => this.setState({
      focus: true
    });

    this.handleBlur = () => this.setState({
      focus: false
    });
  }

  render() {
    return /*#__PURE__*/_createElement$1$(Span, {
      onFocus: this.handleFocus,
      onBlur: this.handleBlur
    }, /*#__PURE__*/_createElement$1$(Component, _extends__default['default']({}, this.props, this.state)));
  }

};

const _createElement$1_ = /*#__PURE__*/React__default['default'].createElement;
const ENTER = 13;
const Swatch = ({
  color,
  style,
  onClick = () => {},
  onHover,
  title = color,
  children,
  focus,
  focusStyle = {}
}) => {
  const transparent = color === 'transparent';
  const styles = reactCSS__default['default']({
    default: {
      swatch: {
        background: color,
        height: '100%',
        width: '100%',
        cursor: 'pointer',
        position: 'relative',
        outline: 'none',
        ...style,
        ...(focus ? focusStyle : {})
      }
    }
  });

  const handleClick = e => onClick(color, e);

  const handleKeyDown = e => e.keyCode === ENTER && onClick(color, e);

  const handleHover = e => onHover(color, e);

  const optionalEvents = {};

  if (onHover) {
    optionalEvents.onMouseOver = handleHover;
  }

  return /*#__PURE__*/_createElement$1_("div", _extends__default['default']({
    style: styles.swatch,
    onClick: handleClick,
    title: title,
    tabIndex: 0,
    onKeyDown: handleKeyDown
  }, optionalEvents), children, transparent && /*#__PURE__*/_createElement$1_(Checkboard, {
    borderRadius: styles.swatch.borderRadius,
    boxShadow: "inset 0 0 0 1px rgba(0,0,0,0.1)"
  }));
};
var Swatch$1 = handleFocus(Swatch);

/* eslint-disable no-param-reassign */
const _createElement$1Z = /*#__PURE__*/React__default['default'].createElement;
const SketchFields = ({
  onChange,
  rgb,
  hsl,
  hex,
  disableAlpha
}) => {
  const styles = reactCSS__default['default']({
    default: {
      fields: {
        display: 'flex',
        paddingTop: '4px'
      },
      single: {
        flex: '1',
        paddingLeft: '6px'
      },
      alpha: {
        flex: '1',
        paddingLeft: '6px'
      },
      double: {
        flex: '2'
      },
      input: {
        width: '80%',
        padding: '4px 10% 3px',
        border: 'none',
        boxShadow: 'inset 0 0 0 1px #ccc',
        fontSize: '11px'
      },
      label: {
        display: 'block',
        textAlign: 'center',
        fontSize: '11px',
        color: '#222',
        paddingTop: '3px',
        paddingBottom: '4px',
        textTransform: 'capitalize'
      }
    },
    disableAlpha: {
      alpha: {
        display: 'none'
      }
    }
  }, {
    disableAlpha
  });

  const handleChange = (data, e) => {
    if (data.hex) {
      isValidHex(data.hex) && onChange({
        hex: data.hex,
        source: 'hex'
      }, e);
    } else if (data.r || data.g || data.b) {
      onChange({
        r: data.r || rgb.r,
        g: data.g || rgb.g,
        b: data.b || rgb.b,
        a: rgb.a,
        source: 'rgb'
      }, e);
    } else if (data.a) {
      if (data.a < 0) {
        data.a = 0;
      } else if (data.a > 100) {
        data.a = 100;
      }

      data.a /= 100;
      onChange({
        h: hsl.h,
        s: hsl.s,
        l: hsl.l,
        a: data.a,
        source: 'rgb'
      }, e);
    }
  };

  return /*#__PURE__*/_createElement$1Z("div", {
    style: styles.fields,
    className: "flexbox-fix"
  }, /*#__PURE__*/_createElement$1Z("div", {
    style: styles.double
  }, /*#__PURE__*/_createElement$1Z(EditableInput, {
    style: {
      input: styles.input,
      label: styles.label
    },
    label: "hex",
    value: hex.replace('#', ''),
    onChange: handleChange
  })), /*#__PURE__*/_createElement$1Z("div", {
    style: styles.single
  }, /*#__PURE__*/_createElement$1Z(EditableInput, {
    style: {
      input: styles.input,
      label: styles.label
    },
    label: "r",
    value: rgb.r,
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "255"
  })), /*#__PURE__*/_createElement$1Z("div", {
    style: styles.single
  }, /*#__PURE__*/_createElement$1Z(EditableInput, {
    style: {
      input: styles.input,
      label: styles.label
    },
    label: "g",
    value: rgb.g,
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "255"
  })), /*#__PURE__*/_createElement$1Z("div", {
    style: styles.single
  }, /*#__PURE__*/_createElement$1Z(EditableInput, {
    style: {
      input: styles.input,
      label: styles.label
    },
    label: "b",
    value: rgb.b,
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "255"
  })), /*#__PURE__*/_createElement$1Z("div", {
    style: styles.alpha
  }, /*#__PURE__*/_createElement$1Z(EditableInput, {
    style: {
      input: styles.input,
      label: styles.label
    },
    label: "a",
    value: Math.round(rgb.a * 100),
    onChange: handleChange,
    dragLabel: "true",
    dragMax: "100"
  })));
};

const _createElement$1Y = /*#__PURE__*/React__default['default'].createElement;
const SketchPresetColors = ({
  colors,
  onClick = () => {},
  onSwatchHover
}) => {
  const styles = reactCSS__default['default']({
    default: {
      colors: {
        margin: '0 -10px',
        padding: '10px 0 0 10px',
        borderTop: '1px solid #eee',
        display: 'flex',
        flexWrap: 'wrap',
        position: 'relative'
      },
      swatchWrap: {
        width: '16px',
        height: '16px',
        margin: '0 10px 10px 0'
      },
      swatch: {
        borderRadius: '3px',
        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)'
      }
    },
    'no-presets': {
      colors: {
        display: 'none'
      }
    }
  }, {
    'no-presets': !colors || !colors.length
  });

  const handleClick = (hex, e) => {
    onClick({
      hex,
      source: 'hex'
    }, e);
  };

  return /*#__PURE__*/_createElement$1Y("div", {
    style: styles.colors,
    className: "flexbox-fix"
  }, colors.map(colorObjOrString => {
    const c = typeof colorObjOrString === 'string' ? {
      color: colorObjOrString
    } : colorObjOrString;
    const key = `${c.color}${c.title || ''}`;
    return /*#__PURE__*/_createElement$1Y("div", {
      key: key,
      style: styles.swatchWrap
    }, /*#__PURE__*/_createElement$1Y(Swatch$1, _extends__default['default']({}, c, {
      style: styles.swatch,
      onClick: handleClick,
      onHover: onSwatchHover,
      focusStyle: {
        boxShadow: `inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ${c.color}`
      }
    })));
  }));
};
SketchPresetColors.propTypes = {
  colors: PropTypes__default['default'].arrayOf(PropTypes__default['default'].oneOfType([PropTypes__default['default'].string, PropTypes__default['default'].shape({
    color: PropTypes__default['default'].string,
    title: PropTypes__default['default'].string
  })])).isRequired
};

var _Checkboard;
// import PropTypes from 'prop-types';
// import merge from 'lodash/merge';

const _createElement$1X = /*#__PURE__*/React__default['default'].createElement;
const Sketch = ({
  width,
  rgb,
  hex,
  hsv,
  hsl,
  onChange,
  onSwatchHover,
  disableAlpha,
  presetColors,
  renderers,
  styles: passedStyles = {},
  className = ''
}) => {
  const defaultStyles = {
    default: {
      picker: {
        width,
        padding: '10px 10px 0',
        boxSizing: 'initial',
        background: '#fff',
        borderRadius: '4px',
        boxShadow: '0px 10px 20px rgba(0, 0, 0, 0.2)',
        border: '1px solid rgba(17, 31, 44, 0.08)'
      },
      saturation: {
        width: '100%',
        paddingBottom: '75%',
        position: 'relative',
        overflow: 'hidden'
      },
      Saturation: {
        radius: '3px',
        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
      },
      controls: {
        display: 'flex'
      },
      sliders: {
        padding: '4px 0',
        flex: '1'
      },
      color: {
        width: '24px',
        height: '24px',
        position: 'relative',
        marginTop: '4px',
        marginLeft: '4px',
        borderRadius: '3px'
      },
      activeColor: {
        absolute: '0px 0px 0px 0px',
        borderRadius: '2px',
        background: `rgba(${rgb.r},${rgb.g},${rgb.b},${rgb.a})`,
        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
      },
      hue: {
        position: 'relative',
        height: '10px',
        overflow: 'hidden'
      },
      Hue: {
        radius: '2px',
        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
      },
      alpha: {
        position: 'relative',
        height: '10px',
        marginTop: '4px',
        overflow: 'hidden'
      },
      Alpha: {
        radius: '2px',
        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
      },
      ...passedStyles
    },
    disableAlpha: {
      color: {
        height: '10px'
      },
      hue: {
        height: '10px'
      },
      alpha: {
        display: 'none'
      }
    }
  };
  const mergedStyles = passedStyles ? Object.assign({}, defaultStyles, passedStyles) : defaultStyles;
  const styles = reactCSS__default['default'](mergedStyles, {
    disableAlpha
  });
  return /*#__PURE__*/_createElement$1X("div", {
    style: styles.picker,
    className: `sketch-picker ${className}`
  }, /*#__PURE__*/_createElement$1X("div", {
    style: styles.saturation
  }, /*#__PURE__*/_createElement$1X(Saturation, {
    style: styles.Saturation,
    hsl: hsl,
    hsv: hsv,
    onChange: onChange
  })), /*#__PURE__*/_createElement$1X("div", {
    style: styles.controls,
    className: "flexbox-fix"
  }, /*#__PURE__*/_createElement$1X("div", {
    style: styles.sliders
  }, /*#__PURE__*/_createElement$1X("div", {
    style: styles.hue
  }, /*#__PURE__*/_createElement$1X(Hue, {
    style: styles.Hue,
    hsl: hsl,
    onChange: onChange
  })), /*#__PURE__*/_createElement$1X("div", {
    style: styles.alpha
  }, /*#__PURE__*/_createElement$1X(Alpha, {
    style: styles.Alpha,
    rgb: rgb,
    hsl: hsl,
    renderers: renderers,
    onChange: onChange
  }))), /*#__PURE__*/_createElement$1X("div", {
    style: styles.color
  }, _Checkboard || (_Checkboard = /*#__PURE__*/_createElement$1X(Checkboard, null)), /*#__PURE__*/_createElement$1X("div", {
    style: styles.activeColor
  }))), /*#__PURE__*/_createElement$1X(SketchFields, {
    rgb: rgb,
    hsl: hsl,
    hex: hex,
    onChange: onChange,
    disableAlpha: disableAlpha
  }), /*#__PURE__*/_createElement$1X(SketchPresetColors, {
    colors: presetColors,
    onClick: onChange,
    onSwatchHover: onSwatchHover
  }));
}; // todo
// Sketch.propTypes = {
//   disableAlpha: PropTypes.bool,
//   width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
//   styles: PropTypes.object,
// };

Sketch.defaultProps = {
  disableAlpha: false,
  width: 200,
  styles: {},
  presetColors: ['#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505', '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000', '#4A4A4A', '#9B9B9B', '#FFFFFF']
};
var SketchPicker = ColorWrap(Sketch);

var useClickOuterRef = ((handler, on = true, eventName, box) => {
  const ref = React.useRef(null);
  const callback = React.useRef(() => {});

  callback.current = handler || (() => {});

  React.useEffect(() => {
    /**
     * 点击处理
     */
    const handleClickBody = event => {
      const isOuter = !ref.current || !elementContain(box ? box : ref.current, event.target);

      if (isOuter) {
        callback.current(event);
      }
    };

    if (on) {
      document.body.addEventListener(eventName || 'mousedown', handleClickBody, {
        capture: true
      });
    }

    return () => {
      if (on) {
        document.body.removeEventListener(eventName || 'mousedown', handleClickBody, {
          capture: true
        });
      }
    };
  }, [on, eventName]);
  return ref;
});

var _SomecolorNormal;
const _createElement$1W = /*#__PURE__*/React__default['default'].createElement;
exports.EColorPanelMode = void 0;

(function (EColorPanelMode) {
  EColorPanelMode["normal"] = "normal";
  EColorPanelMode["art"] = "art";
})(exports.EColorPanelMode || (exports.EColorPanelMode = {}));

const decimalToHex = alpha => alpha === 0 ? '00' : Math.round(255 * alpha).toString(16).padStart(2, '0');

// 双倍间距
const doubleLineStyle = {
  paddingBottom: '10px'
};
const CUSTOMER_CONFIG_KEY = 'color-picker-custom-config';
const MAX_LATEST_COLOR = 10;

const ClickOuterRef = props => {
  const {
    handler,
    on,
    box,
    children
  } = props;
  const ref = useClickOuterRef(handler, on, 'mousedown', box);
  return children(ref);
};

class ColorPalette extends React.PureComponent {
  // eslint-disable-next-line react/static-property-placement
  constructor(props) {
    super(props);
    this.refPalette = /*#__PURE__*/React__default['default'].createRef();
    this.moreButtonRef = /*#__PURE__*/React__default['default'].createRef();
    this.timer = 0;

    this.handlePick = color => {
      const {
        onPick
      } = this.props;
      onPick(color);
    };

    this.handleCustomClick = e => {
      // 阻止 更多颜色面板的 点击事件冒泡
      e.preventDefault();
      e.stopPropagation();
    };

    this.showHandleCustomPicker = e => {
      const {
        picker
      } = this.props;

      if (!picker) {
        return;
      }

      if (this.timer) window.clearTimeout(this.timer);
      const {
        target
      } = e; // 确认按钮不阻止事件流

      if (!target.id || target.id !== CUSTOMER_CONFIG_KEY) {
        e.preventDefault();
        e.stopPropagation();
      }

      const {
        showPicker
      } = this.state;
      if (showPicker) return;
      this.changePickerAlignment();
      this.setState({
        showPicker: true
      });
    };

    this.hideHandleCustomPicker = () => {
      this.timer = window.setTimeout(() => {
        const {
          customColor
        } = this.state;
        this.addRecentColor(customColor);
        this.setState({
          showPicker: false
        });
      }, 200);
    };

    this.changePickerAlignment = () => {
      if (!this.refPalette.current) {
        return;
      }

      const {
        left,
        width
      } = this.refPalette.current.getBoundingClientRect();
      const right = window.innerWidth - left - width; // SketchPicker 的宽度为 200px

      if (right <= 210) {
        this.setState({
          isPickerAlignRight: false
        });
      } else {
        this.setState({
          isPickerAlignRight: true
        });
      }
    };

    this.getColorStringColorObj = colorObj => {
      let result = colorObj.hex; // 这里可能是 "transparent"

      if (result.startsWith('#')) {
        if (colorObj.rgb && colorObj.rgb.a !== 1) {
          result = `${colorObj.hex}${decimalToHex(colorObj.rgb.a || 0)}`.toLowerCase();
        }
      }

      return result;
    };

    this.handleCustomPickerChange = colorObj => {
      const {
        onCustomColorPick,
        onPick,
        onCustomColorAfterPick
      } = this.props;
      const color = this.getColorStringColorObj(colorObj);
      this.setState({
        customColor: color
      }); // 选中颜色变化时立即应用

      if (onCustomColorPick) {
        onCustomColorPick(color);
      } else if (!onCustomColorAfterPick) {
        onPick(color);
      }
    };

    this.handleCustomPickerAfterChange = colorObj => {
      const {
        onCustomColorAfterPick
      } = this.props;
      const color = this.getColorStringColorObj(colorObj);

      if (onCustomColorAfterPick) {
        onCustomColorAfterPick(color);
      }
    };

    this.handleConfirmCustomColor = () => {
      const {
        customColor
      } = this.state;
      this.addRecentColor(customColor);
      this.setState({
        customColor: '',
        showPicker: false
      });
    };

    this.addRecentColor = color => {
      if (!color) return;
      this.setState(state => {
        let colors = [...state.recentColors];
        const findIdx = colors.indexOf(color);

        if (findIdx >= 0) {
          // 调整已有元素的位置
          const deleteColor = colors.splice(findIdx, 1);
          colors.unshift(...deleteColor);
        } else {
          colors.unshift(color);
        }

        colors = colors.slice(0, MAX_LATEST_COLOR);
        colorUtil.saveRecentColorsToLocalStorage(colors);
        return {
          recentColors: colors
        };
      });
    };

    this.handleSelectChange = mode => {
      this.setState({
        mode
      });
      const {
        onSelectValueChange
      } = this.props;

      if (typeof onSelectValueChange === 'function') {
        onSelectValueChange(mode);
      }
    };

    this.getColorData = () => {
      const {
        mode
      } = this.state;
      const {
        showGradient
      } = this.props;

      if (mode === 'art') {
        return showGradient ? colorDataArtWithGradient : colorDataArt;
      }

      return colorDataNormal;
    };

    this.renderCustomerColor = () => {
      const {
        clearColor,
        color,
        locale,
        showRecentColors,
        colorBlockText,
        customColorBlockTextColor
      } = this.props;
      const {
        isPickerAlignRight,
        customColor,
        showPicker,
        recentColors: customerColors,
        mode
      } = this.state;
      const colorCount = Math.min(customerColors.length, MAX_LATEST_COLOR);
      const limitedColors = customerColors.slice(0, colorCount);
      const LineGroup = mode === 'normal' ? LineGroupNormal : LineGroupArt;
      return /*#__PURE__*/_createElement$1W(React__default['default'].Fragment, null, !colorCount || !showRecentColors ? null : /*#__PURE__*/_createElement$1W(LatestColorWrap, null, /*#__PURE__*/_createElement$1W(LatestColorText, null, /*#__PURE__*/_createElement$1W(weUtil.TranslateComp, {
        locale: locale,
        textKey: 'we_toolbar_color_picker_latest'
      })), /*#__PURE__*/_createElement$1W(LineGroup, {
        key: `latestColors-${limitedColors[0]}`
      }, limitedColors.map((curColor, index) => /*#__PURE__*/_createElement$1W(ColorBlockItem, {
        key: `${curColor}-${index}`,
        colorValue: curColor,
        clearColor: clearColor,
        index: index,
        active: color === curColor,
        onColorPick: this.handlePick,
        colorBlockText: colorBlockText,
        setColorBlockTextColor: customColorBlockTextColor,
        mode: mode
      })))), /*#__PURE__*/_createElement$1W(CustomGroup, {
        onMouseEnter: this.showHandleCustomPicker,
        onMouseLeave: this.hideHandleCustomPicker,
        ref: this.moreButtonRef
      }, /*#__PURE__*/_createElement$1W(CustomGroupInnerWrap, {
        className: classnames({
          actived: showPicker
        })
      }, /*#__PURE__*/_createElement$1W("div", {
        style: {
          display: 'flex',
          alignItems: 'center'
        }
      }, _SomecolorNormal || (_SomecolorNormal = /*#__PURE__*/_createElement$1W(weDesign.SomecolorNormal, null)), /*#__PURE__*/_createElement$1W(CustomText, null, /*#__PURE__*/_createElement$1W(weUtil.TranslateComp, {
        locale: locale,
        textKey: 'we_toolbar_color_picker_more'
      })), showPicker &&
      /*#__PURE__*/
      // 点击 更多颜色 面板之外的区域关闭面板，并将颜色添加到 最近颜色 中
      _createElement$1W(ClickOuterRef, {
        handler: this.handleConfirmCustomColor,
        on: showPicker,
        box: this.moreButtonRef.current
      }, customPickerRef => /*#__PURE__*/_createElement$1W(CustomPicker, {
        rightSide: isPickerAlignRight,
        onClick: this.handleCustomClick,
        ref: customPickerRef
      }, /*#__PURE__*/_createElement$1W(SketchPicker, {
        color: customColor,
        onChange: this.handleCustomPickerChange,
        onChangeComplete: this.handleCustomPickerAfterChange
      })))), /*#__PURE__*/_createElement$1W(weDesign.ArrowRightNormal, {
        style: {
          color: 'rgba(17, 31, 44, 0.4)'
        }
      }))));
    };

    const {
      getColorPanelMode
    } = this.props;
    this.state = {
      customColor: '',
      showPicker: false,
      isPickerAlignRight: true,
      recentColors: colorUtil.getRecentColorsFromLocalStorage(),
      mode: typeof getColorPanelMode === 'function' ? getColorPanelMode() || exports.EColorPanelMode.normal : exports.EColorPanelMode.normal
    };
  } // 选中颜色之后，数值回调


  componentWillUnmount() {
    if (this.timer) window.clearTimeout(this.timer);
  }

  render() {
    const {
      color,
      clearColor,
      automaticColor,
      picker,
      locale,
      quickSetText,
      showAutomatic,
      colorBlockText,
      customColorPalette,
      customColorBlockTextColor,
      showToggleSelect,
      doubleGapRowIndex = 0
    } = this.props;
    const {
      mode
    } = this.state;
    const doubleGapRowIndexWithMode = mode === 'normal' ? 0 : doubleGapRowIndex;
    const LineGroup = mode === 'normal' ? LineGroupNormal : LineGroupArt;
    const colors = this.getColorData();
    return /*#__PURE__*/_createElement$1W(PaletteWrapper, {
      ref: this.refPalette
    }, /*#__PURE__*/_createElement$1W(Header, null, showAutomatic && /*#__PURE__*/_createElement$1W(DefaultGroup, {
      onClick: () => this.handlePick(automaticColor)
    }, /*#__PURE__*/_createElement$1W(ColorBlockItem, {
      colorValue: automaticColor,
      clearColor: clearColor,
      index: 1,
      active: color === automaticColor,
      onColorPick: this.handlePick,
      colorBlockText: colorBlockText,
      setColorBlockTextColor: customColorBlockTextColor
    }), /*#__PURE__*/_createElement$1W(CustomText, null, quickSetText || /*#__PURE__*/_createElement$1W(weUtil.TranslateComp, {
      locale: locale,
      textKey: 'we_toolbar_color_picker_default'
    }))), showToggleSelect && /*#__PURE__*/_createElement$1W(weDesign.Select, {
      defaultValue: mode,
      style: {
        height: 20,
        fontSize: 12,
        lineHeight: 20
      },
      onChange: this.handleSelectChange,
      getContainer: () => this.refPalette.current || document.body,
      bordered: true,
      testid: "color_panel_mode_select"
    }, /*#__PURE__*/_createElement$1W(weDesign.SelectOption, {
      value: exports.EColorPanelMode.normal,
      testid: "color_panel_normal_mode"
    }, /*#__PURE__*/_createElement$1W(weUtil.TranslateComp, {
      locale: locale,
      textKey: 'we_toolbar_color_normal_mode'
    })), /*#__PURE__*/_createElement$1W(weDesign.SelectOption, {
      value: exports.EColorPanelMode.art,
      testid: "color_panel_art_mode"
    }, /*#__PURE__*/_createElement$1W(weUtil.TranslateComp, {
      locale: locale,
      textKey: 'we_toolbar_color_art_mode'
    })))), /*#__PURE__*/_createElement$1W(MainColorGroup, null, colors.map((data, index) => {
      const groupProps = {
        key: `${index}-${data[0]}`,
        style: index === doubleGapRowIndexWithMode ? doubleLineStyle : undefined
      }; // 渲染一行色块

      return /*#__PURE__*/_createElement$1W(LineGroup, groupProps, data.map((curColor, colIndex) => /*#__PURE__*/_createElement$1W(ColorBlockItem, {
        key: `${curColor}-${colIndex}`,
        colorValue: curColor,
        clearColor: clearColor,
        index: colIndex,
        active: color === curColor,
        onColorPick: this.handlePick,
        colorBlockText: colorBlockText,
        setColorBlockTextColor: customColorBlockTextColor,
        mode: mode
      })));
    })), picker ? this.renderCustomerColor() : null, customColorPalette);
  }

}
ColorPalette.defaultProps = {
  color: 'black',
  onPick: () => {},
  canClear: false,
  automaticColor: '',
  latestColors: [],
  picker: true,
  showRecentColors: true,
  showAutomatic: true
};

const _createElement$1V = /*#__PURE__*/React__default['default'].createElement;
const DEFAULT_COLOR$2 = '#ffffff';
class FillColorPicker extends React__default['default'].PureComponent {
  constructor(props) {
    super(props);

    this.handleColorPick = color => {
      this.setState({
        currentColor: color
      });
      const {
        onColorPicker,
        active,
        onActiveChange
      } = this.props;

      if (active !== undefined && onActiveChange) {
        onActiveChange(false);
      } else {
        this.setState({
          currentActive: false
        });
      }

      if (onColorPicker) {
        onColorPicker(color);
      }
    };

    this.handleCustomColorPick = color => {
      const {
        onColorPicker
      } = this.props;
      this.setState({
        currentColor: color
      });

      if (onColorPicker) {
        onColorPicker(color);
      }
    };

    this.handlePaletteClick = e => {
      // 阻止冒泡
      e.stopPropagation(); // 阻止默认行为

      e.preventDefault();
    };

    this.handleClickLeft = () => {
      const {
        onColorPicker
      } = this.props;
      const {
        currentColor
      } = this.state;
      onColorPicker(currentColor);
    };

    this.handleActive = active => {
      const {
        onActiveChange
      } = this.props;

      if (onActiveChange) {
        onActiveChange(active);
      }

      this.setState({
        currentActive: active
      });
    };

    this.getColorPalette = () => {
      const {
        color,
        automaticColor,
        clearColor,
        picker,
        locale,
        showAutomatic,
        showToggleSelect,
        onSelectValueChange,
        showGradient,
        getColorPanelMode,
        doubleGapRowIndex
      } = this.props;
      const {
        currentColor
      } = this.state;
      return /*#__PURE__*/_createElement$1V(ColorPaletteWrapper, {
        onClick: this.handlePaletteClick
      }, /*#__PURE__*/_createElement$1V(ColorPalette, {
        color: color || currentColor,
        onPick: this.handleColorPick,
        onCustomColorPick: this.handleCustomColorPick,
        automaticColor: automaticColor,
        clearColor: clearColor,
        picker: picker,
        locale: locale,
        showAutomatic: showAutomatic,
        showToggleSelect: showToggleSelect,
        getColorPanelMode: getColorPanelMode,
        showGradient: showGradient,
        onSelectValueChange: onSelectValueChange,
        doubleGapRowIndex: doubleGapRowIndex
      }));
    };

    this.state = {
      currentColor: props.color || props.defaultColor || DEFAULT_COLOR$2,
      currentActive: props.defaultActive || false
    };
  }

  render() {
    const {
      currentColor,
      currentActive
    } = this.state;
    const {
      color,
      size,
      active: propActive,
      title,
      zIndex
    } = this.props;
    const active = propActive !== undefined ? propActive : currentActive;
    const activeColor = color || currentColor;
    const isWhite = tinycolor__default['default'].equals(activeColor, '#ffffff');
    return /*#__PURE__*/_createElement$1V(FillColorPickerButton, {
      overlay: this.getColorPalette(),
      onClickLeft: this.handleClickLeft,
      active: active,
      onActiveChange: this.handleActive,
      size: size,
      testid: "FillColorPicker",
      title: title,
      zIndex: zIndex,
      icon: /*#__PURE__*/_createElement$1V(SplitButtonWrapper, null, /*#__PURE__*/_createElement$1V(FullFillColorArea, {
        isWhite: isWhite,
        color: activeColor
      }))
    });
  }

}

var _ToolbarBorderOuterNo, _ToolbarBorderInnerNo, _ToolbarBorderAllNorm, _ToolbarBorderLeftNor, _ToolbarBorderRightNo, _ToolbarBorderTopNorm, _ToolbarBorderBottomN, _ToolbarBorderNoneNor, _ToolbarBorderHorizon, _ToolbarBorderVertica, _ToolbarBorderNoneNor2;
const _createElement$1U = /*#__PURE__*/React__default['default'].createElement;
const DEFAULT_BORDER_COLOR = '#000000';
const ICON_DEFAULT_COLOR$1 = 'rgba(58, 60, 63, 1)';
class BorderSet extends React__default['default'].PureComponent {
  constructor(props) {
    super(props);

    this.handleClick = e => {
      // 阻止冒泡
      e.stopPropagation();
    };

    this.handleVisibleChange = visible => {
      this.setState({
        dropdownVisible: visible
      });
    };

    this.handleClickLeft = () => {
      const {
        onClick
      } = this.props;

      if (onClick) {
        const {
          innerColor,
          innerLineType,
          innerBorderType
        } = this.state;
        const data = {
          borderColor: innerColor,
          borderType: innerBorderType,
          borderStyle: innerLineType
        };
        onClick(data);
      }
    };

    this.handlePropertyChange = borderProps => {
      const {
        onChange
      } = this.props;

      if (onChange) {
        const {
          innerColor,
          innerLineType,
          innerBorderType
        } = this.state;
        const data = {
          borderColor: innerColor,
          borderType: innerBorderType,
          borderStyle: innerLineType
        };
        const allProps = { ...data,
          ...borderProps
        };
        onChange(allProps, borderProps);
      }
    };

    this.handleColorChange = color => {
      this.setState({
        innerColor: color
      });
      this.handlePropertyChange({
        borderColor: color
      });
      this.setState({
        dropdownVisible: true
      });
    };

    this.handleLineChange = type => {
      this.setState({
        innerLineType: type
      });
      this.handlePropertyChange({
        borderStyle: type
      });
      this.setState({
        dropdownVisible: true
      });
    };

    this.handleBorderChange = type => {
      this.setState({
        innerBorderType: type
      });
      this.handlePropertyChange({
        borderType: type
      });
    };

    this.handleColorPickerVisible = visible => {
      this.setState({
        colorPickerVisible: visible
      });
    };

    this.handleLineSelectVisible = e => {
      this.setState({
        lineSelectVisible: e
      });
    };

    this.handleBorderNoneClick = () => this.handleBorderChange(BorderType.none);

    this.getOverlayContent = () => {
      const {
        borderIconSize,
        borderStyles: lineTypes,
        color,
        locale,
        showToggleSelect,
        onSelectValueChange,
        showGradient,
        getColorPanelMode,
        doubleGapRowIndex,
        zIndex
      } = this.props;
      const {
        innerColor: currentColor,
        innerBorderType,
        innerLineType,
        colorPickerVisible,
        lineSelectVisible
      } = this.state;
      const activeColor = color || currentColor;
      const inputStyle = {
        width: 63,
        height: 22
      };
      const iconStyle = {
        width: borderIconSize,
        height: borderIconSize,
        boxSizing: 'border-box',
        padding: '1px 1px'
      };
      return /*#__PURE__*/_createElement$1U(BorderSetWrapper, {
        onMouseDown: this.handleClick
      }, /*#__PURE__*/_createElement$1U(ContentWrapper, null, /*#__PURE__*/_createElement$1U(BorderTypePanel, {
        borderType: innerBorderType,
        borderIconSize: borderIconSize,
        onBorderTypeChange: this.handleBorderChange,
        borderSelectedColor: activeColor
      }), /*#__PURE__*/_createElement$1U(LineTypeWrapper, null, /*#__PURE__*/_createElement$1U(FillColorWrapper, null, /*#__PURE__*/_createElement$1U(LabelWrapper, null, /*#__PURE__*/_createElement$1U(weUtil.TranslateComp, {
        locale: locale,
        textKey: 'we_toolbar_border_set_color'
      })), /*#__PURE__*/_createElement$1U(FillColorPicker, {
        active: colorPickerVisible,
        onActiveChange: this.handleColorPickerVisible,
        color: activeColor,
        automaticColor: DEFAULT_BORDER_COLOR,
        onColorPicker: this.handleColorChange,
        size: "small",
        locale: locale,
        showToggleSelect: showToggleSelect,
        getColorPanelMode: getColorPanelMode,
        showGradient: showGradient,
        onSelectValueChange: onSelectValueChange,
        doubleGapRowIndex: doubleGapRowIndex,
        zIndex: zIndex
      })), /*#__PURE__*/_createElement$1U(LineSelectWrapper, null, /*#__PURE__*/_createElement$1U(LabelWrapper, null, /*#__PURE__*/_createElement$1U(weUtil.TranslateComp, {
        locale: locale,
        textKey: 'we_toolbar_border_set_line_type'
      })), /*#__PURE__*/_createElement$1U(weDesign.CommonLineSelect, {
        lineTypeArray: lineTypes,
        length: 80,
        style: inputStyle,
        lineType: innerLineType // 线型颜色不需要跟随变化
        ,
        color: "#000000",
        onLineTypeChange: this.handleLineChange,
        visible: lineSelectVisible,
        onVisibleChange: this.handleLineSelectVisible,
        zIndex: zIndex
      })))), /*#__PURE__*/_createElement$1U(FooterWrapper$1, null, /*#__PURE__*/_createElement$1U(FooterInner, {
        className: classnames({
          active: innerBorderType === BorderType.none
        }),
        onClick: this.handleBorderNoneClick
      }, /*#__PURE__*/_createElement$1U(IconWrapper$1, {
        style: {
          color: ICON_DEFAULT_COLOR$1,
          backgroundColor: 'transparent'
        }
      }, /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderNoneNormal, {
        style: iconStyle
      })), /*#__PURE__*/_createElement$1U(TextSpan$1, null, /*#__PURE__*/_createElement$1U(weUtil.TranslateComp, {
        locale: locale,
        textKey: 'we_toolbar_border_none'
      })))));
    };

    this.renderShowIcon = () => {
      const {
        innerBorderType
      } = this.state;

      switch (innerBorderType) {
        case 'outer':
          return _ToolbarBorderOuterNo || (_ToolbarBorderOuterNo = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderOuterNormal, null));

        case 'inner':
          return _ToolbarBorderInnerNo || (_ToolbarBorderInnerNo = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderInnerNormal, null));

        case 'all':
          return _ToolbarBorderAllNorm || (_ToolbarBorderAllNorm = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderAllNormal, null));

        case 'left':
          return _ToolbarBorderLeftNor || (_ToolbarBorderLeftNor = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderLeftNormal, null));

        case 'right':
          return _ToolbarBorderRightNo || (_ToolbarBorderRightNo = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderRightNormal, null));

        case 'top':
          return _ToolbarBorderTopNorm || (_ToolbarBorderTopNorm = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderTopNormal, null));

        case 'bottom':
          return _ToolbarBorderBottomN || (_ToolbarBorderBottomN = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderBottomNormal, null));

        case 'none':
          return _ToolbarBorderNoneNor || (_ToolbarBorderNoneNor = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderNoneNormal, null));

        case 'horizon':
          return _ToolbarBorderHorizon || (_ToolbarBorderHorizon = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderHorizonNormal, null));

        case 'vertical':
          return _ToolbarBorderVertica || (_ToolbarBorderVertica = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderVerticalNormal, null));

        default:
          return _ToolbarBorderNoneNor2 || (_ToolbarBorderNoneNor2 = /*#__PURE__*/_createElement$1U(weDesign.ToolbarBorderNoneNormal, null));
      }
    };

    const _innerColor = props.color ? props.color : DEFAULT_BORDER_COLOR;

    const _innerBorderType = props.borderType || BorderType.all;

    const _innerLineType = props.defaultBorderStyle || 'single';

    this.state = {
      innerColor: _innerColor,
      innerBorderType: _innerBorderType,
      innerLineType: _innerLineType,
      dropdownVisible: false,
      colorPickerVisible: false,
      lineSelectVisible: false
    };
  }

  render() {
    const {
      dropdownVisible,
      colorPickerVisible,
      lineSelectVisible,
      innerColor: color,
      innerBorderType
    } = this.state;
    const {
      disabled,
      title,
      active,
      showTitle,
      size,
      disabledTip,
      testid
    } = this.props;
    const overlayVisible = dropdownVisible || colorPickerVisible || lineSelectVisible;
    const pathColors = innerBorderType === 'none' ? [] : [color || ICON_DEFAULT_COLOR$1, // 当选中颜色为白色时，选中边框的外边缘为黑色，否则选中边框外边缘与内部颜色一致
    !color || isWhite(color) ? ICON_DEFAULT_COLOR$1 : 'transparent'];
    return /*#__PURE__*/_createElement$1U(SplitButton, _extends__default['default']({}, this.props, {
      overlay: overlayVisible ? this.getOverlayContent() : /*#__PURE__*/_createElement$1U(React__default['default'].Fragment, null),
      active: overlayVisible,
      onClickLeft: this.handleClickLeft,
      onActiveChange: this.handleVisibleChange,
      disabled: disabled,
      testid: testid || 'BorderSet',
      title: title,
      showTitle: showTitle,
      size: size,
      activeLeft: active,
      icon: /*#__PURE__*/React__default['default'].cloneElement(this.renderShowIcon(), {
        pathColors
      }),
      disabledTip: disabledTip
    }));
  }

}
BorderSet.defaultProps = {
  borderIconSize: 20,
  ...IconButtonDefaultProps
};

var _path;
const _createElement$1T = /*#__PURE__*/React__default['default'].createElement;

const FontColorIcon = props => {
  const {
    color,
    pathColors
  } = props;
  return colorUtil.isGradientColor(color) ? /*#__PURE__*/_createElement$1T(GradientColorFontIcon, {
    color: color
  }) : /*#__PURE__*/_createElement$1T(weIcon.ToolbarFontColorNormal, {
    pathColors: pathColors
  });
};

const GradientColorFontIcon = props => {
  const {
    color
  } = props;
  const [startColor, endColor] = colorUtil.transferGradientColor(color);
  return /*#__PURE__*/_createElement$1T("svg", {
    width: "20px",
    height: "20px",
    fill: "currentColor",
    "aria-hidden": "true",
    focusable: "false",
    viewBox: "0 0 20 20"
  }, /*#__PURE__*/_createElement$1T("path", {
    d: "M19 20H1V17H19V20Z",
    fill: `url(#paint0_linear_${startColor}:${endColor})`
  }), _path || (_path = /*#__PURE__*/_createElement$1T("path", {
    d: "M7.53848 11L5.93848 15H4.86145L9.53573 3.3143H10.4642L15.1385 15H14.0615L12.4615 11H7.53848ZM7.93848 10H12.0615L9.99997 4.84629L7.93848 10Z",
    fill: "inherit"
  })), /*#__PURE__*/_createElement$1T("defs", null, /*#__PURE__*/_createElement$1T("linearGradient", {
    id: `paint0_linear_${startColor}:${endColor}`,
    x1: "4",
    y1: "9.5",
    x2: "16",
    y2: "9.5",
    gradientUnits: "userSpaceOnUse"
  }, /*#__PURE__*/_createElement$1T("stop", {
    stopColor: startColor
  }), /*#__PURE__*/_createElement$1T("stop", {
    offset: "1",
    stopColor: endColor
  }))));
};

const _createElement$1S = /*#__PURE__*/React__default['default'].createElement;
const DEFAULT_COLOR$1 = '#ffffff';
const ICON_DEFAULT_COLOR = 'inherit';
exports.EColorPickerIcon = void 0;

(function (EColorPickerIcon) {
  EColorPickerIcon["font"] = "font";
  EColorPickerIcon["background"] = "background";
  EColorPickerIcon["backgroundfont"] = "backgroundfont";
  EColorPickerIcon["backgroundsheet"] = "backgroundsheet";
})(exports.EColorPickerIcon || (exports.EColorPickerIcon = {}));

class ColorPicker extends React__default['default'].PureComponent {
  constructor(props) {
    super(props);

    this.handlePaletteClick = e => {
      // 阻止冒泡
      e.stopPropagation(); // 阻止默认行为

      e.preventDefault();
    };

    this.handleColorPick = color => {
      const {
        onColorPicker
      } = this.props;
      this.setState({
        currentColor: color,
        currentActive: false
      });

      if (onColorPicker) {
        onColorPicker(color, true);
      }
    };

    this.handleCustomColor = (color, isAfter) => {
      const {
        onColorPicker
      } = this.props; // 设置 custom color 后立即应用，但 colorPicker 不收起

      this.setState({
        currentColor: color
      });

      if (onColorPicker) {
        onColorPicker(color, isAfter);
      }
    };

    this.handleCustomColorPick = color => {
      this.handleCustomColor(color, false);
    };

    this.handleCustomColorAfterPick = color => {
      this.handleCustomColor(color, true);
    };

    this.handleClickLeft = () => {
      const {
        onClickLeft,
        onColorPicker
      } = this.props;
      const {
        currentColor
      } = this.state;

      if (onClickLeft) {
        onClickLeft(currentColor);
      } else {
        onColorPicker(currentColor, true);
      }
    };

    this.handleActive = active => {
      this.setState({
        currentActive: active
      });
    };

    this.getColorPalette = () => {
      const {
        color,
        automaticColor,
        clearColor,
        picker,
        locale,
        btnType,
        showRecentColors,
        showAutomatic,
        colorBlockText,
        customColorPalette,
        customColorBlockTextColor,
        showGradient = false,
        showToggleSelect = false,
        doubleGapRowIndex = showGradient ? 1 : 0,
        getColorPanelMode,
        onSelectValueChange
      } = this.props;
      const {
        currentColor
      } = this.state;
      const customText = btnType === exports.EColorPickerIcon.font ? /*#__PURE__*/_createElement$1S(weUtil.TranslateComp, {
        locale: locale,
        textKey: 'we_toolbar_color_picker_default'
      }) : /*#__PURE__*/_createElement$1S(weUtil.TranslateComp, {
        locale: locale,
        textKey: 'we_toolbar_color_picker_no_color'
      });
      return /*#__PURE__*/_createElement$1S(ColorPaletteWrapper, {
        onClick: this.handlePaletteClick
      }, /*#__PURE__*/_createElement$1S(ColorPalette, {
        color: color || currentColor,
        onPick: this.handleColorPick,
        onCustomColorPick: this.handleCustomColorPick,
        onCustomColorAfterPick: this.handleCustomColorAfterPick,
        automaticColor: automaticColor,
        clearColor: clearColor,
        picker: picker,
        locale: locale,
        showRecentColors: showRecentColors,
        quickSetText: customText,
        showAutomatic: showAutomatic,
        colorBlockText: colorBlockText,
        customColorBlockTextColor: customColorBlockTextColor,
        customColorPalette: customColorPalette,
        showGradient: showGradient,
        showToggleSelect: showToggleSelect,
        doubleGapRowIndex: doubleGapRowIndex,
        getColorPanelMode: getColorPanelMode,
        onSelectValueChange: onSelectValueChange
      }));
    };

    this.state = {
      currentColor: props.color || props.defaultColor || DEFAULT_COLOR$1,
      currentActive: props.defaultActive || false
    };
  }

  renderCustomTrigger() {
    const {
      children,
      title
    } = this.props;
    const {
      currentActive
    } = this.state;
    return /*#__PURE__*/_createElement$1S(weDesign.Dropdown, {
      visible: currentActive,
      onVisibleChange: this.handleActive,
      overlay: currentActive ? this.getColorPalette() : null,
      title: title
    }, children);
  }

  render() {
    const {
      currentColor,
      currentActive
    } = this.state;
    const {
      btnType,
      btnIcon,
      color,
      children,
      title,
      disabled,
      size,
      active: activeLeft
    } = this.props; // 如果填充部分表现为白色（传入空字符串，白色或透明），则填充的外围边界线需有颜色

    const whiteFilling = !currentColor || isWhite(currentColor) || isTransparent(currentColor);
    const pathColors = disabled ? undefined : [!whiteFilling ? currentColor : 'white', !whiteFilling ? 'transparent' : ICON_DEFAULT_COLOR];
    const btnTypeList = {
      [exports.EColorPickerIcon.font]: /*#__PURE__*/_createElement$1S(FontColorIcon, {
        pathColors: pathColors,
        color: currentColor
      }),
      [exports.EColorPickerIcon.background]: /*#__PURE__*/_createElement$1S(weDesign.ToolbarCellFillColorNormal, {
        pathColors: pathColors
      }),
      [exports.EColorPickerIcon.backgroundfont]: /*#__PURE__*/_createElement$1S(weDesign.ToolbarPenNormal, {
        pathColors: pathColors
      }),
      [exports.EColorPickerIcon.backgroundsheet]: /*#__PURE__*/_createElement$1S(weDesign.ToolbarCellFillColorNormal, {
        pathColors: pathColors
      })
    };
    return children ? this.renderCustomTrigger() : /*#__PURE__*/_createElement$1S(SplitButton, _extends__default['default']({
      overlay: currentActive ? this.getColorPalette() : /*#__PURE__*/_createElement$1S(React__default['default'].Fragment, null),
      onClickLeft: this.handleClickLeft,
      onActiveChange: this.handleActive,
      disabled: disabled,
      testid: `ColorPicker-${btnType}`,
      title: title,
      size: size,
      icon: /*#__PURE__*/_createElement$1S(SplitButtonWrapper, null, btnType ? btnTypeList[btnType] : /*#__PURE__*/_createElement$1S(React__default['default'].Fragment, null, btnIcon, /*#__PURE__*/_createElement$1S(FillColorArea, {
        color: color || currentColor
      })))
    }, this.props, {
      active: currentActive,
      activeLeft: activeLeft
    }));
  }

}

var _ToolbarIncreaseInden$1;
const _createElement$1R = /*#__PURE__*/React__default['default'].createElement;
const IndentButton = props => {
  const {
    disabled,
    onSelect,
    onClick,
    title,
    titles,
    locale,
    size,
    active: activeLeft,
    icon,
    ...restProps
  } = props;
  const [active, setActive] = React.useState(false);
  const t = weUtil.useTranslate(locale);
  const options = [{
    title: t('we_toolbar_increase_indent'),
    Icon: weDesign.ToolbarIncreaseIndentNormal,
    value: 'increase'
  }, {
    title: t('we_toolbar_reduce_indent'),
    Icon: weDesign.ToolbarReduceIndentNormal,
    value: 'decrease'
  }];
  const handleClickOption = React.useCallback(e => {
    if (onSelect) onSelect(e, options.find(o => o.value === e));
  }, [onSelect, options]);
  const handleClickLeft = React.useCallback(() => {
    if (onClick) onClick();
  }, [onClick]);
  const getOverlay = React.useMemo(() => /*#__PURE__*/_createElement$1R(weDesign.Menu, {
    onClick: value => {
      if (value === 'increase' || value === 'decrease') handleClickOption(value);
    }
  }, options.map(item => /*#__PURE__*/_createElement$1R(weDesign.MenuItem, {
    menuKey: item.value,
    icon: /*#__PURE__*/_createElement$1R(item.Icon, null),
    testid: `option-${item.value}`
  }, item.title))), [options, handleClickOption, titles]);
  return /*#__PURE__*/_createElement$1R(SplitButton, _extends__default['default']({
    overlay: getOverlay,
    onActiveChange: setActive,
    activeLeft: activeLeft,
    disabled: disabled,
    testid: "IndentButton",
    title: title,
    size: size,
    icon: icon || _ToolbarIncreaseInden$1 || (_ToolbarIncreaseInden$1 = /*#__PURE__*/_createElement$1R(weDesign.ToolbarIncreaseIndentNormal, null))
  }, restProps, {
    onClickLeft: handleClickLeft,
    active: active
  }));
};
IndentButton.defaultProps = {
  titles: {}
};

var _ToolbarUnorderListNo, _ToolbarOrderListNorm;
const _createElement$1Q = /*#__PURE__*/React__default['default'].createElement;
const DEFAULT_BULLET_LIST_ARRAY = ['SCIR_ECIR_SREC', 'SFDI_SRIG_SREC', 'EREC_EREC_EREC', 'SARR_SDIO_SCIR', 'SSTA_ECIR_SREC', 'SRIG_ECIR_SREC'];
const DEFAULT_STICKER_LIST_ARRAY = ['VACATION_TEA_MILKTEA', 'RIGHT_NAIL_LOVE', 'FIRE_ROCKET_NAIL'];
const DEFAULT_NUMBER_LIST_ARRAY = ['DEC_LEN_LROM_P', 'DEC_LEN_LROM_H', 'DEC_DEC_DEC_P', 'UEN_LEN_LROM_P', 'UROM_UEN_DEC_P', 'DDEC_LEN_LROM_P', 'ZH_DEC_LEN_D', 'ZH_DEC_LEN_A', 'ZH_ZH_DEC_D'];
const LIST_STYLE_MAP = {
  SCIR_ECIR_SREC: 'https://img.alicdn.com/tfs/TB1mWdYbAcx_u4jSZFlXXXnUFXa-78-78.svg',
  SFDI_SRIG_SREC: 'https://img.alicdn.com/tfs/TB1hpepOpP7gK0jSZFjXXc5aXXa-78-78.svg',
  EREC_EREC_EREC: 'https://img.alicdn.com/tfs/TB1cJR4czMZ7e4jSZFOXXX7epXa-78-78.svg',
  SARR_SDIO_SCIR: 'https://img.alicdn.com/tfs/TB1aaWcOEY1gK0jSZFMXXaWcVXa-78-78.svg',
  SSTA_ECIR_SREC: 'https://img.alicdn.com/tfs/TB1VoX8OxD1gK0jSZFsXXbldVXa-78-78.svg',
  SRIG_ECIR_SREC: 'https://img.alicdn.com/tfs/TB1cqp4OAL0gK0jSZFtXXXQCXXa-78-78.svg',
  VACATION_TEA_MILKTEA: 'https://img.alicdn.com/imgextra/i4/O1CN01iGy3OC23bXk0A5V99_!!6000000007274-2-tps-240-240.png',
  RIGHT_NAIL_LOVE: 'https://img.alicdn.com/imgextra/i4/O1CN01rYMRza1OM46kvi2Yx_!!6000000001690-2-tps-240-240.png',
  FIRE_ROCKET_NAIL: 'https://img.alicdn.com/imgextra/i3/O1CN01QfDOFq1R49SyPKcpW_!!6000000002057-2-tps-240-240.png',
  DEC_LEN_LROM_P: 'https://img.alicdn.com/tfs/TB19lt9OEz1gK0jSZLeXXb9kVXa-78-78.svg',
  DEC_LEN_LROM_H: 'https://img.alicdn.com/tfs/TB18HydOAL0gK0jSZFAXXcA9pXa-78-78.svg',
  DEC_DEC_DEC_P: 'https://img.alicdn.com/tfs/TB1gHycOqL7gK0jSZFBXXXZZpXa-78-78.svg',
  UEN_LEN_LROM_P: 'https://img.alicdn.com/tfs/TB1VaOnOBr0gK0jSZFnXXbRRXXa-78-78.svg',
  UROM_UEN_DEC_P: 'https://img.alicdn.com/tfs/TB1xcqhOAY2gK0jSZFgXXc5OFXa-78-78.svg',
  DDEC_LEN_LROM_P: 'https://img.alicdn.com/tfs/TB1yjive8Bh1e4jSZFhXXcC9VXa-78-78.svg',
  ZH_DEC_LEN_D: 'https://img.alicdn.com/tfs/TB1bFQZ0aL7gK0jSZFBXXXZZpXa-82-82.svg',
  ZH_DEC_LEN_A: 'https://img.alicdn.com/tfs/TB11.iDj4vbeK8jSZPfXXariXXa-82-82.svg',
  ZH_ZH_DEC_D: 'https://img.alicdn.com/imgextra/i4/O1CN01XYORsY1OjQIxXuZxz_!!6000000001741-55-tps-82-82.svg'
};
const OverlayContent = /*#__PURE__*/styled__default['default'].div(["width:272px;display:flex;flex-wrap:wrap;justify-content:flex-start;padding:4px;"]);
const ListStyleItemWrap = /*#__PURE__*/styled__default['default'].div(["user-select:none;"]);
const ListStyleItem = weDesign.withTheme(styled__default['default'].img(["width:80px;height:80px;margin:4px;border:1px solid rgba(17,31,44,0.12);border-radius:2px;cursor:pointer;image-rendering:pixelated;&:hover{border:1px solid ", ";}&.actived{border:2px solid ", ";}"], ({
  theme
}) => theme.ui.primaryColor, ({
  theme
}) => theme.ui.primaryColor));

function getListRole(mode, key) {
  const prefix = mode === 'ul' ? 'listUnordered' : 'listOrdered';
  return `${prefix}_${key}`;
}

const ListSet = props => {
  const {
    mode = 'ul',
    defaultListStyle,
    listStyle,
    onChange,
    onClick,
    disabled,
    title,
    active,
    size,
    enableSticker
  } = props;
  const listStyleArray = React.useMemo(() => {
    if (mode !== 'ul') {
      return DEFAULT_NUMBER_LIST_ARRAY;
    } else {
      return enableSticker ? DEFAULT_BULLET_LIST_ARRAY.concat(DEFAULT_STICKER_LIST_ARRAY) : DEFAULT_BULLET_LIST_ARRAY;
    }
  }, [mode]);
  const [value, setValue] = weDesign.useControlledValue(listStyle, defaultListStyle || listStyleArray[0]);
  const [overlayVisible, setOverlayVisible] = React.useState(false);
  const handleChange = React.useCallback(e => {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
    setOverlayVisible(false);
  }, [onChange, setValue]);
  const handleVisibleChange = React.useCallback(visible => {
    setOverlayVisible(visible);
  }, []);
  const handleClickLeft = React.useCallback(() => {
    if (onClick) {
      onClick(value);
    }
  }, [onClick, value]);
  const getOverlay = React.useMemo(() => {
    return /*#__PURE__*/_createElement$1Q(OverlayContent, {
      "data-testid": "overlay-ListSet"
    }, listStyleArray.map(item => {
      return /*#__PURE__*/_createElement$1Q(ListStyleItemWrap, {
        key: item,
        onClick: () => handleChange(item),
        "data-role": getListRole(mode, item),
        role: "button"
      }, /*#__PURE__*/_createElement$1Q(ListStyleItem, {
        src: LIST_STYLE_MAP[item],
        alt: "list-style-item",
        className: classnames({
          actived: item === value
        }),
        "data-testid": `option-${item}`
      }));
    }));
  }, [value]);
  const renderTriggerIcon = React.useMemo(() => mode === 'ul' ? _ToolbarUnorderListNo || (_ToolbarUnorderListNo = /*#__PURE__*/_createElement$1Q(weDesign.ToolbarUnorderListNormal, null)) : _ToolbarOrderListNorm || (_ToolbarOrderListNorm = /*#__PURE__*/_createElement$1Q(weDesign.ToolbarOrderListNormal, null)), [mode]);
  return /*#__PURE__*/_createElement$1Q(SplitButton, _extends__default['default']({
    overlay: getOverlay,
    onClickLeft: handleClickLeft,
    disabled: disabled,
    onActiveChange: handleVisibleChange,
    testid: `ListSet_${mode}`,
    title: title || mode === 'ol' ? 'we_toolbar_order_list' : 'we_toolbar_unorder_list',
    size: size,
    icon: renderTriggerIcon,
    tooltip: mode === 'ol' ? 'we_toolbar_order_list' : 'we_toolbar_unorder_list'
  }, props, {
    active: overlayVisible,
    activeLeft: active
  }));
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
const Ellipsis = /*#__PURE__*/styled.css(["overflow:hidden;word-wrap:normal;white-space:nowrap;text-overflow:ellipsis;"]);

var _ToolbarMergeCellNorm, _ToolbarSplitCellNorm, _ToolbarMergeCellNorm2, _ToolbarSplitCellNorm2;
const _createElement$1P = /*#__PURE__*/React__default['default'].createElement;
const TriggerWrap$6 = /*#__PURE__*/styled__default['default'].div(["display:flex;align-items:center;.title{width:70px;margin-left:6px;", ";}"], Ellipsis);
const MergeCellButton = props => {
  const {
    onSelect,
    onClick,
    locale,
    defaultStatus = 'unmerged',
    title,
    titles = {},
    disabled,
    active: leftActive,
    size,
    ...restProps
  } = props;
  const [overlayActive, setOverlayActive] = React.useState(false);
  const [status, setStatus] = weDesign.useControlledValue(props.status, defaultStatus);
  const t = weUtil.useTranslate(locale);

  const toggle = curr => curr === 'unmerged' ? 'merged' : 'unmerged';

  const handleClickMerged = () => {
    if (onSelect) {
      onSelect('merged');
    }

    setStatus(toggle);
    setOverlayActive(false);
  };

  const handleClickUnMerged = () => {
    if (onSelect) {
      onSelect('unmerged');
    }

    setStatus('unmerged');
    setOverlayActive(false);
  };

  const options = [{
    title: t('we_toolbar_merge_cell'),
    Icon: weDesign.ToolbarMergeCellNormal,
    value: 'merged',
    handleClick: handleClickMerged
  }, {
    title: t('we_toolbar_split_cell'),
    Icon: weDesign.ToolbarSplitCellNormal,
    value: 'unmerged',
    handleClick: handleClickUnMerged
  }];
  const handleClickLeft = React.useCallback(() => {
    if (onClick) {
      onClick(status);
    }

    setStatus(curr => curr === 'merged' ? 'unmerged' : 'merged');
  }, [onClick, status, setStatus]);
  const isMerged = status === 'merged';
  const getOverlay = React.useMemo(() => {
    return /*#__PURE__*/_createElement$1P(weDesign.Menu, {
      showSelect: true,
      minWidth: 120
    }, options.map((item, index) => /*#__PURE__*/_createElement$1P(weDesign.MenuItem, {
      key: index,
      icon: status === 'unmerged' ? _ToolbarMergeCellNorm || (_ToolbarMergeCellNorm = /*#__PURE__*/_createElement$1P(weDesign.ToolbarMergeCellNormal, null)) : _ToolbarSplitCellNorm || (_ToolbarSplitCellNorm = /*#__PURE__*/_createElement$1P(weDesign.ToolbarSplitCellNormal, null)),
      selected: item.value === 'merged' && isMerged,
      disabled: status === 'unmerged' && item.value === 'unmerged',
      menuKey: item.value,
      onClick: item.handleClick,
      testid: `option-${item.value}`
    }, item.title)));
  }, [options, status, isMerged, titles]);
  const rendertTitle = React.useMemo(() => status === 'unmerged' ? t('we_toolbar_merge_cell') : t('we_toolbar_split_cell'), [status]);
  const renderTriggerIcon = React.useMemo(() => /*#__PURE__*/_createElement$1P(TriggerWrap$6, {
    className: "we-ui-merge-cell-button-trigger"
  }, status === 'unmerged' ? _ToolbarMergeCellNorm2 || (_ToolbarMergeCellNorm2 = /*#__PURE__*/_createElement$1P(weDesign.ToolbarMergeCellNormal, null)) : _ToolbarSplitCellNorm2 || (_ToolbarSplitCellNorm2 = /*#__PURE__*/_createElement$1P(weDesign.ToolbarSplitCellNormal, null))), [status]);
  return /*#__PURE__*/_createElement$1P(SplitButton, _extends__default['default']({}, restProps, {
    overlay: getOverlay,
    onClickLeft: handleClickLeft,
    active: overlayActive,
    activeLeft: leftActive,
    onActiveChange: setOverlayActive,
    testid: "MergeCellButton",
    title: rendertTitle,
    size: size,
    disabled: disabled,
    icon: renderTriggerIcon
  }));
};

var _ToolbarSuperscriptNo$1, _ToolbarSubscriptNorm$1;
const _createElement$1O = /*#__PURE__*/React__default['default'].createElement;

const ScriptSelect = props => {
  const {
    onClick,
    title,
    disabled,
    size,
    locale,
    active: activeLeft
  } = props;
  const [value, setValue] = weDesign.useControlledValue(props.value, props.defaultValue);
  const [active, setActive] = React.useState(false);
  const t = weUtil.useTranslate(locale);
  /**
   * 点击上下标操作
   */

  const handleClickLeft = React.useCallback(event => {
    if (onClick) {
      onClick(value, event);
    }
  }, [value, onClick]);
  const isSuper = value === 'super';
  const superText = t('we_toolbar_superscript'); // 上标文案

  const subText = t('we_toolbar_subscript'); // 下标文案

  const handleChooseScript = React.useCallback(script => {
    if (onClick) {
      onClick(script);
    }

    setValue(script);
  }, [onClick, setValue]);
  const handleChooseSuper = React.useCallback(() => {
    if (value !== 'super') {
      handleChooseScript('super');
      setActive(false);
    }
  }, [value, handleChooseScript]);
  const handleChooseSub = React.useCallback(() => {
    if (value !== 'sub') {
      handleChooseScript('sub');
      setActive(false);
    }
  }, [value, handleChooseScript]);
  const chooses = [{
    title: superText,
    value: 'super',
    Icon: weDesign.ToolbarSuperscriptNormal,
    onClick: handleChooseSuper
  }, {
    title: subText,
    value: 'sub',
    Icon: weDesign.ToolbarSubscriptNormal,
    onClick: handleChooseSub
  }];
  /**
   * 下拉选项
   */

  const DropContent = React.useMemo(() => /*#__PURE__*/_createElement$1O(weDesign.Menu, {
    showSelect: true,
    style: {
      minWidth: 'auto'
    },
    minWidth: 100
  }, chooses.map(item => /*#__PURE__*/_createElement$1O(weDesign.MenuItem, {
    testid: `option-${item.value}`,
    menuKey: `option-${item.value}`,
    icon: /*#__PURE__*/_createElement$1O(item.Icon, {
      className: "script-icon"
    }),
    selected: value === item.value,
    onClick: item.onClick,
    style: {
      minWidth: 'auto'
    }
  }, /*#__PURE__*/_createElement$1O("div", null, item.title)))), [value]);
  const iconMeno = React.useMemo(() => isSuper ? _ToolbarSuperscriptNo$1 || (_ToolbarSuperscriptNo$1 = /*#__PURE__*/_createElement$1O(weDesign.ToolbarSuperscriptNormal, null)) : _ToolbarSubscriptNorm$1 || (_ToolbarSubscriptNorm$1 = /*#__PURE__*/_createElement$1O(weDesign.ToolbarSubscriptNormal, null)), [isSuper]);
  return /*#__PURE__*/_createElement$1O(SplitButton, _extends__default['default']({
    overlay: DropContent,
    onClickLeft: handleClickLeft,
    onActiveChange: setActive,
    size: size,
    disabled: disabled,
    title: title || (isSuper ? superText : subText),
    icon: iconMeno,
    testid: "ScriptSelect"
  }, props, {
    active: active,
    activeLeft: activeLeft
  }));
};

ScriptSelect.defaultProps = {
  defaultValue: 'super',
  titles: {}
};

var _ToolbarFilterNormal$1;
const _createElement$1N = /*#__PURE__*/React__default['default'].createElement;
const FilterButton = props => {
  const {
    disabled,
    onClick,
    title,
    titles,
    locale,
    size,
    active: activeLeft,
    overlay,
    ...restProps
  } = props;
  const [active, setActive] = React.useState(false);
  const t = weUtil.useTranslate(locale);
  const handleClickLeft = React.useCallback(() => {
    if (onClick) onClick();
  }, [onClick]);
  const hideOverlay = React.useCallback(() => setActive(false), []);
  return /*#__PURE__*/_createElement$1N(SplitButton, _extends__default['default']({
    onClickLeft: handleClickLeft,
    onActiveChange: setActive,
    disabled: disabled,
    testid: "FilterButton",
    title: title || t('we_toolbar_filter_button'),
    size: size,
    icon: _ToolbarFilterNormal$1 || (_ToolbarFilterNormal$1 = /*#__PURE__*/_createElement$1N(weDesign.ToolbarFilterNormal, null)),
    overlay: /*#__PURE__*/_createElement$1N("div", {
      onClick: hideOverlay
    }, overlay)
  }, restProps, {
    activeLeft: activeLeft,
    active: active
  }));
};
FilterButton.defaultProps = {
  titles: {}
};

const Divider = /*#__PURE__*/styled.css(["content:'';display:block;position:absolute;background-color:rgba(17,31,44,0.08);height:1px;width:200px;"]);
const BorderPickerWrap = /*#__PURE__*/styled__default['default'].div(["padding:4px 0;"]);
const GroupWrap = /*#__PURE__*/styled__default['default'].div(["display:flex;flex-direction:row;justify-content:space-between;align-items:center;position:relative;height:36px;margin:0 8px;padding-top:4px;"]);
const TextSpan = /*#__PURE__*/styled__default['default'].div(["height:24px;line-height:24px;font-size:12px;padding-left:4px;flex:0 0 auto;display:inline-block;"]);
const PaletteBox = /*#__PURE__*/styled__default['default'].div(["width:fit-content;"]);
const LineTypeSelectsWrap = /*#__PURE__*/styled__default['default'].div(["padding:12px;margin-top:-10px;position:relative;&:before{", " top:0;left:20px;}"], Divider);
const SelectLeftWrap = /*#__PURE__*/styled__default['default'].div(["display:flex;align-items:center;"]);

var _LinethicknessNormal, _LinetypeNormal;
const _createElement$1M = /*#__PURE__*/React__default['default'].createElement;

const BorderPickerOverlay = props => {
  const {
    locale,
    color,
    onColorPick,
    showAutomatic,
    automaticColor,
    clearColor,
    picker,
    lineSizeMap,
    lineSize,
    onLineSizeChange,
    defaultLineSize,
    sizeSelectVisible,
    onSizeSelectVisibleChange,
    lineStyleMap,
    lineStyle,
    defaultLineStyle,
    onLineStyleChange,
    styleSelectVisible,
    onStyleSelectVisibleChange,
    showToggleSelect,
    getColorPanelMode,
    showGradient,
    onSelectValueChange,
    doubleGapRowIndex
  } = props;
  const t = weUtil.useTranslate(locale);
  const handleColorPick = React.useCallback(pickedColor => {
    if (onColorPick) onColorPick(pickedColor);
  }, [onColorPick]);
  const handleLineSizeChange = React.useCallback(value => {
    if (onLineSizeChange) onLineSizeChange(value);
  }, [onLineSizeChange]);
  const handleLineStyleChange = React.useCallback(value => {
    if (onLineStyleChange) onLineStyleChange(value);
  }, [onLineStyleChange]);
  return /*#__PURE__*/_createElement$1M(BorderPickerWrap, null, /*#__PURE__*/_createElement$1M(PaletteBox, null, /*#__PURE__*/_createElement$1M(ColorPalette, {
    color: color,
    onPick: handleColorPick,
    quickSetText: t('we_toolbar_color_picker_no_color'),
    showRecentColors: true,
    showAutomatic: showAutomatic,
    automaticColor: automaticColor,
    clearColor: clearColor,
    picker: picker,
    showToggleSelect: showToggleSelect,
    getColorPanelMode: getColorPanelMode,
    showGradient: showGradient,
    onSelectValueChange: onSelectValueChange,
    doubleGapRowIndex: doubleGapRowIndex
  })), /*#__PURE__*/_createElement$1M(LineTypeSelectsWrap, null, /*#__PURE__*/_createElement$1M(GroupWrap, null, /*#__PURE__*/_createElement$1M(SelectLeftWrap, null, _LinethicknessNormal || (_LinethicknessNormal = /*#__PURE__*/_createElement$1M(weDesign.LinethicknessNormal, null)), /*#__PURE__*/_createElement$1M(TextSpan, null, t('we_toolbar_border_set_line_thickness'))), /*#__PURE__*/_createElement$1M(weDesign.CommonLineSelect, {
    lineTypeArray: lineSizeMap,
    lineType: lineSize,
    length: 35,
    color: "#000000",
    onLineTypeChange: handleLineSizeChange,
    defaultLineType: defaultLineSize,
    optionText: p => `${p.size}pt`,
    visible: sizeSelectVisible,
    onVisibleChange: onSizeSelectVisibleChange
  })), /*#__PURE__*/_createElement$1M(GroupWrap, null, /*#__PURE__*/_createElement$1M(SelectLeftWrap, null, _LinetypeNormal || (_LinetypeNormal = /*#__PURE__*/_createElement$1M(weDesign.LinetypeNormal, null)), /*#__PURE__*/_createElement$1M(TextSpan, null, t('we_toolbar_border_set_line_type'))), /*#__PURE__*/_createElement$1M(weDesign.CommonLineSelect, {
    lineTypeArray: lineStyleMap,
    lineType: lineStyle,
    defaultLineType: defaultLineStyle,
    length: 60,
    color: "#000000",
    onLineTypeChange: handleLineStyleChange,
    visible: styleSelectVisible,
    onVisibleChange: onStyleSelectVisibleChange
  }))));
};

/* eslint-disable max-lines-per-function */
const _createElement$1L = /*#__PURE__*/React__default['default'].createElement;
const DEFAULT_COLOR = 'inherit';
const BorderPicker = props => {
  const {
    color,
    onColorPick,
    lineSize,
    defaultLineSize,
    lineSizeMap,
    onLineSizeChange,
    lineStyle,
    defaultLineStyle,
    lineStyleMap,
    onLineStyleChange,
    locale,
    disabled,
    title,
    tooltip,
    onClick,
    size,
    showAutomatic,
    automaticColor,
    clearColor,
    picker,
    testid,
    onActiveChange,
    getContainer,
    role,
    showToggleSelect,
    onSelectValueChange,
    showGradient,
    getColorPanelMode,
    doubleGapRowIndex
  } = props;
  const [dropdownVisible, setDropdownVisible] = React.useState(false);
  const [sizeSelectVisible, setSizeSelectVisible] = React.useState(false);
  const [styleSelectVisible, setStyleSelectVisible] = React.useState(false);
  const handleDropdownVisible = React.useCallback(e => {
    if (!e && (sizeSelectVisible || styleSelectVisible)) {
      return;
    }

    onActiveChange && onActiveChange(e);
    setDropdownVisible(e);
  }, [setDropdownVisible, onActiveChange, sizeSelectVisible, styleSelectVisible]);
  const handleClick = React.useCallback(() => {
    if (onClick) {
      onClick();
    }
  }, [onClick]);
  const pathColors = React.useMemo(() => [// 当选中颜色为白色时，选中边框的外边缘为黑色，否则选中边框外边缘与内部颜色一致
  !color ? DEFAULT_COLOR : color, DEFAULT_COLOR], [color]);
  const visible = dropdownVisible || sizeSelectVisible || styleSelectVisible;
  const handleLineSizeChange = React__default['default'].useCallback(change => {
    onLineSizeChange && onLineSizeChange(change);
  }, [onLineSizeChange]);
  const handleLineStyleChange = React__default['default'].useCallback(change => {
    onLineStyleChange && onLineStyleChange(change);
  }, [onLineStyleChange]);
  return /*#__PURE__*/_createElement$1L(SplitButton, {
    overlay: /*#__PURE__*/_createElement$1L(BorderPickerOverlay, {
      color: color,
      onColorPick: onColorPick,
      showAutomatic: showAutomatic,
      automaticColor: automaticColor,
      clearColor: clearColor,
      picker: picker,
      lineSizeMap: lineSizeMap,
      lineSize: lineSize,
      defaultLineSize: defaultLineSize,
      onLineSizeChange: handleLineSizeChange,
      sizeSelectVisible: sizeSelectVisible,
      onSizeSelectVisibleChange: setSizeSelectVisible,
      lineStyleMap: lineStyleMap,
      lineStyle: lineStyle,
      defaultLineStyle: defaultLineStyle,
      onLineStyleChange: handleLineStyleChange,
      styleSelectVisible: styleSelectVisible,
      onStyleSelectVisibleChange: setStyleSelectVisible,
      locale: locale,
      showToggleSelect: showToggleSelect,
      getColorPanelMode: getColorPanelMode,
      showGradient: showGradient,
      onSelectValueChange: onSelectValueChange,
      doubleGapRowIndex: doubleGapRowIndex
    }),
    active: visible,
    onClickLeft: handleClick,
    onActiveChange: handleDropdownVisible,
    disabled: disabled,
    testid: testid || 'BorderPicker',
    title: title,
    tooltip: tooltip,
    size: size,
    icon: /*#__PURE__*/_createElement$1L(weIcon.StrokeNormal, {
      pathColors: pathColors
    }),
    getContainer: getContainer,
    role: role
  });
};

const useControlledValue = (propsValue, propsDefaultValue) => {
  // 存进state中
  const [value, setValue] = React.useState(propsValue === undefined ? propsDefaultValue : propsValue); // 如果是value不是undefined，说明受控

  const noop = React.useCallback(() => {}, []);

  if (propsValue !== undefined) {
    return [propsValue, noop];
  }

  return [value, setValue];
};

const TextWarp$3 = weDesign.withTheme(styled__default['default'].div(["margin-left:", ";cursor:", ";", ""], ({
  theme
}) => theme.ui.marginMini, ({
  disabled
}) => disabled ? 'not-allowed' : 'default', ({
  theme,
  active,
  disabled
}) => !disabled && styled.css([":hover ~ .select-toolbar{background-color:", ";}:active ~ .select-toolbar{background-color:", ";}"], active ? theme.ui.toolbarButtonClick : theme.ui.toolbarButtonHover, disabled ? active ? theme.ui.toolbarButtonSelect : theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonClick)));
const ButtonWrap$4 = weDesign.withTheme(styled__default['default'].div(["display:flex;flex-direction:", ";.select-toolbar{height:auto;padding:0;display:flex;margin:auto;background-color:", ";cursor:", ";", " &.focused{background-color:#fff;&:hover{background-color:#fff;}}}", " .select_trigger_wrap{width:100%;}.select_left_wrap{padding:", ";padding-right:0;font-size:", ";color:", ";> div{font-size:", ";margin-right:0;}}.select_left_wrap label{padding:0;height:20px;min-width:", ";}.select_left_wrap label input{height:20px;}.select_right_wrap{width:16px;display:flex;justify-content:center;}.select_right_wrap .weicon{font-size:8px;margin:0;transform:rotate(0deg) scale(1);}.select_right_wrap .weicon.opened{font-size:8px;margin:0;transform:rotate(180deg) scale(1);}.select-toolbar:hover{", "}.select-toolbar:active{", "}"], ({
  size
}) => size === TOOL_SIZE.LARGE ? 'column-reverse' : 'row', ({
  bordered,
  theme
}) => bordered ? theme.ui.colorGray1 : theme.ui.toolbarButtonTransparent, ({
  disabled
}) => disabled ? 'not-allowed' : 'default', ({
  active,
  theme,
  disabled
}) => active && `background-color: ${disabled ? theme.ui.toolbarButtonSelectDisable : theme.ui.toolbarButtonSelect};`, ({
  disabled,
  theme,
  active
}) => disabled && styled.css([".select-toolbar.disabled{background-color:", ";}"], active ? theme.ui.toolbarButtonSelectDisable : 'transparent'), ({
  theme,
  size
}) => `${size === TOOL_SIZE.SMALL ? `${theme.ui.paddingMini} ${theme.ui.paddingSmall}` : theme.ui.paddingTiny}`, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  theme
}) => theme.ui.commonActionIconColor, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  mode
}) => mode === 'search' || mode === 'input' ? '35px' : '0', ({
  active,
  theme,
  disabled
}) => !disabled && `background-color:  ${active ? theme.ui.toolbarButtonSelectHover : theme.ui.toolbarButtonHover}; `, ({
  theme,
  disabled
}) => !disabled && `background-color :${theme.ui.toolbarButtonClick}`));

const _createElement$1K = /*#__PURE__*/React__default['default'].createElement;
const TextSelect = /*#__PURE__*/React__default['default'].memo( /*#__PURE__*/React__default['default'].forwardRef((props, ref) => {
  const {
    title,
    showTitle,
    disabled,
    size,
    active,
    disabledTip,
    renderTrigger,
    children,
    value,
    onChange,
    locale,
    mode,
    bordered,
    rules,
    style,
    tooltip,
    shortcutText,
    width,
    testid,
    getContainer,
    role,
    onVisibleChange,
    ...restProps
  } = props;
  const contextLocale = weUtil.useGetContextLocale();
  const t = weUtil.useTranslate(contextLocale);
  const [visible, setVisible] = React.useState(false);
  const {
    el,
    id,
    isHide,
    fineAdaptation,
    groupKey,
    isInOffScreenWrap
  } = useVisibilitySensor(ref, testid);
  const styleProps = {
    size,
    active,
    bordered,
    showTitle,
    mode,
    locale: locale || contextLocale
  };
  const titleNode = React.useMemo(() => {
    return /*#__PURE__*/_createElement$1K("div", null, title && typeof title !== 'string' ? title : t(title));
  }, [t, title]);
  const makeTrigger = React.useCallback(val => /*#__PURE__*/_createElement$1K(React__default['default'].Fragment, null, renderTrigger && renderTrigger(val), ' ', showTitle && size !== TOOL_SIZE.LARGE ? /*#__PURE__*/_createElement$1K(TextWarp$3, styleProps, titleNode) : null), [renderTrigger, title, showTitle]);
  const finalTrigger = mode === 'search' || mode === 'input' ? undefined : makeTrigger;
  const height = size === TOOL_SIZE.SMALL ? 24 : 28; // 解决 父组件 box-sizing 失效问题

  const cssStyle = React.useMemo(() => ({
    width,
    height,
    ...style
  }), [style]);
  let tooltipForButton = t(tooltip);

  if (shortcutText != null) {
    tooltipForButton += ` ${shortcutText}`;
  }

  const openOverLay = React.useCallback(() => setVisible(true), []);
  const ToolbarIconMemo = React.useMemo(() => ({
    size: size || 'medium'
  }), [size]);
  if (isHide) return null;
  return /*#__PURE__*/_createElement$1K(weIcon.ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement$1K(weDesign.Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement$1K(DisableWrap, {
    disabled: disabled,
    className: classnames('text-select-layout')
  }, /*#__PURE__*/_createElement$1K(ButtonWrap$4, _extends__default['default']({
    ref: el,
    "data-id": id,
    "data-mode": mode,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey,
    "data-role": role
  }, styleProps), showTitle && size === TOOL_SIZE.LARGE && /*#__PURE__*/_createElement$1K(TextWarp$3, _extends__default['default']({}, styleProps, {
    onClick: openOverLay
  }), titleNode), /*#__PURE__*/_createElement$1K(weDesign.Select, _extends__default['default']({}, restProps, {
    className: "select-toolbar",
    onChange: onChange,
    value: value,
    mode: mode,
    style: cssStyle,
    bordered: bordered,
    renderTrigger: finalTrigger,
    title: disabled ? disabledTip : tooltipForButton,
    visible: visible,
    rules: rules,
    onVisibleChange: e => {
      onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(e);
      setVisible(e);
    },
    testid: isInOffScreenWrap ? '' : testid,
    showErrorState: false,
    getContainer: getContainer
  }), children)))));
}));
TextSelect.defaultProps = {
  size: 'medium'
};

const _createElement$1J = /*#__PURE__*/React__default['default'].createElement;
const DEFAULT_SIZES = ['12', '14', '16', '18', '20', '24', '30', '36'];
const CHINESE_SIZES = ['初号', '小初', '一号', '小一', '二号', '小二', '三号', '小三', '四号', '小四', '五号', '小五', '六号', '小六', '七号', '八号'];
const CHINESE_SIZES_NUMBERS_MAPPER = ['42', '36', '26', '24', '22', '18', '16', '15', '14', '12', '10.5', '9', '7.5', '6.5', '5.5', '5'];

const ch2num = size => {
  const index = CHINESE_SIZES.indexOf(size);
  return CHINESE_SIZES_NUMBERS_MAPPER[index];
};

const num2ch = size => {
  const index = CHINESE_SIZES_NUMBERS_MAPPER.indexOf(size);
  return CHINESE_SIZES[index] || size;
}; // 增加对于.5的小数正则校验


const isNumberSize = num => /^[0-9]+$|^([0-9]+[.][5])$/.test(num);

const fontSizeRules = [{
  validator: e => {
    const value = Number(isNumberSize(e) ? e : ch2num(e));
    return value >= 5 && value <= 200 && Number.isInteger(value * 2);
  },
  message: 'min step should be 0.5'
}];
const SelectStyled = /*#__PURE__*/styled__default['default'](TextSelect)(["&.select-wrap{font-size:12px;line-height:20px;}"]); // eslint-disable-next-line max-lines-per-function

const FontSizeSelect = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    sizes,
    onChange,
    bordered,
    allowInput,
    disabled,
    title,
    titles,
    supportChinese,
    style = {},
    role,
    ...restProps
  } = props; // 受控的值

  const [valueControlled, setValue] = useControlledValue(props.value, props.defaultValue); // 是否使用中文选项

  const usingChinese = localStorage.getItem('we-ui-using-chinese') === 'true'; // 将值都转化为string

  const value = React.useMemo(() => {
    if (supportChinese && usingChinese) {
      return num2ch(`${valueControlled}`) || '';
    }

    return `${valueControlled}`;
  }, [valueControlled, supportChinese, usingChinese]); // 有没有错误

  const [hasError, setError] = React.useState(false);
  const rules = allowInput ? fontSizeRules : undefined;
  const mode = allowInput ? 'input' : undefined;
  const renderTrigger = allowInput ? undefined : val => /*#__PURE__*/_createElement$1J("div", {
    style: {
      boxSizing: 'border-box',
      minWidth: '35px',
      padding: '0 4px',
      fontSize: '13px',
      fontFamily: 'Arial',
      ...style
    }
  }, val);
  const lastVal = React.useRef(valueControlled);
  /**
   * 自动修复数据
   */
  // eslint-disable-next-line react-hooks/exhaustive-deps

  const autoFixValue = React.useCallback(weDesign.debounce(fixValue => {
    setValue(fixValue);
    setError(false);
  }, 1000), [setValue, setError]);
  React.useEffect(() => () => autoFixValue.cancel(), [autoFixValue]);
  const handleChange = React.useCallback((e, error) => {
    if (error) {
      setError(true);
      autoFixValue(lastVal.current);
    } else {
      const isNumber = isNumberSize(e);
      localStorage.setItem('we-ui-using-chinese', (!isNumber).toString());
      const newValue = Number(isNumber ? e : ch2num(e));

      if (onChange) {
        onChange(newValue);
      }

      lastVal.current = newValue;
      setValue(newValue);
    }
  }, [onChange, setValue, autoFixValue]);
  const options = React.useMemo(() => {
    const fontSizesArray = [...(supportChinese ? CHINESE_SIZES : []), ...(sizes || DEFAULT_SIZES)].map(size => `${size}`);
    return fontSizesArray.map(size => /*#__PURE__*/_createElement$1J(weDesign.SelectOption, {
      value: size,
      key: `${size}`,
      testid: size,
      title: titles[size]
    }, /*#__PURE__*/_createElement$1J("span", null, size)));
  }, [sizes, titles, supportChinese]);
  return /*#__PURE__*/_createElement$1J(SelectStyled, _extends__default['default']({
    value: value,
    onChange: handleChange,
    bordered: bordered,
    mode: mode,
    rules: rules,
    disabled: disabled,
    testid: "FontSizeSelect",
    title: title,
    errored: hasError,
    renderTrigger: renderTrigger
  }, restProps, {
    "data-role": role || 'font_size_select'
  }), options);
});
FontSizeSelect.defaultProps = {
  defaultValue: 12,
  titles: {}
};

const TriggerWrap$5 = weDesign.withTheme(styled__default['default'].div(["", " margin-right:4px;font-size:", ";color:", ";line-height:20px;"], Ellipsis, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  theme
}) => theme.ui.commonActionIconColor));
const OptionWrap$8 = weDesign.withTheme(styled__default['default'].div(["color:", ";"], ({
  theme,
  disabled
}) => disabled ? theme.ui.disabledColor : theme.ui.textColor));

const getFontFamily = t => {
  return [{
    title: t('we_toolbar_font_family_default'),
    value: 'default',
    installable: true
  }, {
    title: 'Calibri',
    value: 'Calibri',
    installable: false
  }, {
    title: 'Arial',
    value: 'Arial',
    installable: false
  }, {
    title: 'Verdana',
    value: 'Verdana',
    installable: false
  }, {
    title: 'Cambria',
    value: 'Cambria',
    installable: false
  }, {
    title: 'Georgia',
    value: 'Georgia',
    installable: false
  }, {
    title: 'Helvetica',
    value: 'Helvetica',
    installable: false
  }, {
    title: 'Centaur',
    value: 'Centaur',
    installable: false
  }, {
    title: 'Garamond',
    value: 'Garamond',
    installable: false
  }, {
    title: 'Caslon',
    value: 'Caslon',
    installable: false
  }, {
    title: 'Times New Roman',
    value: 'Times New Roman',
    installable: false
  }, {
    title: 'Franklin Gothic',
    value: 'Franklin Gothic',
    installable: false
  }, {
    title: 'Syntax',
    value: 'Syntax',
    installable: false
  }, {
    title: 'Comic Sans MS',
    value: 'Comic Sans MS',
    installable: false
  }, {
    title: 'Lucida Sans',
    value: 'Lucida Sans',
    installable: false
  }, {
    title: 'Trebuchet MS',
    value: 'Trebuchet MS',
    installable: false
  }, {
    title: 'Courier New',
    value: 'Courier New',
    installable: false
  }, {
    title: 'Impact',
    value: 'Impact',
    installable: false
  }, {
    title: 'Comfortaa',
    value: 'Comfortaa',
    installable: false
  }, {
    title: 'Lora',
    value: 'Lora',
    installable: false
  }, {
    title: 'Merriweather',
    value: 'Merriweather',
    installable: false
  }, {
    title: 'Montserrat',
    value: 'Montserrat',
    installable: false
  }, {
    title: 'Nunito',
    value: 'Nunito',
    installable: false
  }, {
    title: 'Oswald',
    value: 'Oswald',
    installable: false
  }, {
    title: 'Playfair Display',
    value: 'Playfair Display',
    installable: false
  }, {
    title: 'Roboto',
    value: 'Roboto',
    installable: false
  }, {
    title: 'Spectral',
    value: 'Spectral',
    installable: false
  }, {
    title: 'MS Mincho',
    value: 'MS Mincho',
    installable: false
  }, {
    title: 'MS Gothic',
    value: 'MS Gothic',
    installable: false
  }, {
    title: 'Hiragino',
    value: 'Hiragino',
    installable: false
  }, {
    title: 'Myungjo',
    value: 'Myungjo',
    installable: false
  }, {
    title: 'Gothic',
    value: 'Gothic',
    installable: false
  }, {
    title: t('we_toolbar_font_family_FntimesNewRoman'),
    value: 'SimSun',
    installable: false
  }, // 宋体
  {
    title: t('we_toolbar_font_family_BlackBody'),
    value: 'SimHei',
    installable: false
  }, // 黑体
  {
    title: t('we_toolbar_font_family_MicrosoftIt'),
    value: 'Microsoft YaHei',
    installable: false
  }, // 微软雅黑
  {
    title: t('we_toolbar_font_family_TheSongS'),
    value: 'FangSong',
    installable: false
  }, // 仿宋
  {
    title: t('we_toolbar_font_family_Italics'),
    value: 'KaiTi',
    installable: false
  }, // 楷体
  {
    title: t('we_toolbar_font_family_ChineseFZHei'),
    value: 'FZHei-B01S',
    installable: false
  }, // 方正黑体
  {
    title: t('we_toolbar_font_family_ChineseFZKai'),
    value: 'FZKai-Z03S',
    installable: false
  }, // 方正楷体
  {
    title: t('we_toolbar_font_family_ChineseFZFangSong'),
    value: 'FZFangSong-Z02S',
    installable: false
  }, // 方正仿宋
  {
    title: t('we_toolbar_font_family_LantingheiSC'),
    value: 'Lantinghei SC',
    installable: false
  }, // 方正兰亭黑 - 简
  {
    title: t('we_toolbar_font_family_STHeiti'),
    value: 'STHeiti',
    installable: false
  }, // 华文黑体
  {
    title: t('we_toolbar_font_family_ChineseItalics'),
    value: 'STKaiti',
    installable: false
  }, // 华文楷体
  {
    title: t('we_toolbar_font_family_ChineseFntimesNewRoman'),
    value: 'STSong',
    installable: false
  }, // 华文宋体
  {
    title: t('we_toolbar_font_family_ChineseTheSongS'),
    value: 'STFangsong',
    installable: false
  }, // 华文仿宋
  {
    title: t('we_toolbar_font_family_ItalicsJane'),
    value: 'Kaiti SC',
    installable: false
  }, // 楷体 - 简
  {
    title: t('we_toolbar_font_family_BlackBody_Jane'),
    value: 'Heiti SC',
    installable: false
  }, // 黑体 - 简
  {
    title: t('we_toolbar_font_family_HiraginoSansGB'),
    value: 'Hiragino Sans GB',
    installable: false
  }, // 冬青黑 - 简
  // { title: '等线', value: 'Arial', installable: false },
  {
    title: t('we_toolbar_font_family_AlibabaPuHuiTi'),
    value: 'AlibabaPuHuiTi',
    installable: true
  }, {
    title: t('we_toolbar_font_family_SourceHanSansCN'),
    value: 'Source Han Sans CN',
    installable: true
  }, {
    title: t('we_toolbar_font_family_SourceHanSerifCN'),
    value: 'Source Han Serif CN',
    installable: true
  }, {
    title: t('we_toolbar_font_family_SourceHanMonoSC'),
    value: 'Source Han Mono SC',
    installable: true
  }, {
    title: t('we_toolbar_font_family_HeitiTC'),
    value: 'Heiti TC',
    installable: false
  }, // 黑体 - 繁
  {
    title: t('we_toolbar_font_family_LantingheiTC'),
    value: 'Lantinghei TC',
    installable: false
  }, // 兰亭黑 - 繁
  {
    title: t('we_toolbar_font_family_PingFangTC'),
    value: 'PingFang TC',
    installable: false
  }, // 苹方 - 繁
  {
    title: t('we_toolbar_font_family_SimSunTC'),
    value: 'SimSun TC',
    installable: false
  } // 宋体 - 繁
  ];
};

/**
 * 获取fontFamily, 字体探测结果, 语言转换函数
 * @param locale 本地语言类型
 * @returns {[options, installedRecord, t]}
 */
const useFontFamily = locale => {
  const t = weUtil.useTranslate(locale); // 字体列表选项

  const options = React.useMemo(() => {
    const fontFamilies = getFontFamily(s => t(s));
    return fontFamilies;
  }, [t]);
  return [options, t];
};

const _createElement$1I = /*#__PURE__*/React__default['default'].createElement;
const DownloadTip = weDesign.withTheme(styled__default['default'].span(["color:", ";:hover{color:", ";}"], ({
  theme
}) => theme.ui.disabledColor, ({
  theme,
  status
}) => status === 'unDownload' ? theme.ui.textColor : theme.ui.disabledColor));
const DownloadButton = props => {
  const {
    status = 'unDownload',
    fontFamily = 'Arials'
  } = props;
  const t = weUtil.useTranslate(undefined);
  const statusMap = React.useMemo(() => ({
    unDownload: t('we_toolbar_font_download'),
    downloading: t('we_toolbar_font_downloading'),
    downloaded: ''
  }), [t]);
  const handleDownload = React.useCallback(e => {
    if (status === 'unDownload') {
      props.handleDownload(fontFamily);
    }

    e.stopPropagation();
  }, []);
  return /*#__PURE__*/_createElement$1I(DownloadTip, {
    status: status,
    onClick: handleDownload,
    style: {
      cursor: status === 'unDownload' ? 'pointer' : 'unt-allowed'
    }
  }, statusMap[status]);
};

/* eslint-disable consistent-return */
const woff = 'data:font/woff;charset=utf-8;base64,d09GRk9UVE8AAAQYAAoAAAAABlwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABDRkYgAAAA9AAAAMQAAADSEQga8UZGVE0AAAG4AAAAGwAAABxqQJGNT1MvMgAAAdQAAABDAAAAYFYPXfBjbWFwAAACGAAAADcAAAFCAA0D1mhlYWQAAAJQAAAAKQAAADb9ITBXaGhlYQAAAnwAAAAZAAAAJAN7/ztobXR4AAACmAAAAAgAAAAIAfQAAG1heHAAAAKgAAAABgAAAAYAAlAAbmFtZQAAAqgAAAFZAAACjkaWZeZwb3N0AAAEBAAAABMAAAAg/4YAMnicY2RgYWFgZGTkCs0rySzJSU0xZGBkYmBk0PjBz/BDmvGHDNMPWeYf4izdQMAqw7CIX4aBQUCGYamgDAO7DMNpIQZmkGoXBl+GMOei1MSS1BSFpEqFqtS8fCBO19HRUSjPLMlQcMvPK3HLL0pPVTDSM1DQyCgpKbDS108DiqaBRPWK0/TyUks04Y5AuAYIBBmYGBkVFLv3/nDdy7h37++Yvcx7xdR/rHzPtvdPuegP198xf1zZ+fi6RbpFu3m4ANybP/V4nGNgYGBkAIIztovOg+jzjOV2ULoeAEMOBccAeJxjYGH8wviFgZWBgamLaQ8DA0MPhGZ8wGDIyAQUZWBjZoABRgYkEJDmmsJwgMGAwYBZ4b8FQxSGGgUgZAQAfmQKqgB4nGNgYGBmgGAZBkYGELAB8hjBfBYGBSDNAoQgvsH//xDy/0WoSgZGNgYYk2hAqvrBDgBrAQbjAHicY2BkYGAA4pys3ox4fpuvDNzML4AiDOcZy3ci01DAwcAEogAU4ghtAAAAeJxjYGRgYFb4b8EQxQADjAyogAkAMlIBuQAAAAH0AAAAAAAAAABQAAACAAB4nIWQzUoDMRSFT+wPFESkT5CNUGEmzZRuOluhC8Wl3bdMph2omTpNKe1eceebCL6Ca9euXfsE7vTMNBREsBOS+92TMzc3AXCCZwjsvgs8ehZo4cPzEZr48lzDmbjyXEdL3Htu4FS8eG5Sf6dT1FvMHqq/ShZo483zEY7x6bmGS3x7rqMt7jw3IMWT5yb1V/ZXwGAMxzWBxAQbrltmFrmPUwTVkFgjo3NGGnLXkstY0GGo9aCgGTt0OI4FYnQ5Uu9N916FJTNF1VA/5zMVZuxMIicbuTU255wGQSDXmZvJYW7dMC+mRvaUlp2Zc4u4202ppqWqlqmyxrHITXVK2eG8uk1EybrMzU1CvK60DCvcMjFJtmL87xox59+SOz3CACHXkG7N2GepX23Gcn80ORqEUdjTUf9QkyNqBR8nq/qSrF1WV1Use8LIFMsst1LrSGmt5YGCP/yzcc0AAAB4nGNgZgCD/80MRgxYAAAoRAG4AA==';
/**
 * 20200126 引入 uuid，保证多实例 hook，避免多个hook同时对dom操作造成的判断失效
 * 保证每次调用能拿到同一个值
 */

class FontDetector {
  constructor() {
    this.src = void 0;
    this.css = void 0;
    this.timer = void 0;
    this.uuid = void 0;
    this.styleUuid = void 0;
    this.iframeUuid = void 0;
    this.detection = void 0;

    this.inject = () => {
      let iframe = document.getElementById(this.iframeUuid);

      if (!iframe) {
        iframe = document.createElement('iframe');
        iframe.id = this.iframeUuid;
        iframe.style.cssText = `
        position: fixed;
        left: -1000px;
        top: -1000px;
        width: 0;
        height: 0;
        border: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        z-index: -1;
      `;
        document.body.appendChild(iframe);
        const iframeDoc = iframe.contentDocument;
        const sheet = iframeDoc.createElement('style');
        sheet.setAttribute('type', 'text/css');
        sheet.id = this.styleUuid;
        sheet.innerHTML = this.css;
        const head = iframeDoc.getElementsByTagName('head')[0];
        head.appendChild(sheet);
        const elem = iframeDoc.createElement('div');
        elem.id = this.uuid;
        elem.innerHTML = '0';
        iframeDoc.body.appendChild(elem);
      }
    };

    this.remove = () => {
      const elem = document.getElementById(this.iframeUuid);

      if (elem != null) {
        elem.remove();
      }
    };

    this.ready = callback => {
      this.timer = window.setTimeout(() => {
        var _iframe;

        let iframe = document.getElementById(this.iframeUuid);

        if (!iframe) {
          this.inject();
          iframe = document.getElementById(this.iframeUuid);
        } // warning: 这里的判断逻辑过于 hack，无法找到ref来自哪里


        if ((_iframe = iframe) !== null && _iframe !== void 0 && _iframe.style && iframe.clientWidth === 0) {
          return callback();
        }
      }, 0);
    };

    this.getResult = (fonts, callback) => {
      const iframe = document.getElementById(this.iframeUuid);
      const iframeDoc = iframe.contentDocument;
      const elem = iframeDoc.getElementById(this.uuid);
      const fragment = iframeDoc.createDocumentFragment(); // eslint-disable-next-line no-restricted-syntax

      for (const font of fonts) {
        const el = iframeDoc.createElement('span');
        el.className = 'fontspan';
        el.innerHTML = '0';
        el.style.fontFamily = `'${font}', font-detect-0-woff`;
        fragment.appendChild(el);
      }

      elem.appendChild(fragment); // read dom on next cycle

      requestAnimationFrame(() => {
        // 防止当前 ev 有其他 requestAnimationFrame 内修改 dom
        fastdom__default['default'].measure(() => {
          const results = Array.from(elem.children).map(el => el.clientWidth > 0);
          this.detection = results;
          callback(results);
          this.remove();
        });
      });
    };

    this.detect = (fonts, callback) => this.detection.length > 0 ? callback(this.detection) : this.ready(() => this.getResult(fonts, callback));

    this.detection = [];
    const uid = uuid$1.v4();
    this.uuid = `font-${uid}`;
    this.styleUuid = `style-${uid}`;
    this.iframeUuid = `iframe-${uid}`;
    this.css = `
    @font-face {
      font-family: font-detect-0-woff;
      src: url(${woff}) format('woff');
    }
    #${this.uuid} {
      display: inline-block;
      position: fixed;
      left: -1000px;
      top: -1000px;
      font-family: font-detect-0-woff;
    }
    #${this.uuid} .fontspan {
      display: inline-block;
      position: fixed;
      left: -1000px;
      top: -1000px;
    }
    `;
    this.src = '';
    this.inject();
    this.timer = 0;
  }

  destroy() {
    if (this.timer) {
      window.clearTimeout(this.timer);
      this.remove();
    }
  }

}

let shared = undefined;
const getSharedFontDetector = () => {
  if (!shared) {
    shared = new FontDetector();
  }

  return shared;
};

const detectFonts = async () => {
  const asyncTaskKey = '@/ali/we-toolbar/detect-font';
  const rsts = getAsync__default['default'](asyncTaskKey, async () => {
    const detector = getSharedFontDetector();
    const fonts = getFontFamily(s => s).map(s => s.value);
    const result = await new Promise(resolve => {
      detector.detect(fonts, rst => {
        resolve(rst);
        detector.destroy();
      });
    });
    return result;
  });
  return rsts;
};

const _createElement$1H = /*#__PURE__*/React__default['default'].createElement;
const FontFamilySelect = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    locale,
    onChange,
    disabled,
    titles,
    title,
    size,
    active,
    disabledKeys = [],
    width,
    handleDownload,
    downloadFontInfos = {},
    role,
    ...restProps
  } = props;
  const [value, setValue] = useControlledValue(props.value, props.defaultValue);
  const contextLocale = weUtil.useGetContextLocale();
  const [options, t] = useFontFamily(locale || contextLocale);
  const [installedRecord, setInstalledRecord] = React.useState({
    default: true
  }); // font detected

  const [fontDetected, setFontDetected] = React.useState(false); // 该组件的trigger区域只显示Icon

  const renderTrigger = React.useCallback(align => {
    const index = options.findIndex(option => option.value === align);
    const currentOption = options[index];
    const useDefault = props.defaultValue ? options[0] : undefined;
    return /*#__PURE__*/_createElement$1H(TriggerWrap$5, null, (currentOption === null || currentOption === void 0 ? void 0 : currentOption.title) || (useDefault === null || useDefault === void 0 ? void 0 : useDefault.title) || align);
  }, [options]);
  const isFontDisable = React.useCallback(font => {
    var _downloadFontInfos$fo;

    return !installedRecord[font] && ((_downloadFontInfos$fo = downloadFontInfos[font]) === null || _downloadFontInfos$fo === void 0 ? void 0 : _downloadFontInfos$fo.status) !== 'downloaded' || disabledKeys.indexOf(font) > -1;
  }, [installedRecord, downloadFontInfos, disabledKeys]);
  const handleChange = React.useCallback(e => {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [onChange, setValue]); // 首次打开面板/value 不为 default 时，再做 font detect

  const detectFont = React.useCallback(() => {
    if (fontDetected) {
      return;
    }

    detectFonts().then(results => {
      const newInstalledRecord = {};
      results.forEach((result, index) => {
        if (index !== 0) {
          newInstalledRecord[options[index].value] = result;
        }
      });
      newInstalledRecord.default = true;
      setInstalledRecord(newInstalledRecord);
      setFontDetected(true);
    });
    return () => {
      setInstalledRecord({
        default: true
      });
    };
  }, [fontDetected]);
  React.useEffect(() => {
    // 字体懒加载会导致字体列表延迟 1-2s 出现(大文档场景)
    if (value && value !== 'default') {
      detectFont();
    }
  }, [value]);
  return /*#__PURE__*/_createElement$1H(TextSelect, _extends__default['default']({
    width: width,
    value: value,
    size: size,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    optionWrapperStyle: {
      minWidth: 200
    },
    disabled: disabled,
    testid: "FontFamilySelect",
    title: title,
    locale: locale,
    active: active,
    role: role,
    onVisibleChange: visible => {
      if (visible) {
        detectFont();
      }
    }
  }, restProps), options // 是否展示在列表：用户已安装、可下载的字体
  .filter(option => {
    return installedRecord[option.value] || option.installable;
  }).map(option => {
    var _downloadFontInfos$op;

    return /*#__PURE__*/_createElement$1H(weDesign.SelectOption, {
      value: option.value,
      key: option.value,
      disabled: isFontDisable(option.value),
      disabledTip: t('we_toolbar_font_family_UninstallFonts'),
      testid: option.value,
      title: titles[option.value]
    }, /*#__PURE__*/_createElement$1H(OptionWrap$8, {
      disabled: isFontDisable(option.value)
    }, /*#__PURE__*/_createElement$1H("span", {
      style: {
        fontFamily: option.value,
        color: 'inherit'
      }
    }, option.title)), // 具有下载能力且尚未安装
    handleDownload && !installedRecord[option.value] && /*#__PURE__*/_createElement$1H(DownloadButton, {
      handleDownload: handleDownload,
      fontFamily: option.value,
      status: (_downloadFontInfos$op = downloadFontInfos[option.value]) === null || _downloadFontInfos$op === void 0 ? void 0 : _downloadFontInfos$op.status
    }));
  }));
});
FontFamilySelect.defaultProps = {
  titles: {}
};

const OptionWrap$7 = /*#__PURE__*/styled__default['default'].div(["display:flex;justify-content:space-between;align-items:center;width:100%;"]);
const OptionTitle = /*#__PURE__*/styled__default['default'].div(["margin-right:32px;"]);
const OptionExample = /*#__PURE__*/styled__default['default'].div(["color:#bbb;font-size:12px;max-width:200px;", ""], Ellipsis);

const _createElement$1G = /*#__PURE__*/React__default['default'].createElement;
const NumberFormatSelect = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    targetValue,
    format,
    onChange,
    bordered,
    numberFormatter,
    locale,
    ...restProps
  } = props;
  const t = weUtil.useTranslate(locale);
  const NUMBER_FORMATS = React.useMemo(() => [{
    values: ['General'],
    title: t('we_toolbar_routine')
  }, {
    values: ['0'],
    title: t('we_toolbar_number'),
    example: '1234'
  }, {
    values: ['0.00'],
    title: `${t('we_toolbar_number')}（${t('we_toolbar_decimal_point')}）`,
    example: '1234.56'
  }, {
    values: ['0%'],
    title: t('we_toolbar_percentage'),
    example: '12%'
  }, {
    values: ['0.00%'],
    title: `${t('we_toolbar_percentage')}（${t('we_toolbar_decimal_point')}）`,
    example: '12.34%'
  }, {
    values: ['0.00E+00'],
    title: t('we_toolbar_scientific_counting'),
    example: '1.01E+03'
  }, {
    values: ['¥0'],
    title: t('we_toolbar_rmb'),
    example: '¥1,234'
  }, {
    values: ['¥0.00'],
    title: `${t('we_toolbar_rmb')}（${t('we_toolbar_decimal_point')}）`,
    example: '¥1,234.56'
  }, {
    values: ['$0'],
    title: t('we_toolbar_dollar'),
    example: '$1,234'
  }, {
    values: ['$0.00'],
    title: `${t('we_toolbar_dollar')}（${t('we_toolbar_decimal_point')}）`,
    example: '$1,234.56'
  }, {
    values: ['yyyy/m/d', 'm\u6708d\u65e5', 'm/d/yyyy'],
    title: t('we_toolbar_date'),
    example: '2020/05/20'
  }, {
    values: ['hh:mm:ss', 'h:mm', 'h:mm:ss', 'h:mm:ss.0'],
    title: t('we_toolbar_time'),
    example: '13:14:00'
  }, {
    values: ['yyyy/m/d hh:mm:ss', 'yyyy/m/d h:mm:ss.0', 'yyyy/m/d h:mm', 'yyyy/m/d h:mm:ss'],
    title: t('we_toolbar_date_time'),
    example: '2020/05/20 13:14:00'
  }, {
    values: ['@'],
    title: t('we_toolbar_text')
  }], [t]);
  const finalValue = format || 'General';
  const renderTrigger = React.useCallback(v => {
    const found = NUMBER_FORMATS.find(f => f.values.includes(v || 'General'));

    if (found) {
      return /*#__PURE__*/_createElement$1G("span", null, found.title);
    }

    return /*#__PURE__*/_createElement$1G("span", null, NUMBER_FORMATS[0].title);
  }, []);

  const isNil = v => v === undefined || v === null;

  const isNumber = v => typeof v === 'number';

  return /*#__PURE__*/_createElement$1G(TextSelect, _extends__default['default']({
    value: finalValue,
    onChange: onChange,
    renderTrigger: renderTrigger,
    bordered: bordered,
    testid: "NumberFormatSelect"
  }, restProps), NUMBER_FORMATS.map(({
    title,
    values: v,
    example
  }) => {
    let formatedValue = example ?? '';
    const key = v.includes(finalValue) ? finalValue : v[0];

    if (!isNil(targetValue) && targetValue !== '') {
      formatedValue = isNumber(targetValue) ? numberFormatter.format(targetValue, key) : targetValue;
    }

    return /*#__PURE__*/_createElement$1G(weDesign.SelectOption, {
      key: key,
      value: key,
      testid: `NumberFormatSelectOption_${key}`
    }, /*#__PURE__*/_createElement$1G(OptionWrap$7, null, /*#__PURE__*/_createElement$1G(OptionTitle, null, title), /*#__PURE__*/_createElement$1G(OptionExample, null, formatedValue)));
  }));
});

/* eslint-disable @typescript-eslint/explicit-function-return-type */
const SelectTrigger = weDesign.withTheme(styled__default['default'].span(["display:block;line-height:20px;", ""], Ellipsis));

const _createElement$1F = /*#__PURE__*/React__default['default'].createElement;

// eslint-disable-next-line max-lines-per-function
const TextTypeSelect = props => {
  const {
    locale,
    onChange,
    bordered,
    disabled,
    titles,
    title,
    role,
    ...restProps
  } = props;
  const translate = weUtil.useTranslate(locale); // 文字类型列表：正文、标题1-6

  const options = React.useMemo(() => [{
    title: translate('we_toolbar_font_family_ts_Body'),
    type: 'paragraph',
    fontSize: 14,
    fontWeight: 400,
    lineHeight: '1.45'
  }, {
    title: translate('we_toolbar_font_family_ts_Title_1'),
    type: 'heading-1',
    fontSize: '20pt',
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: translate('we_toolbar_font_family_ts_Title_2'),
    type: 'heading-2',
    fontSize: '16pt',
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: translate('we_toolbar_font_family_ts_Title_3'),
    type: 'heading-3',
    fontSize: '14pt',
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: translate('we_toolbar_font_family_ts_Title_4'),
    type: 'heading-4',
    fontSize: '12pt',
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: translate('we_toolbar_font_family_ts_Title_5'),
    type: 'heading-5',
    fontSize: '12pt',
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: translate('we_toolbar_font_family_ts_Title_6'),
    type: 'heading-6',
    fontSize: '12pt',
    fontWeight: 500,
    lineHeight: '1.45'
  }], [translate]); // 受控模式处理
  // eslint-disable-next-line prefer-const

  let [value, setValue] = useControlledValue(props.value, props.defaultValue);
  /**
   * 文字类型变化回调函数
   *
   * @param {TextType} type
   * @return {void}
   */

  const handleChange = React.useCallback(type => {
    if (onChange) {
      onChange(type);
    }

    setValue(type);
  }, [setValue, onChange]);
  /**
   * 渲染下拉选择的显示区
   *
   * @param {TextType} type
   * @return {React.ReactNode}
   */

  const renderTrigger = React.useCallback((type = 'paragraph') => {
    const index = options.findIndex(op => op.type === type);
    const currentOption = options[index];
    return /*#__PURE__*/_createElement$1F(SelectTrigger, null, (currentOption === null || currentOption === void 0 ? void 0 : currentOption.title) || options[0].title);
  }, [options]);
  return /*#__PURE__*/_createElement$1F(TextSelect, _extends__default['default']({
    title: title,
    value: value // @ts-ignore
    ,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    bordered: bordered,
    disabled: disabled,
    testid: "TextTypeSelect",
    role: role,
    selectable: true
  }, restProps), // 目前列表要求只显示 1-4
  options.slice(0, 5).map(option => {
    return /*#__PURE__*/_createElement$1F(weDesign.SelectOption, {
      key: option.type,
      value: option.type,
      testid: option.type,
      title: titles[option.type],
      role: option.type
    }, /*#__PURE__*/_createElement$1F("span", {
      style: {
        fontSize: option.fontSize,
        fontWeight: option.fontWeight,
        lineHeight: option.lineHeight
      }
    }, option.title));
  }));
};

TextTypeSelect.defaultProps = {
  onChange: () => {},
  defaultValue: 'paragraph',
  titles: {},
  selectable: true
};

const TitleWrap$2 = weDesign.withTheme(styled__default['default'].div(["font-size:", ";color:", ";font-weight:normal;user-select:none;cursor:default;margin-left:", ";align-items:center;display:flex;flex:1;text-align:center;justify-content:end;", " div{overflow:hidden;text-overflow:ellipsis;", " ", "}", ";"], ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  theme
}) => theme.ui.commonActionIconColor, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? '' : theme.ui.marginMini, ({
  size
}) => size === TOOL_SIZE.LARGE && styled.css(["max-width:52px;min-width:45px;justify-content:center;"]), ({
  size
}) => size === TOOL_SIZE.MEDIUM && styled.css(["height:20px;line-height:20px;"]), ({
  size,
  showTitle
}) => size === TOOL_SIZE.LARGE && showTitle && styled.css(["display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:2;word-break:break-word;line-height:12px;padding-top:2px;"]), ({
  disabled
}) => disabled && 'opacity:.35;cursor:not-allowed;'));
const largeAndShowTitleButtonWrap = /*#__PURE__*/styled.css(["height:52px;min-width:40px;max-width:52px;padding:0px;:hover{background-color:", ";}", ":hover .icon-button{background-color:", ";", " ", "}:active{", "}.icon-button{padding:", ";", "}:hover .icon-button:active{", ";}.icon-button:hover,.icon-button:focus{background-color:", ";", " ", "}"], ({
  theme
}) => theme.ui.toolbarButtonTransparent, ({
  active,
  theme
}) => active && `background-color: ${theme.ui.toolbarButtonTransparent};`, ({
  theme
}) => theme.ui.toolbarButtonHover, ({
  disabled,
  theme
}) => disabled && `background-color: ${theme.ui.toolbarButtonTransparent};`, ({
  active,
  theme,
  disabled
}) => active && `background-color: ${disabled ? theme.ui.toolbarButtonSelectDisable : theme.ui.toolbarButtonSelectHover};`, ({
  size,
  showTitle,
  theme,
  disabled
}) => !disabled && size === TOOL_SIZE.LARGE && showTitle && styled.css([".icon-button{background-color:", ";}"], theme.ui.toolbarButtonClick), ({
  theme
}) => theme.ui.paddingMini, ({
  active,
  theme,
  disabled
}) => active && `background-color: ${disabled ? theme.ui.toolbarButtonSelectDisable : theme.ui.toolbarButtonSelect};`, ({
  disabled,
  theme
}) => !disabled && `background-color :${theme.ui.toolbarButtonClick} `, ({
  theme
}) => theme.ui.toolbarButtonHover, ({
  disabled,
  theme
}) => disabled && `background-color: ${theme.ui.toolbarButtonTransparent};`, ({
  active,
  theme,
  disabled
}) => active && `background-color: ${disabled ? theme.ui.toolbarButtonSelectDisable : theme.ui.toolbarButtonSelectHover};`);
const ButtonWrap$3 = weDesign.withTheme(styled__default['default'].div(["display:inline-flex;position:relative;flex-direction:", ";align-items:center;padding:", ";", " border-radius:", ";:hover{", "}:hover .icon-button{background-color:", ";}:active{", "}.weicon{font-size:", ";", "}.icon-button{cursor:", ";border:none;height:auto;width:auto;padding:0;color:", ";", ";border-radius:4px;}.icon-button:hover,.icon-button:focus{background-color:", ";}", "{}", ";"], ({
  size
}) => size === TOOL_SIZE.LARGE ? 'column' : 'row', ({
  theme,
  size
}) => size === TOOL_SIZE.MEDIUM ? theme.ui.paddingTiny : theme.ui.paddingMini, ({
  active,
  theme,
  disabled
}) => active && `background-color: ${disabled ? theme.ui.toolbarButtonSelectDisable : theme.ui.toolbarButtonSelect};`, ({
  theme,
  borderRadius
}) => typeof borderRadius !== 'undefined' ? `${borderRadius}px` : theme.ui.radiusSmall, ({
  active,
  theme,
  disabled
}) => !disabled && `background-color:  ${active ? theme.ui.toolbarButtonSelectHover : theme.ui.toolbarButtonHover}; `, ({
  theme
}) => theme.ui.toolbarButtonTransparent, ({
  theme,
  disabled
}) => !disabled && `background-color :${theme.ui.toolbarButtonClick}`, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.toolbarFontSizeIconLarge : theme.ui.toolbarFontSizeIcon, ({
  disabled
}) => disabled && styled.css(["opacity:0.35;"]), ({
  disabled
}) => disabled ? 'not-allowed' : 'default', ({
  theme
}) => theme.ui.toolbarButtonIcon, ({
  disabled,
  theme
}) => disabled && `color:${theme.ui.toolbarButtonIconDisable};`, ({
  theme
}) => theme.ui.toolbarButtonTransparent, TitleWrap$2, ({
  size,
  showTitle
}) => size === TOOL_SIZE.LARGE && showTitle && largeAndShowTitleButtonWrap));

const _createElement$1E = /*#__PURE__*/React__default['default'].createElement;
const IconButton = /*#__PURE__*/React__default['default'].memo( /*#__PURE__*/React__default['default'].forwardRef((props, ref) => {
  const {
    icon,
    title,
    tooltip,
    shortcutText,
    showTitle,
    disabled,
    size,
    active,
    onClick,
    testid,
    className,
    onDoubleClick,
    borderRadius,
    disabledTip,
    style,
    extraNode,
    getContainer,
    role = ''
  } = props;
  const contextLocale = weUtil.useGetContextLocale();
  const t = weUtil.useTranslate(contextLocale);
  const [click, doubleClick] = weUtil.hooks.useClickPreventionOnDoubleClick(onClick, onDoubleClick);
  const {
    el,
    id,
    isHide,
    fineAdaptation,
    groupKey,
    isInOffScreenWrap,
    mode
  } = useVisibilitySensor(ref, testid);
  const styleProps = {
    size,
    active,
    showTitle,
    borderRadius
  };
  let tooltipForButton = '';

  if (typeof tooltip === 'string') {
    tooltipForButton = t(tooltip);

    if (shortcutText != null) {
      tooltipForButton += ` ${shortcutText}`;
    }
  } else {
    tooltipForButton = tooltip;
  }

  const ToolbarIconMemo = React.useMemo(() => ({
    size: size || 'medium'
  }), [size]);
  if (isHide) return null;
  return /*#__PURE__*/_createElement$1E(weIcon.ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement$1E(weDesign.Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement$1E(DisableWrap, {
    className: "icon-button-layout button-wrap",
    disabled: disabled
  }, /*#__PURE__*/_createElement$1E(ButtonWrap$3, _extends__default['default']({
    ref: el,
    "data-id": id,
    "data-mode": mode
  }, styleProps, {
    key: testid,
    locale: contextLocale,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey,
    className: classnames(className, 'button-box', active ? 'actived' : ''),
    onClick: disabled ? undefined : click,
    onDoubleClick: disabled ? undefined : doubleClick,
    style: style,
    "data-testid": `${isInOffScreenWrap ? '' : testid}_wrap`,
    "data-role": role
  }), /*#__PURE__*/_createElement$1E(weDesign.Button, {
    bordered: false,
    icon: icon,
    testid: isInOffScreenWrap ? '' : testid,
    className: classnames('icon-button'),
    title: tooltipForButton
  }), showTitle ? /*#__PURE__*/_createElement$1E(TitleWrap$2, _extends__default['default']({}, styleProps, {
    locale: contextLocale
  }), /*#__PURE__*/_createElement$1E("div", null, title && typeof title !== 'string' ? title : t(title))) : null, extraNode))));
}));
IconButton.defaultProps = {
  size: 'medium'
};

var _ToolbarAddFontNormal;
const _createElement$1D = /*#__PURE__*/React__default['default'].createElement;
const AddFontSizeButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1D(IconButton, _extends__default['default']({
    icon: _ToolbarAddFontNormal || (_ToolbarAddFontNormal = /*#__PURE__*/_createElement$1D(weDesign.ToolbarAddFontNormal, null)),
    title: t('we_toolbar_add_fontsize'),
    tooltip: t('we_toolbar_add_fontsize'),
    testid: "add_fontsize_button"
  }, props));
});
AddFontSizeButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarAlignCenterNo;
const _createElement$1C = /*#__PURE__*/React__default['default'].createElement;
const AlignCenter = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1C(IconButton, _extends__default['default']({
    icon: _ToolbarAlignCenterNo || (_ToolbarAlignCenterNo = /*#__PURE__*/_createElement$1C(weDesign.ToolbarAlignCenterNormal, null)),
    title: t('we_toolbar_align_center'),
    tooltip: t('we_toolbar_align_center'),
    testid: 'align_center'
  }, props));
});
AlignCenter.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarAlignLeftNorm;
const _createElement$1B = /*#__PURE__*/React__default['default'].createElement;
const AlignLeft = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1B(IconButton, _extends__default['default']({
    icon: _ToolbarAlignLeftNorm || (_ToolbarAlignLeftNorm = /*#__PURE__*/_createElement$1B(weDesign.ToolbarAlignLeftNormal, null)),
    title: t('we_toolbar_align_left'),
    tooltip: t('we_toolbar_align_left'),
    testid: 'align_left'
  }, props));
});
AlignLeft.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarAlignRightNor;
const _createElement$1A = /*#__PURE__*/React__default['default'].createElement;
const AlignRight = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1A(IconButton, _extends__default['default']({
    icon: _ToolbarAlignRightNor || (_ToolbarAlignRightNor = /*#__PURE__*/_createElement$1A(weDesign.ToolbarAlignRightNormal, null)),
    title: t('we_toolbar_align_right'),
    tooltip: t('we_toolbar_align_right'),
    testid: 'align_right'
  }, props));
});
AlignRight.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarBoldNormal;
const _createElement$1z = /*#__PURE__*/React__default['default'].createElement;
const BoldButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1z(IconButton, _extends__default['default']({
    icon: _ToolbarBoldNormal || (_ToolbarBoldNormal = /*#__PURE__*/_createElement$1z(weDesign.ToolbarBoldNormal, null)),
    title: t('we_toolbar_bold'),
    tooltip: t('we_toolbar_bold'),
    testid: "bold_button"
  }, props));
});
BoldButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarBrushNormal;
const _createElement$1y = /*#__PURE__*/React__default['default'].createElement;
const BrushButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1y(IconButton, _extends__default['default']({
    testid: 'brush_button',
    icon: _ToolbarBrushNormal || (_ToolbarBrushNormal = /*#__PURE__*/_createElement$1y(weDesign.ToolbarBrushNormal, null)),
    title: t('we_toolbar_brush'),
    tooltip: t('we_toolbar_brush')
  }, props));
});
BrushButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarDiagramNormal;
const _createElement$1x = /*#__PURE__*/React__default['default'].createElement;
// TODO: 需要替换 icon
const ChartButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1x(IconButton, _extends__default['default']({
    testid: "chart_button",
    icon: props.icon || _ToolbarDiagramNormal || (_ToolbarDiagramNormal = /*#__PURE__*/_createElement$1x(weDesign.ToolbarDiagramNormal, null)),
    title: t('we_toolbar_diagram'),
    tooltip: t('we_toolbar_diagram')
  }, props));
});
ChartButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarCurrencyNorma;
const _createElement$1w = /*#__PURE__*/React__default['default'].createElement;
const CurrencyButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1w(IconButton, _extends__default['default']({
    testid: "currency_button",
    icon: _ToolbarCurrencyNorma || (_ToolbarCurrencyNorma = /*#__PURE__*/_createElement$1w(weDesign.ToolbarCurrencyNormal, null)),
    title: t('we_toolbar_currency'),
    tooltip: t('we_toolbar_currency')
  }, props));
});
CurrencyButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarDecimalPointM;
const _createElement$1v = /*#__PURE__*/React__default['default'].createElement;
const DecimalPositionMinusButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1v(IconButton, _extends__default['default']({
    testid: "decimal_position_minus_button",
    icon: _ToolbarDecimalPointM || (_ToolbarDecimalPointM = /*#__PURE__*/_createElement$1v(weDesign.ToolbarDecimalPointMinusNormal, null)),
    title: t('we_toolbar_decimal_point_minus'),
    tooltip: t('we_toolbar_decimal_point_minus')
  }, props));
});
DecimalPositionMinusButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarDecimalPointP;
const _createElement$1u = /*#__PURE__*/React__default['default'].createElement;
const DecimalPositionPlusButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1u(IconButton, _extends__default['default']({
    testid: "decimal_position_plus_button",
    icon: _ToolbarDecimalPointP || (_ToolbarDecimalPointP = /*#__PURE__*/_createElement$1u(weDesign.ToolbarDecimalPointPlusNormal, null)),
    title: t('we_toolbar_decimal_point_plus'),
    tooltip: t('we_toolbar_decimal_point_plus')
  }, props));
});
DecimalPositionPlusButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarEraserNormal;
const _createElement$1t = /*#__PURE__*/React__default['default'].createElement;
const EraserButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1t(IconButton, _extends__default['default']({
    testid: "erase_button",
    icon: _ToolbarEraserNormal || (_ToolbarEraserNormal = /*#__PURE__*/_createElement$1t(weDesign.ToolbarEraserNormal, null)),
    title: t('we_toolbar_eraser_button'),
    tooltip: t('we_toolbar_eraser_button')
  }, props));
});
EraserButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarItalicNormal;
const _createElement$1s = /*#__PURE__*/React__default['default'].createElement;
const ItalicButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1s(IconButton, _extends__default['default']({
    testid: "italic_button",
    icon: _ToolbarItalicNormal || (_ToolbarItalicNormal = /*#__PURE__*/_createElement$1s(weDesign.ToolbarItalicNormal, null)),
    title: t('we_toolbar_italic'),
    tooltip: t('we_toolbar_italic')
  }, props));
});
ItalicButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarPercentNormal;
const _createElement$1r = /*#__PURE__*/React__default['default'].createElement;
const PercentButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1r(IconButton, _extends__default['default']({
    testid: "percent_button",
    icon: _ToolbarPercentNormal || (_ToolbarPercentNormal = /*#__PURE__*/_createElement$1r(weDesign.ToolbarPercentNormal, null)),
    title: t('we_toolbar_percent'),
    tooltip: t('we_toolbar_percent')
  }, props));
});
PercentButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarPictureNormal$2;
const _createElement$1q = /*#__PURE__*/React__default['default'].createElement;
const PictureButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1q(IconButton, _extends__default['default']({
    testid: "picture_button",
    icon: _ToolbarPictureNormal$2 || (_ToolbarPictureNormal$2 = /*#__PURE__*/_createElement$1q(weDesign.ToolbarPictureNormal, null)),
    title: t('we_toolbar_picture'),
    tooltip: t('we_toolbar_picture_tooltip')
  }, props));
});
PictureButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarRedoNormal;
const _createElement$1p = /*#__PURE__*/React__default['default'].createElement;
const RedoButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1p(IconButton, _extends__default['default']({
    testid: "redo_button",
    icon: _ToolbarRedoNormal || (_ToolbarRedoNormal = /*#__PURE__*/_createElement$1p(weDesign.ToolbarRedoNormal, null)),
    title: t('we_toolbar_redo_button'),
    tooltip: t('we_toolbar_redo_button')
  }, props));
});
RedoButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarReduceFontNor;
const _createElement$1o = /*#__PURE__*/React__default['default'].createElement;
const ReduceFontSizeButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1o(IconButton, _extends__default['default']({
    icon: _ToolbarReduceFontNor || (_ToolbarReduceFontNor = /*#__PURE__*/_createElement$1o(weDesign.ToolbarReduceFontNormal, null)),
    title: t('we_toolbar_reduce_fontsize'),
    tooltip: t('we_toolbar_reduce_fontsize'),
    testid: 'ReduceFontSizeButton'
  }, props));
});
ReduceFontSizeButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarSearchNormal;
const _createElement$1n = /*#__PURE__*/React__default['default'].createElement;
const SearchButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1n(IconButton, _extends__default['default']({
    testid: "search_button",
    icon: _ToolbarSearchNormal || (_ToolbarSearchNormal = /*#__PURE__*/_createElement$1n(weDesign.ToolbarSearchNormal, null)),
    title: t('we_toolbar_search_button'),
    tooltip: t('we_toolbar_search_button')
  }, props));
});
SearchButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarStrikethrough;
const _createElement$1m = /*#__PURE__*/React__default['default'].createElement;
const StrikethroughButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1m(IconButton, _extends__default['default']({
    icon: _ToolbarStrikethrough || (_ToolbarStrikethrough = /*#__PURE__*/_createElement$1m(weDesign.ToolbarStrikethroughNormal, null)),
    title: t('we_toolbar_strikethrough'),
    tooltip: t('we_toolbar_strikethrough'),
    testid: "strikethrough_button"
  }, props));
});
StrikethroughButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarTodoListNorma$1;
const _createElement$1l = /*#__PURE__*/React__default['default'].createElement;
const TaskListButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1l(IconButton, _extends__default['default']({
    icon: _ToolbarTodoListNorma$1 || (_ToolbarTodoListNorma$1 = /*#__PURE__*/_createElement$1l(weDesign.ToolbarTodoListNormal, null)),
    title: t('we_toolbar_task_list'),
    tooltip: t('we_toolbar_task_list'),
    testid: "TaskListButton"
  }, props));
});
TaskListButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarUnderlineNorm;
const _createElement$1k = /*#__PURE__*/React__default['default'].createElement;
const UnderlineButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1k(IconButton, _extends__default['default']({
    testid: "underline_button",
    icon: _ToolbarUnderlineNorm || (_ToolbarUnderlineNorm = /*#__PURE__*/_createElement$1k(weDesign.ToolbarUnderlineNormal, null)),
    title: t('we_toolbar_underline'),
    tooltip: t('we_toolbar_underline')
  }, props));
});
UnderlineButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarUndoNormal;
const _createElement$1j = /*#__PURE__*/React__default['default'].createElement;
const UndoButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1j(IconButton, _extends__default['default']({
    testid: "undo_button",
    icon: _ToolbarUndoNormal || (_ToolbarUndoNormal = /*#__PURE__*/_createElement$1j(weDesign.ToolbarUndoNormal, null)),
    title: t('we_toolbar_undo_button'),
    tooltip: t('we_toolbar_undo_button')
  }, props));
});
UndoButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarVerticalAlign$2;
const _createElement$1i = /*#__PURE__*/React__default['default'].createElement;
const VerticalAlignBottomButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1i(IconButton, _extends__default['default']({
    testid: "vertical_align_bottom_button",
    icon: _ToolbarVerticalAlign$2 || (_ToolbarVerticalAlign$2 = /*#__PURE__*/_createElement$1i(weDesign.ToolbarVerticalAlignBottomNormal, null)),
    title: t('we_toolbar_vertical_align_bottom'),
    tooltip: t('we_toolbar_vertical_align_bottom')
  }, props));
});
VerticalAlignBottomButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarVerticalAlign$1;
const _createElement$1h = /*#__PURE__*/React__default['default'].createElement;
const VerticalAlignMiddleButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1h(IconButton, _extends__default['default']({
    testid: "vertical_align_middle_button",
    icon: _ToolbarVerticalAlign$1 || (_ToolbarVerticalAlign$1 = /*#__PURE__*/_createElement$1h(weDesign.ToolbarVerticalAlignMiddleNormal, null)),
    title: t('we_toolbar_vertical_align_middle'),
    tooltip: t('we_toolbar_vertical_align_middle')
  }, props));
});
VerticalAlignMiddleButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarVerticalAlign;
const _createElement$1g = /*#__PURE__*/React__default['default'].createElement;
const VerticalAlignTopButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1g(IconButton, _extends__default['default']({
    icon: _ToolbarVerticalAlign || (_ToolbarVerticalAlign = /*#__PURE__*/_createElement$1g(weDesign.ToolbarVerticalAlignTopNormal, null)),
    title: t('we_toolbar_vertical_align_top'),
    tooltip: t('we_toolbar_vertical_align_top'),
    testid: "vertical_align_top_button"
  }, props));
});
VerticalAlignTopButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarCommentNormal;
const _createElement$1f = /*#__PURE__*/React__default['default'].createElement;
const CommentButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1f(IconButton, _extends__default['default']({
    icon: _ToolbarCommentNormal || (_ToolbarCommentNormal = /*#__PURE__*/_createElement$1f(weDesign.ToolbarCommentNormal, null)),
    title: t('we_toolbar_comment'),
    tooltip: t('we_toolbar_comment'),
    testid: "comment_button"
  }, props));
});
CommentButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarVoiceNormal;
const _createElement$1e = /*#__PURE__*/React__default['default'].createElement;
const VoiceButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1e(IconButton, _extends__default['default']({
    icon: _ToolbarVoiceNormal || (_ToolbarVoiceNormal = /*#__PURE__*/_createElement$1e(weDesign.ToolbarVoiceNormal, null)),
    title: t('we_toolbar_voice'),
    tooltip: t('we_toolbar_voice'),
    testid: "voice_button"
  }, props));
});
VoiceButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarTranslateNorm;
const _createElement$1d = /*#__PURE__*/React__default['default'].createElement;
const TranslateButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1d(IconButton, _extends__default['default']({
    icon: _ToolbarTranslateNorm || (_ToolbarTranslateNorm = /*#__PURE__*/_createElement$1d(weDesign.ToolbarTranslateNormal, null)),
    title: t('we_toolbar_translate'),
    tooltip: t('we_toolbar_translate'),
    testid: "translate_button"
  }, props));
});
TranslateButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarPasteNormal$1;
const _createElement$1c = /*#__PURE__*/React__default['default'].createElement;
const PasteButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1c(IconButton, _extends__default['default']({
    icon: _ToolbarPasteNormal$1 || (_ToolbarPasteNormal$1 = /*#__PURE__*/_createElement$1c(weDesign.ToolbarPasteNormal, null)),
    title: t('we_toolbar_paste'),
    tooltip: t('we_toolbar_paste'),
    testid: "paste_button"
  }, props));
});
PasteButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarAlignJustifyN;
const _createElement$1b = /*#__PURE__*/React__default['default'].createElement;
const AlignJustify = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1b(IconButton, _extends__default['default']({
    icon: _ToolbarAlignJustifyN || (_ToolbarAlignJustifyN = /*#__PURE__*/_createElement$1b(weDesign.ToolbarAlignJustifyNormal, null)),
    title: t('we_toolbar_align_justify'),
    tooltip: t('we_toolbar_align_justify'),
    testid: 'align_justify'
  }, props));
});
AlignJustify.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarIncreaseInden;
const _createElement$1a = /*#__PURE__*/React__default['default'].createElement;
const IncreaseIndent = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$1a(IconButton, _extends__default['default']({
    icon: _ToolbarIncreaseInden || (_ToolbarIncreaseInden = /*#__PURE__*/_createElement$1a(weDesign.ToolbarIncreaseIndentNormal, null)),
    title: t('we_toolbar_increase_indent'),
    tooltip: t('we_toolbar_increase_indent'),
    testid: "increase_indent"
  }, props));
});
IncreaseIndent.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarReduceIndentN;
const _createElement$19 = /*#__PURE__*/React__default['default'].createElement;
const ReduceIndent = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$19(IconButton, _extends__default['default']({
    icon: _ToolbarReduceIndentN || (_ToolbarReduceIndentN = /*#__PURE__*/_createElement$19(weDesign.ToolbarReduceIndentNormal, null)),
    title: t('we_toolbar_reduce_indent'),
    tooltip: t('we_toolbar_reduce_indent'),
    testid: "reduce_indent"
  }, props));
});
ReduceIndent.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarLinkNormal;
const _createElement$18 = /*#__PURE__*/React__default['default'].createElement;
const AddLinkButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$18(IconButton, _extends__default['default']({
    icon: _ToolbarLinkNormal || (_ToolbarLinkNormal = /*#__PURE__*/_createElement$18(weDesign.ToolbarLinkNormal, null)),
    title: t('we_toolbar_add_link'),
    tooltip: t('we_toolbar_add_link'),
    testid: "AddLinkButton"
  }, props));
});
AddLinkButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarLockNormal$1;
const _createElement$17 = /*#__PURE__*/React__default['default'].createElement;
const LockButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$17(IconButton, _extends__default['default']({
    icon: _ToolbarLockNormal$1 || (_ToolbarLockNormal$1 = /*#__PURE__*/_createElement$17(weDesign.ToolbarLockNormal, null)),
    title: t('we_toolbar_lock'),
    tooltip: t('we_toolbar_lock'),
    testid: 'lock'
  }, props));
});
LockButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarFocusNormal;
const _createElement$16 = /*#__PURE__*/React__default['default'].createElement;
const FocusButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$16(IconButton, _extends__default['default']({
    icon: _ToolbarFocusNormal || (_ToolbarFocusNormal = /*#__PURE__*/_createElement$16(weDesign.ToolbarFocusNormal, null)),
    title: t('we_toolbar_focus'),
    tooltip: t('we_toolbar_focus'),
    testid: 'focus'
  }, props));
});
FocusButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarDropdownNorma;
const _createElement$15 = /*#__PURE__*/React__default['default'].createElement;
const SelectButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$15(IconButton, _extends__default['default']({
    testid: "select_button",
    icon: props.icon || _ToolbarDropdownNorma || (_ToolbarDropdownNorma = /*#__PURE__*/_createElement$15(weDesign.ToolbarDropdownNormal, null)),
    title: t('we_toolbar_options_modal_title'),
    tooltip: t('we_toolbar_options_modal_title')
  }, props));
});
SelectButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarSuperscriptNo;
const _createElement$14 = /*#__PURE__*/React__default['default'].createElement;
const SuperscriptButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$14(IconButton, _extends__default['default']({
    icon: _ToolbarSuperscriptNo || (_ToolbarSuperscriptNo = /*#__PURE__*/_createElement$14(weDesign.ToolbarSuperscriptNormal, null)),
    title: t('we_toolbar_superscript'),
    tooltip: t('we_toolbar_superscript'),
    testid: "SuperscriptButton"
  }, props));
});
SuperscriptButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarSubscriptNorm;
const _createElement$13 = /*#__PURE__*/React__default['default'].createElement;
const SubscriptButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$13(IconButton, _extends__default['default']({
    icon: _ToolbarSubscriptNorm || (_ToolbarSubscriptNorm = /*#__PURE__*/_createElement$13(weDesign.ToolbarSubscriptNormal, null)),
    title: t('we_toolbar_subscript'),
    tooltip: t('we_toolbar_subscript'),
    testid: "SubscriptButton"
  }, props));
});
SubscriptButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarDeleteLinkNor;
const _createElement$12 = /*#__PURE__*/React__default['default'].createElement;
const DeleteLinkButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$12(IconButton, _extends__default['default']({
    icon: _ToolbarDeleteLinkNor || (_ToolbarDeleteLinkNor = /*#__PURE__*/_createElement$12(weDesign.ToolbarDeleteLinkNormal, null)),
    title: t('we_toolbar_remove_link'),
    tooltip: t('we_toolbar_remove_link'),
    testid: "DeleteLinkButton"
  }, props));
});
DeleteLinkButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarCheckBoxNorma;
const _createElement$11 = /*#__PURE__*/React__default['default'].createElement;
const CheckboxButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$11(IconButton, _extends__default['default']({
    icon: _ToolbarCheckBoxNorma || (_ToolbarCheckBoxNorma = /*#__PURE__*/_createElement$11(weDesign.ToolbarCheckBoxNormal, null)),
    title: t('we_toolbar_checkbox'),
    tooltip: t('we_toolbar_checkbox'),
    testid: "CheckboxButton"
  }, props));
});
CheckboxButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarTableDeleteNo;
const _createElement$10 = /*#__PURE__*/React__default['default'].createElement;
const DeleteButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$10(IconButton, _extends__default['default']({
    icon: _ToolbarTableDeleteNo || (_ToolbarTableDeleteNo = /*#__PURE__*/_createElement$10(weDesign.ToolbarTableDeleteNormal, null)),
    title: t('we_toolbar_delete'),
    tooltip: t('we_toolbar_delete'),
    testid: "DeleteButton"
  }, props));
});
DeleteButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarFontInsertNor$1;
const _createElement$$ = /*#__PURE__*/React__default['default'].createElement;
const AddTextButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$$(IconButton, _extends__default['default']({
    icon: _ToolbarFontInsertNor$1 || (_ToolbarFontInsertNor$1 = /*#__PURE__*/_createElement$$(weDesign.ToolbarFontInsertNormal, null)),
    title: t('we_toolbar_add_text'),
    tooltip: t('we_toolbar_add_text'),
    testid: "add_text_button"
  }, props));
});
AddTextButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarPictureNormal$1;
const _createElement$_ = /*#__PURE__*/React__default['default'].createElement;
const AddImageButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$_(IconButton, _extends__default['default']({
    icon: _ToolbarPictureNormal$1 || (_ToolbarPictureNormal$1 = /*#__PURE__*/_createElement$_(weDesign.ToolbarPictureNormal, null)),
    title: t('we_toolbar_picture'),
    tooltip: t('we_toolbar_picture_tooltip'),
    testid: "AddImageButton"
  }, props));
});
AddImageButton.defaultProps = { ...IconButtonDefaultProps
};

var _VideoNormal;
const _createElement$Z = /*#__PURE__*/React__default['default'].createElement;
const InsertVideoButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$Z(IconButton, _extends__default['default']({
    icon: _VideoNormal || (_VideoNormal = /*#__PURE__*/_createElement$Z(weDesign.VideoNormal, null)),
    title: t('we_toolbar_video'),
    tooltip: t('we_toolbar_insert_video'),
    testid: "InsertVideoButton"
  }, props));
});
InsertVideoButton.defaultProps = { ...IconButtonDefaultProps
};

var _ToolbarMentionNormal;
const _createElement$Y = /*#__PURE__*/React__default['default'].createElement;
const MentionButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$Y(IconButton, _extends__default['default']({
    icon: _ToolbarMentionNormal || (_ToolbarMentionNormal = /*#__PURE__*/_createElement$Y(weDesign.ToolbarMentionNormal, null)),
    title: t('we_toolbar_at'),
    tooltip: t('we_toolbar_at'),
    testid: "at_button"
  }, props));
});
MentionButton.defaultProps = { ...IconButtonDefaultProps
};

var _ExportNormal;
const _createElement$X = /*#__PURE__*/React__default['default'].createElement;
const ExportImage = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$X(IconButton, _extends__default['default']({
    icon: _ExportNormal || (_ExportNormal = /*#__PURE__*/_createElement$X(weIcon.ExportNormal, null)),
    title: t('we_toolbar_export_image'),
    tooltip: t('we_toolbar_export_image'),
    testid: "ExportImage"
  }, props));
});
ExportImage.defaultProps = { ...IconButtonDefaultProps
};

const TitleWrap$1 = weDesign.withTheme(styled__default['default'].div(["font-size:", ";color:", ";font-weight:normal;user-select:none;cursor:default;margin-left:", ";align-items:center;display:flex;flex:1;text-align:center;max-width:52px;min-width:45px;justify-content:center;div{overflow:hidden;text-overflow:ellipsis;padding-top:2px;-webkit-line-clamp:2;word-break:break-word;line-height:12px;}", ";", ""], ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  theme
}) => theme.ui.commonActionIconColor, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? '' : theme.ui.marginMini, ({
  disabled
}) => disabled && 'opacity:.35;cursor:not-allowed;', ({
  theme,
  active,
  disabled
}) => !disabled && styled.css([":hover ~ .select-toolbar{background-color:", ";}:active ~ .select-toolbar{background-color:", ";}"], active ? theme.ui.toolbarButtonClick : theme.ui.toolbarButtonHover, disabled ? active ? theme.ui.toolbarButtonSelect : theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonClick)));
const TextWarp$2 = weDesign.withTheme(styled__default['default'].div(["margin-left:", ";font-size:", ";line-height:20px;"], ({
  theme
}) => theme.ui.marginMini, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu));
const largeAndShowTitleWrap = /*#__PURE__*/styled.css(["max-width:52px;min-width:45px;", "{margin-left:0;font-size:", ";line-height:11px;display:block;overflow:hidden;text-align:center;div{overflow:hidden;text-overflow:ellipsis;padding-top:2px;-webkit-line-clamp:2;word-break:break-word;line-height:12px;}", "}"], TextWarp$2, ({
  theme
}) => theme.ui.fontSizeSmall, ({
  disabled
}) => disabled && styled.css(["opacity:0.35;"]));
const ButtonWrap$2 = weDesign.withTheme(styled__default['default'].div(["display:flex;flex-direction:", ";", " .select-toolbar{border-width:0;height:auto;padding:0;display:flex;margin:auto;cursor:", ";", "}", " .select_trigger_wrap{width:100%;.title{margin-left:2px;font-size:13px;}}.select_left_wrap{padding:", ";font-size:", ";border-right:1px solid transparent;display:flex;}.select_left_wrap .weicon{font-size:", ";}.select_right_wrap{width:12px;display:flex;justify-content:center;}.select_right_wrap .weicon{font-size:8px;margin:0;transform:rotate(0deg) scale(1);}.select_right_wrap .weicon.opened{font-size:8px;margin:0;transform:rotate(180deg) scale(1);}.select-toolbar:hover{border-width:0;", "}.select-toolbar:active{", "}", ";"], ({
  size
}) => size === TOOL_SIZE.LARGE ? 'column-reverse' : 'row', ({
  size
}) => size === TOOL_SIZE.LARGE && styled.css(["height:52px;"]), ({
  disabled
}) => disabled ? 'not-allowed' : 'default', ({
  active,
  theme,
  disabled
}) => active && `background-color: ${disabled ? theme.ui.toolbarButtonSelectDisable : theme.ui.toolbarButtonSelect};`, ({
  disabled,
  theme,
  active
}) => disabled && styled.css([".select-toolbar.disabled{background-color:", ";}"], active ? theme.ui.toolbarButtonSelectDisable : 'transparent'), ({
  theme,
  size
}) => `${size === TOOL_SIZE.MEDIUM ? theme.ui.paddingTiny : theme.ui.paddingMini} ${theme.ui.paddingMini}`, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.toolbarFontSizeIconLarge : theme.ui.toolbarFontSizeIcon, ({
  active,
  theme,
  disabled
}) => !disabled && `background-color:  ${active ? theme.ui.toolbarButtonSelectHover : theme.ui.toolbarButtonHover}; `, ({
  theme,
  disabled
}) => !disabled && `background-color :${theme.ui.toolbarButtonClick}`, ({
  size,
  showTitle
}) => size === TOOL_SIZE.LARGE && showTitle && largeAndShowTitleWrap));

var _OnIdlePlaceholder$2;
const _createElement$W = /*#__PURE__*/React__default['default'].createElement;
const IconSelect = /*#__PURE__*/React__default['default'].memo( /*#__PURE__*/React__default['default'].forwardRef((props, ref) => {
  const {
    title,
    showTitle,
    disabled,
    size,
    active,
    disabledTip,
    renderTrigger,
    children,
    value,
    visible: propsVisiable,
    onChange,
    locale,
    tooltip,
    shortcutText,
    testid,
    width,
    style,
    borderRadius,
    extraNode,
    animationPlacement,
    getContainer,
    role,
    ...restProps
  } = props;
  const contextLocale = weUtil.useGetContextLocale();
  const t = weUtil.useTranslate(contextLocale);
  const [visible, setVisible] = React.useState(propsVisiable);
  const {
    el,
    id,
    isHide,
    fineAdaptation,
    groupKey,
    isInOffScreenWrap,
    mode
  } = useVisibilitySensor(ref, testid);
  const styleProps = {
    size,
    active,
    showTitle,
    locale: locale || contextLocale
  };
  const titleNode = React.useMemo(() => {
    return /*#__PURE__*/_createElement$W("div", null, title && typeof title !== 'string' ? title : t(title));
  }, [t, title]);
  const makeTrigger = React.useCallback(val => /*#__PURE__*/_createElement$W(React__default['default'].Fragment, null, renderTrigger && renderTrigger(val), ' ', showTitle && size !== TOOL_SIZE.LARGE ? /*#__PURE__*/_createElement$W(TextWarp$2, styleProps, titleNode) : null), [renderTrigger, title, showTitle]);
  let tooltipForButton = '';

  if (typeof tooltip === 'string') {
    tooltipForButton = t(tooltip);

    if (shortcutText != null) {
      tooltipForButton += ` ${shortcutText}`;
    }
  } else {
    tooltipForButton = tooltip;
  }

  const ToolbarIconMemo = React.useMemo(() => ({
    size: size || 'medium'
  }), [size]);
  const styleWrap = React.useMemo(() => ({ ...style,
    ...{
      width,
      borderRadius
    },
    ...(visible ? {
      backgroundColor: weDesign.theme.toolbarButtonClick
    } : {})
  }), [style, visible, width, borderRadius]);
  if (isHide) return null;
  return /*#__PURE__*/_createElement$W(weIcon.ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement$W(weDesign.Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement$W(DisableWrap, {
    disabled: disabled,
    className: classnames('icon-select-layout')
  }, /*#__PURE__*/_createElement$W(ButtonWrap$2, _extends__default['default']({
    ref: el,
    "data-id": id,
    "data-mode": mode,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey,
    "data-role": role
  }, styleProps), showTitle && size === TOOL_SIZE.LARGE && /*#__PURE__*/_createElement$W(TitleWrap$1, _extends__default['default']({}, styleProps, {
    onClick: () => setVisible(true)
  }), /*#__PURE__*/_createElement$W("div", null, titleNode)), /*#__PURE__*/_createElement$W(weDesign.Select, _extends__default['default']({}, restProps, {
    className: "select-toolbar",
    onChange: onChange,
    value: value,
    style: styleWrap,
    renderTrigger: makeTrigger,
    title: disabled ? disabledTip : tooltipForButton,
    visible: visible,
    onVisibleChange: visible => setVisible(visible),
    testid: isInOffScreenWrap ? '' : testid,
    overlayClassName: "select-toolbar-overlay",
    animationPlacement: animationPlacement,
    getContainer: getContainer
  }), /*#__PURE__*/_createElement$W(React__default['default'].Fragment, null), /*#__PURE__*/_createElement$W(OnIdle, {
    placeholder: _OnIdlePlaceholder$2 || (_OnIdlePlaceholder$2 = /*#__PURE__*/_createElement$W(Placeholder$1, null))
  }, children)), extraNode))));
}));
IconSelect.defaultProps = {
  size: 'medium'
};

const TriggerWrap$4 = /*#__PURE__*/styled__default['default'].div([""]);
const OptionWrap$6 = weDesign.withTheme(styled__default['default'](weDesign.SelectOption)(["justify-content:flex-start;.icon{margin-right:8px;}"]));

const _createElement$V = /*#__PURE__*/React__default['default'].createElement;
const HorizontalAlignSelect = props => {
  const {
    locale,
    onChange,
    disabledKeys,
    title,
    titles,
    active,
    showTitle,
    size,
    role,
    ...restProps
  } = props;
  const [value, setValue] = useControlledValue(props.value, props.defaultValue);
  const t = weUtil.useTranslate(locale); // 垂直对齐的选项

  const options = React.useMemo(() => [{
    title: t('we_toolbar_align_left'),
    value: 'left',
    Icon: weDesign.ToolbarAlignLeftNormal
  }, {
    title: t('we_toolbar_align_center'),
    value: 'center',
    Icon: weDesign.ToolbarAlignCenterNormal
  }, {
    title: t('we_toolbar_align_right'),
    value: 'right',
    Icon: weDesign.ToolbarAlignRightNormal
  }, {
    title: t('we_toolbar_align_justify'),
    value: 'justify',
    Icon: weDesign.ToolbarAlignJustifyNormal
  }], [t]); // 该组件的trigger区域只显示Icon

  const renderTrigger = React.useCallback(align => {
    const index = options.findIndex(option => option.value === align);
    const currentOption = options[index];
    return /*#__PURE__*/_createElement$V(TriggerWrap$4, {
      style: {
        minWidth: 16
      }
    }, currentOption && /*#__PURE__*/_createElement$V(currentOption.Icon, null));
  }, [options]);
  const handleChange = React.useCallback(e => {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [onChange, setValue]);
  return /*#__PURE__*/_createElement$V(IconSelect, _extends__default['default']({
    value: value,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    testid: "HorizontalAlignSelect",
    title: title,
    active: active,
    size: size,
    showTitle: showTitle,
    disabledKeys: disabledKeys,
    role: role
  }, restProps), options.map(option => /*#__PURE__*/_createElement$V(OptionWrap$6, {
    value: option.value,
    key: option.value,
    testid: option.value,
    disabled: disabledKeys === null || disabledKeys === void 0 ? void 0 : disabledKeys.includes(option.value),
    title: titles[option.value]
  }, /*#__PURE__*/_createElement$V(option.Icon, {
    className: "icon"
  }), /*#__PURE__*/_createElement$V("span", null, option.title))));
};
HorizontalAlignSelect.defaultProps = {
  defaultValue: 'left',
  titles: {},
  ...IconSelectDefaultProps
};

const TriggerWrap$3 = /*#__PURE__*/styled__default['default'].div([""]);
const OptionWrap$5 = weDesign.withTheme(styled__default['default'].div(["position:relative;.icon{margin-right:8px;}"]));

var _TriggerWrap, _OnIdlePlaceholder$1;
const _createElement$U = /*#__PURE__*/React__default['default'].createElement;
const LINE_HEIGHT_DEFAULT_VALUES = [1, 1.15, 1.5, 2, 2.5, 3];

const LineHeightSelect = props => {
  const {
    lineHeightValues,
    disabled,
    onChange,
    onCustomize,
    title,
    titles,
    locale,
    ...restProps
  } = props;
  const [value, setValue] = useControlledValue(props.value, props.defaultValue);
  const t = weUtil.useTranslate(locale);
  const handleChange = React.useCallback(e => {
    if (e !== -1) {
      if (onChange) {
        onChange(e);
      }

      setValue(e);
    } else if (onCustomize) {
      onCustomize();
    }
  }, [onChange, setValue, onCustomize]); // 该组件的trigger区域只显示Icon

  const renderTrigger = React.useCallback(() => _TriggerWrap || (_TriggerWrap = /*#__PURE__*/_createElement$U(TriggerWrap$3, null, /*#__PURE__*/_createElement$U(weDesign.ToolbarLineHeightNormal, null))), []);
  const renderOptions = React.useMemo(() => (lineHeightValues || LINE_HEIGHT_DEFAULT_VALUES).map(lineHeight => /*#__PURE__*/_createElement$U(weDesign.SelectOption, {
    value: lineHeight,
    key: `${lineHeight}`,
    testid: `${lineHeight}`,
    title: titles[lineHeight]
  }, /*#__PURE__*/_createElement$U(OptionWrap$5, null, /*#__PURE__*/_createElement$U("span", null, lineHeight)))), [lineHeightValues, titles]);
  return /*#__PURE__*/_createElement$U(IconSelect, _extends__default['default']({
    value: value,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    disabled: disabled,
    testid: "LineHeightSelect",
    title: title
  }, restProps), /*#__PURE__*/_createElement$U(React__default['default'].Fragment, null), /*#__PURE__*/_createElement$U(OnIdle, {
    placeholder: _OnIdlePlaceholder$1 || (_OnIdlePlaceholder$1 = /*#__PURE__*/_createElement$U(Placeholder$1, null))
  }, /*#__PURE__*/_createElement$U(weDesign.SelectOptionGroup, null, renderOptions), typeof onCustomize === 'function' && /*#__PURE__*/_createElement$U(weDesign.SelectOption, {
    value: -1,
    key: "selectLineHeight"
  }, /*#__PURE__*/_createElement$U(OptionWrap$5, {
    className: "pseudo-option"
  }, /*#__PURE__*/_createElement$U("span", null, t('we_toolbar_line_height_select_customized_line_height'))))));
};

LineHeightSelect.defaultProps = {
  defaultValue: 1,
  titles: {},
  ...IconSelectDefaultProps
};

const _createElement$T = /*#__PURE__*/React__default['default'].createElement;
const OptionWrap$4 = weDesign.withTheme(styled__default['default'].div(["display:flex;align-items:center;span{margin-right:", ";}"], ({
  theme
}) => theme.ui.marginSmall));
const SORT_ORDERS = ['ascSheet', 'descSheet', 'ascRange', 'descRange'];
const SortDropdown = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    onSortChange,
    disabled,
    locale,
    ...restProps
  } = props;
  const [value, setValue] = weDesign.useControlledValue(props.value, props.defaultValue);
  const t = weUtil.useTranslate(locale);
  const options = React.useMemo(() => [{
    title: t('we_toolbar_table_ascending'),
    value: 'ascSheet',
    Icon: weDesign.ToolbarTableAscendingNormal
  }, {
    title: t('we_toolbar_table_descending'),
    value: 'descSheet',
    Icon: weDesign.ToolbarTableDescendingNormal
  }, {
    title: t('we_toolbar_constituency_ascending'),
    value: 'ascRange',
    Icon: weDesign.ToolbarConstituencyAscendingNormal
  }, {
    title: t('we_toolbar_constituency_descending'),
    value: 'descRange',
    Icon: weDesign.ToolbarConstituencyDescendingNormal
  }], [t]); // 该组件的trigger区域显示Icon+文字

  const renderTrigger = React.useCallback(selectedView => {
    const index = options.findIndex(option => option.value === selectedView);
    const currentOption = options[index] || options[0];
    return /*#__PURE__*/_createElement$T(React__default['default'].Fragment, null, currentOption && /*#__PURE__*/_createElement$T(currentOption.Icon, null));
  }, [options]);
  const handleChange = React.useCallback(e => {
    setValue(e);
    onSortChange && onSortChange(e);
  }, [onSortChange]);
  return /*#__PURE__*/_createElement$T(IconSelect, _extends__default['default']({
    disabled: disabled,
    value: value,
    title: t('we_toolbar_sort'),
    renderTrigger: renderTrigger,
    selectable: false,
    onChange: handleChange
  }, restProps), options.map(option => /*#__PURE__*/_createElement$T(weDesign.SelectOption, {
    value: option.value,
    key: option.value
  }, /*#__PURE__*/_createElement$T(OptionWrap$4, null, /*#__PURE__*/_createElement$T(option.Icon, {
    className: "icon"
  }), /*#__PURE__*/_createElement$T("span", null, option.title)))));
});

const TriggerWrap$2 = weDesign.withTheme(styled__default['default'].div(["font-size:", ";color:", ";display:flex;flex-wrap:nowrap;align-items:center;.title{margin-left:6px;width:56px;", ";}"], ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  theme
}) => theme.ui.commonActionIconColor, Ellipsis));
const OptionWrap$3 = weDesign.withTheme(styled__default['default'].div(["display:flex;flex-wrap:nowrap;align-items:center;.icon{margin-right:8px;}"]));

const _createElement$S = /*#__PURE__*/React__default['default'].createElement;

const TableWrapSelect = props => {
  const {
    locale,
    style,
    onChange,
    title,
    titles,
    showTitle,
    disabled,
    ...restProps
  } = props;
  const [value, setValue] = useControlledValue(props.value, props.defaultValue);
  const t = weUtil.useTranslate(locale); // 垂直对齐的选项

  const options = React.useMemo(() => [{
    title: t('we_toolbar_overflow'),
    value: 'overflow',
    Icon: weDesign.ToolbarOverflowNormal
  }, {
    title: t('we_toolbar_auto_wrap'),
    value: 'auto-wrap',
    Icon: weDesign.ToolbarAutoWrapNormal
  }, {
    title: t('we_toolbar_line_clip'),
    value: 'line-clip',
    Icon: weDesign.ToolbarLineClipNormal
  }], [t]); // 该组件的trigger区域只显示Icon

  const renderTrigger = React.useCallback(align => {
    const index = options.findIndex(option => option.value === align);
    const currentOption = options[index];
    return /*#__PURE__*/_createElement$S(TriggerWrap$2, {
      className: "we-ui-table-wrap-select-trigger",
      size: props.size,
      style: {
        minWidth: 16
      }
    }, currentOption && /*#__PURE__*/_createElement$S(React__default['default'].Fragment, null, /*#__PURE__*/_createElement$S(currentOption.Icon, null), showTitle && /*#__PURE__*/_createElement$S("span", {
      className: "title"
    }, currentOption.title)));
  }, [options, showTitle]);
  const handleChange = React.useCallback(e => {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [setValue, onChange]);
  return /*#__PURE__*/_createElement$S(IconSelect, _extends__default['default']({
    value: value,
    onChange: handleChange,
    style: style,
    renderTrigger: renderTrigger,
    title: title,
    disabled: disabled,
    testid: "TableWrapSelect"
  }, restProps), options.map(option => /*#__PURE__*/_createElement$S(weDesign.SelectOption, {
    value: option.value,
    key: option.value,
    title: titles[option.value],
    testid: 'item_' + option.value
  }, /*#__PURE__*/_createElement$S(OptionWrap$3, null, /*#__PURE__*/_createElement$S(option.Icon, {
    className: "icon"
  }), /*#__PURE__*/_createElement$S("span", null, option.title)))));
};

TableWrapSelect.defaultProps = {
  defaultValue: 'overflow',
  titles: {},
  ...IconSelectDefaultProps
};

const TriggerWrap$1 = /*#__PURE__*/styled__default['default'].div([""]);
const OptionWrap$2 = weDesign.withTheme(styled__default['default'].div([".icon{margin-right:8px;}"]));

const _createElement$R = /*#__PURE__*/React__default['default'].createElement;

const VerticalAlignSelect = props => {
  const {
    locale,
    onChange,
    disabledKeys,
    title,
    titles,
    ...restProps
  } = props;
  const [value, setValue] = useControlledValue(props.value, props.defaultValue);
  const t = weUtil.useTranslate(locale); // 垂直对齐的选项

  const options = React.useMemo(() => [{
    title: t('we_toolbar_vertical_align_top'),
    value: 'top',
    Icon: weDesign.ToolbarVerticalAlignTopNormal
  }, {
    title: t('we_toolbar_vertical_align_middle'),
    value: 'middle',
    Icon: weDesign.ToolbarVerticalAlignMiddleNormal
  }, {
    title: t('we_toolbar_vertical_align_bottom'),
    value: 'bottom',
    Icon: weDesign.ToolbarVerticalAlignBottomNormal
  }], [t]); // 该组件的trigger区域只显示Icon

  const renderTrigger = React.useCallback(align => {
    const index = options.findIndex(option => option.value === align);
    const currentOption = options[index];
    return /*#__PURE__*/_createElement$R(TriggerWrap$1, {
      style: {
        minWidth: 16
      }
    }, currentOption && /*#__PURE__*/_createElement$R(currentOption.Icon, null));
  }, [options]);
  const handleChange = React.useCallback(e => {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [setValue, onChange]);
  return /*#__PURE__*/_createElement$R(IconSelect, _extends__default['default']({
    value: value,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    title: title,
    testid: "VerticalAlignSelect"
  }, restProps), options.map(option => /*#__PURE__*/_createElement$R(weDesign.SelectOption, {
    value: option.value,
    key: option.value,
    disabled: disabledKeys === null || disabledKeys === void 0 ? void 0 : disabledKeys.includes(option.value),
    title: titles[option.value]
  }, /*#__PURE__*/_createElement$R(OptionWrap$2, null, /*#__PURE__*/_createElement$R(option.Icon, {
    className: "icon"
  }), /*#__PURE__*/_createElement$R("span", null, option.title)))));
};

VerticalAlignSelect.defaultProps = {
  defaultValue: 'top',
  titles: {},
  ...IconSelectDefaultProps
};

const TriggerWrap = /*#__PURE__*/styled__default['default'].div([""]);
const OptionWrap$1 = weDesign.withTheme(styled__default['default'](weDesign.SelectOption)(["justify-content:flex-start;min-width:auto;padding:4px 5px 4px 4px;font-size:20px;min-height:28px;margin:2px 4px;.icon{margin-right:0px;}&.selected{background-color:rgba(25,31,37,0.12);}&.selected .check-icon{display:none;}&:first-child{margin-top:0;}&:last-child{margin-bottom:0;}"]));
const IconSelectWrap = /*#__PURE__*/styled__default['default'].div([""]);

const _createElement$Q = /*#__PURE__*/React__default['default'].createElement;
const HeadingSimpleSelect = props => {
  const {
    locale,
    onChange,
    disabledKeys,
    title,
    active,
    showTitle,
    size,
    getContainer,
    role,
    ...restProps
  } = props;
  const [value, setValue] = useControlledValue(props.value, props.defaultValue);
  const t = weUtil.useTranslate(locale); // 标题的选项

  const options = React.useMemo(() => [{
    title: t('we_toolbar_font_family_ts_Title_1'),
    value: 'heading-1',
    Icon: weIcon.DocToolbarH1Normal
  }, {
    title: t('we_toolbar_font_family_ts_Title_2'),
    value: 'heading-2',
    Icon: weIcon.DocToolbarH2Normal
  }, {
    title: t('we_toolbar_font_family_ts_Title_3'),
    value: 'heading-3',
    Icon: weIcon.DocToolbarH3Normal
  }, {
    title: t('we_toolbar_font_family_ts_Title_4'),
    value: 'heading-4',
    Icon: weIcon.DocToolbarH4Normal
  }, {
    title: t('we_toolbar_reference_simple'),
    value: 'blockquote',
    Icon: weDesign.QuoteNormal
  }, {
    title: t('we_toolbar_font_family_ts_Body'),
    value: 'paragraph',
    Icon: weIcon.DocToolbarTextNormal
  }], [t]); // 该组件的trigger区域只显示Icon

  const renderTrigger = React.useCallback(align => {
    const index = options.findIndex(option => option.value === align);
    const currentOption = options[index];
    return /*#__PURE__*/_createElement$Q(TriggerWrap, {
      style: {
        minWidth: 16
      }
    }, currentOption && /*#__PURE__*/_createElement$Q(currentOption.Icon, null));
  }, [options]);
  const handleChange = React.useCallback(e => {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [onChange, setValue]);
  return /*#__PURE__*/_createElement$Q(IconSelectWrap, null, /*#__PURE__*/_createElement$Q(IconSelect, _extends__default['default']({}, restProps, {
    value: value,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    testid: "HeadingSimpleSelect",
    title: title,
    tooltip: t('we_toolbar_heading_selection'),
    active: active,
    size: size,
    showTitle: showTitle,
    disabledKeys: disabledKeys,
    role: role
  }), options.map(option => {
    // 设计变更 - 不要前面的勾，被选中的对象在列表中高亮显示
    return /*#__PURE__*/_createElement$Q(OptionWrap$1, {
      value: option.value,
      key: option.value,
      testid: option.value,
      disabled: disabledKeys === null || disabledKeys === void 0 ? void 0 : disabledKeys.includes(option.value),
      title: {
        title: option.title,
        placement: 'left'
      },
      "data-role": option.value
    }, /*#__PURE__*/_createElement$Q(option.Icon, {
      className: "icon",
      style: {
        fontSize: 20
      }
    }));
  })));
};
HeadingSimpleSelect.defaultProps = {
  defaultValue: 'paragraph',
  ...IconSelectDefaultProps
};

const TextWarp$1 = weDesign.withTheme(styled__default['default'].div(["display:flex;align-items:center;max-width:52px;min-width:40px;text-align:center;font-size:", ";text-align:center;height:24px;user-select:none;color:", ";> div{flex:1;overflow:hidden;text-overflow:ellipsis;padding-top:2px;-webkit-line-clamp:2;word-break:break-word;line-height:12px;}:hover ~ div{background-color:", ";}:active ~ div{background-color:", ";}"], ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  theme
}) => theme.ui.commonActionIconColor, ({
  theme
}) => theme.ui.toolbarButtonHover, ({
  theme
}) => theme.ui.toolbarButtonClick));
const ButtonWrap$1 = weDesign.withTheme(styled__default['default'].div(["display:flex;padding:4px 0;border-radius:", ";> *{height:20px;padding:0 2px;}:hover{background-color:", ";}:active{background-color:", ";}.left-wrap{border-right:1px solid transparent;display:flex;.weicon{font-size:20px;color:", ";}}.left-wrap .left-wrap-text{color:", ";font-size:", ";line-height:20px;padding-left:2px;user-select:none;white-space:nowrap;}.right-wrap{display:flex;align-items:center;.weicon{font-size:8px;color:", ";height:8px;", "}}", " ", " ", ""], ({
  theme
}) => theme.ui.radius, ({
  theme
}) => theme.ui.toolbarButtonHover, ({
  theme
}) => theme.ui.toolbarButtonClick, ({
  theme
}) => theme.ui.commonActionIconColor, ({
  theme
}) => theme.ui.commonActionIconColor, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  theme
}) => theme.ui.commonBaseColor2, ({
  showOverlay
}) => showOverlay && styled.css(["transform:rotate(180deg);"]), ({
  active
}) => active && styled.css(["background-color:", ";:hover{background-color:", ";}"], ({
  theme
}) => theme.ui.toolbarButtonHover, ({
  theme
}) => theme.ui.toolbarButtonClick), ({
  size
}) => size === TOOL_SIZE.SMALL && styled.css(["padding:2px 0;"]), ({
  size
}) => size === TOOL_SIZE.LARGE && styled.css(["padding:2px 0;> *{height:24px;}.left-wrap .weicon{font-size:24px;}"])));
const Warp = weDesign.withTheme(styled__default['default'].div(["display:flex;position:relative;flex-direction:column-reverse;cursor:default;", "{margin:auto;}", ""], ButtonWrap$1, ({
  disabled
}) => disabled && styled.css(["opacity:0.35;cursor:not-allowed;"])));

var _OnIdlePlaceholder, _div$3;
const _createElement$P = /*#__PURE__*/React__default['default'].createElement;
const IconMenu = /*#__PURE__*/React__default['default'].memo( /*#__PURE__*/React__default['default'].forwardRef((props, ref) => {
  const {
    icon,
    title,
    tooltip,
    shortcutText,
    showTitle,
    disabled,
    size,
    overlay,
    onVisibleChange,
    visible,
    active,
    locale,
    titleWidth,
    testid,
    showArrow,
    autoClose,
    disabledTip,
    offsetY,
    overlayStyle,
    placement,
    style,
    offsetX,
    trigger,
    getContainer,
    animationPlacement,
    extraNode,
    role = '',
    zIndex
  } = props;
  const contextLocale = weUtil.useGetContextLocale();
  const t = weUtil.useTranslate(contextLocale);
  const [showOverlay, setShowOverlay] = React.useState(false);
  React.useEffect(() => setShowOverlay(!!visible), [visible]);
  const handleVisibleChange = React.useCallback(e => {
    setShowOverlay(e);
    onVisibleChange && onVisibleChange(e);
  }, [onVisibleChange]);
  const hideOverlay = React.useCallback(() => {
    if (autoClose) {
      setShowOverlay(false);
      onVisibleChange && onVisibleChange(false);
    }
  }, [autoClose]);
  const {
    el,
    id,
    isHide,
    fineAdaptation,
    groupKey,
    isInOffScreenWrap,
    mode
  } = useVisibilitySensor(ref, testid);
  const styleProps = {
    size,
    showTitle,
    active,
    locale: locale || contextLocale,
    showOverlay
  };
  let tooltipForButton = '';

  if (typeof tooltip === 'string') {
    tooltipForButton = t(tooltip);

    if (shortcutText != null) {
      tooltipForButton += ` ${shortcutText}`;
    }
  } else {
    tooltipForButton = tooltip;
  }

  const ToolbarIconMemo = React.useMemo(() => ({
    size: size || 'medium'
  }), [size]);
  const styleWrap = React.useMemo(() => ({ ...style,
    ...(showOverlay ? {
      backgroundColor: weDesign.theme.toolbarButtonClick
    } : {})
  }), [style, showOverlay]);
  const titleNode = React.useMemo(() => {
    return /*#__PURE__*/_createElement$P("div", null, title && typeof title !== 'string' ? title : t(title));
  }, [t, title]);
  if (isHide) return null;
  return /*#__PURE__*/_createElement$P(weDesign.Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement$P(DisableWrap, {
    disabled: disabled,
    className: "icon-menu-layout menu-wrap",
    "data-testid": (testid || '') + '_wrap'
  }, /*#__PURE__*/_createElement$P(weDesign.Dropdown, {
    getContainer: getContainer,
    trigger: trigger,
    role: role,
    zIndex: zIndex,
    overlay: /*#__PURE__*/_createElement$P(OnIdle, {
      placeholder: _OnIdlePlaceholder || (_OnIdlePlaceholder = /*#__PURE__*/_createElement$P(Placeholder$1, null))
    }, /*#__PURE__*/_createElement$P(weUtil.DropdownAnimation, {
      visible: disabled ? false : showOverlay,
      onClick: hideOverlay,
      placement: animationPlacement
    }, overlay)),
    visible: disabled ? false : showOverlay,
    onVisibleChange: handleVisibleChange,
    offsetY: offsetY || (size === TOOL_SIZE.LARGE && showTitle ? -25 : 0),
    testid: isInOffScreenWrap ? '' : testid,
    overlayStyle: overlayStyle,
    placement: placement,
    offsetX: offsetX
  }, showArrow ? /*#__PURE__*/_createElement$P(Warp, _extends__default['default']({
    ref: el,
    "data-id": id,
    "data-mode": mode,
    "data-testid": isInOffScreenWrap ? '' : testid,
    key: testid,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey
  }, styleProps, {
    locale: locale || contextLocale
  }), showTitle && size === TOOL_SIZE.LARGE && /*#__PURE__*/_createElement$P(TextWarp$1, styleProps, /*#__PURE__*/_createElement$P("div", null, titleNode)), /*#__PURE__*/_createElement$P(weDesign.Tooltip, {
    title: tooltipForButton,
    disabled: showOverlay
  }, /*#__PURE__*/_createElement$P(ButtonWrap$1, _extends__default['default']({}, styleProps, {
    style: styleWrap,
    className: "button-box"
  }), /*#__PURE__*/_createElement$P("div", {
    className: "left-wrap"
  }, /*#__PURE__*/_createElement$P(weIcon.ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement$P("div", null, icon)), showTitle && size !== TOOL_SIZE.LARGE && /*#__PURE__*/_createElement$P("div", {
    className: "left-wrap-text",
    style: {
      width: titleWidth
    }
  }, titleNode)), _div$3 || (_div$3 = /*#__PURE__*/_createElement$P("div", {
    className: "right-wrap"
  }, /*#__PURE__*/_createElement$P(weDesign.ArrowDownLineNormal, null))))), extraNode) : /*#__PURE__*/_createElement$P(IconButton, _extends__default['default']({}, props, {
    extraNode: extraNode,
    style: styleWrap,
    testid: isInOffScreenWrap ? '' : testid,
    tooltip: showOverlay ? null : tooltipForButton
  })))));
}));
IconMenu.defaultProps = {
  size: 'medium',
  showArrow: true,
  autoClose: true
};

var _ToolbarInsertNormal;
const _createElement$O = /*#__PURE__*/React__namespace.createElement;
const InsertButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$O(IconMenu, _extends__default['default']({
    visible: visible,
    icon: _ToolbarInsertNormal || (_ToolbarInsertNormal = /*#__PURE__*/_createElement$O(weDesign.ToolbarInsertNormal, null)),
    title: t('we_toolbar_insert'),
    tooltip: t('we_toolbar_insert'),
    onVisibleChange: handleVisibleChange,
    testid: "InsertButton"
  }, props));
});
InsertButton.defaultProps = {};

var _ToolbarFormatNormal;
const _createElement$N = /*#__PURE__*/React__namespace.createElement;
const ConditionalFormattingButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$N(IconMenu, _extends__default['default']({
    visible: visible,
    icon: _ToolbarFormatNormal || (_ToolbarFormatNormal = /*#__PURE__*/_createElement$N(weDesign.ToolbarFormatNormal, null)),
    title: t('we_toolbar_format'),
    tooltip: t('we_toolbar_format'),
    onVisibleChange: handleVisibleChange,
    testid: "ConditionalFormattingButton"
  }, props));
});
ConditionalFormattingButton.defaultProps = {};

var _ToolbarFormulasNorma;
const _createElement$M = /*#__PURE__*/React__namespace.createElement;
const FormulaButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$M(IconMenu, _extends__default['default']({
    visible: visible,
    icon: _ToolbarFormulasNorma || (_ToolbarFormulasNorma = /*#__PURE__*/_createElement$M(weDesign.ToolbarFormulasNormal, null)),
    title: t('we_toolbar_formulas'),
    tooltip: t('we_toolbar_formulas_tooltip'),
    onVisibleChange: handleVisibleChange,
    testid: "FormulaButton"
  }, props));
});
FormulaButton.defaultProps = {};

var _ToolbarFrozenNormal;
const _createElement$L = /*#__PURE__*/React__namespace.createElement;
const FrozenButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$L(IconMenu, _extends__default['default']({
    visible: visible,
    icon: props.icon || _ToolbarFrozenNormal || (_ToolbarFrozenNormal = /*#__PURE__*/_createElement$L(weDesign.ToolbarFrozenNormal, null)),
    title: t('we_toolbar_frozen'),
    tooltip: t('we_toolbar_frozen'),
    onVisibleChange: handleVisibleChange,
    testid: "FrozenButton"
  }, props));
});
FrozenButton.defaultProps = {};

var _ToolbarPictureNormal;
const _createElement$K = /*#__PURE__*/React__namespace.createElement;
const ImageButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$K(IconMenu, _extends__default['default']({
    visible: visible,
    icon: _ToolbarPictureNormal || (_ToolbarPictureNormal = /*#__PURE__*/_createElement$K(weDesign.ToolbarPictureNormal, null)),
    title: t('we_toolbar_picture'),
    tooltip: t('we_toolbar_picture_tooltip'),
    onVisibleChange: handleVisibleChange,
    testid: "ImageButton"
  }, props));
});
ImageButton.defaultProps = {};

var _ToolbarFileNormal;
const _createElement$J = /*#__PURE__*/React__default['default'].createElement;
const FileButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$J(IconMenu, _extends__default['default']({
    testid: "file_button",
    icon: _ToolbarFileNormal || (_ToolbarFileNormal = /*#__PURE__*/_createElement$J(weDesign.ToolbarFileNormal, null)),
    title: t('we_toolbar_file_button'),
    tooltip: t('we_toolbar_file_tooltip')
  }, props));
});
FileButton.defaultProps = {};

var _ToolbarTableNormal;
const _createElement$I = /*#__PURE__*/React__default['default'].createElement;
const TableButton$1 = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$I(IconMenu, _extends__default['default']({
    testid: "table_button",
    icon: _ToolbarTableNormal || (_ToolbarTableNormal = /*#__PURE__*/_createElement$I(weDesign.ToolbarTableNormal, null)),
    title: t('we_toolbar_table'),
    tooltip: t('we_toolbar_table_tooltip')
  }, props));
});
TableButton$1.defaultProps = {};

var _ToolbarLockNormal;
const _createElement$H = /*#__PURE__*/React__default['default'].createElement;
const LockMenuButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$H(IconMenu, _extends__default['default']({
    testid: "LockMenuButton",
    icon: props.icon || _ToolbarLockNormal || (_ToolbarLockNormal = /*#__PURE__*/_createElement$H(weDesign.ToolbarLockNormal, null)),
    title: t('we_toolbar_lock'),
    tooltip: t('we_toolbar_lock')
  }, props));
});
LockMenuButton.defaultProps = {};

var _ToolbarShapeInsertNo;
const _createElement$G = /*#__PURE__*/React__namespace.createElement;
const ShapeInsertButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$G(IconMenu, _extends__default['default']({
    visible: visible,
    icon: _ToolbarShapeInsertNo || (_ToolbarShapeInsertNo = /*#__PURE__*/_createElement$G(weDesign.ToolbarShapeInsertNormal, null)),
    title: t('we_toolbar_shape_insert'),
    tooltip: t('we_toolbar_shape_insert'),
    onVisibleChange: handleVisibleChange,
    testid: "ShapeInsertButton"
  }, props));
});
ShapeInsertButton.defaultProps = {};

var _ToolbarTodoListNorma;
const _createElement$F = /*#__PURE__*/React__namespace.createElement;
const TaskMenuButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$F(IconMenu, _extends__default['default']({
    visible: visible,
    icon: _ToolbarTodoListNorma || (_ToolbarTodoListNorma = /*#__PURE__*/_createElement$F(weDesign.ToolbarTodoListNormal, null)),
    title: t('we_toolbar_task_list'),
    tooltip: t('we_toolbar_task_list'),
    onVisibleChange: handleVisibleChange,
    testid: "TaskMenuButton"
  }, props));
});
TaskMenuButton.defaultProps = {};

var _MenuGroupNormal;
const _createElement$E = /*#__PURE__*/React__default['default'].createElement;
const MenuButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$E(IconMenu, _extends__default['default']({
    testid: "menu_button",
    showArrow: false,
    overlayStyle: {
      backgroundColor: 'transparent',
      boxShadow: 'none',
      border: 'none'
    },
    icon: _MenuGroupNormal || (_MenuGroupNormal = /*#__PURE__*/_createElement$E(weIcon.MenuGroupNormal, null)),
    title: t('we_toolbar_menu_button')
  }, props));
});
MenuButton.defaultProps = {};

var _ToolbarMoreNormal$3;
const _createElement$D = /*#__PURE__*/React__default['default'].createElement;
const MoreButton = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    locale,
    animationPlacement
  } = props;
  const t = weUtil.useTranslate(locale);
  return /*#__PURE__*/_createElement$D(IconMenu, _extends__default['default']({
    testid: "more_button",
    showArrow: false,
    offsetY: 4,
    overlayStyle: {
      backgroundColor: 'transparent',
      boxShadow: 'none',
      border: 'none'
    },
    icon: _ToolbarMoreNormal$3 || (_ToolbarMoreNormal$3 = /*#__PURE__*/_createElement$D(weDesign.ToolbarMoreNormal, null)),
    animationPlacement: animationPlacement,
    title: t('we_toolbar_more_button')
  }, props));
});
MoreButton.defaultProps = {};

var _svg$2, _svg6$1, _svg8, _svg9;
const _createElement$C = /*#__PURE__*/React__default['default'].createElement;
const StyleIcon$1 = () => {
  return _svg$2 || (_svg$2 = /*#__PURE__*/_createElement$C("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "20",
    height: "20",
    className: "icon",
    viewBox: "0 0 1024 1024",
    fill: "currentColor"
  }, /*#__PURE__*/_createElement$C("path", {
    d: "M588.8 153.6l7.373.358a76.8 76.8 0 0169.12 69.07l.307 7.372v128H896a76.8 76.8 0 0176.442 69.427l.358 7.373v409.6a76.8 76.8 0 01-69.427 76.442L896 921.6H332.8a76.8 76.8 0 01-76.442-69.427L256 844.8l-.051-230.4H128l-7.373-.358a76.8 76.8 0 01-69.12-69.07L51.2 537.6V230.4l.358-7.373a76.8 76.8 0 0169.07-69.12L128 153.6h460.8zm332.8 409.6H307.2v281.6l.41 4.608a25.6 25.6 0 0020.582 20.582l4.608.41H896l4.608-.41a25.6 25.6 0 0020.582-20.582l.41-4.608V563.2zM614.4 665.6v51.2H409.6v-51.2h204.8zm-25.6-460.8H128l-4.608.41a25.6 25.6 0 00-20.582 20.582l-.41 4.608v307.2l.41 4.608a25.6 25.6 0 0020.582 20.582l4.608.41h127.949v-128a76.8 76.8 0 0169.427-76.442l7.424-.358h281.6v-128l-.41-4.608a25.6 25.6 0 00-16.281-19.405l-4.301-1.177-4.608-.41zM896 409.6H332.8l-4.608.41a25.6 25.6 0 00-20.582 20.582l-.41 4.608V512h614.4v-76.8l-.41-4.608A25.6 25.6 0 00896 409.6z"
  })));
};
const TextSmallIcon$1 = () => _svg6$1 || (_svg6$1 = /*#__PURE__*/_createElement$C("svg", {
  width: "16",
  height: "16",
  viewBox: "0 0 16 16",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_createElement$C("path", {
  d: "M1.51835 14.4847C0.0538834 13.0202 0.0538834 10.6458 1.51835 9.18136L3.87537 6.82434C5.33984 5.35987 7.71421 5.35987 9.17867 6.82434L9.76793 7.41359L9.17867 8.00285L8.58942 7.41359C7.45039 6.27456 5.60366 6.27456 4.46463 7.41359L2.1076 9.77061C0.968576 10.9096 0.968576 12.7564 2.1076 13.8954C3.24663 15.0344 5.09336 15.0344 6.23239 13.8954L8.29479 11.833L8.88404 12.4223L6.82165 14.4847C5.35718 15.9491 2.98281 15.9491 1.51835 14.4847Z",
  fill: "#171A1D"
}), /*#__PURE__*/_createElement$C("path", {
  d: "M9.76793 2.11029L7.70553 4.17268L7.11628 3.58343L9.17867 1.52103C10.6431 0.0565679 13.0175 0.0565679 14.482 1.52103C15.9464 2.9855 15.9464 5.35987 14.482 6.82433L12.1249 9.18136C10.6605 10.6458 8.28611 10.6458 6.82165 9.18136L6.23239 8.5921L6.82165 8.00285L7.4109 8.5921C8.54993 9.73113 10.3967 9.73113 11.5357 8.5921L13.8927 6.23508C15.0317 5.09605 15.0317 3.24932 13.8927 2.11029C12.7537 0.971261 10.907 0.971261 9.76793 2.11029Z",
  fill: "#171A1D"
})));
const AbstractSmallIcon = () => _svg8 || (_svg8 = /*#__PURE__*/_createElement$C("svg", {
  width: "18",
  height: "13",
  viewBox: "0 0 18 13",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_createElement$C("rect", {
  x: "-0.5",
  y: "0.5",
  width: "17",
  height: "12",
  rx: "0.5",
  transform: "matrix(-1 0 0 1 17 0)",
  stroke: "#111F2C",
  strokeOpacity: "0.85"
}), /*#__PURE__*/_createElement$C("rect", {
  width: "10",
  height: "1",
  transform: "matrix(-1 0 0 1 14 4)",
  fill: "#111F2C",
  fillOpacity: "0.85"
}), /*#__PURE__*/_createElement$C("rect", {
  width: "6",
  height: "1",
  transform: "matrix(-1 0 0 1 10 8)",
  fill: "#111F2C",
  fillOpacity: "0.85"
})));
const PreviewSmallIcon$1 = () => _svg9 || (_svg9 = /*#__PURE__*/_createElement$C("svg", {
  width: "16",
  height: "14",
  viewBox: "0 0 16 14",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_createElement$C("rect", {
  x: "-0.5",
  y: "0.5",
  width: "15",
  height: "7",
  rx: "0.5",
  transform: "matrix(-1 0 0 1 15 3)",
  stroke: "#111F2C",
  strokeOpacity: "0.85"
}), /*#__PURE__*/_createElement$C("rect", {
  width: "16",
  height: "1",
  transform: "matrix(-1 0 0 1 16 0)",
  fill: "#111F2C",
  fillOpacity: "0.85"
}), /*#__PURE__*/_createElement$C("rect", {
  width: "16",
  height: "1",
  transform: "matrix(-1 0 0 1 16 13)",
  fill: "#111F2C",
  fillOpacity: "0.85"
})));

const IconBox$1 = /*#__PURE__*/styled__default['default'].span(["position:relative;width:", "px;height:", "px;"], p => p.size ? p.size : 16, p => p.size ? p.size : 16);
const SelectGalleryBox$2 = /*#__PURE__*/styled__default['default'].div(["width:100%;height:100%;padding:5px;display:flex;flex-direction:column;align-items:center;box-sizing:border-box;border-radius:4px;background:#f2f2f6;transition:0.2s;transition-timing-function:cubic-bezier(0.55,0.085,0.68,0.53) both;&:hover{background-color:#e6e7ec;}"]);
const StyleSelectIconContainer$2 = /*#__PURE__*/styled__default['default'].div(["flex-shrink:1;width:100%;height:calc(100% - 17px);text-align:center;display:flex;align-items:center;justify-content:center;& img{width:100%;height:100%;object-fit:contain;}"]);
const StyleSelectFontBox$2 = /*#__PURE__*/styled__default['default'].div(["flex-shrink:0;width:100%;height:17px;font-size:12px;line-height:17px;box-sizing:border-box;text-align:center;"]);
const MenuTitleIconBox = /*#__PURE__*/styled__default['default'].div(["width:32px;display:flex;justify-content:space-between;align-items:center;"]);
const InlineToolbarBlock = /*#__PURE__*/styled__default['default'].div(["height:28px;border-radius:4px;overflow:hidden;box-sizing:content-box;cursor:default;", " &.fade-in{-webkit-animation:fade-in 0.25s cubic-bezier(0.55,0.085,0.68,0.53) both;animation:fade-in 0.25s cubic-bezier(0.55,0.085,0.68,0.53) both;}@-webkit-keyframes fade-in{0%{opacity:0;}100%{opacity:1;}}@keyframes fade-in{0%{opacity:0;}100%{opacity:1;}}&.fade-out{-webkit-animation:fade-out 0.25s ease-out both;animation:fade-out 0.25s ease-out both;}@-webkit-keyframes fade-out{0%{opacity:1;}100%{opacity:0;}}@keyframes fade-out{0%{opacity:1;}100%{opacity:0;}}& *{box-sizing:border-box;}"], ({
  toolbarDefault = false
}) => toolbarDefault ? styled.css(["opacity:1;display:block;"]) : `
    opacity: 0;
    display: none;
  `);
const MenuTriggerButton = /*#__PURE__*/styled__default['default'].div(["background-color:", ";"], props => props.active ? 'rgba(17,31,44,0.16)' : 'rgba(17,31,44,0.08)');
const TitleWithLeftMargin = /*#__PURE__*/styled__default['default'].span(["margin-left:3px;"]);
const CONTRAST_BUTTON_BG_COLOR = 'rgba(240, 240, 241, 0.9)';
const InlineToolbarContainer = /*#__PURE__*/styled__default['default'].div(["display:flex;justify-content:flex-start;& [class*='button-box']{border-radius:unset;}& > *{&:not(.toolbar-menu){background-color:", ";}&:not(:last-child){margin-right:1px;}}& .toolbar-menu{& > *{padding:0;margin:0;height:100%;background-color:", ";&:not(:last-child){margin-right:1px;}}& .level-0-wrap{height:100%;}& .level-0-inner-wrap{height:100%;border-radius:unset;margin:0;&:hover:not(.opened){background-color:rgba(17,31,44,0.08);}&.opened{background-color:rgba(17,31,44,0.12);}& .level-0-trigger{& > *{margin-right:0px;}}}}"], props => props.buttonStyle === 'contrast' ? CONTRAST_BUTTON_BG_COLOR : 'rgba(17,31,44,0.08)', props => props.buttonStyle === 'contrast' ? CONTRAST_BUTTON_BG_COLOR : 'rgba(17,31,44,0.08)');

const InlineToolbarContext$1 = /*#__PURE__*/React.createContext({});

var _ArrowDownLineNormal, _ToolbarMoreNormal$2, _IconBox$1, _ToolbarMoreNormal2;
const _createElement$B = /*#__PURE__*/React__default['default'].createElement;
// 依次为：风格展示、更多按钮、自定义菜单、一般按钮

const typeToIcon = {
  style: /*#__PURE__*/_createElement$B(StyleIcon$1, null),
  more: /*#__PURE__*/_createElement$B(weDesign.ToolbarMoreNormal, null),
  menu: /*#__PURE__*/_createElement$B(weDesign.MenuGroupNormal, null),
  button: /*#__PURE__*/_createElement$B(weDesign.ToolbarArrowDownTriangleNormal, null)
}; // 根据 menu 的 name 转 icon
// 这是 toolbar「更多」功能中的 menu

const nameToIcon = {
  download: /*#__PURE__*/_createElement$B(weDesign.ToolbarDownloadNormal, null),
  open: /*#__PURE__*/_createElement$B(weDesign.OpenNormal, null),
  refresh: /*#__PURE__*/_createElement$B(weDesign.RefreshNormalNormal, null),
  delete: /*#__PURE__*/_createElement$B(weDesign.ToolbarDeleteNormal, null),
  copy: /*#__PURE__*/_createElement$B(weDesign.ToolbarCopyNormal, null),
  cut: /*#__PURE__*/_createElement$B(weDesign.ToolbarCutNormal, null)
}; // 风格展示，根据类型转 icon
// 依次为：文本、摘要卡片、预览卡片

const styleTypeToIcon = {
  text: /*#__PURE__*/_createElement$B(TextSmallIcon$1, null),
  abstract: /*#__PURE__*/_createElement$B(AbstractSmallIcon, null),
  preview: /*#__PURE__*/_createElement$B(PreviewSmallIcon$1, null),
  artCard: /*#__PURE__*/_createElement$B(PreviewSmallIcon$1, null) // TODO 待更新为 art 所需 icon

};
const clearStyle = {
  width: 'unset',
  height: 'unset',
  padding: 'unset',
  margin: 'unset',
  minWidth: 'unset',
  borderRadius: 'unset'
};

function FallbackImage({
  src,
  alt
}) {
  const [loadFailed, setLoadState] = React.useState(false);
  const handleOnError = React.useCallback(() => {
    setLoadState(true);
  }, []);
  return loadFailed ? /*#__PURE__*/_createElement$B(weIcon.NopicNormal, {
    style: {
      width: '40px',
      height: '40px',
      color: '#9FA1A3'
    }
  }) : /*#__PURE__*/_createElement$B("img", {
    src: src,
    onError: handleOnError,
    alt: alt
  });
}

const Toolbar = props => {
  var _toolbar$find, _InlineToolbarContain;

  const {
    isFolded: isFoldedFromContext,
    onVisibleChange,
    isToolbarVisible,
    toolbarDefault
  } = React__default['default'].useContext(InlineToolbarContext$1);
  const {
    toolbarConfigs: toolbar,
    locale,
    isFolded = isFoldedFromContext,
    getContainer,
    buttonStyle = 'default'
  } = props;
  const t = weUtil.useTranslate(locale); // 风格选择状态

  const [styleSelectValue, setStyleSelectValue] = React.useState(Number(toolbar === null || toolbar === void 0 ? void 0 : (_toolbar$find = toolbar.find(item => item.type === 'style')) === null || _toolbar$find === void 0 ? void 0 : _toolbar$find.defaultValue));
  const [className, setClassName] = React.useState('');
  const [display, setDisplay] = React.useState(null); // 风格切换中，大图资源

  const nameToTextAndImage = React.useMemo(() => ({
    text: {
      title: t('we_toolbar_text'),
      icon: 'https://img.alicdn.com/imgextra/i4/O1CN01SVRR9O1cHOarEhMi5_!!6000000003575-2-tps-180-140.png'
    },
    abstract: {
      title: t('we_toolbar_abstract'),
      icon: 'https://img.alicdn.com/imgextra/i2/O1CN01fPfwUo1RSskY9PviT_!!6000000002111-2-tps-180-140.png'
    },
    preview: {
      title: t('we_toolbar_preview'),
      icon: 'https://img.alicdn.com/imgextra/i1/O1CN01I7NSjK1RPfypgAwaG_!!6000000002104-2-tps-180-140.png'
    },
    artCard: {
      title: t('we_toolbar_artCard'),
      icon: 'https://img.alicdn.com/imgextra/i4/O1CN01FpZNeM1uZPJXxerke_!!6000000006051-2-tps-378-278.png'
    }
  }), []);
  if (!toolbar) return /*#__PURE__*/_createElement$B(React__default['default'].Fragment, null); // 根据 MoreMenuConfiguration[][] 进行「更多菜单」渲染

  const moreMenuRender = menu => {
    const menuItemList = [];
    menu.forEach((items, index) => {
      // 如果 toolbar 折叠，即其他功能需要整合进「更多菜单」中
      // 需要在上方添加一根分割线 <MenuDivider/>
      if (index + Number(isFolded) > 0 && toolbar.length > 1) {
        menuItemList.push( /*#__PURE__*/_createElement$B(weDesign.MenuDivider, {
          key: `divider-${index}`
        }));
      } // 对于每一组


      items.forEach((item, innerIndex) => {
        // 获取 name
        const {
          name = 'refresh'
        } = item; // 如果 name 为预定菜单选项
        // 则为其提供标题、icon 等信息

        const {
          title = t(`we_toolbar_${name}`),
          icon = nameToIcon[name],
          onClick,
          testId,
          role
        } = item;
        menuItemList.push( /*#__PURE__*/_createElement$B(weDesign.MenuItem, {
          key: `more-menu-${index}-${innerIndex}`,
          menuKey: `more-menu-${index}-${innerIndex}`,
          icon: icon,
          testid: testId,
          role: role,
          onClick: onClick
        }, title));
      });
    });
    return menuItemList;
  }; // 自定义菜单渲染


  const normalMenuRender = (index, toolbar) => {
    // type === 'menu'
    const {
      type
    } = toolbar;
    const {
      title,
      icon = typeToIcon[type],
      overlay,
      active,
      testId
    } = toolbar;
    return /*#__PURE__*/_createElement$B(MenuTriggerButton, {
      key: `submenu-${index}`,
      active: active
    }, /*#__PURE__*/_createElement$B(weDesign.SubMenu, {
      key: `submenu-${index}`,
      overlayStyle: {
        padding: 0
      },
      title: /*#__PURE__*/_createElement$B(TitleWithLeftMargin, null, title),
      icon: icon
    }, /*#__PURE__*/_createElement$B(weDesign.MenuItem, {
      key: `menu-{index}`,
      testid: testId,
      hoverable: false,
      menuKey: `menu-${index}`,
      style: { ...clearStyle
      }
    }, overlay)));
  }; // 风格切换菜单渲染


  const styleMenuRender = (index, toolbar) => {
    const {
      type
    } = toolbar;
    const {
      icon = typeToIcon[type],
      onChange,
      options,
      optionsTestId,
      testId
    } = toolbar; // 若没有提供 options 选项，也不进行渲染

    if (!options || options.length < 1) {
      return /*#__PURE__*/_createElement$B(React__default['default'].Fragment, null);
    } // 结构：SubMenu - MenuItem - SelectGallery（风格切换组件）


    return /*#__PURE__*/_createElement$B(weDesign.SubMenu, {
      key: `submenu-${index}`,
      icon: /*#__PURE__*/_createElement$B(MenuTitleIconBox, null, icon, _ArrowDownLineNormal || (_ArrowDownLineNormal = /*#__PURE__*/_createElement$B(weDesign.ArrowDownLineNormal, null))),
      testid: testId,
      title: "",
      overlayStyle: {
        padding: 0
      }
    }, /*#__PURE__*/_createElement$B(weDesign.MenuItem, {
      key: "style-select",
      hoverable: false,
      menuKey: "style-select",
      style: { ...clearStyle
      }
    }, /*#__PURE__*/_createElement$B(weDesign.SelectGallery, {
      groups: [{
        title: t('we_toolbar_style_select'),
        showDivider: false,
        items: options.map((name, index) => {
          const {
            title,
            icon
          } = nameToTextAndImage[name]; // 自定义组件（风格切换每一个 item）

          const node = /*#__PURE__*/_createElement$B(SelectGalleryBox$2, {
            key: index
          }, /*#__PURE__*/_createElement$B(StyleSelectIconContainer$2, null, /*#__PURE__*/_createElement$B(FallbackImage, {
            src: icon
          })), /*#__PURE__*/_createElement$B(StyleSelectFontBox$2, null, title));

          return {
            id: index,
            node,
            testID: optionsTestId && optionsTestId[name]
          };
        })
      }],
      style: {
        height: 151,
        border: 'none',
        boxShadow: 'none',
        padding: '2px 12px'
      },
      itemsPerRow: options.length,
      value: styleSelectValue,
      onChange: id => {
        setStyleSelectValue(id);
        onChange && onChange(id);
      }
    })));
  };

  const toolbarList = []; // 如果折叠或者只有一个按钮，那么直接显示，否则：

  if (!isFolded || toolbar.length < 2) {
    for (let i = 0; i < toolbar.length; i++) {
      // 类型：button（一般 button），menu（自定义菜单），style（风格切换），more（更多菜单）
      const {
        type
      } = toolbar[i]; // toolbar 除一般 button 外，用 menu 实现
      // button 独立于 menu 外

      if (type === 'button') {
        const {
          title,
          icon = typeToIcon[type],
          onClick,
          active,
          testId
        } = toolbar[i];
        toolbarList.push( /*#__PURE__*/_createElement$B(IconButton, {
          key: `button-${i}`,
          icon: icon,
          active: active,
          onClick: onClick,
          tooltip: title,
          testid: testId
        }));
      } else {
        // 非 button 组件用 menu 实现
        const menuList = [];
        let j = i;

        for (; j < toolbar.length && toolbar[j].type !== 'button'; j++) {
          const {
            type
          } = toolbar[j];

          if (type === 'menu') {
            menuList.push(normalMenuRender(j, toolbar[j]));
          } else if (type === 'style') {
            menuList.push(styleMenuRender(j, toolbar[j]));
          } else if (type === 'more') {
            const {
              menu
            } = toolbar[j];

            if (!menu) {
              continue;
            }

            menuList.push( /*#__PURE__*/_createElement$B(weDesign.SubMenu, {
              menuKey: "more-menu",
              key: "more-menu",
              icon: _ToolbarMoreNormal$2 || (_ToolbarMoreNormal$2 = /*#__PURE__*/_createElement$B(weDesign.ToolbarMoreNormal, null)),
              title: ""
            }, moreMenuRender(menu)));
          }
        }

        i = j + 1; // TODO: 给 Menu 添加 getContainer

        toolbarList.push( /*#__PURE__*/_createElement$B(weDesign.Menu, {
          getContainer: getContainer,
          key: `menu-${i}`,
          onSubmenuOpenedKeysChange: keys => onVisibleChange && onVisibleChange(Boolean(keys.length > 0)),
          className: "toolbar-menu",
          style: {
            height: 28
          },
          mode: weDesign.EMenuMode.horizontal,
          destroyOverlayWhenInvisible: true
        }, menuList));
      }
    }
  } else {
    // 只渲染一个按钮
    // 1. 只有一个按钮
    // 2. 折叠
    let menuItemList = [];
    toolbar.forEach((item, index) => {
      const {
        type
      } = item;

      if (type === 'more') {
        const {
          menu
        } = item;

        if (!menu) {
          return;
        }

        menuItemList = menuItemList.concat(moreMenuRender(menu));
      } else if (type === 'style') {
        // 与非折叠状态不同
        // style 作为 SubMenu 二级菜单渲染
        const {
          options,
          onChange,
          optionsTestId,
          testId
        } = item;

        if (!options || options.length < 1) {
          return;
        }

        menuItemList.push( /*#__PURE__*/_createElement$B(weDesign.SubMenu, {
          icon: _IconBox$1 || (_IconBox$1 = /*#__PURE__*/_createElement$B(IconBox$1, {
            size: 20
          }, /*#__PURE__*/_createElement$B(StyleIcon$1, null))),
          testid: testId,
          menuKey: "style_select",
          key: "style_select",
          title: t('we_toolbar_style_select'),
          showSelect: true
        }, options.map((item, index) => {
          return /*#__PURE__*/_createElement$B(weDesign.MenuItem, {
            icon: styleTypeToIcon[item],
            testid: optionsTestId && optionsTestId[item],
            menuKey: index + '',
            key: index,
            onClick: () => {
              onChange && onChange(index);
              setStyleSelectValue(index);
            }
          }, t(`we_toolbar_${item}`));
        })));
      } else if (type === 'button') {
        // button 也作为一个菜单选项渲染
        const {
          icon,
          title,
          testId,
          active = false,
          onClick
        } = item;
        menuItemList.push(MenuSelectRectRender( /*#__PURE__*/_createElement$B(weDesign.MenuItem, {
          icon: icon,
          key: `button-${index}`,
          menuKey: `button-${index}`,
          testid: testId,
          onClick: (_, e) => {
            onClick && onClick(e);
          }
        }, title), active, index));
      } else {
        // 自定义菜单
        const {
          title,
          icon,
          overlay,
          testId,
          active = false
        } = item;
        menuItemList.push(MenuSelectRectRender( /*#__PURE__*/_createElement$B(weDesign.SubMenu, {
          key: `subment-${index}`,
          overlayStyle: {
            padding: 0
          },
          icon: icon,
          title: title
        }, /*#__PURE__*/_createElement$B(weDesign.MenuItem, {
          hoverable: false,
          testid: testId,
          style: { ...clearStyle
          },
          menuKey: `button-${index}`,
          key: `button-${index}`
        }, overlay)), active, index));
      }
    });
    toolbarList.push( /*#__PURE__*/_createElement$B(IconMenu, {
      getContainer: getContainer,
      key: "icon-menu",
      icon: _ToolbarMoreNormal2 || (_ToolbarMoreNormal2 = /*#__PURE__*/_createElement$B(weDesign.ToolbarMoreNormal, null)),
      showArrow: false,
      trigger: "click",
      onVisibleChange: onVisibleChange,
      overlay: /*#__PURE__*/_createElement$B(weDesign.Menu, {
        className: "toolbar-menu",
        selectedKeys: [styleSelectValue + ''],
        autoClose: true
      }, menuItemList)
    }));
  }

  React.useEffect(() => {
    // hover 控制 toolbar 显示
    if (toolbarDefault === undefined || toolbarDefault === null) {
      if (isToolbarVisible === true) {
        setDisplay('block');
        setTimeout(() => {
          setClassName('fade-in');
        }, 20);
      } else if (isToolbarVisible === false) {
        setClassName('fade-out');
        setTimeout(() => {
          setDisplay('none');
          setClassName('');
        }, 150);
      }
    }
  }, [isToolbarVisible]);
  return React.useMemo(() => /*#__PURE__*/_createElement$B(InlineToolbarBlock, {
    toolbarDefault: toolbarDefault,
    onClick: e => {
      e.stopPropagation();
      e.preventDefault();
    },
    onMouseDown: e => e.stopPropagation(),
    className: className,
    style: display ? {
      display
    } : {}
  }, _InlineToolbarContain || (_InlineToolbarContain = /*#__PURE__*/_createElement$B(InlineToolbarContainer, {
    buttonStyle: buttonStyle
  }, toolbarList))), [isFolded, toolbar, locale, display, className, styleSelectValue, buttonStyle]);
}; // 统一修改 Menu 选择样式

const MenuSelectRectRender = (children, active, index = 0) => /*#__PURE__*/_createElement$B("div", {
  key: `menuSelectRectRender-${index}`,
  style: {
    width: '100%',
    height: 34,
    position: 'relative',
    boxSizing: 'border-box'
  }
}, /*#__PURE__*/_createElement$B("div", {
  style: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    padding: '0 4px',
    boxSizing: 'border-box'
  }
}, /*#__PURE__*/_createElement$B("div", {
  style: {
    width: '100%',
    height: '100%',
    borderRadius: 4,
    backgroundColor: active ? 'rgba(17,31,44,0.08)' : 'unset'
  }
})), children);

const _createElement$A = /*#__PURE__*/React__default['default'].createElement;
const id = weDesign.uuid();
const THROTTLE_TIME = 100; // 延迟显示 & 消失

const DEALY_APPEAR = 100;
const DELAY_DISAPPEAR = 200;
const CardContainerBox = /*#__PURE__*/styled__default['default'].div(["box-sizing:border-box;"]);
const CardContainer = props => {
  const cardContainerBoxRef = React.useRef(null);
  const [mouseEnter, setMouseEnter] = React.useState(false);
  const [isFolded, setIsFolded] = React.useState(false);
  const [menuVisible, setMenuVisible] = React.useState(false);
  const [delay, setDelay] = React.useState(setTimeout(() => {}, 0));
  const {
    children,
    toolbarVisible,
    className,
    thresholdWidth = -Infinity
  } = props;
  let preDate = React.useMemo(() => Date.now(), []);

  const onVisibleChange = e => {
    setMenuVisible(e);
  };

  React.useEffect(() => {
    if (!cardContainerBoxRef.current) return;
    const resizeObserve = new ResizeObserver__default['default'](entries => {
      const entry = entries.find(item => item.target.getAttribute('data-id') === `card-container-${id}`);
      entry && setIsFolded(entry.contentRect.width < thresholdWidth);
    });

    if (resizeObserve && cardContainerBoxRef.current) {
      resizeObserve.observe(cardContainerBoxRef.current);
    }

    return () => {
      if (resizeObserve) {
        resizeObserve.disconnect();
      }
    };
  }, [cardContainerBoxRef]);
  React.useEffect(() => {
    return () => {
      clearTimeout(delay);
    };
  }, []);

  const handleMouseEnterOrLeave = e => {
    const delayTime = e ? DEALY_APPEAR : DELAY_DISAPPEAR;
    clearTimeout(delay);
    setDelay(setTimeout(() => {
      setMouseEnter(e);
    }, delayTime));
  };

  const handleMouseOver = () => {
    if (Date.now() - preDate > THROTTLE_TIME) {
      handleMouseEnterOrLeave(true);
      preDate = Date.now();
    }
  };

  return /*#__PURE__*/_createElement$A(InlineToolbarContext$1.Provider, {
    value: {
      isFolded,
      onVisibleChange,
      isToolbarVisible: mouseEnter || menuVisible,
      toolbarDefault: toolbarVisible
    }
  }, /*#__PURE__*/_createElement$A(CardContainerBox, {
    ref: cardContainerBoxRef,
    "data-id": `card-container-${id}`,
    onMouseEnter: () => handleMouseEnterOrLeave(true),
    onMouseLeave: () => handleMouseEnterOrLeave(false) // TODO: onMouseOver 检测鼠标 over 事件
    ,
    onMouseOver: () => handleMouseOver(),
    className: className
  }, children));
};

const AbstractCardLayoutContainer = /*#__PURE__*/styled__default['default'].div(["border-radius:8px;overflow:hidden;.card-layout-container{cursor:pointer;}*{box-sizing:border-box;}.card-layout-top{position:relative;width:100%;overflow:hidden;", " .background-img{border-radius:10px;opacity:0.99;position:absolute;left:0;top:0;background-size:50000%;background-color:#f2f4fb;background-position:center;width:100%;height:100%;", "}}.card-layout-head{position:relative;width:100%;display:flex;overflow:hidden;.card-layout-icon{flex:none;overflow:hidden;", " margin:", " 12px;&.no-title{margin-top:34px;}}.card-layout-right{width:100%;flex:1 1 auto;overflow:hidden;.card-layout-text{position:relative;width:100%;display:flex;.card-layout-title,.card-layout-title-cover{width:100%;height:20px;", " padding-right:4px;font-weight:", ";font-size:14px;line-height:20px;color:#111f2c;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;&.link-style:hover{text-decoration:underline;}}.card-layout-title{flex:1 1 auto;}.card-layout-title-cover{position:absolute;transition:0.1s;}.card-layout-toolbar{flex:none;display:inline-block;margin:", " 0 0;}}.card-layout-failure-box{display:flex;height:100%;font-size:12px;line-height:20px;color:#171a1d;overflow:hidden;.text{height:100%;flex:0 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}.refresh{flex:none;margin-left:3px;color:rgba(49,126,208,1);&:hover{color:rgba(0,101,213,1);}}}.card-layout-desc{width:100%;height:", "px;padding:0 20px 0 0;margin-bottom:12px;font-size:13px;line-height:20px;overflow:hidden;.item{width:100%;a:hover{text-decoration:underline;}.text{display:block;width:100%;color:rgba(17,31,44,0.4);overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-box-orient:vertical;}}}}}.card-layout-preview-img{margin:0 24px;box-shadow:0 2px 8px rgba(23,26,29,0.08);}.card-layout-man-action-container{height:40px;background:#f8fafe;padding:6px;display:flex;.main-action-box{flex:1;margin:0 auto;display:flex;align-items:center;justify-content:space-around;color:#171a1d;cursor:pointer;&:hover{color:#0089ff;}&:not(:last-child){border-right:1px solid rgba(126,134,142,0.16);}.content-box{display:flex;align-items:center;font-size:14px;svg{font-size:1.25em;}.title{margin-left:4px;font-style:normal;font-weight:normal;line-height:22px;}}}}"], ({
  blur
}) => {
  return blur && styled.css(["background:linear-gradient( 270deg,rgba(243,246,255,0.95) 0%,rgba(241,244,255,0.92) 26.04%,rgba(244,246,249,0.94) 100% );"]);
}, ({
  blur
}) => {
  return blur && styled.css(["&:after{content:'';width:calc(100% + 1px);height:100%;display:block;background:linear-gradient( 270deg,rgba(243,246,255,0.95) 0%,rgba(241,244,255,0.92) 26.04%,rgba(244,246,249,0.94) 100% );}"]);
}, ({
  line
}) => line === 'single' ? 'width: 20px; height: 20px;' : 'max-width: 60px; max-height: 60px;', ({
  line
}) => line === 'single' ? '8px' : '12px', ({
  line
}) => line === 'single' ? styled.css(["margin-top:8px;"]) : styled.css(["margin-top:12px;"]), ({
  type
}) => type === 'normal' ? 500 : 'normal', ({
  toolbarOffset
}) => `${toolbarOffset[1]}px ${toolbarOffset[0]}px`, ({
  lineCount,
  line
}) => Math.min(line === 'double' ? 1 : Infinity, lineCount) * 20);
const loadingCircle = /*#__PURE__*/styled.keyframes(["0%{background-position:100% 50%}to{background-position:0 50%}"]);
const Skeleton = /*#__PURE__*/styled__default['default'].div(["background:rgba(17,31,44,0.08);width:", ";height:", ";border-radius:", ";margin-top:", ";background:linear-gradient( 90deg,hsla(0,0%,74.5%,0.2) 25%,hsla(0,0%,50.6%,0.24) 37%,hsla(0,0%,74.5%,0.2) 63% );background-size:400% 100%;animation:", " 1.4s ease infinite;"], props => props.width, props => props.height, props => props.borderRadius || '9px', props => props.marginTop || '0', loadingCircle);

var _div$2, _div2;
const _createElement$z = /*#__PURE__*/React__default['default'].createElement;
const AbstractCardLayout = props => {
  var _Toolbar;

  const {
    mainActions,
    toolbarConfigs,
    icon,
    title,
    customLayout,
    line = 'double',
    isShowMainActionTitle = true,
    style,
    mainActionStyle,
    toolbarOffsetX = 4,
    toolbarOffsetY = 4,
    onClick,
    isSelected = false,
    toolbarVisible,
    thresholdWidth,
    lineCount = 1,
    desc = [],
    titleClick,
    background,
    img,
    color = '#F0F6FE',
    type = 'normal',
    failureText = '',
    refresh = false,
    refreshClick,
    locale,
    blur = true,
    getContainer,
    height,
    testid,
    buttonStyle = 'default'
  } = props;
  const t = weUtil.useTranslate(locale);

  const stopPropagation = e => {
    e.stopPropagation();
    e.preventDefault();
  };

  const handleTitleClick = e => {
    if (titleClick) {
      stopPropagation(e);
      titleClick(e);
    }
  };

  const abstractCardLayoutRender = (icon, title, desc = [], descNode, lineCount, line, customLayout) => {
    return /*#__PURE__*/_createElement$z(AbstractCardLayoutContainer, {
      "data-testid": testid ? `Abstract_card_container_${testid}` : undefined,
      toolbarOffset: [toolbarOffsetX, toolbarOffsetY],
      className: "card-layout-wrapper",
      line: line,
      blur: blur,
      lineCount: lineCount,
      type: type,
      style: isSelected ? {
        boxShadow: '0px 0px 0px 1px #0089FF,0px 0px 0px 3px rgba(0, 106, 254, 0.12)',
        ...style
      } : { ...style
      }
    }, /*#__PURE__*/_createElement$z(CardContainer, {
      thresholdWidth: thresholdWidth,
      className: "card-layout-container",
      toolbarVisible: toolbarVisible
    }, /*#__PURE__*/_createElement$z("div", {
      className: "card-layout-top",
      style: background === 'color' ? {
        background: color
      } : {}
    }, background === 'img' && /*#__PURE__*/_createElement$z("div", {
      className: "background-img",
      style: {
        backgroundImage: `url(${img})`
      }
    }), /*#__PURE__*/_createElement$z("div", {
      className: "card-layout-head",
      onClick: onClick,
      style: {
        height: height || 'auto'
      }
    }, /*#__PURE__*/_createElement$z("div", {
      className: "card-layout-icon"
    }, icon), /*#__PURE__*/_createElement$z("div", {
      className: "card-layout-right"
    }, /*#__PURE__*/_createElement$z("div", {
      className: "card-layout-text"
    }, /*#__PURE__*/_createElement$z("div", {
      className: `card-layout-title ${titleClick && 'link-style'}`,
      onClick: handleTitleClick
    }, title), /*#__PURE__*/_createElement$z("div", {
      className: "card-layout-toolbar",
      onClick: stopPropagation
    }, toolbarConfigs && (_Toolbar || (_Toolbar = /*#__PURE__*/_createElement$z(Toolbar, {
      toolbarConfigs: toolbarConfigs,
      getContainer: getContainer,
      buttonStyle: buttonStyle
    }))))), line !== 'single' && /*#__PURE__*/_createElement$z("div", {
      className: "card-layout-desc"
    }, type === 'normal' ? desc.map((item, index) => {
      const style = {
        height: 20 * (item.line || 1),
        lineClamp: item.line || 1,
        overflowWrap: item.line === 2 ? 'break-word' : 'normal',
        wordBreak: item.line === 2 ? 'break-all' : 'normal',
        WebkitLineClamp: item.line || 1
      };
      return /*#__PURE__*/_createElement$z("div", {
        className: "item",
        key: index
      }, item.onClick ? /*#__PURE__*/_createElement$z("a", {
        className: "text",
        style: style,
        onClick: e => {
          stopPropagation(e);
          item.onClick && item.onClick(e);
        }
      }, item.text) : /*#__PURE__*/_createElement$z("span", {
        className: "text",
        style: style
      }, item.text));
    }) : descNode))), line !== 'single' && customLayout && /*#__PURE__*/_createElement$z("div", {
      onClick: onClick,
      className: "card-layout-preview-img"
    }, customLayout)), line !== 'single' && type === 'normal' && mainActions && mainActions.length > 0 && /*#__PURE__*/_createElement$z("div", {
      className: "card-layout-man-action-container",
      style: { ...mainActionStyle
      }
    }, mainActions.map((item, index) => {
      const {
        icon,
        title,
        onClick
      } = item;
      return /*#__PURE__*/_createElement$z("div", {
        className: "main-action-box",
        onClick: onClick,
        key: index
      }, /*#__PURE__*/_createElement$z("div", {
        className: "content-box"
      }, icon, isShowMainActionTitle && /*#__PURE__*/_createElement$z("span", {
        className: "title"
      }, title)));
    })), type === 'loading' && mainActions && mainActions.length > 0 && /*#__PURE__*/_createElement$z("div", {
      className: "card-layout-man-action-container",
      style: { ...mainActionStyle
      }
    }, mainActions.map((_item, index) => {
      return /*#__PURE__*/_createElement$z("div", {
        className: "main-action-box",
        key: index
      }, _div$2 || (_div$2 = /*#__PURE__*/_createElement$z("div", {
        className: "content-box"
      }, /*#__PURE__*/_createElement$z(Skeleton, {
        width: '63px',
        height: '10px'
      }))));
    }))));
  };

  const failureTextRender = (text, refresh, refreshClick) => /*#__PURE__*/_createElement$z("div", {
    className: "card-layout-failure-box"
  }, /*#__PURE__*/_createElement$z("div", {
    className: "text",
    style: {
      color: 'rgba(17, 31, 44, 0.4)'
    }
  }, text), refresh && /*#__PURE__*/_createElement$z("div", {
    className: "refresh",
    onClick: refreshClick
  }, t('we_toolbar_refresh')));

  switch (type) {
    case 'failure':
      return abstractCardLayoutRender(icon || failureImg, title, [], failureTextRender(failureText, refresh, refreshClick), 1, 'double', customLayout);

    case 'loading':
      return abstractCardLayoutRender(icon || fileImg(), /*#__PURE__*/_createElement$z(Skeleton, {
        width: `${line === 'single' ? 220 : 99}px`,
        marginTop: '4px',
        height: '12px'
      }), [], // @ts-ignore
      Array.apply('', {
        length: height === undefined ? 1 : (height - 32) / 16
      }).map((_, i) => /*#__PURE__*/_createElement$z(Skeleton, {
        key: i,
        width: i % 2 ? '60%' : '80%',
        marginTop: '8px',
        height: '8px'
      })), height === undefined ? 1 : (height - 32) / 16, 'multi', customLayout ? defaultCustomLayout : null);

    case 'export':
      return _div2 || (_div2 = /*#__PURE__*/_createElement$z("div", null));

    default:
      return abstractCardLayoutRender(icon, title, desc, /*#__PURE__*/_createElement$z(React__default['default'].Fragment, null), lineCount, line, customLayout);
  }
};
AbstractCardLayout.defaultProps = {
  line: 'double',
  isShowMainActionTitle: true,
  toolbarOffsetX: 4,
  toolbarOffsetY: 4,
  isSelected: false,
  lineCount: 1,
  desc: [],
  color: '#F0F6FE',
  type: 'normal',
  failureText: '',
  refresh: false,
  blur: true,
  thresholdWidth: -Infinity
};

const defaultCustomLayout = /*#__PURE__*/_createElement$z(Skeleton, {
  width: '100%',
  height: '147px',
  borderRadius: '0'
});

const fileImg = () => /*#__PURE__*/_createElement$z("img", {
  style: {
    position: 'relative',
    top: 1,
    width: 40,
    height: 40,
    objectFit: 'contain'
  },
  src: "https://img.alicdn.com/imgextra/i1/O1CN01Xv6Ewz1E3btiJKBZN_!!6000000000296-2-tps-118-118.png"
});

const failureImg = /*#__PURE__*/_createElement$z("img", {
  style: {
    position: 'relative',
    top: 1,
    width: 36,
    height: 36,
    objectFit: 'contain'
  },
  src: "https://img.alicdn.com/imgextra/i4/O1CN01rvr2PW1s7o9n7HXsG_!!6000000005720-2-tps-117-118.png"
});

const PreviewCardLayoutContainer = /*#__PURE__*/styled__default['default'].div(["width:100%;border-radius:8px;position:relative;.card-layout-container{height:100%;}.card-layout-wrap{height:100%;display:flex;flex-direction:column;position:relative;border-radius:8px;overflow:hidden;", " .card-layout-head{width:100%;height:39px;background:#f2f2f6;border-top:8px;display:flex;flex-shrink:0;.card-layout-icon{flex:none;width:24px;height:24px;overflow:hidden;margin:7px;}.card-layout-head-right{position:relative;flex:1 1 auto;overflow:hidden;display:flex;.card-layout-title{flex:1 1 auto;width:100%;box-sizing:border-box;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding:9px 0 0 0;font-size:14px;.card-layout-title-arrow{align-items:center;display:flex;& > .text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}.link{padding:0;}}&.link{cursor:pointer;line-height:20px;color:rgba(17,31,44,1);&:hover{text-decoration-line:underline;color:#317ed0;.right-arrow{color:#317ed0;}}}}.right-arrow{padding:8px 10px 0 0;font-size:20px;color:rgba(23,26,29,0.6);}.card-layout-toolbar{flex:none;", ";}}}.card-layout-content-wrap{overflow:auto;height:1px;flex:1 1 auto;background:#ebecf0;}.no-title-box{height:32px;background:#f2f2f6;}}.card-layout-wrap-custom{width:100%;height:100%;position:relative;display:inline-block;border-radius:8px;overflow:hidden;.card-layout-toolbar-custom{position:absolute;display:inline-block;top:", "px;right:", "px;}.card-layout-content-wrap-custom{width:100%;height:100%;position:absolute;display:inline-block;background:#ebecf0;}}.drag-level{position:absolute;width:86px;height:12px;left:50%;bottom:0;background:#ffffff;box-shadow:0 0 1px rgba(0,0,0,0.16),0 1px 4px rgba(23,26,29,0.16);border-radius:100px;transform:translate(-50%,50%);transition:0.2s;cursor:ns-resize;.drag-level-icon{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);}}"], ({
  drag
}) => drag && 'pointer-events: none;', ({
  toolbarOffset
}) => `margin: ${toolbarOffset[1]}px ${toolbarOffset[0]}px 8px 8px`, ({
  toolbarOffset
}) => toolbarOffset[1], ({
  toolbarOffset
}) => toolbarOffset[0]);

var _svg$1;
const _createElement$y = /*#__PURE__*/React__default['default'].createElement;
const DragLevelIcon = () => _svg$1 || (_svg$1 = /*#__PURE__*/_createElement$y("svg", {
  width: "13",
  height: "5",
  viewBox: "0 0 13 5",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg",
  className: "drag-level-icon"
}, /*#__PURE__*/_createElement$y("path", {
  d: "M1 1H12",
  stroke: "#171A1D",
  strokeOpacity: "0.4",
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), /*#__PURE__*/_createElement$y("path", {
  d: "M1 4H12",
  stroke: "#171A1D",
  strokeOpacity: "0.4",
  strokeLinecap: "round",
  strokeLinejoin: "round"
})));

var _DragLevelIcon, _DragLevelIcon2;
const _createElement$x = /*#__PURE__*/React__default['default'].createElement;
const PreviewCardLayout = props => {
  const id = React.useMemo(() => weDesign.uuid(), []);
  const {
    defaultHeight = 170,
    minHeight = 38,
    maxHeight = Infinity,
    isSelected,
    children,
    icon,
    title,
    linkTitleClick,
    toolbarConfigs,
    style,
    dragLevel = false,
    className,
    onClick,
    onMoveStart,
    onMove,
    onMoveEnd,
    throttle = 0,
    type = 'normal',
    thresholdWidth,
    getContainer,
    height: currentHeight
  } = props;
  const {
    toolbarOffsetX = !title ? 4 : 6,
    toolbarOffsetY = toolbarOffsetX
  } = props;
  const [height, setHeight] = React.useState(defaultHeight);
  React.useEffect(() => {
    currentHeight && setHeight(currentHeight);
  }, [currentHeight]); // 是否拖拽

  const [drag, setDrag] = React.useState(false);
  let preDate = React.useMemo(() => Date.now(), []); // 鼠标抬起

  const mouseUp = () => {
    setDrag(false);
    onMoveEnd && onMoveEnd();
    document.removeEventListener('mousemove', mouseMove);
  }; // 拖拽时移动鼠标


  const mouseMove = e => {
    // 节流
    const now = Date.now();

    if (now - preDate < throttle) {
      return;
    }

    preDate = now; // 计算 height

    const container = document.getElementById(`preview-card-layout-${id}`);

    if (!container) {
      return;
    }

    const {
      clientY
    } = e;
    const topPosition = container.getBoundingClientRect().top;
    let height = clientY - topPosition;

    if (height > maxHeight) {
      height = maxHeight;
    }

    if (height < minHeight) {
      height = minHeight;
    }

    setHeight(height);
    onMove && onMove(height);
  };

  return type === 'custom' ? /*#__PURE__*/_createElement$x(PreviewCardLayoutContainer, {
    toolbarOffset: [toolbarOffsetX, toolbarOffsetY],
    id: `preview-card-layout-${id}`,
    className: className,
    drag: drag,
    style: isSelected ? {
      border: '1px solid #0089FF',
      boxShadow: '0px 0px 0px 3px rgba(0, 106, 254, 0.12)',
      height,
      ...style
    } : {
      border: '1px solid #EBECF0',
      height,
      ...style
    }
  }, /*#__PURE__*/_createElement$x(CardContainer, {
    className: "card-layout-container",
    thresholdWidth: thresholdWidth
  }, /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-wrap-custom"
  }, /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-content-wrap-custom"
  }, children), /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-toolbar-custom",
    onClick: e => e.stopPropagation()
  }, /*#__PURE__*/_createElement$x(Toolbar, {
    toolbarConfigs: toolbarConfigs,
    getContainer: getContainer
  }))), /*#__PURE__*/_createElement$x(InlineToolbarContext$1.Consumer, null, ({
    isToolbarVisible
  }) => dragLevel && /*#__PURE__*/_createElement$x("div", {
    className: "drag-level",
    style: {
      opacity: isToolbarVisible || drag ? 1 : 0
    },
    onMouseDown: () => {
      setDrag(true);
      onMoveStart && onMoveStart(height);
      document.addEventListener('mouseup', mouseUp);
      document.addEventListener('mousemove', mouseMove);
    }
  }, _DragLevelIcon || (_DragLevelIcon = /*#__PURE__*/_createElement$x(DragLevelIcon, null)))))) : type === 'normal' ? /*#__PURE__*/_createElement$x(PreviewCardLayoutContainer, {
    toolbarOffset: [toolbarOffsetX, toolbarOffsetY],
    id: `preview-card-layout-${id}`,
    className: className,
    drag: drag,
    style: isSelected ? {
      border: '1px solid #0089FF',
      boxShadow: '0px 0px 0px 3px rgba(0, 106, 254, 0.12)',
      height,
      ...style
    } : {
      height,
      ...style
    }
  }, /*#__PURE__*/_createElement$x(CardContainer, {
    className: "card-layout-container",
    thresholdWidth: thresholdWidth
  }, /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-wrap"
  }, /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-head",
    style: {
      height: !title ? 32 : 39
    }
  }, /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-icon",
    onClick: linkTitleClick
  }, icon), /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-head-right"
  }, /*#__PURE__*/_createElement$x("div", {
    className: `card-layout-title ${linkTitleClick && 'link'}`,
    onClick: linkTitleClick
  }, /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-title-arrow"
  }, /*#__PURE__*/_createElement$x("span", {
    className: "text"
  }, title), linkTitleClick && /*#__PURE__*/_createElement$x(weDesign.ArrowRightOutlineSmallBetaNormal, {
    className: "right-arrow link",
    onClick: linkTitleClick
  }))), /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-toolbar",
    onClick: e => e.stopPropagation()
  }, /*#__PURE__*/_createElement$x(Toolbar, {
    toolbarConfigs: toolbarConfigs,
    getContainer: getContainer
  })))), /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-content-wrap"
  }, children), !title && /*#__PURE__*/_createElement$x("div", {
    className: "no-title-box",
    onClick: onClick,
    style: (style === null || style === void 0 ? void 0 : style.backgroundColor) && {
      backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor
    }
  })), /*#__PURE__*/_createElement$x(InlineToolbarContext$1.Consumer, null, ({
    isToolbarVisible
  }) => dragLevel && /*#__PURE__*/_createElement$x("div", {
    className: "drag-level",
    style: {
      opacity: isToolbarVisible || drag ? 1 : 0
    },
    onMouseDown: () => {
      setDrag(true);
      onMoveStart && onMoveStart(height);
      document.addEventListener('mouseup', mouseUp);
      document.addEventListener('mousemove', mouseMove);
    }
  }, _DragLevelIcon2 || (_DragLevelIcon2 = /*#__PURE__*/_createElement$x(DragLevelIcon, null)))))) : /*#__PURE__*/_createElement$x(PreviewCardLayoutContainer, {
    toolbarOffset: [toolbarOffsetX, toolbarOffsetY],
    id: `preview-card-layout-${id}`,
    className: className,
    drag: drag
  }, /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-wrap"
  }, /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-head"
  }, /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-icon"
  }, icon), /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-head-right"
  }, /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-title"
  }, title), linkTitleClick && /*#__PURE__*/_createElement$x(weDesign.ArrowRightOutlineSmallBetaNormal, {
    className: "right-arrow link",
    onClick: onClick
  }), /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-toolbar",
    onClick: e => e.stopPropagation()
  }, /*#__PURE__*/_createElement$x(Toolbar, {
    toolbarConfigs: toolbarConfigs
  })))), /*#__PURE__*/_createElement$x("div", {
    className: "card-layout-content-wrap"
  }, children)));
};

const MoreMenuIconContainer = /*#__PURE__*/styled__default['default'].div([""]);
const StyleSelectIconContainer$1 = /*#__PURE__*/styled__default['default'].div([""]);
const IconBox = /*#__PURE__*/styled__default['default'].span(["position:relative;width:16px;height:16px;"]);
const SelectGalleryBox$1 = /*#__PURE__*/styled__default['default'].div(["width:100%;height:100%;padding:5px;display:flex;flex-direction:column;align-items:center;justify-content:space-between;background:#f2f2f6;box-sizing:border-box;border-radius:4px;border:1px solid white;transition:0.2s;transition-timing-function:cubic-bezier(0.55,0.085,0.68,0.53) both;&:hover{background-color:#e6e7ec;}"]);
const StyleSelectFontBox$1 = /*#__PURE__*/styled__default['default'].span(["flex:0;height:30px;font-size:14px;"]);
const ChildrenBoxSize = /*#__PURE__*/styled__default['default'].div(["& div{box-sizing:border-box;}"]);
const MenuFoldedContentContainer = /*#__PURE__*/styled__default['default'].div(["display:flex;max-width:250px;min-width:170px;justify-content:flex-start;flex-wrap:wrap;padding:0px 4px 0 4px;& > *{margin-right:1px;}"]);
const ToolbarContainer = /*#__PURE__*/styled__default['default'].div(["display:flex;height:28px;box-sizing:content-box;border-radius:4px;overflow:hidden;& > *{background-color:rgba(126,134,142,0.12);&:not(:last-child){margin-right:1px;}&:first-child{border-top-left-radius:4px;border-bottom-left-radius:4px;}&:last-child{border-top-right-radius:4px;border-bottom-right-radius:4px;}}& [class*='button-box']{border-radius:unset;}"]);
const CardLayoutContainer = /*#__PURE__*/styled__default['default'].div(["position:relative;display:inline-block;border-radius:8px;"]);
const ToolbarBox = /*#__PURE__*/styled__default['default'].div(["position:absolute;display:inline-block;top:", "px;right:", "px;transition:0.2s;transition-timing-function:cubic-bezier(0.55,0.085,0.68,0.53) both;"], ({
  toolbarOffsetX = 4
}) => toolbarOffsetX, ({
  toolbarOffsetY = 4
}) => toolbarOffsetY);

var _svg, _svg2, _svg3, _svg4, _svg5, _svg6, _svg7;
const _createElement$w = /*#__PURE__*/React__default['default'].createElement;
const StyleIcon = () => {
  return _svg || (_svg = /*#__PURE__*/_createElement$w("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "20",
    height: "20",
    className: "icon",
    viewBox: "0 0 1024 1024",
    fill: "currentColor"
  }, /*#__PURE__*/_createElement$w("path", {
    d: "M588.8 153.6l7.373.358a76.8 76.8 0 0169.12 69.07l.307 7.372v128H896a76.8 76.8 0 0176.442 69.427l.358 7.373v409.6a76.8 76.8 0 01-69.427 76.442L896 921.6H332.8a76.8 76.8 0 01-76.442-69.427L256 844.8l-.051-230.4H128l-7.373-.358a76.8 76.8 0 01-69.12-69.07L51.2 537.6V230.4l.358-7.373a76.8 76.8 0 0169.07-69.12L128 153.6h460.8zm332.8 409.6H307.2v281.6l.41 4.608a25.6 25.6 0 0020.582 20.582l4.608.41H896l4.608-.41a25.6 25.6 0 0020.582-20.582l.41-4.608V563.2zM614.4 665.6v51.2H409.6v-51.2h204.8zm-25.6-460.8H128l-4.608.41a25.6 25.6 0 00-20.582 20.582l-.41 4.608v307.2l.41 4.608a25.6 25.6 0 0020.582 20.582l4.608.41h127.949v-128a76.8 76.8 0 0169.427-76.442l7.424-.358h281.6v-128l-.41-4.608a25.6 25.6 0 00-16.281-19.405l-4.301-1.177-4.608-.41zM896 409.6H332.8l-4.608.41a25.6 25.6 0 00-20.582 20.582l-.41 4.608V512h614.4v-76.8l-.41-4.608A25.6 25.6 0 00896 409.6z"
  })));
};
const TextIcon = () => _svg2 || (_svg2 = /*#__PURE__*/_createElement$w("svg", {
  width: "68",
  height: "100%",
  viewBox: "0 0 68 30",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_createElement$w("path", {
  d: "M4.59732 2.85758L6.05194 1.40296C6.75488 0.700015 7.93705 0.742486 8.59752 1.40296C9.25799 2.06343 9.30046 3.2456 8.59752 3.94854L7.1429 5.40316C6.43996 6.10611 5.30026 6.10611 4.59732 5.40316C4.47095 5.2768 4.23366 5.03951 4.23366 5.03951",
  stroke: "#317ED0",
  strokeWidth: "0.514286",
  strokeLinejoin: "round"
}), /*#__PURE__*/_createElement$w("path", {
  d: "M5.68839 6.85775L4.23377 8.31237C3.53083 9.01532 2.39113 9.01532 1.68818 8.31237C0.985241 7.60943 0.985241 6.46973 1.68818 5.76679L3.1428 4.31217C3.84575 3.60922 4.98545 3.60922 5.68839 4.31217C5.81475 4.43853 6.05204 4.67582 6.05204 4.67582",
  stroke: "#317ED0",
  strokeWidth: "0.514286",
  strokeLinejoin: "round"
}), /*#__PURE__*/_createElement$w("path", {
  d: "M10.4911 1.88L12.5825 4.82L10.3283 8H11.194L13.0111 5.37714L14.8368 8H15.7025L13.4311 4.82L15.5397 1.88H14.674L13.0111 4.26286L11.3568 1.88H10.4911ZM15.9487 1.88L18.0401 4.82L15.7858 8H16.6516L18.4687 5.37714L20.2944 8H21.1601L18.8887 4.82L20.9973 1.88H20.1316L18.4687 4.26286L16.8144 1.88H15.9487ZM21.4063 1.88L23.4977 4.82L21.2434 8H22.1092L23.9263 5.37714L25.752 8H26.6177L24.3463 4.82L26.4549 1.88H25.5892L23.9263 4.26286L22.272 1.88H21.4063ZM26.8639 1.88L28.9553 4.82L26.701 8H27.5667L29.3839 5.37714L31.2096 8H32.0753L29.8039 4.82L31.9125 1.88H31.0467L29.3839 4.26286L27.7296 1.88H26.8639ZM32.3215 1.88L34.4129 4.82L32.1586 8H33.0243L34.8415 5.37714L36.6672 8H37.5329L35.2615 4.82L37.37 1.88H36.5043L34.8415 4.26286L33.1872 1.88H32.3215ZM37.7791 1.88L39.8705 4.82L37.6162 8H38.4819L40.2991 5.37714L42.1248 8H42.9905L40.7191 4.82L42.8276 1.88H41.9619L40.2991 4.26286L38.6448 1.88H37.7791Z",
  fill: "#317ED0"
}), /*#__PURE__*/_createElement$w("path", {
  d: "M10.2854 9.53429H43.0333V10.0314H10.2854V9.53429Z",
  fill: "#317ED0"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "48",
  y: "3",
  width: "20",
  height: "5",
  rx: "2.5",
  fill: "#CDCFE3",
  fillOpacity: "0.5"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "1",
  y: "15",
  width: "67",
  height: "5",
  rx: "2.5",
  fill: "#CDCFE3",
  fillOpacity: "0.5"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "1",
  y: "26",
  width: "49",
  height: "5",
  rx: "2.5",
  fill: "#CDCFE3",
  fillOpacity: "0.5"
})));
const CardIcon = () => _svg3 || (_svg3 = /*#__PURE__*/_createElement$w("svg", {
  width: "90",
  height: "100%",
  viewBox: "0 0 93 60",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_createElement$w("g", {
  filter: "url(#filter0_d)"
}, /*#__PURE__*/_createElement$w("rect", {
  x: "14.9997",
  y: "10",
  width: "63",
  height: "40",
  rx: "4",
  fill: "white"
})), /*#__PURE__*/_createElement$w("rect", {
  x: "18.436",
  y: "17.0491",
  width: "16.9175",
  height: "16.9175",
  rx: "2",
  fill: "#ACAFD0",
  fillOpacity: "0.6"
}), /*#__PURE__*/_createElement$w("path", {
  opacity: "0.3",
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M29.7216 26.3948C32.1113 26.3948 34.0737 28.2673 34.2841 30.6569H21.0806C21.4505 29.1863 22.755 28.0996 24.3074 28.0996C24.881 28.0996 25.4207 28.2479 25.8919 28.5091C26.711 27.2355 28.1203 26.3948 29.7216 26.3948ZM25.5569 20.4277C26.7069 20.4277 27.6392 21.3819 27.6392 22.5588C27.6392 23.7358 26.7069 24.6899 25.5569 24.6899C24.4068 24.6899 23.4745 23.7358 23.4745 22.5588C23.4745 21.3819 24.4068 20.4277 25.5569 20.4277Z",
  fill: "white"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "40.4269",
  y: "17.0491",
  width: "23.8388",
  height: "5.63916",
  rx: "2.81958",
  fill: "#CDCFE3"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "40.4269",
  y: "28.3274",
  width: "33.3743",
  height: "4.22937",
  rx: "2.11469",
  fill: "#CDCFE3",
  fillOpacity: "0.5"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "40.4269",
  y: "36.7861",
  width: "18.2764",
  height: "4.22937",
  rx: "2.11469",
  fill: "#CDCFE3",
  fillOpacity: "0.5"
}), /*#__PURE__*/_createElement$w("defs", null, /*#__PURE__*/_createElement$w("filter", {
  id: "filter0_d",
  x: "-0.000305176",
  y: "0",
  width: "93",
  height: "70",
  filterUnits: "userSpaceOnUse",
  colorInterpolationFilters: "sRGB"
}, /*#__PURE__*/_createElement$w("feFlood", {
  floodOpacity: "0",
  result: "BackgroundImageFix"
}), /*#__PURE__*/_createElement$w("feColorMatrix", {
  in: "SourceAlpha",
  type: "matrix",
  values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
}), /*#__PURE__*/_createElement$w("feOffset", {
  dy: "5"
}), /*#__PURE__*/_createElement$w("feGaussianBlur", {
  stdDeviation: "7.5"
}), /*#__PURE__*/_createElement$w("feColorMatrix", {
  type: "matrix",
  values: "0 0 0 0 0.0392157 0 0 0 0 0.117647 0 0 0 0 0.254902 0 0 0 0.12 0"
}), /*#__PURE__*/_createElement$w("feBlend", {
  mode: "normal",
  in2: "BackgroundImageFix",
  result: "effect1_dropShadow"
}), /*#__PURE__*/_createElement$w("feBlend", {
  mode: "normal",
  in: "SourceGraphic",
  in2: "effect1_dropShadow",
  result: "shape"
})))));
const PreviewIcon = () => _svg4 || (_svg4 = /*#__PURE__*/_createElement$w("svg", {
  width: "65",
  height: "100%",
  viewBox: "0 0 80 58",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_createElement$w("rect", {
  x: "0.667297",
  width: "78.913",
  height: "57.3913",
  rx: "4",
  fill: "#CDCFE3"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "1.1673",
  y: "9.10864",
  width: "77.913",
  height: "47.7826",
  rx: "3.5",
  fill: "white",
  stroke: "#CDCFE3"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "6.40643",
  y: "2.86963",
  width: "21.5217",
  height: "2.86957",
  rx: "1.43478",
  fill: "#7E868E",
  fillOpacity: "0.24"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "29.363",
  y: "17.2173",
  width: "21.5217",
  height: "4.30435",
  rx: "1",
  fill: "#E6E7F1"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "7.84119",
  y: "30.1304",
  width: "30.1304",
  height: "4.30435",
  rx: "1",
  fill: "#E6E7F1"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "7.84119",
  y: "38.739",
  width: "37.3043",
  height: "2.86957",
  rx: "1",
  fill: "#E6E7F1"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "7.84119",
  y: "45.9131",
  width: "28.6957",
  height: "2.86957",
  rx: "1",
  fill: "#E6E7F1"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "65.2325",
  y: "2.86963",
  width: "8.6087",
  height: "2.86957",
  rx: "1.43478",
  fill: "#7E868E",
  fillOpacity: "0.24"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "7.84119",
  y: "24.3914",
  width: "64.5652",
  height: "1.43478",
  fill: "#E6E7F1"
}), /*#__PURE__*/_createElement$w("rect", {
  x: "49.6673",
  y: "30",
  width: "21.5217",
  height: "21.5217",
  rx: "4",
  fill: "#E6E7F1"
}), /*#__PURE__*/_createElement$w("path", {
  opacity: "0.5",
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M63.1133 42.1667C66.0045 42.1667 68.4368 44.1851 69.1482 46.9252C69.2957 47.4931 68.8285 48 68.2418 48H52.6147C51.964 48 51.4868 47.3797 51.8087 46.8141C52.5967 45.4299 54.0588 44.5 55.7324 44.5C56.183 44.5 56.6183 44.5674 57.0292 44.693C57.5345 44.8474 58.1087 44.7073 58.4554 44.3087C59.5991 42.9941 61.2621 42.1667 63.1133 42.1667ZM57.4357 34C59.0035 34 60.2745 35.3058 60.2745 36.9167C60.2745 38.5275 59.0035 39.8333 57.4357 39.8333C55.8678 39.8333 54.5968 38.5275 54.5968 36.9167C54.5968 35.3058 55.8678 34 57.4357 34Z",
  fill: "white"
})));
const TextSmallIcon = () => _svg5 || (_svg5 = /*#__PURE__*/_createElement$w("svg", {
  width: "16",
  height: "16",
  viewBox: "0 0 16 16",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_createElement$w("path", {
  d: "M1.51835 14.4847C0.0538834 13.0202 0.0538834 10.6458 1.51835 9.18136L3.87537 6.82434C5.33984 5.35987 7.71421 5.35987 9.17867 6.82434L9.76793 7.41359L9.17867 8.00285L8.58942 7.41359C7.45039 6.27456 5.60366 6.27456 4.46463 7.41359L2.1076 9.77061C0.968576 10.9096 0.968576 12.7564 2.1076 13.8954C3.24663 15.0344 5.09336 15.0344 6.23239 13.8954L8.29479 11.833L8.88404 12.4223L6.82165 14.4847C5.35718 15.9491 2.98281 15.9491 1.51835 14.4847Z",
  fill: "#171A1D"
}), /*#__PURE__*/_createElement$w("path", {
  d: "M9.76793 2.11029L7.70553 4.17268L7.11628 3.58343L9.17867 1.52103C10.6431 0.0565679 13.0175 0.0565679 14.482 1.52103C15.9464 2.9855 15.9464 5.35987 14.482 6.82433L12.1249 9.18136C10.6605 10.6458 8.28611 10.6458 6.82165 9.18136L6.23239 8.5921L6.82165 8.00285L7.4109 8.5921C8.54993 9.73113 10.3967 9.73113 11.5357 8.5921L13.8927 6.23508C15.0317 5.09605 15.0317 3.24932 13.8927 2.11029C12.7537 0.971261 10.907 0.971261 9.76793 2.11029Z",
  fill: "#171A1D"
})));
const CardSmallIcon = () => _svg6 || (_svg6 = /*#__PURE__*/_createElement$w("svg", {
  width: "18",
  height: "13",
  viewBox: "0 0 18 13",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_createElement$w("rect", {
  x: "-0.5",
  y: "0.5",
  width: "17",
  height: "12",
  rx: "0.5",
  transform: "matrix(-1 0 0 1 17 0)",
  stroke: "#111F2C",
  strokeOpacity: "0.85"
}), /*#__PURE__*/_createElement$w("rect", {
  width: "10",
  height: "1",
  transform: "matrix(-1 0 0 1 14 4)",
  fill: "#111F2C",
  fillOpacity: "0.85"
}), /*#__PURE__*/_createElement$w("rect", {
  width: "6",
  height: "1",
  transform: "matrix(-1 0 0 1 10 8)",
  fill: "#111F2C",
  fillOpacity: "0.85"
})));
const PreviewSmallIcon = () => _svg7 || (_svg7 = /*#__PURE__*/_createElement$w("svg", {
  width: "16",
  height: "14",
  viewBox: "0 0 16 14",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_createElement$w("rect", {
  x: "-0.5",
  y: "0.5",
  width: "15",
  height: "7",
  rx: "0.5",
  transform: "matrix(-1 0 0 1 15 3)",
  stroke: "#111F2C",
  strokeOpacity: "0.85"
}), /*#__PURE__*/_createElement$w("rect", {
  width: "16",
  height: "1",
  transform: "matrix(-1 0 0 1 16 0)",
  fill: "#111F2C",
  fillOpacity: "0.85"
}), /*#__PURE__*/_createElement$w("rect", {
  width: "16",
  height: "1",
  transform: "matrix(-1 0 0 1 16 13)",
  fill: "#111F2C",
  fillOpacity: "0.85"
})));

const InlineToolbarContext = /*#__PURE__*/React.createContext({
  width: 0,
  onVisibleChange: _ => {}
});

var _TemplateCloseNormal, _ToolbarDownloadNorma, _OpenNormal, _RefreshNormalNormal, _ToolbarDeleteNormal, _ToolbarCopyNormal, _ToolbarCutNormal, _IconBox, _IconBox2, _IconBox3, _IconBox4, _MenuDivider, _IconBox5, _MenuDivider2, _TextIcon, _CardIcon, _PreviewIcon, _ToolbarMoreNormal$1, _StyleIcon;
const _createElement$v = /*#__PURE__*/React__default['default'].createElement;
const InlineToolbar = props => {
  var _MenuFoldedContentCon;

  const {
    width: widthFromContext,
    onVisibleChange
  } = React__default['default'].useContext(InlineToolbarContext);
  const minWidth = 323;
  const {
    type,
    children,
    width: widthFromProps = 0,
    moreMenuConfig = {
      options: []
    },
    styleSelectConfig = {
      options: []
    },
    locale,
    getContainer
  } = props;
  const width = widthFromContext || widthFromProps;
  const [styleSelectedValue, setStyleSelectedValue] = React.useState(styleSelectConfig.defaultValue || 0); // const [isStyleSelectShow, setIsStyleSelectShow] = useState(false);
  // const [isMoreMenuShow, setIsMoreMenuShow] = useState(false);

  const t = weUtil.useTranslate(locale);

  const menuGroupRender = items => items.map((item, index) => {
    let {
      name = `other-${index}`,
      icon = _TemplateCloseNormal || (_TemplateCloseNormal = /*#__PURE__*/_createElement$v(weDesign.TemplateCloseNormal, null)),
      title = 'Error: Title needs',
      onClick
    } = item;

    switch (name) {
      case 'download':
        icon = _ToolbarDownloadNorma || (_ToolbarDownloadNorma = /*#__PURE__*/_createElement$v(weDesign.ToolbarDownloadNormal, null));
        title = t('we_toolbar_download');
        break;

      case 'open':
        icon = _OpenNormal || (_OpenNormal = /*#__PURE__*/_createElement$v(weDesign.OpenNormal, null));
        title = t('we_toolbar_open');
        break;

      case 'refresh':
        icon = _RefreshNormalNormal || (_RefreshNormalNormal = /*#__PURE__*/_createElement$v(weDesign.RefreshNormalNormal, null));
        title = t('we_toolbar_refresh');
        break;

      case 'delete':
        icon = _ToolbarDeleteNormal || (_ToolbarDeleteNormal = /*#__PURE__*/_createElement$v(weDesign.ToolbarDeleteNormal, null));
        title = t('we_toolbar_delete');
        break;

      case 'copy':
        icon = _ToolbarCopyNormal || (_ToolbarCopyNormal = /*#__PURE__*/_createElement$v(weDesign.ToolbarCopyNormal, null));
        title = t('we_toolbar_copy');
        break;

      case 'cut':
        icon = _ToolbarCutNormal || (_ToolbarCutNormal = /*#__PURE__*/_createElement$v(weDesign.ToolbarCutNormal, null));
        title = t('we_toolbar_cut');
        break;
    }

    return /*#__PURE__*/_createElement$v(weDesign.MenuItem, {
      key: name,
      menuKey: name,
      icon: icon,
      onClick: onClick
    }, title);
  });

  const getStyleSelectSubMenuIcon = key => {
    switch (key) {
      case 'text':
        return _IconBox || (_IconBox = /*#__PURE__*/_createElement$v(IconBox, null, /*#__PURE__*/_createElement$v(TextSmallIcon, null)));

      case 'card':
        return _IconBox2 || (_IconBox2 = /*#__PURE__*/_createElement$v(IconBox, null, /*#__PURE__*/_createElement$v(CardSmallIcon, null)));

      case 'preview':
        return _IconBox3 || (_IconBox3 = /*#__PURE__*/_createElement$v(IconBox, null, /*#__PURE__*/_createElement$v(PreviewSmallIcon, null)));

      default:
        return _IconBox4 || (_IconBox4 = /*#__PURE__*/_createElement$v(IconBox, null, "233"));
    }
  };

  const moreMenuOverlay = () => {
    const {
      options
    } = moreMenuConfig;
    const {
      onChange
    } = styleSelectConfig;
    return /*#__PURE__*/_createElement$v(ChildrenBoxSize, null, /*#__PURE__*/_createElement$v(weDesign.Menu, {
      style: {
        width: '100%'
      },
      selectedKeys: [`${styleSelectedValue}`]
    }, width < minWidth && /*#__PURE__*/_createElement$v(React__default['default'].Fragment, null, children && (_MenuFoldedContentCon || (_MenuFoldedContentCon = /*#__PURE__*/_createElement$v(MenuFoldedContentContainer, null, children))), children && styleSelectConfig.options.length > 0 && (_MenuDivider || (_MenuDivider = /*#__PURE__*/_createElement$v(weDesign.MenuDivider, null))), styleSelectConfig.options.length > 0 && /*#__PURE__*/_createElement$v(weDesign.SubMenu, {
      icon: _IconBox5 || (_IconBox5 = /*#__PURE__*/_createElement$v(IconBox, null, /*#__PURE__*/_createElement$v(StyleIcon, null))),
      menuKey: "style_select",
      key: "style_select",
      title: t('we_toolbar_style_select'),
      showSelect: true
    }, styleSelectConfig.options.map((item, index) => {
      return /*#__PURE__*/_createElement$v(weDesign.MenuItem, {
        icon: getStyleSelectSubMenuIcon(item),
        menuKey: `${index}`,
        key: index,
        onClick: key => {
          onChange && onChange(key);
          setStyleSelectedValue(index);
        }
      }, t(`we_toolbar_${item}`));
    }))), (children || styleSelectConfig.options.length > 0) && width < minWidth && options.length > 0 && (_MenuDivider2 || (_MenuDivider2 = /*#__PURE__*/_createElement$v(weDesign.MenuDivider, null))), options.length > 0 && options.reduce((pre, items, index) => {
      if (index !== 0) {
        pre = pre.concat([/*#__PURE__*/_createElement$v(weDesign.MenuDivider, {
          key: index
        })]);
      }

      return pre.concat(menuGroupRender(items));
    }, [])));
  };

  const getNode = item => {
    let text = '';

    let image = /*#__PURE__*/_createElement$v(React__default['default'].Fragment, null);

    switch (item) {
      case 'text':
        text = t('we_toolbar_text');
        image = _TextIcon || (_TextIcon = /*#__PURE__*/_createElement$v(TextIcon, null));
        break;

      case 'card':
        text = t('we_toolbar_card');
        image = _CardIcon || (_CardIcon = /*#__PURE__*/_createElement$v(CardIcon, null));
        break;

      case 'preview':
        text = t('we_toolbar_preview');
        image = _PreviewIcon || (_PreviewIcon = /*#__PURE__*/_createElement$v(PreviewIcon, null));
        break;

      default:
        text = item;
        image = /*#__PURE__*/_createElement$v(React__default['default'].Fragment, null);
        break;
    }

    return /*#__PURE__*/_createElement$v(SelectGalleryBox$1, {
      key: text
    }, image, /*#__PURE__*/_createElement$v(StyleSelectFontBox$1, null, text));
  };

  const moreMenuRender = () => /*#__PURE__*/_createElement$v(MoreMenuIconContainer, {
    onClick: e => e.stopPropagation(),
    onMouseDown: e => e.stopPropagation() // onMouseEnter={() => {clearTimeout(moreMenuClose); setIsStyleSelectShow(false); setIsMoreMenuShow(true)}}
    // onMouseLeave={() => moreMenuClose = setTimeout(() => setIsMoreMenuShow(false), 300)}

  }, /*#__PURE__*/_createElement$v(IconMenu, {
    key: "more-menu",
    placement: "bottomLeft",
    getContainer: getContainer // visible={isMoreMenuShow}
    // autoClose={false}
    ,
    icon: _ToolbarMoreNormal$1 || (_ToolbarMoreNormal$1 = /*#__PURE__*/_createElement$v(weDesign.ToolbarMoreNormal, null)),
    overlay: moreMenuOverlay(),
    showArrow: false,
    onVisibleChange: onVisibleChange
  }));

  const StyleSelectRender = () => {
    const {
      options,
      onChange
    } = styleSelectConfig;
    return (options === null || options === void 0 ? void 0 : options.length) > 0 ? /*#__PURE__*/_createElement$v(StyleSelectIconContainer$1, {
      onClick: e => e.stopPropagation(),
      onMouseDown: e => e.stopPropagation() // onMouseEnter={() => {clearTimeout(styleSelectClose); setIsMoreMenuShow(false);setIsStyleSelectShow(true)}}
      // onMouseLeave={() => styleSelectClose = setTimeout(() => setIsStyleSelectShow(false), 300)}

    }, /*#__PURE__*/_createElement$v(IconMenu, {
      key: "style-select",
      placement: "bottomLeft" // autoClose={false}
      // visible={isStyleSelectShow}
      ,
      getContainer: getContainer,
      overlay: /*#__PURE__*/_createElement$v(weDesign.SelectGallery, {
        groups: [{
          title: t('we_toolbar_style_select'),
          showDivider: false,
          items: options.map((item, index) => {
            return {
              id: index,
              node: getNode(item),
              testID: `inlineToolbarSeletOptions-${index}`
            };
          })
        }],
        itemsPerRow: options.length,
        value: styleSelectedValue,
        onChange: e => {
          setStyleSelectedValue(e);
          onChange && onChange(`${e}`);
        }
      }),
      icon: _StyleIcon || (_StyleIcon = /*#__PURE__*/_createElement$v(StyleIcon, null)),
      overlayStyle: {
        border: 0,
        boxShadow: 'unset',
        backgroundColor: 'unset'
      },
      onVisibleChange: onVisibleChange
    })) : /*#__PURE__*/_createElement$v(React__default['default'].Fragment, null);
  };

  const menuCount = React__default['default'].Children.count(children) + Number(styleSelectConfig.options.length > 0) + Number(moreMenuConfig.options.length > 0);
  const childrenList = [];
  children && React__default['default'].Children.forEach(children, (child, index) => {
    childrenList.push( /*#__PURE__*/React__default['default'].cloneElement(child, { ...child.props,
      key: index,
      onVisibleChange
    }));
  });
  styleSelectConfig.options.length > 0 && childrenList.push(StyleSelectRender());
  moreMenuConfig.options.length > 0 && childrenList.push(moreMenuRender());
  return /*#__PURE__*/_createElement$v(ToolbarContainer, {
    className: "inline-toolbar-container",
    type: type
  }, width < minWidth && menuCount > 1 ? moreMenuRender() : childrenList);
};

const _createElement$u = /*#__PURE__*/React__default['default'].createElement;
const CardLayout = props => {
  const {
    children,
    toolbar,
    isSelected,
    onToolbarWidthChange,
    onHoverChange,
    toolbarVisible,
    style,
    toolbarOffsetX,
    toolbarOffsetY
  } = props;
  const id = React.useMemo(() => weDesign.uuid(), []);
  const [opacity, setOpacity] = React.useState(0);
  const [cardLayoutWidth, setCardLayoutWidth] = React.useState(0);
  const [menuFoldedOpacity, setMenuFoldedOpacity] = React.useState(0);
  const cardLayoutRef = React.useRef(null);
  const toolbarBoxRef = React.useRef(null);
  React.useEffect(() => {
    if (!cardLayoutRef.current || !toolbarBoxRef.current) return;
    const resizerObserve = new ResizeObserver__default['default'](entries => {
      entries.forEach(item => {
        switch (item.target.getAttribute('data-id')) {
          case `card-layout-container-${id}`:
            setCardLayoutWidth(item.contentRect.width);
            break;

          case `toolbar-box-${id}`:
            onToolbarWidthChange && onToolbarWidthChange(item.contentRect.width);
        }
      });
    });

    if (resizerObserve && cardLayoutRef.current && toolbarBoxRef.current) {
      resizerObserve.observe(cardLayoutRef.current);
      resizerObserve.observe(toolbarBoxRef.current);
    }

    return () => {
      if (ResizeObserver__default['default']) {
        resizerObserve.disconnect();
      }
    };
  }, [cardLayoutRef, toolbarBoxRef]);

  const onVisibleChange = e => {
    setMenuFoldedOpacity(e ? 1 : 0);
  };

  const controlledOpacity = typeof toolbarVisible === 'boolean' ? toolbarVisible ? 1 : 0 : opacity || menuFoldedOpacity;
  return /*#__PURE__*/_createElement$u(InlineToolbarContext.Provider, {
    value: {
      width: cardLayoutWidth,
      onVisibleChange
    }
  }, /*#__PURE__*/_createElement$u(CardLayoutContainer, {
    style: style,
    isSelected: isSelected,
    className: "card-layout-container",
    "data-id": `card-layout-container-${id}`,
    ref: cardLayoutRef,
    onMouseEnter: () => {
      setOpacity(1);
      onHoverChange && onHoverChange(true);
    },
    onMouseLeave: () => {
      setOpacity(0);
      onHoverChange && onHoverChange(false);
    }
  }, children, /*#__PURE__*/_createElement$u(ToolbarBox, {
    onClick: e => e.stopPropagation(),
    onMouseDown: e => e.stopPropagation(),
    style: {
      opacity: controlledOpacity
    },
    ref: toolbarBoxRef,
    "data-id": `toolbar-box-${id}`,
    toolbarOffsetX: toolbarOffsetX,
    toolbarOffsetY: toolbarOffsetY
  }, toolbar)));
};

const light$1 = {
  level3_base_color: 'rgba(23, 26, 29, 0.4)',
  level1_base_color: '#171A1D',
  level2_base_color: 'rgba(23, 26, 29, 0.6)',
  hover_bg_color: 'rgba(126, 134, 142, 0.12)',
  border_normal: 'rgba(0, 0, 0, 0.16)',
  line_light_color: 'rgba(126, 134, 142, 0.16)',
  bg_doc_color: 'rgba(245,246,248,1)'
};
const PlaceholderWrapper = /*#__PURE__*/styled.withTheme(styled__default['default'].div(["width:100%;height:", ";display:flex;border:1px dashed ", ";color:", ";box-sizing:border-box;border-radius:8px;cursor:default;align-items:center;", ""], ({
  height
}) => `${height}px`, light$1.border_normal, light$1.level3_base_color, ({
  clickable,
  isSelected,
  visible
}) => clickable ? isSelected ? styled.css(["border-color:transparent;;"]) : visible ? styled.css(["background-color:", ";border-color:transparent;.placeholder-title{color:", ";}.placeholder-icon{color:", ";}"], light$1.hover_bg_color, light$1.level1_base_color, light$1.level1_base_color) : styled.css(["&:hover{border-color:", ";}&:hover .placeholder-title{color:", ";}&:hover .placeholder-icon{color:", ";}&:active{background-color:", ";border-color:transparent;}&:active .placeholder-title{color:", ";}&:active .placeholder-icon{color:", ";}background-color:", ";"], light$1.level3_base_color, light$1.level1_base_color, light$1.level1_base_color, light$1.line_light_color, light$1.level1_base_color, light$1.level1_base_color, isSelected ? light$1.hover_bg_color : 'transparent') : styled.css([""])));
const IconContainer = /*#__PURE__*/styled.withTheme(styled__default['default'].div(["display:flex;width:40px;height:40px;background:", ";border-radius:4px;flex-shrink:0;align-items:center;justify-content:center;"], light$1.hover_bg_color));
const ClickAreaContainer = /*#__PURE__*/styled.withTheme(styled__default['default'].div(["width:100%;margin:9px 20px 9px 11px;overflow:hidden;display:flex;box-sizing:border-box;flex-direction:row;"]));
const RightContainer = /*#__PURE__*/styled.withTheme(styled__default['default'].div(["width:100%;padding-left:12px;display:flex;overflow:hidden;flex-direction:column;justify-content:", ";"], ({
  isSingleLine
}) => isSingleLine ? 'center' : 'flex-start'));
const TitleWrapper = /*#__PURE__*/styled.withTheme(styled__default['default'].div(["display:flex;align-items:center;"]));
const Title = /*#__PURE__*/styled.withTheme(styled__default['default'].div(["overflow:hidden;white-space:nowrap;width:", ";text-overflow:ellipsis;font-weight:", ";", ";"], ({
  isSingleLine,
  toolbarWidth,
  toolbarVisible
}) => !isSingleLine && toolbarWidth && toolbarVisible ? `calc(100% - ${toolbarWidth}px)` : `${isSingleLine} ${toolbarWidth}`, ({
  isSingleLine
}) => isSingleLine ? 'normal' : 500, ({
  type
}) => type === 'export' ? styled.css(["height:20px;font-size:14px;line-height:20px;"]) : styled.css(["height:22px;font-size:16px;line-height:22px;"])));
const DesCription = /*#__PURE__*/styled.withTheme(styled__default['default'].div(["overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-weight:normal;font-size:12px;height:16px;line-height:16px;margin-top:2px;"]));

var _ArrowRightNormal;
const _createElement$t = /*#__PURE__*/React__default['default'].createElement;
const CardPlaceholder = /*#__PURE__*/React__default['default'].memo(props => {
  var _Title, _DesCription, _InlineToolbar;

  const {
    height,
    title,
    desc,
    icon,
    type,
    overlay,
    isSelected,
    moreMenuConfig,
    clickable,
    visible,
    offsetX,
    offsetY,
    testid,
    overlayStyle,
    onEdgeClick,
    onCenterClick,
    onVisibleChange
  } = props;
  const elRef = React.useRef();
  const [width, setWidth] = React.useState(0);
  const [toolbarWidth, setToolbarWidth] = React.useState(0);
  const [toolbarVisible, setToolbarVisible] = React.useState(false); // overlay 宽度跟随

  React.useEffect(() => {
    if (!elRef.current) return;
    const myObserver = new ResizeObserver__default['default'](entries => {
      entries.forEach(entry => {
        const {
          width
        } = entry.contentRect;
        if (width === 0) return;
        const floorWidth = Math.floor(width);
        setWidth(floorWidth);
      });
    });
    myObserver.observe(elRef.current);
    return () => myObserver.disconnect();
  }, [elRef]); // 阻塞 overlay click 事件，否则会影响 onEdgeClick

  const overlayClone = React.useMemo(() => {
    return overlay ? /*#__PURE__*/_createElement$t("div", {
      onClick: e => {
        e.preventDefault();
        e.stopPropagation();
      }
    }, /*#__PURE__*/React__default['default'].cloneElement(overlay)) : null;
  }, [overlay]);

  const handleCenterClick = e => {
    e.preventDefault();
    e.stopPropagation();
    clickable && onCenterClick && onCenterClick();
  };

  const handleEdgeClick = _e => {
    clickable && onEdgeClick && onEdgeClick();
  };

  const handleVisibleChange = e => {
    onVisibleChange && onVisibleChange(e);
  };

  const handleToolbarWidthChange = width => {
    setToolbarWidth(width + 8 - 20);
  };

  const handleToolbarVisiable = e => {
    setToolbarVisible(e);
  };

  const defaultoverlayStyle = React.useMemo(() => ({
    border: 0,
    boxShadow: '0px 0px 1px rgb(0 0 0 / 24%), 0px 8px 24px rgb(0 0 0 / 16%)',
    background: 'white',
    width: width === 0 ? -1 : width,
    ...overlayStyle
  }), [width, overlayStyle]);
  const isSingleLine = !desc;
  const placeholder = React.useMemo(() => /*#__PURE__*/_createElement$t(ClickAreaContainer, {
    onClick: handleCenterClick
  }, icon && /*#__PURE__*/_createElement$t(IconContainer, null, /*#__PURE__*/React__default['default'].cloneElement(icon, {
    className: 'placeholder-icon'
  })), /*#__PURE__*/_createElement$t(RightContainer, {
    isSingleLine: isSingleLine
  }, /*#__PURE__*/_createElement$t(TitleWrapper, null, _Title || (_Title = /*#__PURE__*/_createElement$t(Title, {
    className: "placeholder-title",
    isSingleLine: isSingleLine,
    toolbarWidth: toolbarWidth,
    toolbarVisible: toolbarVisible,
    type: type
  }, title)), type === 'export' && (_ArrowRightNormal || (_ArrowRightNormal = /*#__PURE__*/_createElement$t(weDesign.ArrowRightNormal, null)))), !isSingleLine && (_DesCription || (_DesCription = /*#__PURE__*/_createElement$t(DesCription, null, desc))))), [title, icon, desc, toolbarWidth, toolbarVisible]);
  const toolbar = React.useMemo(() => moreMenuConfig && !visible ? _InlineToolbar || (_InlineToolbar = /*#__PURE__*/_createElement$t(InlineToolbar, {
    moreMenuConfig: moreMenuConfig
  })) : undefined, [moreMenuConfig]);
  const dropdown = React.useMemo(() => /*#__PURE__*/_createElement$t(PlaceholderWrapper, {
    ref: elRef,
    "data-testid": testid,
    height: height,
    isSelected: isSelected,
    clickable: clickable,
    visible: visible,
    onClick: handleEdgeClick
  }, overlay ? /*#__PURE__*/_createElement$t(weDesign.Dropdown, {
    visible: visible,
    overlay: overlayClone,
    offsetX: -11 + offsetX,
    offsetY: 15 + offsetY,
    overlayStyle: defaultoverlayStyle,
    trigger: 'click',
    onVisibleChange: handleVisibleChange
  }, placeholder) : placeholder), [height, placeholder, visible, overlay]);
  return clickable ? /*#__PURE__*/_createElement$t(CardLayout, {
    onToolbarWidthChange: handleToolbarWidthChange,
    onHoverChange: handleToolbarVisiable,
    toolbar: toolbar,
    isSelected: isSelected,
    style: {
      width: '100%'
    }
  }, dropdown) : dropdown;
});
CardPlaceholder.defaultProps = {
  height: 65,
  offsetX: 0,
  offsetY: 0,
  clickable: true,
  type: 'normal'
};

const light = {
  level3_base_color: 'rgba(23, 26, 29, 0.4)',
  level1_base_color: 'rgba(23,26,29,0.6)',
  level2_base_color: 'rgba(23, 26, 29, 0.8)',
  hover_bg_color: 'rgba(126, 134, 142, 0.12)',
  border_normal: 'rgba(0, 0, 0, 0.16)',
  line_light_color: 'rgba(126, 134, 142, 0.16)',
  bg_doc_color: 'rgba(245,246,248,1)',
  bg_doc_light_color: 'rgba(245,246,248,1)',
  blue1_color: 'rgba(0,137,255,1)',
  bg_select: 'rgba(126,134,142,0.10)'
};
const changeBgColor = /*#__PURE__*/styled.keyframes(["0%{background-color:", ";}60%{background-color:", ";}to{background-color:", ";}}"], light.line_light_color, light.line_light_color, light.bg_select);
const selectBorder = /*#__PURE__*/styled.css(["border:1px solid ", ";box-shadow:0 0 0 3px rgba(0,106,254,0.12);"], light.blue1_color);
const normalBorder = /*#__PURE__*/styled.css(["border:1px dashed ", ";"], light.border_normal);
const CardPlaceholderContainer = /*#__PURE__*/styled__default['default'].div(["display:inline-block;box-sizing:border-box;width:100%;height:", ";border-radius:8px;color:", ";transition:", "ms;transition-timing-function:step-end;", " cursor:pointer;", " &:hover{.card-container{.placeholder-icon-box{font-size:16px;svg{color:", ";}}.placeholder-title{color:", ";}}", "}", " ", " ", " &.select{animation:", " 250ms cubic-bezier(0.39,0.575,0.565,1) forwards;border-color:", ";.card-container{.placeholder-title{color:", ";}.placeholder-icon-box{font-size:16px;svg{color:", ";}}}", "}&:active{background-color:", ";border-color:", ";.card-container{.placeholder-icon-box{font-size:16px;svg{color:", ";transition:0;}}.placeholder-title{color:", ";transition:0;}}", "}*{box-sizing:border-box;}.card-container{padding:0 0 12px 12px;width:100%;height:100%;display:flex;.placeholder-icon-box{font-size:16px;flex:none;width:40px;height:40px;", " margin-top:12px;margin-right:12px;border-radius:4px;img{object-fit:contain;width:100%;height:100%;}svg{transition:", "ms;transition-timing-function:step-end;font-size:1.2em;color:", ";}}.placeholder-right{flex:1 1 auto;height:100%;overflow:hidden;display:flex;flex-direction:column;.placeholder-top{width:100%;display:flex;flex:1 1 auto;.placeholder-title{flex:1 1 auto;padding-right:12px;margin-top:12px;align-self:center;transition:", "ms;transition-timing-function:step-end;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-style:normal;", " line-height:22px;}.placeholder-toolbar{margin:4px 4px 0 0;flex:none;}}.placeholder-desc{flex:none;width:100%;padding-right:12px;overflow:hidden;display:inline-flex;font-style:normal;font-weight:normal;font-size:12px;line-height:16px;", " .desc-text{flex:0 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}.refresh{flex:none;margin-left:5px;color:", ";&:hover{color:rgba(0,101,213,1);}cursor:pointer;}}}}"], ({
  height
}) => typeof height === 'number' ? height + 'px' : height, light.level3_base_color, ({
  delay
}) => delay, ({
  type
}) => type === 'failure' ? styled.css(["background:#f6f9fe;"]) : styled.css(["background:", ";"], light.bg_doc_color), ({
  isSelected,
  type
}) => isSelected ? selectBorder : type === 'normal' && normalBorder, light.level2_base_color, light.level2_base_color, ({
  isSelected,
  type
}) => isSelected ? selectBorder : type === 'normal' && normalBorder, ({
  type,
  isSelected
}) => !isSelected && type === 'normal' && styled.css(["&:hover{border:1px dashed ", ";}"], light.blue1_color), ({
  isSelected
}) => !isSelected && styled.css(["&.active{background:", ";border:1px dashed ", ";}"], light.line_light_color, light.border_normal), ({
  clickable
}) => !clickable && styled.css(["pointer-events:none;"]), changeBgColor, light.line_light_color, light.level2_base_color, light.level2_base_color, ({
  isSelected
}) => isSelected && selectBorder, light.line_light_color, light.line_light_color, light.level1_base_color, light.level1_base_color, ({
  isSelected
}) => isSelected && selectBorder, ({
  type
}) => type !== 'failure' && styled.css(["padding:11px 10px;background:", ";"], light.hover_bg_color), ({
  delay
}) => delay, light.level3_base_color, ({
  delay
}) => delay, ({
  type
}) => type === 'normal' ? styled.css(["font-size:16px;"]) : type === 'failure' ? styled.css(["font-weight:500;font-size:12px;color:#111f2c;"]) : styled.css(["font-size:14px;line-height:38px;color:", ";"], light.level1_base_color), ({
  type
}) => type === 'failure' ? styled.css(["color:#111f2c;"]) : styled.css(["color:rgba(17,31,44,0.4);"]), light.blue1_color);

const _createElement$s = /*#__PURE__*/React__default['default'].createElement;
const delay$1 = 150;
const Placeholder = props => {
  const {
    height = 65,
    title,
    icon,
    desc,
    type = 'normal',
    isSelected = false,
    toolbarConfigs,
    onClick,
    onVisibleChange,
    clickable = true,
    overlay = /*#__PURE__*/_createElement$s(React__default['default'].Fragment, null),
    visible,
    offsetX,
    offsetY = 4,
    overlayStyle,
    thresholdWidth,
    getContainer
  } = props;
  const id = React.useMemo(() => weDesign.uuid(), []);
  const cardPlaceholderContainerRef = React.useRef(null);
  const [active, setActive] = React.useState(false);
  const [placeholderWidth, setPlaceholderWidth] = React.useState(0);
  const [dropdownVisible, setDropdownVisible] = React.useState(false); // 实时计算宽度

  React.useEffect(() => {
    if (!cardPlaceholderContainerRef.current) {
      return;
    }

    const resizeObserver = new ResizeObserver__default['default'](entries => {
      const entry = entries.find(item => item.target.getAttribute('data-id') === `card-placeholder-container-${id}`);

      if (entry) {
        setPlaceholderWidth(entry.contentRect.width);
      }
    });

    if (resizeObserver && cardPlaceholderContainerRef.current) {
      resizeObserver.observe(cardPlaceholderContainerRef.current);
    }

    return () => {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, [cardPlaceholderContainerRef]);
  return type === 'normal' ? /*#__PURE__*/_createElement$s(weDesign.Dropdown, {
    getContainer: getContainer,
    overlay: /*#__PURE__*/_createElement$s(weUtil.DropdownAnimation, {
      visible: visible || dropdownVisible,
      overlayStyle: {
        width: placeholderWidth,
        borderRadius: '8px',
        border: 'none',
        boxShadow: '0px 0px 1px rgba(0, 0, 0, 0.24), 0px 8px 24px rgba(0, 0, 0, 0.16)',
        ...overlayStyle
      }
    }, overlay),
    overlayStyle: {
      border: 'none',
      boxShadow: 'none',
      background: 'none'
    },
    offsetX: offsetX,
    offsetY: offsetY,
    placement: "bottom",
    visible: visible,
    onVisibleChange: e => {
      setDropdownVisible(e);
      onVisibleChange && onVisibleChange(e);
    },
    disableDomAlign: true
  }, /*#__PURE__*/_createElement$s(CardPlaceholderContainer, {
    delay: delay$1,
    height: height,
    isSelected: isSelected,
    clickable: clickable,
    onClick: onClick,
    className: `${active ? 'active' : ''} ${visible || dropdownVisible ? 'select' : ''}`,
    onMouseDown: () => setActive(true),
    onMouseUp: () => setActive(false),
    ref: cardPlaceholderContainerRef,
    "data-id": `card-placeholder-container-${id}`,
    type: type
  }, /*#__PURE__*/_createElement$s(CardContainer, {
    className: "card-container",
    thresholdWidth: thresholdWidth
  }, icon && /*#__PURE__*/_createElement$s("div", {
    className: "placeholder-icon-box"
  }, icon), /*#__PURE__*/_createElement$s("div", {
    className: "placeholder-right"
  }, /*#__PURE__*/_createElement$s("div", {
    className: "placeholder-top"
  }, /*#__PURE__*/_createElement$s("div", {
    className: "placeholder-title",
    style: !desc ? {
      lineHeight: '38px'
    } : {}
  }, title), /*#__PURE__*/_createElement$s("div", {
    className: "placeholder-toolbar"
  }, /*#__PURE__*/_createElement$s(Toolbar, {
    toolbarConfigs: toolbarConfigs,
    getContainer: getContainer
  }))), desc && /*#__PURE__*/_createElement$s("div", {
    className: "placeholder-desc"
  }, /*#__PURE__*/_createElement$s("div", {
    className: "desc-text"
  }, desc)))))) : /*#__PURE__*/_createElement$s(CardPlaceholderContainer, {
    delay: delay$1,
    height: height,
    clickable: clickable,
    onClick: onClick,
    "data-id": `card-placeholder-container-${id}`,
    type: type
  }, /*#__PURE__*/_createElement$s(CardContainer, {
    className: "card-container"
  }, icon && /*#__PURE__*/_createElement$s("div", {
    className: "placeholder-icon-box"
  }, icon), /*#__PURE__*/_createElement$s("div", {
    className: "placeholder-right"
  }, /*#__PURE__*/_createElement$s("div", {
    className: "placeholder-top"
  }, /*#__PURE__*/_createElement$s("div", {
    className: "placeholder-title"
  }, title)))));
};

const _createElement$r = /*#__PURE__*/React__default['default'].createElement;
const delay = 200;
const PlaceholderH5 = props => {
  const {
    height = 65,
    title,
    icon,
    desc,
    type = 'export',
    isSelected = false,
    clickable = true,
    thresholdWidth,
    onMouseDown
  } = props;
  const id = React.useMemo(() => weDesign.uuid(), []);
  const cardPlaceholderContainerRef = React.useRef(null);
  return type === 'normal' ? /*#__PURE__*/_createElement$r(CardPlaceholderContainer, {
    delay: delay,
    height: height,
    isSelected: isSelected,
    clickable: clickable,
    onMouseDown: onMouseDown,
    ref: cardPlaceholderContainerRef,
    "data-id": `card-placeholder-container-${id}`,
    type: type
  }, /*#__PURE__*/_createElement$r(CardContainer, {
    className: "card-container",
    thresholdWidth: thresholdWidth
  }, icon && /*#__PURE__*/_createElement$r("div", {
    className: "placeholder-icon-box"
  }, icon), /*#__PURE__*/_createElement$r("div", {
    className: "placeholder-right"
  }, /*#__PURE__*/_createElement$r("div", {
    className: "placeholder-top"
  }, /*#__PURE__*/_createElement$r("div", {
    className: "placeholder-title",
    style: !desc ? {
      lineHeight: '38px'
    } : {}
  }, title)), desc && /*#__PURE__*/_createElement$r("div", {
    className: "placeholder-desc"
  }, /*#__PURE__*/_createElement$r("div", {
    className: "desc-text"
  }, desc))))) : /*#__PURE__*/_createElement$r(CardPlaceholderContainer, {
    delay: delay,
    height: height,
    clickable: clickable,
    onMouseDown: onMouseDown,
    "data-id": `card-placeholder-container-${id}`,
    type: type
  }, /*#__PURE__*/_createElement$r(CardContainer, {
    className: "card-container"
  }, icon && /*#__PURE__*/_createElement$r("div", {
    className: "placeholder-icon-box"
  }, icon), /*#__PURE__*/_createElement$r("div", {
    className: "placeholder-right"
  }, /*#__PURE__*/_createElement$r("div", {
    className: "placeholder-top"
  }, /*#__PURE__*/_createElement$r("div", {
    className: "placeholder-title"
  }, title)))));
};

const InlinePlaceholderContainer = /*#__PURE__*/styled__default['default'].span(["padding:3px;background:", ";border-radius:4px;color:", ";margin:1px;font-size:inherit;line-height:inherit;display:inline-flex;align-items:baseline;cursor:", ";*{font-size:inherit;}&:hover{background:rgba(126,134,142,0.12);}&.click{background:rgba(126,134,142,0.24);}&.active{background:rgba(126,134,142,0.16);}&.select{background:rgba(126,134,142,0.16);}& >:nth-child(2){margin-left:3px;margin-right:2px;display:inline-flex;}.inline-placeholder-icon-box{display:inline-flex;vertical-align:baseline;text-align:center;min-width:20px;align-items:center;justify-content:center;align-self:center;& > .weicon{font-size:1.2em;display:inline-block;}svg{fill:", " !important;}}"], ({
  disabled
}) => disabled ? 'rgba(126, 134, 142, 0.12) !important' : '#f5f6f7', ({
  disabled
}) => disabled ? 'rgba(23,26,29, 0.4)' : '#171a1d', ({
  disabled
}) => disabled ? 'not-allowed' : 'pointer', ({
  disabled
}) => disabled ? 'rgba(0,137,255, 0.48)' : '#0089ff');

const _createElement$q = /*#__PURE__*/React__default['default'].createElement;
const InlinePlaceholder = props => {
  var _span, _span2, _span3, _span4, _span5, _span6;

  const {
    style,
    className,
    icon,
    children,
    // 保留原先的默认入参，防止其他业务方出现问题
    type = 'dropdown',
    visible,
    offsetX,
    offsetY = 4,
    onVisibleChange: onVisibleChangeFromProps,
    overlay = /*#__PURE__*/_createElement$q(React__default['default'].Fragment, null),
    overlayStyle,
    overlayClassName,
    isSelected = false,
    onClick,
    getContainer,
    testid,
    disabled,
    role
  } = props;
  const [click, setClick] = React.useState('');
  const [active, setActive] = React.useState(false);

  const onVisibleChange = v => {
    setActive(v);
    onVisibleChangeFromProps && onVisibleChangeFromProps(v);
  };

  const onMouseDown = React.useCallback(() => {
    setClick(' click');
  }, [setClick]);
  const onMouseUp = React.useCallback(() => {
    setClick('');
  }, [setClick]);

  switch (type) {
    case 'normal':
      return /*#__PURE__*/_createElement$q(InlinePlaceholderContainer, {
        style: style,
        className: `${className || ''} ${click} ${active || visible ? ' active' : ''} ${isSelected ? 'select' : ''}`,
        onMouseDown: disabled ? undefined : onMouseDown,
        onMouseUp: disabled ? undefined : onMouseUp,
        onClick: disabled ? undefined : onClick,
        "data-testid": testid,
        "data-role": role,
        disabled: disabled
      }, _span || (_span = /*#__PURE__*/_createElement$q("span", {
        className: "inline-placeholder-icon-box"
      }, icon)), _span2 || (_span2 = /*#__PURE__*/_createElement$q("span", null, children)));

    case 'export':
      return /*#__PURE__*/_createElement$q(InlinePlaceholderContainer, {
        style: style,
        className: `${className} active`,
        onClick: disabled ? undefined : onClick,
        "data-testid": testid,
        disabled: disabled
      }, _span3 || (_span3 = /*#__PURE__*/_createElement$q("span", {
        className: "inline-placeholder-icon-box"
      }, icon)), _span4 || (_span4 = /*#__PURE__*/_createElement$q("span", null, children)));

    case 'dropdown':
    default:
      return /*#__PURE__*/_createElement$q(weDesign.Dropdown, {
        getContainer: getContainer,
        overlay: /*#__PURE__*/_createElement$q(weUtil.DropdownAnimation, {
          overlayStyle: {
            border: 'none',
            borderRadius: '8px',
            boxShadow: '0px 0px 1px rgba(0, 0, 0, 0.24), 0px 8px 24px rgba(0, 0, 0, 0.16)',
            ...overlayStyle
          },
          visible: active
        }, overlay),
        overlayClassName: overlayClassName,
        overlayStyle: {
          border: 'none',
          boxShadow: 'none',
          background: 'none'
        },
        onVisibleChange: onVisibleChange,
        offsetX: offsetX,
        offsetY: offsetY,
        visible: !disabled && visible,
        disableDomAlign: true
      }, /*#__PURE__*/_createElement$q(InlinePlaceholderContainer, {
        style: style,
        className: `${className || ''} ${click} ${active || visible ? ' active' : ''} ${isSelected ? 'select' : ''}`,
        onMouseDown: disabled ? undefined : onMouseDown,
        onMouseUp: disabled ? undefined : onMouseUp,
        onClick: disabled ? undefined : onClick,
        "data-testid": testid,
        disabled: disabled
      }, _span5 || (_span5 = /*#__PURE__*/_createElement$q("span", {
        className: "inline-placeholder-icon-box"
      }, icon)), _span6 || (_span6 = /*#__PURE__*/_createElement$q("span", null, children))));
  }
};

const ButtonContainer = /*#__PURE__*/styled__default['default'].div(["display:inline;font-style:normal;font-weight:normal;line-height:20px;font-size:inherit;cursor:pointer;color:#317ED0;", " .button-icon-box{display:inline;margin-right:3px;vertical-align:middle;line-height:16px;}.button-text-box{display:inline;}"], ({
  type
}) => type === 'link' ? styled.css(["text-decoration-line:underline;"]) : `
    padding: 2px 4px;
    &:hover {
      background: rgba(126, 134, 142, 0.12);
      border-radius: 4px;
    }
  `);

const _createElement$p = /*#__PURE__*/React__default['default'].createElement;
const ButtonCardLayout = props => {
  const {
    icon,
    children,
    type = 'link',
    onVisibleChange,
    overlay = /*#__PURE__*/_createElement$p(React__default['default'].Fragment, null),
    overlayStyle,
    overlayClassName,
    onClick,
    getContainer
  } = props;
  const [active, setActive] = React.useState(false);

  const handleClick = e => {
    onClick && onClick(e);
  };

  const handleOnVisibleChange = e => {
    setActive(e);
    onVisibleChange && onVisibleChange(e);
  };

  return /*#__PURE__*/_createElement$p(weDesign.Dropdown, {
    trigger: "hover",
    offsetY: 4,
    getContainer: getContainer,
    overlay: /*#__PURE__*/_createElement$p(weUtil.DropdownAnimation, {
      visible: active,
      overlayStyle: {
        borderRadius: '8px',
        padding: 0,
        ...overlayStyle
      }
    }, overlay),
    overlayClassName: overlayClassName,
    overlayStyle: {
      border: 'none',
      boxShadow: 'none',
      background: 'none'
    },
    onVisibleChange: handleOnVisibleChange
  }, /*#__PURE__*/_createElement$p(ButtonContainer, {
    onClick: handleClick,
    type: type
  }, icon && /*#__PURE__*/_createElement$p("div", {
    className: "button-icon-box"
  }, icon), /*#__PURE__*/_createElement$p("div", {
    className: "button-text-box"
  }, children)));
};

const SelectGalleryBox = /*#__PURE__*/styled__default['default'].div(["width:116px;height:100%;padding:8px;display:flex;flex-direction:column;align-items:center;box-sizing:border-box;border-radius:4px;"]);
const StyleSelectIconContainer = /*#__PURE__*/styled__default['default'].div(["flex-shrink:1;width:100px;height:100px;background:#f2f2f6;& img{width:100%;height:100%;object-fit:contain;}"]);
const StyleSelectFontBox = /*#__PURE__*/styled__default['default'].div(["flex-shrink:0;width:100%;word-break:break-all;font-size:13px;line-height:20px;color:rgba(23,26,29,0.6);box-sizing:border-box;text-align:left;margin-top:5px;"]);
const Wrapper = /*#__PURE__*/styled__default['default'].div(["z-index:99;width:", "px;"], ({
  width = 196
}) => width);

function useDelayedState(initialValue) {
  const [state, setState] = React.useState(initialValue);
  const timer = React.useRef(null);
  const setDelayedState = React.useCallback((value, delay) => {
    if (timer.current) {
      clearTimeout(timer.current);
    }

    if (delay) {
      timer.current = setTimeout(() => setState(value), delay);
    } else {
      setState(value);
    }
  }, []);
  React.useEffect(() => {
    // 组件卸载时，保证 timer 被正确清理
    return () => {
      if (timer.current) {
        clearTimeout(timer.current);
      }
    };
  }, []);
  return [state, setDelayedState];
}

var _TextSmallIcon, _AbstractSmallIcon, _AbstractSmallIcon2, _CardPreviewNormal, _div$1, _ToolbarPasteNormal;
const _createElement$o = /*#__PURE__*/React__default['default'].createElement;

const isCardType = type => type === 'text' || type === 'card' || type === 'wideCard' || type === 'preview';

const isCCPType = type => type === 'textFormat' || type === 'sourceFormat' || type === 'matchFormat' || type === 'markdownToDoc';

const PastePanel = props => {
  const {
    options,
    onChange,
    hideSplitBtton = false,
    autoUnfold = false,
    locale,
    getContainer,
    width,
    title = ''
  } = props;
  const [visibleIndex, setVisibleIndex] = useDelayedState(-1);
  const [selectKey, setSelectKey] = React.useState(0);
  const [buttonVisible, setButtonVisible] = React.useState(autoUnfold);
  const isCreate = React.useRef(0);
  const t = weUtil.useTranslate(locale); // 卡片默认配置

  const defaultCardOptionMap = {
    text: {
      icon: _TextSmallIcon || (_TextSmallIcon = /*#__PURE__*/_createElement$o(TextSmallIcon$1, null)),
      title: t('we_toolbar_locale_paste_custom_panel_link'),
      des: t('we_toolbar_locale_paste_custom_panel_text'),
      desImg: 'https://img.alicdn.com/imgextra/i4/O1CN01SVRR9O1cHOarEhMi5_!!6000000003575-2-tps-180-140.png'
    },
    card: {
      icon: _AbstractSmallIcon || (_AbstractSmallIcon = /*#__PURE__*/_createElement$o(AbstractSmallIcon, null)),
      title: t('we_toolbar_locale_paste_custom_panel_abstract_card'),
      des: t('we_toolbar_locale_paste_custom_panel_abstract'),
      desImg: 'https://img.alicdn.com/imgextra/i2/O1CN01fPfwUo1RSskY9PviT_!!6000000002111-2-tps-180-140.png'
    },
    wideCard: {
      icon: _AbstractSmallIcon2 || (_AbstractSmallIcon2 = /*#__PURE__*/_createElement$o(AbstractSmallIcon, null)),
      title: t('we_toolbar_locale_paste_custom_panel_abstract_card'),
      des: t('we_toolbar_locale_paste_custom_panel_abstract'),
      desImg: 'https://img.alicdn.com/imgextra/i2/O1CN01fPfwUo1RSskY9PviT_!!6000000002111-2-tps-180-140.png'
    },
    preview: {
      icon: _CardPreviewNormal || (_CardPreviewNormal = /*#__PURE__*/_createElement$o(weIcon.CardPreviewNormal, null)),
      title: t('we_toolbar_locale_paste_custom_panel_preview_card'),
      des: t('we_toolbar_locale_paste_custom_panel_preview'),
      desImg: 'https://img.alicdn.com/imgextra/i1/O1CN01I7NSjK1RPfypgAwaG_!!6000000002104-2-tps-180-140.png'
    }
  };
  const defaultCCPOptionMap = {
    textFormat: {
      title: t('we_toolbar_locale_paste_mode_text')
    },
    sourceFormat: {
      title: t('we_toolbar_locale_paste_mode_source')
    },
    matchFormat: {
      title: t('we_toolbar_locale_paste_mode_match')
    },
    markdownToDoc: {
      title: t('we_toolbar_locale_paste_mode_markdown')
    }
  };

  const handleVisibleChange = (v, index) => {
    if (v) {
      isCreate.current += 1;
      setVisibleIndex(index, 300);
    }
  };

  const handleFocusItemChange = key => {
    if (key !== undefined) {
      isCreate.current += 1;
      setVisibleIndex(Number(key), 300);
    }
  };

  const handleButtonVisibleChange = v => {
    setButtonVisible(v);
  };

  const renderOptionItem = (index, key, title, des, desImg, icon) => {
    return /*#__PURE__*/_createElement$o(weDesign.Dropdown, {
      placement: "rightTop",
      trigger: "hover",
      key: `paste-dropdown-${key}`,
      offsetY: -4,
      offsetX: 2,
      onVisibleChange: v => handleVisibleChange(v, index),
      visible: visibleIndex === index,
      overlay: /*#__PURE__*/_createElement$o(weUtil.DropdownAnimation, {
        visible: visibleIndex === index
      }, des && isCreate.current > 1 && visibleIndex === index ? /*#__PURE__*/_createElement$o(SelectGalleryBox, {
        key: title
      }, /*#__PURE__*/_createElement$o(StyleSelectIconContainer, null, /*#__PURE__*/_createElement$o("img", {
        alt: des,
        src: desImg
      })), /*#__PURE__*/_createElement$o(StyleSelectFontBox, null, title)) : null),
      getContainer: getContainer
    }, /*#__PURE__*/_createElement$o("div", null, /*#__PURE__*/_createElement$o(weDesign.MenuItem, {
      icon: icon,
      menuKey: key,
      testid: key,
      role: key,
      onClick: (_, e) => {
        onChange && onChange(key, e);

        if (!hideSplitBtton) {
          setButtonVisible(false);
          setSelectKey(index);
        }
      }
    }, title)));
  };

  const renderMenu = () => {
    return /*#__PURE__*/_createElement$o(weDesign.Menu, {
      selectedKeys: [`${selectKey}`],
      onFocusItemChange: handleFocusItemChange,
      showSelect: true,
      shortcutKey: true,
      showSelectOnRight: true,
      shouldSelectFirstItem: true
    }, options === null || options === void 0 ? void 0 : options.map((item, index) => {
      // 传入的 option 为卡片自定义
      if (typeof item === 'string') {
        if (isCardType(item)) {
          const {
            title,
            icon,
            des,
            desImg
          } = defaultCardOptionMap[item];
          return renderOptionItem(index, `${index}`, title, des, desImg, icon) || _div$1 || (_div$1 = /*#__PURE__*/_createElement$o("div", null));
        } else if (isCCPType(item)) {
          const {
            title
          } = defaultCCPOptionMap[item];
          return renderOptionItem(index, item, title);
        }
      } else {
        const {
          key,
          title,
          icon,
          des,
          desImg
        } = item;
        return renderOptionItem(index, key, title, des, desImg, icon);
      }
    }));
  };

  const renderOptions = () => {
    return /*#__PURE__*/_createElement$o(Wrapper, {
      width: width,
      className: "ModeMenu"
    }, /*#__PURE__*/_createElement$o(weUtil.DropdownAnimation, {
      visible: true
    }, renderMenu()));
  };

  const renderOverlay = () => {
    return /*#__PURE__*/_createElement$o(Wrapper, {
      width: width,
      className: "ModeMenu"
    }, renderMenu());
  };

  const renderButton = () => {
    return /*#__PURE__*/_createElement$o(IconMenu, {
      icon: _ToolbarPasteNormal || (_ToolbarPasteNormal = /*#__PURE__*/_createElement$o(weIcon.ToolbarPasteNormal, null)),
      title: title,
      showTitle: Boolean(title),
      overlay: renderOverlay(),
      visible: buttonVisible,
      onVisibleChange: handleButtonVisibleChange,
      getContainer: getContainer,
      testid: "paste-panel-button"
    });
  };

  return hideSplitBtton ? renderOptions() : renderButton();
};

const TextWarp = weDesign.withTheme(styled__default['default'].div(["margin-left:", ";cursor:", ";", ""], ({
  theme
}) => theme.ui.marginMini, ({
  disabled
}) => disabled ? 'not-allowed' : 'default', ({
  theme,
  active,
  disabled
}) => !disabled && styled.css([":hover ~ .select-toolbar{background-color:", ";}:active ~ .select-toolbar{background-color:", ";}"], active ? theme.ui.toolbarButtonClick : theme.ui.toolbarButtonHover, disabled ? active ? theme.ui.toolbarButtonSelect : theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonClick)));
const ButtonWrap = weDesign.withTheme(styled__default['default'].div(["display:flex;flex-direction:", ";.select-toolbar{height:auto;padding:0;display:flex;margin:auto;background-color:", ";cursor:", ";", " &.focused{background-color:#fff;&:hover{background-color:#fff;}}}", " .select_trigger_wrap{width:100%;}.select_left_wrap{padding:", ";padding-right:0;font-size:", ";color:", ";> div{font-size:", ";margin-right:0;}}.select_left_wrap label{padding:0;height:20px;min-width:", ";}.select_left_wrap label input{height:20px;}.select_right_wrap{width:16px;display:flex;justify-content:center;}.select_right_wrap .weicon{font-size:8px;margin:0;transform:rotate(0deg) scale(1);}.select_right_wrap .weicon.opened{font-size:8px;margin:0;transform:rotate(180deg) scale(1);}.select-toolbar:hover{", "}.select-toolbar:active{", "}"], ({
  size
}) => size === TOOL_SIZE.LARGE ? 'column-reverse' : 'row', ({
  bordered,
  theme
}) => bordered ? theme.ui.colorGray1 : theme.ui.toolbarButtonTransparent, ({
  disabled
}) => disabled ? 'not-allowed' : 'default', ({
  active,
  theme,
  disabled
}) => active && `background-color: ${disabled ? theme.ui.toolbarButtonSelectDisable : theme.ui.toolbarButtonSelect};`, ({
  disabled,
  theme,
  active
}) => disabled && styled.css([".select-toolbar.disabled{background-color:", ";}"], active ? theme.ui.toolbarButtonSelectDisable : 'transparent'), ({
  theme,
  size
}) => `${size === TOOL_SIZE.SMALL ? `${theme.ui.paddingMini} ${theme.ui.paddingSmall}` : theme.ui.paddingTiny}`, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  theme
}) => theme.ui.commonActionIconColor, ({
  theme,
  size
}) => size === TOOL_SIZE.LARGE ? theme.ui.fontSizeSmall : theme.ui.fontSizeMenu, ({
  mode
}) => mode === 'search' || mode === 'input' ? '35px' : '0', ({
  active,
  theme,
  disabled
}) => !disabled && `background-color:  ${active ? theme.ui.toolbarButtonSelectHover : theme.ui.toolbarButtonHover}; `, ({
  theme,
  disabled
}) => !disabled && `background-color :${theme.ui.toolbarButtonClick}`));

const _createElement$n = /*#__PURE__*/React__default['default'].createElement;
const TextMenu = /*#__PURE__*/React__default['default'].memo( /*#__PURE__*/React__default['default'].forwardRef((props, ref) => {
  const {
    title,
    showTitle,
    disabled,
    size,
    active,
    disabledTip,
    renderTrigger,
    value,
    mode,
    bordered,
    rules,
    style,
    tooltip,
    shortcutText,
    width,
    testid,
    overlay,
    visible: overlayVisible,
    onVisibleChange,
    getContainer,
    zIndex,
    ...restProps
  } = props;
  const contextLocale = weUtil.useGetContextLocale();
  const t = weUtil.useTranslate(contextLocale);
  const [visible, setVisible] = React.useState(false);
  const {
    el,
    id,
    isHide,
    fineAdaptation,
    groupKey,
    isInOffScreenWrap
  } = useVisibilitySensor(ref, testid);
  const styleProps = {
    size,
    active,
    bordered,
    showTitle,
    mode
  };
  const titleNode = React.useMemo(() => {
    return /*#__PURE__*/_createElement$n("div", null, title && typeof title !== 'string' ? title : t(title));
  }, [t, title]);
  const makeTrigger = React.useCallback(val => /*#__PURE__*/_createElement$n(React__default['default'].Fragment, null, renderTrigger && renderTrigger(val), ' ', showTitle && size !== TOOL_SIZE.LARGE ? /*#__PURE__*/_createElement$n(TextWarp, styleProps, titleNode) : null), [renderTrigger, title, showTitle]);
  const finalTrigger = mode === 'search' || mode === 'input' ? undefined : makeTrigger; // 解决 父组件 box-sizing 失效问题

  const cssStyle = React.useMemo(() => ({
    width,
    height: size === TOOL_SIZE.SMALL ? 24 : 28,
    ...style
  }), [style]);
  let tooltipForButton = t(tooltip);

  if (shortcutText != null) {
    tooltipForButton += ` ${shortcutText}`;
  }

  const handleOverLayVisibleChange = React.useCallback(v => {
    setVisible(v);
    onVisibleChange && onVisibleChange(v);
  }, []);
  const openOverLay = React.useCallback(() => {
    setVisible(true);
    onVisibleChange && onVisibleChange(true);
  }, []);
  const triggerLayVisible = React.useCallback(() => {
    setVisible(!visible);
    onVisibleChange && onVisibleChange(!visible);
  }, [visible]);
  const ToolbarIconMemo = React.useMemo(() => ({
    size: size || 'medium'
  }), [size]);
  if (isHide) return null;
  const visibleState = overlayVisible === undefined ? visible : overlayVisible;
  return /*#__PURE__*/_createElement$n(weIcon.ToolbarIconContext.Provider, {
    value: ToolbarIconMemo
  }, /*#__PURE__*/_createElement$n(weDesign.Tooltip, {
    disabled: !disabled,
    title: disabledTip,
    getContainer: getContainer
  }, /*#__PURE__*/_createElement$n(DisableWrap, {
    disabled: disabled,
    className: classnames('text-select-layout')
  }, /*#__PURE__*/_createElement$n(weDesign.Dropdown, {
    visible: visibleState,
    placement: "bottomLeft",
    overlay: overlay || null,
    onVisibleChange: handleOverLayVisibleChange,
    getContainer: getContainer,
    zIndex: zIndex
  }, /*#__PURE__*/_createElement$n(ButtonWrap, _extends__default['default']({
    ref: el,
    "data-id": id,
    onClick: triggerLayVisible,
    "data-mode": mode,
    "data-biz-key": fineAdaptation ? id : null,
    "data-group-id": groupKey
  }, styleProps), showTitle && size === TOOL_SIZE.LARGE && /*#__PURE__*/_createElement$n(TextWarp, _extends__default['default']({}, styleProps, {
    onClick: openOverLay
  }), titleNode), /*#__PURE__*/_createElement$n(weDesign.Select, _extends__default['default']({}, restProps, {
    className: "select-toolbar",
    value: value,
    mode: mode,
    style: cssStyle,
    bordered: bordered,
    renderTrigger: finalTrigger,
    title: disabled ? disabledTip : tooltipForButton,
    visible: visibleState,
    rules: rules,
    testid: isInOffScreenWrap ? '' : testid,
    showErrorState: false,
    getContainer: getContainer
  })))))));
}));
TextMenu.defaultProps = {
  size: 'medium',
  renderTrigger: k => /*#__PURE__*/_createElement$n(React__default['default'].Fragment, null, k)
};

var _ToolbarEmojiNormal;
const _createElement$m = /*#__PURE__*/React__namespace.createElement;
const EmojiMenuButton = /*#__PURE__*/React__namespace.memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$m(IconButton, _extends__default['default']({
    icon: _ToolbarEmojiNormal || (_ToolbarEmojiNormal = /*#__PURE__*/_createElement$m(weDesign.ToolbarEmojiNormal, null)),
    title: t('we_toolbar_emoji'),
    tooltip: t('we_toolbar_emoji'),
    testid: "EmojiMenuButton"
  }, props));
});
EmojiMenuButton.defaultProps = {};

var _UpanddownNormal;
const _createElement$l = /*#__PURE__*/React__namespace.createElement;
const SortMenuButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$l(IconMenu, _extends__default['default']({
    visible: visible,
    icon: _UpanddownNormal || (_UpanddownNormal = /*#__PURE__*/_createElement$l(weDesign.UpanddownNormal, null)),
    title: t('we_toolbar_sort'),
    tooltip: t('we_toolbar_sort'),
    onVisibleChange: handleVisibleChange,
    testid: "SortMenuButton"
  }, props));
});
SortMenuButton.defaultProps = {};

var _ToolbarFilterNormal;
const _createElement$k = /*#__PURE__*/React__namespace.createElement;
const FilterMenuButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$k(IconMenu, _extends__default['default']({
    visible: visible,
    icon: props.icon || _ToolbarFilterNormal || (_ToolbarFilterNormal = /*#__PURE__*/_createElement$k(weDesign.ToolbarFilterNormal, null)),
    title: t('we_toolbar_filter_button'),
    tooltip: t('we_toolbar_filter_button'),
    onVisibleChange: handleVisibleChange,
    testid: "FilterMenuButton"
  }, props));
});
FilterMenuButton.defaultProps = {};

var _SettingNormal;
const _createElement$j = /*#__PURE__*/React__namespace.createElement;
const SettingMenuButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$j(IconMenu, _extends__default['default']({
    visible: visible,
    icon: _SettingNormal || (_SettingNormal = /*#__PURE__*/_createElement$j(weDesign.SettingNormal, null)),
    title: t('we_toolbar_setting'),
    tooltip: t('we_toolbar_setting'),
    onVisibleChange: handleVisibleChange,
    testid: "SettingMenuButton"
  }, props));
});
SettingMenuButton.defaultProps = {};

var _ToolbarFontInsertNor;
const _createElement$i = /*#__PURE__*/React__namespace.createElement;
const InsertTextMenuButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$i(IconMenu, _extends__default['default']({
    visible: visible,
    icon: _ToolbarFontInsertNor || (_ToolbarFontInsertNor = /*#__PURE__*/_createElement$i(weDesign.ToolbarFontInsertNormal, null)),
    title: t('we_toolbar_add_text'),
    tooltip: t('we_toolbar_add_text'),
    onVisibleChange: handleVisibleChange,
    testid: "InsertTextMenuButton"
  }, props));
});
InsertTextMenuButton.defaultProps = {};

var _ToolbarRepeatNormal;
const _createElement$h = /*#__PURE__*/React__namespace.createElement;
const HignlightRepeatMeunButton = /*#__PURE__*/React__namespace.memo(props => {
  const [visible, setVisible] = React__namespace.useState(false);

  const handleVisibleChange = value => {
    setVisible(value);
  };

  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$h(IconMenu, _extends__default['default']({
    visible: visible,
    icon: _ToolbarRepeatNormal || (_ToolbarRepeatNormal = /*#__PURE__*/_createElement$h(weDesign.ToolbarRepeatNormal, null)),
    title: t('we_toolbar_hignlight_repeat'),
    tooltip: t('we_toolbar_hignlight_repeat'),
    onVisibleChange: handleVisibleChange,
    testid: "HignlightRepeatMeunButton"
  }, props));
});
HignlightRepeatMeunButton.defaultProps = {};

exports.MODE_TYPE = void 0;

(function (MODE_TYPE) {
  MODE_TYPE["singleLine"] = "singleLine";
  MODE_TYPE["doubleLine"] = "doubleLine";
})(exports.MODE_TYPE || (exports.MODE_TYPE = {}));

exports.LAYOUT_TYPE = void 0;

(function (LAYOUT_TYPE) {
  LAYOUT_TYPE["column"] = "column";
  LAYOUT_TYPE["row"] = "row";
})(exports.LAYOUT_TYPE || (exports.LAYOUT_TYPE = {}));

const fadeIn = /*#__PURE__*/styled.keyframes(["from{opacity:0;}to{opacity:1;}"]);
const fadeOut$1 = /*#__PURE__*/styled.keyframes(["from{opacity:1;}to{opacity:0;}"]);
const fadeInUp = /*#__PURE__*/styled.keyframes(["   0%{opacity:0;transform:translate3d(0,20px,0);}100%{opacity:1;transform:translate3d(0,0,0);}"]);
const fadeInDown = /*#__PURE__*/styled.keyframes(["0%{opacity:0;transform:translate3d(0,-20px,0);}100%{opacity:1;transform:translate3d(0,0,0);}"]);
const scaleUpTr = /*#__PURE__*/styled.keyframes(["0%{transform:scale(0.5);transform-origin:100% 0%;opacity:0;}100%{transform:scale(1);transform-origin:100% 0%;opacity:1;}"]);
const ColumnWrapper$1 = weDesign.withTheme(styled__default['default'].div(["display:flex;flex-direction:column;justify-content:space-between;margin-right:6px;:last-child{margin-right:0;}"]));
const GroupWrapper$1 = weDesign.withTheme(styled__default['default'].div(["display:flex;", " padding:0 ", ";justify-content:space-between;flex-direction:", ";", "{}"], ({
  hideBorder
}) => !hideBorder && styled.css(["border-right:1px solid ", ";"], ({
  theme
}) => theme.ui.commonBgPressColor), ({
  theme,
  clearPadding
}) => clearPadding ? 0 : theme.ui.paddingSmall, ({
  layoutType
}) => layoutType !== exports.LAYOUT_TYPE.row ? 'row' : 'column', ColumnWrapper$1));
const RowWrapper$1 = weDesign.withTheme(styled__default['default'].div(["display:flex;margin-bottom:4px;:last-child{margin-bottom:0px;}", ";"], ({
  mode
}) => {
  if (mode === exports.MODE_TYPE.doubleLine) {
    const cs = ['.split-button-layout', '.icon-menu-layout', '.icon-button-layout', '.icon-select-layout', '.text-select-layout'];
    return styled.css(["", " .text-select-layout ~ .text-select-layout{margin-left:4px;}"], `${cs.map(o => cs.map(oo => `${o} ~ ${oo}`)).join(',')}{ margin-left: 6px;}`);
  } else {
    return styled.css(["box-sizing:content-box;.split-button-layout,.icon-select-layout{border-left:2px solid transparent;border-right:2px solid transparent;}> *{margin-right:4px;}> *:last-child{margin-right:0;}"]);
  }
}));
const ToolbarWrapper$1 = weDesign.withTheme(styled__default['default'].div(["padding-left:", ";display:flex;justify-content:space-between;background-color:", ";position:relative;height:", ";overflow:hidden;.show-left-wrapper{animation-duration:200ms;animation-fill-mode:both;animation-name:", ";}.toolbar-hide{display:none;}.group-wrapper-enter{animation-duration:200ms;animation-fill-mode:forwards;animation-name:", ";}.group-wrapper-leave{animation-duration:200ms;animation-fill-mode:forwards;animation-name:", ";}.single,.double{display:flex;}.toolbar-left-enter.single{animation-duration:300ms;animation-fill-mode:forwards;animation-name:", ";}.toolbar-left-enter.double{animation-duration:300ms;animation-fill-mode:forwards;animation-name:", ";}.toolbar-left-leave.single,.toolbar-left-leave.double{animation-duration:50ms;animation-fill-mode:forwards;animation-name:", ";top:0;position:absolute;z-index:1;}"], ({
  theme
}) => theme.ui.paddingHug, ({
  backgroundColor
}) => backgroundColor || '#f9fafe', ({
  mode
}) => mode === exports.MODE_TYPE.doubleLine ? '60px' : '36px', fadeIn, fadeIn, fadeOut$1, fadeInUp, fadeInDown, fadeOut$1));
const ToolbarLeftWrapper = weDesign.withTheme(styled__default['default'].div(["padding:", " 0;display:flex;position:relative;.group-transition:last-child .group-wrapper{border-right:none;}.group-transition:first-child .group-wrapper{padding:0 6px 0 0;}.more-btn{margin-left:4px;}"], ({
  theme
}) => theme.ui.paddingTiny));
const ToolbarRightWrapper = weDesign.withTheme(styled__default['default'].div.attrs(() => ({
  'data-testid': 'toolbar-change-mode'
}))(["display:flex;align-items:center;padding-right:24px;background-color:", ";position:absolute;right:0;height:100%;.icon-wrap{width:20px;height:20px;border-radius:4px;&:hover{background-color:", ";}&:active{background-color:", ";}.weicon{font-size:20px;color:rgba(58,60,63,1);transition:transform 500ms;transform:rotate( ", " );}}"], ({
  backgroundColor
}) => backgroundColor || '#f9fafe', ({
  theme
}) => theme.ui.toolbarButtonHover, ({
  theme
}) => theme.ui.toolbarButtonClick, ({
  mode
}) => mode === exports.MODE_TYPE.singleLine ? '0deg' : '180deg'));
const OffScreenWrapper$2 = weDesign.withTheme(styled__default['default'].div(["position:absolute;left:-10000px;display:flex;flex-direction:column;"]));
const MoreOverlay = weDesign.withTheme(styled__default['default'].div(["display:flex;background-color:#f7f8f9;border:1px solid rgba(17,31,44,0.08);box-shadow:1px 3px 8px 0 rgba(0,0,0,0.1);border-radius:6px;&.scale-up{animation:", " 150ms cubic-bezier(0.39,0.575,0.565,1) forwards;}&.scale-out{animation-duration:50ms;animation-fill-mode:forwards;animation-name:", ";}", "{opacity:1;.group-transition:first-child .group-wrapper{padding:0 6px;}}"], scaleUpTr, fadeOut$1, ToolbarLeftWrapper));

const _createElement$g = /*#__PURE__*/React__default['default'].createElement;
const OffScreenWrapper$1 = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    mode,
    doubleLineToolbar,
    singleLineToolbar,
    onBlockChange,
    needGetPositions,
    id
  } = props;
  const [needRender, setNeedRender] = React.useState(false);
  const [laterNeedRender, setLaterNeedRender] = React.useState(false);
  const outElRef = React.useRef();
  const createTimer = React.useRef(0);
  const destroyTimer = React.useRef(0);
  const registersLasterNum = React.useRef(0);
  const destroy = 2000;
  React.useEffect(() => {

    if (destroyTimer.current) {
      window.clearTimeout(destroyTimer.current);
      destroyTimer.current = window.setTimeout(() => {
        setLaterNeedRender(false);
        setNeedRender(false);
        destroyTimer.current = 0;
      }, destroy);
    } else {
      setLaterNeedRender(false);
      setNeedRender(false);
      setNeedRender(true);
    }

    return () => {
    };
  }, [needGetPositions]);
  React.useEffect(() => {
    if (outElRef.current && needRender) {
      registerEl(blocks => {
        onBlockChange(blocks);
        createTimer.current = window.setTimeout(() => {
          setLaterNeedRender(true);
        }, 200);
      });
    }

    return () => {
      createTimer.current && window.clearTimeout(createTimer.current);
    };
  }, [needRender]);
  React.useEffect(() => {
    if (laterNeedRender && outElRef.current) {
      registerEl(blocks => {
        onBlockChange(blocks);
        destroyTimer.current = window.setTimeout(() => {
          setLaterNeedRender(false);
          setNeedRender(false);
          destroyTimer.current = 0;
        }, destroy);
      });
    }
  }, [laterNeedRender]);
  React.useEffect(() => {
    registerEl(registers => {
      registersLasterNum.current !== registers.length;
      registers.filter(o => o.mode === 'singleLine').length > 0 && registers.filter(o => o.mode === 'doubleLine').length > 0 && destroyTimer.current && onBlockChange(registers);
      registersLasterNum.current = registers.length;
    });
  });
  const registerEl = React.useCallback((cb = () => {}) => {
    fastdom__default['default'].measure(() => {
      var _outElRef$current;

      const outElLeft = ((_outElRef$current = outElRef.current) === null || _outElRef$current === void 0 ? void 0 : _outElRef$current.getBoundingClientRect().left) || -10000;
      const blocks = [];
      const groupEls = document.querySelectorAll(`#${id}_offScreen *[data-group-key]`);
      groupEls.forEach(el => {
        if (el.clientWidth !== 0) {
          const id = el.getAttribute('data-group-key') || '';
          const index = blocks.findIndex(o => o.id === id);
          const {
            left,
            width
          } = el.getBoundingClientRect();
          const val = {
            id,
            offset: left + width - outElLeft,
            elType: 'group',
            width,
            mode: el.getAttribute('data-mode'),
            hasFontSizeMaxSelect: el.querySelectorAll('.font-size-max-select-layout').length !== 0
          };

          if (index === -1) {
            blocks.push(val);
          } else {
            blocks.splice(index, 1, val);
          }
        }
      });
      const bizEls = document.querySelectorAll(`#${id}_offScreen *[data-biz-key]`);
      bizEls.forEach(el => {
        if (el.clientWidth !== 0) {
          const id = el.getAttribute('data-biz-key') || '';
          const index = blocks.findIndex(o => o.id === id);
          const {
            left,
            width
          } = el.getBoundingClientRect();
          const val = {
            id,
            offset: left + width - outElLeft,
            elType: 'biz',
            groupId: el.getAttribute('data-group-id') || '',
            width,
            mode: el.getAttribute('data-mode')
          };

          if (index === -1) {
            blocks.push(val);
          } else {
            blocks.splice(index, 1, val);
          }
        }
      });
      cb(blocks);
    });
  }, []);
  return /*#__PURE__*/_createElement$g(OffScreenWrapper$2, {
    ref: outElRef,
    id: `${id}_offScreen`
  }, needRender && /*#__PURE__*/_createElement$g(ToolbarContext.Provider, {
    value: {
      mode,
      hideBlocks: [],
      isInOffScreenWrap: true
    }
  }, mode === exports.MODE_TYPE.doubleLine ? doubleLineToolbar : singleLineToolbar), laterNeedRender && /*#__PURE__*/_createElement$g(ToolbarContext.Provider, {
    value: {
      mode: mode === exports.MODE_TYPE.doubleLine ? 'singleLine' : 'doubleLine',
      hideBlocks: [],
      isInOffScreenWrap: true
    }
  }, mode !== exports.MODE_TYPE.doubleLine ? doubleLineToolbar : singleLineToolbar));
});

const _createElement$f = /*#__PURE__*/React__default['default'].createElement;
const GroupWrapper = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    layoutType,
    fineAdaptation,
    groupKey,
    hideBorder,
    clearPadding
  } = props;
  const {
    mode,
    hideBlocks = [],
    isInOffScreenWrap
  } = React.useContext(ToolbarContext);
  const {
    inOverlay,
    overlayHideBlocks
  } = React.useContext(OverLayContext);
  const el = React.useRef();
  const controller = React.useMemo(() => ({
    fineAdaptation,
    groupKey
  }), [fineAdaptation, groupKey]);
  const isHide = React.useCallback(() => {
    if (inOverlay) {
      return overlayHideBlocks.indexOf(`${mode}-${groupKey}`) !== -1;
    } else {
      return hideBlocks.indexOf(`${mode}-${groupKey}`) !== -1;
    }
  }, [inOverlay, overlayHideBlocks, hideBlocks]);
  return /*#__PURE__*/_createElement$f(GroupWrapperContext.Provider, {
    value: controller
  }, /*#__PURE__*/_createElement$f(CSSTransitionGroup__default['default'], {
    transitionName: "group-wrapper",
    transitionEnterTimeout: 200,
    transitionLeaveTimeout: 200,
    className: "group-transition"
  }, !isHide() && /*#__PURE__*/_createElement$f(GroupWrapper$1, {
    className: "group-wrapper",
    "data-group-key": !fineAdaptation ? `${mode}-${groupKey}` : undefined,
    "data-testid": !isInOffScreenWrap ? `${mode}_GroupWrapper` : undefined,
    "data-mode": mode,
    ref: el,
    mode: mode,
    layoutType: layoutType,
    hideBorder: hideBorder,
    clearPadding: clearPadding
  }, props.children)));
});
GroupWrapper.defaultProps = {
  layoutType: exports.LAYOUT_TYPE.row,
  fineAdaptation: false
};

const _createElement$e = /*#__PURE__*/React__default['default'].createElement;
const RowWrapper = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    mode
  } = React.useContext(ToolbarContext);
  return /*#__PURE__*/_createElement$e(RowWrapper$1, {
    className: "row-wrapper",
    mode: mode
  }, props.children);
});

const _createElement$d = /*#__PURE__*/React__default['default'].createElement;
const ColumnWrapper = /*#__PURE__*/React__default['default'].memo(props => {
  return /*#__PURE__*/_createElement$d(ColumnWrapper$1, null, props.children);
});
ColumnWrapper.defaultProps = {};

var _ToolbarMoreNormal, _div;
const _createElement$c = /*#__PURE__*/React__default['default'].createElement;
const ToolbarLayout = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    onModeChange,
    defaultMode,
    doubleLineToolbar,
    singleLineToolbar,
    locale,
    safeDistance = 100,
    hideSwitchBtn,
    backgroundColor
  } = props;
  const elRef = React.useRef();
  const leftElRef = React.useRef();
  const lockModeRef = React.useRef(false);
  const leftElResizeLock = React.useRef(false);
  const [containment, setContainment] = React.useState();
  const [blocks, setBlocks] = React.useState([]);
  const [hideBlocks, setHideBlocks] = React.useState([]);
  const [overlayHideBlocks, setOverlayShowBlocks] = React.useState([]);
  const timer = React.useRef(0);
  const [mode, setMode] = useControlledValue(props.mode, defaultMode);
  const elRefWidth = React.useRef(0);
  const [elWidth, setElwidth] = React.useState(0);
  const [leftWrapWidth, setLeftWrapWidth] = React.useState(0);
  const [moreVisible, setMoreVisible] = React.useState(false);
  const [moreOverlayCss, setMoreOverlayCss] = React.useState();
  const [needReSize, setNeedReSize] = React.useState();
  const [needGetPositions, setNeedGetPositions] = React.useState(0);
  const [fontSizeMaxSelectSafeWidth, setFontSizeMaxSelectSafeWidth] = React.useState(0);
  const contextLocale = weUtil.useGetContextLocale();
  const t = weUtil.useTranslate(locale || contextLocale);
  const id = React.useMemo(() => uuid(), []);
  const rightWrapWidth = 50;
  /**
   * 文字标题组件动态渲染逻辑
   */

  const resizeFontSizeMaxSelect = React.useCallback(width => {
    const fontSizeMaxSelect = blocks.find(o => o.hasFontSizeMaxSelect);

    if (fontSizeMaxSelect && mode === fontSizeMaxSelect.mode) {
      const _blocks = blocks.filter(o => o.mode === fontSizeMaxSelect.mode);

      const lastBlock = _blocks[_blocks.length - 1];

      if (lastBlock.offset + lastBlock.width < width - rightWrapWidth - safeDistance) {
        setFontSizeMaxSelectSafeWidth(width - rightWrapWidth - lastBlock.offset - lastBlock.width + fontSizeMaxSelect.width);
      } else {
        setFontSizeMaxSelectSafeWidth(fontSizeMaxSelect.width);
      }
    }
  }, [blocks, safeDistance, mode]); // useEffect(() => console.log(blocks), [blocks]);

  /**
   * 可视区域组件变化导致重新计算
   */

  React.useEffect(() => {
    setNeedGetPositions(new Date().getTime());
  }, [needReSize]);
  const layoutResize = React.useCallback(width => {
    if (elRef.current) {
      const hideEl = [];
      const showEl = [];
      blocks.forEach(o => {
        o.offset + safeDistance + rightWrapWidth < width ? showEl.push(o) : hideEl.push(o);
      });
      setHideBlocks(hideEl.map(o => o.id).concat(Array.from(new Set(hideEl.map(o => o.groupId || ''))).filter(key => key && showEl.findIndex(o => o.groupId === key) === -1)));
      setOverlayShowBlocks(showEl.map(o => o.id).concat(Array.from(new Set(showEl.map(o => o.groupId || ''))).filter(key => key && hideEl.findIndex(o => o.groupId === key) === -1)));
      resizeFontSizeMaxSelect(width);
    }
  }, [elRef, blocks, safeDistance, mode]);
  const controller = React.useMemo(() => ({
    mode,
    containment,
    hideBlocks,
    width: elWidth,
    layoutResize,
    leftWrapWidth,
    fontSizeMaxSelectSafeWidth
  }), [mode, containment, hideBlocks, elWidth, layoutResize, fontSizeMaxSelectSafeWidth]);
  /**
   * 切换单双行模式
   */

  const modeChange = React.useCallback(() => {
    // 1s内 不允许重复点击
    if (!lockModeRef.current) {
      const _mode = mode === exports.MODE_TYPE.singleLine ? exports.MODE_TYPE.doubleLine : exports.MODE_TYPE.singleLine;

      setMode(_mode);
      onModeChange && onModeChange(_mode);
      lockModeRef.current = true;
      setTimeout(() => {
        lockModeRef.current = false;
      }, 600);
    }
  }, [mode, onModeChange, layoutResize, elRefWidth]);
  /**
   * 初始化绑定监听容器变化事件
   */

  React.useEffect(() => {
    if (!elRef.current) return;
    setContainment(elRef.current);
    const handleResize = debounce((w, lockMode) => {
      if (elRef.current && !lockMode) {
        setElwidth(w);
        layoutResize(w);
        leftElRef.current && setLeftWrapWidth(leftElRef.current.clientWidth);
      }
    }, 50);
    const resizeObserver = new ResizeObserver__default['default'](entries => {
      const entrie = entries.find(o => o.target.getAttribute('data-id') === `ToolbarWrapper_${id}`); // Toolbar宽度变化时触发

      if (entrie) {
        elRefWidth.current = entrie.contentRect.width;
        handleResize(elRefWidth.current, lockModeRef.current);
        leftElResizeLock.current = true;
        clearTimeout(timer.current);
        timer.current = window.setTimeout(() => {
          leftElResizeLock.current = false;
        }, 500);
      } else if ( //  Toolbar宽度没有变化但是组件新增或者减少时触发
      entries.length === 1 && entries[0].target.getAttribute('data-id') === `ToolbarLeftWrapper_${id}` && !leftElResizeLock.current) {
        setNeedReSize(new Date().getTime());
      }
    });

    if (resizeObserver && elRef.current && leftElRef.current) {
      resizeObserver.observe(elRef.current);
      resizeObserver.observe(leftElRef.current);
    }

    return () => {
      if (resizeObserver) {
        resizeObserver.disconnect();

        if (typeof handleResize.cancel === 'function') {
          handleResize.cancel();
        }
      }

      if (timer.current) clearTimeout(timer.current);
    };
  }, [elRef, layoutResize, resizeFontSizeMaxSelect]);
  const dropdownContextMemo = React.useMemo(() => ({
    inOverlay: true,
    overlayHideBlocks,
    ignoreRegister: true
  }), [overlayHideBlocks]);
  const toolbarContextMemo = React.useMemo(() => ({
    inOverlay: false,
    overlayHideBlocks: [],
    ignoreRegister: true
  }), []);
  const renderMoreBtn = React.useMemo(() => {
    if (hideBlocks.filter(o => o.startsWith(mode || '')).length == 0) {
      return null;
    }
    /**
     * 展开收起动画
     */


    const moreTransition = () => {
      setMoreOverlayCss(moreVisible ? 'scale-out' : 'scale-up');
      !moreVisible && setTimeout(() => setMoreOverlayCss(''), 150);
      setTimeout(() => setMoreVisible(!moreVisible), !moreVisible ? 0 : 500);
    };

    return /*#__PURE__*/_createElement$c(weDesign.Dropdown, {
      visible: moreVisible,
      overlayStyle: {
        backgroundColor: 'transparent',
        boxShadow: 'none',
        border: 'none'
      },
      overlay: /*#__PURE__*/_createElement$c(MoreOverlay, {
        className: moreOverlayCss
      }, /*#__PURE__*/_createElement$c(ToolbarLeftWrapper, null, /*#__PURE__*/_createElement$c(OverLayContext.Provider, {
        value: dropdownContextMemo
      }, mode === exports.MODE_TYPE.doubleLine ? doubleLineToolbar : singleLineToolbar))),
      onVisibleChange: moreTransition,
      placement: "bottomRight",
      overlayAutoAlign: true,
      overlayAutoAlignDelay: 200
    }, /*#__PURE__*/_createElement$c("div", null, /*#__PURE__*/_createElement$c(IconButton, {
      icon: _ToolbarMoreNormal || (_ToolbarMoreNormal = /*#__PURE__*/_createElement$c(weDesign.ToolbarMoreNormal, null)),
      size: mode === exports.MODE_TYPE.singleLine ? 'medium' : 'large',
      title: t('we_toolbar_more'),
      testid: "toolbar_more",
      showTitle: mode !== exports.MODE_TYPE.singleLine,
      className: "more-btn"
    })));
  }, [hideBlocks, overlayHideBlocks, mode, doubleLineToolbar, singleLineToolbar, moreVisible, moreOverlayCss]);
  return /*#__PURE__*/_createElement$c(React__default['default'].Fragment, null, /*#__PURE__*/_createElement$c(OffScreenWrapper$1, {
    onBlockChange: setBlocks,
    needGetPositions: needGetPositions,
    mode: mode,
    doubleLineToolbar: doubleLineToolbar,
    singleLineToolbar: singleLineToolbar,
    id: id
  }), /*#__PURE__*/_createElement$c(ToolbarContext.Provider, {
    value: controller
  }, /*#__PURE__*/_createElement$c(ToolbarWrapper$1, {
    "data-id": `ToolbarWrapper_${id}`,
    role: `toolbar${mode}`,
    ref: elRef,
    mode: mode,
    backgroundColor: backgroundColor
  }, /*#__PURE__*/_createElement$c(ToolbarLeftWrapper, {
    "data-id": `ToolbarLeftWrapper_${id}`,
    ref: leftElRef
  }, /*#__PURE__*/_createElement$c(OverLayContext.Provider, {
    value: toolbarContextMemo
  }, /*#__PURE__*/_createElement$c(CSSTransitionGroup__default['default'], {
    transitionName: 'toolbar-left',
    transitionEnterTimeout: 500,
    transitionLeaveTimeout: 300
  }, mode === exports.MODE_TYPE.singleLine ? /*#__PURE__*/_createElement$c("div", {
    key: "single",
    className: "single"
  }, singleLineToolbar, renderMoreBtn) : /*#__PURE__*/_createElement$c("div", {
    key: "double",
    className: "double"
  }, doubleLineToolbar, renderMoreBtn)))), !hideSwitchBtn && /*#__PURE__*/_createElement$c(ToolbarRightWrapper, {
    onClick: modeChange,
    mode: mode,
    backgroundColor: backgroundColor
  }, _div || (_div = /*#__PURE__*/_createElement$c("div", {
    className: "icon-wrap"
  }, /*#__PURE__*/_createElement$c(weDesign.ToolbarArrowDownNormal, null)))))));
});
ToolbarLayout.defaultProps = {
  defaultMode: exports.MODE_TYPE.singleLine,
  safeDistance: 100,
  hideSwitchBtn: false
};

const ToolbarWrapper = weDesign.withTheme(styled__default['default'].div(["display:flex;justify-content:center;background:#f7f8fa;height:44px;align-items:center;position:relative;"]));
const LeftWrapper = weDesign.withTheme(styled__default['default'].div(["display:flex;position:absolute;left:0;", ""], () => {
  const cs = ['.icon-button-layout'];
  return styled.css(["", ""], `${cs.map(o => cs.map(oo => `${o} ~ ${oo}`)).join(',')}{ margin-left: 4px;}`);
}));
const RightWrapper = weDesign.withTheme(styled__default['default'].div(["display:flex;position:absolute;right:0;"]));
const CenterWrapper = weDesign.withTheme(styled__default['default'].div(["display:flex;padding:0 24px;", ";"], () => {
  const cs = ['.icon-button-layout', '.icon-menu-layout'];
  return styled.css(["", ""], `${cs.map(o => cs.map(oo => `${o} ~ ${oo}`)).join(',')}{ margin-left: 4px;}`);
}));
const OffScreenWrapper = weDesign.withTheme(styled__default['default'].div(["position:absolute;left:-10000px;display:flex;"]));

const _createElement$b = /*#__PURE__*/React__default['default'].createElement;
const SpaceBetweenLayoutOffScreenWrapper = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    leftModule,
    centerModule,
    onBlockChange,
    needGetPositions
  } = props;
  const [needRender, setNeedRender] = React.useState(false);
  const outElRef = React.useRef();
  React.useEffect(() => {
    setNeedRender(true);
  }, [needGetPositions]);
  React.useEffect(() => {
    let timer;

    if (outElRef.current && needRender) {
      onBlockChange(registerEl(outElRef.current));
      timer = window.setTimeout(() => {// setNeedRender(false)
      }, 500);
    }

    return () => {
      timer && clearTimeout(timer);
    };
  }, [needRender]);
  const registerEl = React.useCallback(outElRef => {
    const blocks = [];
    const bizEls = outElRef.querySelectorAll('*[data-biz-key]');
    bizEls.forEach(el => {
      if (el.clientWidth !== 0) {
        const id = el.getAttribute('data-biz-key') || '';
        const groupId = el.getAttribute('data-group-id') || '';
        const val = {
          id,
          offset: el.offsetLeft + el.clientWidth + (groupId === 'center' ? 80 : 0),
          elType: 'biz',
          groupId,
          width: el.clientWidth
        };
        blocks.push(val);
      }
    });
    return blocks;
  }, []);
  return /*#__PURE__*/_createElement$b(OffScreenWrapper, {
    ref: outElRef
  }, needRender && /*#__PURE__*/_createElement$b(React__default['default'].Fragment, null, /*#__PURE__*/_createElement$b(GroupWrapperContext.Provider, {
    value: {
      fineAdaptation: true,
      groupKey: 'left'
    }
  }, /*#__PURE__*/_createElement$b(LeftWrapper, {
    "data-group-key": 'left'
  }, leftModule)), /*#__PURE__*/_createElement$b(GroupWrapperContext.Provider, {
    value: {
      fineAdaptation: true,
      groupKey: 'center'
    }
  }, /*#__PURE__*/_createElement$b(CenterWrapper, {
    "data-group-key": "center"
  }, centerModule))));
});

var _MoreBetaNormal;
const _createElement$a = /*#__PURE__*/React__default['default'].createElement;
const SpaceBetweenLayout = /*#__PURE__*/React__default['default'].memo(props => {
  var _ToolbarGroupWrapper, _ToolbarGroupWrapper2;

  const elRef = React.useRef();
  const leftElRef = React.useRef();
  const centerElRef = React.useRef();
  const [needGetPositions, setNeedGetPositions] = React.useState(0);
  const id = React.useMemo(() => uuid(), []);
  const [blocks, setBlocks] = React.useState([]);
  const [hideBlocks, setHideBlocks] = React.useState([]);
  const [overlayHideBlocks, setOverlayShowBlocks] = React.useState([]);
  const [moreOverlayCss, setMoreOverlayCss] = React.useState();
  const [moreVisible, setMoreVisible] = React.useState(false);
  const {
    leftModule,
    centerModule,
    locale,
    leftOutModule,
    rightOutModule,
    leftOutModuleWidth,
    rightOutModuleWidth
  } = props;
  const contextLocale = weUtil.useGetContextLocale();
  const t = weUtil.useTranslate(locale || contextLocale);
  const offset = 100;
  React.useEffect(() => {
    setNeedGetPositions(new Date().getTime());
  }, []);
  const layoutResize = React.useCallback(width => {
    if (elRef.current) {
      const hideEl = [];
      const showEl = [];
      blocks.forEach(o => {
        o.offset + offset < width ? showEl.push(o) : hideEl.push(o);
      });
      setHideBlocks(hideEl.map(o => o.id).concat(Array.from(new Set(hideEl.map(o => o.groupId || ''))).filter(key => key && showEl.findIndex(o => o.groupId === key) === -1)));
      setOverlayShowBlocks(showEl.map(o => o.id).concat(Array.from(new Set(showEl.map(o => o.groupId || ''))).filter(key => key && hideEl.findIndex(o => o.groupId === key) === -1)));
    }
  }, [elRef, blocks]);
  React.useEffect(() => {
    const handleResize = debounce(width => {
      layoutResize(width - leftOutModuleWidth - rightOutModuleWidth);
    }, 50);
    const resizeObserver = new ResizeObserver__default['default'](entries => {
      const entrie = entries.find(o => o.target.getAttribute('data-id') === `ToolbarWrapper_${id}`);

      if (entrie) {
        handleResize(entrie.contentRect.width);
      }
    });

    if (resizeObserver && elRef.current && leftElRef.current && centerElRef.current) {
      resizeObserver.observe(elRef.current);
      resizeObserver.observe(leftElRef.current);
      resizeObserver.observe(centerElRef.current);
    }

    return () => {
      if (resizeObserver) {
        resizeObserver.disconnect();

        if (typeof handleResize.cancel === 'function') {
          handleResize.cancel();
        }
      }
    };
  }, [blocks]);
  const renderMoreBtn = React.useMemo(() => {
    if (hideBlocks.length === 0) return null;
    /**
     * 展开收起动画
     */

    const moreTransition = () => {
      setMoreOverlayCss(moreVisible ? 'scale-out' : 'scale-up');
      !moreVisible && setTimeout(() => setMoreOverlayCss(''), 100);
      setTimeout(() => setMoreVisible(!moreVisible), !moreVisible ? 0 : 500);
    };

    return /*#__PURE__*/_createElement$a(weDesign.Dropdown, {
      visible: moreVisible,
      overlayStyle: {
        backgroundColor: 'transparent',
        boxShadow: 'none',
        border: 'none'
      },
      overlay: /*#__PURE__*/_createElement$a(MoreOverlay, {
        className: moreOverlayCss
      }, /*#__PURE__*/_createElement$a(ToolbarLeftWrapper, {
        className: "show-left-wrapper"
      }, /*#__PURE__*/_createElement$a(OverLayContext.Provider, {
        value: {
          inOverlay: true,
          overlayHideBlocks,
          ignoreRegister: true
        }
      }, _ToolbarGroupWrapper || (_ToolbarGroupWrapper = /*#__PURE__*/_createElement$a(GroupWrapper, {
        groupKey: "left",
        fineAdaptation: true
      }, /*#__PURE__*/_createElement$a(RowWrapper, null, leftModule))), _ToolbarGroupWrapper2 || (_ToolbarGroupWrapper2 = /*#__PURE__*/_createElement$a(GroupWrapper, {
        groupKey: "center",
        fineAdaptation: true
      }, /*#__PURE__*/_createElement$a(RowWrapper, null, centerModule)))))),
      onVisibleChange: moreTransition,
      placement: "bottomRight"
    }, /*#__PURE__*/_createElement$a("div", null, /*#__PURE__*/_createElement$a(IconButton, {
      icon: _MoreBetaNormal || (_MoreBetaNormal = /*#__PURE__*/_createElement$a(weDesign.MoreBetaNormal, null)),
      title: t('we_toolbar_more'),
      testid: "toolbar_more",
      className: "more-btn"
    })));
  }, [hideBlocks, overlayHideBlocks, moreVisible, moreOverlayCss]);
  return /*#__PURE__*/_createElement$a(React__default['default'].Fragment, null, /*#__PURE__*/_createElement$a(SpaceBetweenLayoutOffScreenWrapper, {
    onBlockChange: setBlocks,
    needGetPositions: needGetPositions,
    centerModule: centerModule,
    leftModule: leftModule
  }), /*#__PURE__*/_createElement$a(ToolbarContext.Provider, {
    value: {
      hideBlocks
    }
  }, /*#__PURE__*/_createElement$a(OverLayContext.Provider, {
    value: {
      inOverlay: false,
      overlayHideBlocks: [],
      ignoreRegister: true
    }
  }, /*#__PURE__*/_createElement$a(ToolbarWrapper, {
    ref: elRef,
    "data-id": `ToolbarWrapper_${id}`
  }, /*#__PURE__*/_createElement$a(GroupWrapperContext.Provider, {
    value: {
      fineAdaptation: true,
      groupKey: 'left'
    }
  }, /*#__PURE__*/_createElement$a(LeftWrapper, {
    ref: leftElRef,
    "data-id": `LeftWrapper_${id}`
  }, leftOutModule, leftModule)), /*#__PURE__*/_createElement$a(GroupWrapperContext.Provider, {
    value: {
      fineAdaptation: true,
      groupKey: 'center'
    }
  }, /*#__PURE__*/_createElement$a(CenterWrapper, {
    ref: centerElRef,
    "data-id": `CenterWrapper_${id}`
  }, centerModule, renderMoreBtn)), /*#__PURE__*/_createElement$a(RightWrapper, null, rightOutModule)))));
});

const GalleryWrap = weDesign.withTheme(styled__default['default'].div(["display:flex;flex-direction:column;align-items:center;border:1px solid rgba(17,31,44,0.12);box-sizing:border-box;border-radius:4px;user-select:none;.nextbutton.show{width:16px;height:36px;margin:4px 0 4px 0;cursor:default;&:hover{border-top-left-radius:4px;border-bottom-left-radius:4px;background-color:rgba(17,31,44,0.08);}&:active{border-top-left-radius:4px;border-bottom-left-radius:4px;background-color:rgba(17,31,44,0.12);}}.prevbutton.show{width:16px;height:36px;margin:4px 0 4px 0;cursor:default;&:hover{border-top-right-radius:4px;border-bottom-right-radius:4px;background-color:rgba(17,31,44,0.08);}&:active{border-top-right-radius:4px;border-bottom-right-radius:4px;background-color:rgba(17,31,44,0.12);}}"]));
const GalleryButton = weDesign.withTheme(styled__default['default'].div(["flex-direction:column;display:flex;height:44px;width:70px;cursor:default;align-items:center;justify-content:space-between;&.active{border-radius:4px;background-color:", ";}", ""], ({
  theme
}) => theme.ui.toolbarButtonSelect, ({
  theme,
  active,
  disabled
}) => !disabled && styled.css([":hover{border-radius:4px;background-color:", ";}:active{border-radius:4px;background-color:", ";}"], active ? theme.ui.toolbarButtonSelectHover : theme.ui.toolbarButtonHover, disabled ? active ? theme.ui.toolbarButtonClick : theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonClick)));
const TableButton = weDesign.withTheme(styled__default['default'].div(["flex-direction:column;cursor:default;display:flex;height:44px;margin-top:10px;width:70px;align-items:center;justify-content:space-between;margin-right:5px;&.active{border-radius:4px;background-color:", ";}", ""], ({
  theme
}) => theme.ui.toolbarButtonSelect, ({
  theme,
  active,
  disabled
}) => !disabled && styled.css([":hover{border-radius:4px;background-color:", ";}:active{border-radius:4px;background-color:", ";}"], active ? theme.ui.toolbarButtonClick : theme.ui.toolbarButtonHover, disabled ? active ? theme.ui.toolbarButtonClick : theme.ui.toolbarButtonTransparent : theme.ui.toolbarButtonClick)));
const TitleWrap = weDesign.withTheme(styled__default['default'].span(["text-overflow:ellipsis;text-align:center;color:", ";opacity:", ";white-space:nowrap;display:flex;align-items:center;", ";"], ({
  theme
}) => theme.ui.commonActionIconColor, ({
  type
}) => type === 'blockquote' ? 0.4 : 1, ({
  type,
  theme
}) => type === 'blockquote' && styled.css(["&:before{content:'';margin-right:2px;border-left:1px solid ", ";height:45%;display:inline-block;line-height:29px;vertical-align:middle;}"], theme.ui.commonActionIconColor)));
const DesWrap = weDesign.withTheme(styled__default['default'].span(["text-overflow:ellipsis;width:68px;color:", ";height:14px;line-height:14px;text-align:center;font-size:12px;white-space:nowrap;margin-bottom:1px;background:#f6f6f7;border-radius:3px;"], ({
  theme
}) => theme.ui.commonBaseColor2));
const TextWrap = /*#__PURE__*/styled__default['default'].div(["font-size:10px;transform:scale(0.9);"]);
const scaleUpTop = /*#__PURE__*/styled.keyframes(["   0%{-webkit-transform:scale(0.5);transform:scale(0.5);-webkit-transform-origin:50% 0%;transform-origin:50% 0%;}100%{-webkit-transform:scale(1);transform:scale(1);-webkit-transform-origin:50% 0%;transform-origin:50% 0%;}"]);
const fadeOut = /*#__PURE__*/styled.keyframes(["from{opacity:1;}to{opacity:0;}"]);
const ContainerMenuDown = /*#__PURE__*/styled__default['default'].div(["display:flex;justify-content:center;"]);
const IconWrapper = weDesign.withTheme(styled__default['default'].div(["width:34px;height:15px;cursor:default;display:flex;position:absolute;left:", ";justify-content:center;align-items:center;box-sizing:content-box;", ";&:hover{border:1px solid transparent;border-bottom-right-radius:4px;border-bottom-left-radius:4px;border-top:0;background-color:#e8e8eb;color:rgba(58,60,63,1);}&:active{border:1px solid transparent;border-bottom-right-radius:4px;border-bottom-left-radius:4px;border-top:0;background-color:#d5d6d9;}.weicon{color:", ";transform:rotate(0deg) scale(1);&.disabled{color:", ";cursor:not-allowed;}}.weicon.opened{transform:rotate(180deg) scale(1);}"], p => p.left, ({
  active
}) => active && styled.css(["background-color:rgba(255,255,255,1);border:1px solid rgba(17,31,44,0.12);border-top:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px;"]), p => p.theme.ui.commonBaseColor3, p => p.theme.ui.commonBaseColor4));
const TableStyleSet = weDesign.withTheme(styled__default['default'].div(["padding:0 5px 12px 12px;width:300px;display:flex;flex-wrap:wrap;box-sizing:content-box;background-color:white;border:1px solid rgba(17,31,44,0.08);box-shadow:1px 3px 8px 0 rgba(0,0,0,0.1);border-radius:6px;user-select:none;&.scale-up{animation:", " 150ms cubic-bezier(0.39,0.575,0.565,1) both;}&.scale-out{animation-duration:50ms;animation-fill-mode:forwards;animation-name:", ";}"], scaleUpTop, fadeOut));

const _createElement$9 = /*#__PURE__*/React__default['default'].createElement;

const FontSizeButton = ({
  option,
  value,
  minFontSize,
  maxFontSize,
  defaultFontFamily
}) => {
  return /*#__PURE__*/_createElement$9(GalleryButton, {
    key: option.type,
    value: option.type,
    testid: option.type,
    active: option.type === value,
    className: weDesign.classnames({
      active: option.type === value
    })
  }, /*#__PURE__*/_createElement$9(TitleWrap, {
    type: option.type,
    style: {
      fontSize: `${Math.min(Math.max(option.default * 0.75, minFontSize), maxFontSize)}pt`,
      fontWeight: option.fontWeight,
      lineHeight: '29px',
      height: '29px',
      textOverflow: 'clip',
      maxWidth: '65px',
      overflow: 'hidden'
    }
  }, option.title), /*#__PURE__*/_createElement$9(DesWrap, null, /*#__PURE__*/_createElement$9(TextWrap, null, option.title === 'AaBbCcDdEe' ? option.des : `${defaultFontFamily} ${option.type === 'blockquote' ? '-' : option.default}`)));
};

const _createElement$8 = /*#__PURE__*/React__default['default'].createElement;
const cellWidth = 76;
const margin = 34;
const FontSizeMaxSelect = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    locale,
    onChange,
    value,
    defaultValue,
    disabled,
    disabledTip,
    testid
  } = props;
  const [showArrowDown, setShowArrowDown] = React.useState(false);
  const [overlayVisible, setOverlayVisible] = React.useState(false);
  const {
    fontSizeMaxSelectSafeWidth = 0
  } = React.useContext(ToolbarContext);
  const [moreOverlayCss, setMoreOverlayCss] = React.useState();

  const getLength = () => {
    const moreLength = Math.floor((fontSizeMaxSelectSafeWidth - margin) / cellWidth);
    return Math.min(Math.max(2, moreLength), 6);
  };

  const [length, setLength] = React.useState(getLength);
  const translate = weUtil.useTranslate(locale);
  const selfRef = React.useRef();
  const sizeComputedRef = React.useRef(false);
  React.useEffect(() => {
    const timer = setTimeout(() => {
      setLength(getLength()); // 未计算好 size 之前去掉缓动（from xingtain）

      sizeComputedRef.current = sizeComputedRef.current || fontSizeMaxSelectSafeWidth !== 0;
    }, 200);
    return () => clearTimeout(timer);
  }, [fontSizeMaxSelectSafeWidth]);
  const minFontSize = 9;
  const maxtFontSize = 13.5; // 文字类型列表：正文、标题1-6

  const options = React.useMemo(() => [{
    title: translate('we_toolbar_font_family_Title_1'),
    type: 'heading-1',
    des: 'Heading 1',
    default: 20,
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: translate('we_toolbar_font_family_Title_2'),
    type: 'heading-2',
    des: 'Heading 2',
    default: 16,
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: translate('we_toolbar_font_family_Title_3'),
    type: 'heading-3',
    des: 'Heading 3',
    default: 14,
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: translate('we_toolbar_font_family_Title_4'),
    type: 'heading-4',
    des: 'Heading 4',
    default: 12,
    fontWeight: 500,
    lineHeight: '1.45'
  }, {
    title: translate('we_toolbar_font_family_Body'),
    type: 'paragraph',
    des: 'Paragraph',
    default: 11,
    fontWeight: 400,
    lineHeight: '1.45'
  }, // todo huilan：locale
  {
    title: translate('we_toolbar_reference'),
    type: 'blockquote',
    des: 'Blockquote',
    default: 11,
    fontWeight: 400,
    lineHeight: '1.45'
  }], [translate]);
  const handleChange = React.useCallback(e => {
    if (onChange) {
      onChange(e);
    }
  }, [onChange]);
  const handleMenuChange = React.useCallback(e => {
    if (onChange) {
      onChange(e);
    }
  }, [onChange]);

  const getOverlay = () => {
    return /*#__PURE__*/_createElement$8(TableStyleSet, {
      className: moreOverlayCss,
      "data-testid": `fontSizeMaxSelect_overlay_${testid}`
    }, options.map(option => {
      return /*#__PURE__*/_createElement$8(TableButton, {
        key: option.type,
        value: option.type,
        active: option.type === (value || defaultValue),
        className: weDesign.classnames({
          active: option.type === (value || defaultValue)
        }),
        testid: option.type,
        onClick: () => {
          if (option.type !== (value || defaultValue)) {
            handleMenuChange(option.type);
          }
        }
      }, /*#__PURE__*/_createElement$8(TitleWrap, {
        type: option.type,
        style: {
          fontSize: `${Math.min(Math.max(option.default * 0.75, minFontSize), maxtFontSize)}pt`,
          fontWeight: option.fontWeight,
          textOverflow: 'clip',
          maxWidth: '65px',
          lineHeight: '29px',
          height: '29px',
          overflow: 'hidden'
        }
      }, option.title), /*#__PURE__*/_createElement$8(DesWrap, null, /*#__PURE__*/_createElement$8(TextWrap, null, option.title === 'AaBbCcDdEe' ? option.des : `${translate('we_toolbar_font_family_detault')} ${option.type === 'blockquote' ? '-' : option.default}`)));
    }));
  };
  /**
   * 展开收起动画
   */


  const moreTransition = () => {
    setMoreOverlayCss(overlayVisible ? 'scale-out' : 'scale-up');
    !overlayVisible && setTimeout(() => setMoreOverlayCss(''), 150);
  };

  const tabsStyle = {
    width: length * 76 + 34,
    height: '100%'
  };
  const WrapperPlaceholder = React__default['default'].useMemo(() => {
    return /*#__PURE__*/_createElement$8("div", {
      style: { ...tabsStyle,
        padding: '3px 22px',
        display: 'flex',
        cursor: 'not-allowed',
        filter: 'opacity(0.3)'
      }
    }, options.slice(0, 2).map(option => /*#__PURE__*/_createElement$8("div", {
      key: option.type,
      style: {
        padding: '0 3px'
      }
    }, /*#__PURE__*/_createElement$8(FontSizeButton, {
      option: option,
      maxFontSize: maxtFontSize,
      minFontSize: minFontSize,
      value: value || defaultValue,
      defaultFontFamily: translate('we_toolbar_font_family_detault')
    }))));
  }, [options, value, defaultValue, minFontSize, maxtFontSize]);

  if (!sizeComputedRef.current) {
    tabsStyle.transition = 'none';
  }

  return /*#__PURE__*/_createElement$8(weDesign.Tooltip, {
    disabled: !disabled,
    title: disabledTip
  }, /*#__PURE__*/_createElement$8(DisableWrap, {
    className: "font-size-max-select-layout",
    disabled: disabled
  }, /*#__PURE__*/_createElement$8("div", {
    style: {
      position: 'relative',
      background: 'white',
      borderRadius: '4px'
    },
    onMouseEnter: () => setShowArrowDown(true),
    onMouseLeave: () => setShowArrowDown(false),
    "data-testid": testid
  }, /*#__PURE__*/_createElement$8(weDesign.Dropdown, {
    offsetY: -3,
    overlayStyle: {
      border: '0px'
    },
    overlay: /*#__PURE__*/_createElement$8(OnIdle, null, /*#__PURE__*/_createElement$8(ContainerMenuDown, {
      "data-testid": `fontSizeMaxSelect_showDown_${testid}`
    }, /*#__PURE__*/_createElement$8(weDesign.Dropdown, {
      overlay: getOverlay(),
      overlayStyle: {
        backgroundColor: 'transparent',
        boxShadow: 'none',
        border: 'none'
      },
      onVisibleChange: vi => {
        setOverlayVisible(vi);
        moreTransition();
      },
      placement: "bottom",
      visible: overlayVisible
    }, /*#__PURE__*/_createElement$8(IconWrapper, {
      isDown: true,
      onClick: () => setOverlayVisible(!overlayVisible),
      active: showArrowDown || overlayVisible,
      left: (length * 76 + 34) / 2
    }, /*#__PURE__*/_createElement$8(weDesign.ArrowDownLineNormal, {
      className: weDesign.classnames({
        opened: overlayVisible
      }),
      style: showArrowDown || overlayVisible ? {
        width: 8,
        height: 8
      } : {
        visibility: 'hidden',
        width: 8,
        height: 8
      }
    }))))),
    placement: "bottom",
    trigger: 'hover'
  }, /*#__PURE__*/_createElement$8(GalleryWrap, {
    ref: selfRef
  }, /*#__PURE__*/_createElement$8(OnIdle, {
    placeholder: WrapperPlaceholder
  }, /*#__PURE__*/_createElement$8(weDesign.Tabs, {
    excessMode: "triangle",
    type: "custom",
    style: tabsStyle,
    onChange: handleChange,
    activeKey: value || defaultValue
  }, options.map(option => {
    return /*#__PURE__*/_createElement$8(weDesign.TabPane, {
      tab: /*#__PURE__*/_createElement$8(FontSizeButton, {
        option: option,
        maxFontSize: maxtFontSize,
        minFontSize: minFontSize,
        value: value || defaultValue,
        defaultFontFamily: translate('we_toolbar_font_family_detault')
      }),
      key: option.type
    });
  }))))))));
});

const OptionWrap = weDesign.withTheme(styled__default['default'].div(["display:flex;align-items:center;font-size:13px;.icon{margin-right:8px;}"]));

const _createElement$7 = /*#__PURE__*/React__default['default'].createElement;

const PageViewSelect = props => {
  const {
    locale,
    onChange,
    title,
    titles,
    disabled,
    size,
    disableWebLayout,
    ...restProps
  } = props;
  const [value, setValue] = weDesign.useControlledValue(props.value, props.defaultValue);
  const t = weUtil.useTranslate(locale); // 页面视图的选项

  const options = React.useMemo(() => [{
    title: t('we_toolbar_view_page_view'),
    value: 'normal_layout',
    Icon: weDesign.FooterPageViewNormal
  }, {
    title: t('we_toolbar_view_paging_view'),
    value: 'page_layout',
    Icon: weDesign.FooterPagingViewNormal
  }].concat(disableWebLayout ? [] : {
    title: t('we_toolbar_view_web_view'),
    value: 'web_layout',
    Icon: weDesign.FooterWebViewNormal
  }), [t, disableWebLayout]); // 该组件的trigger区域显示Icon+文字

  const renderTrigger = React.useCallback(selectedView => {
    const index = options.findIndex(option => option.value === selectedView);
    const currentOption = options[index];
    return /*#__PURE__*/_createElement$7(React__default['default'].Fragment, null, currentOption && /*#__PURE__*/_createElement$7(React__default['default'].Fragment, null, /*#__PURE__*/_createElement$7(currentOption.Icon, {
      style: {
        marginRight: 1
      }
    }), currentOption.title));
  }, [options]);
  const handleChange = React.useCallback(e => {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [setValue, onChange]);
  return /*#__PURE__*/_createElement$7(IconSelect, _extends__default['default']({}, restProps, {
    size: size,
    value: value,
    onChange: handleChange,
    renderTrigger: renderTrigger,
    borderRadius: 0,
    title: title,
    animationPlacement: 'bottom',
    testid: "pagingIcon",
    disabled: disabled
  }), options.map(option => /*#__PURE__*/_createElement$7(weDesign.SelectOption, {
    value: option.value,
    key: option.value,
    testid: option.value,
    title: titles[option.value]
  }, /*#__PURE__*/_createElement$7(OptionWrap, null, /*#__PURE__*/_createElement$7(option.Icon, {
    className: "icon"
  }), /*#__PURE__*/_createElement$7("span", null, option.title)))));
};

PageViewSelect.defaultProps = {
  defaultValue: 'normal_layout',
  titles: {},
  disabled: false,
  ...IconSelectDefaultProps
};

const RatioSelectWrap = /*#__PURE__*/styled__default['default'].div(["display:inline-block;height:100%;&:hover{background-color:rgba(0,0,0,0.04);}"]);
const RatioSelectInner = /*#__PURE__*/styled__default['default'].div(["display:flex;justify-content:center;align-items:center;height:100%;"]);
const Button = weDesign.withTheme(styled__default['default'].div(["display:flex;justify-content:center;align-items:center;height:100%;width:", ";cursor:pointer;outline:none;&:hover{background-color:", ";}&:active{background-color:", ";}&.disabled{background-color:transparent;cursor:not-allowed;color:", ";}.weicon{font-size:20px;}"], ({
  theme
}) => theme.ui.elementHeightMedium, ({
  theme
}) => theme.ui.commonBgHoverColor, ({
  theme
}) => theme.ui.toolbarButtonClick, ({
  theme
}) => theme.ui.disabledColor));
const SelectWrap = /*#__PURE__*/styled__default['default'].div(["height:100%;"]);
const TriggerSpanWrap = /*#__PURE__*/styled__default['default'].span(["height:100%;"]);

var _FooterReduceNormal, _FooterEnlargeNormal;
const _createElement$6 = /*#__PURE__*/React__default['default'].createElement;
const RATIOS = [0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2];
const triggerStyle = {
  width: 38,
  textAlign: 'center',
  borderRadius: 0,
  fontSize: 13,
  height: '100%'
}; // eslint-disable-next-line max-lines-per-function

const RatioSelect = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    locale,
    onVisibleChange,
    onChange,
    step,
    zIndex,
    placement,
    disabled,
    customedList,
    customRatios,
    animationPlacement,
    zoomInShortcutText,
    zoomOutShortcutText
  } = props; // 国际化文案

  const t = weUtil.useTranslate(locale);
  const placeholderTitle = t('we_toolbar_ratio_select_placeholder');
  const zoomInTitle = t('we_toolbar_ratio_select_zoom_in');
  const zoomOutTitle = t('we_toolbar_ratio_select_zoom_out');
  const addText = t('we_toolbar_ratio_select_add');
  const reduceText = t('we_toolbar_ratio_select_reduce'); // visible 受控

  const [visible, setVisible] = weDesign.useControlledValue(props.visible, props.defaultVisible); // value 受控

  const [value, setValue] = weDesign.useControlledValue(props.value, props.defaultValue);
  const ratios = customRatios || RATIOS;
  /**
   * 可见性变化
   */

  const handleVisibleChange = React.useCallback(e => {
    if (onVisibleChange) {
      onVisibleChange(e);
    }

    setVisible(e);
  }, [setVisible, onVisibleChange]);
  /**
   * 值发生变化
   */

  const handleValueChange = React.useCallback(e => {
    if (onChange) {
      onChange(e);
    }

    setValue(e);
  }, [onChange, setValue]);
  /**
   * 减少比例
   */

  const handleReduce = React.useCallback(() => {
    if (disabled) return; // 浮点数精度问题消除

    const newValue = Math.round(value * 100) - Math.round(step * 100);

    if (newValue >= ratios[0] * 100) {
      handleValueChange(newValue / 100);
    } else {
      handleValueChange(ratios[0]);
    }
  }, [value, handleValueChange, step]);
  /**
   * 增加比例
   */

  const handleAdd = React.useCallback(() => {
    if (disabled) return; // 浮点数精度问题消除

    const newValue = Math.round(value * 100) + Math.round(step * 100);

    if (newValue <= ratios[ratios.length - 1] * 100) {
      handleValueChange(newValue / 100);
    } else {
      handleValueChange(ratios[ratios.length - 1]);
    }
  }, [value, handleValueChange, step]);
  /**
   * 如果是focus到减少按钮并回车
   */

  const handleMinusKeyDown = React.useCallback(e => {
    if (e.which === weDesign.KEY_CODES.ENTER) {
      handleReduce();
    }
  }, [handleReduce]);
  /**
   * 如果是focus到增加按钮并回车
   */

  const handleAddKeyDown = React.useCallback(e => {
    if (e.which === weDesign.KEY_CODES.ENTER) {
      handleAdd();
    }
  }, [handleAdd]);
  /**
   * 不是根据select来渲染
   */

  const renderRatio = React.useCallback(e => /*#__PURE__*/_createElement$6(TriggerSpanWrap, null, Math.round(e * 100), "%"), []);
  return /*#__PURE__*/_createElement$6(RatioSelectWrap, null, /*#__PURE__*/_createElement$6(RatioSelectInner, null, /*#__PURE__*/_createElement$6(weDesign.Tooltip, {
    title: zoomOutTitle + `${zoomOutShortcutText ? ` ${zoomOutShortcutText}` : ''}`
  }, /*#__PURE__*/_createElement$6(Button, {
    tabIndex: 0,
    onKeyDown: handleMinusKeyDown,
    onClick: handleReduce,
    className: weDesign.classnames({
      disabled: value === ratios[0] || disabled
    }),
    "data-testid": "RatioSelect_minus",
    "data-role": "footerZoomOut"
  }, _FooterReduceNormal || (_FooterReduceNormal = /*#__PURE__*/_createElement$6(weDesign.FooterReduceNormal, null)))), /*#__PURE__*/_createElement$6(SelectWrap, null, /*#__PURE__*/_createElement$6(weDesign.Select, {
    size: "small",
    value: value,
    visible: visible,
    onChange: handleValueChange,
    renderTrigger: renderRatio,
    onVisibleChange: handleVisibleChange,
    zIndex: zIndex,
    style: triggerStyle,
    showArrow: false,
    placement: placement,
    title: placeholderTitle,
    disabled: disabled,
    testid: "RatioSelect",
    animationPlacement: animationPlacement
  }, /*#__PURE__*/_createElement$6(weDesign.SelectOptionGroup, null, ratios.map(ratio => {
    return /*#__PURE__*/_createElement$6(weDesign.SelectOption, {
      key: `${ratio}`,
      value: ratio,
      testid: `RatioSelect_${ratio}`,
      role: `footerRatioSelectOption${ratio}`
    }, ratio * 100, "%");
  })), customedList ? /*#__PURE__*/_createElement$6(weDesign.SelectOptionGroup, null, customedList.map(item => {
    return /*#__PURE__*/_createElement$6(weDesign.SelectOption, {
      key: `${item.text}`,
      value: item.value,
      testid: `RatioSelect_${item.text}`,
      role: `footerRatioSelectOption${item.text}`
    }, item.text);
  })) : /*#__PURE__*/_createElement$6(React__default['default'].Fragment, null), /*#__PURE__*/_createElement$6(weDesign.SelectOption, {
    disabled: value >= ratios[ratios.length - 1],
    onSelect: handleAdd,
    testid: "RatioSelect_add"
  }, addText, step * 100, "%"), /*#__PURE__*/_createElement$6(weDesign.SelectOption, {
    onSelect: handleReduce // @ts-ignore
    ,
    disabled: value <= ratios[0],
    testid: "RatioSelect_reduce"
  }, reduceText, step * 100, "%"))), /*#__PURE__*/_createElement$6(weDesign.Tooltip, {
    title: zoomInTitle + `${zoomInShortcutText ? ` ${zoomInShortcutText}` : ''}`
  }, /*#__PURE__*/_createElement$6(Button, {
    tabIndex: 0,
    onKeyDown: handleAddKeyDown,
    onClick: handleAdd,
    className: weDesign.classnames({
      disabled: value === ratios[ratios.length - 1] || disabled
    }),
    "data-testid": "RatioSelect_plus",
    "data-role": "footerZoomIn"
  }, _FooterEnlargeNormal || (_FooterEnlargeNormal = /*#__PURE__*/_createElement$6(weDesign.FooterEnlargeNormal, null))))));
});
RatioSelect.defaultProps = {
  defaultVisible: false,
  step: 0.05,
  defaultValue: 1,
  placement: 'top',
  disabled: false
};

var _FooterHelpNormal;
const _createElement$5 = /*#__PURE__*/React__default['default'].createElement;
const HelpCenterButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$5(IconButton, _extends__default['default']({
    style: {
      paddingTop: 0,
      paddingBottom: 0
    },
    borderRadius: 0,
    icon: _FooterHelpNormal || (_FooterHelpNormal = /*#__PURE__*/_createElement$5(weDesign.FooterHelpNormal, null)),
    title: t('we_footer_help_center'),
    tooltip: t('we_footer_help_center'),
    testid: "help_center_button"
  }, props));
});
HelpCenterButton.defaultProps = { ...IconButtonDefaultProps
};

var _FooterTocNormal;
const _createElement$4 = /*#__PURE__*/React__default['default'].createElement;
const TocButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$4(IconButton, _extends__default['default']({
    style: {
      paddingTop: 0,
      paddingBottom: 0
    },
    borderRadius: 0,
    icon: _FooterTocNormal || (_FooterTocNormal = /*#__PURE__*/_createElement$4(weDesign.FooterTocNormal, null)),
    title: t('we_footer_toc'),
    tooltip: t('we_footer_toc'),
    testid: "toc_button"
  }, props));
});
TocButton.defaultProps = {
  showTitle: true,
  ...IconButtonDefaultProps
};

var _FooterKeyboardNormal;
const _createElement$3 = /*#__PURE__*/React__default['default'].createElement;
const ShortcutButton = /*#__PURE__*/React__default['default'].memo(props => {
  const t = weUtil.useTranslate(props.locale);
  return /*#__PURE__*/_createElement$3(IconButton, _extends__default['default']({
    style: {
      paddingTop: 0,
      paddingBottom: 0
    },
    borderRadius: 0,
    icon: _FooterKeyboardNormal || (_FooterKeyboardNormal = /*#__PURE__*/_createElement$3(weDesign.FooterKeyboardNormal, null)),
    title: t('we_footer_shortcut'),
    tooltip: t('we_footer_shortcut'),
    testid: "shortcut_button"
  }, props));
});
ShortcutButton.defaultProps = { ...IconButtonDefaultProps
};

const FooterBoxWrapper = /*#__PURE__*/styled.withTheme(styled__default['default'].div(["display:flex;flex-shrink:0;align-items:center;.icon-select-layout{height:100%;}.select-toolbar{height:100%;}.icon-button-layout{height:100%;}.icon-button{height:100%;}box-sizing:content-box;.split-button-layout,.icon-select-layout{border-left:2px solid transparent;border-right:2px solid transparent;}", ";"], ({
  align
}) => align === 'left' ? styled.css(["justify-content:flex-start;padding-right:16px;> *{margin-left:4px;}> *:first-child{margin-left:0;}"]) : styled.css(["justify-content:flex-end;padding-left:16px;> *{margin-right:4px;}> *:last-child{margin-right:0;}"])));

const _createElement$2 = /*#__PURE__*/React__default['default'].createElement;
const FooterBox = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    horizonAlign,
    children
  } = props;
  return /*#__PURE__*/_createElement$2(FooterBoxWrapper, {
    align: horizonAlign
  }, children);
});

const FooterWrapper = weDesign.withTheme(styled__default['default'].div(["display:flex;height:", ";background-color:", ";justify-content:space-between;padding:0 20px 0 20px;overflow:hidden;"], ({
  height
}) => `${height}px`, ({
  backgroundColor
}) => backgroundColor || 'white'));

const _createElement$1 = /*#__PURE__*/React__default['default'].createElement;
const FooterLayout = /*#__PURE__*/React__default['default'].memo(props => {
  const {
    children,
    height,
    backgroundColor
  } = props;
  return /*#__PURE__*/_createElement$1(FooterWrapper, {
    backgroundColor: backgroundColor,
    height: height
  }, children);
});
FooterLayout.defaultProps = {
  height: 28
};

const FooterGroupWrapper = weDesign.withTheme(styled__default['default'].div(["height:100%;display:flex;", " padding:0 ", ";justify-content:space-between;flex-direction:row;"], ({
  hideBorder
}) => !hideBorder && styled.css(["border-right:1px solid ", ";border-left:1px solid ", ";"], ({
  theme
}) => theme.ui.commonBgPressColor, ({
  theme
}) => theme.ui.commonBgPressColor), ({
  theme,
  clearPadding
}) => clearPadding ? 0 : theme.ui.paddingSmall));

const _createElement = /*#__PURE__*/React__default['default'].createElement;
const FooterGroup = /*#__PURE__*/React__default['default'].memo(props => {
  return /*#__PURE__*/_createElement(FooterGroupWrapper, {
    className: "footer-group"
  }, props.children);
});

const IconMenuOverlayContext = /*#__PURE__*/React__default['default'].createContext({
  hideOverlay: () => {}
});

exports.AbstractCardLayout = AbstractCardLayout;
exports.AddFontSizeButton = AddFontSizeButton;
exports.AddImageButton = AddImageButton;
exports.AddLinkButton = AddLinkButton;
exports.AddTextButton = AddTextButton;
exports.AlignCenter = AlignCenter;
exports.AlignJustify = AlignJustify;
exports.AlignLeft = AlignLeft;
exports.AlignRight = AlignRight;
exports.BoldButton = BoldButton;
exports.BorderPicker = BorderPicker;
exports.BorderPickerOverlay = BorderPickerOverlay;
exports.BorderSet = BorderSet;
exports.BrushButton = BrushButton;
exports.ButtonCardLayout = ButtonCardLayout;
exports.CardContainer = CardContainer;
exports.CardLayout = CardLayout;
exports.CardPlaceholder = CardPlaceholder;
exports.ChartButton = ChartButton;
exports.CheckboxButton = CheckboxButton;
exports.ColorBlockItem = ColorBlockItem;
exports.ColorPalette = ColorPalette;
exports.ColorPicker = ColorPicker;
exports.CommentButton = CommentButton;
exports.ConditionalFormattingButton = ConditionalFormattingButton;
exports.CurrencyButton = CurrencyButton;
exports.DEFAULT_BULLET_LIST_ARRAY = DEFAULT_BULLET_LIST_ARRAY;
exports.DEFAULT_NUMBER_LIST_ARRAY = DEFAULT_NUMBER_LIST_ARRAY;
exports.DecimalPositionMinusButton = DecimalPositionMinusButton;
exports.DecimalPositionPlusButton = DecimalPositionPlusButton;
exports.DeleteButton = DeleteButton;
exports.DeleteLinkButton = DeleteLinkButton;
exports.Divider = Divider$1;
exports.EmojiMenuButton = EmojiMenuButton;
exports.EraserButton = EraserButton;
exports.ExportImage = ExportImage;
exports.FileButton = FileButton;
exports.FillColorPicker = FillColorPicker;
exports.FilterButton = FilterButton;
exports.FilterMenuButton = FilterMenuButton;
exports.FocusButton = FocusButton;
exports.FontFamilySelect = FontFamilySelect;
exports.FontSizeMaxSelect = FontSizeMaxSelect;
exports.FontSizeSelect = FontSizeSelect;
exports.FooterBox = FooterBox;
exports.FooterGroup = FooterGroup;
exports.FooterLayout = FooterLayout;
exports.FormulaButton = FormulaButton;
exports.FrozenButton = FrozenButton;
exports.HeadingSimpleSelect = HeadingSimpleSelect;
exports.HelpCenterButton = HelpCenterButton;
exports.HignlightRepeatMeunButton = HignlightRepeatMeunButton;
exports.HorizontalAlignSelect = HorizontalAlignSelect;
exports.IconButton = IconButton;
exports.IconMenu = IconMenu;
exports.IconMenuOverlayContext = IconMenuOverlayContext;
exports.IconSelect = IconSelect;
exports.ImageButton = ImageButton;
exports.IncreaseIndent = IncreaseIndent;
exports.IndentButton = IndentButton;
exports.InlinePlaceholder = InlinePlaceholder;
exports.InlineToolbar = InlineToolbar;
exports.InlineToolbarContext = InlineToolbarContext$1;
exports.InsertButton = InsertButton;
exports.InsertTextMenuButton = InsertTextMenuButton;
exports.InsertVideoButton = InsertVideoButton;
exports.ItalicButton = ItalicButton;
exports.LIST_STYLE_MAP = LIST_STYLE_MAP;
exports.LineHeightSelect = LineHeightSelect;
exports.ListSet = ListSet;
exports.LockButton = LockButton;
exports.LockMenuButton = LockMenuButton;
exports.MentionButton = MentionButton;
exports.MenuButton = MenuButton;
exports.MergeCellButton = MergeCellButton;
exports.MoreButton = MoreButton;
exports.NumberFormatSelect = NumberFormatSelect;
exports.PageViewSelect = PageViewSelect;
exports.PasteButton = PasteButton;
exports.PastePanel = PastePanel;
exports.PercentButton = PercentButton;
exports.PictureButton = PictureButton;
exports.Placeholder = Placeholder;
exports.PlaceholderH5 = PlaceholderH5;
exports.PreviewCardLayout = PreviewCardLayout;
exports.RatioSelect = RatioSelect;
exports.RedoButton = RedoButton;
exports.ReduceFontSizeButton = ReduceFontSizeButton;
exports.ReduceIndent = ReduceIndent;
exports.SORT_ORDERS = SORT_ORDERS;
exports.ScriptSelect = ScriptSelect;
exports.SearchButton = SearchButton;
exports.SelectButton = SelectButton;
exports.SettingMenuButton = SettingMenuButton;
exports.ShapeInsertButton = ShapeInsertButton;
exports.ShortcutButton = ShortcutButton;
exports.SortDropdown = SortDropdown;
exports.SortMenuButton = SortMenuButton;
exports.SpaceBetweenLayout = SpaceBetweenLayout;
exports.SplitButton = SplitButton;
exports.StrikethroughButton = StrikethroughButton;
exports.SubscriptButton = SubscriptButton;
exports.SuperscriptButton = SuperscriptButton;
exports.TableButton = TableButton$1;
exports.TableWrapSelect = TableWrapSelect;
exports.TaskListButton = TaskListButton;
exports.TaskMenuButton = TaskMenuButton;
exports.TextMenu = TextMenu;
exports.TextSelect = TextSelect;
exports.TextTypeSelect = TextTypeSelect;
exports.TocButton = TocButton;
exports.Toolbar = Toolbar;
exports.ToolbarColumnWrapper = ColumnWrapper;
exports.ToolbarGroupWrapper = GroupWrapper;
exports.ToolbarLayout = ToolbarLayout;
exports.ToolbarRowWrapper = RowWrapper;
exports.TranslateButton = TranslateButton;
exports.UnderlineButton = UnderlineButton;
exports.UndoButton = UndoButton;
exports.VerticalAlignBottomButton = VerticalAlignBottomButton;
exports.VerticalAlignMiddleButton = VerticalAlignMiddleButton;
exports.VerticalAlignSelect = VerticalAlignSelect;
exports.VerticalAlignTopButton = VerticalAlignTopButton;
exports.VoiceButton = VoiceButton;
//# sourceMappingURL=index.js.map
