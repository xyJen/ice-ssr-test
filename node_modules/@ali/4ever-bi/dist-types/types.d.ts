/// <reference types="react" />
/**
 * @packageDocumentation
 * @module PluginConfigs
 */
import { Value, Operation, Plugin, ControllerConfigs, Controller, Block } from '@ali/4ever-cangjie';
import { LinkPluginConfig } from './plugins/link/types';
import { QuickInsertPluginConfig } from './plugins/quickInsert/types';
import { CodePluginConfig } from '@ali/4ever-plugin-code';
import { MentionPluginConfigBi as MentionPluginConfig } from '@ali/4ever-plugin-mention';
import { EmbedPluginConfig } from './plugins/embed/types';
import { ClipboardPluginConfig } from '@ali/4ever-plugin-clipboard';
import { HeadingPluginConfig } from './plugins/heading/types';
import { HistoryPluginConfig } from '@ali/4ever-plugin-history';
import { OnlineVideoPluginConfig } from './plugins/onlineVideo/types';
import { PlaceHolderPluginConfig } from './plugins/placeholder/types';
import { ReferPluginConfig } from './plugins/refer/types';
import { AudioPluginConfig } from './plugins/audio/types';
import { VideoPluginConfig } from './plugins/video/types';
import { IMTagPluginConfig } from './plugins/imTag/types';
import { CalendarCardPluginConfig } from './plugins/calendarCard/types';
import type { DraggablePluginConfig } from '@ali/4ever-plugin-draggable';
import { NewlineGuidePluginConfig } from './plugins/newlineGuide/types';
import { ImagePluginConfig } from './plugins/image/types';
import { FormulaConfig } from './plugins/formula/types';
import { BiConfig as TableConfig } from '@ali/4ever-plugin-table';
import { SubjectConfig } from './plugins/subject/types';
import { HeadingGroupConfig } from './plugins/headingGroup/types';
import type { ColorToolbarConfig } from '@ali/4ever-plugin-color';
import { LaserPointerPluginConfig } from './plugins/laserPointer/types';
import { AutoSpacingPluginConfig } from './plugins/autoSpacing/types';
import { CalloutPluginConfig } from './plugins/callout/types';
import type { IPrefConfig } from '@ali/4ever-plugin-pref';
import { BiConfig as RefBlockPluginConfig } from '@ali/4ever-plugin-refblock';
import { VotePluginConfig } from './plugins/voteCard/types';
import { LeftToolbarItem } from '@ali/4ever-plugin-draggable';
import { QuickPreviewConfigs } from './plugins/quickPreview/types';
import type { FindAndReplaceConfig } from '@ali/4ever-plugin-find-and-replace';
import type { IHoverBlockConfig } from './plugins/hoverBlock/types';
import type { IHoverToolbarPluginConfigs } from './plugins/hoverToolbar/types';
import type { RenderToolbar } from '@ali/4ever-component';
import type { BiPlugin as BiPluginType } from '@ali/4ever-cangjie';
import '@ali/4ever-plugin-fold';
export interface SidebarTriggerConfig {
    open: (key: string, name?: string) => void;
}
/**
 * @ignore
 */
export interface Change {
    operations: Operation[];
    value: Value;
}
/**
 * @ignore
 */
export declare type Changer = (value: Value, ...args: any[]) => Change;
/**
 * @ignore
 */
export interface Action<Payload = any> {
    type: string | symbol;
    payload: Payload;
}
/**
 * Bi 插件的配置选项。
 */
export interface BiPluginConfig extends ControllerConfigs {
    /**
     * 允许业务层自定义插件
     */
    [key: string]: Record<string, any> | undefined;
    /**
     * 议题插件
     */
    subject?: SubjectConfig;
    /**
     * 标题组
     */
    headingGroup?: HeadingGroupConfig;
    /**
     * 剪切板插件
     */
    clipboard?: ClipboardPluginConfig | Record<string, any>;
    /**
     * 代码块插件
     */
    code?: CodePluginConfig;
    /**
     * 内置文件插件
     */
    embed?: EmbedPluginConfig;
    /**
     * 音频插件
     */
    audio?: AudioPluginConfig;
    /**
     * 视频插件
     */
    video?: VideoPluginConfig;
    /**
     * 标题插件
     */
    heading?: HeadingPluginConfig;
    /**
     * 历史记录插件
     */
    history?: HistoryPluginConfig;
    /**
     * 浮动工具栏插件
     */
    hoverToolbar?: IHoverToolbarPluginConfigs;
    /**
     * 块元素高亮效果
     */
    hoverBlock?: IHoverBlockConfig;
    /**
     * 图片插件
     */
    image?: ImagePluginConfig;
    /**
     * 链接插件
     */
    link?: LinkPluginConfig;
    /**
     * AT人插件
     */
    mention?: MentionPluginConfig;
    /**
     * 在线视频插件
     */
    onlineVideo?: OnlineVideoPluginConfig;
    /**
     * 占位字符插件
     */
    placeholder?: PlaceHolderPluginConfig;
    /**
     * 快速插入插件
     */
    quickInsert?: QuickInsertPluginConfig;
    /**
     * 钉盘引用插件
     * @ignore
     */
    refer?: ReferPluginConfig;
    /**
     * bi中的imTag配置
     */
    imTag?: IMTagPluginConfig;
    /**
     * bi中的calendarCard配置
     */
    calendarCard?: CalendarCardPluginConfig;
    /**
     * draggable 配置
     */
    draggable?: DraggablePluginConfig;
    /**
     * newlineGuide 配置
     */
    newlineGuide?: NewlineGuidePluginConfig;
    /**
     * 公式配置
     */
    formula?: FormulaConfig;
    /**
     * 表格配置
     */
    table?: TableConfig;
    /**
     * 颜色工具栏配置
     */
    color?: ColorToolbarConfig;
    /**
     * 激光笔配置
     */
    laserPointer?: LaserPointerPluginConfig;
    /**
     * 中西文自动间距配置
     */
    autoSpacing?: AutoSpacingPluginConfig;
    /**
     * 高亮块配置
     */
    callout?: CalloutPluginConfig;
    /**
     * 用户偏好配置
     */
    pref?: IPrefConfig;
    /**
     * 引用块
     */
    refblock?: RefBlockPluginConfig;
    sideBarTrigger?: SidebarTriggerConfig;
    /**
     * 投票配置
     */
    vote?: VotePluginConfig;
    /**
     * 快速预览态配置
     */
    quickPreview?: QuickPreviewConfigs;
    /**
     * 查找替换配置
     */
    findAndReplace?: FindAndReplaceConfig;
}
/**
 * 插件工厂。该方法会传入一个【调用createBiPlugins时候传入的】BiPluginConfig，和已经加载完成的插件map对象。
 * 工厂需要返回一个编辑器插件。
 * @ignore
 */
export declare type PluginFactory = (config: BiPluginConfig, map: Record<string, Plugin>) => Plugin;
interface LeftToolbarProps {
    controller: Controller;
    currentBlock: Block;
}
export declare type BiPlugin = Plugin & {
    menubar?: any;
    leftToolbar?: React.ComponentType<LeftToolbarProps>;
    toolbar?: {
        getTarget?: (controller: Controller) => string;
    };
    renderToolbar?: RenderToolbar;
    renderHoverToolbar?: BiPluginType['renderHoverToolbar'];
    sidebar?: {
        locale: any;
        config: any;
        items: any;
    } | (() => Promise<{
        locale: any;
        config: any;
        items: any;
    }>);
    quickInsert?: any;
    actions?: any;
    placeholder?: any;
    leftToolbarHandlers?: LeftToolbarItem[];
};
export {};
