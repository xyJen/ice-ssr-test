/// <reference types="lodash" />
import * as React from 'react';
import { Controller, Inline } from '@ali/4ever-cangjie';
import { ImagePlugin } from '@ali/4ever-bamboo';
import { CustomToolButtonConfig } from '../types';
import { TYPE_MENU_DATA } from '@ali/4ever-component';
export interface ImageToolbarProps {
    controller: Controller;
    node: Inline;
    locale: ImagePlugin.ILocale | Record<string, any>;
    handleInlineToolbarRotate(e: any): void;
    handleInlineToolbarRotateAntiClockwise(e: any): void;
    previewImage(url: string, node: Inline): void;
    downloadImage(url: string): void;
    onEnterCroppingMode(e: any): void;
    getZoomContainer(): HTMLElement | null;
    getScrollableContent(): HTMLElement;
    triggerNode: HTMLElement | null;
    visible?: boolean;
    inlineToolbarLayout?: any;
    customToolbars?: {
        customToolButtonConfig: CustomToolButtonConfig;
        customToolLayout: any;
    };
    inlineToolbarMore?: TYPE_MENU_DATA;
}
export interface ImageToolbarState {
    key: string;
}
export declare const getToolButton: (name: string | undefined, icon: React.ReactNode, handleClick: (event: React.MouseEvent, controller?: Controller, node?: any) => any, testid: string, role: string, controller?: Controller, node?: any) => (props: any) => JSX.Element;
declare class ImageInlineToolbar extends React.Component<ImageToolbarProps, ImageToolbarState> {
    private mutationObserver;
    constructor(props: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    shouldIgnoreMutation(mutation: MutationRecord, root: HTMLElement): boolean;
    observerCallback: import("lodash").DebouncedFunc<(mutationsList: MutationRecord[], parentDOM: HTMLElement) => void>;
    initMutationObserver(): void;
    handlepreview: (e: any) => void;
    handledeleteImg: (e: any) => void;
    private readonly handleCorp;
    private readonly handleDownload;
    private readonly handlePreview;
    getCustomToolbar: (node: any, customToolbars: any) => any;
    getMoreMenuButton: () => () => JSX.Element | null;
    getCustomToolButtons: () => {
        'image.crop': (props: any) => JSX.Element;
        'image.download': ((props: any) => JSX.Element) | null;
        'image.preview': ((props: any) => JSX.Element) | null;
        'image.rotateReverse': (props: any) => JSX.Element;
        'image.rotate': (props: any) => JSX.Element;
        'image.singeRotateReverse': (props: any) => JSX.Element;
        'image.more': () => JSX.Element | null;
    };
    getToolButtonFromConfig: (config: CustomToolButtonConfig) => {};
    render(): JSX.Element;
}
export default ImageInlineToolbar;
