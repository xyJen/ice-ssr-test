import * as React from 'react';
import { RelativeEventType } from '@ali/4ever-utils';
import { Inline, Controller } from '@ali/4ever-cangjie';
import { IImgRectData } from './types';
import { ImagePluginConfig } from '../types';
import { Position } from './constants';
export interface ImageEditorProps {
    getZoomContainer(): HTMLElement | null;
    filter?: (url: string) => boolean;
    src: string;
    rotation: any;
    controller: Controller;
    scale: number;
    node: Inline;
    onChangeSize(width: number, height: number, l: number, r: number, t: number, b: number): void;
    onEnterRotationMode(): void;
    onEnterResizingMode(): void;
    handleRotate(rotation: any): void;
    isRotating: boolean;
    onContextMenu(e: React.MouseEvent): void;
    imageConfig: ImagePluginConfig;
    isLoaded: boolean;
    isBlurred: boolean;
    getImgRectData: () => IImgRectData;
    getImgRef: () => HTMLElement | null;
    onClick?: () => void;
}
export interface ImageEditorState {
    mouse: {
        x: number;
        y: number;
    };
    width: number;
    height: number;
    resizing: boolean;
    angle: number;
    l: number;
    r: number;
    t: number;
    b: number;
    left: number;
    top?: number;
}
declare class ImageEditor extends React.Component<ImageEditorProps, ImageEditorState> {
    private readonly imageEditor;
    private readonly rotateControl;
    private readonly initialRectData;
    private resizeObserver;
    private mutationObserver;
    private prevImgWidth;
    private mutationFrameId;
    private resizeFrameId;
    private readonly rate;
    private naturalRate?;
    private readonly scrollableAncestorsDOM;
    private readonly handleParentScroll;
    constructor(props: any);
    initResizeObserver(): void;
    initMutationObserver(): void;
    initScrollHandler(): void;
    removeScrollHandler(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getRealImgRectData(): IImgRectData;
    onResizeStart: (relativeEvent: RelativeEventType, angle: number) => void;
    onResizeMove: (relativeEvent: RelativeEventType) => void;
    onResizeEnd: () => void;
    handleMouseDown: (e: any, angle: any) => void;
    handleMouseMove: (e: any) => void;
    handleMouseUp: (e: any) => void;
    handleTouchStart: (e: React.TouchEvent, angle: number) => void;
    handleTouchMove: (e: TouchEvent) => void;
    handleTouchEnd: (e: TouchEvent) => void;
    updateImageSize: (x: any, y: any) => void;
    updateNaturalRate: React.ReactEventHandler<HTMLImageElement>;
    renderResizeHolder: (angle: any) => JSX.Element | null;
    renderRotateHolder: (angle: any) => JSX.Element;
    renderEditBorder: (position: Position) => JSX.Element;
    renderResizeNumber: () => JSX.Element | null;
    renderResizeBg: () => JSX.Element;
    handleClick: (e: React.MouseEvent) => void;
    render(): JSX.Element;
}
export default ImageEditor;
