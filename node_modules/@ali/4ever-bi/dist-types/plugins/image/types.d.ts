import * as React from 'react';
import { ImageData as ImageMoData } from '@ali/4ever-mo';
import { ImagePlugin } from '@ali/4ever-bamboo';
import { Controller, Inline, Document } from '@ali/4ever-cangjie';
import type { ToolRowProps } from '@ali/4ever-component';
import { TYPE_MENU_DATA } from '@ali/4ever-component';
export interface IRectClip {
    left: number;
    right: number;
    top: number;
    bottom: number;
}
export interface IOutline {
    width?: number;
    color?: string;
    type?: string;
}
export declare type DeepWriteable<T> = {
    -readonly [P in keyof T]: T[P] extends Object ? DeepWriteable<T[P]> : T[P];
};
export declare type IImageData = DeepWriteable<ImageMoData>;
export interface ImageState {
    [key: string]: {
        isTransferring?: boolean;
    };
}
/**
 * 上传文件的函数。编辑器提供文件、进度回调，业务方需要上传到自己的服务器上，并返回上传完成后的URL
 * @file 文件对象（原生的文件）
 * @id 内部ID
 * @notifyProgress 上传进度回调函数，percent取值 1-99
 * @return 返回一个Promise，Promise的结果，是一个 { url: xxx } 类型的object
 */
export declare type IUploadImage = (file: File, id: string, notifyProgress: (percent: number) => void) => Promise<{
    url: string;
    width?: number;
    height?: number;
    extraData?: any;
}>;
export declare type ITransferImageURL = (url: string) => Promise<{
    url: string;
    extraData?: any;
}>;
export interface ImagePluginConfig extends ImagePlugin.ImagePluginConfig {
    inlineToolbarLayout?: ToolRowProps[];
    customToolbars?: CustomToolbar;
    sidebarLayout?: any[];
    inlineToolbarMore?: TYPE_MENU_DATA;
    /**
     * 开启自适应时才生效，获得图片最大宽度的容器，并监听该容器的宽度变化。
     * 返回 null 时, maxWidth 始终为 100%
     */
    getMaxWidthContainer?: (node: Inline, document: Document) => HTMLElement | null;
    /**
     * 禁止图片任意角度旋转功能, 不影响行内工具栏固定角度旋转功能
     */
    disableRotate?: boolean;
    /**
     * 禁止图片缩放
     */
    disableResize?: boolean;
    /**
     * 禁止用 markdown 格式插入图片
     */
    disableMarkdown?: boolean;
    /**
    * 用户点击插入图片。
    */
    selectImage?: () => Promise<File | File[]>;
    /**
     * 插入图片前 hook
     * 如果返回值为 false，则不插入
     */
    shouldInsert?: (file: File) => boolean;
    /**
     * 用户选择了文件，这里需要上传到自身服务器，然后提供URL。
     */
    uploadImage?: IUploadImage;
    /**
     * 渲染额外的节点
     */
    renderExtraNode?: (node: Inline, isSelected: boolean, isHovering?: boolean) => React.ReactNode;
    /**
     * 上传时加载资源失败
     */
    onLoadFileError?: (fileName: string) => void;
}
export interface CustomToolbar {
    [key: string]: {
        customToolButtonConfig?: CustomToolButtonConfig;
        customToolLayout?: ToolRowProps[];
    };
}
interface ToolButtonConfig {
    name: string;
    icon: React.ReactElement;
    handleClick: (event: React.MouseEvent, controller?: Controller, node?: any) => any;
    testid: string;
    role: string;
}
export interface CustomToolButtonConfig {
    [key: string]: ToolButtonConfig;
}
export interface IToolbarItem {
    name: string;
    icon?: React.ReactNode;
    textId?: string;
    onClick?: (event: React.MouseEvent, controller: Controller, node: Inline) => void;
}
export interface SidebarProps {
    controller: Controller;
    node: Inline;
}
export declare type RenderComponent = (props: SidebarProps) => React.ReactNode;
export interface ISidebarItem {
    key: string;
    renderTitle: RenderComponent;
    renderContent: RenderComponent;
}
export {};
