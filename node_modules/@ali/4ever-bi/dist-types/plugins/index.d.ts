import { DocStylePlugin as docStyle } from '@ali/4ever-bamboo';
import alignment from './alignment';
import blockquote from './blockquote';
import clearStyle from './clearStyle';
import { clipboardLatency } from '@ali/4ever-plugin-clipboard';
import fonts from './fonts';
import formatPainter from './formatPainter';
import heading from './heading';
import hr from './hr';
import image from './image';
import indent from './indent';
import lineheight from './lineheight';
import link from './link';
import linkCard from './link/linkCard';
import onlineVideo from './onlineVideo';
import placeholder from './placeholder';
import refer from './refer';
import sticker from './sticker';
import sz from './sz';
import translate from './translate';
import underline from './underline';
import vertAlign from './vertAlign';
import newlineGuide from './newlineGuide';
import letterSpacing from './letterSpacing';
import clearParagraphShd from './clearParagraphShd';
import autoSpacing from './autoSpacing';
import hoverBlock from './hoverBlock';
import uuid from './uuid';
/**
 * 内置的插件集合
 */
declare const plugins: {
    snippets: import("@ali/4ever-cangjie").BiFactory;
    br: import("@ali/4ever-cangjie").MoFactory;
    clipboardLatency: typeof clipboardLatency;
    clearParagraphShd: typeof clearParagraphShd;
    autoSpacing: typeof autoSpacing;
    alignment: typeof alignment;
    bold: {
        (config: import("@ali/4ever-cangjie").BiPluginConfig): import("@ali/4ever-cangjie").BiPlugin;
        commands: Record<string, import("@ali/4ever-cangjie").Command>;
        queries: Record<string, import("@ali/4ever-cangjie").Query>;
        actions: typeof import("@ali/4ever-plugin-marks/src/utils/createMarkFactory/actions");
    };
    blockquote: typeof blockquote;
    clearStyle: typeof clearStyle;
    audio: {
        (config: any): import("@ali/4ever-cangjie").BiPlugin;
        actions: Record<string, any>;
    };
    video: {
        (config: any): import("@ali/4ever-cangjie").BiPlugin;
        actions: Record<string, any>;
    };
    embed: {
        (config: any): import("@ali/4ever-cangjie").BiPlugin;
        actions: Record<string, any>;
    };
    color: {
        (configs: import("@ali/4ever-cangjie").BiPluginConfig): import("@ali/4ever-cangjie").BiPlugin;
        actions: {
            setColor: typeof import("@ali/4ever-plugin-color/src/bi/actions").setColor;
            setColorAtRange: typeof import("@ali/4ever-plugin-color/src/bi/actions").setColorAtRange;
        };
        commands: {
            setColorAtRange: typeof import("@ali/4ever-plugin-color/src/bi/commands/setColorAtRange").default;
            setColor: typeof import("@ali/4ever-plugin-color/src/bi/commands/setColorMark").default;
        };
        queries: {
            getColor: typeof import("@ali/4ever-plugin-color/src/bi/queries/getColor").default;
            getColorAtRange: typeof import("@ali/4ever-plugin-color/src/bi/queries/getColorAtRange").default;
        };
    };
    fonts: typeof fonts;
    formatPainter: typeof formatPainter;
    draggable: {
        (configs: import("@ali/4ever-cangjie").BiPluginConfig): import("@ali/4ever-cangjie").BiPlugin;
        actions: typeof import("@ali/4ever-plugin-draggable/src/bi/actions");
        utils: typeof import("@ali/4ever-plugin-draggable/src/bi/utils");
        createWithDraggable: typeof import("@ali/4ever-plugin-draggable").createWithDraggable;
        createDraggableElement: typeof import("@ali/4ever-plugin-draggable").createDraggableElement;
        scrollableAttribute: {};
        dragMenuActionType: string;
    };
    newlineGuide: typeof newlineGuide;
    inlineCode: import("@ali/4ever-cangjie").BiFactory;
    mention: {
        (configs: import("@ali/4ever-cangjie").BiPluginConfig): import("@ali/4ever-cangjie").BiPlugin;
        actions: typeof import("@ali/4ever-plugin-mention/src/bi/actions");
        commands: {
            insertMention: typeof import("@ali/4ever-plugin-mention/src/bi/commands/insertMention").default;
            insertMentions: typeof import("@ali/4ever-plugin-mention/src/bi/commands/insertMentions").default;
            removeMention: (controller: import("@ali/4ever-cangjie").Controller) => import("@ali/4ever-cangjie").Controller;
            setMention: (controller: import("@ali/4ever-cangjie").Controller, suggestion: import("@ali/4ever-plugin-mention").MentionSuggestion, at?: string | undefined) => import("@ali/4ever-cangjie").Controller;
        };
        quickInsert: typeof import("@ali/4ever-plugin-mention").creatQuickInsertPlugin;
        utils: {
            isSelectionInMention: (value: import("@ali/4ever-cangjie").Value) => boolean;
        };
    };
    heading: typeof heading;
    highlight: {
        (configs: import("@ali/4ever-cangjie").BiPluginConfig): import("@ali/4ever-cangjie").BiPlugin;
        actions: typeof import("@ali/4ever-plugin-highlight/src/bi/actions");
        commands: typeof import("@ali/4ever-plugin-highlight/src/bi/commands");
        queries: typeof import("@ali/4ever-plugin-highlight/src/bi/queries");
    };
    hr: typeof hr;
    italic: {
        (config: import("@ali/4ever-cangjie").BiPluginConfig): import("@ali/4ever-cangjie").BiPlugin;
        commands: Record<string, import("@ali/4ever-cangjie").Command>;
        queries: Record<string, import("@ali/4ever-cangjie").Query>;
        actions: typeof import("@ali/4ever-plugin-marks/src/utils/createMarkFactory/actions");
    };
    strike: {
        (config: import("@ali/4ever-cangjie").BiPluginConfig): import("@ali/4ever-cangjie").BiPlugin;
        commands: Record<string, import("@ali/4ever-cangjie").Command>;
        queries: Record<string, import("@ali/4ever-cangjie").Query>;
        actions: typeof import("@ali/4ever-plugin-marks/src/utils/createMarkFactory/actions");
    };
    image: typeof image;
    lineheight: typeof lineheight;
    link: typeof link;
    linkCard: typeof linkCard;
    list: {
        (configs: import("@ali/4ever-cangjie").BiPluginConfig): import("@ali/4ever-cangjie").BiPlugin;
        actions: typeof import("@ali/4ever-plugin-list/src/bi/actions");
        queries: {
            isEmpty: typeof import("@ali/4ever-plugin-list/src/bi/queries/isEmpty").default;
            isTaskList: typeof import("@ali/4ever-plugin-list/src/bi/queries/isTaskList").default;
            isOrderedList: typeof import("@ali/4ever-plugin-list/src/bi/queries/isOrderedList").default;
            isSelectionInList: typeof import("@ali/4ever-plugin-list/src/bi/queries/isSelectionInList").isSelectionInList;
            isSelectionInListSymbol: typeof import("@ali/4ever-plugin-list/src/bi/queries/isSelectionInListSymbol").isSelectionInListSymbol;
            isSelectionInTaskList: typeof import("@ali/4ever-plugin-list/src/bi/queries/isSelectionInTaskList").isSelectionInTaskList;
            isUnorderedList: typeof import("@ali/4ever-plugin-list/src/bi/queries/isUnorderedList").default;
            hasListSelection: typeof import("@ali/4ever-plugin-list/src/bi/queries/hasListSelection").default;
            getListStyleText: typeof import("@ali/4ever-plugin-list/src/bi/queries/getListStyleText").default;
            getListCurrentItem: typeof import("@ali/4ever-plugin-list/src/bi/queries/getListCurrentItem").getListCurrentItem;
            getListChildItems: (controller: import("@ali/4ever-cangjie").Controller, currrentItem: import("@ali/4ever-cangjie").Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>) => import("@ali/4ever-cangjie").Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren>[];
            isListSymbolSelected: typeof import("@ali/4ever-plugin-list/src/bi/queries/isListSymbolUnSelected").isListSymbolSelected;
            getListDepthItems: (controller: import("@ali/4ever-cangjie").Controller) => {
                depthItems: (import("@ali/4ever-cangjie").Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren> | null)[];
                hasFirstStart: boolean;
            };
            getSymbolStyleByKey: typeof import("@ali/4ever-plugin-list/src/utils").getSymbolStyleByKey;
        };
        utils: typeof import("@ali/4ever-plugin-list/src/bi/utils");
        components: {
            createListItem: typeof import("@ali/4ever-plugin-list").createBiListItem;
        };
    };
    code: import("@ali/4ever-cangjie").BiFactory;
    marks: {
        (config: import("@ali/4ever-cangjie").BiPluginConfig): import("@ali/4ever-cangjie").BiPlugin;
        createMarksPlugin: import("@ali/4ever-cangjie").ZhiFactory;
    };
    textBackground: import("@ali/4ever-cangjie").ZhiFactory;
    templateButton: import("@ali/4ever-cangjie").BiFactory;
    refer: typeof refer;
    onlineVideo: typeof onlineVideo;
    placeholder: typeof placeholder;
    sticker: typeof sticker;
    sz: typeof sz;
    table: import("@ali/4ever-cangjie").BiFactory;
    indent: typeof indent;
    translate: typeof translate;
    underline: typeof underline;
    vertAlign: typeof vertAlign;
    contextMenu: import("@ali/4ever-cangjie").BiFactory;
    inlinePlaceholder: import("@ali/4ever-cangjie").MoFactory;
    paragraph: import("@ali/4ever-cangjie").BiFactory;
    letterSpacing: typeof letterSpacing;
    paragraphColor: () => {
        onAction: (action: import("@ali/4ever-cangjie").Action<Record<string, any>>, controller: import("@ali/4ever-cangjie").Controller, next: Function) => any;
        menubar: {
            menu: (props: import("./paragraphColor/types").IMenuProps) => JSX.Element;
        };
        queries: typeof import("./paragraphColor/queries");
    };
    docStyle: typeof docStyle;
    uuid: typeof uuid;
    hoverBlock: typeof hoverBlock;
    pref: {
        (config: import("@ali/4ever-cangjie").BiPluginConfig): import("@ali/4ever-cangjie").BiPlugin;
        actions: {
            SET_COLOR_PANEL_MODE: symbol;
            setColorPanelMode: (payload: import("@ali/4ever-plugin-pref/src/bi/types").IColorPanelMode) => {
                type: symbol;
                payload: import("@ali/4ever-plugin-pref/src/bi/types").IColorPanelMode;
            };
        };
    };
};
export default plugins;
