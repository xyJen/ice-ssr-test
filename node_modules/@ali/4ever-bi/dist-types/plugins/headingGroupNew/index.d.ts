import { Controller, Element, Group } from '@ali/4ever-cangjie';
import { BiPluginConfig } from '../../types';
declare const createHeadingGroupPlugin: (config: BiPluginConfig) => {
    renderGroup: import("@ali/4ever-cangjie/src/interfaces/renderGroup").default | undefined;
    generateGroup: ((element: Element<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").Node[]>, controller: Controller, next: import("@ali/4ever-cangjie/src/interfaces/next").default<void>) => void | (Pick<Group<Record<string, any>>, "type"> & {
        data: Omit<Record<string, any> & {
            cangjieGroupCollpased: boolean;
        }, "cangjieGroupCollpased">;
    })) | undefined;
    queries: {
        getHeadingParent: typeof import("@ali/4ever-plugin-heading-group/src/utils/queries").getHeadingParent;
        getHeadingAncestors: typeof import("@ali/4ever-plugin-heading-group/src/utils/queries").getHeadingAncestors;
        getHeadingGroupLevel: () => number;
        isHeadingGroupAvailable: () => boolean;
        getLeftToolbarOffset: (controller: any, data: any) => {
            x: number;
            y: number;
        } | undefined;
        isElementInGroup: (controller: Controller, element: Element, group: Group) => boolean;
    };
};
export default createHeadingGroupPlugin;
