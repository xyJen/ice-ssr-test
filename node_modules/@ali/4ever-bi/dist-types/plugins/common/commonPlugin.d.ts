import { isAtEndOfParagraph, isAtStartOfParagraph, isSelectionAtSameBlock, getPointAndBlockOnSelection, changeNullSelectionMark, getRandomId, hasMark, isCollapsedInEmptyText, isInsertInline, getMarkTextMatchInfo } from '@ali/4ever-utils';
declare const CommonPlugin: {
    utils: {
        toggleRangesMark: (controller: any, mark: any) => any;
        isAtEndOfParagraph: typeof isAtEndOfParagraph;
        isAtStartOfParagraph: typeof isAtStartOfParagraph;
        isSelectionAtSameBlock: typeof isSelectionAtSameBlock;
        getPointAndBlockOnSelection: typeof getPointAndBlockOnSelection;
        changeNullSelectionMark: typeof changeNullSelectionMark;
        generateKey: (node?: any) => string;
        getClosestParagraph: (value: import("@ali/4ever-cangjie").Value, alignBlock?: import("@ali/4ever-cangjie").Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren> | undefined) => import("@ali/4ever-cangjie").Block<import("@ali/4ever-cangjie/src/interfaces/data").default, import("@ali/4ever-cangjie").BlockChildren> | null;
        getRandomId: typeof getRandomId;
        hasMark: typeof hasMark;
        isCollapsedInEmptyText: typeof isCollapsedInEmptyText;
        isInsertInline: typeof isInsertInline;
        re: {
            bold: RegExp;
            italic: RegExp;
            strike: RegExp;
            subscript: RegExp;
            superscript: RegExp;
            underline: RegExp;
            link: RegExp;
            mention: RegExp;
            inlineCode: RegExp;
        };
        getMatches: (value: any, regex: any) => any;
        getOffset: (snippetEnd: any, snippet: any, borderSize: any) => import("@ali/4ever-utils").OffsetInfo;
        getMarkTextMatchInfo: typeof getMarkTextMatchInfo;
    };
};
export { CommonPlugin };
