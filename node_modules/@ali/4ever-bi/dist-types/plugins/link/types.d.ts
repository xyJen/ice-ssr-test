/**
 * @packageDocumentation
 * @module Plugin-Link
 */
import { Block, Controller, Decoration, Inline, Node, RangeSelection, Text } from '@ali/4ever-cangjie';
import type { CardData, LinkProperties } from '@ali/4ever-mo';
/**
 * 链接卡片的弹窗
 */
export interface LinkPortalProps {
    node?: LinkNode;
    text: string;
    href: string;
    controller: Controller;
    locale: LinkPluginConfig['locale'];
    onSave: (text: string, href: string, displayType: LinkDisplayType) => void;
    onRemove: () => void;
    onCut: () => void;
    onUnlink: () => void;
    onOpenlink: () => void;
    onCopyLink: (href: string) => void;
    isLinkFocused?: boolean;
    getLinkInfo?: LinkPluginConfig['getLinkInfo'];
    onToolbarSwitchStyle: (href: string, displayType: LinkDisplayType, title?: string, desc?: string, imgURL?: string) => void;
    enableCard: boolean;
    mountRoot?: boolean;
}
/**
 * @ignore
 */
export interface LinkData {
    href: string;
}
export interface IRange {
    startOffset: number;
    endOffset: number;
}
export declare type CardState = 'loading' | 'error' | 'normal';
export declare type ILinkCardData = NonNullable<LinkProperties['data']>;
export declare type ILinkCardInfo = NonNullable<ILinkCardData['cardInfo']>;
export declare type LinkDisplayType = NonNullable<ILinkCardInfo['displayType']>;
export declare type LinkNode = Inline & {
    data: ILinkCardData;
};
declare type CardInfoData = ILinkCardInfo & {
    displayType: 'card';
};
export declare type LinkCardNode = Inline & {
    data: {
        cardInfo: CardInfoData;
        href: string;
    };
};
/**
 * @ignore
 */
export interface LinkLocale {
    buttonTitle: string;
    quickInsertTitle: string;
    link: string;
    edit: string;
    delete: string;
    placeholder: string;
    save: string;
    editText: string;
    editHref: string;
    openLinkTip?: string;
    unlink: string;
    copy: string;
    styleLink: string;
    styleText: string;
    styleCard: string;
    error: string;
    errorDesc: string;
    refresh: string;
    addLinkPlaceholder: string;
    editTextPlaceholder: string;
    editHrefPlaceholder: string;
    editStyle: string;
    editStyleCard: string;
    openLinkMenu: string;
}
/**
 * url 转卡片的信息
 */
export declare type CardInfo = Pick<ILinkCardInfo, 'title' | 'desc' | 'imgURL'>;
export declare type LinkCardMetaData = {
    text: string;
    href: string;
    cardInfo: ILinkCardInfo;
};
export declare type LinkCardInjectionData = {
    isLoading?: boolean;
};
export declare type BlockLinkCard = Block<CardData<LinkCardMetaData> & LinkCardInjectionData>;
export interface LinkPluginConfig {
    /**
     * 插入链接的快捷键
     */
    hotkey?: string;
    /**
     * 链接支持的 protocal 列表
     */
    protocolAllowList?: string[];
    /**
     * 复制链接
     */
    onCopyLink?: (href: string) => void;
    /**
     * 打开链接
     */
    openLink?: (href: string) => void;
    /**
     * 获取链接转卡片的信息
     */
    getLinkInfo?: (href: string) => Promise<CardInfo>;
    /**
     * 国际化文案
     */
    locale: LinkLocale;
    /**
     * 启用链接卡片 todo 全量后下线配置
     */
    enableCard?: boolean;
    /**
     * 禁用文本中的链接识别
     */
    disableTextRecognize?: boolean;
    /**
     * 允许链接卡片转为 block
     */
    enableLinkCardBlock?: boolean;
    /**
     * LazyLoad async loader
     */
    lazyload?: any;
    /**
     * 是否挂载到body上
     */
    mountRoot?: boolean;
}
export declare type RangeType = RangeSelection | Decoration;
export interface UpdateLinkPayload {
    node: Inline;
    text: string;
    href: string;
    cardInfo?: ILinkCardInfo;
}
export interface RemoveLinkPayload {
    node: Inline;
}
export interface UnwrapLinkCardPayload {
    node: Inline;
}
export interface UpdatePureLinkPayload {
    node: Node;
    offset: number;
    text: string;
    href: string;
    srcHref: string;
    cardInfo?: ILinkCardInfo;
    needFetchLinkInfo?: boolean;
}
export interface ConvertPureLinkToBlockLinkCardPayload {
    node: Text;
    offset: number;
    text: string;
    href: string;
    srcHref: string;
    cardInfo: ILinkCardInfo;
    needFetchLinkInfo?: boolean;
}
export interface RemovePureLinkPayload {
    node: Text;
    offset: number;
    href: string;
}
export interface CutPureLinkPayload {
    node: Text;
    offset: number;
    href: string;
}
export interface UnwrapPureLinkPayload {
    node: Text;
    offset: number;
    href: string;
}
export interface SwitchDisplayTypePayload {
    node: LinkNode;
    displayType: LinkDisplayType;
}
export interface InjectCardInfoPayload {
    node: Inline | Text;
    cardInfo: ILinkCardInfo;
    range?: IRange;
}
export interface RemoveInjectedCardInfoPayload {
    node: Inline | Text;
}
export interface CopyLinkPayload {
    node: LinkNode;
}
export interface CutLinkPayload {
    node: LinkNode;
}
export interface CopyOrCutBlockLinkCardPayload {
    node: BlockLinkCard;
}
export interface UpdateBlockLinkCardDataPayload {
    node: BlockLinkCard;
    text: string;
    href: string;
    cardInfo?: ILinkCardInfo;
}
export interface SaveLinkCardPayload {
    node: Node;
    text: string;
    href: string;
}
export interface ConvertTextLinkToBlockLinkCardPayload {
    node: LinkNode;
    text: string;
    href: string;
    cardInfo?: ILinkCardInfo;
}
export interface InsertBlockLinkCardPayload {
    text: string;
    href: string;
    cardInfo?: ILinkCardInfo;
}
export interface ConvertBlockLinkCardToTextLinkPayload {
    node: BlockLinkCard;
    data?: {
        text: string;
        href: string;
    };
}
export interface UnlinkBlockLinkCardPayload {
    node: BlockLinkCard;
}
export interface ShowLinkPastePanelPayload {
    text: string;
    getLinkInfo?: (href: string) => Promise<CardInfo>;
}
export interface OpenLinkPayload {
    href: string;
}
export {};
