"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createCustomizedBiPlugins;

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginException = require("@ali/4ever-plugin-exception");

var _everUtils = require("@ali/4ever-utils");

var _autoClose = _interopRequireDefault(require("./plugins/autoClose"));

var _everFactory = require("@ali/4ever-factory");

var _everPluginBasic = require("@ali/4ever-plugin-basic");

var _clipboard = _interopRequireDefault(require("./plugins/clipboard"));

var _history = _interopRequireDefault(require("./plugins/history"));

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

var _everPluginContainer = require("@ali/4ever-plugin-container");

var _everPluginSnippets = require("@ali/4ever-plugin-snippets");

var _quickInsert = _interopRequireDefault(require("./plugins/quickInsert"));

/**
 * @packageDocumentation
 * @module Editor(Bi)
 */

/**
 * 创建自定义插件。传入自定义的插件 Map，返回一个插件创建函数（createBiPlugins）。
 * 传入内容格式：{ PluginName: PluginFactory }
 */
function createCustomizedBiPlugins(plugins) {
  const paragraphPlugin = plugins.paragraph || _everPluginParagraph.biFactory;
  const {
    unknownCard = _everFactory.createUnknownCardPlugin,
    unknownTag = _everFactory.createUnknownTagPlugin,
    ...rest
  } = plugins;
  const allPlugins = {
    exception: _everPluginException.biFactory,
    // 必须在 callout、code 等配置了 snippet 的插件之前
    snippets: _everPluginSnippets.biFactory,
    ...rest,
    // unknown 卡片/标签必须放在最后做兜底显示
    container: _everPluginContainer.biFactory,
    unknownCard,
    unknownTag,
    autoClose: _autoClose.default,
    clipboard: _clipboard.default,
    // 默认需要 clipboard 插件
    history: _history.default,
    paragraph: paragraphPlugin,
    quickInsert: _quickInsert.default,
    basic: _everPluginBasic.biFactory // 必须放在最后，以便其他插件覆盖行为

  };
  return function createBiPlugins(configs = {}) {
    const array = [];
    const hash = {}; // @ts-ignore

    (0, _everUtils.sortPlugins)(allPlugins).forEach(({
      key,
      factory
    }) => {
      const plugin = factory(configs, hash); // TODO 在 provider 中遍历通过 models 识别节点，unknown 节点报 warning
      // warning(
      //   checkModels(plugin),
      //
      //   'You should configure models field when register a plugin',
      // );

      array.push(plugin);
      hash[key] = plugin;
    });
    const schema = (0, _everCangjie.createSchema)(array);
    array.push({
      schema
    });
    return {
      array,
      hash,
      lang: configs.lang || 'zh-CN'
    };
  };
}
//# sourceMappingURL=createCustomizedBiPlugins.js.map