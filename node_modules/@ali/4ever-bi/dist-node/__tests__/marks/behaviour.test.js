"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _createCustomizedBiPlugins = _interopRequireDefault(require("../../createCustomizedBiPlugins"));

var _bold = _interopRequireDefault(require("../../plugins/bold"));

var _italic = _interopRequireDefault(require("../../plugins/italic"));

var _color = _interopRequireDefault(require("../../plugins/color"));

var _strike = _interopRequireDefault(require("../../plugins/strike"));

var _vertAlign = _interopRequireDefault(require("../../plugins/vertAlign"));

var _everPluginTable = require("@ali/4ever-plugin-table");

var _everPluginMarks = require("@ali/4ever-plugin-marks");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const testMark = (0, _everPluginMarks.createMarkFactory)({
  type: 'test',
  hotKey: 'mod+b',
  triggerText: '**',
  Button: (0, _everDevTest.jsx)("i", null)
});
const createBiPlugins = (0, _createCustomizedBiPlugins.default)({
  marks: _everPluginMarks.biFactory,
  test: testMark,
  bold: _bold.default,
  italic: _italic.default,
  strike: _strike.default,
  color: _color.default,
  table: _everPluginTable.biFactory
});
const plugins = createBiPlugins().array;

const toggleMark = (c, m) => c.command('toggleRangesMark', m);

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Hello", (0, _everDevTest.jsx)("focus", null))));

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
})), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, "B")));

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, (0, _everDevTest.jsx)("m", {
  type: "test"
}))), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, (0, _everDevTest.jsx)("m", {
  type: "test"
}, "B"))));

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "A"))), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, "B")));

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "c"
}, (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "C"))), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "d"
}, "D")));

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "A"))), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "B"))));

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "c"
}, "C")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "d"
}, "D")));

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "A"))), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, "B")));

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "c"
})), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "d"
}, "D")));

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "heading-1",
  key: "a"
}, "A")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "B"))));

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "c"
}, "C")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "d"
}, "D")));

var _ref12 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, (0, _everDevTest.jsx)("m", {
  type: "italic"
}, "Hello "), (0, _everDevTest.jsx)("cursor", null))));

var _ref13 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, (0, _everDevTest.jsx)("m", {
  type: "bold"
}, (0, _everDevTest.jsx)("m", {
  type: "italic"
}, "Hello ")), (0, _everDevTest.jsx)("cursor", null))));

var _ref14 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, (0, _everDevTest.jsx)("anchor", null), "Hello", (0, _everDevTest.jsx)("focus", null))));

var _ref15 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "Hello", (0, _everDevTest.jsx)("cursor", null))));

var _ref16 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, (0, _everDevTest.jsx)("cursor", null))));

describe('Bi/marks/behaviour', () => {
  test('调用正确次数的 toggleRangesMark 并添加指定 type mark', async () => {
    const value = _ref;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', _bold.default.actions.toggleMark('test'));
    const {
      document,
      selection
    } = controller.value;
    expect(document.getMarksAtRange(selection).some(m => m.type === 'test')).toBe(true);
  });
  test('表格添加样式支持空 cell', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref2)));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref3)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const tableSelection = {
      key: 'table-key',
      startRowIndex: 0,
      startColIndex: 0,
      endRowIndex: 0,
      endColIndex: 1
    };
    const table = controller.value.document.getNode('table-key'); // @ts-ignore

    controller.command('selectTableSelection', table, tableSelection);
    controller.run('onAction', _bold.default.actions.toggleMark('test'));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('纵向表格选区可获取正确的公共 bold 属性', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref4, _ref5)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const tableSelection = {
      key: 'table-key',
      startRowIndex: 0,
      startColIndex: 0,
      endRowIndex: 1,
      endColIndex: 0
    };
    const table = controller.value.document.getNode('table-key'); // @ts-ignore

    controller.command('selectTableSelection', table, tableSelection);
    expect(controller.query('isBold')).toBe(true);
  });
  test('横向表格选区可获取正确的公共 bold 属性', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref6, _ref7)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const tableSelection = {
      key: 'table-key',
      startRowIndex: 0,
      startColIndex: 0,
      endRowIndex: 0,
      endColIndex: 1
    };
    const table = controller.value.document.getNode('table-key'); // @ts-ignore

    controller.command('selectTableSelection', table, tableSelection);
    expect(controller.query('isBold')).toBe(true);
  });
  test('纵向表格选区（空单元格和带样式文本）可获取正确的公共 bold 属性', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref8, _ref9)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const tableSelection = {
      key: 'table-key',
      startRowIndex: 0,
      startColIndex: 0,
      endRowIndex: 1,
      endColIndex: 0
    };
    const table = controller.value.document.getNode('table-key'); // @ts-ignore

    controller.command('selectTableSelection', table, tableSelection);
    expect(controller.query('isBold')).toBe(false);
  });
  test('横向表格选区（含标题单元格和带样式文本）可获取正确的公共 bold 属性', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref10, _ref11)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const tableSelection = {
      key: 'table-key',
      startRowIndex: 0,
      startColIndex: 0,
      endRowIndex: 0,
      endColIndex: 1
    };
    const table = controller.value.document.getNode('table-key'); // @ts-ignore

    controller.command('selectTableSelection', table, tableSelection);
    expect(controller.query('isBold')).toBe(true);
  });
  test('带样式文本继续设置样式可合并', () => {
    const value = _ref12;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', _bold.default.actions.toggleMark('bold'));
    controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
      type: 'insertText',
      data: 'world'
    }));
    const marks = controller.value.document.getNode('a').getLastText().getMarks();
    expect(marks).toEqual([{
      type: 'italic',
      data: {}
    }, {
      type: 'bold',
      data: {}
    }]);
  });
  test('带样式文本清除样式可合并', () => {
    const value = _ref13;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', _bold.default.actions.toggleMark('bold'));
    controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
      type: 'insertText',
      data: 'world'
    }));
    const {
      marks
    } = controller.value.document.getNode('a').getLastText().leaves[1];
    expect(marks).toEqual([{
      type: 'italic',
      data: {}
    }]);
  });
  test('清除样式+添加样式后不影响高优先级的临时选区', () => {
    const value = _ref14;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', _bold.default.actions.toggleMark('bold'));
    controller.run('onAction', _strike.default.actions.toggleMark('strike'));
    controller.run('onAction', _vertAlign.default.actions.toggleSub());
    expect(controller.value.selection.marks).toEqual(null);
  });
  test('临时选区连续设置同类型样式仅保留一个', () => {
    const value = _ref15;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', _color.default.actions.setColor('red'));
    controller.run('onAction', _color.default.actions.setColor('blue'));
    const {
      marks
    } = controller.value.selection;
    expect(marks).toEqual([{
      type: 'color',
      data: {
        value: 'blue'
      }
    }]);
  });
  test('空段落连续设置同类型样式仅保留一个', () => {
    const value = _ref16;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', _color.default.actions.setColor('red'));
    controller.run('onAction', _color.default.actions.setColor('blue'));
    controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
      type: 'insertText',
      data: 'world'
    }));
    const marks = controller.value.document.getNode('a').getFirstText().getMarks();
    expect(marks).toEqual([{
      type: 'color',
      data: {
        value: 'blue'
      }
    }]);
  });
});
//# sourceMappingURL=behaviour.test.js.map