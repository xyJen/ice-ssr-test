"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

require("@testing-library/jest-dom/extend-expect");

var _react2 = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _ = require("../..");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _bold = _interopRequireDefault(require("../../plugins/bold"));

var _marks = _interopRequireDefault(require("../../plugins/marks"));

var _italic = _interopRequireDefault(require("../../plugins/italic"));

var _strike = _interopRequireDefault(require("../../plugins/strike"));

var _vertAlign = _interopRequireDefault(require("../../plugins/vertAlign"));

var _underline = _interopRequireDefault(require("../../plugins/underline"));

var _inlineCode = _interopRequireDefault(require("../../plugins/inlineCode"));

var _everBamboo = require("@ali/4ever-bamboo");

/** @jsx jsx */
const {
  createMarksPlugin
} = _everBamboo.MarksPlugin;
const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  bold: _bold.default,
  marks: _marks.default,
  mark: createMarksPlugin,
  italic: _italic.default,
  strike: _strike.default,
  vertAlign: _vertAlign.default,
  underline: _underline.default,
  inlineCode: _inlineCode.default
});

var _ref = (0, _everDevTest.jsx)("anchor", null);

var _ref2 = (0, _everDevTest.jsx)("focus", null);

var _ref3 = (0, _everDevTest.jsx)(_content.default, null);

const Editor = props => {
  const defaultValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, _ref, props.text || 'Hello', _ref2)));
  const [value, setValue] = React.useState(props.defaultValue || defaultValue);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  const plugins = createBiPlugins();
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    plugins: plugins,
    onChange: handleChange
  }, (0, _everDevTest.jsx)(_.NewToolbar, {
    autoFolding: false,
    singleLayout: [{
      toolButtons: [{
        name: 'underline'
      }, {
        name: 'bold'
      }, {
        name: 'strike'
      }, {
        name: 'italic'
      }, {
        name: 'vertAlign.supMark'
      }, {
        name: 'vertAlign.subMark'
      }]
    }]
  }), _ref3);
};

var _ref4 = (0, _everDevTest.jsx)(Editor, null);

var _ref5 = (0, _everDevTest.jsx)(Editor, null);

[{
  name: 'bold',
  hotKey: 'ctrl+b',
  rules: [{
    triggerText: '**',
    intraword: true,
    insideWhitespace: false
  }, {
    triggerText: '__',
    intraword: false,
    insideWhitespace: false
  }],
  style: ['fontWeight', 'bold']
}, {
  name: 'italic',
  hotKey: 'ctrl+i',
  rules: [{
    triggerText: '*',
    intraword: true,
    insideWhitespace: false
  }, {
    triggerText: '_',
    intraword: false,
    insideWhitespace: false
  }],
  style: ['fontStyle', 'italic']
}, {
  name: 'strike',
  hotKey: 'shift+ctrl+x',
  rules: [{
    triggerText: '~~',
    intraword: true,
    insideWhitespace: false
  }],
  style: ['textDecorationLine', 'line-through']
}, {
  name: 'sub',
  hotKey: 'ctrl+,',
  rules: [{
    triggerText: '~',
    intraword: true,
    insideWhitespace: false
  }],
  style: ['verticalAlign', 'sub']
}, {
  name: 'super',
  hotKey: 'ctrl+.',
  rules: [{
    triggerText: '^',
    intraword: true,
    insideWhitespace: false
  }],
  style: ['verticalAlign', 'super']
}, {
  name: 'underline',
  hotKey: 'ctrl+u',
  rules: [{
    triggerText: '++',
    intraword: true,
    insideWhitespace: false
  }],
  style: ['textDecorationLine', 'underline']
}, {
  name: 'inlineCode',
  hotKey: 'ctrl+e',
  rules: [{
    triggerText: '`',
    intraword: true,
    insideWhitespace: true
  }],
  style: ['backgroundColor', 'rgb(247, 247, 247)'],
  tagName: 'CODE',
  skipButtonTest: true
}].forEach(({
  name,
  hotKey,
  rules,
  style,
  tagName,
  skipButtonTest
}) => {
  describe(`Bi/${name}/ui`, () => {
    if (hotKey) {
      test('使用快捷键切换选择区域的样式', async () => {
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)(_ref4);

        _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(hotKey));

        let mark1 = await (0, _react2.waitForElement)(() => content?.querySelector('[data-cangjie-mark]'));
        expect(mark1?.textContent).toBe('Hello');
        expectStyle(mark1, style); // 撤销

        _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(hotKey));

        mark1 = await (0, _react2.waitForElementToBeRemoved)(() => content?.querySelector('[data-cangjie-mark]'));
        expect(queryMark(editor)).toBe(null);
      });
    }

    if (!skipButtonTest) {
      test(`点击按钮切换选择区域的样式 ${name}`, async () => {
        const {
          editor,
          container
        } = await (0, _everDevTest.renderEditor)(_ref5);
        let toolbarName = `[data-testid="bi-toolbar-${name}"]`;

        if (name === 'sub') {
          // 先点击下拉再选择下标
          toolbarName = '[data-testid="bi-toolbar-sub"]';
        } else if (name === 'super') {
          // 直接点击可选择上标
          toolbarName = '[data-testid="bi-toolbar-sup"]';
        }

        let toolBtn = document.querySelector(toolbarName);

        _everDevTest.fireEvent.click(toolBtn);

        const markEle = await (0, _react2.waitForElement)(() => container?.querySelector('[data-cangjie-mark]'));
        expect(markEle?.textContent).toBe('Hello');
        expectStyle(markEle, style);

        if (name === 'sub') {
          // 再次点击取消下标
          toolbarName = '[data-testid="bi-toolbar-sub"]';
        }

        toolBtn = document.querySelector(toolbarName); // 撤销

        _everDevTest.fireEvent.click(toolBtn);

        await (0, _everDevTest.waitForTime)(100);
        expect(queryMark(editor)).toBe(null);
      });
    }

    if (rules) {
      rules.forEach(({
        triggerText,
        insideWhitespace,
        intraword
      }) => {
        test('在段首时，Markdown 快捷输入样式', async () => {
          await testTriggerText(`${triggerText}Hello${triggerText}`, style, false, tagName);
        });
        test('在段中时，前面为空格，Markdown 快捷输入样式', async () => {
          await testTriggerText(`Markdown ${triggerText}Hello${triggerText}`, style, true, tagName);
        });
        test('在段中时，前面为标点符号，Markdown 快捷输入样式', async () => {
          await testTriggerText(`Markdown,${triggerText}Hello${triggerText}`, style, false, tagName);
        });

        if (intraword) {
          test('intraword 时，Markdown 快捷输入样式', async () => {
            await testTriggerText(`Markdown${triggerText}Hello${triggerText}`, style, false, tagName);
          });
        }

        if (insideWhitespace) {
          test('允许内侧空白符时，Markdown 快捷输入样式', async () => {
            await testTriggerText(`Markdown ${triggerText} Hello${triggerText}`, style, true, tagName);
          });
        }
      });
    }

    if (name === 'sub') {
      test('设置 sub 样式可以覆盖已有的 super 样式', async () => {
        await testOverrideMarks('super', name, ['verticalAlign', 'super'], style);
      });
    }

    if (name === 'super') {
      test('设置 super 样式可以覆盖已有的 sub 样式', async () => {
        await testOverrideMarks('sub', name, ['verticalAlign', 'sub'], style);
      });
    }
  });
});

function queryMark(container) {
  return container.querySelector('[data-cangjie-mark]');
}

function expectStyle(node, style) {
  expect(node.style[style[0]]).toEqual(style[1]);
}

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

async function testTriggerText(text, style, trailingSpace, tagName) {
  const defaultValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, text, _ref6)));
  const {
    content,
    editor
  } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
    defaultValue: defaultValue
  }));
  expect(queryMark(editor)).toBe(null);

  _everDevTest.fireEvent.cangjieInput(editor, {
    data: ' '
  });

  const markTrigger = await (0, _react2.waitForElement)(() => content?.querySelector('[data-cangjie-mark]'));
  expect(markTrigger?.textContent.trim()).toBe('Hello');
  expectStyle(markTrigger, style);

  if (trailingSpace) {
    expect(markTrigger.nextElementSibling.innerHTML).toBe(' ');
  }

  if (tagName) {
    expect(markTrigger.tagName).toBe(tagName);
  }
}

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Hello", (0, _everDevTest.jsx)("focus", null))));

async function testOverrideMarks(srcMark, targetMark, srcStyle, targetStyle) {
  const defaultValue = _ref7;
  const {
    content
  } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
    defaultValue: defaultValue
  }));
  let toolbarName;

  if (srcMark === 'sub') {
    toolbarName = '[data-testid="bi-toolbar-sub"]';
  } else if (srcMark === 'super') {
    toolbarName = '[data-testid="bi-toolbar-sup"]';
  }

  let toolBtn = document.querySelector(toolbarName); // 先变成 srcMark 样式

  _everDevTest.fireEvent.click(toolBtn);

  let markOverride = await (0, _react2.waitForElement)(() => content?.querySelector('[data-cangjie-mark]'));
  expect(markOverride?.textContent).toBe('Hello');
  expectStyle(markOverride, srcStyle);

  if (targetMark === 'sub') {
    toolbarName = '[data-testid="bi-toolbar-sub"]';
  } else if (targetMark === 'super') {
    toolbarName = '[data-testid="bi-toolbar-sup"]';
  }

  toolBtn = document.querySelector(toolbarName);

  _everDevTest.fireEvent.click(toolBtn);

  markOverride = await (0, _react2.waitForElement)(() => content?.querySelector('[data-cangjie-mark]'));
  expect(markOverride?.textContent).toBe('Hello');
  expectStyle(markOverride, targetStyle);
}
//# sourceMappingURL=ui.legacyToolbar.test.js.map