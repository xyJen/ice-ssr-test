{"version":3,"sources":["../../../../src/__tests__/marks/behaviour.test.tsx"],"names":["testMark","type","hotKey","triggerText","Button","createBiPlugins","marks","biFactory","test","bold","boldPlugin","italic","italicPlugin","strike","strikePlugin","color","colorPlugin","table","tablePlugin","plugins","array","toggleMark","c","m","command","describe","value","controller","Controller","create","run","actions","document","selection","expect","getMarksAtRange","some","toBe","colsWidth","output","tableSelection","key","startRowIndex","startColIndex","endRowIndex","endColIndex","getNode","actual","toJSON","expected","setValue","toEqual","query","data","getLastText","getMarks","leaves","vertAlignPlugin","toggleSub","setColor","getFirstText"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport { Controller, Value, CangjieInputEvent } from '@ali/4ever-cangjie';\nimport { jsx } from '@ali/4ever-dev-test';\nimport createCustomizedBiPlugins from '../../createCustomizedBiPlugins';\nimport boldPlugin from '../../plugins/bold';\nimport italicPlugin from '../../plugins/italic';\nimport colorPlugin from '../../plugins/color';\nimport strikePlugin from '../../plugins/strike';\nimport vertAlignPlugin from '../../plugins/vertAlign';\nimport { biFactory as tablePlugin } from '@ali/4ever-plugin-table';\nimport { createMarkFactory, biFactory } from '@ali/4ever-plugin-marks';\n\n\nconst testMark = createMarkFactory({\n  type: 'test',\n  hotKey: 'mod+b',\n  triggerText: '**',\n  Button: <i />,\n});\n\nconst createBiPlugins = createCustomizedBiPlugins({\n  marks: biFactory,\n  test: testMark,\n  bold: boldPlugin,\n  italic: italicPlugin,\n  strike: strikePlugin,\n  color: colorPlugin,\n  table: tablePlugin,\n});\n\nconst plugins = createBiPlugins().array;\nconst toggleMark = (c: Controller, m) => c.command('toggleRangesMark', m);\n\ndescribe('Bi/marks/behaviour', () => {\n  test('调用正确次数的 toggleRangesMark 并添加指定 type mark', async () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <anchor />Hello<focus />\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    controller.run('onAction', boldPlugin.actions.toggleMark('test'));\n\n    const { document, selection } = controller.value;\n    expect(document.getMarksAtRange(selection).some((m) => m.type === 'test')).toBe(true);\n  });\n\n  test('表格添加样式支持空 cell', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"table\" key=\"table-key\" data={{ colsWidth: [100, 100] }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"a\" />\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"b\">\n                  B\n                </block>\n              </block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const output = ((\n      <value>\n        <document>\n          <block type=\"table\" key=\"table-key\" data={{ colsWidth: [100, 100] }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"a\">\n                  <m type=\"test\" />\n                </block>\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"b\">\n                  <m type=\"test\">B</m>\n                </block>\n              </block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n\n    const tableSelection = {\n      key: 'table-key',\n      startRowIndex: 0,\n      startColIndex: 0,\n      endRowIndex: 0,\n      endColIndex: 1,\n    };\n\n    const table = controller.value.document.getNode('table-key');\n    // @ts-ignore\n    controller.command('selectTableSelection', table, tableSelection);\n\n    controller.run('onAction', boldPlugin.actions.toggleMark('test'));\n\n    const actual = controller.value.toJSON();\n    const expected = controller\n      .setValue(output)\n      .value.toJSON();\n    expect(actual).toEqual(expected);\n  });\n\n  test('纵向表格选区可获取正确的公共 bold 属性', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"table\" key=\"table-key\" data={{ colsWidth: [100, 100] }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"a\"><m type=\"bold\">A</m></block>\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"b\">B</block>\n              </block>\n            </block>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"c\"><m type=\"bold\">C</m></block>\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"d\">D</block>\n              </block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n\n    const tableSelection = {\n      key: 'table-key',\n      startRowIndex: 0,\n      startColIndex: 0,\n      endRowIndex: 1,\n      endColIndex: 0,\n    };\n\n    const table = controller.value.document.getNode('table-key');\n    // @ts-ignore\n    controller.command('selectTableSelection', table, tableSelection);\n    expect(controller.query('isBold')).toBe(true);\n  });\n\n  test('横向表格选区可获取正确的公共 bold 属性', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"table\" key=\"table-key\" data={{ colsWidth: [100, 100] }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"a\"><m type=\"bold\">A</m></block>\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"b\"><m type=\"bold\">B</m></block>\n              </block>\n            </block>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"c\">C</block>\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"d\">D</block>\n              </block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n\n    const tableSelection = {\n      key: 'table-key',\n      startRowIndex: 0,\n      startColIndex: 0,\n      endRowIndex: 0,\n      endColIndex: 1,\n    };\n\n    const table = controller.value.document.getNode('table-key');\n    // @ts-ignore\n    controller.command('selectTableSelection', table, tableSelection);\n    expect(controller.query('isBold')).toBe(true);\n  });\n\n  test('纵向表格选区（空单元格和带样式文本）可获取正确的公共 bold 属性', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"table\" key=\"table-key\" data={{ colsWidth: [100, 100] }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"a\"><m type=\"bold\">A</m></block>\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"b\">B</block>\n              </block>\n            </block>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"c\" />\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"d\">D</block>\n              </block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n\n    const tableSelection = {\n      key: 'table-key',\n      startRowIndex: 0,\n      startColIndex: 0,\n      endRowIndex: 1,\n      endColIndex: 0,\n    };\n\n    const table = controller.value.document.getNode('table-key');\n    // @ts-ignore\n    controller.command('selectTableSelection', table, tableSelection);\n    expect(controller.query('isBold')).toBe(false);\n  });\n\n  test('横向表格选区（含标题单元格和带样式文本）可获取正确的公共 bold 属性', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"table\" key=\"table-key\" data={{ colsWidth: [100, 100] }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"heading-1\" key=\"a\">A</block>\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"b\"><m type=\"bold\">B</m></block>\n              </block>\n            </block>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"c\">C</block>\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" key=\"d\">D</block>\n              </block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n\n    const tableSelection = {\n      key: 'table-key',\n      startRowIndex: 0,\n      startColIndex: 0,\n      endRowIndex: 0,\n      endColIndex: 1,\n    };\n\n    const table = controller.value.document.getNode('table-key');\n    // @ts-ignore\n    controller.command('selectTableSelection', table, tableSelection);\n    expect(controller.query('isBold')).toBe(true);\n  });\n\n  test('带样式文本继续设置样式可合并', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\" key=\"a\">\n            <m type=\"italic\">Hello </m><cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n\n    controller.run('onAction', boldPlugin.actions.toggleMark('bold'));\n    controller.run('onCangjieInput', CangjieInputEvent({\n      type: 'insertText',\n      data: 'world',\n    }));\n\n    const marks = controller.value.document.getNode('a').getLastText().getMarks();\n    expect(marks).toEqual([{\n      type: 'italic',\n      data: {},\n    }, {\n      type: 'bold',\n      data: {},\n    }]);\n  });\n\n  test('带样式文本清除样式可合并', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\" key=\"a\">\n            <m type=\"bold\"><m type=\"italic\">Hello </m></m><cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    controller.run('onAction', boldPlugin.actions.toggleMark('bold'));\n    controller.run('onCangjieInput', CangjieInputEvent({\n      type: 'insertText',\n      data: 'world',\n    }));\n    const { marks } = controller.value.document.getNode('a').getLastText().leaves[1];\n    expect(marks).toEqual([{\n      type: 'italic',\n      data: {},\n    }]);\n  });\n\n  test('清除样式+添加样式后不影响高优先级的临时选区', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\" key=\"a\">\n            <anchor />Hello<focus />\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    controller.run('onAction', boldPlugin.actions.toggleMark('bold'));\n    controller.run('onAction', strikePlugin.actions.toggleMark('strike'));\n    controller.run('onAction', vertAlignPlugin.actions.toggleSub());\n    expect(controller.value.selection.marks).toEqual(null);\n  });\n\n  test('临时选区连续设置同类型样式仅保留一个', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\" key=\"a\">\n            Hello<cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n\n    controller.run('onAction', colorPlugin.actions.setColor('red'));\n    controller.run('onAction', colorPlugin.actions.setColor('blue'));\n\n    const { marks } = controller.value.selection;\n    expect(marks).toEqual([{\n      type: 'color',\n      data: {\n        value: 'blue',\n      },\n    }]);\n  });\n\n  test('空段落连续设置同类型样式仅保留一个', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\" key=\"a\"><cursor /></block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n\n    controller.run('onAction', colorPlugin.actions.setColor('red'));\n    controller.run('onAction', colorPlugin.actions.setColor('blue'));\n    controller.run('onCangjieInput', CangjieInputEvent({\n      type: 'insertText',\n      data: 'world',\n    }));\n\n    const marks = controller.value.document.getNode('a').getFirstText().getMarks();\n    expect(marks).toEqual([{\n      type: 'color',\n      data: {\n        value: 'blue',\n      },\n    }]);\n  });\n});\n"],"file":"behaviour.test.js"}