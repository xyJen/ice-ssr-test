"use strict";

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _everPluginList = require("@ali/4ever-plugin-list");

var _editor = require("../editor");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const {
  getListData
} = _everPluginList.OldUtils;

var _ref = (0, _everDevTest.jsx)("cursor", null);

function createValue(text) {
  return (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, _ref, text)));
}

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

function createListValue(text) {
  return (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: getListData({
      level: 0,
      type: 'ol',
      listStyleType: 'DEC_LEN_LROM_P',
      listId: 'dn7ncrq6m7j'
    })
  }, _ref2, text)));
}

const PARAM_HOT_KEY = '0+ctrl+alt';

var _ref5 = (0, _everDevTest.jsx)("cursor", null);

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/heading/ui', () => {
  [{
    type: '一级标题',
    triggerText: '#',
    selector: 'h1',
    headType: 'heading-1',
    hotKey: '1+ctrl+alt'
  }, {
    type: '二级标题',
    triggerText: '##',
    selector: 'h2',
    headType: 'heading-2',
    hotKey: '2+ctrl+alt'
  }, {
    type: '三级标题',
    triggerText: '###',
    selector: 'h3',
    headType: 'heading-3',
    hotKey: '3+ctrl+alt'
  }, {
    type: '四级标题',
    triggerText: '####',
    selector: 'h4',
    headType: 'heading-4',
    hotKey: '4+ctrl+alt'
  }].forEach(({
    type,
    headType,
    triggerText,
    selector,
    hotKey
  }) => {
    var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "*", triggerText, _ref6)));

    var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, triggerText, _ref5)));

    describe(type, () => {
      it(`点击按钮把当前行设为${type}`, async () => {
        const {
          container,
          queryByTestId
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: createValue('Hello')
        })); // 避免选中离屏渲染的 toolbar

        const offScreenToolbarItem = container.querySelector('[class*="OffScreen"] [data-testid="SelectWrap-bi-toolbar-heading"]');

        if (offScreenToolbarItem) {
          await (0, _react.waitForElementToBeRemoved)(offScreenToolbarItem);
        }

        const trigger = await (0, _react.waitFor)(() => queryByTestId('SelectWrap-bi-toolbar-heading'));

        _everDevTest.fireEvent.click(trigger);

        const btn = await (0, _react.waitFor)(() => queryByTestId(`option-${headType}`));

        _everDevTest.fireEvent.click(btn); // flush


        await (0, _react.wait)();
        const node = container.querySelector(selector);
        expect(node.textContent).toBe('Hello');
        const listItem = queryByTestId('list');
        expect(listItem).toBe(null);
      });
      it(`点击按钮把当前列表行设为${type}`, async () => {
        const {
          container,
          queryByTestId
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: createListValue('Hello')
        })); // 避免选中离屏渲染的 toolbar

        const offScreenToolbarItem = container.querySelector('[class*="OffScreen"] [data-testid="SelectWrap-bi-toolbar-heading"]');

        if (offScreenToolbarItem) {
          await (0, _react.waitForElementToBeRemoved)(offScreenToolbarItem);
        }

        const trigger = await (0, _react.waitFor)(() => queryByTestId('SelectWrap-bi-toolbar-heading'));

        _everDevTest.fireEvent.click(trigger);

        const btn = await (0, _react.waitFor)(() => queryByTestId(`option-${headType}`));

        _everDevTest.fireEvent.click(btn); // flush


        await (0, _react.wait)();
        const node = container.querySelector(selector);
        expect(node.textContent).toBe('Hello');
        const listItem = queryByTestId('list');
        expect(listItem.textContent).toBe('1.Hello');
      });
      it(`点击按钮把当前${type}设为普通段落`, async () => {
        const {
          container,
          queryByTestId
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: createValue('Hello')
        })); // 避免选中离屏渲染的 toolbar

        const offScreenToolbarItem = container.querySelector('[class*="OffScreen"] [data-testid="SelectWrap-bi-toolbar-heading"]');

        if (offScreenToolbarItem) {
          await (0, _react.waitForElementToBeRemoved)(offScreenToolbarItem);
        }

        let trigger = await (0, _react.waitFor)(() => queryByTestId('SelectWrap-bi-toolbar-heading'));

        _everDevTest.fireEvent.click(trigger);

        const btn = await (0, _react.waitFor)(() => queryByTestId(`option-${headType}`));

        _everDevTest.fireEvent.click(btn); // flush


        await (0, _react.wait)();
        trigger = container.querySelector('[data-testid="SelectWrap-bi-toolbar-heading"]'); // 再次唤起工具栏

        _everDevTest.fireEvent.click(trigger);

        const paragraphBtn = await (0, _react.waitFor)(() => queryByTestId('option-paragraph'));

        _everDevTest.fireEvent.click(paragraphBtn); // flush


        await (0, _react.wait)();
        const para = container.querySelector('[data-type="paragraph"]');
        const headings = container.querySelectorAll(selector); // 确认正文 margin 即段后距, 被reset，before和after支持margin-top=0px

        expect(para.style.marginBottom).toBe('');
        expect(para.textContent).toBe('Hello');
        expect(headings.length).toBe(0);
      });
      it(`在 ${triggerText} 后输入空格，把 ${triggerText} 替换为 ${type}`, async () => {
        const value = _ref3;
        const {
          editor,
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        }); // flush


        await (0, _react.wait)();
        expect(content.querySelectorAll(selector).length).toBe(1);
      });
      it(`在被嵌套的情况下，不把 ${triggerText} 替换为 ${type}`, async () => {
        const value = _ref4;
        const {
          editor,
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        }); // flush


        await (0, _react.wait)();
        expect(content.querySelector('div[data-type=paragraph] span[data-cangjie-leaf]')?.textContent).toBe(`*${triggerText} `);
        expect(content.querySelectorAll(selector).length).toBe(0);
      });
      it(`通过快捷键'${hotKey}'把正文文本设置为${type}, 并可以通过'0+Ctrl+alt'重置为正文`, async () => {
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: createValue('Hello')
        }));

        _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(hotKey));

        await (0, _react.wait)();
        expect(content.querySelectorAll(selector).length).toBe(1);

        _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(PARAM_HOT_KEY));

        await (0, _react.wait)();
        expect(content.querySelectorAll(selector).length).toBe(0);
      });
    });
  });
});
//# sourceMappingURL=ui.legacyToolbar.test.js.map