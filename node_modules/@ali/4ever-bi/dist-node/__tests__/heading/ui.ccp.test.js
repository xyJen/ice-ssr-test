"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _editor = _interopRequireDefault(require("../editor"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const {
  MIME_TYPES
} = _everCangjie.constants;
const marks = [{
  type: 'sz',
  data: {
    value: 20,
    szUnit: 'pt'
  }
}, {
  type: 'bold',
  data: {}
}];

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "get", (0, _everDevTest.jsx)("anchor", null), "Copyed", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, (0, _everDevTest.jsx)("text", {
  key: "textA",
  marks: marks
}, "pppp", (0, _everDevTest.jsx)("anchor", null), "Copyed", (0, _everDevTest.jsx)("focus", null))), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ppp")));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, (0, _everDevTest.jsx)("text", {
  key: "textA",
  marks: marks
}, "pppp", (0, _everDevTest.jsx)("anchor", null), "Copyed", (0, _everDevTest.jsx)("focus", null))), (0, _everDevTest.jsx)("block", {
  type: "heading-4"
}, "ppp")));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "textA",
  marks: marks
}, "pppp", (0, _everDevTest.jsx)("anchor", null), "Copyed", (0, _everDevTest.jsx)("focus", null))), (0, _everDevTest.jsx)("block", {
  type: "heading-4"
}, "ppp")));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, (0, _everDevTest.jsx)("anchor", null), "111"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Copyed", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ppp")));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, (0, _everDevTest.jsx)("anchor", null), "111"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Copyed", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "p")));

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "textA",
  marks: marks
}, (0, _everDevTest.jsx)("anchor", null), "111")), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Copyed", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "p")));

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "textA",
  marks: marks
}, (0, _everDevTest.jsx)("anchor", null), "111")), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Copyed", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("block", {
  type: "hr"
})));

var _ref9 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("anchor", null), (0, _everDevTest.jsx)("block", {
  type: "hr"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "textA",
  marks: marks
}, "Copyed", (0, _everDevTest.jsx)("focus", null))), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "111")));

var _ref10 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "textA",
  marks: marks
}, (0, _everDevTest.jsx)("anchor", null), "111")), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Copyed", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("block", {
  type: "hr"
})));

var _ref11 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("anchor", null), (0, _everDevTest.jsx)("block", {
  type: "hr"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Copyed"), (0, _everDevTest.jsx)("focus", null), (0, _everDevTest.jsx)("block", {
  type: "heading-1"
})));

var _ref12 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("anchor", null), (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "111"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Copyed"), (0, _everDevTest.jsx)("focus", null), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

var _ref13 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("anchor", null), (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "111"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Copyed"), (0, _everDevTest.jsx)("focus", null), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "2")));

describe('Bi/heading/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react.cleanup)();
  });
  test('复制部分标题到空段落依然是标题', async () => {
    const value = _ref;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => {
      expect(content.querySelectorAll('[data-type="heading-1"]')?.length).toBe(2);
    });
  });
  test('复制部分标题到段落中匹配段落格式', async () => {
    const value = _ref2;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => content.querySelector('[data-type="paragraph"]')?.textContent === 'pppCopyed');
    await (0, _react.waitFor)(() => {
      expect(content.querySelector('[data-type="paragraph"] [data-cangjie-mark="true"]')).toBe(null);
    });
  });
  test('复制部分标题到其它级别标题中匹配目标格式', async () => {
    const value = _ref3;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => content.querySelector('[data-type="heading-4"]')?.textContent === 'pppCopyed');
    await (0, _react.waitFor)(() => {
      expect(content.querySelector('[data-type="heading-4"] [data-cangjie-mark="true"]')).toBe(null);
    });
  });
  test('复制部分段落到标题中匹配目标格式', async () => {
    const value = _ref4;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => content.querySelector('[data-type="heading-4"]')?.textContent === 'pppCopyed');
    await (0, _react.waitFor)(() => {
      expect(content.querySelector('[data-type="heading-4"] [data-cangjie-mark="true"]')).toBe(null);
    });
  });
  test('粘贴多个段落（第一段为标题）到段落中先换行再粘贴', async () => {
    const value = _ref5;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => {
      expect(content.querySelectorAll('[data-type="heading-1"]')?.length).toBe(2);
    });
    const blocks = content.querySelectorAll('[data-cangjie-leaf-block="true"]');
    expect(blocks[2]?.textContent).toBe('ppp');
    expect(blocks[3]?.textContent).toBe('111');
    expect(blocks[4]?.textContent).toBe('Copyed');
  });
  test('粘贴多个段落（第一段为标题）到同级别中不换行', async () => {
    const value = _ref6;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => {
      expect(content.querySelectorAll('[data-type="paragraph"]')?.length).toBe(2);
    });
    const blocks = content.querySelectorAll('[data-cangjie-leaf-block="true"]');
    expect(blocks[2]?.textContent).toBe('p111');
    expect(blocks[3]?.textContent).toBe('Copyed');
  });
  test('粘贴多个段落（第一段为普通段落）到标题中不换行并匹配标题样式', async () => {
    const value = _ref7;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => {
      expect(content.querySelectorAll('[data-type="paragraph"]')?.length).toBe(3);
    });
    const blocks = content.querySelectorAll('[data-cangjie-leaf-block="true"]');
    expect(blocks[2]?.textContent).toBe('p111');
    expect(blocks[2]?.querySelector('[data-cangjie-mark="true"]')).toBe(null);
  });
  test('粘贴多个段落到分割线中，保留分割线并另起一行粘贴', async () => {
    const value = _ref8;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => {
      expect(content.querySelectorAll('[data-type="paragraph"]')?.length).toBe(4);
    });
    const blocks = content.querySelectorAll('[data-cangjie-leaf-block="true"]');
    expect(blocks[2]?.textContent).toBe('111');
    expect(content.getElementsByTagName('hr').length).toBe(1);
  });
  test('复制内容首个段落是void则另起一行粘贴', async () => {
    const value = _ref9;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => {
      expect(content.querySelectorAll('[data-type="hr"]')?.length).toBe(2);
    });
    const blocks = content.querySelectorAll('[data-cangjie-leaf-block="true"]');
    expect(blocks[1]?.textContent).toBe('111');
    expect(blocks[2]?.textContent).toBe('Copyed');
  });
  test('粘贴多个段落，选中分割线中粘贴，移除分割线', async () => {
    const value = _ref10;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('shift+arrowleft'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => {
      expect(content.querySelectorAll('[data-type="paragraph"]')?.length).toBe(4);
    });
    const blocks = content.querySelectorAll('[data-cangjie-leaf-block="true"]');
    expect(blocks[2]?.textContent).toBe('111');
    expect(content.getElementsByTagName('hr').length).toBe(0);
  });
  test('粘贴到空标题行，void元素保留', async () => {
    const value = _ref11;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => {
      expect(content.querySelectorAll('[data-type="hr"]')?.length).toBe(2);
    });
    const blocks = content.querySelectorAll('[data-cangjie-leaf-block="true"]');
    expect(blocks[1]?.tagName).toBe('H1');
    expect(blocks[2]?.textContent).toBe('Copyed');
  });
  test('粘贴到空行，无多余空行', async () => {
    const value = _ref12;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => {
      expect(content.querySelectorAll('[data-type="heading-1"]')?.length).toBe(2);
    });
    const blocks = content.querySelectorAll('[data-cangjie-leaf-block="true"]');
    expect(blocks?.length).toBe(4);
    expect(content.querySelectorAll('[data-type="paragraph"]')?.length).toBe(2);
  });
  test('粘贴时选中多个完整段落，无多余空行', async () => {
    const value = _ref13;
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      pluginConfigs: {
        clipboard: {
          pastePanel: true
        }
      }
    }));
    const setData = jest.fn();

    _everDevTest.fireEvent.copy(editor, {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('shift+arrowleft'));

    _everDevTest.fireEvent.paste(editor, MIME_TYPES.FRAGMENT, setData.mock.calls[0][1]);

    await (0, _react.waitFor)(() => {
      expect(content.querySelectorAll('[data-type="heading-1"]')?.length).toBe(2);
    });
    const blocks = content.querySelectorAll('[data-cangjie-leaf-block="true"]');
    expect(blocks?.length).toBe(4);
    expect(blocks[2]?.textContent).toBe('111');
    expect(content.querySelectorAll('[data-type="paragraph"]')?.length).toBe(2);
  });
});
//# sourceMappingURL=ui.ccp.test.js.map