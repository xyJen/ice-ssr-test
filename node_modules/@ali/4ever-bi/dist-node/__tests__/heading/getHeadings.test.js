"use strict";

var _everDevTest = require("@ali/4ever-dev-test");

var _everBamboo = require("@ali/4ever-bamboo");

var _everPluginList = require("@ali/4ever-plugin-list");

/** @jsx jsx */
const {
  getListData
} = _everPluginList.OldUtils;
describe('getHeadings 单测', () => {
  [{
    title: '单个有序列表标题，大纲内容要带上序号',
    nodes: [{
      type: 'heading-1',
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      }),
      text: 'hello',
      result: '1. hello'
    }]
  }, {
    title: '多个不同有序列表标题，大纲内容要带上序号',
    nodes: [{
      type: 'heading-1',
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      }),
      text: 'hello',
      result: '1. hello'
    }, {
      type: 'heading-2',
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      }),
      text: 'hello',
      result: '2. hello'
    }, {
      type: 'heading-3',
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      }),
      text: 'hello',
      result: '3. hello'
    }]
  }, {
    title: '非有序列表标题，大纲内容不带序号',
    nodes: [{
      type: 'heading-1',
      data: getListData({
        level: 0,
        type: 'ul',
        listStyleType: 'SCIR_ECIR_SREC',
        listId: 'a'
      }),
      text: 'hello',
      result: 'hello'
    }, {
      type: 'heading-1',
      data: getListData({
        level: 0,
        type: 'tlist',
        listId: 'a'
      }),
      text: 'hello',
      result: 'hello'
    }]
  }, {
    title: '非列表标题，标题大纲内容仍正常显示',
    nodes: [{
      type: 'heading-1',
      data: {},
      text: 'hello',
      result: 'hello'
    }]
  }, {
    title: '多层级有序列表标题，大纲内容能正确显示列表序号',
    nodes: [{
      type: 'heading-1',
      data: getListData({
        level: 0,
        type: 'ol',
        listId: 'a'
      }),
      text: 'hello',
      result: '1. hello'
    }, {
      type: 'heading-1',
      data: getListData({
        level: 1,
        type: 'ol',
        listId: 'a'
      }),
      text: 'hello',
      result: 'a. hello'
    }, {
      type: 'heading-1',
      data: getListData({
        level: 2,
        type: 'ol',
        listId: 'a'
      }),
      text: 'hello',
      result: 'i. hello'
    }, {
      type: 'heading-1',
      data: getListData({
        level: 2,
        type: 'ol',
        listId: 'a'
      }),
      text: 'hello',
      result: 'ii. hello'
    }, {
      type: 'heading-1',
      data: getListData({
        level: 1,
        type: 'ol',
        listId: 'a'
      }),
      text: 'hello',
      result: 'b. hello'
    }, {
      type: 'heading-1',
      data: getListData({
        level: 0,
        type: 'ol',
        listId: 'a'
      }),
      text: 'hello',
      result: '2. hello'
    }]
  }].forEach(({
    title,
    nodes
  }) => {
    it(title, () => {
      const blocks = nodes.map(({
        data,
        type,
        text
      }) => (0, _everDevTest.jsx)("block", {
        type: type,
        data: data
      }, text));
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, blocks));
      const headings = (0, _everBamboo.getHeadings)(value);
      nodes.forEach(({
        result
      }, index) => {
        expect(headings[index].text).toBe(result);
      });
    });
  });
});
//# sourceMappingURL=getHeadings.test.js.map