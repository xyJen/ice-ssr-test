"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = require("@testing-library/react");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _heading = _interopRequireDefault(require("../../plugins/heading"));

var _bold = _interopRequireDefault(require("../../plugins/bold"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _createBiPlugins.default)().array;
const szMarks = [{
  type: 'sz',
  data: {
    value: 16,
    szUnit: 'pt'
  }
}];

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "getHeading ", (0, _everDevTest.jsx)("cursor", null), "\u6D4B\u8BD5")));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, (0, _everDevTest.jsx)("anchor", null), "getHeading"), (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "\u6D4B\u8BD5", (0, _everDevTest.jsx)("focus", null))));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, (0, _everDevTest.jsx)("anchor", null), "getHeading"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6D4B\u8BD5", (0, _everDevTest.jsx)("focus", null))));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, (0, _everDevTest.jsx)("anchor", null), "getHeading"), (0, _everDevTest.jsx)("block", {
  type: "heading-2"
}, "\u6D4B\u8BD5", (0, _everDevTest.jsx)("focus", null))));

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "A")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B")));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "paragraph", (0, _everDevTest.jsx)("cursor", null))));

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-4",
  key: "a"
}, (0, _everDevTest.jsx)("text", {
  key: "text",
  marks: szMarks
}, "paragraph", (0, _everDevTest.jsx)("cursor", null)))));

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "paragraph", (0, _everDevTest.jsx)("cursor", null))));

var _ref9 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "paragraph", (0, _everDevTest.jsx)("cursor", null))));

var _ref10 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1",
  key: "a"
}, (0, _everDevTest.jsx)("anchor", null), "heading-1", (0, _everDevTest.jsx)("focus", null))));

var _ref11 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, (0, _everDevTest.jsx)("anchor", null), "heading-1", (0, _everDevTest.jsx)("focus", null))));

var _ref12 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1",
  key: "a"
}, (0, _everDevTest.jsx)("anchor", null), "heading"), (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "paragraph"), (0, _everDevTest.jsx)("focus", null))));

var _ref13 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1",
  key: "a"
}, (0, _everDevTest.jsx)("cursor", null), "heading-1")));

var _ref14 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1",
  key: "a"
}, "head", (0, _everDevTest.jsx)("inline", {
  type: "tag"
}), (0, _everDevTest.jsx)("cursor", null), "ing-1")));

var _ref15 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "head", (0, _everDevTest.jsx)("cursor", null), "ing-1")));

var _ref16 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1",
  key: "a"
}, "heading-1", (0, _everDevTest.jsx)("inline", {
  type: "tag"
}), (0, _everDevTest.jsx)("cursor", null))));

var _ref17 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "##", (0, _everDevTest.jsx)("cursor", null))));

var _ref18 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1",
  key: "a"
}, "head", (0, _everDevTest.jsx)("inline", {
  type: "tag"
}, (0, _everDevTest.jsx)("cursor", null)), "ing-1")));

var _ref19 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1",
  key: "a"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref20 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1",
  key: "a"
}, "he", (0, _everDevTest.jsx)("anchor", null), "ading-", (0, _everDevTest.jsx)("focus", null), "1")));

var _ref21 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1",
  key: "a"
}, "he", (0, _everDevTest.jsx)("anchor", null), "ading-1", (0, _everDevTest.jsx)("focus", null))));

var _ref22 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "A")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, "B")));

describe('Bi/heading/behaviour', () => {
  describe('getHeading 单测', () => {
    test('默认正文', async () => {
      const value = _ref;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const heading = controller.query(_heading.default.queries.getHeading);
      expect(heading).toBe('paragraph');
    });
    test('选中标题', async () => {
      const value = _ref2;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const heading = controller.query(_heading.default.queries.getHeading);
      expect(heading).toBe('heading-1');
    });
    test('段落选区包含标题和段落', async () => {
      const value = _ref3;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const heading = controller.query(_heading.default.queries.getHeading);
      expect(heading).toBe('');
    });
    test('段落选区包含多个标题', async () => {
      const value = _ref4;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const heading = controller.query(_heading.default.queries.getHeading);
      expect(heading).toBe('');
    });
    test('表格选区', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [100, 100]
        }
      }, _ref5)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const tableSelection = {
        key: 'table-key',
        startRowIndex: 0,
        startColIndex: 0,
        endRowIndex: 0,
        endColIndex: 1
      };
      const table = controller.value.document.getNode('table-key');
      controller.command('selectTableSelection', table, tableSelection);
      await (0, _react.wait)();
      const heading = controller.query(_heading.default.queries.getHeading);
      expect(heading).toBe('');
    });
    test('设置标题包含字号和字重数据', async () => {
      const value = _ref6;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', _heading.default.actions.setHeading('heading-1'));
      const heading = controller.value.document.getNode('a');
      const marks = heading?.getFirstText()?.getMarks();
      expect(marks?.find(m => m.type === 'sz')?.data.value).toBe(20);
      expect(!!marks?.find(m => m.type === 'bold')).toBe(true);
    });
    test('标题已有字号在重新设置为标题时清除', async () => {
      const value = _ref7;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', _heading.default.actions.setHeading('heading-1'));
      const heading = controller.value.document.getNode('a');
      const marks = heading?.getFirstText()?.getMarks();
      expect(marks?.find(m => m.type === 'sz')?.data.value).toBe(20);
    });
    test('设置标题包含 spacing 数据', async () => {
      const value = _ref8;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', _heading.default.actions.setHeading('heading-1'));
      const heading = controller.value.document.getNode('a');
      expect(heading.data).toEqual({
        spacing: {
          after: 12,
          before: 26.666666666666668,
          line: 0.8529411764705882
        }
      });
    });
    test('设置为正文可清除文本、段落格式', async () => {
      const value = _ref9;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', _heading.default.actions.setHeading('heading-1'));
      controller.run('onAction', _heading.default.actions.setHeading('paragraph'));
      const heading = controller.value.document.getNode('a');
      const marks = heading.getFirstText().getMarks();
      expect(marks).toEqual([]);
      expect(heading.data.spacing).toEqual({});
    });
    test('已有默认标题可取消加粗', async () => {
      const value = _ref10;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', _bold.default.actions.toggleMark('bold'));
      const heading = controller.value.document.getNode('a');
      const marks = heading.getFirstText().getMarks();
      expect(marks.find(m => m.type === 'bold').data.value).toBe(false);
    });
    test('新生成标题可取消加粗', async () => {
      const value = _ref11;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      }); // 先设置标题后取消加粗


      controller.run('onAction', _heading.default.actions.setHeading('heading-1'));
      controller.run('onAction', _bold.default.actions.toggleMark('bold'));
      const heading = controller.value.document.getNode('a');
      const marks = heading.getFirstText().getMarks();
      expect(marks.find(m => m.type === 'bold').data.value).toBe(false);
    });
    test('默认标题和加粗正文可获取公共的 bold 属性', async () => {
      const value = _ref12;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      expect(controller.query('isBold')).toBe(true);
    });
    test('段落前回车生成新普通段落', async () => {
      const value = _ref13;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      const block = controller.value.document.nodes[0];
      expect(block.type).toBe('heading-1');
    });
    test('段落中回车生成两个标题', async () => {
      const value = _ref14;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      controller.value.document.nodes.forEach(block => {
        expect(block.type).toBe('heading-1');
      });
    });
    test('将段落中回车生成的第二个标题设置为正文后输入文字不包含样式', async () => {
      const value = _ref15;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', _heading.default.actions.setHeading('heading-1'));
      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      controller.run('onAction', _heading.default.actions.setHeading('paragraph'));
      controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
        type: 'insertText',
        data: 'world'
      }));
      const block = controller.value.document.nodes[1];
      const text = block.nodes[0];
      expect(text.marks).toEqual([]);
    });
    test('段落尾回车生成新段落', async () => {
      const value = _ref16;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      const block = controller.value.document.nodes[1];
      expect(block.type).toBe('paragraph');
    });
    test('使用 markdown 语法生成标题回车后会清除选区临时样式', async () => {
      const value = _ref17;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('space')));
      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      const block = controller.value.document.nodes[1];
      expect(block.type).toBe('paragraph');
      expect(controller.value.selection.marks).toBe(null);
    });
    test('inline 元素中回车不生成新段落', async () => {
      const value = _ref18;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      expect(controller.value.document.nodes.length).toBe(1);
    });
    test('空标题回车生成新段落', async () => {
      const value = _ref19;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      expect(controller.value.document.nodes[0].type).toBe('heading-1');
      expect(controller.value.document.nodes[1].type).toBe('paragraph');
    });
    test('部分选中标题回车生成两个标题', async () => {
      const value = _ref20;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      controller.value.document.nodes.forEach(block => {
        expect(block.type).toBe('heading-1');
      });
    });
    test('选中标题结束部分回车生成新段落', async () => {
      const value = _ref21;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      expect(controller.value.document.nodes[0].type).toBe('heading-1');
      expect(controller.value.document.nodes[1].type).toBe('paragraph');
    });
    test('表格边缘选区', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [100, 100]
        }
      }, _ref22)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.command(_everCangjie.Commands.select, _everCangjie.Selection.create({
        anchor: _everCangjie.EdgePoint.create({
          key: 'table-key',
          edge: 'before'
        }),
        focus: _everCangjie.TextPoint.create({
          key: 'b',
          offset: 1
        })
      }));
      controller.run('onAction', _heading.default.actions.setHeading('heading-1'));
      expect(controller.value.document.getNode('a').type).toBe('heading-1');
      expect(controller.value.document.getNode('b').type).toBe('heading-1');
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map