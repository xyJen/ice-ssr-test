{"version":3,"sources":["../../../../src/__tests__/letterSpacing/behaviour.test.tsx"],"names":["plugins","array","describe","test","value","controller","Controller","create","spacing","query","letterSpacingPlugin","queries","getLetterSpacing","expect","toBe","colsWidth","tableSelection","key","startRowIndex","startColIndex","endRowIndex","endColIndex","table","document","getNode","command","run","actions","setLetterSpacing"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport { Controller, Value, Block } from '@ali/4ever-cangjie';\nimport { jsx } from '@ali/4ever-dev-test';\nimport createBiPlugins from '../../createBiPlugins';\nimport letterSpacingPlugin from '../../plugins/letterSpacing';\n\n\nconst plugins = createBiPlugins().array;\n\n\ndescribe('Bi/letterSpacing/behaviour', () => {\n  describe('getLetterSpacing', () => {\n    test('默认文字', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor />测试<focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const spacing = controller.query(letterSpacingPlugin.queries.getLetterSpacing);\n      expect(spacing).toBe(0);\n    });\n\n    test('选区包含多个不同 spacing mark', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor />\n              <m type=\"spacing\" data={{ value: 2 }}>测</m> <m type=\"spacing\" data={{ value: 1 }}>试</m>\n              <focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const spacing = controller.query(letterSpacingPlugin.queries.getLetterSpacing);\n      expect(spacing).toBe(0);\n    });\n\n    test('选区包含多个相同 spacing mark', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor />\n              <m type=\"spacing\" data={{ value: 2 }}>测</m>\n              <m type=\"spacing\" data={{ value: 2 }}>试</m>\n              <focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const spacing = controller.query(letterSpacingPlugin.queries.getLetterSpacing);\n      expect(spacing).toBe(2);\n    });\n\n    test('表格选区设置字间距', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"table\" key=\"table-key\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\" key=\"a\" />\n                </block>\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\" key=\"b\" />\n                </block>\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const tableSelection = {\n        key: 'table-key',\n        startRowIndex: 0,\n        startColIndex: 0,\n        endRowIndex: 0,\n        endColIndex: 1,\n      };\n\n      const table = controller.value.document.getNode('table-key');\n      // @ts-ignore\n      controller.command('selectTableSelection', table as Block, tableSelection);\n\n      // 初始不存在\n      let spacing = controller.query(letterSpacingPlugin.queries.getLetterSpacing);\n      expect(spacing).toBe(0);\n\n      // 可设置\n      controller.run('onAction', letterSpacingPlugin.actions.setLetterSpacing(2));\n      spacing = controller.query(letterSpacingPlugin.queries.getLetterSpacing);\n      expect(spacing).toBe(2);\n\n      // 可清除\n      controller.run('onAction', letterSpacingPlugin.actions.setLetterSpacing(0));\n      spacing = controller.query(letterSpacingPlugin.queries.getLetterSpacing);\n      expect(spacing).toBe(0);\n    });\n  });\n});\n"],"file":"behaviour.test.js"}