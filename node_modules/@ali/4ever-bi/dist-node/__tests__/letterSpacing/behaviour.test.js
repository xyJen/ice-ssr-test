"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _letterSpacing = _interopRequireDefault(require("../../plugins/letterSpacing"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _createBiPlugins.default)().array;

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "\u6D4B\u8BD5", (0, _everDevTest.jsx)("focus", null))));

var _ref2 = (0, _everDevTest.jsx)("anchor", null);

var _ref3 = (0, _everDevTest.jsx)("focus", null);

var _ref4 = (0, _everDevTest.jsx)("anchor", null);

var _ref5 = (0, _everDevTest.jsx)("focus", null);

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
})), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
})));

describe('Bi/letterSpacing/behaviour', () => {
  describe('getLetterSpacing', () => {
    test('默认文字', async () => {
      const value = _ref;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const spacing = controller.query(_letterSpacing.default.queries.getLetterSpacing);
      expect(spacing).toBe(0);
    });
    test('选区包含多个不同 spacing mark', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref2, (0, _everDevTest.jsx)("m", {
        type: "spacing",
        data: {
          value: 2
        }
      }, "\u6D4B"), " ", (0, _everDevTest.jsx)("m", {
        type: "spacing",
        data: {
          value: 1
        }
      }, "\u8BD5"), _ref3)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const spacing = controller.query(_letterSpacing.default.queries.getLetterSpacing);
      expect(spacing).toBe(0);
    });
    test('选区包含多个相同 spacing mark', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref4, (0, _everDevTest.jsx)("m", {
        type: "spacing",
        data: {
          value: 2
        }
      }, "\u6D4B"), (0, _everDevTest.jsx)("m", {
        type: "spacing",
        data: {
          value: 2
        }
      }, "\u8BD5"), _ref5)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const spacing = controller.query(_letterSpacing.default.queries.getLetterSpacing);
      expect(spacing).toBe(2);
    });
    test('表格选区设置字间距', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [100, 100]
        }
      }, _ref6)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const tableSelection = {
        key: 'table-key',
        startRowIndex: 0,
        startColIndex: 0,
        endRowIndex: 0,
        endColIndex: 1
      };
      const table = controller.value.document.getNode('table-key'); // @ts-ignore

      controller.command('selectTableSelection', table, tableSelection); // 初始不存在

      let spacing = controller.query(_letterSpacing.default.queries.getLetterSpacing);
      expect(spacing).toBe(0); // 可设置

      controller.run('onAction', _letterSpacing.default.actions.setLetterSpacing(2));
      spacing = controller.query(_letterSpacing.default.queries.getLetterSpacing);
      expect(spacing).toBe(2); // 可清除

      controller.run('onAction', _letterSpacing.default.actions.setLetterSpacing(0));
      spacing = controller.query(_letterSpacing.default.queries.getLetterSpacing);
      expect(spacing).toBe(0);
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map