"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

require("@testing-library/jest-dom/extend-expect");

var _everDevTest = require("@ali/4ever-dev-test");

var _ = require("../..");

var _utils = require("../../plugins/indent/utils");

var _actions = require("../../plugins/indent/actions");

var _onDelete = _interopRequireDefault(require("../../plugins/indent/handlers/onDelete"));

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _.createBiPlugins)({}).array;

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6BB5\u843D")));

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6BB5\u843D");

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "code",
  cursor: "after"
}, "ends with four space       ")));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

describe('Bi/indent/behaviour', () => {
  describe('边界场景', () => {
    test('左缩进为默认值 0 时，缩小缩进，不产生 history', async () => {
      const value = _ref;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _actions.decreaseIndent)());
      await (0, _everDevTest.waitForTime)(1);

      const history = controller.value.data.history || _everCangjie.History.create();

      expect(history.undos.length).toEqual(0);
    });
    test('左缩进为最大值时，增大缩进，不产生 history', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          ind: {
            left: _utils.MAX_INDENT_SIZE
          }
        }
      }, _ref2, "\u6BB5\u843D"), _ref3));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _actions.increaseIndent)());
      await (0, _everDevTest.waitForTime)(1);
      const {
        history = _everCangjie.History.create()
      } = controller.value.data;
      expect(history.undos.length).toEqual(0);
    });
  });
  describe('onDelete', () => {
    test('delete 左侧为代码块时，忽略 4 个空格的处理', async () => {
      const value = _ref4;
      const output = _ref5;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      }); // mock onDelete，未处理代码块，测试报错


      (0, _onDelete.default)({
        preventDefault: () => {}
      }, controller, () => {});
      controller.command(_everCangjie.Commands.deleteBackward);
      const actual = controller.value.toJSON();
      const expected = controller.setValue(output).value.toJSON();
      expect(actual).toEqual(expected);
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map