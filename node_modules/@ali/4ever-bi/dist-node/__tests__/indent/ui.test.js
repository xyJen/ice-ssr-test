"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _dom = require("@testing-library/dom");

var _editor = _interopRequireDefault(require("../editor"));

var _helper = require("../helper");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _weDesignNext = require("@ali/we-design-next");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
let origin_value;
beforeAll(() => {
  origin_value = process.env.RUNTIME_ENV;
  process.env.RUNTIME_ENV = _weDesignNext.ToolbarLayout.UITEST_FLAG;
});
afterAll(() => {
  process.env.RUNTIME_ENV = origin_value;
});

function clickToolbar(container, selector) {
  const quoteBlockElement = container.querySelector(selector);

  _everDevTest.fireEvent.click(quoteBlockElement);
}

const plugins = (0, _createBiPlugins.default)().array;

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "Hello")));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "Hello")));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "H", (0, _everDevTest.jsx)("cursor", null), "ello")));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hell    ", (0, _everDevTest.jsx)("cursor", null), "o")));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hell  ", (0, _everDevTest.jsx)("cursor", null), "o")));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Hello", (0, _everDevTest.jsx)("focus", null), "world")));

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Hello", (0, _everDevTest.jsx)("focus", null))));

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Hello"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "world", (0, _everDevTest.jsx)("focus", null))));

var _ref9 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "Hello")));

var _ref10 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("anchor", null), "world", (0, _everDevTest.jsx)("focus", null))));

var _ref11 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("anchor", null)), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "world", (0, _everDevTest.jsx)("focus", null))));

var _ref12 = (0, _everDevTest.jsx)("cursor", null);

var _ref13 = (0, _everDevTest.jsx)("cursor", null);

var _ref14 = (0, _everDevTest.jsx)("cursor", null);

var _ref15 = (0, _everDevTest.jsx)("cursor", null);

var _ref16 = (0, _everDevTest.jsx)("cursor", null);

var _ref17 = (0, _everDevTest.jsx)("anchor", null);

var _ref18 = (0, _everDevTest.jsx)("focus", null);

var _ref19 = (0, _everDevTest.jsx)("cursor", null);

var _ref20 = (0, _everDevTest.jsx)("cursor", null);

var _ref21 = (0, _everDevTest.jsx)("cursor", null);

var _ref22 = (0, _everDevTest.jsx)("cursor", null);

var _ref23 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "Hello")));

var _ref24 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/indent/ui', () => {
  [{
    indentTitle: '在行首 tab 增加缩进',
    indentOperationByKeyboard: (_, content) => {
      _ && _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));
    },
    dedentTitle: '在行首 backspace 减少缩进',
    dedentOperationByKeyboard: (_, content) => {
      _ && _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('backspace'));
    }
  }, {
    indentTitle: '点击按钮增加缩进',
    indentOperationByToolbar: async (container, _) => {
      if (!_) return;
      await (0, _react.waitFor)(() => _dom.screen.queryByTestId('bi-toolbar-incindent'));
      clickToolbar(container, '[data-testid="bi-toolbar-incindent"]');
    },
    dedentTitle: '点击按钮减少缩进',
    dedentOperationByToolbar: async (container, _) => {
      if (!_) return;
      await (0, _react.waitFor)(() => _dom.screen.queryByTestId('bi-toolbar-decindent'));
      clickToolbar(container, '[data-testid="bi-toolbar-decindent"]');
    }
  }].forEach(({
    indentTitle,
    indentOperationByKeyboard,
    dedentOperationByKeyboard,
    dedentTitle,
    indentOperationByToolbar,
    dedentOperationByToolbar
  }) => {
    it(indentTitle, async () => {
      const value = _ref;
      const {
        container,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value
      }));

      if (indentOperationByKeyboard) {
        await indentOperationByKeyboard(container, content);
        await (0, _react.wait)();
        const indentElement = content.querySelector('*[data-type="paragraph"]');
        expect(indentElement.style.textIndent).toBe('32px');
        expect(indentElement.style.paddingLeft).toBe('0px');
      }

      if (indentOperationByToolbar) {
        await indentOperationByToolbar(container, content);
        await (0, _react.wait)();
        const indentElement = content.querySelector('*[data-type="paragraph"]');
        expect(indentElement.style.textIndent).toBe('0');
        expect(indentElement.style.paddingLeft).toBe('32px');
      }
    });
    it(dedentTitle, async () => {
      const value = _ref2;
      const {
        container,
        content,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

      _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

      _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

      await (0, _react.wait)();

      if (dedentOperationByKeyboard) {
        await dedentOperationByKeyboard(container, content);
        await (0, _react.wait)();
        const indentElement = content.querySelector('*[data-type="paragraph"]');
        expect(indentElement.style.textIndent).toBe('0');
        expect(indentElement.style.paddingLeft).toBe('64px');
      }

      if (dedentOperationByToolbar) {
        await dedentOperationByToolbar(container, content);
        await (0, _react.wait)();
        const indentElement = content.querySelector('*[data-type="paragraph"]');
        expect(indentElement.style.textIndent).toBe('32px');
        expect(indentElement.style.paddingLeft).toBe('32px');
      }
    });
  });
  it('在行内 tab 插入 4 个空格', async () => {
    const value = _ref3;
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

    const indentElement = await (0, _react.waitForElement)(() => content.querySelector('*[data-type="paragraph"]'));
    const indentSize = indentElement.style.textIndent;
    expect(indentSize).toBe('0');
    expect(content.textContent).toBe('H    ello');
  });
  it('在行内 backspace 删除 4 个空格', async () => {
    const value = _ref4;
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('backspace'));

    const indentElement = await (0, _react.waitForElement)(() => content.querySelector('*[data-type="paragraph"]'));
    const indentSize = indentElement.style.textIndent;
    expect(indentSize).toBe('0');
    expect(content.textContent).toBe('Hello');
  });
  it('在行内 backspace 时，如光标前空格不满 4 个，不做特殊处理', async () => {
    const value = _ref5;
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('backspace'));

    const indentElement = await (0, _react.waitForElement)(() => content.querySelector('*[data-type="paragraph"]'));
    const indentSize = indentElement.style.textIndent;
    expect(indentSize).toBe('0');
    expect(content.textContent).toBe('Hell o');
  });
  it('在段首有选区（部分） tab 时, 删除选中内容并首行缩进', async () => {
    const value = _ref6;
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

    const indentElement = await (0, _react.waitForElement)(() => content.querySelector('*[data-type="paragraph"]'));
    const indentSize = indentElement.style.textIndent;
    expect(indentSize).toBe('32px');
    expect((0, _helper.removeInvisibleChars)(content?.textContent ?? '')).toBe('world');
  });
  it('在段首有选区（整段） tab 时, 不删除并缩进', async () => {
    const value = _ref7;
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

    const indentElement = await (0, _react.waitForElement)(() => content.querySelector('*[data-type="paragraph"]'));
    expect(indentElement.style.paddingLeft).toBe('32px');
    expect(indentElement.style.textIndent).toBe('0');
    expect((0, _helper.removeInvisibleChars)(content?.textContent ?? '')).toBe('Hello');
  });
  it('在段首有选区（跨段） tab 时, 不删除并缩进', async () => {
    const value = _ref8;
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab')); // eslint-disable-next-line no-unused-expressions


    await (0, _react.waitForElement)(() => content.querySelector('*[data-type="paragraph"]'));
    const indentElements = content.querySelectorAll('*[data-type="paragraph"]');
    indentElements.forEach(ele => {
      expect(ele.style.paddingLeft).toBe('32px');
      expect(ele.style.textIndent).toBe('0');
    });
    expect((0, _helper.removeInvisibleChars)(content?.textContent ?? '')).toBe('Helloworld');
  });
  it('在段首无选区 tab 时, 首行缩进', async () => {
    const value = _ref9;
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

    const indentElement = await (0, _react.waitForElement)(() => content.querySelector('*[data-type="paragraph"]'));
    expect(indentElement.style.paddingLeft).toBe('0px');
    expect(indentElement.style.textIndent).toBe('32px');
  });
  it('在段内有选区（部分） tab 时, 删除选中内容并缩进', async () => {
    const value = _ref10;
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

    const indentElement = await (0, _react.waitForElement)(() => content.querySelector('*[data-type="paragraph"]'));
    expect(indentElement.style.paddingLeft).toBe('0px');
    expect((0, _helper.removeInvisibleChars)(content?.textContent ?? '')).toBe('Hello    ');
  });
  it('在段内有选区（跨段） tab 时, 删除并插入tab', async () => {
    const value = _ref11;
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

    const indentElement = await (0, _react.waitForElement)(() => content.querySelector('*[data-type="paragraph"]'));
    expect(indentElement.style.paddingLeft).toBe('0px');
    expect(indentElement.style.textIndent).toBe('0');
    expect((0, _helper.removeInvisibleChars)(content?.textContent ?? '')).toBe('Hello    ');
  });
  it('增加缩进不会覆盖节点已有的属性', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        mock: true
      }
    }, _ref12, "Hello")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('tab')));
    const {
      document
    } = controller.value;
    expect(document.getBlocks()[0].data).toEqual({
      mock: true,
      ind: {
        firstLine: 32
      }
    });
  });
  it('减少缩进不会覆盖节点已有的属性', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        mock: true
      }
    }, _ref13, "Hello")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('tab')));
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('tab')));
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    const {
      document
    } = controller.value;
    expect(document.getBlocks()[0].data).toEqual({
      mock: true,
      ind: {
        left: 32
      }
    });
  });
  it('按原有单位减少缩进', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          leftChars: 400
        }
      }
    }, _ref14, "Hello")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    const {
      document
    } = controller.value;
    expect(document.getBlocks()[0].data).toEqual({
      ind: {
        leftChars: 200,
        left: 32
      }
    });
  });
  it('按原有单位增加缩进', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          leftChars: 200,
          firstLine: 32
        }
      }
    }, _ref15, "Hello")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('tab')));
    const {
      document
    } = controller.value;
    expect(document.getBlocks()[0].data).toEqual({
      ind: {
        leftChars: 400,
        left: 64,
        firstLine: 32
      }
    });
  });
  it('悬挂缩进：按 tab 删除悬挂缩进并增加左缩进', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          hanging: 32
        }
      }
    }, _ref16, "Hello")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('tab')));
    expect(controller.value.document.getBlocks()[0].data).toEqual({
      ind: {
        left: 32
      }
    });
  });
  it('悬挂缩进：全选时按 tab 保留悬挂缩进并增加左缩进', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          hanging: 32
        }
      }
    }, _ref17, "Hello", _ref18)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('tab')));
    expect(controller.value.document.getBlocks()[0].data).toEqual({
      ind: {
        leftChars: 200,
        left: 32,
        hanging: 32
      }
    });
  });
  it('悬挂缩进：使用 toolbar 增加缩进可增加左缩进并保留悬挂缩进', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          hanging: 32
        }
      }
    }, _ref19, "Hello")));
    const {
      container,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await (0, _react.waitFor)(() => _dom.screen.queryByTestId('bi-toolbar-indent'));
    clickToolbar(container, '[data-testid="bi-toolbar-incindent"]');
    const indentElement = content.querySelector('*[data-type="paragraph"]');
    expect(indentElement.style.textIndent).toBe('-32px');
    expect(indentElement.style.paddingLeft).toBe('32px');
  });
  it('悬挂缩进：已有左缩进时，按 tab 删除悬挂缩进并保留左缩进', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          hanging: 32,
          leftChars: 200
        }
      }
    }, _ref20, "Hello")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('tab')));
    expect(controller.value.document.getBlocks()[0].data).toEqual({
      ind: {
        leftChars: 200
      }
    });
  });
  it('悬挂缩进：使用负的 firstLine', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          firstLine: -32,
          left: 32
        }
      }
    }, _ref21, "Hello")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('tab')));
    expect(controller.value.document.getBlocks()[0].data).toEqual({
      ind: {
        left: 32
      }
    });
  });
  it('首行缩进：按 tab 增加左缩进并保留首行', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          firstLine: 32
        }
      }
    }, _ref22, "Hello")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('tab')));
    expect(controller.value.document.getBlocks()[0].data).toEqual({
      ind: {
        firstLine: 32,
        left: 32
      }
    });
  });
  it('首行缩进：按 tab 首行缩进', async () => {
    const value = _ref23;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('tab')));
    expect(controller.value.document.getBlocks()[0].data).toEqual({
      ind: {
        firstLine: 32
      }
    });
  });
  it('首行缩进：使用 toolbar 增加缩进可增加左缩进并保留首行缩进', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          firstLine: 32
        }
      }
    }, _ref24, "Hello")));
    const {
      container,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await (0, _react.waitFor)(() => _dom.screen.queryByTestId('bi-toolbar-indent'));
    clickToolbar(container, '[data-testid="bi-toolbar-incindent"]');
    await (0, _react.wait)();
    const indentElement = content.querySelector('*[data-type="paragraph"]');
    expect(indentElement.style.textIndent).toBe('32px');
    expect(indentElement.style.paddingLeft).toBe('32px');
  });
});
//# sourceMappingURL=ui.test.js.map