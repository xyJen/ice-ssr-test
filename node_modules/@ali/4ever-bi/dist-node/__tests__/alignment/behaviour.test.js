"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

require("@testing-library/jest-dom/extend-expect");

var _everDevTest = require("@ali/4ever-dev-test");

var _ = require("../..");

var _actions = require("../../plugins/alignment/actions");

var _getAlignment = _interopRequireDefault(require("../../plugins/alignment/queries/getAlignment"));

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _.createBiPlugins)({}).array;

var _ref = (0, _everDevTest.jsx)("cursor", null);

const createAlignmentValue = alignment => ({
  alignment,
  value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: alignment && {
      jc: alignment
    }
  }, _ref, "\u6BB5\u843D")))
});

var _ref2 = (0, _everDevTest.jsx)("anchor", null);

var _ref3 = (0, _everDevTest.jsx)("focus", null);

var _ref4 = (0, _everDevTest.jsx)("anchor", null);

var _ref5 = (0, _everDevTest.jsx)("focus", null);

var _ref6 = (0, _everDevTest.jsx)("anchor", null);

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A");

var _ref8 = (0, _everDevTest.jsx)("focus", null);

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A");

describe('Bi/alignment/behaviour', () => {
  describe('queries/getAlignment', () => {
    test('未设置对齐时，返回左对齐', () => {
      const {
        value
      } = createAlignmentValue();

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      expect((0, _getAlignment.default)(controller)).toBe('left');
    });
    test('多个相同对齐样式段落，返回值正确', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          jc: 'center'
        }
      }, _ref2, "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          jc: 'center'
        }
      }, _ref3, "\u6BB5\u843D")));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      expect((0, _getAlignment.default)(controller)).toBe('center');
    });
    test('多个不同对齐样式段落，返回 undefined', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          jc: 'left'
        }
      }, _ref4, "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          jc: 'center'
        }
      }, _ref5, "\u6BB5\u843D")));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      expect((0, _getAlignment.default)(controller)).toBe(undefined);
    });
    test('选中表格内某一列，返回值正常', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell"
      }, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          jc: 'center'
        }
      }, "\u6BB5\u843D", _ref6)), _ref7), (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell"
      }, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          jc: 'center'
        }
      }, "\u6BB5\u843D", _ref8)), _ref9))));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      expect((0, _getAlignment.default)(controller)).toBe('center');
    });
  });
  describe('边界场景', () => {
    test('默认情况下，设置左对齐，不产生 history', async () => {
      const {
        value,
        alignment = 'left'
      } = createAlignmentValue();

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _actions.setAlignment)(alignment));
      await (0, _everDevTest.waitForTime)(1);
      const {
        history = _everCangjie.History.create()
      } = controller.value.data;
      expect(history.undos.length).toEqual(0);
    });
    ['left', 'center', 'right', 'justify'].forEach(align => {
      test(`alignment 为 ${align} 时，设置 ${align}，不产生 history`, async () => {
        const {
          value,
          alignment
        } = createAlignmentValue(align);

        const controller = _everCangjie.Controller.create({
          value,
          plugins
        });

        controller.run('onAction', (0, _actions.setAlignment)(alignment));
        await (0, _everDevTest.waitForTime)(1);
        const {
          history = _everCangjie.History.create()
        } = controller.value.data;
        expect(history.undos.length).toEqual(0);
      });
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map