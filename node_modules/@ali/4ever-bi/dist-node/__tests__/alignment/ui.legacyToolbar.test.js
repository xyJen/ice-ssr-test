"use strict";

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

var _editor = require("../editor");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("cursor", null);

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

/**
 * 注意不能使用 {cursor === 'start' && <cursor />} 这种语法不然会报错
 * @param text
 * @param cursor 光标的位置
 */
function createValue(text, cursor = 'start') {
  return (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, cursor === 'start' ? _ref : null, text, cursor === 'end' ? _ref2 : null)));
}

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/alignment/ui', () => {
  [{
    title: '居中',
    type: 'center',
    hotKey: 'e'
  }, {
    title: '右侧',
    type: 'right',
    hotKey: 'r'
  }, {
    title: '自动',
    type: 'justify',
    hotKey: 'j'
  }].forEach(({
    title,
    type,
    hotKey
  }) => {
    it(`使用按钮切换${title}`, async () => {
      const {
        container,
        content,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: createValue('Hello'),
        singleLayout: [{
          toolButtons: [{
            name: 'alignment'
          }]
        }]
      })); // 打开 alignment 工具栏

      const trigger = container.querySelector('[data-testid="SelectWrap-bi-toolbar-align"] > div');

      _everDevTest.fireEvent.click(trigger); // 点击对齐方式


      const btn = await (0, _react.waitForElement)(() => queryByTestId(`option-${type}`));

      _everDevTest.fireEvent.click(btn); // flush


      await (0, _react.wait)();
      const para = content.querySelector('[data-type="paragraph"]');
      expect(para.style.textAlign).toBe(type);
    });
    it(`在行首按backspace撤销${title}`, async () => {
      const {
        container,
        editor,
        content,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: createValue('Hello'),
        singleLayout: [{
          toolButtons: [{
            name: 'alignment'
          }]
        }]
      })); // 打开 alignment 工具栏

      const trigger = container.querySelector('[data-testid="SelectWrap-bi-toolbar-align"] > div');

      _everDevTest.fireEvent.click(trigger); // 点击对齐方式


      const btn = await (0, _react.waitForElement)(() => queryByTestId(`option-${type}`));

      _everDevTest.fireEvent.click(btn); // flush


      await (0, _react.wait)(); // 撤销

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _react.wait)();
      const para = content.querySelector('[data-type="paragraph"]');
      expect(para.style.textAlign).toBe('left');
    });
    it(`使用 ${title} 快捷键`, async () => {
      const {
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: createValue('Hello')
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(`${hotKey}+ctrl+shift`));

      await (0, _react.wait)();
      const para = content.querySelector('[data-type="paragraph"]');
      expect(para.style.textAlign).toBe(type);
    });
  });
  it('在第二行行首能继续删除第一行左对齐的文本', async () => {
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: createValue('Hello', 'end'),
      singleLayout: [{
        toolButtons: [{
          name: 'alignment'
        }]
      }]
    }));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('enter'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace')); // flush


    await (0, _react.wait)();
    const para = content.querySelector('[data-type="paragraph"]');
    expect(para.textContent).toBe('Hell');
  });
  it('设置对齐方式不会覆盖节点已有的属性', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        mock: true
      }
    }, _ref3, "Hello")));
    const onChange = jest.fn();
    const {
      container,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value,
      singleLayout: [{
        toolButtons: [{
          name: 'alignment'
        }]
      }],
      onChange: onChange
    })); // 打开 alignment 工具栏

    const trigger = container.querySelector('[data-testid="SelectWrap-bi-toolbar-align"] > div');

    _everDevTest.fireEvent.click(trigger); // 点击对齐方式


    const btn = await (0, _react.waitForElement)(() => queryByTestId('option-center'));

    _everDevTest.fireEvent.click(btn); // flush


    await (0, _react.wait)();
    const receiveValue = (0, _lodash.last)(onChange.mock.calls)[0].value;
    expect(receiveValue.startBlock?.data).toEqual({
      mock: true,
      jc: 'center'
    });
  });
  it('distribute 渲染为 justify, 同时加上 text-align-last', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        jc: 'distribute'
      }
    }, "Hello")));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));
    const para = content.querySelector('[data-type="paragraph"]');
    expect(para.style.textAlign).toBe('justify');
    expect(para.style.textAlignLast).toBe('justify');
  });
  it('居左快捷键可以使段落居左', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        jc: 'distribute'
      }
    }, "Hello")));
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('l+ctrl+shift'));

    await (0, _react.wait)();
    const para = content.querySelector('[data-type="paragraph"]');
    expect(para.style.textAlign).toBe('left');
  });
});
//# sourceMappingURL=ui.legacyToolbar.test.js.map