"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _editor = _interopRequireDefault(require("../editor"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("cursor", null);

function createValue(text) {
  const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, text, _ref)));
  return value;
}

describe('Bi/history/ui', () => {
  describe('undo', () => {
    it('当 undo 栈为空时，不进行处理', async () => {
      const {
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: createValue('Hello')
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+z'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+z')); // flush


      await (0, _react.wait)();
      expect(content.textContent).toBe('Hello');
    });
    it('跳过光标相关操作，其余行为则与 slate 默认行为一致', async () => {
      const {
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: createValue('Hello')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'World'
      }); // flush


      await (0, _react.wait)();

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('left'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('left'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('left'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('right'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('right'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+z')); // flush


      await (0, _react.wait)();
      expect(content.textContent).toBe('Hello');
    });
  });
  describe('redo', () => {
    it('当 redo 栈为空时，不进行处理', async () => {
      const {
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: createValue('Hello')
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+y'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+y')); // flush


      await (0, _react.wait)();
      expect(content.textContent).toBe('Hello');
    });
    it('跳过光标相关操作，其余行为则与 slate 默认行为一致', async () => {
      const {
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: createValue('Hello')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'World'
      }); // flush


      await (0, _react.wait)();

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+z'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('left'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('left'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('left'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('right'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('right'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+y')); // flush


      await (0, _react.wait)();
      expect(content.textContent).toBe('HelloWorld');
    });
  });
});
//# sourceMappingURL=ui.test.js.map