"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _react = require("@testing-library/react");

var _ = require("../../");

var _editor = _interopRequireDefault(require("../editor"));

var _helper = require("../helper");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const mockComments = [];
const plugins = (0, _.createCustomizedBiPlugins)({
  comment: _.CommentPlugin,
  ..._.plugins
})({ ..._.locale_zh_CN,
  comment: {
    sendComment: req => {
      const {
        content,
        contentId,
        replyId
      } = req;
      return new Promise(resolve => {
        mockComments.push({
          id: '123',
          date: '12-25',
          author: '多鱼',
          content,
          contentId,
          replyId
        });
        setTimeout(() => {
          resolve();
        }, 100);
      });
    },
    getCommentList: contentId => {
      return new Promise(resolve => {
        setTimeout(() => {
          resolve(mockComments.filter(c => c.contentId === contentId));
        }, 0);
      });
    },
    fetchComment: () => {
      return new Promise(resolve => {
        setTimeout(() => {
          resolve(mockComments);
        }, 0);
      });
    }
  }
});

async function clickCommentButton(container) {
  const markButton = container.querySelector('[data-testid="button-bi-comment"]');

  _everDevTest.fireEvent.click(markButton);

  await (0, _react.wait)();
}

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This ", (0, _everDevTest.jsx)("anchor", null), "is a paragraph", (0, _everDevTest.jsx)("focus", null), " ab")));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This ", (0, _everDevTest.jsx)("cursor", null), "is a paragraph")));

describe.skip('Bi/comment/ui', () => {
  it('基本添加', async () => {
    const value = _ref;
    let controller;
    const {
      queryByTestId,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      controllerRef: c => controller = c,
      plugins: plugins,
      defaultValue: value
    }));
    /**
     * 1. 添加按钮
     */

    const addButton = await (0, _helper.weWaitForElement)(() => queryByTestId('comment-add'));
    expect(controller.value.isFocused).toBe(true);

    _everDevTest.fireEvent.mouseDown(addButton);

    _everDevTest.fireEvent.mouseUp(addButton);

    await (0, _helper.weWaitForElementToBeRemoved)(() => queryByTestId('comment-add'));
    /**
     * 2. 输入文字
     */

    const input = await (0, _helper.weWaitForElement)(() => window.document.querySelector('[data-testid="comment-input"]'));
    expect(controller.value.isFocused).toBe(false);

    _everDevTest.fireEvent.change(input, {
      target: {
        value: 'new comment'
      }
    });
    /**
     * 3. 发送
     */


    const send = await (0, _react.waitForElement)(() => window.document.querySelector('[data-testid="comment-send"]'));
    send.click();
    await (0, _helper.weWaitForElementToBeRemoved)(() => window.document.querySelector('[data-testid="comment-send"]'));
    /**
     * 4. 显示在列表中
     */

    await (0, _helper.weWaitForElement)(() => window.document.querySelector('[data-testid="comment-item"]'));
    /**
     * 5. 移动高亮显示
     */

    await (0, _helper.weWaitForElement)(() => window.document.querySelector('[data-comment-active="true"]'));
    controller.command(_everCangjie.Commands.moveToEndOfDocument);

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('ArrowLeft'));

    await (0, _helper.weWaitFor)(() => expect(window.document.querySelector('[data-comment-active="true"]')).toBeNull());
    expect(window.document.querySelector('[data-comment-active="true"]')).toBeNull();

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('ArrowLeft'));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('ArrowLeft'));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('ArrowLeft'));
  });
  it('光标模式添加', async () => {
    const value = _ref2;
    let controller;
    const {
      queryByTestId,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      controllerRef: c => controller = c,
      plugins: plugins,
      defaultValue: value
    }));
    /**
     * 1. 添加按钮
     */

    const paragraph = content.querySelector('[data-cangjie-leaf]');

    _everDevTest.fireEvent.contextMenu(paragraph);

    const addButton = await (0, _helper.weWaitForElement)(() => queryByTestId('menu-item-comment'));

    _everDevTest.fireEvent.click(addButton);

    await (0, _helper.weWaitForElementToBeRemoved)(() => queryByTestId('menu-item-comment'));
    /**
     * 2. 输入文字
     */

    const input = await (0, _helper.weWaitForElement)(() => window.document.querySelector('[data-testid="comment-input"]'));
    expect(controller.value.isFocused).toBe(false);

    _everDevTest.fireEvent.change(input, {
      target: {
        value: 'new comment'
      }
    });
    /**
     * 3. 发送
     */


    const send = await (0, _react.waitForElement)(() => window.document.querySelector('[data-testid="comment-send"]'));
    send.click();
    await (0, _helper.weWaitForElementToBeRemoved)(() => window.document.querySelector('[data-testid="comment-send"]'));
    /**
     * 4. 显示在列表中
     */

    await (0, _helper.weWaitForElement)(() => window.document.querySelector('[data-testid="comment-item"]'));
  });
});
//# sourceMappingURL=ui.test.js.map