"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

require("@testing-library/jest-dom/extend-expect");

var _react2 = require("@testing-library/react");

var _serializer = _interopRequireDefault(require("../serializer"));

var _everPluginCode = require("@ali/4ever-plugin-code");

var _ = require("../..");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _helper = require("../helper");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  code: _everPluginCode.biFactory
});
const hotKey = 'ctrl+k';
const insertEvent = (0, _everDevTest.getHotkeyEvent)(hotKey);
const undoEvent = (0, _everDevTest.getHotkeyEvent)('ctrl+z');

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const Editor = props => {
  const {
    defaultValue,
    codeConfig = {}
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    const config = {
      hotKey,
      locale: {
        buttonTitle: '代码块',
        themeTitle: '主题',
        languageTitle: '高亮语言',
        copy: '复制',
        delete: '删除',
        insert: '插入',
        cancel: '删除',
        darkTheme: 'Dark',
        lightTheme: 'Light'
      },
      ...codeConfig
    };
    return createBiPlugins({
      code: config
    });
  }, [codeConfig]);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    autoFocus: true
  }, (0, _everDevTest.jsx)(_.Toolbar, {
    autoFolding: false,
    singleLayout: [{
      toolButtons: [{
        name: 'code'
      }]
    }]
  }), _ref);
};

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "const a = 1;", (0, _everDevTest.jsx)("focus", null))));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "```", (0, _everDevTest.jsx)("cursor", null))));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "```js", (0, _everDevTest.jsx)("cursor", null))));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "abcd```js", (0, _everDevTest.jsx)("cursor", null))));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "before```js after", (0, _everDevTest.jsx)("cursor", null))));

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "const a = 1;", (0, _everDevTest.jsx)("focus", null))));

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123", (0, _everDevTest.jsx)("cursor", null), "456")));

var _ref9 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "first paragraph", (0, _everDevTest.jsx)("cursor", null))));

var _ref10 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}), (0, _everDevTest.jsx)("block", {
  type: "code"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref11 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null)), (0, _everDevTest.jsx)("block", {
  type: "code"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

var _ref12 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null)), (0, _everDevTest.jsx)("block", {
  type: "code"
}), (0, _everDevTest.jsx)("block", {
  type: "code"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("focus", null))));

var _ref13 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null)), (0, _everDevTest.jsx)("block", {
  key: "code",
  type: "code"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

var _ref14 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}), (0, _everDevTest.jsx)("block", {
  key: "code",
  type: "code",
  cursor: "before"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

var _ref15 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "text1"
})), (0, _everDevTest.jsx)("block", {
  type: "code",
  cursor: "before"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

var _ref16 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}), (0, _everDevTest.jsx)("block", {
  key: "code",
  type: "code",
  cursor: "after"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

var _ref17 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}), (0, _everDevTest.jsx)("block", {
  key: "code",
  type: "code",
  cursor: "after"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "text2"
}))));

var _ref18 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}), (0, _everDevTest.jsx)("block", {
  key: "code",
  type: "code"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref19 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "first paragraph", (0, _everDevTest.jsx)("cursor", null))));

var _ref20 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "first paragraph", (0, _everDevTest.jsx)("cursor", null))));

describe('Bi/code/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('插入代码块', () => {
    test('工具栏插入代码块', async () => {
      const {
        queryByTestId,
        container
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));
      const codeButton = container.querySelector('[data-testid="bi-toolbar-code-block"] > div' // TODO @淼淼 迁移到3.0框架中
      );

      _everDevTest.fireEvent.click(codeButton);

      await (0, _react2.waitForElement)(() => queryByTestId('code-editor'));
    });
    test('选中文本后，工具栏插入代码块', async () => {
      const value = _ref2;
      const {
        container
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const codeButton = container.querySelector('[data-testid="bi-toolbar-code-block"] > div');

      _everDevTest.fireEvent.click(codeButton);

      const codeEditor = await (0, _helper.weWaitForElement)(() => container.querySelector('.CodeMirror'));
      expect(codeEditor.textContent).toBe('const a = 1;');
    });
    test('快捷键插入代码块', async () => {
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      await (0, _react2.waitForElement)(() => queryByTestId('code-editor'));
    });
    test('空行连续输入 ``` 回车，插入代码块', async () => {
      const value = _ref3;
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('enter'));

      await (0, _helper.weWaitForElement)(() => queryByTestId('code-editor'));
    });
    test('空行连续输入 ```syntax 回车，插入代码块', async () => {
      const value = _ref4;
      const {
        queryByTestId,
        editor,
        queryByPlaceholderText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('enter'));

      await (0, _helper.weWaitForElement)(() => queryByTestId('code-editor'));
      await (0, _helper.weWaitForElement)(() => queryByPlaceholderText(/JavaScript/i));
    });
    test('行末连续输入 ```syntax 回车，插入代码块', async () => {
      const value = _ref5;
      const {
        queryByTestId,
        queryByText,
        editor,
        queryByPlaceholderText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('enter'));

      await (0, _helper.weWaitForElement)(() => queryByText(/^abcd$/));
      await (0, _helper.weWaitForElement)(() => queryByTestId('code-editor')); // 工具栏选中对应语言

      await (0, _helper.weWaitForElement)(() => queryByPlaceholderText(/JavaScript/i));
    });
    test('若 ```syntax 不位于行末，则回车不响应代码块插入', async () => {
      const value = _ref6;
      const {
        queryByTestId,
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('enter'));

      await (0, _helper.weWaitForElement)(() => queryByText(/^before```js after$/));
      expect(queryByTestId('code-editor')).not.toBeInTheDocument();
    });
    test('插入代码块时，自动将选中文本初始化到代码块', async () => {
      const value = _ref7;
      const {
        container,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      const codeEditor = await (0, _helper.weWaitForElement)(() => container.querySelector('.CodeMirror'));
      expect(codeEditor.textContent).toBe('const a = 1;');
    });
    test('插入代码块，避免截断当前行', async () => {
      const value = _ref8;
      const {
        editor,
        container,
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      await (0, _helper.weWaitForElement)(() => container.querySelector('.CodeMirror'));
      expect(queryByText(/123456/)).toBeInTheDocument();
    });
    test('插入代码块后，自动 focus 到代码块', async () => {
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      const codeEditor = await (0, _helper.weWaitForElement)(() => queryByTestId('code-editor'));
      expect(codeEditor.querySelector('textarea')).toBe(document.activeElement);
    });
    test('代码块后冗余一个空行（方便用户定位光标到代码块）', async () => {
      const value = _ref9;
      const {
        container,
        editor,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      await (0, _helper.weWaitForElement)(() => queryByTestId('code-editor'));
      expect(container.querySelectorAll('[data-type="paragraph"]')).toHaveLength(2);
    });
  });
  describe('删除代码块', () => {
    test('向前删除代码块', async () => {
      const value = _ref10;
      const event = (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.deleteBackward);
      const {
        content,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      })); // 选中

      _everDevTest.fireEvent.keyDown(content, event); // 删除


      _everDevTest.fireEvent.keyDown(content, event);

      await (0, _helper.weWaitForElementToBeRemoved)(() => queryByTestId('code-editor'));
    });
    test('向后删除代码块', async () => {
      const event = (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.deleteForward);
      const value = _ref11;
      const {
        content,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      })); // 选中

      _everDevTest.fireEvent.keyDown(content, event); // 删除


      _everDevTest.fireEvent.keyDown(content, event);

      await (0, _helper.weWaitForElementToBeRemoved)(() => queryByTestId('code-editor'));
    });
    test('选中删除代码块', async () => {
      const event = (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.deleteBackward);
      const value = _ref12;
      const {
        content,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      })); // 删除

      _everDevTest.fireEvent.keyDown(content, event);

      await (0, _react2.wait)();
      expect(!!queryByTestId('code-editor')).toBe(false);
    });
    test('在代码块开头退格，删除代码块', async () => {
      const {
        editor,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      const codeEditor = await (0, _react2.waitForElement)(() => queryByTestId('code-editor'));

      _everDevTest.fireEvent.keyDown(codeEditor.querySelector('textarea'), (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _helper.weWaitForElementToBeRemoved)(() => queryByTestId('code-editor'));
    });
  }); // TODO: FIXME getCaretDom 取不到具体 dom，实际测试正常

  describe.skip('光标移动', () => {
    test('在代码块上方段落右移，跳到代码块左边', async () => {
      const value = _ref13;
      const {
        content,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const event = (0, _everDevTest.getHotkeyEvent)('arrowright');

      _everDevTest.fireEvent.keyDown(content, event);

      await (0, _react2.wait)();
      const caret = await _everCangjie.domUtils.getCaretDom(content);
      const caretValue = caret.getAttribute('data-cangjie-point');
      expect(caretValue).toBe('code-before');
    });
    test('在代码块左侧往右移，跳到代码块右侧', async () => {
      const value = _ref14;
      const {
        content,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const event = (0, _everDevTest.getHotkeyEvent)('arrowright');

      _everDevTest.fireEvent.keyDown(content, event);

      await (0, _react2.wait)();
      const caret = await _everCangjie.domUtils.getCaretDom(content);
      const caretValue = caret.getAttribute('data-cangjie-point');
      expect(caretValue).toBe('code-after');
    });
    test('在代码块左侧往左移，跳到上一个段落', async () => {
      const value = _ref15;
      const {
        content,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const event = (0, _everDevTest.getHotkeyEvent)('arrowup');

      _everDevTest.fireEvent.keyDown(content, event);

      await (0, _react2.wait)();
      const caret = await _everCangjie.domUtils.getCaretDom(content);
      const caretValue = caret.getAttribute('data-cangjie-point');
      expect(caretValue).toBe('text1-0');
    });
    test('在代码块右侧往左移，跳到代码块左侧', async () => {
      const value = _ref16;
      const {
        content,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const event = (0, _everDevTest.getHotkeyEvent)('arrowleft');

      _everDevTest.fireEvent.keyDown(content, event);

      await (0, _react2.wait)();
      const caret = await _everCangjie.domUtils.getCaretDom(content);
      const caretValue = caret.getAttribute('data-cangjie-point');
      expect(caretValue).toBe('code-before');
    });
    test('在代码块右侧往右移，跳到代码块下方段落', async () => {
      const value = _ref17;
      const {
        content,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const event = (0, _everDevTest.getHotkeyEvent)('arrowright');

      _everDevTest.fireEvent.keyDown(content, event);

      await (0, _react2.wait)();
      const caret = await _everCangjie.domUtils.getCaretDom(content);
      const caretValue = caret.getAttribute('data-cangjie-point');
      expect(caretValue).toBe('text2-0');
    });
    test('在代码块下方段落左移，跳到代码块右边', async () => {
      const value = _ref18;
      const {
        content,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const event = (0, _everDevTest.getHotkeyEvent)('arrowleft');

      _everDevTest.fireEvent.keyDown(content, event);

      await (0, _react2.wait)();
      const caret = await _everCangjie.domUtils.getCaretDom(content);
      const caretValue = caret.getAttribute('data-cangjie-point');
      expect(caretValue).toBe('code-after');
    });
  });
  describe('回到正文', () => {
    // TODO: FIXME
    test.skip('在代码块开头左移，跳到代码块左边', async () => {
      const value = _ref19;
      const {
        editor,
        content,
        queryByTestId,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      const codeEditor = await (0, _react2.waitForElement)(() => queryByTestId('code-editor'));

      _everDevTest.fireEvent.keyDown(codeEditor.querySelector('textarea'), (0, _everDevTest.getHotkeyEvent)('left'));

      await (0, _react2.wait)();
      const caret = await _everCangjie.domUtils.getCaretDom(content);
      const caretValue = caret.getAttribute('data-cangjie-point');
      expect(caretValue.indexOf('-before') >= 0).toBe(true);
    });
    test('在代码块首行上移，跳回上一段落（若存在）', async () => {
      const value = _ref20;
      const {
        editor,
        queryByText,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      const codeEditor = await (0, _helper.weWaitForElement)(() => queryByTestId('code-editor'));

      _everDevTest.fireEvent.keyDown(codeEditor.querySelector('textarea'), (0, _everDevTest.getHotkeyEvent)('up'));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 's'
      });

      await (0, _helper.weWaitForElement)(() => queryByText(/first paragraphs/));
    });
    test('代码块按下 ESC，退出代码块', async () => {
      const {
        editor,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      const codeEditor = await findByTestId('code-editor');

      _everDevTest.fireEvent.keyDown(codeEditor.querySelector('textarea'), (0, _everDevTest.getHotkeyEvent)('esc'));

      await (0, _react2.wait)();
      await (0, _helper.weWaitFor)(() => expect(document.activeElement).toBe(editor));
    });
  });
  describe('动态工具栏', () => {
    test('支持切换高亮语言', async () => {
      const {
        editor,
        queryByText,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      await (0, _helper.weWaitForElement)(() => document.querySelector('.code-block-theme-select'));
      const syntaxSelect = await (0, _helper.weWaitForElement)(() => document.querySelector('.code-block-syntax-select > div'));
      await (0, _helper.weWaitForElement)(() => document.querySelector('[data-select-value="plaintext"]'));

      _everDevTest.fireEvent.click(syntaxSelect);

      const javascriptOption = await (0, _helper.weWaitForElement)(() => queryByTestId('option-text/javascript'));

      _everDevTest.fireEvent.click(javascriptOption);

      const selected = await (0, _helper.weWaitForElement)(() => document.querySelector('.code-block-syntax-select > div'));
      expect(/JavaScript(JSON)/.test(selected.innerHTML));
    });
    test('支持切换主题', async () => {
      const {
        editor,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      const themeSelect = await (0, _helper.weWaitForElement)(() => document.querySelector('.code-block-theme-select > div'));
      await (0, _helper.weWaitForElement)(() => document.querySelector('[data-select-value="default"]'));

      _everDevTest.fireEvent.click(themeSelect);

      const darkOption = await (0, _helper.weWaitForElement)(() => queryByTestId('option-dracula'));

      _everDevTest.fireEvent.click(darkOption);

      const selected = await (0, _helper.weWaitForElement)(() => document.querySelector('.code-block-theme-select > div'));
      expect(/Dark/.test(selected.innerHTML));
    });
    test('语言及主题切换后，重新回到代码块，状态保留', async () => {
      const {
        editor,
        queryByText,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      const codeMirror = await (0, _helper.weWaitForElement)(() => queryByTestId('code-editor')); // 切换主题

      const themeSelect = await (0, _helper.weWaitForElement)(() => document.querySelector('.code-block-theme-select > div'));

      _everDevTest.fireEvent.click(themeSelect);

      const darkOption = await (0, _helper.weWaitForElement)(() => queryByText(/Dark/i));

      _everDevTest.fireEvent.click(darkOption); // 切换语言


      const syntaxSelect = await (0, _helper.weWaitForElement)(() => document.querySelector('.code-block-syntax-select > div'));

      _everDevTest.fireEvent.click(syntaxSelect);

      const javascriptOption = await (0, _helper.weWaitForElement)(() => queryByText(/JavaScript/i));

      _everDevTest.fireEvent.click(javascriptOption); // 离开编辑器


      _everDevTest.fireEvent.focus(editor);

      await (0, _helper.weWaitFor)(() => document.activeElement === editor); // 回到编辑器

      _everDevTest.fireEvent.focus(codeMirror.querySelector('.CodeMirror textarea'));

      await (0, _helper.weWaitFor)(() => document.activeElement === codeMirror.querySelector('.CodeMirror textarea'));
      const themeSelected = await (0, _helper.weWaitForElement)(() => document.querySelector('.code-block-theme-select > div'));
      const syntaxSelected = await (0, _helper.weWaitForElement)(() => document.querySelector('.code-block-syntax-select > div'));
      expect(/Dark/.test(themeSelected.innerHTML));
      expect(/JavaScript/.test(syntaxSelected.innerHTML));
    });
    test.only('更多', async () => {
      const {
        editor,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.keyDown(editor, insertEvent);

      const moreBtn = await (0, _helper.weWaitForElement)(() => document.querySelector('.code-toolbar-overlay .inline-toolbar-container .button-box'));

      _everDevTest.fireEvent.click(moreBtn);

      const cutBtn = await (0, _helper.weWaitForElement)(() => document.querySelector('.code-toolbar-overlay div[data-path="other-1"]'));

      _everDevTest.fireEvent.click(cutBtn); //await weWaitForElementToBeRemoved(() => queryByTestId('code-editor'));

    });
  });
});
//# sourceMappingURL=ui.test.js.map