{"version":3,"sources":["../../../../src/__tests__/code/behaviour.test.tsx"],"names":["plugins","code","locale","buttonTitle","themeTitle","languageTitle","copy","delete","darkTheme","lightTheme","array","printPlugins","print","describe","test","value","output","controller","Controller","create","command","Commands","moveToRangeOfDocument","actual","toJSON","preserveSelections","expected","setValue","expect","toEqual","syntax","theme","height","id","anything","run","skip","cardType","metadata","subject"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport { Controller, Commands, Value } from '@ali/4ever-cangjie';\nimport { jsx } from '@ali/4ever-dev-test';\nimport createBiPlugins from '../../createBiPlugins';\nimport { insertCode } from '@ali/4ever-plugin-code';\n\nconst plugins = createBiPlugins({\n  code: {\n    locale: {\n      buttonTitle: '代码块',\n      themeTitle: '主题',\n      languageTitle: '高亮语言',\n      copy: '复制',\n      delete: '删除',\n      darkTheme: 'dark',\n      lightTheme: 'light',\n    },\n  },\n}).array;\n\nconst printPlugins = createBiPlugins({\n  code: {\n    locale: {\n      buttonTitle: '代码块',\n      themeTitle: '主题',\n      languageTitle: '高亮语言',\n      copy: '复制',\n      delete: '删除',\n      darkTheme: 'dark',\n      lightTheme: 'light',\n    },\n    print: true\n  },\n}).array;\n\ndescribe('Bi/code/behaviour', () => {\n  describe('选择', () => {\n    test('在正文全选，可以选中代码块', () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              Start Paragraph\n              <cursor />\n            </block>\n            <block type=\"code\" />\n            <block type=\"code\" />\n            <block type=\"paragraph\">End Paragraph</block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const output = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor />\n              Start Paragraph\n            </block>\n            <block type=\"code\" />\n            <block type=\"code\" />\n            <block type=\"paragraph\">\n              End Paragraph\n              <focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n      controller.command(Commands.moveToRangeOfDocument);\n\n      const actual = controller.value.toJSON({ preserveSelections: true });\n      const expected = controller\n        .setValue(output)\n        .value.toJSON({ preserveSelections: true });\n      expect(actual).toEqual(expected);\n    });\n  });\n\n  describe('插入代码块优化交互', () => {\n    test('匹配最近的一个代码块样式: 上', () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\" />\n            <block\n              type=\"code\"\n              data={{\n                syntax: 'plaintext',\n                theme: 'dracula',\n                height: null,\n                id: '',\n              }}\n            />\n            <block type=\"paragraph\">\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const output = ((\n        <value>\n          <document>\n            <block type=\"paragraph\" />\n            <block\n              type=\"code\"\n              data={{\n                syntax: 'plaintext',\n                theme: 'dracula',\n                height: null,\n                id: '',\n              }}\n            />\n            <block\n              type=\"code\"\n              data={{\n                syntax: 'plaintext',\n                theme: 'dracula',\n                height: null,\n                id: expect.anything(),\n              }}\n            />\n            <block type=\"paragraph\" />\n          </document>\n        </value>\n      ) as unknown) as Value;\n      const controller = Controller.create({\n        value,\n        plugins: printPlugins,\n      });\n\n      controller.run('onAction', insertCode({ code: '' }));\n      const actual = controller.value.toJSON();\n      const expected = controller.setValue(output).value.toJSON();\n      expect(actual).toEqual(expected);\n    });\n    test('匹配最近的一个代码块样式: 下', () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <cursor />\n            </block>\n            <block\n              type=\"code\"\n              data={{\n                syntax: 'plaintext',\n                theme: 'dracula',\n                height: null,\n                id: '',\n              }}\n            />\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const output = ((\n        <value>\n          <document>\n            <block\n              type=\"code\"\n              data={{\n                syntax: 'plaintext',\n                theme: 'dracula',\n                height: null,\n                id: expect.anything(),\n              }}\n            />\n            <block type=\"paragraph\" />\n            <block\n              type=\"code\"\n              data={{\n                syntax: 'plaintext',\n                theme: 'dracula',\n                height: null,\n                id: expect.anything(),\n              }}\n            />\n          </document>\n        </value>\n      ) as unknown) as Value;\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      controller.run('onAction', insertCode({ code: '' }));\n      const actual = controller.value.toJSON();\n      const expected = controller.setValue(output).value.toJSON();\n      expect(actual).toEqual(expected);\n    });\n    test('匹配最近的一个代码块样式: 无', () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const output = ((\n        <value>\n          <document>\n            <block\n              type=\"code\"\n              data={{\n                syntax: 'plaintext',\n                theme: 'default',\n                height: null,\n                id: expect.anything(),\n              }}\n            />\n            <block type=\"paragraph\" />\n          </document>\n        </value>\n      ) as unknown) as Value;\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      controller.run('onAction', insertCode({ code: '' }));\n      const actual = controller.value.toJSON();\n      const expected = controller.setValue(output).value.toJSON();\n      expect(actual).toEqual(expected);\n    });\n  });\n\n  describe('节点数据', () => {\n    test('默认高亮语言为 plaintext，默认主题为 default', () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const output = ((\n        <value>\n          <document>\n            <block\n              type=\"code\"\n              data={{\n                syntax: 'plaintext',\n                theme: 'default',\n                height: null,\n                id: expect.anything(),\n              }}\n            />\n            <block type=\"paragraph\" />\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      controller.run('onAction', insertCode({ code: '' }));\n\n      const actual = controller.value.toJSON();\n      const expected = controller.setValue(output).value.toJSON();\n      expect(actual).toEqual(expected);\n    });\n  });\n\n  describe('normalize', () => {\n    test('multi text', () => {\n      const value = ((\n        <value>\n          <document>\n            <block\n              type=\"code\"\n            ><cursor />hello code<m type=\"bold\"> bold</m></block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const output = ((\n        <value>\n          <document>\n            <block\n              type=\"code\"\n            >hello code bold</block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n      const actual = controller.value.toJSON();\n      const expected = controller.setValue(output).value.toJSON();\n      expect(actual).toEqual(expected);\n    });\n\n    /**\n     * 这里和 @星弛 沟通，原有的写法没有添加 card 插件，导致「insertCard」命名失效，导致这个测试为生效\n     * 现在将 linkCard 插件添加到默认插件列表后，可以响应 insertCard 命令。导致下面的 case 不通过。\n     * 这里的 case，会在代码块前面插入一个 block，和 @星弛 期望的用例不一致，后续 @星弛 会进行对应修改\n     */\n    test.skip('insert invalid child', () => {\n      const value = ((\n        <value>\n          <document>\n            <block\n              type=\"code\"\n            >\n              <cursor />hello code\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const output = ((\n        <value>\n          <document>\n            <block\n              type=\"code\"\n            >hello code</block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n      controller.command('insertCard', { cardType: 'calendar', height: 300, metadata: { subject: 'test' } });\n      const actual = controller.value.toJSON();\n      const expected = controller.setValue(output).value.toJSON();\n      expect(actual).toEqual(expected);\n    });\n  });\n});\n"],"file":"behaviour.test.js"}