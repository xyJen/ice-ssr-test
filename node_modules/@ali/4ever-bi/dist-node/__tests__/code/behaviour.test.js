"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _everPluginCode = require("@ali/4ever-plugin-code");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _createBiPlugins.default)({
  code: {
    locale: {
      buttonTitle: '代码块',
      themeTitle: '主题',
      languageTitle: '高亮语言',
      copy: '复制',
      delete: '删除',
      darkTheme: 'dark',
      lightTheme: 'light'
    }
  }
}).array;
const printPlugins = (0, _createBiPlugins.default)({
  code: {
    locale: {
      buttonTitle: '代码块',
      themeTitle: '主题',
      languageTitle: '高亮语言',
      copy: '复制',
      delete: '删除',
      darkTheme: 'dark',
      lightTheme: 'light'
    },
    print: true
  }
}).array;

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Start Paragraph", (0, _everDevTest.jsx)("cursor", null)), (0, _everDevTest.jsx)("block", {
  type: "code"
}), (0, _everDevTest.jsx)("block", {
  type: "code"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "End Paragraph")));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Start Paragraph"), (0, _everDevTest.jsx)("block", {
  type: "code"
}), (0, _everDevTest.jsx)("block", {
  type: "code"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "End Paragraph", (0, _everDevTest.jsx)("focus", null))));

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref9 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref11 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref13 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "code"
}, (0, _everDevTest.jsx)("cursor", null), "hello code", (0, _everDevTest.jsx)("m", {
  type: "bold"
}, " bold"))));

var _ref14 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "code"
}, "hello code bold")));

var _ref15 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "code"
}, (0, _everDevTest.jsx)("cursor", null), "hello code")));

var _ref16 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "code"
}, "hello code")));

describe('Bi/code/behaviour', () => {
  describe('选择', () => {
    test('在正文全选，可以选中代码块', () => {
      const value = _ref;
      const output = _ref2;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.command(_everCangjie.Commands.moveToRangeOfDocument);
      const actual = controller.value.toJSON({
        preserveSelections: true
      });
      const expected = controller.setValue(output).value.toJSON({
        preserveSelections: true
      });
      expect(actual).toEqual(expected);
    });
  });
  describe('插入代码块优化交互', () => {
    test('匹配最近的一个代码块样式: 上', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref3, (0, _everDevTest.jsx)("block", {
        type: "code",
        data: {
          syntax: 'plaintext',
          theme: 'dracula',
          height: null,
          id: ''
        }
      }), _ref4));
      const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref5, (0, _everDevTest.jsx)("block", {
        type: "code",
        data: {
          syntax: 'plaintext',
          theme: 'dracula',
          height: null,
          id: ''
        }
      }), (0, _everDevTest.jsx)("block", {
        type: "code",
        data: {
          syntax: 'plaintext',
          theme: 'dracula',
          height: null,
          id: expect.anything()
        }
      }), _ref6));

      const controller = _everCangjie.Controller.create({
        value,
        plugins: printPlugins
      });

      controller.run('onAction', (0, _everPluginCode.insertCode)({
        code: ''
      }));
      const actual = controller.value.toJSON();
      const expected = controller.setValue(output).value.toJSON();
      expect(actual).toEqual(expected);
    });
    test('匹配最近的一个代码块样式: 下', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref7, (0, _everDevTest.jsx)("block", {
        type: "code",
        data: {
          syntax: 'plaintext',
          theme: 'dracula',
          height: null,
          id: ''
        }
      })));
      const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "code",
        data: {
          syntax: 'plaintext',
          theme: 'dracula',
          height: null,
          id: expect.anything()
        }
      }), _ref8, (0, _everDevTest.jsx)("block", {
        type: "code",
        data: {
          syntax: 'plaintext',
          theme: 'dracula',
          height: null,
          id: expect.anything()
        }
      })));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _everPluginCode.insertCode)({
        code: ''
      }));
      const actual = controller.value.toJSON();
      const expected = controller.setValue(output).value.toJSON();
      expect(actual).toEqual(expected);
    });
    test('匹配最近的一个代码块样式: 无', () => {
      const value = _ref9;
      const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "code",
        data: {
          syntax: 'plaintext',
          theme: 'default',
          height: null,
          id: expect.anything()
        }
      }), _ref10));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _everPluginCode.insertCode)({
        code: ''
      }));
      const actual = controller.value.toJSON();
      const expected = controller.setValue(output).value.toJSON();
      expect(actual).toEqual(expected);
    });
  });
  describe('节点数据', () => {
    test('默认高亮语言为 plaintext，默认主题为 default', () => {
      const value = _ref11;
      const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "code",
        data: {
          syntax: 'plaintext',
          theme: 'default',
          height: null,
          id: expect.anything()
        }
      }), _ref12));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _everPluginCode.insertCode)({
        code: ''
      }));
      const actual = controller.value.toJSON();
      const expected = controller.setValue(output).value.toJSON();
      expect(actual).toEqual(expected);
    });
  });
  describe('normalize', () => {
    test('multi text', () => {
      const value = _ref13;
      const output = _ref14;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const actual = controller.value.toJSON();
      const expected = controller.setValue(output).value.toJSON();
      expect(actual).toEqual(expected);
    });
    /**
     * 这里和 @星弛 沟通，原有的写法没有添加 card 插件，导致「insertCard」命名失效，导致这个测试为生效
     * 现在将 linkCard 插件添加到默认插件列表后，可以响应 insertCard 命令。导致下面的 case 不通过。
     * 这里的 case，会在代码块前面插入一个 block，和 @星弛 期望的用例不一致，后续 @星弛 会进行对应修改
     */

    test.skip('insert invalid child', () => {
      const value = _ref15;
      const output = _ref16;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.command('insertCard', {
        cardType: 'calendar',
        height: 300,
        metadata: {
          subject: 'test'
        }
      });
      const actual = controller.value.toJSON();
      const expected = controller.setValue(output).value.toJSON();
      expect(actual).toEqual(expected);
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map