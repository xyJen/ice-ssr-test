"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

require("@testing-library/jest-dom/extend-expect");

var _react2 = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _newlineGuide = _interopRequireDefault(require("../../plugins/newlineGuide"));

var _list = _interopRequireDefault(require("../../plugins/list"));

var _indent = _interopRequireDefault(require("../../plugins/indent"));

var _leftToolbar = _interopRequireDefault(require("../../plugins/leftToolbar"));

var _ = require("../..");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const menuTestId = 'newline-guide-menu';
const holderTextTestId = 'newline-guide-holderText';
const insertTextTestId = 'newline-guide-insertText';
const selectTextTestId = 'newline-guide-selectText';
const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  newlineGuide: _newlineGuide.default,
  list: _list.default,
  indent: _indent.default,
  leftToolbar: _leftToolbar.default
});
const valueForNewlineGuideTest = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref = (0, _everDevTest.jsx)("p", null, "guide menu");

const Editor = props => {
  const {
    defaultValue,
    placeholder
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = createBiPlugins({
    newlineGuide: {
      enabled: true,
      renderGuideMenu: () => {
        return _ref;
      }
    },
    leftToolbar: {
      menu: [{
        key: 'newlineGuide'
      }]
    }
  });
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    plugins: plugins,
    value: value,
    onChange: handleChange
  }, (0, _everDevTest.jsx)(_.Toolbar, {
    autoFolding: false,
    singleLayout: [{
      toolButtons: [{
        name: 'hr'
      }]
    }]
  }), (0, _everDevTest.jsx)(_content.default, {
    tabIndex: 0,
    placeholder: placeholder
  }));
};

async function triggerNewlineGuideByInput(val) {
  const value = val || valueForNewlineGuideTest;
  const {
    editor,
    queryByTestId,
    ...rest
  } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
    defaultValue: value
  }));

  _everDevTest.fireEvent.focus(editor); // 空行显示引导文案


  await (0, _react2.waitFor)(() => queryByTestId(holderTextTestId));

  _everDevTest.fireEvent.keyUp(editor, {
    key: '/',
    target: {
      value: '/'
    }
  }); // 输入 + 展示插入菜单


  await (0, _react2.waitFor)(() => queryByTestId(menuTestId));
  return {
    editor,
    queryByTestId,
    ...rest
  };
}

async function triggerNewlineGuideByClick(val) {
  const value = val || valueForNewlineGuideTest;
  const {
    editor,
    queryByTestId,
    ...rest
  } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
    defaultValue: value
  }));

  _everDevTest.fireEvent.focus(editor); // 空行显示引导文案


  await (0, _react2.waitFor)(() => queryByTestId(holderTextTestId));
  const insertText = await (0, _react2.waitFor)(() => queryByTestId(insertTextTestId));

  _everDevTest.fireEvent.mouseDown(insertText); // 展示菜单


  await (0, _react2.waitFor)(() => queryByTestId(menuTestId)); // 展示选择占位文案

  await (0, _react2.waitFor)(() => queryByTestId(selectTextTestId));
  return {
    editor,
    queryByTestId,
    ...rest
  };
}

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "\u6807\u9898"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A", (0, _everDevTest.jsx)("cursor", null))));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A", (0, _everDevTest.jsx)("cursor", null)), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "table"
}, (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null)))))));

describe('Bi/newlineGuide/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('换行引导插件', () => {
    test('正确展示引导文案和插入菜单', async () => {
      await triggerNewlineGuideByInput();
    });
    test('继续输入 菜单消失', async () => {
      const {
        editor,
        queryByTestId
      } = await triggerNewlineGuideByInput();

      _everDevTest.fireEvent.change(editor, {
        target: {
          value: 'AAA'
        }
      });

      await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId(menuTestId));
    });
    test('删除 + 菜单消失', async () => {
      const {
        editor,
        queryByTestId
      } = await triggerNewlineGuideByInput();

      _everDevTest.fireEvent.keyDown(editor, {
        key: 'backspace'
      });

      await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId(menuTestId));
    });
    test('undo 菜单消失', async () => {
      const {
        editor,
        queryByTestId
      } = await triggerNewlineGuideByInput();

      _everDevTest.fireEvent.keyUp(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+z'));

      await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId(menuTestId));
    });
    test('esc 菜单消失', async () => {
      const {
        editor,
        queryByTestId
      } = await triggerNewlineGuideByInput();

      _everDevTest.fireEvent.keyUp(editor, (0, _everDevTest.getHotkeyEvent)('esc'));

      await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId(menuTestId));
    });
    test('增加缩进时 菜单消失', async () => {
      const {
        editor,
        queryByTestId
      } = await triggerNewlineGuideByInput();

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '  '
      });

      await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId(menuTestId));
    });
    test('有选区时 菜单消失', async () => {
      const {
        editor,
        queryByTestId
      } = await triggerNewlineGuideByInput();

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('shift+arrowleft'));

      await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId(menuTestId));
    });
    test('展示菜单后 方向键禁止', async () => {
      const {
        editor,
        queryByTestId
      } = await triggerNewlineGuideByInput();

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowup'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowleft'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowright'));

      await (0, _react2.waitFor)(() => queryByTestId(menuTestId));
    });
    test('点击其它地方 菜单消失', async () => {
      const val = _ref2;
      const {
        queryByTestId,
        queryByText
      } = await triggerNewlineGuideByInput(val);
      const heading = await (0, _react2.waitFor)(() => queryByText('标题'));

      _everDevTest.fireEvent.click(heading);

      expect(queryByTestId(holderTextTestId)).not.toBeInTheDocument();
    });
    test('空文档正确展示引导文案和插入菜单', async () => {
      const val = _ref3;
      await triggerNewlineGuideByInput(val);
    });
    test('有占位内容的空文档不展示引导文案', async () => {
      const val = _ref4;
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: val,
        placeholder: "\u8BF7\u8F93\u5165..."
      }));
      expect(queryByTestId(holderTextTestId)).not.toBeInTheDocument();
    });
    test('删除内容后正确展示引导文案', async () => {
      const val = _ref5;
      const {
        editor,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: val
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _react2.waitFor)(() => queryByTestId(holderTextTestId));
    });
    test('移动到新行展示引导文案', async () => {
      const val = _ref6;
      const {
        editor,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: val
      }));
      expect(queryByTestId(holderTextTestId)).not.toBeInTheDocument();

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('arrowdown'));

      await (0, _react2.waitFor)(() => queryByTestId(holderTextTestId));
    });
    test('表格新行输入+展示菜单', async () => {
      const val = _ref7;
      const {
        editor,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: val
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '+'
      });

      await (0, _react2.waitFor)(() => queryByTestId(holderTextTestId));
    });
  });
});
//# sourceMappingURL=ui.test.js.map