"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _createBiPlugins.default)({
  autoSpacing: {
    enable: () => true
  }
}).array;

function translate(str) {
  return str === 'en' ? 'en' : '中';
}

var _ref = (0, _everDevTest.jsx)("cursor", null);

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "en", (0, _everDevTest.jsx)("anchor", null), "en", (0, _everDevTest.jsx)("focus", null), "en")));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "\u4ECA\u665A\u6211\u4EEC\u5C06\u4E3E\u529E ", (0, _everDevTest.jsx)("anchor", null), "QQ\u97F3\u4E50\u5E74\u5EA6", (0, _everDevTest.jsx)("focus", null), "\u76DB\u5178")));

var _ref5 = (0, _everDevTest.jsx)("cursor", null);

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "\u4E2D ", (0, _everDevTest.jsx)("anchor", null), "en", (0, _everDevTest.jsx)("focus", null), " en")));

var _ref8 = (0, _everDevTest.jsx)("cursor", null);

var _ref9 = (0, _everDevTest.jsx)("cursor", null);

var _ref10 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "en \u4E2D", (0, _everDevTest.jsx)("cursor", null), " en")));

describe('Bi/autoSpacing/behaviour', () => {
  describe('insertText', () => {
    [{
      in: 'en[zh]zh',
      out: 'en 中中'
    }, {
      in: 'en[zh]en',
      out: 'en 中 en'
    }, {
      in: 'zh[zh]zh',
      out: '中中中'
    }, {
      in: 'zh[zh]en',
      out: '中中 en'
    }, {
      in: 'zh[en]zh',
      out: '中 en 中'
    }, {
      in: 'zh[en]en',
      out: '中 enen'
    }, {
      in: 'en[en]zh',
      out: 'enen 中'
    }, {
      in: 'en[en]en',
      out: 'enenen'
    }].forEach(item => {
      test(item.in, async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          key: "a"
        }, translate(item.in.slice(0, 2)), _ref, translate(item.in.slice(-2)))));

        const controller = _everCangjie.Controller.create({
          value,
          plugins
        });

        controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
          type: 'insertText',
          data: translate(item.in.slice(3, 5))
        }));
        const block = controller.value.document.nodes[0];
        expect(block.text).toBe(item.out);
      });
    });
    [{
      name: '删除前序空格',
      before: '中 ',
      after: 'en',
      in: '中',
      out: '中中 en'
    }, {
      name: '删除后序空格',
      before: 'en',
      after: ' 中',
      in: '中',
      out: 'en 中中'
    }].forEach(item => {
      test(item.name, async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          key: "a"
        }, item.before, _ref2, item.after)));

        const controller = _everCangjie.Controller.create({
          value,
          plugins
        });

        controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
          type: 'insertText',
          data: item.in
        }));
        const block = controller.value.document.nodes[0];
        expect(block.text).toBe(item.out);
      });
    });
    test('选中内容输入-添加空格', async () => {
      const value = _ref3;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
        type: 'insertText',
        data: '中'
      }));
      const block = controller.value.document.nodes[0];
      expect(block.text).toBe('en 中 en');
    });
    test('选中内容输入-不添加空格', async () => {
      const value = _ref4;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
        type: 'insertText',
        data: '隆重'
      }));
      const block = controller.value.document.nodes[0];
      expect(block.text).toBe('今晚我们将举办 隆重盛典');
    });
  });
  describe('delete char', () => {
    [{
      name: '删除第一个[backspace]',
      before: '中 e',
      after: ' en',
      out: '中 en'
    }, {
      name: '删除第二个[backspace]',
      before: 'en e',
      after: ' 中',
      out: 'en 中'
    }, {
      name: '删除全部[backspace]',
      before: '中 e',
      after: ' 中',
      out: '中中'
    }, {
      name: '不删除[backspace]',
      before: 'QQ ',
      after: '音乐',
      out: 'QQ音乐'
    }].forEach(item => {
      test(item.name, async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          key: "a"
        }, item.before, _ref5, item.after)));

        const controller = _everCangjie.Controller.create({
          value,
          plugins
        });

        controller.run('onKeyDown', // @ts-ignore
        new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
        const block = controller.value.document.nodes[0];
        expect(block.text).toBe(item.out);
      });
    });
    [{
      name: '删除第一个[delete]',
      before: '中 ',
      after: 'e en',
      out: '中 en'
    }, {
      name: '删除第二个[delete]',
      before: 'en ',
      after: 'e 中',
      out: 'en 中'
    }, {
      name: '删除全部[delete]',
      before: '中 ',
      after: 'e 中',
      out: '中中'
    }].forEach(item => {
      test(item.name, async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          key: "a"
        }, item.before, _ref6, item.after)));

        const controller = _everCangjie.Controller.create({
          value,
          plugins
        });

        controller.run('onKeyDown', // @ts-ignore
        new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('delete')));
        const block = controller.value.document.nodes[0];
        expect(block.text).toBe(item.out);
      });
    });
    test('选中内容删除', async () => {
      const value = _ref7;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
      const block = controller.value.document.nodes[0];
      expect(block.text).toBe('中  en');
    });
  });
  describe('delete word', () => {
    [{
      name: '删除第一个[alt+backspace]',
      before: '中 en',
      after: ' en',
      out: '中 en'
    }, {
      name: '删除第二个[alt+backspace]',
      before: 'en en',
      after: ' 中',
      out: 'en 中'
    }, {
      name: '删除全部[alt+backspace]',
      before: '中 en',
      after: ' 中',
      out: '中中'
    }].forEach(item => {
      test(item.name, async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          key: "a"
        }, item.before, _ref8, item.after)));

        const controller = _everCangjie.Controller.create({
          value,
          plugins
        });

        controller.run('onKeyDown', // @ts-ignore
        new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('mod+backspace')));
        const block = controller.value.document.nodes[0];
        expect(block.text).toBe(item.out);
      });
    });
    [{
      name: '删除第一个[alt+delete]',
      before: '中 ',
      after: 'en en',
      out: '中 en'
    }, {
      name: '删除第二个[alt+delete]',
      before: 'en ',
      after: 'en 中',
      out: 'en 中'
    }, {
      name: '删除全部[alt+delete]',
      before: '中 ',
      after: 'en 中',
      out: '中中'
    }].forEach(item => {
      test(item.name, async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          key: "a"
        }, item.before, _ref9, item.after)));

        const controller = _everCangjie.Controller.create({
          value,
          plugins
        });

        controller.run('onKeyDown', // @ts-ignore
        new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('mod+delete')));
        const block = controller.value.document.nodes[0];
        expect(block.text).toBe(item.out);
      });
    });
  });
  describe('others', () => {
    test('连续空格-西文', async () => {
      const value = _ref10;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', // @ts-ignore
      new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
      const block = controller.value.document.nodes[0];
      expect(block.text).toBe('en en');
      expect(controller.value.selection.anchor.offset).toBe(3);
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map