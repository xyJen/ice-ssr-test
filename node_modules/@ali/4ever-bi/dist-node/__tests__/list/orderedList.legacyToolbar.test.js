"use strict";

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _editor = require("../editor");

var _helper = require("../helper");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
function clickToolbar(container, selector) {
  const quoteBlockElement = container.querySelector(selector);

  _everDevTest.fireEvent.click(quoteBlockElement);
}

const olListData = {
  list: {
    listId: 'dn7ncrq6m7j',
    level: 0,
    isOrdered: true,
    listStyleType: 'DEC_LEN_LROM_P'
  }
};

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  data: olListData
}, "aaa"), (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  data: olListData
}, "bbb"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ccc", (0, _everDevTest.jsx)("cursor", null))));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  data: olListData
}, "aaa"), (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  data: olListData
}, "bbb"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ccc", (0, _everDevTest.jsx)("cursor", null))));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  data: olListData
}, "aaa"), (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  data: olListData
}, "bbb"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ccc"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ddd", (0, _everDevTest.jsx)("cursor", null))));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "aaa"), (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  data: olListData
}, "bbb"), (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  data: olListData
}, "ccc")));

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "aaa");

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "aaa");

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "bbb");

var _ref11 = (0, _everDevTest.jsx)("cursor", null);

var _ref12 = (0, _everDevTest.jsx)("cursor", null);

var _ref13 = (0, _everDevTest.jsx)("cursor", null);

var _ref14 = (0, _everDevTest.jsx)("cursor", null);

var _ref15 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ddd"));

var _ref16 = (0, _everDevTest.jsx)("cursor", null);

var _ref17 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ddd"));

var _ref18 = (0, _everDevTest.jsx)("cursor", null);

var _ref19 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ddd"));

var _ref20 = (0, _everDevTest.jsx)("cursor", null);

var _ref21 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "xxx ", (0, _everDevTest.jsx)("cursor", null))));

var _ref22 = (0, _everDevTest.jsx)("cursor", null);

describe('有序列表', () => {
  [{
    value: _ref
  }, {
    value: _ref2
  }].forEach(({
    value
  }, index) => {
    var _ref3 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    });

    it(`点击按钮设置为有序列表时，往前查找若存在列表，则编号从对应列表最后开始算起，case ${index + 1}`, async () => {
      const {
        container,
        content
      } = await (0, _everDevTest.renderEditor)(_ref3);
      clickToolbar(container, '[data-testid="bi-toolbar-ollist"] .splitbutton-left');
      await (0, _react.waitFor)(() => {
        const listItems = content.querySelectorAll('[data-testid=list]');
        const listItem = listItems[listItems.length - 1];
        expect(listItem?.dataset.start).toBe('3');
        expect(listItem.textContent).toBe('3.ccc');
      });
    });
  });
  it('点击按钮设置为有序列表时，往前查找若与前面列表间存在非空项，则编号从 1 开始算起', async () => {
    const value = _ref4;
    const {
      container,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));
    clickToolbar(container, '[data-testid="bi-toolbar-ollist"] .splitbutton-left');
    await (0, _react.waitFor)(() => {
      const listItems = content.querySelectorAll('[data-testid=list]');
      const listItem = listItems[listItems.length - 1];
      expect(listItem?.dataset.start).toBe('1');
      expect(listItem.textContent).toBe('1.ddd');
    });
  });
  it('点击按钮设置为有序列表时，往前查找若无列表，则往后查找，若后方存在列表，则与其合并', async () => {
    const value = _ref5;
    const {
      container,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));
    clickToolbar(container, '[data-testid="bi-toolbar-ollist"] .splitbutton-left');
    await (0, _react.waitFor)(() => {
      const listItems = content.querySelectorAll('[data-testid=list]');
      expect(listItems[0]?.dataset.start).toBe('1');
      expect(listItems[1]?.dataset.start).toBe('2');
      expect(listItems[2]?.dataset.start).toBe('3');
    });
  });
  [{
    value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref6, _ref7, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "ccc")))
  }, {
    value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref8, _ref9, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "ccc"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "ddd")))
  }].forEach(({
    value
  }, index) => {
    var _ref10 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    });

    it(`点击按钮设置为有序列表时，往前查找若无列表，则往后查找，若与后方列表间存在项，则不与其合并，case ${index + 1}`, async () => {
      const {
        container,
        content
      } = await (0, _everDevTest.renderEditor)(_ref10);
      clickToolbar(container, '[data-testid="bi-toolbar-ollist"] .splitbutton-left');
      await (0, _react.waitFor)(() => {
        const listItems = content.querySelectorAll('[data-testid=list]');
        expect(listItems[0]?.dataset.start).toBe('1');
        expect(listItems[0].textContent).toBe('1.aaa');
        expect(listItems[1]?.dataset.start).toBe('1');
        expect(listItems[2]?.dataset.start).toBe('2');
      });
    });
  });
  it('插入一项时，后续同嵌套层级的标号需要更新', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa", _ref11), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true
        }
      }
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "ccc")));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('enter')); // await wait();


    await (0, _react.waitFor)(() => {
      const listItems = content.querySelectorAll('[data-testid=list]');
      const lastItem = listItems[listItems.length - 1];
      expect(lastItem?.dataset.start).toBe('3');
      expect(lastItem.textContent).toBe('3.ccc');
      expect(listItems[0]?.dataset.start).toBe('1');
      expect(listItems[1]?.dataset.start).toBe('2');
    });
  });
  it('删除列表中间一项，后续同层级的列表序号要自动更新', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, _ref12, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "ccc")));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('backspace'));

    await (0, _react.waitFor)(() => {
      const listItems = content.querySelectorAll('[data-testid=list]');
      const lastItem = listItems[listItems.length - 1];
      expect(lastItem?.dataset.start).toBe('2');
      expect(lastItem.textContent).toBe('2.ccc');
      expect(listItems[0]?.dataset.start).toBe('1');
    });
  });
  it('删除列表中间一项，后续嵌套层级的列表序号保持不变', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, _ref13, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true
        }
      }
    }, "ccc")));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('backspace'));

    await (0, _react.waitFor)(() => {
      const listItems = content.querySelectorAll('[data-testid=list]');
      const lastItem = listItems[listItems.length - 1];
      expect(lastItem?.dataset.start).toBe('1');
      expect(lastItem.textContent).toBe('a.ccc');
      expect(listItems[0]?.dataset.start).toBe('1');
    });
  });
  it('listId 相同时，表格外编辑列表，表格内的列表序号不变', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "bb", _ref14, "b"), (0, _everDevTest.jsx)("block", {
      type: "table",
      data: {
        colsWidth: [100, 100]
      }
    }, (0, _everDevTest.jsx)("block", {
      type: "table-row"
    }, (0, _everDevTest.jsx)("block", {
      type: "table-cell"
    }, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "ccc")), _ref15))));
    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    await (0, _react.wait)();
    const listItems = content.querySelectorAll('[data-testid=list]');
    const lastItem = listItems[listItems.length - 1];
    expect(lastItem?.dataset.start).toBe('1');
    expect(lastItem.textContent).toBe('1.ccc');
    expect(listItems[0]?.dataset.start).toBe('1');
  });
  it('listId相同时，表格外列表新增一项，表格内的列表序号不变化', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa", _ref16), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "table",
      data: {
        colsWidth: [100, 100]
      }
    }, (0, _everDevTest.jsx)("block", {
      type: "table-row"
    }, (0, _everDevTest.jsx)("block", {
      type: "table-cell"
    }, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "ccc")), _ref17))));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('enter'));

    await (0, _react.wait)();
    const listItems = content.querySelectorAll('[data-testid=list]');
    const lastItem = listItems[listItems.length - 1];
    expect(lastItem?.dataset.start).toBe('1');
    expect(lastItem.textContent).toBe('1.ccc');
    expect(listItems[0]?.dataset.start).toBe('1');
  });
  it('listId相同时，表格外列表删除一项，表格内的列表序号不变化', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, _ref18, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "table",
      data: {
        colsWidth: [100, 100]
      }
    }, (0, _everDevTest.jsx)("block", {
      type: "table-row"
    }, (0, _everDevTest.jsx)("block", {
      type: "table-cell"
    }, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "ccc")), _ref19))));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('backspace'));

    await (0, _react.wait)();
    const listItems = content.querySelectorAll('[data-testid=list]');
    const lastItem = listItems[listItems.length - 1];
    expect(lastItem?.dataset.start).toBe('1');
    expect(lastItem.textContent).toBe('1.ccc');
    expect(listItems[0]?.dataset.start).toBe('1');
  });
  [{
    title: '把有序列表项改为普通段落，后续更高嵌套层级的标号需要更新',
    action: async container => {
      clickToolbar(container, '[data-testid="bi-toolbar-ollist"] .splitbutton-left');
    },
    expectedOrder: 2
  }].forEach(({
    title,
    action,
    expectedOrder
  }) => {
    it(title, async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level: 0,
            isOrdered: true
          }
        }
      }, "aaa"), (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level: 1,
            isOrdered: true
          }
        }
      }, "bbb"), (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level: 0,
            isOrdered: true
          }
        }
      }, _ref20, "ccc"), (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level: 1,
            isOrdered: true
          }
        }
      }, "ddd")));
      const {
        container,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: value
      }));
      await action(container);
      await (0, _react.waitFor)(() => {
        const listItems = content.querySelectorAll('[data-testid=list]');
        const lastItem = listItems[listItems.length - 1];
        expect(lastItem.dataset.start).toBe(`${expectedOrder}`);
        expect(lastItem.textContent).toBe('b.ddd');
      });
    });
  });
  it('同层级列表', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa")));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));
    await (0, _react.waitFor)(() => {
      const listsElement = content.querySelectorAll('[data-testid=list]');
      listsElement.forEach((list, i) => {
        const start = list?.dataset.start;
        expect(start).toBe(`${i + 1}`);
      });
    });
  });
  it('列表递增层级', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 2,
          isOrdered: true
        }
      }
    }, "aaa")));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));
    await (0, _react.waitFor)(() => {
      const listsElement = content.querySelectorAll('[data-testid=list]');
      listsElement.forEach(list => {
        const start = list?.dataset.start;
        expect(start).toBe('1');
      });
    });
  });
  it('列表递减层级', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 2,
          isOrdered: true
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true
        }
      }
    }, "aaa")));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));
    await (0, _react.waitFor)(() => {
      const listsElement = content.querySelectorAll('[data-testid=list]');
      listsElement.forEach((list, i) => {
        const start = list?.dataset.start;

        if (i > 0) {
          expect(start).toBe('2');
        } else {
          expect(start).toBe('1');
        }
      });
    });
  });
  describe('非空段落，不响应列表的插入符号', () => {
    it('非空段落，不响应列表的插入符号', async () => {
      const value = _ref21;
      const {
        content,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '*'
      });

      _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('space')); // await wait();


      await (0, _react.waitFor)(() => {
        expect(content.textContent).toEqual('xxx *');
      });
    });
    it('若不在段落第一个纯文本节点，则不响应列表的插入符号', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "link",
        data: {
          href: 'https://www.dingtalk.com'
        }
      }), _ref22)));
      const {
        content,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '*'
      });

      _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('space'));

      await (0, _react.waitFor)(() => {
        expect((0, _helper.removeInvisibleChars)(content.textContent ?? '')).toEqual('*');
      });
    });
  });
});
//# sourceMappingURL=orderedList.legacyToolbar.test.js.map