"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _everBamboo = require("@ali/4ever-bamboo");

var _react = require("@testing-library/react");

var _editor = _interopRequireDefault(require("../editor"));

/** @jsx jsx */
const {
  CANGJIE_EMPTY
} = _everCangjie.constants;
const {
  ROMAN_EXTRA_INDENT
} = _everBamboo.ListPlugin;
const {
  INDENT_SIZE
} = _everBamboo.IndentPlugin;

var _ref = (0, _everDevTest.jsx)("cursor", null);

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("cursor", null);

describe('list', () => {
  describe('有序列表', () => {
    [{
      shortcut: 'tab',
      describe: '增加',
      offset: 1
    }, {
      shortcut: 'shift+tab',
      describe: '减少',
      offset: -1
    }].forEach(({
      shortcut,
      describe,
      offset
    }) => {
      it(`光标在列表第一项，按下${shortcut}后，所有列表项ind.left${describe}一个单位距离，level不变`, async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: {
            list: {
              listId: 'dn7ncrq6m7j',
              level: 0,
              isOrdered: true,
              listStyleType: 'DEC_LEN_LROM_P'
            },
            ind: {
              left: 32
            }
          }
        }, "aaa"), (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: {
            list: {
              listId: 'dn7ncrq6m7j',
              level: 1,
              isOrdered: true,
              listStyleType: 'DEC_LEN_LROM_P'
            },
            ind: {
              left: 32
            }
          }
        }, "bbb"), (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: {
            list: {
              listId: 'dn7ncrq6m7j',
              level: 2,
              isOrdered: true,
              listStyleType: 'DEC_LEN_LROM_P'
            },
            ind: {
              left: 32
            }
          }
        }, "ccc")));
        const {
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)(shortcut));

        await (0, _react.waitFor)(() => {
          const listItems = content.querySelectorAll('[data-testid="list"]');
          listItems.forEach((item, index) => {
            const {
              paddingLeft
            } = item.style;
            expect(paddingLeft).toBe(`${INDENT_SIZE * (index + 1 + offset)}px`);
          });
        });
      });
    });
    [{
      shortcut: 'tab',
      describe: '增加',
      offset: 1,
      romanIndent: ROMAN_EXTRA_INDENT
    }, {
      shortcut: 'shift+tab',
      describe: '减少',
      offset: -1,
      romanIndent: 0
    }].forEach(({
      shortcut,
      describe,
      offset,
      romanIndent
    }) => {
      it(`光标在列表非第一项，按下${shortcut}后，当前列表项level${describe}一个单位距离，ind.left不变`, async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref2, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: {
            list: {
              listId: 'dn7ncrq6m7j',
              level: 1,
              isOrdered: true,
              listStyleType: 'DEC_LEN_LROM_P'
            }
          }
        }, "aaa")));
        const {
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)(shortcut));

        await (0, _react.waitFor)(() => {
          const listItems = content.querySelectorAll('[data-testid="list"]');
          const {
            paddingLeft
          } = listItems[0].style;
          expect(paddingLeft).toBe(`${INDENT_SIZE * (1 + offset) + romanIndent}px`);
        });
      });
    });
    [{
      type: '有序列表(小写英文 + 英文句号)',
      triggerText: 'a.',
      target: 'a.',
      selector: '[data-testid=list]'
    }, {
      type: '有序列表(小写英文 + 中文句号)',
      triggerText: 'a。',
      target: 'a.',
      selector: '[data-testid=list]'
    }, {
      type: '有序列表(大写英文 + 英文句号)',
      triggerText: 'A.',
      target: 'A.',
      selector: '[data-testid=list]'
    }, {
      type: '有序列表(大写英文 + 中文句号)',
      triggerText: 'A。',
      target: 'A.',
      selector: '[data-testid=list]'
    }, {
      type: '无序列表(+)',
      triggerText: '+',
      target: '+',
      selector: '[data-testid=list]'
    }, {
      type: '无序列表(-)',
      triggerText: '-',
      target: '‒',
      selector: '[data-testid=list]'
    }].forEach(async ({
      type,
      triggerText,
      selector,
      target
    }) => {
      var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, triggerText, _ref4)));

      it(`在 ${triggerText} 后输入空格，生成${type}`, async () => {
        const value = _ref3;
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        });

        await (0, _react.waitFor)(() => {
          const indentElement = content.querySelector(selector);
          const reg = RegExp(CANGJIE_EMPTY, 'g');
          expect(indentElement?.textContent.replace(reg, '')).toBe(target);
        });
      });
    });
  });
});
//# sourceMappingURL=interactive.test.js.map