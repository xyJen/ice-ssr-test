"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _editor = _interopRequireDefault(require("../editor"));

var _constants = require("./constants");

var _weDesignNext = require("@ali/we-design-next");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
let origin_value;
beforeAll(() => {
  origin_value = process.env.RUNTIME_ENV;
  process.env.RUNTIME_ENV = _weDesignNext.ToolbarLayout.UITEST_FLAG;
});
afterAll(() => {
  process.env.RUNTIME_ENV = origin_value;
});

function clickToolbar(container, selector) {
  const quoteBlockElement = container.querySelector(selector);

  _everDevTest.fireEvent.click(quoteBlockElement);
}

const olListData = {
  list: {
    listId: 'dn7ncrq6m7j',
    level: 0,
    isOrdered: true,
    listStyleType: 'DEC_LEN_LROM_P'
  }
};

var _ref = (0, _everDevTest.jsx)("anchor", null);

var _ref2 = (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "aaa");

var _ref3 = (0, _everDevTest.jsx)("focus", null);

describe('任务列表', () => {
  it('点击项目符号勾选，勾选正常', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          isTaskList: true,
          isChecked: false
        }
      }
    }, "aaa")));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    const checkbox = content.querySelector('.checkbox-uncheck');

    _everDevTest.fireEvent.click(checkbox);

    await (0, _react.waitFor)(() => {
      const list = content.querySelector('[data-testid=list]');
      const ischecked = list?.dataset.ischecked;
      expect(ischecked).toBe('true');
    });
  });
  it('点击项目符号取消勾选，勾选取消', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          isTaskList: true,
          isChecked: true
        }
      }
    }, "aaa")));
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    const checkbox = content.querySelector('.checkbox-checked');

    _everDevTest.fireEvent.click(checkbox);

    await (0, _react.waitFor)(() => {
      const list = content.querySelector('[data-testid=list]');
      const ischecked = list?.dataset.ischecked;
      expect(ischecked).toBe('false');
    });
  });
  it('选中序号是粗体、部分内容是粗体的列表，进行加粗，列表序号保持粗体不变', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: { ...olListData.list,
          symbolStyle: {
            bold: true
          }
        }
      }
    }, _ref, _ref2, "bbb", _ref3)));
    const {
      content,
      container
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    clickToolbar(container, '[data-testid="bi-toolbar-bold"]');
    await (0, _react.wait)();
    const listItem = content.querySelector(_constants.symbolSelector);
    expect(listItem.style['font-weight']).toBe('bold');
    clickToolbar(container, '[data-testid="bi-toolbar-bold"]');
    await (0, _react.wait)();
    expect(listItem.style['font-weight']).not.toBe('bold');
  });
});
//# sourceMappingURL=taskList.test.js.map