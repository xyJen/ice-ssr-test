"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _everPluginList = require("@ali/4ever-plugin-list");

/** @jsx jsx */
const {
  continueNumbering,
  restartNumbering,
  toggleList
} = _everPluginList.OldActions;
const {
  getListData
} = _everPluginList.OldUtils;
const {
  MIME_TYPES
} = _everCangjie.constants;
const {
  encodeFragment
} = _everCangjie.transferUtils;
const plugins = (0, _createBiPlugins.default)().array;

var _ref = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "3.", (0, _everDevTest.jsx)("cursor", null), "ccc");

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "3. ", (0, _everDevTest.jsx)("cursor", null), "ccc");

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("cursor", null);

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

describe('list', async () => {
  it('列表类型不匹配，快捷输入不转为列表', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          listStyle: {
            format: 'bullet',
            text: '\u25cf',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true,
          listStyle: {
            format: 'bullet',
            text: '\u25cb',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "bbb"), _ref));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          listStyle: {
            format: 'bullet',
            text: '\u25cf',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true,
          listStyle: {
            format: 'bullet',
            text: '\u25cb',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "bbb"), _ref2));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('space')));
    controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
      type: 'insertText',
      data: ' '
    }));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  it('任务列表选中 inline void 节点回车，列表数据不变化', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          extraData: {},
          hideSymbol: false,
          isChecked: false,
          isTaskList: true
        }
      }
    }, (0, _everDevTest.jsx)("inline", {
      type: "tag",
      data: {
        tagType: 'formula',
        width: 98,
        height: 30,
        metadata: {
          formula: 'c = a + b^2'
        }
      }
    }), _ref3, "aaa")));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          extraData: {},
          hideSymbol: false,
          isChecked: false,
          isTaskList: true
        }
      }
    }, (0, _everDevTest.jsx)("inline", {
      type: "tag",
      data: {
        tagType: 'formula',
        width: 98,
        height: 30,
        metadata: {
          formula: 'c = a + b^2'
        }
      }
    }, _ref4), "aaa")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    const actualListData = actual.document.nodes[0].data;
    const listData = expected.document.nodes[0].data;
    expect(actualListData).toEqual(listData);
  });
  [{
    type: '无序列表',
    data: {
      list: {
        listId: 'dn7ncrq6m7j',
        level: 0,
        isOrdered: false,
        listStyle: {
          format: 'bullet',
          text: '\u25cf',
          align: 'left'
        },
        listStyleType: 'SCIR_ECIR_SREC'
      }
    },
    triggerText: '[]'
  }, {
    type: '无序列表',
    triggerText: '[x]',
    data: {
      list: {
        listId: 'dn7ncrq6m7j',
        level: 0,
        isOrdered: false,
        listStyle: {
          format: 'bullet',
          text: '\u25cf',
          align: 'left'
        },
        listStyleType: 'SCIR_ECIR_SREC'
      }
    }
  }, {
    type: '有序列表',
    triggerText: '[]',
    data: {
      list: {
        listId: 'dn7ncrq6m7j',
        level: 0,
        isOrdered: true,
        listStyleType: 'DEC_LEN_LROM_P'
      }
    }
  }, {
    type: '有序列表',
    triggerText: '[x]',
    data: {
      list: {
        listId: 'dn7ncrq6m7j',
        level: 0,
        isOrdered: true,
        listStyleType: 'DEC_LEN_LROM_P'
      }
    }
  }].forEach(({
    type,
    triggerText,
    data
  }) => {
    var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: data
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, triggerText, _ref6)));

    it(`在${type}之后，生成任务列表的 listId 应该不一样`, async () => {
      const value = _ref5;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
        type: 'insertText',
        data: ' '
      }));
      const valueJSON = controller.value.toJSON();
      const {
        listId: prevListId
      } = valueJSON.document.nodes[0].data.list;
      const {
        listId
      } = valueJSON.document.nodes[1].data.list;
      expect(listId).not.toBe(prevListId);
    });
  });
});

var _ref7 = (0, _everDevTest.jsx)("cursor", null);

var _ref8 = (0, _everDevTest.jsx)("cursor", null);

describe('bi/list restartNumbering', () => {
  it('对列表非首项「重新编号」，产生历史记录，重新编号逻辑正常', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1. -> a."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, _ref7, "\u6709\u5E8F\u5217\u8868 1. -> b."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1. -> c."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 2.")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', restartNumbering());
    await (0, _everDevTest.waitForTime)(1);
    const {
      history = _everCangjie.History.create()
    } = controller.value.data;
    expect(history.undos.length).toEqual(1); // 对节点正确地重新编号

    const nodes = controller.value.document.nodes;
    expect(nodes[0].data.list.listId).toBe('a');
    expect(nodes[1].data.list.listId).toBe('a');
    expect(nodes[4].data.list.listId).toBe('a');
    expect(nodes[2].data.list.listId).not.toBe('a');
    expect(nodes[3].data.list.listId).not.toBe('a');
    expect(nodes[2].data.list.listId).toEqual(nodes[3].data.list.listId);
  });
  it('对列表首项「重新编号」，不产生历史记录', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, _ref8, "\u6709\u5E8F\u5217\u8868 1. -> a."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1. -> b."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1. -> c."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 2.")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', restartNumbering());
    await (0, _everDevTest.waitForTime)(1);
    const {
      history = _everCangjie.History.create()
    } = controller.value.data;
    expect(history.undos.length).toEqual(0);
  });
});

var _ref9 = (0, _everDevTest.jsx)("cursor", null);

var _ref10 = (0, _everDevTest.jsx)("cursor", null);

var _ref11 = (0, _everDevTest.jsx)("cursor", null);

var _ref12 = (0, _everDevTest.jsx)("cursor", null);

var _ref14 = (0, _everDevTest.jsx)("cursor", null);

var _ref15 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref17 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

describe('bi/list continueNumbering', () => {
  it('对连续的列表 首项「继续编号」，不产生历史记录', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, _ref9, "\u6709\u5E8F\u5217\u8868 1. -> a."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1. -> b."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1. -> c."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 2.")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', continueNumbering());
    await (0, _everDevTest.waitForTime)(1);
    const {
      history = _everCangjie.History.create()
    } = controller.value.data;
    expect(history.undos.length).toEqual(0);
  });
  it('对连续的列表 非首项「继续编号」，不产生历史记录', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1. -> a."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, _ref10, "\u6709\u5E8F\u5217\u8868 1. -> b."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1. -> c."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 2.")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', continueNumbering());
    await (0, _everDevTest.waitForTime)(1);
    const {
      history = _everCangjie.History.create()
    } = controller.value.data;
    expect(history.undos.length).toEqual(0);
  });
  it('对不连续的列表 中断后起始的那项「继续编号」，产生历史记录，继续编号逻辑正常', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1. -> a."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'otherID'
      })
    }, _ref11, "\u6709\u5E8F\u5217\u8868 1. -> a."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'otherID'
      })
    }, "\u6709\u5E8F\u5217\u8868 1. -> b."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 2.")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', continueNumbering());
    await (0, _everDevTest.waitForTime)(1);
    const {
      history = _everCangjie.History.create()
    } = controller.value.data;
    expect(history.undos.length).toEqual(1); // 对节点正确地继续编号

    const nodes = controller.value.document.nodes;

    for (let i = 0; i < nodes.length; i++) {
      expect(nodes[i].data.list.listId).toBe('a');
    }
  });
  it('列表内容输入1.xxx 后回车, 列表 split 后保持列表类型', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ul',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1."), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 1,
        type: 'ul',
        listStyleType: 'DEC_LEN_LROM_P',
        listId: 'a'
      })
    }, "1.xxx", _ref12)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
    const actual = controller.value.toJSON();
    const actualListData = actual.document.nodes[1].data;
    expect(Boolean(actualListData.list)).toEqual(true);
  });
  ['1.xxx', 'a.xxx', 'A.xxx'].forEach(text => {
    var _ref13 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, text, _ref14)));

    it(`普通段落中输入${text} 后回车, 转成列表类型`, async () => {
      const value = _ref13;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onKeyDown', new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      const actual = controller.value.toJSON();
      const actualListData = actual.document.nodes[1].data;
      expect(Boolean(actualListData.list)).toEqual(true);
    });
  });
  it('在空无序列表中插入无序列表, listId 自动合并', async () => {
    const ulListData = {
      list: {
        listId: 'dn7ncrq6m7j',
        level: 0,
        isOrdered: false,
        listStyleType: 'DEC_LEN_LROM_P'
      }
    };
    const toInsertListData = {
      list: {
        listId: 'aaa',
        level: 0,
        isOrdered: false,
        listStyleType: 'DEC_LEN_LROM_P'
      }
    };

    var _ref16 = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: toInsertListData
    }, "c"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: toInsertListData
    }, "d"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: toInsertListData
    }, "e"));

    [(0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: ulListData
    }, "a"), _ref15, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: ulListData
    }, "b")))].forEach(async value => {
      const fragment = _ref16;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const clipboardData = {
        [MIME_TYPES.FRAGMENT]: encodeFragment(fragment)
      };
      const event = (0, _everCangjie.CangjieClipboardEvent)('cangjiePaste', {
        clipboardData: {
          items: [// @ts-ignore
          {
            type: MIME_TYPES.FRAGMENT
          }],
          types: [MIME_TYPES.FRAGMENT],
          data: clipboardData,
          getData: format => {
            return clipboardData[format];
          }
        }
      });
      controller.run('onCangjiePaste', event);
      await (0, _everDevTest.waitForTime)(10);
      const actual = controller.value.toJSON();
      const mergedLists = actual.document.nodes.filter(n => n.data?.list?.listId === ulListData.list.listId);
      expect(mergedLists.length).toBe(5);
    });
  });
  it('普通段落转为表情列表', async () => {
    const value = _ref17;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', toggleList('ulist', '[茶]'));
    const actual = controller.value.toJSON();
    const actualData = actual?.document?.nodes[0].data;
    expect(actualData?.list.listStyle.text).toEqual('[茶]');
  });
});
//# sourceMappingURL=behaviour.test.js.map