"use strict";

var _everDevTest = require("@ali/4ever-dev-test");

var _everBamboo = require("@ali/4ever-bamboo");

var _everCangjie = require("@ali/4ever-cangjie");

/** @jsx jsx */
const {
  getListOrder,
  getListOrderDataById,
  getListOrderData
} = _everBamboo.ListPlugin;
const listOrderTestData = [{
  title: '单一列表层级一致',
  levels: [1, 1, 1],
  results: [1, 2, 3],
  steps: ['1.1', '1.2', '1.3']
}, {
  title: '单一列表层级升序',
  levels: [0, 1, 2],
  results: [1, 1, 1],
  steps: ['1', '1.1', '1.1.1']
}, {
  title: '单一列表层级降序',
  levels: [2, 1, 0],
  results: [1, 2, 2],
  steps: ['1.1.1', '1.2', '2']
}, {
  title: '单一列表层级平行升序',
  levels: [0, 1, 2, 0, 1, 2],
  results: [1, 1, 1, 2, 1, 1],
  steps: ['1', '1.1', '1.1.1', '2', '2.1', '2.1.1']
}, {
  title: '单一列表层级平行降序',
  levels: [2, 1, 0, 2, 1, 0],
  results: [1, 2, 2, 1, 2, 3],
  steps: ['1.1.1', '1.2', '2', '2.1.1', '2.2', '3']
}, {
  title: '单一列表层级先递增再递减',
  levels: [0, 1, 2, 2, 1, 0],
  results: [1, 1, 1, 2, 2, 2],
  steps: ['1', '1.1', '1.1.1', '1.1.2', '1.2', '2']
}, {
  title: '单一列表层级先递减再递增',
  levels: [2, 1, 0, 0, 1, 2],
  results: [1, 2, 2, 3, 1, 1],
  steps: ['1.1.1', '1.2', '2', '3', '3.1', '3.1.1']
}, {
  title: '负 level 数据兼容',
  levels: [-3, 1, 1],
  results: [1, 1, 2],
  steps: ['1', '1.1', '1.2']
}];
describe('列表序号计算', () => {
  listOrderTestData.forEach(({
    title,
    levels,
    results,
    steps
  }) => {
    it(`纯数字 - ${title}`, () => {
      const orderCountMap = new Map();
      let prevLevel;
      const orders = levels.map(level => {
        const start = getListOrder(level, orderCountMap, prevLevel);
        prevLevel = level;
        return start;
      });
      expect(orders).toStrictEqual(results);
    });
    it(`Block 节点 - ${title}`, () => {
      const blocks = levels.map(level => (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level,
            isOrdered: true,
            listStyleType: 'DEC_LEN_LROM_P'
          }
        }
      }, "this is item"));
      const injections = getListOrderDataById(blocks);
      injections.forEach((injection, i) => {
        expect(injection.data.start).toBe(results[i]);
        expect(injection.data.step).toBe(steps[i]);
        expect(injection.data.listId).toBe('dn7ncrq6m7j');
      });
    });
    it(`计算 injection - ${title}`, () => {
      const blocks = levels.map(level => (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level,
            isOrdered: true,
            listStyleType: 'DEC_LEN_LROM_P'
          }
        }
      }, "this is item"));
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, blocks));

      const controller = _everCangjie.Controller.create({
        value
      });

      const injections = getListOrderData(controller);
      injections.forEach((injection, i) => {
        expect(injection.data.start).toBe(results[i]);
        expect(injection.data.step).toBe(steps[i]);
        expect(injection.data.listId).toBe('dn7ncrq6m7j');
      });
    });
  });
  [{
    title: '多个同层级有序列表混合序号计算',
    data: [{
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }],
    results: [1, 1, 2, 2]
  }, {
    title: '多个不同层级有序无序列表混合序号计算',
    data: [{
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 1,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 1,
      isOrdered: true,
      isTaskList: false
    }],
    results: [1, 1, 1, 1]
  }, {
    title: '多个同层级有序无序任务列表混合序号计算',
    data: [{
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: false,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: false,
      isTaskList: true
    }],
    results: [1, 2]
  }, {
    title: '同层级 listId 相同，有序无序任务列表混合序号计算',
    data: [{
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: false,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: false,
      isTaskList: true
    }],
    results: [1, 2]
  }, {
    title: '不同层级 listId 相同，有序无序任务列表混合序号计算',
    data: [{
      listId: 'a',
      level: 1,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: false,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 1,
      isOrdered: false,
      isTaskList: true
    }],
    results: [1, 1]
  }].forEach(({
    title,
    data,
    results
  }) => {
    it(title, () => {
      const blocks = data.map(listData => (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: { ...listData,
            listStyleType: 'DEC_LEN_LROM_P'
          }
        }
      }, "this is item"));
      const injections = getListOrderDataById(blocks);
      injections.forEach(({
        data
      }, i) => {
        expect(data.start).toBe(results[i]);
      });
    });
    it(`injection - ${title}`, () => {
      const blocks = data.map(listData => (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: { ...listData,
            listStyleType: 'DEC_LEN_LROM_P'
          }
        }
      }, "this is item"));
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, blocks));

      const controller = _everCangjie.Controller.create({
        value
      });

      const injections = getListOrderData(controller);
      injections.forEach(({
        data
      }, i) => {
        expect(data.start).toBe(results[i]);
      });
    });
  });
  [{
    title: '多个同层级有序列表序号计算',
    data: [{
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'c',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'c',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }],
    listId: 'a',
    results: [1, 2, 3]
  }, {
    title: '多个同层级有序无序任务列表混合序号计算',
    data: [{
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: false,
      isTaskList: false
    }, {
      listId: 'c',
      level: 0,
      isOrdered: false,
      isTaskList: true
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: false,
      isTaskList: false
    }, {
      listId: 'c',
      level: 0,
      isOrdered: false,
      isTaskList: true
    }, {
      listId: 'a',
      level: 0,
      isOrdered: false,
      isTaskList: true
    }],
    listId: 'a',
    results: [1, 2]
  }, {
    title: '多个不同层级有序列表序号计算',
    data: [{
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 1,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 2,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 1,
      isOrdered: true,
      isTaskList: false
    }],
    listId: 'a',
    results: [1, 1, 1, 2, 1]
  }, {
    title: '多个不同层级有序无序任务列表混合序号计算',
    data: [{
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 1,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: false,
      isTaskList: true
    }, {
      listId: 'a',
      level: 2,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'b',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'c',
      level: 2,
      isOrdered: false,
      isTaskList: false
    }, {
      listId: 'a',
      level: 2,
      isOrdered: false,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 1,
      isOrdered: true,
      isTaskList: false
    }],
    listId: 'a',
    results: [1, 1, 1, 2, 1]
  }, {
    title: '非0的起始编号计算序号',
    data: [{
      listId: 'a',
      level: 0,
      start: 10,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 1,
      start: 20,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 1,
      isOrdered: false,
      isTaskList: true
    }, {
      listId: 'a',
      level: 1,
      isOrdered: true,
      isTaskList: false
    }, {
      listId: 'a',
      level: 0,
      isOrdered: true,
      isTaskList: false
    }],
    listId: 'a',
    results: [10, 11, 20, 21, 12]
  }].forEach(({
    title,
    data,
    listId,
    results
  }) => {
    it(`依据指定 id，计算对应列表序号 - ${title}`, () => {
      const blocks = data.map(listData => (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: { ...listData,
            listStyleType: 'DEC_LEN_LROM_P'
          }
        }
      }, "this is item"));
      const injections = getListOrderDataById(blocks, listId);
      injections.forEach(({
        data
      }, i) => {
        expect(data.start).toBe(results[i]);
        expect(data.listId).toBe(listId);
      });
    });
  });
});
//# sourceMappingURL=listOrder.test.js.map