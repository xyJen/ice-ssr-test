"use strict";

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _editor = require("../editor");

var _helper = require("../helper");

var _constants = require("./constants");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
function clickToolbar(container, selector) {
  const quoteBlockElement = container.querySelector(selector);

  _everDevTest.fireEvent.click(quoteBlockElement);
}

function clickTaskToolbar(container, selector) {
  const quoteBlockElement = container.querySelector(selector);

  _everDevTest.fireEvent.click(quoteBlockElement);
}

const olListData = {
  list: {
    listId: 'dn7ncrq6m7j',
    level: 0,
    isOrdered: true,
    listStyleType: 'DEC_LEN_LROM_P'
  }
};
const ulListData = {
  list: {
    listId: 'dn7ncrq6m7m',
    level: 0,
    isOrdered: false,
    listStyleType: 'SCIR_ECIR_SREC'
  }
};
const tListData = {
  list: {
    listId: 'dn7ncrq6m7n',
    level: 0,
    isOrdered: false,
    isTaskList: true
  }
};

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "*", (0, _everDevTest.jsx)("cursor", null))));

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "Hello")));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "Hello")));

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Hello", (0, _everDevTest.jsx)("focus", null))));

var _ref9 = (0, _everDevTest.jsx)("anchor", null);

var _ref10 = (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "Hello");

var _ref11 = (0, _everDevTest.jsx)("focus", null);

var _ref12 = (0, _everDevTest.jsx)("anchor", null);

var _ref13 = (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "H");

var _ref14 = (0, _everDevTest.jsx)("focus", null);

var _ref15 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), (0, _everDevTest.jsx)("m", {
  type: "underline"
}, "Hello"), (0, _everDevTest.jsx)("focus", null))));

var _ref21 = (0, _everDevTest.jsx)("cursor", null);

var _ref22 = (0, _everDevTest.jsx)("cursor", null);

var _ref24 = (0, _everDevTest.jsx)("cursor", null);

var _ref25 = (0, _everDevTest.jsx)("cursor", null);

var _ref26 = (0, _everDevTest.jsx)("cursor", null);

var _ref27 = (0, _everDevTest.jsx)("cursor", null);

var _ref28 = (0, _everDevTest.jsx)("cursor", null);

var _ref29 = (0, _everDevTest.jsx)("cursor", null);

var _ref30 = (0, _everDevTest.jsx)("cursor", null);

var _ref31 = (0, _everDevTest.jsx)("cursor", null);

describe('list', () => {
  it('在列表第一个子元素里面输入 * 然后空格，不做任何处理', async () => {
    const value = _ref;
    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: '*'
    });

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    ;
    await (0, _react.waitFor)(() => {
      const indentElement = content.querySelector('[data-testid=list]');
      const level = indentElement?.dataset.level;
      expect(level).toBe('0');
      expect(indentElement?.textContent).toBe('●* ');
    });
  });
  [{
    type: '有序列表',
    triggerText: '1.',
    selector: '[data-testid=list]',
    button: '[data-testid="bi-toolbar-ollist"] .splitbutton-left',
    data: olListData
  }, {
    type: '有序列表(中文句号)',
    triggerText: '1。',
    selector: '[data-testid=list]',
    button: '[data-testid="bi-toolbar-ollist"] .splitbutton-left',
    data: olListData
  }, {
    type: '无序列表',
    triggerText: '*',
    selector: '[data-testid=list]',
    button: '[data-testid="bi-toolbar-ullist"] .splitbutton-left',
    data: ulListData
  }, {
    type: '未选中的任务列表',
    triggerText: '[]',
    selector: '[data-testid=list]',
    button: '[data-testid="bi-toolbar-tasklist"]',
    hotKey: 'ctrl+shift+y',
    data: tListData
  }, {
    type: '选中的任务列表',
    triggerText: '[x]',
    selector: '[data-testid=list]',
    button: '[data-testid="bi-toolbar-tasklist"]',
    data: tListData
  }].forEach(({
    type,
    triggerText,
    selector,
    button,
    hotKey,
    data
  }) => {
    var _ref23 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: data
    }, "A"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: data
    }, _ref31)));

    var _ref20 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: data
    }, "A"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: data
    }, _ref30)));

    var _ref19 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, triggerText, _ref29)));

    var _ref18 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, triggerText, _ref28)));

    var _ref17 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, triggerText, _ref27)));

    var _ref16 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, triggerText, _ref26)));

    var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, triggerText, _ref25)));

    var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, triggerText, _ref24)));

    describe(type, () => {
      if (button === '[data-testid="bi-toolbar-tasklist"]') {
        it(`在 ${triggerText} 后输入空格，生成${type}，后面应该插入一行空段落`, async () => {
          const value = _ref2;
          const {
            content,
            editor
          } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
            defaultValue: value
          }));

          _everDevTest.fireEvent.cangjieInput(editor, {
            data: ' '
          });

          await (0, _react.waitFor)(() => {
            const indentElement = content.querySelector(selector);
            const isTaskList = indentElement?.dataset.istasklist;
            expect(isTaskList).toBe('true');
            const blocks = content.querySelectorAll('[data-type="paragraph"]');
            const lastBlock = blocks[blocks.length - 1];
            expect(blocks.length).toBe(2);
            expect(lastBlock.textContent).toEqual('﻿');
          });
        });
        it(`一段设置了背景色样式的文字段落，点击按钮生成${type}，checkbox 不带上背景色`, async () => {
          const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
            type: "paragraph"
          }, _ref3, (0, _everDevTest.jsx)("m", {
            type: "highlight",
            data: {
              value: '#FDBE3D'
            }
          }, "Hello"))));
          const {
            container,
            content
          } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
            defaultValue: value
          }));
          clickTaskToolbar(container, button);
          await (0, _react.waitFor)(() => {
            const symbol = content.querySelector(_constants.symbolSelector);
            expect(symbol?.style.backgroundColor).toBeUndefined();
          });
        });
        it(`点击按钮生成${type}，后面应该插入一行空段落`, async () => {
          const value = _ref4;
          const {
            container,
            content
          } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
            defaultValue: value
          }));
          clickTaskToolbar(container, button);
          await (0, _react.waitFor)(() => {
            const indentElement = content.querySelector(selector);
            const isTaskList = indentElement?.dataset.istasklist;
            expect(isTaskList).toBe('true');
            const blocks = content.querySelectorAll('[data-type="paragraph"]');
            const lastBlock = blocks[blocks.length - 1];
            expect(blocks.length).toBe(2);
            expect(lastBlock.textContent).toEqual('﻿');
          });
        });

        if (hotKey) {
          it(`使用快捷键${hotKey}设置为${type}，后面应该插入一行空段落`, async () => {
            const value = _ref5;
            const {
              editor,
              content
            } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
              defaultValue: value
            }));

            _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(hotKey));

            await (0, _react.waitFor)(() => {
              const indentElement = content.querySelector(selector);
              const isTaskList = indentElement?.dataset.istasklist;
              expect(isTaskList).toBe('true');
              const blocks = content.querySelectorAll('[data-type="paragraph"]');
              const lastBlock = blocks[blocks.length - 1];
              expect(blocks.length).toBe(2);
              expect(lastBlock.textContent).toEqual('﻿');
            });
          });
          it(`使用快捷键${hotKey}设置一段有背景色的段落为${type}，checkbox 应该也带上背景色`, async () => {
            const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
              type: "paragraph"
            }, _ref6, (0, _everDevTest.jsx)("m", {
              type: "highlight",
              data: {
                value: '#FDBE3D'
              }
            }, "Hello"))));
            const {
              editor,
              content
            } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
              defaultValue: value
            }));

            _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(hotKey));

            await (0, _react.waitFor)(() => {
              const symbol = content.querySelector(_constants.symbolSelector);
              expect(symbol?.style.backgroundColor).toBeUndefined();
            });
          });
        }
      } else {
        it(`在 ${triggerText} 后输入空格，生成${type}，后面不插入一行空段落`, async () => {
          const value = _ref7;
          const {
            content,
            editor
          } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
            defaultValue: value
          }));

          _everDevTest.fireEvent.cangjieInput(editor, {
            data: ' '
          });

          await (0, _react.waitFor)(() => {
            const indentElement = content.querySelector(selector);
            const isordered = indentElement?.dataset.isordered;
            expect(isordered).toBe(String(indentElement?.textContent === '1.﻿'));
            const blocks = content.querySelectorAll('[data-type="paragraph"]');
            expect(blocks.length).toBe(1);
          });
        });
        it(`点击按钮生成${type}，后面不插入一行空段落`, async () => {
          const value = _ref8;
          const {
            container,
            content
          } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
            defaultValue: value
          }));
          clickToolbar(container, button);
          await (0, _react.waitFor)(() => {
            const indentElement = content.querySelector(selector);
            const isordered = indentElement?.dataset.isordered;
            expect(isordered).toBe(String(indentElement?.textContent === '1.Hello'));
            const blocks = content.querySelectorAll('[data-type="paragraph"]');
            expect(blocks.length).toBe(1);
          });
        });
        it(`一段设置了加粗和字体颜色的文字段落，点击按钮生成${type}，列表序号应该也带上加粗和相同的字体颜色`, async () => {
          const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
            type: "paragraph"
          }, _ref9, (0, _everDevTest.jsx)("m", {
            type: "color",
            data: {
              value: '#FE0300'
            }
          }, _ref10), _ref11)));
          const {
            container,
            content
          } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
            defaultValue: value
          }));
          clickToolbar(container, button);
          await (0, _react.waitFor)(() => {
            const symbol = content.querySelector(_constants.symbolSelector);
            expect(symbol?.style.fontWeight).toBe('bold');
            expect(symbol?.style.color).toBe((0, _helper.hexToRgb)('#FE0300'));
          });
        });
        it(`一段分别设置了多个样式的文字段落，点击按钮生成${type}，列表序号不应该带上已设置的样式`, async () => {
          const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
            type: "paragraph"
          }, _ref12, _ref13, (0, _everDevTest.jsx)("m", {
            type: "color",
            data: {
              value: '#FE0300'
            }
          }, "e"), (0, _everDevTest.jsx)("m", {
            type: "highlight",
            data: {
              value: '#FDBE3D'
            }
          }, "llo"), _ref14)));
          const {
            container,
            content
          } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
            defaultValue: value
          }));
          clickToolbar(container, button);
          await (0, _react.waitFor)(() => {
            const symbol = content.querySelector(_constants.symbolSelector);
            expect(symbol?.style.fontWeight).toBeUndefined();
            expect(symbol?.style.color).toBeUndefined();
            expect(symbol?.style.backgroundColor).toBeUndefined();
          });
        });
        it(`一段设置了下划线样式的文字段落，点击按钮生成${type}，列表序号不应该带上下划线样式`, async () => {
          const value = _ref15;
          const {
            container,
            content
          } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
            defaultValue: value
          }));
          clickToolbar(container, button);
          await (0, _react.waitFor)(() => {
            const symbol = content.querySelector(_constants.symbolSelector);
            expect(symbol?.style.textDecorationLine).toBeUndefined();
          });
        });
      }

      it('focus 一项后，按 tab，缩进一层', async () => {
        const value = _ref16;
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        });

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

        await (0, _react.waitFor)(() => {
          const indentElement = content.querySelector(selector);
          const level = indentElement?.dataset.level;
          const isTaskList = indentElement?.dataset.istasklist;

          if (isTaskList === 'true') {
            expect(level).toBe('1');
          } else {
            expect(level).toBe('0');
          }
        });
      });
      it('focus 一项后，按 shift + tab，缩进减少一层', async () => {
        const value = _ref17;
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        });

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('shift+tab'));

        await (0, _react.waitFor)(() => {
          const indentElement = content.querySelector(selector);
          const level = indentElement?.dataset.level;
          expect(level).toBe('0');
        });
      });
      it('focus 一项后，按 Command + ]，缩进一层', async () => {
        const value = _ref18;
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        });

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('mod+]'));

        await (0, _react.waitFor)(() => {
          const indentElement = content.querySelector(selector);
          const level = indentElement?.dataset.level;
          const isTaskList = indentElement?.dataset.istasklist;

          if (isTaskList === 'true') {
            expect(level).toBe('1');
          } else {
            expect(level).toBe('0');
          }
        });
      });
      it('focus 一项后，按 Command + [，减少一层', async () => {
        const value = _ref19;
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        });

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('mod+]'));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('mod+['));

        await (0, _react.waitFor)(() => {
          const indentElement = content.querySelector(selector);
          const level = indentElement?.dataset.level;
          expect(level).toBe('0');
        });
      });
      it('在空的 list-item 里enter，缩进减少一层', async () => {
        const value = _ref20;
        const {
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('enter'));

        await (0, _react.waitFor)(() => {
          const indentElement = content.querySelector(selector);
          const level = indentElement?.dataset.level;
          expect(level).toBe('0');
        });
      });
      it('在只有AT人的 list-item 里enter，换行增加新的列表项', async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: data
        }, (0, _everDevTest.jsx)("inline", {
          type: "mention",
          data: {
            name: 'tom',
            id: '0',
            login: '0',
            avatarUrl: '0.jpg'
          }
        }), _ref21)));
        const {
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('enter'));

        await (0, _react.waitFor)(() => {
          const listItems = content.querySelectorAll(selector);
          expect(listItems.length).toBe(2);
        });
      });
      it('列表中选中 inline void 节点，按 Enter 不分裂节点', async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: data
        }, (0, _everDevTest.jsx)("inline", {
          type: "tag",
          data: {
            tagType: 'formula',
            width: 98,
            height: 30,
            metadata: {
              formula: 'c = a + b^2'
            }
          }
        }, _ref22))));
        const {
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('enter'));

        await (0, _react.wait)();
        const listItems = content.querySelectorAll(selector);
        expect(listItems.length).toBe(1);
      });
      it('在非第一项的空 list-item 里delete，缩进减少一层', async () => {
        const value = _ref23;
        const {
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('tab'));

        _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('backspace'));

        await (0, _react.waitFor)(() => {
          const indentElement = content.querySelectorAll(selector)[1];
          const level = indentElement?.dataset.level;
          expect(level).toBe('1');
        });
      });
    });
  });
});
//# sourceMappingURL=list.legacyToolbar.test.js.map