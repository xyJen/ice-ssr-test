{"version":3,"sources":["../../../../src/__tests__/list/list.legacyToolbar.test.tsx"],"names":["clickToolbar","container","selector","quoteBlockElement","querySelector","fireEvent","click","clickTaskToolbar","olListData","list","listId","level","isOrdered","listStyleType","ulListData","tListData","isTaskList","describe","it","value","content","editor","cangjieInput","data","indentElement","dataset","expect","toBe","textContent","type","triggerText","button","hotKey","forEach","istasklist","blocks","querySelectorAll","lastBlock","length","toEqual","symbol","symbolSelector","style","backgroundColor","toBeUndefined","keyDown","isordered","String","fontWeight","color","textDecorationLine","name","id","login","avatarUrl","listItems","tagType","width","height","metadata","formula"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport { Value } from '@ali/4ever-cangjie';\nimport {\n  renderEditor,\n  getHotkeyEvent,\n  fireEvent,\n  jsx,\n} from '@ali/4ever-dev-test';\nimport { waitFor, wait } from '@testing-library/react';\nimport {EditorWidthLegacyToolbar as  BiEditor} from '../editor';\nimport { hexToRgb } from '../helper';\nimport { symbolSelector } from './constants';\n\nfunction clickToolbar(container, selector) {\n  const quoteBlockElement = container.querySelector(selector);\n  fireEvent.click(quoteBlockElement);\n}\n\nfunction clickTaskToolbar(container, selector) {\n  const quoteBlockElement = container.querySelector(selector);\n  fireEvent.click(quoteBlockElement);\n}\n\nconst olListData = {\n  list: {\n    listId: 'dn7ncrq6m7j',\n    level: 0,\n    isOrdered: true,\n    listStyleType: 'DEC_LEN_LROM_P',\n  },\n};\n\nconst ulListData = {\n  list: {\n    listId: 'dn7ncrq6m7m',\n    level: 0,\n    isOrdered: false,\n    listStyleType: 'SCIR_ECIR_SREC',\n  },\n};\n\nconst tListData = {\n  list: {\n    listId: 'dn7ncrq6m7n',\n    level: 0,\n    isOrdered: false,\n    isTaskList: true,\n  },\n};\n\ndescribe('list', () => {\n  it('在列表第一个子元素里面输入 * 然后空格，不做任何处理', async () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            *<cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n    const { content, editor } = await renderEditor(\n      <BiEditor defaultValue={value} />,\n    );\n\n    fireEvent.cangjieInput(editor, { data: ' ' });\n    fireEvent.cangjieInput(editor, { data: '*' });\n    fireEvent.cangjieInput(editor, { data: ' ' });;\n    await waitFor(() => {\n      const indentElement = content.querySelector('[data-testid=list]');\n      const level = indentElement?.dataset.level;\n      expect(level).toBe('0');\n      expect(indentElement?.textContent).toBe('●* ');\n    });\n  });\n\n  [\n    {\n      type: '有序列表',\n      triggerText: '1.',\n      selector: '[data-testid=list]',\n      button: '[data-testid=\"bi-toolbar-ollist\"] .splitbutton-left',\n      data: olListData,\n    },\n    {\n      type: '有序列表(中文句号)',\n      triggerText: '1。',\n      selector: '[data-testid=list]',\n      button: '[data-testid=\"bi-toolbar-ollist\"] .splitbutton-left',\n      data: olListData,\n    },\n    {\n      type: '无序列表',\n      triggerText: '*',\n      selector: '[data-testid=list]',\n      button: '[data-testid=\"bi-toolbar-ullist\"] .splitbutton-left',\n      data: ulListData,\n    },\n    {\n      type: '未选中的任务列表',\n      triggerText: '[]',\n      selector: '[data-testid=list]',\n      button: '[data-testid=\"bi-toolbar-tasklist\"]',\n      hotKey: 'ctrl+shift+y',\n      data: tListData,\n    },\n    {\n      type: '选中的任务列表',\n      triggerText: '[x]',\n      selector: '[data-testid=list]',\n      button: '[data-testid=\"bi-toolbar-tasklist\"]',\n      data: tListData,\n    },\n  ].forEach(({ type, triggerText, selector, button, hotKey, data }) => {\n    describe(type, () => {\n      if (button === '[data-testid=\"bi-toolbar-tasklist\"]') {\n        it(`在 ${triggerText} 后输入空格，生成${type}，后面应该插入一行空段落`, async () => {\n          const value = ((\n            <value>\n              <document>\n                <block type=\"paragraph\">\n                  {triggerText}\n                  <cursor />\n                </block>\n              </document>\n            </value>\n          ) as unknown) as Value;\n          const { content, editor } = await renderEditor(\n            <BiEditor defaultValue={value} />,\n          );\n\n          fireEvent.cangjieInput(editor, { data: ' ' });\n          await waitFor(() => {\n            const indentElement = content.querySelector(selector);\n            const isTaskList = indentElement?.dataset.istasklist;\n            expect(isTaskList).toBe('true');\n\n            const blocks = content.querySelectorAll('[data-type=\"paragraph\"]');\n            const lastBlock = blocks[blocks.length - 1];\n            expect(blocks.length).toBe(2);\n            expect(lastBlock.textContent).toEqual('﻿');\n          });\n        });\n        it(`一段设置了背景色样式的文字段落，点击按钮生成${type}，checkbox 不带上背景色`, async () => {\n          const value = ((\n            <value>\n              <document>\n                <block type=\"paragraph\">\n                  <cursor />\n                  <m type=\"highlight\" data={{ value: '#FDBE3D' }}>Hello</m>\n                </block>\n              </document>\n            </value>\n          ) as unknown) as Value;\n          const { container, content } = await renderEditor(\n            <BiEditor defaultValue={value} />,\n          );\n\n          clickTaskToolbar(container, button);\n          await waitFor(() => {\n            const symbol = content.querySelector(symbolSelector);\n            expect(symbol?.style.backgroundColor).toBeUndefined();\n          });\n        });\n        it(`点击按钮生成${type}，后面应该插入一行空段落`, async () => {\n          const value = ((\n            <value>\n              <document>\n                <block type=\"paragraph\">\n                  <cursor />\n                  Hello\n                </block>\n              </document>\n            </value>\n          ) as unknown) as Value;\n          const { container, content } = await renderEditor(\n            <BiEditor defaultValue={value} />,\n          );\n\n          clickTaskToolbar(container, button);\n          await waitFor(() => {\n            const indentElement = content.querySelector(selector);\n            const isTaskList = indentElement?.dataset.istasklist;\n            expect(isTaskList).toBe('true');\n\n            const blocks = content.querySelectorAll('[data-type=\"paragraph\"]');\n            const lastBlock = blocks[blocks.length - 1];\n            expect(blocks.length).toBe(2);\n            expect(lastBlock.textContent).toEqual('﻿');\n          });\n        });\n        if (hotKey) {\n          it(`使用快捷键${hotKey}设置为${type}，后面应该插入一行空段落`, async () => {\n            const value = ((\n              <value>\n                <document>\n                  <block type=\"paragraph\">\n                    <cursor />\n                    Hello\n                  </block>\n                </document>\n              </value>\n            ) as unknown) as Value;\n            const { editor, content } = await renderEditor(\n              <BiEditor defaultValue={value} />,\n            );\n            fireEvent.keyDown(editor, getHotkeyEvent(hotKey));\n\n            await waitFor(() => {\n              const indentElement = content.querySelector(selector);\n              const isTaskList = indentElement?.dataset.istasklist;\n              expect(isTaskList).toBe('true');\n\n              const blocks = content.querySelectorAll('[data-type=\"paragraph\"]');\n              const lastBlock = blocks[blocks.length - 1];\n              expect(blocks.length).toBe(2);\n              expect(lastBlock.textContent).toEqual('﻿');\n            });\n          });\n          it(`使用快捷键${hotKey}设置一段有背景色的段落为${type}，checkbox 应该也带上背景色`, async () => {\n            const value = ((\n              <value>\n                <document>\n                  <block type=\"paragraph\">\n                    <cursor />\n                    <m type=\"highlight\" data={{ value: '#FDBE3D' }}>Hello</m>\n                  </block>\n                </document>\n              </value>\n            ) as unknown) as Value;\n            const { editor, content } = await renderEditor(\n              <BiEditor defaultValue={value} />,\n            );\n            fireEvent.keyDown(editor, getHotkeyEvent(hotKey));\n\n            await waitFor(() => {\n              const symbol = content.querySelector(symbolSelector);\n              expect(symbol?.style.backgroundColor).toBeUndefined();\n            });\n          });\n        }\n      } else {\n        it(`在 ${triggerText} 后输入空格，生成${type}，后面不插入一行空段落`, async () => {\n          const value = ((\n            <value>\n              <document>\n                <block type=\"paragraph\">\n                  {triggerText}\n                  <cursor />\n                </block>\n              </document>\n            </value>\n          ) as unknown) as Value;\n          const { content, editor } = await renderEditor(\n            <BiEditor defaultValue={value} />,\n          );\n\n          fireEvent.cangjieInput(editor, { data: ' ' });\n          await waitFor(() => {\n            const indentElement = content.querySelector(selector);\n            const isordered = indentElement?.dataset.isordered;\n            expect(isordered).toBe(\n              String(indentElement?.textContent === '1.﻿'),\n            );\n            const blocks = content.querySelectorAll('[data-type=\"paragraph\"]');\n            expect(blocks.length).toBe(1);\n          });\n        });\n        it(`点击按钮生成${type}，后面不插入一行空段落`, async () => {\n          const value = ((\n            <value>\n              <document>\n                <block type=\"paragraph\">\n                  <anchor />\n                  Hello\n                  <focus />\n                </block>\n              </document>\n            </value>\n          ) as unknown) as Value;\n          const { container, content } = await renderEditor(\n            <BiEditor defaultValue={value} />,\n          );\n\n          clickToolbar(container, button);\n          await waitFor(() => {\n            const indentElement = content.querySelector(selector);\n            const isordered = indentElement?.dataset.isordered;\n            expect(isordered).toBe(\n              String(indentElement?.textContent === '1.Hello'),\n            );\n            const blocks = content.querySelectorAll('[data-type=\"paragraph\"]');\n            expect(blocks.length).toBe(1);\n          });\n        });\n        it(`一段设置了加粗和字体颜色的文字段落，点击按钮生成${type}，列表序号应该也带上加粗和相同的字体颜色`, async () => {\n          const value = ((\n            <value>\n              <document>\n                <block type=\"paragraph\">\n                  <anchor />\n                  <m type=\"color\" data={{ value: '#FE0300' }}>\n                    <m type=\"bold\">Hello</m>\n                  </m>\n                  <focus />\n                </block>\n              </document>\n            </value>\n          ) as unknown) as Value;\n          const { container, content } = await renderEditor(\n            <BiEditor defaultValue={value} />,\n          );\n\n          clickToolbar(container, button);\n          await waitFor(() => {\n            const symbol = content.querySelector(symbolSelector);\n            expect(symbol?.style.fontWeight).toBe('bold');\n            expect(symbol?.style.color).toBe(hexToRgb('#FE0300'));\n          });\n        });\n        it(`一段分别设置了多个样式的文字段落，点击按钮生成${type}，列表序号不应该带上已设置的样式`, async () => {\n          const value = ((\n            <value>\n              <document>\n                <block type=\"paragraph\">\n                  <anchor />\n                  <m type=\"bold\">H</m>\n                  <m type=\"color\" data={{ value: '#FE0300' }}>e</m>\n                  <m type=\"highlight\" data={{ value: '#FDBE3D' }}>llo</m>\n                  <focus />\n                </block>\n              </document>\n            </value>\n          ) as unknown) as Value;\n          const { container, content } = await renderEditor(\n            <BiEditor defaultValue={value} />,\n          );\n\n          clickToolbar(container, button);\n          await waitFor(() => {\n            const symbol = content.querySelector(symbolSelector);\n            expect(symbol?.style.fontWeight).toBeUndefined();\n            expect(symbol?.style.color).toBeUndefined();\n            expect(symbol?.style.backgroundColor).toBeUndefined();\n          });\n        });\n        it(`一段设置了下划线样式的文字段落，点击按钮生成${type}，列表序号不应该带上下划线样式`, async () => {\n          const value = ((\n            <value>\n              <document>\n                <block type=\"paragraph\">\n                  <anchor />\n                  <m type=\"underline\">Hello</m>\n                  <focus />\n                </block>\n              </document>\n            </value>\n          ) as unknown) as Value;\n          const { container, content } = await renderEditor(\n            <BiEditor defaultValue={value} />,\n          );\n\n          clickToolbar(container, button);\n          await waitFor(() => {\n            const symbol = content.querySelector(symbolSelector);\n            expect(symbol?.style.textDecorationLine).toBeUndefined();\n          });\n        });\n      }\n      it('focus 一项后，按 tab，缩进一层', async () => {\n        const value = ((\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                {triggerText}\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown) as Value;\n        const { content, editor } = await renderEditor(\n          <BiEditor defaultValue={value} />,\n        );\n\n        fireEvent.cangjieInput(editor, { data: ' ' });\n        fireEvent.keyDown(content, getHotkeyEvent('tab'));\n        await waitFor(() => {\n          const indentElement = content.querySelector(selector);\n          const level = indentElement?.dataset.level;\n          const isTaskList = indentElement?.dataset.istasklist;\n          if (isTaskList === 'true') {\n            expect(level).toBe('1');\n          } else {\n            expect(level).toBe('0');\n          }\n        });\n      });\n      it('focus 一项后，按 shift + tab，缩进减少一层', async () => {\n        const value = ((\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                {triggerText}\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown) as Value;\n        const { content, editor } = await renderEditor(\n          <BiEditor defaultValue={value} />,\n        );\n\n        fireEvent.cangjieInput(editor, { data: ' ' });\n        fireEvent.keyDown(content, getHotkeyEvent('tab'));\n        fireEvent.keyDown(content, getHotkeyEvent('shift+tab'));\n        await waitFor(() => {\n          const indentElement = content.querySelector(selector);\n          const level = indentElement?.dataset.level;\n          expect(level).toBe('0');\n        });\n      });\n      it('focus 一项后，按 Command + ]，缩进一层', async () => {\n        const value = ((\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                {triggerText}\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown) as Value;\n        const { content, editor } = await renderEditor(\n          <BiEditor defaultValue={value} />,\n        );\n\n        fireEvent.cangjieInput(editor, { data: ' ' });\n        fireEvent.keyDown(content, getHotkeyEvent('mod+]'));\n        await waitFor(() => {\n          const indentElement = content.querySelector(selector);\n          const level = indentElement?.dataset.level;\n          const isTaskList = indentElement?.dataset.istasklist;\n          if (isTaskList === 'true') {\n            expect(level).toBe('1');\n          } else {\n            expect(level).toBe('0');\n          }\n        });\n      });\n      it('focus 一项后，按 Command + [，减少一层', async () => {\n        const value = ((\n          <value>\n            <document>\n              <block type=\"paragraph\">\n                {triggerText}\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown) as Value;\n        const { content, editor } = await renderEditor(\n          <BiEditor defaultValue={value} />,\n        );\n\n        fireEvent.cangjieInput(editor, { data: ' ' });\n        fireEvent.keyDown(content, getHotkeyEvent('mod+]'));\n        fireEvent.keyDown(content, getHotkeyEvent('mod+['));\n        await waitFor(() => {\n          const indentElement = content.querySelector(selector);\n          const level = indentElement?.dataset.level;\n          expect(level).toBe('0');\n        });\n      });\n      it('在空的 list-item 里enter，缩进减少一层', async () => {\n        const value = ((\n          <value>\n            <document>\n              <block type=\"paragraph\" data={data}>\n                A\n              </block>\n              <block type=\"paragraph\" data={data}>\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown) as Value;\n        const { content } = await renderEditor(\n          <BiEditor defaultValue={value} />,\n        );\n        fireEvent.keyDown(content, getHotkeyEvent('tab'));\n        fireEvent.keyDown(content, getHotkeyEvent('enter'));\n        await waitFor(() => {\n          const indentElement = content.querySelector(selector);\n          const level = indentElement?.dataset.level;\n          expect(level).toBe('0');\n        });\n      });\n      it('在只有AT人的 list-item 里enter，换行增加新的列表项', async () => {\n        const value = ((\n          <value>\n            <document>\n              <block type=\"paragraph\" data={data}>\n                <inline\n                  type=\"mention\"\n                  data={{\n                    name: 'tom',\n                    id: '0',\n                    login: '0',\n                    avatarUrl: '0.jpg',\n                  }}\n                />\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown) as Value;\n        const { content } = await renderEditor(\n          <BiEditor defaultValue={value} />,\n        );\n        fireEvent.keyDown(content, getHotkeyEvent('enter'));\n        await waitFor(() => {\n          const listItems = content.querySelectorAll(selector);\n          expect(listItems.length).toBe(2);\n        });\n      });\n      it('列表中选中 inline void 节点，按 Enter 不分裂节点', async () => {\n        const value = ((\n          <value>\n            <document>\n              <block type=\"paragraph\" data={data}>\n                <inline\n                  type=\"tag\"\n                  data={{\n                    tagType: 'formula',\n                    width: 98,\n                    height: 30,\n                    metadata: {\n                      formula: 'c = a + b^2',\n                    },\n                  }}\n                >\n                  <cursor />\n                </inline>\n              </block>\n            </document>\n          </value>\n        ) as unknown) as Value;\n        const { content } = await renderEditor(\n          <BiEditor defaultValue={value} />,\n        );\n        fireEvent.keyDown(content, getHotkeyEvent('enter'));\n\n        await wait();\n\n        const listItems = content.querySelectorAll(selector);\n        expect(listItems.length).toBe(1);\n      });\n      it('在非第一项的空 list-item 里delete，缩进减少一层', async () => {\n        const value = ((\n          <value>\n            <document>\n              <block type=\"paragraph\" data={data}>\n                A\n              </block>\n              <block type=\"paragraph\" data={data}>\n                <cursor />\n              </block>\n            </document>\n          </value>\n        ) as unknown) as Value;\n        const { content } = await renderEditor(\n          <BiEditor defaultValue={value} />,\n        );\n        fireEvent.keyDown(content, getHotkeyEvent('tab'));\n        fireEvent.keyDown(content, getHotkeyEvent('tab'));\n        fireEvent.keyDown(content, getHotkeyEvent('backspace'));\n        await waitFor(() => {\n          const indentElement = content.querySelectorAll(selector)[1];\n          const level = indentElement?.dataset.level;\n          expect(level).toBe('1');\n        });\n      });\n    });\n  });\n});\n"],"file":"list.legacyToolbar.test.js"}