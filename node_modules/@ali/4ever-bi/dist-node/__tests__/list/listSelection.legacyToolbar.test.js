"use strict";

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _editor = require("../editor");

var _constants = require("./constants");

/** @jsx jsx */
function clickToolbar(container, selector) {
  const quoteBlockElement = container.querySelector(selector);

  _everDevTest.fireEvent.click(quoteBlockElement);
}

function selectSymbol(content) {
  const listSymbol = content.querySelector(_constants.symbolSelector);

  _everDevTest.fireEvent.click(listSymbol);
}

var _ref = (0, _everDevTest.jsx)("anchor", null);

var _ref2 = (0, _everDevTest.jsx)("focus", null);

var _ref8 = (0, _everDevTest.jsx)("anchor", null);

var _ref9 = (0, _everDevTest.jsx)("focus", null);

describe('list', () => {
  describe('列表项目符号选区', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true,
          listStyleType: 'DEC_LEN_LROM_P'
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true,
          listStyleType: 'DEC_LEN_LROM_P'
        }
      }
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 2,
          isOrdered: true,
          listStyleType: 'DEC_LEN_LROM_P'
        }
      }
    }, "ccc"), _ref2));
    const selectedSymbolSelector = '.isSelected .list-symbol-overlay';

    var _ref3 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    });

    it('点击项目符号，显示选中符号选区， 点击其他地方，隐藏符号选区', async () => {
      const {
        content
      } = await (0, _everDevTest.renderEditor)(_ref3);
      selectSymbol(content);
      await (0, _react.waitFor)(() => {
        const selectedSymbol = content.querySelector(selectedSymbolSelector);
        expect(typeof selectedSymbol).toBe('object');
      });
      const listText = content.querySelector('[data-type="paragraph"]');

      _everDevTest.fireEvent.click(listText);

      await (0, _react.waitFor)(() => {
        const selectedSymbol = content.querySelector(selectedSymbolSelector);
        expect(selectedSymbol).toBe(null);
      });
    }); // TODO：框架升级到3.0后，单测不通过，暂时skip
    // 颜色选择器首次打开的时间太长，直接测试会挂掉

    var _ref4 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    });

    it('选中项目符号, 首次展开颜色选择器', async () => {
      const selector = 'bi-toolbar-highlight';
      const testId = 'overlay-bi-toolbar-highlight';
      const {
        container,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)(_ref4); // 避免选中离屏渲染的 toolbar

      const offScreenToolbarItem = container.querySelector(`[class*="OffScreen"] [data-testid="${selector}"]`);

      if (offScreenToolbarItem) {
        await (0, _react.waitForElementToBeRemoved)(offScreenToolbarItem);
      }

      await (0, _react.waitFor)(() => queryByTestId(selector));
      clickToolbar(container, `[data-testid="${selector}"] [data-testid="splitbutton-arrow-${selector}"]`);
    });

    var _ref5 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    });

    [{
      name: '背景颜色',
      selector: 'bi-toolbar-highlight',
      testId: 'overlay-bi-toolbar-highlight',
      styleName: 'backgroundColor'
    }, {
      name: '符号颜色',
      selector: 'bi-toolbar-color',
      testId: 'overlay-bi-toolbar-color',
      styleName: 'color'
    }].forEach(({
      name,
      selector,
      testId,
      styleName
    }) => {
      it(`选中项目符号，设置${name}`, async () => {
        const {
          container,
          content,
          queryByTestId,
          queryAllByTestId
        } = await (0, _everDevTest.renderEditor)(_ref5);
        await (0, _react.waitFor)(() => queryByTestId(selector));
        selectSymbol(content);
        await (0, _react.wait)();
        clickToolbar(container, `[data-testid="${selector}"] [data-testid="splitbutton-arrow-${selector}"]`);
        const colorPicker = await (0, _react.waitFor)(() => queryByTestId(testId));
        clickToolbar(colorPicker, '[color="#FEFF00"]');
        await (0, _react.wait)();
        const listSymbol = content.querySelector(_constants.symbolSelector);
        expect(listSymbol?.style[styleName]).toBe('rgb(254, 255, 0)');
      });
    });

    var _ref6 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    });

    [{
      name: '加粗',
      selector: 'bold',
      styleName: 'fontWeight'
    }, {
      name: '斜体',
      selector: 'italic',
      styleName: 'fontStyle'
    }].forEach(({
      name,
      selector,
      styleName
    }) => {
      it(`选中项目符号，一次点击${name}, 二次点击取消${name}`, async () => {
        const {
          container,
          content
        } = await (0, _everDevTest.renderEditor)(_ref6);
        const toolbarBtn = `[data-testid="bi-toolbar-${selector}"]`;
        selectSymbol(content);
        clickToolbar(container, toolbarBtn);
        await (0, _react.waitFor)(() => {
          const listSymbol = content.querySelector(_constants.symbolSelector);
          expect(listSymbol?.style[styleName]).toBe(selector);
        });
        clickToolbar(container, toolbarBtn);
        await (0, _react.waitFor)(() => {
          const listSymbol = content.querySelector(_constants.symbolSelector);
          expect(!!listSymbol?.style[styleName]).toBe(false);
        });
      });
    });

    var _ref7 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    });

    it('选中项目符号，先设置字体大小，再清除样式', async () => {
      const {
        container,
        content,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)(_ref7);
      selectSymbol(content);
      clickToolbar(container, '[data-testid="SelectWrap-bi-toolbar-sz"]');
      const fontBtn = queryByTestId('option-42');

      _everDevTest.fireEvent.click(fontBtn);

      const listSymbol = await (0, _react.waitFor)(() => {
        return content.querySelector(_constants.symbolSelector);
      });
      expect(listSymbol?.style.fontSize).toBe('42pt');
      clickToolbar(container, '[data-testid="bi-toolbar-clearstyle"]');
      await (0, _everDevTest.waitForTime)(100);
      const listItems = await (0, _react.waitFor)(() => {
        return content.querySelectorAll(_constants.symbolSelector).length;
      }); // 清除格式将清除列表属性

      await (0, _react.waitFor)(() => {
        expect(listItems).toBe(0);
      });
    });
    it('设置有序列表中部分列表项目为第三种有序列表类型后，选中项目符号，列表序号不会变化', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level: 0,
            isOrdered: true,
            listStyleType: 'DEC_LEN_LROM_P'
          }
        }
      }, "aaa"), (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level: 0,
            isOrdered: true,
            listStyleType: 'DEC_LEN_LROM_P'
          }
        }
      }, "bbb"), _ref8, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'mu7dthv6h7j',
            level: 1,
            isOrdered: true,
            listStyleType: 'DEC_DEC_DEC_P'
          }
        }
      }, "ccc"), _ref9));
      const {
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: value
      }));
      const symbol = content.querySelectorAll(_constants.symbolSelector);
      expect(symbol[2].textContent).toBe('1.1.');

      _everDevTest.fireEvent.click(symbol[2]);

      await (0, _react.wait)();
      await (0, _react.waitFor)(() => {
        const sym = content.querySelectorAll(_constants.symbolSelector);
        expect(sym[2].textContent).toBe('1.1.');
      });
    });
  });
});
//# sourceMappingURL=listSelection.legacyToolbar.test.js.map