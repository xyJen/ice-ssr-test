"use strict";

var _everBamboo = require("@ali/4ever-bamboo");

const {
  transformNumber,
  transformString
} = _everBamboo.ListPlugin;
const arabicTest = {
  name: '阿拉伯数字',
  type: 'decimal',
  data: [1, 5, 8, 11, 34, 67, 99, 105, 137, 1010101]
};
const chineseCountingTest = {
  name: '中文数字1',
  type: 'chineseCounting',
  alias: 'chinese',
  data: ['一', '五', '八', '十一', '三十四', '六十七', '九十九', '一百零五', '一百三十七', '一百零一万零一百零一']
};
const chineseCountingThousandTest = { ...chineseCountingTest,
  name: '中文数字2',
  type: 'chineseCountingThousand'
};
const lowerLetterTest = {
  name: '小写英文数字',
  type: 'lowerLetter',
  alias: 'letter',
  data: ['a', 'e', 'h', 'k', 'ah', 'bo', 'cu', 'da', 'eg', 'belfa']
};
const upperLetterTest = {
  name: '大写英文数字',
  type: 'upperLetter',
  alias: 'letter',
  data: ['A', 'E', 'H', 'K', 'AH', 'BO', 'CU', 'DA', 'EG', 'BELFA']
}; // 罗马最大

const lowerRomanTest = {
  name: '小写罗马数字',
  type: 'lowerRoman',
  alias: 'roman',
  data: ['i', 'v', 'viii', 'xi', 'xxxiv', 'lxvii', 'xcix', 'cv', 'cxxxvii', 'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmci']
};
const upperRomanTest = {
  name: '大写罗马数字',
  type: 'upperRoman',
  alias: 'roman',
  data: ['I', 'V', 'VIII', 'XI', 'XXXIV', 'LXVII', 'XCIX', 'CV', 'CXXXVII', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMCI']
};
describe('list', () => {
  [chineseCountingTest, chineseCountingThousandTest, lowerLetterTest, upperLetterTest, lowerRomanTest, upperRomanTest].forEach(({
    name,
    type,
    data,
    alias
  }) => {
    describe('有序列表数字转换', () => {
      it(`阿拉伯数字转${name}`, () => {
        arabicTest.data.forEach((num, index) => {
          expect(transformNumber(num, type)).toBe(data[index]);
        });
      });
      it(`${name}转阿拉伯数字`, () => {
        data.forEach((str, index) => {
          expect(transformString(str, alias)).toBe(arabicTest.data[index]);
        });
      });
    });
  });
});
//# sourceMappingURL=transformNumber.test.js.map