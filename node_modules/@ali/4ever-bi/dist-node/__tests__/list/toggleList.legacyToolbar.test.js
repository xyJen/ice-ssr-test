"use strict";

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _everBamboo = require("@ali/4ever-bamboo");

var _react = require("@testing-library/react");

var _editor = require("../editor");

/** @jsx jsx */
const symbolSelector = '[data-testid="symbol-wrapper"]';
const HEADING_SZ = ['heading-1', 'heading-2', 'heading-3', 'heading-4', 'paragraph'];
const {
  generateSymbol,
  mapping
} = _everBamboo.ListPlugin;
const {
  CANGJIE_EMPTY
} = _everCangjie.constants;
const DEFAULT_BULLET_LIST_ARRAY = ['SCIR_ECIR_SREC', 'SFDI_SRIG_SREC', 'EREC_EREC_EREC', 'SARR_SDIO_SCIR', 'SSTA_ECIR_SREC', 'SRIG_ECIR_SREC'];
const DEFAULT_NUMBER_LIST_ARRAY = ['DEC_LEN_LROM_P', 'DEC_LEN_LROM_H', 'DEC_DEC_DEC_P', 'UEN_LEN_LROM_P', 'UROM_UEN_DEC_P', 'DDEC_LEN_LROM_P', 'ZH_DEC_LEN_D', 'ZH_DEC_LEN_A'];

function clickToolbar(container, selector) {
  const quoteBlockElement = container.querySelector(selector);

  _everDevTest.fireEvent.click(quoteBlockElement);
}

function clickTaskToolbar(container, selector) {
  const quoteBlockElement = container.querySelector(selector);

  _everDevTest.fireEvent.click(quoteBlockElement);
}

var _ref = (0, _everDevTest.jsx)("anchor", null);

var _ref2 = (0, _everDevTest.jsx)("focus", null);

var _ref5 = (0, _everDevTest.jsx)("anchor", null);

var _ref6 = (0, _everDevTest.jsx)("focus", null);

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ccc");

var _ref11 = (0, _everDevTest.jsx)("cursor", null);

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "bbb");

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1.", (0, _everDevTest.jsx)("cursor", null));

var _ref14 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "ddd", (0, _everDevTest.jsx)("cursor", null));

var _ref15 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1.", (0, _everDevTest.jsx)("cursor", null));

var _ref17 = (0, _everDevTest.jsx)("cursor", null);

var _ref18 = (0, _everDevTest.jsx)("anchor", null);

var _ref19 = (0, _everDevTest.jsx)("focus", null);

var _ref20 = (0, _everDevTest.jsx)("anchor", null);

var _ref21 = (0, _everDevTest.jsx)("focus", null);

var _ref23 = (0, _everDevTest.jsx)("anchor", null);

var _ref24 = (0, _everDevTest.jsx)("focus", null);

var _ref25 = (0, _everDevTest.jsx)("cursor", null);

describe('list', () => {
  describe('有序列表', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true,
          listStyleType: 'DEC_LEN_LROM_P'
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true,
          listStyleType: 'DEC_LEN_LROM_P'
        }
      }
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 2,
          isOrdered: true,
          listStyleType: 'DEC_LEN_LROM_P'
        }
      }
    }, "ccc"), _ref2));
    [{
      name: '无序列表',
      type: 'ul',
      value
    }, {
      name: '有序列表',
      type: 'ol',
      value
    }].forEach(({
      value: defaultValue,
      name,
      type
    }) => {
      var _ref3 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: defaultValue
      });

      const defaultListArray = type === 'ul' ? DEFAULT_BULLET_LIST_ARRAY : DEFAULT_NUMBER_LIST_ARRAY;

      for (const enumKey of Object.keys(defaultListArray)) {
        const index = Number(enumKey);
        if (isNaN(index)) continue;
        const listStyleType = defaultListArray[index];
        it(`选中有序列表类型1 切换为 ${name + (index + 1)}`, async () => {
          const {
            container,
            content,
            queryByTestId
          } = await (0, _everDevTest.renderEditor)(_ref3);
          clickToolbar(container, `[data-testid="bi-toolbar-${type}list"] [data-testid="splitbutton-arrow-bi-toolbar-${type}list"]`);
          const listSet = queryByTestId(`overlay-bi-toolbar-${type}list`);
          const element = listSet.querySelectorAll('[role="button"]')[index];

          _everDevTest.fireEvent.click(element);

          const listItems = await (0, _react.waitFor)(() => {
            return content.querySelectorAll('[data-testid=list]');
          });
          listItems.forEach((listItem, idx) => {
            const listSymbol = listItem.querySelector(symbolSelector);
            const [format, text, align] = mapping[listStyleType][idx];
            const level = listItem?.dataset.level || 0;
            const step = `${'1.'.repeat(level)}1`;
            const result = type === 'ol' ? generateSymbol(idx, 1, step, true, listStyleType, {
              format,
              text,
              align
            }) : text;
            expect(listSymbol.textContent).toBe(result);
          });
        });
      }
    });

    var _ref4 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    });

    it('选中有序列表类型1 切换为 任务列表', async () => {
      const {
        container,
        content
      } = await (0, _everDevTest.renderEditor)(_ref4);
      clickTaskToolbar(container, '[data-testid="bi-toolbar-tasklist"]');
      await (0, _react.waitFor)(() => {
        const listItems = content.querySelectorAll('[data-testid=list]');
        listItems.forEach((listItem, index) => {
          const {
            istasklist,
            level
          } = listItem?.dataset;
          expect(istasklist).toBe('true');
          expect(level).toBe(String(index));
        });
      });
    });
  });
  describe('无序列表', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref5, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          listStyle: {
            format: 'bullet',
            text: '\u25cf',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true,
          listStyle: {
            format: 'bullet',
            text: '\u25cb',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 2,
          isOrdered: true,
          listStyle: {
            format: 'bullet',
            text: '\u25a0',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "ccc"), _ref6));
    [{
      name: '无序列表',
      type: 'ul',
      value
    }, {
      name: '有序列表',
      type: 'ol',
      value
    }].forEach(({
      value: defaultValue,
      name,
      type
    }) => {
      var _ref7 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: defaultValue
      });

      const defaultListArray = type === 'ul' ? DEFAULT_BULLET_LIST_ARRAY : DEFAULT_NUMBER_LIST_ARRAY;

      for (const enumKey of Object.keys(defaultListArray)) {
        const index = Number(enumKey);
        if (isNaN(index)) continue;
        const listStyleType = defaultListArray[index];
        it(`选中无序列表类型1 切换为 ${name + (index + 1)}`, async () => {
          const {
            container,
            content,
            queryByTestId
          } = await (0, _everDevTest.renderEditor)(_ref7);
          clickToolbar(container, `[data-testid="bi-toolbar-${type}list"] [data-testid="splitbutton-arrow-bi-toolbar-${type}list"]`);
          const listSet = queryByTestId(`overlay-bi-toolbar-${type}list`);
          const element = listSet.querySelectorAll('[role="button"]')[index];

          _everDevTest.fireEvent.click(element);

          const listItems = await (0, _react.waitFor)(() => {
            return content.querySelectorAll('[data-testid=list]');
          });
          listItems.forEach((listItem, idx) => {
            const listSymbol = listItem.querySelector(symbolSelector);
            const [format, text, align] = mapping[listStyleType][idx];
            const level = listItem?.dataset.level || 0;
            const step = `${'1.'.repeat(level)}1`;
            const result = type === 'ol' ? generateSymbol(idx, 1, step, true, listStyleType, {
              format,
              text,
              align
            }) : text;
            expect(listSymbol.textContent).toBe(result);
          });
        });
      }
    });

    var _ref8 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    });

    it('选中无序列表类型1 切换为 任务列表', async () => {
      const {
        container,
        content
      } = await (0, _everDevTest.renderEditor)(_ref8);
      clickTaskToolbar(container, '[data-testid="bi-toolbar-tasklist"]');
      await (0, _react.waitFor)(() => {
        const listItems = content.querySelectorAll('[data-testid=list]');
        listItems.forEach((listItem, index) => {
          const {
            istasklist,
            level
          } = listItem?.dataset;
          expect(istasklist).toBe('true');
          expect(level).toBe(String(index));
        });
      });
    });
  });
  describe('有序列表自动续号', () => {
    [{
      triggerText: '1.',
      order: 1,
      describe: '则重新编号'
    }, {
      triggerText: '2.',
      order: 2,
      describe: '往前遍历，若不存在列表或数字不连续，则不切换为列表'
    }, {
      triggerText: '3.',
      order: 3,
      describe: '往前遍历，若存在列表且数字连续，则自动续号'
    }].forEach(async ({
      triggerText,
      order,
      describe
    }) => {
      var _ref10 = (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, triggerText, _ref11);

      it(`在${triggerText} + 空格输入空格，${describe}`, async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: {
            list: {
              listId: 'dn7ncrq6m7j',
              level: 0,
              isOrdered: true,
              listStyle: {
                format: 'decimal',
                text: '\u25cf',
                align: 'left'
              },
              listStyleType: 'DEC_LEN_LROM_P'
            }
          }
        }, "aaa"), (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: {
            list: {
              listId: 'dn7ncrq6m7j',
              level: 0,
              isOrdered: true,
              listStyle: {
                format: 'decimal',
                text: '\u25cf',
                align: 'left'
              },
              listStyleType: 'DEC_LEN_LROM_P'
            }
          }
        }, "bbb"), _ref9, _ref10));
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        });

        await (0, _react.waitFor)(() => {
          const listItems = content.querySelectorAll('[data-testid="list"]');
          const {
            start
          } = listItems[listItems.length - 1].dataset;
          expect(start).toEqual(String(order));
        });
      });
    });
    it('在 1. xxx + 段落 之后快捷输入 1. + 空格，不自动续号', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level: 0,
            isOrdered: true,
            listStyle: {
              format: 'decimal',
              text: '\u25cf',
              align: 'left'
            },
            listStyleType: 'DEC_LEN_LROM_P'
          }
        }
      }, "aaa"), _ref12, _ref13));
      const {
        content,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: ' '
      });

      await (0, _react.waitFor)(() => {
        const listItems = content.querySelectorAll('[data-testid="list"]');
        const {
          start
        } = listItems[listItems.length - 1].dataset;
        expect(start).toEqual('1');
      });
    });
  });
  describe('有序列表自动续号', () => {
    [{
      selector: '.splitbutton-left',
      order: 1,
      describe: '往前遍历，若不存在列表或列表类型不同，则重新生成listId'
    }].forEach(async ({
      selector,
      order,
      describe
    }) => {
      it(`通过toolbar添加有序列表，${describe}`, async () => {
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: {
            list: {
              listId: 'dn7ncrq6m7j',
              level: 0,
              isOrdered: false,
              listStyle: {
                format: 'bullet',
                text: '\u25cf',
                align: 'left'
              },
              listStyleType: 'SCIR_ECIR_SREC'
            }
          }
        }, "aaa"), (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: {
            list: {
              listId: 'dn7ncrq6m7j',
              level: 0,
              isOrdered: false,
              listStyle: {
                format: 'bullet',
                text: '\u25cf',
                align: 'left'
              },
              listStyleType: 'SCIR_ECIR_SREC'
            }
          }
        }, "bbb"), (0, _everDevTest.jsx)("block", {
          type: "paragraph",
          data: {
            list: {
              listId: 'dn7ncrq6m7j',
              level: 0,
              isOrdered: false,
              listStyle: {
                format: 'bullet',
                text: '\u25cf',
                align: 'left'
              },
              listStyleType: 'SCIR_ECIR_SREC'
            }
          }
        }, "ccc"), _ref14));
        const {
          container,
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));
        clickToolbar(container, `[data-testid="bi-toolbar-ollist"] ${selector}`);
        await (0, _react.waitFor)(() => {
          const listItems = content.querySelectorAll('[data-testid="list"]');
          const {
            start
          } = listItems[listItems.length - 1].dataset;
          expect(start).toEqual(String(order));
        });
      });
    });
  });
  it('在有序列表之前快捷输入 1. + 空格, 自动续号', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref15, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true,
          listStyle: {
            format: 'decimal',
            text: '\u25cf',
            align: 'left'
          },
          listStyleType: 'DEC_LEN_LROM_P'
        }
      }
    }, "aaa")));
    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    await (0, _react.waitFor)(() => {
      const lists = content.querySelectorAll('[data-listid="dn7ncrq6m7j"]');
      expect(lists.length).toBe(2);
    });
  });
  describe('有序列表快捷输入切换列表', () => {
    [{
      type: '有序列表(数字 + 中文右括号)',
      triggerText: '1）',
      generateText: '1)',
      selector: '[data-testid=list]'
    }, {
      type: '有序列表(数字 + 英文右括号)',
      triggerText: '1)',
      generateText: '1)',
      selector: '[data-testid=list]'
    }, {
      type: '有序列表(数字 + 中文全括号)',
      triggerText: '（1）',
      generateText: '(1)',
      selector: '[data-testid=list]'
    }, {
      type: '有序列表(数字 + 英文全括号)',
      triggerText: '(1)',
      generateText: '(1)',
      selector: '[data-testid=list]'
    }, {
      type: '有序列表(数字 + 顿号)',
      triggerText: '1、',
      generateText: '1、',
      selector: '[data-testid=list]'
    }, {
      type: '有序列表(字母 + 中文右括号)',
      triggerText: 'a）',
      generateText: 'a)',
      selector: '[data-testid=list]'
    }, {
      type: '有序列表(字母 + 英文右括号)',
      triggerText: 'a)',
      generateText: 'a)',
      selector: '[data-testid=list]'
    }].forEach(({
      type,
      triggerText,
      generateText,
      selector
    }) => {
      var _ref16 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, triggerText, _ref17)));

      it(`在 ${triggerText} 后输入空格，生成${type}`, async () => {
        const value = _ref16;
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        });

        await (0, _react.waitFor)(() => {
          const indentElement = content.querySelector(selector);
          const isordered = indentElement?.dataset.isordered;
          const reg = RegExp(CANGJIE_EMPTY, 'g');
          expect(isordered).toBe(String(indentElement?.textContent.replace(reg, '') === generateText));
        });
      });
    });
  });
  describe('选中列表内容切换为标题或正文, 项目符号继承标题或正文样式', () => {
    [{
      value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref18, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level: 0,
            isOrdered: false,
            listStyle: {
              format: 'bullet',
              text: '\u25cf',
              align: 'left'
            },
            listStyleType: 'SCIR_ECIR_SREC'
          }
        }
      }, "aaa"), _ref19)),
      selectStatus: '全部'
    }, {
      value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level: 0,
            isOrdered: false,
            listStyle: {
              format: 'bullet',
              text: '\u25cf',
              align: 'left'
            },
            listStyleType: 'SCIR_ECIR_SREC'
          }
        }
      }, "aa", _ref20, "a"), _ref21)),
      selectStatus: '部分'
    }].forEach(({
      value,
      selectStatus
    }) => {
      var _ref22 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: value
      });

      for (const textType of HEADING_SZ) {
        it(`选中${selectStatus}列表内容,通过toolbar设置列表内容为${textType}类型，`, async () => {
          const {
            container,
            content,
            queryByTestId
          } = await (0, _everDevTest.renderEditor)(_ref22);
          await (0, _react.waitFor)(() => queryByTestId('SelectWrap-bi-toolbar-heading'));
          clickToolbar(container, '[data-testid="SelectWrap-bi-toolbar-heading"]');
          await (0, _react.waitFor)(() => queryByTestId('overlay-bi-toolbar-heading'));
          const headingOption = queryByTestId(`option-${textType}`);

          _everDevTest.fireEvent.click(headingOption);

          await (0, _react.wait)();
          const symbol = content.querySelector('.symbol-align-left');

          if (textType === 'paragraph') {
            // 清除字号，遵从文档默认字号
            expect(symbol.style.fontSize).toBe('');
          } else {
            expect(parseInt(symbol.style.fontSize)).toBe(_everBamboo.SzUtil.fromHeadingType(textType));
          }
        });
      }
    });
    it('符号不带样式的标题列表，切换为其他类型列表，自动继承标题的大小', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "heading-1",
        data: {
          list: {
            listId: 'dn7ncrq6m7j',
            level: 0,
            isOrdered: false,
            listStyle: {
              format: 'bullet',
              text: '\u25cf',
              align: 'left'
            },
            listStyleType: 'SCIR_ECIR_SREC'
          }
        }
      }, "aa", _ref23, "a"), _ref24));
      const {
        container,
        content,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
        defaultValue: value
      }));
      clickToolbar(container, '[data-testid="splitbutton-left-bi-toolbar-ollist"]');
      await (0, _react.wait)();
      const symbol = content.querySelector('.symbol-align-left');
      expect(symbol.style.fontSize).toBe('20pt');
    });
  });
  describe('多行列表，每一行设置不同的段落格式，取消多行列表的列表格式后，各行仍保持原有独立的段落格式', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          listStyleType: 'SCIR_ECIR_SREC'
        },
        ind: {
          hanging: 32
        }
      }
    }, _ref25, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "ccc")));

    var _ref26 = (0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: value
    });

    it('多行列表', async () => {
      const {
        container,
        content,
        queryByTestId
      } = await (0, _everDevTest.renderEditor)(_ref26); // 打开 alignment 工具栏

      const trigger = container.querySelector('[data-testid="SelectWrap-bi-toolbar-align"] > div');

      _everDevTest.fireEvent.click(trigger); // 点击对齐方式


      const btn = await (0, _react.waitFor)(() => queryByTestId('option-center'));

      _everDevTest.fireEvent.click(btn);

      const controller = _everCangjie.Controller.create({
        value
      });

      controller.command(_everCangjie.Commands.moveToRangeOfDocument);
      await (0, _react.waitFor)(() => queryByTestId('splitbutton-left-bi-toolbar-ullist'));
      clickToolbar(container, '[data-testid="splitbutton-left-bi-toolbar-ullist"]');
      const list = content.querySelectorAll('[data-type=paragraph]');
      expect(list.length).toBe(3);
      expect(list[0].style.textAlign).toBe('center');
      expect(list[1].style.textAlign).toBe('left');
      expect(list[2].style.textAlign).toBe('left');
    });
  });
});
//# sourceMappingURL=toggleList.legacyToolbar.test.js.map