{"version":3,"sources":["../../../../src/__tests__/list/listOrder.test.tsx"],"names":["getListOrder","getListOrderDataById","getListOrderData","ListPlugin","listOrderTestData","title","levels","results","steps","describe","forEach","it","orderCountMap","Map","prevLevel","orders","map","level","start","expect","toStrictEqual","blocks","list","listId","isOrdered","listStyleType","injections","injection","i","data","toBe","step","value","controller","Controller","create","isTaskList","listData"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@ali/4ever-dev-test';\nimport { ListPlugin } from '@ali/4ever-bamboo';\nimport { Node, Controller, Value } from '@ali/4ever-cangjie';\n\nconst { getListOrder, getListOrderDataById, getListOrderData } = ListPlugin;\n\nconst listOrderTestData = [\n  {\n    title: '单一列表层级一致',\n    levels: [1, 1, 1],\n    results: [1, 2, 3],\n    steps: ['1.1', '1.2', '1.3'],\n  },\n  {\n    title: '单一列表层级升序',\n    levels: [0, 1, 2],\n    results: [1, 1, 1],\n    steps: ['1', '1.1', '1.1.1'],\n  },\n  {\n    title: '单一列表层级降序',\n    levels: [2, 1, 0],\n    results: [1, 2, 2],\n    steps: ['1.1.1', '1.2', '2'],\n  },\n  {\n    title: '单一列表层级平行升序',\n    levels: [0, 1, 2, 0, 1, 2],\n    results: [1, 1, 1, 2, 1, 1],\n    steps: ['1', '1.1', '1.1.1', '2', '2.1', '2.1.1'],\n  },\n  {\n    title: '单一列表层级平行降序',\n    levels: [2, 1, 0, 2, 1, 0],\n    results: [1, 2, 2, 1, 2, 3],\n    steps: ['1.1.1', '1.2', '2', '2.1.1', '2.2', '3'],\n  },\n  {\n    title: '单一列表层级先递增再递减',\n    levels: [0, 1, 2, 2, 1, 0],\n    results: [1, 1, 1, 2, 2, 2],\n    steps: ['1', '1.1', '1.1.1', '1.1.2', '1.2', '2'],\n  },\n  {\n    title: '单一列表层级先递减再递增',\n    levels: [2, 1, 0, 0, 1, 2],\n    results: [1, 2, 2, 3, 1, 1],\n    steps: ['1.1.1', '1.2', '2', '3', '3.1', '3.1.1'],\n  },\n  {\n    title: '负 level 数据兼容',\n    levels: [-3, 1, 1],\n    results: [1, 1, 2],\n    steps: ['1', '1.1', '1.2'],\n  },\n];\n\ndescribe('列表序号计算', () => {\n  listOrderTestData.forEach(({ title, levels, results, steps }) => {\n    it(`纯数字 - ${title}`, () => {\n      const orderCountMap = new Map<number, number>();\n      let prevLevel;\n      const orders = levels.map((level) => {\n        const start = getListOrder(level, orderCountMap, prevLevel);\n        prevLevel = level;\n        return start;\n      });\n\n      expect(orders).toStrictEqual(results);\n    });\n    it(`Block 节点 - ${title}`, () => {\n      const blocks = levels.map((level) => (\n        <block\n          type=\"paragraph\"\n          data={{\n            list: {\n              listId: 'dn7ncrq6m7j',\n              level,\n              isOrdered: true,\n              listStyleType: 'DEC_LEN_LROM_P',\n            },\n          }}\n        >\n          this is item\n        </block>\n      ) as unknown as Node);\n      const injections = getListOrderDataById(blocks);\n\n      injections.forEach((injection, i) => {\n        expect(injection.data.start).toBe(results[i]);\n        expect(injection.data.step).toBe(steps[i]);\n        expect(injection.data.listId).toBe('dn7ncrq6m7j');\n      });\n    });\n    it(`计算 injection - ${title}`, () => {\n      const blocks = levels.map((level) => (\n        <block\n          type=\"paragraph\"\n          data={{\n            list: {\n              listId: 'dn7ncrq6m7j',\n              level,\n              isOrdered: true,\n              listStyleType: 'DEC_LEN_LROM_P',\n            },\n          }}\n        >\n          this is item\n        </block>\n      ) as unknown as Node);\n      const value = ((\n        <value>\n          <document>\n            { blocks }\n          </document>\n        </value>\n      ) as unknown as Value);\n\n      const controller = Controller.create({ value });\n      const injections = getListOrderData(controller);\n\n      injections.forEach((injection, i) => {\n        expect(injection.data.start).toBe(results[i]);\n        expect(injection.data.step).toBe(steps[i]);\n        expect(injection.data.listId).toBe('dn7ncrq6m7j');\n      });\n    });\n  });\n\n  [\n    {\n      title: '多个同层级有序列表混合序号计算',\n      data: [\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n      ],\n      results: [1, 1, 2, 2],\n    },\n    {\n      title: '多个不同层级有序无序列表混合序号计算',\n      data: [\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 1,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 1,\n          isOrdered: true,\n          isTaskList: false,\n        },\n      ],\n      results: [1, 1, 1, 1],\n    },\n    {\n      title: '多个同层级有序无序任务列表混合序号计算',\n      data: [\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: false,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: false,\n          isTaskList: true,\n        },\n      ],\n      results: [1, 2],\n    },\n    {\n      title: '同层级 listId 相同，有序无序任务列表混合序号计算',\n      data: [\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: false,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: false,\n          isTaskList: true,\n        },\n      ],\n      results: [1, 2],\n    },\n    {\n      title: '不同层级 listId 相同，有序无序任务列表混合序号计算',\n      data: [\n        {\n          listId: 'a',\n          level: 1,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: false,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 1,\n          isOrdered: false,\n          isTaskList: true,\n        },\n      ],\n      results: [1, 1],\n    },\n  ].forEach(({ title, data, results }) => {\n    it(title, () => {\n      const blocks = data.map((listData) => (\n        <block\n          type=\"paragraph\"\n          data={{\n            list: {\n              ...listData,\n              listStyleType: 'DEC_LEN_LROM_P',\n            },\n          }}\n        >\n          this is item\n        </block>\n      ) as unknown as Node);\n\n      const injections = getListOrderDataById(blocks);\n      injections.forEach(({ data }, i) => {\n        expect(data.start).toBe(results[i]);\n      });\n    });\n    it(`injection - ${title}`, () => {\n      const blocks = data.map((listData) => (\n        <block\n          type=\"paragraph\"\n          data={{\n            list: {\n              ...listData,\n              listStyleType: 'DEC_LEN_LROM_P',\n            },\n          }}\n        >\n          this is item\n        </block>\n      ) as unknown as Node);\n      const value = ((\n        <value>\n          <document>\n            { blocks }\n          </document>\n        </value>\n      ) as unknown as Value);\n\n      const controller = Controller.create({ value });\n      const injections = getListOrderData(controller);\n      injections.forEach(({ data }, i) => {\n        expect(data.start).toBe(results[i]);\n      });\n    });\n  });\n  [\n    {\n      title: '多个同层级有序列表序号计算',\n      data: [\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'c',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'c',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n      ],\n      listId: 'a',\n      results: [1, 2, 3],\n    },\n    {\n      title: '多个同层级有序无序任务列表混合序号计算',\n      data: [\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: false,\n          isTaskList: false,\n        },\n        {\n          listId: 'c',\n          level: 0,\n          isOrdered: false,\n          isTaskList: true,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: false,\n          isTaskList: false,\n        },\n        {\n          listId: 'c',\n          level: 0,\n          isOrdered: false,\n          isTaskList: true,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: false,\n          isTaskList: true,\n        },\n      ],\n      listId: 'a',\n      results: [1, 2],\n    },\n    {\n      title: '多个不同层级有序列表序号计算',\n      data: [\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 1,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 2,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 1,\n          isOrdered: true,\n          isTaskList: false,\n        },\n      ],\n      listId: 'a',\n      results: [1, 1, 1, 2, 1],\n    },\n    {\n      title: '多个不同层级有序无序任务列表混合序号计算',\n      data: [\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 1,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: false,\n          isTaskList: true,\n        },\n        {\n          listId: 'a',\n          level: 2,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'b',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'c',\n          level: 2,\n          isOrdered: false,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 2,\n          isOrdered: false,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 1,\n          isOrdered: true,\n          isTaskList: false,\n        },\n      ],\n      listId: 'a',\n      results: [1, 1, 1, 2, 1],\n    },\n    {\n      title: '非0的起始编号计算序号',\n      data: [\n        {\n          listId: 'a',\n          level: 0,\n          start: 10,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 1,\n          start: 20,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 1,\n          isOrdered: false,\n          isTaskList: true,\n        },\n        {\n          listId: 'a',\n          level: 1,\n          isOrdered: true,\n          isTaskList: false,\n        },\n        {\n          listId: 'a',\n          level: 0,\n          isOrdered: true,\n          isTaskList: false,\n        },\n      ],\n      listId: 'a',\n      results: [10, 11, 20, 21, 12],\n    },\n  ].forEach(({ title, data, listId, results }) => {\n    it(`依据指定 id，计算对应列表序号 - ${title}`, () => {\n      const blocks = data.map((listData) => (\n        <block\n          type=\"paragraph\"\n          data={{\n            list: {\n              ...listData,\n              listStyleType: 'DEC_LEN_LROM_P',\n            },\n          }}\n        >\n          this is item\n        </block>\n      ) as unknown as Node);\n\n      const injections = getListOrderDataById(blocks, listId);\n      injections.forEach(({ data }, i) => {\n        expect(data.start).toBe(results[i]);\n        expect(data.listId).toBe(listId);\n      });\n    });\n  });\n});"],"file":"listOrder.test.js"}