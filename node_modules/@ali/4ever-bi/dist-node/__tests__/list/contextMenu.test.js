"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _editor = _interopRequireDefault(require("../editor"));

var _everPluginList = require("@ali/4ever-plugin-list");

var _constants = require("./constants");

/** @jsx jsx */
const {
  getListData
} = _everPluginList.OldUtils;
describe('bi/list/contextMenu', () => {
  it('无序列表 contextMenu 中不包含 重新编号/继续编号 选项', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ul',
        listStyleType: 'SCIR_ECIR_SREC',
        listId: 'a'
      })
    }, "\u65E0\u5E8F\u5217\u8868 *")));
    const {
      content,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    const listSymbol = await (0, _react.waitFor)(() => content.querySelector(_constants.symbolSelector));

    _everDevTest.fireEvent.contextMenu(listSymbol); // 右键菜单是异步渲染的


    await (0, _everDevTest.waitForTime)(50);
    const restartNumbering = await queryByTestId('2-list-restart-numbering');
    const continueNumbering = await queryByTestId('2-list-continue-numbering');
    expect(restartNumbering).toBeNull();
    expect(continueNumbering).toBeNull();
  });
  it('有序列表 contextMenu 中包含 重新编号/继续编号 选项', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        level: 0,
        type: 'ol',
        listStyleType: 'SCIR_ECIR_SREC',
        listId: 'a'
      })
    }, "\u6709\u5E8F\u5217\u8868 1.")));
    const {
      content,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    const listSymbol = await (0, _react.waitFor)(() => content.querySelector(_constants.symbolSelector));

    _everDevTest.fireEvent.contextMenu(listSymbol);

    await (0, _react.waitFor)(() => expect(queryByTestId('2-list-restart-numbering')).toBeTruthy());
    await (0, _react.waitFor)(() => expect(queryByTestId('2-list-continue-numbering')).toBeTruthy());
  });
});
//# sourceMappingURL=contextMenu.test.js.map