"use strict";

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _editor = require("../editor");

/** @jsx jsx */
const plugins = (0, _editor.createBiPlugins)().array;

const getListData = data => {
  return { ...data,
    list: {
      listId: 'dn7ncrq6m7j',
      level: 1,
      isOrdered: true,
      hideSymbol: false,
      isChecked: false,
      listStyleType: 'DEC_LEN_LROM_P',
      extraData: {},
      ...data.list
    }
  };
};

var _ref = (0, _everDevTest.jsx)("cursor", null);

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("cursor", null);

var _ref5 = (0, _everDevTest.jsx)("cursor", null);

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

var _ref7 = (0, _everDevTest.jsx)("cursor", null);

var _ref8 = (0, _everDevTest.jsx)("cursor", null);

var _ref9 = (0, _everDevTest.jsx)("cursor", null);

var _ref10 = (0, _everDevTest.jsx)("cursor", null);

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "ccc");

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "ccc");

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "bbb");

var _ref14 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "eee");

describe('list', () => {
  [{
    title: '在未折叠的列表节点末尾按 Enter',
    input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }, "aaa", _ref), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb"))),
    output: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }, _ref2), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb")))
  }, {
    title: '在未折叠的列表节点内容中间按 Enter',
    input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }, "aa", _ref3, "a"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb"))),
    output: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }, "aa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }, "a", _ref4), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb")))
  }, {
    title: '在折叠的列表节点内容末尾按 Enter',
    input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: true
      })
    }, "aaa", _ref5), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb"))),
    output: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: true
      })
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }, _ref6)))
  }, {
    title: '在折叠的列表节点内容中间按 Enter',
    input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: true
      })
    }, "aa", _ref7, "a"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb"))),
    output: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: true
      })
    }, "aa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }, "a", _ref8)))
  }, {
    title: '在下个节点是空列表节点 的折叠列表节点内容结束位置按 Enter',
    input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: false
      })
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        },
        fold: true
      })
    }, "bbb", _ref9), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 2
        }
      })
    }, "ccc"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }))),
    output: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: false
      })
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        },
        fold: true
      })
    }, "bbb", _ref10), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 2
        }
      })
    }, "ccc"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    })))
  }].forEach(async ({
    title,
    input,
    output
  }) => {
    it(title, async () => {
      const controller = _everCangjie.Controller.create({
        value: input,
        plugins
      });

      controller.run('onKeyDown', new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
      const actual = controller.value.toJSON();
      const expected = controller.setValue(output).value.toJSON();
      expect(actual).toEqual(expected);
    });
  });
  [{
    title: '在前一个节点是折叠状态的列表的段落开始位置，按下 BackSpace',
    input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: true
      })
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb"), _ref11)),
    output: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: true
      })
    }, "aaaccc"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb")))
  }, {
    title: '在前一个节点是非折叠状态的列表的段落开始位置，按下 BackSpace',
    input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: false
      })
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbb"), _ref12)),
    output: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: false
      })
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "bbbccc")))
  }, {
    title: '在前一个节点是普通列表的段落开始位置，按下 BackSpace',
    input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }, "aaa"), _ref13)),
    output: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        }
      })
    }, "aaabbb")))
  }, {
    title: '在前面有多个级嵌套的列表的普通段落开始位置，按下 BackSpace',
    input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: false
      })
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        },
        fold: true
      })
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 2
        }
      })
    }, "ccc"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "ddd"), _ref14)),
    output: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 0
        },
        fold: false
      })
    }, "aaa"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        },
        fold: true
      })
    }, "bbb"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 2
        }
      })
    }, "ccc"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: getListData({
        list: {
          level: 1
        }
      })
    }, "dddeee")))
  }].forEach(async ({
    title,
    input,
    output
  }) => {
    it(title, async () => {
      const controller = _everCangjie.Controller.create({
        value: input,
        plugins
      });

      controller.run('onKeyDown', new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
      const actual = controller.value.toJSON();
      const expected = controller.setValue(output).value.toJSON();
      expect(actual).toEqual(expected);
    });
  });
});
//# sourceMappingURL=listGroupBehaviour.test.js.map