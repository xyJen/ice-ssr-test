"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _serializer = _interopRequireDefault(require("../../serializer"));

var _helper = require("../../helper");

var _editor = _interopRequireDefault(require("../../editor"));

var _everBamboo = require("@ali/4ever-bamboo");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
var _ref2 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/callout/ui', () => {
  describe('在空 paragraph 中输入 <delimitor> + enter ，插入高亮块', async () => {
    const cases = [{
      input: ':::',
      color: _everBamboo.CalloutPlugin.COLOR_MAP['warning']
    }, {
      input: '::: ',
      color: _everBamboo.CalloutPlugin.COLOR_MAP['warning']
    }, {
      input: '::: info',
      color: _everBamboo.CalloutPlugin.COLOR_MAP['info']
    }, {
      input: '::: danger',
      color: _everBamboo.CalloutPlugin.COLOR_MAP['danger']
    }, {
      input: '::: success',
      color: _everBamboo.CalloutPlugin.COLOR_MAP['success']
    }, {
      input: '::: tips',
      color: _everBamboo.CalloutPlugin.COLOR_MAP['tips']
    }, {
      input: '::: warning',
      color: _everBamboo.CalloutPlugin.COLOR_MAP['warning']
    }, {
      input: '：：: info',
      // 中英文冒号
      color: _everBamboo.CalloutPlugin.COLOR_MAP['info']
    }, {
      input: ':::      info',
      // 多个空格
      color: _everBamboo.CalloutPlugin.COLOR_MAP['info']
    }, {
      input: ':::info',
      // 无空格
      color: _everBamboo.CalloutPlugin.COLOR_MAP['info']
    }, {
      input: '::: others',
      // 不支持的类型
      color: null
    }, {
      input: '::: info~~',
      // 不支持的类型
      color: null
    }];
    cases.forEach(async ({
      input,
      color
    }) => {
      var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, input, _ref2)));

      it(`test[${input}]`, async () => {
        const value = _ref;
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('enter'));

        await (0, _everDevTest.waitForTime)(10);
        const calloutElement = await (0, _react.waitFor)(() => content.querySelector('.callout-box'));
        expect(!!calloutElement).toBe(!!color);

        if (color) {
          expect((0, _helper.removeInvisibleChars)(calloutElement?.textContent ?? '')).toBe('');
          expect(getComputedStyle(calloutElement).backgroundColor).toBe((0, _helper.hexToRgb)(color.toLowerCase()));
        }
      });
    });
  });
  it('在有内容的段落顶部输入 ::: 后回车', async () => {
    const value = _serializer.default.textToValue('hello world :::');

    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('enter'));

    await (0, _everDevTest.waitForTime)(10);
    expect(content.textContent?.trim()).toBe('hello world :::');
  });
});
//# sourceMappingURL=ui.test.js.map