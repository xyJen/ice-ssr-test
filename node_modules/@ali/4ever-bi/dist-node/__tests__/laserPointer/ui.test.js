"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

require("@testing-library/jest-dom/extend-expect");

var _react2 = require("@testing-library/react");

var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));

var _2 = require("../..");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _utils = require("../../plugins/laserPointer/utils");

var _plugins = _interopRequireDefault(require("../../plugins"));

var _laserPointer = _interopRequireDefault(require("../../plugins/laserPointer"));

var _types = require("../../plugins/laserPointer/types");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _2.createCustomizedBiPlugins)({ ..._plugins.default,
  LaserPointerPlugin: _laserPointer.default
});
const plugins = createBiPlugins().array;

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const Editor = props => {
  const {
    defaultValue,
    laserPointerConfig
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    return createBiPlugins({
      laserPointer: laserPointerConfig
    });
  }, [laserPointerConfig]);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    autoFocus: true
  }, _ref);
};

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "JavaScript")));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "JavaScript")));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "JavaScript")));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "JavaScript")));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "JavaScript")));

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "JavaScript")));

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "JavaScript")));

var _ref9 = (0, _everDevTest.jsx)("block", {
  key: "1",
  type: "paragraph"
}, "Hello World");

var _ref10 = (0, _everDevTest.jsx)("block", {
  key: "1",
  type: "paragraph"
}, "Hello World");

var _ref11 = (0, _everDevTest.jsx)("block", {
  key: "xx-1",
  type: "paragraph"
}, "Hello World");

describe('Bi/laserPointer/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  test('自定义 highlight getter/renderer', async () => {
    const value = _ref2;
    const laserPointerConfig = {
      isLaserPointerEnabled: () => true,
      getHighlightType: (node, controller) => {
        return (0, _fastDeepEqual.default)(controller.value.document.getPath(node.key), [0]) ? 'block' : null;
      },
      renderHighlight: (type, _, {
        children
      }) => {
        return type === 'block' ? (0, _everDevTest.jsx)("div", {
          "data-testid": "highlight-wrapper"
        }, children) : null;
      },
      getRole: () => _types.LaserPointerRole.HOST
    };
    const {
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      laserPointerConfig: laserPointerConfig
    }));
    const $element = await findByTestId('highlight-wrapper');
    expect($element.textContent).toBe('Hello World');
  });
  test('主持人能够高亮', async () => {
    const value = _ref3;
    const laserPointerConfig = {
      isLaserPointerEnabled: () => true,
      getHighlightType: (node, controller) => {
        return (0, _fastDeepEqual.default)(controller.value.document.getPath(node.key), [0]) ? 'block' : null;
      },
      renderHighlight: (type, highlighted, {
        children,
        highlight
      }) => {
        return type === 'block' ? (0, _everDevTest.jsx)("div", {
          "data-testid": "highlight-wrapper",
          "data-highlighted": highlighted,
          onClick: () => highlight()
        }, children) : null;
      },
      getRole: () => _types.LaserPointerRole.HOST
    };
    const {
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      laserPointerConfig: laserPointerConfig
    }));
    const $element = await findByTestId('highlight-wrapper');

    _everDevTest.fireEvent.click($element);

    await Promise.resolve();
    expect($element.dataset.highlighted).toBe('true');
  });
  test('非主持人无法高亮', async () => {
    const value = _ref4;
    const laserPointerConfig = {
      isLaserPointerEnabled: () => true,
      getHighlightType: (node, controller) => {
        return (0, _fastDeepEqual.default)(controller.value.document.getPath(node.key), [0]) ? 'block' : null;
      },
      renderHighlight: (type, highlighted, {
        children,
        highlight
      }) => {
        return type === 'block' ? (0, _everDevTest.jsx)("div", {
          "data-testid": "highlight-wrapper",
          "data-highlighted": highlighted,
          onClick: () => highlight()
        }, children) : null;
      },
      getRole: () => _types.LaserPointerRole.AUDIENCE
    };
    const {
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      laserPointerConfig: laserPointerConfig
    }));
    const $element = await findByTestId('highlight-wrapper');

    _everDevTest.fireEvent.click($element);

    await Promise.resolve();
    expect($element.dataset.highlighted).toBe('false');
  });
  test('主持人能够取消高亮', async () => {
    const value = _ref5;
    const laserPointerConfig = {
      isLaserPointerEnabled: () => true,
      getHighlightType: (node, controller) => {
        return (0, _fastDeepEqual.default)(controller.value.document.getPath(node.key), [0]) ? 'block' : null;
      },
      renderHighlight: (type, highlighted, {
        children,
        highlight,
        removeHighlight
      }) => {
        return type === 'block' ? (0, _everDevTest.jsx)("div", {
          "data-testid": "highlight-wrapper",
          "data-highlighted": highlighted,
          onClick: () => highlight()
        }, (0, _everDevTest.jsx)("button", {
          "data-testid": "remove-highlight",
          onClick: event => {
            event.stopPropagation();
            removeHighlight();
          }
        }, "\u53D6\u6D88\u9AD8\u4EAE"), children) : null;
      },
      getRole: () => _types.LaserPointerRole.HOST
    };
    const {
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      laserPointerConfig: laserPointerConfig
    }));
    const $element = await findByTestId('highlight-wrapper');

    _everDevTest.fireEvent.click($element);

    await Promise.resolve();
    expect($element.dataset.highlighted).toBe('true');
    const removeHighlightButton$ = await findByTestId('remove-highlight');

    _everDevTest.fireEvent.click(removeHighlightButton$);

    await Promise.resolve();
    expect($element.dataset.highlighted).toBe('false');
  });
  test('角色切换为主持人后，高亮可用', async () => {
    let role = _types.LaserPointerRole.AUDIENCE;
    const value = _ref6;
    const laserPointerConfig = {
      isLaserPointerEnabled: () => true,
      getHighlightType: (node, controller) => {
        return (0, _fastDeepEqual.default)(controller.value.document.getPath(node.key), [0]) ? 'block' : null;
      },
      renderHighlight: (type, highlighted, {
        children,
        highlight
      }) => {
        return type === 'block' ? (0, _everDevTest.jsx)("div", {
          "data-testid": "highlight-wrapper",
          "data-highlighted": highlighted,
          onClick: () => highlight()
        }, children) : null;
      },
      getRole: () => role
    };
    const {
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      laserPointerConfig: laserPointerConfig
    }));
    const $element = await findByTestId('highlight-wrapper');

    _everDevTest.fireEvent.click($element);

    await Promise.resolve();
    expect($element.dataset.highlighted).toBe('false');
    role = _types.LaserPointerRole.HOST;

    _everDevTest.fireEvent.click($element);

    await Promise.resolve();
    expect($element.dataset.highlighted).toBe('true');
  });
  test('角色切换为观众后，高亮不可用', async () => {
    let role = _types.LaserPointerRole.HOST;
    const value = _ref7;
    const laserPointerConfig = {
      isLaserPointerEnabled: () => true,
      getHighlightType: (node, controller) => {
        return (0, _fastDeepEqual.default)(controller.value.document.getPath(node.key), [0]) ? 'block' : null;
      },
      renderHighlight: (type, highlighted, {
        children,
        highlight,
        removeHighlight
      }) => {
        return type === 'block' ? (0, _everDevTest.jsx)("div", {
          "data-testid": "highlight-wrapper",
          "data-highlighted": highlighted,
          onClick: () => highlight()
        }, (0, _everDevTest.jsx)("button", {
          "data-testid": "remove-highlight",
          onClick: event => {
            event.stopPropagation();
            removeHighlight();
          }
        }, "\u53D6\u6D88\u9AD8\u4EAE"), children) : null;
      },
      getRole: () => role
    };
    const {
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      laserPointerConfig: laserPointerConfig
    }));
    const $element = await findByTestId('highlight-wrapper');

    _everDevTest.fireEvent.click($element);

    await Promise.resolve();
    expect($element.dataset.highlighted).toBe('true');
    const removeHighlightButton$ = await findByTestId('remove-highlight');

    _everDevTest.fireEvent.click(removeHighlightButton$);

    await Promise.resolve();
    expect($element.dataset.highlighted).toBe('false');
    role = _types.LaserPointerRole.AUDIENCE;

    _everDevTest.fireEvent.click($element);

    await Promise.resolve();
    expect($element.dataset.highlighted).toBe('false');
  });
  test('若激光笔开关不可用，则无法渲染 highlight', async () => {
    const value = _ref8;
    const laserPointerConfig = {
      isLaserPointerEnabled: () => false,
      getHighlightType: (node, controller) => {
        return (0, _fastDeepEqual.default)(controller.value.document.getPath(node.key), [0]) ? 'block' : null;
      },
      renderHighlight: (t, h, {
        children
      }) => {
        return (0, _everDevTest.jsx)("div", {
          "data-testid": "highlight-wrapper"
        }, children);
      },
      getRole: () => _types.LaserPointerRole.HOST
    };
    const {
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      laserPointerConfig: laserPointerConfig
    }));
    const $element = queryByTestId('highlight-wrapper');
    expect($element).not.toBeInTheDocument();
  });
  test('getDOMNode 应该能拿到 dom 节点', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref9, (0, _everDevTest.jsx)("block", {
      key: "3",
      type: "paragraph",
      data: {
        blockquote: true
      }
    }, "blockquote"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true,
          listStyle: {
            format: 'bullet',
            text: '\u25cb',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "bbb")));

    const Highlight = ({
      children,
      getDOMNode
    }) => {
      React.useEffect(() => {
        const dom = getDOMNode();

        if (dom) {
          dom.setAttribute('data-highlighted', 'true');
        }
      });
      return (0, _everDevTest.jsx)(React.Fragment, null, children);
    };

    const laserPointerConfig = {
      isLaserPointerEnabled: () => true,
      getHighlightType: (node, controller) => {
        return _everCangjie.Block.isBlock(node) ? 'block' : null;
      },
      renderHighlight: (type, _, {
        children,
        getDOMNode
      }) => {
        return type === 'block' ? (0, _everDevTest.jsx)(Highlight, {
          getDOMNode: getDOMNode
        }, children) : null;
      },
      getRole: () => _types.LaserPointerRole.HOST
    };
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      laserPointerConfig: laserPointerConfig
    }));
    const ele = content.querySelector('[data-cangjie-key="1"]');
    expect(ele.getAttribute('data-highlighted')).toBe('true');
    const blockquoteEle = content.querySelector('blockquote');
    expect(blockquoteEle.getAttribute('data-highlighted')).toBe('true');
    const listEle = content.querySelector('[data-listid]');
    expect(listEle.getAttribute('data-highlighted')).toBe('true');
  });
  test('根据 DOM Element 能找到最近的 node', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref10, _ref11, (0, _everDevTest.jsx)("block", {
      key: "2",
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 1,
          isOrdered: true,
          listStyle: {
            format: 'bullet',
            text: '\u25cb',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "bbb")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const laserPointerConfig = {
      isLaserPointerEnabled: () => true,
      getHighlightType: (node, controller) => {
        return (0, _fastDeepEqual.default)(controller.value.document.getPath(node.key), [0]) ? 'block' : null;
      },
      renderHighlight: (type, highlighted, {
        children,
        highlight
      }) => {
        return type === 'block' ? (0, _everDevTest.jsx)(React.Fragment, null, children) : null;
      },
      getRole: () => _types.LaserPointerRole.HOST
    };
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      laserPointerConfig: laserPointerConfig
    }));
    const $listEle = content.querySelector('[data-testid=list]');
    const listNode = (0, _utils.findClosesetBlock)($listEle, controller);
    expect(listNode).not.toBeNull();
    expect(listNode.key).toBe('2');
    const $paragraphEle = content.querySelector('[data-cangjie-key="1"]');
    const paragraphNode = (0, _utils.findClosesetBlock)($paragraphEle, controller);
    expect(paragraphNode).not.toBeNull();
    expect(paragraphNode.key).toBe('1');
    const $invalidKeyEle = content.querySelector('[data-cangjie-key="xx-1"]');
    const invalidKeyNode = (0, _utils.findClosesetBlock)($invalidKeyEle, controller);
    expect(invalidKeyNode).toBeNull();
    const $leafEle = content.querySelector('[data-cangjie-leaf="true"]');
    const leafNode = (0, _utils.findClosesetBlock)($leafEle, controller);
    expect(leafNode).not.toBeNull();
  });
});
//# sourceMappingURL=ui.test.js.map