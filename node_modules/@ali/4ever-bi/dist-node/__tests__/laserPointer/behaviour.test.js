"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _lodash = require("lodash");

var _utils = require("../../plugins/laserPointer/utils");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World")));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World")));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World")));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "JavaScript")));

describe('Bi/laserPointer/behaviour', () => {
  test('判断节点是否被高亮', () => {
    const value = _ref;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: []
    });

    const {
      document
    } = controller.value;
    const node = document.getNodeByPath([0]);
    expect((0, _utils.isHighlighted)(node.key, controller.value.injections)).toBe(false);
    controller.setInjections([_everCangjie.Injection.create({
      key: node.key,
      data: {
        laserPointer: true
      }
    })]);
    expect((0, _utils.isHighlighted)(node.key, controller.value.injections)).toBe(true);
  });
  test('通过 path 设置 highlight', () => {
    const value = _ref2;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: []
    });

    const {
      document
    } = controller.value;
    const node = document.getNodeByPath([0]);
    (0, _utils.highlightByPath)(controller, [0]);
    expect((0, _utils.isHighlighted)(node.key, controller.value.injections)).toBe(true);
  });
  test('通过 uuid 设置 highlight', () => {
    const uuid = 'hello-world-uuid';
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        __uuid__: uuid
      },
      key: "hello_word"
    }, "Hello World")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: []
    }, {
      uuid: {
        enable: true,
        gen: _lodash.uniqueId
      }
    });

    const key = controller.query('getNodeKeyByUUID', uuid);
    (0, _utils.highlightByUUID)(controller, 'hello-world-uuid');
    expect((0, _utils.isHighlighted)(key, controller.value.injections)).toBe(true);
  });
  test('取消 highlight', () => {
    const value = _ref3;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: []
    });

    const {
      document
    } = controller.value;
    const node = document.getNodeByPath([0]);
    (0, _utils.highlightByPath)(controller, [0]);
    expect((0, _utils.isHighlighted)(node.key, controller.value.injections)).toBe(true);
    (0, _utils.removeHighlight)(controller, [0]);
    expect((0, _utils.isHighlighted)(node.key, controller.value.injections)).toBe(false);
  });
  test('设置 highlight 前，取消上一个 highlight', () => {
    const value = _ref4;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: []
    });

    const {
      document
    } = controller.value;
    const first = document.getNodeByPath([0]);
    const second = document.getNodeByPath([1]);
    (0, _utils.highlightByPath)(controller, [0]);
    expect((0, _utils.isHighlighted)(first.key, controller.value.injections)).toBe(true);
    (0, _utils.highlightByPath)(controller, [1]);
    expect((0, _utils.isHighlighted)(second.key, controller.value.injections)).toBe(true);
  });
});
//# sourceMappingURL=behaviour.test.js.map