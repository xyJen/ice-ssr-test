"use strict";

var _everMo = require("@ali/4ever-mo");

var _everBamboo = require("@ali/4ever-bamboo");

var _helpers = require("../helpers");

const {
  formatColWidth
} = _everBamboo.TablePlugin.utils;
describe('table/commands/insertCol', () => {
  it('插入列后，光标 focus 在新插入列的第一个单元格', async () => {
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table: (0, _helpers.createMergeTable)(),
      tableSelection: {
        startRowIndex: 0,
        endRowIndex: 3,
        startColIndex: 1,
        endColIndex: 1
      },
      shouldAdjust: false
    });
    const table = (0, _helpers.getTableFromController)(controller);
    controller.command('insertCol', table, 2, 1);
    (0, _helpers.expectIsCollapsedInCell)(controller, 0, 2);
  });
  it('插入列后，光标 focus 在第一个非合并单元格中', async () => {
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table: (0, _helpers.createMergeTable0)(),
      tableSelection: {
        startRowIndex: 0,
        startColIndex: 1,
        endRowIndex: 3,
        endColIndex: 1
      },
      shouldAdjust: false
    });
    const table = (0, _helpers.getTableFromController)(controller);
    controller.command('insertCol', table, 1, 0);
    (0, _helpers.expectIsCollapsedInCell)(controller, 2, 1);
  });
  it.only('autofit table insert col', () => {
    const originColsWidth = [20, 30, 50];
    const table = (0, _helpers.createTableInstance)({
      table: [['A', 'B', 'C']],
      colsWidth: originColsWidth,
      isAutofit: true
    });
    const controller = (0, _helpers.createControllerInstance)([table]);
    controller.command('insertCol', table, 0, 0);
    const newTable = (0, _helpers.getTableFromController)(controller);
    expect(_everMo.Table.isAutofitWidth(newTable)).toBe(true);
    const expectColsWidth = [20, ...originColsWidth].map(w => formatColWidth(w / (100 + 20) * 100));
    expect(newTable.data.colsWidth).toEqual(expectColsWidth);
  });
});
//# sourceMappingURL=insertCol.test.js.map