"use strict";

var _everMo = require("@ali/4ever-mo");

var _everBamboo = require("@ali/4ever-bamboo");

var _helpers = require("../helpers");

var _everPluginTable = require("@ali/4ever-plugin-table");

const {
  convertFromPercentToPixel,
  convertFromPixelToPercent
} = _everBamboo.TablePlugin.utils;
describe('table/commands/resizeColsWidth', () => {
  const cases = [{
    description: 'invalid delta',
    delta: 10,
    originColsWidth: [100, 100],
    resultColsWidth: [110, 100]
  }, {
    description: 'valid delta',
    delta: null,
    originColsWidth: [100, 100],
    resultColsWidth: [100, 100]
  }];
  cases.forEach(({
    description,
    delta,
    originColsWidth,
    resultColsWidth
  }) => {
    it(description, () => {
      const table = (0, _helpers.createTableInstance)({
        colsWidth: originColsWidth
      });
      const controller = (0, _helpers.createControllerInstance)([table]);
      controller.command('resizeColsWidth', {
        node: (0, _helpers.getTableFromController)(controller),
        colIndex: 0,
        delta
      });
      const {
        colsWidth
      } = (0, _helpers.getTableFromController)(controller).data;
      expect(colsWidth).toEqual(resultColsWidth);
    });
  });
  it('autofit table, resize middle col', () => {
    const containerWidth = 200;
    const table = (0, _helpers.createTableInstance)({
      table: [['A', 'B', 'C']],
      colsWidth: [20, 30, 50],
      isAutofit: true
    });
    const controller = (0, _helpers.createControllerInstance)([table]);
    controller.command('resizeColsWidth', {
      node: (0, _helpers.getTableFromController)(controller),
      colIndex: 0,
      delta: 20,
      containerWidth
    });
    const newTable = (0, _helpers.getTableFromController)(controller);
    expect(newTable.data.colsWidth).toEqual([30, 20, 50]);
    expect(_everMo.Table.isAutofitWidth(newTable)).toBe(true);
  });
  it('autofit table, resize last col', () => {
    const originColsWidth = [20, 30, 50];
    const containerWidth = 200;
    const table = (0, _helpers.createTableInstance)({
      table: [['A', 'B', 'C']],
      colsWidth: originColsWidth,
      isAutofit: true
    });
    const controller = (0, _helpers.createControllerInstance)([table]);
    controller.command('resizeColsWidth', {
      node: (0, _helpers.getTableFromController)(controller),
      colIndex: 2,
      delta: 50,
      containerWidth
    });
    const newTable = (0, _helpers.getTableFromController)(controller);
    const pixelColsWidth = convertFromPercentToPixel(table, containerWidth);
    pixelColsWidth[2] = pixelColsWidth[2] + 50;
    expect(newTable.data.colsWidth).toEqual(pixelColsWidth);
    expect(_everMo.Table.isAutofitWidth(newTable)).toBe(false);
  });
  it('autofit table, resize to no-autofit', () => {
    const originColsWidth = [20, 50, 30];
    const containerWidth = 200;
    const table = (0, _helpers.createTableInstance)({
      table: [['A', 'B', 'C']],
      colsWidth: originColsWidth,
      isAutofit: true
    });
    const controller = (0, _helpers.createControllerInstance)([table]);
    controller.command('resizeColsWidth', {
      node: (0, _helpers.getTableFromController)(controller),
      colIndex: 1,
      delta: 50,
      containerWidth
    });
    const newTable = (0, _helpers.getTableFromController)(controller);
    const pixelColsWidth = convertFromPercentToPixel(table, containerWidth);
    pixelColsWidth[1] = pixelColsWidth[1] + 50;
    pixelColsWidth[2] = Math.max(200 * 0.3 - 50, _everPluginTable.MIN_COL_WIDTH);
    expect(newTable.data.colsWidth).toEqual(pixelColsWidth);
    expect(_everMo.Table.isAutofitWidth(newTable)).toBe(false);
  });
});
//# sourceMappingURL=resizeColsWidth.test.js.map