{"version":3,"sources":["../../../../../src/__tests__/table/commands/insertCol.test.tsx"],"names":["formatColWidth","TablePlugin","utils","describe","it","controller","table","tableSelection","startRowIndex","endRowIndex","startColIndex","endColIndex","shouldAdjust","command","only","originColsWidth","colsWidth","isAutofit","newTable","expect","Table","isAutofitWidth","toBe","expectColsWidth","map","w","data","toEqual"],"mappings":";;AAAA;;AACA;;AACA;;AAUA,MAAM;AAAEA,EAAAA;AAAF,IAAqBC,wBAAYC,KAAvC;AAEAC,QAAQ,CAAC,0BAAD,EAA6B,MAAM;AACzCC,EAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAY;AAC3C,UAAM;AAAEC,MAAAA;AAAF,QAAiB,MAAM,2BAAa;AACxCC,MAAAA,KAAK,EAAE,gCADiC;AAExCC,MAAAA,cAAc,EAAE;AACdC,QAAAA,aAAa,EAAE,CADD;AAEdC,QAAAA,WAAW,EAAE,CAFC;AAGdC,QAAAA,aAAa,EAAE,CAHD;AAIdC,QAAAA,WAAW,EAAE;AAJC,OAFwB;AAQxCC,MAAAA,YAAY,EAAE;AAR0B,KAAb,CAA7B;AAUA,UAAMN,KAAK,GAAG,qCAAuBD,UAAvB,CAAd;AACAA,IAAAA,UAAU,CAACQ,OAAX,CAAmB,WAAnB,EAAgCP,KAAhC,EAAuC,CAAvC,EAA0C,CAA1C;AACA,0CAAwBD,UAAxB,EAAoC,CAApC,EAAuC,CAAvC;AACD,GAdC,CAAF;AAgBAD,EAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAY;AAC1C,UAAM;AAAEC,MAAAA;AAAF,QAAiB,MAAM,2BAAa;AACxCC,MAAAA,KAAK,EAAE,iCADiC;AAExCC,MAAAA,cAAc,EAAE;AACdC,QAAAA,aAAa,EAAE,CADD;AAEdE,QAAAA,aAAa,EAAE,CAFD;AAGdD,QAAAA,WAAW,EAAE,CAHC;AAIdE,QAAAA,WAAW,EAAE;AAJC,OAFwB;AAQxCC,MAAAA,YAAY,EAAE;AAR0B,KAAb,CAA7B;AAUA,UAAMN,KAAK,GAAG,qCAAuBD,UAAvB,CAAd;AACAA,IAAAA,UAAU,CAACQ,OAAX,CAAmB,WAAnB,EAAgCP,KAAhC,EAAuC,CAAvC,EAA0C,CAA1C;AACA,0CAAwBD,UAAxB,EAAoC,CAApC,EAAuC,CAAvC;AACD,GAdC,CAAF;AAgBAD,EAAAA,EAAE,CAACU,IAAH,CAAQ,0BAAR,EAAoC,MAAM;AACxC,UAAMC,eAAe,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAxB;AACA,UAAMT,KAAK,GAAG,kCAAoB;AAChCA,MAAAA,KAAK,EAAE,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAD,CADyB;AAEhCU,MAAAA,SAAS,EAAED,eAFqB;AAGhCE,MAAAA,SAAS,EAAE;AAHqB,KAApB,CAAd;AAKA,UAAMZ,UAAU,GAAG,uCAAyB,CAACC,KAAD,CAAzB,CAAnB;AACAD,IAAAA,UAAU,CAACQ,OAAX,CAAmB,WAAnB,EAAgCP,KAAhC,EAAuC,CAAvC,EAA0C,CAA1C;AACA,UAAMY,QAAQ,GAAG,qCAAuBb,UAAvB,CAAjB;AACAc,IAAAA,MAAM,CAACC,cAAMC,cAAN,CAAqBH,QAArB,CAAD,CAAN,CAAuCI,IAAvC,CAA4C,IAA5C;AACA,UAAMC,eAAe,GAAG,CAAC,EAAD,EAAK,GAAGR,eAAR,EAAyBS,GAAzB,CAA6BC,CAAC,IAAIzB,cAAc,CAACyB,CAAC,IAAI,MAAM,EAAV,CAAD,GAAiB,GAAlB,CAAhD,CAAxB;AACAN,IAAAA,MAAM,CAACD,QAAQ,CAACQ,IAAT,CAAcV,SAAf,CAAN,CAAgCW,OAAhC,CAAwCJ,eAAxC;AACD,GAbD;AAcD,CA/CO,CAAR","sourcesContent":["import { Table } from '@ali/4ever-mo';\nimport { TablePlugin } from '@ali/4ever-bamboo';\nimport {\n  createEditor,\n  createMergeTable,\n  createMergeTable0,\n  expectIsCollapsedInCell,\n  getTableFromController,\n  createControllerInstance,\n  createTableInstance,\n} from '../helpers';\n\nconst { formatColWidth } = TablePlugin.utils;\n\ndescribe('table/commands/insertCol', () => {\n  it('插入列后，光标 focus 在新插入列的第一个单元格', async () => {\n    const { controller } = await createEditor({\n      table: createMergeTable(),\n      tableSelection: {\n        startRowIndex: 0,\n        endRowIndex: 3,\n        startColIndex: 1,\n        endColIndex: 1,\n      },\n      shouldAdjust: false,\n    });\n    const table = getTableFromController(controller);\n    controller.command('insertCol', table, 2, 1);\n    expectIsCollapsedInCell(controller, 0, 2);\n  });\n\n  it('插入列后，光标 focus 在第一个非合并单元格中', async () => {\n    const { controller } = await createEditor({\n      table: createMergeTable0(),\n      tableSelection: {\n        startRowIndex: 0,\n        startColIndex: 1,\n        endRowIndex: 3,\n        endColIndex: 1,\n      },\n      shouldAdjust: false,\n    });\n    const table = getTableFromController(controller);\n    controller.command('insertCol', table, 1, 0);\n    expectIsCollapsedInCell(controller, 2, 1);\n  });\n\n  it.only('autofit table insert col', () => {\n    const originColsWidth = [20, 30, 50];\n    const table = createTableInstance({\n      table: [['A', 'B', 'C']],\n      colsWidth: originColsWidth,\n      isAutofit: true,\n    });\n    const controller = createControllerInstance([table]);\n    controller.command('insertCol', table, 0, 0);\n    const newTable = getTableFromController(controller);\n    expect(Table.isAutofitWidth(newTable)).toBe(true);\n    const expectColsWidth = [20, ...originColsWidth].map(w => formatColWidth(w / (100 + 20) * 100));\n    expect(newTable.data.colsWidth).toEqual(expectColsWidth);\n  });\n});\n"],"file":"insertCol.test.js"}