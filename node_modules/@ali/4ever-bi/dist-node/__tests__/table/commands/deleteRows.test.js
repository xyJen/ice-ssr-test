"use strict";

var _everCangjie = require("@ali/4ever-cangjie");

var _helpers = require("../helpers");

const mergedCell = {
  data: {
    colSpan: 2,
    rowSpan: 2
  },
  text: '22'
};
describe('Bi: table/commands/deleteRows', () => {
  const mergeCases = [{
    desc: '删除合并单元格所在行',
    deleteRowIndex: 1,
    originMergeCellData: {
      rowSpan: 2,
      colSpan: 2
    },
    expectedMergeCellData: {
      rowSpan: 1,
      colSpan: 2
    }
  }, {
    desc: '删除 hidden 单元格所在行',
    deleteRowIndex: 2,
    originMergeCellData: {
      rowSpan: 2,
      colSpan: 2
    },
    expectedMergeCellData: {
      rowSpan: 1,
      colSpan: 2
    }
  }];
  mergeCases.forEach(({
    desc,
    deleteRowIndex,
    expectedMergeCellData
  }) => {
    it(desc, async () => {
      const {
        controller
      } = await (0, _helpers.createEditor)({
        table: (0, _helpers.createMergeTable)(),
        tableSelection: {
          startRowIndex: deleteRowIndex,
          endRowIndex: deleteRowIndex,
          startColIndex: 0,
          endColIndex: 3
        },
        shouldAdjust: false
      });
      const table = (0, _helpers.getTableFromController)(controller);
      controller.command('deleteRows', table);
      const mergeTd = controller.value.document.findDescendant(el => {
        return el.type === 'table-cell' && (el.data.colSpan > 1 || el.data.rowSpan > 1);
      });
      expect(mergeTd.data.rowSpan).toBe(expectedMergeCellData.rowSpan);
      expect(mergeTd.data.colSpan).toBe(expectedMergeCellData.colSpan);
    });
  });
  describe('不规整表格删除行', () => {
    it('删除最后一行，该行存在单元格 rowSpan > 1，可以正常删除行', async () => {
      const {
        controller
      } = await (0, _helpers.createEditor)({
        table: (0, _helpers.createTableInstance)({
          table: [['A', 'B'], [mergedCell, 'D']]
        })
      });
      const {
        selection
      } = controller.value;
      const table = (0, _helpers.getTableFromController)(controller);
      const lastCell = table.nodes[1].nodes[1];
      const newSelection = selection.moveToRangeOfNode(lastCell, controller);
      controller.command(_everCangjie.Commands.select, newSelection);
      controller.command('deleteRows', table); // expect(() => controller.command('deleteRows', table)).not.toThrowError();

      const newTable = (0, _helpers.getTableFromController)(controller);
      expect(newTable.nodes.length).toBe(1);
    });
  });
});
//# sourceMappingURL=deleteRows.test.js.map