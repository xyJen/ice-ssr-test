{"version":3,"sources":["../../../../../src/__tests__/table/commands/resizeColsWidth.test.ts"],"names":["convertFromPercentToPixel","convertFromPixelToPercent","TablePlugin","utils","describe","cases","description","delta","originColsWidth","resultColsWidth","forEach","it","table","colsWidth","controller","command","node","colIndex","data","expect","toEqual","containerWidth","isAutofit","newTable","Table","isAutofitWidth","toBe","pixelColsWidth","Math","max","MIN_COL_WIDTH"],"mappings":"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","sourcesContent":["import { Table } from '@ali/4ever-mo';\nimport { TablePlugin } from '@ali/4ever-bamboo';\nimport { createControllerInstance, createTableInstance, getTableFromController } from '../helpers';\nimport { MIN_COL_WIDTH } from '@ali/4ever-plugin-table';\n\nconst {\n  convertFromPercentToPixel,\n  convertFromPixelToPercent,\n} = TablePlugin.utils;\n\ninterface CaseType {\n  description: string;\n  delta: any;\n  originColsWidth: number[];\n  resultColsWidth: number[];\n}\n\ndescribe('table/commands/resizeColsWidth', () => {\n  const cases: CaseType[] = [{\n    description: 'invalid delta',\n    delta: 10,\n    originColsWidth: [100, 100],\n    resultColsWidth: [110, 100],\n  }, {\n    description: 'valid delta',\n    delta: null,\n    originColsWidth: [100, 100],\n    resultColsWidth: [100, 100],\n  }];\n\n  cases.forEach(({ description, delta, originColsWidth,resultColsWidth }) => {\n    it(description, () => {\n      const table = createTableInstance({\n        colsWidth: originColsWidth,\n      });\n      const controller = createControllerInstance([table]);\n      controller.command('resizeColsWidth', {\n        node: getTableFromController(controller),\n        colIndex: 0,\n        delta,\n      });\n      const { colsWidth } = getTableFromController(controller).data;\n      expect(colsWidth).toEqual(resultColsWidth);\n    });\n  });\n\n  it('autofit table, resize middle col', () => {\n    const containerWidth = 200;\n    const table = createTableInstance({\n      table: [['A', 'B', 'C']],\n      colsWidth: [20, 30, 50],\n      isAutofit: true,\n    });\n    const controller = createControllerInstance([table]);\n    controller.command('resizeColsWidth', {\n      node: getTableFromController(controller),\n      colIndex: 0,\n      delta: 20,\n      containerWidth,\n    });\n    const newTable = getTableFromController(controller);\n    expect(newTable.data.colsWidth).toEqual([30, 20, 50]);\n    expect(Table.isAutofitWidth(newTable)).toBe(true);\n  });\n\n  it('autofit table, resize last col', () => {\n    const originColsWidth = [20, 30, 50];\n    const containerWidth = 200;\n    const table = createTableInstance({\n      table: [['A', 'B', 'C']],\n      colsWidth: originColsWidth,\n      isAutofit: true,\n    });\n    const controller = createControllerInstance([table]);\n    controller.command('resizeColsWidth', {\n      node: getTableFromController(controller),\n      colIndex: 2,\n      delta: 50,\n      containerWidth,\n    });\n    const newTable = getTableFromController(controller);\n    const pixelColsWidth = convertFromPercentToPixel(table, containerWidth);\n    pixelColsWidth[2] = pixelColsWidth[2] + 50;\n    expect(newTable.data.colsWidth).toEqual(pixelColsWidth);\n    expect(Table.isAutofitWidth(newTable)).toBe(false);\n  });\n\n  it('autofit table, resize to no-autofit', () => {\n    const originColsWidth = [20, 50, 30];\n    const containerWidth = 200;\n    const table = createTableInstance({\n      table: [['A', 'B', 'C']],\n      colsWidth: originColsWidth,\n      isAutofit: true,\n    });\n    const controller = createControllerInstance([table]);\n    controller.command('resizeColsWidth', {\n      node: getTableFromController(controller),\n      colIndex: 1,\n      delta: 50,\n      containerWidth,\n    });\n    const newTable = getTableFromController(controller);\n    const pixelColsWidth = convertFromPercentToPixel(table, containerWidth);\n    pixelColsWidth[1] = pixelColsWidth[1] + 50;\n    pixelColsWidth[2] = Math.max(200 * 0.3 - 50, MIN_COL_WIDTH);\n    expect(newTable.data.colsWidth).toEqual(pixelColsWidth);\n    expect(Table.isAutofitWidth(newTable)).toBe(false);\n  });\n});\n\n"],"file":"resizeColsWidth.test.js"}