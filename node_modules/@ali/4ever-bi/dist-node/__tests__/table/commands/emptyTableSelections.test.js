"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

var _everPluginTable = require("@ali/4ever-plugin-table");

var _editor = _interopRequireDefault(require("../../editor"));

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "table",
  key: "table"
}, (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null, "A"))), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), (0, _everDevTest.jsx)("text", null, "B"))), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null, "C"), (0, _everDevTest.jsx)("focus", null)))))));

describe('table/utils/emptyTableSelection', () => {
  it('清空表格选区后，光标位置正常', async () => {
    const value = _ref;
    const controllerRef = jest.fn();
    await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    const t = controller.value.document.getNode('table');
    (0, _everPluginTable.setTableColsWidth)(controller, t, [100, 100, 100]);
    const table = controller.value.document.getNode('table');
    const resultController = controller.command('emptyTableSelection', table); // 期望 tableSlection 被清空

    const actualTbSelection = controller.query('tableSelection');
    expect(actualTbSelection).toEqual(null);
    const newSelection = resultController.value.selection;
    const newSelectionKey = newSelection.isCollapsed && newSelection.anchor.key;
    const selectionpath = resultController.value.document.getPath(newSelectionKey); // 期望光标落在第二个单元格内

    expect(selectionpath).toEqual([0, 0, 1, 0, 0]);
  });
});
//# sourceMappingURL=emptyTableSelections.test.js.map