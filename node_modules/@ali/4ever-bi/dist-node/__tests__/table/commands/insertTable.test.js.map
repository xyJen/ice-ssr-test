{"version":3,"sources":["../../../../../src/__tests__/table/commands/insertTable.test.tsx"],"names":["insertTable","biActions","createValue","nodes","Value","create","document","Document","defaultValue","App","props","val","controllerRef","tableConfig","value","setValue","React","useState","plugins","locale","table","handleChange","useCallback","change","describe","it","jest","fn","enableAutofitWidth","enableHeader","controller","mock","calls","run","newTable","expect","Table","isAutofitWidth","toBe","isRowHeader","isColumnHeader","disableDefaultAutofitWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Controller, Value, Document, Block } from '@ali/4ever-cangjie';\nimport createBiPlugins from '../../../createBiPlugins';\nimport locale from '../../../locales/zh_CN';\nimport Content from '../../../content';\nimport Provider from '../../../provider';\nimport { renderEditor } from '@ali/4ever-dev-test';\nimport { last } from 'lodash-es';\nimport { getTableFromController } from '../helpers';\nimport { Table } from '@ali/4ever-mo';\nimport { createEmptyParagraph, biActions } from '@ali/4ever-plugin-table';\n\nconst { insertTable } = biActions;\n\nconst createValue = (nodes: Block[]) => {\n  return Value.create({\n    document: Document.create({\n      nodes,\n    }),\n  });\n};\n\nconst defaultValue = createValue([createEmptyParagraph('A')]);\n\nconst App: React.FC<{\n  val?: Value;\n  tableConfig?: Record<string, any>;\n  controllerRef?: (controller: Controller) => void\n}> = (props) => {\n  const { val = defaultValue, controllerRef, tableConfig } = props;\n  const [value, setValue] = React.useState(val);\n\n  const plugins = createBiPlugins({\n    ...locale,\n    table: tableConfig || {},\n  });\n\n  const handleChange = React.useCallback((change) => {\n    setValue(change.value);\n  }, []);\n\n  return (\n    <Provider\n      value={value}\n      plugins={plugins}\n      onChange={handleChange}\n      autoFocus\n      controllerRef={controllerRef}\n    >\n      <Content />\n    </Provider>\n  );\n};\n\ndescribe('table/commands/inserTable', () => {\n  it('inserTable default autofitWidth and header', async () => {\n    const controllerRef = jest.fn();\n    const tableConfig = {\n      enableAutofitWidth: () => true,\n      enableHeader: () => true,\n    };\n    await renderEditor(<App controllerRef={controllerRef} tableConfig={tableConfig} />);\n    const controller = last(controllerRef.mock.calls)[0] as Controller;\n    controller.run('onAction', insertTable(2, 2));\n    const newTable = getTableFromController(controller);\n    expect(Table.isAutofitWidth(newTable)).toBe(true);\n    expect(Table.isRowHeader(newTable)).toBe(true);\n    expect(Table.isColumnHeader(newTable)).toBe(false);\n  });\n\n  it('inserTable without default autofitWidth and header', async () => {\n    const controllerRef = jest.fn();\n    await renderEditor(<App controllerRef={controllerRef} />);\n    const controller = last(controllerRef.mock.calls)[0] as Controller;\n    controller.run('onAction', insertTable(2, 2));\n    const newTable = getTableFromController(controller);\n    expect(Table.isAutofitWidth(newTable)).toBe(false);\n    expect(Table.isRowHeader(newTable)).toBe(false);\n    expect(Table.isColumnHeader(newTable)).toBe(false);\n  });\n\n  it('insertTable when disable default autofitWidth', async () => {\n    const controllerRef = jest.fn();\n    const tableConfig = {\n      enableAutofitWidth: () => true,\n      disableDefaultAutofitWidth: () => true,\n    };\n    await renderEditor(<App controllerRef={controllerRef} tableConfig={tableConfig} />);\n    const controller = last(controllerRef.mock.calls)[0] as Controller;\n    controller.run('onAction', insertTable(2, 2));\n    const newTable = getTableFromController(controller);\n    expect(Table.isAutofitWidth(newTable)).toBe(false);\n  })\n});\n"],"file":"insertTable.test.js"}