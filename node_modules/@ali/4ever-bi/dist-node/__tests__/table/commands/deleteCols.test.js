"use strict";

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _helpers = require("../helpers");

describe('Bi: table/commands/deleteCols', () => {
  it('支持不规则表格删除单列', async () => {
    const {
      controller
    } = await (0, _helpers.createEditorWithTable)([['A'], ['A', 'A', 'A'], ['A', 'A'], ['A', 'A', 'A', 'A']]);
    const {
      document,
      selection
    } = controller.value;
    const cells = document.filterDescendants(_everMo.TableCell.isTableCell);
    const lastCell = cells[cells.length - 1];
    const newSel = selection.moveToStartOfNode(lastCell, controller);
    controller.command(_everCangjie.Commands.select, newSel);
    const table = controller.value.document.findDescendant(_everMo.Table.isTable);
    controller.command('deleteCols', table);
    const newTable = controller.value.document.filterDescendants(node => node.type === 'table')[0];
    const [row0, row1, row2, row3] = newTable.nodes;
    expect(row0.nodes.length).toBe(1);
    expect(row1.nodes.length).toBe(3);
    expect(row2.nodes.length).toBe(2);
    expect(row3.nodes.length).toBe(3);
  });
  it('支持不规则表格删除多列', async () => {
    const irregularTable = [['A'], ['A', 'A', 'A'], ['A', 'A'], ['A', 'A', 'A', 'A']];
    const {
      controller
    } = await (0, _helpers.createEditorWithTable)(irregularTable, {
      startRowIndex: 1,
      startColIndex: 1,
      endRowIndex: 3,
      endColIndex: 3
    });
    const table = (0, _helpers.getTableFromController)(controller);
    controller.command('deleteCols', table);
    const newTable = (0, _helpers.getTableFromController)(controller);
    const [row0, row1, row2, row3] = newTable.nodes;
    expect(row0.nodes.length).toBe(1);
    expect(row1.nodes.length).toBe(1);
    expect(row2.nodes.length).toBe(1);
    expect(row3.nodes.length).toBe(1);
  });
  const mergeCases = [{
    desc: '删除合并单元格所在列',
    deleteColIndex: 1,
    originMergeCellData: {
      rowSpan: 2,
      colSpan: 2
    },
    expectedMergeCellData: {
      rowSpan: 2,
      colSpan: 1
    }
  }, {
    desc: '删除 hidden 单元格所在列',
    deleteColIndex: 2,
    originMergeCellData: {
      rowSpan: 2,
      colSpan: 2
    },
    expectedMergeCellData: {
      rowSpan: 2,
      colSpan: 1
    }
  }];
  mergeCases.forEach(({
    desc,
    deleteColIndex,
    expectedMergeCellData
  }) => {
    it(desc, async () => {
      const {
        controller
      } = await (0, _helpers.createEditor)({
        table: (0, _helpers.createMergeTable)(),
        tableSelection: {
          startRowIndex: 0,
          endRowIndex: 3,
          startColIndex: deleteColIndex,
          endColIndex: deleteColIndex
        },
        shouldAdjust: false
      });
      const table = (0, _helpers.getTableFromController)(controller);
      controller.command('deleteCols', table);
      const newTable = (0, _helpers.getTableFromController)(controller);
      expect(newTable.data.colsWidth.length).toBe(3);
      const mergeTd = controller.value.document.findDescendant(el => {
        return el.type === 'table-cell' && (el.data.colSpan > 1 || el.data.rowSpan > 1);
      });
      expect(mergeTd.data.rowSpan).toBe(expectedMergeCellData.rowSpan);
      expect(mergeTd.data.colSpan).toBe(expectedMergeCellData.colSpan);
    });
  });
  it('autofit table delete col', () => {
    const table = (0, _helpers.createTableInstance)({
      table: [['A', 'B', 'C']],
      colsWidth: [20, 40, 40],
      isAutofit: true
    });
    const controller = (0, _helpers.createControllerInstance)([table]);
    const {
      selection
    } = controller.value;
    const cell = controller.value.document.findDescendant(_everMo.TableCell.isTableCell);
    controller.command(_everCangjie.Commands.select, selection.moveToStartOfNode(cell, controller));
    controller.command('deleteCols', table);
    const newTable = (0, _helpers.getTableFromController)(controller);
    expect(_everMo.Table.isAutofitWidth(newTable)).toBe(true);
    expect(newTable.data.colsWidth).toEqual([50, 50]);
  });
});
//# sourceMappingURL=deleteCols.test.js.map