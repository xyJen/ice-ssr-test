"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bigMergedTable = exports.mergedCell = exports.hiddenCell = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

var _helpers = require("../helpers");

var _editor = _interopRequireDefault(require("../../editor"));

/** @jsx jsx */
const hiddenCell = {
  data: {
    hidden: true
  }
};
exports.hiddenCell = hiddenCell;
const mergedCell = {
  data: {
    colSpan: 3,
    rowSpan: 3
  },
  text: '22'
};
exports.mergedCell = mergedCell;
const bigMergedTable = [['00', '01', '02', '03', '04', '05', '06'], ['10', '11', '12', '13', '14', '15', '16'], ['20', '21', mergedCell, hiddenCell, hiddenCell, '25', '26'], ['30', '31', hiddenCell, hiddenCell, hiddenCell, '35', '36'], ['40', '41', hiddenCell, hiddenCell, hiddenCell, '45', '46'], ['50', '51', '52', '53', '54', '55', '56'], ['60', '61', '62', '63', '64', '65', '66']];
exports.bigMergedTable = bigMergedTable;

const createRowSpanMergeCell = rowSpan => {
  return { ...mergedCell,
    data: { ...mergedCell.data,
      rowSpan
    }
  };
};

const rowSpan1MergeCell = createRowSpanMergeCell(1);
const rowSpan2MergeCell = createRowSpanMergeCell(2);

const createRowSpanEmptyCell = rowSpan => {
  return {
    data: {
      rowSpan,
      colSpan: mergedCell.data.colSpan
    },
    text: ''
  };
};

const rowSpan1EmptyCell = createRowSpanEmptyCell(1);
const rowSpan2EmptyCell = createRowSpanEmptyCell(2);
describe('Bi: table/commands/moveRows', () => {
  const cases = [{
    description: '移动单行至下方',
    originTable: [['A', 'B'], ['C', 'D']],
    expectedTable: [['C', 'D'], ['A', 'B']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 0,
        end: 0
      }, 2);
    }
  }, {
    description: '移动单行至上方',
    originTable: [['A', 'B'], ['C', 'D']],
    expectedTable: [['C', 'D'], ['A', 'B']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 1,
        end: 1
      }, 0);
    }
  }, {
    description: '移动多行至下方',
    originTable: [['00', '01', '02', '03'], ['10', '11', '12', '13'], ['20', '21', '22', '23'], ['30', '31', '32', '33']],
    expectedTable: [['00', '01', '02', '03'], ['30', '31', '32', '33'], ['10', '11', '12', '13'], ['20', '21', '22', '23']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 1,
        end: 2
      }, 4);
    }
  }, {
    description: '移动多行至上方',
    originTable: [['00', '01', '02', '03'], ['10', '11', '12', '13'], ['20', '21', '22', '23'], ['30', '31', '32', '33']],
    expectedTable: [['10', '11', '12', '13'], ['20', '21', '22', '23'], ['00', '01', '02', '03'], ['30', '31', '32', '33']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 1,
        end: 2
      }, 0);
    }
  }, {
    description: '移动完整合并单元格至上方',
    originTable: bigMergedTable,
    expectedTable: [['00', '01', '02', '03', '04', '05', '06'], ['20', '21', mergedCell, hiddenCell, hiddenCell, '25', '26'], ['30', '31', hiddenCell, hiddenCell, hiddenCell, '35', '36'], ['40', '41', hiddenCell, hiddenCell, hiddenCell, '45', '46'], ['10', '11', '12', '13', '14', '15', '16'], ['50', '51', '52', '53', '54', '55', '56'], ['60', '61', '62', '63', '64', '65', '66']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 2,
        end: 4
      }, 1);
    }
  }, {
    description: '移动完整合并单元格至下方',
    originTable: bigMergedTable,
    expectedTable: [['00', '01', '02', '03', '04', '05', '06'], ['10', '11', '12', '13', '14', '15', '16'], ['50', '51', '52', '53', '54', '55', '56'], ['20', '21', mergedCell, hiddenCell, hiddenCell, '25', '26'], ['30', '31', hiddenCell, hiddenCell, hiddenCell, '35', '36'], ['40', '41', hiddenCell, hiddenCell, hiddenCell, '45', '46'], ['60', '61', '62', '63', '64', '65', '66']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 2,
        end: 4
      }, 6);
    }
  }, {
    description: '移动合并单元格上半部分至上方',
    originTable: bigMergedTable,
    expectedTable: [['10', '11', '12', '13', '14', '15', '16'], ['20', '21', rowSpan2MergeCell, hiddenCell, hiddenCell, '25', '26'], ['30', '31', hiddenCell, hiddenCell, hiddenCell, '35', '36'], ['00', '01', '02', '03', '04', '05', '06'], ['40', '41', rowSpan1EmptyCell, hiddenCell, hiddenCell, '45', '46'], ['50', '51', '52', '53', '54', '55', '56'], ['60', '61', '62', '63', '64', '65', '66']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 1,
        end: 3
      }, 0);
    }
  }, {
    description: '移动合并单元格上半部分至下方',
    originTable: bigMergedTable,
    expectedTable: [['00', '01', '02', '03', '04', '05', '06'], ['30', '31', rowSpan2EmptyCell, hiddenCell, hiddenCell, '35', '36'], ['40', '41', hiddenCell, hiddenCell, hiddenCell, '45', '46'], ['50', '51', '52', '53', '54', '55', '56'], ['10', '11', '12', '13', '14', '15', '16'], ['20', '21', rowSpan1MergeCell, hiddenCell, hiddenCell, '25', '26'], ['60', '61', '62', '63', '64', '65', '66']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 1,
        end: 2
      }, 6);
    }
  }, {
    description: '移动合并单元格中间部分至上方',
    originTable: bigMergedTable,
    expectedTable: [['00', '01', '02', '03', '04', '05', '06'], ['10', '11', '12', '13', '14', '15', '16'], ['30', '31', rowSpan1EmptyCell, hiddenCell, hiddenCell, '35', '36'], ['20', '21', rowSpan2MergeCell, hiddenCell, hiddenCell, '25', '26'], ['40', '41', hiddenCell, hiddenCell, hiddenCell, '45', '46'], ['50', '51', '52', '53', '54', '55', '56'], ['60', '61', '62', '63', '64', '65', '66']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 3,
        end: 3
      }, 2);
    }
  }, {
    description: '移动合并单元格中间部分至下方',
    originTable: bigMergedTable,
    expectedTable: [['00', '01', '02', '03', '04', '05', '06'], ['10', '11', '12', '13', '14', '15', '16'], ['40', '41', rowSpan1EmptyCell, hiddenCell, hiddenCell, '45', '46'], ['50', '51', '52', '53', '54', '55', '56'], ['20', '21', rowSpan2MergeCell, hiddenCell, hiddenCell, '25', '26'], ['30', '31', hiddenCell, hiddenCell, hiddenCell, '35', '36'], ['60', '61', '62', '63', '64', '65', '66']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 2,
        end: 3
      }, 6);
    }
  }, {
    description: '移动合并单元格下半部分至上方',
    originTable: bigMergedTable,
    expectedTable: [['00', '01', '02', '03', '04', '05', '06'], ['40', '41', rowSpan1EmptyCell, hiddenCell, hiddenCell, '45', '46'], ['50', '51', '52', '53', '54', '55', '56'], ['10', '11', '12', '13', '14', '15', '16'], ['20', '21', rowSpan2MergeCell, hiddenCell, hiddenCell, '25', '26'], ['30', '31', hiddenCell, hiddenCell, hiddenCell, '35', '36'], ['60', '61', '62', '63', '64', '65', '66']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 4,
        end: 5
      }, 1);
    }
  }, {
    description: '移动合并单元格下半部分至下方',
    originTable: bigMergedTable,
    expectedTable: [['00', '01', '02', '03', '04', '05', '06'], ['10', '11', '12', '13', '14', '15', '16'], ['20', '21', rowSpan1MergeCell, hiddenCell, hiddenCell, '25', '26'], ['60', '61', '62', '63', '64', '65', '66'], ['30', '31', rowSpan2EmptyCell, hiddenCell, hiddenCell, '35', '36'], ['40', '41', hiddenCell, hiddenCell, hiddenCell, '45', '46'], ['50', '51', '52', '53', '54', '55', '56']],
    command: (controller, table) => {
      controller.command('moveRows', table, {
        start: 3,
        end: 5
      }, 7);
    }
  }];
  cases.forEach(({
    description,
    command,
    expectedTable,
    originTable
  }) => {
    it(description, async () => {
      const value = _everCangjie.Value.create({
        document: _everCangjie.Document.create({
          nodes: [(0, _helpers.createTableInstance)({
            table: originTable
          })]
        })
      });

      const controllerRef = jest.fn();
      await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value,
        controllerRef: controllerRef
      }));
      const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
      const table = (0, _helpers.getTableFromController)(controller);
      command(controller, table);
      const newTable = (0, _helpers.getTableFromController)(controller);
      const trs = newTable.filterDescendants(node => node.type === 'table-row');

      for (let row = 0; row < trs.length; row++) {
        const tds = trs[row].filterDescendants(node => node.type === 'table-cell');

        for (let col = 0; col < tds.length; col++) {
          const expectedCell = expectedTable[row][col];
          const actualCell = tds[col];

          if (typeof expectedCell === 'string') {
            expect(actualCell.text).toBe(expectedCell);
          } else {
            const {
              data,
              text
            } = expectedCell;
            expect(actualCell.text).toBe(text || ''); // eslint-disable-next-line guard-for-in

            Object.entries(data).forEach(([k, v]) => {
              expect(actualCell.data[k]).toBe(v);
            });
          }
        }
      }
    });
  });
});
//# sourceMappingURL=moveRows.test.js.map