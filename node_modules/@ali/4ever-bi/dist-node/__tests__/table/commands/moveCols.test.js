"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bigMergedTable = exports.mergedCell = exports.hiddenCell = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

var _helpers = require("../helpers");

var _editor = _interopRequireDefault(require("../../editor"));

/** @jsx jsx */
const hiddenCell = {
  data: {
    hidden: true
  }
};
exports.hiddenCell = hiddenCell;
const mergedCell = {
  data: {
    colSpan: 3,
    rowSpan: 3
  },
  text: '22'
};
exports.mergedCell = mergedCell;
const bigMergedTable = [['00', '01', '02', '03', '04', '05', '06'], ['10', '11', '12', '13', '14', '15', '16'], ['20', '21', mergedCell, hiddenCell, hiddenCell, '25', '26'], ['30', '31', hiddenCell, hiddenCell, hiddenCell, '35', '36'], ['40', '41', hiddenCell, hiddenCell, hiddenCell, '45', '46'], ['50', '51', '52', '53', '54', '55', '56'], ['60', '61', '62', '63', '64', '65', '66']];
exports.bigMergedTable = bigMergedTable;

const createColSpanMergeCell = colSpan => {
  return { ...mergedCell,
    data: { ...mergedCell.data,
      colSpan
    }
  };
};

const colSpan1MergeCell = createColSpanMergeCell(1);
const colSpan2MergeCell = createColSpanMergeCell(2);

const createColSpanEmptyCell = colSpan => {
  return {
    data: {
      colSpan,
      rowSpan: mergedCell.data.rowSpan
    },
    text: ''
  };
};

const colSpan1EmptyCell = createColSpanEmptyCell(1);
const colSpan2EmptyCell = createColSpanEmptyCell(2);
describe('Bi: table/commands/moveCols', () => {
  const cases = [{
    description: '移动单列至左侧',
    originTable: (0, _helpers.createTableInstance)({
      table: [['A', 'B'], ['C', 'D']],
      colsWidth: [50, 100]
    }),
    expectedTable: {
      table: [['B', 'A'], ['D', 'C']],
      colsWidth: [100, 50]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 1,
        end: 1
      }, 0);
    }
  }, {
    description: '移动单列至右侧',
    originTable: (0, _helpers.createTableInstance)({
      table: [['A', 'B'], ['C', 'D']],
      colsWidth: [50, 100]
    }),
    expectedTable: {
      table: [['B', 'A'], ['D', 'C']],
      colsWidth: [100, 50]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 0,
        end: 0
      }, 2);
    }
  }, {
    description: '移动多列至左侧',
    originTable: (0, _helpers.createTableInstance)({
      table: [['00', '01', '02', '03'], ['10', '11', '12', '13'], ['20', '21', '22', '23'], ['30', '31', '32', '33']],
      colsWidth: [20, 40, 60, 80]
    }),
    expectedTable: {
      table: [['01', '02', '00', '03'], ['11', '12', '10', '13'], ['21', '22', '20', '23'], ['31', '32', '30', '33']],
      colsWidth: [40, 60, 20, 80]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 1,
        end: 2
      }, 0);
    }
  }, {
    description: '移动多列至右侧',
    originTable: (0, _helpers.createTableInstance)({
      table: [['00', '01', '02', '03'], ['10', '11', '12', '13'], ['20', '21', '22', '23'], ['30', '31', '32', '33']],
      colsWidth: [20, 40, 60, 80]
    }),
    expectedTable: {
      table: [['00', '03', '01', '02'], ['10', '13', '11', '12'], ['20', '23', '21', '22'], ['30', '33', '31', '32']],
      colsWidth: [20, 80, 40, 60]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 1,
        end: 2
      }, 4);
    }
  }, {
    description: '移动完整合并单元格至左侧',
    originTable: (0, _helpers.createTableInstance)({
      table: bigMergedTable,
      colsWidth: [10, 20, 30, 40, 50, 60, 70]
    }),
    expectedTable: {
      table: [['02', '03', '04', '00', '01', '05', '06'], ['12', '13', '14', '10', '11', '15', '16'], [mergedCell, hiddenCell, hiddenCell, '20', '21', '25', '26'], [hiddenCell, hiddenCell, hiddenCell, '30', '31', '35', '36'], [hiddenCell, hiddenCell, hiddenCell, '40', '41', '45', '46'], ['52', '53', '54', '50', '51', '55', '56'], ['62', '63', '64', '60', '61', '65', '66']],
      colsWidth: [30, 40, 50, 10, 20, 60, 70]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 2,
        end: 4
      }, 0);
    }
  }, {
    description: '移动完整合并单元格至右侧',
    originTable: (0, _helpers.createTableInstance)({
      table: bigMergedTable,
      colsWidth: [10, 20, 30, 40, 50, 60, 70]
    }),
    expectedTable: {
      table: [['00', '01', '05', '06', '02', '03', '04'], ['10', '11', '15', '16', '12', '13', '14'], ['20', '21', '25', '26', mergedCell, hiddenCell, hiddenCell], ['30', '31', '35', '36', hiddenCell, hiddenCell, hiddenCell], ['40', '41', '45', '46', hiddenCell, hiddenCell, hiddenCell], ['50', '51', '55', '56', '52', '53', '54'], ['60', '61', '65', '66', '62', '63', '64']],
      colsWidth: [10, 20, 60, 70, 30, 40, 50]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 2,
        end: 4
      }, 7);
    }
  }, {
    description: '移动合并单元格左半部分至左侧',
    originTable: (0, _helpers.createTableInstance)({
      table: bigMergedTable,
      colsWidth: [10, 20, 30, 40, 50, 60, 70]
    }),
    expectedTable: {
      table: [['01', '02', '00', '03', '04', '05', '06'], ['11', '12', '10', '13', '14', '15', '16'], ['21', colSpan1MergeCell, '20', colSpan2EmptyCell, hiddenCell, '25', '26'], ['31', hiddenCell, '30', hiddenCell, hiddenCell, '35', '36'], ['41', hiddenCell, '40', hiddenCell, hiddenCell, '45', '46'], ['51', '52', '50', '53', '54', '55', '56'], ['61', '62', '60', '63', '64', '65', '66']],
      colsWidth: [20, 30, 10, 40, 50, 60, 70]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 1,
        end: 2
      }, 0);
    }
  }, {
    description: '移动合并单元格左半部分至右侧',
    originTable: (0, _helpers.createTableInstance)({
      table: bigMergedTable,
      colsWidth: [10, 20, 30, 40, 50, 60, 70]
    }),
    expectedTable: {
      table: [['00', '04', '05', '01', '02', '03', '06'], ['10', '14', '15', '11', '12', '13', '16'], ['20', colSpan1EmptyCell, '25', '21', colSpan2MergeCell, hiddenCell, '26'], ['30', hiddenCell, '35', '31', hiddenCell, hiddenCell, '36'], ['40', hiddenCell, '45', '41', hiddenCell, hiddenCell, '46'], ['50', '54', '55', '51', '52', '53', '56'], ['60', '64', '65', '61', '62', '63', '66']],
      colsWidth: [10, 50, 60, 20, 30, 40, 70]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 1,
        end: 3
      }, 6);
    }
  }, {
    description: '移动合并单元格中间部分至左侧',
    originTable: (0, _helpers.createTableInstance)({
      table: bigMergedTable,
      colsWidth: [10, 20, 30, 40, 50, 60, 70]
    }),
    expectedTable: {
      table: [['00', '03', '01', '02', '04', '05', '06'], ['10', '13', '11', '12', '14', '15', '16'], ['20', colSpan1EmptyCell, '21', colSpan2MergeCell, hiddenCell, '25', '26'], ['30', hiddenCell, '31', hiddenCell, hiddenCell, '35', '36'], ['40', hiddenCell, '41', hiddenCell, hiddenCell, '45', '46'], ['50', '53', '51', '52', '54', '55', '56'], ['60', '63', '61', '62', '64', '65', '66']],
      colsWidth: [10, 40, 20, 30, 50, 60, 70]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 3,
        end: 3
      }, 1);
    }
  }, {
    description: '移动合并单元格中间部分至右侧',
    originTable: (0, _helpers.createTableInstance)({
      table: bigMergedTable,
      colsWidth: [10, 20, 30, 40, 50, 60, 70]
    }),
    expectedTable: {
      table: [['00', '01', '02', '04', '05', '03', '06'], ['10', '11', '12', '14', '15', '13', '16'], ['20', '21', colSpan2MergeCell, hiddenCell, '25', colSpan1EmptyCell, '26'], ['30', '31', hiddenCell, hiddenCell, '35', hiddenCell, '36'], ['40', '41', hiddenCell, hiddenCell, '45', hiddenCell, '46'], ['50', '51', '52', '54', '55', '53', '56'], ['60', '61', '62', '64', '65', '63', '66']],
      colsWidth: [10, 20, 30, 50, 60, 40, 70]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 3,
        end: 3
      }, 6);
    }
  }, {
    description: '移动合并单元格右半部分至左侧',
    originTable: (0, _helpers.createTableInstance)({
      table: bigMergedTable,
      colsWidth: [10, 20, 30, 40, 50, 60, 70]
    }),
    expectedTable: {
      table: [['00', '03', '04', '05', '01', '02', '06'], ['10', '13', '14', '15', '11', '12', '16'], ['20', colSpan2EmptyCell, hiddenCell, '25', '21', colSpan1MergeCell, '26'], ['30', hiddenCell, hiddenCell, '35', '31', hiddenCell, '36'], ['40', hiddenCell, hiddenCell, '45', '41', hiddenCell, '46'], ['50', '53', '54', '55', '51', '52', '56'], ['60', '63', '64', '65', '61', '62', '66']],
      colsWidth: [10, 40, 50, 60, 20, 30, 70]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 3,
        end: 5
      }, 1);
    }
  }, {
    description: '移动合并单元格右半部分至右侧',
    originTable: (0, _helpers.createTableInstance)({
      table: bigMergedTable,
      colsWidth: [10, 20, 30, 40, 50, 60, 70]
    }),
    expectedTable: {
      table: [['00', '01', '02', '06', '03', '04', '05'], ['10', '11', '12', '16', '13', '14', '15'], ['20', '21', colSpan1MergeCell, '26', colSpan2EmptyCell, hiddenCell, '25'], ['30', '31', hiddenCell, '36', hiddenCell, hiddenCell, '35'], ['40', '41', hiddenCell, '46', hiddenCell, hiddenCell, '45'], ['50', '51', '52', '56', '53', '54', '55'], ['60', '61', '62', '66', '63', '64', '65']],
      colsWidth: [10, 20, 30, 70, 40, 50, 60]
    },
    command: (controller, table) => {
      controller.command('moveCols', table, {
        start: 3,
        end: 5
      }, 7);
    }
  }];
  cases.forEach(({
    description,
    command,
    expectedTable,
    originTable
  }) => {
    it(description, async () => {
      const value = _everCangjie.Value.create({
        document: _everCangjie.Document.create({
          nodes: [originTable]
        })
      });

      const controllerRef = jest.fn();
      await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value,
        controllerRef: controllerRef
      }));
      const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
      const table = (0, _helpers.getTableFromController)(controller);
      command(controller, table);
      const newTable = (0, _helpers.getTableFromController)(controller);
      const trs = newTable.filterDescendants(node => node.type === 'table-row');

      for (let row = 0; row < trs.length; row++) {
        const tds = trs[row].filterDescendants(node => node.type === 'table-cell');

        for (let col = 0; col < tds.length; col++) {
          const expectedCell = expectedTable.table[row][col];
          const actualCell = tds[col];

          if (typeof expectedCell === 'string') {
            expect(actualCell.text).toBe(expectedCell);
          } else {
            const {
              data,
              text
            } = expectedCell;
            expect(actualCell.text).toBe(text || ''); // eslint-disable-next-line guard-for-in

            Object.entries(data).forEach(([k, v]) => {
              expect(actualCell.data[k]).toBe(v);
            });
          }
        }
      }

      expect(newTable.data.colsWidth).toEqual(expectedTable.colsWidth);
    });
  });
});
//# sourceMappingURL=moveCols.test.js.map