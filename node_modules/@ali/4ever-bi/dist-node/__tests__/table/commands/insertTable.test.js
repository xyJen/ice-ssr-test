"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _createBiPlugins = _interopRequireDefault(require("../../../createBiPlugins"));

var _zh_CN = _interopRequireDefault(require("../../../locales/zh_CN"));

var _content = _interopRequireDefault(require("../../../content"));

var _provider = _interopRequireDefault(require("../../../provider"));

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

var _helpers = require("../helpers");

var _everMo = require("@ali/4ever-mo");

var _everPluginTable = require("@ali/4ever-plugin-table");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  insertTable
} = _everPluginTable.biActions;

const createValue = nodes => {
  return _everCangjie.Value.create({
    document: _everCangjie.Document.create({
      nodes
    })
  });
};

const defaultValue = createValue([(0, _everPluginTable.createEmptyParagraph)('A')]);

var _ref = /*#__PURE__*/_createElement(_content.default, null);

const App = props => {
  const {
    val = defaultValue,
    controllerRef,
    tableConfig
  } = props;

  const [value, setValue] = _react.default.useState(val);

  const plugins = (0, _createBiPlugins.default)({ ..._zh_CN.default,
    table: tableConfig || {}
  });

  const handleChange = _react.default.useCallback(change => {
    setValue(change.value);
  }, []);

  return /*#__PURE__*/_createElement(_provider.default, {
    value: value,
    plugins: plugins,
    onChange: handleChange,
    autoFocus: true,
    controllerRef: controllerRef
  }, _ref);
};

describe('table/commands/inserTable', () => {
  it('inserTable default autofitWidth and header', async () => {
    const controllerRef = jest.fn();
    const tableConfig = {
      enableAutofitWidth: () => true,
      enableHeader: () => true
    };
    await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(App, {
      controllerRef: controllerRef,
      tableConfig: tableConfig
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    controller.run('onAction', insertTable(2, 2));
    const newTable = (0, _helpers.getTableFromController)(controller);
    expect(_everMo.Table.isAutofitWidth(newTable)).toBe(true);
    expect(_everMo.Table.isRowHeader(newTable)).toBe(true);
    expect(_everMo.Table.isColumnHeader(newTable)).toBe(false);
  });
  it('inserTable without default autofitWidth and header', async () => {
    const controllerRef = jest.fn();
    await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(App, {
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    controller.run('onAction', insertTable(2, 2));
    const newTable = (0, _helpers.getTableFromController)(controller);
    expect(_everMo.Table.isAutofitWidth(newTable)).toBe(false);
    expect(_everMo.Table.isRowHeader(newTable)).toBe(false);
    expect(_everMo.Table.isColumnHeader(newTable)).toBe(false);
  });
  it('insertTable when disable default autofitWidth', async () => {
    const controllerRef = jest.fn();
    const tableConfig = {
      enableAutofitWidth: () => true,
      disableDefaultAutofitWidth: () => true
    };
    await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(App, {
      controllerRef: controllerRef,
      tableConfig: tableConfig
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    controller.run('onAction', insertTable(2, 2));
    const newTable = (0, _helpers.getTableFromController)(controller);
    expect(_everMo.Table.isAutofitWidth(newTable)).toBe(false);
  });
});
//# sourceMappingURL=insertTable.test.js.map