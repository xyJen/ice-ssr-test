"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTable = createTable;
exports.createEditor = createEditor;
exports.createControllerInstance = createControllerInstance;
exports.createEditorWithTable = createEditorWithTable;
exports.createTableInstance = createTableInstance;
exports.createMergeTable = createMergeTable;
exports.createMergeTable0 = createMergeTable0;
exports.createBigMergeTable = createBigMergeTable;
exports.expectIsCollapsedInCell = expectIsCollapsedInCell;
exports.getTableFromController = getTableFromController;
exports.bigMergedTable = exports.mergedCell = exports.hiddenCell = void 0;

var _lodash = require("lodash");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _everMo = require("@ali/4ever-mo");

var _everPluginTable = require("@ali/4ever-plugin-table");

var _editor = _interopRequireDefault(require("../editor"));

var _serializer = _interopRequireDefault(require("../serializer"));

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

/** @jsx jsx */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function createTableCell({
  data = {},
  text = ''
}) {
  return _everMo.TableCell.create({
    data: {
      colSpan: 1,
      rowSpan: 1,
      ...(data || {})
    },
    nodes: text.split('\n').map(_everPluginTable.createEmptyParagraph)
  });
} // eslint-disable-next-line import/prefer-default-export


function createTable(table, extra = {}) {
  return _serializer.default.htmlToValue(`
    ${extra.before ? extra.before : ''}
    <table>
    ${table.map(row => `
      <tr>
      ${row.map(cell => `<td>${cell}</td>`).join('')}
      </tr>
    `).join('')}
    </table>
    ${extra.after ? extra.after : ''}
  `);
}

async function createEditor({
  table,
  tableSelection,
  shouldAdjust,
  extra = {}
}) {
  const {
    before,
    after
  } = extra;
  let tableNode = table;

  if (Array.isArray(table)) {
    tableNode = createTableInstance({
      table
    });
  }

  const nodes = [tableNode];

  if (before) {
    nodes.unshift((0, _everPluginTable.createEmptyParagraph)(before));
  }

  if (after) {
    nodes.push((0, _everPluginTable.createEmptyParagraph)(after));
  }

  const value = _everCangjie.Value.create({
    document: _everCangjie.Document.create({
      nodes
    })
  });

  const controllerRef = jest.fn();
  const {
    content,
    editor
  } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
    defaultValue: value,
    controllerRef: controllerRef
  }));
  const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
  const cells = content.getElementsByTagName('td');

  if (tableSelection) {
    const t = controller.value.document.findDescendant(_everMo.Table.isTable);
    controller.command('selectTableSelection', t, { ...tableSelection,
      key: t.key
    }, shouldAdjust);
    const tbSelection = controller.query('tableSelection');
    expect(tbSelection).toEqual(expect.objectContaining(tableSelection));
  } else {
    const startCell = cells[0]; // 单元格 A

    _everDevTest.fireEvent.mouseDown(startCell);
  }

  return {
    editor,
    content,
    controller
  };
}

const plugins = (0, _createBiPlugins.default)().array;

function createControllerInstance(nodes) {
  const value = _everCangjie.Value.create({
    document: _everCangjie.Document.create({
      nodes
    })
  });

  const controller = _everCangjie.Controller.create({
    value,
    plugins
  });

  return controller;
}

async function createEditorWithTable(table, tableSelection) {
  return createEditor({
    table,
    tableSelection
  });
}

function createTableInstance({
  table = [['A', 'B'], ['C', 'D']],
  colsWidth,
  isAutofit
} = {}) {
  const rows = table.map(row => {
    return _everMo.TableRow.create({
      nodes: row.map(cell => {
        if (typeof cell === 'string') {
          cell = {
            text: cell || ''
          };
        }

        return createTableCell(cell);
      })
    });
  });
  const colsLength = table.reduce((acc, row) => Math.max(acc, row.length), 0);
  const tableData = {
    colsWidth: colsWidth === undefined ? Array(colsLength).fill(100) : colsWidth
  };

  if (isAutofit) {
    tableData.tblW = {
      w: 100,
      type: 'pct'
    };
  }

  return _everMo.Table.create({
    data: tableData,
    nodes: rows
  });
}

function createMergeCell(rowSpan = 2, colSpan = 2) {
  return _everMo.TableCell.create({
    data: {
      colSpan,
      rowSpan
    },
    nodes: [(0, _everPluginTable.createEmptyParagraph)()]
  });
}

function createHiddenCell() {
  return (0, _everPluginTable.createEmptyTableCell)({
    hidden: true
  });
}
/**
 * 创建带合并单元格的 table(4x4)，结构如下
 * [
 *   ['', '', '', ''],
 *   ['', 'mergeCell', 'hidden', ''],
 *   ['', 'hidden', 'hidden', ''],
 *   ['', '', '', ''],
 * ]
 */


function createMergeTable() {
  const colLength = 4;
  return _everMo.Table.create({
    data: {
      colsWidth: Array(colLength).fill(100)
    },
    nodes: [_everMo.TableRow.create({
      nodes: Array(colLength).fill('').map(_everPluginTable.createEmptyTableCell)
    }), _everMo.TableRow.create({
      nodes: [(0, _everPluginTable.createEmptyTableCell)(), createMergeCell(2, 2), createHiddenCell(), (0, _everPluginTable.createEmptyTableCell)()]
    }), _everMo.TableRow.create({
      nodes: [(0, _everPluginTable.createEmptyTableCell)(), createHiddenCell(), createHiddenCell(), (0, _everPluginTable.createEmptyTableCell)()]
    }), _everMo.TableRow.create({
      nodes: Array(colLength).fill('').map(_everPluginTable.createEmptyTableCell)
    })]
  });
}

function createMergeTable0() {
  const colLength = 4;
  return _everMo.Table.create({
    data: {
      colsWidth: Array(colLength).fill(100)
    },
    nodes: [_everMo.TableRow.create({
      nodes: [createMergeCell(2, 2), createHiddenCell(), (0, _everPluginTable.createEmptyTableCell)(), (0, _everPluginTable.createEmptyTableCell)()]
    }), _everMo.TableRow.create({
      nodes: [createHiddenCell(), createHiddenCell(), (0, _everPluginTable.createEmptyTableCell)(), (0, _everPluginTable.createEmptyTableCell)()]
    }), _everMo.TableRow.create({
      nodes: Array(colLength).fill('').map(_everPluginTable.createEmptyTableCell)
    }), _everMo.TableRow.create({
      nodes: Array(colLength).fill('').map(_everPluginTable.createEmptyTableCell)
    })]
  });
}

function createBigMergeTable({
  colsWidth = Array(5).fill(100)
}) {
  const colLength = colsWidth.length;
  const tableNodes = [];

  for (let rowIndex = 0; rowIndex < colLength; rowIndex++) {
    const rowNodes = [];

    for (let colIndex = 0; colIndex < colLength; colIndex++) {
      const text = `${rowIndex}${colIndex}`;
      let data = {};

      if (rowIndex === 1 && colIndex === 1) {
        data = {
          rowSpan: 3,
          colSpan: 3
        };
      } else if (rowIndex >= 1 && colIndex >= 1 && rowIndex <= 3 && colIndex <= 3) {
        data = {
          hidden: true
        };
      }

      rowNodes.push(createTableCell({
        data,
        text
      }));
    }

    tableNodes.push(_everMo.TableRow.create({
      nodes: tableNodes
    }));
  }

  return _everMo.Table.create({
    data: {
      colsWidth
    },
    nodes: tableNodes
  });
}

function expectIsCollapsedInCell(controller, rowIndex, colIndex) {
  const {
    selection
  } = controller.value;
  const tbSelection = controller.query('tableSelection');
  expect(tbSelection).toEqual(null);
  const rows = controller.value.document.filterDescendants(_everMo.TableRow.isTableRow);
  const row = rows[rowIndex];
  const cells = row.filterDescendants(el => el.type === 'table-cell');
  const cell = cells[colIndex];
  expect(selection.isCollapsed).toEqual(true);
  const anchorPath = controller.value.document.getPath(selection.anchor.key);
  const cellPath = controller.value.document.getPath(cell.key);
  expect(_everCangjie.Path.isAncestor(cellPath, anchorPath)).toEqual(true);
}

function getTableFromController(controller) {
  return controller.value.document.findDescendant(el => el.type === 'table');
}

const hiddenCell = {
  data: {
    hidden: true
  }
};
exports.hiddenCell = hiddenCell;
const mergedCell = {
  data: {
    colSpan: 3,
    rowSpan: 3
  },
  text: '22'
};
exports.mergedCell = mergedCell;
const bigMergedTable = [['00', '01', '02', '03', '04', '05', '06'], ['10', '11', '12', '13', '14', '15', '16'], ['20', '21', mergedCell, hiddenCell, hiddenCell, '25', '26'], ['30', '31', hiddenCell, hiddenCell, hiddenCell, '35', '36'], ['40', '41', hiddenCell, hiddenCell, hiddenCell, '45', '46'], ['50', '51', '52', '53', '54', '55', '56'], ['60', '61', '62', '63', '64', '65', '66']];
exports.bigMergedTable = bigMergedTable;
//# sourceMappingURL=helpers.js.map