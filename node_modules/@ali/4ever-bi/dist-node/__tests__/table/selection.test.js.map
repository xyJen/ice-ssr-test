{"version":3,"sources":["../../../../src/__tests__/table/selection.test.tsx"],"names":["describe","it","controller","startColIndex","startRowIndex","endColIndex","endRowIndex","command","firstText","value","document","getNodeByPath","getFirstText","expect","marks","some","a","type","toEqual","firstRow","Commands","removeNodeByKey","key","tbSelection","query","table","findDescendant","Table","isTable","tableSelection","resultTableSelection","objectContaining"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport '@testing-library/jest-dom/extend-expect';\nimport {\n  wait,\n} from '@testing-library/react';\nimport { Commands } from '@ali/4ever-cangjie';\nimport { Table } from '@ali/4ever-mo';\nimport { createEditorWithTable, createMergeTable } from './helpers';\n\n\ndescribe('table selection', () => {\n  it('全选包含有空cell的表格，加粗后所有cell均为加粗状态', async () => {\n    const { controller } = await createEditorWithTable(\n      [\n        ['A', ''],\n        ['', ''],\n      ],\n      {\n        startColIndex: 0,\n        startRowIndex: 0,\n        endColIndex: 1,\n        endRowIndex: 1,\n      },\n    );\n\n    controller.command('toggleRangesMark', 'bold');\n    await wait();\n    const firstText = controller.value.document.getNodeByPath([0, 1, 1]).getFirstText();\n    expect(firstText.marks.some((a) => a.type === 'bold')).toEqual(true);\n  });\n\n  it('选区拖动到一半，startCell 被删除，则已生成选区被清空', async () => {\n    const { controller } = await createEditorWithTable(\n      [\n        ['A', 'B'],\n        ['C', 'D'],\n      ],\n      {\n        startColIndex: 0,\n        startRowIndex: 0,\n        endColIndex: 1,\n        endRowIndex: 0,\n      },\n    );\n\n    const firstRow = controller.value.document.getNodeByPath([0, 0]);\n    controller.command(Commands.removeNodeByKey, firstRow?.key!);\n\n    await wait();\n\n    const tbSelection = controller.query('tableSelection');\n    expect(tbSelection).toEqual(null);\n  });\n\n  it('拖选合并单元格时，需要辐射选区以选中整个合并单元格', async () => {\n    const { controller } = await createEditorWithTable(\n      createMergeTable(),\n    );\n    const table = controller.value.document.findDescendant(\n      Table.isTable,\n    ) as Table;\n    const tableSelection = {\n      startRowIndex: 0,\n      startColIndex: 0,\n      endColIndex: 1,\n      endRowIndex: 1,\n      key: table.key,\n    };\n    controller.command('selectTableSelection', table, tableSelection);\n\n    await wait();\n\n    const resultTableSelection = controller.query('tableSelection');\n    // 应该选中合并单元格覆盖的所有行列\n    expect(resultTableSelection).toEqual(expect.objectContaining({\n      startRowIndex: 0,\n      startColIndex: 0,\n      endRowIndex: 2,\n      endColIndex: 2,\n    }));\n  });\n});\n"],"file":"selection.test.js"}