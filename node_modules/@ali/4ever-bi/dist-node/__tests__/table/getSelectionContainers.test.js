"use strict";

require("@testing-library/jest-dom/extend-expect");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _everBi = require("@ali/4ever-bi");

var _everPluginTable = require("@ali/4ever-plugin-table");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const mockGlobalWrapper = '<div id="global"></div>';
const mockTableWrapper = '<div id="wrapper"></div>';
const mockNestedTableWrapper = '<div id="nested-wrapper"></div>';
jest.mock('@ali/4ever-cangjie/src/utils/dom/index', () => ({
  findSelectionSlot: jest.fn(tableKey => tableKey === 'table' ? mockTableWrapper : mockNestedTableWrapper)
}));
const plugins = (0, _everBi.createCustomizedBiPlugins)({
  table: _everBi.TablePlugin
})().array;

var _ref = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A", (0, _everDevTest.jsx)("cursor", null)), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "B"));

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "C"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "D"));

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "\u5206\u680F"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "B"));

describe('getAllTables', () => {
  it('find real tables correctly', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref, _ref2), (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [100, 100],
        sr: true
      }
    }, _ref3)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    expect((0, _everPluginTable.getAllTables)(controller.value.document).length).toBe(1);
  });
});

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A", (0, _everDevTest.jsx)("cursor", null)), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "B"));

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "C"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "D"));

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("anchor", null), "A", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "B"));

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "C"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "D"));

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "B"));

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("anchor", null), "C"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "D"));

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "af", (0, _everDevTest.jsx)("focus", null), "ter");

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "be", (0, _everDevTest.jsx)("anchor", null), "fore");

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "B"));

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "C"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "D"));

var _ref14 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "AA", (0, _everDevTest.jsx)("cursor", null)), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "AB"));

var _ref15 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "AC"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "AD"));

var _ref16 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "B");

var _ref17 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "C"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "D"));

describe('getSelectionContainers', () => {
  const getController = value => _everCangjie.Controller.create({
    value,
    plugins
  });

  it('collapsed selectionin table cell', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref4, _ref5)));
    const controller = getController(value);
    const selection = controller.value.selection;
    const res = controller.query('getSelectionContainers', {
      selection,
      defaultWrapper: mockGlobalWrapper
    });
    const answer = new Map();
    answer.set(selection, {
      wrapper: mockTableWrapper,
      originSelection: selection
    });
    expect(res).toEqual(answer);
  });
  it('expanded selection: all in table cell', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref6, _ref7)));
    const controller = getController(value);
    const selection = controller.value.selection;
    const res = controller.query('getSelectionContainers', {
      selection,
      defaultWrapper: mockGlobalWrapper
    });
    const answer = new Map();
    answer.set(selection, {
      wrapper: mockTableWrapper,
      originSelection: selection
    });
    expect(res).toEqual(answer);
  });
  it('expanded selection: start in table cell', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref8, _ref9), _ref10));
    const controller = getController(value);
    const {
      selection,
      document
    } = controller.value;
    const table = controller.value.document.nodes[0];
    const res = controller.query('getSelectionContainers', {
      selection,
      defaultWrapper: mockGlobalWrapper
    });
    const answer = new Map();

    const sel1 = _everCangjie.Selection.create({
      anchor: selection.anchor,
      focus: _everCangjie.TextPoint.create({
        key: table.getLastText().key,
        offset: table.getLastText().text.length
      })
    });

    const sel2 = _everCangjie.Selection.create({
      anchor: _everCangjie.TextPoint.create({
        key: document.getNextText(table.key).key,
        offset: 0
      }),
      focus: selection.focus
    });

    answer.set(sel1, {
      wrapper: mockTableWrapper,
      originSelection: selection
    });
    answer.set(sel2, {
      wrapper: mockGlobalWrapper,
      originSelection: selection
    });
    expect(res).toEqual(answer);
  });
  it('expanded selection: end in table cell', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref11, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref12, _ref13)));
    const controller = getController(value);
    const {
      selection,
      document
    } = controller.value;
    const table = controller.value.document.nodes[1];
    const res = controller.query('getSelectionContainers', {
      selection,
      defaultWrapper: mockGlobalWrapper
    });
    const answer = new Map();

    const sel1 = _everCangjie.Selection.create({
      anchor: selection.anchor,
      focus: _everCangjie.TextPoint.create({
        key: document.getPreviousText(table.key).key,
        offset: document.getPreviousText(table.key).text.length
      })
    });

    const sel2 = _everCangjie.Selection.create({
      anchor: _everCangjie.TextPoint.create({
        key: table.getFirstText().key,
        offset: 0
      }),
      focus: selection.focus
    });

    answer.set(sel1, {
      wrapper: mockGlobalWrapper,
      originSelection: selection
    });
    answer.set(sel2, {
      wrapper: mockTableWrapper,
      originSelection: selection
    });
    expect(res).toEqual(answer);
  });
  it('selection in nested table', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [100, 100]
      }
    }, (0, _everDevTest.jsx)("block", {
      type: "table-row"
    }, (0, _everDevTest.jsx)("block", {
      type: "table-cell"
    }, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "nested-table",
      data: {
        colsWidth: [50, 50]
      }
    }, _ref14, _ref15)), _ref16), _ref17)));
    const controller = getController(value);
    const {
      selection
    } = controller.value;
    const res = controller.query('getSelectionContainers', {
      selection,
      defaultWrapper: mockGlobalWrapper
    });
    const answer = new Map();
    answer.set(selection, {
      wrapper: mockNestedTableWrapper,
      originSelection: selection
    });
    expect(res).toEqual(answer);
  });
});
//# sourceMappingURL=getSelectionContainers.test.js.map