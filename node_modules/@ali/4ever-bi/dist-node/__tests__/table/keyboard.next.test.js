"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _everMo = require("@ali/4ever-mo");

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _lodash = require("lodash");

var _everPluginTable = require("@ali/4ever-plugin-table");

var _editor = _interopRequireDefault(require("../editor"));

var _helpers = require("./helpers");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell",
  key: "test1"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "DingDoc")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "test2"
}, (0, _everDevTest.jsx)("inline", null, (0, _everDevTest.jsx)("cursor", null)), "test")));

describe('bi/table/keyboardNext', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react.cleanup)();
  });
  describe('删除行为', () => {
    test('在 cell 左测的空 inline 中 backspace 不会损坏该 cell', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [100, 100]
        }
      }, _ref)));
      const controllerRef = jest.fn();
      const {
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value,
        controllerRef: controllerRef
      }));
      const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
      const event = (0, _everDevTest.getHotkeyEvent)('backspace');

      _everDevTest.fireEvent.keyDown(content, event);

      await (0, _react.wait)();
      const para = content.querySelector('[data-cangjie-key="test2"]');
      expect(para).not.toBeNull();
    });
    it('delete in cell whose children are not blocks', () => {
      const table = _everMo.Table.create({
        nodes: [_everMo.TableRow.create({
          nodes: [_everMo.TableCell.create({
            nodes: [_everCangjie.Text.create('')]
          })]
        })],
        data: {
          colsWidth: [100]
        }
      });

      const controller = (0, _helpers.createControllerInstance)([table]);
      const {
        selection
      } = controller.value;
      const tableCell = controller.value.document.findDescendant(_everMo.TableCell.isTableCell);
      const newSelection = selection.moveToStartOfNode(tableCell, controller);
      controller.command(_everCangjie.Commands.select, newSelection);
      const e = {
        detail: {
          type: 'deleteContentBackward'
        }
      }; // @ts-ignore

      expect(() => (0, _everPluginTable.onCangjieInput)(e, controller, _lodash.noop)).not.toThrowError();
    });
  });
});
//# sourceMappingURL=keyboard.next.test.js.map