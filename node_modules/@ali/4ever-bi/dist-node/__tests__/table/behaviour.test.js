"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = require("@testing-library/react");

var _everCangjie = require("@ali/4ever-cangjie");

var _everBamboo = require("@ali/4ever-bamboo");

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

var _createCustomizedBiPlugins = _interopRequireDefault(require("../../createCustomizedBiPlugins"));

var _editor = _interopRequireDefault(require("../editor"));

var _everPluginTable = require("@ali/4ever-plugin-table");

var _link = _interopRequireDefault(require("../../plugins/link"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const {
  setTableBorder,
  setTableCellFill
} = _everPluginTable.biActions;
const useContainerWidthResize = _everBamboo.TablePlugin.components.useContainerWidthResize;
const TYPE_A = 'type-a';
const TYPE_B = 'type-b';
const TYPE_A_WIDTH = 160;
const TYPE_B_WIDTH = 200;
let renderTimes = 0;

const createTestPlugin = (type, width) => {
  return () => {
    return {
      renderNode: (props, controller, next) => {
        const {
          node,
          attributes
        } = props;

        if (node.type === type) {
          renderTimes += 1;
          const resize = useContainerWidthResize();
          return (0, _everDevTest.jsx)("div", attributes, "test");
        }

        return next();
      },
      models: {
        klass: 'block',
        type
      },
      queries: {
        getMinTableColWidth: (_, {
          node
        }) => {
          if (node.type === type) {
            return width;
          }

          return undefined;
        }
      }
    };
  };
};

const testPluginA = createTestPlugin(TYPE_A, TYPE_A_WIDTH);
const testPluginB = createTestPlugin(TYPE_B, TYPE_B_WIDTH);
const createBiPlugins = (0, _createCustomizedBiPlugins.default)({
  testPluginA,
  testPluginB,
  tablePlugin: _everPluginTable.biFactory,
  linkPlugin: _link.default
});
const plugins = createBiPlugins({
  link: {
    enableCard: true,
    locale: {}
  }
});

var _ref = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  key: "test-a",
  type: TYPE_A
})));

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  key: "test-a",
  type: TYPE_A
}), (0, _everDevTest.jsx)("block", {
  key: "test-b",
  type: TYPE_B
})));

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  key: "test-a",
  type: TYPE_A
})), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  key: "test-b",
  type: TYPE_B
})));

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  key: "test-a",
  type: TYPE_A
})), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}));

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  key: "test-a",
  type: TYPE_A
})), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}));

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  key: "test-a",
  type: TYPE_A
})), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}));

var _ref7 = (0, _everDevTest.jsx)("cursor", null);

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "table",
  key: "table-key"
}, (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("cursor", null), "B")), (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "C"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "D")))));

var _ref9 = (0, _everDevTest.jsx)("cursor", null);

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "C"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "D"));

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A");

var _ref12 = (0, _everDevTest.jsx)("cursor", null);

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "C"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "D"));

describe('Bi/table/behaviour', () => {
  describe('限制表格列宽', () => {
    test('包含一类特殊元素时，当前列宽调整为限制宽度', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table",
        data: {
          colsWidth: [100]
        }
      }, _ref)));
      const controllerRef = jest.fn();
      await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value,
        plugins: plugins,
        controllerRef: controllerRef
      }));
      const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
      const {
        data
      } = controller.value;
      const {
        tableMinColsWidth
      } = data;
      expect(tableMinColsWidth).toEqual({
        'test-a': TYPE_A_WIDTH
      });
      const table = controller.view.getNode('table');
      expect(table.data.colsWidth).toEqual([TYPE_A_WIDTH]);
    });
  });
  test('包含多类特殊元素时，当前列宽自动调整为最大限制宽度', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [100]
      }
    }, _ref2)));
    const controllerRef = jest.fn();
    await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      plugins: plugins,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    const {
      data
    } = controller.value;
    const {
      tableMinColsWidth
    } = data;
    expect(tableMinColsWidth).toEqual({
      'test-b': TYPE_B_WIDTH
    });
    const table = controller.view.getNode('table');
    expect(table.data.colsWidth).toEqual([TYPE_B_WIDTH]);
  });
  test('多列包含特殊元素时，列宽调整为限制宽度', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref3)));
    const controllerRef = jest.fn();
    await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      plugins: plugins,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    const {
      data
    } = controller.value;
    const {
      tableMinColsWidth
    } = data;
    expect(tableMinColsWidth).toEqual({
      'test-a': TYPE_A_WIDTH,
      'test-b': TYPE_B_WIDTH
    });
    const table = controller.view.getNode('table');
    expect(table.data.colsWidth).toEqual([TYPE_A_WIDTH, TYPE_B_WIDTH]);
  });
  test('调整表格宽度时，含有特殊元素列宽度不能超过最小宽度', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [TYPE_A_WIDTH, 100]
      }
    }, _ref4)));
    const controllerRef = jest.fn();
    await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      plugins: plugins,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    const table = controller.view.getNode('table');
    controller.command('resizeTableWidth', table, -20);
    await (0, _everDevTest.waitForTime)(1);
    const tableResult = controller.view.getNode('table');
    expect(tableResult.data.colsWidth).toEqual([TYPE_A_WIDTH, 80]);
  });
  test('单元格宽度变化时，单元格内使用 context 的节点 rerender', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [TYPE_A_WIDTH, 100]
      }
    }, _ref5)));
    const controllerRef = jest.fn();
    await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      plugins: plugins,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    const table = controller.view.getNode('table');
    const lastRenderTimes = renderTimes;
    controller.command('resizeTableWidth', table, 20);
    await (0, _react.wait)();
    expect(renderTimes).toBeGreaterThan(lastRenderTimes);
  });
  test('调整表格宽度，单元格宽度未变化时，单元格内使用 context 的节点不 rerender', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [TYPE_A_WIDTH, 100]
      }
    }, _ref6)));
    const controllerRef = jest.fn();
    await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      plugins: plugins,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    const table = controller.view.getNode('table');
    const lastRenderTimes = renderTimes;
    controller.command('resizeTableWidth', table, -20);
    await (0, _react.wait)();
    expect(renderTimes).toBeGreaterThan(lastRenderTimes);
  });
  test('包含链接卡片时，当前列宽调整为限制宽度', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [100]
      }
    }, (0, _everDevTest.jsx)("block", {
      type: "table-row"
    }, (0, _everDevTest.jsx)("block", {
      type: "table-cell"
    }, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B"), _ref7))))));
    const controllerRef = jest.fn();
    await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      plugins: plugins,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    const width = _everBamboo.theme.link.width + 2 * (_everBamboo.theme.link.margin + _everBamboo.theme.link.tablePadding);
    const {
      data
    } = controller.value;
    const {
      tableMinColsWidth
    } = data;
    expect(tableMinColsWidth).toEqual({
      'link': width
    });
    const table = controller.view.getNode('table');
    expect(table.data.colsWidth).toEqual([width]);
  });
  describe('重复操作', () => {
    it('默认情况下，设置默认颜色的无边框、设置无底色，不产生操作记录', async () => {
      const value = _ref8;

      const controller = _everCangjie.Controller.create({
        value,
        plugins: plugins.array
      });

      const table = (0, _everPluginTable.getTable)(value);
      const selection = (0, _everPluginTable.getTableSelection)(controller);
      const {
        lineType,
        size
      } = _everPluginTable.lineMap[_everPluginTable.DEFAULT_TABLE_BORDER_STYLE];
      controller.run('onAction', setTableBorder(table, selection, 'none', '#000000', size, lineType));
      await (0, _everDevTest.waitForTime)(1);
      const {
        history: history1
      } = controller.value.data;
      expect((history1 || _everCangjie.History.create()).undos.length).toEqual(0);
      controller.run('onAction', setTableCellFill(table, selection, ''));
      await (0, _everDevTest.waitForTime)(1);
      const {
        history: history2
      } = controller.value.data;
      expect((history2 || _everCangjie.History.create()).undos.length).toEqual(0);
    });
    it('设置相同样式的左侧边框，不产生操作记录', async () => {
      const borderProps = {
        color: '#FF0000',
        sz: _everPluginTable.lineMap.Dashed.size,
        val: _everPluginTable.lineMap.Dashed.lineType
      };
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          bdr: {
            right: borderProps
          }
        }
      }, "A"), (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          bdr: {
            left: borderProps
          }
        }
      }, _ref9, "B")), _ref10)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins: plugins.array
      });

      const table = (0, _everPluginTable.getTable)(value);
      const selection = (0, _everPluginTable.getTableSelection)(controller);
      controller.run('onAction', setTableBorder(table, selection, 'left', borderProps.color, borderProps.sz, borderProps.val));
      await (0, _everDevTest.waitForTime)(1);
      const {
        history = _everCangjie.History.create()
      } = controller.value.data;
      expect(history.undos.length).toEqual(0);
    });
    it('设置相同的底色，不产生操作记录', async () => {
      const color = '#FF0000';
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, _ref11, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          fill: color
        }
      }, _ref12, "B")), _ref13)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins: plugins.array
      });

      const table = (0, _everPluginTable.getTable)(value);
      const selection = (0, _everPluginTable.getTableSelection)(controller);
      controller.run('onAction', setTableCellFill(table, selection, color));
      await (0, _everDevTest.waitForTime)(1);
      const {
        history = _everCangjie.History.create()
      } = controller.value.data;
      expect(history.undos.length).toEqual(0);
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map