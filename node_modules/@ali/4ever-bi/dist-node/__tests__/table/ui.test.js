"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _lodash = require("lodash");

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _helpers = require("./helpers");

var _editor = _interopRequireDefault(require("../editor"));

/** @jsx jsx */
jest.useFakeTimers();

function expectShowDragPlaceholder(isShow = true, type) {
  expect(document.querySelectorAll(`[data-testid="table-${type}-drag-placeholder"][data-visible="${isShow}"]`)).toHaveLength(1);
}

var _ref = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "DingDoc")));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "table"
}, (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "DingDoc"))))));

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "DingDoc")));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "test"))))));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "test")))));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "test")))));

describe('table/table/ui', () => {
  let originGetBoundingClientRect = null;
  beforeAll(() => {
    originGetBoundingClientRect = window.HTMLElement.prototype.getBoundingClientRect; // @ts-ignore

    window.HTMLElement.prototype.getBoundingClientRect = function () {
      return {
        width: parseFloat(this.style.width) || 33,
        height: parseFloat(this.style.height) || 33,
        top: parseFloat(this.style.marginTop) || 0,
        left: parseFloat(this.style.marginLeft) || 0,
        right: parseFloat(this.style.marginLeft) || 0,
        x: 0,
        y: 0
      };
    };
  });
  afterAll(() => {
    window.HTMLElement.prototype.getBoundingClientRect = originGetBoundingClientRect;
  });
  it('长按选中列工具栏，出现拖拽占位图', async () => {
    const table = [['A', 'B'], ['C', 'D']];
    const tbSelection = {
      startRowIndex: 0,
      endRowIndex: 1,
      startColIndex: 0,
      endColIndex: 0
    };
    const {
      content
    } = await (0, _helpers.createEditorWithTable)(table, tbSelection);
    const toolbarItem = content.querySelector('[data-testid="table-col-toolbar-item"]');

    _everDevTest.fireEvent.mouseOver(toolbarItem);

    _everDevTest.fireEvent.mouseDown(toolbarItem);

    jest.runOnlyPendingTimers();
    expectShowDragPlaceholder(true, 'col');

    _everDevTest.fireEvent.mouseUp(toolbarItem);

    expectShowDragPlaceholder(false, 'col');
  });
  it('多选列：shift + click 可选中多列', async () => {
    const table = [['A', 'B', 'A'], ['C', 'D', 'C']];
    const {
      content,
      controller
    } = await (0, _helpers.createEditorWithTable)(table);
    const toolbarItems = content.querySelectorAll('[data-testid="table-col-toolbar-item"]');

    _everDevTest.fireEvent.mouseDown(toolbarItems[0]);

    _everDevTest.fireEvent.mouseDown(toolbarItems[1], {
      shiftKey: true
    });

    const tableSelection = controller.query('tableSelection');
    expect(tableSelection).toEqual(expect.objectContaining({
      startRowIndex: 0,
      endRowIndex: 1,
      startColIndex: 0,
      endColIndex: 1
    }));
  });
  it('多选列：选中多列后，shift + click 可继续选中多列', async () => {
    const table = [['A', 'B', 'A'], ['C', 'D', 'C']];
    const {
      content,
      controller
    } = await (0, _helpers.createEditorWithTable)(table);
    const toolbarItems = content.querySelectorAll('[data-testid="table-col-toolbar-item"]');

    _everDevTest.fireEvent.mouseDown(toolbarItems[1]);

    _everDevTest.fireEvent.mouseDown(toolbarItems[2], {
      shiftKey: true
    });

    _everDevTest.fireEvent.mouseUp(toolbarItems[2], {
      shiftKey: true
    });

    const tableSelection = controller.query('tableSelection');
    expect(tableSelection).toEqual(expect.objectContaining({
      startRowIndex: 0,
      endRowIndex: 1,
      startColIndex: 1,
      endColIndex: 2
    }));
    await (0, _react.waitFor)(() => {
      _everDevTest.fireEvent.mouseDown(toolbarItems[0], {
        shiftKey: true
      });

      const resultTableSelection = controller.query('tableSelection');
      expect(resultTableSelection).toEqual(expect.objectContaining({
        startRowIndex: 0,
        endRowIndex: 1,
        startColIndex: 0,
        endColIndex: 1
      }));
    });
  });
  it('多选行：选中多行后，shift + click 可继续选中多行', async () => {
    const table = [['A', 'B'], ['C', 'D'], ['C', 'D']];
    const tbSelection = {
      startRowIndex: 1,
      endRowIndex: 1,
      startColIndex: 0,
      endColIndex: 1
    };
    const {
      content,
      controller
    } = await (0, _helpers.createEditorWithTable)(table, tbSelection);
    const toolbarItem = content.querySelector('[data-testid="table-row-toolbar-item"]');

    _everDevTest.fireEvent.mouseDown(toolbarItem, {
      shiftKey: true
    });

    const resultTableSelection = controller.query('tableSelection');
    expect(resultTableSelection).toEqual(expect.objectContaining({
      startRowIndex: 0,
      endRowIndex: 1,
      startColIndex: 0,
      endColIndex: 1
    }));
  });
  it('长按选中行工具栏，出现拖拽占位图', async () => {
    const table = [['A', 'B'], ['C', 'D']];
    const tbSelection = {
      startRowIndex: 0,
      endRowIndex: 0,
      startColIndex: 0,
      endColIndex: 1
    };
    const {
      content
    } = await (0, _helpers.createEditorWithTable)(table, tbSelection);
    const toolbarItem = content.querySelector('[data-testid="table-row-toolbar-item"]');

    _everDevTest.fireEvent.mouseMove(toolbarItem);

    _everDevTest.fireEvent.mouseDown(toolbarItem);

    jest.runOnlyPendingTimers();
    expectShowDragPlaceholder(true, 'row');

    _everDevTest.fireEvent.mouseUp(toolbarItem);

    expectShowDragPlaceholder(false, 'row');
  });
  describe('table 数据合法性校验', () => {
    it('数据合法时，能正常渲染 table', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100]
        }
      }, _ref)));
      const {
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value
      }));
      await (0, _react.waitFor)(() => {
        const table = content.querySelector('table');
        expect(table).not.toBeNull();
      });
    });
    it('colsWidth 不存在时', async () => {
      const value = _ref2;
      const {
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value
      }));
      await (0, _react.waitFor)(() => {
        const table = content.querySelector('table');
        expect(table).toBeNull();
      });
    });
    it('colsWidth 为空数组，不渲染', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: []
        }
      }, _ref3)));
      const {
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value
      }));
      await (0, _react.waitFor)(() => {
        const table = content.querySelector('table');
        expect(table).toBeNull();
      });
    });
    it('子节点是 text 时', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [100, 100]
        }
      })));
      const controllerRef = jest.fn();
      const {
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value,
        controllerRef: controllerRef
      }));
      const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
      await (0, _react.waitFor)(() => {
        const table = content.querySelector('table');
        expect(table).toBeNull();
      });
    });
    [{
      description: 'tableCell 节点不在 table 内，不报错',
      value: _ref4
    }, {
      description: 'tableCell 节点不在 tableRow 内，不报错',
      value: _ref5
    }, {
      description: 'tableRow 节点不在 table 内，不报错',
      value: _ref6
    }].forEach(({
      description,
      value
    }) => {
      var _ref7 = (0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value
      });

      it(description, async () => {
        await (0, _everDevTest.renderEditor)(_ref7);
      });
    });
  });
});
//# sourceMappingURL=ui.test.js.map