"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _everDevTest = require("@ali/4ever-dev-test");

require("@testing-library/jest-dom/extend-expect");

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _everComponent = require("@ali/4ever-component");

var _helpers = require("./helpers");

var _zh_CN = _interopRequireDefault(require("../../locales/zh_CN"));

var _everPluginTable = require("@ali/4ever-plugin-table");

/** @jsx jsx */
const valign = 'SelectWrap-bi-toolbar-valign';
const fill = 'splitbutton-left-bi-toolbar-table-fill';
const splitCell = 'bi-toolbar-tablesimplesplit_wrap';
const mergeCell = 'bi-toolbar-tablesimplemerge_wrap';
const widthFit = 'table-width-fit-button';
const tableButtons = [valign, fill, splitCell, mergeCell, widthFit];

const defaultValue = _everCangjie.Value.create({
  document: _everCangjie.Document.create({
    nodes: [(0, _everPluginTable.createEmptyParagraph)('A'), (0, _helpers.createTableInstance)({
      table: _helpers.bigMergedTable
    }), (0, _everPluginTable.createEmptyParagraph)('B')]
  })
});

const toolbarLayout = [{
  toolButtons: [{
    name: 'table.fitWidth'
  }, {
    name: 'table.mergeSimple'
  }, {
    name: 'table.splitSimple'
  }, {
    name: 'table.fillFocus'
  }, {
    name: 'table.vAlign',
    showTargets: ['table', 'columns']
  }],
  showTargets: ['table']
}, {
  toolButtons: [{
    name: 'table.fillFocus',
    usePaletteIcon: true
  }],
  showTargets: ['columns']
}, {
  toolButtons: [{
    name: 'draggable.transform'
  }]
}, {
  toolButtons: [{
    name: 'list.ulist'
  }, {
    name: 'list.olist'
  }]
}, {
  toolButtons: [{
    name: 'sz.simple'
  }, {
    name: 'bold'
  }, {
    name: 'italic'
  }, {
    name: 'strike'
  }, {
    name: 'underline'
  }, {
    name: 'color.colorAndHighlight'
  }, {
    name: 'alignment',
    hideConditions: ['hasListSelection']
  }]
}, {
  toolButtons: [{
    name: 'list.tlist',
    hideConditions: ['hasListSelection']
  }, {
    name: 'comment'
  }, {
    name: 'table.delete',
    showTargets: ['table']
  }, {
    name: 'more'
  }]
}];

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const App = props => {
  const {
    val = defaultValue,
    controllerRef
  } = props;
  const [value, setValue] = React.useState(val);
  const plugins = (0, _createBiPlugins.default)(_zh_CN.default);
  const handleChange = React.useCallback(change => {
    setValue(change.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    plugins: plugins,
    onChange: handleChange,
    autoFocus: true,
    controllerRef: controllerRef
  }, _ref, (0, _everDevTest.jsx)(_everComponent.Trigger, {
    getScrollableContainer: () => document.body,
    getScrollableContent: () => document.body,
    toolbarLayout: toolbarLayout
  }));
};

describe('bi/components/selectionBar', () => {
  it('浮动工具栏显示、隐藏逻辑正常', async () => {
    const controllerRef = jest.fn();
    const {
      queryByTestId,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(App, {
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    expect(!!queryByTestId('selection-bar')).toBe(false);
    controller.command(_everCangjie.Commands.moveToRangeOfDocument);

    _everDevTest.fireEvent.mouseUp(content);

    expect(!!queryByTestId('selection-bar')).toBe(true);
    const fillButton = queryByTestId(fill);
    const valignButton = queryByTestId(valign);
    expect(!!fillButton).toBe(false);
    expect(!!valignButton).toBe(false);
  });
  [{
    description: '选区在表格单元格内时，渲染填充、垂直对齐按钮',
    action: controller => {
      const cell = controller.value.document.findDescendant(_everMo.TableCell.isTableCell);
      controller.command(_everCangjie.Commands.moveToRangeOfNode, cell);
    },
    result: [fill, valign]
  }, {
    description: '选区在合并单元格内时，渲染拆分、填充、垂直对齐按钮',
    action: controller => {
      const cell = controller.value.document.findDescendant(n => {
        return _everMo.TableCell.isTableCell(n) && (n.data?.rowSpan > 1 || n.data?.colSpan > 1);
      });
      controller.command(_everCangjie.Commands.moveToRangeOfNode, cell);
    },
    result: [splitCell, fill, valign]
  }, {
    description: '选中多个单元格时，渲染拆分、填充、垂直对齐按钮',
    action: controller => {
      const table = (0, _helpers.getTableFromController)(controller);
      const tbSelection = {
        key: table.key,
        startRowIndex: 0,
        startColIndex: 0,
        endRowIndex: 1,
        endColIndex: 0
      };
      controller.command('selectTableSelection', table, tbSelection);
    },
    result: [mergeCell, fill, valign]
  }, {
    description: '选中表格时，渲染宽度自适应、填充、垂直对齐按钮',
    action: controller => {
      const table = (0, _helpers.getTableFromController)(controller);
      controller.command('selectWholeTable', table);
    },
    result: [widthFit, fill, valign]
  }].forEach(({
    description,
    action,
    result
  }) => {
    it(description, async () => {
      const controllerRef = jest.fn();
      const {
        queryByTestId,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(App, {
        controllerRef: controllerRef
      }));
      const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
      action(controller);

      _everDevTest.fireEvent.mouseUp(content);

      expect(!!queryByTestId('selection-bar')).toBe(true);
      result.forEach(testid => {
        const button = queryByTestId(testid);
        expect(!!button).toBe(true);
      }); // 预期外的 button 不显示

      tableButtons.forEach(testid => {
        if (!result.includes(testid)) {
          const button = queryByTestId(testid);
          expect(!!button).toBe(false);
        }
      });
    });
  });
  it('选中合并单元格一部分时，合并/拆分单元格 button disabled', async () => {
    const controllerRef = jest.fn();
    const {
      queryByTestId,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(App, {
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    const table = (0, _helpers.getTableFromController)(controller);
    const tbSelection = {
      key: table.key,
      startRowIndex: 2,
      startColIndex: 0,
      endRowIndex: 2,
      endColIndex: table.nodes[0].nodes.length - 1
    };
    controller.command('selectTableSelection', table, tbSelection, false);

    _everDevTest.fireEvent.mouseUp(content);

    expect(!!queryByTestId('selection-bar')).toBe(true);
    const mergeCellButton = queryByTestId(mergeCell);
    const disabled = mergeCellButton?.parentElement?.hasAttribute('disabled');
    expect(disabled).toBe(true);
  });
});
//# sourceMappingURL=selectionbar.test.js.map