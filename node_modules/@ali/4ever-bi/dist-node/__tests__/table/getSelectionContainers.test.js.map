{"version":3,"sources":["../../../../src/__tests__/table/getSelectionContainers.test.tsx"],"names":["mockGlobalWrapper","mockTableWrapper","mockNestedTableWrapper","jest","mock","findSelectionSlot","fn","tableKey","plugins","table","TablePlugin","array","describe","it","value","colsWidth","sr","controller","Controller","create","expect","document","length","toBe","getController","selection","res","query","defaultWrapper","answer","Map","set","wrapper","originSelection","toEqual","nodes","sel1","Selection","anchor","focus","TextPoint","key","getLastText","offset","text","sel2","getNextText","getPreviousText","getFirstText"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport '@testing-library/jest-dom/extend-expect';\nimport { Controller, Selection, TextPoint, Value } from '@ali/4ever-cangjie';\nimport { jsx } from '@ali/4ever-dev-test';\nimport { createCustomizedBiPlugins, TablePlugin } from '@ali/4ever-bi';\n\nconst mockGlobalWrapper = '<div id=\"global\"></div>';\nconst mockTableWrapper = '<div id=\"wrapper\"></div>';\nconst mockNestedTableWrapper = '<div id=\"nested-wrapper\"></div>';\njest.mock('@ali/4ever-cangjie/src/utils/dom/index', () => ({\n  findSelectionSlot: jest.fn((tableKey) => tableKey === 'table' ? mockTableWrapper : mockNestedTableWrapper),\n}));\nimport { getAllTables } from '@ali/4ever-plugin-table';\n\nconst plugins = createCustomizedBiPlugins({\n  table: TablePlugin\n})().array;\n\ndescribe('getAllTables', () => {\n  it('find real tables correctly', async () => {\n    const value = (\n      <value>\n        <document>\n          <block type=\"table\" key=\"table\" data={{\n            colsWidth: [100, 100]\n          }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                A<cursor />\n              </block>\n              <block type=\"table-cell\">B</block>\n            </block>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                C\n              </block>\n              <block type=\"table-cell\">D</block>\n            </block>\n          </block>\n          <block type=\"table\" key=\"table\" data={{\n            colsWidth: [100, 100],\n            sr: true,\n          }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                分栏\n              </block>\n              <block type=\"table-cell\">B</block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    })\n    expect(getAllTables(controller.value.document).length).toBe(1);\n  });\n});\n\ndescribe('getSelectionContainers', () => {\n  const getController = (value: Value) => Controller.create({\n    value,\n    plugins,\n  });\n\n  it('collapsed selectionin table cell', async () => {\n    const value = (\n      <value>\n        <document>\n          <block type=\"table\" key=\"table\" data={{\n            colsWidth: [100, 100]\n          }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                A<cursor />\n              </block>\n              <block type=\"table-cell\">B</block>\n            </block>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                C\n              </block>\n              <block type=\"table-cell\">D</block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n    const controller = getController(value);\n    const selection = controller.value.selection;\n\n    const res = controller.query('getSelectionContainers', {\n      selection,\n      defaultWrapper: mockGlobalWrapper,\n    });\n\n    const answer = new Map();\n    answer.set(selection, { wrapper: mockTableWrapper, originSelection: selection });\n    expect(res).toEqual(answer);\n  });\n\n  it('expanded selection: all in table cell', async () => {\n    const value = (\n      <value>\n        <document>\n          <block type=\"table\" key=\"table\" data={{\n            colsWidth: [100, 100]\n          }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <anchor />A<focus />\n              </block>\n              <block type=\"table-cell\">B</block>\n            </block>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                C\n              </block>\n              <block type=\"table-cell\">D</block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n    const controller = getController(value);\n    const selection = controller.value.selection;\n\n    const res = controller.query('getSelectionContainers', {\n      selection,\n      defaultWrapper: mockGlobalWrapper,\n    });\n\n    const answer = new Map();\n    answer.set(selection, { wrapper: mockTableWrapper, originSelection: selection });\n    expect(res).toEqual(answer);\n  });\n\n  it('expanded selection: start in table cell', async () => {\n    const value = (\n      <value>\n        <document>\n          <block type=\"table\" key=\"table\" data={{\n            colsWidth: [100, 100]\n          }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                A\n              </block>\n              <block type=\"table-cell\">B</block>\n            </block>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <anchor />C\n              </block>\n              <block type=\"table-cell\">D</block>\n            </block>\n          </block>\n          <block type=\"paragraph\">af<focus />ter</block>\n        </document>\n      </value>\n    ) as unknown as Value;\n    const controller = getController(value);\n    const { selection, document } = controller.value;\n    const table = controller.value.document.nodes[0];\n\n    const res = controller.query('getSelectionContainers', {\n      selection,\n      defaultWrapper: mockGlobalWrapper,\n    });\n\n    const answer = new Map();\n    const sel1 = Selection.create({\n      anchor: selection.anchor,\n      focus: TextPoint.create({ key: table.getLastText().key, offset: table.getLastText().text.length }),\n    });\n    const sel2 = Selection.create({\n      anchor: TextPoint.create({ key: document.getNextText(table.key).key, offset: 0 }),\n      focus: selection.focus,\n    });\n    answer.set(sel1, { wrapper: mockTableWrapper, originSelection: selection });\n    answer.set(sel2, { wrapper: mockGlobalWrapper, originSelection: selection });\n    expect(res).toEqual(answer);\n  });\n\n  it('expanded selection: end in table cell', async () => {\n    const value = (\n      <value>\n        <document>\n          <block type=\"paragraph\">be<anchor />fore</block>\n          <block type=\"table\" key=\"table\" data={{\n            colsWidth: [100, 100]\n          }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                A<focus />\n              </block>\n              <block type=\"table-cell\">B</block>\n            </block>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">C</block>\n              <block type=\"table-cell\">D</block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n    const controller = getController(value);\n    const { selection, document } = controller.value;\n    const table = controller.value.document.nodes[1];\n\n    const res = controller.query('getSelectionContainers', {\n      selection,\n      defaultWrapper: mockGlobalWrapper,\n    });\n\n    const answer = new Map();\n    const sel1 = Selection.create({\n      anchor: selection.anchor,\n      focus: TextPoint.create({ key: document.getPreviousText(table.key).key, offset: document.getPreviousText(table.key).text.length }),\n    });\n    const sel2 = Selection.create({\n      anchor: TextPoint.create({ key: table.getFirstText().key, offset: 0 }),\n      focus: selection.focus,\n    });\n    answer.set(sel1, { wrapper: mockGlobalWrapper, originSelection: selection });\n    answer.set(sel2, { wrapper: mockTableWrapper, originSelection: selection });\n    expect(res).toEqual(answer);\n  });\n\n  it('selection in nested table', async () => {\n    const value = (\n      <value>\n        <document>\n          <block type=\"table\" key=\"table\" data={{\n            colsWidth: [100, 100]\n          }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"table\" key=\"nested-table\" data={{\n                  colsWidth: [50, 50]\n                }}>\n                  <block type=\"table-row\">\n                    <block type=\"table-cell\">\n                      AA<cursor />\n                    </block>\n                    <block type=\"table-cell\">AB</block>\n                  </block>\n                  <block type=\"table-row\">\n                    <block type=\"table-cell\">AC</block>\n                    <block type=\"table-cell\">AD</block>\n                  </block>\n                </block>\n              </block>\n              <block type=\"table-cell\">B</block>\n            </block>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">C</block>\n              <block type=\"table-cell\">D</block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n    const controller = getController(value);\n    const { selection } = controller.value;\n    const res = controller.query('getSelectionContainers', {\n      selection,\n      defaultWrapper: mockGlobalWrapper,\n    });\n\n    const answer = new Map();\n    answer.set(selection, { wrapper: mockNestedTableWrapper, originSelection: selection });\n    expect(res).toEqual(answer);\n  });\n});\n"],"file":"getSelectionContainers.test.js"}