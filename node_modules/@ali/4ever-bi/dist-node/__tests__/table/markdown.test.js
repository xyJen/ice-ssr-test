"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

var _editor = _interopRequireDefault(require("../editor"));

var _helpers = require("./helpers");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
var _ref2 = (0, _everDevTest.jsx)("cursor", null);

describe('table markdown', () => {
  const cases = [['| | |', [['', ''], ['', '']], [0, 0, 0, 0, 0]], ['|     |    \t |', [['', ''], ['', '']], [0, 0, 0, 0, 0]], ['|a|b|', [['a', 'b'], ['', '']], [0, 1, 0, 0, 0]], ['| |b|', [['', 'b'], ['', '']], [0, 1, 0, 0, 0]], ['| | b |   c   |', [['', 'b', 'c'], ['', '', '']], [0, 1, 0, 0, 0]], ['|||'], ['||']];
  cases.forEach(([input, table, selectionPath]) => {
    var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, input, _ref2)));

    it(`${input} + Enter`, async () => {
      const value = _ref;
      const controllerRef = jest.fn();
      const {
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value,
        controllerRef: controllerRef
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('enter'));

      await (0, _react.wait)();
      const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];

      if (!table) {
        expect(controller.value.document.nodes[0]).toEqual(value.document.nodes[0]);
        expect(controller.value.document.nodes.length).toBe(2);
        return;
      }

      const row = controller.value.document.getNodeByPath([0, 0]);
      const tableValue = (0, _helpers.createTable)(table);
      const ansRow = tableValue.document.getNodeByPath([0, 0]);

      for (let i = 0; i < row.nodes.length; i++) {
        expect(row.nodes[i].text).toBe(ansRow.nodes[i].text);
      }

      const path = controller.value.document.getPath(controller.value.selection.anchor.key);
      expect(path).toEqual(selectionPath);
    });
  });
});
//# sourceMappingURL=markdown.test.js.map