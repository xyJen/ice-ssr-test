{"version":3,"sources":["../../../../../src/__tests__/table/tableHeader/ui.test.tsx"],"names":["setTableColHeader","setTableRowHeader","biActions","TABLE_HEADER_BG_COLOR","TablePlugin","constants","createValue","nodes","Value","create","document","Document","defaultValue","docStyle","tableHeader","type","data","tblStylePr","tcPr","shd","fill","App","props","val","controllerRef","value","setValue","React","useState","plugins","locale","handleChange","useCallback","change","describe","it","table","Table","colsWidth","TableRow","TableCell","jest","fn","content","controller","mock","calls","newTable","cells","querySelectorAll","expect","window","getComputedStyle","backgroundColor","toBe","run"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Controller, Value, Document, Block } from '@ali/4ever-cangjie';\nimport { Table, TableCell, TableRow } from '@ali/4ever-mo';\nimport { TablePlugin } from '@ali/4ever-bamboo';\nimport createBiPlugins from '../../../createBiPlugins';\nimport locale from '../../../locales/zh_CN';\nimport Content from '../../../content';\nimport Provider from '../../../provider';\nimport { getTableFromController } from '../helpers';\nimport { renderEditor, waitForTime } from '@ali/4ever-dev-test';\nimport { biActions, createEmptyParagraph } from '@ali/4ever-plugin-table';\nimport { last } from 'lodash-es';\nimport { hexToRgb } from '../../helper';\nconst { setTableColHeader, setTableRowHeader } = biActions;\n\nconst { TABLE_HEADER_BG_COLOR } = TablePlugin.constants;\n\nconst createValue = (nodes: Block[]) => {\n  return Value.create({\n    document: Document.create({\n      nodes,\n    }),\n  });\n};\n\nconst defaultValue = createValue([createEmptyParagraph('A')]);\n\nconst docStyle = {\n  tableHeader: {\n    type: 'table',\n    data: {\n      tblStylePr: [\n        {\n          type: 'firstRow',\n          tcPr: {\n            shd: {\n              fill: TABLE_HEADER_BG_COLOR,\n            },\n          },\n        },\n        {\n          type: 'firstCol',\n          tcPr: {\n            shd: {\n              fill: TABLE_HEADER_BG_COLOR,\n            },\n          },\n        },\n      ],\n    },\n  }\n}\n\nconst App: React.FC<{ val?: Value; controllerRef?: (controller: Controller) => void }> = (props) => {\n  const { val = defaultValue, controllerRef } = props;\n  const [value, setValue] = React.useState(val);\n  const plugins = createBiPlugins(locale);\n\n  const handleChange = React.useCallback((change) => {\n    setValue(change.value);\n  }, []);\n\n  return (\n    <Provider\n      value={value}\n      plugins={plugins}\n      onChange={handleChange}\n      autoFocus\n      controllerRef={controllerRef}\n      docStyle={docStyle}\n    >\n      <Content />\n    </Provider>\n  );\n};\n\ndescribe('table header ui', () => {\n  it('table row header, first row fill color', async () => {\n    const table = Table.create({\n      data: {\n        colsWidth: [100],\n      },\n      nodes: [\n        TableRow.create({\n          nodes: [TableCell.create({})],\n        }),\n        TableRow.create({\n          nodes: [TableCell.create({})],\n        })\n      ],\n    });\n    const controllerRef = jest.fn();\n    const value = createValue([table]);\n    const { content } = await renderEditor(<App val={value} controllerRef={controllerRef} />);\n    const controller = last(controllerRef.mock.calls)[0] as Controller;\n    let newTable = getTableFromController(controller);\n    let cells = content.querySelectorAll('td');\n    expect(window.getComputedStyle(cells[0]).backgroundColor).toBe('');\n    expect(window.getComputedStyle(cells[1]).backgroundColor).toBe('');\n\n    controller.run('onAction', setTableRowHeader(newTable));\n\n    await waitForTime(200);\n    newTable = getTableFromController(controller);\n    cells = content.querySelectorAll('td');\n    expect(window.getComputedStyle(cells[0]).backgroundColor).toBe(hexToRgb(TABLE_HEADER_BG_COLOR));\n    expect(window.getComputedStyle(cells[1]).backgroundColor).toBe('');\n  });\n\n  it('table col header, first col fill color', async () => {\n    const table = Table.create({\n      data: {\n        colsWidth: [100, 100],\n      },\n      nodes: [TableRow.create({\n        nodes: [TableCell.create({}), TableCell.create({})],\n      })],\n    });\n    const controllerRef = jest.fn();\n    const value = createValue([table]);\n    const { content } = await renderEditor(<App val={value} controllerRef={controllerRef} />);\n    const controller = last(controllerRef.mock.calls)[0] as Controller;\n    let newTable = getTableFromController(controller);\n    let cells = content.querySelectorAll('td');\n    expect(window.getComputedStyle(cells[0]).backgroundColor).toBe('');\n    expect(window.getComputedStyle(cells[1]).backgroundColor).toBe('');\n\n    controller.run('onAction', setTableColHeader(newTable));\n\n    await waitForTime(200);\n    newTable = getTableFromController(controller);\n    cells = content.querySelectorAll('td');\n    expect(window.getComputedStyle(cells[0]).backgroundColor).toBe(hexToRgb(TABLE_HEADER_BG_COLOR));\n    expect(window.getComputedStyle(cells[1]).backgroundColor).toBe('');\n  });\n});\n"],"file":"ui.test.js"}