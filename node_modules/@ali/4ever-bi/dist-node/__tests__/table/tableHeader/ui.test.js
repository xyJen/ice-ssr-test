"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _everBamboo = require("@ali/4ever-bamboo");

var _createBiPlugins = _interopRequireDefault(require("../../../createBiPlugins"));

var _zh_CN = _interopRequireDefault(require("../../../locales/zh_CN"));

var _content = _interopRequireDefault(require("../../../content"));

var _provider = _interopRequireDefault(require("../../../provider"));

var _helpers = require("../helpers");

var _everDevTest = require("@ali/4ever-dev-test");

var _everPluginTable = require("@ali/4ever-plugin-table");

var _lodash = require("lodash");

var _helper = require("../../helper");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  setTableColHeader,
  setTableRowHeader
} = _everPluginTable.biActions;
const {
  TABLE_HEADER_BG_COLOR
} = _everBamboo.TablePlugin.constants;

const createValue = nodes => {
  return _everCangjie.Value.create({
    document: _everCangjie.Document.create({
      nodes
    })
  });
};

const defaultValue = createValue([(0, _everPluginTable.createEmptyParagraph)('A')]);
const docStyle = {
  tableHeader: {
    type: 'table',
    data: {
      tblStylePr: [{
        type: 'firstRow',
        tcPr: {
          shd: {
            fill: TABLE_HEADER_BG_COLOR
          }
        }
      }, {
        type: 'firstCol',
        tcPr: {
          shd: {
            fill: TABLE_HEADER_BG_COLOR
          }
        }
      }]
    }
  }
};

var _ref = /*#__PURE__*/_createElement(_content.default, null);

const App = props => {
  const {
    val = defaultValue,
    controllerRef
  } = props;

  const [value, setValue] = _react.default.useState(val);

  const plugins = (0, _createBiPlugins.default)(_zh_CN.default);

  const handleChange = _react.default.useCallback(change => {
    setValue(change.value);
  }, []);

  return /*#__PURE__*/_createElement(_provider.default, {
    value: value,
    plugins: plugins,
    onChange: handleChange,
    autoFocus: true,
    controllerRef: controllerRef,
    docStyle: docStyle
  }, _ref);
};

describe('table header ui', () => {
  it('table row header, first row fill color', async () => {
    const table = _everMo.Table.create({
      data: {
        colsWidth: [100]
      },
      nodes: [_everMo.TableRow.create({
        nodes: [_everMo.TableCell.create({})]
      }), _everMo.TableRow.create({
        nodes: [_everMo.TableCell.create({})]
      })]
    });

    const controllerRef = jest.fn();
    const value = createValue([table]);
    const {
      content
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(App, {
      val: value,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    let newTable = (0, _helpers.getTableFromController)(controller);
    let cells = content.querySelectorAll('td');
    expect(window.getComputedStyle(cells[0]).backgroundColor).toBe('');
    expect(window.getComputedStyle(cells[1]).backgroundColor).toBe('');
    controller.run('onAction', setTableRowHeader(newTable));
    await (0, _everDevTest.waitForTime)(200);
    newTable = (0, _helpers.getTableFromController)(controller);
    cells = content.querySelectorAll('td');
    expect(window.getComputedStyle(cells[0]).backgroundColor).toBe((0, _helper.hexToRgb)(TABLE_HEADER_BG_COLOR));
    expect(window.getComputedStyle(cells[1]).backgroundColor).toBe('');
  });
  it('table col header, first col fill color', async () => {
    const table = _everMo.Table.create({
      data: {
        colsWidth: [100, 100]
      },
      nodes: [_everMo.TableRow.create({
        nodes: [_everMo.TableCell.create({}), _everMo.TableCell.create({})]
      })]
    });

    const controllerRef = jest.fn();
    const value = createValue([table]);
    const {
      content
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(App, {
      val: value,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    let newTable = (0, _helpers.getTableFromController)(controller);
    let cells = content.querySelectorAll('td');
    expect(window.getComputedStyle(cells[0]).backgroundColor).toBe('');
    expect(window.getComputedStyle(cells[1]).backgroundColor).toBe('');
    controller.run('onAction', setTableColHeader(newTable));
    await (0, _everDevTest.waitForTime)(200);
    newTable = (0, _helpers.getTableFromController)(controller);
    cells = content.querySelectorAll('td');
    expect(window.getComputedStyle(cells[0]).backgroundColor).toBe((0, _helper.hexToRgb)(TABLE_HEADER_BG_COLOR));
    expect(window.getComputedStyle(cells[1]).backgroundColor).toBe('');
  });
});
//# sourceMappingURL=ui.test.js.map