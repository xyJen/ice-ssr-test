"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _lodash = require("lodash");

var _editor = _interopRequireDefault(require("../editor"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
async function createTableAndShowContextMenu(value) {
  const {
    content
  } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
    defaultValue: value
  }));
  expect(content.getElementsByTagName('table').length).toBe(1);

  _everDevTest.fireEvent.contextMenu(content.getElementsByTagName('td')[0]);

  return content;
}

var _ref = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "B"));

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "C"), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "D"));

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A"));

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A"));

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A"));

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, "A"));

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B")));

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "A")));

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "A")));

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B")));

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref14 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "A")));

var _ref15 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref16 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "A")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "B")));

describe('table contextMenu', () => {
  [{
    title: '选区内行被删除，导致选区超出表格实际区域，右键不报错',
    doDelete: controller => {
      const firstRow = controller.value.document.nodes[0].nodes[0];
      return controller.command(_everCangjie.Commands.removeNodeByKey, firstRow.key);
    }
  }, {
    title: '选区内列被删除，导致选区超出表格实际区域，右键不报错',
    doDelete: controller => {
      const table = controller.value.document.nodes[0];
      const firstRaw = table.nodes[0];
      const lastRaw = (0, _lodash.last)(table.nodes);
      const lastCellOfFirstRow = (0, _lodash.last)(firstRaw.nodes);
      const lastCellOfLastRow = (0, _lodash.last)(lastRaw.nodes);
      return controller.command(_everCangjie.Commands.removeNodeByKey, lastCellOfFirstRow.key).command(_everCangjie.Commands.removeNodeByKey, lastCellOfLastRow.key);
    }
  }].forEach(({
    title,
    doDelete
  }) => {
    it(title, async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [100, 100]
        }
      }, _ref, _ref2)));
      const controllerRef = jest.fn();
      const {
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: value,
        controllerRef: controllerRef
      }));
      const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
      const tableSelection = {
        key: 'table-key',
        startRowIndex: 0,
        startColIndex: 0,
        endRowIndex: 1,
        endColIndex: 1
      };
      const table = controller.value.document.getNode('table-key');
      controller.command('selectTableSelection', table, tableSelection); // 删除

      doDelete(controller); // flush

      await (0, _react.wait)();
      const td = content.querySelector('td');
      expect(() => _everDevTest.fireEvent.contextMenu(td)).not.toThrow();
    });
  });
  describe('插入列', () => {
    it('左侧插入一列', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [150]
        }
      }, _ref3)));
      const content = await createTableAndShowContextMenu(value);
      await (0, _react.wait)();

      _everDevTest.fireEvent.click(_react.screen.getByTestId('menu-item-insert-col-left'));

      await (0, _react.wait)();
      expect(content.getElementsByTagName('td').length).toBe(2);
      expect(content.getElementsByTagName('td')[0].textContent).toBe('\uFEFF');
      expect(content.getElementsByTagName('td')[1].textContent).toBe('A');
    });
    it('右侧插入一列', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [150]
        }
      }, _ref4)));
      const content = await createTableAndShowContextMenu(value);
      await (0, _react.wait)();

      _everDevTest.fireEvent.click(_react.screen.getByTestId('menu-item-insert-col-right'));

      await (0, _react.wait)();
      expect(content.getElementsByTagName('td').length).toBe(2);
      expect(content.getElementsByTagName('td')[0].textContent).toBe('A');
      expect(content.getElementsByTagName('td')[1].textContent).toBe('\uFEFF');
    });
  });
  describe('插入行', () => {
    it('上方插入一行', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [150]
        }
      }, _ref5)));
      const content = await createTableAndShowContextMenu(value);
      await (0, _react.wait)();

      _everDevTest.fireEvent.click(_react.screen.getByTestId('menu-item-insert-row-above'));

      await (0, _react.wait)();
      expect(content.getElementsByTagName('td').length).toBe(2);
      expect(content.getElementsByTagName('td')[0].textContent).toBe('\uFEFF');
      expect(content.getElementsByTagName('td')[1].textContent).toBe('A');
    });
    it('下方插入一行', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [150]
        }
      }, _ref6)));
      const content = await createTableAndShowContextMenu(value);
      await (0, _react.wait)();

      _everDevTest.fireEvent.click(_react.screen.getByTestId('menu-item-insert-row-below'));

      await (0, _react.wait)();
      expect(content.getElementsByTagName('td').length).toBe(2);
      expect(content.getElementsByTagName('td')[0].textContent).toBe('A');
      expect(content.getElementsByTagName('td')[1].textContent).toBe('\uFEFF');
    });
  });
  describe('删除列', () => {
    it('删除选中一列', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [150, 150]
        }
      }, _ref7)));
      const content = await createTableAndShowContextMenu(value);
      await (0, _react.wait)();

      _everDevTest.fireEvent.click(_react.screen.getByTestId('menu-item-delete-cols'));

      await (0, _react.wait)();
      expect(content.getElementsByTagName('td').length).toBe(1);
      expect(content.getElementsByTagName('td')[0].textContent).toBe('B');
    });
    it('删除最后一列，同时删除表格', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref8, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [150]
        }
      }, _ref9)));
      const content = await createTableAndShowContextMenu(value);
      await (0, _react.wait)();

      _everDevTest.fireEvent.click(_react.screen.getByTestId('menu-item-delete-cols'));

      await (0, _react.wait)();
      expect(content.getElementsByTagName('td').length).toBe(0);
    });
  });
  describe('删除行', () => {
    it('删除选中一行', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref10, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [150]
        }
      }, _ref11, _ref12)));
      const content = await createTableAndShowContextMenu(value);
      await (0, _react.wait)();

      _everDevTest.fireEvent.click(_react.screen.getByTestId('menu-item-delete-rows'));

      await (0, _react.wait)();
      expect(content.getElementsByTagName('td').length).toBe(1);
      expect(content.getElementsByTagName('td')[0].textContent).toBe('B');
    });
    it('删除最后一行，同时删除表格', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref13, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [150]
        }
      }, _ref14)));
      const content = await createTableAndShowContextMenu(value);
      await (0, _react.wait)();

      _everDevTest.fireEvent.click(_react.screen.getByTestId('menu-item-delete-rows'));

      await (0, _react.wait)();
      expect(content.getElementsByTagName('table').length).toBe(0);
    });
  });
  it('删除表格', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref15, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key",
      data: {
        colsWidth: [150]
      }
    }, _ref16)));
    const content = await createTableAndShowContextMenu(value);
    await _react.screen.findByTestId('menu-item-delete-table');

    _everDevTest.fireEvent.click(_react.screen.getByTestId('menu-item-delete-table'));

    await (0, _react.wait)();
    expect(content.getElementsByTagName('table').length).toBe(0);
  });
});
//# sourceMappingURL=contextMenu.test.js.map