{"version":3,"sources":["../../../../src/__tests__/table/markdown.test.tsx"],"names":["describe","cases","forEach","input","table","selectionPath","it","value","controllerRef","jest","fn","editor","fireEvent","keyDown","controller","mock","calls","expect","document","nodes","toEqual","length","toBe","row","getNodeByPath","tableValue","ansRow","i","text","path","getPath","selection","anchor","key"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport '@testing-library/jest-dom/extend-expect';\nimport {\n  wait,\n} from '@testing-library/react';\nimport { renderEditor, jsx, fireEvent, getHotkeyEvent } from '@ali/4ever-dev-test';\nimport { Controller, Value, Block } from '@ali/4ever-cangjie';\nimport { last } from 'lodash-es';\nimport Editor from '../editor';\nimport { createTable } from './helpers';\n\ndescribe('table markdown', () => {\n  const cases = [\n    ['| | |', [['', ''], ['', '']], [0, 0, 0, 0, 0]],\n    ['|     |    \\t |', [['', ''], ['', '']], [0, 0, 0, 0, 0]],\n    ['|a|b|', [['a', 'b'], ['', '']], [0, 1, 0, 0, 0]],\n    ['| |b|', [['', 'b'], ['', '']], [0, 1, 0, 0, 0]],\n    ['| | b |   c   |', [['', 'b', 'c'], ['', '', '']], [0, 1, 0, 0, 0]],\n    ['|||'],\n    ['||'],\n  ];\n\n  cases.forEach(([input, table, selectionPath]) => {\n    it(`${input} + Enter`, async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">{input}<cursor /></block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n      const controllerRef = jest.fn();\n      const { editor } = await renderEditor(\n        <Editor defaultValue={value} controllerRef={controllerRef} />,\n      );\n\n      fireEvent.keyDown(editor, getHotkeyEvent('enter'));\n\n      await wait();\n      const controller = last(controllerRef.mock.calls)[0] as Controller;\n      if (!table) {\n        expect(controller.value.document.nodes[0]).toEqual(value.document.nodes[0]);\n        expect(controller.value.document.nodes.length).toBe(2);\n        return;\n      }\n\n      const row = controller.value.document.getNodeByPath([0, 0]) as Block;\n      const tableValue = createTable(table as string[][]);\n      const ansRow = tableValue.document.getNodeByPath([0, 0]) as Block;\n\n      for (let i = 0; i < row.nodes.length; i++) {\n        expect(row.nodes[i].text).toBe(ansRow.nodes[i].text);\n      }\n      const path = controller.value.document.getPath(controller.value.selection.anchor.key);\n      expect(path).toEqual(selectionPath);\n    });\n  });\n});\n"],"file":"markdown.test.js"}