{"version":3,"sources":["../../../../../src/__tests__/table/queries/isAllSelectedCellsComplete.test.tsx"],"names":["isAllSelectedCellsComplete","controller","table","selection","query","node","tableSelection","describe","it","expect","toEqual","startRowIndex","endRowIndex","startColIndex","endColIndex","shouldAdjust","controller1","controller2"],"mappings":"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","sourcesContent":["import { Controller } from '@ali/4ever-cangjie';\nimport { ITableSelection } from '@ali/4ever-plugin-table';\nimport { createEditor, createMergeTable, createTableInstance } from '../helpers';\n\ntype PureTableSelection = Omit<ITableSelection, 'key'>;\n\nconst isAllSelectedCellsComplete =\n  (controller: Controller, table, selection) =>\n  controller.query(\n      'isAllSelectedCellsComplete',\n      { node: table, tableSelection: selection }\n    );\n\ndescribe('table/queries/isAllSelectedCellsComplete', () => {\n  it('参数不合法时，返回 false', async () => {\n    const { controller } = await createEditor({\n      table: createTableInstance(),\n    });\n    expect(isAllSelectedCellsComplete(controller, null, {})).toEqual(false);\n    expect(isAllSelectedCellsComplete(controller, {}, null)).toEqual(false);\n    expect(isAllSelectedCellsComplete(controller, null, null)).toEqual(false);\n  });\n\n  it('选中单个单元格时，返回 true', async () => {\n    const table = createTableInstance();\n    const tableSelection: PureTableSelection = {\n      startRowIndex: 0,\n      endRowIndex: 0,\n      startColIndex: 0,\n      endColIndex: 0,\n    };\n    const { controller } = await createEditor({\n      table,\n      tableSelection,\n    });\n    expect(isAllSelectedCellsComplete(controller, table, tableSelection)).toEqual(true);\n  });\n\n  it('选中多个单元格时，返回 true', async () => {\n    const table = createTableInstance({\n      table: [\n        ['a', 'b', 'c'],\n        ['a', 'b', 'c'],\n        ['a', 'b', 'c'],\n      ],\n    });\n    const tableSelection: PureTableSelection = {\n      startRowIndex: 0,\n      endRowIndex: 1,\n      startColIndex: 0,\n      endColIndex: 1,\n    };\n    const { controller } = await createEditor({\n      table,\n      tableSelection,\n    });\n    expect(isAllSelectedCellsComplete(controller, table, tableSelection)).toEqual(true);\n  });\n\n  it('选中非合并单元格 + 合并单元格时，返回 true', async () => {\n    const table = createMergeTable();\n    const tableSelection: PureTableSelection = {\n      startRowIndex: 0,\n      endRowIndex: 2,\n      startColIndex: 0,\n      endColIndex: 2,\n    };\n    const { controller } = await createEditor({\n      table,\n      tableSelection,\n    });\n    expect(isAllSelectedCellsComplete(controller, table, tableSelection)).toEqual(true);\n  });\n\n  it('选中部分合并单元格时，返回 false', async () => {\n    const table = createMergeTable();\n    // 非合并单元格 + 部分合并单元格\n    let tableSelection: PureTableSelection = {\n      startRowIndex: 0,\n      endRowIndex: 1,\n      startColIndex: 0,\n      endColIndex: 1,\n    };\n    const { controller } = await createEditor({\n      table,\n      tableSelection,\n      shouldAdjust: false,\n    });\n    expect(isAllSelectedCellsComplete(controller, table, tableSelection)).toEqual(false);\n    // \b选中两行\n    tableSelection = {\n      startRowIndex: 0,\n      endRowIndex: 1,\n      startColIndex: 0,\n      endColIndex: 3,\n    };\n    const { controller: controller1 } = await createEditor({\n      table,\n      tableSelection,\n      shouldAdjust: false,\n    });\n    expect(isAllSelectedCellsComplete(controller1, table, tableSelection)).toEqual(false);\n    // 只选中合并单元格部分\n    tableSelection = {\n      startRowIndex: 1,\n      endRowIndex: 1,\n      startColIndex: 1,\n      endColIndex: 1,\n    };\n    const { controller: controller2 } = await createEditor({\n      table,\n      tableSelection,\n      shouldAdjust: false,\n    });\n    expect(isAllSelectedCellsComplete(controller2, table, tableSelection)).toEqual(false);\n  });\n\n  it('选中整个表格时，返回 true', async () => {\n    const table = createMergeTable();\n    const tableSelection: PureTableSelection = {\n      startRowIndex: 0,\n      endRowIndex: 3,\n      startColIndex: 0,\n      endColIndex: 3,\n    };\n    const { controller } = await createEditor({\n      table,\n      tableSelection,\n    });\n    expect(isAllSelectedCellsComplete(controller, table, tableSelection)).toEqual(true);\n  });\n});\n"],"file":"isAllSelectedCellsComplete.test.js"}