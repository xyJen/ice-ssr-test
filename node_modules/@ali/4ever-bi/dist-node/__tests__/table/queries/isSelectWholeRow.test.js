"use strict";

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _helpers = require("../helpers");

/** @jsx jsx */
describe('table/queries/isSelectWholeRow', () => {
  it('(单行)完全选中所有列单元格，返回 true', async () => {
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table: [['A', 'B', 'C', 'D'], ['E', 'F', 'G', 'H'], ['I', 'J', 'K', 'L']],
      tableSelection: {
        startColIndex: 0,
        startRowIndex: 0,
        endRowIndex: 0,
        endColIndex: 3
      }
    });
    const table = controller.value.document.findDescendant(_everMo.Table.isTable);
    expect(controller.query('isSelectWholeRow', {
      node: table
    })).toEqual(true);
  });
  it('(多行)完全选中所有列单元格，返回 true', async () => {
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table: [['A', 'B', 'C', 'D'], ['E', 'F', 'G', 'H'], ['I', 'J', 'K', 'L']],
      tableSelection: {
        startColIndex: 0,
        startRowIndex: 0,
        endRowIndex: 1,
        endColIndex: 3
      }
    });
    const table = controller.value.document.findDescendant(_everMo.Table.isTable);
    expect(controller.query('isSelectWholeRow', {
      node: table
    })).toEqual(true);
  });
  it('(全选)完全选中所有列单元格，返回 false', async () => {
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table: [['A', 'B', 'C', 'D'], ['E', 'F', 'G', 'H'], ['I', 'J', 'K', 'L']],
      tableSelection: {
        startColIndex: 0,
        startRowIndex: 0,
        endRowIndex: 2,
        endColIndex: 3
      }
    });
    const table = controller.value.document.findDescendant(_everMo.Table.isTable);
    expect(controller.query('isSelectWholeRow', {
      node: table
    })).toEqual(false);
  });
  it('未完全选中所有列单元格，返回 false', async () => {
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table: [['A', 'B', 'C', 'D'], ['E', 'F', 'G', 'H'], ['I', 'J', 'K', 'L']],
      tableSelection: {
        startColIndex: 0,
        startRowIndex: 0,
        endRowIndex: 0,
        endColIndex: 1
      }
    });
    const table = controller.value.document.findDescendant(_everMo.Table.isTable);
    expect(controller.query('isSelectWholeRow', {
      node: table
    })).toEqual(false);
  });
  describe('不规整表格', () => {
    it('某行缺少单元格', async () => {
      const {
        controller
      } = await (0, _helpers.createEditor)({
        table: [['A', 'B'], ['E'], ['I', 'J']]
      });
      const table = (0, _helpers.getTableFromController)(controller);
      const {
        selection
      } = controller.value;
      const newSelection = selection.moveAnchorToStartOfNode(table.nodes[1].nodes[0], controller).moveFocusToStartOfNode(table.nodes[2].nodes[1], controller);
      controller.command(_everCangjie.Commands.select, newSelection);
      const tableSelection = controller.query('tableSelection');
      const expectTblSelection = {
        startRowIndex: 1,
        endRowIndex: 2,
        startColIndex: 0,
        endColIndex: 1,
        key: table.key
      };
      expect(tableSelection).toEqual(expectTblSelection);
      expect(controller.query('isSelectWholeRow', {
        node: table
      })).toBe(true);
    });
  });
});
//# sourceMappingURL=isSelectWholeRow.test.js.map