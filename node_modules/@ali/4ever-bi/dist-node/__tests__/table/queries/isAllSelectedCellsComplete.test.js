"use strict";

var _helpers = require("../helpers");

const isAllSelectedCellsComplete = (controller, table, selection) => controller.query('isAllSelectedCellsComplete', {
  node: table,
  tableSelection: selection
});

describe('table/queries/isAllSelectedCellsComplete', () => {
  it('参数不合法时，返回 false', async () => {
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table: (0, _helpers.createTableInstance)()
    });
    expect(isAllSelectedCellsComplete(controller, null, {})).toEqual(false);
    expect(isAllSelectedCellsComplete(controller, {}, null)).toEqual(false);
    expect(isAllSelectedCellsComplete(controller, null, null)).toEqual(false);
  });
  it('选中单个单元格时，返回 true', async () => {
    const table = (0, _helpers.createTableInstance)();
    const tableSelection = {
      startRowIndex: 0,
      endRowIndex: 0,
      startColIndex: 0,
      endColIndex: 0
    };
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table,
      tableSelection
    });
    expect(isAllSelectedCellsComplete(controller, table, tableSelection)).toEqual(true);
  });
  it('选中多个单元格时，返回 true', async () => {
    const table = (0, _helpers.createTableInstance)({
      table: [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]
    });
    const tableSelection = {
      startRowIndex: 0,
      endRowIndex: 1,
      startColIndex: 0,
      endColIndex: 1
    };
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table,
      tableSelection
    });
    expect(isAllSelectedCellsComplete(controller, table, tableSelection)).toEqual(true);
  });
  it('选中非合并单元格 + 合并单元格时，返回 true', async () => {
    const table = (0, _helpers.createMergeTable)();
    const tableSelection = {
      startRowIndex: 0,
      endRowIndex: 2,
      startColIndex: 0,
      endColIndex: 2
    };
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table,
      tableSelection
    });
    expect(isAllSelectedCellsComplete(controller, table, tableSelection)).toEqual(true);
  });
  it('选中部分合并单元格时，返回 false', async () => {
    const table = (0, _helpers.createMergeTable)(); // 非合并单元格 + 部分合并单元格

    let tableSelection = {
      startRowIndex: 0,
      endRowIndex: 1,
      startColIndex: 0,
      endColIndex: 1
    };
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table,
      tableSelection,
      shouldAdjust: false
    });
    expect(isAllSelectedCellsComplete(controller, table, tableSelection)).toEqual(false); // 选中两行

    tableSelection = {
      startRowIndex: 0,
      endRowIndex: 1,
      startColIndex: 0,
      endColIndex: 3
    };
    const {
      controller: controller1
    } = await (0, _helpers.createEditor)({
      table,
      tableSelection,
      shouldAdjust: false
    });
    expect(isAllSelectedCellsComplete(controller1, table, tableSelection)).toEqual(false); // 只选中合并单元格部分

    tableSelection = {
      startRowIndex: 1,
      endRowIndex: 1,
      startColIndex: 1,
      endColIndex: 1
    };
    const {
      controller: controller2
    } = await (0, _helpers.createEditor)({
      table,
      tableSelection,
      shouldAdjust: false
    });
    expect(isAllSelectedCellsComplete(controller2, table, tableSelection)).toEqual(false);
  });
  it('选中整个表格时，返回 true', async () => {
    const table = (0, _helpers.createMergeTable)();
    const tableSelection = {
      startRowIndex: 0,
      endRowIndex: 3,
      startColIndex: 0,
      endColIndex: 3
    };
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table,
      tableSelection
    });
    expect(isAllSelectedCellsComplete(controller, table, tableSelection)).toEqual(true);
  });
});
//# sourceMappingURL=isAllSelectedCellsComplete.test.js.map