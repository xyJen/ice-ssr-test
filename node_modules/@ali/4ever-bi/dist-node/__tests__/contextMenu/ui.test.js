"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _react2 = require("@testing-library/react");

var _everCangjie = require("@ali/4ever-cangjie");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _createCustomizedBiPlugins = _interopRequireDefault(require("../../createCustomizedBiPlugins"));

var _everPluginPcContexMenu = require("@ali/4ever-plugin-pc-contex-menu");

/** @jsx jsx */
const defaultValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello ", (0, _everDevTest.jsx)("cursor", null), "Cangjie")));
const LIST_REORDER_ACTION = Symbol('list-reorder');
const LIST_ORDER_ACTION = Symbol('list-order');
const ALIGN_ACTION = Symbol('align');
const NOOP_ACTION = Symbol('noop');

const ListPlugin = () => ({
  renderNode: (props, controller, next) => {
    const {
      node,
      attributes,
      children
    } = props;

    if (_everCangjie.Block.isBlock(node) && node.type === 'paragraph') {
      return (0, _everDevTest.jsx)("div", (0, _extends2.default)({}, attributes, {
        "data-testid": "paragraph"
      }), children());
    }

    return next();
  },
  contextMenu: (controller, next) => {
    const others = next() || [];
    const items = [{
      name: '重新编号',
      key: 'list-reorder',
      action: {
        type: LIST_REORDER_ACTION
      },
      options: {
        group: 2,
        checked: true
      }
    }, {
      name: '继续编号',
      key: 'list-order',
      action: {
        type: LIST_ORDER_ACTION
      },
      options: {
        group: 2,
        icon: 'list-order-icon',
        hotKey: 'cmd+o'
      }
    }];
    return [...items, ...others];
  }
});

const AlignPlugin = () => ({
  contextMenu: (controller, next) => {
    const others = next() || [];
    const items = [{
      name: '左对齐',
      key: 'align-left',
      action: {
        type: ALIGN_ACTION,
        payload: 'left'
      },
      options: {
        inline: true,
        icon: 'left-icon'
      }
    }, {
      name: '居中对齐',
      key: 'align-center',
      action: {
        type: ALIGN_ACTION,
        payload: 'center'
      },
      options: {
        inline: true,
        keepMenu: true,
        icon: 'center-icon'
      }
    }, {
      name: '右对齐',
      key: 'align-right',
      action: {
        type: ALIGN_ACTION,
        payload: 'right'
      },
      options: {
        inline: true,
        disable: true
      }
    }];
    return [...items, ...others];
  }
});

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const App = props => {
  const {
    plugins = {}
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const createBiPlugins = (0, _createCustomizedBiPlugins.default)({
    contextMenu: _everPluginPcContexMenu.biFactory,
    ...plugins,
    list: ListPlugin,
    align: AlignPlugin
  });
  const handleChange = React.useCallback(change => {
    setValue(change.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    plugins: createBiPlugins(),
    onChange: handleChange,
    autoFocus: true
  }, _ref);
};

async function renderContextMenu(plugins = {}) {
  const results = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(App, {
    plugins: plugins
  }), {
    container: document.body
  });
  const {
    findByTestId
  } = results;
  const paragraph = await findByTestId('paragraph');

  _everDevTest.fireEvent.contextMenu(paragraph);

  const contextMenu = await findByTestId('bi-contextmenu');
  return { ...results,
    contextMenu
  };
}

const DEFAULT_GROUP_COUNT = 1;
describe('Bi/contextMenu/ui', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
    jest.clearAllMocks();
  });
  test('render group', async () => {
    const {
      findAllByTestId,
      findByText
    } = await renderContextMenu();
    const groups = await findAllByTestId('contextmenu-group'); // default group + list group + align group

    expect(groups).toHaveLength(DEFAULT_GROUP_COUNT + 2);
    const listGroup = groups[1];
    const item = await findByText(/重新编号/);
    expect(item.closest('[data-testid="contextmenu-group"]')).toBe(listGroup); // divider

    const dividers = await findAllByTestId('contextmenu-divider');
    expect(dividers).toHaveLength(DEFAULT_GROUP_COUNT + 1);
  });
  test('render block item', async () => {
    const {
      findByTestId,
      findByText,
      queryAllByText
    } = await renderContextMenu();
    const item = await findByTestId('2-list-order');
    expect(item.textContent.toLocaleLowerCase()).toBe('list-order-icon继续编号cmd+o');
    const icon = await findByText('list-order-icon'); // disable toolip for block menu item

    _everDevTest.fireEvent.mouseOver(icon);

    await (0, _everDevTest.waitForTime)(50);
    expect(queryAllByText('继续编号')).toHaveLength(1);
  });
  test('render inline item with icon', async () => {
    const {
      findByText,
      queryByText
    } = await renderContextMenu(); // render icon

    const icon = await findByText('left-icon'); // do not render name

    expect(queryByText('左对齐')).not.toBeInTheDocument(); // hover to show name

    _everDevTest.fireEvent.mouseOver(icon);

    await findByText('左对齐');
  });
  test('render inline item without icon', async () => {
    const {
      findByText
    } = await renderContextMenu(); // render name when icon is undefined

    await findByText('右对齐');
  });
  test('customize menu item action', async () => {
    const onAlignToLeft = jest.fn();
    const plugins = {
      alignToLeft: () => ({
        onAction: (action, controller, next) => {
          if (action.type === ALIGN_ACTION) {
            onAlignToLeft(action.payload);
            return controller;
          }

          return next();
        }
      })
    };
    const {
      findByText
    } = await renderContextMenu(plugins);
    const align = await findByText(/left-icon/);

    _everDevTest.fireEvent.click(align);

    expect(onAlignToLeft).toBeCalledWith('left');
  });
  test('disable menu item', async () => {
    const onAlignToRight = jest.fn();
    const plugins = {
      alignToRight: () => ({
        onAction: (action, controller, next) => {
          if (action.type === ALIGN_ACTION) {
            onAlignToRight(action.payload);
            return controller;
          }

          return next();
        }
      })
    };
    const {
      findByText
    } = await renderContextMenu(plugins);
    const align = await findByText(/右对齐/);

    _everDevTest.fireEvent.click(align);

    expect(onAlignToRight).not.toBeCalled();
  });
  test('close menu when item clicked by default', async () => {
    const {
      findByText,
      queryByTestId
    } = await renderContextMenu();
    const align = await findByText(/left-icon/);

    _everDevTest.fireEvent.click(align);

    await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId('bi-contextmenu'));
  });
  test('keep menu when item clicked', async () => {
    const {
      findByText,
      queryByTestId
    } = await renderContextMenu();
    const align = await findByText(/center-icon/);

    _everDevTest.fireEvent.click(align);

    await (0, _everDevTest.waitForTime)(50);
    expect(queryByTestId('bi-contextmenu')).toBeInTheDocument();
  });
  test('check block menu item', async () => {
    const {
      findByText
    } = await renderContextMenu(); // render checked item

    const checked = await findByText('重新编号');
    expect(checked.closest('[data-checked]')).toBeInTheDocument();
  });
  test('override context menu', async () => {
    const plugins = {
      override: () => ({
        contextMenu: () => [{
          name: 'action1',
          key: 'action1',
          action: {
            type: NOOP_ACTION
          },
          options: {
            group: 1
          }
        }, {
          name: 'action2',
          key: 'action2',
          action: {
            type: NOOP_ACTION
          },
          options: {
            group: 1
          }
        }]
      })
    };
    const {
      findAllByTestId,
      findByText
    } = await renderContextMenu(plugins);
    const groups = await findAllByTestId('contextmenu-group');
    expect(groups).toHaveLength(1);
    await findByText(/action1/);
    await findByText(/action2/);
  });
});
//# sourceMappingURL=ui.test.js.map