"use strict";

var _everUtils = require("@ali/4ever-utils");

describe('Bi/common/utils', () => {
  describe('getMarkTextMatchInfo', () => {
    const commonCases = [// normal 情况
    ['*1*', {
      start: 1,
      end: 2,
      total: 1
    }], ['*12*', {
      start: 1,
      end: 3,
      total: 2
    }], ['*123*', {
      start: 1,
      end: 4,
      total: 3
    }], // 内部有空白符
    ['*foo bar*', {
      start: 1,
      end: 8,
      total: 7
    }], // 内侧有标点
    ['a *"foo"*', {
      start: 3,
      end: 8,
      total: 5
    }], ['*(*', {
      start: 1,
      end: 2,
      total: 1
    }], // 空白
    ['', null], ['   ', null], // 仅包含 character
    ['****', null], // 不一样的 delimiter
    ['*abc_', null]];
    const cases = [{
      title: '默认不允许内侧空白符，允许 intraword',
      mark: {
        delimiter: {
          character: '*',
          size: 1
        },
        insideWhitespace: false
      },
      texts: [...commonCases, // 不允许内侧有空白符
      ['* 1 *', null], ['* 12 *', null], ['* 123 *', null], ['* 1 3 *', null], // 允许 intraword
      ['123*45*', {
        start: 4,
        end: 6,
        total: 2
      }], ['123 *56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123,*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123，*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['1 *3*5*', {
        start: 5,
        end: 6,
        total: 1
      }]]
    }, {
      title: '不允许内侧空白符，不允许 intraword',
      mark: {
        delimiter: {
          character: '*',
          size: 1,
          disableIntraword: true
        },
        insideWhitespace: false
      },
      texts: [...commonCases, // 不允许内侧有空白符
      ['* 1 *', null], ['* 12 *', null], ['* 123 *', null], ['* 1 3 *', null], // 不允许 intraword
      ['123*45*', null], ['123 *56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123,*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123，*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123。*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123？*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123！*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123：*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123；*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['1 *3*5*', null]]
    }, {
      title: '允许内侧空白符，不允许 intraword',
      mark: {
        delimiter: {
          character: '*',
          size: 1,
          disableIntraword: true
        },
        insideWhitespace: true
      },
      texts: [...commonCases, // 允许内侧有空白符
      ['* 2 *', {
        start: 1,
        end: 4,
        total: 3
      }], ['* 23 *', {
        start: 1,
        end: 5,
        total: 4
      }], ['* 234 *', {
        start: 1,
        end: 6,
        total: 5
      }], ['* 3 4 *', {
        start: 1,
        end: 6,
        total: 5
      }], // 不允许 intraword
      ['123*45*', null], ['123 *56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123,*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123，*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123。*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123？*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123！*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123：*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123；*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['1 *3*5*', null]]
    }, {
      title: '允许内侧空白符，允许 intraword',
      mark: {
        delimiter: {
          character: '*',
          size: 1
        },
        insideWhitespace: true
      },
      texts: [...commonCases, // 允许内侧有空白符
      ['* 2 *', {
        start: 1,
        end: 4,
        total: 3
      }], ['* 23 *', {
        start: 1,
        end: 5,
        total: 4
      }], ['* 234 *', {
        start: 1,
        end: 6,
        total: 5
      }], ['* 3 4 *', {
        start: 1,
        end: 6,
        total: 5
      }], // 允许 intraword
      ['123*45*', {
        start: 4,
        end: 6,
        total: 2
      }], ['123 *56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['123,*56*', {
        start: 5,
        end: 7,
        total: 2
      }], ['1 *3*5*', {
        start: 5,
        end: 6,
        total: 1
      }]]
    }, {
      title: '默认不允许内侧空白符，允许 intraword，delimiter size 改变',
      mark: {
        delimiter: {
          character: '+',
          size: 2
        },
        insideWhitespace: false
      },
      texts: [// normal 情况
      ['++1++', {
        start: 2,
        end: 3,
        total: 1
      }], ['++12++', {
        start: 2,
        end: 4,
        total: 2
      }], ['++123++', {
        start: 2,
        end: 5,
        total: 3
      }], // 内部有空白符
      ['++foo bar++', {
        start: 2,
        end: 9,
        total: 7
      }], // 内侧有标点
      ['a ++"foo"++', {
        start: 4,
        end: 9,
        total: 5
      }], ['++(++', {
        start: 2,
        end: 3,
        total: 1
      }], // 空白
      ['', null], ['   ', null], // 仅包含 character
      ['++++++++', null], // 不允许内侧有空白符
      ['++ 1 ++', null], ['++ 12 ++', null], ['++ 123 ++', null], ['++ 1 3 ++', null], // 允许 intraword
      ['123++45++', {
        start: 5,
        end: 7,
        total: 2
      }], ['123 ++56++', {
        start: 6,
        end: 8,
        total: 2
      }], ['123,++56++', {
        start: 6,
        end: 8,
        total: 2
      }], ['123，++56++', {
        start: 6,
        end: 8,
        total: 2
      }], ['1 ++4++7++', {
        start: 7,
        end: 8,
        total: 1
      }]]
    }];
    cases.forEach(({
      title,
      mark,
      texts
    }) => {
      it(title, () => {
        texts.forEach(([input, output]) => {
          expect((0, _everUtils.getMarkTextMatchInfo)(input, mark.delimiter, mark.insideWhitespace)).toEqual(output);
        });
      });
    });
  });
});
//# sourceMappingURL=utils.test.js.map