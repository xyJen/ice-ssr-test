{"version":3,"sources":["../../../../src/__tests__/formatPainter/ui.part.test.tsx"],"names":["marks","type","data","value","paragraphData","jc","defaultValue","copyAndPasteFormat","controller","container","target","offset","offScreenToolbarItem","querySelector","btn","fireEvent","text","mouseDown","command","Commands","moveAnchorToKey","moveFocusToKey","mouseUp","describe","skip","test","c","leafTexts","querySelectorAll","expect","style","color","toBe","textAlign"],"mappings":";;;;AAEA;;AACA;;AACA;;AACA;;AALA;;AACA;AAMA,MAAMA,KAAK,GAAG,CAAC;AACbC,EAAAA,IAAI,EAAE,OADO;AAEbC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH;AAFO,CAAD,CAAd;AAOA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,EAAE,EAAE;AADgB,CAAtB;AAIA,MAAMC,YAAY,GAChB,qCACE,wCACE;AAAO,EAAA,IAAI,EAAC,WAAZ;AAAwB,EAAA,GAAG,EAAC,YAA5B;AAAyC,EAAA,IAAI,EAAEF;AAA/C,GACE;AAAM,EAAA,GAAG,EAAC,OAAV;AAAkB,EAAA,KAAK,EAAEJ;AAAzB,YAAqC,qCAArC,UADF,CADF,EAIE;AAAO,EAAA,IAAI,EAAC,WAAZ;AAAwB,EAAA,GAAG,EAAC;AAA5B,GACE;AAAM,EAAA,GAAG,EAAC;AAAV,mBADF,CAJF,EAOE;AAAO,EAAA,IAAI,EAAC,WAAZ;AAAwB,EAAA,GAAG,EAAC;AAA5B,GACE;AAAM,EAAA,GAAG,EAAC;AAAV,mBADF,CAPF,CADF,CADF;;AAgBA,eAAeO,kBAAf,CACEC,UADF,EAEEC,SAFF,EAGER,IAHF,EAIES,MAJF,EAKEC,MALF,EAME;AACA;AACA,QAAMC,oBAAoB,GAAGH,SAAS,CAACI,aAAV,CAAwB,oEAAxB,CAA7B;;AACA,MAAID,oBAAJ,EAA0B;AACxB,UAAM,sCAA0BA,oBAA1B,CAAN;AACD;;AAED,QAAME,GAAG,GAAGL,SAAS,CAACI,aAAV,CACV,oCADU,CAAZ;;AAGAE,yBAAUd,IAAV,EAAgBa,GAAhB;;AACA,QAAM,8BAAY,GAAZ,CAAN;AACA,QAAME,IAAI,GAAGP,SAAS,CAACI,aAAV,CAAyB,sBAAqBH,MAAO,IAArD,CAAb;;AAEAK,yBAAUE,SAAV,CAAoBD,IAApB;;AACAR,EAAAA,UAAU,CAACU,OAAX,CAAmBC,sBAASC,eAA5B,EAA6CV,MAA7C,EAAqD,CAArD;AACAF,EAAAA,UAAU,CAACU,OAAX,CAAmBC,sBAASE,cAA5B,EAA4CX,MAA5C,EAAoDC,MAAM,IAAI,CAA9D;;AACAI,yBAAUO,OAAV,CAAkBN,IAAlB;;AACA,QAAM,8BAAY,GAAZ,CAAN;AACA,SAAOA,IAAP;AACD;;AAEDO,QAAQ,CAACC,IAAT,CAAc,8BAAd,EAA8C,MAAM;AAClDC,EAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,QAAIjB,UAAJ;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAgB,MAAM,+BAAa,sBAAC,eAAD;AAAQ,MAAA,YAAY,EAAEH,YAAtB;AAAoC,MAAA,aAAa,EAAGoB,CAAD,IAAO;AAAElB,QAAAA,UAAU,GAAGkB,CAAb;AAAiB;AAA7E,MAAb,CAA5B;AACA,UAAMV,IAAI,GAAG,MAAMT,kBAAkB,CAACC,UAAD,EAAaC,SAAb,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,CAA1C,CAArC;AAEA,UAAMkB,SAAS,GAAGX,IAAI,CAACY,gBAAL,CAAsB,qBAAtB,CAAlB;AAEAC,IAAAA,MAAM,CAACF,SAAS,CAAC,CAAD,CAAT,CAAad,aAAb,CAA2B,qBAA3B,EAAkDiB,KAAlD,CAAwDC,KAAzD,CAAN,CAAsEC,IAAtE,CAA2E,KAA3E;AACAH,IAAAA,MAAM,CAACF,SAAS,CAAC,CAAD,CAAT,CAAad,aAAb,CAA2B,qBAA3B,EAAkDiB,KAAlD,CAAwDC,KAAzD,CAAN,CAAsEC,IAAtE,CAA2E,EAA3E;AACAH,IAAAA,MAAM,CAACpB,SAAS,CAACI,aAAV,CAAwB,iCAAxB,EAA2DiB,KAA3D,CAAiEG,SAAlE,CAAN,CAAmFD,IAAnF,CAAwF,MAAxF;AACD,GAVG,CAAJ;AAWD,CAZD","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport { wait, waitFor, waitForElementToBeRemoved } from '@testing-library/react';\nimport { renderEditor, getHotkeyEvent, jsx, fireEvent, waitForTime } from '@ali/4ever-dev-test';\nimport { Controller, Value, Commands } from '@ali/4ever-cangjie';\nimport Editor from '../editor';\n\nconst marks = [{\n  type: 'color',\n  data: {\n    value: 'red',\n  },\n}];\n\nconst paragraphData = {\n  jc: 'right',\n};\n\nconst defaultValue = (\n  <value>\n    <document>\n      <block type=\"paragraph\" key=\"paragraphA\" data={paragraphData}>\n        <text key=\"textA\" marks={marks}>with <cursor />marks</text>\n      </block>\n      <block type=\"paragraph\" key=\"paragraphB\">\n        <text key=\"textB\">without marks</text>\n      </block>\n      <block type=\"paragraph\" key=\"paragraphC\">\n        <text key=\"textC\">without marks</text>\n      </block>\n    </document>\n  </value>\n) as unknown as Value;\n\nasync function copyAndPasteFormat(\n  controller: Controller,\n  container: HTMLElement,\n  type: 'click' | 'doubleClick',\n  target: string,\n  offset?: number,\n) {\n  // 避免选中离屏渲染的 toolbar\n  const offScreenToolbarItem = container.querySelector('[class*=\"OffScreen\"] [data-testid=\"SelectWrap-bi-toolbar-heading\"]');\n  if (offScreenToolbarItem) {\n    await waitForElementToBeRemoved(offScreenToolbarItem);\n  }\n\n  const btn = container.querySelector(\n    '[data-testid=\"bi-toolbar-painter\"]',\n  );\n  fireEvent[type](btn);\n  await waitForTime(100);\n  const text = container.querySelector(`[data-cangjie-key=\"${target}\"]`);\n\n  fireEvent.mouseDown(text);\n  controller.command(Commands.moveAnchorToKey, target, 0);\n  controller.command(Commands.moveFocusToKey, target, offset || 0);\n  fireEvent.mouseUp(text);\n  await waitForTime(100);\n  return text;\n}\n\ndescribe.skip('Bi/formatPainter/ui/工具栏格式刷行为', () => {\n  test('选中部分仅粘贴文本样式', async () => {\n    let controller: Controller | undefined;\n    const { container } = await renderEditor(<Editor defaultValue={defaultValue} controllerRef={(c) => { controller = c; }} />);\n    const text = await copyAndPasteFormat(controller, container, 'click', 'textB', 7);\n\n    const leafTexts = text.querySelectorAll('[data-cangjie-leaf]');\n\n    expect(leafTexts[0].querySelector('[data-cangjie-mark]').style.color).toBe('red');\n    expect(leafTexts[1].querySelector('[data-cangjie-leaf]').style.color).toBe('');\n    expect(container.querySelector('[data-cangjie-key=\"paragraphB\"]').style.textAlign).toBe('left');\n  });\n});\n"],"file":"ui.part.test.js"}