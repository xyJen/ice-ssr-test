"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _editor = _interopRequireDefault(require("../editor"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const marks = [{
  type: 'color',
  data: {
    value: 'red'
  }
}];
const paragraphData = {
  jc: 'right'
};
const defaultValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "paragraphA",
  data: paragraphData
}, (0, _everDevTest.jsx)("text", {
  key: "textA",
  marks: marks
}, "with ", (0, _everDevTest.jsx)("cursor", null), "marks")), (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "paragraphB"
}, (0, _everDevTest.jsx)("text", {
  key: "textB"
}, "without marks")), (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "paragraphC"
}, (0, _everDevTest.jsx)("text", {
  key: "textC"
}, "without marks"))));

async function copyAndPasteFormat(controller, container, type, target, offset) {
  // 避免选中离屏渲染的 toolbar
  const offScreenToolbarItem = container.querySelector('[class*="OffScreen"] [data-testid="SelectWrap-bi-toolbar-heading"]');

  if (offScreenToolbarItem) {
    await (0, _react.waitForElementToBeRemoved)(offScreenToolbarItem);
  }

  const btn = container.querySelector('[data-testid="bi-toolbar-painter"]');

  _everDevTest.fireEvent[type](btn);

  await (0, _everDevTest.waitForTime)(100);
  const text = container.querySelector(`[data-cangjie-key="${target}"]`);

  _everDevTest.fireEvent.mouseDown(text);

  controller.command(_everCangjie.Commands.moveAnchorToKey, target, 0);
  controller.command(_everCangjie.Commands.moveFocusToKey, target, offset || 0);

  _everDevTest.fireEvent.mouseUp(text);

  await (0, _everDevTest.waitForTime)(100);
  return text;
}

describe.skip('Bi/formatPainter/ui/工具栏格式刷行为', () => {
  test('选中部分仅粘贴文本样式', async () => {
    let controller;
    const {
      container
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: defaultValue,
      controllerRef: c => {
        controller = c;
      }
    }));
    const text = await copyAndPasteFormat(controller, container, 'click', 'textB', 7);
    const leafTexts = text.querySelectorAll('[data-cangjie-leaf]');
    expect(leafTexts[0].querySelector('[data-cangjie-mark]').style.color).toBe('red');
    expect(leafTexts[1].querySelector('[data-cangjie-leaf]').style.color).toBe('');
    expect(container.querySelector('[data-cangjie-key="paragraphB"]').style.textAlign).toBe('left');
  });
});
//# sourceMappingURL=ui.part.test.js.map