"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getContent = getContent;
exports.getHotKeyEvent = getHotKeyEvent;
exports.removeInvisibleChars = removeInvisibleChars;
exports.hexToRgb = hexToRgb;
exports.weWaitFor = weWaitFor;
exports.weWaitForElement = weWaitForElement;
exports.weWaitForElementToBeRemoved = weWaitForElementToBeRemoved;
exports.triggerTransitionEnd = triggerTransitionEnd;

var _isHotkey = require("is-hotkey");

var _react = require("@testing-library/react");

/* eslint-disable import/no-extraneous-dependencies */
function getContent(editor) {
  return editor.find('Content').last();
} // Ref: https://github.com/ianstormtaylor/is-hotkey/blob/79083a76530733ab228235cde82453805518ce4b/test/index.js#L9


function getHotKeyEvent(value, ...modifiers) {
  const event = {
    altKey: modifiers.includes('alt'),
    ctrlKey: modifiers.includes('ctrl'),
    metaKey: modifiers.includes('meta'),
    shiftKey: modifiers.includes('shift')
  };

  if (typeof value === 'number') {
    event.which = value;
  }

  if (typeof value === 'string') {
    event.key = value;
    event.which = (0, _isHotkey.toKeyCode)(value);
  }

  return event;
}
/**
 * 去除不可见字符，便于断言判断
 * @param text
 */


function removeInvisibleChars(text) {
  return text.replace(/\uFEFF/g, '');
}

function hexToRgb(hex) {
  const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

  if (result) {
    return `rgb(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)})`;
  }

  return '';
}

function weWaitFor(callback, options) {
  let weOptions = { ...options
  };

  if (!weOptions || !weOptions.timeout) {
    weOptions.timeout = 10000;
  }

  return (0, _react.waitFor)(callback, weOptions);
}

function weWaitForElement(callback, options) {
  let weOptions = { ...options
  };

  if (!weOptions || !weOptions.timeout) {
    weOptions.timeout = 10000;
  }

  return (0, _react.waitForElement)(callback, weOptions);
}

function weWaitForElementToBeRemoved(callback, options) {
  let weOptions = { ...options
  };

  if (!weOptions || !weOptions.timeout) {
    weOptions.timeout = 10000;
  }

  return (0, _react.waitForElementToBeRemoved)(callback, weOptions);
} // 模拟触发 animation end 事件


function triggerTransitionEnd(element) {
  let event = document.createEvent("Event");
  event.initEvent("transitionend", true, true);
  element?.dispatchEvent(event);
}
//# sourceMappingURL=helper.js.map