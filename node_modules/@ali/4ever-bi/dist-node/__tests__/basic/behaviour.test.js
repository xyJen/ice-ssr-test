"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _everPluginBasic = require("@ali/4ever-plugin-basic");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _createBiPlugins.default)({}).array;

var _ref = (0, _everDevTest.jsx)("block", {
  type: "card"
}, "BLOCK");

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "123456789")));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234", (0, _everDevTest.jsx)("cursor", null), "56789")));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123456789", (0, _everDevTest.jsx)("cursor", null))));

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "1234", (0, _everDevTest.jsx)("focus", null), "56789")));

var _ref10 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "123456789", (0, _everDevTest.jsx)("focus", null))));

var _ref12 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234", (0, _everDevTest.jsx)("anchor", null), "56789", (0, _everDevTest.jsx)("focus", null))));

var _ref14 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref16 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref18 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "hr",
  cursor: "before"
})));

var _ref20 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "hr",
  cursor: "before"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "aa")));

var _ref22 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "hr",
  cursor: "after"
})));

var _ref24 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "hr",
  cursor: "after"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "aa")));

var _ref26 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "hr"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref28 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "hr"
}, (0, _everDevTest.jsx)("cursor", null)), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "aa")));

var _ref30 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("inline", {
  type: "tag"
}, (0, _everDevTest.jsx)("cursor", null)))));

var _ref32 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("inline", {
  type: "tag"
}, (0, _everDevTest.jsx)("cursor", null)), "123")));

var _ref34 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123", (0, _everDevTest.jsx)("inline", {
  type: "tag"
}, (0, _everDevTest.jsx)("cursor", null)), "456")));

var _ref36 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123", (0, _everDevTest.jsx)("inline", {
  type: "tag"
}, (0, _everDevTest.jsx)("cursor", null)))));

var _ref38 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123", (0, _everDevTest.jsx)("inline", {
  type: "tag"
}, (0, _everDevTest.jsx)("cursor", null))), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "aa")));

var _ref40 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "123456789");

var _ref41 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234");

var _ref42 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "56789");

var _ref43 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123456789", (0, _everDevTest.jsx)("cursor", null));

var _ref44 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "56789");

var _ref45 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref46 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234", (0, _everDevTest.jsx)("anchor", null), (0, _everDevTest.jsx)("focus", null));

var _ref47 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref48 = (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref49 = (0, _everDevTest.jsx)("block", {
  type: "hr",
  cursor: "before"
});

var _ref50 = (0, _everDevTest.jsx)("block", {
  type: "hr",
  cursor: "before"
});

var _ref51 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "aa");

var _ref52 = (0, _everDevTest.jsx)("block", {
  type: "hr"
});

var _ref53 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref54 = (0, _everDevTest.jsx)("block", {
  type: "hr"
});

var _ref55 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "aa");

var _ref56 = (0, _everDevTest.jsx)("block", {
  type: "hr"
});

var _ref57 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref58 = (0, _everDevTest.jsx)("block", {
  type: "hr"
});

var _ref59 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "aa");

var _ref60 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("inline", {
  type: "tag"
}), (0, _everDevTest.jsx)("cursor", null));

var _ref61 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("inline", {
  type: "tag"
}));

var _ref62 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "123");

var _ref63 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123", (0, _everDevTest.jsx)("inline", {
  type: "tag"
}));

var _ref64 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "456");

var _ref65 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123", (0, _everDevTest.jsx)("inline", {
  type: "tag"
}), (0, _everDevTest.jsx)("cursor", null));

var _ref66 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123", (0, _everDevTest.jsx)("inline", {
  type: "tag"
}), (0, _everDevTest.jsx)("cursor", null));

var _ref67 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "aa");

describe('Bi/basic/behaviour', () => {
  const cases = [{
    name: key => `光标在第一个段落时，${key} + ArrowUp 移动至当前段落段首`,
    mover: arrowUpOnCursorInFirstBlock,
    env: [['Windows', 'Ctrl']]
  }, {
    name: key => `光标在段中时，${key} + ArrowUp 移动至当前段落段首`,
    mover: arrowUpOnCursorInMidOfBlock,
    env: [['Windows', 'Ctrl']]
  }, {
    name: key => `selection 非 collapse时，${key} + ArrowUp 移动至当前段落段首`,
    mover: arrowUpOnSelectionIsExpanded,
    env: [['Windows', 'Ctrl']]
  }, {
    name: key => `光标在最后一个段落时，${key} + ArrowDown 移动至当前段落段尾`,
    mover: arrowDownOnCursorInLastBlock,
    env: [['Windows', 'Ctrl']]
  }, {
    name: key => `光标不在最后一个段落时，${key} + ArrowDown 移动至下一段落段首`,
    mover: arrowDownOnCursorNotInLastBlock,
    env: [['Windows', 'Ctrl']]
  }, {
    name: () => 'focus 在 inline 上，enter 移动光标向右移动一位',
    mover: enterOnCursorOnInline,
    env: [['Windows', '']]
  }];
  describe('move cursor', () => {
    afterEach(() => {
      jest.resetModules();
    });
    cases.forEach(({
      name,
      mover,
      env
    }) => {
      env.forEach(([device, key]) => {
        test(`${device} ${name(key)}`, async () => {
          const {
            input,
            output,
            fn
          } = mover(key);

          const controller = _everCangjie.Controller.create({
            value: input,
            plugins
          });

          const actual = fn(controller).value.toJSON({
            preserveSelections: true
          });
          const expected = output.toJSON({
            preserveSelections: true
          });
          expect(actual).toEqual(expected);
        });
      });
    });
  });
  describe('insert block', () => {
    const mockedBlock = _everCangjie.Block.create({
      type: 'card',
      nodes: [_everCangjie.Text.create('BLOCK')]
    });

    const mockedBlockValue = _ref;

    var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, mockedBlockValue, _ref40));

    var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref41, mockedBlockValue, _ref42));

    var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref43, mockedBlockValue));

    var _ref9 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, mockedBlockValue, _ref44));

    var _ref11 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, mockedBlockValue, _ref45));

    var _ref13 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref46, mockedBlockValue));

    var _ref15 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, mockedBlockValue, _ref47));

    var _ref17 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref48, mockedBlockValue));

    describe('插入块级元素', () => {
      const insertCases = [{
        name: '光标 Collapsed，段首，无空行',
        input: _ref2,
        output: _ref3
      }, {
        name: '光标 Collapsed，段中，无空行',
        input: _ref4,
        output: _ref5
      }, {
        name: '光标 Collapsed，段尾，元素后不产生空行',
        input: _ref6,
        output: _ref7
      }, {
        name: '光标 Expanded，段首～段中，无空行',
        input: _ref8,
        output: _ref9
      }, {
        name: '光标 Expanded，段首～段尾，在元素后产生空行',
        input: _ref10,
        output: _ref11
      }, {
        name: '光标 Expanded，段中～段尾，在元素后不产生空行',
        input: _ref12,
        output: _ref13
      }, {
        name: '光标在 空段落，在元素后产生空行',
        input: _ref14,
        output: _ref15
      }, {
        name: '光标在 空标题，在元素后不产生空行',
        input: _ref16,
        output: _ref17
      }];
      insertCases.forEach(data => {
        test(data.name, async () => {
          const controller = _everCangjie.Controller.create({
            value: data.input,
            plugins
          });

          controller.run('onAction', _everPluginBasic.biActions.createInsertBlockWithoutExtraBlankAction({
            node: mockedBlock
          }));
          const actual = controller.value.toJSON({
            preserveSelections: true
          });
          const expected = controller.setValue(data.output).value.toJSON({
            preserveSelections: true
          });
          expect(actual).toEqual(expected);
        });
      });
    });

    var _ref19 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, mockedBlockValue, _ref49));

    var _ref21 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, mockedBlockValue, _ref50, _ref51));

    var _ref23 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref52, mockedBlockValue, _ref53));

    var _ref25 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref54, mockedBlockValue, _ref55));

    var _ref27 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref56, mockedBlockValue, _ref57));

    var _ref29 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref58, mockedBlockValue, _ref59));

    describe('在 void block 周围插入块级元素', () => {
      const insertOnVoidBlockCases = [{
        name: '光标在 void block 左侧，后面无内容，则在当前内容前插入',
        input: _ref18,
        output: _ref19
      }, {
        name: '光标在 void block 左侧，后面有内容，则在当前内容前插入',
        input: _ref20,
        output: _ref21
      }, {
        name: '光标在 void block 右侧，后面无内容，则在当前内容后插入，内容后有空行',
        input: _ref22,
        output: _ref23
      }, {
        name: '光标在 void block 右侧，后面有内容，则在当前内容后插入，内容后有空行',
        input: _ref24,
        output: _ref25
      }, {
        name: '光标在 void block 上，后面无内容，则在当前内容后插入，内容后有空行',
        input: _ref26,
        output: _ref27
      }, {
        name: '光标在 void block 上，后面有内容，则在当前内容后插入，内容后有空行',
        input: _ref28,
        output: _ref29
      }];
      insertOnVoidBlockCases.forEach(data => {
        test(data.name, async () => {
          const controller = _everCangjie.Controller.create({
            value: data.input,
            plugins
          });

          controller.run('onAction', _everPluginBasic.biActions.createInsertBlockWithoutExtraBlankAction({
            node: mockedBlock
          }));
          const actual = controller.value.toJSON({
            preserveSelections: true
          });
          const expected = controller.setValue(data.output).value.toJSON({
            preserveSelections: true
          });
          expect(actual).toEqual(expected);
        });
      });
    });

    var _ref31 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref60, mockedBlockValue));

    var _ref33 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref61, mockedBlockValue, _ref62));

    var _ref35 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref63, mockedBlockValue, _ref64));

    var _ref37 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref65, mockedBlockValue));

    var _ref39 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref66, mockedBlockValue, _ref67));

    describe('在 void inline 上插入块级元素，则在 inline 后插入', () => {
      const insertOnVoidInlineCases = [{
        name: '单独一个 inline，后面无 block，无空行',
        input: _ref30,
        output: _ref31
      }, {
        name: 'inline 在段首，后面无 block，则后无空行',
        input: _ref32,
        output: _ref33
      }, {
        name: 'inline 在段中，后面无 block，则后无空行',
        input: _ref34,
        output: _ref35
      }, {
        name: 'inline 在段尾，后面无 block，则后无空行',
        input: _ref36,
        output: _ref37
      }, {
        name: 'inline 在段尾，后面有 block，则后有空行',
        input: _ref38,
        output: _ref39
      }];
      insertOnVoidInlineCases.forEach(data => {
        test(data.name, async () => {
          const controller = _everCangjie.Controller.create({
            value: data.input,
            plugins
          });

          controller.run('onAction', _everPluginBasic.biActions.createInsertBlockWithoutExtraBlankAction({
            node: mockedBlock
          }));
          const actual = controller.value.toJSON({
            preserveSelections: true
          });
          const expected = controller.setValue(data.output).value.toJSON({
            preserveSelections: true
          });
          expect(actual).toEqual(expected);
        });
      });
    });
  });
});

var _ref68 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Thi", (0, _everDevTest.jsx)("cursor", null), "s is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is second paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is third paragraph")));

var _ref69 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "This is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is second paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is third paragraph")));

function arrowUpOnCursorInFirstBlock(key) {
  const input = _ref68;
  const output = _ref69;

  const fn = controller => {
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getReactHotkeyEvent)(`${key}+arrowup`)));
    return controller;
  };

  return {
    input,
    output,
    fn
  };
}

var _ref70 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Thi", (0, _everDevTest.jsx)("cursor", null), "s is second paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is third paragraph")));

var _ref71 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "This is second paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is third paragraph")));

function arrowUpOnCursorInMidOfBlock(key) {
  const input = _ref70;
  const output = _ref71;

  const fn = controller => {
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getReactHotkeyEvent)(`${key}+arrowup`)));
    return controller;
  };

  return {
    input,
    output,
    fn
  };
}

var _ref72 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Thi", (0, _everDevTest.jsx)("focus", null), "s is second paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is third paragraph")));

var _ref73 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "This is second paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is third paragraph")));

function arrowUpOnSelectionIsExpanded(key) {
  const input = _ref72;
  const output = _ref73;

  const fn = controller => {
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getReactHotkeyEvent)(`${key}+arrowup`)));
    return controller;
  };

  return {
    input,
    output,
    fn
  };
}

var _ref74 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is second paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "This is third paragraph")));

var _ref75 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is second paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is third paragraph", (0, _everDevTest.jsx)("cursor", null))));

function arrowDownOnCursorInLastBlock(key) {
  const input = _ref74;
  const output = _ref75;

  const fn = controller => {
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getReactHotkeyEvent)(`${key}+arrowdown`)));
    return controller;
  };

  return {
    input,
    output,
    fn
  };
}

var _ref76 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is second ", (0, _everDevTest.jsx)("cursor", null), "paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "This is third paragraph")));

var _ref77 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is second paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is third paragraph", (0, _everDevTest.jsx)("cursor", null))));

function arrowDownOnCursorNotInLastBlock(key) {
  const input = _ref76;
  const output = _ref77;

  const fn = controller => {
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getReactHotkeyEvent)(`${key}+arrowdown`)));
    return controller;
  };

  return {
    input,
    output,
    fn
  };
}

var _ref78 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("inline", {
  type: "image",
  anchor: "before",
  cursor: "after"
}), "123")));

var _ref79 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
  type: "image"
}, (0, _everDevTest.jsx)("text", null)), (0, _everDevTest.jsx)("cursor", null), "123")));

function enterOnCursorOnInline() {
  const input = _ref78;
  const output = _ref79;

  const fn = controller => {
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getReactHotkeyEvent)('enter')));
    return controller;
  };

  return {
    input,
    output,
    fn
  };
}

;
//# sourceMappingURL=behaviour.test.js.map