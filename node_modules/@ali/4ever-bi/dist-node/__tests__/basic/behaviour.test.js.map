{"version":3,"sources":["../../../../src/__tests__/basic/behaviour.test.tsx"],"names":["plugins","array","describe","cases","name","key","mover","arrowUpOnCursorInFirstBlock","env","arrowUpOnCursorInMidOfBlock","arrowUpOnSelectionIsExpanded","arrowDownOnCursorInLastBlock","arrowDownOnCursorNotInLastBlock","enterOnCursorOnInline","afterEach","jest","resetModules","forEach","device","test","input","output","fn","controller","Controller","create","value","actual","toJSON","preserveSelections","expected","expect","toEqual","mockedBlock","Block","type","nodes","Text","mockedBlockValue","insertCases","data","run","basicActions","createInsertBlockWithoutExtraBlankAction","node","setValue","insertOnVoidBlockCases","insertOnVoidInlineCases","KeyboardEvent"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport { jsx, getReactHotkeyEvent } from '@ali/4ever-dev-test';\nimport { Controller, Value, Block, Text } from '@ali/4ever-cangjie';\nimport createBiPlugins from '../../createBiPlugins';\nimport { biActions as basicActions } from '@ali/4ever-plugin-basic';\n\nconst plugins = createBiPlugins({}).array;\n\ndescribe('Bi/basic/behaviour', () => {\n  const cases = [\n    {\n      name: (key: string) => `光标在第一个段落时，${key} + ArrowUp 移动至当前段落段首`,\n      mover: arrowUpOnCursorInFirstBlock,\n      env: [\n        ['Windows', 'Ctrl'],\n      ],\n    },\n    {\n      name: (key: string) => `光标在段中时，${key} + ArrowUp 移动至当前段落段首`,\n      mover: arrowUpOnCursorInMidOfBlock,\n      env: [\n        ['Windows', 'Ctrl'],\n      ],\n    },\n    {\n      name: (key: string) => `selection 非 collapse时，${key} + ArrowUp 移动至当前段落段首`,\n      mover: arrowUpOnSelectionIsExpanded,\n      env: [\n        ['Windows', 'Ctrl'],\n      ],\n    },\n    {\n      name: (key: string) => `光标在最后一个段落时，${key} + ArrowDown 移动至当前段落段尾`,\n      mover: arrowDownOnCursorInLastBlock,\n      env: [\n        ['Windows', 'Ctrl'],\n      ],\n    },\n    {\n      name: (key: string) => `光标不在最后一个段落时，${key} + ArrowDown 移动至下一段落段首`,\n      mover: arrowDownOnCursorNotInLastBlock,\n      env: [\n        ['Windows', 'Ctrl'],\n      ],\n    },\n    {\n      name: () => 'focus 在 inline 上，enter 移动光标向右移动一位',\n      mover: enterOnCursorOnInline,\n      env: [\n        ['Windows', ''],\n      ],\n    },\n  ];\n\n  describe('move cursor', () => {\n    afterEach(() => {\n      jest.resetModules();\n    });\n\n    cases.forEach(({ name, mover, env }) => {\n      env.forEach(([device, key]) => {\n        test(`${device} ${name(key)}`, async () => {\n          const { input, output, fn } = mover(key);\n          const controller = Controller.create({ value: input, plugins });\n          const actual = fn(controller).value.toJSON({\n            preserveSelections: true,\n          });\n          const expected = output.toJSON({\n            preserveSelections: true,\n          });\n          expect(actual).toEqual(expected);\n        });\n      });\n    });\n  });\n\n  describe('insert block', () => {\n    const mockedBlock = Block.create({ type: 'card', nodes: [Text.create('BLOCK')] });\n    const mockedBlockValue = (<block type=\"card\">BLOCK</block>);\n\n    describe('插入块级元素', () => {\n      const insertCases = [{\n        name: '光标 Collapsed，段首，无空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\"><cursor />123456789</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor />123456789</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标 Collapsed，段中，无空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">1234<cursor />56789</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">1234</block>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor />56789</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标 Collapsed，段尾，元素后不产生空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">123456789<cursor /></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n            <block type=\"paragraph\">123456789<cursor /></block>\n              {mockedBlockValue}\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标 Expanded，段首～段中，无空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\"><anchor />1234<focus />56789</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor />56789</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标 Expanded，段首～段尾，在元素后产生空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\"><anchor />123456789<focus /></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor /></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标 Expanded，段中～段尾，在元素后不产生空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">1234<anchor />56789<focus /></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">1234<anchor /><focus /></block>\n              {mockedBlockValue}\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标在 空段落，在元素后产生空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\"><cursor /></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor /></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标在 空标题，在元素后不产生空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"heading-1\"><cursor /></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"heading-1\"><cursor /></block>\n              {mockedBlockValue}\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }];\n      insertCases.forEach((data) => {\n        test(data.name, async () => {\n          const controller = Controller.create({\n            value: data.input,\n            plugins,\n          });\n          controller.run('onAction', basicActions.createInsertBlockWithoutExtraBlankAction({\n            node: mockedBlock,\n          }));\n          const actual = controller.value.toJSON({ preserveSelections: true });\n          const expected = controller\n            .setValue(data.output)\n            .value.toJSON({ preserveSelections: true });\n          expect(actual).toEqual(expected);\n        });\n      });\n    });\n\n    describe('在 void block 周围插入块级元素', () => {\n      const insertOnVoidBlockCases = [{\n        name: '光标在 void block 左侧，后面无内容，则在当前内容前插入',\n        input: ((\n          <value>\n            <document>\n              <block type=\"hr\" cursor=\"before\"></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              {mockedBlockValue}\n              <block type=\"hr\" cursor=\"before\"></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标在 void block 左侧，后面有内容，则在当前内容前插入',\n        input: ((\n          <value>\n            <document>\n              <block type=\"hr\" cursor=\"before\"></block>\n              <block type=\"paragraph\">aa</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              {mockedBlockValue}\n              <block type=\"hr\" cursor=\"before\"></block>\n              <block type=\"paragraph\">aa</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标在 void block 右侧，后面无内容，则在当前内容后插入，内容后有空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"hr\" cursor=\"after\"></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"hr\"></block>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor /></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标在 void block 右侧，后面有内容，则在当前内容后插入，内容后有空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"hr\" cursor=\"after\"></block>\n              <block type=\"paragraph\">aa</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"hr\"></block>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor />aa</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标在 void block 上，后面无内容，则在当前内容后插入，内容后有空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"hr\"><cursor /></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"hr\"></block>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor /></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: '光标在 void block 上，后面有内容，则在当前内容后插入，内容后有空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"hr\"><cursor /></block>\n              <block type=\"paragraph\">aa</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"hr\"></block>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor />aa</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }];\n      insertOnVoidBlockCases.forEach((data) => {\n        test(data.name, async () => {\n          const controller = Controller.create({\n            value: data.input,\n            plugins,\n          });\n          controller.run('onAction', basicActions.createInsertBlockWithoutExtraBlankAction({\n            node: mockedBlock,\n          }))\n          const actual = controller.value.toJSON({ preserveSelections: true });\n          const expected = controller\n            .setValue(data.output)\n            .value.toJSON({ preserveSelections: true });\n          expect(actual).toEqual(expected);\n        });\n      });\n    });\n\n    describe('在 void inline 上插入块级元素，则在 inline 后插入', () => {\n      const insertOnVoidInlineCases = [{\n        name: '单独一个 inline，后面无 block，无空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\"><inline type=\"tag\"><cursor /></inline></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"paragraph\"><inline type=\"tag\"></inline><cursor /></block>\n              {mockedBlockValue}\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: 'inline 在段首，后面无 block，则后无空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\"><inline type=\"tag\"><cursor /></inline>123</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"paragraph\"><inline type=\"tag\"></inline></block>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor />123</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: 'inline 在段中，后面无 block，则后无空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">123<inline type=\"tag\"><cursor /></inline>456</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">123<inline type=\"tag\"></inline></block>\n              {mockedBlockValue}\n              <block type=\"paragraph\"><cursor />456</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: 'inline 在段尾，后面无 block，则后无空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">123<inline type=\"tag\"><cursor /></inline></block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">123<inline type=\"tag\"></inline><cursor /></block>\n              {mockedBlockValue}\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }, {\n        name: 'inline 在段尾，后面有 block，则后有空行',\n        input: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">123<inline type=\"tag\"><cursor /></inline></block>\n              <block type=\"paragraph\">aa</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n        output: ((\n          <value>\n            <document>\n              <block type=\"paragraph\">123<inline type=\"tag\"></inline><cursor /></block>\n              {mockedBlockValue}\n              <block type=\"paragraph\">aa</block>\n            </document>\n          </value>\n        ) as unknown) as Value,\n      }];\n      insertOnVoidInlineCases.forEach((data) => {\n        test(data.name, async () => {\n          const controller = Controller.create({\n            value: data.input,\n            plugins,\n          });\n          controller.run('onAction', basicActions.createInsertBlockWithoutExtraBlankAction({\n            node: mockedBlock,\n          }));\n          const actual = controller.value.toJSON({ preserveSelections: true });\n          const expected = controller\n            .setValue(data.output)\n            .value.toJSON({ preserveSelections: true });\n          expect(actual).toEqual(expected);\n        });\n      });\n    });\n  });\n});\n\n\nfunction arrowUpOnCursorInFirstBlock(key) {\n  const input = ((\n    <value>\n      <document>\n        <block type=\"paragraph\">\n          Thi\n          <cursor />s is first paragraph\n        </block>\n        <block type=\"paragraph\">This is second paragraph</block>\n        <block type=\"paragraph\">This is third paragraph</block>\n      </document>\n    </value>\n  ) as unknown) as Value;\n\n  const output = ((\n    <value>\n      <document>\n        <block type=\"paragraph\">\n          <cursor />\n          This is first paragraph\n        </block>\n        <block type=\"paragraph\">This is second paragraph</block>\n        <block type=\"paragraph\">This is third paragraph</block>\n      </document>\n    </value>\n  ) as unknown) as Value;\n\n  const fn = (controller: Controller) => {\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getReactHotkeyEvent(`${key}+arrowup`)),\n    );\n    return controller;\n  };\n\n  return {\n    input,\n    output,\n    fn,\n  };\n}\n\nfunction arrowUpOnCursorInMidOfBlock(key) {\n  const input = ((\n    <value>\n      <document>\n        <block type=\"paragraph\">This is first paragraph</block>\n        <block type=\"paragraph\">\n          Thi\n          <cursor />s is second paragraph\n        </block>\n        <block type=\"paragraph\">This is third paragraph</block>\n      </document>\n    </value>\n  ) as unknown) as Value;\n\n  const output = ((\n    <value>\n      <document>\n        <block type=\"paragraph\">This is first paragraph</block>\n        <block type=\"paragraph\">\n          <cursor />\n          This is second paragraph\n        </block>\n        <block type=\"paragraph\">This is third paragraph</block>\n      </document>\n    </value>\n  ) as unknown) as Value;\n\n  const fn = (controller: Controller) => {\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getReactHotkeyEvent(`${key}+arrowup`)),\n    );\n    return controller;\n  };\n\n  return {\n    input,\n    output,\n    fn,\n  };\n}\n\nfunction arrowUpOnSelectionIsExpanded(key) {\n  const input = ((\n    <value>\n      <document>\n        <block type=\"paragraph\">This is first paragraph</block>\n        <block type=\"paragraph\">\n          <anchor />\n          Thi\n          <focus />s is second paragraph\n        </block>\n        <block type=\"paragraph\">This is third paragraph</block>\n      </document>\n    </value>\n  ) as unknown) as Value;\n\n  const output = ((\n    <value>\n      <document>\n        <block type=\"paragraph\">This is first paragraph</block>\n        <block type=\"paragraph\">\n          <cursor />\n          This is second paragraph\n        </block>\n        <block type=\"paragraph\">This is third paragraph</block>\n      </document>\n    </value>\n  ) as unknown) as Value;\n\n  const fn = (controller: Controller) => {\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getReactHotkeyEvent(`${key}+arrowup`)),\n    );\n    return controller;\n  };\n\n  return {\n    input,\n    output,\n    fn,\n  };\n}\n\nfunction arrowDownOnCursorInLastBlock(key) {\n  const input = ((\n    <value>\n      <document>\n        <block type=\"paragraph\">This is first paragraph</block>\n        <block type=\"paragraph\">This is second paragraph</block>\n        <block type=\"paragraph\">\n          <cursor />\n          This is third paragraph\n        </block>\n      </document>\n    </value>\n  ) as unknown) as Value;\n\n  const output = ((\n    <value>\n      <document>\n        <block type=\"paragraph\">This is first paragraph</block>\n        <block type=\"paragraph\">This is second paragraph</block>\n        <block type=\"paragraph\">\n          This is third paragraph\n          <cursor />\n        </block>\n      </document>\n    </value>\n  ) as unknown) as Value;\n\n  const fn = (controller: Controller) => {\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getReactHotkeyEvent(`${key}+arrowdown`)),\n    );\n    return controller;\n  };\n\n  return {\n    input,\n    output,\n    fn,\n  };\n}\n\nfunction arrowDownOnCursorNotInLastBlock(key) {\n  const input = ((\n    <value>\n      <document>\n        <block type=\"paragraph\">This is first paragraph</block>\n        <block type=\"paragraph\">\n          This is second <cursor />\n          paragraph\n        </block>\n        <block type=\"paragraph\">\n          <cursor />\n          This is third paragraph\n        </block>\n      </document>\n    </value>\n  ) as unknown) as Value;\n\n  const output = ((\n    <value>\n      <document>\n        <block type=\"paragraph\">This is first paragraph</block>\n        <block type=\"paragraph\">This is second paragraph</block>\n        <block type=\"paragraph\">\n          This is third paragraph\n          <cursor />\n        </block>\n      </document>\n    </value>\n  ) as unknown) as Value;\n\n  const fn = (controller: Controller) => {\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getReactHotkeyEvent(`${key}+arrowdown`)),\n    );\n    return controller;\n  };\n\n  return {\n    input,\n    output,\n    fn,\n  };\n}\n\nfunction enterOnCursorOnInline() {\n  const input = ((\n    <value>\n      <document>\n        <block type=\"paragraph\"><inline type=\"image\" anchor=\"before\" cursor=\"after\" ></inline>123</block>\n      </document>\n    </value>\n  ));\n\n  const output = ((\n    <value>\n      <document>\n        <block type=\"paragraph\"><text /><inline type=\"image\"><text /></inline><cursor />123</block>\n      </document>\n    </value>\n  ));\n\n\n  const fn = (controller: Controller) => {\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getReactHotkeyEvent('enter')),\n    );\n    return controller;\n  };\n\n  return {\n    input,\n    output,\n    fn,\n  };\n};\n"],"file":"behaviour.test.js"}