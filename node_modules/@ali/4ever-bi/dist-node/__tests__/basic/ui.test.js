"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _editor = _interopRequireDefault(require("../editor"));

var _serializer = _interopRequireDefault(require("../serializer"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
describe('Bi/basic/ui', () => {
  describe('input', () => {
    test('正常输入字符', async () => {
      const {
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'H'
      });

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'e'
      });

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'y'
      });

      await (0, _react.waitForElement)(() => content?.textContent === 'Hey');
    });
    [['“', '”']].forEach(pairs => {
      test(`正确匹配中文引号 ${pairs[0]}${pairs[1]} -> “”`, async () => {
        const onChange = jest.fn();
        const {
          editor,
          queryByText
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
          defaultValue: _serializer.default.textToValue(''),
          onChange: onChange
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: pairs[0]
        });

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: pairs[1]
        });

        await (0, _react.waitForElement)(() => queryByText('“”'));
      });
    });
  });
  describe('delete', () => {
    test('在文档开始位置按 backspace 不做任何处理', async () => {
      const onChange = jest.fn();
      const {
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: _serializer.default.textToValue('Hello world!'),
        onChange: onChange
      }));
      onChange.mockClear();

      _everDevTest.fireEvent.keyDown(editor, _everDevTest.HOTKEYS.deleteBackward);

      expect(onChange).not.toHaveBeenCalled();
    });
    test('在文档开始位置按 delete 删除光标后一个字符', async () => {
      const {
        editor,
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: _serializer.default.textToValue('Hello world!')
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.deleteForward));

      await (0, _react.waitForElement)(() => queryByText(/^ello world!$/));
    });
  });
});
//# sourceMappingURL=ui.test.js.map