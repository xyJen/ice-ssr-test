"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _editor = _interopRequireDefault(require("../editor"));

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _weDesignNext = require("@ali/we-design-next");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
let origin_value;
beforeAll(() => {
  origin_value = process.env.RUNTIME_ENV;
  process.env.RUNTIME_ENV = _weDesignNext.ToolbarLayout.UITEST_FLAG;
});
afterAll(() => {
  process.env.RUNTIME_ENV = origin_value;
});
const defaultValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "paragraph1"
}, (0, _everDevTest.jsx)("text", {
  key: "text1"
}, (0, _everDevTest.jsx)("anchor", null), "AAA", (0, _everDevTest.jsx)("focus", null))), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "text2"
}, "AAA")), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "text3"
}, "AAA"))));
const scrollIntoViewMock = jest.fn();
window.HTMLElement.prototype.scrollIntoView = scrollIntoViewMock;

var _ref = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: defaultValue
});

var _ref2 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: defaultValue
});

var _ref3 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: defaultValue
});

describe.only('查找替换 - 查找替换面板', () => {
  test('按下 mod + f 可唤出查找替换面板', async () => {
    const {
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)(_ref);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('mod+f'));

    const fapPortal = queryByTestId('Portal_wrapper_FindAndReplacePortal');
    await (0, _react.waitFor)(() => expect(fapPortal.children.length).toBeGreaterThan(0));
  });
  test('点击工具栏「查找替换」可唤出查找替换面板，再次按下可关闭', async () => {
    const {
      queryByTestId
    } = await (0, _everDevTest.renderEditor)(_ref2);
    const fapButton = queryByTestId('bi-toolbar-search');

    _everDevTest.fireEvent.click(fapButton);

    const fapPortal = queryByTestId('Portal_wrapper_FindAndReplacePortal');
    await (0, _react.waitFor)(() => expect(fapPortal.children.length).toBeGreaterThan(0));

    _everDevTest.fireEvent.click(fapButton);

    await (0, _react.waitFor)(() => expect(fapPortal.children.length).toBe(0));
  });
  test('选中文本, 右键, 点击查找替换可唤出查找替换面板', async () => {
    const {
      queryByTestId,
      findByTestId,
      content
    } = await (0, _everDevTest.renderEditor)(_ref3);

    _everDevTest.fireEvent.contextMenu(content.querySelector('[data-cangjie-key="text1:0"]'));

    const fapContextButton = await findByTestId('6-find');

    _everDevTest.fireEvent.click(fapContextButton);

    const fapPortal = queryByTestId('Portal_wrapper_FindAndReplacePortal');
    await (0, _react.waitFor)(() => expect(fapPortal.children.length).toBeGreaterThan(0));
  });
});

var _ref4 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: defaultValue
});

var _ref5 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: defaultValue
});

describe('查找替换 - 查找', () => {
  test('存在选区时，搜索框初始化为选区文本', async () => {
    const {
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)(_ref4);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('mod+f'));

    await (0, _react.waitFor)(() => {
      const inputEle = queryByTestId('J_findValueInput');
      expect(inputEle.value).toBe('AAA');
    });
  });
  test('点击右箭头, 可切换到下一个匹配项', async () => {
    const {
      content,
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)(_ref5);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('mod+f'));

    await (0, _react.waitFor)(() => {
      const arrowRight = queryByTestId('ArrowRightNormal-FindAndReplacePortal');

      _everDevTest.fireEvent.click(arrowRight);

      const text2 = content.querySelector('[data-cangjie-key="text2:0"]');
      const bgColor = window.getComputedStyle(text2).getPropertyValue('background-color');
      expect(bgColor).toBe('rgb(255, 153, 51)');
    });
  });
});

var _ref6 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: defaultValue
});

var _ref7 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: defaultValue
});

describe('查找替换 - 替换', () => {
  test('点击替换，可替换当前项', async () => {
    const {
      queryByTestId,
      editor,
      content
    } = await (0, _everDevTest.renderEditor)(_ref6);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('mod+f'));

    await (0, _react.waitFor)(() => {
      const toggleReplaceBtn = queryByTestId('undefined_replace');

      _everDevTest.fireEvent.click(toggleReplaceBtn);
    });
    const replaceInput = queryByTestId('J_replaceValueInput');

    _everDevTest.fireEvent.inputChange(replaceInput, 'BBB');

    const replaceBtn = queryByTestId('J_replaceOne');

    _everDevTest.fireEvent.click(replaceBtn);

    await (0, _react.waitFor)(() => {
      const text1 = content.querySelector('[data-cangjie-key="text1:0"]');
      expect(text1.innerHTML).toBe('BBB');
    });
  });
  test('点击替换全部，可替换全部匹配项', async () => {
    const {
      queryByTestId,
      editor,
      content
    } = await (0, _everDevTest.renderEditor)(_ref7);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('mod+f'));

    await (0, _react.waitFor)(() => {
      const toggleReplaceBtn = queryByTestId('undefined_replace');

      _everDevTest.fireEvent.click(toggleReplaceBtn);
    });
    const replaceInput = queryByTestId('J_replaceValueInput');

    _everDevTest.fireEvent.inputChange(replaceInput, 'BBB');

    const replaceBtn = queryByTestId('J_replaceAll');

    _everDevTest.fireEvent.click(replaceBtn);

    await (0, _everDevTest.waitForTime)(1000);
    const matches = content.querySelectorAll('[data-cangjie-mark]');
    expect(matches).toHaveLength(0);
  });
});
//# sourceMappingURL=ui.test.js.map