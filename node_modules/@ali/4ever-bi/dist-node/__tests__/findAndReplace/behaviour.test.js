"use strict";

var _everDevTest = require("@ali/4ever-dev-test");

var _ = require("../..");

var _everCangjie = require("@ali/4ever-cangjie");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const {
  toggleFindAndReplace,
  updateFindText,
  replaceText,
  updateSearchResult
} = _.FindAndReplacePlugin.actions;
const createBiPlugins = (0, _.createCustomizedBiPlugins)({ ..._.plugins,
  findAndReplacePlugin: _.FindAndReplacePlugin
});
const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "text1"
}, (0, _everDevTest.jsx)("anchor", null), "AAA", (0, _everDevTest.jsx)("focus", null))), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "text2"
}, "AAA")), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "text3"
}, "AAA"))));
const plugins = createBiPlugins({
  findAndReplace: {
    locale: _.locale_zh_CN.findAndReplace,
    draggableArea: {
      top: 41,
      right: 8,
      bottom: 8,
      left: 8
    },
    initialPosition: {
      marginTop: 0,
      marginRight: 50
    },
    isFindOnly: false,
    role: ''
  }
}).array;
describe('Bi/findAndReplace/behaviour', () => {
  test('打开查找替换面板', async () => {
    const controller = _everCangjie.Controller.create({
      plugins,
      value
    });

    controller.run('onAction', toggleFindAndReplace(true));
    expect(controller.value.data.findAndReplaceVisible).toBe(true);
  });
  test('查找', async () => {
    const controller = _everCangjie.Controller.create({
      plugins,
      value
    });

    controller.run('onAction', toggleFindAndReplace(true));
    controller.run('onAction', updateFindText('AAA'));
    await (0, _everDevTest.waitForTime)(1);
    expect(controller.value.data.searchResult).toHaveLength(3);
  });
  test('替换', async () => {
    const controller = _everCangjie.Controller.create({
      plugins,
      value
    });

    controller.run('onAction', toggleFindAndReplace(true));
    controller.run('onAction', updateFindText('AAA'));
    await (0, _everDevTest.waitForTime)(1);
    const firstMatch = controller.value.data.searchResult[0];
    controller.run('onAction', replaceText(firstMatch, 'BBB'));
    await (0, _everDevTest.waitForTime)(1);
    expect(controller.value.data.searchResult).toHaveLength(2);
  });
  test('选中一项', async () => {
    const controller = _everCangjie.Controller.create({
      plugins,
      value
    });

    controller.run('onAction', toggleFindAndReplace(true));
    controller.run('onAction', updateFindText('AAA'));
    await (0, _everDevTest.waitForTime)(1);
    const firstMatch = controller.value.data.searchResult[0];
    controller.run('onAction', updateSearchResult(firstMatch));
    expect(controller.value.data.searchResult[0].selected).toBeTruthy();
  });
  test('多次 render, 缓存正确', async () => {
    const controller = _everCangjie.Controller.create({
      plugins,
      value
    });

    controller.run('onAction', toggleFindAndReplace(true));
    controller.run('onAction', updateFindText('AAA'));
    await (0, _everDevTest.waitForTime)(1);
    expect(controller.value.data.searchResult).toHaveLength(3);
    controller.run('onCangjieBlur');
    expect(controller.value.data.searchResult).toHaveLength(3);
  });
});
//# sourceMappingURL=behaviour.test.js.map