"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _actions = require("../../plugins/uuid/actions");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _createBiPlugins.default)({
  uuid: {
    enable: true,
    generateLeafBlockId: true,
    generator: () => `custom_${Date.now().toString(36) + Math.random().toString(36).substring(2)}`
  }
}).array;

var _ref = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "hello text", (0, _everDevTest.jsx)("cursor", null));

const checkAddId = async (fn, check) => {
  const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: {
      refblockUUID: 'refuid'
    }
  }, "refblock")));

  const controller = _everCangjie.Controller.create({
    value,
    plugins
  });

  fn(controller);
  await (0, _everDevTest.waitForTime)(1000);
  check(controller);
};

describe('Bi/uuid/behaviour', () => {
  describe('leaf block 自动添加 uuid', () => {
    const check = controller => expect(controller.value.document.nodes[0].data.uuid.startsWith('custom_')).toBe(true);

    test('insertText', async () => {
      await checkAddId(controller => controller.command(_everCangjie.Commands.insertText, 'h'), check);
    });
    test('insertInline', async () => {
      await checkAddId(controller => controller.command(_everCangjie.Commands.insertInline, 'h'), check);
    });
    test('deleteBackward', async () => {
      await checkAddId(controller => controller.command(_everCangjie.Commands.deleteBackward), check);
    });
  });
  describe('block 添加 uuid', () => {
    test('block 自身', async () => {
      await checkAddId(controller => controller.command(_everCangjie.Commands.insertBlock, 'h'), controller => {
        expect(typeof controller.value.document.nodes[1].data.uuid).toBe('string');
      });
    });
  });
  describe('action', () => {
    test('action', async () => {
      await checkAddId(controller => {
        const block = controller.value.document.nodes[0];
        controller.run('onAction', (0, _actions.setNodeUUID)(block, 'xxx'));
      }, controller => {
        const block = controller.value.document.nodes[0];
        expect(block.data.uuid).toBe('xxx');
      });
    });
    test('should not replace refblock uuid', async () => {
      await checkAddId(controller => {
        const refblock = controller.value.document.nodes[1];
        controller.run('onAction', (0, _actions.setNodeUUID)(refblock, 'xxx'));
      }, controller => {
        const refblock = controller.value.document.nodes[1];
        expect(refblock.data.uuid).toBe('refuid');
      });
    });
  });
  describe('insert fragment', () => {
    test('should replace uuid', async () => {
      const oldUuid = 'old_uuid';

      const f = _everCangjie.Document.create({
        nodes: [_everCangjie.Block.create({
          data: {
            uuid: oldUuid
          },
          type: 'card'
        })]
      });

      await checkAddId(controller => controller.command(_everCangjie.Commands.insertFragment, f), controller => {
        const newUuid = controller.value.document.nodes[1].data.uuid;
        expect(newUuid).not.toEqual(oldUuid);
      });
    });
  });
  describe('uuid-compatible/behaviour', () => {
    test('prefer legacy uuid as anchor', () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        key: "hello",
        data: {
          uuid: 'legacy-hello-uuid',
          __uuid__: 'new-hello-uuid'
        }
      }, "Hello"), (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        key: "world",
        data: {
          __uuid__: 'world-uuid'
        }
      }, "World")));

      const controller = _everCangjie.Controller.create({
        value,
        plugins: (0, _createBiPlugins.default)({
          uuid: {
            enable: false
          }
        }).array
      }, {
        uuid: {
          enable: true,
          gen: _lodash.uniqueId
        }
      });

      const {
        document
      } = controller.value;
      const hello = document.assertElement('hello');
      const world = document.assertElement('world');
      expect(controller.query('anchor', hello)).toBe('legacy-hello-uuid');
      expect(controller.query('anchor', world)).toBe('world-uuid');
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map