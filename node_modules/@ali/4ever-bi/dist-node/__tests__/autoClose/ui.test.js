"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _editor = _interopRequireDefault(require("../editor"));

var _helper = require("../helper");

/** @jsx jsx */
const couplePairMap = {
  '\'': '\'',
  '"': '"',
  '`': '`',
  '{': '}',
  '[': ']',
  '(': ')',
  '【': '】',
  '（': '）',
  '“': '”',
  '‘': '’'
};

function getSymbolCouple(symbol) {
  return couplePairMap[symbol];
}

const englishQuotes = ['\'', '"', '`'];
const englishBrackets = ['{', '[', '('];
const chineseQuotes = ['‘', '“'];
const chineseBrackets = ['【', '（'];

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Hello", (0, _everDevTest.jsx)("focus", null))));

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref10 = (0, _everDevTest.jsx)("cursor", null);

var _ref12 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/autoClose/ui', () => {
  describe('选区不为空', () => {
    const value = _ref;

    var _ref2 = (0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    });

    var _ref3 = (0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    });

    [...englishBrackets, ...chineseBrackets].forEach(lSymbol => {
      const rSymbol = getSymbolCouple(lSymbol);
      it(`连续键入${lSymbol}将包裹选中文本`, async () => {
        const {
          editor,
          content
        } = await (0, _everDevTest.renderEditor)(_ref2);

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: lSymbol
        });

        await (0, _react.waitForElement)(() => content?.textContent === `${lSymbol}Hello${rSymbol}`);

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: lSymbol
        });

        await (0, _react.waitForElement)(() => content?.textContent === `${lSymbol}${lSymbol}Hello${rSymbol}${rSymbol}`);
      });
      it(`键入${rSymbol}覆盖选中文本`, async () => {
        const {
          editor,
          content
        } = await (0, _everDevTest.renderEditor)(_ref3);

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: rSymbol
        });

        await (0, _react.waitForElement)(() => content?.textContent === rSymbol);
      });
    });

    var _ref4 = (0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    });

    var _ref5 = (0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    });

    chineseQuotes.forEach(lSymbol => {
      const rSymbol = getSymbolCouple(lSymbol);
      it(`键入${lSymbol}包裹选中文本`, async () => {
        const {
          editor,
          content
        } = await (0, _everDevTest.renderEditor)(_ref4);

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: lSymbol
        });

        await (0, _react.waitForElement)(() => content?.textContent === `${lSymbol}Hello${rSymbol}`);

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: rSymbol
        });

        await (0, _react.waitForElement)(() => content?.textContent === `${lSymbol}${lSymbol}Hello${rSymbol}${rSymbol}`);
      });
      it(`键入${rSymbol}包裹选中文本`, async () => {
        const {
          editor,
          content
        } = await (0, _everDevTest.renderEditor)(_ref5);

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: rSymbol
        });

        await (0, _react.waitForElement)(() => content?.textContent === `${lSymbol}Hello${rSymbol}`);

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: lSymbol
        });

        await (0, _react.waitForElement)(() => content?.textContent === `${lSymbol}${lSymbol}Hello${rSymbol}${rSymbol}`);
      });
    });

    var _ref6 = (0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    });

    englishQuotes.forEach(symbol => {
      it(`键入${symbol}包裹选中文本`, async () => {
        const {
          editor,
          content
        } = await (0, _everDevTest.renderEditor)(_ref6);

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: symbol
        });

        await (0, _react.waitForElement)(() => content?.textContent === `${symbol}Hello${symbol}`);
      });
    });
  });
  describe('选区为空', () => {
    const value = _ref7;

    var _ref8 = (0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    });

    describe('中英文括号的自动补全和键出', () => {
      [...englishBrackets, ...chineseBrackets].forEach(lSymbol => {
        const rSymbol = getSymbolCouple(lSymbol);
        it(`连续两次键入${lSymbol}将自动补全右边的符号，接着连续两次键入${rSymbol}将逐步键出符号对`, async () => {
          const {
            editor,
            content
          } = await (0, _everDevTest.renderEditor)(_ref8);

          _everDevTest.fireEvent.cangjieInput(editor, {
            data: lSymbol
          });

          await (0, _react.waitForElement)(() => content?.textContent === `${lSymbol}${rSymbol}`);

          _everDevTest.fireEvent.cangjieInput(editor, {
            data: lSymbol
          });

          const expected = `${lSymbol}${lSymbol}${rSymbol}${rSymbol}`;
          await (0, _react.waitForElement)(() => content?.textContent === expected);

          _everDevTest.fireEvent.cangjieInput(editor, {
            data: rSymbol
          });

          await (0, _react.waitForElement)(() => content?.textContent === expected);

          _everDevTest.fireEvent.cangjieInput(editor, {
            data: rSymbol
          });

          await (0, _react.waitForElement)(() => content?.textContent === expected);
        });
      });
    });

    var _ref9 = (0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    });

    describe('英文引号的自动补全和键出', () => {
      englishQuotes.forEach(symbol => {
        it(`连续三次键入${symbol},依次自动补全，键出，正常键入`, async () => {
          const {
            editor,
            content
          } = await (0, _everDevTest.renderEditor)(_ref9);

          _everDevTest.fireEvent.cangjieInput(editor, {
            data: symbol
          });

          await (0, _react.waitForElement)(() => content?.textContent === `${symbol}${symbol}`);

          _everDevTest.fireEvent.cangjieInput(editor, {
            data: symbol
          });

          await (0, _react.waitForElement)(() => content?.textContent === `${symbol}${symbol}`);

          _everDevTest.fireEvent.cangjieInput(editor, {
            data: symbol
          });

          await (0, _react.waitForElement)(() => content?.textContent === `${symbol}${symbol}${symbol}`);
        });
      });
    });
  });
  describe('删除符号对', () => {
    [...englishBrackets, ...chineseBrackets, ...chineseQuotes].forEach(lSymbol => {
      it(`连续删除${lSymbol}对`, async () => {
        const rSymbol = getSymbolCouple(lSymbol);
        const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
          type: "paragraph"
        }, rSymbol, lSymbol, lSymbol, _ref10, rSymbol, rSymbol, lSymbol)));
        const {
          editor,
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('Backspace'));

        await (0, _react.waitForElement)(() => content?.textContent === `${rSymbol}${lSymbol}${rSymbol}${rSymbol}${lSymbol}`);

        _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('Backspace'));

        await (0, _react.waitForElement)(() => content?.textContent === `${rSymbol}${rSymbol}${rSymbol}${lSymbol}`);

        _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('Backspace'));

        await (0, _react.waitForElement)(() => content?.textContent === `${rSymbol}${rSymbol}${lSymbol}`);
      });
    });
    englishQuotes.forEach(symbol => {
      var _ref11 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, symbol, symbol, symbol, _ref12, symbol, symbol)));

      it(`连续删除${symbol}对`, async () => {
        const value = _ref11;
        const {
          editor,
          content
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('Backspace'));

        await (0, _react.waitForElement)(() => content?.textContent === symbol.repeat(4));

        _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('Backspace'));

        await (0, _react.waitForElement)(() => content?.textContent === symbol.repeat(3));

        _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('Backspace'));

        await (0, _react.waitForElement)(() => content?.textContent === symbol.repeat(2));
      });
    });
  });
});
//# sourceMappingURL=ui.test.js.map