"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FORMAT_MENU_UNI18N_TEXT = void 0;

var React = _interopRequireWildcard(require("react"));

require("@testing-library/jest-dom/extend-expect");

var _react2 = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _serializer = _interopRequireDefault(require("../serializer"));

var _mention = _interopRequireDefault(require("../../plugins/mention"));

var _everPluginMention = require("@ali/4ever-plugin-mention");

var _newlineGuide = _interopRequireDefault(require("../../plugins/newlineGuide"));

var _2 = require("../..");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _2.createCustomizedBiPlugins)({
  mention: _mention.default,
  newlineGuide: _newlineGuide.default,
  quickInsertMention: _everPluginMention.creatQuickInsertPlugin
});
const insertMenuData = [{
  type: _2.TYPE_GROUP,
  title: '提及@',
  menus: [{
    type: _2.TYPE_MENU_ITEM,
    title: '提及人',
    menuKey: 'quickInsertMention'
  }]
}];
const FORMAT_MENU_UNI18N_TEXT = {
  menu_title: '格式',
  sub_menu_title_text: '文本',
  menu_item_title_text_bold: '粗体',
  menu_item_title_text_italics: '斜体',
  menu_item_title_text_underline: '下划线',
  menu_item_title_text_strikethrough: '删除线',
  menu_item_title_text_superscript: '上标',
  menu_item_title_text_subscript: '下标',
  menu_item_title_text_letterSpacing: '字间距',
  sub_menu_title_size: '字号',
  menu_item_title_text_increase_size: '增大字号',
  menu_item_title_text_decrease_size: '缩小字号',
  sub_menu_title_align: '对齐',
  sub_menu_title_indent: '缩进',
  sub_menu_title_list: '项目符号',
  menu_item_title_list_unorder: '无序列表',
  menu_item_title_list_order: '有序列表',
  menu_item_title_list_task: '任务列表'
};
exports.FORMAT_MENU_UNI18N_TEXT = FORMAT_MENU_UNI18N_TEXT;

var _ref = (0, _everDevTest.jsx)(_2.Menu, {
  menus: insertMenuData
});

function renderInsertMenu() {
  return _ref;
}

const getSuggestions = (text, count) => Array(count).fill(0).map((_, index) => ({
  name: `${text.length ? text : 'anonymous'}-${index}`,
  id: index.toString(),
  login: index.toString(),
  avatarUrl: `${text}-${index}.jpg`
}));

const DEFAULT_SUGGESTION_COUNT = 3;

var _ref2 = (0, _everDevTest.jsx)(_content.default, {
  tabIndex: 0
});

const Editor = props => {
  const {
    defaultValue,
    mentionConfig = {},
    suggestionCount = DEFAULT_SUGGESTION_COUNT
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  const plugins = React.useMemo(() => {
    const config = {
      locale: {
        buttonTitle: '@',
        quickInsertTitle: '@',
        mentionPlaceholder: '选择成员'
      },

      searchSuggestions(text, setResult) {
        // 模拟搜索的异步过程
        setTimeout(() => {
          setResult(getSuggestions(text, suggestionCount));
        }, 300);
      },

      onSuggestionSelected(suggestion, nextStep) {
        nextStep(suggestion);
      },

      loadMoreSuggestions(text, offset, setResult) {
        setResult(getSuggestions(text, suggestionCount + 1));
      },

      ...mentionConfig
    };
    return createBiPlugins({
      mention: config,
      newlineGuide: {
        enabled: true,
        renderGuideMenu: renderInsertMenu
      },
      quickInsertMention: config
    });
  }, [mentionConfig, suggestionCount]);
  return (0, _everDevTest.jsx)(_provider.default, {
    autoFocus: true,
    plugins: plugins,
    value: value,
    onChange: handleChange
  }, _ref2);
}; // Mock DOM size


const originalOffsetHeight = Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'offsetHeight');
const originalOffsetWidth = Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'offsetWidth');
beforeAll(() => {
  Object.defineProperty(HTMLElement.prototype, 'offsetHeight', {
    configurable: true,
    value: 500
  });
  Object.defineProperty(HTMLElement.prototype, 'offsetWidth', {
    configurable: true,
    value: 500
  });
});
afterAll(() => {
  Object.defineProperty(HTMLElement.prototype, 'offsetHeight', originalOffsetHeight);
  Object.defineProperty(HTMLElement.prototype, 'offsetWidth', originalOffsetWidth);
});
afterEach(_react2.cleanup);

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref4 = (0, _everDevTest.jsx)("cursor", null);

var _ref5 = (0, _everDevTest.jsx)("cursor", null);

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

var _ref7 = (0, _everDevTest.jsx)("cursor", null);

var _ref8 = (0, _everDevTest.jsx)("cursor", null);

var _ref9 = (0, _everDevTest.jsx)("cursor", null);

var _ref10 = (0, _everDevTest.jsx)("h1", null, "Header");

var _ref11 = (0, _everDevTest.jsx)("footer", null, "Footer");

var _ref12 = (0, _everDevTest.jsx)("div", null, "loading");

var _ref13 = (0, _everDevTest.jsx)("cursor", null);

var _ref14 = (0, _everDevTest.jsx)("cursor", null);

var _ref15 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/mention/ui', () => {
  describe('展示 suggestions', () => {
    test('输入 @ 后，展示 mention 列表', async () => {
      const {
        getAllByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      const items = await (0, _react2.findAllByTestId)(document.body, 'mention-suggestion-item');
      expect(items).toHaveLength(DEFAULT_SUGGESTION_COUNT);
    });
    test('支持连续输入 @，且当前只展示一个 mention 列表', async () => {
      const {
        findByTestId,
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => content.textContent === '@@@');
      await findByTestId('mention-suggestion');
    });
    test('输入 @ 后，展示搜索结果', async () => {
      const {
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => queryByText('anonymous-0'));
    });
    test('输入 @ 后，继续输入文本，展示匹配的 mention 列表', async () => {
      const {
        findByText,
        findByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await findByTestId('mention-suggestion');

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'tom'
      });

      await (0, _react2.waitForElement)(() => findByText('tom-1'));
    });
    test('列表默认选中第一项', async () => {
      const {
        getAllByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      const items = await (0, _react2.waitForElement)(() => getAllByTestId('mention-suggestion-item'));
      expect(items[0].classList).toContain('actived');
    });
    [['up', 2], ['left', 2], ['right', 1], ['down', 1]].forEach(([key, to]) => {
      test(`支持方向键 ${key} 切换项目`, async () => {
        const {
          getAllByTestId,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
          defaultValue: _serializer.default.textToValue('')
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: '@'
        });

        const items = await (0, _react2.waitForElement)(() => getAllByTestId('mention-suggestion-item'));

        _everDevTest.fireEvent.keyUp(document, (0, _everDevTest.getHotkeyEvent)(key));

        await (0, _react2.waitFor)(() => expect(items[to].classList).toContain('actived'));
      });
    });
    test('支持滚动加载', async () => {
      const {
        queryByTestId,
        getAllByTestId,
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue(''),
        suggestionCount: 20
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'tom'
      });

      await (0, _react2.waitForElement)(() => getAllByTestId('mention-suggestion-item'));
      const suggestion = queryByTestId('mention-suggestion');
      const list = suggestion.querySelector('.mention-suggestion-list');
      const scrollHeightSpy = jest.spyOn(list, 'scrollHeight', 'get').mockImplementation(() => 5000);

      _everDevTest.fireEvent.scroll(list, {
        target: {
          scrollTop: 5000
        }
      });

      await (0, _react2.waitForElement)(() => queryByText('tom-20'));
      scrollHeightSpy.mockClear();
    });
  });
  describe('插入', () => {
    test('在 mention 列表中，回车插入当前选中项', async () => {
      const {
        queryByTestId,
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'tom'
      });

      await (0, _react2.waitForElement)(() => queryByText('tom-0'));

      _everDevTest.fireEvent.keyUp(document, (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.enter));

      expect(queryByTestId('mention-suggestion')).not.toBeInTheDocument();
      expect(queryByText('tom-0')).toBeInTheDocument();
    });
    test('在 mention 列表中，若在加载中，则不响应回车', async () => {
      const {
        queryByTestId,
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => queryByTestId('mention-suggestion'));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'tom'
      });

      await (0, _react2.waitForElement)(() => queryByTestId('mention-suggestion-loading'));

      _everDevTest.fireEvent.keyDown(document, (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.enter));

      expect(queryByTestId('mention-suggestion')).toBeInTheDocument();
      expect(queryByText('@tom-0')).not.toBeInTheDocument();
    });
    test('在 mention 列表中，若在输入过程中，则不响应回车确认', async () => {
      const {
        queryByTestId,
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => queryByTestId('mention-suggestion'));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'tom'
      });

      await (0, _react2.waitForElement)(() => queryByText('tom-0'));

      _everDevTest.fireEvent.keyDown(document, { ...(0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.enter),
        isComposing: true
      });

      expect(queryByTestId('mention-suggestion')).toBeInTheDocument();
      expect(queryByText('@tom-0')).not.toBeInTheDocument();
    });
    test('在 mention 列表中，点击插入项目', async () => {
      const {
        queryByTestId,
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'tom'
      });

      const item = await (0, _react2.waitForElement)(() => queryByText('tom-1'));

      _everDevTest.fireEvent.mouseDown(item);

      expect(queryByTestId('mention-suggestion')).not.toBeInTheDocument();
      await (0, _react2.waitForElement)(() => queryByText('tom-1'));
    });
    test('输入 @ 后，若有选中的项目，键入空格，则插入 mention', async () => {
      const {
        queryByTestId,
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: 'tom'
      });

      await (0, _react2.waitForElement)(() => queryByText('tom-0'), {
        timeout: 10000
      }); // 添加 log 定位测试用例失败原因

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('space'));

      expect(queryByTestId('mention-suggestion')).not.toBeInTheDocument();
      await (0, _react2.waitForElement)(() => queryByText('tom-0'), {
        timeout: 10000
      });
    });
  });
  describe('占位符', () => {
    test('插入占位符', async () => {
      const valueForNewlineGuideTest = _ref3;
      const {
        queryByTestId,
        editor,
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: valueForNewlineGuideTest
      }));

      _everDevTest.fireEvent.keyUp(editor, {
        key: '/',
        target: {
          value: '/'
        }
      });

      await (0, _react2.waitFor)(() => queryByText(/提及人/));

      _everDevTest.fireEvent.click(queryByText(/提及人/));

      await (0, _react2.waitForElement)(() => queryByTestId('menu-insert-mention-input'), {
        timeout: 1000
      });
      expect(queryByTestId('menu-insert-mention-input')).toBeInTheDocument();
    });
    test('点击占位符，切换到输入态', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: '',
          id: '',
          login: '',
          avatarUrl: '',
          isPlaceholder: true
        }
      }), _ref4)));
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.click(queryByTestId('mention-placeholder-normal'));

      await (0, _react2.waitForElement)(() => queryByTestId('menu-insert-mention-input'), {
        timeout: 1000
      });
      expect(queryByTestId('menu-insert-mention-input')).toBeInTheDocument();
    });
    test('占位符删除', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: '',
          id: '',
          login: '',
          avatarUrl: '',
          isPlaceholder: true
        }
      }), _ref5)));
      const {
        queryByText,
        getByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      getByText('选择成员').focus();

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _react2.waitForElementToBeRemoved)(() => queryByText(/选择成员/));
    });
    test('输入态，输入部分内容后取消', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: '',
          id: '',
          login: '',
          avatarUrl: '',
          isPlaceholder: true
        }
      }), (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: 'yanyi',
          id: '12',
          login: '123',
          avatarUrl: '0.jpg'
        }
      }), _ref6)));
      const {
        queryByTestId,
        queryByText,
        container,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.click(queryByText(/选择成员/));

      queryByTestId('menu-insert-mention-input').innerHTML = '@142142';

      _everDevTest.fireEvent.click(queryByText(/yanyi/));

      expect(queryByText(/@142142/)).toBeInTheDocument();
    });
    test('输入态，未输入内容后取消', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: '',
          id: '',
          login: '',
          avatarUrl: '',
          isPlaceholder: true
        }
      }), (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: 'yanyi',
          id: '12',
          login: '123',
          avatarUrl: '0.jpg'
        }
      }), _ref7)));
      const {
        queryByTestId,
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.click(queryByText(/选择成员/));

      _everDevTest.fireEvent.click(queryByText(/yanyi/));

      expect(queryByText(/选择成员/)).toBeInTheDocument();
    });
  });
  describe('取消', () => {
    test('删除 @ 后，不再展示 mention 列表', async () => {
      const {
        queryByTestId,
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => queryByTestId('mention-suggestion'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId('mention-suggestion'));
      expect(queryByText('@')).not.toBeInTheDocument();
    });
    test('输入 @ 后，按下 ESC，取消 mention', async () => {
      const {
        queryByTestId,
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => queryByTestId('mention-suggestion'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('esc'));

      await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId('mention-suggestion'));
      expect(content.textContent).toBe('@');
    });
    test('输入 @ 后，若没有选中的项目，键入空格，则取消 mention', async () => {
      const {
        queryByTestId,
        queryByText,
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => queryByText('anonymous-1'));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('space'));

      await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId('mention-suggestion'));
      expect(content.textContent).toBe('@');
    });
  });
  describe('删除', () => {
    test('在 mention 后退格，先选中再删除整个 mention', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: 'tom',
          id: '0',
          login: '0',
          avatarUrl: '0.jpg'
        }
      }), _ref8)));
      const {
        queryByText,
        editor,
        getByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      getByText('tom').focus();

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _react2.waitForElementToBeRemoved)(() => queryByText('tom'));
    });
    test('在 mention 前键入 del，先选中再删除整个 mention', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref9, (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: 'tom',
          id: '0',
          login: '0',
          avatarUrl: '0.jpg'
        }
      }))));
      const {
        queryByText,
        editor,
        getByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('del'));

      getByText('tom').focus();

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('del'));

      await (0, _react2.waitForElementToBeRemoved)(() => queryByText('tom'));
    });
  });
  describe('渲染', () => {
    test('自定义 Header 渲染', async () => {
      const config = {
        renderHeader: () => _ref10
      };
      const {
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue(''),
        mentionConfig: config
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => queryByText(/Header/));
    });
    test('自定义 Suggestion Item 渲染', async () => {
      const config = {
        renderItem: suggestion => (0, _everDevTest.jsx)("div", null, `this-is-${suggestion.id}`)
      };
      const {
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue(''),
        mentionConfig: config
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => queryByText(/this-is-0/));
    });
    test('自定义 Footer 渲染', async () => {
      const config = {
        renderFooter: () => _ref11
      };
      const {
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue(''),
        mentionConfig: config
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => queryByText(/Footer/));
    });
    test('自定义 Loading 渲染', async () => {
      const config = {
        renderLoading: () => _ref12
      };
      const {
        queryByText,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue(''),
        mentionConfig: config
      }));

      _everDevTest.fireEvent.cangjieInput(editor, {
        data: '@'
      });

      await (0, _react2.waitForElement)(() => queryByText(/loading/));
    });
  });
  describe('响应事件', () => {
    test('在 mention 中响应 click 事件', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: 'tom',
          id: '0',
          login: '0',
          avatarUrl: '0.jpg'
        }
      }), _ref13)));
      const config = {
        onMentionClick: () => {
          queryByText('tom').replaceWith('tom-click');
        }
      };
      const {
        queryByText,
        getByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        mentionConfig: config
      }));
      getByText('tom').click();
      await (0, _react2.waitForElement)(() => queryByText(/tom-click/));
    });
    test('在 mention 中响应 hover 事件', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: 'tom',
          id: '0',
          login: '0',
          avatarUrl: '0.jpg'
        }
      }), _ref14)));
      const config = {
        onMentionHover: () => {
          queryByText('tom').replaceWith('tom-hover');
        }
      };
      const {
        queryByText,
        getByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        mentionConfig: config
      }));
      const mentionDom = getByText('tom');

      _everDevTest.fireEvent.mouseEnter(mentionDom);

      await (0, _react2.waitForElement)(() => queryByText(/tom-hover/));
    });
  });
  describe('渲染查找替换高亮', () => {
    test('渲染查找替换高亮', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "mention",
        data: {
          name: 'tom',
          id: '0',
          login: '0',
          avatarUrl: '0.jpg',
          searchMatch: {
            type: 'text',
            selected: true
          }
        }
      }), _ref15)));
      const {
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      await (0, _react2.waitFor)(() => {
        const mentionSpan = content.querySelector('[data-type="mention"]');
        const bgColor = window.getComputedStyle(mentionSpan).getPropertyValue('background-color');
        expect(bgColor).toBe('rgb(255, 153, 51)');
      });
    });
  });
});
//# sourceMappingURL=ui.test.js.map