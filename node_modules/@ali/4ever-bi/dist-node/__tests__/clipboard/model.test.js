"use strict";

require("@testing-library/jest-dom/extend-expect");

var _everDevTest = require("@ali/4ever-dev-test");

var _everMo = require("@ali/4ever-mo");

var _everPluginClipboard = require("@ali/4ever-plugin-clipboard");

/** @jsx jsx */
const {
  DEFAULT_PAGE_WIDTH
} = _everMo.TablePlugin.constants;
/** **************************************************
 *  测试 fragment 相等性使用 toJSON，防止 key 值的干扰
 *************************************************** */

var _ref = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "table"
}, (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A")))));

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A");

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A")));

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A");

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B")));

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "C")));

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A");

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B");

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "C");

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null));

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A"));

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B");

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "C");

var _ref14 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "D"));

var _ref15 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A");

var _ref16 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B");

var _ref17 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "C");

var _ref18 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "D");

var _ref19 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A");

var _ref20 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B"));

var _ref21 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A");

var _ref22 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B");

var _ref23 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}));

var _ref24 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A");

var _ref25 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null));

var _ref26 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A");

var _ref27 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B"));

var _ref28 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A");

var _ref29 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B");

var _ref30 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "paragraph");

var _ref31 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B")));

var _ref32 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "paragraph");

var _ref33 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A");

var _ref34 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B");

var _ref35 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null));

describe('bi/clipboard/model', () => {
  describe('测试表格的 fragment normalize', () => {
    const tableCases = [{
      title: '测试表格的 table 节点没有 colsWidth',
      input: _ref,
      output: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [DEFAULT_PAGE_WIDTH]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref2))))
    },
    /* **************************** hr **************************** */
    {
      title: '测试表格的 table 节点 colsWidth 与列数不等',
      input: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100, 100]
        }
      }, _ref3)),
      output: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [DEFAULT_PAGE_WIDTH]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref4))))
    },
    /* **************************** hr **************************** */
    {
      title: '测试表格的行列数不规整，自动补齐',
      input: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, _ref5, _ref6)),
      output: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref7), (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref8)), (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref9), (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref10))))
    },
    /* **************************** hr **************************** */
    {
      title: '测试表格单元格 span 跨度超过最大值',
      input: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, _ref11, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 3,
          hidden: false,
          rowSpan: 1
        }
      }, _ref12)), (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 2
        }
      }, _ref13), _ref14))),
      output: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref15), (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref16)), (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref17), (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref18))))
    },
    /* **************************** hr **************************** */
    {
      title: '测试表格单元格 hidden 属性的正确性',
      input: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 2,
          hidden: false,
          rowSpan: 1
        }
      }, _ref19), _ref20))),
      output: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 2,
          hidden: false,
          rowSpan: 1
        }
      }, _ref21), (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: true,
          rowSpan: 1
        }
      }, _ref22))))
    },
    /* **************************** hr **************************** */
    {
      title: '测试表格单元格为空时自动 normalize 填充 paragraph',
      input: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, _ref23)),
      output: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref24), (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref25))))
    },
    /* **************************** hr **************************** */
    {
      title: '测试表格单元格脏数据清理：width',
      input: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1,
          width: 300
        }
      }, _ref26), _ref27))),
      output: (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref28), (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref29))))
    },
    /* **************************** hr **************************** */
    {
      title: '测试复合选区 fragment 表格的末尾追加一个段落',
      input: (0, _everDevTest.jsx)("document", null, _ref30, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, _ref31)),
      output: (0, _everDevTest.jsx)("document", null, _ref32, (0, _everDevTest.jsx)("block", {
        type: "table",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref33), (0, _everDevTest.jsx)("block", {
        type: "table-cell",
        data: {
          colSpan: 1,
          hidden: false,
          rowSpan: 1
        }
      }, _ref34))), _ref35)
    }];
    tableCases.forEach(tableCase => {
      const {
        title,
        input,
        output
      } = tableCase;
      it(title, () => {
        const normalizedFragment = (0, _everPluginClipboard.normalizeFragment)(input);
        expect(normalizedFragment.toJSON()).toEqual(output.toJSON());
      });
    });
  });
  describe('测试列表 fragment 的 normalize', () => {
    it('测试列表的 listId regenerate', () => {
      const input = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: '111'
          }
        }
      }, "paragraph"), (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: '111'
          }
        }
      }, "paragraph"));
      const output = (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: '111'
          }
        }
      }, "paragraph"), (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          list: {
            listId: '111'
          }
        }
      }, "paragraph"));
      const randomStore = Math.random; // 目前底层生成 listId 的方法不严谨，使用的 random，后续重写之后需要修改这里
      // 0.5 (36位转换)-> 0.i

      Math.random = () => 0.5;

      const normalizedFragment = (0, _everPluginClipboard.normalizeFragment)(input);
      Math.random = randomStore;
      expect(normalizedFragment.toJSON()).toEqual(output.toJSON());
    });
  });
});
//# sourceMappingURL=model.test.js.map