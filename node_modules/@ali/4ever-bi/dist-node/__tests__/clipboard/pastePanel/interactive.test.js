"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _react = _interopRequireDefault(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _react2 = require("@testing-library/react");

var _editor = _interopRequireDefault(require("../../editor"));

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "*", (0, _everDevTest.jsx)("cursor", null))));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "*", (0, _everDevTest.jsx)("cursor", null))));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "*", (0, _everDevTest.jsx)("cursor", null))));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "*", (0, _everDevTest.jsx)("cursor", null))));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "*", (0, _everDevTest.jsx)("cursor", null))));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "*", (0, _everDevTest.jsx)("cursor", null))));

var _ref7 = (0, _everDevTest.jsx)("cursor", null);

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "card"
}), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null)), (0, _everDevTest.jsx)("block", {
  type: "card"
})));

var _ref9 = (0, _everDevTest.jsx)("cursor", null);

var _ref10 = (0, _everDevTest.jsx)("cursor", null);

describe('clipboard', () => {
  it.skip('粘贴模式默认隐藏，粘贴后显示，有输入操作时自动隐藏', async () => {
    const value = _ref;
    const {
      editor,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    expect(queryByTestId('pastePanel')).toBe(null);

    _everDevTest.fireEvent.paste(editor, 'text/plain', 'hhh');

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).not.toBe(null);
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('space'));

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).toBe(null);
    });
  });
  it.skip('普通内容粘贴', async () => {
    const value = _ref2;
    const {
      editor,
      queryByTestId,
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    expect(queryByTestId('pastePanel')).toBe(null);

    _everDevTest.fireEvent.paste(editor, 'text/plain', 'hhh');

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).not.toBe(null);
    });

    _everDevTest.fireEvent.click(await findByTestId('paste-panel-button'));

    _everDevTest.fireEvent.click(await findByTestId('menu-item-sourceFormat'));

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).toBe(null);
    });

    _everDevTest.fireEvent.paste(editor, 'text/plain', 'hhh');

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).not.toBe(null);
    });

    _everDevTest.fireEvent.click(await findByTestId('paste-panel-button'));

    _everDevTest.fireEvent.click(await findByTestId('menu-item-matchFormat'));

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).toBe(null);
    });

    _everDevTest.fireEvent.paste(editor, 'text/plain', 'hhh');

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).not.toBe(null);
    });

    _everDevTest.fireEvent.click(await findByTestId('paste-panel-button'));

    _everDevTest.fireEvent.click(await findByTestId('menu-item-textFormat'));

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).toBe(null);
    });
  });
  it.skip('自定义识别内容', async () => {
    const value = _ref3;
    const {
      editor,
      queryByTestId,
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    expect(queryByTestId('pastePanel')).toBe(null);

    _everDevTest.fireEvent.paste(editor, 'text/plain', 'http://gitlab.alibaba-inc.com/alidocs/we-plugin-attachment');

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).not.toBe(null);
    });

    _everDevTest.fireEvent.click(await findByTestId('menu-item-text'));

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).toBe(null);
    });

    _everDevTest.fireEvent.paste(editor, 'text/plain', 'http://gitlab.alibaba-inc.com/alidocs/we-plugin-attachment');

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).not.toBe(null);
    });

    _everDevTest.fireEvent.click(await findByTestId('menu-item-card')); // fireEvent.click(await findByTestId('menu-item-sourceFormat'));


    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).toBe(null);
    });
  }); // 查看其他分支代码也是失败，TODO 灯少

  it.skip('粘贴纯文本，出现 Markdown 转富文本选项', async () => {
    const value = _ref4;
    const {
      editor,
      queryByTestId,
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    expect(queryByTestId('pastePanel')).toBe(null); // 粘贴纯文本，出现转富文本选项

    _everDevTest.fireEvent.paste(editor, 'text/plain', 'hhh');

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('pastePanel')).not.toBe(null);
    });

    _everDevTest.fireEvent.click(await findByTestId('paste-panel-button'));

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('menu-item-markdownToDoc')).not.toBe(null);
    });
  });
  it('粘贴 vscode markdown 文本，出现转富文本选项', async () => {
    const value = _ref5;
    const {
      editor,
      queryByTestId,
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.pasteAll(editor, [{
      type: 'text/plain',
      content: '### hhh'
    }, {
      type: 'vscode-editor-data',
      content: '{"mode":"markdown"}'
    }]);

    _everDevTest.fireEvent.click(await findByTestId('paste-panel-button'));

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('menu-item-markdownToDoc')).toBeTruthy();
    });
  });
  it('粘贴 HTML，不出现转富文本选项', async () => {
    const value = _ref6;
    const {
      editor,
      queryByTestId,
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.paste(editor, 'text/html', '<div style="color: red">hhh</div>');

    _everDevTest.fireEvent.click(await findByTestId('paste-panel-button'));

    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('menu-item-markdownToDoc')).toBe(null);
    });
  });
  it('列表中切换纯文本粘贴模式，仍保持列表类型', async () => {
    const data = {
      list: {
        listId: 'dn7ncrq6m7m',
        level: 0,
        isOrdered: false,
        listStyleType: 'SCIR_ECIR_SREC'
      }
    };
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: data
    }, _ref7)));
    const {
      editor,
      queryByTestId,
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.paste(editor, 'text/plain', 'hhh');

    _everDevTest.fireEvent.click(await findByTestId('paste-panel-button'));

    const textFormat = await (0, _react2.waitFor)(() => queryByTestId('menu-item-textFormat'));

    _everDevTest.fireEvent.click(textFormat);

    await (0, _react2.wait)();
    expect(queryByTestId('list')).not.toBe(null);
  });
  it('在 edgeSelectable 节点之间插入内容，切换匹配模式', async () => {
    const value = _ref8;
    const {
      editor,
      queryByTestId,
      findByTestId,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.paste(editor, 'text/plain', 'hhh');

    _everDevTest.fireEvent.click(await findByTestId('paste-panel-button'));

    const textFormat = await (0, _react2.waitFor)(() => queryByTestId('menu-item-matchFormat'));

    _everDevTest.fireEvent.click(textFormat);

    await (0, _react2.wait)();
    const cards = content.querySelectorAll('[data-cangjie-void="true"]');
    expect(cards.length).toBe(2);
  });
  it('在空段落插入内容，切换粘贴模式时清除空段落的样式', async () => {
    const data = {
      spacing: {
        before: 182,
        line: 1
      }
    };
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: data
    }, _ref9)));
    const {
      editor,
      queryByTestId,
      findByTestId,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.paste(editor, 'text/html', '<div><div style="margin-top: 182px;">升级服务</div><div>123</div></div>');

    _everDevTest.fireEvent.click(await findByTestId('paste-panel-button'));

    const textFormat = await (0, _react2.waitFor)(() => queryByTestId('menu-item-textFormat'));

    _everDevTest.fireEvent.click(textFormat);

    await (0, _react2.wait)();
    const firstParagraph = content.querySelector('[data-cangjie-leaf-block="true"]');
    expect(firstParagraph.style.marginTop).toBe('');
  });
  it('粘贴非仓颉内容, 字体自动被过滤掉, 复制字体大小如果相同则自动匹配目标位置字体大小', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("m", {
      type: "sz",
      data: {
        value: 14,
        szUnit: 'pt'
      }
    }, "AAA"), _ref10)));
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.paste(editor, 'text/html', '<div style="font-size: 30px; font-family: songti;">BBB</div>');

    await (0, _react2.waitFor)(() => {
      const secondLeaf = content.querySelectorAll('[data-cangjie-leaf]')?.[1];
      expect(secondLeaf?.style.fontSize).toBe('14pt');
      expect(secondLeaf?.style.fontFamily).toBe('');
    }, {
      timeout: 1000
    });
  });
});
//# sourceMappingURL=interactive.test.js.map