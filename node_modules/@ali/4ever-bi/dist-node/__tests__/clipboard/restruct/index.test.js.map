{"version":3,"sources":["../../../../../src/__tests__/clipboard/restruct/index.test.tsx"],"names":["expect","extend","toMatchFile","describe","fixturesPath","path","join","__dirname","fixtures","fs","readdirSync","forEach","fixture","fixturePath","inputPath","outputPath","modelPath","modelConfig","require","default","error","input","readFileSync","toString","fragment","Document","fromJSON","JSON","parse","models","Map","value","String","Number","szUnit","data","ind","undefined","Object","spacing","list","key","set","fragmentRestructed","fragmentStr","stringify","toJSON","it"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEAA,MAAM,CAACC,MAAP,CAAc;AAAEC,EAAAA,WAAW,EAAXA;AAAF,CAAd;AAEAC,QAAQ,CAAC,oDAAD,EAAuD,MAAM;AACnEA,EAAAA,QAAQ,CAAC,kCAAD,EAAqC,MAAM;AACjD,UAAMC,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAArB;AACA,UAAMC,QAAQ,GAAGC,EAAE,CAACC,WAAH,CAAeN,YAAf,CAAjB;AACAI,IAAAA,QAAQ,CAACG,OAAT,CAAkBC,OAAD,IAAa;AAC5B,YAAMC,WAAW,GAAGR,IAAI,CAACC,IAAL,CAAUF,YAAV,EAAwBQ,OAAxB,CAApB;AACA,YAAME,SAAS,GAAGT,IAAI,CAACC,IAAL,CAAUO,WAAV,EAAuB,YAAvB,CAAlB;AACA,YAAME,UAAU,GAAGV,IAAI,CAACC,IAAL,CAAUO,WAAV,EAAuB,aAAvB,CAAnB;AACA,YAAMG,SAAS,GAAGX,IAAI,CAACC,IAAL,CAAUO,WAAV,EAAuB,UAAvB,CAAlB;AACA,UAAII,WAAJ;;AACA,UAAI;AACFA,QAAAA,WAAW,GAAGC,OAAO,CAACF,SAAD,CAAP,CAAmBG,OAAjC;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc,CACd;AACD;;AAED,YAAMC,KAAK,GAAGZ,EAAE,CAACa,YAAH,CAAgBR,SAAhB,EAA2BS,QAA3B,EAAd;;AACA,YAAMC,QAAkB,GAAGC,sBAASC,QAAT,CAAkBC,IAAI,CAACC,KAAL,CAAWP,KAAX,CAAlB,CAA3B;;AACA,YAAMQ,MAAM,GAAG,IAAIC,GAAJ,CAAQ,CAAC,CAAC,YAAD,EAAe,CAAC;AAAEC,QAAAA,KAAK,EAAEC;AAAT,OAAD,CAAf,CAAD,EAAsC,CAAC,SAAD,EAAY,CAAC;AAAED,QAAAA,KAAK,EAAEE,MAAT;AAAiBC,QAAAA,MAAM,EAAEF;AAAzB,OAAD,CAAZ,CAAtC,EAAwF,CAC7G,iBAD6G,EAE7G,CACE;AACEG,QAAAA,IAAI,EAAE;AACJC,UAAAA,GAAG,EAAE,CAACC,SAAD,EAAYC,MAAZ,CADD;AAEJC,UAAAA,OAAO,EAAE,CAACF,SAAD,EAAYC,MAAZ,CAFL;AAGJE,UAAAA,IAAI,EAAEF;AAHF;AADR,OADF,EAQE;AACEH,QAAAA,IAAI,EAAE;AACJC,UAAAA,GAAG,EAAE,CAACC,SAAD,EAAYC,MAAZ,CADD;AAEJC,UAAAA,OAAO,EAAE,CAACF,SAAD,EAAYC,MAAZ;AAFL;AADR,OARF,CAF6G,CAAxF,CAAR,CAAf;;AAmBA,UAAIrB,WAAJ,EAAiB;AACf,cAAM,CAACwB,GAAD,EAAMV,KAAN,IAAed,WAArB;AACAY,QAAAA,MAAM,CAACa,GAAP,CAAWD,GAAX,EAAgBV,KAAhB;AACD;;AAED,YAAMY,kBAAkB,GAAG,2CAAiBnB,QAAjB,EAA2BK,MAA3B,CAA3B;AACA,YAAMe,WAAW,GAAGjB,IAAI,CAACkB,SAAL,CAAeF,kBAAkB,CAACG,MAAnB,EAAf,EAA4C,IAA5C,EAAkD,CAAlD,CAApB;AACAC,MAAAA,EAAE,CAACnC,OAAD,EAAU,MAAM;AAChBZ,QAAAA,MAAM,CAAC4C,WAAD,CAAN,CAAoB1C,WAApB,CAAgCa,UAAhC;AACD,OAFC,CAAF;AAGD,KA3CD;AA4CD,GA/CO,CAAR;AAgDD,CAjDO,CAAR","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { toMatchFile } from 'jest-file-snapshot';\nimport { Document } from '@ali/4ever-cangjie';\nimport { restructFragment } from '@ali/4ever-plugin-clipboard';\n\nexpect.extend({ toMatchFile });\n\ndescribe('Restruct fragment between different plugins editor', () => {\n  describe('Restruct fragment without models', () => {\n    const fixturesPath = path.join(__dirname, 'fixtures');\n    const fixtures = fs.readdirSync(fixturesPath);\n    fixtures.forEach((fixture) => {\n      const fixturePath = path.join(fixturesPath, fixture);\n      const inputPath = path.join(fixturePath, 'input.json');\n      const outputPath = path.join(fixturePath, 'output.json');\n      const modelPath = path.join(fixturePath, 'model.ts');\n      let modelConfig;\n      try {\n        modelConfig = require(modelPath).default;\n      } catch (error) {\n        // do nothing;\n      }\n\n      const input = fs.readFileSync(inputPath).toString();\n      const fragment: Document = Document.fromJSON(JSON.parse(input));\n      const models = new Map([['mark_color', [{ value: String }]], ['mark_sz', [{ value: Number, szUnit: String }]], [\n        'block_paragraph',\n        [\n          {\n            data: {\n              ind: [undefined, Object],\n              spacing: [undefined, Object],\n              list: Object,\n            },\n          },\n          {\n            data: {\n              ind: [undefined, Object],\n              spacing: [undefined, Object],\n            },\n          },\n        ],\n      ]]);\n\n      if (modelConfig) {\n        const [key, value] = modelConfig;\n        models.set(key, value);\n      }\n\n      const fragmentRestructed = restructFragment(fragment, models);\n      const fragmentStr = JSON.stringify(fragmentRestructed.toJSON(), null, 2);\n      it(fixture, () => {\n        expect(fragmentStr).toMatchFile(outputPath);\n      });\n    });\n  });\n});\n"],"file":"index.test.js"}