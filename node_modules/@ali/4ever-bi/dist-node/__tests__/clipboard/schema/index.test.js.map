{"version":3,"sources":["../../../../../src/__tests__/clipboard/schema/index.test.tsx"],"names":["expect","extend","toMatchFile","describe","fixturesPath","path","join","__dirname","fixtures","fs","readdirSync","forEach","fixture","fixturePath","inputPath","outputPath","input","readFileSync","toString","fragment","Document","fromJSON","JSON","parse","fragmentNormalized","schema","strictSchema","fragmentStr","stringify","toJSON","it","rulePath","filterRule","rules","block","inline","blockType","ruleType","RegExp"],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { toMatchFile } from 'jest-file-snapshot';\nimport { Document } from '@ali/4ever-cangjie';\nimport { filterAndNormalize, ClipboardFilter } from '@ali/4ever-plugin-clipboard';\nimport { strictSchema } from '@ali/4ever-mo'\n\nexpect.extend({ toMatchFile });\n\ndescribe('ccp', () => {\n  describe('Paste normalize with strict schema', () => {\n    const fixturesPath = path.join(__dirname, 'normalize');\n    const fixtures = fs.readdirSync(fixturesPath);\n    fixtures.forEach((fixture) => {\n      const fixturePath = path.join(fixturesPath, fixture);\n      const inputPath = path.join(fixturePath, 'input.json');\n      const outputPath = path.join(fixturePath, 'output.json');\n\n      const input = fs.readFileSync(inputPath).toString();\n      const fragment: Document = Document.fromJSON(JSON.parse(input));\n      const fragmentNormalized = filterAndNormalize({\n        fragment,\n        schema: strictSchema,\n      });\n      const fragmentStr = JSON.stringify(fragmentNormalized.toJSON(), null, 2);\n      it(fixture, () => {\n        expect(fragmentStr).toMatchFile(outputPath);\n      });\n    });\n  });\n\n  describe('Paste normalize filter rules', () => {\n    const fixturesPath = path.join(__dirname, 'filter');\n    const fixtures = fs.readdirSync(fixturesPath);\n    fixtures.forEach((fixture) => {\n      const fixturePath = path.join(fixturesPath, fixture);\n      const inputPath = path.join(fixturePath, 'input.json');\n      const outputPath = path.join(fixturePath, 'output.json');\n      const rulePath = path.join(fixturePath, 'rules.json');\n\n      const input = fs.readFileSync(inputPath).toString();\n      const filterRule = JSON.parse(fs.readFileSync(rulePath).toString());\n      const fragment: Document = Document.fromJSON(JSON.parse(input));\n      const rules: ClipboardFilter = {\n        block: {},\n        inline: {},\n      };\n      if (filterRule) {\n        for (const blockType in filterRule) {\n          const block = filterRule[blockType];\n          for (const ruleType in block) {\n            rules[blockType][ruleType] = new RegExp(block[ruleType]);\n          }\n        }\n      }\n      const fragmentNormalized = filterAndNormalize({\n        fragment,\n        rules,\n        schema: strictSchema,\n      });\n      const fragmentStr = JSON.stringify(fragmentNormalized.toJSON(), null, 2);\n      it(fixture, () => {\n        expect(fragmentStr).toMatchFile(outputPath);\n      });\n    });\n  });\n});\n"],"file":"index.test.js"}