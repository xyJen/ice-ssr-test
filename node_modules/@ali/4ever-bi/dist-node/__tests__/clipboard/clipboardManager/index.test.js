"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginClipboard = require("@ali/4ever-plugin-clipboard");

var _clipboardManager = _interopRequireDefault(require("@ali/clipboard-manager"));

var _everMo = require("@ali/4ever-mo");

const {
  MIME_TYPES
} = _everCangjie.constants;
const DATA = {
  [MIME_TYPES.TEXT]: '123'
};
describe('bi/clipboard/ClipboardManager', () => {
  document.execCommand = jest.fn();
  it('创建的 hiddenTextarea 时插入到 body 下，clipboard 对象销毁时 hiddenTextarea 移除掉', () => {
    const clip = new _clipboardManager.default();
    clip.selectFake(DATA);
    const {
      lastChild
    } = document.body;
    expect(lastChild.nodeName).toBe('TEXTAREA');
    clip.destroy();
    const {
      lastChild: newLastChild
    } = document.body;
    expect(newLastChild).not.toBe(lastChild);
  });
  it('初始化时传入相关配置', () => {
    const clip = new _clipboardManager.default({
      action: 'copy',
      container: document.body,
      target: document.createElement('textarea')
    });
    clip.selectFake(DATA);
    const {
      lastChild
    } = document.body;
    expect(lastChild.nodeName).toBe('TEXTAREA');
    clip.destroy();
    const {
      lastChild: newLastChild
    } = document.body;
    expect(newLastChild).not.toBe(lastChild);
  });
  it('写入纯文本', () => {
    const clip = new _clipboardManager.default();
    clip.writeText('钉钉文档TEXT').catch(result => {
      // node 环境不能使用 document.execCommand, 单测仅保证流程是否畅通
      expect(document.execCommand).toHaveBeenCalledWith('copy');
      expect(result.action).toBe('copy');
      expect(result.text).toBe('钉钉文档TEXT');
    });
  });
  it('写入自定义 MIME TYPE 数据', () => {
    const clip = new _clipboardManager.default();
    clip.write({
      [MIME_TYPES.TEXT]: '钉钉文档TEXT',
      [MIME_TYPES.HTML]: '<div>钉钉文档HTML</div>'
    }).catch(result => {
      expect(document.execCommand).toHaveBeenCalledWith('copy'); // node 环境不能使用 document.execCommand, 单测仅保证流程是否畅通

      expect(result.action).toBe('copy');
    });
  });
  it('写入 FILE TYPE 数据', () => {
    const clip = new _clipboardManager.default();
    clip.write({
      'image/png': 'https://alidocs.oss-accelerate.aliyuncs.com/res/E8K4nyVo6RapqLbj/img/c0d39b35-0c85-46f4-92d7-8f008cd26da6.jpeg',
      [MIME_TYPES.TEXT]: '图片',
      [MIME_TYPES.HTML]: '<img src="https://alidocs.oss-accelerate.aliyuncs.com/res/E8K4nyVo6RapqLbj/img/c0d39b35-0c85-46f4-92d7-8f008cd26da6.jpeg">'
    }).catch(result => {
      expect(navigator.clipboard.write).toHaveBeenCalled();
    });
  });
  it('通过 nodes 写入数据', () => {
    const paragraphA = _everCangjie.Block.create({
      type: 'paragraph',
      nodes: [_everCangjie.Text.create('A')]
    });

    const textB = _everCangjie.Text.create('B');

    (0, _everPluginClipboard.copyNodes)([paragraphA, textB], _everMo.moSerializer).catch(result => {
      expect(document.execCommand).toHaveBeenCalledWith('copy');
      expect(result.action).toBe('copy');
    });
  });
});
//# sourceMappingURL=index.test.js.map