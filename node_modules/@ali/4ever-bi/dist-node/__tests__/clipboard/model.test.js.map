{"version":3,"sources":["../../../../src/__tests__/clipboard/model.test.tsx"],"names":["DEFAULT_PAGE_WIDTH","TablePlugin","constants","describe","tableCases","title","input","output","colsWidth","colSpan","hidden","rowSpan","width","forEach","tableCase","it","normalizedFragment","expect","toJSON","toEqual","list","listId","randomStore","Math","random"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport '@testing-library/jest-dom/extend-expect';\nimport { jsx } from '@ali/4ever-dev-test';\nimport { TablePlugin } from '@ali/4ever-mo';\nimport { normalizeFragment } from '@ali/4ever-plugin-clipboard';\nimport { Document } from '@ali/4ever-cangjie';\n\nconst { DEFAULT_PAGE_WIDTH } = TablePlugin.constants;\n\n/** **************************************************\n *  测试 fragment 相等性使用 toJSON，防止 key 值的干扰\n *************************************************** */\n\ninterface NormalizeCase {\n  title: string;\n  input: Document;\n  output: Document;\n}\n\ndescribe('bi/clipboard/model', () => {\n  describe('测试表格的 fragment normalize', () => {\n    const tableCases: NormalizeCase[] = [\n      {\n        title: '测试表格的 table 节点没有 colsWidth',\n        input: (\n          <document>\n            <block type=\"table\">\n              <block type=\"table-row\">\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">A</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n        output: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [DEFAULT_PAGE_WIDTH] }}>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">A</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n      },\n\n      /* **************************** hr **************************** */\n      {\n        title: '测试表格的 table 节点 colsWidth 与列数不等',\n        input: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100, 100] }}>\n              <block type=\"table-row\">\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">A</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n        output: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [DEFAULT_PAGE_WIDTH] }}>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">A</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n      },\n\n      /* **************************** hr **************************** */\n      {\n        title: '测试表格的行列数不规整，自动补齐',\n        input: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">A</block>\n                </block>\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">B</block>\n                </block>\n              </block>\n              <block type=\"table-row\">\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">C</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n        output: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">A</block>\n                </block>\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">B</block>\n                </block>\n              </block>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">C</block>\n                </block>\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\"><text /></block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n      },\n\n      /* **************************** hr **************************** */\n      {\n        title: '测试表格单元格 span 跨度超过最大值',\n        input: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">A</block>\n                </block>\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 3,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">B</block>\n                </block>\n              </block>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 2,\n                  }}\n                >\n                  <block type=\"paragraph\">C</block>\n                </block>\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">D</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n        output: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">A</block>\n                </block>\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">B</block>\n                </block>\n              </block>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">C</block>\n                </block>\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">D</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n      },\n\n      /* **************************** hr **************************** */\n      {\n        title: '测试表格单元格 hidden 属性的正确性',\n        input: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 2,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">A</block>\n                </block>\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">B</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n        output: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 2,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">A</block>\n                </block>\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: true,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">B</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n      },\n\n      /* **************************** hr **************************** */\n      {\n        title: '测试表格单元格为空时自动 normalize 填充 paragraph',\n        input: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">A</block>\n                </block>\n                <block type=\"table-cell\" />\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n        output: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">A</block>\n                </block>\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\"><text /></block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n      },\n\n      /* **************************** hr **************************** */\n      {\n        title: '测试表格单元格脏数据清理：width',\n        input: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                    width: 300,\n                  }}\n                >\n                  <block type=\"paragraph\" >A</block>\n                </block>\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">B</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n        output: (\n          <document>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">A</block>\n                </block>\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">B</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n      },\n\n      /* **************************** hr **************************** */\n      {\n        title: '测试复合选区 fragment 表格的末尾追加一个段落',\n        input: (\n          <document>\n            <block type=\"paragraph\">paragraph</block>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\" >A</block>\n                </block>\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">B</block>\n                </block>\n              </block>\n            </block>\n          </document>\n        ) as unknown as Document,\n        output: (\n          <document>\n            <block type=\"paragraph\">paragraph</block>\n            <block type=\"table\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">A</block>\n                </block>\n                <block\n                  type=\"table-cell\"\n                  data={{\n                    colSpan: 1,\n                    hidden: false,\n                    rowSpan: 1,\n                  }}\n                >\n                  <block type=\"paragraph\">B</block>\n                </block>\n              </block>\n            </block>\n            <block type=\"paragraph\"><text /></block>\n          </document>\n        ) as unknown as Document,\n      },\n    ];\n\n    tableCases.forEach((tableCase) => {\n      const { title, input, output } = tableCase;\n      it(title, () => {\n        const normalizedFragment = normalizeFragment(input);\n\n        expect(normalizedFragment.toJSON()).toEqual(output.toJSON());\n      });\n    });\n  });\n\n  describe('测试列表 fragment 的 normalize', () => {\n    it('测试列表的 listId regenerate', () => {\n      const input = (\n        <document>\n          <block\n            type=\"paragraph\"\n            data={{\n              list: {\n                listId: '111',\n              },\n            }}\n          >paragraph\n          </block>\n          <block\n            type=\"paragraph\"\n            data={{\n              list: {\n                listId: '111',\n              },\n            }}\n          >paragraph\n          </block>\n        </document>\n      ) as unknown as Document;\n\n      const output = (\n        <document>\n          <block\n            type=\"paragraph\"\n            data={{\n              list: {\n                listId: '111',\n              },\n            }}\n          >paragraph\n          </block>\n          <block\n            type=\"paragraph\"\n            data={{\n              list: {\n                listId: '111',\n              },\n            }}\n          >paragraph\n          </block>\n        </document>\n      ) as unknown as Document;\n\n      const randomStore = Math.random;\n      // 目前底层生成 listId 的方法不严谨，使用的 random，后续重写之后需要修改这里\n      // 0.5 (36位转换)-> 0.i\n      Math.random = () => 0.5;\n      const normalizedFragment = normalizeFragment(input);\n      Math.random = randomStore;\n\n      expect(normalizedFragment.toJSON()).toEqual(output.toJSON());\n    });\n  });\n});\n"],"file":"model.test.js"}