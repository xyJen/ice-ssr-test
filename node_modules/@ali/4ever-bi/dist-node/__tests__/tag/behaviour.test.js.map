{"version":3,"sources":["../../../../src/__tests__/tag/behaviour.test.tsx"],"names":["tagPlugin","tagType","renderNode","node","controller","onClick","run","height","width","data","metadata","imTitle","createBiPlugins","plugins","array","describe","test","value","output","Controller","create","command","Commands","moveToRangeOfDocument","actual","toJSON","preserveSelections","expected","setValue","expect","toEqual","firstInlines","document","getInlines","length","secondInlines"],"mappings":"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","sourcesContent":["\n/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport { jsx } from '@ali/4ever-dev-test';\nimport { Controller, Commands, Value } from '@ali/4ever-cangjie';\nimport { tagFactory, setTagData, insertTag, createCustomizedBiPlugins } from '../..';\nconst tagPlugin = tagFactory(() => {\n  return {\n    tagType: 'tag',\n    renderNode: ({ node }, controller: Controller) => {\n      const onClick = () => {\n        controller.run('onAction', setTagData(node, { height: 40, width: 60 }));\n      };\n      const { height } = node.data;\n      return <div data-testid=\"tag-content\" onClick={onClick} data-tag-height={height}>{'来至会话 ' + node.data.metadata.imTitle}</div>;\n    },\n  };\n});\n\nconst createBiPlugins = createCustomizedBiPlugins({\n  tagPlugin,\n});\nconst plugins = createBiPlugins({\n}).array;\n\ndescribe('Bi/tag/behaviour', () => {\n  test('在正文全选，可以选中来源于', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            Start Paragraph\n            <inline\n              type=\"tag\"\n              data={{\n                tagType: 'tag',\n                height: 24,\n                width: 100,\n              }}\n            />\n            <cursor />\n          </block>\n          <block type=\"paragraph\">End Paragraph</block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n    const output = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <anchor />\n            Start Paragraph\n            <inline\n              type=\"tag\"\n              data={{\n                tagType: 'tag',\n                height: 24,\n                width: 100,\n              }}\n            />\n          </block>\n          <block type=\"paragraph\">End Paragraph<focus /></block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    controller.command(Commands.moveToRangeOfDocument);\n    const actual = controller.value.toJSON({ preserveSelections: true });\n    const expected = controller\n      .setValue(output)\n      .value.toJSON({ preserveSelections: true });\n    expect(actual).toEqual(expected);\n  });\n\n\n  test('插入tag元素', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            12345<cursor />6789\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    controller.run('onAction', insertTag({\n      tagType: 'tag',\n    }));\n    const firstInlines = controller.value.document.getInlines();\n    expect(firstInlines.length === 1).toEqual(true);\n    expect(firstInlines[0].data.tagType).toEqual('tag');\n    // 连续插入\n    controller.run('onAction', insertTag({\n      tagType: 'tag',\n    }));\n    const secondInlines = controller.value.document.getInlines();\n    expect(secondInlines.length === 2).toEqual(true);\n    expect(secondInlines[1].data.tagType).toEqual('tag');\n  });\n});"],"file":"behaviour.test.js"}