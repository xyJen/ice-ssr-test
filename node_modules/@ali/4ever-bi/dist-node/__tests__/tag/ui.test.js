"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _ = require("../..");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _everDevTest = require("@ali/4ever-dev-test");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const CreateTagPlugin = () => {
  return {
    onKeyDown: (event, controller, next) => {
      if (event.key === 'i') {
        return controller.run('onAction', (0, _.insertTag)({
          tagType: 'insert'
        }));
      }

      return next();
    }
  };
};

const InsertTagPlugin = (0, _.tagFactory)(config => {
  return {
    tagType: 'insert',
    renderNode: ({
      isOwnerAndFirstCreated
    }, controller) => {
      return (0, _everDevTest.jsx)("div", {
        "data-testid": "insert-tag-content",
        "data-owner": isOwnerAndFirstCreated
      }, "isOwnerAndFirstCreated=", String(isOwnerAndFirstCreated));
    }
  };
});
const tagPlugin = (0, _.tagFactory)(() => {
  return {
    tagType: 'tag',
    verticalAlign: 'middle',
    renderNode: ({
      node,
      isSelected
    }, controller) => {
      const onClick = () => {
        controller.run('onAction', (0, _.setTagData)(node, {
          height: 40,
          width: 60
        }));
      };

      const {
        height
      } = node.data;
      const attr = {};

      if (isSelected) {
        attr.focusbackgroundcolor = 'true';
      }

      return (0, _everDevTest.jsx)("span", (0, _extends2.default)({}, attr, {
        "data-testid": "tag-content",
        onClick: onClick,
        style: {
          height
        }
      }), `来至会话 ${node.data.metadata.imTitle}`);
    }
  };
});
const topTagPlugin = (0, _.tagFactory)(() => {
  return {
    tagType: 'top',
    verticalAlign: node => 'top',
    renderNode: ({
      node,
      isSelected
    }, controller) => {
      const onClick = () => {
        controller.run('onAction', (0, _.setTagData)(node, {
          height: 40,
          width: 60
        }));
      };

      const {
        height
      } = node.data;
      const attr = {};

      if (isSelected) {
        attr.focusbackgroundcolor = 'true';
      }

      return (0, _everDevTest.jsx)("span", (0, _extends2.default)({}, attr, {
        "data-testid": "tag-content",
        onClick: onClick,
        style: {
          height
        }
      }), `来至会话 ${node.data.metadata.imTitle}`);
    }
  };
});
const errorTag = (0, _.tagFactory)(() => {
  return {
    tagType: 'error',
    renderNode: () => {
      throw new Error('error renderNode');
    }
  };
});

const ErrorComponent = () => {
  throw new Error('error ErrorComponent');
};

var _ref = (0, _everDevTest.jsx)(ErrorComponent, null);

const errorTagWithChildren = (0, _.tagFactory)(() => {
  return {
    tagType: 'errorChildren',
    renderNode: () => {
      return _ref;
    }
  };
});
const createBiPlugins = (0, _.createCustomizedBiPlugins)({ ..._.plugins,
  topTagPlugin,
  tagPlugin,
  errorTag,
  errorTagWithChildren,
  CreateTagPlugin,
  InsertTagPlugin
});

var _ref2 = (0, _everDevTest.jsx)(_content.default, null);

const Editor = props => {
  const {
    defaultValue,
    refValue
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  if (refValue) refValue.current = value;
  const plugins = React.useMemo(() => {
    return createBiPlugins({});
  }, []);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    autoFocus: true
  }, _ref2);
};

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("cursor", null);

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Start Paragraph", (0, _everDevTest.jsx)("cursor", null))));

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

var _ref7 = (0, _everDevTest.jsx)("cursor", null);

var _ref8 = (0, _everDevTest.jsx)("cursor", null);

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}));

var _ref10 = (0, _everDevTest.jsx)("cursor", null);

var _ref11 = (0, _everDevTest.jsx)("cursor", null);

var _ref12 = (0, _everDevTest.jsx)("cursor", null);

var _ref13 = (0, _everDevTest.jsx)("cursor", null);

var _ref14 = (0, _everDevTest.jsx)("cursor", null);

var _ref15 = (0, _everDevTest.jsx)("cursor", null);

var _ref16 = (0, _everDevTest.jsx)("cursor", null);

var _ref17 = (0, _everDevTest.jsx)("cursor", null);

var _ref18 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/tag/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('unknownTag', () => {
    test('是否正常渲染 unknownTag', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref3, (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'unknown2',
          height: 20,
          width: 100,
          metadata: {}
        }
      }))));
      const {
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      expect(!!queryByText('暂无法解析')).toBe(true);
    });
    test('验证 tag 非首次创建', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "Start Paragraph", (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'insert',
          height: 20,
          width: 100,
          metadata: {}
        }
      }), _ref4)));
      const {
        findByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const el = await findByTestId('insert-tag-content');
      expect(!!el).toBe(true);
      expect(el.getAttribute('data-owner')).toBe('false');
    });
    test('插入标签，并验证是否为当前用户首次创建', async () => {
      const value = _ref5;
      const {
        editor,
        findByText,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('i'));

      expect(await findByText('isOwnerAndFirstCreated=true')).toBeInstanceOf(HTMLElement); // 第二次重绘时 isOwnerAndFirstCreated = false

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ArrowLeft'));

      expect(await findByText('isOwnerAndFirstCreated=false')).toBeInstanceOf(HTMLElement);
    });
  });
  describe('errorTag', () => {
    test('渲染标签 renderNode 出现异常，兜底显示', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref6, (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'error',
          height: 20,
          width: 100,
          metadata: {}
        }
      }))));
      const {
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      expect(!!queryByText('暂无法解析')).toBe(true);
    });
    test('渲染标签 renderChildren 出现异常，兜底显示', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref7, (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'errorChildren',
          height: 20,
          width: 100,
          metadata: {}
        }
      }))));
      const {
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      expect(!!queryByText('暂无法解析')).toBe(true);
    });
  });
  describe('更新 tag', () => {
    test('更新tag高度(持久化)', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref8, (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'tag',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }))));
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      })); // 首次点击，验证setData

      _everDevTest.fireEvent.click(queryByTestId('tag-content'));

      await (0, _everDevTest.waitForTime)(100);
      const content = queryByTestId('tag-content');
      expect(content.style.height === '40px').toBe(true);
    });
  });
  describe('tag 正常渲染', () => {
    test('tag 宽度大于容器宽度时自适应容器宽度', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table",
        data: {
          colsWidth: [50, 600]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, _ref9, (0, _everDevTest.jsx)("block", {
        type: "table-cell"
      }, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'tag',
          height: 20,
          width: 400,
          metadata: {
            imTitle: '蓝鲸-文档协同文档协同文档协同文档协同文档协同文档协同文档协同文档协同文档协同'
          }
        }
      }), _ref10))))));
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const tag = await findByTestId('tag'); // 单测不会渲染出真实节点，宽度为 0

      expect(tag.style.width).toBe('auto');
    });
    test('verticalAlign 渲染 - 居中', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'tag',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }), _ref11)));
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const tagEl = await findByTestId('tag');
      expect(!!tagEl).toBe(true);
      expect(tagEl.style.verticalAlign).toBe('middle');
    });
    test('verticalAlign 渲染 - 顶部', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'top',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }), _ref12)));
      const {
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const tagEl = await findByTestId('top');
      expect(!!tagEl).toBe(true);
      expect(tagEl.style.verticalAlign).toBe('top');
    });
  });
  describe('inline-tag/删除', () => {
    test('向前删除，第一次选中，第二次删除', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'tag',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }), _ref13)));
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _react2.wait)(); // 第一次删除选中

      expect(!!queryByTestId('tag-content').getAttribute('focusbackgroundcolor')).toBe(true);

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _react2.wait)(); // 第二次删除

      expect(!queryByTestId('tag-content')).toBe(true);
    });
    test('向后删除，第一次选中，第二次删除', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref14, (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'tag',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }), "233")));
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('delete'));

      await (0, _react2.wait)(); // 第一次删除选中

      expect(!!queryByTestId('tag-content').getAttribute('focusbackgroundcolor')).toBe(true);

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('delete'));

      await (0, _react2.wait)(); // 第二次删除

      expect(!queryByTestId('tag-content')).toBe(true);
    });
  });
  describe('inline-tag/左右移动', () => {
    test('左箭头处理，第一次选中，第二次跳过', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'tag',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }), _ref15, "456")));
      const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", _ref16, (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'tag',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }), "456")));
      const refValue = /*#__PURE__*/React.createRef();
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refValue: refValue
      })); // 左箭头

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ArrowLeft'));

      await (0, _react2.wait)(); // 第一次选中

      expect(!!queryByTestId('tag-content').getAttribute('focusbackgroundcolor')).toBe(true);

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ArrowLeft'));

      await (0, _react2.wait)(); // 第二次跳过

      const actual = refValue.current.toJSON({
        preserveSelections: true
      });

      const controller = _everCangjie.Controller.create({
        value: output,
        plugins: []
      });

      const expected = controller.value.toJSON({
        preserveSelections: true
      });
      expect(actual).toEqual(expected);
    });
    test('右箭头处理，第一次选中，第二次跳过', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", _ref17, (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'tag',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }), "456")));
      const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'tag',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }), _ref18, "456")));
      const refValue = /*#__PURE__*/React.createRef();
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        refValue: refValue
      })); // 右箭头

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ArrowRight'));

      await (0, _react2.wait)(); // 第一次选中

      expect(!!queryByTestId('tag-content').getAttribute('focusbackgroundcolor')).toBe(true);

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ArrowRight'));

      await (0, _react2.wait)(); // 第二次跳过

      const actual = refValue.current.toJSON({
        preserveSelections: true
      });

      const controller = _everCangjie.Controller.create({
        value: output,
        plugins: []
      });

      const expected = controller.value.toJSON({
        preserveSelections: true
      });
      expect(actual).toEqual(expected);
    });
  });
});
//# sourceMappingURL=ui.test.js.map