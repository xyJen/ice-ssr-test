"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _draggable = _interopRequireDefault(require("../../plugins/draggable"));

var _leftToolbar = _interopRequireDefault(require("../../plugins/leftToolbar"));

var _imTag = _interopRequireDefault(require("../../plugins/imTag"));

var _heading = _interopRequireDefault(require("../../plugins/heading"));

var _createCustomizedBiPlugins = _interopRequireDefault(require("../../createCustomizedBiPlugins"));

/** @jsx jsx */
const defaultValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello ", (0, _everDevTest.jsx)("cursor", null), "Cangjie")));

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const App = props => {
  const {
    val = defaultValue
  } = props;
  const [value, setValue] = React.useState(val);
  const createBiPlugins = (0, _createCustomizedBiPlugins.default)({
    draggable: _draggable.default,
    ImTagPlugin: _imTag.default,
    HeadingPlugin: _heading.default,
    leftToolbar: _leftToolbar.default
  });

  const handleChange = change => {
    (0, _react2.act)(() => {
      setValue(change.value);
    });
  };

  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    plugins: createBiPlugins({
      draggable: {
        enabled: true,
        forbiddenElements: {
          paragraph: true
        }
      },
      leftToolbar: {
        menu: [{
          key: 'draggable'
        }]
      }
    }),
    onChange: handleChange,
    autoFocus: true
  }, _ref);
};

async function renderApp(val) {
  const results = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(App, {
    val: val
  }), {
    container: document.body
  });
  const {
    container
  } = results;
  const paragraph = container.querySelector('[data-type="paragraph"]');

  _everDevTest.fireEvent.mouseMove(paragraph);

  return { ...results,
    paragraph
  };
}

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "A", (0, _everDevTest.jsx)("cursor", null))));

describe('Bi/draggable/forbidden', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
    jest.clearAllMocks();
  });
  test('hide dragHander in forbiddenElements', async () => {
    const value = _ref2;
    const {
      queryByTestId
    } = await renderApp(value);
    await (0, _everDevTest.waitForTime)(100);
    expect(queryByTestId('drag-hander')).not.toBeInTheDocument();
  });
});
//# sourceMappingURL=forbidden.ui.test.js.map