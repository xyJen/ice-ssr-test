"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

require("@testing-library/jest-dom/extend-expect");

var _everDevTest = require("@ali/4ever-dev-test");

var _everPluginTable = require("@ali/4ever-plugin-table");

var _draggable = _interopRequireDefault(require("../../plugins/draggable"));

var _leftToolbar = _interopRequireDefault(require("../../plugins/leftToolbar"));

var _everPluginDraggable = require("@ali/4ever-plugin-draggable");

var _ = require("../..");

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  draggable: _draggable.default,
  leftToolbar: _leftToolbar.default,
  table: _everPluginTable.biFactory
});
const dragBlockCases = [{
  name: 'UpDown',
  dragKey: 'drag-1',
  dropKey: 'drag-2',
  dropPosition: _everPluginDraggable.DROP_POSITION.after,
  isCopy: true,
  in: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B"))),
  out: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"))),
  copyedOut: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A")))
}, {
  name: 'DownUp',
  dragKey: 'drag-2',
  dropKey: 'drag-1',
  dropPosition: _everPluginDraggable.DROP_POSITION.before,
  isCopy: true,
  in: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B"))),
  out: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }))),
  copyedOut: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B")))
}, {
  name: 'TableInTable',
  dragKey: 'table-key-1',
  dropKey: 'drag-2',
  dropPosition: _everPluginDraggable.DROP_POSITION.after,
  in: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }), (0, _everDevTest.jsx)("block", {
    type: "table",
    key: "table-key-1",
    data: {
      colsWidth: [100, 100]
    }
  }, (0, _everDevTest.jsx)("block", {
    type: "table-row"
  }, (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "A")), (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }))), (0, _everDevTest.jsx)("block", {
    type: "table",
    key: "table-key-2",
    data: {
      colsWidth: [100, 100]
    }
  }, (0, _everDevTest.jsx)("block", {
    type: "table-row"
  }, (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "A")), (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B")))))),
  out: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }), (0, _everDevTest.jsx)("block", {
    type: "table",
    key: "table-key-1",
    data: {
      colsWidth: [100, 100]
    }
  }, (0, _everDevTest.jsx)("block", {
    type: "table-row"
  }, (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "A")), (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }))), (0, _everDevTest.jsx)("block", {
    type: "table",
    key: "table-key-2",
    data: {
      colsWidth: [100, 100]
    }
  }, (0, _everDevTest.jsx)("block", {
    type: "table-row"
  }, (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "A")), (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B"))))))
}, {
  name: 'InTable',
  dragKey: 'drag-1',
  dropKey: 'drag-2',
  dropPosition: _everPluginDraggable.DROP_POSITION.after,
  isCopy: true,
  in: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }), (0, _everDevTest.jsx)("block", {
    type: "table",
    key: "table-key",
    data: {
      colsWidth: [100, 100]
    }
  }, (0, _everDevTest.jsx)("block", {
    type: "table-row"
  }, (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "A")), (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B")))))),
  out: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }), (0, _everDevTest.jsx)("block", {
    type: "table",
    key: "table-key",
    data: {
      colsWidth: [100, 100]
    }
  }, (0, _everDevTest.jsx)("block", {
    type: "table-row"
  }, (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "A")), (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A")))))),
  copyedOut: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }), (0, _everDevTest.jsx)("block", {
    type: "table",
    key: "table-key",
    data: {
      colsWidth: [100, 100]
    }
  }, (0, _everDevTest.jsx)("block", {
    type: "table-row"
  }, (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "A")), (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"))))))
}, {
  name: 'OutTable',
  dragKey: 'drag-2',
  dropKey: 'drag-1',
  dropPosition: _everPluginDraggable.DROP_POSITION.before,
  in: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }), (0, _everDevTest.jsx)("block", {
    type: "table",
    key: "table-key",
    data: {
      colsWidth: [100, 100]
    }
  }, (0, _everDevTest.jsx)("block", {
    type: "table-row"
  }, (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "A")), (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B")))))),
  out: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-2"
  }, "B"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    key: "drag-1"
  }, "A"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }), (0, _everDevTest.jsx)("block", {
    type: "table",
    key: "table-key",
    data: {
      colsWidth: [100, 100]
    }
  }, (0, _everDevTest.jsx)("block", {
    type: "table-row"
  }, (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  }, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "A")), (0, _everDevTest.jsx)("block", {
    type: "table-cell"
  })))))
}];
const plugins = createBiPlugins({
  draggable: {
    enabled: true
  },
  leftToolbar: {
    menu: [{
      key: 'draggable'
    }]
  }
}).array;
describe('bi/draggable/dropBlock.model', () => {
  describe('drag block', () => {
    dragBlockCases.forEach(testCase => {
      const value = testCase.in;
      const draggableData = {
        dragFragment: {
          type: _everPluginDraggable.DRAG_TYPE.blocks,
          fragment: [{
            key: testCase.dragKey
          }]
        },
        dropHolder: {
          key: testCase.dropKey,
          dropPosition: testCase.dropPosition
        }
      };
      let actual;
      let expected;
      let controller;

      if (testCase.isCopy) {
        draggableData.isCopy = true;
        test(`块级元素拖拽-${testCase.name}-copy`, async () => {
          controller = _everCangjie.Controller.create({
            value,
            plugins
          }); // @ts-ignore

          controller.command('draggableDropFragment', draggableData);
          actual = controller.value.toJSON();
          expected = controller.setValue(testCase.copyedOut).value.toJSON();
          expect(actual).toEqual(expected);
        });
      }

      test(`块级元素拖拽-${testCase.name}`, async () => {
        draggableData.isCopy = false;
        controller = _everCangjie.Controller.create({
          value,
          plugins
        }); // @ts-ignore

        controller.command('draggableDropFragment', draggableData);
        actual = controller.value.toJSON();
        expected = controller.setValue(testCase.out).value.toJSON();
        expect(actual).toEqual(expected);
      });
    });
  });
});
//# sourceMappingURL=dropBlock.model.test.js.map