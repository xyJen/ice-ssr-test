"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _everPluginTable = require("@ali/4ever-plugin-table");

var _hr = _interopRequireDefault(require("../../plugins/hr"));

var _draggable = _interopRequireDefault(require("../../plugins/draggable"));

var _leftToolbar = _interopRequireDefault(require("../../plugins/leftToolbar"));

var _everPluginDraggable = require("@ali/4ever-plugin-draggable");

var _createCustomizedBiPlugins = _interopRequireDefault(require("../../createCustomizedBiPlugins"));

/** @jsx jsx */
const getDragThumbnails = _everPluginDraggable.oldUtils.getDragThumbnails;

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const App = props => {
  const {
    val,
    controllerRef
  } = props;
  const [value, setValue] = React.useState(val);
  const createBiPlugins = (0, _createCustomizedBiPlugins.default)({
    draggable: _draggable.default,
    hr: _hr.default,
    table: _everPluginTable.biFactory,
    leftToolbar: _leftToolbar.default
  });

  const handleChange = change => {
    (0, _react2.act)(() => {
      setValue(change.value);
    });
  };

  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    plugins: createBiPlugins({
      draggable: {
        enabled: true
      },
      leftToolbar: {
        menu: [{
          key: 'draggable'
        }]
      }
    }),
    controllerRef: controllerRef,
    onChange: handleChange,
    autoFocus: true
  }, _ref);
};

async function renderApp(val) {
  let controller;

  const controllerRef = c => {
    controller = c;
  };

  const results = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(App, {
    val: val,
    controllerRef: controllerRef
  }), {
    container: document.body
  });
  const {
    container,
    findByTestId
  } = results;
  const paragraphs = container.querySelectorAll('[data-cangjie-key="a"]');

  _everDevTest.fireEvent.mouseMove(paragraphs[0]);

  const dragHander = await (0, _react2.waitFor)(() => findByTestId('drag-hander'));

  _everDevTest.fireEvent.mouseEnter(dragHander);

  return { ...results,
    paragraphs,
    controller,
    dragHander
  };
}

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "A", (0, _everDevTest.jsx)("cursor", null))));

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "A")));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, (0, _everDevTest.jsx)("anchor", null), "A"), (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, "B", (0, _everDevTest.jsx)("focus", null))));

describe('Bi/draggable/thumbnails', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
    jest.clearAllMocks();
  });
  test('single paragraph thumbnail', async () => {
    const value = _ref2;
    const {
      container,
      controller
    } = await renderApp(value);
    await (0, _react2.waitFor)(() => {
      expect(container.querySelectorAll(`.${_everPluginDraggable.DRAG_HIGHLIGHT_CLASSNAME}`).length).toBe(1);
    });
    const thumbnail = getDragThumbnails(controller, {
      viewKey: 'a'
    });
    expect(thumbnail.getAttribute('data-cangjie-key')).toBe('a');
  });
  test('complex block thumbnail', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "a",
      data: {
        colsWidth: [100]
      }
    }, _ref3)));
    const {
      container,
      controller
    } = await renderApp(value);
    await (0, _react2.waitFor)(() => {
      expect(container.querySelectorAll(`.${_everPluginDraggable.DRAG_HIGHLIGHT_TABLE_CLASSNAME}`).length).toBe(1);
      expect(container.querySelectorAll(`.${_everPluginDraggable.DRAG_HIGHLIGHT_CLASSNAME}`).length).toBe(0);
    });
    const thumbnail = getDragThumbnails(controller, {
      viewKey: 'a'
    }, {
      complexElements: {
        table: true
      }
    });
    expect(thumbnail.firstElementChild.childElementCount).toBe(1);
    expect(!!thumbnail.querySelector('[data-cangjie-key="a"]')).toBe(false);
  });
  test('multi paragraphs thumbnail', async () => {
    const value = _ref4;
    const {
      container,
      controller,
      dragHander,
      paragraphs,
      findByTestId
    } = await renderApp(value);
    await (0, _react2.waitFor)(() => {
      expect(container.querySelectorAll(`.${_everPluginDraggable.DRAG_HIGHLIGHT_CLASSNAME}`).length).toBe(2);
    });
    const thumbnail = getDragThumbnails(controller, {
      viewKey: 'a'
    });
    expect(thumbnail.firstElementChild.childElementCount).toBe(2);
    expect(!!thumbnail.querySelector('[data-cangjie-key="a"]')).toBe(true);
    expect(!!thumbnail.querySelector('[data-cangjie-key="b"]')).toBe(true);

    _everDevTest.fireEvent.mouseLeave(dragHander);

    await (0, _react2.waitFor)(() => {
      expect(container.querySelectorAll(`.${_everPluginDraggable.DRAG_HIGHLIGHT_CLASSNAME}`).length).toBe(0);
    });

    _everDevTest.fireEvent.mouseLeave(paragraphs[0]);

    await (0, _react2.waitFor)(() => !findByTestId('drag-hander'));
  });
});
//# sourceMappingURL=thumbnails.ui.test.js.map