"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _draggable = _interopRequireDefault(require("../../plugins/draggable"));

var _leftToolbar = _interopRequireDefault(require("../../plugins/leftToolbar"));

var _imTag = _interopRequireDefault(require("../../plugins/imTag"));

var _createCustomizedBiPlugins = _interopRequireDefault(require("../../createCustomizedBiPlugins"));

/** @jsx jsx */
const defaultValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "AAA"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "BBB", (0, _everDevTest.jsx)("anchor", null))));

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const App = props => {
  const {
    val = defaultValue
  } = props;
  const [value, setValue] = React.useState(val);
  const createBiPlugins = (0, _createCustomizedBiPlugins.default)({
    draggable: _draggable.default,
    ImTagPlugin: _imTag.default,
    leftToolbar: _leftToolbar.default
  });

  const handleChange = change => {
    (0, _react2.act)(() => {
      setValue(change.value);
    });
  };

  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    plugins: createBiPlugins({
      draggable: {
        enabled: true
      },
      leftToolbar: {
        menu: [{
          key: 'draggable'
        }]
      }
    }),
    onChange: handleChange,
    autoFocus: true
  }, _ref);
};

async function renderApp(val) {
  const results = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(App, {
    val: val
  }), {
    container: document.body
  });
  const {
    container
  } = results;
  const paragraphs = container.querySelectorAll('[data-type="paragraph"]');
  return { ...results,
    paragraphs
  };
}

describe('Bi/draggable/menu', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
    jest.clearAllMocks();
  });
  test('show dragMenu', async () => {
    const {
      findByTestId,
      paragraphs,
      queryByTestId
    } = await renderApp();

    _everDevTest.fireEvent.mouseMove(paragraphs[0]);

    const dragHander = await (0, _react2.waitFor)(() => findByTestId('drag-hander'));

    _everDevTest.fireEvent.mouseEnter(dragHander);

    await (0, _react2.waitFor)(() => queryByTestId('drag-menu_root'));
  });
  test('dragMenu insert after', async () => {
    const {
      findByTestId,
      paragraphs,
      queryByTestId
    } = await renderApp();

    _everDevTest.fireEvent.mouseMove(paragraphs[0]);

    const dragHander = await (0, _react2.waitFor)(() => findByTestId('drag-hander'));

    _everDevTest.fireEvent.click(dragHander);

    await (0, _react2.waitFor)(() => findByTestId('drag-menu_root'));
    const insertAfter = await (0, _react2.waitFor)(() => queryByTestId('menu-item-insert-after'));

    _everDevTest.fireEvent.mouseUp(insertAfter);

    _everDevTest.fireEvent.click(insertAfter);

    await (0, _react2.waitFor)(() => queryByTestId('newline-guide-menu'));
  });
  test('dragMenu insert before', async () => {
    const {
      findByTestId,
      paragraphs,
      queryByTestId
    } = await renderApp();

    _everDevTest.fireEvent.mouseMove(paragraphs[0]);

    const dragHander = await (0, _react2.waitFor)(() => findByTestId('drag-hander'));

    _everDevTest.fireEvent.click(dragHander);

    await (0, _react2.waitFor)(() => findByTestId('drag-menu_root'));
    const insertBefore = await (0, _react2.waitFor)(() => queryByTestId('menu-item-insert-before'));

    _everDevTest.fireEvent.mouseUp(insertBefore);

    _everDevTest.fireEvent.click(insertBefore);

    await (0, _react2.waitFor)(() => queryByTestId('newline-guide-menu'));
  });
});
//# sourceMappingURL=dragMenu.ui.test.js.map