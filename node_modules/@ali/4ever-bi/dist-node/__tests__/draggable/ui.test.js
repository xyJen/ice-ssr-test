"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _draggable = _interopRequireDefault(require("../../plugins/draggable"));

var _leftToolbar = _interopRequireDefault(require("../../plugins/leftToolbar"));

var _imTag = _interopRequireDefault(require("../../plugins/imTag"));

var _heading = _interopRequireDefault(require("../../plugins/heading"));

var _createCustomizedBiPlugins = _interopRequireDefault(require("../../createCustomizedBiPlugins"));

var _everPluginDraggable = require("@ali/4ever-plugin-draggable");

var _everUtils = require("@ali/4ever-utils");

/** @jsx jsx */
const defaultValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello ", (0, _everDevTest.jsx)("cursor", null), "Cangjie")));

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const App = props => {
  const {
    val = defaultValue
  } = props;
  const [value, setValue] = React.useState(val);
  const createBiPlugins = (0, _createCustomizedBiPlugins.default)({
    draggable: _draggable.default,
    ImTagPlugin: _imTag.default,
    HeadingPlugin: _heading.default,
    leftToolbar: _leftToolbar.default
  });

  const handleChange = change => {
    (0, _react2.act)(() => {
      setValue(change.value);
    });
  };

  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    plugins: createBiPlugins({
      draggable: {
        enabled: true
      },
      leftToolbar: {
        menu: [{
          key: 'draggable'
        }]
      }
    }),
    onChange: handleChange,
    autoFocus: true
  }, _ref);
};

var _ref2 = (0, _everDevTest.jsx)("div", {
  id: "hide"
}, "hide drag");

async function renderApp(val) {
  const results = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)("div", null, (0, _everDevTest.jsx)(App, {
    val: val
  }), _ref2), {
    container: document.body
  });
  const {
    container
  } = results;
  const paragraph = container.querySelector('[data-type="paragraph"]');

  _everDevTest.fireEvent.mouseMove(paragraph);

  return { ...results,
    paragraph
  };
}

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "AAA", (0, _everDevTest.jsx)("cursor", null))));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "#", (0, _everDevTest.jsx)("cursor", null), "AAA")));

var _ref5 = (0, _everDevTest.jsx)("cursor", null);

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
}, "A")));

describe('Bi/draggable/ui', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
    jest.clearAllMocks();
  });
  test('show and hide dragHander', async () => {
    const {
      findByTestId,
      queryByTestId,
      container
    } = await renderApp();
    await findByTestId('drag-hander');

    _everDevTest.fireEvent.mouseMove(container.querySelector('#hide'));

    await (0, _everDevTest.waitForTime)(50);
    expect(queryByTestId('drag-hander')).not.toBeInTheDocument();
  });
  test('not hide dragHander after input', async () => {
    const value = _ref3;
    const {
      editor,
      container,
      queryByTestId,
      findByTestId
    } = await renderApp(value);
    await findByTestId('drag-hander');

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('space')); // 输入内容后不隐藏抓手


    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('drag-hander')).toBeInTheDocument();
    }); // 同时删除高亮

    await (0, _react2.waitFor)(() => {
      expect(container.querySelectorAll(`.${_everPluginDraggable.DRAG_HIGHLIGHT_CLASSNAME}`).length).toBe(0);
    });
  });
  it('not hide dragHander after type change', async () => {
    const value = _ref4;
    const {
      editor,
      queryByTestId,
      findByTestId
    } = await renderApp(value);
    await findByTestId('drag-hander');

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('space')); // 变成标题后不隐藏抓手


    await (0, _react2.waitFor)(() => {
      expect(queryByTestId('drag-hander')).toBeInTheDocument();
    });
  });
  it.skip('hide dragHander with one inline img', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      type: "image",
      data: {
        src: 'https://cn.bing.com/az/hprichbg/rb/TeslaCoil_EN-CN1604235004_1920x1080.jpg'
      }
    }), _ref5)));
    const {
      queryByTestId
    } = await renderApp(value);
    await (0, _everDevTest.waitForTime)(100);
    expect(queryByTestId('drag-hander')).not.toBeInTheDocument();
  });
  it.skip('hide dragHander with empty paragraph', async () => {
    const value = _ref6;
    (0, _everUtils.dispatchCustomEvent)(_everUtils.LEGAL_EVENT.leftToolbarEnable, {
      enable: false
    });
    const {
      queryByTestId
    } = await renderApp(value);
    await (0, _everDevTest.waitForTime)(100);
    expect(queryByTestId('drag-hander')).not.toBeInTheDocument();
  });
  test('show dragHander next to table when mouseMove paragraph-in-table', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key-1",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref7)));
    const {
      queryByTestId,
      container
    } = await renderApp(value);
    const p = container.querySelector('[data-cangjie-key="a"]');

    _everDevTest.fireEvent.mouseMove(p);

    await (0, _everDevTest.waitForTime)(100);
    const dragHander = queryByTestId('drag-hander');
    expect(dragHander).toBeInTheDocument();
  });
});
//# sourceMappingURL=ui.test.js.map