"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _draggable = _interopRequireDefault(require("../../plugins/draggable"));

var _leftToolbar = _interopRequireDefault(require("../../plugins/leftToolbar"));

var _imTag = _interopRequireDefault(require("../../plugins/imTag"));

var _everPluginDraggable = require("@ali/4ever-plugin-draggable");

var _createCustomizedBiPlugins = _interopRequireDefault(require("../../createCustomizedBiPlugins"));

/** @jsx jsx */
const defaultValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "AAA"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "BBB", (0, _everDevTest.jsx)("focus", null))));

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const App = props => {
  const {
    val = defaultValue
  } = props;
  const [value, setValue] = React.useState(val);
  const createBiPlugins = (0, _createCustomizedBiPlugins.default)({
    draggable: _draggable.default,
    ImTagPlugin: _imTag.default,
    leftToolbar: _leftToolbar.default
  });

  const handleChange = change => {
    (0, _react2.act)(() => {
      setValue(change.value);
    });
  };

  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    plugins: createBiPlugins({
      draggable: {
        enabled: true
      },
      leftToolbar: {
        menu: [{
          key: 'draggable'
        }]
      }
    }),
    onChange: handleChange,
    autoFocus: true
  }, _ref);
};

async function renderApp(val) {
  const results = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(App, {
    val: val
  }), {
    container: document.body
  });
  const {
    container
  } = results;
  const paragraphs = container.querySelectorAll('[data-type="paragraph"]');
  return { ...results,
    paragraphs
  };
}

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "AAA", (0, _everDevTest.jsx)("cursor", null))));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "AAA", (0, _everDevTest.jsx)("cursor", null))));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "AAA", (0, _everDevTest.jsx)("cursor", null))));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "AAA", (0, _everDevTest.jsx)("cursor", null))));

describe('Bi/draggable/ui', () => {
  afterEach(() => {
    (0, _react2.cleanup)();
    jest.clearAllMocks();
  });
  test('show highlight', async () => {
    const {
      findByTestId,
      paragraphs,
      container
    } = await renderApp();

    _everDevTest.fireEvent.mouseMove(paragraphs[0]);

    const dragHander = await (0, _react2.waitFor)(() => findByTestId('drag-hander'));

    _everDevTest.fireEvent.mouseEnter(dragHander);

    await (0, _react2.waitFor)(() => {
      expect(container.querySelectorAll(`.${_everPluginDraggable.DRAG_HIGHLIGHT_CLASSNAME}`).length).toBe(2);
    });

    _everDevTest.fireEvent.mouseLeave(dragHander);

    await (0, _react2.waitFor)(() => {
      expect(container.querySelectorAll(`.${_everPluginDraggable.DRAG_HIGHLIGHT_CLASSNAME}`).length).toBe(0);
    });
  });
  test('dragStart dataTransfer.setData toBeCalled', async () => {
    const {
      findByTestId,
      paragraphs
    } = await renderApp();

    _everDevTest.fireEvent.mouseMove(paragraphs[0]);

    const dragHander = await findByTestId('drag-hander');
    const mockFn = {
      setData: jest.fn()
    };

    _react2.fireEvent.dragStart(dragHander, {
      dataTransfer: mockFn
    });

    expect(mockFn.setData).toHaveBeenNthCalledWith(1, 'application/x-cangjie-drag-fragment', '{"type":0,"fragment":[{"key":"2","type":"paragraph","nodeJson":{"klass":"block","type":"paragraph","data":{},"nodes":[{"klass":"text","leaves":[{"klass":"leaf","text":"AAA","marks":[]}]}]},"parentKey":"5"},{"key":"4","type":"paragraph","nodeJson":{"klass":"block","type":"paragraph","data":{},"nodes":[{"klass":"text","leaves":[{"klass":"leaf","text":"BBB","marks":[]}]}]},"parentKey":"5"}]}');
    expect(mockFn.setData).toHaveBeenNthCalledWith(2, 'text/plain', 'AAABBB');
    expect(mockFn.setData).toHaveBeenNthCalledWith(3, 'text/html', '<p style=\"text-align:left;text-indent:0;margin-left:0;margin-top:0;margin-bottom:0\"><span data-type=\"text\">AAA</span></p><p style=\"text-align:left;text-indent:0;margin-left:0;margin-top:0;margin-bottom:0\"><span data-type=\"text\">BBB</span></p>');
  });
  test('drop dataTransfer.getData toBeCalled', async () => {
    const value = _ref2;
    const {
      paragraphs
    } = await renderApp(value);
    const mockFn = {
      getData: jest.fn()
    };

    _react2.fireEvent.drop(paragraphs[0], {
      dataTransfer: mockFn
    });

    expect(mockFn.getData).toHaveBeenNthCalledWith(1, 'application/x-cangjie-drag-fragment');
    expect(mockFn.getData).toHaveBeenNthCalledWith(2, 'text/html');
    expect(mockFn.getData).toHaveBeenNthCalledWith(3, 'text/plain');
  });
  test('drop text', async () => {
    const value = _ref3;
    const {
      paragraphs,
      container
    } = await renderApp(value);
    const mockFn = {
      getData: type => {
        if (type === 'text/plain') {
          return 'text';
        }
      }
    };

    _react2.fireEvent.drop(paragraphs[0], {
      dataTransfer: mockFn
    });

    expect(container.innerText === 'AAAtext');
  });
  test('drop blockJson', async () => {
    const value = _ref4;
    const {
      paragraphs,
      container
    } = await renderApp(value);
    const mockFn = {
      getData: type => {
        if (type === 'application/x-cangjie-drag-fragment') {
          return '{"type":0,"fragment":[{"key":"3","type":"paragraph","nodeJson":{"klass":"block","type":"paragraph","data":{},"nodes":[{"klass":"text","leaves":[{"klass":"leaf","text":"BBB","marks":[]}]}]}}]}';
        }
      }
    };

    _react2.fireEvent.drop(paragraphs[0], {
      dataTransfer: mockFn
    });

    expect(container.innerText === 'AAABBB');
  });
  test('drop html', async () => {
    const value = _ref5;
    const {
      paragraphs,
      container
    } = await renderApp(value);
    const mockFn = {
      getData: type => {
        if (type === 'text/html') {
          return '<p style=\"text-align:left;text-indent:0;margin-left:0\"><span>BBB</span></p>';
        }
      }
    };

    _react2.fireEvent.drop(paragraphs[0], {
      dataTransfer: mockFn
    });

    expect(container.innerText === 'AAABBB');
  });
});
//# sourceMappingURL=dragBlocks.ui.test.js.map