"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _ = require("../..");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _everDevTest = require("@ali/4ever-dev-test");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({ ..._.plugins,
  CalendarCardPlugin: _.CalendarCardPlugin
});

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const Editor = props => {
  const {
    defaultValue,
    calendarConfig
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    return createBiPlugins({
      calendarCard: calendarConfig
    });
  }, []);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    autoFocus: true
  }, _ref);
};

const calendarData = {
  calendarId: '18700362',
  comment: '超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注超长备注',
  totalCount: 14,
  place: '10-3-3',
  startTime: 1598281200000,
  endTime: 1598284800000,
  timezone: 'Asia/Shanghai',
  time: '08月24日 23:00 - 08月25日 00:00',
  subject: '超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题超长标题',
  organizer: [{
    uid: 3452016
  }],
  topReceivers: [{
    name: '陌',
    type: 1,
    uid: 3146067
  }, {
    uid: 3452016,
    name: '童岭',
    avatarMediaId: 'https://static.dingtalk.com/media/lADPBbCc1h2tUUPNA8DNA74_958_960.jpg_60x60q90.jpg',
    type: 1
  }, {
    name: '董旭',
    type: 1,
    uid: 3166262
  }, {
    name: '张卫刚卫刚卫刚卫刚卫刚卫刚卫刚卫刚卫刚卫刚卫刚卫刚卫刚卫刚卫刚卫刚卫刚',
    type: 1,
    uid: 3452113
  }, {
    name: '1598',
    type: 1,
    uid: 3452114
  }, {
    name: '170****2451',
    type: 1,
    uid: 3451114
  }, {
    name: 'Benjy',
    type: 1,
    uid: 2855028
  }, {
    name: '张卫刚',
    type: 1,
    uid: 3452184
  }, {
    name: '150****2598',
    type: 1,
    uid: 3452115
  }, {
    name: '董旭',
    type: 1,
    uid: 3166266
  }, {
    name: '170****2451',
    type: 1,
    uid: 3451117
  }, {
    name: 'Benjy',
    type: 1,
    uid: 2855039
  }, {
    name: '150****2598',
    type: 1,
    uid: 3452414
  }, {
    name: 'Benjy',
    type: 1,
    uid: 2855028
  }, {
    name: '张卫刚',
    type: 1,
    uid: 3452184
  }, {
    name: '150****2598',
    type: 1,
    uid: 3452115
  }, {
    name: '董旭',
    type: 1,
    uid: 3166266
  }, {
    name: '170****2451',
    type: 1,
    uid: 3451117
  }, {
    name: 'Benjy',
    type: 1,
    uid: 2855039
  }, {
    name: '150****2598',
    type: 1,
    uid: 3452414
  }, {
    name: '董旭',
    type: 1,
    uid: 3166562
  }],
  redirectUrl: 'dingtalk://dingtalkclient/action/open_mini_app?miniAppId=2018112162280005&ddMode=push&mainTask=true&keepAlive=false&newCalendar=1&page=pages%2Fdetail%2Findex%3FuniqueId%3DM2JMK2NUUlYzODVTdEpmeXFLYThhZz09&fallback_url=dingtalk%3A%2F%2Fdingtalkclient%2Fpage%2Fcalendar_detail%3Fid%3D0%26uniqueId%3DM2JMK2NUUlYzODVTdEpmeXFLYThhZz09',
  attachments: [{
    type: 7,
    fileName: '市政府工作会议纪要.docx'
  }, {
    type: 1,
    fileName: '市政府工作会议纪要2.docx'
  }, {
    type: 2,
    fileName: '市政府工作会议纪要3.docx'
  }, {
    type: 3,
    fileName: '市政府工作会议纪要4.docx'
  }]
};

const createCalendarConfig = config => {
  return {
    locale: {
      refresh: '刷新',
      refreshTips: '日程卡片有更新',
      receiverCount: '等{count}人参会',
      viewCalendardetails: '查看日程详情',
      noresponse: '未响应',
      received: '已接收',
      refused: '已拒绝',
      pending: '待定',
      organizer: '组织人'
    },
    getContainerWidthInPC: () => {
      return 440;
    },
    jumpToCalendar: (link, eventType) => {},
    openProfile: uid => {},
    jumpToAttachment: (url, eventType) => {},
    onRefreshSuccess: () => {},
    refresh: (calendarId, eventType) => {
      return new Promise(resolve => {
        setTimeout(() => {
          resolve({
            status: 'success',
            data: calendarData
          });
        }, 150);
      });
    },
    ...config
  };
};

var _ref2 = (0, _everDevTest.jsx)("button", null, "\u70B9\u51FB\u521B\u5EFA\u65E5\u7A0B");

describe('Bi/card/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('Bi/CalendarCard/UI', () => {
    test('正常渲染', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'calendar',
          height: 350,
          metadata: calendarData
        }
      })));
      const {
        queryByTestId,
        queryAllByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        calendarConfig: createCalendarConfig({})
      }));
      const subject = queryByTestId('calendar-subject').textContent;
      expect(subject).toBe(calendarData.subject);
      const receiverName = queryAllByTestId('calendar-receiver')[0].textContent;
      expect(receiverName.includes(calendarData.topReceivers[0].name)).toBe(true);
    });
    test('卡片请求报错时弹出 Tips', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'calendar',
          height: 350,
          metadata: { ...calendarData,
            isInitialized: true
          }
        }
      })));
      const {
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        calendarConfig: createCalendarConfig({
          refresh: (calendarId, eventType) => {
            return new Promise(resolve => {
              setTimeout(() => {
                resolve({
                  status: 'error',
                  message: '日程卡片获取信息失败',
                  data: {}
                });
              }, 150);
            });
          }
        })
      }));
      const tips = await findByText('日程卡片获取信息失败');
      expect(!!tips).toBe(true);
    });
    test('卡片初始化请求报错时不会重复请求', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'calendar',
          height: 350,
          metadata: {
            calendarId: '18700362'
          }
        }
      })));
      let retry_time = 0;
      const {
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        calendarConfig: createCalendarConfig({
          refresh: (calendarId, eventType) => {
            retry_time += 1;
            return new Promise(resolve => {
              setTimeout(() => {
                resolve({
                  status: 'error',
                  message: '日程卡片获取信息失败',
                  data: {}
                });
              }, 10);
            });
          }
        })
      }));
      const tips = await findByText('日程卡片获取信息失败');
      expect(!!tips).toBe(true); // 确保请求出错后不会进行二次请求

      expect(retry_time).toBe(1);
    });
    test('点击交互', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'calendar',
          height: 350,
          metadata: calendarData
        }
      })));
      const handleState = {};
      const {
        queryByTestId,
        queryAllByTestId,
        container
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        calendarConfig: createCalendarConfig({
          getContainerWidthInPC: () => {
            return 640;
          },
          jumpToCalendar: (link, eventType) => {
            handleState.jumpToCalendar = {
              link,
              eventType
            };
          },
          openProfile: uid => {
            handleState.openProfile = uid;
          },
          onRefreshSuccess: () => {
            handleState.onRefreshSuccess = true;
          },
          refresh: (calendarId, eventType) => {
            handleState.refresh = {
              calendarId,
              eventType
            };
            return new Promise(resolve => {
              setTimeout(() => {
                resolve({
                  status: 'success',
                  data: calendarData
                });
              }, 150);
            });
          }
        })
      })); // 首次打开自动刷新数据

      expect(handleState.refresh.calendarId).toBe(calendarData.calendarId);
      expect(!handleState.refresh.eventType).toBe(true); // 点击标题

      const subject = queryByTestId('calendar-subject');

      _everDevTest.fireEvent.mouseDown(subject);

      expect(handleState.jumpToCalendar.link).toBe(calendarData.redirectUrl);
      expect(handleState.jumpToCalendar.eventType).toBe('title'); // 点击goto

      const gotoIcon = queryByTestId('Icon_goto');

      _everDevTest.fireEvent.mouseDown(gotoIcon);

      expect(handleState.jumpToCalendar.eventType).toBe('icon'); // 点击刷新

      const refreshIcon = container.querySelector('.weicon-LoadingNormal');

      _everDevTest.fireEvent.mouseDown(refreshIcon);

      expect(handleState.refresh.eventType).toBe('click'); // 点击应邀人

      const receiver = queryAllByTestId('calendar-receiver')[0];

      _everDevTest.fireEvent.mouseDown(receiver);

      expect(handleState.openProfile).toBe(calendarData.topReceivers[0].uid);
    });
    test('已有日程数据，点击刷新 icon 写入数据', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'calendar',
          height: 350,
          metadata: { ...calendarData,
            isInitialized: true,
            subject: '测试日程'
          }
        }
      })));
      const {
        findByText,
        queryByTestId,
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        calendarConfig: createCalendarConfig({
          refresh: (calendarId, eventType) => {
            return new Promise(resolve => {
              resolve({
                status: 'success',
                data: { ...calendarData,
                  isInitialized: true,
                  subject: '更新后的日程标题'
                }
              });
            });
          }
        })
      }));
      const isUpdate = await queryByText('日程卡片有更新');
      expect(!!isUpdate).toBe(true); // 点击刷新按钮

      const refreshIcon = queryByTestId('Icon_refresh');

      _everDevTest.fireEvent.mouseDown(refreshIcon); // 验证标题是否已更新


      const newSubject = await findByText('更新后的日程标题');
      expect(!!newSubject).toBe(true);
    });
  });
  describe('Bi/CalendarCard/UI/Placeholder', () => {
    test('正常渲染 Placeholder', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'calendar',
          height: 350,
          metadata: {
            isPlaceholder: true
          }
        }
      })));
      const {
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        calendarConfig: createCalendarConfig({
          renderCreateCalendarBtn: () => _ref2
        })
      }));
      const btn = queryByText('点击创建日程');
      expect(!!btn).toBe(true);
    });
    test('点击按钮创建日程', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'calendar',
          height: 350,
          metadata: {
            isPlaceholder: true
          }
        }
      })));
      let result = null;
      const {
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        calendarConfig: createCalendarConfig({
          renderCreateCalendarBtn: ({
            initCalendar
          }) => (0, _everDevTest.jsx)("button", {
            onClick: () => {
              result = initCalendar({
                "calendarId": "18700362",
                "startTime": 1598281200000,
                "endTime": 1598284800000,
                "timezone": "Asia/Shanghai",
                "subject": "placeholder日程"
              });
            }
          }, "\u70B9\u51FB\u521B\u5EFA\u65E5\u7A0B")
        })
      }));
      const btn = await queryByText('点击创建日程');

      _everDevTest.fireEvent.click(btn);

      expect(!!result).toBe(true); // 确保日程已经渲染完成

      await result; // 确保日程渲染正确

      const subject = queryByText('placeholder日程');
      expect(!!subject).toBe(true);
    });
  });
});
//# sourceMappingURL=ui.test.js.map