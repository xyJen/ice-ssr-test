"use strict";

var _everCangjie = require("@ali/4ever-cangjie");

require("@testing-library/jest-dom/extend-expect");

var _everDevTest = require("@ali/4ever-dev-test");

var _ = require("../..");

var _everPluginParagraph = require("@ali/4ever-plugin-paragraph");

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const cases = [{
  name: '普通段落',
  value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null)))),
  spacing: {
    line: 1,
    before: 0,
    after: 0
  },
  ind: {
    left: 0,
    right: 0
  }
}, {
  name: '标题',
  value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "heading-1"
  }, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
    type: "heading-1"
  }, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null)))),
  spacing: {
    line: 0.8529411764705882,
    before: 26.666666666666668,
    after: 12
  },
  ind: {
    left: 0,
    right: 0
  }
}, {
  name: '标题和段落混合',
  value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "heading-1"
  }, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null)))),
  spacing: {},
  ind: {
    left: 0,
    right: 0
  }
}, {
  name: '相同 line，不同 lineRule',
  value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: {
      spacing: {
        line: 2,
        lineRule: 'exact'
      }
    }
  }, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: {
      spacing: {
        line: 2,
        lineRule: 'auto'
      }
    }
  }, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null)))),
  spacing: {
    before: 0,
    after: 0
  },
  ind: {
    left: 0,
    right: 0
  }
}, {
  name: '最终 before/after 不同，其它属性相同',
  value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: {
      spacing: {
        before: 10,
        beforeLines: 10,
        beforeAutospacing: true,
        after: 10,
        afterLines: 10
      }
    }
  }, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: {
      spacing: {
        before: 10,
        beforeLines: 10,
        after: 10,
        afterLines: 10,
        afterAutospacing: true
      }
    }
  }, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null)))),
  spacing: {
    line: 1
  },
  ind: {
    left: 0,
    right: 0
  }
}, {
  name: '最终 left/right 不同，其它属性相同',
  value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: {
      ind: {
        left: 30,
        leftChars: 300,
        right: 20,
        rightChars: 200
      }
    }
  }, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: {
      ind: {
        left: 30,
        leftChars: 200,
        right: 20,
        rightChars: 300
      }
    }
  }, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null)))),
  spacing: {
    line: 1,
    before: 0,
    after: 0
  },
  ind: {}
}, {
  name: '首行与悬挂缩进互斥',
  value: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: {
      ind: {
        firstLine: 32,
        hangingChars: 4
      }
    }
  }, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
    type: "paragraph",
    data: {
      ind: {
        firstLine: 32,
        hangingChars: 2
      }
    }
  }, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null)))),
  spacing: {
    line: 1,
    before: 0,
    after: 0
  },
  ind: {
    left: 0,
    right: 0
  }
}];
const plugins = (0, _.createBiPlugins)({}).array;

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null))));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null))));

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "unknow"
}, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null))));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "\u6BB5\u843D"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6BB5\u843D", (0, _everDevTest.jsx)("focus", null))));

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

var _ref7 = (0, _everDevTest.jsx)("cursor", null);

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "\u6BB5\u843D")));

var _ref9 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "\u6BB5\u843D")));

describe('Bi/paragraph/behaviour', () => {
  describe('获取公共段落属性', () => {
    cases.forEach(testCase => {
      test(`${testCase.name}`, async () => {
        const value = testCase.value;

        const controller = _everCangjie.Controller.create({
          value,
          plugins
        });

        const spacing = controller.query('getCommonSpacing');
        const ind = controller.query('getCommonInd');
        expect(spacing).toEqual(testCase.spacing);
        expect(ind).toEqual(testCase.ind);
      });
    });
  });
  describe('设置段落属性', () => {
    test('设置 spacing.before/after', async () => {
      const value = _ref;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _everPluginParagraph.setParagraphSpacing)({
        before: 50,
        after: 30
      }));
      const spacing = controller.query('getCommonSpacing');
      expect(spacing).toEqual({
        before: 50,
        after: 30,
        line: 1
      });
    });
    test('设置 spacing.line/lineRule', async () => {
      const value = _ref2;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _everPluginParagraph.setParagraphSpacing)({
        line: 2,
        lineRule: 'exact'
      }));
      const spacing = controller.query('getCommonSpacing');
      expect(spacing).toEqual({
        before: 0,
        after: 0,
        line: 32,
        // 24pt
        lineRule: 'exact'
      });
    });
    test('设置 spacing 为绝对值单位 会清除 行单位', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          spacing: {
            beforeLines: 2,
            afterLines: 2
          }
        }
      }, _ref3, "\u6BB5\u843D")));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _everPluginParagraph.setParagraphSpacing)({
        before: 30,
        after: 30
      }));
      const spacing = controller.query('getCommonSpacing');
      expect(spacing).toEqual({
        before: 30,
        after: 30,
        line: 1
      });
    });
    test('跳过不支持的块级元素', async () => {
      const value = _ref4;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _everPluginParagraph.setParagraphSpacing)({
        before: 50,
        after: 30
      }));
      const spacing = controller.query('getCommonSpacing');
      expect(spacing).toEqual({
        line: 1
      });
    });
    test('设置 ind.left/right', async () => {
      const value = _ref5;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _everPluginParagraph.setParagraphInd)({
        left: 50,
        right: 30
      }));
      const ind = controller.query('getCommonInd');
      expect(ind).toEqual({
        left: 50,
        right: 30
      });
    });
    test('设置 ind 为绝对值单位 会清除 字符单位', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          ind: {
            leftChars: 200,
            rightChars: 200
          }
        }
      }, _ref6, "\u6BB5\u843D")));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _everPluginParagraph.setParagraphInd)({
        left: 50,
        right: 50
      }));
      const ind = controller.query('getCommonInd');
      expect(ind).toEqual({
        left: 50,
        right: 50
      });
    });
    test('设置 ind 悬挂与行首缩进互斥', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          ind: {
            firstLine: 32,
            firstLineChars: 200
          }
        }
      }, _ref7, "\u6BB5\u843D")));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', (0, _everPluginParagraph.setParagraphInd)({
        hangingChars: 200
      }));
      const ind = controller.query('getCommonInd');
      expect(ind).toEqual({
        left: 0,
        right: 0,
        hangingChars: 200,
        hanging: 29.33333333333333 // 200 / 100 * 11pt = 22pt = 29.33333333333333px

      });
    });
  });
  describe('边界场景', () => {
    test('设置相同的 indent，不产生 history', async () => {
      const value = _ref8;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      }); // 左缩进 0，不产生 history


      controller.run('onAction', (0, _everPluginParagraph.setParagraphInd)({
        left: 0
      }));
      await (0, _everDevTest.waitForTime)(1);
      expect((controller.value.data.history || _everCangjie.History.create()).undos.length).toEqual(0); // 左缩进 0 字符，不产生 history

      controller.run('onAction', (0, _everPluginParagraph.setParagraphInd)({
        leftChars: 0,
        left: 0
      }));
      await (0, _everDevTest.waitForTime)(1);
      expect((controller.value.data.history || _everCangjie.History.create()).undos.length).toEqual(0); // 设置为悬挂缩进，产生 1 条 history

      controller.run('onAction', (0, _everPluginParagraph.setParagraphInd)({
        hangingChars: 200,
        hanging: 28
      }));
      await (0, _everDevTest.waitForTime)(1);
      expect(controller.value.data.history.undos.length).toEqual(1); // 悬挂缩进值为 0，产生 1 条 history

      controller.run('onAction', (0, _everPluginParagraph.setParagraphInd)({
        hangingChars: 0,
        hanging: 0
      }));
      await (0, _everDevTest.waitForTime)(1);
      expect(controller.value.data.history.undos.length).toEqual(2); // 模拟在 UI 中再次设置为 0，不产生 history

      controller.run('onAction', (0, _everPluginParagraph.setParagraphInd)({
        firstLineChars: 0,
        firstLine: 0
      }));
      await (0, _everDevTest.waitForTime)(1);
      expect(controller.value.data.history.undos.length).toEqual(2);
    });
    test('默认情况下，设置相同的 spacing，不产生 history', async () => {
      const value = _ref9;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      }); // 段前 0，不产生 history


      controller.run('onAction', (0, _everPluginParagraph.setParagraphSpacing)({
        before: 0
      }));
      await (0, _everDevTest.waitForTime)(1);
      expect((controller.value.data.history || _everCangjie.History.create()).undos.length).toEqual(0); // 段前 0 行，不产生 history

      controller.run('onAction', (0, _everPluginParagraph.setParagraphSpacing)({
        beforeLines: 0,
        before: 0
      }));
      await (0, _everDevTest.waitForTime)(1);
      expect((controller.value.data.history || _everCangjie.History.create()).undos.length).toEqual(0); // 段后 0，不产生 history

      controller.run('onAction', (0, _everPluginParagraph.setParagraphSpacing)({
        after: 0
      }));
      await (0, _everDevTest.waitForTime)(1);
      expect((controller.value.data.history || _everCangjie.History.create()).undos.length).toEqual(0); // 段后 0 行，不产生 history

      controller.run('onAction', (0, _everPluginParagraph.setParagraphSpacing)({
        afterLines: 0,
        after: 0
      }));
      await (0, _everDevTest.waitForTime)(1);
      expect((controller.value.data.history || _everCangjie.History.create()).undos.length).toEqual(0);
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map