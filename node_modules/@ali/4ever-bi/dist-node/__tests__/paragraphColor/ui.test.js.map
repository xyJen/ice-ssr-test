{"version":3,"sources":["../../../../src/__tests__/paragraphColor/ui.test.tsx"],"names":["DEFAULT_SHD_STYLES","paddingLeft","paddingRight","marginLeft","marginRight","marginTop","marginBottom","borderRadius","transition","compareStyles","ele","Object","keys","every","key","style","paragraphValue","shd","listValue","list","listId","level","isOrdered","blockquoteValue","blockquote","describe","test","content","querySelector","expect","toBeTruthy","parentElement"],"mappings":";;;;AAEA;;AAEA;;AAEA;;AANA;;AACA;AAOA,MAAMA,kBAAkB,GAAG;AACzBC,EAAAA,WAAW,EAAE,KADY;AAEzBC,EAAAA,YAAY,EAAE,KAFW;AAGzBC,EAAAA,UAAU,EAAE,MAHa;AAIzBC,EAAAA,WAAW,EAAE,MAJY;AAKzBC,EAAAA,SAAS,EAAE,KALc;AAMzBC,EAAAA,YAAY,EAAE,KANW;AAOzBC,EAAAA,YAAY,EAAE,KAPW;AAQzBC,EAAAA,UAAU,EAAE;AARa,CAA3B;;AAWA,MAAMC,aAAa,GAAIC,GAAD,IACpBC,MAAM,CAACC,IAAP,CAAYZ,kBAAZ,EAAgCa,KAAhC,CACGC,GAAD,IAAUJ,GAAG,CAACK,KAAJ,CAAUD,GAAV,MAAmBd,kBAAkB,CAACc,GAAD,CADjD,CADF;;AAMA,MAAME,cAAc,GAClB,qCACE,wCACE;AAAO,EAAA,IAAI,EAAC,WAAZ;AAAwB,EAAA,IAAI,EAAE;AAAEC,IAAAA,GAAG,EAAE;AAAP;AAA9B,GACE,gDADF,CADF,CADF,CADF;AAUA,MAAMC,SAAS,GACb,qCACE,wCACE;AACE,EAAA,IAAI,EAAC,WADP;AAEE,EAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE,aADJ;AAEJC,MAAAA,KAAK,EAAE,CAFH;AAGJC,MAAAA,SAAS,EAAE;AAHP,KADF;AAMJL,IAAAA,GAAG,EAAE;AAND;AAFR,GAWE,gDAXF,CADF,CADF,CADF;AAoBA,MAAMM,eAAe,GACnB,qCACE,wCACE;AAAO,EAAA,IAAI,EAAC,WAAZ;AAAwB,EAAA,IAAI,EAAE;AAAEC,IAAAA,UAAU,EAAE,IAAd;AAAoBP,IAAAA,GAAG,EAAE;AAAzB;AAA9B,GACE,gDADF,CADF,CADF,CADF;;WAY2C,sBAAC,eAAD;AAAQ,EAAA,YAAY,EAAED;AAAtB,E;;YAMA,sBAAC,eAAD;AAAQ,EAAA,YAAY,EAAEE;AAAtB,E;;YAMA,sBAAC,eAAD;AAAQ,EAAA,YAAY,EAAEK;AAAtB,E;;AAd3CE,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCC,EAAAA,IAAI,CAAC,sBAAD,EAAyB,YAAY;AACvC,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAM,oCAA1B;AACA,UAAMjB,GAAG,GAAGiB,OAAO,CAACC,aAAR,CAAsB,yBAAtB,CAAZ;AACAC,IAAAA,MAAM,CAACpB,aAAa,CAACC,GAAD,CAAd,CAAN,CAA2BoB,UAA3B;AACD,GAJG,CAAJ;AAMAJ,EAAAA,IAAI,CAAC,oBAAD,EAAuB,YAAY;AACrC,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAM,qCAA1B;AACA,UAAMjB,GAAG,GAAGiB,OAAO,CAACC,aAAR,CAAsB,yBAAtB,EAAiDG,aAA7D;AACAF,IAAAA,MAAM,CAACpB,aAAa,CAACC,GAAD,CAAd,CAAN,CAA2BoB,UAA3B;AACD,GAJG,CAAJ;AAMAJ,EAAAA,IAAI,CAAC,oBAAD,EAAuB,YAAY;AACrC,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAM,qCAA1B;AACA,UAAMjB,GAAG,GAAGiB,OAAO,CAACC,aAAR,CAAsB,yBAAtB,EAAiDG,aAAjD,CAA+DA,aAA3E;AACAF,IAAAA,MAAM,CAACpB,aAAa,CAACC,GAAD,CAAd,CAAN,CAA2BoB,UAA3B;AACD,GAJG,CAAJ;AAKD,CAlBO,CAAR","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport '@testing-library/jest-dom/extend-expect';\n\nimport Editor from '../editor';\nimport { Value } from '@ali/4ever-cangjie';\nimport { renderEditor, jsx } from '@ali/4ever-dev-test';\n\nconst DEFAULT_SHD_STYLES = {\n  paddingLeft: '2px',\n  paddingRight: '2px',\n  marginLeft: '-2px',\n  marginRight: '-2px',\n  marginTop: '1px',\n  marginBottom: '1px',\n  borderRadius: '4px',\n  transition: 'background 300ms',\n};\n\nconst compareStyles = (ele: HTMLElement) => (\n  Object.keys(DEFAULT_SHD_STYLES).every(\n    (key) => (ele.style[key] === DEFAULT_SHD_STYLES[key]),\n  )\n);\n\nconst paragraphValue = (\n  <value>\n    <document>\n      <block type=\"paragraph\" data={{ shd: '#BBFFAA' }}>\n        <text>helloWord</text>\n      </block>\n    </document>\n  </value>\n) as unknown as Value;\n\nconst listValue = (\n  <value>\n    <document>\n      <block\n        type=\"paragraph\"\n        data={{\n          list: {\n            listId: 'dn7ncrq6m7j',\n            level: 0,\n            isOrdered: false,\n          },\n          shd: '#BBFFAA',\n        }}\n      >\n        <text>helloWord</text>\n      </block>\n    </document>\n  </value>\n) as unknown as Value;\n\nconst blockquoteValue = (\n  <value>\n    <document>\n      <block type=\"paragraph\" data={{ blockquote: true, shd: '#BBFFAA' }}>\n        <text>helloWord</text>\n      </block>\n    </document>\n  </value>\n) as unknown as Value;\n\ndescribe('设置段落背景颜色后, 存在默认样式', () => {\n  test('普通段落设置段落背景颜色后，存在默认样式', async () => {\n    const { content } = await renderEditor(<Editor defaultValue={paragraphValue} />);\n    const ele = content.querySelector('[data-type=\"paragraph\"]') as HTMLElement;\n    expect(compareStyles(ele)).toBeTruthy();\n  });\n\n  test('列表设置段落背景颜色后，存在默认样式', async () => {\n    const { content } = await renderEditor(<Editor defaultValue={listValue} />);\n    const ele = content.querySelector('[data-type=\"paragraph\"]').parentElement as HTMLElement;\n    expect(compareStyles(ele)).toBeTruthy();\n  });\n\n  test('引用设置段落背景颜色后，存在默认样式', async () => {\n    const { content } = await renderEditor(<Editor defaultValue={blockquoteValue} />);\n    const ele = content.querySelector('[data-type=\"paragraph\"]').parentElement.parentElement as HTMLElement;\n    expect(compareStyles(ele)).toBeTruthy();\n  });\n});\n"],"file":"ui.test.js"}