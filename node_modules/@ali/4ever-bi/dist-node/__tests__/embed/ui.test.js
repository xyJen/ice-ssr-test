"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

require("@testing-library/jest-dom/extend-expect");

var _react2 = require("@testing-library/react");

var _serializer = _interopRequireDefault(require("../serializer"));

var _ = require("../..");

var _provider = _interopRequireDefault(require("../../provider"));

var _embed = _interopRequireDefault(require("../../plugins/embed"));

var _content = _interopRequireDefault(require("../../content"));

/* eslint-disable import/no-extraneous-dependencies */
const _createElement = /*#__PURE__*/React.createElement;
const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  embed: _embed.default
});

var _ref = /*#__PURE__*/_createElement(_content.default, null);

const Editor = props => {
  const {
    defaultValue,
    codeConfig = {}
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    const config = {
      locale: {
        insertTip: '支持各种办公文件、设计文件、音视频媒体、压缩包等',
        upload: '本地上传',
        quickInsertTitle: '本地文件',
        buttonTitle: '本地文件',
        cardView: '卡片视图',
        previewView: '预览视图',
        copy: '复制',
        delete: '删除',
        download: '下载',
        enlarge: '放大',
        oversizeError: '上传失败，文件不能大于 251MB，请重试',
        networkError: '网络错误，请重试',
        previewError: '预览解析失败，',
        reTryPreview: '请点击重试',
        previewing: '正在加载预览'
      },
      ...codeConfig
    };
    return createBiPlugins({
      code: config,
      embed: config
    });
  }, [codeConfig]);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return /*#__PURE__*/_createElement(_provider.default, {
    autoFocus: true,
    value: value,
    onChange: handleChange,
    plugins: plugins
  }, /*#__PURE__*/_createElement(_.Toolbar, {
    autoFolding: false,
    singleLayout: [{
      toolButtons: [{
        name: 'embed'
      }]
    }]
  }), _ref);
};

describe('Bi/embed/ui', () => {
  it('src 存在时，渲染为上传成功的状态', async () => {
    const value = _serializer.default.jsonMLToValue(['root', ['embed', {
      name: 'test.docx',
      src: 'test.docx'
    }]]);

    const {
      queryByText
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: value
    }));
    expect(queryByText(/上传失败/)).not.toBeInTheDocument();
  });
  it.skip('src 不存在时，渲染为上传失败的状态', async () => {
    const value = _serializer.default.jsonMLToValue(['root', ['embed', {
      name: 'test.docx',
      src: null
    }]]);

    const {
      queryByText
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: value
    }));
    await (0, _react2.waitForElement)(() => queryByText(/请重试/));
  });
  it('预览状态进入后，会打开预览视图，并设置高度', async () => {
    const value = _serializer.default.jsonMLToValue(['root', ['embed', {
      name: 'test.docx',
      src: 'test.docx',
      viewType: 'preview',
      previewSize: {
        height: 500
      }
    }]]);

    const {
      queryByTestId
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: value
    }));
    const preview = await (0, _react2.waitForElement)(() => queryByTestId('embed-preview'));
    expect(preview.style.height).toBe('500px');
  });
  it('选中预览视图，可以打开工具栏', async () => {
    const value = _serializer.default.jsonMLToValue(['root', ['embed', {
      name: 'test.docx',
      src: 'test.docx',
      viewType: 'preview',
      previewSize: {
        height: 500
      }
    }]]);

    const {
      queryByTestId
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: value
    }));
    const preview = await (0, _react2.waitForElement)(() => queryByTestId('embed-preview'));

    _everDevTest.fireEvent.click(preview);

    await (0, _react2.waitForElement)(() => queryByTestId('embed-toolbar-previewView'));
  }); // it('工具栏 - 视图切换状态', async () => {
  //   const value = Mo.jsonMLToValue([
  //     'root',
  //     ['embed', {
  //       name: 'test.docx',
  //       src: 'test.docx',
  //     }],
  //   ]);
  //   const { queryByTestId } = render(<Editor defaultValue={value} />);
  //   const card = await waitForElement(() =>
  //     queryByTestId('embed-card'),
  //   );
  //   fireEvent.click(card);
  //   const previewBtn = await waitForElement(() => queryByTestId('embed-toolbar-preview'));
  //   fireEvent.mouseDown(previewBtn);
  //   await waitForElement(() => queryByTestId('embed-preview'));
  // });

  it('工具栏 - 删除', async () => {
    const value = _serializer.default.jsonMLToValue(['root', ['embed', {
      name: 'test.docx',
      src: 'test.docx'
    }]]);

    const {
      queryByTestId
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: value
    }));
    const card = await (0, _react2.waitForElement)(() => queryByTestId('embed-card'));

    _everDevTest.fireEvent.click(card);

    await (0, _react2.waitForElement)(() => queryByTestId('embed-toolbar-delete'));

    _everDevTest.fireEvent.click(queryByTestId('embed-toolbar-delete'));

    await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId('embed-card'));
  });
});
//# sourceMappingURL=ui.test.js.map