{"version":3,"sources":["../../../../src/__tests__/embed/behaviour.test.tsx"],"names":["plugins","locale","array","describe","it","id","value","controller","Controller","create","params","name","type","size","document","expect","getBlocksByType","length","toBe","embed","data","embedNode","nodes","find","node","newParams","src","viewType","run","embedPlugin","actions","updateFile","toEqual","mimeType","undefined","previewSize","errorType","output","KeyboardEvent","toJSON","newFile","File","onUploadFile","Promise","resolve","url","setTimeout"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport { jsx, getHotkeyEvent } from '@ali/4ever-dev-test';\nimport uuid from 'uuid/v4';\nimport { Controller, Value } from '@ali/4ever-cangjie';\nimport { createBiPlugins } from '../..';\nimport locale from '../../locales/zh_CN';\nimport embedPlugin from '../../plugins/embed';\nimport { insertFile, uploadFile } from '@ali/4ever-factory';\n\nconst plugins = createBiPlugins(locale).array;\n\ndescribe('Bi/embed/behaviour', () => {\n  it('菜单栏/工具栏 插入文件节点', () => {\n    const id = uuid();\n    const value = (\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    const params = {\n      id,\n      name: 'test.docx',\n      type: 'word',\n      size: 33333,\n    };\n\n    insertFile(controller, params);\n\n    const { document } = controller.value;\n    expect(document.getBlocksByType('embed').length).toBe(1);\n    const embed = document.getBlocksByType('embed')[0];\n    expect(embed.data.name).toBe('test.docx');\n  });\n\n  it('更新文件节点', () => {\n    const id = uuid();\n    const value = (\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    const params = {\n      id,\n      name: 'test.docx',\n      type: 'word',\n      size: 33333,\n    };\n    insertFile(controller, params);\n    const embedNode = controller.value.document.nodes.find((node) => {\n      if (node.data.id === id) {\n        return node;\n      }\n      return null;\n    });\n    const newParams = {\n      id,\n      src: 'https://test.docx',\n      viewType: 'preview',\n    };\n\n    if (embedNode) {\n      controller.run('onAction', embedPlugin.actions.updateFile(embedNode, newParams));\n    }\n\n    const { document } = controller.value;\n    const embed = document.getBlocksByType('embed')[0];\n\n    expect(embed.data).toEqual({\n      id,\n      name: 'test.docx',\n      size: 33333,\n      src: 'https://test.docx',\n      viewType: 'preview',\n      type: 'word',\n      mimeType: undefined,\n      previewSize: undefined,\n      errorType: undefined,\n    });\n  });\n\n  it('删除文件节点', () => {\n    const id = uuid();\n    const value = (\n      <value>\n        <document>\n          <block type=\"embed\" data={{ id, name: 'test.docx', size: 1111 }}>\n            <cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n    const output = (\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    controller.run(\n      'onKeyDown',\n      new KeyboardEvent('keydown', getHotkeyEvent('backspace')),\n    );\n    expect(controller.value.toJSON()).toEqual(output.toJSON());\n  });\n\n  it('拖拽插入文件节点', () => {\n    const value = (\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown as Value;\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    const newFile = new File(['test.docx'], 'test.docx', {\n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    });\n    const onUploadFile = () => {\n      return new Promise((resolve) => {\n        resolve({ url: 'https://abc.docx' });\n      });\n    };\n    uploadFile(controller, newFile, onUploadFile, true, {});\n    setTimeout(() => {\n      const { document } = controller.value;\n      const embed = document.getBlocksByType('embed')[0];\n      expect(embed.data.viewType).toEqual('preview');\n    }, 1000);\n  });\n});\n"],"file":"behaviour.test.js"}