"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _editorMobile = _interopRequireDefault(require("../editorMobile"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("cursor", null);

function createValue(text) {
  return (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, _ref, text)));
}

const Items = {
  keyboard: 'keyboard',
  insert: 'insert',
  mention: 'mention_mobileinsert',
  font: 'font',
  bold: 'bold',
  align: 'align',
  alignRight: 'alignment_rightmobile'
};

const selectorForItem = name => `div[data-toolbar-key="${name}"]`;

describe('Bi/mobileToolbar/ui', () => {
  it('works when clicking Keyboard button', async () => {
    const {
      container: domBase
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editorMobile.default, {
      defaultValue: createValue('Hello'),
      singleLayout: [{
        toolButtons: [{
          name: 'alignment'
        }]
      }]
    }));
    const container = domBase.closest('body');
    let keyboardButton = container.querySelector(selectorForItem(Items.keyboard));
    expect(keyboardButton).toBeTruthy();

    _everDevTest.fireEvent.mouseDown(keyboardButton);

    await (0, _react.waitForElementToBeRemoved)(() => {
      return container.querySelector(selectorForItem(Items.keyboard));
    });
    keyboardButton = container.querySelector(selectorForItem(Items.keyboard));
    expect(keyboardButton).toBeFalsy();
  });
  it('works when clicking Insert button', async () => {
    const {
      container: domBase
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editorMobile.default, {
      defaultValue: createValue('Hello'),
      singleLayout: [{
        toolButtons: [{
          name: 'alignment'
        }]
      }]
    }));
    const container = domBase.closest('body');
    const addButton = container.querySelector(selectorForItem(Items.insert));
    expect(addButton).toBeTruthy();

    _everDevTest.fireEvent.mouseDown(addButton);

    await (0, _react.wait)();
    const atIcon = container.querySelector(selectorForItem(Items.mention));
    expect(atIcon).toBeTruthy();
  });
  it('works when clicking Fonts button', async () => {
    const {
      container: domBase
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editorMobile.default, {
      defaultValue: createValue('Hello'),
      singleLayout: [{
        toolButtons: [{
          name: 'alignment'
        }]
      }]
    }));
    const container = domBase.closest('body');
    const fontButton = container.querySelector(selectorForItem(Items.font));
    expect(fontButton).toBeTruthy();

    _everDevTest.fireEvent.mouseDown(fontButton);

    await (0, _react.wait)();
    const boldButton = container.querySelector(selectorForItem(Items.bold));
    expect(boldButton).toBeTruthy();
  });
  it('works when clicking Align button', async () => {
    const {
      container: domBase
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editorMobile.default, {
      defaultValue: createValue('Hello'),
      singleLayout: [{
        toolButtons: [{
          name: 'alignment'
        }]
      }]
    }));
    const container = domBase.closest('body');
    const alignButton = container.querySelector(selectorForItem(Items.align));
    expect(alignButton).toBeTruthy();

    _everDevTest.fireEvent.mouseDown(alignButton);

    await (0, _react.wait)();
    const alignRight = container.querySelector(selectorForItem(Items.alignRight));
    expect(alignRight).toBeTruthy();
  });
});
//# sourceMappingURL=ui.test.js.map