"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _sz = _interopRequireDefault(require("../../plugins/sz"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _createBiPlugins.default)().array;

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "getSize ", (0, _everDevTest.jsx)("cursor", null), "\u6D4B\u8BD5")));

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "getSize ", (0, _everDevTest.jsx)("cursor", null), "\u6D4B\u8BD5")));

var _ref4 = (0, _everDevTest.jsx)("anchor", null);

var _ref5 = (0, _everDevTest.jsx)("focus", null);

var _ref6 = (0, _everDevTest.jsx)("anchor", null);

var _ref7 = (0, _everDevTest.jsx)("focus", null);

var _ref8 = (0, _everDevTest.jsx)("anchor", null);

var _ref9 = (0, _everDevTest.jsx)("focus", null);

var _ref10 = (0, _everDevTest.jsx)("anchor", null);

var _ref11 = (0, _everDevTest.jsx)("focus", null);

var _ref12 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "get", (0, _everDevTest.jsx)("anchor", null), "Size"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6D4B\u8BD5", (0, _everDevTest.jsx)("focus", null))));

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "get", (0, _everDevTest.jsx)("anchor", null), "Size");

var _ref14 = (0, _everDevTest.jsx)("focus", null);

var _ref15 = (0, _everDevTest.jsx)("anchor", null);

var _ref16 = (0, _everDevTest.jsx)("focus", null);

var _ref17 = (0, _everDevTest.jsx)("focus", null);

var _ref18 = (0, _everDevTest.jsx)("anchor", null);

var _ref19 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "B"));

var _ref20 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

describe('Bi/sz/behaviour', () => {
  describe('getSize 单测', () => {
    test('默认字号', async () => {
      const value = _ref;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(11);
    });
    test('特定字号', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 14,
          szUnit: 'pt'
        }
      }, "getSize ", _ref2), "\u6D4B\u8BD5")));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(14);
    });
    test('标题字号', async () => {
      const value = _ref3;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(20);
    });
    test('段落选区包含多个字号', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref4, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 14,
          szUnit: 'pt'
        }
      }, "getSize"), " \u6D4B\u8BD5", _ref5)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(NaN);
    });
    test('连续空段落', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref6, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 14,
          szUnit: 'pt'
        }
      })), (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 14,
          szUnit: 'pt'
        }
      }), _ref7)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(14);
    });
    test('空段落+段落', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref8, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 14,
          szUnit: 'pt'
        }
      })), (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 12,
          szUnit: 'pt'
        }
      }, "getSize"), _ref9)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(NaN);
    });
    test.skip('空段落+段落前', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref10, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 14,
          szUnit: 'pt'
        }
      })), (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref11, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 12,
          szUnit: 'pt'
        }
      }, "getSize"))));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(14);
    });
    test('选区包含标题和段落', async () => {
      const value = _ref12;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(NaN);
    });
    test('选区包含同字号标题和段落', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref13, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 20,
          szUnit: 'pt'
        }
      }, "\u6D4B\u8BD5"), _ref14)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(20);
    });
    test('选区包含 inline 元素', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "link",
        data: {
          href: 'https://www.dingtalk/com'
        }
      }, "get", _ref15, "Size"), (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 14,
          szUnit: 'pt'
        }
      }, "\u6D4B", _ref16, "\u8BD5"))));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(NaN);
    });
    test('选区包含 inline 元素（锚点交换）', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("inline", {
        type: "link",
        data: {
          href: 'https://www.dingtalk/com'
        }
      }, "get", _ref17, "Size"), (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 14,
          szUnit: 'pt'
        }
      }, "\u6D4B", _ref18, "\u8BD5"))));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(NaN);
    });
    test('表格选区', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell"
      }, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 14,
          szUnit: 'pt'
        }
      }, "A"))), _ref19))));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const tableSelection = {
        key: 'table-key',
        startRowIndex: 0,
        startColIndex: 0,
        endRowIndex: 0,
        endColIndex: 1
      };
      const table = controller.value.document.getNode('table-key');
      controller.command('selectTableSelection', table, tableSelection);
      await (0, _react.wait)();
      const sz = controller.query(_sz.default.queries.getSize);
      expect(sz).toBe(NaN);
    });
  });
  test('表格选区（空段落）', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref20)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const tableSelection = {
      key: 'table-key',
      startRowIndex: 0,
      startColIndex: 0,
      endRowIndex: 0,
      endColIndex: 1
    };
    const table = controller.value.document.getNode('table-key');
    controller.command('selectTableSelection', table, tableSelection);
    await (0, _react.wait)();
    const sz = controller.query(_sz.default.queries.getSize);
    expect(sz).toBe(11);
  });
});
//# sourceMappingURL=behaviour.test.js.map