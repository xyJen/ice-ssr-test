"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _editor = _interopRequireDefault(require("../editor"));

var _lodash = require("lodash");

/** @jsx jsx */
const INCREASE_SZ_HOT_KEY = 'ctrl+shift+.';
const DECREASE_SZ_HOT_KEY = 'ctrl+shift+,';

var _ref = (0, _everDevTest.jsx)("anchor", null);

var _ref2 = (0, _everDevTest.jsx)("focus", null);

const createValue = szArrs => {
  return (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, _ref, (0, _everDevTest.jsx)("m", {
    type: "sz",
    data: {
      value: szArrs[0][0],
      szUnit: 'pt'
    }
  }, "\u6D4B\u8BD5"), (0, _everDevTest.jsx)("m", {
    type: "sz",
    data: {
      value: szArrs[0][1],
      szUnit: 'pt'
    }
  }, "\u6D4B\u8BD5"), (0, _everDevTest.jsx)("m", {
    type: "sz",
    data: {
      value: szArrs[0][2],
      szUnit: 'pt'
    }
  }, "\u6D4B\u8BD5"), (0, _everDevTest.jsx)("m", {
    type: "sz",
    data: {
      value: szArrs[0][3],
      szUnit: 'pt'
    }
  }, "\u6D4B\u8BD5")), (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("m", {
    type: "sz",
    data: {
      value: szArrs[1][0],
      szUnit: 'pt'
    }
  }, "\u6D4B\u8BD5"), (0, _everDevTest.jsx)("m", {
    type: "sz",
    data: {
      value: szArrs[1][1],
      szUnit: 'pt'
    }
  }, "\u6D4B\u8BD5"), (0, _everDevTest.jsx)("m", {
    type: "sz",
    data: {
      value: szArrs[1][2],
      szUnit: 'pt'
    }
  }, "\u6D4B\u8BD5"), (0, _everDevTest.jsx)("m", {
    type: "sz",
    data: {
      value: szArrs[1][3],
      szUnit: 'pt'
    }
  }, "\u6D4B\u8BD5"), _ref2)));
};

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("cursor", null);

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "\u6D4B\u8BD5"), (0, _everDevTest.jsx)("block", {
  type: "heading-1"
}, "\u6807\u98981"), (0, _everDevTest.jsx)("block", {
  type: "heading-2"
}, "\u6807\u98982"), (0, _everDevTest.jsx)("block", {
  type: "heading-3"
}, "\u6807\u98983"), (0, _everDevTest.jsx)("block", {
  type: "heading-4"
}, "\u6807\u98984", (0, _everDevTest.jsx)("focus", null))));

var _ref6 = (0, _everDevTest.jsx)("anchor", null);

var _ref7 = (0, _everDevTest.jsx)("focus", null);

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6D4B\u8BD5", (0, _everDevTest.jsx)("anchor", null), "\u6D4B\u8BD5", (0, _everDevTest.jsx)("focus", null))));

var _ref9 = (0, _everDevTest.jsx)("anchor", null);

var _ref10 = (0, _everDevTest.jsx)("focus", null);

describe('Bi/sz/ui', () => {
  it('选中文字, 增大字号', async () => {
    const input = createValue([[5, 9, 12, 15], [72, 81, 90, 200]]);
    const output = createValue([[6, 10, 14, 16], [80, 90, 100, 200]]);
    const controllerRef = jest.fn();
    const {
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: input,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(INCREASE_SZ_HOT_KEY));

    await (0, _react.wait)();
    const actual = controller.value.toJSON({
      preserveSelections: false
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: false
    });
    expect(actual).toEqual(expected);
  });
  it('选中文字, 减小字号', async () => {
    const input = createValue([[5, 9, 12, 15], [72, 80, 90, 200]]);
    const output = createValue([[5, 8, 11, 14], [48, 72, 80, 190]]);
    const controllerRef = jest.fn();
    const {
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: input,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(DECREASE_SZ_HOT_KEY));

    await (0, _react.wait)();
    const actual = controller.value.toJSON({
      preserveSelections: false
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: false
    });
    expect(actual).toEqual(expected);
  });
  [{
    type: 'increase',
    title: '增大字号',
    hotKey: INCREASE_SZ_HOT_KEY
  }, {
    type: 'decrease',
    title: '减小字号',
    hotKey: DECREASE_SZ_HOT_KEY
  }].forEach(({
    type,
    title,
    hotKey
  }) => {
    it(`不选中文字, ${title}`, async () => {
      const changedSz = type === 'increase' ? 14 : 11;
      const input = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 12,
          szUnit: 'pt'
        }
      }, "\u6D4B\u8BD5", _ref3))));
      const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: 12,
          szUnit: 'pt'
        }
      }, "\u6D4B\u8BD5"), (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: changedSz,
          szUnit: 'pt'
        }
      }, "!", _ref4))));
      const controllerRef = jest.fn();
      const {
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: input,
        controllerRef: controllerRef
      }));
      const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(hotKey));

      await (0, _react.wait)();

      _everDevTest.fireEvent.keyPress(editor, (0, _everDevTest.getHotkeyEvent)('!'));

      await (0, _react.waitFor)(() => {
        const actual = controller.value.toJSON({
          preserveSelections: true
        });
        const expected = controller.setValue(output).value.toJSON({
          preserveSelections: true
        });
        return expect(actual).toEqual(expected);
      });
    });
    it(`对包含默认字体大小的段落, ${title}`, async () => {
      const isIncreasing = type === 'increase';
      const input = _ref5;
      const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref6, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: isIncreasing ? 12 : 10,
          szUnit: 'pt'
        }
      }, "\u6D4B\u8BD5")), (0, _everDevTest.jsx)("block", {
        type: "heading-1"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: isIncreasing ? 22 : 18,
          szUnit: 'pt'
        }
      }, "\u6807\u98981")), (0, _everDevTest.jsx)("block", {
        type: "heading-2"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: isIncreasing ? 18 : 14,
          szUnit: 'pt'
        }
      }, "\u6807\u98982")), (0, _everDevTest.jsx)("block", {
        type: "heading-3"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: isIncreasing ? 16 : 12,
          szUnit: 'pt'
        }
      }, "\u6807\u98983")), (0, _everDevTest.jsx)("block", {
        type: "heading-4"
      }, (0, _everDevTest.jsx)("m", {
        type: "sz",
        data: {
          value: isIncreasing ? 14 : 11,
          szUnit: 'pt'
        }
      }, "\u6807\u98984", _ref7))));
      const controllerRef = jest.fn();
      const {
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
        defaultValue: input,
        controllerRef: controllerRef
      }));
      const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(hotKey));

      await (0, _react.wait)();
      const actual = controller.value.toJSON({
        preserveSelections: true
      });
      const expected = controller.setValue(output).value.toJSON({
        preserveSelections: true
      });
      expect(actual).toEqual(expected);
    });
  });
  it('选中文字, 连续增减字号', async () => {
    let actual;
    let expected;
    const input = _ref8;

    const createOutput = sz => (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5", _ref9, (0, _everDevTest.jsx)("m", {
      type: "sz",
      data: {
        value: sz,
        szUnit: 'pt'
      }
    }, "\u6D4B\u8BD5"), _ref10)));

    const controllerRef = jest.fn();
    const {
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: input,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(INCREASE_SZ_HOT_KEY));

    await (0, _react.wait)();
    actual = controller.value.toJSON({
      preserveSelections: true
    });
    const output1 = createOutput(12);
    expected = controller.setValue(output1).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(INCREASE_SZ_HOT_KEY));

    await (0, _react.wait)();
    actual = controller.value.toJSON({
      preserveSelections: true
    });
    const output2 = createOutput(14);
    expected = controller.setValue(output2).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(DECREASE_SZ_HOT_KEY));

    await (0, _react.wait)();
    actual = controller.value.toJSON({
      preserveSelections: true
    });
    const output3 = createOutput(12);
    expected = controller.setValue(output3).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(DECREASE_SZ_HOT_KEY));

    await (0, _react.wait)();
    actual = controller.value.toJSON({
      preserveSelections: true
    });
    const output4 = createOutput(11);
    expected = controller.setValue(output4).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
});
//# sourceMappingURL=ui.test.js.map