{"version":3,"sources":["../../../../src/__tests__/sz/behaviour.test.tsx"],"names":["plugins","array","describe","test","value","controller","Controller","create","sz","query","szPlugin","queries","getSize","expect","toBe","szUnit","NaN","skip","href","colsWidth","tableSelection","key","startRowIndex","startColIndex","endRowIndex","endColIndex","table","document","getNode","command"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport { Controller, Value, Block } from '@ali/4ever-cangjie';\nimport { jsx } from '@ali/4ever-dev-test';\nimport {\n  wait,\n} from '@testing-library/react';\nimport createBiPlugins from '../../createBiPlugins';\nimport szPlugin from '../../plugins/sz';\n\n\nconst plugins = createBiPlugins().array;\n\n\ndescribe('Bi/sz/behaviour', () => {\n  describe('getSize 单测', () => {\n    test('默认字号', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              getSize <cursor />测试\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(11);\n    });\n\n    test('特定字号', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <m type=\"sz\" data={{ value: 14, szUnit: 'pt' }}>getSize <cursor /></m>测试\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(14);\n    });\n\n    test('标题字号', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"heading-1\">\n              getSize <cursor />测试\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(20);\n    });\n\n    test('段落选区包含多个字号', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor /><m type=\"sz\" data={{ value: 14, szUnit: 'pt' }}>getSize</m> 测试<focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(NaN);\n    });\n\n    test('连续空段落', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor /><m type=\"sz\" data={{ value: 14, szUnit: 'pt' }} />\n            </block>\n            <block type=\"paragraph\">\n              <m type=\"sz\" data={{ value: 14, szUnit: 'pt' }} /><focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(14);\n    });\n\n    test('空段落+段落', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor /><m type=\"sz\" data={{ value: 14, szUnit: 'pt' }} />\n            </block>\n            <block type=\"paragraph\">\n              <m type=\"sz\" data={{ value: 12, szUnit: 'pt' }}>getSize</m><focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(NaN);\n    });\n\n    test.skip('空段落+段落前', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor /><m type=\"sz\" data={{ value: 14, szUnit: 'pt' }} />\n            </block>\n            <block type=\"paragraph\">\n              <focus /><m type=\"sz\" data={{ value: 12, szUnit: 'pt' }}>getSize</m>\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(14);\n    });\n\n    test('选区包含标题和段落', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"heading-1\">\n              get<anchor />Size\n            </block>\n            <block type=\"paragraph\">\n              测试<focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(NaN);\n    });\n\n    test('选区包含同字号标题和段落', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"heading-1\">\n              get<anchor />Size\n            </block>\n            <block type=\"paragraph\">\n              <m type=\"sz\" data={{ value: 20, szUnit: 'pt' }}>测试</m><focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(20);\n    });\n\n    test('选区包含 inline 元素', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <inline\n                type=\"link\"\n                data={{ href: 'https://www.dingtalk/com' }}\n              >\n                get<anchor />Size\n              </inline>\n              <m type=\"sz\" data={{ value: 14, szUnit: 'pt' }}>测<focus />试</m>\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(NaN);\n    });\n\n    test('选区包含 inline 元素（锚点交换）', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <inline\n                type=\"link\"\n                data={{ href: 'https://www.dingtalk/com' }}\n              >\n                get<focus />Size\n              </inline>\n              <m type=\"sz\" data={{ value: 14, szUnit: 'pt' }}>测<anchor />试</m>\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(NaN);\n    });\n\n    test('表格选区', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"table\" key=\"table-key\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">\n                    <m type=\"sz\" data={{ value: 14, szUnit: 'pt' }}>A</m>\n                  </block>\n                </block>\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\">\n                    B\n                  </block>\n                </block>\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const tableSelection = {\n        key: 'table-key',\n        startRowIndex: 0,\n        startColIndex: 0,\n        endRowIndex: 0,\n        endColIndex: 1,\n      };\n\n      const table = controller.value.document.getNode('table-key');\n      controller.command('selectTableSelection', table as Block, tableSelection);\n      await wait();\n\n      const sz = controller.query(szPlugin.queries.getSize);\n      expect(sz).toBe(NaN);\n    });\n  });\n\n  test('表格选区（空段落）', async () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"table\" key=\"table-key\" data={{ colsWidth: [100, 100] }}>\n            <block type=\"table-row\">\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" />\n              </block>\n              <block type=\"table-cell\">\n                <block type=\"paragraph\" />\n              </block>\n            </block>\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n\n    const tableSelection = {\n      key: 'table-key',\n      startRowIndex: 0,\n      startColIndex: 0,\n      endRowIndex: 0,\n      endColIndex: 1,\n    };\n\n    const table = controller.value.document.getNode('table-key');\n    controller.command('selectTableSelection', table as Block, tableSelection);\n    await wait();\n\n    const sz = controller.query(szPlugin.queries.getSize);\n    expect(sz).toBe(11);\n  });\n});\n"],"file":"behaviour.test.js"}