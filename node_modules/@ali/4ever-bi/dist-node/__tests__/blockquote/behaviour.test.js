"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _zh_CN = _interopRequireDefault(require("../../locales/zh_CN"));

var _ = require("../..");

var _blockquote = _interopRequireDefault(require("../../plugins/blockquote"));

var _heading = _interopRequireDefault(require("../../plugins/heading"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _.createBiPlugins)(_zh_CN.default).array;

var _ref = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "This is the first paragraph");

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is the third paragraph", (0, _everDevTest.jsx)("focus", null));

var _ref3 = (0, _everDevTest.jsx)("anchor", null);

var _ref4 = (0, _everDevTest.jsx)("focus", null);

var _ref5 = (0, _everDevTest.jsx)("cursor", null);

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "This is the first paragraph");

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is the third paragraph", (0, _everDevTest.jsx)("focus", null));

var _ref9 = (0, _everDevTest.jsx)("anchor", null);

var _ref10 = (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "This is the first paragraph");

var _ref11 = (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "This is the second paragraph");

var _ref12 = (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "This is the third paragraph");

var _ref13 = (0, _everDevTest.jsx)("focus", null);

describe('Bi/blockquote/behaviour', () => {
  it('选中三个 block，且第二个存在引用，将三个 block 都取消引用', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: true
      }
    }, "This is the second paragraph"), _ref2));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: false
      }
    }, _ref3, "This is the first paragraph"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: false
      }
    }, "This is the second paragraph"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: false
      }
    }, "This is the third paragraph", _ref4)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', _blockquote.default.actions.toggleBlockquote());
    expect(controller.value.toJSON()).toEqual(output.toJSON());
  });
  it('多段连续引用，首段落顶部触发 Backspace ，移除引用，光标仍然在原行', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: false
      }
    }, "This is the first paragraph"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: true
      }
    }, _ref5, "This is the second paragraph"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: true
      }
    }, "This is the third paragraph"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: true
      }
    }, "This is the fourth paragraph")));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: false
      }
    }, "This is the first paragraph"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: false
      }
    }, _ref6, "This is the second paragraph"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: true
      }
    }, "This is the third paragraph"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: true
      }
    }, "This is the fourth paragraph")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    expect(controller.value.toJSON({
      preserveSelections: true
    })).toEqual(output.toJSON({
      preserveSelections: true
    }));
  });
  it('多个段落，其中存在引用，全选，设置 heading, 非引用段落依旧是非引用', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref7, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        blockquote: true
      }
    }, "This is the second paragraph"), _ref8));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "heading-1",
      data: {
        spacing: {
          after: 12,
          before: 26.666666666666668,
          line: 0.8529411764705882
        }
      }
    }, _ref9, (0, _everDevTest.jsx)("m", {
      type: "sz",
      data: {
        value: 20,
        szUnit: 'pt'
      }
    }, _ref10)), (0, _everDevTest.jsx)("block", {
      type: "heading-1",
      data: {
        spacing: {
          after: 12,
          before: 26.666666666666668,
          line: 0.8529411764705882
        },
        blockquote: true
      }
    }, (0, _everDevTest.jsx)("m", {
      type: "sz",
      data: {
        value: 20,
        szUnit: 'pt'
      }
    }, _ref11)), (0, _everDevTest.jsx)("block", {
      type: "heading-1",
      data: {
        spacing: {
          after: 12,
          before: 26.666666666666668,
          line: 0.8529411764705882
        }
      }
    }, (0, _everDevTest.jsx)("m", {
      type: "sz",
      data: {
        value: 20,
        szUnit: 'pt'
      }
    }, _ref12), _ref13)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', _heading.default.actions.setHeading('heading-1'));
    expect(controller.value.toJSON({
      preserveSelections: true
    })).toEqual(output.toJSON({
      preserveSelections: true
    }));
  });
});
//# sourceMappingURL=behaviour.test.js.map