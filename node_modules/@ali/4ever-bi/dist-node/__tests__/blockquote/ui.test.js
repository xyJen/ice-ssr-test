"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _serializer = _interopRequireDefault(require("../serializer"));

var _helper = require("../helper");

var _editor = _interopRequireDefault(require("../editor"));

var _ = require("../..");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
async function addBlockquoteByShortcut(editor, content) {
  _everDevTest.fireEvent.cangjieInput(editor, {
    data: '>'
  });

  _everDevTest.fireEvent.cangjieInput(editor, {
    data: ' '
  });

  await (0, _react.wait)();
}

async function clickQuoteButton(container) {
  const quoteBlockElement = container.querySelector('[data-testid="bi-toolbar-blockquote"]');

  _everDevTest.fireEvent.click(quoteBlockElement);

  await (0, _react.wait)();
}

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, '>', (0, _everDevTest.jsx)("cursor", null))));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "hello world", (0, _everDevTest.jsx)("focus", null))));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "This is first paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is second paragraph"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "This is third paragraph", (0, _everDevTest.jsx)("focus", null))));

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "A")));

var _ref5 = (0, _everDevTest.jsx)("anchor", null);

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "code"
}, "const a = 1;");

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "hello world");

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "hr"
}, (0, _everDevTest.jsx)("focus", null));

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "heading-2"
}, "\u6807\u98982");

describe('Bi/blockquote/ui', () => {
  it('在空 paragraph 中输入 > + space ，插入引用标示，且 > 被移除', async () => {
    const value = _ref;
    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    const quoteElement = await (0, _react.waitForElement)(() => content.querySelector('blockquote'));
    expect((0, _helper.removeInvisibleChars)(quoteElement?.textContent ?? '')).toBe('');
  });
  it('在有内容的段落顶部输入 > + space ,把当前段落转换为引用', async () => {
    const value = _serializer.default.textToValue('hello world');

    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await addBlockquoteByShortcut(editor, content);
    const quoteElement = content.querySelector('blockquote');
    expect(quoteElement?.textContent).toBe('hello world');
  });
  it('在引用段落顶部触发 Backspace ，移除引用', async () => {
    const value = _serializer.default.textToValue('hello world');

    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await addBlockquoteByShortcut(editor, content);
    let quoteElement = await (0, _react.waitForElement)(() => content.querySelector('blockquote'));
    expect(quoteElement).toBeTruthy();

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('backspace'));

    await (0, _react.waitForElementToBeRemoved)(() => content.querySelector('blockquote'));
    quoteElement = content.querySelector('blockquote');
    expect(quoteElement).toBeNull();
  });
  it('在空引用段落中输入回车，移除引用', async () => {
    const value = _serializer.default.textToValue('');

    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await addBlockquoteByShortcut(editor, content);
    let quoteElement = await (0, _react.waitForElement)(() => content.querySelector('blockquote'));
    expect(quoteElement).toBeTruthy();

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('enter'));

    await (0, _react.waitForElementToBeRemoved)(() => content.querySelector('blockquote'));
    quoteElement = content.querySelector('blockquote');
    expect(quoteElement).toBeNull();
  });
  it('首行为引用段落，触发退格键，移除引用状态', async () => {
    const value = _serializer.default.textToValue('Hello World');

    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await addBlockquoteByShortcut(editor, content);
    let quoteElement = await (0, _react.waitForElement)(() => content.querySelector('blockquote'));
    expect(quoteElement).toBeTruthy();

    _everDevTest.fireEvent.keyDown(content, (0, _everDevTest.getHotkeyEvent)('backspace'));

    await (0, _react.waitForElementToBeRemoved)(() => content.querySelector('blockquote'));
    quoteElement = content.querySelector('blockquote');
    expect(quoteElement).toBeNull();
  });
  it('在引用段落顶部，输入 ## 将当前 block 转变为带引用的二级标题', async () => {
    const value = _serializer.default.textToValue('hello world');

    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await addBlockquoteByShortcut(editor, content);
    const quoteElement = await (0, _react.waitForElement)(() => content.querySelector('blockquote'));
    expect(quoteElement).toBeTruthy();

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: '##'
    });

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    const headerElement = await (0, _react.waitForElement)(() => quoteElement?.querySelector('h2'));
    expect(headerElement).toBeTruthy();
  });
  it('在标题前输入 > + space ,不应该把标题转变为引用', async () => {
    const value = _serializer.default.textToValue('hello world');

    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: '##'
    });

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    await addBlockquoteByShortcut(editor, content);
    const quoteElement = content.querySelector('blockquote');
    expect(quoteElement).toBeNull();
    const headerElement = content.querySelector('h2');
    expect(headerElement).toBeTruthy();
    expect(headerElement?.textContent).toBe('> hello world');
  });
  it('在引用块中输入 * + 空格，保留 *，不出现列表', async () => {
    const value = _serializer.default.textToValue('hello world');

    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await addBlockquoteByShortcut(editor, content);

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: '*'
    });

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    const quoteElement = await (0, _react.waitForElement)(() => content.querySelector('blockquote'));
    expect(quoteElement?.textContent).toBe('* hello world');
    const listElement = content.querySelector('ul');
    expect(listElement).toBeNull();
  });
  it('在列表中输入 > + space, 不将列表转变为引用', async () => {
    const value = _serializer.default.textToValue('hello world');

    const {
      content,
      editor,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: '*'
    });

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    await addBlockquoteByShortcut(editor, content);

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    await (0, _react.waitForElement)(() => queryByTestId('list'));
    const quoteElement = content.querySelector('blockquote');
    const listElement = queryByTestId('list');
    expect(listElement?.textContent).toBe('●>  hello world');
    expect(quoteElement).toBeNull();
  });
  it('在引用段落中输入 > + space, 保留 >', async () => {
    const value = _serializer.default.textToValue('hello world');

    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await addBlockquoteByShortcut(editor, content);
    await addBlockquoteByShortcut(editor, content);

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ' '
    });

    const quoteElement = await (0, _react.waitForElement)(() => content.querySelector('blockquote'));
    expect(quoteElement?.textContent).toBe('>  hello world');
  });
  it.skip('通过引用按钮可切换段落是否处于引用状态', async () => {
    const value = _ref2;
    const {
      content,
      container
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await clickQuoteButton(container);
    const blockquoteElement = content.querySelector('blockquote');
    expect(blockquoteElement?.textContent).toBe('hello world');
  });
  it.skip('选中三个不带选区的 block 时，将满足条件的 block 都转换为引用', async () => {
    const value = _ref3;
    const {
      container,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await clickQuoteButton(container);
    const blockquoteElements = content.querySelectorAll('blockquote');
    expect(blockquoteElements.length).toBe(3);
  });
  it('表格中可以插入引用', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key",
      data: {
        colsWidth: [100]
      }
    }, _ref4)));
    const controllerRef = jest.fn();
    const {
      content,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      controllerRef: controllerRef
    }));
    await addBlockquoteByShortcut(editor, content);
    const blockquoteElements = await (0, _react.waitForElement)(() => content.querySelectorAll('blockquote'));
    expect(blockquoteElements.length).toBe(1);
  });
  it.skip('嵌入文件，代码块，分割线不能被设置为引用', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "embed",
      data: {
        name: 'test.docx',
        src: 'test.docx'
      }
    }, _ref5), _ref6, _ref7, _ref8));
    const {
      container,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await clickQuoteButton(container);
    const blockquoteElements = content.querySelectorAll('blockquote');
    expect(blockquoteElements.length).toBe(1);
  });
  it('引用不能嵌套标题折叠', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "heading-1",
      data: {
        blockquote: true
      }
    }, "\u5F15\u7528\u6807\u98981"), _ref9));
    const createBiPlugins = (0, _.createCustomizedBiPlugins)({
      HeadingGroupPlugin: _.HeadingGroupPlugin,
      BlockquotePlugin: _.BlockquotePlugin
    });
    const plugins = createBiPlugins();
    const {
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      plugins: plugins
    }));
    const blockquoteElements = content.querySelectorAll('blockquote');
    expect(blockquoteElements.length).toBe(1);
  });
});
//# sourceMappingURL=ui.test.js.map