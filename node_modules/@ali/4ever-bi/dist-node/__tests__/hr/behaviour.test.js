"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _hr = _interopRequireDefault(require("../../plugins/hr"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _createBiPlugins.default)().array;
const hrPayload = {
  type: "single",
  sz: 4,
  color: "black",
  width: "100%"
};

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Start Paragraph", (0, _everDevTest.jsx)("cursor", null))));

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  key: "test-a",
  type: "paragraph"
}, "A")));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Start Paragraph", (0, _everDevTest.jsx)("cursor", null)), (0, _everDevTest.jsx)("block", {
  type: "hr"
})));

describe('Bi/hr/behaviour', () => {
  describe('选择', () => {
    test('在正文全选，可以选中分割线', async () => {
      const value = _ref;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', _hr.default.actions.insertHr({}));
      const {
        document
      } = controller.value;
      expect(document.getBlocksByType('hr').length).toBe(1);
    });
  });
  describe('插入', () => {
    test('在非段落的 block 内插入分割线，不会删除该 block', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table",
        data: {
          colsWidth: [100]
        }
      }, _ref2)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const point = _everCangjie.Point.createFromParams('table', 'before');

      const selection = _everCangjie.RangeSelection.create({
        anchor: point,
        focus: point
      });

      controller.command(_everCangjie.Commands.select, selection);
      controller.run('onAction', _hr.default.actions.insertHr({}));
      const {
        document
      } = controller.value;
      expect(document.filterDescendants(n => n.type === 'table').length).toBe(1);
      expect(document.getBlocksByType('hr').length).toBe(1);
    });
  });
  describe('hr节点数据', () => {
    test("验证制定数据", () => {
      const value = _ref3;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      controller.run('onAction', _hr.default.actions.insertHr(hrPayload));
      const {
        document
      } = controller.value;
      const hrBlock = document.getBlocksByType('hr')[0];
      expect(hrBlock.data).toEqual({
        id: expect.anything(),
        ...hrPayload
      });
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map