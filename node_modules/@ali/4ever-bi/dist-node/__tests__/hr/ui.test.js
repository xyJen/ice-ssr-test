"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

require("@testing-library/jest-dom/extend-expect");

var _react2 = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _serializer = _interopRequireDefault(require("../serializer"));

var _hr = _interopRequireDefault(require("../../plugins/hr"));

var _ = require("../..");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  hr: _hr.default
});

var _ref = (0, _everDevTest.jsx)(_content.default, {
  tabIndex: 0
});

const Editor = props => {
  const {
    defaultValue,
    controllerRef
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = createBiPlugins();
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    plugins: plugins,
    value: value,
    onChange: handleChange,
    controllerRef: controllerRef
  }, (0, _everDevTest.jsx)(_.Toolbar, {
    autoFolding: false,
    singleLayout: [{
      toolButtons: [{
        name: 'hr'
      }]
    }]
  }), _ref);
};

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "---", (0, _everDevTest.jsx)("cursor", null))));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "***", (0, _everDevTest.jsx)("cursor", null))));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "hr"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "hr"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref6 = (0, _everDevTest.jsx)("cursor", null);

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "---", (0, _everDevTest.jsx)("cursor", null))));

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "---", (0, _everDevTest.jsx)("cursor", null))));

describe('Bi/hr/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('插入分割线', () => {
    test('快捷键插入: 输入 --- 回车，插入分割线', async () => {
      /**
       * 这个 test case 在 CI 中失败率非常高，但是在本地进行多次测试，均无法复现。
       */
      const value = _ref2;
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      await (0, _react2.wait)();
      const event = (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.enter);

      _everDevTest.fireEvent.keyDown(editor, event);

      await (0, _react2.waitForElement)(() => queryByTestId('horizon-line'));
    });
    test('快捷键插入: 输入 *** 回车，插入分割线', async () => {
      const value = _ref3;
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      await (0, _react2.wait)();
      const event = (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.enter);

      _everDevTest.fireEvent.keyDown(editor, event);

      await (0, _react2.waitForElement)(() => queryByTestId('horizon-line'));
    });
    test('工具栏插入', async () => {
      const {
        queryByTestId,
        container
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue('')
      }));
      const button = container.querySelector('[data-testid="bi-toolbar-hrline"]'); // TODO @淼淼 迁移到3.0 框架中

      _everDevTest.fireEvent.click(button);

      await (0, _react2.waitForElement)(() => queryByTestId('horizon-line'));
    });
    test('插入分割线后, 选中, 回车, 出现new line', async () => {
      const value = _ref4;
      const {
        queryByTestId,
        editor,
        container
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      await (0, _react2.waitForElement)(() => queryByTestId('horizon-line')); // 回车

      const event = (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.enter);

      _everDevTest.fireEvent.keyDown(editor, event); // 只有一个hr和一个空行


      await (0, _react2.waitFor)(() => {
        expect(container.querySelectorAll('[data-type="paragraph"]')).toHaveLength(1);
      });
    });
    describe('删除分割线', () => {
      test('插入分割线后, 选中, 删除', async () => {
        const value = _ref5;
        const {
          queryByTestId,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
          defaultValue: value
        }));
        await (0, _react2.waitForElement)(() => queryByTestId('horizon-line')); // 删除

        _everDevTest.fireEvent.keyDown(editor, {
          key: 'Backspace',
          keyCode: 8
        });

        await (0, _react2.waitForElementToBeRemoved)(() => queryByTestId('horizon-line'));
      });
    });
    test('段落设置对齐方式后, 也可以插入分割线', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        data: {
          jc: 'center'
        }
      }, "---", _ref6)));
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      await (0, _react2.wait)();
      const event = (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.enter);

      _everDevTest.fireEvent.keyDown(editor, event);

      await (0, _react2.waitForElement)(() => queryByTestId('horizon-line'));
    });
  });
  describe('设置分割线样式', () => {
    test('使用标准色卡设置分割线颜色', async () => {
      const value = _ref7;
      const {
        container,
        queryByTestId,
        editor,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const event = (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.enter);

      _everDevTest.fireEvent.keyDown(editor, event);

      const hrWrapper = await findByTestId('horizon-line');

      _everDevTest.fireEvent.click(hrWrapper);

      const colorPanel = await findByTestId('splitbutton-arrow-ColorPicker-backgroundfont');

      _everDevTest.fireEvent.click(colorPanel);

      await (0, _react2.wait)();
      const colorBox = container.querySelector('[color="#C10002"]');

      _everDevTest.fireEvent.click(colorBox);

      await (0, _react2.wait)();
      const hrElement = container.querySelector('hr');
      expect(getComputedStyle(hrElement).backgroundColor).toBe('rgb(193, 0, 2)');
    });
    test('使用艺术色卡设置分割线颜色', async () => {
      const value = _ref8;
      const {
        container,
        editor,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const event = (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.enter);

      _everDevTest.fireEvent.keyDown(editor, event);

      const hrWrapper = await findByTestId('horizon-line');

      _everDevTest.fireEvent.click(hrWrapper);

      const colorPanel = await findByTestId('splitbutton-arrow-ColorPicker-backgroundfont');

      _everDevTest.fireEvent.click(colorPanel);

      const toggleSelect = await findByTestId('SelectWrap-color_panel_mode_select');

      _everDevTest.fireEvent.click(toggleSelect);

      const artTrigger = await findByTestId('option-color_panel_art_mode');

      _everDevTest.fireEvent.click(artTrigger);

      await (0, _react2.wait)();
      const colorBox = container.querySelector('[color="#222328"]');

      _everDevTest.fireEvent.click(colorBox);

      await (0, _react2.wait)();
      const hrElement = container.querySelector('hr');
      expect(getComputedStyle(hrElement).backgroundColor).toBe('rgb(34, 35, 40)');
    });
  });
});
//# sourceMappingURL=ui.test.js.map