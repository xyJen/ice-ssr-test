"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../../plugins/clearStyle/actions");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _everUtils = require("@ali/4ever-utils");

/** @jsx jsx */
const defaultPlugins = (0, _createBiPlugins.default)().array;

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "Bold"), (0, _everDevTest.jsx)("m", {
  type: "italic"
}, "Italic"), (0, _everDevTest.jsx)("focus", null))));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "Bold"), "Italic", (0, _everDevTest.jsx)("focus", null))));

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("cursor", null);

var _ref5 = (0, _everDevTest.jsx)("anchor", null);

var _ref6 = (0, _everDevTest.jsx)("focus", null);

var _ref7 = (0, _everDevTest.jsx)("anchor", null);

var _ref8 = (0, _everDevTest.jsx)("focus", null);

var _ref9 = (0, _everDevTest.jsx)("anchor", null);

var _ref10 = (0, _everDevTest.jsx)("focus", null);

var _ref11 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("anchor", null), " World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "say hi", (0, _everDevTest.jsx)("focus", null))));

var _ref12 = (0, _everDevTest.jsx)("anchor", null);

var _ref13 = (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "World");

var _ref14 = (0, _everDevTest.jsx)("focus", null);

var _ref15 = (0, _everDevTest.jsx)("anchor", null);

var _ref16 = (0, _everDevTest.jsx)("focus", null);

var _ref17 = (0, _everDevTest.jsx)("anchor", null);

var _ref18 = (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "World");

var _ref19 = (0, _everDevTest.jsx)("focus", null);

var _ref20 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("anchor", null), " World"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "say hi", (0, _everDevTest.jsx)("focus", null))));

var _ref21 = (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "World", (0, _everDevTest.jsx)("cursor", null));

var _ref22 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "World", (0, _everDevTest.jsx)("cursor", null)))));

var _ref23 = (0, _everDevTest.jsx)("cursor", null);

var _ref24 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello World", (0, _everDevTest.jsx)("cursor", null))));

var _ref25 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "World", (0, _everDevTest.jsx)("cursor", null)))));

var _ref26 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "World")), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "w", (0, _everDevTest.jsx)("cursor", null))));

var _ref27 = (0, _everDevTest.jsx)("cursor", null);

var _ref28 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref29 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a"
})), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
})));

describe('Bi/clearStyle/behaviour', () => {
  test('清除样式', () => {
    const value = _ref;
    const output = _ref2;
    const plugins = (0, _createBiPlugins.default)({
      clearStyle: {
        locale: {},
        ignores: ['bold']
      }
    }).array;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', (0, _actions.clearStyles)());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('清除段落格式-不选中状态', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        retain: 'something retain',
        jc: 'center',
        ind: {
          left: 32,
          firstLine: 32
        },
        spacing: {
          before: 32
        },
        shd: {
          val: 'pct15',
          fill: '#FF0000',
          color: '#0000FF'
        }
      }
    }, "Hello", _ref3)));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        retain: 'something retain'
      }
    }, "Hello", _ref4)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: defaultPlugins
    });

    controller.run('onAction', (0, _actions.clearStyles)());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('清除段落格式-选中整段状态', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        retain: 'something retain',
        jc: 'center',
        ind: {
          left: 32,
          firstLine: 32
        },
        spacing: {
          before: 32
        }
      }
    }, _ref5, "Hello", _ref6)));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        retain: 'something retain'
      }
    }, _ref7, "Hello", _ref8)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: defaultPlugins
    });

    controller.run('onAction', (0, _actions.clearStyles)());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('清除段落格式-跨段选中状态', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          left: 64
        }
      }
    }, "Hello", _ref9, " World"), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        spacing: {
          before: 64
        }
      }
    }, "say hi", _ref10)));
    const output = _ref11;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: defaultPlugins
    });

    controller.run('onAction', (0, _actions.clearStyles)());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('清除段落和文本样式-选中部分段状态', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          left: 64
        }
      }
    }, "Hello", _ref12, " ", _ref13, _ref14)));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          left: 64
        }
      }
    }, "Hello", _ref15, " World", _ref16)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: defaultPlugins
    });

    controller.run('onAction', (0, _actions.clearStyles)());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('清除段落和文本样式-跨段选中状态', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        ind: {
          left: 64
        }
      }
    }, "Hello", _ref17, " ", _ref18), (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        spacing: {
          before: 64
        }
      }
    }, "say hi", _ref19)));
    const output = _ref20;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: defaultPlugins
    });

    controller.run('onAction', (0, _actions.clearStyles)());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('清除段落和文本样式-不选中状态', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        spacing: {
          before: 32
        }
      }
    }, "Hello", _ref21)));
    const output = _ref22;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: defaultPlugins
    });

    controller.run('onAction', (0, _actions.clearStyles)());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('清除段落格式-标题、列表、引用变正文', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "heading-1",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: true,
          listStyleType: 'DEC_LEN_LROM_P'
        },
        blockquote: true,
        ind: {
          left: 32
        }
      }
    }, "Hello World", _ref23)));
    const output = _ref24;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: defaultPlugins
    });

    controller.run('onAction', (0, _actions.clearStyles)());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('段尾清除样式-回车后可继承空样式', () => {
    const value = _ref25;
    const output = _ref26;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: defaultPlugins
    });

    controller.run('onAction', (0, _actions.clearStyles)());
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
    controller.run('onCangjieInput', (0, _everCangjie.CangjieInputEvent)({
      type: 'insertText',
      data: 'w'
    }));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('带样式的空段落可清除样式', () => {
    const marks = [{
      type: 'color',
      data: {
        value: 'red'
      }
    }];
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("text", {
      marks: marks
    }, "with marks", _ref27))));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("text", {
      marks: marks
    }, "with marks")), _ref28));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: defaultPlugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('enter')));
    controller.run('onAction', (0, _actions.clearStyles)());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('表格带样式空 cell 可清除样式', () => {
    const mark = _everCangjie.Mark.create({
      type: 'color',
      data: {
        value: 'red'
      }
    });

    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table-key",
      data: {
        colsWidth: [100, 100]
      }
    }, _ref29)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: defaultPlugins
    });

    const tableSelection = {
      key: 'table-key',
      startRowIndex: 0,
      startColIndex: 0,
      endRowIndex: 0,
      endColIndex: 1
    };
    const table = controller.value.document.getNode('table-key'); // @ts-ignore

    controller.command('selectTableSelection', table, tableSelection); // 先设置样式

    (0, _everUtils.addMarkAtCurrentRange)(controller, mark);
    let tableNode = controller.value.document.getNode('a');
    expect(tableNode.getFirstText().getMarks()).toEqual([mark]);
    controller.run('onAction', (0, _actions.clearStyles)());
    tableNode = controller.value.document.getNode('b');
    expect(tableNode.getFirstText().getMarks()).toEqual([]);
  });
});
//# sourceMappingURL=behaviour.test.js.map