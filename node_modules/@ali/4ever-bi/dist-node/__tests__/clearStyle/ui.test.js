"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _lodash = require("lodash");

var _editor = _interopRequireDefault(require("../editor"));

var _helper = require("../helper");

var _react = require("@testing-library/react");

/** @jsx jsx */
const CLEAR_STYLE_HOT_KEY = 'ctrl+\\';

var _ref = (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "World", (0, _everDevTest.jsx)("cursor", null));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Hello", (0, _everDevTest.jsx)("m", {
  type: "bold"
}, "World"), "!", (0, _everDevTest.jsx)("cursor", null))));

describe('Bi/clearStyle/ui', () => {
  test('清除样式快捷键', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        spacing: {
          before: 32
        }
      }
    }, "Hello", _ref)));
    const output = _ref2;
    const controllerRef = jest.fn();
    const {
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(CLEAR_STYLE_HOT_KEY));

    await (0, _react.wait)();

    _everDevTest.fireEvent.keyPress(editor, (0, _helper.getHotKeyEvent)('!'));

    await (0, _react.wait)();
    await (0, _react.waitFor)(() => {
      const actual = controller.value.toJSON({
        preserveSelections: true
      });
      const expected = controller.setValue(output).value.toJSON({
        preserveSelections: true
      });
      return expect(actual).toEqual(expected);
    });
  });
});
//# sourceMappingURL=ui.test.js.map