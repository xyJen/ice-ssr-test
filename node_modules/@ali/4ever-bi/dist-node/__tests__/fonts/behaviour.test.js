"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _fonts = _interopRequireDefault(require("../../plugins/fonts"));

var _getActiveFontsMark = require("../../plugins/fonts/utils/getActiveFontsMark");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const plugins = (0, _createBiPlugins.default)().array;

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "getFonts ", (0, _everDevTest.jsx)("cursor", null), "\u6D4B\u8BD5")));

var _ref2 = (0, _everDevTest.jsx)("anchor", null);

var _ref3 = (0, _everDevTest.jsx)("focus", null);

var _ref4 = (0, _everDevTest.jsx)("anchor", null);

var _ref5 = (0, _everDevTest.jsx)("focus", null);

var _ref6 = (0, _everDevTest.jsx)("anchor", null);

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "getFonts", (0, _everDevTest.jsx)("focus", null));

var _ref8 = (0, _everDevTest.jsx)("anchor", null);

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("focus", null), "getFonts");

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, "B"));

describe('Bi/fonts/behaviour', () => {
  describe('getFonts 单测', () => {
    test('默认字体', async () => {
      const value = _ref;

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const fonts = controller.query(_fonts.default.queries.getFonts);
      expect(fonts).toBe(_getActiveFontsMark.defaultFonts);
    });
    test('段落选区包含多个字体', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref2, (0, _everDevTest.jsx)("m", {
        type: "fonts",
        data: {
          ascii: 'Impact',
          hAnsi: 'Impact',
          cs: 'Impact',
          eastAsia: 'Impact'
        }
      }, "getFonts"), " \u6D4B\u8BD5", _ref3)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const fonts = controller.query(_fonts.default.queries.getFonts);
      expect(fonts).toBe('');
    });
    test('连续空段落', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref4, (0, _everDevTest.jsx)("m", {
        type: "fonts",
        data: {
          ascii: 'Impact',
          hAnsi: 'Impact',
          cs: 'Impact',
          eastAsia: 'Impact'
        }
      })), (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, (0, _everDevTest.jsx)("m", {
        type: "fonts",
        data: {
          ascii: 'Impact',
          hAnsi: 'Impact',
          cs: 'Impact',
          eastAsia: 'Impact'
        }
      }), _ref5)));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const fonts = controller.query(_fonts.default.queries.getFonts);
      expect(fonts).toBe('Impact');
    });
    test('空段落+段落', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref6, (0, _everDevTest.jsx)("m", {
        type: "fonts",
        data: {
          ascii: 'Impact',
          hAnsi: 'Impact',
          cs: 'Impact',
          eastAsia: 'Impact'
        }
      })), _ref7));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const fonts = controller.query(_fonts.default.queries.getFonts);
      expect(fonts).toBe('');
    });
    test.skip('空段落+段落前', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, _ref8, (0, _everDevTest.jsx)("m", {
        type: "fonts",
        data: {
          ascii: 'Impact',
          hAnsi: 'Impact',
          cs: 'Impact',
          eastAsia: 'Impact'
        }
      })), _ref9));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const fonts = controller.query(_fonts.default.queries.getFonts);
      expect(fonts).toBe('Impact');
    });
    test('表格选区', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "table",
        key: "table-key",
        data: {
          colsWidth: [100, 100]
        }
      }, (0, _everDevTest.jsx)("block", {
        type: "table-row"
      }, (0, _everDevTest.jsx)("block", {
        type: "table-cell"
      }, (0, _everDevTest.jsx)("block", {
        type: "paragraph",
        key: "a"
      }, (0, _everDevTest.jsx)("m", {
        type: "fonts",
        data: {
          ascii: 'Impact',
          hAnsi: 'Impact',
          cs: 'Impact',
          eastAsia: 'Impact'
        }
      }, "A"))), _ref10))));

      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const tableSelection = {
        key: 'table-key',
        startRowIndex: 0,
        startColIndex: 0,
        endRowIndex: 0,
        endColIndex: 1
      };
      const table = controller.value.document.getNode('table-key');
      controller.command('selectTableSelection', table, tableSelection);
      await (0, _react.wait)();
      const fonts = controller.query(_fonts.default.queries.getFonts);
      expect(fonts).toBe('');
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map