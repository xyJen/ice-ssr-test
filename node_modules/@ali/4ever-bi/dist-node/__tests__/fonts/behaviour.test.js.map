{"version":3,"sources":["../../../../src/__tests__/fonts/behaviour.test.tsx"],"names":["plugins","array","describe","test","value","controller","Controller","create","fonts","query","fontsPlugin","queries","getFonts","expect","toBe","defaultFonts","ascii","hAnsi","cs","eastAsia","skip","colsWidth","tableSelection","key","startRowIndex","startColIndex","endRowIndex","endColIndex","table","document","getNode","command"],"mappings":";;;;AAEA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AATA;;AACA;AAWA,MAAMA,OAAO,GAAG,gCAAkBC,KAAlC;;WAOQ,qCACE,wCACE;AAAO,EAAA,IAAI,EAAC;AAAZ,gBACW,qCADX,iBADF,CADF,C;;YAuBM,qC;;YAAuH,oC;;YAoBvH,qC;;YAGgG,oC;;YAoBhG,qC;;YAEF;AAAO,EAAA,IAAI,EAAC;AAAZ,eACU,oCADV,C;;YAqBE,qC;;YAEF;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE,oCADF,a;;aA2BI;AAAO,EAAA,IAAI,EAAC;AAAZ,GACE;AAAO,EAAA,IAAI,EAAC,WAAZ;AAAwB,EAAA,GAAG,EAAC;AAA5B,OADF,C;;AA1HhBC,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnCA,EAAAA,QAAQ,CAAC,aAAD,EAAgB,MAAM;AAC5BC,IAAAA,IAAI,CAAC,MAAD,EAAS,YAAY;AACvB,YAAMC,KAAK,OAAX;;AAUA,YAAMC,UAAU,GAAGC,wBAAWC,MAAX,CAAkB;AACnCH,QAAAA,KADmC;AAEnCJ,QAAAA;AAFmC,OAAlB,CAAnB;;AAKA,YAAMQ,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiBC,eAAYC,OAAZ,CAAoBC,QAArC,CAAd;AACAC,MAAAA,MAAM,CAACL,KAAD,CAAN,CAAcM,IAAd,CAAmBC,gCAAnB;AACD,KAlBG,CAAJ;AAoBAZ,IAAAA,IAAI,CAAC,YAAD,EAAe,YAAY;AAC7B,YAAMC,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC;AAAZ,gBACY;AAAG,QAAA,IAAI,EAAC,OAAR;AAAgB,QAAA,IAAI,EAAE;AAAEY,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,KAAK,EAAE,QAA1B;AAAoCC,UAAAA,EAAE,EAAE,QAAxC;AAAkDC,UAAAA,QAAQ,EAAE;AAA5D;AAAtB,oBADZ,yBADF,CADF,CADF;;AAUA,YAAMd,UAAU,GAAGC,wBAAWC,MAAX,CAAkB;AACnCH,QAAAA,KADmC;AAEnCJ,QAAAA;AAFmC,OAAlB,CAAnB;;AAKA,YAAMQ,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiBC,eAAYC,OAAZ,CAAoBC,QAArC,CAAd;AACAC,MAAAA,MAAM,CAACL,KAAD,CAAN,CAAcM,IAAd,CAAmB,EAAnB;AACD,KAlBG,CAAJ;AAoBAX,IAAAA,IAAI,CAAC,OAAD,EAAU,YAAY;AACxB,YAAMC,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC;AAAZ,gBACY;AAAG,QAAA,IAAI,EAAC,OAAR;AAAgB,QAAA,IAAI,EAAE;AAAEY,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,KAAK,EAAE,QAA1B;AAAoCC,UAAAA,EAAE,EAAE,QAAxC;AAAkDC,UAAAA,QAAQ,EAAE;AAA5D;AAAtB,QADZ,CADF,EAIE;AAAO,QAAA,IAAI,EAAC;AAAZ,SACE;AAAG,QAAA,IAAI,EAAC,OAAR;AAAgB,QAAA,IAAI,EAAE;AAAEH,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,KAAK,EAAE,QAA1B;AAAoCC,UAAAA,EAAE,EAAE,QAAxC;AAAkDC,UAAAA,QAAQ,EAAE;AAA5D;AAAtB,QADF,QAJF,CADF,CADF;;AAaA,YAAMd,UAAU,GAAGC,wBAAWC,MAAX,CAAkB;AACnCH,QAAAA,KADmC;AAEnCJ,QAAAA;AAFmC,OAAlB,CAAnB;;AAKA,YAAMQ,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiBC,eAAYC,OAAZ,CAAoBC,QAArC,CAAd;AACAC,MAAAA,MAAM,CAACL,KAAD,CAAN,CAAcM,IAAd,CAAmB,QAAnB;AACD,KArBG,CAAJ;AAuBAX,IAAAA,IAAI,CAAC,QAAD,EAAW,YAAY;AACzB,YAAMC,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC;AAAZ,gBACY;AAAG,QAAA,IAAI,EAAC,OAAR;AAAgB,QAAA,IAAI,EAAE;AAAEY,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,KAAK,EAAE,QAA1B;AAAoCC,UAAAA,EAAE,EAAE,QAAxC;AAAkDC,UAAAA,QAAQ,EAAE;AAA5D;AAAtB,QADZ,CADF,QADF,CADF;;AAaA,YAAMd,UAAU,GAAGC,wBAAWC,MAAX,CAAkB;AACnCH,QAAAA,KADmC;AAEnCJ,QAAAA;AAFmC,OAAlB,CAAnB;;AAKA,YAAMQ,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiBC,eAAYC,OAAZ,CAAoBC,QAArC,CAAd;AACAC,MAAAA,MAAM,CAACL,KAAD,CAAN,CAAcM,IAAd,CAAmB,EAAnB;AACD,KArBG,CAAJ;AAuBAX,IAAAA,IAAI,CAACiB,IAAL,CAAU,SAAV,EAAqB,YAAY;AAC/B,YAAMhB,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC;AAAZ,gBACY;AAAG,QAAA,IAAI,EAAC,OAAR;AAAgB,QAAA,IAAI,EAAE;AAAEY,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,KAAK,EAAE,QAA1B;AAAoCC,UAAAA,EAAE,EAAE,QAAxC;AAAkDC,UAAAA,QAAQ,EAAE;AAA5D;AAAtB,QADZ,CADF,QADF,CADF;;AAaA,YAAMd,UAAU,GAAGC,wBAAWC,MAAX,CAAkB;AACnCH,QAAAA,KADmC;AAEnCJ,QAAAA;AAFmC,OAAlB,CAAnB;;AAKA,YAAMQ,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiBC,eAAYC,OAAZ,CAAoBC,QAArC,CAAd;AACAC,MAAAA,MAAM,CAACL,KAAD,CAAN,CAAcM,IAAd,CAAmB,QAAnB;AACD,KArBD;AAuBAX,IAAAA,IAAI,CAAC,MAAD,EAAS,YAAY;AACvB,YAAMC,KAAK,GACT,qCACE,wCACE;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,GAAG,EAAC,WAAxB;AAAoC,QAAA,IAAI,EAAE;AAAEiB,UAAAA,SAAS,EAAE,CAAC,GAAD,EAAM,GAAN;AAAb;AAA1C,SACE;AAAO,QAAA,IAAI,EAAC;AAAZ,SACE;AAAO,QAAA,IAAI,EAAC;AAAZ,SACE;AAAO,QAAA,IAAI,EAAC,WAAZ;AAAwB,QAAA,GAAG,EAAC;AAA5B,SACE;AAAG,QAAA,IAAI,EAAC,OAAR;AAAgB,QAAA,IAAI,EAAE;AAAEL,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,KAAK,EAAE,QAA1B;AAAoCC,UAAAA,EAAE,EAAE,QAAxC;AAAkDC,UAAAA,QAAQ,EAAE;AAA5D;AAAtB,aADF,CADF,CADF,SADF,CADF,CADF,CADF;;AAqBA,YAAMd,UAAU,GAAGC,wBAAWC,MAAX,CAAkB;AACnCH,QAAAA,KADmC;AAEnCJ,QAAAA;AAFmC,OAAlB,CAAnB;;AAKA,YAAMsB,cAAc,GAAG;AACrBC,QAAAA,GAAG,EAAE,WADgB;AAErBC,QAAAA,aAAa,EAAE,CAFM;AAGrBC,QAAAA,aAAa,EAAE,CAHM;AAIrBC,QAAAA,WAAW,EAAE,CAJQ;AAKrBC,QAAAA,WAAW,EAAE;AALQ,OAAvB;AAQA,YAAMC,KAAK,GAAGvB,UAAU,CAACD,KAAX,CAAiByB,QAAjB,CAA0BC,OAA1B,CAAkC,WAAlC,CAAd;AACAzB,MAAAA,UAAU,CAAC0B,OAAX,CAAmB,sBAAnB,EAA2CH,KAA3C,EAA2DN,cAA3D;AACA,YAAM,kBAAN;AAEA,YAAMd,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiBC,eAAYC,OAAZ,CAAoBC,QAArC,CAAd;AACAC,MAAAA,MAAM,CAACL,KAAD,CAAN,CAAcM,IAAd,CAAmB,EAAnB;AACD,KAzCG,CAAJ;AA0CD,GAxJO,CAAR;AAyJD,CA1JO,CAAR","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport { Controller, Value, Block } from '@ali/4ever-cangjie';\nimport { jsx } from '@ali/4ever-dev-test';\nimport {\n  wait,\n} from '@testing-library/react';\nimport createBiPlugins from '../../createBiPlugins';\nimport fontsPlugin from '../../plugins/fonts';\nimport { defaultFonts } from '../../plugins/fonts/utils/getActiveFontsMark';\n\n\nconst plugins = createBiPlugins().array;\n\n\ndescribe('Bi/fonts/behaviour', () => {\n  describe('getFonts 单测', () => {\n    test('默认字体', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              getFonts <cursor />测试\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const fonts = controller.query(fontsPlugin.queries.getFonts);\n      expect(fonts).toBe(defaultFonts);\n    });\n\n    test('段落选区包含多个字体', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor /><m type=\"fonts\" data={{ ascii: 'Impact', hAnsi: 'Impact', cs: 'Impact', eastAsia: 'Impact' }}>getFonts</m> 测试<focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const fonts = controller.query(fontsPlugin.queries.getFonts);\n      expect(fonts).toBe('');\n    });\n\n    test('连续空段落', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor /><m type=\"fonts\" data={{ ascii: 'Impact', hAnsi: 'Impact', cs: 'Impact', eastAsia: 'Impact' }} />\n            </block>\n            <block type=\"paragraph\">\n              <m type=\"fonts\" data={{ ascii: 'Impact', hAnsi: 'Impact', cs: 'Impact', eastAsia: 'Impact' }} /><focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const fonts = controller.query(fontsPlugin.queries.getFonts);\n      expect(fonts).toBe('Impact');\n    });\n\n    test('空段落+段落', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor /><m type=\"fonts\" data={{ ascii: 'Impact', hAnsi: 'Impact', cs: 'Impact', eastAsia: 'Impact' }} />\n            </block>\n            <block type=\"paragraph\">\n              getFonts<focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const fonts = controller.query(fontsPlugin.queries.getFonts);\n      expect(fonts).toBe('');\n    });\n\n    test.skip('空段落+段落前', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor /><m type=\"fonts\" data={{ ascii: 'Impact', hAnsi: 'Impact', cs: 'Impact', eastAsia: 'Impact' }} />\n            </block>\n            <block type=\"paragraph\">\n              <focus />getFonts\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const fonts = controller.query(fontsPlugin.queries.getFonts);\n      expect(fonts).toBe('Impact');\n    });\n\n    test('表格选区', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"table\" key=\"table-key\" data={{ colsWidth: [100, 100] }}>\n              <block type=\"table-row\">\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\" key=\"a\">\n                    <m type=\"fonts\" data={{ ascii: 'Impact', hAnsi: 'Impact', cs: 'Impact', eastAsia: 'Impact' }}>A</m>\n                  </block>\n                </block>\n                <block type=\"table-cell\">\n                  <block type=\"paragraph\" key=\"b\">\n                    B\n                  </block>\n                </block>\n              </block>\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n\n      const tableSelection = {\n        key: 'table-key',\n        startRowIndex: 0,\n        startColIndex: 0,\n        endRowIndex: 0,\n        endColIndex: 1,\n      };\n\n      const table = controller.value.document.getNode('table-key');\n      controller.command('selectTableSelection', table as Block, tableSelection);\n      await wait();\n\n      const fonts = controller.query(fontsPlugin.queries.getFonts);\n      expect(fonts).toBe('');\n    });\n  });\n});\n"],"file":"behaviour.test.js"}