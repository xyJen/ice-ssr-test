"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var React = _interopRequireWildcard(require("react"));

var _mobile = _interopRequireDefault(require("../../plugins/link/mobile"));

var _ = require("../..");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  link: _mobile.default
});

var _ref = (0, _everDevTest.jsx)(_.Content, {
  tabIndex: 0
});

const Editor = props => {
  const {
    defaultValue,
    linkConfig = {},
    openLink
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    const config = {
      hotkey: 'mod+k',
      protocolAllowList: ['xxx:', 'http:', 'https:'],
      ...linkConfig,
      openLink: openLink || linkConfig.openLink
    };
    return createBiPlugins({
      link: config
    });
  }, [linkConfig]);
  const handleChange = React.useCallback(({
    value
  }) => {
    setValue(value);
  }, []);
  return (0, _everDevTest.jsx)(_.Provider, {
    plugins: plugins,
    value: value,
    onChange: handleChange
  }, (0, _everDevTest.jsx)("button", {
    "data-testid": "btn",
    "data-focus": value.isFocused,
    onClick: () => {
      const newValue = value.set('isFocused', !value.isFocused);
      handleChange({
        value: newValue
      });
    }
  }, "editor is ", value.isFocused ? 'focus' : 'blur'), _ref);
}; // NOTE: fireEvent 单测有问题，暂时 skip 掉，后续上线时做一下回归测试


var _ref2 = (0, _everDevTest.jsx)("cursor", null);

describe.skip('Bi/mobileLink/ui', () => {
  const openLink = jest.fn();
  let spiedWindowOpen;
  let spiedConsoleError;
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    spiedConsoleError = jest.spyOn(console, 'error');
    spiedConsoleError.mockImplementation(() => {});
    spiedWindowOpen = jest.spyOn(window, 'open');
    spiedWindowOpen.mockImplementation(openLink);
  });
  afterAll(() => {
    spiedConsoleError.mockRestore();
    spiedWindowOpen.mockRestore();
  });
  afterEach(() => {
    (0, _react.cleanup)();
    openLink.mockReset();
  });
  test('编辑器处于 focus 状态，点击 link，光标进入，不触发跳转', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "https://www.dingtalk.com"), _ref2)));
    const {
      editor,
      findByTestId,
      findByText,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      openLink: openLink
    }));
    const btn = queryByTestId('btn');

    if (btn.getAttribute('data-focus') !== 'true') {
      _everDevTest.fireEvent.click(btn);
    }

    await findByText('editor is focus');
    const link = await findByTestId('link');

    _everDevTest.fireEvent.touchStart(link);

    _everDevTest.fireEvent.touchEnd(link); // 不会触发 openLink


    expect(openLink).not.toHaveBeenCalled(); // 编辑器处于 focus 状态

    expect(btn.getAttribute('data-focus')).toBe('true');
  });
  test('编辑器处于 blur 状态，点击 link，直接跳转，不 focus 到 link 中', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "https://www.dingtalk.com"))));
    const {
      editor,
      findByTestId,
      queryByTestId,
      findByText
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      openLink: openLink
    }));
    const btn = queryByTestId('btn');

    if (btn.getAttribute('data-focus') === 'true') {
      _everDevTest.fireEvent.click(btn);
    }

    await findByText('editor is blur');
    const link = await findByTestId('link');

    _everDevTest.fireEvent.touchStart(link);

    _everDevTest.fireEvent.touchEnd(link); // 触发 openLink


    expect(openLink).toBeCalledWith('https://www.dingtalk.com'); // 编辑器处于 blur 状态

    expect(btn.getAttribute('data-focus')).toBe('false');
  });
  test('编辑器处于 blur 状态，点击无 schema 的 link，直接跳转，不 focus 到 link 中', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'www.dingtalk.com'
      }
    }, "https://www.dingtalk.com"))));
    const {
      editor,
      findByTestId,
      queryByTestId,
      findByText
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value,
      openLink: openLink
    }));
    const btn = queryByTestId('btn');

    if (btn.getAttribute('data-focus') === 'true') {
      _everDevTest.fireEvent.click(btn);
    }

    await findByText('editor is blur');
    const link = await findByTestId('link');

    _everDevTest.fireEvent.touchStart(link);

    _everDevTest.fireEvent.touchEnd(link); // 触发 openLink


    expect(openLink).toBeCalledWith('https://www.dingtalk.com'); // 编辑器处于 blur 状态

    expect(btn.getAttribute('data-focus')).toBe('false');
  });
});
//# sourceMappingURL=mobile.ui.test.js.map