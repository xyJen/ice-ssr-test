"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _mockfile = _interopRequireDefault(require("./mockfile"));

var _react = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _isHotkey = require("is-hotkey");

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _createMobileBiPlugins = _interopRequireDefault(require("../../createMobileBiPlugins"));

var _clipboardManager = _interopRequireDefault(require("@ali/clipboard-manager"));

var _link = _interopRequireDefault(require("../../plugins/link"));

var _actions = require("../../plugins/link/actions");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
jest.mock('@ali/clipboard-manager', () => {
  return jest.fn().mockImplementation(() => {
    return {
      write: _mockfile.default
    };
  });
});
const plugins = (0, _createMobileBiPlugins.default)({
  link: {
    locale: {}
  },
  mention: {}
}).array;
jest.useFakeTimers();

var _ref = (0, _everDevTest.jsx)("cursor", null);

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("cursor", null);

var _ref5 = (0, _everDevTest.jsx)("anchor", null);

var _ref6 = (0, _everDevTest.jsx)("focus", null);

describe('Bi/link/behaviour', () => {
  test('在链接尾部退格 2 次，仅删除字符', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "link"), _ref)));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "li"), _ref2)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('当链接文本为空时，向前删除文本后，仅删除字符', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk/com'
      }
    }, _ref3))));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, _ref4, (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk/com'
      }
    }))));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test.skip('范围选中卡片进行复制，复制出 text/plain 为链接', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, _ref5, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref6), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    const setData = jest.fn();
    controller.run('onCopy', {
      nativeEvent: {
        clipboardData: {
          setData
        },

        preventDefault() {}

      }
    }); // 复制链接

    expect(setData.mock.calls[1]).toEqual(['text/html', '<article class=\"4ever-article\" data-clipboard-cangjie=\"[&quot;root&quot;,{},[&quot;p&quot;,{},[&quot;a&quot;,{&quot;href&quot;:&quot;https://www.dingtalk.com&quot;,&quot;cardInfo&quot;:{&quot;displayType&quot;:&quot;card&quot;}},[&quot;span&quot;,{&quot;data-type&quot;:&quot;text&quot;},[&quot;span&quot;,{&quot;data-type&quot;:&quot;leaf&quot;},&quot;试测试测试测试测试测试测试测&quot;]]]]]\"><p style=\"text-align:left;text-indent:0;margin-left:0\"><a href=\"https://www.dingtalk.com\" target=\"_blank\" rel=\"noopener noreferrer\"><span>试测试测试测试测试测试测试测</span></a></p></article>']); // 复制 text/plain 为链接

    expect(setData.mock.calls[3]).toEqual(['text/plain', 'https://www.dingtalk.com']);
  });
});

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "12345", (0, _everDevTest.jsx)("cursor", null), "67890")));

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "12345", (0, _everDevTest.jsx)("cursor", null), "67890")));

var _ref9 = (0, _everDevTest.jsx)("cursor", null);

var _ref10 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123", (0, _everDevTest.jsx)("anchor", null), "4567", (0, _everDevTest.jsx)("focus", null), "890")));

var _ref11 = (0, _everDevTest.jsx)("cursor", null);

var _ref12 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123", (0, _everDevTest.jsx)("anchor", null), "4567", (0, _everDevTest.jsx)("focus", null), "890")));

var _ref13 = (0, _everDevTest.jsx)("cursor", null);

var _ref14 = (0, _everDevTest.jsx)("cursor", null);

var _ref15 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "12345", (0, _everDevTest.jsx)("cursor", null), "67890")));

var _ref16 = (0, _everDevTest.jsx)("cursor", null);

var _ref17 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "https://www.ba", (0, _everDevTest.jsx)("cursor", null), "idu.com")));

var _ref18 = (0, _everDevTest.jsx)("cursor", null);

var _ref19 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "https://www.ba", (0, _everDevTest.jsx)("cursor", null), "idu.com")));

describe('Bi/link/behaviour/insertLink', () => {
  const isInsertLinkHotkey = (0, _isHotkey.isKeyHotkey)('mod+k');

  const createMobilePlugins = (text, href) => {
    return [...plugins, {
      onKeyDown: (event, controller, next) => {
        if (isInsertLinkHotkey(event)) {
          event.preventDefault();
          event.stopPropagation();
          return controller.command('insertLink', text, href);
        }

        return next();
      }
    }];
  };

  test('插入链接的 href 为 undefined，无效果', () => {
    const mobilePlugins = createMobilePlugins('dingtalk', undefined);
    const value = _ref7;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('mod+k')));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(value).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('无选区插入链接', () => {
    const mobilePlugins = createMobilePlugins('dingtalk', 'http://dingtalk.com/');
    const value = _ref8;
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "12345", (0, _everDevTest.jsx)("inline", {
      type: "link",
      data: {
        href: 'http://dingtalk.com/'
      }
    }, "dingtalk"), " ", _ref9, "67890")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('mod+k')));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('有选区带标题插入链接', () => {
    const mobilePlugins = createMobilePlugins('dingtalk', 'http://dingtalk.com/');
    const value = _ref10;
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "123", (0, _everDevTest.jsx)("inline", {
      type: "link",
      data: {
        href: 'http://dingtalk.com/'
      }
    }, "dingtalk"), " ", _ref11, "890")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('mod+k')));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('有选区无标题插入链接', () => {
    const mobilePlugins = createMobilePlugins('', 'http://dingtalk.com/');
    const value = _ref12;
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "123", (0, _everDevTest.jsx)("inline", {
      type: "link",
      data: {
        href: 'http://dingtalk.com/'
      }
    }, "4567"), " ", _ref13, "890")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('mod+k')));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('复制卡片，text href', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B"), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5", _ref14)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');

    _clipboardManager.default.mockClear();

    controller.run('onAction', _link.default.actions.copyLink(link));
    expect(_mockfile.default).toHaveBeenCalledTimes(1);
    expect(_mockfile.default.mock.calls[0][0][_everCangjie.constants.MIME_TYPES.TEXT]).toEqual('https://www.dingtalk.com');
  });
  test('非链接文本， shouldRenderContextMenu 返回 false, getSelectedLinkUrl 返回空串', () => {
    const mobilePlugins = createMobilePlugins('dingtalk', undefined);
    const value = _ref15;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    expect(controller.query('shouldRenderContextMenu')).toBeFalsy();
    const result = controller.query('getSelectedLinkUrl');
    expect(result).toEqual('');
  });
  test('textLink， shouldRenderContextMenu 返回 true, getSelectedLinkUrl 返回 href', () => {
    const mobilePlugins = createMobilePlugins('dingtalk', undefined);
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref16, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B"), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    expect(controller.query('shouldRenderContextMenu')).toBe(true);
    const result = controller.query('getSelectedLinkUrl');
    expect(result).toEqual('https://www.dingtalk.com');
  });
  test('pureLink， shouldRenderContextMenu 返回 true, getSelectedLinkUrl 返回 href', () => {
    const mobilePlugins = createMobilePlugins('dingtalk', undefined);
    const value = _ref17;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    expect(controller.query('shouldRenderContextMenu')).toBe(true);
    const result = controller.query('getSelectedLinkUrl');
    expect(result).toEqual('https://www.baidu.com');
  });
  test('textLink， run contextMenu 可以返回 button', () => {
    const mobilePlugins = createMobilePlugins('dingtalk', undefined);
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref18, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B"), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    const items = controller.run('contextMenu');
    const linkItem = items.find(item => item.key === 'openLink');
    expect(linkItem).toBeTruthy();
    expect(linkItem.action.payload.href).toEqual('https://www.dingtalk.com');
  });
  test('pureLink， run contextMenu 可以返回 button', () => {
    const mobilePlugins = createMobilePlugins('dingtalk', undefined);
    const value = _ref19;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    const items = controller.run('contextMenu');
    const linkItem = items.find(item => item.key === 'openLink');
    expect(linkItem).toBeTruthy();
    expect(linkItem.action.payload.href).toEqual('https://www.baidu.com');
  });
});

var _ref20 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "https://www.ba", (0, _everDevTest.jsx)("cursor", null), "idu.com")));

var _ref21 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "https://www.ba", (0, _everDevTest.jsx)("cursor", null), "idu.com")));

describe('Bi/link/openlink', () => {
  const openLink = jest.fn();
  const openLink2 = jest.fn();
  let spiedWindowOpen;
  let spiedConsoleError;
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    spiedConsoleError = jest.spyOn(console, 'error');
    spiedConsoleError.mockImplementation(() => {});
    spiedWindowOpen = jest.spyOn(window, 'open');
    spiedWindowOpen.mockImplementation(openLink);
  });
  afterAll(() => {
    spiedConsoleError.mockRestore();
    spiedWindowOpen.mockRestore();
  });
  afterEach(() => {
    (0, _react.cleanup)();
    openLink.mockReset();
    openLink2.mockReset();
  });
  test('传入 openLink 方法时，运行 link open 调用传入方法', () => {
    const mobilePlugins = (0, _createMobileBiPlugins.default)({
      link: {
        locale: {},
        openLink: openLink2
      },
      mention: {}
    }).array;
    const value = _ref20;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    controller.run('onAction', {
      type: _actions.LINK_OPEN,
      payload: {
        href: 'https://www.baidu.com'
      }
    });
    expect(openLink2).toHaveBeenCalled();
    expect(openLink).not.toHaveBeenCalled();
  });
  test('未传入 openLink 方法时，运行 window.open 方法', () => {
    const mobilePlugins = (0, _createMobileBiPlugins.default)({
      link: {
        locale: {}
      },
      mention: {}
    }).array;
    const value = _ref21;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: mobilePlugins
    });

    controller.run('onAction', {
      type: _actions.LINK_OPEN,
      payload: {
        href: 'https://www.baidu.com'
      }
    });
    expect(openLink).toHaveBeenCalled();
  });
});
//# sourceMappingURL=mobile.behaviour.test.js.map