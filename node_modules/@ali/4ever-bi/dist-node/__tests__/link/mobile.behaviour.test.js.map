{"version":3,"sources":["../../../../src/__tests__/link/mobile.behaviour.test.tsx"],"names":["jest","mock","fn","mockImplementation","write","mockWrite","plugins","link","locale","mention","array","useFakeTimers","describe","test","value","href","output","controller","Controller","create","run","KeyboardEvent","actual","toJSON","preserveSelections","expected","setValue","expect","toEqual","skip","cardInfo","displayType","document","findDescendant","a","Inline","isInline","key","setData","nativeEvent","clipboardData","preventDefault","calls","isInsertLinkHotkey","createMobilePlugins","text","onKeyDown","event","next","stopPropagation","command","mobilePlugins","undefined","ClipboardManager","mockClear","linkPlugin","actions","copyLink","toHaveBeenCalledTimes","constants","MIME_TYPES","TEXT","query","toBeFalsy","result","toBe","items","linkItem","find","item","toBeTruthy","action","payload","openLink","openLink2","spiedWindowOpen","spiedConsoleError","beforeAll","spyOn","console","window","afterAll","mockRestore","afterEach","mockReset","type","LINK_OPEN","toHaveBeenCalled","not"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport mockWrite from './mockfile';\nimport {\n  cleanup,\n} from '@testing-library/react'\nimport '@testing-library/jest-dom/extend-expect';\nimport { isKeyHotkey } from 'is-hotkey';\nimport { getHotkeyEvent, jsx } from '@ali/4ever-dev-test';\nimport { Value, Controller, Inline, constants } from '@ali/4ever-cangjie';\nimport createMobileBiPlugins from '../../createMobileBiPlugins';\nimport ClipboardManager from '@ali/clipboard-manager';\nimport linkPlugin from '../../plugins/link';\nimport { LINK_OPEN } from '../../plugins/link/actions';\n\n\njest.mock('@ali/clipboard-manager', () => {\n  return jest.fn().mockImplementation(() => {\n    return ({\n      write: mockWrite\n    });\n  });\n});\n\nconst plugins = createMobileBiPlugins({\n  link: {\n    locale: {},\n  },\n  mention: {},\n}).array;\n\njest.useFakeTimers();\n\ndescribe('Bi/link/behaviour', () => {\n  test('在链接尾部退格 2 次，仅删除字符', async () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <inline type=\"link\" data={{ href: 'https://www.dingtalk.com' }}>\n              link\n            </inline>\n            <cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const output = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <inline type=\"link\" data={{ href: 'https://www.dingtalk.com' }}>\n              li\n            </inline>\n            <cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getHotkeyEvent('backspace')),\n    );\n\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getHotkeyEvent('backspace')),\n    );\n\n    const actual = controller.value.toJSON({ preserveSelections: true });\n    const expected = controller\n      .setValue(output)\n      .value.toJSON({ preserveSelections: true });\n    expect(actual).toEqual(expected);\n  });\n\n  test('当链接文本为空时，向前删除文本后，仅删除字符', async () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <inline\n              key=\"link\"\n              type=\"link\"\n              data={{ href: 'https://www.dingtalk/com' }}\n            >\n              <cursor />\n            </inline>\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const output = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <cursor />\n            <inline\n              key=\"link\"\n              type=\"link\"\n              data={{ href: 'https://www.dingtalk/com' }}\n            ></inline>\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getHotkeyEvent('backspace')),\n    );\n\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getHotkeyEvent('backspace')),\n    );\n\n    const actual = controller.value.toJSON({ preserveSelections: true });\n    const expected = controller\n      .setValue(output)\n      .value.toJSON({ preserveSelections: true });\n    expect(actual).toEqual(expected);\n  });\n\n  test.skip('范围选中卡片进行复制，复制出 text/plain 为链接', async () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            测试测试测试测，\n            <inline\n              key=\"link\"\n              type=\"link\"\n              data={{ href: 'https://www.dingtalk.com', cardInfo: { displayType: 'card' } }}\n            >\n              <anchor />\n              试测试测试测试测试测试测试测\n              <focus />\n            </inline>\n            ，试测试测试测试测试\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    const link = controller.value.document.findDescendant(\n      (a) => Inline.isInline(a) && a.key === 'link',\n    ) as any;\n    const setData = jest.fn();\n    controller.run('onCopy', {\n      nativeEvent: {\n        clipboardData: {\n          setData,\n        },\n        preventDefault() { },\n      },\n    })\n\n    // 复制链接\n    expect(setData.mock.calls[1]).toEqual([\n      'text/html',\n      '<article class=\\\"4ever-article\\\" data-clipboard-cangjie=\\\"[&quot;root&quot;,{},[&quot;p&quot;,{},[&quot;a&quot;,{&quot;href&quot;:&quot;https://www.dingtalk.com&quot;,&quot;cardInfo&quot;:{&quot;displayType&quot;:&quot;card&quot;}},[&quot;span&quot;,{&quot;data-type&quot;:&quot;text&quot;},[&quot;span&quot;,{&quot;data-type&quot;:&quot;leaf&quot;},&quot;试测试测试测试测试测试测试测&quot;]]]]]\\\"><p style=\\\"text-align:left;text-indent:0;margin-left:0\\\"><a href=\\\"https://www.dingtalk.com\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><span>试测试测试测试测试测试测试测</span></a></p></article>'\n    ]);\n    // 复制 text/plain 为链接\n    expect(setData.mock.calls[3]).toEqual([\n      'text/plain',\n      'https://www.dingtalk.com'\n    ]);\n  });\n});\n\ndescribe('Bi/link/behaviour/insertLink', () => {\n  const isInsertLinkHotkey = isKeyHotkey('mod+k');\n  const createMobilePlugins = (text, href) => {\n    return [...plugins, {\n      onKeyDown: (event, controller, next) => {\n        if (isInsertLinkHotkey(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n          return controller.command('insertLink', text, href);\n        }\n        return next();\n      }\n    }];\n  };\n\n  test('插入链接的 href 为 undefined，无效果', () => {\n    const mobilePlugins = createMobilePlugins('dingtalk', undefined);\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            12345\n            <cursor />\n            67890\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getHotkeyEvent('mod+k')),\n    );\n\n    const actual = controller.value.toJSON({ preserveSelections: true });\n    const expected = controller\n      .setValue(value)\n      .value.toJSON({ preserveSelections: true });\n    expect(actual).toEqual(expected);\n  });\n\n  test('无选区插入链接', () => {\n    const mobilePlugins = createMobilePlugins('dingtalk', 'http://dingtalk.com/');\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            12345\n            <cursor />\n            67890\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const output = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            12345<inline type=\"link\" data={{ href: 'http://dingtalk.com/' }}>dingtalk</inline> <cursor />67890\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getHotkeyEvent('mod+k')),\n    );\n\n    const actual = controller.value.toJSON({ preserveSelections: true });\n    const expected = controller\n      .setValue(output)\n      .value.toJSON({ preserveSelections: true });\n    expect(actual).toEqual(expected);\n  });\n\n  test('有选区带标题插入链接', () => {\n    const mobilePlugins = createMobilePlugins('dingtalk', 'http://dingtalk.com/');\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            123\n            <anchor />\n            4567\n            <focus />\n            890\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const output = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            123<inline type=\"link\" data={{ href: 'http://dingtalk.com/' }}>dingtalk</inline> <cursor />890\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getHotkeyEvent('mod+k')),\n    );\n\n    const actual = controller.value.toJSON({ preserveSelections: true });\n    const expected = controller\n      .setValue(output)\n      .value.toJSON({ preserveSelections: true });\n    expect(actual).toEqual(expected);\n  });\n\n  test('有选区无标题插入链接', () => {\n    const mobilePlugins = createMobilePlugins('', 'http://dingtalk.com/');\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            123\n            <anchor />\n            4567\n            <focus />\n            890\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const output = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            123<inline type=\"link\" data={{ href: 'http://dingtalk.com/' }}>4567</inline> <cursor />890\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n    controller.run(\n      'onKeyDown',\n      // @ts-ignore\n      new KeyboardEvent('keydown', getHotkeyEvent('mod+k')),\n    );\n\n    const actual = controller.value.toJSON({ preserveSelections: true });\n    const expected = controller\n      .setValue(output)\n      .value.toJSON({ preserveSelections: true });\n    expect(actual).toEqual(expected);\n  });\n\n  test('复制卡片，text href', async () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            测试测试测试测，\n            <inline\n              key=\"link\"\n              type=\"link\"\n              data={{ href: 'https://www.dingtalk.com', cardInfo: { displayType: 'card' } }}\n            >\n              试测试测试测试测试测试测试测\n            </inline>\n            ，试测试测试测试测试\n            <cursor />\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    const link = controller.value.document.findDescendant(\n      (a) => Inline.isInline(a) && a.key === 'link',\n    ) as any;\n    ClipboardManager.mockClear();\n\n    controller.run('onAction', linkPlugin.actions.copyLink(link));\n    expect(mockWrite).toHaveBeenCalledTimes(1);\n    expect(mockWrite.mock.calls[0][0][constants.MIME_TYPES.TEXT]).toEqual('https://www.dingtalk.com');\n  });\n\n  test('非链接文本， shouldRenderContextMenu 返回 false, getSelectedLinkUrl 返回空串', () => {\n    const mobilePlugins = createMobilePlugins('dingtalk', undefined);\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            12345\n            <cursor />\n            67890\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n    expect(controller.query('shouldRenderContextMenu')).toBeFalsy();\n\n    const result = controller.query('getSelectedLinkUrl');\n\n    expect(result).toEqual('');\n  });\n\n  test('textLink， shouldRenderContextMenu 返回 true, getSelectedLinkUrl 返回 href', () => {\n    const mobilePlugins = createMobilePlugins('dingtalk', undefined);\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            测试测试测试测，\n            <inline\n              key=\"link\"\n              type=\"link\"\n              data={{ href: 'https://www.dingtalk.com' }}\n            >\n              试测试测试测\n              <cursor />\n              试测试测试测试测\n            </inline>\n            ，试测试测试测试测试\n\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n\n    expect(controller.query('shouldRenderContextMenu')).toBe(true);\n\n    const result = controller.query('getSelectedLinkUrl');\n\n    expect(result).toEqual('https://www.dingtalk.com');\n  });\n\n  test('pureLink， shouldRenderContextMenu 返回 true, getSelectedLinkUrl 返回 href', () => {\n    const mobilePlugins = createMobilePlugins('dingtalk', undefined);\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            https://www.ba<cursor />idu.com\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n\n    expect(controller.query('shouldRenderContextMenu')).toBe(true);\n\n    const result = controller.query('getSelectedLinkUrl');\n\n    expect(result).toEqual('https://www.baidu.com');\n  });\n\n  test('textLink， run contextMenu 可以返回 button', () => {\n    const mobilePlugins = createMobilePlugins('dingtalk', undefined);\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            测试测试测试测，\n            <inline\n              key=\"link\"\n              type=\"link\"\n              data={{ href: 'https://www.dingtalk.com' }}\n            >\n              试测试测试测\n              <cursor />\n              试测试测试测试测\n            </inline>\n            ，试测试测试测试测试\n\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n\n    const items = controller.run('contextMenu');\n    const linkItem = items.find(item => item.key === 'openLink');\n\n    expect(linkItem).toBeTruthy();\n\n    expect(linkItem.action.payload.href).toEqual('https://www.dingtalk.com');\n\n  });\n\n  test('pureLink， run contextMenu 可以返回 button', () => {\n    const mobilePlugins = createMobilePlugins('dingtalk', undefined);\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            https://www.ba<cursor />idu.com\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n\n    const items = controller.run('contextMenu');\n    const linkItem = items.find(item => item.key === 'openLink');\n\n    expect(linkItem).toBeTruthy();\n\n    expect(linkItem.action.payload.href).toEqual('https://www.baidu.com');\n\n  });\n\n  \n});\n\ndescribe('Bi/link/openlink', () => {\n\n  const openLink = jest.fn();\n  const openLink2 = jest.fn();\n  let spiedWindowOpen: jest.SpyInstance;\n  let spiedConsoleError: jest.SpyInstance;\n\n  beforeAll(() => {\n    // 防止被 componentDidCatch catch 的 error 被控制台输出\n    spiedConsoleError = jest.spyOn(console, 'error');\n    spiedConsoleError.mockImplementation(() => { });\n    spiedWindowOpen = jest.spyOn(window, 'open');\n    spiedWindowOpen.mockImplementation(openLink);\n  });\n\n  afterAll(() => {\n    spiedConsoleError.mockRestore();\n    spiedWindowOpen.mockRestore();\n  });\n\n  afterEach(() => {\n    cleanup();\n    openLink.mockReset();\n    openLink2.mockReset();\n  });\n\n  test('传入 openLink 方法时，运行 link open 调用传入方法', () => {\n    const mobilePlugins = createMobileBiPlugins({\n      link: {\n        locale: {},\n        openLink:openLink2\n      },\n      mention: {},\n    }).array;\n\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            https://www.ba<cursor />idu.com\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n\n    controller.run('onAction',{\n      type: LINK_OPEN,\n      payload: { href: 'https://www.baidu.com' }\n    });\n\n    expect(openLink2).toHaveBeenCalled();\n    expect(openLink).not.toHaveBeenCalled();\n\n  });\n\n  test('未传入 openLink 方法时，运行 window.open 方法', () => {\n    const mobilePlugins = createMobileBiPlugins({\n      link: {\n        locale: {},\n      },\n      mention: {},\n    }).array;\n\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            https://www.ba<cursor />idu.com\n          </block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n\n    const controller = Controller.create({\n      value,\n      plugins: mobilePlugins,\n    });\n\n    controller.run('onAction',{\n      type: LINK_OPEN,\n      payload: { href: 'https://www.baidu.com' }\n    });\n\n    expect(openLink).toHaveBeenCalled();\n\n  });\n});\n"],"file":"mobile.behaviour.test.js"}