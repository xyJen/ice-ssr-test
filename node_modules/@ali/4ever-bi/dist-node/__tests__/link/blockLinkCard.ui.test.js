"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var React = _interopRequireWildcard(require("react"));

var _link = _interopRequireDefault(require("../../plugins/link"));

var _linkCard = _interopRequireDefault(require("../../plugins/link/linkCard"));

var _ = require("../..");

var _zh_CN = _interopRequireDefault(require("../../locales/zh_CN"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  link: _link.default,
  linkCard: _linkCard.default
});
const LOCALE = _zh_CN.default.link.locale;
const createRangeDescriptor = Object.getOwnPropertyDescriptor(document, 'createRange');
beforeAll(() => {
  Object.defineProperty(document, 'createRange', {
    configurable: true,

    value() {
      const range = createRangeDescriptor ? createRangeDescriptor.value() : {};
      return { ...range,

        getClientRects() {
          return [{
            width: 100,
            height: 60,
            top: 100,
            right: 200,
            left: 200,
            bottom: 400
          }];
        }

      };
    }

  });
});
afterAll(() => {
  Object.defineProperty(document, 'createRange', createRangeDescriptor || {
    value() {
      return {};
    }

  });
});

var _ref = (0, _everDevTest.jsx)("cursor", null);

const createTextLink = (text = 'DingTalk', href = 'https://www.dingtalk.com', prefix = ' ', suffix = ' ') => {
  const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, prefix, (0, _everDevTest.jsx)("inline", {
    key: "link",
    type: "link",
    data: {
      href
    }
  }, text), suffix, _ref)));
  return value;
};

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

const createLinkCard = (text = 'DingTalk', href = 'https://www.dingtalk.com') => {
  const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "card",
    data: {
      cardType: 'link',
      height: 88,
      metadata: {
        href,
        text,
        cardInfo: {
          title: 'test'
        }
      }
    }
  }), _ref2));
  return value;
};

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

const createPureLink = (href = 'https://www.dingtalk.com', prefix = 'before', suffix = 'after') => {
  const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, `${prefix} ${href} ${suffix}`, _ref3)));
  return value;
};

var _ref4 = (0, _everDevTest.jsx)(_.Content, {
  tabIndex: 0
});

const Editor = props => {
  const {
    defaultValue,
    linkConfig = {}
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    const config = {
      getLinkInfo: () => Promise.resolve({}),
      enableCard: true,
      hotkey: 'mod+k',
      locale: { ...LOCALE
      },
      enableLinkCardBlock: true,
      protocolAllowList: ['xxx:', 'http:', 'https:'],
      ...linkConfig
    };
    return createBiPlugins({
      link: config
    });
  }, [linkConfig]);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_.Provider, {
    plugins: plugins,
    value: value,
    onChange: handleChange,
    autoFocus: true
  }, (0, _everDevTest.jsx)(_.Toolbar, {
    autoFolding: false,
    singleLayout: [{
      toolButtons: [{
        name: 'link'
      }]
    }]
  }), _ref4);
};

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "12", (0, _everDevTest.jsx)("anchor", null), "34567", (0, _everDevTest.jsx)("focus", null), "890")));

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

var _ref9 = (0, _everDevTest.jsx)("cursor", null);

var _ref10 = (0, _everDevTest.jsx)("cursor", null);

describe('bi/link/ui', () => {
  const openLink = jest.fn();
  let spiedWindowOpen;
  let spiedConsoleError;
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    spiedConsoleError = jest.spyOn(console, 'error');
    spiedConsoleError.mockImplementation(() => {});
    spiedWindowOpen = jest.spyOn(window, 'open');
    spiedWindowOpen.mockImplementation(openLink);
  });
  afterAll(() => {
    spiedConsoleError.mockRestore();
    spiedWindowOpen.mockRestore();
  });
  afterEach(() => {
    (0, _react.cleanup)();
    openLink.mockReset();
  });
  describe('插入链接', () => {
    const initValue = _ref5;
    const initValueWithSelection = _ref6;

    var _ref7 = (0, _everDevTest.jsx)(Editor, {
      defaultValue: initValue
    });

    test('快捷键插入空链接，保存为卡片', async () => {
      const {
        queryByTestId,
        editor,
        queryByText
      } = await (0, _everDevTest.renderEditor)(_ref7);

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('mod+k'));

      const linkEditor = await (0, _react.waitFor)(() => queryByTestId('link-editor'));
      const textInput = await (0, _react.waitFor)(() => queryByTestId('link-editor-input-text'));
      const hrefInput = await (0, _react.waitFor)(() => queryByTestId('link-editor-input-href'));
      const button = await (0, _react.waitFor)(() => queryByText('卡片'));
      const save = await (0, _react.waitFor)(() => queryByTestId('link-editor-save'));

      _everDevTest.fireEvent.click(button);

      _everDevTest.fireEvent.inputChange(textInput, '谷歌');

      _everDevTest.fireEvent.inputChange(hrefInput, 'https://www.baidu.com');

      _everDevTest.fireEvent.click(save);

      const card = (0, _react.waitFor)(() => editor.querySelector('[data-testid="link"][data-type="card"]'));
      expect(card).toBeTruthy();
    });
    test('点击链接后无 schema link，跳转页面', async () => {
      const {
        findByTestId,
        content,
        debug
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: createLinkCard('DingTalk', 'www.dingtalk.com')
      }));
      const card = await findByTestId('link-card');
      const link = await (0, _react.waitFor)(() => card.querySelector('.card-layout-title'));

      _everDevTest.fireEvent.click(link);

      expect(openLink).toBeCalledWith('http://www.dingtalk.com');
    });
  });
  describe('链接转卡片', () => {
    const blankValue = _ref8;
    test('textLink 切换到 block', async () => {
      const {
        queryByTestId,
        debug,
        content,
        container,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: createTextLink('DingTalk', 'https://www.dingtalk.com', 'aaa')
      }));
      const link = await (0, _react.waitFor)(() => queryByTestId('link'));

      _everDevTest.fireEvent.mouseOver(link);

      const switcher = await findByTestId('submenu-link-toolbar-switch');

      _everDevTest.fireEvent.click(switcher);

      const switchCard = await findByTestId('link-toolbar-switch-card');

      _everDevTest.fireEvent.click(switchCard);

      const card = await findByTestId('link-card');
      expect(card).toBeTruthy();
    });
    test('pureLink 切换到 block', async () => {
      const {
        queryByTestId,
        findByTestId,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: createPureLink('DingTalk', 'https://www.dingtalk.com', 'aaa')
      }));
      const link = await (0, _react.waitFor)(() => queryByTestId('pure-link'));

      _everDevTest.fireEvent.mouseOver(link);

      const switcher = await findByTestId('submenu-link-toolbar-switch');

      _everDevTest.fireEvent.click(switcher);

      const switchCard = await findByTestId('link-toolbar-switch-card');

      _everDevTest.fireEvent.click(switchCard);

      const card = await findByTestId('link-card');
      expect(card).toBeTruthy();
    });
    test('block 切换到 textLink', async () => {
      const {
        queryByTestId,
        findByTestId,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: createLinkCard('DingTalk', 'https://www.dingtalk.com')
      }));
      const card = await findByTestId('link-card');

      _everDevTest.fireEvent.mouseOver(card);

      const switcher = await findByTestId('submenu-link-toolbar-switch');

      _everDevTest.fireEvent.click(switcher);

      const switchLink = await findByTestId('link-toolbar-switch-link');

      _everDevTest.fireEvent.click(switchLink);

      await (0, _react.waitForElementToBeRemoved)(() => content.querySelector('[data-testid="link"][data-type="card"]'));
      const link = await (0, _react.waitFor)(() => queryByTestId('link'));
      expect(card).toBeTruthy();
    });
  });
  describe('删除链接', () => {
    test('向前删除', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'link',
          height: 88,
          metadata: {
            href: 'http://www.baidu.com',
            text: 'dingtalk',
            cardInfo: {}
          }
        }
      }), _ref9));
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      await (0, _react.waitForElement)(() => queryByTestId('link-card')); // 第一次选中，第二次删除

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.deleteBackward));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.deleteBackward));

      await (0, _react.waitForElementToBeRemoved)(() => queryByTestId('link-card'));
    });
    test('向后删除', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref10, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'link',
          height: 88,
          metadata: {
            href: 'http://www.baidu.com',
            text: 'DingTalk',
            cardInfo: {}
          }
        }
      })));
      const {
        queryByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      await (0, _react.waitForElement)(() => queryByTestId('link-card')); // 第一次选中，第二次删除

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.deleteForward));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.deleteForward));

      await (0, _react.waitForElementToBeRemoved)(() => queryByTestId('link-card'));
    });
  });
});
//# sourceMappingURL=blockLinkCard.ui.test.js.map