"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _mockfile = _interopRequireDefault(require("./mockfile"));

var _clipboardManager = _interopRequireDefault(require("@ali/clipboard-manager"));

require("@testing-library/jest-dom/extend-expect");

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _link = _interopRequireDefault(require("../../plugins/link"));

var _linkCard = _interopRequireDefault(require("../../plugins/link/linkCard"));

var _everMo = require("@ali/4ever-mo");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
jest.mock('@ali/clipboard-manager', () => {
  return jest.fn().mockImplementation(() => {
    return {
      write: _mockfile.default
    };
  });
});
const plugins = (0, _createBiPlugins.default)({
  link: {
    locale: {
      addLinkPlaceholder: 'addLinkPlaceholder'
    }
  }
}).array;
const pluginsDisablePurelink = (0, _createBiPlugins.default)({
  link: {
    locale: {
      addLinkPlaceholder: 'addLinkPlaceholder'
    },
    disableTextRecognize: true
  }
}).array;
const pluginsBlockLinkCard = (0, _createBiPlugins.default)({
  link: {
    locale: {
      addLinkPlaceholder: 'addLinkPlaceholder'
    },
    enableLinkCardBlock: true
  }
}).array;
jest.useFakeTimers();
afterEach(() => {
  _clipboardManager.default.mockClear();

  _mockfile.default.mockClear();
});

var _ref = (0, _everDevTest.jsx)("cursor", null);

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref5 = (0, _everDevTest.jsx)("cursor", null);

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref7 = (0, _everDevTest.jsx)("cursor", null);

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null))));

var _ref9 = (0, _everDevTest.jsx)("anchor", null);

var _ref10 = (0, _everDevTest.jsx)("focus", null);

var _ref11 = (0, _everDevTest.jsx)("cursor", null);

var _ref12 = (0, _everDevTest.jsx)("focus", null);

var _ref13 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("m", {
  type: "unlink"
}, "https://www.dingtalk.com"))));

var _ref14 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", (0, _everDevTest.jsx)("cursor", null), "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

var _ref15 = (0, _everDevTest.jsx)("cursor", null);

var _ref16 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "a"
}, "http://www.baidu.com"))));

var _ref17 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "a"
}, "http://www.baidu.com"))));

var _ref18 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "a"
}, "http://www.baidu.com"))));

var _ref19 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "a"
}, "http://www.baidu.com"))));

var _ref20 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", {
  key: "a"
}, "http://www.baidu.com"))));

var _ref21 = (0, _everDevTest.jsx)("cursor", null);

var _ref22 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("text", null, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B"), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5", (0, _everDevTest.jsx)("cursor", null))));

var _ref23 = (0, _everDevTest.jsx)("cursor", null);

var _ref24 = (0, _everDevTest.jsx)("cursor", null);

var _ref25 = (0, _everDevTest.jsx)("cursor", null);

var _ref26 = (0, _everDevTest.jsx)("cursor", null);

var _ref27 = (0, _everDevTest.jsx)("cursor", null);

var _ref28 = (0, _everDevTest.jsx)("cursor", null);

var _ref29 = (0, _everDevTest.jsx)("cursor", null);

var _ref30 = (0, _everDevTest.jsx)("cursor", null);

var _ref31 = (0, _everDevTest.jsx)("cursor", null);

var _ref32 = (0, _everDevTest.jsx)("cursor", null);

var _ref33 = (0, _everDevTest.jsx)("cursor", null);

var _ref34 = (0, _everDevTest.jsx)("cursor", null);

var _ref35 = (0, _everDevTest.jsx)("cursor", null);

var _ref36 = (0, _everDevTest.jsx)("cursor", null);

var _ref37 = (0, _everDevTest.jsx)("cursor", null);

var _ref38 = (0, _everDevTest.jsx)("cursor", null);

var _ref39 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

var _ref40 = (0, _everDevTest.jsx)("cursor", null);

var _ref41 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
})));

describe('Bi/link/behaviour', () => {
  test('在链接尾部退格，且已经到达链接顶部，删除单个字符', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "link"), _ref)));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "lin"), _ref2)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('在链接尾部退格，且链接是 placeholder，删除链接节点', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      type: "link",
      data: {
        href: ''
      }
    }, "addLinkPlaceholder"), _ref3)));
    const output = _ref4;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('在链接尾部退格，且链接仅一个字符，删除链接节点', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "l"), _ref5)));
    const output = _ref6;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('当链接文本为空时，向前删除文本后，需要删除链接', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk/com'
      }
    }, _ref7))));
    const output = _ref8;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onKeyDown', // @ts-ignore
    new KeyboardEvent('keydown', (0, _everDevTest.getHotkeyEvent)('backspace')));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('支持 unwrap 链接的部分', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "one", _ref9, (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk/com'
      }
    }, "two", _ref10, "three"))));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "onetwo", _ref11, (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk/com'
      }
    }, "three"))));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', _link.default.actions.unwrapLink());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('unwrap 链接,如果 text 部分也是链接，则添加 mark', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk111/com'
      }
    }, "https://www.ding", _ref12, "talk.com"))));
    const output = _ref13;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.unwrapLinkCard(link));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('闭合选区中插入链接，选中选区附近文字（交互参考word）', async () => {
    const value = _ref14;
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: ''
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref15), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.run('onAction', _link.default.actions.wrapLink());
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('链接中有图片时修改链接地址', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "link", (0, _everDevTest.jsx)("inline", {
      type: "image",
      key: "image",
      data: {
        src: 'https://cn.bing.com/az/hprichbg/rb/TeslaCoil_EN-CN1604235004_1920x1080.jpg'
      }
    }), "link"), "\u6D4B\u8BD5\u6D4B\u8BD5")));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com/233'
      }
    }, "link", (0, _everDevTest.jsx)("inline", {
      type: "image",
      key: "image",
      data: {
        src: 'https://cn.bing.com/az/hprichbg/rb/TeslaCoil_EN-CN1604235004_1920x1080.jpg'
      }
    }), "link"), "\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const inline = controller.value.document.findDescendant(a => a.isElement() && a.type === 'link');
    controller.run('onAction', _link.default.actions.updateLink(inline, '', 'https://www.dingtalk.com/233'));
    const actual = controller.value.document.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.document.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('pureLink 更新文本和链接，转为 textlink', async () => {
    const value = _ref16;
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      key: "a",
      type: "link",
      data: {
        href: 'http://www.baidu'
      }
    }, "\u4F60\u597D"))));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const purelink = controller.value.document.findDescendant(a => a.isText() && a.key === 'a');
    controller.run('onAction', _link.default.actions.updatePureLink(purelink, 0, '你好', 'http://www.baidu', 'http://www.baidu.com'));
    const actual = controller.value.document.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.document.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('pureLink 仅更新链接, 转为 文本为 href 的 textlink', async () => {
    const value = _ref17;
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      key: "a",
      type: "link",
      data: {
        href: 'http://www.baidu'
      }
    }, "http://www.baidu"))));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const purelink = controller.value.document.findDescendant(a => a.isText() && a.key === 'a');
    controller.run('onAction', _link.default.actions.updatePureLink(purelink, 0, '', 'http://www.baidu', 'http://www.baidu.com'));
    const actual = controller.value.document.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.document.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('pureLink 仅更新文本, 转为 文本为 href 的 textlink', async () => {
    const value = _ref18;
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      key: "a",
      type: "link",
      data: {
        href: 'http://www.baidu.com'
      }
    }, "test"))));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const purelink = controller.value.document.findDescendant(a => a.isText() && a.key === 'a');
    controller.run('onAction', _link.default.actions.updatePureLink(purelink, 0, 'test', 'http://www.baidu.com', 'http://www.baidu.com'));
    const actual = controller.value.document.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.document.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('设置 disableTextRecognize，不会生成 marks', async () => {
    const value = _ref19;

    const controller = _everCangjie.Controller.create({
      value,
      plugins: pluginsDisablePurelink
    });

    const maybyPurelink = controller.view.findDescendant(a => a.isText() && a.key === 'a');
    expect(maybyPurelink.marks.length).toEqual(0);
  });
  test('未设置 disableTextRecognize，生成对应 marks', async () => {
    const value = _ref20;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const maybyPurelink = controller.view.findDescendant(a => a.isText() && a.key === 'a');
    expect(maybyPurelink.marks[0]?.type).toEqual('link');
    expect(maybyPurelink.marks[0]?.data?.href).toEqual('http://www.baidu.com');
    expect(maybyPurelink.marks[0]?.data?.offsetInNode).toEqual(0);
  });
  test('卡片取消链接，转换为文本', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B"), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5", _ref21)));
    const output = _ref22;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.unwrapLinkCard(link));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('链接切换为卡片, 替换对应 displayType 为 card', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref23), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref24), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.switchDisplayType(link, 'card'));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('卡片更新 href 信息', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref25), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.baidu.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref26), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.updateLinkWithCardInfo(link, '试测试测试测试测试测试测试测', 'https://www.baidu.com', {
      displayType: 'card'
    }));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('卡片更新 data 信息，data 有效', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref27), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card',
          title: 'xxx'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref28), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.updateLinkWithCardInfo(link, '试测试测试测试测试测试测试测', 'https://www.dingtalk.com', {
      title: 'xxx',
      displayType: 'card'
    }));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('卡片更新 data 信息，data 为 {}', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref29), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {}
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref30), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.updateLinkWithCardInfo(link, '试测试测试测试测试测试测试测', 'https://www.dingtalk.com', {}));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('卡片更新 text 信息, text 有效', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref31), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "foo", _ref32), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.updateLinkWithCardInfo(link, 'foo', 'https://www.dingtalk.com', {
      displayType: 'card'
    }));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('卡片更新 text 信息，text 为空字符串', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B", _ref33), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "https://www.dingtalk.com", _ref34), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5")));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.updateLinkWithCardInfo(link, '', 'https://www.dingtalk.com', {
      displayType: 'card'
    }));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('复制卡片，text href', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B"), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5", _ref35)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.copyLink(link));
    expect(_mockfile.default).toHaveBeenCalledTimes(1);
    expect(_mockfile.default.mock.calls[0][0][_everCangjie.constants.MIME_TYPES.TEXT]).toEqual('https://www.dingtalk.com');
  });
  test('列表内，复制卡片，不带列表序号', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          listStyle: {
            format: 'bullet',
            text: '\u25cf',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B"), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5", _ref36)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.copyLink(link));
    expect(_mockfile.default).toHaveBeenCalledTimes(1);
    expect(_mockfile.default.mock.calls[0][0][_everCangjie.constants.MIME_TYPES.HTML].includes('<li>')).toBeFalsy();
  });
  test('列表内，复制链接，不带列表序号', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          listStyle: {
            format: 'bullet',
            text: '\u25cf',
            align: 'left'
          },
          listStyleType: 'SCIR_ECIR_SREC'
        }
      }
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com'
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B"), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5", _ref37)));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.copyLink(link));
    expect(_mockfile.default).toHaveBeenCalledTimes(1);
    expect(_mockfile.default.mock.calls[0][0][_everCangjie.constants.MIME_TYPES.HTML].includes('<li>')).toBeFalsy();
  });
  test('剪切卡片，text href', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\uFF0C", (0, _everDevTest.jsx)("inline", {
      key: "link",
      type: "link",
      data: {
        href: 'https://www.dingtalk.com',
        cardInfo: {
          displayType: 'card'
        }
      }
    }, "\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B"), "\uFF0C\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5", _ref38)));
    const output = _ref39;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everCangjie.Inline.isInline(a) && a.key === 'link');
    controller.run('onAction', _link.default.actions.cutLink(link));
    expect(_mockfile.default).toHaveBeenCalledTimes(1);
    expect(_mockfile.default.mock.calls[0][0][_everCangjie.constants.MIME_TYPES.TEXT]).toEqual('https://www.dingtalk.com');
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('删除 Block 卡片，留下空行', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "card",
      data: {
        cardType: 'link',
        height: 88,
        metadata: {
          href: 'www.baidu.com',
          text: '123',
          cardInfo: {
            title: 'test'
          }
        }
      }
    }), _ref40));
    const output = _ref41;

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const link = controller.value.document.findDescendant(a => _everMo.Card.isCard(a) && a.data.cardType === 'link');
    controller.run('onAction', _linkCard.default.actions.deleteBlockLinkCard(link));
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
});
//# sourceMappingURL=behaviour.test.js.map