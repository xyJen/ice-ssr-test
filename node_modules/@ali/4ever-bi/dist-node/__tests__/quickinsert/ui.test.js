"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

require("@testing-library/jest-dom/extend-expect");

var _react2 = require("@testing-library/react");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

var _serializer = _interopRequireDefault(require("../serializer"));

var _ = require("../..");

var _quickInsert = _interopRequireDefault(require("../../plugins/quickInsert"));

var _mention = _interopRequireDefault(require("../../plugins/mention"));

var _actions = require("../../plugins/quickInsert/actions");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

/* eslint-disable no-console */

/* eslint-disable import/no-extraneous-dependencies */
const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement("span", null, "\u94FE\u63A5\u56FE\u6807");

const renderLinkIcon = jest.fn(() => _ref);

var _ref2 = /*#__PURE__*/_createElement("span", null, "\u94FE\u63A5\u9762\u677F");

const renderLinkPanel = jest.fn(({
  close,
  editor
}) => {
  return /*#__PURE__*/_createElement("div", null, _ref2, /*#__PURE__*/_createElement("button", {
    type: "button",
    onClick: () => close(editor)
  }, "\u5173\u95ED"));
});

var _ref3 = /*#__PURE__*/_createElement("span", null, "mention\u56FE\u6807");

const renderMentionIcon = jest.fn(() => _ref3);

var _ref4 = /*#__PURE__*/_createElement("span", null, "mention\u9762\u677F");

const renderMentionPanel = jest.fn(() => _ref4);

var _ref5 = /*#__PURE__*/_createElement("span", null, "\u88AB\u7981\u7528\u7684\u63D2\u5165\u56FE\u6807");

const renderDisabledInsertIcon = jest.fn(() => _ref5);

var _ref6 = /*#__PURE__*/_createElement("span", null, "\u88AB\u7981\u7528\u7684\u63D2\u5165\u9762\u677F");

const renderDisabledInsertPanel = jest.fn(() => _ref6);

const Bomb = () => {
  throw new Error('Crashed!');
};

function createLinkPlugin() {
  return {
    onAction: (action, controller, next) => {
      const {
        type,
        payload
      } = action;

      if (type === _actions.QUICK_INSERT_SET && payload.plugin === 'link') {
        controller.command(_everCangjie.Commands.insertText, ':');
      }

      return next();
    },
    quickInsert: {
      renderIcon: renderLinkIcon,
      renderPanel: renderLinkPanel
    }
  };
}

function createDisabledInsertPlugin() {
  return {
    quickInsert: {
      renderIcon: renderDisabledInsertIcon,
      renderPanel: renderDisabledInsertPanel
    }
  };
}

function createMentionPlugin(configs) {
  return { ...(0, _mention.default)(configs),
    onAction: (action, controller, next) => {
      const {
        type,
        payload
      } = action;

      if (type === _actions.QUICK_INSERT_SET && payload.plugin === 'mention') {
        controller.command(_everCangjie.Commands.insertText, '@');
      }

      next();
    },
    quickInsert: {
      onMenuClick: controller => controller.run('onAction', (0, _actions.insertQuickInsert)('mention')),
      renderIcon: renderMentionIcon,
      renderPanel: renderMentionPanel
    }
  };
}

var _ref7 = /*#__PURE__*/_createElement("span", null, "\u5F02\u5E38\u63D2\u5165");

var _ref8 = /*#__PURE__*/_createElement(Bomb, null);

function createErrorPlugin() {
  return {
    quickInsert: {
      renderIcon: () => _ref7,
      renderPanel: () => {
        return _ref8;
      }
    }
  };
}

const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  link: createLinkPlugin,
  disabledInsert: createDisabledInsertPlugin,
  mention: createMentionPlugin,
  error: createErrorPlugin,
  quickInsert: _quickInsert.default
});

var _ref9 = /*#__PURE__*/_createElement(_content.default, {
  tabIndex: 0
});

const Editor = props => {
  const {
    quickInsertConfig = {},
    defaultValue,
    withToolbar = true
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    const config = {
      triggers: {
        ':': 'link'
      },
      groups: [{
        title: '默认',
        key: 'default',
        items: ['link']
      }],
      locale: {
        buttonTitle: '快捷插入'
      },
      ...quickInsertConfig
    };
    return createBiPlugins({
      quickInsert: config,
      disabledInsert: {
        locale: {
          quickInsertTitle: 'disabled'
        }
      },
      link: {
        locale: {
          quickInsertTitle: 'link'
        }
      },
      error: {
        locale: {
          quickInsertTitle: 'error'
        }
      },
      mention: {
        locale: {
          quickInsertTitle: 'mention'
        }
      }
    });
  }, [quickInsertConfig]);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return /*#__PURE__*/_createElement(_provider.default, {
    plugins: plugins,
    value: value,
    onChange: handleChange
  }, withToolbar && /*#__PURE__*/_createElement(_.Toolbar, {
    autoFolding: false,
    singleLayout: [{
      toolButtons: [{
        name: 'quickInsert'
      }]
    }]
  }), _ref9);
};

jest.setTimeout(3000);
describe('Bi/quickInsert/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  beforeEach(() => {
    document.body.innerHTML = '';
    jest.clearAllMocks();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  test('支持按键呼出快捷插入', async () => {
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue('')
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));
    await (0, _react2.waitForElement)(() => queryByText(/链接面板/));
  });
  test('支持按下 ESC 关闭快捷插入', async () => {
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue('')
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('esc'));

    await (0, _react2.waitForElementToBeRemoved)(() => queryByText(/链接图标/));
  });
  test('支持在文本中段可以呼出快捷插入', async () => {
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue('')
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: 'prefix'
    });

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));
  });
  test('在快捷插入起始位置退格时，关闭快捷输入', async () => {
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue('')
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: 'prefix'
    });

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

    await (0, _react2.waitForElementToBeRemoved)(() => queryByText(/链接图标/));
  });
  test('在段落起始位置退格，能关闭快捷输入', async () => {
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue('')
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

    await (0, _react2.waitForElementToBeRemoved)(() => queryByText(/链接图标/));
  });
  test.skip('支持为不同的插入配置不同的呼出键位', async () => {
    const config = {
      triggers: {
        ':': 'link',
        '@': 'mention'
      },
      groups: [{
        title: '默认',
        key: 'default',
        items: ['link', 'mention']
      }]
    };
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue(''),
      quickInsertConfig: config
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接面板/));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('esc'));

    await (0, _react2.waitForElementToBeRemoved)(() => queryByText(/链接面板/));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: '@'
    });

    await (0, _react2.waitForElement)(() => queryByText(/mention面板/));
  });
  test('预设的插入分组为空时，不响应呼出', async () => {
    const config = {
      groups: []
    };
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue(''),
      quickInsertConfig: config
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/^:$/));
    expect(queryByText(/链接图标/)).not.toBeInTheDocument();
  });
  test('支持分组与分组切换', async () => {
    const config = {
      triggers: {
        ':': 'link',
        '@': 'mention'
      },
      groups: [{
        title: '默认',
        key: 'default',
        items: ['link', 'mention']
      }]
    };
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue(''),
      quickInsertConfig: config
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));

    _everDevTest.fireEvent.click(queryByText(/mention图标/));

    await (0, _react2.waitForElement)(() => queryByText(/mention面板/));
  });
  test('禁用某个插入时，若呼出该插入，则渲染禁用面板', async () => {
    const config = {
      triggers: {
        '@': 'mention',
        ':': 'disabledInsert'
      },
      groups: [{
        title: '默认',
        key: 'default',
        items: [{
          key: 'disabledInsert',
          disabled: () => true
        }, 'mention']
      }]
    };
    const {
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue('x'),
      quickInsertConfig: config
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByTestId('quick-insert-forbidden'));
  });
  test('禁用某个插入时，此时呼出其他插入，则被禁用插入不可点击', async () => {
    const config = {
      triggers: {
        ':': 'link',
        '@': 'disabledInsert'
      },
      groups: [{
        title: '默认',
        key: 'default',
        items: [{
          key: 'disabledInsert',
          disbled: () => true
        }, 'link']
      }]
    };
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue(''),
      quickInsertConfig: config
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));
    expect(queryByText(/链接面板/)).toBeInTheDocument();

    _everDevTest.fireEvent.click(queryByText(/被禁用的插入图标/));

    expect(queryByText(/被禁用的插入面板/)).not.toBeInTheDocument();
  });
  test('忽略无效的插入项目', async () => {
    const config = {
      triggers: {
        '@': 'mention',
        ':': 'link',
        '/': 'undefined'
      },
      groups: [{
        title: '默认分组',
        key: 'default',
        items: ['wrong', 'mention', 'link']
      }]
    };
    const {
      queryAllByTestId,
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue(''),
      quickInsertConfig: config
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));
    expect(queryAllByTestId('group-item')).toHaveLength(2);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('esc'));

    await (0, _react2.waitForElementToBeRemoved)(() => queryByText(/链接面板/));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: '/'
    });

    await (0, _react2.wait)();
    await (0, _react2.waitForElement)(() => queryByText(/^:\/$/));
    expect(queryByText(/链接面板/)).not.toBeInTheDocument();
  });
  test('支持自定义 icon 渲染', async () => {
    const config = {
      groups: [{
        title: '默认',
        key: 'default',
        items: [{
          key: 'disabledInsert',
          disabled: () => true
        }, 'link']
      }]
    };
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue(''),
      quickInsertConfig: config,
      withToolbar: false
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));
    expect(renderLinkIcon).toBeCalledTimes(1);
    expect(renderLinkIcon).toBeCalledWith({
      disabled: false,
      actived: true
    });
    expect(renderDisabledInsertIcon).toBeCalledTimes(1);
    expect(renderDisabledInsertIcon).toBeCalledWith({
      disabled: true,
      actived: false
    });
  }); // @TODO 雁以 功能正常，暂不修复

  test.skip('支持自定义 panel 渲染', async () => {
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue('')
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));
    expect(renderLinkPanel).toBeCalledWith(expect.objectContaining({
      text: ':'
    }));
  });
  test('支持手动关闭插入面板', async () => {
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue('')
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    const closeButton = await (0, _react2.waitForElement)(() => queryByText(/关闭/));

    _everDevTest.fireEvent.click(closeButton);

    await (0, _react2.waitForElementToBeRemoved)(() => queryByText(/链接面板/));
  });
  test('插入面板渲染异常时，展示异常消息', async () => {
    const config = {
      groups: [{
        title: '默认',
        key: 'default',
        items: ['link', 'error']
      }]
    };
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue(''),
      quickInsertConfig: config
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    const errorIcon = await (0, _react2.waitForElement)(() => queryByText(/异常插入/));

    _everDevTest.fireEvent.click(errorIcon);

    await (0, _react2.waitForElement)(() => queryByText(/Crashed/));
  });
  test.skip('若已经呼出快捷输入，再尝试以同一个 trigger 呼出，则重新展开快捷输入', async () => {
    const config = {
      triggers: {
        ':': 'link',
        '@': 'mention'
      },
      groups: [{
        title: '默认',
        key: 'default',
        items: ['link', 'mention']
      }]
    };
    const {
      queryByText,
      editor,
      content
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue(''),
      quickInsertConfig: config
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => content.textContent === '::');
  });
  test.skip('若已经呼出快捷输入，再尝试以不同的 trigger 呼出，则忽略该 trigger', async () => {
    const config = {
      triggers: {
        ':': 'link',
        '@': 'mention'
      },
      groups: [{
        title: '默认',
        key: 'default',
        items: ['link', 'mention']
      }]
    };
    const {
      queryByText,
      editor
    } = await (0, _everDevTest.renderEditor)( /*#__PURE__*/_createElement(Editor, {
      defaultValue: _serializer.default.textToValue(''),
      quickInsertConfig: config
    }));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: ':'
    });

    await (0, _react2.waitForElement)(() => queryByText(/链接图标/));

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: '@'
    });

    await (0, _react2.waitForElement)(() => queryByText(/:@/));
    expect(queryByText(/mention面板/)).not.toBeInTheDocument();
  });
});
//# sourceMappingURL=ui.test.js.map