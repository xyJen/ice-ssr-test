"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sleep = sleep;

var React = _interopRequireWildcard(require("react"));

var _react2 = require("@testing-library/react");

var _serializer = _interopRequireDefault(require("../serializer"));

var _everMo = require("@ali/4ever-mo");

var _editor = _interopRequireWildcard(require("../editor"));

var _everDevTest = require("@ali/4ever-dev-test");

var _helper = require("../helper");

var _fitRotate = _interopRequireDefault(require("../../plugins/image/utils/fitRotate"));

var _filterImageData = _interopRequireDefault(require("../../plugins/image/utils/filterImageData"));

var _filterImages = require("../../plugins/image/utils/filterImages");

var _utils = require("../../plugins/image/utils");

var _utils2 = require("./utils");

var _weDesignNext = require("@ali/we-design-next");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
let origin_value;
beforeAll(() => {
  origin_value = process.env.RUNTIME_ENV;
  process.env.RUNTIME_ENV = _weDesignNext.ToolbarLayout.UITEST_FLAG;
});
afterAll(() => {
  process.env.RUNTIME_ENV = origin_value;
});
Object.defineProperty(_editor.imageConfig, 'previewImage', {
  get() {
    (0, _editor.imagePreviewMockFn)();
    return _editor.imagePreviewMockFn;
  }

});

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const IMAGE_URL = 'https://cn.bing.com/az/hprichbg/rb/TeslaCoil_EN-CN1604235004_1920x1080.jpg';
const NESW = 'nesw-resize';
const NWSE = 'nwse-resize';
const NS = 'ns-resize';
const EW = 'ew-resize';
const _Image = global.Image;
const _URL = global.URL;

const value = _serializer.default.jsonMLToValue(['root', {}, ['p', ['img', {
  src: IMAGE_URL,
  width: 1920,
  height: 1080,
  opacity: 0.5,
  outline: {
    width: 1,
    type: 'solid',
    color: '#002060'
  },
  type: 'jpg'
}]]]);

const complexValue = _serializer.default.jsonMLToValue(['root', {}, ['p', ['img', {
  src: IMAGE_URL,
  width: 1000,
  height: 800,
  opacity: 0.5,
  outline: {
    width: 6,
    type: 'solid',
    color: '#002060'
  },
  rectClip: {
    left: 900,
    right: 20,
    top: 200,
    bottom: 80
  },
  type: 'jpg'
}]]]);

const fitRotateTest = [{
  before: 89,
  after: 90
}, {
  before: 91,
  after: 90
}, {
  before: 60,
  after: 60
}];
const resizeCursorTest = [{
  before: -22.5,
  after: NS
}, {
  before: 22.5,
  after: NESW
}, {
  before: 77.5,
  after: EW
}, {
  before: 122.5,
  after: NWSE
}];
const filterDataTest = [{
  before: {
    src: 'xxx',
    width: 300,
    height: 100,
    rectClip: {
      left: 20,
      right: 30,
      top: 40
    },
    outline: {
      width: 2,
      type: 'solid',
      color: 'red'
    },
    radius: 8,
    shadow: 'xxx',
    rotation: 30
  },
  after: {
    src: 'xxx',
    width: 350,
    height: 140,
    radius: 8
  },
  list: ['rectClip', 'rotation', 'outline', 'shadow']
}, {
  before: {
    src: 'xxx',
    width: 300,
    height: 100,
    rectClip: {
      left: 20,
      right: 30,
      top: 40
    },
    outline: {
      width: 2,
      type: 'solid',
      color: 'red'
    },
    shadow: 'xxx'
  },
  after: {
    src: 'xxx',
    width: 300,
    height: 100,
    rectClip: {
      left: 20,
      right: 30,
      top: 40
    }
  },
  list: ['shadow', 'outline']
}];

var _ref = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: value
});

var _ref2 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: value
});

var _ref3 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: value
});

var _ref4 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: complexValue
});

var _ref5 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: complexValue
});

var _ref6 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: value
});

var _ref7 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: value
});

var _ref8 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: value
});

var _ref9 = (0, _everDevTest.jsx)(_editor.default, {
  defaultValue: value
});

var _ref11 = (0, _everDevTest.jsx)("cursor", null);

var _ref13 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/image/ui', () => {
  afterAll(() => {
    global.Image = _Image;
  });
  it('转存图片', async () => {
    const fn = jest.fn();
    global.Image = class {
      constructor(src) {
        this.naturalWidth = void 0;
        this.naturalHeight = void 0;
        this.onload = void 0;

        if (src) {
          this.src = src;
        }
      }

      set src(url) {
        this?.onload();
        this.naturalWidth = 384;
        this.naturalHeight = 108;
        fn();
      }

    };
    const {
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: _serializer.default.textToValue(''),
      singleLayout: [{
        items: [{
          name: 'image'
        }]
      }]
    }));

    _everDevTest.fireEvent.paste(editor, 'text/html', `
      <div>
        <img src="${_utils2.outerSrc}" />
      </div>
    `);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+v'));

    await (0, _react2.waitForElement)(() => content.querySelector('img[data-type=image]'));
    const img = content.querySelector('[data-type=image]');
    expect(!!img).toBe(true);
    expect(img.getAttribute('data-src')).toBe(_utils2.innerSrc);
    expect(fn).toHaveBeenCalledTimes(1);
  });
  it('更新图片宽高', async () => {
    const fn = jest.fn();
    global.Image = class {
      constructor(src) {
        this.naturalWidth = void 0;
        this.naturalHeight = void 0;
        this.onload = void 0;

        if (src) {
          this.src = src;
        }
      }

      set src(url) {
        this?.onload();
        this.naturalWidth = 384;
        this.naturalHeight = 108;
        fn();
      }

    };
    const {
      editor,
      content,
      container
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: _serializer.default.textToValue(''),
      singleLayout: [{
        items: [{
          name: 'image'
        }]
      }]
    }));

    _everDevTest.fireEvent.paste(editor, 'text/html', `
      <div>
        <img src="${_utils2.innerSrc}" />
      </div>
    `);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+v'));

    await sleep(100);
    await (0, _react2.waitForElement)(() => content.querySelector('img[data-type=image]'));
    const img = content.querySelector('[data-type=image]');
    expect(!!img).toBe(true);
    expect(img.getAttribute('data-src')).toBe(_utils2.innerSrc);
    expect(fn).toHaveBeenCalledTimes(1);
  });
  it('image 右侧面板中设置边框样式和大小后，边框面板不会消失', async () => {
    const {
      content,
      findByTestId,
      queryByTestId,
      findAllByTestId
    } = await (0, _everDevTest.renderEditor)(_ref);
    const img = content.querySelector('[data-type="image"]');

    _everDevTest.fireEvent.contextMenu(img);

    await findByTestId('bi-contextmenu');
    const optionMenuItem = await findByTestId('menu-item-image-options');

    _everDevTest.fireEvent.click(optionMenuItem);

    const sidebar = await findByTestId('image-sidebar');
    expect(sidebar).toBeInstanceOf(Element);
    const borderBtn = await findByTestId('image-sidebar-border-button');

    _everDevTest.fireEvent.click(borderBtn);

    await queryByTestId('Popup-image-sidebar-border-dropdown');
    const lineOptions = await findAllByTestId('SelectWrap-CommonLineSelect');

    _everDevTest.fireEvent.click(lineOptions[0]);

    const size6 = await findByTestId('option-6');

    _everDevTest.fireEvent.click(size6);

    await (0, _react2.wait)();

    _everDevTest.fireEvent.click(lineOptions[1]);

    const styleDash = await findByTestId('option-dashed');

    _everDevTest.fireEvent.click(styleDash);

    const imageBorder = await findByTestId('editor-image-real-box');
    const imageBorderStyle = getComputedStyle(imageBorder);
    expect(imageBorderStyle.borderStyle).toBe('dashed');
    expect(imageBorderStyle.borderWidth.toString()).toBe('6px');
  });
  it.skip('image 有渲染出透明度以及轮廓', async () => {
    const {
      container
    } = (0, _react2.render)(_ref2);
    expect((0, _helper.getContent)(container).find('MetaImgFrame').prop('style').opacity).toBe(0.5);
    expect((0, _helper.getContent)(container).find('MetaImgFrame').prop('style').border).toEqual(expect.stringContaining('solid'));
  });
  it('图片旋转在断点处自动吸附', () => {
    fitRotateTest.forEach(({
      before,
      after
    }) => {
      expect(JSON.stringify((0, _fitRotate.default)(before))).toBe(JSON.stringify(after));
    });
  });
  it('图片resize光标', () => {
    resizeCursorTest.forEach(({
      before,
      after
    }) => {
      expect((0, _utils.getResizeCursor)(0, before)).toBe(after);
      expect((0, _utils.getResizeCursor)(0, before - 180)).toBe(after);
      expect((0, _utils.getResizeCursor)(0, before + 180)).toBe(after);
    });
  });
  it('粘贴时过滤图片数据', () => {
    filterDataTest.forEach(({
      before,
      after,
      list
    }) => {
      expect(JSON.stringify((0, _filterImageData.default)(before, list))).toBe(JSON.stringify(after));
    });
  });
  it('粘贴时获取需要转换的图片', () => {
    const value = _serializer.default.jsonMLToValue(['root', {}, ['p', ['img', {
      src: 'aaa'
    }], ['img', {
      src: 'bbb'
    }], ['img', {
      src: 'ccc'
    }]]]);

    const transferableImages = (0, _filterImages.filterTransferableImages)(value.document, url => url === 'aaa');
    const transferableSrc = transferableImages.map(image => image.data.src).toString();
    expect(transferableSrc).toBe('aaa');
    const droppedFragment = (0, _filterImages.dropImages)(value.document, url => url === 'aaa');
    const images = droppedFragment.filterDescendants(node => _everMo.Image.isImage(node));
    const dropRes = images.map(image => image.data.src).toString();
    const expectRes = 'bbb,ccc';
    expect(dropRes).toBe(expectRes);
  }); // TODO: FIXME @淼淼
  // imagePreviewMockFn 读一次就会执行一次，之前由于每次点击后都会 re-render 一次，导致有个读操作，所以测试会过

  it.skip('图片预览', async () => {
    const {
      content,
      findByTestId
    } = await (0, _everDevTest.renderEditor)(_ref3);
    let img = content.querySelector('[data-type="image"]');

    _everDevTest.fireEvent.click(img); // 单击图片后，图片被选中


    const imageSelect = await findByTestId('image-select');
    img = imageSelect.querySelector('img');
    const imagePreviewCalls = _editor.imagePreviewMockFn.mock.calls.length;

    _everDevTest.fireEvent.click(img);

    await (0, _react2.waitFor)(() => expect(_editor.imagePreviewMockFn.mock.calls.length).toBe(imagePreviewCalls + 1));
  });
  it('图片面板 - 还原', async () => {
    const fn = jest.fn();
    global.Image = class {
      constructor(src) {
        this.naturalWidth = void 0;
        this.naturalHeight = void 0;
        this.onload = void 0;

        if (src) {
          this.src = src;
        }
      }

      set src(url) {
        this?.onload();
        this.naturalWidth = 384;
        this.naturalHeight = 108;
        fn();
      }

    };

    const configValue = _serializer.default.jsonMLToValue(['root', {}, ['p', ['img', {
      src: 'https://cn.bing.com/az/hprichbg/rb/TeslaCoil_EN-CN1604235004_1920x1080.jpg',
      width: 192,
      height: 108,
      outline: {
        width: 1,
        type: 'solid',
        color: '#002060'
      },
      shadow: '1px 1px 10px 0 rgba(0, 0, 0, 0.12)',
      radius: 4,
      type: 'jpg'
    }]]]);

    const {
      content,
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: configValue
    }));
    const img = content.querySelector('[data-type="image"]');
    let imgBorder = await findByTestId('editor-image-real-box');
    expect(imgBorder?.style?.border).toBe('1px solid #002060');
    expect(imgBorder?.style?.borderRadius).toBe('4px');
    expect(imgBorder?.style?.boxShadow === '1px 1px 10px 0 rgba(0, 0, 0, 0.12)' || imgBorder?.style?.boxShadow === 'rgba(0, 0, 0, 0.12) 1px 1px 10px 0').toBe(true);

    _everDevTest.fireEvent.contextMenu(img);

    await findByTestId('bi-contextmenu');
    const optionMenuItem = await findByTestId('menu-item-image-options');

    _everDevTest.fireEvent.click(optionMenuItem);

    const sidebar = await findByTestId('image-sidebar');
    expect(sidebar).toBeInstanceOf(Element);
    const restoreBtn = await findByTestId('image-sidebar-restore');

    _everDevTest.fireEvent.click(restoreBtn);

    imgBorder = await findByTestId('editor-image-real-box');
    expect(imgBorder?.style?.border).toBe('');
    expect(imgBorder?.style?.borderRadius).toBe('0');
    expect(imgBorder?.style?.boxShadow).toBe(''); // TODO: 补充推荐样式和对齐方式的 test
  });
  it('图片编辑框&工具栏 - 选中后出现', async () => {
    const {
      container,
      findByTestId
    } = await (0, _everDevTest.renderEditor)(_ref4);
    const img = container.querySelector('[data-type="image"]');

    _everDevTest.fireEvent.click(img);

    const imageSelectFrame = await findByTestId('image-select-frame');
    const imageInlineToolbar = await findByTestId('inline-toolbar-image');
    expect(imageSelectFrame).toBeInstanceOf(HTMLElement);
    expect(imageInlineToolbar).toBeInstanceOf(HTMLElement);
  });
  it.skip('图片编辑框-缩放后跟随', async () => {
    const {
      container,
      findByTestId,
      findAllByRole
    } = await (0, _everDevTest.renderEditor)(_ref5);
    const img = container.querySelector('[data-type="image"]');

    _everDevTest.fireEvent.click(img); // 缩放


    const resizer = await findAllByRole('resizer');

    _everDevTest.fireEvent.mouseDown(resizer[1]);

    _everDevTest.fireEvent.mouseMove(resizer[1], {
      clientX: resizer[1].clientLeft - img.clientWidth / 2,
      clientY: resizer[1].clientTop - img.clientHeight / 2
    });

    _everDevTest.fireEvent.mouseUp(resizer[1]);

    const imageSelectFrame = await findByTestId('image-select-frame');
    expect(imageSelectFrame).toBeInstanceOf(HTMLElement);
  });
  it.skip('图片编辑框&工具栏 - 旋转后跟随', async () => {
    const {
      container,
      findByTestId,
      findAllByRole
    } = await (0, _everDevTest.renderEditor)(_ref6);
    const img = container.querySelector('[data-type="image"]');

    _everDevTest.fireEvent.click(img); // 旋转


    const rotators = await findAllByRole('rotator');

    _everDevTest.fireEvent.mouseDown(rotators[1]);

    _everDevTest.fireEvent.mouseMove(rotators[1], {
      clientX: rotators[1].clientLeft - img.clientWidth / 2,
      clientY: rotators[1].clientTop + img.clientHeight / 2
    });

    _everDevTest.fireEvent.mouseUp(rotators[1]);

    const imageSelectFrame = await findByTestId('image-select-frame');
    expect(imageSelectFrame).toBeInstanceOf(HTMLElement);
  });
  it('图片编辑框&工具栏 - 调整对齐方式后跟随', async () => {
    const value = _serializer.default.jsonMLToValue(['root', {}, ['p', ['img', {
      src: 'https://cn.bing.com/az/hprichbg/rb/TeslaCoil_EN-CN1604235004_1920x1080.jpg',
      width: 192,
      height: 108,
      opacity: 0.5,
      outline: {
        width: 1,
        type: 'solid',
        color: '#002060'
      },
      type: 'jpg'
    }]]]);

    const {
      container,
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      singleLayout: [{
        items: [{
          name: 'alignment'
        }]
      }]
    }));
    const img = container.querySelector('[data-type="image"]');

    _everDevTest.fireEvent.click(img); // 打开 alignment 工具栏


    const trigger = await findByTestId('bi-toolbar-align');

    _everDevTest.fireEvent.click(trigger); // 点击对齐方式


    const alignmentOption = await findByTestId('bi-toolbar-align__list_right');

    _everDevTest.fireEvent.click(alignmentOption);

    const imageSelectFrame = await findByTestId('image-select-frame');
    expect(imageSelectFrame).toBeInstanceOf(HTMLElement);
  });
  it('设置图片边框颜色', async () => {
    const {
      container,
      queryByTestId,
      findByTestId,
      getByTestId
    } = await (0, _everDevTest.renderEditor)(_ref7);
    const img = container.querySelector('[data-type="image"]');

    _everDevTest.fireEvent.click(img);

    const inlineToolbar = await findByTestId('inline-toolbar-image');
    const borderPicker = inlineToolbar.querySelector('[data-testid="splitbutton-arrow-BorderPicker"]');

    _everDevTest.fireEvent.click(borderPicker);

    const borderPanel = await findByTestId('splite-overlay-BorderPicker');
    const colorBox = borderPanel.querySelector('[color="#C10002"]');

    _everDevTest.fireEvent.click(colorBox);

    await (0, _react2.waitFor)(() => {
      const imgBorder = getByTestId('editor-image-real-box');
      expect(imgBorder.style.borderColor).toBe('#c10002');
    });
  });
  it('行内工具栏 - 更多菜单 - 下载', async () => {
    const {
      container,
      findByTestId,
      getAllByTestId,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)(_ref8);
    const img = container.querySelector('[data-type="image"]');

    _everDevTest.fireEvent.click(img);

    await findByTestId('inline-toolbar-image');
    const moreBtn = getAllByTestId('image-inline-more-dropdown');
    expect(moreBtn.length).toBe(1);

    _everDevTest.fireEvent.click(moreBtn[0]);

    const downloadMenuItem = await findByTestId('menu-item-image-menu-download');

    _everDevTest.fireEvent.click(downloadMenuItem);

    expect(_editor.imageDownloadMockFn).toHaveBeenCalledTimes(1);
  });
  it('行内工具栏 - 更多菜单 - 推荐样式', async () => {
    const {
      container,
      findByTestId,
      queryByTestId,
      getByTestId
    } = await (0, _everDevTest.renderEditor)(_ref9);
    const img = container.querySelector('[data-type="image"]');

    _everDevTest.fireEvent.click(img);

    await findByTestId('inline-toolbar-image');
    let recommendStylesButton = queryByTestId('image-toolbar-recommend-styles');

    _everDevTest.fireEvent.click(recommendStylesButton);

    await findByTestId('Popup-image-toolbar-recommend-styles');
    const style5 = queryByTestId('image-recommend-style-5');
    const imgBorder = getByTestId('editor-image-real-box');

    _everDevTest.fireEvent.click(style5);

    await (0, _react2.waitFor)(() => {
      expect(imgBorder.style.borderRadius).toBe('0');
    });
    await (0, _react2.waitFor)(() => {
      expect(imgBorder.style.border).toBe('4px solid #ffffff');
    });
    await (0, _react2.waitFor)(() => {
      expect(imgBorder.style.boxShadow).toBe('0px 0px 1px rgba(0, 0, 0, 0.24), 0px 2px 10px rgba(0, 0, 0, 0.24)');
    });

    _everDevTest.fireEvent.click(img);

    recommendStylesButton = queryByTestId('image-toolbar-recommend-styles');

    _everDevTest.fireEvent.click(recommendStylesButton);

    const clearStyle = await findByTestId('image-toolbar-clear-style');

    _everDevTest.fireEvent.click(clearStyle);

    await (0, _react2.waitFor)(() => {
      expect(imgBorder.style.borderRadius).toBe('0');
    });
    await (0, _react2.waitFor)(() => {
      expect(imgBorder.style.border).toBe('');
    });
    await (0, _react2.waitFor)(() => {
      expect(imgBorder.style.boxShadow).toBe('');
    });
  });
  it('图片异步转换', async () => {
    const {
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      imageCustomConfig: {
        transformImageURL: url => {
          return new Promise(resolve => {
            resolve(`${url}?t=1`);
          });
        }
      }
    }));
    const img = await findByTestId('cangjie-image');
    await (0, _react2.waitFor)(() => {
      expect(img.getAttribute('src')).toBe(`${IMAGE_URL}?t=1`);
    });
  });
  it('图片同步转换', async () => {
    const {
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value,
      imageCustomConfig: {
        transformImageURL: url => `${url}?t=1`
      }
    }));
    const img = await findByTestId('cangjie-image');
    await (0, _react2.waitFor)(() => {
      expect(img.getAttribute('src')).toBe(`${IMAGE_URL}?t=1`);
    });
  });
  it('上传后清理 object url', async () => {
    var _class4, _temp;

    const revokeObjectURLFn = jest.fn();
    global.URL = (_temp = _class4 = class {
      static createObjectURL(file) {
        return `blob:/${file.name}`;
      }

    }, _class4.revokeObjectURL = revokeObjectURLFn, _temp);
    global.Image = class {
      constructor() {
        this.onload = void 0;
        this._src = void 0;
      }

      set src(url) {
        this._src = url;
        this.onload && this.onload();
      }

      get src() {
        return this._src;
      }

    };
    const {
      editor,
      container
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: _serializer.default.textToValue(''),
      singleLayout: [{
        items: [{
          name: 'image'
        }]
      }]
    }));
    const imageBtn = container.querySelector('[data-testid="bi-toolbar-picture"]');

    _everDevTest.fireEvent.click(imageBtn);

    await sleep(100);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.deleteBackward));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)(_everDevTest.HOTKEYS.deleteBackward));

    await sleep(0);
    expect(revokeObjectURLFn).toBeCalledTimes(1);
    global.Image = _Image;
    global.URL = _URL;
  });
  describe('Markdown 编辑', () => {
    const positiveCases = [{
      input: '![]()',
      isPlaceholder: true
    }, {
      input: '![foo](http://bar)',
      isPlaceholder: false
    }, {
      input: '![<f o o>](http://bar)',
      isPlaceholder: false
    }, {
      input: '![](http://bar)',
      isPlaceholder: false
    }, {
      input: '![](https://www.example.com/foo-1?bar=x#search)',
      isPlaceholder: false
    }, {
      input: '![](https://www.example.com/foo-1?bar=x,y,z&zoo=a_b_c#search "title 1")',
      isPlaceholder: false
    }];
    const negativeCases = ['![abc]()', '![ab]]()', '![](())', '![](/uri)', '![](file:///uri)', '![](http://uri"")', '![](http://uri"t")', '![]("abc")', '![](http://uri " abc ")', '![](</uri>)'];
    positiveCases.forEach(({
      input,
      isPlaceholder
    }) => {
      var _ref10 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, input, _ref11)));

      it(`Image: \`${input}\``, async () => {
        const value = _ref10;
        const {
          content,
          editor,
          queryByTestId
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        });

        await (0, _everDevTest.waitForTime)(10);

        if (isPlaceholder) {
          const element = await (0, _react2.waitFor)(() => queryByTestId('image-placeholder'));
          expect(element).toBeTruthy();
        } else {
          const img = await (0, _react2.waitFor)(() => content.querySelector('.image-data-wrapper'));
          expect(img).toBeTruthy();
        }
      });
    });
    negativeCases.forEach(input => {
      var _ref12 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, input, _ref13)));

      it(`Not Image: \`${input}\``, async () => {
        const value = _ref12;
        const {
          content,
          editor
        } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
          defaultValue: value
        }));

        _everDevTest.fireEvent.cangjieInput(editor, {
          data: ' '
        });

        await (0, _everDevTest.waitForTime)(10);
        expect(content.textContent).toBe(`${input} `);
      });
    });
  });
});
//# sourceMappingURL=ui.test.js.map