"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everCangjie = require("@ali/4ever-cangjie");

require("@testing-library/jest-dom/extend-expect");

var _everMo = require("@ali/4ever-mo");

var _ = require("../..");

var _serializer = _interopRequireDefault(require("../serializer"));

var _onInsertImage = _interopRequireDefault(require("../../plugins/image/handlers/onInsertImage"));

var _helpers = require("../table/helpers");

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const imageConfig = {
  uploadImage: (file, id, notifyProgress) => {
    notifyProgress(99);
    return Promise.resolve({
      url: file.name
    });
  }
};
const plugins = (0, _.createBiPlugins)({
  image: imageConfig
}).array;

async function waitForUpload() {
  await new Promise(resolve => {
    setTimeout(() => {
      resolve();
    }, 100);
  });
}

describe('Bi/image/behaviour', () => {
  const _Image = global.Image;
  const _URL = global.URL;
  beforeEach(() => {
    global.Image = class {
      constructor() {
        this.onload = void 0;
        this._src = void 0;
      }

      set src(url) {
        this._src = url;
        this?.onload();
      }

      get src() {
        return this._src;
      }

    };
  });
  beforeAll(() => {
    global.URL = class {
      static createObjectURL(file) {
        return file.name;
      }

    };
  });
  afterAll(() => {
    global.URL = _URL;
    global.Image = _Image;
  });
  it('顺序上传', async () => {
    global.Image = class {
      constructor() {
        this.onload = void 0;
        this._src = void 0;
      }

      set src(url) {
        const time = (3 - parseInt(url)) * 10;
        this._src = url;
        setTimeout(() => {
          this?.onload();
        }, time);
      }

      get src() {
        return this._src;
      }

    };

    const value = _serializer.default.textToValue('');

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const files = [new File([], '0.png'), new File([], '1.png'), new File([], '2.png')];
    const newController = (0, _onInsertImage.default)(controller, files, imageConfig, {}); // wait reader image

    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, 0);
    }); // wait load image

    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, 100);
    }); // wait upload

    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, 0);
    });
    const images = newController.value.document.filterDescendants(_everMo.Image.isImage);
    expect(images.length).toBe(3);

    for (let i = 0; i < files.length; i++) {
      expect(images[i].data.name).toBe(`${i}.png`);
    }
  });
  it('customSize & extraData', async () => {
    const extraData = {
      mediaId: 1
    };
    const imageConfig = {
      uploadImage: (file, id, notifyProgress) => {
        notifyProgress(99);
        return Promise.resolve({
          url: file.name,
          width: 100,
          height: 100,
          extraData
        });
      }
    };

    const value = _serializer.default.textToValue('');

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const newController = (0, _onInsertImage.default)(controller, new File([], 'test.png'), imageConfig, {});
    await waitForUpload();
    const images = newController.value.document.filterDescendants(_everMo.Image.isImage);
    expect(images.length).toBe(1);
    expect(images[0].data.width).toBe(100);
    expect(images[0].data.height).toBe(100);
    expect(JSON.stringify(images[0].data.extraData)).toBe(JSON.stringify(extraData));
  });
  it('上传失败', async () => {
    const file = new File([], '0.png');
    const fn = jest.fn();

    const uploadFailed = () => {
      fn();
      return Promise.reject();
    };

    const value = _serializer.default.textToValue('');

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const newController = (0, _onInsertImage.default)(controller, file, {
      uploadImage: uploadFailed
    }, {});
    await waitForUpload();
    const images = newController.value.document.filterDescendants(_everMo.Image.isImage);
    expect(images.length).toBe(0);
    expect(fn).toBeCalledTimes(1);
  });
  it('在有表格选区时粘贴图片', async () => {
    const imageConfig = {
      uploadImage: (file, id, notifyProgress) => {
        notifyProgress(99);
        return Promise.resolve({
          url: file.name,
          width: 100,
          height: 100
        });
      }
    };
    const {
      controller
    } = await (0, _helpers.createEditor)({
      table: [['A', 'B'], ['C', 'D']],
      tableSelection: {
        startColIndex: 0,
        startRowIndex: 0,
        endColIndex: 1,
        endRowIndex: 0
      }
    });
    (0, _onInsertImage.default)(controller, new File([], 'test.png'), imageConfig, {});
    await waitForUpload();
    await waitForUpload();
    const {
      document
    } = controller.value;
    const images = document.filterDescendants(_everMo.Image.isImage);
    expect(images.length).toBe(1);
    const tableRows = document.findDescendant(n => n.type === 'table-row');
    expect(tableRows?.nodes.length).toBe(2);
  });
});
//# sourceMappingURL=behaviour.test.js.map