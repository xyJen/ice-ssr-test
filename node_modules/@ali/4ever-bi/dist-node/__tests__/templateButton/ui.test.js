"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _react2 = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _everPluginTemplateButton = require("@ali/4ever-plugin-template-button");

var _everSetup = require("@ali/4ever-setup");

var _ = require("../../");

var _helper = require("../helper");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)(_everSetup.Content, null);

const Editor = props => {
  const {
    defaultValue,
    config = {},
    controllerRef
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    return (0, _everSetup.createCustomBiPlugins)({
      factories: [_everPluginTemplateButton.biFactory]
    });
  }, [config]);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_everSetup.Provider, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    controllerRef: controllerRef,
    autoFocus: true
  }, (0, _everDevTest.jsx)(_.HeadingToolbar, {
    mode: _.HeaderToolbarMode.single,
    singleLayout: [{
      items: [{
        name: 'templateButton'
      }]
    }]
  }), _ref);
};

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

function createValue(text) {
  return (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, _ref2, text)));
}
/**
 * 
 * @param container 
 * @param queryByTestId 
 * @param editor 传入该参数则默认 focus 到模板按钮内容区域
 */


async function insertTemplateButton(container, queryByTestId, editor) {
  _everDevTest.fireEvent.click(container.querySelector('[data-testid="bi-toolbar-templeButton"]'));

  await (0, _react2.waitFor)(() => queryByTestId('templateButton-openView'));

  if (editor) {
    _everDevTest.fireEvent.focus(editor); // 用 hack 方式聚焦于模板内容编辑区域


    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowLeft'));

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowLeft'));
  }

  await (0, _react2.wait)();
}

describe('Bi/templateButton', () => {
  it('通过 Toolbar 添加模板按钮，默认为展开状态，聚焦于模板标题输入框', async () => {
    const {
      container,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: createValue('Hello')
    }));
    await insertTemplateButton(container, queryByTestId);
    expect(document.activeElement).toBe(queryByTestId('templateButton-openView').querySelector('input[type="text"]'));
  });
  it('模板按钮标题输入组件受控', async () => {
    const {
      container,
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: createValue('Hello')
    }));
    await insertTemplateButton(container, queryByTestId, editor);
    const titleDom = queryByTestId('templateButton-openView').querySelector('.templateButton-title');
    const defaultTitle = titleDom.textContent;

    const findTitle = str => (0, _react2.waitFor)(() => (0, _react2.findByText)(titleDom, str, {}, {
      timeout: 10
    }));

    _everDevTest.fireEvent.inputChange(queryByTestId('templateButton-openView').querySelector('input[type="text"]'), 'hello'); // 输入同步


    expect(() => findTitle('hello')).toBeTruthy(); // 编辑区域 undo 同步

    _everDevTest.fireEvent.focus(editor);

    await (0, _react2.wait)();

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ctrl+z'));

    await (0, _react2.wait)();
    expect(queryByTestId('templateButton-openView').querySelector('input[type="text"]').value).toBe(defaultTitle);
  });
  it('模板按钮标题输入对 composition 事件的处理', async () => {
    const {
      container,
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: createValue('Hello')
    }));
    await insertTemplateButton(container, queryByTestId, editor);
    const titleDom = queryByTestId('templateButton-openView').querySelector('.templateButton-title');
    const inputDom = queryByTestId('templateButton-openView').querySelector('input[type="text"]');
    const defaultTitle = titleDom.textContent;

    const findTitle = str => (0, _react2.waitFor)(() => (0, _react2.findByText)(titleDom, str, {}, {
      timeout: 10
    }));

    _everDevTest.fireEvent.compositionStart(inputDom);

    await (0, _react2.wait)();

    _everDevTest.fireEvent.inputChange(queryByTestId('templateButton-openView').querySelector('input[type="text"]'), 'hello'); // composition 中，不触发更新


    expect(() => findTitle(defaultTitle)).toBeTruthy();

    _everDevTest.fireEvent.compositionEnd(inputDom);

    await (0, _react2.wait)(); // composition 结束后，触发更新

    expect(() => findTitle('hello')).toBeTruthy();
  });
  it('模板按钮标题输入', async () => {
    const {
      container,
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: createValue('Hello')
    }));
    await insertTemplateButton(container, queryByTestId, editor);

    _everDevTest.fireEvent.inputChange(queryByTestId('templateButton-openView').querySelector('input[type="text"]'), 'hello');

    const ret = await (0, _react2.waitFor)(() => (0, _react2.findByText)(queryByTestId('templateButton-openView').querySelector('.templateButton-title'), 'hello', {}, {
      timeout: 10
    }));
    expect(ret).toBeTruthy();
  });
  it('模板按钮内容被删除后保留一个空 paragraph', async () => {
    const {
      container,
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: createValue('Hello')
    }));
    await insertTemplateButton(container, queryByTestId, editor); // 先删除空的 todo

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('backspace')); // 再尝试删除空的 paragraph


    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('backspace'));

    await (0, _react2.wait)();
    expect(container.querySelector('[data-container-block]').querySelector('[data-type="paragraph"]')).toBeTruthy();
  });
  it('shift + arrow 选区不越过按钮内容区域', async () => {
    const {
      container,
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: createValue('Hello')
    }));
    await insertTemplateButton(container, queryByTestId, editor);

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowLeft', 'shift'));

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowLeft', 'shift'));

    await (0, _react2.wait)(); // 应该是在模板按钮内正常输入，而不是替换掉模板按钮

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: 'a'
    });

    await (0, _react2.wait)();
    expect(queryByTestId('templateButton-openView')).toBeTruthy();

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowRight', 'shift'));

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowRight', 'shift')); // 应该是在模板按钮内正常输入，而不是替换掉模板按钮


    _everDevTest.fireEvent.cangjieInput(editor, {
      data: 'a'
    });

    await (0, _react2.wait)();
    expect(queryByTestId('templateButton-openView')).toBeTruthy();
  });
  it('模板按钮内全选', async () => {
    const {
      container,
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: createValue('Hello')
    }));
    await insertTemplateButton(container, queryByTestId, editor);

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: 'abc'
    });

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('a', 'ctrl')); // 替换 abc 为 def，而不是将模板按钮替换为 deffff


    _everDevTest.fireEvent.cangjieInput(editor, {
      data: 'deffff'
    });

    await (0, _react2.wait)();
    expect(queryByTestId('templateButton-openView')).toBeTruthy();
    expect(queryByTestId('templateButton-openView').querySelector('[data-container-block]').textContent).toBe('deffff');
  });
  it('模板按钮外全选', async () => {
    const {
      container,
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: createValue('Hello')
    }));
    await insertTemplateButton(container, queryByTestId, editor); // 光标移出模板按钮区域

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowLeft'));

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowLeft')); // 全选


    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('a', 'ctrl')); // 删除所有


    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('backspace'));

    await (0, _react2.wait)();
    expect(queryByTestId('templateButton-openView')).toBeFalsy();
  });
  it('由外向内选，则选中整个模板按钮', async () => {
    const {
      container,
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: createValue('Hello')
    }));
    await insertTemplateButton(container, queryByTestId, editor); // 光标移到 edge before 前一位

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowLeft'));

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowLeft')); // 应该选中整个模板按钮


    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowRight', 'shift'));

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowRight', 'shift')); // 光标应该移到 edge after


    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowRight')); // 在模板按钮之后输入 deffff，而非删除模板按钮


    _everDevTest.fireEvent.cangjieInput(editor, {
      data: 'deffff'
    });

    await (0, _react2.wait)(); // 模板按钮存在

    expect(queryByTestId('templateButton-openView')).toBeTruthy(); // deffff 不在模板按钮内

    expect(queryByTestId('templateButton-openView').querySelector('[data-container-block]').textContent).not.toBe('deffff'); // 外部有 deffff

    expect((0, _react2.findByText)(container, 'deffff')).resolves.toBeTruthy();
  });
  it('由外向内选(edge before开始)，则选中整个模板按钮', async () => {
    const {
      container,
      queryByTestId,
      editor
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: createValue('Hello')
    }));
    await insertTemplateButton(container, queryByTestId, editor); // 光标移到 edge before

    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowLeft')); // 应该选中整个模板按钮


    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowRight', 'shift')); // 光标应该移到 edge after


    _everDevTest.fireEvent.keyDown(editor, (0, _helper.getHotKeyEvent)('ArrowRight')); // 在模板按钮之后输入 deffff，而非删除模板按钮


    _everDevTest.fireEvent.cangjieInput(editor, {
      data: 'deffff'
    });

    await (0, _react2.wait)(); // 模板按钮存在

    expect(queryByTestId('templateButton-openView')).toBeTruthy(); // deffff 不在模板按钮内

    expect(queryByTestId('templateButton-openView').querySelector('[data-container-block]').textContent).not.toBe('deffff'); // 外部有 deffff

    expect((0, _react2.findByText)(container, 'deffff')).resolves.toBeTruthy();
  });
});
//# sourceMappingURL=ui.test.js.map