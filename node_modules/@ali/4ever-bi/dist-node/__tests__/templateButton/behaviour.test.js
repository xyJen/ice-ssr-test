"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _ = require("../../");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const getPlugins = (custom = {}) => {
  return (0, _.createCustomizedBiPlugins)({ ...custom,
    ..._.plugins
  })().array;
};

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234", (0, _everDevTest.jsx)("cursor", null), "56789")));

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234");

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "56789");

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234");

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "56789");

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "56789")));

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234");

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "56789");

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234");

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "56789");

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234");

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "in template button");

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "56789");

var _ref14 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234");

var _ref15 = (0, _everDevTest.jsx)("cursor", null);

var _ref16 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "in template button");

var _ref17 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "56789");

describe('Bi/templateButton/behaviour', () => {
  test('插入模板按钮默认数据校验', () => {
    const value = _ref;
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref2, (0, _everDevTest.jsx)("block", {
      type: "container",
      data: {
        subType: 'templateButton',
        metadata: {
          isOnce: false,
          direction: 'bottom',
          title: 'Add a new to-do'
        }
      }
    }, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          level: 0,
          isChecked: false,
          isOrdered: false,
          isTaskList: true,
          listId: 'test'
        }
      }
    })), _ref3));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: getPlugins()
    });

    controller.command('insertTemplateButton', {});
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('Delete Action', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref4, (0, _everDevTest.jsx)("block", {
      key: "test-block",
      type: "container",
      data: {
        subType: 'templateButton',
        metadata: {
          isOnce: false,
          direction: 'bottom',
          title: 'Add a new to-do'
        }
      }
    }, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          level: 0,
          isChecked: false,
          isOrdered: false,
          isTaskList: true,
          listId: 'test'
        }
      }
    })), _ref5));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: getPlugins()
    });

    controller.dispatch('deleteTemplateButton', {
      key: 'test-block'
    });
    const output = _ref6;
    const actual = controller.value.toJSON();
    const expected = controller.setValue(output).value.toJSON();
    expect(actual).toEqual(expected);
  });
  test('Copy Action', done => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref7, (0, _everDevTest.jsx)("block", {
      key: "test-block",
      type: "container",
      data: {
        subType: 'templateButton',
        metadata: {
          isOnce: false,
          direction: 'bottom',
          title: 'Add a new to-do'
        }
      }
    }, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          level: 0,
          isChecked: false,
          isOrdered: false,
          isTaskList: true,
          listId: 'test'
        }
      }
    })), _ref8));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: getPlugins()
    });

    controller.dispatch('copyTemplateButton', {
      key: 'test-block'
    });
    const backup = global.document.execCommand;

    global.document.execCommand = function (command) {
      // copy
      expect(command).toBe('copy');
      global.document.execCommand = backup;
      done();
    }; // select


    expect(controller.value.selection.anchor.key).toEqual('test-block');
    expect(controller.value.selection.anchor.edge).toEqual('before');
    expect(controller.value.selection.focus.key).toEqual('test-block');
    expect(controller.value.selection.focus.edge).toEqual('after');
  });
  test('Cut Action', done => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref9, (0, _everDevTest.jsx)("block", {
      key: "test-block",
      type: "container",
      data: {
        subType: 'templateButton',
        metadata: {
          isOnce: false,
          direction: 'bottom',
          title: 'Add a new to-do'
        }
      }
    }, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          level: 0,
          isChecked: false,
          isOrdered: false,
          isTaskList: true,
          listId: 'test'
        }
      }
    })), _ref10));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: getPlugins()
    });

    const backup = global.document.execCommand;

    global.document.execCommand = function (command) {
      // cut
      expect(command).toBe('cut');
      global.document.execCommand = backup;
      done();
    };

    controller.dispatch('cutTemplateButton', {
      key: 'test-block'
    }); // 剪切发生时，确保选区正确

    expect(controller.value.selection.anchor.key).toEqual('test-block');
    expect(controller.value.selection.anchor.edge).toEqual('before');
    expect(controller.value.selection.focus.key).toEqual('test-block');
    expect(controller.value.selection.focus.edge).toEqual('after');
  });
  test('Cursor Move', () => {
    // 收起按钮时为 void 状态，光标移动不进入内容区域
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref11, (0, _everDevTest.jsx)("block", {
      key: "test-block",
      type: "container",
      data: {
        subType: 'templateButton',
        metadata: {
          isOnce: false,
          direction: 'bottom',
          title: 'Add a new to-do'
        }
      }
    }, _ref12), _ref13));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref14, _ref15, (0, _everDevTest.jsx)("block", {
      key: "test-block",
      type: "container",
      data: {
        subType: 'templateButton',
        metadata: {
          isOnce: false,
          direction: 'bottom',
          title: 'Add a new to-do'
        }
      }
    }, _ref16), _ref17));

    const controller = _everCangjie.Controller.create({
      value,
      plugins: getPlugins()
    });

    controller.command(_everCangjie.Commands.moveBackward);
    controller.command(_everCangjie.Commands.moveBackward);
    controller.command(_everCangjie.Commands.moveBackward);
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
});
//# sourceMappingURL=behaviour.test.js.map