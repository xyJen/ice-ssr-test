"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _react = require("@testing-library/react");

var _editor = _interopRequireDefault(require("../editor"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("cursor", null);

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/placeholder/ui', () => {
  it('文档最顶部的 placeholder 可删除', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "ph",
      data: {
        name: '脑图',
        data: 'string'
      }
    }, _ref)));
    const {
      editor,
      queryByText
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    await (0, _react.waitForElement)(() => queryByText(/脑图/));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

    await (0, _react.waitForElementToBeRemoved)(() => queryByText(/脑图/));
  });
  it('选中 placeholder 时，回车可添加新行, placeholder 仍存在', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "ph",
      data: {
        name: '脑图',
        data: 'string'
      }
    }, _ref2)));
    const {
      content,
      editor,
      queryByText
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('enter'));

    await (0, _react.waitForElement)(() => queryByText(/脑图/));
    await (0, _react.waitForElement)(() => content.querySelector('div[data-type="paragraph"]'));
  });
});
//# sourceMappingURL=ui.test.js.map