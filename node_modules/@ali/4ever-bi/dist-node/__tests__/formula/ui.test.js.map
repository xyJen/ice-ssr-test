{"version":3,"sources":["../../../../src/__tests__/formula/ui.test.tsx"],"names":["createBiPlugins","biPlugins","FormulaPlugin","Editor","props","defaultValue","refValue","value","setValue","React","useState","current","plugins","useMemo","formula","jumpToUrl","locale","info","placeholder","textareaPlaceholder","cancel","confirm","handleChange","useCallback","changed","describe","beforeAll","jest","spyOn","console","error","mockImplementation","afterAll","mockRestore","afterEach","test","tagType","height","width","metadata","queryByTestId","querySelector","expect","textContent","toBe"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport * as React from 'react';\nimport { Value } from '@ali/4ever-cangjie';\nimport { createCustomizedBiPlugins, FormulaPlugin, plugins as biPlugins } from '../..';\nimport {\n  cleanup,\n} from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\nimport Provider from '../../provider';\nimport Content from '../../content';\nimport { renderEditor, jsx } from '@ali/4ever-dev-test';\n\ninterface EditorProps {\n  defaultValue: Value;\n}\n\nconst createBiPlugins = createCustomizedBiPlugins({\n  ...biPlugins,\n  FormulaPlugin,\n});\nconst Editor: React.FC<EditorProps> = (props) => {\n  const { defaultValue, refValue } = props;\n  const [value, setValue] = React.useState(defaultValue);\n  if (refValue) refValue.current = value;\n  const plugins = React.useMemo(() => {\n    return createBiPlugins({\n      formula: {\n        jumpToUrl: '',\n        locale: {\n          info: '了解数学公式',\n          placeholder: '添加公式',\n          textareaPlaceholder: '请输入公式',\n          cancel: '取消',\n          confirm: '确定'\n        }\n      }\n    });\n  }, []);\n  const handleChange = React.useCallback((changed) => {\n    setValue(changed.value);\n  }, []);\n  return (\n    <Provider value={value} onChange={handleChange} plugins={plugins} autoFocus>\n      <Content />\n    </Provider>\n  );\n};\ndescribe('Bi/tag/ui', () => {\n  beforeAll(() => {\n    // 防止被 componentDidCatch catch 的 error 被控制台输出\n    jest.spyOn(console, 'error');\n    // @ts-ignore\n    console.error.mockImplementation(() => { });\n  });\n  afterAll(() => {\n    // @ts-ignore\n    console.error.mockRestore();\n  });\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('formula 正常渲染', () => {\n    test('公式有内容', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              123<inline\n                type=\"tag\"\n                data={{\n                  tagType: 'formula',\n                  height: 32,\n                  width: 98,\n                  metadata: {\n                    formula: 'c = a + b^2',\n                  },\n                }}\n              /><cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n      const { queryByTestId } = await renderEditor(<Editor defaultValue={value} />);\n      const formula = queryByTestId('formula').querySelector('.katex-html');\n      expect(formula.textContent).toBe('c=a+b2');\n    });\n\n    test('公式无内容', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              123<inline\n                type=\"tag\"\n                data={{\n                  tagType: 'formula',\n                  height: 32,\n                  width: 98,\n                  metadata: {\n                    formula: '',\n                  },\n                }}\n              /><cursor />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n      const { queryByTestId } = await renderEditor(<Editor defaultValue={value} />);\n      const formula = queryByTestId('formula');\n      expect(formula.textContent).toBe('添加公式');\n    });\n  });\n});"],"file":"ui.test.js"}