"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _ = require("../..");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _everDevTest = require("@ali/4ever-dev-test");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({ ..._.plugins,
  FormulaPlugin: _.FormulaPlugin
});

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const Editor = props => {
  const {
    defaultValue,
    refValue
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  if (refValue) refValue.current = value;
  const plugins = React.useMemo(() => {
    return createBiPlugins({
      formula: {
        jumpToUrl: '',
        locale: {
          info: '了解数学公式',
          placeholder: '添加公式',
          textareaPlaceholder: '请输入公式',
          cancel: '取消',
          confirm: '确定'
        }
      }
    });
  }, []);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    autoFocus: true
  }, _ref);
};

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/tag/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('formula 正常渲染', () => {
    test('公式有内容', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'formula',
          height: 32,
          width: 98,
          metadata: {
            formula: 'c = a + b^2'
          }
        }
      }), _ref2)));
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const formula = queryByTestId('formula').querySelector('.katex-html');
      expect(formula.textContent).toBe('c=a+b2');
    });
    test('公式无内容', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'formula',
          height: 32,
          width: 98,
          metadata: {
            formula: ''
          }
        }
      }), _ref3)));
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const formula = queryByTestId('formula');
      expect(formula.textContent).toBe('添加公式');
    });
  });
});
//# sourceMappingURL=ui.test.js.map