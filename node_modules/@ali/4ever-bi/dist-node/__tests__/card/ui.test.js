"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _ = require("../..");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _everDevTest = require("@ali/4ever-dev-test");

var _serializer = _interopRequireDefault(require("../serializer"));

var _lodash = require("lodash");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const CreateCardPlugin = () => {
  return {
    onKeyDown: (event, controller, next) => {
      if (event.key === 'i') {
        return controller.run('onAction', (0, _.insertCard)({
          cardType: 'insert'
        }));
      }

      return next();
    },
    onCangjiePaste: (event, controller, next) => {
      return next();
    }
  };
};

const InsertCardPlugin = (0, _.cardFactory)(config => {
  return {
    cardType: 'insert',
    renderNode: ({
      isOwnerAndFirstCreated
    }, controller) => {
      return (0, _everDevTest.jsx)("div", {
        "data-testid": "insert-card-content",
        "data-owner": isOwnerAndFirstCreated
      }, "isOwnerAndFirstCreated=", String(isOwnerAndFirstCreated));
    }
  };
});
const demoCard = (0, _.cardFactory)(config => {
  return {
    cardType: 'demo',
    renderNode: (props, controller) => {
      const {
        node,
        isSelected
      } = props;

      const onClick = () => {
        const {
          height
        } = node.data;
        if (!height) controller.run('onAction', (0, _.setCardData)(node, {
          height: 300
        }));else if (height === 300) controller.run('onAction', (0, _.setCardInjection)(node, {
          height: 350
        }));else if (height === 350) {
          controller.run('onAction', (0, _.setCardData)(node, {
            height: 400
          }));
          controller.run('onAction', (0, _.setCardInjection)(node, {
            height: 410
          }));
        }
      };

      const {
        height
      } = node.data;
      return (0, _everDevTest.jsx)("div", {
        "data-testid": "demo-card-content",
        "data-selected": isSelected,
        onClick: onClick,
        "data-card-height": height
      }, "\u65E5\u7A0B\u5361\u7247");
    },
    onCangjiePaste: (event, controller, next) => {
      return next();
    }
  };
});
const clickCard = (0, _.cardFactory)(config => {
  return {
    cardType: 'click',
    renderNode: (props, controller) => {
      const {
        node,
        isSelected
      } = props;
      const {
        height
      } = node.data;
      return (0, _everDevTest.jsx)("div", {
        "data-testid": "click-card-content",
        "data-selected": isSelected,
        "data-card-height": height
      }, "\u65E5\u7A0B\u5361\u7247");
    },
    onCangjiePaste: (event, controller, next) => {
      return next();
    }
  };
});
const disableSelectedCard = (0, _.cardFactory)(config => {
  return {
    cardType: 'disableSelected',
    disableSelected: true,
    renderNode: (props, controller) => {
      const {
        node,
        isSelected
      } = props;
      const {
        height
      } = node.data;
      return (0, _everDevTest.jsx)("div", {
        "data-testid": "click-card-content",
        "data-selected": isSelected,
        "data-card-height": height
      }, "disableSelected card");
    },
    onCangjiePaste: (event, controller, next) => {
      return next();
    }
  };
});

const ErrorComponent = () => {
  throw new Error('test');
};

var _ref = (0, _everDevTest.jsx)(ErrorComponent, null);

const errorCardWithChildren = (0, _.cardFactory)(() => {
  return {
    cardType: 'errorChildren',
    renderNode: () => {
      return _ref;
    }
  };
});
const errorCard = (0, _.cardFactory)(() => {
  return {
    cardType: 'error',
    renderNode: () => {
      throw new Error('test');
    }
  };
});
const createBiPlugins = (0, _.createCustomizedBiPlugins)({ ...(0, _lodash.omit)(_.plugins),
  demoCard,
  errorCard,
  clickCard,
  disableSelectedCard,
  errorCardWithChildren,
  InsertCardPlugin,
  CreateCardPlugin
});

var _ref2 = (0, _everDevTest.jsx)(_content.default, null);

const Editor = props => {
  const {
    defaultValue
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    return createBiPlugins({
      demoCard: {}
    });
  }, []);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    autoFocus: true
  }, _ref2);
};

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Start Paragraph", (0, _everDevTest.jsx)("cursor", null))));

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
});

var _ref8 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref9 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "456");

var _ref10 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref11 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "456");

var _ref12 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123");

var _ref13 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref14 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref15 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "456");

var _ref16 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "123");

var _ref17 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref18 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null));

var _ref19 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "456");

describe('Bi/card/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('unknownCard', () => {
    test('渲染', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'unknown1',
          height: 0
        }
      })));
      const {
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const unknown = queryByText('暂无法解析');
      expect(!!unknown).toBe(true);
    });
    test('验证 card 非首次创建', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'insert',
          height: 0
        }
      })));
      const {
        findByTestId,
        editor
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const el = await findByTestId('insert-card-content');
      expect(!!el).toBe(true);
      expect(el.getAttribute('data-owner')).toBe('false');
    });
    test('插入卡片，并验证是否为当前用户首次创建', async () => {
      const value = _ref3;
      const {
        findByTestId,
        editor,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('i'));

      const el = await findByTestId('insert-card-content');
      expect(!!el).toBe(true);
      expect(el.getAttribute('data-owner')).toBe('true'); // 第二次重绘时 isOwnerAndFirstCreated = false

      _everDevTest.fireEvent.click(el);

      expect(await findByText('isOwnerAndFirstCreated=false')).toBeInstanceOf(HTMLElement);
    });
    test('点击 inlineBar 上删除按钮执行删除', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'unknown1',
          height: 0
        }
      })));
      const {
        queryByText,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const unknown = queryByText('暂无法解析');
      unknown.click();
      const delBtn = await findByTestId('ph-delete');
      expect(!!delBtn).toBe(true);
      delBtn.click();
      await (0, _react2.waitForElementToBeRemoved)(() => queryByText('暂无法解析'));
    });
  });
  describe('errorCard', () => {
    test('渲染卡片出现异常(renderNode)，兜底显示', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref4, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'error',
          height: 0
        }
      }), _ref5));
      const {
        queryByText,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const unknown = queryByText('暂无法解析');
      expect(!!unknown).toBe(true);

      _everDevTest.fireEvent.click(unknown);

      const delBtn = await findByTestId('ph-delete');
      expect(!!delBtn).toBe(true);

      _everDevTest.fireEvent.click(delBtn);

      await (0, _react2.waitForElementToBeRemoved)(() => queryByText('暂无法解析'));
    });
    test('渲染卡片出现异常(renderChild)，兜底显示', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref6, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'errorChildren',
          height: 0
        }
      }), _ref7));
      const {
        queryByText,
        findByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const unknown = queryByText('暂无法解析');
      expect(!!unknown).toBe(true);

      _everDevTest.fireEvent.click(unknown);

      const delBtn = await findByTestId('ph-delete');

      _everDevTest.fireEvent.click(delBtn);

      await (0, _react2.waitForElementToBeRemoved)(() => queryByText('暂无法解析'));
    });
  });
  describe('更新卡片', () => {
    test('点击选中', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref8, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'click',
          height: 300
        }
      }), _ref9));
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const el = queryByTestId('click-card-content');

      _everDevTest.fireEvent.click(el);

      await (0, _react2.waitFor)(() => el.getAttribute('data-selected') === 'true');
      expect(el.getAttribute('data-selected')).toBe('true');
      expect(!!el.closest('.selected')).toBe(true);
    });
    test('点击 disableSelected 卡片，无选中样式', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref10, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'disableSelected',
          height: 300
        }
      }), _ref11));
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const el = queryByTestId('click-card-content');

      _everDevTest.fireEvent.click(el);

      await (0, _react2.waitFor)(() => el.getAttribute('data-selected') === 'true');
      expect(el.getAttribute('data-selected')).toBe('true');
    });
    test('更新卡片高度(持久化)', async () => {
      const value = _serializer.default.jsonMLToValue(['root', ['card', {
        cardType: 'demo',
        height: 0
      }, ['span', {
        'data-type': 'text'
      }, ['span', {
        'data-type': 'leaf'
      }, '']]]]);

      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      })); // 首次点击，验证setData

      _everDevTest.fireEvent.click(queryByTestId('demo-card-content'));

      await (0, _react2.wait)();
      let cardContent = queryByTestId('demo-card-content');
      if (!cardContent) return false;
      if (cardContent.getAttribute('data-card-height') !== '300') return false; // 二次点击，验证setInjection

      _everDevTest.fireEvent.click(queryByTestId('demo-card-content'));

      await (0, _react2.wait)();
      cardContent = queryByTestId('demo-card-content');
      if (!cardContent) return false;
      if (cardContent.getAttribute('data-card-height') !== '350') return false; // 三次点击，验证setInjection&setData

      _everDevTest.fireEvent.click(queryByTestId('demo-card-content'));

      await (0, _react2.wait)();
      cardContent = queryByTestId('demo-card-content');
      if (!cardContent) return false;
      return cardContent.getAttribute('data-card-height') === '410';
    });
  });
  describe('block卡片/删除卡片', () => {
    test('向前删除，第一次移到右侧，第二次选中，第三次删除', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref12, (0, _everDevTest.jsx)("block", {
        key: "card",
        type: "card",
        data: {
          cardType: 'demo',
          height: 300
        }
      }), _ref13));
      const {
        queryByTestId,
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _react2.wait)(); // 第一次删除移到右侧
      // const caret = await domUtils.getCaretDom(content);
      // const caretValue = caret.getAttribute('data-cangjie-point');
      // expect(caretValue).toBe('card-after');

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace')); // 第二次选中
      // await waitForElementToBeRemoved(() => domUtils.getCaretDom(content));


      expect(!queryByTestId('demo-card-content')).toBe(false);

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _react2.wait)(); // 第三次删除

      expect(!queryByTestId('demo-card-content')).toBe(true);
    });
    test('向后删除，第一次移到左侧，第二次选中，第三次删除', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref14, (0, _everDevTest.jsx)("block", {
        key: "card",
        type: "card",
        data: {
          cardType: 'demo',
          height: 300
        }
      }), _ref15));
      const {
        queryByTestId,
        editor,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('delete'));

      await (0, _react2.wait)(); // 第一次删除移到左侧
      // const caret = await domUtils.getCaretDom(content);
      // const caretValue = caret.getAttribute('data-cangjie-point');
      // expect(caretValue).toBe('card-before');

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('delete')); // 第二次选中
      // await waitForElementToBeRemoved(() => domUtils.getCaretDom(content));


      expect(!queryByTestId('demo-card-content')).toBe(false);

      _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

      await (0, _react2.wait)(); // 第三次删除

      expect(!queryByTestId('demo-card-content')).toBe(true);
    });
  });
  test('edgeRange: 向前移动并删除', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref16, (0, _everDevTest.jsx)("block", {
      key: "card",
      type: "card",
      data: {
        cardType: 'demo',
        height: 300
      }
    }), _ref17));
    const {
      queryByTestId,
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ArrowLeft'));

    await (0, _react2.wait)(); // const caret = await domUtils.getCaretDom(content);
    // const caretValue = caret.getAttribute('data-cangjie-point');
    // expect(caretValue).toBe('card-after');

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace')); // 先选中
    // await waitForElementToBeRemoved(() => domUtils.getCaretDom(content));


    expect(!queryByTestId('demo-card-content')).toBe(false);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('backspace'));

    await (0, _react2.wait)(); // 删除 OK

    expect(!queryByTestId('demo-card-content')).toBe(true);
  });
  test('edgeRange: 向后删除，先选中，后删除', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref18, (0, _everDevTest.jsx)("block", {
      key: "card",
      type: "card",
      data: {
        cardType: 'demo',
        height: 300
      }
    }), _ref19));
    const {
      queryByTestId,
      editor,
      content
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
      defaultValue: value
    }));

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('ArrowRight'));

    await (0, _react2.wait)(); // const caret = await domUtils.getCaretDom(content);
    // const caretValue = caret.getAttribute('data-cangjie-point');
    // expect(caretValue).toBe('card-before');

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('delete')); // 先选中
    // await waitForElementToBeRemoved(() => domUtils.getCaretDom(content));


    expect(!queryByTestId('demo-card-content')).toBe(false);

    _everDevTest.fireEvent.keyDown(editor, (0, _everDevTest.getHotkeyEvent)('delete'));

    await (0, _react2.wait)(); // 删除 OK

    expect(!queryByTestId('demo-card-content')).toBe(true);
  });
});
//# sourceMappingURL=ui.test.js.map