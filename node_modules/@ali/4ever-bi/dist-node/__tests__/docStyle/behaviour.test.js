"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _everBamboo = require("@ali/4ever-bamboo");

var _createCustomizedBiPlugins = _interopRequireDefault(require("../../createCustomizedBiPlugins"));

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const pluginA = () => {
  return {
    getNodeStyle: (props, _, next) => {
      if (props.node.type === 'a') {
        return {
          backgroundColor: 'red'
        };
      }

      return next();
    }
  };
};

const pluginB = () => {
  return {
    getContentStyle: (props, _, next) => {
      if (props.docStyle?.docDefaults?.data?.rPr?.sz) {
        return {
          fontSize: props.docStyle?.docDefaults?.data?.rPr?.sz
        };
      }

      return next();
    }
  };
};

const createBiPlugins = (0, _createCustomizedBiPlugins.default)({
  pluginA,
  pluginB
});
const plugins = createBiPlugins();
const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "a",
  key: "a"
}, "A"), (0, _everDevTest.jsx)("block", {
  type: "b",
  key: "b"
}, "B")));
const tableValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "table",
  key: "table-key",
  data: {
    colsWidth: [100]
  }
}, (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "a",
  data: {
    shd: {
      fill: 'red'
    }
  }
}, "A")))), (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "b"
}, "B")));
describe('Bi/docStyle/behaviour', () => {
  test('getNodeStyle', async () => {
    const controller = _everCangjie.Controller.create({
      value,
      plugins: plugins.array
    });

    const style = controller.run('getNodeStyle', {
      node: controller.value.document.getNode('a')
    });
    expect(style).toEqual({
      backgroundColor: 'red'
    });
  });
  test('getNodeStyle in table', async () => {
    const controller = _everCangjie.Controller.create({
      value: tableValue,
      plugins: (0, _createBiPlugins.default)({}).array
    });

    const style = controller.run('getNodeStyle', {
      node: controller.value.document.getNode('a'),
      docStyle: {
        // @ts-ignore
        docDefaults: {
          data: {
            pPr: {
              spacing: {
                before: 8,
                after: 8
              }
            }
          }
        }
      }
    });
    expect(style).toEqual({ ..._everBamboo.theme.DEFAULT_SHD_STYLES,
      backgroundColor: 'red',
      // 表格内紧凑间距
      marginTop: _everBamboo.theme.spacing.defaultCompactSpacing,
      marginBottom: _everBamboo.theme.spacing.defaultCompactSpacing
    });
  });
  test('getContentStyle', async () => {
    const controller = _everCangjie.Controller.create({
      value,
      plugins: plugins.array
    });

    const style = controller.run('getContentStyle', {
      docStyle: {
        // @ts-ignore
        docDefaults: {
          data: {
            rPr: {
              sz: 18
            }
          }
        }
      }
    });
    expect(style).toEqual({
      fontSize: 18
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map