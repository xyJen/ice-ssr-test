"use strict";

require("@testing-library/jest-dom/extend-expect");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _editor = require("../editor");

/** @jsx jsx */
const createDocStyle = data => {
  return {
    docDefaults: {
      data,
      name: 'dingdoc normal',
      type: 'paragraph',
      default: 1
    }
  };
};

const input = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "\u9ED8\u8BA4\u6837\u5F0F\u8BBE\u7F6E")));

var _ref = (0, _everDevTest.jsx)("cursor", null);

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "table-row"
}, (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "h"), (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "h")), (0, _everDevTest.jsx)("block", {
  type: "table-cell"
}, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "h")));

describe('Bi/docStyle/ui', () => {
  it('支持默认字号', async () => {
    const {
      container,
      findByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: input,
      docStyle: createDocStyle({
        rPr: {
          sz: 18,
          szUnit: 'pt'
        }
      })
    }));
    const target = await (0, _react.waitFor)(() => container.querySelector('[data-cangjie-content="true"]'));
    expect(target?.style.fontSize).toEqual('18pt');
    const szInput = await findByTestId('SelectWrap-bi-toolbar-sz');
    expect(szInput.querySelector('input').value).toEqual('18');
  });
  it('支持默认字体', async () => {
    const {
      container,
      findByTestId,
      findByText
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: input,
      docStyle: createDocStyle({
        rPr: {
          fonts: {
            ascii: 'Helvetica'
          }
        }
      })
    }));
    const target = await (0, _react.waitFor)(() => container.querySelector('[data-cangjie-content="true"]'));
    const isSetted = /^Helvetica/.test(target?.style.fontFamily);
    expect(isSetted).toEqual(true);
    const fontsDiv = await findByTestId('SelectWrap-bi-toolbar-fonts');
    const fonts = fontsDiv.querySelector('.select_left_wrap div').textContent;
    expect(fonts).toEqual('Helvetica');
  });
  it('支持默认段间距', async () => {
    const {
      container
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: input,
      docStyle: createDocStyle({
        pPr: {
          spacing: {
            before: 8,
            after: 12
          }
        }
      })
    }));
    const block = await (0, _react.waitFor)(() => container.querySelector('[data-cangjie-leaf-block="true"]'));
    expect(block.style.marginTop).toEqual('8px');
    expect(block.style.marginBottom).toEqual('12px');
  });
  it('列表 getNodeStyle', async () => {
    const list = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph",
      data: {
        list: {
          listId: 'dn7ncrq6m7j',
          level: 0,
          isOrdered: false,
          isTaskList: true,
          isChecked: false
        },
        shd: {
          color: '#FF0000',
          val: 'pct5'
        }
      }
    }, _ref, "\u9ED8\u8BA4\u6837\u5F0F\u8BBE\u7F6E")));
    const {
      container
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: list,
      docStyle: createDocStyle({
        pPr: {
          spacing: {
            before: 8,
            after: 12
          }
        }
      })
    }));
    const block = await (0, _react.waitFor)(() => container.querySelector('[data-cangjie-leaf-block="true"]'));
    expect(block.style.marginTop).toEqual('2.667px');
    expect(block.style.marginBottom).toEqual('2.667px'); // 折叠列表背景色不通过 docStyle 渲染

    expect(block.style.backgroundColor).toEqual('');
  });
  it('表格里间距特殊控制', async () => {
    const table = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "table",
      key: "table",
      data: {
        colsWidth: [300, 300]
      }
    }, _ref2)));
    const {
      container
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.EditorWidthLegacyToolbar, {
      defaultValue: table,
      docStyle: createDocStyle({
        pPr: {
          spacing: {
            before: 8,
            after: 12
          }
        }
      })
    }));
    const blocks = await (0, _react.waitFor)(() => container.querySelectorAll('[data-cangjie-leaf-block="true"]'));
    expect(window.getComputedStyle(blocks[1]).marginTop).toEqual('2.667px');
    expect(window.getComputedStyle(blocks[2]).marginBottom).toEqual('2.667px');
  });
});
//# sourceMappingURL=ui.legacyToolbar.test.js.map