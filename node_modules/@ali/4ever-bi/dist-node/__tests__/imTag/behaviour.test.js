"use strict";

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _ = require("../..");

var _everMo = require("@ali/4ever-mo");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  ImTagPlugin: _.ImTagPlugin
});
const plugins = createBiPlugins({
  imTag: {
    locale: {
      imFrom: '来自会话'
    },
    jumpToConversition: cid => {},
    getConversitionNameFromCid: cid => {
      return new Promise(success => {
        setTimeout(() => {
          success({
            success: true,
            imTitle: '这里是群名'
          });
        }, 0);
      });
    }
  }
}).array;

var _ref = (0, _everDevTest.jsx)("cursor", null);

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "End Paragraph");

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "End Paragraph");

describe('Bi/imTag/behaviour', () => {
  test('首次打开后更新数据', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "Start Paragraph", (0, _everDevTest.jsx)("inline", {
      type: "tag",
      data: {
        tagType: 'im',
        height: 24,
        width: 100,
        metadata: {
          imTitle: '233'
        }
      }
    }), _ref), _ref2));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "Start Paragraph", (0, _everDevTest.jsx)("inline", {
      type: "tag",
      data: {
        tagType: 'im',
        height: 24,
        width: 100,
        metadata: {
          imTitle: '这里是群名'
        }
      }
    }), _ref3), _ref4));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const node = controller.value.document.findDescendant(n => _everMo.Tag.isTag(n));
    expect(_everMo.Tag.isTag(node)).toBe(true);
    controller.run('onAction', (0, _.setTagData)(node, {
      metadata: {
        imTitle: '这里是群名'
      }
    }));
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
});
//# sourceMappingURL=behaviour.test.js.map