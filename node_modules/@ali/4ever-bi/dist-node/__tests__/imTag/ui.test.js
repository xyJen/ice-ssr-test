"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _ = require("../..");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _everDevTest = require("@ali/4ever-dev-test");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({ // @ts-ignore
  ..._.plugins,
  // @ts-ignore
  ImTagPlugin: _.ImTagPlugin
});

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const Editor = props => {
  const {
    defaultValue,
    imTitle
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    return createBiPlugins({
      imTag: {
        locale: {
          imFrom: '来自会话'
        },
        jumpToConversition: cid => {},
        getConversitionNameFromCid: () => {
          return new Promise(success => {
            setTimeout(() => {
              success({
                success: true,
                imTitle
              });
            }, 1000); // 兼容 ut 执行
          });
        }
      }
    });
  }, [imTitle]);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    autoFocus: true
  }, _ref);
};

var _ref2 = (0, _everDevTest.jsx)("cursor", null);

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/tag/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('imTag 正常渲染', () => {
    test('正常渲染 + 群名无更新', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'im',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }), _ref2)));
      const {
        queryByTestId,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        imTitle: "\u84DD\u9CB8-\u6587\u6863\u534F\u540C"
      }));
      const im = queryByTestId('im');
      expect(im.textContent).toBe('来自会话 蓝鲸-文档协同');
      await new Promise(success => {
        setTimeout(() => success(), 1000);
      });
      const newTagNode = await findByText('来自会话 蓝鲸-文档协同');
      expect(!!newTagNode).toBe(true);
    });
    test('正常渲染 + 群名已更新', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "paragraph"
      }, "123", (0, _everDevTest.jsx)("inline", {
        type: "tag",
        data: {
          tagType: 'im',
          height: 20,
          width: 100,
          metadata: {
            imTitle: '蓝鲸-文档协同'
          }
        }
      }), _ref3)));
      const {
        queryByTestId,
        findByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        imTitle: "\u8FD9\u91CC\u662F\u5F02\u6B65\u52A0\u8F7D\u7FA4\u540D"
      }));
      const im = queryByTestId('im');
      expect(im.textContent).toBe('来自会话 蓝鲸-文档协同');
      const newTagNode = await findByText('来自会话 这里是异步加载群名');
      expect(!!newTagNode).toBe(true);
    });
  });
});
//# sourceMappingURL=ui.test.js.map