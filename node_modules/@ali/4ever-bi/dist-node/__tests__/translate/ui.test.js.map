{"version":3,"sources":["../../../../src/__tests__/translate/ui.test.tsx"],"names":["createBiPlugins","translate","SAMPLE_INPUT","TRANSLATED_SAMPLE_INPUT_REPLACE","TRANSLATED_SAMPLE_INPUT_INSERT","Editor","props","defaultValue","translateConfig","value","setValue","React","useState","plugins","useMemo","config","locale","outputLanguageList","title","key","defaultOutputLanguage","getTranslation","input","res","Promise","resolve","handleChange","useCallback","changed","describe","beforeAll","jest","spyOn","console","error","mockImplementation","afterAll","mockRestore","afterEach","test","queryByTestId","Mo","textToValue","content","button","fireEvent","click","expect","textContent","toBe","interval"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport * as React from 'react';\nimport { Value } from '@ali/4ever-cangjie';\nimport {\n  cleanup,\n  waitForElement,\n  wait,\n} from '@testing-library/react';\nimport {\n  fireEvent,\n  renderEditor,\n  jsx,\n} from '@ali/4ever-dev-test';\nimport Mo from '../serializer';\nimport translate from '../../plugins/translate';\nimport { ITranslateConfig } from '../../plugins/translate/components/sidebar';\nimport { Sidebar } from '@ali/4ever-component';\nimport locale from '../../locales/zh_CN';\nimport { createCustomizedBiPlugins, Toolbar } from '../..';\nimport Provider from '../../provider';\nimport Content from '../../content';\n\ninterface EditorProps {\n  translateConfig?: Partial<ITranslateConfig>;\n  defaultValue: Value;\n}\n\nconst createBiPlugins = createCustomizedBiPlugins({\n  translate,\n});\n\nconst SAMPLE_INPUT = '这是测试用翻译文档';\nconst TRANSLATED_SAMPLE_INPUT_REPLACE = `TRANSLATED_${SAMPLE_INPUT}`;\nconst TRANSLATED_SAMPLE_INPUT_INSERT = `${SAMPLE_INPUT}TRANSLATED_${SAMPLE_INPUT}`;\n\nconst Editor: React.FC<EditorProps> = props => {\n  const { defaultValue, translateConfig = {} } = props;\n  const [value, setValue] = React.useState(defaultValue);\n  const plugins = React.useMemo(() => {\n    const config: ITranslateConfig = {\n      ...locale.translate,\n      outputLanguageList: [\n        {\n          title: '英文',\n          key: 'en',\n        },\n        {\n          title: '中文',\n          key: 'zh',\n        },\n      ],\n      defaultOutputLanguage: 'en',\n      getTranslation: ({ input }) => {\n        const res = `TRANSLATED_${input}`;\n        return Promise.resolve(res);\n      },\n      ...translateConfig,\n    };\n\n    return createBiPlugins({\n      translate: config,\n    });\n  }, [translateConfig]);\n\n  const handleChange = React.useCallback(changed => {\n    setValue(changed.value);\n  }, []);\n\n  return (\n    <Provider value={value} onChange={handleChange} plugins={plugins} autoFocus>\n      <Toolbar plugins={plugins} layout={[['translate']]} />\n      <Sidebar\n        plugins={plugins}\n        type=\"translate\"\n      />\n      <Content />\n    </Provider>\n  );\n};\n\ndescribe('Bi/translate/ui', () => {\n  beforeAll(() => {\n    // 防止被 componentDidCatch catch 的 error 被控制台输出\n    jest.spyOn(console, 'error');\n    // @ts-ignore\n    console.error.mockImplementation(() => { });\n  });\n\n  afterAll(() => {\n    // @ts-ignore\n    console.error.mockRestore();\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('translate', () => {\n    test('插入翻译插件', async () => {\n      const { queryByTestId } = await renderEditor(\n        <Editor defaultValue={Mo.textToValue(SAMPLE_INPUT)} />,\n      );\n      await waitForElement(() => queryByTestId('translate-panel'));\n    });\n    test('翻译文案-替换', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor />\n              {SAMPLE_INPUT}\n              <focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n      const { queryByTestId, content } = await renderEditor(\n        <Editor defaultValue={value} />,\n      );\n      const button = await waitForElement(() => queryByTestId('translate-replace'));\n      fireEvent.click(button!);\n      await Promise.resolve();\n      // @ts-ignore\n      expect(content.textContent).toBe(TRANSLATED_SAMPLE_INPUT_REPLACE);\n    });\n    test('翻译文案-插入', async () => {\n      const value = ((\n        <value>\n          <document>\n            <block type=\"paragraph\">\n              <anchor />\n              {SAMPLE_INPUT}\n              <focus />\n            </block>\n          </document>\n        </value>\n      ) as unknown) as Value;\n      const { queryByTestId, content } = await renderEditor(\n        <Editor defaultValue={value} />,\n      );\n      await wait(() => { }, { interval: 1000 });\n      const button = queryByTestId('translate-insert');\n      fireEvent.click(button!);\n      await Promise.resolve();\n      // @ts-ignore\n      expect(content.textContent).toBe(TRANSLATED_SAMPLE_INPUT_INSERT);\n    });\n  });\n});\n"],"file":"ui.test.js"}