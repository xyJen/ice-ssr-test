"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _react2 = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _serializer = _interopRequireDefault(require("../serializer"));

var _translate = _interopRequireDefault(require("../../plugins/translate"));

var _everComponent = require("@ali/4ever-component");

var _zh_CN = _interopRequireDefault(require("../../locales/zh_CN"));

var _ = require("../..");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({
  translate: _translate.default
});
const SAMPLE_INPUT = '这是测试用翻译文档';
const TRANSLATED_SAMPLE_INPUT_REPLACE = `TRANSLATED_${SAMPLE_INPUT}`;
const TRANSLATED_SAMPLE_INPUT_INSERT = `${SAMPLE_INPUT}TRANSLATED_${SAMPLE_INPUT}`;

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const Editor = props => {
  const {
    defaultValue,
    translateConfig = {}
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    const config = { ..._zh_CN.default.translate,
      outputLanguageList: [{
        title: '英文',
        key: 'en'
      }, {
        title: '中文',
        key: 'zh'
      }],
      defaultOutputLanguage: 'en',
      getTranslation: ({
        input
      }) => {
        const res = `TRANSLATED_${input}`;
        return Promise.resolve(res);
      },
      ...translateConfig
    };
    return createBiPlugins({
      translate: config
    });
  }, [translateConfig]);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    autoFocus: true
  }, (0, _everDevTest.jsx)(_.Toolbar, {
    plugins: plugins,
    layout: [['translate']]
  }), (0, _everDevTest.jsx)(_everComponent.Sidebar, {
    plugins: plugins,
    type: "translate"
  }), _ref);
};

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), SAMPLE_INPUT, (0, _everDevTest.jsx)("focus", null))));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), SAMPLE_INPUT, (0, _everDevTest.jsx)("focus", null))));

describe('Bi/translate/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('translate', () => {
    test('插入翻译插件', async () => {
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: _serializer.default.textToValue(SAMPLE_INPUT)
      }));
      await (0, _react2.waitForElement)(() => queryByTestId('translate-panel'));
    });
    test('翻译文案-替换', async () => {
      const value = _ref2;
      const {
        queryByTestId,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      const button = await (0, _react2.waitForElement)(() => queryByTestId('translate-replace'));

      _everDevTest.fireEvent.click(button);

      await Promise.resolve(); // @ts-ignore

      expect(content.textContent).toBe(TRANSLATED_SAMPLE_INPUT_REPLACE);
    });
    test('翻译文案-插入', async () => {
      const value = _ref3;
      const {
        queryByTestId,
        content
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value
      }));
      await (0, _react2.wait)(() => {}, {
        interval: 1000
      });
      const button = queryByTestId('translate-insert');

      _everDevTest.fireEvent.click(button);

      await Promise.resolve(); // @ts-ignore

      expect(content.textContent).toBe(TRANSLATED_SAMPLE_INPUT_INSERT);
    });
  });
});
//# sourceMappingURL=ui.test.js.map