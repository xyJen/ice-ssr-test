"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _createCustomizedBiPlugins = _interopRequireDefault(require("../../createCustomizedBiPlugins"));

var _everPluginInlineCode = require("@ali/4ever-plugin-inline-code");

var _everPluginMarks = require("@ali/4ever-plugin-marks");

var _everBi = require("@ali/4ever-bi");

var _everCangjie = require("@ali/4ever-cangjie");

var _everDevTest = require("@ali/4ever-dev-test");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _createCustomizedBiPlugins.default)({
  inlineCode: _everPluginInlineCode.biFactory,
  marks: _everPluginMarks.biFactory,
  link: _everBi.plugins.link,
  image: _everBi.plugins.image
});
const cases = [{
  name: 'plainText + expanded selection',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("anchor", null), "Hello", (0, _everDevTest.jsx)("focus", null))))
}, {
  name: 'expanded selection in old inlineCode',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("m", {
    type: "inlineCode"
  }, "He", (0, _everDevTest.jsx)("anchor", null), "ll", (0, _everDevTest.jsx)("focus", null), "o"))))
}, {
  name: 'expanded selection in new inlineCode',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
    type: "inlineCode"
  }, "He", (0, _everDevTest.jsx)("anchor", null), "ll", (0, _everDevTest.jsx)("focus", null), "o"), (0, _everDevTest.jsx)("text", null))))
}, {
  name: 'collapsed selection in new inlineCode',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
    type: "inlineCode"
  }, "He", (0, _everDevTest.jsx)("cursor", null), "llo"), (0, _everDevTest.jsx)("text", null))))
}];
const disabledCases = [{
  name: 'plainText + collapsed selection',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, "He", (0, _everDevTest.jsx)("cursor", null), "llo")))
}, {
  name: 'collapsed selection in old inlineCode',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("m", {
    type: "inlineCode"
  }, "He", (0, _everDevTest.jsx)("cursor", null), "llo"))))
}, {
  name: 'expanded selection over text and old inlineCode',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("m", {
    type: "inlineCode"
  }, "He", (0, _everDevTest.jsx)("anchor", null), "llo"), " Wor", (0, _everDevTest.jsx)("focus", null), "ld"))),
  ignoreInOld: true
}, {
  name: 'expanded selection over text and new inlineCode',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
    type: "inlineCode"
  }, "He", (0, _everDevTest.jsx)("anchor", null), "llo"), (0, _everDevTest.jsx)("text", null, " Wor", (0, _everDevTest.jsx)("focus", null), "ld")))),
  ignoreInOld: true
}, {
  name: 'expanded selection over old and new inlineCode',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("m", {
    type: "inlineCode"
  }, "He", (0, _everDevTest.jsx)("anchor", null), "llo"), (0, _everDevTest.jsx)("text", null, " new"), (0, _everDevTest.jsx)("inline", {
    type: "inlineCode"
  }, "World", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("text", null)))),
  ignoreInOld: true
}, {
  name: 'expanded selection over new inlineCodes',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
    type: "inlineCode"
  }, "He", (0, _everDevTest.jsx)("anchor", null), "llo"), (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
    type: "inlineCode"
  }, "World", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("text", null)))),
  ignoreInOld: true
}, {
  name: 'expanded selection over other inlines',
  input: (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, (0, _everDevTest.jsx)("text", null, (0, _everDevTest.jsx)("anchor", null)), (0, _everDevTest.jsx)("inline", {
    type: "image"
  }, (0, _everDevTest.jsx)("text", null)), (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
    type: "link"
  }, "World", (0, _everDevTest.jsx)("focus", null)), (0, _everDevTest.jsx)("text", null)))),
  ignoreInOld: true
}];

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
  type: "inlineCode"
}, "Hello"), (0, _everDevTest.jsx)("text", null, (0, _everDevTest.jsx)("cursor", null)))));

var _ref2 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("m", {
  type: "inlineCode"
}, "He"), (0, _everDevTest.jsx)("anchor", null), "ll", (0, _everDevTest.jsx)("focus", null), (0, _everDevTest.jsx)("m", {
  type: "inlineCode"
}, "o"))));

var _ref3 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "He", (0, _everDevTest.jsx)("anchor", null), "ll", (0, _everDevTest.jsx)("focus", null), "o")));

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "He", (0, _everDevTest.jsx)("cursor", null), "llo")));

describe('Bi/inlineCode(new)/behavior', () => {
  const plugins = createBiPlugins({
    inlineCode: {
      gray: true
    }
  }).array;

  const runCase = ({
    name,
    input,
    output
  }) => {
    it(name, () => {
      const controller = _everCangjie.Controller.create({
        value: input,
        plugins
      });

      controller.run('onAction', (0, _everPluginInlineCode.toggleInlineCode)());
      const actual = controller.value.toJSON({
        preserveSelections: true
      });
      const expected = output.toJSON({
        preserveSelections: true
      });
      expect(actual).toEqual(expected);
    });
  };

  describe('toggleInlineCode', () => {
    const ans = [_ref, _ref2, _ref3, _ref4];
    cases.forEach((item, index) => runCase({ ...item,
      output: ans[index]
    }));
    disabledCases.forEach(item => runCase({ ...item,
      output: item.input
    }));
  });
});

var _ref5 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), (0, _everDevTest.jsx)("m", {
  type: "inlineCode"
}, "Hello"), (0, _everDevTest.jsx)("focus", null))));

var _ref6 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("m", {
  type: "inlineCode"
}, "He"), (0, _everDevTest.jsx)("anchor", null), "ll", (0, _everDevTest.jsx)("focus", null), (0, _everDevTest.jsx)("m", {
  type: "inlineCode"
}, "o"))));

var _ref7 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
  type: "inlineCode"
}, "He", (0, _everDevTest.jsx)("m", {
  type: "inlineCode"
}, (0, _everDevTest.jsx)("anchor", null), "ll", (0, _everDevTest.jsx)("focus", null)), "o"), (0, _everDevTest.jsx)("text", null))));

var _ref8 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("text", null), (0, _everDevTest.jsx)("inline", {
  type: "inlineCode"
}, "He", (0, _everDevTest.jsx)("cursor", null), "llo"), (0, _everDevTest.jsx)("text", null))));

describe('Bi/inlineCode(old)/behavior', () => {
  const plugins = createBiPlugins({
    inlineCode: {
      gray: false
    }
  }).array;

  const runCase = ({
    name,
    input,
    output
  }) => {
    it(name, () => {
      const controller = _everCangjie.Controller.create({
        value: input,
        plugins
      });

      controller.run('onAction', (0, _everPluginInlineCode.toggleInlineCode)());
      const actual = controller.value.toJSON({
        preserveSelections: true
      });
      const expected = output.toJSON({
        preserveSelections: true
      });
      expect(actual).toEqual(expected);
    });
  };

  describe('toggleInlineCode', () => {
    const ans = [_ref5, _ref6, _ref7, _ref8];
    cases.forEach((item, index) => runCase({ ...item,
      output: ans[index]
    }));
    disabledCases.forEach(item => !item.ignoreInOld && runCase({ ...item,
      output: item.input
    }));
  });
});
//# sourceMappingURL=behaviour.test.js.map