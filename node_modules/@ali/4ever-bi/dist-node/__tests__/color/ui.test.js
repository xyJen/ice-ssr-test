"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

require("@testing-library/jest-dom/extend-expect");

var React = _interopRequireWildcard(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _lodash = require("lodash");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _createBiPlugins = _interopRequireDefault(require("../../createBiPlugins"));

var _everComponent = require("@ali/4ever-component");

var _zh_CN = _interopRequireDefault(require("../../locales/zh_CN"));

/** @jsx jsx */
const defaultValue = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph",
  key: "A"
}, (0, _everDevTest.jsx)("text", {
  key: "textA"
}, "helloWord"))));
const toolbarLayout = [{
  toolButtons: [{
    name: 'color.colorAndHighlight'
  }]
}];

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const App = props => {
  const {
    val = defaultValue,
    controllerRef
  } = props;
  const [value, setValue] = React.useState(val);
  const plugins = (0, _createBiPlugins.default)(_zh_CN.default);
  const handleChange = React.useCallback(change => {
    setValue(change.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    plugins: plugins,
    onChange: handleChange,
    autoFocus: true,
    controllerRef: controllerRef
  }, _ref, (0, _everDevTest.jsx)(_everComponent.Trigger, {
    getScrollableContainer: () => document.body,
    getScrollableContent: () => document.body,
    toolbarLayout: toolbarLayout
  }));
};

describe('bi/color/selectionBar', () => {
  it('focus 到自定义色板输入框, 工具栏不消失', async () => {
    const controllerRef = jest.fn();
    const {
      queryByTestId,
      content,
      queryAllByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(App, {
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    controller.command(_everCangjie.Commands.moveToRangeOfDocument);

    _everDevTest.fireEvent.mouseUp(content);

    expect(queryByTestId('selection-bar')).not.toBeNull();
    const colorButton = queryByTestId('splitbutton-arrow-bi-toolbar-combined-color');

    _everDevTest.fireEvent.click(colorButton);

    const customColorButton = queryAllByTestId('custom-color-trigger')[0];

    _everDevTest.fireEvent.click(customColorButton);

    const customColorInput = queryAllByTestId('custom-color-input')[0];

    _everDevTest.fireEvent.focus(customColorInput);

    expect(queryByTestId('selection-bar')).not.toBeNull();
  });
  it('focus 到自定义色板输入框, 关闭自定义色板, 工具栏不消失', async () => {
    const controllerRef = jest.fn();
    const {
      queryByTestId,
      content,
      queryAllByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(App, {
      controllerRef: controllerRef
    }));
    const controller = (0, _lodash.last)(controllerRef.mock.calls)[0];
    controller.command(_everCangjie.Commands.moveToRangeOfDocument);

    _everDevTest.fireEvent.mouseUp(content);

    expect(queryByTestId('selection-bar')).not.toBeNull();
    const colorButton = queryByTestId('splitbutton-arrow-bi-toolbar-combined-color');

    _everDevTest.fireEvent.click(colorButton);

    const customColorButton = queryAllByTestId('custom-color-trigger')[0];

    _everDevTest.fireEvent.click(customColorButton);

    const customColorInput = queryAllByTestId('custom-color-input')[0];

    _everDevTest.fireEvent.focus(customColorInput);

    _everDevTest.fireEvent.click(customColorButton);

    expect(queryByTestId('selection-bar')).not.toBeNull();
  });
});
//# sourceMappingURL=ui.test.js.map