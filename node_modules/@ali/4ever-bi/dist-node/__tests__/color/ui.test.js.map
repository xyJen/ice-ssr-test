{"version":3,"sources":["../../../../src/__tests__/color/ui.test.tsx"],"names":["defaultValue","toolbarLayout","toolButtons","name","App","props","val","controllerRef","value","setValue","React","useState","plugins","locale","handleChange","useCallback","change","document","body","describe","it","jest","fn","queryByTestId","content","queryAllByTestId","controller","mock","calls","command","Commands","moveToRangeOfDocument","fireEvent","mouseUp","expect","not","toBeNull","colorButton","click","customColorButton","customColorInput","focus"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport '@testing-library/jest-dom/extend-expect';\nimport * as React from 'react';\nimport { fireEvent, jsx, renderEditor } from '@ali/4ever-dev-test';\nimport { Value, Change, Controller, Commands } from '@ali/4ever-cangjie';\nimport { last } from 'lodash-es';\n\nimport Provider from '../../provider';\nimport Content from '../../content';\nimport createBiPlugins from '../../createBiPlugins';\nimport { Trigger as SelectionBar } from '@ali/4ever-component';\nimport locale from '../../locales/zh_CN';\nimport { waitFor } from '@testing-library/react';\n\nconst defaultValue = ((\n  <value>\n    <document>\n      <block type=\"paragraph\" key=\"A\">\n        <text key=\"textA\">helloWord</text>\n      </block>\n    </document>\n  </value>\n) as unknown) as Value;\n\nconst toolbarLayout = [\n  {\n    toolButtons: [\n      {\n        name: 'color.colorAndHighlight',\n      },\n    ],\n  },\n];\n\nconst App: React.FC<{\n  val?: Value;\n  controllerRef?: (controller: Controller) => void;\n}> = (props) => {\n  const { val = defaultValue, controllerRef } = props;\n  const [value, setValue] = React.useState(val);\n  const plugins = createBiPlugins(locale);\n\n  const handleChange = React.useCallback((change: Change) => {\n    setValue(change.value);\n  }, []);\n\n  return (\n    <Provider\n      value={value}\n      plugins={plugins}\n      onChange={handleChange}\n      autoFocus\n      controllerRef={controllerRef}\n    >\n      <Content />\n      <SelectionBar\n        getScrollableContainer={() => document.body}\n        getScrollableContent={() => document.body}\n        toolbarLayout={toolbarLayout}\n      />\n    </Provider>\n  );\n};\n\ndescribe('bi/color/selectionBar', () => {\n  it('focus 到自定义色板输入框, 工具栏不消失', async () => {\n    const controllerRef = jest.fn();\n    const { queryByTestId, content, queryAllByTestId } = await renderEditor(\n      <App controllerRef={controllerRef} />,\n    );\n    const controller = last(controllerRef.mock.calls)[0] as Controller;\n\n    controller.command(Commands.moveToRangeOfDocument);\n    fireEvent.mouseUp(content);\n    expect(queryByTestId('selection-bar')).not.toBeNull();\n\n    const colorButton = queryByTestId(\n      'splitbutton-arrow-bi-toolbar-combined-color',\n    );\n    fireEvent.click(colorButton!);\n\n    const customColorButton = queryAllByTestId('custom-color-trigger')[0];\n    fireEvent.click(customColorButton!);\n\n    const customColorInput = queryAllByTestId('custom-color-input')[0];\n    fireEvent.focus(customColorInput!);\n\n    expect(queryByTestId('selection-bar')).not.toBeNull();\n  });\n\n  it('focus 到自定义色板输入框, 关闭自定义色板, 工具栏不消失', async () => {\n    const controllerRef = jest.fn();\n    const { queryByTestId, content, queryAllByTestId } = await renderEditor(\n      <App controllerRef={controllerRef} />,\n    );\n    const controller = last(controllerRef.mock.calls)[0] as Controller;\n\n    controller.command(Commands.moveToRangeOfDocument);\n    fireEvent.mouseUp(content);\n    expect(queryByTestId('selection-bar')).not.toBeNull();\n\n    const colorButton = queryByTestId(\n      'splitbutton-arrow-bi-toolbar-combined-color',\n    );\n    fireEvent.click(colorButton!);\n\n    const customColorButton = queryAllByTestId('custom-color-trigger')[0];\n\n    fireEvent.click(customColorButton!);\n\n    const customColorInput = queryAllByTestId('custom-color-input')[0];\n    fireEvent.focus(customColorInput!);\n\n    fireEvent.click(customColorButton!);\n\n    expect(queryByTestId('selection-bar')).not.toBeNull();\n  });\n});\n"],"file":"ui.test.js"}