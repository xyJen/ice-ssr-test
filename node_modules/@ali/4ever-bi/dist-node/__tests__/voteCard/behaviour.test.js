"use strict";

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _ = require("../..");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({ ..._.plugins,
  voteCard: _.VoteCardPlugin
});
const plugins = createBiPlugins({
  voteCard: {
    locale: {
      remove: '删除',
      add: '添加',
      expired: '截止',
      reVote: '重新投票',
      deadline: '截止日期',
      unit: '票',
      total: '人投票',
      submit: '投票',
      noDeadline: '无截止日期',
      creator: '创建',
      titlePlaceholder: '请输入标题',
      optionPlaceholder: '请输入选项内容',
      checkbox: '多选',
      resultShow: '单选',
      always: '始终显示',
      afterVote: '投票后可见',
      radio: '单选',
      save: '保存',
      cancel: '取消',
      edit: '编辑'
    },
    createVote: () => {},
    getVote: () => {},
    modifyVote: () => {},
    submitVote: () => {},
    isGrayEnable: true
  }
}).array;
const DEFAULT_DATA = {
  title: '',
  voteType: 1,
  optionInfoList: [{
    content: '',
    pos: 1,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '',
    pos: 2,
    optionTicket: 0,
    userOptionTicket: 0
  }],
  endTime: new Date().getTime() + 1000 * 60 * 60 * 24 * 7,
  showTicketBeforeVoting: false
};

var _ref = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234", (0, _everDevTest.jsx)("cursor", null), "56789")));

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "1234");

var _ref3 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("cursor", null), "56789");

var _ref4 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "Start Paragraph", (0, _everDevTest.jsx)("cursor", null));

var _ref5 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "End Paragraph");

var _ref6 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, (0, _everDevTest.jsx)("anchor", null), "Start Paragraph");

var _ref7 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "End Paragraph", (0, _everDevTest.jsx)("focus", null));

describe('Bi/voteCard/behaviour', () => {
  test('插入投票卡片', () => {
    const value = _ref;
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref2, (0, _everDevTest.jsx)("block", {
      type: "card",
      data: {
        "cardType": 'vote',
        'height': 300,
        metadata: DEFAULT_DATA
      }
    }), _ref3));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.command('insertCard', {
      cardType: 'vote',
      height: 300,
      metadata: DEFAULT_DATA
    });
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
  test('在正文全选，可以选中投票卡片', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref4, (0, _everDevTest.jsx)("block", {
      type: "card",
      data: {
        "cardType": 'vote',
        'height': 300,
        metadata: DEFAULT_DATA
      }
    }), (0, _everDevTest.jsx)("block", {
      type: "card",
      data: {
        "cardType": 'vote',
        'height': 300,
        metadata: DEFAULT_DATA
      }
    }), _ref5));
    const output = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, _ref6, (0, _everDevTest.jsx)("block", {
      type: "card",
      data: {
        "cardType": 'vote',
        'height': 300,
        metadata: DEFAULT_DATA
      }
    }), (0, _everDevTest.jsx)("block", {
      type: "card",
      data: {
        "cardType": 'vote',
        'height': 300,
        metadata: DEFAULT_DATA
      }
    }), _ref7));

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    controller.command(_everCangjie.Commands.moveToRangeOfDocument);
    const actual = controller.value.toJSON({
      preserveSelections: true
    });
    const expected = controller.setValue(output).value.toJSON({
      preserveSelections: true
    });
    expect(actual).toEqual(expected);
  });
});
//# sourceMappingURL=behaviour.test.js.map