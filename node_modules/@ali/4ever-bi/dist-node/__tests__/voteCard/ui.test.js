"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var React = _interopRequireWildcard(require("react"));

var _ = require("../..");

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _provider = _interopRequireDefault(require("../../provider"));

var _content = _interopRequireDefault(require("../../content"));

var _everDevTest = require("@ali/4ever-dev-test");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const createBiPlugins = (0, _.createCustomizedBiPlugins)({ ..._.plugins,
  voteCard: _.VoteCardPlugin
});

var _ref = (0, _everDevTest.jsx)(_content.default, null);

const Editor = props => {
  const {
    defaultValue,
    voteCardConfig
  } = props;
  const [value, setValue] = React.useState(defaultValue);
  const plugins = React.useMemo(() => {
    return createBiPlugins({
      voteCard: voteCardConfig
    });
  }, [voteCardConfig]);
  const handleChange = React.useCallback(changed => {
    setValue(changed.value);
  }, []);
  return (0, _everDevTest.jsx)(_provider.default, {
    value: value,
    onChange: handleChange,
    plugins: plugins,
    autoFocus: true
  }, _ref);
};

const editingData = {
  title: '',
  voteType: 1,
  optionInfoList: [{
    content: '',
    pos: 1,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '',
    pos: 2,
    optionTicket: 0,
    userOptionTicket: 0
  }],
  endTime: new Date().getTime() + 1000 * 60 * 60 * 24 * 7,
  showTicketBeforeVoting: false
};
const createData = {
  title: '文字蓝鲸团队2022团建计划',
  voteId: 'abc-123',
  voteType: 1,
  optionInfoList: [{
    content: '北京环球影城',
    pos: 1,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '上海迪士尼',
    pos: 2,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '广州长隆乐园',
    pos: 3,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '常州中华恐龙园',
    pos: 4,
    optionTicket: 0,
    userOptionTicket: 0
  }],
  endTime: new Date().getTime() + 1000 * 60 * 60 * 24 * 7,
  showTicketBeforeVoting: false
};
const serviceErrorData = {
  isServiceError: true,
  serviceErrorMsg: '服务端错误'
};
const modifyData = {
  title: '文字蓝鲸团队2022团建计划',
  voteId: 'abc-123',
  voteType: 2,
  optionInfoList: [{
    content: '北京环球影城',
    pos: 1,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '上海迪士尼',
    pos: 2,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '广州长隆乐园',
    pos: 3,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '常州中华恐龙园',
    pos: 4,
    optionTicket: 0,
    userOptionTicket: 0
  }],
  endTime: new Date().getTime() + 1000 * 60 * 60 * 24 * 7,
  showTicketBeforeVoting: false
};
const voteData = {
  title: '文字蓝鲸团队2022团建计划',
  voteId: 'abc-123',
  voteType: 1,
  optionInfoList: [{
    content: '北京环球影城',
    pos: 1,
    optionTicket: 1,
    userOptionTicket: 0
  }, {
    content: '上海迪士尼',
    pos: 2,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '广州长隆乐园',
    pos: 3,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '常州中华恐龙园',
    pos: 4,
    optionTicket: 0,
    userOptionTicket: 0
  }],
  endTime: new Date().getTime() + 1000 * 60 * 60 * 24 * 7,
  showTicketBeforeVoting: false,
  participateUserCount: 1,
  totalVoteCount: 1
};
const votedData = {
  title: '文字蓝鲸团队2022团建计划',
  voteId: 'abc-123',
  voteType: 1,
  optionInfoList: [{
    content: '北京环球影城',
    pos: 1,
    optionTicket: 1,
    userOptionTicket: 0
  }, {
    content: '上海迪士尼',
    pos: 2,
    optionTicket: 0,
    userOptionTicket: 1
  }, {
    content: '广州长隆乐园',
    pos: 3,
    optionTicket: 0,
    userOptionTicket: 0
  }, {
    content: '常州中华恐龙园',
    pos: 4,
    optionTicket: 0,
    userOptionTicket: 0
  }],
  endTime: new Date().getTime() + 1000 * 60 * 60 * 24 * 7,
  showTicketBeforeVoting: false,
  participateUserCount: 2,
  totalVoteCount: 2
};

const createVoteCardConfig = config => {
  return {
    locale: {
      remove: '删除',
      add: '添加',
      expired: '截止',
      reVote: '重新投票',
      deadline: '截止日期',
      unit: '票',
      total: '人投票',
      submit: '投票',
      noDeadline: '无截止日期',
      creator: '创建',
      titlePlaceholder: '请输入标题',
      optionPlaceholder: '请输入选项内容',
      checkbox: '多选',
      resultShow: '单选',
      always: '始终显示',
      afterVote: '投票后可见',
      radio: '单选',
      save: '保存',
      cancel: '取消',
      edit: '编辑'
    },
    createVote: () => {
      return Promise.resolve(createData);
    },
    // getVote: (_id, setData) => {
    //   return setData(createData);
    // },
    modifyVote: () => {
      return Promise.resolve(modifyData);
    },
    submitVote: () => {
      return Promise.resolve(voteData);
    },
    isGrayEnable: true,
    ...config
  };
};

const createVoteCardConfig2 = config => {
  return {
    locale: {
      remove: '删除',
      add: '添加',
      expired: '截止',
      reVote: '重新投票',
      deadline: '截止日期',
      unit: '票',
      total: '人投票',
      submit: '投票',
      noDeadline: '无截止日期',
      creator: '创建',
      titlePlaceholder: '请输入标题',
      optionPlaceholder: '请输入选项内容',
      checkbox: '多选',
      resultShow: '单选',
      always: '始终显示',
      afterVote: '投票后可见',
      radio: '单选',
      save: '保存',
      cancel: '取消',
      edit: '编辑'
    },
    createVote: () => {
      return Promise.resolve(createData);
    },
    getVote: (_id, callback) => {
      return callback(serviceErrorData);
    },
    modifyVote: () => {
      return Promise.resolve(modifyData);
    },
    submitVote: () => {
      return Promise.resolve(voteData);
    },
    isGrayEnable: true,
    ...config
  };
};

describe('Bi/voteCard/ui', () => {
  beforeAll(() => {
    // 防止被 componentDidCatch catch 的 error 被控制台输出
    jest.spyOn(console, 'error'); // @ts-ignore

    console.error.mockImplementation(() => {});
  });
  afterAll(() => {
    // @ts-ignore
    console.error.mockRestore();
  });
  afterEach(() => {
    (0, _react2.cleanup)();
  });
  describe('Bi/voteCard/UI', () => {
    test('正常渲染投票态-未投票，未设置始终可见', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: voteData
        }
      })));
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig({})
      }));
      const voteTitle = queryByTestId('card-vote-voting-title').textContent;
      expect(voteTitle).toBe(voteData.title);
    });
    test('正常渲染编辑态-未生成voteId时', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: editingData
        }
      })));
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig({})
      }));
      const voteEditCard = queryByTestId('card-vote-container-edit');
      expect(!!voteEditCard).toBe(true);
    });
    test('正常渲染结果页-设置始终可见', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: { ...voteData,
            showTicketBeforeVoting: true
          }
        }
      })));
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig({})
      }));
      const voteTitle = queryByTestId('card-vote-result-title').textContent;
      expect(voteTitle).toBe(voteData.title);
    });
    test('正常渲染结果页-已投票', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: votedData
        }
      })));
      const {
        queryByTestId
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig({})
      }));
      const voteTitle = queryByTestId('card-vote-result-title').textContent;
      expect(voteTitle).toBe(voteData.title);
    });
    test('切换：结果页 -> 编辑态 -> 结果页', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: votedData
        }
      })));
      const {
        queryByTestId,
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig({})
      }));
      const voteCard = queryByTestId('card-vote-container-result');
      expect(!!voteCard).toBe(true);

      _everDevTest.fireEvent.mouseOver(voteCard);

      const editBtn = queryByTestId('card-vote-header-toolbar-edit');

      _everDevTest.fireEvent.click(editBtn);

      await sleep(1000);
      const voteEditCard = queryByTestId('card-vote-container-edit');
      expect(!!voteEditCard).toBe(true);
      const cancelBtn = queryByText('取消');

      _everDevTest.fireEvent.click(cancelBtn);

      await (0, _react2.waitFor)(() => {
        const voteCard = queryByTestId('card-vote-container-result');
        expect(!!voteCard).toBe(true);
      });
    });
    test.skip('编辑：创建', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: editingData
        }
      })));
      const {
        queryByTestId,
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig({})
      }));
      const voteEditCard = queryByTestId('card-vote-container-edit');
      expect(!!voteEditCard).toBe(true); // 修改标题

      const titleDom = queryByTestId('card-vote-edit-title');
      const options = queryByTestId('card-vote-edit-options');

      _everDevTest.fireEvent.change(titleDom, {
        target: {
          value: '修改title'
        }
      });

      await sleep(200); // const title = queryByTestId('card-vote-edit-title');
      // 添加选项

      const saveBtn = queryByText('保存');

      _everDevTest.fireEvent.click(saveBtn);

      const title = queryByTestId('card-vote-edit-title');
      const votingCard = queryByTestId('card-vote-container-voting');
      expect(!!votingCard).toBe(true);
    });
    test.skip('编辑：修改', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: votedData
        }
      })));
      const {
        queryByTestId,
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig({})
      }));
      const voteCard = queryByTestId('card-vote-container-result');
      expect(!!voteCard).toBe(true);

      _everDevTest.fireEvent.mouseOver(voteCard);

      const editBtn = queryByTestId('card-vote-header-toolbar-edit');

      _everDevTest.fireEvent.click(editBtn);

      await sleep(1000);
      const voteEditCard = queryByTestId('card-vote-container-edit');
      expect(!!voteEditCard).toBe(true); // 修改标题

      const titleDom = queryByTestId('card-vote-edit-title');

      _everDevTest.fireEvent.change(titleDom, {
        target: {
          value: '修改title'
        }
      }); // 添加选项


      const saveBtn = queryByText('保存');

      _everDevTest.fireEvent.click(saveBtn);

      const resultCard = queryByTestId('card-vote-container-result');
      expect(!!resultCard).toBe(true);
    });
    test.skip('投票：发起投票', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: voteData
        }
      })));
      const {
        queryByTestId,
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig({})
      }));
      const votingCard = queryByTestId('card-vote-container-voting');
      expect(!!votingCard).toBe(true);
      const voteBtn = queryByText('投票');

      _everDevTest.fireEvent.click(voteBtn);

      await sleep(500);
      const resultCard = queryByTestId('card-vote-container-result');
      expect(!!resultCard).toBe(true);
    });
    test('投票：已投票，或设置始终可见，可取消投票', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: votedData
        }
      })));
      const {
        queryByTestId,
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig({})
      }));
      const resultCard = queryByTestId('card-vote-container-result');
      expect(!!resultCard).toBe(true);
      const voteBtn = queryByText('重新投票');

      _everDevTest.fireEvent.click(voteBtn);

      await sleep(1000);
      const votingCard = queryByTestId('card-vote-container-voting');
      expect(!!votingCard).toBe(true);
      const cancelBtn = queryByText('取消');

      _everDevTest.fireEvent.click(cancelBtn);

      await sleep(1000);
      const resultCard2 = queryByTestId('card-vote-container-result');
      expect(!!resultCard2).toBe(true);
    });
    test('投票：未投票，且未设置始终可见，不取消投票', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: voteData
        }
      })));
      const {
        queryByTestId,
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig({})
      }));
      const votingCard = queryByTestId('card-vote-container-voting');
      expect(!!votingCard).toBe(true);
      const cancelBtn = queryByText('取消');
      expect(cancelBtn).toBe(null);
    });
    test('断网拉取不到数据', async () => {
      const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
        type: "card",
        data: {
          cardType: 'vote',
          height: 350,
          metadata: voteData
        }
      })));
      const {
        queryByText
      } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(Editor, {
        defaultValue: value,
        voteCardConfig: createVoteCardConfig2({})
      }));
      const serviceError = queryByText('服务端错误');
      expect(!!serviceError).toBe(true);
    });
  });
});
//# sourceMappingURL=ui.test.js.map