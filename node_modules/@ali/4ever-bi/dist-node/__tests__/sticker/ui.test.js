"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = require("@testing-library/react");

var _everDevTest = require("@ali/4ever-dev-test");

var _everBamboo = require("@ali/4ever-bamboo");

var _weDesignNext = require("@ali/we-design-next");

var _editor = _interopRequireDefault(require("../editor"));

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
var _ref = (0, _everDevTest.jsx)("cursor", null);

function createValue(text) {
  return (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
    type: "paragraph"
  }, _ref, text)));
}

function clickToolbar(container, selector) {
  const quoteBlockElement = container.querySelector(selector);

  _everDevTest.fireEvent.click(quoteBlockElement);
}

let originValue;
beforeAll(() => {
  originValue = process.env.RUNTIME_ENV;
  process.env.RUNTIME_ENV = _weDesignNext.ToolbarLayout.UITEST_FLAG;
});
afterAll(() => {
  process.env.RUNTIME_ENV = originValue;
});

var _ref2 = (0, _everDevTest.jsx)("anchor", null);

var _ref3 = (0, _everDevTest.jsx)("focus", null);

var _ref4 = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
  key: "h1",
  type: "heading-1"
}, (0, _everDevTest.jsx)("text", {
  key: "text"
}, (0, _everDevTest.jsx)("m", {
  type: "italic"
}, "Heading1", (0, _everDevTest.jsx)("cursor", null), "Heading1")))));

describe('Bi/sticker', () => {
  it('通过 Toolbar 添加表情', async () => {
    const {
      container,
      content,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: createValue('Hello')
    }));
    clickToolbar(container, '[data-testid="bi-toolbar-sticker"]');
    await (0, _react.wait)();
    const stickerPanel = await (0, _react.waitFor)(() => queryByTestId('sticker-panel'));

    for (const stkItem of stickerPanel.children) {
      const stkBtn = stkItem.querySelector('[data-type="sticker"]');
      if (!stkBtn) continue;

      _everDevTest.fireEvent.click(stkBtn.children[0]);
    }

    await (0, _react.wait)();

    for (const stkItem of stickerPanel.children) {
      const stkBtn = stkItem.querySelector('[data-type="sticker"]');
      if (!stkBtn) continue;
      const code = stkBtn.getAttribute('data-sticker');
      const stickerElement = await (0, _react.waitFor)(() => content.querySelector(`[data-sticker="${code}"]`));
      expect(stickerElement).not.toBe(null);
    }
  });
  it('表情设置大小、背景色', async () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, _ref2, (0, _everDevTest.jsx)("inline", {
      type: "emoji",
      data: {
        code: '微笑'
      }
    }), _ref3)));
    const {
      container,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    clickToolbar(container, '[data-testid="bi-toolbar-sz"]');
    await (0, _react.wait)();
    const fontBtn = await (0, _react.waitFor)(() => queryByTestId('bi-toolbar-sz__list_42'));

    _everDevTest.fireEvent.click(fontBtn);

    await (0, _react.wait)();
    const stickerItem1 = await (0, _react.waitFor)(() => container.querySelector('[data-type="sticker"]').children[0]);
    expect(stickerItem1.style.width).toBe('84px');
    clickToolbar(container, '[data-testid="bi-toolbar-highlight"] .wdn-toolbar-split-left');
    await (0, _react.wait)();
    const stickerItem2 = await (0, _react.waitFor)(() => container.querySelector('[data-type="sticker"]').children[0]);
    expect(stickerItem2.style.backgroundColor).toBe('rgb(253, 190, 61)');
  });
  it('标题中加入表情, 自动继承标题样式', async () => {
    const inputContent = 'aaa';
    const value = _ref4;
    const {
      container,
      content,
      editor,
      queryByTestId
    } = await (0, _everDevTest.renderEditor)((0, _everDevTest.jsx)(_editor.default, {
      defaultValue: value
    }));
    clickToolbar(container, '[data-testid="bi-toolbar-sticker"]');
    await (0, _react.wait)();
    const stickerPanel = await (0, _react.waitFor)(() => queryByTestId('sticker-panel'));
    const firstSticker = stickerPanel.children[0];
    const stkBtn = firstSticker.querySelector('[data-type="sticker"]');
    const code = stkBtn.getAttribute('data-sticker');

    _everDevTest.fireEvent.click(stkBtn.children[0]);

    await (0, _react.wait)();
    const stickerElement = await (0, _react.waitFor)(() => content.querySelector(`[data-sticker="${code}"]`).children[0]);
    const headingSize = _everBamboo.theme['heading-1']['font-size'];
    expect(Number(window.getComputedStyle(stickerElement).width)).toBe(Number(headingSize) * 2);
    await (0, _react.wait)();

    _everDevTest.fireEvent.cangjieInput(editor, {
      data: inputContent
    });

    const leaves = await (0, _react.waitFor)(() => content.querySelectorAll('[data-cangjie-mark="true"]'));
    expect(leaves[1].textContent).toBe(inputContent);
    expect(leaves[1].style.fontStyle).toBe('italic');
  });
});
//# sourceMappingURL=ui.test.js.map