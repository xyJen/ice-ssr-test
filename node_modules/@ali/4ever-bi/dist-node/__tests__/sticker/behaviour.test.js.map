{"version":3,"sources":["../../../../src/__tests__/sticker/behaviour.test.tsx"],"names":["createBiPlugins","plugins","array","sleep","ms","Promise","resolve","setTimeout","describe","test","value","code","output","klass","document","data","nodes","type","leaves","text","marks","controller","Controller","create","actual","toJSON","expect","JSON","stringify","toEqual","forEach","method","selection","run","trigger","inlineParent","getParent","anchor","key","Sticker","isSticker","toBe"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx jsx */\nimport React from 'react';\nimport { jsx } from '@ali/4ever-dev-test';\nimport { CangjieSelectEvent, Controller, Value } from '@ali/4ever-cangjie';\nimport { Sticker } from '@ali/4ever-mo';\nimport { createCustomizedBiPlugins } from '../..';\n\nconst createBiPlugins = createCustomizedBiPlugins({});\nconst plugins = createBiPlugins({}).array;\n\nexport function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ndescribe('Bi/sticker/behaviour', () => {\n  test('表情节点', () => {\n    const value = ((\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            Start Paragraph\n            <inline\n              type=\"emoji\"\n              data={{\n                code: 'smile',\n              }}\n            />\n            <cursor />\n          </block>\n          <block type=\"paragraph\">End Paragraph</block>\n        </document>\n      </value>\n    ) as unknown) as Value;\n    const output = {\n      klass: 'value',\n      document: {\n        klass: 'document',\n        data: {},\n        nodes: [\n          {\n            klass: 'block',\n            type: 'paragraph',\n            data: {},\n            nodes: [\n              {\n                klass: 'text',\n                leaves: [{ klass: 'leaf', text: 'Start Paragraph', marks: [] }],\n              },\n              {\n                klass: 'inline',\n                type: 'emoji',\n                data: { code: 'smile' },\n                nodes: [\n                  {\n                    klass: 'text',\n                    leaves: [{ klass: 'leaf', text: '', marks: [] }],\n                  },\n                ],\n              },\n              {\n                klass: 'text',\n                leaves: [{ klass: 'leaf', text: '', marks: [] }],\n              },\n            ],\n          },\n          {\n            klass: 'block',\n            type: 'paragraph',\n            data: {},\n            nodes: [\n              {\n                klass: 'text',\n                leaves: [{ klass: 'leaf', text: 'End Paragraph', marks: [] }],\n              },\n            ],\n          },\n        ],\n      },\n    };\n    const controller = Controller.create({\n      value,\n      plugins,\n    });\n    const actual = controller.value.toJSON();\n    expect(JSON.stringify(actual)).toEqual(JSON.stringify(output));\n  });\n\n  test('键盘在表情间移动光标，跳过选中状态', () => {\n    const value = (\n      <value>\n        <document>\n          <block type=\"paragraph\">\n            <inline\n              type=\"emoji\"\n              data={{\n                code: '微笑',\n              }}\n            />\n            <cursor />\n            <inline\n              type=\"emoji\"\n              data={{\n                code: '憨笑',\n              }}\n            />\n            <inline\n              type=\"emoji\"\n              data={{\n                code: '大笑',\n              }}\n            />\n          </block>\n        </document>\n      </value>\n    ) as any;\n    ['moveBackward', 'moveForward'].forEach(async (method) => {\n      const controller = Controller.create({\n        value,\n        plugins,\n      });\n      const { document, selection } = controller.value;\n      controller.run(\n        'onCangjieSelect',\n        CangjieSelectEvent({\n          selection: selection[method](1),\n          trigger: method,\n        }),\n      );\n      await sleep(2000);\n      const inlineParent = document.getParent(selection.anchor.key);\n      expect(Sticker.isSticker(inlineParent)).toBe(false);\n    })\n  });\n});\n"],"file":"behaviour.test.js"}