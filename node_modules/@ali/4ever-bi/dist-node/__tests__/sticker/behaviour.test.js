"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sleep = sleep;

var _react = _interopRequireDefault(require("react"));

var _everDevTest = require("@ali/4ever-dev-test");

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _ = require("../..");

/* eslint-disable import/no-extraneous-dependencies */

/** @jsx jsx */
const createBiPlugins = (0, _.createCustomizedBiPlugins)({});
const plugins = createBiPlugins({}).array;

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

var _ref = (0, _everDevTest.jsx)("cursor", null);

var _ref2 = (0, _everDevTest.jsx)("block", {
  type: "paragraph"
}, "End Paragraph");

var _ref3 = (0, _everDevTest.jsx)("cursor", null);

describe('Bi/sticker/behaviour', () => {
  test('表情节点', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, "Start Paragraph", (0, _everDevTest.jsx)("inline", {
      type: "emoji",
      data: {
        code: 'smile'
      }
    }), _ref), _ref2));
    const output = {
      klass: 'value',
      document: {
        klass: 'document',
        data: {},
        nodes: [{
          klass: 'block',
          type: 'paragraph',
          data: {},
          nodes: [{
            klass: 'text',
            leaves: [{
              klass: 'leaf',
              text: 'Start Paragraph',
              marks: []
            }]
          }, {
            klass: 'inline',
            type: 'emoji',
            data: {
              code: 'smile'
            },
            nodes: [{
              klass: 'text',
              leaves: [{
                klass: 'leaf',
                text: '',
                marks: []
              }]
            }]
          }, {
            klass: 'text',
            leaves: [{
              klass: 'leaf',
              text: '',
              marks: []
            }]
          }]
        }, {
          klass: 'block',
          type: 'paragraph',
          data: {},
          nodes: [{
            klass: 'text',
            leaves: [{
              klass: 'leaf',
              text: 'End Paragraph',
              marks: []
            }]
          }]
        }]
      }
    };

    const controller = _everCangjie.Controller.create({
      value,
      plugins
    });

    const actual = controller.value.toJSON();
    expect(JSON.stringify(actual)).toEqual(JSON.stringify(output));
  });
  test('键盘在表情间移动光标，跳过选中状态', () => {
    const value = (0, _everDevTest.jsx)("value", null, (0, _everDevTest.jsx)("document", null, (0, _everDevTest.jsx)("block", {
      type: "paragraph"
    }, (0, _everDevTest.jsx)("inline", {
      type: "emoji",
      data: {
        code: '微笑'
      }
    }), _ref3, (0, _everDevTest.jsx)("inline", {
      type: "emoji",
      data: {
        code: '憨笑'
      }
    }), (0, _everDevTest.jsx)("inline", {
      type: "emoji",
      data: {
        code: '大笑'
      }
    }))));
    ['moveBackward', 'moveForward'].forEach(async method => {
      const controller = _everCangjie.Controller.create({
        value,
        plugins
      });

      const {
        document,
        selection
      } = controller.value;
      controller.run('onCangjieSelect', (0, _everCangjie.CangjieSelectEvent)({
        selection: selection[method](1),
        trigger: method
      }));
      await sleep(2000);
      const inlineParent = document.getParent(selection.anchor.key);
      expect(_everMo.Sticker.isSticker(inlineParent)).toBe(false);
    });
  });
});
//# sourceMappingURL=behaviour.test.js.map