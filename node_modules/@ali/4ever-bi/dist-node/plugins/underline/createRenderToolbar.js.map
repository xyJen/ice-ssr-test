{"version":3,"sources":["../../../../src/plugins/underline/createRenderToolbar.tsx"],"names":["createRenderToolbar","locale","props","controller","buttonName","extraProps","ItemKey","underline","SlotType","iconButton"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;;AAGb,SAASA,mBAAT,CACbC,MADa,EAEE;AAGf,SAAO,CAACC,KAAD,EAAQC,UAAR,KAAuB;AAC5B,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA6BH,KAAnC;;AAEA,QAAIE,UAAU,KAAKE,uBAAQC,SAA3B,EAAsC;AACpC,0BACE,eAAC,uBAAD;AAAU,QAAA,OAAO,EAAEC,wBAASC;AAA5B,sBACE,eAAC,wBAAD;AACE,QAAA,UAAU,EAAEN,UADd;AAEE,QAAA,MAAM,EAAEF;AAFV,SAGMI,UAHN,EADF,CADF;AASD;;AAED,WAAO,IAAP;AACD,GAhBD;AAiBD","sourcesContent":["import * as React from 'react';\nimport UnderlineButton from './components/next/underlineButton';\nimport { ItemKey, ItemSlot, RenderToolbar, SlotType } from '@ali/4ever-component';\n\nexport default function createRenderToolbar(\n  locale: Record<string, string>\n): RenderToolbar {\n\n\n  return (props, controller) => {\n    const { buttonName, extraProps } = props;\n\n    if (buttonName === ItemKey.underline) {\n      return (\n        <ItemSlot display={SlotType.iconButton}>\n          <UnderlineButton\n            controller={controller}\n            locale={locale}\n            {...extraProps}\n          />\n        </ItemSlot>\n      )\n    }\n\n    return null\n  };\n}\n"],"file":"createRenderToolbar.js"}