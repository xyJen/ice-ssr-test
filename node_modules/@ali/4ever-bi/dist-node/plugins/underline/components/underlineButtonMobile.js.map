{"version":3,"sources":["../../../../../src/plugins/underline/components/underlineButtonMobile.tsx"],"names":["isDisabled","controller","isCollapsedAtEdge","value","selection","disabled","Boolean","MobileUnderlineButton","props","item","Wrapper","isActive","query","handleClick","React","useCallback","run","MobileUnderlineBigButton"],"mappings":";;;;;;;;;;AAAA;;AAEA;;uBAD4B,a;;AAI5B,MAAMA,UAAU,GAAIC,UAAD,IAA4B;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAwBD,UAAU,CAACE,KAAX,CAAiBC,SAA/C;AACA,QAAMC,QAAQ,GAAGH,iBAAjB;AACA,SAAOI,OAAO,CAACD,QAAD,CAAd;AACD,CAJD;;AAMO,SAASE,qBAAT,CAA+BC,KAA/B,EAAgE;AACrE,QAAM;AAAEP,IAAAA,UAAF;AAAcQ,IAAAA,IAAd;AAAoBC,IAAAA;AAApB,MAAgCF,KAAtC;AACA,QAAMG,QAAQ,GAAGV,UAAU,CAACW,KAAX,CAAiB,aAAjB,CAAjB;AAEA,QAAMC,WAAW,GAAGC,KAAK,CAACC,WAAN,CAClB,MAAMd,UAAU,CAACe,GAAX,CAAe,UAAf,EAA2B,+BAA3B,CADY,EAElB,CAACf,UAAD,CAFkB,CAApB;AAKA,sBACE,eAAC,OAAD;AACE,IAAA,IAAI,EAAEQ,IADR;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,IAAI,EAAC,WAHP;AAIE,IAAA,QAAQ,EAAEE,QAJZ;AAKE,IAAA,UAAU,EAAEX,UAAU,CAACC,UAAD,CALxB;AAME,IAAA,OAAO,EAAEY;AANX,IADF;AAUD;;AAEM,SAASI,wBAAT,CAAkCT,KAAlC,EAAmE;AACxE,QAAM;AAAEP,IAAAA,UAAF;AAAcQ,IAAAA,IAAd;AAAoBC,IAAAA;AAApB,MAAgCF,KAAtC;AACA,QAAMG,QAAQ,GAAGV,UAAU,CAACW,KAAX,CAAiB,aAAjB,CAAjB;AAEA,QAAMC,WAAW,GAAGC,KAAK,CAACC,WAAN,CAClB,MAAMd,UAAU,CAACe,GAAX,CAAe,UAAf,EAA2B,+BAA3B,CADY,EAElB,CAACf,UAAD,CAFkB,CAApB;AAKA,sBACE,eAAC,OAAD;AACE,IAAA,IAAI,EAAEQ,IADR;AAEE,IAAA,IAAI,EAAC,KAFP;AAGE,IAAA,IAAI,EAAC,WAHP;AAIE,IAAA,SAAS,EAAEE,QAJb;AAKE,IAAA,UAAU,EAAEX,UAAU,CAACC,UAAD,CALxB;AAME,IAAA,OAAO,EAAEY;AANX,IADF;AAUD","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { toggleUnderline } from '../actions';\nimport type { MobileToolbarButtonProps } from '@ali/4ever-component';\n\nconst isDisabled = (controller: Controller) => {\n  const { isCollapsedAtEdge } = controller.value.selection;\n  const disabled = isCollapsedAtEdge;\n  return Boolean(disabled);\n};\n\nexport function MobileUnderlineButton(props: MobileToolbarButtonProps) {\n  const { controller, item, Wrapper } = props;\n  const isActive = controller.query('isUnderline');\n\n  const handleClick = React.useCallback(\n    () => controller.run('onAction', toggleUnderline()),\n    [controller],\n  );\n\n  return (\n    <Wrapper\n      item={item}\n      type=\"horiz\"\n      icon=\"underline\"\n      isActive={isActive}\n      isDisabled={isDisabled(controller)}\n      onClick={handleClick}\n    />\n  );\n}\n\nexport function MobileUnderlineBigButton(props: MobileToolbarButtonProps) {\n  const { controller, item, Wrapper } = props;\n  const isActive = controller.query('isUnderline');\n\n  const handleClick = React.useCallback(\n    () => controller.run('onAction', toggleUnderline()),\n    [controller],\n  );\n\n  return (\n    <Wrapper\n      item={item}\n      type=\"big\"\n      icon=\"underline\"\n      isFocused={isActive}\n      isDisabled={isDisabled(controller)}\n      onClick={handleClick}\n    />\n  );\n}\n"],"file":"underlineButtonMobile.js"}