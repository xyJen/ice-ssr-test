"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MobileUnderlineButton = MobileUnderlineButton;
exports.MobileUnderlineBigButton = MobileUnderlineBigButton;

var React = _interopRequireWildcard(require("react"));

var _actions = require("../actions");

const _createElement = /*#__PURE__*/React.createElement;

const isDisabled = controller => {
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const disabled = isCollapsedAtEdge;
  return Boolean(disabled);
};

function MobileUnderlineButton(props) {
  const {
    controller,
    item,
    Wrapper
  } = props;
  const isActive = controller.query('isUnderline');
  const handleClick = React.useCallback(() => controller.run('onAction', (0, _actions.toggleUnderline)()), [controller]);
  return /*#__PURE__*/_createElement(Wrapper, {
    item: item,
    type: "horiz",
    icon: "underline",
    isActive: isActive,
    isDisabled: isDisabled(controller),
    onClick: handleClick
  });
}

function MobileUnderlineBigButton(props) {
  const {
    controller,
    item,
    Wrapper
  } = props;
  const isActive = controller.query('isUnderline');
  const handleClick = React.useCallback(() => controller.run('onAction', (0, _actions.toggleUnderline)()), [controller]);
  return /*#__PURE__*/_createElement(Wrapper, {
    item: item,
    type: "big",
    icon: "underline",
    isFocused: isActive,
    isDisabled: isDisabled(controller),
    onClick: handleClick
  });
}
//# sourceMappingURL=underlineButtonMobile.js.map