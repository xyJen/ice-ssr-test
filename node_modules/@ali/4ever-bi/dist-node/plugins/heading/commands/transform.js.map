{"version":3,"sources":["../../../../../src/plugins/heading/commands/transform.ts"],"names":["paragraph2Heading","controller","block","type","command","Commands","setNodeByKey","key","data","moveToEndOfNode","run","code2Heading","lineArr","text","split","withoutNormalizing","forEach","line","paragraph","Paragraph","create","nodes","Text","insertBlock","removeNodeByKey","transform","blocks","query","Array","isArray","calloutPr","focus"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AADA;;AAGA,MAAMA,iBAAiB,GAAG,CAACC,UAAD,EAAyBC,KAAzB,EAAsCC,IAAtC,KAAuD;AAC/EF,EAAAA,UAAU,CACPG,OADH,CACWC,sBAASC,YADpB,EACkCJ,KAAK,CAACK,GADxC,EAC6C;AACzCJ,IAAAA,IAAI,EAAGD,KAAD,CAAiBC,IADkB;AAEzCK,IAAAA,IAAI,EAAE;AAFmC,GAD7C,EAKGJ,OALH,CAKWC,sBAASI,eALpB,EAKqCP,KALrC;AAMA,SAAOD,UAAU,CAACS,GAAX,CAAe,UAAf,EAA2B,yBAAWP,IAAX,CAA3B,CAAP;AACD,CARD;;AAUA,MAAMQ,YAAY,GAAG,CAACV,UAAD,EAAyBC,KAAzB,EAAsCC,IAAtC,KAAuD;AAC1E,QAAMS,OAAO,GAAGV,KAAK,CAACW,IAAN,CAAWC,KAAX,CAAiB,IAAjB,CAAhB;AAEAb,EAAAA,UAAU,CAACc,kBAAX,CAA8B,MAAM;AAClCH,IAAAA,OAAO,CAACI,OAAR,CAAiBC,IAAD,IAAU;AACxB,YAAMC,SAAS,GAAGC,kBAAUC,MAAV,CAAiB;AACjCC,QAAAA,KAAK,EAAE,CAACC,kBAAKF,MAAL,CAAYH,IAAZ,CAAD;AAD0B,OAAjB,CAAlB;;AAIAhB,MAAAA,UAAU,CAACG,OAAX,CAAmBC,sBAASkB,WAA5B,EAAyCL,SAAzC;AACAjB,MAAAA,UAAU,CAACS,GAAX,CAAe,UAAf,EAA2B,yBAAWP,IAAX,CAA3B;AACD,KAPD;AAQD,GATD;AAWAF,EAAAA,UAAU,CACPG,OADH,CACWC,sBAASmB,eADpB,EACqCtB,KAAK,CAACK,GAD3C;AAED,CAhBD;;AAkBe,SAASkB,SAAT,CAAmBxB,UAAnB,EAA2CE,IAA3C,EAAyD;AACtE,QAAMuB,MAAM,GAAGzB,UAAU,CAAC0B,KAAX,CAAiB,mBAAjB,CAAf;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACzBzB,IAAAA,UAAU,CAACc,kBAAX,CAA8B,MAAM;AAClCW,MAAAA,MAAM,CAACV,OAAP,CAAgBd,KAAD,IAAW;AACxB,YAAIA,KAAK,CAACC,IAAN,KAAe,MAAnB,EAA2B;AACzB,iBAAOQ,YAAY,CAACV,UAAD,EAAaC,KAAb,EAAoBC,IAApB,CAAnB;AACD,SAFD,MAEO,IAAID,KAAK,CAACM,IAAN,CAAWsB,SAAf,EAA0B;AAC/B,iBAAO9B,iBAAiB,CAACC,UAAD,EAAaC,KAAb,EAAoBC,IAApB,CAAxB;AACD;;AACD,eAAOF,UAAU,CAACS,GAAX,CAAe,UAAf,EAA2B,yBAAWP,IAAX,CAA3B,CAAP;AACD,OAPD;AAQD,KATD;AAUD;;AACD,SAAOF,UAAU,CAACG,OAAX,CAAmBC,sBAAS0B,KAA5B,CAAP;AACD","sourcesContent":["import { Controller, Commands, Node, Text, Block } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-mo';\n;\nimport { setHeading } from '../actions';\n\nconst paragraph2Heading = (controller: Controller, block: Node, type: string) => {\n  controller\n    .command(Commands.setNodeByKey, block.key, {\n      type: (block as Block).type,\n      data: {},\n    })\n    .command(Commands.moveToEndOfNode, block);\n  return controller.run('onAction', setHeading(type));\n};\n\nconst code2Heading = (controller: Controller, block: Node, type: string) => {\n  const lineArr = block.text.split('\\n');\n\n  controller.withoutNormalizing(() => {\n    lineArr.forEach((line) => {\n      const paragraph = Paragraph.create({\n        nodes: [Text.create(line)],\n      });\n\n      controller.command(Commands.insertBlock, paragraph)\n      controller.run('onAction', setHeading(type));\n    });\n  });\n\n  controller\n    .command(Commands.removeNodeByKey, block.key);\n};\n\nexport default function transform(controller: Controller, type: string) {\n  const blocks = controller.query('getTransformNodes');\n\n  if (Array.isArray(blocks)) {\n    controller.withoutNormalizing(() => {\n      blocks.forEach((block) => {\n        if (block.type === 'code') {\n          return code2Heading(controller, block, type);\n        } else if (block.data.calloutPr) {\n          return paragraph2Heading(controller, block, type);\n        }\n        return controller.run('onAction', setHeading(type));\n      });\n    });\n  }\n  return controller.command(Commands.focus);\n}\n"],"file":"transform.js"}