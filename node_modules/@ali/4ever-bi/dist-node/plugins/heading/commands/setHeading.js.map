{"version":3,"sources":["../../../../../src/plugins/heading/commands/setHeading.ts"],"names":["boldMark","Marks","Bold","create","setHeading","controller","type","selection","value","allBlocks","forEach","block","Paragraph","isParagraph","Heading","isHeading","blockRange","moveToRangeOfNode","TYPE","Sz","szMark","SzUtil","fromHeadingType","szUnit","spacing","SpacingUtil","command","Commands","setNodeByKey","key","data"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA,MAAMA,QAAQ,GAAGC,cAAMC,IAAN,CAAWC,MAAX,CAAkB,IAAlB,CAAjB;;AAEe,SAASC,UAAT,CAAoBC,UAApB,EAA4CC,IAA5C,EAA0D;AACvE,QAAM;AAAEC,IAAAA;AAAF,MAAgBF,UAAU,CAACG,KAAjC;AACA,QAAMC,SAAS,GAAG,oCAAoBJ,UAApB,CAAlB;AACAI,EAAAA,SAAS,CAACC,OAAV,CAAmBC,KAAD,IAAW;AAC3B;AACA,QAAI,CAACC,kBAAUC,WAAV,CAAsBF,KAAtB,CAAD,IAAiC,CAACG,gBAAQC,SAAR,CAAkBJ,KAAlB,CAAtC,EAAgE;AAEhE,UAAMK,UAAU,GAAGT,SAAS,CAACU,iBAAV,CAA4BN,KAA5B,EAAmCN,UAAnC,CAAnB;;AAEA,QAAIC,IAAI,KAAKM,kBAAUM,IAAvB,EAA6B;AAC3B,wCAAkBb,UAAlB,EAA8BW,UAA9B,EAA0ChB,QAAQ,CAACM,IAAnD;AACA,wCAAkBD,UAAlB,EAA8BW,UAA9B,EAA0Cf,cAAMkB,EAAN,CAASD,IAAnD;AACD,KAHD,MAGO;AACL;AACA,YAAME,MAAM,GAAGnB,cAAMkB,EAAN,CAAShB,MAAT,CAAgB;AAC7BK,QAAAA,KAAK,EAAEa,mBAAOC,eAAP,CAAuBhB,IAAvB,CADsB;AAE7BiB,QAAAA,MAAM,EAAE;AAFqB,OAAhB,CAAf;;AAIA,qCAAelB,UAAf,EAA2BW,UAA3B,EAAuChB,QAAvC;AACA,qCAAeK,UAAf,EAA2BW,UAA3B,EAAuCI,MAAvC;AACD,KAjB0B,CAmB3B;;;AACA,UAAMI,OAAO,GAAGC,wBAAYH,eAAZ,CAA4BhB,IAA5B,CAAhB;;AAEAD,IAAAA,UAAU,CAACqB,OAAX,CAAmBC,sBAASC,YAA5B,EAA0CjB,KAAK,CAACkB,GAAhD,EAAqD;AACnDvB,MAAAA,IADmD;AAEnDwB,MAAAA,IAAI,EAAE,EACJ,GAAGnB,KAAK,CAACmB,IADL;AAEJN,QAAAA;AAFI;AAF6C,KAArD;AAOD,GA7BD;AA8BA,SAAOnB,UAAP;AACD","sourcesContent":["import { Controller, Commands } from '@ali/4ever-cangjie';\nimport { Heading, Paragraph, Marks } from '@ali/4ever-mo';\nimport { SpacingUtil, SzUtil } from '@ali/4ever-bamboo';\nimport { getBlocksFromEditor }  from '@ali/4ever-utils';\nimport { removeMarkAtRange, addMarkAtRange } from '@ali/4ever-utils';\n\nconst boldMark = Marks.Bold.create(true);\n\nexport default function setHeading(controller: Controller, type: string) {\n  const { selection } = controller.value;\n  const allBlocks = getBlocksFromEditor(controller);\n  allBlocks.forEach((block) => {\n    // 跳过 hr、code等不支持heading的段落\n    if (!Paragraph.isParagraph(block) && !Heading.isHeading(block)) return;\n\n    const blockRange = selection.moveToRangeOfNode(block, controller);\n\n    if (type === Paragraph.TYPE) {\n      removeMarkAtRange(controller, blockRange, boldMark.type);\n      removeMarkAtRange(controller, blockRange, Marks.Sz.TYPE);\n    } else {\t\t\n      // 非普通段落补一下 sz mark\n      const szMark = Marks.Sz.create({\n        value: SzUtil.fromHeadingType(type),\n        szUnit: 'pt',\n      });\n      addMarkAtRange(controller, blockRange, boldMark);\n      addMarkAtRange(controller, blockRange, szMark);\t\n    }\n\n    // 覆盖spacing，@tengxun/google\n    const spacing = SpacingUtil.fromHeadingType(type);\n\n    controller.command(Commands.setNodeByKey, block.key, {\n      type,\n      data: {\n        ...block.data,\n        spacing,\n      },\n    });\n  });\n  return controller;\n}\n"],"file":"setHeading.js"}