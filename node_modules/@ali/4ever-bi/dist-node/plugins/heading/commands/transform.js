"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transform;

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _actions = require("../actions");

;

const paragraph2Heading = (controller, block, type) => {
  controller.command(_everCangjie.Commands.setNodeByKey, block.key, {
    type: block.type,
    data: {}
  }).command(_everCangjie.Commands.moveToEndOfNode, block);
  return controller.run('onAction', (0, _actions.setHeading)(type));
};

const code2Heading = (controller, block, type) => {
  const lineArr = block.text.split('\n');
  controller.withoutNormalizing(() => {
    lineArr.forEach(line => {
      const paragraph = _everMo.Paragraph.create({
        nodes: [_everCangjie.Text.create(line)]
      });

      controller.command(_everCangjie.Commands.insertBlock, paragraph);
      controller.run('onAction', (0, _actions.setHeading)(type));
    });
  });
  controller.command(_everCangjie.Commands.removeNodeByKey, block.key);
};

function transform(controller, type) {
  const blocks = controller.query('getTransformNodes');

  if (Array.isArray(blocks)) {
    controller.withoutNormalizing(() => {
      blocks.forEach(block => {
        if (block.type === 'code') {
          return code2Heading(controller, block, type);
        } else if (block.data.calloutPr) {
          return paragraph2Heading(controller, block, type);
        }

        return controller.run('onAction', (0, _actions.setHeading)(type));
      });
    });
  }

  return controller.command(_everCangjie.Commands.focus);
}
//# sourceMappingURL=transform.js.map