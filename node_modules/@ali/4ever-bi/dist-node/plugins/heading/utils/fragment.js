"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSelectionAtHeading = isSelectionAtHeading;
exports.removeFirstNodeMarkByTypes = removeFirstNodeMarkByTypes;
exports.isVisualEmpty = isVisualEmpty;

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

function removeNodeMarkByTypes(block, types) {
  let node = block;
  const texts = node?.getTexts();
  if (!texts?.length) return node;

  for (let i = 0; i < texts.length; i++) {
    const text = texts[i];
    const path = node.getPath(text.key);
    if (!path) continue;
    const needRemoveMarks = text.getMarks().filter(m => {
      return types.find(t => m.type === t);
    });

    for (let j = 0; j < needRemoveMarks.length; j++) {
      node = node.removeMark(path, 0, text.text.length, needRemoveMarks[j]);
    }
  }

  return node;
}

function isSelectionAtHeading(value) {
  if (value.selection.isCollapsedAtEdge) return false;
  const {
    startBlock
  } = value;
  return _everMo.Heading.isHeading(startBlock);
}
/**
 * 移除 fragment 第一个段落指定 marks
 */


function removeFirstNodeMarkByTypes(frag, types) {
  let fragment = frag;
  if (!fragment?.nodes?.length) return fragment;
  const node = fragment.nodes[0];
  const path = fragment.getPath(node.key);
  if (!path) return fragment;
  const firstNode = removeNodeMarkByTypes(node, types);
  return fragment.replaceNode(path, firstNode);
}
/**
 * 视觉上是否为空段落
 */


function isVisualEmpty(maybeNode) {
  return (_everMo.Paragraph.isParagraph(maybeNode) || _everMo.Heading.isHeading(maybeNode)) && maybeNode.nodes.length === 1 && _everCangjie.Text.isText(maybeNode.nodes[0]) && maybeNode.text === '';
}
//# sourceMappingURL=fragment.js.map