"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HeadingButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everComponent = require("@ali/4ever-component");

var _everBamboo = require("@ali/4ever-bamboo");

var _actions = require("../../actions");

var _getTipsByHeading = require("../../utils/getTipsByHeading");

const _createElement = /*#__PURE__*/React.createElement;

function HeadingButton(props) {
  const {
    controller,
    locale,
    ...rest
  } = props;
  const heading = controller.query('getHeading') || 'paragraph';
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  const handleChange = React.useCallback(headingStr => {
    controller.run('onAction', (0, _actions.setHeading)(headingStr));
  }, [controller]);
  const {
    title,
    shortCut,
    markdown
  } = (0, _getTipsByHeading.getTitleByHeading)(heading, locale);
  const options = React.useMemo(() => [{
    key: 'paragraph',
    testid: 'option-paragraph',
    title: locale?.dropdownBody || 'Paragraph'
  }, {
    key: 'heading-1',
    testid: 'option-heading-1',
    title: locale?.dropdownHeading1 || 'Heading 1'
  }, {
    key: 'heading-2',
    testid: 'option-heading-2',
    title: locale?.dropdownHeading2 || 'Heading 2'
  }, {
    key: 'heading-3',
    testid: 'option-heading-3',
    title: locale?.dropdownHeading3 || 'Heading 3'
  }, {
    key: 'heading-4',
    testid: 'option-heading-4',
    title: locale?.dropdownHeading4 || 'Heading 4'
  }], [locale]);
  const tooltip = React.useMemo(() => ({
    title,
    shortCut,
    description: markdown
  }), [title, shortCut, markdown]);
  return /*#__PURE__*/_createElement(_everComponent.TextTypeSelect, (0, _extends2.default)({
    testid: "bi-toolbar-heading",
    disabled: !!isDisabled,
    value: heading,
    onChange: handleChange,
    role: _everBamboo.PluginRoles.headingSelect,
    options: options
  }, rest, {
    tooltip: tooltip
  }));
}
//# sourceMappingURL=headingButton.js.map