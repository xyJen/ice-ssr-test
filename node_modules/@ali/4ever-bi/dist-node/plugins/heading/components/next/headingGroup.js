"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HeadingGroup;
exports.getHeadingGroupWidth = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everComponent = require("@ali/4ever-component");

var _everBamboo = require("@ali/4ever-bamboo");

var _everUtils = require("@ali/4ever-utils");

var _actions = require("../../actions");

const _createElement = /*#__PURE__*/React.createElement;
;
const BLOCKQUOTE_KEY = 'blockquote';

const getHeadingGroupWidth = ({
  toolbarWidth
}) => {
  if (toolbarWidth > 1720) {
    return 492;
  }

  if (toolbarWidth > 1644) {
    return 414;
  }

  if (toolbarWidth > 1568) {
    return 340;
  }

  if (toolbarWidth > 1492) {
    return 264;
  }

  return 188;
};

exports.getHeadingGroupWidth = getHeadingGroupWidth;

function HeadingGroup(props) {
  const {
    controller,
    locale,
    width = 188,
    ...rest
  } = props;
  const type = controller.query('hasBlockQuote') ? BLOCKQUOTE_KEY : controller.query('getHeading');
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInHr') || controller.query('isSelectionInListSymbol');
  const handleChange = React.useCallback(headingStr => {
    if (headingStr === BLOCKQUOTE_KEY) {
      if (type !== 'paragraph') {
        // 变成引用同时去除标题
        controller.run('onAction', (0, _actions.setHeading)('paragraph'));
      }

      controller.run('onAction', (0, _everUtils.toggleBlockquote)());
    } else {
      if (type === BLOCKQUOTE_KEY) {
        // 变成标题同时去除引用
        controller.run('onAction', (0, _everUtils.toggleBlockquote)());
      }

      controller.run('onAction', (0, _actions.setHeading)(headingStr));
    }
  }, [controller, type]);
  return /*#__PURE__*/_createElement(_everComponent.FontSizeMaxSelect, (0, _extends2.default)({
    testid: "bi-toolbar-heading-group",
    disabled: !!isDisabled,
    value: type,
    onChange: handleChange,
    width: width,
    role: _everBamboo.PluginRoles.headingGroup,
    locale: locale
  }, rest));
}
//# sourceMappingURL=headingGroup.js.map