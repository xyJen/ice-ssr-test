"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMobileHeading;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _actions = require("../actions");

var _everUtils = require("@ali/4ever-utils");

var _headingSimpleButton = require("./headingSimpleButton");

/* eslint-disable no-param-reassign */

/* eslint-disable react-hooks/rules-of-hooks */
const _createElement = /*#__PURE__*/React.createElement;
const MOBILE_TOOLBAR = {
  'heading-1': {
    fontSize: 17,
    width: 81,
    fw: 'bold',
    icon: 'h1'
  },
  'heading-2': {
    fontSize: 16,
    width: 74,
    fw: 'bold',
    icon: 'h2'
  },
  'heading-3': {
    fontSize: 15,
    width: 67,
    fw: 'bold',
    icon: 'h3'
  },
  'heading-4': {
    fontSize: 14,
    width: 62,
    fw: 'bold',
    icon: 'h4'
  },
  paragraph: {
    fontSize: 14,
    width: 55,
    fw: 'inherit',
    icon: 'paragraph'
  },
  blockquote: {
    fontSize: 14,
    width: 55,
    fw: 'inherit',
    icon: 'blockquote'
  }
};

const Title = /*#__PURE__*/_styledComponents.default.div(["color:black;font-weight:", ";font-size:", "px;"], props => props.fw, props => props.fontSize);

function isBlockActive(type, block) {
  if (!block) {
    return false;
  }

  if (type === 'blockquote') {
    return block.data.blockquote;
  }

  if (type === 'paragraph') {
    return block.type === type && !block.data.blockquote;
  }

  return block.type === type;
}

function useClick(controller, hType) {
  const handleClick = React.useCallback(() => {
    if (hType === 'blockquote') {
      controller.run('onAction', (0, _actions.setHeading)('paragraph'));
      controller.run('onAction', (0, _everUtils.toggleBlockquote)());
    } else {
      controller.run('onAction', (0, _actions.setHeading)(hType));
      controller.run('onAction', (0, _everUtils.disableBlockquote)());
    }
  }, [controller, hType]);
  return handleClick;
}

function createMobileHeading() {
  return Object.keys(MOBILE_TOOLBAR).reduce((result, hType) => {
    result[`${hType}MobileBig`] = props => {
      const {
        icon
      } = MOBILE_TOOLBAR[hType];
      const {
        controller,
        Wrapper,
        item
      } = props;
      const {
        focusBlock,
        anchorBlock
      } = controller.value;
      const isActive = focusBlock === anchorBlock && isBlockActive(hType, focusBlock);
      const handleClick = useClick(controller, hType);
      return /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "big",
        onClick: handleClick,
        isFocused: isActive,
        isDisabled: (0, _headingSimpleButton.isDisabled)(controller),
        icon: icon
      });
    };

    result[`${hType}Mobile`] = props => {
      const {
        controller,
        Wrapper,
        item,
        locale
      } = props;
      const handleClick = useClick(controller, hType);
      const title = locale && locale[`${hType.replace('-', '')}Mobile`];
      const {
        focusBlock,
        anchorBlock
      } = controller.value;
      const isActive = focusBlock === anchorBlock && isBlockActive(hType, focusBlock);
      const {
        fontSize,
        width,
        fw
      } = MOBILE_TOOLBAR[hType];
      return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "horiz",
        width: width,
        isActive: isActive,
        isDisabled: (0, _headingSimpleButton.isDisabled)(controller),
        onClick: handleClick
      }, /*#__PURE__*/_createElement(Title, {
        fontSize: fontSize,
        fw: fw
      }, title)));
    };

    return result;
  }, {});
}
//# sourceMappingURL=mobileButtons.js.map