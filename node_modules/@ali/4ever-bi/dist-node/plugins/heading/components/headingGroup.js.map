{"version":3,"sources":["../../../../../src/plugins/heading/components/headingGroup.tsx"],"names":["BLOCKQUOTE_KEY","MemoFontSizeMaxSelect","React","memo","FontSizeMaxSelect","HeadingGroup","props","controller","type","query","isCollapsedAtEdge","value","selection","isDisabled","handleChange","useCallback","headingStr","run","PluginRoles","headingGroup"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;uBAJ4B,a;AAK5B;AAEA,MAAMA,cAAc,GAAG,YAAvB;AACA,MAAMC,qBAAqB,gBAAGC,KAAK,CAACC,IAAN,CAAWC,4BAAX,CAA9B;;AAMe,SAASC,YAAT,CAAsBC,KAAtB,EAAgD;AAC7D,QAAM;AAAEC,IAAAA;AAAF,MAAiBD,KAAvB;AACA,QAAME,IAAI,GAAGD,UAAU,CAACE,KAAX,CAAiB,eAAjB,IAAoCT,cAApC,GAAqDO,UAAU,CAACE,KAAX,CAAiB,YAAjB,CAAlE;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAwBH,UAAU,CAACI,KAAX,CAAiBC,SAA/C;AACA,QAAMC,UAAU,GAAGH,iBAAiB,IAAIH,UAAU,CAACE,KAAX,CAAiB,iBAAjB,CAArB,IAA4DF,UAAU,CAACE,KAAX,CAAiB,yBAAjB,CAA/E;AACA,QAAMK,YAAY,GAAGZ,KAAK,CAACa,WAAN,CAAmBC,UAAD,IAAwB;AAC7D,QAAIA,UAAU,KAAKhB,cAAnB,EAAmC;AACjC,UAAIQ,IAAI,KAAK,WAAb,EAA0B;AACxB;AACAD,QAAAA,UAAU,CAACU,GAAX,CAAe,UAAf,EAA2B,yBAAW,WAAX,CAA3B;AACD;;AACDV,MAAAA,UAAU,CAACU,GAAX,CAAe,UAAf,EAA2B,kCAA3B;AACD,KAND,MAMO;AACL,UAAIT,IAAI,KAAKR,cAAb,EAA6B;AAC3B;AACAO,QAAAA,UAAU,CAACU,GAAX,CAAe,UAAf,EAA2B,kCAA3B;AACD;;AACDV,MAAAA,UAAU,CAACU,GAAX,CAAe,UAAf,EAA2B,yBAAWD,UAAX,CAA3B;AACD;AACF,GAdoB,EAclB,CAACT,UAAD,EAAaC,IAAb,CAdkB,CAArB;AAgBA,sBACE,eAAC,qBAAD;AACE,IAAA,MAAM,EAAC,0BADT;AAEE,IAAA,QAAQ,EAAE,CAAC,CAACK,UAFd;AAGE,IAAA,KAAK,EAAEL,IAHT;AAIE,IAAA,QAAQ,EAAEM,YAJZ,CAKE;AALF;AAME,IAAA,aAAa,EAAE,IANjB;AAOE,IAAA,IAAI,EAAEI,wBAAYC;AAPpB,IADF;AAWD","sourcesContent":["import * as React from 'react';\nimport { FontSizeMaxSelect } from '@ali/we-toolbar';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { toggleBlockquote } from '@ali/4ever-utils';\nimport { setHeading } from '../actions';\n;\n\nconst BLOCKQUOTE_KEY = 'blockquote';\nconst MemoFontSizeMaxSelect = React.memo(FontSizeMaxSelect);\n\ninterface HeadingGroupProps {\n  controller: Controller;\n}\n\nexport default function HeadingGroup(props: HeadingGroupProps) {\n  const { controller } = props;\n  const type = controller.query('hasBlockQuote') ? BLOCKQUOTE_KEY : controller.query('getHeading');\n  const { isCollapsedAtEdge } = controller.value.selection;\n  const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInHr') || controller.query('isSelectionInListSymbol');\n  const handleChange = React.useCallback((headingStr: string) => {\n    if (headingStr === BLOCKQUOTE_KEY) {\n      if (type !== 'paragraph') {\n        // 变成引用同时去除标题\n        controller.run('onAction', setHeading('paragraph'));\n      }\n      controller.run('onAction', toggleBlockquote());\n    } else {\n      if (type === BLOCKQUOTE_KEY) {\n        // 变成标题同时去除引用\n        controller.run('onAction', toggleBlockquote());\n      }\n      controller.run('onAction', setHeading(headingStr));\n    }\n  }, [controller, type]);\n\n  return (\n    <MemoFontSizeMaxSelect\n      testid=\"bi-toolbar-heading-group\"\n      disabled={!!isDisabled}\n      value={type}\n      onChange={handleChange}\n      // 这个值是标题仅显示两项且工具栏未显示更多时的长度，若工具栏的内容变化，需要更新\n      toolbarLength={1290}\n      role={PluginRoles.headingGroup}\n    />\n  );\n}\n"],"file":"headingGroup.js"}