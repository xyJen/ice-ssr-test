{"version":3,"sources":["../../../../../src/plugins/heading/components/createHeading.tsx"],"names":["createHeading","Paragraph","Heading","React","Component","componentDidMount","onHeadingChange","context","componentDidUpdate","prevProps","prevNode","node","currentNode","props","componentWillUnmount","render","type","contextTypes","PropTypes","func"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;uBAF4B,a;;AAIb,SAASA,aAAT,CAAuBC,SAAvB,EAAkC;AAAA;;AAC/C,0BAAO,MAAMC,OAAN,SAAsBC,KAAK,CAACC,SAA5B,CAAqD;AAK1DC,IAAAA,iBAAiB,GAAG;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAsB,KAAKC,OAAjC;;AACA,UAAID,eAAJ,EAAqB;AACnBA,QAAAA,eAAe;AAChB;AACF;;AAEDE,IAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,YAAMC,QAAQ,GAAGD,SAAS,CAACE,IAA3B;AACA,YAAM;AAAEA,QAAAA,IAAI,EAAEC;AAAR,UAAwB,KAAKC,KAAnC;AACA,YAAM;AAAEP,QAAAA;AAAF,UAAsB,KAAKC,OAAjC;;AACA,UAAID,eAAe,IAAII,QAAQ,KAAKE,WAApC,EAAiD;AAC/CN,QAAAA,eAAe;AAChB;AACF;;AAEDQ,IAAAA,oBAAoB,GAAG;AACrB,YAAM;AAAER,QAAAA;AAAF,UAAsB,KAAKC,OAAjC;;AACA,UAAID,eAAJ,EAAqB;AACnBA,QAAAA,eAAe;AAChB;AACF;;AAEDS,IAAAA,MAAM,GAAG;AACP,YAAM;AAAEJ,QAAAA;AAAF,UAAW,KAAKE,KAAtB;AACA,0BACE,eAAC,SAAD,6BACM,KAAKA,KADX;AAEE,QAAA,SAAS,EAAE,kCAAiBF,IAAI,CAACK,IAAtB,CAFb;AAGE,QAAA,EAAE,EAAE,iCAAgBL,IAAhB;AAHN,SADF;AAOD;;AArCyD,GAA5D,SACSM,YADT,GACwB;AACpBX,IAAAA,eAAe,EAAEY,SAAS,CAACC;AADP,GADxB;AAuCD","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Block } from '@ali/4ever-cangjie';\nimport { createHeadingId, styledComponents, TypeToComponentKeys } from '@ali/4ever-bamboo';\n\nexport default function createHeading(Paragraph) {\n  return class Heading extends React.Component<{node: Block}> {\n    static contextTypes = {\n      onHeadingChange: PropTypes.func,\n    };\n\n    componentDidMount() {\n      const { onHeadingChange } = this.context;\n      if (onHeadingChange) {\n        onHeadingChange();\n      }\n    }\n\n    componentDidUpdate(prevProps) {\n      const prevNode = prevProps.node;\n      const { node: currentNode } = this.props;\n      const { onHeadingChange } = this.context;\n      if (onHeadingChange && prevNode !== currentNode) {\n        onHeadingChange();\n      }\n    }\n\n    componentWillUnmount() {\n      const { onHeadingChange } = this.context;\n      if (onHeadingChange) {\n        onHeadingChange();\n      }\n    }\n\n    render() {\n      const { node } = this.props;\n      return (\n        <Paragraph\n          {...this.props}\n          Component={styledComponents(node.type as TypeToComponentKeys)}\n          id={createHeadingId(node)}\n        />\n      );\n    }\n  };\n}\n"],"file":"createHeading.js"}