"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HeadingGroup;

var React = _interopRequireWildcard(require("react"));

var _weToolbar = require("@ali/we-toolbar");

var _everBamboo = require("@ali/4ever-bamboo");

var _everUtils = require("@ali/4ever-utils");

var _actions = require("../actions");

const _createElement = /*#__PURE__*/React.createElement;
;
const BLOCKQUOTE_KEY = 'blockquote';
const MemoFontSizeMaxSelect = /*#__PURE__*/React.memo(_weToolbar.FontSizeMaxSelect);

function HeadingGroup(props) {
  const {
    controller
  } = props;
  const type = controller.query('hasBlockQuote') ? BLOCKQUOTE_KEY : controller.query('getHeading');
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInHr') || controller.query('isSelectionInListSymbol');
  const handleChange = React.useCallback(headingStr => {
    if (headingStr === BLOCKQUOTE_KEY) {
      if (type !== 'paragraph') {
        // 变成引用同时去除标题
        controller.run('onAction', (0, _actions.setHeading)('paragraph'));
      }

      controller.run('onAction', (0, _everUtils.toggleBlockquote)());
    } else {
      if (type === BLOCKQUOTE_KEY) {
        // 变成标题同时去除引用
        controller.run('onAction', (0, _everUtils.toggleBlockquote)());
      }

      controller.run('onAction', (0, _actions.setHeading)(headingStr));
    }
  }, [controller, type]);
  return /*#__PURE__*/_createElement(MemoFontSizeMaxSelect, {
    testid: "bi-toolbar-heading-group",
    disabled: !!isDisabled,
    value: type,
    onChange: handleChange // 这个值是标题仅显示两项且工具栏未显示更多时的长度，若工具栏的内容变化，需要更新
    ,
    toolbarLength: 1290,
    role: _everBamboo.PluginRoles.headingGroup
  });
}
//# sourceMappingURL=headingGroup.js.map