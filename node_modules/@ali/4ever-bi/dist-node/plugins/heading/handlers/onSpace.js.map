{"version":3,"sources":["../../../../../src/plugins/heading/handlers/onSpace.ts"],"names":["onSpace","event","controller","next","value","startBlock","selection","document","isExpanded","start","anchor","convertToTextPoints","texts","text","slice","offset","chars","replace","type","shortcutTypes","currentNode","getNode","key","foundInlineNode","index","nodes","indexOf","i","node","Inline","isInline","preventDefault","command","Commands","moveFocusToStartOfNode","del","run","dispatch","mdType"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAEe,SAASA,OAAT,CACbC,KADa,EAEbC,UAFa,EAGbC,IAHa,EAIb;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYF,UAAlB;AACA,QAAM;AAAEG,IAAAA,UAAF;AAAcC,IAAAA,SAAd;AAAyBC,IAAAA;AAAzB,MAAsCH,KAA5C;AACA,MAAI,CAACE,SAAD,IAAc,CAACD,UAAf,IAA6BC,SAAS,CAACE,UAA3C,EAAuD,OAAOL,IAAI,EAAX;AAEvD,QAAM;AAAEM,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBJ,SAAS,CAACK,mBAAV,CAA8BJ,QAA9B,CAA1B;AACA,QAAMK,KAAK,GAAGP,UAAU,CAACQ,IAAX,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyBL,KAAK,CAACM,MAA/B,CAAd;AACA,QAAMC,KAAK,GAAGJ,KAAK,CAACK,OAAN,CAAc,MAAd,EAAsB,EAAtB,CAAd;AACA,QAAMC,IAAI,GAAGC,uBAAcH,KAAd,KAAwB,IAArC;AAEA,MAAI,CAACE,IAAL,EAAW,OAAOf,IAAI,EAAX,CAVX,CAYA;;AACA,QAAMiB,WAAW,GAAGf,UAAU,CAACgB,OAAX,CAAmBX,MAAM,CAACY,GAA1B,CAApB;AACA,MAAI,CAACF,WAAL,EAAkB,OAAOjB,IAAI,EAAX;AAClB,MAAIoB,eAAe,GAAG,KAAtB;AACA;AACF;AACA;AACA;;AACE,QAAMC,KAAK,GAAGnB,UAAU,CAACoB,KAAX,CAAiBC,OAAjB,CAAyBN,WAAzB,CAAd;;AACA,OAAK,IAAIO,CAAC,GAAGH,KAAK,GAAG,CAArB,EAAwBG,CAAC,IAAI,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;AACnC,UAAMC,IAAI,GAAGvB,UAAU,CAACoB,KAAX,CAAiBE,CAAjB,CAAb;AACAJ,IAAAA,eAAe,GAAGA,eAAe,IAAIM,oBAAOC,QAAP,CAAgBF,IAAhB,CAArC;AACA,QAAIL,eAAJ,EAAqB;AACtB;;AACD,MAAIA,eAAJ,EAAqB,OAAOpB,IAAI,EAAX;AAErBF,EAAAA,KAAK,CAAC8B,cAAN;AACA7B,EAAAA,UAAU,CAAC8B,OAAX,CAAmBC,sBAASC,sBAA5B,EAAoD7B,UAApD,EAAgE2B,OAAhE,CAAwEC,sBAASE,GAAjF;AACAjC,EAAAA,UAAU,CAACkC,GAAX,CAAe,UAAf,EAA2B,yBAAiBlB,IAAjB,CAA3B;AACA,SAAOhB,UAAU,CAACmC,QAAX,CAAoB,6BAApB,EAAmD;AAAEC,IAAAA,MAAM,EAAEpB;AAAV,GAAnD,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { Controller, Commands, Inline, CangjieInputEvent, Block } from '@ali/4ever-cangjie';\nimport shortcutTypes from '../utils/shortcutTypes';\nimport { setHeading as setHeadingAction } from '../actions';\n\nexport default function onSpace(\n  event: React.KeyboardEvent | CangjieInputEvent,\n  controller: Controller,\n  next: Function,\n) {\n  const { value } = controller;\n  const { startBlock, selection, document } = value;\n  if (!selection || !startBlock || selection.isExpanded) return next();\n\n  const { start, anchor } = selection.convertToTextPoints(document);\n  const texts = startBlock.text.slice(0, start.offset);\n  const chars = texts.replace(/\\s*/g, '');\n  const type = shortcutTypes[chars] || null;\n\n  if (!type) return next();\n\n  // 在当前node之前有行内元素时不变heading（例如：@人 + # + 空格）\n  const currentNode = startBlock.getNode(anchor.key);\n  if (!currentNode) return next();\n  let foundInlineNode = false;\n  /**\n   * 极端场景：段落的开头是 1000 个行内元素\n   * 使用 getPreviousSibling 相比 for 循环性能差 3 倍左右\n   */\n  const index = startBlock.nodes.indexOf(currentNode as Block);\n  for (let i = index - 1; i >= 0; i--) {\n    const node = startBlock.nodes[i];\n    foundInlineNode = foundInlineNode || Inline.isInline(node);\n    if (foundInlineNode) break;\n  }\n  if (foundInlineNode) return next();\n\n  event.preventDefault();\n  controller.command(Commands.moveFocusToStartOfNode, startBlock).command(Commands.del);\n  controller.run('onAction', setHeadingAction(type));\n  return controller.dispatch('createTriggerMarkdownAction', { mdType: type });\n}\n"],"file":"onSpace.js"}