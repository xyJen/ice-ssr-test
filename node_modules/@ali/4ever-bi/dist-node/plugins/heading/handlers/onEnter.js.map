{"version":3,"sources":["../../../../../src/plugins/heading/handlers/onEnter.ts"],"names":["onEnter","event","controller","next","value","startBlock","selection","document","closestParagraphBlock","Heading","isHeading","preventDefault","start","end","convertToTextPoints","isCollapsed","isExpanded","closestInline","getClosestInline","key","isEnterAtInline","type","offset","command","Commands","moveToStartOfNextText","isFoldNode","userData","get","splitViewGroup","nextViewNode","splitBlock","anchorBlock","setNodeByKey","data","previous","getPreviousBlock","moveToEndOfNode","parent","getParent","lastNode","nodes","length","index","getPath","moveNodeByKey","moveToStartOfNode","isAtEndOfNode","nextSibling","getNextSibling","Block","isBlock","text","getFirstText","marks","getMarks","forEach","mark","removeMarkByKey","select","set"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Controller, Commands, Block } from '@ali/4ever-cangjie';\nimport { Heading } from '@ali/4ever-mo';\nimport { getClosestParagraph } from '@ali/4ever-utils';\nimport { omit } from 'lodash-es';\nimport { getNextViewGroupNode } from '@ali/4ever-plugin-heading-group';\n\nexport default function onEnter(\n  event: React.KeyboardEvent,\n  controller: Controller,\n  next: Function,\n) {\n  const { value } = controller;\n  const { startBlock, selection, document } = value;\n  if (!startBlock || !selection) return next();\n\n  const closestParagraphBlock: Block | null = getClosestParagraph(value);\n  if (!closestParagraphBlock) return next();\n\n  if (!Heading.isHeading(closestParagraphBlock)) {\n    return next();\n  }\n\n  event.preventDefault();\n  const { start, end } = selection.convertToTextPoints(document);\n  const { isCollapsed, isExpanded } = selection;\n  const closestInline = document.getClosestInline(start.key);\n\n  const isEnterAtInline =\n    isCollapsed &&\n    closestInline &&\n    // allow to split a link\n    closestInline.type !== 'link' &&\n    start.offset === 0;\n  if (isEnterAtInline) {\n    // just move to next text like normal paragraph\n    return controller.command(Commands.moveToStartOfNextText);\n  }\n\n  const isFoldNode = controller.userData.get(closestParagraphBlock, 'fold');\n\n  /**\n   * 若当前节点是 GroupNode list 节点，做可视节点的切割\n   *  I -> 光标坐在位置，在光标位置按 Enter 键\n   * \n   * 场景一: 折叠标题一 拆为标题一 和 空标题一\n   * \n   *  >标题一I            >标题一\n   *   标题一       ->     I<空标题一>\n   *                      标题一\n   * \n   * 场景二: 展开标题一 拆为 展开标题一 和 空段落\n   * \n   *   标题一I            标题一\n   *   普通段落       ->  I<空段落>\n   *                     普通段落\n   * 场景三: 折叠标题一 拆为标题一 和 空段落\n   * \n   *  >I标题一            ><空标题一>\n   *   标题一       ->    I标题一\n   *                     \n   * \n   * 场景四：后边无节点的折叠标题一 拆为折叠标题一 和空标题一\n   * \n   *  >标题一I        ->  >标题一\n   *                     I<空标题一>\n   */\n  const splitViewGroup = () => {\n    const nextViewNode = isFoldNode && getNextViewGroupNode(closestParagraphBlock, controller);\n    controller.command(Commands.splitBlock);\n    const anchorBlock = controller.value.anchorBlock;\n    if (!anchorBlock) {\n      return;\n    }\n    controller.command(Commands.setNodeByKey, anchorBlock.key, {\n      data: { ...omit(anchorBlock.data, 'fold', 'uuid') },\n      type: closestParagraphBlock.type,\n    })\n\n    if (nextViewNode) {\n      const previous = document.getPreviousBlock(nextViewNode.key);\n      previous && controller.command(Commands.moveToEndOfNode, previous);\n    } else {\n      const parent = controller.value.document.getParent(closestParagraphBlock.key);\n      const lastNode = parent?.nodes[parent?.nodes.length - 1];\n      lastNode && controller.command(Commands.moveToEndOfNode, lastNode);\n    }\n\n    const key = controller.value.anchorBlock.key;\n    const parent = controller.value.document.getParent(key);\n    const index = parent?.getPath(key);\n    if (parent && index?.length) {\n      controller\n        .command(Commands.moveNodeByKey, anchorBlock.key, parent.key, index[0])\n        .command(Commands.moveToStartOfNode, anchorBlock);\n    }\n  }\n\n  if (isFoldNode) {\n    return splitViewGroup();\n  }\n\n  // test isEnterAtLastChar at first since it can be an empty heading\n  if (isCollapsed && start.isAtEndOfNode(closestParagraphBlock)) {\n    // 使用 splitBlock 保持用户意图\n    controller.command(Commands.splitBlock);\n    // 修正回车换行后的 type, data 和 marks\n    const { key } = closestParagraphBlock;\n    const nextSibling = controller.value.document.getNextSibling(key);\n    if (nextSibling && Block.isBlock(nextSibling)) {\n      controller.command(Commands.setNodeByKey, nextSibling.key, { type: 'paragraph', data: {} });\n      const text = nextSibling.getFirstText();\n      if (text) {\n        const marks = text.getMarks();\n        marks.forEach((mark) => {\n          controller.command(Commands.removeMarkByKey, text.key, 0, text.text.length, mark);\n        });\n      }\n    }\n    // 需要清除选区临时样式（比如通过 # + space 生成的标题会一并设置临时样式）\n    return controller.command(Commands.select, controller.value.selection.set('marks', null));\n  }\n\n  if (isExpanded && end.isAtEndOfNode(closestParagraphBlock)) {\n    // clear style like word/wps\n    return controller\n      .command(Commands.splitBlock)\n      .command('clearStyle');\n  }\n\n  return next();\n}\n"],"file":"onEnter.js"}