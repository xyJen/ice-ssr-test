{"version":3,"sources":["../../../../../src/plugins/heading/queries/getBlockInsertPosition.ts"],"names":["getBlockInsertPosition","controller","cursorAtBlock","Heading","isHeading","selection","document","value","isExpanded","text","Text","isTextList","nodes","BlockInsertPosition","After","start","convertToTextPoints","isAtStartOfNode","Current","isAtEndOfNode","SplitAndAfter"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,sBAAT,CAAgCC,UAAhC,EAAwDC,aAAxD,EAA0G;AACvH;AACA,MAAI,CAACC,gBAAQC,SAAR,CAAkBF,aAAlB,CAAL,EAAuC;AACrC,WAAO,IAAP;AACD;;AAED,QAAM;AAAEG,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA0BL,UAAU,CAACM,KAA3C,CANuH,CAOvH;;AACA,MAAIF,SAAS,CAACG,UAAd,EAA0B;AACxB,WAAO,IAAP;AACD,GAVsH,CAYvH;;;AACA,MAAIN,aAAa,CAACO,IAAd,KAAuB,EAAvB,IAA6BC,kBAAKC,UAAL,CAAgBT,aAAa,CAACU,KAA9B,CAAjC,EAAuE;AACrE,WAAOC,qCAAoBC,KAA3B;AACD;;AAED,QAAM;AAAEC,IAAAA;AAAF,MAAYV,SAAS,CAACW,mBAAV,CAA8BV,QAA9B,CAAlB,CAjBuH,CAmBvH;;AACA,MAAIS,KAAK,CAACE,eAAN,CAAsBf,aAAtB,CAAJ,EAA0C;AACxC,WAAOW,qCAAoBK,OAA3B;AACD,GAtBsH,CAwBvH;;;AACA,MAAIH,KAAK,CAACI,aAAN,CAAoBjB,aAApB,CAAJ,EAAwC;AACtC,WAAOW,qCAAoBC,KAA3B;AACD,GA3BsH,CA6BvH;;;AACA,SAAOD,qCAAoBO,aAA3B;AACD","sourcesContent":["import { Controller, Text, Block } from '@ali/4ever-cangjie';\nimport { Heading } from '@ali/4ever-mo';\nimport { BlockInsertPosition } from '@ali/4ever-plugin-basic';\n\n/**\n * 获取待插入 Block 应在光标所在标题 Block 的相对位置\n *\n * 获得有效结果的前提条件：光标在标题 && selection collapsed\n * @export\n * @param {Controller} controller\n * @param {Block} cursorAtBlock 当前光标所在 block\n * @returns {(BlockInsertPosition | null)} 插入位置（null 表示无法判定）\n */\nexport default function getBlockInsertPosition(controller: Controller, cursorAtBlock: Block): BlockInsertPosition | null {\n  // 非标题，不属于判定范围内\n  if (!Heading.isHeading(cursorAtBlock)) {\n    return null;\n  }\n\n  const { selection, document } = controller.value;\n  // selection expanded 状态，不属于判定范围内\n  if (selection.isExpanded) {\n    return null;\n  }\n\n  // 空标题\n  if (cursorAtBlock.text === '' && Text.isTextList(cursorAtBlock.nodes)) {\n    return BlockInsertPosition.After;\n  }\n\n  const { start } = selection.convertToTextPoints(document);\n\n  // 非空标题情况下，光标在开头\n  if (start.isAtStartOfNode(cursorAtBlock)) {\n    return BlockInsertPosition.Current;\n  }\n\n  // 非空标题情况下，光标在末尾\n  if (start.isAtEndOfNode(cursorAtBlock)) {\n    return BlockInsertPosition.After;\n  }\n\n  // 非空标题情况下，光标在末尾\n  return BlockInsertPosition.SplitAndAfter;\n}\n"],"file":"getBlockInsertPosition.js"}