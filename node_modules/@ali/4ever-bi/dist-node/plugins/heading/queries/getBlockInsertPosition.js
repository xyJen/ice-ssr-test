"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getBlockInsertPosition;

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _everPluginBasic = require("@ali/4ever-plugin-basic");

/**
 * 获取待插入 Block 应在光标所在标题 Block 的相对位置
 *
 * 获得有效结果的前提条件：光标在标题 && selection collapsed
 * @export
 * @param {Controller} controller
 * @param {Block} cursorAtBlock 当前光标所在 block
 * @returns {(BlockInsertPosition | null)} 插入位置（null 表示无法判定）
 */
function getBlockInsertPosition(controller, cursorAtBlock) {
  // 非标题，不属于判定范围内
  if (!_everMo.Heading.isHeading(cursorAtBlock)) {
    return null;
  }

  const {
    selection,
    document
  } = controller.value; // selection expanded 状态，不属于判定范围内

  if (selection.isExpanded) {
    return null;
  } // 空标题


  if (cursorAtBlock.text === '' && _everCangjie.Text.isTextList(cursorAtBlock.nodes)) {
    return _everPluginBasic.BlockInsertPosition.After;
  }

  const {
    start
  } = selection.convertToTextPoints(document); // 非空标题情况下，光标在开头

  if (start.isAtStartOfNode(cursorAtBlock)) {
    return _everPluginBasic.BlockInsertPosition.Current;
  } // 非空标题情况下，光标在末尾


  if (start.isAtEndOfNode(cursorAtBlock)) {
    return _everPluginBasic.BlockInsertPosition.After;
  } // 非空标题情况下，光标在末尾


  return _everPluginBasic.BlockInsertPosition.SplitAndAfter;
}
//# sourceMappingURL=getBlockInsertPosition.js.map