{"version":3,"sources":["../../../../../src/plugins/audio/components/audio.tsx"],"names":["EmbedCard","AudioPreview","EmbedPlugin","Audio","PureComponent","constructor","props","ref","React","createRef","getNodeData","node","data","onSwitchViewType","viewType","controller","prevViewType","run","onDownloadFile","src","name","type","size","onDownload","onMediaLoadSuccess","onMediaLoadError","allowDownload","state","componentDidMount","then","res","setState","renderCard","isSelected","locale","renderPreview","transformAudioURL","renderInlineToolbar","current","render","attributes","Container","scrollableContainer"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  RenderNodeProps,\n  useScrollableContainer,\n} from '@ali/4ever-cangjie';\nimport {\n  EmbedNode, EmbedPlugin,\n} from '@ali/4ever-bamboo';\nimport { updateFile, EmbedInlineToolbar } from '@ali/4ever-factory';\nimport { AudioPluginConfig } from '../types';\n\nconst {\n  EmbedCard, AudioPreview,\n} = EmbedPlugin;\n\ninterface IProps extends\n  Pick<AudioPluginConfig, 'allowDownload' | 'onMediaLoadSuccess' | 'onMediaLoadError' | 'locale'>,\n  RenderNodeProps<EmbedNode> {\n  onDownload: AudioPluginConfig['downloadFile'];\n  transformAudioURL?: AudioPluginConfig['transformAudioURL'];\n  scrollableContainer: HTMLElement | Window;\n  zoomContainer: HTMLElement | null;\n}\n\ninterface IState {\n  allowDownload: boolean;\n}\n\nclass Audio extends PureComponent<IProps, IState> {\n  ref = React.createRef<HTMLDivElement>();\n\n  constructor(props: IProps) {\n    super(props);\n    const { allowDownload } = props;\n    this.state = {\n      allowDownload: typeof allowDownload === 'boolean' ? allowDownload : false,\n    };\n  }\n\n  componentDidMount() {\n    const { allowDownload } = this.props;\n    const { src } = this.getNodeData();\n\n    if (typeof allowDownload === 'function') {\n      allowDownload(src).then((res) => {\n        this.setState({\n          allowDownload: res,\n        });\n      });\n    }\n  }\n\n  getNodeData = () => {\n    const { node } = this.props;\n    const { data } = node;\n    return data;\n  };\n\n  onSwitchViewType = (viewType: string) => {\n    const { controller, node } = this.props;\n    const { data } = node;\n    const { viewType: prevViewType } = this.getNodeData();\n    if (prevViewType === viewType) {\n      return;\n    }\n    controller.run(\n      'onAction',\n      updateFile(\n        node,\n        {\n          ...data,\n          viewType,\n        },\n      ),\n    );\n  };\n\n  onDownloadFile = () => {\n    const { src, name, type, size } = this.getNodeData();\n    const { onDownload } = this.props;\n    if (onDownload) {\n      onDownload(src, {\n        name,\n        type,\n        size,\n      });\n    }\n  };\n\n  onMediaLoadSuccess = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadSuccess } = this.props;\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(src);\n    }\n  };\n\n  onMediaLoadError = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadError } = this.props;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  renderCard() {\n    const { allowDownload } = this.state;\n    const { name, size } = this.getNodeData();\n    const { isSelected, node, locale } = this.props;\n    return (\n      <EmbedCard\n        name={name}\n        allowDownload={allowDownload}\n        isSelected={isSelected}\n        node={node}\n        locale={locale}\n        onDownloadFile={this.onDownloadFile}\n        size={size}\n      />\n    );\n  }\n\n  renderPreview() {\n    const { allowDownload } = this.state;\n    const { name, size, src } = this.getNodeData();\n    const { transformAudioURL, locale = {} } = this.props;\n\n    return (\n      <AudioPreview\n        allowDownload={allowDownload}\n        onMediaLoadSuccess={this.onMediaLoadSuccess}\n        onMediaLoadError={this.onMediaLoadError}\n        transformAudioURL={transformAudioURL}\n        locale={locale}\n        name={name}\n        size={size}\n        src={src}\n        onDownloadFile={this.onDownloadFile}\n      />\n    );\n  }\n\n  renderInlineToolbar() {\n    const { controller, node, locale = {} } = this.props;\n\n    return (\n      <EmbedInlineToolbar\n        controller={controller}\n        node={node}\n        locale={locale}\n        onSwitchViewType={this.onSwitchViewType}\n        isMoreButtonShown\n        triggerNode={this.ref.current}\n      />\n    );\n  }\n\n  render() {\n    const { viewType } = this.getNodeData();\n    const { attributes, isSelected } = this.props;\n\n    return (\n      <React.Fragment>\n        {isSelected ? this.renderInlineToolbar() : null}\n        <div\n          {...attributes}\n          ref={this.ref}\n        >\n          {viewType === 'preview' ? this.renderPreview() : this.renderCard()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Container: React.FC<IProps> = (props) => {\n  const scrollableContainer = useScrollableContainer();\n\n  return (\n    <Audio\n      {...props}\n      scrollableContainer={scrollableContainer!}\n    />\n  );\n};\n\nexport default Container;\n"],"file":"audio.js"}