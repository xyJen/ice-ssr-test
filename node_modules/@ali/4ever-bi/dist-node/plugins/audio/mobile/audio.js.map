{"version":3,"sources":["../../../../../src/plugins/audio/mobile/audio.tsx"],"names":["MobileEmbedCard","AudioPreview","EmbedPlugin","Audio","PureComponent","constructor","props","ref","React","createRef","previewRef","getNodeData","node","data","onMediaLoadError","src","onMediaLoadSuccess","onDownloadFile","name","type","size","onDownload","allowDownload","state","componentDidMount","then","res","setState","renderPreview","transformAudioURL","locale","renderCard","onPreview","renderInlineToolbar","controller","current","render","viewType","attributes","isSelected","Container","scrollableContainer"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { useScrollableContainer, EmbedPlugin } from '@ali/4ever-bamboo';\nimport {\n  EmbedInlineToolbar as AudioInlineToolbar,\n} from '@ali/4ever-factory';\n\nconst {\n  MobileEmbedCard, AudioPreview,\n} = EmbedPlugin;\n\ninterface IProps {\n  controller: Controller;\n  attributes: any;\n  node: any;\n  locale: any;\n  mobile: boolean;\n  isSelected: boolean;\n  transformAudioURL?: (src: string) => string;\n  onMediaLoadSuccess?: any;\n  onMediaLoadError?: any;\n  scrollableContainer: HTMLElement | Window;\n  onDownload?: Function;\n  allowDownload?: ((src: string) => Promise<boolean>) | boolean;\n  onPreview?: (\n    url: string,\n  ) => Promise<{ previewUrl: string }>;\n}\n\ninterface IState {\n  allowDownload: boolean;\n}\n\nclass Audio extends PureComponent<IProps, IState> {\n  ref = React.createRef<HTMLDivElement>();\n\n  previewRef = React.createRef();\n\n  constructor(props: IProps) {\n    super(props);\n    const { allowDownload } = props;\n    this.state = {\n      allowDownload: typeof allowDownload === 'boolean' ? allowDownload : false,\n    };\n  }\n\n  componentDidMount() {\n    const { allowDownload } = this.props;\n    const { src } = this.getNodeData();\n\n    if (typeof allowDownload === 'function') {\n      allowDownload(src).then((res) => {\n        this.setState({\n          allowDownload: res,\n        });\n      });\n    }\n  }\n\n  getNodeData = () => {\n    const { node } = this.props;\n    const { data } = node || {};\n    return data;\n  };\n\n  onMediaLoadError = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadError } = this.props;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  onMediaLoadSuccess = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadSuccess } = this.props;\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(src);\n    }\n  };\n\n  onDownloadFile = () => {\n    const { src, name, type, size } = this.getNodeData();\n    const { onDownload } = this.props;\n    if (onDownload) {\n      onDownload(src, {\n        name,\n        type,\n        size,\n      });\n    }\n  };\n\n  renderPreview() {\n    const { allowDownload } = this.state;\n    const {\n      transformAudioURL,\n      locale,\n    } = this.props;\n\n    const { name, size, src } = this.getNodeData();\n\n    return (\n      <AudioPreview\n        allowDownload={allowDownload}\n        onMediaLoadSuccess={this.onMediaLoadSuccess}\n        onMediaLoadError={this.onMediaLoadError}\n        transformAudioURL={transformAudioURL}\n        locale={locale}\n        name={name}\n        size={size}\n        src={src}\n        onDownloadFile={this.onDownloadFile}\n        isMobile\n      />\n    );\n  }\n\n  renderCard() {\n    const { name, src, type, size } = this.getNodeData();\n    const { onPreview } = this.props;\n\n    return (\n      <MobileEmbedCard\n        name={name}\n        onPreview={onPreview}\n        src={src}\n        type={type}\n        size={size}\n      />\n    );\n  }\n\n  renderInlineToolbar() {\n    const { controller, node, locale } = this.props;\n\n    return (\n      <AudioInlineToolbar\n        controller={controller}\n        node={node}\n        locale={locale}\n        triggerNode={this.ref.current}\n      />\n    );\n  }\n\n  render() {\n    const { viewType } = this.getNodeData();\n    const { attributes, isSelected } = this.props;\n\n    return (\n      <React.Fragment>\n        {isSelected ? this.renderInlineToolbar() : null}\n        <div {...attributes} ref={this.ref}>\n          {viewType === 'preview' ? this.renderPreview() : this.renderCard()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Container: React.FC<IProps> = (props) => {\n  const scrollableContainer = useScrollableContainer();\n\n  return <Audio {...props} scrollableContainer={scrollableContainer} />;\n};\n\nexport default Container;\n"],"file":"audio.js"}