"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderNode;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _embed = _interopRequireDefault(require("./components/embed"));

var _everFactory = require("@ali/4ever-factory");

const _createElement = /*#__PURE__*/React.createElement;

function createRenderNode(config) {
  const embedConfig = config.embed || {};
  const {
    locale: embedLocaleConfig = {},
    downloadFile,
    transformDocURL,
    enableFilePreview = true,
    allowDownload
  } = embedConfig;
  return {
    embed: (props, controller, next) => {
      const {
        node
      } = props;

      if (!node.data.src) {
        return /*#__PURE__*/_createElement(_everFactory.UploadOrFailedCard, (0, _extends2.default)({}, props, {
          node: node,
          locale: embedLocaleConfig,
          controller: controller
        }));
      } else if (node.data.type !== 'video' && node.data.type !== 'audio') {
        return /*#__PURE__*/_createElement(_embed.default, (0, _extends2.default)({}, props, {
          controller: controller,
          onDownload: downloadFile,
          onPreview: transformDocURL,
          locale: embedLocaleConfig,
          enableFilePreview: enableFilePreview,
          allowDownload: allowDownload
        }));
      }

      return next();
    }
  };
}
//# sourceMappingURL=createRenderNode.js.map