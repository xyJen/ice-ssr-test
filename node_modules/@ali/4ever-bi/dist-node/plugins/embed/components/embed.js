"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _everBamboo = require("@ali/4ever-bamboo");

var _styled = require("./styled");

var _everFactory = require("@ali/4ever-factory");

var _everComponent = require("@ali/4ever-component");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  previewHeight: DEFAULT_PREVIEW_HEIGHT
} = _everBamboo.theme.embed;
const {
  EmbedPreviewHeader,
  EmbedDownloadButton,
  EmbedCard
} = _everBamboo.EmbedPlugin;
const MIN_PREVIEW_HEIGHT = 150;
const MAX_PREVIEW_HEIGHT = 800;
const HEIGHT_RANGE = [MIN_PREVIEW_HEIGHT, MAX_PREVIEW_HEIGHT];

class Embed extends _react.PureComponent {
  constructor(props) {
    super(props);
    this.ref = /*#__PURE__*/_react.default.createRef();
    this.interval = null;
    this.previewTimeout = null;
    this.previewUnfoldTimeout = null;

    this.getNodeData = () => {
      const {
        node
      } = this.props;
      const {
        data
      } = node;
      return data;
    };

    this.onSwitchViewType = viewType => {
      const {
        controller,
        node
      } = this.props;
      const {
        data
      } = node;
      const {
        viewType: prevViewType
      } = this.getNodeData();

      if (prevViewType === viewType) {
        return;
      }

      controller.run('onAction', (0, _everFactory.updateFile)(node, { ...data,
        viewType
      }));

      if (viewType === 'preview') {
        this.setState({
          previewUrl: ''
        });
      }
    };

    this.onDownloadFile = () => {
      const {
        src,
        name,
        type,
        size
      } = this.getNodeData();
      const {
        onDownload
      } = this.props;

      if (onDownload) {
        onDownload(src, {
          name,
          type,
          size
        });
      }
    };

    this.handleResizeStart = () => {
      this.setState({
        dragging: true
      });
    };

    this.handleResize = (e, size) => {
      this.setState({
        height: size.height
      });
    };

    this.handleResizeStop = () => {
      const {
        height
      } = this.state;
      const {
        controller,
        node
      } = this.props;
      const {
        data
      } = node;
      this.setState({
        dragging: false
      });
      controller.run('onAction', (0, _everFactory.updateFile)(node, { ...data,
        previewSize: {
          height
        }
      }));
    };

    this.showPreviewSlideDown = () => {
      // slidedown效果
      this.previewTimeout = setTimeout(() => {
        this.setState({
          height: 36
        });
      });
      this.previewUnfoldTimeout = setTimeout(() => {
        this.setState({
          height: DEFAULT_PREVIEW_HEIGHT
        });
      }, 10);
    };

    this.preview = () => {
      const {
        previewing
      } = this.state;
      const {
        src
      } = this.getNodeData();
      const {
        onPreview
      } = this.props;

      if (previewing) {
        return;
      }

      this.setState({
        previewing: true
      });

      if (!onPreview) {
        return;
      }

      onPreview(src).then(res => {
        const {
          previewUrl: truePreviewUrl
        } = res;

        if (truePreviewUrl) {
          this.setState({
            previewUrl: truePreviewUrl,
            previewing: false
          });
        }
      }).catch(() => {
        this.setState({
          previewError: true,
          previewing: false
        });
      });
    };

    this.reTryPreview = () => {
      this.setState({
        previewError: false
      });
      this.preview();
    };

    const {
      node: _node,
      allowDownload
    } = props;
    const {
      data: _data
    } = _node;
    const {
      previewSize,
      viewType: _viewType
    } = _data;
    let _height = 0;

    if (_viewType === 'preview') {
      if (previewSize) {
        // @ts-ignore
        _height = previewSize.height;
      } else {
        _height = DEFAULT_PREVIEW_HEIGHT;
      }
    }

    this.state = {
      height: _height,
      previewUrl: '',
      previewError: false,
      previewing: false,
      dragging: false,
      allowDownload: typeof allowDownload === 'boolean' ? allowDownload : false // 如果布尔值，直接设置

    };
  }

  componentDidMount() {
    const {
      src
    } = this.getNodeData();
    const {
      node,
      allowDownload
    } = this.props;
    const {
      data
    } = node;
    const {
      viewType
    } = data;

    if (viewType === 'preview' && src) {
      this.preview();
    }

    if (typeof allowDownload === 'function') {
      allowDownload(src).then(res => {
        this.setState({
          allowDownload: res
        });
      });
    }
  }

  componentDidUpdate(prevProps) {
    const {
      data: prevData
    } = prevProps.node;
    const {
      data
    } = this.props.node;
    const {
      viewType: prevViewType
    } = prevData;
    const {
      viewType
    } = data;

    if (prevViewType !== viewType && viewType === 'preview') {
      this.showPreviewSlideDown();
      this.preview();
    }
  }

  componentWillUnmount() {
    if (this.previewTimeout) {
      clearTimeout(this.previewTimeout);
      this.previewTimeout = null;
    }

    if (this.previewUnfoldTimeout) {
      clearTimeout(this.previewUnfoldTimeout);
      this.previewUnfoldTimeout = null;
    }

    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
  }

  renderCard() {
    const {
      allowDownload
    } = this.state;
    const {
      name,
      size
    } = this.getNodeData();
    const {
      isSelected,
      node,
      locale
    } = this.props;
    return /*#__PURE__*/_createElement(EmbedCard, {
      name: name,
      allowDownload: allowDownload,
      isSelected: isSelected,
      node: node,
      locale: locale,
      onDownloadFile: this.onDownloadFile,
      size: size
    });
  }

  renderPreviewContent() {
    const {
      previewUrl,
      previewError
    } = this.state;
    const {
      locale = {}
    } = this.props;

    if (previewError) {
      return /*#__PURE__*/_createElement(_styled.PreviewError, null, /*#__PURE__*/_createElement(_styled.PreviewErrorText, null, locale.previewError, /*#__PURE__*/_createElement(_styled.PreviewErrorRetry, {
        onClick: this.reTryPreview
      }, locale.reTryPreview)));
    }

    return /*#__PURE__*/_createElement(_react.default.Fragment, null, previewUrl ? /*#__PURE__*/_createElement("iframe", {
      style: {
        width: '100%',
        height: '100%',
        border: 'none',
        background: '#EDEDED'
      },
      title: "preview",
      src: (0, _everUtils.sanitizeUrl)(previewUrl)
    }) : null);
  }

  renderPreview() {
    const {
      height,
      dragging,
      allowDownload
    } = this.state;
    const {
      type,
      name,
      size
    } = this.getNodeData();
    const {
      isSelected,
      scale,
      zoomContainer,
      locale,
      controller
    } = this.props;
    const transitionProperty = dragging ? 'none' : 'height';

    const handlePreviewContentMouseDown = e => {
      e.preventDefault();
    };

    const enableBorderHighlight = controller.query('enableBorderHighlight');
    return /*#__PURE__*/_createElement(_everComponent.Resizable, {
      axis: "y",
      visible: isSelected,
      width: Infinity,
      height: Math.min(height || 0, MAX_PREVIEW_HEIGHT),
      heightRange: HEIGHT_RANGE,
      onResize: this.handleResize,
      onResizeStop: this.handleResizeStop,
      onResizeStart: this.handleResizeStart,
      speed: 1.0 / scale,
      zoomContainer: zoomContainer,
      isActive: isSelected,
      enableBorderHighlight: enableBorderHighlight
    }, /*#__PURE__*/_createElement(_styled.EmbedFilePreviewWrapper, {
      isSelected: isSelected,
      style: {
        height,
        transitionProperty
      },
      "data-testid": "embed-preview",
      "data-type": `embed-${type}`
    }, /*#__PURE__*/_createElement(EmbedPreviewHeader, {
      type: type,
      name: name,
      size: size,
      renderExtra: () => /*#__PURE__*/_createElement(EmbedDownloadButton, {
        title: locale?.title,
        onDownloadFile: this.onDownloadFile,
        allowDownload: allowDownload
      })
    }), /*#__PURE__*/_createElement(_styled.PreviewContentWrapper, {
      onMouseDown: handlePreviewContentMouseDown
    }, this.renderPreviewContent(), /*#__PURE__*/_createElement(_styled.EmbedFilePreviewMask, {
      style: {
        display: !isSelected || dragging ? 'block' : 'none'
      }
    }))));
  }

  renderInlineToolbar() {
    const {
      controller,
      node,
      locale,
      enableFilePreview
    } = this.props;
    return /*#__PURE__*/_createElement(_everFactory.EmbedInlineToolbar, {
      controller: controller,
      node: node,
      triggerNode: this.ref.current,
      locale: locale || {},
      onSwitchViewType: this.onSwitchViewType,
      isMoreButtonShown: enableFilePreview
    });
  }

  render() {
    const {
      viewType
    } = this.getNodeData();
    const {
      attributes,
      isSelected,
      controller
    } = this.props;
    const {
      isCollapsed
    } = controller.value.selection; // const hasHoverToolbar = controller.query('hasHoverToolbar', 'embed');

    return /*#__PURE__*/_createElement(_react.default.Fragment, null, isSelected && isCollapsed ? this.renderInlineToolbar() : null, /*#__PURE__*/_createElement("div", (0, _extends2.default)({}, attributes, {
      ref: this.ref
    }), viewType === 'preview' ? this.renderPreview() : this.renderCard()));
  }

}

const Container = props => {
  const scrollableContainer = (0, _everBamboo.useScrollableContainer)();
  const zoomContainer = (0, _everCangjie.useZoomContainer)() || document.body;
  const scale = (0, _everCangjie.useZoom)();
  return /*#__PURE__*/_createElement(Embed, (0, _extends2.default)({}, props, {
    scrollableContainer: scrollableContainer,
    zoomContainer: zoomContainer,
    scale: scale
  }));
};

var _default = Container;
exports.default = _default;
//# sourceMappingURL=embed.js.map