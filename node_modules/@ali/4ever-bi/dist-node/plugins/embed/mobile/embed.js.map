{"version":3,"sources":["../../../../../src/plugins/embed/mobile/embed.tsx"],"names":["MobileEmbedCard","EmbedPlugin","Embed","PureComponent","ref","React","createRef","previewRef","getNodeData","node","props","data","renderCard","name","src","type","size","onPreview","renderInlineToolbar","controller","locale","current","render","attributes","isSelected","Container","scrollableContainer"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AAIA;;uBAL4B,a;AAO5B,MAAM;AACJA,EAAAA;AADI,IAEFC,uBAFJ;;AAgBA,MAAMC,KAAN,SAAoBC,oBAApB,CAA0C;AAAA;AAAA;AAAA,SACxCC,GADwC,gBAClCC,eAAMC,SAAN,EADkC;AAAA,SAGxCC,UAHwC,gBAG3BF,eAAMC,SAAN,EAH2B;;AAAA,SAKxCE,WALwC,GAK1B,MAAM;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAW,KAAKC,KAAtB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAWF,IAAI,IAAI,EAAzB;AACA,aAAOE,IAAP;AACD,KATuC;AAAA;;AAWxCC,EAAAA,UAAU,GAAG;AACX,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,GAAR;AAAaC,MAAAA,IAAb;AAAmBC,MAAAA;AAAnB,QAA4B,KAAKR,WAAL,EAAlC;AACA,UAAM;AAAES,MAAAA;AAAF,QAAgB,KAAKP,KAA3B;AAEA,wBACE,eAAC,eAAD;AACE,MAAA,IAAI,EAAEG,IADR;AAEE,MAAA,SAAS,EAAEI,SAFb;AAGE,MAAA,GAAG,EAAEH,GAHP;AAIE,MAAA,IAAI,EAAEC,IAJR;AAKE,MAAA,IAAI,EAAEC;AALR,MADF;AASD;;AAEDE,EAAAA,mBAAmB,GAAG;AACpB,UAAM;AAAEC,MAAAA,UAAF;AAAcV,MAAAA,IAAd;AAAoBW,MAAAA;AAApB,QAA+B,KAAKV,KAA1C;AAEA,wBACE,eAAC,+BAAD;AACE,MAAA,UAAU,EAAES,UADd;AAEE,MAAA,IAAI,EAAEV,IAFR;AAGE,MAAA,MAAM,EAAEW,MAHV;AAIE,MAAA,WAAW,EAAE,KAAKhB,GAAL,CAASiB;AAJxB,MADF;AAQD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA6B,KAAKd,KAAxC;AACA,wBACE,eAAC,cAAD,CAAO,QAAP,QACGc,UAAU,GAAG,KAAKN,mBAAL,EAAH,GAAgC,IAD7C,eAEE,iDAASK,UAAT;AAAqB,MAAA,GAAG,EAAE,KAAKnB;AAA/B,QACG,KAAKQ,UAAL,EADH,CAFF,CADF;AAQD;;AAjDuC;;AAoD1C,MAAMa,SAA2B,GAAIf,KAAD,IAAW;AAC7C,QAAMgB,mBAAmB,GAAG,yCAA5B;AAEA,sBAAO,eAAC,KAAD,6BAAWhB,KAAX;AAAkB,IAAA,mBAAmB,EAAEgB;AAAvC,KAAP;AACD,CAJD;;eAMeD,S","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport {\n  EmbedPlugin,\n  useScrollableContainer,\n} from '@ali/4ever-bamboo';\nimport { EmbedInlineToolbar } from '@ali/4ever-factory';\n\nconst {\n  MobileEmbedCard,\n} = EmbedPlugin;\n\ninterface IProps {\n  controller: Controller;\n  attributes: any;\n  node: any;\n  locale: any;\n  mobile: boolean;\n  isSelected: boolean;\n  onDownload: Function;\n  onPreview?: (src: string) => void;\n  scrollableContainer: HTMLElement | Window;\n}\n\nclass Embed extends PureComponent<IProps> {\n  ref = React.createRef<HTMLDivElement>();\n\n  previewRef = React.createRef();\n\n  getNodeData = () => {\n    const { node } = this.props;\n    const { data } = node || {};\n    return data;\n  };\n\n  renderCard() {\n    const { name, src, type, size } = this.getNodeData();\n    const { onPreview } = this.props;\n\n    return (\n      <MobileEmbedCard\n        name={name}\n        onPreview={onPreview}\n        src={src}\n        type={type}\n        size={size}\n      />\n    );\n  }\n\n  renderInlineToolbar() {\n    const { controller, node, locale } = this.props;\n\n    return (\n      <EmbedInlineToolbar\n        controller={controller}\n        node={node}\n        locale={locale}\n        triggerNode={this.ref.current}\n      />\n    );\n  }\n\n  render() {\n    const { attributes, isSelected } = this.props;\n    return (\n      <React.Fragment>\n        {isSelected ? this.renderInlineToolbar() : null}\n        <div {...attributes} ref={this.ref}>\n          {this.renderCard()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Container: React.FC<IProps> = (props) => {\n  const scrollableContainer = useScrollableContainer();\n\n  return <Embed {...props} scrollableContainer={scrollableContainer} />;\n};\n\nexport default Container;\n"],"file":"embed.js"}