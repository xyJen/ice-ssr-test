{"version":3,"sources":["../../../../../../src/plugins/fonts/components/next/fontsButton.tsx"],"names":["FontsButton","props","controller","locale","width","rest","docStyle","fonts","query","docDefaults","data","rPr","isCollapsedAtEdge","value","selection","isDisabled","handleChange","React","useCallback","fontsValue","run","title","buttonTitle","defaultFonts","PluginRoles","fontFamilySelect"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;uBAN4B,a;AAG5B;;AAWe,SAASA,WAAT,CAAqBC,KAArB,EAA8C;AAC3D,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,KAAK,GAAG,GAA9B;AAAmC,OAAGC;AAAtC,MAA+CJ,KAArD;AACA,QAAMK,QAAQ,GAAG,4BAAjB;AACA,QAAMC,KAAK,GAAGL,UAAU,CAACM,KAAX,CAAiB,UAAjB,EAA6BF,QAAQ,EAAEG,WAAV,EAAuBC,IAAvB,EAA6BC,GAA7B,EAAkCJ,KAA/D,CAAd;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAwBV,UAAU,CAACW,KAAX,CAAiBC,SAA/C;AAEA,QAAMC,UAAU,GAAGH,iBAAiB,IAC/BV,UAAU,CAACM,KAAX,CAAiB,oBAAjB,CADc,IAEdN,UAAU,CAACM,KAAX,CAAiB,iBAAjB,CAFc,IAGdN,UAAU,CAACM,KAAX,CAAiB,uBAAjB,CAHL;AAIA,QAAMQ,YAAY,GAAGC,KAAK,CAACC,WAAN,CAAmBC,UAAD,IAAwBjB,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2B,uBAASD,UAAT,CAA3B,CAA1C,EAA4F,CAACjB,UAAD,CAA5F,CAArB;AAEA,MAAImB,KAAK,GAAGlB,MAAM,EAAEmB,WAAR,IAAuB,EAAnC;;AAEA,MAAIf,KAAK,IAAIA,KAAK,KAAKgB,gCAAvB,EAAqC;AACnC;AACAF,IAAAA,KAAK,IAAK,IAAG,0BAAYd,KAAZ,EAAmBJ,MAAnB,CAA2B,EAAxC;AACD;;AAED,sBACE,eAAC,+BAAD;AACE,IAAA,MAAM,EAAC,kBADT;AAEE,IAAA,QAAQ,EAAE,CAAC,CAACY,UAFd;AAGE,IAAA,KAAK,EAAER,KAAK,IAAIJ,MAAM,EAAEmB,WAH1B;AAIE,IAAA,QAAQ,EAAEN,YAJZ;AAKE,IAAA,IAAI,EAAEQ,wBAAYC,gBALpB;AAME,IAAA,KAAK,EAAErB,KANT;AAOE,IAAA,OAAO,EAAEiB,KAAK,IAAI;AAPpB,KAQMhB,IARN,EADF;AAYD","sourcesContent":["import * as React from 'react';\nimport { Controller, useStyle } from '@ali/4ever-cangjie';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { FontFamilySelect, IToolbarButtonConfig } from '@ali/4ever-component';\n;\nimport { setFonts } from '../../actions';\nimport { defaultFonts } from '../../utils/getActiveFontsMark';\nimport getFontsTip from '../../utils/getFontsTip';\n\nexport interface FontsButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  locale?: Record<string, string>;\n  width?: number;\n}\n\nexport default function FontsButton(props: FontsButtonProps) {\n  const { controller, locale, width = 133, ...rest } = props;\n  const docStyle = useStyle();\n  const fonts = controller.query('getFonts', docStyle?.docDefaults?.data?.rPr?.fonts);\n  const { isCollapsedAtEdge } = controller.value.selection;\n\n  const isDisabled = isCollapsedAtEdge\n    || controller.query('isSelectionInImage')\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInLinkCard');\n  const handleChange = React.useCallback((fontsValue: string) => controller.run('onAction', setFonts(fontsValue)), [controller]);\n\n  let title = locale?.buttonTitle || '';\n\n  if (fonts && fonts !== defaultFonts) {\n    // 提示显示当前字体\n    title += ` ${getFontsTip(fonts, locale)}`;\n  }\n\n  return (\n    <FontFamilySelect\n      testid=\"bi-toolbar-fonts\"\n      disabled={!!isDisabled}\n      value={fonts || locale?.buttonTitle}\n      onChange={handleChange}\n      role={PluginRoles.fontFamilySelect}\n      width={width}\n      tooltip={title || 'Font Family'}\n      {...rest}\n    />\n  );\n}\n"],"file":"fontsButton.js"}