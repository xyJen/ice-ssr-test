{"version":3,"sources":["../../../../../src/plugins/fonts/components/fontsButton.tsx"],"names":["FontFamilySelect","React","memo","OriginFontFamilySelect","FontsButton","props","controller","locale","toolbarMode","rest","docStyle","fonts","query","docDefaults","data","rPr","isCollapsedAtEdge","value","selection","isDisabled","isDouble","ToolbarMode","double","handleChange","useCallback","fontsValue","run","realWidth","title","buttonTitle","defaultFonts","PluginRoles","fontFamilySelect"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;uBAN4B,a;AAQ5B,MAAMA,gBAAgB,gBAAGC,KAAK,CAACC,IAAN,CAAWC,2BAAX,CAAzB;;AAQe,SAASC,WAAT,CAAqBC,KAArB,EAA8C;AAC3D,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,WAAtB;AAAmC,OAAGC;AAAtC,MAA+CJ,KAArD;AACA,QAAMK,QAAQ,GAAG,4BAAjB;AACA,QAAMC,KAAK,GAAGL,UAAU,CAACM,KAAX,CAAiB,UAAjB,EAA6BF,QAAQ,EAAEG,WAAV,EAAuBC,IAAvB,EAA6BC,GAA7B,EAAkCJ,KAA/D,CAAd;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAwBV,UAAU,CAACW,KAAX,CAAiBC,SAA/C;AACA,QAAMC,UAAU,GAAGH,iBAAiB,IAC/BV,UAAU,CAACM,KAAX,CAAiB,oBAAjB,CADc,IAEdN,UAAU,CAACM,KAAX,CAAiB,iBAAjB,CAFc,IAGdN,UAAU,CAACM,KAAX,CAAiB,uBAAjB,CAHL;AAIA,QAAMQ,QAAQ,GAAGZ,WAAW,KAAKa,8BAAYC,MAA7C;AACA,QAAMC,YAAY,GAAGtB,KAAK,CAACuB,WAAN,CAAmBC,UAAD,IAAwBnB,UAAU,CAACoB,GAAX,CAAe,UAAf,EAA2B,uBAASD,UAAT,CAA3B,CAA1C,EAA4F,CAACnB,UAAD,CAA5F,CAArB;AACA,QAAMqB,SAAS,GAAGP,QAAQ,GAAG,GAAH,GAAS,EAAnC;AAEA,MAAIQ,KAAK,GAAGrB,MAAM,EAAEsB,WAAR,IAAuB,EAAnC;;AAEA,MAAIlB,KAAK,IAAIA,KAAK,KAAKmB,gCAAvB,EAAqC;AACnC;AACAF,IAAAA,KAAK,IAAK,IAAG,0BAAYjB,KAAZ,EAAmBJ,MAAnB,CAA2B,EAAxC;AACD;;AAED,sBACE,eAAC,gBAAD,6BACME,IADN;AAEE,IAAA,MAAM,EAAC,kBAFT;AAGE,IAAA,KAAK,EAAEmB,KAHT;AAIE,IAAA,QAAQ,EAAE,CAAC,CAACT,UAJd;AAKE,IAAA,KAAK,EAAER,KAAK,IAAIJ,MAAM,EAAEsB,WAL1B;AAME,IAAA,QAAQ,EAAET,QANZ;AAOE,IAAA,QAAQ,EAAEG,YAPZ;AAQE,IAAA,KAAK,EAAEI,SART;AASE,IAAA,YAAY,EAAEpB,MAAM,EAAEsB,WATxB;AAUE,IAAA,IAAI,EAAEE,wBAAYC;AAVpB,KADF;AAcD","sourcesContent":["import * as React from 'react';\nimport { Controller, useStyle } from '@ali/4ever-cangjie';\nimport { FontFamilySelect as OriginFontFamilySelect } from '@ali/we-toolbar';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { NewToolbarMode as ToolbarMode } from '@ali/4ever-component';\nimport { setFonts } from '../actions';\nimport { defaultFonts } from '../utils/getActiveFontsMark';\nimport getFontsTip from '../utils/getFontsTip';\n\nconst FontFamilySelect = React.memo(OriginFontFamilySelect);\n\nexport interface FontsButtonProps {\n  controller: Controller;\n  locale?: Record<string, string>;\n  toolbarMode?: ToolbarMode;\n}\n\nexport default function FontsButton(props: FontsButtonProps) {\n  const { controller, locale, toolbarMode, ...rest } = props;\n  const docStyle = useStyle();\n  const fonts = controller.query('getFonts', docStyle?.docDefaults?.data?.rPr?.fonts);\n  const { isCollapsedAtEdge } = controller.value.selection;\n  const isDisabled = isCollapsedAtEdge\n    || controller.query('isSelectionInImage')\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInLinkCard');\n  const isDouble = toolbarMode === ToolbarMode.double;\n  const handleChange = React.useCallback((fontsValue: string) => controller.run('onAction', setFonts(fontsValue)), [controller]);\n  const realWidth = isDouble ? 133 : 66;\n\n  let title = locale?.buttonTitle || '';\n\n  if (fonts && fonts !== defaultFonts) {\n    // 提示显示当前字体\n    title += ` ${getFontsTip(fonts, locale)}`;\n  }\n\n  return (\n    <FontFamilySelect\n      {...rest}\n      testid=\"bi-toolbar-fonts\"\n      title={title}\n      disabled={!!isDisabled}\n      value={fonts || locale?.buttonTitle}\n      bordered={isDouble}\n      onChange={handleChange}\n      width={realWidth}\n      shortcutText={locale?.buttonTitle}\n      role={PluginRoles.fontFamilySelect}\n    />\n  );\n}\n"],"file":"fontsButton.js"}