"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../actions");

var _updateOnlineVideo = _interopRequireDefault(require("../commands/updateOnlineVideo"));

var _removeOnlineVideo = _interopRequireDefault(require("../commands/removeOnlineVideo"));

var _insertOnlineVideo = _interopRequireDefault(require("../commands/insertOnlineVideo"));

var _everPluginBasic = require("@ali/4ever-plugin-basic");

var _value = require("../constants/value");

const onAction = state => (action, editor, next) => {
  const {
    type,
    payload
  } = action;

  if (type === _actions.ONLINEVIDEO_INSERT) {
    return (0, _insertOnlineVideo.default)(state)(editor);
  }

  if (type === _actions.ONLINEVIDEO_UPDATE) {
    const {
      node,
      data
    } = payload;
    return (0, _updateOnlineVideo.default)(editor, node, data);
  }

  if (type === _actions.ONLINEVIDEO_REMOVE) {
    const {
      node
    } = payload;
    return (0, _removeOnlineVideo.default)(editor, node);
  }

  if (type === _actions.ONLINEVIDEO_FOCUS_EDITOR) {
    const {
      node
    } = payload;
    editor.run('onAction', _everPluginBasic.biActions.createMergeDataAction({
      [_value.FOCUSED_ONLINEVIDEO]: node.key
    }));
    return editor.command(_everCangjie.Commands.blur);
  }

  if (type === _actions.ONLINEVIDEO_SELECT) {
    const {
      node
    } = payload;
    return editor.command(_everCangjie.Commands.focus).command(_everCangjie.Commands.moveToRangeOfNode, node);
  }

  return next();
};

var _default = onAction;
exports.default = _default;
//# sourceMappingURL=onAction.js.map