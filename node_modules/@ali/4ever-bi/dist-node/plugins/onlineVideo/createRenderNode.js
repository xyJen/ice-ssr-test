"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderNode;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _onlineVideo = _interopRequireDefault(require("./components/onlineVideo"));

const _createElement = /*#__PURE__*/React.createElement;

function createRenderNode(config, pluginState, Editor = undefined, Toolbar = undefined) {
  const onlineVideoLocaleConfig = config.locale || {};
  const {
    isValidVideoURL,
    getIFramePlayerURL,
    isIFramePlayerSupported,
    onMediaLoadSuccess,
    onMediaLoadError
  } = config;
  return {
    onlineVideo: (props, controller) => {
      const {
        node,
        attributes,
        isSelected
      } = props;
      return /*#__PURE__*/_createElement("div", (0, _extends2.default)({}, attributes, {
        "data-testid": "onlinevideo"
      }), /*#__PURE__*/_createElement(_onlineVideo.default, {
        node: node,
        controller: controller,
        isSelected: isSelected,
        Editor: Editor,
        Toolbar: Toolbar,
        locale: onlineVideoLocaleConfig,
        isValidVideoURL: isValidVideoURL,
        getIFramePlayerURL: getIFramePlayerURL,
        isIFramePlayerSupported: isIFramePlayerSupported,
        pluginState: pluginState,
        onMediaLoadSuccess: onMediaLoadSuccess,
        onMediaLoadError: onMediaLoadError
      }));
    }
  };
}
//# sourceMappingURL=createRenderNode.js.map