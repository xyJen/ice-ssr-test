{"version":3,"sources":["../../../../../src/plugins/onlineVideo/components/onlineVideo.tsx"],"names":["isMobile","environment","IS_MOBILE","OnlineVideo","props","node","controller","isSelected","isValidVideoURL","getIFramePlayerURL","isIFramePlayerSupported","locale","pluginState","onMediaLoadSuccess","onMediaLoadError","Editor","Toolbar","data","src","type","poster","wrapperRef","React","useRef","nodeRef","isFocused","setFocusState","useState","isCollapsed","value","selection","showToolbar","onFocus","useCallback","onBlur","onSave","params","run","onPlayerFocus","current","handleMediaLoadError","handleMediaLoadSuccess","renderVideoContent","videoRef","createRef","setTimeout","disablePictureInPicture","notSupportText","url","display","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Controller, Node, environment, Block } from '@ali/4ever-cangjie';\nimport { sanitizeUrl } from '@ali/4ever-utils';\nimport { updateOnlineVideo, selectOnlineVideo } from '../actions';\nimport {\n  YoukuPlayer,\n  VideoWrapper,\n  YoukuPlayerWrapper,\n  YoukuPlayerPlaceholder,\n  YoukuPlayerMask,\n} from './styled';\n\nconst isMobile = environment.IS_MOBILE;\n\ninterface IProps {\n  node: Node;\n  controller: Controller;\n  isSelected: boolean;\n  isValidVideoURL: (url: string) => boolean;\n  getIFramePlayerURL: (src: string) => string;\n  isIFramePlayerSupported: (src: string) => boolean;\n  locale: Record<string, any>;\n  pluginState: any;\n  onMediaLoadSuccess: Function;\n  onMediaLoadError: Function;\n  Editor?: React.ComponentType<any>;\n  Toolbar?: React.ComponentType<any>;\n}\n\nconst OnlineVideo = (props: IProps) => {\n  const {\n    node,\n    controller,\n    isSelected,\n    isValidVideoURL,\n    getIFramePlayerURL,\n    isIFramePlayerSupported,\n    locale = {},\n    pluginState,\n    onMediaLoadSuccess,\n    onMediaLoadError,\n    Editor,\n    Toolbar,\n  } = props;\n  const { data } = node as Block;\n  const { src } = data;\n  const { type } = data;\n  const { poster } = data;\n  const wrapperRef = React.useRef<HTMLDivElement>(null);\n  const nodeRef = React.useRef(node);\n  const [isFocused, setFocusState] = React.useState(false);\n\n  const { isCollapsed } = controller.value.selection;\n\n  const showToolbar = isFocused || (isSelected && isCollapsed);\n\n  const onFocus = React.useCallback(() => {\n    setFocusState(true);\n  }, []);\n\n  const onBlur = React.useCallback(() => {\n    setFocusState(false);\n  }, []);\n\n  const onSave = React.useCallback((params) => {\n    controller.run(\n      'onAction',\n      updateOnlineVideo(node, {\n        src: params.src,\n        type: params.type,\n      }),\n    );\n  }, [controller, node]);\n\n  const onPlayerFocus = React.useCallback(() => {\n    controller.run('onAction', selectOnlineVideo(nodeRef.current));\n  }, [controller]);\n\n  const handleMediaLoadError = () => {\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  const handleMediaLoadSuccess = () => {\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(src);\n    }\n  };\n\n  const renderVideoContent = () => {\n    if (!src) {\n      // 移动端不展示地址输入框\n      if (isMobile || !Editor) {\n        return null;\n      }\n      return (\n        <Editor\n          locale={locale}\n          controller={controller}\n          onSave={onSave}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          node={node}\n          isValidVideoURL={isValidVideoURL}\n          pluginState={pluginState}\n        />\n      );\n    }\n    if (type === 'mp4') {\n      const videoRef = React.createRef<HTMLVideoElement>();\n      // React16.8 不支持 video 标签的 disablePictureInPicture 属性，16.9 支持\n      // 暂时只能通过这种方式，后续升级 React 后，改回 disablePictureInPicture 属性\n      setTimeout(() => {\n        if (videoRef.current) {\n          // @ts-ignore\n          videoRef.current.disablePictureInPicture = true;\n        }\n      }, 100);\n\n      return (\n        <VideoWrapper isMobile={isMobile} onClick={onPlayerFocus}>\n          <video // eslint-disable-line\n            data-type=\"onlineVideo\"\n            controls\n            raw-controls=\"true\" // UC内核独有属性\n            controlsList=\"nodownload noremoteplayback\"\n            ref={videoRef}\n            poster={sanitizeUrl(poster)}\n            onCanPlay={handleMediaLoadSuccess}\n            onError={handleMediaLoadError}\n          >\n            <source src={src} type=\"video/mp4\" />\n          </video>\n        </VideoWrapper>\n      );\n    }\n    if (type === 'youku') {\n      // android低版本容器有bug：https://work.aone.alibaba-inc.com/issue/26118887\n      if (isIFramePlayerSupported && !isIFramePlayerSupported(src)) {\n        return (\n          <YoukuPlayerPlaceholder>\n            <span>{locale.notSupportText}</span>\n          </YoukuPlayerPlaceholder>\n        );\n      }\n      const url = getIFramePlayerURL && getIFramePlayerURL(src);\n      if (url) {\n        return (\n          <YoukuPlayerWrapper isMobile={isMobile} onClick={onPlayerFocus}>\n            <YoukuPlayerMask\n              style={{ display: isSelected ? 'none' : 'block' }}\n            />\n            <YoukuPlayer src={sanitizeUrl(url)} allowFullScreen />\n          </YoukuPlayerWrapper>\n        );\n      }\n      return null;\n    }\n\n    return null;\n  };\n\n  return (\n    <div ref={wrapperRef}>\n      {showToolbar && !!Toolbar ?\n        <Toolbar\n          controller={controller}\n          node={node}\n          locale={locale}\n          triggerNode={wrapperRef.current}\n        />\n        : null}\n      {renderVideoContent()}\n    </div>\n  );\n};\n\nexport default React.memo(OnlineVideo);\n"],"file":"onlineVideo.js"}