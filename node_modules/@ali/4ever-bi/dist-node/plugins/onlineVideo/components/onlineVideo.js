"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _actions = require("../actions");

var _styled = require("./styled");

const _createElement = /*#__PURE__*/_react.default.createElement;
const isMobile = _everCangjie.environment.IS_MOBILE;

const OnlineVideo = props => {
  const {
    node,
    controller,
    isSelected,
    isValidVideoURL,
    getIFramePlayerURL,
    isIFramePlayerSupported,
    locale = {},
    pluginState,
    onMediaLoadSuccess,
    onMediaLoadError,
    Editor,
    Toolbar
  } = props;
  const {
    data
  } = node;
  const {
    src
  } = data;
  const {
    type
  } = data;
  const {
    poster
  } = data;

  const wrapperRef = _react.default.useRef(null);

  const nodeRef = _react.default.useRef(node);

  const [isFocused, setFocusState] = _react.default.useState(false);

  const {
    isCollapsed
  } = controller.value.selection;
  const showToolbar = isFocused || isSelected && isCollapsed;

  const onFocus = _react.default.useCallback(() => {
    setFocusState(true);
  }, []);

  const onBlur = _react.default.useCallback(() => {
    setFocusState(false);
  }, []);

  const onSave = _react.default.useCallback(params => {
    controller.run('onAction', (0, _actions.updateOnlineVideo)(node, {
      src: params.src,
      type: params.type
    }));
  }, [controller, node]);

  const onPlayerFocus = _react.default.useCallback(() => {
    controller.run('onAction', (0, _actions.selectOnlineVideo)(nodeRef.current));
  }, [controller]);

  const handleMediaLoadError = () => {
    if (onMediaLoadError) {
      onMediaLoadError(src);
    }
  };

  const handleMediaLoadSuccess = () => {
    if (onMediaLoadSuccess) {
      onMediaLoadSuccess(src);
    }
  };

  var _ref = /*#__PURE__*/_createElement(Editor, {
    locale: locale,
    controller: controller,
    onSave: onSave,
    onFocus: onFocus,
    onBlur: onBlur,
    node: node,
    isValidVideoURL: isValidVideoURL,
    pluginState: pluginState
  });

  var _ref2 = /*#__PURE__*/_createElement("source", {
    src: src,
    type: "video/mp4"
  });

  const renderVideoContent = () => {
    if (!src) {
      // 移动端不展示地址输入框
      if (isMobile || !Editor) {
        return null;
      }

      return _ref;
    }

    if (type === 'mp4') {
      const videoRef = /*#__PURE__*/_react.default.createRef(); // React16.8 不支持 video 标签的 disablePictureInPicture 属性，16.9 支持
      // 暂时只能通过这种方式，后续升级 React 后，改回 disablePictureInPicture 属性


      setTimeout(() => {
        if (videoRef.current) {
          // @ts-ignore
          videoRef.current.disablePictureInPicture = true;
        }
      }, 100);
      return /*#__PURE__*/_createElement(_styled.VideoWrapper, {
        isMobile: isMobile,
        onClick: onPlayerFocus
      }, /*#__PURE__*/_createElement("video", {
        // eslint-disable-line
        "data-type": "onlineVideo",
        controls: true,
        "raw-controls": "true" // UC内核独有属性
        ,
        controlsList: "nodownload noremoteplayback",
        ref: videoRef,
        poster: (0, _everUtils.sanitizeUrl)(poster),
        onCanPlay: handleMediaLoadSuccess,
        onError: handleMediaLoadError
      }, _ref2));
    }

    if (type === 'youku') {
      // android低版本容器有bug：https://work.aone.alibaba-inc.com/issue/26118887
      if (isIFramePlayerSupported && !isIFramePlayerSupported(src)) {
        return /*#__PURE__*/_createElement(_styled.YoukuPlayerPlaceholder, null, /*#__PURE__*/_createElement("span", null, locale.notSupportText));
      }

      const url = getIFramePlayerURL && getIFramePlayerURL(src);

      if (url) {
        return /*#__PURE__*/_createElement(_styled.YoukuPlayerWrapper, {
          isMobile: isMobile,
          onClick: onPlayerFocus
        }, /*#__PURE__*/_createElement(_styled.YoukuPlayerMask, {
          style: {
            display: isSelected ? 'none' : 'block'
          }
        }), /*#__PURE__*/_createElement(_styled.YoukuPlayer, {
          src: (0, _everUtils.sanitizeUrl)(url),
          allowFullScreen: true
        }));
      }

      return null;
    }

    return null;
  };

  return /*#__PURE__*/_createElement("div", {
    ref: wrapperRef
  }, showToolbar && !!Toolbar ? /*#__PURE__*/_createElement(Toolbar, {
    controller: controller,
    node: node,
    locale: locale,
    triggerNode: wrapperRef.current
  }) : null, renderVideoContent());
};

var _default = /*#__PURE__*/_react.default.memo(OnlineVideo);

exports.default = _default;
//# sourceMappingURL=onlineVideo.js.map