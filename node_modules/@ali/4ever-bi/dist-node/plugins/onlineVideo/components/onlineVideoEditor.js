"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _weDesign = require("@ali/we-design");

var _everComponent = require("@ali/4ever-component");

var _styled = require("./styled");

var _actions = require("../actions");

const _createElement = /*#__PURE__*/_react.default.createElement;

const judgeVideoType = url => {
  if (/youku/.test(url)) {
    return 'youku';
  }

  return 'mp4';
};

const stopPropagation = e => {
  e.stopPropagation();
};

var _ref = /*#__PURE__*/_createElement(_weDesign.WebBetaNormal, null);

const OnlineVideoEditor = props => {
  const {
    controller,
    onSave,
    isValidVideoURL,
    locale = {},
    node,
    pluginState,
    onFocus,
    onBlur
  } = props;

  const portalRef = _react.default.useRef(null);

  const onlineVideoRef = _react.default.useRef(null);

  const nodeRef = _react.default.useRef(node);

  const [url, setUrl] = _react.default.useState('');

  const inputRef = /*#__PURE__*/_react.default.createRef();

  const {
    data
  } = node;

  _react.default.useEffect(() => {
    if (pluginState[data.id]) {
      // TODO 主动 focus 失效，原因待查
      inputRef.current?.focus();
      inputRef.current?.select();
      onFocus();
    }
  }, [pluginState]);

  const onInputBlur = _react.default.useCallback(() => {
    onBlur();
  }, []);

  const onInputFocus = _react.default.useCallback(e => {
    e.preventDefault();
    e.stopPropagation();
    controller.run('onAction', (0, _actions.focusOnlineVideoEditor)(nodeRef.current));
    onFocus();
  }, []);

  const handleClickoutside = _react.default.useCallback(event => {
    const target = event.target;

    if (target === onlineVideoRef.current || onlineVideoRef.current?.contains(target)) {
      return;
    }

    controller.run('onAction', (0, _actions.removeOnlineVideo)(node));
  }, []);

  (0, _everComponent.useOnClickOutside)(portalRef, handleClickoutside);

  const onInsertOnlineVideo = () => {
    if (!isValidVideoURL || !isValidVideoURL(url)) {
      return;
    }

    const type = judgeVideoType(url);
    onSave({
      src: url,
      type
    });
  };

  const handleInput = e => {
    setUrl(e.target.value);
  };

  const onIconClick = e => {
    e.preventDefault();
    e.stopPropagation();
    controller.run('onAction', (0, _actions.selectOnlineVideo)(nodeRef.current));
  };

  return /*#__PURE__*/_createElement(_styled.InsertWrapper, {
    ref: onlineVideoRef
  }, /*#__PURE__*/_createElement(_styled.IconWrapper, {
    onClick: onIconClick
  }, _ref), /*#__PURE__*/_createElement(_styled.Input, {
    ref: inputRef,
    placeholder: locale.placeholder,
    onBlur: onInputBlur,
    onFocus: onInputFocus,
    onChange: handleInput,
    onKeyDown: stopPropagation,
    onMouseDown: stopPropagation,
    onClick: stopPropagation
  }), /*#__PURE__*/_createElement(_styled.Button, {
    onClick: onInsertOnlineVideo
  }, locale.ok));
};

var _default = /*#__PURE__*/_react.default.memo(OnlineVideoEditor);

exports.default = _default;
//# sourceMappingURL=onlineVideoEditor.js.map