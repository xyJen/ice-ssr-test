{"version":3,"sources":["../../../../src/plugins/laserPointer/utils.ts"],"names":["Selector","constants","isHighlighted","key","injections","find","inj","data","laserPointer","highlightByNode","controller","node","value","setInjections","map","Injection","create","highlightByPath","path","document","getNodeByPath","highlightByUUID","uuid","query","getNode","removeHighlight","injection","isBlockQuote","blockquote","extractKey","keyStr","matchArr","match","findClosesetBlock","ele","Element","closest","getAttribute","querySelector","attr","Block","isBlock","getClosestBlock","e"],"mappings":"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","sourcesContent":["import { omit } from 'lodash-es';\nimport { Controller, Injection, Path, constants, Block, Node } from '@ali/4ever-cangjie';\n\nconst { Selector } = constants;\n\nexport function isHighlighted(key: string, injections: Injection[]) {\n  return !!injections.find((inj) => {\n    return inj.key === key && inj.data.laserPointer;\n  });\n}\n\nexport function highlightByNode(controller: Controller, node: Node | null) {\n  if (!node) {\n    return;\n  }\n  const { key } = node;\n  const { injections } = controller.value;\n  controller.setInjections([\n    ...injections\n      .map((inj) => {\n        if (typeof inj.data?.laserPointer === 'boolean') {\n          return Injection.create({\n            key: inj.key,\n            data: omit(inj.data, 'laserPointer'),\n          });\n        }\n        return inj;\n      }),\n    // 高亮节点对应的内容\n    Injection.create({\n      key,\n      data: { laserPointer: true },\n    }),\n  ]);\n}\n\nexport function highlightByPath(controller: Controller, path: Path) {\n  const { document } = controller.value;\n  const node = document.getNodeByPath(path);\n  highlightByNode(controller, node);\n}\n\nexport function highlightByUUID(controller: Controller, uuid: string) {\n  const key = controller.query('getNodeKeyByUUID', uuid);\n  const node = controller.value.document.getNode(key);\n  highlightByNode(controller, node);\n}\n\nexport function removeHighlight(controller: Controller) {\n  const { injections } = controller.value;\n  controller.setInjections(injections.map((injection) => {\n    if (injection.data?.laserPointer) {\n      return Injection.create({\n        key: injection.key,\n        data: omit(injection.data, 'laserPointer'),\n      });\n    }\n    return injection;\n  }));\n}\n\nexport const isBlockQuote = (node: any) => !!node?.data?.blockquote;\n\nconst extractKey = (keyStr: string) => {\n  const matchArr = keyStr.match(/^\\d+/);\n  if (matchArr) {\n    return matchArr[0];\n  }\n  return null;\n}\n\nexport function findClosesetBlock (ele: Element | Document, controller: Controller) {\n  if (!(ele instanceof Element)) {\n    return null;\n  }\n\n  try {\n    let closest: Element | null = null;\n    // 列表特殊处理\n    if (ele.getAttribute('data-testid') === 'list') {\n      closest = ele.querySelector(`[${Selector.key}]`);\n    } else {\n      closest = ele.closest(`[${Selector.key}]`);\n    }\n    if (!closest) {\n      return null;\n    }\n\n    const attr = closest.getAttribute(Selector.key);\n    if (typeof attr !== 'string') {\n      return null;\n    }\n\n    const key = extractKey(attr);\n    if (!key) {\n      return null;\n    }\n\n    const { document } = controller.value;\n    const node = document.getNode(key);\n    if (Block.isBlock(node)) {\n      return node;\n    }\n    return document.getClosestBlock(key);\n  } catch (e) {\n    return null;\n  }\n}\n"],"file":"utils.js"}