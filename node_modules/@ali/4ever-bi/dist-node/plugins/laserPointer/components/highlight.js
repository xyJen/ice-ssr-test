"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everPluginList = require("@ali/4ever-plugin-list");

var actions = _interopRequireWildcard(require("../actions"));

var _utils = require("../utils");

var _types = require("../types");

const Highlight = props => {
  const {
    type,
    domRef,
    children,
    controller,
    node,
    highlighted,
    renderHighlight,
    getRole
  } = props;
  const highlight = React.useCallback(() => {
    if (getRole() === _types.LaserPointerRole.HOST) {
      const path = controller.value.document.getPath(node.key);
      controller.run('onAction', actions.highlight({
        path
      }));
    }
  }, [controller, node, getRole]);
  const removeHighlight = React.useCallback(() => {
    if (getRole() === _types.LaserPointerRole.HOST) {
      controller.run('onAction', actions.removeHighlight());
    }
  }, [controller, getRole]);

  const getDOMNode = () => {
    let domNode = domRef?.current ?? undefined;

    try {
      domNode = _everCangjie.domUtils.findDOMNode(node.key);

      if (!domNode) {
        return undefined;
      }

      if (_everPluginList.List.isList(node)) {
        return domNode.closest('[data-testid="list"]') ?? undefined;
      } else if ((0, _utils.isBlockQuote)(node)) {
        return domNode.closest('blockquote') ?? undefined;
      }
    } catch (e) {// catch don't throw
    }

    return domNode;
  };

  return renderHighlight(type, highlighted, {
    children,
    getDOMNode,
    highlight,
    removeHighlight
  });
};

var _default = Highlight;
exports.default = _default;
//# sourceMappingURL=highlight.js.map