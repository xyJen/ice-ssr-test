"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isHighlighted = isHighlighted;
exports.highlightByNode = highlightByNode;
exports.highlightByPath = highlightByPath;
exports.highlightByUUID = highlightByUUID;
exports.removeHighlight = removeHighlight;
exports.findClosesetBlock = findClosesetBlock;
exports.isBlockQuote = void 0;

var _lodash = require("lodash");

var _everCangjie = require("@ali/4ever-cangjie");

const {
  Selector
} = _everCangjie.constants;

function isHighlighted(key, injections) {
  return !!injections.find(inj => {
    return inj.key === key && inj.data.laserPointer;
  });
}

function highlightByNode(controller, node) {
  if (!node) {
    return;
  }

  const {
    key
  } = node;
  const {
    injections
  } = controller.value;
  controller.setInjections([...injections.map(inj => {
    if (typeof inj.data?.laserPointer === 'boolean') {
      return _everCangjie.Injection.create({
        key: inj.key,
        data: (0, _lodash.omit)(inj.data, 'laserPointer')
      });
    }

    return inj;
  }), // 高亮节点对应的内容
  _everCangjie.Injection.create({
    key,
    data: {
      laserPointer: true
    }
  })]);
}

function highlightByPath(controller, path) {
  const {
    document
  } = controller.value;
  const node = document.getNodeByPath(path);
  highlightByNode(controller, node);
}

function highlightByUUID(controller, uuid) {
  const key = controller.query('getNodeKeyByUUID', uuid);
  const node = controller.value.document.getNode(key);
  highlightByNode(controller, node);
}

function removeHighlight(controller) {
  const {
    injections
  } = controller.value;
  controller.setInjections(injections.map(injection => {
    if (injection.data?.laserPointer) {
      return _everCangjie.Injection.create({
        key: injection.key,
        data: (0, _lodash.omit)(injection.data, 'laserPointer')
      });
    }

    return injection;
  }));
}

const isBlockQuote = node => !!node?.data?.blockquote;

exports.isBlockQuote = isBlockQuote;

const extractKey = keyStr => {
  const matchArr = keyStr.match(/^\d+/);

  if (matchArr) {
    return matchArr[0];
  }

  return null;
};

function findClosesetBlock(ele, controller) {
  if (!(ele instanceof Element)) {
    return null;
  }

  try {
    let closest = null; // 列表特殊处理

    if (ele.getAttribute('data-testid') === 'list') {
      closest = ele.querySelector(`[${Selector.key}]`);
    } else {
      closest = ele.closest(`[${Selector.key}]`);
    }

    if (!closest) {
      return null;
    }

    const attr = closest.getAttribute(Selector.key);

    if (typeof attr !== 'string') {
      return null;
    }

    const key = extractKey(attr);

    if (!key) {
      return null;
    }

    const {
      document
    } = controller.value;
    const node = document.getNode(key);

    if (_everCangjie.Block.isBlock(node)) {
      return node;
    }

    return document.getClosestBlock(key);
  } catch (e) {
    return null;
  }
}
//# sourceMappingURL=utils.js.map