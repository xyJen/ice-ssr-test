{"version":3,"sources":["../../../../../src/plugins/sz/commands/adjustSz.ts"],"names":["isLeafInSelection","leaf","leafOffset","selectionOffset","selectionLength","length","leafLength","text","isInInlineNode","document","key","getClosestInline","adjustSz","controller","isIncreasingSz","value","selection","isCollapsed","direction","sz","run","ranges","range","start","end","convertToTextPoints","texts","getTextsAtRange","withoutNormalizing","forEach","node","offset","leaves","subOffset","accOffset","subLength","szMarks","marks","filter","mark","type","szMarksLength","data","newSzMark","Mark","create","szUnit","szMark","command","Commands","removeMarkByKey","addMarkByKey","Math","max"],"mappings":"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","sourcesContent":["import { Commands, Controller, Document, Leaf, Mark } from '@ali/4ever-cangjie';\nimport { getRangesFromEditor }  from '@ali/4ever-utils';\nimport { getDefaultSz } from '../utils';\nimport { findNextSz } from '@ali/4ever-plugin-sz';\nimport getSize from '../queries/getSize';\nimport { setSz } from '../actions';\n\nconst isLeafInSelection = (leaf: Leaf, leafOffset: number, selectionOffset: number, selectionLength: number) => {\n  const { length: leafLength } = leaf.text;\n  if (leafOffset + leafLength <= selectionOffset) return false;\n  if (leafOffset >= selectionOffset + selectionLength) return false;\n  return true;\n};\n\nconst isInInlineNode = (document: Document, key: string) => {\n  return document.getClosestInline(key);\n};\n\n/**\n * @param controller\n * @param isIncreasingSz\n * @description\n * 若选区重合，直接通过getSize方法获取当前的字体大小，再通过findNextSz方法获取增减后的字体大小，最后设置字体；\n * 若选区非重合，遍历selection中的每一个叶子节点，通过sz mark获取当前叶子节点的字体大小，\n * 若没有sz mark 则根据段落类型获取默认的字体大小，通过findNextSz方法获取每个叶子节点增减后的字体大小，\n * 移除旧的 sz mark 后增加新的 sz；\n */\nexport default function adjustSz(controller: Controller, isIncreasingSz: boolean): Controller {\n  const { value } = controller;\n  const { document, selection } = value;\n  const { isCollapsed } = selection;\n  const direction = isIncreasingSz ? 'right' : 'left';\n  if (isCollapsed) {\n    const sz = getSize(controller);\n    controller.run('onAction', setSz(findNextSz(sz, direction)));\n    return controller;\n  } else {\n    const ranges = getRangesFromEditor(controller);\n    if (!ranges[0]) {\n      return controller;\n    }\n    for (const range of ranges) {\n      const { start, end } = range.convertToTextPoints(document);\n      const texts = document.getTextsAtRange(range);\n      controller.withoutNormalizing(() => {\n        texts.forEach((node) => {\n          const { key } = node;\n          let offset = 0;\n          let { length } = node.text;\n          if (key === start.key) ({ offset } = start);\n          if (key === end.key) length = end.offset;\n          if (key === start.key && key === end.key) {\n            length = end.offset - start.offset;\n          }\n          const { leaves } = node;\n          let subOffset = offset;\n          let accOffset = 0;\n          for (const leaf of leaves) {\n            if (isLeafInSelection(leaf, accOffset, offset, length) || isInInlineNode(document, key)) {\n              const subLength = accOffset + leaf.text.length > length ? end.offset - subOffset : leaf.text.length;\n              const szMarks = leaf.marks.filter(mark => mark.type === 'sz');\n              const szMarksLength = szMarks.length;\n              if (szMarksLength > 0) {\n                const sz = szMarks[szMarksLength - 1].data.value;\n                const newSzMark = Mark.create({\n                  type: 'sz',\n                  data: {\n                    value: findNextSz(sz, direction),\n                    szUnit: 'pt',\n                  },\n                });\n                for (const szMark of szMarks) {\n                  controller.command(Commands.removeMarkByKey, node.key, subOffset, subLength, szMark);\n                }\n                controller.command(Commands.addMarkByKey, node.key, subOffset, subLength, newSzMark);\n              } else {\n                const sz = getDefaultSz(document, key);\n                const newSzMark = Mark.create({\n                  type: 'sz',\n                  data: {\n                    value: findNextSz(sz, direction),\n                    szUnit: 'pt',\n                  },\n                });\n                controller.command(Commands.addMarkByKey, node.key, subOffset, subLength, newSzMark);\n              }\n            }\n            accOffset += leaf.text.length;\n            subOffset = Math.max(offset, accOffset);\n          }\n        });\n      });\n    }\n  }\n  return controller;\n}\n"],"file":"adjustSz.js"}