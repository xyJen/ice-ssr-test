{"version":3,"sources":["../../../../../../src/plugins/sz/components/next/SzButton.tsx"],"names":["SzButton","props","controller","locale","rest","defaultSz","_","setSzValue","React","useState","undefined","sz","query","isCollapsedAtEdge","value","selection","isDisabled","handleChange","useCallback","size","run","buttonTitle","PluginRoles"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;uBAJ4B,a;AAG5B;;AAQe,SAASA,QAAT,CAAkBC,KAAlB,EAAwC;AACrD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsB,OAAGC;AAAzB,MAAkCH,KAAxC;AACA,QAAMI,SAAS,GAAG,kCAAlB;AACA,QAAM,CAACC,CAAD,EAAIC,UAAJ,IAAkBC,KAAK,CAACC,QAAN,CAAmCC,SAAnC,CAAxB;AACA,MAAIC,EAAE,GAAGT,UAAU,CAACU,KAAX,CAAiB,SAAjB,EAA4BP,SAA5B,CAAT;;AACA,MAAI,uBAAMM,EAAN,CAAJ,EAAe;AACbA,IAAAA,EAAE,GAAGD,SAAL;AACD;;AACD,QAAM;AAAEG,IAAAA;AAAF,MAAwBX,UAAU,CAACY,KAAX,CAAiBC,SAA/C;AACA,QAAMC,UAAU,GACdH,iBAAiB,IACdX,UAAU,CAACU,KAAX,CAAiB,oBAAjB,CADH,IAEGV,UAAU,CAACU,KAAX,CAAiB,iBAAjB,CAFH,IAGGV,UAAU,CAACU,KAAX,CAAiB,uBAAjB,CAJL;AAMA,QAAMK,YAAY,GAAGT,KAAK,CAACU,WAAN,CAAmBC,IAAD,IAAkB;AACvDjB,IAAAA,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2B,oBAAMD,IAAN,CAA3B;AACAZ,IAAAA,UAAU,CAACY,IAAD,CAAV;AACD,GAHoB,EAGlB,CAACjB,UAAD,CAHkB,CAArB;AAKA,sBACE,eAAC,6BAAD;AACE,IAAA,MAAM,EAAC,eADT;AAEE,IAAA,QAAQ,EAAEc,UAFZ;AAGE,IAAA,KAAK,EAAEL,EAHT;AAIE,IAAA,QAAQ,EAAEM,YAJZ;AAKE,IAAA,OAAO,EAAEd,MAAM,EAAEkB,WAAR,IAAuB,EALlC;AAME,IAAA,IAAI,EAAEC,wBAAYX;AANpB,KAOMP,IAPN,EADF;AAWD","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { isNaN, PluginRoles, } from '@ali/4ever-bamboo';\nimport { FontSizeSelect, IToolbarButtonConfig, useDefaultSz } from '@ali/4ever-component';\n;\nimport { setSz } from '../../actions';\n\nexport interface SzButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  locale?: Record<string, string>;\n}\n\nexport default function SzButton(props: SzButtonProps) {\n  const { controller, locale, ...rest } = props;\n  const defaultSz = useDefaultSz();\n  const [_, setSzValue] = React.useState<number | undefined>(undefined);\n  let sz = controller.query('getSize', defaultSz);\n  if (isNaN(sz)) {\n    sz = undefined;\n  }\n  const { isCollapsedAtEdge } = controller.value.selection;\n  const isDisabled =\n    isCollapsedAtEdge\n    || controller.query('isSelectionInImage')\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInLinkCard');\n\n  const handleChange = React.useCallback((size: number) => {\n    controller.run('onAction', setSz(size));\n    setSzValue(size)\n  }, [controller]);\n\n  return (\n    <FontSizeSelect\n      testid=\"bi-toolbar-sz\"\n      disabled={isDisabled}\n      value={sz}\n      onChange={handleChange}\n      tooltip={locale?.buttonTitle || ''}\n      role={PluginRoles.sz}\n      {...rest}\n    />\n  );\n}\n"],"file":"SzButton.js"}