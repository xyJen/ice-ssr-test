"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onTab;

var _everCangjie = require("@ali/4ever-cangjie");

var _decreaseIndent = _interopRequireDefault(require("../commands/decreaseIndent"));

var _increaseIndent = _interopRequireDefault(require("../commands/increaseIndent"));

var _everUtils = require("@ali/4ever-utils");

var _utils = require("../utils");

;

function onTab(event, editor, next) {
  const {
    value
  } = editor;
  const {
    document
  } = value;

  if (editor.query('isSelectionInTableCell')) {
    return next();
  }

  event.preventDefault();
  const {
    selection
  } = value;
  if (!selection) return next();
  const currentParagraph = (0, _everUtils.getClosestParagraph)(value);
  if (!currentParagraph) return next();
  const isAtStartofParagraph = selection ? selection.getStart(document).isAtStartOfNode(currentParagraph) : null;
  const selectedBlocks = (0, _everUtils.getBlocksFromEditor)(editor);
  const selectedMultiBlocks = selectedBlocks.length > 1;
  let selectedAllBlock = false;

  if (selection.isExpanded && editor.query('isSelectWholeBlocks')) {
    selectedAllBlock = true;
  }

  if (event.shiftKey && isAtStartofParagraph) {
    /* 在段首且没有选区时，逻辑和“减少缩进”按钮相同 */
    if (selection.isCollapsed) {
      return (0, _decreaseIndent.default)(editor, _utils.IndentTrigger.keyboard);
    }
    /* 在段首有选区时：
     * 1. 选中多段或整段选中时视为仅减少缩进
     * 2. 否则先删除选区内容再执行减少缩进逻辑
    */


    if (selectedMultiBlocks || selectedAllBlock) {
      return (0, _decreaseIndent.default)(editor, _utils.IndentTrigger.toolbar);
    }

    editor.command(_everCangjie.Commands.del);
    return (0, _decreaseIndent.default)(editor, _utils.IndentTrigger.keyboard);
  }

  if (selection.isCollapsed) {
    if (!isAtStartofParagraph) {
      // 未选中且在段内时
      return editor.command(_everCangjie.Commands.insertText, '    ');
    }

    const currentItems = editor.query('getListCurrentItem');

    if (currentItems?.length && currentItems[0]?.data?.list) {
      // 不处理列表
      return next();
    }

    return (0, _increaseIndent.default)(editor, _utils.IndentTrigger.keyboard);
  }

  if (!isAtStartofParagraph) {
    // 不在段首且选中时：先删除后插入tab
    return editor.command(_everCangjie.Commands.del).command(_everCangjie.Commands.insertText, '    ');
  }

  const currentItems = editor.query('getListCurrentItem');

  if (currentItems?.length && currentItems[0]?.data?.list) {
    return next();
  }

  if (selectedMultiBlocks || selectedAllBlock) {
    return (0, _increaseIndent.default)(editor, _utils.IndentTrigger.toolbar);
  }

  editor.command('deleteAtRange', selection);
  return (0, _increaseIndent.default)(editor, _utils.IndentTrigger.keyboard);
}
//# sourceMappingURL=onTab.js.map