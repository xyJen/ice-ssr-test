"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _setListLevelByIntent = require("../utils/setListLevelByIntent");

var _utils = require("../utils");

var _default = (editor, trigger, givenValue) => {
  const {
    value
  } = editor;
  const indentVal = givenValue !== undefined ? givenValue : _utils.INDENT_SIZE;
  let selectedBlocks = (0, _everUtils.getBlocksFromEditor)(editor);
  const {
    depthItems,
    hasFirstStart
  } = editor.query('getListDepthItems') || {};

  if (hasFirstStart) {
    selectedBlocks = depthItems;
  }

  selectedBlocks.forEach(node => {
    const indentNode = (0, _everUtils.getClosestParagraph)(value, node);

    if (indentNode) {
      const indentNodeData = indentNode.data || {};
      const {
        list
      } = indentNodeData;

      if (list) {
        return (0, _setListLevelByIntent.decreaseListLevel)(editor, indentNode, hasFirstStart);
      }

      const ind = indentNodeData.ind || {}; // data.ind can be null

      const nextInd = { ...ind
      };
      const {
        firstLine = 0,
        firstLineChars = 0,
        left = 0,
        leftChars = 0,
        hanging = 0,
        hangingChars = 0
      } = ind;
      const firstLineIndent = firstLineChars || firstLine;
      const hangingIndent = hangingChars || hanging || firstLine < 0;

      switch (trigger) {
        case _utils.IndentTrigger.keyboard:
          if (hangingIndent) {
            // 取消设置的悬挂缩进
            delete nextInd.hanging;
            delete nextInd.hangingChars;

            if (firstLine < 0) {
              delete nextInd.firstLine;
            }
          } else if (firstLineIndent) {
            // 取消设置的行首缩进
            delete nextInd.firstLine;
            delete nextInd.firstLineChars;
          } else if (leftChars) {
            // 未设置行首和悬挂缩进：减少 left 和 leftChars
            // 一次减少两字符
            nextInd.leftChars = Math.max(leftChars - _utils.INDENT_SIZE_CHARS, _utils.MIN_INDENT_SIZE); // 兜底

            nextInd.left = nextInd.leftChars / _utils.INDENT_SIZE_CHARS * _utils.INDENT_SIZE;
          } else {
            nextInd.left = Math.max(left - indentVal, _utils.MIN_INDENT_SIZE);
          }

          break;

        default:
          // 传进来的视为像素单位
          if (leftChars) {
            // toolbar 按钮一次少两个字符
            nextInd.leftChars = Math.max(leftChars - _utils.INDENT_SIZE_CHARS, _utils.MIN_INDENT_SIZE);
            nextInd.left = nextInd.leftChars / _utils.INDENT_SIZE_CHARS * _utils.INDENT_SIZE;
          } else {
            nextInd.left = Math.max(left - indentVal, _utils.MIN_INDENT_SIZE);
          }

      }

      if ((0, _everUtils.isEqualWithDefault)(nextInd, ind, _utils.DEFAULT_INDENT)) {
        return undefined;
      }

      editor.command(_everCangjie.Commands.setNodeByKey, indentNode.key, {
        data: { ...indentNodeData,
          ind: nextInd
        }
      });
    }

    return undefined;
  });
  return editor;
};

exports.default = _default;
//# sourceMappingURL=decreaseIndent.js.map