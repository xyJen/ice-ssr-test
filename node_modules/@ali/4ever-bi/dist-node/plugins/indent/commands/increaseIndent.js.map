{"version":3,"sources":["../../../../../src/plugins/indent/commands/increaseIndent.ts"],"names":["editor","trigger","givenValue","value","indentVal","undefined","INDENT_SIZE","selectedBlocks","depthItems","hasFirstStart","query","forEach","node","indentNode","indentNodeData","data","list","ind","nextInd","firstLine","firstLineChars","left","leftChars","hanging","hangingChars","firstLineIndent","hangingIndent","IndentTrigger","keyboard","realLeft","Math","min","INDENT_SIZE_CHARS","MAX_INDENT_SIZE_CHARS","MAX_INDENT_SIZE","DEFAULT_INDENT","command","Commands","setNodeByKey","key"],"mappings":"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","sourcesContent":["import { Controller, Commands } from '@ali/4ever-cangjie';\nimport { IndentProperties } from '@ali/4ever-mo';\nimport { getClosestParagraph } from '@ali/4ever-utils';\nimport { getBlocksFromEditor }  from '@ali/4ever-utils';\nimport { increaseListLevel } from '../utils/setListLevelByIntent';\nimport {\n  INDENT_SIZE,\n  MAX_INDENT_SIZE,\n  MAX_INDENT_SIZE_CHARS,\n  INDENT_SIZE_CHARS,\n  DEFAULT_INDENT,\n  IndentTrigger,\n} from '../utils';\nimport { isEqualWithDefault } from '@ali/4ever-utils';\n\n\nexport default (editor: Controller, trigger?: IndentTrigger, givenValue?: number) => {\n  const { value } = editor;\n  const indentVal = givenValue !== undefined ? givenValue : INDENT_SIZE;\n\n  let selectedBlocks = getBlocksFromEditor(editor);\n  const { depthItems, hasFirstStart } =  editor.query('getListDepthItems') || {};\n  if (hasFirstStart) {\n    selectedBlocks = depthItems;\n  }\n  selectedBlocks.forEach((node) => {\n    const indentNode = getClosestParagraph(value, node);\n    if (indentNode) {\n      const indentNodeData = indentNode.data || {};\n      const { list } = indentNodeData;\n\n      if (list) {\n        return increaseListLevel(editor, indentNode, hasFirstStart!);\n      }\n      const ind = (indentNodeData.ind || {}) as IndentProperties; // data.ind can be null\n      const nextInd: IndentProperties = { ...ind };\n      const {\n        firstLine = 0,\n        firstLineChars = 0,\n        left = 0,\n        leftChars = 0,\n        hanging = 0,\n        hangingChars = 0,\n      } = ind;\n      const firstLineIndent = firstLineChars || firstLine;\n      const hangingIndent = hangingChars || hanging || firstLine < 0;\n\n      switch (trigger) {\n        case IndentTrigger.keyboard:\n          if (hangingIndent) {\n            // 取消悬挂缩进\n            // 如果已经存在 leftChars 则保留左缩进\n            // 否则增加左侧缩进，@wps/word\n            delete nextInd.hanging;\n            delete nextInd.hangingChars;\n            if (firstLine < 0) {\n              delete nextInd.firstLine;\n            }\n            // hangingChars 存在时 left 会被忽略\n            const realLeft = hangingChars ? leftChars : (leftChars || left);\n            if (!realLeft) {\n              nextInd.left = INDENT_SIZE;\n            }\n          } else if (!firstLineIndent) {\n            // 首先增加首行缩进\n            nextInd.firstLine = INDENT_SIZE;\n          } else if (leftChars) {\n            // 增加两字符\n            nextInd.leftChars = Math.min(leftChars + INDENT_SIZE_CHARS, MAX_INDENT_SIZE_CHARS);\n            nextInd.left = nextInd.leftChars / INDENT_SIZE_CHARS * INDENT_SIZE;\n          } else {\n            nextInd.left = Math.min(left + INDENT_SIZE, MAX_INDENT_SIZE);\n          }\n          break;\n        default:\n          if (hangingIndent || leftChars) {\n            // 悬挂缩进存在时需要增加 leftChars\n            nextInd.leftChars = Math.min(leftChars + INDENT_SIZE_CHARS, MAX_INDENT_SIZE_CHARS);\n            nextInd.left = nextInd.leftChars / INDENT_SIZE_CHARS * INDENT_SIZE;\n          } else {\n            nextInd.left = Math.min(left + indentVal, MAX_INDENT_SIZE);\n          }\n      }\n\n      if (isEqualWithDefault(nextInd, ind, DEFAULT_INDENT)) {\n        return undefined;\n      }\n      editor.command(Commands.setNodeByKey, indentNode.key, {\n        data: {\n          ...indentNodeData,\n          ind: nextInd,\n        },\n      });\n    }\n    return undefined;\n  });\n\n  return editor;\n};\n"],"file":"increaseIndent.js"}