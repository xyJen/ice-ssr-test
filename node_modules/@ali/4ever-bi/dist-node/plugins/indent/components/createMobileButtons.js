"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMobileHeading;

var React = _interopRequireWildcard(require("react"));

var _actions = require("../actions");

var _everUtils = require("@ali/4ever-utils");

/* eslint-disable no-param-reassign */
const _createElement = /*#__PURE__*/React.createElement;
const MOBILE_TOOLBAR = {
  increase: {
    icon: 'indentRight',
    action: _actions.increaseIndent
  },
  decrease: {
    icon: 'indentLeft',
    action: _actions.decreaseIndent
  }
};

function canIndent(controller, isInc) {
  const {
    value
  } = controller;
  const {
    startBlock,
    endBlock
  } = value;

  if (startBlock !== endBlock || !startBlock) {
    return true;
  }

  const indentNode = (0, _everUtils.getClosestParagraph)(value, startBlock);

  if (!indentNode) {
    return true;
  } // 减少的情况。如果没有、或者已经很小了，就 disable


  if (!isInc && !indentNode.data?.ind?.left && !indentNode.data?.list?.level) {
    return false;
  } // 增加的情况。如果有、并且已经很大了，就 disable


  if (isInc && indentNode.data?.ind?.left && indentNode.data.ind.left >= _everUtils.MAX_INDENT_SIZE) {
    return false;
  }

  return true;
}

function useDisabledAndClick(controller, action) {
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = Boolean(isCollapsedAtEdge || controller.query('isSelectionInHr') || controller.query('isSelectionInListSymbol'));
  const handleClick = React.useCallback(() => controller.run('onAction', action()), [action, controller]);
  return {
    isDisabled,
    handleClick
  };
}

function createMobileHeading(locale) {
  return Object.keys(MOBILE_TOOLBAR).reduce((result, type) => {
    result[`${type}MobileBig`] = props => {
      const {
        controller,
        Wrapper,
        item
      } = props;
      const {
        icon,
        action
      } = MOBILE_TOOLBAR[type]; // eslint-disable-next-line react-hooks/rules-of-hooks

      const {
        isDisabled,
        handleClick
      } = useDisabledAndClick(controller, action);
      const indentable = !isDisabled && canIndent(controller, type === 'increase');
      return /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "big",
        icon: icon,
        isDisabled: isDisabled || !indentable,
        onClick: handleClick
      });
    };

    result[`${type}Mobile`] = props => {
      const {
        controller,
        Wrapper,
        item
      } = props;
      const {
        icon,
        action
      } = MOBILE_TOOLBAR[type]; // eslint-disable-next-line react-hooks/rules-of-hooks

      const {
        isDisabled,
        handleClick
      } = useDisabledAndClick(controller, action);
      return /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "horiz",
        icon: icon,
        isDisabled: Boolean(isDisabled),
        onClick: handleClick
      });
    };

    return result;
  }, {});
}
//# sourceMappingURL=createMobileButtons.js.map