{"version":3,"sources":["../../../../src/plugins/paragraphColor/menu.tsx"],"names":["createColorPanelMenu","props","controller","menuItem","currentBlock","initialColor","query","node","initialBgColor","color","setColor","bgColor","setBgColor","handleColorClick","run","handleBackgroundClick","PluginRoles","paragraphColor"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAEA;;AALA;uBAC4B,a;;AAO5B,MAAMA,oBAAoB,GAAG,MAAM;AACjC,SAAQC,KAAD,IAAuB;AAC5B,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA;AAAF;AAAxB,QAA6CH,KAAnD;AAEA,UAAMI,YAAY,GAAG,oBACnB,MAAMH,UAAU,CAACI,KAAX,CAAiB,mBAAjB,EAAsC;AAAEC,MAAAA,IAAI,EAAEH;AAAR,KAAtC,CADa,EAEjB,CAACF,UAAD,EAAaE,YAAb,CAFiB,CAArB;AAKA,UAAMI,cAAc,GAAG,oBACrB,MAAMN,UAAU,CAACI,KAAX,CAAiB,qBAAjB,EAAwC;AAAEC,MAAAA,IAAI,EAAEH;AAAR,KAAxC,CADe,EAEnB,CAACF,UAAD,EAAaE,YAAb,CAFmB,CAAvB;AAKA,UAAM,CAACK,KAAD,EAAQC,QAAR,IAAoB,qBAASL,YAAT,CAA1B;AACA,UAAM,CAACM,OAAD,EAAUC,UAAV,IAAwB,qBAASJ,cAAT,CAA9B;AAEA,UAAMK,gBAAgB,GAAG,wBAAaJ,KAAD,IAAmB;AACtDP,MAAAA,UAAU,CAACY,GAAX,CAAe,UAAf,EAA2B,gCAAkB;AAAEP,QAAAA,IAAI,EAAEH,YAAR;AAAsBK,QAAAA;AAAtB,OAAlB,CAA3B;AACAC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAHwB,EAGtB,CAACP,UAAD,EAAaE,YAAb,CAHsB,CAAzB;AAKA,UAAMW,qBAAqB,GAAG,wBAAaN,KAAD,IAAmB;AAC3DP,MAAAA,UAAU,CAACY,GAAX,CAAe,UAAf,EAA2B,kCAAoB;AAAEP,QAAAA,IAAI,EAAEH,YAAR;AAAsBK,QAAAA;AAAtB,OAApB,CAA3B;AACAG,MAAAA,UAAU,CAACH,KAAD,CAAV;AACD,KAH6B,EAG3B,CAACP,UAAD,EAAaE,YAAb,CAH2B,CAA9B;AAKA,wBACE,eAAC,oBAAD;AACE,MAAA,KAAK,EAAEK,KADT;AAEE,MAAA,eAAe,EAAEE,OAFnB;AAGE,MAAA,YAAY,EAAEE,gBAHhB;AAIE,MAAA,sBAAsB,EAAEE,qBAJ1B;AAKE,MAAA,iBAAiB,MALnB;AAME,MAAA,IAAI,EAAEC,wBAAYC;AANpB,MADF;AAUD,GApCD;AAqCD,CAtCD;;eAwCejB,oB","sourcesContent":["/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { ColorPanel } from '@ali/we-design';\nimport { PluginRoles } from '@ali/4ever-bamboo';\n\nimport { setParagraphColor, setParagraphBgColor } from './actions';\nimport { IMenuProps } from './types';\n\nconst createColorPanelMenu = () => {\n  return (props: IMenuProps) => {\n    const { controller, menuItem: { currentBlock } } = props;\n\n    const initialColor = useMemo(\n      () => controller.query('getParagraphColor', { node: currentBlock })\n      , [controller, currentBlock],\n    );\n\n    const initialBgColor = useMemo(\n      () => controller.query('getParagraphBgColor', { node: currentBlock })\n      , [controller, currentBlock],\n    );\n\n    const [color, setColor] = useState(initialColor);\n    const [bgColor, setBgColor] = useState(initialBgColor);\n\n    const handleColorClick = useCallback((color: string) => {\n      controller.run('onAction', setParagraphColor({ node: currentBlock, color }));\n      setColor(color);\n    }, [controller, currentBlock]);\n\n    const handleBackgroundClick = useCallback((color: string) => {\n      controller.run('onAction', setParagraphBgColor({ node: currentBlock, color }));\n      setBgColor(color);\n    }, [controller, currentBlock]);\n\n    return (\n      <ColorPanel\n        color={color}\n        backgroundColor={bgColor}\n        onColorClick={handleColorClick}\n        onBackgroundColorClick={handleBackgroundClick}\n        enableResetButton\n        role={PluginRoles.paragraphColor}\n      />\n    );\n  };\n};\n\nexport default createColorPanelMenu;\n"],"file":"menu.js"}