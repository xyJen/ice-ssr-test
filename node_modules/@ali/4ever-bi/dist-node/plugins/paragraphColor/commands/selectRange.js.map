{"version":3,"sources":["../../../../../src/plugins/paragraphColor/commands/selectRange.ts"],"names":["selectRangeFromNode","controller","node","selection","range","document","value","Selection","create","moveToRangeOfNode","convertToTextPoints","command","Commands","select","selectRangeFromNodes","nodes","startBlock","endBlock","length","anchor","query","Queries","pointAtStartOfNode","focus","pointAtEndOfNode","selectRange","payload","nodeOrNodes","Array","isArray"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,mBAAmB,GAAG,CAACC,UAAD,EAAyBC,IAAzB,KAAyC;AACnE,QAAM;AAAEC,IAAAA,SAAS,EAAEC,KAAb;AAAoBC,IAAAA;AAApB,MAAiCJ,UAAU,CAACK,KAAlD;;AACA,QAAMH,SAAS,GAAGI,uBAAUC,MAAV,CAChBJ,KAAK,CAACK,iBAAN,CAAwBP,IAAxB,EAA8BD,UAA9B,EAA0CS,mBAA1C,CAA8DL,QAA9D,CADgB,CAAlB;;AAGA,SAAOJ,UAAU,CAACU,OAAX,CAAmBC,sBAASC,MAA5B,EAAoCV,SAApC,CAAP;AACD,CAND;;AAQA,MAAMW,oBAAoB,GAAG,CAACb,UAAD,EAAyBc,KAAzB,KAA4C;AACvE,QAAMC,UAAU,GAAGD,KAAK,CAAC,CAAD,CAAxB;AACA,QAAME,QAAQ,GAAGF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAtB;AACA,QAAMC,MAAM,GAAGlB,UAAU,CAACmB,KAAX,CAAiBC,qBAAQC,kBAAzB,EAA6CN,UAA7C,CAAf;AACA,QAAMO,KAAK,GAAGtB,UAAU,CAACmB,KAAX,CAAiBC,qBAAQG,gBAAzB,EAA2CP,QAA3C,CAAd;;AACA,QAAMd,SAAS,GAAGI,uBAAUC,MAAV,CAAiB;AAAEW,IAAAA,MAAF;AAAUI,IAAAA;AAAV,GAAjB,CAAlB;;AAEA,SAAOtB,UAAU,CAACU,OAAX,CAAmBC,sBAASC,MAA5B,EAAoCV,SAApC,CAAP;AACD,CARD;;AAUA,MAAMsB,WAAW,GAAG,CAACxB,UAAD,EAAyByB,OAAzB,KAA0C;AAC5D,QAAM;AAAEC,IAAAA;AAAF,MAAkBD,OAAxB;;AACA,MAAIE,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC9B,WAAOb,oBAAoB,CAACb,UAAD,EAAa0B,WAAb,CAA3B;AACD,GAFD,MAEO;AACL,WAAO3B,mBAAmB,CAACC,UAAD,EAAa0B,WAAb,CAA1B;AACD;AACF,CAPD;;eASeF,W","sourcesContent":["import { Controller, Selection, Block, Commands, Queries } from '@ali/4ever-cangjie';\n\nconst selectRangeFromNode = (controller: Controller, node: Block) => {\n  const { selection: range, document } = controller.value;\n  const selection = Selection.create(\n    range.moveToRangeOfNode(node, controller).convertToTextPoints(document),\n  );\n  return controller.command(Commands.select, selection);\n};\n\nconst selectRangeFromNodes = (controller: Controller, nodes: Block[]) => {\n  const startBlock = nodes[0];\n  const endBlock = nodes[nodes.length - 1];\n  const anchor = controller.query(Queries.pointAtStartOfNode, startBlock);\n  const focus = controller.query(Queries.pointAtEndOfNode, endBlock);\n  const selection = Selection.create({ anchor, focus });\n\n  return controller.command(Commands.select, selection);\n};\n\nconst selectRange = (controller: Controller, payload: any) => {\n  const { nodeOrNodes } = payload;\n  if (Array.isArray(nodeOrNodes)) {\n    return selectRangeFromNodes(controller, nodeOrNodes);\n  } else {\n    return selectRangeFromNode(controller, nodeOrNodes);\n  }\n};\n\nexport default selectRange;\n"],"file":"selectRange.js"}