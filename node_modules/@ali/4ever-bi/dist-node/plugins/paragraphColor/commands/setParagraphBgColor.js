"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

var _selectRange = _interopRequireDefault(require("./selectRange"));

var _utils = require("../utils");

const setTableOrColumnBgColor = (controller, node, color) => {
  // 当选区是表格或分栏时，调用 setTableCellFill 填充背景色
  controller.command(_selectRange.default, {
    nodeOrNodes: node
  });
  const table = controller.query('getTable');
  const selection = controller.query('getTableSelection');
  controller.dispatch('setTableCellFill', table, selection, color);
  controller.command(_everCangjie.Commands.moveToEndOfNode, node);
};

const setParagraphBgColor = (controller, payload) => {
  const {
    node: currentBlock,
    color
  } = payload;
  const blocks = (0, _utils.getCurrentBlocks)(controller, currentBlock.key);

  if (Array.isArray(blocks) && blocks.length > 0) {
    blocks.forEach(node => {
      const {
        data,
        type
      } = node;
      const isTableOrColumn = ['table', 'table-cell'].includes(type);

      if (isTableOrColumn) {
        // 处理表格和分栏的情况
        setTableOrColumnBgColor(controller, node, color);
      } else {
        let newData = { ...data
        };

        if (color === '') {
          delete newData.shd;
        } else {
          newData = { ...newData,
            shd: {
              val: 'clear',
              color: 'auto',
              fill: color
            }
          };
        }

        controller.command(_everCangjie.Commands.setNodeByKey, node.key, {
          data: newData
        });
      }
    });
  }

  return controller;
};

var _default = setParagraphBgColor;
exports.default = _default;
//# sourceMappingURL=setParagraphBgColor.js.map