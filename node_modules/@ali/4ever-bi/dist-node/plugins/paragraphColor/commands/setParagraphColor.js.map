{"version":3,"sources":["../../../../../src/plugins/paragraphColor/commands/setParagraphColor.ts"],"names":["setParagraphColor","controller","payload","node","currentBlock","color","blocks","key","Array","isArray","length","forEach","data","List","isList","newData","list","symbolStyle","command","Commands","setNodeByKey","range","dispatch"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAGA,MAAMA,iBAAiB,GAAG,CACxBC,UADwB,EAExBC,OAFwB,KAGrB;AACH,QAAM;AAAEC,IAAAA,IAAI,EAAEC,YAAR;AAAsBC,IAAAA;AAAtB,MAAgCH,OAAtC;AACA,QAAMI,MAAM,GAAG,6BAAiBL,UAAjB,EAA6BG,YAAY,CAACG,GAA1C,CAAf;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,KAAyBA,MAAM,CAACI,MAAP,GAAgB,CAA7C,EAAgD;AAC9CJ,IAAAA,MAAM,CAACK,OAAP,CAAgBR,IAAD,IAAU;AACvB,YAAM;AAAES,QAAAA;AAAF,UAAWT,IAAjB;;AACA,UAAIU,qBAAKC,MAAL,CAAYX,IAAZ,CAAJ,EAAuB;AACrB;AACA;AACA,cAAMY,OAAO,GAAG,sBAAUH,IAAV,CAAhB;AACAG,QAAAA,OAAO,CAACC,IAAR,CAAaC,WAAb,CAAyBZ,KAAzB,GAAiCA,KAAjC;AACAJ,QAAAA,UAAU,CAACiB,OAAX,CAAmBC,sBAASC,YAA5B,EAA0CjB,IAAI,CAACI,GAA/C,EACE;AAAEK,UAAAA,IAAI,EAAEG;AAAR,SADF;AAGD;AACF,KAXD;AAaA,UAAMM,KAAK,GAAG,8BAAkBpB,UAAlB,EAA8BK,MAA9B,CAAd;AACAL,IAAAA,UAAU,CAACqB,QAAX,CAAoB,iBAApB,EAAuCD,KAAvC,EAA8ChB,KAA9C;AACD;;AAED,SAAOJ,UAAP;AACD,CA1BD;;eA4BeD,iB","sourcesContent":["import { Controller, Commands } from '@ali/4ever-cangjie';\n\nimport { List } from '@ali/4ever-plugin-list';\nimport { getCurrentBlocks,  getRangeFromNodes, cloneData } from '../utils';\nimport type { ISetParagraphColor } from '../types';\n\nconst setParagraphColor = (\n  controller: Controller,\n  payload: ISetParagraphColor,\n) => {\n  const { node: currentBlock, color } = payload;\n  const blocks = getCurrentBlocks(controller, currentBlock.key);\n\n  if (Array.isArray(blocks) && blocks.length > 0) {\n    blocks.forEach((node) => {\n      const { data } = node;\n      if (List.isList(node)) {\n        // 列表拦截 SET_COLOR 设置列表符号颜色高度依赖 controller.selection\n        // 所以这里手动处理下列表符号的颜色\n        const newData = cloneData(data);\n        newData.list.symbolStyle.color = color;\n        controller.command(Commands.setNodeByKey, node.key,\n          { data: newData }\n        );\n      }\n    });\n\n    const range = getRangeFromNodes(controller, blocks);\n    controller.dispatch('setColorAtRange', range, color);\n  }\n\n  return controller;\n};\n\nexport default setParagraphColor;\n"],"file":"setParagraphColor.js"}