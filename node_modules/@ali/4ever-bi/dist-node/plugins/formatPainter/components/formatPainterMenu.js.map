{"version":3,"sources":["../../../../../src/plugins/formatPainter/components/formatPainterMenu.tsx"],"names":["MOD","environment","IS_MAC","CLEAR_STYLE_HOT_KEY","FormatPainterMenu","props","menuItem","controller","locale","title","rest","value","formatClipboard","data","isActive","trigger","isCollapsedAtEdge","selection","isDisabled","edgeSelection","query","handleClick","React","useCallback","run","buttonTitle"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAIA;;uBAL4B,a;AAG5B;AACA;AAGA,MAAMA,GAAG,GAAGC,yBAAYC,MAAZ,GAAqB,GAArB,GAA2B,MAAvC;AAEO,MAAMC,mBAAmB,GAAI,GAAEH,GAAI,KAAnC;;;AAEQ,SAASI,iBAAT,CAA2BC,KAA3B,EAAsD;AACnE,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,UAAZ;AAAwBC,IAAAA;AAAxB,MAAmCH,KAAzC;AACA,QAAM;AAAEI,IAAAA,KAAF;AAAS,OAAGC;AAAZ,MAAqBJ,QAA3B;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAYJ,UAAlB;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAsBD,KAAK,CAACE,IAAlC;AACA,QAAMC,QAAQ,GAAGF,eAAe,IAAIA,eAAe,CAACG,OAAhB,KAA4B,SAAhE,CALmE,CAMnE;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAwBL,KAAK,CAACM,SAApC;AACA,QAAMC,UAAU,GAAGF,iBAAiB,IAC/BL,KAAK,CAACE,IAAN,CAAWM,aADG,IAEdZ,UAAU,CAACa,KAAX,CAAiB,iBAAjB,CAFc,IAGdb,UAAU,CAACa,KAAX,CAAiB,oBAAjB,CAHc,IAIdb,UAAU,CAACa,KAAX,CAAiB,sBAAjB,CAJc,IAKdb,UAAU,CAACa,KAAX,CAAiB,yBAAjB,CALc,IAMdb,UAAU,CAACa,KAAX,CAAiB,uBAAjB,CANL;AAQA,QAAMC,WAAW,GAAGC,KAAK,CAACC,WAAN,CAAkB,MAAM;AAC1C,QAAI,CAACX,eAAL,EAAsB;AACpBL,MAAAA,UAAU,CAACiB,GAAX,CAAe,UAAf,EAA2B,yBAAW,QAAX,CAA3B;AACA;AACD;;AACDjB,IAAAA,UAAU,CAACiB,GAAX,CAAe,UAAf,EAA2B,oCAA3B;AACD,GANmB,EAMjB,CAACjB,UAAD,EAAaK,eAAb,CANiB,CAApB;AAQA,sBACE,eAAC,kBAAD,6BACMF,IADN;AAEE,IAAA,QAAQ,EAAEQ,UAFZ;AAGE,IAAA,OAAO,EAAEG,WAHX;AAIE,IAAA,MAAM,EAAE;AAJV,MAMGZ,KAAK,IAAID,MAAM,EAAEiB,WANpB,CADF;AAUD","sourcesContent":["import * as React from 'react';\nimport { Controller, environment } from '@ali/4ever-cangjie';\nimport { MenuItem } from '@ali/we-design';\nimport { MenuItemInnerProps } from '@ali/4ever-component';\n;\n;\nimport { copyFormat, clearFormatClipboard } from '../actions';\n\nconst MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';\n\nexport const CLEAR_STYLE_HOT_KEY = `${MOD}+\\\\`;\n\nexport default function FormatPainterMenu(props: MenuItemInnerProps) {\n  const { menuItem, controller, locale } = props;\n  const { title, ...rest } = menuItem;\n  const { value } = controller;\n  const { formatClipboard } = value.data;\n  const isActive = formatClipboard && formatClipboard.trigger === 'toolbar';\n  // const shortcutText = locale.doubleTitle || '';\n  const { isCollapsedAtEdge } = value.selection;\n  const isDisabled = isCollapsedAtEdge\n    || value.data.edgeSelection\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInImage')\n    || controller.query('isSelectionInMention')\n    || controller.query('isSelectionInListSymbol')\n    || controller.query('isSelectionInLinkCard');\n\n  const handleClick = React.useCallback(() => {\n    if (!formatClipboard) {\n      controller.run('onAction', copyFormat('single'));\n      return;\n    }\n    controller.run('onAction', clearFormatClipboard());\n  }, [controller, formatClipboard]);\n\n  return (\n    <MenuItem\n      {...rest}\n      disabled={isDisabled}\n      onClick={handleClick}\n      testid={'bi-toolbar-clearstyle'}\n    >\n      {title || locale?.buttonTitle}\n    </MenuItem>\n  );\n}\n"],"file":"formatPainterMenu.js"}