"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FormatPainterButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everComponent = require("@ali/4ever-component");

var _everBamboo = require("@ali/4ever-bamboo");

var _actions = require("../../actions");

const _createElement = /*#__PURE__*/React.createElement;
;
;
;

function FormatPainterButton(props) {
  const {
    controller,
    locale,
    tooltip: tooltipProp,
    ...rest
  } = props;
  const {
    value
  } = controller;
  const defaultSz = (0, _everComponent.useDefaultSz)();
  const {
    formatClipboard
  } = value.data;
  const isActive = formatClipboard && formatClipboard.trigger === 'toolbar';
  const {
    isCollapsedAtEdge
  } = value.selection;
  const isDisabled = isCollapsedAtEdge || value.data.edgeSelection || controller.query('isSelectionInHr') || controller.query('isSelectionInImage') || controller.query('isSelectionInMention') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  const handleClick = React.useCallback(() => {
    if (!formatClipboard) {
      controller.run('onAction', (0, _actions.copyFormat)('single', defaultSz));
      return;
    }

    controller.run('onAction', (0, _actions.clearFormatClipboard)());
  }, [controller, defaultSz, formatClipboard]);
  const handleDoubleClick = React.useCallback(() => {
    controller.run('onAction', (0, _actions.copyFormat)('multiple', defaultSz));
  }, [controller, defaultSz]);
  const tooltip = React.useMemo(() => ({
    title: locale?.buttonTitle,
    description: locale?.doubleTitle || '',
    ...tooltipProp
  }), [tooltipProp]);
  return /*#__PURE__*/_createElement(_everComponent.BrushButton, (0, _extends2.default)({
    testid: "bi-toolbar-painter",
    active: isActive,
    disabled: isDisabled,
    onClick: handleClick,
    onDoubleClick: handleDoubleClick,
    role: _everBamboo.PluginRoles.formatPainter,
    title: locale?.buttonTitle,
    tooltip: tooltip
  }, rest));
}
//# sourceMappingURL=FormatPainterButton.js.map