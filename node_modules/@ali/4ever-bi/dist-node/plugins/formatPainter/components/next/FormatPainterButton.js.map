{"version":3,"sources":["../../../../../../src/plugins/formatPainter/components/next/FormatPainterButton.tsx"],"names":["FormatPainterButton","props","controller","locale","tooltip","tooltipProp","rest","value","defaultSz","formatClipboard","data","isActive","trigger","isCollapsedAtEdge","selection","isDisabled","edgeSelection","query","handleClick","React","useCallback","run","handleDoubleClick","useMemo","title","buttonTitle","description","doubleTitle","PluginRoles","formatPainter"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAIA;;uBAN4B,a;AAG5B;AACA;AACA;;AAQe,SAASA,mBAAT,CAA6BC,KAA7B,EAA8D;AAC3E,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,OAAO,EAAEC,WAA/B;AAA4C,OAAGC;AAA/C,MAAwDL,KAA9D;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAYL,UAAlB;AACA,QAAMM,SAAS,GAAG,kCAAlB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAsBF,KAAK,CAACG,IAAlC;AACA,QAAMC,QAAQ,GAAGF,eAAe,IAAIA,eAAe,CAACG,OAAhB,KAA4B,SAAhE;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAwBN,KAAK,CAACO,SAApC;AAEA,QAAMC,UAAU,GAAGF,iBAAiB,IAC/BN,KAAK,CAACG,IAAN,CAAWM,aADG,IAEdd,UAAU,CAACe,KAAX,CAAiB,iBAAjB,CAFc,IAGdf,UAAU,CAACe,KAAX,CAAiB,oBAAjB,CAHc,IAIdf,UAAU,CAACe,KAAX,CAAiB,sBAAjB,CAJc,IAKdf,UAAU,CAACe,KAAX,CAAiB,yBAAjB,CALc,IAMdf,UAAU,CAACe,KAAX,CAAiB,uBAAjB,CANL;AAQA,QAAMC,WAAW,GAAGC,KAAK,CAACC,WAAN,CAAkB,MAAM;AAC1C,QAAI,CAACX,eAAL,EAAsB;AACpBP,MAAAA,UAAU,CAACmB,GAAX,CAAe,UAAf,EAA2B,yBAAW,QAAX,EAAqBb,SAArB,CAA3B;AACA;AACD;;AACDN,IAAAA,UAAU,CAACmB,GAAX,CAAe,UAAf,EAA2B,oCAA3B;AACD,GANmB,EAMjB,CAACnB,UAAD,EAAaM,SAAb,EAAwBC,eAAxB,CANiB,CAApB;AAQA,QAAMa,iBAAiB,GAAGH,KAAK,CAACC,WAAN,CAAkB,MAAM;AAChDlB,IAAAA,UAAU,CAACmB,GAAX,CAAe,UAAf,EAA2B,yBAAW,UAAX,EAAuBb,SAAvB,CAA3B;AACD,GAFyB,EAEvB,CAACN,UAAD,EAAaM,SAAb,CAFuB,CAA1B;AAIA,QAAMJ,OAAO,GAAGe,KAAK,CAACI,OAAN,CAAc,OAAO;AACnCC,IAAAA,KAAK,EAAErB,MAAM,EAAEsB,WADoB;AAEnCC,IAAAA,WAAW,EAAEvB,MAAM,EAAEwB,WAAR,IAAuB,EAFD;AAGnC,OAAGtB;AAHgC,GAAP,CAAd,EAIZ,CAACA,WAAD,CAJY,CAAhB;AAMA,sBACE,eAAC,0BAAD;AACE,IAAA,MAAM,EAAC,oBADT;AAEE,IAAA,MAAM,EAAEM,QAFV;AAGE,IAAA,QAAQ,EAAEI,UAHZ;AAIE,IAAA,OAAO,EAAEG,WAJX;AAKE,IAAA,aAAa,EAAEI,iBALjB;AAME,IAAA,IAAI,EAAEM,wBAAYC,aANpB;AAOE,IAAA,KAAK,EAAE1B,MAAM,EAAEsB,WAPjB;AAQE,IAAA,OAAO,EAAErB;AARX,KASME,IATN,EADF;AAaD","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { BrushButton, IToolbarButtonConfig, useDefaultSz } from '@ali/4ever-component';\nimport { PluginRoles, } from '@ali/4ever-bamboo';\n;\n;\n;\nimport { copyFormat, clearFormatClipboard } from '../../actions';\n\nexport interface FormatPainterButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  locale?: Record<string, string>;\n}\n\nexport default function FormatPainterButton(props: FormatPainterButtonProps) {\n  const { controller, locale, tooltip: tooltipProp, ...rest } = props;\n  const { value } = controller;\n  const defaultSz = useDefaultSz();\n  const { formatClipboard } = value.data;\n  const isActive = formatClipboard && formatClipboard.trigger === 'toolbar';\n  const { isCollapsedAtEdge } = value.selection;\n\n  const isDisabled = isCollapsedAtEdge\n    || value.data.edgeSelection\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInImage')\n    || controller.query('isSelectionInMention')\n    || controller.query('isSelectionInListSymbol')\n    || controller.query('isSelectionInLinkCard');\n\n  const handleClick = React.useCallback(() => {\n    if (!formatClipboard) {\n      controller.run('onAction', copyFormat('single', defaultSz));\n      return;\n    }\n    controller.run('onAction', clearFormatClipboard());\n  }, [controller, defaultSz, formatClipboard]);\n\n  const handleDoubleClick = React.useCallback(() => {\n    controller.run('onAction', copyFormat('multiple', defaultSz));\n  }, [controller, defaultSz]);\n\n  const tooltip = React.useMemo(() => ({\n    title: locale?.buttonTitle,\n    description: locale?.doubleTitle || '',\n    ...tooltipProp,\n  }), [tooltipProp]);\n\n  return (\n    <BrushButton\n      testid=\"bi-toolbar-painter\"\n      active={isActive}\n      disabled={isDisabled}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      role={PluginRoles.formatPainter}\n      title={locale?.buttonTitle}\n      tooltip={tooltip}\n      {...rest}\n    />\n  );\n}\n"],"file":"FormatPainterButton.js"}