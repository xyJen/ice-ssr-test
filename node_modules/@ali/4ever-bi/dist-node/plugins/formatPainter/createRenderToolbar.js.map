{"version":3,"sources":["../../../../src/plugins/formatPainter/createRenderToolbar.tsx"],"names":["buttons","FormatPainterButton","createRenderToolbar","locale","props","controller","buttonName","extraProps","Component","SlotType","iconButton"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;AAG5B,MAAMA,OAAiF,GAAG;AACxF,mBAAiBC;AADuE,CAA1F;;AAIe,SAASC,mBAAT,CACbC,MADa,EAEE;AAGf,SAAO,CAACC,KAAD,EAAQC,UAAR,KAAuB;AAE5B,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA6BH,KAAnC;AAEA,UAAMI,SAAS,GAAGR,OAAO,CAACM,UAAD,CAAzB;;AACA,QAAIE,SAAJ,EAAe;AACb,0BACE,eAAC,uBAAD;AAAU,QAAA,OAAO,EAAEC,wBAASC;AAA5B,sBACE,eAAC,SAAD;AACE,QAAA,UAAU,EAAEL,UADd;AAEE,QAAA,MAAM,EAAEF;AAFV,SAGMI,UAHN,EADF,CADF;AASD;;AAED,WAAO,IAAP;AACD,GAlBD;AAmBD","sourcesContent":["import * as React from 'react';\nimport { ItemKeys, ItemSlot, RenderToolbar, SlotType } from '@ali/4ever-component';\nimport FormatPainterButton, { FormatPainterButtonProps } from './components/next/FormatPainterButton';\n\nconst buttons: Partial<Record<ItemKeys, React.ComponentType<FormatPainterButtonProps>>> = {\n  'formatPainter': FormatPainterButton\n};\n\nexport default function createRenderToolbar(\n  locale: Record<string, string>,\n): RenderToolbar {\n\n\n  return (props, controller) => {\n\n    const { buttonName, extraProps } = props;\n\n    const Component = buttons[buttonName] as React.ComponentType<FormatPainterButtonProps>;\n    if (Component) {\n      return (\n        <ItemSlot display={SlotType.iconButton}>\n          <Component\n            controller={controller}\n            locale={locale}\n            {...extraProps}\n          />\n        </ItemSlot>\n      )\n    }\n\n    return null\n  };\n}\n"],"file":"createRenderToolbar.js"}