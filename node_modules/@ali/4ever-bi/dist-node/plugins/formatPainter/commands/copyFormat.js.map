{"version":3,"sources":["../../../../../src/plugins/formatPainter/commands/copyFormat.ts"],"names":["getFirstCharRangeAfterStart","range","document","start","convertToTextPoints","Selection","create","anchor","focus","moveForward","isCollapsedAtEndOfBlock","block","isExpanded","isAtEndOfNode","copiableMarks","isCopiableMark","type","Object","keys","Marks","forEach","key","TYPE","copyFormat","controller","trigger","defaultSz","value","ranges","currentBlock","getClosestBlock","textFormat","firstCharRange","getMarksAtRange","filter","markType","defaultMarks","CommonFormatUtil","getDefaultMarks","find","m","Bold","defaultBold","Mark","data","push","Sz","sz","paragraphFormat","isCollapsed","list","jc","spacing","ind","shd","length","run","basicActions","createMergeDataAction","formatClipboard","text","paragraph"],"mappings":"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","sourcesContent":["import { Controller, Selection, Mark } from '@ali/4ever-cangjie';\nimport { Marks } from '@ali/4ever-mo';\nimport { CommonFormatUtil } from '@ali/4ever-bamboo';\nimport { getRangesFromEditor }  from '@ali/4ever-utils';\nimport { biActions as basicActions } from '@ali/4ever-plugin-basic';\nimport isParagraphBlock from '../utils/isParagraphBlock';\nimport isSelectWholeBlocks from '../utils/isSelectWholeBlocks';\n\nfunction getFirstCharRangeAfterStart(range: Selection, document) {\n  const { start } = range.convertToTextPoints(document);\n  return Selection.create({\n    anchor: start,\n    focus: start.moveForward(),\n  });\n}\n\nfunction isCollapsedAtEndOfBlock(range: Selection, block) {\n  if (range.isExpanded) {\n    return false;\n  }\n  return range.anchor.isAtEndOfNode(block);\n}\n\nlet copiableMarks;\n\nfunction isCopiableMark(type) {\n  if (!copiableMarks) {\n    copiableMarks = {};\n    Object.keys(Marks).forEach((key) => {\n      copiableMarks[Marks[key].TYPE] = true;\n    });\n  }\n  return copiableMarks[type];\n}\n\nexport default function copyFormat(\n  controller: Controller,\n  trigger?: string,\n  type = 'single',\n  defaultSz?: number,\n) {\n  const { value } = controller;\n  const ranges = getRangesFromEditor(controller);\n\n  const range: Selection | null = ranges[0];\n\n  if (!range) {\n    return controller;\n  }\n\n  const { document } = value;\n  const { start } = range.convertToTextPoints(document);\n  const currentBlock = document.getClosestBlock(start.key);\n  if (!currentBlock) return controller;\n\n  let textFormat: Mark[] = [];\n  // TODO: 当前逻辑没有考虑段尾的情况，粘贴样式会导致已有的mark被情况，待修复\n  if (range.isExpanded || !isCollapsedAtEndOfBlock(range, currentBlock)) {\n    // only copy style of first char\n    const firstCharRange = getFirstCharRangeAfterStart(range, document);\n    textFormat = document\n      .getMarksAtRange(firstCharRange)\n      .filter(({ type: markType }) => isCopiableMark(markType));\n    // 为默认普通文本补充样式\n    if (isParagraphBlock(currentBlock)) {\n      const defaultMarks = CommonFormatUtil.getDefaultMarks(currentBlock, defaultSz);\n      if (!textFormat.find((m) => m.type === Marks.Bold.TYPE)) {\n        // 补充 value 为 false 的 bold mark：让包括标题在内的所有文本都能取消加粗\n        const defaultBold = defaultMarks.find((m) => m.type === Marks.Bold.TYPE) || Mark.create({\n          type: Marks.Bold.TYPE,\n          data: {\n            value: false,\n          },\n        });\n        textFormat.push(defaultBold);\n      }\n      if (!textFormat.find((m) => m.type === Marks.Sz.TYPE)) {\n        // 补充默认字号\n        const sz = defaultMarks.find((m) => m.type === Marks.Sz.TYPE);\n        sz && textFormat.push(sz);\n      }\n    }\n  }\n\n  let paragraphFormat;\n  if (range.isCollapsed || isSelectWholeBlocks(value)) {\n    // only copy style of text paragraph\n    if (isParagraphBlock(currentBlock)) {\n      paragraphFormat = {\n        type: currentBlock.type,\n        list: currentBlock.data.list,\n        jc: currentBlock.data.jc,\n        spacing: currentBlock.data.spacing,\n        ind: currentBlock.data.ind,\n        shd: currentBlock.data.shd,\n      };\n    }\n  }\n\n  // found no formats\n  if (paragraphFormat && !textFormat.length) return controller;\n\n  controller.run('onAction', basicActions.createMergeDataAction({\n    formatClipboard: {\n      trigger,\n      type,\n      text: textFormat,\n      paragraph: paragraphFormat,\n    },\n  }));\n\n  return controller;\n}\n"],"file":"copyFormat.js"}