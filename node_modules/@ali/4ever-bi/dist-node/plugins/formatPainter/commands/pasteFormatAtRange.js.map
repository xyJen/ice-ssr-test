{"version":3,"sources":["../../../../../src/plugins/formatPainter/commands/pasteFormatAtRange.ts"],"names":["supportParagraphData","isInvalidBlocksInRange","value","document","selection","fragment","getFragmentAtRange","nodes","some","type","clearMarksAtRange","controller","range","marks","getMarksAtRange","filter","length","forEach","mark","isCollapsed","command","Commands","removeMark","removeMarkAtRange","pasteFormatAtRange","formatClipboard","data","text","addMarkAtRange","format","paragraph","paragraphs","getLeafBlocksAtRange","isParagraphBlock","key","setNodeByKey","trigger"],"mappings":"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","sourcesContent":["import { Commands, Controller, Selection } from '@ali/4ever-cangjie';\nimport isParagraphBlock from '../utils/isParagraphBlock';\nimport isSelectWholeBlocks from '../utils/isSelectWholeBlocks';\nimport clearFormatClipboard from './clearFormatClipboard';\n\nconst supportParagraphData = ['list', 'jc', 'ind', 'shd', 'spacing'];\n\nfunction isInvalidBlocksInRange(value) {\n  const { document, selection } = value;\n  const fragment = document.getFragmentAtRange(selection);\n  return fragment.nodes\n    // 目前选区内出现分割线及表格，则不应用段落样式\n    .some(({ type }) => type === 'hr' || type === 'table');\n}\n\nfunction clearMarksAtRange(controller: Controller, range: Selection) {\n  const { value } = controller;\n  const { document } = value;\n  const marks = document\n    .getMarksAtRange(range)\n    .filter(({ type }) => type !== 'vertAlign');\n  if (marks.length) {\n    marks.forEach((mark) => {\n      if (range.isCollapsed) {\n        controller.command(Commands.removeMark, mark);\n      } else {\n        controller.command(Commands.removeMarkAtRange, range, mark);\n      }\n    });\n  }\n\n  return controller;\n}\n\nexport default function pasteFormatAtRange(controller: Controller, range: Selection) {\n  const { value } = controller;\n  const { formatClipboard } = value.data;\n  if (!formatClipboard) {\n    return controller;\n  }\n\n  clearMarksAtRange(controller, range);\n\n  const marks = formatClipboard.text;\n  marks.forEach((mark) => Commands.addMarkAtRange(controller, range, mark));\n\n  const format = formatClipboard.paragraph;\n  const { selection, document } = value;\n\n  if (\n    format && (\n      selection.isCollapsed\n        || (isSelectWholeBlocks(value) && !isInvalidBlocksInRange(value))\n    )\n  ) {\n    const paragraphs = document\n      .getLeafBlocksAtRange(range)\n      .filter(isParagraphBlock);\n\n    paragraphs.forEach((paragraph) => {\n      const data = {\n        ...paragraph.data,\n      };\n\n      supportParagraphData.forEach((key) => {\n        // 因为是直接覆盖data，这里过滤一次，不保留不必要字段\n        if (!format[key]) {\n          delete data[key];\n        } else {\n          data[key] = format[key];\n        }\n      });\n      controller.command(Commands.setNodeByKey, paragraph.key, {\n        type: format.type,\n        data,\n      });\n    });\n  }\n  // 双击或快捷键不清除样式以便复用\n  if (formatClipboard.type === 'multiple' || formatClipboard.trigger === 'keyboard') {\n    return controller;\n  }\n  return clearFormatClipboard(controller);\n}\n"],"file":"pasteFormatAtRange.js"}