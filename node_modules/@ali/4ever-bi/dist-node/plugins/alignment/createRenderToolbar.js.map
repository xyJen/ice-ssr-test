{"version":3,"sources":["../../../../src/plugins/alignment/createRenderToolbar.tsx"],"names":["buttons","AlignLeftButton","AlignRightButton","AlignCenterButton","AlignJustifyButton","createRenderToolbar","locale","props","controller","buttonName","extraProps","SlotType","iconSelect","IconSelectSingleLineDefaultWidth","Component","iconButton"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;uBAN4B,a;AAQ5B,MAAMA,OAA6E,GAAG;AACpF,oBAAkBC,4BADkE;AAEpF,qBAAmBC,6BAFiE;AAGpF,sBAAoBC,8BAHgE;AAIpF,uBAAqBC;AAJ+D,CAAtF;;AAOe,SAASC,mBAAT,CACbC,MADa,EAEE;AAGf,SAAO,CAACC,KAAD,EAAQC,UAAR,KAAuB;AAE5B,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA6BH,KAAnC;;AAEA,QAAIE,UAAU,KAAK,WAAnB,EAAgC;AAC9B,0BACE,eAAC,uBAAD;AAAU,QAAA,OAAO,EAAEE,wBAASC,UAA5B;AAAwC,QAAA,KAAK,EAAEC;AAA/C,sBACE,eAAC,wBAAD;AACE,QAAA,UAAU,EAAEL,UADd;AAEE,QAAA,MAAM,EAAEF;AAFV,SAGMI,UAHN,EADF,CADF;AAUD;;AAED,UAAMI,SAAS,GAAGd,OAAO,CAACS,UAAD,CAAzB;;AACA,QAAIK,SAAJ,EAAe;AACb,0BACE,eAAC,uBAAD;AAAU,QAAA,OAAO,EAAEH,wBAASI;AAA5B,sBACE,eAAC,SAAD;AACE,QAAA,UAAU,EAAEP,UADd;AAEE,QAAA,MAAM,EAAEF;AAFV,SAGMI,UAHN,EADF,CADF;AASD;;AAED,WAAO,IAAP;AACD,GA/BD;AAgCD","sourcesContent":["import * as React from 'react';\nimport { RenderToolbar, ItemKeys, ItemSlot, SlotType, IconSelectSingleLineDefaultWidth } from '@ali/4ever-component';\nimport AlignmentButton from './components/next/AlignmentButton';\nimport { AlignmentButtonProps } from './components/next/createAlignmentButton';\nimport AlignLeftButton from './components/next/AlignmentLeftButton';\nimport AlignRightButton from './components/next/AlignmentRightButton';\nimport AlignCenterButton from './components/next/AlignmentCenterButton';\nimport AlignJustifyButton from './components/next/AlignmentJustifyButton';\n\nconst buttons: Partial<Record<ItemKeys, React.ComponentType<AlignmentButtonProps>>> = {\n  'alignment.left': AlignLeftButton,\n  'alignment.right': AlignRightButton,\n  'alignment.center': AlignCenterButton,\n  'alignment.justify': AlignJustifyButton\n};\n\nexport default function createRenderToolbar(\n  locale: Record<string, string>,\n): RenderToolbar {\n\n\n  return (props, controller) => {\n\n    const { buttonName, extraProps } = props;\n\n    if (buttonName === 'alignment') {\n      return (\n        <ItemSlot display={SlotType.iconSelect} width={IconSelectSingleLineDefaultWidth}>\n          <AlignmentButton\n            controller={controller}\n            locale={locale}\n            {...extraProps}\n          />\n        </ItemSlot>\n\n      )\n    }\n\n    const Component = buttons[buttonName] as React.ComponentType<AlignmentButtonProps>;\n    if (Component) {\n      return (\n        <ItemSlot display={SlotType.iconButton}>\n          <Component\n            controller={controller}\n            locale={locale}\n            {...extraProps}\n          />\n        </ItemSlot>\n      )\n    }\n\n    return null\n  };\n}\n"],"file":"createRenderToolbar.js"}