"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AlignmentSelect = void 0;

var React = _interopRequireWildcard(require("react"));

var _weDesignNext = require("@ali/we-design-next");

var _everBamboo = require("@ali/4ever-bamboo");

var _everComponent = require("@ali/4ever-component");

var _getTipsByType = require("../../utils/getTipsByType");

var _actions = require("../../actions");

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_everComponent.IconAlignLeft, null);

var _ref2 = /*#__PURE__*/_createElement(_everComponent.IconAlignCenter, null);

var _ref3 = /*#__PURE__*/_createElement(_everComponent.IconAlignRight, null);

var _ref4 = /*#__PURE__*/_createElement(_everComponent.IconAlignJustify, null);

const AlignmentSelect = props => {
  const {
    controller,
    getNode,
    onOverlayVisibleChange,
    locale
  } = props;

  const getContainer = _everComponent.HoverToolbarHooks.useGetContainer();

  const [isOverlayVisible, setOverlayVisible] = _everComponent.HoverToolbarHooks.usePopoverVisible('alignment.default', onOverlayVisibleChange);

  const node = getNode();
  const alignment = controller.query('getAlignment', node);
  const handleChange = React.useCallback(v => {
    node && controller.run('onAction', (0, _actions.setAlignment)(v, node.key));
  }, [controller, node]);
  if (!node) return null;
  return /*#__PURE__*/_createElement(_weDesignNext.TBIconSelect, {
    value: alignment,
    width: 100,
    options: [{
      key: 'left',
      icon: _ref,
      title: locale.dropdownLeft || '左对齐',
      tooltip: _getTipsByType.shortcut.left
    }, {
      key: 'center',
      icon: _ref2,
      title: locale.dropdownCenter || '居中对齐',
      tooltip: _getTipsByType.shortcut.right
    }, {
      key: 'right',
      icon: _ref3,
      title: locale.dropdownRight || '右对齐',
      tooltip: _getTipsByType.shortcut.center
    }, {
      key: 'justify',
      icon: _ref4,
      title: locale.dropdownJustify || '两端对齐',
      tooltip: _getTipsByType.shortcut.justify
    }],
    onChange: handleChange,
    onVisibleChange: setOverlayVisible,
    overlayVisible: isOverlayVisible,
    getContainer: getContainer,
    tooltip: locale.buttonTitle,
    testid: "bi-hover-toolbar-alignment",
    role: _everBamboo.PluginRoles.alignSelect
  });
};

exports.AlignmentSelect = AlignmentSelect;
//# sourceMappingURL=alignmentSelect.js.map