{"version":3,"sources":["../../../../../../src/plugins/alignment/components/hoverToolbar/alignmentSelect.tsx"],"names":["AlignmentSelect","props","controller","getNode","onOverlayVisibleChange","locale","getContainer","HoverToolbarHooks","useGetContainer","isOverlayVisible","setOverlayVisible","usePopoverVisible","node","alignment","query","handleChange","React","useCallback","v","run","key","icon","title","dropdownLeft","tooltip","shortcut","left","dropdownCenter","right","dropdownRight","center","dropdownJustify","justify","buttonTitle","PluginRoles","alignSelect"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;uBAL4B,a;;wBAgCC,eAAC,4BAAD,O;;yBACE,eAAC,8BAAD,O;;yBACD,eAAC,6BAAD,O;;yBACE,eAAC,+BAAD,O;;AArBzB,MAAMA,eAAgD,GAAIC,KAAD,IAAW;AACzE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,sBAAvB;AAA+CC,IAAAA;AAA/C,MAA0DJ,KAAhE;;AACA,QAAMK,YAAY,GAAGC,iCAAkBC,eAAlB,EAArB;;AACA,QAAM,CAACC,gBAAD,EAAmBC,iBAAnB,IAAwCH,iCAAkBI,iBAAlB,CAAoC,mBAApC,EAAyDP,sBAAzD,CAA9C;;AACA,QAAMQ,IAAI,GAAGT,OAAO,EAApB;AACA,QAAMU,SAAS,GAAGX,UAAU,CAACY,KAAX,CAAiB,cAAjB,EAAiCF,IAAjC,CAAlB;AAEA,QAAMG,YAAY,GAAGC,KAAK,CAACC,WAAN,CAAmBC,CAAD,IAAe;AACpDN,IAAAA,IAAI,IAAIV,UAAU,CAACiB,GAAX,CAAe,UAAf,EAA2B,2BAAaD,CAAb,EAAgBN,IAAI,CAACQ,GAArB,CAA3B,CAAR;AACD,GAFoB,EAElB,CAAClB,UAAD,EAAaU,IAAb,CAFkB,CAArB;AAIA,MAAI,CAACA,IAAL,EAAW,OAAO,IAAP;AAEX,sBACE,eAAC,0BAAD;AACE,IAAA,KAAK,EAAEC,SADT;AAEE,IAAA,KAAK,EAAE,GAFT;AAGE,IAAA,OAAO,EAAE,CACP;AAAEO,MAAAA,GAAG,EAAE,MAAP;AAAeC,MAAAA,IAAI,MAAnB;AAAwCC,MAAAA,KAAK,EAAEjB,MAAM,CAACkB,YAAP,IAAuB,KAAtE;AAA6EC,MAAAA,OAAO,EAAEC,wBAASC;AAA/F,KADO,EAEP;AAAEN,MAAAA,GAAG,EAAE,QAAP;AAAiBC,MAAAA,IAAI,OAArB;AAA4CC,MAAAA,KAAK,EAAEjB,MAAM,CAACsB,cAAP,IAAyB,MAA5E;AAAoFH,MAAAA,OAAO,EAAEC,wBAASG;AAAtG,KAFO,EAGP;AAAER,MAAAA,GAAG,EAAE,OAAP;AAAgBC,MAAAA,IAAI,OAApB;AAA0CC,MAAAA,KAAK,EAAEjB,MAAM,CAACwB,aAAP,IAAwB,KAAzE;AAAgFL,MAAAA,OAAO,EAAEC,wBAASK;AAAlG,KAHO,EAIP;AAAEV,MAAAA,GAAG,EAAE,SAAP;AAAkBC,MAAAA,IAAI,OAAtB;AAA8CC,MAAAA,KAAK,EAAEjB,MAAM,CAAC0B,eAAP,IAA0B,MAA/E;AAAuFP,MAAAA,OAAO,EAAEC,wBAASO;AAAzG,KAJO,CAHX;AASE,IAAA,QAAQ,EAAEjB,YATZ;AAUE,IAAA,eAAe,EAAEL,iBAVnB;AAWE,IAAA,cAAc,EAAED,gBAXlB;AAYE,IAAA,YAAY,EAAEH,YAZhB;AAaE,IAAA,OAAO,EAAED,MAAM,CAAC4B,WAblB;AAcE,IAAA,MAAM,EAAC,4BAdT;AAeE,IAAA,IAAI,EAAEC,wBAAYC;AAfpB,IADF;AAmBD,CAhCM","sourcesContent":["import * as React from 'react';\nimport { TBIconSelect } from '@ali/we-design-next';\nimport { Controller, Node } from '@ali/4ever-cangjie';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { IconAlignCenter, IconAlignJustify, IconAlignLeft, IconAlignRight, HoverToolbarHooks } from '@ali/4ever-component';\nimport { shortcut } from '../../utils/getTipsByType';\nimport { setAlignment } from '../../actions';\n\nexport interface IAlignmentSelectProps {\n  controller: Controller;\n  getNode: () => Node | null;\n  onOverlayVisibleChange: (v: boolean) => void;\n  locale: Record<string, string>;\n}\n\nexport const AlignmentSelect: React.FC<IAlignmentSelectProps> = (props) => {\n  const { controller, getNode, onOverlayVisibleChange, locale } = props;\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('alignment.default', onOverlayVisibleChange);\n  const node = getNode();\n  const alignment = controller.query('getAlignment', node);\n\n  const handleChange = React.useCallback((v: string) => {\n    node && controller.run('onAction', setAlignment(v, node.key));\n  }, [controller, node]);\n\n  if (!node) return null;\n\n  return (\n    <TBIconSelect\n      value={alignment}\n      width={100}\n      options={[\n        { key: 'left', icon: <IconAlignLeft />, title: locale.dropdownLeft || '左对齐', tooltip: shortcut.left },\n        { key: 'center', icon: <IconAlignCenter />, title: locale.dropdownCenter || '居中对齐', tooltip: shortcut.right },\n        { key: 'right', icon: <IconAlignRight />, title: locale.dropdownRight || '右对齐', tooltip: shortcut.center },\n        { key: 'justify', icon: <IconAlignJustify />, title: locale.dropdownJustify || '两端对齐', tooltip: shortcut.justify },\n      ]}\n      onChange={handleChange}\n      onVisibleChange={setOverlayVisible}\n      overlayVisible={isOverlayVisible}\n      getContainer={getContainer}\n      tooltip={locale.buttonTitle}\n      testid=\"bi-hover-toolbar-alignment\"\n      role={PluginRoles.alignSelect}\n    />\n  );\n};\n"],"file":"alignmentSelect.js"}