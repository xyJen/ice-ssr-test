"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMobileHeading;

var React = _interopRequireWildcard(require("react"));

var _actions = require("../actions");

/* eslint-disable no-param-reassign */
const _createElement = /*#__PURE__*/React.createElement;
const MOBILE_TOOLBAR = {
  left: 'alignLeft',
  right: 'alignRight',
  center: 'alignCenter',
  justify: 'alignBoth'
};

function useDisabledAndClick(controller, type) {
  const handleClick = React.useCallback(() => controller.run('onAction', (0, _actions.setAlignment)(type)), [controller, type]);
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge;
  return {
    isDisabled,
    handleClick
  };
}

function createMobileHeading(locale) {
  return Object.keys(MOBILE_TOOLBAR).reduce((result, type) => {
    result[`${type}MobileBig`] = props => {
      const {
        controller,
        Wrapper,
        item
      } = props;
      const isActive = controller.query('getAlignment') === type; // eslint-disable-next-line react-hooks/rules-of-hooks

      const {
        isDisabled,
        handleClick
      } = useDisabledAndClick(controller, type);
      const icon = MOBILE_TOOLBAR[type];
      return /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "big",
        isFocused: isActive,
        isDisabled: isDisabled,
        icon: icon,
        onClick: handleClick
      });
    };

    result[`${type}Mobile`] = props => {
      const {
        controller,
        Wrapper,
        item
      } = props;
      const isActive = controller.query('getAlignment') === type; // eslint-disable-next-line react-hooks/rules-of-hooks

      const {
        isDisabled,
        handleClick
      } = useDisabledAndClick(controller, type);
      const icon = MOBILE_TOOLBAR[type];
      return /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "horiz",
        isActive: isActive,
        isDisabled: isDisabled,
        icon: icon,
        onClick: handleClick
      });
    };

    return result;
  }, {});
}
//# sourceMappingURL=createMobileButtons.js.map