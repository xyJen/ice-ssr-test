"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAlignmentButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _weToolbar = require("@ali/we-toolbar");

var _actions = require("../actions");

var _getTipsByType = require("../utils/getTipsByType");

const _createElement = /*#__PURE__*/React.createElement;
;

function createAlignmentButton(type) {
  return function AlignmentButton(props) {
    const {
      controller,
      locale,
      ...rest
    } = props;
    const isActive = controller.query('getAlignment') === type;
    const handleClick = React.useCallback(() => controller.run('onAction', (0, _actions.setAlignment)(type)), [controller]);
    const {
      isCollapsedAtEdge
    } = controller.value.selection;
    const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInHr') || controller.query('isSelectionInTaskList') || controller.query('isSelectionInListSymbol');
    let Button;

    switch (type) {
      case 'left':
        Button = _weToolbar.AlignLeft;
        break;

      case 'right':
        Button = _weToolbar.AlignRight;
        break;

      case 'center':
        Button = _weToolbar.AlignCenter;
        break;

      default:
        Button = _weToolbar.AlignJustify;
        break;
    }

    return /*#__PURE__*/_createElement(Button, (0, _extends2.default)({}, rest, {
      shortcutText: _getTipsByType.shortcut[type],
      testid: `bi-toolbar-align_${type}`,
      active: isActive,
      onClick: handleClick,
      disabled: isDisabled,
      role: `align${(0, _lodash.capitalize)(type)}`
    }));
  };
}
//# sourceMappingURL=createAlignmentButton.js.map