{"version":3,"sources":["../../../../../src/plugins/alignment/components/createAlignmentButton.tsx"],"names":["createAlignmentButton","type","AlignmentButton","props","controller","locale","rest","isActive","query","handleClick","React","useCallback","run","isCollapsedAtEdge","value","selection","isDisabled","Button","AlignLeft","AlignRight","AlignCenter","AlignJustify","shortcut"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAOA;;AACA;;uBAV4B,a;AAW5B;;AAOe,SAASA,qBAAT,CAA+BC,IAA/B,EAA6C;AAC1D,SAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAsD;AAC3D,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,MAAd;AAAsB,SAAGC;AAAzB,QAAkCH,KAAxC;AACA,UAAMI,QAAQ,GAAGH,UAAU,CAACI,KAAX,CAAiB,cAAjB,MAAqCP,IAAtD;AAEA,UAAMQ,WAAW,GAAGC,KAAK,CAACC,WAAN,CAAkB,MAAMP,UAAU,CAACQ,GAAX,CAAe,UAAf,EAA2B,2BAAaX,IAAb,CAA3B,CAAxB,EAAwE,CAACG,UAAD,CAAxE,CAApB;AAEA,UAAM;AAAES,MAAAA;AAAF,QAAwBT,UAAU,CAACU,KAAX,CAAiBC,SAA/C;AACA,UAAMC,UAAU,GAAGH,iBAAiB,IAC/BT,UAAU,CAACI,KAAX,CAAiB,iBAAjB,CADc,IAEdJ,UAAU,CAACI,KAAX,CAAiB,uBAAjB,CAFc,IAGdJ,UAAU,CAACI,KAAX,CAAiB,yBAAjB,CAHL;AAKA,QAAIS,MAAJ;;AACA,YAAQhB,IAAR;AACE,WAAK,MAAL;AACEgB,QAAAA,MAAM,GAAGC,oBAAT;AACA;;AACF,WAAK,OAAL;AACED,QAAAA,MAAM,GAAGE,qBAAT;AACA;;AACF,WAAK,QAAL;AACEF,QAAAA,MAAM,GAAGG,sBAAT;AACA;;AACF;AACEH,QAAAA,MAAM,GAAGI,uBAAT;AACA;AAZJ;;AAcA,wBACE,eAAC,MAAD,6BACMf,IADN;AAEE,MAAA,YAAY,EAAEgB,wBAASrB,IAAT,CAFhB;AAGE,MAAA,MAAM,EAAG,oBAAmBA,IAAK,EAHnC;AAIE,MAAA,MAAM,EAAEM,QAJV;AAKE,MAAA,OAAO,EAAEE,WALX;AAME,MAAA,QAAQ,EAAEO,UANZ;AAOE,MAAA,IAAI,EAAG,QAAO,wBAAWf,IAAX,CAAiB;AAPjC,OADF;AAWD,GAtCD;AAuCD","sourcesContent":["import * as React from 'react';\nimport { capitalize } from 'lodash-es';\nimport { Controller } from '@ali/4ever-cangjie';\nimport {\n  AlignLeft,\n  AlignRight,\n  AlignCenter,\n  AlignJustify,\n  IconButtonPropsOmit,\n} from '@ali/we-toolbar';\nimport { setAlignment } from '../actions';\nimport { shortcut } from '../utils/getTipsByType';\n;\n\nexport interface AlignmentButtonProps {\n  controller: Controller;\n  locale: Record<string, string>;\n}\n\nexport default function createAlignmentButton(type: string) {\n  return function AlignmentButton(props: AlignmentButtonProps) {\n    const { controller, locale, ...rest } = props;\n    const isActive = controller.query('getAlignment') === type;\n\n    const handleClick = React.useCallback(() => controller.run('onAction', setAlignment(type)), [controller]);\n\n    const { isCollapsedAtEdge } = controller.value.selection;\n    const isDisabled = isCollapsedAtEdge\n      || controller.query('isSelectionInHr')\n      || controller.query('isSelectionInTaskList')\n      || controller.query('isSelectionInListSymbol');\n\n    let Button: React.FC<IconButtonPropsOmit>;\n    switch (type) {\n      case 'left':\n        Button = AlignLeft;\n        break;\n      case 'right':\n        Button = AlignRight;\n        break;\n      case 'center':\n        Button = AlignCenter;\n        break;\n      default:\n        Button = AlignJustify;\n        break;\n    }\n    return (\n      <Button\n        {...rest}\n        shortcutText={shortcut[type]}\n        testid={`bi-toolbar-align_${type}`}\n        active={isActive}\n        onClick={handleClick}\n        disabled={isDisabled}\n        role={`align${capitalize(type)}`}\n      />\n    );\n  };\n}\n"],"file":"createAlignmentButton.js"}