"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _lodash = require("lodash");

var _getAlignment = _interopRequireDefault(require("../queries/getAlignment"));

var _actions = require("../actions");

var _hotkeyTips = require("../utils/hotkeyTips");

const _createElement = /*#__PURE__*/React.createElement;

function getActionList(locale) {
  const actionList = [{
    key: 'left',
    text: locale.dropdownLeft,
    shortcut: _hotkeyTips.ALIGN_LEFT_HOT_KEY
  }, {
    key: 'center',
    text: locale.dropdownCenter,
    shortcut: _hotkeyTips.ALIGN_CENTER_HOT_KEY
  }, {
    key: 'right',
    text: locale.dropdownRight,
    shortcut: _hotkeyTips.ALIGN_RIGHT_HOT_KEY
  }, {
    key: 'justify',
    text: locale.dropdownJustify,
    shortcut: _hotkeyTips.ALIGN_JUSTIFY_HOT_KEY
  }];
  return actionList;
}

const getAlimentFromProps = controller => (0, _getAlignment.default)(controller) || 'left';

const isDisabled = controller => {
  const {
    isCollapsedAtEdge
  } = controller.value.selection;

  if (isCollapsedAtEdge) {
    return false;
  }

  return !!controller.query('isSelectionInHr');
};

const renderSubMenu = props => {
  const {
    controller,
    locale,
    menuItem
  } = props;
  const alignment = getAlimentFromProps(controller);
  const actionList = getActionList(locale);

  const handleClick = key => {
    const alignType = key.split('_')[1];
    controller.run('onAction', (0, _actions.setAlignment)(alignType));
  };

  const aligns = actionList.map(align => {
    const key = `alignment_${align.key}`;
    return /*#__PURE__*/_createElement(_weDesign.MenuItem, {
      selected: alignment === align.key,
      menuKey: key,
      key: key,
      onClick: handleClick,
      extra: align.shortcut,
      role: `align${(0, _lodash.capitalize)(align.key)}`
    }, align.text);
  });
  return /*#__PURE__*/_createElement(_weDesign.SubMenu, (0, _extends2.default)({}, menuItem, {
    title: menuItem.title || '',
    disabled: isDisabled(controller)
  }), aligns);
};

var _default = renderSubMenu;
exports.default = _default;
//# sourceMappingURL=getAlignmentMenuList.js.map