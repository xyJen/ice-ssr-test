"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AlignmentButton;

var React = _interopRequireWildcard(require("react"));

var _weToolbar = require("@ali/we-toolbar");

var _everBamboo = require("@ali/4ever-bamboo");

var _actions = require("../actions");

var _getTipsByType = require("../utils/getTipsByType");

var _everComponent = require("@ali/4ever-component");

const _createElement = /*#__PURE__*/React.createElement;
;
const HorizontalAlignSelect = /*#__PURE__*/React.memo(_weToolbar.HorizontalAlignSelect);
const SUPPORT_ALIGNMENT = {
  left: true,
  center: true,
  right: true,
  justify: true
};

function AlignmentButton(props) {
  const {
    controller,
    locale,
    size,
    toolbarMode
  } = props;
  const alignment = controller.query('getAlignment');
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInListSymbol');
  const handleChange = React.useCallback(value => {
    controller.run('onAction', (0, _actions.setAlignment)(value));
  }, [controller]);
  const scrollableContent = (0, _everBamboo.useScrollableContent)();
  const getContainer = React.useCallback(() => {
    const defaultContainer = window.document.body;
    return scrollableContent || defaultContainer;
  }, [scrollableContent, toolbarMode]);
  return /*#__PURE__*/_createElement(HorizontalAlignSelect, {
    size: size,
    onChange: handleChange,
    value: SUPPORT_ALIGNMENT[alignment] ? alignment : 'left',
    testid: "bi-toolbar-align",
    disabled: isDisabled,
    titles: _getTipsByType.shortcut,
    tooltip: locale.buttonTitle,
    role: _everBamboo.PluginRoles.alignSelect,
    getContainer: toolbarMode === _everComponent.ToolbarMode.inline ? getContainer : undefined
  });
}
//# sourceMappingURL=alignmentButton.js.map