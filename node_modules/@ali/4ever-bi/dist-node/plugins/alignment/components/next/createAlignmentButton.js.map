{"version":3,"sources":["../../../../../../src/plugins/alignment/components/next/createAlignmentButton.tsx"],"names":["createAlignmentButton","type","titleKey","tooltipKey","AlignButton","props","controller","disabled","locale","title","tooltip","tooltipProp","rest","isActive","query","handleClick","React","useCallback","run","isCollapsedAtEdge","value","selection","isDisabled","Button","AlignLeftButton","AlignRightButton","AlignCenterButton","AlignJustifyButton","useMemo","shortCut","shortcut","description"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAQA;;AACA;;uBAX4B,a;AAY5B;;AAOe,SAASA,qBAAT,CAA+BC,IAA/B,EAA8EC,QAA9E,EAAiGC,UAAjG,EAAsH;AAEnI,QAAMC,WAA2C,GAAIC,KAAD,IAAW;AAC7D,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,QAAd;AAAwBC,MAAAA,MAAxB;AAAgCC,MAAAA,KAAhC;AAAuCC,MAAAA,OAAO,EAAEC,WAAhD;AAA6D,SAAGC;AAAhE,QAAyEP,KAA/E;AACA,UAAMQ,QAAQ,GAAGP,UAAU,CAACQ,KAAX,CAAiB,cAAjB,MAAqCb,IAAtD;AAEA,UAAMc,WAAW,GAAGC,KAAK,CAACC,WAAN,CAAkB,MAAMX,UAAU,CAACY,GAAX,CAAe,UAAf,EAA2B,2BAAajB,IAAb,CAA3B,CAAxB,EAAwE,CAACK,UAAD,CAAxE,CAApB;AAEA,UAAM;AAAEa,MAAAA;AAAF,QAAwBb,UAAU,CAACc,KAAX,CAAiBC,SAA/C;AAEA,UAAMC,UAAU,GAAGf,QAAQ,IAAIY,iBAAZ,IACdb,UAAU,CAACQ,KAAX,CAAiB,iBAAjB,CADc,IAEdR,UAAU,CAACQ,KAAX,CAAiB,uBAAjB,CAFc,IAGdR,UAAU,CAACQ,KAAX,CAAiB,yBAAjB,CAHL;AAKA,QAAIS,MAAJ;;AACA,YAAQtB,IAAR;AACE,WAAK,MAAL;AACEsB,QAAAA,MAAM,GAAGC,8BAAT;AACA;;AACF,WAAK,OAAL;AACED,QAAAA,MAAM,GAAGE,+BAAT;AACA;;AACF,WAAK,QAAL;AACEF,QAAAA,MAAM,GAAGG,gCAAT;AACA;;AACF;AACEH,QAAAA,MAAM,GAAGI,iCAAT;AACA;AAZJ;;AAeA,UAAMjB,OAAO,GAAGM,KAAK,CAACY,OAAN,CAAc,OAAO;AACnCnB,MAAAA,KAAK,EAAEA,KAAK,IAAKP,QAAQ,IAAIM,MAAZ,IAAsBA,MAAM,CAACN,QAAD,CADV;AAEnC2B,MAAAA,QAAQ,EAAEC,wBAAS7B,IAAT,CAFyB;AAGnC8B,MAAAA,WAAW,EAAE5B,UAAU,IAAIK,MAAd,IAAwBA,MAAM,CAACL,UAAD,CAHR;AAInC,SAAGQ;AAJgC,KAAP,CAAd,EAKZ,CAACV,IAAD,EAAOQ,KAAP,CALY,CAAhB;AAOA,wBACE,eAAC,MAAD;AACE,MAAA,MAAM,EAAG,oBAAmBR,IAAK,EADnC;AAEE,MAAA,MAAM,EAAEY,QAFV;AAGE,MAAA,OAAO,EAAEE,WAHX;AAIE,MAAA,QAAQ,EAAEO,UAJZ;AAKE,MAAA,IAAI,EAAG,QAAO,wBAAWrB,IAAX,CAAiB,EALjC;AAME,MAAA,KAAK,EAAEQ,KAAK,IAAKP,QAAQ,IAAIM,MAAZ,IAAsBA,MAAM,CAACN,QAAD,CAN/C;AAOE,MAAA,OAAO,EAAEQ;AAPX,OAQME,IARN,EADF;AAYD,GAhDD;;AAkDA,SAAOR,WAAP;AAED","sourcesContent":["import * as React from 'react';\nimport { capitalize } from 'lodash-es';\nimport { Controller } from '@ali/4ever-cangjie';\nimport {\n  AlignLeftButton,\n  AlignRightButton,\n  AlignCenterButton,\n  AlignJustifyButton,\n  IIconButtonProps,\n  IToolbarButtonConfig,\n} from '@ali/4ever-component';\nimport { setAlignment } from '../../actions';\nimport { shortcut } from '../../utils/getTipsByType';\n;\n\nexport interface AlignmentButtonProps extends IToolbarButtonConfig {\n  controller: Controller,\n  locale?: Record<string, string>;\n}\n\nexport default function createAlignmentButton(type: 'left' | 'right' | 'center' | 'justify', titleKey?: string, tooltipKey?: string) {\n\n  const AlignButton: React.FC<AlignmentButtonProps> = (props) => {\n    const { controller, disabled, locale, title, tooltip: tooltipProp, ...rest } = props;\n    const isActive = controller.query('getAlignment') === type;\n\n    const handleClick = React.useCallback(() => controller.run('onAction', setAlignment(type)), [controller]);\n\n    const { isCollapsedAtEdge } = controller.value.selection;\n\n    const isDisabled = disabled || isCollapsedAtEdge\n      || controller.query('isSelectionInHr')\n      || controller.query('isSelectionInTaskList')\n      || controller.query('isSelectionInListSymbol');\n\n    let Button: React.FC<IIconButtonProps>;\n    switch (type) {\n      case 'left':\n        Button = AlignLeftButton;\n        break;\n      case 'right':\n        Button = AlignRightButton;\n        break;\n      case 'center':\n        Button = AlignCenterButton;\n        break;\n      default:\n        Button = AlignJustifyButton;\n        break;\n    }\n\n    const tooltip = React.useMemo(() => ({\n      title: title || (titleKey && locale && locale[titleKey]),\n      shortCut: shortcut[type],\n      description: tooltipKey && locale && locale[tooltipKey],\n      ...tooltipProp,\n    }), [type, title]);\n\n    return (\n      <Button\n        testid={`bi-toolbar-align_${type}`}\n        active={isActive}\n        onClick={handleClick}\n        disabled={isDisabled}\n        role={`align${capitalize(type)}`}\n        title={title || (titleKey && locale && locale[titleKey])}\n        tooltip={tooltip}\n        {...rest}\n      />\n    );\n  };\n\n  return AlignButton;\n\n}\n\n"],"file":"createAlignmentButton.js"}