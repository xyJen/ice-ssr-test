"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _lodash = require("lodash");

var _weDesign = require("@ali/we-design");

var _actions = require("../actions");

const _createElement = /*#__PURE__*/React.createElement;
const {
  useState,
  useEffect,
  useRef
} = React;
const MAX_WORD_COUNT = 100;

const Wrapper = /*#__PURE__*/_styledComponents.default.div(["box-sizing:border-box;height:100%;display:flex;flex-direction:column;justify-content:space-between;color:rgba(17,31,44,0.72);"]); // 允许换行 和 多空格


const Content = /*#__PURE__*/_styledComponents.default.div(["width:100%;color:", ";word-break:break-all;overflow-x:hidden;overflow-y:scroll;white-space:pre-wrap;"], p => p.isFailed ? _weDesign.theme.colorRed1 : 'inherit');

const ContentStatus = /*#__PURE__*/_styledComponents.default.div(["width:100%;color:#FB602D;"]);

const ContentWrapper = /*#__PURE__*/_styledComponents.default.div(["flex:auto;overflow:auto;display:flex;justify-content:space-between;flex-direction:column;max-height:379px;width:100%;border:1px solid ", ";border-radius:8px;padding:10px;margin:10px 0;font-size:13px;"], p => p.isFailed ? '#FB602D' : 'rgba(126, 134, 142, 0.24)');

const ButtonWrapper = /*#__PURE__*/_styledComponents.default.div(["display:flex;flex-direction:row;margin-bottom:50px;margin-top:6px;"]);

const SelectionWrapper = /*#__PURE__*/_styledComponents.default.div(["font-size:", ";display:flex;align-items:center;flex-direction:row;flex-shrink:0;"], _weDesign.theme.fontSizeSmall);

const Selection = /*#__PURE__*/_styledComponents.default.div(["margin-right:16px;height:14px;line-height:14px;font-size:14px;"]);

const InnerWrapper = /*#__PURE__*/_styledComponents.default.div(["display:flex;flex-direction:column;height:100%;"]);

const Footer = /*#__PURE__*/_styledComponents.default.div(["color:", ";font-size:", ";text-align:center;margin-bottom:16px;"], _weDesign.theme.colorText1, _weDesign.theme.fontSizeSmall);

const PlaceholderWrapper = /*#__PURE__*/_styledComponents.default.span(["color:rgba(23,26,29,0.24);font-size:14px;line-height:18px;"]);

const list = [{
  title: '英文',
  key: 'en'
}, {
  title: '中文',
  key: 'zh'
}];

var _ref3 = /*#__PURE__*/_createElement(_weDesign.ExclamationCircleBetaNormal, null);

var _ref4 = /*#__PURE__*/_createElement(_weDesign.ExclamationCircleBetaNormal, null);

const Sidebar = props => {
  const {
    controller,
    getTranslation,
    defaultOutputLanguage,
    outputLanguageList,
    locale = {},
    maxWordCount,
    wrapperStyle
  } = props;
  const {
    value
  } = controller;
  const [input, setInput] = useState();
  const [failedText, setFailedText] = useState();
  const [outputLanguage, setOutputLanguage] = useState(defaultOutputLanguage);
  const [isExceedText, setExceedText] = useState(null);
  let text = value.fragment && value.fragment.text;
  const inputLanguage = undefined;

  const handleChange = targetLan => {
    setOutputLanguage(targetLan);
    getTranslation({
      inputLanguage,
      outputLanguage: targetLan,
      input: text
    }).then(res => {
      setFailedText(null);
      setInput(res);
    }).catch(() => {
      // handle exception
      setFailedText(locale.failed || '翻译失败, 请重试.');
    });
  }; // add throttled to aovid frequent uses input


  const throttled = useRef((0, _lodash.throttle)((inputText, outputLan) => {
    if (getTranslation) {
      getTranslation({
        inputLanguage,
        outputLanguage: outputLan,
        input: inputText
      }).then(res => {
        setFailedText(null);
        setInput(res);
      }).catch(() => {
        // handle exception
        setFailedText(locale.failed || '翻译失败, 请重试.');
      });
    }
  }, 500));
  useEffect(() => {
    // add async translation service here
    if (text) {
      // cut the input with limits
      if (text.length > maxWordCount) {
        setExceedText(locale.exceedMaxLength || '超过最大翻译字数');
      } else {
        setExceedText('');
      }

      text = text.substring(0, maxWordCount);
      throttled.current(text, outputLanguage);
    }
  }, [text]);
  const disableReplaceText = !!controller.value.selection.isCollapsed || !input || failedText;
  const disableInsertText = !input || failedText;

  var _ref = /*#__PURE__*/_createElement(Content, {
    isFailed: true
  }, _ref3, failedText);

  var _ref2 = /*#__PURE__*/_createElement(ContentStatus, null, _ref4, isExceedText);

  const renderContent = () => {
    const content = input ? input : /*#__PURE__*/_createElement(PlaceholderWrapper, null, locale.placeholder || '划词，将在面板中显示翻译结果');

    if (failedText) {
      return _ref;
    } else if (isExceedText) {
      return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(Content, null, content), _ref2);
    } else {
      return /*#__PURE__*/_createElement(Content, null, content);
    }
  };

  return /*#__PURE__*/_createElement(Wrapper, {
    "data-testid": "translate-panel",
    style: wrapperStyle
  }, /*#__PURE__*/_createElement(InnerWrapper, null, /*#__PURE__*/_createElement(SelectionWrapper, null, /*#__PURE__*/_createElement(Selection, null, locale.translateTo, ":"), /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(_weDesign.Select, {
    value: outputLanguage,
    onChange: handleChange
  }, outputLanguageList.map(l => /*#__PURE__*/_createElement(_weDesign.SelectOption, {
    value: l.key,
    key: l.key
  }, /*#__PURE__*/_createElement("span", {
    style: {
      color: 'rgba(17, 31, 44, 0.72)'
    }
  }, l.title)))))), /*#__PURE__*/_createElement(ContentWrapper, null, renderContent()), /*#__PURE__*/_createElement(ButtonWrapper, null, /*#__PURE__*/_createElement(_weDesign.Button, {
    type: "primary",
    onClick: () => controller.run('onAction', (0, _actions.replaceWithTranslatedText)(input)),
    disabled: disableReplaceText,
    testid: "translate-replace"
  }, locale.replace), /*#__PURE__*/_createElement(_weDesign.Button, {
    type: "normal",
    testid: "translate-insert",
    disabled: disableInsertText,
    onClick: () => controller.run('onAction', (0, _actions.insertTranslatedText)(input)),
    style: {
      marginLeft: 8
    }
  }, locale.insert))), /*#__PURE__*/_createElement(Footer, null, locale.footer));
};

Sidebar.defaultProps = {
  getTranslation: v => v,
  // 翻译接口
  defaultOutputLanguage: 'en',
  // 默认输出语言
  outputLanguageList: list,
  // 可翻译的语言列表
  maxWordCount: MAX_WORD_COUNT // 最大字数显示

};
var _default = Sidebar;
exports.default = _default;
//# sourceMappingURL=sidebar.js.map