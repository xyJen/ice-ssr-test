{"version":3,"sources":["../../../../../../src/plugins/translate/components/next/newTranslateButton.tsx"],"names":["TranslationItemType","TranslationButton","props","config","locale","handleChange","React","useCallback","value","onClickMenuItem","menuItems","useMemo","key","wordTranslation","title","docTranslation","buttonTitle","PluginRoles","lineHeightSelect"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;uBAF4B,a;IASvBA,mB;;WAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAUL,MAAMC,iBAAiB,GAAIC,KAAD,IAAmC;AAC3D,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAnB;AACA,QAAM;AAAEE,IAAAA,MAAM,GAAG;AAAX,MAAkBD,MAAxB;;AAEA,QAAME,YAAY,GAAGC,eAAMC,WAAN,CAAmBC,KAAD,IAAmB;AACxD,QAAIL,MAAM,CAACM,eAAX,EAA4B;AAC1BN,MAAAA,MAAM,CAACM,eAAP,CAAuBD,KAAvB;AACD;AACF,GAJoB,EAIlB,CAACL,MAAD,CAJkB,CAArB;;AAMA,QAAMO,SAAS,GAAGJ,eAAMK,OAAN,CAAc,MAAM;AACpC,WAAO,CAAC;AACNC,MAAAA,GAAG,EAAEZ,mBAAmB,CAACa,eADnB;AAENC,MAAAA,KAAK,EAAEV,MAAM,CAACS,eAAP,IAA0B;AAF3B,KAAD,EAGJ;AACDD,MAAAA,GAAG,EAAEZ,mBAAmB,CAACe,cADxB;AAEDD,MAAAA,KAAK,EAAEV,MAAM,CAACW,cAAP,IAAyB;AAF/B,KAHI,CAAP;AAOD,GARiB,EAQf,CAACX,MAAM,CAACW,cAAR,EAAwBX,MAAM,CAACS,eAA/B,CARe,CAAlB;;AAUA,sBACE,eAAC,gCAAD;AACE,IAAA,MAAM,EAAC,kBADT;AAEE,IAAA,QAAQ,EAAER,YAFZ;AAGE,IAAA,OAAO,EAAED,MAAM,EAAEY,WAHnB;AAIE,IAAA,IAAI,EAAEC,wBAAYC,gBAJpB;AAKE,IAAA,KAAK,EAAEd,MAAM,EAAEU,KALjB;AAME,IAAA,SAAS,EAAEJ;AANb,IADF;AAUD,CA9BD;;eAgCeT,iB","sourcesContent":["import React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { TranslationSelect, IToolbarButtonConfig } from '@ali/4ever-component';\nimport { ITranslateConfig } from '../../types';\n\nexport interface ISideBarTriggerProps {\n  open?: Function;\n}\n\nenum TranslationItemType {\n  wordTranslation = 'wordTranslation',\n  docTranslation = 'docTranslation',\n}\n\nexport interface TranslationButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  config: ITranslateConfig;\n}\n\nconst TranslationButton = (props: TranslationButtonProps) => {\n  const { config } = props;\n  const { locale = {} } = config;\n\n  const handleChange = React.useCallback((value: string) => {\n    if (config.onClickMenuItem) {\n      config.onClickMenuItem(value);\n    }\n  }, [config]);\n\n  const menuItems = React.useMemo(() => {\n    return [{\n      key: TranslationItemType.wordTranslation,\n      title: locale.wordTranslation || '',\n    }, {\n      key: TranslationItemType.docTranslation,\n      title: locale.docTranslation || '',\n    }];\n  }, [locale.docTranslation, locale.wordTranslation]);\n\n  return (\n    <TranslationSelect\n      testid=\"translate_button\"\n      onChange={handleChange}\n      tooltip={locale?.buttonTitle}\n      role={PluginRoles.lineHeightSelect}\n      title={locale?.title}\n      menuItems={menuItems}\n    />\n  );\n};\n\nexport default TranslationButton;\n"],"file":"newTranslateButton.js"}