"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isHotkey = require("is-hotkey");

var _toggleQuote = _interopRequireDefault(require("../commands/toggleQuote"));

var _everUtils = require("@ali/4ever-utils");

const isBackspaceHotKey = (0, _isHotkey.isKeyHotkey)('backspace');
const isEnterHotKey = (0, _isHotkey.isKeyHotkey)('enter');

var _default = (event, editor, next) => {
  const {
    value
  } = editor;
  const {
    startBlock,
    selection,
    document
  } = value; // 在 block 顶部 delete，移除引用状态

  const currentParagraph = (0, _everUtils.getClosestParagraph)(value);
  const isAtQuoteBlockStart = currentParagraph && currentParagraph.data.blockquote && selection.isCollapsed && selection.anchor.isAtStartOfNode(currentParagraph);
  const previousBlock = document.getPreviousBlock(selection.getEnd(document).key);

  if (isAtQuoteBlockStart && isBackspaceHotKey(event)) {
    event.preventDefault();

    if (previousBlock && previousBlock.data.blockquote) {
      // 当前一个 block 也是引用时，执行 next 回退一行
      return (0, _toggleQuote.default)(editor, next);
    }

    return (0, _toggleQuote.default)(editor);
  } // 空 blockquote ，回车删除引用


  const isEmptyBlockQuote = currentParagraph?.data.blockquote && !startBlock.text && startBlock.nodes.length === 1 && startBlock.getFirstNode().isText();

  if (isEmptyBlockQuote && isEnterHotKey(event)) {
    event.preventDefault();
    return (0, _toggleQuote.default)(editor);
  }

  return next();
};

exports.default = _default;
//# sourceMappingURL=onKeyDown.js.map