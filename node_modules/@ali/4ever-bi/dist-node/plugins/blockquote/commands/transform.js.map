{"version":3,"sources":["../../../../../src/plugins/blockquote/commands/transform.ts"],"names":["paragraph2Blockquote","controller","block","command","Commands","setNodeByKey","key","type","data","moveToEndOfNode","heading2Blockquote","Paragraph","TYPE","code2Blockquote","lineArr","text","split","removeNodeByKey","withoutNormalizing","forEach","line","paragraph","create","nodes","Text","insertBlock","transform","blocks","query","Array","isArray","calloutPr","list","focus"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AADA;;AAGA,MAAMA,oBAAoB,GAAG,CAACC,UAAD,EAAyBC,KAAzB,KAA0C;AACrED,EAAAA,UAAU,CACPE,OADH,CACWC,sBAASC,YADpB,EACkCH,KAAK,CAACI,GADxC,EAC6C;AACzCC,IAAAA,IAAI,EAAEL,KAAK,CAACK,IAD6B;AAEzCC,IAAAA,IAAI,EAAE;AAFmC,GAD7C,EAKGL,OALH,CAKWC,sBAASK,eALpB,EAKqCP,KALrC;AAMA,4BAAYD,UAAZ;AACD,CARD;;AAUA,MAAMS,kBAAkB,GAAG,CAACT,UAAD,EAAyBC,KAAzB,KAAyC;AAClED,EAAAA,UAAU,CACPE,OADH,CACWC,sBAASC,YADpB,EACkCH,KAAK,CAACI,GADxC,EAC6C;AACzCC,IAAAA,IAAI,EAAEI,kBAAUC,IADyB;AAEzCJ,IAAAA,IAAI,EAAE;AAFmC,GAD7C,EAKGL,OALH,CAKWC,sBAASK,eALpB,EAKqCP,KALrC;AAOAD,EAAAA,UAAU,CAACE,OAAX,CAAmB,YAAnB,EAAiCQ,kBAAUC,IAA3C;AACA,4BAAYX,UAAZ;AACD,CAVD;;AAYA,MAAMY,eAAe,GAAG,CAACZ,UAAD,EAAyBC,KAAzB,KAAyC;AAC/D,QAAMY,OAAO,GAAGZ,KAAK,CAACa,IAAN,CAAWC,KAAX,CAAiB,IAAjB,CAAhB;AACAf,EAAAA,UAAU,CAACE,OAAX,CAAmBC,sBAASa,eAA5B,EAA6Cf,KAAK,CAACI,GAAnD;AAEAL,EAAAA,UAAU,CAACiB,kBAAX,CAA8B,MAAM;AAClCJ,IAAAA,OAAO,CAACK,OAAR,CAAiBC,IAAD,IAAU;AACxB,YAAMC,SAAS,GAAGV,kBAAUW,MAAV,CAAiB;AACjCC,QAAAA,KAAK,EAAE,CAACC,kBAAKF,MAAL,CAAYF,IAAZ,CAAD;AAD0B,OAAjB,CAAlB;;AAIAnB,MAAAA,UAAU,CACPE,OADH,CACWC,sBAASqB,WADpB,EACiCJ,SADjC;AAEA,gCAAYpB,UAAZ;AACD,KARD;AASD,GAVD;AAYA,SAAOA,UAAP;AACD,CAjBD;;AAmBe,SAASyB,SAAT,CAAmBzB,UAAnB,EAA2C;AACxD,QAAM0B,MAAM,GAAG1B,UAAU,CAAC2B,KAAX,CAAiB,mBAAjB,CAAf;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACzB1B,IAAAA,UAAU,CAACiB,kBAAX,CAA8B,MAAM;AAClCS,MAAAA,MAAM,CAACR,OAAP,CAAgBjB,KAAD,IAAW;AACxB,YAAIA,KAAK,CAACK,IAAN,KAAe,MAAnB,EAA2B;AACzB,iBAAOM,eAAe,CAACZ,UAAD,EAAaC,KAAb,CAAtB;AACD,SAFD,MAEO,IAAIA,KAAK,CAACM,IAAN,CAAWuB,SAAf,EAA0B;AAC/B,iBAAO/B,oBAAoB,CAACC,UAAD,EAAaC,KAAb,CAA3B;AACD,SAFM,MAEA,IAAIA,KAAK,CAACM,IAAN,CAAWwB,IAAf,EAAqB;AAC1B,iBAAOhC,oBAAoB,CAACC,UAAD,EAAaC,KAAb,CAA3B;AACD,SAFM,MAEA,IAAIA,KAAK,CAACK,IAAN,KAAe,WAAnB,EAAgC;AACrC,iBAAOG,kBAAkB,CAACT,UAAD,EAAaC,KAAb,CAAzB;AACD;;AACD,kCAAYD,UAAZ;AACD,OAXD;AAYD,KAbD;AAcD;;AACD,SAAOA,UAAU,CAACE,OAAX,CAAmBC,sBAAS6B,KAA5B,CAAP;AACD","sourcesContent":["import { Controller, Commands, Node, Text, Block } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-mo';\n;\nimport toogleQuote from './toggleQuote';\n\nconst paragraph2Blockquote = (controller: Controller, block: Block) => {\n  controller\n    .command(Commands.setNodeByKey, block.key, {\n      type: block.type,\n      data: {},\n    })\n    .command(Commands.moveToEndOfNode, block);\n  toogleQuote(controller);\n};\n\nconst heading2Blockquote = (controller: Controller, block: Node) => {\n  controller\n    .command(Commands.setNodeByKey, block.key, {\n      type: Paragraph.TYPE,\n      data: {},\n    })\n    .command(Commands.moveToEndOfNode, block);\n\n  controller.command('setHeading', Paragraph.TYPE);\n  toogleQuote(controller);\n};\n\nconst code2Blockquote = (controller: Controller, block: Node) => {\n  const lineArr = block.text.split('\\n');\n  controller.command(Commands.removeNodeByKey, block.key);\n\n  controller.withoutNormalizing(() => {\n    lineArr.forEach((line) => {\n      const paragraph = Paragraph.create({\n        nodes: [Text.create(line)],\n      });\n\n      controller\n        .command(Commands.insertBlock, paragraph);\n      toogleQuote(controller);\n    });\n  });\n\n  return controller;\n};\n\nexport default function transform(controller: Controller) {\n  const blocks = controller.query('getTransformNodes');\n  if (Array.isArray(blocks)) {\n    controller.withoutNormalizing(() => {\n      blocks.forEach((block) => {\n        if (block.type === 'code') {\n          return code2Blockquote(controller, block);\n        } else if (block.data.calloutPr) {\n          return paragraph2Blockquote(controller, block);\n        } else if (block.data.list) {\n          return paragraph2Blockquote(controller, block);\n        } else if (block.type !== 'paragraph') {\n          return heading2Blockquote(controller, block);\n        }\n        toogleQuote(controller);\n      });\n    });\n  }\n  return controller.command(Commands.focus);\n}\n"],"file":"transform.js"}