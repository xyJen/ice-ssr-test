"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transform;

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _toggleQuote = _interopRequireDefault(require("./toggleQuote"));

;

const paragraph2Blockquote = (controller, block) => {
  controller.command(_everCangjie.Commands.setNodeByKey, block.key, {
    type: block.type,
    data: {}
  }).command(_everCangjie.Commands.moveToEndOfNode, block);
  (0, _toggleQuote.default)(controller);
};

const heading2Blockquote = (controller, block) => {
  controller.command(_everCangjie.Commands.setNodeByKey, block.key, {
    type: _everMo.Paragraph.TYPE,
    data: {}
  }).command(_everCangjie.Commands.moveToEndOfNode, block);
  controller.command('setHeading', _everMo.Paragraph.TYPE);
  (0, _toggleQuote.default)(controller);
};

const code2Blockquote = (controller, block) => {
  const lineArr = block.text.split('\n');
  controller.command(_everCangjie.Commands.removeNodeByKey, block.key);
  controller.withoutNormalizing(() => {
    lineArr.forEach(line => {
      const paragraph = _everMo.Paragraph.create({
        nodes: [_everCangjie.Text.create(line)]
      });

      controller.command(_everCangjie.Commands.insertBlock, paragraph);
      (0, _toggleQuote.default)(controller);
    });
  });
  return controller;
};

function transform(controller) {
  const blocks = controller.query('getTransformNodes');

  if (Array.isArray(blocks)) {
    controller.withoutNormalizing(() => {
      blocks.forEach(block => {
        if (block.type === 'code') {
          return code2Blockquote(controller, block);
        } else if (block.data.calloutPr) {
          return paragraph2Blockquote(controller, block);
        } else if (block.data.list) {
          return paragraph2Blockquote(controller, block);
        } else if (block.type !== 'paragraph') {
          return heading2Blockquote(controller, block);
        }

        (0, _toggleQuote.default)(controller);
      });
    });
  }

  return controller.command(_everCangjie.Commands.focus);
}
//# sourceMappingURL=transform.js.map