{"version":3,"sources":["../../../../src/plugins/video/createRenderNode.tsx"],"names":["createRenderNode","config","videoConfig","video","locale","videoLocaleConfig","downloadFile","transformVideoURL","onMediaLoadSuccess","onMediaLoadError","setTempPosterUrl","renderVideoMask","allowDownload","allowFullscreen","embed","props","controller","next","node","data","type","src"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;uBAA4B,a;;AAGb,SAASA,gBAAT,CAA0BC,MAA1B,EAAkD;AAC/D,QAAMC,WAAW,GAAGD,MAAM,CAACE,KAAP,IAAgB,EAApC;AACA,QAAM;AACJC,IAAAA,MAAM,EAAEC,iBAAiB,GAAG,EADxB;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,iBAHI;AAIJC,IAAAA,kBAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA,gBANI;AAOJC,IAAAA,eAPI;AAQJC,IAAAA,aARI;AASJC,IAAAA;AATI,MAUFX,WAVJ;AAYA,SAAO;AACLY,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAQC,UAAR,EAAoBC,IAApB,KAA6B;AAClC,YAAM;AAAEC,QAAAA;AAAF,UAAWH,KAAjB;;AACA,UAAIG,IAAI,CAACC,IAAL,CAAUC,IAAV,KAAmB,OAAnB,IAA8BF,IAAI,CAACC,IAAL,CAAUE,GAA5C,EAAiD;AAC/C,4BACE,eAAC,cAAD,6BACMN,KADN;AAEE,UAAA,UAAU,EAAEC,UAFd;AAGE,UAAA,UAAU,EAAEV,YAHd;AAIE,UAAA,MAAM,EAAED,iBAJV;AAKE,UAAA,iBAAiB,EAAEE,iBALrB;AAME,UAAA,kBAAkB,EAAEC,kBANtB;AAOE,UAAA,gBAAgB,EAAEC,gBAPpB;AAQE,UAAA,gBAAgB,EAAEC,gBARpB;AASE,UAAA,eAAe,EAAEC,eATnB;AAUE,UAAA,aAAa,EAAEC,aAVjB;AAWE,UAAA,eAAe,EAAEC;AAXnB,WADF;AAeD;;AACD,aAAOI,IAAI,EAAX;AACD;AArBI,GAAP;AAuBD","sourcesContent":["import * as React from 'react';\nimport Video from './components/video';\nimport { BiPluginConfig } from '../../types';\n\nexport default function createRenderNode(config: BiPluginConfig) {\n  const videoConfig = config.video || {};\n  const {\n    locale: videoLocaleConfig = {},\n    downloadFile,\n    transformVideoURL,\n    onMediaLoadSuccess,\n    onMediaLoadError,\n    setTempPosterUrl,\n    renderVideoMask,\n    allowDownload,\n    allowFullscreen,\n  } = videoConfig;\n\n  return {\n    embed: (props, controller, next) => {\n      const { node } = props;\n      if (node.data.type === 'video' && node.data.src) {\n        return (\n          <Video\n            {...props}\n            controller={controller}\n            onDownload={downloadFile}\n            locale={videoLocaleConfig}\n            transformVideoURL={transformVideoURL}\n            onMediaLoadSuccess={onMediaLoadSuccess}\n            onMediaLoadError={onMediaLoadError}\n            setTempPosterUrl={setTempPosterUrl}\n            renderVideoMask={renderVideoMask}\n            allowDownload={allowDownload}\n            allowFullscreen={allowFullscreen}\n          />\n        );\n      }\n      return next();\n    },\n  };\n}\n"],"file":"createRenderNode.js"}