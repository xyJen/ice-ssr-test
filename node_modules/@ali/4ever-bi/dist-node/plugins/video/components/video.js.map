{"version":3,"sources":["../../../../../src/plugins/video/components/video.tsx"],"names":["VideoPlayer","EmbedCard","EmbedPlugin","Video","PureComponent","constructor","props","ref","React","createRef","videoRef","getNodeData","node","data","onSwitchViewType","viewType","controller","prevViewType","run","onDownloadFile","src","name","type","size","onDownload","onMediaLoadError","allowDownload","state","componentDidMount","then","res","setState","renderCard","isSelected","locale","renderPreview","setTempPosterUrl","onMediaLoadSuccess","transformVideoURL","renderVideoMask","allowFullscreen","renderInlineToolbar","current","render","attributes","isCollapsed","value","selection","Container","scrollableContainer","scale"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  useZoom,\n  RenderNodeProps,\n} from '@ali/4ever-cangjie';\nimport {\n  EmbedPlugin,\n  useScrollableContainer,\n  EmbedNode,\n} from '@ali/4ever-bamboo';\nimport { updateFile, EmbedInlineToolbar } from '@ali/4ever-factory';\nimport { VideoPluginConfig } from '../types';\n\nconst {\n  VideoPlayer,\n  EmbedCard,\n} = EmbedPlugin;\n\n\ninterface IProps extends\n  Pick<VideoPluginConfig, 'allowDownload' | 'onMediaLoadSuccess' | 'onMediaLoadError'| 'enableFilePreview'\n  | 'locale' | 'setTempPosterUrl' | 'renderVideoMask' | 'allowFullscreen'>,\n  RenderNodeProps<EmbedNode> {\n  mobile: boolean;\n  onDownload: VideoPluginConfig['downloadFile'];\n  transformVideoURL?: VideoPluginConfig['transformVideoURL'];\n  scrollableContainer: HTMLElement | Window;\n  zoomContainer: HTMLElement | null;\n  scale: number;\n}\n\ninterface IState {\n  allowDownload: boolean;\n}\n\nclass Video extends PureComponent<IProps, IState> {\n  ref = React.createRef<HTMLDivElement>();\n\n  videoRef = React.createRef<HTMLVideoElement>();\n\n  constructor(props: IProps) {\n    super(props);\n    const { allowDownload } = props;\n    this.state = {\n      allowDownload: typeof allowDownload === 'boolean' ? allowDownload : false,\n    };\n  }\n\n  componentDidMount() {\n    const { allowDownload } = this.props;\n    const { src } = this.getNodeData();\n\n    if (typeof allowDownload === 'function') {\n      allowDownload(src).then(res => {\n        this.setState({\n          allowDownload: res,\n        });\n      });\n    }\n  }\n\n  getNodeData = () => {\n    const { node } = this.props;\n    const { data } = node;\n    return data;\n  };\n\n  onSwitchViewType = (viewType: string) => {\n    const { controller, node } = this.props;\n    const { data } = node;\n    const { viewType: prevViewType } = this.getNodeData();\n    if (prevViewType === viewType) {\n      return;\n    }\n\n    controller.run(\n      'onAction',\n      updateFile(\n        node,\n        {\n          ...data,\n          viewType,\n        },\n      ),\n    );\n  };\n\n  onDownloadFile = () => {\n    const { src, name, type, size } = this.getNodeData();\n    const { onDownload } = this.props;\n    if (onDownload) {\n      onDownload(src, {\n        name,\n        type,\n        size,\n      });\n    }\n  };\n\n  onMediaLoadError = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadError } = this.props;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  renderCard() {\n    const { allowDownload } = this.state;\n    const { name, size } = this.getNodeData();\n    const { isSelected, node, locale } = this.props;\n    return (\n      <EmbedCard\n        name={name}\n        allowDownload={allowDownload}\n        isSelected={isSelected}\n        node={node}\n        locale={locale}\n        onDownloadFile={this.onDownloadFile}\n        size={size}\n      />\n    );\n  }\n\n  renderPreview() {\n    const {\n      isSelected, node, setTempPosterUrl, onMediaLoadSuccess,\n      transformVideoURL, renderVideoMask, allowDownload, onDownload,\n      locale, allowFullscreen,\n    } = this.props;\n\n    return (\n      <VideoPlayer\n        transformVideoURL={transformVideoURL}\n        onMediaLoadSuccess={onMediaLoadSuccess}\n        onMediaLoadError={this.onMediaLoadError}\n        setTempPosterUrl={setTempPosterUrl}\n        node={node}\n        isSelected={isSelected}\n        renderVideoMask={renderVideoMask}\n        allowDownload={onDownload && allowDownload}\n        onDownload={this.onDownloadFile}\n        locale={locale}\n        allowFullscreen={allowFullscreen}\n      />\n    );\n  }\n\n  renderInlineToolbar() {\n    const { controller, node, locale = {} } = this.props;\n\n    return (\n      <EmbedInlineToolbar\n        controller={controller}\n        node={node}\n        locale={locale}\n        onSwitchViewType={this.onSwitchViewType}\n        isMoreButtonShown\n        triggerNode={this.ref.current}\n      />\n    );\n  }\n\n  render() {\n    const { viewType } = this.getNodeData();\n    const { attributes, isSelected, controller } = this.props;\n    const { isCollapsed } = controller.value.selection;\n\n    return (\n      <React.Fragment>\n        {isSelected && isCollapsed ? this.renderInlineToolbar() : null}\n        <div\n          {...attributes}\n          ref={this.ref}\n        >\n          {viewType === 'preview' ? this.renderPreview() : this.renderCard()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Container: React.FC<IProps> = (props) => {\n  const scrollableContainer = useScrollableContainer();\n  const scale = useZoom();\n\n  return (\n    <Video\n      {...props}\n      scrollableContainer={scrollableContainer!}\n      scale={scale}\n    />\n  );\n};\n\nexport default Container;\n"],"file":"video.js"}