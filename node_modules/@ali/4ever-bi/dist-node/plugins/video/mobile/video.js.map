{"version":3,"sources":["../../../../../src/plugins/video/mobile/video.tsx"],"names":["MobileEmbedCard","VideoPlayer","EmbedPlugin","Video","PureComponent","isClicked","ref","React","createRef","previewRef","interval","getNodeData","node","props","data","onMediaLoadError","src","onMediaLoadSuccess","onDownloadFile","name","type","size","onDownload","renderPreview","isSelected","setTempPosterUrl","transformVideoURL","renderVideoMask","allowDownload","locale","allowFullscreen","renderCard","onPreview","renderInlineToolbar","controller","current","render","viewType","attributes","Container","scrollableContainer"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport {\n  EmbedPlugin,\n  useScrollableContainer,\n  VideoMaskParams,\n} from '@ali/4ever-bamboo';\nimport { EmbedInlineToolbar as VideoInlineToolbar } from '@ali/4ever-factory';\n\nconst {\n  MobileEmbedCard, VideoPlayer,\n} = EmbedPlugin;\n\ninterface IProps {\n  controller: Controller;\n  attributes: any;\n  node: any;\n  locale: any;\n  mobile: boolean;\n  isSelected: boolean;\n  transformVideoURL?: (src: string) => string;\n  onMediaLoadSuccess?: Function;\n  onMediaLoadError?: Function;\n  scrollableContainer: HTMLElement | Window;\n  setTempPosterUrl?: (data: any) => Promise<string>;\n  renderVideoMask?: (params: VideoMaskParams) => React.ReactElement;\n  onDownload?: Function;\n  allowDownload?: ((src: string) => Promise<boolean>) | boolean;\n  onPreview?: (\n    url: string,\n  ) => Promise<{ previewUrl: string }>;\n  allowFullscreen: boolean,\n}\n\nclass Video extends PureComponent<IProps> {\n  private isClicked = false;\n\n  ref = React.createRef<HTMLDivElement>();\n\n  previewRef = React.createRef();\n\n  interval = null;\n\n  getNodeData = () => {\n    const { node } = this.props;\n    const { data } = node || {};\n    return data;\n  };\n\n  onMediaLoadError = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadError } = this.props;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  onMediaLoadSuccess = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadSuccess } = this.props;\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(src);\n    }\n  };\n\n  onDownloadFile = () => {\n    const { src, name, type, size } = this.getNodeData();\n    const { onDownload } = this.props;\n    if (onDownload) {\n      onDownload(src, {\n        name,\n        type,\n        size,\n      });\n    }\n  };\n\n  renderPreview() {\n    const {\n      isSelected, node, setTempPosterUrl, onMediaLoadSuccess,\n      transformVideoURL, renderVideoMask, onDownload, allowDownload,\n      locale, allowFullscreen,\n    } = this.props;\n\n    return (\n      <VideoPlayer\n        transformVideoURL={transformVideoURL}\n        onMediaLoadSuccess={onMediaLoadSuccess}\n        onMediaLoadError={this.onMediaLoadError}\n        setTempPosterUrl={setTempPosterUrl}\n        node={node}\n        isSelected={isSelected}\n        renderVideoMask={renderVideoMask}\n        onDownload={this.onDownloadFile}\n        isMobile\n        allowDownload={onDownload && allowDownload}\n        locale={locale}\n        allowFullscreen={allowFullscreen}\n      />\n    );\n  }\n\n  renderCard() {\n    const { name, src, type, size } = this.getNodeData();\n    const { onPreview } = this.props;\n\n    return (\n      <MobileEmbedCard\n        name={name}\n        onPreview={onPreview}\n        src={src}\n        type={type}\n        size={size}\n      />\n    );\n  }\n\n  renderInlineToolbar() {\n    const { controller, node, locale } = this.props;\n\n    return (\n      <VideoInlineToolbar\n        controller={controller}\n        node={node}\n        locale={locale}\n        triggerNode={this.ref.current}\n      />\n    );\n  }\n\n  render() {\n    const { viewType } = this.getNodeData();\n    const { attributes, isSelected } = this.props;\n\n    return (\n      <React.Fragment>\n        {isSelected ? this.renderInlineToolbar() : null}\n        <div {...attributes} ref={this.ref}>\n          {viewType === 'preview' ? this.renderPreview() : this.renderCard()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Container: React.FC<IProps> = (props) => {\n  const scrollableContainer = useScrollableContainer();\n\n  return <Video {...props} scrollableContainer={scrollableContainer} />;\n};\n\nexport default Container;\n"],"file":"video.js"}