"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClosestDom = getClosestDom;
exports.updateHighlightSingle = updateHighlightSingle;
exports.removeHighlightSingle = removeHighlightSingle;

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _constants = require("./constants");

function isListNode(node) {
  if (_everCangjie.Inline.isInline(node)) return false; // 排版模式下 data.list 未下放到 nodes.nodes 中

  return node.data.list || node.data.pi?.extra?.inList;
}

function getClosestDom(node) {
  let nodeDom = null;
  const key = node?.key;
  if (!key) return nodeDom;

  try {
    nodeDom = _everCangjie.domUtils.findDOMNodeSafely(key) || null;
    if (!nodeDom) return null; // 表格有独立的hover 态

    if (_everMo.Table.isTable(node)) return null;

    if (_everMo.Image.isImage(node)) {
      nodeDom = nodeDom.querySelector(`[${_everCangjie.constants.Selector.hoverWrapper}]`);
    } else if (_everCangjie.Block.isBlock(node)) {
      const {
        hoverWrapper: selector,
        key
      } = _everCangjie.constants.Selector;

      if (nodeDom.getAttribute(selector)) {
        return nodeDom;
      }

      let maybeNodeDom = nodeDom.querySelector(`[${selector}]`);

      if (maybeNodeDom && maybeNodeDom.closest(`[${key}]`) === nodeDom) {
        return maybeNodeDom;
      }

      nodeDom = nodeDom.closest('[data-name="heading-group-title-content"]') || nodeDom.closest(`[${_everCangjie.constants.Selector.leafBlock}]`) || nodeDom;
    }

    if (nodeDom && node.data.blockquote) {
      // 引用
      nodeDom = nodeDom.closest('blockquote') || nodeDom;
    } else if (nodeDom && isListNode(node)) {
      // 列表和任务
      nodeDom = nodeDom.closest('[data-testid="list"]') || nodeDom;
    }

    return nodeDom;
  } catch (e) {// do nothing
  }

  return nodeDom;
}

function updateHighlightSingle(node, type, reason) {
  const key = node?.key;
  if (!key) return;

  const dom = _everCangjie.domUtils.findDOMNodeSafely(key);

  if (!dom) return;
  const hoverWrapper = getClosestDom(node);
  if (!hoverWrapper) return;
  const hoverBlockType = hoverWrapper?.getAttribute(_everCangjie.constants.Selector.hoverWrapper) || 'noBorderBox'; // 同一个时刻元素仅存在一种状态

  ['select', 'hover', 'active'].forEach(highlightType => {
    const key = hoverBlockType + highlightType[0].toLocaleUpperCase() + highlightType.slice(1);
    hoverWrapper.classList.remove(_constants.HIGHLIGHT_CLASS[key]);
  });
  const classKey = hoverBlockType + type[0].toLocaleUpperCase() + type.slice(1);
  hoverWrapper.classList.add(_constants.HIGHLIGHT_CLASS[classKey]);
  hoverWrapper.setAttribute('data-highlight-reason', reason);
}

function removeHighlightSingle(node, type, reason) {
  const key = node?.key;
  if (!key) return;

  const dom = _everCangjie.domUtils.findDOMNodeSafely(key);

  if (!dom) return;
  const hoverWrapper = getClosestDom(node); // 避免时序问题，由不是当前原因触发清除

  if (!hoverWrapper || hoverWrapper.getAttribute('data-highlight-reason') !== reason) return;
  const hoverBlockType = hoverWrapper.getAttribute(_everCangjie.constants.Selector.hoverWrapper) || 'noBorderBox';
  const classKey = hoverBlockType + type[0].toLocaleUpperCase() + type.slice(1);

  if (hoverWrapper.classList.contains(_constants.HIGHLIGHT_CLASS[classKey])) {
    hoverWrapper.classList.remove(_constants.HIGHLIGHT_CLASS[classKey]);
    hoverWrapper.removeAttribute('data-highlight-reason');
  }
}
//# sourceMappingURL=utils.js.map