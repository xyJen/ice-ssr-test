{"version":3,"sources":["../../../../src/plugins/hoverBlock/utils.ts"],"names":["isListNode","node","Inline","isInline","data","list","pi","extra","inList","getClosestDom","nodeDom","key","domUtils","findDOMNodeSafely","Table","isTable","Image","isImage","querySelector","constants","Selector","hoverWrapper","Block","isBlock","selector","getAttribute","maybeNodeDom","closest","leafBlock","blockquote","e","updateHighlightSingle","type","reason","dom","hoverBlockType","forEach","highlightType","toLocaleUpperCase","slice","classList","remove","HIGHLIGHT_CLASS","classKey","add","setAttribute","removeHighlightSingle","contains","removeAttribute"],"mappings":"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","sourcesContent":["import { Block, Inline, constants, domUtils } from '@ali/4ever-cangjie';\nimport { Image, Table } from '@ali/4ever-mo';\nimport { HIGHLIGHT_CLASS } from './constants';\nimport type { BorderBoxHighlightType, HoverBlockType } from './types';\n\nfunction isListNode(node: Block | Inline) {\n  if (Inline.isInline(node)) return false;\n\n  // 排版模式下 data.list 未下放到 nodes.nodes 中\n  return node.data.list || node.data.pi?.extra?.inList;\n}\n\nexport function getClosestDom(node: Inline | Block | null): Element | null {\n  let nodeDom: Element | null = null;\n  const key = node?.key;\n  if (!key) return nodeDom;\n  try {\n    nodeDom = domUtils.findDOMNodeSafely(key) || null;\n    if (!nodeDom) return null;\n    // 表格有独立的hover 态\n    if (Table.isTable(node)) return null;\n    if (Image.isImage(node)) {\n      nodeDom = nodeDom.querySelector(`[${constants.Selector.hoverWrapper}]`);\n    } else if (Block.isBlock(node)) {\n      const { hoverWrapper: selector, key } = constants.Selector;\n      if (nodeDom.getAttribute(selector)) {\n        return nodeDom;\n      }\n      let maybeNodeDom = nodeDom.querySelector(`[${selector}]`);\n      if (maybeNodeDom && maybeNodeDom.closest(`[${key}]`) === nodeDom) {\n        return maybeNodeDom;\n      }\n      nodeDom = nodeDom.closest('[data-name=\"heading-group-title-content\"]') || nodeDom.closest(`[${constants.Selector.leafBlock}]`) || nodeDom;\n    }\n    if (nodeDom && node.data.blockquote) {\n      // 引用\n      nodeDom = nodeDom.closest('blockquote') || nodeDom;\n    } else if (nodeDom && isListNode(node)) {\n      // 列表和任务\n      nodeDom = nodeDom.closest('[data-testid=\"list\"]') || nodeDom;\n    }\n    return nodeDom;\n  } catch (e) {\n    // do nothing\n  }\n  return nodeDom;\n}\n\nexport function updateHighlightSingle(node: Block | Inline, type: BorderBoxHighlightType, reason: string) {\n  const key = node?.key;\n  if (!key) return;\n  const dom = domUtils.findDOMNodeSafely(key);\n  if (!dom) return;\n  const hoverWrapper = getClosestDom(node);\n  if (!hoverWrapper) return;\n  const hoverBlockType: HoverBlockType = (hoverWrapper?.getAttribute(constants.Selector.hoverWrapper) as HoverBlockType) || 'noBorderBox';\n  // 同一个时刻元素仅存在一种状态\n  ['select', 'hover', 'active'].forEach((highlightType) => {\n    const key = hoverBlockType + highlightType[0].toLocaleUpperCase() + highlightType.slice(1);\n    hoverWrapper.classList.remove(HIGHLIGHT_CLASS[key]);\n  })\n  const classKey = hoverBlockType + type[0].toLocaleUpperCase() + type.slice(1);\n  hoverWrapper.classList.add(HIGHLIGHT_CLASS[classKey]);\n  hoverWrapper.setAttribute('data-highlight-reason', reason);\n}\n\nexport function removeHighlightSingle(node: Block | Inline, type: BorderBoxHighlightType, reason: string) {\n  const key = node?.key;\n  if (!key) return;\n  const dom = domUtils.findDOMNodeSafely(key);\n  if (!dom) return;\n\n  const hoverWrapper = getClosestDom(node);\n  // 避免时序问题，由不是当前原因触发清除\n  if (!hoverWrapper || hoverWrapper.getAttribute('data-highlight-reason') !== reason) return;\n  const hoverBlockType: HoverBlockType = (hoverWrapper.getAttribute(constants.Selector.hoverWrapper) as HoverBlockType) || 'noBorderBox';\n\n  const classKey = hoverBlockType + type[0].toLocaleUpperCase() + type.slice(1);\n  if (hoverWrapper.classList.contains(HIGHLIGHT_CLASS[classKey])) {\n    hoverWrapper.classList.remove(HIGHLIGHT_CLASS[classKey]);\n    hoverWrapper.removeAttribute('data-highlight-reason');\n  }\n}"],"file":"utils.js"}