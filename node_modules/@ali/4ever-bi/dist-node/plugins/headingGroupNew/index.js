"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everBamboo = require("@ali/4ever-bamboo");

var _everMo = require("@ali/4ever-mo");

var _createGenerateGroup = _interopRequireDefault(require("./handlers/createGenerateGroup"));

var _createRenderGroup = _interopRequireDefault(require("./handlers/createRenderGroup"));

var queries = _interopRequireWildcard(require("./queries"));

const {
  Heading1,
  Heading2,
  Heading3
} = _everMo.Heading;
const {
  actions
} = _everBamboo.GroupFactory;
const DRAG_BUTTON_OFFSET = -20;
const PI_MODE = 'page_layout';

const createHeadingGroupPlugin = config => {
  const {
    headingGroup = {}
  } = config;
  const {
    level = 3
  } = headingGroup;
  const shouldOffsetTypes = [];

  for (let i = level; i > 0; i--) {
    shouldOffsetTypes.push(`heading-${i}`);
  }

  ;
  return {
    renderGroup: (0, _createRenderGroup.default)(headingGroup),
    generateGroup: (0, _createGenerateGroup.default)(headingGroup),
    queries: {
      getHeadingGroupLevel: () => level,
      isHeadingGroupAvailable: () => true,
      getLeftToolbarOffset: (controller, data) => {
        const {
          node
        } = data;
        const isPi = controller.query('getLayoutMode') === PI_MODE;

        if (!isPi && shouldOffsetTypes.includes(node.type)) {
          return {
            // 这里加上4是因为左侧工具栏的offset为6，但是在标题场景下是2
            x: DRAG_BUTTON_OFFSET + 4,
            y: 0
          };
        }

        return undefined;
      },
      isElementInGroup: (controller, element, group) => {
        // 分组 2 只能存在于分组 1 之中
        if (Heading1.isHeading1(element)) {
          return false;
        } else if (Heading2.isHeading2(element)) {
          if (group.type === 'heading1-group') {
            return true;
          }

          return false;
        } else if (Heading3.isHeading3(element)) {
          if (group.type === 'heading1-group' || group.type === 'heading2-group') {
            return true;
          }

          return false;
        }

        return true;
      },
      ...queries
    }
  };
}; // @ts-ignore


createHeadingGroupPlugin.actions = actions; // @ts-ignore

createHeadingGroupPlugin.queries = queries;
var _default = createHeadingGroupPlugin;
exports.default = _default;
//# sourceMappingURL=index.js.map