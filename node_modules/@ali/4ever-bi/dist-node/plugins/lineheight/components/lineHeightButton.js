"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sideBarTriggerFactory = sideBarTriggerFactory;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _weToolbar = require("@ali/we-toolbar");

var _everBamboo = require("@ali/4ever-bamboo");

var _actions = require("../actions");

const _createElement = /*#__PURE__*/_react.default.createElement;
;

const MemoLineHeightSelect = /*#__PURE__*/_react.default.memo(_weToolbar.LineHeightSelect);

function sideBarTriggerFactory(Component, sideBarTrigger) {
  return props => {
    return /*#__PURE__*/_createElement(Component, (0, _extends2.default)({}, props, {
      sideBarTrigger: sideBarTrigger
    }));
  };
}

const LineHeightButton = props => {
  const {
    controller,
    locale,
    toolbarMode,
    sideBarTrigger,
    ...rest
  } = props;
  const {
    line,
    lineRule = 'auto'
  } = controller.query('getLineHeight'); // 组件只支持多倍行距，undefined 或 固定值情况视为 NaN 以便组件不勾选

  const lineValue = parseFloat(lineRule !== 'auto' ? undefined : line);
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInTaskList') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');

  const handleChange = _react.default.useCallback(value => {
    controller.run('onAction', (0, _actions.setLineHeight)(value));
  }, [controller]);

  const handleClickCustomize = () => {
    if (sideBarTrigger && sideBarTrigger.open) {
      sideBarTrigger.open('paragraph');
    }
  };

  return /*#__PURE__*/_createElement(MemoLineHeightSelect, (0, _extends2.default)({}, rest, {
    testid: "bi-toolbar-lineheight",
    value: lineValue,
    disabled: isDisabled,
    onChange: handleChange,
    onCustomize: sideBarTrigger && sideBarTrigger.open ? handleClickCustomize : undefined,
    tooltip: locale.buttonTitle,
    role: _everBamboo.PluginRoles.lineHeightSelect
  }));
};

var _default = LineHeightButton;
exports.default = _default;
//# sourceMappingURL=lineHeightButton.js.map