{"version":3,"sources":["../../../../../src/plugins/quickInsert/commands/insert.ts"],"names":["getFocusPoint","controller","selection","value","focus","Point","create","key","offset","insert","data","query","command","Commands","moveToStartOfNextText","run","plugin","decorations","notQuickInsertDescorations","filter","item","mark","type","endPoint","startPoint","Math","max","insertText","setDecorations","Decoration","start","end","Mark"],"mappings":";;;;;;;AAAA;;AAWA;;AAFA;;AAIA,SAASA,aAAT,CAAuBC,UAAvB,EAA+C;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAgBD,UAAU,CAACE,KAAjC;;AACA,MAAI,CAACD,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AACD,QAAME,KAAK,GAAGF,SAAS,CAACE,KAAxB;AAEA,SAAOC,mBAAMC,MAAN,CAAa;AAClBC,IAAAA,GAAG,EAAEH,KAAK,CAACG,GADO;AAElB;AACAC,IAAAA,MAAM,EAAEJ,KAAK,CAACI;AAHI,GAAb,CAAP;AAKD;;AAEc,SAASC,MAAT,CACbR,UADa,EAEbS,IAFa,EAGb;AACA,MACET,UAAU,CAACU,KAAX,CAAiB,yBAAjB,KACAV,UAAU,CAACU,KAAX,CAAiB,sBAAjB,CAFF,EAGE;AACAV,IAAAA,UAAU,CAACW,OAAX,CAAmBC,sBAASC,qBAA5B;AACD;;AAEDb,EAAAA,UAAU,CAACc,GAAX,CAAe,UAAf,EAA2B,+BAA3B;AACAd,EAAAA,UAAU,CAACc,GAAX,CAAe,UAAf,EAA2B,6BAAeL,IAAI,CAACM,MAApB,CAA3B;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAkBhB,UAAU,CAACE,KAAnC;AACA,QAAMe,0BAA0B,GAAGD,WAAW,CAACE,MAAZ,CACjCC,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUC,IAAV,KAAmB,cADM,CAAnC;AAIA,MAAIC,QAAQ,GAAGvB,aAAa,CAACC,UAAD,CAA5B;;AACA,MAAI,CAACsB,QAAL,EAAe;AACb,WAAOtB,UAAP;AACD;;AAED,QAAMuB,UAAU,GAAGnB,mBAAMC,MAAN,CAAa;AAC9BC,IAAAA,GAAG,EAAEgB,QAAQ,CAAChB,GADgB;AAE9B;AACAC,IAAAA,MAAM,EAAEiB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,QAAQ,CAACf,MAAT,GAAkB,CAA9B;AAHsB,GAAb,CAAnB;;AAMA,MAAIe,QAAQ,CAACf,MAAT,KAAoBgB,UAAU,CAAChB,MAAnC,EAA2C;AACzC;AACAP,IAAAA,UAAU,CAACW,OAAX,CAAmBC,sBAASc,UAA5B,EAAwC,GAAxC;AACAJ,IAAAA,QAAQ,GAAGlB,mBAAMC,MAAN,CAAa;AACtBC,MAAAA,GAAG,EAAEgB,QAAQ,CAAChB,GADQ;AAEtB;AACAC,MAAAA,MAAM,EAAEe,QAAQ,CAACf,MAAT,GAAkB;AAHJ,KAAb,CAAX;AAKD;;AAED,SAAOP,UAAU,CAAC2B,cAAX,CAA0B,CAC/B,GAAGV,0BAD4B,EAE/BW,wBAAWvB,MAAX,CAAkB;AAChBwB,IAAAA,KAAK,EAAEN,UADS;AAEhBO,IAAAA,GAAG,EAAER,QAFW;AAGhBF,IAAAA,IAAI,EAAEW,kBAAK1B,MAAL,CAAY;AAChBgB,MAAAA,IAAI,EAAE,cADU;AAEhBZ,MAAAA;AAFgB,KAAZ;AAHU,GAAlB,CAF+B,CAA1B,CAAP;AAWD","sourcesContent":["import {\n  Controller,\n  Commands,\n  Point,\n  Decoration,\n  Mark,\n  TextPoint,\n} from '@ali/4ever-cangjie';\n\n;\nimport { QuickInsertMarkData } from '../types';\nimport { showQuickInsert, setQuickInsert } from '../actions';\n\nfunction getFocusPoint(controller: Controller) {\n  const { selection } = controller.value;\n  if (!selection) {\n    return null;\n  }\n  const focus = selection.focus as TextPoint;\n\n  return Point.create({\n    key: focus.key,\n    // @ts-ignore\n    offset: focus.offset,\n  });\n}\n\nexport default function insert(\n  controller: Controller,\n  data: QuickInsertMarkData,\n) {\n  if (\n    controller.query('isCollapsedInInlineVoid') ||\n    controller.query('isSelectionInMention')\n  ) {\n    controller.command(Commands.moveToStartOfNextText);\n  }\n\n  controller.run('onAction', showQuickInsert());\n  controller.run('onAction', setQuickInsert(data.plugin));\n\n  const { decorations } = controller.value;\n  const notQuickInsertDescorations = decorations.filter(\n    item => item.mark.type !== 'quick-insert',\n  );\n\n  let endPoint = getFocusPoint(controller) as TextPoint;\n  if (!endPoint) {\n    return controller;\n  }\n\n  const startPoint = Point.create({\n    key: endPoint.key,\n    // @ts-ignore\n    offset: Math.max(0, endPoint.offset - 1),\n  }) as TextPoint;\n\n  if (endPoint.offset === startPoint.offset) {\n    // 插入空格，保证 decoration 区间不闭合，能够展示 quick-insert 面板\n    controller.command(Commands.insertText, ' ');\n    endPoint = Point.create({\n      key: endPoint.key,\n      // @ts-ignore\n      offset: endPoint.offset + 1,\n    }) as TextPoint;\n  }\n\n  return controller.setDecorations([\n    ...notQuickInsertDescorations,\n    Decoration.create({\n      start: startPoint!,\n      end: endPoint!,\n      mark: Mark.create({\n        type: 'quick-insert',\n        data,\n      }),\n    }),\n  ]);\n}\n"],"file":"insert.js"}