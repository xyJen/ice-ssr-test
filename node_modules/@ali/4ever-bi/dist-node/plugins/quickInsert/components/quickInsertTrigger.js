"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everBamboo = require("@ali/4ever-bamboo");

var _everComponent = require("@ali/4ever-component");

var _weDesign = require("@ali/we-design");

var _menu = _interopRequireDefault(require("./menu"));

var _panel = _interopRequireDefault(require("./panel"));

var _forbidden = _interopRequireDefault(require("./forbidden"));

var _actions = require("../actions");

var _lodash = require("lodash");

const _createElement = /*#__PURE__*/_react.default.createElement;
const PANEL_WIDTH = 335;
const PANEL_HEIGHT = 375;

const PanelBox = /*#__PURE__*/_styledComponents.default.div([""]);

const InsertWrapper = /*#__PURE__*/_styledComponents.default.div(["position:absolute;display:flex;flex-direction:column;border:1px solid ", ";box-shadow:", ";border-radius:6px;height:", "px;width:", "px;"], () => _weDesign.theme.colorLine1, () => _weDesign.theme.boxShadow, PANEL_HEIGHT, PANEL_WIDTH);

const {
  useActiveInteraction
} = _everComponent.ActiveInteractionHooks;

var _ref = /*#__PURE__*/_createElement(_forbidden.default, null);

const QuickInsert = props => {
  const {
    text,
    value,
    groups,
    controller,
    insertMap,
    config
  } = props;
  const {
    getLifeCycle
  } = config;
  const current = insertMap[value];
  const [position, setPosition] = (0, _react.useState)({
    top: 99999,
    left: 99999
  });
  const left = (0, _react.useRef)(0);
  const portalRef = (0, _react.useRef)(null);
  const scrollableContainer = (0, _everBamboo.useScrollableContainer)();
  const close = (0, _react.useCallback)(() => {
    controller.run('onAction', (0, _actions.removeQuickInsert)());
    return controller;
  }, [controller]);
  const [activeType, setActiveType] = useActiveInteraction();

  const activeRef = _react.default.useRef('');

  activeRef.current = activeType;

  _react.default.useEffect(() => {
    setActiveType('quickInsertMenu');
    return () => {
      if (activeRef.current === 'quickInsertMenu') {
        setActiveType('');
      }
    };
  }, [setActiveType]);

  const updatePosition = (0, _react.useCallback)((0, _lodash.throttle)(flag => {
    const pos = controller.query('getQuickInsertPanelPosition', {
      controller,
      scrollableContainer: scrollableContainer,
      portalDom: portalRef.current?.children[0]
    });
    const p = {
      left: typeof flag === 'boolean' ? pos.left : left.current,
      top: pos.top
    };
    setPosition(p);
    left.current = p.left;
  }), [scrollableContainer, config]); // 等待 DOM 渲染完成之后再计算定位

  (0, _react.useEffect)(() => {
    updatePosition(true);
    scrollableContainer?.addEventListener('scroll', updatePosition);
    return () => {
      scrollableContainer?.removeEventListener('scroll', updatePosition);
    };
  }, [scrollableContainer]);
  (0, _react.useEffect)(() => {
    if (text.length === 1) {
      updatePosition(true);
    }
  }, [text, controller.value]);

  const handleChange = _react.default.useCallback(key => {
    controller.run('onAction', (0, _actions.resetQuickInsert)(key));
    controller.command(_everCangjie.Commands.focus);
  }, [controller]);

  (0, _everComponent.useOnClickOutside)(portalRef, close);
  (0, _react.useEffect)(() => {
    const start = performance.now();
    return () => {
      getLifeCycle && getLifeCycle({
        time: performance.now() - start
      });
    };
  }, [getLifeCycle]);
  const overlay = (0, _react.useMemo)(() => /*#__PURE__*/_createElement(InsertWrapper, {
    style: {
      left: position.left,
      top: position.top,
      zIndex: 999
    }
  }, /*#__PURE__*/_createElement(_menu.default, {
    groups: groups,
    value: current.key,
    onChange: handleChange,
    editorValue: controller.value
  }), /*#__PURE__*/_createElement(_panel.default, null, current.disabled(controller.value) ? _ref : current.renderPanel({
    close,
    text,
    controller,
    from: 'editor'
  }))), [close, controller, current, groups, handleChange, position.left, position.top, text]);
  return /*#__PURE__*/_reactDom.default.createPortal( /*#__PURE__*/_createElement(PanelBox, {
    className: "quick-insert-portal",
    "data-testid": "quick-insert-portal",
    ref: portalRef
  }, overlay), document.body);
};

var _default = QuickInsert;
exports.default = _default;
//# sourceMappingURL=quickInsertTrigger.js.map