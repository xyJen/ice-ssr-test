"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

var _zh_CN = _interopRequireDefault(require("../../locales/zh_CN"));

var actions = _interopRequireWildcard(require("./actions"));

var _createRenderMark = _interopRequireDefault(require("./createRenderMark"));

var _createRenderEditable = _interopRequireDefault(require("./createRenderEditable"));

var _onKeyDown = _interopRequireDefault(require("./handlers/onKeyDown"));

var _onSelect = _interopRequireDefault(require("./handlers/onSelect"));

var _onCommand = _interopRequireDefault(require("./handlers/onCommand"));

var _onAction = _interopRequireDefault(require("./handlers/onAction"));

var _createOnCangjieInput = _interopRequireDefault(require("./handlers/createOnCangjieInput"));

var _isSelectionInQuickInsert = _interopRequireDefault(require("./queries/isSelectionInQuickInsert"));

var _getQuickInsertDecoration = _interopRequireDefault(require("./queries/getQuickInsertDecoration"));

var _getQuickInsertKeyword = _interopRequireDefault(require("./queries/getQuickInsertKeyword"));

var _getPanelPosition = _interopRequireDefault(require("./queries/getPanelPosition"));

var _insert = _interopRequireDefault(require("./commands/insert"));

function createQuickInsertPlugin(configs, plugins) {
  const pluginConfig = {
    triggers: {},
    groups: [],
    getLifeCycle: () => {},
    locale: _zh_CN.default.quickInsert.locale,
    ...configs.quickInsert
  };

  function getItem(item) {
    const key = typeof item === 'string' ? item : item.key;

    if (!configs[key] || !plugins[key] || !plugins[key].quickInsert) {
      // eslint-disable-next-line no-console
      console.warn(`can not find [${item}]'s \`quickInsert\` configuration`);
      return null;
    }

    const {
      locale
    } = configs[key] || {};
    const {
      quickInsert
    } = plugins[key];
    const {
      renderIcon,
      renderPanel,
      onMenuClick
    } = quickInsert;
    return {
      key,
      title: locale.quickInsertTitle || key,
      renderIcon,
      renderPanel: props => renderPanel({ ...props,
        locale
      }),
      onMenuClick,
      disabled: typeof item === 'string' ? _lodash.stubFalse : item.disabled || _lodash.stubFalse
    };
  }

  const groups = pluginConfig.groups.map(group => ({ ...group,
    items: (group.items || []).map(getItem).filter(item => !!item)
  }));
  const insertMap = groups.reduce((map, group) => {
    group.items.forEach(item => {
      // eslint-disable-next-line no-param-reassign
      map[item.key] = item;
    });
    return map;
  }, {});
  return {
    onCangjieInput: (0, _createOnCangjieInput.default)(pluginConfig, insertMap),
    onKeyDown: _onKeyDown.default,
    onSelect: _onSelect.default,
    onCommand: _onCommand.default,
    renderEditable: (0, _createRenderEditable.default)(groups, insertMap, pluginConfig),
    renderMark: (0, _createRenderMark.default)(),
    onAction: _onAction.default,
    queries: {
      isSelectionInQuickInsert: _isSelectionInQuickInsert.default,
      getQuickInsertDecoration: _getQuickInsertDecoration.default,
      getQuickInsertKeyword: _getQuickInsertKeyword.default,
      getQuickInsertPanelPosition: _getPanelPosition.default
    },
    commands: {
      insertPlugin: _insert.default
    },
    models: [{
      klass: 'inline',
      type: 'mention'
    }]
  };
}

createQuickInsertPlugin.actions = actions;
var _default = createQuickInsertPlugin;
exports.default = _default;
//# sourceMappingURL=index.js.map