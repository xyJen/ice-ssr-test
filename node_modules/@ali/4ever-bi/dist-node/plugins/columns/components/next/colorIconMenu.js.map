{"version":3,"sources":["../../../../../../src/plugins/columns/components/next/colorIconMenu.tsx"],"names":["ColorIconMenu","props","controller","getNode","onOverlayVisibleChange","tooltip","node","data","setData","React","useState","getContainer","HoverToolbarHooks","useGetContainer","isOverlayVisible","setOverlayVisible","usePopoverVisible","handleValueChange","key","value","oldData","newData","run","ColumnsPlugin","actions","setCellData","color","bgcolor","border","PluginRoles","columnsColor"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;;AAWrB,MAAMA,aAA4C,GAAIC,KAAD,IAAW;AACrE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,sBAAvB;AAA+CC,IAAAA;AAA/C,MAA2DJ,KAAjE;AACA,QAAMK,IAAI,GAAGH,OAAO,EAApB;;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBC,eAAMC,QAAN,CAAgBJ,IAAD,EAAwBC,IAAvC,CAAxB;;AACA,QAAMI,YAAY,GAAGC,iCAAkBC,eAAlB,EAArB;;AACA,QAAM,CAACC,gBAAD,EAAmBC,iBAAnB,IAAwCH,iCAAkBI,iBAAlB,CAAoC,eAApC,EAAqDZ,sBAArD,CAA9C;;AAEA,QAAMa,iBAAiB,GAAIC,GAAD,IAAUC,KAAD,IAAW;AAC5C,UAAMb,IAAI,GAAGH,OAAO,EAApB;;AACA,QAAI,CAACG,IAAL,EAAW;AACT;AACD;;AACDE,IAAAA,OAAO,CAAEY,OAAD,KAAc,EACpB,GAAGA,OADiB;AAEpB,OAACF,GAAD,GAAOC;AAFa,KAAd,CAAD,CAAP;AAIA,UAAME,OAAO,GAAG,EAAhB,CAT4C,CAU5C;;AACAA,IAAAA,OAAO,CAACH,GAAD,CAAP,GAAeC,KAAf;AACAjB,IAAAA,UAAU,CAACoB,GAAX,CAAe,eAAf;AACApB,IAAAA,UAAU,CAACoB,GAAX,CAAe,UAAf,EAA2BC,0BAAcC,OAAd,CAAsBC,WAAtB,CAAkC;AAAEnB,MAAAA,IAAF;AAAQC,MAAAA,IAAI,EAAEc;AAAd,KAAlC,CAA3B;AACD,GAdD;;AAgBA,MAAI,CAACf,IAAL,EAAW,OAAO,IAAP;AAEX,sBACE,eAAC,mCAAD;AACE,IAAA,KAAK,EAAEC,IAAI,EAAEmB,KADf;AAEE,IAAA,YAAY,EAAC,EAFf;AAGE,IAAA,eAAe,EAAEnB,IAAI,EAAEoB,OAHzB;AAIE,IAAA,sBAAsB,EAAC,EAJzB;AAKE,IAAA,WAAW,EAAEpB,IAAI,EAAEqB,MALrB;AAME,IAAA,kBAAkB,EAAC,EANrB;AAOE,IAAA,YAAY,EAAEX,iBAAiB,CAAC,OAAD,CAPjC;AAQE,IAAA,kBAAkB,EAAEA,iBAAiB,CAAC,QAAD,CARvC;AASE,IAAA,sBAAsB,EAAEA,iBAAiB,CAAC,MAAD,CAT3C;AAUE,IAAA,sBAAsB,EAAEF,iBAV1B;AAWE,IAAA,gBAAgB,EAAED,gBAXpB;AAYE,IAAA,YAAY,EAAEH,YAZhB;AAaE,IAAA,OAAO,EAAEN,OAbX;AAcE,IAAA,IAAI,EAAEwB,wBAAYC;AAdpB,IADF;AAkBD,CA3CM","sourcesContent":["import React from 'react';\nimport { ColumnsPlugin, PluginRoles } from '@ali/4ever-bamboo';\nimport { ComplexColorIconMenu, HoverToolbarHooks } from '@ali/4ever-component';\nimport { Controller, Node, Block } from '@ali/4ever-cangjie';\n\nexport interface IColorIconMenuProps {\n  onOverlayVisibleChange: (v: boolean) => void;\n  controller: Controller;\n  getNode: () => Node | null;\n  tooltip?: string;\n}\n\nexport const ColorIconMenu: React.FC<IColorIconMenuProps> = (props) => {\n  const { controller, getNode, onOverlayVisibleChange, tooltip } = props;\n  const node = getNode();\n  const [data, setData] = React.useState((node as Block | null)?.data);\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('columns.color', onOverlayVisibleChange);\n\n  const handleValueChange = (key) => (value) => {\n    const node = getNode();\n    if (!node) {\n      return;\n    }\n    setData((oldData) => ({\n      ...oldData,\n      [key]: value,\n    }));\n    const newData = {};\n    // @ts-ignore\n    newData[key] = value;\n    controller.run('onCangjieBlur');\n    controller.run('onAction', ColumnsPlugin.actions.setCellData({ node, data: newData }));\n  }\n\n  if (!node) return null;\n\n  return (\n    <ComplexColorIconMenu\n      color={data?.color}\n      defaultColor=''\n      backgroundColor={data?.bgcolor}\n      defaultBackgroundColor=''\n      borderColor={data?.border}\n      defaultBorderColor=''\n      onColorClick={handleValueChange('color')}\n      onBorderColorClick={handleValueChange('border')}\n      onBackgroundColorClick={handleValueChange('fill')}\n      onOverlayVisibleChange={setOverlayVisible}\n      isOverlayVisible={isOverlayVisible}\n      getContainer={getContainer}\n      tooltip={tooltip}\n      role={PluginRoles.columnsColor}\n    />\n  );\n}"],"file":"colorIconMenu.js"}