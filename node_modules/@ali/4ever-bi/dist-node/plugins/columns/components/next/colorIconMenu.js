"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorIconMenu = void 0;

var _react = _interopRequireDefault(require("react"));

var _everBamboo = require("@ali/4ever-bamboo");

var _everComponent = require("@ali/4ever-component");

const _createElement = /*#__PURE__*/_react.default.createElement;

const ColorIconMenu = props => {
  const {
    controller,
    getNode,
    onOverlayVisibleChange,
    tooltip
  } = props;
  const node = getNode();

  const [data, setData] = _react.default.useState(node?.data);

  const getContainer = _everComponent.HoverToolbarHooks.useGetContainer();

  const [isOverlayVisible, setOverlayVisible] = _everComponent.HoverToolbarHooks.usePopoverVisible('columns.color', onOverlayVisibleChange);

  const handleValueChange = key => value => {
    const node = getNode();

    if (!node) {
      return;
    }

    setData(oldData => ({ ...oldData,
      [key]: value
    }));
    const newData = {}; // @ts-ignore

    newData[key] = value;
    controller.run('onCangjieBlur');
    controller.run('onAction', _everBamboo.ColumnsPlugin.actions.setCellData({
      node,
      data: newData
    }));
  };

  if (!node) return null;
  return /*#__PURE__*/_createElement(_everComponent.ComplexColorIconMenu, {
    color: data?.color,
    defaultColor: "",
    backgroundColor: data?.bgcolor,
    defaultBackgroundColor: "",
    borderColor: data?.border,
    defaultBorderColor: "",
    onColorClick: handleValueChange('color'),
    onBorderColorClick: handleValueChange('border'),
    onBackgroundColorClick: handleValueChange('fill'),
    onOverlayVisibleChange: setOverlayVisible,
    isOverlayVisible: isOverlayVisible,
    getContainer: getContainer,
    tooltip: tooltip,
    role: _everBamboo.PluginRoles.columnsColor
  });
};

exports.ColorIconMenu = ColorIconMenu;
//# sourceMappingURL=colorIconMenu.js.map