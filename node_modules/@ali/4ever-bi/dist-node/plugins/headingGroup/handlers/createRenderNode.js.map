{"version":3,"sources":["../../../../../src/plugins/headingGroup/handlers/createRenderNode.tsx"],"names":["Group","GroupFactory","Heading1","Heading2","Heading3","Heading4","Heading5","Heading6","Heading","headingList","createRenderNode","config","level","hCondition","slice","map","H","node","Block","isBlock","type","TYPE","renderNode","props","controller","next","attributes","isSelected","children","some"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;uBAJ4B,a;AAM5B,MAAM;AAAEA,EAAAA;AAAF,IAAYC,wBAAlB;AAEA,MAAM;AACJC,EAAAA,QADI;AAEJC,EAAAA,QAFI;AAGJC,EAAAA,QAHI;AAIJC,EAAAA,QAJI;AAKJC,EAAAA,QALI;AAMJC,EAAAA;AANI,IAOFC,eAPJ;AASA,MAAMC,WAAW,GAAG,CAClBP,QADkB,EAElBC,QAFkB,EAGlBC,QAHkB,EAIlBC,QAJkB,EAKlBC,QALkB,EAMlBC,QANkB,CAApB;;AASA,SAASG,gBAAT,CAA0BC,MAA1B,EAA4E;AAC1E,QAAM;AAAEC,IAAAA,KAAK,GAAG;AAAV,MAAgBD,MAAtB;AACA,QAAME,UAAU,GAAG,sBACjB,GAAGJ,WAAW,CAACK,KAAZ,CAAkB,CAAlB,EAAqBF,KAArB,EAA4BG,GAA5B,CAAiCC,CAAD,IAAO;AACxC,WAAQC,IAAD,IAAU;AACf,aAAOC,mBAAMC,OAAN,CAAcF,IAAd,KAAuBA,IAAI,CAACG,IAAL,KAAc,8BAAkBJ,CAAC,CAACK,IAApB,CAA5C;AACD,KAFD;AAGD,GAJE,CADc,CAAnB;AAQA,SAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,UAA3B,EAAuCC,IAAvC,EAA6C;AAClD,UAAM;AACJR,MAAAA,IADI;AAEJS,MAAAA,UAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA;AAJI,QAKFL,KALJ;;AAOA,QAAIV,UAAU,CAACgB,IAAX,CAAgBZ,IAAhB,CAAJ,EAA2B;AACzB,0BACE,eAAC,KAAD;AACE,QAAA,IAAI,EAAEA,IADR;AAEE,QAAA,UAAU,EAAES,UAFd;AAGE,QAAA,UAAU,EAAEF,UAHd;AAIE,QAAA,UAAU,EAAEG;AAJd,SAMGC,QAAQ,EANX,CADF;AAUD;;AAED,WAAOH,IAAI,EAAX;AACD,GAtBD;AAuBD;;eAEcf,gB","sourcesContent":["import * as React from 'react';\nimport { Block, Plugin } from '@ali/4ever-cangjie';\nimport { Heading } from '@ali/4ever-mo';\nimport { GroupFactory } from '@ali/4ever-bamboo';\nimport { HeadingGroupConfig } from '../types';\nimport { condition, generateGroupType } from '../utils';\n\nconst { Group } = GroupFactory;\n\nconst {\n  Heading1,\n  Heading2,\n  Heading3,\n  Heading4,\n  Heading5,\n  Heading6,\n} = Heading;\n\nconst headingList = [\n  Heading1,\n  Heading2,\n  Heading3,\n  Heading4,\n  Heading5,\n  Heading6,\n];\n\nfunction createRenderNode(config: HeadingGroupConfig): Plugin['renderNode'] {\n  const { level = 3 } = config;\n  const hCondition = condition(\n    ...headingList.slice(0, level).map((H) => {\n      return (node) => {\n        return Block.isBlock(node) && node.type === generateGroupType(H.TYPE);\n      };\n    }),\n  );\n\n  return function renderNode(props, controller, next) {\n    const {\n      node,\n      attributes,\n      isSelected,\n      children,\n    } = props;\n\n    if (hCondition.some(node)) {\n      return (\n        <Group\n          node={node as Block}\n          attributes={attributes}\n          controller={controller}\n          isSelected={isSelected}\n        >\n          {children()}\n        </Group>\n      );\n    }\n\n    return next();\n  };\n}\n\nexport default createRenderNode;\n"],"file":"createRenderNode.js"}