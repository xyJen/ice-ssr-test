{"version":3,"sources":["../../../../../src/plugins/headingGroup/handlers/createGroupNodes.ts"],"names":["defaultIgnore","createGroupNodes","config","level","ignore","pass","groupConditions","headingGroupList","slice","groupNodes","range","ctx","controller","next","start","parent","groups","first","nodes","second","parentGroup","length","Document","isDocument","$condition","find","type","when","until"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA,SAASA,aAAT,GAAyB;AACvB,SAAO,KAAP;AACD;;AAED,SAASC,gBAAT,CAA0BC,MAA1B,EAA4E;AAC1E,QAAM;AAAEC,IAAAA,KAAK,GAAG,CAAV;AAAaC,IAAAA,MAAM,GAAGJ,aAAtB;AAAqCK,IAAAA;AAArC,MAA8CH,MAApD;;AACA,QAAMI,eAAe,GAAGC,yCAAiBC,KAAjB,CAAuB,CAAvB,EAA0BL,KAA1B,CAAxB;;AAEA,SAAO,SAASM,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,EAAkD;AACvD,UAAM,CAACC,KAAD,IAAUJ,KAAhB;AACA,UAAM;AAAEK,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAqBL,GAA3B;AACA,UAAMM,KAAK,GAAGF,MAAM,CAACG,KAAP,CAAaJ,KAAb,CAAd;AACA,UAAMK,MAAM,GAAGJ,MAAM,CAACG,KAAP,CAAaJ,KAAK,GAAG,CAArB,CAAf;AACA,UAAMM,WAAW,GAAGJ,MAAM,CAACA,MAAM,CAACK,MAAP,GAAgB,CAAjB,CAA1B,CALuD,CAOvD;;AACA,QAAI,CAACC,sBAASC,UAAT,CAAoBR,MAApB,CAAD,IAAgC,CAACI,MAAjC,IAA2Cf,MAAM,CAACa,KAAD,CAArD,EAAuE;AACrE,aAAOJ,IAAI,EAAX;AACD,KAVsD,CAYvD;;;AACA,UAAMW,UAAU,GAAGlB,eAAe,CAACmB,IAAhB,CAAqB,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAAoB;AAC1D,aAAOA,IAAI,CAACV,KAAD,CAAJ,IAAe,CAAC,wBAAYG,WAAZ,EAAyBM,IAAzB,CAAvB;AACD,KAFkB,CAAnB,CAbuD,CAiBvD;;AACA,QAAIF,UAAJ,EAAgB;AACd,YAAM;AAAEI,QAAAA,KAAF;AAASF,QAAAA;AAAT,UAAkBF,UAAxB;AACA,aAAO,kBAAMd,KAAN,EAAaK,MAAb,EAAqBW,IAArB,EAA2BE,KAA3B,EAAkCvB,IAAlC,CAAP;AACD;;AAED,WAAOQ,IAAI,EAAX;AACD,GAxBD;AAyBD;;eAEcZ,gB","sourcesContent":["import { Document, Plugin, Block } from '@ali/4ever-cangjie';\nimport { headingGroupList } from '@ali/4ever-plugin-heading-group';\nimport { HeadingGroupConfig } from '../types';\nimport { group, isGroupFrom } from '../utils';\n\nfunction defaultIgnore() {\n  return false;\n}\n\nfunction createGroupNodes(config: HeadingGroupConfig): Plugin['groupNodes'] {\n  const { level = 3, ignore = defaultIgnore, pass } = config;\n  const groupConditions = headingGroupList.slice(0, level);\n\n  return function groupNodes(range, ctx, controller, next) {\n    const [start] = range;\n    const { parent, groups } = ctx;\n    const first = parent.nodes[start];\n    const second = parent.nodes[start + 1];\n    const parentGroup = groups[groups.length - 1];\n\n    // 如果不是一级节点，或者是文档末尾，则不分组\n    if (!Document.isDocument(parent) || !second || ignore(first as Block)) {\n      return next();\n    }\n\n    // 查找可用的 group 条件\n    const $condition = groupConditions.find(({ type, when }) => {\n      return when(first) && !isGroupFrom(parentGroup, type);\n    });\n\n    // group 节点\n    if ($condition) {\n      const { until, type } = $condition;\n      return group(range, parent, type, until, pass);\n    }\n\n    return next();\n  };\n}\n\nexport default createGroupNodes;\n"],"file":"createGroupNodes.js"}