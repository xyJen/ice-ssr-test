{"version":3,"sources":["../../../../../src/plugins/sticker/components/stickerWrapper.tsx"],"names":["DEFAULT_SZ","StickerItem","getStickerStyle","StickerPlugin","EmptyFunc","StickerWrapper","props","controller","node","sticker","StickerPlaceholder","code","stickerCode","data","sz","highlight","onClick","e","preventDefault","stopPropagation","offsetX","nativeEvent","offsetLeft","offsetWidth","target","isRightSide","offset","value","selection","key","unitsConverter","toPX","React","memo"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;AAI5B,MAAM;AACJA,EAAAA,UADI;AAEJC,EAAAA,WAFI;AAGJC,EAAAA;AAHI,IAIFC,yBAJJ;;AAMA,MAAMC,SAAS,GAAG,MAAM,IAAxB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA8C;AAC5C,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA,kBAAkB,GAAGN;AAAlD,MAAgEE,KAAtE;AACA,QAAM;AAAEK,IAAAA,IAAI,EAAEC;AAAR,MAAwBJ,IAAI,CAACK,IAAnC;AAEA,QAAM;AAAEC,IAAAA,EAAE,GAAGd,UAAP;AAAmBe,IAAAA;AAAnB,MAAiC,oBAAQ,MAAMb,eAAe,CAACM,IAAD,CAA7B,EAAqC,CAC1EA,IAD0E,CAArC,CAAvC;AAGA,QAAMQ,OAAO,GAAG,wBACbC,CAAD,IAAO;AACLA,IAAAA,CAAC,CAACC,cAAF;AACAD,IAAAA,CAAC,CAACE,eAAF;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAcH,CAAC,CAACI,WAAtB;AACA,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA8BN,CAAC,CAACO,MAAtC;AACA,UAAMC,WAAW,GAAGL,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAGE,UAAV,GAAuBC,WAAW,GAAG,CAAxE;AACA,gCAAgB;AACdhB,MAAAA,UADc;AAEdmB,MAAAA,MAAM,EAAED,WAAW,GAAG,CAAH,GAAO,CAAC;AAFb,KAAhB;AAID,GAXa,EAYd,CAAClB,UAAU,CAACoB,KAAX,CAAiBC,SAAlB,CAZc,CAAhB;AAeA,sBACE,eAAC,WAAD;AACE,IAAA,GAAG,EAAEpB,IAAI,CAACqB,GADZ;AAEE,IAAA,IAAI,EAAEjB,WAFR;AAGE,IAAA,eAAe,EAAEG,SAHnB;AAIE,IAAA,WAAW,eAAE,eAAC,kBAAD,EAAwBT,KAAxB,CAJf;AAKE,IAAA,EAAE,EAAEwB,2BAAeC,IAAf,CAAqB,GAAEjB,EAAE,GAAG,GAAI,IAAhC,CALN;AAME,IAAA,OAAO,EAAEL,OANX;AAOE,IAAA,OAAO,EAAEO;AAPX,IADF;AAWD;;4BAEcgB,eAAMC,IAAN,CAAW5B,cAAX,C","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { StickerPlugin, unitsConverter } from '@ali/4ever-bamboo';\nimport { moveCaretToText } from '../utils';\nimport { IStickerProps } from '../types';\n\nconst {\n  DEFAULT_SZ,\n  StickerItem,\n  getStickerStyle,\n} = StickerPlugin;\n\nconst EmptyFunc = () => null;\n\nfunction StickerWrapper(props: IStickerProps) {\n  const { controller, node, sticker, StickerPlaceholder = EmptyFunc } = props;\n  const { code: stickerCode } = node.data;\n\n  const { sz = DEFAULT_SZ, highlight } = useMemo(() => getStickerStyle(node), [\n    node,\n  ]);\n  const onClick = useCallback(\n    (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      const { offsetX } = e.nativeEvent;\n      const { offsetLeft, offsetWidth } = e.target;\n      const isRightSide = offsetX > 0 && offsetX - offsetLeft > offsetWidth / 2;\n      moveCaretToText({\n        controller,\n        offset: isRightSide ? 1 : -1,\n      });\n    },\n    [controller.value.selection],\n  );\n\n  return (\n    <StickerItem\n      key={node.key}\n      code={stickerCode}\n      backgroundColor={highlight}\n      placeholder={<StickerPlaceholder {...props} />}\n      sz={unitsConverter.toPX(`${sz * 1.5}pt`)}\n      sticker={sticker}\n      onClick={onClick}\n    />\n  );\n}\n\nexport default React.memo(StickerWrapper);\n"],"file":"stickerWrapper.js"}