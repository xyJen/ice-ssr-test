"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everComponent = require("@ali/4ever-component");

var _utils = require("../utils");

var _styled = require("./styled");

var _constants = require("../constants");

var _everPluginSticker = require("@ali/4ever-plugin-sticker");

var _getCaretPosition = require("../utils/getCaretPosition");

var _actions = require("../actions");

const _createElement = /*#__PURE__*/_react.default.createElement;
const EXTRA_OFFSET_LEFT = 2;

function StickerPanelWrapper(props) {
  const {
    controller,
    sticker,
    visible,
    locale,
    onVisibleChange
  } = props;
  const zoomContainer = (0, _everCangjie.useZoomContainer)();
  const zoom = (0, _everCangjie.useZoom)();
  const panelRef = (0, _react.useRef)();
  const onClickSticker = (0, _react.useCallback)((0, _utils.createOnClickSticker)({
    controller,
    sticker
  }), [controller, sticker]);
  const handleClickOutside = (0, _react.useCallback)(e => {
    // 面板不出现时不予处理（避免首次 mousedown 引起 flush 的情况）
    if (!visible) {
      return;
    }

    const closestSticker = e.target.closest('[data-type=sticker]');
    const stickerCode = closestSticker?.getAttribute('data-sticker');
    controller.run('onAction', (0, _actions.setStickerPanelVisible)({
      visible: false
    }));

    if (stickerCode === '') {
      requestAnimationFrame(updatePosition);
    }
  }, [controller, visible]);

  const updatePosition = () => {
    if (!zoomContainer || !panelRef.current) {
      return;
    }

    const rect = zoomContainer.getBoundingClientRect();
    const caretPos = (0, _getCaretPosition.getCaretPosition)({
      controller,
      rect,
      zoom,
      panelHeight: panelRef.current.offsetHeight,
      panelWidth: panelRef.current.offsetWidth
    });

    if (!caretPos) {
      return;
    }

    const initTransformOrigin = ['top', 'left'];

    if (caretPos.isAtBottom) {
      initTransformOrigin[0] = 'bottom';
    }

    if (caretPos.isAtRight) {
      initTransformOrigin[1] = 'right';
    }

    panelRef.current.style.top = `${caretPos.top}px`;
    panelRef.current.style.left = `${caretPos.left + EXTRA_OFFSET_LEFT}px`;
    panelRef.current.style.transformOrigin = initTransformOrigin.join(' ');
    panelRef.current.classList.add('sticker-panel-visible');
  };

  (0, _everComponent.useOnClickOutside)(panelRef, handleClickOutside, false);

  _react.default.useEffect(() => {
    updatePosition();
  });

  (0, _react.useEffect)(() => {
    onVisibleChange && onVisibleChange(visible);
  }, [visible]);
  return visible ? /*#__PURE__*/_createElement(_styled.PanelWrapper, {
    ref: panelRef
  }, /*#__PURE__*/_createElement(_everPluginSticker.StickerPanel, {
    sticker: sticker,
    columns: _constants.STICKER_PANEL_COLUMMS,
    onClick: onClickSticker,
    locale: locale
  })) : null;
}

var _default = /*#__PURE__*/_react.default.memo(StickerPanelWrapper);

exports.default = _default;
//# sourceMappingURL=stickerPanelWrapper.js.map