"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everBamboo = require("@ali/4ever-bamboo");

var _weDesign = require("@ali/we-design");

var _styled = require("./styled");

var _actions = require("../actions");

var _everComponent = require("@ali/4ever-component");

var _weToolbar = require("@ali/we-toolbar");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  DEFAULT_SZ,
  getStickerStyle
} = _everBamboo.StickerPlugin;

function StickerPlaceholder(props) {
  const {
    controller,
    node,
    readonly = false
  } = props;
  const {
    _stickerPanel
  } = controller.value.data;
  const placeholderRef = (0, _react.useRef)(null);
  const [active, setActive] = (0, _react.useState)(_stickerPanel);
  const computedSz = (0, _react.useMemo)(() => {
    const {
      sz = DEFAULT_SZ
    } = getStickerStyle(node);
    return _everBamboo.unitsConverter.toPX(`${sz * 1.5}pt`);
  }, [node]);
  const isDisableStickerPanel = controller.query('isDisableStickerPanel');
  const iconStyle = (0, _react.useMemo)(() => {
    const iconSz = computedSz - 4;
    return {
      width: iconSz,
      height: iconSz
    };
  }, [node]);
  const handleClick = (0, _react.useCallback)(() => {
    // TODO 移动端暂不支持插入表情
    if (_everCangjie.environment.IS_MOBILE) {
      return;
    } // 禁用 panel


    if (isDisableStickerPanel) {
      return;
    }

    setActive(true);
    controller.run('onAction', (0, _actions.setStickerPanelVisible)({
      visible: true
    }));
  }, [controller, isDisableStickerPanel]);
  const handleClickOutside = (0, _react.useCallback)(() => {
    setActive(false);
  }, [controller]);
  (0, _everComponent.useOnClickOutside)(placeholderRef, handleClickOutside, false);
  return /*#__PURE__*/_createElement(_styled.InlinePlaceholderWrapper, {
    ref: placeholderRef
  }, /*#__PURE__*/_createElement(_weToolbar.InlinePlaceholder, {
    icon: /*#__PURE__*/_createElement(_weDesign.ToolbarEmojiNormal, {
      style: iconStyle
    }),
    type: !readonly && !isDisableStickerPanel ? 'normal' : 'export',
    isSelected: active,
    onClick: handleClick,
    style: {
      fontSize: computedSz
    },
    className: "inline-placeholder"
  }));
}

var _default = StickerPlaceholder;
exports.default = _default;
//# sourceMappingURL=stickerPlaceholder.js.map