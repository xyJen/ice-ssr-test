{"version":3,"sources":["../../../../../src/plugins/sticker/handlers/onKeyDown.ts"],"names":["isBackspaceHotKey","onKeyDown","event","controller","next","document","data","selection","value","_stickerPanel","setData","isCollapsed","anchor","curNode","getNode","key","prevNode","getPreviousNode","isAtStart","isAtStartOfNode","environment","IS_MOBILE","type","STICKER_NODE_TYPE","command","Commands","moveAnchorBackward"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA,MAAMA,iBAAiB,GAAG,2BAAY,WAAZ,CAA1B;;AAEe,SAASC,SAAT,CACbC,KADa,EAEbC,UAFa,EAGbC,IAHa,EAIb;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,MAAgCJ,UAAU,CAACK,KAAjD;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAoBH,IAA1B;;AACA,MAAIG,aAAJ,EAAmB;AACjBN,IAAAA,UAAU,CAACO,OAAX,CAAmB,EACjB,GAAGJ,IADc;AAEjBG,MAAAA,aAAa,EAAE;AAFE,KAAnB;AAID;;AACD,MAAI,CAACF,SAAS,CAACI,WAAf,EAA4B;AAC1B,WAAOP,IAAI,EAAX;AACD;;AACD,QAAM;AAAEQ,IAAAA;AAAF,MAAaL,SAAnB;AACA,QAAMM,OAAO,GAAGR,QAAQ,CAACS,OAAT,CAAiBF,MAAM,CAACG,GAAxB,CAAhB;;AACA,MAAIf,iBAAiB,CAACE,KAAD,CAArB,EAA8B;AAC5B,UAAMc,QAAQ,GAAGX,QAAQ,CAACY,eAAT,CAAyBL,MAAM,CAACG,GAAhC,CAAjB;AACA,UAAMG,SAAS,GAAGL,OAAO,IAAID,MAAM,CAACO,eAAP,CAAuBN,OAAvB,CAA7B,CAF4B,CAG5B;;AACA,QAAI,CAACO,yBAAYC,SAAb,IAA0BH,SAA1B,IAAuCF,QAAQ,EAAEM,IAAV,KAAmBC,4BAA9D,EAAiF;AAC/EpB,MAAAA,UAAU,CAACqB,OAAX,CAAmBC,sBAASC,kBAA5B,EAAgD,CAAhD;AACD;AACF;;AACD,SAAOtB,IAAI,EAAX;AACD","sourcesContent":["import * as React from 'react';\nimport { Controller, Commands, environment } from '@ali/4ever-cangjie';\nimport { isKeyHotkey } from 'is-hotkey';\nimport { STICKER_NODE_TYPE } from '../constants';\n\nconst isBackspaceHotKey = isKeyHotkey('backspace');\n\nexport default function onKeyDown(\n  event: React.KeyboardEvent,\n  controller: Controller,\n  next: () => void,\n) {\n  const { document, data, selection } = controller.value;\n  const { _stickerPanel } = data;\n  if (_stickerPanel) {\n    controller.setData({\n      ...data,\n      _stickerPanel: false,\n    });\n  }\n  if (!selection.isCollapsed) {\n    return next();\n  }\n  const { anchor } = selection;\n  const curNode = document.getNode(anchor.key);\n  if (isBackspaceHotKey(event)) {\n    const prevNode = document.getPreviousNode(anchor.key);\n    const isAtStart = curNode && anchor.isAtStartOfNode(curNode);\n    // @ts-ignore\n    if (!environment.IS_MOBILE && isAtStart && prevNode?.type === STICKER_NODE_TYPE) {\n      controller.command(Commands.moveAnchorBackward, 1);\n    }\n  }\n  return next();\n}\n"],"file":"onKeyDown.js"}