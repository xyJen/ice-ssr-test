"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ScriptSplitButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everComponent = require("@ali/4ever-component");

var _everBamboo = require("@ali/4ever-bamboo");

var _actions = require("../../actions");

var _utils = require("../../utils");

const _createElement = /*#__PURE__*/React.createElement;

function ScriptSplitButton(props) {
  const {
    controller,
    locale,
    ...rest
  } = props;
  const isSup = controller.query('isSup');
  const isSub = controller.query('isSub');
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInMention') || controller.query('isSelectionInLink') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  const onScriptChange = React.useCallback(value => {
    controller.run('onAction', value === 'sub' ? (0, _actions.toggleSub)() : (0, _actions.toggleSup)());
  }, [controller]);
  const supItem = React.useMemo(() => ({
    title: locale?.supButtonTitle || '',
    shortCut: _utils.SHORTCUT.sup,
    description: `Markdown: ^${locale?.text || 'Text'}^ ${locale?.space || 'Space'}`
  }), []);
  const subItem = React.useMemo(() => ({
    title: locale?.subButtonTitle || '',
    shortCut: _utils.SHORTCUT.sub,
    description: `Markdown: ~${locale?.text || 'Text'}~ ${locale?.space || 'Space'}`
  }), []);
  const curScript = isSub ? 'sub' : isSup ? 'super' : undefined;
  return /*#__PURE__*/_createElement(_everComponent.ScriptSplit, (0, _extends2.default)({
    testid: "bi-toolbar-script",
    disabled: !!isDisabled,
    onScriptChange: onScriptChange,
    curScript: curScript,
    role: _everBamboo.PluginRoles.vertAlign,
    subItem: subItem,
    supItem: supItem
  }, rest));
}
//# sourceMappingURL=scriptSplitButton.js.map