"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SubButton;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _weToolbar = require("@ali/we-toolbar");

var _everBamboo = require("@ali/4ever-bamboo");

var _actions = require("../actions");

var _utils = require("../utils");

const _createElement = /*#__PURE__*/_react.default.createElement;
;
;

function SubButton(props) {
  const {
    controller,
    locale,
    ...rest
  } = props;
  const isSubActive = controller.query('isSub');
  const tips = {
    super: (0, _utils.getHotKeyTips)('sup', locale),
    sub: (0, _utils.getHotKeyTips)('sub', locale)
  };
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInMention') || controller.query('isSelectionInLink') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');

  const handleChange = _react.default.useCallback(value => {
    controller.run('onAction', value === 'sub' ? (0, _actions.toggleSub)() : (0, _actions.toggleSup)());
  }, [controller]);

  const status = isSubActive ? 'sub' : 'super';
  const tip = isSubActive ? tips.sub : tips.super;
  return /*#__PURE__*/_createElement(_weToolbar.ScriptSelect, (0, _extends2.default)({}, rest, {
    testid: `bi-toolbar-${status}`,
    title: tip,
    value: status,
    disabled: !!isDisabled,
    onClick: handleChange,
    role: _everBamboo.PluginRoles.vertAlign
  }));
}
//# sourceMappingURL=groupButton.js.map