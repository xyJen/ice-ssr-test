{"version":3,"sources":["../../../../../src/plugins/calendarCard/hooks/useRefreshResult.tsx"],"names":["ERROR_TIPS_TIMEOUT","RefreshTipsTextWrapper","CalendarCardPlugin","useRefreshResult","result","setResult","tipsNode","status","message","color","theme","errorColor","marginRight","timeoutRef","setRefreshResult","res","current","window","setTimeout","clearTimeout","refreshTipsNode"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;uBAD4B,a;AAI5B,MAAMA,kBAAkB,GAAG,IAA3B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA6BC,8BAAnC;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB,qBAAgC,IAAhC,CAA5B;AAEA,QAAMC,QAAQ,GAAG,oBAAQ,MAAM;AAC7B,QAAI,CAACF,MAAL,EAAa,OAAO,IAAP;AACb,UAAM;AAAEG,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAsBJ,MAA5B;AACA,QAAIG,MAAM,KAAK,SAAf,EAA0B,OAAO,IAAP;AAC1B,wBACE,2DACE,eAAC,+BAAD;AAAuB,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAEC,gBAAMC,UAAf;AAA2BC,QAAAA,WAAW,EAAE;AAAxC;AAA9B,MADF,eAEE,eAAC,sBAAD,QAAyBJ,OAAzB,CAFF,CADF;AAMD,GAVgB,EAUd,CAACJ,MAAD,CAVc,CAAjB;AAYA,QAAMS,UAAU,GAAG,oBAAnB;AAEA,QAAMC,gBAAgB,GAAG,wBAAaC,GAAD,IAAyB;AAC5DV,IAAAA,SAAS,CAACU,GAAD,CAAT,CAD4D,CAE5D;;AACAF,IAAAA,UAAU,CAACG,OAAX,GAAqBC,MAAM,CAACC,UAAP,CAAkB,MAAM;AAC3Cb,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAQ,MAAAA,UAAU,CAACG,OAAX,GAAqB,IAArB;AACD,KAHoB,EAGlBhB,kBAHkB,CAArB;AAID,GAPwB,EAOtB,CAACK,SAAD,CAPsB,CAAzB;AASA,wBAAU,MAAM;AACd,WAAO,MAAM;AACX,UAAIQ,UAAU,CAACG,OAAf,EAAwBG,YAAY,CAACN,UAAU,CAACG,OAAZ,CAAZ;AACzB,KAFD;AAGD,GAJD,EAIG,EAJH;AAKA,SAAO;AAAEI,IAAAA,eAAe,EAAEd,QAAnB;AAA6BQ,IAAAA;AAA7B,GAAP;AACD,CAhCD;;eAkCeX,gB","sourcesContent":["import React, { useRef, useMemo, useState, useCallback, useEffect } from 'react';\nimport { RoundcloseThickNormal, theme } from '@ali/we-design';\nimport { CalendarCardPlugin } from '@ali/4ever-bamboo';\nimport { RefreshReponse } from '../types';\n\nconst ERROR_TIPS_TIMEOUT = 5000;\n\nconst { RefreshTipsTextWrapper } = CalendarCardPlugin;\n\nconst useRefreshResult = () => {\n  const [result, setResult] = useState<RefreshReponse | null>(null);\n\n  const tipsNode = useMemo(() => {\n    if (!result) return null;\n    const { status, message } = result;\n    if (status === 'success') return null;\n    return (\n      <>\n        <RoundcloseThickNormal style={{ color: theme.errorColor, marginRight: '3px' }} />\n        <RefreshTipsTextWrapper>{message}</RefreshTipsTextWrapper>\n      </>\n    );\n  }, [result]);\n\n  const timeoutRef = useRef<number | null>();\n\n  const setRefreshResult = useCallback((res: RefreshReponse) => {\n    setResult(res);\n    // 5s 后错误 tips 消失\n    timeoutRef.current = window.setTimeout(() => {\n      setResult(null);\n      timeoutRef.current = null;\n    }, ERROR_TIPS_TIMEOUT);\n  }, [setResult]);\n\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    };\n  }, []);\n  return { refreshTipsNode: tipsNode, setRefreshResult };\n};\n\nexport default useRefreshResult;\n"],"file":"useRefreshResult.js"}