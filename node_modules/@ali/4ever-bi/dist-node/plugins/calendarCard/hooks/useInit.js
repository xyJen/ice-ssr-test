"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useInit;

var _react = require("react");

var _lodash = require("lodash");

var _debug = _interopRequireDefault(require("debug"));

var _calculatedCalendarSize = require("../shanhui/calculatedCalendarSize");

var _types = require("../types");

var _everFactory = require("@ali/4ever-factory");

var _calculatedSize = require("../utils/calculatedSize");

var _everBamboo = require("@ali/4ever-bamboo");

var _isEqualValue = _interopRequireDefault(require("../utils/isEqualValue"));

const {
  CALENDAR_CARD_MAX_HEIGHT
} = _everBamboo.CalendarCardPlugin;
const debug = (0, _debug.default)('EDITOR:BI:CALENDAR:RENDER'); // 首次加载最大刷新次数，限制 retry 次数

const MAX_FIRSTLOADED_REFRESH_COUNT = 2;
const RETRY_TIMES = new Map();

function useInit(props) {
  const {
    isInitialized,
    isPlaceholder,
    containerWidthInPC,
    isLoading,
    isFirstLoaded,
    isMobile,
    calendarId,
    setLoading,
    refresh,
    controller,
    node,
    finalMetadata,
    finalData,
    injectToData,
    setRefreshResult,
    onInitData,
    mode
  } = props;
  const isShanhui = mode === _types.CalendarType.SHANHUI;
  const shouldLoadAtFirst = (0, _react.useCallback)(() => {
    debug('SHOULDLOADATFIRST', isInitialized, isPlaceholder, containerWidthInPC, isLoading, isFirstLoaded); // placeholder 状态不发出请求

    if (isPlaceholder) return false; // 移动端首次打开应初始化日程数据

    if (isMobile && !isInitialized && !isLoading) return true; // 打开后已首次加载过不再刷新

    if (isFirstLoaded) return false; // 避免重复请求

    if (isLoading) return false; // 闪会场景下自动更新数据

    if (isShanhui) return true; // 未初始化日程允许发起请求获取最新数据

    if (!isInitialized) return true; // 移动端不主动刷新 - 只在首次加载后刷新数据

    if (isMobile) return false; // 闪会日程卡片的刷新tips全部先去掉，另提需求优化刷新逻辑

    if (isShanhui && isInitialized) return false; // 缺少编辑器容器宽度不刷新请求

    return !(0, _lodash.isNil)(containerWidthInPC);
  }, [isInitialized, isPlaceholder, containerWidthInPC, isLoading, isFirstLoaded, isMobile, isShanhui]);
  (0, _react.useEffect)(() => {
    const nodeKey = node.key;
    return () => {
      if (RETRY_TIMES.has(nodeKey)) {
        RETRY_TIMES.delete(nodeKey);
      }
    };
  }, [node]);
  (0, _react.useEffect)(() => {
    if (!calendarId) return;
    if (!refresh) return;
    if (!shouldLoadAtFirst()) return;
    debug('INIT-PARAMS', calendarId, isPlaceholder, isFirstLoaded, isLoading, isInitialized, isMobile);
    const {
      key,
      data
    } = node;

    if (RETRY_TIMES.has(key)) {
      const currentTime = RETRY_TIMES.get(key) + 1; // 控制 retry 次数

      if (currentTime > MAX_FIRSTLOADED_REFRESH_COUNT) {
        return;
      }

      RETRY_TIMES.set(key, currentTime);
    } else {
      RETRY_TIMES.set(key, 1);
    }

    setLoading(true);
    debug('INIT', calendarId);
    refresh(calendarId).then(async res => {
      if (res.status !== 'success') {
        setRefreshResult(res);
        controller.run('onAction', (0, _everFactory.setCardData)(node, {
          metadata: { ...data.metadata,
            isInitialized: true
          },
          withoutSaving: true
        }));
        injectToData({
          injectionHeight: undefined,
          injectionMetadata: undefined,
          isFirstLoaded: true
        });
        debug('INIT:ERROR', res);
        return;
      }

      let newMetadata = res.data;
      const getTopReceivers = isShanhui ? _calculatedCalendarSize.getCalculatedCalendarReceivers : _calculatedSize.getCalculatedReceivers;
      newMetadata = { ...newMetadata,
        mode,
        topReceivers: await getTopReceivers(newMetadata, containerWidthInPC, newMetadata.totalCount || 0)
      };
      const calculateHeight = isShanhui ? _calculatedCalendarSize.calculatedCalendarSize : _calculatedSize.calculatedSize;
      const newHeight = await calculateHeight(newMetadata, containerWidthInPC || CALENDAR_CARD_MAX_HEIGHT);
      const isInValidHeight = !(finalData.height && newHeight);

      if ((isInValidHeight || finalData.height === newHeight) && (0, _isEqualValue.default)(newMetadata, finalMetadata)) {
        injectToData({
          injectionHeight: undefined,
          injectionMetadata: undefined,
          isFirstLoaded: true
        });
        debug('INIT:NOCHANGE');
        return;
      } // 首次创建时自动落库


      if (!isInitialized) {
        controller.run('onAction', (0, _everFactory.setCardData)(node, {
          metadata: { ...newMetadata,
            isInitialized: true
          },
          height: newHeight,
          withoutSaving: true
        }));
        injectToData({
          injectionHeight: undefined,
          injectionMetadata: undefined,
          isFirstLoaded: true
        });
        if (onInitData) onInitData();
        debug('INIT:ISINITIALIZED');
        return;
      }

      injectToData({
        isFirstLoaded: true,
        injectionMetadata: newMetadata,
        injectionHeight: newHeight
      });
      debug('INIT:USUAL');
    }).catch(() => {
      controller.run('onAction', (0, _everFactory.setCardData)(node, {
        metadata: { ...data.metadata,
          isInitialized: true
        },
        withoutSaving: true
      }));
      injectToData({
        injectionHeight: undefined,
        injectionMetadata: undefined,
        isFirstLoaded: true
      });
    }).finally(() => {
      setLoading(false);
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [containerWidthInPC, shouldLoadAtFirst]);
}
//# sourceMappingURL=useInit.js.map