"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _classnames = _interopRequireDefault(require("classnames"));

var _everBamboo = require("@ali/4ever-bamboo");

var _types = require("../types");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  SubjectPlaceholder,
  TimePlaceholder,
  SubjectParagraph,
  TimeTextParagraph,
  PlaceTextParagraph,
  ReceiversParagraph,
  CommentTextParagraph,
  LoadingWrapper,
  ContainerWrapper,
  BodyWrapper,
  ExtraArea,
  CommentTextWrapper,
  CALENDAR_CARD_MAX_RECEIVER_WIDTH,
  CALENDAR_CARD_PADDING_LEN
} = _everBamboo.CalendarCardPlugin;

const renderLoadingWrapper = props => {
  const {
    widthRange,
    isLoading,
    text
  } = props;
  if (isLoading && !text) return /*#__PURE__*/_createElement(LoadingWrapper, {
    widthRange: widthRange
  });
  return text || null;
};

const throttleHandleStopPropagation = (0, _lodash.throttle)(event => {
  event.stopPropagation();
}, 150, {
  leading: true
});

const Container = /*#__PURE__*/_react.default.memo(props => {
  const {
    locale,
    metadata,
    width,
    isSelected,
    jumpToCalendar,
    openProfile,
    refresh,
    isMobile,
    isFirstLoaded,
    isLoading,
    isChangeData,
    refreshTipsNode,
    handleCreateCalendar,
    createCalendarBtn
  } = props;
  let currentLoading = isLoading;
  if (isMobile || isFirstLoaded) currentLoading = false;
  const {
    time,
    place,
    comment,
    subject = '',
    isPlaceholder
  } = metadata || {};
  const {
    viewCalendardetails,
    refresh: refreshToast,
    refreshTips
  } = locale || {};
  const innerWidth = width === undefined || isMobile ? 'auto' : width - CALENDAR_CARD_PADDING_LEN * 2;
  const subjectRange = (0, _lodash.isNumber)(width) ? width : CALENDAR_CARD_MAX_RECEIVER_WIDTH;
  const containerStyle = (0, _react.useMemo)(() => ({
    height: 'auto',
    width: 'auto'
  }), []);
  const jumpToCalendarFactory = (0, _react.useCallback)((0, _lodash.memoize)(eventType => {
    return () => {
      if (isPlaceholder && handleCreateCalendar && _types.JumpToCalendarEventType.DOUBLECLICK === eventType) {
        handleCreateCalendar();
        return;
      }

      if (!jumpToCalendar) return;
      jumpToCalendar(eventType);
    };
  }), [isPlaceholder, handleCreateCalendar, jumpToCalendar]); // FIX: 鼠标松开后卡片内选区消失的问题

  const handleStopPropagation = (0, _react.useCallback)(event => {
    event.persist();
    throttleHandleStopPropagation(event);
  }, []);

  const className = _react.default.useMemo(() => (0, _classnames.default)({
    'card-calendar-selected': isSelected,
    placeholder: isPlaceholder
  }), [isPlaceholder, isSelected]);

  const subjectNode = isPlaceholder ? /*#__PURE__*/_createElement(SubjectPlaceholder, {
    onClick: handleCreateCalendar
  }, subject) : subject; // 移动端增加 20px间距

  const subjectInnerWidth = isMobile ? `calc(100% - ${CALENDAR_CARD_PADDING_LEN * 2 + 20}px)` : innerWidth;
  const timeNode = isPlaceholder ? /*#__PURE__*/_createElement(TimePlaceholder, {
    onClick: handleCreateCalendar
  }, time) : time;
  return /*#__PURE__*/_createElement(ContainerWrapper, {
    className: className,
    style: containerStyle,
    onDoubleClick: jumpToCalendarFactory(_types.JumpToCalendarEventType.DOUBLECLICK),
    onMouseDown: handleStopPropagation,
    onClick: handleStopPropagation
  }, /*#__PURE__*/_createElement(BodyWrapper, null, /*#__PURE__*/_createElement(SubjectParagraph, {
    isPlaceholder: isPlaceholder,
    innerWidth: subjectInnerWidth,
    subject: renderLoadingWrapper({
      widthRange: `${subjectRange * 0.75}px`,
      isLoading: currentLoading,
      text: subjectNode
    }),
    jumpToCalendar: jumpToCalendarFactory(_types.JumpToCalendarEventType.TITLE)
  }), /*#__PURE__*/_createElement(TimeTextParagraph, null, renderLoadingWrapper({
    widthRange: '50%',
    isLoading: currentLoading,
    text: timeNode
  })), isPlaceholder ? null : /*#__PURE__*/_createElement(PlaceTextParagraph, null, renderLoadingWrapper({
    widthRange: '50%',
    isLoading: currentLoading,
    text: place
  })), /*#__PURE__*/_createElement(ReceiversParagraph, {
    isLoading: currentLoading,
    locale: locale,
    metadata: metadata,
    innerWidth: innerWidth,
    openProfile: isPlaceholder ? handleCreateCalendar : openProfile,
    jumpToCalendar: jumpToCalendarFactory(_types.JumpToCalendarEventType.RECEIVER)
  }), comment ? /*#__PURE__*/_createElement(CommentTextParagraph, null, /*#__PURE__*/_createElement(CommentTextWrapper, null, comment)) : null, /*#__PURE__*/_createElement(ExtraArea, {
    tipsNode: refreshTipsNode,
    isOnlyRefresh: isMobile,
    isLoading: isLoading,
    isPlaceholder: isPlaceholder,
    createCalendarBtn: createCalendarBtn,
    isChangeData: isChangeData,
    viewCalendardetails: viewCalendardetails,
    refreshToast: refreshToast,
    refreshTips: refreshTips,
    jumpToCalendar: jumpToCalendarFactory(_types.JumpToCalendarEventType.ICON),
    refreshCalendar: refresh
  })));
});

var _default = Container;
exports.default = _default;
//# sourceMappingURL=Container.js.map