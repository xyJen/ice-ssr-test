"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBlankOrEmoji = isBlankOrEmoji;
exports.isLatin = isLatin;
exports.shouldDeleteSpacing = shouldDeleteSpacing;
exports.shouldAutoSpacing = shouldAutoSpacing;
exports.getPreText = getPreText;
exports.getNextText = getNextText;
exports.shouldDeleteSiblingSpacing = shouldDeleteSiblingSpacing;

var _everCangjie = require("@ali/4ever-cangjie");

const SPACING = ' ';
/**
 * 判断是否为空白符或emoji
 * 处于性能考虑不做 unicode split，所有长度大于 1 的 grapheme 都被视为 emoji
 */

function isBlankOrEmoji(char) {
  // char.length > 1: 👨‍👩‍👧‍👦
  if (!char || char.length > 1 || /\s/.test(char)) return true;
  return false;
}
/**
 * 检测是够为常见拉丁文
 * ascii: https://www.ascii-code.com/
 * https://newbedev.com/regex-with-extended-latin-alphabet-a-o-u-e-ss
 */


function isLatin(char) {
  // C0 到 FF 不一定包含所有变形，如: Ŭ
  // /[A-z|0-9|\u00C0-\u00FF]/.test(undefined) = true
  return char && /[A-z|0-9|\u00C0-\u00FF]/.test(char);
}
/**
 * 判断是否应该删除空格
 * 首先，应该满足在西文前后输入：
 * 中文 [输入:中文][光标]Char：删除前面空格
 * Char[光标][输入:中文] 中文：删除后面空格
 * 其次，必须满足以下 pattern：
 *     a          b          c
 * eastAsian   spacing   eastAsian
 * 另外用户如果是选中内容输入，我们不做空格清除，原因在于无法准确判断用户意图，例如：
 *     [-----选区-----] 
 * 中文   Char 中文中文中文中文
 * 我们难以判断此时用户是想输入内容与后面内容联系还是与前面内容联系
 */


function shouldDeleteSpacing(a, b, c, sibling, isExpanded) {
  if (isExpanded || b !== SPACING || !isLatin(sibling)) return false;
  return _everCangjie.textUtils.isChineseChar(a) && _everCangjie.textUtils.isChineseChar(c);
}
/**
 * 判断两个字符之间是否应该 autoSpacing
 */


function shouldAutoSpacing(a, b) {
  // 有任意一个为空白符 或 多码点 unicode 则不加 spacing
  if (isBlankOrEmoji(a) || isBlankOrEmoji(b)) return false; // 有任意一个为标点 则不加 spacing

  if (_everCangjie.textUtils.isPunc(a) || _everCangjie.textUtils.isPunc(b)) return false;
  return isLatin(a) !== isLatin(b);
}
/**
 * 获取节点文本
 */


function getNodeText(node, start, end) {
  if (!node) return []; // perf: use Array.from 避免复杂的 unicode 拆分

  return Array.from(node.text.slice(start, end));
}
/**
 * 获取当前选区前后的文字
 * @param controller 
 */


function getPreText(controller) {
  const {
    document,
    selection
  } = controller.value;
  const {
    start
  } = selection.convertToTextPoints(document);
  const startTextNode = document.getNode(start.key);
  return getNodeText(startTextNode, 0, start.offset);
}

function getNextText(controller) {
  const {
    document,
    selection
  } = controller.value;
  const {
    end
  } = selection.convertToTextPoints(document);
  const endTextNode = document.getNode(end.key);
  return getNodeText(endTextNode, end.offset);
}
/**
 * 西文中间允许有空格
 */


function shouldKeepSpcing(a, b) {
  return isLatin(a) && isLatin(b);
}
/**
 * 连续空格删除逻辑
 * 首先，必须是连续空格相邻
 *     a          b          c          d
 *             spacing    spacing
 * 其次，分别判断 deleted 和 a/b 的类型以决定是否删除对应空格
 * 最后，西文之间是需要空格的，但我们难以判断连续空格前后的语义，因此保留一个空格
 */


function shouldDeleteSiblingSpacing(a, b, c, d, deleted) {
  // 非连续空格不处理
  if (isBlankOrEmoji(deleted) || b !== SPACING || c !== SPACING) return [false, false]; // 特别注意：照顾英文输入习惯，空格留在前面

  const shoudDeleteBefore = shouldAutoSpacing(a, deleted || '') && !shouldKeepSpcing(a, d);
  const shoudDeleteAfter = shouldAutoSpacing(deleted || '', d);
  return [shoudDeleteBefore, shoudDeleteAfter];
}
//# sourceMappingURL=utils.js.map