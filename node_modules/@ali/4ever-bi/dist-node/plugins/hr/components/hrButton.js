"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HrButton = HrButton;
exports.HrWeight = exports.HrStyle = exports.HrColor = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _everBamboo = require("@ali/4ever-bamboo");

var _weToolbar = require("@ali/we-toolbar");

var _everUtils = require("@ali/4ever-utils");

var _actions = require("../actions");

var _constants = require("../constants");

var _everPluginPref = require("@ali/4ever-plugin-pref");

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_weDesign.LinetypeNormal, null);

function HrButton(props) {
  const {
    controller,
    locale
  } = props; // check if color changes

  const onChange = React.useCallback(payload => {
    const data = (0, _everUtils.parseValueToJsonML)(payload, _everUtils.MAPPING);
    controller.run('onAction', (0, _actions.insertHr)(data));
  }, [controller]);
  const icon = React.useMemo(() => _ref, []);
  return /*#__PURE__*/_createElement(_weDesign.Button, {
    title: locale.buttonTitle,
    bordered: false,
    testid: "bi-toolbar-hrline",
    icon: icon,
    onClick: onChange,
    role: _everBamboo.PluginRoles.hr
  });
}

const HrColor = props => {
  const {
    controller,
    locale,
    ...rest
  } = props;

  const onChange = color => {
    const data = (0, _everUtils.parseValueToJsonML)({
      color
    }, _everUtils.MAPPING);
    controller.run('onAction', (0, _actions.insertHr)(data));
  };

  const {
    focusBlock
  } = controller.value;
  let parsedPayload;

  if (focusBlock) {
    const payload = focusBlock.data;
    parsedPayload = (0, _everUtils.parseJsonMLToValue)(payload, _everUtils.MAPPING);
  }

  const getColorPanelMode = React.useCallback(() => controller.query('getColorPanelMode')?.mode, [controller]);
  const handleSelectValueChange = React.useCallback(mode => {
    controller.run('onAction', (0, _everPluginPref.setColorPanelMode)({
      mode
    }));
  }, [controller]);
  return /*#__PURE__*/_createElement(_weToolbar.ColorPicker, (0, _extends2.default)({}, rest, {
    title: locale.colorButtonTitle,
    btnType: _weToolbar.EColorPickerIcon.backgroundfont,
    color: parsedPayload?.color,
    onColorPicker: onChange,
    defaultColor: _constants.DEFAULT_HR_COLOR,
    automaticColor: "#404040",
    role: _everBamboo.PluginRoles.hrColor,
    showToggleSelect: true,
    getColorPanelMode: getColorPanelMode,
    onSelectValueChange: handleSelectValueChange
  }));
};

exports.HrColor = HrColor;

var _ref2 = /*#__PURE__*/_createElement(_weDesign.LinetypeNormal, null);

const HrStyle = props => {
  const {
    controller,
    locale,
    ...rest
  } = props;

  const onChange = lineType => {
    const data = (0, _everUtils.parseValueToJsonML)({
      lineType
    }, _everUtils.MAPPING);
    controller.run('onAction', (0, _actions.insertHr)(data));
  };

  const {
    focusBlock
  } = controller.value;
  let parsedPayload;

  if (focusBlock) {
    const payload = focusBlock.data;
    parsedPayload = (0, _everUtils.parseJsonMLToValue)(payload, _everUtils.MAPPING);
  } // 受控模式


  return /*#__PURE__*/_createElement(_weDesign.CommonLineSelect, (0, _extends2.default)({}, rest, {
    title: locale.style,
    color: "#000000",
    length: 63,
    lineType: parsedPayload?.lineType,
    onLineTypeChange: onChange,
    customTrigger: () => _ref2,
    bordered: false,
    role: _everBamboo.PluginRoles.hrStyle
  }));
};

exports.HrStyle = HrStyle;

var _ref3 = /*#__PURE__*/_createElement(_weDesign.LinethicknessNormal, null);

const HrWeight = props => {
  const {
    controller,
    locale,
    ...rest
  } = props;

  const onChange = size => {
    const data = (0, _everUtils.parseValueToJsonML)({
      size
    }, _everUtils.MAPPING);
    controller.run('onAction', (0, _actions.insertHr)(data));
  };

  const {
    focusBlock
  } = controller.value;
  let parsedPayload = {};

  if (focusBlock) {
    const payload = focusBlock.data;
    parsedPayload = (0, _everUtils.parseJsonMLToValue)(payload, _everUtils.MAPPING);
  }

  const {
    size: width,
    lineType = 'single'
  } = parsedPayload;
  let lineWidthList = _weDesign.commonLineMap[lineType]?.sizeList;

  if (!lineWidthList) {
    lineWidthList = _weDesign.commonLineMap.single.sizeList;
  }

  return /*#__PURE__*/_createElement(_weDesign.Select, (0, _extends2.default)({}, rest, {
    title: locale.weight,
    value: width,
    className: "",
    renderTrigger: () => _ref3,
    selectable: true,
    onChange: onChange,
    testid: "hr-weight-button",
    role: _everBamboo.PluginRoles.hrWeight
  }), lineWidthList.map(size => {
    return /*#__PURE__*/_createElement(_weDesign.SelectOption, {
      key: size,
      value: size,
      testid: `hr-weight-${size}`
    }, /*#__PURE__*/_createElement("div", {
      style: {
        marginRight: 2
      }
    }, size, "pt"), /*#__PURE__*/_createElement(_weDesign.CommonLine, {
      length: 63,
      lineType: "single",
      color: "black",
      size: size
    }));
  }));
};

exports.HrWeight = HrWeight;
//# sourceMappingURL=hrButton.js.map