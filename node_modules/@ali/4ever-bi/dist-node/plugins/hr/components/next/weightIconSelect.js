"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WeightIconSelect = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _weDesignNext = require("@ali/we-design-next");

var _everBamboo = require("@ali/4ever-bamboo");

var _weDesign = require("@ali/we-design");

var _everComponent = require("@ali/4ever-component");

var _everUtils = require("@ali/4ever-utils");

var _actions = require("../../actions");

var _constants = require("./constants");

const _createElement = /*#__PURE__*/_react.default.createElement;

const MenuItemWrapper = /*#__PURE__*/_styledComponents.default.div(["display:flex;flex-direction:row;align-items:center;"]);

const MenuItemText = /*#__PURE__*/_styledComponents.default.span(["margin-right:4px;"]);

var _ref = /*#__PURE__*/_createElement(_everComponent.IconLineWeight, null);

const WeightIconSelect = props => {
  const {
    getNode,
    controller,
    onOverlayVisibleChange,
    locale
  } = props;
  const node = getNode();

  const [size, setSize] = _react.default.useState(node?.data?.sz);

  const getContainer = _everComponent.HoverToolbarHooks.useGetContainer();

  const [isPopoverVisible, setPopoverVisible] = _everComponent.HoverToolbarHooks.usePopoverVisible('hr.weight', onOverlayVisibleChange);

  const {
    sizeList
  } = _weDesign.commonLineMap.single;
  const items = sizeList.map(sz => ({
    key: String(sz),
    selected: String(sz) === String(size),
    title: String(sz)
  }));

  const handleSelect = _react.default.useCallback(([lineSize]) => {
    const node = getNode();
    if (!node) return;
    const data = (0, _everUtils.parseValueToJsonML)({
      size: lineSize
    }, _everUtils.MAPPING);
    controller.run('onAction', (0, _actions.updateHr)({
      data,
      node
    }));
    setSize(lineSize);
    setPopoverVisible(false);
  }, [getNode, onOverlayVisibleChange, setPopoverVisible]);

  if (!node) return null;
  return /*#__PURE__*/_createElement(_weDesignNext.TBIconMenu, {
    overlay: /*#__PURE__*/_createElement(_weDesignNext.Menu, {
      items: items,
      renderItem: item => {
        const {
          key: size
        } = item;
        return /*#__PURE__*/_createElement(_weDesignNext.Menu.Item, {
          key: size,
          "data-testid": `option-${size}`
        }, /*#__PURE__*/_createElement(MenuItemWrapper, null, /*#__PURE__*/_createElement(MenuItemText, null, size, "pt"), /*#__PURE__*/_createElement(_weDesign.CommonLine, {
          lineType: "single",
          size: Number(size),
          length: _constants.LINE_LENGTH,
          color: "black"
        })));
      },
      onSelect: handleSelect
    }),
    icon: _ref,
    onVisibleChange: setPopoverVisible,
    overlayVisible: isPopoverVisible,
    placement: "bottomLeft",
    getContainer: getContainer,
    tooltip: locale.weight,
    testid: "bi-toolbar-hr-weight",
    role: _everBamboo.PluginRoles.hrWeight
  });
};

exports.WeightIconSelect = WeightIconSelect;
//# sourceMappingURL=weightIconSelect.js.map