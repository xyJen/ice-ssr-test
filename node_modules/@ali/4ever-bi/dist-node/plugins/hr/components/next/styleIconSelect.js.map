{"version":3,"sources":["../../../../../../src/plugins/hr/components/next/styleIconSelect.tsx"],"names":["StyleIconSelect","props","getNode","controller","onOverlayVisibleChange","locale","node","type","setType","React","useState","data","getContainer","HoverToolbarHooks","useGetContainer","isOverlayVisible","setOverlayVisible","usePopoverVisible","items","Object","keys","commonLineMap","map","key","selected","title","handleSelect","useCallback","lineType","MAPPING","run","maxHeight","item","line","defaultSize","size","LINE_LENGTH","style","PluginRoles","hrStyle"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAGA;;AACA;;AACA;;uBAT4B,a;;wBAsEhB,eAAC,2BAAD,O;;AApDL,MAAMA,eAAgD,GAAIC,KAAD,IAAW;AACzE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA,sBAAvB;AAA+CC,IAAAA;AAA/C,MAA0DJ,KAAhE;AACA,QAAMK,IAAI,GAAGJ,OAAO,EAApB;;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBC,eAAMC,QAAN,CAAiBJ,IAAD,EAAiBK,IAAlB,EAAmCJ,IAAnC,IAA2C,QAA1D,CAAxB;;AACA,QAAMK,YAAY,GAAGC,iCAAkBC,eAAlB,EAArB;;AACA,QAAM,CAACC,gBAAD,EAAmBC,iBAAnB,IAAwCH,iCAAkBI,iBAAlB,CAAoC,UAApC,EAAgDb,sBAAhD,CAA9C;;AAEA,QAAMc,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYC,uBAAZ,EAA2BC,GAA3B,CAAgCC,GAAD,KAAU;AACrDA,IAAAA,GADqD;AAErDC,IAAAA,QAAQ,EAAEjB,IAAI,KAAKgB,GAFkC;AAGrDE,IAAAA,KAAK,EAAEF;AAH8C,GAAV,CAA/B,CAAd;;AAMA,QAAMG,YAAY,GAAGjB,eAAMkB,WAAN,CAAkB,CAAC,CAACC,QAAD,CAAD,KAAgB;AACrD,UAAMtB,IAAI,GAAGJ,OAAO,EAApB;AACA,QAAI,CAACI,IAAL,EAAW;AACX,UAAMK,IAAI,GAAG,mCAAmB;AAAEiB,MAAAA;AAAF,KAAnB,EAA+CC,kBAA/C,CAAb;AACA1B,IAAAA,UAAU,CAAC2B,GAAX,CAAe,UAAf,EAA2B,uBAAS;AAAEnB,MAAAA,IAAF;AAAQL,MAAAA;AAAR,KAAT,CAA3B;AACAE,IAAAA,OAAO,CAACoB,QAAD,CAAP;AACAZ,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,GAPoB,EAOlB,CAACd,OAAD,EAAUE,sBAAV,EAAkCY,iBAAlC,CAPkB,CAArB;;AASA,MAAI,CAACV,IAAL,EAAW,OAAO,IAAP;AAEX,sBACE,eAAC,wBAAD;AACE,IAAA,OAAO,eACL,eAAC,kBAAD;AACE,MAAA,KAAK,EAAEY,KADT;AAEE,MAAA,KAAK,EAAE;AAAEa,QAAAA,SAAS,EAAE;AAAb,OAFT;AAGE,MAAA,UAAU,EAAGC,IAAD,IAAU;AACpB,cAAM;AAAET,UAAAA;AAAF,YAAUS,IAAhB;AACA,cAAMC,IAAI,GAAGZ,wBAAcE,GAAd,CAAb;AACA,YAAI,CAACU,IAAL,EAAW,OAAO,IAAP;AACX,cAAM;AAAEC,UAAAA,WAAW,EAAEC;AAAf,YAAwBF,IAA9B;AACA,4BACE,eAAC,kBAAD,CAAM,IAAN;AACE,UAAA,GAAG,EAAEV,GADP;AAEE,yBAAc,UAASA,GAAI;AAF7B,wBAIE,eAAC,oBAAD;AACE,UAAA,QAAQ,EAAGA,GADb;AAEE,UAAA,IAAI,EAAEY,IAFR;AAGE,UAAA,MAAM,EAAEC;AAHV,UAJF,CADF;AAaD,OArBH;AAsBE,MAAA,QAAQ,EAAEV;AAtBZ,MAFJ;AA2BE,IAAA,IAAI,MA3BN;AA4BE,IAAA,cAAc,EAAEX,gBA5BlB;AA6BE,IAAA,eAAe,EAAEC,iBA7BnB;AA8BE,IAAA,SAAS,EAAC,YA9BZ;AA+BE,IAAA,YAAY,EAAEJ,YA/BhB;AAgCE,IAAA,OAAO,EAAEP,MAAM,CAACgC,KAhClB;AAiCE,IAAA,MAAM,EAAC,qBAjCT;AAkCE,IAAA,IAAI,EAAEC,wBAAYC;AAlCpB,IADF;AAsCD,CA9DM","sourcesContent":["import React from 'react';\nimport { TBIconMenu, Menu } from '@ali/we-design-next';\n// TODO: @淼淼 升级并迁移到 we-icon, commonLineMap 迁移到 we-design-nexts\nimport { commonLineMap, CommonLine, TLineStyle } from '@ali/we-design';\nimport { IconLineType, HoverToolbarHooks } from '@ali/4ever-component';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { Controller, Node, Block } from '@ali/4ever-cangjie';\nimport { HrData } from '@ali/4ever-mo';\nimport { MAPPING, parseValueToJsonML, IHrPayload } from '@ali/4ever-utils';\nimport { updateHr } from '../../actions';\nimport { LINE_LENGTH } from './constants';\n\nexport interface IStyleIconSelectProps {\n  controller: Controller;\n  getNode: () => Node | null;\n  onOverlayVisibleChange: (v: boolean) => void;\n  locale: Record<string, string>;\n}\n\nexport const StyleIconSelect: React.FC<IStyleIconSelectProps> = (props) => {\n  const { getNode, controller, onOverlayVisibleChange, locale } = props;\n  const node = getNode();\n  const [type, setType] = React.useState(((node as Block)?.data as HrData)?.type || 'single');\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('hr.style', onOverlayVisibleChange);\n\n  const items = Object.keys(commonLineMap).map((key) => ({\n    key,\n    selected: type === key,\n    title: key,\n  }));\n\n  const handleSelect = React.useCallback(([lineType]) => {\n    const node = getNode();\n    if (!node) return;\n    const data = parseValueToJsonML({ lineType } as IHrPayload, MAPPING);\n    controller.run('onAction', updateHr({ data, node }));\n    setType(lineType);\n    setOverlayVisible(false);\n  }, [getNode, onOverlayVisibleChange, setOverlayVisible]);\n\n  if (!node) return null;\n\n  return (\n    <TBIconMenu\n      overlay={\n        <Menu\n          items={items}\n          style={{ maxHeight: 300 }}\n          renderItem={(item) => {\n            const { key } = item;\n            const line = commonLineMap[key];\n            if (!line) return null;\n            const { defaultSize: size } = line;\n            return (\n              <Menu.Item\n                key={key}\n                data-testid={`option-${key}`}\n              >\n                <CommonLine\n                  lineType={(key as TLineStyle)}\n                  size={size}\n                  length={LINE_LENGTH}\n                />\n              </Menu.Item>\n\n            );\n          }}\n          onSelect={handleSelect}\n        />\n      }\n      icon={<IconLineType />}\n      overlayVisible={isOverlayVisible}\n      onVisibleChange={setOverlayVisible}\n      placement=\"bottomLeft\"\n      getContainer={getContainer}\n      tooltip={locale.style}\n      testid=\"bi-toolbar-hr-style\"\n      role={PluginRoles.hrStyle}\n    />\n  )\n};"],"file":"styleIconSelect.js"}