"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyleIconSelect = void 0;

var _react = _interopRequireDefault(require("react"));

var _weDesignNext = require("@ali/we-design-next");

var _weDesign = require("@ali/we-design");

var _everComponent = require("@ali/4ever-component");

var _everBamboo = require("@ali/4ever-bamboo");

var _everUtils = require("@ali/4ever-utils");

var _actions = require("../../actions");

var _constants = require("./constants");

const _createElement = /*#__PURE__*/_react.default.createElement;

var _ref = /*#__PURE__*/_createElement(_everComponent.IconLineType, null);

const StyleIconSelect = props => {
  const {
    getNode,
    controller,
    onOverlayVisibleChange,
    locale
  } = props;
  const node = getNode();

  const [type, setType] = _react.default.useState(node?.data?.type || 'single');

  const getContainer = _everComponent.HoverToolbarHooks.useGetContainer();

  const [isOverlayVisible, setOverlayVisible] = _everComponent.HoverToolbarHooks.usePopoverVisible('hr.style', onOverlayVisibleChange);

  const items = Object.keys(_weDesign.commonLineMap).map(key => ({
    key,
    selected: type === key,
    title: key
  }));

  const handleSelect = _react.default.useCallback(([lineType]) => {
    const node = getNode();
    if (!node) return;
    const data = (0, _everUtils.parseValueToJsonML)({
      lineType
    }, _everUtils.MAPPING);
    controller.run('onAction', (0, _actions.updateHr)({
      data,
      node
    }));
    setType(lineType);
    setOverlayVisible(false);
  }, [getNode, onOverlayVisibleChange, setOverlayVisible]);

  if (!node) return null;
  return /*#__PURE__*/_createElement(_weDesignNext.TBIconMenu, {
    overlay: /*#__PURE__*/_createElement(_weDesignNext.Menu, {
      items: items,
      style: {
        maxHeight: 300
      },
      renderItem: item => {
        const {
          key
        } = item;
        const line = _weDesign.commonLineMap[key];
        if (!line) return null;
        const {
          defaultSize: size
        } = line;
        return /*#__PURE__*/_createElement(_weDesignNext.Menu.Item, {
          key: key,
          "data-testid": `option-${key}`
        }, /*#__PURE__*/_createElement(_weDesign.CommonLine, {
          lineType: key,
          size: size,
          length: _constants.LINE_LENGTH
        }));
      },
      onSelect: handleSelect
    }),
    icon: _ref,
    overlayVisible: isOverlayVisible,
    onVisibleChange: setOverlayVisible,
    placement: "bottomLeft",
    getContainer: getContainer,
    tooltip: locale.style,
    testid: "bi-toolbar-hr-style",
    role: _everBamboo.PluginRoles.hrStyle
  });
};

exports.StyleIconSelect = StyleIconSelect;
//# sourceMappingURL=styleIconSelect.js.map