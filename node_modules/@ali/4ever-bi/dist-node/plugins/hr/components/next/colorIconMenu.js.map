{"version":3,"sources":["../../../../../../src/plugins/hr/components/next/colorIconMenu.tsx"],"names":["ColorIconMenu","props","getNode","controller","onOverlayVisibleChange","locale","preset","setPreset","React","useState","mode","query","EColorPanelMode","normal","ColorPicker","PRESETS","DEFAULT","key","ART","getContainer","HoverToolbarHooks","useGetContainer","isOverlayVisible","setOverlayVisible","usePopoverVisible","node","initColor","data","MAPPING","color","DEFAULT_HR_COLOR","art","run","colorButtonTitle","block","PluginRoles","hrColor"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;uBAP4B,a;AAc3B;;wBAmCW,eAAC,sBAAD,O;;AAjCL,MAAMA,aAA4C,GAAIC,KAAD,IAAW;AACrE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA,sBAAvB;AAA+CC,IAAAA;AAA/C,MAA0DJ,KAAhE;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBC,KAAK,CAACC,QAAN,CAAe,MAAM;AAC/C,UAAMC,IAAI,GAAGP,UAAU,CAACQ,KAAX,CAAiB,mBAAjB,GAAuCD,IAApD;AACA,UAAMJ,MAAM,GAAGI,IAAI,KAAKE,2BAAgBC,MAAzB,GAAkCC,2BAAYC,OAAZ,CAAoBC,OAApB,CAA4BC,GAA9D,GAAoEH,2BAAYC,OAAZ,CAAoBG,GAApB,CAAwBD,GAA3G;AACA,WAAOX,MAAP;AACD,GAJ2B,CAA5B;;AAKA,QAAMa,YAAY,GAAGC,iCAAkBC,eAAlB,EAArB;;AACA,QAAM,CAACC,gBAAD,EAAmBC,iBAAnB,IAAwCH,iCAAkBI,iBAAlB,CAAoC,UAApC,EAAgDpB,sBAAhD,CAA9C;;AACA,QAAMqB,IAAI,GAAGvB,OAAO,EAApB;AACA,MAAI,CAACuB,IAAL,EAAW,OAAO,IAAP;;AACX,QAAMC,SAAS,GAAG,mCAAoBD,IAAD,CAAgBE,IAAnC,EAAmDC,kBAAnD,EAA4DC,KAA5D,IAAqEC,2BAAvF;;AAEA,sBACE,eAAC,8BAAD;AACE,IAAA,qBAAqB,EAAGxB,MAAD,IAAoB;AACzC,UAAII,IAAI,GAAGE,2BAAgBC,MAA3B;;AACA,UAAIP,MAAM,KAAKQ,2BAAYC,OAAZ,CAAoBG,GAApB,CAAwBD,GAAvC,EAA4C;AAC1CP,QAAAA,IAAI,GAAGE,2BAAgBmB,GAAvB;AACD;;AACD5B,MAAAA,UAAU,CAAC6B,GAAX,CAAe,UAAf,EAA2B,uCAAkB;AAAEtB,QAAAA;AAAF,OAAlB,CAA3B;AACAH,MAAAA,SAAS,CAACD,MAAD,CAAT;AACD,KARH;AASE,IAAA,aAAa,EAAEA,MATjB;AAUE,IAAA,KAAK,EAAED,MAAM,CAAC4B,gBAVhB;AAWE,IAAA,eAAe,EAAEV,iBAXnB;AAYE,IAAA,cAAc,EAAED,gBAZlB;AAaE,IAAA,KAAK,EAAEI,SAbT;AAcE,IAAA,aAAa,EAAGG,KAAD,IAAW;AACxB,YAAMK,KAAK,GAAGhC,OAAO,EAArB;AACA,YAAMyB,IAAI,GAAG,mCAAmB;AAAEE,QAAAA;AAAF,OAAnB,EAA4CD,kBAA5C,CAAb;AACAzB,MAAAA,UAAU,CAAC6B,GAAX,CAAe,UAAf,EAA2B,uBAAS;AAAEP,QAAAA,IAAI,EAAES,KAAR;AAAeP,QAAAA;AAAf,OAAT,CAA3B;AACD,KAlBH;AAmBE,IAAA,IAAI,MAnBN;AAoBE,IAAA,WAAW,MApBb;AAqBE,IAAA,SAAS,EAAEG,2BArBb;AAsBE,IAAA,YAAY,EAAEX,YAtBhB;AAuBE,IAAA,MAAM,EAAC,qBAvBT;AAwBE,IAAA,IAAI,EAAEgB,wBAAYC;AAxBpB,IADF;AA4BD,CAzCM","sourcesContent":["import * as React from 'react';\nimport { EColorPanelMode } from '@ali/we-toolbar';\nimport { Controller, Node, Block } from '@ali/4ever-cangjie';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { BaseColorPicker, IconPen, ColorPicker, HoverToolbarHooks } from '@ali/4ever-component';\nimport { MAPPING, parseJsonMLToValue, parseValueToJsonML, IHrPayload, IHrASL } from '@ali/4ever-utils';\nimport { DEFAULT_HR_COLOR } from '../../constants';\nimport { updateHr } from '../../actions';\nimport { setColorPanelMode } from '@ali/4ever-plugin-pref';\n\nexport interface IColorIconMenuProps {\n  getNode: () => Node | null;\n  controller: Controller;\n  locale: Record<string, string>;\n  onOverlayVisibleChange: (visible: boolean) => void;\n};\n\nexport const ColorIconMenu: React.FC<IColorIconMenuProps> = (props) => {\n  const { getNode, controller, onOverlayVisibleChange, locale } = props;\n  const [preset, setPreset] = React.useState(() => {\n    const mode = controller.query('getColorPanelMode')?.mode;\n    const preset = mode === EColorPanelMode.normal ? ColorPicker.PRESETS.DEFAULT.key : ColorPicker.PRESETS.ART.key;\n    return preset;\n  });\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('hr.color', onOverlayVisibleChange);\n  const node = getNode();\n  if (!node) return null;\n  const initColor = parseJsonMLToValue((node as Block).data as IHrASL, MAPPING).color || DEFAULT_HR_COLOR;\n  \n  return (\n    <BaseColorPicker\n      onCurrentPresetChange={(preset: string) => {\n        let mode = EColorPanelMode.normal;\n        if (preset === ColorPicker.PRESETS.ART.key) {\n          mode = EColorPanelMode.art;\n        }\n        controller.run('onAction', setColorPanelMode({ mode }));\n        setPreset(preset);\n      }}\n      currentPreset={preset}\n      title={locale.colorButtonTitle}\n      onVisibleChange={setOverlayVisible}\n      overlayVisible={isOverlayVisible}\n      color={initColor}\n      onColorChange={(color) => {\n        const block = getNode();\n        const data = parseValueToJsonML({ color } as IHrPayload, MAPPING);\n        controller.run('onAction', updateHr({ node: block, data }));\n      }}\n      icon={<IconPen />}\n      useSubColor\n      autoColor={DEFAULT_HR_COLOR}\n      getContainer={getContainer}\n      testid=\"bi-toolbar-hr-color\"\n      role={PluginRoles.hrColor}\n    />\n  )\n}\n"],"file":"colorIconMenu.js"}