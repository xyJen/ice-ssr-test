"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorIconMenu = void 0;

var React = _interopRequireWildcard(require("react"));

var _weToolbar = require("@ali/we-toolbar");

var _everBamboo = require("@ali/4ever-bamboo");

var _everComponent = require("@ali/4ever-component");

var _everUtils = require("@ali/4ever-utils");

var _constants = require("../../constants");

var _actions = require("../../actions");

var _everPluginPref = require("@ali/4ever-plugin-pref");

const _createElement = /*#__PURE__*/React.createElement;
;

var _ref = /*#__PURE__*/_createElement(_everComponent.IconPen, null);

const ColorIconMenu = props => {
  const {
    getNode,
    controller,
    onOverlayVisibleChange,
    locale
  } = props;
  const [preset, setPreset] = React.useState(() => {
    const mode = controller.query('getColorPanelMode')?.mode;
    const preset = mode === _weToolbar.EColorPanelMode.normal ? _everComponent.ColorPicker.PRESETS.DEFAULT.key : _everComponent.ColorPicker.PRESETS.ART.key;
    return preset;
  });

  const getContainer = _everComponent.HoverToolbarHooks.useGetContainer();

  const [isOverlayVisible, setOverlayVisible] = _everComponent.HoverToolbarHooks.usePopoverVisible('hr.color', onOverlayVisibleChange);

  const node = getNode();
  if (!node) return null;

  const initColor = (0, _everUtils.parseJsonMLToValue)(node.data, _everUtils.MAPPING).color || _constants.DEFAULT_HR_COLOR;

  return /*#__PURE__*/_createElement(_everComponent.BaseColorPicker, {
    onCurrentPresetChange: preset => {
      let mode = _weToolbar.EColorPanelMode.normal;

      if (preset === _everComponent.ColorPicker.PRESETS.ART.key) {
        mode = _weToolbar.EColorPanelMode.art;
      }

      controller.run('onAction', (0, _everPluginPref.setColorPanelMode)({
        mode
      }));
      setPreset(preset);
    },
    currentPreset: preset,
    title: locale.colorButtonTitle,
    onVisibleChange: setOverlayVisible,
    overlayVisible: isOverlayVisible,
    color: initColor,
    onColorChange: color => {
      const block = getNode();
      const data = (0, _everUtils.parseValueToJsonML)({
        color
      }, _everUtils.MAPPING);
      controller.run('onAction', (0, _actions.updateHr)({
        node: block,
        data
      }));
    },
    icon: _ref,
    useSubColor: true,
    autoColor: _constants.DEFAULT_HR_COLOR,
    getContainer: getContainer,
    testid: "bi-toolbar-hr-color",
    role: _everBamboo.PluginRoles.hrColor
  });
};

exports.ColorIconMenu = ColorIconMenu;
//# sourceMappingURL=colorIconMenu.js.map