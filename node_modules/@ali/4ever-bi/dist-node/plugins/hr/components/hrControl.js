"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var ReactDOM = _interopRequireWildcard(require("react-dom"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everBamboo = require("@ali/4ever-bamboo");

const _createElement = /*#__PURE__*/React.createElement;
// HACK: Pi2.0 要求插件尺寸与实际渲染必须保持一致，未来应该对 hr 类型做个映射 @统领
const {
  height: themeHeight
} = _everBamboo.theme.hr; // const ControlPoint = styled.div`
//   width: 14px;
//   height: 14px;
//   box-sizing: border-box;
//   background: #fff;
//   position: absolute;
//   border-radius: 50%;
//   border: 1px solid #ddd;
//   display: ${(props: any) => (props.isActive ? 'visible' : 'none')};
//   &::after {
//     width: 8px;
//     height: 8px;
//     position: absolute;
//     border-radius: 50%;
//     top: 2px;
//     left: 2px;
//     background: #3d8df3;
//     content: '';
//     cursor: ew-resize;
//   }
// `;
// TODO fit-content

const HrWrapper = /*#__PURE__*/_styledComponents.default.div(["position:relative;width:100%;padding:5px 0;background-color:", ";&:hover{background-color:#f4f4f4;};display:flex;align-items:center;& div{width:100%;}"], props => props.isActive ? '#f4f4f4' : '');

/**
 * top: 自身高度除去border / 2
 * left: 自身宽度 / 2
 */
// const ControlPointStart = styled(ControlPoint)`
//   position: absolute;
//   top: 6px;
//   left: -7px;
// `;
// const ControlPointEnd = styled(ControlPoint)`
//   position: absolute;
//   top: 6px;
//   right: -7px;
// `;
class HrControl extends React.Component {
  constructor(props) {
    super(props);

    this.handleMouseMove = e => {
      e.preventDefault();
      e.stopPropagation();
      const gap = 10;
      const X = e.clientX;
      const {
        originX1,
        length,
        originX2,
        offsetX,
        flag
      } = this.state;
      if (!flag) return;
      let finalLen = length;

      if (flag === 'st') {
        if (Math.abs(X - originX1) > gap && originX2 - X > gap) {
          const diffX = X - originX1;
          finalLen = originX2 - X;
          this.setState({
            originX1: X,
            offsetX: diffX + offsetX,
            length: finalLen
          });
        }
      }

      if (flag === 'et') {
        if (Math.abs(X - originX2) > gap && X - originX1 > gap) {
          finalLen = X - originX1;
          this.setState({
            originX2: X,
            length: finalLen
          });
        }
      }

      const {
        onHrChange = () => {},
        editor,
        node
      } = this.props;
      onHrChange(editor, node, {
        length: finalLen
      });
    };

    this.handleMouseUp = e => {
      e.preventDefault();
      e.stopPropagation(); // TODO 建议鼠标收起再赋值

      document.removeEventListener('mousemove', this.handleMouseMove);
      document.removeEventListener('mouseup', this.handleMouseUp);
    };

    this.handleMouseDown = (e, flag) => {
      e.preventDefault();
      e.stopPropagation(); // // 处理逻辑
      // eslint-disable-next-line react/no-find-dom-node

      const target = ReactDOM.findDOMNode(this);
      const targetDomInfo = target.getBoundingClientRect();
      const {
        x,
        width
      } = targetDomInfo;
      this.setState({
        originX1: x,
        originX2: x + width,
        flag
      });
      document.addEventListener('mousemove', this.handleMouseMove);
      document.addEventListener('mouseup', this.handleMouseUp);
    };

    const {
      payload = {}
    } = props;
    const {
      length: _length
    } = payload;
    this.state = {
      length: _length,
      originX1: 0,
      // start point
      originX2: 0,
      // end point
      offsetX: 0,
      flag: '' // 操作是左边还是右边

    };
  }
  /**
   * 移动算法, 计算startPoint 和 length, 即可获得具体位置
   * TODO 需要加入边界范围
   */


  render() {
    const {
      children,
      isSelected,
      attributes
    } = this.props;
    const {
      offsetX
    } = this.state;
    return /*#__PURE__*/_createElement(HrWrapper, (0, _extends2.default)({
      "data-testid": "horizon-line",
      isActive: isSelected,
      style: {
        height: `${themeHeight}px`,
        marginLeft: `${offsetX}px`
      },
      "data-type": "hr"
    }, attributes), children);
  }

}

exports.default = HrControl;
//# sourceMappingURL=hrControl.js.map