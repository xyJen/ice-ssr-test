"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onKeyDown;

var _everCangjie = require("@ali/4ever-cangjie");

var _isHotkey = require("is-hotkey");

var _insertHr = _interopRequireDefault(require("../commands/insertHr"));

const isEnterHotkey = (0, _isHotkey.isKeyHotkey)('enter');
/**
 * 1. 三个及以上 「 * 」
 * 2. 三个及以上 「 - 」
 * 3. 三个及以上 「 — 」 (中文 shift + -, 半个破折号, 与 2 不同)
 */

const REGEXP_HR = /^(\*|-|—)\1{2,}$/;

function onKeyDown(event, controller, next) {
  const {
    value
  } = controller;
  const {
    selection
  } = value;
  if (!selection) return next();
  if (selection.isExpanded) return next();

  if (isEnterHotkey(event) && selection.anchor.isTextPoint()) {
    const {
      startBlock
    } = value;
    if (!startBlock) return next();
    const chars = startBlock.text.slice(0, selection.anchor.offset).replace(/\s*/g, '');

    const isOnlyHrSymbolParagraph = block => {
      return block.type === 'paragraph' && (!block.data.ind || block.data.ind.left === 0) && !block.data.list && _everCangjie.Text.isTextList(block.nodes) && REGEXP_HR.test(chars);
    };

    if (isOnlyHrSymbolParagraph(startBlock)) {
      event.preventDefault();
      controller.command(_everCangjie.Commands.moveFocusToStartOfBlock).command(_everCangjie.Commands.del).command(_insertHr.default);
      return controller.dispatch('createTriggerMarkdownAction', {
        mdType: 'hr'
      });
    }
  }

  return next();
}
//# sourceMappingURL=onKeyDown.js.map