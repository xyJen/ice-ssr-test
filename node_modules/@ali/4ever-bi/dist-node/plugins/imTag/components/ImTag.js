"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMeasureWidth = exports.ImTag = void 0;

var _react = _interopRequireWildcard(require("react"));

var _everBamboo = require("@ali/4ever-bamboo");

var _everFactory = require("@ali/4ever-factory");

var _utils = require("../utils");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  IMTAG_MIN_CONTAINER_WIDTH,
  TextWrapper
} = _everBamboo.ImTagPlugin;
const {
  IMTAG_MEASURE_STRING,
  IMTAG_DEFAULT_HEIGHT,
  IMTAG_INIT_WIDTH,
  IMTAG_MAX_WIDTH,
  ImTagContainer
} = _everBamboo.ImTagPlugin;
const {
  preventDefaultOnClick
} = _everBamboo.CalendarCardPlugin;

const ImTag = ({
  props,
  controller,
  imTagConfig
}) => {
  const {
    locale = {
      imFrom: IMTAG_MEASURE_STRING
    },
    jumpToConversition,
    getConversitionNameFromCid
  } = imTagConfig || {};
  const node = props.node;
  const {
    height,
    width = 0,
    metadata
  } = node.data;
  const {
    imTitle = '',
    cid
  } = metadata || {};

  const onClick = _react.default.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();

    if (jumpToConversition && cid) {
      jumpToConversition(cid);
    }
  }, [cid, jumpToConversition]);

  (0, _react.useEffect)(() => {
    if (!getConversitionNameFromCid) return undefined;
    let isStop = false;

    const updateImTitle = async title => {
      let targetWidth = await getMeasureWidth(`${IMTAG_MEASURE_STRING} ${title}`);

      if ( // 不同端渲染时计算的宽度会有 ±2 像素的差异。
      Math.abs(targetWidth - width) < 3 || // Case1： width 为默认宽度时更新标签（后端根据场景不同，选择性设置 imTitle 值，但是宽度未更新）
      // Case2： imTitle 相同时不更新
      width !== IMTAG_INIT_WIDTH && title === imTitle) {
        return;
      }

      if (targetWidth > IMTAG_MAX_WIDTH) targetWidth = IMTAG_MAX_WIDTH;
      const newData = {
        width: targetWidth,
        height: IMTAG_DEFAULT_HEIGHT,
        metadata: {
          cid: cid,
          imTitle: title
        }
      };

      if ((0, _utils.isChangeTagData)(node.data, newData)) {
        controller.run('onAction', (0, _everFactory.setTagData)(node, newData));
      }
    };

    let title = imTitle;
    getConversitionNameFromCid(cid).then(async res => {
      if (isStop) return;
      if (!res.success) return;

      if (res.success) {
        title = res.imTitle;
      }
    }).finally(async () => {
      // Case1 取到最新群名，测量并更新群名；
      // Case2 未取到最新群名（有文档权限无群权限），有可能初始化时的群名的默认宽度不对，需同样测量并更新群名；
      await updateImTitle(title);
    });
    return () => {
      isStop = true;
    };
  }, [cid, controller, getConversitionNameFromCid, imTitle, node, width]);
  return /*#__PURE__*/_createElement(ImTagContainer, {
    width: width,
    height: height,
    onClick: onClick,
    onMouseDown: preventDefaultOnClick,
    text: `${locale.imFrom} ${imTitle}`
  });
}; // 获取测量宽度，最小宽度是28px，字体是14


exports.ImTag = ImTag;

const getMeasureWidth = async text => {
  const {
    width
  } = await (0, _everBamboo.calculatedPluginSize)( /*#__PURE__*/_createElement(TextWrapper, null, text), Number.MAX_SAFE_INTEGER);
  return width + IMTAG_MIN_CONTAINER_WIDTH;
};

exports.getMeasureWidth = getMeasureWidth;
//# sourceMappingURL=ImTag.js.map