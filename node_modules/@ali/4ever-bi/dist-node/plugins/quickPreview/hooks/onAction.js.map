{"version":3,"sources":["../../../../../src/plugins/quickPreview/hooks/onAction.ts"],"names":["createOnAction","configs","onToggleMode","handleAction","action","controller","next","type","Actions","ENTER","setData","value","data","_exitPreview","_mobileFocusedSelection","undefined","EXIT","noScroll","noFocus","payload","selection","command","Commands","select","run","textArea","focus","preventScroll"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEe,SAASA,cAAT,CAAwBC,OAAxB,EAAuD;AACpE,QAAM;AAAEC,IAAAA;AAAF,MAAmBD,OAAO,IAAI,EAApC;AACA,SAAO,SAASE,YAAT,CACLC,MADK,EAELC,UAFK,EAGLC,IAHK,EAIL;AACA,QAAIF,MAAM,CAACG,IAAP,KAAgBC,iBAAQC,KAA5B,EAAmC;AACjCJ,MAAAA,UAAU,CAACK,OAAX,CAAmB,EACjB,GAAGL,UAAU,CAACM,KAAX,CAAiBC,IADH;AAEjBC,QAAAA,YAAY,EAAE,KAFG;AAGjB;AACAC,QAAAA,uBAAuB,EAAEC;AAJR,OAAnB;AAMAb,MAAAA,YAAY,IAAIA,YAAY,CAAC,IAAD,CAA5B;AACD,KARD,MAQO,IAAIE,MAAM,CAACG,IAAP,KAAgBC,iBAAQQ,IAA5B,EAAkC;AACvC,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAwBd,MAAM,CAACe,OAAP,IAAkB,EAAhD;AACA,YAAM;AAAEP,QAAAA;AAAF,UAAWP,UAAU,CAACM,KAA5B;AACA,YAAMS,SAAS,GAAGH,QAAQ,GAAG,IAAH,GAAU,4CAAmBZ,UAAnB,CAApC;;AACA,UAAIe,SAAJ,EAAe;AACbf,QAAAA,UAAU,CAACgB,OAAX,CAAmBC,sBAASC,MAA5B,EAAoCH,SAApC;AACD;;AACDf,MAAAA,UAAU,CAACK,OAAX,CAAmB,EAAE,GAAGE,IAAL;AAAWC,QAAAA,YAAY,EAAE;AAAzB,OAAnB;AACAX,MAAAA,YAAY,IAAIA,YAAY,CAAC,KAAD,CAA5B;;AAEA,UAAI,CAACgB,OAAL,EAAc;AACZb,QAAAA,UAAU,CAACmB,GAAX,CAAe,gBAAf;AACA,cAAMC,QAAQ,GAAG,iCAAmBpB,UAAnB,CAAjB;;AACA,YAAIoB,QAAQ,EAAEC,KAAd,EAAqB;AACnBD,UAAAA,QAAQ,CAACC,KAAT,CAAe;AACbC,YAAAA,aAAa,EAAE;AADF,WAAf;AAGD;AACF;AACF;;AACD,WAAOrB,IAAI,EAAX;AACD,GAlCD;AAmCD","sourcesContent":["import { Action, Controller, Commands } from '@ali/4ever-cangjie';\nimport Actions from '../actions';\nimport { QuickPreviewConfigs } from '../types';\nimport findNativeTextArea from '../utils/findNativeTextArea';\nimport { getScreenSelection } from '../utils/getScreenSelection';\n\nexport default function createOnAction(configs?: QuickPreviewConfigs) {\n  const { onToggleMode } = configs || {};\n  return function handleAction(\n    action: Action,\n    controller: Controller,\n    next: any,\n  ) {\n    if (action.type === Actions.ENTER) {\n      controller.setData({\n        ...controller.value.data,\n        _exitPreview: false,\n        // 进入预览模式时，需要隐藏弹出菜单\n        _mobileFocusedSelection: undefined,\n      });\n      onToggleMode && onToggleMode(true);\n    } else if (action.type === Actions.EXIT) {\n      const { noScroll, noFocus } = action.payload || {};\n      const { data } = controller.value;\n      const selection = noScroll ? null : getScreenSelection(controller);\n      if (selection) {\n        controller.command(Commands.select, selection);\n      }\n      controller.setData({ ...data, _exitPreview: true });\n      onToggleMode && onToggleMode(false);\n\n      if (!noFocus) {\n        controller.run('onCangjieFocus');\n        const textArea = findNativeTextArea(controller);\n        if (textArea?.focus) {\n          textArea.focus({\n            preventScroll: true,\n          });\n        }\n      }\n    }\n    return next();\n  };\n}\n"],"file":"onAction.js"}