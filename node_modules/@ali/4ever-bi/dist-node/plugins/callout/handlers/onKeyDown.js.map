{"version":3,"sources":["../../../../../src/plugins/callout/handlers/onKeyDown.ts"],"names":["onKeyDown","event","controller","next","document","selection","value","key","focusKey","focus","isCollapsed","hotkeys","isEnter","colorBlocks","getClosest","ColorBlocks","isColorBlocks","isBackspaceHotKey","isDeleteHotKey","nodes","length","preventDefault","path","getPath","index","pop","p","Paragraph","create","Text","command","Commands","moveNodeByPath","Path","link","removeNodeByPath","closestTable","Table","isTable","skipSelectAll","getNode","isSelectAll","moveAnchorToStartOfNode","moveFocusToEndOfNode"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,SAASA,SAAT,CACbC,KADa,EAEbC,UAFa,EAGbC,IAHa,EAIb;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BH,UAAU,CAACI,KAA3C;AACA,QAAM;AAAEC,IAAAA,GAAG,EAAEC;AAAP,MAAoBH,SAAS,CAACI,KAApC;;AAEA,MAAIJ,SAAS,CAACK,WAAV,IAAyBC,qBAAQC,OAAR,CAAgBX,KAAhB,CAA7B,EAAqD;AACnD,WAAO,sBAAQA,KAAR,EAAeC,UAAf,EAA2BC,IAA3B,CAAP;AACD;;AAED,QAAMU,WAAW,GAAGT,QAAQ,CAACU,UAAT,CAClBN,QADkB,EAElBO,oBAAYC,aAFM,CAApB;;AAKA,MAAI,CAACH,WAAL,EAAkB;AAChB,WAAOV,IAAI,EAAX;AACD;;AAED,QAAMc,iBAAiB,GAAG,uBAAY,WAAZ,CAA1B;AACA,QAAMC,cAAc,GAAG,uBAAY,QAAZ,CAAvB;;AAEA,MAAID,iBAAiB,CAAChB,KAAD,CAAjB,IAA4BiB,cAAc,CAACjB,KAAD,CAA9C,EAAuD;AACrD,QACEY,WAAW,CAACM,KAAZ,CAAkBC,MAAlB,KAA6B,CAA7B,IACA,kCAAiBP,WAAW,CAACM,KAAZ,CAAkB,CAAlB,CAAjB,CAFF,EAGE;AACAlB,MAAAA,KAAK,CAACoB,cAAN;AACA,YAAMC,IAAI,GAAGlB,QAAQ,CAACmB,OAAT,CAAiBV,WAAW,CAACN,GAA7B,CAAb;AACA,YAAMiB,KAAK,GAAGF,IAAI,CAACG,GAAL,EAAd;;AACA,YAAMC,CAAC,GAAGC,kBAAUC,MAAV,CAAiB;AAAET,QAAAA,KAAK,EAAE,CAACU,kBAAKD,MAAL,EAAD;AAAT,OAAjB,CAAV,CAJA,CAKA;AACA;AACA;;;AACA,aAAO1B,UAAU,CACd4B,OADI,CACIC,sBAASC,cADb,EAC6BC,kBAAKC,IAAL,CAAUZ,IAAV,EAAgB,CAACE,KAAD,EAAQ,CAAR,CAAhB,CAD7B,EAC0DF,IAD1D,EACgEE,KADhE,EAEJM,OAFI,CAEIC,sBAASI,gBAFb,EAE+BF,kBAAKC,IAAL,CAAUZ,IAAV,EAAgB,CAACE,KAAK,GAAG,CAAT,CAAhB,CAF/B,CAAP;AAGD;AACF,GApCD,CAsCA;;;AACA,QAAMY,YAAY,GAAGhC,QAAQ,CAACU,UAAT,CAAoBN,QAApB,EAA8B6B,cAAMC,OAApC,CAArB;AACA,QAAMC,aAAa,GAAGH,YAAY,IAAIvB,WAAW,CAAC2B,OAAZ,CAAoBJ,YAAY,CAAC7B,GAAjC,CAAtC;;AAEA,MAAII,qBAAQ8B,WAAR,CAAoBxC,KAApB,KAA8B,CAACsC,aAAnC,EAAkD;AAChDtC,IAAAA,KAAK,CAACoB,cAAN;AACA,WAAOnB,UAAU,CACd4B,OADI,CACIC,sBAASW,uBADb,EACsC7B,WAAW,CAACM,KAAZ,CAAkB,CAAlB,CADtC,EAEJW,OAFI,CAGHC,sBAASY,oBAHN,EAIH9B,WAAW,CAACM,KAAZ,CAAkBN,WAAW,CAACM,KAAZ,CAAkBC,MAAlB,GAA2B,CAA7C,CAJG,CAAP;AAMD;;AAED,SAAOjB,IAAI,EAAX;AACD","sourcesContent":["import * as React from 'react';\nimport isKeyHotkey from 'is-hotkey';\nimport { Controller, Block, Text, Commands, hotkeys, Path } from '@ali/4ever-cangjie';\nimport { ColorBlocks, Paragraph, Table } from '@ali/4ever-mo';\nimport { isEmptyParagraph } from '@ali/4ever-bamboo';\nimport onEnter from './onEnter';\n\nexport default function onKeyDown(\n  event: React.KeyboardEvent,\n  controller: Controller,\n  next: Function,\n) {\n  const { document, selection } = controller.value;\n  const { key: focusKey } = selection.focus;\n\n  if (selection.isCollapsed && hotkeys.isEnter(event)) {\n    return onEnter(event, controller, next);\n  }\n\n  const colorBlocks = document.getClosest(\n    focusKey,\n    ColorBlocks.isColorBlocks,\n  ) as ColorBlocks | undefined;\n\n  if (!colorBlocks) {\n    return next();\n  }\n\n  const isBackspaceHotKey = isKeyHotkey('backspace');\n  const isDeleteHotKey = isKeyHotkey('delete');\n\n  if (isBackspaceHotKey(event) || isDeleteHotKey(event)) {\n    if (\n      colorBlocks.nodes.length === 1 &&\n      isEmptyParagraph(colorBlocks.nodes[0] as Block)\n    ) {\n      event.preventDefault();\n      const path = document.getPath(colorBlocks.key)!;\n      const index = path.pop()!;\n      const p = Paragraph.create({ nodes: [Text.create()] });\n      // Before: 插入空段落 -> 删除高亮块\n      // Now: 将高亮块中的段落移除到高亮块所在位置 -> 删除空的高亮块\n      // 这样可以避免 Undo 时选区由于 remove_node 移动到高亮块前的节点末尾，无法被选区矫正纠正\n      return controller\n        .command(Commands.moveNodeByPath, Path.link(path, [index, 0]), path, index)\n        .command(Commands.removeNodeByPath, Path.link(path, [index + 1]));\n    }\n  }\n\n  // 如果在嵌套的子元素内全选，就先忽略掉\n  const closestTable = document.getClosest(focusKey, Table.isTable);\n  const skipSelectAll = closestTable && colorBlocks.getNode(closestTable.key);\n\n  if (hotkeys.isSelectAll(event) && !skipSelectAll) {\n    event.preventDefault();\n    return controller\n      .command(Commands.moveAnchorToStartOfNode, colorBlocks.nodes[0])\n      .command(\n        Commands.moveFocusToEndOfNode,\n        colorBlocks.nodes[colorBlocks.nodes.length - 1],\n      );\n  }\n\n  return next();\n}\n"],"file":"onKeyDown.js"}