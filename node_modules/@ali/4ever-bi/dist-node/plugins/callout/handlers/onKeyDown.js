"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onKeyDown;

var _isHotkey = _interopRequireDefault(require("is-hotkey"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _everBamboo = require("@ali/4ever-bamboo");

var _onEnter = _interopRequireDefault(require("./onEnter"));

function onKeyDown(event, controller, next) {
  const {
    document,
    selection
  } = controller.value;
  const {
    key: focusKey
  } = selection.focus;

  if (selection.isCollapsed && _everCangjie.hotkeys.isEnter(event)) {
    return (0, _onEnter.default)(event, controller, next);
  }

  const colorBlocks = document.getClosest(focusKey, _everMo.ColorBlocks.isColorBlocks);

  if (!colorBlocks) {
    return next();
  }

  const isBackspaceHotKey = (0, _isHotkey.default)('backspace');
  const isDeleteHotKey = (0, _isHotkey.default)('delete');

  if (isBackspaceHotKey(event) || isDeleteHotKey(event)) {
    if (colorBlocks.nodes.length === 1 && (0, _everBamboo.isEmptyParagraph)(colorBlocks.nodes[0])) {
      event.preventDefault();
      const path = document.getPath(colorBlocks.key);
      const index = path.pop();

      const p = _everMo.Paragraph.create({
        nodes: [_everCangjie.Text.create()]
      }); // Before: 插入空段落 -> 删除高亮块
      // Now: 将高亮块中的段落移除到高亮块所在位置 -> 删除空的高亮块
      // 这样可以避免 Undo 时选区由于 remove_node 移动到高亮块前的节点末尾，无法被选区矫正纠正


      return controller.command(_everCangjie.Commands.moveNodeByPath, _everCangjie.Path.link(path, [index, 0]), path, index).command(_everCangjie.Commands.removeNodeByPath, _everCangjie.Path.link(path, [index + 1]));
    }
  } // 如果在嵌套的子元素内全选，就先忽略掉


  const closestTable = document.getClosest(focusKey, _everMo.Table.isTable);
  const skipSelectAll = closestTable && colorBlocks.getNode(closestTable.key);

  if (_everCangjie.hotkeys.isSelectAll(event) && !skipSelectAll) {
    event.preventDefault();
    return controller.command(_everCangjie.Commands.moveAnchorToStartOfNode, colorBlocks.nodes[0]).command(_everCangjie.Commands.moveFocusToEndOfNode, colorBlocks.nodes[colorBlocks.nodes.length - 1]);
  }

  return next();
}
//# sourceMappingURL=onKeyDown.js.map