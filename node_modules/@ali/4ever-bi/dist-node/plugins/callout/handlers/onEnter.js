"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onEnter;

var _everCangjie = require("@ali/4ever-cangjie");

var _everUtils = require("@ali/4ever-utils");

var _actions = require("../actions");

// 支持中英文冒号
// 3 个冒号 (+ 空格? + type)
const calloutMarkdown = /^[:：]{3}(( )*(warning|info|danger|success|tips))?$/;

function onEnter(event, controller, next) {
  const {
    value
  } = controller;
  const {
    startBlock,
    selection,
    document
  } = value;
  if (!startBlock || !selection) return next();
  const closestParagraphBlock = (0, _everUtils.getClosestParagraph)(value);
  if (!closestParagraphBlock) return next();
  const {
    isCollapsed
  } = selection;
  const {
    start
  } = selection.convertToTextPoints(document); // Markdown 插入高亮块
  // NOTE: 暂时未限制是否可以在容器元素内嵌套高亮块，与当前交互逻辑保持了一致

  if (isCollapsed && start.isAtEndOfNode(closestParagraphBlock)) {
    const matches = closestParagraphBlock.text.trim().match(calloutMarkdown);

    if (matches && !closestParagraphBlock.data.calloutPr) {
      event.preventDefault();
      const type = matches[matches.length - 1];
      controller.command(_everCangjie.Commands.moveAnchorToStartOfBlock).command(_everCangjie.Commands.del);
      controller.run('onAction', (0, _actions.insertCallout)({
        text: '',
        type
      }));
      return controller.dispatch('createTriggerMarkdownAction', {
        mdType: 'colorBlocks',
        info: type
      });
    }
  }

  return next();
}
//# sourceMappingURL=onEnter.js.map