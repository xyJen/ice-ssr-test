"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onCangjieCopyOrCut;

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

const {
  MIME_TYPES
} = _everCangjie.constants;

const getClosestColorBlock = controller => {
  const {
    selection,
    document
  } = controller.value;
  const {
    anchor,
    focus
  } = selection;
  const {
    start,
    end
  } = selection.convertToTextPoints(document);
  const startBlock = document.getClosest(start.key, _everMo.ColorBlocks.isColorBlocks);
  const endBlock = document.getClosest(end.key, _everMo.ColorBlocks.isColorBlocks);

  if (anchor.key === focus.key && anchor.key === startBlock?.key) {
    return null;
  }

  return startBlock === endBlock ? startBlock : null;
};

function onCangjieCopyOrCut(event, controller, next) {
  if (!event.clipboardData) {
    return next();
  }

  const tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    return next();
  }

  const colorBlock = getClosestColorBlock(controller);

  if (!colorBlock) {
    return next();
  }

  const {
    document,
    selection
  } = controller.value;
  let pathLength = document.getPath(colorBlock.key).length;
  const fragment = document.getFragmentAtRange(selection);
  let node = fragment;

  while (pathLength && (_everCangjie.Document.isDocument(node) || _everCangjie.Block.isBlock(node))) {
    node = node.nodes[0];
    pathLength--;
  }

  if (!_everMo.ColorBlocks.isColorBlocks(node)) {
    return next();
  }

  const targetFragment = _everCangjie.Document.create({
    nodes: node.nodes
  });

  event.clipboardData.setData(MIME_TYPES.FRAGMENT, _everCangjie.transferUtils.encodeFragment(targetFragment));
  return next();
}
//# sourceMappingURL=onCangjieCopyOrCut.js.map