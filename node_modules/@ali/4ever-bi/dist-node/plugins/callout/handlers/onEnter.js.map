{"version":3,"sources":["../../../../../src/plugins/callout/handlers/onEnter.ts"],"names":["calloutMarkdown","onEnter","event","controller","next","value","startBlock","selection","document","closestParagraphBlock","isCollapsed","start","convertToTextPoints","isAtEndOfNode","matches","text","trim","match","data","calloutPr","preventDefault","type","length","command","Commands","moveAnchorToStartOfBlock","del","run","dispatch","mdType","info"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA;AACA;AACA,MAAMA,eAAe,GAAG,oDAAxB;;AAEe,SAASC,OAAT,CACbC,KADa,EAEbC,UAFa,EAGbC,IAHa,EAIb;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYF,UAAlB;AACA,QAAM;AAAEG,IAAAA,UAAF;AAAcC,IAAAA,SAAd;AAAyBC,IAAAA;AAAzB,MAAsCH,KAA5C;AACA,MAAI,CAACC,UAAD,IAAe,CAACC,SAApB,EAA+B,OAAOH,IAAI,EAAX;AAE/B,QAAMK,qBAAmC,GAAG,oCAAoBJ,KAApB,CAA5C;AACA,MAAI,CAACI,qBAAL,EAA4B,OAAOL,IAAI,EAAX;AAE5B,QAAM;AAAEM,IAAAA;AAAF,MAAkBH,SAAxB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAYJ,SAAS,CAACK,mBAAV,CAA8BJ,QAA9B,CAAlB,CATA,CAWA;AACA;;AACA,MAAIE,WAAW,IAAIC,KAAK,CAACE,aAAN,CAAoBJ,qBAApB,CAAnB,EAA+D;AAC7D,UAAMK,OAAO,GAAGL,qBAAqB,CAACM,IAAtB,CAA2BC,IAA3B,GAAkCC,KAAlC,CAAwCjB,eAAxC,CAAhB;;AACA,QAAIc,OAAO,IAAI,CAACL,qBAAqB,CAACS,IAAtB,CAA2BC,SAA3C,EAAsD;AACpDjB,MAAAA,KAAK,CAACkB,cAAN;AACA,YAAMC,IAAI,GAAGP,OAAO,CAACA,OAAO,CAACQ,MAAR,GAAiB,CAAlB,CAApB;AACAnB,MAAAA,UAAU,CACPoB,OADH,CACWC,sBAASC,wBADpB,EAEGF,OAFH,CAEWC,sBAASE,GAFpB;AAGAvB,MAAAA,UAAU,CAACwB,GAAX,CAAe,UAAf,EAA2B,4BAAc;AAAEZ,QAAAA,IAAI,EAAE,EAAR;AAAYM,QAAAA;AAAZ,OAAd,CAA3B;AACA,aAAOlB,UAAU,CAACyB,QAAX,CAAoB,6BAApB,EAAmD;AAAEC,QAAAA,MAAM,EAAE,aAAV;AAAyBC,QAAAA,IAAI,EAAET;AAA/B,OAAnD,CAAP;AACD;AACF;;AAED,SAAOjB,IAAI,EAAX;AACD","sourcesContent":["import * as React from 'react';\nimport { Controller, Commands, Block } from '@ali/4ever-cangjie';\nimport { getClosestParagraph } from '@ali/4ever-utils';\nimport { insertCallout } from '../actions';\n\n// 支持中英文冒号\n// 3 个冒号 (+ 空格? + type)\nconst calloutMarkdown = /^[:：]{3}(( )*(warning|info|danger|success|tips))?$/;\n\nexport default function onEnter(\n  event: React.KeyboardEvent,\n  controller: Controller,\n  next: Function,\n) {\n  const { value } = controller;\n  const { startBlock, selection, document } = value;\n  if (!startBlock || !selection) return next();\n\n  const closestParagraphBlock: Block | null = getClosestParagraph(value);\n  if (!closestParagraphBlock) return next();\n\n  const { isCollapsed } = selection;\n  const { start } = selection.convertToTextPoints(document);\n\n  // Markdown 插入高亮块\n  // NOTE: 暂时未限制是否可以在容器元素内嵌套高亮块，与当前交互逻辑保持了一致\n  if (isCollapsed && start.isAtEndOfNode(closestParagraphBlock)) {\n    const matches = closestParagraphBlock.text.trim().match(calloutMarkdown);\n    if (matches && !closestParagraphBlock.data.calloutPr) {\n      event.preventDefault();\n      const type = matches[matches.length - 1] as any;\n      controller\n        .command(Commands.moveAnchorToStartOfBlock)\n        .command(Commands.del);\n      controller.run('onAction', insertCallout({ text: '', type }));\n      return controller.dispatch('createTriggerMarkdownAction', { mdType: 'colorBlocks', info: type });  \n    }\n  }\n\n  return next();\n}\n"],"file":"onEnter.js"}