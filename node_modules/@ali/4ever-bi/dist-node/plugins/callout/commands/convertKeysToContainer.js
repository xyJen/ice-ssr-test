"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertKeysToContainer = convertKeysToContainer;

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

function keysToBlocks(controller, keys) {
  const {
    document
  } = controller.value;
  const blocks = keys.map(k => document.getNode(k)).filter(n => _everCangjie.Block.isBlock(n));
  return blocks;
}

function removeCalloutPrFlag(controller, keys) {
  controller.withoutNormalizing(() => {
    const blocks = keysToBlocks(controller, keys);
    blocks.forEach(b => {
      if (b.data.calloutPr) {
        const data = { ...b.data
        };
        delete data.calloutPr;
        controller.command(_everCangjie.Commands.setNodeByKey, b.key, {
          data
        });
      }
    });
  });
  return controller;
}

function convertKeysToContainer(controller, keys) {
  const {
    document
  } = controller.value;
  const blocks = keysToBlocks(controller, keys);

  if (!blocks.length) {
    return controller;
  }
  /**
   * 如果已经转移过了，直接去除标记
   */


  const parent = document.getParent(blocks[0].key);

  if (_everMo.ColorBlocks.isColorBlocks(parent)) {
    return controller.command(removeCalloutPrFlag, keys);
  }

  const prevAttrs = blocks[0].data?.calloutPr;
  const {
    backgroundColor: bgcolor,
    stickerCode: sticker
  } = prevAttrs || {};

  const colorBlock = _everMo.ColorBlocks.createColorBlocks({
    bgcolor,
    sticker,
    showstk: true
  }, []);

  const targetPath = document.getPath(blocks[0].key);
  const targetIndex = targetPath.pop();
  controller.withoutNormalizing(() => {
    controller.command(_everCangjie.Commands.insertNodeByPath, targetPath, targetIndex, colorBlock);
    const colorBlockPath = controller.value.document.getPath(colorBlock.key);
    blocks.reverse().forEach(n => {
      const fromPath = controller.value.document.getPath(n.key);

      if (fromPath && colorBlockPath) {
        controller.command(_everCangjie.Commands.moveNodeByPath, fromPath, colorBlockPath, 0);
      }
    });
  });
  return controller.command(removeCalloutPrFlag, keys);
}
//# sourceMappingURL=convertKeysToContainer.js.map