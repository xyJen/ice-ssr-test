"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCalloutParagraph = isCalloutParagraph;
exports.isCallout = isCallout;
exports.createCallout = createCallout;
exports.findFirstBlockOfCalloutPr = findFirstBlockOfCalloutPr;
exports.generateClipCallout = generateClipCallout;
exports.isEmptyNode = isEmptyNode;
exports.condition = void 0;

var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));

var _everMo = require("@ali/4ever-mo");

var _everCangjie = require("@ali/4ever-cangjie");

function isCalloutParagraph(node) {
  return _everMo.Heading.isCallout(node);
}

function isCallout(node) {
  return _everCangjie.Block.isBlock(node) && node.type === 'callout-group';
}

function createCallout(props) {
  return _everCangjie.Block.create({ ...props,
    type: 'callout-group'
  });
}

const condition = (firstNode, nextNode) => !(nextNode && (_everMo.Paragraph.isParagraph(nextNode) || _everMo.Heading.isHeading(nextNode)) && !!nextNode.data.calloutPr && (0, _fastDeepEqual.default)(nextNode.data.calloutPr, firstNode.data.calloutPr));

exports.condition = condition;

function findFirstBlockOfCalloutPr(document, startNode) {
  let finalNode = startNode;

  while (true) {
    const prevSibling = document.getPreviousSibling(finalNode.key);

    if (condition(startNode, prevSibling)) {
      break;
    }

    finalNode = prevSibling;
  }

  return finalNode;
} // 高亮块全选时复制生成 fragment
// TODO: 外部复制，生成 HTML


function generateClipCallout(document, endBlock) {
  const shouldCutOrCopyBlocks = [];
  let currentBlock = endBlock;

  while (true) {
    if (currentBlock?.key) {
      shouldCutOrCopyBlocks.unshift(currentBlock);
      currentBlock = document.getPreviousSibling(currentBlock.key);
    }

    if (condition(endBlock, currentBlock)) {
      break;
    }
  }

  const fragment = _everCangjie.Document.create({
    nodes: shouldCutOrCopyBlocks
  });

  return fragment;
}

function isEmptyNode(node) {
  return _everMo.Heading.isCallout(node) && !node.data.list && (node.nodes.length === 0 || node.nodes.length === 1 && _everCangjie.Text.isEmptyText(node.nodes[0]));
}
//# sourceMappingURL=utils.js.map