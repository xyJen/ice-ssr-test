{"version":3,"sources":["../../../../src/plugins/callout/getSnippetConfig.tsx"],"names":["getSnippetConfig","_","next","trigger","list","Object","keys","COLOR_MAP","config","triggerPrefix","triggerSuffix","fetchItems","map","key","title","filterItems","text","items","searchText","slice","insertSnippet","controller","item","run","type","dispatch","mdType","info","from"],"mappings":";;;;;;;AACA;;AAEA;;AACA;;AAKA,MAAMA,gBAA4C,GAAG,CAACC,CAAD,EAAIC,IAAJ,KAAa;AAChE,QAAMC,OAAO,GAAG,cAAhB;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYC,4BAAZ,CAAb;AAEA,QAAMC,MAAkC,GAAG;AACzCL,IAAAA,OADyC;AAEzCM,IAAAA,aAAa,EAAE,IAF0B;AAGzCC,IAAAA,aAAa,EAAE,IAH0B;AAIzCC,IAAAA,UAAU,EAAE,YAAY;AACtB,aAAOP,IAAI,CAACQ,GAAL,CAAUC,GAAD,KAAU;AACxBA,QAAAA,GADwB;AAExBC,QAAAA,KAAK,EAAED;AAFiB,OAAV,CAAT,CAAP;AAID,KATwC;AAUzCE,IAAAA,WAAW,EAAE,OAAOC,IAAP,EAAqBC,KAArB,KAA+B;AAC1C,YAAMC,UAAU,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,CAAnB;;AACA,UAAI,CAACD,UAAL,EAAiB;AACf,eAAOD,KAAP;AACD;;AACD,aAAO,4BAAYA,KAAZ,EAAmBC,UAAnB,EAA+B;AAAEL,QAAAA,GAAG,EAAE;AAAP,OAA/B,CAAP;AACD,KAhBwC;AAiBzCO,IAAAA,aAAa,EAAE,CAACC,UAAD,EAAyBC,IAAzB,KAAkC;AAC/CD,MAAAA,UAAU,CAACE,GAAX,CAAe,UAAf,EAA2B,4BAAc;AAAEP,QAAAA,IAAI,EAAE,EAAR;AAAYQ,QAAAA,IAAI,EAAEF,IAAI,CAACT;AAAvB,OAAd,CAA3B;AACAQ,MAAAA,UAAU,CAACI,QAAX,CAAoB,6BAApB,EAAmD;AAAEC,QAAAA,MAAM,EAAE,aAAV;AAAyBC,QAAAA,IAAI,EAAEL,IAAI,CAACT,GAApC;AAAyCe,QAAAA,IAAI,EAAE;AAA/C,OAAnD;AACD;AApBwC,GAA3C;AAuBA,SAAO;AACL,KAACzB,OAAD,GAAWK,MADN;AAEL,OAAGN,IAAI;AAFF,GAAP;AAID,CA/BD;;eAiCeF,gB","sourcesContent":["import React from 'react';\nimport { fuzzySearch } from '@ali/4ever-utils';\nimport { Controller, Plugin, SnippetConfig, SnippetItemBase } from '@ali/4ever-cangjie';\nimport { insertCallout } from './actions';\nimport { COLOR_MAP } from '@ali/4ever-plugin-callout';\n\ninterface SnippetItem extends SnippetItemBase {\n}\n\nconst getSnippetConfig: Plugin['getSnippetConfig'] = (_, next) => {\n  const trigger = '[:ï¼š]{3}\\\\w*$';\n  const list = Object.keys(COLOR_MAP);\n\n  const config: SnippetConfig<SnippetItem> = {\n    trigger,\n    triggerPrefix: '^$',\n    triggerSuffix: '^$',\n    fetchItems: async () => {\n      return list.map((key) => ({\n        key,\n        title: key\n      }));\n    },\n    filterItems: async (text: string, items) => {\n      const searchText = text.slice(3);\n      if (!searchText) {\n        return items;\n      }\n      return fuzzySearch(items, searchText, { key: 'key' });\n    },\n    insertSnippet: (controller: Controller, item) => {\n      controller.run('onAction', insertCallout({ text: '', type: item.key as any }));\n      controller.dispatch('createTriggerMarkdownAction', { mdType: 'colorBlocks', info: item.key, from: 'snippet' });\n    },\n  };\n\n  return {\n    [trigger]: config,\n    ...next(),\n  }\n};\n\nexport default getSnippetConfig;"],"file":"getSnippetConfig.js"}