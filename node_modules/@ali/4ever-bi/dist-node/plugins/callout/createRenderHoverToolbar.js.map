{"version":3,"sources":["../../../../src/plugins/callout/createRenderHoverToolbar.tsx"],"names":["createRenderHoverToolbar","config","locale","props","controller","getNode","buttonName","extraProps","getColorBlocks","node","ColorBlocks","isColorBlocks"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;uBAJ4B,a;;AAOb,SAASA,wBAAT,CACbC,MADa,EAEmB;AAChC,QAAM;AAAEC,IAAAA,MAAM,GAAG;AAAX,MAAkBD,MAAxB;AACA,SAAO,CAACE,KAAD,EAAQC,UAAR,EAAoBC,OAApB,KAAgC;AACrC,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA6BJ,KAAnC;;AACA,UAAMK,cAAc,GAAG,MAAM;AAC3B,YAAMC,IAAI,GAAGJ,OAAO,EAApB;AACA,aAAOK,oBAAYC,aAAZ,CAA0BF,IAA1B,IAAkCA,IAAlC,GAAyC,IAAhD;AACD,KAHD;;AAIA,QAAI,CAACD,cAAc,EAAnB,EAAuB,OAAO,IAAP;;AACvB,YAAQF,UAAR;AACE,WAAK,OAAL;AACE,4BACE,eAAC,wBAAD;AAAY,UAAA,OAAO,EAAC;AAApB,wBACE,eAAC,4BAAD;AACE,UAAA,UAAU,EAAEF,UADd;AAEE,UAAA,OAAO,EAAEI,cAFX;AAGE,UAAA,MAAM,EAAEN;AAHV,WAKOK,UALP,EADF,CADF;;AAYF,WAAK,eAAL;AACE,4BACE,eAAC,wBAAD;AAAY,UAAA,OAAO,EAAC;AAApB,wBACE,eAAC,kCAAD;AAAqB,UAAA,UAAU,EAAEH,UAAjC;AAA6C,UAAA,OAAO,EAAEI,cAAtD;AAAsE,UAAA,MAAM,EAAEN;AAA9E,UADF,CADF;;AAKF;AAAS,eAAO,IAAP;AApBX;AAsBD,GA7BD;AA8BD","sourcesContent":["import * as React from 'react';\nimport { TBItemSlot } from '@ali/we-design-next';\nimport { ColorIconMenu } from './components/next/colorIconMenu';\nimport { StickerSwitchButton } from './components/next/stickerSwitch';\nimport { BiPlugin } from '../../types';\nimport { ColorBlocks } from '@ali/4ever-mo';\n\n\nexport default function createRenderHoverToolbar(\n  config: any\n): BiPlugin['renderHoverToolbar'] {\n  const { locale = {} } = config;\n  return (props, controller, getNode) => {\n    const { buttonName, extraProps } = props;\n    const getColorBlocks = () => {\n      const node = getNode();\n      return ColorBlocks.isColorBlocks(node) ? node : null;\n    }\n    if (!getColorBlocks()) return null;\n    switch (buttonName) {\n      case 'style':\n        return (\n          <TBItemSlot display='iconButton'>\n            <ColorIconMenu\n              controller={controller}\n              getNode={getColorBlocks}\n              locale={locale}\n              {\n                ...extraProps\n              }\n            />\n          </TBItemSlot>\n        );\n      case 'stickerSwitch':\n        return (\n          <TBItemSlot display=\"iconButton\" >\n            <StickerSwitchButton controller={controller} getNode={getColorBlocks} locale={locale} />\n          </TBItemSlot>\n        );\n      default: return null;\n    }\n  };\n}\n"],"file":"createRenderHoverToolbar.js"}