"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _weDesign = require("@ali/we-design");

var _weUtil = require("@ali/we-util");

var _weToolbar = require("@ali/we-toolbar");

var _weIcon = require("@ali/we-icon");

var _everBamboo = require("@ali/4ever-bamboo");

var _styled = require("./styled");

var _colorPanel = require("./colorPanel");

const _createElement = /*#__PURE__*/_react.default.createElement;

const colorToWhite = color => {
  return (color || 'white').replace('transparent', 'white');
};

var _ref = /*#__PURE__*/_createElement(_weToolbar.IconButton, {
  icon: /*#__PURE__*/_createElement(_weIcon.PaletteNormal, null)
});

const Toolbar = props => {
  const {
    showInnerToolbar,
    bgcolor
  } = props;

  const [overlayVisible, setOverlayVisible] = _react.default.useState(false);

  const [visible, setVisible] = _react.default.useState(!showInnerToolbar);

  const scrollContent = (0, _everBamboo.useScrollableContent)() || window.document.body; // 加 EmptyContainer 是因为 IconButton 未监听 onMouseEnter 等， trigger="hover" 无法生效

  _react.default.useEffect(() => {
    if (!showInnerToolbar) {
      setOverlayVisible(false);
    }

    setVisible(showInnerToolbar);
  }, [showInnerToolbar]);

  return /*#__PURE__*/_createElement(_styled.PaddingHolder, {
    showInnerToolbar: showInnerToolbar,
    visibile: visible
  }, /*#__PURE__*/_createElement(_styled.CalloutInnerToolbarOuterWrapper, {
    bgcolor: colorToWhite(bgcolor)
  }, /*#__PURE__*/_createElement(_styled.CalloutInnerToolbarWrapper, null, /*#__PURE__*/_createElement(_weDesign.Dropdown, {
    trigger: "click",
    overlay: /*#__PURE__*/_createElement(_weUtil.DropdownAnimation, {
      visible: overlayVisible
    }, /*#__PURE__*/_createElement(_colorPanel.ColorPanel, (0, _extends2.default)({}, props, {
      getNode: () => props.node
    }))),
    overlayStyle: {
      backgroundColor: 'transparent',
      border: 'none'
    },
    onVisibleChange: vi => {
      setOverlayVisible(vi);
    },
    placement: "topRight",
    visible: overlayVisible,
    getContainer: () => scrollContent
  }, _ref))));
};

var _default = Toolbar;
exports.default = _default;
//# sourceMappingURL=InnerToolbar.js.map