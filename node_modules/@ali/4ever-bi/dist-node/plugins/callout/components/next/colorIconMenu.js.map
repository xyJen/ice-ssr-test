{"version":3,"sources":["../../../../../../src/plugins/callout/components/next/colorIconMenu.tsx"],"names":["DEFAULTS","CalloutPlugin","ColorIconMenu","props","controller","locale","getNode","onOverlayVisibleChange","getContainer","HoverToolbarHooks","useGetContainer","isOverlayVisible","setOverlayVisible","usePopoverVisible","node","metaData","setMetaData","React","useState","data","metadata","handleValueChange","key","value","run","color","bgcolor","border","colorTitle","PluginRoles","calloutColor"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAIA;;uBAL4B,a;AAc5B,MAAM;AAAEA,EAAAA;AAAF,IAAeC,yBAArB;;AAEO,MAAMC,aAA4C,GAAIC,KAAD,IAAW;AACrE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA;AAA/B,MAA0DJ,KAAhE;;AACA,QAAMK,YAAY,GAAGC,iCAAkBC,eAAlB,EAArB;;AACA,QAAM,CAACC,gBAAD,EAAmBC,iBAAnB,IAAwCH,iCAAkBI,iBAAlB,CAAoC,eAApC,EAAqDN,sBAArD,CAA9C;;AACA,QAAMO,IAAI,GAAGR,OAAO,EAApB;;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BC,eAAMC,QAAN,CAAeJ,IAAI,EAAEK,IAAN,EAAYC,QAA3B,CAAhC;;AAEA,QAAMC,iBAAiB,GAAIC,GAAD,IAAUC,KAAD,IAAW;AAC5CP,IAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,OAACO,GAAD,GAAOC;AAFkB,KAAf,CAAD,CAAX;AAIA,UAAMJ,IAAkC,GAAG,EAA3C,CAL4C,CAM5C;;AACAA,IAAAA,IAAI,CAACG,GAAD,CAAJ,GAAYC,KAAZ;AACA,UAAMT,IAAI,GAAGR,OAAO,EAApB;AACAF,IAAAA,UAAU,CAACoB,GAAX,CAAe,eAAf;AACAV,IAAAA,IAAI,IAAIV,UAAU,CAACoB,GAAX,CAAe,UAAf,EAA2B,0BAAkB;AAAEV,MAAAA,IAAF;AAAQK,MAAAA;AAAR,KAAlB,CAA3B,CAAR;AACD,GAXD;;AAaA,MAAI,CAACL,IAAL,EAAW,OAAO,IAAP;AAEX,sBACE,eAAC,mCAAD;AACE,IAAA,KAAK,EAAEC,QAAQ,EAAEU,KADnB;AAEE,IAAA,YAAY,EAAEzB,QAAQ,CAACyB,KAFzB;AAGE,IAAA,eAAe,EAAEV,QAAQ,EAAEW,OAAV,IAAqB1B,QAAQ,CAACyB,KAHjD;AAIE,IAAA,sBAAsB,EAAEzB,QAAQ,CAAC0B,OAJnC;AAKE,IAAA,WAAW,EAAEX,QAAQ,EAAEY,MALzB;AAME,IAAA,kBAAkB,EAAE3B,QAAQ,CAAC2B,MAN/B;AAOE,IAAA,YAAY,EAAEN,iBAAiB,CAAC,OAAD,CAPjC;AAQE,IAAA,kBAAkB,EAAEA,iBAAiB,CAAC,QAAD,CARvC;AASE,IAAA,sBAAsB,EAAEA,iBAAiB,CAAC,SAAD,CAT3C;AAUE,IAAA,sBAAsB,EAAET,iBAV1B;AAWE,IAAA,gBAAgB,EAAED,gBAXpB;AAYE,IAAA,YAAY,EAAEH,YAZhB;AAaE,IAAA,OAAO,EAAEH,MAAM,CAACuB,UAblB;AAcE,IAAA,IAAI,EAAEC,wBAAYC;AAdpB,IADF;AAkBD,CAxCM","sourcesContent":["import React from 'react';\nimport { CalloutPlugin, PluginRoles } from '@ali/4ever-bamboo';\nimport { ComplexColorIconMenu, HoverToolbarHooks } from '@ali/4ever-component';\nimport { ColorBlocksMetaData, ColorBlocks } from '@ali/4ever-mo';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { Locale } from '../../types';\nimport { setMetaData as setMetaDataAction } from '../../actions';\n\nexport interface IColorIconMenuProps {\n  onOverlayVisibleChange: (v: boolean) => void;\n  controller: Controller;\n  getNode: () => ColorBlocks | null;\n  locale: Locale;\n}\n\nconst { DEFAULTS } = CalloutPlugin;\n\nexport const ColorIconMenu: React.FC<IColorIconMenuProps> = (props) => {\n  const { controller, locale, getNode, onOverlayVisibleChange } = props;\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('callout.color', onOverlayVisibleChange)\n  const node = getNode();\n  const [metaData, setMetaData] = React.useState(node?.data?.metadata);\n\n  const handleValueChange = (key) => (value) => {\n    setMetaData((metaData) => ({\n      ...metaData,\n      [key]: value,\n    }));\n    const data: Partial<ColorBlocksMetaData> = {};\n    // @ts-ignore\n    data[key] = value;\n    const node = getNode();\n    controller.run('onCangjieBlur');\n    node && controller.run('onAction', setMetaDataAction({ node, data }));\n  }\n\n  if (!node) return null;\n\n  return (\n    <ComplexColorIconMenu\n      color={metaData?.color}\n      defaultColor={DEFAULTS.color}\n      backgroundColor={metaData?.bgcolor || DEFAULTS.color}\n      defaultBackgroundColor={DEFAULTS.bgcolor}\n      borderColor={metaData?.border}\n      defaultBorderColor={DEFAULTS.border}\n      onColorClick={handleValueChange('color')}\n      onBorderColorClick={handleValueChange('border')}\n      onBackgroundColorClick={handleValueChange('bgcolor')}\n      onOverlayVisibleChange={setOverlayVisible}\n      isOverlayVisible={isOverlayVisible}\n      getContainer={getContainer}\n      tooltip={locale.colorTitle}\n      role={PluginRoles.calloutColor}\n    />\n  );\n}"],"file":"colorIconMenu.js"}