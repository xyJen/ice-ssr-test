"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everBamboo = require("@ali/4ever-bamboo");

var _everUtils = require("@ali/4ever-utils");

const _createElement = /*#__PURE__*/React.createElement;
const {
  StickerItem
} = _everBamboo.StickerPlugin;
const {
  CalloutBoxWrapper,
  CalloutBox,
  ContentBox,
  StickerBox,
  StickerInnerBox,
  DEFAULTS,
  STICKER_SIZE,
  PADDING_TOP
} = _everBamboo.CalloutPlugin;

/**
 * 高亮区块
 * @param props
 * @returns
 */
const Callout = props => {
  const {
    node,
    attributes,
    children,
    sticker
  } = props;
  const stickerBoxRef = React.useRef();
  const {
    bgcolor = DEFAULTS.bgcolor,
    sticker: stickerCode = DEFAULTS.stcode,
    border,
    showSticker
  } = React.useMemo(() => {
    const {
      metadata
    } = node.data;
    return { ...metadata,
      showSticker: Boolean(metadata.showstk)
    };
  }, [node]); // 边框色默认为背景色, 使边框和文字对齐

  let borderColor = border || bgcolor;

  if (!border && bgcolor === '#FFFFFF') {
    borderColor = DEFAULTS.whiteBorder;
  }

  const ref = React.useRef(null);
  const [stickerTop, setStickerTop] = React.useState(0);
  const zoom = (0, _everCangjie.useZoom)();
  React.useEffect(() => {
    if (stickerBoxRef.current && node.nodes[0]) {
      const rect = (0, _everUtils.getRectOfNodeFirstText)(node.nodes[0]);
      const stickerRect = stickerBoxRef.current?.getBoundingClientRect();

      if (rect && rect.height && stickerRect) {
        const newTop = rect.top / zoom - stickerRect.top / zoom - PADDING_TOP + (rect.height / zoom - STICKER_SIZE) / 2 - 1;
        setStickerTop(Math.round(newTop));
      }
    }
  }, [node, stickerBoxRef, zoom]);
  return /*#__PURE__*/_createElement(CalloutBoxWrapper, attributes, /*#__PURE__*/_createElement(CalloutBox, {
    ref: ref,
    className: "callout-box",
    "data-callout-group": true,
    "data-color-select-panel": true,
    backgroundColor: bgcolor,
    borderColor: borderColor,
    selected: false,
    onMouseDown: () => {},
    "data-hover-box": "borderBox",
    onClick: () => {}
  }, Boolean(showSticker) && /*#__PURE__*/_createElement(StickerBox, {
    className: "callout-sticker-box",
    ref: stickerBoxRef
  }, /*#__PURE__*/_createElement(StickerInnerBox, {
    style: {
      top: stickerTop
    }
  }, /*#__PURE__*/_createElement(StickerItem, {
    sz: STICKER_SIZE,
    code: stickerCode,
    sticker: sticker
  }))), /*#__PURE__*/_createElement(ContentBox, {
    "data-container-block": true,
    showSticker: showSticker
  }, children)));
};

Callout.displayName = 'Callout';
var _default = Callout;
exports.default = _default;
//# sourceMappingURL=calloutMobile.js.map