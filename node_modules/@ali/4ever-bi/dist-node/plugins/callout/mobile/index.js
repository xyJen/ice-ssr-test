"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everBamboo = require("@ali/4ever-bamboo");

var _createRenderNode = _interopRequireDefault(require("./createRenderNode"));

var commands = _interopRequireWildcard(require("../commands"));

var _createOnAction = _interopRequireDefault(require("../handlers/createOnAction"));

var _createOnQuery = _interopRequireDefault(require("../handlers/createOnQuery"));

var _onKeyDown = _interopRequireDefault(require("../handlers/onKeyDown"));

var _onCangjieCopyOrCut = _interopRequireDefault(require("../handlers/onCangjieCopyOrCut"));

var _queries = _interopRequireDefault(require("../queries"));

var actions = _interopRequireWildcard(require("../actions"));

var _everPluginColorBlocks = require("@ali/4ever-plugin-color-blocks");

const {
  DEFAULT_STICKERS,
  Sticker
} = _everBamboo.StickerPlugin;

function createCalloutPlugin(config) {
  const {
    callout = {}
  } = config;
  const {
    locale
  } = callout;
  const stickerConfig = {
    // @ts-ignore
    lang: 'zh_CN',
    // @ts-ignore
    customSticker: [DEFAULT_STICKERS],
    ...config.sticker
  };
  const sticker = new Sticker(stickerConfig);
  const params = {
    stickerConfig,
    sticker,
    locale: callout.locale
  };
  return { ...(0, _everPluginColorBlocks.moFactory)({}),
    renderNode: (0, _createRenderNode.default)(params),
    // Copy Cut 拦截作用于高亮块全选时
    onCangjieCopy: _onCangjieCopyOrCut.default,
    onCangjieCut: _onCangjieCopyOrCut.default,
    onQuery: (0, _createOnQuery.default)(),
    onAction: (0, _createOnAction.default)(callout),
    getNodeStyle: _everBamboo.CalloutPlugin.getNodeStyle,
    // @ts-ignore 这里是 createCommands
    commands,
    onKeyDown: _onKeyDown.default,
    queries: _queries.default,
    placeholder: {
      text: locale?.placeholder,
      when: (controller, node) => {
        return (0, _everBamboo.isEmptyParagraph)(node) && controller.query('getCalloutStartBlock', node) === node && controller.query('getCalloutEndBlock', node) === node;
      }
    }
  };
}

createCalloutPlugin.actions = actions;
var _default = createCalloutPlugin;
exports.default = _default;
//# sourceMappingURL=index.js.map