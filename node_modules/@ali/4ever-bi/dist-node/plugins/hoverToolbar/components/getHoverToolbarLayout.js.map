{"version":3,"sources":["../../../../../src/plugins/hoverToolbar/components/getHoverToolbarLayout.tsx"],"names":["isReactElementValid","element","validDisplayNames","displayName","type","indexOf","getHoverToolbarLayout","params","layoutConfigs","plugins","controller","node","hoverCapture","locale","visiblePopoverSet","setActiveInteraction","activeRef","reset","layoutConfig","folded","normal","splitFolded","length","undefined","onOverlayVisibleChange","visible","key","getCurrentNode","enableTrigger","add","delete","size","disableTrigger","current","getNode","document","value","path","getPath","getNodeByPath","layout","map","group","item","pluginName","buttonName","split","render","hash","renderHoverToolbar","extraProps","v","buttonOrButtonProps","React","isValidElement","cloneElement","console","error","onClick","autoClose","rest","handleClick","e","forceClose","filter","groupItem","groupLayout","moreMenuItems","clickMap","forEach","groupItems","buttonProps","title","icon","prefix","disabled","testid","role","push","concat","moreButtonMenu","pop","onSelect","lastGroup","layoutWithDivider","block","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TBIconButton, ITBIconButtonProps, Menu, TBItemSlot, IToolbarLayoutProps } from '@ali/we-design-next';\nimport type { Controller, Node, BiPlugin } from '@ali/4ever-cangjie';\nimport { Plugins } from '../../../pluginsContext';\nimport { HoverCapture } from '../utils/hoverCapture';\nimport { IHoverToolbarLayout } from '../types';\nimport { MoreMenuButton } from './MoreMenuButton';\nimport { ILocale } from '../types';\nimport getNodeType from '../utils/getNodeType';\nimport type { IListItem } from './MoreMenuButton';\n\nfunction isReactElementValid(element: React.ReactElement) {\n  const validDisplayNames = ['iconButton', 'iconMenu', 'splitButton', 'iconSelect', 'textSelect', 'toolbarSlot'];\n  const { displayName } = (element.type as any);\n  return validDisplayNames.indexOf(displayName) > -1;\n}\n\ntype IHoverToolbarButton = NonNullable<ReturnType<BiPlugin['renderHoverToolbar']>>;\n\ntype IHoverButtonConfig = Exclude<IHoverToolbarButton, React.ReactElement>;\n\nexport function getHoverToolbarLayout(params: {\n  layoutConfigs: Record<string, IHoverToolbarLayout>;\n  plugins: Plugins | null;\n  controller: Controller;\n  node: Node;\n  hoverCapture: HoverCapture;\n  locale: ILocale;\n  visiblePopoverSet: Set<string>;\n  activeRef: React.MutableRefObject<string>;\n  setActiveInteraction: (v: string) => void;\n  reset: () => void;\n}): IToolbarLayoutProps['singleLineToolbar'] {\n  const { layoutConfigs, plugins, controller, node, hoverCapture, locale, visiblePopoverSet, setActiveInteraction, activeRef, reset } = params;\n  const type = getNodeType(node, controller);\n  const layoutConfig = layoutConfigs[type];\n  const { folded = [], normal = [], splitFolded } = layoutConfig || {};\n  if (!plugins || !layoutConfig || (!(folded && folded.length > 0) && !(normal && normal.length > 0))) {\n    return undefined;\n  }\n  const onOverlayVisibleChange = (visible: boolean, key: string) => {\n    // popover 的 onOverlayVisibleChange 是异步方法\n    if (!hoverCapture.getCurrentNode()) {\n      hoverCapture?.enableTrigger();\n      return;\n    }\n    if (visible) {\n      visiblePopoverSet.add(key);\n    } else {\n      visiblePopoverSet.delete(key);\n    }\n    if (visiblePopoverSet.size > 0) {\n      setActiveInteraction('hoverToolbarPopover');\n      hoverCapture?.disableTrigger();\n    } else {\n      if (activeRef.current === 'hoverToolbarPopover') {\n        setActiveInteraction('');\n      }\n      hoverCapture?.enableTrigger();\n    }\n  };\n\n  const getNode = () => {\n    const { document } = controller.value;\n    const path = document.getPath(node.key);\n    return path ? document.getNodeByPath(path) : null;\n  }\n\n  const layout: Array<Array<React.ReactElement>> = normal.map((group) => {\n    return (group.map((item) => {\n      const [pluginName, buttonName = 'default'] = item.split('.');\n      const render = (plugins.hash[pluginName] as BiPlugin)?.renderHoverToolbar;\n      if (!render) return null;\n      const extraProps = {\n        onOverlayVisibleChange: (v: boolean) => {\n          onOverlayVisibleChange(v, item);\n        },\n      };\n      const buttonOrButtonProps = render({ buttonName, extraProps }, controller, getNode);\n      if (React.isValidElement(buttonOrButtonProps)) {\n        if (isReactElementValid(buttonOrButtonProps)) {\n          return React.cloneElement(buttonOrButtonProps, {\n            key: item,\n          });\n        } else {\n          console.error('Toolbar 内必须使用指定的组件');\n          return null;\n        }\n      } else if (buttonOrButtonProps && typeof buttonOrButtonProps === 'object') {\n        const { onClick, autoClose, ...rest } = buttonOrButtonProps;\n        let handleClick = onClick;\n        if (autoClose) {\n          handleClick = (e) => {\n            onClick && onClick(e);\n            hoverCapture.forceClose();\n            reset();\n            setActiveInteraction('');\n          }\n        }\n        return (\n          // TODO：@淼淼 支持替换 icon\n          <TBIconButton\n            {...(rest as ITBIconButtonProps)}\n            onClick={handleClick}\n            key={item}\n          />\n        );\n      }\n      return null;\n    }).filter((groupItem) => !!groupItem)) as React.ReactElement[];\n  }).filter((groupLayout) => groupLayout && groupLayout.length > 0);\n  let moreMenuItems: Array<IListItem | 'divider'> = [];\n  const clickMap: Record<string, () => void> = {};\n  folded.forEach((group) => {\n    const groupItems: Array<IListItem> = [];\n    group.forEach((item) => {\n      const [pluginName, buttonName = 'default'] = item.split('.');\n      const extraProps = {\n        onOverlayVisibleChange: (v: boolean) => {\n          onOverlayVisibleChange(v, item);\n        },\n      };\n      const buttonProps = (plugins.hash[pluginName] as BiPlugin)?.renderHoverToolbar?.({ buttonName, extraProps }, controller, getNode);\n      if (buttonProps && typeof buttonProps === 'object') {\n        const { title, icon: prefix, disabled, onClick, autoClose, testid, role } = buttonProps as IHoverButtonConfig;\n        if (onClick) {\n          const handleClick = autoClose\n            ? (e) => {\n              onClick(e);\n              hoverCapture.forceClose();\n              setActiveInteraction('');\n              reset();\n            } : onClick\n          // @ts-ignore\n          clickMap[item] = handleClick;\n          groupItems.push({\n            key: item,\n            title: title || '',\n            prefix,\n            disabled,\n            testid,\n            ['data-role']: role,\n          });\n        }\n      }\n\n    });\n    if (groupItems.length > 0) {\n      moreMenuItems = moreMenuItems.concat(groupItems, 'divider');\n    }\n  });\n  let moreButtonMenu: React.ReactElement | null = null;\n\n  if (moreMenuItems.length > 0) {\n    moreMenuItems.pop();\n    const onSelect = (key: string) => {\n      clickMap[key] && clickMap[key]();\n    }\n    moreButtonMenu = (\n      <TBItemSlot display='iconButton'>\n        <MoreMenuButton\n          onSelect={onSelect}\n          items={moreMenuItems}\n          onOverlayVisibleChange={(v) => {\n            onOverlayVisibleChange(v, 'more');\n          }}\n          locale={locale}\n        />\n      </TBItemSlot>\n    );\n  }\n\n  if (moreButtonMenu) {\n    const length = layout?.length;\n    const lastGroup = length > 0 ? layout[length -1] : null; \n    if (splitFolded || !lastGroup) {\n      layout.push([moreButtonMenu]);\n    } else {\n      lastGroup.push(moreButtonMenu);\n    }\n  }\n\n  const { length } = layout;\n  let layoutWithDivider: IToolbarLayoutProps['singleLineToolbar'] = [];\n  \n  layout.forEach((block, index) => {\n    if (index < length -1) {\n      layoutWithDivider = layoutWithDivider!.concat(block, 'divider');\n    } else {\n      layoutWithDivider!.push(block);\n    }\n  });\n  \n  return layoutWithDivider;\n}"],"file":"getHoverToolbarLayout.js"}