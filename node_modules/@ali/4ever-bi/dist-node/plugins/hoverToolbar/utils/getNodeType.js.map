{"version":3,"sources":["../../../../../src/plugins/hoverToolbar/utils/getNodeType.ts"],"names":["typeMap","getBlockType","block","controller","type","TableCell","isTableCell","document","value","tableRow","getParent","key","table","Table","isTable","data","sr","cardType","subType","getInlineType","inline","extraData","isSignature","getNodeType","node","Block","isBlock","Inline","isInline"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,MAAMA,OAAO,GAAG;AACd,iBAAe;AADD,CAAhB;;AAIA,SAASC,YAAT,CAAsBC,KAAtB,EAAoCC,UAApC,EAA4D;AAC1D,MAAIC,IAAI,GAAGF,KAAK,CAACE,IAAjB;;AACA,MAAIC,kBAAUC,WAAV,CAAsBJ,KAAtB,CAAJ,EAAkC;AAChC,UAAM;AAAEK,MAAAA;AAAF,QAAeJ,UAAU,CAACK,KAAhC;AACA,UAAMC,QAAQ,GAAGF,QAAQ,CAACG,SAAT,CAAmBR,KAAK,CAACS,GAAzB,CAAjB;AACA,UAAMC,KAAK,GAAGH,QAAQ,GAAGF,QAAQ,CAACG,SAAT,CAAmBD,QAAQ,CAACE,GAA5B,CAAH,GAAsC,IAA5D;;AACA,QAAIE,cAAMC,OAAN,CAAcF,KAAd,KAAwBA,KAAK,CAACG,IAAN,CAAWC,EAAvC,EAA2C;AACzC,aAAO,SAAP;AACD;AACF;;AACD,MAAI,2BAAWd,KAAX,CAAJ,EAAuB;AACrB,WAAO,MAAP;AACD;;AACD,MAAIA,KAAK,CAACE,IAAN,KAAe,MAAnB,EAA2B;AACzBA,IAAAA,IAAI,GAAGF,KAAK,CAACa,IAAN,EAAYE,QAAZ,IAAwB,MAA/B;AACD,GAFD,MAEO,IAAIf,KAAK,CAACE,IAAN,KAAe,WAAnB,EAAgC;AACrCA,IAAAA,IAAI,GAAGF,KAAK,CAACa,IAAN,CAAWG,OAAX,IAAsB,WAA7B;AACD;;AACD,SAAOlB,OAAO,CAACI,IAAD,CAAP,IAAiBA,IAAxB;AACD;;AAED,SAASe,aAAT,CAAuBC,MAAvB,EAAuC;AACrC,MAAIA,MAAM,CAAChB,IAAP,KAAgB,OAAhB,IAA2BgB,MAAM,CAACL,IAAP,EAAaM,SAAb,EAAwBC,WAAvD,EAAoE;AAClE,WAAO,WAAP;AACD;;AACD,MAAIF,MAAM,CAAChB,IAAP,KAAgB,OAAhB,IAA2B,qBAAQgB,MAAM,CAACL,IAAf,CAA/B,EAAqD;AACnD,WAAO,kBAAP;AACD;;AACD,SAAOK,MAAM,CAAChB,IAAd;AACD;;AAEc,SAASmB,WAAT,CAAqBC,IAArB,EAAiCrB,UAAjC,EAAyD;AACtE,MAAIsB,mBAAMC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvB,WAAOvB,YAAY,CAACuB,IAAD,EAAOrB,UAAP,CAAnB;AACD;;AACD,MAAIwB,oBAAOC,QAAP,CAAgBJ,IAAhB,CAAJ,EAA2B;AACzB,WAAOL,aAAa,CAACK,IAAD,CAApB;AACD;;AACD,SAAO,EAAP;AACD","sourcesContent":["import { Block, Controller, Inline, Node } from '@ali/4ever-cangjie';\nimport { isListNode } from '@ali/4ever-utils';\nimport { Table, TableCell } from '@ali/4ever-mo';\nimport { isEmpty } from 'lodash-es';\n\nconst typeMap = {\n  'colorBlocks': 'callout',\n}\n\nfunction getBlockType(block: Block, controller: Controller) {\n  let type = block.type;\n  if (TableCell.isTableCell(block)) {\n    const { document } = controller.value;\n    const tableRow = document.getParent(block.key);\n    const table = tableRow ? document.getParent(tableRow.key) : null;\n    if (Table.isTable(table) && table.data.sr) {\n      return 'columns';\n    }\n  }\n  if (isListNode(block)) {\n    return 'list';\n  }\n  if (block.type === 'card') {\n    type = block.data?.cardType || 'card';\n  } else if (block.type === 'container') {\n    type = block.data.subType || 'container';\n  }\n  return typeMap[type] || type;\n}\n\nfunction getInlineType(inline: Inline) {\n  if (inline.type === 'image' && inline.data?.extraData?.isSignature) {\n    return 'signature';\n  }\n  if (inline.type === 'image' && isEmpty(inline.data)) {\n    return 'imagePlaceholder';\n  }\n  return inline.type;\n}\n\nexport default function getNodeType(node: Node, controller: Controller) {\n  if (Block.isBlock(node)) {\n    return getBlockType(node, controller);\n  }\n  if (Inline.isInline(node)) {\n    return getInlineType(node);\n  }\n  return '';\n}\n"],"file":"getNodeType.js"}