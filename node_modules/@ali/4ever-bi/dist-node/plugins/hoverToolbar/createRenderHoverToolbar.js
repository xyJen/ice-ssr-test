"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderHoverToolbar;

var React = _interopRequireWildcard(require("react"));

var _everBamboo = require("@ali/4ever-bamboo");

var _everComponent = require("@ali/4ever-component");

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("./actions");

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_everComponent.IconCut, null);

var _ref2 = /*#__PURE__*/_createElement(_everComponent.IconCopy, null);

var _ref3 = /*#__PURE__*/_createElement(_everComponent.IconDelete, null);

function createRenderHoverToolbar(config) {
  const {
    locale
  } = config;
  return (props, controller, getNode) => {
    const {
      buttonName
    } = props;

    switch (buttonName) {
      case 'cut':
        return {
          icon: _ref,
          title: locale?.cut || 'Cut',
          tooltip: locale?.cut || 'Cut',
          onClick: () => {
            const node = getNode();
            node && controller.run('onAction', {
              type: _actions.HOVER_TOOLBAR_CUT_NODE,
              payload: {
                node
              }
            });
          },
          autoClose: true,
          role: _everBamboo.PluginRoles.hoverToolbarCut,
          testid: 'bi-toolbar-hover-cut'
        };

      case 'copy':
        return {
          icon: _ref2,
          title: locale?.copy || 'Copy',
          tooltip: locale?.copy || 'Copy',
          onClick: () => {
            const node = getNode();
            node && controller.run('onAction', {
              type: _actions.HOVER_TOOLBAR_COPY_NODE,
              payload: {
                node
              }
            });
          },
          autoClose: true,
          role: _everBamboo.PluginRoles.hoverToolbarCopy,
          testid: 'bi-toolbar-hover-copy'
        };

      case 'delete':
        return {
          icon: _ref3,
          title: locale?.delete || 'Delete',
          tooltip: locale?.delete || 'Delete',
          onClick: () => {
            const node = getNode();
            node && controller.command(_everCangjie.Commands.removeNodeByKey, node.key);
          },
          autoClose: true,
          role: _everBamboo.PluginRoles.hoverToolbarDelete,
          testid: 'bi-toolbar-hover-delete'
        };

      default:
        return null;
    }
  };
}
//# sourceMappingURL=createRenderHoverToolbar.js.map