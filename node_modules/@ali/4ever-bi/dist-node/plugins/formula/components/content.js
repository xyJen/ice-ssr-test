"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _everBamboo = require("@ali/4ever-bamboo");

var _weDesign = require("@ali/we-design");

var _isHotkey = _interopRequireDefault(require("is-hotkey"));

var _view = _interopRequireDefault(require("./view"));

var _placeholder = _interopRequireDefault(require("./placeholder"));

var _everPluginBasic = require("@ali/4ever-plugin-basic");

var _textarea = _interopRequireDefault(require("./textarea"));

var _actions = require("../actions");

const _createElement = /*#__PURE__*/_react.default.createElement;
const {
  calcuSize
} = _everBamboo.FormulaPlugin;
const isEnterHotKey = (0, _isHotkey.default)('enter');
const isEscHotKey = (0, _isHotkey.default)('esc');
const isMobile = _everCangjie.environment.IS_MOBILE;

const FormulaWrapper = /*#__PURE__*/_styledComponents.default.div(["position:relative;display:inline-flex;vertical-align:middle;border-radius:4px;.bi-katex-dropdown{border:none;box-shadow:0px 8px 24px 0px rgba(0,0,0,0.16),0px 0px 1px 0px rgba(0,0,0,0.24);animation:scale-up-top 0.25s cubic-bezier(0.455,0.030,0.515,0.955) both;}"]);

var _default = /*#__PURE__*/_react.default.memo(props => {
  const [isEditing, setIsEditing] = (0, _react.useState)(false);
  const modelFormulaData = props.node.data.metadata.formula || ''; // 这里保存临时的输入内容，当关闭弹窗就要把它置为空

  const [formula, setFormula] = (0, _react.useState)(modelFormulaData);
  const {
    node,
    controller,
    config,
    isSelected
  } = props;
  const {
    startInline,
    selection
  } = controller.value;
  const {
    readOnly
  } = controller;
  const currentFormula = formula === null ? modelFormulaData : formula;
  const textareaRef = (0, _react.useRef)(null);
  const isPlaceholder = !currentFormula; // 国际化文案

  const locale = config?.locale || {};
  const onTextareaChange = (0, _react.useCallback)(text => {
    setFormula(text);
  }, []);
  const onClickConfirm = (0, _react.useCallback)(() => {
    const nextFormula = currentFormula.trim();

    if (modelFormulaData !== nextFormula) {
      const tagData = { ...calcuSize(nextFormula),
        metadata: {
          formula: nextFormula
        }
      };
      controller.run('onAction', (0, _actions.setFormulaData)(node, tagData));
    }
  }, [modelFormulaData, currentFormula, controller, node]);
  const onKeyDown = (0, _react.useCallback)(e => {
    if (isEditing && isEscHotKey(e)) {
      setIsEditing(false);
      onClickConfirm();
      controller.run('onAction', _everPluginBasic.biActions.createFocusToNodeAction({
        node
      }));
    }
  }, [isEditing, controller, node.key, onClickConfirm]);
  const onClickButton = (0, _react.useCallback)(() => {
    onClickConfirm();
    setIsEditing(false);
  }, [onClickConfirm]);
  (0, _react.useEffect)(() => {
    const data = calcuSize(currentFormula);
    controller.run('onAction', (0, _actions.setFormulaInjection)(node.key, data));
  }, [currentFormula, controller, node.key]);
  (0, _react.useEffect)(() => {
    const handleEnter = event => {
      if (isEnterHotKey(event) && _everMo.Tag.isTag(startInline) && selection.isCollapsed && startInline.key === node.key) {
        event.preventDefault();
        event.stopPropagation();
        setIsEditing(true);
        textareaRef.current && textareaRef.current.focus();
      }
    };

    document.addEventListener('keydown', handleEnter);
    return () => {
      document.removeEventListener('keydown', handleEnter);
    };
  }, [textareaRef, startInline, selection, node.key]);
  const getContainer = (0, _react.useCallback)(() => {
    const bodyEle = document.body;
    return document.querySelector('div[data-cangjie-content]') || bodyEle;
  }, []);
  const onVisibleChange = (0, _react.useCallback)(visible => {
    setIsEditing(visible);

    if (!visible) {
      onClickConfirm();
    } else {
      textareaRef.current && textareaRef.current.focus();
    }
  }, [textareaRef, onClickConfirm]);
  const placeholder = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_createElement(_placeholder.default, {
      locale: locale,
      notAllowed: readOnly || isMobile,
      isSelected: isSelected,
      isEditing: isEditing
    });
  }, [readOnly, locale, isSelected, isEditing]);

  var _ref = /*#__PURE__*/_createElement(_view.default, {
    formula: currentFormula,
    isEditing: isEditing,
    isSelected: isSelected
  });

  const formulaView = (0, _react.useMemo)(() => {
    return _ref;
  }, [currentFormula, isEditing, isSelected]);

  var _ref2 = /*#__PURE__*/_createElement(_textarea.default, {
    locale: locale,
    formula: currentFormula,
    config: config,
    textareaRef: textareaRef,
    onChange: onTextareaChange,
    onButtonClick: onClickButton
  });

  const formulaTextarea = (0, _react.useMemo)(() => {
    return _ref2;
  }, [locale, currentFormula, textareaRef, config, onTextareaChange, onClickButton]);
  const renderContent = (0, _react.useMemo)(() => {
    const showPlaceholder = isPlaceholder && !currentFormula;
    const content = showPlaceholder ? placeholder : formulaView;

    if (readOnly || isMobile) {
      return content;
    }

    return /*#__PURE__*/_createElement(_weDesign.Dropdown, {
      trigger: "click",
      getContainer: getContainer,
      overlay: formulaTextarea,
      visible: isEditing,
      onVisibleChange: onVisibleChange,
      placement: "bottomLeft",
      overlayClassName: "bi-katex-dropdown",
      zIndex: 1000
    }, /*#__PURE__*/_createElement("div", null, content));
  }, [isPlaceholder, isEditing, placeholder, formulaView, readOnly, getContainer, formulaTextarea, onVisibleChange, currentFormula]);
  return /*#__PURE__*/_createElement(FormulaWrapper, {
    "data-cangjie-not-editable": true,
    onKeyDown: onKeyDown
  }, renderContent);
});

exports.default = _default;
//# sourceMappingURL=content.js.map