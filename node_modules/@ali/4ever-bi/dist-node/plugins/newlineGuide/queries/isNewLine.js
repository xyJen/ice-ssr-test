"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkBlockContent = checkBlockContent;
exports.checkBlockData = checkBlockData;
exports.checkBlockCount = checkBlockCount;
exports.default = isNewline;

var _everCangjie = require("@ali/4ever-cangjie");

function checkBlockContent(block) {
  const {
    nodes
  } = block; // 子节点数大于1视为非空

  if (nodes.length > 1 || !_everCangjie.Text.isTextList(nodes)) return false; // TODO: 后续做过滤的时候这里需要去掉
  // 有文本视为非空

  if (block.text && block.text !== '+') return false;
  return true;
}

function checkBlockData(controller, block) {
  // 检查 data 属性
  const {
    blockquote,
    jc = 'left',
    ind,
    list
  } = block.data || {};
  const {
    firstLine = 0,
    left = 0
  } = ind || {}; // 不支持居中和居右显示

  if (blockquote || jc === 'center' || jc === 'right' || firstLine || left || list) return false;
  return true;
}

function checkBlockCount(controller) {
  const {
    document
  } = controller.value; // 如果全局只有一个 node 则不展示，避免和全局的 placeholder 重合

  return document.nodes.length !== 1;
}

function isNewline(controller, {
  node,
  composing,
  placeholder
}) {
  const block = node;
  if (composing.length > 0 || !block) return false; // 使用 query 后不会再有 data.pi，直接比较 type

  if (block.type !== 'paragraph') return false; // 依次检查 节点总数、data、内容，复杂度递增

  if (placeholder && !checkBlockCount(controller)) return false;
  if (!checkBlockData(controller, block)) return false;
  if (!checkBlockContent(block)) return false;
  return true;
}
//# sourceMappingURL=isNewLine.js.map