{"version":3,"sources":["../../../../../src/plugins/newlineGuide/queries/isNewLine.ts"],"names":["checkBlockContent","block","nodes","length","Text","isTextList","text","checkBlockData","controller","blockquote","jc","ind","list","data","firstLine","left","checkBlockCount","document","value","isNewline","node","composing","placeholder","type"],"mappings":";;;;;;;;;;AAAA;;AAEO,SAASA,iBAAT,CAA2BC,KAA3B,EAAyC;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB,CAD8C,CAE9C;;AACA,MAAIC,KAAK,CAACC,MAAN,GAAe,CAAf,IAAoB,CAACC,kBAAKC,UAAL,CAAgBH,KAAhB,CAAzB,EAAiD,OAAO,KAAP,CAHH,CAI9C;AACA;;AACA,MAAID,KAAK,CAACK,IAAN,IAAcL,KAAK,CAACK,IAAN,KAAe,GAAjC,EAAsC,OAAO,KAAP;AACtC,SAAO,IAAP;AACD;;AAEM,SAASC,cAAT,CAAwBC,UAAxB,EAAgDP,KAAhD,EAA8D;AACnE;AACA,QAAM;AAAEQ,IAAAA,UAAF;AAAcC,IAAAA,EAAE,GAAG,MAAnB;AAA2BC,IAAAA,GAA3B;AAAgCC,IAAAA;AAAhC,MAAyCX,KAAK,CAACY,IAAN,IAAc,EAA7D;AACA,QAAM;AAAEC,IAAAA,SAAS,GAAG,CAAd;AAAiBC,IAAAA,IAAI,GAAG;AAAxB,MAA8BJ,GAAG,IAAI,EAA3C,CAHmE,CAKnE;;AACA,MACEF,UAAU,IACVC,EAAE,KAAK,QADP,IAEAA,EAAE,KAAK,OAFP,IAGAI,SAHA,IAIAC,IAJA,IAKAH,IANF,EAOE,OAAO,KAAP;AAEF,SAAO,IAAP;AACD;;AAEM,SAASI,eAAT,CAAyBR,UAAzB,EAAiD;AACtD,QAAM;AAAES,IAAAA;AAAF,MAAeT,UAAU,CAACU,KAAhC,CADsD,CAEtD;;AACA,SAAOD,QAAQ,CAACf,KAAT,CAAeC,MAAf,KAA0B,CAAjC;AACD;;AAQc,SAASgB,SAAT,CACbX,UADa,EAEb;AACEY,EAAAA,IADF;AAEEC,EAAAA,SAFF;AAGEC,EAAAA;AAHF,CAFa,EAOb;AACA,QAAMrB,KAAK,GAAGmB,IAAd;AACA,MAAIC,SAAS,CAAClB,MAAV,GAAmB,CAAnB,IAAwB,CAACF,KAA7B,EAAoC,OAAO,KAAP,CAFpC,CAIA;;AACA,MAAIA,KAAK,CAACsB,IAAN,KAAe,WAAnB,EAAgC,OAAO,KAAP,CALhC,CAOA;;AACA,MAAID,WAAW,IAAI,CAACN,eAAe,CAACR,UAAD,CAAnC,EAAiD,OAAO,KAAP;AAEjD,MAAI,CAACD,cAAc,CAACC,UAAD,EAAaP,KAAb,CAAnB,EAAwC,OAAO,KAAP;AAExC,MAAI,CAACD,iBAAiB,CAACC,KAAD,CAAtB,EAA+B,OAAO,KAAP;AAE/B,SAAO,IAAP;AACD","sourcesContent":["import { Block, Controller, Text } from '@ali/4ever-cangjie';\n\nexport function checkBlockContent(block: Block) {\n  const { nodes } = block;\n  // 子节点数大于1视为非空\n  if (nodes.length > 1 || !Text.isTextList(nodes)) return false;\n  // TODO: 后续做过滤的时候这里需要去掉\n  // 有文本视为非空\n  if (block.text && block.text !== '+') return false;\n  return true;\n}\n\nexport function checkBlockData(controller: Controller, block: Block) {\n  // 检查 data 属性\n  const { blockquote, jc = 'left', ind, list } = block.data || {};\n  const { firstLine = 0, left = 0 } = ind || {};\n\n  // 不支持居中和居右显示\n  if (\n    blockquote ||\n    jc === 'center' ||\n    jc === 'right' ||\n    firstLine ||\n    left ||\n    list\n  ) return false;\n\n  return true;\n}\n\nexport function checkBlockCount(controller: Controller) {\n  const { document } = controller.value;\n  // 如果全局只有一个 node 则不展示，避免和全局的 placeholder 重合\n  return document.nodes.length !== 1;\n}\n\nexport interface IsNewLineProps {\n  node: Block | null;\n  composing: string;\n  placeholder?: string;\n}\n\nexport default function isNewline(\n  controller: Controller,\n  {\n    node,\n    composing,\n    placeholder,\n  }: IsNewLineProps,\n) {\n  const block = node;\n  if (composing.length > 0 || !block) return false;\n\n  // 使用 query 后不会再有 data.pi，直接比较 type\n  if (block.type !== 'paragraph') return false;\n\n  // 依次检查 节点总数、data、内容，复杂度递增\n  if (placeholder && !checkBlockCount(controller)) return false;\n\n  if (!checkBlockData(controller, block)) return false;\n\n  if (!checkBlockContent(block)) return false;\n\n  return true;\n}\n"],"file":"isNewLine.js"}