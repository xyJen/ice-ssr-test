"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnConstruct;

var _everCangjie = require("@ali/4ever-cangjie");

var _newlineGuide = require("../model/newlineGuide");

var _actions = require("../actions");

function createOnConstruct(config) {
  const newlineGuideEnabled = config.newlineGuide?.enabled;
  return (controller, next) => {
    if (!newlineGuideEnabled || _everCangjie.environment.IS_MOBILE) return next();

    if (controller.enableHots || controller.isPendingEnable) {
      const onInput = () => {
        const {
          triggered,
          point,
          query
        } = _newlineGuide.NewlineGuideData.get(controller) || {};
        const {
          selection,
          document,
          composing
        } = controller.value;
        const anchor = selection.anchor;

        if (!triggered || composing) {
          return next();
        }

        if (point?.key === anchor?.key && point?.offset <= anchor?.offset) {
          // 下拉弹窗弹出时计算query
          const node = document.getNode(point.key);
          const newQuery = node?.text.substring(point.offset, anchor?.offset) || '';
          if (query === newQuery) return next();

          if (newQuery.includes(' ')) {
            controller.run('onAction', (0, _actions.removeNewlineData)());
            return next();
          }

          controller.run('onAction', (0, _actions.setNewlineData)({
            query: newQuery
          }));
        }
      };
      /**
       * 在Pending场景下，onchange获取到的query可能会出现迟滞的情况，所以这里需要inputData$来及时更新搜素内容
       * 但是这里只针对进行英文输入的场景，中文输入法下，输入完成后会立即flush，所以inputData$不会触发
       * 所以pending场景还是会走一遍onchange来确保中文输入法query正确
       */


      controller.inputData$.subscribe(onInput);
      controller.hots$.subscribe(() => {
        if (controller.pendingType === _everCangjie.PendingType.input) {
          onInput();
        }
      });
    }

    return next();
  };
}
//# sourceMappingURL=createOnConstruct.js.map