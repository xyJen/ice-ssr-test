{"version":3,"sources":["../../../../../src/plugins/newlineGuide/handlers/createOnKeyUp.ts"],"names":["whiteList","isEmptyNode","block","defaultText","children","nodes","filter","node","Text","isText","includes","type","text","length","isEscHotKey","isUndoKey","isEqualKey","ignoreKeyList","createOnKeyUp","config","newlineGuideEnabled","newlineGuide","enabled","event","controller","next","environment","IS_MOBILE","query","composing","selection","startBlock","value","anchor","isCollapsed","triggered","point","NewlineGuideData","get","key","offset","run","triggerKeyList","target","data","substr","NEWLINE_GUIDE_TRIGGER_CN","triggerList","showMenu"],"mappings":"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","sourcesContent":["import { Controller, environment, Block, Text, TextPoint, BlockChild } from '@ali/4ever-cangjie';\nimport React from 'react';\nimport { isKeyHotkey } from 'is-hotkey';\nimport { NewlineGuideData, triggerKeyList, NEWLINE_GUIDE_TRIGGER_CN, triggerList } from '../model/newlineGuide';\nimport { BiPluginConfig } from '../../../types';\nimport { removeNewlineData, setNewlineData } from '../actions';\n\nconst whiteList = ['ins'];\nfunction isEmptyNode(block: Block, defaultText = ''): boolean {\n  const children = block.nodes.filter((node) => {\n    // 优先排除text节点的内容\n    return !Text.isText(node);\n  }).filter((node) => {\n    // 过滤掉白名单的节点，例如修订模式插入的节点\n    return !whiteList.includes((node as Exclude<BlockChild, Text>).type);\n  });\n  return block.text === defaultText && children.length === 0;\n}\n\nconst isEscHotKey = isKeyHotkey('esc');\nconst isUndoKey = isKeyHotkey('ctrl+z');\nconst isEqualKey = isKeyHotkey('=');\n// 微软中文输入法下，输入斜杠，key为Process，这种场景下，选择对输入的内容进行判断\nconst ignoreKeyList = ['Process'];\n\n/**\n * 因为在中文输入法下存在keydown与cangjieInput时序不可保证\n * 因此使用onKeyUp来收拢触发移除下拉菜单的逻辑\n * 下拉菜单目前触发逻辑：\n * 1.输入/触发\n * 2.在行首输入、触发\n */\nexport default function createOnKeyUp(config: BiPluginConfig) {\n  const newlineGuideEnabled = config.newlineGuide?.enabled;\n  return (event: React.KeyboardEvent, controller: Controller, next: Function) => {\n    if (!newlineGuideEnabled || environment.IS_MOBILE) return next();\n\n    if (controller.query('isTriggerringSnippets')) {\n      return next();\n    }\n\n    const { composing, selection, startBlock } = controller.value;\n    const { anchor, isCollapsed } = selection as { anchor: TextPoint; isCollapsed: boolean };\n    const { triggered, point } =\n      (NewlineGuideData.get(controller) || {}) as { triggered?: boolean; point?: TextPoint };\n    if (\n      triggered &&\n      (isEscHotKey(event) ||\n      isUndoKey(event) ||\n      anchor.key !== point?.key ||\n      anchor?.offset < point?.offset)\n    ) {\n      controller.run('onAction', removeNewlineData());\n    }\n\n    // 特殊处理keyup事件，当+快速弹起的时候可能会触发shift和=两个事件，最终以value为准，TODO：后续需要处理仓颉底层keyup\n    if (triggerKeyList.includes(event.key) || isEqualKey(event) || ignoreKeyList.includes(event.key)) {\n      // 触发\n      const value = (event.target as HTMLTextAreaElement)?.value;\n      // 优先处理在分页模式下唤起问题，真正原因是由于在排版下从onKeyDown->onKeyUp过程中textarea被reset了，后续在底层解决该问题\n      const data = value?.substr(value.length - 1) || event.key;\n      if (\n        data === NEWLINE_GUIDE_TRIGGER_CN && !isEmptyNode(startBlock, data)\n      ) {\n        // 中文顿号在行中不唤起\n        return next();\n      }\n      if (\n        isCollapsed &&\n        startBlock &&\n        triggerList.includes(data) &&\n        !composing\n      ) {\n        // 获取当前光标位置进行存储\n        controller.run('onAction', setNewlineData({\n          key: startBlock.key,\n          triggered: true,\n          point: selection.anchor,\n          showMenu: true,\n        }));\n      }\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnKeyUp.js"}