"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NewlineGuideData = exports.triggerList = exports.triggerKeyList = exports.NEWLINE_GUIDE_TRIGGER_PLUS = exports.NEWLINE_GUIDE_TRIGGER_CN = exports.NEWLINE_GUIDE_TRIGGER = void 0;

var _everCangjie = require("@ali/4ever-cangjie");

const NEWLINE_GUIDE_TRIGGER = '/';
exports.NEWLINE_GUIDE_TRIGGER = NEWLINE_GUIDE_TRIGGER;
const NEWLINE_GUIDE_TRIGGER_CN = '、';
exports.NEWLINE_GUIDE_TRIGGER_CN = NEWLINE_GUIDE_TRIGGER_CN;
const NEWLINE_GUIDE_TRIGGER_PLUS = '+';
exports.NEWLINE_GUIDE_TRIGGER_PLUS = NEWLINE_GUIDE_TRIGGER_PLUS;
const triggerKeyList = [NEWLINE_GUIDE_TRIGGER_PLUS, NEWLINE_GUIDE_TRIGGER];
exports.triggerKeyList = triggerKeyList;
const triggerList = [NEWLINE_GUIDE_TRIGGER_PLUS, NEWLINE_GUIDE_TRIGGER_CN, NEWLINE_GUIDE_TRIGGER];
exports.triggerList = triggerList;

function setNewlineGuide(controller, payload) {
  const {
    _newlineGuide
  } = controller.value.data;
  return controller.setData({ ...controller.value.data,
    _newlineGuide: { ..._newlineGuide,
      ...payload
    }
  });
}

function removeNewlineGuide(controller) {
  const {
    _newlineGuide,
    ...rest
  } = controller.value.data;
  return controller.setData(rest);
}

function getNewlineGuide(controller) {
  return controller.value.data._newlineGuide;
}

const isNewLineInsert = (block, removeText) => {
  return block.type === 'paragraph' && (block.data.jc || 'left') === 'left' && (!block.data.ind || block.data.ind.left === 0) && !block.data.list && _everCangjie.Text.isTextList(block.nodes) && block.text === removeText;
};

function removeGuideMenuTriggerText(controller, needRemoveEmptyParagraph) {
  const newlineGuideData = getNewlineGuide(controller);
  if (!newlineGuideData) return controller;
  const {
    key,
    query = ''
  } = newlineGuideData;
  const point = newlineGuideData.point;
  if (!key) return controller;
  const newlineBlock = controller.value.document.getNode(key);
  if (!newlineBlock) return controller;
  const textNode = newlineBlock.nodes.find(node => point?.key === node.key);
  if (!textNode) return controller;
  const triggerText = textNode.text.substring(point?.offset - 1, point?.offset);
  let removeText = triggerText;

  if (point && query) {
    // 点击输入取query的内容
    removeText = `${triggerText}${query}`;
  }

  if (textNode.text && textNode.text !== '@' && point?.offset > -1) {
    controller.command(_everCangjie.Commands.removeTextByKey, textNode.key, point.offset - 1, removeText);
  }

  if (needRemoveEmptyParagraph && isNewLineInsert(newlineBlock, removeText)) {
    // 如果是空段落则移除当前行
    controller.command(_everCangjie.Commands.removeNodeByKey, newlineBlock.key);
  }

  return controller;
}

const NewlineGuideData = {
  set: setNewlineGuide,
  get: getNewlineGuide,
  remove: removeNewlineGuide,
  removeTriggerText: removeGuideMenuTriggerText
};
exports.NewlineGuideData = NewlineGuideData;
//# sourceMappingURL=newlineGuide.js.map