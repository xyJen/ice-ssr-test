{"version":3,"sources":["../../../../../src/plugins/newlineGuide/components/insertBtn.tsx"],"names":["useActiveInteraction","ActiveInteractionHooks","InsertBtn","props","controller","currentBlock","renderGuideMenu","onClickGuideMenu","enableKeyboard","locale","trigger","container","document","body","guideMenuVisible","setGuideMenuVisibleState","timeout","actions","activeType","setActiveType","activeRef","React","useRef","current","guideMenuVisibleRef","removeHighlightByType","useCallback","type","dispatch","node","reason","clearPrevent","clearTimeout","handler","e","visible","detail","setGuideMenuVisible","window","addEventListener","LEGAL_EVENT","quickInsertMenuVisible","removeEventListener","state","run","handleClickGuideMenu","value","guideMenu","handleMouseLeave","handleMouseEnter","onVisibleChangeForClick","preventMouseMove","onVisibleChangeForHover","setTimeout","handleClick","useEffect","onMouseDown","startBlock","key","command","Commands","moveToEndOfNode","focus","click","clickTip","padding","AddIcon","config","composing","isFocused","isNewLine","query","inTemplateButton","nodeText","text","showBtn","newlineGuide"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useRef, useEffect, useCallback } from 'react';\nimport { Controller, Block, Commands, useScrollableContent } from '@ali/4ever-cangjie';\nimport { Dropdown, Tooltip } from '@ali/we-design';\nimport { LEGAL_EVENT } from '@ali/4ever-utils';\nimport { InsertBtnWrapper, TooltipText, PrimaryText, AddIcon } from './styled';\nimport { ActiveInteractionHooks } from '@ali/4ever-component';\nimport { BiPluginConfig } from '../../../types';\nimport GuideMenu from './guideMenu';\nimport { DropdownAnimation } from '@ali/we-util';\nimport { useLeftToolbar } from '@ali/4ever-component';\nimport { mountInsertMenuFromLeftToolbar } from '../actions';\n\ninterface InsertBtnProps {\n  controller: Controller;\n  locale?: any;\n  currentBlock: Block;\n  enableKeyboard?: boolean;\n  renderGuideMenu?: Function;\n  onClickGuideMenu?: Function;\n  trigger?: 'hover' | 'click';\n}\n\nconst { useActiveInteraction } = ActiveInteractionHooks\n\nexport const InsertBtn: React.FC<InsertBtnProps> = (props) => {\n  const {\n    controller,\n    currentBlock,\n    renderGuideMenu,\n    onClickGuideMenu,\n    enableKeyboard,\n    locale,\n    trigger = 'hover',\n  } = props;\n  // 数据流改造后 useZoomContainer 在未触发controller二次更新前为 null\n  const container = useScrollableContent() || document.body;\n  const [guideMenuVisible, setGuideMenuVisibleState] = useState(false);\n  const timeout = useRef(null);\n  const [,actions] = useLeftToolbar();\n  const [activeType, setActiveType] = useActiveInteraction();\n  const activeRef = React.useRef('');\n  activeRef.current = activeType;\n  const guideMenuVisibleRef = React.useRef(guideMenuVisible);\n  guideMenuVisibleRef.current = guideMenuVisible;\n\n  const removeHighlightByType = React.useCallback((type: 'hover' | 'select') => {\n    if (!currentBlock) return;\n    controller.dispatch('removeHighlight', {\n      node: currentBlock,\n      type,\n      reason: 'insertBtn',\n    });\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      actions.clearPrevent();\n      // InsertBtn 在不渲染时会被卸载，在这里兜底清除选中的样式\n      removeHighlightByType('hover');\n      removeHighlightByType('select');\n      if (guideMenuVisibleRef.current) {\n        setActiveType('');\n      }\n      timeout.current && clearTimeout(timeout.current);\n    };\n  }, [removeHighlightByType, setActiveType]);\n\n  useEffect(() => {\n    const handler = (e: any) => {\n      const { visible } = e.detail;\n      setGuideMenuVisible(visible);\n      removeHighlightByType('select');\n      actions.clearPrevent();\n      timeout.current && clearTimeout(timeout.current);\n    };\n    window.document.addEventListener(LEGAL_EVENT.quickInsertMenuVisible, handler);\n    return () => {\n      window.document.removeEventListener(LEGAL_EVENT.quickInsertMenuVisible, handler);\n    };\n  }, [removeHighlightByType, actions]);\n\n  const setGuideMenuVisible = useCallback((state) => {\n    setGuideMenuVisibleState(state);\n    if (state) {\n      controller.run('onAction', mountInsertMenuFromLeftToolbar());\n    }\n  }, [setGuideMenuVisibleState, controller]);\n\n  const handleClickGuideMenu = (value) => {\n    onClickGuideMenu?.(value);\n    setGuideMenuVisible(false);\n    removeHighlightByType('select');\n    actions.clearPrevent();\n    timeout.current && clearTimeout(timeout.current);\n  };\n\n  const guideMenu = useMemo(() => {\n    if (!renderGuideMenu) {\n      return null;\n    }\n    return (\n      <GuideMenu controller={controller} enableKeyboard={enableKeyboard} onClickGuideMenu={handleClickGuideMenu}>\n        {renderGuideMenu()}\n      </GuideMenu>\n    );\n  }, [renderGuideMenu, enableKeyboard, handleClickGuideMenu]);\n\n  const handleMouseLeave = () => {\n    !guideMenuVisible && removeHighlightByType('hover');\n    timeout.current && clearTimeout(timeout.current);\n  };\n\n  const handleMouseEnter = () => {\n    if (!currentBlock) return;\n    controller.dispatch('updateHighlight', {\n      node: currentBlock,\n      type: 'hover',\n      reason: 'insertBtn',\n    })\n  };\n\n  const onVisibleChangeForClick = (visible: boolean) => {\n    setGuideMenuVisible(visible);\n    if (visible) {\n      actions.preventMouseMove();\n      controller.dispatch('updateHighlight', {\n        node: currentBlock,\n        type: 'select',\n        reason: 'insertBtn',\n      })\n    } else {\n      actions.clearPrevent();\n      removeHighlightByType('select');\n    }\n  };\n\n  const onVisibleChangeForHover = (visible: boolean) => {\n    if (visible) {\n      timeout.current = setTimeout(() => {\n        setGuideMenuVisible(visible);\n        actions.preventMouseMove();\n        controller.dispatch('updateHighlight', {\n          node: currentBlock,\n          type: 'select',\n          reason: 'insertBtn',\n        })\n      }, 300);\n    } else {\n      setGuideMenuVisible(visible);\n      actions.clearPrevent();\n      removeHighlightByType('select');\n      timeout.current && clearTimeout(timeout.current);\n    }\n  };\n\n  const handleClick = () => {\n    setGuideMenuVisible(true);\n    actions.preventMouseMove();\n  };\n\n  React.useEffect(() => {\n    if (guideMenuVisible) {\n      setActiveType('newLineMenu');\n    } else {\n      if (activeRef.current === 'newLineMenu') {\n        setActiveType('');\n      }\n    }\n  }, [guideMenuVisible, setActiveType]);\n\n  const onMouseDown = () => {\n    if (!currentBlock) return;\n    const { startBlock } = controller.value;\n    if (currentBlock?.key === startBlock?.key) return;\n    controller\n      .command(Commands.moveToEndOfNode, currentBlock)\n      .command(Commands.focus);\n  };\n\n  return (\n    <Dropdown\n      overlay={guideMenuVisible ? (\n        <DropdownAnimation\n          visible={guideMenuVisible}\n        >\n          <div onMouseDown={onMouseDown}>{guideMenu}</div>\n        </DropdownAnimation>\n      ) : null}\n      placement=\"leftTop\"\n      trigger={trigger}\n      onVisibleChange={trigger === 'hover'?onVisibleChangeForHover: onVisibleChangeForClick}\n      getContainer={() => container}\n      visible={guideMenuVisible}\n    >\n      <span>\n        <Tooltip\n          title={<TooltipText><PrimaryText>{locale?.click}</PrimaryText>{locale?.clickTip}</TooltipText>}\n          placement=\"top\"\n          getContainer={() => container}\n          overlayStyle={{padding: 4}}\n          disabled={guideMenuVisible || trigger === 'hover'}\n        >\n          <InsertBtnWrapper\n            data-drag-handler-key={currentBlock?.key}\n            data-testid=\"newline-guide-insertText\"\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n          >\n            {AddIcon}\n          </InsertBtnWrapper>\n        </Tooltip>\n      </span>\n    </Dropdown>\n  );\n};\n\nexport default (config: BiPluginConfig) => {\n  return ({ controller, currentBlock }: {\n    controller: Controller;\n    currentBlock: Block;\n  }) => {\n    const { composing, startBlock, isFocused, document } = controller.value;\n    const isNewLine = controller.query('isInsertBtnDisplay', {\n      node: currentBlock,\n      composing,\n    });\n    let inTemplateButton = false;\n    // perf\n    if (isNewLine) {\n      // 模板按钮内隐藏 insert btn\n      inTemplateButton = controller.query('isNodeInTemplateButton', {\n        node: currentBlock,\n      }) ?? false;\n    }\n    const nodeText = currentBlock?.text;\n    const showBtn = !nodeText && isNewLine;\n    if (showBtn && !inTemplateButton) {\n      return (\n        <InsertBtn\n          onClickGuideMenu={config.newlineGuide?.onClickGuideMenu}\n          enableKeyboard={config.newlineGuide?.enableKeyboard}\n          locale={config.newlineGuide?.locale}\n          renderGuideMenu={config.newlineGuide?.renderGuideMenu}\n          trigger={config.newlineGuide?.trigger}\n          controller={controller}\n          currentBlock={currentBlock}\n        />\n      );\n    }\n    return null;\n  };\n};\n"],"file":"insertBtn.js"}