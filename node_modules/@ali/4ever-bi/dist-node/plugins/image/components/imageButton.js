"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageButton = ImageButton;
exports.OptionsButton = exports.ImageStyle = exports.ImageReset = exports.ImageBorder = exports.isButtonDisabled = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _weDesign = require("@ali/we-design");

var _weUtil = require("@ali/we-util");

var _weIcon = require("@ali/we-icon");

var _weToolbar = require("@ali/we-toolbar");

var _everBamboo = require("@ali/4ever-bamboo");

var _everMo = require("@ali/4ever-mo");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _inSelectionInImage = _interopRequireDefault(require("../utils/inSelectionInImage"));

var _getImageSize = _interopRequireDefault(require("../utils/getImageSize"));

var _actions = require("../actions");

var _everPluginPref = require("@ali/4ever-plugin-pref");

var _everUtils = require("@ali/4ever-utils");

var _styled = require("./styled");

var _constants = require("../constants");

var _imageStyleOverlay = require("./imageStyleOverlay");

const _createElement = /*#__PURE__*/_react.default.createElement;
;
;
const lineStyleMap = {
  single: {
    lineType: 'single',
    size: 1
  },
  dotted: {
    lineType: 'dotted',
    size: 1
  },
  dashed: {
    lineType: 'dashed',
    size: 1
  }
};
const lineSizeMap = {
  1: {
    lineType: 'single',
    size: 1
  },
  2: {
    lineType: 'single',
    size: 2
  },
  4: {
    lineType: 'single',
    size: 4
  },
  6: {
    lineType: 'single',
    size: 6
  }
};
const DEFAULT_COLOR = '#D8D8D8';
const DEFAULT_BORDER_ICON_COLOR = 'rgb(17, 31, 44)';
const DEFAULT_TYPE = 'single';
const DEFAULT_WIDTH = 1;

const isButtonDisabled = controller => {
  const {
    value
  } = controller;
  const {
    isCollapsedAtEdge
  } = controller.value.selection;
  const isDisabled = isCollapsedAtEdge || (0, _inSelectionInImage.default)(value) || controller.query('isSelectionInLink') || controller.query('isSelectionInMention') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  return Boolean(isDisabled);
};

exports.isButtonDisabled = isButtonDisabled;

function ImageButton(props) {
  const {
    controller,
    locale,
    ...rest
  } = props;

  const handleClick = _react.default.useCallback(() => controller.run('onAction', (0, _actions.selectImage)()), [controller]);

  return /*#__PURE__*/_createElement(_weToolbar.PictureButton, (0, _extends2.default)({}, rest, {
    testid: "bi-toolbar-picture",
    disabled: isButtonDisabled(controller),
    onClick: handleClick,
    role: _everBamboo.PluginRoles.image
  }));
}

const ImageBorder = props => {
  const {
    controller,
    locale,
    isButtonType,
    ...rest
  } = props;
  const {
    value
  } = controller;
  const {
    focusInline
  } = value;
  const imgOutline = focusInline?.data?.outline || {}; // TODO: 历史数据兼容，此处先处理为default，后续需要we-ui支持不选中状态

  const lineStyle = lineStyleMap[imgOutline.type] ? imgOutline.type : DEFAULT_TYPE;
  const lineSize = `${lineSizeMap[imgOutline.width] ? imgOutline.width : DEFAULT_WIDTH}`;

  const [isOverlayVisible, setOverlayVisible] = _react.default.useState(false);

  const [isSizeSelectVisible, setSizeSelectVisible] = _react.default.useState(false);

  const [isStyleSelectVisible, setStyleSelectVisible] = _react.default.useState(false);

  const handleColorPick = colorValue => {
    const outline = {
      width: DEFAULT_WIDTH,
      ...focusInline?.data?.outline,
      color: colorValue
    };

    if (!colorValue) {
      delete outline.width;
      delete outline.color;
    }

    _everLogger.default.sum('image-border-line-color');

    controller.run('onAction', (0, _actions.updateImage)(focusInline, {
      outline
    }));
  };

  const handleLineStyleChange = key => {
    const outline = {
      color: DEFAULT_COLOR,
      width: DEFAULT_WIDTH,
      ...imgOutline,
      type: lineStyleMap[key].lineType
    };
    controller.run('onAction', (0, _actions.updateImage)(focusInline, {
      outline
    }));

    _everLogger.default.sum('image-border-line-style');
  };

  const handleLineSizeChange = key => {
    const outline = {
      color: DEFAULT_COLOR,
      ...imgOutline,
      width: key ? lineSizeMap[key]?.size || DEFAULT_WIDTH : DEFAULT_WIDTH
    };
    controller.run('onAction', (0, _actions.updateImage)(focusInline, {
      outline
    }));

    _everLogger.default.sum('image-border-line-size');
  };

  const borderLocale = locale && locale.border || {};

  const handleActiveChange = visible => {
    controller.run('onAction', (0, _actions.setImageInjection)(focusInline?.key, {
      isSettingBorder: visible
    }));
  };

  const getColorPanelMode = _react.default.useCallback(() => controller.query('getColorPanelMode')?.mode, [controller]);

  const handleSelectValueChange = _react.default.useCallback(mode => {
    controller.run('onAction', (0, _everPluginPref.setColorPanelMode)({
      mode
    }));
  }, [controller]);

  const color = imgOutline.color || DEFAULT_COLOR;

  const pathColors = _react.default.useMemo(() => [// 当选中颜色为白色时，选中边框的外边缘为黑色，否则选中边框外边缘与内部颜色一致
  color ?? DEFAULT_COLOR, DEFAULT_BORDER_ICON_COLOR], [color]);

  const handleVisibleChange = _react.default.useCallback(e => {
    if (!e && (isSizeSelectVisible || isStyleSelectVisible)) {
      return;
    }

    setOverlayVisible(e);
  }, [isSizeSelectVisible, isStyleSelectVisible]);

  return !isButtonType ? /*#__PURE__*/_createElement(_weToolbar.BorderPicker, (0, _extends2.default)({}, rest, {
    color: color,
    title: borderLocale.style,
    tooltip: borderLocale.style,
    lineStyle: lineStyle,
    lineSize: lineSize,
    lineStyleMap: lineStyleMap,
    lineSizeMap: lineSizeMap,
    onColorPick: handleColorPick,
    onLineStyleChange: handleLineStyleChange,
    onLineSizeChange: handleLineSizeChange,
    onClick: handleLineSizeChange,
    automaticColor: "",
    clearColor: "",
    onActiveChange: handleActiveChange,
    role: _everBamboo.PluginRoles.imageBorder,
    showToggleSelect: true,
    getColorPanelMode: getColorPanelMode,
    onSelectValueChange: handleSelectValueChange,
    testid: "BorderPicker"
  })) : /*#__PURE__*/_createElement(_weDesign.Dropdown, {
    visible: isOverlayVisible || isSizeSelectVisible || isStyleSelectVisible,
    onVisibleChange: handleVisibleChange,
    testid: "image-sidebar-border-dropdown",
    role: _everBamboo.PluginRoles.imageBorder,
    overlay: /*#__PURE__*/_createElement(_weUtil.DropdownAnimation, {
      visible: isOverlayVisible
    }, /*#__PURE__*/_createElement(_weToolbar.BorderPickerOverlay, {
      color: imgOutline.color || DEFAULT_COLOR // @ts-ignore 组件不存在 title 属性
      ,
      title: borderLocale.style,
      tooltip: borderLocale.style,
      lineStyle: lineStyle,
      lineSize: lineSize,
      lineStyleMap: lineStyleMap,
      lineSizeMap: lineSizeMap,
      onColorPick: handleColorPick,
      onLineStyleChange: handleLineStyleChange,
      onLineSizeChange: handleLineSizeChange,
      onClick: handleLineSizeChange,
      automaticColor: "",
      clearColor: "",
      getColorPanelMode: getColorPanelMode,
      onSelectValueChange: handleSelectValueChange,
      onSizeSelectVisibleChange: setSizeSelectVisible,
      onStyleSelectVisibleChange: setStyleSelectVisible,
      showToggleSelect: true
    }))
  }, /*#__PURE__*/_createElement(_styled.BorderButton, {
    onMouseDown: _everUtils.blockEvent,
    "data-testid": "image-sidebar-border-button"
  }, /*#__PURE__*/_createElement(_styled.BorderButtonIcon, null, /*#__PURE__*/_createElement(_weIcon.StrokeNormal, {
    pathColors: pathColors
  })), borderLocale.borderInput));
};

exports.ImageBorder = ImageBorder;

var _ref = /*#__PURE__*/_createElement(_weIcon.RestorepictureNormal, null);

const ImageReset = props => {
  const {
    controller,
    locale,
    ...rest
  } = props;

  const handleClick = () => {
    const {
      value
    } = controller;
    const {
      focusInline
    } = value;
    let originData = {};

    if (focusInline) {
      originData = focusInline.data || {};
    }

    (0, _getImageSize.default)(originData.src, controller).then(({
      width,
      height
    }) => {
      const newPayload = {
        width,
        height,
        ..._constants.RESTORE_DATA
      };
      controller.run('onAction', (0, _actions.updateImage)(focusInline, newPayload));
    });
  };

  return /*#__PURE__*/_createElement(_weToolbar.IconButton, (0, _extends2.default)({}, rest, {
    title: locale.resetTitle,
    tooltip: locale.resetTitle,
    testid: "bi-toolbar-reset-pic",
    icon: _ref,
    onClick: handleClick,
    role: _everBamboo.PluginRoles.imageReset
  }));
};

exports.ImageReset = ImageReset;

const ImageStyle = props => {
  const {
    controller,
    locale,
    size
  } = props;

  const [dropdownVisible, setDropdownVisible] = _react.default.useState(false);

  const scrollableContent = (0, _everBamboo.useScrollableContent)();

  const getContainer = _react.default.useCallback(() => scrollableContent || document.body, [scrollableContent]);

  const image = _everBamboo.ImagePlugin.useFocusImage(controller);

  return /*#__PURE__*/_createElement(_weToolbar.IconMenu, {
    overlay: /*#__PURE__*/_createElement(_imageStyleOverlay.ImageStyleOverlay, {
      controller: controller,
      getImageNode: () => image,
      locale: locale,
      onClick: () => {
        setDropdownVisible(false);
      }
    }),
    title: locale.styleOptions,
    tooltip: locale.styleOptions,
    size: size,
    icon: _styled.StyleButtonIcon,
    onVisibleChange: setDropdownVisible,
    active: dropdownVisible,
    testid: "image-toolbar-recommend-styles",
    role: _everBamboo.PluginRoles.imageRecommendStyle,
    getContainer: getContainer
  });
};

exports.ImageStyle = ImageStyle;

var _ref2 = /*#__PURE__*/_createElement(_weIcon.SettingNormal, null);

const OptionsButton = props => {
  const {
    controller,
    locale
  } = props;
  const {
    focusInline: node
  } = controller.value;

  const handleClick = _react.default.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    controller.run('onAction', (0, _actions.toggleImageSidebar)({
      node,
      toggle: true
    }));
  }, [controller, node]);

  const isDisabled = !_everMo.Image.isImage(node);
  return /*#__PURE__*/_createElement(_weToolbar.IconButton, {
    icon: _ref2,
    tooltip: locale.options,
    onClick: handleClick,
    disabled: isDisabled,
    testid: "pi-toolbar-image-options",
    role: _everBamboo.PluginRoles.imageOptions
  });
};

exports.OptionsButton = OptionsButton;
OptionsButton.displayName = 'OptionsButton';
//# sourceMappingURL=imageButton.js.map