"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _weDesign = require("@ali/we-design");

var _everBamboo = require("@ali/4ever-bamboo");

var _everCangjie = require("@ali/4ever-cangjie");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _everUtils = require("@ali/4ever-utils");

var _getImageSize = _interopRequireDefault(require("../../utils/getImageSize"));

var _actions = require("../../actions");

var _imageButton = require("../../components/imageButton");

var _zh_CN = _interopRequireDefault(require("../../../../locales/zh_CN"));

var _constants = require("../../constants");

var _utils = require("../../utils");

const _createElement = /*#__PURE__*/_react.default.createElement;
const ACCURACY = 2;
const MAX_FIXED_WIDTH = 167; // 24 / 37.7952755906 = 0.6349999999991798

const MIN_FIXED_WIDTH = 0.63;
const COLUMN_GAP = 36;

const CustomButton = /*#__PURE__*/_styledComponents.default.div(["padding:4px 6px;line-height:20px;border:1px solid rgba(0,0,0,0.16);border-radius:4px;font-size:12px;color:rgb(17,31,44);transition:border-color 0.3s ease-in-out;cursor:default;&:hover{border:1px solid #0089ff;}"]);

const RotateButton = /*#__PURE__*/(0, _styledComponents.default)(CustomButton)(["display:flex;width:28px;height:28px;align-items:center;justify-content:center;padding:0;"]);

const MenuLine = /*#__PURE__*/_styledComponents.default.div(["display:grid;grid-template-columns:calc(50% - ", "px) calc(50% - ", "px);grid-column-gap:", "px;", " + ", "{margin-left:6px;}"], COLUMN_GAP / 2, COLUMN_GAP / 2, COLUMN_GAP, RotateButton, RotateButton);

const MenuWrapper = /*#__PURE__*/_styledComponents.default.div(["position:relative;", " + ", "{margin-top:12px;}"], MenuLine, MenuLine);

const ButtonsBox = /*#__PURE__*/_styledComponents.default.div(["display:flex;flex-direction:row;justify-content:flex-start;align-items:center;"]);

function processNumber(num, maxNumber, accuracy = ACCURACY) {
  const realNumber = Math.min(maxNumber, num);
  return (0, _utils.getFixedNumber)(realNumber, accuracy);
}

function getZoomRectClip(rectClip, ratio) {
  const {
    left = 0,
    right = 0,
    top = 0,
    bottom = 0
  } = rectClip || {};

  if (left || right || top || bottom) {
    return {
      rectClip: {
        left: left * ratio,
        right: right * ratio,
        top: top * ratio,
        bottom: bottom * ratio
      }
    };
  }

  return {
    rectClip
  };
}

var _ref = /*#__PURE__*/_createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "20",
  height: "20",
  fill: "none"
}, /*#__PURE__*/_createElement("path", {
  d: "M2.696 6.572a.5.5 0 1 0-1 0v5a.498.498 0 0 0 .5.5h5a.5.5 0 1 0 0-1H3.403L5.05 9.425A7 7 0 0 1 17 14.375a.5.5 0 1 0 1 0A8 8 0 0 0 4.343 8.718l-1.647 1.647V6.572z",
  fill: "#171A1D"
}));

var _ref2 = /*#__PURE__*/_createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "20",
  height: "20",
  fill: "none"
}, /*#__PURE__*/_createElement("path", {
  d: "M17.304 6.572a.5.5 0 0 1 1 0v5a.499.499 0 0 1-.5.5h-5a.5.5 0 1 1 0-1h3.793L14.95 9.425A7 7 0 0 0 3 14.375a.5.5 0 0 1-1 0 8 8 0 0 1 13.657-5.657l1.647 1.647V6.572z",
  fill: "#171A1D"
}));

const SizeAndStyleMenu = props => {
  const {
    controller,
    config
  } = props;
  const {
    value
  } = controller;
  const {
    disableStretchMode,
    locale = _zh_CN.default.image.locale
  } = config;

  const node = _everBamboo.ImagePlugin.useFocusImage(controller); // 通过右键菜单打开右侧面板时，是选中 text image text，因此不一定直接选中图片
  // @ts-ignore


  const image = node?.type === 'image' ? node : node?.getInlinesByType('image')?.at(0) || node;
  const rotation = node?.data?.rotation || 0;
  const src = node?.data?.src;
  const radius = node?.data?.radius || _everBamboo.ImagePlugin.DEFAULT_RADIUS;
  const container = (0, _everCangjie.useZoomContainer)();

  const [width, height] = _react.default.useMemo(() => {
    let memoRealWidth = node?.data?.width;
    let memoRealHeight = node?.data?.height;

    if (!_everBamboo.ImagePlugin.isValidSize(memoRealWidth, memoRealHeight)) {
      const dom = _everCangjie.domUtils.findDOMNodeSafely(image?.key || '', container || window);

      if (dom) {
        const imageWrapper = dom.querySelector(`.${_everBamboo.ImagePlugin.IMAGE_DATA_WRAPPER_CLASS_NAME}`);
        const rect = imageWrapper?.getBoundingClientRect();
        memoRealWidth = _everBamboo.UnitConvert.pix2cm(rect?.width);
        memoRealHeight = _everBamboo.UnitConvert.pix2cm(rect?.height);
      }
    }

    return [memoRealWidth, memoRealHeight];
  }, [image?.data?.width, image?.data?.height, image?.key, container]);

  const ratio = _everBamboo.ImagePlugin.isValidSize(width, height) && width !== 0 ? height / width : 1;

  const [realWidth, realHeight, fixedMaxWidth, fixedMaxHeight] = _react.default.useMemo(() => {
    let memoRealWidth = _everBamboo.UnitConvert.pix2cm(width);

    let memoRealHeight = _everBamboo.UnitConvert.pix2cm(height);

    let memoFixedMaxWidth;
    let memoFixedMaxHeight;

    if (!disableStretchMode || !disableStretchMode()) {
      // 根据是否启用的自适应
      const maxWidth = _everBamboo.ImagePlugin.getImageMaxWidth(value, node);

      const maxHeight = maxWidth * ratio;

      const widthInCM = _everBamboo.UnitConvert.pix2cm(width);

      const heightInCM = _everBamboo.UnitConvert.pix2cm(height);

      const maxWidthInCM = _everBamboo.UnitConvert.pix2cm(maxWidth);

      const maxHeightInCM = _everBamboo.UnitConvert.pix2cm(maxHeight);

      memoRealWidth = processNumber(widthInCM, maxWidthInCM);
      memoRealHeight = processNumber(heightInCM, maxHeightInCM);
      memoFixedMaxWidth = (0, _utils.getFixedNumber)(maxWidthInCM);
      memoFixedMaxHeight = (0, _utils.getFixedNumber)(maxHeightInCM);
    } else {
      memoFixedMaxWidth = MAX_FIXED_WIDTH;
      memoFixedMaxHeight = (0, _utils.getFixedNumber)(fixedMaxWidth * ratio);
      memoRealWidth = (0, _utils.getFixedNumber)(memoRealWidth);
      memoRealHeight = (0, _utils.getFixedNumber)(memoRealHeight);
    }

    return [memoRealWidth, memoRealHeight, memoFixedMaxWidth, memoFixedMaxHeight];
  }, [value, disableStretchMode, height, width, node, ratio]);

  const fixedMinWidth = Math.min(MIN_FIXED_WIDTH, fixedMaxWidth);
  const fixedMinHeight = fixedMinWidth * ratio;

  const handleWidthChange = _react.default.useCallback(change => {
    if (change < fixedMinWidth || change > fixedMaxWidth) {
      return;
    }

    const px = _everBamboo.UnitConvert.cm2pix(change);

    const newWidth = (0, _utils.getFixedNumber)(px);
    const newHeight = newWidth * ratio;

    if (width !== newWidth || height !== newHeight) {
      const zoomRatio = newWidth / node?.data.width;
      const newData = {
        width: newWidth,
        height: newHeight,
        ...getZoomRectClip(node?.data.rectClip, zoomRatio)
      };
      controller.run('onAction', (0, _actions.updateImage)(node, newData));

      _everLogger.default.sum('image-sidebar-width');
    }
  }, [controller, node, ratio, width, height, fixedMaxWidth, fixedMinWidth]);

  const handleHeightChange = _react.default.useCallback(change => {
    if (change < fixedMinHeight || change > fixedMaxHeight) {
      return;
    }

    const px = _everBamboo.UnitConvert.cm2pix(change);

    const newHeight = (0, _utils.getFixedNumber)(px);
    const newWidth = newHeight / ratio;

    if (width !== newWidth || height !== newHeight) {
      const zoomRatio = newHeight / node?.data.height;
      const newData = {
        width: newWidth,
        height: newHeight,
        ...getZoomRectClip(node?.data?.rectClip, zoomRatio)
      };
      controller.run('onAction', (0, _actions.updateImage)(node, newData));

      _everLogger.default.sum('image-sidebar-height');
    }
  }, [ratio, controller, node, width, height, fixedMaxHeight, fixedMinHeight]);

  const handleRotationChange = _react.default.useCallback(change => {
    const newRotation = (0, _everUtils.normalizeAngle)(change);

    if (newRotation !== rotation) {
      controller.run('onAction', (0, _actions.updateImage)(image, {
        rotation: newRotation
      }, container));
    }

    _everLogger.default.sum('image-sidebar-rotation');
  }, [rotation, controller, image, container]);

  const handleReverseRotate90 = _react.default.useCallback(() => {
    const newRotation = (0, _everUtils.normalizeAngle)(rotation - 90);
    controller.run('onAction', (0, _actions.updateImage)(image, {
      rotation: newRotation
    }, container));

    _everLogger.default.sum('image-sidebar-reverse-rotate90');
  }, [rotation, controller, image, container]);

  const handleRotate90 = _react.default.useCallback(() => {
    const newRotation = (0, _everUtils.normalizeAngle)(rotation + 90);
    controller.run('onAction', (0, _actions.updateImage)(image, {
      rotation: newRotation
    }, container));

    _everLogger.default.sum('image-sidebar-rotate90');
  }, [rotation, controller, image, container]);

  const handleRestore = _react.default.useCallback(() => {
    (0, _getImageSize.default)(src, controller).then(({
      width: resetWidth,
      height: resetHeight
    }) => {
      const newPayload = {
        width: resetWidth,
        height: resetHeight,
        ..._constants.RESTORE_DATA
      };
      controller.run('onAction', (0, _actions.updateImage)(node, newPayload));

      _everLogger.default.sum('image-sidebar-restore');
    });
  }, [src, controller, node]);

  const handleRadiusChange = _react.default.useCallback(change => {
    controller.run('onAction', (0, _actions.updateImage)(node, {
      radius: change
    }));

    _everLogger.default.sum('image-sidebar-radius');
  }, [controller, node]);

  const inputNumberStyle = _react.default.useMemo(() => ({
    flex: 1
  }), []);

  const restoreStyle = _react.default.useMemo(() => ({
    marginTop: 12,
    textAlign: 'center'
  }), []);

  const isInvalidSize = !_everBamboo.ImagePlugin.isValidSize(realWidth, realHeight);
  return node ? /*#__PURE__*/_createElement(MenuWrapper, null, /*#__PURE__*/_createElement(MenuLine, {
    key: "image-sidebar-size"
  }, /*#__PURE__*/_createElement(_everBamboo.InputNumberItem, {
    name: "image-width",
    title: locale.width,
    unit: "cm",
    value: realWidth,
    onChange: handleWidthChange,
    max: fixedMaxWidth,
    min: MIN_FIXED_WIDTH,
    key: "image-set-panel-width",
    style: inputNumberStyle,
    disabled: isInvalidSize,
    testid: "image-sidebar-width",
    role: _everBamboo.PluginRoles.imageSidebarWidthInput
  }), /*#__PURE__*/_createElement(_everBamboo.InputNumberItem, {
    name: "image-height",
    title: locale.height,
    unit: "cm",
    value: realHeight,
    onChange: handleHeightChange,
    max: fixedMaxHeight,
    min: fixedMinHeight,
    key: "image-set-panel-height",
    style: inputNumberStyle,
    disabled: isInvalidSize,
    testid: "image-sidebar-height",
    role: _everBamboo.PluginRoles.imageSidebarHeightInput
  })), /*#__PURE__*/_createElement(MenuLine, {
    key: "image-sidebar-rotation"
  }, /*#__PURE__*/_createElement(_everBamboo.InputNumberItem, {
    name: "image-rotation",
    title: locale.rotateInput,
    unit: "\xB0",
    value: rotation,
    onChange: handleRotationChange,
    max: 360,
    min: -360,
    key: "image-set-panel-rotation",
    style: inputNumberStyle,
    step: 45,
    testid: "image-sidebar-rotation",
    role: _everBamboo.PluginRoles.imageSidebarRotationInput
  }), /*#__PURE__*/_createElement(_everBamboo.CustomInputNumberItem, {
    content: /*#__PURE__*/_createElement(ButtonsBox, null, /*#__PURE__*/_createElement(_weDesign.Tooltip, {
      title: locale.rotateAntiClockwise
    }, /*#__PURE__*/_createElement(RotateButton, {
      onClick: handleReverseRotate90,
      key: "reverse-rotate-90",
      "data-testid": "image-sidebar-reverse-rotate-90",
      "data-role": _everBamboo.PluginRoles.imageSidebarReverseRotate90
    }, _ref)), /*#__PURE__*/_createElement(_weDesign.Tooltip, {
      title: locale.rotate
    }, /*#__PURE__*/_createElement(RotateButton, {
      onClick: handleRotate90,
      key: "rotate-90",
      "data-testid": "image-sidebar-rotate-90",
      "data-role": _everBamboo.PluginRoles.imageSidebarRotate90
    }, _ref2))),
    style: inputNumberStyle,
    title: locale.rotate90 || 'Rotate 90°'
  })), /*#__PURE__*/_createElement(MenuLine, {
    key: "image-sidebar-border"
  }, /*#__PURE__*/_createElement(_everBamboo.CustomInputNumberItem, {
    content: /*#__PURE__*/_createElement(_imageButton.ImageBorder, {
      controller: controller,
      locale: locale,
      isButtonType: true
    }),
    style: inputNumberStyle,
    title: locale.border?.borderInput || 'Border'
  }), /*#__PURE__*/_createElement(_everBamboo.InputNumberItem, {
    name: "image-radius",
    title: locale.radius,
    value: radius,
    onChange: handleRadiusChange,
    min: 0,
    max: 9999,
    key: "image-set-panel-radius",
    style: inputNumberStyle,
    testid: "image-sidebar-radius",
    "data-role": _everBamboo.PluginRoles.imageSidebarRadiusInput
  })), /*#__PURE__*/_createElement(CustomButton, {
    onMouseDown: _everUtils.blockEvent,
    onClick: handleRestore,
    style: restoreStyle,
    "data-testid": "image-sidebar-restore",
    "data-role": _everBamboo.PluginRoles.imageSidebarRestore
  }, locale.resetTitle)) : null;
};

var _default = SizeAndStyleMenu;
exports.default = _default;
//# sourceMappingURL=SizeAndStyleMenu.js.map