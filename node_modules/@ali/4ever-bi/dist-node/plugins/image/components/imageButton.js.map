{"version":3,"sources":["../../../../../src/plugins/image/components/imageButton.tsx"],"names":["lineStyleMap","single","lineType","size","dotted","dashed","lineSizeMap","DEFAULT_COLOR","DEFAULT_BORDER_ICON_COLOR","DEFAULT_TYPE","DEFAULT_WIDTH","isButtonDisabled","controller","value","isCollapsedAtEdge","selection","isDisabled","query","Boolean","ImageButton","props","locale","rest","handleClick","React","useCallback","run","PluginRoles","image","ImageBorder","isButtonType","focusInline","imgOutline","data","outline","lineStyle","type","lineSize","width","isOverlayVisible","setOverlayVisible","useState","isSizeSelectVisible","setSizeSelectVisible","isStyleSelectVisible","setStyleSelectVisible","handleColorPick","colorValue","color","logger","sum","handleLineStyleChange","key","handleLineSizeChange","borderLocale","border","handleActiveChange","visible","isSettingBorder","getColorPanelMode","mode","handleSelectValueChange","pathColors","useMemo","handleVisibleChange","e","style","imageBorder","blockEvent","borderInput","ImageReset","originData","src","then","height","newPayload","RESTORE_DATA","resetTitle","imageReset","ImageStyle","dropdownVisible","setDropdownVisible","scrollableContent","getContainer","document","body","ImagePlugin","useFocusImage","styleOptions","StyleButtonIcon","imageRecommendStyle","OptionsButton","node","event","preventDefault","stopPropagation","toggle","Image","isImage","options","imageOptions","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ILineTypeValue, Dropdown } from '@ali/we-design';\nimport { DropdownAnimation } from '@ali/we-util';\nimport { RestorepictureNormal as ChangePicNormal, SettingNormal, StrokeNormal, ToolbarPictureNormal } from '@ali/we-icon';\nimport { PictureButton, BorderPicker, BorderPickerOverlay, IconButton as Button, EColorPanelMode, IconMenu } from '@ali/we-toolbar';\nimport { Controller, Inline } from '@ali/4ever-cangjie';\nimport { PluginRoles, ImagePlugin, useScrollableContent } from '@ali/4ever-bamboo';\nimport { Image } from '@ali/4ever-mo';\nimport logger from '@ali/4ever-logger';\nimport inSelectionInImage from '../utils/inSelectionInImage';\nimport getImageSize from '../utils/getImageSize';\n;\nimport { selectImage, updateImage, setImageInjection, toggleImageSidebar } from '../actions';\n;\nimport { setColorPanelMode } from '@ali/4ever-plugin-pref';\nimport { blockEvent }  from '@ali/4ever-utils';\nimport { RecommendStyleMenuType } from './recommendStyleItems';\nimport { BorderButton, BorderButtonIcon, StyleButtonIcon } from './styled';\nimport { RESTORE_DATA } from '../constants';\nimport { ImageStyleOverlay } from './imageStyleOverlay';\n\nconst lineStyleMap: Record<string, ILineTypeValue> = {\n  single: {\n    lineType: 'single',\n    size: 1,\n  },\n  dotted: {\n    lineType: 'dotted',\n    size: 1,\n  },\n  dashed: {\n    lineType: 'dashed',\n    size: 1,\n  },\n};\n\nconst lineSizeMap: Record<string, ILineTypeValue> = {\n  1: {\n    lineType: 'single',\n    size: 1,\n  },\n  2: {\n    lineType: 'single',\n    size: 2,\n  },\n  4: {\n    lineType: 'single',\n    size: 4,\n  },\n  6: {\n    lineType: 'single',\n    size: 6,\n  },\n};\n\nconst DEFAULT_COLOR = '#D8D8D8';\nconst DEFAULT_BORDER_ICON_COLOR = 'rgb(17, 31, 44)';\nconst DEFAULT_TYPE = 'single';\nconst DEFAULT_WIDTH = 1;\n\nexport interface ImageButtonProps {\n  controller: Controller;\n  locale: ImagePlugin.ILocale;\n}\n\nexport const isButtonDisabled = (controller: Controller) => {\n  const { value } = controller;\n  const { isCollapsedAtEdge } = controller.value.selection;\n  const isDisabled = isCollapsedAtEdge\n    || inSelectionInImage(value)\n    || controller.query('isSelectionInLink')\n    || controller.query('isSelectionInMention')\n    || controller.query('isSelectionInListSymbol')\n    || controller.query('isSelectionInLinkCard');\n  return Boolean(isDisabled);\n}\n\nexport function ImageButton(props: ImageButtonProps) {\n  const { controller, locale, ...rest } = props;\n  const handleClick = React.useCallback(() => controller.run('onAction', selectImage()), [controller]);\n  return (\n    <PictureButton\n      {...rest}\n      testid=\"bi-toolbar-picture\"\n      disabled={isButtonDisabled(controller)}\n      onClick={handleClick}\n      role={PluginRoles.image}\n    />\n  );\n}\n\nexport const ImageBorder: React.FC<ImageButtonProps & { isButtonType?: boolean }> = props => {\n  const { controller, locale, isButtonType, ...rest } = props;\n  const { value } = controller;\n  const { focusInline } = value;\n  const imgOutline = focusInline?.data?.outline || {};\n  // TODO: 历史数据兼容，此处先处理为default，后续需要we-ui支持不选中状态\n  const lineStyle = lineStyleMap[imgOutline.type] ? imgOutline.type : DEFAULT_TYPE;\n  const lineSize = `${lineSizeMap[imgOutline.width] ? imgOutline.width : DEFAULT_WIDTH}`;\n\n  const [isOverlayVisible, setOverlayVisible] = React.useState(false);\n  const [isSizeSelectVisible, setSizeSelectVisible] = React.useState(false);\n  const [isStyleSelectVisible, setStyleSelectVisible] = React.useState(false);\n\n  const handleColorPick = (colorValue: string) => {\n    const outline = {\n      width: DEFAULT_WIDTH,\n      ...focusInline?.data?.outline,\n      color: colorValue,\n    };\n\n    if (!colorValue) {\n      delete outline.width;\n      delete outline.color;\n    }\n    logger.sum('image-border-line-color');\n    controller.run('onAction', updateImage(focusInline, { outline }));\n  };\n\n  const handleLineStyleChange = (key: string) => {\n    const outline = {\n      color: DEFAULT_COLOR,\n      width: DEFAULT_WIDTH,\n      ...imgOutline,\n      type: lineStyleMap[key].lineType,\n    };\n\n    controller.run('onAction', updateImage(focusInline, { outline }));\n    logger.sum('image-border-line-style');\n  };\n\n  const handleLineSizeChange = (key?: string) => {\n    const outline = {\n      color: DEFAULT_COLOR,\n      ...imgOutline,\n      width: key ? (lineSizeMap[key]?.size || DEFAULT_WIDTH) : DEFAULT_WIDTH,\n    };\n    controller.run('onAction', updateImage(focusInline, { outline }));\n    logger.sum('image-border-line-size');\n  };\n\n  const borderLocale = (locale && locale.border) || {};\n\n  const handleActiveChange = (visible) => {\n    controller.run('onAction', setImageInjection(focusInline?.key, {\n      isSettingBorder: visible,\n    }));\n  };\n\n  const getColorPanelMode =\n    React.useCallback(() => controller.query('getColorPanelMode')?.mode, [controller]);\n\n  const handleSelectValueChange = React.useCallback((mode: EColorPanelMode) => {\n    controller.run('onAction', setColorPanelMode({ mode }));\n  }, [controller]);\n\n  const color = imgOutline.color || DEFAULT_COLOR;\n\n  const pathColors = React.useMemo(() => ([\n    // 当选中颜色为白色时，选中边框的外边缘为黑色，否则选中边框外边缘与内部颜色一致\n    color ?? DEFAULT_COLOR,\n    DEFAULT_BORDER_ICON_COLOR,\n  ]), [color]);\n\n  const handleVisibleChange = React.useCallback((e) => {\n    if (!e && (isSizeSelectVisible || isStyleSelectVisible)) {\n      return;\n    }\n    setOverlayVisible(e);\n  }, [isSizeSelectVisible, isStyleSelectVisible]);\n\n  return !isButtonType ? (\n    <BorderPicker\n      {...rest}\n      color={color}\n      title={(borderLocale as Record<string, any>).style}\n      tooltip={(borderLocale as Record<string, any>).style}\n      lineStyle={lineStyle}\n      lineSize={lineSize}\n      lineStyleMap={lineStyleMap}\n      lineSizeMap={lineSizeMap}\n      onColorPick={handleColorPick}\n      onLineStyleChange={handleLineStyleChange}\n      onLineSizeChange={handleLineSizeChange}\n      onClick={handleLineSizeChange}\n      automaticColor=\"\"\n      clearColor=\"\"\n      onActiveChange={handleActiveChange}\n      role={PluginRoles.imageBorder}\n      showToggleSelect\n      getColorPanelMode={getColorPanelMode}\n      onSelectValueChange={handleSelectValueChange}\n      testid=\"BorderPicker\"\n    />\n  ) : (\n    <Dropdown\n      visible={isOverlayVisible || isSizeSelectVisible || isStyleSelectVisible}\n      onVisibleChange={handleVisibleChange}\n      testid=\"image-sidebar-border-dropdown\"\n      role={PluginRoles.imageBorder}\n      overlay={\n        <DropdownAnimation visible={isOverlayVisible}>\n          <BorderPickerOverlay\n            color={imgOutline.color || DEFAULT_COLOR}\n            // @ts-ignore 组件不存在 title 属性\n            title={(borderLocale as Record<string, any>).style}\n            tooltip={(borderLocale as Record<string, any>).style}\n            lineStyle={lineStyle}\n            lineSize={lineSize}\n            lineStyleMap={lineStyleMap}\n            lineSizeMap={lineSizeMap}\n            onColorPick={handleColorPick}\n            onLineStyleChange={handleLineStyleChange}\n            onLineSizeChange={handleLineSizeChange}\n            onClick={handleLineSizeChange}\n            automaticColor=\"\"\n            clearColor=\"\"\n            getColorPanelMode={getColorPanelMode}\n            onSelectValueChange={handleSelectValueChange}\n            onSizeSelectVisibleChange={setSizeSelectVisible}\n            onStyleSelectVisibleChange={setStyleSelectVisible}\n            showToggleSelect\n          />\n        </DropdownAnimation>\n      }\n    >\n      <BorderButton onMouseDown={blockEvent} data-testid=\"image-sidebar-border-button\">\n        <BorderButtonIcon><StrokeNormal pathColors={pathColors} /></BorderButtonIcon>\n        {borderLocale.borderInput}\n      </BorderButton>\n    </Dropdown>\n  );\n};\n\nexport const ImageReset: React.FC<ImageButtonProps> = (props) => {\n  const { controller, locale, ...rest } = props;\n\n  const handleClick = () => {\n    const { value } = controller;\n    const { focusInline } = value;\n    let originData: Record<string, any> = {};\n    if (focusInline) {\n      originData = focusInline.data || {};\n    }\n    getImageSize(originData.src, controller).then(({ width, height }) => {\n      const newPayload = {\n        width,\n        height,\n        ...RESTORE_DATA,\n      };\n      controller.run('onAction', updateImage(focusInline, newPayload));\n    });\n  };\n  return (\n    <Button\n      {...rest}\n      title={locale.resetTitle}\n      tooltip={locale.resetTitle}\n      testid=\"bi-toolbar-reset-pic\"\n      icon={<ChangePicNormal />}\n      onClick={handleClick}\n      role={PluginRoles.imageReset}\n    />\n  );\n};\n\nexport const ImageStyle: React.FC<ImageButtonProps & { size?: RecommendStyleMenuType }> = (props) => {\n  const { controller, locale, size } = props;\n  const [dropdownVisible, setDropdownVisible] = React.useState(false);\n  const scrollableContent = useScrollableContent();\n\n  const getContainer = React.useCallback(() => (scrollableContent || document.body), [scrollableContent]);\n\n  const image = ImagePlugin.useFocusImage(controller);\n\n  return (\n    <IconMenu\n      overlay={\n        <ImageStyleOverlay\n          controller={controller}\n          getImageNode={() => image}\n          locale={locale}\n          onClick={() => { setDropdownVisible(false)}}\n        />}\n      title={locale.styleOptions}\n      tooltip={locale.styleOptions}\n      size={size}\n      icon={StyleButtonIcon}\n      onVisibleChange={setDropdownVisible}\n      active={dropdownVisible}\n      testid=\"image-toolbar-recommend-styles\"\n      role={PluginRoles.imageRecommendStyle}\n      getContainer={getContainer}\n    />\n  );\n}\n\nexport interface OptionsButtonProps {\n  controller: Controller;\n  locale: ImagePlugin.ILocale;\n}\n\nexport const OptionsButton: React.FC<OptionsButtonProps> = (props) => {\n  const { controller, locale } = props;\n  const { focusInline: node } = controller.value;\n\n  const handleClick = React.useCallback((event: React.MouseEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    controller.run('onAction', toggleImageSidebar({\n      node,\n      toggle: true,\n    }));\n  }, [controller, node]);\n\n  const isDisabled = !Image.isImage(node);\n\n  return (\n    <Button\n      icon={<SettingNormal />}\n      tooltip={locale.options}\n      onClick={handleClick}\n      disabled={isDisabled}\n      testid=\"pi-toolbar-image-options\"\n      role={PluginRoles.imageOptions}\n    />\n  );\n};\n\nOptionsButton.displayName = 'OptionsButton';\n"],"file":"imageButton.js"}