"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderHoverToolbar;

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _weDesignNext = require("@ali/we-design-next");

var _everComponent = require("@ali/4ever-component");

var _weIcon = require("@ali/we-icon");

var _everCangjie = require("@ali/4ever-cangjie");

var _everBamboo = require("@ali/4ever-bamboo");

var _everMo = require("@ali/4ever-mo");

var _everUtils = require("@ali/4ever-utils");

var _actions = require("./actions");

var _ImageStyleIconMenu = require("./components/next/ImageStyleIconMenu");

var _getImageSize = _interopRequireDefault(require("./utils/getImageSize"));

var _constants = require("./constants");

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_everComponent.IconCutPic, null);

var _ref2 = /*#__PURE__*/_createElement(_everComponent.IconDownload, null);

var _ref3 = /*#__PURE__*/_createElement(_weDesign.PreviewBetaNormal, null);

var _ref4 = /*#__PURE__*/_createElement(_everComponent.IconRotateLeftLineThin, null);

var _ref5 = /*#__PURE__*/_createElement(_everComponent.IconSetting, null);

function createRenderHoverToolbar(config) {
  const {
    locale = {},
    downloadImage,
    previewImage
  } = config;
  return (props, controller, getNode) => {
    const getImageNode = () => {
      const node = getNode();

      if (_everMo.Image.isImage(node)) {
        return node;
      }

      return null;
    };

    const {
      buttonName,
      extraProps
    } = props;

    switch (buttonName) {
      case 'crop':
        return {
          icon: _ref,
          title: locale?.cropping,
          tooltip: locale?.cropping,
          onClick: () => {
            const node = getImageNode();
            if (!_everMo.Image.isImage(node)) return;

            const anchor = _everCangjie.Point.createFromParams(node.getFirstNode().key, 0);

            const newSelection = _everCangjie.Selection.create({
              anchor,
              focus: anchor
            });

            controller.command(_everCangjie.Commands.select, newSelection);
            controller.run('onAction', (0, _actions.setImageInjection)(node.key, {
              isImageCropping: true
            }));
          },
          role: _everBamboo.PluginRoles.imageInlineToolbarCrop,
          testid: 'bi-toolbar-image-crop'
        };

      case 'download':
        return downloadImage ? {
          icon: _ref2,
          title: locale?.downloadImg,
          tooltip: locale?.downloadImg,
          onClick: () => {
            const node = getImageNode();
            const src = node?.data?.src;
            src && downloadImage(src);
          },
          role: _everBamboo.PluginRoles.imageInlineToolbarDownload,
          testid: 'bi-toolbar-image-download'
        } : null;

      case 'preview':
        return previewImage ? {
          icon: _ref3,
          title: locale?.previewImg,
          tooltip: locale?.previewImg,
          onClick: () => {
            const node = getImageNode();
            const src = node?.data?.src;
            src && previewImage(src, node);
          },
          role: _everBamboo.PluginRoles.imageInlineToolbarPreview
        } : null;

      case 'rotate':
        return {
          icon: _ref4,
          title: locale?.rotate90,
          tooltip: locale?.rotate90,
          onClick: () => {
            const node = getImageNode();
            if (!node) return;
            const rotation = (0, _everUtils.getData)(node.data, 'rotation', 0);
            const newRotation = (0, _everUtils.normalizeAngle)(rotation - 90);
            controller.run('onAction', (0, _actions.updateImage)(node, {
              rotation: newRotation
            }));
          },
          role: _everBamboo.PluginRoles.imageInlineToolbarRotateReverse,
          testid: 'bi-toolbar-image-rotate'
        };

      case 'options':
        return {
          icon: _ref5,
          title: locale?.advancedSettings,
          tooltip: locale?.advancedSettings,
          onClick: () => {
            const node = getImageNode();
            if (!node) return;

            const anchor = _everCangjie.Point.createFromParams(node.key, 'before');

            const focus = _everCangjie.Point.createFromParams(node.key, 'after');

            const newSelection = _everCangjie.Selection.create({
              anchor,
              focus
            });

            controller.command(_everCangjie.Commands.select, newSelection);
            node && controller.run('onAction', (0, _actions.toggleImageSidebar)({
              node,
              toggle: true
            }));
          },
          role: _everBamboo.PluginRoles.imageOptions,
          autoClose: true,
          testid: 'bi-toolbar-image-options'
        };

      case 'style':
        const {
          onOverlayVisibleChange
        } = extraProps;
        return /*#__PURE__*/_createElement(_weDesignNext.TBItemSlot, {
          display: "iconMenu"
        }, /*#__PURE__*/_createElement(_ImageStyleIconMenu.ImageStyleIconMenu, {
          controller: controller,
          locale: locale,
          onOverlayVisibleChange: onOverlayVisibleChange,
          getImageNode: getImageNode,
          testid: "bi-toolbar-image-style"
        }));

      case 'reset':
        return {
          icon: /*#__PURE__*/_createElement(_weIcon.RestorepictureNormal, {
            style: {
              fontSize: 20
            }
          }),
          title: locale?.resetTitle,
          tooltip: locale?.resetTitle,
          onClick: () => {
            const node = getImageNode();
            if (!node) return;
            (0, _getImageSize.default)(node.data.src, controller).then(({
              width,
              height
            }) => {
              const newPayload = {
                width,
                height,
                ..._constants.RESTORE_DATA
              };
              controller.run('onAction', (0, _actions.updateImage)(node, newPayload));
            });
          },
          role: _everBamboo.PluginRoles.imageReset,
          testid: 'bi-toolbar-image-reset'
        };

      default:
        return null;
    }
  };
}
//# sourceMappingURL=createRenderHoverToolbar.js.map