"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onInsertImage;

var _everBamboo = require("@ali/4ever-bamboo");

var _everCangjie = require("@ali/4ever-cangjie");

var _removeInlineImage = _interopRequireDefault(require("../commands/removeInlineImage"));

var _everUtils = require("@ali/4ever-utils");

var _calcImageSize = _interopRequireDefault(require("../utils/calcImageSize"));

var _loadImageFile = _interopRequireDefault(require("../utils/loadImageFile"));

/* eslint-disable no-param-reassign */
function onInsertImage(controller, maybeImageFiles, imageConfig, state, nodeData = {}, onLoad) {
  const {
    uploadImage,
    shouldInsert
  } = imageConfig;
  const {
    updateInlineImage
  } = _everBamboo.ImagePlugin;
  if (!uploadImage) return controller;
  const files = Array.isArray(maybeImageFiles) ? maybeImageFiles : [maybeImageFiles];
  controller.command(_everCangjie.Commands.focus);
  const tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    controller.command(_everCangjie.Commands.moveToStartOfBlock);
  }

  const loadImageFileTasks = [];
  files.forEach(file => {
    if (!shouldInsert || shouldInsert(file) !== false) {
      loadImageFileTasks.push((0, _loadImageFile.default)(file).catch(loadFailedFile => {
        return {
          isError: true,
          loadFailedFile
        };
      }));
    }
  });
  Promise.all(loadImageFileTasks).then(loadedImages => {
    onLoad && onLoad();
    const images = [];
    loadedImages.forEach((loadedImage, index) => {
      if (loadedImage.isError) {
        const {
          onLoadFileError
        } = imageConfig || {};
        onLoadFileError && onLoadFileError(loadedImage.loadFailedFile.name);
        return;
      }

      const id = (0, _everUtils.generateKey)();
      const {
        img,
        handledFile
      } = loadedImage;
      const uploadUrl = img.src;
      state[id] = {
        url: uploadUrl
      };
      const data = {
        id,
        name: handledFile.name,
        size: handledFile.size
      };
      let isAutoFit = false; // chrome 浏览器不支持 tiff 格式，此时 uploadUrl = ''

      if (uploadUrl) {
        const w = nodeData.width || img.width;
        const h = nodeData.height || img.height;
        const imageSize = (0, _calcImageSize.default)(w, h, controller);
        const {
          width,
          height
        } = imageSize;
        isAutoFit = imageSize.isAutoFit || false;
        data.width = width;
        data.height = height;
      } else {
        data.width = undefined;
        data.height = undefined;
      }

      Object.assign(data, nodeData);

      const image = _everCangjie.Inline.create({
        type: 'image',
        data,
        nodes: [_everCangjie.Text.create()]
      });

      images.push({
        image,
        index
      });
      const {
        selection,
        startInline
      } = controller.value;

      if (selection.isCollapsed && startInline && startInline.type === 'image') {
        controller.command(_everCangjie.Commands.removeNodeByKey, startInline.key);
      }

      controller.setOpRelatedId(image.key).command(_everCangjie.Commands.insertInline, image).command(_everCangjie.Commands.moveToStartOfNextText);

      if (isAutoFit) {
        controller.command(_everCangjie.Commands.insertBlock, 'paragraph');
      }

      controller.command(_everCangjie.Commands.focus).flush();
    });
    images.forEach(({
      image,
      index
    }) => {
      const {
        handledFile
      } = loadedImages[index];
      const {
        key
      } = image;
      const {
        id
      } = image.data;

      const updateProgress = uploadPercent => {
        const {
          injections
        } = controller.value;

        const injection = _everCangjie.Injection.create({
          key,
          data: {
            uploadPercent
          }
        });

        controller.setInjections([...injections.filter(inj => inj.key !== key), injection]);
      };

      uploadImage(handledFile, id, updateProgress).then(res => {
        const {
          url: src,
          width: customWidth,
          height: customHeight,
          extraData
        } = res;
        const node = controller.value.document.getNode(key);

        if (!src) {
          if (_everCangjie.Inline.isInline(node)) {
            (0, _removeInlineImage.default)(controller, node);
          }

          return;
        }

        if (_everCangjie.Inline.isInline(node)) {
          const newData = {
            src
          };

          if (customWidth && customHeight) {
            newData.width = customWidth;
            newData.height = customHeight;
          }

          if (extraData) {
            newData.extraData = { ...node.data.extraData,
              ...extraData
            };
          }

          controller.setOpRelatedId(node.key);
          updateInlineImage(controller, node, newData);
        }
      }).catch(e => {
        console.error(e);
        const node = controller.value.document.getNode(key);

        if (_everCangjie.Inline.isInline(node)) {
          (0, _removeInlineImage.default)(controller, node);
        }
      });
    });
  });
  return controller;
}
//# sourceMappingURL=onInsertImage.js.map