{"version":3,"sources":["../../../../../src/plugins/image/handlers/onInsertImage.ts"],"names":["onInsertImage","controller","maybeImageFiles","imageConfig","state","nodeData","onLoad","uploadImage","shouldInsert","updateInlineImage","ImagePlugin","files","Array","isArray","command","Commands","focus","tableSelection","query","moveToStartOfBlock","loadImageFileTasks","forEach","file","push","catch","loadFailedFile","isError","Promise","all","then","loadedImages","images","loadedImage","index","onLoadFileError","name","id","img","handledFile","uploadUrl","src","url","data","size","isAutoFit","w","width","h","height","imageSize","undefined","Object","assign","image","Inline","create","type","nodes","Text","selection","startInline","value","isCollapsed","removeNodeByKey","key","setOpRelatedId","insertInline","moveToStartOfNextText","insertBlock","flush","updateProgress","uploadPercent","injections","injection","Injection","setInjections","filter","inj","res","customWidth","customHeight","extraData","node","document","getNode","isInline","newData","e","console","error"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AANA;AAee,SAASA,aAAT,CACbC,UADa,EAEbC,eAFa,EAGbC,WAHa,EAIbC,KAJa,EAKbC,QAA6B,GAAG,EALnB,EAMbC,MANa,EAOb;AACA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAgCL,WAAtC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAwBC,uBAA9B;AACA,MAAI,CAACH,WAAL,EAAkB,OAAON,UAAP;AAElB,QAAMU,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcX,eAAd,IACVA,eADU,GAEV,CAACA,eAAD,CAFJ;AAGAD,EAAAA,UAAU,CAACa,OAAX,CAAmBC,sBAASC,KAA5B;AACA,QAAMC,cAAc,GAAGhB,UAAU,CAACiB,KAAX,CAAiB,gBAAjB,CAAvB;;AACA,MAAID,cAAJ,EAAoB;AAClBhB,IAAAA,UAAU,CAACa,OAAX,CAAmBC,sBAASI,kBAA5B;AACD;;AACD,QAAMC,kBAA0E,GAAG,EAAnF;AACAT,EAAAA,KAAK,CAACU,OAAN,CAAeC,IAAD,IAAU;AACtB,QAAI,CAACd,YAAD,IAAiBA,YAAY,CAACc,IAAD,CAAZ,KAAuB,KAA5C,EAAmD;AACjDF,MAAAA,kBAAkB,CAACG,IAAnB,CAAwB,4BAAcD,IAAd,EAAoBE,KAApB,CAA2BC,cAAD,IAAoB;AACpE,eAAO;AACLC,UAAAA,OAAO,EAAE,IADJ;AAELD,UAAAA;AAFK,SAAP;AAID,OALuB,CAAxB;AAMD;AACF,GATD;AAUAE,EAAAA,OAAO,CAACC,GAAR,CAAYR,kBAAZ,EAAgCS,IAAhC,CAAsCC,YAAD,IAAkB;AACrDxB,IAAAA,MAAM,IAAIA,MAAM,EAAhB;AACA,UAAMyB,MAA+C,GAAG,EAAxD;AACAD,IAAAA,YAAY,CAACT,OAAb,CAAqB,CAACW,WAAD,EAAcC,KAAd,KAAwB;AAC3C,UAAKD,WAAD,CAAoCN,OAAxC,EAAiD;AAC/C,cAAM;AAAEQ,UAAAA;AAAF,YAAsB/B,WAAW,IAAI,EAA3C;AACA+B,QAAAA,eAAe,IAAIA,eAAe,CAAEF,WAAD,CAAoCP,cAApC,CAAmDU,IAApD,CAAlC;AACA;AACD;;AACD,YAAMC,EAAE,GAAG,6BAAX;AACA,YAAM;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAuBN,WAA7B;AACA,YAAMO,SAAS,GAAGF,GAAG,CAACG,GAAtB;AACApC,MAAAA,KAAK,CAACgC,EAAD,CAAL,GAAY;AAAEK,QAAAA,GAAG,EAAEF;AAAP,OAAZ;AACA,YAAMG,IAAyB,GAAG;AAChCN,QAAAA,EADgC;AAEhCD,QAAAA,IAAI,EAAEG,WAAW,CAACH,IAFc;AAGhCQ,QAAAA,IAAI,EAAEL,WAAW,CAACK;AAHc,OAAlC;AAKA,UAAIC,SAAS,GAAG,KAAhB,CAf2C,CAgB3C;;AACA,UAAIL,SAAJ,EAAe;AACb,cAAMM,CAAC,GAAGxC,QAAQ,CAACyC,KAAT,IAAkBT,GAAG,CAACS,KAAhC;AACA,cAAMC,CAAC,GAAG1C,QAAQ,CAAC2C,MAAT,IAAmBX,GAAG,CAACW,MAAjC;AACA,cAAMC,SAAS,GAAG,4BAAcJ,CAAd,EAAiBE,CAAjB,EAAoB9C,UAApB,CAAlB;AACA,cAAM;AAAE6C,UAAAA,KAAF;AAASE,UAAAA;AAAT,YAAoBC,SAA1B;AACAL,QAAAA,SAAS,GAAGK,SAAS,CAACL,SAAV,IAAuB,KAAnC;AACAF,QAAAA,IAAI,CAACI,KAAL,GAAaA,KAAb;AACAJ,QAAAA,IAAI,CAACM,MAAL,GAAcA,MAAd;AACD,OARD,MAQO;AACLN,QAAAA,IAAI,CAACI,KAAL,GAAaI,SAAb;AACAR,QAAAA,IAAI,CAACM,MAAL,GAAcE,SAAd;AACD;;AACDC,MAAAA,MAAM,CAACC,MAAP,CAAcV,IAAd,EAAoBrC,QAApB;;AACA,YAAMgD,KAAK,GAAGC,oBAAOC,MAAP,CAAc;AAC1BC,QAAAA,IAAI,EAAE,OADoB;AAE1Bd,QAAAA,IAF0B;AAG1Be,QAAAA,KAAK,EAAE,CAACC,kBAAKH,MAAL,EAAD;AAHmB,OAAd,CAAd;;AAKAxB,MAAAA,MAAM,CAACR,IAAP,CAAY;AACV8B,QAAAA,KADU;AAEVpB,QAAAA;AAFU,OAAZ;AAIA,YAAM;AAAE0B,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAA6B3D,UAAU,CAAC4D,KAA9C;;AACA,UACEF,SAAS,CAAEG,WAAX,IACAF,WADA,IAEAA,WAAW,CAACJ,IAAZ,KAAqB,OAHvB,EAIE;AACAvD,QAAAA,UAAU,CAACa,OAAX,CAAmBC,sBAASgD,eAA5B,EAA6CH,WAAW,CAACI,GAAzD;AACD;;AACD/D,MAAAA,UAAU,CACPgE,cADH,CACkBZ,KAAK,CAACW,GADxB,EAEGlD,OAFH,CAEWC,sBAASmD,YAFpB,EAEkCb,KAFlC,EAGGvC,OAHH,CAGWC,sBAASoD,qBAHpB;;AAIA,UAAIvB,SAAJ,EAAe;AACb3C,QAAAA,UAAU,CAACa,OAAX,CAAmBC,sBAASqD,WAA5B,EAAyC,WAAzC;AACD;;AACDnE,MAAAA,UAAU,CAACa,OAAX,CAAmBC,sBAASC,KAA5B,EAAmCqD,KAAnC;AACD,KAvDD;AAwDAtC,IAAAA,MAAM,CAACV,OAAP,CAAe,CAAC;AAAEgC,MAAAA,KAAF;AAASpB,MAAAA;AAAT,KAAD,KAAsB;AACnC,YAAM;AAAEK,QAAAA;AAAF,UAAkBR,YAAY,CAACG,KAAD,CAApC;AACA,YAAM;AAAE+B,QAAAA;AAAF,UAAUX,KAAhB;AACA,YAAM;AAAEjB,QAAAA;AAAF,UAASiB,KAAK,CAACX,IAArB;;AACA,YAAM4B,cAAc,GAAIC,aAAD,IAA2B;AAChD,cAAM;AAAEC,UAAAA;AAAF,YAAiBvE,UAAU,CAAC4D,KAAlC;;AACA,cAAMY,SAAS,GAAGC,uBAAUnB,MAAV,CAAiB;AACjCS,UAAAA,GADiC;AAEjCtB,UAAAA,IAAI,EAAE;AACJ6B,YAAAA;AADI;AAF2B,SAAjB,CAAlB;;AAMAtE,QAAAA,UAAU,CAAC0E,aAAX,CAAyB,CACvB,GAAGH,UAAU,CAACI,MAAX,CAAkBC,GAAG,IAAIA,GAAG,CAACb,GAAJ,KAAYA,GAArC,CADoB,EAEvBS,SAFuB,CAAzB;AAID,OAZD;;AAcAlE,MAAAA,WAAW,CAAC+B,WAAD,EAAcF,EAAd,EAAkBkC,cAAlB,CAAX,CACGzC,IADH,CACSiD,GAAD,IAAS;AACb,cAAM;AAAErC,UAAAA,GAAG,EAAED,GAAP;AAAYM,UAAAA,KAAK,EAAEiC,WAAnB;AAAgC/B,UAAAA,MAAM,EAAEgC,YAAxC;AAAsDC,UAAAA;AAAtD,YAAoEH,GAA1E;AACA,cAAMI,IAAI,GAAGjF,UAAU,CAAC4D,KAAX,CAAiBsB,QAAjB,CAA0BC,OAA1B,CAAkCpB,GAAlC,CAAb;;AACA,YAAI,CAACxB,GAAL,EAAU;AACR,cAAIc,oBAAO+B,QAAP,CAAgBH,IAAhB,CAAJ,EAA2B;AACzB,4CAAkBjF,UAAlB,EAA8BiF,IAA9B;AACD;;AACD;AACD;;AACD,YAAI5B,oBAAO+B,QAAP,CAAgBH,IAAhB,CAAJ,EAA2B;AACzB,gBAAMI,OAAuB,GAAG;AAAE9C,YAAAA;AAAF,WAAhC;;AACA,cAAIuC,WAAW,IAAIC,YAAnB,EAAiC;AAC/BM,YAAAA,OAAO,CAACxC,KAAR,GAAgBiC,WAAhB;AACAO,YAAAA,OAAO,CAACtC,MAAR,GAAiBgC,YAAjB;AACD;;AACD,cAAIC,SAAJ,EAAe;AACbK,YAAAA,OAAO,CAACL,SAAR,GAAoB,EAClB,GAAGC,IAAI,CAACxC,IAAL,CAAUuC,SADK;AAElB,iBAAGA;AAFe,aAApB;AAID;;AACDhF,UAAAA,UAAU,CAACgE,cAAX,CAA0BiB,IAAI,CAAClB,GAA/B;AACAvD,UAAAA,iBAAiB,CAACR,UAAD,EAAaiF,IAAb,EAAmBI,OAAnB,CAAjB;AACD;AACF,OAzBH,EA0BG9D,KA1BH,CA0BU+D,CAAD,IAAO;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,cAAML,IAAI,GAAGjF,UAAU,CAAC4D,KAAX,CAAiBsB,QAAjB,CAA0BC,OAA1B,CAAkCpB,GAAlC,CAAb;;AACA,YAAIV,oBAAO+B,QAAP,CAAgBH,IAAhB,CAAJ,EAA2B;AACzB,0CAAkBjF,UAAlB,EAA8BiF,IAA9B;AACD;AACF,OAhCH;AAiCD,KAnDD;AAoDD,GA/GD;AAiHA,SAAOjF,UAAP;AACD","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Controller, Inline, Text, Commands, Injection } from '@ali/4ever-cangjie';\nimport removeInlineImage from '../commands/removeInlineImage';\nimport { generateKey} from '@ali/4ever-utils';\nimport calcImageSize from '../utils/calcImageSize';\nimport loadImageFile from '../utils/loadImageFile';\nimport type { ILoadImageFileRes } from '../utils/loadImageFile';\nimport { IImageData, ImagePluginConfig } from '../types';\n\ninterface ILoadImageErrorRes {\n  isError: boolean;\n  loadFailedFile: File;\n}\n\nexport default function onInsertImage(\n  controller: Controller,\n  maybeImageFiles: File | File[],\n  imageConfig: ImagePluginConfig,\n  state,\n  nodeData: Record<string, any> = {},\n  onLoad?: () => void,\n) {\n  const { uploadImage, shouldInsert } = imageConfig;\n  const { updateInlineImage } = ImagePlugin;\n  if (!uploadImage) return controller;\n\n  const files = Array.isArray(maybeImageFiles)\n    ? maybeImageFiles\n    : [maybeImageFiles];\n  controller.command(Commands.focus);\n  const tableSelection = controller.query('tableSelection');\n  if (tableSelection) {\n    controller.command(Commands.moveToStartOfBlock);\n  }\n  const loadImageFileTasks: Array<Promise<ILoadImageFileRes | ILoadImageErrorRes>> = [];\n  files.forEach((file) => {\n    if (!shouldInsert || shouldInsert(file) !== false) {\n      loadImageFileTasks.push(loadImageFile(file).catch((loadFailedFile) => {\n        return {\n          isError: true,\n          loadFailedFile,\n        };\n      }));\n    }\n  });\n  Promise.all(loadImageFileTasks).then((loadedImages) => {\n    onLoad && onLoad();\n    const images: Array<{ image: Inline; index: number }> = [];\n    loadedImages.forEach((loadedImage, index) => {\n      if ((loadedImage as ILoadImageErrorRes).isError) {\n        const { onLoadFileError } = imageConfig || {};\n        onLoadFileError && onLoadFileError((loadedImage as ILoadImageErrorRes).loadFailedFile.name);\n        return;\n      }\n      const id = generateKey();\n      const { img, handledFile } = loadedImage as ILoadImageFileRes;\n      const uploadUrl = img.src;\n      state[id] = { url: uploadUrl };\n      const data: Partial<IImageData> = {\n        id,\n        name: handledFile.name,\n        size: handledFile.size,\n      };\n      let isAutoFit = false;\n      // chrome 浏览器不支持 tiff 格式，此时 uploadUrl = ''\n      if (uploadUrl) {\n        const w = nodeData.width || img.width;\n        const h = nodeData.height || img.height;\n        const imageSize = calcImageSize(w, h, controller);\n        const { width, height } = imageSize;\n        isAutoFit = imageSize.isAutoFit || false;\n        data.width = width;\n        data.height = height;\n      } else {\n        data.width = undefined;\n        data.height = undefined;\n      }\n      Object.assign(data, nodeData);\n      const image = Inline.create({\n        type: 'image',\n        data,\n        nodes: [Text.create()],\n      });\n      images.push({\n        image,\n        index,\n      });\n      const { selection, startInline } = controller.value;\n      if (\n        selection!.isCollapsed &&\n        startInline &&\n        startInline.type === 'image'\n      ) {\n        controller.command(Commands.removeNodeByKey, startInline.key);\n      }\n      controller\n        .setOpRelatedId(image.key)\n        .command(Commands.insertInline, image)\n        .command(Commands.moveToStartOfNextText);\n      if (isAutoFit) {\n        controller.command(Commands.insertBlock, 'paragraph');\n      }\n      controller.command(Commands.focus).flush();\n    });\n    images.forEach(({ image, index }) => {\n      const { handledFile } = loadedImages[index] as ILoadImageFileRes;\n      const { key } = image;\n      const { id } = image.data;\n      const updateProgress = (uploadPercent: number) => {\n        const { injections } = controller.value;\n        const injection = Injection.create({\n          key,\n          data: {\n            uploadPercent,\n          },\n        });\n        controller.setInjections([\n          ...injections.filter(inj => inj.key !== key),\n          injection,\n        ]);\n      };\n  \n      uploadImage(handledFile, id, updateProgress)\n        .then((res) => {\n          const { url: src, width: customWidth, height: customHeight, extraData } = res;\n          const node = controller.value.document.getNode(key);\n          if (!src) {\n            if (Inline.isInline(node)) {\n              removeInlineImage(controller, node);\n            }\n            return;\n          }\n          if (Inline.isInline(node)) {\n            const newData: Inline['data'] = { src };\n            if (customWidth && customHeight) {\n              newData.width = customWidth;\n              newData.height = customHeight;\n            }\n            if (extraData) {\n              newData.extraData = {\n                ...node.data.extraData,\n                ...extraData,\n              };\n            }\n            controller.setOpRelatedId(node.key);\n            updateInlineImage(controller, node, newData);\n          }\n        })\n        .catch((e) => {\n          console.error(e);\n          const node = controller.value.document.getNode(key);\n          if (Inline.isInline(node)) {\n            removeInlineImage(controller, node);\n          }\n        });\n    });\n  });\n\n  return controller;\n}\n"],"file":"onInsertImage.js"}