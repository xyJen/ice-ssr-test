"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnCommand;

var _everCangjie = require("@ali/4ever-cangjie");

var _everBamboo = require("@ali/4ever-bamboo");

var _everMo = require("@ali/4ever-mo");

var _lodash = require("lodash");

var _filterImages = require("../utils/filterImages");

var _transferImages = _interopRequireDefault(require("../commands/transferImages"));

var _preloadImages = _interopRequireDefault(require("../commands/preloadImages"));

var _constants = require("../constants");

var _everUtils = require("@ali/4ever-utils");

var _filterImageData = _interopRequireDefault(require("../utils/filterImageData"));

const defaultFilterTransfer = () => true;
/**
 * 默认过滤掉本地文件，不然会展示裂图
 * @param src
 */


function defaultDropImage(src) {
  if (typeof src !== 'string') return true;
  if (src.length === 0) return true;
  if (src.startsWith('file://')) return true;
  if (src.startsWith('blob:')) return true;
  return false;
}

function createOnCommand(config, state) {
  const {
    transferImageURL,
    shouldTransferImageURL = defaultFilterTransfer,
    filterDataList
  } = config.image || {};
  const {
    generator: generateUuid,
    generateLeafBlockId = false,
    enable: enableUUID = false
  } = config.uuid || {};
  const {
    shouldSkipImageURL = defaultDropImage
  } = config.clipboard || {};
  return function onCommand(command, controller, next) {
    const {
      type,
      args
    } = command;

    if (type === 'insertFragmentWithRealKeyAtRange') {
      const [range, fragment] = args;
      let realFragment = (0, _filterImages.dropImages)(fragment, shouldSkipImageURL);
      const shouldTransferredImages = [];
      const shouldPreloadedImages = [];
      realFragment = realFragment.mapDescendants(node => {
        if (_everMo.Image.isImage(node) && !(0, _lodash.isEmpty)(node.data)) {
          if (transferImageURL && shouldTransferImageURL(node.data.src)) {
            shouldTransferredImages.push(node);
            return node.set('data', _constants.DEFAULT_DATA);
          }

          if (!_everBamboo.ImagePlugin.isValidSize(node.data.width, node.data.height)) {
            shouldPreloadedImages.push(node);
          }

          if (filterDataList) {
            const data = (0, _filterImageData.default)(node.data, filterDataList);
            return node.set('data', data);
          }
        }

        return node;
      }); // TODO: insertFragmentWithRealKeyAtRange 在 image 里被拦截，无法在其他插件处理，待确认是否有更好的方法
      // 重新生成 fragment 中的 uuid，并替换用户数据

      realFragment = enableUUID && generateLeafBlockId ? (0, _everUtils.regenerateUuid)(realFragment, generateUuid) : realFragment;
      const transfers = transferImageURL ? (0, _transferImages.default)(controller, shouldTransferredImages, transferImageURL, state) : [];
      const preloads = (0, _preloadImages.default)(controller, shouldPreloadedImages);
      Promise.all([...transfers, ...preloads]).then(imagesData => {
        // 图片都转存完成后再 update，保证 undo 只需一次
        imagesData.forEach(({
          image,
          data
        }) => {
          // eslint-disable-next-line no-param-reassign
          state[image.key] = {
            isTransferring: false
          };

          _everBamboo.ImagePlugin.updateInlineImage(controller, image, { ..._constants.DEFAULT_DATA,
            ...(data || {})
          });
        });
      });
      return controller.command(_everCangjie.Commands.insertFragmentWithRealKeyAtRange, range, realFragment);
    }

    return next();
  };
}
//# sourceMappingURL=onCommand.js.map