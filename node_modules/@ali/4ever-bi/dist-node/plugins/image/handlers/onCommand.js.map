{"version":3,"sources":["../../../../../src/plugins/image/handlers/onCommand.ts"],"names":["defaultFilterTransfer","defaultDropImage","src","length","startsWith","createOnCommand","config","state","transferImageURL","shouldTransferImageURL","filterDataList","image","generator","generateUuid","generateLeafBlockId","enable","enableUUID","uuid","shouldSkipImageURL","clipboard","onCommand","command","controller","next","type","args","range","fragment","realFragment","shouldTransferredImages","shouldPreloadedImages","mapDescendants","node","MoImage","isImage","data","push","set","DEFAULT_DATA","ImagePlugin","isValidSize","width","height","transfers","preloads","Promise","all","then","imagesData","forEach","key","isTransferring","updateInlineImage","Commands","insertFragmentWithRealKeyAtRange"],"mappings":"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","sourcesContent":["import { Plugin, RangeSelection, Document, Commands, Inline, Block } from '@ali/4ever-cangjie';\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Image as MoImage } from '@ali/4ever-mo';\nimport { isEmpty } from 'lodash-es';\n\nimport { BiPluginConfig } from '../../../types';\nimport { dropImages } from '../utils/filterImages';\nimport transferImages from '../commands/transferImages';\nimport preloadImages from '../commands/preloadImages';\nimport { ImageState } from '../types';\nimport { DEFAULT_DATA } from '../constants';\nimport { regenerateUuid }  from '@ali/4ever-utils';\nimport filterImageData from '../utils/filterImageData';\n\nconst defaultFilterTransfer = () => true;\n\n/**\n * 默认过滤掉本地文件，不然会展示裂图\n * @param src\n */\nfunction defaultDropImage(src: string) {\n  if (typeof src !== 'string') return true;\n  if (src.length === 0) return true;\n  if (src.startsWith('file://')) return true;\n  if (src.startsWith('blob:')) return true;\n  return false;\n}\n\nexport default function createOnCommand(config: BiPluginConfig, state: ImageState): Plugin['onCommand'] {\n  const { transferImageURL, shouldTransferImageURL = defaultFilterTransfer, filterDataList } = config.image || {};\n  const { generator: generateUuid, generateLeafBlockId = false, enable: enableUUID = false } = config.uuid || {};\n  const { shouldSkipImageURL = defaultDropImage } = config.clipboard || {};\n\n  return function onCommand(command, controller, next) {\n    const { type, args } = command;\n    if (type === 'insertFragmentWithRealKeyAtRange') {\n      const [range, fragment] = args as [RangeSelection, Document];\n      let realFragment = dropImages(fragment, shouldSkipImageURL);\n      const shouldTransferredImages: Inline[] = [];\n      const shouldPreloadedImages: Inline[] = [];\n      realFragment = realFragment.mapDescendants((node) => {\n        if (MoImage.isImage(node) && !isEmpty(node.data)) {\n          if (transferImageURL && shouldTransferImageURL(node.data.src)) {\n            shouldTransferredImages.push(node);\n            return node.set('data', DEFAULT_DATA);\n          }\n          if (!ImagePlugin.isValidSize(node.data.width, node.data.height)) {\n            shouldPreloadedImages.push(node);\n          }\n          if (filterDataList) {\n            const data = filterImageData(node.data, filterDataList)\n            return node.set('data', data);\n          }\n        }\n        return node;\n      });\n\n      // TODO: insertFragmentWithRealKeyAtRange 在 image 里被拦截，无法在其他插件处理，待确认是否有更好的方法\n      // 重新生成 fragment 中的 uuid，并替换用户数据\n      realFragment = enableUUID && generateLeafBlockId ? regenerateUuid(realFragment, generateUuid) : realFragment; \n      const transfers = transferImageURL ? transferImages(controller, shouldTransferredImages, transferImageURL, state) : [];\n      const preloads = preloadImages(controller, shouldPreloadedImages);\n      Promise.all([...transfers, ...preloads]).then((imagesData) => {\n        // 图片都转存完成后再 update，保证 undo 只需一次\n        imagesData.forEach(({ image, data }) => {\n          // eslint-disable-next-line no-param-reassign\n          state[image.key] = { isTransferring: false };\n          ImagePlugin.updateInlineImage(controller, image, {\n            ...DEFAULT_DATA,\n            ...(data || {}),\n          });\n        });\n      });\n      return controller.command(Commands.insertFragmentWithRealKeyAtRange, range, realFragment);\n    }\n    return next();\n  };\n}\n"],"file":"onCommand.js"}