{"version":3,"sources":["../../../../../src/plugins/image/handlers/onSpace.ts"],"names":["markdownRegExp","onSpace","event","controller","next","value","anchorText","selection","document","isExpanded","anchor","convertToTextPoints","text","slice","offset","matches","match","matchText","alt","_s","src","_t","title","preventDefault","command","Commands","moveAnchorBackward","length","del","dispatch","mdType","moveToStartOfNextText","paragraph","Block","create","type","nodes","Text","Inline","data","encodeURI","fragment","Document","insertFragment"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,+EAAvB;;AAEe,SAASC,OAAT,CACbC,KADa,EAEbC,UAFa,EAGbC,IAHa,EAIb;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYF,UAAlB;AACA,QAAM;AAAEG,IAAAA,UAAF;AAAcC,IAAAA,SAAd;AAAyBC,IAAAA;AAAzB,MAAsCH,KAA5C;AACA,MAAI,CAACE,SAAD,IAAc,CAACD,UAAf,IAA6BC,SAAS,CAACE,UAA3C,EAAuD,OAAOL,IAAI,EAAX;AAEvD,QAAM;AAAEM,IAAAA;AAAF,MAAaH,SAAS,CAACI,mBAAV,CAA8BH,QAA9B,CAAnB;AACA,QAAMI,IAAI,GAAGN,UAAU,CAACM,IAAX,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyBH,MAAM,CAACI,MAAhC,CAAb;AAEA,QAAMC,OAAO,GAAGH,IAAI,CAACI,KAAL,CAAWhB,cAAX,CAAhB;AAEA,MAAI,CAACe,OAAL,EAAc,OAAOX,IAAI,EAAX;AAEd,QAAM,CAACa,SAAD,EAAYC,GAAZ,EAAiBC,EAAjB,EAAqBC,GAArB,EAA0BC,EAA1B,EAA8BC,KAA9B,IAAuCP,OAA7C;AAEA,MAAIG,GAAG,IAAI,CAACE,GAAZ,EAAiB,OAAOhB,IAAI,EAAX;AAEjBF,EAAAA,KAAK,CAACqB,cAAN,GAhBA,CAiBA;;AACApB,EAAAA,UAAU,CACPqB,OADH,CACWC,sBAASC,kBADpB,EACwCT,SAAS,CAACU,MADlD,EAEGH,OAFH,CAEWC,sBAASG,GAFpB,EAGGC,QAHH,CAGY,6BAHZ,EAG2C;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAH3C,EAlBA,CAwBA;;AACA,MAAI,CAACZ,GAAD,IAAQ,CAACE,GAAb,EAAkB;AAChB,WAAO,qCAAuBjB,UAAvB,EAAmCqB,OAAnC,CAA2CC,sBAASM,qBAApD,CAAP;AACD,GA3BD,CA6BA;;;AACA,QAAMC,SAAS,GAAGC,mBAAMC,MAAN,CAAa;AAC7BC,IAAAA,IAAI,EAAE,WADuB;AACVC,IAAAA,KAAK,EAAE,CACxBC,kBAAKH,MAAL,EADwB,EAExBI,oBAAOJ,MAAP,CAAc;AACZC,MAAAA,IAAI,EAAE,OADM;AAEZI,MAAAA,IAAI,EAAE;AAAEnB,QAAAA,GAAG,EAAEoB,SAAS,CAACpB,GAAD;AAAhB,OAFM;AAGZgB,MAAAA,KAAK,EAAE,CAACC,kBAAKH,MAAL,EAAD;AAHK,KAAd,CAFwB,EAOxBG,kBAAKH,MAAL,EAPwB;AADG,GAAb,CAAlB;;AAWA,QAAMO,QAAQ,GAAGC,sBAASR,MAAT,CAAgB;AAAEE,IAAAA,KAAK,EAAE,CAACJ,SAAD;AAAT,GAAhB,CAAjB;;AAEA,SAAO7B,UAAU,CACdqB,OADI,CACIC,sBAASkB,cADb,EAC6BF,QAD7B,CAAP;AAED","sourcesContent":["import { Controller, Commands, Text, Block, Inline, CangjieInputEvent, Document } from '@ali/4ever-cangjie';\nimport insertImagePlaceholder from '../commands/insertImagePlaceholder';\n\n// Image Markdown 规则\n// ![<ALT>](<URL><TITLE?>)\n// ALT: 非 [] 的字符，可以为空\n// URL: 由 \\w/:?#+.&%- 组成，不支持中文，可以为空，仅支持 http/https 协议\n// TITLE: 由空格 + \"string\" 组成，引号内侧不能为空白符，URL 存在时可以为空\n// eg.\n// 合法：\n//   ![]()\n//   ![](http://bar)\n//   ![](https://www.example.com/foo-1?bar=x#search)\n//   ![](https://www.example.com/foo-1?bar=x,y,z&zoo=a_b_c#search \"title 1\")\n//   ![foo](http://bar)\n//   ![<f o o>](http://bar)\n// 不合法：\n//   ![ab]]()\n//   ![](())\n//   ![](/uri)\n//   ![](file:///uri)\n//   ![](http://uri\"\")\n//   ![](\"abc\")\n//   ![](http://uri \" abc \")\n//   ![](</uri>)\nconst markdownRegExp = /!\\[([^\\[\\]]*)\\]\\(((https?:\\/\\/[\\w/:?#+.~=&%_,-]+)( \"(\\S\\s)?\\S+(\\s\\S)?\")?)?\\)$/;\n\nexport default function onSpace(\n  event: CangjieInputEvent,\n  controller: Controller,\n  next: Function,\n) {\n  const { value } = controller;\n  const { anchorText, selection, document } = value;\n  if (!selection || !anchorText || selection.isExpanded) return next();\n\n  const { anchor } = selection.convertToTextPoints(document);\n  const text = anchorText.text.slice(0, anchor.offset);\n\n  const matches = text.match(markdownRegExp);\n\n  if (!matches) return next();\n\n  const [matchText, alt, _s, src, _t, title] = matches;\n\n  if (alt && !src) return next();\n\n  event.preventDefault();\n  // 删除 markdown 文本\n  controller\n    .command(Commands.moveAnchorBackward, matchText.length)\n    .command(Commands.del)\n    .dispatch('createTriggerMarkdownAction', { mdType: 'image' });\n\n\n  // ![]() 时插入 placeholder\n  if (!alt && !src) {\n    return insertImagePlaceholder(controller).command(Commands.moveToStartOfNextText);\n  }\n\n  // 创建包含图片的 fragment，通过 insertFragment 进行转存插入\n  const paragraph = Block.create({\n    type: 'paragraph', nodes: [\n      Text.create(),\n      Inline.create({\n        type: 'image',\n        data: { src: encodeURI(src) },\n        nodes: [Text.create()],\n      }),\n      Text.create(),\n    ]\n  });\n  const fragment = Document.create({ nodes: [paragraph]});\n\n  return controller\n    .command(Commands.insertFragment, fragment);\n}\n"],"file":"onSpace.js"}