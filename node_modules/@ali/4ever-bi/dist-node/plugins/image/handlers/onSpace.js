"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onSpace;

var _everCangjie = require("@ali/4ever-cangjie");

var _insertImagePlaceholder = _interopRequireDefault(require("../commands/insertImagePlaceholder"));

// Image Markdown 规则
// ![<ALT>](<URL><TITLE?>)
// ALT: 非 [] 的字符，可以为空
// URL: 由 \w/:?#+.&%- 组成，不支持中文，可以为空，仅支持 http/https 协议
// TITLE: 由空格 + "string" 组成，引号内侧不能为空白符，URL 存在时可以为空
// eg.
// 合法：
//   ![]()
//   ![](http://bar)
//   ![](https://www.example.com/foo-1?bar=x#search)
//   ![](https://www.example.com/foo-1?bar=x,y,z&zoo=a_b_c#search "title 1")
//   ![foo](http://bar)
//   ![<f o o>](http://bar)
// 不合法：
//   ![ab]]()
//   ![](())
//   ![](/uri)
//   ![](file:///uri)
//   ![](http://uri"")
//   ![]("abc")
//   ![](http://uri " abc ")
//   ![](</uri>)
const markdownRegExp = /!\[([^\[\]]*)\]\(((https?:\/\/[\w/:?#+.~=&%_,-]+)( "(\S\s)?\S+(\s\S)?")?)?\)$/;

function onSpace(event, controller, next) {
  const {
    value
  } = controller;
  const {
    anchorText,
    selection,
    document
  } = value;
  if (!selection || !anchorText || selection.isExpanded) return next();
  const {
    anchor
  } = selection.convertToTextPoints(document);
  const text = anchorText.text.slice(0, anchor.offset);
  const matches = text.match(markdownRegExp);
  if (!matches) return next();
  const [matchText, alt, _s, src, _t, title] = matches;
  if (alt && !src) return next();
  event.preventDefault(); // 删除 markdown 文本

  controller.command(_everCangjie.Commands.moveAnchorBackward, matchText.length).command(_everCangjie.Commands.del).dispatch('createTriggerMarkdownAction', {
    mdType: 'image'
  }); // ![]() 时插入 placeholder

  if (!alt && !src) {
    return (0, _insertImagePlaceholder.default)(controller).command(_everCangjie.Commands.moveToStartOfNextText);
  } // 创建包含图片的 fragment，通过 insertFragment 进行转存插入


  const paragraph = _everCangjie.Block.create({
    type: 'paragraph',
    nodes: [_everCangjie.Text.create(), _everCangjie.Inline.create({
      type: 'image',
      data: {
        src: encodeURI(src)
      },
      nodes: [_everCangjie.Text.create()]
    }), _everCangjie.Text.create()]
  });

  const fragment = _everCangjie.Document.create({
    nodes: [paragraph]
  });

  return controller.command(_everCangjie.Commands.insertFragment, fragment);
}
//# sourceMappingURL=onSpace.js.map