{"version":3,"sources":["../../../../../src/plugins/image/handlers/onAction.ts"],"names":["createOnAction","config","image","imageConfig","sideBarTrigger","onAction","action","controller","next","type","payload","IMAGE_SELECT","selectImage","defaultSelectImage","then","file","command","IMAGE_UPDATE","node","data","container","ImagePlugin","updateInlineImage","IMAGE_REMOVE","IMAGE_SET_INJECTION","key","injections","value","curInjection","find","inj","injection","Injection","create","setInjections","filter","TOGGLE_IMAGE_SIDEBAR","toggle","callback","open","locale","options","Commands","moveToStartOfNode","focus","flush"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;AAEe,SAASA,cAAT,CACbC,MADa,EAEO;AACpB,QAAM;AAAEC,IAAAA,KAAK,EAAEC,WAAT;AAAsBC,IAAAA;AAAtB,MAAyCH,MAA/C;AACA,SAAO,SAASI,QAAT,CAAkBC,MAAlB,EAA0BC,UAA1B,EAAsCC,IAAtC,EAA4C;AACjD,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBJ,MAA1B;;AACA,QAAIG,IAAI,KAAKE,qBAAb,EAA2B;AACzB,YAAM;AAAEC,QAAAA,WAAW,GAAGC;AAAhB,UAAuCV,WAA7C;AACAS,MAAAA,WAAW,GAAGE,IAAd,CAAoBC,IAAD,IAAU;AAC3B,YAAIA,IAAJ,EAAU;AACRR,UAAAA,UAAU,CAACS,OAAX,CAAmB,iBAAnB,EAAsCD,IAAtC;AACD;AACF,OAJD;AAKD;;AACD,QAAIN,IAAI,KAAKQ,qBAAb,EAA2B;AACzB,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,IAAR;AAAcC,QAAAA;AAAd,UAA4BV,OAAlC;AACA,aAAOW,wBAAYC,iBAAZ,CAA8Bf,UAA9B,EAA0CW,IAA1C,EAAgDC,IAAhD,EAAsDC,SAAtD,CAAP;AACD;;AACD,QAAIX,IAAI,KAAKc,qBAAb,EAA2B;AACzB,YAAM;AAAEL,QAAAA;AAAF,UAAWR,OAAjB;AACA,aAAO,gCAAkBH,UAAlB,EAA8BW,IAA9B,CAAP;AACD;;AACD,QAAIT,IAAI,KAAKe,4BAAb,EAAkC;AAChC,YAAM;AAAEC,QAAAA,GAAF;AAAON,QAAAA;AAAP,UAAgBT,OAAtB;AACA,YAAM;AAAEgB,QAAAA;AAAF,UAAiBnB,UAAU,CAACoB,KAAlC;AACA,YAAMC,YAAY,GAAGF,UAAU,CAACG,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACL,GAAJ,KAAYA,GAAnC,KAA2C,EAAhE;;AACA,YAAMM,SAAS,GAAGC,uBAAUC,MAAV,CAAiB;AACjCR,QAAAA,GADiC;AAEjCN,QAAAA,IAAI,EAAE,EACJ,IAAIS,YAAY,CAACT,IAAb,IAAqB,EAAzB,CADI;AAEJ,aAAGA;AAFC;AAF2B,OAAjB,CAAlB;;AAQAZ,MAAAA,UAAU,CAAC2B,aAAX,CAAyB,CACvB,GAAGR,UAAU,CAACS,MAAX,CAAkBL,GAAG,IAAIA,GAAG,CAACL,GAAJ,KAAYA,GAArC,CADoB,EAEvBM,SAFuB,CAAzB;AAID;;AACD,QAAItB,IAAI,KAAK2B,6BAAb,EAAmC;AACjC,YAAM;AAAElB,QAAAA,IAAF;AAAQmB,QAAAA,MAAR;AAAgBC,QAAAA;AAAhB,UAA6B5B,OAAnC,CADiC,CAEjC;;AACA,UAAI2B,MAAJ,EAAY;AACVjC,QAAAA,cAAc,EAAEmC,IAAhB,CAAqB,oBAArB,EAA2CpC,WAAW,EAAEqC,MAAb,EAAqBC,OAArB,IAAgC,eAA3E;;AACA,YAAIvB,IAAJ,EAAU;AACRX,UAAAA,UAAU,CAACS,OAAX,CAAmB0B,sBAASC,iBAA5B,EAA+CzB,IAA/C,EAAqDF,OAArD,CAA6D0B,sBAASE,KAAtE;;AACA,cAAIN,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAAC/B,UAAD,CAAR;AACD;;AACDA,UAAAA,UAAU,CAACsC,KAAX;AACD;AACF;;AACD,aAAOtC,UAAP;AACD;;AAED,WAAOC,IAAI,EAAX;AACD,GApDD;AAqDD","sourcesContent":["import { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Plugin, Injection, Commands } from '@ali/4ever-cangjie';\nimport { BiPluginConfig } from '../../../types';\nimport { IMAGE_UPDATE, IMAGE_REMOVE, IMAGE_SELECT, IMAGE_SET_INJECTION, TOGGLE_IMAGE_SIDEBAR, INSERT_IMAGE_PLACEHOLDER } from '../actions';\nimport type { ToggleImageSidebarPayload } from '../actions';\nimport removeInlineImage from '../commands/removeInlineImage';\nimport defaultSelectImage from '../utils/selectImage';\n\nexport default function createOnAction(\n  config: BiPluginConfig,\n): Plugin['onAction'] {\n  const { image: imageConfig, sideBarTrigger } = config;\n  return function onAction(action, controller, next) {\n    const { type, payload } = action;\n    if (type === IMAGE_SELECT) {\n      const { selectImage = defaultSelectImage } = imageConfig;\n      selectImage().then((file) => {\n        if (file) {\n          controller.command('insertImageFile', file);\n        }\n      });\n    }\n    if (type === IMAGE_UPDATE) {\n      const { node, data, container } = payload!;\n      return ImagePlugin.updateInlineImage(controller, node, data, container);\n    }\n    if (type === IMAGE_REMOVE) {\n      const { node } = payload!;\n      return removeInlineImage(controller, node);\n    }\n    if (type === IMAGE_SET_INJECTION) {\n      const { key, data } = payload!;\n      const { injections } = controller.value;\n      const curInjection = injections.find(inj => inj.key === key) || {} as Injection;\n      const injection = Injection.create({\n        key,\n        data: {\n          ...(curInjection.data || {}),\n          ...data,\n        },\n      });\n\n      controller.setInjections([\n        ...injections.filter(inj => inj.key !== key),\n        injection,\n      ]);\n    }\n    if (type === TOGGLE_IMAGE_SIDEBAR) {\n      const { node, toggle, callback } = payload as ToggleImageSidebarPayload;\n      // NOTE: 目前 sidebar 未实现 close 方法\n      if (toggle) {\n        sideBarTrigger?.open('image.imageOptions', imageConfig?.locale?.options || 'Image Options');\n        if (node) {\n          controller.command(Commands.moveToStartOfNode, node).command(Commands.focus);\n          if (callback) {\n            callback(controller);\n          }\n          controller.flush();\n        }\n      }\n      return controller;\n    }\n\n    return next();\n  };\n}\n"],"file":"onAction.js"}