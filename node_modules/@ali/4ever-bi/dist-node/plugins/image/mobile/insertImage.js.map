{"version":3,"sources":["../../../../../src/plugins/image/mobile/insertImage.ts"],"names":["PAGE_WIDTH","updateInlineImage","DEFAULT_HEIGHT","DEFAULT_WIDTH","ImagePlugin","insertImage","imageState","controller","src","img","Image","timer","id","imageData","width","height","rotation","image","Inline","create","type","data","nodes","Text","key","isInserting","setOpRelatedId","command","Commands","insertInline","moveToStartOfNextText","insertBlock","focus","onload","clearTimeout","nodeData","naturalWidth","naturalHeight","undefined","logger","info","status","onerror","error","isValidURL","URL","e","invalidSrc","isError","setTimeout"],"mappings":"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","sourcesContent":["import { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Controller, Commands, Inline, Text } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport { isSupportImageOrientation } from '@ali/4ever-plugin-image';\nimport { requestIdleCallback, generateKey } from '@ali/4ever-utils';\nimport setInjection from '../commands/setInjection';\n\nconst { PAGE_WIDTH, updateInlineImage, DEFAULT_HEIGHT, DEFAULT_WIDTH } = ImagePlugin;\n\nexport default function insertImage(imageState: Record<string, any>) {\n  return (controller: Controller, src: string) => {\n    const img = new Image();\n    let timer: ReturnType<typeof setTimeout> | null = null;\n    const id = generateKey();\n    const imageData = {\n      id,\n      width: DEFAULT_WIDTH,\n      height: DEFAULT_HEIGHT,\n      rotation: 0, // 标示 ASL 正确的图片\n      src: null,\n    };\n    const image = Inline.create({\n      type: 'image',\n      data: imageData,\n      nodes: [Text.create()],\n    });\n    imageState[image.key] = {\n      isInserting: true,\n    };\n    controller\n      .setOpRelatedId(image.key)\n      .command(Commands.insertInline, image)\n      .command(Commands.moveToStartOfNextText)\n      .command(Commands.insertBlock, 'paragraph')\n      .command(Commands.focus);\n    img.onload = () => {\n      timer && clearTimeout(timer);\n      const nodeData: { src: string; width?: number; height?: number } = {\n        src,\n      };\n      // 不支持 image-orientation 的浏览器，获取的图片宽高可能是反的\n      if (isSupportImageOrientation()) {\n        let { naturalWidth: width, naturalHeight: height } = img;\n        if (width > PAGE_WIDTH) {\n          height = PAGE_WIDTH / width * height;\n          width = PAGE_WIDTH;\n        }\n        nodeData.width = width;\n        nodeData.height = height;\n      } else {\n        nodeData.width = undefined;\n        nodeData.height = undefined;\n      }\n      controller.setOpRelatedId(image.key);\n      updateInlineImage(controller, image, nodeData);\n      imageState[image.key] = {\n        isInserting: false,\n      };\n      requestIdleCallback(() => {\n        logger.info({\n          type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',\n          status: 'success',\n        });\n      });\n    };\n    img.onerror = (error) => {\n      timer && clearTimeout(timer);\n      let isValidURL = true;\n      try {\n        // eslint-disable-next-line no-new\n        new URL(src);\n      } catch (e) {\n        isValidURL = false;\n      }\n      logger.info({\n        type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',\n        status: 'error',\n        invalidSrc: isValidURL ? '' : src,\n        error,\n      });\n      setInjection(controller, image, {\n        isError: true,\n      });\n    };\n    img.src = src;\n    timer = setTimeout(() => {\n      logger.info({\n        type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',\n        status: 'timeout',\n      });\n    }, 5000);\n    return controller;\n  };\n}\n"],"file":"insertImage.js"}