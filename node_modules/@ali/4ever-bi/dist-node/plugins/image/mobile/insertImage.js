"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = insertImage;

var _everBamboo = require("@ali/4ever-bamboo");

var _everCangjie = require("@ali/4ever-cangjie");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var _everPluginImage = require("@ali/4ever-plugin-image");

var _everUtils = require("@ali/4ever-utils");

var _setInjection = _interopRequireDefault(require("../commands/setInjection"));

const {
  PAGE_WIDTH,
  updateInlineImage,
  DEFAULT_HEIGHT,
  DEFAULT_WIDTH
} = _everBamboo.ImagePlugin;

function insertImage(imageState) {
  return (controller, src) => {
    const img = new Image();
    let timer = null;
    const id = (0, _everUtils.generateKey)();
    const imageData = {
      id,
      width: DEFAULT_WIDTH,
      height: DEFAULT_HEIGHT,
      rotation: 0,
      // 标示 ASL 正确的图片
      src: null
    };

    const image = _everCangjie.Inline.create({
      type: 'image',
      data: imageData,
      nodes: [_everCangjie.Text.create()]
    });

    imageState[image.key] = {
      isInserting: true
    };
    controller.setOpRelatedId(image.key).command(_everCangjie.Commands.insertInline, image).command(_everCangjie.Commands.moveToStartOfNextText).command(_everCangjie.Commands.insertBlock, 'paragraph').command(_everCangjie.Commands.focus);

    img.onload = () => {
      timer && clearTimeout(timer);
      const nodeData = {
        src
      }; // 不支持 image-orientation 的浏览器，获取的图片宽高可能是反的

      if ((0, _everPluginImage.isSupportImageOrientation)()) {
        let {
          naturalWidth: width,
          naturalHeight: height
        } = img;

        if (width > PAGE_WIDTH) {
          height = PAGE_WIDTH / width * height;
          width = PAGE_WIDTH;
        }

        nodeData.width = width;
        nodeData.height = height;
      } else {
        nodeData.width = undefined;
        nodeData.height = undefined;
      }

      controller.setOpRelatedId(image.key);
      updateInlineImage(controller, image, nodeData);
      imageState[image.key] = {
        isInserting: false
      };
      (0, _everUtils.requestIdleCallback)(() => {
        _everLogger.default.info({
          type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',
          status: 'success'
        });
      });
    };

    img.onerror = error => {
      timer && clearTimeout(timer);
      let isValidURL = true;

      try {
        // eslint-disable-next-line no-new
        new URL(src);
      } catch (e) {
        isValidURL = false;
      }

      _everLogger.default.info({
        type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',
        status: 'error',
        invalidSrc: isValidURL ? '' : src,
        error
      });

      (0, _setInjection.default)(controller, image, {
        isError: true
      });
    };

    img.src = src;
    timer = setTimeout(() => {
      _everLogger.default.info({
        type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',
        status: 'timeout'
      });
    }, 5000);
    return controller;
  };
}
//# sourceMappingURL=insertImage.js.map