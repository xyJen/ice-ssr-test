"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderNode;

var React = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _everBamboo = require("@ali/4ever-bamboo");

var _styled = require("./styled");

var _actions = require("../actions");

const _createElement = /*#__PURE__*/React.createElement;

function createRenderNode(imageConfig, state) {
  return {
    image: (props, controller) => {
      const {
        children,
        attributes,
        isSelected,
        node
      } = props;
      const {
        key
      } = node;
      const {
        isError,
        id
      } = node.data;
      const pluginState = state[key];
      const isInserting = pluginState?.isInserting && !isError;
      const isTransferring = pluginState?.isTransferring;
      const uploadPlaceholder = state[id]?.url;
      const {
        selection
      } = controller.value;
      const isImageSelected = isSelected && selection.isCollapsed && controller.value.isFocused;
      const {
        renderExtraNode
      } = imageConfig;

      if ((0, _lodash.isEmpty)(node.data)) {
        return /*#__PURE__*/_createElement(_everBamboo.ImagePlugin.InlinePlaceholder, {
          onClick: e => {
            e.stopPropagation();
            e.preventDefault(); // Blur 状态下不响应

            if (controller.value.isBlurred) return;
            controller.run('onCangjieBlur');
            controller.run('onAction', (0, _actions.selectImage)(node.key));
          }
        }, imageConfig?.locale?.placeholder || 'Image');
      }

      return /*#__PURE__*/_createElement(_styled.ImgMobileContent, attributes, children(), /*#__PURE__*/_createElement(_styled.ImgMobileMeta, {
        className: isImageSelected ? 'show-highlight' : undefined
      }, /*#__PURE__*/_createElement(_everBamboo.ImagePlugin.MobileImage, {
        node: node,
        controller: controller,
        imageConfig: imageConfig,
        readonly: false,
        isSelected: isImageSelected,
        isInserting: isInserting,
        isTransferring: isTransferring,
        uploadPlaceholder: uploadPlaceholder
      }), renderExtraNode && renderExtraNode(node, isSelected)));
    }
  };
}
//# sourceMappingURL=renderNode.js.map