{"version":3,"sources":["../../../../../src/plugins/image/mobile/renderNode.tsx"],"names":["createRenderNode","imageConfig","state","image","props","controller","children","attributes","isSelected","node","key","isError","id","data","pluginState","isInserting","isTransferring","uploadPlaceholder","url","selection","value","isImageSelected","isCollapsed","isFocused","renderExtraNode","e","stopPropagation","preventDefault","isBlurred","run","locale","placeholder","undefined"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAGA;;AACA;;uBAL4B,a;;AAOb,SAASA,gBAAT,CAA0BC,WAA1B,EAA0DC,KAA1D,EAAiE;AAC9E,SAAO;AACLC,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAiCC,UAAjC,KAAgD;AACrD,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,UAAZ;AAAwBC,QAAAA,UAAxB;AAAoCC,QAAAA;AAApC,UAA6CL,KAAnD;AAEA,YAAM;AAAEM,QAAAA;AAAF,UAAUD,IAAhB;AACA,YAAM;AAAEE,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAkBH,IAAI,CAACI,IAA7B;AACA,YAAMC,WAAW,GAAGZ,KAAK,CAACQ,GAAD,CAAzB;AACA,YAAMK,WAAW,GAAGD,WAAW,EAAEC,WAAb,IAA4B,CAACJ,OAAjD;AACA,YAAMK,cAAc,GAAGF,WAAW,EAAEE,cAApC;AACA,YAAMC,iBAAiB,GAAGf,KAAK,CAACU,EAAD,CAAL,EAAWM,GAArC;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAgBd,UAAU,CAACe,KAAjC;AACA,YAAMC,eAAe,GAAGb,UAAU,IAC7BW,SAAS,CAACG,WADS,IAEnBjB,UAAU,CAACe,KAAX,CAAiBG,SAFtB;AAGA,YAAM;AAAEC,QAAAA;AAAF,UAAsBvB,WAA5B;;AAEA,UAAI,qBAAQQ,IAAI,CAACI,IAAb,CAAJ,EAAwB;AACtB,4BACE,eAAC,uBAAD,CAAa,iBAAb;AACE,UAAA,OAAO,EAAGY,CAAD,IAAO;AACdA,YAAAA,CAAC,CAACC,eAAF;AACAD,YAAAA,CAAC,CAACE,cAAF,GAFc,CAGd;;AACA,gBAAItB,UAAU,CAACe,KAAX,CAAiBQ,SAArB,EAAgC;AAChCvB,YAAAA,UAAU,CAACwB,GAAX,CAAe,eAAf;AACAxB,YAAAA,UAAU,CAACwB,GAAX,CAAe,UAAf,EAA2B,0BAAYpB,IAAI,CAACC,GAAjB,CAA3B;AACD;AARH,WAUGT,WAAW,EAAE6B,MAAb,EAAqBC,WAArB,IAAoC,OAVvC,CADF;AAcD;;AAED,0BACE,eAAC,wBAAD,EAAsBxB,UAAtB,EACGD,QAAQ,EADX,eAEE,eAAC,qBAAD;AACE,QAAA,SAAS,EAAEe,eAAe,GAAG,gBAAH,GAAsBW;AADlD,sBAGE,eAAC,uBAAD,CAAa,WAAb;AACE,QAAA,IAAI,EAAEvB,IADR;AAEE,QAAA,UAAU,EAAEJ,UAFd;AAGE,QAAA,WAAW,EAAEJ,WAHf;AAIE,QAAA,QAAQ,EAAE,KAJZ;AAKE,QAAA,UAAU,EAAEoB,eALd;AAME,QAAA,WAAW,EAAEN,WANf;AAOE,QAAA,cAAc,EAAEC,cAPlB;AAQE,QAAA,iBAAiB,EAAEC;AARrB,QAHF,EAaIO,eAAe,IAAIA,eAAe,CAACf,IAAD,EAAOD,UAAP,CAbtC,CAFF,CADF;AAoBD;AArDI,GAAP;AAuDD","sourcesContent":["import * as React from 'react';\nimport { isEmpty } from 'lodash-es';\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Plugin, Inline, RenderNodeProps } from '@ali/4ever-cangjie';\nimport { ImagePluginConfig } from '../types';\nimport { ImgMobileContent, ImgMobileMeta } from './styled';\nimport { selectImage } from '../actions';\n\nexport default function createRenderNode(imageConfig: ImagePluginConfig, state) {\n  return {\n    image: (props: RenderNodeProps<Inline>, controller) => {\n      const { children, attributes, isSelected, node } = props;\n\n      const { key } = node;\n      const { isError, id } = node.data;\n      const pluginState = state[key];\n      const isInserting = pluginState?.isInserting && !isError;\n      const isTransferring = pluginState?.isTransferring;\n      const uploadPlaceholder = state[id]?.url;\n      const { selection } = controller.value;\n      const isImageSelected = isSelected\n        && selection.isCollapsed\n        && controller.value.isFocused;\n      const { renderExtraNode } = imageConfig;\n\n      if (isEmpty(node.data)) {\n        return (\n          <ImagePlugin.InlinePlaceholder\n            onClick={(e) => {\n              e.stopPropagation();\n              e.preventDefault();\n              // Blur 状态下不响应\n              if (controller.value.isBlurred) return;\n              controller.run('onCangjieBlur');\n              controller.run('onAction', selectImage(node.key));\n            }}\n          >\n            {imageConfig?.locale?.placeholder || 'Image'}\n          </ImagePlugin.InlinePlaceholder>\n        )\n      }\n\n      return (\n        <ImgMobileContent {...attributes}>\n          {children()}\n          <ImgMobileMeta\n            className={isImageSelected ? 'show-highlight' : undefined}\n          >\n            <ImagePlugin.MobileImage\n              node={node}\n              controller={controller}\n              imageConfig={imageConfig}\n              readonly={false}\n              isSelected={isImageSelected}\n              isInserting={isInserting}\n              isTransferring={isTransferring}\n              uploadPlaceholder={uploadPlaceholder}\n            />\n            { renderExtraNode && renderExtraNode(node, isSelected) }\n          </ImgMobileMeta>\n        </ImgMobileContent>\n      );\n    },\n  };\n}\n"],"file":"renderNode.js"}