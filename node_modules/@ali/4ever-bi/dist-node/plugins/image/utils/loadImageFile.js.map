{"version":3,"sources":["../../../../../src/plugins/image/utils/loadImageFile.ts"],"names":["file","Promise","resolve","reject","reader","FileReader","addEventListener","e","buffer","target","result","checkedFile","type","img","Image","environment","IS_SAFARI","handledFile","orientation","angle","then","rotatedFile","onload","src","URL","createObjectURL","logger","info","readAsArrayBuffer"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;eAOgBA,IAAD,IAA4C;AACzD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAiCC,CAAD,IAAO;AACrC,YAAMC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAAUC,MAAzB;AACA,YAAM;AAAEV,QAAAA,IAAI,EAAEW,WAAR;AAAqBC,QAAAA;AAArB,UAA8B,4BAAcZ,IAAd,EAAoBQ,MAApB,CAApC;AACA,YAAMK,GAAG,GAAG,IAAIC,KAAJ,EAAZ,CAHqC,CAIrC;;AACA,UAAI,CAACF,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,KAA7B,KAAuC,CAACG,yBAAYC,SAAxD,EAAmE;AACjEd,QAAAA,OAAO,CAAC;AACNW,UAAAA,GADM;AAENI,UAAAA,WAAW,EAAEN;AAFP,SAAD,CAAP;AAIA;AACD;;AACD,YAAMO,WAAW,GAAG,kCAAeV,MAAf,CAApB;AACA,YAAMW,KAAK,GAAG,sCAAmBD,WAAnB,CAAd;AACA,qCAAYP,WAAZ,EAAyBQ,KAAzB,EAAgCC,IAAhC,CAAsCC,WAAD,IAAiB;AACpDR,QAAAA,GAAG,CAACS,MAAJ,GAAa,MAAM;AACjBpB,UAAAA,OAAO,CAAC;AACNW,YAAAA,GADM;AAENI,YAAAA,WAAW,EAAEN;AAFP,WAAD,CAAP;AAID,SALD;;AAMAE,QAAAA,GAAG,CAACU,GAAJ,GAAUC,GAAG,CAACC,eAAJ,CAAoBJ,WAApB,CAAV;AACD,OARD;AASD,KAvBD;AAwBAjB,IAAAA,MAAM,CAACE,gBAAP,CAAwB,OAAxB,EAAiC,MAAM;AACrCoB,0BAAOC,IAAP,CAAY;AACVf,QAAAA,IAAI,EAAE,iBADI;AAEVe,QAAAA,IAAI,EAAE3B,IAAI,EAAEY,IAAN,IAAc;AAFV,OAAZ;;AAIAT,MAAAA,MAAM,CAACH,IAAD,CAAN;AACD,KAND;AAOAI,IAAAA,MAAM,CAACwB,iBAAP,CAAyB5B,IAAzB;AACD,GAlCM,CAAP;AAmCD,C","sourcesContent":["import { environment } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport { getOrientation, orientationToAngle, rotateImage } from './convertImage';\nimport checkFileType from './checkFileType';\n\nexport interface ILoadImageFileRes {\n  img: HTMLImageElement;\n  handledFile: File;\n}\n\nexport default (file: File): Promise<ILoadImageFileRes> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener('load', (e) => {\n      const buffer = e.target!.result as ArrayBuffer;\n      const { file: checkedFile, type } = checkFileType(file, buffer);\n      const img = new Image();\n      // 只有 safari 浏览器支持 tiff 格式\n      if ((type === 'tiff' || type === 'tif') && !environment.IS_SAFARI) {\n        resolve({\n          img,\n          handledFile: checkedFile,\n        });\n        return;\n      }\n      const orientation = getOrientation(buffer);\n      const angle = orientationToAngle(orientation);\n      rotateImage(checkedFile, angle).then((rotatedFile) => {\n        img.onload = () => {\n          resolve({\n            img,\n            handledFile: checkedFile,\n          });\n        };\n        img.src = URL.createObjectURL(rotatedFile);\n      });\n    });\n    reader.addEventListener('error', () => {\n      logger.info({\n        type: 'loadImageFailed',\n        info: file?.type || '',\n      });\n      reject(file);\n    });\n    reader.readAsArrayBuffer(file);\n  });\n};\n"],"file":"loadImageFile.js"}