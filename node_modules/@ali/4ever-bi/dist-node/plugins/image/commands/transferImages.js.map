{"version":3,"sources":["../../../../../src/plugins/image/commands/transferImages.ts"],"names":["isLocalFile","ImagePlugin","transferImageData","image","transfer","maxWidth","src","data","url","extraData","newData","error","console","isError","transferImages","controller","images","state","getImageMaxWidth","value","forEach","item","key","isTransferring","transfers","map"],"mappings":";;;;;;;AACA;;AAGA;;AAIA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,uBAAxB;;AAEA,eAAeC,iBAAf,CAAiCC,KAAjC,EAAgDC,QAAhD,EAAyFC,QAAzF,EAAwJ;AACtJ,QAAM;AAAEC,IAAAA;AAAF,MAAUH,KAAK,CAACI,IAAtB;;AACA,MAAIP,WAAW,CAACM,GAAD,CAAf,EAAsB;AACpB,WAAO;AACLH,MAAAA,KADK;AAELI,MAAAA,IAAI,EAAE;AAFD,KAAP;AAID;;AACD,MAAI;AACF,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAqB,MAAML,QAAQ,CAACE,GAAD,CAAzC,CADE,CAEF;;AACA,UAAMI,OAAO,GAAG,MAAM,iCAAaP,KAAb,EAAoBE,QAApB,EAA8BG,GAA9B,EAAmCC,SAAnC,CAAtB;AACA,WAAOC,OAAP;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd,EADc,CAEd;AACA;;AACA,WAAO;AACLR,MAAAA,KADK;AAELI,MAAAA,IAAI,EAAE;AACJM,QAAAA,OAAO,EAAE;AADL;AAFD,KAAP;AAMD;AACF;;AAEc,SAASC,cAAT,CAAwBC,UAAxB,EAAgDC,MAAhD,EAAkEZ,QAAlE,EAA2Ga,KAA3G,EAA8H;AAC3I,QAAMZ,QAAQ,GAAGJ,wBAAYiB,gBAAZ,CAA6BH,UAAU,CAACI,KAAxC,CAAjB;;AAEAH,EAAAA,MAAM,CAACI,OAAP,CAAe,MAAOC,IAAP,IAAgB;AAC7B;AACA;AACAJ,IAAAA,KAAK,CAACI,IAAI,CAACC,GAAN,CAAL,GAAkB;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAlB,CAH6B,CAI7B;AACD,GALD;AAMA,QAAMC,SAAS,GAAGR,MAAM,CAACS,GAAP,CAAWtB,KAAK,IAAID,iBAAiB,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,CAArC,CAAlB;AAEA,SAAOmB,SAAP;AACD","sourcesContent":["import { Controller, Inline } from '@ali/4ever-cangjie';\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { IImageData, ImageState } from '../types';\nimport { DEFAULT_DATA } from '../constants';\nimport { preloadImage } from './preloadImages';\n\nexport type TransferImageData = Partial<IImageData> & { isError?: boolean };\n\nconst { isLocalFile } = ImagePlugin;\n\nasync function transferImageData(image: Inline, transfer: ImagePlugin.ITransferImageURL, maxWidth): Promise<{ image: Inline; data: TransferImageData }> {\n  const { src } = image.data;\n  if (isLocalFile(src)) {\n    return {\n      image,\n      data: {},\n    };\n  }\n  try {\n    const { url, extraData } = await transfer(src);\n    // 转存成功，读取 image 宽高信息\n    const newData = await preloadImage(image, maxWidth, url, extraData);\n    return newData;\n  } catch (error) {\n    console.error(error);\n    // 转存失败\n    // HACK: 设置 isError 修复 pi 不更新问题\n    return {\n      image,\n      data: {\n        isError: true,\n      },\n    };\n  }\n}\n\nexport default function transferImages(controller: Controller, images: Inline[], transfer: ImagePlugin.ITransferImageURL, state: ImageState) {\n  const maxWidth = ImagePlugin.getImageMaxWidth(controller.value);\n\n  images.forEach(async (item) => {\n    // 转换前先进行标记\n    // eslint-disable-next-line no-param-reassign\n    state[item.key] = { isTransferring: true };\n    // 这里断言 transfer 不会失败\n  });\n  const transfers = images.map(image => transferImageData(image, transfer, maxWidth));\n\n  return transfers;\n}\n"],"file":"transferImages.js"}