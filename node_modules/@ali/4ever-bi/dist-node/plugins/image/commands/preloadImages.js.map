{"version":3,"sources":["../../../../../src/plugins/image/commands/preloadImages.ts"],"names":["preloadImage","image","maxWidth","url","extraData","src","data","width","height","rotation","error","preloadImages","controller","images","ImagePlugin","getImageMaxWidth","value","preloads","map"],"mappings":";;;;;;;;AACA;;AAEA;;AAIO,eAAeA,YAAf,CAA4BC,KAA5B,EAA2CC,QAA3C,EAAqDC,GAArD,EAAmEC,SAAnE,EAAoF;AACzF,MAAI;AACF,UAAMC,GAAG,GAAGF,GAAG,IAAIF,KAAK,CAACK,IAAN,EAAYD,GAA/B;AACA,QAAI;AAAEE,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoB,MAAM,wBAAQH,GAAR,CAA9B;;AACA,QAAIE,KAAK,GAAGL,QAAZ,EAAsB;AACpBM,MAAAA,MAAM,IAAIN,QAAQ,GAAGK,KAArB;AACAA,MAAAA,KAAK,GAAGL,QAAR;AACD;;AACD,UAAMI,IAAgB,GAAG;AAAED,MAAAA,GAAF;AAAOE,MAAAA,KAAP;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA,QAAQ,EAAE;AAAhC,KAAzB;;AACA,QAAIL,SAAJ,EAAe;AACbE,MAAAA,IAAI,CAACF,SAAL,GAAiBA,SAAjB;AACD;;AACD,WAAO;AACLH,MAAAA,KADK;AAELK,MAAAA;AAFK,KAAP;AAID,GAfD,CAeE,OAAOI,KAAP,EAAc;AACd;AACA,UAAMJ,IAAI,GAAG;AAAED,MAAAA,GAAG,EAAEF;AAAP,KAAb;;AACA,QAAIC,SAAJ,EAAe;AACb;AACAE,MAAAA,IAAI,CAACF,SAAL,GAAiBA,SAAjB;AACD;;AACD,WAAO;AACLH,MAAAA,KADK;AAELK,MAAAA;AAFK,KAAP;AAID;AACF,C,CAED;;;AACe,SAASK,aAAT,CAAuBC,UAAvB,EAA+CC,MAA/C,EAAiE;AAC9E,QAAMX,QAAQ,GAAGY,wBAAYC,gBAAZ,CAA6BH,UAAU,CAACI,KAAxC,CAAjB;;AAEA,QAAMC,QAAQ,GAAGJ,MAAM,CAACK,GAAP,CAAWjB,KAAK,IAAID,YAAY,CAACC,KAAD,EAAQC,QAAR,CAAhC,CAAjB;AACA,SAAOe,QAAP;AACD","sourcesContent":["\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Controller, Inline } from '@ali/4ever-cangjie';\nimport { loadImg } from '@ali/4ever-utils';\nimport { DEFAULT_DATA } from '../constants';\nimport { IImageData } from '../types';\n\nexport async function preloadImage(image: Inline, maxWidth, url?: string, extraData?: any) {\n  try {\n    const src = url || image.data?.src;\n    let { width, height } = await loadImg(src);\n    if (width > maxWidth) {\n      height *= maxWidth / width;\n      width = maxWidth;\n    }\n    const data: IImageData = { src, width, height, rotation: 0 };\n    if (extraData) {\n      data.extraData = extraData;\n    }\n    return {\n      image,\n      data,\n    };\n  } catch (error) {\n    // 挂载 img 失败\n    const data = { src: url };\n    if (extraData) {\n      // @ts-ignore\n      data.extraData = extraData;\n    }\n    return {\n      image,\n      data,\n    };\n  }\n}\n\n// 预加载后更新图片的尺寸\nexport default function preloadImages(controller: Controller, images: Inline[]) {\n  const maxWidth = ImagePlugin.getImageMaxWidth(controller.value);\n\n  const preloads = images.map(image => preloadImage(image, maxWidth));\n  return preloads;\n}\n"],"file":"preloadImages.js"}