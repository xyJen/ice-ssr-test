{"version":3,"sources":["../../../../src/plugins/image/createRenderHoverToolbar.tsx"],"names":["createRenderHoverToolbar","config","locale","downloadImage","previewImage","props","controller","getNode","getImageNode","node","Image","isImage","buttonName","extraProps","icon","title","cropping","tooltip","onClick","anchor","Point","createFromParams","getFirstNode","key","newSelection","Selection","create","focus","command","Commands","select","run","isImageCropping","role","PluginRoles","imageInlineToolbarCrop","testid","downloadImg","src","data","imageInlineToolbarDownload","previewImg","imageInlineToolbarPreview","rotate90","rotation","newRotation","imageInlineToolbarRotateReverse","advancedSettings","toggle","imageOptions","autoClose","onOverlayVisibleChange","fontSize","resetTitle","then","width","height","newPayload","RESTORE_DATA","imageReset"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { PreviewBetaNormal } from '@ali/we-design';\nimport { TBItemSlot } from '@ali/we-design-next';\nimport {  IconDownload, IconCutPic, IconRotateLeftLineThin, IconSetting } from '@ali/4ever-component';\nimport { RestorepictureNormal as ChangePicNormal } from '@ali/we-icon';\nimport { Commands, Inline, Point, Selection } from '@ali/4ever-cangjie';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { Image } from '@ali/4ever-mo';\nimport { normalizeAngle } from '@ali/4ever-utils';\nimport type { BiPlugin } from '../../types';\nimport { ImagePluginConfig } from './types';\nimport { setImageInjection } from './actions';\nimport { updateImage, toggleImageSidebar } from './actions';\nimport { getData } from '@ali/4ever-utils';\nimport { ImageStyleIconMenu } from './components/next/ImageStyleIconMenu';\nimport getImageSize from './utils/getImageSize';\nimport { RESTORE_DATA } from './constants';\n\nexport default function createRenderHoverToolbar(\n  config: ImagePluginConfig\n): BiPlugin['renderHoverToolbar'] {\n  const { locale = {}, downloadImage, previewImage } = config;\n  return (props, controller, getNode) => {\n    const getImageNode = () => {\n      const node = getNode();\n      if (Image.isImage(node)) {\n        return node;\n      }\n      return null;\n    }\n    const { buttonName, extraProps } = props;\n    switch (buttonName) {\n      case 'crop':\n        return {\n          icon: <IconCutPic/>,\n          title: locale?.cropping,\n          tooltip: locale?.cropping,\n          onClick: () => {\n            const node = getImageNode();\n            if (!Image.isImage(node)) return;\n            const anchor = Point.createFromParams(node.getFirstNode().key, 0);\n            const newSelection = Selection.create({\n              anchor,\n              focus: anchor,\n            });\n            controller.command(Commands.select, newSelection);\n            controller.run(\n              'onAction',\n              setImageInjection(node.key, {\n                isImageCropping: true,\n              }),\n            );\n          },\n          role: PluginRoles.imageInlineToolbarCrop,\n          testid: 'bi-toolbar-image-crop',\n        };\n      case 'download':\n        return downloadImage ? {\n          icon: <IconDownload />,\n          title: locale?.downloadImg,\n          tooltip: locale?.downloadImg,\n          onClick: () => {\n            const node = getImageNode();\n            const src = node?.data?.src;\n            src && downloadImage(src);\n          },\n          role: PluginRoles.imageInlineToolbarDownload,\n          testid: 'bi-toolbar-image-download',\n        } : null;\n      case 'preview':\n        return previewImage ? {\n          icon: <PreviewBetaNormal />,\n          title: locale?.previewImg,\n          tooltip: locale?.previewImg,\n          onClick: () => {\n            const node = getImageNode();\n            const src = node?.data?.src;\n            src && previewImage(src, (node as Inline));\n          },\n          role: PluginRoles.imageInlineToolbarPreview,\n        } : null;\n      case 'rotate':\n        return {\n          icon: <IconRotateLeftLineThin />,\n          title: locale?.rotate90,\n          tooltip: locale?.rotate90,\n          onClick: () => {\n            const node = getImageNode();\n            if (!node) return;\n            const rotation = getData((node as Inline).data, 'rotation', 0);\n            const newRotation = normalizeAngle(rotation - 90);\n            controller.run('onAction', updateImage(node, {\n              rotation: newRotation,\n            }));\n          },\n          role: PluginRoles.imageInlineToolbarRotateReverse,\n          testid: 'bi-toolbar-image-rotate',\n        }\n      case 'options':\n        return {\n          icon: <IconSetting />,\n          title: locale?.advancedSettings,\n          tooltip: locale?.advancedSettings,\n          onClick: () => {\n            const node = getImageNode();\n            if (!node) return;\n            const anchor = Point.createFromParams(node.key, 'before');\n            const focus = Point.createFromParams(node.key, 'after');\n            const newSelection = Selection.create({\n              anchor,\n              focus,\n            });\n            controller.command(Commands.select, newSelection);\n            node && controller.run('onAction', toggleImageSidebar({\n              node,\n              toggle: true,\n            }));\n          },\n          role: PluginRoles.imageOptions,\n          autoClose: true,\n          testid: 'bi-toolbar-image-options',\n        };\n      case 'style':\n        const { onOverlayVisibleChange } = extraProps;\n        return (\n          <TBItemSlot display='iconMenu'>\n            <ImageStyleIconMenu\n              controller={controller}\n              locale={locale}\n              onOverlayVisibleChange={onOverlayVisibleChange}\n              getImageNode={getImageNode}\n              testid=\"bi-toolbar-image-style\"\n            />\n          </TBItemSlot>\n        );\n      case 'reset':\n        return {\n          icon: <ChangePicNormal style={{ fontSize: 20 }}/>,\n          title: locale?.resetTitle,\n          tooltip: locale?.resetTitle,\n          onClick: () => {\n            const node = getImageNode();\n            if (!node) return;\n            getImageSize(node.data.src, controller).then(({ width, height }) => {\n              const newPayload = {\n                width,\n                height,\n                ...RESTORE_DATA,\n              };\n              controller.run('onAction', updateImage(node, newPayload));\n            });\n          },\n          role: PluginRoles.imageReset,\n          testid: 'bi-toolbar-image-reset',\n        };\n      default: return null;\n    }\n  };\n}\n"],"file":"createRenderHoverToolbar.js"}