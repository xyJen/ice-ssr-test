"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everBamboo = require("@ali/4ever-bamboo");

var _everUtils = require("@ali/4ever-utils");

var _styled = require("../components/styled");

var _utils = require("../utils");

var _actions = require("../actions");

const _createElement = /*#__PURE__*/React.createElement;
const {
  normalizeLink,
  openLink
} = _everBamboo.LinkPlugin;
const {
  height,
  margin
} = _everBamboo.theme.link;

const getMobileMaxWidth = (value, node) => {
  const closestBlock = (0, _everUtils.getClosestContainerBlock)(value, node);
  if (closestBlock) return (0, _everUtils.getInnerWidth)(closestBlock) ?? '100%';
  return '100%';
};

const noop = () => {};

const MobileLink = props => {
  const {
    node,
    attributes,
    protocolAllowList,
    onOpenLink,
    children,
    getLinkInfo,
    controller,
    locale,
    displayType,
    isSelected,
    URLLinkCard
  } = props;
  const {
    href = '',
    cardInfo
  } = node.data;
  const text = controller.query('getText', {
    node
  }) || '';
  const {
    title = '',
    imgURL = '',
    desc = ''
  } = cardInfo || {};
  const urlInfo = React.useMemo(() => ({
    title: text.trim() === href.trim() ? title : text,
    imgURL,
    desc
  }), [title, imgURL, desc, text, href]);
  const handleOpenLink = React.useCallback(() => {
    if (onOpenLink) {
      const normalizedLink = normalizeLink(href, protocolAllowList);
      onOpenLink(normalizedLink);
    } else {
      openLink(href, protocolAllowList);
    }
  }, [href, onOpenLink, protocolAllowList]);
  const tooltipLocale = React.useMemo(() => ({
    editTooltip: locale.edit,
    copyTooltip: locale.copy,
    unlinkTooltip: locale.unlink,
    deleteTooltip: locale.delete,
    switchStyleTooltip: locale.styleText
  }), [locale]);
  const onRefresh = React.useCallback(async () => {
    if (getLinkInfo && typeof getLinkInfo === 'function') {
      // 先设置卡片状态为 loading，刷新无需为节点注入信息
      controller.run('onAction', (0, _actions.injectCardInfo)(node, {
        displayType: 'card'
      }));

      try {
        const info = await getLinkInfo(href);

        if (info) {
          // 请求成功
          const {
            imgURL,
            title,
            desc
          } = info;
          const newInfo = {
            imgURL,
            title,
            desc,
            displayType: 'card'
          };
          controller.run('onAction', (0, _actions.removeInjectCardInfo)(node));
          controller.run('onAction', (0, _actions.updateLinkWithCardInfo)(node, text, href, newInfo));
          controller.run('onCangjieFocus'); // 清理临时状态

          return;
        }
      } catch (e) {} // 请求失败,将状态设置为 error，数据填充 undefined


      controller.run('onAction', (0, _actions.removeInjectCardInfo)(node));
      controller.run('onAction', (0, _actions.updateLinkWithCardInfo)(node, text, href, {
        displayType: 'card'
      }));
    }

    controller.run('onCangjieFocus');
  }, [controller, getLinkInfo, text, href, node]);
  const cardState = (0, _utils.getLinkCardState)(false, node);
  const [maxWidth, setMaxwidth] = React.useState('100%');
  React.useEffect(() => {
    setMaxwidth(getMobileMaxWidth(controller.value, node));
  }, []);
  const handleCopy = React.useCallback(e => {
    e.stopPropagation();
    e.preventDefault();
    controller.run('onAction', (0, _actions.copyLink)(node));
  }, [href, node, controller]);

  const renderCard = /*#__PURE__*/_createElement(_styled.LinkCardWrapper, (0, _extends2.default)({}, attributes, {
    style: {
      width: maxWidth,
      height: height,
      margin: margin
    }
  }), /*#__PURE__*/_createElement(URLLinkCard, {
    isSelected: isSelected,
    state: cardState,
    url: href,
    urlInfo: urlInfo,
    readonly: false // todo：参省 移动端复制目前会丢失样式，等待灯少这边支持后处理 
    ,
    isMobile: true,
    onRefresh: onRefresh,
    onOpenURL: handleOpenLink,
    locale: { ...locale,
      ...tooltipLocale
    },
    cardStyle: displayType === 'link' ? 'popup' : 'indoc',
    editBtnTestID: "link-toolbar-edit",
    copyBtnTestID: "link-toolbar-copy",
    unlinkBtnTestID: "link-toolbar-unlink",
    deleteBtnTestID: "link-toolbar-remove",
    switchStyleBtnTestID: "link-toolbar-switch",
    linkStyleBtnTestID: "link-toolbar-switch-link",
    cardStyleBtnTestID: "link-toolbar-switch-card" // @ts-ignore 组件不存在 urlTestID 属性
    ,
    urlTestID: "link-toolbar-visit",
    cardTestID: "link-card",
    width: maxWidth,
    height: height,
    onEdit: noop // @ts-ignore
    ,
    onCopy: handleCopy,
    onUnlink: noop,
    onDelete: noop,
    onSwitchStyle: noop
  }));

  return displayType === 'card' ? renderCard : /*#__PURE__*/_createElement(_styled.Link, (0, _extends2.default)({}, attributes, {
    "data-testid": "link"
  }), children());
};

var _default = /*#__PURE__*/React.memo(MobileLink);

exports.default = _default;
//# sourceMappingURL=link.js.map