{"version":3,"sources":["../../../../../src/plugins/link/mobile/link.tsx"],"names":["normalizeLink","openLink","LinkPlugin","height","margin","theme","link","getMobileMaxWidth","value","node","closestBlock","noop","MobileLink","props","attributes","protocolAllowList","onOpenLink","children","getLinkInfo","controller","locale","displayType","isSelected","URLLinkCard","href","cardInfo","data","text","query","title","imgURL","desc","urlInfo","React","useMemo","trim","handleOpenLink","useCallback","normalizedLink","tooltipLocale","editTooltip","edit","copyTooltip","copy","unlinkTooltip","unlink","deleteTooltip","delete","switchStyleTooltip","styleText","onRefresh","run","info","newInfo","e","cardState","maxWidth","setMaxwidth","useState","useEffect","handleCopy","stopPropagation","preventDefault","renderCard","width","memo"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;uBAN4B,a;AAQ5B,MAAM;AAAEA,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,IAA8BC,sBAApC;AAEA,MAAM;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAAqBC,kBAAMC,IAAjC;;AAYA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAeC,IAAf,KAAgC;AACxD,QAAMC,YAAY,GAAG,yCAAyBF,KAAzB,EAAgCC,IAAhC,CAArB;AACA,MAAIC,YAAJ,EACE,OAAO,8BAAcA,YAAd,KAA+B,MAAtC;AAEF,SAAO,MAAP;AACD,CAND;;AAQA,MAAMC,IAAI,GAAG,MAAM,CAAG,CAAtB;;AAEA,MAAMC,UAAqC,GAAIC,KAAD,IAAW;AACvD,QAAM;AACJJ,IAAAA,IADI;AAEJK,IAAAA,UAFI;AAGJC,IAAAA,iBAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA,UAPI;AAQJC,IAAAA,MARI;AASJC,IAAAA,WATI;AAUJC,IAAAA,UAVI;AAWJC,IAAAA;AAXI,MAYFV,KAZJ;AAcA,QAAM;AAAEW,IAAAA,IAAI,GAAG,EAAT;AAAaC,IAAAA;AAAb,MAA0BhB,IAAI,CAACiB,IAArC;AAEA,QAAMC,IAAI,GAAGR,UAAU,CAACS,KAAX,CAAiB,SAAjB,EAA4B;AAAEnB,IAAAA;AAAF,GAA5B,KAAyC,EAAtD;AAEA,QAAM;AAAEoB,IAAAA,KAAK,GAAG,EAAV;AAAcC,IAAAA,MAAM,GAAG,EAAvB;AAA2BC,IAAAA,IAAI,GAAG;AAAlC,MAAyCN,QAAQ,IAAI,EAA3D;AAEA,QAAMO,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAc,OAAO;AACnCL,IAAAA,KAAK,EAAEF,IAAI,CAACQ,IAAL,OAAgBX,IAAI,CAACW,IAAL,EAAhB,GAA8BN,KAA9B,GAAsCF,IADV;AAEnCG,IAAAA,MAFmC;AAGnCC,IAAAA;AAHmC,GAAP,CAAd,EAIZ,CAACF,KAAD,EAAQC,MAAR,EAAgBC,IAAhB,EAAsBJ,IAAtB,EAA4BH,IAA5B,CAJY,CAAhB;AAMA,QAAMY,cAAc,GAAGH,KAAK,CAACI,WAAN,CAAkB,MAAM;AAE7C,QAAIrB,UAAJ,EAAgB;AACd,YAAMsB,cAAc,GAAGtC,aAAa,CAACwB,IAAD,EAAOT,iBAAP,CAApC;AACAC,MAAAA,UAAU,CAACsB,cAAD,CAAV;AACD,KAHD,MAGO;AACLrC,MAAAA,QAAQ,CAACuB,IAAD,EAAOT,iBAAP,CAAR;AACD;AACF,GARsB,EAQpB,CAACS,IAAD,EAAOR,UAAP,EAAmBD,iBAAnB,CARoB,CAAvB;AAUA,QAAMwB,aAAa,GAAGN,KAAK,CAACC,OAAN,CAAc,OAAO;AACzCM,IAAAA,WAAW,EAAEpB,MAAM,CAACqB,IADqB;AAEzCC,IAAAA,WAAW,EAAEtB,MAAM,CAACuB,IAFqB;AAGzCC,IAAAA,aAAa,EAAExB,MAAM,CAACyB,MAHmB;AAIzCC,IAAAA,aAAa,EAAE1B,MAAM,CAAC2B,MAJmB;AAKzCC,IAAAA,kBAAkB,EAAE5B,MAAM,CAAC6B;AALc,GAAP,CAAd,EAMlB,CAAC7B,MAAD,CANkB,CAAtB;AAQA,QAAM8B,SAAS,GAAGjB,KAAK,CAACI,WAAN,CAChB,YAAY;AACV,QAAInB,WAAW,IAAI,OAAOA,WAAP,KAAuB,UAA1C,EAAsD;AACpD;AACAC,MAAAA,UAAU,CAACgC,GAAX,CAAe,UAAf,EAA2B,6BAAe1C,IAAf,EAAqB;AAAEY,QAAAA,WAAW,EAAE;AAAf,OAArB,CAA3B;;AACA,UAAI;AACF,cAAM+B,IAAI,GAAG,MAAMlC,WAAW,CAACM,IAAD,CAA9B;;AACA,YAAI4B,IAAJ,EAAU;AACR;AACA,gBAAM;AAAEtB,YAAAA,MAAF;AAAUD,YAAAA,KAAV;AAAiBE,YAAAA;AAAjB,cAA0BqB,IAAhC;AACA,gBAAMC,OAAsB,GAAG;AAAEvB,YAAAA,MAAF;AAAUD,YAAAA,KAAV;AAAiBE,YAAAA,IAAjB;AAAuBV,YAAAA,WAAW,EAAE;AAApC,WAA/B;AACAF,UAAAA,UAAU,CAACgC,GAAX,CAAe,UAAf,EAA2B,mCAAqB1C,IAArB,CAA3B;AACAU,UAAAA,UAAU,CAACgC,GAAX,CAAe,UAAf,EAA2B,qCAAuB1C,IAAvB,EAA6BkB,IAA7B,EAAmCH,IAAnC,EAAyC6B,OAAzC,CAA3B;AACAlC,UAAAA,UAAU,CAACgC,GAAX,CAAe,gBAAf,EANQ,CAOR;;AACA;AACD;AACF,OAZD,CAYE,OAAOG,CAAP,EAAU,CAEX,CAjBmD,CAkBpD;;;AACAnC,MAAAA,UAAU,CAACgC,GAAX,CAAe,UAAf,EAA2B,mCAAqB1C,IAArB,CAA3B;AACAU,MAAAA,UAAU,CAACgC,GAAX,CAAe,UAAf,EAA2B,qCAAuB1C,IAAvB,EAA6BkB,IAA7B,EAAmCH,IAAnC,EAAyC;AAAEH,QAAAA,WAAW,EAAE;AAAf,OAAzC,CAA3B;AACD;;AACDF,IAAAA,UAAU,CAACgC,GAAX,CAAe,gBAAf;AACD,GAzBe,EAyBb,CAAChC,UAAD,EAAaD,WAAb,EAA0BS,IAA1B,EAAgCH,IAAhC,EAAsCf,IAAtC,CAzBa,CAAlB;AA4BA,QAAM8C,SAAS,GAAG,6BAAiB,KAAjB,EAAwB9C,IAAxB,CAAlB;AAEA,QAAM,CAAC+C,QAAD,EAAWC,WAAX,IAA0BxB,KAAK,CAACyB,QAAN,CAAgC,MAAhC,CAAhC;AAEAzB,EAAAA,KAAK,CAAC0B,SAAN,CAAgB,MAAM;AACpBF,IAAAA,WAAW,CAAClD,iBAAiB,CAACY,UAAU,CAACX,KAAZ,EAAmBC,IAAnB,CAAlB,CAAX;AACD,GAFD,EAEG,EAFH;AAIA,QAAMmD,UAAU,GAAG3B,KAAK,CAACI,WAAN,CAChBiB,CAAD,IAAmB;AACjBA,IAAAA,CAAC,CAACO,eAAF;AACAP,IAAAA,CAAC,CAACQ,cAAF;AACA3C,IAAAA,UAAU,CAACgC,GAAX,CAAe,UAAf,EAA2B,uBAAS1C,IAAT,CAA3B;AACD,GALgB,EAMjB,CAACe,IAAD,EAAOf,IAAP,EAAaU,UAAb,CANiB,CAAnB;;AAQA,QAAM4C,UAAU,gBACd,eAAC,uBAAD,6BAAqBjD,UAArB;AAAiC,IAAA,KAAK,EAAE;AAAEkD,MAAAA,KAAK,EAAER,QAAT;AAAmBrD,MAAAA,MAAM,EAAEA,MAA3B;AAAmCC,MAAAA,MAAM,EAAEA;AAA3C;AAAxC,mBACE,eAAC,WAAD;AACE,IAAA,UAAU,EAAEkB,UADd;AAEE,IAAA,KAAK,EAAEiC,SAFT;AAGE,IAAA,GAAG,EAAE/B,IAHP;AAIE,IAAA,OAAO,EAAEQ,OAJX;AAKE,IAAA,QAAQ,EAAE,KALZ,CAKmB;AALnB;AAME,IAAA,QAAQ,MANV;AAOE,IAAA,SAAS,EAAEkB,SAPb;AAQE,IAAA,SAAS,EAAEd,cARb;AASE,IAAA,MAAM,EAAE,EAAE,GAAGhB,MAAL;AAAa,SAAGmB;AAAhB,KATV;AAUE,IAAA,SAAS,EAAElB,WAAW,KAAK,MAAhB,GAAyB,OAAzB,GAAmC,OAVhD;AAWE,IAAA,aAAa,EAAC,mBAXhB;AAYE,IAAA,aAAa,EAAC,mBAZhB;AAaE,IAAA,eAAe,EAAC,qBAblB;AAcE,IAAA,eAAe,EAAC,qBAdlB;AAeE,IAAA,oBAAoB,EAAC,qBAfvB;AAgBE,IAAA,kBAAkB,EAAC,0BAhBrB;AAiBE,IAAA,kBAAkB,EAAC,0BAjBrB,CAkBE;AAlBF;AAmBE,IAAA,SAAS,EAAC,oBAnBZ;AAoBE,IAAA,UAAU,EAAC,WApBb;AAqBE,IAAA,KAAK,EAAEmC,QArBT;AAsBE,IAAA,MAAM,EAAErD,MAtBV;AAuBE,IAAA,MAAM,EAAEQ,IAvBV,CAwBE;AAxBF;AAyBE,IAAA,MAAM,EAAEiD,UAzBV;AA0BE,IAAA,QAAQ,EAAEjD,IA1BZ;AA2BE,IAAA,QAAQ,EAAEA,IA3BZ;AA4BE,IAAA,aAAa,EAAEA;AA5BjB,IADF,CADF;;AAmCA,SACEU,WAAW,KAAK,MAAhB,GACE0C,UADF,gBAEE,eAAC,YAAD,6BACMjD,UADN;AAEE,mBAAY;AAFd,MAIGG,QAAQ,EAJX,CAHJ;AAUD,CAtID;;4BAwIegB,KAAK,CAACgC,IAAN,CAAWrD,UAAX,C","sourcesContent":["import * as React from 'react';\nimport { RenderNodeProps, Inline, Controller, Value } from '@ali/4ever-cangjie';\nimport { theme, LinkPlugin } from '@ali/4ever-bamboo';\nimport { getClosestContainerBlock, getInnerWidth } from '@ali/4ever-utils';\nimport { Link, LinkCardWrapper } from '../components/styled';\nimport { LinkPluginConfig, CardInfo, ILinkCardInfo, LinkDisplayType } from '../types';\nimport { getLinkCardState } from '../utils';\nimport { injectCardInfo, removeInjectCardInfo, updateLinkWithCardInfo, copyLink } from '../actions';\n\nconst { normalizeLink, openLink } = LinkPlugin;\n\nconst { height, margin } = theme.link;\n\ninterface MobileLinkProps extends RenderNodeProps<Inline> {\n  locale: LinkPluginConfig['locale'];\n  protocolAllowList: string[];\n  onOpenLink?: (href: string) => void;\n  getLinkInfo?: (href: string) => Promise<CardInfo>;\n  controller: Controller;\n  displayType: LinkDisplayType;\n  URLLinkCard: React.ComponentType<any>;\n}\n\nconst getMobileMaxWidth = (value: Value, node: Inline) => {\n  const closestBlock = getClosestContainerBlock(value, node);\n  if (closestBlock)\n    return getInnerWidth(closestBlock) ?? '100%';\n\n  return '100%';\n};\n\nconst noop = () => { };\n\nconst MobileLink: React.FC<MobileLinkProps> = (props) => {\n  const {\n    node,\n    attributes,\n    protocolAllowList,\n    onOpenLink,\n    children,\n    getLinkInfo,\n    controller,\n    locale,\n    displayType,\n    isSelected,\n    URLLinkCard,\n  } = props;\n\n  const { href = '', cardInfo } = node.data;\n\n  const text = controller.query('getText', { node }) || '';\n\n  const { title = '', imgURL = '', desc = '' } = cardInfo || {}\n\n  const urlInfo = React.useMemo(() => ({\n    title: text.trim() === href.trim() ? title : text,\n    imgURL,\n    desc,\n  }), [title, imgURL, desc, text, href]);\n\n  const handleOpenLink = React.useCallback(() => {\n\n    if (onOpenLink) {\n      const normalizedLink = normalizeLink(href, protocolAllowList);\n      onOpenLink(normalizedLink);\n    } else {\n      openLink(href, protocolAllowList)\n    }\n  }, [href, onOpenLink, protocolAllowList]);\n\n  const tooltipLocale = React.useMemo(() => ({\n    editTooltip: locale.edit,\n    copyTooltip: locale.copy,\n    unlinkTooltip: locale.unlink,\n    deleteTooltip: locale.delete,\n    switchStyleTooltip: locale.styleText,\n  }), [locale]);\n\n  const onRefresh = React.useCallback(\n    async () => {\n      if (getLinkInfo && typeof getLinkInfo === 'function') {\n        // 先设置卡片状态为 loading，刷新无需为节点注入信息\n        controller.run('onAction', injectCardInfo(node, { displayType: 'card' }));\n        try {\n          const info = await getLinkInfo(href);\n          if (info) {\n            // 请求成功\n            const { imgURL, title, desc } = info;\n            const newInfo: ILinkCardInfo = { imgURL, title, desc, displayType: 'card' };\n            controller.run('onAction', removeInjectCardInfo(node));\n            controller.run('onAction', updateLinkWithCardInfo(node, text, href, newInfo));\n            controller.run('onCangjieFocus');\n            // 清理临时状态\n            return;\n          }\n        } catch (e) {\n          console.debug(e);\n        }\n        // 请求失败,将状态设置为 error，数据填充 undefined\n        controller.run('onAction', removeInjectCardInfo(node));\n        controller.run('onAction', updateLinkWithCardInfo(node, text, href, { displayType: 'card' }));\n      }\n      controller.run('onCangjieFocus');\n    }, [controller, getLinkInfo, text, href, node],\n  );\n\n  const cardState = getLinkCardState(false, node);\n\n  const [maxWidth, setMaxwidth] = React.useState<number | string>('100%');\n\n  React.useEffect(() => {\n    setMaxwidth(getMobileMaxWidth(controller.value, node));\n  }, []);\n\n  const handleCopy = React.useCallback(\n    (e: MouseEvent) => {\n      e.stopPropagation();\n      e.preventDefault();\n      controller.run('onAction', copyLink(node))\n    },\n    [href, node, controller]);\n\n  const renderCard = (\n    <LinkCardWrapper {...attributes} style={{ width: maxWidth, height: height, margin: margin }}>\n      <URLLinkCard\n        isSelected={isSelected}\n        state={cardState}\n        url={href}\n        urlInfo={urlInfo}\n        readonly={false} // todo：参省 移动端复制目前会丢失样式，等待灯少这边支持后处理 \n        isMobile\n        onRefresh={onRefresh}\n        onOpenURL={handleOpenLink}\n        locale={{ ...locale, ...tooltipLocale }}\n        cardStyle={displayType === 'link' ? 'popup' : 'indoc'}\n        editBtnTestID=\"link-toolbar-edit\"\n        copyBtnTestID=\"link-toolbar-copy\"\n        unlinkBtnTestID=\"link-toolbar-unlink\"\n        deleteBtnTestID=\"link-toolbar-remove\"\n        switchStyleBtnTestID=\"link-toolbar-switch\"\n        linkStyleBtnTestID=\"link-toolbar-switch-link\"\n        cardStyleBtnTestID=\"link-toolbar-switch-card\"\n        // @ts-ignore 组件不存在 urlTestID 属性\n        urlTestID=\"link-toolbar-visit\"\n        cardTestID=\"link-card\"\n        width={maxWidth as number}\n        height={height}\n        onEdit={noop}\n        // @ts-ignore\n        onCopy={handleCopy}\n        onUnlink={noop}\n        onDelete={noop}\n        onSwitchStyle={noop}\n      />\n    </LinkCardWrapper>\n  );\n\n  return (\n    displayType === 'card' ?\n      renderCard :\n      <Link\n        {...attributes}\n        data-testid=\"link\"\n      >\n        {children()}\n      </Link>\n  );\n};\n\nexport default React.memo(MobileLink);\n"],"file":"link.js"}