"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertPureLinkToBlockLinkCard = convertPureLinkToBlockLinkCard;
exports.convertTextLinkToBlockLinkCard = convertTextLinkToBlockLinkCard;
exports.convertBlockLinkCardToTextLink = convertBlockLinkCardToTextLink;
exports.copyBlockLinkCard = copyBlockLinkCard;
exports.cutBlockLinkCard = cutBlockLinkCard;
exports.deleteBlockLinkCard = deleteBlockLinkCard;
exports.updateBlockLinkCardData = updateBlockLinkCardData;
exports.unlinkBlockCardData = unlinkBlockCardData;
exports.insertBlockLinkCard = insertBlockLinkCard;
exports.LINK_CARD_INSERT_CARD = exports.LINK_CARD_UNLINK = exports.LINK_CARD_UPDATE_DATA = exports.LINK_CARD_DELETE_LINK = exports.LINK_CARD_CUT_LINK = exports.LINK_CARD_COPY_LINK = exports.LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK = exports.LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD = exports.LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD = void 0;

/* #region  actionTypes */
const LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD = Symbol('LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD');
exports.LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD = LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD;
const LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD = Symbol('LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD');
exports.LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD = LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD;
const LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK = Symbol('LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK');
exports.LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK = LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK;
const LINK_CARD_COPY_LINK = Symbol('LINK_CARD_COPY_LINK');
exports.LINK_CARD_COPY_LINK = LINK_CARD_COPY_LINK;
const LINK_CARD_CUT_LINK = Symbol('LINK_CARD_CUT_LINK');
exports.LINK_CARD_CUT_LINK = LINK_CARD_CUT_LINK;
const LINK_CARD_DELETE_LINK = Symbol('LINK_CARD_DELETE_LINK');
exports.LINK_CARD_DELETE_LINK = LINK_CARD_DELETE_LINK;
const LINK_CARD_UPDATE_DATA = Symbol('LINK_CARD_UPDATE_DATA');
exports.LINK_CARD_UPDATE_DATA = LINK_CARD_UPDATE_DATA;
const LINK_CARD_UNLINK = Symbol('LINK_CARD_UNLINK');
exports.LINK_CARD_UNLINK = LINK_CARD_UNLINK;
const LINK_CARD_INSERT_CARD = Symbol('LINK_CARD_INSERT_CARD');
/* #endregion */

/* #region  actions */

exports.LINK_CARD_INSERT_CARD = LINK_CARD_INSERT_CARD;

function convertPureLinkToBlockLinkCard(link, offset, text, href, srcHref, cardInfo, needFetchLinkInfo) {
  return {
    type: LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD,
    payload: {
      node: link,
      offset,
      text,
      href,
      srcHref,
      cardInfo,
      needFetchLinkInfo
    }
  };
}

function convertTextLinkToBlockLinkCard(node, text, href, cardInfo) {
  return {
    type: LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD,
    payload: {
      node,
      text,
      href,
      cardInfo
    }
  };
}

function convertBlockLinkCardToTextLink(node, data) {
  return {
    type: LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK,
    payload: {
      node,
      data
    }
  };
}

function copyBlockLinkCard(node) {
  return {
    type: LINK_CARD_COPY_LINK,
    payload: {
      node
    }
  };
}

function cutBlockLinkCard(node) {
  return {
    type: LINK_CARD_CUT_LINK,
    payload: {
      node
    }
  };
}

function deleteBlockLinkCard(node) {
  return {
    type: LINK_CARD_DELETE_LINK,
    payload: {
      node
    }
  };
}

function updateBlockLinkCardData(node, text, href, cardInfo) {
  return {
    type: LINK_CARD_UPDATE_DATA,
    payload: {
      node,
      text,
      href,
      cardInfo
    }
  };
}

function unlinkBlockCardData(node) {
  return {
    type: LINK_CARD_UNLINK,
    payload: {
      node
    }
  };
}

function insertBlockLinkCard(text, href, cardInfo) {
  return {
    type: LINK_CARD_INSERT_CARD,
    payload: {
      text,
      href,
      cardInfo
    }
  };
}
/* #endregion */
//# sourceMappingURL=actions.js.map