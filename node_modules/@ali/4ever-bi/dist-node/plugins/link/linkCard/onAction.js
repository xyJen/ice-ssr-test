"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _everPluginClipboard = require("@ali/4ever-plugin-clipboard");

var _actions = require("./actions");

var _commands = require("./commands");

const createOnAction = (config, serializer) => (action, controller, next) => {
  const {
    type,
    payload
  } = action;
  serializer = serializer || controller.serializer;

  if (type === _actions.LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD) {
    const {
      node,
      text,
      href,
      offset,
      srcHref,
      cardInfo,
      needFetchLinkInfo
    } = payload;
    return controller.command(_commands.convertPureLinkToBlockLinkCard, node, {
      offset,
      text,
      href,
      srcHref,
      cardInfo,
      needFetchLinkInfo,
      getLinkInfo: config.getLinkInfo
    });
  }

  if (type === _actions.LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD) {
    // 切换卡片显示类型后，隐藏custom面板 to fix: https://work.aone.alibaba-inc.com/issue/44255401
    controller.run('onAction', (0, _everPluginClipboard.hideCustomPastePanel)());
    const {
      node,
      text,
      href,
      cardInfo
    } = payload;
    return controller.command(_commands.convertTextLinkToBlockLinkCard, node, {
      text,
      href,
      cardInfo,
      getLinkInfo: config.getLinkInfo
    });
  }

  if (type === _actions.LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK) {
    const {
      node,
      data
    } = payload;
    return controller.command(_commands.convertBlockLinkCardToTextLink, node, data);
  }

  if (type === _actions.LINK_CARD_INSERT_CARD) {
    const {
      text,
      href,
      cardInfo
    } = payload;
    return controller.command(_commands.insertBlockLinkCard, {
      text,
      href,
      cardInfo,
      getLinkInfo: config.getLinkInfo
    });
  }

  if (type === _actions.LINK_CARD_COPY_LINK) {
    const {
      node
    } = payload;
    return controller.command(_commands.copyLink, node, serializer);
  }

  if (type === _actions.LINK_CARD_CUT_LINK) {
    const {
      node
    } = payload;
    return controller.command(_commands.copyLink, node, serializer).command(_commands.convertBlockLinkCardToDefaultBlock, node);
  }

  if (type === _actions.LINK_CARD_DELETE_LINK) {
    const {
      node
    } = payload;
    return controller.command(_commands.convertBlockLinkCardToDefaultBlock, node);
  }

  if (type === _actions.LINK_CARD_UNLINK) {
    const {
      node
    } = payload;
    return controller.command(_commands.unwrapLinkCard, node);
  }

  if (type === _actions.LINK_CARD_UPDATE_DATA) {
    const {
      node,
      text,
      href
    } = payload;
    return controller.command(_commands.updateLinkCard, node, {
      text,
      href,
      getLinkInfo: config.getLinkInfo
    });
  }

  return next();
};

var _default = createOnAction;
exports.default = _default;
//# sourceMappingURL=onAction.js.map