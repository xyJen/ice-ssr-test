"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderNode;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _textLink = _interopRequireDefault(require("./components/textLink"));

var _utils = require("./utils");

const _createElement = /*#__PURE__*/React.createElement;

function createRenderNode(linkConfig, draggable) {
  const {
    locale,
    protocolAllowList,
    onCopyLink,
    getLinkInfo,
    enableCard = false,
    openLink,
    enableLinkCardBlock,
    mountRoot = false
  } = linkConfig;
  return {
    link: (props, _) => {
      const {
        node
      } = props;
      let linkType = 'link'; // 当 link 是卡片形式

      if ((0, _utils.isLinkCardNode)(node)) {
        const {
          cardInfo
        } = node.data;
        const {
          displayType
        } = cardInfo || {};

        if (displayType === 'card') {
          linkType = 'card';
        }
      }

      return /*#__PURE__*/_createElement(_textLink.default, (0, _extends2.default)({}, props, {
        displayType: linkType,
        node: node,
        protocolAllowList: protocolAllowList || [],
        locale: locale,
        getLinkInfo: getLinkInfo,
        onCopyLink: onCopyLink,
        enableCard: enableCard,
        draggable: draggable,
        openLink: openLink,
        enableLinkCardBlock: enableLinkCardBlock,
        mountRoot: mountRoot
      }));
    }
  };
}
//# sourceMappingURL=createRenderNode.js.map