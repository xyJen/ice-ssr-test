"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateLinkCardInfo;

var _everCangjie = require("@ali/4ever-cangjie");

var _utils = require("../utils");

const isCardInfoNeedUpdate = (originalCardInfo, newCardInfo) => {
  if (!originalCardInfo) {
    return true;
  }

  if (originalCardInfo.title !== newCardInfo.title || originalCardInfo.desc !== newCardInfo.desc || originalCardInfo.imgURL !== newCardInfo.imgURL || originalCardInfo.displayType !== newCardInfo.displayType) {
    return true;
  }

  return false;
};

function updateLinkCardInfo(controller, node, text, href, cardInfo) {
  const {
    selection
  } = controller.value;
  const nodeText = text.length ? text : href;
  const originalHref = node.data.href;
  const originalCardInfo = node.data.cardInfo;
  const isLink = cardInfo && cardInfo.displayType === 'link'; // 若文本地址为空，则去除链接，链接里有可能嵌套inline图片

  if (_everCangjie.Text.isTextList(node.nodes) && !text.length && href.length && isLink) {
    const range = selection.moveToRangeOfNode(node, controller);
    return controller.command(_everCangjie.Commands.select, range).command(_everCangjie.Commands.insertText, href).command('unwrapLink').command(_everCangjie.Commands.focus);
  } // 更新需要控制粒度，避免生成额外 op


  if (cardInfo && (isCardInfoNeedUpdate(originalCardInfo, cardInfo) || href !== originalHref)) {
    // 如果更新了卡片信息
    controller.command(_everCangjie.Commands.setNodeByKey, node.key, {
      type: 'link',
      data: {
        href,
        cardInfo: { ...cardInfo
        }
      }
    }).command(_everCangjie.Commands.moveToEndOfNode, node);
  } else if (href !== originalHref) {
    // 如果仅更新链接信息
    controller.command(_everCangjie.Commands.setNodeByKey, node.key, {
      type: 'link',
      data: {
        href
      }
    }).command(_everCangjie.Commands.moveToEndOfNode, node);
  }

  if (_everCangjie.Text.isTextList(node.nodes) && nodeText !== node.text) {
    // 卡片状态下的链接是 void 节点，如果采用 insertText 方式修改文本，会导致 void 节点被删除
    // 因此采用 setNode 方式替换, 此时需要获取到最新的节点状态进行替换
    const {
      document
    } = controller.value;
    const currentNode = document.getNode(node.key);

    if (!(0, _utils.isLinkNode)(currentNode)) {
      return controller;
    }

    const linkTextNode = document.getNextText(currentNode.key);

    if (linkTextNode) {
      const marks = document.getMarksAtPosition(linkTextNode.key, 1);

      const textNode = _everCangjie.Text.create(nodeText).addMarks(0, nodeText.length, marks ?? []);

      const newNode = currentNode.merge({
        nodes: [textNode]
      });
      controller.command(_everCangjie.Commands.replaceNodeByKey, currentNode.key, newNode);
    }
  }

  return controller.command(_everCangjie.Commands.moveToStartOfNextText);
}
//# sourceMappingURL=updateLinkCardInfo.js.map