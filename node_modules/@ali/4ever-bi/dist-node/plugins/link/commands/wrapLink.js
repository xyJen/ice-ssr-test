"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = wrapLink;

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _hasLink = _interopRequireDefault(require("../utils/hasLink"));

var _linkStore = require("../utils/linkStore");

function wrapLink(controller, data) {
  const {
    value
  } = controller;
  const {
    selection
  } = value;

  if (!selection) {
    return controller;
  }

  const {
    isCollapsed
  } = selection;
  const {
    href = ''
  } = data || {};

  if (!isCollapsed && !(0, _hasLink.default)(value)) {
    controller.command(_everCangjie.Commands.wrapInline, {
      type: 'link',
      data: {
        href
      }
    });
    const linkNode = controller.value.inlines.find(inline => _everMo.Link.isLink(inline));

    if (!href && linkNode) {
      (0, _linkStore.setJustCreated)(linkNode.key, true);
    }

    const {
      document: newDocument,
      selection: newRangeSelection
    } = controller.value; // 收缩选区

    const shrinkBoundarySelection = newRangeSelection.shrinkBoundary(newDocument);
    return controller.command(_everCangjie.Commands.select, shrinkBoundarySelection).command(_everCangjie.Commands.moveToEndOfInline);
  }

  if ((0, _hasLink.default)(value)) {
    return controller.command('unwrapLink');
  }

  if (selection.isExpanded || controller.query('isCollapsedInInlineVoid')) {
    controller.command(_everCangjie.Commands.wrapInline, {
      type: 'link',
      data: {
        href
      }
    });
  } else if (controller.query('isCollapsedInBlockVoid')) {
    controller.command(_everCangjie.Commands.insertBlock, 'paragraph').command('insertLink', href);
  } else {
    controller.command('insertLink', href);
  }

  return controller;
}
//# sourceMappingURL=wrapLink.js.map