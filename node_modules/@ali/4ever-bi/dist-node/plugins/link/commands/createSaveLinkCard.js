"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createSaveLinkCard;

var _injectCardInfo = _interopRequireDefault(require("./injectCardInfo"));

var _removeinjectedCardInfo = _interopRequireDefault(require("./removeinjectedCardInfo"));

var _updateLinkCardInfo = _interopRequireDefault(require("./updateLinkCardInfo"));

var _utils = require("../utils");

const isCardStyle = node => {
  const {
    data
  } = node;
  return data && data.cardInfo?.displayType === 'card';
};

function createSaveLinkCard(getLinkInfo) {
  async function fetchLinkData(node, controller, href, text) {
    if (getLinkInfo && typeof getLinkInfo === 'function') {
      // 先设置卡片状态为 loading，并且为节点注入信息，处理交互兼容
      controller.command(_injectCardInfo.default, node, {
        displayType: 'card'
      }); // 展示卡片

      try {
        const info = await getLinkInfo(href);

        if (info) {
          // 请求成功
          const {
            imgURL = '',
            title = '',
            desc = ''
          } = info;
          const cardInfo = {
            imgURL,
            title,
            desc,
            displayType: 'card'
          }; // 清理注入信息

          controller.command(_removeinjectedCardInfo.default, node).command(_updateLinkCardInfo.default, node, text, href, cardInfo);
          return;
        }
      } catch (e) {
        // 获取信息失败，不添加任何数据
        // 设置卡片imgURL, title, desc 为 undefined
        controller.command(_updateLinkCardInfo.default, node, text, href, {
          displayType: 'card'
        });
      } finally {
        // 清理注入信息
        controller.command(_removeinjectedCardInfo.default, node);
      }
    }
  }

  return function saveLinkCard(controller, node, text, href) {
    // 如果卡片原来是链接形式，需要先转为卡片形式，再获取信息，避免排版问题
    // todo 排版 2.0 后清理下面代码
    let refinedNode = node;

    if ((0, _utils.isLinkNode)(node) && !isCardStyle(node)) {
      controller.command(_updateLinkCardInfo.default, node, text, href, {
        displayType: 'card'
      });
      refinedNode = controller.value.document.getNode(node.key);
    }

    fetchLinkData(refinedNode, controller, href, text);
    return controller;
  };
}
//# sourceMappingURL=createSaveLinkCard.js.map