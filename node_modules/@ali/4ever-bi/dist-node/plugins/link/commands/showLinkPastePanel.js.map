{"version":3,"sources":["../../../../../src/plugins/link/commands/showLinkPastePanel.ts"],"names":["optionLink","optionCard","createShowLinkPastePanel","enableLinkCardBlock","showLinkPastePanel","controller","text","getLinkInfo","options","gettCustomPanel","onChange","index","deleteAtRange","Number","document","selection","value","previousNode","getPreviousNode","focus","key","Link","isLink","command","Commands","insertInline","type","nodes","Text","create","data","href","moveToStartOfNextText","run","inline","Inline","cardInfo","displayType","injections","injection","Injection","excludeInjections","filter","i","setInjections","setOpRelatedId","then","info","imgURL","title","desc","removeinjectedCardInfo","updateLinkCardInfo","setData","customPanel"],"mappings":"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","sourcesContent":["import { Controller, Commands, Text, Inline, Injection } from '@ali/4ever-cangjie';\nimport { Link } from '@ali/4ever-mo';\nimport { insertBlockLinkCard } from '../linkCard/actions';\nimport { CardInfo, ILinkCardInfo, LinkPluginConfig } from '../types';\nimport removeinjectedCardInfo from './removeinjectedCardInfo';\nimport updateLinkCardInfo from './updateLinkCardInfo';\n\n\nconst optionLink = 0;\nconst optionCard = 1;\n\nexport default function createShowLinkPastePanel(\n  enableLinkCardBlock: LinkPluginConfig['enableLinkCardBlock'],\n) {\n  return function showLinkPastePanel(\n    controller: Controller,\n    text: string,\n    getLinkInfo?: (href: string) => Promise<CardInfo>,\n  ) {\n    // text 保留链接 card 转成链接摘要卡片\n    const options = ['text', 'card'];\n    const gettCustomPanel = () => {\n      return {\n        onChange: (index: number, deleteAtRange: () => void) => {\n          switch (Number(index)) {\n            // options[0]\n            case optionLink:\n              const { document, selection } = controller.value;\n              // 若当前粘贴的节点已经是link类型了，则不再执行后续转link的逻辑\n              const previousNode = document.getPreviousNode(selection.focus.key);\n              if (Link.isLink(previousNode)) break;\n              deleteAtRange();\n              controller.command(Commands.insertInline, {\n                type: 'link',\n                nodes: [Text.create(text)],\n                data: {\n                  href: text,\n                },\n              });\n              controller.command(Commands.moveToStartOfNextText)\n                .command(Commands.focus);\n              break;\n            // options[1]\n            case optionCard:\n              {\n                deleteAtRange();\n                if (enableLinkCardBlock) {\n                  controller.run('onAction', insertBlockLinkCard(text, text));\n                } else {\n                  const inline = Inline.create({\n                    type: 'link',\n                    data: { href: text, cardInfo: { displayType: 'card' } },\n                    nodes: [Text.create(text)],\n                  });\n                  const { injections } = controller.value;\n                  const injection = Injection.create({\n                    key: inline.key,\n                    data: {\n                      href: text,\n                      cardInfo: { displayType: 'card' },\n                    },\n                  });\n                  const excludeInjections: Injection[] = injections.filter((i) => i.key !== inline.key);\n                  controller.setInjections([...excludeInjections, injection]);\n                  controller\n                    .setOpRelatedId(inline.key)\n                    .command(Commands.insertInline, inline);\n                  getLinkInfo && getLinkInfo(text).then((info) => {\n                    if (info) {\n                      // 请求成功\n                      const { imgURL, title, desc } = info;\n                      const cardInfo: ILinkCardInfo = { imgURL, title, desc, displayType: 'card' };\n                      controller\n                        .setOpRelatedId(inline.key)\n                        .command(removeinjectedCardInfo, inline)\n                        .command(updateLinkCardInfo, inline, text, text, cardInfo)\n                        .command(Commands.moveToStartOfNextText)\n                        .command(Commands.focus);\n                    }\n                  });\n                }\n              }\n              break;\n            default:\n              break;\n          }\n        },\n        options,\n      };\n    };\n\n    controller.setData({\n      ...controller.value.data,\n      customPanel: gettCustomPanel(),\n    });\n\n    return controller;\n  };\n}\n"],"file":"showLinkPastePanel.js"}