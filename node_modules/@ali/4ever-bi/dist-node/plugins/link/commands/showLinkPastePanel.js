"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createShowLinkPastePanel;

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _actions = require("../linkCard/actions");

var _removeinjectedCardInfo = _interopRequireDefault(require("./removeinjectedCardInfo"));

var _updateLinkCardInfo = _interopRequireDefault(require("./updateLinkCardInfo"));

const optionLink = 0;
const optionCard = 1;

function createShowLinkPastePanel(enableLinkCardBlock) {
  return function showLinkPastePanel(controller, text, getLinkInfo) {
    // text 保留链接 card 转成链接摘要卡片
    const options = ['text', 'card'];

    const gettCustomPanel = () => {
      return {
        onChange: (index, deleteAtRange) => {
          switch (Number(index)) {
            // options[0]
            case optionLink:
              const {
                document,
                selection
              } = controller.value; // 若当前粘贴的节点已经是link类型了，则不再执行后续转link的逻辑

              const previousNode = document.getPreviousNode(selection.focus.key);
              if (_everMo.Link.isLink(previousNode)) break;
              deleteAtRange();
              controller.command(_everCangjie.Commands.insertInline, {
                type: 'link',
                nodes: [_everCangjie.Text.create(text)],
                data: {
                  href: text
                }
              });
              controller.command(_everCangjie.Commands.moveToStartOfNextText).command(_everCangjie.Commands.focus);
              break;
            // options[1]

            case optionCard:
              {
                deleteAtRange();

                if (enableLinkCardBlock) {
                  controller.run('onAction', (0, _actions.insertBlockLinkCard)(text, text));
                } else {
                  const inline = _everCangjie.Inline.create({
                    type: 'link',
                    data: {
                      href: text,
                      cardInfo: {
                        displayType: 'card'
                      }
                    },
                    nodes: [_everCangjie.Text.create(text)]
                  });

                  const {
                    injections
                  } = controller.value;

                  const injection = _everCangjie.Injection.create({
                    key: inline.key,
                    data: {
                      href: text,
                      cardInfo: {
                        displayType: 'card'
                      }
                    }
                  });

                  const excludeInjections = injections.filter(i => i.key !== inline.key);
                  controller.setInjections([...excludeInjections, injection]);
                  controller.setOpRelatedId(inline.key).command(_everCangjie.Commands.insertInline, inline);
                  getLinkInfo && getLinkInfo(text).then(info => {
                    if (info) {
                      // 请求成功
                      const {
                        imgURL,
                        title,
                        desc
                      } = info;
                      const cardInfo = {
                        imgURL,
                        title,
                        desc,
                        displayType: 'card'
                      };
                      controller.setOpRelatedId(inline.key).command(_removeinjectedCardInfo.default, inline).command(_updateLinkCardInfo.default, inline, text, text, cardInfo).command(_everCangjie.Commands.moveToStartOfNextText).command(_everCangjie.Commands.focus);
                    }
                  });
                }
              }
              break;

            default:
              break;
          }
        },
        options
      };
    };

    controller.setData({ ...controller.value.data,
      customPanel: gettCustomPanel()
    });
    return controller;
  };
}
//# sourceMappingURL=showLinkPastePanel.js.map