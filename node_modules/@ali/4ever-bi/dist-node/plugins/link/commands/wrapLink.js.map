{"version":3,"sources":["../../../../../src/plugins/link/commands/wrapLink.ts"],"names":["wrapLink","controller","data","value","selection","isCollapsed","href","command","Commands","wrapInline","type","linkNode","inlines","find","inline","Link","isLink","key","document","newDocument","newRangeSelection","shrinkBoundarySelection","shrinkBoundary","select","moveToEndOfInline","isExpanded","query","insertBlock"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEe,SAASA,QAAT,CAAkBC,UAAlB,EAA0CC,IAA1C,EAAgF;AAC7F,QAAM;AAAEC,IAAAA;AAAF,MAAYF,UAAlB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAgBD,KAAtB;;AACA,MAAI,CAACC,SAAL,EAAgB;AACd,WAAOH,UAAP;AACD;;AAED,QAAM;AAAEI,IAAAA;AAAF,MAAkBD,SAAxB;AAEA,QAAM;AAAEE,IAAAA,IAAI,GAAG;AAAT,MAAgBJ,IAAI,IAAI,EAA9B;;AACA,MAAI,CAACG,WAAD,IAAgB,CAAC,sBAAQF,KAAR,CAArB,EAAqC;AACnCF,IAAAA,UAAU,CAACM,OAAX,CAAmBC,sBAASC,UAA5B,EAAwC;AACtCC,MAAAA,IAAI,EAAE,MADgC;AAEtCR,MAAAA,IAAI,EAAE;AACJI,QAAAA;AADI;AAFgC,KAAxC;AAMA,UAAMK,QAAQ,GAAGV,UAAU,CAACE,KAAX,CAAiBS,OAAjB,CAAyBC,IAAzB,CAA+BC,MAAD,IAAYC,aAAKC,MAAL,CAAYF,MAAZ,CAA1C,CAAjB;;AACA,QAAI,CAACR,IAAD,IAASK,QAAb,EAAuB;AACrB,qCAAeA,QAAQ,CAACM,GAAxB,EAA6B,IAA7B;AACD;;AACD,UAAM;AAAEC,MAAAA,QAAQ,EAAEC,WAAZ;AAAyBf,MAAAA,SAAS,EAAEgB;AAApC,QAA0DnB,UAAU,CAACE,KAA3E,CAXmC,CAYnC;;AACA,UAAMkB,uBAAuB,GAAGD,iBAAiB,CAACE,cAAlB,CAAiCH,WAAjC,CAAhC;AACA,WAAOlB,UAAU,CAACM,OAAX,CAAmBC,sBAASe,MAA5B,EAAoCF,uBAApC,EACJd,OADI,CACIC,sBAASgB,iBADb,CAAP;AAED;;AAED,MAAI,sBAAQrB,KAAR,CAAJ,EAAoB;AAClB,WAAOF,UAAU,CAACM,OAAX,CAAmB,YAAnB,CAAP;AACD;;AACD,MAAIH,SAAS,CAACqB,UAAV,IAAwBxB,UAAU,CAACyB,KAAX,CAAiB,yBAAjB,CAA5B,EAAyE;AACvEzB,IAAAA,UAAU,CAACM,OAAX,CAAmBC,sBAASC,UAA5B,EAAwC;AACtCC,MAAAA,IAAI,EAAE,MADgC;AAEtCR,MAAAA,IAAI,EAAE;AACJI,QAAAA;AADI;AAFgC,KAAxC;AAMD,GAPD,MAOO,IAAIL,UAAU,CAACyB,KAAX,CAAiB,wBAAjB,CAAJ,EAAgD;AACrDzB,IAAAA,UAAU,CACPM,OADH,CACWC,sBAASmB,WADpB,EACiC,WADjC,EAEGpB,OAFH,CAEW,YAFX,EAEyBD,IAFzB;AAGD,GAJM,MAIA;AACLL,IAAAA,UAAU,CAACM,OAAX,CAAmB,YAAnB,EAAiCD,IAAjC;AACD;;AACD,SAAOL,UAAP;AACD","sourcesContent":["import { Controller, Commands } from '@ali/4ever-cangjie';\nimport { Link } from '@ali/4ever-mo';\nimport hasLink from '../utils/hasLink';\n\nimport { setJustCreated } from '../utils/linkStore';\n\nexport default function wrapLink(controller: Controller, data?: { href?: string }): Controller {\n  const { value } = controller;\n  const { selection } = value;\n  if (!selection) {\n    return controller;\n  }\n\n  const { isCollapsed } = selection;\n\n  const { href = '' } = data || {};\n  if (!isCollapsed && !hasLink(value)) {\n    controller.command(Commands.wrapInline, {\n      type: 'link',\n      data: {\n        href,\n      },\n    });\n    const linkNode = controller.value.inlines.find((inline) => Link.isLink(inline));\n    if (!href && linkNode) {\n      setJustCreated(linkNode.key, true);\n    }\n    const { document: newDocument, selection: newRangeSelection } = controller.value;\n    // 收缩选区\n    const shrinkBoundarySelection = newRangeSelection.shrinkBoundary(newDocument);\n    return controller.command(Commands.select, shrinkBoundarySelection)\n      .command(Commands.moveToEndOfInline);\n  }\n\n  if (hasLink(value)) {\n    return controller.command('unwrapLink');\n  }\n  if (selection.isExpanded || controller.query('isCollapsedInInlineVoid')) {\n    controller.command(Commands.wrapInline, {\n      type: 'link',\n      data: {\n        href,\n      },\n    });\n  } else if (controller.query('isCollapsedInBlockVoid')) {\n    controller\n      .command(Commands.insertBlock, 'paragraph')\n      .command('insertLink', href);\n  } else {\n    controller.command('insertLink', href);\n  }\n  return controller;\n}\n"],"file":"wrapLink.js"}