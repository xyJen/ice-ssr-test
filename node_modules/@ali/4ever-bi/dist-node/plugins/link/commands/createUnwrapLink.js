"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createUnwrapLink;

var _everCangjie = require("@ali/4ever-cangjie");

var _everMo = require("@ali/4ever-mo");

var _everUtils = require("@ali/4ever-utils");

var _utils = require("../utils");

function createUnwrapLink(protocolAllowList) {
  const linkify = (0, _everUtils.createLinkify)(protocolAllowList);
  return function unwrapLink(controller) {
    const {
      selection,
      document,
      inlines,
      focusInline
    } = controller.value;
    const shrinkRangeSelection = selection.shrinkBoundary(document);
    const start = shrinkRangeSelection.getStart(document);
    const end = shrinkRangeSelection.getEnd(document);
    const startText = document.getNode(start.key);
    const endText = document.getNode(end.key); // 1. 闭合选区

    if (shrinkRangeSelection.isCollapsed) {
      if (_everMo.Link.isLink(focusInline)) {
        const {
          href
        } = focusInline.data;
        const text = focusInline.text.trim();

        if (text === href.trim() && linkify.test(text)) {
          // Rule: 避免 link 中的 text 是一个合法的 url，导致 unwrapInline 后继续被 decorate 识别
          const unlinkRangeSelection = _everCangjie.RangeSelection.create({
            anchor: _everCangjie.Point.createFromParams(start.key, 0),
            focus: _everCangjie.Point.createFromParams(endText.key, endText.text.length)
          });

          controller.command(_everCangjie.Commands.addMarkAtRange, unlinkRangeSelection, _everCangjie.Mark.create({
            type: 'unlink'
          }));
        }
      }

      controller.command(_everCangjie.Commands.focus).command(_everCangjie.Commands.unwrapInline, 'link');
      return controller;
    } // 2. 选区跟link完全一致


    if (startText.key === start.key && start.offset === 0 && endText.key === end.key && end.offset === endText.text.length) {
      if (_everMo.Link.isLink(focusInline)) {
        const text = focusInline.text.trim();

        if (linkify.test(text)) {
          // Rule: 避免 link 中的 text 是一个合法的 url，导致 unwrapInline 后继续被 decorate 识别
          const unlinkRangeSelection = _everCangjie.RangeSelection.create({
            anchor: _everCangjie.Point.createFromParams(start.key, 0),
            focus: _everCangjie.Point.createFromParams(endText.key, endText.text.length)
          });

          controller.command(_everCangjie.Commands.addMarkAtRange, unlinkRangeSelection, _everCangjie.Mark.create({
            type: 'unlink'
          }));
        }
      }

      controller.command(_everCangjie.Commands.focus).command(_everCangjie.Commands.unwrapInline, 'link');
      return controller;
    } // 3. 选区在inline内，且要么在开头，要么在结束


    const startInline = document.getClosest(start.key, _utils.isLink);
    const endInline = document.getClosest(end.key, _utils.isLink);

    if (startInline && endInline && startInline.key === endInline.key && (start.offset === 0 || end.offset === endText.text.length)) {
      controller.command(_everCangjie.Commands.unwrapInline, 'link');
      let startKey = null;
      let startOffset = null;
      let endKey = null;
      let endOffset = null;
      const preText = document.getPreviousText(start.key);
      const changedPreText = controller.value.document.getNode(preText.key);
      const fromStart = start.offset === 0;

      if (changedPreText.text.length === preText.text.length) {
        // 说明preText本身也在一个inline元素中，unwrapInline的数据没有合并到preText中
        const unwrapText = controller.value.document.getNextText(changedPreText.key);
        startKey = unwrapText.key;
        startOffset = fromStart ? end.offset : 0;
        endKey = startKey;
        endOffset = fromStart ? endInline.text.length : start.offset;
      } else {
        startKey = changedPreText.key;
        startOffset = fromStart ? preText.text.length + end.offset : preText.text.length;
        endKey = startKey;
        endOffset = fromStart ? preText.text.length + endInline.text.length : preText.text.length + start.offset;
      }

      if (startKey && endKey) {
        controller.command(_everCangjie.Commands.select, _everCangjie.RangeSelection.fromJSON({
          anchor: {
            key: startKey,
            offset: startOffset
          },
          focus: {
            key: endKey,
            offset: endOffset
          }
        })).command(_everCangjie.Commands.wrapInline, {
          type: 'link',
          data: endInline.data
        }).command(fromStart ? _everCangjie.Commands.moveToEndOfPreviousText : _everCangjie.Commands.moveToEnd);
      }

      return controller;
    }

    controller.command(_everCangjie.Commands.focus).command(_everCangjie.Commands.unwrapInline, 'link');
    const allLinks = inlines.filter(_utils.isLink);
    const data = allLinks.length === 1 ? allLinks[0].data : {
      href: ''
    }; // 跟yuque交互保持一直，当选中区域中存在link且同时存在非link选区时，取消选区内所有的链接，同时将选区设置为新的link

    controller.command(_everCangjie.Commands.wrapInline, {
      type: 'link',
      data
    }).command(_everCangjie.Commands.focus).command(_everCangjie.Commands.moveToEndOfInline);
    return controller;
  };
}
//# sourceMappingURL=createUnwrapLink.js.map