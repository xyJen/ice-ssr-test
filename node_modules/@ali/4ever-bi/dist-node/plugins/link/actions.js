"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hideLinkEditor = hideLinkEditor;
exports.hideLinkEditorAndMoveToNextText = hideLinkEditorAndMoveToNextText;
exports.wrapLink = wrapLink;
exports.unwrapLink = unwrapLink;
exports.unwrapLinkCard = unwrapLinkCard;
exports.removeLink = removeLink;
exports.updateLink = updateLink;
exports.updateLinkWithCardInfo = updateLinkWithCardInfo;
exports.removePureLink = removePureLink;
exports.cutPureLink = cutPureLink;
exports.updatePureLink = updatePureLink;
exports.updatePureLinkWithCardInfo = updatePureLinkWithCardInfo;
exports.focusLinkEditor = focusLinkEditor;
exports.unwrapPureLink = unwrapPureLink;
exports.switchDisplayType = switchDisplayType;
exports.editLinkCard = editLinkCard;
exports.hoverLinkCard = hoverLinkCard;
exports.handleLinkPlaceholder = handleLinkPlaceholder;
exports.switchLink2Card = switchLink2Card;
exports.injectCardInfo = injectCardInfo;
exports.removeInjectCardInfo = removeInjectCardInfo;
exports.copyLink = copyLink;
exports.cutLink = cutLink;
exports.saveLinkCard = saveLinkCard;
exports.showLinkPastePanel = showLinkPastePanel;
exports.LINK_OPEN = exports.LINK_CUT_PURE = exports.LINK_SHOW_LINK_PASRE_PANEL = exports.LINK_SAVE_LINK_CARD = exports.LINK_CUT_LINK = exports.LINK_COPY_LINK = exports.LINK_REMOVE_INJECTED_CARDINFO = exports.LINK_INJECT_CARDINFO = exports.LINK_CLICK_PLACEHOLDER = exports.LINK_HOVER_LINK_CARD = exports.LINK_EDIT_LINK_CARD = exports.LINK_SWITCH_LINK_TO_CARD = exports.LINK_SWITCH_DISPLAYTYPE = exports.LINK_UNWRAP_PURE_LINK = exports.LINK_FOCUS_EDITOR = exports.LINK_UNWRAP_CARD = exports.LINK_UNWRAP = exports.LINK_WRAP = exports.LINK_UPDATE_PURE = exports.LINK_REMOVE_PURE = exports.LINK_UPDATE = exports.LINK_REMOVE = exports.LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT = exports.LINK_HIDE_EDITOR = void 0;
const LINK_HIDE_EDITOR = Symbol('LINK_HIDE_EDITOR');
exports.LINK_HIDE_EDITOR = LINK_HIDE_EDITOR;
const LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT = Symbol('LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT');
exports.LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT = LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT;
const LINK_REMOVE = Symbol('LINK_REMOVE');
exports.LINK_REMOVE = LINK_REMOVE;
const LINK_UPDATE = Symbol('LINK_UPDATE');
exports.LINK_UPDATE = LINK_UPDATE;
const LINK_REMOVE_PURE = Symbol('LINK_REMOVE_PURE');
exports.LINK_REMOVE_PURE = LINK_REMOVE_PURE;
const LINK_UPDATE_PURE = Symbol('LINK_UPDATE_PURE');
exports.LINK_UPDATE_PURE = LINK_UPDATE_PURE;
const LINK_WRAP = Symbol('LINK_WRAP');
exports.LINK_WRAP = LINK_WRAP;
const LINK_UNWRAP = Symbol('LINK_UNWRAP');
exports.LINK_UNWRAP = LINK_UNWRAP;
const LINK_UNWRAP_CARD = Symbol('LINK_UNWRAP_CARD');
exports.LINK_UNWRAP_CARD = LINK_UNWRAP_CARD;
const LINK_FOCUS_EDITOR = Symbol('LINK_FOCUS_EDITOR');
exports.LINK_FOCUS_EDITOR = LINK_FOCUS_EDITOR;
const LINK_UNWRAP_PURE_LINK = Symbol('LINK_UNWRAP_PURE_LINK');
exports.LINK_UNWRAP_PURE_LINK = LINK_UNWRAP_PURE_LINK;
const LINK_SWITCH_DISPLAYTYPE = Symbol('LINK_SWITCH_DISPLAYTYPE');
exports.LINK_SWITCH_DISPLAYTYPE = LINK_SWITCH_DISPLAYTYPE;
const LINK_SWITCH_LINK_TO_CARD = Symbol('LINK_SWITCH_LINK_TO_CARD');
exports.LINK_SWITCH_LINK_TO_CARD = LINK_SWITCH_LINK_TO_CARD;
const LINK_EDIT_LINK_CARD = Symbol('LINK_EDIT_LINK_CARD');
exports.LINK_EDIT_LINK_CARD = LINK_EDIT_LINK_CARD;
const LINK_HOVER_LINK_CARD = Symbol('LINK_HOVER_LINK_CARD');
exports.LINK_HOVER_LINK_CARD = LINK_HOVER_LINK_CARD;
const LINK_CLICK_PLACEHOLDER = Symbol('LINK_CLICK_PLACEHOLDER');
exports.LINK_CLICK_PLACEHOLDER = LINK_CLICK_PLACEHOLDER;
const LINK_INJECT_CARDINFO = Symbol('LINK_INJECT_CARDINFO');
exports.LINK_INJECT_CARDINFO = LINK_INJECT_CARDINFO;
const LINK_REMOVE_INJECTED_CARDINFO = Symbol('LINK_REMOVE_INJECTED_CARDINFO');
exports.LINK_REMOVE_INJECTED_CARDINFO = LINK_REMOVE_INJECTED_CARDINFO;
const LINK_COPY_LINK = Symbol('LINK_COPY_LINK');
exports.LINK_COPY_LINK = LINK_COPY_LINK;
const LINK_CUT_LINK = Symbol('LINK_CUT_LINK');
exports.LINK_CUT_LINK = LINK_CUT_LINK;
const LINK_SAVE_LINK_CARD = Symbol('LINK_SAVE_LINK_CARD');
exports.LINK_SAVE_LINK_CARD = LINK_SAVE_LINK_CARD;
const LINK_SHOW_LINK_PASRE_PANEL = Symbol('LINK_SHOW_LINK_PASRE_PANEL');
exports.LINK_SHOW_LINK_PASRE_PANEL = LINK_SHOW_LINK_PASRE_PANEL;
const LINK_CUT_PURE = Symbol('LINK_CUT_PURE');
exports.LINK_CUT_PURE = LINK_CUT_PURE;
const LINK_OPEN = Symbol('LINK_OPEN');
exports.LINK_OPEN = LINK_OPEN;

function hideLinkEditor() {
  return {
    type: LINK_HIDE_EDITOR,
    payload: {}
  };
}

function hideLinkEditorAndMoveToNextText() {
  return {
    type: LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT,
    payload: {}
  };
}

function wrapLink(range) {
  return {
    type: LINK_WRAP,
    payload: {
      range
    }
  };
}

function unwrapLink() {
  return {
    type: LINK_UNWRAP,
    payload: {}
  };
}

function unwrapLinkCard(node) {
  return {
    type: LINK_UNWRAP_CARD,
    payload: {
      node
    }
  };
}

function removeLink(node) {
  return {
    type: LINK_REMOVE,
    payload: {
      node
    }
  };
}

function updateLink(link, text, href) {
  return {
    type: LINK_UPDATE,
    payload: {
      node: link,
      text,
      href
    }
  };
}

function updateLinkWithCardInfo(link, text, href, cardInfo) {
  return {
    type: LINK_UPDATE,
    payload: {
      node: link,
      text,
      href,
      cardInfo
    }
  };
}

function removePureLink(node, offset, href) {
  return {
    type: LINK_REMOVE_PURE,
    payload: {
      node,
      offset,
      href
    }
  };
}

function cutPureLink(node, offset, href) {
  return {
    type: LINK_CUT_PURE,
    payload: {
      node,
      offset,
      href
    }
  };
}

function updatePureLink(link, offset, text, href, srcHref) {
  return {
    type: LINK_UPDATE_PURE,
    payload: {
      node: link,
      offset,
      text,
      href,
      srcHref
    }
  };
}

function updatePureLinkWithCardInfo(link, offset, text, href, srcHref, cardInfo, needFetchLinkInfo) {
  return {
    type: LINK_UPDATE_PURE,
    payload: {
      node: link,
      offset,
      text,
      href,
      srcHref,
      cardInfo,
      needFetchLinkInfo
    }
  };
}

function focusLinkEditor() {
  return {
    type: LINK_FOCUS_EDITOR,
    payload: {}
  };
}

function unwrapPureLink(node, offset, href) {
  return {
    type: LINK_UNWRAP_PURE_LINK,
    payload: {
      node,
      offset,
      href
    }
  };
}

function switchDisplayType(node, displayType) {
  return {
    type: LINK_SWITCH_DISPLAYTYPE,
    payload: {
      node,
      displayType
    }
  };
}

function editLinkCard() {
  return {
    type: LINK_EDIT_LINK_CARD,
    payload: {}
  };
}

function hoverLinkCard() {
  return {
    type: LINK_HOVER_LINK_CARD,
    payload: {}
  };
}

function handleLinkPlaceholder() {
  return {
    type: LINK_CLICK_PLACEHOLDER,
    payload: {}
  };
}

function switchLink2Card(link, text, href, cardInfo) {
  return {
    type: LINK_SWITCH_LINK_TO_CARD,
    payload: {
      node: link,
      text,
      href,
      cardInfo
    }
  };
}

function injectCardInfo(node, cardInfo, range) {
  return {
    type: LINK_INJECT_CARDINFO,
    payload: {
      node,
      cardInfo,
      range
    }
  };
}

function removeInjectCardInfo(node) {
  return {
    type: LINK_REMOVE_INJECTED_CARDINFO,
    payload: {
      node
    }
  };
}

function copyLink(node) {
  return {
    type: LINK_COPY_LINK,
    payload: {
      node
    }
  };
}

function cutLink(node) {
  return {
    type: LINK_CUT_LINK,
    payload: {
      node
    }
  };
}

function saveLinkCard(node, text, href) {
  return {
    type: LINK_SAVE_LINK_CARD,
    payload: {
      node,
      text,
      href
    }
  };
}

function showLinkPastePanel(text, getLinkInfo) {
  return {
    type: LINK_SHOW_LINK_PASRE_PANEL,
    payload: {
      text,
      getLinkInfo
    }
  };
}
//# sourceMappingURL=actions.js.map