"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetInlineHrefMenu = void 0;

var _react = _interopRequireDefault(require("react"));

var _weDesign = require("@ali/we-design");

var _everLogger = _interopRequireDefault(require("@ali/4ever-logger"));

var actions = _interopRequireWildcard(require("../actions"));

const _createElement = /*#__PURE__*/_react.default.createElement;
const PLACEHOLDER = 'https://';

const SetInlineHrefMenu = props => {
  let dataValue;
  const {
    controller
  } = props;
  const {
    document,
    focusInline
  } = controller.value;
  const parent = document.getParent(focusInline?.key);
  const isParentClickable = parent?.isElement() && parent.type === 'link';

  if (isParentClickable) {
    dataValue = parent.data.href;
  }

  const [value, setValue] = _react.default.useState(dataValue);

  const inputRef = _react.default.useRef(null);

  const handleBlur = _react.default.useCallback(event => {
    if (isParentClickable) {
      if (value && value !== PLACEHOLDER) {
        controller.run('onAction', actions.updateLink(parent, parent.data.text || '', value));

        _everLogger.default.sum('sidebar-link-update-link');
      } else {
        controller.run('onAction', actions.unwrapLink());
        setValue('');

        _everLogger.default.sum('sidebar-link-unwrap-link');
      }
    } else if (value && value !== PLACEHOLDER) {
      controller.run('onAction', actions.wrapLink(controller.value.selection));
      const parent = controller.value.document.getParent(focusInline?.key);

      if (!parent) {
        return undefined;
      }

      controller.run('onAction', actions.updateLink(parent, '', value));

      _everLogger.default.sum('sidebar-link-wrap-link');
    } else {
      setValue('');
    }
  }, [isParentClickable, parent, value, controller]);

  const handleEnter = _react.default.useCallback(() => {
    event?.stopPropagation();
    event?.preventDefault();
    inputRef.current?.blur();
  }, []);

  const handleChange = _react.default.useCallback(event => {
    setValue(event.target.value);
  }, []);

  const handleFocus = _react.default.useCallback(event => {
    if (!value) {
      setValue(PLACEHOLDER);
    }
  }, []);

  return /*#__PURE__*/_createElement(_weDesign.Input, {
    placeholder: PLACEHOLDER,
    onChange: handleChange,
    onBlur: handleBlur,
    onEnter: handleEnter,
    onFocus: handleFocus,
    value: value,
    ref: inputRef,
    allowClear: true,
    disabled: !focusInline
  });
};

exports.SetInlineHrefMenu = SetInlineHrefMenu;
//# sourceMappingURL=sidebarMenu.js.map