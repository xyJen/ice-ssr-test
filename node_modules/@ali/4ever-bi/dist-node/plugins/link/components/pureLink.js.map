{"version":3,"sources":["../../../../../src/plugins/link/components/pureLink.tsx"],"names":["normalizeLink","openLink","LinkPlugin","isSelectionInPureLink","node","selection","startOffset","endOffset","anchor","key","isCollapsed","isTextPoint","offset","PureLink","props","children","attributes","controller","locale","protocolAllowList","onCopyLink","text","mark","getLinkInfo","enableCard","openLinkOfConfig","enableLinkCardBlock","mountRoot","href","data","offsetInNode","value","isLinkFocus","React","useMemo","length","handleRemove","useCallback","run","handleSave","t","h","displayType","fixedHref","fixedText","onToolbarSwitchStyle","newHref","title","desc","imgURL","cardInfo","handleUnlink","handleVisit","normalizedLink","handleCopy","handleCut","injections","showCard"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;uBAR4B,a;AAU5B,MAAM;AAAEA,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,IAA8BC,sBAApC;;AAeA,MAAMC,qBAAqB,GAAG,CAACC,IAAD,EAAaC,SAAb,EAAmCC,WAAnC,EAAwDC,SAAxD,KAA8E;AAC1G,QAAM;AAAEC,IAAAA;AAAF,MAAaH,SAAnB;;AACA,MAAID,IAAI,CAACK,GAAL,KAAaD,MAAM,CAACC,GAApB,IAA2BJ,SAAS,CAACK,WAArC,IAAoDF,MAAM,CAACG,WAAP,EAAxD,EAA8E;AAC5E,WAAOH,MAAM,CAACI,MAAP,IAAiBN,WAAjB,IAAgCE,MAAM,CAACI,MAAP,IAAiBL,SAAxD;AACD;;AAED,SAAO,KAAP;AACD,CAPD;;AASA,MAAMM,QAAiC,GAAIC,KAAD,IAAW;AACnD,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,UAHI;AAIJb,IAAAA,IAJI;AAKJc,IAAAA,MALI;AAMJC,IAAAA,iBANI;AAOJC,IAAAA,UAPI;AAQJR,IAAAA,MARI;AASJS,IAAAA,IATI;AAUJC,IAAAA,IAVI;AAWJC,IAAAA,WAXI;AAYJC,IAAAA,UAZI;AAaJvB,IAAAA,QAAQ,EAAEwB,gBAbN;AAcJC,IAAAA,mBAdI;AAeJC,IAAAA;AAfI,MAgBFb,KAhBJ;AAkBA,QAAMc,IAAI,GAAGN,IAAI,CAACO,IAAL,CAAUD,IAAV,IAA4BP,IAAzC;AACA,QAAMS,YAAY,GAAGR,IAAI,CAACO,IAAL,CAAUC,YAAV,IAAoClB,MAAzD;AAEA,QAAM;AAAEP,IAAAA;AAAF,MAAgBY,UAAU,CAACc,KAAjC,CAtBmD,CAwBnD;AACA;;AACA,QAAMC,WAAW,GAAGC,KAAK,CAACC,OAAN,CAAc,MAAM/B,qBAAqB,CAACC,IAAD,EAAeC,SAAf,EAA0BO,MAA1B,EAAkCA,MAAM,GAAGS,IAAI,CAACc,MAAhD,CAAzC,EAAkG,CACpH/B,IADoH,EAC9GC,SAD8G,EACnGO,MADmG,EAC3FS,IAD2F,CAAlG,CAApB;AAGA,QAAMe,YAAY,GAAGH,KAAK,CAACI,WAAN,CAAkB,MAAM;AAC3CpB,IAAAA,UAAU,CAACqB,GAAX,CAAe,UAAf,EAA2B,6BAAelC,IAAf,EAA6B0B,YAA7B,EAA2CF,IAA3C,CAA3B;AACD,GAFoB,EAElB,CAACxB,IAAD,EAAO0B,YAAP,EAAqBF,IAArB,EAA2BX,UAA3B,CAFkB,CAArB;AAIA,QAAMsB,UAAU,GAAGN,KAAK,CAACI,WAAN,CACjB,CAACG,CAAD,EAAYC,CAAZ,EAAuBC,WAAvB,KAAwD;AACtD;AACA,QAAIA,WAAW,KAAK,MAAhB,IAA0BnB,WAA1B,IAAyC,OAAOA,WAAP,KAAuB,UAApE,EAAgF;AAC9E;AACA,YAAMoB,SAAS,GAAGF,CAAC,CAACN,MAAF,GAAW,CAAX,GAAeM,CAAf,GAAmBD,CAArC;AACA,YAAMI,SAAS,GAAGJ,CAAC,CAACL,MAAF,GAAW,CAAX,GAAeK,CAAf,GAAmBC,CAArC,CAH8E,CAI9E;AACA;;AACA,UAAIf,mBAAJ,EAAyB;AACvBT,QAAAA,UAAU,CAACqB,GAAX,CAAe,UAAf,EAA2B,8CAA+BlC,IAA/B,EAA6C0B,YAA7C,EAA2Dc,SAA3D,EAAsED,SAAtE,EAAiFf,IAAjF,EAAuF;AAAEc,UAAAA;AAAF,SAAvF,EAAwG,IAAxG,CAA3B;AACD,OAFD,MAEO;AACLzB,QAAAA,UAAU,CAACqB,GAAX,CAAe,UAAf,EAA2B,yCAA2BlC,IAA3B,EAAyC0B,YAAzC,EAAuDc,SAAvD,EAAkED,SAAlE,EAA6Ef,IAA7E,EAAmF;AAAEc,UAAAA;AAAF,SAAnF,EAAoG,IAApG,CAA3B;AACD;AACF,KAXD,MAWO;AACLzB,MAAAA,UAAU,CAACqB,GAAX,CACE,UADF,EAEE,6BAAelC,IAAf,EAA6B0B,YAA7B,EAA2CU,CAA3C,EAA8CC,CAA9C,EAAiDb,IAAjD,CAFF;AAID;;AACDX,IAAAA,UAAU,CAACqB,GAAX,CAAe,gBAAf;AACD,GArBgB,EAsBjB,CAAClC,IAAD,EAAO0B,YAAP,EAAqBF,IAArB,EAA2BX,UAA3B,EAAuCM,WAAvC,EAAoDG,mBAApD,CAtBiB,CAAnB;AAyBA,QAAMmB,oBAAoB,GAAGZ,KAAK,CAACI,WAAN,CAAkB,CAACS,OAAD,EAAkBJ,WAAlB,EAAgDK,KAAhD,EAAgEC,IAAhE,EAA+EC,MAA/E,KAAmG;AAChJ;AACA,QAAIP,WAAW,KAAK,MAApB,EAA4B;AAC1B,YAAMQ,QAAuB,GAAG;AAAED,QAAAA,MAAF;AAAUF,QAAAA,KAAV;AAAiBC,QAAAA,IAAjB;AAAuBN,QAAAA;AAAvB,OAAhC;;AACA,UAAIhB,mBAAJ,EAAyB;AACvBT,QAAAA,UAAU,CAACqB,GAAX,CAAe,UAAf,EAA2B,8CAA+BlC,IAA/B,EAA6C0B,YAA7C,EAA2DT,IAA3D,EAAiEyB,OAAjE,EAA0EA,OAA1E,EAAmFI,QAAnF,CAA3B;AACD,OAFD,MAEO;AACLjC,QAAAA,UAAU,CAACqB,GAAX,CAAe,UAAf,EAA2B,yCAA2BlC,IAA3B,EAAyC0B,YAAzC,EAAuDT,IAAvD,EAA6DyB,OAA7D,EAAsEA,OAAtE,EAA+EI,QAA/E,CAA3B;AACD;AACF;AACF,GAV4B,EAU1B,CAACjC,UAAD,EAAaW,IAAb,EAAmBxB,IAAnB,EAAyB0B,YAAzB,EAAuCT,IAAvC,EAA6CK,mBAA7C,CAV0B,CAA7B;AAYA,QAAMyB,YAAY,GAAGlB,KAAK,CAACI,WAAN,CAAkB,MAAM;AAC3CpB,IAAAA,UAAU,CAACqB,GAAX,CAAe,UAAf,EAA2B,6BAAelC,IAAf,EAA6B0B,YAA7B,EAA2CF,IAA3C,CAA3B;AACD,GAFoB,EAElB,CAACxB,IAAD,EAAO0B,YAAP,EAAqBF,IAArB,EAA2BX,UAA3B,CAFkB,CAArB;AAIA,QAAMmC,WAAW,GAAGnB,KAAK,CAACI,WAAN,CAClB,MAAM;AACJ,QAAIZ,gBAAJ,EAAsB;AACpB,YAAM4B,cAAc,GAAGrD,aAAa,CAAC4B,IAAD,EAAOT,iBAAP,CAApC;AACAM,MAAAA,gBAAgB,CAAC4B,cAAD,CAAhB;AACD,KAHD,MAGO;AACLpD,MAAAA,QAAQ,CAAC2B,IAAD,EAAOT,iBAAP,CAAR;AACD;AACF,GARiB,EASlB,CAACS,IAAD,EAAOT,iBAAP,EAA0BM,gBAA1B,CATkB,CAApB;AAYA,QAAM6B,UAAU,GAAGrB,KAAK,CAACI,WAAN,CACjB,MAAM;AACJ;AACA,qCAAgBT,IAAhB,EAAsBR,UAAtB;AACD,GAJgB,EAKjB,CAACQ,IAAD,EAAOR,UAAP,CALiB,CAAnB;AAQA,QAAMmC,SAAS,GAAGtB,KAAK,CAACI,WAAN,CAChB,MAAM;AACJpB,IAAAA,UAAU,CAACqB,GAAX,CAAe,UAAf,EAA2B,0BAAYlC,IAAZ,EAA0B0B,YAA1B,EAAwCF,IAAxC,CAA3B;AACD,GAHe,EAIhB,CAACxB,IAAD,EAAO0B,YAAP,EAAqBF,IAArB,EAA2BX,UAA3B,CAJgB,CAAlB;AAOA,QAAM;AAAEuC,IAAAA;AAAF,MAAiBvC,UAAU,CAACc,KAAlC;AACA,QAAM0B,QAAQ,GAAG,wBAAYrD,IAAZ,EAAkBoD,UAAlB,GAA+Bd,WAA/B,KAA+C,MAAhE;AACA,sBACE,qCAEIlB,UAAU,IAAIiC,QAAd,gBAEE,eAAC,uBAAD,EAAqBzC,UAArB,eACE,eAAC,kBAAD;AACE,IAAA,KAAK,EAAE,SADT;AAEE,IAAA,IAAI,EAAEY,IAFR;AAGE,IAAA,WAAW,EAAE,MAHf;AAIE,IAAA,UAAU,EAAEX,UAJd;AAKE,IAAA,QAAQ,EAAE,KALZ;AAME,IAAA,QAAQ,EAAE,KANZ;AAOE,IAAA,MAAM,EAAEC;AAPV,IADF,CAFF,gBAcE,eAAC,mBAAD;AACE,IAAA,UAAU,EAAED,UADd;AAEE,IAAA,MAAM,EAAEC,MAFV;AAGE,IAAA,IAAI,EAAC,EAHP;AAIE,IAAA,IAAI,EAAEU,IAJR;AAKE,IAAA,MAAM,EAAEW,UALV;AAME,IAAA,QAAQ,EAAEH,YANZ;AAOE,IAAA,QAAQ,EAAEe,YAPZ;AAQE,IAAA,UAAU,EAAEG,UARd;AASE,IAAA,KAAK,EAAEC,SATT;AAUE,IAAA,WAAW,EAAEhC,WAVf;AAWE,IAAA,oBAAoB,EAAEsB,oBAXxB;AAYE,IAAA,UAAU,EAAEO,WAZd;AAaE,IAAA,UAAU,EAAE5B,UAbd;AAcE,IAAA,aAAa,EAAEQ,WAdjB;AAeE,IAAA,SAAS,EAAEL;AAfb,kBAiBE,eAAC,YAAD,6BAAUX,UAAV;AAAsB,iBAAU,MAAhC;AAAuC,mBAAY,WAAnD;AAA+D,IAAA,SAAS,EAAC;AAAzE,MACGD,QAAQ,EADX,CAjBF,CAhBN,CADF;AA0CD,CAjJD;;eAmJeF,Q","sourcesContent":["import * as React from 'react';\nimport { RenderMarkProps, Controller, Text, Selection } from '@ali/4ever-cangjie';\nimport { copyToClipboard, LinkPlugin } from '@ali/4ever-bamboo';\nimport { Link, LinkCardWrapper } from './styled';\nimport { LinkPluginConfig, CardInfo, LinkDisplayType, ILinkCardInfo } from '../types';\nimport { removePureLink, updatePureLink, unwrapPureLink, updatePureLinkWithCardInfo, cutPureLink } from '../actions';\nimport LinkPortal from './linkPortal/linkPortal';\nimport { getCardInfo } from '../utils';\nimport { LinkCard } from './card/LinkCard';\nimport { convertPureLinkToBlockLinkCard } from '../linkCard/actions';\n\nconst { normalizeLink, openLink } = LinkPlugin;\n\ninterface PureLinkProps extends RenderMarkProps {\n  controller: Controller;\n  locale: LinkPluginConfig['locale'];\n  protocolAllowList: string[];\n  onCopyLink?: (href: string) => void;\n  getLinkInfo?: (href: string) => Promise<CardInfo>;\n  // todo 全量后下线配置\n  enableCard: boolean;\n  openLink?: (href: string) => void;\n  enableLinkCardBlock?: boolean;\n  mountRoot?: boolean;\n}\n\nconst isSelectionInPureLink = (node: Text, selection: Selection, startOffset: number, endOffset: number) => {\n  const { anchor } = selection;\n  if (node.key === anchor.key && selection.isCollapsed && anchor.isTextPoint()) {\n    return anchor.offset >= startOffset && anchor.offset <= endOffset;\n  }\n\n  return false;\n}\n\nconst PureLink: React.FC<PureLinkProps> = (props) => {\n  const {\n    children,\n    attributes,\n    controller,\n    node,\n    locale,\n    protocolAllowList,\n    onCopyLink,\n    offset,\n    text,\n    mark,\n    getLinkInfo,\n    enableCard,\n    openLink: openLinkOfConfig,\n    enableLinkCardBlock,\n    mountRoot,\n  } = props;\n\n  const href = mark.data.href as string || text;\n  const offsetInNode = mark.data.offsetInNode as number || offset;\n\n  const { selection } = controller.value;\n\n  // 这里需要使用 text 而不是 href 的 length，\n  // 因为在 pi 中，一旦链接换行，text 会拆分为两个不同的 leaf，导致光标定位异常\n  const isLinkFocus = React.useMemo(() => isSelectionInPureLink(node as Text, selection, offset, offset + text.length), [\n    node, selection, offset, text]);\n\n  const handleRemove = React.useCallback(() => {\n    controller.run('onAction', removePureLink(node as Text, offsetInNode, href));\n  }, [node, offsetInNode, href, controller]);\n\n  const handleSave = React.useCallback(\n    (t: string, h: string, displayType: LinkDisplayType) => {\n      // 如果保存为卡片形式形式，\n      if (displayType === 'card' && getLinkInfo && typeof getLinkInfo === 'function') {\n        // 编辑框允许 href 或 text 为空字符串，转为卡片时需要保证都不为空\n        const fixedHref = h.length > 0 ? h : t;\n        const fixedText = t.length > 0 ? t : h;\n        // 请求前先填充 undefined 信息，确保数据层识别为卡片，解决 loading 时排版问题\n        // todo 排版 2.0 后删除下面代码\n        if (enableLinkCardBlock) {\n          controller.run('onAction', convertPureLinkToBlockLinkCard(node as Text, offsetInNode, fixedText, fixedHref, href, { displayType }, true));\n        } else {\n          controller.run('onAction', updatePureLinkWithCardInfo(node as Text, offsetInNode, fixedText, fixedHref, href, { displayType }, true));\n        }\n      } else {\n        controller.run(\n          'onAction',\n          updatePureLink(node as Text, offsetInNode, t, h, href),\n        );\n      }\n      controller.run('onCangjieFocus');\n    },\n    [node, offsetInNode, href, controller, getLinkInfo, enableLinkCardBlock],\n  );\n\n  const onToolbarSwitchStyle = React.useCallback((newHref: string, displayType: LinkDisplayType, title?: string, desc?: string, imgURL?: string) => {\n    // 当 displayType 为 link 时，没有发生 url 转卡片，不保存 CardInfo\n    if (displayType === 'card') {\n      const cardInfo: ILinkCardInfo = { imgURL, title, desc, displayType };\n      if (enableLinkCardBlock) {\n        controller.run('onAction', convertPureLinkToBlockLinkCard(node as Text, offsetInNode, text, newHref, newHref, cardInfo));\n      } else {\n        controller.run('onAction', updatePureLinkWithCardInfo(node as Text, offsetInNode, text, newHref, newHref, cardInfo));\n      }\n    }\n  }, [controller, href, node, offsetInNode, text, enableLinkCardBlock]);\n\n  const handleUnlink = React.useCallback(() => {\n    controller.run('onAction', unwrapPureLink(node as Text, offsetInNode, href));\n  }, [node, offsetInNode, href, controller]);\n\n  const handleVisit = React.useCallback(\n    () => {\n      if (openLinkOfConfig) {\n        const normalizedLink = normalizeLink(href, protocolAllowList);\n        openLinkOfConfig(normalizedLink);\n      } else {\n        openLink(href, protocolAllowList);\n      }\n    },\n    [href, protocolAllowList, openLinkOfConfig],\n  );\n\n  const handleCopy = React.useCallback(\n    () => {\n      // 卡片形式下，使用仓颉复制\n      copyToClipboard(href, onCopyLink);\n    },\n    [href, onCopyLink],\n  );\n\n  const handleCut = React.useCallback(\n    () => {\n      controller.run('onAction', cutPureLink(node as Text, offsetInNode, href));\n    },\n    [node, offsetInNode, href, controller],\n  );\n\n  const { injections } = controller.value;\n  const showCard = getCardInfo(node, injections)?.displayType === 'card';\n  return (\n    <>\n      {\n        enableCard && showCard\n          ?\n          <LinkCardWrapper {...attributes}>\n            <LinkCard\n              state={'loading'}\n              href={href}\n              displayType={'card'}\n              controller={controller}\n              readonly={false}\n              isMobile={false}\n              locale={locale}\n            />\n          </LinkCardWrapper>\n          :\n          <LinkPortal\n            controller={controller}\n            locale={locale}\n            text=\"\"\n            href={href}\n            onSave={handleSave}\n            onRemove={handleRemove}\n            onUnlink={handleUnlink}\n            onCopyLink={handleCopy}\n            onCut={handleCut}\n            getLinkInfo={getLinkInfo}\n            onToolbarSwitchStyle={onToolbarSwitchStyle}\n            onOpenlink={handleVisit}\n            enableCard={enableCard}\n            isLinkFocused={isLinkFocus}\n            mountRoot={mountRoot}\n          >\n            <Link {...attributes} data-type=\"link\" data-testid=\"pure-link\" className=\"link\">\n              {children()}\n            </Link>\n          </LinkPortal>\n      }\n    </>\n\n  );\n};\n\nexport default PureLink;\n"],"file":"pureLink.js"}