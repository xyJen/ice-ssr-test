"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _styled = require("./styled");

var _styledComponents = require("styled-components");

var _actions = require("../actions");

var _everComponent = require("@ali/4ever-component");

var _linkStore = require("../utils/linkStore");

const _createElement = /*#__PURE__*/React.createElement;

function stopPropagation(event) {
  event.stopPropagation();
}

const isLinkDisplayType = value => {
  return value === 'link' || value === 'card';
};

const LinkEditor = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    nodeKey,
    href: propsHref,
    text: propsText,
    displayType: propsDisplayType = 'link',
    locale,
    controller,
    onSave,
    onUnlink,
    onHide,
    onClickoutside,
    enableCard,
    showPlaceholder,
    textInputRef: textInput,
    hrefInputRef: hrefInput
  } = props;
  const [href, setHref] = React.useState(propsHref);
  const [text, setText] = React.useState(propsText);
  const [displayType, setDisplayType] = React.useState(propsDisplayType);
  const inputFocused = React.useRef(false);
  React.useEffect(() => {
    if (propsHref) return;
    if (!nodeKey) return; // pureLink
    // 这个地方 node 的 key 可能会是 viewPack 的 key
    // 在调用 setJustCreated 的地方使用的 dataPack 中的 key
    // 因此取一下 dataPack 的 key

    const dataPackKey = nodeKey.split('-')[0];
    if (!(0, _linkStore.isJustCreated)(dataPackKey)) return;
    (0, _linkStore.setJustCreated)(dataPackKey, false); // 如果是占位符，直接 focus 标题输入框

    if (showPlaceholder && textInput?.current) {
      textInput.current.focus();
      return;
    }

    if (hrefInput?.current) hrefInput.current.focus();
  }, [propsHref, nodeKey, showPlaceholder]);
  (0, _everComponent.useOnClickOutside)(ref, onClickoutside);
  React.useEffect(() => {
    setText(propsText);
    setHref(propsHref);
  }, [propsText, propsHref]);
  const hide = React.useCallback(() => {
    onHide();

    if (showPlaceholder) {
      // 如果是占位符点击出现的编辑框，使用 esc 退出时，将光标移动到占位符外部
      controller.run('onAction', (0, _actions.hideLinkEditorAndMoveToNextText)());
    } else {
      controller.run('onAction', (0, _actions.hideLinkEditor)());
    }
  }, [controller, onHide, showPlaceholder]);
  const save = React.useCallback(() => {
    const trimedText = text.trim();
    const trimedHref = href.trim();

    if (trimedText.length || trimedHref.length) {
      onSave(trimedText, trimedHref, displayType || propsDisplayType);
    }

    onHide();
  }, [text, href, displayType, propsDisplayType, onSave, onHide]);
  const handleKeyDown = React.useCallback(event => {
    if (!event.key) {
      return;
    } // 防止 keydown 透出到编辑器


    event.stopPropagation();
    const key = event.key.toLowerCase(); // React event 没有这个属性，要到原生 event 上取
    // https://github.com/facebook/react/issues/13104

    if (event.nativeEvent.isComposing) {
      return;
    }

    if (key.toLowerCase() === 'escape' || event.keyCode === 27) {
      event.preventDefault(); // ESC 退出

      hide();
    } else if ((key === 'enter' || event.keyCode === 13) && inputFocused.current) {
      // Enter 保存
      event.preventDefault();
      save();
    }
  }, [hide, save]);
  const handleHrefChange = React.useCallback(e => {
    setHref(e.target.value);
  }, []);
  const handleTextChange = React.useCallback(e => {
    setText(e.target.value);
  }, []);
  const handleSave = React.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    save();
  }, [save]);
  const handleUnlink = React.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    onUnlink();
  }, [onUnlink]);
  const handleFocus = React.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    inputFocused.current = true;
    controller.run('onAction', (0, _actions.focusLinkEditor)());
  }, [controller]);
  const handleBlur = React.useCallback(() => {
    inputFocused.current = false;
  }, []);
  const handleClick = React.useCallback(event => event.stopPropagation(), []);
  const handleRadioClick = React.useCallback(e => {
    if (isLinkDisplayType(e)) {
      setDisplayType(e);
    }
  }, []);
  const saveButtonDisbaled = React.useMemo(() => {
    const trimedHref = href.trim();
    const trimedText = text.trim();
    const unchanged = trimedHref === propsHref.trim() && trimedText === propsText.trim() && propsDisplayType === displayType; // 当「链接」无内容或者未编辑时，不允许保存

    return trimedHref.length === 0 || unchanged;
  }, [href, text, displayType, propsHref, propsText, propsDisplayType]);
  return /*#__PURE__*/_createElement(_styled.EditorWrapper, {
    onClick: handleClick,
    "data-testid": "link-editor",
    ref: ref,
    onKeyDown: handleKeyDown
  }, /*#__PURE__*/_createElement(_styled.EditorContent, null, /*#__PURE__*/_createElement(_styled.ItemInput, null, /*#__PURE__*/_createElement("label", {
    htmlFor: "text"
  }, locale.editText), /*#__PURE__*/_createElement("input", {
    name: "text",
    type: "text",
    value: text,
    ref: textInput,
    placeholder: locale.editTextPlaceholder,
    onBlur: handleBlur,
    onChange: handleTextChange,
    onFocus: handleFocus,
    onMouseDown: stopPropagation,
    autoComplete: "off",
    "data-testid": "link-editor-input-text"
  })), /*#__PURE__*/_createElement(_styled.ItemInput, null, /*#__PURE__*/_createElement("label", {
    htmlFor: "href"
  }, locale.editHref), /*#__PURE__*/_createElement("input", {
    name: "href",
    type: "text",
    value: href,
    ref: hrefInput,
    placeholder: locale.editHrefPlaceholder,
    onBlur: handleBlur,
    onChange: handleHrefChange,
    onFocus: handleFocus,
    onMouseDown: stopPropagation,
    autoComplete: "off",
    "data-testid": "link-editor-input-href"
  })), enableCard && /*#__PURE__*/_createElement(_styled.ItemRadio, null, /*#__PURE__*/_createElement("label", {
    htmlFor: "displayType"
  }, locale.editStyle), /*#__PURE__*/_createElement(_styled.RadioWrapper, null, /*#__PURE__*/_createElement(_weDesign.RadioGroup, {
    onChange: handleRadioClick,
    value: displayType
  }, /*#__PURE__*/_createElement(_styledComponents.ThemeProvider, {
    theme: {
      ui: { ..._weDesign.theme,
        padding: '8px'
      }
    }
  }, /*#__PURE__*/_createElement(_weDesign.Radio, {
    value: "link"
  }, locale.link), /*#__PURE__*/_createElement(_weDesign.Radio, {
    value: "card"
  }, locale.editStyleCard)))))), /*#__PURE__*/_createElement(_styled.EditorFooter, null, /*#__PURE__*/_createElement(_styled.RemoveButton, {
    onMouseDown: handleUnlink,
    "data-testid": "link-editor-unlink"
  }, /*#__PURE__*/_createElement(_weDesign.ToolbarDeleteLinkNormal, {
    style: {
      marginRight: 4
    }
  }), /*#__PURE__*/_createElement("span", {
    className: "text"
  }, locale.unlink)), /*#__PURE__*/_createElement(_styled.SaveButton, {
    type: 'primary',
    onMouseDown: handleSave,
    testid: "link-editor-save",
    disabled: saveButtonDisbaled
  }, /*#__PURE__*/_createElement("span", {
    className: "text"
  }, locale.save))));
});

var _default = /*#__PURE__*/React.memo(LinkEditor);

exports.default = _default;
//# sourceMappingURL=linkEditor.js.map