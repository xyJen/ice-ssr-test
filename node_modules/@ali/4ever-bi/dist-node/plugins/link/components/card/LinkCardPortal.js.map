{"version":3,"sources":["../../../../../../src/plugins/link/components/card/LinkCardPortal.tsx"],"names":["LinkCardPortal","props","node","text","href","onSave","onRemove","onUnlink","onCut","onCopyLink","controller","locale","draggable","attributes","enableCard","nodeKey","key","visible","setVisible","React","useState","portalRef","useRef","linkRef","isLinkCardSelected","query","scrollableContent","document","body","zoom","handleEdit","useCallback","run","handleEditorHide","handleClickoutside","event","target","current","contains","handleSwitchStyle","e","renderCard","useMemo","overlay","getPositionTopLeft","offsetY"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Controller, RenderNodeProps, useZoom, useZoomContainer } from '@ali/4ever-cangjie';\nimport Portal from '../AnimatePortal';\nimport LinkEditor from '../linkEditor';\nimport { LinkDisplayType, LinkNode, LinkPluginConfig } from '../../types';\nimport { BiPluginConfig } from '../../../../types';\nimport { switchDisplayType, editLinkCard } from '../../actions';\nimport { LinkCardWrapper } from '../styled';\nimport { LinkCard, CardState } from './LinkCard';\nimport { getPositionTopLeft, offsetY } from '../../utils/getPosition';\n\ninterface LinkPortalProps extends RenderNodeProps<LinkNode> {\n  node: LinkNode;\n  text: string;\n  href: string;\n  controller: Controller;\n  locale: LinkPluginConfig['locale'];\n  onSave: (text: string, href: string, displayType: LinkDisplayType) => void;\n  onRemove: () => void;\n  onCut: () => void;\n  onUnlink: () => void;\n  onOpenLink: () => void;\n  onCopyLink: (href: string) => void;\n  isLinkFocused?: boolean;\n  getLinkInfo?: LinkPluginConfig['getLinkInfo'];\n  isSelected: boolean;\n  title?: string;\n  desc?: string;\n  imgURL?: string;\n  state: CardState;\n  readonly: boolean;\n  isMobile: boolean;\n  displayType: LinkDisplayType;\n  onRefresh?: () => void;\n  draggable?: BiPluginConfig['DraggablePluginConfig'];\n  enableCard: boolean;\n}\n\nconst LinkCardPortal: React.FC<LinkPortalProps> = (props) => {\n  const {\n    node,\n    text,\n    href = '',\n    onSave,\n    onRemove,\n    onUnlink,\n    onCut,\n    onCopyLink,\n    controller,\n    locale,\n    draggable,\n    attributes,\n    enableCard,\n  } = props;\n\n  const nodeKey = node?.key;\n\n  const [visible, setVisible] = React.useState(false);\n\n  const portalRef = React.useRef<HTMLDivElement>(null);\n  const linkRef = React.useRef<HTMLDivElement>(null);\n  const isLinkCardSelected = controller.query('isLinkCardSelected', { node });\n\n  const scrollableContent = useZoomContainer() || document.body;\n  const zoom = useZoom();\n\n  const handleEdit = React.useCallback(() => {\n    setVisible(true);\n    controller.run('onAction', editLinkCard());\n  }, [controller]);\n\n  const handleEditorHide = React.useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const handleClickoutside = React.useCallback((event) => {\n    const target = event.target as HTMLElement;\n    if (target === linkRef.current || linkRef.current?.contains(target)) {\n      return;\n    }\n    setVisible(false);\n  }, []);\n\n  const handleSwitchStyle = React.useCallback((e: LinkDisplayType) => {\n    if (e === 'link') {\n      controller.run('onAction', switchDisplayType(node, 'link'));\n    }\n  }, [controller, node]);\n\n  const renderCard = React.useMemo(() => {\n    return (\n      <LinkCardWrapper {...attributes}>\n        <LinkCard\n          {...props}\n          href={href}\n          readonly={false}\n          isMobile={false}\n          isSelected={isLinkCardSelected}\n          onEdit={handleEdit}\n          onDelete={onRemove}\n          onCut={onCut}\n          onSwitchStyle={handleSwitchStyle}\n          onCopy={onCopyLink}\n        />\n      </LinkCardWrapper>\n    );\n  }, [attributes, props, href, isLinkCardSelected, handleEdit, onRemove, onCut, handleSwitchStyle, onCopyLink]);\n\n  const overlay = (\n    <LinkEditor\n      ref={portalRef}\n      displayType={'card'}\n      nodeKey={nodeKey}\n      text={text}\n      href={href}\n      onSave={onSave}\n      onRemove={onRemove}\n      onUnlink={onUnlink}\n      locale={locale}\n      controller={controller}\n      onHide={handleEditorHide}\n      onClickoutside={handleClickoutside}\n      enableCard={enableCard}\n    />\n  );\n\n  return (\n    <Portal\n      className=\"bi-link-card-portal\"\n      visible={visible}\n      triggerRef={linkRef}\n      overlay={overlay}\n      portalMatchTrigger={false}\n      container={scrollableContent}\n      getPosition={getPositionTopLeft}\n      offset={[0, offsetY]}\n      zoom={zoom}\n    >\n      {renderCard}\n    </Portal>\n  );\n};\n\nexport default LinkCardPortal;\n"],"file":"LinkCardPortal.js"}