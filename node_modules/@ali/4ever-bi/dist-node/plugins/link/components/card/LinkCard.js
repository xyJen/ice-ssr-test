"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkCard = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _everBamboo = require("@ali/4ever-bamboo");

var _weBizLinkCard = require("@ali/we-biz-link-card");

const _createElement = /*#__PURE__*/React.createElement;
const {
  height,
  width,
  margin
} = _everBamboo.theme.link;
const LINK_WIDTH = 350;

const Wrapper = /*#__PURE__*/_styledComponents.default.span(["cursor:default;display:inline-block;line-height:normal;box-sizing:content-box;border-radius:8px;"]);

const noop = () => {};

const LinkCard = /*#__PURE__*/React.memo(props => {
  const {
    state,
    href,
    controller,
    title = '',
    imgURL = '',
    desc = '',
    locale,
    displayType: displayStyle,
    onCopy = noop,
    onRefresh = noop,
    onOpenLink = noop,
    onSwitchStyle = noop,
    onCut = noop,
    onDelete = noop,
    isMobile,
    isSelected = false,
    ...rest
  } = props;
  const urlInfo = React.useMemo(() => ({
    title,
    imgURL,
    desc
  }), [title, imgURL, desc]);
  const triggerNodeRef = React.useRef();
  const handleCopyLink = React.useCallback(() => {
    if (onCopy && typeof onCopy === 'function') {
      onCopy(href || '');
    }
  }, [onCopy, href]);
  const linkCardLocale = React.useMemo(() => {
    const tooltipLocale = {
      editTooltip: locale.edit,
      copyTooltip: locale.copy,
      unlinkTooltip: locale.unlink,
      deleteTooltip: locale.delete,
      switchStyleTooltip: locale.styleText
    };
    return { ...locale,
      ...tooltipLocale
    };
  }, [locale]);
  const handleSwitchStyle = React.useCallback(style => {
    onSwitchStyle(style === 'popup' ? 'link' : 'card');
  }, [onSwitchStyle]); // 当链接呼出卡片时，显示宽度需要调整

  const finalWidth = displayStyle === 'link' ? LINK_WIDTH : width;
  return /*#__PURE__*/_createElement(Wrapper, {
    ref: triggerNodeRef,
    style: {
      height: height,
      width: finalWidth,
      margin: margin
    }
  }, /*#__PURE__*/_createElement(_weBizLinkCard.URLLinkCard, (0, _extends2.default)({
    isSelected: isSelected,
    cardStyle: displayStyle === 'link' ? 'popup' : 'indoc',
    state: state,
    url: href,
    locale: linkCardLocale,
    urlInfo: urlInfo,
    isMobile: isMobile,
    onRefresh: onRefresh,
    onCopy: handleCopyLink,
    onOpenURL: onOpenLink,
    onSwitchStyle: handleSwitchStyle,
    onDelete: onDelete,
    onCut: onCut,
    editBtnTestID: "link-toolbar-edit",
    copyBtnTestID: "link-toolbar-copy",
    cutBtnTestID: "link-toolbar-cut",
    unlinkBtnTestID: "link-toolbar-unlink",
    deleteBtnTestID: "link-toolbar-remove",
    switchStyleBtnTestID: "link-toolbar-switch",
    linkStyleBtnTestID: "link-toolbar-switch-link",
    cardStyleBtnTestID: "link-toolbar-switch-card",
    cardTestID: "link-card"
  }, rest)));
});
exports.LinkCard = LinkCard;
//# sourceMappingURL=LinkCard.js.map