{"version":3,"sources":["../../../../../../src/plugins/link/components/card/LinkCardInlineToolbar.tsx"],"names":["defaultImageLayout","toolButtons","name","getToolButton","icon","handler","testid","LinkCardToolbarToolbar","props","triggerNode","locale","onRefresh","getCustomToolButtons","React","useMemo","refresh"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;uBAF4B,a;AAW5B,MAAMA,kBAAkB,GAAG,CAAC;AAC1BC,EAAAA,WAAW,EAAE,CAAC;AACZC,IAAAA,IAAI,EAAE;AADM,GAAD;AADa,CAAD,CAA3B;;AAMA,MAAMC,aAAa,GAAG,CAACD,IAAD,EAA2BE,IAA3B,EAAqDC,OAArD,EAAmEC,MAAnE,KAAsF;AAC1G,SAAO,mBAAM,eAAC,gBAAD;AAAQ,IAAA,MAAM,EAAEA,MAAhB;AAAwB,IAAA,OAAO,EAAED,OAAjC;AAAqE,IAAA,KAAK,EAAEH,IAA5E;AAAkF,IAAA,QAAQ,EAAE,KAA5F;AAAmG,IAAA,IAAI,EAAEE;AAAzG,IAAb;AACD,CAFD;;wBASwD,eAAC,wBAAD,O;;AALxD,MAAMG,sBAAsD,GAAIC,KAAD,IAAW;AACxE,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA;AAAvB,MAAqCH,KAA3C;AAEA,QAAMI,oBAAoB,GAAGC,KAAK,CAACC,OAAN,CAAc,MAAM;AAC/C,WAAO;AACL,0BAAoBX,aAAa,CAACO,MAAM,CAACK,OAAR,QAAkCJ,SAAlC,EAA6C,4BAA7C;AAD5B,KAAP;AAGD,GAJ4B,EAI1B,CAACA,SAAD,EAAYD,MAAZ,CAJ0B,CAA7B;AAMA,sBACE,eAAC,oBAAD;AACE,IAAA,OAAO,MADT;AAEE,IAAA,WAAW,EAAED,WAFf;AAGE,IAAA,YAAY,EAAET,kBAHhB;AAIE,IAAA,iBAAiB,EAAEY;AAJrB,IADF;AAQD,CAjBD;;eAoBeL,sB","sourcesContent":["import * as React from 'react';\nimport { Button } from '@ali/we-design';\nimport { RefreshIcon } from './RefreshIcon';\nimport { InlineToolbar } from '../../../../index';\nimport { LinkPluginConfig } from '../../types';\n\nexport interface LinkCardToolbarProps {\n  locale: LinkPluginConfig['locale'];\n  triggerNode?: HTMLElement | undefined;\n  onRefresh?: () => void;\n}\n\nconst defaultImageLayout = [{\n  toolButtons: [{\n    name: 'linkCard.refresh',\n  }],\n}];\n\nconst getToolButton = (name: string | undefined, icon: React.ReactElement, handler: any, testid: string) => {\n  return () => <Button testid={testid} onClick={handler as React.MouseEventHandler} title={name} bordered={false} icon={icon} />;\n};\n\nconst LinkCardToolbarToolbar: React.FC<LinkCardToolbarProps> = (props) => {\n  const { triggerNode, locale, onRefresh } = props;\n\n  const getCustomToolButtons = React.useMemo(() => {\n    return {\n      'linkCard.refresh': getToolButton(locale.refresh, <RefreshIcon />, onRefresh, 'bi-toolbar-linkCard-refres'),\n    };\n  }, [onRefresh, locale]);\n\n  return (\n    <InlineToolbar\n      visible\n      triggerNode={triggerNode}\n      inlineLayout={defaultImageLayout}\n      customToolButtons={getCustomToolButtons}\n    />\n  );\n};\n\n\nexport default LinkCardToolbarToolbar;\n"],"file":"LinkCardInlineToolbar.js"}