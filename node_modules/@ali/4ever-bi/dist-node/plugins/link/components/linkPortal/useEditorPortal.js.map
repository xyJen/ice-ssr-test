{"version":3,"sources":["../../../../../../src/plugins/link/components/linkPortal/useEditorPortal.tsx"],"names":["usePrevious","value","ref","React","useRef","useEffect","current","useEditorPortal","props","node","text","href","onSave","onRemove","onUnlink","controller","locale","isLinkFocused","enableCard","onEditorHide","portalRef","linkRef","isEditMode","isPlaceholder","nodeKey","key","isFocused","textInputRef","hrefInputRef","isEmptyHref","trim","length","preLinkFocused","focus","handleLinkMouseDown","useCallback","event","stopPropagation","preventDefault","handleLinkClick","handleClickoutside","target","contains","overlay","useMemo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { LinkPortalProps } from '../../types';\nimport LinkEditor from '../linkEditor';\n\ninterface EditorPortalProps extends LinkPortalProps {\n  isEditMode: boolean;\n  onEditorHide: (delay?: number) => void;\n  portalRef: React.RefObject<HTMLDivElement>;\n  linkRef: React.RefObject<HTMLDivElement>;\n  isPlaceholder: boolean;\n}\n\ninterface IEditorPortal {\n  overlay: React.ReactElement;\n  handleLinkMouseDown: (event: React.MouseEvent) => void;\n  handleLinkClick: (event: React.MouseEvent) => void;\n}\n\n// 用于记录上一次的props, 类似react lifecycle当中的preProps\nfunction usePrevious<T>(value: T) {\n  const ref = React.useRef<T>();\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n\nconst useEditorPortal = (props: EditorPortalProps): IEditorPortal => {\n  const {\n    node,\n    text,\n    href = '',\n    onSave,\n    onRemove,\n    onUnlink,\n    controller,\n    locale,\n    isLinkFocused,\n    enableCard,\n    onEditorHide,\n    portalRef,\n    linkRef,\n    isEditMode,\n    isPlaceholder\n  } = props;\n\n  const nodeKey = node?.key;\n  const { isFocused } = controller.value;\n\n  const textInputRef = React.useRef<HTMLInputElement>();\n  const hrefInputRef = React.useRef<HTMLInputElement>();\n  const isEmptyHref = href.trim().length === 0;\n\n  const preLinkFocused = usePrevious(isLinkFocused);\n\n  React.useEffect(() => {\n    // 占位符默认 focus 标题\n    if (isEditMode && isPlaceholder) {\n      textInputRef.current?.focus();\n    }\n  }, [textInputRef, isPlaceholder, isEditMode]);\n\n  React.useEffect(() => {\n    // 外部点击触发编辑框显示时，应该 focus 到输入框\n    if (isFocused && !preLinkFocused && !isLinkFocused) {\n      if (isEmptyHref) {\n        // 空连接默认 focus href\n        hrefInputRef.current?.focus();\n      }\n    }\n  }, [hrefInputRef, isLinkFocused, isFocused, preLinkFocused]);\n\n  const handleLinkMouseDown = React.useCallback((event) => {\n    if (isPlaceholder && isEditMode) {\n      event.stopPropagation();\n      event.preventDefault();\n      textInputRef.current?.focus();\n    }\n    if (isEmptyHref && isEditMode) {\n      event.stopPropagation();\n      event.preventDefault();\n      hrefInputRef.current?.focus();\n    }\n    // controller.run('onAction', focusLinkEditor());\n  }, [textInputRef, hrefInputRef, isPlaceholder, isEditMode]);\n\n\n  // 编辑状态下 click 正常链接，隐藏编辑框\n  const handleLinkClick = React.useCallback((event) => {\n    if (!isPlaceholder && !isPlaceholder && isEditMode) {\n      onEditorHide();\n    }\n  }, [isEditMode, isPlaceholder, isEmptyHref]);\n\n  const handleClickoutside = React.useCallback((event) => {\n    const target = event.target as HTMLElement;\n    if (target === linkRef.current || linkRef.current?.contains(target)) {\n      return;\n    }\n    onEditorHide();\n  }, [onEditorHide]);\n\n  const overlay = React.useMemo(() => {\n    return (\n      <LinkEditor\n        ref={portalRef}\n        displayType={'link'}\n        nodeKey={nodeKey}\n        text={isPlaceholder ? '' : text}\n        href={href}\n        onSave={onSave}\n        onRemove={onRemove}\n        onUnlink={onUnlink}\n        locale={locale}\n        controller={controller}\n        onHide={onEditorHide}\n        onClickoutside={handleClickoutside}\n        enableCard={enableCard}\n        showPlaceholder={isPlaceholder}\n        textInputRef={textInputRef}\n        hrefInputRef={hrefInputRef}\n      />);\n  }, [portalRef, nodeKey, text, href, onSave, onRemove, onUnlink, locale, controller, enableCard, onEditorHide, handleClickoutside, isPlaceholder]);\n\n  return { overlay, handleLinkMouseDown, handleLinkClick };\n};\n\nexport default useEditorPortal;\n"],"file":"useEditorPortal.js"}