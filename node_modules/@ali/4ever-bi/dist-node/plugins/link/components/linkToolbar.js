"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _weDesign = require("@ali/we-design");

var _styled = require("./styled");

var _everComponent = require("@ali/4ever-component");

var _LinkCard = require("./card/LinkCard");

var _ToolbarIcon = _interopRequireDefault(require("./ToolbarIcon"));

const _createElement = /*#__PURE__*/React.createElement;

var _ref = /*#__PURE__*/_createElement(_weDesign.WebBetaNormal, null);

const LinkToolbar = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    onEdit,
    onRemove,
    onCut,
    onUnlink,
    href,
    onHide,
    onClickoutside,
    onCopy,
    locale,
    getLinkInfo,
    onToolbarSwitchStyle,
    onOpenlink,
    title,
    imgURL,
    desc,
    enableCard,
    onMouseLeave,
    onMouseEnter,
    onCleanup
  } = props;
  (0, _everComponent.useOnClickOutside)(ref, onClickoutside);
  const isMounted = React.useRef(false);
  const [cardImgURL, setCardImgURL] = React.useState(imgURL);
  const [cardTitle, setCardTitle] = React.useState(title);
  const [cardDesc, setCardDesc] = React.useState(desc);
  const [cardState, setCardState] = React.useState('normal');
  React.useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  React.useEffect(() => {
    const handleKeyDown = event => {
      if (!event.key) {
        return;
      }

      const key = event.key.toLowerCase();

      if (key.toLowerCase() === 'escape' || event.keyCode === 27) {
        event.preventDefault(); // ESC 退出

        onHide();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [onHide]);
  const handleRefresh = React.useCallback(async () => {
    if (getLinkInfo && typeof getLinkInfo === 'function') {
      setCardState('loading');

      try {
        const info = await getLinkInfo(href); // 组件已经卸载，直接返回

        if (!isMounted.current) {
          return;
        }

        if (info) {
          // 请求成功
          const {
            imgURL: newImgURL = '',
            title: newTitle = '',
            desc: newDesc = ''
          } = info;
          setCardImgURL(newImgURL);
          setCardTitle(newTitle);
          setCardDesc(newDesc);
          setCardState('normal');
          return;
        }
      } catch (e) {}
    } // 请求失败，不更新数据,将卡片信息设置为 undefined


    setCardState('error');
    setCardImgURL(undefined);
    setCardTitle(undefined);
    setCardDesc(undefined);
  }, [getLinkInfo, href, isMounted, setCardState, setCardImgURL, setCardTitle, setCardDesc]); // mount 时拉取数据

  React.useEffect(() => {
    if (enableCard) {
      if (imgURL === undefined && title === undefined && desc === undefined) {
        handleRefresh();
      } else {
        setCardState('normal');
      }
    }

    return () => {
      onCleanup();
    };
  }, [handleRefresh, imgURL, title, desc, setCardState, enableCard, onHide, onCleanup]); // unmount 时确保 onCleanup 执行

  React.useEffect(() => {
    return () => {
      onCleanup();
    };
  }, [onCleanup]); // 切换展示风格时，将请求到的数据发出

  const handleSwitchStyle = React.useCallback(style => {
    onToolbarSwitchStyle(href, style, cardTitle, cardDesc, cardImgURL);
  }, [href, cardTitle, cardDesc, cardImgURL, onToolbarSwitchStyle]);
  const handleVisit = React.useCallback(event => {
    event.preventDefault();
    onOpenlink();
  }, [onOpenlink]);
  const handleCopy = React.useCallback(event => {
    event?.preventDefault();
    onCopy(href);
  }, [href, onCopy]);
  const handleRemove = React.useCallback(event => {
    event?.preventDefault();
    event?.stopPropagation();
    onRemove();
  }, [onRemove]);
  const handleUnlink = React.useCallback(event => {
    event?.preventDefault();
    event?.stopPropagation();
    onUnlink();
  }, [onUnlink]);

  const LinkCardToolbar = /*#__PURE__*/_createElement(_styled.CardToolbarWrapper, {
    "data-testid": "link-toolbar",
    ref: ref,
    onMouseLeave: onMouseLeave,
    onMouseEnter: onMouseEnter
  }, /*#__PURE__*/_createElement(_LinkCard.LinkCard, {
    displayType: 'link',
    state: cardState,
    href: href,
    onCopy: onCopy,
    onDelete: onRemove,
    onCut: onCut,
    onUnlink: onUnlink,
    onEdit: onEdit,
    title: cardTitle,
    imgURL: cardImgURL,
    desc: cardDesc,
    locale: locale,
    readonly: false,
    isMobile: false,
    onOpenLink: onOpenlink,
    onSwitchStyle: handleSwitchStyle,
    onRefresh: handleRefresh
  }));

  const NormalToolbar = /*#__PURE__*/_createElement(_styled.ToolbarWrapper, {
    "data-testid": "link-toolbar",
    ref: ref,
    onMouseLeave: onMouseLeave,
    onMouseEnter: onMouseEnter
  }, _ref, /*#__PURE__*/_createElement(_styled.LinkHrefWrapper, null, /*#__PURE__*/_createElement(_weDesign.Tooltip, {
    placement: "bottom",
    title: locale.openLinkTip
  }, /*#__PURE__*/_createElement(_styled.LinkHref, {
    onMouseDown: handleVisit,
    "data-testid": "link-toolbar-visit"
  }, href))), /*#__PURE__*/_createElement(_ToolbarIcon.default, {
    "data-testid": "link-toolbar-edit",
    type: "editor-border-beta",
    tip: locale.edit,
    onMouseDown: onEdit
  }), /*#__PURE__*/_createElement(_ToolbarIcon.default, {
    "data-testid": "link-toolbar-copy",
    type: "copy-beta",
    tip: locale.copy,
    onMouseDown: handleCopy
  }), /*#__PURE__*/_createElement(_ToolbarIcon.default, {
    "data-testid": "link-toolbar-unlink",
    type: "delete-link-beta",
    tip: locale.unlink,
    onMouseDown: handleUnlink
  }), /*#__PURE__*/_createElement(_ToolbarIcon.default, {
    "data-testid": "link-toolbar-remove",
    type: "delete-beta",
    tip: locale.delete,
    onMouseDown: handleRemove
  }));

  return enableCard ? LinkCardToolbar : NormalToolbar;
});

var _default = /*#__PURE__*/React.memo(LinkToolbar);

exports.default = _default;
//# sourceMappingURL=linkToolbar.js.map