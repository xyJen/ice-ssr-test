"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.actions = exports.default = void 0;

var _everBamboo = require("@ali/4ever-bamboo");

var _toolbar = _interopRequireDefault(require("./toolbar"));

var _menubar = _interopRequireDefault(require("./menubar"));

var _createRenderNode = _interopRequireDefault(require("./createRenderNode"));

var _createRenderMark = _interopRequireDefault(require("./createRenderMark"));

var _onAction = _interopRequireDefault(require("./handlers/onAction"));

var _createOnKeyDown = _interopRequireDefault(require("./handlers/createOnKeyDown"));

var _onCangjieCopyorCut = _interopRequireDefault(require("./handlers/onCangjieCopyorCut"));

var _onCangjieInput = _interopRequireDefault(require("./handlers/onCangjieInput"));

var _createOnCangjiePaste = _interopRequireDefault(require("./handlers/createOnCangjiePaste"));

var _createInsertLink = _interopRequireDefault(require("./commands/createInsertLink"));

var _createUnwrapLink = _interopRequireDefault(require("./commands/createUnwrapLink"));

var _createCopyLink = _interopRequireDefault(require("./commands/createCopyLink"));

var _createUpdatePureLinkWithCardInfo = _interopRequireDefault(require("./commands/createUpdatePureLinkWithCardInfo"));

var _createSaveLinkCard = _interopRequireDefault(require("./commands/createSaveLinkCard"));

var _quickInsertConfig = _interopRequireDefault(require("./quickInsertConfig"));

var actions = _interopRequireWildcard(require("./actions"));

exports.actions = actions;

var _utils = require("./utils");

var _zh_CN = _interopRequireDefault(require("../../locales/zh_CN"));

var _showLinkPastePanel = _interopRequireDefault(require("./commands/showLinkPastePanel"));

var _sidebar = _interopRequireDefault(require("./sidebar"));

var _queries = require("./queries");

var _createRenderToolbar = _interopRequireDefault(require("./createRenderToolbar"));

var _everPluginLink = require("@ali/4ever-plugin-link");

function createLinkPlugin(config = {}) {
  const linkConfig = {
    hotkey: 'mod+k',
    protocolAllowList: ['http:', 'https:', 'dingtalk:', 'taobao:'],
    locale: _zh_CN.default.link.locale,
    ...config.link
  };
  const serializer = config.clipboard?.serializer;
  const linkPlugin = { ...(0, _everPluginLink.moFactory)({}),
    toolbar: (0, _toolbar.default)(linkConfig.locale),
    menubar: (0, _menubar.default)(linkConfig.locale),
    sidebar: (0, _sidebar.default)(linkConfig),
    renderNode: (0, _createRenderNode.default)(linkConfig, config.draggable),
    renderToolbar: (0, _createRenderToolbar.default)(linkConfig.locale),
    shouldNodeComponentUpdate: ({
      node
    }, _props, _editor, next) => {
      if (node.type === 'link') {
        return true;
      }

      return next();
    },
    // @ts-ignore onAction should return void
    onAction: _onAction.default,
    onKeyDown: (0, _createOnKeyDown.default)(linkConfig.hotkey || '', linkConfig.locale.addLinkPlaceholder),
    onCangjieInput: _onCangjieInput.default,
    onCangjieCopy: _onCangjieCopyorCut.default,
    onCangjieCut: _onCangjieCopyorCut.default,
    onCangjiePaste: (0, _createOnCangjiePaste.default)(config, linkConfig),
    commands: {
      insertLink: (0, _createInsertLink.default)(linkConfig.locale),
      unwrapLink: (0, _createUnwrapLink.default)(linkConfig.protocolAllowList),
      updatePureLinkWithCardInfo: (0, _createUpdatePureLinkWithCardInfo.default)(linkConfig.getLinkInfo),
      saveLinkCard: (0, _createSaveLinkCard.default)(linkConfig.getLinkInfo),
      copyLink: (0, _createCopyLink.default)(serializer),
      showLinkPastePanel: (0, _showLinkPastePanel.default)(linkConfig.enableLinkCardBlock)
    },
    queries: _queries.queries,
    locale: linkConfig.locale || {},
    quickInsert: _quickInsertConfig.default,
    models: {
      klass: 'inline',
      type: 'link'
    }
  }; // 支持 purelink 识别的情况下，添加 decorateNode 和 renderMark

  if (!linkConfig.disableTextRecognize) {
    // @ts-ignore
    linkPlugin.decorateNode = _everBamboo.LinkPlugin.createDecorateNode(linkConfig.protocolAllowList || []);
    linkPlugin.renderMark = (0, _createRenderMark.default)(linkConfig);
  }

  return linkPlugin;
}

createLinkPlugin.actions = actions;
createLinkPlugin.utils = {
  isSelectionInLink: _utils.isSelectionInLink,
  createCopyLink: _createCopyLink.default
};
var _default = createLinkPlugin;
exports.default = _default;
//# sourceMappingURL=index.js.map