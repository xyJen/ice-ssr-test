"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRenderMark;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _pureLink = _interopRequireDefault(require("./components/pureLink"));

var _utils = require("./utils");

const _createElement = /*#__PURE__*/React.createElement;

function createRenderMark(linkConfig) {
  const {
    locale,
    protocolAllowList,
    onCopyLink,
    getLinkInfo,
    enableCard = false,
    openLink,
    enableLinkCardBlock,
    mountRoot = false
  } = linkConfig;
  return function renderMark(props, controller, next) {
    const {
      mark,
      marks,
      node
    } = props;

    if (mark.type === 'link' && !marks.find(({
      type
    }) => type === 'unlink')) {
      const {
        document
      } = controller.value;
      const inline = document.getClosestInline(node.key);

      if (!(0, _utils.isLinkNode)(inline)) {
        // 仅在父节点不是 link 节点时，渲染 purelink, 避免节点嵌套
        return /*#__PURE__*/_createElement(_pureLink.default, (0, _extends2.default)({}, props, {
          controller: controller,
          protocolAllowList: protocolAllowList || [],
          locale: locale,
          onCopyLink: onCopyLink,
          getLinkInfo: getLinkInfo,
          enableCard: enableCard,
          openLink: openLink,
          enableLinkCardBlock: enableLinkCardBlock,
          mountRoot: mountRoot
        }));
      }
    }

    return next();
  };
}
//# sourceMappingURL=createRenderMark.js.map