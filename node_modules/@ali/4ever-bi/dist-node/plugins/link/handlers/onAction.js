"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onAction;

var _everCangjie = require("@ali/4ever-cangjie");

var _everBamboo = require("@ali/4ever-bamboo");

var _everPluginClipboard = require("@ali/4ever-plugin-clipboard");

var _actions = require("../actions");

var _commands = require("../commands");

const {
  ACTION_COPY
} = _everCangjie.ContextMenu;

function onAction(action, controller, next) {
  const {
    type,
    payload
  } = action;

  if (type === _actions.LINK_HIDE_EDITOR) {
    controller.command(_everCangjie.Commands.focus); // 若是在末尾取消编辑，则跳出当前链接

    const {
      selection,
      startInline
    } = controller.value;

    if (selection.isCollapsed && startInline && selection.anchor.isAtEndOfNode(startInline)) {
      controller.command(_everCangjie.Commands.moveToStartOfNextText);
    }

    return controller;
  }

  if (type === _actions.LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT) {
    controller.command(_everCangjie.Commands.focus).command(_everCangjie.Commands.moveToStartOfNextText);
    return controller;
  }

  if (type === _actions.LINK_WRAP) {
    const {
      range
    } = payload;

    if (range) {
      controller.command(_everCangjie.Commands.select, range);
    }

    return controller.command(_everCangjie.Commands.focus).command(_commands.wrapLink);
  }

  if (type === _actions.LINK_UNWRAP) {
    return controller.command('unwrapLink');
  }

  if (type === _actions.LINK_UNWRAP_CARD) {
    const {
      node
    } = payload;
    return controller.command(_commands.unwrapLinkCard, node);
  }

  if (type === _actions.LINK_REMOVE) {
    const {
      node
    } = payload;
    return (0, _commands.removeLink)(controller, node);
  }

  if (type === _actions.LINK_UPDATE) {
    const {
      node,
      text,
      href,
      cardInfo
    } = payload;

    if (cardInfo) {
      return (0, _commands.updateLinkCardInfo)(controller, node, text, href, cardInfo);
    }

    return (0, _commands.updateLink)(controller, node, text, href);
  }

  if (type === _actions.LINK_CUT_PURE) {
    const {
      node,
      offset,
      href
    } = payload;
    (0, _everBamboo.copyToClipboard)(href);
    return (0, _commands.removePureLink)(controller, node, offset, href);
  }

  if (type === _actions.LINK_REMOVE_PURE) {
    const {
      node,
      offset,
      href
    } = payload;
    return (0, _commands.removePureLink)(controller, node, offset, href);
  }

  if (type === _actions.LINK_UPDATE_PURE) {
    const {
      node,
      text,
      href,
      offset,
      srcHref,
      cardInfo,
      needFetchLinkInfo
    } = payload;

    if (cardInfo) {
      return controller.command('updatePureLinkWithCardInfo', node, offset, text, href, srcHref, cardInfo, needFetchLinkInfo);
    }

    return (0, _commands.updatePureLink)(controller, node, offset, text, href, srcHref);
  }

  if (type === _actions.LINK_FOCUS_EDITOR) {
    return controller.command(_everCangjie.Commands.blur);
  }

  if (type === _actions.LINK_UNWRAP_PURE_LINK) {
    const {
      node,
      offset,
      href
    } = payload;
    return controller.command(_commands.unwrapPureLink, node, offset, href);
  }

  if (type === _actions.LINK_INJECT_CARDINFO) {
    const {
      node,
      cardInfo,
      range
    } = payload;
    return controller.command(_commands.injectCardInfo, node, cardInfo, range);
  }

  if (type === _actions.LINK_REMOVE_INJECTED_CARDINFO) {
    const {
      node
    } = payload;
    return controller.command(_commands.removeinjectedCardInfo, node);
  }

  if (type === _actions.LINK_COPY_LINK) {
    const {
      node
    } = payload;
    controller.command('copyLink', node);
    return controller;
  }

  if (type === _actions.LINK_CUT_LINK) {
    const {
      node
    } = payload;
    controller.command('copyLink', node);
    (0, _commands.removeLink)(controller, node);
    return controller;
  }

  if (type === _actions.LINK_SWITCH_DISPLAYTYPE) {
    // 切换卡片显示类型后，隐藏custom面板 to fix: https://work.aone.alibaba-inc.com/issue/44255401
    controller.run('onAction', (0, _everPluginClipboard.hideCustomPastePanel)());
    const {
      node,
      displayType
    } = payload;
    return controller.command(_commands.switchLinkDisplayType, node, displayType);
  }

  if (type === _actions.LINK_EDIT_LINK_CARD) {
    return controller.command('editLink');
  }

  if (type === _actions.LINK_HOVER_LINK_CARD) {
    return controller.command('hoverLink');
  }

  if (type === _actions.LINK_CLICK_PLACEHOLDER) {
    return controller.command('linkPlaceholder');
  }

  if (type === _actions.LINK_SWITCH_LINK_TO_CARD) {
    // 切换卡片显示类型后，隐藏custom面板 to fix: https://work.aone.alibaba-inc.com/issue/44255401
    controller.run('onAction', (0, _everPluginClipboard.hideCustomPastePanel)());
    const {
      node,
      text,
      href,
      cardInfo
    } = payload;

    if (cardInfo) {
      return (0, _commands.updateLinkCardInfo)(controller, node, text, href, cardInfo);
    }

    return (0, _commands.updateLink)(controller, node, text, href);
  }

  if (type === _actions.LINK_SAVE_LINK_CARD) {
    const {
      node,
      text,
      href
    } = payload;
    return controller.command('saveLinkCard', node, text, href);
  }

  if (type === _actions.LINK_SHOW_LINK_PASRE_PANEL) {
    const {
      text,
      getLinkInfo
    } = payload;
    return controller.command('showLinkPastePanel', text, getLinkInfo);
  }

  if (type === _actions.LINK_OPEN) {
    const {
      href
    } = payload;
    return controller.command('openLink', href);
  }

  return next();
}
//# sourceMappingURL=onAction.js.map