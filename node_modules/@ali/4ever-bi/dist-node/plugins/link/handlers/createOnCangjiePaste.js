"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnCangjiePaste;

var _everUtils = require("@ali/4ever-utils");

var _isUrl = _interopRequireDefault(require("is-url"));

var _everCangjie = require("@ali/4ever-cangjie");

var _utils = require("../utils");

var _actions = require("../actions");

/**
 * 粘贴面板会拦截回车事件，这里在需要在 wraplink 时，不走链接识别逻辑
 * @see https://aone.alibaba-inc.com/v2/project/897543/bug/41483477# 《在链接后按回车无反应》
 * @param controller
 * @param text
 * @param linkify
 * @param next
 * @returns
 */
function tryWrapLink(controller, text, linkify, next) {
  const {
    value
  } = controller;
  const {
    selection,
    document
  } = value;

  if (selection && selection.isCollapsed) {
    return next();
  }

  const fragment = document.getFragmentAtRange(_everCangjie.RangeSelection.create(selection));

  if (linkify.test(fragment.text)) {
    return next();
  }

  if ((0, _utils.hasLink)(value)) {
    controller.command('unwrapLink');
  }

  return controller.command(_everCangjie.Commands.wrapInline, {
    type: 'link',
    data: {
      href: text
    }
  }).command(_everCangjie.Commands.moveToEnd);
}

function createOnCangjiePaste(config, linkConfig) {
  const {
    protocolAllowList,
    getLinkInfo,
    enableCard
  } = linkConfig;
  const linkify = (0, _everUtils.createLinkify)(protocolAllowList);
  return function onCangjiePaste(event, controller, next) {
    const clipboardData = controller.query('getClipboardData', event);

    if (!clipboardData) {
      return next();
    }

    const receiveType = clipboardData.getFirstReceiveType();
    const html = clipboardData.getData('text/html');
    const text = clipboardData.getData('text/plain'); // BACKGROUND：引用块会将锚点地址 text/plain 中，方便发送到 IM 消息等时，其他用户能锚点定位回对应引用位置
    // 因此，当检测到为引用块时，不做识别为 URL 的处理

    const hasRefblock = clipboardData.hasData(_everCangjie.constants.MIME_TYPES.REFBLOCK);

    if (hasRefblock) {
      return next();
    } // HACK: 处理 <a data-title="..." href="...">href</a>，以支持钉钉文档拷贝链接粘贴需求
    // 需求背景：
    //   1. 粘贴到钉钉文档内，显示文档标题
    //   2. 粘贴到浏览器地址栏等，粘贴结果为链接


    if (receiveType !== 'text' && receiveType !== 'html') {
      return next();
    }

    const isTextUrl = (0, _isUrl.default)(text);

    if (!isTextUrl || html && html.indexOf('data-title') > -1) {
      return next();
    } // 粘贴纯文本 URL 时，若当前为 collased 选区，则判断是否在链接/图片 md 语法内
    // 若是，则直接插入文本，不再转为 link


    const {
      focus
    } = controller.value.selection;

    if (!html && isTextUrl && controller.value.selection.isCollapsed && focus.isTextPoint() && focus.offset > 0) {
      const focusText = controller.value.startText?.text || '';
      const insertedText = `${focusText.slice(0, focus.offset)}${text}${focusText.slice(focus.offset)}`;

      if (!(0, _everUtils.matchesLink)(linkify, insertedText)) {
        return controller.command(_everCangjie.Commands.insertText, text).command('showClipboard', _everCangjie.Selection.create({
          anchor: focus,
          focus: _everCangjie.TextPoint.create({
            key: focus.key,
            offset: focus.offset + text.length
          })
        }));
      }
    }

    return tryWrapLink(controller, text, linkify, () => {
      // 链接自动转卡片逻辑
      const {
        customPanel
      } = controller.value.data; // 文档链接不做转卡片处理，后续用 hetu 专门替代掉

      if (!customPanel && enableCard) {
        controller.run('onAction', (0, _actions.showLinkPastePanel)(text, getLinkInfo));
      }

      return next();
    });
  };
}
//# sourceMappingURL=createOnCangjiePaste.js.map