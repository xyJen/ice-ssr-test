"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnKeyDown;

var _isHotkey = require("is-hotkey");

var _everCangjie = require("@ali/4ever-cangjie");

var _commands = require("../commands");

var _utils = require("../utils");

var _isSelectionInLink = _interopRequireDefault(require("../utils/isSelectionInLink"));

var _everPluginClipboard = require("@ali/4ever-plugin-clipboard");

function createOnKeyDown(hotkey, placeholder) {
  const isLinkHotkey = (0, _isHotkey.isKeyHotkey)(hotkey);
  return function onKeyDown(event, controller, next) {
    const {
      value
    } = controller;
    const {
      startText,
      startInline,
      document,
      selection
    } = value;

    if (!selection) {
      return next();
    }

    const {
      isCollapsed
    } = selection;
    const start = selection.getStart(document);
    const tableSelection = controller.query('hasTableSelection');

    if (tableSelection) {
      return next();
    }

    if (isLinkHotkey(event)) {
      event.preventDefault();
      event.stopPropagation();
      return (0, _commands.wrapLink)(controller);
    }

    if (_everCangjie.hotkeys.isEnter(event) && (0, _isSelectionInLink.default)(value)) {
      controller.command(_everCangjie.Commands.moveToStartOfNextText);
      return next();
    }

    if (_everCangjie.hotkeys.isDeleteBackward(event) && (0, _isSelectionInLink.default)(value) && startText.text.length === 0) {
      // 删除 link 的同时也要销毁粘贴快捷面板
      controller.run('onAction', (0, _everPluginClipboard.hideCustomPastePanel)());
      return (0, _commands.removeLink)(controller, startInline);
    } // 向前、向后删除链接


    if (startText && isCollapsed) {
      let link = null;

      if (_everCangjie.hotkeys.isDeleteBackward(event) && start.isAtStartOfNode(startText)) {
        link = document.getPreviousNode(startText.key);
      } else if (_everCangjie.hotkeys.isDeleteForward(event) && start.isAtEndOfNode(startText)) {
        link = document.getNextNode(startText.key);
      }

      if (link && (0, _utils.isLink)(link)) {
        // 如果是链接卡片，直接删除
        let shouldDeleteLink = (0, _utils.isLinkCardNode)(link); // 判断是否是空链接

        if (!shouldDeleteLink && !link.data?.href && placeholder) {
          // 如果是链接占位符，直接删除
          const text = link.text;
          const isPlaceholder = text === placeholder;
          shouldDeleteLink = isPlaceholder;
        }

        if (shouldDeleteLink) {
          event.preventDefault();
          controller.run('onAction', (0, _everPluginClipboard.hideCustomPastePanel)());
          return (0, _commands.removeLink)(controller, link);
        }
      }
    }

    return next();
  };
}
//# sourceMappingURL=createOnKeyDown.js.map