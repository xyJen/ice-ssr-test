"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onSpace;

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../actions");

var _linkStore = require("../utils/linkStore");

var _everPluginLink = require("@ali/4ever-plugin-link");

function onSpace(event, controller, next) {
  const {
    value
  } = controller;
  const {
    anchorText,
    selection,
    document
  } = value;
  if (!selection || !anchorText || selection.isExpanded) return next();
  const {
    anchor
  } = selection.convertToTextPoints(document);
  const text = anchorText.text.slice(0, anchor.offset);
  const matches = text.match(_everPluginLink.END_WITH_MARKDOWN_LINK);
  if (!matches) return next();
  const [matchText, title, href] = matches; // 排除同时命中 ![]() 图片格式的情况

  if (text.length > matchText.length && text[text.length - matchText.length - 1] === '!') return next(); // [](abc) 类似这样的文本暂时不予处理，可能导致空 text 的 Link 元素

  if (!title && href) return next();
  event.preventDefault(); // 删除 markdown 文本

  controller.command(_everCangjie.Commands.moveAnchorBackward, matchText.length).command(_everCangjie.Commands.del).dispatch('createTriggerMarkdownAction', {
    mdType: 'link'
  }); // []() 时插入 placeholder

  if (!title && !href) {
    return controller.run('onAction', (0, _actions.wrapLink)());
  } // 插入链接 Inline


  controller.command(_everCangjie.Commands.insertInline, {
    type: 'link',
    nodes: [_everCangjie.Text.create(title)],
    data: {
      href: encodeURI(href)
    }
  }); // 打开链接编辑框

  const node = controller.value.anchorInline;

  if (node && (!title || !href)) {
    (0, _linkStore.setJustCreated)(node.key, true);
    return controller;
  } // 链接填写完整，光标移动到下一个 Text 开头


  return controller.command(_everCangjie.Commands.moveToStartOfNextText);
}
//# sourceMappingURL=onSpace.js.map