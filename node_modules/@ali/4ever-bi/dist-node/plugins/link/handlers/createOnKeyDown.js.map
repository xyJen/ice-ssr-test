{"version":3,"sources":["../../../../../src/plugins/link/handlers/createOnKeyDown.ts"],"names":["createOnKeyDown","hotkey","placeholder","isLinkHotkey","onKeyDown","event","controller","next","value","startText","startInline","document","selection","isCollapsed","start","getStart","tableSelection","query","preventDefault","stopPropagation","hotkeys","isEnter","command","Commands","moveToStartOfNextText","isDeleteBackward","text","length","run","link","isAtStartOfNode","getPreviousNode","key","isDeleteForward","isAtEndOfNode","getNextNode","shouldDeleteLink","data","href","isPlaceholder"],"mappings":"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","sourcesContent":["import { isKeyHotkey } from 'is-hotkey';\nimport { Plugin, hotkeys, Inline, Commands } from '@ali/4ever-cangjie';\nimport { wrapLink, removeLink } from '../commands';\nimport { isLink, isLinkCardNode } from '../utils';\nimport isSelectionInLink from '../utils/isSelectionInLink';\nimport { hideCustomPastePanel } from '@ali/4ever-plugin-clipboard';\n\nexport default function createOnKeyDown(hotkey: string, placeholder: string): Plugin['onKeyDown'] {\n  const isLinkHotkey = isKeyHotkey(hotkey);\n  return function onKeyDown(event, controller, next) {\n    const { value } = controller;\n    const { startText, startInline, document, selection } = value;\n\n    if (!selection) {\n      return next();\n    }\n\n    const { isCollapsed } = selection;\n    const start = selection.getStart(document);\n    const tableSelection = controller.query('hasTableSelection');\n    if (tableSelection) {\n      return next();\n    }\n\n    if (isLinkHotkey(event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      return wrapLink(controller);\n    }\n\n    if (hotkeys.isEnter(event) && isSelectionInLink(value)) {\n      controller.command(Commands.moveToStartOfNextText);\n      return next();\n    }\n\n    if (\n      hotkeys.isDeleteBackward(event) &&\n      isSelectionInLink(value) &&\n      startText!.text.length === 0\n    ) {\n      // 删除 link 的同时也要销毁粘贴快捷面板\n      controller.run('onAction', hideCustomPastePanel());\n      return removeLink(controller, startInline!);\n    }\n\n    // 向前、向后删除链接\n    if (startText && isCollapsed) {\n      let link: Inline | null = null;\n      if (hotkeys.isDeleteBackward(event) && start.isAtStartOfNode(startText)) {\n        link = document.getPreviousNode(startText.key) as Inline;\n      } else if (\n        hotkeys.isDeleteForward(event) &&\n        start.isAtEndOfNode(startText)\n      ) {\n        link = document.getNextNode(startText.key) as Inline;\n      }\n      if (link && isLink(link)) {\n        // 如果是链接卡片，直接删除\n        let shouldDeleteLink = isLinkCardNode(link!);\n        // 判断是否是空链接\n        if (!shouldDeleteLink && !link.data?.href && placeholder) {\n          // 如果是链接占位符，直接删除\n          const text = link.text;\n          const isPlaceholder = text === placeholder;\n          shouldDeleteLink = isPlaceholder;\n        }\n        if (shouldDeleteLink) {\n          event.preventDefault();\n          controller.run('onAction', hideCustomPastePanel());\n          return removeLink(controller, link!);\n        }\n      }\n\n    }\n\n    return next();\n  };\n}\n"],"file":"createOnKeyDown.js"}