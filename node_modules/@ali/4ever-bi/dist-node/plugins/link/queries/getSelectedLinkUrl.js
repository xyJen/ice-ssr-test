"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSelectedLinkUrl = getSelectedLinkUrl;
exports.shouldRenderContextMenu = shouldRenderContextMenu;

var _everMo = require("@ali/4ever-mo");

var _everCangjie = require("@ali/4ever-cangjie");

function getSelectedLinkUrl(controller) {
  return tryGetSelectedTextLink(controller) || tryGetSelectedPureLink(controller) || '';
}

function shouldRenderContextMenu(controller) {
  return Boolean(getSelectedLinkUrl(controller));
}

function tryGetSelectedTextLink(controller) {
  const {
    value
  } = controller;
  const {
    document,
    selection
  } = value;
  const startKey = selection.getStart(document).key;

  if (!startKey) {
    return false;
  }

  const linkNode = document.getClosest(startKey, node => _everMo.Link.isLink(node) && node.data?.cardInfo?.displayType !== 'card' && node.data?.href);

  if (linkNode) {
    return linkNode.data.href;
  }

  return false;
}

function tryGetSelectedPureLink(controller) {
  const {
    value,
    view
  } = controller;
  const {
    startBlock,
    selection
  } = value;

  if (!startBlock) {
    return false;
  }

  const linkMark = getSelectedLinkMark(selection, view);

  if (linkMark) {
    return linkMark.data.href;
  }

  return false;
}

function getSelectedLinkMark(selection, view) {
  const {
    focus,
    anchor
  } = selection;

  if (focus.isTextPoint()) {
    const linkMark = getLinkMark(focus, view);

    if (linkMark) {
      return linkMark;
    }
  }

  if (anchor.isTextPoint()) {
    const linkMark = getLinkMark(anchor, view);

    if (linkMark) {
      return linkMark;
    }
  }

  return null;
}

function getLinkMark(textPoint, view) {
  const node = view.getNode(textPoint.key);

  if (_everCangjie.Text.isText(node)) {
    for (const leaf of node.leaves) {
      const linkMark = leaf.marks.find(mark => mark.type === 'link' && typeof mark.data?.offsetInNode === 'number' && typeof mark.data?.href === 'string' && mark.data.offsetInNode <= textPoint.offset && mark.data.offsetInNode + mark.data.href.length >= textPoint.offset);

      if (linkMark && !leaf.marks.some(({
        type
      }) => type === 'unlink')) {
        return linkMark;
      }
    }
  }

  return null;
}
//# sourceMappingURL=getSelectedLinkUrl.js.map