"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDisableNewLineGuide = isDisableNewLineGuide;
exports.findPrevSubjectIndex = findPrevSubjectIndex;
exports.findNextSubjectIndex = findNextSubjectIndex;
exports.getSubjectBorderColor = getSubjectBorderColor;
exports.hasSubjectBeenSelected = hasSubjectBeenSelected;

var _utils = require("./utils");

var _everMo = require("@ali/4ever-mo");

var _constants = require("./constants");

const {
  Heading1
} = _everMo.Heading;

function isNextNewSubject(node) {
  if (node) {
    return (0, _utils.isSubjectHeading)(node);
  }

  return true;
}
/**
 * 判断节点是否禁止 newLineGuide
 * @param node
 * @param document
 * @returns
 */


function isDisableNewLineGuide(node, document) {
  if ((0, _utils.isNormalParagraph)(node) && (0, _utils.isEmptyNode)(node)) {
    const prev1 = document.getPreviousBlock(node.key);
    const next = document.getNextBlock(node.key); // 如果上一个节点不存在

    if (!prev1) {
      return false;
    } // 如果上一个节点是闪电回顾标题


    if (Heading1.isHeading1(prev1) && prev1.data.subjectPr) {
      const {
        name
      } = prev1.data.subjectPr;
      return (name === 'review' || name === 'topic' || name === 'conclusion') && isNextNewSubject(next);
    }
  }

  return false;
}
/**
 * 查找上一个可插入议题的坐标
 * @param value
 * @param from 查询开始节点，若不指定，则默认为光标 focus 节点
 * @returns
 */


function findPrevSubjectIndex(value, from) {
  const {
    document,
    selection
  } = value;
  const {
    focus
  } = selection;
  const path = from ? document.getPath(from.key) : document.getPath(focus.key);

  if (!path) {
    return 0;
  } // 从当前聚焦段落开始查找，因为 while 内默认会 -1，此处坐标定位在下一个位置


  let i = path[0] + 1;

  while (i > 0) {
    i -= 1;
    const node = document.nodes[i];

    if ((0, _utils.isSubjectHeading)(node)) {
      break;
    }
  }

  return i;
}
/**
 * 查找下一个可插入议题的坐标
 * @param value 文档数据
 * @param from 查询开始节点，若不指定，则默认为光标 focus 节点
 * @returns
 */


function findNextSubjectIndex(value, from) {
  const {
    document,
    selection
  } = value;
  const {
    focus
  } = selection;
  const path = from ? document.getPath(from.key) : document.getPath(focus.key);

  if (!path) {
    return document.nodes.length;
  } // 从当前聚焦段落的下一个兄弟开始查找


  let i = path[0] + 1; // 若光标前没有议题

  if (!document.nodes.slice(0, i).some(node => Heading1.isHeading1(node) && node.data.subjectPr)) {
    return i;
  }

  for (; i < document.nodes.length; i++) {
    const block = document.nodes[i]; // 找到第一个议题中断

    if (Heading1.isHeading1(block) && block.data.subjectPr) {
      break;
    }
  }

  return i;
}
/**
 * 获取议题颜色 (Designed By @狗毛)
 * @param name 议题名称
 * @returns
 */


function getSubjectBorderColor(name) {
  if (name === 'review') {
    return '#F4C800';
  }

  if (name === 'topic') {
    return '#0089FF';
  }

  if (name === 'conclusion') {
    return '#00B042';
  }

  return '#0089FF';
}
/**
 * 是否有议题被选中
 * @param controller
 * @returns
 */


function hasSubjectBeenSelected(controller) {
  const {
    data
  } = controller.value;

  if (_constants.SELECTED_SUBJECT_KEY in data) {
    return true;
  }

  return false;
}
//# sourceMappingURL=helpers.js.map