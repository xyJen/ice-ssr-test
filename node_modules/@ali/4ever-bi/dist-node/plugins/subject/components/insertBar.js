"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _weDesign = require("@ali/we-design");

var _everMo = require("@ali/4ever-mo");

var _everCangjie = require("@ali/4ever-cangjie");

var _actions = require("../actions");

var _utils = require("../utils");

const _createElement = /*#__PURE__*/React.createElement;

const plus = /*#__PURE__*/_createElement("svg", {
  width: "24px",
  height: "18px",
  viewBox: "0 0 24 18",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink"
}, /*#__PURE__*/_createElement("g", {
  id: "Page-1",
  stroke: "none",
  strokeWidth: "1",
  fill: "none",
  fillRule: "evenodd"
}, /*#__PURE__*/_createElement("g", {
  id: "Frame-2084",
  transform: "translate(-53.000000, -321.000000)"
}, /*#__PURE__*/_createElement("g", {
  id: "Group-2070",
  transform: "translate(53.000000, 321.000000)"
}, /*#__PURE__*/_createElement("path", {
  d: "M9,18 C13.9705627,18 18,13.9705627 18,9 C18,4.02943725 13.9705627,0 9,0 C4.02943725,0 0,4.02943725 0,9 C0,13.9705627 4.02943725,18 9,18 Z",
  id: "Ellipse-128",
  fill: "currentColor"
}), /*#__PURE__*/_createElement("path", {
  d: "M19.9995422,6.99996066 C21.3328756,7.99996066 22.6662089,8.49996074 23.9995422,8.4999609 L23.9995422,9.4999609 C22.9995422,9.4999609 21.4995422,10.0000305 19.9995422,11.0000305 C18.9995422,11.6666972 17.6662089,12.8839067 15.9995422,14.651659 L15.9995422,3.34402466 C17.3328756,4.78131533 18.6662089,5.99996066 19.9995422,6.99996066 Z",
  id: "Polygon-4",
  fill: "currentColor",
  fillRule: "nonzero"
}), /*#__PURE__*/_createElement("line", {
  x1: "4",
  y1: "9",
  x2: "14",
  y2: "9",
  id: "Vector",
  stroke: "#FFFFFF",
  strokeLinecap: "round",
  strokeLinejoin: "round",
  strokeDasharray: "0,0"
}), /*#__PURE__*/_createElement("line", {
  x1: "9",
  y1: "4",
  x2: "9",
  y2: "14",
  id: "Vector",
  stroke: "#FFFFFF",
  strokeLinecap: "round",
  strokeLinejoin: "round",
  strokeDasharray: "0,0"
})))));

const popIn = /*#__PURE__*/(0, _styledComponents.keyframes)(["0%{transform:scale(0.4);}80%{transform:scale(1.1);}100%{transform:scale(1);}"]);

const IconBox = /*#__PURE__*/_styledComponents.default.span(["position:absolute;display:inline-block;margin:auto;left:-8px;top:0;bottom:0;height:18px;width:24px;z-index:1;cursor:pointer;transition:all 0.2s;"]);

const ShadowBox = /*#__PURE__*/_styledComponents.default.span(["position:absolute;width:18px;height:18px;left:0;top:0;border-radius:9px;transition:all 0.2s;"]);

const HorizontalLine = /*#__PURE__*/_styledComponents.default.span(["position:absolute;top:0;bottom:0;left:0;right:0;margin:auto;height:2px;background-color:#39A3FF;transition:all 0.2s;"]);

const HorizontalBox = /*#__PURE__*/_styledComponents.default.div(["position:absolute;width:100%;height:32px;margin:auto;top:0;bottom:0;opacity:0;transition:all 0.2s;color:#39A3FF;cursor:default;", ":hover{color:#0089FF;& ~ ", "{background-color:#0089FF;}", ",& ~ ", "{box-shadow:0px 1px 4px 0px rgba(0,137,255,0.5);}}&:hover{opacity:1;transition-delay:0.2s;}"], IconBox, HorizontalLine, ShadowBox, HorizontalLine);

const InsertBarBox = /*#__PURE__*/_styledComponents.default.div(["position:absolute;width:100%;height:40px;left:0;"]);

const tooltipStyle = {
  background: 'rgba(30, 30, 30, 0.94)',
  border: '1px solid rgba(126, 134, 142, 0.16)',
  fontFamily: 'Helvetica',
  fontSize: 12,
  color: '#EEF2F8',
  letterSpacing: 0,
  padding: 8
};

var _ref = /*#__PURE__*/_createElement(ShadowBox, null);

var _ref2 = /*#__PURE__*/_createElement(HorizontalLine, null);

const InsertBar = props => {
  const {
    style,
    className,
    node,
    direction = 'after',
    controller,
    config
  } = props;
  const {
    locale = {}
  } = config;
  const {
    insertTopicTip
  } = locale;
  const handleClick = React.useCallback(() => {
    const subjectId = (0, _utils.uniqueId)(); // 插入议题节点

    controller.run('onAction', (0, _actions.insertSubject)({
      node,
      direction,
      properties: {
        id: subjectId,
        // 目前限定只能插入议题
        name: 'topic'
      }
    }));
    const {
      selection
    } = controller.value; // 插入空段落

    controller.run('onAction', (0, _actions.insertBlock)({
      blockProps: _everMo.Paragraph.TYPE
    })); // 将光标移动至插入议题时的状态（移动至议题标题处）

    controller.run('onCangjieSelect', (0, _everCangjie.CangjieSelectEvent)({
      selection,
      trigger: 'insertSubject'
    })); // 高亮议题区块

    controller.run('onAction', (0, _actions.highlightSubject)({
      subjectId,
      highlight: true
    }));
  }, [controller, direction, node]);
  return /*#__PURE__*/_createElement(InsertBarBox, {
    style: style,
    className: className
  }, /*#__PURE__*/_createElement(HorizontalBox, null, /*#__PURE__*/_createElement(_weDesign.Tooltip, {
    title: insertTopicTip,
    overlayStyle: tooltipStyle,
    placement: "top"
  }, /*#__PURE__*/_createElement(IconBox, {
    onClick: handleClick
  }, plus, _ref)), _ref2));
};

InsertBar.displayName = 'InsertBar';
var _default = InsertBar;
exports.default = _default;
//# sourceMappingURL=insertBar.js.map