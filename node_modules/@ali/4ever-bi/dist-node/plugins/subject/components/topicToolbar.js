"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _finishButton = _interopRequireDefault(require("./finishButton"));

var _everCangjie = require("@ali/4ever-cangjie");

var _weDesign = require("@ali/we-design");

var _weIcon = require("@ali/we-icon");

var _actions = require("../actions");

var _feedback = _interopRequireDefault(require("./feedback"));

const _createElement = /*#__PURE__*/React.createElement;

const ToolbarBox = /*#__PURE__*/_styledComponents.default.div(["display:flex;align-items:center;height:100%;"]);

const FinishedBox = /*#__PURE__*/_styledComponents.default.div(["font-size:12px;position:relative;display:flex;align-items:center;justify-content:center;height:26px;cursor:pointer;transition:all 0.4s;margin-left:2px;:hover{background:rgba(126,134,142,0.12);border-radius:4px;}"]);

const FeedbackBox = /*#__PURE__*/(0, _styledComponents.default)(_feedback.default)(["position:absolute;height:30px;top:-30px;right:-12px;border:0.5px solid rgba(17,31,44,0.08);padding:6px 8px;"]);

const FeedbackTooltipBox = /*#__PURE__*/_styledComponents.default.div([""]);

const AtContainer = /*#__PURE__*/_styledComponents.default.span(["color:rgba(0,137,255,1);font-weight:bold;"]);

const tooltipStyle = {
  display: 'flex',
  alignItems: 'center',
  padding: '4px 8px',
  height: 28,
  background: 'rgba(30, 30, 30, 0.94)',
  border: '1px solid rgba(126, 134, 142, 0.16)',
  borderRadius: 4,
  fontSize: 12
};

const NotifySuccessIcon = /*#__PURE__*/_createElement(_weIcon.SelectedNormalNormal, {
  style: {
    color: '#00B042',
    marginRight: 3
  }
});

const NotifyFailedIcon = /*#__PURE__*/_createElement(_weIcon.CloseNormal, {
  style: {
    color: '#ff5219',
    marginRight: 3
  }
});

const TopicToolbar = props => {
  const {
    node,
    controller,
    config,
    displayFinishButton
  } = props;
  const {
    subjectPr = {}
  } = node.data;
  const {
    finished = false
  } = subjectPr;
  const {
    locale = {},
    onNotifyFinishTopic,
    creator,
    user
  } = config;
  const {
    finishButtonAction,
    finishButtonDone
  } = locale;
  const {
    cancelFinishTopicTip,
    notifyFinishTip,
    notifyFinishSuccess,
    notifyFinishFailed,
    mentionTip
  } = locale;
  const isSameUser = creator?.uid === user?.uid;
  const [finishState, setFinishState] = React.useState({
    // 当前完成是否新鲜
    fresh: false,
    // 通知是否成功
    success: false,
    // 是否已经通知
    notified: false
  });
  const {
    fresh,
    notified,
    success
  } = finishState;
  const handleMentionClick = React.useCallback(() => {
    const {
      startBlock
    } = controller.value;

    if (startBlock?.key !== node.key) {
      controller.command(_everCangjie.Commands.moveToEndOfNode, node);
    }

    controller.dispatch('activeMention');
  }, [controller, node]);
  /**
   * 点击通知议题反馈
   */

  const handleNotifyClick = React.useCallback(() => {
    if (typeof onNotifyFinishTopic === 'function') {
      onNotifyFinishTopic({
        node,
        title: node.text
      }).then(() => {
        setFinishState({
          fresh: true,
          notified: true,
          success: true
        });
      }).catch(() => {
        setFinishState({
          fresh: true,
          notified: true,
          success: false
        });
      });
    } else {
      setFinishState({
        fresh: false,
        notified: false,
        success: false
      });
    }
  }, [node, onNotifyFinishTopic]);
  /**
   * 点击完成议题填报
   */

  const handleFinishClick = React.useCallback(() => {
    controller.run('onAction', (0, _actions.toggleFinished)({
      node,
      finished: !finished
    }));

    if (!finished) {
      setFinishState({
        fresh: !isSameUser,
        notified: false,
        success: false
      });

      if (!isSameUser) {
        handleNotifyClick();
      }
    } else {
      setFinishState(prevState => {
        return { ...prevState,
          fresh: !finished
        };
      });
    }
  }, [controller, finished, isSameUser, node, handleNotifyClick]);
  /**
   * 议题完成时，弹出发送 Tip，展示 7s
   */

  React.useEffect(() => {
    if (!fresh) {
      return undefined;
    }

    const timer = window.setTimeout(() => {
      setFinishState(prevState => {
        return { ...prevState,
          fresh: false
        };
      });
    }, 7000);
    return () => {
      window.clearTimeout(timer);
    };
  }, [fresh]);

  const feedbackTip = /*#__PURE__*/_createElement(React.Fragment, null, success ? NotifySuccessIcon : NotifyFailedIcon, success ? notifyFinishSuccess : notifyFinishFailed); // 通知完成之前，即使 finish 也显示为未完成的 tooltip，避免文案突然闪变


  const finishTip = finished && (notified || isSameUser) ? /*#__PURE__*/_createElement(FeedbackTooltipBox, null, cancelFinishTopicTip) : /*#__PURE__*/_createElement(FeedbackTooltipBox, null, notifyFinishTip, creator?.nick ? /*#__PURE__*/_createElement(AtContainer, null, ` @${creator.nick} `) : '');
  return /*#__PURE__*/_createElement(ToolbarBox, null, !_everCangjie.environment.IS_MOBILE && displayFinishButton && /*#__PURE__*/_createElement(_weDesign.Tooltip, {
    disabled: fresh,
    title: finishTip,
    placement: "top",
    overlayStyle: tooltipStyle
  }, /*#__PURE__*/_createElement(FinishedBox, {
    onClick: handleFinishClick
  }, /*#__PURE__*/_createElement(_finishButton.default, {
    finished: finished,
    text: finished ? finishButtonDone : finishButtonAction
  }))), /*#__PURE__*/_createElement(FeedbackBox, {
    visible: fresh && notified
  }, feedbackTip));
};

TopicToolbar.displayName = 'TopicToolbar';
var _default = TopicToolbar;
exports.default = _default;
//# sourceMappingURL=topicToolbar.js.map