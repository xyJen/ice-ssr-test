"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SUBJECT_PADDING_LEFT = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _everCangjie = require("@ali/4ever-cangjie");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _tinycolor = require("@ctrl/tinycolor");

var _content = _interopRequireDefault(require("./content"));

var _everBamboo = require("@ali/4ever-bamboo");

var _utils = require("../utils");

var _topicToolbar = _interopRequireDefault(require("./topicToolbar"));

var _insertBar = _interopRequireDefault(require("./insertBar"));

var _helpers = require("../helpers");

var _mentionButton = _interopRequireDefault(require("./mentionButton"));

var _useHighlight = _interopRequireDefault(require("../hooks/useHighlight"));

var _queries = require("../queries");

var _classnames = _interopRequireDefault(require("classnames"));

const _createElement = /*#__PURE__*/React.createElement;
const {
  isSelectionInFoldArea
} = _everBamboo.GroupFactory;
const {
  Title,
  actions
} = _everBamboo.HeadingGroupPlugin;
const {
  components
} = _everBamboo.SubjectPlugin;
const {
  InlinePlaceholder,
  InnerCardWrapperForMention,
  Placeholder
} = components;
const {
  toggleFold
} = actions;
const SUBJECT_PADDING_LEFT = 19;
exports.SUBJECT_PADDING_LEFT = SUBJECT_PADDING_LEFT;

const SubjectBox = /*#__PURE__*/_styledComponents.default.div(["position:relative;padding-left:", "px;margin:40px 0;& [data-name=\"group-fold-btn\"]{left:-18px;}&.selected{background-color:rgba(17,31,44,0.08);}"], SUBJECT_PADDING_LEFT);

const ContentBox = /*#__PURE__*/(0, _styledComponents.default)(_content.default)(["position:relative;& > [data-type='heading-1-group'] > [data-name='heading-group-title']{padding-right:", "px;}& .draggable-highlight.shadow-highlight{border-radius:0;box-shadow:none;}"], props => props.paddingRight || 0);

const BorderBar = /*#__PURE__*/_styledComponents.default.div(["position:absolute;left:0;top:0;width:3px;border-radius:1.5px;height:100%;background:", ";transition:all 0.2s ease-in-out;"], props => props.color);

const HighlightBox = /*#__PURE__*/_styledComponents.default.div(["position:absolute;left:0;right:0;top:0;bottom:0;background-color:", ";@keyframes highlight-in{from{}to{background-color:transparent;}}animation-fill-mode:forwards;animation-name:highlight-in;animation-duration:2s;"], props => props.color);

const TitleContent = /*#__PURE__*/_styledComponents.default.div(["& h1{font-size:20px;}"]);

const TitleBox = /*#__PURE__*/(0, _styledComponents.default)(Title)(["padding-right:", "px;& .data-comment-bubbles{left:", "px;}"], props => props.paddingRight, props => props.paddingRight);

const ToolBox = /*#__PURE__*/_styledComponents.default.div(["position:absolute;height:28px;right:0;top:0;display:flex;align-items:center;justify-content:flex-end;"]);

/**
 * 议题区块
 * @param props
 * @returns
 */
const Subject = props => {
  const {
    controller,
    node,
    attributes,
    isSelected,
    config,
    children
  } = props;
  const fold = (0, _everCangjie.useUserData)(node, 'fold') || false;
  const {
    subjectPr = {}
  } = node.data;
  const {
    review: reviewConfig
  } = config;
  const {
    renderDingIcon: DingIcon,
    renderMeetingClock: MeetingClock,
    renderReviewPlaceholder: ReviewPlaceholder
  } = reviewConfig || {};
  const {
    id = '',
    name = 'topic'
  } = subjectPr;
  const first = node.nodes[0];
  const topicTitlePlaceholderBefore = config?.locale?.topicTitlePlaceholderBefore;
  const topicTitlePlaceholderAfter = config?.locale?.topicTitlePlaceholderAfter;
  const [highlight, setHighlight] = (0, _useHighlight.default)(controller, id);
  const foldRef = React.useRef(fold);
  const toolRef = React.useRef(null);
  const [toolWidth, setToolWidth] = React.useState(0);
  const {
    startBlock,
    endBlock
  } = controller.value;
  const initFocused = !!startBlock && startBlock.key === first.key && !!endBlock && endBlock.key === first.key;
  const [focused, setFocused] = React.useState(initFocused);
  const {
    document
  } = controller.value;
  const displayFinishButton = !(name === 'topic' && (0, _utils.isEmptyNode)(first)) && focused; // 查询当前议题是否是第一个议题
  // NOTE: 这个写法感觉还是存在查询性能问题，但是目前没有其他比较好的解法

  const isFirst = React.useMemo(() => {
    const path = document.getPath(first.key);

    if (path) {
      const [index] = path;

      for (let i = index - 1; i >= 0; i--) {
        const $node = document.nodes[i];

        if ((0, _utils.isSubjectHeading)($node)) {
          return false;
        }
      }

      return true;
    }

    return false;
  }, [document, first]);
  const setFocusedValue = React.useCallback(() => {
    const {
      startBlock: newStartBlock,
      endBlock: newEndBlock
    } = controller.value;

    if (newStartBlock && newStartBlock.key === first.key && newEndBlock && newEndBlock.key === first.key) {
      if (focused === false) {
        setFocused(true);
      }
    } else if (focused === true) {
      setFocused(false);
    }
  }, [controller, first, focused]);
  (0, _everCangjie.useSelectionData)(controller.selectionData$, null, setFocusedValue, []);
  (0, _everCangjie.useSelectingHots)(controller, setFocusedValue);
  React.useEffect(() => {
    setFocusedValue();
  }, [startBlock, endBlock, setFocusedValue]);
  const handleFoldChange = React.useCallback(_fold => {
    controller.run('onAction', toggleFold({
      node: first,
      fold: _fold
    })); // 折叠标题后，将选区移动至标题行首，避免页面聚焦造成的抖动

    controller.command(_everCangjie.Commands.moveToStartOfNode, first);
  }, [controller, first]);
  const color = React.useMemo(() => (0, _helpers.getSubjectBorderColor)(name), [name]);
  const refreshToolWidth = React.useCallback(() => {
    const tool = toolRef.current;

    if (tool && tool.offsetWidth !== toolWidth) {
      setToolWidth(tool.offsetWidth);
    }
  }, [toolWidth]); // fix: https://aone.alibaba-inc.com/v2/project/897543/bug/36243039

  React.useEffect(() => {
    if (!foldRef.current && fold && isSelected && isSelectionInFoldArea(controller, first)) {
      controller.command(_everCangjie.Commands.moveToEndOfNode, first);
    }

    foldRef.current = fold;
  }, [controller, first, fold, isSelected]);
  React.useLayoutEffect(() => {
    refreshToolWidth();
  }, [displayFinishButton]);

  const displayTitlePlaceholder = item => {
    // 类型是议题 && 非预览模式 && 没有标题 && 有 placeholder 文字配置才展示
    if (name === 'topic' && (0, _utils.isEmptyNode)(item) && topicTitlePlaceholderBefore && topicTitlePlaceholderAfter) {
      return true;
    }

    return false;
  };

  const handleMentionClick = React.useCallback(() => {
    const {
      startBlock
    } = controller.value;

    if (startBlock?.key !== first.key) {
      controller.command(_everCangjie.Commands.moveToEndOfNode, first);
    }

    controller.dispatch('activeMention');
  }, [controller, first]);

  var _ref = /*#__PURE__*/_createElement(InlinePlaceholder, null, topicTitlePlaceholderBefore, ' @ ', topicTitlePlaceholderAfter);

  var _ref2 = /*#__PURE__*/_createElement(InlinePlaceholder, null, topicTitlePlaceholderBefore, /*#__PURE__*/_createElement(InnerCardWrapperForMention, null, /*#__PURE__*/_createElement(_mentionButton.default, {
    onClick: handleMentionClick
  })), topicTitlePlaceholderAfter);

  const renderTitlePlaceholder = () => {
    if (name === 'topic') {
      if (_everCangjie.environment.IS_MOBILE) {
        return _ref;
      }

      return _ref2;
    }

    return '';
  };

  var _ref3 = /*#__PURE__*/_createElement(DingIcon, {
    node: node
  });

  var _ref4 = /*#__PURE__*/_createElement(ReviewPlaceholder, {
    node: node,
    type: "iconOnly"
  });

  var _ref5 = /*#__PURE__*/_createElement(MeetingClock, {
    node: node,
    refreshToolWidth: refreshToolWidth
  });

  const renderTitleToolbar = (displayFinishButton = true) => {
    const toolbars = [];

    if (name === 'review' && DingIcon) {
      toolbars.push(_ref3);
    }

    if (name === 'review' && ReviewPlaceholder) {
      toolbars.push(_ref4);
    }

    if (name === 'topic') {
      MeetingClock && toolbars.push(_ref5);
      toolbars.push( /*#__PURE__*/_createElement(_topicToolbar.default, {
        displayFinishButton: displayFinishButton,
        node: first,
        controller: controller,
        config: config
      }));
    }

    return toolbars;
  }; // 切割议题的标题和内容块


  let titleNode;
  let titleElement;
  let contentElements;

  if (Array.isArray(children) && children.length >= 1) {
    titleNode = node.nodes[0];
    titleElement = children[0];
    contentElements = children.slice(1);
  } else {
    return /*#__PURE__*/_createElement(React.Fragment, null, children);
  }

  const className = (0, _classnames.default)({
    selected: controller.query(_queries.isSubjectSelected, first)
  });
  return /*#__PURE__*/_createElement(SubjectBox, (0, _extends2.default)({}, attributes, {
    className: className,
    key: node.key,
    id: id,
    "data-block-uuid": id,
    paddingRight: toolWidth,
    "data-cangjie-group-block": true,
    "data-name": "subject-group",
    "data-subject-name": name,
    "data-type": node.type,
    "data-foldable": true
  }), !_everCangjie.environment.IS_MOBILE && isFirst && /*#__PURE__*/_createElement(_insertBar.default, {
    style: {
      top: -40
    },
    config: config,
    node: first,
    direction: "before",
    controller: controller
  }), /*#__PURE__*/_createElement(BorderBar, {
    color: color
  }), highlight && /*#__PURE__*/_createElement(HighlightBox, {
    color: new _tinycolor.TinyColor(color).setAlpha(0.3).toRgbString(),
    onAnimationEnd: () => setHighlight(false)
  }), /*#__PURE__*/_createElement(TitleBox, {
    dataName: "subject-group-title",
    fold: fold,
    onChange: handleFoldChange,
    paddingRight: toolWidth
  }, /*#__PURE__*/_createElement(TitleContent, {
    "data-name": "subject-group-title-content"
  }, /*#__PURE__*/_createElement(Placeholder, {
    controller: controller,
    node: titleNode,
    display: displayTitlePlaceholder,
    placeholder: renderTitlePlaceholder()
  }, titleElement)), /*#__PURE__*/_createElement(ToolBox, {
    ref: toolRef
  }, renderTitleToolbar(displayFinishButton))), /*#__PURE__*/_createElement(ContentBox, {
    config: config,
    dataName: "subject-group-content",
    controller: controller,
    node: node,
    fold: fold,
    paddingRight: toolWidth
  }, contentElements), !_everCangjie.environment.IS_MOBILE && /*#__PURE__*/_createElement(_insertBar.default, {
    style: {
      bottom: -40
    },
    config: config,
    node: first,
    direction: "after",
    controller: controller
  }));
};

Subject.displayName = 'Subject';
var _default = Subject;
exports.default = _default;
//# sourceMappingURL=subject.js.map