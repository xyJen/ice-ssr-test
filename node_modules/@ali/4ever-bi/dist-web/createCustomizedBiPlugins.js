import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/**
 * @packageDocumentation
 * @module Editor(Bi)
 */
import { createSchema } from '@ali/4ever-cangjie';
import { biFactory as exception } from '@ali/4ever-plugin-exception';
import { sortPlugins } from '@ali/4ever-utils';
import autoClose from "./plugins/autoClose";
import { createUnknownCardPlugin, createUnknownTagPlugin } from '@ali/4ever-factory';
import { biFactory as basic } from '@ali/4ever-plugin-basic';
import clipboard from "./plugins/clipboard";
import history from "./plugins/history";
import { biFactory as paragraph } from '@ali/4ever-plugin-paragraph';
import { biFactory as container } from '@ali/4ever-plugin-container';
import { biFactory as snippets } from '@ali/4ever-plugin-snippets';
import quickInsert from "./plugins/quickInsert";

/**
 * 创建自定义插件。传入自定义的插件 Map，返回一个插件创建函数（createBiPlugins）。
 * 传入内容格式：{ PluginName: PluginFactory }
 */
export default function createCustomizedBiPlugins(plugins) {
  var paragraphPlugin = plugins.paragraph || paragraph;

  var _plugins$unknownCard = plugins.unknownCard,
      unknownCard = _plugins$unknownCard === void 0 ? createUnknownCardPlugin : _plugins$unknownCard,
      _plugins$unknownTag = plugins.unknownTag,
      unknownTag = _plugins$unknownTag === void 0 ? createUnknownTagPlugin : _plugins$unknownTag,
      rest = _objectWithoutPropertiesLoose(plugins, ["unknownCard", "unknownTag"]);

  var allPlugins = _extends({
    exception: exception,
    // 必须在 callout、code 等配置了 snippet 的插件之前
    snippets: snippets
  }, rest, {
    // unknown 卡片/标签必须放在最后做兜底显示
    container: container,
    unknownCard: unknownCard,
    unknownTag: unknownTag,
    autoClose: autoClose,
    clipboard: clipboard,
    // 默认需要 clipboard 插件
    history: history,
    paragraph: paragraphPlugin,
    quickInsert: quickInsert,
    basic: basic // 必须放在最后，以便其他插件覆盖行为

  });

  return function createBiPlugins(configs) {
    if (configs === void 0) {
      configs = {};
    }

    var array = [];
    var hash = {}; // @ts-ignore

    sortPlugins(allPlugins).forEach(function (_ref) {
      var key = _ref.key,
          factory = _ref.factory;
      var plugin = factory(configs, hash); // TODO 在 provider 中遍历通过 models 识别节点，unknown 节点报 warning
      // warning(
      //   checkModels(plugin),
      //
      //   'You should configure models field when register a plugin',
      // );

      array.push(plugin);
      hash[key] = plugin;
    });
    var schema = createSchema(array);
    array.push({
      schema: schema
    });
    return {
      array: array,
      hash: hash,
      lang: configs.lang || 'zh-CN'
    };
  };
}
//# sourceMappingURL=createCustomizedBiPlugins.js.map