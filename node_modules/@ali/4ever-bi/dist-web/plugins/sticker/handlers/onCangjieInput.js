import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { getEmojiData } from '@ali/4ever-plugin-sticker';
import getMatchedEmojiQuery from "../utils/getMatchedEmojiQuery";
import { insertMarkdownEmoji } from "../actions";
var emojiMap = null;

function getEmojiMap() {
  return _getEmojiMap.apply(this, arguments);
}

function _getEmojiMap() {
  _getEmojiMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (emojiMap) {
              _context.next = 4;
              break;
            }

            _context.next = 3;
            return getEmojiData();

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
            return _context.abrupt("return", emojiMap);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getEmojiMap.apply(this, arguments);
}

var onCangjieInput = function onCangjieInput(event, controller, next) {
  if (event.detail.data !== ' ') return next();
  return onSpace(event, controller, next);
};

export default onCangjieInput;
/**
 * 通过::+space触发emoji的逻辑
 * @param event
 * @param controller
 * @param next
 */

function onSpace(_x, _x2, _x3) {
  return _onSpace.apply(this, arguments);
}

function _onSpace() {
  _onSpace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event, controller, next) {
    var _controller$value, selection, document, startText, endPoint, text, queryInfo, path, query, offsetWithDelimiter, start, end, emojiMap, emoji, key;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _controller$value = controller.value, selection = _controller$value.selection, document = _controller$value.document, startText = _controller$value.startText;

            if (!(selection.isExpanded || !startText || controller.value.anchorInline)) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", next());

          case 3:
            endPoint = selection.convertToTextPoints(document).end;
            text = startText.text.slice(0, endPoint.offset);

            if (text) {
              _context2.next = 7;
              break;
            }

            return _context2.abrupt("return", next());

          case 7:
            queryInfo = getMatchedEmojiQuery(text, true);
            path = document.getPath(startText.key);

            if (!(!queryInfo || !path)) {
              _context2.next = 11;
              break;
            }

            return _context2.abrupt("return", next());

          case 11:
            event.preventDefault();
            query = queryInfo.query, offsetWithDelimiter = queryInfo.offsetWithDelimiter;
            start = offsetWithDelimiter.start, end = offsetWithDelimiter.end;
            _context2.next = 16;
            return getEmojiMap();

          case 16:
            emojiMap = _context2.sent;
            emoji = emojiMap[query];

            if (emoji) {
              _context2.next = 20;
              break;
            }

            return _context2.abrupt("return", next());

          case 20:
            key = startText.key;
            controller.run('onAction', insertMarkdownEmoji({
              key: key,
              start: start,
              end: end,
              emoji: emoji
            }));

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _onSpace.apply(this, arguments);
}
//# sourceMappingURL=onCangjieInput.js.map