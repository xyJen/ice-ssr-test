import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import Styled from 'styled-components';
import { Commands } from '@ali/4ever-cangjie';
import { OldBambooPlugin } from '@ali/4ever-plugin-sticker';
import { fuzzySearch } from '@ali/4ever-utils';
var EmojiSpan = /*#__PURE__*/Styled.span(["display:inline-block;width:20px;height:20px;font-size:20px;margin-right:8px;"]);
var TitleSpan = /*#__PURE__*/Styled.span(["display:inline-block;font-size:13px;color:#111F2C;.matched{color:#0089FF;}"]);

var getSnippetConfig = function getSnippetConfig(_, next) {
  var _extends2;

  var trigger = ':([^:\\W]|[\+\-])+$';
  var config = {
    trigger: trigger,
    triggerPrefix: '([^:]|^)$',
    fetchItems: function () {
      var _fetchItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var emoji;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return OldBambooPlugin.getEmojiData();

              case 2:
                emoji = _context.sent;
                return _context.abrupt("return", Object.keys(emoji).map(function (key) {
                  return {
                    key: key,
                    title: /*#__PURE__*/_createElement(TitleSpan, null, ":", key, ":"),
                    prefix: /*#__PURE__*/_createElement(EmojiSpan, null, emoji[key]),
                    value: emoji[key]
                  };
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function fetchItems() {
        return _fetchItems.apply(this, arguments);
      }

      return fetchItems;
    }(),
    filterItems: function () {
      var _filterItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(text, items) {
        var searchText;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                searchText = text.slice(1); // 性能考虑：至多筛选出 50 条

                _context2.next = 3;
                return fuzzySearch(items, searchText, {
                  key: 'key',
                  maxResults: 50
                });

              case 3:
                return _context2.abrupt("return", _context2.sent);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function filterItems(_x, _x2) {
        return _filterItems.apply(this, arguments);
      }

      return filterItems;
    }(),
    insertSnippet: function insertSnippet(controller, item) {
      controller.command(Commands.insertText, item.value);
      controller.dispatch('createTriggerMarkdownAction', {
        mdType: 'emoji',
        from: 'snippet'
      });
    }
  };
  return _extends((_extends2 = {}, _extends2[trigger] = config, _extends2), next());
};

export default getSnippetConfig;
//# sourceMappingURL=getSnippetConfig.js.map