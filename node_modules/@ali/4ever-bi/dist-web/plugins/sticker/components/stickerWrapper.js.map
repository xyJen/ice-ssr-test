{"version":3,"sources":["../../../../../src/plugins/sticker/components/stickerWrapper.tsx"],"names":["React","useCallback","useMemo","StickerPlugin","unitsConverter","moveCaretToText","DEFAULT_SZ","StickerItem","getStickerStyle","EmptyFunc","StickerWrapper","props","controller","node","sticker","StickerPlaceholder","stickerCode","data","code","sz","highlight","onClick","e","preventDefault","stopPropagation","offsetX","nativeEvent","target","offsetLeft","offsetWidth","isRightSide","offset","value","selection","key","toPX","memo"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;qBAC4B,a;AAA5B,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,mBAA9C;AACA,SAASC,eAAT;IAIEC,U,GAGEH,a,CAHFG,U;IACAC,W,GAEEJ,a,CAFFI,W;IACAC,e,GACEL,a,CADFK,e;;AAGF,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAM,IAAN;AAAA,CAAlB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA8C;AAAA,MACpCC,UADoC,GAC0BD,KAD1B,CACpCC,UADoC;AAAA,MACxBC,IADwB,GAC0BF,KAD1B,CACxBE,IADwB;AAAA,MAClBC,OADkB,GAC0BH,KAD1B,CAClBG,OADkB;AAAA,8BAC0BH,KAD1B,CACTI,kBADS;AAAA,MACTA,kBADS,sCACYN,SADZ;AAAA,MAE9BO,WAF8B,GAEdH,IAAI,CAACI,IAFS,CAEpCC,IAFoC;;AAAA,iBAILhB,OAAO,CAAC;AAAA,WAAMM,eAAe,CAACK,IAAD,CAArB;AAAA,GAAD,EAA8B,CAC1EA,IAD0E,CAA9B,CAJF;AAAA,6BAIpCM,EAJoC;AAAA,MAIpCA,EAJoC,4BAI/Bb,UAJ+B;AAAA,MAInBc,SAJmB,YAInBA,SAJmB;;AAO5C,MAAMC,OAAO,GAAGpB,WAAW,CACzB,UAACqB,CAAD,EAAO;AACLA,IAAAA,CAAC,CAACC,cAAF;AACAD,IAAAA,CAAC,CAACE,eAAF;AAFK,QAGGC,OAHH,GAGeH,CAAC,CAACI,WAHjB,CAGGD,OAHH;AAAA,oBAI+BH,CAAC,CAACK,MAJjC;AAAA,QAIGC,UAJH,aAIGA,UAJH;AAAA,QAIeC,WAJf,aAIeA,WAJf;AAKL,QAAMC,WAAW,GAAGL,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAGG,UAAV,GAAuBC,WAAW,GAAG,CAAxE;AACAxB,IAAAA,eAAe,CAAC;AACdO,MAAAA,UAAU,EAAVA,UADc;AAEdmB,MAAAA,MAAM,EAAED,WAAW,GAAG,CAAH,GAAO,CAAC;AAFb,KAAD,CAAf;AAID,GAXwB,EAYzB,CAAClB,UAAU,CAACoB,KAAX,CAAiBC,SAAlB,CAZyB,CAA3B;AAeA,sBACE,eAAC,WAAD;AACE,IAAA,GAAG,EAAEpB,IAAI,CAACqB,GADZ;AAEE,IAAA,IAAI,EAAElB,WAFR;AAGE,IAAA,eAAe,EAAEI,SAHnB;AAIE,IAAA,WAAW,eAAE,eAAC,kBAAD,EAAwBT,KAAxB,CAJf;AAKE,IAAA,EAAE,EAAEP,cAAc,CAAC+B,IAAf,CAAuBhB,EAAE,GAAG,GAA5B,QALN;AAME,IAAA,OAAO,EAAEL,OANX;AAOE,IAAA,OAAO,EAAEO;AAPX,IADF;AAWD;;AAED,4BAAerB,KAAK,CAACoC,IAAN,CAAW1B,cAAX,CAAf","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { StickerPlugin, unitsConverter } from '@ali/4ever-bamboo';\nimport { moveCaretToText } from '../utils';\nimport { IStickerProps } from '../types';\n\nconst {\n  DEFAULT_SZ,\n  StickerItem,\n  getStickerStyle,\n} = StickerPlugin;\n\nconst EmptyFunc = () => null;\n\nfunction StickerWrapper(props: IStickerProps) {\n  const { controller, node, sticker, StickerPlaceholder = EmptyFunc } = props;\n  const { code: stickerCode } = node.data;\n\n  const { sz = DEFAULT_SZ, highlight } = useMemo(() => getStickerStyle(node), [\n    node,\n  ]);\n  const onClick = useCallback(\n    (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      const { offsetX } = e.nativeEvent;\n      const { offsetLeft, offsetWidth } = e.target;\n      const isRightSide = offsetX > 0 && offsetX - offsetLeft > offsetWidth / 2;\n      moveCaretToText({\n        controller,\n        offset: isRightSide ? 1 : -1,\n      });\n    },\n    [controller.value.selection],\n  );\n\n  return (\n    <StickerItem\n      key={node.key}\n      code={stickerCode}\n      backgroundColor={highlight}\n      placeholder={<StickerPlaceholder {...props} />}\n      sz={unitsConverter.toPX(`${sz * 1.5}pt`)}\n      sticker={sticker}\n      onClick={onClick}\n    />\n  );\n}\n\nexport default React.memo(StickerWrapper);\n"],"file":"stickerWrapper.js"}