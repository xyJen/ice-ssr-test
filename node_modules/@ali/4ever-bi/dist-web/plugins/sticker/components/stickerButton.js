import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { EmojiMenuButton } from '@ali/we-toolbar';
import { ToolbarEmojiNormal } from '@ali/we-design';
import { ToolbarMode } from '@ali/4ever-component';
import { insertSticker, setStickerPanelVisible } from "../actions";
import { STICKER_PLACEHOLDER_DATA } from "../constants";
export default function StickerButton(props) {
  var controller = props.controller,
      locale = props.locale,
      toolbarMode = props.toolbarMode,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "toolbarMode"]);

  var value = controller.value;
  var isDisabled = controller.query('isDisableSticker') || controller.query('isSelectionInImage') || controller.query('isSelectionInLinkCard');
  var handleClick = useCallback(function () {
    controller.run('onAction', insertSticker(STICKER_PLACEHOLDER_DATA));
    controller.run('onAction', setStickerPanelVisible({
      visible: true
    }));
  }, []);
  var viewSize = toolbarMode === ToolbarMode.single ? ' 20' : ' 24'; // @ts-ignore 组件没有 viewBox 属性

  var icon = /*#__PURE__*/_createElement(ToolbarEmojiNormal, {
    viewBox: "0 0" + viewSize.repeat(2)
  });

  return /*#__PURE__*/_createElement(EmojiMenuButton, _extends({}, rest, {
    testid: "bi-toolbar-sticker" // @ts-ignore 组件没有 icon 属性
    ,
    icon: icon,
    tooltip: locale.buttonTitle,
    onClick: handleClick,
    disabled: isDisabled,
    autoClose: false,
    showArrow: false
  }));
}
//# sourceMappingURL=stickerButton.js.map