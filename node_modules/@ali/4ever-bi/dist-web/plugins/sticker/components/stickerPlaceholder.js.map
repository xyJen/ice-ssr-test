{"version":3,"sources":["../../../../../src/plugins/sticker/components/stickerPlaceholder.tsx"],"names":["React","useCallback","useMemo","useRef","useState","environment","StickerPlugin","unitsConverter","ToolbarEmojiNormal","InlinePlaceholderWrapper","setStickerPanelVisible","useOnClickOutside","InlinePlaceholder","DEFAULT_SZ","getStickerStyle","StickerPlaceholder","props","controller","node","readonly","_stickerPanel","value","data","placeholderRef","active","setActive","computedSz","sz","toPX","isDisableStickerPanel","query","iconStyle","iconSz","width","height","handleClick","IS_MOBILE","run","visible","handleClickOutside","fontSize"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,MAAtC,EAA8CC,QAA9C,QAA8D,OAA9D;qBAC4B,a;AAC5B,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,mBAA9C;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AAEA,SAASC,wBAAT;AACA,SAASC,sBAAT;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,iBAAT,QAAkC,iBAAlC;IAEQC,U,GAAgCP,a,CAAhCO,U;IAAYC,e,GAAoBR,a,CAApBQ,e;;AAEpB,SAASC,kBAAT,CAA4BC,KAA5B,EAAkD;AAAA,MACxCC,UADwC,GACDD,KADC,CACxCC,UADwC;AAAA,MAC5BC,IAD4B,GACDF,KADC,CAC5BE,IAD4B;AAAA,wBACDF,KADC,CACtBG,QADsB;AAAA,MACtBA,QADsB,gCACX,KADW;AAAA,MAExCC,aAFwC,GAEtBH,UAAU,CAACI,KAAX,CAAiBC,IAFK,CAExCF,aAFwC;AAGhD,MAAMG,cAAc,GAAGpB,MAAM,CAAiB,IAAjB,CAA7B;;AAHgD,kBAIpBC,QAAQ,CAACgB,aAAD,CAJY;AAAA,MAIzCI,MAJyC;AAAA,MAIjCC,SAJiC;;AAKhD,MAAMC,UAAU,GAAGxB,OAAO,CAAC,YAAM;AAAA,2BACHY,eAAe,CAACI,IAAD,CADZ;AAAA,+CACvBS,EADuB;AAAA,QACvBA,EADuB,oCAClBd,UADkB;;AAE/B,WAAON,cAAc,CAACqB,IAAf,CAAuBD,EAAE,GAAG,GAA5B,QAAP;AACD,GAHyB,EAGvB,CAACT,IAAD,CAHuB,CAA1B;AAIA,MAAMW,qBAAqB,GAAGZ,UAAU,CAACa,KAAX,CAAiB,uBAAjB,CAA9B;AAEA,MAAMC,SAAS,GAAG7B,OAAO,CAAC,YAAM;AAC9B,QAAM8B,MAAM,GAAGN,UAAU,GAAG,CAA5B;AACA,WAAO;AACLO,MAAAA,KAAK,EAAED,MADF;AAELE,MAAAA,MAAM,EAAEF;AAFH,KAAP;AAID,GANwB,EAMtB,CAACd,IAAD,CANsB,CAAzB;AAQA,MAAMiB,WAAW,GAAGlC,WAAW,CAAC,YAAM;AACpC;AACA,QAAII,WAAW,CAAC+B,SAAhB,EAA2B;AACzB;AACD,KAJmC,CAKpC;;;AACA,QAAIP,qBAAJ,EAA2B;AACzB;AACD;;AACDJ,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAR,IAAAA,UAAU,CAACoB,GAAX,CACE,UADF,EAEE3B,sBAAsB,CAAC;AACrB4B,MAAAA,OAAO,EAAE;AADY,KAAD,CAFxB;AAMD,GAhB8B,EAgB5B,CAACrB,UAAD,EAAaY,qBAAb,CAhB4B,CAA/B;AAkBA,MAAMU,kBAAkB,GAAGtC,WAAW,CAAC,YAAM;AAC3CwB,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAFqC,EAEnC,CAACR,UAAD,CAFmC,CAAtC;AAIAN,EAAAA,iBAAiB,CAACY,cAAD,EAAiBgB,kBAAjB,EAAqC,KAArC,CAAjB;AAEA,sBACE,eAAC,wBAAD;AAA0B,IAAA,GAAG,EAAEhB;AAA/B,kBACE,eAAC,iBAAD;AACE,IAAA,IAAI,eAAE,eAAC,kBAAD;AAAoB,MAAA,KAAK,EAAEQ;AAA3B,MADR;AAEE,IAAA,IAAI,EAAE,CAACZ,QAAD,IAAa,CAACU,qBAAd,GAAsC,QAAtC,GAAiD,QAFzD;AAGE,IAAA,UAAU,EAAEL,MAHd;AAIE,IAAA,OAAO,EAAEW,WAJX;AAKE,IAAA,KAAK,EAAE;AAAEK,MAAAA,QAAQ,EAAEd;AAAZ,KALT;AAME,IAAA,SAAS,EAAC;AANZ,IADF,CADF;AAYD;;AAED,eAAeX,kBAAf","sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport cls from 'classnames';\nimport { environment } from '@ali/4ever-cangjie';\nimport { StickerPlugin, unitsConverter } from '@ali/4ever-bamboo';\nimport { ToolbarEmojiNormal } from '@ali/we-design';\nimport { IStickerProps } from '../types';\nimport { InlinePlaceholderWrapper } from './styled';\nimport { setStickerPanelVisible } from '../actions';\nimport { useOnClickOutside } from '@ali/4ever-component';\nimport { InlinePlaceholder } from '@ali/we-toolbar';\n\nconst { DEFAULT_SZ, getStickerStyle } = StickerPlugin;\n\nfunction StickerPlaceholder(props: IStickerProps) {\n  const { controller, node, readonly = false } = props;\n  const { _stickerPanel } = controller.value.data;\n  const placeholderRef = useRef<HTMLDivElement>(null);\n  const [active, setActive] = useState(_stickerPanel);\n  const computedSz = useMemo(() => {\n    const { sz = DEFAULT_SZ } = getStickerStyle(node);\n    return unitsConverter.toPX(`${sz * 1.5}pt`);\n  }, [node]);\n  const isDisableStickerPanel = controller.query('isDisableStickerPanel');\n\n  const iconStyle = useMemo(() => {\n    const iconSz = computedSz - 4;\n    return {\n      width: iconSz,\n      height: iconSz,\n    };\n  }, [node]);\n\n  const handleClick = useCallback(() => {\n    // TODO 移动端暂不支持插入表情\n    if (environment.IS_MOBILE) {\n      return;\n    }\n    // 禁用 panel\n    if (isDisableStickerPanel) {\n      return;\n    }\n    setActive(true);\n    controller.run(\n      'onAction',\n      setStickerPanelVisible({\n        visible: true,\n      }),\n    );\n  }, [controller, isDisableStickerPanel]);\n\n  const handleClickOutside = useCallback(() => {\n    setActive(false);\n  }, [controller]);\n\n  useOnClickOutside(placeholderRef, handleClickOutside, false);\n\n  return (\n    <InlinePlaceholderWrapper ref={placeholderRef}>\n      <InlinePlaceholder\n        icon={<ToolbarEmojiNormal style={iconStyle} />}\n        type={!readonly && !isDisableStickerPanel ? 'normal' : 'export'}\n        isSelected={active}\n        onClick={handleClick}\n        style={{ fontSize: computedSz }}\n        className=\"inline-placeholder\"\n      />\n    </InlinePlaceholderWrapper>\n  );\n}\n\nexport default StickerPlaceholder;\n"],"file":"stickerPlaceholder.js"}