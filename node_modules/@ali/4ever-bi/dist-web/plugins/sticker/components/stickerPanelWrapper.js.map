{"version":3,"sources":["../../../../../src/plugins/sticker/components/stickerPanelWrapper.tsx"],"names":["React","useRef","useCallback","useEffect","useZoomContainer","useZoom","useOnClickOutside","createOnClickSticker","PanelWrapper","STICKER_PANEL_COLUMMS","StickerPanel","getCaretPosition","setStickerPanelVisible","EXTRA_OFFSET_LEFT","StickerPanelWrapper","props","controller","sticker","visible","locale","onVisibleChange","zoomContainer","zoom","panelRef","onClickSticker","handleClickOutside","e","closestSticker","target","closest","stickerCode","getAttribute","run","requestAnimationFrame","updatePosition","current","rect","getBoundingClientRect","caretPos","panelHeight","offsetHeight","panelWidth","offsetWidth","initTransformOrigin","isAtBottom","isAtRight","style","top","left","transformOrigin","join","classList","add","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback, useEffect } from 'react';\nimport { useZoomContainer, useZoom } from '@ali/4ever-cangjie';\nimport { useOnClickOutside } from '@ali/4ever-component';\nimport { createOnClickSticker } from '../utils';\nimport { PanelWrapper } from './styled';\nimport { STICKER_PANEL_COLUMMS } from '../constants';\nimport { StickerPanel } from '@ali/4ever-plugin-sticker';\nimport { getCaretPosition } from '../utils/getCaretPosition';\nimport { setStickerPanelVisible } from '../actions';\n\nconst EXTRA_OFFSET_LEFT = 2;\n\nfunction StickerPanelWrapper(props) {\n  const { controller, sticker, visible, locale, onVisibleChange } = props;\n  const zoomContainer = useZoomContainer();\n  const zoom = useZoom();\n  const panelRef = useRef<HTMLDivElement>();\n\n  const onClickSticker = useCallback(\n    createOnClickSticker({ controller, sticker }),\n    [controller, sticker],\n  );\n\n  const handleClickOutside = useCallback(\n    (e) => {\n      // 面板不出现时不予处理（避免首次 mousedown 引起 flush 的情况）\n      if (!visible) {\n        return;\n      }\n      const closestSticker = e.target.closest('[data-type=sticker]');\n      const stickerCode = closestSticker?.getAttribute('data-sticker');\n      controller.run(\n        'onAction',\n        setStickerPanelVisible({\n          visible: false,\n        }),\n      );\n      if (stickerCode === '') {\n        requestAnimationFrame(updatePosition);\n      }\n    },\n    [controller, visible],\n  );\n\n  const updatePosition = () => {\n    if (!zoomContainer || !panelRef.current) {\n      return;\n    }\n\n    const rect = zoomContainer.getBoundingClientRect();\n    const caretPos = getCaretPosition({\n      controller,\n      rect,\n      zoom,\n      panelHeight: panelRef.current.offsetHeight,\n      panelWidth: panelRef.current.offsetWidth,\n    });\n    if (!caretPos) {\n      return;\n    }\n\n    const initTransformOrigin = ['top', 'left'];\n    if (caretPos.isAtBottom) {\n      initTransformOrigin[0] = 'bottom';\n    }\n    if (caretPos.isAtRight) {\n      initTransformOrigin[1] = 'right';\n    }\n\n    panelRef.current.style.top = `${caretPos.top}px`;\n    panelRef.current.style.left = `${caretPos.left + EXTRA_OFFSET_LEFT}px`;\n    panelRef.current.style.transformOrigin = initTransformOrigin.join(' ');\n    panelRef.current.classList.add('sticker-panel-visible');\n  };\n\n  useOnClickOutside(panelRef, handleClickOutside, false);\n\n  React.useEffect(() => {\n    updatePosition();\n  });\n\n  useEffect(() => {\n    onVisibleChange && onVisibleChange(visible);\n  }, [visible]);\n\n  return visible ? (\n    <PanelWrapper ref={panelRef}>\n      <StickerPanel\n        sticker={sticker}\n        columns={STICKER_PANEL_COLUMMS}\n        onClick={onClickSticker}\n        locale={locale}\n      />\n    </PanelWrapper>\n  ) : null;\n}\n\nexport default React.memo(StickerPanelWrapper);\n"],"file":"stickerPanelWrapper.js"}