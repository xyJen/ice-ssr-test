import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { StickerPlugin, unitsConverter } from '@ali/4ever-bamboo';
import { moveCaretToText } from "../utils";
var DEFAULT_SZ = StickerPlugin.DEFAULT_SZ,
    StickerItem = StickerPlugin.StickerItem,
    getStickerStyle = StickerPlugin.getStickerStyle;

var EmptyFunc = function EmptyFunc() {
  return null;
};

function StickerWrapper(props) {
  var controller = props.controller,
      node = props.node,
      sticker = props.sticker,
      _props$StickerPlaceho = props.StickerPlaceholder,
      StickerPlaceholder = _props$StickerPlaceho === void 0 ? EmptyFunc : _props$StickerPlaceho;
  var stickerCode = node.data.code;

  var _useMemo = useMemo(function () {
    return getStickerStyle(node);
  }, [node]),
      _useMemo$sz = _useMemo.sz,
      sz = _useMemo$sz === void 0 ? DEFAULT_SZ : _useMemo$sz,
      highlight = _useMemo.highlight;

  var onClick = useCallback(function (e) {
    e.preventDefault();
    e.stopPropagation();
    var offsetX = e.nativeEvent.offsetX;
    var _e$target = e.target,
        offsetLeft = _e$target.offsetLeft,
        offsetWidth = _e$target.offsetWidth;
    var isRightSide = offsetX > 0 && offsetX - offsetLeft > offsetWidth / 2;
    moveCaretToText({
      controller: controller,
      offset: isRightSide ? 1 : -1
    });
  }, [controller.value.selection]);
  return /*#__PURE__*/_createElement(StickerItem, {
    key: node.key,
    code: stickerCode,
    backgroundColor: highlight,
    placeholder: /*#__PURE__*/_createElement(StickerPlaceholder, props),
    sz: unitsConverter.toPX(sz * 1.5 + "pt"),
    sticker: sticker,
    onClick: onClick
  });
}

export default /*#__PURE__*/React.memo(StickerWrapper);
//# sourceMappingURL=stickerWrapper.js.map