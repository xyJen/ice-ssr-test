import React, { useCallback, useMemo, useRef, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment } from '@ali/4ever-cangjie';
import { StickerPlugin, unitsConverter } from '@ali/4ever-bamboo';
import { ToolbarEmojiNormal } from '@ali/we-design';
import { InlinePlaceholderWrapper } from "./styled";
import { setStickerPanelVisible } from "../actions";
import { useOnClickOutside } from '@ali/4ever-component';
import { InlinePlaceholder } from '@ali/we-toolbar';
var DEFAULT_SZ = StickerPlugin.DEFAULT_SZ,
    getStickerStyle = StickerPlugin.getStickerStyle;

function StickerPlaceholder(props) {
  var controller = props.controller,
      node = props.node,
      _props$readonly = props.readonly,
      readonly = _props$readonly === void 0 ? false : _props$readonly;
  var _stickerPanel = controller.value.data._stickerPanel;
  var placeholderRef = useRef(null);

  var _useState = useState(_stickerPanel),
      active = _useState[0],
      setActive = _useState[1];

  var computedSz = useMemo(function () {
    var _getStickerStyle = getStickerStyle(node),
        _getStickerStyle$sz = _getStickerStyle.sz,
        sz = _getStickerStyle$sz === void 0 ? DEFAULT_SZ : _getStickerStyle$sz;

    return unitsConverter.toPX(sz * 1.5 + "pt");
  }, [node]);
  var isDisableStickerPanel = controller.query('isDisableStickerPanel');
  var iconStyle = useMemo(function () {
    var iconSz = computedSz - 4;
    return {
      width: iconSz,
      height: iconSz
    };
  }, [node]);
  var handleClick = useCallback(function () {
    // TODO 移动端暂不支持插入表情
    if (environment.IS_MOBILE) {
      return;
    } // 禁用 panel


    if (isDisableStickerPanel) {
      return;
    }

    setActive(true);
    controller.run('onAction', setStickerPanelVisible({
      visible: true
    }));
  }, [controller, isDisableStickerPanel]);
  var handleClickOutside = useCallback(function () {
    setActive(false);
  }, [controller]);
  useOnClickOutside(placeholderRef, handleClickOutside, false);
  return /*#__PURE__*/_createElement(InlinePlaceholderWrapper, {
    ref: placeholderRef
  }, /*#__PURE__*/_createElement(InlinePlaceholder, {
    icon: /*#__PURE__*/_createElement(ToolbarEmojiNormal, {
      style: iconStyle
    }),
    type: !readonly && !isDisableStickerPanel ? 'normal' : 'export',
    isSelected: active,
    onClick: handleClick,
    style: {
      fontSize: computedSz
    },
    className: "inline-placeholder"
  }));
}

export default StickerPlaceholder;
//# sourceMappingURL=stickerPlaceholder.js.map