import React, { useRef, useCallback, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useZoomContainer, useZoom } from '@ali/4ever-cangjie';
import { useOnClickOutside } from '@ali/4ever-component';
import { createOnClickSticker } from "../utils";
import { PanelWrapper } from "./styled";
import { STICKER_PANEL_COLUMMS } from "../constants";
import { StickerPanel } from '@ali/4ever-plugin-sticker';
import { getCaretPosition } from "../utils/getCaretPosition";
import { setStickerPanelVisible } from "../actions";
var EXTRA_OFFSET_LEFT = 2;

function StickerPanelWrapper(props) {
  var controller = props.controller,
      sticker = props.sticker,
      visible = props.visible,
      locale = props.locale,
      onVisibleChange = props.onVisibleChange;
  var zoomContainer = useZoomContainer();
  var zoom = useZoom();
  var panelRef = useRef();
  var onClickSticker = useCallback(createOnClickSticker({
    controller: controller,
    sticker: sticker
  }), [controller, sticker]);
  var handleClickOutside = useCallback(function (e) {
    // 面板不出现时不予处理（避免首次 mousedown 引起 flush 的情况）
    if (!visible) {
      return;
    }

    var closestSticker = e.target.closest('[data-type=sticker]');
    var stickerCode = closestSticker == null ? void 0 : closestSticker.getAttribute('data-sticker');
    controller.run('onAction', setStickerPanelVisible({
      visible: false
    }));

    if (stickerCode === '') {
      requestAnimationFrame(updatePosition);
    }
  }, [controller, visible]);

  var updatePosition = function updatePosition() {
    if (!zoomContainer || !panelRef.current) {
      return;
    }

    var rect = zoomContainer.getBoundingClientRect();
    var caretPos = getCaretPosition({
      controller: controller,
      rect: rect,
      zoom: zoom,
      panelHeight: panelRef.current.offsetHeight,
      panelWidth: panelRef.current.offsetWidth
    });

    if (!caretPos) {
      return;
    }

    var initTransformOrigin = ['top', 'left'];

    if (caretPos.isAtBottom) {
      initTransformOrigin[0] = 'bottom';
    }

    if (caretPos.isAtRight) {
      initTransformOrigin[1] = 'right';
    }

    panelRef.current.style.top = caretPos.top + "px";
    panelRef.current.style.left = caretPos.left + EXTRA_OFFSET_LEFT + "px";
    panelRef.current.style.transformOrigin = initTransformOrigin.join(' ');
    panelRef.current.classList.add('sticker-panel-visible');
  };

  useOnClickOutside(panelRef, handleClickOutside, false);
  React.useEffect(function () {
    updatePosition();
  });
  useEffect(function () {
    onVisibleChange && onVisibleChange(visible);
  }, [visible]);
  return visible ? /*#__PURE__*/_createElement(PanelWrapper, {
    ref: panelRef
  }, /*#__PURE__*/_createElement(StickerPanel, {
    sticker: sticker,
    columns: STICKER_PANEL_COLUMMS,
    onClick: onClickSticker,
    locale: locale
  })) : null;
}

export default /*#__PURE__*/React.memo(StickerPanelWrapper);
//# sourceMappingURL=stickerPanelWrapper.js.map