import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { StickerPlugin } from '@ali/4ever-bamboo';
import createRenderNode from "./renderNode";
import onCangjieSelect from "./handlers/onCangjieSelect";
import onAction from "./handlers/onAction";
import onKeyDown from "./handlers/onKeyDown";
import toolbar from "./toolbar";
import getSnippetConfig from "./getSnippetConfig";
import { DEFAULT_LANG, STICKER_NODE_TYPE } from "./constants";
import StickerPanelWrapper from "./components/stickerPanelWrapper";
import { menu, inlineMenu } from "./components/stickerMenu";
import StickerPlaceholder from "./components/stickerPlaceholder";
import createRenderToolbar from "./createRenderToolbar";
import { moFactory } from '@ali/4ever-plugin-sticker';
import onCangjieInput from "./handlers/onCangjieInput";
var DEFAULT_STICKERS = StickerPlugin.DEFAULT_STICKERS,
    Sticker = StickerPlugin.Sticker;

function createStickerPlugin(config) {
  var stickerConfig = _extends({
    lang: DEFAULT_LANG,
    customSticker: [DEFAULT_STICKERS]
  }, config.sticker);

  var sticker = new Sticker(stickerConfig);
  var params = {
    stickerConfig: stickerConfig,
    sticker: sticker
  };
  var stickerToolbar = stickerConfig.enableSticker ? {
    toolbar: toolbar(params)
  } : {};
  var locale = stickerConfig.locale || {};
  var onPanelVisibleChange = stickerConfig.onPanelVisibleChange;
  return _extends({}, moFactory({}), {
    // @ts-ignore
    renderNode: createRenderNode(params, StickerPlaceholder),
    renderToolbar: createRenderToolbar(stickerConfig.locale),
    renderEditable: function renderEditable(_, controller, next) {
      var _stickerPanel = controller.value.data._stickerPanel;
      return /*#__PURE__*/_createElement(React.Fragment, null, next(), /*#__PURE__*/_createElement(StickerPanelWrapper, {
        controller: controller,
        sticker: sticker,
        visible: _stickerPanel,
        locale: locale,
        onVisibleChange: onPanelVisibleChange
      }));
    },
    menubar: {
      menu: menu,
      inlineMenu: inlineMenu
    },
    onAction: onAction,
    onKeyDown: onKeyDown,
    onCangjieSelect: onCangjieSelect,
    onCangjieInput: onCangjieInput
  }, stickerToolbar, {
    getSnippetConfig: getSnippetConfig,
    models: {
      klass: 'inline',
      type: STICKER_NODE_TYPE
    }
  });
}

createStickerPlugin.defaultSticker = DEFAULT_STICKERS;
createStickerPlugin.components = {
  StickerPlaceholder: StickerPlaceholder
};
export default createStickerPlugin;
//# sourceMappingURL=index.js.map