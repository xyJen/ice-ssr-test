import _extends from "@babel/runtime/helpers/extends";
import { GroupFactory } from '@ali/4ever-bamboo';
import { Heading } from '@ali/4ever-mo';
import createGenerateGroup from "./handlers/createGenerateGroup";
import createRenderGroup from "./handlers/createRenderGroup";
import * as queries from "./queries";
var Heading1 = Heading.Heading1,
    Heading2 = Heading.Heading2,
    Heading3 = Heading.Heading3;
var actions = GroupFactory.actions;
var DRAG_BUTTON_OFFSET = -20;
var PI_MODE = 'page_layout';

var createHeadingGroupPlugin = function createHeadingGroupPlugin(config) {
  var _config$headingGroup = config.headingGroup,
      headingGroup = _config$headingGroup === void 0 ? {} : _config$headingGroup;
  var _headingGroup$level = headingGroup.level,
      level = _headingGroup$level === void 0 ? 3 : _headingGroup$level;
  var shouldOffsetTypes = [];

  for (var i = level; i > 0; i--) {
    shouldOffsetTypes.push("heading-" + i);
  }

  ;
  return {
    renderGroup: createRenderGroup(headingGroup),
    generateGroup: createGenerateGroup(headingGroup),
    queries: _extends({
      getHeadingGroupLevel: function getHeadingGroupLevel() {
        return level;
      },
      isHeadingGroupAvailable: function isHeadingGroupAvailable() {
        return true;
      },
      getLeftToolbarOffset: function getLeftToolbarOffset(controller, data) {
        var node = data.node;
        var isPi = controller.query('getLayoutMode') === PI_MODE;

        if (!isPi && shouldOffsetTypes.includes(node.type)) {
          return {
            // 这里加上4是因为左侧工具栏的offset为6，但是在标题场景下是2
            x: DRAG_BUTTON_OFFSET + 4,
            y: 0
          };
        }

        return undefined;
      },
      isElementInGroup: function isElementInGroup(controller, element, group) {
        // 分组 2 只能存在于分组 1 之中
        if (Heading1.isHeading1(element)) {
          return false;
        } else if (Heading2.isHeading2(element)) {
          if (group.type === 'heading1-group') {
            return true;
          }

          return false;
        } else if (Heading3.isHeading3(element)) {
          if (group.type === 'heading1-group' || group.type === 'heading2-group') {
            return true;
          }

          return false;
        }

        return true;
      }
    }, queries)
  };
}; // @ts-ignore


createHeadingGroupPlugin.actions = actions; // @ts-ignore

createHeadingGroupPlugin.queries = queries;
export default createHeadingGroupPlugin;
//# sourceMappingURL=index.js.map