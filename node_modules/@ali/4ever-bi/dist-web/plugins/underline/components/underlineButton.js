import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment } from '@ali/4ever-cangjie';
import { UnderlineButton as Button } from '@ali/we-toolbar';
import { PluginRoles } from '@ali/4ever-bamboo';
import { IconButtonShortcut } from '@ali/4ever-component';
import { toggleUnderline } from "../actions";
import { DELIMITER } from "../constants";
var MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';
var shortcutText = MOD + "+U";

var isDisabled = function isDisabled(controller) {
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var disabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  return Boolean(disabled);
};

export default function UnderlineButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var isActive = controller.query('isUnderline');
  var handleClick = React.useCallback(function () {
    return controller.run('onAction', toggleUnderline());
  }, [controller]);
  return /*#__PURE__*/_createElement(Button, _extends({}, rest, {
    shortcutText: shortcutText,
    testid: "bi-toolbar-underline",
    active: isActive,
    disabled: isDisabled(controller),
    onClick: handleClick,
    role: PluginRoles.underline,
    tooltip: /*#__PURE__*/_createElement(IconButtonShortcut, {
      title: locale.buttonTitle,
      shortcut: shortcutText,
      description: 'Markdown: ' + DELIMITER.character.repeat(DELIMITER.size) + ((locale == null ? void 0 : locale.text) || 'Text') + DELIMITER.character.repeat(DELIMITER.size) + ' ' + ((locale == null ? void 0 : locale.space) || 'Space')
    })
  }));
}
//# sourceMappingURL=underlineButton.js.map