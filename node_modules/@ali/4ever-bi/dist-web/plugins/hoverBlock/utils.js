import { Block, Inline, constants, domUtils } from '@ali/4ever-cangjie';
import { Image, Table } from '@ali/4ever-mo';
import { HIGHLIGHT_CLASS } from "./constants";

function isListNode(node) {
  var _node$data$pi, _node$data$pi$extra;

  if (Inline.isInline(node)) return false; // 排版模式下 data.list 未下放到 nodes.nodes 中

  return node.data.list || ((_node$data$pi = node.data.pi) == null ? void 0 : (_node$data$pi$extra = _node$data$pi.extra) == null ? void 0 : _node$data$pi$extra.inList);
}

export function getClosestDom(node) {
  var nodeDom = null;
  var key = node == null ? void 0 : node.key;
  if (!key) return nodeDom;

  try {
    nodeDom = domUtils.findDOMNodeSafely(key) || null;
    if (!nodeDom) return null; // 表格有独立的hover 态

    if (Table.isTable(node)) return null;

    if (Image.isImage(node)) {
      nodeDom = nodeDom.querySelector("[" + constants.Selector.hoverWrapper + "]");
    } else if (Block.isBlock(node)) {
      var _constants$Selector = constants.Selector,
          selector = _constants$Selector.hoverWrapper,
          _key = _constants$Selector.key;

      if (nodeDom.getAttribute(selector)) {
        return nodeDom;
      }

      var maybeNodeDom = nodeDom.querySelector("[" + selector + "]");

      if (maybeNodeDom && maybeNodeDom.closest("[" + _key + "]") === nodeDom) {
        return maybeNodeDom;
      }

      nodeDom = nodeDom.closest('[data-name="heading-group-title-content"]') || nodeDom.closest("[" + constants.Selector.leafBlock + "]") || nodeDom;
    }

    if (nodeDom && node.data.blockquote) {
      // 引用
      nodeDom = nodeDom.closest('blockquote') || nodeDom;
    } else if (nodeDom && isListNode(node)) {
      // 列表和任务
      nodeDom = nodeDom.closest('[data-testid="list"]') || nodeDom;
    }

    return nodeDom;
  } catch (e) {// do nothing
  }

  return nodeDom;
}
export function updateHighlightSingle(node, type, reason) {
  var key = node == null ? void 0 : node.key;
  if (!key) return;
  var dom = domUtils.findDOMNodeSafely(key);
  if (!dom) return;
  var hoverWrapper = getClosestDom(node);
  if (!hoverWrapper) return;
  var hoverBlockType = (hoverWrapper == null ? void 0 : hoverWrapper.getAttribute(constants.Selector.hoverWrapper)) || 'noBorderBox'; // 同一个时刻元素仅存在一种状态

  ['select', 'hover', 'active'].forEach(function (highlightType) {
    var key = hoverBlockType + highlightType[0].toLocaleUpperCase() + highlightType.slice(1);
    hoverWrapper.classList.remove(HIGHLIGHT_CLASS[key]);
  });
  var classKey = hoverBlockType + type[0].toLocaleUpperCase() + type.slice(1);
  hoverWrapper.classList.add(HIGHLIGHT_CLASS[classKey]);
  hoverWrapper.setAttribute('data-highlight-reason', reason);
}
export function removeHighlightSingle(node, type, reason) {
  var key = node == null ? void 0 : node.key;
  if (!key) return;
  var dom = domUtils.findDOMNodeSafely(key);
  if (!dom) return;
  var hoverWrapper = getClosestDom(node); // 避免时序问题，由不是当前原因触发清除

  if (!hoverWrapper || hoverWrapper.getAttribute('data-highlight-reason') !== reason) return;
  var hoverBlockType = hoverWrapper.getAttribute(constants.Selector.hoverWrapper) || 'noBorderBox';
  var classKey = hoverBlockType + type[0].toLocaleUpperCase() + type.slice(1);

  if (hoverWrapper.classList.contains(HIGHLIGHT_CLASS[classKey])) {
    hoverWrapper.classList.remove(HIGHLIGHT_CLASS[classKey]);
    hoverWrapper.removeAttribute('data-highlight-reason');
  }
}
//# sourceMappingURL=utils.js.map