{"version":3,"sources":["../../../../src/plugins/laserPointer/createRenderNode.tsx"],"names":["React","Highlight","isHighlighted","createRenderNode","config","renderNode","props","controller","next","node","attributes","isLaserPointerEnabled","getRole","renderHighlight","getHighlightType","type","highlighted","key","value","injections","ref"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAE5B,OAAOC,SAAP;AACA,SAASC,aAAT;AAEA,eAAe,SAASC,gBAAT,CAA0BC,MAA1B,EAA6D;AAC1E,MAAMC,UAAgC,GAAG,SAAnCA,UAAmC,CAACC,KAAD,EAAQC,UAAR,EAAoBC,IAApB,EAA6B;AAAA,QAC5DC,IAD4D,GACvCH,KADuC,CAC5DG,IAD4D;AAAA,QACtDC,UADsD,GACvCJ,KADuC,CACtDI,UADsD;;AAGpE,QAAI,EAACN,MAAD,YAACA,MAAM,CAAEO,qBAAT,KAAkC,CAACP,MAAM,CAACO,qBAAP,EAAvC,EAAuE;AACrE,aAAOH,IAAI,EAAX;AACD;;AALmE,QAO5DI,OAP4D,GAObR,MAPa,CAO5DQ,OAP4D;AAAA,QAOnDC,eAPmD,GAObT,MAPa,CAOnDS,eAPmD;AAAA,QAOlCC,gBAPkC,GAObV,MAPa,CAOlCU,gBAPkC;AASpE,QAAMC,IAAI,GAAGD,gBAAgB,CAACL,IAAD,EAAOF,UAAP,CAA7B;;AACA,QAAIQ,IAAJ,EAAU;AACR,UAAMC,WAAW,GAAGd,aAAa,CAACO,IAAI,CAACQ,GAAN,EAAWV,UAAU,CAACW,KAAX,CAAiBC,UAA5B,CAAjC;AACA,0BACE,eAAC,SAAD;AACE,QAAA,IAAI,EAAEJ,IADR;AAEE,QAAA,UAAU,EAAER,UAFd;AAGE,QAAA,IAAI,EAAEE,IAHR;AAIE,QAAA,MAAM,EAAEC,UAAU,CAACU,GAJrB;AAKE,QAAA,OAAO,EAAER,OALX;AAME,QAAA,WAAW,EAAEI,WANf;AAOE,QAAA,eAAe,EAAEH;AAPnB,SASGL,IAAI,EATP,CADF;AAaD;;AACD,WAAOA,IAAI,EAAX;AACD,GA3BD;;AA6BA,SAAOH,UAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { Plugin } from '@ali/4ever-cangjie';\nimport { LaserPointerPluginConfig } from './types';\nimport Highlight from './components/highlight';\nimport { isHighlighted } from './utils';\n\nexport default function createRenderNode(config?: LaserPointerPluginConfig) {\n  const renderNode: Plugin['renderNode'] = (props, controller, next) => {\n    const { node, attributes } = props;\n\n    if (!config?.isLaserPointerEnabled || !config.isLaserPointerEnabled()) {\n      return next();\n    }\n\n    const { getRole, renderHighlight, getHighlightType } = config;\n\n    const type = getHighlightType(node, controller);\n    if (type) {\n      const highlighted = isHighlighted(node.key, controller.value.injections);\n      return (\n        <Highlight\n          type={type}\n          controller={controller}\n          node={node}\n          domRef={attributes.ref}\n          getRole={getRole}\n          highlighted={highlighted}\n          renderHighlight={renderHighlight}\n        >\n          {next()}\n        </Highlight>\n      );\n    }\n    return next();\n  };\n\n  return renderNode;\n}\n"],"file":"createRenderNode.js"}