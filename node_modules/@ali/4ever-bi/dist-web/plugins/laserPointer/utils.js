import { omit } from 'lodash-es';
import { Injection, constants, Block } from '@ali/4ever-cangjie';
var Selector = constants.Selector;
export function isHighlighted(key, injections) {
  return !!injections.find(function (inj) {
    return inj.key === key && inj.data.laserPointer;
  });
}
export function highlightByNode(controller, node) {
  if (!node) {
    return;
  }

  var key = node.key;
  var injections = controller.value.injections;
  controller.setInjections([].concat(injections.map(function (inj) {
    var _inj$data;

    if (typeof ((_inj$data = inj.data) == null ? void 0 : _inj$data.laserPointer) === 'boolean') {
      return Injection.create({
        key: inj.key,
        data: omit(inj.data, 'laserPointer')
      });
    }

    return inj;
  }), [// 高亮节点对应的内容
  Injection.create({
    key: key,
    data: {
      laserPointer: true
    }
  })]));
}
export function highlightByPath(controller, path) {
  var document = controller.value.document;
  var node = document.getNodeByPath(path);
  highlightByNode(controller, node);
}
export function highlightByUUID(controller, uuid) {
  var key = controller.query('getNodeKeyByUUID', uuid);
  var node = controller.value.document.getNode(key);
  highlightByNode(controller, node);
}
export function removeHighlight(controller) {
  var injections = controller.value.injections;
  controller.setInjections(injections.map(function (injection) {
    var _injection$data;

    if ((_injection$data = injection.data) != null && _injection$data.laserPointer) {
      return Injection.create({
        key: injection.key,
        data: omit(injection.data, 'laserPointer')
      });
    }

    return injection;
  }));
}
export var isBlockQuote = function isBlockQuote(node) {
  var _node$data;

  return !!(node != null && (_node$data = node.data) != null && _node$data.blockquote);
};

var extractKey = function extractKey(keyStr) {
  var matchArr = keyStr.match(/^\d+/);

  if (matchArr) {
    return matchArr[0];
  }

  return null;
};

export function findClosesetBlock(ele, controller) {
  if (!(ele instanceof Element)) {
    return null;
  }

  try {
    var closest = null; // 列表特殊处理

    if (ele.getAttribute('data-testid') === 'list') {
      closest = ele.querySelector("[" + Selector.key + "]");
    } else {
      closest = ele.closest("[" + Selector.key + "]");
    }

    if (!closest) {
      return null;
    }

    var attr = closest.getAttribute(Selector.key);

    if (typeof attr !== 'string') {
      return null;
    }

    var key = extractKey(attr);

    if (!key) {
      return null;
    }

    var document = controller.value.document;
    var node = document.getNode(key);

    if (Block.isBlock(node)) {
      return node;
    }

    return document.getClosestBlock(key);
  } catch (e) {
    return null;
  }
}
//# sourceMappingURL=utils.js.map