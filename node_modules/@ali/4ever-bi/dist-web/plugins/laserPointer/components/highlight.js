import * as React from 'react';
import { domUtils } from '@ali/4ever-cangjie';
import { List } from '@ali/4ever-plugin-list';
import * as actions from "../actions";
import { isBlockQuote } from "../utils";
import { LaserPointerRole } from "../types";

var Highlight = function Highlight(props) {
  var type = props.type,
      domRef = props.domRef,
      children = props.children,
      controller = props.controller,
      node = props.node,
      highlighted = props.highlighted,
      renderHighlight = props.renderHighlight,
      getRole = props.getRole;
  var highlight = React.useCallback(function () {
    if (getRole() === LaserPointerRole.HOST) {
      var path = controller.value.document.getPath(node.key);
      controller.run('onAction', actions.highlight({
        path: path
      }));
    }
  }, [controller, node, getRole]);
  var removeHighlight = React.useCallback(function () {
    if (getRole() === LaserPointerRole.HOST) {
      controller.run('onAction', actions.removeHighlight());
    }
  }, [controller, getRole]);

  var getDOMNode = function getDOMNode() {
    var _domRef$current;

    var domNode = (_domRef$current = domRef == null ? void 0 : domRef.current) != null ? _domRef$current : undefined;

    try {
      domNode = domUtils.findDOMNode(node.key);

      if (!domNode) {
        return undefined;
      }

      if (List.isList(node)) {
        var _domNode$closest;

        return (_domNode$closest = domNode.closest('[data-testid="list"]')) != null ? _domNode$closest : undefined;
      } else if (isBlockQuote(node)) {
        var _domNode$closest2;

        return (_domNode$closest2 = domNode.closest('blockquote')) != null ? _domNode$closest2 : undefined;
      }
    } catch (e) {// catch don't throw
    }

    return domNode;
  };

  return renderHighlight(type, highlighted, {
    children: children,
    getDOMNode: getDOMNode,
    highlight: highlight,
    removeHighlight: removeHighlight
  });
};

export default Highlight;
//# sourceMappingURL=highlight.js.map