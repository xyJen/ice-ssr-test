{"version":3,"sources":["../../../../src/plugins/laserPointer/utils.ts"],"names":["omit","Injection","constants","Block","Selector","isHighlighted","key","injections","find","inj","data","laserPointer","highlightByNode","controller","node","value","setInjections","map","create","highlightByPath","path","document","getNodeByPath","highlightByUUID","uuid","query","getNode","removeHighlight","injection","isBlockQuote","blockquote","extractKey","keyStr","matchArr","match","findClosesetBlock","ele","Element","closest","getAttribute","querySelector","attr","isBlock","getClosestBlock","e"],"mappings":"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","sourcesContent":["import { omit } from 'lodash-es';\nimport { Controller, Injection, Path, constants, Block, Node } from '@ali/4ever-cangjie';\n\nconst { Selector } = constants;\n\nexport function isHighlighted(key: string, injections: Injection[]) {\n  return !!injections.find((inj) => {\n    return inj.key === key && inj.data.laserPointer;\n  });\n}\n\nexport function highlightByNode(controller: Controller, node: Node | null) {\n  if (!node) {\n    return;\n  }\n  const { key } = node;\n  const { injections } = controller.value;\n  controller.setInjections([\n    ...injections\n      .map((inj) => {\n        if (typeof inj.data?.laserPointer === 'boolean') {\n          return Injection.create({\n            key: inj.key,\n            data: omit(inj.data, 'laserPointer'),\n          });\n        }\n        return inj;\n      }),\n    // 高亮节点对应的内容\n    Injection.create({\n      key,\n      data: { laserPointer: true },\n    }),\n  ]);\n}\n\nexport function highlightByPath(controller: Controller, path: Path) {\n  const { document } = controller.value;\n  const node = document.getNodeByPath(path);\n  highlightByNode(controller, node);\n}\n\nexport function highlightByUUID(controller: Controller, uuid: string) {\n  const key = controller.query('getNodeKeyByUUID', uuid);\n  const node = controller.value.document.getNode(key);\n  highlightByNode(controller, node);\n}\n\nexport function removeHighlight(controller: Controller) {\n  const { injections } = controller.value;\n  controller.setInjections(injections.map((injection) => {\n    if (injection.data?.laserPointer) {\n      return Injection.create({\n        key: injection.key,\n        data: omit(injection.data, 'laserPointer'),\n      });\n    }\n    return injection;\n  }));\n}\n\nexport const isBlockQuote = (node: any) => !!node?.data?.blockquote;\n\nconst extractKey = (keyStr: string) => {\n  const matchArr = keyStr.match(/^\\d+/);\n  if (matchArr) {\n    return matchArr[0];\n  }\n  return null;\n}\n\nexport function findClosesetBlock (ele: Element | Document, controller: Controller) {\n  if (!(ele instanceof Element)) {\n    return null;\n  }\n\n  try {\n    let closest: Element | null = null;\n    // 列表特殊处理\n    if (ele.getAttribute('data-testid') === 'list') {\n      closest = ele.querySelector(`[${Selector.key}]`);\n    } else {\n      closest = ele.closest(`[${Selector.key}]`);\n    }\n    if (!closest) {\n      return null;\n    }\n\n    const attr = closest.getAttribute(Selector.key);\n    if (typeof attr !== 'string') {\n      return null;\n    }\n\n    const key = extractKey(attr);\n    if (!key) {\n      return null;\n    }\n\n    const { document } = controller.value;\n    const node = document.getNode(key);\n    if (Block.isBlock(node)) {\n      return node;\n    }\n    return document.getClosestBlock(key);\n  } catch (e) {\n    return null;\n  }\n}\n"],"file":"utils.js"}