import _extends from "@babel/runtime/helpers/extends";
import { Commands } from '@ali/4ever-cangjie';
import selectRange from "./selectRange";
import { getCurrentBlocks } from "../utils";

var setTableOrColumnBgColor = function setTableOrColumnBgColor(controller, node, color) {
  // 当选区是表格或分栏时，调用 setTableCellFill 填充背景色
  controller.command(selectRange, {
    nodeOrNodes: node
  });
  var table = controller.query('getTable');
  var selection = controller.query('getTableSelection');
  controller.dispatch('setTableCellFill', table, selection, color);
  controller.command(Commands.moveToEndOfNode, node);
};

var setParagraphBgColor = function setParagraphBgColor(controller, payload) {
  var currentBlock = payload.node,
      color = payload.color;
  var blocks = getCurrentBlocks(controller, currentBlock.key);

  if (Array.isArray(blocks) && blocks.length > 0) {
    blocks.forEach(function (node) {
      var data = node.data,
          type = node.type;
      var isTableOrColumn = ['table', 'table-cell'].includes(type);

      if (isTableOrColumn) {
        // 处理表格和分栏的情况
        setTableOrColumnBgColor(controller, node, color);
      } else {
        var newData = _extends({}, data);

        if (color === '') {
          delete newData.shd;
        } else {
          newData = _extends({}, newData, {
            shd: {
              val: 'clear',
              color: 'auto',
              fill: color
            }
          });
        }

        controller.command(Commands.setNodeByKey, node.key, {
          data: newData
        });
      }
    });
  }

  return controller;
};

export default setParagraphBgColor;
//# sourceMappingURL=setParagraphBgColor.js.map