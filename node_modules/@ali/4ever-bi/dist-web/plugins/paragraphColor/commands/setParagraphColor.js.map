{"version":3,"sources":["../../../../../src/plugins/paragraphColor/commands/setParagraphColor.ts"],"names":["Commands","List","getCurrentBlocks","getRangeFromNodes","cloneData","setParagraphColor","controller","payload","currentBlock","node","color","blocks","key","Array","isArray","length","forEach","data","isList","newData","list","symbolStyle","command","setNodeByKey","range","dispatch"],"mappings":"AAAA,SAAqBA,QAArB,QAAqC,oBAArC;AAEA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,gBAAT,EAA4BC,iBAA5B,EAA+CC,SAA/C;;AAGA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBC,UADwB,EAExBC,OAFwB,EAGrB;AAAA,MACWC,YADX,GACmCD,OADnC,CACKE,IADL;AAAA,MACyBC,KADzB,GACmCH,OADnC,CACyBG,KADzB;AAEH,MAAMC,MAAM,GAAGT,gBAAgB,CAACI,UAAD,EAAaE,YAAY,CAACI,GAA1B,CAA/B;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,KAAyBA,MAAM,CAACI,MAAP,GAAgB,CAA7C,EAAgD;AAC9CJ,IAAAA,MAAM,CAACK,OAAP,CAAe,UAACP,IAAD,EAAU;AAAA,UACfQ,IADe,GACNR,IADM,CACfQ,IADe;;AAEvB,UAAIhB,IAAI,CAACiB,MAAL,CAAYT,IAAZ,CAAJ,EAAuB;AACrB;AACA;AACA,YAAMU,OAAO,GAAGf,SAAS,CAACa,IAAD,CAAzB;AACAE,QAAAA,OAAO,CAACC,IAAR,CAAaC,WAAb,CAAyBX,KAAzB,GAAiCA,KAAjC;AACAJ,QAAAA,UAAU,CAACgB,OAAX,CAAmBtB,QAAQ,CAACuB,YAA5B,EAA0Cd,IAAI,CAACG,GAA/C,EACE;AAAEK,UAAAA,IAAI,EAAEE;AAAR,SADF;AAGD;AACF,KAXD;AAaA,QAAMK,KAAK,GAAGrB,iBAAiB,CAACG,UAAD,EAAaK,MAAb,CAA/B;AACAL,IAAAA,UAAU,CAACmB,QAAX,CAAoB,iBAApB,EAAuCD,KAAvC,EAA8Cd,KAA9C;AACD;;AAED,SAAOJ,UAAP;AACD,CA1BD;;AA4BA,eAAeD,iBAAf","sourcesContent":["import { Controller, Commands } from '@ali/4ever-cangjie';\n\nimport { List } from '@ali/4ever-plugin-list';\nimport { getCurrentBlocks,  getRangeFromNodes, cloneData } from '../utils';\nimport type { ISetParagraphColor } from '../types';\n\nconst setParagraphColor = (\n  controller: Controller,\n  payload: ISetParagraphColor,\n) => {\n  const { node: currentBlock, color } = payload;\n  const blocks = getCurrentBlocks(controller, currentBlock.key);\n\n  if (Array.isArray(blocks) && blocks.length > 0) {\n    blocks.forEach((node) => {\n      const { data } = node;\n      if (List.isList(node)) {\n        // 列表拦截 SET_COLOR 设置列表符号颜色高度依赖 controller.selection\n        // 所以这里手动处理下列表符号的颜色\n        const newData = cloneData(data);\n        newData.list.symbolStyle.color = color;\n        controller.command(Commands.setNodeByKey, node.key,\n          { data: newData }\n        );\n      }\n    });\n\n    const range = getRangeFromNodes(controller, blocks);\n    controller.dispatch('setColorAtRange', range, color);\n  }\n\n  return controller;\n};\n\nexport default setParagraphColor;\n"],"file":"setParagraphColor.js"}