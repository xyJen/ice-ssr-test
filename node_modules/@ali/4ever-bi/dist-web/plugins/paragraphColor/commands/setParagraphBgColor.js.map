{"version":3,"sources":["../../../../../src/plugins/paragraphColor/commands/setParagraphBgColor.ts"],"names":["Commands","selectRange","getCurrentBlocks","setTableOrColumnBgColor","controller","node","color","command","nodeOrNodes","table","query","selection","dispatch","moveToEndOfNode","setParagraphBgColor","payload","currentBlock","blocks","key","Array","isArray","length","forEach","data","type","isTableOrColumn","includes","newData","shd","val","fill","setNodeByKey"],"mappings":";AAAA,SAAqBA,QAArB,QAA4C,oBAA5C;AAEA,OAAOC,WAAP;AACA,SAASC,gBAAT;;AAGA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,UAAD,EAAyBC,IAAzB,EAAsCC,KAAtC,EAAwD;AACtF;AACAF,EAAAA,UAAU,CAACG,OAAX,CAAmBN,WAAnB,EAAgC;AAAEO,IAAAA,WAAW,EAAEH;AAAf,GAAhC;AACA,MAAMI,KAAK,GAAGL,UAAU,CAACM,KAAX,CAAiB,UAAjB,CAAd;AACA,MAAMC,SAAS,GAAGP,UAAU,CAACM,KAAX,CAAiB,mBAAjB,CAAlB;AACAN,EAAAA,UAAU,CAACQ,QAAX,CAAoB,kBAApB,EAAwCH,KAAxC,EAA+CE,SAA/C,EAA0DL,KAA1D;AACAF,EAAAA,UAAU,CAACG,OAAX,CAAmBP,QAAQ,CAACa,eAA5B,EAA6CR,IAA7C;AACD,CAPD;;AASA,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1BV,UAD0B,EAE1BW,OAF0B,EAGvB;AAAA,MACWC,YADX,GACmCD,OADnC,CACKV,IADL;AAAA,MACyBC,KADzB,GACmCS,OADnC,CACyBT,KADzB;AAEH,MAAMW,MAAM,GAAGf,gBAAgB,CAACE,UAAD,EAAaY,YAAY,CAACE,GAA1B,CAA/B;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,KAAyBA,MAAM,CAACI,MAAP,GAAgB,CAA7C,EAAgD;AAC9CJ,IAAAA,MAAM,CAACK,OAAP,CAAe,UAACjB,IAAD,EAAU;AAAA,UACfkB,IADe,GACAlB,IADA,CACfkB,IADe;AAAA,UACTC,IADS,GACAnB,IADA,CACTmB,IADS;AAGvB,UAAMC,eAAe,GAAG,CAAC,OAAD,EAAU,YAAV,EAAwBC,QAAxB,CAAiCF,IAAjC,CAAxB;;AACA,UAAIC,eAAJ,EAAqB;AACnB;AACAtB,QAAAA,uBAAuB,CAACC,UAAD,EAAaC,IAAb,EAAmBC,KAAnB,CAAvB;AACD,OAHD,MAGO;AACL,YAAIqB,OAAO,gBAAQJ,IAAR,CAAX;;AAEA,YAAIjB,KAAK,KAAK,EAAd,EAAkB;AAChB,iBAAOqB,OAAO,CAACC,GAAf;AACD,SAFD,MAEO;AACLD,UAAAA,OAAO,gBACFA,OADE;AAELC,YAAAA,GAAG,EAAE;AACHC,cAAAA,GAAG,EAAE,OADF;AAEHvB,cAAAA,KAAK,EAAE,MAFJ;AAGHwB,cAAAA,IAAI,EAAExB;AAHH;AAFA,YAAP;AAQD;;AAEDF,QAAAA,UAAU,CAACG,OAAX,CAAmBP,QAAQ,CAAC+B,YAA5B,EAA0C1B,IAAI,CAACa,GAA/C,EAAoD;AAAEK,UAAAA,IAAI,EAAEI;AAAR,SAApD;AACD;AACF,KAzBD;AA0BD;;AACD,SAAOvB,UAAP;AACD,CApCD;;AAsCA,eAAeU,mBAAf","sourcesContent":["import { Controller, Commands, Block } from '@ali/4ever-cangjie';\n\nimport selectRange from './selectRange';\nimport { getCurrentBlocks } from '../utils';\nimport type { ISetParagraphBgColor } from '../types';\n\nconst setTableOrColumnBgColor = (controller: Controller, node: Block, color: string) => {\n  // 当选区是表格或分栏时，调用 setTableCellFill 填充背景色\n  controller.command(selectRange, { nodeOrNodes: node });\n  const table = controller.query('getTable');\n  const selection = controller.query('getTableSelection');\n  controller.dispatch('setTableCellFill', table, selection, color);\n  controller.command(Commands.moveToEndOfNode, node);\n};\n\nconst setParagraphBgColor = (\n  controller: Controller,\n  payload: ISetParagraphBgColor,\n) => {\n  const { node: currentBlock, color } = payload;\n  const blocks = getCurrentBlocks(controller, currentBlock.key);\n\n  if (Array.isArray(blocks) && blocks.length > 0) {\n    blocks.forEach((node) => {\n      const { data, type } = node;\n\n      const isTableOrColumn = ['table', 'table-cell'].includes(type);\n      if (isTableOrColumn) {\n        // 处理表格和分栏的情况\n        setTableOrColumnBgColor(controller, node, color);\n      } else {\n        let newData = { ...data };\n\n        if (color === '') {\n          delete newData.shd;\n        } else {\n          newData = {\n            ...newData,\n            shd: {\n              val: 'clear',\n              color: 'auto',\n              fill: color,\n            },\n          };\n        }\n\n        controller.command(Commands.setNodeByKey, node.key, { data: newData });\n      }\n    });\n  }\n  return controller;\n};\n\nexport default setParagraphBgColor;\n\n"],"file":"setParagraphBgColor.js"}