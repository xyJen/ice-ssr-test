{"version":3,"sources":["../../../../../src/plugins/paragraphColor/commands/selectRange.ts"],"names":["Selection","Commands","Queries","selectRangeFromNode","controller","node","value","range","selection","document","create","moveToRangeOfNode","convertToTextPoints","command","select","selectRangeFromNodes","nodes","startBlock","endBlock","length","anchor","query","pointAtStartOfNode","focus","pointAtEndOfNode","selectRange","payload","nodeOrNodes","Array","isArray"],"mappings":"AAAA,SAAqBA,SAArB,EAAuCC,QAAvC,EAAiDC,OAAjD,QAAgE,oBAAhE;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,UAAD,EAAyBC,IAAzB,EAAyC;AAAA,0BAC5BD,UAAU,CAACE,KADiB;AAAA,MAChDC,KADgD,qBAC3DC,SAD2D;AAAA,MACzCC,QADyC,qBACzCA,QADyC;AAEnE,MAAMD,SAAS,GAAGR,SAAS,CAACU,MAAV,CAChBH,KAAK,CAACI,iBAAN,CAAwBN,IAAxB,EAA8BD,UAA9B,EAA0CQ,mBAA1C,CAA8DH,QAA9D,CADgB,CAAlB;AAGA,SAAOL,UAAU,CAACS,OAAX,CAAmBZ,QAAQ,CAACa,MAA5B,EAAoCN,SAApC,CAAP;AACD,CAND;;AAQA,IAAMO,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACX,UAAD,EAAyBY,KAAzB,EAA4C;AACvE,MAAMC,UAAU,GAAGD,KAAK,CAAC,CAAD,CAAxB;AACA,MAAME,QAAQ,GAAGF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAtB;AACA,MAAMC,MAAM,GAAGhB,UAAU,CAACiB,KAAX,CAAiBnB,OAAO,CAACoB,kBAAzB,EAA6CL,UAA7C,CAAf;AACA,MAAMM,KAAK,GAAGnB,UAAU,CAACiB,KAAX,CAAiBnB,OAAO,CAACsB,gBAAzB,EAA2CN,QAA3C,CAAd;AACA,MAAMV,SAAS,GAAGR,SAAS,CAACU,MAAV,CAAiB;AAAEU,IAAAA,MAAM,EAANA,MAAF;AAAUG,IAAAA,KAAK,EAALA;AAAV,GAAjB,CAAlB;AAEA,SAAOnB,UAAU,CAACS,OAAX,CAAmBZ,QAAQ,CAACa,MAA5B,EAAoCN,SAApC,CAAP;AACD,CARD;;AAUA,IAAMiB,WAAW,GAAG,SAAdA,WAAc,CAACrB,UAAD,EAAyBsB,OAAzB,EAA0C;AAAA,MACpDC,WADoD,GACpCD,OADoC,CACpDC,WADoD;;AAE5D,MAAIC,KAAK,CAACC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC9B,WAAOZ,oBAAoB,CAACX,UAAD,EAAauB,WAAb,CAA3B;AACD,GAFD,MAEO;AACL,WAAOxB,mBAAmB,CAACC,UAAD,EAAauB,WAAb,CAA1B;AACD;AACF,CAPD;;AASA,eAAeF,WAAf","sourcesContent":["import { Controller, Selection, Block, Commands, Queries } from '@ali/4ever-cangjie';\n\nconst selectRangeFromNode = (controller: Controller, node: Block) => {\n  const { selection: range, document } = controller.value;\n  const selection = Selection.create(\n    range.moveToRangeOfNode(node, controller).convertToTextPoints(document),\n  );\n  return controller.command(Commands.select, selection);\n};\n\nconst selectRangeFromNodes = (controller: Controller, nodes: Block[]) => {\n  const startBlock = nodes[0];\n  const endBlock = nodes[nodes.length - 1];\n  const anchor = controller.query(Queries.pointAtStartOfNode, startBlock);\n  const focus = controller.query(Queries.pointAtEndOfNode, endBlock);\n  const selection = Selection.create({ anchor, focus });\n\n  return controller.command(Commands.select, selection);\n};\n\nconst selectRange = (controller: Controller, payload: any) => {\n  const { nodeOrNodes } = payload;\n  if (Array.isArray(nodeOrNodes)) {\n    return selectRangeFromNodes(controller, nodeOrNodes);\n  } else {\n    return selectRangeFromNode(controller, nodeOrNodes);\n  }\n};\n\nexport default selectRange;\n"],"file":"selectRange.js"}