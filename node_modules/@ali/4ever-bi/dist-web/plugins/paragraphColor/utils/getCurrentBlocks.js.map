{"version":3,"sources":["../../../../../src/plugins/paragraphColor/utils/getCurrentBlocks.ts"],"names":["Block","ListGroupPlugin","List","isListGroupAvailable","utils","getCurrentBlocks","controller","key","value","document","selection","path","getPath","targetNode","getNodeByPath","isBlock","blocks","query","isCollapsed","isList","listNodesKeys","getNodesAtRange","filter","map","node","includes"],"mappings":"AAAA,SAAqBA,KAArB,QAAkC,oBAAlC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,IAAT,QAAqB,wBAArB;IAEQC,oB,GAAyBF,eAAe,CAACG,K,CAAzCD,oB,EAER;;AACA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,UAAD,EAAyBC,GAAzB,EAAyC;AAAA,0BAChCD,UAAU,CAACE,KADqB;AAAA,MACxDC,QADwD,qBACxDA,QADwD;AAAA,MAC9CC,SAD8C,qBAC9CA,SAD8C;AAEhE,MAAMC,IAAI,GAAGF,QAAQ,CAACG,OAAT,CAAiBL,GAAjB,CAAb;AACA,MAAMM,UAAU,GAAGJ,QAAQ,CAACK,aAAT,CAAuBH,IAAvB,CAAnB;;AAEA,MAAI,CAACX,KAAK,CAACe,OAAN,CAAcF,UAAd,CAAL,EAAgC;AAC9B,WAAO,EAAP;AACD;;AAED,MAAMG,MAAM,GAAGV,UAAU,CAACW,KAAX,CAAiB,2BAAjB,EAA8CJ,UAA9C,KAA6D,EAA5E,CATgE,CAWhE;;AAXgE,MAYxDK,WAZwD,GAYxCR,SAZwC,CAYxDQ,WAZwD;;AAahE,MAAIA,WAAJ,EAAiB;AACf,QAAIf,oBAAoB,CAACG,UAAD,CAApB,IAAoCJ,IAAI,CAACiB,MAAL,CAAYH,MAAM,CAAC,CAAD,CAAlB,CAAxC,EAAgE;AAC9D,aAAO,CAACA,MAAM,CAAC,CAAD,CAAP,CAAP;AACD;AACF,GAJD,MAIO;AACL,QAAMI,aAAa,GACjBX,QAAQ,CAACY,eAAT,CAAyBX,SAAzB,EAAoCY,MAApC,CAA2CpB,IAAI,CAACiB,MAAhD,EAAwDI,GAAxD,CAA4D,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACjB,GAAf;AAAA,KAA5D,CADF;AAEA,WAAOS,MAAM,CAACM,MAAP,CAAc,UAACE,IAAD;AAAA,aAAU,CAACtB,IAAI,CAACiB,MAAL,CAAYK,IAAZ,CAAD,IAAsBJ,aAAa,CAACK,QAAd,CAAuBD,IAAI,CAACjB,GAA5B,CAAhC;AAAA,KAAd,CAAP;AACD;;AAED,SAAOS,MAAP;AACD,CAxBD;;AA0BA,eAAeX,gBAAf","sourcesContent":["import { Controller, Block } from '@ali/4ever-cangjie';\nimport { ListGroupPlugin } from '@ali/4ever-bamboo';\nimport { List } from '@ali/4ever-plugin-list';\n\nconst { isListGroupAvailable } = ListGroupPlugin.utils;\n\n// 根据 currentBlock.key 获取对应的 nodes\nconst getCurrentBlocks = (controller: Controller, key: string) => {\n  const { document, selection } = controller.value;\n  const path = document.getPath(key);\n  const targetNode = document.getNodeByPath(path);\n\n  if (!Block.isBlock(targetNode)) {\n    return [];\n  }\n\n  const blocks = controller.query('getSiblingDraggableBlocks', targetNode) || [];\n\n  // 折叠模式下，仅对折叠的列表节点设置样式\n  const { isCollapsed } = selection;\n  if (isCollapsed) {\n    if (isListGroupAvailable(controller) && List.isList(blocks[0])) {\n      return [blocks[0]];\n    }\n  } else {\n    const listNodesKeys = \n      document.getNodesAtRange(selection).filter(List.isList).map((node) => node.key);\n    return blocks.filter((node) => !List.isList(node) || listNodesKeys.includes(node.key));\n  }\n\n  return blocks;\n};\n\nexport default getCurrentBlocks;\n"],"file":"getCurrentBlocks.js"}