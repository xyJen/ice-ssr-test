/* eslint-disable @typescript-eslint/no-shadow */
import React, { useState, useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ColorPanel } from '@ali/we-design';
import { PluginRoles } from '@ali/4ever-bamboo';
import { setParagraphColor, setParagraphBgColor } from "./actions";

var createColorPanelMenu = function createColorPanelMenu() {
  return function (props) {
    var controller = props.controller,
        currentBlock = props.menuItem.currentBlock;
    var initialColor = useMemo(function () {
      return controller.query('getParagraphColor', {
        node: currentBlock
      });
    }, [controller, currentBlock]);
    var initialBgColor = useMemo(function () {
      return controller.query('getParagraphBgColor', {
        node: currentBlock
      });
    }, [controller, currentBlock]);

    var _useState = useState(initialColor),
        color = _useState[0],
        setColor = _useState[1];

    var _useState2 = useState(initialBgColor),
        bgColor = _useState2[0],
        setBgColor = _useState2[1];

    var handleColorClick = useCallback(function (color) {
      controller.run('onAction', setParagraphColor({
        node: currentBlock,
        color: color
      }));
      setColor(color);
    }, [controller, currentBlock]);
    var handleBackgroundClick = useCallback(function (color) {
      controller.run('onAction', setParagraphBgColor({
        node: currentBlock,
        color: color
      }));
      setBgColor(color);
    }, [controller, currentBlock]);
    return /*#__PURE__*/_createElement(ColorPanel, {
      color: color,
      backgroundColor: bgColor,
      onColorClick: handleColorClick,
      onBackgroundColorClick: handleBackgroundClick,
      enableResetButton: true,
      role: PluginRoles.paragraphColor
    });
  };
};

export default createColorPanelMenu;
//# sourceMappingURL=menu.js.map