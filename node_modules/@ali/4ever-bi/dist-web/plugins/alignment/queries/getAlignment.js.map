{"version":3,"sources":["../../../../../src/plugins/alignment/queries/getAlignment.ts"],"names":["Heading","Paragraph","getBlocksFromEditor","DEFAULT_ALIGNMENT","getAlignmentOfBlock","block","alignment","data","jc","getAlignment","controller","node","paragraphs","curBlock","value","document","getClosestBlock","key","blocks","filter","isParagraph","isHeading","length","commonAlignment","some","paragraph","currentAlignment","undefined"],"mappings":"AACA,SAASA,OAAT,EAAkBC,SAAlB,QAAmC,eAAnC;AACA,SAASC,mBAAT,QAAqC,kBAArC;AAEA,IAAMC,iBAAiB,GAAG,MAA1B;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAA2C;AACzC,MAAMC,SAAS,GAAGD,KAAK,GACnBA,KAAK,CAACE,IAAN,CAAWC,EAAX,IAAiBL,iBADE,GAEnBA,iBAFJ;AAGA,SAAOG,SAAS,KAAK,YAAd,GACH,SADG,GAEHA,SAFJ;AAGD;;AAED,eAAe,SAASG,YAAT,CAAsBC,UAAtB,EAA8CC,IAA9C,EAAqE;AAClF,MAAIC,UAAJ;;AACA,MAAID,IAAJ,EAAU;AACR,QAAME,QAAQ,GAAGH,UAAU,CAACI,KAAX,CAAiBC,QAAjB,CAA0BC,eAA1B,CAA0CL,IAAI,CAACM,GAA/C,CAAjB;AACAL,IAAAA,UAAU,GAAGC,QAAQ,GAAG,CAACA,QAAD,CAAH,GAAgB,EAArC;AACD,GAHD,MAGO;AACL,QAAMK,MAAM,GAAGhB,mBAAmB,CAACQ,UAAD,CAAlC;AACAE,IAAAA,UAAU,GAAGM,MAAM,CAACC,MAAP,CACX,UAAAd,KAAK;AAAA,aAAIJ,SAAS,CAACmB,WAAV,CAAsBf,KAAtB,KAAgCL,OAAO,CAACqB,SAAR,CAAkBhB,KAAlB,CAApC;AAAA,KADM,CAAb;AAGD;;AACD,MAAIO,UAAU,CAACU,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,WAAOlB,mBAAmB,CAACQ,UAAU,CAAC,CAAD,CAAX,CAA1B;AACD;;AAED,MAAIW,eAAJ;AACAX,EAAAA,UAAU,CAACY,IAAX,CAAgB,UAAAC,SAAS,EAAI;AAC3B,QAAMC,gBAAgB,GAAGtB,mBAAmB,CAACqB,SAAD,CAA5C;;AACA,QAAIF,eAAe,IAAIG,gBAAgB,KAAKH,eAA5C,EAA6D;AAC3DA,MAAAA,eAAe,GAAGI,SAAlB;AACA,aAAO,IAAP;AACD;;AACDJ,IAAAA,eAAe,GAAGG,gBAAlB;AACA,WAAO,KAAP;AACD,GARD;AAUA,SAAOH,eAAP;AACD","sourcesContent":["import { Block, Controller, Inline } from '@ali/4ever-cangjie';\nimport { Heading, Paragraph } from '@ali/4ever-mo';\nimport { getBlocksFromEditor }  from '@ali/4ever-utils';\n\nconst DEFAULT_ALIGNMENT = 'left';\n\nfunction getAlignmentOfBlock(block: Block) {\n  const alignment = block\n    ? block.data.jc || DEFAULT_ALIGNMENT\n    : DEFAULT_ALIGNMENT;\n  return alignment === 'distribute'\n    ? 'justify'\n    : alignment;\n}\n\nexport default function getAlignment(controller: Controller, node?: Inline | Block) {\n  let paragraphs;\n  if (node) {\n    const curBlock = controller.value.document.getClosestBlock(node.key);\n    paragraphs = curBlock ? [curBlock] : [];\n  } else {\n    const blocks = getBlocksFromEditor(controller);\n    paragraphs = blocks.filter(\n      block => Paragraph.isParagraph(block) || Heading.isHeading(block),\n    );\n  }\n  if (paragraphs.length === 1) {\n    return getAlignmentOfBlock(paragraphs[0]);\n  }\n\n  let commonAlignment;\n  paragraphs.some(paragraph => {\n    const currentAlignment = getAlignmentOfBlock(paragraph);\n    if (commonAlignment && currentAlignment !== commonAlignment) {\n      commonAlignment = undefined;\n      return true;\n    }\n    commonAlignment = currentAlignment;\n    return false;\n  });\n\n  return commonAlignment;\n}\n"],"file":"getAlignment.js"}