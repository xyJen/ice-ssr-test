{"version":3,"sources":["../../../../../src/plugins/alignment/components/createAlignmentButton.tsx"],"names":["React","capitalize","AlignLeft","AlignRight","AlignCenter","AlignJustify","setAlignment","shortcut","createAlignmentButton","type","AlignmentButton","props","controller","locale","rest","isActive","query","handleClick","useCallback","run","isCollapsedAtEdge","value","selection","isDisabled","Button"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAASC,UAAT,QAA2B,WAA3B;AAEA,SACEC,SADF,EAEEC,UAFF,EAGEC,WAHF,EAIEC,YAJF,QAMO,iBANP;AAOA,SAASC,YAAT;AACA,SAASC,QAAT;AACA;AAOA,eAAe,SAASC,qBAAT,CAA+BC,IAA/B,EAA6C;AAC1D,SAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAsD;AAAA,QACnDC,UADmD,GACnBD,KADmB,CACnDC,UADmD;AAAA,QACvCC,MADuC,GACnBF,KADmB,CACvCE,MADuC;AAAA,QAC5BC,IAD4B,iCACnBH,KADmB;;AAE3D,QAAMI,QAAQ,GAAGH,UAAU,CAACI,KAAX,CAAiB,cAAjB,MAAqCP,IAAtD;AAEA,QAAMQ,WAAW,GAAGjB,KAAK,CAACkB,WAAN,CAAkB;AAAA,aAAMN,UAAU,CAACO,GAAX,CAAe,UAAf,EAA2Bb,YAAY,CAACG,IAAD,CAAvC,CAAN;AAAA,KAAlB,EAAwE,CAACG,UAAD,CAAxE,CAApB;AAJ2D,QAMnDQ,iBANmD,GAM7BR,UAAU,CAACS,KAAX,CAAiBC,SANY,CAMnDF,iBANmD;AAO3D,QAAMG,UAAU,GAAGH,iBAAiB,IAC/BR,UAAU,CAACI,KAAX,CAAiB,iBAAjB,CADc,IAEdJ,UAAU,CAACI,KAAX,CAAiB,uBAAjB,CAFc,IAGdJ,UAAU,CAACI,KAAX,CAAiB,yBAAjB,CAHL;AAKA,QAAIQ,MAAJ;;AACA,YAAQf,IAAR;AACE,WAAK,MAAL;AACEe,QAAAA,MAAM,GAAGtB,SAAT;AACA;;AACF,WAAK,OAAL;AACEsB,QAAAA,MAAM,GAAGrB,UAAT;AACA;;AACF,WAAK,QAAL;AACEqB,QAAAA,MAAM,GAAGpB,WAAT;AACA;;AACF;AACEoB,QAAAA,MAAM,GAAGnB,YAAT;AACA;AAZJ;;AAcA,wBACE,eAAC,MAAD,eACMS,IADN;AAEE,MAAA,YAAY,EAAEP,QAAQ,CAACE,IAAD,CAFxB;AAGE,MAAA,MAAM,wBAAsBA,IAH9B;AAIE,MAAA,MAAM,EAAEM,QAJV;AAKE,MAAA,OAAO,EAAEE,WALX;AAME,MAAA,QAAQ,EAAEM,UANZ;AAOE,MAAA,IAAI,YAAUtB,UAAU,CAACQ,IAAD;AAP1B,OADF;AAWD,GAtCD;AAuCD","sourcesContent":["import * as React from 'react';\nimport { capitalize } from 'lodash-es';\nimport { Controller } from '@ali/4ever-cangjie';\nimport {\n  AlignLeft,\n  AlignRight,\n  AlignCenter,\n  AlignJustify,\n  IconButtonPropsOmit,\n} from '@ali/we-toolbar';\nimport { setAlignment } from '../actions';\nimport { shortcut } from '../utils/getTipsByType';\n;\n\nexport interface AlignmentButtonProps {\n  controller: Controller;\n  locale: Record<string, string>;\n}\n\nexport default function createAlignmentButton(type: string) {\n  return function AlignmentButton(props: AlignmentButtonProps) {\n    const { controller, locale, ...rest } = props;\n    const isActive = controller.query('getAlignment') === type;\n\n    const handleClick = React.useCallback(() => controller.run('onAction', setAlignment(type)), [controller]);\n\n    const { isCollapsedAtEdge } = controller.value.selection;\n    const isDisabled = isCollapsedAtEdge\n      || controller.query('isSelectionInHr')\n      || controller.query('isSelectionInTaskList')\n      || controller.query('isSelectionInListSymbol');\n\n    let Button: React.FC<IconButtonPropsOmit>;\n    switch (type) {\n      case 'left':\n        Button = AlignLeft;\n        break;\n      case 'right':\n        Button = AlignRight;\n        break;\n      case 'center':\n        Button = AlignCenter;\n        break;\n      default:\n        Button = AlignJustify;\n        break;\n    }\n    return (\n      <Button\n        {...rest}\n        shortcutText={shortcut[type]}\n        testid={`bi-toolbar-align_${type}`}\n        active={isActive}\n        onClick={handleClick}\n        disabled={isDisabled}\n        role={`align${capitalize(type)}`}\n      />\n    );\n  };\n}\n"],"file":"createAlignmentButton.js"}