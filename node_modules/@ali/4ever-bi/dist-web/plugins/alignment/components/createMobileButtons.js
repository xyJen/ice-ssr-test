/* eslint-disable no-param-reassign */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { setAlignment } from "../actions";
var MOBILE_TOOLBAR = {
  left: 'alignLeft',
  right: 'alignRight',
  center: 'alignCenter',
  justify: 'alignBoth'
};

function useDisabledAndClick(controller, type) {
  var handleClick = React.useCallback(function () {
    return controller.run('onAction', setAlignment(type));
  }, [controller, type]);
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge;
  return {
    isDisabled: isDisabled,
    handleClick: handleClick
  };
}

export default function createMobileHeading(locale) {
  return Object.keys(MOBILE_TOOLBAR).reduce(function (result, type) {
    result[type + "MobileBig"] = function (props) {
      var controller = props.controller,
          Wrapper = props.Wrapper,
          item = props.item;
      var isActive = controller.query('getAlignment') === type; // eslint-disable-next-line react-hooks/rules-of-hooks

      var _useDisabledAndClick = useDisabledAndClick(controller, type),
          isDisabled = _useDisabledAndClick.isDisabled,
          handleClick = _useDisabledAndClick.handleClick;

      var icon = MOBILE_TOOLBAR[type];
      return /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "big",
        isFocused: isActive,
        isDisabled: isDisabled,
        icon: icon,
        onClick: handleClick
      });
    };

    result[type + "Mobile"] = function (props) {
      var controller = props.controller,
          Wrapper = props.Wrapper,
          item = props.item;
      var isActive = controller.query('getAlignment') === type; // eslint-disable-next-line react-hooks/rules-of-hooks

      var _useDisabledAndClick2 = useDisabledAndClick(controller, type),
          isDisabled = _useDisabledAndClick2.isDisabled,
          handleClick = _useDisabledAndClick2.handleClick;

      var icon = MOBILE_TOOLBAR[type];
      return /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "horiz",
        isActive: isActive,
        isDisabled: isDisabled,
        icon: icon,
        onClick: handleClick
      });
    };

    return result;
  }, {});
}
//# sourceMappingURL=createMobileButtons.js.map