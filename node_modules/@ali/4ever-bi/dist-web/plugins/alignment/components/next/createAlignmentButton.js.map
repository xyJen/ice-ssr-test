{"version":3,"sources":["../../../../../../src/plugins/alignment/components/next/createAlignmentButton.tsx"],"names":["React","capitalize","AlignLeftButton","AlignRightButton","AlignCenterButton","AlignJustifyButton","setAlignment","shortcut","createAlignmentButton","type","titleKey","tooltipKey","AlignButton","props","controller","disabled","locale","title","tooltipProp","tooltip","rest","isActive","query","handleClick","useCallback","run","isCollapsedAtEdge","value","selection","isDisabled","Button","useMemo","shortCut","description"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAASC,UAAT,QAA2B,WAA3B;AAEA,SACEC,eADF,EAEEC,gBAFF,EAGEC,iBAHF,EAIEC,kBAJF,QAOO,sBAPP;AAQA,SAASC,YAAT;AACA,SAASC,QAAT;AACA;AAOA,eAAe,SAASC,qBAAT,CAA+BC,IAA/B,EAA8EC,QAA9E,EAAiGC,UAAjG,EAAsH;AAEnI,MAAMC,WAA2C,GAAG,SAA9CA,WAA8C,CAACC,KAAD,EAAW;AAAA,QACrDC,UADqD,GACkBD,KADlB,CACrDC,UADqD;AAAA,QACzCC,QADyC,GACkBF,KADlB,CACzCE,QADyC;AAAA,QAC/BC,MAD+B,GACkBH,KADlB,CAC/BG,MAD+B;AAAA,QACvBC,KADuB,GACkBJ,KADlB,CACvBI,KADuB;AAAA,QACPC,WADO,GACkBL,KADlB,CAChBM,OADgB;AAAA,QACSC,IADT,iCACkBP,KADlB;;AAE7D,QAAMQ,QAAQ,GAAGP,UAAU,CAACQ,KAAX,CAAiB,cAAjB,MAAqCb,IAAtD;AAEA,QAAMc,WAAW,GAAGvB,KAAK,CAACwB,WAAN,CAAkB;AAAA,aAAMV,UAAU,CAACW,GAAX,CAAe,UAAf,EAA2BnB,YAAY,CAACG,IAAD,CAAvC,CAAN;AAAA,KAAlB,EAAwE,CAACK,UAAD,CAAxE,CAApB;AAJ6D,QAMrDY,iBANqD,GAM/BZ,UAAU,CAACa,KAAX,CAAiBC,SANc,CAMrDF,iBANqD;AAQ7D,QAAMG,UAAU,GAAGd,QAAQ,IAAIW,iBAAZ,IACdZ,UAAU,CAACQ,KAAX,CAAiB,iBAAjB,CADc,IAEdR,UAAU,CAACQ,KAAX,CAAiB,uBAAjB,CAFc,IAGdR,UAAU,CAACQ,KAAX,CAAiB,yBAAjB,CAHL;AAKA,QAAIQ,MAAJ;;AACA,YAAQrB,IAAR;AACE,WAAK,MAAL;AACEqB,QAAAA,MAAM,GAAG5B,eAAT;AACA;;AACF,WAAK,OAAL;AACE4B,QAAAA,MAAM,GAAG3B,gBAAT;AACA;;AACF,WAAK,QAAL;AACE2B,QAAAA,MAAM,GAAG1B,iBAAT;AACA;;AACF;AACE0B,QAAAA,MAAM,GAAGzB,kBAAT;AACA;AAZJ;;AAeA,QAAMc,OAAO,GAAGnB,KAAK,CAAC+B,OAAN,CAAc;AAAA;AAC5Bd,QAAAA,KAAK,EAAEA,KAAK,IAAKP,QAAQ,IAAIM,MAAZ,IAAsBA,MAAM,CAACN,QAAD,CADjB;AAE5BsB,QAAAA,QAAQ,EAAEzB,QAAQ,CAACE,IAAD,CAFU;AAG5BwB,QAAAA,WAAW,EAAEtB,UAAU,IAAIK,MAAd,IAAwBA,MAAM,CAACL,UAAD;AAHf,SAIzBO,WAJyB;AAAA,KAAd,EAKZ,CAACT,IAAD,EAAOQ,KAAP,CALY,CAAhB;AAOA,wBACE,eAAC,MAAD;AACE,MAAA,MAAM,wBAAsBR,IAD9B;AAEE,MAAA,MAAM,EAAEY,QAFV;AAGE,MAAA,OAAO,EAAEE,WAHX;AAIE,MAAA,QAAQ,EAAEM,UAJZ;AAKE,MAAA,IAAI,YAAU5B,UAAU,CAACQ,IAAD,CAL1B;AAME,MAAA,KAAK,EAAEQ,KAAK,IAAKP,QAAQ,IAAIM,MAAZ,IAAsBA,MAAM,CAACN,QAAD,CAN/C;AAOE,MAAA,OAAO,EAAES;AAPX,OAQMC,IARN,EADF;AAYD,GAhDD;;AAkDA,SAAOR,WAAP;AAED","sourcesContent":["import * as React from 'react';\nimport { capitalize } from 'lodash-es';\nimport { Controller } from '@ali/4ever-cangjie';\nimport {\n  AlignLeftButton,\n  AlignRightButton,\n  AlignCenterButton,\n  AlignJustifyButton,\n  IIconButtonProps,\n  IToolbarButtonConfig,\n} from '@ali/4ever-component';\nimport { setAlignment } from '../../actions';\nimport { shortcut } from '../../utils/getTipsByType';\n;\n\nexport interface AlignmentButtonProps extends IToolbarButtonConfig {\n  controller: Controller,\n  locale?: Record<string, string>;\n}\n\nexport default function createAlignmentButton(type: 'left' | 'right' | 'center' | 'justify', titleKey?: string, tooltipKey?: string) {\n\n  const AlignButton: React.FC<AlignmentButtonProps> = (props) => {\n    const { controller, disabled, locale, title, tooltip: tooltipProp, ...rest } = props;\n    const isActive = controller.query('getAlignment') === type;\n\n    const handleClick = React.useCallback(() => controller.run('onAction', setAlignment(type)), [controller]);\n\n    const { isCollapsedAtEdge } = controller.value.selection;\n\n    const isDisabled = disabled || isCollapsedAtEdge\n      || controller.query('isSelectionInHr')\n      || controller.query('isSelectionInTaskList')\n      || controller.query('isSelectionInListSymbol');\n\n    let Button: React.FC<IIconButtonProps>;\n    switch (type) {\n      case 'left':\n        Button = AlignLeftButton;\n        break;\n      case 'right':\n        Button = AlignRightButton;\n        break;\n      case 'center':\n        Button = AlignCenterButton;\n        break;\n      default:\n        Button = AlignJustifyButton;\n        break;\n    }\n\n    const tooltip = React.useMemo(() => ({\n      title: title || (titleKey && locale && locale[titleKey]),\n      shortCut: shortcut[type],\n      description: tooltipKey && locale && locale[tooltipKey],\n      ...tooltipProp,\n    }), [type, title]);\n\n    return (\n      <Button\n        testid={`bi-toolbar-align_${type}`}\n        active={isActive}\n        onClick={handleClick}\n        disabled={isDisabled}\n        role={`align${capitalize(type)}`}\n        title={title || (titleKey && locale && locale[titleKey])}\n        tooltip={tooltip}\n        {...rest}\n      />\n    );\n  };\n\n  return AlignButton;\n\n}\n\n"],"file":"createAlignmentButton.js"}