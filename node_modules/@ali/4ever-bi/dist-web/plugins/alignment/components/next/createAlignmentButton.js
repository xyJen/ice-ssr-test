import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { capitalize } from 'lodash-es';
import { AlignLeftButton, AlignRightButton, AlignCenterButton, AlignJustifyButton } from '@ali/4ever-component';
import { setAlignment } from "../../actions";
import { shortcut } from "../../utils/getTipsByType";
;
export default function createAlignmentButton(type, titleKey, tooltipKey) {
  var AlignButton = function AlignButton(props) {
    var controller = props.controller,
        disabled = props.disabled,
        locale = props.locale,
        title = props.title,
        tooltipProp = props.tooltip,
        rest = _objectWithoutPropertiesLoose(props, ["controller", "disabled", "locale", "title", "tooltip"]);

    var isActive = controller.query('getAlignment') === type;
    var handleClick = React.useCallback(function () {
      return controller.run('onAction', setAlignment(type));
    }, [controller]);
    var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
    var isDisabled = disabled || isCollapsedAtEdge || controller.query('isSelectionInHr') || controller.query('isSelectionInTaskList') || controller.query('isSelectionInListSymbol');
    var Button;

    switch (type) {
      case 'left':
        Button = AlignLeftButton;
        break;

      case 'right':
        Button = AlignRightButton;
        break;

      case 'center':
        Button = AlignCenterButton;
        break;

      default:
        Button = AlignJustifyButton;
        break;
    }

    var tooltip = React.useMemo(function () {
      return _extends({
        title: title || titleKey && locale && locale[titleKey],
        shortCut: shortcut[type],
        description: tooltipKey && locale && locale[tooltipKey]
      }, tooltipProp);
    }, [type, title]);
    return /*#__PURE__*/_createElement(Button, _extends({
      testid: "bi-toolbar-align_" + type,
      active: isActive,
      onClick: handleClick,
      disabled: isDisabled,
      role: "align" + capitalize(type),
      title: title || titleKey && locale && locale[titleKey],
      tooltip: tooltip
    }, rest));
  };

  return AlignButton;
}
//# sourceMappingURL=createAlignmentButton.js.map