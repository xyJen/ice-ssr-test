import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { HorizontalAlignSelect } from '@ali/4ever-component';
import { PluginRoles } from '@ali/4ever-bamboo';
import { setAlignment } from "../../actions";
;
export default function AlignmentButton(props) {
  var controller = props.controller,
      locale = props.locale,
      options = props.options,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "options"]);

  var alignment = controller.query('getAlignment') || 'left';
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInListSymbol');
  var handleChange = React.useCallback(function (value) {
    controller.run('onAction', setAlignment(value));
  }, [controller]);
  var selectOptions = React.useMemo(function () {
    var _options$left, _options$left2, _options$center, _options$center2, _options$right, _options$right2, _options$justify, _options$justify2;

    return {
      left: {
        title: (options == null ? void 0 : (_options$left = options.left) == null ? void 0 : _options$left.title) || locale.dropdownLeft,
        icon: options == null ? void 0 : (_options$left2 = options.left) == null ? void 0 : _options$left2.icon
      },
      center: {
        title: (options == null ? void 0 : (_options$center = options.center) == null ? void 0 : _options$center.title) || locale.dropdownCenter,
        icon: options == null ? void 0 : (_options$center2 = options.center) == null ? void 0 : _options$center2.icon
      },
      right: {
        title: (options == null ? void 0 : (_options$right = options.right) == null ? void 0 : _options$right.title) || locale.dropdownRight,
        icon: options == null ? void 0 : (_options$right2 = options.right) == null ? void 0 : _options$right2.icon
      },
      justify: {
        title: (options == null ? void 0 : (_options$justify = options.justify) == null ? void 0 : _options$justify.title) || locale.dropdownJustify,
        icon: options == null ? void 0 : (_options$justify2 = options.justify) == null ? void 0 : _options$justify2.icon
      }
    };
  }, [locale, options]);
  return /*#__PURE__*/_createElement(HorizontalAlignSelect, _extends({
    onChange: handleChange,
    value: alignment,
    testid: "bi-toolbar-align",
    disabled: !!isDisabled,
    tooltip: (locale == null ? void 0 : locale.buttonTitle) || '',
    role: PluginRoles.alignSelect,
    options: selectOptions
  }, rest));
}
//# sourceMappingURL=AlignmentButton.js.map