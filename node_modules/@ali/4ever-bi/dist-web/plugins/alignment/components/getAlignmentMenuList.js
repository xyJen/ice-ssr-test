import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { SubMenu, MenuItem } from '@ali/we-design';
import { capitalize } from 'lodash-es';
import getAlignment from "../queries/getAlignment";
import { setAlignment } from "../actions";
import { ALIGN_LEFT_HOT_KEY, ALIGN_CENTER_HOT_KEY, ALIGN_JUSTIFY_HOT_KEY, ALIGN_RIGHT_HOT_KEY } from "../utils/hotkeyTips";

function getActionList(locale) {
  var actionList = [{
    key: 'left',
    text: locale.dropdownLeft,
    shortcut: ALIGN_LEFT_HOT_KEY
  }, {
    key: 'center',
    text: locale.dropdownCenter,
    shortcut: ALIGN_CENTER_HOT_KEY
  }, {
    key: 'right',
    text: locale.dropdownRight,
    shortcut: ALIGN_RIGHT_HOT_KEY
  }, {
    key: 'justify',
    text: locale.dropdownJustify,
    shortcut: ALIGN_JUSTIFY_HOT_KEY
  }];
  return actionList;
}

var getAlimentFromProps = function getAlimentFromProps(controller) {
  return getAlignment(controller) || 'left';
};

var isDisabled = function isDisabled(controller) {
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;

  if (isCollapsedAtEdge) {
    return false;
  }

  return !!controller.query('isSelectionInHr');
};

var renderSubMenu = function renderSubMenu(props) {
  var controller = props.controller,
      locale = props.locale,
      menuItem = props.menuItem;
  var alignment = getAlimentFromProps(controller);
  var actionList = getActionList(locale);

  var handleClick = function handleClick(key) {
    var alignType = key.split('_')[1];
    controller.run('onAction', setAlignment(alignType));
  };

  var aligns = actionList.map(function (align) {
    var key = "alignment_" + align.key;
    return /*#__PURE__*/_createElement(MenuItem, {
      selected: alignment === align.key,
      menuKey: key,
      key: key,
      onClick: handleClick,
      extra: align.shortcut,
      role: "align" + capitalize(align.key)
    }, align.text);
  });
  return /*#__PURE__*/_createElement(SubMenu, _extends({}, menuItem, {
    title: menuItem.title || '',
    disabled: isDisabled(controller)
  }), aligns);
};

export default renderSubMenu;
//# sourceMappingURL=getAlignmentMenuList.js.map