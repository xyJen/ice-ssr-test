import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { HorizontalAlignSelect as OriginHorizontalAlignSelect } from '@ali/we-toolbar';
import { PluginRoles, useScrollableContent } from '@ali/4ever-bamboo';
import { setAlignment } from "../actions";
import { shortcut } from "../utils/getTipsByType";
;
import { ToolbarMode } from '@ali/4ever-component';
var HorizontalAlignSelect = /*#__PURE__*/React.memo(OriginHorizontalAlignSelect);
var SUPPORT_ALIGNMENT = {
  left: true,
  center: true,
  right: true,
  justify: true
};
export default function AlignmentButton(props) {
  var controller = props.controller,
      locale = props.locale,
      size = props.size,
      toolbarMode = props.toolbarMode;
  var alignment = controller.query('getAlignment');
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInListSymbol');
  var handleChange = React.useCallback(function (value) {
    controller.run('onAction', setAlignment(value));
  }, [controller]);
  var scrollableContent = useScrollableContent();
  var getContainer = React.useCallback(function () {
    var defaultContainer = window.document.body;
    return scrollableContent || defaultContainer;
  }, [scrollableContent, toolbarMode]);
  return /*#__PURE__*/_createElement(HorizontalAlignSelect, {
    size: size,
    onChange: handleChange,
    value: SUPPORT_ALIGNMENT[alignment] ? alignment : 'left',
    testid: "bi-toolbar-align",
    disabled: isDisabled,
    titles: shortcut,
    tooltip: locale.buttonTitle,
    role: PluginRoles.alignSelect,
    getContainer: toolbarMode === ToolbarMode.inline ? getContainer : undefined
  });
}
//# sourceMappingURL=alignmentButton.js.map