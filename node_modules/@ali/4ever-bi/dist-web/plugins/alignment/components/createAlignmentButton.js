import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { capitalize } from 'lodash-es';
import { AlignLeft, AlignRight, AlignCenter, AlignJustify } from '@ali/we-toolbar';
import { setAlignment } from "../actions";
import { shortcut } from "../utils/getTipsByType";
;
export default function createAlignmentButton(type) {
  return function AlignmentButton(props) {
    var controller = props.controller,
        locale = props.locale,
        rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

    var isActive = controller.query('getAlignment') === type;
    var handleClick = React.useCallback(function () {
      return controller.run('onAction', setAlignment(type));
    }, [controller]);
    var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
    var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInHr') || controller.query('isSelectionInTaskList') || controller.query('isSelectionInListSymbol');
    var Button;

    switch (type) {
      case 'left':
        Button = AlignLeft;
        break;

      case 'right':
        Button = AlignRight;
        break;

      case 'center':
        Button = AlignCenter;
        break;

      default:
        Button = AlignJustify;
        break;
    }

    return /*#__PURE__*/_createElement(Button, _extends({}, rest, {
      shortcutText: shortcut[type],
      testid: "bi-toolbar-align_" + type,
      active: isActive,
      onClick: handleClick,
      disabled: isDisabled,
      role: "align" + capitalize(type)
    }));
  };
}
//# sourceMappingURL=createAlignmentButton.js.map