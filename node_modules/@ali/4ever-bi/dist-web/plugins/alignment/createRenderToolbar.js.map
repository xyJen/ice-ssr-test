{"version":3,"sources":["../../../../src/plugins/alignment/createRenderToolbar.tsx"],"names":["React","ItemSlot","SlotType","IconSelectSingleLineDefaultWidth","AlignmentButton","AlignLeftButton","AlignRightButton","AlignCenterButton","AlignJustifyButton","buttons","createRenderToolbar","locale","props","controller","buttonName","extraProps","iconSelect","Component","iconButton"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAAkCC,QAAlC,EAA4CC,QAA5C,EAAsDC,gCAAtD,QAA8F,sBAA9F;AACA,OAAOC,eAAP;AAEA,OAAOC,eAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,kBAAP;AAEA,IAAMC,OAA6E,GAAG;AACpF,oBAAkBJ,eADkE;AAEpF,qBAAmBC,gBAFiE;AAGpF,sBAAoBC,iBAHgE;AAIpF,uBAAqBC;AAJ+D,CAAtF;AAOA,eAAe,SAASE,mBAAT,CACbC,MADa,EAEE;AAGf,SAAO,UAACC,KAAD,EAAQC,UAAR,EAAuB;AAAA,QAEpBC,UAFoB,GAEOF,KAFP,CAEpBE,UAFoB;AAAA,QAERC,UAFQ,GAEOH,KAFP,CAERG,UAFQ;;AAI5B,QAAID,UAAU,KAAK,WAAnB,EAAgC;AAC9B,0BACE,eAAC,QAAD;AAAU,QAAA,OAAO,EAAEZ,QAAQ,CAACc,UAA5B;AAAwC,QAAA,KAAK,EAAEb;AAA/C,sBACE,eAAC,eAAD;AACE,QAAA,UAAU,EAAEU,UADd;AAEE,QAAA,MAAM,EAAEF;AAFV,SAGMI,UAHN,EADF,CADF;AAUD;;AAED,QAAME,SAAS,GAAGR,OAAO,CAACK,UAAD,CAAzB;;AACA,QAAIG,SAAJ,EAAe;AACb,0BACE,eAAC,QAAD;AAAU,QAAA,OAAO,EAAEf,QAAQ,CAACgB;AAA5B,sBACE,eAAC,SAAD;AACE,QAAA,UAAU,EAAEL,UADd;AAEE,QAAA,MAAM,EAAEF;AAFV,SAGMI,UAHN,EADF,CADF;AASD;;AAED,WAAO,IAAP;AACD,GA/BD;AAgCD","sourcesContent":["import * as React from 'react';\nimport { RenderToolbar, ItemKeys, ItemSlot, SlotType, IconSelectSingleLineDefaultWidth } from '@ali/4ever-component';\nimport AlignmentButton from './components/next/AlignmentButton';\nimport { AlignmentButtonProps } from './components/next/createAlignmentButton';\nimport AlignLeftButton from './components/next/AlignmentLeftButton';\nimport AlignRightButton from './components/next/AlignmentRightButton';\nimport AlignCenterButton from './components/next/AlignmentCenterButton';\nimport AlignJustifyButton from './components/next/AlignmentJustifyButton';\n\nconst buttons: Partial<Record<ItemKeys, React.ComponentType<AlignmentButtonProps>>> = {\n  'alignment.left': AlignLeftButton,\n  'alignment.right': AlignRightButton,\n  'alignment.center': AlignCenterButton,\n  'alignment.justify': AlignJustifyButton\n};\n\nexport default function createRenderToolbar(\n  locale: Record<string, string>,\n): RenderToolbar {\n\n\n  return (props, controller) => {\n\n    const { buttonName, extraProps } = props;\n\n    if (buttonName === 'alignment') {\n      return (\n        <ItemSlot display={SlotType.iconSelect} width={IconSelectSingleLineDefaultWidth}>\n          <AlignmentButton\n            controller={controller}\n            locale={locale}\n            {...extraProps}\n          />\n        </ItemSlot>\n\n      )\n    }\n\n    const Component = buttons[buttonName] as React.ComponentType<AlignmentButtonProps>;\n    if (Component) {\n      return (\n        <ItemSlot display={SlotType.iconButton}>\n          <Component\n            controller={controller}\n            locale={locale}\n            {...extraProps}\n          />\n        </ItemSlot>\n      )\n    }\n\n    return null\n  };\n}\n"],"file":"createRenderToolbar.js"}