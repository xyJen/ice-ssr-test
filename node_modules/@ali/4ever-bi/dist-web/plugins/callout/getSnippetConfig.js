import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { fuzzySearch } from '@ali/4ever-utils';
import { insertCallout } from "./actions";
import { COLOR_MAP } from '@ali/4ever-plugin-callout';

var getSnippetConfig = function getSnippetConfig(_, next) {
  var _extends2;

  var trigger = '[:ï¼š]{3}\\w*$';
  var list = Object.keys(COLOR_MAP);
  var config = {
    trigger: trigger,
    triggerPrefix: '^$',
    triggerSuffix: '^$',
    fetchItems: function () {
      var _fetchItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", list.map(function (key) {
                  return {
                    key: key,
                    title: key
                  };
                }));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function fetchItems() {
        return _fetchItems.apply(this, arguments);
      }

      return fetchItems;
    }(),
    filterItems: function () {
      var _filterItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(text, items) {
        var searchText;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                searchText = text.slice(3);

                if (searchText) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt("return", items);

              case 3:
                return _context2.abrupt("return", fuzzySearch(items, searchText, {
                  key: 'key'
                }));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function filterItems(_x, _x2) {
        return _filterItems.apply(this, arguments);
      }

      return filterItems;
    }(),
    insertSnippet: function insertSnippet(controller, item) {
      controller.run('onAction', insertCallout({
        text: '',
        type: item.key
      }));
      controller.dispatch('createTriggerMarkdownAction', {
        mdType: 'colorBlocks',
        info: item.key,
        from: 'snippet'
      });
    }
  };
  return _extends((_extends2 = {}, _extends2[trigger] = config, _extends2), next());
};

export default getSnippetConfig;
//# sourceMappingURL=getSnippetConfig.js.map