import _extends from "@babel/runtime/helpers/extends";
import { Commands, Block } from '@ali/4ever-cangjie';
import { ColorBlocks } from '@ali/4ever-mo';

function keysToBlocks(controller, keys) {
  var document = controller.value.document;
  var blocks = keys.map(function (k) {
    return document.getNode(k);
  }).filter(function (n) {
    return Block.isBlock(n);
  });
  return blocks;
}

function removeCalloutPrFlag(controller, keys) {
  controller.withoutNormalizing(function () {
    var blocks = keysToBlocks(controller, keys);
    blocks.forEach(function (b) {
      if (b.data.calloutPr) {
        var data = _extends({}, b.data);

        delete data.calloutPr;
        controller.command(Commands.setNodeByKey, b.key, {
          data: data
        });
      }
    });
  });
  return controller;
}

export function convertKeysToContainer(controller, keys) {
  var _blocks$0$data;

  var document = controller.value.document;
  var blocks = keysToBlocks(controller, keys);

  if (!blocks.length) {
    return controller;
  }
  /**
   * 如果已经转移过了，直接去除标记
   */


  var parent = document.getParent(blocks[0].key);

  if (ColorBlocks.isColorBlocks(parent)) {
    return controller.command(removeCalloutPrFlag, keys);
  }

  var prevAttrs = (_blocks$0$data = blocks[0].data) == null ? void 0 : _blocks$0$data.calloutPr;

  var _ref = prevAttrs || {},
      bgcolor = _ref.backgroundColor,
      sticker = _ref.stickerCode;

  var colorBlock = ColorBlocks.createColorBlocks({
    bgcolor: bgcolor,
    sticker: sticker,
    showstk: true
  }, []);
  var targetPath = document.getPath(blocks[0].key);
  var targetIndex = targetPath.pop();
  controller.withoutNormalizing(function () {
    controller.command(Commands.insertNodeByPath, targetPath, targetIndex, colorBlock);
    var colorBlockPath = controller.value.document.getPath(colorBlock.key);
    blocks.reverse().forEach(function (n) {
      var fromPath = controller.value.document.getPath(n.key);

      if (fromPath && colorBlockPath) {
        controller.command(Commands.moveNodeByPath, fromPath, colorBlockPath, 0);
      }
    });
  });
  return controller.command(removeCalloutPrFlag, keys);
}
//# sourceMappingURL=convertKeysToContainer.js.map