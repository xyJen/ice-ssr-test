import _extends from "@babel/runtime/helpers/extends";
import { StickerPlugin, isEmptyParagraph, CalloutPlugin } from '@ali/4ever-bamboo';
import createRenderNode from "./handlers/createRenderNode";
import * as commands from "./commands";
import createOnAction from "./handlers/createOnAction";
import menubar from "./menubar";
import createGroupNodes from "./handlers/createGroupNodes";
import createOnQuery from "./handlers/createOnQuery";
import createOnCangjieSelect from "./handlers/createOnCangjieSelect";
import onKeyDown from "./handlers/onKeyDown";
import onCangjieCopyOrCut from "./handlers/onCangjieCopyOrCut";
import onCangjieInput from "./handlers/onCangjieInput";
import queries from "./queries";
import createRenderHoverToolbar from "./createRenderHoverToolbar";
import getSnippetConfig from "./getSnippetConfig";
import * as actions from "./actions";
import { moFactory } from '@ali/4ever-plugin-color-blocks';
var DEFAULT_STICKERS = StickerPlugin.DEFAULT_STICKERS,
    Sticker = StickerPlugin.Sticker;

function createCalloutPlugin(config) {
  var _config$callout = config.callout,
      callout = _config$callout === void 0 ? {} : _config$callout;
  var locale = callout.locale;

  var stickerConfig = _extends({
    // @ts-ignore
    lang: 'zh_CN',
    // @ts-ignore
    customSticker: [DEFAULT_STICKERS]
  }, config.sticker);

  var sticker = new Sticker(stickerConfig);
  var params = {
    stickerConfig: stickerConfig,
    sticker: sticker,
    locale: callout.locale
  };
  return _extends({}, moFactory({}), {
    renderNode: createRenderNode(params),
    // Copy Cut 拦截作用于高亮块全选时
    onCangjieCopy: onCangjieCopyOrCut,
    onCangjieCut: onCangjieCopyOrCut,
    onCangjieInput: onCangjieInput,
    onCangjieSelect: createOnCangjieSelect(),
    onQuery: createOnQuery(),
    groupNodes: createGroupNodes(callout),
    onAction: createOnAction(callout),
    getNodeStyle: CalloutPlugin.getNodeStyle,
    // 作用于高亮块全选态变化时重渲
    // controller.value.data 变化可能不会引发重渲
    shouldNodeComponentUpdate: function shouldNodeComponentUpdate(prevProps, props, __, next) {
      var _data;

      if (props.value.data.selectedCallout !== prevProps.value.data.selectedCallout && (_data = props.node.data) != null && _data.calloutPr && (props.node.key === props.value.data.selectedCallout || props.node.key === prevProps.value.data.selectedCallout)) {
        return true;
      }

      return next();
    },
    // @ts-ignore 这里是 createCommands
    commands: commands,
    menubar: menubar,
    onKeyDown: onKeyDown,
    queries: queries,
    placeholder: {
      text: locale == null ? void 0 : locale.placeholder,
      when: function when(controller, node) {
        return isEmptyParagraph(node) && controller.query('getCalloutStartBlock', node) === node && controller.query('getCalloutEndBlock', node) === node;
      }
    },
    renderHoverToolbar: createRenderHoverToolbar(callout),
    getSnippetConfig: getSnippetConfig
  });
}

createCalloutPlugin.actions = actions;
export default createCalloutPlugin;
//# sourceMappingURL=index.js.map