import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TBItemSlot } from '@ali/we-design-next';
import { ColorIconMenu } from "./components/next/colorIconMenu";
import { StickerSwitchButton } from "./components/next/stickerSwitch";
import { ColorBlocks } from '@ali/4ever-mo';
export default function createRenderHoverToolbar(config) {
  var _config$locale = config.locale,
      locale = _config$locale === void 0 ? {} : _config$locale;
  return function (props, controller, getNode) {
    var buttonName = props.buttonName,
        extraProps = props.extraProps;

    var getColorBlocks = function getColorBlocks() {
      var node = getNode();
      return ColorBlocks.isColorBlocks(node) ? node : null;
    };

    if (!getColorBlocks()) return null;

    switch (buttonName) {
      case 'style':
        return /*#__PURE__*/_createElement(TBItemSlot, {
          display: "iconButton"
        }, /*#__PURE__*/_createElement(ColorIconMenu, _extends({
          controller: controller,
          getNode: getColorBlocks,
          locale: locale
        }, extraProps)));

      case 'stickerSwitch':
        return /*#__PURE__*/_createElement(TBItemSlot, {
          display: "iconButton"
        }, /*#__PURE__*/_createElement(StickerSwitchButton, {
          controller: controller,
          getNode: getColorBlocks,
          locale: locale
        }));

      default:
        return null;
    }
  };
}
//# sourceMappingURL=createRenderHoverToolbar.js.map