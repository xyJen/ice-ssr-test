import { constants, transferUtils, Block, Document } from '@ali/4ever-cangjie';
import { ColorBlocks } from '@ali/4ever-mo';
var MIME_TYPES = constants.MIME_TYPES;

var getClosestColorBlock = function getClosestColorBlock(controller) {
  var _controller$value = controller.value,
      selection = _controller$value.selection,
      document = _controller$value.document;
  var anchor = selection.anchor,
      focus = selection.focus;

  var _selection$convertToT = selection.convertToTextPoints(document),
      start = _selection$convertToT.start,
      end = _selection$convertToT.end;

  var startBlock = document.getClosest(start.key, ColorBlocks.isColorBlocks);
  var endBlock = document.getClosest(end.key, ColorBlocks.isColorBlocks);

  if (anchor.key === focus.key && anchor.key === (startBlock == null ? void 0 : startBlock.key)) {
    return null;
  }

  return startBlock === endBlock ? startBlock : null;
};

export default function onCangjieCopyOrCut(event, controller, next) {
  if (!event.clipboardData) {
    return next();
  }

  var tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    return next();
  }

  var colorBlock = getClosestColorBlock(controller);

  if (!colorBlock) {
    return next();
  }

  var _controller$value2 = controller.value,
      document = _controller$value2.document,
      selection = _controller$value2.selection;
  var pathLength = document.getPath(colorBlock.key).length;
  var fragment = document.getFragmentAtRange(selection);
  var node = fragment;

  while (pathLength && (Document.isDocument(node) || Block.isBlock(node))) {
    node = node.nodes[0];
    pathLength--;
  }

  if (!ColorBlocks.isColorBlocks(node)) {
    return next();
  }

  var targetFragment = Document.create({
    nodes: node.nodes
  });
  event.clipboardData.setData(MIME_TYPES.FRAGMENT, transferUtils.encodeFragment(targetFragment));
  return next();
}
//# sourceMappingURL=onCangjieCopyOrCut.js.map