import { Commands } from '@ali/4ever-cangjie';
import { INSERT_CALLOUT, SET_CALLOUT_STICKER_CODE, SET_CALLOUT_BACKGROUND, SET_CALLOUT_SELECTED, SET_META_DATA, CLEAR_CALLOUT_SELECTED, DELETE_CALLOUT, TRANSFORM_CALLOUT, CONVERT_KEYS_TO_CONTAINER } from "../actions";
import { createInsertCallout, deleteCallout, setCalloutStickerCode, setCalloutBackground, setCalloutSelected, setMetaData, clearCalloutSelected, convertKeysToContainer, transform } from "../commands";

function createOnAction(config) {
  return function onAction(action, controller, next) {
    var type = action.type,
        payload = action.payload;

    if (type === INSERT_CALLOUT) {
      var _ref = payload,
          text = _ref.text,
          _type = _ref.type;
      controller.command(createInsertCallout(config), text, _type);
    } else if (type === TRANSFORM_CALLOUT) {
      controller.command(transform);
    } else if (type === SET_CALLOUT_STICKER_CODE) {
      var _ref2 = payload,
          node = _ref2.node,
          stickerCode = _ref2.stickerCode;
      controller.command(setCalloutStickerCode, node.key, stickerCode);
    } else if (type === SET_META_DATA) {
      var _ref3 = payload,
          _node = _ref3.node,
          data = _ref3.data,
          needBlur = _ref3.needBlur;
      controller.command(setMetaData, _node.key, data);

      if (needBlur) {
        controller.command(Commands.blur).flush();
      }
    } else if (type === SET_CALLOUT_BACKGROUND) {
      var _ref4 = payload,
          _node2 = _ref4.node,
          background = _ref4.background;
      controller.command(setCalloutBackground, _node2.key, background);
    } else if (type === SET_CALLOUT_SELECTED) {
      var _ref5 = payload,
          _node3 = _ref5.node;
      controller.command(setCalloutSelected, _node3);
    } else if (type === CLEAR_CALLOUT_SELECTED) {
      controller.command(clearCalloutSelected);
    } else if (type === DELETE_CALLOUT) {
      var _ref6 = payload,
          _node4 = _ref6.node;
      controller.command(deleteCallout, _node4.key);
    } else if (type === CONVERT_KEYS_TO_CONTAINER) {
      var _ref7 = payload,
          keys = _ref7.keys;
      controller.command(convertKeysToContainer, keys);
    }

    return next();
  };
}

export default createOnAction;
//# sourceMappingURL=createOnAction.js.map