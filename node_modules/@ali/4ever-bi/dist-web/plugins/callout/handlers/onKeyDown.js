import isKeyHotkey from 'is-hotkey';
import { Text, Commands, hotkeys, Path } from '@ali/4ever-cangjie';
import { ColorBlocks, Paragraph, Table } from '@ali/4ever-mo';
import { isEmptyParagraph } from '@ali/4ever-bamboo';
import onEnter from "./onEnter";
export default function onKeyDown(event, controller, next) {
  var _controller$value = controller.value,
      document = _controller$value.document,
      selection = _controller$value.selection;
  var focusKey = selection.focus.key;

  if (selection.isCollapsed && hotkeys.isEnter(event)) {
    return onEnter(event, controller, next);
  }

  var colorBlocks = document.getClosest(focusKey, ColorBlocks.isColorBlocks);

  if (!colorBlocks) {
    return next();
  }

  var isBackspaceHotKey = isKeyHotkey('backspace');
  var isDeleteHotKey = isKeyHotkey('delete');

  if (isBackspaceHotKey(event) || isDeleteHotKey(event)) {
    if (colorBlocks.nodes.length === 1 && isEmptyParagraph(colorBlocks.nodes[0])) {
      event.preventDefault();
      var path = document.getPath(colorBlocks.key);
      var index = path.pop();
      var p = Paragraph.create({
        nodes: [Text.create()]
      }); // Before: 插入空段落 -> 删除高亮块
      // Now: 将高亮块中的段落移除到高亮块所在位置 -> 删除空的高亮块
      // 这样可以避免 Undo 时选区由于 remove_node 移动到高亮块前的节点末尾，无法被选区矫正纠正

      return controller.command(Commands.moveNodeByPath, Path.link(path, [index, 0]), path, index).command(Commands.removeNodeByPath, Path.link(path, [index + 1]));
    }
  } // 如果在嵌套的子元素内全选，就先忽略掉


  var closestTable = document.getClosest(focusKey, Table.isTable);
  var skipSelectAll = closestTable && colorBlocks.getNode(closestTable.key);

  if (hotkeys.isSelectAll(event) && !skipSelectAll) {
    event.preventDefault();
    return controller.command(Commands.moveAnchorToStartOfNode, colorBlocks.nodes[0]).command(Commands.moveFocusToEndOfNode, colorBlocks.nodes[colorBlocks.nodes.length - 1]);
  }

  return next();
}
//# sourceMappingURL=onKeyDown.js.map