import { Commands } from '@ali/4ever-cangjie';
import { getClosestParagraph } from '@ali/4ever-utils';
import { insertCallout } from "../actions"; // 支持中英文冒号
// 3 个冒号 (+ 空格? + type)

var calloutMarkdown = /^[:：]{3}(( )*(warning|info|danger|success|tips))?$/;
export default function onEnter(event, controller, next) {
  var value = controller.value;
  var startBlock = value.startBlock,
      selection = value.selection,
      document = value.document;
  if (!startBlock || !selection) return next();
  var closestParagraphBlock = getClosestParagraph(value);
  if (!closestParagraphBlock) return next();
  var isCollapsed = selection.isCollapsed;

  var _selection$convertToT = selection.convertToTextPoints(document),
      start = _selection$convertToT.start; // Markdown 插入高亮块
  // NOTE: 暂时未限制是否可以在容器元素内嵌套高亮块，与当前交互逻辑保持了一致


  if (isCollapsed && start.isAtEndOfNode(closestParagraphBlock)) {
    var matches = closestParagraphBlock.text.trim().match(calloutMarkdown);

    if (matches && !closestParagraphBlock.data.calloutPr) {
      event.preventDefault();
      var type = matches[matches.length - 1];
      controller.command(Commands.moveAnchorToStartOfBlock).command(Commands.del);
      controller.run('onAction', insertCallout({
        text: '',
        type: type
      }));
      return controller.dispatch('createTriggerMarkdownAction', {
        mdType: 'colorBlocks',
        info: type
      });
    }
  }

  return next();
}
//# sourceMappingURL=onEnter.js.map