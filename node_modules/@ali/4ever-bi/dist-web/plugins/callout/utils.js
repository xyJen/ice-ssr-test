import _extends from "@babel/runtime/helpers/extends";
import equal from 'fast-deep-equal';
import { Paragraph, Heading } from '@ali/4ever-mo';
import { Document, Block, Text } from '@ali/4ever-cangjie';
export function isCalloutParagraph(node) {
  return Heading.isCallout(node);
}
export function isCallout(node) {
  return Block.isBlock(node) && node.type === 'callout-group';
}
export function createCallout(props) {
  return Block.create(_extends({}, props, {
    type: 'callout-group'
  }));
}
export var condition = function condition(firstNode, nextNode) {
  return !(nextNode && (Paragraph.isParagraph(nextNode) || Heading.isHeading(nextNode)) && !!nextNode.data.calloutPr && equal(nextNode.data.calloutPr, firstNode.data.calloutPr));
};
export function findFirstBlockOfCalloutPr(document, startNode) {
  var finalNode = startNode;

  while (true) {
    var prevSibling = document.getPreviousSibling(finalNode.key);

    if (condition(startNode, prevSibling)) {
      break;
    }

    finalNode = prevSibling;
  }

  return finalNode;
} // 高亮块全选时复制生成 fragment
// TODO: 外部复制，生成 HTML

export function generateClipCallout(document, endBlock) {
  var shouldCutOrCopyBlocks = [];
  var currentBlock = endBlock;

  while (true) {
    var _currentBlock;

    if ((_currentBlock = currentBlock) != null && _currentBlock.key) {
      shouldCutOrCopyBlocks.unshift(currentBlock);
      currentBlock = document.getPreviousSibling(currentBlock.key);
    }

    if (condition(endBlock, currentBlock)) {
      break;
    }
  }

  var fragment = Document.create({
    nodes: shouldCutOrCopyBlocks
  });
  return fragment;
}
export function isEmptyNode(node) {
  return Heading.isCallout(node) && !node.data.list && (node.nodes.length === 0 || node.nodes.length === 1 && Text.isEmptyText(node.nodes[0]));
}
//# sourceMappingURL=utils.js.map