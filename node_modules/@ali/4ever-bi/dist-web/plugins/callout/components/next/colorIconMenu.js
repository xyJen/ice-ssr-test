import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { CalloutPlugin, PluginRoles } from '@ali/4ever-bamboo';
import { ComplexColorIconMenu, HoverToolbarHooks } from '@ali/4ever-component';
import { setMetaData as setMetaDataAction } from "../../actions";
var DEFAULTS = CalloutPlugin.DEFAULTS;
export var ColorIconMenu = function ColorIconMenu(props) {
  var _node$data;

  var controller = props.controller,
      locale = props.locale,
      getNode = props.getNode,
      onOverlayVisibleChange = props.onOverlayVisibleChange;
  var getContainer = HoverToolbarHooks.useGetContainer();

  var _HoverToolbarHooks$us = HoverToolbarHooks.usePopoverVisible('callout.color', onOverlayVisibleChange),
      isOverlayVisible = _HoverToolbarHooks$us[0],
      setOverlayVisible = _HoverToolbarHooks$us[1];

  var node = getNode();

  var _React$useState = React.useState(node == null ? void 0 : (_node$data = node.data) == null ? void 0 : _node$data.metadata),
      metaData = _React$useState[0],
      setMetaData = _React$useState[1];

  var handleValueChange = function handleValueChange(key) {
    return function (value) {
      setMetaData(function (metaData) {
        var _extends2;

        return _extends({}, metaData, (_extends2 = {}, _extends2[key] = value, _extends2));
      });
      var data = {}; // @ts-ignore

      data[key] = value;
      var node = getNode();
      controller.run('onCangjieBlur');
      node && controller.run('onAction', setMetaDataAction({
        node: node,
        data: data
      }));
    };
  };

  if (!node) return null;
  return /*#__PURE__*/_createElement(ComplexColorIconMenu, {
    color: metaData == null ? void 0 : metaData.color,
    defaultColor: DEFAULTS.color,
    backgroundColor: (metaData == null ? void 0 : metaData.bgcolor) || DEFAULTS.color,
    defaultBackgroundColor: DEFAULTS.bgcolor,
    borderColor: metaData == null ? void 0 : metaData.border,
    defaultBorderColor: DEFAULTS.border,
    onColorClick: handleValueChange('color'),
    onBorderColorClick: handleValueChange('border'),
    onBackgroundColorClick: handleValueChange('bgcolor'),
    onOverlayVisibleChange: setOverlayVisible,
    isOverlayVisible: isOverlayVisible,
    getContainer: getContainer,
    tooltip: locale.colorTitle,
    role: PluginRoles.calloutColor
  });
};
//# sourceMappingURL=colorIconMenu.js.map