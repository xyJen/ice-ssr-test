{"version":3,"sources":["../../../../../src/plugins/callout/components/InnerToolbar.tsx"],"names":["React","Dropdown","DropdownAnimation","IconButton","PaletteNormal","useScrollableContent","CalloutInnerToolbarOuterWrapper","CalloutInnerToolbarWrapper","PaddingHolder","ColorPanel","colorToWhite","color","replace","Toolbar","props","showInnerToolbar","bgcolor","useState","overlayVisible","setOverlayVisible","visible","setVisible","scrollContent","window","document","body","useEffect","node","backgroundColor","border","vi"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;qBAC4B,a;AAA5B,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,iBAAT,QAAkC,cAAlC;AAGA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,SACEC,+BADF,EAEEC,0BAFF,EAGEC,aAHF;AAMA,SAASC,UAAT;;AAaA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAoB;AACvC,SAAO,CAACA,KAAK,IAAI,OAAV,EAAmBC,OAAnB,CAA2B,aAA3B,EAA0C,OAA1C,CAAP;AACD,CAFD;;wBAsCY,eAAC,UAAD;AAAY,EAAA,IAAI,eAAE,eAAC,aAAD;AAAlB,E;;AAlCZ,IAAMC,OAAyB,GAAG,SAA5BA,OAA4B,CAACC,KAAD,EAAW;AAAA,MACnCC,gBADmC,GACLD,KADK,CACnCC,gBADmC;AAAA,MACjBC,OADiB,GACLF,KADK,CACjBE,OADiB;;AAAA,wBAEChB,KAAK,CAACiB,QAAN,CAAe,KAAf,CAFD;AAAA,MAEpCC,cAFoC;AAAA,MAEpBC,iBAFoB;;AAAA,yBAGbnB,KAAK,CAACiB,QAAN,CAAe,CAACF,gBAAhB,CAHa;AAAA,MAGpCK,OAHoC;AAAA,MAG3BC,UAH2B;;AAI3C,MAAMC,aAAa,GAAGjB,oBAAoB,MAAMkB,MAAM,CAACC,QAAP,CAAgBC,IAAhE,CAJ2C,CAK3C;;AACAzB,EAAAA,KAAK,CAAC0B,SAAN,CAAgB,YAAM;AACpB,QAAI,CAACX,gBAAL,EAAuB;AACrBI,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD;;AACDE,IAAAA,UAAU,CAACN,gBAAD,CAAV;AACD,GALD,EAKG,CAACA,gBAAD,CALH;AAMA,sBACE,eAAC,aAAD;AAAe,IAAA,gBAAgB,EAAEA,gBAAjC;AAAmD,IAAA,QAAQ,EAAEK;AAA7D,kBACE,eAAC,+BAAD;AAAiC,IAAA,OAAO,EAAEV,YAAY,CAACM,OAAD;AAAtD,kBACE,eAAC,0BAAD,qBACE,eAAC,QAAD;AACE,IAAA,OAAO,EAAC,OADV;AAEE,IAAA,OAAO,eACL,eAAC,iBAAD;AAAmB,MAAA,OAAO,EAAEE;AAA5B,oBACE,eAAC,UAAD,eAAgBJ,KAAhB;AAAwB,MAAA,OAAO,EAAE;AAAA,eAAMA,KAAK,CAACa,IAAZ;AAAA;AAAjC,OADF,CAHJ;AAOE,IAAA,YAAY,EAAE;AACZC,MAAAA,eAAe,EAAE,aADL;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAPhB;AAWE,IAAA,eAAe,EAAE,yBAACC,EAAD,EAAQ;AACvBX,MAAAA,iBAAiB,CAACW,EAAD,CAAjB;AACD,KAbH;AAcE,IAAA,SAAS,EAAC,UAdZ;AAeE,IAAA,OAAO,EAAEZ,cAfX;AAgBE,IAAA,YAAY,EAAE;AAAA,aAAMI,aAAN;AAAA;AAhBhB,UADF,CADF,CADF,CADF;AA4BD,CAxCD;;AA0CA,eAAeT,OAAf","sourcesContent":["import React from 'react';\nimport { Dropdown } from '@ali/we-design';\nimport { DropdownAnimation } from '@ali/we-util';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { ColorBlocks } from '@ali/4ever-mo';\nimport { IconButton } from '@ali/we-toolbar';\nimport { PaletteNormal } from '@ali/we-icon';\nimport { useScrollableContent } from '@ali/4ever-bamboo';\nimport {\n  CalloutInnerToolbarOuterWrapper,\n  CalloutInnerToolbarWrapper,\n  PaddingHolder,\n} from './styled';\nimport { Locale } from '../types';\nimport { ColorPanel } from './colorPanel';\n\ninterface IProps {\n  showInnerToolbar: boolean;\n  locale?: Locale;\n  controller: Controller;\n  node: ColorBlocks;\n  bgcolor: string;\n  color?: string;\n  border?: string;\n  showSticker?: boolean;\n}\n\nconst colorToWhite = (color?: string) => {\n  return (color || 'white').replace('transparent', 'white');\n};\n\nconst Toolbar: React.FC<IProps> = (props) => {\n  const { showInnerToolbar, bgcolor } = props;\n  const [overlayVisible, setOverlayVisible] = React.useState(false);\n  const [visible, setVisible] = React.useState(!showInnerToolbar);\n  const scrollContent = useScrollableContent() || window.document.body;\n  // 加 EmptyContainer 是因为 IconButton 未监听 onMouseEnter 等， trigger=\"hover\" 无法生效\n  React.useEffect(() => {\n    if (!showInnerToolbar) {\n      setOverlayVisible(false);\n    }\n    setVisible(showInnerToolbar);\n  }, [showInnerToolbar]);\n  return (\n    <PaddingHolder showInnerToolbar={showInnerToolbar} visibile={visible}>\n      <CalloutInnerToolbarOuterWrapper bgcolor={colorToWhite(bgcolor)}>\n        <CalloutInnerToolbarWrapper>\n          <Dropdown\n            trigger=\"click\"\n            overlay={\n              <DropdownAnimation visible={overlayVisible}>\n                <ColorPanel {...props } getNode={() => props.node} />\n              </DropdownAnimation>\n            }\n            overlayStyle={{\n              backgroundColor: 'transparent',\n              border: 'none',\n            }}\n            onVisibleChange={(vi) => {\n              setOverlayVisible(vi);\n            }}\n            placement=\"topRight\"\n            visible={overlayVisible}\n            getContainer={() => scrollContent}\n          >\n            <IconButton icon={<PaletteNormal />} />\n          </Dropdown>\n        </CalloutInnerToolbarWrapper>\n      </CalloutInnerToolbarOuterWrapper>\n    </PaddingHolder>\n  );\n};\n\nexport default Toolbar;\n"],"file":"InnerToolbar.js"}