import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useZoom } from '@ali/4ever-cangjie';
import { StickerPlugin, CalloutPlugin } from '@ali/4ever-bamboo';
import { getRectOfNodeFirstText } from '@ali/4ever-utils';
var StickerItem = StickerPlugin.StickerItem;
var CalloutBoxWrapper = CalloutPlugin.CalloutBoxWrapper,
    CalloutBox = CalloutPlugin.CalloutBox,
    ContentBox = CalloutPlugin.ContentBox,
    StickerBox = CalloutPlugin.StickerBox,
    StickerInnerBox = CalloutPlugin.StickerInnerBox,
    DEFAULTS = CalloutPlugin.DEFAULTS,
    STICKER_SIZE = CalloutPlugin.STICKER_SIZE,
    PADDING_TOP = CalloutPlugin.PADDING_TOP;

/**
 * 高亮区块
 * @param props
 * @returns
 */
var Callout = function Callout(props) {
  var node = props.node,
      attributes = props.attributes,
      children = props.children,
      sticker = props.sticker;
  var stickerBoxRef = React.useRef();

  var _React$useMemo = React.useMemo(function () {
    var metadata = node.data.metadata;
    return _extends({}, metadata, {
      showSticker: Boolean(metadata.showstk)
    });
  }, [node]),
      _React$useMemo$bgcolo = _React$useMemo.bgcolor,
      bgcolor = _React$useMemo$bgcolo === void 0 ? DEFAULTS.bgcolor : _React$useMemo$bgcolo,
      _React$useMemo$sticke = _React$useMemo.sticker,
      stickerCode = _React$useMemo$sticke === void 0 ? DEFAULTS.stcode : _React$useMemo$sticke,
      border = _React$useMemo.border,
      showSticker = _React$useMemo.showSticker; // 边框色默认为背景色, 使边框和文字对齐


  var borderColor = border || bgcolor;

  if (!border && bgcolor === '#FFFFFF') {
    borderColor = DEFAULTS.whiteBorder;
  }

  var ref = React.useRef(null);

  var _React$useState = React.useState(0),
      stickerTop = _React$useState[0],
      setStickerTop = _React$useState[1];

  var zoom = useZoom();
  React.useEffect(function () {
    if (stickerBoxRef.current && node.nodes[0]) {
      var _stickerBoxRef$curren;

      var rect = getRectOfNodeFirstText(node.nodes[0]);
      var stickerRect = (_stickerBoxRef$curren = stickerBoxRef.current) == null ? void 0 : _stickerBoxRef$curren.getBoundingClientRect();

      if (rect && rect.height && stickerRect) {
        var newTop = rect.top / zoom - stickerRect.top / zoom - PADDING_TOP + (rect.height / zoom - STICKER_SIZE) / 2 - 1;
        setStickerTop(Math.round(newTop));
      }
    }
  }, [node, stickerBoxRef, zoom]);
  return /*#__PURE__*/_createElement(CalloutBoxWrapper, attributes, /*#__PURE__*/_createElement(CalloutBox, {
    ref: ref,
    className: "callout-box",
    "data-callout-group": true,
    "data-color-select-panel": true,
    backgroundColor: bgcolor,
    borderColor: borderColor,
    selected: false,
    onMouseDown: function onMouseDown() {},
    "data-hover-box": "borderBox",
    onClick: function onClick() {}
  }, Boolean(showSticker) && /*#__PURE__*/_createElement(StickerBox, {
    className: "callout-sticker-box",
    ref: stickerBoxRef
  }, /*#__PURE__*/_createElement(StickerInnerBox, {
    style: {
      top: stickerTop
    }
  }, /*#__PURE__*/_createElement(StickerItem, {
    sz: STICKER_SIZE,
    code: stickerCode,
    sticker: sticker
  }))), /*#__PURE__*/_createElement(ContentBox, {
    "data-container-block": true,
    showSticker: showSticker
  }, children)));
};

Callout.displayName = 'Callout';
export default Callout;
//# sourceMappingURL=calloutMobile.js.map