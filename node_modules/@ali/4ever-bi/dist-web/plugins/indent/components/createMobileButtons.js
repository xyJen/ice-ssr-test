/* eslint-disable no-param-reassign */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { increaseIndent, decreaseIndent } from "../actions";
import { getClosestParagraph, MAX_INDENT_SIZE } from '@ali/4ever-utils';
var MOBILE_TOOLBAR = {
  increase: {
    icon: 'indentRight',
    action: increaseIndent
  },
  decrease: {
    icon: 'indentLeft',
    action: decreaseIndent
  }
};

function canIndent(controller, isInc) {
  var _indentNode$data, _indentNode$data$ind, _indentNode$data2, _indentNode$data2$lis, _indentNode$data3, _indentNode$data3$ind;

  var value = controller.value;
  var startBlock = value.startBlock,
      endBlock = value.endBlock;

  if (startBlock !== endBlock || !startBlock) {
    return true;
  }

  var indentNode = getClosestParagraph(value, startBlock);

  if (!indentNode) {
    return true;
  } // 减少的情况。如果没有、或者已经很小了，就 disable


  if (!isInc && !((_indentNode$data = indentNode.data) != null && (_indentNode$data$ind = _indentNode$data.ind) != null && _indentNode$data$ind.left) && !((_indentNode$data2 = indentNode.data) != null && (_indentNode$data2$lis = _indentNode$data2.list) != null && _indentNode$data2$lis.level)) {
    return false;
  } // 增加的情况。如果有、并且已经很大了，就 disable


  if (isInc && (_indentNode$data3 = indentNode.data) != null && (_indentNode$data3$ind = _indentNode$data3.ind) != null && _indentNode$data3$ind.left && indentNode.data.ind.left >= MAX_INDENT_SIZE) {
    return false;
  }

  return true;
}

function useDisabledAndClick(controller, action) {
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = Boolean(isCollapsedAtEdge || controller.query('isSelectionInHr') || controller.query('isSelectionInListSymbol'));
  var handleClick = React.useCallback(function () {
    return controller.run('onAction', action());
  }, [action, controller]);
  return {
    isDisabled: isDisabled,
    handleClick: handleClick
  };
}

export default function createMobileHeading(locale) {
  return Object.keys(MOBILE_TOOLBAR).reduce(function (result, type) {
    result[type + "MobileBig"] = function (props) {
      var controller = props.controller,
          Wrapper = props.Wrapper,
          item = props.item;
      var _MOBILE_TOOLBAR$type = MOBILE_TOOLBAR[type],
          icon = _MOBILE_TOOLBAR$type.icon,
          action = _MOBILE_TOOLBAR$type.action; // eslint-disable-next-line react-hooks/rules-of-hooks

      var _useDisabledAndClick = useDisabledAndClick(controller, action),
          isDisabled = _useDisabledAndClick.isDisabled,
          handleClick = _useDisabledAndClick.handleClick;

      var indentable = !isDisabled && canIndent(controller, type === 'increase');
      return /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "big",
        icon: icon,
        isDisabled: isDisabled || !indentable,
        onClick: handleClick
      });
    };

    result[type + "Mobile"] = function (props) {
      var controller = props.controller,
          Wrapper = props.Wrapper,
          item = props.item;
      var _MOBILE_TOOLBAR$type2 = MOBILE_TOOLBAR[type],
          icon = _MOBILE_TOOLBAR$type2.icon,
          action = _MOBILE_TOOLBAR$type2.action; // eslint-disable-next-line react-hooks/rules-of-hooks

      var _useDisabledAndClick2 = useDisabledAndClick(controller, action),
          isDisabled = _useDisabledAndClick2.isDisabled,
          handleClick = _useDisabledAndClick2.handleClick;

      return /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "horiz",
        icon: icon,
        isDisabled: Boolean(isDisabled),
        onClick: handleClick
      });
    };

    return result;
  }, {});
}
//# sourceMappingURL=createMobileButtons.js.map