import _extends from "@babel/runtime/helpers/extends";
import { Commands } from '@ali/4ever-cangjie';
import { IndentPlugin } from '@ali/4ever-bamboo';
import { INDENT_SIZE_CHARS } from "./";
var INDENT_SIZE = IndentPlugin.INDENT_SIZE;

function setBlockLeftByKey(controller, listBlock, indLeft) {
  return controller.command(Commands.setNodeByKey, listBlock.key, {
    data: _extends({}, listBlock.data, {
      ind: _extends({}, listBlock.ind, {
        left: indLeft
      })
    })
  });
}

export function increaseListLevel(controller, listBlock, hasFirstStart) {
  if (!listBlock) return controller;

  var _ref = listBlock.data || {},
      list = _ref.list;

  if (!list) return controller;

  if (hasFirstStart) {
    var _listBlock$data, _listBlock$data$ind;

    var indLeft = Math.min((((_listBlock$data = listBlock.data) == null ? void 0 : (_listBlock$data$ind = _listBlock$data.ind) == null ? void 0 : _listBlock$data$ind.left) || 0) + INDENT_SIZE, INDENT_SIZE_CHARS);
    return setBlockLeftByKey(controller, listBlock, indLeft);
  }

  return controller.command('increaseItemByNode', 1, listBlock);
}
export function decreaseListLevel(controller, listBlock, hasFirstStart) {
  if (!listBlock) return controller;

  var _ref2 = listBlock.data || {},
      list = _ref2.list;

  if (!list) return controller;

  if (hasFirstStart) {
    var _listBlock$data2, _listBlock$data2$ind;

    var indLeft = Math.max((((_listBlock$data2 = listBlock.data) == null ? void 0 : (_listBlock$data2$ind = _listBlock$data2.ind) == null ? void 0 : _listBlock$data2$ind.left) || 0) - INDENT_SIZE, 0);
    return setBlockLeftByKey(controller, listBlock, indLeft);
  }

  return controller.command('increaseItemByNode', -1, listBlock);
}
//# sourceMappingURL=setListLevelByIntent.js.map