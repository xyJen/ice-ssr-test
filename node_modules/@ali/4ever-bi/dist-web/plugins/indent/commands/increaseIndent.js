import _extends from "@babel/runtime/helpers/extends";
import { Commands } from '@ali/4ever-cangjie';
import { getClosestParagraph } from '@ali/4ever-utils';
import { getBlocksFromEditor } from '@ali/4ever-utils';
import { increaseListLevel } from "../utils/setListLevelByIntent";
import { INDENT_SIZE, MAX_INDENT_SIZE, MAX_INDENT_SIZE_CHARS, INDENT_SIZE_CHARS, DEFAULT_INDENT, IndentTrigger } from "../utils";
import { isEqualWithDefault } from '@ali/4ever-utils';
export default (function (editor, trigger, givenValue) {
  var value = editor.value;
  var indentVal = givenValue !== undefined ? givenValue : INDENT_SIZE;
  var selectedBlocks = getBlocksFromEditor(editor);

  var _ref = editor.query('getListDepthItems') || {},
      depthItems = _ref.depthItems,
      hasFirstStart = _ref.hasFirstStart;

  if (hasFirstStart) {
    selectedBlocks = depthItems;
  }

  selectedBlocks.forEach(function (node) {
    var indentNode = getClosestParagraph(value, node);

    if (indentNode) {
      var indentNodeData = indentNode.data || {};
      var list = indentNodeData.list;

      if (list) {
        return increaseListLevel(editor, indentNode, hasFirstStart);
      }

      var ind = indentNodeData.ind || {}; // data.ind can be null

      var nextInd = _extends({}, ind);

      var _ind$firstLine = ind.firstLine,
          firstLine = _ind$firstLine === void 0 ? 0 : _ind$firstLine,
          _ind$firstLineChars = ind.firstLineChars,
          firstLineChars = _ind$firstLineChars === void 0 ? 0 : _ind$firstLineChars,
          _ind$left = ind.left,
          left = _ind$left === void 0 ? 0 : _ind$left,
          _ind$leftChars = ind.leftChars,
          leftChars = _ind$leftChars === void 0 ? 0 : _ind$leftChars,
          _ind$hanging = ind.hanging,
          hanging = _ind$hanging === void 0 ? 0 : _ind$hanging,
          _ind$hangingChars = ind.hangingChars,
          hangingChars = _ind$hangingChars === void 0 ? 0 : _ind$hangingChars;
      var firstLineIndent = firstLineChars || firstLine;
      var hangingIndent = hangingChars || hanging || firstLine < 0;

      switch (trigger) {
        case IndentTrigger.keyboard:
          if (hangingIndent) {
            // 取消悬挂缩进
            // 如果已经存在 leftChars 则保留左缩进
            // 否则增加左侧缩进，@wps/word
            delete nextInd.hanging;
            delete nextInd.hangingChars;

            if (firstLine < 0) {
              delete nextInd.firstLine;
            } // hangingChars 存在时 left 会被忽略


            var realLeft = hangingChars ? leftChars : leftChars || left;

            if (!realLeft) {
              nextInd.left = INDENT_SIZE;
            }
          } else if (!firstLineIndent) {
            // 首先增加首行缩进
            nextInd.firstLine = INDENT_SIZE;
          } else if (leftChars) {
            // 增加两字符
            nextInd.leftChars = Math.min(leftChars + INDENT_SIZE_CHARS, MAX_INDENT_SIZE_CHARS);
            nextInd.left = nextInd.leftChars / INDENT_SIZE_CHARS * INDENT_SIZE;
          } else {
            nextInd.left = Math.min(left + INDENT_SIZE, MAX_INDENT_SIZE);
          }

          break;

        default:
          if (hangingIndent || leftChars) {
            // 悬挂缩进存在时需要增加 leftChars
            nextInd.leftChars = Math.min(leftChars + INDENT_SIZE_CHARS, MAX_INDENT_SIZE_CHARS);
            nextInd.left = nextInd.leftChars / INDENT_SIZE_CHARS * INDENT_SIZE;
          } else {
            nextInd.left = Math.min(left + indentVal, MAX_INDENT_SIZE);
          }

      }

      if (isEqualWithDefault(nextInd, ind, DEFAULT_INDENT)) {
        return undefined;
      }

      editor.command(Commands.setNodeByKey, indentNode.key, {
        data: _extends({}, indentNodeData, {
          ind: nextInd
        })
      });
    }

    return undefined;
  });
  return editor;
});
//# sourceMappingURL=increaseIndent.js.map