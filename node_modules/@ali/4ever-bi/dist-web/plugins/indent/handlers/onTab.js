import { Commands } from '@ali/4ever-cangjie';
;
import decreaseIndent from "../commands/decreaseIndent";
import increaseIndent from "../commands/increaseIndent";
import { getBlocksFromEditor } from '@ali/4ever-utils';
import { getClosestParagraph } from '@ali/4ever-utils';
import { IndentTrigger } from "../utils";
export default function onTab(event, editor, next) {
  var _currentItems$2, _currentItems$2$data;

  var value = editor.value;
  var document = value.document;

  if (editor.query('isSelectionInTableCell')) {
    return next();
  }

  event.preventDefault();
  var selection = value.selection;
  if (!selection) return next();
  var currentParagraph = getClosestParagraph(value);
  if (!currentParagraph) return next();
  var isAtStartofParagraph = selection ? selection.getStart(document).isAtStartOfNode(currentParagraph) : null;
  var selectedBlocks = getBlocksFromEditor(editor);
  var selectedMultiBlocks = selectedBlocks.length > 1;
  var selectedAllBlock = false;

  if (selection.isExpanded && editor.query('isSelectWholeBlocks')) {
    selectedAllBlock = true;
  }

  if (event.shiftKey && isAtStartofParagraph) {
    /* 在段首且没有选区时，逻辑和“减少缩进”按钮相同 */
    if (selection.isCollapsed) {
      return decreaseIndent(editor, IndentTrigger.keyboard);
    }
    /* 在段首有选区时：
     * 1. 选中多段或整段选中时视为仅减少缩进
     * 2. 否则先删除选区内容再执行减少缩进逻辑
    */


    if (selectedMultiBlocks || selectedAllBlock) {
      return decreaseIndent(editor, IndentTrigger.toolbar);
    }

    editor.command(Commands.del);
    return decreaseIndent(editor, IndentTrigger.keyboard);
  }

  if (selection.isCollapsed) {
    var _currentItems$, _currentItems$$data;

    if (!isAtStartofParagraph) {
      // 未选中且在段内时
      return editor.command(Commands.insertText, '    ');
    }

    var _currentItems = editor.query('getListCurrentItem');

    if (_currentItems != null && _currentItems.length && (_currentItems$ = _currentItems[0]) != null && (_currentItems$$data = _currentItems$.data) != null && _currentItems$$data.list) {
      // 不处理列表
      return next();
    }

    return increaseIndent(editor, IndentTrigger.keyboard);
  }

  if (!isAtStartofParagraph) {
    // 不在段首且选中时：先删除后插入tab
    return editor.command(Commands.del).command(Commands.insertText, '    ');
  }

  var currentItems = editor.query('getListCurrentItem');

  if (currentItems != null && currentItems.length && (_currentItems$2 = currentItems[0]) != null && (_currentItems$2$data = _currentItems$2.data) != null && _currentItems$2$data.list) {
    return next();
  }

  if (selectedMultiBlocks || selectedAllBlock) {
    return increaseIndent(editor, IndentTrigger.toolbar);
  }

  editor.command('deleteAtRange', selection);
  return increaseIndent(editor, IndentTrigger.keyboard);
}
//# sourceMappingURL=onTab.js.map