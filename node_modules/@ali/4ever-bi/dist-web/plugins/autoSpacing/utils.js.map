{"version":3,"sources":["../../../../src/plugins/autoSpacing/utils.ts"],"names":["textUtils","SPACING","isBlankOrEmoji","char","length","test","isLatin","shouldDeleteSpacing","a","b","c","sibling","isExpanded","isChineseChar","shouldAutoSpacing","isPunc","getNodeText","node","start","end","Array","from","text","slice","getPreText","controller","value","document","selection","convertToTextPoints","startTextNode","getNode","key","offset","getNextText","endTextNode","shouldKeepSpcing","shouldDeleteSiblingSpacing","d","deleted","shoudDeleteBefore","shoudDeleteAfter"],"mappings":"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","sourcesContent":["import { textUtils, Controller, Node } from '@ali/4ever-cangjie';\n\nconst SPACING = ' ';\n\n/**\n * 判断是否为空白符或emoji\n * 处于性能考虑不做 unicode split，所有长度大于 1 的 grapheme 都被视为 emoji\n */\nexport function isBlankOrEmoji(char?: string) {\n  // char.length > 1: 👨‍👩‍👧‍👦\n  if (!char || char.length > 1 || /\\s/.test(char)) return true;\n  return false;\n}\n\n/**\n * 检测是够为常见拉丁文\n * ascii: https://www.ascii-code.com/\n * https://newbedev.com/regex-with-extended-latin-alphabet-a-o-u-e-ss\n */\nexport function isLatin(char: string) {\n  // C0 到 FF 不一定包含所有变形，如: Ŭ\n  // /[A-z|0-9|\\u00C0-\\u00FF]/.test(undefined) = true\n  return char && /[A-z|0-9|\\u00C0-\\u00FF]/.test(char);\n}\n\n/**\n * 判断是否应该删除空格\n * 首先，应该满足在西文前后输入：\n * 中文 [输入:中文][光标]Char：删除前面空格\n * Char[光标][输入:中文] 中文：删除后面空格\n * 其次，必须满足以下 pattern：\n *     a          b          c\n * eastAsian   spacing   eastAsian\n * 另外用户如果是选中内容输入，我们不做空格清除，原因在于无法准确判断用户意图，例如：\n *     [-----选区-----] \n * 中文   Char 中文中文中文中文\n * 我们难以判断此时用户是想输入内容与后面内容联系还是与前面内容联系\n */\nexport function shouldDeleteSpacing(a: string, b: string, c: string, sibling: string, isExpanded: boolean) {\n  if (isExpanded || b !== SPACING || !isLatin(sibling)) return false;\n  return textUtils.isChineseChar(a) && textUtils.isChineseChar(c);\n}\n\n/**\n * 判断两个字符之间是否应该 autoSpacing\n */\nexport function shouldAutoSpacing(a: string, b: string) {\n  // 有任意一个为空白符 或 多码点 unicode 则不加 spacing\n  if(isBlankOrEmoji(a) || isBlankOrEmoji(b)) return false;\n\n  // 有任意一个为标点 则不加 spacing\n  if(textUtils.isPunc(a) || textUtils.isPunc(b)) return false;\n\n  return isLatin(a) !== isLatin(b);\n}\n\n/**\n * 获取节点文本\n */\nfunction getNodeText(node: Node | null, start: number, end?: number) {\n  if (!node) return [];\n  // perf: use Array.from 避免复杂的 unicode 拆分\n  return Array.from(node.text.slice(start, end));\n}\n\n/**\n * 获取当前选区前后的文字\n * @param controller \n */\nexport function getPreText(controller: Controller) {\n  const { document, selection } = controller.value;\n  const { start } = selection.convertToTextPoints(document);\n  const startTextNode = document.getNode(start.key);\n  \n  return getNodeText(startTextNode, 0, start.offset);\n}\n\nexport function getNextText(controller: Controller) {\n  const { document, selection } = controller.value;\n  const { end } = selection.convertToTextPoints(document);\n  const endTextNode = document.getNode(end.key);\n  \n  return getNodeText(endTextNode, end.offset);\n}\n\n/**\n * 西文中间允许有空格\n */\nfunction shouldKeepSpcing(a: string, b: string) {\n  return isLatin(a) && isLatin(b);\n}\n\n/**\n * 连续空格删除逻辑\n * 首先，必须是连续空格相邻\n *     a          b          c          d\n *             spacing    spacing\n * 其次，分别判断 deleted 和 a/b 的类型以决定是否删除对应空格\n * 最后，西文之间是需要空格的，但我们难以判断连续空格前后的语义，因此保留一个空格\n */\nexport function shouldDeleteSiblingSpacing(a: string, b: string, c: string, d: string, deleted?: string) {\n  // 非连续空格不处理\n  if (isBlankOrEmoji(deleted) || b !== SPACING || c !== SPACING) return [false, false];\n  \n  // 特别注意：照顾英文输入习惯，空格留在前面\n  const shoudDeleteBefore = shouldAutoSpacing(a, deleted || '') && !shouldKeepSpcing(a, d);\n  const shoudDeleteAfter = shouldAutoSpacing(deleted || '', d);\n\n  return [shoudDeleteBefore, shoudDeleteAfter];\n}"],"file":"utils.js"}