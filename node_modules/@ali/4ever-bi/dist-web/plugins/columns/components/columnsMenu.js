import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React, { useCallback, useState } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ColumnsPlugin, PluginRoles } from '@ali/4ever-bamboo';
import { MenuItem, SubMenu } from '@ali/we-design';
import { removeNewlineTriggerText } from '@ali/4ever-utils';
import ColumnsPicker from "./ColumnPicker";
var insertColumns = ColumnsPlugin.actions.insertColumns;

var createColumnsMenu = function createColumnsMenu(configs) {
  return function ColumnsMenu(props) {
    var _configs$locale;

    var _useState = useState(2),
        count = _useState[0],
        setCount = _useState[1];

    var menuItem = props.menuItem,
        controller = props.controller;

    var title = menuItem.title,
        menuKey = menuItem.menuKey,
        rest = _objectWithoutPropertiesLoose(menuItem, ["title", "menuKey"]);

    var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
    var handleClick = useCallback(function (_, event) {
      if (!event) {
        // 回车触发
        // menuItem 有bug, 这里必须在 setCount 里才能拿到最新的 count
        setCount(function (count) {
          controller.run('onAction', insertColumns({
            size: count,
            text: ''
          }));
          return count;
        });
      } else {
        // click 触发
        controller.run('onAction', insertColumns({
          size: count,
          text: ''
        }));
      }

      event && event.stopPropagation();
    }, [count]);
    var handleDefaultClick = useCallback(function (event) {
      controller.run('onAction', insertColumns({
        size: 2,
        text: ''
      }));
      controller.run('onAction', removeNewlineTriggerText(false));
      event && event.stopPropagation();
    }, [controller]);
    var columnText = configs == null ? void 0 : (_configs$locale = configs.locale) == null ? void 0 : _configs$locale.insertText2;
    return /*#__PURE__*/_createElement("div", {
      onClick: handleDefaultClick
    }, /*#__PURE__*/_createElement(SubMenu, _extends({}, rest, {
      disabled: isCollapsedAtEdge,
      title: title || '',
      overlayStyle: {
        padding: 0
      },
      overlayClassName: "menu-columns-overlay"
    }), /*#__PURE__*/_createElement(MenuItem, {
      menuKey: menuKey || 'columnsPicker',
      hoverable: false,
      role: PluginRoles.columns,
      style: {
        height: 'auto',
        padding: '12px'
      },
      onClick: handleClick
    }, /*#__PURE__*/_createElement(ColumnsPicker, {
      activeCount: count,
      onChange: setCount,
      columnText: columnText
    }))));
  };
};

export default createColumnsMenu;
//# sourceMappingURL=columnsMenu.js.map