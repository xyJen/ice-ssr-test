{"version":3,"sources":["../../../../../../src/plugins/columns/components/next/colorIconMenu.tsx"],"names":["React","ColumnsPlugin","PluginRoles","ComplexColorIconMenu","HoverToolbarHooks","ColorIconMenu","props","controller","getNode","onOverlayVisibleChange","tooltip","node","useState","data","setData","getContainer","useGetContainer","usePopoverVisible","isOverlayVisible","setOverlayVisible","handleValueChange","key","value","oldData","newData","run","actions","setCellData","color","bgcolor","border","columnsColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;qBAC4B,a;AAA5B,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,mBAA3C;AACA,SAASC,oBAAT,EAA+BC,iBAA/B,QAAwD,sBAAxD;AAUA,OAAO,IAAMC,aAA4C,GAAG,SAA/CA,aAA+C,CAACC,KAAD,EAAW;AAAA,MAC7DC,UAD6D,GACJD,KADI,CAC7DC,UAD6D;AAAA,MACjDC,OADiD,GACJF,KADI,CACjDE,OADiD;AAAA,MACxCC,sBADwC,GACJH,KADI,CACxCG,sBADwC;AAAA,MAChBC,OADgB,GACJJ,KADI,CAChBI,OADgB;AAErE,MAAMC,IAAI,GAAGH,OAAO,EAApB;;AAFqE,wBAG7CR,KAAK,CAACY,QAAN,CAAgBD,IAAhB,oBAAgBA,IAAD,CAAwBE,IAAvC,CAH6C;AAAA,MAG9DA,IAH8D;AAAA,MAGxDC,OAHwD;;AAIrE,MAAMC,YAAY,GAAGX,iBAAiB,CAACY,eAAlB,EAArB;;AAJqE,8BAKvBZ,iBAAiB,CAACa,iBAAlB,CAAoC,eAApC,EAAqDR,sBAArD,CALuB;AAAA,MAK9DS,gBAL8D;AAAA,MAK5CC,iBAL4C;;AAOrE,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD;AAAA,WAAS,UAACC,KAAD,EAAW;AAC5C,UAAMX,IAAI,GAAGH,OAAO,EAApB;;AACA,UAAI,CAACG,IAAL,EAAW;AACT;AACD;;AACDG,MAAAA,OAAO,CAAC,UAACS,OAAD;AAAA;;AAAA,4BACHA,OADG,6BAELF,GAFK,IAECC,KAFD;AAAA,OAAD,CAAP;AAIA,UAAME,OAAO,GAAG,EAAhB,CAT4C,CAU5C;;AACAA,MAAAA,OAAO,CAACH,GAAD,CAAP,GAAeC,KAAf;AACAf,MAAAA,UAAU,CAACkB,GAAX,CAAe,eAAf;AACAlB,MAAAA,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2BxB,aAAa,CAACyB,OAAd,CAAsBC,WAAtB,CAAkC;AAAEhB,QAAAA,IAAI,EAAJA,IAAF;AAAQE,QAAAA,IAAI,EAAEW;AAAd,OAAlC,CAA3B;AACD,KAdyB;AAAA,GAA1B;;AAgBA,MAAI,CAACb,IAAL,EAAW,OAAO,IAAP;AAEX,sBACE,eAAC,oBAAD;AACE,IAAA,KAAK,EAAEE,IAAF,oBAAEA,IAAI,CAAEe,KADf;AAEE,IAAA,YAAY,EAAC,EAFf;AAGE,IAAA,eAAe,EAAEf,IAAF,oBAAEA,IAAI,CAAEgB,OAHzB;AAIE,IAAA,sBAAsB,EAAC,EAJzB;AAKE,IAAA,WAAW,EAAEhB,IAAF,oBAAEA,IAAI,CAAEiB,MALrB;AAME,IAAA,kBAAkB,EAAC,EANrB;AAOE,IAAA,YAAY,EAAEV,iBAAiB,CAAC,OAAD,CAPjC;AAQE,IAAA,kBAAkB,EAAEA,iBAAiB,CAAC,QAAD,CARvC;AASE,IAAA,sBAAsB,EAAEA,iBAAiB,CAAC,MAAD,CAT3C;AAUE,IAAA,sBAAsB,EAAED,iBAV1B;AAWE,IAAA,gBAAgB,EAAED,gBAXpB;AAYE,IAAA,YAAY,EAAEH,YAZhB;AAaE,IAAA,OAAO,EAAEL,OAbX;AAcE,IAAA,IAAI,EAAER,WAAW,CAAC6B;AAdpB,IADF;AAkBD,CA3CM","sourcesContent":["import React from 'react';\nimport { ColumnsPlugin, PluginRoles } from '@ali/4ever-bamboo';\nimport { ComplexColorIconMenu, HoverToolbarHooks } from '@ali/4ever-component';\nimport { Controller, Node, Block } from '@ali/4ever-cangjie';\n\nexport interface IColorIconMenuProps {\n  onOverlayVisibleChange: (v: boolean) => void;\n  controller: Controller;\n  getNode: () => Node | null;\n  tooltip?: string;\n}\n\nexport const ColorIconMenu: React.FC<IColorIconMenuProps> = (props) => {\n  const { controller, getNode, onOverlayVisibleChange, tooltip } = props;\n  const node = getNode();\n  const [data, setData] = React.useState((node as Block | null)?.data);\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('columns.color', onOverlayVisibleChange);\n\n  const handleValueChange = (key) => (value) => {\n    const node = getNode();\n    if (!node) {\n      return;\n    }\n    setData((oldData) => ({\n      ...oldData,\n      [key]: value,\n    }));\n    const newData = {};\n    // @ts-ignore\n    newData[key] = value;\n    controller.run('onCangjieBlur');\n    controller.run('onAction', ColumnsPlugin.actions.setCellData({ node, data: newData }));\n  }\n\n  if (!node) return null;\n\n  return (\n    <ComplexColorIconMenu\n      color={data?.color}\n      defaultColor=''\n      backgroundColor={data?.bgcolor}\n      defaultBackgroundColor=''\n      borderColor={data?.border}\n      defaultBorderColor=''\n      onColorClick={handleValueChange('color')}\n      onBorderColorClick={handleValueChange('border')}\n      onBackgroundColorClick={handleValueChange('fill')}\n      onOverlayVisibleChange={setOverlayVisible}\n      isOverlayVisible={isOverlayVisible}\n      getContainer={getContainer}\n      tooltip={tooltip}\n      role={PluginRoles.columnsColor}\n    />\n  );\n}"],"file":"colorIconMenu.js"}