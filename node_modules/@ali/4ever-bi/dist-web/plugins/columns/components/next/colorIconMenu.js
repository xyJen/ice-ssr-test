import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ColumnsPlugin, PluginRoles } from '@ali/4ever-bamboo';
import { ComplexColorIconMenu, HoverToolbarHooks } from '@ali/4ever-component';
export var ColorIconMenu = function ColorIconMenu(props) {
  var controller = props.controller,
      getNode = props.getNode,
      onOverlayVisibleChange = props.onOverlayVisibleChange,
      tooltip = props.tooltip;
  var node = getNode();

  var _React$useState = React.useState(node == null ? void 0 : node.data),
      data = _React$useState[0],
      setData = _React$useState[1];

  var getContainer = HoverToolbarHooks.useGetContainer();

  var _HoverToolbarHooks$us = HoverToolbarHooks.usePopoverVisible('columns.color', onOverlayVisibleChange),
      isOverlayVisible = _HoverToolbarHooks$us[0],
      setOverlayVisible = _HoverToolbarHooks$us[1];

  var handleValueChange = function handleValueChange(key) {
    return function (value) {
      var node = getNode();

      if (!node) {
        return;
      }

      setData(function (oldData) {
        var _extends2;

        return _extends({}, oldData, (_extends2 = {}, _extends2[key] = value, _extends2));
      });
      var newData = {}; // @ts-ignore

      newData[key] = value;
      controller.run('onCangjieBlur');
      controller.run('onAction', ColumnsPlugin.actions.setCellData({
        node: node,
        data: newData
      }));
    };
  };

  if (!node) return null;
  return /*#__PURE__*/_createElement(ComplexColorIconMenu, {
    color: data == null ? void 0 : data.color,
    defaultColor: "",
    backgroundColor: data == null ? void 0 : data.bgcolor,
    defaultBackgroundColor: "",
    borderColor: data == null ? void 0 : data.border,
    defaultBorderColor: "",
    onColorClick: handleValueChange('color'),
    onBorderColorClick: handleValueChange('border'),
    onBackgroundColorClick: handleValueChange('fill'),
    onOverlayVisibleChange: setOverlayVisible,
    isOverlayVisible: isOverlayVisible,
    getContainer: getContainer,
    tooltip: tooltip,
    role: PluginRoles.columnsColor
  });
};
//# sourceMappingURL=colorIconMenu.js.map