import _extends from "@babel/runtime/helpers/extends";
import React, { useMemo, useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { isKeyHotkey } from 'is-hotkey';
import { ColumnsPickerWrapper, ColumnItem, ColumnTitle } from "./styled";
var isArrowRightHotKey = isKeyHotkey('right');
var isArrowLeftHotKey = isKeyHotkey('left');
var MAX_COLUMN_COUNT = 5;

var ColumnsPicker = function ColumnsPicker(props) {
  var activeCount = props.activeCount,
      columnText = props.columnText,
      onChange = props.onChange;
  var columnItems = useMemo(function () {
    var items = [];

    var _loop = function _loop(i) {
      var props = {
        className: i <= activeCount - 1 ? 'active' : '',
        onMouseEnter: function onMouseEnter() {
          return onChange(i + 1);
        }
      };
      items.push( /*#__PURE__*/_createElement(ColumnItem, _extends({}, props, {
        key: i,
        "data-role": "columns" + (i + 1)
      })));
    };

    for (var i = 0; i < MAX_COLUMN_COUNT; i++) {
      _loop(i);
    }

    return items;
  }, [activeCount]);
  useEffect(function () {
    var handleKeyDown = function handleKeyDown(event) {
      if (isArrowRightHotKey(event)) {
        onChange(function (count) {
          return Math.min(count + 1, MAX_COLUMN_COUNT);
        });
      } else if (isArrowLeftHotKey(event)) {
        onChange(function (count) {
          return Math.max(count - 1, 1);
        }); // 防止回退到上一级 menu 菜单

        event.stopPropagation();
      }
    };

    document.addEventListener('keydown', handleKeyDown, true);
    return function () {
      document.removeEventListener('keydown', handleKeyDown, true);
    };
  }, []);
  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(ColumnTitle, null, activeCount, " ", columnText), /*#__PURE__*/_createElement(ColumnsPickerWrapper, null, columnItems));
};

export default ColumnsPicker;
//# sourceMappingURL=ColumnPicker.js.map