function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

export var leftToolbarHandlers = [];

var getLeftToolbarHandler = function getLeftToolbarHandler(controller) {
  for (var _iterator = _createForOfIteratorHelperLoose(leftToolbarHandlers), _step; !(_step = _iterator()).done;) {
    var handlerGetter = _step.value;
    var res = handlerGetter(controller);

    if (res) {
      return res;
    }
  }

  return null;
};

export var handleDragChange = function handleDragChange(isDragging, controller) {
  var leftToolbar = getLeftToolbarHandler(controller);

  if (!leftToolbar) {
    return;
  }

  if (isDragging) {
    // 开始拖拽分栏时，隐藏 draggable bar、暂时禁用 draggable
    leftToolbar.disable();
  } else {
    // 结束拖拽分栏时，恢复 draggable
    leftToolbar.enable();
  }
};
//# sourceMappingURL=leftToolbarHandlers.js.map