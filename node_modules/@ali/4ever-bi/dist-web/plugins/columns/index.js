import { ColumnsPlugin, ColumnsRenderNodeEdit } from '@ali/4ever-bamboo';
import toolbar from "./toolbar";
import menubar from "./menubar";
import setColumnsItemData from "./commands/setColumnsItemData";
import { leftToolbarHandlers, handleDragChange } from "./leftToolbarHandlers";
import createRenderHoverToolbar from "./createRenderHoverToolbar";
var hooks = ColumnsPlugin.hooks,
    createQueries = ColumnsPlugin.createQueries;

function createColumnsPlugin(allConfigs) {
  var createOnAction = hooks.createOnAction,
      createOnCangjieSelect = hooks.createOnCangjieSelect,
      createOnKeyDown = hooks.createOnKeyDown,
      createPlaceholder = hooks.createPlaceholder,
      createOnCut = hooks.createOnCut,
      beforeCopySelectedNodes = hooks.beforeCopySelectedNodes;
  var configs = allConfigs.columns;
  return {
    // @ts-ignore
    toolbar: toolbar(),
    commands: {
      setColumnsItemData: setColumnsItemData
    },
    // @ts-ignore
    leftToolbarHandlers: leftToolbarHandlers,
    menubar: menubar(configs),
    queries: createQueries(configs),
    renderNode: ColumnsRenderNodeEdit(configs, handleDragChange),
    onAction: createOnAction(configs),
    onCangjieSelect: createOnCangjieSelect(configs),
    onKeyDown: createOnKeyDown(),
    onCut: createOnCut(),
    placeholder: createPlaceholder(configs),
    renderHoverToolbar: createRenderHoverToolbar(configs),
    beforeCopySelectedNodes: beforeCopySelectedNodes
  };
}

export default createColumnsPlugin;
//# sourceMappingURL=index.js.map