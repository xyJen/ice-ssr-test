{"version":3,"sources":["../../../../../src/plugins/hr/handlers/onKeyDown.ts"],"names":["Commands","Text","isKeyHotkey","insertHr","isEnterHotkey","REGEXP_HR","onKeyDown","event","controller","next","value","selection","isExpanded","anchor","isTextPoint","startBlock","chars","text","slice","offset","replace","isOnlyHrSymbolParagraph","block","type","data","ind","left","list","isTextList","nodes","test","preventDefault","command","moveFocusToStartOfBlock","del","dispatch","mdType"],"mappings":"AACA,SAAqBA,QAArB,EAAsCC,IAAtC,QAA+D,oBAA/D;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,QAAP;AAEA,IAAMC,aAAa,GAAGF,WAAW,CAAC,OAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAMG,SAAS,GAAG,kBAAlB;AAEA,eAAe,SAASC,SAAT,CACbC,KADa,EAEbC,UAFa,EAGbC,IAHa,EAIb;AAAA,MACQC,KADR,GACkBF,UADlB,CACQE,KADR;AAAA,MAEQC,SAFR,GAEsBD,KAFtB,CAEQC,SAFR;AAIA,MAAI,CAACA,SAAL,EAAgB,OAAOF,IAAI,EAAX;AAChB,MAAIE,SAAS,CAACC,UAAd,EAA0B,OAAOH,IAAI,EAAX;;AAE1B,MAAIL,aAAa,CAACG,KAAD,CAAb,IAAwBI,SAAS,CAACE,MAAV,CAAiBC,WAAjB,EAA5B,EAA4D;AAAA,QAClDC,UADkD,GACnCL,KADmC,CAClDK,UADkD;AAE1D,QAAI,CAACA,UAAL,EAAiB,OAAON,IAAI,EAAX;AAEjB,QAAMO,KAAK,GAAGD,UAAU,CAACE,IAAX,CACXC,KADW,CACL,CADK,EACFP,SAAS,CAACE,MAAV,CAAiBM,MADf,EAEXC,OAFW,CAEH,MAFG,EAEK,EAFL,CAAd;;AAIA,QAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAiB;AAC/C,aAAOA,KAAK,CAACC,IAAN,KAAe,WAAf,KACH,CAACD,KAAK,CAACE,IAAN,CAAWC,GAAZ,IAAmBH,KAAK,CAACE,IAAN,CAAWC,GAAX,CAAeC,IAAf,KAAwB,CADxC,KAEJ,CAACJ,KAAK,CAACE,IAAN,CAAWG,IAFR,IAGJ1B,IAAI,CAAC2B,UAAL,CAAgBN,KAAK,CAACO,KAAtB,CAHI,IAIJxB,SAAS,CAACyB,IAAV,CAAed,KAAf,CAJH;AAKD,KAND;;AAQA,QAAIK,uBAAuB,CAACN,UAAD,CAA3B,EAAyC;AACvCR,MAAAA,KAAK,CAACwB,cAAN;AACAvB,MAAAA,UAAU,CACPwB,OADH,CACWhC,QAAQ,CAACiC,uBADpB,EAEGD,OAFH,CAEWhC,QAAQ,CAACkC,GAFpB,EAGGF,OAHH,CAGW7B,QAHX;AAIA,aAAOK,UAAU,CAAC2B,QAAX,CAAoB,6BAApB,EAAmD;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAnD,CAAP;AACD;AACF;;AACD,SAAO3B,IAAI,EAAX;AACD","sourcesContent":["import * as React from 'react';\nimport { Controller, Commands, Block, Text, environment } from '@ali/4ever-cangjie';\nimport { isKeyHotkey } from 'is-hotkey';\nimport insertHr from '../commands/insertHr';\n\nconst isEnterHotkey = isKeyHotkey('enter');\n\n/**\n * 1. 三个及以上 「 * 」\n * 2. 三个及以上 「 - 」\n * 3. 三个及以上 「 — 」 (中文 shift + -, 半个破折号, 与 2 不同)\n */\nconst REGEXP_HR = /^(\\*|-|—)\\1{2,}$/;\n\nexport default function onKeyDown(\n  event: React.KeyboardEvent,\n  controller: Controller,\n  next: () => void,\n) {\n  const { value } = controller;\n  const { selection } = value;\n\n  if (!selection) return next();\n  if (selection.isExpanded) return next();\n\n  if (isEnterHotkey(event) && selection.anchor.isTextPoint()) {\n    const { startBlock } = value;\n    if (!startBlock) return next();\n\n    const chars = startBlock.text\n      .slice(0, selection.anchor.offset)\n      .replace(/\\s*/g, '');\n\n    const isOnlyHrSymbolParagraph = (block: Block) =>{\n      return block.type === 'paragraph'\n      && (!block.data.ind || block.data.ind.left === 0)\n      && !block.data.list\n      && Text.isTextList(block.nodes)\n      && REGEXP_HR.test(chars)\n    };\n\n    if (isOnlyHrSymbolParagraph(startBlock)) {\n      event.preventDefault();\n      controller\n        .command(Commands.moveFocusToStartOfBlock)\n        .command(Commands.del)\n        .command(insertHr);\n      return controller.dispatch('createTriggerMarkdownAction', { mdType: 'hr' });\n    }\n  }\n  return next();\n}\n"],"file":"onKeyDown.js"}