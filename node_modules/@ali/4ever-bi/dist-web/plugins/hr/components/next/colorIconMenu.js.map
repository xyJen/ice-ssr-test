{"version":3,"sources":["../../../../../../src/plugins/hr/components/next/colorIconMenu.tsx"],"names":["React","EColorPanelMode","PluginRoles","BaseColorPicker","IconPen","ColorPicker","HoverToolbarHooks","MAPPING","parseJsonMLToValue","parseValueToJsonML","DEFAULT_HR_COLOR","updateHr","setColorPanelMode","ColorIconMenu","props","getNode","controller","onOverlayVisibleChange","locale","useState","mode","query","preset","normal","PRESETS","DEFAULT","key","ART","setPreset","getContainer","useGetContainer","usePopoverVisible","isOverlayVisible","setOverlayVisible","node","initColor","data","color","art","run","colorButtonTitle","block","hrColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { EColorPanelMode } from '@ali/we-toolbar';\nimport { Controller, Node, Block } from '@ali/4ever-cangjie';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { BaseColorPicker, IconPen, ColorPicker, HoverToolbarHooks } from '@ali/4ever-component';\nimport { MAPPING, parseJsonMLToValue, parseValueToJsonML, IHrPayload, IHrASL } from '@ali/4ever-utils';\nimport { DEFAULT_HR_COLOR } from '../../constants';\nimport { updateHr } from '../../actions';\nimport { setColorPanelMode } from '@ali/4ever-plugin-pref';\n\nexport interface IColorIconMenuProps {\n  getNode: () => Node | null;\n  controller: Controller;\n  locale: Record<string, string>;\n  onOverlayVisibleChange: (visible: boolean) => void;\n};\n\nexport const ColorIconMenu: React.FC<IColorIconMenuProps> = (props) => {\n  const { getNode, controller, onOverlayVisibleChange, locale } = props;\n  const [preset, setPreset] = React.useState(() => {\n    const mode = controller.query('getColorPanelMode')?.mode;\n    const preset = mode === EColorPanelMode.normal ? ColorPicker.PRESETS.DEFAULT.key : ColorPicker.PRESETS.ART.key;\n    return preset;\n  });\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('hr.color', onOverlayVisibleChange);\n  const node = getNode();\n  if (!node) return null;\n  const initColor = parseJsonMLToValue((node as Block).data as IHrASL, MAPPING).color || DEFAULT_HR_COLOR;\n  \n  return (\n    <BaseColorPicker\n      onCurrentPresetChange={(preset: string) => {\n        let mode = EColorPanelMode.normal;\n        if (preset === ColorPicker.PRESETS.ART.key) {\n          mode = EColorPanelMode.art;\n        }\n        controller.run('onAction', setColorPanelMode({ mode }));\n        setPreset(preset);\n      }}\n      currentPreset={preset}\n      title={locale.colorButtonTitle}\n      onVisibleChange={setOverlayVisible}\n      overlayVisible={isOverlayVisible}\n      color={initColor}\n      onColorChange={(color) => {\n        const block = getNode();\n        const data = parseValueToJsonML({ color } as IHrPayload, MAPPING);\n        controller.run('onAction', updateHr({ node: block, data }));\n      }}\n      icon={<IconPen />}\n      useSubColor\n      autoColor={DEFAULT_HR_COLOR}\n      getContainer={getContainer}\n      testid=\"bi-toolbar-hr-color\"\n      role={PluginRoles.hrColor}\n    />\n  )\n}\n"],"file":"colorIconMenu.js"}