{"version":3,"sources":["../../../../../../src/plugins/hr/components/next/styleIconSelect.tsx"],"names":["React","TBIconMenu","Menu","commonLineMap","CommonLine","IconLineType","HoverToolbarHooks","PluginRoles","MAPPING","parseValueToJsonML","updateHr","LINE_LENGTH","StyleIconSelect","props","getNode","controller","onOverlayVisibleChange","locale","node","useState","data","type","setType","getContainer","useGetContainer","usePopoverVisible","isOverlayVisible","setOverlayVisible","items","Object","keys","map","key","selected","title","handleSelect","useCallback","lineType","run","maxHeight","item","line","size","defaultSize","style","hrStyle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TBIconMenu, Menu } from '@ali/we-design-next';\n// TODO: @淼淼 升级并迁移到 we-icon, commonLineMap 迁移到 we-design-nexts\nimport { commonLineMap, CommonLine, TLineStyle } from '@ali/we-design';\nimport { IconLineType, HoverToolbarHooks } from '@ali/4ever-component';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { Controller, Node, Block } from '@ali/4ever-cangjie';\nimport { HrData } from '@ali/4ever-mo';\nimport { MAPPING, parseValueToJsonML, IHrPayload } from '@ali/4ever-utils';\nimport { updateHr } from '../../actions';\nimport { LINE_LENGTH } from './constants';\n\nexport interface IStyleIconSelectProps {\n  controller: Controller;\n  getNode: () => Node | null;\n  onOverlayVisibleChange: (v: boolean) => void;\n  locale: Record<string, string>;\n}\n\nexport const StyleIconSelect: React.FC<IStyleIconSelectProps> = (props) => {\n  const { getNode, controller, onOverlayVisibleChange, locale } = props;\n  const node = getNode();\n  const [type, setType] = React.useState(((node as Block)?.data as HrData)?.type || 'single');\n  const getContainer = HoverToolbarHooks.useGetContainer();\n  const [isOverlayVisible, setOverlayVisible] = HoverToolbarHooks.usePopoverVisible('hr.style', onOverlayVisibleChange);\n\n  const items = Object.keys(commonLineMap).map((key) => ({\n    key,\n    selected: type === key,\n    title: key,\n  }));\n\n  const handleSelect = React.useCallback(([lineType]) => {\n    const node = getNode();\n    if (!node) return;\n    const data = parseValueToJsonML({ lineType } as IHrPayload, MAPPING);\n    controller.run('onAction', updateHr({ data, node }));\n    setType(lineType);\n    setOverlayVisible(false);\n  }, [getNode, onOverlayVisibleChange, setOverlayVisible]);\n\n  if (!node) return null;\n\n  return (\n    <TBIconMenu\n      overlay={\n        <Menu\n          items={items}\n          style={{ maxHeight: 300 }}\n          renderItem={(item) => {\n            const { key } = item;\n            const line = commonLineMap[key];\n            if (!line) return null;\n            const { defaultSize: size } = line;\n            return (\n              <Menu.Item\n                key={key}\n                data-testid={`option-${key}`}\n              >\n                <CommonLine\n                  lineType={(key as TLineStyle)}\n                  size={size}\n                  length={LINE_LENGTH}\n                />\n              </Menu.Item>\n\n            );\n          }}\n          onSelect={handleSelect}\n        />\n      }\n      icon={<IconLineType />}\n      overlayVisible={isOverlayVisible}\n      onVisibleChange={setOverlayVisible}\n      placement=\"bottomLeft\"\n      getContainer={getContainer}\n      tooltip={locale.style}\n      testid=\"bi-toolbar-hr-style\"\n      role={PluginRoles.hrStyle}\n    />\n  )\n};"],"file":"styleIconSelect.js"}