import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { EColorPanelMode } from '@ali/we-toolbar';
import { PluginRoles } from '@ali/4ever-bamboo';
import { BaseColorPicker, IconPen, ColorPicker, HoverToolbarHooks } from '@ali/4ever-component';
import { MAPPING, parseJsonMLToValue, parseValueToJsonML } from '@ali/4ever-utils';
import { DEFAULT_HR_COLOR } from "../../constants";
import { updateHr } from "../../actions";
import { setColorPanelMode } from '@ali/4ever-plugin-pref';
;

var _ref = /*#__PURE__*/_createElement(IconPen, null);

export var ColorIconMenu = function ColorIconMenu(props) {
  var getNode = props.getNode,
      controller = props.controller,
      onOverlayVisibleChange = props.onOverlayVisibleChange,
      locale = props.locale;

  var _React$useState = React.useState(function () {
    var _controller$query;

    var mode = (_controller$query = controller.query('getColorPanelMode')) == null ? void 0 : _controller$query.mode;
    var preset = mode === EColorPanelMode.normal ? ColorPicker.PRESETS.DEFAULT.key : ColorPicker.PRESETS.ART.key;
    return preset;
  }),
      preset = _React$useState[0],
      setPreset = _React$useState[1];

  var getContainer = HoverToolbarHooks.useGetContainer();

  var _HoverToolbarHooks$us = HoverToolbarHooks.usePopoverVisible('hr.color', onOverlayVisibleChange),
      isOverlayVisible = _HoverToolbarHooks$us[0],
      setOverlayVisible = _HoverToolbarHooks$us[1];

  var node = getNode();
  if (!node) return null;
  var initColor = parseJsonMLToValue(node.data, MAPPING).color || DEFAULT_HR_COLOR;
  return /*#__PURE__*/_createElement(BaseColorPicker, {
    onCurrentPresetChange: function onCurrentPresetChange(preset) {
      var mode = EColorPanelMode.normal;

      if (preset === ColorPicker.PRESETS.ART.key) {
        mode = EColorPanelMode.art;
      }

      controller.run('onAction', setColorPanelMode({
        mode: mode
      }));
      setPreset(preset);
    },
    currentPreset: preset,
    title: locale.colorButtonTitle,
    onVisibleChange: setOverlayVisible,
    overlayVisible: isOverlayVisible,
    color: initColor,
    onColorChange: function onColorChange(color) {
      var block = getNode();
      var data = parseValueToJsonML({
        color: color
      }, MAPPING);
      controller.run('onAction', updateHr({
        node: block,
        data: data
      }));
    },
    icon: _ref,
    useSubColor: true,
    autoColor: DEFAULT_HR_COLOR,
    getContainer: getContainer,
    testid: "bi-toolbar-hr-color",
    role: PluginRoles.hrColor
  });
};
//# sourceMappingURL=colorIconMenu.js.map