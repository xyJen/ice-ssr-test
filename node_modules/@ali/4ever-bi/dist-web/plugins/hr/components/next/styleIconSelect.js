import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TBIconMenu, Menu } from '@ali/we-design-next'; // TODO: @淼淼 升级并迁移到 we-icon, commonLineMap 迁移到 we-design-nexts

import { commonLineMap, CommonLine } from '@ali/we-design';
import { IconLineType, HoverToolbarHooks } from '@ali/4ever-component';
import { PluginRoles } from '@ali/4ever-bamboo';
import { MAPPING, parseValueToJsonML } from '@ali/4ever-utils';
import { updateHr } from "../../actions";
import { LINE_LENGTH } from "./constants";

var _ref2 = /*#__PURE__*/_createElement(IconLineType, null);

export var StyleIconSelect = function StyleIconSelect(props) {
  var _data;

  var getNode = props.getNode,
      controller = props.controller,
      onOverlayVisibleChange = props.onOverlayVisibleChange,
      locale = props.locale;
  var node = getNode();

  var _React$useState = React.useState((node == null ? void 0 : (_data = node.data) == null ? void 0 : _data.type) || 'single'),
      type = _React$useState[0],
      setType = _React$useState[1];

  var getContainer = HoverToolbarHooks.useGetContainer();

  var _HoverToolbarHooks$us = HoverToolbarHooks.usePopoverVisible('hr.style', onOverlayVisibleChange),
      isOverlayVisible = _HoverToolbarHooks$us[0],
      setOverlayVisible = _HoverToolbarHooks$us[1];

  var items = Object.keys(commonLineMap).map(function (key) {
    return {
      key: key,
      selected: type === key,
      title: key
    };
  });
  var handleSelect = React.useCallback(function (_ref) {
    var lineType = _ref[0];
    var node = getNode();
    if (!node) return;
    var data = parseValueToJsonML({
      lineType: lineType
    }, MAPPING);
    controller.run('onAction', updateHr({
      data: data,
      node: node
    }));
    setType(lineType);
    setOverlayVisible(false);
  }, [getNode, onOverlayVisibleChange, setOverlayVisible]);
  if (!node) return null;
  return /*#__PURE__*/_createElement(TBIconMenu, {
    overlay: /*#__PURE__*/_createElement(Menu, {
      items: items,
      style: {
        maxHeight: 300
      },
      renderItem: function renderItem(item) {
        var key = item.key;
        var line = commonLineMap[key];
        if (!line) return null;
        var size = line.defaultSize;
        return /*#__PURE__*/_createElement(Menu.Item, {
          key: key,
          "data-testid": "option-" + key
        }, /*#__PURE__*/_createElement(CommonLine, {
          lineType: key,
          size: size,
          length: LINE_LENGTH
        }));
      },
      onSelect: handleSelect
    }),
    icon: _ref2,
    overlayVisible: isOverlayVisible,
    onVisibleChange: setOverlayVisible,
    placement: "bottomLeft",
    getContainer: getContainer,
    tooltip: locale.style,
    testid: "bi-toolbar-hr-style",
    role: PluginRoles.hrStyle
  });
};
//# sourceMappingURL=styleIconSelect.js.map