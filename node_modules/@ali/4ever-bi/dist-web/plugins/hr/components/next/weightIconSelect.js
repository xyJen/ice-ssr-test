import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { TBIconMenu, Menu } from '@ali/we-design-next';
import { PluginRoles } from '@ali/4ever-bamboo'; // TODO: @淼淼 升级并迁移到 we-icon, commonLineMap 迁移到 we-design-nexts

import { commonLineMap, CommonLine } from '@ali/we-design';
import { IconLineWeight, HoverToolbarHooks } from '@ali/4ever-component';
import { MAPPING, parseValueToJsonML } from '@ali/4ever-utils';
import { updateHr } from "../../actions";
import { LINE_LENGTH } from "./constants";
var MenuItemWrapper = /*#__PURE__*/styled.div(["display:flex;flex-direction:row;align-items:center;"]);
var MenuItemText = /*#__PURE__*/styled.span(["margin-right:4px;"]);

var _ref2 = /*#__PURE__*/_createElement(IconLineWeight, null);

export var WeightIconSelect = function WeightIconSelect(props) {
  var _data;

  var getNode = props.getNode,
      controller = props.controller,
      onOverlayVisibleChange = props.onOverlayVisibleChange,
      locale = props.locale;
  var node = getNode();

  var _React$useState = React.useState(node == null ? void 0 : (_data = node.data) == null ? void 0 : _data.sz),
      size = _React$useState[0],
      setSize = _React$useState[1];

  var getContainer = HoverToolbarHooks.useGetContainer();

  var _HoverToolbarHooks$us = HoverToolbarHooks.usePopoverVisible('hr.weight', onOverlayVisibleChange),
      isPopoverVisible = _HoverToolbarHooks$us[0],
      setPopoverVisible = _HoverToolbarHooks$us[1];

  var sizeList = commonLineMap.single.sizeList;
  var items = sizeList.map(function (sz) {
    return {
      key: String(sz),
      selected: String(sz) === String(size),
      title: String(sz)
    };
  });
  var handleSelect = React.useCallback(function (_ref) {
    var lineSize = _ref[0];
    var node = getNode();
    if (!node) return;
    var data = parseValueToJsonML({
      size: lineSize
    }, MAPPING);
    controller.run('onAction', updateHr({
      data: data,
      node: node
    }));
    setSize(lineSize);
    setPopoverVisible(false);
  }, [getNode, onOverlayVisibleChange, setPopoverVisible]);
  if (!node) return null;
  return /*#__PURE__*/_createElement(TBIconMenu, {
    overlay: /*#__PURE__*/_createElement(Menu, {
      items: items,
      renderItem: function renderItem(item) {
        var size = item.key;
        return /*#__PURE__*/_createElement(Menu.Item, {
          key: size,
          "data-testid": "option-" + size
        }, /*#__PURE__*/_createElement(MenuItemWrapper, null, /*#__PURE__*/_createElement(MenuItemText, null, size, "pt"), /*#__PURE__*/_createElement(CommonLine, {
          lineType: "single",
          size: Number(size),
          length: LINE_LENGTH,
          color: "black"
        })));
      },
      onSelect: handleSelect
    }),
    icon: _ref2,
    onVisibleChange: setPopoverVisible,
    overlayVisible: isPopoverVisible,
    placement: "bottomLeft",
    getContainer: getContainer,
    tooltip: locale.weight,
    testid: "bi-toolbar-hr-weight",
    role: PluginRoles.hrWeight
  });
};
//# sourceMappingURL=weightIconSelect.js.map