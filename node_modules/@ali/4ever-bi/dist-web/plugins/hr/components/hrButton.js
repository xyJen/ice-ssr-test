import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Button, CommonLine, commonLineMap, CommonLineSelect, LinethicknessNormal, LinetypeNormal, Select, SelectOption } from '@ali/we-design';
import { PluginRoles } from '@ali/4ever-bamboo';
import { ColorPicker, EColorPickerIcon } from '@ali/we-toolbar';
import { MAPPING, parseJsonMLToValue, parseValueToJsonML } from '@ali/4ever-utils';
import { insertHr } from "../actions";
import { DEFAULT_HR_COLOR } from "../constants";
import { setColorPanelMode } from '@ali/4ever-plugin-pref';

var _ref = /*#__PURE__*/_createElement(LinetypeNormal, null);

export function HrButton(props) {
  var controller = props.controller,
      locale = props.locale; // check if color changes

  var onChange = React.useCallback(function (payload) {
    var data = parseValueToJsonML(payload, MAPPING);
    controller.run('onAction', insertHr(data));
  }, [controller]);
  var icon = React.useMemo(function () {
    return _ref;
  }, []);
  return /*#__PURE__*/_createElement(Button, {
    title: locale.buttonTitle,
    bordered: false,
    testid: "bi-toolbar-hrline",
    icon: icon,
    onClick: onChange,
    role: PluginRoles.hr
  });
}
export var HrColor = function HrColor(props) {
  var _parsedPayload;

  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var onChange = function onChange(color) {
    var data = parseValueToJsonML({
      color: color
    }, MAPPING);
    controller.run('onAction', insertHr(data));
  };

  var focusBlock = controller.value.focusBlock;
  var parsedPayload;

  if (focusBlock) {
    var payload = focusBlock.data;
    parsedPayload = parseJsonMLToValue(payload, MAPPING);
  }

  var getColorPanelMode = React.useCallback(function () {
    var _controller$query;

    return (_controller$query = controller.query('getColorPanelMode')) == null ? void 0 : _controller$query.mode;
  }, [controller]);
  var handleSelectValueChange = React.useCallback(function (mode) {
    controller.run('onAction', setColorPanelMode({
      mode: mode
    }));
  }, [controller]);
  return /*#__PURE__*/_createElement(ColorPicker, _extends({}, rest, {
    title: locale.colorButtonTitle,
    btnType: EColorPickerIcon.backgroundfont,
    color: (_parsedPayload = parsedPayload) == null ? void 0 : _parsedPayload.color,
    onColorPicker: onChange,
    defaultColor: DEFAULT_HR_COLOR,
    automaticColor: "#404040",
    role: PluginRoles.hrColor,
    showToggleSelect: true,
    getColorPanelMode: getColorPanelMode,
    onSelectValueChange: handleSelectValueChange
  }));
};

var _ref2 = /*#__PURE__*/_createElement(LinetypeNormal, null);

export var HrStyle = function HrStyle(props) {
  var _parsedPayload2;

  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var onChange = function onChange(lineType) {
    var data = parseValueToJsonML({
      lineType: lineType
    }, MAPPING);
    controller.run('onAction', insertHr(data));
  };

  var focusBlock = controller.value.focusBlock;
  var parsedPayload;

  if (focusBlock) {
    var payload = focusBlock.data;
    parsedPayload = parseJsonMLToValue(payload, MAPPING);
  } // 受控模式


  return /*#__PURE__*/_createElement(CommonLineSelect, _extends({}, rest, {
    title: locale.style,
    color: "#000000",
    length: 63,
    lineType: (_parsedPayload2 = parsedPayload) == null ? void 0 : _parsedPayload2.lineType,
    onLineTypeChange: onChange,
    customTrigger: function customTrigger() {
      return _ref2;
    },
    bordered: false,
    role: PluginRoles.hrStyle
  }));
};

var _ref3 = /*#__PURE__*/_createElement(LinethicknessNormal, null);

export var HrWeight = function HrWeight(props) {
  var _commonLineMap$lineTy;

  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var onChange = function onChange(size) {
    var data = parseValueToJsonML({
      size: size
    }, MAPPING);
    controller.run('onAction', insertHr(data));
  };

  var focusBlock = controller.value.focusBlock;
  var parsedPayload = {};

  if (focusBlock) {
    var payload = focusBlock.data;
    parsedPayload = parseJsonMLToValue(payload, MAPPING);
  }

  var _parsedPayload3 = parsedPayload,
      width = _parsedPayload3.size,
      _parsedPayload3$lineT = _parsedPayload3.lineType,
      lineType = _parsedPayload3$lineT === void 0 ? 'single' : _parsedPayload3$lineT;
  var lineWidthList = (_commonLineMap$lineTy = commonLineMap[lineType]) == null ? void 0 : _commonLineMap$lineTy.sizeList;

  if (!lineWidthList) {
    lineWidthList = commonLineMap.single.sizeList;
  }

  return /*#__PURE__*/_createElement(Select, _extends({}, rest, {
    title: locale.weight,
    value: width,
    className: "",
    renderTrigger: function renderTrigger() {
      return _ref3;
    },
    selectable: true,
    onChange: onChange,
    testid: "hr-weight-button",
    role: PluginRoles.hrWeight
  }), lineWidthList.map(function (size) {
    return /*#__PURE__*/_createElement(SelectOption, {
      key: size,
      value: size,
      testid: "hr-weight-" + size
    }, /*#__PURE__*/_createElement("div", {
      style: {
        marginRight: 2
      }
    }, size, "pt"), /*#__PURE__*/_createElement(CommonLine, {
      length: 63,
      lineType: "single",
      color: "black",
      size: size
    }));
  }));
};
//# sourceMappingURL=hrButton.js.map