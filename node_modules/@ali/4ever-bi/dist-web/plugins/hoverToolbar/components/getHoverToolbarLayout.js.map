{"version":3,"sources":["../../../../../src/plugins/hoverToolbar/components/getHoverToolbarLayout.tsx"],"names":["React","TBIconButton","TBItemSlot","MoreMenuButton","getNodeType","isReactElementValid","element","validDisplayNames","type","displayName","indexOf","getHoverToolbarLayout","params","layoutConfigs","plugins","controller","node","hoverCapture","locale","visiblePopoverSet","setActiveInteraction","activeRef","reset","layoutConfig","folded","normal","splitFolded","length","undefined","onOverlayVisibleChange","visible","key","getCurrentNode","enableTrigger","add","size","disableTrigger","current","getNode","document","value","path","getPath","getNodeByPath","layout","map","group","item","split","pluginName","buttonName","render","hash","renderHoverToolbar","extraProps","v","buttonOrButtonProps","isValidElement","cloneElement","console","error","onClick","autoClose","rest","handleClick","e","forceClose","filter","groupItem","groupLayout","moreMenuItems","clickMap","forEach","groupItems","buttonProps","title","prefix","icon","disabled","testid","role","push","concat","moreButtonMenu","pop","onSelect","lastGroup","layoutWithDivider","block","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TBIconButton, ITBIconButtonProps, Menu, TBItemSlot, IToolbarLayoutProps } from '@ali/we-design-next';\nimport type { Controller, Node, BiPlugin } from '@ali/4ever-cangjie';\nimport { Plugins } from '../../../pluginsContext';\nimport { HoverCapture } from '../utils/hoverCapture';\nimport { IHoverToolbarLayout } from '../types';\nimport { MoreMenuButton } from './MoreMenuButton';\nimport { ILocale } from '../types';\nimport getNodeType from '../utils/getNodeType';\nimport type { IListItem } from './MoreMenuButton';\n\nfunction isReactElementValid(element: React.ReactElement) {\n  const validDisplayNames = ['iconButton', 'iconMenu', 'splitButton', 'iconSelect', 'textSelect', 'toolbarSlot'];\n  const { displayName } = (element.type as any);\n  return validDisplayNames.indexOf(displayName) > -1;\n}\n\ntype IHoverToolbarButton = NonNullable<ReturnType<BiPlugin['renderHoverToolbar']>>;\n\ntype IHoverButtonConfig = Exclude<IHoverToolbarButton, React.ReactElement>;\n\nexport function getHoverToolbarLayout(params: {\n  layoutConfigs: Record<string, IHoverToolbarLayout>;\n  plugins: Plugins | null;\n  controller: Controller;\n  node: Node;\n  hoverCapture: HoverCapture;\n  locale: ILocale;\n  visiblePopoverSet: Set<string>;\n  activeRef: React.MutableRefObject<string>;\n  setActiveInteraction: (v: string) => void;\n  reset: () => void;\n}): IToolbarLayoutProps['singleLineToolbar'] {\n  const { layoutConfigs, plugins, controller, node, hoverCapture, locale, visiblePopoverSet, setActiveInteraction, activeRef, reset } = params;\n  const type = getNodeType(node, controller);\n  const layoutConfig = layoutConfigs[type];\n  const { folded = [], normal = [], splitFolded } = layoutConfig || {};\n  if (!plugins || !layoutConfig || (!(folded && folded.length > 0) && !(normal && normal.length > 0))) {\n    return undefined;\n  }\n  const onOverlayVisibleChange = (visible: boolean, key: string) => {\n    // popover 的 onOverlayVisibleChange 是异步方法\n    if (!hoverCapture.getCurrentNode()) {\n      hoverCapture?.enableTrigger();\n      return;\n    }\n    if (visible) {\n      visiblePopoverSet.add(key);\n    } else {\n      visiblePopoverSet.delete(key);\n    }\n    if (visiblePopoverSet.size > 0) {\n      setActiveInteraction('hoverToolbarPopover');\n      hoverCapture?.disableTrigger();\n    } else {\n      if (activeRef.current === 'hoverToolbarPopover') {\n        setActiveInteraction('');\n      }\n      hoverCapture?.enableTrigger();\n    }\n  };\n\n  const getNode = () => {\n    const { document } = controller.value;\n    const path = document.getPath(node.key);\n    return path ? document.getNodeByPath(path) : null;\n  }\n\n  const layout: Array<Array<React.ReactElement>> = normal.map((group) => {\n    return (group.map((item) => {\n      const [pluginName, buttonName = 'default'] = item.split('.');\n      const render = (plugins.hash[pluginName] as BiPlugin)?.renderHoverToolbar;\n      if (!render) return null;\n      const extraProps = {\n        onOverlayVisibleChange: (v: boolean) => {\n          onOverlayVisibleChange(v, item);\n        },\n      };\n      const buttonOrButtonProps = render({ buttonName, extraProps }, controller, getNode);\n      if (React.isValidElement(buttonOrButtonProps)) {\n        if (isReactElementValid(buttonOrButtonProps)) {\n          return React.cloneElement(buttonOrButtonProps, {\n            key: item,\n          });\n        } else {\n          console.error('Toolbar 内必须使用指定的组件');\n          return null;\n        }\n      } else if (buttonOrButtonProps && typeof buttonOrButtonProps === 'object') {\n        const { onClick, autoClose, ...rest } = buttonOrButtonProps;\n        let handleClick = onClick;\n        if (autoClose) {\n          handleClick = (e) => {\n            onClick && onClick(e);\n            hoverCapture.forceClose();\n            reset();\n            setActiveInteraction('');\n          }\n        }\n        return (\n          // TODO：@淼淼 支持替换 icon\n          <TBIconButton\n            {...(rest as ITBIconButtonProps)}\n            onClick={handleClick}\n            key={item}\n          />\n        );\n      }\n      return null;\n    }).filter((groupItem) => !!groupItem)) as React.ReactElement[];\n  }).filter((groupLayout) => groupLayout && groupLayout.length > 0);\n  let moreMenuItems: Array<IListItem | 'divider'> = [];\n  const clickMap: Record<string, () => void> = {};\n  folded.forEach((group) => {\n    const groupItems: Array<IListItem> = [];\n    group.forEach((item) => {\n      const [pluginName, buttonName = 'default'] = item.split('.');\n      const extraProps = {\n        onOverlayVisibleChange: (v: boolean) => {\n          onOverlayVisibleChange(v, item);\n        },\n      };\n      const buttonProps = (plugins.hash[pluginName] as BiPlugin)?.renderHoverToolbar?.({ buttonName, extraProps }, controller, getNode);\n      if (buttonProps && typeof buttonProps === 'object') {\n        const { title, icon: prefix, disabled, onClick, autoClose, testid, role } = buttonProps as IHoverButtonConfig;\n        if (onClick) {\n          const handleClick = autoClose\n            ? (e) => {\n              onClick(e);\n              hoverCapture.forceClose();\n              setActiveInteraction('');\n              reset();\n            } : onClick\n          // @ts-ignore\n          clickMap[item] = handleClick;\n          groupItems.push({\n            key: item,\n            title: title || '',\n            prefix,\n            disabled,\n            testid,\n            ['data-role']: role,\n          });\n        }\n      }\n\n    });\n    if (groupItems.length > 0) {\n      moreMenuItems = moreMenuItems.concat(groupItems, 'divider');\n    }\n  });\n  let moreButtonMenu: React.ReactElement | null = null;\n\n  if (moreMenuItems.length > 0) {\n    moreMenuItems.pop();\n    const onSelect = (key: string) => {\n      clickMap[key] && clickMap[key]();\n    }\n    moreButtonMenu = (\n      <TBItemSlot display='iconButton'>\n        <MoreMenuButton\n          onSelect={onSelect}\n          items={moreMenuItems}\n          onOverlayVisibleChange={(v) => {\n            onOverlayVisibleChange(v, 'more');\n          }}\n          locale={locale}\n        />\n      </TBItemSlot>\n    );\n  }\n\n  if (moreButtonMenu) {\n    const length = layout?.length;\n    const lastGroup = length > 0 ? layout[length -1] : null; \n    if (splitFolded || !lastGroup) {\n      layout.push([moreButtonMenu]);\n    } else {\n      lastGroup.push(moreButtonMenu);\n    }\n  }\n\n  const { length } = layout;\n  let layoutWithDivider: IToolbarLayoutProps['singleLineToolbar'] = [];\n  \n  layout.forEach((block, index) => {\n    if (index < length -1) {\n      layoutWithDivider = layoutWithDivider!.concat(block, 'divider');\n    } else {\n      layoutWithDivider!.push(block);\n    }\n  });\n  \n  return layoutWithDivider;\n}"],"file":"getHoverToolbarLayout.js"}