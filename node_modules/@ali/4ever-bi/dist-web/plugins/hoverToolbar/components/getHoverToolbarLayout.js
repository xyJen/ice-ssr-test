import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TBIconButton, TBItemSlot } from '@ali/we-design-next';
import { MoreMenuButton } from "./MoreMenuButton";
import getNodeType from "../utils/getNodeType";

function isReactElementValid(element) {
  var validDisplayNames = ['iconButton', 'iconMenu', 'splitButton', 'iconSelect', 'textSelect', 'toolbarSlot'];
  var _ref = element.type,
      displayName = _ref.displayName;
  return validDisplayNames.indexOf(displayName) > -1;
}

export function getHoverToolbarLayout(params) {
  var layoutConfigs = params.layoutConfigs,
      plugins = params.plugins,
      controller = params.controller,
      node = params.node,
      hoverCapture = params.hoverCapture,
      locale = params.locale,
      visiblePopoverSet = params.visiblePopoverSet,
      setActiveInteraction = params.setActiveInteraction,
      activeRef = params.activeRef,
      reset = params.reset;
  var type = getNodeType(node, controller);
  var layoutConfig = layoutConfigs[type];

  var _ref2 = layoutConfig || {},
      _ref2$folded = _ref2.folded,
      folded = _ref2$folded === void 0 ? [] : _ref2$folded,
      _ref2$normal = _ref2.normal,
      normal = _ref2$normal === void 0 ? [] : _ref2$normal,
      splitFolded = _ref2.splitFolded;

  if (!plugins || !layoutConfig || !(folded && folded.length > 0) && !(normal && normal.length > 0)) {
    return undefined;
  }

  var _onOverlayVisibleChange = function onOverlayVisibleChange(visible, key) {
    // popover 的 onOverlayVisibleChange 是异步方法
    if (!hoverCapture.getCurrentNode()) {
      hoverCapture == null ? void 0 : hoverCapture.enableTrigger();
      return;
    }

    if (visible) {
      visiblePopoverSet.add(key);
    } else {
      visiblePopoverSet["delete"](key);
    }

    if (visiblePopoverSet.size > 0) {
      setActiveInteraction('hoverToolbarPopover');
      hoverCapture == null ? void 0 : hoverCapture.disableTrigger();
    } else {
      if (activeRef.current === 'hoverToolbarPopover') {
        setActiveInteraction('');
      }

      hoverCapture == null ? void 0 : hoverCapture.enableTrigger();
    }
  };

  var getNode = function getNode() {
    var document = controller.value.document;
    var path = document.getPath(node.key);
    return path ? document.getNodeByPath(path) : null;
  };

  var layout = normal.map(function (group) {
    return group.map(function (item) {
      var _plugins$hash$pluginN;

      var _item$split = item.split('.'),
          pluginName = _item$split[0],
          _item$split$ = _item$split[1],
          buttonName = _item$split$ === void 0 ? 'default' : _item$split$;

      var render = (_plugins$hash$pluginN = plugins.hash[pluginName]) == null ? void 0 : _plugins$hash$pluginN.renderHoverToolbar;
      if (!render) return null;
      var extraProps = {
        onOverlayVisibleChange: function onOverlayVisibleChange(v) {
          _onOverlayVisibleChange(v, item);
        }
      };
      var buttonOrButtonProps = render({
        buttonName: buttonName,
        extraProps: extraProps
      }, controller, getNode);

      if ( /*#__PURE__*/React.isValidElement(buttonOrButtonProps)) {
        if (isReactElementValid(buttonOrButtonProps)) {
          return /*#__PURE__*/React.cloneElement(buttonOrButtonProps, {
            key: item
          });
        } else {
          console.error('Toolbar 内必须使用指定的组件');
          return null;
        }
      } else if (buttonOrButtonProps && typeof buttonOrButtonProps === 'object') {
        var onClick = buttonOrButtonProps.onClick,
            autoClose = buttonOrButtonProps.autoClose,
            rest = _objectWithoutPropertiesLoose(buttonOrButtonProps, ["onClick", "autoClose"]);

        var handleClick = onClick;

        if (autoClose) {
          handleClick = function handleClick(e) {
            onClick && onClick(e);
            hoverCapture.forceClose();
            reset();
            setActiveInteraction('');
          };
        }

        return (
          /*#__PURE__*/
          // TODO：@淼淼 支持替换 icon
          _createElement(TBIconButton, _extends({}, rest, {
            onClick: handleClick,
            key: item
          }))
        );
      }

      return null;
    }).filter(function (groupItem) {
      return !!groupItem;
    });
  }).filter(function (groupLayout) {
    return groupLayout && groupLayout.length > 0;
  });
  var moreMenuItems = [];
  var clickMap = {};
  folded.forEach(function (group) {
    var groupItems = [];
    group.forEach(function (item) {
      var _plugins$hash$pluginN2;

      var _item$split2 = item.split('.'),
          pluginName = _item$split2[0],
          _item$split2$ = _item$split2[1],
          buttonName = _item$split2$ === void 0 ? 'default' : _item$split2$;

      var extraProps = {
        onOverlayVisibleChange: function onOverlayVisibleChange(v) {
          _onOverlayVisibleChange(v, item);
        }
      };
      var buttonProps = (_plugins$hash$pluginN2 = plugins.hash[pluginName]) == null ? void 0 : _plugins$hash$pluginN2.renderHoverToolbar == null ? void 0 : _plugins$hash$pluginN2.renderHoverToolbar({
        buttonName: buttonName,
        extraProps: extraProps
      }, controller, getNode);

      if (buttonProps && typeof buttonProps === 'object') {
        var _ref3 = buttonProps,
            title = _ref3.title,
            prefix = _ref3.icon,
            disabled = _ref3.disabled,
            onClick = _ref3.onClick,
            autoClose = _ref3.autoClose,
            testid = _ref3.testid,
            role = _ref3.role;

        if (onClick) {
          var _groupItems$push;

          var handleClick = autoClose ? function (e) {
            onClick(e);
            hoverCapture.forceClose();
            setActiveInteraction('');
            reset();
          } : onClick; // @ts-ignore

          clickMap[item] = handleClick;
          groupItems.push((_groupItems$push = {
            key: item,
            title: title || '',
            prefix: prefix,
            disabled: disabled,
            testid: testid
          }, _groupItems$push['data-role'] = role, _groupItems$push));
        }
      }
    });

    if (groupItems.length > 0) {
      moreMenuItems = moreMenuItems.concat(groupItems, 'divider');
    }
  });
  var moreButtonMenu = null;

  if (moreMenuItems.length > 0) {
    moreMenuItems.pop();

    var onSelect = function onSelect(key) {
      clickMap[key] && clickMap[key]();
    };

    moreButtonMenu = /*#__PURE__*/_createElement(TBItemSlot, {
      display: "iconButton"
    }, /*#__PURE__*/_createElement(MoreMenuButton, {
      onSelect: onSelect,
      items: moreMenuItems,
      onOverlayVisibleChange: function onOverlayVisibleChange(v) {
        _onOverlayVisibleChange(v, 'more');
      },
      locale: locale
    }));
  }

  if (moreButtonMenu) {
    var _length = layout == null ? void 0 : layout.length;

    var lastGroup = _length > 0 ? layout[_length - 1] : null;

    if (splitFolded || !lastGroup) {
      layout.push([moreButtonMenu]);
    } else {
      lastGroup.push(moreButtonMenu);
    }
  }

  var length = layout.length;
  var layoutWithDivider = [];
  layout.forEach(function (block, index) {
    if (index < length - 1) {
      layoutWithDivider = layoutWithDivider.concat(block, 'divider');
    } else {
      layoutWithDivider.push(block);
    }
  });
  return layoutWithDivider;
}
//# sourceMappingURL=getHoverToolbarLayout.js.map