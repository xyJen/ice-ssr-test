import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { PluginRoles } from '@ali/4ever-bamboo';
import { IconCopy, IconCut, IconDelete } from '@ali/4ever-component';
import { Commands } from '@ali/4ever-cangjie';
import { HOVER_TOOLBAR_CUT_NODE, HOVER_TOOLBAR_COPY_NODE } from "./actions";

var _ref = /*#__PURE__*/_createElement(IconCut, null);

var _ref2 = /*#__PURE__*/_createElement(IconCopy, null);

var _ref3 = /*#__PURE__*/_createElement(IconDelete, null);

export default function createRenderHoverToolbar(config) {
  var locale = config.locale;
  return function (props, controller, getNode) {
    var buttonName = props.buttonName;

    switch (buttonName) {
      case 'cut':
        return {
          icon: _ref,
          title: (locale == null ? void 0 : locale.cut) || 'Cut',
          tooltip: (locale == null ? void 0 : locale.cut) || 'Cut',
          onClick: function onClick() {
            var node = getNode();
            node && controller.run('onAction', {
              type: HOVER_TOOLBAR_CUT_NODE,
              payload: {
                node: node
              }
            });
          },
          autoClose: true,
          role: PluginRoles.hoverToolbarCut,
          testid: 'bi-toolbar-hover-cut'
        };

      case 'copy':
        return {
          icon: _ref2,
          title: (locale == null ? void 0 : locale.copy) || 'Copy',
          tooltip: (locale == null ? void 0 : locale.copy) || 'Copy',
          onClick: function onClick() {
            var node = getNode();
            node && controller.run('onAction', {
              type: HOVER_TOOLBAR_COPY_NODE,
              payload: {
                node: node
              }
            });
          },
          autoClose: true,
          role: PluginRoles.hoverToolbarCopy,
          testid: 'bi-toolbar-hover-copy'
        };

      case 'delete':
        return {
          icon: _ref3,
          title: (locale == null ? void 0 : locale["delete"]) || 'Delete',
          tooltip: (locale == null ? void 0 : locale["delete"]) || 'Delete',
          onClick: function onClick() {
            var node = getNode();
            node && controller.command(Commands.removeNodeByKey, node.key);
          },
          autoClose: true,
          role: PluginRoles.hoverToolbarDelete,
          testid: 'bi-toolbar-hover-delete'
        };

      default:
        return null;
    }
  };
}
//# sourceMappingURL=createRenderHoverToolbar.js.map