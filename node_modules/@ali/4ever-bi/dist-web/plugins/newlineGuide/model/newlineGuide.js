import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import { Commands, Text } from '@ali/4ever-cangjie';
export var NEWLINE_GUIDE_TRIGGER = '/';
export var NEWLINE_GUIDE_TRIGGER_CN = '、';
export var NEWLINE_GUIDE_TRIGGER_PLUS = '+';
export var triggerKeyList = [NEWLINE_GUIDE_TRIGGER_PLUS, NEWLINE_GUIDE_TRIGGER];
export var triggerList = [NEWLINE_GUIDE_TRIGGER_PLUS, NEWLINE_GUIDE_TRIGGER_CN, NEWLINE_GUIDE_TRIGGER];

function setNewlineGuide(controller, payload) {
  var _newlineGuide = controller.value.data._newlineGuide;
  return controller.setData(_extends({}, controller.value.data, {
    _newlineGuide: _extends({}, _newlineGuide, payload)
  }));
}

function removeNewlineGuide(controller) {
  var _controller$value$dat = controller.value.data,
      _newlineGuide = _controller$value$dat._newlineGuide,
      rest = _objectWithoutPropertiesLoose(_controller$value$dat, ["_newlineGuide"]);

  return controller.setData(rest);
}

function getNewlineGuide(controller) {
  return controller.value.data._newlineGuide;
}

var isNewLineInsert = function isNewLineInsert(block, removeText) {
  return block.type === 'paragraph' && (block.data.jc || 'left') === 'left' && (!block.data.ind || block.data.ind.left === 0) && !block.data.list && Text.isTextList(block.nodes) && block.text === removeText;
};

function removeGuideMenuTriggerText(controller, needRemoveEmptyParagraph) {
  var newlineGuideData = getNewlineGuide(controller);
  if (!newlineGuideData) return controller;
  var key = newlineGuideData.key,
      _newlineGuideData$que = newlineGuideData.query,
      query = _newlineGuideData$que === void 0 ? '' : _newlineGuideData$que;
  var point = newlineGuideData.point;
  if (!key) return controller;
  var newlineBlock = controller.value.document.getNode(key);
  if (!newlineBlock) return controller;
  var textNode = newlineBlock.nodes.find(function (node) {
    return (point == null ? void 0 : point.key) === node.key;
  });
  if (!textNode) return controller;
  var triggerText = textNode.text.substring((point == null ? void 0 : point.offset) - 1, point == null ? void 0 : point.offset);
  var removeText = triggerText;

  if (point && query) {
    // 点击输入取query的内容
    removeText = "" + triggerText + query;
  }

  if (textNode.text && textNode.text !== '@' && (point == null ? void 0 : point.offset) > -1) {
    controller.command(Commands.removeTextByKey, textNode.key, point.offset - 1, removeText);
  }

  if (needRemoveEmptyParagraph && isNewLineInsert(newlineBlock, removeText)) {
    // 如果是空段落则移除当前行
    controller.command(Commands.removeNodeByKey, newlineBlock.key);
  }

  return controller;
}

export var NewlineGuideData = {
  set: setNewlineGuide,
  get: getNewlineGuide,
  remove: removeNewlineGuide,
  removeTriggerText: removeGuideMenuTriggerText
};
//# sourceMappingURL=newlineGuide.js.map