import React, { useMemo, useState, useRef, useEffect, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Commands, useScrollableContent } from '@ali/4ever-cangjie';
import { Dropdown, Tooltip } from '@ali/we-design';
import { LEGAL_EVENT } from '@ali/4ever-utils';
import { InsertBtnWrapper, TooltipText, PrimaryText, AddIcon } from "./styled";
import { ActiveInteractionHooks } from '@ali/4ever-component';
import GuideMenu from "./guideMenu";
import { DropdownAnimation } from '@ali/we-util';
import { useLeftToolbar } from '@ali/4ever-component';
import { mountInsertMenuFromLeftToolbar } from "../actions";
var useActiveInteraction = ActiveInteractionHooks.useActiveInteraction;
export var InsertBtn = function InsertBtn(props) {
  var controller = props.controller,
      currentBlock = props.currentBlock,
      renderGuideMenu = props.renderGuideMenu,
      onClickGuideMenu = props.onClickGuideMenu,
      enableKeyboard = props.enableKeyboard,
      locale = props.locale,
      _props$trigger = props.trigger,
      trigger = _props$trigger === void 0 ? 'hover' : _props$trigger; // 数据流改造后 useZoomContainer 在未触发controller二次更新前为 null

  var container = useScrollableContent() || document.body;

  var _useState = useState(false),
      guideMenuVisible = _useState[0],
      setGuideMenuVisibleState = _useState[1];

  var timeout = useRef(null);

  var _useLeftToolbar = useLeftToolbar(),
      actions = _useLeftToolbar[1];

  var _useActiveInteraction = useActiveInteraction(),
      activeType = _useActiveInteraction[0],
      setActiveType = _useActiveInteraction[1];

  var activeRef = React.useRef('');
  activeRef.current = activeType;
  var guideMenuVisibleRef = React.useRef(guideMenuVisible);
  guideMenuVisibleRef.current = guideMenuVisible;
  var removeHighlightByType = React.useCallback(function (type) {
    if (!currentBlock) return;
    controller.dispatch('removeHighlight', {
      node: currentBlock,
      type: type,
      reason: 'insertBtn'
    });
  }, []);
  useEffect(function () {
    return function () {
      actions.clearPrevent(); // InsertBtn 在不渲染时会被卸载，在这里兜底清除选中的样式

      removeHighlightByType('hover');
      removeHighlightByType('select');

      if (guideMenuVisibleRef.current) {
        setActiveType('');
      }

      timeout.current && clearTimeout(timeout.current);
    };
  }, [removeHighlightByType, setActiveType]);
  useEffect(function () {
    var handler = function handler(e) {
      var visible = e.detail.visible;
      setGuideMenuVisible(visible);
      removeHighlightByType('select');
      actions.clearPrevent();
      timeout.current && clearTimeout(timeout.current);
    };

    window.document.addEventListener(LEGAL_EVENT.quickInsertMenuVisible, handler);
    return function () {
      window.document.removeEventListener(LEGAL_EVENT.quickInsertMenuVisible, handler);
    };
  }, [removeHighlightByType, actions]);
  var setGuideMenuVisible = useCallback(function (state) {
    setGuideMenuVisibleState(state);

    if (state) {
      controller.run('onAction', mountInsertMenuFromLeftToolbar());
    }
  }, [setGuideMenuVisibleState, controller]);

  var handleClickGuideMenu = function handleClickGuideMenu(value) {
    onClickGuideMenu == null ? void 0 : onClickGuideMenu(value);
    setGuideMenuVisible(false);
    removeHighlightByType('select');
    actions.clearPrevent();
    timeout.current && clearTimeout(timeout.current);
  };

  var guideMenu = useMemo(function () {
    if (!renderGuideMenu) {
      return null;
    }

    return /*#__PURE__*/_createElement(GuideMenu, {
      controller: controller,
      enableKeyboard: enableKeyboard,
      onClickGuideMenu: handleClickGuideMenu
    }, renderGuideMenu());
  }, [renderGuideMenu, enableKeyboard, handleClickGuideMenu]);

  var handleMouseLeave = function handleMouseLeave() {
    !guideMenuVisible && removeHighlightByType('hover');
    timeout.current && clearTimeout(timeout.current);
  };

  var handleMouseEnter = function handleMouseEnter() {
    if (!currentBlock) return;
    controller.dispatch('updateHighlight', {
      node: currentBlock,
      type: 'hover',
      reason: 'insertBtn'
    });
  };

  var onVisibleChangeForClick = function onVisibleChangeForClick(visible) {
    setGuideMenuVisible(visible);

    if (visible) {
      actions.preventMouseMove();
      controller.dispatch('updateHighlight', {
        node: currentBlock,
        type: 'select',
        reason: 'insertBtn'
      });
    } else {
      actions.clearPrevent();
      removeHighlightByType('select');
    }
  };

  var onVisibleChangeForHover = function onVisibleChangeForHover(visible) {
    if (visible) {
      timeout.current = setTimeout(function () {
        setGuideMenuVisible(visible);
        actions.preventMouseMove();
        controller.dispatch('updateHighlight', {
          node: currentBlock,
          type: 'select',
          reason: 'insertBtn'
        });
      }, 300);
    } else {
      setGuideMenuVisible(visible);
      actions.clearPrevent();
      removeHighlightByType('select');
      timeout.current && clearTimeout(timeout.current);
    }
  };

  var handleClick = function handleClick() {
    setGuideMenuVisible(true);
    actions.preventMouseMove();
  };

  React.useEffect(function () {
    if (guideMenuVisible) {
      setActiveType('newLineMenu');
    } else {
      if (activeRef.current === 'newLineMenu') {
        setActiveType('');
      }
    }
  }, [guideMenuVisible, setActiveType]);

  var onMouseDown = function onMouseDown() {
    if (!currentBlock) return;
    var startBlock = controller.value.startBlock;
    if ((currentBlock == null ? void 0 : currentBlock.key) === (startBlock == null ? void 0 : startBlock.key)) return;
    controller.command(Commands.moveToEndOfNode, currentBlock).command(Commands.focus);
  };

  return /*#__PURE__*/_createElement(Dropdown, {
    overlay: guideMenuVisible ? /*#__PURE__*/_createElement(DropdownAnimation, {
      visible: guideMenuVisible
    }, /*#__PURE__*/_createElement("div", {
      onMouseDown: onMouseDown
    }, guideMenu)) : null,
    placement: "leftTop",
    trigger: trigger,
    onVisibleChange: trigger === 'hover' ? onVisibleChangeForHover : onVisibleChangeForClick,
    getContainer: function getContainer() {
      return container;
    },
    visible: guideMenuVisible
  }, /*#__PURE__*/_createElement("span", null, /*#__PURE__*/_createElement(Tooltip, {
    title: /*#__PURE__*/_createElement(TooltipText, null, /*#__PURE__*/_createElement(PrimaryText, null, locale == null ? void 0 : locale.click), locale == null ? void 0 : locale.clickTip),
    placement: "top",
    getContainer: function getContainer() {
      return container;
    },
    overlayStyle: {
      padding: 4
    },
    disabled: guideMenuVisible || trigger === 'hover'
  }, /*#__PURE__*/_createElement(InsertBtnWrapper, {
    "data-drag-handler-key": currentBlock == null ? void 0 : currentBlock.key,
    "data-testid": "newline-guide-insertText",
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onClick: handleClick
  }, AddIcon))));
};
export default (function (config) {
  return function (_ref) {
    var controller = _ref.controller,
        currentBlock = _ref.currentBlock;
    var _controller$value = controller.value,
        composing = _controller$value.composing,
        startBlock = _controller$value.startBlock,
        isFocused = _controller$value.isFocused,
        document = _controller$value.document;
    var isNewLine = controller.query('isInsertBtnDisplay', {
      node: currentBlock,
      composing: composing
    });
    var inTemplateButton = false; // perf

    if (isNewLine) {
      var _controller$query;

      // 模板按钮内隐藏 insert btn
      inTemplateButton = (_controller$query = controller.query('isNodeInTemplateButton', {
        node: currentBlock
      })) != null ? _controller$query : false;
    }

    var nodeText = currentBlock == null ? void 0 : currentBlock.text;
    var showBtn = !nodeText && isNewLine;

    if (showBtn && !inTemplateButton) {
      var _config$newlineGuide, _config$newlineGuide2, _config$newlineGuide3, _config$newlineGuide4, _config$newlineGuide5;

      return /*#__PURE__*/_createElement(InsertBtn, {
        onClickGuideMenu: (_config$newlineGuide = config.newlineGuide) == null ? void 0 : _config$newlineGuide.onClickGuideMenu,
        enableKeyboard: (_config$newlineGuide2 = config.newlineGuide) == null ? void 0 : _config$newlineGuide2.enableKeyboard,
        locale: (_config$newlineGuide3 = config.newlineGuide) == null ? void 0 : _config$newlineGuide3.locale,
        renderGuideMenu: (_config$newlineGuide4 = config.newlineGuide) == null ? void 0 : _config$newlineGuide4.renderGuideMenu,
        trigger: (_config$newlineGuide5 = config.newlineGuide) == null ? void 0 : _config$newlineGuide5.trigger,
        controller: controller,
        currentBlock: currentBlock
      });
    }

    return null;
  };
});
//# sourceMappingURL=insertBtn.js.map