import { Text } from '@ali/4ever-cangjie';
export function checkBlockContent(block) {
  var nodes = block.nodes; // 子节点数大于1视为非空

  if (nodes.length > 1 || !Text.isTextList(nodes)) return false; // TODO: 后续做过滤的时候这里需要去掉
  // 有文本视为非空

  if (block.text && block.text !== '+') return false;
  return true;
}
export function checkBlockData(controller, block) {
  // 检查 data 属性
  var _ref = block.data || {},
      blockquote = _ref.blockquote,
      _ref$jc = _ref.jc,
      jc = _ref$jc === void 0 ? 'left' : _ref$jc,
      ind = _ref.ind,
      list = _ref.list;

  var _ref2 = ind || {},
      _ref2$firstLine = _ref2.firstLine,
      firstLine = _ref2$firstLine === void 0 ? 0 : _ref2$firstLine,
      _ref2$left = _ref2.left,
      left = _ref2$left === void 0 ? 0 : _ref2$left; // 不支持居中和居右显示


  if (blockquote || jc === 'center' || jc === 'right' || firstLine || left || list) return false;
  return true;
}
export function checkBlockCount(controller) {
  var document = controller.value.document; // 如果全局只有一个 node 则不展示，避免和全局的 placeholder 重合

  return document.nodes.length !== 1;
}
export default function isNewline(controller, _ref3) {
  var node = _ref3.node,
      composing = _ref3.composing,
      placeholder = _ref3.placeholder;
  var block = node;
  if (composing.length > 0 || !block) return false; // 使用 query 后不会再有 data.pi，直接比较 type

  if (block.type !== 'paragraph') return false; // 依次检查 节点总数、data、内容，复杂度递增

  if (placeholder && !checkBlockCount(controller)) return false;
  if (!checkBlockData(controller, block)) return false;
  if (!checkBlockContent(block)) return false;
  return true;
}
//# sourceMappingURL=isNewLine.js.map