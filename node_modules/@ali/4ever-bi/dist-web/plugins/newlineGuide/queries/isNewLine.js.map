{"version":3,"sources":["../../../../../src/plugins/newlineGuide/queries/isNewLine.ts"],"names":["Text","checkBlockContent","block","nodes","length","isTextList","text","checkBlockData","controller","data","blockquote","jc","ind","list","firstLine","left","checkBlockCount","document","value","isNewline","node","composing","placeholder","type"],"mappings":"AAAA,SAA4BA,IAA5B,QAAwC,oBAAxC;AAEA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAyC;AAAA,MACtCC,KADsC,GAC5BD,KAD4B,CACtCC,KADsC,EAE9C;;AACA,MAAIA,KAAK,CAACC,MAAN,GAAe,CAAf,IAAoB,CAACJ,IAAI,CAACK,UAAL,CAAgBF,KAAhB,CAAzB,EAAiD,OAAO,KAAP,CAHH,CAI9C;AACA;;AACA,MAAID,KAAK,CAACI,IAAN,IAAcJ,KAAK,CAACI,IAAN,KAAe,GAAjC,EAAsC,OAAO,KAAP;AACtC,SAAO,IAAP;AACD;AAED,OAAO,SAASC,cAAT,CAAwBC,UAAxB,EAAgDN,KAAhD,EAA8D;AACnE;AADmE,aAEpBA,KAAK,CAACO,IAAN,IAAc,EAFM;AAAA,MAE3DC,UAF2D,QAE3DA,UAF2D;AAAA,qBAE/CC,EAF+C;AAAA,MAE/CA,EAF+C,wBAE1C,MAF0C;AAAA,MAElCC,GAFkC,QAElCA,GAFkC;AAAA,MAE7BC,IAF6B,QAE7BA,IAF6B;;AAAA,cAG/BD,GAAG,IAAI,EAHwB;AAAA,8BAG3DE,SAH2D;AAAA,MAG3DA,SAH2D,gCAG/C,CAH+C;AAAA,yBAG5CC,IAH4C;AAAA,MAG5CA,IAH4C,2BAGrC,CAHqC,eAKnE;;;AACA,MACEL,UAAU,IACVC,EAAE,KAAK,QADP,IAEAA,EAAE,KAAK,OAFP,IAGAG,SAHA,IAIAC,IAJA,IAKAF,IANF,EAOE,OAAO,KAAP;AAEF,SAAO,IAAP;AACD;AAED,OAAO,SAASG,eAAT,CAAyBR,UAAzB,EAAiD;AAAA,MAC9CS,QAD8C,GACjCT,UAAU,CAACU,KADsB,CAC9CD,QAD8C,EAEtD;;AACA,SAAOA,QAAQ,CAACd,KAAT,CAAeC,MAAf,KAA0B,CAAjC;AACD;AAQD,eAAe,SAASe,SAAT,CACbX,UADa,SAOb;AAAA,MAJEY,IAIF,SAJEA,IAIF;AAAA,MAHEC,SAGF,SAHEA,SAGF;AAAA,MAFEC,WAEF,SAFEA,WAEF;AACA,MAAMpB,KAAK,GAAGkB,IAAd;AACA,MAAIC,SAAS,CAACjB,MAAV,GAAmB,CAAnB,IAAwB,CAACF,KAA7B,EAAoC,OAAO,KAAP,CAFpC,CAIA;;AACA,MAAIA,KAAK,CAACqB,IAAN,KAAe,WAAnB,EAAgC,OAAO,KAAP,CALhC,CAOA;;AACA,MAAID,WAAW,IAAI,CAACN,eAAe,CAACR,UAAD,CAAnC,EAAiD,OAAO,KAAP;AAEjD,MAAI,CAACD,cAAc,CAACC,UAAD,EAAaN,KAAb,CAAnB,EAAwC,OAAO,KAAP;AAExC,MAAI,CAACD,iBAAiB,CAACC,KAAD,CAAtB,EAA+B,OAAO,KAAP;AAE/B,SAAO,IAAP;AACD","sourcesContent":["import { Block, Controller, Text } from '@ali/4ever-cangjie';\n\nexport function checkBlockContent(block: Block) {\n  const { nodes } = block;\n  // 子节点数大于1视为非空\n  if (nodes.length > 1 || !Text.isTextList(nodes)) return false;\n  // TODO: 后续做过滤的时候这里需要去掉\n  // 有文本视为非空\n  if (block.text && block.text !== '+') return false;\n  return true;\n}\n\nexport function checkBlockData(controller: Controller, block: Block) {\n  // 检查 data 属性\n  const { blockquote, jc = 'left', ind, list } = block.data || {};\n  const { firstLine = 0, left = 0 } = ind || {};\n\n  // 不支持居中和居右显示\n  if (\n    blockquote ||\n    jc === 'center' ||\n    jc === 'right' ||\n    firstLine ||\n    left ||\n    list\n  ) return false;\n\n  return true;\n}\n\nexport function checkBlockCount(controller: Controller) {\n  const { document } = controller.value;\n  // 如果全局只有一个 node 则不展示，避免和全局的 placeholder 重合\n  return document.nodes.length !== 1;\n}\n\nexport interface IsNewLineProps {\n  node: Block | null;\n  composing: string;\n  placeholder?: string;\n}\n\nexport default function isNewline(\n  controller: Controller,\n  {\n    node,\n    composing,\n    placeholder,\n  }: IsNewLineProps,\n) {\n  const block = node;\n  if (composing.length > 0 || !block) return false;\n\n  // 使用 query 后不会再有 data.pi，直接比较 type\n  if (block.type !== 'paragraph') return false;\n\n  // 依次检查 节点总数、data、内容，复杂度递增\n  if (placeholder && !checkBlockCount(controller)) return false;\n\n  if (!checkBlockData(controller, block)) return false;\n\n  if (!checkBlockContent(block)) return false;\n\n  return true;\n}\n"],"file":"isNewLine.js"}