import { environment, Text } from '@ali/4ever-cangjie';
import { isKeyHotkey } from 'is-hotkey';
import { NewlineGuideData, triggerKeyList, NEWLINE_GUIDE_TRIGGER_CN, triggerList } from "../model/newlineGuide";
import { removeNewlineData, setNewlineData } from "../actions";
var whiteList = ['ins'];

function isEmptyNode(block, defaultText) {
  if (defaultText === void 0) {
    defaultText = '';
  }

  var children = block.nodes.filter(function (node) {
    // 优先排除text节点的内容
    return !Text.isText(node);
  }).filter(function (node) {
    // 过滤掉白名单的节点，例如修订模式插入的节点
    return !whiteList.includes(node.type);
  });
  return block.text === defaultText && children.length === 0;
}

var isEscHotKey = isKeyHotkey('esc');
var isUndoKey = isKeyHotkey('ctrl+z');
var isEqualKey = isKeyHotkey('='); // 微软中文输入法下，输入斜杠，key为Process，这种场景下，选择对输入的内容进行判断

var ignoreKeyList = ['Process'];
/**
 * 因为在中文输入法下存在keydown与cangjieInput时序不可保证
 * 因此使用onKeyUp来收拢触发移除下拉菜单的逻辑
 * 下拉菜单目前触发逻辑：
 * 1.输入/触发
 * 2.在行首输入、触发
 */

export default function createOnKeyUp(config) {
  var _config$newlineGuide;

  var newlineGuideEnabled = (_config$newlineGuide = config.newlineGuide) == null ? void 0 : _config$newlineGuide.enabled;
  return function (event, controller, next) {
    if (!newlineGuideEnabled || environment.IS_MOBILE) return next();

    if (controller.query('isTriggerringSnippets')) {
      return next();
    }

    var _controller$value = controller.value,
        composing = _controller$value.composing,
        selection = _controller$value.selection,
        startBlock = _controller$value.startBlock;
    var _ref = selection,
        anchor = _ref.anchor,
        isCollapsed = _ref.isCollapsed;

    var _ref2 = NewlineGuideData.get(controller) || {},
        triggered = _ref2.triggered,
        point = _ref2.point;

    if (triggered && (isEscHotKey(event) || isUndoKey(event) || anchor.key !== (point == null ? void 0 : point.key) || (anchor == null ? void 0 : anchor.offset) < (point == null ? void 0 : point.offset))) {
      controller.run('onAction', removeNewlineData());
    } // 特殊处理keyup事件，当+快速弹起的时候可能会触发shift和=两个事件，最终以value为准，TODO：后续需要处理仓颉底层keyup


    if (triggerKeyList.includes(event.key) || isEqualKey(event) || ignoreKeyList.includes(event.key)) {
      var _event$target;

      // 触发
      var value = (_event$target = event.target) == null ? void 0 : _event$target.value; // 优先处理在分页模式下唤起问题，真正原因是由于在排版下从onKeyDown->onKeyUp过程中textarea被reset了，后续在底层解决该问题

      var data = (value == null ? void 0 : value.substr(value.length - 1)) || event.key;

      if (data === NEWLINE_GUIDE_TRIGGER_CN && !isEmptyNode(startBlock, data)) {
        // 中文顿号在行中不唤起
        return next();
      }

      if (isCollapsed && startBlock && triggerList.includes(data) && !composing) {
        // 获取当前光标位置进行存储
        controller.run('onAction', setNewlineData({
          key: startBlock.key,
          triggered: true,
          point: selection.anchor,
          showMenu: true
        }));
      }
    }

    return next();
  };
}
//# sourceMappingURL=createOnKeyUp.js.map