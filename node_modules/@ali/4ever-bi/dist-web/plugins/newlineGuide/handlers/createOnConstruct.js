import { environment, PendingType } from '@ali/4ever-cangjie';
import { NewlineGuideData } from "../model/newlineGuide";
import { setNewlineData, removeNewlineData } from "../actions";
export default function createOnConstruct(config) {
  var _config$newlineGuide;

  var newlineGuideEnabled = (_config$newlineGuide = config.newlineGuide) == null ? void 0 : _config$newlineGuide.enabled;
  return function (controller, next) {
    if (!newlineGuideEnabled || environment.IS_MOBILE) return next();

    if (controller.enableHots || controller.isPendingEnable) {
      var onInput = function onInput() {
        var _ref = NewlineGuideData.get(controller) || {},
            triggered = _ref.triggered,
            point = _ref.point,
            query = _ref.query;

        var _controller$value = controller.value,
            selection = _controller$value.selection,
            document = _controller$value.document,
            composing = _controller$value.composing;
        var anchor = selection.anchor;

        if (!triggered || composing) {
          return next();
        }

        if ((point == null ? void 0 : point.key) === (anchor == null ? void 0 : anchor.key) && (point == null ? void 0 : point.offset) <= (anchor == null ? void 0 : anchor.offset)) {
          // 下拉弹窗弹出时计算query
          var node = document.getNode(point.key);
          var newQuery = (node == null ? void 0 : node.text.substring(point.offset, anchor == null ? void 0 : anchor.offset)) || '';
          if (query === newQuery) return next();

          if (newQuery.includes(' ')) {
            controller.run('onAction', removeNewlineData());
            return next();
          }

          controller.run('onAction', setNewlineData({
            query: newQuery
          }));
        }
      };
      /**
       * 在Pending场景下，onchange获取到的query可能会出现迟滞的情况，所以这里需要inputData$来及时更新搜素内容
       * 但是这里只针对进行英文输入的场景，中文输入法下，输入完成后会立即flush，所以inputData$不会触发
       * 所以pending场景还是会走一遍onchange来确保中文输入法query正确
       */


      controller.inputData$.subscribe(onInput);
      controller.hots$.subscribe(function () {
        if (controller.pendingType === PendingType.input) {
          onInput();
        }
      });
    }

    return next();
  };
}
//# sourceMappingURL=createOnConstruct.js.map