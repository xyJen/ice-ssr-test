import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { LineHeightSelect } from '@ali/we-toolbar';
import { PluginRoles } from '@ali/4ever-bamboo';
import { setLineHeight } from "../actions";
;
var MemoLineHeightSelect = /*#__PURE__*/React.memo(LineHeightSelect);
export function sideBarTriggerFactory(Component, sideBarTrigger) {
  return function (props) {
    return /*#__PURE__*/_createElement(Component, _extends({}, props, {
      sideBarTrigger: sideBarTrigger
    }));
  };
}

var LineHeightButton = function LineHeightButton(props) {
  var controller = props.controller,
      locale = props.locale,
      toolbarMode = props.toolbarMode,
      sideBarTrigger = props.sideBarTrigger,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "toolbarMode", "sideBarTrigger"]);

  var _controller$query = controller.query('getLineHeight'),
      line = _controller$query.line,
      _controller$query$lin = _controller$query.lineRule,
      lineRule = _controller$query$lin === void 0 ? 'auto' : _controller$query$lin; // 组件只支持多倍行距，undefined 或 固定值情况视为 NaN 以便组件不勾选


  var lineValue = parseFloat(lineRule !== 'auto' ? undefined : line);
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInTaskList') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  var handleChange = React.useCallback(function (value) {
    controller.run('onAction', setLineHeight(value));
  }, [controller]);

  var handleClickCustomize = function handleClickCustomize() {
    if (sideBarTrigger && sideBarTrigger.open) {
      sideBarTrigger.open('paragraph');
    }
  };

  return /*#__PURE__*/_createElement(MemoLineHeightSelect, _extends({}, rest, {
    testid: "bi-toolbar-lineheight",
    value: lineValue,
    disabled: isDisabled,
    onChange: handleChange,
    onCustomize: sideBarTrigger && sideBarTrigger.open ? handleClickCustomize : undefined,
    tooltip: locale.buttonTitle,
    role: PluginRoles.lineHeightSelect
  }));
};

export default LineHeightButton;
//# sourceMappingURL=lineHeightButton.js.map