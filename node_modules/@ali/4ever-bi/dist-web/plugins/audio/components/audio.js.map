{"version":3,"sources":["../../../../../src/plugins/audio/components/audio.tsx"],"names":["React","PureComponent","useScrollableContainer","EmbedPlugin","updateFile","EmbedInlineToolbar","EmbedCard","AudioPreview","Audio","props","ref","createRef","getNodeData","node","data","onSwitchViewType","viewType","controller","prevViewType","run","onDownloadFile","src","name","type","size","onDownload","onMediaLoadSuccess","onMediaLoadError","allowDownload","state","componentDidMount","then","res","setState","renderCard","isSelected","locale","renderPreview","transformAudioURL","renderInlineToolbar","current","render","attributes","Container","scrollableContainer"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  RenderNodeProps,\n  useScrollableContainer,\n} from '@ali/4ever-cangjie';\nimport {\n  EmbedNode, EmbedPlugin,\n} from '@ali/4ever-bamboo';\nimport { updateFile, EmbedInlineToolbar } from '@ali/4ever-factory';\nimport { AudioPluginConfig } from '../types';\n\nconst {\n  EmbedCard, AudioPreview,\n} = EmbedPlugin;\n\ninterface IProps extends\n  Pick<AudioPluginConfig, 'allowDownload' | 'onMediaLoadSuccess' | 'onMediaLoadError' | 'locale'>,\n  RenderNodeProps<EmbedNode> {\n  onDownload: AudioPluginConfig['downloadFile'];\n  transformAudioURL?: AudioPluginConfig['transformAudioURL'];\n  scrollableContainer: HTMLElement | Window;\n  zoomContainer: HTMLElement | null;\n}\n\ninterface IState {\n  allowDownload: boolean;\n}\n\nclass Audio extends PureComponent<IProps, IState> {\n  ref = React.createRef<HTMLDivElement>();\n\n  constructor(props: IProps) {\n    super(props);\n    const { allowDownload } = props;\n    this.state = {\n      allowDownload: typeof allowDownload === 'boolean' ? allowDownload : false,\n    };\n  }\n\n  componentDidMount() {\n    const { allowDownload } = this.props;\n    const { src } = this.getNodeData();\n\n    if (typeof allowDownload === 'function') {\n      allowDownload(src).then((res) => {\n        this.setState({\n          allowDownload: res,\n        });\n      });\n    }\n  }\n\n  getNodeData = () => {\n    const { node } = this.props;\n    const { data } = node;\n    return data;\n  };\n\n  onSwitchViewType = (viewType: string) => {\n    const { controller, node } = this.props;\n    const { data } = node;\n    const { viewType: prevViewType } = this.getNodeData();\n    if (prevViewType === viewType) {\n      return;\n    }\n    controller.run(\n      'onAction',\n      updateFile(\n        node,\n        {\n          ...data,\n          viewType,\n        },\n      ),\n    );\n  };\n\n  onDownloadFile = () => {\n    const { src, name, type, size } = this.getNodeData();\n    const { onDownload } = this.props;\n    if (onDownload) {\n      onDownload(src, {\n        name,\n        type,\n        size,\n      });\n    }\n  };\n\n  onMediaLoadSuccess = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadSuccess } = this.props;\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(src);\n    }\n  };\n\n  onMediaLoadError = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadError } = this.props;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  renderCard() {\n    const { allowDownload } = this.state;\n    const { name, size } = this.getNodeData();\n    const { isSelected, node, locale } = this.props;\n    return (\n      <EmbedCard\n        name={name}\n        allowDownload={allowDownload}\n        isSelected={isSelected}\n        node={node}\n        locale={locale}\n        onDownloadFile={this.onDownloadFile}\n        size={size}\n      />\n    );\n  }\n\n  renderPreview() {\n    const { allowDownload } = this.state;\n    const { name, size, src } = this.getNodeData();\n    const { transformAudioURL, locale = {} } = this.props;\n\n    return (\n      <AudioPreview\n        allowDownload={allowDownload}\n        onMediaLoadSuccess={this.onMediaLoadSuccess}\n        onMediaLoadError={this.onMediaLoadError}\n        transformAudioURL={transformAudioURL}\n        locale={locale}\n        name={name}\n        size={size}\n        src={src}\n        onDownloadFile={this.onDownloadFile}\n      />\n    );\n  }\n\n  renderInlineToolbar() {\n    const { controller, node, locale = {} } = this.props;\n\n    return (\n      <EmbedInlineToolbar\n        controller={controller}\n        node={node}\n        locale={locale}\n        onSwitchViewType={this.onSwitchViewType}\n        isMoreButtonShown\n        triggerNode={this.ref.current}\n      />\n    );\n  }\n\n  render() {\n    const { viewType } = this.getNodeData();\n    const { attributes, isSelected } = this.props;\n\n    return (\n      <React.Fragment>\n        {isSelected ? this.renderInlineToolbar() : null}\n        <div\n          {...attributes}\n          ref={this.ref}\n        >\n          {viewType === 'preview' ? this.renderPreview() : this.renderCard()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Container: React.FC<IProps> = (props) => {\n  const scrollableContainer = useScrollableContainer();\n\n  return (\n    <Audio\n      {...props}\n      scrollableContainer={scrollableContainer!}\n    />\n  );\n};\n\nexport default Container;\n"],"file":"audio.js"}