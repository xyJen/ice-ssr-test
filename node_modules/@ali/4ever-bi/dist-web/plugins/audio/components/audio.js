import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useScrollableContainer } from '@ali/4ever-cangjie';
import { EmbedPlugin } from '@ali/4ever-bamboo';
import { updateFile, EmbedInlineToolbar } from '@ali/4ever-factory';
var EmbedCard = EmbedPlugin.EmbedCard,
    AudioPreview = EmbedPlugin.AudioPreview;

var Audio = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Audio, _PureComponent);

  function Audio(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.ref = /*#__PURE__*/React.createRef();

    _this.getNodeData = function () {
      var node = _this.props.node;
      var data = node.data;
      return data;
    };

    _this.onSwitchViewType = function (viewType) {
      var _this$props = _this.props,
          controller = _this$props.controller,
          node = _this$props.node;
      var data = node.data;

      var _this$getNodeData = _this.getNodeData(),
          prevViewType = _this$getNodeData.viewType;

      if (prevViewType === viewType) {
        return;
      }

      controller.run('onAction', updateFile(node, _extends({}, data, {
        viewType: viewType
      })));
    };

    _this.onDownloadFile = function () {
      var _this$getNodeData2 = _this.getNodeData(),
          src = _this$getNodeData2.src,
          name = _this$getNodeData2.name,
          type = _this$getNodeData2.type,
          size = _this$getNodeData2.size;

      var onDownload = _this.props.onDownload;

      if (onDownload) {
        onDownload(src, {
          name: name,
          type: type,
          size: size
        });
      }
    };

    _this.onMediaLoadSuccess = function () {
      var _this$getNodeData3 = _this.getNodeData(),
          src = _this$getNodeData3.src;

      var onMediaLoadSuccess = _this.props.onMediaLoadSuccess;

      if (onMediaLoadSuccess) {
        onMediaLoadSuccess(src);
      }
    };

    _this.onMediaLoadError = function () {
      var _this$getNodeData4 = _this.getNodeData(),
          src = _this$getNodeData4.src;

      var onMediaLoadError = _this.props.onMediaLoadError;

      if (onMediaLoadError) {
        onMediaLoadError(src);
      }
    };

    var allowDownload = props.allowDownload;
    _this.state = {
      allowDownload: typeof allowDownload === 'boolean' ? allowDownload : false
    };
    return _this;
  }

  var _proto = Audio.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var allowDownload = this.props.allowDownload;

    var _this$getNodeData5 = this.getNodeData(),
        src = _this$getNodeData5.src;

    if (typeof allowDownload === 'function') {
      allowDownload(src).then(function (res) {
        _this2.setState({
          allowDownload: res
        });
      });
    }
  };

  _proto.renderCard = function renderCard() {
    var allowDownload = this.state.allowDownload;

    var _this$getNodeData6 = this.getNodeData(),
        name = _this$getNodeData6.name,
        size = _this$getNodeData6.size;

    var _this$props2 = this.props,
        isSelected = _this$props2.isSelected,
        node = _this$props2.node,
        locale = _this$props2.locale;
    return /*#__PURE__*/_createElement(EmbedCard, {
      name: name,
      allowDownload: allowDownload,
      isSelected: isSelected,
      node: node,
      locale: locale,
      onDownloadFile: this.onDownloadFile,
      size: size
    });
  };

  _proto.renderPreview = function renderPreview() {
    var allowDownload = this.state.allowDownload;

    var _this$getNodeData7 = this.getNodeData(),
        name = _this$getNodeData7.name,
        size = _this$getNodeData7.size,
        src = _this$getNodeData7.src;

    var _this$props3 = this.props,
        transformAudioURL = _this$props3.transformAudioURL,
        _this$props3$locale = _this$props3.locale,
        locale = _this$props3$locale === void 0 ? {} : _this$props3$locale;
    return /*#__PURE__*/_createElement(AudioPreview, {
      allowDownload: allowDownload,
      onMediaLoadSuccess: this.onMediaLoadSuccess,
      onMediaLoadError: this.onMediaLoadError,
      transformAudioURL: transformAudioURL,
      locale: locale,
      name: name,
      size: size,
      src: src,
      onDownloadFile: this.onDownloadFile
    });
  };

  _proto.renderInlineToolbar = function renderInlineToolbar() {
    var _this$props4 = this.props,
        controller = _this$props4.controller,
        node = _this$props4.node,
        _this$props4$locale = _this$props4.locale,
        locale = _this$props4$locale === void 0 ? {} : _this$props4$locale;
    return /*#__PURE__*/_createElement(EmbedInlineToolbar, {
      controller: controller,
      node: node,
      locale: locale,
      onSwitchViewType: this.onSwitchViewType,
      isMoreButtonShown: true,
      triggerNode: this.ref.current
    });
  };

  _proto.render = function render() {
    var _this$getNodeData8 = this.getNodeData(),
        viewType = _this$getNodeData8.viewType;

    var _this$props5 = this.props,
        attributes = _this$props5.attributes,
        isSelected = _this$props5.isSelected;
    return /*#__PURE__*/_createElement(React.Fragment, null, isSelected ? this.renderInlineToolbar() : null, /*#__PURE__*/_createElement("div", _extends({}, attributes, {
      ref: this.ref
    }), viewType === 'preview' ? this.renderPreview() : this.renderCard()));
  };

  return Audio;
}(PureComponent);

var Container = function Container(props) {
  var scrollableContainer = useScrollableContainer();
  return /*#__PURE__*/_createElement(Audio, _extends({}, props, {
    scrollableContainer: scrollableContainer
  }));
};

export default Container;
//# sourceMappingURL=audio.js.map