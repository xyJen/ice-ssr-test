{"version":3,"sources":["../../../../src/plugins/audio/createRenderNode.tsx"],"names":["React","Audio","createRenderNode","config","audioConfig","audio","locale","audioLocaleConfig","downloadFile","transformAudioURL","onMediaLoadSuccess","onMediaLoadError","allowDownload","embed","props","controller","next","node","data","type","src"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAC5B,OAAOC,KAAP;AAEA,eAAe,SAASC,gBAAT,CAA0BC,MAA1B,EAAkD;AAC/D,MAAMC,WAAW,GAAGD,MAAM,CAACE,KAAP,IAAgB,EAApC;AAD+D,4BAS3DD,WAT2D,CAG7DE,MAH6D;AAAA,MAGrDC,iBAHqD,oCAGjC,EAHiC;AAAA,MAI7DC,YAJ6D,GAS3DJ,WAT2D,CAI7DI,YAJ6D;AAAA,MAK7DC,iBAL6D,GAS3DL,WAT2D,CAK7DK,iBAL6D;AAAA,MAM7DC,kBAN6D,GAS3DN,WAT2D,CAM7DM,kBAN6D;AAAA,MAO7DC,gBAP6D,GAS3DP,WAT2D,CAO7DO,gBAP6D;AAAA,MAQ7DC,aAR6D,GAS3DR,WAT2D,CAQ7DQ,aAR6D;AAU/D,SAAO;AACLC,IAAAA,KAAK,EAAE,eAACC,KAAD,EAAQC,UAAR,EAAoBC,IAApB,EAA6B;AAAA,UAC1BC,IAD0B,GACjBH,KADiB,CAC1BG,IAD0B;;AAElC,UAAIA,IAAI,CAACC,IAAL,CAAUC,IAAV,KAAmB,OAAnB,IAA8BF,IAAI,CAACC,IAAL,CAAUE,GAA5C,EAAiD;AAC/C,4BACE,eAAC,KAAD,eACMN,KADN;AAEE,UAAA,UAAU,EAAEC,UAFd;AAGE,UAAA,UAAU,EAAEP,YAHd;AAIE,UAAA,MAAM,EAAED,iBAJV;AAKE,UAAA,iBAAiB,EAAEE,iBALrB;AAME,UAAA,kBAAkB,EAAEC,kBANtB;AAOE,UAAA,gBAAgB,EAAEC,gBAPpB;AAQE,UAAA,aAAa,EAAEC;AARjB,WADF;AAYD;;AACD,aAAOI,IAAI,EAAX;AACD;AAlBI,GAAP;AAoBD","sourcesContent":["import * as React from 'react';\nimport { BiPluginConfig } from '../../types';\nimport Audio from './components/audio';\n\nexport default function createRenderNode(config: BiPluginConfig) {\n  const audioConfig = config.audio || {};\n  const {\n    locale: audioLocaleConfig = {},\n    downloadFile,\n    transformAudioURL,\n    onMediaLoadSuccess,\n    onMediaLoadError,\n    allowDownload,\n  } = audioConfig;\n  return {\n    embed: (props, controller, next) => {\n      const { node } = props;\n      if (node.data.type === 'audio' && node.data.src) {\n        return (\n          <Audio\n            {...props}\n            controller={controller}\n            onDownload={downloadFile}\n            locale={audioLocaleConfig}\n            transformAudioURL={transformAudioURL}\n            onMediaLoadSuccess={onMediaLoadSuccess}\n            onMediaLoadError={onMediaLoadError}\n            allowDownload={allowDownload}\n          />\n        );\n      }\n      return next();\n    },\n  };\n}\n"],"file":"createRenderNode.js"}