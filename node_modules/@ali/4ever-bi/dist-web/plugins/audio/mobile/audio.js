import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useScrollableContainer, EmbedPlugin } from '@ali/4ever-bamboo';
import { EmbedInlineToolbar as AudioInlineToolbar } from '@ali/4ever-factory';
var MobileEmbedCard = EmbedPlugin.MobileEmbedCard,
    AudioPreview = EmbedPlugin.AudioPreview;

var Audio = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Audio, _PureComponent);

  function Audio(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.ref = /*#__PURE__*/React.createRef();
    _this.previewRef = /*#__PURE__*/React.createRef();

    _this.getNodeData = function () {
      var node = _this.props.node;

      var _ref = node || {},
          data = _ref.data;

      return data;
    };

    _this.onMediaLoadError = function () {
      var _this$getNodeData = _this.getNodeData(),
          src = _this$getNodeData.src;

      var onMediaLoadError = _this.props.onMediaLoadError;

      if (onMediaLoadError) {
        onMediaLoadError(src);
      }
    };

    _this.onMediaLoadSuccess = function () {
      var _this$getNodeData2 = _this.getNodeData(),
          src = _this$getNodeData2.src;

      var onMediaLoadSuccess = _this.props.onMediaLoadSuccess;

      if (onMediaLoadSuccess) {
        onMediaLoadSuccess(src);
      }
    };

    _this.onDownloadFile = function () {
      var _this$getNodeData3 = _this.getNodeData(),
          src = _this$getNodeData3.src,
          name = _this$getNodeData3.name,
          type = _this$getNodeData3.type,
          size = _this$getNodeData3.size;

      var onDownload = _this.props.onDownload;

      if (onDownload) {
        onDownload(src, {
          name: name,
          type: type,
          size: size
        });
      }
    };

    var allowDownload = props.allowDownload;
    _this.state = {
      allowDownload: typeof allowDownload === 'boolean' ? allowDownload : false
    };
    return _this;
  }

  var _proto = Audio.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var allowDownload = this.props.allowDownload;

    var _this$getNodeData4 = this.getNodeData(),
        src = _this$getNodeData4.src;

    if (typeof allowDownload === 'function') {
      allowDownload(src).then(function (res) {
        _this2.setState({
          allowDownload: res
        });
      });
    }
  };

  _proto.renderPreview = function renderPreview() {
    var allowDownload = this.state.allowDownload;
    var _this$props = this.props,
        transformAudioURL = _this$props.transformAudioURL,
        locale = _this$props.locale;

    var _this$getNodeData5 = this.getNodeData(),
        name = _this$getNodeData5.name,
        size = _this$getNodeData5.size,
        src = _this$getNodeData5.src;

    return /*#__PURE__*/_createElement(AudioPreview, {
      allowDownload: allowDownload,
      onMediaLoadSuccess: this.onMediaLoadSuccess,
      onMediaLoadError: this.onMediaLoadError,
      transformAudioURL: transformAudioURL,
      locale: locale,
      name: name,
      size: size,
      src: src,
      onDownloadFile: this.onDownloadFile,
      isMobile: true
    });
  };

  _proto.renderCard = function renderCard() {
    var _this$getNodeData6 = this.getNodeData(),
        name = _this$getNodeData6.name,
        src = _this$getNodeData6.src,
        type = _this$getNodeData6.type,
        size = _this$getNodeData6.size;

    var onPreview = this.props.onPreview;
    return /*#__PURE__*/_createElement(MobileEmbedCard, {
      name: name,
      onPreview: onPreview,
      src: src,
      type: type,
      size: size
    });
  };

  _proto.renderInlineToolbar = function renderInlineToolbar() {
    var _this$props2 = this.props,
        controller = _this$props2.controller,
        node = _this$props2.node,
        locale = _this$props2.locale;
    return /*#__PURE__*/_createElement(AudioInlineToolbar, {
      controller: controller,
      node: node,
      locale: locale,
      triggerNode: this.ref.current
    });
  };

  _proto.render = function render() {
    var _this$getNodeData7 = this.getNodeData(),
        viewType = _this$getNodeData7.viewType;

    var _this$props3 = this.props,
        attributes = _this$props3.attributes,
        isSelected = _this$props3.isSelected;
    return /*#__PURE__*/_createElement(React.Fragment, null, isSelected ? this.renderInlineToolbar() : null, /*#__PURE__*/_createElement("div", _extends({}, attributes, {
      ref: this.ref
    }), viewType === 'preview' ? this.renderPreview() : this.renderCard()));
  };

  return Audio;
}(PureComponent);

var Container = function Container(props) {
  var scrollableContainer = useScrollableContainer();
  return /*#__PURE__*/_createElement(Audio, _extends({}, props, {
    scrollableContainer: scrollableContainer
  }));
};

export default Container;
//# sourceMappingURL=audio.js.map