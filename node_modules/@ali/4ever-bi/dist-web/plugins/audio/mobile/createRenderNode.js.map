{"version":3,"sources":["../../../../../src/plugins/audio/mobile/createRenderNode.tsx"],"names":["React","Audio","createRenderNode","config","audioConfig","audio","locale","audioLocaleConfig","downloadFile","onMediaLoadSuccess","onMediaLoadError","transformAudioURL","allowDownload","onPreview","embed","props","controller","next","node","data","type","src"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,OAAOC,KAAP;AAGA,eAAe,SAASC,gBAAT,CAA0BC,MAA1B,EAAkD;AAC/D,MAAMC,WAAW,GAAGD,MAAM,CAACE,KAAP,IAAgB,EAApC;AAD+D,4BAU3DD,WAV2D,CAG7DE,MAH6D;AAAA,MAGrDC,iBAHqD,oCAGjC,EAHiC;AAAA,MAI7DC,YAJ6D,GAU3DJ,WAV2D,CAI7DI,YAJ6D;AAAA,MAK7DC,kBAL6D,GAU3DL,WAV2D,CAK7DK,kBAL6D;AAAA,MAM7DC,gBAN6D,GAU3DN,WAV2D,CAM7DM,gBAN6D;AAAA,MAO7DC,iBAP6D,GAU3DP,WAV2D,CAO7DO,iBAP6D;AAAA,MAQ7DC,aAR6D,GAU3DR,WAV2D,CAQ7DQ,aAR6D;AAAA,MAS7DC,SAT6D,GAU3DT,WAV2D,CAS7DS,SAT6D;AAY/D,SAAO;AACLC,IAAAA,KAAK,EAAE,eAACC,KAAD,EAAQC,UAAR,EAAoBC,IAApB,EAA6B;AAAA,UAC1BC,IAD0B,GACjBH,KADiB,CAC1BG,IAD0B;;AAElC,UAAIA,IAAI,CAACC,IAAL,CAAUC,IAAV,KAAmB,OAAnB,IAA8BF,IAAI,CAACC,IAAL,CAAUE,GAA5C,EAAiD;AAC/C,4BACE,eAAC,KAAD,eACMN,KADN;AAEE,UAAA,UAAU,EAAEC,UAFd;AAGE,UAAA,UAAU,EAAER,YAHd;AAIE,UAAA,MAAM,EAAED,iBAJV;AAKE,UAAA,kBAAkB,EAAEE,kBALtB;AAME,UAAA,gBAAgB,EAAEC,gBANpB;AAOE,UAAA,iBAAiB,EAAEC,iBAPrB;AAQE,UAAA,aAAa,EAAEC,aARjB;AASE,UAAA,SAAS,EAAEC;AATb,WADF;AAaD;;AACD,aAAOI,IAAI,EAAX;AACD;AAnBI,GAAP;AAqBD","sourcesContent":["import * as React from 'react';\nimport Audio from './audio';\nimport { BiPluginConfig } from '../../../types';\n\nexport default function createRenderNode(config: BiPluginConfig) {\n  const audioConfig = config.audio || {};\n  const {\n    locale: audioLocaleConfig = {},\n    downloadFile,\n    onMediaLoadSuccess,\n    onMediaLoadError,\n    transformAudioURL,\n    allowDownload,\n    onPreview,\n  } = audioConfig;\n\n  return {\n    embed: (props, controller, next) => {\n      const { node } = props;\n      if (node.data.type === 'audio' && node.data.src) {\n        return (\n          <Audio\n            {...props}\n            controller={controller}\n            onDownload={downloadFile}\n            locale={audioLocaleConfig}\n            onMediaLoadSuccess={onMediaLoadSuccess}\n            onMediaLoadError={onMediaLoadError}\n            transformAudioURL={transformAudioURL}\n            allowDownload={allowDownload}\n            onPreview={onPreview}\n          />\n        );\n      }\n      return next();\n    },\n  };\n}\n"],"file":"createRenderNode.js"}