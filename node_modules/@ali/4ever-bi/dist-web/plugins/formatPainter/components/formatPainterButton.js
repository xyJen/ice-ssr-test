import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { BrushButton as Button } from '@ali/we-toolbar';
import { PluginRoles } from '@ali/4ever-bamboo';
import { useDefaultSz } from '@ali/4ever-component';
;
;
import { copyFormat, clearFormatClipboard } from "../actions";
export default function FormatPainterButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var value = controller.value;
  var defaultSz = useDefaultSz();
  var formatClipboard = value.data.formatClipboard;
  var isActive = formatClipboard && formatClipboard.trigger === 'toolbar';
  var shortcutText = locale.doubleTitle || '';
  var isCollapsedAtEdge = value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || value.data.edgeSelection || controller.query('isSelectionInHr') || controller.query('isSelectionInImage') || controller.query('isSelectionInMention') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  var handleClick = React.useCallback(function () {
    if (!formatClipboard) {
      controller.run('onAction', copyFormat('single', defaultSz));
      return;
    }

    controller.run('onAction', clearFormatClipboard());
  }, [controller, defaultSz, formatClipboard]);
  var handleDoubleClick = React.useCallback(function () {
    controller.run('onAction', copyFormat('multiple', defaultSz));
  }, [controller, defaultSz]);
  return /*#__PURE__*/_createElement(Button, _extends({}, rest, {
    shortcutText: shortcutText,
    testid: "bi-toolbar-painter",
    active: isActive,
    disabled: isDisabled,
    onClick: handleClick,
    onDoubleClick: handleDoubleClick,
    role: PluginRoles.formatPainter
  }));
}
//# sourceMappingURL=formatPainterButton.js.map