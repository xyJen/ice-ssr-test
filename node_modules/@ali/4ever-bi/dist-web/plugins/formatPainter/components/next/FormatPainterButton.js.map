{"version":3,"sources":["../../../../../../src/plugins/formatPainter/components/next/FormatPainterButton.tsx"],"names":["React","BrushButton","useDefaultSz","PluginRoles","copyFormat","clearFormatClipboard","FormatPainterButton","props","controller","locale","tooltipProp","tooltip","rest","value","defaultSz","formatClipboard","data","isActive","trigger","isCollapsedAtEdge","selection","isDisabled","edgeSelection","query","handleClick","useCallback","run","handleDoubleClick","useMemo","title","buttonTitle","description","doubleTitle","formatPainter"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAC5B,SAASC,WAAT,EAA4CC,YAA5C,QAAgE,sBAAhE;AACA,SAASC,WAAT,QAA6B,mBAA7B;AACA;AACA;AACA;AACA,SAASC,UAAT,EAAqBC,oBAArB;AAOA,eAAe,SAASC,mBAAT,CAA6BC,KAA7B,EAA8D;AAAA,MACnEC,UADmE,GACbD,KADa,CACnEC,UADmE;AAAA,MACvDC,MADuD,GACbF,KADa,CACvDE,MADuD;AAAA,MACtCC,WADsC,GACbH,KADa,CAC/CI,OAD+C;AAAA,MACtBC,IADsB,iCACbL,KADa;;AAAA,MAEnEM,KAFmE,GAEzDL,UAFyD,CAEnEK,KAFmE;AAG3E,MAAMC,SAAS,GAAGZ,YAAY,EAA9B;AAH2E,MAInEa,eAJmE,GAI/CF,KAAK,CAACG,IAJyC,CAInED,eAJmE;AAK3E,MAAME,QAAQ,GAAGF,eAAe,IAAIA,eAAe,CAACG,OAAhB,KAA4B,SAAhE;AAL2E,MAMnEC,iBANmE,GAM7CN,KAAK,CAACO,SANuC,CAMnED,iBANmE;AAQ3E,MAAME,UAAU,GAAGF,iBAAiB,IAC/BN,KAAK,CAACG,IAAN,CAAWM,aADG,IAEdd,UAAU,CAACe,KAAX,CAAiB,iBAAjB,CAFc,IAGdf,UAAU,CAACe,KAAX,CAAiB,oBAAjB,CAHc,IAIdf,UAAU,CAACe,KAAX,CAAiB,sBAAjB,CAJc,IAKdf,UAAU,CAACe,KAAX,CAAiB,yBAAjB,CALc,IAMdf,UAAU,CAACe,KAAX,CAAiB,uBAAjB,CANL;AAQA,MAAMC,WAAW,GAAGxB,KAAK,CAACyB,WAAN,CAAkB,YAAM;AAC1C,QAAI,CAACV,eAAL,EAAsB;AACpBP,MAAAA,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2BtB,UAAU,CAAC,QAAD,EAAWU,SAAX,CAArC;AACA;AACD;;AACDN,IAAAA,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2BrB,oBAAoB,EAA/C;AACD,GANmB,EAMjB,CAACG,UAAD,EAAaM,SAAb,EAAwBC,eAAxB,CANiB,CAApB;AAQA,MAAMY,iBAAiB,GAAG3B,KAAK,CAACyB,WAAN,CAAkB,YAAM;AAChDjB,IAAAA,UAAU,CAACkB,GAAX,CAAe,UAAf,EAA2BtB,UAAU,CAAC,UAAD,EAAaU,SAAb,CAArC;AACD,GAFyB,EAEvB,CAACN,UAAD,EAAaM,SAAb,CAFuB,CAA1B;AAIA,MAAMH,OAAO,GAAGX,KAAK,CAAC4B,OAAN,CAAc;AAAA;AAC5BC,MAAAA,KAAK,EAAEpB,MAAF,oBAAEA,MAAM,CAAEqB,WADa;AAE5BC,MAAAA,WAAW,EAAE,CAAAtB,MAAM,QAAN,YAAAA,MAAM,CAAEuB,WAAR,KAAuB;AAFR,OAGzBtB,WAHyB;AAAA,GAAd,EAIZ,CAACA,WAAD,CAJY,CAAhB;AAMA,sBACE,eAAC,WAAD;AACE,IAAA,MAAM,EAAC,oBADT;AAEE,IAAA,MAAM,EAAEO,QAFV;AAGE,IAAA,QAAQ,EAAEI,UAHZ;AAIE,IAAA,OAAO,EAAEG,WAJX;AAKE,IAAA,aAAa,EAAEG,iBALjB;AAME,IAAA,IAAI,EAAExB,WAAW,CAAC8B,aANpB;AAOE,IAAA,KAAK,EAAExB,MAAF,oBAAEA,MAAM,CAAEqB,WAPjB;AAQE,IAAA,OAAO,EAAEnB;AARX,KASMC,IATN,EADF;AAaD","sourcesContent":["import * as React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { BrushButton, IToolbarButtonConfig, useDefaultSz } from '@ali/4ever-component';\nimport { PluginRoles, } from '@ali/4ever-bamboo';\n;\n;\n;\nimport { copyFormat, clearFormatClipboard } from '../../actions';\n\nexport interface FormatPainterButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  locale?: Record<string, string>;\n}\n\nexport default function FormatPainterButton(props: FormatPainterButtonProps) {\n  const { controller, locale, tooltip: tooltipProp, ...rest } = props;\n  const { value } = controller;\n  const defaultSz = useDefaultSz();\n  const { formatClipboard } = value.data;\n  const isActive = formatClipboard && formatClipboard.trigger === 'toolbar';\n  const { isCollapsedAtEdge } = value.selection;\n\n  const isDisabled = isCollapsedAtEdge\n    || value.data.edgeSelection\n    || controller.query('isSelectionInHr')\n    || controller.query('isSelectionInImage')\n    || controller.query('isSelectionInMention')\n    || controller.query('isSelectionInListSymbol')\n    || controller.query('isSelectionInLinkCard');\n\n  const handleClick = React.useCallback(() => {\n    if (!formatClipboard) {\n      controller.run('onAction', copyFormat('single', defaultSz));\n      return;\n    }\n    controller.run('onAction', clearFormatClipboard());\n  }, [controller, defaultSz, formatClipboard]);\n\n  const handleDoubleClick = React.useCallback(() => {\n    controller.run('onAction', copyFormat('multiple', defaultSz));\n  }, [controller, defaultSz]);\n\n  const tooltip = React.useMemo(() => ({\n    title: locale?.buttonTitle,\n    description: locale?.doubleTitle || '',\n    ...tooltipProp,\n  }), [tooltipProp]);\n\n  return (\n    <BrushButton\n      testid=\"bi-toolbar-painter\"\n      active={isActive}\n      disabled={isDisabled}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      role={PluginRoles.formatPainter}\n      title={locale?.buttonTitle}\n      tooltip={tooltip}\n      {...rest}\n    />\n  );\n}\n"],"file":"FormatPainterButton.js"}