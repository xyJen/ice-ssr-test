import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment } from '@ali/4ever-cangjie';
import { MenuItem } from '@ali/we-design';
;
;
import { copyFormat, clearFormatClipboard } from "../actions";
var MOD = environment.IS_MAC ? 'âŒ˜' : 'Ctrl';
export var CLEAR_STYLE_HOT_KEY = MOD + "+\\";
export default function FormatPainterMenu(props) {
  var menuItem = props.menuItem,
      controller = props.controller,
      locale = props.locale;

  var title = menuItem.title,
      rest = _objectWithoutPropertiesLoose(menuItem, ["title"]);

  var value = controller.value;
  var formatClipboard = value.data.formatClipboard;
  var isActive = formatClipboard && formatClipboard.trigger === 'toolbar'; // const shortcutText = locale.doubleTitle || '';

  var isCollapsedAtEdge = value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || value.data.edgeSelection || controller.query('isSelectionInHr') || controller.query('isSelectionInImage') || controller.query('isSelectionInMention') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  var handleClick = React.useCallback(function () {
    if (!formatClipboard) {
      controller.run('onAction', copyFormat('single'));
      return;
    }

    controller.run('onAction', clearFormatClipboard());
  }, [controller, formatClipboard]);
  return /*#__PURE__*/_createElement(MenuItem, _extends({}, rest, {
    disabled: isDisabled,
    onClick: handleClick,
    testid: 'bi-toolbar-clearstyle'
  }), title || (locale == null ? void 0 : locale.buttonTitle));
}
//# sourceMappingURL=formatPainterMenu.js.map