{"version":3,"sources":["../../../../../src/plugins/formatPainter/commands/copyFormat.ts"],"names":["Selection","Mark","Marks","CommonFormatUtil","getRangesFromEditor","biActions","basicActions","isParagraphBlock","isSelectWholeBlocks","getFirstCharRangeAfterStart","range","document","convertToTextPoints","start","create","anchor","focus","moveForward","isCollapsedAtEndOfBlock","block","isExpanded","isAtEndOfNode","copiableMarks","isCopiableMark","type","Object","keys","forEach","key","TYPE","copyFormat","controller","trigger","defaultSz","value","ranges","currentBlock","getClosestBlock","textFormat","firstCharRange","getMarksAtRange","filter","markType","defaultMarks","getDefaultMarks","find","m","Bold","defaultBold","data","push","Sz","sz","paragraphFormat","isCollapsed","list","jc","spacing","ind","shd","length","run","createMergeDataAction","formatClipboard","text","paragraph"],"mappings":"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","sourcesContent":["import { Controller, Selection, Mark } from '@ali/4ever-cangjie';\nimport { Marks } from '@ali/4ever-mo';\nimport { CommonFormatUtil } from '@ali/4ever-bamboo';\nimport { getRangesFromEditor }  from '@ali/4ever-utils';\nimport { biActions as basicActions } from '@ali/4ever-plugin-basic';\nimport isParagraphBlock from '../utils/isParagraphBlock';\nimport isSelectWholeBlocks from '../utils/isSelectWholeBlocks';\n\nfunction getFirstCharRangeAfterStart(range: Selection, document) {\n  const { start } = range.convertToTextPoints(document);\n  return Selection.create({\n    anchor: start,\n    focus: start.moveForward(),\n  });\n}\n\nfunction isCollapsedAtEndOfBlock(range: Selection, block) {\n  if (range.isExpanded) {\n    return false;\n  }\n  return range.anchor.isAtEndOfNode(block);\n}\n\nlet copiableMarks;\n\nfunction isCopiableMark(type) {\n  if (!copiableMarks) {\n    copiableMarks = {};\n    Object.keys(Marks).forEach((key) => {\n      copiableMarks[Marks[key].TYPE] = true;\n    });\n  }\n  return copiableMarks[type];\n}\n\nexport default function copyFormat(\n  controller: Controller,\n  trigger?: string,\n  type = 'single',\n  defaultSz?: number,\n) {\n  const { value } = controller;\n  const ranges = getRangesFromEditor(controller);\n\n  const range: Selection | null = ranges[0];\n\n  if (!range) {\n    return controller;\n  }\n\n  const { document } = value;\n  const { start } = range.convertToTextPoints(document);\n  const currentBlock = document.getClosestBlock(start.key);\n  if (!currentBlock) return controller;\n\n  let textFormat: Mark[] = [];\n  // TODO: 当前逻辑没有考虑段尾的情况，粘贴样式会导致已有的mark被情况，待修复\n  if (range.isExpanded || !isCollapsedAtEndOfBlock(range, currentBlock)) {\n    // only copy style of first char\n    const firstCharRange = getFirstCharRangeAfterStart(range, document);\n    textFormat = document\n      .getMarksAtRange(firstCharRange)\n      .filter(({ type: markType }) => isCopiableMark(markType));\n    // 为默认普通文本补充样式\n    if (isParagraphBlock(currentBlock)) {\n      const defaultMarks = CommonFormatUtil.getDefaultMarks(currentBlock, defaultSz);\n      if (!textFormat.find((m) => m.type === Marks.Bold.TYPE)) {\n        // 补充 value 为 false 的 bold mark：让包括标题在内的所有文本都能取消加粗\n        const defaultBold = defaultMarks.find((m) => m.type === Marks.Bold.TYPE) || Mark.create({\n          type: Marks.Bold.TYPE,\n          data: {\n            value: false,\n          },\n        });\n        textFormat.push(defaultBold);\n      }\n      if (!textFormat.find((m) => m.type === Marks.Sz.TYPE)) {\n        // 补充默认字号\n        const sz = defaultMarks.find((m) => m.type === Marks.Sz.TYPE);\n        sz && textFormat.push(sz);\n      }\n    }\n  }\n\n  let paragraphFormat;\n  if (range.isCollapsed || isSelectWholeBlocks(value)) {\n    // only copy style of text paragraph\n    if (isParagraphBlock(currentBlock)) {\n      paragraphFormat = {\n        type: currentBlock.type,\n        list: currentBlock.data.list,\n        jc: currentBlock.data.jc,\n        spacing: currentBlock.data.spacing,\n        ind: currentBlock.data.ind,\n        shd: currentBlock.data.shd,\n      };\n    }\n  }\n\n  // found no formats\n  if (paragraphFormat && !textFormat.length) return controller;\n\n  controller.run('onAction', basicActions.createMergeDataAction({\n    formatClipboard: {\n      trigger,\n      type,\n      text: textFormat,\n      paragraph: paragraphFormat,\n    },\n  }));\n\n  return controller;\n}\n"],"file":"copyFormat.js"}