import { Selection, Mark } from '@ali/4ever-cangjie';
import { Marks } from '@ali/4ever-mo';
import { CommonFormatUtil } from '@ali/4ever-bamboo';
import { getRangesFromEditor } from '@ali/4ever-utils';
import { biActions as basicActions } from '@ali/4ever-plugin-basic';
import isParagraphBlock from "../utils/isParagraphBlock";
import isSelectWholeBlocks from "../utils/isSelectWholeBlocks";

function getFirstCharRangeAfterStart(range, document) {
  var _range$convertToTextP = range.convertToTextPoints(document),
      start = _range$convertToTextP.start;

  return Selection.create({
    anchor: start,
    focus: start.moveForward()
  });
}

function isCollapsedAtEndOfBlock(range, block) {
  if (range.isExpanded) {
    return false;
  }

  return range.anchor.isAtEndOfNode(block);
}

var copiableMarks;

function isCopiableMark(type) {
  if (!copiableMarks) {
    copiableMarks = {};
    Object.keys(Marks).forEach(function (key) {
      copiableMarks[Marks[key].TYPE] = true;
    });
  }

  return copiableMarks[type];
}

export default function copyFormat(controller, trigger, type, defaultSz) {
  if (type === void 0) {
    type = 'single';
  }

  var value = controller.value;
  var ranges = getRangesFromEditor(controller);
  var range = ranges[0];

  if (!range) {
    return controller;
  }

  var document = value.document;

  var _range$convertToTextP2 = range.convertToTextPoints(document),
      start = _range$convertToTextP2.start;

  var currentBlock = document.getClosestBlock(start.key);
  if (!currentBlock) return controller;
  var textFormat = []; // TODO: 当前逻辑没有考虑段尾的情况，粘贴样式会导致已有的mark被情况，待修复

  if (range.isExpanded || !isCollapsedAtEndOfBlock(range, currentBlock)) {
    // only copy style of first char
    var firstCharRange = getFirstCharRangeAfterStart(range, document);
    textFormat = document.getMarksAtRange(firstCharRange).filter(function (_ref) {
      var markType = _ref.type;
      return isCopiableMark(markType);
    }); // 为默认普通文本补充样式

    if (isParagraphBlock(currentBlock)) {
      var defaultMarks = CommonFormatUtil.getDefaultMarks(currentBlock, defaultSz);

      if (!textFormat.find(function (m) {
        return m.type === Marks.Bold.TYPE;
      })) {
        // 补充 value 为 false 的 bold mark：让包括标题在内的所有文本都能取消加粗
        var defaultBold = defaultMarks.find(function (m) {
          return m.type === Marks.Bold.TYPE;
        }) || Mark.create({
          type: Marks.Bold.TYPE,
          data: {
            value: false
          }
        });
        textFormat.push(defaultBold);
      }

      if (!textFormat.find(function (m) {
        return m.type === Marks.Sz.TYPE;
      })) {
        // 补充默认字号
        var sz = defaultMarks.find(function (m) {
          return m.type === Marks.Sz.TYPE;
        });
        sz && textFormat.push(sz);
      }
    }
  }

  var paragraphFormat;

  if (range.isCollapsed || isSelectWholeBlocks(value)) {
    // only copy style of text paragraph
    if (isParagraphBlock(currentBlock)) {
      paragraphFormat = {
        type: currentBlock.type,
        list: currentBlock.data.list,
        jc: currentBlock.data.jc,
        spacing: currentBlock.data.spacing,
        ind: currentBlock.data.ind,
        shd: currentBlock.data.shd
      };
    }
  } // found no formats


  if (paragraphFormat && !textFormat.length) return controller;
  controller.run('onAction', basicActions.createMergeDataAction({
    formatClipboard: {
      trigger: trigger,
      type: type,
      text: textFormat,
      paragraph: paragraphFormat
    }
  }));
  return controller;
}
//# sourceMappingURL=copyFormat.js.map