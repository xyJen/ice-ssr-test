{"version":3,"sources":["../../../../../src/plugins/formatPainter/commands/pasteFormatAtRange.ts"],"names":["Commands","isParagraphBlock","isSelectWholeBlocks","clearFormatClipboard","supportParagraphData","isInvalidBlocksInRange","value","document","selection","fragment","getFragmentAtRange","nodes","some","type","clearMarksAtRange","controller","range","marks","getMarksAtRange","filter","length","forEach","mark","isCollapsed","command","removeMark","removeMarkAtRange","pasteFormatAtRange","formatClipboard","data","text","addMarkAtRange","format","paragraph","paragraphs","getLeafBlocksAtRange","key","setNodeByKey","trigger"],"mappings":"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","sourcesContent":["import { Commands, Controller, Selection } from '@ali/4ever-cangjie';\nimport isParagraphBlock from '../utils/isParagraphBlock';\nimport isSelectWholeBlocks from '../utils/isSelectWholeBlocks';\nimport clearFormatClipboard from './clearFormatClipboard';\n\nconst supportParagraphData = ['list', 'jc', 'ind', 'shd', 'spacing'];\n\nfunction isInvalidBlocksInRange(value) {\n  const { document, selection } = value;\n  const fragment = document.getFragmentAtRange(selection);\n  return fragment.nodes\n    // 目前选区内出现分割线及表格，则不应用段落样式\n    .some(({ type }) => type === 'hr' || type === 'table');\n}\n\nfunction clearMarksAtRange(controller: Controller, range: Selection) {\n  const { value } = controller;\n  const { document } = value;\n  const marks = document\n    .getMarksAtRange(range)\n    .filter(({ type }) => type !== 'vertAlign');\n  if (marks.length) {\n    marks.forEach((mark) => {\n      if (range.isCollapsed) {\n        controller.command(Commands.removeMark, mark);\n      } else {\n        controller.command(Commands.removeMarkAtRange, range, mark);\n      }\n    });\n  }\n\n  return controller;\n}\n\nexport default function pasteFormatAtRange(controller: Controller, range: Selection) {\n  const { value } = controller;\n  const { formatClipboard } = value.data;\n  if (!formatClipboard) {\n    return controller;\n  }\n\n  clearMarksAtRange(controller, range);\n\n  const marks = formatClipboard.text;\n  marks.forEach((mark) => Commands.addMarkAtRange(controller, range, mark));\n\n  const format = formatClipboard.paragraph;\n  const { selection, document } = value;\n\n  if (\n    format && (\n      selection.isCollapsed\n        || (isSelectWholeBlocks(value) && !isInvalidBlocksInRange(value))\n    )\n  ) {\n    const paragraphs = document\n      .getLeafBlocksAtRange(range)\n      .filter(isParagraphBlock);\n\n    paragraphs.forEach((paragraph) => {\n      const data = {\n        ...paragraph.data,\n      };\n\n      supportParagraphData.forEach((key) => {\n        // 因为是直接覆盖data，这里过滤一次，不保留不必要字段\n        if (!format[key]) {\n          delete data[key];\n        } else {\n          data[key] = format[key];\n        }\n      });\n      controller.command(Commands.setNodeByKey, paragraph.key, {\n        type: format.type,\n        data,\n      });\n    });\n  }\n  // 双击或快捷键不清除样式以便复用\n  if (formatClipboard.type === 'multiple' || formatClipboard.trigger === 'keyboard') {\n    return controller;\n  }\n  return clearFormatClipboard(controller);\n}\n"],"file":"pasteFormatAtRange.js"}