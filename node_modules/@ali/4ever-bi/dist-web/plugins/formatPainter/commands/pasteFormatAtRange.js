import _extends from "@babel/runtime/helpers/extends";
import { Commands } from '@ali/4ever-cangjie';
import isParagraphBlock from "../utils/isParagraphBlock";
import isSelectWholeBlocks from "../utils/isSelectWholeBlocks";
import clearFormatClipboard from "./clearFormatClipboard";
var supportParagraphData = ['list', 'jc', 'ind', 'shd', 'spacing'];

function isInvalidBlocksInRange(value) {
  var document = value.document,
      selection = value.selection;
  var fragment = document.getFragmentAtRange(selection);
  return fragment.nodes // 目前选区内出现分割线及表格，则不应用段落样式
  .some(function (_ref) {
    var type = _ref.type;
    return type === 'hr' || type === 'table';
  });
}

function clearMarksAtRange(controller, range) {
  var value = controller.value;
  var document = value.document;
  var marks = document.getMarksAtRange(range).filter(function (_ref2) {
    var type = _ref2.type;
    return type !== 'vertAlign';
  });

  if (marks.length) {
    marks.forEach(function (mark) {
      if (range.isCollapsed) {
        controller.command(Commands.removeMark, mark);
      } else {
        controller.command(Commands.removeMarkAtRange, range, mark);
      }
    });
  }

  return controller;
}

export default function pasteFormatAtRange(controller, range) {
  var value = controller.value;
  var formatClipboard = value.data.formatClipboard;

  if (!formatClipboard) {
    return controller;
  }

  clearMarksAtRange(controller, range);
  var marks = formatClipboard.text;
  marks.forEach(function (mark) {
    return Commands.addMarkAtRange(controller, range, mark);
  });
  var format = formatClipboard.paragraph;
  var selection = value.selection,
      document = value.document;

  if (format && (selection.isCollapsed || isSelectWholeBlocks(value) && !isInvalidBlocksInRange(value))) {
    var paragraphs = document.getLeafBlocksAtRange(range).filter(isParagraphBlock);
    paragraphs.forEach(function (paragraph) {
      var data = _extends({}, paragraph.data);

      supportParagraphData.forEach(function (key) {
        // 因为是直接覆盖data，这里过滤一次，不保留不必要字段
        if (!format[key]) {
          delete data[key];
        } else {
          data[key] = format[key];
        }
      });
      controller.command(Commands.setNodeByKey, paragraph.key, {
        type: format.type,
        data: data
      });
    });
  } // 双击或快捷键不清除样式以便复用


  if (formatClipboard.type === 'multiple' || formatClipboard.trigger === 'keyboard') {
    return controller;
  }

  return clearFormatClipboard(controller);
}
//# sourceMappingURL=pasteFormatAtRange.js.map