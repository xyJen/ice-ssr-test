import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { ImagePlugin } from '@ali/4ever-bamboo';
import { preloadImage } from "./preloadImages";
var isLocalFile = ImagePlugin.isLocalFile;

function transferImageData(_x, _x2, _x3) {
  return _transferImageData.apply(this, arguments);
}

function _transferImageData() {
  _transferImageData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(image, transfer, maxWidth) {
    var src, _yield$transfer, url, extraData, newData;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            src = image.data.src;

            if (!isLocalFile(src)) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", {
              image: image,
              data: {}
            });

          case 3:
            _context2.prev = 3;
            _context2.next = 6;
            return transfer(src);

          case 6:
            _yield$transfer = _context2.sent;
            url = _yield$transfer.url;
            extraData = _yield$transfer.extraData;
            _context2.next = 11;
            return preloadImage(image, maxWidth, url, extraData);

          case 11:
            newData = _context2.sent;
            return _context2.abrupt("return", newData);

          case 15:
            _context2.prev = 15;
            _context2.t0 = _context2["catch"](3);
            console.error(_context2.t0); // 转存失败
            // HACK: 设置 isError 修复 pi 不更新问题

            return _context2.abrupt("return", {
              image: image,
              data: {
                isError: true
              }
            });

          case 19:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[3, 15]]);
  }));
  return _transferImageData.apply(this, arguments);
}

export default function transferImages(controller, images, transfer, state) {
  var maxWidth = ImagePlugin.getImageMaxWidth(controller.value);
  images.forEach( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // 转换前先进行标记
              // eslint-disable-next-line no-param-reassign
              state[item.key] = {
                isTransferring: true
              }; // 这里断言 transfer 不会失败

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x4) {
      return _ref.apply(this, arguments);
    };
  }());
  var transfers = images.map(function (image) {
    return transferImageData(image, transfer, maxWidth);
  });
  return transfers;
}
//# sourceMappingURL=transferImages.js.map