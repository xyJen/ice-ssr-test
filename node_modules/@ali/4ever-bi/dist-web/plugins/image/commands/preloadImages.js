import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { ImagePlugin } from '@ali/4ever-bamboo';
import { loadImg } from '@ali/4ever-utils';
export function preloadImage(_x, _x2, _x3, _x4) {
  return _preloadImage.apply(this, arguments);
} // 预加载后更新图片的尺寸

function _preloadImage() {
  _preloadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image, maxWidth, url, extraData) {
    var _image$data, src, _yield$loadImg, width, height, data, _data;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            src = url || ((_image$data = image.data) == null ? void 0 : _image$data.src);
            _context.next = 4;
            return loadImg(src);

          case 4:
            _yield$loadImg = _context.sent;
            width = _yield$loadImg.width;
            height = _yield$loadImg.height;

            if (width > maxWidth) {
              height *= maxWidth / width;
              width = maxWidth;
            }

            data = {
              src: src,
              width: width,
              height: height,
              rotation: 0
            };

            if (extraData) {
              data.extraData = extraData;
            }

            return _context.abrupt("return", {
              image: image,
              data: data
            });

          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](0);
            // 挂载 img 失败
            _data = {
              src: url
            };

            if (extraData) {
              // @ts-ignore
              _data.extraData = extraData;
            }

            return _context.abrupt("return", {
              image: image,
              data: _data
            });

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 13]]);
  }));
  return _preloadImage.apply(this, arguments);
}

export default function preloadImages(controller, images) {
  var maxWidth = ImagePlugin.getImageMaxWidth(controller.value);
  var preloads = images.map(function (image) {
    return preloadImage(image, maxWidth);
  });
  return preloads;
}
//# sourceMappingURL=preloadImages.js.map