{"version":3,"sources":["../../../../../src/plugins/image/commands/transferImages.ts"],"names":["ImagePlugin","preloadImage","isLocalFile","transferImageData","image","transfer","maxWidth","src","data","url","extraData","newData","console","error","isError","transferImages","controller","images","state","getImageMaxWidth","value","forEach","item","key","isTransferring","transfers","map"],"mappings":";;AACA,SAASA,WAAT,QAA4B,mBAA5B;AAGA,SAASC,YAAT;IAIQC,W,GAAgBF,W,CAAhBE,W;;SAEOC,iB;;;;;gFAAf,kBAAiCC,KAAjC,EAAgDC,QAAhD,EAAyFC,QAAzF;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,GADV,GACkBH,KAAK,CAACI,IADxB,CACUD,GADV;;AAAA,iBAEML,WAAW,CAACK,GAAD,CAFjB;AAAA;AAAA;AAAA;;AAAA,8CAGW;AACLH,cAAAA,KAAK,EAALA,KADK;AAELI,cAAAA,IAAI,EAAE;AAFD,aAHX;;AAAA;AAAA;AAAA;AAAA,mBASqCH,QAAQ,CAACE,GAAD,CAT7C;;AAAA;AAAA;AASYE,YAAAA,GATZ,mBASYA,GATZ;AASiBC,YAAAA,SATjB,mBASiBA,SATjB;AAAA;AAAA,mBAW0BT,YAAY,CAACG,KAAD,EAAQE,QAAR,EAAkBG,GAAlB,EAAuBC,SAAvB,CAXtC;;AAAA;AAWUC,YAAAA,OAXV;AAAA,8CAYWA,OAZX;;AAAA;AAAA;AAAA;AAcIC,YAAAA,OAAO,CAACC,KAAR,eAdJ,CAeI;AACA;;AAhBJ,8CAiBW;AACLT,cAAAA,KAAK,EAALA,KADK;AAELI,cAAAA,IAAI,EAAE;AACJM,gBAAAA,OAAO,EAAE;AADL;AAFD,aAjBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA0BA,eAAe,SAASC,cAAT,CAAwBC,UAAxB,EAAgDC,MAAhD,EAAkEZ,QAAlE,EAA2Ga,KAA3G,EAA8H;AAC3I,MAAMZ,QAAQ,GAAGN,WAAW,CAACmB,gBAAZ,CAA6BH,UAAU,CAACI,KAAxC,CAAjB;AAEAH,EAAAA,MAAM,CAACI,OAAP;AAAA,wEAAe,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AACb;AACA;AACAJ,cAAAA,KAAK,CAACI,IAAI,CAACC,GAAN,CAAL,GAAkB;AAAEC,gBAAAA,cAAc,EAAE;AAAlB,eAAlB,CAHa,CAIb;;AAJa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA;AAMA,MAAMC,SAAS,GAAGR,MAAM,CAACS,GAAP,CAAW,UAAAtB,KAAK;AAAA,WAAID,iBAAiB,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,CAArB;AAAA,GAAhB,CAAlB;AAEA,SAAOmB,SAAP;AACD","sourcesContent":["import { Controller, Inline } from '@ali/4ever-cangjie';\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { IImageData, ImageState } from '../types';\nimport { DEFAULT_DATA } from '../constants';\nimport { preloadImage } from './preloadImages';\n\nexport type TransferImageData = Partial<IImageData> & { isError?: boolean };\n\nconst { isLocalFile } = ImagePlugin;\n\nasync function transferImageData(image: Inline, transfer: ImagePlugin.ITransferImageURL, maxWidth): Promise<{ image: Inline; data: TransferImageData }> {\n  const { src } = image.data;\n  if (isLocalFile(src)) {\n    return {\n      image,\n      data: {},\n    };\n  }\n  try {\n    const { url, extraData } = await transfer(src);\n    // 转存成功，读取 image 宽高信息\n    const newData = await preloadImage(image, maxWidth, url, extraData);\n    return newData;\n  } catch (error) {\n    console.error(error);\n    // 转存失败\n    // HACK: 设置 isError 修复 pi 不更新问题\n    return {\n      image,\n      data: {\n        isError: true,\n      },\n    };\n  }\n}\n\nexport default function transferImages(controller: Controller, images: Inline[], transfer: ImagePlugin.ITransferImageURL, state: ImageState) {\n  const maxWidth = ImagePlugin.getImageMaxWidth(controller.value);\n\n  images.forEach(async (item) => {\n    // 转换前先进行标记\n    // eslint-disable-next-line no-param-reassign\n    state[item.key] = { isTransferring: true };\n    // 这里断言 transfer 不会失败\n  });\n  const transfers = images.map(image => transferImageData(image, transfer, maxWidth));\n\n  return transfers;\n}\n"],"file":"transferImages.js"}