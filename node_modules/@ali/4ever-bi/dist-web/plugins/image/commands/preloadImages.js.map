{"version":3,"sources":["../../../../../src/plugins/image/commands/preloadImages.ts"],"names":["ImagePlugin","loadImg","preloadImage","image","maxWidth","url","extraData","src","data","width","height","rotation","preloadImages","controller","images","getImageMaxWidth","value","preloads","map"],"mappings":";;AACA,SAASA,WAAT,QAA4B,mBAA5B;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AAIA,gBAAsBC,YAAtB;AAAA;AAAA,C,CA8BA;;;2EA9BO,iBAA4BC,KAA5B,EAA2CC,QAA3C,EAAqDC,GAArD,EAAmEC,SAAnE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEGC,YAAAA,GAFH,GAESF,GAAG,oBAAIF,KAAK,CAACK,IAAV,qBAAI,YAAYD,GAAhB,CAFZ;AAAA;AAAA,mBAG2BN,OAAO,CAACM,GAAD,CAHlC;;AAAA;AAAA;AAGGE,YAAAA,KAHH,kBAGGA,KAHH;AAGUC,YAAAA,MAHV,kBAGUA,MAHV;;AAIH,gBAAID,KAAK,GAAGL,QAAZ,EAAsB;AACpBM,cAAAA,MAAM,IAAIN,QAAQ,GAAGK,KAArB;AACAA,cAAAA,KAAK,GAAGL,QAAR;AACD;;AACKI,YAAAA,IARH,GAQsB;AAAED,cAAAA,GAAG,EAAHA,GAAF;AAAOE,cAAAA,KAAK,EAALA,KAAP;AAAcC,cAAAA,MAAM,EAANA,MAAd;AAAsBC,cAAAA,QAAQ,EAAE;AAAhC,aARtB;;AASH,gBAAIL,SAAJ,EAAe;AACbE,cAAAA,IAAI,CAACF,SAAL,GAAiBA,SAAjB;AACD;;AAXE,6CAYI;AACLH,cAAAA,KAAK,EAALA,KADK;AAELK,cAAAA,IAAI,EAAJA;AAFK,aAZJ;;AAAA;AAAA;AAAA;AAiBH;AACMA,YAAAA,KAlBH,GAkBU;AAAED,cAAAA,GAAG,EAAEF;AAAP,aAlBV;;AAmBH,gBAAIC,SAAJ,EAAe;AACb;AACAE,cAAAA,KAAI,CAACF,SAAL,GAAiBA,SAAjB;AACD;;AAtBE,6CAuBI;AACLH,cAAAA,KAAK,EAALA,KADK;AAELK,cAAAA,IAAI,EAAJA;AAFK,aAvBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA+BP,eAAe,SAASI,aAAT,CAAuBC,UAAvB,EAA+CC,MAA/C,EAAiE;AAC9E,MAAMV,QAAQ,GAAGJ,WAAW,CAACe,gBAAZ,CAA6BF,UAAU,CAACG,KAAxC,CAAjB;AAEA,MAAMC,QAAQ,GAAGH,MAAM,CAACI,GAAP,CAAW,UAAAf,KAAK;AAAA,WAAID,YAAY,CAACC,KAAD,EAAQC,QAAR,CAAhB;AAAA,GAAhB,CAAjB;AACA,SAAOa,QAAP;AACD","sourcesContent":["\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Controller, Inline } from '@ali/4ever-cangjie';\nimport { loadImg } from '@ali/4ever-utils';\nimport { DEFAULT_DATA } from '../constants';\nimport { IImageData } from '../types';\n\nexport async function preloadImage(image: Inline, maxWidth, url?: string, extraData?: any) {\n  try {\n    const src = url || image.data?.src;\n    let { width, height } = await loadImg(src);\n    if (width > maxWidth) {\n      height *= maxWidth / width;\n      width = maxWidth;\n    }\n    const data: IImageData = { src, width, height, rotation: 0 };\n    if (extraData) {\n      data.extraData = extraData;\n    }\n    return {\n      image,\n      data,\n    };\n  } catch (error) {\n    // 挂载 img 失败\n    const data = { src: url };\n    if (extraData) {\n      // @ts-ignore\n      data.extraData = extraData;\n    }\n    return {\n      image,\n      data,\n    };\n  }\n}\n\n// 预加载后更新图片的尺寸\nexport default function preloadImages(controller: Controller, images: Inline[]) {\n  const maxWidth = ImagePlugin.getImageMaxWidth(controller.value);\n\n  const preloads = images.map(image => preloadImage(image, maxWidth));\n  return preloads;\n}\n"],"file":"preloadImages.js"}