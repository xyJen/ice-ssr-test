import { Commands, Text, Block, Inline, Document } from '@ali/4ever-cangjie';
import insertImagePlaceholder from "../commands/insertImagePlaceholder"; // Image Markdown 规则
// ![<ALT>](<URL><TITLE?>)
// ALT: 非 [] 的字符，可以为空
// URL: 由 \w/:?#+.&%- 组成，不支持中文，可以为空，仅支持 http/https 协议
// TITLE: 由空格 + "string" 组成，引号内侧不能为空白符，URL 存在时可以为空
// eg.
// 合法：
//   ![]()
//   ![](http://bar)
//   ![](https://www.example.com/foo-1?bar=x#search)
//   ![](https://www.example.com/foo-1?bar=x,y,z&zoo=a_b_c#search "title 1")
//   ![foo](http://bar)
//   ![<f o o>](http://bar)
// 不合法：
//   ![ab]]()
//   ![](())
//   ![](/uri)
//   ![](file:///uri)
//   ![](http://uri"")
//   ![]("abc")
//   ![](http://uri " abc ")
//   ![](</uri>)

var markdownRegExp = /!\[([^\[\]]*)\]\(((https?:\/\/[\w/:?#+.~=&%_,-]+)( "(\S\s)?\S+(\s\S)?")?)?\)$/;
export default function onSpace(event, controller, next) {
  var value = controller.value;
  var anchorText = value.anchorText,
      selection = value.selection,
      document = value.document;
  if (!selection || !anchorText || selection.isExpanded) return next();

  var _selection$convertToT = selection.convertToTextPoints(document),
      anchor = _selection$convertToT.anchor;

  var text = anchorText.text.slice(0, anchor.offset);
  var matches = text.match(markdownRegExp);
  if (!matches) return next();
  var matchText = matches[0],
      alt = matches[1],
      _s = matches[2],
      src = matches[3],
      _t = matches[4],
      title = matches[5];
  if (alt && !src) return next();
  event.preventDefault(); // 删除 markdown 文本

  controller.command(Commands.moveAnchorBackward, matchText.length).command(Commands.del).dispatch('createTriggerMarkdownAction', {
    mdType: 'image'
  }); // ![]() 时插入 placeholder

  if (!alt && !src) {
    return insertImagePlaceholder(controller).command(Commands.moveToStartOfNextText);
  } // 创建包含图片的 fragment，通过 insertFragment 进行转存插入


  var paragraph = Block.create({
    type: 'paragraph',
    nodes: [Text.create(), Inline.create({
      type: 'image',
      data: {
        src: encodeURI(src)
      },
      nodes: [Text.create()]
    }), Text.create()]
  });
  var fragment = Document.create({
    nodes: [paragraph]
  });
  return controller.command(Commands.insertFragment, fragment);
}
//# sourceMappingURL=onSpace.js.map