import _extends from "@babel/runtime/helpers/extends";
import { Commands } from '@ali/4ever-cangjie';
import { ImagePlugin } from '@ali/4ever-bamboo';
import { Image as MoImage } from '@ali/4ever-mo';
import { isEmpty } from 'lodash-es';
import { dropImages } from "../utils/filterImages";
import transferImages from "../commands/transferImages";
import preloadImages from "../commands/preloadImages";
import { DEFAULT_DATA } from "../constants";
import { regenerateUuid } from '@ali/4ever-utils';
import filterImageData from "../utils/filterImageData";

var defaultFilterTransfer = function defaultFilterTransfer() {
  return true;
};
/**
 * 默认过滤掉本地文件，不然会展示裂图
 * @param src
 */


function defaultDropImage(src) {
  if (typeof src !== 'string') return true;
  if (src.length === 0) return true;
  if (src.startsWith('file://')) return true;
  if (src.startsWith('blob:')) return true;
  return false;
}

export default function createOnCommand(config, state) {
  var _ref = config.image || {},
      transferImageURL = _ref.transferImageURL,
      _ref$shouldTransferIm = _ref.shouldTransferImageURL,
      shouldTransferImageURL = _ref$shouldTransferIm === void 0 ? defaultFilterTransfer : _ref$shouldTransferIm,
      filterDataList = _ref.filterDataList;

  var _ref2 = config.uuid || {},
      generateUuid = _ref2.generator,
      _ref2$generateLeafBlo = _ref2.generateLeafBlockId,
      generateLeafBlockId = _ref2$generateLeafBlo === void 0 ? false : _ref2$generateLeafBlo,
      _ref2$enable = _ref2.enable,
      enableUUID = _ref2$enable === void 0 ? false : _ref2$enable;

  var _ref3 = config.clipboard || {},
      _ref3$shouldSkipImage = _ref3.shouldSkipImageURL,
      shouldSkipImageURL = _ref3$shouldSkipImage === void 0 ? defaultDropImage : _ref3$shouldSkipImage;

  return function onCommand(command, controller, next) {
    var type = command.type,
        args = command.args;

    if (type === 'insertFragmentWithRealKeyAtRange') {
      var _ref4 = args,
          range = _ref4[0],
          fragment = _ref4[1];
      var realFragment = dropImages(fragment, shouldSkipImageURL);
      var shouldTransferredImages = [];
      var shouldPreloadedImages = [];
      realFragment = realFragment.mapDescendants(function (node) {
        if (MoImage.isImage(node) && !isEmpty(node.data)) {
          if (transferImageURL && shouldTransferImageURL(node.data.src)) {
            shouldTransferredImages.push(node);
            return node.set('data', DEFAULT_DATA);
          }

          if (!ImagePlugin.isValidSize(node.data.width, node.data.height)) {
            shouldPreloadedImages.push(node);
          }

          if (filterDataList) {
            var data = filterImageData(node.data, filterDataList);
            return node.set('data', data);
          }
        }

        return node;
      }); // TODO: insertFragmentWithRealKeyAtRange 在 image 里被拦截，无法在其他插件处理，待确认是否有更好的方法
      // 重新生成 fragment 中的 uuid，并替换用户数据

      realFragment = enableUUID && generateLeafBlockId ? regenerateUuid(realFragment, generateUuid) : realFragment;
      var transfers = transferImageURL ? transferImages(controller, shouldTransferredImages, transferImageURL, state) : [];
      var preloads = preloadImages(controller, shouldPreloadedImages);
      Promise.all([].concat(transfers, preloads)).then(function (imagesData) {
        // 图片都转存完成后再 update，保证 undo 只需一次
        imagesData.forEach(function (_ref5) {
          var image = _ref5.image,
              data = _ref5.data;
          // eslint-disable-next-line no-param-reassign
          state[image.key] = {
            isTransferring: false
          };
          ImagePlugin.updateInlineImage(controller, image, _extends({}, DEFAULT_DATA, data || {}));
        });
      });
      return controller.command(Commands.insertFragmentWithRealKeyAtRange, range, realFragment);
    }

    return next();
  };
}
//# sourceMappingURL=onCommand.js.map