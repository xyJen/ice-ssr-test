import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable no-param-reassign */
import { ImagePlugin } from '@ali/4ever-bamboo';
import { Inline, Text, Commands, Injection } from '@ali/4ever-cangjie';
import removeInlineImage from "../commands/removeInlineImage";
import { generateKey } from '@ali/4ever-utils';
import calcImageSize from "../utils/calcImageSize";
import loadImageFile from "../utils/loadImageFile";
export default function onInsertImage(controller, maybeImageFiles, imageConfig, state, nodeData, onLoad) {
  if (nodeData === void 0) {
    nodeData = {};
  }

  var uploadImage = imageConfig.uploadImage,
      shouldInsert = imageConfig.shouldInsert;
  var updateInlineImage = ImagePlugin.updateInlineImage;
  if (!uploadImage) return controller;
  var files = Array.isArray(maybeImageFiles) ? maybeImageFiles : [maybeImageFiles];
  controller.command(Commands.focus);
  var tableSelection = controller.query('tableSelection');

  if (tableSelection) {
    controller.command(Commands.moveToStartOfBlock);
  }

  var loadImageFileTasks = [];
  files.forEach(function (file) {
    if (!shouldInsert || shouldInsert(file) !== false) {
      loadImageFileTasks.push(loadImageFile(file)["catch"](function (loadFailedFile) {
        return {
          isError: true,
          loadFailedFile: loadFailedFile
        };
      }));
    }
  });
  Promise.all(loadImageFileTasks).then(function (loadedImages) {
    onLoad && onLoad();
    var images = [];
    loadedImages.forEach(function (loadedImage, index) {
      if (loadedImage.isError) {
        var _ref = imageConfig || {},
            onLoadFileError = _ref.onLoadFileError;

        onLoadFileError && onLoadFileError(loadedImage.loadFailedFile.name);
        return;
      }

      var id = generateKey();
      var _ref2 = loadedImage,
          img = _ref2.img,
          handledFile = _ref2.handledFile;
      var uploadUrl = img.src;
      state[id] = {
        url: uploadUrl
      };
      var data = {
        id: id,
        name: handledFile.name,
        size: handledFile.size
      };
      var isAutoFit = false; // chrome 浏览器不支持 tiff 格式，此时 uploadUrl = ''

      if (uploadUrl) {
        var w = nodeData.width || img.width;
        var h = nodeData.height || img.height;
        var imageSize = calcImageSize(w, h, controller);
        var width = imageSize.width,
            height = imageSize.height;
        isAutoFit = imageSize.isAutoFit || false;
        data.width = width;
        data.height = height;
      } else {
        data.width = undefined;
        data.height = undefined;
      }

      Object.assign(data, nodeData);
      var image = Inline.create({
        type: 'image',
        data: data,
        nodes: [Text.create()]
      });
      images.push({
        image: image,
        index: index
      });
      var _controller$value = controller.value,
          selection = _controller$value.selection,
          startInline = _controller$value.startInline;

      if (selection.isCollapsed && startInline && startInline.type === 'image') {
        controller.command(Commands.removeNodeByKey, startInline.key);
      }

      controller.setOpRelatedId(image.key).command(Commands.insertInline, image).command(Commands.moveToStartOfNextText);

      if (isAutoFit) {
        controller.command(Commands.insertBlock, 'paragraph');
      }

      controller.command(Commands.focus).flush();
    });
    images.forEach(function (_ref3) {
      var image = _ref3.image,
          index = _ref3.index;
      var _ref4 = loadedImages[index],
          handledFile = _ref4.handledFile;
      var key = image.key;
      var id = image.data.id;

      var updateProgress = function updateProgress(uploadPercent) {
        var injections = controller.value.injections;
        var injection = Injection.create({
          key: key,
          data: {
            uploadPercent: uploadPercent
          }
        });
        controller.setInjections([].concat(injections.filter(function (inj) {
          return inj.key !== key;
        }), [injection]));
      };

      uploadImage(handledFile, id, updateProgress).then(function (res) {
        var src = res.url,
            customWidth = res.width,
            customHeight = res.height,
            extraData = res.extraData;
        var node = controller.value.document.getNode(key);

        if (!src) {
          if (Inline.isInline(node)) {
            removeInlineImage(controller, node);
          }

          return;
        }

        if (Inline.isInline(node)) {
          var newData = {
            src: src
          };

          if (customWidth && customHeight) {
            newData.width = customWidth;
            newData.height = customHeight;
          }

          if (extraData) {
            newData.extraData = _extends({}, node.data.extraData, extraData);
          }

          controller.setOpRelatedId(node.key);
          updateInlineImage(controller, node, newData);
        }
      })["catch"](function (e) {
        console.error(e);
        var node = controller.value.document.getNode(key);

        if (Inline.isInline(node)) {
          removeInlineImage(controller, node);
        }
      });
    });
  });
  return controller;
}
//# sourceMappingURL=onInsertImage.js.map