import _extends from "@babel/runtime/helpers/extends";
import { ImagePlugin } from '@ali/4ever-bamboo';
import { Injection, Commands } from '@ali/4ever-cangjie';
import { IMAGE_UPDATE, IMAGE_REMOVE, IMAGE_SELECT, IMAGE_SET_INJECTION, TOGGLE_IMAGE_SIDEBAR } from "../actions";
import removeInlineImage from "../commands/removeInlineImage";
import defaultSelectImage from "../utils/selectImage";
export default function createOnAction(config) {
  var imageConfig = config.image,
      sideBarTrigger = config.sideBarTrigger;
  return function onAction(action, controller, next) {
    var type = action.type,
        payload = action.payload;

    if (type === IMAGE_SELECT) {
      var _imageConfig$selectIm = imageConfig.selectImage,
          selectImage = _imageConfig$selectIm === void 0 ? defaultSelectImage : _imageConfig$selectIm;
      selectImage().then(function (file) {
        if (file) {
          controller.command('insertImageFile', file);
        }
      });
    }

    if (type === IMAGE_UPDATE) {
      var _ref = payload,
          node = _ref.node,
          data = _ref.data,
          container = _ref.container;
      return ImagePlugin.updateInlineImage(controller, node, data, container);
    }

    if (type === IMAGE_REMOVE) {
      var _ref2 = payload,
          _node = _ref2.node;
      return removeInlineImage(controller, _node);
    }

    if (type === IMAGE_SET_INJECTION) {
      var _ref3 = payload,
          key = _ref3.key,
          _data = _ref3.data;
      var injections = controller.value.injections;
      var curInjection = injections.find(function (inj) {
        return inj.key === key;
      }) || {};
      var injection = Injection.create({
        key: key,
        data: _extends({}, curInjection.data || {}, _data)
      });
      controller.setInjections([].concat(injections.filter(function (inj) {
        return inj.key !== key;
      }), [injection]));
    }

    if (type === TOGGLE_IMAGE_SIDEBAR) {
      var _ref4 = payload,
          _node2 = _ref4.node,
          toggle = _ref4.toggle,
          callback = _ref4.callback; // NOTE: 目前 sidebar 未实现 close 方法

      if (toggle) {
        var _imageConfig$locale;

        sideBarTrigger == null ? void 0 : sideBarTrigger.open('image.imageOptions', (imageConfig == null ? void 0 : (_imageConfig$locale = imageConfig.locale) == null ? void 0 : _imageConfig$locale.options) || 'Image Options');

        if (_node2) {
          controller.command(Commands.moveToStartOfNode, _node2).command(Commands.focus);

          if (callback) {
            callback(controller);
          }

          controller.flush();
        }
      }

      return controller;
    }

    return next();
  };
}
//# sourceMappingURL=onAction.js.map