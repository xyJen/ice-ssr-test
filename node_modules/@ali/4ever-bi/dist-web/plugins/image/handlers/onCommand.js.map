{"version":3,"sources":["../../../../../src/plugins/image/handlers/onCommand.ts"],"names":["Commands","ImagePlugin","Image","MoImage","isEmpty","dropImages","transferImages","preloadImages","DEFAULT_DATA","regenerateUuid","filterImageData","defaultFilterTransfer","defaultDropImage","src","length","startsWith","createOnCommand","config","state","image","transferImageURL","shouldTransferImageURL","filterDataList","uuid","generateUuid","generator","generateLeafBlockId","enable","enableUUID","clipboard","shouldSkipImageURL","onCommand","command","controller","next","type","args","range","fragment","realFragment","shouldTransferredImages","shouldPreloadedImages","mapDescendants","node","isImage","data","push","set","isValidSize","width","height","transfers","preloads","Promise","all","then","imagesData","forEach","key","isTransferring","updateInlineImage","insertFragmentWithRealKeyAtRange"],"mappings":"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","sourcesContent":["import { Plugin, RangeSelection, Document, Commands, Inline, Block } from '@ali/4ever-cangjie';\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Image as MoImage } from '@ali/4ever-mo';\nimport { isEmpty } from 'lodash-es';\n\nimport { BiPluginConfig } from '../../../types';\nimport { dropImages } from '../utils/filterImages';\nimport transferImages from '../commands/transferImages';\nimport preloadImages from '../commands/preloadImages';\nimport { ImageState } from '../types';\nimport { DEFAULT_DATA } from '../constants';\nimport { regenerateUuid }  from '@ali/4ever-utils';\nimport filterImageData from '../utils/filterImageData';\n\nconst defaultFilterTransfer = () => true;\n\n/**\n * 默认过滤掉本地文件，不然会展示裂图\n * @param src\n */\nfunction defaultDropImage(src: string) {\n  if (typeof src !== 'string') return true;\n  if (src.length === 0) return true;\n  if (src.startsWith('file://')) return true;\n  if (src.startsWith('blob:')) return true;\n  return false;\n}\n\nexport default function createOnCommand(config: BiPluginConfig, state: ImageState): Plugin['onCommand'] {\n  const { transferImageURL, shouldTransferImageURL = defaultFilterTransfer, filterDataList } = config.image || {};\n  const { generator: generateUuid, generateLeafBlockId = false, enable: enableUUID = false } = config.uuid || {};\n  const { shouldSkipImageURL = defaultDropImage } = config.clipboard || {};\n\n  return function onCommand(command, controller, next) {\n    const { type, args } = command;\n    if (type === 'insertFragmentWithRealKeyAtRange') {\n      const [range, fragment] = args as [RangeSelection, Document];\n      let realFragment = dropImages(fragment, shouldSkipImageURL);\n      const shouldTransferredImages: Inline[] = [];\n      const shouldPreloadedImages: Inline[] = [];\n      realFragment = realFragment.mapDescendants((node) => {\n        if (MoImage.isImage(node) && !isEmpty(node.data)) {\n          if (transferImageURL && shouldTransferImageURL(node.data.src)) {\n            shouldTransferredImages.push(node);\n            return node.set('data', DEFAULT_DATA);\n          }\n          if (!ImagePlugin.isValidSize(node.data.width, node.data.height)) {\n            shouldPreloadedImages.push(node);\n          }\n          if (filterDataList) {\n            const data = filterImageData(node.data, filterDataList)\n            return node.set('data', data);\n          }\n        }\n        return node;\n      });\n\n      // TODO: insertFragmentWithRealKeyAtRange 在 image 里被拦截，无法在其他插件处理，待确认是否有更好的方法\n      // 重新生成 fragment 中的 uuid，并替换用户数据\n      realFragment = enableUUID && generateLeafBlockId ? regenerateUuid(realFragment, generateUuid) : realFragment; \n      const transfers = transferImageURL ? transferImages(controller, shouldTransferredImages, transferImageURL, state) : [];\n      const preloads = preloadImages(controller, shouldPreloadedImages);\n      Promise.all([...transfers, ...preloads]).then((imagesData) => {\n        // 图片都转存完成后再 update，保证 undo 只需一次\n        imagesData.forEach(({ image, data }) => {\n          // eslint-disable-next-line no-param-reassign\n          state[image.key] = { isTransferring: false };\n          ImagePlugin.updateInlineImage(controller, image, {\n            ...DEFAULT_DATA,\n            ...(data || {}),\n          });\n        });\n      });\n      return controller.command(Commands.insertFragmentWithRealKeyAtRange, range, realFragment);\n    }\n    return next();\n  };\n}\n"],"file":"onCommand.js"}