{"version":3,"sources":["../../../../../src/plugins/image/handlers/onInsertImage.ts"],"names":["ImagePlugin","Inline","Text","Commands","Injection","removeInlineImage","generateKey","calcImageSize","loadImageFile","onInsertImage","controller","maybeImageFiles","imageConfig","state","nodeData","onLoad","uploadImage","shouldInsert","updateInlineImage","files","Array","isArray","command","focus","tableSelection","query","moveToStartOfBlock","loadImageFileTasks","forEach","file","push","loadFailedFile","isError","Promise","all","then","loadedImages","images","loadedImage","index","onLoadFileError","name","id","img","handledFile","uploadUrl","src","url","data","size","isAutoFit","w","width","h","height","imageSize","undefined","Object","assign","image","create","type","nodes","value","selection","startInline","isCollapsed","removeNodeByKey","key","setOpRelatedId","insertInline","moveToStartOfNextText","insertBlock","flush","updateProgress","uploadPercent","injections","injection","setInjections","filter","inj","res","customWidth","customHeight","extraData","node","document","getNode","isInline","newData","e","console","error"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Controller, Inline, Text, Commands, Injection } from '@ali/4ever-cangjie';\nimport removeInlineImage from '../commands/removeInlineImage';\nimport { generateKey} from '@ali/4ever-utils';\nimport calcImageSize from '../utils/calcImageSize';\nimport loadImageFile from '../utils/loadImageFile';\nimport type { ILoadImageFileRes } from '../utils/loadImageFile';\nimport { IImageData, ImagePluginConfig } from '../types';\n\ninterface ILoadImageErrorRes {\n  isError: boolean;\n  loadFailedFile: File;\n}\n\nexport default function onInsertImage(\n  controller: Controller,\n  maybeImageFiles: File | File[],\n  imageConfig: ImagePluginConfig,\n  state,\n  nodeData: Record<string, any> = {},\n  onLoad?: () => void,\n) {\n  const { uploadImage, shouldInsert } = imageConfig;\n  const { updateInlineImage } = ImagePlugin;\n  if (!uploadImage) return controller;\n\n  const files = Array.isArray(maybeImageFiles)\n    ? maybeImageFiles\n    : [maybeImageFiles];\n  controller.command(Commands.focus);\n  const tableSelection = controller.query('tableSelection');\n  if (tableSelection) {\n    controller.command(Commands.moveToStartOfBlock);\n  }\n  const loadImageFileTasks: Array<Promise<ILoadImageFileRes | ILoadImageErrorRes>> = [];\n  files.forEach((file) => {\n    if (!shouldInsert || shouldInsert(file) !== false) {\n      loadImageFileTasks.push(loadImageFile(file).catch((loadFailedFile) => {\n        return {\n          isError: true,\n          loadFailedFile,\n        };\n      }));\n    }\n  });\n  Promise.all(loadImageFileTasks).then((loadedImages) => {\n    onLoad && onLoad();\n    const images: Array<{ image: Inline; index: number }> = [];\n    loadedImages.forEach((loadedImage, index) => {\n      if ((loadedImage as ILoadImageErrorRes).isError) {\n        const { onLoadFileError } = imageConfig || {};\n        onLoadFileError && onLoadFileError((loadedImage as ILoadImageErrorRes).loadFailedFile.name);\n        return;\n      }\n      const id = generateKey();\n      const { img, handledFile } = loadedImage as ILoadImageFileRes;\n      const uploadUrl = img.src;\n      state[id] = { url: uploadUrl };\n      const data: Partial<IImageData> = {\n        id,\n        name: handledFile.name,\n        size: handledFile.size,\n      };\n      let isAutoFit = false;\n      // chrome 浏览器不支持 tiff 格式，此时 uploadUrl = ''\n      if (uploadUrl) {\n        const w = nodeData.width || img.width;\n        const h = nodeData.height || img.height;\n        const imageSize = calcImageSize(w, h, controller);\n        const { width, height } = imageSize;\n        isAutoFit = imageSize.isAutoFit || false;\n        data.width = width;\n        data.height = height;\n      } else {\n        data.width = undefined;\n        data.height = undefined;\n      }\n      Object.assign(data, nodeData);\n      const image = Inline.create({\n        type: 'image',\n        data,\n        nodes: [Text.create()],\n      });\n      images.push({\n        image,\n        index,\n      });\n      const { selection, startInline } = controller.value;\n      if (\n        selection!.isCollapsed &&\n        startInline &&\n        startInline.type === 'image'\n      ) {\n        controller.command(Commands.removeNodeByKey, startInline.key);\n      }\n      controller\n        .setOpRelatedId(image.key)\n        .command(Commands.insertInline, image)\n        .command(Commands.moveToStartOfNextText);\n      if (isAutoFit) {\n        controller.command(Commands.insertBlock, 'paragraph');\n      }\n      controller.command(Commands.focus).flush();\n    });\n    images.forEach(({ image, index }) => {\n      const { handledFile } = loadedImages[index] as ILoadImageFileRes;\n      const { key } = image;\n      const { id } = image.data;\n      const updateProgress = (uploadPercent: number) => {\n        const { injections } = controller.value;\n        const injection = Injection.create({\n          key,\n          data: {\n            uploadPercent,\n          },\n        });\n        controller.setInjections([\n          ...injections.filter(inj => inj.key !== key),\n          injection,\n        ]);\n      };\n  \n      uploadImage(handledFile, id, updateProgress)\n        .then((res) => {\n          const { url: src, width: customWidth, height: customHeight, extraData } = res;\n          const node = controller.value.document.getNode(key);\n          if (!src) {\n            if (Inline.isInline(node)) {\n              removeInlineImage(controller, node);\n            }\n            return;\n          }\n          if (Inline.isInline(node)) {\n            const newData: Inline['data'] = { src };\n            if (customWidth && customHeight) {\n              newData.width = customWidth;\n              newData.height = customHeight;\n            }\n            if (extraData) {\n              newData.extraData = {\n                ...node.data.extraData,\n                ...extraData,\n              };\n            }\n            controller.setOpRelatedId(node.key);\n            updateInlineImage(controller, node, newData);\n          }\n        })\n        .catch((e) => {\n          console.error(e);\n          const node = controller.value.document.getNode(key);\n          if (Inline.isInline(node)) {\n            removeInlineImage(controller, node);\n          }\n        });\n    });\n  });\n\n  return controller;\n}\n"],"file":"onInsertImage.js"}