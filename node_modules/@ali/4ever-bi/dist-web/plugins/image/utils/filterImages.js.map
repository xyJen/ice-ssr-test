{"version":3,"sources":["../../../../../src/plugins/image/utils/filterImages.ts"],"names":["Inline","isEmpty","dropImages","fragment","shouldSkipImageURL","drops","filterDescendants","node","isInline","type","data","src","result","forEach","drop","path","getPath","key","removeNode","filterTransferableImages","shouldTransferImageURL","images"],"mappings":"AAAA,SAAmBA,MAAnB,QAAiC,oBAAjC;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAAwCC,kBAAxC,EAAsF;AAC3F,MAAMC,KAAK,GAAGF,QAAQ,CAACG,iBAAT,CAA2B,UAACC,IAAD,EAAU;AACjD,WAAOP,MAAM,CAACQ,QAAP,CAAgBD,IAAhB,KAAyBA,IAAI,CAACE,IAAL,KAAc,OAAvC,IAAkD,CAACR,OAAO,CAACM,IAAI,CAACG,IAAN,CAA1D,IAAyEN,kBAAkB,CAACG,IAAI,CAACG,IAAL,CAAUC,GAAX,CAAlG;AACD,GAFa,CAAd;AAIA,MAAIC,MAAM,GAAGT,QAAb;AACAE,EAAAA,KAAK,CAACQ,OAAN,CAAc,UAACC,IAAD,EAAU;AACtB,QAAMC,IAAI,GAAGH,MAAM,CAACI,OAAP,CAAeF,IAAI,CAACG,GAApB,CAAb;;AACA,QAAIF,IAAJ,EAAU;AACRH,MAAAA,MAAM,GAAGA,MAAM,CAACM,UAAP,CAAkBH,IAAlB,CAAT;AACD;AACF,GALD;AAOA,SAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,wBAAT,CAAkChB,QAAlC,EAAsDiB,sBAAtD,EAA2H;AAChI,MAAMC,MAAM,GAAGlB,QAAQ,CAACG,iBAAT,CAA2B,UAACC,IAAD,EAAU;AAClD,WAAOP,MAAM,CAACQ,QAAP,CAAgBD,IAAhB,KAAyBA,IAAI,CAACE,IAAL,KAAc,OAAvC,IAAkD,CAAC,CAACW,sBAApD,IAA8EA,sBAAsB,CAACb,IAAI,CAACG,IAAL,CAAUC,GAAX,CAA3G;AACD,GAFc,CAAf;AAGA,SAAOU,MAAP;AACD","sourcesContent":["import { Document, Inline } from '@ali/4ever-cangjie';\nimport { isEmpty } from 'lodash-es';\nimport { ImagePluginConfig } from '../types';\n\n/**\n * 删除某些特定 URL 的 img，这个问题主要用来处理 Word 拷贝图文的情况，图片的链接是本地文件，无法读取\n * @param fragment\n * @param dropImage\n */\nexport function dropImages(fragment: Document, shouldSkipImageURL: (src: string) => boolean) {\n  const drops = fragment.filterDescendants((node) => {\n    return Inline.isInline(node) && node.type === 'image' && !isEmpty(node.data) && shouldSkipImageURL(node.data.src);\n  });\n\n  let result = fragment;\n  drops.forEach((drop) => {\n    const path = result.getPath(drop.key);\n    if (path) {\n      result = result.removeNode(path);\n    }\n  });\n\n  return result;\n}\n\n/**\n * 过滤出可以 transfer 的图片\n * @param fragment\n * @param filterTransfer\n */\nexport function filterTransferableImages(fragment: Document, shouldTransferImageURL: ImagePluginConfig['shouldTransferImageURL']) {\n  const images = fragment.filterDescendants((node) => {\n    return Inline.isInline(node) && node.type === 'image' && !!shouldTransferImageURL && shouldTransferImageURL(node.data.src);\n  }) as Inline[];\n  return images;\n}\n"],"file":"filterImages.js"}