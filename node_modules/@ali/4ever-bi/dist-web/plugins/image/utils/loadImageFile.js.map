{"version":3,"sources":["../../../../../src/plugins/image/utils/loadImageFile.ts"],"names":["environment","logger","getOrientation","orientationToAngle","rotateImage","checkFileType","file","Promise","resolve","reject","reader","FileReader","addEventListener","e","buffer","target","result","checkedFile","type","img","Image","IS_SAFARI","handledFile","orientation","angle","then","rotatedFile","onload","src","URL","createObjectURL","info","readAsArrayBuffer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,EAA6CC,WAA7C;AACA,OAAOC,aAAP;AAOA,gBAAe,UAACC,IAAD,EAA4C;AACzD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAgC,UAACC,CAAD,EAAO;AACrC,UAAMC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAAUC,MAAzB;;AADqC,2BAEDX,aAAa,CAACC,IAAD,EAAOQ,MAAP,CAFZ;AAAA,UAEvBG,WAFuB,kBAE7BX,IAF6B;AAAA,UAEVY,IAFU,kBAEVA,IAFU;;AAGrC,UAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ,CAHqC,CAIrC;;AACA,UAAI,CAACF,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,KAA7B,KAAuC,CAAClB,WAAW,CAACqB,SAAxD,EAAmE;AACjEb,QAAAA,OAAO,CAAC;AACNW,UAAAA,GAAG,EAAHA,GADM;AAENG,UAAAA,WAAW,EAAEL;AAFP,SAAD,CAAP;AAIA;AACD;;AACD,UAAMM,WAAW,GAAGrB,cAAc,CAACY,MAAD,CAAlC;AACA,UAAMU,KAAK,GAAGrB,kBAAkB,CAACoB,WAAD,CAAhC;AACAnB,MAAAA,WAAW,CAACa,WAAD,EAAcO,KAAd,CAAX,CAAgCC,IAAhC,CAAqC,UAACC,WAAD,EAAiB;AACpDP,QAAAA,GAAG,CAACQ,MAAJ,GAAa,YAAM;AACjBnB,UAAAA,OAAO,CAAC;AACNW,YAAAA,GAAG,EAAHA,GADM;AAENG,YAAAA,WAAW,EAAEL;AAFP,WAAD,CAAP;AAID,SALD;;AAMAE,QAAAA,GAAG,CAACS,GAAJ,GAAUC,GAAG,CAACC,eAAJ,CAAoBJ,WAApB,CAAV;AACD,OARD;AASD,KAvBD;AAwBAhB,IAAAA,MAAM,CAACE,gBAAP,CAAwB,OAAxB,EAAiC,YAAM;AACrCX,MAAAA,MAAM,CAAC8B,IAAP,CAAY;AACVb,QAAAA,IAAI,EAAE,iBADI;AAEVa,QAAAA,IAAI,EAAE,CAAAzB,IAAI,QAAJ,YAAAA,IAAI,CAAEY,IAAN,KAAc;AAFV,OAAZ;AAIAT,MAAAA,MAAM,CAACH,IAAD,CAAN;AACD,KAND;AAOAI,IAAAA,MAAM,CAACsB,iBAAP,CAAyB1B,IAAzB;AACD,GAlCM,CAAP;AAmCD,CApCD","sourcesContent":["import { environment } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport { getOrientation, orientationToAngle, rotateImage } from './convertImage';\nimport checkFileType from './checkFileType';\n\nexport interface ILoadImageFileRes {\n  img: HTMLImageElement;\n  handledFile: File;\n}\n\nexport default (file: File): Promise<ILoadImageFileRes> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener('load', (e) => {\n      const buffer = e.target!.result as ArrayBuffer;\n      const { file: checkedFile, type } = checkFileType(file, buffer);\n      const img = new Image();\n      // 只有 safari 浏览器支持 tiff 格式\n      if ((type === 'tiff' || type === 'tif') && !environment.IS_SAFARI) {\n        resolve({\n          img,\n          handledFile: checkedFile,\n        });\n        return;\n      }\n      const orientation = getOrientation(buffer);\n      const angle = orientationToAngle(orientation);\n      rotateImage(checkedFile, angle).then((rotatedFile) => {\n        img.onload = () => {\n          resolve({\n            img,\n            handledFile: checkedFile,\n          });\n        };\n        img.src = URL.createObjectURL(rotatedFile);\n      });\n    });\n    reader.addEventListener('error', () => {\n      logger.info({\n        type: 'loadImageFailed',\n        info: file?.type || '',\n      });\n      reject(file);\n    });\n    reader.readAsArrayBuffer(file);\n  });\n};\n"],"file":"loadImageFile.js"}