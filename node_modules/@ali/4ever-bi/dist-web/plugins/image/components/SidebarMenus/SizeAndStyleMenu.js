import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { Tooltip } from '@ali/we-design';
import { ImagePlugin, UnitConvert, InputNumberItem, CustomInputNumberItem, PluginRoles } from '@ali/4ever-bamboo';
import { domUtils, useZoomContainer } from '@ali/4ever-cangjie';
import logger from '@ali/4ever-logger';
import { normalizeAngle, blockEvent } from '@ali/4ever-utils';
import getImageSize from "../../utils/getImageSize";
import { updateImage } from "../../actions";
import { ImageBorder } from "../../components/imageButton";
import zhLocale from "../../../../locales/zh_CN";
import { RESTORE_DATA } from "../../constants";
import { getFixedNumber } from "../../utils";
var ACCURACY = 2;
var MAX_FIXED_WIDTH = 167; // 24 / 37.7952755906 = 0.6349999999991798

var MIN_FIXED_WIDTH = 0.63;
var COLUMN_GAP = 36;
var CustomButton = /*#__PURE__*/styled.div(["padding:4px 6px;line-height:20px;border:1px solid rgba(0,0,0,0.16);border-radius:4px;font-size:12px;color:rgb(17,31,44);transition:border-color 0.3s ease-in-out;cursor:default;&:hover{border:1px solid #0089ff;}"]);
var RotateButton = /*#__PURE__*/styled(CustomButton)(["display:flex;width:28px;height:28px;align-items:center;justify-content:center;padding:0;"]);
var MenuLine = /*#__PURE__*/styled.div(["display:grid;grid-template-columns:calc(50% - ", "px) calc(50% - ", "px);grid-column-gap:", "px;", " + ", "{margin-left:6px;}"], COLUMN_GAP / 2, COLUMN_GAP / 2, COLUMN_GAP, RotateButton, RotateButton);
var MenuWrapper = /*#__PURE__*/styled.div(["position:relative;", " + ", "{margin-top:12px;}"], MenuLine, MenuLine);
var ButtonsBox = /*#__PURE__*/styled.div(["display:flex;flex-direction:row;justify-content:flex-start;align-items:center;"]);

function processNumber(num, maxNumber, accuracy) {
  if (accuracy === void 0) {
    accuracy = ACCURACY;
  }

  var realNumber = Math.min(maxNumber, num);
  return getFixedNumber(realNumber, accuracy);
}

function getZoomRectClip(rectClip, ratio) {
  var _ref = rectClip || {},
      _ref$left = _ref.left,
      left = _ref$left === void 0 ? 0 : _ref$left,
      _ref$right = _ref.right,
      right = _ref$right === void 0 ? 0 : _ref$right,
      _ref$top = _ref.top,
      top = _ref$top === void 0 ? 0 : _ref$top,
      _ref$bottom = _ref.bottom,
      bottom = _ref$bottom === void 0 ? 0 : _ref$bottom;

  if (left || right || top || bottom) {
    return {
      rectClip: {
        left: left * ratio,
        right: right * ratio,
        top: top * ratio,
        bottom: bottom * ratio
      }
    };
  }

  return {
    rectClip: rectClip
  };
}

var _ref3 = /*#__PURE__*/_createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "20",
  height: "20",
  fill: "none"
}, /*#__PURE__*/_createElement("path", {
  d: "M2.696 6.572a.5.5 0 1 0-1 0v5a.498.498 0 0 0 .5.5h5a.5.5 0 1 0 0-1H3.403L5.05 9.425A7 7 0 0 1 17 14.375a.5.5 0 1 0 1 0A8 8 0 0 0 4.343 8.718l-1.647 1.647V6.572z",
  fill: "#171A1D"
}));

var _ref4 = /*#__PURE__*/_createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "20",
  height: "20",
  fill: "none"
}, /*#__PURE__*/_createElement("path", {
  d: "M17.304 6.572a.5.5 0 0 1 1 0v5a.499.499 0 0 1-.5.5h-5a.5.5 0 1 1 0-1h3.793L14.95 9.425A7 7 0 0 0 3 14.375a.5.5 0 0 1-1 0 8 8 0 0 1 13.657-5.657l1.647 1.647V6.572z",
  fill: "#171A1D"
}));

var SizeAndStyleMenu = function SizeAndStyleMenu(props) {
  var _node$getInlinesByTyp, _node$data, _node$data2, _node$data3, _image$data, _image$data2, _locale$border;

  var controller = props.controller,
      config = props.config;
  var value = controller.value;
  var disableStretchMode = config.disableStretchMode,
      _config$locale = config.locale,
      locale = _config$locale === void 0 ? zhLocale.image.locale : _config$locale;
  var node = ImagePlugin.useFocusImage(controller); // 通过右键菜单打开右侧面板时，是选中 text image text，因此不一定直接选中图片
  // @ts-ignore

  var image = (node == null ? void 0 : node.type) === 'image' ? node : (node == null ? void 0 : (_node$getInlinesByTyp = node.getInlinesByType('image')) == null ? void 0 : _node$getInlinesByTyp.at(0)) || node;
  var rotation = (node == null ? void 0 : (_node$data = node.data) == null ? void 0 : _node$data.rotation) || 0;
  var src = node == null ? void 0 : (_node$data2 = node.data) == null ? void 0 : _node$data2.src;
  var radius = (node == null ? void 0 : (_node$data3 = node.data) == null ? void 0 : _node$data3.radius) || ImagePlugin.DEFAULT_RADIUS;
  var container = useZoomContainer();

  var _React$useMemo = React.useMemo(function () {
    var _node$data4, _node$data5;

    var memoRealWidth = node == null ? void 0 : (_node$data4 = node.data) == null ? void 0 : _node$data4.width;
    var memoRealHeight = node == null ? void 0 : (_node$data5 = node.data) == null ? void 0 : _node$data5.height;

    if (!ImagePlugin.isValidSize(memoRealWidth, memoRealHeight)) {
      var dom = domUtils.findDOMNodeSafely((image == null ? void 0 : image.key) || '', container || window);

      if (dom) {
        var imageWrapper = dom.querySelector("." + ImagePlugin.IMAGE_DATA_WRAPPER_CLASS_NAME);
        var rect = imageWrapper == null ? void 0 : imageWrapper.getBoundingClientRect();
        memoRealWidth = UnitConvert.pix2cm(rect == null ? void 0 : rect.width);
        memoRealHeight = UnitConvert.pix2cm(rect == null ? void 0 : rect.height);
      }
    }

    return [memoRealWidth, memoRealHeight];
  }, [image == null ? void 0 : (_image$data = image.data) == null ? void 0 : _image$data.width, image == null ? void 0 : (_image$data2 = image.data) == null ? void 0 : _image$data2.height, image == null ? void 0 : image.key, container]),
      width = _React$useMemo[0],
      height = _React$useMemo[1];

  var ratio = ImagePlugin.isValidSize(width, height) && width !== 0 ? height / width : 1;

  var _React$useMemo2 = React.useMemo(function () {
    var memoRealWidth = UnitConvert.pix2cm(width);
    var memoRealHeight = UnitConvert.pix2cm(height);
    var memoFixedMaxWidth;
    var memoFixedMaxHeight;

    if (!disableStretchMode || !disableStretchMode()) {
      // 根据是否启用的自适应
      var maxWidth = ImagePlugin.getImageMaxWidth(value, node);
      var maxHeight = maxWidth * ratio;
      var widthInCM = UnitConvert.pix2cm(width);
      var heightInCM = UnitConvert.pix2cm(height);
      var maxWidthInCM = UnitConvert.pix2cm(maxWidth);
      var maxHeightInCM = UnitConvert.pix2cm(maxHeight);
      memoRealWidth = processNumber(widthInCM, maxWidthInCM);
      memoRealHeight = processNumber(heightInCM, maxHeightInCM);
      memoFixedMaxWidth = getFixedNumber(maxWidthInCM);
      memoFixedMaxHeight = getFixedNumber(maxHeightInCM);
    } else {
      memoFixedMaxWidth = MAX_FIXED_WIDTH;
      memoFixedMaxHeight = getFixedNumber(fixedMaxWidth * ratio);
      memoRealWidth = getFixedNumber(memoRealWidth);
      memoRealHeight = getFixedNumber(memoRealHeight);
    }

    return [memoRealWidth, memoRealHeight, memoFixedMaxWidth, memoFixedMaxHeight];
  }, [value, disableStretchMode, height, width, node, ratio]),
      realWidth = _React$useMemo2[0],
      realHeight = _React$useMemo2[1],
      fixedMaxWidth = _React$useMemo2[2],
      fixedMaxHeight = _React$useMemo2[3];

  var fixedMinWidth = Math.min(MIN_FIXED_WIDTH, fixedMaxWidth);
  var fixedMinHeight = fixedMinWidth * ratio;
  var handleWidthChange = React.useCallback(function (change) {
    if (change < fixedMinWidth || change > fixedMaxWidth) {
      return;
    }

    var px = UnitConvert.cm2pix(change);
    var newWidth = getFixedNumber(px);
    var newHeight = newWidth * ratio;

    if (width !== newWidth || height !== newHeight) {
      var zoomRatio = newWidth / (node == null ? void 0 : node.data.width);

      var newData = _extends({
        width: newWidth,
        height: newHeight
      }, getZoomRectClip(node == null ? void 0 : node.data.rectClip, zoomRatio));

      controller.run('onAction', updateImage(node, newData));
      logger.sum('image-sidebar-width');
    }
  }, [controller, node, ratio, width, height, fixedMaxWidth, fixedMinWidth]);
  var handleHeightChange = React.useCallback(function (change) {
    if (change < fixedMinHeight || change > fixedMaxHeight) {
      return;
    }

    var px = UnitConvert.cm2pix(change);
    var newHeight = getFixedNumber(px);
    var newWidth = newHeight / ratio;

    if (width !== newWidth || height !== newHeight) {
      var _node$data6;

      var zoomRatio = newHeight / (node == null ? void 0 : node.data.height);

      var newData = _extends({
        width: newWidth,
        height: newHeight
      }, getZoomRectClip(node == null ? void 0 : (_node$data6 = node.data) == null ? void 0 : _node$data6.rectClip, zoomRatio));

      controller.run('onAction', updateImage(node, newData));
      logger.sum('image-sidebar-height');
    }
  }, [ratio, controller, node, width, height, fixedMaxHeight, fixedMinHeight]);
  var handleRotationChange = React.useCallback(function (change) {
    var newRotation = normalizeAngle(change);

    if (newRotation !== rotation) {
      controller.run('onAction', updateImage(image, {
        rotation: newRotation
      }, container));
    }

    logger.sum('image-sidebar-rotation');
  }, [rotation, controller, image, container]);
  var handleReverseRotate90 = React.useCallback(function () {
    var newRotation = normalizeAngle(rotation - 90);
    controller.run('onAction', updateImage(image, {
      rotation: newRotation
    }, container));
    logger.sum('image-sidebar-reverse-rotate90');
  }, [rotation, controller, image, container]);
  var handleRotate90 = React.useCallback(function () {
    var newRotation = normalizeAngle(rotation + 90);
    controller.run('onAction', updateImage(image, {
      rotation: newRotation
    }, container));
    logger.sum('image-sidebar-rotate90');
  }, [rotation, controller, image, container]);
  var handleRestore = React.useCallback(function () {
    getImageSize(src, controller).then(function (_ref2) {
      var resetWidth = _ref2.width,
          resetHeight = _ref2.height;

      var newPayload = _extends({
        width: resetWidth,
        height: resetHeight
      }, RESTORE_DATA);

      controller.run('onAction', updateImage(node, newPayload));
      logger.sum('image-sidebar-restore');
    });
  }, [src, controller, node]);
  var handleRadiusChange = React.useCallback(function (change) {
    controller.run('onAction', updateImage(node, {
      radius: change
    }));
    logger.sum('image-sidebar-radius');
  }, [controller, node]);
  var inputNumberStyle = React.useMemo(function () {
    return {
      flex: 1
    };
  }, []);
  var restoreStyle = React.useMemo(function () {
    return {
      marginTop: 12,
      textAlign: 'center'
    };
  }, []);
  var isInvalidSize = !ImagePlugin.isValidSize(realWidth, realHeight);
  return node ? /*#__PURE__*/_createElement(MenuWrapper, null, /*#__PURE__*/_createElement(MenuLine, {
    key: "image-sidebar-size"
  }, /*#__PURE__*/_createElement(InputNumberItem, {
    name: "image-width",
    title: locale.width,
    unit: "cm",
    value: realWidth,
    onChange: handleWidthChange,
    max: fixedMaxWidth,
    min: MIN_FIXED_WIDTH,
    key: "image-set-panel-width",
    style: inputNumberStyle,
    disabled: isInvalidSize,
    testid: "image-sidebar-width",
    role: PluginRoles.imageSidebarWidthInput
  }), /*#__PURE__*/_createElement(InputNumberItem, {
    name: "image-height",
    title: locale.height,
    unit: "cm",
    value: realHeight,
    onChange: handleHeightChange,
    max: fixedMaxHeight,
    min: fixedMinHeight,
    key: "image-set-panel-height",
    style: inputNumberStyle,
    disabled: isInvalidSize,
    testid: "image-sidebar-height",
    role: PluginRoles.imageSidebarHeightInput
  })), /*#__PURE__*/_createElement(MenuLine, {
    key: "image-sidebar-rotation"
  }, /*#__PURE__*/_createElement(InputNumberItem, {
    name: "image-rotation",
    title: locale.rotateInput,
    unit: "\xB0",
    value: rotation,
    onChange: handleRotationChange,
    max: 360,
    min: -360,
    key: "image-set-panel-rotation",
    style: inputNumberStyle,
    step: 45,
    testid: "image-sidebar-rotation",
    role: PluginRoles.imageSidebarRotationInput
  }), /*#__PURE__*/_createElement(CustomInputNumberItem, {
    content: /*#__PURE__*/_createElement(ButtonsBox, null, /*#__PURE__*/_createElement(Tooltip, {
      title: locale.rotateAntiClockwise
    }, /*#__PURE__*/_createElement(RotateButton, {
      onClick: handleReverseRotate90,
      key: "reverse-rotate-90",
      "data-testid": "image-sidebar-reverse-rotate-90",
      "data-role": PluginRoles.imageSidebarReverseRotate90
    }, _ref3)), /*#__PURE__*/_createElement(Tooltip, {
      title: locale.rotate
    }, /*#__PURE__*/_createElement(RotateButton, {
      onClick: handleRotate90,
      key: "rotate-90",
      "data-testid": "image-sidebar-rotate-90",
      "data-role": PluginRoles.imageSidebarRotate90
    }, _ref4))),
    style: inputNumberStyle,
    title: locale.rotate90 || 'Rotate 90°'
  })), /*#__PURE__*/_createElement(MenuLine, {
    key: "image-sidebar-border"
  }, /*#__PURE__*/_createElement(CustomInputNumberItem, {
    content: /*#__PURE__*/_createElement(ImageBorder, {
      controller: controller,
      locale: locale,
      isButtonType: true
    }),
    style: inputNumberStyle,
    title: ((_locale$border = locale.border) == null ? void 0 : _locale$border.borderInput) || 'Border'
  }), /*#__PURE__*/_createElement(InputNumberItem, {
    name: "image-radius",
    title: locale.radius,
    value: radius,
    onChange: handleRadiusChange,
    min: 0,
    max: 9999,
    key: "image-set-panel-radius",
    style: inputNumberStyle,
    testid: "image-sidebar-radius",
    "data-role": PluginRoles.imageSidebarRadiusInput
  })), /*#__PURE__*/_createElement(CustomButton, {
    onMouseDown: blockEvent,
    onClick: handleRestore,
    style: restoreStyle,
    "data-testid": "image-sidebar-restore",
    "data-role": PluginRoles.imageSidebarRestore
  }, locale.resetTitle)) : null;
};

export default SizeAndStyleMenu;
//# sourceMappingURL=SizeAndStyleMenu.js.map