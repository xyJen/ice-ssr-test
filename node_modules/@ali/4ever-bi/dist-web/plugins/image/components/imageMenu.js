import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { MenuItem } from '@ali/we-design';
import { PluginRoles } from '@ali/4ever-bamboo';
import { Image } from '@ali/4ever-mo';
import { ToolbarDownloadNormal, SettingNormal } from '@ali/we-icon';
import { toggleImageSidebar } from "../actions";
import inSelectionInImage from "../utils/inSelectionInImage";
;
import { selectImage } from "../actions";
export default function ImageMenu(props) {
  var menuItem = props.menuItem,
      controller = props.controller;
  var value = controller.value;

  var title = menuItem.title,
      rest = _objectWithoutPropertiesLoose(menuItem, ["title"]);

  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || inSelectionInImage(value) || controller.query('isSelectionInLink') || controller.query('isSelectionInMention') || controller.query('isSelectionInLinkCard');

  var handleClick = function handleClick() {
    return controller.run('onAction', selectImage());
  };

  return /*#__PURE__*/_createElement(MenuItem, _extends({}, rest, {
    disabled: isDisabled,
    onClick: handleClick,
    role: PluginRoles.image
  }), title || '');
}

var _ref = /*#__PURE__*/_createElement(SettingNormal, null);

export function ImageSetting(props) {
  var menuItem = props.menuItem,
      controller = props.controller,
      locale = props.locale;
  var _controller$value = controller.value,
      document = _controller$value.document,
      selection = _controller$value.selection;

  var title = menuItem.title,
      rest = _objectWithoutPropertiesLoose(menuItem, ["title"]);

  var handleClick = React.useCallback(function () {
    controller.run('onAction', toggleImageSidebar({
      node: controller.value.focusInline,
      toggle: true
    }));
  }, [controller]);
  var isDisabled = React.useMemo(function () {
    var isCollapsed = selection.isCollapsed,
        focus = selection.focus;

    if (isCollapsed) {
      var node = document.getClosestVoid(focus.key, controller);
      return !Image.isImage(node);
    }

    return true;
  }, [controller, document, selection]);
  return /*#__PURE__*/_createElement(MenuItem, _extends({
    testid: "image-menu-options",
    icon: _ref,
    onClick: handleClick
  }, rest, {
    disabled: isDisabled,
    role: PluginRoles.imageMenuOptions
  }), title || (locale == null ? void 0 : locale.advancedSettings));
}

var _ref2 = /*#__PURE__*/_createElement(ToolbarDownloadNormal, null);

export function ImageDownload(props) {
  var menuItem = props.menuItem,
      controller = props.controller,
      config = props.config,
      locale = props.locale;
  var focusInline = controller.value.focusInline;

  var title = menuItem.title,
      rest = _objectWithoutPropertiesLoose(menuItem, ["title"]);

  var downloadImage = config.downloadImage;
  var src;

  if (focusInline && Image.isImage(focusInline)) {
    var _focusInline$data;

    src = (_focusInline$data = focusInline.data) == null ? void 0 : _focusInline$data.src;
  }

  var handleClick = React.useCallback(function () {
    downloadImage && downloadImage(src);
  }, [src, downloadImage]);
  return src && downloadImage ? /*#__PURE__*/_createElement(MenuItem, _extends({
    testid: "image-menu-download",
    role: PluginRoles.imageMenuDownload,
    icon: _ref2,
    onClick: handleClick
  }, rest), title || (locale == null ? void 0 : locale.downloadImg)) : null;
}
//# sourceMappingURL=imageMenu.js.map