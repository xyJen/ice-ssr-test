import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Dropdown } from '@ali/we-design';
import { DropdownAnimation } from '@ali/we-util';
import { RestorepictureNormal as ChangePicNormal, SettingNormal, StrokeNormal } from '@ali/we-icon';
import { PictureButton, BorderPicker, BorderPickerOverlay, IconButton as Button, IconMenu } from '@ali/we-toolbar';
import { PluginRoles, ImagePlugin, useScrollableContent } from '@ali/4ever-bamboo';
import { Image } from '@ali/4ever-mo';
import logger from '@ali/4ever-logger';
import inSelectionInImage from "../utils/inSelectionInImage";
import getImageSize from "../utils/getImageSize";
;
import { selectImage, updateImage, setImageInjection, toggleImageSidebar } from "../actions";
;
import { setColorPanelMode } from '@ali/4ever-plugin-pref';
import { blockEvent } from '@ali/4ever-utils';
import { BorderButton, BorderButtonIcon, StyleButtonIcon } from "./styled";
import { RESTORE_DATA } from "../constants";
import { ImageStyleOverlay } from "./imageStyleOverlay";
var lineStyleMap = {
  single: {
    lineType: 'single',
    size: 1
  },
  dotted: {
    lineType: 'dotted',
    size: 1
  },
  dashed: {
    lineType: 'dashed',
    size: 1
  }
};
var lineSizeMap = {
  1: {
    lineType: 'single',
    size: 1
  },
  2: {
    lineType: 'single',
    size: 2
  },
  4: {
    lineType: 'single',
    size: 4
  },
  6: {
    lineType: 'single',
    size: 6
  }
};
var DEFAULT_COLOR = '#D8D8D8';
var DEFAULT_BORDER_ICON_COLOR = 'rgb(17, 31, 44)';
var DEFAULT_TYPE = 'single';
var DEFAULT_WIDTH = 1;
export var isButtonDisabled = function isButtonDisabled(controller) {
  var value = controller.value;
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || inSelectionInImage(value) || controller.query('isSelectionInLink') || controller.query('isSelectionInMention') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  return Boolean(isDisabled);
};
export function ImageButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var handleClick = React.useCallback(function () {
    return controller.run('onAction', selectImage());
  }, [controller]);
  return /*#__PURE__*/_createElement(PictureButton, _extends({}, rest, {
    testid: "bi-toolbar-picture",
    disabled: isButtonDisabled(controller),
    onClick: handleClick,
    role: PluginRoles.image
  }));
}
export var ImageBorder = function ImageBorder(props) {
  var _focusInline$data;

  var controller = props.controller,
      locale = props.locale,
      isButtonType = props.isButtonType,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "isButtonType"]);

  var value = controller.value;
  var focusInline = value.focusInline;
  var imgOutline = (focusInline == null ? void 0 : (_focusInline$data = focusInline.data) == null ? void 0 : _focusInline$data.outline) || {}; // TODO: 历史数据兼容，此处先处理为default，后续需要we-ui支持不选中状态

  var lineStyle = lineStyleMap[imgOutline.type] ? imgOutline.type : DEFAULT_TYPE;
  var lineSize = "" + (lineSizeMap[imgOutline.width] ? imgOutline.width : DEFAULT_WIDTH);

  var _React$useState = React.useState(false),
      isOverlayVisible = _React$useState[0],
      setOverlayVisible = _React$useState[1];

  var _React$useState2 = React.useState(false),
      isSizeSelectVisible = _React$useState2[0],
      setSizeSelectVisible = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      isStyleSelectVisible = _React$useState3[0],
      setStyleSelectVisible = _React$useState3[1];

  var handleColorPick = function handleColorPick(colorValue) {
    var _focusInline$data2;

    var outline = _extends({
      width: DEFAULT_WIDTH
    }, focusInline == null ? void 0 : (_focusInline$data2 = focusInline.data) == null ? void 0 : _focusInline$data2.outline, {
      color: colorValue
    });

    if (!colorValue) {
      delete outline.width;
      delete outline.color;
    }

    logger.sum('image-border-line-color');
    controller.run('onAction', updateImage(focusInline, {
      outline: outline
    }));
  };

  var handleLineStyleChange = function handleLineStyleChange(key) {
    var outline = _extends({
      color: DEFAULT_COLOR,
      width: DEFAULT_WIDTH
    }, imgOutline, {
      type: lineStyleMap[key].lineType
    });

    controller.run('onAction', updateImage(focusInline, {
      outline: outline
    }));
    logger.sum('image-border-line-style');
  };

  var handleLineSizeChange = function handleLineSizeChange(key) {
    var _lineSizeMap$key;

    var outline = _extends({
      color: DEFAULT_COLOR
    }, imgOutline, {
      width: key ? ((_lineSizeMap$key = lineSizeMap[key]) == null ? void 0 : _lineSizeMap$key.size) || DEFAULT_WIDTH : DEFAULT_WIDTH
    });

    controller.run('onAction', updateImage(focusInline, {
      outline: outline
    }));
    logger.sum('image-border-line-size');
  };

  var borderLocale = locale && locale.border || {};

  var handleActiveChange = function handleActiveChange(visible) {
    controller.run('onAction', setImageInjection(focusInline == null ? void 0 : focusInline.key, {
      isSettingBorder: visible
    }));
  };

  var getColorPanelMode = React.useCallback(function () {
    var _controller$query;

    return (_controller$query = controller.query('getColorPanelMode')) == null ? void 0 : _controller$query.mode;
  }, [controller]);
  var handleSelectValueChange = React.useCallback(function (mode) {
    controller.run('onAction', setColorPanelMode({
      mode: mode
    }));
  }, [controller]);
  var color = imgOutline.color || DEFAULT_COLOR;
  var pathColors = React.useMemo(function () {
    return [// 当选中颜色为白色时，选中边框的外边缘为黑色，否则选中边框外边缘与内部颜色一致
    color != null ? color : DEFAULT_COLOR, DEFAULT_BORDER_ICON_COLOR];
  }, [color]);
  var handleVisibleChange = React.useCallback(function (e) {
    if (!e && (isSizeSelectVisible || isStyleSelectVisible)) {
      return;
    }

    setOverlayVisible(e);
  }, [isSizeSelectVisible, isStyleSelectVisible]);
  return !isButtonType ? /*#__PURE__*/_createElement(BorderPicker, _extends({}, rest, {
    color: color,
    title: borderLocale.style,
    tooltip: borderLocale.style,
    lineStyle: lineStyle,
    lineSize: lineSize,
    lineStyleMap: lineStyleMap,
    lineSizeMap: lineSizeMap,
    onColorPick: handleColorPick,
    onLineStyleChange: handleLineStyleChange,
    onLineSizeChange: handleLineSizeChange,
    onClick: handleLineSizeChange,
    automaticColor: "",
    clearColor: "",
    onActiveChange: handleActiveChange,
    role: PluginRoles.imageBorder,
    showToggleSelect: true,
    getColorPanelMode: getColorPanelMode,
    onSelectValueChange: handleSelectValueChange,
    testid: "BorderPicker"
  })) : /*#__PURE__*/_createElement(Dropdown, {
    visible: isOverlayVisible || isSizeSelectVisible || isStyleSelectVisible,
    onVisibleChange: handleVisibleChange,
    testid: "image-sidebar-border-dropdown",
    role: PluginRoles.imageBorder,
    overlay: /*#__PURE__*/_createElement(DropdownAnimation, {
      visible: isOverlayVisible
    }, /*#__PURE__*/_createElement(BorderPickerOverlay, {
      color: imgOutline.color || DEFAULT_COLOR // @ts-ignore 组件不存在 title 属性
      ,
      title: borderLocale.style,
      tooltip: borderLocale.style,
      lineStyle: lineStyle,
      lineSize: lineSize,
      lineStyleMap: lineStyleMap,
      lineSizeMap: lineSizeMap,
      onColorPick: handleColorPick,
      onLineStyleChange: handleLineStyleChange,
      onLineSizeChange: handleLineSizeChange,
      onClick: handleLineSizeChange,
      automaticColor: "",
      clearColor: "",
      getColorPanelMode: getColorPanelMode,
      onSelectValueChange: handleSelectValueChange,
      onSizeSelectVisibleChange: setSizeSelectVisible,
      onStyleSelectVisibleChange: setStyleSelectVisible,
      showToggleSelect: true
    }))
  }, /*#__PURE__*/_createElement(BorderButton, {
    onMouseDown: blockEvent,
    "data-testid": "image-sidebar-border-button"
  }, /*#__PURE__*/_createElement(BorderButtonIcon, null, /*#__PURE__*/_createElement(StrokeNormal, {
    pathColors: pathColors
  })), borderLocale.borderInput));
};

var _ref2 = /*#__PURE__*/_createElement(ChangePicNormal, null);

export var ImageReset = function ImageReset(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var handleClick = function handleClick() {
    var value = controller.value;
    var focusInline = value.focusInline;
    var originData = {};

    if (focusInline) {
      originData = focusInline.data || {};
    }

    getImageSize(originData.src, controller).then(function (_ref) {
      var width = _ref.width,
          height = _ref.height;

      var newPayload = _extends({
        width: width,
        height: height
      }, RESTORE_DATA);

      controller.run('onAction', updateImage(focusInline, newPayload));
    });
  };

  return /*#__PURE__*/_createElement(Button, _extends({}, rest, {
    title: locale.resetTitle,
    tooltip: locale.resetTitle,
    testid: "bi-toolbar-reset-pic",
    icon: _ref2,
    onClick: handleClick,
    role: PluginRoles.imageReset
  }));
};
export var ImageStyle = function ImageStyle(props) {
  var controller = props.controller,
      locale = props.locale,
      size = props.size;

  var _React$useState4 = React.useState(false),
      dropdownVisible = _React$useState4[0],
      setDropdownVisible = _React$useState4[1];

  var scrollableContent = useScrollableContent();
  var getContainer = React.useCallback(function () {
    return scrollableContent || document.body;
  }, [scrollableContent]);
  var image = ImagePlugin.useFocusImage(controller);
  return /*#__PURE__*/_createElement(IconMenu, {
    overlay: /*#__PURE__*/_createElement(ImageStyleOverlay, {
      controller: controller,
      getImageNode: function getImageNode() {
        return image;
      },
      locale: locale,
      onClick: function onClick() {
        setDropdownVisible(false);
      }
    }),
    title: locale.styleOptions,
    tooltip: locale.styleOptions,
    size: size,
    icon: StyleButtonIcon,
    onVisibleChange: setDropdownVisible,
    active: dropdownVisible,
    testid: "image-toolbar-recommend-styles",
    role: PluginRoles.imageRecommendStyle,
    getContainer: getContainer
  });
};

var _ref3 = /*#__PURE__*/_createElement(SettingNormal, null);

export var OptionsButton = function OptionsButton(props) {
  var controller = props.controller,
      locale = props.locale;
  var node = controller.value.focusInline;
  var handleClick = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    controller.run('onAction', toggleImageSidebar({
      node: node,
      toggle: true
    }));
  }, [controller, node]);
  var isDisabled = !Image.isImage(node);
  return /*#__PURE__*/_createElement(Button, {
    icon: _ref3,
    tooltip: locale.options,
    onClick: handleClick,
    disabled: isDisabled,
    testid: "pi-toolbar-image-options",
    role: PluginRoles.imageOptions
  });
};
OptionsButton.displayName = 'OptionsButton';
//# sourceMappingURL=imageButton.js.map