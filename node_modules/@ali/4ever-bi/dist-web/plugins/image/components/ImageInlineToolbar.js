import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { debounce } from 'lodash-es';
import { environment, domUtils } from '@ali/4ever-cangjie';
import { PluginRoles } from '@ali/4ever-bamboo';
import { IconButton as Button, MoreButton } from '@ali/we-toolbar';
import { RotatepictureNormal as CounterclockwiseNormal, Rotate90Normal as ClockwiseNormal, CutNormal as CutPicNormal, DownloadpicturenewNormal as SelectDownloadNormal, RotateLeftLineThinNormal } from '@ali/we-icon';
import { PreviewBetaNormal, Menu } from '@ali/we-design';
import { removeImage, setImageInjection } from "../actions";
import { InlineToolbar } from "../../../index";
import { getData } from '@ali/4ever-utils';
import TextButton from "./TextButton";
import { Menu as EditorMenu } from '@ali/4ever-component';
var inlineToolbarOverlayStyle = {
  backgroundColor: 'transparent',
  boxShadow: 'none',
  border: 'none'
};
var inlineToolbarStyle = {
  border: 'none',
  boxShadow: '0px 0px 1px rgb(0 0 0 / 24%), 0px 8px 24px rgb(0 0 0 / 16%)',
  padding: '0 5px',
  borderRadius: '4px'
};
export var getToolButton = function getToolButton(name, icon, handleClick, testid, role, controller, node) {
  var handleClickWithController = function handleClickWithController(event) {
    return handleClick(event, controller, node);
  },
      _ref = /*#__PURE__*/_createElement(TextButton, {
    name: name,
    testid: testid,
    role: role,
    handleClick: handleClickWithController
  });

  return function (props) {
    if (!icon) {
      return _ref;
    }

    return /*#__PURE__*/_createElement(Button, _extends({}, props, {
      testid: testid,
      onClick: handleClickWithController,
      title: name,
      tooltip: name,
      bordered: false,
      icon: icon,
      role: role
    }));
  };
};

var _ref3 = /*#__PURE__*/_createElement(CutPicNormal, null);

var _ref4 = /*#__PURE__*/_createElement(SelectDownloadNormal, null);

var _ref5 = /*#__PURE__*/_createElement(PreviewBetaNormal, null);

var _ref6 = /*#__PURE__*/_createElement(CounterclockwiseNormal, null);

var _ref7 = /*#__PURE__*/_createElement(ClockwiseNormal, null);

var _ref8 = /*#__PURE__*/_createElement(RotateLeftLineThinNormal, null);

var ImageInlineToolbar = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ImageInlineToolbar, _React$Component);

  function ImageInlineToolbar(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.mutationObserver = null;
    _this.observerCallback = debounce(function (mutationsList, parentDOM) {
      var ignoreMuation = mutationsList.every(function (mutation) {
        return _this.shouldIgnoreMutation(mutation, parentDOM);
      });

      if (!ignoreMuation) {
        _this.setState({
          key: "image-inline-toolbar-" + Math.random()
        });
      }
    }, 200);

    _this.handlepreview = function (e) {
      e.preventDefault();
      e.stopPropagation();
      var _this$props = _this.props,
          node = _this$props.node,
          previewImage = _this$props.previewImage;

      if (previewImage) {
        var src = node.data.src;
        previewImage(src, node);
      }
    };

    _this.handledeleteImg = function (e) {
      e.preventDefault();
      e.stopPropagation();
      var _this$props2 = _this.props,
          controller = _this$props2.controller,
          node = _this$props2.node;
      controller.run('onAction', removeImage(node));
    };

    _this.handleCorp = function (event) {
      var _this$props3 = _this.props,
          controller = _this$props3.controller,
          node = _this$props3.node;
      event.preventDefault();
      event.stopPropagation();
      controller.run('onAction', setImageInjection(node.key, {
        isImageCropping: true
      }));
    };

    _this.handleDownload = function (event) {
      var _this$props4 = _this.props,
          downloadImage = _this$props4.downloadImage,
          node = _this$props4.node;
      event.preventDefault();
      event.stopPropagation();

      if (downloadImage) {
        var src = node.data.src;
        downloadImage(src);
      }
    };

    _this.handlePreview = function (event) {
      var _this$props5 = _this.props,
          previewImage = _this$props5.previewImage,
          node = _this$props5.node;
      event.preventDefault();
      event.stopPropagation();

      if (previewImage) {
        var src = node.data.src;
        previewImage(src, node);
      }
    };

    _this.getCustomToolbar = function (node, customToolbars) {
      var extraData = getData(node.data, 'extraData', {});

      for (var key in customToolbars) {
        if (extraData[key]) {
          return customToolbars[key];
        }
      }

      return null;
    };

    _this.getMoreMenuButton = function () {
      var _this$props6 = _this.props,
          inlineToolbarMore = _this$props6.inlineToolbarMore,
          getScrollableContent = _this$props6.getScrollableContent;

      var _ref2 = /*#__PURE__*/_createElement(MoreButton, {
        testid: "image-inline-more-dropdown",
        getContainer: getScrollableContent,
        placement: "bottomLeft",
        offsetY: 0,
        overlay: /*#__PURE__*/_createElement(Menu, {
          getContainer: getScrollableContent,
          testid: "image-inline-more-menu"
        }, /*#__PURE__*/_createElement(EditorMenu, {
          menus: inlineToolbarMore
        }))
      });

      return function () {
        if (!inlineToolbarMore) {
          return null;
        }

        return _ref2;
      };
    };

    _this.getCustomToolButtons = function () {
      var _this$props7 = _this.props,
          locale = _this$props7.locale,
          handleInlineToolbarRotate = _this$props7.handleInlineToolbarRotate,
          handleInlineToolbarRotateAntiClockwise = _this$props7.handleInlineToolbarRotateAntiClockwise,
          downloadImage = _this$props7.downloadImage,
          previewImage = _this$props7.previewImage;
      return {
        'image.crop': getToolButton(locale.cropping, _ref3, _this.handleCorp, 'bi-toolbar-image-crop', PluginRoles.imageInlineToolbarCrop),
        'image.download': !downloadImage ? null : getToolButton(locale.downloadImg, _ref4, _this.handleDownload, 'bi-toolbar-image-download', PluginRoles.imageInlineToolbarDownload),
        'image.preview': !previewImage ? null : getToolButton(locale.previewImg, _ref5, _this.handlePreview, 'bi-toolbar-image-preview', PluginRoles.imageInlineToolbarPreview),
        'image.rotateReverse': getToolButton(locale.rotateAntiClockwise, _ref6, handleInlineToolbarRotateAntiClockwise, 'bi-toolbar-image-rotateReverse', 'imageInlineToolbarRotateReverse'),
        'image.rotate': getToolButton(locale.rotate, _ref7, handleInlineToolbarRotate, 'bi-toolbar-image-rotate', PluginRoles.imageInlineToolbarRotate),
        'image.singeRotateReverse': getToolButton(locale.rotateAntiClockwise, _ref8, handleInlineToolbarRotateAntiClockwise, 'bi-toolbar-image-rotateReverse', PluginRoles.imageInlineToolbarSingleRotateReverse),
        'image.more': _this.getMoreMenuButton()
      };
    };

    _this.getToolButtonFromConfig = function (config) {
      var _this$props8 = _this.props,
          controller = _this$props8.controller,
          node = _this$props8.node;
      var buttons = {}; // eslint-disable-next-line guard-for-in

      for (var key in config) {
        var _config$key = config[key],
            name = _config$key.name,
            icon = _config$key.icon,
            handleClick = _config$key.handleClick,
            testid = _config$key.testid,
            role = _config$key.role;
        buttons[key] = getToolButton(name, icon, handleClick, testid, role, controller, node);
      }

      return buttons;
    };

    _this.state = {
      key: 'image-inline-toolbar-0'
    };
    return _this;
  }

  var _proto = ImageInlineToolbar.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.initMutationObserver();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var _this$mutationObserve;

    (_this$mutationObserve = this.mutationObserver) == null ? void 0 : _this$mutationObserve.disconnect();
    this.observerCallback.cancel();
  };

  _proto.shouldIgnoreMutation = function shouldIgnoreMutation(mutation, root) {
    var type = mutation.type,
        target = mutation.target,
        attributeName = mutation.attributeName;
    var key = this.props.node.key;
    var res = false;

    if (type === 'attributes' && attributeName === 'style') {
      var current = target;

      while (current && current !== root && current !== document.body) {
        var targetKey = current.getAttribute('data-cangjie-key');

        if (key === targetKey) {
          res = true;
          break;
        }

        current = current.parentElement;
      }
    }

    return res;
  };

  _proto.initMutationObserver = function initMutationObserver() {
    var _this2 = this;

    var _this$props9 = this.props,
        node = _this$props9.node,
        getScrollableContent = _this$props9.getScrollableContent;
    var parent = this.props.controller.value.document.getParent(node.key);
    var root = getScrollableContent();
    var parentDOM = parent && domUtils.findDOMNodeSafely(parent.key, root);

    if (!parentDOM) {
      return;
    }

    this.mutationObserver = new MutationObserver(function (mutationsList) {
      _this2.observerCallback(mutationsList, parentDOM);
    });
    this.mutationObserver.observe(parentDOM, {
      childList: true,
      attributes: true,
      subtree: true,
      attributeFilter: ['style']
    });
  };

  _proto.render = function render() {
    var _this$props10 = this.props,
        visible = _this$props10.visible,
        triggerNode = _this$props10.triggerNode,
        inlineToolbarLayout = _this$props10.inlineToolbarLayout,
        node = _this$props10.node,
        customToolbars = _this$props10.customToolbars;

    var _ref9 = this.getCustomToolbar(node, customToolbars) || {},
        customToolButtonConfig = _ref9.customToolButtonConfig,
        customToolLayout = _ref9.customToolLayout; // 狗姐：所有 inlineToolbar 样式和极简模式 inlineToolbar 保持一致，先从图片开刀
    // 图片比较紧急，所以基于原来的 inlineToolbar 修改样式，而暂未使用新 inlineToolbar


    return /*#__PURE__*/_createElement(InlineToolbar, {
      key: this.state.key,
      style: inlineToolbarStyle,
      overlayStyle: inlineToolbarOverlayStyle,
      visible: visible,
      triggerNode: triggerNode,
      inlineLayout: customToolLayout || inlineToolbarLayout,
      customToolButtons: customToolButtonConfig ? this.getToolButtonFromConfig(customToolButtonConfig) : this.getCustomToolButtons(),
      offsetY: environment.IS_TOUCH_DEVICE ? -22 : -12,
      testid: "image"
    });
  };

  return ImageInlineToolbar;
}(React.Component);

export default ImageInlineToolbar;
//# sourceMappingURL=ImageInlineToolbar.js.map