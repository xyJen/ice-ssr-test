import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import * as ReactDOM from 'react-dom';
import { calcRotationObj, normalizeAngle, getBoundingRelativeRect, getRelativeTouchEvent } from '@ali/4ever-utils';
import { PluginRoles } from '@ali/4ever-bamboo';
import { RotateControlPot, RotateLine, EditorNum } from "./styled";
import fitRotate from "../utils/fitRotate";

var _ref = /*#__PURE__*/_createElement(RotateLine, null);

var ImageRotate = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ImageRotate, _React$Component);

  function ImageRotate(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.originX = void 0;
    _this.originY = void 0;
    _this.currentX = void 0;
    _this.currentY = void 0;
    _this.editorNum = void 0;

    _this.onRotateStart = function (relativeEvent) {
      var onEnterRotationMode = _this.props.onEnterRotationMode;
      onEnterRotationMode();
      _this.originX = relativeEvent.relativeX;
      _this.originY = relativeEvent.relativeY;
      _this.currentX = relativeEvent.relativeX;
      _this.currentY = relativeEvent.relativeY;
    };

    _this.onRotateMove = function (relativeEvent, zoomContainer) {
      var _this$state = _this.state,
          translateX = _this$state.translateX,
          translateY = _this$state.translateY;
      var _this$props = _this.props,
          rotateControl = _this$props.rotateControl,
          rotation = _this$props.rotation,
          rotateImageFrame = _this$props.rotateImageFrame,
          scale = _this$props.scale;
      if (!rotateImageFrame || !rotateControl) return;
      _this.currentX = relativeEvent.relativeX;
      _this.currentY = relativeEvent.relativeY;
      var rect = getBoundingRelativeRect(rotateImageFrame, zoomContainer);
      var rectControl = getBoundingRelativeRect(rotateControl, zoomContainer);
      _this.editorNum.current.style.display = 'inline';
      _this.editorNum.current.style.left = _this.currentX - rectControl.left + 16 + 'px';
      _this.editorNum.current.style.top = _this.currentY - rectControl.top + 'px';
      var objX = rect.left + rect.width / 2;
      var objY = rect.top + rect.height / 2;
      var x1 = _this.originX - objX;
      var y1 = _this.originY - objY;
      var x2 = _this.currentX - objX;
      var y2 = _this.currentY - objY;
      var triangleTop = x1 * y2 - x2 * y1;
      var triangleBottom = x1 * x2 + y1 * y2;
      var arc = Math.atan2(triangleTop, triangleBottom) * 180 / Math.PI;
      var newRotate = normalizeAngle(rotation + arc);
      newRotate = fitRotate(newRotate);
      rotateImageFrame.style.transform = "translate(" + translateX * scale + "px, " + translateY * scale + "px) rotate(" + newRotate + "deg)";

      _this.setState({
        currentRotation: newRotate
      });
    };

    _this.onRotateEnd = function () {
      var _this$props2 = _this.props,
          rotation = _this$props2.rotation,
          handleRotate = _this$props2.handleRotate,
          rotateImageFrame = _this$props2.rotateImageFrame,
          getZoomContainer = _this$props2.getZoomContainer;
      var newRotate = null;

      if (rotateImageFrame) {
        if (_this.originX !== _this.currentX || _this.originY !== _this.currentY) {
          var rect = getBoundingRelativeRect(rotateImageFrame, getZoomContainer());
          var objX = rect.left + rect.width / 2;
          var objY = rect.top + rect.height / 2;
          var x1 = _this.originX - objX;
          var y1 = _this.originY - objY;
          var x2 = _this.currentX - objX;
          var y2 = _this.currentY - objY;
          var triangleTop = x1 * y2 - x2 * y1;
          var triangleBottom = x1 * x2 + y1 * y2;
          var arc = Math.atan2(triangleTop, triangleBottom) * 180 / Math.PI;
          newRotate = normalizeAngle(rotation + arc);
          newRotate = fitRotate(newRotate);
        }
      }

      handleRotate(newRotate);
      _this.originX = 0;
      _this.originY = 0;
      _this.currentX = 0;
      _this.currentY = 0;
    };

    _this.handleTouchStart = function (e) {
      var getZoomContainer = _this.props.getZoomContainer;
      e.preventDefault();
      e.stopPropagation();
      var zoomContainer = getZoomContainer();
      var targetTouches = e.targetTouches;

      if (!zoomContainer || targetTouches.length > 1) {
        return;
      }

      var relativeEvent = getRelativeTouchEvent(targetTouches[0], zoomContainer);

      _this.onRotateStart(relativeEvent);

      zoomContainer.addEventListener('touchend', _this.handleTouchEnd);
      zoomContainer.addEventListener('touchmove', _this.handleTouchMove);
    };

    _this.handleTouchMove = function (e) {
      e.preventDefault();
      e.stopPropagation();
      var _this$props3 = _this.props,
          rotateImageFrame = _this$props3.rotateImageFrame,
          getZoomContainer = _this$props3.getZoomContainer;
      var zoomContainer = getZoomContainer();
      var targetTouches = e.targetTouches;
      var relativeEvent = getRelativeTouchEvent(targetTouches[0], zoomContainer);
      if (!rotateImageFrame) return;

      _this.onRotateMove(relativeEvent, zoomContainer);
    };

    _this.handleTouchEnd = function (e) {
      e.preventDefault();
      e.stopPropagation();

      _this.onRotateEnd();

      var getZoomContainer = _this.props.getZoomContainer;
      var zoomContainer = getZoomContainer();
      zoomContainer && zoomContainer.removeEventListener('touchmove', _this.handleTouchMove);
      zoomContainer && zoomContainer.removeEventListener('touchend', _this.handleTouchEnd);
    };

    _this.renderRotateNumber = function () {
      var currentRotation = _this.state.currentRotation;
      var _this$props4 = _this.props,
          isRotating = _this$props4.isRotating,
          rotateControl = _this$props4.rotateControl;
      var rotation = normalizeAngle(currentRotation, true); // 传送到没有rotate的control层

      return isRotating && rotateControl ? /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_createElement(EditorNum, {
        ref: _this.editorNum,
        style: {
          display: 'none'
        },
        rotating: true
      }, rotation, "\xB0"), rotateControl) : null;
    };

    var width = props.width,
        height = props.height;

    var _rotation = _this.props.rotation || 0;

    var _calcRotationObj = calcRotationObj(width, height, _rotation),
        _translateX = _calcRotationObj.translateX,
        _translateY = _calcRotationObj.translateY;

    _this.originX = 0;
    _this.originY = 0;
    _this.currentX = 0;
    _this.currentY = 0;
    _this.state = {
      rotation: _rotation,
      currentRotation: _rotation,
      translateX: _translateX,
      translateY: _translateY,
      width: width,
      height: height
    };
    _this.editorNum = /*#__PURE__*/React.createRef();
    return _this;
  }

  ImageRotate.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevStates) {
    var width = nextProps.width,
        height = nextProps.height;
    var rotation = nextProps.rotation || 0;
    var prevRotation = prevStates.rotation || 0;

    if (rotation !== prevRotation || width !== prevStates.width || height !== prevStates.height) {
      var _calcRotationObj2 = calcRotationObj(width, height, rotation),
          rWidth = _calcRotationObj2.rWidth,
          rHeight = _calcRotationObj2.rHeight,
          translateX = _calcRotationObj2.translateX,
          translateY = _calcRotationObj2.translateY;

      return {
        rotation: rotation,
        currentRotation: rotation,
        translateX: translateX,
        translateY: translateY,
        rWidth: rWidth,
        rHeight: rHeight,
        width: width,
        height: height
      };
    }

    return null;
  };

  var _proto = ImageRotate.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    var getZoomContainer = this.props.getZoomContainer;
    var zoomContainer = getZoomContainer();

    if (zoomContainer) {
      zoomContainer.removeEventListener('touchend', this.handleTouchEnd);
      zoomContainer.removeEventListener('touchmove', this.handleTouchMove);
    }
  };

  _proto.render = function render() {
    return /*#__PURE__*/_createElement("span", null, _ref, /*#__PURE__*/_createElement(RotateControlPot, {
      onTouchStart: this.handleTouchStart,
      "data-role": PluginRoles.imageSingleRotator
    }), this.renderRotateNumber());
  };

  return ImageRotate;
}(React.Component);

export default ImageRotate;
//# sourceMappingURL=imageRotate.js.map