import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import ReactDOM from 'react-dom';
import { calcRotationObj, normalizeAngle, getBoundingRelativeRect, getRelativeMouseEvent } from '@ali/4ever-utils';
import { PluginRoles } from '@ali/4ever-bamboo';
import { EditorRotateHolder, RotateCursorWrapper, RotateCursorIcon, RotateCursorNumber, DisableCursor, rotateIcon, rotateIcon2x } from "./styled";
import fitRotate from "../utils/fitRotate"; // 旋转光标未旋转时，其视觉上应该平行于 x 轴，以下常量用于矫正角度

var ROTATE_CURSOR_OFFSET = -45;

var _ref = /*#__PURE__*/_createElement(DisableCursor, null);

var ImageRotateHolder = function ImageRotateHolder(props) {
  var angle = props.angle,
      getZoomContainer = props.getZoomContainer,
      onEnterRotationMode = props.onEnterRotationMode,
      width = props.width,
      height = props.height,
      _props$rotation = props.rotation,
      rotation = _props$rotation === void 0 ? 0 : _props$rotation,
      rotateImageFrame = props.rotateImageFrame,
      scale = props.scale,
      handleRotate = props.handleRotate,
      isHide = props.isHide;
  var originX = React.useRef(0);
  var originY = React.useRef(0);
  var currentX = React.useRef(0);
  var currentY = React.useRef(0);
  var rotateHolder = React.useRef(null);
  var customCursorWrapper = React.useRef(null);
  var customCursorIcon = React.useRef(null);
  var rotationNumber = React.useRef(null);

  var _React$useState = React.useState(0),
      translateX = _React$useState[0],
      setTranslateX = _React$useState[1];

  var _React$useState2 = React.useState(0),
      translateY = _React$useState2[0],
      setTranslateY = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      isHolderRotating = _React$useState3[0],
      setIsHolderRotating = _React$useState3[1];

  var _React$useState4 = React.useState(false),
      isMouseEnterHolder = _React$useState4[0],
      setMouseEnterHolder = _React$useState4[1];

  React.useEffect(function () {
    var _calcRotationObj = calcRotationObj(width, height, rotation),
        newTranslateX = _calcRotationObj.translateX,
        newTranslateY = _calcRotationObj.translateY;

    setTranslateX(newTranslateX);
    setTranslateY(newTranslateY);
  }, [width, height, rotation]);
  var updateCursor = React.useCallback(function (e, newRotate) {
    if (customCursorWrapper.current) {
      customCursorIcon.current.style.transform = "rotate(" + (newRotate + angle - ROTATE_CURSOR_OFFSET) + "deg)";
      customCursorWrapper.current.style.left = e.clientX + "px";
      customCursorWrapper.current.style.top = e.clientY + "px";
    }
  }, [angle]);
  var onRotateStart = React.useCallback(function (relativeEvent) {
    onEnterRotationMode();
    setIsHolderRotating(true);
    originX.current = relativeEvent.relativeX;
    originY.current = relativeEvent.relativeY;
    currentX.current = relativeEvent.relativeX;
    currentY.current = relativeEvent.relativeY;
  }, [onEnterRotationMode]);
  var onRotateMove = React.useCallback(function (relativeEvent, container, e) {
    if (!rotateImageFrame) return;
    currentX.current = relativeEvent.relativeX;
    currentY.current = relativeEvent.relativeY;
    var rect = getBoundingRelativeRect(rotateImageFrame, container);
    var objX = rect.left + rect.width / 2;
    var objY = rect.top + rect.height / 2;
    var x1 = originX.current - objX;
    var y1 = originY.current - objY;
    var x2 = currentX.current - objX;
    var y2 = currentY.current - objY;
    var triangleTop = x1 * y2 - x2 * y1;
    var triangleBottom = x1 * x2 + y1 * y2;
    var arc = Math.atan2(triangleTop, triangleBottom) * 180 / Math.PI;
    var newRotate = normalizeAngle(rotation + arc);
    newRotate = fitRotate(newRotate);
    rotateImageFrame.style.transform = "translate(" + translateX * scale + "px, " + translateY * scale + "px) rotate(" + newRotate + "deg)";
    rotationNumber.current.innerText = newRotate.toFixed(Number.isInteger(newRotate) ? 0 : 1) + "\xB0";
    updateCursor(e, newRotate);
  }, [rotation, rotateImageFrame, scale, translateX, translateY, updateCursor]);
  var onRotateEnd = React.useCallback(function () {
    var newRotate = null;

    if (rotateImageFrame) {
      var zoomContainer = getZoomContainer();

      if (originX.current !== currentX.current || originY.current !== currentY.current) {
        var rect = getBoundingRelativeRect(rotateImageFrame, zoomContainer);
        var objX = rect.left + rect.width / 2;
        var objY = rect.top + rect.height / 2;
        var x1 = originX.current - objX;
        var y1 = originY.current - objY;
        var x2 = currentX.current - objX;
        var y2 = currentY.current - objY;
        var triangleTop = x1 * y2 - x2 * y1;
        var triangleBottom = x1 * x2 + y1 * y2;
        var arc = Math.atan2(triangleTop, triangleBottom) * 180 / Math.PI;
        newRotate = normalizeAngle(rotation + arc);
        newRotate = fitRotate(newRotate);
      }
    }

    handleRotate(newRotate, function () {
      return setIsHolderRotating(false);
    });
    originX.current = 0;
    originY.current = 0;
    currentX.current = 0;
    currentY.current = 0;
  }, [handleRotate, rotateImageFrame, rotation, getZoomContainer]);
  var handleMouseMove = React.useCallback(function (e) {
    e.preventDefault();
    e.stopPropagation();
    if (!rotateImageFrame) return;
    var zoomContainer = getZoomContainer();
    var relativeEvent = getRelativeMouseEvent(e, zoomContainer);
    onRotateMove(relativeEvent, zoomContainer, e);
  }, [getZoomContainer, onRotateMove, rotateImageFrame]);
  var handleMouseUp = React.useCallback(function (e) {
    e.preventDefault();
    e.stopPropagation();
    onRotateEnd();
  }, [onRotateEnd]);
  var handleMouseDown = React.useCallback(function (e) {
    e.preventDefault();
    e.stopPropagation();
    var zoomContainer = getZoomContainer();

    if (!zoomContainer) {
      return;
    }

    var relativeEvent = getRelativeMouseEvent(e, zoomContainer);
    onRotateStart(relativeEvent);
  }, [getZoomContainer, onRotateStart]);
  React.useEffect(function () {
    if (isHolderRotating) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return function () {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [handleMouseUp, handleMouseMove, isHolderRotating]);
  React.useEffect(function () {
    return function () {
      // 销毁时必须重置父组件中 isRotating 的状态
      handleRotate(null);
    };
  }, [handleRotate]);
  var handleMouseMoveInHolder = React.useCallback(function (e) {
    if (isHolderRotating) {
      return;
    }

    updateCursor(e, rotation);
  }, [updateCursor, isHolderRotating, rotation]);
  var handleMouseLeave = React.useCallback(function () {
    setMouseEnterHolder(false);
  }, []);
  var handleMouseEnter = React.useCallback(function () {
    setMouseEnterHolder(true);
  }, []);
  React.useEffect(function () {
    if (isMouseEnterHolder) {
      var _rotateHolder$current;

      (_rotateHolder$current = rotateHolder.current) == null ? void 0 : _rotateHolder$current.addEventListener('mousemove', handleMouseMoveInHolder);
    }

    return function () {
      var _rotateHolder$current2;

      (_rotateHolder$current2 = rotateHolder.current) == null ? void 0 : _rotateHolder$current2.removeEventListener('mousemove', handleMouseMoveInHolder);
    };
  }, [isMouseEnterHolder, handleMouseMoveInHolder]);
  return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(EditorRotateHolder, {
    onMouseDown: handleMouseDown,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    angle: angle,
    ref: rotateHolder,
    isHide: isHide,
    role: "rotator",
    "data-role": "" + PluginRoles.imageRotator + angle
  }), (isMouseEnterHolder || isHolderRotating) && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_createElement(RotateCursorWrapper, {
    ref: customCursorWrapper
  }, /*#__PURE__*/_createElement(RotateCursorIcon, {
    ref: customCursorIcon,
    rotation: Number(rotation) + angle - ROTATE_CURSOR_OFFSET
  }, /*#__PURE__*/_createElement("img", {
    src: rotateIcon,
    srcSet: rotateIcon2x + " 2x"
  })), /*#__PURE__*/_createElement(RotateCursorNumber, {
    ref: rotationNumber,
    rotating: isHolderRotating
  })), document.body), (isMouseEnterHolder || isHolderRotating) && _ref);
};

export default ImageRotateHolder;
//# sourceMappingURL=imageRotateHolder.js.map