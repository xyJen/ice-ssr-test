import { ImagePlugin } from '@ali/4ever-bamboo';
import { Commands, Inline, Text } from '@ali/4ever-cangjie';
import logger from '@ali/4ever-logger';
import { isSupportImageOrientation } from '@ali/4ever-plugin-image';
import { requestIdleCallback, generateKey } from '@ali/4ever-utils';
import setInjection from "../commands/setInjection";
var PAGE_WIDTH = ImagePlugin.PAGE_WIDTH,
    updateInlineImage = ImagePlugin.updateInlineImage,
    DEFAULT_HEIGHT = ImagePlugin.DEFAULT_HEIGHT,
    DEFAULT_WIDTH = ImagePlugin.DEFAULT_WIDTH;
export default function insertImage(imageState) {
  return function (controller, src) {
    var img = new Image();
    var timer = null;
    var id = generateKey();
    var imageData = {
      id: id,
      width: DEFAULT_WIDTH,
      height: DEFAULT_HEIGHT,
      rotation: 0,
      // 标示 ASL 正确的图片
      src: null
    };
    var image = Inline.create({
      type: 'image',
      data: imageData,
      nodes: [Text.create()]
    });
    imageState[image.key] = {
      isInserting: true
    };
    controller.setOpRelatedId(image.key).command(Commands.insertInline, image).command(Commands.moveToStartOfNextText).command(Commands.insertBlock, 'paragraph').command(Commands.focus);

    img.onload = function () {
      timer && clearTimeout(timer);
      var nodeData = {
        src: src
      }; // 不支持 image-orientation 的浏览器，获取的图片宽高可能是反的

      if (isSupportImageOrientation()) {
        var width = img.naturalWidth,
            height = img.naturalHeight;

        if (width > PAGE_WIDTH) {
          height = PAGE_WIDTH / width * height;
          width = PAGE_WIDTH;
        }

        nodeData.width = width;
        nodeData.height = height;
      } else {
        nodeData.width = undefined;
        nodeData.height = undefined;
      }

      controller.setOpRelatedId(image.key);
      updateInlineImage(controller, image, nodeData);
      imageState[image.key] = {
        isInserting: false
      };
      requestIdleCallback(function () {
        logger.info({
          type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',
          status: 'success'
        });
      });
    };

    img.onerror = function (error) {
      timer && clearTimeout(timer);
      var isValidURL = true;

      try {
        // eslint-disable-next-line no-new
        new URL(src);
      } catch (e) {
        isValidURL = false;
      }

      logger.info({
        type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',
        status: 'error',
        invalidSrc: isValidURL ? '' : src,
        error: error
      });
      setInjection(controller, image, {
        isError: true
      });
    };

    img.src = src;
    timer = setTimeout(function () {
      logger.info({
        type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',
        status: 'timeout'
      });
    }, 5000);
    return controller;
  };
}
//# sourceMappingURL=insertImage.js.map