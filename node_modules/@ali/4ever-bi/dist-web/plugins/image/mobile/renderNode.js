import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { isEmpty } from 'lodash-es';
import { ImagePlugin } from '@ali/4ever-bamboo';
import { ImgMobileContent, ImgMobileMeta } from "./styled";
import { selectImage } from "../actions";
export default function createRenderNode(imageConfig, state) {
  return {
    image: function image(props, controller) {
      var _state$id;

      var children = props.children,
          attributes = props.attributes,
          isSelected = props.isSelected,
          node = props.node;
      var key = node.key;
      var _node$data = node.data,
          isError = _node$data.isError,
          id = _node$data.id;
      var pluginState = state[key];
      var isInserting = (pluginState == null ? void 0 : pluginState.isInserting) && !isError;
      var isTransferring = pluginState == null ? void 0 : pluginState.isTransferring;
      var uploadPlaceholder = (_state$id = state[id]) == null ? void 0 : _state$id.url;
      var selection = controller.value.selection;
      var isImageSelected = isSelected && selection.isCollapsed && controller.value.isFocused;
      var renderExtraNode = imageConfig.renderExtraNode;

      if (isEmpty(node.data)) {
        var _imageConfig$locale;

        return /*#__PURE__*/_createElement(ImagePlugin.InlinePlaceholder, {
          onClick: function onClick(e) {
            e.stopPropagation();
            e.preventDefault(); // Blur 状态下不响应

            if (controller.value.isBlurred) return;
            controller.run('onCangjieBlur');
            controller.run('onAction', selectImage(node.key));
          }
        }, (imageConfig == null ? void 0 : (_imageConfig$locale = imageConfig.locale) == null ? void 0 : _imageConfig$locale.placeholder) || 'Image');
      }

      return /*#__PURE__*/_createElement(ImgMobileContent, attributes, children(), /*#__PURE__*/_createElement(ImgMobileMeta, {
        className: isImageSelected ? 'show-highlight' : undefined
      }, /*#__PURE__*/_createElement(ImagePlugin.MobileImage, {
        node: node,
        controller: controller,
        imageConfig: imageConfig,
        readonly: false,
        isSelected: isImageSelected,
        isInserting: isInserting,
        isTransferring: isTransferring,
        uploadPlaceholder: uploadPlaceholder
      }), renderExtraNode && renderExtraNode(node, isSelected)));
    }
  };
}
//# sourceMappingURL=renderNode.js.map