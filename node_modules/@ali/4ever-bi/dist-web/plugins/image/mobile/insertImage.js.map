{"version":3,"sources":["../../../../../src/plugins/image/mobile/insertImage.ts"],"names":["ImagePlugin","Commands","Inline","Text","logger","isSupportImageOrientation","requestIdleCallback","generateKey","setInjection","PAGE_WIDTH","updateInlineImage","DEFAULT_HEIGHT","DEFAULT_WIDTH","insertImage","imageState","controller","src","img","Image","timer","id","imageData","width","height","rotation","image","create","type","data","nodes","key","isInserting","setOpRelatedId","command","insertInline","moveToStartOfNextText","insertBlock","focus","onload","clearTimeout","nodeData","naturalWidth","naturalHeight","undefined","info","status","onerror","error","isValidURL","URL","e","invalidSrc","isError","setTimeout"],"mappings":"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","sourcesContent":["import { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Controller, Commands, Inline, Text } from '@ali/4ever-cangjie';\nimport logger from '@ali/4ever-logger';\nimport { isSupportImageOrientation } from '@ali/4ever-plugin-image';\nimport { requestIdleCallback, generateKey } from '@ali/4ever-utils';\nimport setInjection from '../commands/setInjection';\n\nconst { PAGE_WIDTH, updateInlineImage, DEFAULT_HEIGHT, DEFAULT_WIDTH } = ImagePlugin;\n\nexport default function insertImage(imageState: Record<string, any>) {\n  return (controller: Controller, src: string) => {\n    const img = new Image();\n    let timer: ReturnType<typeof setTimeout> | null = null;\n    const id = generateKey();\n    const imageData = {\n      id,\n      width: DEFAULT_WIDTH,\n      height: DEFAULT_HEIGHT,\n      rotation: 0, // 标示 ASL 正确的图片\n      src: null,\n    };\n    const image = Inline.create({\n      type: 'image',\n      data: imageData,\n      nodes: [Text.create()],\n    });\n    imageState[image.key] = {\n      isInserting: true,\n    };\n    controller\n      .setOpRelatedId(image.key)\n      .command(Commands.insertInline, image)\n      .command(Commands.moveToStartOfNextText)\n      .command(Commands.insertBlock, 'paragraph')\n      .command(Commands.focus);\n    img.onload = () => {\n      timer && clearTimeout(timer);\n      const nodeData: { src: string; width?: number; height?: number } = {\n        src,\n      };\n      // 不支持 image-orientation 的浏览器，获取的图片宽高可能是反的\n      if (isSupportImageOrientation()) {\n        let { naturalWidth: width, naturalHeight: height } = img;\n        if (width > PAGE_WIDTH) {\n          height = PAGE_WIDTH / width * height;\n          width = PAGE_WIDTH;\n        }\n        nodeData.width = width;\n        nodeData.height = height;\n      } else {\n        nodeData.width = undefined;\n        nodeData.height = undefined;\n      }\n      controller.setOpRelatedId(image.key);\n      updateInlineImage(controller, image, nodeData);\n      imageState[image.key] = {\n        isInserting: false,\n      };\n      requestIdleCallback(() => {\n        logger.info({\n          type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',\n          status: 'success',\n        });\n      });\n    };\n    img.onerror = (error) => {\n      timer && clearTimeout(timer);\n      let isValidURL = true;\n      try {\n        // eslint-disable-next-line no-new\n        new URL(src);\n      } catch (e) {\n        isValidURL = false;\n      }\n      logger.info({\n        type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',\n        status: 'error',\n        invalidSrc: isValidURL ? '' : src,\n        error,\n      });\n      setInjection(controller, image, {\n        isError: true,\n      });\n    };\n    img.src = src;\n    timer = setTimeout(() => {\n      logger.info({\n        type: 'IMAGE_LOAD_AFTER_UPLOAD_IN_MOBILE',\n        status: 'timeout',\n      });\n    }, 5000);\n    return controller;\n  };\n}\n"],"file":"insertImage.js"}