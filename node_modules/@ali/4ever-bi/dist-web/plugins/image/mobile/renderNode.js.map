{"version":3,"sources":["../../../../../src/plugins/image/mobile/renderNode.tsx"],"names":["React","isEmpty","ImagePlugin","ImgMobileContent","ImgMobileMeta","selectImage","createRenderNode","imageConfig","state","image","props","controller","children","attributes","isSelected","node","key","data","isError","id","pluginState","isInserting","isTransferring","uploadPlaceholder","url","selection","value","isImageSelected","isCollapsed","isFocused","renderExtraNode","e","stopPropagation","preventDefault","isBlurred","run","locale","placeholder","undefined"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAGA,SAASC,gBAAT,EAA2BC,aAA3B;AACA,SAASC,WAAT;AAEA,eAAe,SAASC,gBAAT,CAA0BC,WAA1B,EAA0DC,KAA1D,EAAiE;AAC9E,SAAO;AACLC,IAAAA,KAAK,EAAE,eAACC,KAAD,EAAiCC,UAAjC,EAAgD;AAAA;;AAAA,UAC7CC,QAD6C,GACFF,KADE,CAC7CE,QAD6C;AAAA,UACnCC,UADmC,GACFH,KADE,CACnCG,UADmC;AAAA,UACvBC,UADuB,GACFJ,KADE,CACvBI,UADuB;AAAA,UACXC,IADW,GACFL,KADE,CACXK,IADW;AAAA,UAG7CC,GAH6C,GAGrCD,IAHqC,CAG7CC,GAH6C;AAAA,uBAI7BD,IAAI,CAACE,IAJwB;AAAA,UAI7CC,OAJ6C,cAI7CA,OAJ6C;AAAA,UAIpCC,EAJoC,cAIpCA,EAJoC;AAKrD,UAAMC,WAAW,GAAGZ,KAAK,CAACQ,GAAD,CAAzB;AACA,UAAMK,WAAW,GAAG,CAAAD,WAAW,QAAX,YAAAA,WAAW,CAAEC,WAAb,KAA4B,CAACH,OAAjD;AACA,UAAMI,cAAc,GAAGF,WAAH,oBAAGA,WAAW,CAAEE,cAApC;AACA,UAAMC,iBAAiB,gBAAGf,KAAK,CAACW,EAAD,CAAR,qBAAG,UAAWK,GAArC;AARqD,UAS7CC,SAT6C,GAS/Bd,UAAU,CAACe,KAToB,CAS7CD,SAT6C;AAUrD,UAAME,eAAe,GAAGb,UAAU,IAC7BW,SAAS,CAACG,WADS,IAEnBjB,UAAU,CAACe,KAAX,CAAiBG,SAFtB;AAVqD,UAa7CC,eAb6C,GAazBvB,WAbyB,CAa7CuB,eAb6C;;AAerD,UAAI7B,OAAO,CAACc,IAAI,CAACE,IAAN,CAAX,EAAwB;AAAA;;AACtB,4BACE,eAAC,WAAD,CAAa,iBAAb;AACE,UAAA,OAAO,EAAE,iBAACc,CAAD,EAAO;AACdA,YAAAA,CAAC,CAACC,eAAF;AACAD,YAAAA,CAAC,CAACE,cAAF,GAFc,CAGd;;AACA,gBAAItB,UAAU,CAACe,KAAX,CAAiBQ,SAArB,EAAgC;AAChCvB,YAAAA,UAAU,CAACwB,GAAX,CAAe,eAAf;AACAxB,YAAAA,UAAU,CAACwB,GAAX,CAAe,UAAf,EAA2B9B,WAAW,CAACU,IAAI,CAACC,GAAN,CAAtC;AACD;AARH,WAUG,CAAAT,WAAW,QAAX,mCAAAA,WAAW,CAAE6B,MAAb,yCAAqBC,WAArB,KAAoC,OAVvC,CADF;AAcD;;AAED,0BACE,eAAC,gBAAD,EAAsBxB,UAAtB,EACGD,QAAQ,EADX,eAEE,eAAC,aAAD;AACE,QAAA,SAAS,EAAEe,eAAe,GAAG,gBAAH,GAAsBW;AADlD,sBAGE,eAAC,WAAD,CAAa,WAAb;AACE,QAAA,IAAI,EAAEvB,IADR;AAEE,QAAA,UAAU,EAAEJ,UAFd;AAGE,QAAA,WAAW,EAAEJ,WAHf;AAIE,QAAA,QAAQ,EAAE,KAJZ;AAKE,QAAA,UAAU,EAAEoB,eALd;AAME,QAAA,WAAW,EAAEN,WANf;AAOE,QAAA,cAAc,EAAEC,cAPlB;AAQE,QAAA,iBAAiB,EAAEC;AARrB,QAHF,EAaIO,eAAe,IAAIA,eAAe,CAACf,IAAD,EAAOD,UAAP,CAbtC,CAFF,CADF;AAoBD;AArDI,GAAP;AAuDD","sourcesContent":["import * as React from 'react';\nimport { isEmpty } from 'lodash-es';\nimport { ImagePlugin } from '@ali/4ever-bamboo';\nimport { Plugin, Inline, RenderNodeProps } from '@ali/4ever-cangjie';\nimport { ImagePluginConfig } from '../types';\nimport { ImgMobileContent, ImgMobileMeta } from './styled';\nimport { selectImage } from '../actions';\n\nexport default function createRenderNode(imageConfig: ImagePluginConfig, state) {\n  return {\n    image: (props: RenderNodeProps<Inline>, controller) => {\n      const { children, attributes, isSelected, node } = props;\n\n      const { key } = node;\n      const { isError, id } = node.data;\n      const pluginState = state[key];\n      const isInserting = pluginState?.isInserting && !isError;\n      const isTransferring = pluginState?.isTransferring;\n      const uploadPlaceholder = state[id]?.url;\n      const { selection } = controller.value;\n      const isImageSelected = isSelected\n        && selection.isCollapsed\n        && controller.value.isFocused;\n      const { renderExtraNode } = imageConfig;\n\n      if (isEmpty(node.data)) {\n        return (\n          <ImagePlugin.InlinePlaceholder\n            onClick={(e) => {\n              e.stopPropagation();\n              e.preventDefault();\n              // Blur 状态下不响应\n              if (controller.value.isBlurred) return;\n              controller.run('onCangjieBlur');\n              controller.run('onAction', selectImage(node.key));\n            }}\n          >\n            {imageConfig?.locale?.placeholder || 'Image'}\n          </ImagePlugin.InlinePlaceholder>\n        )\n      }\n\n      return (\n        <ImgMobileContent {...attributes}>\n          {children()}\n          <ImgMobileMeta\n            className={isImageSelected ? 'show-highlight' : undefined}\n          >\n            <ImagePlugin.MobileImage\n              node={node}\n              controller={controller}\n              imageConfig={imageConfig}\n              readonly={false}\n              isSelected={isImageSelected}\n              isInserting={isInserting}\n              isTransferring={isTransferring}\n              uploadPlaceholder={uploadPlaceholder}\n            />\n            { renderExtraNode && renderExtraNode(node, isSelected) }\n          </ImgMobileMeta>\n        </ImgMobileContent>\n      );\n    },\n  };\n}\n"],"file":"renderNode.js"}