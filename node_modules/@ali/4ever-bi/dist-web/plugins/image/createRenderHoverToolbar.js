import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { PreviewBetaNormal } from '@ali/we-design';
import { TBItemSlot } from '@ali/we-design-next';
import { IconDownload, IconCutPic, IconRotateLeftLineThin, IconSetting } from '@ali/4ever-component';
import { RestorepictureNormal as ChangePicNormal } from '@ali/we-icon';
import { Commands, Point, Selection } from '@ali/4ever-cangjie';
import { PluginRoles } from '@ali/4ever-bamboo';
import { Image } from '@ali/4ever-mo';
import { normalizeAngle } from '@ali/4ever-utils';
import { setImageInjection } from "./actions";
import { updateImage, toggleImageSidebar } from "./actions";
import { getData } from '@ali/4ever-utils';
import { ImageStyleIconMenu } from "./components/next/ImageStyleIconMenu";
import getImageSize from "./utils/getImageSize";
import { RESTORE_DATA } from "./constants";

var _ref = /*#__PURE__*/_createElement(IconCutPic, null);

var _ref2 = /*#__PURE__*/_createElement(IconDownload, null);

var _ref3 = /*#__PURE__*/_createElement(PreviewBetaNormal, null);

var _ref4 = /*#__PURE__*/_createElement(IconRotateLeftLineThin, null);

var _ref5 = /*#__PURE__*/_createElement(IconSetting, null);

export default function createRenderHoverToolbar(config) {
  var _config$locale = config.locale,
      locale = _config$locale === void 0 ? {} : _config$locale,
      downloadImage = config.downloadImage,
      previewImage = config.previewImage;
  return function (props, controller, getNode) {
    var getImageNode = function getImageNode() {
      var node = getNode();

      if (Image.isImage(node)) {
        return node;
      }

      return null;
    };

    var buttonName = props.buttonName,
        extraProps = props.extraProps;

    switch (buttonName) {
      case 'crop':
        return {
          icon: _ref,
          title: locale == null ? void 0 : locale.cropping,
          tooltip: locale == null ? void 0 : locale.cropping,
          onClick: function onClick() {
            var node = getImageNode();
            if (!Image.isImage(node)) return;
            var anchor = Point.createFromParams(node.getFirstNode().key, 0);
            var newSelection = Selection.create({
              anchor: anchor,
              focus: anchor
            });
            controller.command(Commands.select, newSelection);
            controller.run('onAction', setImageInjection(node.key, {
              isImageCropping: true
            }));
          },
          role: PluginRoles.imageInlineToolbarCrop,
          testid: 'bi-toolbar-image-crop'
        };

      case 'download':
        return downloadImage ? {
          icon: _ref2,
          title: locale == null ? void 0 : locale.downloadImg,
          tooltip: locale == null ? void 0 : locale.downloadImg,
          onClick: function onClick() {
            var _node$data;

            var node = getImageNode();
            var src = node == null ? void 0 : (_node$data = node.data) == null ? void 0 : _node$data.src;
            src && downloadImage(src);
          },
          role: PluginRoles.imageInlineToolbarDownload,
          testid: 'bi-toolbar-image-download'
        } : null;

      case 'preview':
        return previewImage ? {
          icon: _ref3,
          title: locale == null ? void 0 : locale.previewImg,
          tooltip: locale == null ? void 0 : locale.previewImg,
          onClick: function onClick() {
            var _node$data2;

            var node = getImageNode();
            var src = node == null ? void 0 : (_node$data2 = node.data) == null ? void 0 : _node$data2.src;
            src && previewImage(src, node);
          },
          role: PluginRoles.imageInlineToolbarPreview
        } : null;

      case 'rotate':
        return {
          icon: _ref4,
          title: locale == null ? void 0 : locale.rotate90,
          tooltip: locale == null ? void 0 : locale.rotate90,
          onClick: function onClick() {
            var node = getImageNode();
            if (!node) return;
            var rotation = getData(node.data, 'rotation', 0);
            var newRotation = normalizeAngle(rotation - 90);
            controller.run('onAction', updateImage(node, {
              rotation: newRotation
            }));
          },
          role: PluginRoles.imageInlineToolbarRotateReverse,
          testid: 'bi-toolbar-image-rotate'
        };

      case 'options':
        return {
          icon: _ref5,
          title: locale == null ? void 0 : locale.advancedSettings,
          tooltip: locale == null ? void 0 : locale.advancedSettings,
          onClick: function onClick() {
            var node = getImageNode();
            if (!node) return;
            var anchor = Point.createFromParams(node.key, 'before');
            var focus = Point.createFromParams(node.key, 'after');
            var newSelection = Selection.create({
              anchor: anchor,
              focus: focus
            });
            controller.command(Commands.select, newSelection);
            node && controller.run('onAction', toggleImageSidebar({
              node: node,
              toggle: true
            }));
          },
          role: PluginRoles.imageOptions,
          autoClose: true,
          testid: 'bi-toolbar-image-options'
        };

      case 'style':
        var onOverlayVisibleChange = extraProps.onOverlayVisibleChange;
        return /*#__PURE__*/_createElement(TBItemSlot, {
          display: "iconMenu"
        }, /*#__PURE__*/_createElement(ImageStyleIconMenu, {
          controller: controller,
          locale: locale,
          onOverlayVisibleChange: onOverlayVisibleChange,
          getImageNode: getImageNode,
          testid: "bi-toolbar-image-style"
        }));

      case 'reset':
        return {
          icon: /*#__PURE__*/_createElement(ChangePicNormal, {
            style: {
              fontSize: 20
            }
          }),
          title: locale == null ? void 0 : locale.resetTitle,
          tooltip: locale == null ? void 0 : locale.resetTitle,
          onClick: function onClick() {
            var node = getImageNode();
            if (!node) return;
            getImageSize(node.data.src, controller).then(function (_ref6) {
              var width = _ref6.width,
                  height = _ref6.height;

              var newPayload = _extends({
                width: width,
                height: height
              }, RESTORE_DATA);

              controller.run('onAction', updateImage(node, newPayload));
            });
          },
          role: PluginRoles.imageReset,
          testid: 'bi-toolbar-image-reset'
        };

      default:
        return null;
    }
  };
}
//# sourceMappingURL=createRenderHoverToolbar.js.map