import _extends from "@babel/runtime/helpers/extends";
import toolbar from "./toolbar";
import menubar from "./menubar";
import sidebar from "./sidebar";
import createRenderNode from "./createRenderNode";
import createRenderEditable from "./createRenderEditable";
import { DEPRECATED_ACTIONS, actions } from "./actions";
import insertImage from "./commands/insertImage";
import onAction from "./handlers/onAction";
import onQuery from "./handlers/onQuery";
import onDrop from "./handlers/onDrop";
import onCangjiePaste from "./handlers/onCangjiePaste";
import quickInsert from "./quickInsertConfig";
import insertImageFile from "./commands/insertImageFile";
import createOnCommand from "./handlers/onCommand";
import createContextMenu from "./handlers/createContextMenu";
import createRenderHoverToolbar from "./createRenderHoverToolbar";
import createOnCangjieInput from "./handlers/onCangjieInput";
import onKeyDown from "./handlers/onKeyDown";
import * as utils from "./utils";
import { queries } from "./queries";
import createRenderToolbar from "./createRenderToolbar";
import { moFactory } from '@ali/4ever-plugin-image';
var state = {};
export { DEPRECATED_ACTIONS as actions };

function createImagePlugin(config) {
  var imageConfig = config.image || {};
  return _extends({}, moFactory({}), {
    sidebar: sidebar(config),
    toolbar: toolbar(imageConfig),
    menubar: menubar(imageConfig),
    contextMenu: createContextMenu(imageConfig, config.sideBarTrigger),
    renderNode: createRenderNode(imageConfig, state),
    renderEditable: createRenderEditable(imageConfig),
    renderToolbar: createRenderToolbar(imageConfig.locale || {}),
    renderHoverToolbar: createRenderHoverToolbar(imageConfig),
    commands: {
      insertImage: insertImage,
      // @ts-ignore
      insertImageFile: insertImageFile(imageConfig, state)
    },
    queries: queries,
    actions: actions,
    onCommand: createOnCommand(config, state),
    onAction: onAction(config),
    onQuery: onQuery(imageConfig),
    onCangjiePaste: onCangjiePaste(config, state),
    onCangjieInput: createOnCangjieInput(imageConfig, state),
    onDrop: onDrop(imageConfig, state),
    onKeyDown: onKeyDown,
    quickInsert: quickInsert,
    models: {
      klass: 'inline',
      type: 'image'
    }
  });
}

createImagePlugin.actions = DEPRECATED_ACTIONS;
createImagePlugin.utils = utils;
export default createImagePlugin;
//# sourceMappingURL=index.js.map