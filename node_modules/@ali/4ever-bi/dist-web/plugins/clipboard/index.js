import _extends from "@babel/runtime/helpers/extends";
// 兼容
import ClipboardManager from '@ali/clipboard-manager';
import { biFactory, ClipboardPad // actions
, CLIPBOARD_INSERT_FRAGMENT, CLIPBOARD_SET_DECORATIONS, CLIPBOARD_DEL_SELECTION, CLIPBOARD_HIDE_PASTEPANEL, CLIPBOARD_HIDE_CUSTOM_PASTEPANEL, CLIPBOARD_MATCH_MODE, CLIPBOARD_TEXT_MODE, insertFragment, setDecorations, deleteAtRange, hidePastePanel, hideCustomPastePanel, insertMatchFragment, insertTextFragment // handler...
, utils, createOnCangjieCopyOrCut } from '@ali/4ever-plugin-clipboard';

var createClipboardPlugin = function createClipboardPlugin(configs) {
  return biFactory(configs);
};

var actions = {
  CLIPBOARD_INSERT_FRAGMENT: CLIPBOARD_INSERT_FRAGMENT,
  CLIPBOARD_SET_DECORATIONS: CLIPBOARD_SET_DECORATIONS,
  CLIPBOARD_DEL_SELECTION: CLIPBOARD_DEL_SELECTION,
  CLIPBOARD_HIDE_PASTEPANEL: CLIPBOARD_HIDE_PASTEPANEL,
  CLIPBOARD_HIDE_CUSTOM_PASTEPANEL: CLIPBOARD_HIDE_CUSTOM_PASTEPANEL,
  CLIPBOARD_MATCH_MODE: CLIPBOARD_MATCH_MODE,
  CLIPBOARD_TEXT_MODE: CLIPBOARD_TEXT_MODE,
  insertFragment: insertFragment,
  setDecorations: setDecorations,
  deleteAtRange: deleteAtRange,
  hidePastePanel: hidePastePanel,
  hideCustomPastePanel: hideCustomPastePanel,
  insertMatchFragment: insertMatchFragment,
  insertTextFragment: insertTextFragment
};
createClipboardPlugin.actions = actions;
createClipboardPlugin.ClipboardPad = ClipboardPad;
createClipboardPlugin.utils = _extends({}, utils, {
  createOnCangjieCopyOrCut: createOnCangjieCopyOrCut
});
createClipboardPlugin.ClipboardManager = ClipboardManager;
export default createClipboardPlugin;
//# sourceMappingURL=index.js.map