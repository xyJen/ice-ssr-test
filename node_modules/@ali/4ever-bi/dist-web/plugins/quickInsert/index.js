import _extends from "@babel/runtime/helpers/extends";
import { stubFalse } from 'lodash-es';
import biLocale from "../../locales/zh_CN";
import * as actions from "./actions";
import createRenderMark from "./createRenderMark";
import createRenderEditable from "./createRenderEditable";
import onKeyDown from "./handlers/onKeyDown";
import onSelect from "./handlers/onSelect";
import onCommand from "./handlers/onCommand";
import onAction from "./handlers/onAction";
import createOnCangjieInput from "./handlers/createOnCangjieInput";
import isSelectionInQuickInsert from "./queries/isSelectionInQuickInsert";
import getQuickInsertDecoration from "./queries/getQuickInsertDecoration";
import getQuickInsertKeyword from "./queries/getQuickInsertKeyword";
import getQuickInsertPanelPosition from "./queries/getPanelPosition";
import insertPlugin from "./commands/insert";

function createQuickInsertPlugin(configs, plugins) {
  var pluginConfig = _extends({
    triggers: {},
    groups: [],
    getLifeCycle: function getLifeCycle() {},
    locale: biLocale.quickInsert.locale
  }, configs.quickInsert);

  function getItem(item) {
    var key = typeof item === 'string' ? item : item.key;

    if (!configs[key] || !plugins[key] || !plugins[key].quickInsert) {
      // eslint-disable-next-line no-console
      console.warn("can not find [" + item + "]'s `quickInsert` configuration");
      return null;
    }

    var _ref = configs[key] || {},
        locale = _ref.locale;

    var quickInsert = plugins[key].quickInsert;
    var _ref2 = quickInsert,
        renderIcon = _ref2.renderIcon,
        _renderPanel = _ref2.renderPanel,
        onMenuClick = _ref2.onMenuClick;
    return {
      key: key,
      title: locale.quickInsertTitle || key,
      renderIcon: renderIcon,
      renderPanel: function renderPanel(props) {
        return _renderPanel(_extends({}, props, {
          locale: locale
        }));
      },
      onMenuClick: onMenuClick,
      disabled: typeof item === 'string' ? stubFalse : item.disabled || stubFalse
    };
  }

  var groups = pluginConfig.groups.map(function (group) {
    return _extends({}, group, {
      items: (group.items || []).map(getItem).filter(function (item) {
        return !!item;
      })
    });
  });
  var insertMap = groups.reduce(function (map, group) {
    group.items.forEach(function (item) {
      // eslint-disable-next-line no-param-reassign
      map[item.key] = item;
    });
    return map;
  }, {});
  return {
    onCangjieInput: createOnCangjieInput(pluginConfig, insertMap),
    onKeyDown: onKeyDown,
    onSelect: onSelect,
    onCommand: onCommand,
    renderEditable: createRenderEditable(groups, insertMap, pluginConfig),
    renderMark: createRenderMark(),
    onAction: onAction,
    queries: {
      isSelectionInQuickInsert: isSelectionInQuickInsert,
      getQuickInsertDecoration: getQuickInsertDecoration,
      getQuickInsertKeyword: getQuickInsertKeyword,
      getQuickInsertPanelPosition: getQuickInsertPanelPosition
    },
    commands: {
      insertPlugin: insertPlugin
    },
    models: [{
      klass: 'inline',
      type: 'mention'
    }]
  };
}

createQuickInsertPlugin.actions = actions;
export default createQuickInsertPlugin;
//# sourceMappingURL=index.js.map