import React, { useEffect, useMemo, useRef, useState, useCallback } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import ReactDOM from 'react-dom';
import { Commands } from '@ali/4ever-cangjie';
import { useScrollableContainer } from '@ali/4ever-bamboo';
import { ActiveInteractionHooks } from '@ali/4ever-component';
import { theme } from '@ali/we-design';
import Menu from "./menu";
import Panel from "./panel";
import Forbidden from "./forbidden";
import { resetQuickInsert, removeQuickInsert } from "../actions";
import { useOnClickOutside } from '@ali/4ever-component';
import { throttle } from 'lodash-es';
var PANEL_WIDTH = 335;
var PANEL_HEIGHT = 375;
var PanelBox = /*#__PURE__*/styled.div([""]);
var InsertWrapper = /*#__PURE__*/styled.div(["position:absolute;display:flex;flex-direction:column;border:1px solid ", ";box-shadow:", ";border-radius:6px;height:", "px;width:", "px;"], function () {
  return theme.colorLine1;
}, function () {
  return theme.boxShadow;
}, PANEL_HEIGHT, PANEL_WIDTH);
var useActiveInteraction = ActiveInteractionHooks.useActiveInteraction;

var _ref = /*#__PURE__*/_createElement(Forbidden, null);

var QuickInsert = function QuickInsert(props) {
  var text = props.text,
      value = props.value,
      groups = props.groups,
      controller = props.controller,
      insertMap = props.insertMap,
      config = props.config;
  var getLifeCycle = config.getLifeCycle;
  var current = insertMap[value];

  var _useState = useState({
    top: 99999,
    left: 99999
  }),
      position = _useState[0],
      setPosition = _useState[1];

  var left = useRef(0);
  var portalRef = useRef(null);
  var scrollableContainer = useScrollableContainer();
  var close = useCallback(function () {
    controller.run('onAction', removeQuickInsert());
    return controller;
  }, [controller]);

  var _useActiveInteraction = useActiveInteraction(),
      activeType = _useActiveInteraction[0],
      setActiveType = _useActiveInteraction[1];

  var activeRef = React.useRef('');
  activeRef.current = activeType;
  React.useEffect(function () {
    setActiveType('quickInsertMenu');
    return function () {
      if (activeRef.current === 'quickInsertMenu') {
        setActiveType('');
      }
    };
  }, [setActiveType]);
  var updatePosition = useCallback(throttle(function (flag) {
    var _portalRef$current;

    var pos = controller.query('getQuickInsertPanelPosition', {
      controller: controller,
      scrollableContainer: scrollableContainer,
      portalDom: (_portalRef$current = portalRef.current) == null ? void 0 : _portalRef$current.children[0]
    });
    var p = {
      left: typeof flag === 'boolean' ? pos.left : left.current,
      top: pos.top
    };
    setPosition(p);
    left.current = p.left;
  }), [scrollableContainer, config]); // 等待 DOM 渲染完成之后再计算定位

  useEffect(function () {
    updatePosition(true);
    scrollableContainer == null ? void 0 : scrollableContainer.addEventListener('scroll', updatePosition);
    return function () {
      scrollableContainer == null ? void 0 : scrollableContainer.removeEventListener('scroll', updatePosition);
    };
  }, [scrollableContainer]);
  useEffect(function () {
    if (text.length === 1) {
      updatePosition(true);
    }
  }, [text, controller.value]);
  var handleChange = React.useCallback(function (key) {
    controller.run('onAction', resetQuickInsert(key));
    controller.command(Commands.focus);
  }, [controller]);
  useOnClickOutside(portalRef, close);
  useEffect(function () {
    var start = performance.now();
    return function () {
      getLifeCycle && getLifeCycle({
        time: performance.now() - start
      });
    };
  }, [getLifeCycle]);
  var overlay = useMemo(function () {
    return /*#__PURE__*/_createElement(InsertWrapper, {
      style: {
        left: position.left,
        top: position.top,
        zIndex: 999
      }
    }, /*#__PURE__*/_createElement(Menu, {
      groups: groups,
      value: current.key,
      onChange: handleChange,
      editorValue: controller.value
    }), /*#__PURE__*/_createElement(Panel, null, current.disabled(controller.value) ? _ref : current.renderPanel({
      close: close,
      text: text,
      controller: controller,
      from: 'editor'
    })));
  }, [close, controller, current, groups, handleChange, position.left, position.top, text]);
  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_createElement(PanelBox, {
    className: "quick-insert-portal",
    "data-testid": "quick-insert-portal",
    ref: portalRef
  }, overlay), document.body);
};

export default QuickInsert;
//# sourceMappingURL=quickInsertTrigger.js.map