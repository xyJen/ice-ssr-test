import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ScriptSelect } from '@ali/we-toolbar';
import { PluginRoles } from '@ali/4ever-bamboo';
;
import { toggleSub, toggleSup } from "../actions";
import { getHotKeyTips } from "../utils";
;
export default function SubButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var isSubActive = controller.query('isSub');
  var tips = {
    "super": getHotKeyTips('sup', locale),
    sub: getHotKeyTips('sub', locale)
  };
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInMention') || controller.query('isSelectionInLink') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  var handleChange = React.useCallback(function (value) {
    controller.run('onAction', value === 'sub' ? toggleSub() : toggleSup());
  }, [controller]);
  var status = isSubActive ? 'sub' : 'super';
  var tip = isSubActive ? tips.sub : tips["super"];
  return /*#__PURE__*/_createElement(ScriptSelect, _extends({}, rest, {
    testid: "bi-toolbar-" + status,
    title: tip,
    value: status,
    disabled: !!isDisabled,
    onClick: handleChange,
    role: PluginRoles.vertAlign
  }));
}
//# sourceMappingURL=groupButton.js.map