import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ScriptSplit } from '@ali/4ever-component';
import { PluginRoles } from '@ali/4ever-bamboo';
import { toggleSup, toggleSub } from "../../actions";
import { SHORTCUT } from "../../utils";
export default function ScriptSplitButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var isSup = controller.query('isSup');
  var isSub = controller.query('isSub');
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInMention') || controller.query('isSelectionInLink') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  var onScriptChange = React.useCallback(function (value) {
    controller.run('onAction', value === 'sub' ? toggleSub() : toggleSup());
  }, [controller]);
  var supItem = React.useMemo(function () {
    return {
      title: (locale == null ? void 0 : locale.supButtonTitle) || '',
      shortCut: SHORTCUT.sup,
      description: "Markdown: ^" + ((locale == null ? void 0 : locale.text) || 'Text') + "^ " + ((locale == null ? void 0 : locale.space) || 'Space')
    };
  }, []);
  var subItem = React.useMemo(function () {
    return {
      title: (locale == null ? void 0 : locale.subButtonTitle) || '',
      shortCut: SHORTCUT.sub,
      description: "Markdown: ~" + ((locale == null ? void 0 : locale.text) || 'Text') + "~ " + ((locale == null ? void 0 : locale.space) || 'Space')
    };
  }, []);
  var curScript = isSub ? 'sub' : isSup ? 'super' : undefined;
  return /*#__PURE__*/_createElement(ScriptSplit, _extends({
    testid: "bi-toolbar-script",
    disabled: !!isDisabled,
    onScriptChange: onScriptChange,
    curScript: curScript,
    role: PluginRoles.vertAlign,
    subItem: subItem,
    supItem: supItem
  }, rest));
}
//# sourceMappingURL=scriptSplitButton.js.map