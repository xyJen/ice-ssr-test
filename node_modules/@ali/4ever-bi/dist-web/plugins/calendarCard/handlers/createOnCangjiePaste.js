import _regeneratorRuntime from "@babel/runtime/regenerator";
import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { isEmpty } from 'lodash-es';
import { CalendarType } from "../types";
export default function createOnCangjiePaste(config) {
  var _config$calendarCard = config.calendarCard,
      calendarCardConfig = _config$calendarCard === void 0 ? {} : _config$calendarCard;
  var mode = calendarCardConfig.mode;
  return /*#__PURE__*/function () {
    var _onCangjiePaste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, controller, next) {
      var clipboardData, fragment, isShanhui, calendarNodes, newFragment;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              clipboardData = controller.query('getClipboardData', event);
              fragment = clipboardData == null ? void 0 : clipboardData.getFragment();

              if (fragment) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", next());

            case 4:
              isShanhui = mode === CalendarType.SHANHUI;
              calendarNodes = fragment.nodes.filter(function (block) {
                return block.data.cardType === 'calendar';
              });

              if (!isEmpty(calendarNodes)) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("return", next());

            case 8:
              newFragment = fragment.set('nodes', fragment.nodes.map(function (block) {
                if (block.data.cardType === 'calendar') {
                  return block.set('data', _extends({}, block.data, {
                    height: isShanhui ? 75 : 102
                  }));
                }

                return block;
              }));
              controller.command("insertFragmentByClipboard", newFragment);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function onCangjiePaste(_x, _x2, _x3) {
      return _onCangjiePaste.apply(this, arguments);
    }

    return onCangjiePaste;
  }();
}
//# sourceMappingURL=createOnCangjiePaste.js.map