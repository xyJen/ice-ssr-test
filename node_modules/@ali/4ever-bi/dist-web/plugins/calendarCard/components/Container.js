import React, { useCallback, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { isNumber, throttle, memoize } from 'lodash-es';
import classnames from 'classnames';
import { CalendarCardPlugin } from '@ali/4ever-bamboo';
import { JumpToCalendarEventType } from "../types";
var SubjectPlaceholder = CalendarCardPlugin.SubjectPlaceholder,
    TimePlaceholder = CalendarCardPlugin.TimePlaceholder,
    SubjectParagraph = CalendarCardPlugin.SubjectParagraph,
    TimeTextParagraph = CalendarCardPlugin.TimeTextParagraph,
    PlaceTextParagraph = CalendarCardPlugin.PlaceTextParagraph,
    ReceiversParagraph = CalendarCardPlugin.ReceiversParagraph,
    CommentTextParagraph = CalendarCardPlugin.CommentTextParagraph,
    LoadingWrapper = CalendarCardPlugin.LoadingWrapper,
    ContainerWrapper = CalendarCardPlugin.ContainerWrapper,
    BodyWrapper = CalendarCardPlugin.BodyWrapper,
    ExtraArea = CalendarCardPlugin.ExtraArea,
    CommentTextWrapper = CalendarCardPlugin.CommentTextWrapper,
    CALENDAR_CARD_MAX_RECEIVER_WIDTH = CalendarCardPlugin.CALENDAR_CARD_MAX_RECEIVER_WIDTH,
    CALENDAR_CARD_PADDING_LEN = CalendarCardPlugin.CALENDAR_CARD_PADDING_LEN;

var renderLoadingWrapper = function renderLoadingWrapper(props) {
  var widthRange = props.widthRange,
      isLoading = props.isLoading,
      text = props.text;
  if (isLoading && !text) return /*#__PURE__*/_createElement(LoadingWrapper, {
    widthRange: widthRange
  });
  return text || null;
};

var throttleHandleStopPropagation = throttle(function (event) {
  event.stopPropagation();
}, 150, {
  leading: true
});
var Container = /*#__PURE__*/React.memo(function (props) {
  var locale = props.locale,
      metadata = props.metadata,
      width = props.width,
      isSelected = props.isSelected,
      jumpToCalendar = props.jumpToCalendar,
      openProfile = props.openProfile,
      refresh = props.refresh,
      isMobile = props.isMobile,
      isFirstLoaded = props.isFirstLoaded,
      isLoading = props.isLoading,
      isChangeData = props.isChangeData,
      refreshTipsNode = props.refreshTipsNode,
      handleCreateCalendar = props.handleCreateCalendar,
      createCalendarBtn = props.createCalendarBtn;
  var currentLoading = isLoading;
  if (isMobile || isFirstLoaded) currentLoading = false;

  var _ref = metadata || {},
      time = _ref.time,
      place = _ref.place,
      comment = _ref.comment,
      _ref$subject = _ref.subject,
      subject = _ref$subject === void 0 ? '' : _ref$subject,
      isPlaceholder = _ref.isPlaceholder;

  var _ref2 = locale || {},
      viewCalendardetails = _ref2.viewCalendardetails,
      refreshToast = _ref2.refresh,
      refreshTips = _ref2.refreshTips;

  var innerWidth = width === undefined || isMobile ? 'auto' : width - CALENDAR_CARD_PADDING_LEN * 2;
  var subjectRange = isNumber(width) ? width : CALENDAR_CARD_MAX_RECEIVER_WIDTH;
  var containerStyle = useMemo(function () {
    return {
      height: 'auto',
      width: 'auto'
    };
  }, []);
  var jumpToCalendarFactory = useCallback(memoize(function (eventType) {
    return function () {
      if (isPlaceholder && handleCreateCalendar && JumpToCalendarEventType.DOUBLECLICK === eventType) {
        handleCreateCalendar();
        return;
      }

      if (!jumpToCalendar) return;
      jumpToCalendar(eventType);
    };
  }), [isPlaceholder, handleCreateCalendar, jumpToCalendar]); // FIX: 鼠标松开后卡片内选区消失的问题

  var handleStopPropagation = useCallback(function (event) {
    event.persist();
    throttleHandleStopPropagation(event);
  }, []);
  var className = React.useMemo(function () {
    return classnames({
      'card-calendar-selected': isSelected,
      placeholder: isPlaceholder
    });
  }, [isPlaceholder, isSelected]);
  var subjectNode = isPlaceholder ? /*#__PURE__*/_createElement(SubjectPlaceholder, {
    onClick: handleCreateCalendar
  }, subject) : subject; // 移动端增加 20px间距

  var subjectInnerWidth = isMobile ? "calc(100% - " + (CALENDAR_CARD_PADDING_LEN * 2 + 20) + "px)" : innerWidth;
  var timeNode = isPlaceholder ? /*#__PURE__*/_createElement(TimePlaceholder, {
    onClick: handleCreateCalendar
  }, time) : time;
  return /*#__PURE__*/_createElement(ContainerWrapper, {
    className: className,
    style: containerStyle,
    onDoubleClick: jumpToCalendarFactory(JumpToCalendarEventType.DOUBLECLICK),
    onMouseDown: handleStopPropagation,
    onClick: handleStopPropagation
  }, /*#__PURE__*/_createElement(BodyWrapper, null, /*#__PURE__*/_createElement(SubjectParagraph, {
    isPlaceholder: isPlaceholder,
    innerWidth: subjectInnerWidth,
    subject: renderLoadingWrapper({
      widthRange: subjectRange * 0.75 + "px",
      isLoading: currentLoading,
      text: subjectNode
    }),
    jumpToCalendar: jumpToCalendarFactory(JumpToCalendarEventType.TITLE)
  }), /*#__PURE__*/_createElement(TimeTextParagraph, null, renderLoadingWrapper({
    widthRange: '50%',
    isLoading: currentLoading,
    text: timeNode
  })), isPlaceholder ? null : /*#__PURE__*/_createElement(PlaceTextParagraph, null, renderLoadingWrapper({
    widthRange: '50%',
    isLoading: currentLoading,
    text: place
  })), /*#__PURE__*/_createElement(ReceiversParagraph, {
    isLoading: currentLoading,
    locale: locale,
    metadata: metadata,
    innerWidth: innerWidth,
    openProfile: isPlaceholder ? handleCreateCalendar : openProfile,
    jumpToCalendar: jumpToCalendarFactory(JumpToCalendarEventType.RECEIVER)
  }), comment ? /*#__PURE__*/_createElement(CommentTextParagraph, null, /*#__PURE__*/_createElement(CommentTextWrapper, null, comment)) : null, /*#__PURE__*/_createElement(ExtraArea, {
    tipsNode: refreshTipsNode,
    isOnlyRefresh: isMobile,
    isLoading: isLoading,
    isPlaceholder: isPlaceholder,
    createCalendarBtn: createCalendarBtn,
    isChangeData: isChangeData,
    viewCalendardetails: viewCalendardetails,
    refreshToast: refreshToast,
    refreshTips: refreshTips,
    jumpToCalendar: jumpToCalendarFactory(JumpToCalendarEventType.ICON),
    refreshCalendar: refresh
  })));
});
export default Container;
//# sourceMappingURL=Container.js.map