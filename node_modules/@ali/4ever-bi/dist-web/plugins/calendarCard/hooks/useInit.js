import _regeneratorRuntime from "@babel/runtime/regenerator";
import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { useCallback, useEffect } from 'react';
import { isNil } from 'lodash-es';
import Debug from 'debug';
import { calculatedCalendarSize, getCalculatedCalendarReceivers } from "../shanhui/calculatedCalendarSize";
import { CalendarType } from "../types";
import { setCardData } from '@ali/4ever-factory';
import { calculatedSize, getCalculatedReceivers } from "../utils/calculatedSize";
import { CalendarCardPlugin } from '@ali/4ever-bamboo';
import isEqualValue from "../utils/isEqualValue";
var CALENDAR_CARD_MAX_HEIGHT = CalendarCardPlugin.CALENDAR_CARD_MAX_HEIGHT;
var debug = Debug('EDITOR:BI:CALENDAR:RENDER'); // 首次加载最大刷新次数，限制 retry 次数

var MAX_FIRSTLOADED_REFRESH_COUNT = 2;
var RETRY_TIMES = new Map();
export default function useInit(props) {
  var isInitialized = props.isInitialized,
      isPlaceholder = props.isPlaceholder,
      containerWidthInPC = props.containerWidthInPC,
      isLoading = props.isLoading,
      isFirstLoaded = props.isFirstLoaded,
      isMobile = props.isMobile,
      calendarId = props.calendarId,
      setLoading = props.setLoading,
      refresh = props.refresh,
      controller = props.controller,
      node = props.node,
      finalMetadata = props.finalMetadata,
      finalData = props.finalData,
      injectToData = props.injectToData,
      setRefreshResult = props.setRefreshResult,
      onInitData = props.onInitData,
      mode = props.mode;
  var isShanhui = mode === CalendarType.SHANHUI;
  var shouldLoadAtFirst = useCallback(function () {
    debug('SHOULDLOADATFIRST', isInitialized, isPlaceholder, containerWidthInPC, isLoading, isFirstLoaded); // placeholder 状态不发出请求

    if (isPlaceholder) return false; // 移动端首次打开应初始化日程数据

    if (isMobile && !isInitialized && !isLoading) return true; // 打开后已首次加载过不再刷新

    if (isFirstLoaded) return false; // 避免重复请求

    if (isLoading) return false; // 闪会场景下自动更新数据

    if (isShanhui) return true; // 未初始化日程允许发起请求获取最新数据

    if (!isInitialized) return true; // 移动端不主动刷新 - 只在首次加载后刷新数据

    if (isMobile) return false; // 闪会日程卡片的刷新tips全部先去掉，另提需求优化刷新逻辑

    if (isShanhui && isInitialized) return false; // 缺少编辑器容器宽度不刷新请求

    return !isNil(containerWidthInPC);
  }, [isInitialized, isPlaceholder, containerWidthInPC, isLoading, isFirstLoaded, isMobile, isShanhui]);
  useEffect(function () {
    var nodeKey = node.key;
    return function () {
      if (RETRY_TIMES.has(nodeKey)) {
        RETRY_TIMES["delete"](nodeKey);
      }
    };
  }, [node]);
  useEffect(function () {
    if (!calendarId) return;
    if (!refresh) return;
    if (!shouldLoadAtFirst()) return;
    debug('INIT-PARAMS', calendarId, isPlaceholder, isFirstLoaded, isLoading, isInitialized, isMobile);
    var key = node.key,
        data = node.data;

    if (RETRY_TIMES.has(key)) {
      var currentTime = RETRY_TIMES.get(key) + 1; // 控制 retry 次数

      if (currentTime > MAX_FIRSTLOADED_REFRESH_COUNT) {
        return;
      }

      RETRY_TIMES.set(key, currentTime);
    } else {
      RETRY_TIMES.set(key, 1);
    }

    setLoading(true);
    debug('INIT', calendarId);
    refresh(calendarId).then( /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(res) {
        var newMetadata, getTopReceivers, calculateHeight, newHeight, isInValidHeight;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(res.status !== 'success')) {
                  _context.next = 6;
                  break;
                }

                setRefreshResult(res);
                controller.run('onAction', setCardData(node, {
                  metadata: _extends({}, data.metadata, {
                    isInitialized: true
                  }),
                  withoutSaving: true
                }));
                injectToData({
                  injectionHeight: undefined,
                  injectionMetadata: undefined,
                  isFirstLoaded: true
                });
                debug('INIT:ERROR', res);
                return _context.abrupt("return");

              case 6:
                newMetadata = res.data;
                getTopReceivers = isShanhui ? getCalculatedCalendarReceivers : getCalculatedReceivers;
                _context.t0 = _extends;
                _context.t1 = {};
                _context.t2 = newMetadata;
                _context.t3 = mode;
                _context.next = 14;
                return getTopReceivers(newMetadata, containerWidthInPC, newMetadata.totalCount || 0);

              case 14:
                _context.t4 = _context.sent;
                _context.t5 = {
                  mode: _context.t3,
                  topReceivers: _context.t4
                };
                newMetadata = (0, _context.t0)(_context.t1, _context.t2, _context.t5);
                calculateHeight = isShanhui ? calculatedCalendarSize : calculatedSize;
                _context.next = 20;
                return calculateHeight(newMetadata, containerWidthInPC || CALENDAR_CARD_MAX_HEIGHT);

              case 20:
                newHeight = _context.sent;
                isInValidHeight = !(finalData.height && newHeight);

                if (!((isInValidHeight || finalData.height === newHeight) && isEqualValue(newMetadata, finalMetadata))) {
                  _context.next = 26;
                  break;
                }

                injectToData({
                  injectionHeight: undefined,
                  injectionMetadata: undefined,
                  isFirstLoaded: true
                });
                debug('INIT:NOCHANGE');
                return _context.abrupt("return");

              case 26:
                if (isInitialized) {
                  _context.next = 32;
                  break;
                }

                controller.run('onAction', setCardData(node, {
                  metadata: _extends({}, newMetadata, {
                    isInitialized: true
                  }),
                  height: newHeight,
                  withoutSaving: true
                }));
                injectToData({
                  injectionHeight: undefined,
                  injectionMetadata: undefined,
                  isFirstLoaded: true
                });
                if (onInitData) onInitData();
                debug('INIT:ISINITIALIZED');
                return _context.abrupt("return");

              case 32:
                injectToData({
                  isFirstLoaded: true,
                  injectionMetadata: newMetadata,
                  injectionHeight: newHeight
                });
                debug('INIT:USUAL');

              case 34:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }())["catch"](function () {
      controller.run('onAction', setCardData(node, {
        metadata: _extends({}, data.metadata, {
          isInitialized: true
        }),
        withoutSaving: true
      }));
      injectToData({
        injectionHeight: undefined,
        injectionMetadata: undefined,
        isFirstLoaded: true
      });
    })["finally"](function () {
      setLoading(false);
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [containerWidthInPC, shouldLoadAtFirst]);
}
//# sourceMappingURL=useInit.js.map