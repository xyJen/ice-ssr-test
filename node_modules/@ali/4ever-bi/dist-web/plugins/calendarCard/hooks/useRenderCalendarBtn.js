import _regeneratorRuntime from "@babel/runtime/regenerator";
import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { useCallback } from 'react';
import { getCalculatedReceivers } from "../utils/calculatedSize";
import isEqualValue from "../utils/isEqualValue";

var useRenderCalendarBtn = function useRenderCalendarBtn(props) {
  var isPlaceholder = props.isPlaceholder,
      calendarId = props.calendarId,
      containerWidthInPC = props.containerWidthInPC,
      finalMetadata = props.finalMetadata,
      injectToData = props.injectToData,
      setLoading = props.setLoading,
      setCalendarCardData = props.setCalendarCardData,
      key = props.key,
      CalendarBtn = props.CalendarBtn;
  var initCalendar = useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {
      var topReceivers, newMetadata;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!calendarId) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", false);

            case 2:
              topReceivers = getCalculatedReceivers(data, containerWidthInPC, data.totalCount);
              newMetadata = _extends({}, data, {
                topReceivers: topReceivers
              });

              if (!isEqualValue(newMetadata, finalMetadata)) {
                _context.next = 6;
                break;
              }

              return _context.abrupt("return", false);

            case 6:
              _context.next = 8;
              return setCalendarCardData(_extends({}, newMetadata, {
                isInitialized: true
              }));

            case 8:
              setLoading(false);
              injectToData({
                isFirstLoaded: true
              });
              return _context.abrupt("return", true);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), [calendarId, containerWidthInPC, finalMetadata, injectToData, setLoading, setCalendarCardData]);
  var createCalendarBtn = useCallback(function () {
    if (!isPlaceholder || !CalendarBtn) return null;
    return CalendarBtn({
      key: key,
      initCalendar: initCalendar
    });
  }, [isPlaceholder, CalendarBtn, key, initCalendar]);
  return [createCalendarBtn];
};

export default useRenderCalendarBtn;
//# sourceMappingURL=useRenderCalendarBtn.js.map