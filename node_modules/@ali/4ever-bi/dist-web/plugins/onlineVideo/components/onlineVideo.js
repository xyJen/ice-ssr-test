import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { environment } from '@ali/4ever-cangjie';
import { sanitizeUrl } from '@ali/4ever-utils';
import { updateOnlineVideo, selectOnlineVideo } from "../actions";
import { YoukuPlayer, VideoWrapper, YoukuPlayerWrapper, YoukuPlayerPlaceholder, YoukuPlayerMask } from "./styled";
var isMobile = environment.IS_MOBILE;

var OnlineVideo = function OnlineVideo(props) {
  var node = props.node,
      controller = props.controller,
      isSelected = props.isSelected,
      isValidVideoURL = props.isValidVideoURL,
      getIFramePlayerURL = props.getIFramePlayerURL,
      isIFramePlayerSupported = props.isIFramePlayerSupported,
      _props$locale = props.locale,
      locale = _props$locale === void 0 ? {} : _props$locale,
      pluginState = props.pluginState,
      onMediaLoadSuccess = props.onMediaLoadSuccess,
      onMediaLoadError = props.onMediaLoadError,
      Editor = props.Editor,
      Toolbar = props.Toolbar;
  var _ref = node,
      data = _ref.data;
  var src = data.src;
  var type = data.type;
  var poster = data.poster;
  var wrapperRef = React.useRef(null);
  var nodeRef = React.useRef(node);

  var _React$useState = React.useState(false),
      isFocused = _React$useState[0],
      setFocusState = _React$useState[1];

  var isCollapsed = controller.value.selection.isCollapsed;
  var showToolbar = isFocused || isSelected && isCollapsed;
  var onFocus = React.useCallback(function () {
    setFocusState(true);
  }, []);
  var onBlur = React.useCallback(function () {
    setFocusState(false);
  }, []);
  var onSave = React.useCallback(function (params) {
    controller.run('onAction', updateOnlineVideo(node, {
      src: params.src,
      type: params.type
    }));
  }, [controller, node]);
  var onPlayerFocus = React.useCallback(function () {
    controller.run('onAction', selectOnlineVideo(nodeRef.current));
  }, [controller]);

  var handleMediaLoadError = function handleMediaLoadError() {
    if (onMediaLoadError) {
      onMediaLoadError(src);
    }
  };

  var handleMediaLoadSuccess = function handleMediaLoadSuccess() {
    if (onMediaLoadSuccess) {
      onMediaLoadSuccess(src);
    }
  };

  var _ref2 = /*#__PURE__*/_createElement(Editor, {
    locale: locale,
    controller: controller,
    onSave: onSave,
    onFocus: onFocus,
    onBlur: onBlur,
    node: node,
    isValidVideoURL: isValidVideoURL,
    pluginState: pluginState
  });

  var _ref3 = /*#__PURE__*/_createElement("source", {
    src: src,
    type: "video/mp4"
  });

  var renderVideoContent = function renderVideoContent() {
    if (!src) {
      // 移动端不展示地址输入框
      if (isMobile || !Editor) {
        return null;
      }

      return _ref2;
    }

    if (type === 'mp4') {
      var videoRef = /*#__PURE__*/React.createRef(); // React16.8 不支持 video 标签的 disablePictureInPicture 属性，16.9 支持
      // 暂时只能通过这种方式，后续升级 React 后，改回 disablePictureInPicture 属性

      setTimeout(function () {
        if (videoRef.current) {
          // @ts-ignore
          videoRef.current.disablePictureInPicture = true;
        }
      }, 100);
      return /*#__PURE__*/_createElement(VideoWrapper, {
        isMobile: isMobile,
        onClick: onPlayerFocus
      }, /*#__PURE__*/_createElement("video", {
        // eslint-disable-line
        "data-type": "onlineVideo",
        controls: true,
        "raw-controls": "true" // UC内核独有属性
        ,
        controlsList: "nodownload noremoteplayback",
        ref: videoRef,
        poster: sanitizeUrl(poster),
        onCanPlay: handleMediaLoadSuccess,
        onError: handleMediaLoadError
      }, _ref3));
    }

    if (type === 'youku') {
      // android低版本容器有bug：https://work.aone.alibaba-inc.com/issue/26118887
      if (isIFramePlayerSupported && !isIFramePlayerSupported(src)) {
        return /*#__PURE__*/_createElement(YoukuPlayerPlaceholder, null, /*#__PURE__*/_createElement("span", null, locale.notSupportText));
      }

      var _url = getIFramePlayerURL && getIFramePlayerURL(src);

      if (_url) {
        return /*#__PURE__*/_createElement(YoukuPlayerWrapper, {
          isMobile: isMobile,
          onClick: onPlayerFocus
        }, /*#__PURE__*/_createElement(YoukuPlayerMask, {
          style: {
            display: isSelected ? 'none' : 'block'
          }
        }), /*#__PURE__*/_createElement(YoukuPlayer, {
          src: sanitizeUrl(_url),
          allowFullScreen: true
        }));
      }

      return null;
    }

    return null;
  };

  return /*#__PURE__*/_createElement("div", {
    ref: wrapperRef
  }, showToolbar && !!Toolbar ? /*#__PURE__*/_createElement(Toolbar, {
    controller: controller,
    node: node,
    locale: locale,
    triggerNode: wrapperRef.current
  }) : null, renderVideoContent());
};

export default /*#__PURE__*/React.memo(OnlineVideo);
//# sourceMappingURL=onlineVideo.js.map