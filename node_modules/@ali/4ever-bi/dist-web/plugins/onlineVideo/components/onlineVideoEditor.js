import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { WebBetaNormal } from '@ali/we-design';
import { useOnClickOutside } from '@ali/4ever-component';
import { InsertWrapper, Input, Button, IconWrapper } from "./styled";
import { removeOnlineVideo, focusOnlineVideoEditor, selectOnlineVideo } from "../actions";

var judgeVideoType = function judgeVideoType(url) {
  if (/youku/.test(url)) {
    return 'youku';
  }

  return 'mp4';
};

var stopPropagation = function stopPropagation(e) {
  e.stopPropagation();
};

var _ref2 = /*#__PURE__*/_createElement(WebBetaNormal, null);

var OnlineVideoEditor = function OnlineVideoEditor(props) {
  var controller = props.controller,
      onSave = props.onSave,
      isValidVideoURL = props.isValidVideoURL,
      _props$locale = props.locale,
      locale = _props$locale === void 0 ? {} : _props$locale,
      node = props.node,
      pluginState = props.pluginState,
      onFocus = props.onFocus,
      onBlur = props.onBlur;
  var portalRef = React.useRef(null);
  var onlineVideoRef = React.useRef(null);
  var nodeRef = React.useRef(node);

  var _React$useState = React.useState(''),
      url = _React$useState[0],
      setUrl = _React$useState[1];

  var inputRef = /*#__PURE__*/React.createRef();
  var _ref = node,
      data = _ref.data;
  React.useEffect(function () {
    if (pluginState[data.id]) {
      var _inputRef$current, _inputRef$current2;

      // TODO 主动 focus 失效，原因待查
      (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();
      (_inputRef$current2 = inputRef.current) == null ? void 0 : _inputRef$current2.select();
      onFocus();
    }
  }, [pluginState]);
  var onInputBlur = React.useCallback(function () {
    onBlur();
  }, []);
  var onInputFocus = React.useCallback(function (e) {
    e.preventDefault();
    e.stopPropagation();
    controller.run('onAction', focusOnlineVideoEditor(nodeRef.current));
    onFocus();
  }, []);
  var handleClickoutside = React.useCallback(function (event) {
    var _onlineVideoRef$curre;

    var target = event.target;

    if (target === onlineVideoRef.current || (_onlineVideoRef$curre = onlineVideoRef.current) != null && _onlineVideoRef$curre.contains(target)) {
      return;
    }

    controller.run('onAction', removeOnlineVideo(node));
  }, []);
  useOnClickOutside(portalRef, handleClickoutside);

  var onInsertOnlineVideo = function onInsertOnlineVideo() {
    if (!isValidVideoURL || !isValidVideoURL(url)) {
      return;
    }

    var type = judgeVideoType(url);
    onSave({
      src: url,
      type: type
    });
  };

  var handleInput = function handleInput(e) {
    setUrl(e.target.value);
  };

  var onIconClick = function onIconClick(e) {
    e.preventDefault();
    e.stopPropagation();
    controller.run('onAction', selectOnlineVideo(nodeRef.current));
  };

  return /*#__PURE__*/_createElement(InsertWrapper, {
    ref: onlineVideoRef
  }, /*#__PURE__*/_createElement(IconWrapper, {
    onClick: onIconClick
  }, _ref2), /*#__PURE__*/_createElement(Input, {
    ref: inputRef,
    placeholder: locale.placeholder,
    onBlur: onInputBlur,
    onFocus: onInputFocus,
    onChange: handleInput,
    onKeyDown: stopPropagation,
    onMouseDown: stopPropagation,
    onClick: stopPropagation
  }), /*#__PURE__*/_createElement(Button, {
    onClick: onInsertOnlineVideo
  }, locale.ok));
};

export default /*#__PURE__*/React.memo(OnlineVideoEditor);
//# sourceMappingURL=onlineVideoEditor.js.map