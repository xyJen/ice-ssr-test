import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { throttle } from 'lodash-es';
import { ExclamationCircleBetaNormal, Select, SelectOption as Option, theme, Button } from '@ali/we-design';
import { replaceWithTranslatedText, insertTranslatedText } from "../actions";
var useState = React.useState,
    useEffect = React.useEffect,
    useRef = React.useRef;
var MAX_WORD_COUNT = 100;
var Wrapper = /*#__PURE__*/styled.div(["box-sizing:border-box;height:100%;display:flex;flex-direction:column;justify-content:space-between;color:rgba(17,31,44,0.72);"]); // 允许换行 和 多空格

var Content = /*#__PURE__*/styled.div(["width:100%;color:", ";word-break:break-all;overflow-x:hidden;overflow-y:scroll;white-space:pre-wrap;"], function (p) {
  return p.isFailed ? theme.colorRed1 : 'inherit';
});
var ContentStatus = /*#__PURE__*/styled.div(["width:100%;color:#FB602D;"]);
var ContentWrapper = /*#__PURE__*/styled.div(["flex:auto;overflow:auto;display:flex;justify-content:space-between;flex-direction:column;max-height:379px;width:100%;border:1px solid ", ";border-radius:8px;padding:10px;margin:10px 0;font-size:13px;"], function (p) {
  return p.isFailed ? '#FB602D' : 'rgba(126, 134, 142, 0.24)';
});
var ButtonWrapper = /*#__PURE__*/styled.div(["display:flex;flex-direction:row;margin-bottom:50px;margin-top:6px;"]);
var SelectionWrapper = /*#__PURE__*/styled.div(["font-size:", ";display:flex;align-items:center;flex-direction:row;flex-shrink:0;"], theme.fontSizeSmall);
var Selection = /*#__PURE__*/styled.div(["margin-right:16px;height:14px;line-height:14px;font-size:14px;"]);
var InnerWrapper = /*#__PURE__*/styled.div(["display:flex;flex-direction:column;height:100%;"]);
var Footer = /*#__PURE__*/styled.div(["color:", ";font-size:", ";text-align:center;margin-bottom:16px;"], theme.colorText1, theme.fontSizeSmall);
var PlaceholderWrapper = /*#__PURE__*/styled.span(["color:rgba(23,26,29,0.24);font-size:14px;line-height:18px;"]);
var list = [{
  title: '英文',
  key: 'en'
}, {
  title: '中文',
  key: 'zh'
}];

var _ref3 = /*#__PURE__*/_createElement(ExclamationCircleBetaNormal, null);

var _ref4 = /*#__PURE__*/_createElement(ExclamationCircleBetaNormal, null);

var Sidebar = function Sidebar(props) {
  var controller = props.controller,
      getTranslation = props.getTranslation,
      defaultOutputLanguage = props.defaultOutputLanguage,
      outputLanguageList = props.outputLanguageList,
      _props$locale = props.locale,
      locale = _props$locale === void 0 ? {} : _props$locale,
      maxWordCount = props.maxWordCount,
      wrapperStyle = props.wrapperStyle;
  var value = controller.value;

  var _useState = useState(),
      input = _useState[0],
      setInput = _useState[1];

  var _useState2 = useState(),
      failedText = _useState2[0],
      setFailedText = _useState2[1];

  var _useState3 = useState(defaultOutputLanguage),
      outputLanguage = _useState3[0],
      setOutputLanguage = _useState3[1];

  var _useState4 = useState(null),
      isExceedText = _useState4[0],
      setExceedText = _useState4[1];

  var text = value.fragment && value.fragment.text;
  var inputLanguage = undefined;

  var handleChange = function handleChange(targetLan) {
    setOutputLanguage(targetLan);
    getTranslation({
      inputLanguage: inputLanguage,
      outputLanguage: targetLan,
      input: text
    }).then(function (res) {
      setFailedText(null);
      setInput(res);
    })["catch"](function () {
      // handle exception
      setFailedText(locale.failed || '翻译失败, 请重试.');
    });
  }; // add throttled to aovid frequent uses input


  var throttled = useRef(throttle(function (inputText, outputLan) {
    if (getTranslation) {
      getTranslation({
        inputLanguage: inputLanguage,
        outputLanguage: outputLan,
        input: inputText
      }).then(function (res) {
        setFailedText(null);
        setInput(res);
      })["catch"](function () {
        // handle exception
        setFailedText(locale.failed || '翻译失败, 请重试.');
      });
    }
  }, 500));
  useEffect(function () {
    // add async translation service here
    if (text) {
      // cut the input with limits
      if (text.length > maxWordCount) {
        setExceedText(locale.exceedMaxLength || '超过最大翻译字数');
      } else {
        setExceedText('');
      }

      text = text.substring(0, maxWordCount);
      throttled.current(text, outputLanguage);
    }
  }, [text]);
  var disableReplaceText = !!controller.value.selection.isCollapsed || !input || failedText;
  var disableInsertText = !input || failedText;

  var _ref = /*#__PURE__*/_createElement(Content, {
    isFailed: true
  }, _ref3, failedText);

  var _ref2 = /*#__PURE__*/_createElement(ContentStatus, null, _ref4, isExceedText);

  var renderContent = function renderContent() {
    var content = input ? input : /*#__PURE__*/_createElement(PlaceholderWrapper, null, locale.placeholder || '划词，将在面板中显示翻译结果');

    if (failedText) {
      return _ref;
    } else if (isExceedText) {
      return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(Content, null, content), _ref2);
    } else {
      return /*#__PURE__*/_createElement(Content, null, content);
    }
  };

  return /*#__PURE__*/_createElement(Wrapper, {
    "data-testid": "translate-panel",
    style: wrapperStyle
  }, /*#__PURE__*/_createElement(InnerWrapper, null, /*#__PURE__*/_createElement(SelectionWrapper, null, /*#__PURE__*/_createElement(Selection, null, locale.translateTo, ":"), /*#__PURE__*/_createElement("div", null, /*#__PURE__*/_createElement(Select, {
    value: outputLanguage,
    onChange: handleChange
  }, outputLanguageList.map(function (l) {
    return /*#__PURE__*/_createElement(Option, {
      value: l.key,
      key: l.key
    }, /*#__PURE__*/_createElement("span", {
      style: {
        color: 'rgba(17, 31, 44, 0.72)'
      }
    }, l.title));
  })))), /*#__PURE__*/_createElement(ContentWrapper, null, renderContent()), /*#__PURE__*/_createElement(ButtonWrapper, null, /*#__PURE__*/_createElement(Button, {
    type: "primary",
    onClick: function onClick() {
      return controller.run('onAction', replaceWithTranslatedText(input));
    },
    disabled: disableReplaceText,
    testid: "translate-replace"
  }, locale.replace), /*#__PURE__*/_createElement(Button, {
    type: "normal",
    testid: "translate-insert",
    disabled: disableInsertText,
    onClick: function onClick() {
      return controller.run('onAction', insertTranslatedText(input));
    },
    style: {
      marginLeft: 8
    }
  }, locale.insert))), /*#__PURE__*/_createElement(Footer, null, locale.footer));
};

Sidebar.defaultProps = {
  getTranslation: function getTranslation(v) {
    return v;
  },
  // 翻译接口
  defaultOutputLanguage: 'en',
  // 默认输出语言
  outputLanguageList: list,
  // 可翻译的语言列表
  maxWordCount: MAX_WORD_COUNT // 最大字数显示

};
export default Sidebar;
//# sourceMappingURL=sidebar.js.map