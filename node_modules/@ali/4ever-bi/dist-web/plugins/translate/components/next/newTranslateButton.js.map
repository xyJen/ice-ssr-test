{"version":3,"sources":["../../../../../../src/plugins/translate/components/next/newTranslateButton.tsx"],"names":["React","PluginRoles","TranslationSelect","TranslationItemType","TranslationButton","props","config","locale","handleChange","useCallback","value","onClickMenuItem","menuItems","useMemo","key","wordTranslation","title","docTranslation","buttonTitle","lineHeightSelect"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;qBAC4B,a;AAC5B,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,iBAAT,QAAwD,sBAAxD;IAOKC,mB;;WAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAUL,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAmC;AAAA,MACnDC,MADmD,GACxCD,KADwC,CACnDC,MADmD;AAAA,uBAEnCA,MAFmC,CAEnDC,MAFmD;AAAA,MAEnDA,MAFmD,+BAE1C,EAF0C;AAI3D,MAAMC,YAAY,GAAGR,KAAK,CAACS,WAAN,CAAkB,UAACC,KAAD,EAAmB;AACxD,QAAIJ,MAAM,CAACK,eAAX,EAA4B;AAC1BL,MAAAA,MAAM,CAACK,eAAP,CAAuBD,KAAvB;AACD;AACF,GAJoB,EAIlB,CAACJ,MAAD,CAJkB,CAArB;AAMA,MAAMM,SAAS,GAAGZ,KAAK,CAACa,OAAN,CAAc,YAAM;AACpC,WAAO,CAAC;AACNC,MAAAA,GAAG,EAAEX,mBAAmB,CAACY,eADnB;AAENC,MAAAA,KAAK,EAAET,MAAM,CAACQ,eAAP,IAA0B;AAF3B,KAAD,EAGJ;AACDD,MAAAA,GAAG,EAAEX,mBAAmB,CAACc,cADxB;AAEDD,MAAAA,KAAK,EAAET,MAAM,CAACU,cAAP,IAAyB;AAF/B,KAHI,CAAP;AAOD,GARiB,EAQf,CAACV,MAAM,CAACU,cAAR,EAAwBV,MAAM,CAACQ,eAA/B,CARe,CAAlB;AAUA,sBACE,eAAC,iBAAD;AACE,IAAA,MAAM,EAAC,kBADT;AAEE,IAAA,QAAQ,EAAEP,YAFZ;AAGE,IAAA,OAAO,EAAED,MAAF,oBAAEA,MAAM,CAAEW,WAHnB;AAIE,IAAA,IAAI,EAAEjB,WAAW,CAACkB,gBAJpB;AAKE,IAAA,KAAK,EAAEZ,MAAF,oBAAEA,MAAM,CAAES,KALjB;AAME,IAAA,SAAS,EAAEJ;AANb,IADF;AAUD,CA9BD;;AAgCA,eAAeR,iBAAf","sourcesContent":["import React from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { PluginRoles } from '@ali/4ever-bamboo';\nimport { TranslationSelect, IToolbarButtonConfig } from '@ali/4ever-component';\nimport { ITranslateConfig } from '../../types';\n\nexport interface ISideBarTriggerProps {\n  open?: Function;\n}\n\nenum TranslationItemType {\n  wordTranslation = 'wordTranslation',\n  docTranslation = 'docTranslation',\n}\n\nexport interface TranslationButtonProps extends IToolbarButtonConfig {\n  controller: Controller;\n  config: ITranslateConfig;\n}\n\nconst TranslationButton = (props: TranslationButtonProps) => {\n  const { config } = props;\n  const { locale = {} } = config;\n\n  const handleChange = React.useCallback((value: string) => {\n    if (config.onClickMenuItem) {\n      config.onClickMenuItem(value);\n    }\n  }, [config]);\n\n  const menuItems = React.useMemo(() => {\n    return [{\n      key: TranslationItemType.wordTranslation,\n      title: locale.wordTranslation || '',\n    }, {\n      key: TranslationItemType.docTranslation,\n      title: locale.docTranslation || '',\n    }];\n  }, [locale.docTranslation, locale.wordTranslation]);\n\n  return (\n    <TranslationSelect\n      testid=\"translate_button\"\n      onChange={handleChange}\n      tooltip={locale?.buttonTitle}\n      role={PluginRoles.lineHeightSelect}\n      title={locale?.title}\n      menuItems={menuItems}\n    />\n  );\n};\n\nexport default TranslationButton;\n"],"file":"newTranslateButton.js"}