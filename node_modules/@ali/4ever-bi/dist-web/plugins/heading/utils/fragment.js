import { Text } from '@ali/4ever-cangjie';
import { Heading, Paragraph } from '@ali/4ever-mo';

function removeNodeMarkByTypes(block, types) {
  var _node;

  var node = block;
  var texts = (_node = node) == null ? void 0 : _node.getTexts();
  if (!(texts != null && texts.length)) return node;

  for (var i = 0; i < texts.length; i++) {
    var text = texts[i];
    var path = node.getPath(text.key);
    if (!path) continue;
    var needRemoveMarks = text.getMarks().filter(function (m) {
      return types.find(function (t) {
        return m.type === t;
      });
    });

    for (var j = 0; j < needRemoveMarks.length; j++) {
      node = node.removeMark(path, 0, text.text.length, needRemoveMarks[j]);
    }
  }

  return node;
}

export function isSelectionAtHeading(value) {
  if (value.selection.isCollapsedAtEdge) return false;
  var startBlock = value.startBlock;
  return Heading.isHeading(startBlock);
}
/**
 * 移除 fragment 第一个段落指定 marks
 */

export function removeFirstNodeMarkByTypes(frag, types) {
  var _fragment$nodes;

  var fragment = frag;
  if (!(fragment != null && (_fragment$nodes = fragment.nodes) != null && _fragment$nodes.length)) return fragment;
  var node = fragment.nodes[0];
  var path = fragment.getPath(node.key);
  if (!path) return fragment;
  var firstNode = removeNodeMarkByTypes(node, types);
  return fragment.replaceNode(path, firstNode);
}
/**
 * 视觉上是否为空段落
 */

export function isVisualEmpty(maybeNode) {
  return (Paragraph.isParagraph(maybeNode) || Heading.isHeading(maybeNode)) && maybeNode.nodes.length === 1 && Text.isText(maybeNode.nodes[0]) && maybeNode.text === '';
}
//# sourceMappingURL=fragment.js.map