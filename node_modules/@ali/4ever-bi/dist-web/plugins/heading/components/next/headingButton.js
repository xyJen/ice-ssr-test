import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TextTypeSelect } from '@ali/4ever-component';
import { PluginRoles } from '@ali/4ever-bamboo';
import { setHeading } from "../../actions";
import { getTitleByHeading } from "../../utils/getTipsByHeading";
export default function HeadingButton(props) {
  var controller = props.controller,
      locale = props.locale,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale"]);

  var heading = controller.query('getHeading') || 'paragraph';
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  var handleChange = React.useCallback(function (headingStr) {
    controller.run('onAction', setHeading(headingStr));
  }, [controller]);

  var _getTitleByHeading = getTitleByHeading(heading, locale),
      title = _getTitleByHeading.title,
      shortCut = _getTitleByHeading.shortCut,
      markdown = _getTitleByHeading.markdown;

  var options = React.useMemo(function () {
    return [{
      key: 'paragraph',
      testid: 'option-paragraph',
      title: (locale == null ? void 0 : locale.dropdownBody) || 'Paragraph'
    }, {
      key: 'heading-1',
      testid: 'option-heading-1',
      title: (locale == null ? void 0 : locale.dropdownHeading1) || 'Heading 1'
    }, {
      key: 'heading-2',
      testid: 'option-heading-2',
      title: (locale == null ? void 0 : locale.dropdownHeading2) || 'Heading 2'
    }, {
      key: 'heading-3',
      testid: 'option-heading-3',
      title: (locale == null ? void 0 : locale.dropdownHeading3) || 'Heading 3'
    }, {
      key: 'heading-4',
      testid: 'option-heading-4',
      title: (locale == null ? void 0 : locale.dropdownHeading4) || 'Heading 4'
    }];
  }, [locale]);
  var tooltip = React.useMemo(function () {
    return {
      title: title,
      shortCut: shortCut,
      description: markdown
    };
  }, [title, shortCut, markdown]);
  return /*#__PURE__*/_createElement(TextTypeSelect, _extends({
    testid: "bi-toolbar-heading",
    disabled: !!isDisabled,
    value: heading,
    onChange: handleChange,
    role: PluginRoles.headingSelect,
    options: options
  }, rest, {
    tooltip: tooltip
  }));
}
//# sourceMappingURL=headingButton.js.map