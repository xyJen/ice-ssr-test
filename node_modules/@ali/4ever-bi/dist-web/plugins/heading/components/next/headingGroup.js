import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { FontSizeMaxSelect } from '@ali/4ever-component';
import { PluginRoles } from '@ali/4ever-bamboo';
import { toggleBlockquote } from '@ali/4ever-utils';
import { setHeading } from "../../actions";
;
var BLOCKQUOTE_KEY = 'blockquote';
export var getHeadingGroupWidth = function getHeadingGroupWidth(_ref) {
  var toolbarWidth = _ref.toolbarWidth;

  if (toolbarWidth > 1720) {
    return 492;
  }

  if (toolbarWidth > 1644) {
    return 414;
  }

  if (toolbarWidth > 1568) {
    return 340;
  }

  if (toolbarWidth > 1492) {
    return 264;
  }

  return 188;
};
export default function HeadingGroup(props) {
  var controller = props.controller,
      locale = props.locale,
      _props$width = props.width,
      width = _props$width === void 0 ? 188 : _props$width,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "width"]);

  var type = controller.query('hasBlockQuote') ? BLOCKQUOTE_KEY : controller.query('getHeading');
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInHr') || controller.query('isSelectionInListSymbol');
  var handleChange = React.useCallback(function (headingStr) {
    if (headingStr === BLOCKQUOTE_KEY) {
      if (type !== 'paragraph') {
        // 变成引用同时去除标题
        controller.run('onAction', setHeading('paragraph'));
      }

      controller.run('onAction', toggleBlockquote());
    } else {
      if (type === BLOCKQUOTE_KEY) {
        // 变成标题同时去除引用
        controller.run('onAction', toggleBlockquote());
      }

      controller.run('onAction', setHeading(headingStr));
    }
  }, [controller, type]);
  return /*#__PURE__*/_createElement(FontSizeMaxSelect, _extends({
    testid: "bi-toolbar-heading-group",
    disabled: !!isDisabled,
    value: type,
    onChange: handleChange,
    width: width,
    role: PluginRoles.headingGroup,
    locale: locale
  }, rest));
}
//# sourceMappingURL=headingGroup.js.map