import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { TextTypeSelect as OriginTextTypeSelect } from '@ali/we-toolbar';
import { PluginRoles } from '@ali/4ever-bamboo';
import { NewToolbarMode as ToolbarMode } from '@ali/4ever-component';
import { setHeading } from "../actions";
import getTipsByHeading from "../utils/getTipsByHeading";
;
var TextTypeSelect = /*#__PURE__*/React.memo(OriginTextTypeSelect);
export default function HeadingButton(props) {
  var controller = props.controller,
      locale = props.locale,
      toolbarMode = props.toolbarMode,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "toolbarMode"]);

  var heading = controller.query('getHeading') || '';
  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInListSymbol') || controller.query('isSelectionInLinkCard');
  var isDouble = toolbarMode === ToolbarMode["double"];
  var handleChange = React.useCallback(function (headingStr) {
    controller.run('onAction', setHeading(headingStr));
  }, [controller]);
  var title = getTipsByHeading(heading, locale);
  var titleTips = React.useMemo(function () {
    return {
      paragraph: {
        title: getTipsByHeading('paragraph', locale, true),
        placement: 'right'
      },
      'heading-1': {
        title: getTipsByHeading('heading-1', locale, true),
        placement: 'right'
      },
      'heading-2': {
        title: getTipsByHeading('heading-2', locale, true),
        placement: 'right'
      },
      'heading-3': {
        title: getTipsByHeading('heading-3', locale, true),
        placement: 'right'
      },
      'heading-4': {
        title: getTipsByHeading('heading-4', locale, true),
        placement: 'right'
      }
    };
  }, [locale]);
  var realWidth = 66;
  return /*#__PURE__*/_createElement(TextTypeSelect, _extends({}, rest, {
    testid: "bi-toolbar-heading",
    disabled: !!isDisabled,
    value: heading,
    onChange: handleChange,
    titles: titleTips,
    bordered: isDouble,
    width: realWidth,
    shortcutText: title,
    role: PluginRoles.headingSelect
  }));
}
//# sourceMappingURL=headingButton.js.map