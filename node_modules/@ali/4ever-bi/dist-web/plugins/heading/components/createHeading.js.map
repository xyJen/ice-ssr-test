{"version":3,"sources":["../../../../../src/plugins/heading/components/createHeading.tsx"],"names":["React","PropTypes","createHeadingId","styledComponents","createHeading","Paragraph","componentDidMount","onHeadingChange","context","componentDidUpdate","prevProps","prevNode","node","currentNode","props","componentWillUnmount","render","type","Component","contextTypes","func"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AAEA,SAASC,eAAT,EAA0BC,gBAA1B,QAAuE,mBAAvE;AAEA,eAAe,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;AAAA;;AAC/C;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,WAKEC,iBALF,GAKE,6BAAoB;AAAA,UACVC,eADU,GACU,KAAKC,OADf,CACVD,eADU;;AAElB,UAAIA,eAAJ,EAAqB;AACnBA,QAAAA,eAAe;AAChB;AACF,KAVH;;AAAA,WAYEE,kBAZF,GAYE,4BAAmBC,SAAnB,EAA8B;AAC5B,UAAMC,QAAQ,GAAGD,SAAS,CAACE,IAA3B;AAD4B,UAEdC,WAFc,GAEE,KAAKC,KAFP,CAEpBF,IAFoB;AAAA,UAGpBL,eAHoB,GAGA,KAAKC,OAHL,CAGpBD,eAHoB;;AAI5B,UAAIA,eAAe,IAAII,QAAQ,KAAKE,WAApC,EAAiD;AAC/CN,QAAAA,eAAe;AAChB;AACF,KAnBH;;AAAA,WAqBEQ,oBArBF,GAqBE,gCAAuB;AAAA,UACbR,eADa,GACO,KAAKC,OADZ,CACbD,eADa;;AAErB,UAAIA,eAAJ,EAAqB;AACnBA,QAAAA,eAAe;AAChB;AACF,KA1BH;;AAAA,WA4BES,MA5BF,GA4BE,kBAAS;AAAA,UACCJ,IADD,GACU,KAAKE,KADf,CACCF,IADD;AAEP,0BACE,eAAC,SAAD,eACM,KAAKE,KADX;AAEE,QAAA,SAAS,EAAEX,gBAAgB,CAACS,IAAI,CAACK,IAAN,CAF7B;AAGE,QAAA,EAAE,EAAEf,eAAe,CAACU,IAAD;AAHrB,SADF;AAOD,KArCH;;AAAA;AAAA,IAA6BZ,KAAK,CAACkB,SAAnC,UACSC,YADT,GACwB;AACpBZ,IAAAA,eAAe,EAAEN,SAAS,CAACmB;AADP,GADxB;AAuCD","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Block } from '@ali/4ever-cangjie';\nimport { createHeadingId, styledComponents, TypeToComponentKeys } from '@ali/4ever-bamboo';\n\nexport default function createHeading(Paragraph) {\n  return class Heading extends React.Component<{node: Block}> {\n    static contextTypes = {\n      onHeadingChange: PropTypes.func,\n    };\n\n    componentDidMount() {\n      const { onHeadingChange } = this.context;\n      if (onHeadingChange) {\n        onHeadingChange();\n      }\n    }\n\n    componentDidUpdate(prevProps) {\n      const prevNode = prevProps.node;\n      const { node: currentNode } = this.props;\n      const { onHeadingChange } = this.context;\n      if (onHeadingChange && prevNode !== currentNode) {\n        onHeadingChange();\n      }\n    }\n\n    componentWillUnmount() {\n      const { onHeadingChange } = this.context;\n      if (onHeadingChange) {\n        onHeadingChange();\n      }\n    }\n\n    render() {\n      const { node } = this.props;\n      return (\n        <Paragraph\n          {...this.props}\n          Component={styledComponents(node.type as TypeToComponentKeys)}\n          id={createHeadingId(node)}\n        />\n      );\n    }\n  };\n}\n"],"file":"createHeading.js"}