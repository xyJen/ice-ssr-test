/* eslint-disable no-param-reassign */

/* eslint-disable react-hooks/rules-of-hooks */
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { setHeading } from "../actions";
import { toggleBlockquote, disableBlockquote } from '@ali/4ever-utils';
import { isDisabled } from "./headingSimpleButton";
var MOBILE_TOOLBAR = {
  'heading-1': {
    fontSize: 17,
    width: 81,
    fw: 'bold',
    icon: 'h1'
  },
  'heading-2': {
    fontSize: 16,
    width: 74,
    fw: 'bold',
    icon: 'h2'
  },
  'heading-3': {
    fontSize: 15,
    width: 67,
    fw: 'bold',
    icon: 'h3'
  },
  'heading-4': {
    fontSize: 14,
    width: 62,
    fw: 'bold',
    icon: 'h4'
  },
  paragraph: {
    fontSize: 14,
    width: 55,
    fw: 'inherit',
    icon: 'paragraph'
  },
  blockquote: {
    fontSize: 14,
    width: 55,
    fw: 'inherit',
    icon: 'blockquote'
  }
};
var Title = /*#__PURE__*/styled.div(["color:black;font-weight:", ";font-size:", "px;"], function (props) {
  return props.fw;
}, function (props) {
  return props.fontSize;
});

function isBlockActive(type, block) {
  if (!block) {
    return false;
  }

  if (type === 'blockquote') {
    return block.data.blockquote;
  }

  if (type === 'paragraph') {
    return block.type === type && !block.data.blockquote;
  }

  return block.type === type;
}

function useClick(controller, hType) {
  var handleClick = React.useCallback(function () {
    if (hType === 'blockquote') {
      controller.run('onAction', setHeading('paragraph'));
      controller.run('onAction', toggleBlockquote());
    } else {
      controller.run('onAction', setHeading(hType));
      controller.run('onAction', disableBlockquote());
    }
  }, [controller, hType]);
  return handleClick;
}

export default function createMobileHeading() {
  return Object.keys(MOBILE_TOOLBAR).reduce(function (result, hType) {
    result[hType + "MobileBig"] = function (props) {
      var icon = MOBILE_TOOLBAR[hType].icon;
      var controller = props.controller,
          Wrapper = props.Wrapper,
          item = props.item;
      var _controller$value = controller.value,
          focusBlock = _controller$value.focusBlock,
          anchorBlock = _controller$value.anchorBlock;
      var isActive = focusBlock === anchorBlock && isBlockActive(hType, focusBlock);
      var handleClick = useClick(controller, hType);
      return /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "big",
        onClick: handleClick,
        isFocused: isActive,
        isDisabled: isDisabled(controller),
        icon: icon
      });
    };

    result[hType + "Mobile"] = function (props) {
      var controller = props.controller,
          Wrapper = props.Wrapper,
          item = props.item,
          locale = props.locale;
      var handleClick = useClick(controller, hType);
      var title = locale && locale[hType.replace('-', '') + "Mobile"];
      var _controller$value2 = controller.value,
          focusBlock = _controller$value2.focusBlock,
          anchorBlock = _controller$value2.anchorBlock;
      var isActive = focusBlock === anchorBlock && isBlockActive(hType, focusBlock);
      var _MOBILE_TOOLBAR$hType = MOBILE_TOOLBAR[hType],
          fontSize = _MOBILE_TOOLBAR$hType.fontSize,
          width = _MOBILE_TOOLBAR$hType.width,
          fw = _MOBILE_TOOLBAR$hType.fw;
      return /*#__PURE__*/_createElement(React.Fragment, null, /*#__PURE__*/_createElement(Wrapper, {
        item: item,
        type: "horiz",
        width: width,
        isActive: isActive,
        isDisabled: isDisabled(controller),
        onClick: handleClick
      }, /*#__PURE__*/_createElement(Title, {
        fontSize: fontSize,
        fw: fw
      }, title)));
    };

    return result;
  }, {});
}
//# sourceMappingURL=mobileButtons.js.map