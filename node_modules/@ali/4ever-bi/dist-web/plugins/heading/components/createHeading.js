import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import * as PropTypes from 'prop-types';
import { createHeadingId, styledComponents } from '@ali/4ever-bamboo';
export default function createHeading(Paragraph) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Heading, _React$Component);

    function Heading() {
      return _React$Component.apply(this, arguments) || this;
    }

    var _proto = Heading.prototype;

    _proto.componentDidMount = function componentDidMount() {
      var onHeadingChange = this.context.onHeadingChange;

      if (onHeadingChange) {
        onHeadingChange();
      }
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var prevNode = prevProps.node;
      var currentNode = this.props.node;
      var onHeadingChange = this.context.onHeadingChange;

      if (onHeadingChange && prevNode !== currentNode) {
        onHeadingChange();
      }
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      var onHeadingChange = this.context.onHeadingChange;

      if (onHeadingChange) {
        onHeadingChange();
      }
    };

    _proto.render = function render() {
      var node = this.props.node;
      return /*#__PURE__*/_createElement(Paragraph, _extends({}, this.props, {
        Component: styledComponents(node.type),
        id: createHeadingId(node)
      }));
    };

    return Heading;
  }(React.Component), _class.contextTypes = {
    onHeadingChange: PropTypes.func
  }, _temp;
}
//# sourceMappingURL=createHeading.js.map