{"version":3,"sources":["../../../../../src/plugins/heading/components/headingWrapper.tsx"],"names":["React","PropTypes","getHeadings","throttleByIdleCallback","HeadingWrapper","handleHeadingChange","props","controller","onHeadingsChange","dataValue","query","value","getChildContext","onHeadingChange","componentWillUnmount","cancel","render","children","Component","childContextTypes","func"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AAEA,SAASC,WAAT,EAAsBC,sBAAtB,QAAoD,mBAApD;;IAQqBC,c;;;;;;;;;;;UAkBnBC,mB,GAAwEF,sBAAsB,CAAC,YAAM;AAAA,wBAC1D,MAAKG,KADqD;AAAA,UAC3FC,UAD2F,eAC3FA,UAD2F;AAAA,UAC/EC,gBAD+E,eAC/EA,gBAD+E;AAEnG,UAAMC,SAAS,GAAGF,UAAU,CAACG,KAAX,CAAiB,cAAjB,CAAlB;AACAF,MAAAA,gBAAgB,CAACN,WAAW,CAACO,SAAS,IAAIF,UAAU,CAACI,KAAzB,CAAZ,CAAhB;AACD,KAJ6F,C;;;;;;SAb9FC,e,GAAA,2BAAkB;AAChB,WAAO;AACLC,MAAAA,eAAe,EAAE,KAAKR;AADjB,KAAP;AAGD,G;;SAEDS,oB,GAAA,gCAAuB;AACrB,QAAI,KAAKT,mBAAT,EAA8B;AAC5B,WAAKA,mBAAL,CAAyBU,MAAzB;AACA,WAAKV,mBAAL,GAA2B,IAA3B;AACD;AACF,G;;SAQDW,M,GAAA,kBAAS;AAAA,QACCC,QADD,GACc,KAAKX,KADnB,CACCW,QADD;AAEP,WAAOA,QAAP;AACD,G;;;EA3ByCjB,KAAK,CAACkB,S;;AAA7Bd,c,CACZe,iB,GAAoB;AACzBN,EAAAA,eAAe,EAAEZ,SAAS,CAACmB;AADF,C;SADRhB,c;AA4BpB","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Controller } from '@ali/4ever-cangjie';\nimport { getHeadings, throttleByIdleCallback } from '@ali/4ever-bamboo';\n\nexport interface HeadingWrapperProps {\n  controller: Controller;\n  style?: React.CSSProperties;\n  onHeadingsChange: (headings) => void;\n}\n\nexport default class HeadingWrapper extends React.Component<HeadingWrapperProps> {\n  static childContextTypes = {\n    onHeadingChange: PropTypes.func,\n  };\n\n  getChildContext() {\n    return {\n      onHeadingChange: this.handleHeadingChange,\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.handleHeadingChange) {\n      this.handleHeadingChange.cancel();\n      this.handleHeadingChange = null;\n    }\n  }\n\n  handleHeadingChange: ReturnType<typeof throttleByIdleCallback> | null = throttleByIdleCallback(() => {\n    const { controller, onHeadingsChange } = this.props;\n    const dataValue = controller.query('getDataValue');\n    onHeadingsChange(getHeadings(dataValue || controller.value));\n  });\n\n  render() {\n    const { children } = this.props;\n    return children;\n  }\n};\n"],"file":"headingWrapper.js"}