import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { constants, transferUtils } from '@ali/4ever-cangjie';
var MIME_TYPES = constants.MIME_TYPES;
export default function createOnCangjiePaste(config) {
  return /*#__PURE__*/function () {
    var _onCangjiePaste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, controller, next) {
      var _fragment$nodes;

      var clipboardData, fragment, nextFragment;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              clipboardData = controller.query('getClipboardData', event);

              if (clipboardData != null && clipboardData.hasData(MIME_TYPES.FRAGMENT)) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return", next());

            case 3:
              fragment = clipboardData.getFragment();

              if (fragment != null && (_fragment$nodes = fragment.nodes) != null && _fragment$nodes.length) {
                _context.next = 6;
                break;
              }

              return _context.abrupt("return", next());

            case 6:
              nextFragment = controller.query('getHeadingPasteFragment', fragment);

              if (nextFragment) {
                event.clipboardData.setData(MIME_TYPES.FRAGMENT, transferUtils.encodeFragment(nextFragment));
              }

              return _context.abrupt("return", next());

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function onCangjiePaste(_x, _x2, _x3) {
      return _onCangjiePaste.apply(this, arguments);
    }

    return onCangjiePaste;
  }();
}
;
//# sourceMappingURL=createOnCangjiePaste.js.map