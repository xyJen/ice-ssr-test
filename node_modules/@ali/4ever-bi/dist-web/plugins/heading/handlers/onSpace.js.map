{"version":3,"sources":["../../../../../src/plugins/heading/handlers/onSpace.ts"],"names":["Commands","Inline","shortcutTypes","setHeading","setHeadingAction","onSpace","event","controller","next","value","startBlock","selection","document","isExpanded","convertToTextPoints","start","anchor","texts","text","slice","offset","chars","replace","type","currentNode","getNode","key","foundInlineNode","index","nodes","indexOf","i","node","isInline","preventDefault","command","moveFocusToStartOfNode","del","run","dispatch","mdType"],"mappings":"AACA,SAAqBA,QAArB,EAA+BC,MAA/B,QAAuE,oBAAvE;AACA,OAAOC,aAAP;AACA,SAASC,UAAU,IAAIC,gBAAvB;AAEA,eAAe,SAASC,OAAT,CACbC,KADa,EAEbC,UAFa,EAGbC,IAHa,EAIb;AAAA,MACQC,KADR,GACkBF,UADlB,CACQE,KADR;AAAA,MAEQC,UAFR,GAE4CD,KAF5C,CAEQC,UAFR;AAAA,MAEoBC,SAFpB,GAE4CF,KAF5C,CAEoBE,SAFpB;AAAA,MAE+BC,QAF/B,GAE4CH,KAF5C,CAE+BG,QAF/B;AAGA,MAAI,CAACD,SAAD,IAAc,CAACD,UAAf,IAA6BC,SAAS,CAACE,UAA3C,EAAuD,OAAOL,IAAI,EAAX;;AAHvD,8BAK0BG,SAAS,CAACG,mBAAV,CAA8BF,QAA9B,CAL1B;AAAA,MAKQG,KALR,yBAKQA,KALR;AAAA,MAKeC,MALf,yBAKeA,MALf;;AAMA,MAAMC,KAAK,GAAGP,UAAU,CAACQ,IAAX,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyBJ,KAAK,CAACK,MAA/B,CAAd;AACA,MAAMC,KAAK,GAAGJ,KAAK,CAACK,OAAN,CAAc,MAAd,EAAsB,EAAtB,CAAd;AACA,MAAMC,IAAI,GAAGrB,aAAa,CAACmB,KAAD,CAAb,IAAwB,IAArC;AAEA,MAAI,CAACE,IAAL,EAAW,OAAOf,IAAI,EAAX,CAVX,CAYA;;AACA,MAAMgB,WAAW,GAAGd,UAAU,CAACe,OAAX,CAAmBT,MAAM,CAACU,GAA1B,CAApB;AACA,MAAI,CAACF,WAAL,EAAkB,OAAOhB,IAAI,EAAX;AAClB,MAAImB,eAAe,GAAG,KAAtB;AACA;AACF;AACA;AACA;;AACE,MAAMC,KAAK,GAAGlB,UAAU,CAACmB,KAAX,CAAiBC,OAAjB,CAAyBN,WAAzB,CAAd;;AACA,OAAK,IAAIO,CAAC,GAAGH,KAAK,GAAG,CAArB,EAAwBG,CAAC,IAAI,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;AACnC,QAAMC,IAAI,GAAGtB,UAAU,CAACmB,KAAX,CAAiBE,CAAjB,CAAb;AACAJ,IAAAA,eAAe,GAAGA,eAAe,IAAI1B,MAAM,CAACgC,QAAP,CAAgBD,IAAhB,CAArC;AACA,QAAIL,eAAJ,EAAqB;AACtB;;AACD,MAAIA,eAAJ,EAAqB,OAAOnB,IAAI,EAAX;AAErBF,EAAAA,KAAK,CAAC4B,cAAN;AACA3B,EAAAA,UAAU,CAAC4B,OAAX,CAAmBnC,QAAQ,CAACoC,sBAA5B,EAAoD1B,UAApD,EAAgEyB,OAAhE,CAAwEnC,QAAQ,CAACqC,GAAjF;AACA9B,EAAAA,UAAU,CAAC+B,GAAX,CAAe,UAAf,EAA2BlC,gBAAgB,CAACmB,IAAD,CAA3C;AACA,SAAOhB,UAAU,CAACgC,QAAX,CAAoB,6BAApB,EAAmD;AAAEC,IAAAA,MAAM,EAAEjB;AAAV,GAAnD,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { Controller, Commands, Inline, CangjieInputEvent, Block } from '@ali/4ever-cangjie';\nimport shortcutTypes from '../utils/shortcutTypes';\nimport { setHeading as setHeadingAction } from '../actions';\n\nexport default function onSpace(\n  event: React.KeyboardEvent | CangjieInputEvent,\n  controller: Controller,\n  next: Function,\n) {\n  const { value } = controller;\n  const { startBlock, selection, document } = value;\n  if (!selection || !startBlock || selection.isExpanded) return next();\n\n  const { start, anchor } = selection.convertToTextPoints(document);\n  const texts = startBlock.text.slice(0, start.offset);\n  const chars = texts.replace(/\\s*/g, '');\n  const type = shortcutTypes[chars] || null;\n\n  if (!type) return next();\n\n  // 在当前node之前有行内元素时不变heading（例如：@人 + # + 空格）\n  const currentNode = startBlock.getNode(anchor.key);\n  if (!currentNode) return next();\n  let foundInlineNode = false;\n  /**\n   * 极端场景：段落的开头是 1000 个行内元素\n   * 使用 getPreviousSibling 相比 for 循环性能差 3 倍左右\n   */\n  const index = startBlock.nodes.indexOf(currentNode as Block);\n  for (let i = index - 1; i >= 0; i--) {\n    const node = startBlock.nodes[i];\n    foundInlineNode = foundInlineNode || Inline.isInline(node);\n    if (foundInlineNode) break;\n  }\n  if (foundInlineNode) return next();\n\n  event.preventDefault();\n  controller.command(Commands.moveFocusToStartOfNode, startBlock).command(Commands.del);\n  controller.run('onAction', setHeadingAction(type));\n  return controller.dispatch('createTriggerMarkdownAction', { mdType: type });\n}\n"],"file":"onSpace.js"}