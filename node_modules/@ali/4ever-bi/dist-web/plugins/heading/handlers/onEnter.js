import _extends from "@babel/runtime/helpers/extends";
import { Commands, Block } from '@ali/4ever-cangjie';
import { Heading } from '@ali/4ever-mo';
import { getClosestParagraph } from '@ali/4ever-utils';
import { omit } from 'lodash-es';
import { getNextViewGroupNode } from '@ali/4ever-plugin-heading-group';
export default function onEnter(event, controller, next) {
  var value = controller.value;
  var startBlock = value.startBlock,
      selection = value.selection,
      document = value.document;
  if (!startBlock || !selection) return next();
  var closestParagraphBlock = getClosestParagraph(value);
  if (!closestParagraphBlock) return next();

  if (!Heading.isHeading(closestParagraphBlock)) {
    return next();
  }

  event.preventDefault();

  var _selection$convertToT = selection.convertToTextPoints(document),
      start = _selection$convertToT.start,
      end = _selection$convertToT.end;

  var isCollapsed = selection.isCollapsed,
      isExpanded = selection.isExpanded;
  var closestInline = document.getClosestInline(start.key);
  var isEnterAtInline = isCollapsed && closestInline && // allow to split a link
  closestInline.type !== 'link' && start.offset === 0;

  if (isEnterAtInline) {
    // just move to next text like normal paragraph
    return controller.command(Commands.moveToStartOfNextText);
  }

  var isFoldNode = controller.userData.get(closestParagraphBlock, 'fold');
  /**
   * 若当前节点是 GroupNode list 节点，做可视节点的切割
   *  I -> 光标坐在位置，在光标位置按 Enter 键
   * 
   * 场景一: 折叠标题一 拆为标题一 和 空标题一
   * 
   *  >标题一I            >标题一
   *   标题一       ->     I<空标题一>
   *                      标题一
   * 
   * 场景二: 展开标题一 拆为 展开标题一 和 空段落
   * 
   *   标题一I            标题一
   *   普通段落       ->  I<空段落>
   *                     普通段落
   * 场景三: 折叠标题一 拆为标题一 和 空段落
   * 
   *  >I标题一            ><空标题一>
   *   标题一       ->    I标题一
   *                     
   * 
   * 场景四：后边无节点的折叠标题一 拆为折叠标题一 和空标题一
   * 
   *  >标题一I        ->  >标题一
   *                     I<空标题一>
   */

  var splitViewGroup = function splitViewGroup() {
    var nextViewNode = isFoldNode && getNextViewGroupNode(closestParagraphBlock, controller);
    controller.command(Commands.splitBlock);
    var anchorBlock = controller.value.anchorBlock;

    if (!anchorBlock) {
      return;
    }

    controller.command(Commands.setNodeByKey, anchorBlock.key, {
      data: _extends({}, omit(anchorBlock.data, 'fold', 'uuid')),
      type: closestParagraphBlock.type
    });

    if (nextViewNode) {
      var previous = document.getPreviousBlock(nextViewNode.key);
      previous && controller.command(Commands.moveToEndOfNode, previous);
    } else {
      var _parent = controller.value.document.getParent(closestParagraphBlock.key);

      var lastNode = _parent == null ? void 0 : _parent.nodes[(_parent == null ? void 0 : _parent.nodes.length) - 1];
      lastNode && controller.command(Commands.moveToEndOfNode, lastNode);
    }

    var key = controller.value.anchorBlock.key;
    var parent = controller.value.document.getParent(key);
    var index = parent == null ? void 0 : parent.getPath(key);

    if (parent && index != null && index.length) {
      controller.command(Commands.moveNodeByKey, anchorBlock.key, parent.key, index[0]).command(Commands.moveToStartOfNode, anchorBlock);
    }
  };

  if (isFoldNode) {
    return splitViewGroup();
  } // test isEnterAtLastChar at first since it can be an empty heading


  if (isCollapsed && start.isAtEndOfNode(closestParagraphBlock)) {
    // 使用 splitBlock 保持用户意图
    controller.command(Commands.splitBlock); // 修正回车换行后的 type, data 和 marks

    var key = closestParagraphBlock.key;
    var nextSibling = controller.value.document.getNextSibling(key);

    if (nextSibling && Block.isBlock(nextSibling)) {
      controller.command(Commands.setNodeByKey, nextSibling.key, {
        type: 'paragraph',
        data: {}
      });
      var text = nextSibling.getFirstText();

      if (text) {
        var marks = text.getMarks();
        marks.forEach(function (mark) {
          controller.command(Commands.removeMarkByKey, text.key, 0, text.text.length, mark);
        });
      }
    } // 需要清除选区临时样式（比如通过 # + space 生成的标题会一并设置临时样式）


    return controller.command(Commands.select, controller.value.selection.set('marks', null));
  }

  if (isExpanded && end.isAtEndOfNode(closestParagraphBlock)) {
    // clear style like word/wps
    return controller.command(Commands.splitBlock).command('clearStyle');
  }

  return next();
}
//# sourceMappingURL=onEnter.js.map