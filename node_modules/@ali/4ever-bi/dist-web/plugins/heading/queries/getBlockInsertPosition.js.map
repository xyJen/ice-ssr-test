{"version":3,"sources":["../../../../../src/plugins/heading/queries/getBlockInsertPosition.ts"],"names":["Text","Heading","BlockInsertPosition","getBlockInsertPosition","controller","cursorAtBlock","isHeading","value","selection","document","isExpanded","text","isTextList","nodes","After","convertToTextPoints","start","isAtStartOfNode","Current","isAtEndOfNode","SplitAndAfter"],"mappings":"AAAA,SAAqBA,IAArB,QAAwC,oBAAxC;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,mBAAT,QAAoC,yBAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,sBAAT,CAAgCC,UAAhC,EAAwDC,aAAxD,EAA0G;AACvH;AACA,MAAI,CAACJ,OAAO,CAACK,SAAR,CAAkBD,aAAlB,CAAL,EAAuC;AACrC,WAAO,IAAP;AACD;;AAJsH,0BAMvFD,UAAU,CAACG,KAN4E;AAAA,MAM/GC,SAN+G,qBAM/GA,SAN+G;AAAA,MAMpGC,QANoG,qBAMpGA,QANoG,EAOvH;;AACA,MAAID,SAAS,CAACE,UAAd,EAA0B;AACxB,WAAO,IAAP;AACD,GAVsH,CAYvH;;;AACA,MAAIL,aAAa,CAACM,IAAd,KAAuB,EAAvB,IAA6BX,IAAI,CAACY,UAAL,CAAgBP,aAAa,CAACQ,KAA9B,CAAjC,EAAuE;AACrE,WAAOX,mBAAmB,CAACY,KAA3B;AACD;;AAfsH,8BAiBrGN,SAAS,CAACO,mBAAV,CAA8BN,QAA9B,CAjBqG;AAAA,MAiB/GO,KAjB+G,yBAiB/GA,KAjB+G,EAmBvH;;;AACA,MAAIA,KAAK,CAACC,eAAN,CAAsBZ,aAAtB,CAAJ,EAA0C;AACxC,WAAOH,mBAAmB,CAACgB,OAA3B;AACD,GAtBsH,CAwBvH;;;AACA,MAAIF,KAAK,CAACG,aAAN,CAAoBd,aAApB,CAAJ,EAAwC;AACtC,WAAOH,mBAAmB,CAACY,KAA3B;AACD,GA3BsH,CA6BvH;;;AACA,SAAOZ,mBAAmB,CAACkB,aAA3B;AACD","sourcesContent":["import { Controller, Text, Block } from '@ali/4ever-cangjie';\nimport { Heading } from '@ali/4ever-mo';\nimport { BlockInsertPosition } from '@ali/4ever-plugin-basic';\n\n/**\n * 获取待插入 Block 应在光标所在标题 Block 的相对位置\n *\n * 获得有效结果的前提条件：光标在标题 && selection collapsed\n * @export\n * @param {Controller} controller\n * @param {Block} cursorAtBlock 当前光标所在 block\n * @returns {(BlockInsertPosition | null)} 插入位置（null 表示无法判定）\n */\nexport default function getBlockInsertPosition(controller: Controller, cursorAtBlock: Block): BlockInsertPosition | null {\n  // 非标题，不属于判定范围内\n  if (!Heading.isHeading(cursorAtBlock)) {\n    return null;\n  }\n\n  const { selection, document } = controller.value;\n  // selection expanded 状态，不属于判定范围内\n  if (selection.isExpanded) {\n    return null;\n  }\n\n  // 空标题\n  if (cursorAtBlock.text === '' && Text.isTextList(cursorAtBlock.nodes)) {\n    return BlockInsertPosition.After;\n  }\n\n  const { start } = selection.convertToTextPoints(document);\n\n  // 非空标题情况下，光标在开头\n  if (start.isAtStartOfNode(cursorAtBlock)) {\n    return BlockInsertPosition.Current;\n  }\n\n  // 非空标题情况下，光标在末尾\n  if (start.isAtEndOfNode(cursorAtBlock)) {\n    return BlockInsertPosition.After;\n  }\n\n  // 非空标题情况下，光标在末尾\n  return BlockInsertPosition.SplitAndAfter;\n}\n"],"file":"getBlockInsertPosition.js"}