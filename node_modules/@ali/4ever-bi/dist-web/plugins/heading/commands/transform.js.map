{"version":3,"sources":["../../../../../src/plugins/heading/commands/transform.ts"],"names":["Commands","Text","Paragraph","setHeading","paragraph2Heading","controller","block","type","command","setNodeByKey","key","data","moveToEndOfNode","run","code2Heading","lineArr","text","split","withoutNormalizing","forEach","line","paragraph","create","nodes","insertBlock","removeNodeByKey","transform","blocks","query","Array","isArray","calloutPr","focus"],"mappings":"AAAA,SAAqBA,QAArB,EAAqCC,IAArC,QAAwD,oBAAxD;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA;AACA,SAASC,UAAT;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,UAAD,EAAyBC,KAAzB,EAAsCC,IAAtC,EAAuD;AAC/EF,EAAAA,UAAU,CACPG,OADH,CACWR,QAAQ,CAACS,YADpB,EACkCH,KAAK,CAACI,GADxC,EAC6C;AACzCH,IAAAA,IAAI,EAAGD,KAAD,CAAiBC,IADkB;AAEzCI,IAAAA,IAAI,EAAE;AAFmC,GAD7C,EAKGH,OALH,CAKWR,QAAQ,CAACY,eALpB,EAKqCN,KALrC;AAMA,SAAOD,UAAU,CAACQ,GAAX,CAAe,UAAf,EAA2BV,UAAU,CAACI,IAAD,CAArC,CAAP;AACD,CARD;;AAUA,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAACT,UAAD,EAAyBC,KAAzB,EAAsCC,IAAtC,EAAuD;AAC1E,MAAMQ,OAAO,GAAGT,KAAK,CAACU,IAAN,CAAWC,KAAX,CAAiB,IAAjB,CAAhB;AAEAZ,EAAAA,UAAU,CAACa,kBAAX,CAA8B,YAAM;AAClCH,IAAAA,OAAO,CAACI,OAAR,CAAgB,UAACC,IAAD,EAAU;AACxB,UAAMC,SAAS,GAAGnB,SAAS,CAACoB,MAAV,CAAiB;AACjCC,QAAAA,KAAK,EAAE,CAACtB,IAAI,CAACqB,MAAL,CAAYF,IAAZ,CAAD;AAD0B,OAAjB,CAAlB;AAIAf,MAAAA,UAAU,CAACG,OAAX,CAAmBR,QAAQ,CAACwB,WAA5B,EAAyCH,SAAzC;AACAhB,MAAAA,UAAU,CAACQ,GAAX,CAAe,UAAf,EAA2BV,UAAU,CAACI,IAAD,CAArC;AACD,KAPD;AAQD,GATD;AAWAF,EAAAA,UAAU,CACPG,OADH,CACWR,QAAQ,CAACyB,eADpB,EACqCnB,KAAK,CAACI,GAD3C;AAED,CAhBD;;AAkBA,eAAe,SAASgB,SAAT,CAAmBrB,UAAnB,EAA2CE,IAA3C,EAAyD;AACtE,MAAMoB,MAAM,GAAGtB,UAAU,CAACuB,KAAX,CAAiB,mBAAjB,CAAf;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACzBtB,IAAAA,UAAU,CAACa,kBAAX,CAA8B,YAAM;AAClCS,MAAAA,MAAM,CAACR,OAAP,CAAe,UAACb,KAAD,EAAW;AACxB,YAAIA,KAAK,CAACC,IAAN,KAAe,MAAnB,EAA2B;AACzB,iBAAOO,YAAY,CAACT,UAAD,EAAaC,KAAb,EAAoBC,IAApB,CAAnB;AACD,SAFD,MAEO,IAAID,KAAK,CAACK,IAAN,CAAWoB,SAAf,EAA0B;AAC/B,iBAAO3B,iBAAiB,CAACC,UAAD,EAAaC,KAAb,EAAoBC,IAApB,CAAxB;AACD;;AACD,eAAOF,UAAU,CAACQ,GAAX,CAAe,UAAf,EAA2BV,UAAU,CAACI,IAAD,CAArC,CAAP;AACD,OAPD;AAQD,KATD;AAUD;;AACD,SAAOF,UAAU,CAACG,OAAX,CAAmBR,QAAQ,CAACgC,KAA5B,CAAP;AACD","sourcesContent":["import { Controller, Commands, Node, Text, Block } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-mo';\n;\nimport { setHeading } from '../actions';\n\nconst paragraph2Heading = (controller: Controller, block: Node, type: string) => {\n  controller\n    .command(Commands.setNodeByKey, block.key, {\n      type: (block as Block).type,\n      data: {},\n    })\n    .command(Commands.moveToEndOfNode, block);\n  return controller.run('onAction', setHeading(type));\n};\n\nconst code2Heading = (controller: Controller, block: Node, type: string) => {\n  const lineArr = block.text.split('\\n');\n\n  controller.withoutNormalizing(() => {\n    lineArr.forEach((line) => {\n      const paragraph = Paragraph.create({\n        nodes: [Text.create(line)],\n      });\n\n      controller.command(Commands.insertBlock, paragraph)\n      controller.run('onAction', setHeading(type));\n    });\n  });\n\n  controller\n    .command(Commands.removeNodeByKey, block.key);\n};\n\nexport default function transform(controller: Controller, type: string) {\n  const blocks = controller.query('getTransformNodes');\n\n  if (Array.isArray(blocks)) {\n    controller.withoutNormalizing(() => {\n      blocks.forEach((block) => {\n        if (block.type === 'code') {\n          return code2Heading(controller, block, type);\n        } else if (block.data.calloutPr) {\n          return paragraph2Heading(controller, block, type);\n        }\n        return controller.run('onAction', setHeading(type));\n      });\n    });\n  }\n  return controller.command(Commands.focus);\n}\n"],"file":"transform.js"}