import { EdgePoint, Path } from '@ali/4ever-cangjie';
import { isSubjectHeading } from "../utils";
import { SubjectPlugin } from '@ali/4ever-bamboo';
import { SELECTED_SUBJECT_KEY } from "../constants";
import { SUBJECT_PADDING_LEFT } from "../components/subject";
var getSubjectEndBlock = SubjectPlugin.queries.getSubjectEndBlock;
/**
 * 判断选区是否在议题之内
 * @param controller
 * @param selection
 * @returns
 */

export function isSelectionInSubjectHeading(controller, selection) {
  if (selection === void 0) {
    selection = controller.value.selection;
  }

  var document = controller.value.document;
  var blocks = document.getRootBlocksAtRange(selection);
  return blocks.some(function (block) {
    return isSubjectHeading(block);
  });
}
/**
 * 判断议题是否完全在选区之内
 * @param controller
 * @param subject
 * @param selection
 * @description 包含逻辑从议题的开始节点开始
 */

export function isSelectionCoverSubjectFromStart(controller, subject, selection) {
  if (selection === void 0) {
    selection = controller.value.selection;
  }

  var document = controller.value.document;
  var start = selection.getStart(document);
  var startBlock = document.getFurthsestBlock(start.key); // 开始节点不同，返回 false

  if (startBlock !== subject) {
    return false;
  } // 开始光标不在议题的开头，返回 false


  if (!start.isAtStartOfNode(startBlock)) {
    return false;
  }

  var end = selection.getEnd(document);
  var endBlock = document.getFurthsestBlock(end.key);
  var subjectEndBlock = controller.query(getSubjectEndBlock, startBlock);
  /* 这里的前置条件是光标 start 在议题首个节点的开头 */
  // 若光标在议题结束节点的末尾，返回 true

  if (endBlock && endBlock === subjectEndBlock && end.isAtEndOfNode(endBlock)) {
    return true;
  } // 若议题的末尾节点在选区的包含范围之内


  var endPath = document.getPath((endBlock == null ? void 0 : endBlock.key) || '');
  var subjectEndPath = document.getPath((subjectEndBlock == null ? void 0 : subjectEndBlock.key) || '');

  if (endPath && subjectEndPath && Path.isAfter(endPath, subjectEndPath)) {
    return true;
  }

  return false;
}
/**
 * 判断议题组是否完全在选区范围之内
 * @param controller
 * @param startBlock 议题开始节点
 * @param endBlock 议题结束节点
 * @returns
 */

export function isSelectionCoverSubject(controller, startBlock, endBlock) {
  var _controller$value = controller.value,
      selection = _controller$value.selection,
      document = _controller$value.document;
  var start = selection.getStart(document);
  var end = selection.getEnd(document);
  var isCoverStart = start.isAtStartOfNode(startBlock) || Path.isBefore(document.assertPath(start.key), document.assertPath(startBlock.key));
  var isCoverEnd = end.isAtEndOfNode(endBlock) || Path.isAfter(document.assertPath(end.key), document.assertPath(endBlock.key));

  if (isCoverStart && isCoverEnd) {
    return true;
  }

  return false;
}
export function isSubjectSelected(controller, node) {
  var data = controller.value.data;
  return data[SELECTED_SUBJECT_KEY] === node.key;
}
/**
 * 获取议题 Range
 * @param controller
 * @param subject
 * @returns
 */

export function getSubjectRange(controller, subject) {
  var selection = controller.value.selection;
  var subjectEndBlock = controller.query(getSubjectEndBlock, subject);

  if (subjectEndBlock) {
    return selection.moveAnchorToStartOfNode(subject, controller).moveFocusToEndOfNode(subjectEndBlock, controller);
  }

  return selection.moveAnchorToStartOfNode(subject, controller).moveFocusToEndOfNode(subject, controller);
}
/**
 * 获取议题 fragment
 * @param controller
 * @param subject
 * @returns
 */

export function getSubjectFragment(controller, subject) {
  var document = controller.value.document;
  var selection = getSubjectRange(controller, subject);
  return document.getFragmentAtRange(selection);
}
/**
 * 获取光标偏移量
 */

export function getCaretOffset(controller, selection) {
  if (selection.isExpanded) {
    return {};
  }

  var point = selection.anchor;
  return point.isEdgePoint() && point.edge === EdgePoint.BEFORE ? {
    left: SUBJECT_PADDING_LEFT
  } : {};
}
//# sourceMappingURL=selection.js.map