import { hotkeys, Commands } from '@ali/4ever-cangjie';
import { clearSubjectStyle, deleteSubject, selectSubject, unselectSubject } from "../commands";
import { SELECTED_SUBJECT_KEY } from "../constants";
import { hasSubjectBeenSelected } from "../helpers";
import { hasSubjectGroupBlocks, isSelectionCoverSubjectFromStart, isSubjectSelected } from "../queries";
import { isEmptyNode, isSubjectHeading } from "../utils";
import { toggleFold } from '@ali/4ever-factory';

function isDeleteBackward(event) {
  return hotkeys.isDeleteBackward(event) || hotkeys.isDeleteWordBackward(event) || hotkeys.isDeleteLineBackward(event);
}

function isDeleteForward(event) {
  return hotkeys.isDeleteForward(event) || hotkeys.isDeleteWordForward(event) || hotkeys.isDeleteLineForward(event);
}

function isDelete(event) {
  return isDeleteBackward(event) || isDeleteForward(event);
}

function createOnKeyDown() {
  return function onKeyDown(event, controller, next) {
    var _controller$value = controller.value,
        document = _controller$value.document,
        startBlock = _controller$value.startBlock,
        endBlock = _controller$value.endBlock,
        selection = _controller$value.selection;
    /**
     * 限制 1：反向删除
     * @description 若光标在议题开始处，且议题不为空，则不允许直接删除，选中议题块
     */

    if (isDeleteBackward(event.nativeEvent) && isSubjectHeading(endBlock)) {
      var end = selection.getEnd(document);

      if ( // 光标结束在议题的开头
      end.isAtStartOfNode(endBlock) && ( // 标题不为空，或有内容
      !isEmptyNode(endBlock) || controller.query(hasSubjectGroupBlocks, endBlock)) && // 未选中
      !controller.query(isSubjectSelected, endBlock)) {
        event.preventDefault();
        return controller.command(selectSubject, endBlock.key);
      }
    }
    /**
     * 限制 2：正向删除
     */


    if (isDeleteForward(event.nativeEvent) && selection.isCollapsed) {
      var focus = selection.focus; // 光标在议题标题处，标题为空，但议题不为空时，不允许删除

      if (isSubjectHeading(endBlock) && isEmptyNode(endBlock) && focus.isAtStartOfNode(endBlock) && controller.query(hasSubjectGroupBlocks, endBlock) && !controller.query(isSubjectSelected, endBlock)) {
        event.preventDefault();
        return controller.command(selectSubject, endBlock.key);
      } // 光标在议题上方的节点末尾，不允许删除


      if (endBlock && isSubjectHeading(document.getNextBlock(endBlock.key)) && focus.isAtEndOfNode(endBlock)) {
        event.preventDefault();
        return;
      }
    }
    /**
     * 限制 3：议题标题无法被换行操作分裂
     * @description 换行时清除议题的属性
     */


    if (hotkeys.isEnter(event) && isSubjectHeading(startBlock) // 在行内输入 + 号唤起工具栏时，Enter 事件会被工具栏消费
    && !controller.query('isNewLineGuideDisplay') // 在 Mention 唤起时，Enter 时间会被选人行为消费
    && !controller.query('isSelectionInMentionSuggestion')) {
      event.preventDefault(); // 若折叠则先展开

      var fold = controller.userData.get(startBlock, 'fold');

      if (fold) {
        controller.command(toggleFold, startBlock, false);
      }

      return controller.command(Commands.splitBlock).command('clearStyle').command(clearSubjectStyle);
    }
    /**
     * Effects: 选中状态删除，删除整个议题
     */


    if (isDelete(event.nativeEvent) && hasSubjectBeenSelected(controller)) {
      var selectedKey = controller.value.data[SELECTED_SUBJECT_KEY];
      var block = document.getNode(selectedKey);

      if (isSubjectHeading(block)) {
        return controller.command(deleteSubject, block).command(unselectSubject);
      }
    }
    /**
     * Effects: 议题完全包含在选区内，删除操作需要删除议题格式
     */


    if (isDelete(event.nativeEvent) && isSubjectHeading(startBlock)) {
      var _end = selection.getEnd(document);

      if ( // 若 end 选区不为 hanging
      // References: cangjie/src/commands/delete/deleteAtRange (84 Line/252 Line)
      _end.isTextPoint() && _end.offset > 0 && // 议题完全包含在选区内
      controller.query(isSelectionCoverSubjectFromStart, startBlock)) {
        next(); // 删除议题块之后，光标此时会停留在议题标题处，这里需要清除议题格式

        return controller.command('clearStyle');
      }
    }

    return next();
  };
}

export default createOnKeyDown;
//# sourceMappingURL=createOnKeyDown.js.map