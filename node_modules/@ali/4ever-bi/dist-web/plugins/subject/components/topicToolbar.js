import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import FinishButton from "./finishButton";
import { Commands, environment } from '@ali/4ever-cangjie';
import { Tooltip } from '@ali/we-design';
import { CloseNormal, SelectedNormalNormal } from '@ali/we-icon';
import { toggleFinished } from "../actions";
import Feedback from "./feedback";
var ToolbarBox = /*#__PURE__*/styled.div(["display:flex;align-items:center;height:100%;"]);
var FinishedBox = /*#__PURE__*/styled.div(["font-size:12px;position:relative;display:flex;align-items:center;justify-content:center;height:26px;cursor:pointer;transition:all 0.4s;margin-left:2px;:hover{background:rgba(126,134,142,0.12);border-radius:4px;}"]);
var FeedbackBox = /*#__PURE__*/styled(Feedback)(["position:absolute;height:30px;top:-30px;right:-12px;border:0.5px solid rgba(17,31,44,0.08);padding:6px 8px;"]);
var FeedbackTooltipBox = /*#__PURE__*/styled.div([""]);
var AtContainer = /*#__PURE__*/styled.span(["color:rgba(0,137,255,1);font-weight:bold;"]);
var tooltipStyle = {
  display: 'flex',
  alignItems: 'center',
  padding: '4px 8px',
  height: 28,
  background: 'rgba(30, 30, 30, 0.94)',
  border: '1px solid rgba(126, 134, 142, 0.16)',
  borderRadius: 4,
  fontSize: 12
};

var NotifySuccessIcon = /*#__PURE__*/_createElement(SelectedNormalNormal, {
  style: {
    color: '#00B042',
    marginRight: 3
  }
});

var NotifyFailedIcon = /*#__PURE__*/_createElement(CloseNormal, {
  style: {
    color: '#ff5219',
    marginRight: 3
  }
});

var TopicToolbar = function TopicToolbar(props) {
  var node = props.node,
      controller = props.controller,
      config = props.config,
      displayFinishButton = props.displayFinishButton;
  var _node$data$subjectPr = node.data.subjectPr,
      subjectPr = _node$data$subjectPr === void 0 ? {} : _node$data$subjectPr;
  var _subjectPr$finished = subjectPr.finished,
      finished = _subjectPr$finished === void 0 ? false : _subjectPr$finished;
  var _config$locale = config.locale,
      locale = _config$locale === void 0 ? {} : _config$locale,
      onNotifyFinishTopic = config.onNotifyFinishTopic,
      creator = config.creator,
      user = config.user;
  var finishButtonAction = locale.finishButtonAction,
      finishButtonDone = locale.finishButtonDone;
  var cancelFinishTopicTip = locale.cancelFinishTopicTip,
      notifyFinishTip = locale.notifyFinishTip,
      notifyFinishSuccess = locale.notifyFinishSuccess,
      notifyFinishFailed = locale.notifyFinishFailed,
      mentionTip = locale.mentionTip;
  var isSameUser = (creator == null ? void 0 : creator.uid) === (user == null ? void 0 : user.uid);

  var _React$useState = React.useState({
    // 当前完成是否新鲜
    fresh: false,
    // 通知是否成功
    success: false,
    // 是否已经通知
    notified: false
  }),
      finishState = _React$useState[0],
      setFinishState = _React$useState[1];

  var fresh = finishState.fresh,
      notified = finishState.notified,
      success = finishState.success;
  var handleMentionClick = React.useCallback(function () {
    var startBlock = controller.value.startBlock;

    if ((startBlock == null ? void 0 : startBlock.key) !== node.key) {
      controller.command(Commands.moveToEndOfNode, node);
    }

    controller.dispatch('activeMention');
  }, [controller, node]);
  /**
   * 点击通知议题反馈
   */

  var handleNotifyClick = React.useCallback(function () {
    if (typeof onNotifyFinishTopic === 'function') {
      onNotifyFinishTopic({
        node: node,
        title: node.text
      }).then(function () {
        setFinishState({
          fresh: true,
          notified: true,
          success: true
        });
      })["catch"](function () {
        setFinishState({
          fresh: true,
          notified: true,
          success: false
        });
      });
    } else {
      setFinishState({
        fresh: false,
        notified: false,
        success: false
      });
    }
  }, [node, onNotifyFinishTopic]);
  /**
   * 点击完成议题填报
   */

  var handleFinishClick = React.useCallback(function () {
    controller.run('onAction', toggleFinished({
      node: node,
      finished: !finished
    }));

    if (!finished) {
      setFinishState({
        fresh: !isSameUser,
        notified: false,
        success: false
      });

      if (!isSameUser) {
        handleNotifyClick();
      }
    } else {
      setFinishState(function (prevState) {
        return _extends({}, prevState, {
          fresh: !finished
        });
      });
    }
  }, [controller, finished, isSameUser, node, handleNotifyClick]);
  /**
   * 议题完成时，弹出发送 Tip，展示 7s
   */

  React.useEffect(function () {
    if (!fresh) {
      return undefined;
    }

    var timer = window.setTimeout(function () {
      setFinishState(function (prevState) {
        return _extends({}, prevState, {
          fresh: false
        });
      });
    }, 7000);
    return function () {
      window.clearTimeout(timer);
    };
  }, [fresh]);

  var feedbackTip = /*#__PURE__*/_createElement(React.Fragment, null, success ? NotifySuccessIcon : NotifyFailedIcon, success ? notifyFinishSuccess : notifyFinishFailed); // 通知完成之前，即使 finish 也显示为未完成的 tooltip，避免文案突然闪变


  var finishTip = finished && (notified || isSameUser) ? /*#__PURE__*/_createElement(FeedbackTooltipBox, null, cancelFinishTopicTip) : /*#__PURE__*/_createElement(FeedbackTooltipBox, null, notifyFinishTip, creator != null && creator.nick ? /*#__PURE__*/_createElement(AtContainer, null, " @" + creator.nick + " ") : '');
  return /*#__PURE__*/_createElement(ToolbarBox, null, !environment.IS_MOBILE && displayFinishButton && /*#__PURE__*/_createElement(Tooltip, {
    disabled: fresh,
    title: finishTip,
    placement: "top",
    overlayStyle: tooltipStyle
  }, /*#__PURE__*/_createElement(FinishedBox, {
    onClick: handleFinishClick
  }, /*#__PURE__*/_createElement(FinishButton, {
    finished: finished,
    text: finished ? finishButtonDone : finishButtonAction
  }))), /*#__PURE__*/_createElement(FeedbackBox, {
    visible: fresh && notified
  }, feedbackTip));
};

TopicToolbar.displayName = 'TopicToolbar';
export default TopicToolbar;
//# sourceMappingURL=topicToolbar.js.map