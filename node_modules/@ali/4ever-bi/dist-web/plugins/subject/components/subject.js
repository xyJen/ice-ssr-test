import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Commands, useSelectionData, environment, useUserData, useSelectingHots } from '@ali/4ever-cangjie';
import styled from 'styled-components';
import { TinyColor } from '@ctrl/tinycolor';
import Content from "./content";
import { HeadingGroupPlugin, SubjectPlugin, GroupFactory } from '@ali/4ever-bamboo';
import { isEmptyNode, isSubjectHeading } from "../utils";
import TopicToolbar from "./topicToolbar";
import InsertBar from "./insertBar";
import { getSubjectBorderColor } from "../helpers";
import MentionButton from "./mentionButton";
import useHighlight from "../hooks/useHighlight";
import { isSubjectSelected } from "../queries";
import classnames from 'classnames';
var isSelectionInFoldArea = GroupFactory.isSelectionInFoldArea;
var Title = HeadingGroupPlugin.Title,
    actions = HeadingGroupPlugin.actions;
var components = SubjectPlugin.components;
var InlinePlaceholder = components.InlinePlaceholder,
    InnerCardWrapperForMention = components.InnerCardWrapperForMention,
    Placeholder = components.Placeholder;
var toggleFold = actions.toggleFold;
export var SUBJECT_PADDING_LEFT = 19;
var SubjectBox = /*#__PURE__*/styled.div(["position:relative;padding-left:", "px;margin:40px 0;& [data-name=\"group-fold-btn\"]{left:-18px;}&.selected{background-color:rgba(17,31,44,0.08);}"], SUBJECT_PADDING_LEFT);
var ContentBox = /*#__PURE__*/styled(Content)(["position:relative;& > [data-type='heading-1-group'] > [data-name='heading-group-title']{padding-right:", "px;}& .draggable-highlight.shadow-highlight{border-radius:0;box-shadow:none;}"], function (props) {
  return props.paddingRight || 0;
});
var BorderBar = /*#__PURE__*/styled.div(["position:absolute;left:0;top:0;width:3px;border-radius:1.5px;height:100%;background:", ";transition:all 0.2s ease-in-out;"], function (props) {
  return props.color;
});
var HighlightBox = /*#__PURE__*/styled.div(["position:absolute;left:0;right:0;top:0;bottom:0;background-color:", ";@keyframes highlight-in{from{}to{background-color:transparent;}}animation-fill-mode:forwards;animation-name:highlight-in;animation-duration:2s;"], function (props) {
  return props.color;
});
var TitleContent = /*#__PURE__*/styled.div(["& h1{font-size:20px;}"]);
var TitleBox = /*#__PURE__*/styled(Title)(["padding-right:", "px;& .data-comment-bubbles{left:", "px;}"], function (props) {
  return props.paddingRight;
}, function (props) {
  return props.paddingRight;
});
var ToolBox = /*#__PURE__*/styled.div(["position:absolute;height:28px;right:0;top:0;display:flex;align-items:center;justify-content:flex-end;"]);

/**
 * 议题区块
 * @param props
 * @returns
 */
var Subject = function Subject(props) {
  var _config$locale, _config$locale2;

  var controller = props.controller,
      node = props.node,
      attributes = props.attributes,
      isSelected = props.isSelected,
      config = props.config,
      children = props.children;
  var fold = useUserData(node, 'fold') || false;
  var _node$data$subjectPr = node.data.subjectPr,
      subjectPr = _node$data$subjectPr === void 0 ? {} : _node$data$subjectPr;
  var reviewConfig = config.review;

  var _ref = reviewConfig || {},
      DingIcon = _ref.renderDingIcon,
      MeetingClock = _ref.renderMeetingClock,
      ReviewPlaceholder = _ref.renderReviewPlaceholder;

  var _subjectPr$id = subjectPr.id,
      id = _subjectPr$id === void 0 ? '' : _subjectPr$id,
      _subjectPr$name = subjectPr.name,
      name = _subjectPr$name === void 0 ? 'topic' : _subjectPr$name;
  var first = node.nodes[0];
  var topicTitlePlaceholderBefore = config == null ? void 0 : (_config$locale = config.locale) == null ? void 0 : _config$locale.topicTitlePlaceholderBefore;
  var topicTitlePlaceholderAfter = config == null ? void 0 : (_config$locale2 = config.locale) == null ? void 0 : _config$locale2.topicTitlePlaceholderAfter;

  var _useHighlight = useHighlight(controller, id),
      highlight = _useHighlight[0],
      setHighlight = _useHighlight[1];

  var foldRef = React.useRef(fold);
  var toolRef = React.useRef(null);

  var _React$useState = React.useState(0),
      toolWidth = _React$useState[0],
      setToolWidth = _React$useState[1];

  var _controller$value = controller.value,
      startBlock = _controller$value.startBlock,
      endBlock = _controller$value.endBlock;
  var initFocused = !!startBlock && startBlock.key === first.key && !!endBlock && endBlock.key === first.key;

  var _React$useState2 = React.useState(initFocused),
      focused = _React$useState2[0],
      setFocused = _React$useState2[1];

  var document = controller.value.document;
  var displayFinishButton = !(name === 'topic' && isEmptyNode(first)) && focused; // 查询当前议题是否是第一个议题
  // NOTE: 这个写法感觉还是存在查询性能问题，但是目前没有其他比较好的解法

  var isFirst = React.useMemo(function () {
    var path = document.getPath(first.key);

    if (path) {
      var index = path[0];

      for (var i = index - 1; i >= 0; i--) {
        var $node = document.nodes[i];

        if (isSubjectHeading($node)) {
          return false;
        }
      }

      return true;
    }

    return false;
  }, [document, first]);
  var setFocusedValue = React.useCallback(function () {
    var _controller$value2 = controller.value,
        newStartBlock = _controller$value2.startBlock,
        newEndBlock = _controller$value2.endBlock;

    if (newStartBlock && newStartBlock.key === first.key && newEndBlock && newEndBlock.key === first.key) {
      if (focused === false) {
        setFocused(true);
      }
    } else if (focused === true) {
      setFocused(false);
    }
  }, [controller, first, focused]);
  useSelectionData(controller.selectionData$, null, setFocusedValue, []);
  useSelectingHots(controller, setFocusedValue);
  React.useEffect(function () {
    setFocusedValue();
  }, [startBlock, endBlock, setFocusedValue]);
  var handleFoldChange = React.useCallback(function (_fold) {
    controller.run('onAction', toggleFold({
      node: first,
      fold: _fold
    })); // 折叠标题后，将选区移动至标题行首，避免页面聚焦造成的抖动

    controller.command(Commands.moveToStartOfNode, first);
  }, [controller, first]);
  var color = React.useMemo(function () {
    return getSubjectBorderColor(name);
  }, [name]);
  var refreshToolWidth = React.useCallback(function () {
    var tool = toolRef.current;

    if (tool && tool.offsetWidth !== toolWidth) {
      setToolWidth(tool.offsetWidth);
    }
  }, [toolWidth]); // fix: https://aone.alibaba-inc.com/v2/project/897543/bug/36243039

  React.useEffect(function () {
    if (!foldRef.current && fold && isSelected && isSelectionInFoldArea(controller, first)) {
      controller.command(Commands.moveToEndOfNode, first);
    }

    foldRef.current = fold;
  }, [controller, first, fold, isSelected]);
  React.useLayoutEffect(function () {
    refreshToolWidth();
  }, [displayFinishButton]);

  var displayTitlePlaceholder = function displayTitlePlaceholder(item) {
    // 类型是议题 && 非预览模式 && 没有标题 && 有 placeholder 文字配置才展示
    if (name === 'topic' && isEmptyNode(item) && topicTitlePlaceholderBefore && topicTitlePlaceholderAfter) {
      return true;
    }

    return false;
  };

  var handleMentionClick = React.useCallback(function () {
    var startBlock = controller.value.startBlock;

    if ((startBlock == null ? void 0 : startBlock.key) !== first.key) {
      controller.command(Commands.moveToEndOfNode, first);
    }

    controller.dispatch('activeMention');
  }, [controller, first]);

  var _ref2 = /*#__PURE__*/_createElement(InlinePlaceholder, null, topicTitlePlaceholderBefore, ' @ ', topicTitlePlaceholderAfter);

  var _ref3 = /*#__PURE__*/_createElement(InlinePlaceholder, null, topicTitlePlaceholderBefore, /*#__PURE__*/_createElement(InnerCardWrapperForMention, null, /*#__PURE__*/_createElement(MentionButton, {
    onClick: handleMentionClick
  })), topicTitlePlaceholderAfter);

  var renderTitlePlaceholder = function renderTitlePlaceholder() {
    if (name === 'topic') {
      if (environment.IS_MOBILE) {
        return _ref2;
      }

      return _ref3;
    }

    return '';
  };

  var _ref4 = /*#__PURE__*/_createElement(DingIcon, {
    node: node
  });

  var _ref5 = /*#__PURE__*/_createElement(ReviewPlaceholder, {
    node: node,
    type: "iconOnly"
  });

  var _ref6 = /*#__PURE__*/_createElement(MeetingClock, {
    node: node,
    refreshToolWidth: refreshToolWidth
  });

  var renderTitleToolbar = function renderTitleToolbar(displayFinishButton) {
    if (displayFinishButton === void 0) {
      displayFinishButton = true;
    }

    var toolbars = [];

    if (name === 'review' && DingIcon) {
      toolbars.push(_ref4);
    }

    if (name === 'review' && ReviewPlaceholder) {
      toolbars.push(_ref5);
    }

    if (name === 'topic') {
      MeetingClock && toolbars.push(_ref6);
      toolbars.push( /*#__PURE__*/_createElement(TopicToolbar, {
        displayFinishButton: displayFinishButton,
        node: first,
        controller: controller,
        config: config
      }));
    }

    return toolbars;
  }; // 切割议题的标题和内容块


  var titleNode;
  var titleElement;
  var contentElements;

  if (Array.isArray(children) && children.length >= 1) {
    titleNode = node.nodes[0];
    titleElement = children[0];
    contentElements = children.slice(1);
  } else {
    return /*#__PURE__*/_createElement(React.Fragment, null, children);
  }

  var className = classnames({
    selected: controller.query(isSubjectSelected, first)
  });
  return /*#__PURE__*/_createElement(SubjectBox, _extends({}, attributes, {
    className: className,
    key: node.key,
    id: id,
    "data-block-uuid": id,
    paddingRight: toolWidth,
    "data-cangjie-group-block": true,
    "data-name": "subject-group",
    "data-subject-name": name,
    "data-type": node.type,
    "data-foldable": true
  }), !environment.IS_MOBILE && isFirst && /*#__PURE__*/_createElement(InsertBar, {
    style: {
      top: -40
    },
    config: config,
    node: first,
    direction: "before",
    controller: controller
  }), /*#__PURE__*/_createElement(BorderBar, {
    color: color
  }), highlight && /*#__PURE__*/_createElement(HighlightBox, {
    color: new TinyColor(color).setAlpha(0.3).toRgbString(),
    onAnimationEnd: function onAnimationEnd() {
      return setHighlight(false);
    }
  }), /*#__PURE__*/_createElement(TitleBox, {
    dataName: "subject-group-title",
    fold: fold,
    onChange: handleFoldChange,
    paddingRight: toolWidth
  }, /*#__PURE__*/_createElement(TitleContent, {
    "data-name": "subject-group-title-content"
  }, /*#__PURE__*/_createElement(Placeholder, {
    controller: controller,
    node: titleNode,
    display: displayTitlePlaceholder,
    placeholder: renderTitlePlaceholder()
  }, titleElement)), /*#__PURE__*/_createElement(ToolBox, {
    ref: toolRef
  }, renderTitleToolbar(displayFinishButton))), /*#__PURE__*/_createElement(ContentBox, {
    config: config,
    dataName: "subject-group-content",
    controller: controller,
    node: node,
    fold: fold,
    paddingRight: toolWidth
  }, contentElements), !environment.IS_MOBILE && /*#__PURE__*/_createElement(InsertBar, {
    style: {
      bottom: -40
    },
    config: config,
    node: first,
    direction: "after",
    controller: controller
  }));
};

Subject.displayName = 'Subject';
export default Subject;
//# sourceMappingURL=subject.js.map