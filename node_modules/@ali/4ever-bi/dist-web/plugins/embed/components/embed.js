import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useZoom, useZoomContainer } from '@ali/4ever-cangjie';
import { sanitizeUrl } from '@ali/4ever-utils';
import { EmbedPlugin, useScrollableContainer, theme } from '@ali/4ever-bamboo';
import { EmbedFilePreviewWrapper, PreviewContentWrapper, EmbedFilePreviewMask, PreviewError, PreviewErrorText, PreviewErrorRetry } from "./styled";
import { updateFile } from '@ali/4ever-factory';
import { Resizable } from '@ali/4ever-component';
import { EmbedInlineToolbar } from '@ali/4ever-factory';
var DEFAULT_PREVIEW_HEIGHT = theme.embed.previewHeight;
var EmbedPreviewHeader = EmbedPlugin.EmbedPreviewHeader,
    EmbedDownloadButton = EmbedPlugin.EmbedDownloadButton,
    EmbedCard = EmbedPlugin.EmbedCard;
var MIN_PREVIEW_HEIGHT = 150;
var MAX_PREVIEW_HEIGHT = 800;
var HEIGHT_RANGE = [MIN_PREVIEW_HEIGHT, MAX_PREVIEW_HEIGHT];

var Embed = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Embed, _PureComponent);

  function Embed(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.ref = /*#__PURE__*/React.createRef();
    _this.interval = null;
    _this.previewTimeout = null;
    _this.previewUnfoldTimeout = null;

    _this.getNodeData = function () {
      var node = _this.props.node;
      var data = node.data;
      return data;
    };

    _this.onSwitchViewType = function (viewType) {
      var _this$props = _this.props,
          controller = _this$props.controller,
          node = _this$props.node;
      var data = node.data;

      var _this$getNodeData = _this.getNodeData(),
          prevViewType = _this$getNodeData.viewType;

      if (prevViewType === viewType) {
        return;
      }

      controller.run('onAction', updateFile(node, _extends({}, data, {
        viewType: viewType
      })));

      if (viewType === 'preview') {
        _this.setState({
          previewUrl: ''
        });
      }
    };

    _this.onDownloadFile = function () {
      var _this$getNodeData2 = _this.getNodeData(),
          src = _this$getNodeData2.src,
          name = _this$getNodeData2.name,
          type = _this$getNodeData2.type,
          size = _this$getNodeData2.size;

      var onDownload = _this.props.onDownload;

      if (onDownload) {
        onDownload(src, {
          name: name,
          type: type,
          size: size
        });
      }
    };

    _this.handleResizeStart = function () {
      _this.setState({
        dragging: true
      });
    };

    _this.handleResize = function (e, size) {
      _this.setState({
        height: size.height
      });
    };

    _this.handleResizeStop = function () {
      var height = _this.state.height;
      var _this$props2 = _this.props,
          controller = _this$props2.controller,
          node = _this$props2.node;
      var data = node.data;

      _this.setState({
        dragging: false
      });

      controller.run('onAction', updateFile(node, _extends({}, data, {
        previewSize: {
          height: height
        }
      })));
    };

    _this.showPreviewSlideDown = function () {
      // slidedown效果
      _this.previewTimeout = setTimeout(function () {
        _this.setState({
          height: 36
        });
      });
      _this.previewUnfoldTimeout = setTimeout(function () {
        _this.setState({
          height: DEFAULT_PREVIEW_HEIGHT
        });
      }, 10);
    };

    _this.preview = function () {
      var previewing = _this.state.previewing;

      var _this$getNodeData3 = _this.getNodeData(),
          src = _this$getNodeData3.src;

      var onPreview = _this.props.onPreview;

      if (previewing) {
        return;
      }

      _this.setState({
        previewing: true
      });

      if (!onPreview) {
        return;
      }

      onPreview(src).then(function (res) {
        var truePreviewUrl = res.previewUrl;

        if (truePreviewUrl) {
          _this.setState({
            previewUrl: truePreviewUrl,
            previewing: false
          });
        }
      })["catch"](function () {
        _this.setState({
          previewError: true,
          previewing: false
        });
      });
    };

    _this.reTryPreview = function () {
      _this.setState({
        previewError: false
      });

      _this.preview();
    };

    var _node = props.node,
        allowDownload = props.allowDownload;
    var _data = _node.data;
    var previewSize = _data.previewSize,
        _viewType = _data.viewType;
    var _height = 0;

    if (_viewType === 'preview') {
      if (previewSize) {
        // @ts-ignore
        _height = previewSize.height;
      } else {
        _height = DEFAULT_PREVIEW_HEIGHT;
      }
    }

    _this.state = {
      height: _height,
      previewUrl: '',
      previewError: false,
      previewing: false,
      dragging: false,
      allowDownload: typeof allowDownload === 'boolean' ? allowDownload : false // 如果布尔值，直接设置

    };
    return _this;
  }

  var _proto = Embed.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var _this$getNodeData4 = this.getNodeData(),
        src = _this$getNodeData4.src;

    var _this$props3 = this.props,
        node = _this$props3.node,
        allowDownload = _this$props3.allowDownload;
    var data = node.data;
    var viewType = data.viewType;

    if (viewType === 'preview' && src) {
      this.preview();
    }

    if (typeof allowDownload === 'function') {
      allowDownload(src).then(function (res) {
        _this2.setState({
          allowDownload: res
        });
      });
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var prevData = prevProps.node.data;
    var data = this.props.node.data;
    var prevViewType = prevData.viewType;
    var viewType = data.viewType;

    if (prevViewType !== viewType && viewType === 'preview') {
      this.showPreviewSlideDown();
      this.preview();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.previewTimeout) {
      clearTimeout(this.previewTimeout);
      this.previewTimeout = null;
    }

    if (this.previewUnfoldTimeout) {
      clearTimeout(this.previewUnfoldTimeout);
      this.previewUnfoldTimeout = null;
    }

    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
  };

  _proto.renderCard = function renderCard() {
    var allowDownload = this.state.allowDownload;

    var _this$getNodeData5 = this.getNodeData(),
        name = _this$getNodeData5.name,
        size = _this$getNodeData5.size;

    var _this$props4 = this.props,
        isSelected = _this$props4.isSelected,
        node = _this$props4.node,
        locale = _this$props4.locale;
    return /*#__PURE__*/_createElement(EmbedCard, {
      name: name,
      allowDownload: allowDownload,
      isSelected: isSelected,
      node: node,
      locale: locale,
      onDownloadFile: this.onDownloadFile,
      size: size
    });
  };

  _proto.renderPreviewContent = function renderPreviewContent() {
    var _this$state = this.state,
        previewUrl = _this$state.previewUrl,
        previewError = _this$state.previewError;
    var _this$props$locale = this.props.locale,
        locale = _this$props$locale === void 0 ? {} : _this$props$locale;

    if (previewError) {
      return /*#__PURE__*/_createElement(PreviewError, null, /*#__PURE__*/_createElement(PreviewErrorText, null, locale.previewError, /*#__PURE__*/_createElement(PreviewErrorRetry, {
        onClick: this.reTryPreview
      }, locale.reTryPreview)));
    }

    return /*#__PURE__*/_createElement(React.Fragment, null, previewUrl ? /*#__PURE__*/_createElement("iframe", {
      style: {
        width: '100%',
        height: '100%',
        border: 'none',
        background: '#EDEDED'
      },
      title: "preview",
      src: sanitizeUrl(previewUrl)
    }) : null);
  };

  _proto.renderPreview = function renderPreview() {
    var _this3 = this;

    var _this$state2 = this.state,
        height = _this$state2.height,
        dragging = _this$state2.dragging,
        allowDownload = _this$state2.allowDownload;

    var _this$getNodeData6 = this.getNodeData(),
        type = _this$getNodeData6.type,
        name = _this$getNodeData6.name,
        size = _this$getNodeData6.size;

    var _this$props5 = this.props,
        isSelected = _this$props5.isSelected,
        scale = _this$props5.scale,
        zoomContainer = _this$props5.zoomContainer,
        locale = _this$props5.locale,
        controller = _this$props5.controller;
    var transitionProperty = dragging ? 'none' : 'height';

    var handlePreviewContentMouseDown = function handlePreviewContentMouseDown(e) {
      e.preventDefault();
    };

    var enableBorderHighlight = controller.query('enableBorderHighlight');
    return /*#__PURE__*/_createElement(Resizable, {
      axis: "y",
      visible: isSelected,
      width: Infinity,
      height: Math.min(height || 0, MAX_PREVIEW_HEIGHT),
      heightRange: HEIGHT_RANGE,
      onResize: this.handleResize,
      onResizeStop: this.handleResizeStop,
      onResizeStart: this.handleResizeStart,
      speed: 1.0 / scale,
      zoomContainer: zoomContainer,
      isActive: isSelected,
      enableBorderHighlight: enableBorderHighlight
    }, /*#__PURE__*/_createElement(EmbedFilePreviewWrapper, {
      isSelected: isSelected,
      style: {
        height: height,
        transitionProperty: transitionProperty
      },
      "data-testid": "embed-preview",
      "data-type": "embed-" + type
    }, /*#__PURE__*/_createElement(EmbedPreviewHeader, {
      type: type,
      name: name,
      size: size,
      renderExtra: function renderExtra() {
        return /*#__PURE__*/_createElement(EmbedDownloadButton, {
          title: locale == null ? void 0 : locale.title,
          onDownloadFile: _this3.onDownloadFile,
          allowDownload: allowDownload
        });
      }
    }), /*#__PURE__*/_createElement(PreviewContentWrapper, {
      onMouseDown: handlePreviewContentMouseDown
    }, this.renderPreviewContent(), /*#__PURE__*/_createElement(EmbedFilePreviewMask, {
      style: {
        display: !isSelected || dragging ? 'block' : 'none'
      }
    }))));
  };

  _proto.renderInlineToolbar = function renderInlineToolbar() {
    var _this$props6 = this.props,
        controller = _this$props6.controller,
        node = _this$props6.node,
        locale = _this$props6.locale,
        enableFilePreview = _this$props6.enableFilePreview;
    return /*#__PURE__*/_createElement(EmbedInlineToolbar, {
      controller: controller,
      node: node,
      triggerNode: this.ref.current,
      locale: locale || {},
      onSwitchViewType: this.onSwitchViewType,
      isMoreButtonShown: enableFilePreview
    });
  };

  _proto.render = function render() {
    var _this$getNodeData7 = this.getNodeData(),
        viewType = _this$getNodeData7.viewType;

    var _this$props7 = this.props,
        attributes = _this$props7.attributes,
        isSelected = _this$props7.isSelected,
        controller = _this$props7.controller;
    var isCollapsed = controller.value.selection.isCollapsed; // const hasHoverToolbar = controller.query('hasHoverToolbar', 'embed');

    return /*#__PURE__*/_createElement(React.Fragment, null, isSelected && isCollapsed ? this.renderInlineToolbar() : null, /*#__PURE__*/_createElement("div", _extends({}, attributes, {
      ref: this.ref
    }), viewType === 'preview' ? this.renderPreview() : this.renderCard()));
  };

  return Embed;
}(PureComponent);

var Container = function Container(props) {
  var scrollableContainer = useScrollableContainer();
  var zoomContainer = useZoomContainer() || document.body;
  var scale = useZoom();
  return /*#__PURE__*/_createElement(Embed, _extends({}, props, {
    scrollableContainer: scrollableContainer,
    zoomContainer: zoomContainer,
    scale: scale
  }));
};

export default Container;
//# sourceMappingURL=embed.js.map