import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { EmbedPlugin, useScrollableContainer } from '@ali/4ever-bamboo';
import { EmbedInlineToolbar } from '@ali/4ever-factory';
var MobileEmbedCard = EmbedPlugin.MobileEmbedCard;

var Embed = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Embed, _PureComponent);

  function Embed() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;
    _this.ref = /*#__PURE__*/React.createRef();
    _this.previewRef = /*#__PURE__*/React.createRef();

    _this.getNodeData = function () {
      var node = _this.props.node;

      var _ref = node || {},
          data = _ref.data;

      return data;
    };

    return _this;
  }

  var _proto = Embed.prototype;

  _proto.renderCard = function renderCard() {
    var _this$getNodeData = this.getNodeData(),
        name = _this$getNodeData.name,
        src = _this$getNodeData.src,
        type = _this$getNodeData.type,
        size = _this$getNodeData.size;

    var onPreview = this.props.onPreview;
    return /*#__PURE__*/_createElement(MobileEmbedCard, {
      name: name,
      onPreview: onPreview,
      src: src,
      type: type,
      size: size
    });
  };

  _proto.renderInlineToolbar = function renderInlineToolbar() {
    var _this$props = this.props,
        controller = _this$props.controller,
        node = _this$props.node,
        locale = _this$props.locale;
    return /*#__PURE__*/_createElement(EmbedInlineToolbar, {
      controller: controller,
      node: node,
      locale: locale,
      triggerNode: this.ref.current
    });
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        attributes = _this$props2.attributes,
        isSelected = _this$props2.isSelected;
    return /*#__PURE__*/_createElement(React.Fragment, null, isSelected ? this.renderInlineToolbar() : null, /*#__PURE__*/_createElement("div", _extends({}, attributes, {
      ref: this.ref
    }), this.renderCard()));
  };

  return Embed;
}(PureComponent);

var Container = function Container(props) {
  var scrollableContainer = useScrollableContainer();
  return /*#__PURE__*/_createElement(Embed, _extends({}, props, {
    scrollableContainer: scrollableContainer
  }));
};

export default Container;
//# sourceMappingURL=embed.js.map