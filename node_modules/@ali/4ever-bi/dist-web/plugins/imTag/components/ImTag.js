import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import React, { useEffect } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ImTagPlugin, CalendarCardPlugin, calculatedPluginSize } from '@ali/4ever-bamboo';
import { setTagData } from '@ali/4ever-factory';
import { isChangeTagData } from "../utils";
var IMTAG_MIN_CONTAINER_WIDTH = ImTagPlugin.IMTAG_MIN_CONTAINER_WIDTH,
    TextWrapper = ImTagPlugin.TextWrapper;
var IMTAG_MEASURE_STRING = ImTagPlugin.IMTAG_MEASURE_STRING,
    IMTAG_DEFAULT_HEIGHT = ImTagPlugin.IMTAG_DEFAULT_HEIGHT,
    IMTAG_INIT_WIDTH = ImTagPlugin.IMTAG_INIT_WIDTH,
    IMTAG_MAX_WIDTH = ImTagPlugin.IMTAG_MAX_WIDTH,
    ImTagContainer = ImTagPlugin.ImTagContainer;
var preventDefaultOnClick = CalendarCardPlugin.preventDefaultOnClick;
export var ImTag = function ImTag(_ref) {
  var props = _ref.props,
      controller = _ref.controller,
      imTagConfig = _ref.imTagConfig;

  var _ref2 = imTagConfig || {},
      _ref2$locale = _ref2.locale,
      locale = _ref2$locale === void 0 ? {
    imFrom: IMTAG_MEASURE_STRING
  } : _ref2$locale,
      jumpToConversition = _ref2.jumpToConversition,
      getConversitionNameFromCid = _ref2.getConversitionNameFromCid;

  var node = props.node;
  var _ref3 = node.data,
      height = _ref3.height,
      _ref3$width = _ref3.width,
      width = _ref3$width === void 0 ? 0 : _ref3$width,
      metadata = _ref3.metadata;

  var _ref4 = metadata || {},
      _ref4$imTitle = _ref4.imTitle,
      imTitle = _ref4$imTitle === void 0 ? '' : _ref4$imTitle,
      cid = _ref4.cid;

  var onClick = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();

    if (jumpToConversition && cid) {
      jumpToConversition(cid);
    }
  }, [cid, jumpToConversition]);
  useEffect(function () {
    if (!getConversitionNameFromCid) return undefined;
    var isStop = false;

    var updateImTitle = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(title) {
        var targetWidth, newData;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getMeasureWidth(IMTAG_MEASURE_STRING + " " + title);

              case 2:
                targetWidth = _context.sent;

                if (!( // 不同端渲染时计算的宽度会有 ±2 像素的差异。
                Math.abs(targetWidth - width) < 3 || // Case1： width 为默认宽度时更新标签（后端根据场景不同，选择性设置 imTitle 值，但是宽度未更新）
                // Case2： imTitle 相同时不更新
                width !== IMTAG_INIT_WIDTH && title === imTitle)) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return");

              case 5:
                if (targetWidth > IMTAG_MAX_WIDTH) targetWidth = IMTAG_MAX_WIDTH;
                newData = {
                  width: targetWidth,
                  height: IMTAG_DEFAULT_HEIGHT,
                  metadata: {
                    cid: cid,
                    imTitle: title
                  }
                };

                if (isChangeTagData(node.data, newData)) {
                  controller.run('onAction', setTagData(node, newData));
                }

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function updateImTitle(_x) {
        return _ref5.apply(this, arguments);
      };
    }();

    var title = imTitle;
    getConversitionNameFromCid(cid).then( /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(res) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!isStop) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                if (res.success) {
                  _context2.next = 4;
                  break;
                }

                return _context2.abrupt("return");

              case 4:
                if (res.success) {
                  title = res.imTitle;
                }

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref6.apply(this, arguments);
      };
    }())["finally"]( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return updateImTitle(title);

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    return function () {
      isStop = true;
    };
  }, [cid, controller, getConversitionNameFromCid, imTitle, node, width]);
  return /*#__PURE__*/_createElement(ImTagContainer, {
    width: width,
    height: height,
    onClick: onClick,
    onMouseDown: preventDefaultOnClick,
    text: locale.imFrom + " " + imTitle
  });
}; // 获取测量宽度，最小宽度是28px，字体是14

export var getMeasureWidth = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(text) {
    var _yield$calculatedPlug, width;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return calculatedPluginSize( /*#__PURE__*/_createElement(TextWrapper, null, text), Number.MAX_SAFE_INTEGER);

          case 2:
            _yield$calculatedPlug = _context4.sent;
            width = _yield$calculatedPlug.width;
            return _context4.abrupt("return", width + IMTAG_MIN_CONTAINER_WIDTH);

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function getMeasureWidth(_x3) {
    return _ref8.apply(this, arguments);
  };
}();
//# sourceMappingURL=ImTag.js.map