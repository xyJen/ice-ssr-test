import { Commands, Text } from '@ali/4ever-cangjie';
import { Paragraph } from '@ali/4ever-mo';
;
import toogleQuote from "./toggleQuote";

var paragraph2Blockquote = function paragraph2Blockquote(controller, block) {
  controller.command(Commands.setNodeByKey, block.key, {
    type: block.type,
    data: {}
  }).command(Commands.moveToEndOfNode, block);
  toogleQuote(controller);
};

var heading2Blockquote = function heading2Blockquote(controller, block) {
  controller.command(Commands.setNodeByKey, block.key, {
    type: Paragraph.TYPE,
    data: {}
  }).command(Commands.moveToEndOfNode, block);
  controller.command('setHeading', Paragraph.TYPE);
  toogleQuote(controller);
};

var code2Blockquote = function code2Blockquote(controller, block) {
  var lineArr = block.text.split('\n');
  controller.command(Commands.removeNodeByKey, block.key);
  controller.withoutNormalizing(function () {
    lineArr.forEach(function (line) {
      var paragraph = Paragraph.create({
        nodes: [Text.create(line)]
      });
      controller.command(Commands.insertBlock, paragraph);
      toogleQuote(controller);
    });
  });
  return controller;
};

export default function transform(controller) {
  var blocks = controller.query('getTransformNodes');

  if (Array.isArray(blocks)) {
    controller.withoutNormalizing(function () {
      blocks.forEach(function (block) {
        if (block.type === 'code') {
          return code2Blockquote(controller, block);
        } else if (block.data.calloutPr) {
          return paragraph2Blockquote(controller, block);
        } else if (block.data.list) {
          return paragraph2Blockquote(controller, block);
        } else if (block.type !== 'paragraph') {
          return heading2Blockquote(controller, block);
        }

        toogleQuote(controller);
      });
    });
  }

  return controller.command(Commands.focus);
}
//# sourceMappingURL=transform.js.map