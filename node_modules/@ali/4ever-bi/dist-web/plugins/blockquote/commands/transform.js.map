{"version":3,"sources":["../../../../../src/plugins/blockquote/commands/transform.ts"],"names":["Commands","Text","Paragraph","toogleQuote","paragraph2Blockquote","controller","block","command","setNodeByKey","key","type","data","moveToEndOfNode","heading2Blockquote","TYPE","code2Blockquote","lineArr","text","split","removeNodeByKey","withoutNormalizing","forEach","line","paragraph","create","nodes","insertBlock","transform","blocks","query","Array","isArray","calloutPr","list","focus"],"mappings":"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","sourcesContent":["import { Controller, Commands, Node, Text, Block } from '@ali/4ever-cangjie';\nimport { Paragraph } from '@ali/4ever-mo';\n;\nimport toogleQuote from './toggleQuote';\n\nconst paragraph2Blockquote = (controller: Controller, block: Block) => {\n  controller\n    .command(Commands.setNodeByKey, block.key, {\n      type: block.type,\n      data: {},\n    })\n    .command(Commands.moveToEndOfNode, block);\n  toogleQuote(controller);\n};\n\nconst heading2Blockquote = (controller: Controller, block: Node) => {\n  controller\n    .command(Commands.setNodeByKey, block.key, {\n      type: Paragraph.TYPE,\n      data: {},\n    })\n    .command(Commands.moveToEndOfNode, block);\n\n  controller.command('setHeading', Paragraph.TYPE);\n  toogleQuote(controller);\n};\n\nconst code2Blockquote = (controller: Controller, block: Node) => {\n  const lineArr = block.text.split('\\n');\n  controller.command(Commands.removeNodeByKey, block.key);\n\n  controller.withoutNormalizing(() => {\n    lineArr.forEach((line) => {\n      const paragraph = Paragraph.create({\n        nodes: [Text.create(line)],\n      });\n\n      controller\n        .command(Commands.insertBlock, paragraph);\n      toogleQuote(controller);\n    });\n  });\n\n  return controller;\n};\n\nexport default function transform(controller: Controller) {\n  const blocks = controller.query('getTransformNodes');\n  if (Array.isArray(blocks)) {\n    controller.withoutNormalizing(() => {\n      blocks.forEach((block) => {\n        if (block.type === 'code') {\n          return code2Blockquote(controller, block);\n        } else if (block.data.calloutPr) {\n          return paragraph2Blockquote(controller, block);\n        } else if (block.data.list) {\n          return paragraph2Blockquote(controller, block);\n        } else if (block.type !== 'paragraph') {\n          return heading2Blockquote(controller, block);\n        }\n        toogleQuote(controller);\n      });\n    });\n  }\n  return controller.command(Commands.focus);\n}\n"],"file":"transform.js"}