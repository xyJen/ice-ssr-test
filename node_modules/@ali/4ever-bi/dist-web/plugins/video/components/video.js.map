{"version":3,"sources":["../../../../../src/plugins/video/components/video.tsx"],"names":["React","PureComponent","useZoom","EmbedPlugin","useScrollableContainer","updateFile","EmbedInlineToolbar","VideoPlayer","EmbedCard","Video","props","ref","createRef","videoRef","getNodeData","node","data","onSwitchViewType","viewType","controller","prevViewType","run","onDownloadFile","src","name","type","size","onDownload","onMediaLoadError","allowDownload","state","componentDidMount","then","res","setState","renderCard","isSelected","locale","renderPreview","setTempPosterUrl","onMediaLoadSuccess","transformVideoURL","renderVideoMask","allowFullscreen","renderInlineToolbar","current","render","attributes","isCollapsed","value","selection","Container","scrollableContainer","scale"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  useZoom,\n  RenderNodeProps,\n} from '@ali/4ever-cangjie';\nimport {\n  EmbedPlugin,\n  useScrollableContainer,\n  EmbedNode,\n} from '@ali/4ever-bamboo';\nimport { updateFile, EmbedInlineToolbar } from '@ali/4ever-factory';\nimport { VideoPluginConfig } from '../types';\n\nconst {\n  VideoPlayer,\n  EmbedCard,\n} = EmbedPlugin;\n\n\ninterface IProps extends\n  Pick<VideoPluginConfig, 'allowDownload' | 'onMediaLoadSuccess' | 'onMediaLoadError'| 'enableFilePreview'\n  | 'locale' | 'setTempPosterUrl' | 'renderVideoMask' | 'allowFullscreen'>,\n  RenderNodeProps<EmbedNode> {\n  mobile: boolean;\n  onDownload: VideoPluginConfig['downloadFile'];\n  transformVideoURL?: VideoPluginConfig['transformVideoURL'];\n  scrollableContainer: HTMLElement | Window;\n  zoomContainer: HTMLElement | null;\n  scale: number;\n}\n\ninterface IState {\n  allowDownload: boolean;\n}\n\nclass Video extends PureComponent<IProps, IState> {\n  ref = React.createRef<HTMLDivElement>();\n\n  videoRef = React.createRef<HTMLVideoElement>();\n\n  constructor(props: IProps) {\n    super(props);\n    const { allowDownload } = props;\n    this.state = {\n      allowDownload: typeof allowDownload === 'boolean' ? allowDownload : false,\n    };\n  }\n\n  componentDidMount() {\n    const { allowDownload } = this.props;\n    const { src } = this.getNodeData();\n\n    if (typeof allowDownload === 'function') {\n      allowDownload(src).then(res => {\n        this.setState({\n          allowDownload: res,\n        });\n      });\n    }\n  }\n\n  getNodeData = () => {\n    const { node } = this.props;\n    const { data } = node;\n    return data;\n  };\n\n  onSwitchViewType = (viewType: string) => {\n    const { controller, node } = this.props;\n    const { data } = node;\n    const { viewType: prevViewType } = this.getNodeData();\n    if (prevViewType === viewType) {\n      return;\n    }\n\n    controller.run(\n      'onAction',\n      updateFile(\n        node,\n        {\n          ...data,\n          viewType,\n        },\n      ),\n    );\n  };\n\n  onDownloadFile = () => {\n    const { src, name, type, size } = this.getNodeData();\n    const { onDownload } = this.props;\n    if (onDownload) {\n      onDownload(src, {\n        name,\n        type,\n        size,\n      });\n    }\n  };\n\n  onMediaLoadError = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadError } = this.props;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  renderCard() {\n    const { allowDownload } = this.state;\n    const { name, size } = this.getNodeData();\n    const { isSelected, node, locale } = this.props;\n    return (\n      <EmbedCard\n        name={name}\n        allowDownload={allowDownload}\n        isSelected={isSelected}\n        node={node}\n        locale={locale}\n        onDownloadFile={this.onDownloadFile}\n        size={size}\n      />\n    );\n  }\n\n  renderPreview() {\n    const {\n      isSelected, node, setTempPosterUrl, onMediaLoadSuccess,\n      transformVideoURL, renderVideoMask, allowDownload, onDownload,\n      locale, allowFullscreen,\n    } = this.props;\n\n    return (\n      <VideoPlayer\n        transformVideoURL={transformVideoURL}\n        onMediaLoadSuccess={onMediaLoadSuccess}\n        onMediaLoadError={this.onMediaLoadError}\n        setTempPosterUrl={setTempPosterUrl}\n        node={node}\n        isSelected={isSelected}\n        renderVideoMask={renderVideoMask}\n        allowDownload={onDownload && allowDownload}\n        onDownload={this.onDownloadFile}\n        locale={locale}\n        allowFullscreen={allowFullscreen}\n      />\n    );\n  }\n\n  renderInlineToolbar() {\n    const { controller, node, locale = {} } = this.props;\n\n    return (\n      <EmbedInlineToolbar\n        controller={controller}\n        node={node}\n        locale={locale}\n        onSwitchViewType={this.onSwitchViewType}\n        isMoreButtonShown\n        triggerNode={this.ref.current}\n      />\n    );\n  }\n\n  render() {\n    const { viewType } = this.getNodeData();\n    const { attributes, isSelected, controller } = this.props;\n    const { isCollapsed } = controller.value.selection;\n\n    return (\n      <React.Fragment>\n        {isSelected && isCollapsed ? this.renderInlineToolbar() : null}\n        <div\n          {...attributes}\n          ref={this.ref}\n        >\n          {viewType === 'preview' ? this.renderPreview() : this.renderCard()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Container: React.FC<IProps> = (props) => {\n  const scrollableContainer = useScrollableContainer();\n  const scale = useZoom();\n\n  return (\n    <Video\n      {...props}\n      scrollableContainer={scrollableContainer!}\n      scale={scale}\n    />\n  );\n};\n\nexport default Container;\n"],"file":"video.js"}