import _extends from "@babel/runtime/helpers/extends";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React, { PureComponent } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useZoom } from '@ali/4ever-cangjie';
import { EmbedPlugin, useScrollableContainer } from '@ali/4ever-bamboo';
import { updateFile, EmbedInlineToolbar } from '@ali/4ever-factory';
var VideoPlayer = EmbedPlugin.VideoPlayer,
    EmbedCard = EmbedPlugin.EmbedCard;

var Video = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Video, _PureComponent);

  function Video(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;
    _this.ref = /*#__PURE__*/React.createRef();
    _this.videoRef = /*#__PURE__*/React.createRef();

    _this.getNodeData = function () {
      var node = _this.props.node;
      var data = node.data;
      return data;
    };

    _this.onSwitchViewType = function (viewType) {
      var _this$props = _this.props,
          controller = _this$props.controller,
          node = _this$props.node;
      var data = node.data;

      var _this$getNodeData = _this.getNodeData(),
          prevViewType = _this$getNodeData.viewType;

      if (prevViewType === viewType) {
        return;
      }

      controller.run('onAction', updateFile(node, _extends({}, data, {
        viewType: viewType
      })));
    };

    _this.onDownloadFile = function () {
      var _this$getNodeData2 = _this.getNodeData(),
          src = _this$getNodeData2.src,
          name = _this$getNodeData2.name,
          type = _this$getNodeData2.type,
          size = _this$getNodeData2.size;

      var onDownload = _this.props.onDownload;

      if (onDownload) {
        onDownload(src, {
          name: name,
          type: type,
          size: size
        });
      }
    };

    _this.onMediaLoadError = function () {
      var _this$getNodeData3 = _this.getNodeData(),
          src = _this$getNodeData3.src;

      var onMediaLoadError = _this.props.onMediaLoadError;

      if (onMediaLoadError) {
        onMediaLoadError(src);
      }
    };

    var allowDownload = props.allowDownload;
    _this.state = {
      allowDownload: typeof allowDownload === 'boolean' ? allowDownload : false
    };
    return _this;
  }

  var _proto = Video.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var allowDownload = this.props.allowDownload;

    var _this$getNodeData4 = this.getNodeData(),
        src = _this$getNodeData4.src;

    if (typeof allowDownload === 'function') {
      allowDownload(src).then(function (res) {
        _this2.setState({
          allowDownload: res
        });
      });
    }
  };

  _proto.renderCard = function renderCard() {
    var allowDownload = this.state.allowDownload;

    var _this$getNodeData5 = this.getNodeData(),
        name = _this$getNodeData5.name,
        size = _this$getNodeData5.size;

    var _this$props2 = this.props,
        isSelected = _this$props2.isSelected,
        node = _this$props2.node,
        locale = _this$props2.locale;
    return /*#__PURE__*/_createElement(EmbedCard, {
      name: name,
      allowDownload: allowDownload,
      isSelected: isSelected,
      node: node,
      locale: locale,
      onDownloadFile: this.onDownloadFile,
      size: size
    });
  };

  _proto.renderPreview = function renderPreview() {
    var _this$props3 = this.props,
        isSelected = _this$props3.isSelected,
        node = _this$props3.node,
        setTempPosterUrl = _this$props3.setTempPosterUrl,
        onMediaLoadSuccess = _this$props3.onMediaLoadSuccess,
        transformVideoURL = _this$props3.transformVideoURL,
        renderVideoMask = _this$props3.renderVideoMask,
        allowDownload = _this$props3.allowDownload,
        onDownload = _this$props3.onDownload,
        locale = _this$props3.locale,
        allowFullscreen = _this$props3.allowFullscreen;
    return /*#__PURE__*/_createElement(VideoPlayer, {
      transformVideoURL: transformVideoURL,
      onMediaLoadSuccess: onMediaLoadSuccess,
      onMediaLoadError: this.onMediaLoadError,
      setTempPosterUrl: setTempPosterUrl,
      node: node,
      isSelected: isSelected,
      renderVideoMask: renderVideoMask,
      allowDownload: onDownload && allowDownload,
      onDownload: this.onDownloadFile,
      locale: locale,
      allowFullscreen: allowFullscreen
    });
  };

  _proto.renderInlineToolbar = function renderInlineToolbar() {
    var _this$props4 = this.props,
        controller = _this$props4.controller,
        node = _this$props4.node,
        _this$props4$locale = _this$props4.locale,
        locale = _this$props4$locale === void 0 ? {} : _this$props4$locale;
    return /*#__PURE__*/_createElement(EmbedInlineToolbar, {
      controller: controller,
      node: node,
      locale: locale,
      onSwitchViewType: this.onSwitchViewType,
      isMoreButtonShown: true,
      triggerNode: this.ref.current
    });
  };

  _proto.render = function render() {
    var _this$getNodeData6 = this.getNodeData(),
        viewType = _this$getNodeData6.viewType;

    var _this$props5 = this.props,
        attributes = _this$props5.attributes,
        isSelected = _this$props5.isSelected,
        controller = _this$props5.controller;
    var isCollapsed = controller.value.selection.isCollapsed;
    return /*#__PURE__*/_createElement(React.Fragment, null, isSelected && isCollapsed ? this.renderInlineToolbar() : null, /*#__PURE__*/_createElement("div", _extends({}, attributes, {
      ref: this.ref
    }), viewType === 'preview' ? this.renderPreview() : this.renderCard()));
  };

  return Video;
}(PureComponent);

var Container = function Container(props) {
  var scrollableContainer = useScrollableContainer();
  var scale = useZoom();
  return /*#__PURE__*/_createElement(Video, _extends({}, props, {
    scrollableContainer: scrollableContainer,
    scale: scale
  }));
};

export default Container;
//# sourceMappingURL=video.js.map