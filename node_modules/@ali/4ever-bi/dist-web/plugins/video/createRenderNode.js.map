{"version":3,"sources":["../../../../src/plugins/video/createRenderNode.tsx"],"names":["React","Video","createRenderNode","config","videoConfig","video","locale","videoLocaleConfig","downloadFile","transformVideoURL","onMediaLoadSuccess","onMediaLoadError","setTempPosterUrl","renderVideoMask","allowDownload","allowFullscreen","embed","props","controller","next","node","data","type","src"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,OAAOC,KAAP;AAGA,eAAe,SAASC,gBAAT,CAA0BC,MAA1B,EAAkD;AAC/D,MAAMC,WAAW,GAAGD,MAAM,CAACE,KAAP,IAAgB,EAApC;AAD+D,4BAY3DD,WAZ2D,CAG7DE,MAH6D;AAAA,MAGrDC,iBAHqD,oCAGjC,EAHiC;AAAA,MAI7DC,YAJ6D,GAY3DJ,WAZ2D,CAI7DI,YAJ6D;AAAA,MAK7DC,iBAL6D,GAY3DL,WAZ2D,CAK7DK,iBAL6D;AAAA,MAM7DC,kBAN6D,GAY3DN,WAZ2D,CAM7DM,kBAN6D;AAAA,MAO7DC,gBAP6D,GAY3DP,WAZ2D,CAO7DO,gBAP6D;AAAA,MAQ7DC,gBAR6D,GAY3DR,WAZ2D,CAQ7DQ,gBAR6D;AAAA,MAS7DC,eAT6D,GAY3DT,WAZ2D,CAS7DS,eAT6D;AAAA,MAU7DC,aAV6D,GAY3DV,WAZ2D,CAU7DU,aAV6D;AAAA,MAW7DC,eAX6D,GAY3DX,WAZ2D,CAW7DW,eAX6D;AAc/D,SAAO;AACLC,IAAAA,KAAK,EAAE,eAACC,KAAD,EAAQC,UAAR,EAAoBC,IAApB,EAA6B;AAAA,UAC1BC,IAD0B,GACjBH,KADiB,CAC1BG,IAD0B;;AAElC,UAAIA,IAAI,CAACC,IAAL,CAAUC,IAAV,KAAmB,OAAnB,IAA8BF,IAAI,CAACC,IAAL,CAAUE,GAA5C,EAAiD;AAC/C,4BACE,eAAC,KAAD,eACMN,KADN;AAEE,UAAA,UAAU,EAAEC,UAFd;AAGE,UAAA,UAAU,EAAEV,YAHd;AAIE,UAAA,MAAM,EAAED,iBAJV;AAKE,UAAA,iBAAiB,EAAEE,iBALrB;AAME,UAAA,kBAAkB,EAAEC,kBANtB;AAOE,UAAA,gBAAgB,EAAEC,gBAPpB;AAQE,UAAA,gBAAgB,EAAEC,gBARpB;AASE,UAAA,eAAe,EAAEC,eATnB;AAUE,UAAA,aAAa,EAAEC,aAVjB;AAWE,UAAA,eAAe,EAAEC;AAXnB,WADF;AAeD;;AACD,aAAOI,IAAI,EAAX;AACD;AArBI,GAAP;AAuBD","sourcesContent":["import * as React from 'react';\nimport Video from './components/video';\nimport { BiPluginConfig } from '../../types';\n\nexport default function createRenderNode(config: BiPluginConfig) {\n  const videoConfig = config.video || {};\n  const {\n    locale: videoLocaleConfig = {},\n    downloadFile,\n    transformVideoURL,\n    onMediaLoadSuccess,\n    onMediaLoadError,\n    setTempPosterUrl,\n    renderVideoMask,\n    allowDownload,\n    allowFullscreen,\n  } = videoConfig;\n\n  return {\n    embed: (props, controller, next) => {\n      const { node } = props;\n      if (node.data.type === 'video' && node.data.src) {\n        return (\n          <Video\n            {...props}\n            controller={controller}\n            onDownload={downloadFile}\n            locale={videoLocaleConfig}\n            transformVideoURL={transformVideoURL}\n            onMediaLoadSuccess={onMediaLoadSuccess}\n            onMediaLoadError={onMediaLoadError}\n            setTempPosterUrl={setTempPosterUrl}\n            renderVideoMask={renderVideoMask}\n            allowDownload={allowDownload}\n            allowFullscreen={allowFullscreen}\n          />\n        );\n      }\n      return next();\n    },\n  };\n}\n"],"file":"createRenderNode.js"}