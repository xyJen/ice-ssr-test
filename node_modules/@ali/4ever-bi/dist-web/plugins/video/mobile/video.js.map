{"version":3,"sources":["../../../../../src/plugins/video/mobile/video.tsx"],"names":["React","PureComponent","EmbedPlugin","useScrollableContainer","EmbedInlineToolbar","VideoInlineToolbar","MobileEmbedCard","VideoPlayer","Video","isClicked","ref","createRef","previewRef","interval","getNodeData","node","props","data","onMediaLoadError","src","onMediaLoadSuccess","onDownloadFile","name","type","size","onDownload","renderPreview","isSelected","setTempPosterUrl","transformVideoURL","renderVideoMask","allowDownload","locale","allowFullscreen","renderCard","onPreview","renderInlineToolbar","controller","current","render","viewType","attributes","Container","scrollableContainer"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Controller } from '@ali/4ever-cangjie';\nimport {\n  EmbedPlugin,\n  useScrollableContainer,\n  VideoMaskParams,\n} from '@ali/4ever-bamboo';\nimport { EmbedInlineToolbar as VideoInlineToolbar } from '@ali/4ever-factory';\n\nconst {\n  MobileEmbedCard, VideoPlayer,\n} = EmbedPlugin;\n\ninterface IProps {\n  controller: Controller;\n  attributes: any;\n  node: any;\n  locale: any;\n  mobile: boolean;\n  isSelected: boolean;\n  transformVideoURL?: (src: string) => string;\n  onMediaLoadSuccess?: Function;\n  onMediaLoadError?: Function;\n  scrollableContainer: HTMLElement | Window;\n  setTempPosterUrl?: (data: any) => Promise<string>;\n  renderVideoMask?: (params: VideoMaskParams) => React.ReactElement;\n  onDownload?: Function;\n  allowDownload?: ((src: string) => Promise<boolean>) | boolean;\n  onPreview?: (\n    url: string,\n  ) => Promise<{ previewUrl: string }>;\n  allowFullscreen: boolean,\n}\n\nclass Video extends PureComponent<IProps> {\n  private isClicked = false;\n\n  ref = React.createRef<HTMLDivElement>();\n\n  previewRef = React.createRef();\n\n  interval = null;\n\n  getNodeData = () => {\n    const { node } = this.props;\n    const { data } = node || {};\n    return data;\n  };\n\n  onMediaLoadError = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadError } = this.props;\n    if (onMediaLoadError) {\n      onMediaLoadError(src);\n    }\n  };\n\n  onMediaLoadSuccess = () => {\n    const { src } = this.getNodeData();\n    const { onMediaLoadSuccess } = this.props;\n    if (onMediaLoadSuccess) {\n      onMediaLoadSuccess(src);\n    }\n  };\n\n  onDownloadFile = () => {\n    const { src, name, type, size } = this.getNodeData();\n    const { onDownload } = this.props;\n    if (onDownload) {\n      onDownload(src, {\n        name,\n        type,\n        size,\n      });\n    }\n  };\n\n  renderPreview() {\n    const {\n      isSelected, node, setTempPosterUrl, onMediaLoadSuccess,\n      transformVideoURL, renderVideoMask, onDownload, allowDownload,\n      locale, allowFullscreen,\n    } = this.props;\n\n    return (\n      <VideoPlayer\n        transformVideoURL={transformVideoURL}\n        onMediaLoadSuccess={onMediaLoadSuccess}\n        onMediaLoadError={this.onMediaLoadError}\n        setTempPosterUrl={setTempPosterUrl}\n        node={node}\n        isSelected={isSelected}\n        renderVideoMask={renderVideoMask}\n        onDownload={this.onDownloadFile}\n        isMobile\n        allowDownload={onDownload && allowDownload}\n        locale={locale}\n        allowFullscreen={allowFullscreen}\n      />\n    );\n  }\n\n  renderCard() {\n    const { name, src, type, size } = this.getNodeData();\n    const { onPreview } = this.props;\n\n    return (\n      <MobileEmbedCard\n        name={name}\n        onPreview={onPreview}\n        src={src}\n        type={type}\n        size={size}\n      />\n    );\n  }\n\n  renderInlineToolbar() {\n    const { controller, node, locale } = this.props;\n\n    return (\n      <VideoInlineToolbar\n        controller={controller}\n        node={node}\n        locale={locale}\n        triggerNode={this.ref.current}\n      />\n    );\n  }\n\n  render() {\n    const { viewType } = this.getNodeData();\n    const { attributes, isSelected } = this.props;\n\n    return (\n      <React.Fragment>\n        {isSelected ? this.renderInlineToolbar() : null}\n        <div {...attributes} ref={this.ref}>\n          {viewType === 'preview' ? this.renderPreview() : this.renderCard()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Container: React.FC<IProps> = (props) => {\n  const scrollableContainer = useScrollableContainer();\n\n  return <Video {...props} scrollableContainer={scrollableContainer} />;\n};\n\nexport default Container;\n"],"file":"video.js"}