import _createClass from "@babel/runtime/helpers/createClass";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { ParseError } from 'katex';
import styled from 'styled-components';
import Textarea from 'react-textarea-autosize';
import { FormulaPlugin } from '@ali/4ever-bamboo';
import { Button, HelpBetaNormal } from '@ali/we-design';
var getKatexString = FormulaPlugin.getKatexString;
var Wrapper = /*#__PURE__*/styled.div(["max-height:30vh;width:400px;display:flex;flex-direction:column;"]);
var Footer = /*#__PURE__*/styled.div(["display:flex;justify-content:space-between;align-items:center;padding:12px;min-height:60px;"]);
var Info = /*#__PURE__*/styled.div(["height:20px;display:flex;color:rgba(17,31,44,0.85);margin:4px 0;cursor:pointer;&:hover{color:#3e88d6;}"]);
var InfoText = /*#__PURE__*/styled.div(["line-height:20px;font-size:14px;&:hover{text-decoration:underline;}"]);
var Btns = /*#__PURE__*/styled.div(["display:flex;align-items:center;"]);
var ConfirmBtn = /*#__PURE__*/styled(Button)(["height:32px;border-radius:4px;font-size:14px;line-height:20px;padding:6px 15px;cursor:pointer;margin-left:8px;border:0;background:#2364e8;color:#ffffff !important;&:hover,&:focus{background:#2364e8;}"]);
var ErrorInfo = /*#__PURE__*/styled.p(["color:#ff5219;font-size:12px;line-height:17px;margin:4px 12px 0;max-width:448px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;"]);
var FormulaInput = /*#__PURE__*/styled(Textarea)(["outline:0;resize:none;padding:6px 8px;outline:0;margin:12px 12px 0;border-radius:4px;border:1px solid #006AFE;box-shadow:0px 0px 0px 3px rgba(0,106,254,0.12);font-size:14px;line-height:1.5;color:#171A1D;cursor:text;white-space:pre-wrap;word-break:break-word;&::placeholder{color:rgba(23,26,29,0.24);}"]);
var HelpIcon = /*#__PURE__*/styled(HelpBetaNormal)(["width:20px;height:20px;display:flex;justify-content:center;align-items:center;"]);

var _ref = /*#__PURE__*/_createElement(HelpIcon, null);

var FormulaTextarea = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(FormulaTextarea, _React$PureComponent);

  function FormulaTextarea() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;

    _this.onClickConFirm = function () {
      _this.props.onButtonClick();
    };

    _this.onChange = function (e) {
      var text = e.currentTarget.value;

      if (_this.props.formula !== text) {
        _this.props.onChange(text);
      }
    };

    _this.openWikiBook = function () {
      var _this$props$config;

      window.open((_this$props$config = _this.props.config) == null ? void 0 : _this$props$config.jumpToUrl);
    };

    return _this;
  }

  var _proto = FormulaTextarea.prototype;

  _proto.renderErrorMessage = function renderErrorMessage() {
    if (!this.errorMessage) {
      return null;
    }

    return /*#__PURE__*/_createElement(ErrorInfo, null, this.errorMessage);
  };

  _proto.render = function render() {
    var _this$props = this.props,
        locale = _this$props.locale,
        formula = _this$props.formula,
        textareaRef = _this$props.textareaRef;
    return /*#__PURE__*/_createElement(Wrapper, {
      "data-cangjie-not-editable": true
    }, /*#__PURE__*/_createElement(FormulaInput, {
      minRows: 2,
      onChange: this.onChange,
      placeholder: locale.textareaPlaceholder,
      spellCheck: false,
      value: formula,
      ref: textareaRef
    }), this.renderErrorMessage(), /*#__PURE__*/_createElement(Footer, null, /*#__PURE__*/_createElement(Info, {
      onClick: this.openWikiBook
    }, _ref, /*#__PURE__*/_createElement(InfoText, null, locale.info)), /*#__PURE__*/_createElement(Btns, null, /*#__PURE__*/_createElement(ConfirmBtn, {
      onClick: this.onClickConFirm
    }, locale.confirm))));
  };

  _createClass(FormulaTextarea, [{
    key: "errorMessage",
    get: function get() {
      var formula = this.props.formula;

      try {
        getKatexString(formula, true);
        return undefined;
      } catch (e) {
        if (e instanceof ParseError) {
          return e.message.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        } else {
          throw e;
        }
      }
    }
  }]);

  return FormulaTextarea;
}(React.PureComponent);

export { FormulaTextarea as default };
//# sourceMappingURL=textarea.js.map