import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useEffect, useRef, useState, useMemo } from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { environment } from '@ali/4ever-cangjie';
import { Tag } from '@ali/4ever-mo';
import { FormulaPlugin } from '@ali/4ever-bamboo';
import { Dropdown } from '@ali/we-design';
import isKeyHotkey from 'is-hotkey';
import FormulaView from "./view";
import FormulaPlaceholder from "./placeholder";
import { biActions as basicActions } from '@ali/4ever-plugin-basic';
import FormulaTextarea from "./textarea";
import { setFormulaData, setFormulaInjection } from "../actions";
var calcuSize = FormulaPlugin.calcuSize;
var isEnterHotKey = isKeyHotkey('enter');
var isEscHotKey = isKeyHotkey('esc');
var isMobile = environment.IS_MOBILE;
var FormulaWrapper = /*#__PURE__*/styled.div(["position:relative;display:inline-flex;vertical-align:middle;border-radius:4px;.bi-katex-dropdown{border:none;box-shadow:0px 8px 24px 0px rgba(0,0,0,0.16),0px 0px 1px 0px rgba(0,0,0,0.24);animation:scale-up-top 0.25s cubic-bezier(0.455,0.030,0.515,0.955) both;}"]);
export default /*#__PURE__*/React.memo(function (props) {
  var _useState = useState(false),
      isEditing = _useState[0],
      setIsEditing = _useState[1];

  var modelFormulaData = props.node.data.metadata.formula || ''; // 这里保存临时的输入内容，当关闭弹窗就要把它置为空

  var _useState2 = useState(modelFormulaData),
      formula = _useState2[0],
      setFormula = _useState2[1];

  var node = props.node,
      controller = props.controller,
      config = props.config,
      isSelected = props.isSelected;
  var _controller$value = controller.value,
      startInline = _controller$value.startInline,
      selection = _controller$value.selection;
  var readOnly = controller.readOnly;
  var currentFormula = formula === null ? modelFormulaData : formula;
  var textareaRef = useRef(null);
  var isPlaceholder = !currentFormula; // 国际化文案

  var locale = (config == null ? void 0 : config.locale) || {};
  var onTextareaChange = useCallback(function (text) {
    setFormula(text);
  }, []);
  var onClickConfirm = useCallback(function () {
    var nextFormula = currentFormula.trim();

    if (modelFormulaData !== nextFormula) {
      var tagData = _extends({}, calcuSize(nextFormula), {
        metadata: {
          formula: nextFormula
        }
      });

      controller.run('onAction', setFormulaData(node, tagData));
    }
  }, [modelFormulaData, currentFormula, controller, node]);
  var onKeyDown = useCallback(function (e) {
    if (isEditing && isEscHotKey(e)) {
      setIsEditing(false);
      onClickConfirm();
      controller.run('onAction', basicActions.createFocusToNodeAction({
        node: node
      }));
    }
  }, [isEditing, controller, node.key, onClickConfirm]);
  var onClickButton = useCallback(function () {
    onClickConfirm();
    setIsEditing(false);
  }, [onClickConfirm]);
  useEffect(function () {
    var data = calcuSize(currentFormula);
    controller.run('onAction', setFormulaInjection(node.key, data));
  }, [currentFormula, controller, node.key]);
  useEffect(function () {
    var handleEnter = function handleEnter(event) {
      if (isEnterHotKey(event) && Tag.isTag(startInline) && selection.isCollapsed && startInline.key === node.key) {
        event.preventDefault();
        event.stopPropagation();
        setIsEditing(true);
        textareaRef.current && textareaRef.current.focus();
      }
    };

    document.addEventListener('keydown', handleEnter);
    return function () {
      document.removeEventListener('keydown', handleEnter);
    };
  }, [textareaRef, startInline, selection, node.key]);
  var getContainer = useCallback(function () {
    var bodyEle = document.body;
    return document.querySelector('div[data-cangjie-content]') || bodyEle;
  }, []);
  var onVisibleChange = useCallback(function (visible) {
    setIsEditing(visible);

    if (!visible) {
      onClickConfirm();
    } else {
      textareaRef.current && textareaRef.current.focus();
    }
  }, [textareaRef, onClickConfirm]);
  var placeholder = useMemo(function () {
    return /*#__PURE__*/_createElement(FormulaPlaceholder, {
      locale: locale,
      notAllowed: readOnly || isMobile,
      isSelected: isSelected,
      isEditing: isEditing
    });
  }, [readOnly, locale, isSelected, isEditing]);

  var _ref = /*#__PURE__*/_createElement(FormulaView, {
    formula: currentFormula,
    isEditing: isEditing,
    isSelected: isSelected
  });

  var formulaView = useMemo(function () {
    return _ref;
  }, [currentFormula, isEditing, isSelected]);

  var _ref2 = /*#__PURE__*/_createElement(FormulaTextarea, {
    locale: locale,
    formula: currentFormula,
    config: config,
    textareaRef: textareaRef,
    onChange: onTextareaChange,
    onButtonClick: onClickButton
  });

  var formulaTextarea = useMemo(function () {
    return _ref2;
  }, [locale, currentFormula, textareaRef, config, onTextareaChange, onClickButton]);
  var renderContent = useMemo(function () {
    var showPlaceholder = isPlaceholder && !currentFormula;
    var content = showPlaceholder ? placeholder : formulaView;

    if (readOnly || isMobile) {
      return content;
    }

    return /*#__PURE__*/_createElement(Dropdown, {
      trigger: "click",
      getContainer: getContainer,
      overlay: formulaTextarea,
      visible: isEditing,
      onVisibleChange: onVisibleChange,
      placement: "bottomLeft",
      overlayClassName: "bi-katex-dropdown",
      zIndex: 1000
    }, /*#__PURE__*/_createElement("div", null, content));
  }, [isPlaceholder, isEditing, placeholder, formulaView, readOnly, getContainer, formulaTextarea, onVisibleChange, currentFormula]);
  return /*#__PURE__*/_createElement(FormulaWrapper, {
    "data-cangjie-not-editable": true,
    onKeyDown: onKeyDown
  }, renderContent);
});
//# sourceMappingURL=content.js.map