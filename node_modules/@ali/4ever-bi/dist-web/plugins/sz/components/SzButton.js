import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { isNaN, PluginRoles } from '@ali/4ever-bamboo';
import { FontSizeSelect } from '@ali/we-toolbar';
import { NewToolbarMode as ToolbarMode } from '@ali/4ever-component';
import { setSz } from "../actions";
import { useDefaultSz } from '@ali/4ever-component';
import { szList } from '@ali/4ever-plugin-sz';
export default function SzButton(props) {
  var controller = props.controller,
      locale = props.locale,
      toolbarMode = props.toolbarMode,
      rest = _objectWithoutPropertiesLoose(props, ["controller", "locale", "toolbarMode"]);

  var defaultSz = useDefaultSz();
  var sz = controller.query('getSize', defaultSz);

  if (isNaN(sz)) {
    sz = locale.buttonTitle;
  }

  var isCollapsedAtEdge = controller.value.selection.isCollapsedAtEdge;
  var isDisabled = isCollapsedAtEdge || controller.query('isSelectionInImage') || controller.query('isSelectionInHr') || controller.query('isSelectionInLinkCard');
  var isDouble = toolbarMode === ToolbarMode["double"];
  var handleChange = React.useCallback(function (size) {
    return controller.run('onAction', setSz(size));
  }, [controller]);
  var MemoFontSizeSelect = React.useMemo(function () {
    return FontSizeSelect;
  }, []);
  return /*#__PURE__*/_createElement(MemoFontSizeSelect, _extends({
    allowInput: true
  }, rest, {
    testid: "bi-toolbar-sz",
    sizes: szList,
    disabled: isDisabled // @ts-ignore 字号是 string 还是 number？
    ,
    value: "" + sz,
    onChange: handleChange,
    bordered: isDouble,
    shortcutText: locale.buttonTitle,
    role: PluginRoles.sz
  }));
}
//# sourceMappingURL=SzButton.js.map