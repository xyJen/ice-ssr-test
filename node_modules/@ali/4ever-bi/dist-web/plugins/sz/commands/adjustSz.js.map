{"version":3,"sources":["../../../../../src/plugins/sz/commands/adjustSz.ts"],"names":["Commands","Mark","getRangesFromEditor","getDefaultSz","findNextSz","getSize","setSz","isLeafInSelection","leaf","leafOffset","selectionOffset","selectionLength","leafLength","text","length","isInInlineNode","document","key","getClosestInline","adjustSz","controller","isIncreasingSz","value","selection","isCollapsed","direction","sz","run","ranges","range","convertToTextPoints","start","end","texts","getTextsAtRange","withoutNormalizing","forEach","node","offset","leaves","subOffset","accOffset","subLength","szMarks","marks","filter","mark","type","szMarksLength","data","newSzMark","create","szUnit","szMark","command","removeMarkByKey","addMarkByKey","Math","max"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAA+CC,IAA/C,QAA2D,oBAA3D;AACA,SAASC,mBAAT,QAAqC,kBAArC;AACA,SAASC,YAAT;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,OAAOC,OAAP;AACA,SAASC,KAAT;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAaC,UAAb,EAAiCC,eAAjC,EAA0DC,eAA1D,EAAsF;AAAA,MAC9FC,UAD8F,GAC/EJ,IAAI,CAACK,IAD0E,CACtGC,MADsG;AAE9G,MAAIL,UAAU,GAAGG,UAAb,IAA2BF,eAA/B,EAAgD,OAAO,KAAP;AAChD,MAAID,UAAU,IAAIC,eAAe,GAAGC,eAApC,EAAqD,OAAO,KAAP;AACrD,SAAO,IAAP;AACD,CALD;;AAOA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAqBC,GAArB,EAAqC;AAC1D,SAAOD,QAAQ,CAACE,gBAAT,CAA0BD,GAA1B,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASE,QAAT,CAAkBC,UAAlB,EAA0CC,cAA1C,EAA+E;AAAA,MACpFC,KADoF,GAC1EF,UAD0E,CACpFE,KADoF;AAAA,MAEpFN,QAFoF,GAE5DM,KAF4D,CAEpFN,QAFoF;AAAA,MAE1EO,SAF0E,GAE5DD,KAF4D,CAE1EC,SAF0E;AAAA,MAGpFC,WAHoF,GAGpED,SAHoE,CAGpFC,WAHoF;AAI5F,MAAMC,SAAS,GAAGJ,cAAc,GAAG,OAAH,GAAa,MAA7C;;AACA,MAAIG,WAAJ,EAAiB;AACf,QAAME,EAAE,GAAGrB,OAAO,CAACe,UAAD,CAAlB;AACAA,IAAAA,UAAU,CAACO,GAAX,CAAe,UAAf,EAA2BrB,KAAK,CAACF,UAAU,CAACsB,EAAD,EAAKD,SAAL,CAAX,CAAhC;AACA,WAAOL,UAAP;AACD,GAJD,MAIO;AACL,QAAMQ,MAAM,GAAG1B,mBAAmB,CAACkB,UAAD,CAAlC;;AACA,QAAI,CAACQ,MAAM,CAAC,CAAD,CAAX,EAAgB;AACd,aAAOR,UAAP;AACD;;AAJI;AAAA,UAKMS,KALN;;AAAA,kCAMoBA,KAAK,CAACC,mBAAN,CAA0Bd,QAA1B,CANpB;AAAA,UAMKe,KANL,yBAMKA,KANL;AAAA,UAMYC,GANZ,yBAMYA,GANZ;;AAOH,UAAMC,KAAK,GAAGjB,QAAQ,CAACkB,eAAT,CAAyBL,KAAzB,CAAd;AACAT,MAAAA,UAAU,CAACe,kBAAX,CAA8B,YAAM;AAClCF,QAAAA,KAAK,CAACG,OAAN,CAAc,UAACC,IAAD,EAAU;AAAA,cACdpB,GADc,GACNoB,IADM,CACdpB,GADc;AAEtB,cAAIqB,MAAM,GAAG,CAAb;AAFsB,cAGhBxB,MAHgB,GAGLuB,IAAI,CAACxB,IAHA,CAGhBC,MAHgB;;AAItB,cAAIG,GAAG,KAAKc,KAAK,CAACd,GAAlB;AAA0BqB,YAAAA,MAA1B,GAAqCP,KAArC,CAA0BO,MAA1B;AAAA;;AACA,cAAIrB,GAAG,KAAKe,GAAG,CAACf,GAAhB,EAAqBH,MAAM,GAAGkB,GAAG,CAACM,MAAb;;AACrB,cAAIrB,GAAG,KAAKc,KAAK,CAACd,GAAd,IAAqBA,GAAG,KAAKe,GAAG,CAACf,GAArC,EAA0C;AACxCH,YAAAA,MAAM,GAAGkB,GAAG,CAACM,MAAJ,GAAaP,KAAK,CAACO,MAA5B;AACD;;AARqB,cASdC,MATc,GASHF,IATG,CASdE,MATc;AAUtB,cAAIC,SAAS,GAAGF,MAAhB;AACA,cAAIG,SAAS,GAAG,CAAhB;;AACA,gEAAmBF,MAAnB,2CAA2B;AAAA,gBAAhB/B,IAAgB;;AACzB,gBAAID,iBAAiB,CAACC,IAAD,EAAOiC,SAAP,EAAkBH,MAAlB,EAA0BxB,MAA1B,CAAjB,IAAsDC,cAAc,CAACC,QAAD,EAAWC,GAAX,CAAxE,EAAyF;AACvF,kBAAMyB,SAAS,GAAGD,SAAS,GAAGjC,IAAI,CAACK,IAAL,CAAUC,MAAtB,GAA+BA,MAA/B,GAAwCkB,GAAG,CAACM,MAAJ,GAAaE,SAArD,GAAiEhC,IAAI,CAACK,IAAL,CAAUC,MAA7F;AACA,kBAAM6B,OAAO,GAAGnC,IAAI,CAACoC,KAAL,CAAWC,MAAX,CAAkB,UAAAC,IAAI;AAAA,uBAAIA,IAAI,CAACC,IAAL,KAAc,IAAlB;AAAA,eAAtB,CAAhB;AACA,kBAAMC,aAAa,GAAGL,OAAO,CAAC7B,MAA9B;;AACA,kBAAIkC,aAAa,GAAG,CAApB,EAAuB;AACrB,oBAAMtB,GAAE,GAAGiB,OAAO,CAACK,aAAa,GAAG,CAAjB,CAAP,CAA2BC,IAA3B,CAAgC3B,KAA3C;AACA,oBAAM4B,SAAS,GAAGjD,IAAI,CAACkD,MAAL,CAAY;AAC5BJ,kBAAAA,IAAI,EAAE,IADsB;AAE5BE,kBAAAA,IAAI,EAAE;AACJ3B,oBAAAA,KAAK,EAAElB,UAAU,CAACsB,GAAD,EAAKD,SAAL,CADb;AAEJ2B,oBAAAA,MAAM,EAAE;AAFJ;AAFsB,iBAAZ,CAAlB;;AAOA,sEAAqBT,OAArB,2CAA8B;AAAA,sBAAnBU,MAAmB;AAC5BjC,kBAAAA,UAAU,CAACkC,OAAX,CAAmBtD,QAAQ,CAACuD,eAA5B,EAA6ClB,IAAI,CAACpB,GAAlD,EAAuDuB,SAAvD,EAAkEE,SAAlE,EAA6EW,MAA7E;AACD;;AACDjC,gBAAAA,UAAU,CAACkC,OAAX,CAAmBtD,QAAQ,CAACwD,YAA5B,EAA0CnB,IAAI,CAACpB,GAA/C,EAAoDuB,SAApD,EAA+DE,SAA/D,EAA0EQ,SAA1E;AACD,eAbD,MAaO;AACL,oBAAMxB,IAAE,GAAGvB,YAAY,CAACa,QAAD,EAAWC,GAAX,CAAvB;;AACA,oBAAMiC,UAAS,GAAGjD,IAAI,CAACkD,MAAL,CAAY;AAC5BJ,kBAAAA,IAAI,EAAE,IADsB;AAE5BE,kBAAAA,IAAI,EAAE;AACJ3B,oBAAAA,KAAK,EAAElB,UAAU,CAACsB,IAAD,EAAKD,SAAL,CADb;AAEJ2B,oBAAAA,MAAM,EAAE;AAFJ;AAFsB,iBAAZ,CAAlB;;AAOAhC,gBAAAA,UAAU,CAACkC,OAAX,CAAmBtD,QAAQ,CAACwD,YAA5B,EAA0CnB,IAAI,CAACpB,GAA/C,EAAoDuB,SAApD,EAA+DE,SAA/D,EAA0EQ,UAA1E;AACD;AACF;;AACDT,YAAAA,SAAS,IAAIjC,IAAI,CAACK,IAAL,CAAUC,MAAvB;AACA0B,YAAAA,SAAS,GAAGiB,IAAI,CAACC,GAAL,CAASpB,MAAT,EAAiBG,SAAjB,CAAZ;AACD;AACF,SA7CD;AA8CD,OA/CD;AARG;;AAKL,yDAAoBb,MAApB,wCAA4B;AAAA;AAmD3B;AACF;;AACD,SAAOR,UAAP;AACD","sourcesContent":["import { Commands, Controller, Document, Leaf, Mark } from '@ali/4ever-cangjie';\nimport { getRangesFromEditor }  from '@ali/4ever-utils';\nimport { getDefaultSz } from '../utils';\nimport { findNextSz } from '@ali/4ever-plugin-sz';\nimport getSize from '../queries/getSize';\nimport { setSz } from '../actions';\n\nconst isLeafInSelection = (leaf: Leaf, leafOffset: number, selectionOffset: number, selectionLength: number) => {\n  const { length: leafLength } = leaf.text;\n  if (leafOffset + leafLength <= selectionOffset) return false;\n  if (leafOffset >= selectionOffset + selectionLength) return false;\n  return true;\n};\n\nconst isInInlineNode = (document: Document, key: string) => {\n  return document.getClosestInline(key);\n};\n\n/**\n * @param controller\n * @param isIncreasingSz\n * @description\n * 若选区重合，直接通过getSize方法获取当前的字体大小，再通过findNextSz方法获取增减后的字体大小，最后设置字体；\n * 若选区非重合，遍历selection中的每一个叶子节点，通过sz mark获取当前叶子节点的字体大小，\n * 若没有sz mark 则根据段落类型获取默认的字体大小，通过findNextSz方法获取每个叶子节点增减后的字体大小，\n * 移除旧的 sz mark 后增加新的 sz；\n */\nexport default function adjustSz(controller: Controller, isIncreasingSz: boolean): Controller {\n  const { value } = controller;\n  const { document, selection } = value;\n  const { isCollapsed } = selection;\n  const direction = isIncreasingSz ? 'right' : 'left';\n  if (isCollapsed) {\n    const sz = getSize(controller);\n    controller.run('onAction', setSz(findNextSz(sz, direction)));\n    return controller;\n  } else {\n    const ranges = getRangesFromEditor(controller);\n    if (!ranges[0]) {\n      return controller;\n    }\n    for (const range of ranges) {\n      const { start, end } = range.convertToTextPoints(document);\n      const texts = document.getTextsAtRange(range);\n      controller.withoutNormalizing(() => {\n        texts.forEach((node) => {\n          const { key } = node;\n          let offset = 0;\n          let { length } = node.text;\n          if (key === start.key) ({ offset } = start);\n          if (key === end.key) length = end.offset;\n          if (key === start.key && key === end.key) {\n            length = end.offset - start.offset;\n          }\n          const { leaves } = node;\n          let subOffset = offset;\n          let accOffset = 0;\n          for (const leaf of leaves) {\n            if (isLeafInSelection(leaf, accOffset, offset, length) || isInInlineNode(document, key)) {\n              const subLength = accOffset + leaf.text.length > length ? end.offset - subOffset : leaf.text.length;\n              const szMarks = leaf.marks.filter(mark => mark.type === 'sz');\n              const szMarksLength = szMarks.length;\n              if (szMarksLength > 0) {\n                const sz = szMarks[szMarksLength - 1].data.value;\n                const newSzMark = Mark.create({\n                  type: 'sz',\n                  data: {\n                    value: findNextSz(sz, direction),\n                    szUnit: 'pt',\n                  },\n                });\n                for (const szMark of szMarks) {\n                  controller.command(Commands.removeMarkByKey, node.key, subOffset, subLength, szMark);\n                }\n                controller.command(Commands.addMarkByKey, node.key, subOffset, subLength, newSzMark);\n              } else {\n                const sz = getDefaultSz(document, key);\n                const newSzMark = Mark.create({\n                  type: 'sz',\n                  data: {\n                    value: findNextSz(sz, direction),\n                    szUnit: 'pt',\n                  },\n                });\n                controller.command(Commands.addMarkByKey, node.key, subOffset, subLength, newSzMark);\n              }\n            }\n            accOffset += leaf.text.length;\n            subOffset = Math.max(offset, accOffset);\n          }\n        });\n      });\n    }\n  }\n  return controller;\n}\n"],"file":"adjustSz.js"}