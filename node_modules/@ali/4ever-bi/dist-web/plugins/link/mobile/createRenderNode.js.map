{"version":3,"sources":["../../../../../src/plugins/link/mobile/createRenderNode.tsx"],"names":["React","SimpleLazyLoad","Link","isLinkCardNode","createRenderNode","linkConfig","locale","protocolAllowList","openLink","LazyLoad","lazyload","URLLinkCard","then","link","props","node","linkType","cardInfo","data","displayType"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAC5B,SAASC,cAAT,QAA+B,sBAA/B;AAEA,OAAOC,IAAP;AACA,SAASC,cAAT;AAEA,eAAe,SAASC,gBAAT,CACbC,UADa,EAES;AAAA,MACdC,MADc,GAC0BD,UAD1B,CACdC,MADc;AAAA,MACNC,iBADM,GAC0BF,UAD1B,CACNE,iBADM;AAAA,MACaC,QADb,GAC0BH,UAD1B,CACaG,QADb;AAEtB,MAAMC,QAAQ,GAAGJ,UAAU,CAACK,QAAX,IAAuBT,cAAxC;AACA,MAAMU,WAAW,GAAGF,QAAQ,CAAC;AAAA,WAC3B,OAAO,uBAAP,EAAgCG,IAAhC,CAAqC;AAAA,UAAGD,WAAH,QAAGA,WAAH;AAAA,aAAqBA,WAArB;AAAA,KAArC,CAD2B;AAAA,GAAD,CAA5B;AAGA,SAAO;AACLE,IAAAA,IAAI,EAAE,cAACC,KAAD,EAAW;AACf,UAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AAEA,UAAIC,QAAyB,GAAG,MAAhC,CAHe,CAIf;;AACA,UAAIb,cAAc,CAACY,IAAD,CAAlB,EAA0B;AAAA,YAChBE,QADgB,GACHF,IAAI,CAACG,IADF,CAChBD,QADgB;;AAAA,oBAEAA,QAAQ,IAAI,EAFZ;AAAA,YAEhBE,WAFgB,SAEhBA,WAFgB;;AAGxB,YAAIA,WAAW,KAAK,MAApB,EAA4B;AAC1BH,UAAAA,QAAQ,GAAG,MAAX;AACD;AACF;;AACD;AAAA;AACE;AACA,uBAAC,IAAD,eACMF,KADN;AAEE,UAAA,iBAAiB,EAAEP,iBAAiB,IAAI,EAF1C;AAGE,UAAA,MAAM,EAAED,MAHV;AAIE,UAAA,UAAU,EAAEE,QAJd;AAKE,UAAA,WAAW,EAAEG,WALf;AAME,UAAA,WAAW,EAAEK;AANf;AAFF;AAWD;AAxBI,GAAP;AA0BD","sourcesContent":["import * as React from 'react';\nimport { Inline, Plugin } from '@ali/4ever-cangjie';\nimport { SimpleLazyLoad } from '@ali/4ever-component';\nimport { LinkPluginConfig, LinkDisplayType } from '../types';\nimport Link from './link';\nimport { isLinkCardNode } from '../utils';\n\nexport default function createRenderNode(\n  linkConfig: LinkPluginConfig,\n): Plugin['renderNode'] {\n  const { locale, protocolAllowList, openLink } = linkConfig;\n  const LazyLoad = linkConfig.lazyload || SimpleLazyLoad;\n  const URLLinkCard = LazyLoad(() =>\n    import('@ali/we-biz-link-card').then(({ URLLinkCard }) => URLLinkCard),\n  );\n  return {\n    link: (props) => {\n      const node = props.node as Inline;\n\n      let linkType: LinkDisplayType = 'link';\n      // 当 link 是卡片形式\n      if (isLinkCardNode(node)) {\n        const { cardInfo } = node.data;\n        const { displayType } = cardInfo || {};\n        if (displayType === 'card') {\n          linkType = 'card';\n        }\n      }\n      return (\n        // @ts-ignore\n        <Link\n          {...props}\n          protocolAllowList={protocolAllowList || []}\n          locale={locale}\n          onOpenLink={openLink}\n          URLLinkCard={URLLinkCard}\n          displayType={linkType}\n        />\n      );\n    },\n  };\n}\n"],"file":"createRenderNode.js"}