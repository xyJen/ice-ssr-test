{"version":3,"sources":["../../../../../src/plugins/link/mobile/createRenderMark.tsx"],"names":["React","Link","isLinkNode","createRenderMark","linkConfig","protocolAllowList","openLink","renderMark","props","controller","next","mark","marks","node","type","find","href","data","document","value","inline","getClosestInline","key"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAC5B,OAAOC,IAAP;AAEA,SAASC,UAAT;AAEA,eAAe,SAASC,gBAAT,CACbC,UADa,EAES;AAAA,MAEpBC,iBAFoB,GAIlBD,UAJkB,CAEpBC,iBAFoB;AAAA,MAGpBC,QAHoB,GAIlBF,UAJkB,CAGpBE,QAHoB;AAKtB,SAAO,SAASC,UAAT,CAAoBC,KAApB,EAA4CC,UAA5C,EAAwDC,IAAxD,EAA8D;AAAA,QAC3DC,IAD2D,GACrCH,KADqC,CAC3DG,IAD2D;AAAA,QACrDC,KADqD,GACrCJ,KADqC,CACrDI,KADqD;AAAA,QAC9CC,IAD8C,GACrCL,KADqC,CAC9CK,IAD8C;;AAEnE,QAAIF,IAAI,CAACG,IAAL,KAAc,MAAd,IAAwB,CAACF,KAAK,CAACG,IAAN,CAAW;AAAA,UAAGD,IAAH,QAAGA,IAAH;AAAA,aAAcA,IAAI,KAAK,QAAvB;AAAA,KAAX,CAA7B,EAA0E;AAAA,UAEhEE,IAFgE,GAEvDL,IAAI,CAACM,IAFkD,CAEhED,IAFgE;AAAA,UAGhEE,QAHgE,GAGnDT,UAAU,CAACU,KAHwC,CAGhED,QAHgE;AAIxE,UAAME,MAAM,GAAGF,QAAQ,CAACG,gBAAT,CAA0BR,IAAI,CAACS,GAA/B,CAAf;;AAEA,UAAI,CAACpB,UAAU,CAACkB,MAAD,CAAf,EAAyB;AACvB;AACA,4BACE,eAAC,IAAD,eACMZ,KADN;AAEE,UAAA,IAAI,EAAEQ,IAFR;AAGE,UAAA,iBAAiB,EAAEX,iBAAiB,IAAI,EAH1C;AAIE,UAAA,UAAU,EAAEC,QAJd;AAKE,UAAA,UAAU,EAAEG;AALd,WADF;AASD;AAEF;;AACD,WAAOC,IAAI,EAAX;AACD,GAvBD;AAwBD","sourcesContent":["import * as React from 'react';\nimport { Plugin, RenderMarkProps } from '@ali/4ever-cangjie';\nimport Link from './pureLink';\nimport { LinkPluginConfig } from '../types';\nimport { isLinkNode } from '../utils';\n\nexport default function createRenderMark(\n  linkConfig: LinkPluginConfig,\n): Plugin['renderMark'] {\n  const {\n    protocolAllowList,\n    openLink,\n  } = linkConfig;\n  return function renderMark(props: RenderMarkProps, controller, next) {\n    const { mark, marks, node } = props;\n    if (mark.type === 'link' && !marks.find(({ type }) => type === 'unlink')) {\n\n      const { href } = mark.data;\n      const { document } = controller.value;\n      const inline = document.getClosestInline(node.key);\n\n      if (!isLinkNode(inline)) {\n        // 仅在父节点不是 link 节点时，渲染 purelink, 避免节点嵌套\n        return (\n          <Link\n            {...props}\n            href={href}\n            protocolAllowList={protocolAllowList || []}\n            onOpenLink={openLink}\n            controller={controller}\n          />\n        );\n      }\n\n    }\n    return next();\n  };\n}\n"],"file":"createRenderMark.js"}