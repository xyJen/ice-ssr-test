import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { theme, LinkPlugin } from '@ali/4ever-bamboo';
import { getClosestContainerBlock, getInnerWidth } from '@ali/4ever-utils';
import { Link, LinkCardWrapper } from "../components/styled";
import { getLinkCardState } from "../utils";
import { injectCardInfo, removeInjectCardInfo, updateLinkWithCardInfo, copyLink } from "../actions";
var normalizeLink = LinkPlugin.normalizeLink,
    openLink = LinkPlugin.openLink;
var _theme$link = theme.link,
    height = _theme$link.height,
    margin = _theme$link.margin;

var getMobileMaxWidth = function getMobileMaxWidth(value, node) {
  var _getInnerWidth;

  var closestBlock = getClosestContainerBlock(value, node);
  if (closestBlock) return (_getInnerWidth = getInnerWidth(closestBlock)) != null ? _getInnerWidth : '100%';
  return '100%';
};

var noop = function noop() {};

var MobileLink = function MobileLink(props) {
  var node = props.node,
      attributes = props.attributes,
      protocolAllowList = props.protocolAllowList,
      onOpenLink = props.onOpenLink,
      children = props.children,
      getLinkInfo = props.getLinkInfo,
      controller = props.controller,
      locale = props.locale,
      displayType = props.displayType,
      isSelected = props.isSelected,
      URLLinkCard = props.URLLinkCard;
  var _node$data = node.data,
      _node$data$href = _node$data.href,
      href = _node$data$href === void 0 ? '' : _node$data$href,
      cardInfo = _node$data.cardInfo;
  var text = controller.query('getText', {
    node: node
  }) || '';

  var _ref = cardInfo || {},
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? '' : _ref$title,
      _ref$imgURL = _ref.imgURL,
      imgURL = _ref$imgURL === void 0 ? '' : _ref$imgURL,
      _ref$desc = _ref.desc,
      desc = _ref$desc === void 0 ? '' : _ref$desc;

  var urlInfo = React.useMemo(function () {
    return {
      title: text.trim() === href.trim() ? title : text,
      imgURL: imgURL,
      desc: desc
    };
  }, [title, imgURL, desc, text, href]);
  var handleOpenLink = React.useCallback(function () {
    if (onOpenLink) {
      var normalizedLink = normalizeLink(href, protocolAllowList);
      onOpenLink(normalizedLink);
    } else {
      openLink(href, protocolAllowList);
    }
  }, [href, onOpenLink, protocolAllowList]);
  var tooltipLocale = React.useMemo(function () {
    return {
      editTooltip: locale.edit,
      copyTooltip: locale.copy,
      unlinkTooltip: locale.unlink,
      deleteTooltip: locale["delete"],
      switchStyleTooltip: locale.styleText
    };
  }, [locale]);
  var onRefresh = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var info, _imgURL, _title, _desc, newInfo;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(getLinkInfo && typeof getLinkInfo === 'function')) {
              _context.next = 19;
              break;
            }

            // 先设置卡片状态为 loading，刷新无需为节点注入信息
            controller.run('onAction', injectCardInfo(node, {
              displayType: 'card'
            }));
            _context.prev = 2;
            _context.next = 5;
            return getLinkInfo(href);

          case 5:
            info = _context.sent;

            if (!info) {
              _context.next = 13;
              break;
            }

            // 请求成功
            _imgURL = info.imgURL, _title = info.title, _desc = info.desc;
            newInfo = {
              imgURL: _imgURL,
              title: _title,
              desc: _desc,
              displayType: 'card'
            };
            controller.run('onAction', removeInjectCardInfo(node));
            controller.run('onAction', updateLinkWithCardInfo(node, text, href, newInfo));
            controller.run('onCangjieFocus'); // 清理临时状态

            return _context.abrupt("return");

          case 13:
            _context.next = 17;
            break;

          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](2);

          case 17:
            // 请求失败,将状态设置为 error，数据填充 undefined
            controller.run('onAction', removeInjectCardInfo(node));
            controller.run('onAction', updateLinkWithCardInfo(node, text, href, {
              displayType: 'card'
            }));

          case 19:
            controller.run('onCangjieFocus');

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 15]]);
  })), [controller, getLinkInfo, text, href, node]);
  var cardState = getLinkCardState(false, node);

  var _React$useState = React.useState('100%'),
      maxWidth = _React$useState[0],
      setMaxwidth = _React$useState[1];

  React.useEffect(function () {
    setMaxwidth(getMobileMaxWidth(controller.value, node));
  }, []);
  var handleCopy = React.useCallback(function (e) {
    e.stopPropagation();
    e.preventDefault();
    controller.run('onAction', copyLink(node));
  }, [href, node, controller]);

  var renderCard = /*#__PURE__*/_createElement(LinkCardWrapper, _extends({}, attributes, {
    style: {
      width: maxWidth,
      height: height,
      margin: margin
    }
  }), /*#__PURE__*/_createElement(URLLinkCard, {
    isSelected: isSelected,
    state: cardState,
    url: href,
    urlInfo: urlInfo,
    readonly: false // todo：参省 移动端复制目前会丢失样式，等待灯少这边支持后处理 
    ,
    isMobile: true,
    onRefresh: onRefresh,
    onOpenURL: handleOpenLink,
    locale: _extends({}, locale, tooltipLocale),
    cardStyle: displayType === 'link' ? 'popup' : 'indoc',
    editBtnTestID: "link-toolbar-edit",
    copyBtnTestID: "link-toolbar-copy",
    unlinkBtnTestID: "link-toolbar-unlink",
    deleteBtnTestID: "link-toolbar-remove",
    switchStyleBtnTestID: "link-toolbar-switch",
    linkStyleBtnTestID: "link-toolbar-switch-link",
    cardStyleBtnTestID: "link-toolbar-switch-card" // @ts-ignore 组件不存在 urlTestID 属性
    ,
    urlTestID: "link-toolbar-visit",
    cardTestID: "link-card",
    width: maxWidth,
    height: height,
    onEdit: noop // @ts-ignore
    ,
    onCopy: handleCopy,
    onUnlink: noop,
    onDelete: noop,
    onSwitchStyle: noop
  }));

  return displayType === 'card' ? renderCard : /*#__PURE__*/_createElement(Link, _extends({}, attributes, {
    "data-testid": "link"
  }), children());
};

export default /*#__PURE__*/React.memo(MobileLink);
//# sourceMappingURL=link.js.map