import _extends from "@babel/runtime/helpers/extends";
import { Commands, Text, Inline, Injection } from '@ali/4ever-cangjie';
import { Link } from '@ali/4ever-mo';
import { insertBlockLinkCard } from "../linkCard/actions";
import removeinjectedCardInfo from "./removeinjectedCardInfo";
import updateLinkCardInfo from "./updateLinkCardInfo";
var optionLink = 0;
var optionCard = 1;
export default function createShowLinkPastePanel(enableLinkCardBlock) {
  return function showLinkPastePanel(controller, text, getLinkInfo) {
    // text 保留链接 card 转成链接摘要卡片
    var options = ['text', 'card'];

    var gettCustomPanel = function gettCustomPanel() {
      return {
        onChange: function onChange(index, deleteAtRange) {
          switch (Number(index)) {
            // options[0]
            case optionLink:
              var _controller$value = controller.value,
                  document = _controller$value.document,
                  selection = _controller$value.selection; // 若当前粘贴的节点已经是link类型了，则不再执行后续转link的逻辑

              var previousNode = document.getPreviousNode(selection.focus.key);
              if (Link.isLink(previousNode)) break;
              deleteAtRange();
              controller.command(Commands.insertInline, {
                type: 'link',
                nodes: [Text.create(text)],
                data: {
                  href: text
                }
              });
              controller.command(Commands.moveToStartOfNextText).command(Commands.focus);
              break;
            // options[1]

            case optionCard:
              {
                deleteAtRange();

                if (enableLinkCardBlock) {
                  controller.run('onAction', insertBlockLinkCard(text, text));
                } else {
                  var inline = Inline.create({
                    type: 'link',
                    data: {
                      href: text,
                      cardInfo: {
                        displayType: 'card'
                      }
                    },
                    nodes: [Text.create(text)]
                  });
                  var injections = controller.value.injections;
                  var injection = Injection.create({
                    key: inline.key,
                    data: {
                      href: text,
                      cardInfo: {
                        displayType: 'card'
                      }
                    }
                  });
                  var excludeInjections = injections.filter(function (i) {
                    return i.key !== inline.key;
                  });
                  controller.setInjections([].concat(excludeInjections, [injection]));
                  controller.setOpRelatedId(inline.key).command(Commands.insertInline, inline);
                  getLinkInfo && getLinkInfo(text).then(function (info) {
                    if (info) {
                      // 请求成功
                      var imgURL = info.imgURL,
                          title = info.title,
                          desc = info.desc;
                      var cardInfo = {
                        imgURL: imgURL,
                        title: title,
                        desc: desc,
                        displayType: 'card'
                      };
                      controller.setOpRelatedId(inline.key).command(removeinjectedCardInfo, inline).command(updateLinkCardInfo, inline, text, text, cardInfo).command(Commands.moveToStartOfNextText).command(Commands.focus);
                    }
                  });
                }
              }
              break;

            default:
              break;
          }
        },
        options: options
      };
    };

    controller.setData(_extends({}, controller.value.data, {
      customPanel: gettCustomPanel()
    }));
    return controller;
  };
}
//# sourceMappingURL=showLinkPastePanel.js.map