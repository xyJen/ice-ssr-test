import _extends from "@babel/runtime/helpers/extends";
import { Commands, Text } from '@ali/4ever-cangjie';
import { isLinkNode } from "../utils";

var isCardInfoNeedUpdate = function isCardInfoNeedUpdate(originalCardInfo, newCardInfo) {
  if (!originalCardInfo) {
    return true;
  }

  if (originalCardInfo.title !== newCardInfo.title || originalCardInfo.desc !== newCardInfo.desc || originalCardInfo.imgURL !== newCardInfo.imgURL || originalCardInfo.displayType !== newCardInfo.displayType) {
    return true;
  }

  return false;
};

export default function updateLinkCardInfo(controller, node, text, href, cardInfo) {
  var selection = controller.value.selection;
  var nodeText = text.length ? text : href;
  var originalHref = node.data.href;
  var originalCardInfo = node.data.cardInfo;
  var isLink = cardInfo && cardInfo.displayType === 'link'; // 若文本地址为空，则去除链接，链接里有可能嵌套inline图片

  if (Text.isTextList(node.nodes) && !text.length && href.length && isLink) {
    var range = selection.moveToRangeOfNode(node, controller);
    return controller.command(Commands.select, range).command(Commands.insertText, href).command('unwrapLink').command(Commands.focus);
  } // 更新需要控制粒度，避免生成额外 op


  if (cardInfo && (isCardInfoNeedUpdate(originalCardInfo, cardInfo) || href !== originalHref)) {
    // 如果更新了卡片信息
    controller.command(Commands.setNodeByKey, node.key, {
      type: 'link',
      data: {
        href: href,
        cardInfo: _extends({}, cardInfo)
      }
    }).command(Commands.moveToEndOfNode, node);
  } else if (href !== originalHref) {
    // 如果仅更新链接信息
    controller.command(Commands.setNodeByKey, node.key, {
      type: 'link',
      data: {
        href: href
      }
    }).command(Commands.moveToEndOfNode, node);
  }

  if (Text.isTextList(node.nodes) && nodeText !== node.text) {
    // 卡片状态下的链接是 void 节点，如果采用 insertText 方式修改文本，会导致 void 节点被删除
    // 因此采用 setNode 方式替换, 此时需要获取到最新的节点状态进行替换
    var document = controller.value.document;
    var currentNode = document.getNode(node.key);

    if (!isLinkNode(currentNode)) {
      return controller;
    }

    var linkTextNode = document.getNextText(currentNode.key);

    if (linkTextNode) {
      var marks = document.getMarksAtPosition(linkTextNode.key, 1);
      var textNode = Text.create(nodeText).addMarks(0, nodeText.length, marks != null ? marks : []);
      var newNode = currentNode.merge({
        nodes: [textNode]
      });
      controller.command(Commands.replaceNodeByKey, currentNode.key, newNode);
    }
  }

  return controller.command(Commands.moveToStartOfNextText);
}
//# sourceMappingURL=updateLinkCardInfo.js.map