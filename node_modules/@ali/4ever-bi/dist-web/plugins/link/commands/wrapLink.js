import { Commands } from '@ali/4ever-cangjie';
import { Link } from '@ali/4ever-mo';
import hasLink from "../utils/hasLink";
import { setJustCreated } from "../utils/linkStore";
export default function wrapLink(controller, data) {
  var value = controller.value;
  var selection = value.selection;

  if (!selection) {
    return controller;
  }

  var isCollapsed = selection.isCollapsed;

  var _ref = data || {},
      _ref$href = _ref.href,
      href = _ref$href === void 0 ? '' : _ref$href;

  if (!isCollapsed && !hasLink(value)) {
    controller.command(Commands.wrapInline, {
      type: 'link',
      data: {
        href: href
      }
    });
    var linkNode = controller.value.inlines.find(function (inline) {
      return Link.isLink(inline);
    });

    if (!href && linkNode) {
      setJustCreated(linkNode.key, true);
    }

    var _controller$value = controller.value,
        newDocument = _controller$value.document,
        newRangeSelection = _controller$value.selection; // 收缩选区

    var shrinkBoundarySelection = newRangeSelection.shrinkBoundary(newDocument);
    return controller.command(Commands.select, shrinkBoundarySelection).command(Commands.moveToEndOfInline);
  }

  if (hasLink(value)) {
    return controller.command('unwrapLink');
  }

  if (selection.isExpanded || controller.query('isCollapsedInInlineVoid')) {
    controller.command(Commands.wrapInline, {
      type: 'link',
      data: {
        href: href
      }
    });
  } else if (controller.query('isCollapsedInBlockVoid')) {
    controller.command(Commands.insertBlock, 'paragraph').command('insertLink', href);
  } else {
    controller.command('insertLink', href);
  }

  return controller;
}
//# sourceMappingURL=wrapLink.js.map