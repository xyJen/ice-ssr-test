import { Commands, RangeSelection, Point, Mark } from '@ali/4ever-cangjie';
import { Link } from '@ali/4ever-mo';
import { createLinkify } from '@ali/4ever-utils';
import { isLink } from "../utils";
export default function createUnwrapLink(protocolAllowList) {
  var linkify = createLinkify(protocolAllowList);
  return function unwrapLink(controller) {
    var _controller$value = controller.value,
        selection = _controller$value.selection,
        document = _controller$value.document,
        inlines = _controller$value.inlines,
        focusInline = _controller$value.focusInline;
    var shrinkRangeSelection = selection.shrinkBoundary(document);
    var start = shrinkRangeSelection.getStart(document);
    var end = shrinkRangeSelection.getEnd(document);
    var startText = document.getNode(start.key);
    var endText = document.getNode(end.key); // 1. 闭合选区

    if (shrinkRangeSelection.isCollapsed) {
      if (Link.isLink(focusInline)) {
        var href = focusInline.data.href;
        var text = focusInline.text.trim();

        if (text === href.trim() && linkify.test(text)) {
          // Rule: 避免 link 中的 text 是一个合法的 url，导致 unwrapInline 后继续被 decorate 识别
          var unlinkRangeSelection = RangeSelection.create({
            anchor: Point.createFromParams(start.key, 0),
            focus: Point.createFromParams(endText.key, endText.text.length)
          });
          controller.command(Commands.addMarkAtRange, unlinkRangeSelection, Mark.create({
            type: 'unlink'
          }));
        }
      }

      controller.command(Commands.focus).command(Commands.unwrapInline, 'link');
      return controller;
    } // 2. 选区跟link完全一致


    if (startText.key === start.key && start.offset === 0 && endText.key === end.key && end.offset === endText.text.length) {
      if (Link.isLink(focusInline)) {
        var _text = focusInline.text.trim();

        if (linkify.test(_text)) {
          // Rule: 避免 link 中的 text 是一个合法的 url，导致 unwrapInline 后继续被 decorate 识别
          var _unlinkRangeSelection = RangeSelection.create({
            anchor: Point.createFromParams(start.key, 0),
            focus: Point.createFromParams(endText.key, endText.text.length)
          });

          controller.command(Commands.addMarkAtRange, _unlinkRangeSelection, Mark.create({
            type: 'unlink'
          }));
        }
      }

      controller.command(Commands.focus).command(Commands.unwrapInline, 'link');
      return controller;
    } // 3. 选区在inline内，且要么在开头，要么在结束


    var startInline = document.getClosest(start.key, isLink);
    var endInline = document.getClosest(end.key, isLink);

    if (startInline && endInline && startInline.key === endInline.key && (start.offset === 0 || end.offset === endText.text.length)) {
      controller.command(Commands.unwrapInline, 'link');
      var startKey = null;
      var startOffset = null;
      var endKey = null;
      var endOffset = null;
      var preText = document.getPreviousText(start.key);
      var changedPreText = controller.value.document.getNode(preText.key);
      var fromStart = start.offset === 0;

      if (changedPreText.text.length === preText.text.length) {
        // 说明preText本身也在一个inline元素中，unwrapInline的数据没有合并到preText中
        var unwrapText = controller.value.document.getNextText(changedPreText.key);
        startKey = unwrapText.key;
        startOffset = fromStart ? end.offset : 0;
        endKey = startKey;
        endOffset = fromStart ? endInline.text.length : start.offset;
      } else {
        startKey = changedPreText.key;
        startOffset = fromStart ? preText.text.length + end.offset : preText.text.length;
        endKey = startKey;
        endOffset = fromStart ? preText.text.length + endInline.text.length : preText.text.length + start.offset;
      }

      if (startKey && endKey) {
        controller.command(Commands.select, RangeSelection.fromJSON({
          anchor: {
            key: startKey,
            offset: startOffset
          },
          focus: {
            key: endKey,
            offset: endOffset
          }
        })).command(Commands.wrapInline, {
          type: 'link',
          data: endInline.data
        }).command(fromStart ? Commands.moveToEndOfPreviousText : Commands.moveToEnd);
      }

      return controller;
    }

    controller.command(Commands.focus).command(Commands.unwrapInline, 'link');
    var allLinks = inlines.filter(isLink);
    var data = allLinks.length === 1 ? allLinks[0].data : {
      href: ''
    }; // 跟yuque交互保持一直，当选中区域中存在link且同时存在非link选区时，取消选区内所有的链接，同时将选区设置为新的link

    controller.command(Commands.wrapInline, {
      type: 'link',
      data: data
    }).command(Commands.focus).command(Commands.moveToEndOfInline);
    return controller;
  };
}
//# sourceMappingURL=createUnwrapLink.js.map