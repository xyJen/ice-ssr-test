{"version":3,"sources":["../../../../../src/plugins/link/commands/showLinkPastePanel.ts"],"names":["Commands","Text","Inline","Injection","Link","insertBlockLinkCard","removeinjectedCardInfo","updateLinkCardInfo","optionLink","optionCard","createShowLinkPastePanel","enableLinkCardBlock","showLinkPastePanel","controller","text","getLinkInfo","options","gettCustomPanel","onChange","index","deleteAtRange","Number","value","document","selection","previousNode","getPreviousNode","focus","key","isLink","command","insertInline","type","nodes","create","data","href","moveToStartOfNextText","run","inline","cardInfo","displayType","injections","injection","excludeInjections","filter","i","setInjections","setOpRelatedId","then","info","imgURL","title","desc","setData","customPanel"],"mappings":"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","sourcesContent":["import { Controller, Commands, Text, Inline, Injection } from '@ali/4ever-cangjie';\nimport { Link } from '@ali/4ever-mo';\nimport { insertBlockLinkCard } from '../linkCard/actions';\nimport { CardInfo, ILinkCardInfo, LinkPluginConfig } from '../types';\nimport removeinjectedCardInfo from './removeinjectedCardInfo';\nimport updateLinkCardInfo from './updateLinkCardInfo';\n\n\nconst optionLink = 0;\nconst optionCard = 1;\n\nexport default function createShowLinkPastePanel(\n  enableLinkCardBlock: LinkPluginConfig['enableLinkCardBlock'],\n) {\n  return function showLinkPastePanel(\n    controller: Controller,\n    text: string,\n    getLinkInfo?: (href: string) => Promise<CardInfo>,\n  ) {\n    // text 保留链接 card 转成链接摘要卡片\n    const options = ['text', 'card'];\n    const gettCustomPanel = () => {\n      return {\n        onChange: (index: number, deleteAtRange: () => void) => {\n          switch (Number(index)) {\n            // options[0]\n            case optionLink:\n              const { document, selection } = controller.value;\n              // 若当前粘贴的节点已经是link类型了，则不再执行后续转link的逻辑\n              const previousNode = document.getPreviousNode(selection.focus.key);\n              if (Link.isLink(previousNode)) break;\n              deleteAtRange();\n              controller.command(Commands.insertInline, {\n                type: 'link',\n                nodes: [Text.create(text)],\n                data: {\n                  href: text,\n                },\n              });\n              controller.command(Commands.moveToStartOfNextText)\n                .command(Commands.focus);\n              break;\n            // options[1]\n            case optionCard:\n              {\n                deleteAtRange();\n                if (enableLinkCardBlock) {\n                  controller.run('onAction', insertBlockLinkCard(text, text));\n                } else {\n                  const inline = Inline.create({\n                    type: 'link',\n                    data: { href: text, cardInfo: { displayType: 'card' } },\n                    nodes: [Text.create(text)],\n                  });\n                  const { injections } = controller.value;\n                  const injection = Injection.create({\n                    key: inline.key,\n                    data: {\n                      href: text,\n                      cardInfo: { displayType: 'card' },\n                    },\n                  });\n                  const excludeInjections: Injection[] = injections.filter((i) => i.key !== inline.key);\n                  controller.setInjections([...excludeInjections, injection]);\n                  controller\n                    .setOpRelatedId(inline.key)\n                    .command(Commands.insertInline, inline);\n                  getLinkInfo && getLinkInfo(text).then((info) => {\n                    if (info) {\n                      // 请求成功\n                      const { imgURL, title, desc } = info;\n                      const cardInfo: ILinkCardInfo = { imgURL, title, desc, displayType: 'card' };\n                      controller\n                        .setOpRelatedId(inline.key)\n                        .command(removeinjectedCardInfo, inline)\n                        .command(updateLinkCardInfo, inline, text, text, cardInfo)\n                        .command(Commands.moveToStartOfNextText)\n                        .command(Commands.focus);\n                    }\n                  });\n                }\n              }\n              break;\n            default:\n              break;\n          }\n        },\n        options,\n      };\n    };\n\n    controller.setData({\n      ...controller.value.data,\n      customPanel: gettCustomPanel(),\n    });\n\n    return controller;\n  };\n}\n"],"file":"showLinkPastePanel.js"}