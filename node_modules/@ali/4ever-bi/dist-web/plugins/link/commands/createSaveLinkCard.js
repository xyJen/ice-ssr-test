import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import injectCardInfo from "./injectCardInfo";
import removeinjectedCardInfo from "./removeinjectedCardInfo";
import updateLinkCardInfo from "./updateLinkCardInfo";
import { isLinkNode } from "../utils";

var isCardStyle = function isCardStyle(node) {
  var _data$cardInfo;

  var data = node.data;
  return data && ((_data$cardInfo = data.cardInfo) == null ? void 0 : _data$cardInfo.displayType) === 'card';
};

export default function createSaveLinkCard(getLinkInfo) {
  function fetchLinkData(_x, _x2, _x3, _x4) {
    return _fetchLinkData.apply(this, arguments);
  }

  function _fetchLinkData() {
    _fetchLinkData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(node, controller, href, text) {
      var info, _info$imgURL, imgURL, _info$title, title, _info$desc, desc, cardInfo;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(getLinkInfo && typeof getLinkInfo === 'function')) {
                _context.next = 19;
                break;
              }

              // 先设置卡片状态为 loading，并且为节点注入信息，处理交互兼容
              controller.command(injectCardInfo, node, {
                displayType: 'card'
              }); // 展示卡片

              _context.prev = 2;
              _context.next = 5;
              return getLinkInfo(href);

            case 5:
              info = _context.sent;

              if (!info) {
                _context.next = 11;
                break;
              }

              // 请求成功
              _info$imgURL = info.imgURL, imgURL = _info$imgURL === void 0 ? '' : _info$imgURL, _info$title = info.title, title = _info$title === void 0 ? '' : _info$title, _info$desc = info.desc, desc = _info$desc === void 0 ? '' : _info$desc;
              cardInfo = {
                imgURL: imgURL,
                title: title,
                desc: desc,
                displayType: 'card'
              }; // 清理注入信息

              controller.command(removeinjectedCardInfo, node).command(updateLinkCardInfo, node, text, href, cardInfo);
              return _context.abrupt("return");

            case 11:
              _context.next = 16;
              break;

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](2);
              // 获取信息失败，不添加任何数据
              // 设置卡片imgURL, title, desc 为 undefined
              controller.command(updateLinkCardInfo, node, text, href, {
                displayType: 'card'
              });

            case 16:
              _context.prev = 16;
              // 清理注入信息
              controller.command(removeinjectedCardInfo, node);
              return _context.finish(16);

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 13, 16, 19]]);
    }));
    return _fetchLinkData.apply(this, arguments);
  }

  return function saveLinkCard(controller, node, text, href) {
    // 如果卡片原来是链接形式，需要先转为卡片形式，再获取信息，避免排版问题
    // todo 排版 2.0 后清理下面代码
    var refinedNode = node;

    if (isLinkNode(node) && !isCardStyle(node)) {
      controller.command(updateLinkCardInfo, node, text, href, {
        displayType: 'card'
      });
      refinedNode = controller.value.document.getNode(node.key);
    }

    fetchLinkData(refinedNode, controller, href, text);
    return controller;
  };
}
//# sourceMappingURL=createSaveLinkCard.js.map