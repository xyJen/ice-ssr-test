export var LINK_HIDE_EDITOR = Symbol('LINK_HIDE_EDITOR');
export var LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT = Symbol('LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT');
export var LINK_REMOVE = Symbol('LINK_REMOVE');
export var LINK_UPDATE = Symbol('LINK_UPDATE');
export var LINK_REMOVE_PURE = Symbol('LINK_REMOVE_PURE');
export var LINK_UPDATE_PURE = Symbol('LINK_UPDATE_PURE');
export var LINK_WRAP = Symbol('LINK_WRAP');
export var LINK_UNWRAP = Symbol('LINK_UNWRAP');
export var LINK_UNWRAP_CARD = Symbol('LINK_UNWRAP_CARD');
export var LINK_FOCUS_EDITOR = Symbol('LINK_FOCUS_EDITOR');
export var LINK_UNWRAP_PURE_LINK = Symbol('LINK_UNWRAP_PURE_LINK');
export var LINK_SWITCH_DISPLAYTYPE = Symbol('LINK_SWITCH_DISPLAYTYPE');
export var LINK_SWITCH_LINK_TO_CARD = Symbol('LINK_SWITCH_LINK_TO_CARD');
export var LINK_EDIT_LINK_CARD = Symbol('LINK_EDIT_LINK_CARD');
export var LINK_HOVER_LINK_CARD = Symbol('LINK_HOVER_LINK_CARD');
export var LINK_CLICK_PLACEHOLDER = Symbol('LINK_CLICK_PLACEHOLDER');
export var LINK_INJECT_CARDINFO = Symbol('LINK_INJECT_CARDINFO');
export var LINK_REMOVE_INJECTED_CARDINFO = Symbol('LINK_REMOVE_INJECTED_CARDINFO');
export var LINK_COPY_LINK = Symbol('LINK_COPY_LINK');
export var LINK_CUT_LINK = Symbol('LINK_CUT_LINK');
export var LINK_SAVE_LINK_CARD = Symbol('LINK_SAVE_LINK_CARD');
export var LINK_SHOW_LINK_PASRE_PANEL = Symbol('LINK_SHOW_LINK_PASRE_PANEL');
export var LINK_CUT_PURE = Symbol('LINK_CUT_PURE');
export var LINK_OPEN = Symbol('LINK_OPEN');
export function hideLinkEditor() {
  return {
    type: LINK_HIDE_EDITOR,
    payload: {}
  };
}
export function hideLinkEditorAndMoveToNextText() {
  return {
    type: LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT,
    payload: {}
  };
}
export function wrapLink(range) {
  return {
    type: LINK_WRAP,
    payload: {
      range: range
    }
  };
}
export function unwrapLink() {
  return {
    type: LINK_UNWRAP,
    payload: {}
  };
}
export function unwrapLinkCard(node) {
  return {
    type: LINK_UNWRAP_CARD,
    payload: {
      node: node
    }
  };
}
export function removeLink(node) {
  return {
    type: LINK_REMOVE,
    payload: {
      node: node
    }
  };
}
export function updateLink(link, text, href) {
  return {
    type: LINK_UPDATE,
    payload: {
      node: link,
      text: text,
      href: href
    }
  };
}
export function updateLinkWithCardInfo(link, text, href, cardInfo) {
  return {
    type: LINK_UPDATE,
    payload: {
      node: link,
      text: text,
      href: href,
      cardInfo: cardInfo
    }
  };
}
export function removePureLink(node, offset, href) {
  return {
    type: LINK_REMOVE_PURE,
    payload: {
      node: node,
      offset: offset,
      href: href
    }
  };
}
export function cutPureLink(node, offset, href) {
  return {
    type: LINK_CUT_PURE,
    payload: {
      node: node,
      offset: offset,
      href: href
    }
  };
}
export function updatePureLink(link, offset, text, href, srcHref) {
  return {
    type: LINK_UPDATE_PURE,
    payload: {
      node: link,
      offset: offset,
      text: text,
      href: href,
      srcHref: srcHref
    }
  };
}
export function updatePureLinkWithCardInfo(link, offset, text, href, srcHref, cardInfo, needFetchLinkInfo) {
  return {
    type: LINK_UPDATE_PURE,
    payload: {
      node: link,
      offset: offset,
      text: text,
      href: href,
      srcHref: srcHref,
      cardInfo: cardInfo,
      needFetchLinkInfo: needFetchLinkInfo
    }
  };
}
export function focusLinkEditor() {
  return {
    type: LINK_FOCUS_EDITOR,
    payload: {}
  };
}
export function unwrapPureLink(node, offset, href) {
  return {
    type: LINK_UNWRAP_PURE_LINK,
    payload: {
      node: node,
      offset: offset,
      href: href
    }
  };
}
export function switchDisplayType(node, displayType) {
  return {
    type: LINK_SWITCH_DISPLAYTYPE,
    payload: {
      node: node,
      displayType: displayType
    }
  };
}
export function editLinkCard() {
  return {
    type: LINK_EDIT_LINK_CARD,
    payload: {}
  };
}
export function hoverLinkCard() {
  return {
    type: LINK_HOVER_LINK_CARD,
    payload: {}
  };
}
export function handleLinkPlaceholder() {
  return {
    type: LINK_CLICK_PLACEHOLDER,
    payload: {}
  };
}
export function switchLink2Card(link, text, href, cardInfo) {
  return {
    type: LINK_SWITCH_LINK_TO_CARD,
    payload: {
      node: link,
      text: text,
      href: href,
      cardInfo: cardInfo
    }
  };
}
export function injectCardInfo(node, cardInfo, range) {
  return {
    type: LINK_INJECT_CARDINFO,
    payload: {
      node: node,
      cardInfo: cardInfo,
      range: range
    }
  };
}
export function removeInjectCardInfo(node) {
  return {
    type: LINK_REMOVE_INJECTED_CARDINFO,
    payload: {
      node: node
    }
  };
}
export function copyLink(node) {
  return {
    type: LINK_COPY_LINK,
    payload: {
      node: node
    }
  };
}
export function cutLink(node) {
  return {
    type: LINK_CUT_LINK,
    payload: {
      node: node
    }
  };
}
export function saveLinkCard(node, text, href) {
  return {
    type: LINK_SAVE_LINK_CARD,
    payload: {
      node: node,
      text: text,
      href: href
    }
  };
}
export function showLinkPastePanel(text, getLinkInfo) {
  return {
    type: LINK_SHOW_LINK_PASRE_PANEL,
    payload: {
      text: text,
      getLinkInfo: getLinkInfo
    }
  };
}
//# sourceMappingURL=actions.js.map