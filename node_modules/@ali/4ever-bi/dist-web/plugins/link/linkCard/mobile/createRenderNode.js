import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { SimpleLazyLoad } from '@ali/4ever-component';
import { convertBlockLinkCardToTextLink, copyBlockLinkCard, cutBlockLinkCard, deleteBlockLinkCard, unlinkBlockCardData, updateBlockLinkCardData } from "../actions";
import { getBlockLinkCardState } from "../utils/getBlockLinkCardState";
import { LinkPlugin, useScrollableContent } from '@ali/4ever-bamboo';
import biLocale from "../../../../locales/zh_CN";
var normalizeLink = LinkPlugin.normalizeLink,
    openLink = LinkPlugin.openLink;
var Wrapper = /*#__PURE__*/styled.div(["cursor:pointer;border-radius:9px;"]);

function LinkCardNode(props) {
  var nodeProps = props.nodeProps,
      controller = props.controller,
      linkConfig = props.linkConfig,
      isMobile = props.isMobile,
      URLLinkCard = props.URLLinkCard;
  var _linkConfig$locale = linkConfig.locale,
      locale = _linkConfig$locale === void 0 ? biLocale.link.locale : _linkConfig$locale,
      _linkConfig$protocolA = linkConfig.protocolAllowList,
      protocolAllowList = _linkConfig$protocolA === void 0 ? ['http:', 'https:', 'dingtalk:', 'taobao:'] : _linkConfig$protocolA,
      onCopyLink = linkConfig.onCopyLink,
      getLinkInfo = linkConfig.getLinkInfo,
      openLinkOfConfig = linkConfig.openLink;
  var node = nodeProps.node,
      isSelected = nodeProps.isSelected;
  var selection = controller.value.selection;
  var _ref = node.data.metadata,
      text = _ref.text,
      href = _ref.href,
      cardInfo = _ref.cardInfo;
  var scrollContent = useScrollableContent() || document.body;
  var getContainer = React.useCallback(function () {
    return scrollContent;
  }, [scrollContent]);
  var urlInfo = React.useMemo(function () {
    var isTitleEqualsHref = text.trim() === href.trim();
    var actualTitle = isTitleEqualsHref ? cardInfo.title : text;
    return {
      title: actualTitle || '',
      desc: cardInfo.desc || '',
      imgURL: cardInfo.imgURL || ''
    };
  }, [cardInfo, text, href]);
  var linkCardLocale = React.useMemo(function () {
    var tooltipLocale = {
      editTooltip: locale.edit,
      copyTooltip: locale.copy,
      unlinkTooltip: locale.unlink,
      deleteTooltip: locale["delete"],
      switchStyleTooltip: locale.styleText
    };
    return _extends({}, locale, tooltipLocale);
  }, [locale]);
  var state = React.useMemo(function () {
    return getBlockLinkCardState(node);
  }, [node]);
  var handleVisit = React.useCallback(function () {
    if (openLinkOfConfig) {
      var normalizedLink = normalizeLink(href, protocolAllowList);
      openLinkOfConfig(normalizedLink);
    } else {
      openLink(href, protocolAllowList);
    }
  }, [href, protocolAllowList, openLinkOfConfig]);
  var handleCopy = React.useCallback(function () {
    // 卡片形式下，使用仓颉复制
    controller.run('onAction', copyBlockLinkCard(node));

    if (onCopyLink && typeof onCopyLink === 'function') {
      onCopyLink(href);
    }
  }, [href, onCopyLink, node, controller]);
  var handleCut = React.useCallback(function () {
    controller.run('onAction', cutBlockLinkCard(node));
  }, [controller, node]);
  var handleRemove = React.useCallback(function () {
    controller.run('onAction', deleteBlockLinkCard(node));
  }, [controller, node]);
  var handleUnlink = React.useCallback(function () {
    controller.run('onAction', unlinkBlockCardData(node));
  }, [controller, node]);
  var handleSwitchStyle = React.useCallback(function (e) {
    if (e === 'popup') {
      controller.run('onAction', convertBlockLinkCardToTextLink(node));
    }
  }, [controller, node]);
  var handleRefresh = React.useCallback(function () {
    controller.run('onAction', updateBlockLinkCardData(node, text, href));
  }, [controller, getLinkInfo, text, href, node]);
  return /*#__PURE__*/_createElement(Wrapper, null, /*#__PURE__*/_createElement(URLLinkCard, {
    getContainer: getContainer,
    isSelected: isSelected && selection.isCollapsed,
    cardStyle: 'indoc',
    state: state,
    url: href,
    readonly: false,
    locale: linkCardLocale,
    urlInfo: urlInfo,
    isMobile: isMobile // @ts-ignore
    ,
    onRefresh: handleRefresh,
    onCopy: handleCopy,
    onOpenURL: handleVisit,
    onSwitchStyle: handleSwitchStyle,
    onDelete: handleRemove,
    onCut: handleCut,
    onEdit: function onEdit() {},
    onUnlink: handleUnlink,
    editBtnTestID: "link-toolbar-edit",
    copyBtnTestID: "link-toolbar-copy",
    cutBtnTestID: "link-toolbar-cut",
    unlinkBtnTestID: "link-toolbar-unlink",
    deleteBtnTestID: "link-toolbar-remove",
    switchStyleBtnTestID: "link-toolbar-switch",
    linkStyleBtnTestID: "link-toolbar-switch-link",
    cardStyleBtnTestID: "link-toolbar-switch-card",
    cardTestID: "link-card"
  }));
}

export default function createRenderNode(linkConfig, isMobile) {
  var LazyLoad = linkConfig.lazyload || SimpleLazyLoad;
  var URLLinkCard = LazyLoad(function () {
    return import('@ali/we-biz-link-card').then(function (_ref2) {
      var URLLinkCard = _ref2.URLLinkCard;
      return URLLinkCard;
    });
  });
  return function (nodeProps, controller) {
    return /*#__PURE__*/_createElement(LinkCardNode, {
      linkConfig: linkConfig,
      isMobile: isMobile,
      nodeProps: nodeProps,
      URLLinkCard: URLLinkCard,
      controller: controller
    });
  };
}
//# sourceMappingURL=createRenderNode.js.map