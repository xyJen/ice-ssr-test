import { hideCustomPastePanel } from '@ali/4ever-plugin-clipboard';
import { LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD, LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD, LINK_CARD_COPY_LINK, LINK_CARD_CUT_LINK, LINK_CARD_DELETE_LINK, LINK_CARD_UPDATE_DATA, LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK, LINK_CARD_UNLINK, LINK_CARD_INSERT_CARD } from "./actions";
import { unwrapLinkCard, convertPureLinkToBlockLinkCard, convertTextLinkToBlockLinkCard, convertBlockLinkCardToTextLink, copyLink, updateLinkCard, insertBlockLinkCard, convertBlockLinkCardToDefaultBlock } from "./commands";

var createOnAction = function createOnAction(config, serializer) {
  return function (action, controller, next) {
    var type = action.type,
        payload = action.payload;
    serializer = serializer || controller.serializer;

    if (type === LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD) {
      var _ref = payload,
          node = _ref.node,
          text = _ref.text,
          href = _ref.href,
          offset = _ref.offset,
          srcHref = _ref.srcHref,
          cardInfo = _ref.cardInfo,
          needFetchLinkInfo = _ref.needFetchLinkInfo;
      return controller.command(convertPureLinkToBlockLinkCard, node, {
        offset: offset,
        text: text,
        href: href,
        srcHref: srcHref,
        cardInfo: cardInfo,
        needFetchLinkInfo: needFetchLinkInfo,
        getLinkInfo: config.getLinkInfo
      });
    }

    if (type === LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD) {
      // 切换卡片显示类型后，隐藏custom面板 to fix: https://work.aone.alibaba-inc.com/issue/44255401
      controller.run('onAction', hideCustomPastePanel());
      var _ref2 = payload,
          _node = _ref2.node,
          _text = _ref2.text,
          _href = _ref2.href,
          _cardInfo = _ref2.cardInfo;
      return controller.command(convertTextLinkToBlockLinkCard, _node, {
        text: _text,
        href: _href,
        cardInfo: _cardInfo,
        getLinkInfo: config.getLinkInfo
      });
    }

    if (type === LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK) {
      var _ref3 = payload,
          _node2 = _ref3.node,
          data = _ref3.data;
      return controller.command(convertBlockLinkCardToTextLink, _node2, data);
    }

    if (type === LINK_CARD_INSERT_CARD) {
      var _ref4 = payload,
          _text2 = _ref4.text,
          _href2 = _ref4.href,
          _cardInfo2 = _ref4.cardInfo;
      return controller.command(insertBlockLinkCard, {
        text: _text2,
        href: _href2,
        cardInfo: _cardInfo2,
        getLinkInfo: config.getLinkInfo
      });
    }

    if (type === LINK_CARD_COPY_LINK) {
      var _ref5 = payload,
          _node3 = _ref5.node;
      return controller.command(copyLink, _node3, serializer);
    }

    if (type === LINK_CARD_CUT_LINK) {
      var _ref6 = payload,
          _node4 = _ref6.node;
      return controller.command(copyLink, _node4, serializer).command(convertBlockLinkCardToDefaultBlock, _node4);
    }

    if (type === LINK_CARD_DELETE_LINK) {
      var _ref7 = payload,
          _node5 = _ref7.node;
      return controller.command(convertBlockLinkCardToDefaultBlock, _node5);
    }

    if (type === LINK_CARD_UNLINK) {
      var _ref8 = payload,
          _node6 = _ref8.node;
      return controller.command(unwrapLinkCard, _node6);
    }

    if (type === LINK_CARD_UPDATE_DATA) {
      var _ref9 = payload,
          _node7 = _ref9.node,
          _text3 = _ref9.text,
          _href3 = _ref9.href;
      return controller.command(updateLinkCard, _node7, {
        text: _text3,
        href: _href3,
        getLinkInfo: config.getLinkInfo
      });
    }

    return next();
  };
};

export default createOnAction;
//# sourceMappingURL=onAction.js.map