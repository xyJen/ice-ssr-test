import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import buildLinkCardData from "./buildLinkCardData";
export function fetchLinkData(_x, _x2, _x3, _x4, _x5, _x6) {
  return _fetchLinkData.apply(this, arguments);
}

function _fetchLinkData() {
  _fetchLinkData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(node, controller, href, text, getLinkInfo, relatedId) {
    var info, _info$imgURL, imgURL, _info$title, title, _info$desc, desc, cardInfo;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (relatedId === void 0) {
              relatedId = null;
            }

            if (!(getLinkInfo && typeof getLinkInfo === 'function')) {
              _context.next = 19;
              break;
            }

            // 先设置卡片状态为 loading，并且为节点注入信息，处理交互兼容
            controller.command('setCardInjection', node, {
              isLoading: true
            }); // 展示卡片

            _context.prev = 3;
            _context.next = 6;
            return getLinkInfo(href);

          case 6:
            info = _context.sent;

            if (!info) {
              _context.next = 12;
              break;
            }

            // 请求成功
            _info$imgURL = info.imgURL, imgURL = _info$imgURL === void 0 ? '' : _info$imgURL, _info$title = info.title, title = _info$title === void 0 ? '' : _info$title, _info$desc = info.desc, desc = _info$desc === void 0 ? '' : _info$desc;
            cardInfo = {
              imgURL: imgURL,
              title: title,
              desc: desc,
              displayType: 'card'
            }; // 清理注入信息

            controller.setOpRelatedId(relatedId).command('setCardInjection', node, {}).command('setCardData', node, buildLinkCardData({
              text: text,
              href: href,
              cardInfo: cardInfo
            }));
            return _context.abrupt("return");

          case 12:
            _context.next = 16;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](3);

          case 16:
            _context.prev = 16;
            // 清理注入信息
            controller.command('setCardInjection', node, {});
            return _context.finish(16);

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 14, 16, 19]]);
  }));
  return _fetchLinkData.apply(this, arguments);
}
//# sourceMappingURL=fetchLinkData.js.map