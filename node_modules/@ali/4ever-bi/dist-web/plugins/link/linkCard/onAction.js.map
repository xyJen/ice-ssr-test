{"version":3,"sources":["../../../../../src/plugins/link/linkCard/onAction.ts"],"names":["hideCustomPastePanel","LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD","LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD","LINK_CARD_COPY_LINK","LINK_CARD_CUT_LINK","LINK_CARD_DELETE_LINK","LINK_CARD_UPDATE_DATA","LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK","LINK_CARD_UNLINK","LINK_CARD_INSERT_CARD","unwrapLinkCard","convertPureLinkToBlockLinkCard","convertTextLinkToBlockLinkCard","convertBlockLinkCardToTextLink","copyLink","updateLinkCard","insertBlockLinkCard","convertBlockLinkCardToDefaultBlock","createOnAction","config","serializer","action","controller","next","type","payload","node","text","href","offset","srcHref","cardInfo","needFetchLinkInfo","command","getLinkInfo","run","data"],"mappings":"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","sourcesContent":["import type { Mo } from '@ali/4ever-mo';\nimport { hideCustomPastePanel } from '@ali/4ever-plugin-clipboard';\nimport {\n  LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD,\n  LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD,\n  LINK_CARD_COPY_LINK,\n  LINK_CARD_CUT_LINK,\n  LINK_CARD_DELETE_LINK,\n  LINK_CARD_UPDATE_DATA,\n  LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK,\n  LINK_CARD_UNLINK,\n  LINK_CARD_INSERT_CARD,\n} from './actions';\nimport {\n  unwrapLinkCard,\n  convertPureLinkToBlockLinkCard,\n  convertTextLinkToBlockLinkCard,\n  convertBlockLinkCardToTextLink,\n  copyLink,\n  updateLinkCard,\n  insertBlockLinkCard,\n  convertBlockLinkCardToDefaultBlock,\n} from './commands';\nimport {\n  ConvertPureLinkToBlockLinkCardPayload,\n  LinkPluginConfig,\n  ConvertTextLinkToBlockLinkCardPayload,\n  CopyOrCutBlockLinkCardPayload,\n  UpdateBlockLinkCardDataPayload,\n  ConvertBlockLinkCardToTextLinkPayload,\n  UnlinkBlockLinkCardPayload,\n  InsertBlockLinkCardPayload\n} from \"../types\";\nimport { Controller } from '@ali/4ever-cangjie';\n\nconst createOnAction = (config: LinkPluginConfig, serializer?: Mo) => (action, controller: Controller, next) => {\n  const { type, payload } = action;\n  serializer = serializer || controller.serializer;\n\n  if (type === LINK_CARD_PURE_LINK_TO_BLOCK_LINK_CARD) {\n    const {\n      node,\n      text,\n      href,\n      offset,\n      srcHref,\n      cardInfo,\n      needFetchLinkInfo,\n    } = payload as ConvertPureLinkToBlockLinkCardPayload;\n\n    return controller.command(\n      convertPureLinkToBlockLinkCard,\n      node,\n      {\n        offset,\n        text,\n        href,\n        srcHref,\n        cardInfo,\n        needFetchLinkInfo,\n        getLinkInfo: config.getLinkInfo\n      });\n  }\n\n  if (type === LINK_CARD_TEXT_LINK_TO_BLOCK_LINK_CARD) {\n    // 切换卡片显示类型后，隐藏custom面板 to fix: https://work.aone.alibaba-inc.com/issue/44255401\n    controller.run('onAction', hideCustomPastePanel());\n    const { node, text, href, cardInfo } = payload as ConvertTextLinkToBlockLinkCardPayload;\n    return controller.command(convertTextLinkToBlockLinkCard,\n      node,\n      {\n        text,\n        href,\n        cardInfo,\n        getLinkInfo: config.getLinkInfo\n      });\n  }\n\n  if (type === LINK_CARD_BLOCK_LINK_CARD_TO_TEXT_LINK) {\n    const { node, data } = payload as ConvertBlockLinkCardToTextLinkPayload;\n    return controller.command(convertBlockLinkCardToTextLink, node, data);\n  }\n\n  if (type === LINK_CARD_INSERT_CARD) {\n    const { text, href, cardInfo } = payload as InsertBlockLinkCardPayload;\n    return controller.command(insertBlockLinkCard, { text, href, cardInfo, getLinkInfo: config.getLinkInfo });\n  }\n\n  if (type === LINK_CARD_COPY_LINK) {\n    const { node } = payload as CopyOrCutBlockLinkCardPayload;\n    return controller.command(copyLink, node, serializer);\n  }\n\n  if (type === LINK_CARD_CUT_LINK) {\n    const { node } = payload as CopyOrCutBlockLinkCardPayload;\n    return controller.command(copyLink, node, serializer)\n      .command(convertBlockLinkCardToDefaultBlock, node);\n  }\n\n  if (type === LINK_CARD_DELETE_LINK) {\n    const { node } = payload as CopyOrCutBlockLinkCardPayload;\n    return controller.command(convertBlockLinkCardToDefaultBlock, node);\n  }\n\n  if (type === LINK_CARD_UNLINK) {\n    const { node } = payload as UnlinkBlockLinkCardPayload;\n    return controller.command(unwrapLinkCard, node);\n  }\n\n  if (type === LINK_CARD_UPDATE_DATA) {\n    const { node, text, href } = payload as UpdateBlockLinkCardDataPayload;\n    return controller.command(updateLinkCard, node, { text, href, getLinkInfo: config.getLinkInfo });\n  }\n\n  return next();\n}\n\nexport default createOnAction;\n"],"file":"onAction.js"}