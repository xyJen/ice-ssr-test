{"version":3,"sources":["../../../../src/plugins/link/createRenderNode.tsx"],"names":["React","Link","isLinkCardNode","createRenderNode","linkConfig","draggable","locale","protocolAllowList","onCopyLink","getLinkInfo","enableCard","openLink","enableLinkCardBlock","mountRoot","link","props","_","node","linkType","cardInfo","data","displayType"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAE5B,OAAOC,IAAP;AACA,SAASC,cAAT;AAGA,eAAe,SAASC,gBAAT,CACbC,UADa,EACiBC,SADjB,EAEb;AAAA,MAEEC,MAFF,GAUIF,UAVJ,CAEEE,MAFF;AAAA,MAGEC,iBAHF,GAUIH,UAVJ,CAGEG,iBAHF;AAAA,MAIEC,UAJF,GAUIJ,UAVJ,CAIEI,UAJF;AAAA,MAKEC,WALF,GAUIL,UAVJ,CAKEK,WALF;AAAA,8BAUIL,UAVJ,CAMEM,UANF;AAAA,MAMEA,UANF,sCAMe,KANf;AAAA,MAOEC,QAPF,GAUIP,UAVJ,CAOEO,QAPF;AAAA,MAQEC,mBARF,GAUIR,UAVJ,CAQEQ,mBARF;AAAA,8BAUIR,UAVJ,CASES,SATF;AAAA,MASEA,SATF,sCASc,KATd;AAYA,SAAO;AACLC,IAAAA,IAAI,EAAE,cAACC,KAAD,EAAiCC,CAAjC,EAAuC;AAAA,UACnCC,IADmC,GAC1BF,KAD0B,CACnCE,IADmC;AAG3C,UAAIC,QAAyB,GAAG,MAAhC,CAH2C,CAI3C;;AACA,UAAIhB,cAAc,CAACe,IAAD,CAAlB,EAA0B;AAAA,YAChBE,QADgB,GACHF,IAAI,CAACG,IADF,CAChBD,QADgB;;AAAA,mBAEAA,QAAQ,IAAI,EAFZ;AAAA,YAEhBE,WAFgB,QAEhBA,WAFgB;;AAGxB,YAAIA,WAAW,KAAK,MAApB,EAA4B;AAC1BH,UAAAA,QAAQ,GAAG,MAAX;AACD;AACF;;AACD,0BACE,eAAC,IAAD,eACMH,KADN;AAEE,QAAA,WAAW,EAAEG,QAFf;AAGE,QAAA,IAAI,EAAED,IAHR;AAIE,QAAA,iBAAiB,EAAEV,iBAAiB,IAAI,EAJ1C;AAKE,QAAA,MAAM,EAAED,MALV;AAME,QAAA,WAAW,EAAEG,WANf;AAOE,QAAA,UAAU,EAAED,UAPd;AAQE,QAAA,UAAU,EAAEE,UARd;AASE,QAAA,SAAS,EAAEL,SATb;AAUE,QAAA,QAAQ,EAAEM,QAVZ;AAWE,QAAA,mBAAmB,EAAEC,mBAXvB;AAYE,QAAA,SAAS,EAAEC;AAZb,SADF;AAgBD;AA7BI,GAAP;AA+BD","sourcesContent":["import * as React from 'react';\nimport { Plugin, Inline, RenderNodeProps } from '@ali/4ever-cangjie';\nimport { LinkPluginConfig, LinkDisplayType } from './types';\nimport Link from './components/textLink';\nimport { isLinkCardNode } from './utils';\nimport { BiPluginConfig } from '../../types';\n\nexport default function createRenderNode(\n  linkConfig: LinkPluginConfig, draggable?: BiPluginConfig['DraggablePluginConfig'],\n) {\n  const {\n    locale,\n    protocolAllowList,\n    onCopyLink,\n    getLinkInfo,\n    enableCard = false,\n    openLink,\n    enableLinkCardBlock,\n    mountRoot = false,\n  } = linkConfig;\n\n  return {\n    link: (props: RenderNodeProps<Inline>, _) => {\n      const { node } = props;\n\n      let linkType: LinkDisplayType = 'link';\n      // 当 link 是卡片形式\n      if (isLinkCardNode(node)) {\n        const { cardInfo } = node.data;\n        const { displayType } = cardInfo || {};\n        if (displayType === 'card') {\n          linkType = 'card';\n        }\n      }\n      return (\n        <Link\n          {...props}\n          displayType={linkType}\n          node={node}\n          protocolAllowList={protocolAllowList || []}\n          locale={locale}\n          getLinkInfo={getLinkInfo}\n          onCopyLink={onCopyLink}\n          enableCard={enableCard}\n          draggable={draggable}\n          openLink={openLink}\n          enableLinkCardBlock={enableLinkCardBlock}\n          mountRoot={mountRoot}\n        />\n      );\n    },\n  };\n}\n"],"file":"createRenderNode.js"}