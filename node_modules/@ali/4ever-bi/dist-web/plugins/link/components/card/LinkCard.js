import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import styled from 'styled-components';
import { theme } from '@ali/4ever-bamboo';
import { URLLinkCard } from '@ali/we-biz-link-card';
var _theme$link = theme.link,
    height = _theme$link.height,
    width = _theme$link.width,
    margin = _theme$link.margin;
var LINK_WIDTH = 350;
var Wrapper = /*#__PURE__*/styled.span(["cursor:default;display:inline-block;line-height:normal;box-sizing:content-box;border-radius:8px;"]);

var noop = function noop() {};

export var LinkCard = /*#__PURE__*/React.memo(function (props) {
  var state = props.state,
      href = props.href,
      controller = props.controller,
      _props$title = props.title,
      title = _props$title === void 0 ? '' : _props$title,
      _props$imgURL = props.imgURL,
      imgURL = _props$imgURL === void 0 ? '' : _props$imgURL,
      _props$desc = props.desc,
      desc = _props$desc === void 0 ? '' : _props$desc,
      locale = props.locale,
      displayStyle = props.displayType,
      _props$onCopy = props.onCopy,
      onCopy = _props$onCopy === void 0 ? noop : _props$onCopy,
      _props$onRefresh = props.onRefresh,
      onRefresh = _props$onRefresh === void 0 ? noop : _props$onRefresh,
      _props$onOpenLink = props.onOpenLink,
      onOpenLink = _props$onOpenLink === void 0 ? noop : _props$onOpenLink,
      _props$onSwitchStyle = props.onSwitchStyle,
      onSwitchStyle = _props$onSwitchStyle === void 0 ? noop : _props$onSwitchStyle,
      _props$onCut = props.onCut,
      onCut = _props$onCut === void 0 ? noop : _props$onCut,
      _props$onDelete = props.onDelete,
      onDelete = _props$onDelete === void 0 ? noop : _props$onDelete,
      isMobile = props.isMobile,
      _props$isSelected = props.isSelected,
      isSelected = _props$isSelected === void 0 ? false : _props$isSelected,
      rest = _objectWithoutPropertiesLoose(props, ["state", "href", "controller", "title", "imgURL", "desc", "locale", "displayType", "onCopy", "onRefresh", "onOpenLink", "onSwitchStyle", "onCut", "onDelete", "isMobile", "isSelected"]);

  var urlInfo = React.useMemo(function () {
    return {
      title: title,
      imgURL: imgURL,
      desc: desc
    };
  }, [title, imgURL, desc]);
  var triggerNodeRef = React.useRef();
  var handleCopyLink = React.useCallback(function () {
    if (onCopy && typeof onCopy === 'function') {
      onCopy(href || '');
    }
  }, [onCopy, href]);
  var linkCardLocale = React.useMemo(function () {
    var tooltipLocale = {
      editTooltip: locale.edit,
      copyTooltip: locale.copy,
      unlinkTooltip: locale.unlink,
      deleteTooltip: locale["delete"],
      switchStyleTooltip: locale.styleText
    };
    return _extends({}, locale, tooltipLocale);
  }, [locale]);
  var handleSwitchStyle = React.useCallback(function (style) {
    onSwitchStyle(style === 'popup' ? 'link' : 'card');
  }, [onSwitchStyle]); // 当链接呼出卡片时，显示宽度需要调整

  var finalWidth = displayStyle === 'link' ? LINK_WIDTH : width;
  return /*#__PURE__*/_createElement(Wrapper, {
    ref: triggerNodeRef,
    style: {
      height: height,
      width: finalWidth,
      margin: margin
    }
  }, /*#__PURE__*/_createElement(URLLinkCard, _extends({
    isSelected: isSelected,
    cardStyle: displayStyle === 'link' ? 'popup' : 'indoc',
    state: state,
    url: href,
    locale: linkCardLocale,
    urlInfo: urlInfo,
    isMobile: isMobile,
    onRefresh: onRefresh,
    onCopy: handleCopyLink,
    onOpenURL: onOpenLink,
    onSwitchStyle: handleSwitchStyle,
    onDelete: onDelete,
    onCut: onCut,
    editBtnTestID: "link-toolbar-edit",
    copyBtnTestID: "link-toolbar-copy",
    cutBtnTestID: "link-toolbar-cut",
    unlinkBtnTestID: "link-toolbar-unlink",
    deleteBtnTestID: "link-toolbar-remove",
    switchStyleBtnTestID: "link-toolbar-switch",
    linkStyleBtnTestID: "link-toolbar-switch-link",
    cardStyleBtnTestID: "link-toolbar-switch-card",
    cardTestID: "link-card"
  }, rest)));
});
//# sourceMappingURL=LinkCard.js.map