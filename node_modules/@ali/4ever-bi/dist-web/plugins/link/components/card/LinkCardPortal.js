import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { useZoom, useZoomContainer } from '@ali/4ever-cangjie';
import Portal from "../AnimatePortal";
import LinkEditor from "../linkEditor";
import { switchDisplayType, editLinkCard } from "../../actions";
import { LinkCardWrapper } from "../styled";
import { LinkCard } from "./LinkCard";
import { getPositionTopLeft, offsetY } from "../../utils/getPosition";

var LinkCardPortal = function LinkCardPortal(props) {
  var node = props.node,
      text = props.text,
      _props$href = props.href,
      href = _props$href === void 0 ? '' : _props$href,
      onSave = props.onSave,
      onRemove = props.onRemove,
      onUnlink = props.onUnlink,
      onCut = props.onCut,
      onCopyLink = props.onCopyLink,
      controller = props.controller,
      locale = props.locale,
      draggable = props.draggable,
      attributes = props.attributes,
      enableCard = props.enableCard;
  var nodeKey = node == null ? void 0 : node.key;

  var _React$useState = React.useState(false),
      visible = _React$useState[0],
      setVisible = _React$useState[1];

  var portalRef = React.useRef(null);
  var linkRef = React.useRef(null);
  var isLinkCardSelected = controller.query('isLinkCardSelected', {
    node: node
  });
  var scrollableContent = useZoomContainer() || document.body;
  var zoom = useZoom();
  var handleEdit = React.useCallback(function () {
    setVisible(true);
    controller.run('onAction', editLinkCard());
  }, [controller]);
  var handleEditorHide = React.useCallback(function () {
    setVisible(false);
  }, []);
  var handleClickoutside = React.useCallback(function (event) {
    var _linkRef$current;

    var target = event.target;

    if (target === linkRef.current || (_linkRef$current = linkRef.current) != null && _linkRef$current.contains(target)) {
      return;
    }

    setVisible(false);
  }, []);
  var handleSwitchStyle = React.useCallback(function (e) {
    if (e === 'link') {
      controller.run('onAction', switchDisplayType(node, 'link'));
    }
  }, [controller, node]);
  var renderCard = React.useMemo(function () {
    return /*#__PURE__*/_createElement(LinkCardWrapper, attributes, /*#__PURE__*/_createElement(LinkCard, _extends({}, props, {
      href: href,
      readonly: false,
      isMobile: false,
      isSelected: isLinkCardSelected,
      onEdit: handleEdit,
      onDelete: onRemove,
      onCut: onCut,
      onSwitchStyle: handleSwitchStyle,
      onCopy: onCopyLink
    })));
  }, [attributes, props, href, isLinkCardSelected, handleEdit, onRemove, onCut, handleSwitchStyle, onCopyLink]);

  var overlay = /*#__PURE__*/_createElement(LinkEditor, {
    ref: portalRef,
    displayType: 'card',
    nodeKey: nodeKey,
    text: text,
    href: href,
    onSave: onSave,
    onRemove: onRemove,
    onUnlink: onUnlink,
    locale: locale,
    controller: controller,
    onHide: handleEditorHide,
    onClickoutside: handleClickoutside,
    enableCard: enableCard
  });

  return /*#__PURE__*/_createElement(Portal, {
    className: "bi-link-card-portal",
    visible: visible,
    triggerRef: linkRef,
    overlay: overlay,
    portalMatchTrigger: false,
    container: scrollableContent,
    getPosition: getPositionTopLeft,
    offset: [0, offsetY],
    zoom: zoom
  }, renderCard);
};

export default LinkCardPortal;
//# sourceMappingURL=LinkCardPortal.js.map