{"version":3,"sources":["../../../../../../src/plugins/link/components/card/LinkCardInlineToolbar.tsx"],"names":["React","Button","RefreshIcon","InlineToolbar","defaultImageLayout","toolButtons","name","getToolButton","icon","handler","testid","LinkCardToolbarToolbar","props","triggerNode","locale","onRefresh","getCustomToolButtons","useMemo","refresh"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;qBAC4B,a;AAA5B,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT;AACA,SAASC,aAAT;AASA,IAAMC,kBAAkB,GAAG,CAAC;AAC1BC,EAAAA,WAAW,EAAE,CAAC;AACZC,IAAAA,IAAI,EAAE;AADM,GAAD;AADa,CAAD,CAA3B;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACD,IAAD,EAA2BE,IAA3B,EAAqDC,OAArD,EAAmEC,MAAnE,EAAsF;AAC1G,SAAO;AAAA,wBAAM,eAAC,MAAD;AAAQ,MAAA,MAAM,EAAEA,MAAhB;AAAwB,MAAA,OAAO,EAAED,OAAjC;AAAqE,MAAA,KAAK,EAAEH,IAA5E;AAAkF,MAAA,QAAQ,EAAE,KAA5F;AAAmG,MAAA,IAAI,EAAEE;AAAzG,MAAN;AAAA,GAAP;AACD,CAFD;;wBASwD,eAAC,WAAD,O;;AALxD,IAAMG,sBAAsD,GAAG,SAAzDA,sBAAyD,CAACC,KAAD,EAAW;AAAA,MAChEC,WADgE,GAC7BD,KAD6B,CAChEC,WADgE;AAAA,MACnDC,MADmD,GAC7BF,KAD6B,CACnDE,MADmD;AAAA,MAC3CC,SAD2C,GAC7BH,KAD6B,CAC3CG,SAD2C;AAGxE,MAAMC,oBAAoB,GAAGhB,KAAK,CAACiB,OAAN,CAAc,YAAM;AAC/C,WAAO;AACL,0BAAoBV,aAAa,CAACO,MAAM,CAACI,OAAR,QAAkCH,SAAlC,EAA6C,4BAA7C;AAD5B,KAAP;AAGD,GAJ4B,EAI1B,CAACA,SAAD,EAAYD,MAAZ,CAJ0B,CAA7B;AAMA,sBACE,eAAC,aAAD;AACE,IAAA,OAAO,MADT;AAEE,IAAA,WAAW,EAAED,WAFf;AAGE,IAAA,YAAY,EAAET,kBAHhB;AAIE,IAAA,iBAAiB,EAAEY;AAJrB,IADF;AAQD,CAjBD;;AAoBA,eAAeL,sBAAf","sourcesContent":["import * as React from 'react';\nimport { Button } from '@ali/we-design';\nimport { RefreshIcon } from './RefreshIcon';\nimport { InlineToolbar } from '../../../../index';\nimport { LinkPluginConfig } from '../../types';\n\nexport interface LinkCardToolbarProps {\n  locale: LinkPluginConfig['locale'];\n  triggerNode?: HTMLElement | undefined;\n  onRefresh?: () => void;\n}\n\nconst defaultImageLayout = [{\n  toolButtons: [{\n    name: 'linkCard.refresh',\n  }],\n}];\n\nconst getToolButton = (name: string | undefined, icon: React.ReactElement, handler: any, testid: string) => {\n  return () => <Button testid={testid} onClick={handler as React.MouseEventHandler} title={name} bordered={false} icon={icon} />;\n};\n\nconst LinkCardToolbarToolbar: React.FC<LinkCardToolbarProps> = (props) => {\n  const { triggerNode, locale, onRefresh } = props;\n\n  const getCustomToolButtons = React.useMemo(() => {\n    return {\n      'linkCard.refresh': getToolButton(locale.refresh, <RefreshIcon />, onRefresh, 'bi-toolbar-linkCard-refres'),\n    };\n  }, [onRefresh, locale]);\n\n  return (\n    <InlineToolbar\n      visible\n      triggerNode={triggerNode}\n      inlineLayout={defaultImageLayout}\n      customToolButtons={getCustomToolButtons}\n    />\n  );\n};\n\n\nexport default LinkCardToolbarToolbar;\n"],"file":"LinkCardInlineToolbar.js"}