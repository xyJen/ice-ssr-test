import React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Input } from '@ali/we-design';
import logger from '@ali/4ever-logger';
import * as actions from "../actions";
var PLACEHOLDER = 'https://';
export var SetInlineHrefMenu = function SetInlineHrefMenu(props) {
  var dataValue;
  var controller = props.controller;
  var _controller$value = controller.value,
      document = _controller$value.document,
      focusInline = _controller$value.focusInline;
  var parent = document.getParent(focusInline == null ? void 0 : focusInline.key);
  var isParentClickable = (parent == null ? void 0 : parent.isElement()) && parent.type === 'link';

  if (isParentClickable) {
    dataValue = parent.data.href;
  }

  var _React$useState = React.useState(dataValue),
      value = _React$useState[0],
      setValue = _React$useState[1];

  var inputRef = React.useRef(null);
  var handleBlur = React.useCallback(function (event) {
    if (isParentClickable) {
      if (value && value !== PLACEHOLDER) {
        controller.run('onAction', actions.updateLink(parent, parent.data.text || '', value));
        logger.sum('sidebar-link-update-link');
      } else {
        controller.run('onAction', actions.unwrapLink());
        setValue('');
        logger.sum('sidebar-link-unwrap-link');
      }
    } else if (value && value !== PLACEHOLDER) {
      controller.run('onAction', actions.wrapLink(controller.value.selection));

      var _parent = controller.value.document.getParent(focusInline == null ? void 0 : focusInline.key);

      if (!_parent) {
        return undefined;
      }

      controller.run('onAction', actions.updateLink(_parent, '', value));
      logger.sum('sidebar-link-wrap-link');
    } else {
      setValue('');
    }
  }, [isParentClickable, parent, value, controller]);
  var handleEnter = React.useCallback(function () {
    var _event, _event2, _inputRef$current;

    (_event = event) == null ? void 0 : _event.stopPropagation();
    (_event2 = event) == null ? void 0 : _event2.preventDefault();
    (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.blur();
  }, []);
  var handleChange = React.useCallback(function (event) {
    setValue(event.target.value);
  }, []);
  var handleFocus = React.useCallback(function (event) {
    if (!value) {
      setValue(PLACEHOLDER);
    }
  }, []);
  return /*#__PURE__*/_createElement(Input, {
    placeholder: PLACEHOLDER,
    onChange: handleChange,
    onBlur: handleBlur,
    onEnter: handleEnter,
    onFocus: handleFocus,
    value: value,
    ref: inputRef,
    allowClear: true,
    disabled: !focusInline
  });
};
//# sourceMappingURL=sidebarMenu.js.map