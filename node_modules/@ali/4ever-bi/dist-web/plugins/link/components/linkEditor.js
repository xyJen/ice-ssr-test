import _extends from "@babel/runtime/helpers/extends";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Radio, RadioGroup, theme, ToolbarDeleteLinkNormal } from '@ali/we-design';
import { ItemInput, SaveButton, RemoveButton, EditorWrapper, EditorContent, EditorFooter, RadioWrapper, ItemRadio } from "./styled";
import { ThemeProvider } from 'styled-components';
import { focusLinkEditor, hideLinkEditor, hideLinkEditorAndMoveToNextText } from "../actions";
import { useOnClickOutside } from '@ali/4ever-component';
import { isJustCreated, setJustCreated } from "../utils/linkStore";

function stopPropagation(event) {
  event.stopPropagation();
}

var isLinkDisplayType = function isLinkDisplayType(value) {
  return value === 'link' || value === 'card';
};

var LinkEditor = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var nodeKey = props.nodeKey,
      propsHref = props.href,
      propsText = props.text,
      _props$displayType = props.displayType,
      propsDisplayType = _props$displayType === void 0 ? 'link' : _props$displayType,
      locale = props.locale,
      controller = props.controller,
      onSave = props.onSave,
      onUnlink = props.onUnlink,
      onHide = props.onHide,
      onClickoutside = props.onClickoutside,
      enableCard = props.enableCard,
      showPlaceholder = props.showPlaceholder,
      textInput = props.textInputRef,
      hrefInput = props.hrefInputRef;

  var _React$useState = React.useState(propsHref),
      href = _React$useState[0],
      setHref = _React$useState[1];

  var _React$useState2 = React.useState(propsText),
      text = _React$useState2[0],
      setText = _React$useState2[1];

  var _React$useState3 = React.useState(propsDisplayType),
      displayType = _React$useState3[0],
      setDisplayType = _React$useState3[1];

  var inputFocused = React.useRef(false);
  React.useEffect(function () {
    if (propsHref) return;
    if (!nodeKey) return; // pureLink
    // 这个地方 node 的 key 可能会是 viewPack 的 key
    // 在调用 setJustCreated 的地方使用的 dataPack 中的 key
    // 因此取一下 dataPack 的 key

    var dataPackKey = nodeKey.split('-')[0];
    if (!isJustCreated(dataPackKey)) return;
    setJustCreated(dataPackKey, false); // 如果是占位符，直接 focus 标题输入框

    if (showPlaceholder && textInput != null && textInput.current) {
      textInput.current.focus();
      return;
    }

    if (hrefInput != null && hrefInput.current) hrefInput.current.focus();
  }, [propsHref, nodeKey, showPlaceholder]);
  useOnClickOutside(ref, onClickoutside);
  React.useEffect(function () {
    setText(propsText);
    setHref(propsHref);
  }, [propsText, propsHref]);
  var hide = React.useCallback(function () {
    onHide();

    if (showPlaceholder) {
      // 如果是占位符点击出现的编辑框，使用 esc 退出时，将光标移动到占位符外部
      controller.run('onAction', hideLinkEditorAndMoveToNextText());
    } else {
      controller.run('onAction', hideLinkEditor());
    }
  }, [controller, onHide, showPlaceholder]);
  var save = React.useCallback(function () {
    var trimedText = text.trim();
    var trimedHref = href.trim();

    if (trimedText.length || trimedHref.length) {
      onSave(trimedText, trimedHref, displayType || propsDisplayType);
    }

    onHide();
  }, [text, href, displayType, propsDisplayType, onSave, onHide]);
  var handleKeyDown = React.useCallback(function (event) {
    if (!event.key) {
      return;
    } // 防止 keydown 透出到编辑器


    event.stopPropagation();
    var key = event.key.toLowerCase(); // React event 没有这个属性，要到原生 event 上取
    // https://github.com/facebook/react/issues/13104

    if (event.nativeEvent.isComposing) {
      return;
    }

    if (key.toLowerCase() === 'escape' || event.keyCode === 27) {
      event.preventDefault(); // ESC 退出

      hide();
    } else if ((key === 'enter' || event.keyCode === 13) && inputFocused.current) {
      // Enter 保存
      event.preventDefault();
      save();
    }
  }, [hide, save]);
  var handleHrefChange = React.useCallback(function (e) {
    setHref(e.target.value);
  }, []);
  var handleTextChange = React.useCallback(function (e) {
    setText(e.target.value);
  }, []);
  var handleSave = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    save();
  }, [save]);
  var handleUnlink = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    onUnlink();
  }, [onUnlink]);
  var handleFocus = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
    inputFocused.current = true;
    controller.run('onAction', focusLinkEditor());
  }, [controller]);
  var handleBlur = React.useCallback(function () {
    inputFocused.current = false;
  }, []);
  var handleClick = React.useCallback(function (event) {
    return event.stopPropagation();
  }, []);
  var handleRadioClick = React.useCallback(function (e) {
    if (isLinkDisplayType(e)) {
      setDisplayType(e);
    }
  }, []);
  var saveButtonDisbaled = React.useMemo(function () {
    var trimedHref = href.trim();
    var trimedText = text.trim();
    var unchanged = trimedHref === propsHref.trim() && trimedText === propsText.trim() && propsDisplayType === displayType; // 当「链接」无内容或者未编辑时，不允许保存

    return trimedHref.length === 0 || unchanged;
  }, [href, text, displayType, propsHref, propsText, propsDisplayType]);
  return /*#__PURE__*/_createElement(EditorWrapper, {
    onClick: handleClick,
    "data-testid": "link-editor",
    ref: ref,
    onKeyDown: handleKeyDown
  }, /*#__PURE__*/_createElement(EditorContent, null, /*#__PURE__*/_createElement(ItemInput, null, /*#__PURE__*/_createElement("label", {
    htmlFor: "text"
  }, locale.editText), /*#__PURE__*/_createElement("input", {
    name: "text",
    type: "text",
    value: text,
    ref: textInput,
    placeholder: locale.editTextPlaceholder,
    onBlur: handleBlur,
    onChange: handleTextChange,
    onFocus: handleFocus,
    onMouseDown: stopPropagation,
    autoComplete: "off",
    "data-testid": "link-editor-input-text"
  })), /*#__PURE__*/_createElement(ItemInput, null, /*#__PURE__*/_createElement("label", {
    htmlFor: "href"
  }, locale.editHref), /*#__PURE__*/_createElement("input", {
    name: "href",
    type: "text",
    value: href,
    ref: hrefInput,
    placeholder: locale.editHrefPlaceholder,
    onBlur: handleBlur,
    onChange: handleHrefChange,
    onFocus: handleFocus,
    onMouseDown: stopPropagation,
    autoComplete: "off",
    "data-testid": "link-editor-input-href"
  })), enableCard && /*#__PURE__*/_createElement(ItemRadio, null, /*#__PURE__*/_createElement("label", {
    htmlFor: "displayType"
  }, locale.editStyle), /*#__PURE__*/_createElement(RadioWrapper, null, /*#__PURE__*/_createElement(RadioGroup, {
    onChange: handleRadioClick,
    value: displayType
  }, /*#__PURE__*/_createElement(ThemeProvider, {
    theme: {
      ui: _extends({}, theme, {
        padding: '8px'
      })
    }
  }, /*#__PURE__*/_createElement(Radio, {
    value: "link"
  }, locale.link), /*#__PURE__*/_createElement(Radio, {
    value: "card"
  }, locale.editStyleCard)))))), /*#__PURE__*/_createElement(EditorFooter, null, /*#__PURE__*/_createElement(RemoveButton, {
    onMouseDown: handleUnlink,
    "data-testid": "link-editor-unlink"
  }, /*#__PURE__*/_createElement(ToolbarDeleteLinkNormal, {
    style: {
      marginRight: 4
    }
  }), /*#__PURE__*/_createElement("span", {
    className: "text"
  }, locale.unlink)), /*#__PURE__*/_createElement(SaveButton, {
    type: 'primary',
    onMouseDown: handleSave,
    testid: "link-editor-save",
    disabled: saveButtonDisbaled
  }, /*#__PURE__*/_createElement("span", {
    className: "text"
  }, locale.save))));
});
export default /*#__PURE__*/React.memo(LinkEditor);
//# sourceMappingURL=linkEditor.js.map