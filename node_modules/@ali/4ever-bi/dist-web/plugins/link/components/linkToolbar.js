import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { Tooltip, WebBetaNormal } from '@ali/we-design';
import { ToolbarWrapper, LinkHref, LinkHrefWrapper, CardToolbarWrapper } from "./styled";
import { useOnClickOutside } from '@ali/4ever-component';
import { LinkCard } from "./card/LinkCard";
import ToolbarIcon from "./ToolbarIcon";

var _ref2 = /*#__PURE__*/_createElement(WebBetaNormal, null);

var LinkToolbar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var onEdit = props.onEdit,
      onRemove = props.onRemove,
      onCut = props.onCut,
      onUnlink = props.onUnlink,
      href = props.href,
      onHide = props.onHide,
      onClickoutside = props.onClickoutside,
      onCopy = props.onCopy,
      locale = props.locale,
      getLinkInfo = props.getLinkInfo,
      onToolbarSwitchStyle = props.onToolbarSwitchStyle,
      onOpenlink = props.onOpenlink,
      title = props.title,
      imgURL = props.imgURL,
      desc = props.desc,
      enableCard = props.enableCard,
      onMouseLeave = props.onMouseLeave,
      onMouseEnter = props.onMouseEnter,
      onCleanup = props.onCleanup;
  useOnClickOutside(ref, onClickoutside);
  var isMounted = React.useRef(false);

  var _React$useState = React.useState(imgURL),
      cardImgURL = _React$useState[0],
      setCardImgURL = _React$useState[1];

  var _React$useState2 = React.useState(title),
      cardTitle = _React$useState2[0],
      setCardTitle = _React$useState2[1];

  var _React$useState3 = React.useState(desc),
      cardDesc = _React$useState3[0],
      setCardDesc = _React$useState3[1];

  var _React$useState4 = React.useState('normal'),
      cardState = _React$useState4[0],
      setCardState = _React$useState4[1];

  React.useEffect(function () {
    isMounted.current = true;
    return function () {
      isMounted.current = false;
    };
  }, []);
  React.useEffect(function () {
    var handleKeyDown = function handleKeyDown(event) {
      if (!event.key) {
        return;
      }

      var key = event.key.toLowerCase();

      if (key.toLowerCase() === 'escape' || event.keyCode === 27) {
        event.preventDefault(); // ESC 退出

        onHide();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return function () {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [onHide]);
  var handleRefresh = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var info, _info$imgURL, newImgURL, _info$title, newTitle, _info$desc, newDesc;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(getLinkInfo && typeof getLinkInfo === 'function')) {
              _context.next = 19;
              break;
            }

            setCardState('loading');
            _context.prev = 2;
            _context.next = 5;
            return getLinkInfo(href);

          case 5:
            info = _context.sent;

            if (isMounted.current) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return");

          case 8:
            if (!info) {
              _context.next = 15;
              break;
            }

            // 请求成功
            _info$imgURL = info.imgURL, newImgURL = _info$imgURL === void 0 ? '' : _info$imgURL, _info$title = info.title, newTitle = _info$title === void 0 ? '' : _info$title, _info$desc = info.desc, newDesc = _info$desc === void 0 ? '' : _info$desc;
            setCardImgURL(newImgURL);
            setCardTitle(newTitle);
            setCardDesc(newDesc);
            setCardState('normal');
            return _context.abrupt("return");

          case 15:
            _context.next = 19;
            break;

          case 17:
            _context.prev = 17;
            _context.t0 = _context["catch"](2);

          case 19:
            // 请求失败，不更新数据,将卡片信息设置为 undefined
            setCardState('error');
            setCardImgURL(undefined);
            setCardTitle(undefined);
            setCardDesc(undefined);

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 17]]);
  })), [getLinkInfo, href, isMounted, setCardState, setCardImgURL, setCardTitle, setCardDesc]); // mount 时拉取数据

  React.useEffect(function () {
    if (enableCard) {
      if (imgURL === undefined && title === undefined && desc === undefined) {
        handleRefresh();
      } else {
        setCardState('normal');
      }
    }

    return function () {
      onCleanup();
    };
  }, [handleRefresh, imgURL, title, desc, setCardState, enableCard, onHide, onCleanup]); // unmount 时确保 onCleanup 执行

  React.useEffect(function () {
    return function () {
      onCleanup();
    };
  }, [onCleanup]); // 切换展示风格时，将请求到的数据发出

  var handleSwitchStyle = React.useCallback(function (style) {
    onToolbarSwitchStyle(href, style, cardTitle, cardDesc, cardImgURL);
  }, [href, cardTitle, cardDesc, cardImgURL, onToolbarSwitchStyle]);
  var handleVisit = React.useCallback(function (event) {
    event.preventDefault();
    onOpenlink();
  }, [onOpenlink]);
  var handleCopy = React.useCallback(function (event) {
    event == null ? void 0 : event.preventDefault();
    onCopy(href);
  }, [href, onCopy]);
  var handleRemove = React.useCallback(function (event) {
    event == null ? void 0 : event.preventDefault();
    event == null ? void 0 : event.stopPropagation();
    onRemove();
  }, [onRemove]);
  var handleUnlink = React.useCallback(function (event) {
    event == null ? void 0 : event.preventDefault();
    event == null ? void 0 : event.stopPropagation();
    onUnlink();
  }, [onUnlink]);

  var LinkCardToolbar = /*#__PURE__*/_createElement(CardToolbarWrapper, {
    "data-testid": "link-toolbar",
    ref: ref,
    onMouseLeave: onMouseLeave,
    onMouseEnter: onMouseEnter
  }, /*#__PURE__*/_createElement(LinkCard, {
    displayType: 'link',
    state: cardState,
    href: href,
    onCopy: onCopy,
    onDelete: onRemove,
    onCut: onCut,
    onUnlink: onUnlink,
    onEdit: onEdit,
    title: cardTitle,
    imgURL: cardImgURL,
    desc: cardDesc,
    locale: locale,
    readonly: false,
    isMobile: false,
    onOpenLink: onOpenlink,
    onSwitchStyle: handleSwitchStyle,
    onRefresh: handleRefresh
  }));

  var NormalToolbar = /*#__PURE__*/_createElement(ToolbarWrapper, {
    "data-testid": "link-toolbar",
    ref: ref,
    onMouseLeave: onMouseLeave,
    onMouseEnter: onMouseEnter
  }, _ref2, /*#__PURE__*/_createElement(LinkHrefWrapper, null, /*#__PURE__*/_createElement(Tooltip, {
    placement: "bottom",
    title: locale.openLinkTip
  }, /*#__PURE__*/_createElement(LinkHref, {
    onMouseDown: handleVisit,
    "data-testid": "link-toolbar-visit"
  }, href))), /*#__PURE__*/_createElement(ToolbarIcon, {
    "data-testid": "link-toolbar-edit",
    type: "editor-border-beta",
    tip: locale.edit,
    onMouseDown: onEdit
  }), /*#__PURE__*/_createElement(ToolbarIcon, {
    "data-testid": "link-toolbar-copy",
    type: "copy-beta",
    tip: locale.copy,
    onMouseDown: handleCopy
  }), /*#__PURE__*/_createElement(ToolbarIcon, {
    "data-testid": "link-toolbar-unlink",
    type: "delete-link-beta",
    tip: locale.unlink,
    onMouseDown: handleUnlink
  }), /*#__PURE__*/_createElement(ToolbarIcon, {
    "data-testid": "link-toolbar-remove",
    type: "delete-beta",
    tip: locale["delete"],
    onMouseDown: handleRemove
  }));

  return enableCard ? LinkCardToolbar : NormalToolbar;
});
export default /*#__PURE__*/React.memo(LinkToolbar);
//# sourceMappingURL=linkToolbar.js.map