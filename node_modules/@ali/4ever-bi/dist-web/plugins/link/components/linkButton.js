import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import * as React from 'react';
var _createElement = /*#__PURE__*/React.createElement;
import { AddLinkButton, DeleteLinkButton } from '@ali/we-toolbar';
import { environment } from '@ali/4ever-cangjie';
import { Image } from '@ali/4ever-mo';
import { PluginRoles } from '@ali/4ever-bamboo';
import { ToolbarMode, IconButtonShortcut } from '@ali/4ever-component';
import { wrapLink, unwrapPureLink, removeLink } from "../actions";
import { isLink, isSelectionInLink } from "../utils";
;
import { LINK_INSERT_HOT_KEY_TIP } from "../utils/hotKeyTips";
import { tryGetSelectedLinkPlaceholder } from "../utils/isSelectionInLink";
var MOD = environment.IS_MAC ? '⌘' : 'Ctrl';
var SHORTCUT = MOD + "+K";

function isSelectionInDecoration(selection, decotation) {
  var focus = selection.focus;
  return focus.isTextPoint() && focus.key === decotation.start.key && focus.key === decotation.end.key && focus.offset >= decotation.start.offset && focus.offset <= decotation.end.offset;
}

var LinkButton = function LinkButton(props) {
  var locale = props.locale,
      controller = props.controller,
      toolbarMode = props.toolbarMode,
      rest = _objectWithoutPropertiesLoose(props, ["locale", "controller", "toolbarMode"]);

  var value = controller.value;
  var _controller$value = controller.value,
      startBlock = _controller$value.startBlock,
      activeMarks = _controller$value.activeMarks,
      selection = _controller$value.selection,
      document = _controller$value.document;
  var shortcut = toolbarMode === ToolbarMode["double"] ? " " + SHORTCUT : '';
  var decrs = React.useMemo(function () {
    if (startBlock) {
      return controller.run('decorateNode', startBlock);
    }

    return [];
  }, [controller, startBlock]);
  var isSelectionInPureLink = React.useMemo(function () {
    var decrsInSelection = decrs.filter(function (decr) {
      return isSelectionInDecoration(selection, decr);
    });
    var marks = decrsInSelection.map(function (decr) {
      return decr.mark;
    }).concat(activeMarks);
    return marks.some(function (_ref) {
      var type = _ref.type;
      return type === 'link';
    }) && !marks.some(function (_ref2) {
      var type = _ref2.type;
      return type === 'unlink';
    });
  }, [decrs, activeMarks, selection]);
  var ploceholder = tryGetSelectedLinkPlaceholder(controller.value, locale.addLinkPlaceholder);
  var handleClick = React.useCallback(function () {
    if (isSelectionInPureLink) {
      var _controller$value2 = controller.value,
          _document = _controller$value2.document,
          _selection = _controller$value2.selection;
      var focus = _selection.focus;
      var linkDecoration = decrs.find(function (_ref3) {
        var mark = _ref3.mark,
            start = _ref3.start,
            end = _ref3.end;
        return mark.type === 'link' && focus.key === start.key && focus.offset >= start.offset && focus.offset <= end.offset;
      });

      if (!linkDecoration) {
        return;
      }

      var mark = linkDecoration.mark,
          start = linkDecoration.start;
      var data = mark.data;

      var node = _document.getNode(start.key);

      controller.run('onAction', unwrapPureLink(node, start.offset, data.href));
    } else {
      if (ploceholder) {
        // 在占位符进行取消链接时，直接执行删除，来自：https://work.aone.alibaba-inc.com/issue/34949369
        controller.run('onAction', removeLink(ploceholder));
      } else {
        controller.run('onAction', wrapLink());
      }
    }
  }, [controller, decrs, isSelectionInPureLink, ploceholder]);
  var disabled = React.useMemo(function () {
    var inlines = document.getLeafInlinesAtRange(selection);
    var isInvalidInlineInSelection = inlines.some(function (inline) {
      return !isLink(inline) && !Image.isImage(inline);
    });
    return isInvalidInlineInSelection || controller.query('isSelectionInListSymbol');
  }, [selection, document, value]);
  var isInLink = isSelectionInLink(controller.value) || isSelectionInPureLink;
  return isInLink ? /*#__PURE__*/_createElement(DeleteLinkButton, _extends({}, rest, {
    shortcutText: shortcut,
    testid: "bi-toolbar-unlink",
    onClick: handleClick,
    disabled: disabled,
    title: locale == null ? void 0 : locale.link,
    role: PluginRoles.link,
    tooltip: /*#__PURE__*/_createElement(IconButtonShortcut, {
      title: locale == null ? void 0 : locale.unlink,
      shortcut: LINK_INSERT_HOT_KEY_TIP,
      description: "Markdown: []() " + locale.space
    })
  })) : /*#__PURE__*/_createElement(AddLinkButton, _extends({}, rest, {
    shortcutText: shortcut || LINK_INSERT_HOT_KEY_TIP,
    tooltip: /*#__PURE__*/_createElement(IconButtonShortcut, {
      title: locale == null ? void 0 : locale.link,
      shortcut: LINK_INSERT_HOT_KEY_TIP,
      description: "Markdown: []() " + locale.space
    }),
    testid: "bi-toolbar-link",
    onClick: handleClick,
    disabled: disabled,
    role: PluginRoles.linkDelete
  }));
};

export default LinkButton;
//# sourceMappingURL=linkButton.js.map