function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { Link } from '@ali/4ever-mo';
import { Text } from '@ali/4ever-cangjie';
export function getSelectedLinkUrl(controller) {
  return tryGetSelectedTextLink(controller) || tryGetSelectedPureLink(controller) || '';
}
export function shouldRenderContextMenu(controller) {
  return Boolean(getSelectedLinkUrl(controller));
}

function tryGetSelectedTextLink(controller) {
  var value = controller.value;
  var document = value.document,
      selection = value.selection;
  var startKey = selection.getStart(document).key;

  if (!startKey) {
    return false;
  }

  var linkNode = document.getClosest(startKey, function (node) {
    var _node$data, _node$data$cardInfo, _node$data2;

    return Link.isLink(node) && ((_node$data = node.data) == null ? void 0 : (_node$data$cardInfo = _node$data.cardInfo) == null ? void 0 : _node$data$cardInfo.displayType) !== 'card' && ((_node$data2 = node.data) == null ? void 0 : _node$data2.href);
  });

  if (linkNode) {
    return linkNode.data.href;
  }

  return false;
}

function tryGetSelectedPureLink(controller) {
  var value = controller.value,
      view = controller.view;
  var startBlock = value.startBlock,
      selection = value.selection;

  if (!startBlock) {
    return false;
  }

  var linkMark = getSelectedLinkMark(selection, view);

  if (linkMark) {
    return linkMark.data.href;
  }

  return false;
}

function getSelectedLinkMark(selection, view) {
  var focus = selection.focus,
      anchor = selection.anchor;

  if (focus.isTextPoint()) {
    var linkMark = getLinkMark(focus, view);

    if (linkMark) {
      return linkMark;
    }
  }

  if (anchor.isTextPoint()) {
    var _linkMark = getLinkMark(anchor, view);

    if (_linkMark) {
      return _linkMark;
    }
  }

  return null;
}

function getLinkMark(textPoint, view) {
  var node = view.getNode(textPoint.key);

  if (Text.isText(node)) {
    for (var _iterator = _createForOfIteratorHelperLoose(node.leaves), _step; !(_step = _iterator()).done;) {
      var leaf = _step.value;
      var linkMark = leaf.marks.find(function (mark) {
        var _mark$data, _mark$data2;

        return mark.type === 'link' && typeof ((_mark$data = mark.data) == null ? void 0 : _mark$data.offsetInNode) === 'number' && typeof ((_mark$data2 = mark.data) == null ? void 0 : _mark$data2.href) === 'string' && mark.data.offsetInNode <= textPoint.offset && mark.data.offsetInNode + mark.data.href.length >= textPoint.offset;
      });

      if (linkMark && !leaf.marks.some(function (_ref) {
        var type = _ref.type;
        return type === 'unlink';
      })) {
        return linkMark;
      }
    }
  }

  return null;
}
//# sourceMappingURL=getSelectedLinkUrl.js.map