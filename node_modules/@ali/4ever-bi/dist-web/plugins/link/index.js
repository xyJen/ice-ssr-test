import _extends from "@babel/runtime/helpers/extends";
import { LinkPlugin } from '@ali/4ever-bamboo';
import toolbar from "./toolbar";
import menubar from "./menubar";
import createRenderNode from "./createRenderNode";
import createRenderMark from "./createRenderMark";
import onAction from "./handlers/onAction";
import createOnKeyDown from "./handlers/createOnKeyDown";
import onCangjieCopyOrCut from "./handlers/onCangjieCopyorCut";
import onCangjieInput from "./handlers/onCangjieInput";
import createOnCangjiePaste from "./handlers/createOnCangjiePaste";
import createInsertLink from "./commands/createInsertLink";
import createUnwrapLink from "./commands/createUnwrapLink";
import createCopyLink from "./commands/createCopyLink";
import createUpdatePureLinkWithCardInfo from "./commands/createUpdatePureLinkWithCardInfo";
import createSaveLinkcard from "./commands/createSaveLinkCard";
import quickInsert from "./quickInsertConfig";
import * as actions from "./actions";
import { isSelectionInLink } from "./utils";
import locale from "../../locales/zh_CN";
import createShowLinkPastePanel from "./commands/showLinkPastePanel";
import sidebar from "./sidebar";
import { queries } from "./queries";
import createRenderToolbar from "./createRenderToolbar";
import { moFactory } from '@ali/4ever-plugin-link';
export { actions };

function createLinkPlugin(config) {
  var _config$clipboard;

  if (config === void 0) {
    config = {};
  }

  var linkConfig = _extends({
    hotkey: 'mod+k',
    protocolAllowList: ['http:', 'https:', 'dingtalk:', 'taobao:'],
    locale: locale.link.locale
  }, config.link);

  var serializer = (_config$clipboard = config.clipboard) == null ? void 0 : _config$clipboard.serializer;

  var linkPlugin = _extends({}, moFactory({}), {
    toolbar: toolbar(linkConfig.locale),
    menubar: menubar(linkConfig.locale),
    sidebar: sidebar(linkConfig),
    renderNode: createRenderNode(linkConfig, config.draggable),
    renderToolbar: createRenderToolbar(linkConfig.locale),
    shouldNodeComponentUpdate: function shouldNodeComponentUpdate(_ref, _props, _editor, next) {
      var node = _ref.node;

      if (node.type === 'link') {
        return true;
      }

      return next();
    },
    // @ts-ignore onAction should return void
    onAction: onAction,
    onKeyDown: createOnKeyDown(linkConfig.hotkey || '', linkConfig.locale.addLinkPlaceholder),
    onCangjieInput: onCangjieInput,
    onCangjieCopy: onCangjieCopyOrCut,
    onCangjieCut: onCangjieCopyOrCut,
    onCangjiePaste: createOnCangjiePaste(config, linkConfig),
    commands: {
      insertLink: createInsertLink(linkConfig.locale),
      unwrapLink: createUnwrapLink(linkConfig.protocolAllowList),
      updatePureLinkWithCardInfo: createUpdatePureLinkWithCardInfo(linkConfig.getLinkInfo),
      saveLinkCard: createSaveLinkcard(linkConfig.getLinkInfo),
      copyLink: createCopyLink(serializer),
      showLinkPastePanel: createShowLinkPastePanel(linkConfig.enableLinkCardBlock)
    },
    queries: queries,
    locale: linkConfig.locale || {},
    quickInsert: quickInsert,
    models: {
      klass: 'inline',
      type: 'link'
    }
  }); // 支持 purelink 识别的情况下，添加 decorateNode 和 renderMark


  if (!linkConfig.disableTextRecognize) {
    // @ts-ignore
    linkPlugin.decorateNode = LinkPlugin.createDecorateNode(linkConfig.protocolAllowList || []);
    linkPlugin.renderMark = createRenderMark(linkConfig);
  }

  return linkPlugin;
}

createLinkPlugin.actions = actions;
createLinkPlugin.utils = {
  isSelectionInLink: isSelectionInLink,
  createCopyLink: createCopyLink
};
export default createLinkPlugin;
//# sourceMappingURL=index.js.map