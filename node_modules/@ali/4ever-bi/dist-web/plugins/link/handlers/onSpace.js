import { Commands, Text } from '@ali/4ever-cangjie';
import { wrapLink } from "../actions";
import { setJustCreated } from "../utils/linkStore";
import { END_WITH_MARKDOWN_LINK } from '@ali/4ever-plugin-link';
export default function onSpace(event, controller, next) {
  var value = controller.value;
  var anchorText = value.anchorText,
      selection = value.selection,
      document = value.document;
  if (!selection || !anchorText || selection.isExpanded) return next();

  var _selection$convertToT = selection.convertToTextPoints(document),
      anchor = _selection$convertToT.anchor;

  var text = anchorText.text.slice(0, anchor.offset);
  var matches = text.match(END_WITH_MARKDOWN_LINK);
  if (!matches) return next();
  var matchText = matches[0],
      title = matches[1],
      href = matches[2]; // 排除同时命中 ![]() 图片格式的情况

  if (text.length > matchText.length && text[text.length - matchText.length - 1] === '!') return next(); // [](abc) 类似这样的文本暂时不予处理，可能导致空 text 的 Link 元素

  if (!title && href) return next();
  event.preventDefault(); // 删除 markdown 文本

  controller.command(Commands.moveAnchorBackward, matchText.length).command(Commands.del).dispatch('createTriggerMarkdownAction', {
    mdType: 'link'
  }); // []() 时插入 placeholder

  if (!title && !href) {
    return controller.run('onAction', wrapLink());
  } // 插入链接 Inline


  controller.command(Commands.insertInline, {
    type: 'link',
    nodes: [Text.create(title)],
    data: {
      href: encodeURI(href)
    }
  }); // 打开链接编辑框

  var node = controller.value.anchorInline;

  if (node && (!title || !href)) {
    setJustCreated(node.key, true);
    return controller;
  } // 链接填写完整，光标移动到下一个 Text 开头


  return controller.command(Commands.moveToStartOfNextText);
}
//# sourceMappingURL=onSpace.js.map