import { createLinkify as Linkify, matchesLink } from '@ali/4ever-utils';
import isUrl from 'is-url';
import { RangeSelection, Commands, Selection, TextPoint, constants } from '@ali/4ever-cangjie';
import { hasLink } from "../utils";
import { showLinkPastePanel } from "../actions";
/**
 * 粘贴面板会拦截回车事件，这里在需要在 wraplink 时，不走链接识别逻辑
 * @see https://aone.alibaba-inc.com/v2/project/897543/bug/41483477# 《在链接后按回车无反应》
 * @param controller
 * @param text
 * @param linkify
 * @param next
 * @returns
 */

function tryWrapLink(controller, text, linkify, next) {
  var value = controller.value;
  var selection = value.selection,
      document = value.document;

  if (selection && selection.isCollapsed) {
    return next();
  }

  var fragment = document.getFragmentAtRange(RangeSelection.create(selection));

  if (linkify.test(fragment.text)) {
    return next();
  }

  if (hasLink(value)) {
    controller.command('unwrapLink');
  }

  return controller.command(Commands.wrapInline, {
    type: 'link',
    data: {
      href: text
    }
  }).command(Commands.moveToEnd);
}

export default function createOnCangjiePaste(config, linkConfig) {
  var protocolAllowList = linkConfig.protocolAllowList,
      getLinkInfo = linkConfig.getLinkInfo,
      enableCard = linkConfig.enableCard;
  var linkify = Linkify(protocolAllowList);
  return function onCangjiePaste(event, controller, next) {
    var clipboardData = controller.query('getClipboardData', event);

    if (!clipboardData) {
      return next();
    }

    var receiveType = clipboardData.getFirstReceiveType();
    var html = clipboardData.getData('text/html');
    var text = clipboardData.getData('text/plain'); // BACKGROUND：引用块会将锚点地址 text/plain 中，方便发送到 IM 消息等时，其他用户能锚点定位回对应引用位置
    // 因此，当检测到为引用块时，不做识别为 URL 的处理

    var hasRefblock = clipboardData.hasData(constants.MIME_TYPES.REFBLOCK);

    if (hasRefblock) {
      return next();
    } // HACK: 处理 <a data-title="..." href="...">href</a>，以支持钉钉文档拷贝链接粘贴需求
    // 需求背景：
    //   1. 粘贴到钉钉文档内，显示文档标题
    //   2. 粘贴到浏览器地址栏等，粘贴结果为链接


    if (receiveType !== 'text' && receiveType !== 'html') {
      return next();
    }

    var isTextUrl = isUrl(text);

    if (!isTextUrl || html && html.indexOf('data-title') > -1) {
      return next();
    } // 粘贴纯文本 URL 时，若当前为 collased 选区，则判断是否在链接/图片 md 语法内
    // 若是，则直接插入文本，不再转为 link


    var focus = controller.value.selection.focus;

    if (!html && isTextUrl && controller.value.selection.isCollapsed && focus.isTextPoint() && focus.offset > 0) {
      var _controller$value$sta;

      var focusText = ((_controller$value$sta = controller.value.startText) == null ? void 0 : _controller$value$sta.text) || '';
      var insertedText = "" + focusText.slice(0, focus.offset) + text + focusText.slice(focus.offset);

      if (!matchesLink(linkify, insertedText)) {
        return controller.command(Commands.insertText, text).command('showClipboard', Selection.create({
          anchor: focus,
          focus: TextPoint.create({
            key: focus.key,
            offset: focus.offset + text.length
          })
        }));
      }
    }

    return tryWrapLink(controller, text, linkify, function () {
      // 链接自动转卡片逻辑
      var customPanel = controller.value.data.customPanel; // 文档链接不做转卡片处理，后续用 hetu 专门替代掉

      if (!customPanel && enableCard) {
        controller.run('onAction', showLinkPastePanel(text, getLinkInfo));
      }

      return next();
    });
  };
}
//# sourceMappingURL=createOnCangjiePaste.js.map