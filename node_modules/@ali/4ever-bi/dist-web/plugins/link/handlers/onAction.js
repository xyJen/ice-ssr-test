import { Commands, ContextMenu } from '@ali/4ever-cangjie';
import { copyToClipboard } from '@ali/4ever-bamboo';
import { hideCustomPastePanel } from '@ali/4ever-plugin-clipboard';
import { LINK_HIDE_EDITOR, LINK_REMOVE, LINK_UPDATE, LINK_WRAP, LINK_UNWRAP, LINK_UNWRAP_CARD, LINK_REMOVE_PURE, LINK_UPDATE_PURE, LINK_FOCUS_EDITOR, LINK_UNWRAP_PURE_LINK, LINK_REMOVE_INJECTED_CARDINFO, LINK_INJECT_CARDINFO, LINK_COPY_LINK, LINK_CUT_LINK, LINK_SWITCH_DISPLAYTYPE, LINK_SWITCH_LINK_TO_CARD, LINK_SAVE_LINK_CARD, LINK_HOVER_LINK_CARD, LINK_EDIT_LINK_CARD, LINK_CLICK_PLACEHOLDER, LINK_SHOW_LINK_PASRE_PANEL, LINK_CUT_PURE, LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT, LINK_OPEN } from "../actions";
import { updateLink, wrapLink, removeLink, removePureLink, updatePureLink, unwrapPureLink, updateLinkCardInfo, injectCardInfo, removeinjectedCardInfo, unwrapLinkCard, switchLinkDisplayType } from "../commands";
var ACTION_COPY = ContextMenu.ACTION_COPY;
export default function onAction(action, controller, next) {
  var type = action.type,
      payload = action.payload;

  if (type === LINK_HIDE_EDITOR) {
    controller.command(Commands.focus); // 若是在末尾取消编辑，则跳出当前链接

    var _controller$value = controller.value,
        selection = _controller$value.selection,
        startInline = _controller$value.startInline;

    if (selection.isCollapsed && startInline && selection.anchor.isAtEndOfNode(startInline)) {
      controller.command(Commands.moveToStartOfNextText);
    }

    return controller;
  }

  if (type === LINK_HIDE_EDITOR_AND_MOVE_NEXT_TEXT) {
    controller.command(Commands.focus).command(Commands.moveToStartOfNextText);
    return controller;
  }

  if (type === LINK_WRAP) {
    var range = payload.range;

    if (range) {
      controller.command(Commands.select, range);
    }

    return controller.command(Commands.focus).command(wrapLink);
  }

  if (type === LINK_UNWRAP) {
    return controller.command('unwrapLink');
  }

  if (type === LINK_UNWRAP_CARD) {
    var _ref = payload,
        node = _ref.node;
    return controller.command(unwrapLinkCard, node);
  }

  if (type === LINK_REMOVE) {
    var _ref2 = payload,
        _node = _ref2.node;
    return removeLink(controller, _node);
  }

  if (type === LINK_UPDATE) {
    var _ref3 = payload,
        _node2 = _ref3.node,
        text = _ref3.text,
        href = _ref3.href,
        cardInfo = _ref3.cardInfo;

    if (cardInfo) {
      return updateLinkCardInfo(controller, _node2, text, href, cardInfo);
    }

    return updateLink(controller, _node2, text, href);
  }

  if (type === LINK_CUT_PURE) {
    var _ref4 = payload,
        _node3 = _ref4.node,
        offset = _ref4.offset,
        _href = _ref4.href;
    copyToClipboard(_href);
    return removePureLink(controller, _node3, offset, _href);
  }

  if (type === LINK_REMOVE_PURE) {
    var _ref5 = payload,
        _node4 = _ref5.node,
        _offset = _ref5.offset,
        _href2 = _ref5.href;
    return removePureLink(controller, _node4, _offset, _href2);
  }

  if (type === LINK_UPDATE_PURE) {
    var _ref6 = payload,
        _node5 = _ref6.node,
        _text = _ref6.text,
        _href3 = _ref6.href,
        _offset2 = _ref6.offset,
        srcHref = _ref6.srcHref,
        _cardInfo = _ref6.cardInfo,
        needFetchLinkInfo = _ref6.needFetchLinkInfo;

    if (_cardInfo) {
      return controller.command('updatePureLinkWithCardInfo', _node5, _offset2, _text, _href3, srcHref, _cardInfo, needFetchLinkInfo);
    }

    return updatePureLink(controller, _node5, _offset2, _text, _href3, srcHref);
  }

  if (type === LINK_FOCUS_EDITOR) {
    return controller.command(Commands.blur);
  }

  if (type === LINK_UNWRAP_PURE_LINK) {
    var _ref7 = payload,
        _node6 = _ref7.node,
        _offset3 = _ref7.offset,
        _href4 = _ref7.href;
    return controller.command(unwrapPureLink, _node6, _offset3, _href4);
  }

  if (type === LINK_INJECT_CARDINFO) {
    var _ref8 = payload,
        _node7 = _ref8.node,
        _cardInfo2 = _ref8.cardInfo,
        _range = _ref8.range;
    return controller.command(injectCardInfo, _node7, _cardInfo2, _range);
  }

  if (type === LINK_REMOVE_INJECTED_CARDINFO) {
    var _ref9 = payload,
        _node8 = _ref9.node;
    return controller.command(removeinjectedCardInfo, _node8);
  }

  if (type === LINK_COPY_LINK) {
    var _ref10 = payload,
        _node9 = _ref10.node;
    controller.command('copyLink', _node9);
    return controller;
  }

  if (type === LINK_CUT_LINK) {
    var _ref11 = payload,
        _node10 = _ref11.node;
    controller.command('copyLink', _node10);
    removeLink(controller, _node10);
    return controller;
  }

  if (type === LINK_SWITCH_DISPLAYTYPE) {
    // 切换卡片显示类型后，隐藏custom面板 to fix: https://work.aone.alibaba-inc.com/issue/44255401
    controller.run('onAction', hideCustomPastePanel());
    var _ref12 = payload,
        _node11 = _ref12.node,
        displayType = _ref12.displayType;
    return controller.command(switchLinkDisplayType, _node11, displayType);
  }

  if (type === LINK_EDIT_LINK_CARD) {
    return controller.command('editLink');
  }

  if (type === LINK_HOVER_LINK_CARD) {
    return controller.command('hoverLink');
  }

  if (type === LINK_CLICK_PLACEHOLDER) {
    return controller.command('linkPlaceholder');
  }

  if (type === LINK_SWITCH_LINK_TO_CARD) {
    // 切换卡片显示类型后，隐藏custom面板 to fix: https://work.aone.alibaba-inc.com/issue/44255401
    controller.run('onAction', hideCustomPastePanel());
    var _ref13 = payload,
        _node12 = _ref13.node,
        _text2 = _ref13.text,
        _href5 = _ref13.href,
        _cardInfo3 = _ref13.cardInfo;

    if (_cardInfo3) {
      return updateLinkCardInfo(controller, _node12, _text2, _href5, _cardInfo3);
    }

    return updateLink(controller, _node12, _text2, _href5);
  }

  if (type === LINK_SAVE_LINK_CARD) {
    var _ref14 = payload,
        _node13 = _ref14.node,
        _text3 = _ref14.text,
        _href6 = _ref14.href;
    return controller.command('saveLinkCard', _node13, _text3, _href6);
  }

  if (type === LINK_SHOW_LINK_PASRE_PANEL) {
    var _ref15 = payload,
        _text4 = _ref15.text,
        getLinkInfo = _ref15.getLinkInfo;
    return controller.command('showLinkPastePanel', _text4, getLinkInfo);
  }

  if (type === LINK_OPEN) {
    var _ref16 = payload,
        _href7 = _ref16.href;
    return controller.command('openLink', _href7);
  }

  return next();
}
//# sourceMappingURL=onAction.js.map