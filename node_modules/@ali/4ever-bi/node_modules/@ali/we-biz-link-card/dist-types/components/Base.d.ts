export declare type CardDisplayStyle = 'popup' | 'indoc';
export declare type URLLinkCardBaseState = {
    readonly: boolean;
    isMobile: boolean;
    url: string;
    isSelected?: boolean;
    cardStyle: CardDisplayStyle;
    locale: {
        copyTooltip?: string;
        unlinkTooltip?: string;
        editTooltip?: string;
        errorDesc?: string;
        error?: string;
    };
    onSwitchStyle?: (style: CardDisplayStyle, viewType: 'text' | 'abstract' | 'preview') => void;
    onOpenURL?: (url: string) => void;
    editBtnTestID?: string;
    copyBtnTestID?: string;
    cutBtnTestID?: string;
    unlinkBtnTestID?: string;
    deleteBtnTestID?: string;
    switchStyleBtnTestID?: string;
    linkStyleBtnTestID?: string;
    cardStyleBtnTestID?: string;
    cardTestID?: string;
    enablePreview?: boolean;
};
export interface URLInfo {
    title: string;
    desc: string;
    imgURL: string;
}
export declare type URLLinkCardLoadingState = {
    state: 'loading';
} & URLLinkCardBaseState;
export declare type URLLinkCardErrorState = {
    state: 'error';
    urlInfo: URLInfo;
    onRefresh: () => void;
    onEdit?: () => void;
    onCopy?: () => void;
    onCut?: () => void;
    onDelete?: () => void;
    onUnlink?: () => void;
    /**
   * 自定义滚动容器
   */
    getContainer?: () => HTMLElement;
} & URLLinkCardBaseState;
export declare type LinkType = 'gist' | 'framer' | 'figma' | 'yuque';
export declare type URLLinkCardNormalState = {
    linkType?: LinkType;
    state: 'normal';
    urlInfo: URLInfo;
    onEdit?: () => void;
    onCopy?: () => void;
    onCut?: () => void;
    onDelete?: () => void;
    onUnlink?: () => void;
    /**
     * 自定义滚动容器
     */
    getContainer?: () => HTMLElement;
} & URLLinkCardBaseState;
export declare const URLLinkCardHeight = 80;
export declare const ImagePlaceholder: () => JSX.Element;
export declare class UnsupportedValueError extends Error {
    constructor(value: never);
}
